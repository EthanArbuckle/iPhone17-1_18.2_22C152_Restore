void sub_100139B20(id a1, BOOL a2)
{
  __AXSVoiceOverTouchSetEnabledAndAutoConfirmUsage(a2);
}

BOOL sub_100139B28(id a1)
{
  return _AXSVoiceOverTouchEnabled() != 0;
}

void sub_100139F00(uint64_t a1, uint64_t a2)
{
}

void sub_10013A304(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10013A31C(uint64_t a1)
{
  v2 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315138;
    v9 = "-[ADOpportuneSpeakingVoiceActivityModel setSpeakable:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s OPPSPK - Listening for voice pause", buf, 0xCu);
  }
  v3 = +[AFHeadphonesAnnouncementRequestCapabilityProvider provider];
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10013A450;
  v5[3] = &unk_100503630;
  v4 = *(void **)(a1 + 40);
  v5[4] = *(void *)(a1 + 32);
  id v6 = v4;
  long long v7 = *(_OWORD *)(a1 + 48);
  [v3 fetchCurrentlyRoutedHeadphonesCBUUIDWithCompletion:v5];
}

void sub_10013A450(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (v4)
  {
    objc_storeStrong((id *)(*(void *)(a1 + 32) + 32), a2);
    v5 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 32);
      *(_DWORD *)buf = 136315394;
      v21 = "-[ADOpportuneSpeakingVoiceActivityModel setSpeakable:]_block_invoke";
      __int16 v22 = 2112;
      uint64_t v23 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "%s OPPSPK - Chose device %@", buf, 0x16u);
    }
    id v7 = objc_alloc_init((Class)CSOpportuneSpeakListenerOption);
    [v7 setDeviceId:*(void *)(*(void *)(a1 + 32) + 32)];
    [v7 setOpportuneSpeakListeningType:0];
    v8 = [*(id *)(a1 + 32) _detector];
    float v9 = *(double *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
    float v10 = *(double *)(*(void *)(*(void *)(a1 + 56) + 8) + 24);
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472;
    v18[2] = sub_10013A6EC;
    v18[3] = &unk_1005035E0;
    v11 = *(void **)(a1 + 40);
    v18[4] = *(void *)(a1 + 32);
    id v19 = v11;
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472;
    v16[2] = sub_10013A7C0;
    v16[3] = &unk_100503608;
    v12 = *(void **)(a1 + 40);
    v16[4] = *(void *)(a1 + 32);
    id v17 = v12;
    *(float *)&double v13 = v9;
    *(float *)&double v14 = v10;
    [v8 listenForPauseWithOptions:v7 forPause:1 maxDelay:v18 stopOnDetection:v16 executeOnSuccess:v13 onFail:v14];
  }
  else
  {
    v15 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      v21 = "-[ADOpportuneSpeakingVoiceActivityModel setSpeakable:]_block_invoke";
      _os_log_error_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "%s No preferred external headphones route found", buf, 0xCu);
    }
    [*(id *)(*(void *)(a1 + 32) + 8) modelWithIdentifier:*(void *)(*(void *)(a1 + 32) + 48) didUpdateScore:*(void *)(a1 + 40) forSpeakable:0.0];
  }
}

uint64_t sub_10013A6EC(uint64_t a1)
{
  v2 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v7 = 136315138;
    v8 = "-[ADOpportuneSpeakingVoiceActivityModel setSpeakable:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s OPPSPK - Voice pause detected", (uint8_t *)&v7, 0xCu);
  }
  LODWORD(v3) = 1.0;
  [*(id *)(*(void *)(a1 + 32) + 8) modelWithIdentifier:*(void *)(*(void *)(a1 + 32) + 48) didUpdateScore:*(void *)(a1 + 40) forSpeakable:v3];
  uint64_t v4 = *(void *)(a1 + 32);
  v5 = *(void **)(v4 + 16);
  *(void *)(v4 + 16) = 0;

  return 0;
}

uint64_t sub_10013A7C0(uint64_t a1)
{
  v2 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v6 = 136315138;
    int v7 = "-[ADOpportuneSpeakingVoiceActivityModel setSpeakable:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s OPPSPK - Voice pause not detected", (uint8_t *)&v6, 0xCu);
  }
  [*(id *)(*(void *)(a1 + 32) + 8) modelWithIdentifier:*(void *)(*(void *)(a1 + 32) + 48) didUpdateScore:*(void *)(a1 + 40) forSpeakable:0.0];
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void **)(v3 + 16);
  *(void *)(v3 + 16) = 0;

  return 0;
}

void sub_10013AEDC(uint64_t a1)
{
  v2 = *(void **)(a1 + 32);
  if (v2[4])
  {
    id v3 = [v2 _service];
    [v3 reset];
    [*(id *)(a1 + 32) _configureWithCurrentASBD];
    *(void *)(*(void *)(a1 + 32) + 32) = 0;
  }
}

void sub_10013AFC8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  double v3 = (double)*(unint64_t *)(v2 + 32) / *(double *)(v2 + 48);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10013B0BC;
  v6[3] = &unk_100507BB0;
  v6[4] = v2;
  *(double *)&v6[5] = v3;
  uint64_t v4 = [(id)v2 _serviceWithErrorHandler:v6];
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10013B1B0;
  v5[3] = &unk_1005036A8;
  v5[4] = *(void *)(a1 + 32);
  *(double *)&void v5[5] = v3;
  [v4 getSignature:v5];
}

void sub_10013B0BC(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = AFSiriLogContextSpeech;
  if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_ERROR))
  {
    int v6 = 136315394;
    int v7 = "-[ADAcousticFingerprinter flush]_block_invoke_2";
    __int16 v8 = 2112;
    id v9 = v3;
    _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "%s %@", (uint8_t *)&v6, 0x16u);
  }
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 24));
  [WeakRetained acousticFingerprinter:*(void *)(a1 + 32) hasFingerprint:0 duration:*(double *)(a1 + 40)];
}

void sub_10013B1B0(uint64_t a1, void *a2)
{
  id v3 = (id *)(*(void *)(a1 + 32) + 24);
  id v4 = a2;
  id WeakRetained = objc_loadWeakRetained(v3);
  [WeakRetained acousticFingerprinter:*(void *)(a1 + 32) hasFingerprint:v4 duration:*(double *)(a1 + 40)];
}

void sub_10013B2BC(uint64_t a1)
{
  unint64_t v2 = (unint64_t)[*(id *)(a1 + 32) length] / *(unsigned int *)(*(void *)(a1 + 40) + 64);
  id v3 = [*(id *)(a1 + 40) _convertPCMDataForFingerprinting:*(void *)(a1 + 32)];
  id v4 = [*(id *)(a1 + 40) _service];
  [v4 appendAcousticData:v3 sampleCount:v2 sampleRate:sub_10013B4E4((uint64_t)*(double *)(*(void *)(a1 + 40) + 48))];

  *(void *)(*(void *)(a1 + 40) + 32) += (int)v2;
  v5 = *(void **)(a1 + 40);
  if (v5[4] > v5[5])
  {
    *(void *)(*(void *)(a1 + 40) + 40) += [v5 _samplesPerInterval];
    uint64_t v6 = *(void *)(a1 + 40);
    double v7 = (double)*(unint64_t *)(v6 + 32) / *(double *)(v6 + 48);
    __int16 v8 = AFSiriLogContextSpeech;
    if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315394;
      double v13 = "-[ADAcousticFingerprinter appendPCMData:]_block_invoke";
      __int16 v14 = 2048;
      double v15 = v7;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "%s Getting signature for duration %lf", buf, 0x16u);
      uint64_t v6 = *(void *)(a1 + 40);
    }
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_10013B624;
    v11[3] = &unk_100507BB0;
    v11[4] = v6;
    *(double *)&v11[5] = v7;
    id v9 = [(id)v6 _serviceWithErrorHandler:v11];
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_10013B718;
    v10[3] = &unk_1005036A8;
    v10[4] = *(void *)(a1 + 40);
    *(double *)&v10[5] = v7;
    [v9 getSignature:v10];
  }
}

uint64_t sub_10013B4E4(uint64_t a1)
{
  if (a1 > 31999)
  {
    switch(a1)
    {
      case 32000:
        return 32000;
      case 44100:
        return 44100;
      case 48000:
        return 48000;
    }
  }
  else
  {
    switch(a1)
    {
      case 8000:
        return 8000;
      case 11025:
        return 11025;
      case 16000:
        return 16000;
    }
  }
  id v3 = AFSiriLogContextSpeech;
  if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_ERROR))
  {
    int v4 = 136315394;
    v5 = "ASXSampleRateFromInt";
    __int16 v6 = 2050;
    uint64_t v7 = a1;
    _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "%s Fingerprinter doesn't support rate %{public}ld", (uint8_t *)&v4, 0x16u);
  }
  return 16000;
}

void sub_10013B624(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = AFSiriLogContextSpeech;
  if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_ERROR))
  {
    int v6 = 136315394;
    uint64_t v7 = "-[ADAcousticFingerprinter appendPCMData:]_block_invoke";
    __int16 v8 = 2112;
    id v9 = v3;
    _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "%s %@", (uint8_t *)&v6, 0x16u);
  }
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 24));
  [WeakRetained acousticFingerprinter:*(void *)(a1 + 32) hasFingerprint:0 duration:*(double *)(a1 + 40)];
}

void sub_10013B718(uint64_t a1, void *a2)
{
  id v3 = (id *)(*(void *)(a1 + 32) + 24);
  id v4 = a2;
  id WeakRetained = objc_loadWeakRetained(v3);
  [WeakRetained acousticFingerprinter:*(void *)(a1 + 32) hasFingerprint:v4 duration:*(double *)(a1 + 40)];
}

uint64_t sub_10013B9AC(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  *a2 = *(_DWORD *)(a1 + 40);
  *(_DWORD *)a3 = 1;
  *(_DWORD *)(a3 + 8) = 1;
  *(void *)(a3 + 16) = [*(id *)(a1 + 32) bytes];
  *(_DWORD *)(a3 + 12) = [*(id *)(a1 + 32) length];
  return 0;
}

uint64_t sub_10013BA04(int a1, uint64_t a2, uint64_t a3, uint64_t a4, id a5)
{
  __int16 v8 = (uint64_t (**)(id, uint64_t, uint64_t, uint64_t))objc_retainBlock(a5);
  uint64_t v9 = v8[2](v8, a2, a3, a4);

  return v9;
}

double sub_10013BCF4(uint64_t a1)
{
  double result = *(double *)(a1 + 40);
  *(double *)(*(void *)(a1 + 32) + 88) = result;
  return result;
}

void sub_10013C130(_Unwind_Exception *a1)
{
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 72));
  _Unwind_Resume(a1);
}

void sub_10013C160(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _connectionInterrupted];
}

void sub_10013C1A0(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _connectionInvalidated];
}

void sub_10013C7F4(uint64_t a1)
{
  if (*(void *)(a1 + 40))
  {
    unint64_t v2 = +[SiriCoreSQLiteQueryCriterion isQueryCriterionWithColumnName:@"status" value:&off_100523660 negation:0];
    v7[0] = v2;
    uint64_t v3 = +[NSNumber numberWithUnsignedInteger:*(void *)(a1 + 48)];
    id v4 = +[SiriCoreSQLiteQueryCriterion isQueryCriterionWithColumnName:@"delivery_stream" value:v3 negation:0];
    v7[1] = v4;
    v5 = +[NSArray arrayWithObjects:v7 count:2];
    int v6 = +[SiriCoreSQLiteQueryCriterion andQueryCriterionWithSubcriteria:v5];

    [*(id *)(a1 + 32) _countQueuedEventRecordsWithCriteria:v6 withCompletion:*(void *)(a1 + 40)];
  }
}

void sub_10013C9B8(uint64_t a1)
{
  if (*(void *)(a1 + 40))
  {
    id v2 = +[SiriCoreSQLiteQueryCriterion isQueryCriterionWithColumnName:@"status" value:&off_100523660 negation:0];
    [*(id *)(a1 + 32) _countQueuedEventRecordsWithCriteria:v2 withCompletion:*(void *)(a1 + 40)];
  }
}

void sub_10013F990(uint64_t a1, void *a2, void *a3)
{
  id v4 = *(void **)(a1 + 32);
  id v5 = a3;
  id v6 = a2;
  id v7 = [objc_alloc((Class)SiriCoreSQLiteIndexDescription) initWithName:v6 tableName:@"events" columnNames:v5 options:0];

  [v4 createIndex:v7 error:0];
}

void sub_10013FEC0(void *a1)
{
  id v2 = (void *)a1[4];
  uint64_t v3 = a1[5];
  uint64_t v4 = a1[6];
  id v8 = 0;
  id v5 = [v2 _updateRecordsWithSpeechId:v3 toUpdatedSpeechId:v4 error:&v8];
  id v6 = v8;
  uint64_t v7 = a1[7];
  if (v7) {
    (*(void (**)(uint64_t, id, id))(v7 + 16))(v7, v5, v6);
  }
}

void sub_100140080(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = *(NSObject **)(v1 + 8);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100140114;
  v3[3] = &unk_10050E188;
  v3[4] = v1;
  id v4 = *(id *)(a1 + 40);
  dispatch_async(v2, v3);
}

void sub_100140114(uint64_t a1)
{
  id v2 = *(void **)(*(void *)(a1 + 32) + 16);
  id v8 = 0;
  id v3 = [v2 checkpointWriteAheadLogWithError:&v8];
  id v4 = v8;
  id v5 = AFSiriLogContextAnalytics;
  if (os_log_type_enabled(AFSiriLogContextAnalytics, OS_LOG_TYPE_INFO))
  {
    uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 32);
    *(_DWORD *)buf = 136315394;
    float v10 = "-[ADAnalyticsStore checkpointWithCompletion:]_block_invoke_2";
    __int16 v11 = 2112;
    uint64_t v12 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "%s Checkpointed write-ahead log (%@)...", buf, 0x16u);
  }
  uint64_t v7 = *(void *)(a1 + 40);
  if (v7) {
    (*(void (**)(uint64_t, id, id))(v7 + 16))(v7, v3, v4);
  }
}

void sub_100140358(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  id v8 = 0;
  id v3 = [v2 _resetForReason:@"Settings Client" error:&v8];
  id v4 = v8;
  id v5 = AFSiriLogContextAnalytics;
  if (os_log_type_enabled(AFSiriLogContextAnalytics, OS_LOG_TYPE_INFO))
  {
    uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 32);
    *(_DWORD *)buf = 136315394;
    float v10 = "-[ADAnalyticsStore resetWithCompletion:]_block_invoke";
    __int16 v11 = 2112;
    uint64_t v12 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "%s Reset analytics store (%@).", buf, 0x16u);
  }
  uint64_t v7 = *(void *)(a1 + 40);
  if (v7) {
    (*(void (**)(uint64_t, id, id))(v7 + 16))(v7, v3, v4);
  }
}

void sub_1001405A0(uint64_t a1)
{
  id v2 = +[NSFileManager defaultManager];
  unsigned int v3 = [v2 fileExistsAtPath:*(void *)(*(void *)(a1 + 32) + 32) isDirectory:0];

  id v4 = 0;
  if (!v3) {
    goto LABEL_14;
  }
  id v5 = +[NSFileManager defaultManager];
  uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 32);
  id v25 = 0;
  uint64_t v7 = [v5 attributesOfItemAtPath:v6 error:&v25];
  id v4 = v25;

  if (!v7)
  {
    id v17 = AFSiriLogContextAnalytics;
    if (os_log_type_enabled(AFSiriLogContextAnalytics, OS_LOG_TYPE_ERROR))
    {
      uint64_t v18 = *(void *)(*(void *)(a1 + 32) + 32);
      *(_DWORD *)buf = 136315394;
      v27 = "-[ADAnalyticsStore purgeWithCompletion:]_block_invoke";
      __int16 v28 = 2112;
      uint64_t v29 = v18;
      _os_log_error_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "%s Unable to get file attributes of analytics store (%@).", buf, 0x16u);
    }
    goto LABEL_14;
  }
  id v8 = [v7 objectForKey:NSFileSize];
  uint64_t v9 = v8;
  if (!v8)
  {
    id v19 = AFSiriLogContextAnalytics;
    if (os_log_type_enabled(AFSiriLogContextAnalytics, OS_LOG_TYPE_ERROR))
    {
      uint64_t v20 = *(void *)(*(void *)(a1 + 32) + 32);
      *(_DWORD *)buf = 136315394;
      v27 = "-[ADAnalyticsStore purgeWithCompletion:]_block_invoke";
      __int16 v28 = 2112;
      uint64_t v29 = v20;
      _os_log_error_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "%s Unable to get file size of analytics store (%@).", buf, 0x16u);
    }
    goto LABEL_13;
  }
  if ((unint64_t)[v8 unsignedLongLongValue] <= 0x10000000)
  {
    +[ADCoreAnalyticsSideChannel logAnalyticsLocalStorageSnapshotWithSize:v9];
LABEL_13:

    goto LABEL_14;
  }
  float v10 = *(void **)(a1 + 32);
  id v11 = [objc_alloc((Class)NSString) initWithFormat:@"Large File Size (%@)", v9];
  id v24 = v4;
  unsigned int v12 = [v10 _resetForReason:v11 error:&v24];
  id v13 = v24;

  +[ADCoreAnalyticsSideChannel logAnalyticsLocalStoragePurgedWithSize:v9];
  if (v12)
  {
    __int16 v14 = AFSiriLogContextAnalytics;
    uint64_t v15 = 1;
    if (os_log_type_enabled(AFSiriLogContextAnalytics, OS_LOG_TYPE_INFO))
    {
      uint64_t v16 = *(void *)(*(void *)(a1 + 32) + 32);
      *(_DWORD *)buf = 136315394;
      v27 = "-[ADAnalyticsStore purgeWithCompletion:]_block_invoke";
      __int16 v28 = 2112;
      uint64_t v29 = v16;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "%s Purged data from analytics store (%@)...", buf, 0x16u);
    }
    goto LABEL_17;
  }
  id v4 = v13;
LABEL_14:
  v21 = AFSiriLogContextAnalytics;
  if (os_log_type_enabled(AFSiriLogContextAnalytics, OS_LOG_TYPE_ERROR))
  {
    uint64_t v23 = *(void *)(*(void *)(a1 + 32) + 32);
    *(_DWORD *)buf = 136315650;
    v27 = "-[ADAnalyticsStore purgeWithCompletion:]_block_invoke";
    __int16 v28 = 2112;
    uint64_t v29 = v23;
    __int16 v30 = 2112;
    id v31 = v4;
    _os_log_error_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "%s Failed to purge data from analytics store (%@) due to error %@.", buf, 0x20u);
  }
  uint64_t v15 = 0;
  id v13 = v4;
LABEL_17:
  uint64_t v22 = *(void *)(a1 + 40);
  if (v22) {
    (*(void (**)(uint64_t, uint64_t, id))(v22 + 16))(v22, v15, v13);
  }
}

void sub_1001409E0(void *a1)
{
  unsigned int v3 = (void *)a1[4];
  uint64_t v4 = a1[5];
  id v8 = 0;
  id v5 = [v3 _fetchEventRecordsCreatedAfterDate:v4 error:&v8];
  id v6 = v8;
  uint64_t v7 = a1[6];
  if (v7) {
    (*(void (**)(uint64_t, void *, id))(v7 + 16))(v7, v5, v6);
  }
}

void sub_100140BC0(void *a1)
{
  id v2 = (void *)a1[4];
  uint64_t v3 = a1[5];
  id v7 = 0;
  id v4 = [v2 _purgeDeletedEventRecordsBeforeOrEqualToDate:v3 error:&v7];
  id v5 = v7;
  uint64_t v6 = a1[6];
  if (v6) {
    (*(void (**)(uint64_t, id, id))(v6 + 16))(v6, v4, v5);
  }
}

void sub_100140D0C(void *a1)
{
  uint64_t v3 = a1[7];
  uint64_t v4 = a1[8];
  id v5 = (void *)a1[4];
  uint64_t v6 = a1[5];
  id v9 = 0;
  [v5 _deleteEventRecordsFromStartTime:v3 toEndTime:v4 eventStreamUID:v6 error:&v9];
  id v7 = v9;
  uint64_t v8 = a1[6];
  if (v8) {
    (*(void (**)(uint64_t, void, id))(v8 + 16))(v8, 0, v7);
  }
}

void sub_100140EF8(void *a1)
{
  uint64_t v3 = (void *)a1[4];
  uint64_t v4 = a1[5];
  id v8 = 0;
  id v5 = [v3 _deleteEventRecordsWithRecordIDs:v4 error:&v8];
  id v6 = v8;
  uint64_t v7 = a1[6];
  if (v7) {
    (*(void (**)(uint64_t, id, id))(v7 + 16))(v7, v5, v6);
  }
}

void sub_100141070(void *a1)
{
  uint64_t v3 = a1[8];
  uint64_t v4 = a1[9];
  id v5 = (void *)a1[4];
  uint64_t v6 = a1[5];
  uint64_t v7 = a1[6];
  id v11 = 0;
  id v8 = [v5 _deleteEventRecordsBeforeOrEqualToTimestamp:v3 deliveryStream:v4 eventStreamUID:v6 streamSpeechId:v7 error:&v11];
  id v9 = v11;
  uint64_t v10 = a1[7];
  if (v10) {
    (*(void (**)(uint64_t, id, id))(v10 + 16))(v10, v8, v9);
  }
}

void sub_100141218(void *a1)
{
  uint64_t v3 = a1[8];
  uint64_t v4 = a1[9];
  id v5 = (void *)a1[4];
  uint64_t v6 = a1[5];
  uint64_t v7 = a1[6];
  uint64_t v8 = a1[10];
  id v12 = 0;
  id v9 = [v5 _fetchEventRecords:v3 afterTimestamp:v4 eventStreamUID:v6 streamSpeechId:v7 deliveryStream:v8 error:&v12];
  id v10 = v12;
  uint64_t v11 = a1[7];
  if (v11) {
    (*(void (**)(uint64_t, void *, id))(v11 + 16))(v11, v9, v10);
  }
}

void sub_100141344(uint64_t a1)
{
  uint64_t v3 = *(void **)(a1 + 32);
  id v7 = 0;
  uint64_t v4 = [v3 _fetchEventStreamUIDsWithError:&v7];
  id v5 = v7;
  uint64_t v6 = *(void *)(a1 + 40);
  if (v6) {
    (*(void (**)(uint64_t, void *, id))(v6 + 16))(v6, v4, v5);
  }
}

void sub_1001414A8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(NSObject **)(v2 + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100141554;
  block[3] = &unk_10050E1D8;
  block[4] = v2;
  id v5 = *(id *)(a1 + 40);
  id v6 = *(id *)(a1 + 48);
  dispatch_async(v3, block);
}

void sub_100141554(void *a1)
{
  uint64_t v3 = (void *)a1[4];
  uint64_t v4 = a1[5];
  id v8 = 0;
  id v5 = [v3 _insertEventRecords:v4 error:&v8];
  id v6 = v8;
  uint64_t v7 = a1[6];
  if (v7) {
    (*(void (**)(uint64_t, id, id))(v7 + 16))(v7, v5, v6);
  }
}

void sub_1001420F8(uint64_t a1)
{
  uint64_t v2 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v3 = *(_DWORD *)(a1 + 32);
    int v4 = 136315394;
    id v5 = "-[ADFlowServiceListener listener:shouldAcceptNewConnection:]_block_invoke";
    __int16 v6 = 1024;
    int v7 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s Flow Service Connection Invalidated (pid=%d)", (uint8_t *)&v4, 0x12u);
  }
}

void sub_1001421B4(uint64_t a1)
{
  uint64_t v2 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v3 = *(_DWORD *)(a1 + 32);
    int v4 = 136315394;
    id v5 = "-[ADFlowServiceListener listener:shouldAcceptNewConnection:]_block_invoke";
    __int16 v6 = 1024;
    int v7 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s Flow Service Connection Interrupted (pid=%d)", (uint8_t *)&v4, 0x12u);
  }
}

void *sub_1001422E4(void *result)
{
  if (!*(void *)(result[4] + 8))
  {
    uint64_t v1 = result;
    uint64_t v2 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      int v7 = 136315138;
      id v8 = "-[ADFlowServiceListener setupListener]_block_invoke";
      _os_log_debug_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s ", (uint8_t *)&v7, 0xCu);
    }
    id v3 = objc_alloc((Class)NSXPCListener);
    id v4 = [v3 initWithMachServiceName:kAssistantFlowServiceName];
    uint64_t v5 = v1[4];
    __int16 v6 = *(void **)(v5 + 8);
    *(void *)(v5 + 8) = v4;

    objc_msgSend(*(id *)(v1[4] + 8), "setDelegate:");
    return [*(id *)(v1[4] + 8) resume];
  }
  return result;
}

uint64_t sub_100143854(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_1001441A0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_100144264(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_100144324(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100144458(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

intptr_t sub_100144470(uint64_t a1, char a2)
{
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = a2;
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

id sub_100144858(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _didLaunchAppForRequestWithIdentifier:*(void *)(a1 + 40)];
}

id sub_1001449A8(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _didLaunchAppForRequestWithIdentifier:*(void *)(a1 + 40)];
}

void sub_100144A68(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    uint64_t v1 = *(void **)(a1 + 40);
    objc_msgSend(v1, "_sendCommandToServer:");
  }
  else
  {
    uint64_t v2 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      int v3 = 136315138;
      id v4 = "-[ADCommandCenter(NanoServices) taskmaster:didReceivePunchoutOutcome:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s called with nil punchoutOutcome.", (uint8_t *)&v3, 0xCu);
    }
  }
}

id sub_100146BAC(uint64_t a1)
{
  return [*(id *)(a1 + 32) _setAVSystemController:0];
}

void sub_100146C2C(uint64_t a1)
{
  uint64_t v2 = +[AVSystemController sharedAVSystemController];
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = *(NSObject **)(v3 + 8);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100146CD4;
  v6[3] = &unk_10050E160;
  v6[4] = v3;
  id v7 = v2;
  id v5 = v2;
  dispatch_async(v4, v6);
}

id sub_100146CD4(uint64_t a1)
{
  [*(id *)(a1 + 32) _setAVSystemController:*(void *)(a1 + 40)];
  uint64_t v2 = *(void **)(a1 + 32);
  return _[v2 _flushPendingCompletions];
}

id sub_100146DAC(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 40) removeObject:*(void *)(a1 + 40)];
}

id sub_100146E50(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 40) addObject:*(void *)(a1 + 40)];
}

uint64_t sub_100146F84(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100146F94(uint64_t a1)
{
  if (*(void *)(*(void *)(a1 + 32) + 24))
  {
    uint64_t v2 = *(void **)(a1 + 40);
    objc_msgSend(v2, "invokeWithValue:");
  }
  else
  {
    dispatch_time_t v3 = dispatch_time(0, (uint64_t)(*(double *)(a1 + 48) * 1000000000.0));
    uint64_t v4 = *(void *)(a1 + 32);
    id v5 = *(NSObject **)(v4 + 8);
    __int16 v6 = _NSConcreteStackBlock;
    uint64_t v7 = 3221225472;
    id v8 = sub_1001470A0;
    id v9 = &unk_10050E160;
    uint64_t v10 = v4;
    id v11 = *(id *)(a1 + 40);
    dispatch_after(v3, v5, &v6);
    objc_msgSend(*(id *)(*(void *)(a1 + 32) + 32), "addObject:", *(void *)(a1 + 40), v6, v7, v8, v9, v10);
    [*(id *)(a1 + 32) fetchAVSystemControllerInBackground];
  }
}

id sub_1001470A0(uint64_t a1)
{
  [*(id *)(*(void *)(a1 + 32) + 32) removeObject:*(void *)(a1 + 40)];
  uint64_t v2 = *(void **)(a1 + 40);
  uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 24);
  return [v2 invokeWithValue:v3];
}

void sub_100147268(id a1)
{
  uint64_t v1 = objc_alloc_init(ADAVSystemControllerLifecycleManager);
  uint64_t v2 = qword_100585CA0;
  qword_100585CA0 = (uint64_t)v1;
  _objc_release_x1(v1, v2);
}

void sub_1001476E8(uint64_t a1)
{
  id v10 = +[AFPreferences sharedPreferences];
  uint64_t v2 = [v10 languageCode];
  if (![(__CFString *)v2 length])
  {
    uint64_t v3 = [v10 bestSupportedLanguageCodeForLanguageCode:0];

    uint64_t v2 = (__CFString *)v3;
  }
  if (![(__CFString *)v2 length])
  {

    uint64_t v2 = @"en-US";
  }
  uint64_t v4 = [v10 outputVoice];
  id v5 = [v4 languageCode];
  id v6 = [v5 length];

  if (!v6)
  {
    uint64_t v7 = AFOutputVoiceLanguageForRecognitionLanguage();
    id v8 = objc_msgSend(objc_alloc((Class)AFVoiceInfo), "initWithLanguageCode:gender:isCustom:name:footprint:contentVersion:masteredVersion:", v7, objc_msgSend(v4, "gender"), 1, 0, 0, 0, 0);

    uint64_t v4 = v8;
  }
  id v9 = [*(id *)(a1 + 32) _bundle];
  [*(id *)(a1 + 32) _getLocalRequestWithType:*(void *)(a1 + 48) bundle:v9 languageCode:v2 outputVoiceInfo:v4 completion:*(void *)(a1 + 40)];
}

void sub_100147944(id a1)
{
  uint64_t v1 = objc_alloc_init(ADLocalRequestProvider);
  uint64_t v2 = qword_100585CB0;
  qword_100585CB0 = (uint64_t)v1;
  _objc_release_x1(v1, v2);
}

id sub_100147D24(uint64_t a1)
{
  uint64_t v2 = +[ADDeviceProximityManager sharedManager];
  [v2 performProximityScan];

  id result = *(id *)(*(void *)(a1 + 32) + 48);
  if (result) {
    id result = [result cancel];
  }
  if (*(void *)(a1 + 40) == 1)
  {
    id v4 = objc_alloc((Class)AFWatchdogTimer);
    uint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = *(void *)(v5 + 40);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_100147E0C;
    v10[3] = &unk_10050E138;
    v10[4] = v5;
    id v7 = [v4 initWithTimeoutInterval:v6 onQueue:v10 timeoutHandler:195.0];
    uint64_t v8 = *(void *)(a1 + 32);
    id v9 = *(void **)(v8 + 48);
    *(void *)(v8 + 48) = v7;

    return [*(id *)(*(void *)(a1 + 32) + 48) start];
  }
  return result;
}

id sub_100147E0C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(void **)(v1 + 72);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100147E80;
  v4[3] = &unk_10050C0A8;
  v4[4] = v1;
  return [v2 getPlaybackStateWithCompletion:v4];
}

void sub_100147E80(uint64_t a1, uint64_t a2)
{
  if (a2 == 1)
  {
    void v6[6] = v2;
    v6[7] = v3;
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(NSObject **)(v4 + 40);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_100147F04;
    v6[3] = &unk_10050D8C0;
    v6[4] = v4;
    void v6[5] = 1;
    dispatch_async(v5, v6);
  }
}

id sub_100147F04(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = +[NSDate date];
  [v2 _updateExpirationDateForMediaPlaybackSnapshotBasedOnDate:v3];

  uint64_t v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  return [v4 _updateProximityObservationsForPlayState:v5 afterDelay:0.0];
}

void sub_10014855C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  _Block_object_dispose(&a63, 8);
  _Block_object_dispose((const void *)(v63 - 240), 8);
  _Unwind_Resume(a1);
}

void sub_1001485B8(uint64_t a1, char a2)
{
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(*(void *)(a1 + 32) + 40));
  if ((a2 & 2) != 0)
  {
    uint64_t v4 = +[ADSpeechManager sharedManager];
    uint64_t v5 = [v4 audioSessionController];
    id v6 = [v5 getAudioSessionID];

    id v7 = +[AVAudioSession retrieveSessionWithID:v6];
    if ([v7 lastActivationStoppedNowPlayingApp])
    {
      uint64_t v8 = AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v9 = *(void *)(a1 + 64);
        int v10 = 136315394;
        id v11 = "-[ADMediaPlaybackContextProvider _handlePlaybackStateDidChangeToState:fromState:onDate:lastPlayingDate:com"
              "pletion:]_block_invoke";
        __int16 v12 = 2048;
        uint64_t v13 = v9;
        _os_log_debug_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "%s #hal %llu suppressing play state change caused by siri activation interruption", (uint8_t *)&v10, 0x16u);
      }
      *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 0;
      *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = *(void *)(a1 + 72);
    }
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

uint64_t sub_10014870C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10014871C(uint64_t a1)
{
}

void sub_100148724(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  uint64_t v5 = AFValidatedNowPlayingInfo();
  id v6 = v5;
  if (v5)
  {
    uint64_t v7 = [v5 objectForKey:kMRMediaRemoteNowPlayingInfoMediaType];
    uint64_t v8 = *(void *)(*(void *)(a1 + 40) + 8);
    uint64_t v9 = *(void **)(v8 + 40);
    *(void *)(v8 + 40) = v7;

    int v10 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v11 = *(void *)(a1 + 48);
      __int16 v12 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
      int v15 = 136315650;
      uint64_t v16 = "-[ADMediaPlaybackContextProvider _handlePlaybackStateDidChangeToState:fromState:onDate:lastPlayingDate:compl"
            "etion:]_block_invoke";
      __int16 v17 = 2048;
      uint64_t v18 = v11;
      __int16 v19 = 2112;
      id v20 = v12;
      _os_log_debug_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "%s #hal %llu mediaType = %@", (uint8_t *)&v15, 0x20u);
    }
  }
  else
  {
    uint64_t v13 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      uint64_t v14 = *(void *)(a1 + 48);
      int v15 = 136315650;
      uint64_t v16 = "-[ADMediaPlaybackContextProvider _handlePlaybackStateDidChangeToState:fromState:onDate:lastPlayingDate:compl"
            "etion:]_block_invoke";
      __int16 v17 = 2048;
      uint64_t v18 = v14;
      __int16 v19 = 2112;
      id v20 = v4;
      _os_log_error_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "%s #hal %llu Failed fetching Now Playing Info with error: %@", (uint8_t *)&v15, 0x20u);
    }
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_1001488D4(uint64_t a1, void *a2)
{
  id v4 = a2;
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a2);
  uint64_t v5 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v6 = *(void *)(a1 + 48);
    uint64_t v7 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
    int v8 = 136315650;
    uint64_t v9 = "-[ADMediaPlaybackContextProvider _handlePlaybackStateDidChangeToState:fromState:onDate:lastPlayingDate:completi"
         "on:]_block_invoke";
    __int16 v10 = 2048;
    uint64_t v11 = v6;
    __int16 v12 = 2112;
    uint64_t v13 = v7;
    _os_log_debug_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "%s #hal %llu groupIdentifier = %@", (uint8_t *)&v8, 0x20u);
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_1001489DC(uint64_t a1, void *a2)
{
  [*(id *)(a1 + 32) invokeWithSignal:-3];
  if (a2)
  {
    id v4 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      uint64_t v22 = *(void *)(a1 + 104);
      int v31 = 136315650;
      v32 = "-[ADMediaPlaybackContextProvider _handlePlaybackStateDidChangeToState:fromState:onDate:lastPlayingDate:compl"
            "etion:]_block_invoke";
      __int16 v33 = 2048;
      uint64_t v34 = v22;
      __int16 v35 = 2048;
      id v36 = a2;
      _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "%s #hal %llu Cancelling donation because signal %zd is received.", (uint8_t *)&v31, 0x20u);
    }
    uint64_t v5 = *(void *)(a1 + 64);
    if (v5) {
      (*(void (**)(uint64_t, void))(v5 + 16))(v5, 0);
    }
  }
  else
  {
    uint64_t v6 = [*(id *)(*(void *)(a1 + 40) + 24) mediaType];
    uint64_t v7 = [*(id *)(*(void *)(a1 + 40) + 24) groupIdentifier];
    [*(id *)(*(void *)(a1 + 40) + 24) playbackState];
    int v8 = [*(id *)(*(void *)(a1 + 40) + 24) nowPlayingTimestamp];
    id v9 = *(id *)(a1 + 48);
    __int16 v10 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v23 = *(void *)(a1 + 104);
      id v24 = v10;
      id v25 = AFMediaPlaybackStateGetName();
      int v31 = 136315906;
      v32 = "-[ADMediaPlaybackContextProvider _handlePlaybackStateDidChangeToState:fromState:onDate:lastPlayingDate:compl"
            "etion:]_block_invoke";
      __int16 v33 = 2048;
      uint64_t v34 = v23;
      __int16 v35 = 2112;
      id v36 = v25;
      __int16 v37 = 2112;
      id v38 = v8;
      _os_log_debug_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "%s #hal %llu Previous playbackState: %@, lastPlayingDate: %@", (uint8_t *)&v31, 0x2Au);

      __int16 v10 = AFSiriLogContextDaemon;
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v26 = *(void *)(a1 + 104);
      v27 = v10;
      __int16 v28 = AFMediaPlaybackStateGetName();
      int v31 = 136315906;
      v32 = "-[ADMediaPlaybackContextProvider _handlePlaybackStateDidChangeToState:fromState:onDate:lastPlayingDate:compl"
            "etion:]_block_invoke";
      __int16 v33 = 2048;
      uint64_t v34 = v26;
      __int16 v35 = 2112;
      id v36 = v28;
      __int16 v37 = 2112;
      id v38 = v9;
      _os_log_debug_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEBUG, "%s      #hal %llu New playbackState: %@, lastPlayingDate: %@", (uint8_t *)&v31, 0x2Au);
    }
    if (*(void *)(*(void *)(a1 + 40) + 24)
      && !*(unsigned char *)(*(void *)(*(void *)(a1 + 80) + 8) + 24)
      && ((uint64_t v11 = *(void **)(*(void *)(*(void *)(a1 + 88) + 8) + 40)) == 0 ? (v12 = v6 == 0) : (v12 = 1),
          v12
       && (!v11 || [v11 isEqualToString:v6])
       && ([v9 timeIntervalSinceDate:v8], fabs(v13) <= 0.5)
       && ((uint64_t v14 = *(void **)(*(void *)(*(void *)(a1 + 96) + 8) + 40)) != 0 || !v7)
       && (!v14 || [v14 isEqualToString:v7])
       && (uint64_t v15 = *(void *)(a1 + 40),
           int v16 = *(unsigned __int8 *)(v15 + 32),
           v16 == [*(id *)(v15 + 24) isProxyGroupPlayer])))
    {
      __int16 v17 = AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v30 = *(void *)(a1 + 104);
        int v31 = 136315394;
        v32 = "-[ADMediaPlaybackContextProvider _handlePlaybackStateDidChangeToState:fromState:onDate:lastPlayingDate:com"
              "pletion:]_block_invoke";
        __int16 v33 = 2048;
        uint64_t v34 = v30;
        _os_log_debug_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "%s #hal %llu Skipped donation because there's no change.", (uint8_t *)&v31, 0x16u);
      }
      uint64_t v18 = *(void *)(a1 + 64);
      if (v18) {
        (*(void (**)(uint64_t, void))(v18 + 16))(v18, 0);
      }
    }
    else
    {
      id v19 = [objc_alloc((Class)AFMediaPlaybackStateSnapshot) initWithPlaybackState:*(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 24) nowPlayingTimestamp:v9 mediaType:*(void *)(*(void *)(*(void *)(a1 + 88) + 8) + 40) groupIdentifier:*(void *)(*(void *)(*(void *)(a1 + 96) + 8) + 40) isProxyGroupPlayer:*(unsigned __int8 *)(*(void *)(a1 + 40) + 32)];
      id v20 = AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v29 = *(void *)(a1 + 104);
        int v31 = 136315650;
        v32 = "-[ADMediaPlaybackContextProvider _handlePlaybackStateDidChangeToState:fromState:onDate:lastPlayingDate:com"
              "pletion:]_block_invoke";
        __int16 v33 = 2048;
        uint64_t v34 = v29;
        __int16 v35 = 2112;
        id v36 = v19;
        _os_log_debug_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "%s #hal %llu Donating %@...", (uint8_t *)&v31, 0x20u);
      }
      [*(id *)(a1 + 40) _donateMediaPlaybackContextWithSnapshot:v19 date:*(void *)(a1 + 56)];
      uint64_t v21 = *(void *)(a1 + 64);
      if (v21) {
        (*(void (**)(uint64_t, uint64_t))(v21 + 16))(v21, 1);
      }
    }
  }
}

void sub_100148E98(uint64_t a1)
{
  double Current = CFAbsoluteTimeGetCurrent();
  uint64_t v3 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v12 = *(void *)(a1 + 48);
    double v13 = Current - *(double *)(a1 + 56);
    int v16 = 136315650;
    __int16 v17 = "-[ADMediaPlaybackContextProvider _handlePlaybackStateDidChangeToState:fromState:onDate:lastPlayingDate:complet"
          "ion:]_block_invoke";
    __int16 v18 = 2048;
    uint64_t v19 = v12;
    __int16 v20 = 2048;
    double v21 = v13;
    _os_log_debug_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "%s #hal %llu Finished aggregation, took %f seconds.", (uint8_t *)&v16, 0x20u);
  }
  unsigned int v4 = [*(id *)(a1 + 32) invokeWithSignal:0];
  uint64_t v5 = AFSiriLogContextDaemon;
  BOOL v6 = os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG);
  if (v4)
  {
    if (!v6) {
      goto LABEL_7;
    }
    uint64_t v7 = *(void *)(a1 + 48);
    int v16 = 136315394;
    __int16 v17 = "-[ADMediaPlaybackContextProvider _handlePlaybackStateDidChangeToState:fromState:onDate:lastPlayingDate:complet"
          "ion:]_block_invoke";
    __int16 v18 = 2048;
    uint64_t v19 = v7;
    int v8 = "%s #hal %llu Donation invoked.";
  }
  else
  {
    if (!v6) {
      goto LABEL_7;
    }
    uint64_t v14 = *(void *)(a1 + 48);
    int v16 = 136315394;
    __int16 v17 = "-[ADMediaPlaybackContextProvider _handlePlaybackStateDidChangeToState:fromState:onDate:lastPlayingDate:complet"
          "ion:]_block_invoke";
    __int16 v18 = 2048;
    uint64_t v19 = v14;
    int v8 = "%s #hal %llu Donation cancelled.";
  }
  _os_log_debug_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, v8, (uint8_t *)&v16, 0x16u);
LABEL_7:
  id v9 = *(void **)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 40);
  if (v9 == *(void **)(v10 + 80))
  {
    uint64_t v11 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v15 = *(void *)(a1 + 48);
      int v16 = 136315394;
      __int16 v17 = "-[ADMediaPlaybackContextProvider _handlePlaybackStateDidChangeToState:fromState:onDate:lastPlayingDate:compl"
            "etion:]_block_invoke";
      __int16 v18 = 2048;
      uint64_t v19 = v15;
      _os_log_debug_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "%s #hal %llu Donation cleared.", (uint8_t *)&v16, 0x16u);
      uint64_t v10 = *(void *)(a1 + 40);
      id v9 = *(void **)(v10 + 80);
    }
    *(void *)(v10 + 80) = 0;
  }
}

id sub_1001491F0(uint64_t a1, void *a2)
{
  return _[a2 setIsProxyGroupPlayer:*(unsigned __int8 *)(a1 + 32)];
}

id sub_1001491FC(uint64_t a1, void *a2)
{
  return _[a2 setIsProxyGroupPlayer:*(unsigned __int8 *)(a1 + 32)];
}

id sub_10014960C(uint64_t a1)
{
  return [*(id *)(a1 + 32) _handleProxyGroupPlayerDidChangeFrom:*(unsigned __int8 *)(a1 + 40) to:*(unsigned __int8 *)(a1 + 41)];
}

void sub_100149724(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = *(NSObject **)(v6 + 40);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1001497C8;
  block[3] = &unk_10050E278;
  id v10 = v5;
  uint64_t v11 = a2;
  block[4] = v6;
  id v8 = v5;
  dispatch_async(v7, block);
}

void sub_1001497C8(void *a1)
{
  uint64_t v2 = (id *)a1[4];
  uint64_t v3 = a1[6];
  id v4 = [v2[3] playbackState];
  id v5 = +[NSDate date];
  [v2 _handlePlaybackStateDidChangeToState:v3 fromState:v4 onDate:v5 lastPlayingDate:a1[5] completion:0];
}

void sub_100149954(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = *(NSObject **)(v6 + 40);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1001499F8;
  block[3] = &unk_10050E278;
  id v10 = v5;
  uint64_t v11 = a2;
  block[4] = v6;
  id v8 = v5;
  dispatch_async(v7, block);
}

void sub_1001499F8(void *a1)
{
  uint64_t v2 = (id *)a1[4];
  uint64_t v3 = a1[6];
  id v4 = [v2[3] playbackState];
  id v5 = +[NSDate date];
  [v2 _handlePlaybackStateDidChangeToState:v3 fromState:v4 onDate:v5 lastPlayingDate:a1[5] completion:0];
}

void sub_100149BC0(void *a1)
{
  uint64_t v2 = (void *)a1[4];
  uint64_t v3 = a1[6];
  uint64_t v4 = a1[7];
  id v5 = +[NSDate date];
  [v2 _handlePlaybackStateDidChangeToState:v3 fromState:v4 onDate:v5 lastPlayingDate:a1[5] completion:0];
}

void sub_100149ED8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(NSObject **)(*(void *)(a1 + 32) + 40);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10014A0BC;
  block[3] = &unk_10050E278;
  uint64_t v9 = a2;
  id v4 = *(id *)(a1 + 40);
  uint64_t v5 = *(void *)(a1 + 32);
  id v7 = v4;
  uint64_t v8 = v5;
  dispatch_async(v3, block);
}

void sub_100149F74(uint64_t a1, char a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(NSObject **)(v2 + 40);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100149FEC;
  v4[3] = &unk_10050CD50;
  char v5 = a2;
  v4[4] = v2;
  dispatch_async(v3, v4);
}

id sub_100149FEC(uint64_t a1)
{
  uint64_t v2 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    int v4 = *(unsigned __int8 *)(a1 + 40);
    int v5 = 136315394;
    uint64_t v6 = "-[ADMediaPlaybackContextProvider _fetchStateForReason:]_block_invoke_2";
    __int16 v7 = 1024;
    int v8 = v4;
    _os_log_debug_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s #hal initial fetch isProxyGroupPlayer = %d", (uint8_t *)&v5, 0x12u);
  }
  return [*(id *)(a1 + 32) _handleProxyGroupPlayerDidChangeFrom:*(unsigned __int8 *)(*(void *)(a1 + 32) + 32) to:*(unsigned __int8 *)(a1 + 40)];
}

void sub_10014A0BC(void *a1)
{
  uint64_t v2 = (void *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    int v8 = v2;
    uint64_t v9 = AFMediaPlaybackStateGetName();
    uint64_t v10 = a1[4];
    int v11 = 136315650;
    uint64_t v12 = "-[ADMediaPlaybackContextProvider _fetchStateForReason:]_block_invoke_2";
    __int16 v13 = 2112;
    uint64_t v14 = v9;
    __int16 v15 = 2112;
    uint64_t v16 = v10;
    _os_log_debug_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "%s #hal fetch playback state = %@ for reason = %@", (uint8_t *)&v11, 0x20u);
  }
  uint64_t v3 = (id *)a1[5];
  uint64_t v4 = a1[6];
  id v5 = [v3[3] playbackState];
  uint64_t v6 = +[NSDate date];
  __int16 v7 = [*(id *)(a1[5] + 24) nowPlayingTimestamp];
  [v3 _handlePlaybackStateDidChangeToState:v4 fromState:v5 onDate:v6 lastPlayingDate:v7 completion:0];
}

void sub_10014AEB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10014AED0(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  id v7 = a2;
  if ([*(id *)(a1 + 32) _isAnnounceNotificationRequest:v7 equalToRequest:*(void *)(a1 + 40)])
  {
    int v8 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      int v9 = 136315650;
      uint64_t v10 = "-[ADExternalNotificationRequestQueue removeAnnouncementRequest:]_block_invoke";
      __int16 v11 = 2112;
      id v12 = v7;
      __int16 v13 = 2048;
      uint64_t v14 = a3;
      _os_log_debug_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "%s found request to remove: %@ in request queue at index: %lu", (uint8_t *)&v9, 0x20u);
    }
    *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = a3;
    *a4 = 1;
  }
}

void sub_10014B0F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10014B10C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10014B11C(uint64_t a1)
{
}

void sub_10014B124(uint64_t a1, uint64_t a2, void *a3, unsigned char *a4)
{
  id v5 = a3;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  id v6 = [v5 countByEnumeratingWithState:&v20 objects:v28 count:16];
  if (v6)
  {
    id v8 = v6;
    uint64_t v9 = *(void *)v21;
    *(void *)&long long v7 = 136315394;
    long long v18 = v7;
    do
    {
      for (i = 0; i != v8; i = (char *)i + 1)
      {
        if (*(void *)v21 != v9) {
          objc_enumerationMutation(v5);
        }
        __int16 v11 = *(void **)(*((void *)&v20 + 1) + 8 * i);
        id v12 = objc_msgSend(v11, "notification", v18);
        __int16 v13 = [v12 request];
        uint64_t v14 = [v13 identifier];
        unsigned int v15 = [v14 isEqualToString:*(void *)(a1 + 32)];

        if (v15)
        {
          uint64_t v16 = AFSiriLogContextDaemon;
          if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v17 = *(void *)(a1 + 32);
            *(_DWORD *)buf = v18;
            id v25 = "-[ADExternalNotificationRequestQueue notificationRequestForNotificationIdentifierInAnnouncementQueue:]_block_invoke";
            __int16 v26 = 2112;
            uint64_t v27 = v17;
            _os_log_debug_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "%s found request with notification identifier: %@ in request queue", buf, 0x16u);
          }
          objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), v11);
          *a4 = 1;
        }
      }
      id v8 = [v5 countByEnumeratingWithState:&v20 objects:v28 count:16];
    }
    while (v8);
  }
}

void sub_10014C82C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  long long v7 = v6;
  if (v6 && [v6 length])
  {
    id v8 = objc_alloc_init((Class)NSMutableArray);
    [v8 addObject:v5];
    [*(id *)(*(void *)(a1 + 32) + 24) setObject:v8 forKey:v7];
    [*(id *)(*(void *)(a1 + 32) + 16) enqueueObject:v7];
  }
  else
  {
    uint64_t v9 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      int v10 = 136315394;
      __int16 v11 = "-[ADExternalNotificationRequestQueue enqueueAnnouncementRequest:]_block_invoke";
      __int16 v12 = 2112;
      __int16 v13 = v7;
      _os_log_debug_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "%s unable to enqueue request, invalid identifier %@", (uint8_t *)&v10, 0x16u);
    }
  }
}

void *sub_10014C960(void *result, uint64_t a2)
{
  if (a2 != -1)
  {
    uint64_t v2 = result;
    [*(id *)(result[4] + 48) cancel];
    [*(id *)(v2[4] + 56) cancel];
    uint64_t v3 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v4 = *(void *)(v2[4] + 8);
      int v5 = 136315394;
      id v6 = "-[ADExternalNotificationRequestQueue enqueueAnnouncementRequest:]_block_invoke";
      __int16 v7 = 2112;
      uint64_t v8 = v4;
      _os_log_debug_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "%s announcement ready to be announced: %@", (uint8_t *)&v5, 0x16u);
    }
    return [*(id *)(v2[4] + 32) announcementRequestReadyToBeAnnounced:*(void *)(v2[4] + 8)];
  }
  return result;
}

id sub_10014CA54(uint64_t a1)
{
  uint64_t v2 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    int v5 = 136315394;
    id v6 = "-[ADExternalNotificationRequestQueue enqueueAnnouncementRequest:]_block_invoke";
    __int16 v7 = 2112;
    uint64_t v8 = v4;
    _os_log_debug_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s Max time enqueueable timer firing, announcing request: %@", (uint8_t *)&v5, 0x16u);
  }
  return [*(id *)(a1 + 40) invoke];
}

id sub_10014CB1C(uint64_t a1)
{
  uint64_t v2 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    int v4 = 136315138;
    int v5 = "-[ADExternalNotificationRequestQueue enqueueAnnouncementRequest:]_block_invoke";
    _os_log_debug_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s Resetting burst timer firing", (uint8_t *)&v4, 0xCu);
  }
  id result = [*(id *)(a1 + 32) summaryDecision];
  if (result != (id)2) {
    return [*(id *)(a1 + 40) invoke];
  }
  return result;
}

id sub_10014E9D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return [*(id *)(a1 + 32) setValue:a3 forKey:a2];
}

void sub_10014E9DC(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  int v10 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    __int16 v11 = *(void **)(a1 + 32);
    uint64_t v12 = *(void *)(a1 + 40);
    *(_DWORD *)buf = 136315651;
    v118 = "-[ADCloudKitMultiUserSharedDataStore setKeyValueRecordsAndVoiceProfile:records:completion:]_block_invoke";
    __int16 v119 = 2113;
    id v120 = v11;
    __int16 v121 = 2113;
    uint64_t v122 = v12;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "%s home memberships for sharedUserId = %{private}@ : %{private}@", buf, 0x20u);
    int v10 = AFSiriLogContextDaemon;
  }
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315395;
    v118 = "-[ADCloudKitMultiUserSharedDataStore setKeyValueRecordsAndVoiceProfile:records:completion:]_block_invoke";
    __int16 v119 = 2113;
    id v120 = v8;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "%s homeUniqueIdentifier: %{private}@", buf, 0x16u);
  }
  __int16 v13 = [*(id *)(a1 + 40) objectForKey:v8];
  uint64_t v14 = AFSiriLogContextSession;
  if (os_log_type_enabled(AFSiriLogContextSession, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315395;
    v118 = "-[ADCloudKitMultiUserSharedDataStore setKeyValueRecordsAndVoiceProfile:records:completion:]_block_invoke";
    __int16 v119 = 2113;
    id v120 = v13;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "%s home user id: %{private}@", buf, 0x16u);
  }
  unsigned int v15 = productTypeFromUserAgentString();
  char v16 = AFDoesProductTypeSupportMUX();
  id v17 = objc_alloc((Class)AFCompanionDeviceInfo);
  BYTE3(v64) = *(unsigned char *)(a1 + 186);
  BYTE2(v64) = v16;
  LOWORD(v64) = *(_WORD *)(a1 + 184);
  id v18 = objc_msgSend(v17, "initWithAssistantID:speechID:idsIdentifier:productPrefix:aceHost:syncMetadata:syncMetadataCapability:peerToPeerHandoffCapability:muxSupportCapability:meDevice:siriLanguage:", *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 48), *(void *)(a1 + 80), *(void *)(a1 + 88), v64, *(void *)(a1 + 96));
  if ([v7 isEqualToString:v13])
  {
    uint64_t v19 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      uint64_t v20 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 136315651;
      v118 = "-[ADCloudKitMultiUserSharedDataStore setKeyValueRecordsAndVoiceProfile:records:completion:]_block_invoke";
      __int16 v119 = 2113;
      id v120 = v13;
      __int16 v121 = 2113;
      uint64_t v122 = v20;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "%s Found matching record. Adding homeUserId %{private}@ with shareUserId %{private}@ to multiuser group", buf, 0x20u);
    }
    id v75 = v9;
    v76 = v15;
    id v73 = v8;
    id v74 = v7;
    long long v21 = AFSiriLogContextMultiUser;
    long long v22 = v21;
    os_signpost_id_t v23 = *(void *)(*(void *)(a1 + 104) + 8);
    if (v23 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v21))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v22, OS_SIGNPOST_INTERVAL_END, v23, "MultiUserService", "Primary user synced", buf, 2u);
    }

    id v24 = *(void **)(a1 + 32);
    id v25 = *(void **)(a1 + 112);
    uint64_t v26 = *(void *)(a1 + 120);
    uint64_t v27 = *(void *)(a1 + 128);
    v104[0] = _NSConcreteStackBlock;
    v104[1] = 3221225472;
    v104[2] = sub_10014F500;
    v104[3] = &unk_100503A88;
    id v28 = v24;
    uint64_t v29 = *(void *)(a1 + 104);
    id v105 = v28;
    uint64_t v106 = v29;
    id v107 = *(id *)(a1 + 136);
    id v108 = *(id *)(a1 + 144);
    id v109 = *(id *)(a1 + 152);
    id v110 = *(id *)(a1 + 160);
    id v30 = v18;
    id v111 = v30;
    id v112 = *(id *)(a1 + 56);
    id v113 = *(id *)(a1 + 64);
    id v114 = *(id *)(a1 + 128);
    id v115 = *(id *)(a1 + 168);
    id v116 = *(id *)(a1 + 176);
    LOBYTE(v65) = 0;
    [v25 addUser:v13 sharedUserId:v28 loggableSharedUserId:v26 iCloudAltDSID:v27 enrollmentName:@"primary_user" isPrimary:1 nonCloudSyncedUser:v65 completion:v104];
    int v31 = *(unsigned __int8 *)(*(void *)(a1 + 104) + 64);
    if (!AFIsATV() || !v31 && *(unsigned char *)(*(void *)(a1 + 104) + 64))
    {
      v32 = *(void **)(a1 + 112);
      uint64_t v70 = *(void *)(a1 + 120);
      uint64_t v71 = *(void *)(a1 + 32);
      uint64_t v69 = *(void *)(a1 + 128);
      id v33 = v18;
      uint64_t v34 = *(void *)(a1 + 152);
      id v35 = v30;
      uint64_t v37 = *(void *)(a1 + 136);
      uint64_t v36 = *(void *)(a1 + 144);
      BOOL v38 = (unint64_t)[*(id *)(a1 + 160) count] < 2;
      v102[0] = _NSConcreteStackBlock;
      v102[1] = 3221225472;
      v102[2] = sub_10014F878;
      v102[3] = &unk_10050C610;
      id v103 = *(id *)(a1 + 32);
      LOBYTE(v68) = v38;
      uint64_t v67 = v37;
      id v18 = v33;
      [v32 addDeviceOwner:v13 sharedUserId:v71 loggableSharedUserId:v70 iCloudAltDSID:v69 audioAppSignals:v34 enrollmentName:@"primary_user" companionInfo:v35 shareOwnerName:v67 homeMemberSettings:v36 loggingAllowed:v68 completion:v102];
    }
    id v8 = v73;
    id v7 = v74;
LABEL_26:
    id v9 = v75;
    unsigned int v15 = v76;
    goto LABEL_40;
  }
  v72 = v13;
  if ([*(id *)(a1 + 160) containsObject:v8]
    && [v9 containsObject:v13])
  {
    v39 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      uint64_t v40 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 136315651;
      v118 = "-[ADCloudKitMultiUserSharedDataStore setKeyValueRecordsAndVoiceProfile:records:completion:]_block_invoke";
      __int16 v119 = 2113;
      id v120 = v13;
      __int16 v121 = 2113;
      uint64_t v122 = v40;
      _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_INFO, "%s Found a shared user. Adding homeUserId %{private}@ with sharedUserId %{private}@ to multiuser group", buf, 0x20u);
    }
    id v75 = v9;
    v76 = v15;
    v41 = AFSiriLogContextMultiUser;
    v42 = v41;
    os_signpost_id_t v43 = *(void *)(*(void *)(a1 + 104) + 8);
    if (v43 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v41))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v42, OS_SIGNPOST_INTERVAL_END, v43, "MultiUserService", "Shared user synced", buf, 2u);
    }

    id v44 = objc_alloc((Class)NSString);
    v45 = +[NSNumber numberWithUnsignedInt:arc4random() % 9];
    v46 = [v45 stringValue];
    id v47 = [v44 initWithFormat:@"%@_%@", @"secondary", v46];

    v48 = *(void **)(a1 + 32);
    v49 = *(void **)(a1 + 112);
    uint64_t v50 = *(void *)(a1 + 120);
    uint64_t v51 = *(void *)(a1 + 128);
    v89[0] = _NSConcreteStackBlock;
    v89[1] = 3221225472;
    v89[2] = sub_10014F95C;
    v89[3] = &unk_100503A88;
    id v52 = v48;
    uint64_t v53 = *(void *)(a1 + 104);
    id v90 = v52;
    uint64_t v91 = v53;
    id v92 = *(id *)(a1 + 136);
    id v93 = *(id *)(a1 + 144);
    id v94 = *(id *)(a1 + 152);
    id v95 = *(id *)(a1 + 160);
    id v96 = v18;
    id v97 = *(id *)(a1 + 56);
    id v98 = *(id *)(a1 + 64);
    id v99 = *(id *)(a1 + 128);
    id v100 = *(id *)(a1 + 168);
    id v101 = *(id *)(a1 + 176);
    LOBYTE(v66) = 0;
    [v49 addUser:v72 sharedUserId:v52 loggableSharedUserId:v50 iCloudAltDSID:v51 enrollmentName:v47 isPrimary:0 nonCloudSyncedUser:v66 completion:v89];

    __int16 v13 = v72;
    goto LABEL_26;
  }
  if (*(unsigned char *)(*(void *)(a1 + 104) + 64)
    && +[AFFeatureFlags isLassoEnabled]
    && (uint64_t v54 = *(void *)(a1 + 128)) != 0)
  {
    v55 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      v56 = *(void **)(a1 + 32);
      *(_DWORD *)buf = 136315651;
      v118 = "-[ADCloudKitMultiUserSharedDataStore setKeyValueRecordsAndVoiceProfile:records:completion:]_block_invoke";
      __int16 v119 = 2113;
      id v120 = v56;
      __int16 v121 = 2113;
      uint64_t v122 = v54;
      _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_INFO, "%s Found a user not part of Home. Adding user with sharedUserId %{private}@ iCloudAltDSID %{private}@ to multiuser group", buf, 0x20u);
    }
    v57 = AFSiriLogContextMultiUser;
    v58 = v57;
    os_signpost_id_t v59 = *(void *)(*(void *)(a1 + 104) + 8);
    if (v59 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v57))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v58, OS_SIGNPOST_INTERVAL_END, v59, "MultiUserService", "Additional user synced", buf, 2u);
    }

    v60 = *(void **)(a1 + 32);
    v61 = *(void **)(a1 + 112);
    v77[0] = _NSConcreteStackBlock;
    v77[1] = 3221225472;
    v77[2] = sub_10014FCC8;
    v77[3] = &unk_100503A88;
    v77[4] = *(void *)(a1 + 104);
    id v78 = v60;
    id v88 = *(id *)(a1 + 176);
    id v79 = *(id *)(a1 + 136);
    id v80 = *(id *)(a1 + 144);
    id v81 = *(id *)(a1 + 152);
    id v82 = *(id *)(a1 + 160);
    id v83 = v18;
    id v84 = *(id *)(a1 + 56);
    id v85 = *(id *)(a1 + 64);
    id v86 = *(id *)(a1 + 128);
    id v87 = *(id *)(a1 + 168);
    LOBYTE(v65) = 0;
    __int16 v13 = v72;
    objc_msgSend(v61, "addUser:sharedUserId:loggableSharedUserId:iCloudAltDSID:enrollmentName:isPrimary:nonCloudSyncedUser:completion:", v65, v77);
  }
  else
  {
    v62 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315138;
      v118 = "-[ADCloudKitMultiUserSharedDataStore setKeyValueRecordsAndVoiceProfile:records:completion:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v62, OS_LOG_TYPE_INFO, "%s Found a record that does not match current home. Ignoring.", buf, 0xCu);
    }
    uint64_t v63 = *(void *)(a1 + 176);
    __int16 v13 = v72;
    if (v63) {
      (*(void (**)(uint64_t, void))(v63 + 16))(v63, 0);
    }
  }
LABEL_40:
}

void sub_10014F500(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!v3) {
    goto LABEL_5;
  }
  int v4 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
  {
    uint64_t v17 = *(void *)(a1 + 32);
    *(_DWORD *)buf = 136315651;
    id v28 = "-[ADCloudKitMultiUserSharedDataStore setKeyValueRecordsAndVoiceProfile:records:completion:]_block_invoke";
    __int16 v29 = 2113;
    uint64_t v30 = v17;
    __int16 v31 = 2112;
    id v32 = v3;
    _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "%s error adding primary user with %{private}@ error (%@)", buf, 0x20u);
  }
  if (!objc_msgSend(*(id *)(a1 + 40), "_errorIsRecoverableForPrimary:", objc_msgSend(v3, "code")))
  {
    int v10 = *(unsigned char **)(a1 + 40);
    if (v10[64] && objc_msgSend(v10, "_errorIsUserNotPresentOnTV:", objc_msgSend(v3, "code")))
    {
      __int16 v11 = AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v12 = *(void *)(a1 + 32);
        *(_DWORD *)buf = 136315651;
        id v28 = "-[ADCloudKitMultiUserSharedDataStore setKeyValueRecordsAndVoiceProfile:records:completion:]_block_invoke";
        __int16 v29 = 2113;
        uint64_t v30 = v12;
        __int16 v31 = 2112;
        id v32 = v3;
        _os_log_debug_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "%s error adding user with %{private}@, error: %@ as user does not have a profile on the TV", buf, 0x20u);
      }
    }
    else
    {
      __int16 v13 = +[SiriCoreSymptomsReporter sharedInstance];
      uint64_t v14 = +[NSProcessInfo processInfo];
      id v15 = [v14 processIdentifier];
      [v13 reportIssueWithBackOffTimerForType:@"multi_user" subType:@"add_user_to_home" context:&__NSDictionary0__struct processIdentifier:v15 walkboutStatus:byte_100585E38];
    }
    uint64_t v16 = *(void *)(a1 + 120);
    if (v16) {
      (*(void (**)(uint64_t, void))(v16 + 16))(v16, 0);
    }
  }
  else
  {
LABEL_5:
    objc_storeStrong((id *)(*(void *)(a1 + 40) + 48), *(id *)(a1 + 32));
    int v5 = +[ADMultiUserService sharedService];
    objc_msgSend(v5, "setShareOwnerName:homeMemberSettings:audioAppSignals:loggingAllowed:forSharedUserId:", *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), (unint64_t)objc_msgSend(*(id *)(a1 + 72), "count") < 2, *(void *)(a1 + 32));

    id v6 = +[ADMultiUserService sharedService];
    uint64_t v7 = *(void *)(a1 + 32);
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472;
    v19[2] = sub_1001502B0;
    v19[3] = &unk_100503A60;
    uint64_t v8 = *(void *)(a1 + 80);
    id v20 = *(id *)(a1 + 88);
    id v21 = *(id *)(a1 + 96);
    id v22 = v3;
    int8x16_t v18 = *(int8x16_t *)(a1 + 32);
    id v9 = (id)v18.i64[0];
    int8x16_t v23 = vextq_s8(v18, v18, 8uLL);
    id v24 = *(id *)(a1 + 104);
    id v25 = *(id *)(a1 + 112);
    id v26 = *(id *)(a1 + 120);
    [v6 updateMultiUserWithSharedUserId:v7 companionInfo:v8 completion:v19];
  }
}

void sub_10014F878(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    int v4 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      int v6 = 136315651;
      uint64_t v7 = "-[ADCloudKitMultiUserSharedDataStore setKeyValueRecordsAndVoiceProfile:records:completion:]_block_invoke";
      __int16 v8 = 2113;
      uint64_t v9 = v5;
      __int16 v10 = 2112;
      id v11 = v3;
      _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "%s error adding home owner with %{private}@ error (%@)", (uint8_t *)&v6, 0x20u);
    }
  }
}

void sub_10014F95C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!v3) {
    goto LABEL_5;
  }
  int v4 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
  {
    uint64_t v17 = *(void *)(a1 + 32);
    *(_DWORD *)buf = 136315651;
    id v28 = "-[ADCloudKitMultiUserSharedDataStore setKeyValueRecordsAndVoiceProfile:records:completion:]_block_invoke";
    __int16 v29 = 2113;
    uint64_t v30 = v17;
    __int16 v31 = 2112;
    id v32 = v3;
    _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "%s error adding user with %{private}@, error: %@", buf, 0x20u);
  }
  if (!objc_msgSend(*(id *)(a1 + 40), "_errorIsRecoverableForSecondary:", objc_msgSend(v3, "code")))
  {
    __int16 v10 = *(unsigned char **)(a1 + 40);
    if (v10[64] && objc_msgSend(v10, "_errorIsUserNotPresentOnTV:", objc_msgSend(v3, "code")))
    {
      id v11 = AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v12 = *(void *)(a1 + 32);
        *(_DWORD *)buf = 136315651;
        id v28 = "-[ADCloudKitMultiUserSharedDataStore setKeyValueRecordsAndVoiceProfile:records:completion:]_block_invoke";
        __int16 v29 = 2113;
        uint64_t v30 = v12;
        __int16 v31 = 2112;
        id v32 = v3;
        _os_log_debug_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "%s error adding user with %{private}@, error: %@ as user does not have a profile on the TV", buf, 0x20u);
      }
    }
    else
    {
      __int16 v13 = +[SiriCoreSymptomsReporter sharedInstance];
      uint64_t v14 = +[NSProcessInfo processInfo];
      id v15 = [v14 processIdentifier];
      [v13 reportIssueWithBackOffTimerForType:@"multi_user" subType:@"add_user_to_home" context:&__NSDictionary0__struct processIdentifier:v15 walkboutStatus:byte_100585E38];
    }
    uint64_t v16 = *(void *)(a1 + 120);
    if (v16) {
      (*(void (**)(uint64_t, void))(v16 + 16))(v16, 0);
    }
  }
  else
  {
LABEL_5:
    uint64_t v5 = +[ADMultiUserService sharedService];
    objc_msgSend(v5, "setShareOwnerName:homeMemberSettings:audioAppSignals:loggingAllowed:forSharedUserId:", *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), (unint64_t)objc_msgSend(*(id *)(a1 + 72), "count") < 2, *(void *)(a1 + 32));

    int v6 = +[ADMultiUserService sharedService];
    uint64_t v7 = *(void *)(a1 + 32);
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472;
    v19[2] = sub_1001501B0;
    v19[3] = &unk_100503A60;
    uint64_t v8 = *(void *)(a1 + 80);
    id v20 = *(id *)(a1 + 88);
    id v21 = *(id *)(a1 + 96);
    id v22 = v3;
    int8x16_t v18 = *(int8x16_t *)(a1 + 32);
    id v9 = (id)v18.i64[0];
    int8x16_t v23 = vextq_s8(v18, v18, 8uLL);
    id v24 = *(id *)(a1 + 104);
    id v25 = *(id *)(a1 + 112);
    id v26 = *(id *)(a1 + 120);
    [v6 updateMultiUserWithSharedUserId:v7 companionInfo:v8 completion:v19];
  }
}

void sub_10014FCC8(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = v3;
  if (!v3) {
    goto LABEL_9;
  }
  unsigned int v5 = objc_msgSend(*(id *)(a1 + 32), "_errorIsUserNotPresentOnTV:", objc_msgSend(v3, "code"));
  int v6 = AFSiriLogContextDaemon;
  if (v5)
  {
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v7 = *(void *)(a1 + 40);
      *(_DWORD *)buf = 136315651;
      uint64_t v30 = "-[ADCloudKitMultiUserSharedDataStore setKeyValueRecordsAndVoiceProfile:records:completion:]_block_invoke";
      __int16 v31 = 2113;
      uint64_t v32 = v7;
      __int16 v33 = 2112;
      uint64_t v34 = v4;
      _os_log_debug_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "%s error adding user with %{private}@, error: %@ as user does not have a profile on the TV", buf, 0x20u);
    }
    goto LABEL_11;
  }
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
  {
    uint64_t v19 = *(void *)(a1 + 40);
    *(_DWORD *)buf = 136315651;
    uint64_t v30 = "-[ADCloudKitMultiUserSharedDataStore setKeyValueRecordsAndVoiceProfile:records:completion:]_block_invoke";
    __int16 v31 = 2113;
    uint64_t v32 = v19;
    __int16 v33 = 2112;
    uint64_t v34 = v4;
    _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "%s error adding non home user with sharedUserID %{private}@ error (%@)", buf, 0x20u);
  }
  if ((objc_msgSend(*(id *)(a1 + 32), "_errorIsRecoverableForPrimary:", objc_msgSend(v4, "code")) & 1) != 0
    || objc_msgSend(*(id *)(a1 + 32), "_errorIsRecoverableForSecondary:", objc_msgSend(v4, "code")))
  {
LABEL_9:
    uint64_t v8 = +[ADMultiUserService sharedService];
    objc_msgSend(v8, "setShareOwnerName:homeMemberSettings:audioAppSignals:loggingAllowed:forSharedUserId:", *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), (unint64_t)objc_msgSend(*(id *)(a1 + 72), "count") < 2, *(void *)(a1 + 40));

    id v9 = +[ADMultiUserService sharedService];
    uint64_t v10 = *(void *)(a1 + 40);
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472;
    v20[2] = sub_100150038;
    v20[3] = &unk_100503A60;
    uint64_t v11 = *(void *)(a1 + 80);
    id v21 = *(id *)(a1 + 88);
    id v22 = *(id *)(a1 + 96);
    id v23 = v4;
    id v24 = *(id *)(a1 + 104);
    id v12 = *(id *)(a1 + 120);
    uint64_t v13 = *(void *)(a1 + 32);
    uint64_t v14 = *(void **)(a1 + 40);
    id v28 = v12;
    uint64_t v25 = v13;
    id v26 = v14;
    id v27 = *(id *)(a1 + 112);
    [v9 updateMultiUserWithSharedUserId:v10 companionInfo:v11 completion:v20];

    goto LABEL_13;
  }
  id v15 = +[SiriCoreSymptomsReporter sharedInstance];
  uint64_t v16 = +[NSProcessInfo processInfo];
  id v17 = [v16 processIdentifier];
  [v15 reportIssueWithBackOffTimerForType:@"multi_user" subType:@"add_user_to_home" context:&__NSDictionary0__struct processIdentifier:v17 walkboutStatus:byte_100585E38];

LABEL_11:
  uint64_t v18 = *(void *)(a1 + 120);
  if (v18) {
    (*(void (**)(uint64_t, void))(v18 + 16))(v18, 0);
  }
LABEL_13:
}

void sub_100150038(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = *(void *)(a1 + 40);
    int v10 = 136315907;
    uint64_t v11 = "-[ADCloudKitMultiUserSharedDataStore setKeyValueRecordsAndVoiceProfile:records:completion:]_block_invoke";
    __int16 v12 = 2112;
    id v13 = v3;
    __int16 v14 = 2113;
    uint64_t v15 = v5;
    __int16 v16 = 2113;
    uint64_t v17 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%s Updated non home multiuser with error (%@) companionAssistantID = %{private}@ companionSpeechID = %{private}@", (uint8_t *)&v10, 0x2Au);
  }
  uint64_t v7 = *(void *)(a1 + 48);
  if (_AFPreferencesSiriRMVSetting())
  {
    [*(id *)(a1 + 64) _updateVoiceIDProfilesForSharedUser:*(void *)(a1 + 72) iCloudAltDSID:*(void *)(a1 + 56) records:*(void *)(a1 + 80) isPrimary:0 isNewUser:v7 == 0 completion:*(void *)(a1 + 88)];
  }
  else
  {
    uint64_t v8 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      int v10 = 136315138;
      uint64_t v11 = "-[ADCloudKitMultiUserSharedDataStore setKeyValueRecordsAndVoiceProfile:records:completion:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "%s RMV setting is off for this user. Ignoring voice profile download.", (uint8_t *)&v10, 0xCu);
    }
    uint64_t v9 = *(void *)(a1 + 88);
    if (v9) {
      (*(void (**)(uint64_t, void))(v9 + 16))(v9, 0);
    }
  }
}

void sub_1001501B0(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = *(void *)(a1 + 40);
    int v7 = 136315907;
    uint64_t v8 = "-[ADCloudKitMultiUserSharedDataStore setKeyValueRecordsAndVoiceProfile:records:completion:]_block_invoke";
    __int16 v9 = 2112;
    id v10 = v3;
    __int16 v11 = 2113;
    uint64_t v12 = v5;
    __int16 v13 = 2113;
    uint64_t v14 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%s Updated shared multiuser with error (%@) %{private}@/%{private}@", (uint8_t *)&v7, 0x2Au);
  }
  [*(id *)(a1 + 56) _updateVoiceIDProfilesForSharedUser:*(void *)(a1 + 64) iCloudAltDSID:*(void *)(a1 + 72) records:*(void *)(a1 + 80) isPrimary:0 isNewUser:*(void *)(a1 + 48) == 0 completion:*(void *)(a1 + 88)];
}

void sub_1001502B0(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = *(void *)(a1 + 40);
    int v7 = 136315907;
    uint64_t v8 = "-[ADCloudKitMultiUserSharedDataStore setKeyValueRecordsAndVoiceProfile:records:completion:]_block_invoke";
    __int16 v9 = 2112;
    id v10 = v3;
    __int16 v11 = 2113;
    uint64_t v12 = v5;
    __int16 v13 = 2113;
    uint64_t v14 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%s Updated primary multiuser with error (%@) companionAssistantID = %{private}@ companionSpeechID = %{private}@", (uint8_t *)&v7, 0x2Au);
  }
  [*(id *)(a1 + 56) _updateVoiceIDProfilesForSharedUser:*(void *)(a1 + 64) iCloudAltDSID:*(void *)(a1 + 72) records:*(void *)(a1 + 80) isPrimary:1 isNewUser:*(void *)(a1 + 48) == 0 completion:*(void *)(a1 + 88)];
}

void sub_1001508BC(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = AFSiriLogContextDaemon;
  if (v3)
  {
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      int v7 = 136315394;
      uint64_t v8 = "-[ADCloudKitMultiUserSharedDataStore checkForATVRMVSettingUpdate:]_block_invoke";
      __int16 v9 = 2112;
      id v10 = v3;
      _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "%s Could not apply RmV setting with error %@", (uint8_t *)&v7, 0x16u);
    }
  }
  else
  {
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      int v7 = 136315138;
      uint64_t v8 = "-[ADCloudKitMultiUserSharedDataStore checkForATVRMVSettingUpdate:]_block_invoke";
      _os_log_debug_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "%s Deleting Rmv setting", (uint8_t *)&v7, 0xCu);
    }
    uint64_t v5 = +[ADCloudKitManager sharedManager];
    uint64_t v11 = *(void *)(a1 + 32);
    uint64_t v6 = +[NSArray arrayWithObjects:&v11 count:1];
    [v5 addDictionaryToSharedStore:0 recordKeysForDeletion:v6 completion:&stru_100503A38];
  }
}

void sub_100150A38(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  id v3 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    int v4 = 136315394;
    uint64_t v5 = "-[ADCloudKitMultiUserSharedDataStore checkForATVRMVSettingUpdate:]_block_invoke";
    __int16 v6 = 2112;
    int v7 = v2;
    _os_log_debug_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "%s Setting delete operation completed with error %@", (uint8_t *)&v4, 0x16u);
  }
}

void sub_100150F74(uint64_t a1)
{
  uint64_t v2 = +[ADPreferences sharedPreferences];
  id v6 = [v2 phsAssetManifest:1];

  if (v6)
  {
    id v3 = sub_10007891C(v6);
    int v4 = *(void (**)(void))(*(void *)(a1 + 32) + 16);
  }
  else
  {
    uint64_t v5 = *(void *)(a1 + 32);
    id v3 = +[AFError errorWithCode:4017];
    int v4 = *(void (**)(void))(v5 + 16);
  }
  v4();
}

void sub_100151188(void *a1)
{
  uint64_t v2 = a1[4];
  id v3 = *(void **)(v2 + 16);
  if (v3)
  {
    int v4 = *(void **)(v2 + 24);
    if (!v4)
    {
      uint64_t v5 = sub_10007891C(v3);
      uint64_t v6 = a1[4];
      int v7 = *(void **)(v6 + 24);
      *(void *)(v6 + 24) = v5;

      int v4 = *(void **)(a1[4] + 24);
    }
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    id v8 = v4;
    id v9 = [v8 countByEnumeratingWithState:&v17 objects:v21 count:16];
    if (v9)
    {
      id v10 = v9;
      uint64_t v11 = *(void *)v18;
      while (2)
      {
        for (i = 0; i != v10; i = (char *)i + 1)
        {
          if (*(void *)v18 != v11) {
            objc_enumerationMutation(v8);
          }
          __int16 v13 = *(void **)(*((void *)&v17 + 1) + 8 * i);
          if (objc_msgSend(v13, "isEqualToString:", a1[5], (void)v17))
          {
            uint64_t v14 = [*(id *)(a1[4] + 24) objectForKey:v13];
            if (v14)
            {
              __int16 v16 = (void *)v14;
              (*(void (**)(void))(a1[6] + 16))();

              return;
            }
          }
        }
        id v10 = [v8 countByEnumeratingWithState:&v17 objects:v21 count:16];
        if (v10) {
          continue;
        }
        break;
      }
    }
  }
  else
  {
    uint64_t v15 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315138;
      id v23 = "-[ADCloudKitMultiUserSharedDataStore fetchDeviceTypesForLanguage:completion:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "%s No assetManifestCache", buf, 0xCu);
    }
  }
  (*(void (**)(void))(a1[6] + 16))();
}

id sub_100151494(uint64_t a1)
{
  return [*(id *)(a1 + 32) _cleanupCacheDirectory];
}

void sub_100152588(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
}

NSDictionary *sub_1001534DC(uint64_t a1)
{
  return +[NSDictionary dictionaryWithDictionary:*(void *)(a1 + 32)];
}

id sub_100154218(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 32)) {
    CFStringRef v1 = @"owner";
  }
  else {
    CFStringRef v1 = @"participant";
  }
  v6[0] = @"user";
  v6[1] = @"date";
  v7[0] = v1;
  uint64_t v2 = +[NSDate date];
  id v3 = +[NSDateFormatter localizedStringFromDate:v2 dateStyle:1 timeStyle:4];
  v7[1] = v3;
  int v4 = +[NSDictionary dictionaryWithObjects:v7 forKeys:v6 count:2];

  return v4;
}

void sub_10015431C(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    id v35 = "-[ADCloudKitMultiUserSharedDataStore _updateVoiceIDProfilesForSharedUser:iCloudAltDSID:records:isPrimary:isNew"
          "User:completion:]_block_invoke";
    __int16 v36 = 2112;
    id v37 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%s All desired downloading done with error %@.", buf, 0x16u);
  }
  id v26 = v3;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  uint64_t v5 = objc_msgSend(*(id *)(a1 + 32), "allValues", a1);
  id v6 = [v5 countByEnumeratingWithState:&v30 objects:v40 count:16];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = *(void *)v31;
    do
    {
      for (i = 0; i != v7; i = (char *)i + 1)
      {
        if (*(void *)v31 != v8) {
          objc_enumerationMutation(v5);
        }
        id v10 = *(void **)(*((void *)&v30 + 1) + 8 * i);
        uint64_t v11 = AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315394;
          id v35 = "-[ADCloudKitMultiUserSharedDataStore _updateVoiceIDProfilesForSharedUser:iCloudAltDSID:records:isPrimary"
                ":isNewUser:completion:]_block_invoke";
          __int16 v36 = 2112;
          id v37 = v10;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "%s Removing cached CKAsset file: %@", buf, 0x16u);
        }
        uint64_t v12 = +[NSFileManager defaultManager];
        id v29 = 0;
        [v12 removeItemAtPath:v10 error:&v29];
        id v13 = v29;

        if (v13)
        {
          uint64_t v14 = AFSiriLogContextDaemon;
          if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315650;
            id v35 = "-[ADCloudKitMultiUserSharedDataStore _updateVoiceIDProfilesForSharedUser:iCloudAltDSID:records:isPrima"
                  "ry:isNewUser:completion:]_block_invoke";
            __int16 v36 = 2112;
            id v37 = v10;
            __int16 v38 = 2112;
            id v39 = v13;
            _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "%s Failure removing cached CKAsset file: %@ error: %@", buf, 0x20u);
          }
        }
      }
      id v7 = [v5 countByEnumeratingWithState:&v30 objects:v40 count:16];
    }
    while (v7);
  }

  if (v26)
  {
    uint64_t v15 = +[AFAnalytics sharedAnalytics];
    v27[0] = _NSConcreteStackBlock;
    v27[1] = 3221225472;
    v27[2] = sub_100154730;
    v27[3] = &unk_10050E0C8;
    id v16 = v26;
    id v28 = v16;
    [v15 logEventWithType:6106 contextProvider:v27];

    uint64_t v17 = v25;
    uint64_t v18 = v25 + 64;
    if (!*(void *)(v25 + 64)) {
      goto LABEL_23;
    }
    id v19 = objc_alloc_init((Class)NSMutableDictionary);
    [v19 setObject:v16 forKey:NSUnderlyingErrorKey];
    long long v20 = +[AFError errorWithCode:4011];
  }
  else
  {
    id v21 = +[ADMultiUserService sharedService];
    [v21 updateVoiceProfiles];

    uint64_t v17 = v25;
    [*(id *)(v25 + 40) _logRelevantAnalyticsOnMultiUserVoiceProfileDownloadSuccessWithSharedUserID:*(void *)(v25 + 48) isPrimary:*(unsigned __int8 *)(v25 + 72) isNewUser:*(unsigned __int8 *)(v25 + 73)];
    uint64_t v18 = v25 + 64;
    if (!*(void *)(v25 + 64)) {
      goto LABEL_23;
    }
    uint64_t v22 = *(void *)(v25 + 40);
    id v23 = *(id *)(v25 + 56);
    long long v20 = 0;
    id v19 = *(id *)(v22 + 16);
    *(void *)(v22 + 16) = v23;
  }

  if (([*(id *)(v17 + 40) dataStoreIsOnSharedDatabase] & 1) == 0)
  {
    id v24 = +[NSNotificationCenter defaultCenter];
    [v24 postNotificationName:@"ADCloudKitOwnerFetchCompleteNotification" object:0];
  }
  (*(void (**)(void))(*(void *)v18 + 16))();

LABEL_23:
}

id sub_100154718(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _[*(id *)(a1 + 32) _constructRecord:a2 fileArchives:*(void *)(a1 + 40) assetManifest:*(void *)(a1 + 48) filePath:a3];
}

uint64_t sub_100154730()
{
  return AFAnalyticsContextCreateWithError();
}

id sub_100154ACC(uint64_t a1)
{
  return [*(id *)(a1 + 32) _mergeDataWithModifiedRecords:*(void *)(a1 + 40) deletedRecordIDs:*(void *)(a1 + 48) containsAllChanges:*(unsigned __int8 *)(a1 + 64) completion:*(void *)(a1 + 56)];
}

void sub_100154F50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  _Block_object_dispose(&a31, 8);
  _Block_object_dispose((const void *)(v31 - 176), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100154F90(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100154FA0(uint64_t a1)
{
}

void sub_100154FA8(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    id v24 = "-[ADCloudKitMultiUserSharedDataStore _synchronizeVoiceIDWithActivity:completion:]_block_invoke";
    __int16 v25 = 2112;
    id v26 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%s Completion handler called. Error: %@", buf, 0x16u);
  }
  uint64_t v5 = *(void *)(a1 + 32);
  if (v3)
  {
    [*(id *)(v5 + 56) notifyUserVoiceProfileUploadCompleteForSiriProfileId:*(void *)(v5 + 48) withError:v3];
    uint64_t v6 = *(void *)(a1 + 56);
    if (v6) {
      (*(void (**)(uint64_t, void))(v6 + 16))(v6, 0);
    }
  }
  else
  {
    id v7 = [(id)v5 isMirroredDataStore];
    uint64_t v8 = +[ADCloudKitManager sharedManager];
    uint64_t v9 = *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40);
    uint64_t v10 = *(void *)(a1 + 32);
    uint64_t v11 = *(void *)(a1 + 40);
    uint64_t v12 = *(void *)(v10 + 72);
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472;
    v16[2] = sub_100155D94;
    v16[3] = &unk_100503978;
    uint64_t v13 = *(void *)(a1 + 72);
    v16[4] = v10;
    uint64_t v20 = v13;
    char v22 = (char)v7;
    id v14 = *(id *)(a1 + 48);
    uint64_t v15 = *(void *)(a1 + 64);
    id v17 = v14;
    uint64_t v21 = v15;
    id v18 = *(id *)(a1 + 40);
    id v19 = *(id *)(a1 + 56);
    [v8 saveFileAssetRecordsWithDictionary:v9 mirror:v7 onZone:v12 activity:v11 completion:v16];
  }
}

id sub_1001551A0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  char v68 = 0;
  if (!v6
    || ((unsigned __int8 v7 = [*(id *)(a1 + 32) fileExistsAtPath:v6 isDirectory:&v68], v68)
      ? (unsigned __int8 v8 = v7)
      : (unsigned __int8 v8 = 0),
        (v8 & 1) == 0))
  {
    id v27 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      buf.st_dev = 136315138;
      *(void *)&buf.st_mode = "-[ADCloudKitMultiUserSharedDataStore _synchronizeVoiceIDWithActivity:completion:]_block_invoke_2";
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_INFO, "%s No voice trigger path to sync", (uint8_t *)&buf, 0xCu);
    }
    goto LABEL_24;
  }
  if (([*(id *)(a1 + 32) isReadableFileAtPath:v6] & 1) == 0)
  {
    long long v30 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      buf.st_dev = 136315138;
      *(void *)&buf.st_mode = "-[ADCloudKitMultiUserSharedDataStore _synchronizeVoiceIDWithActivity:completion:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_INFO, "%s Voice trigger path is unreadable", (uint8_t *)&buf, 0xCu);
    }
LABEL_24:
    uint64_t v28 = +[AFError errorWithCode:4000];
    goto LABEL_25;
  }
  uint64_t v9 = [v5 languageCode];
  if (v9)
  {
    uint64_t v10 = [v5 version];
    if (v10)
    {
      uint64_t v11 = [v5 productCategory];
      BOOL v12 = v11 == 0;

      if (!v12)
      {
        uint64_t v13 = +[NSNumber numberWithUnsignedInt:arc4random()];
        id v14 = [v13 stringValue];
        uint64_t v66 = +[NSString stringWithFormat:@"temp_%@.zip", v14];

        uint64_t v15 = [*(id *)(a1 + 40) stringByAppendingPathComponent:v66];
        id v16 = AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
        {
          buf.st_dev = 136315650;
          *(void *)&buf.st_mode = "-[ADCloudKitMultiUserSharedDataStore _synchronizeVoiceIDWithActivity:completion:]_block_invoke";
          WORD2(buf.st_ino) = 2112;
          *(__darwin_ino64_t *)((char *)&buf.st_ino + 6) = (__darwin_ino64_t)v6;
          HIWORD(buf.st_gid) = 2112;
          *(void *)&buf.st_rdev = v15;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "%s filePath = %@, archivePath = %@", (uint8_t *)&buf, 0x20u);
        }
        id v17 = v6;
        id v18 = v15;
        id v19 = AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
        {
          buf.st_dev = 136315138;
          *(void *)&buf.st_mode = "_ADCloudKitCompressDirectoryToArchive";
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "%s ", (uint8_t *)&buf, 0xCu);
        }
        memset(&buf, 0, sizeof(buf));
        id v20 = v17;
        uint64_t v21 = (const char *)[v20 cStringUsingEncoding:4];
        if (stat(v21, &buf))
        {
          char v22 = (void *)AFSiriLogContextDaemon;
          if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
          {
            v56 = v22;
            v57 = __error();
            v58 = strerror(*v57);
            *(_DWORD *)v76 = 136315650;
            *(void *)&v76[4] = "_ADCloudKitCompressDirectoryToArchive";
            *(_WORD *)&v76[12] = 2080;
            *(void *)&v76[14] = v21;
            *(_WORD *)&v76[22] = 2080;
            *(void *)&v76[24] = v58;
            _os_log_error_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_ERROR, "%s Failed to stat source path \"%s\": %s", v76, 0x20u);
          }
        }
        else
        {
          id v32 = v18;
          long long v33 = (const char *)[v32 cStringUsingEncoding:4];
          uint64_t v34 = fopen(v33, "w+");
          id v35 = v34;
          if (v34)
          {
            long long v80 = 0u;
            long long v81 = 0u;
            uint64_t v77 = 0;
            long long v79 = 0u;
            memset(v76, 0, sizeof(v76));
            uint64_t v82 = 0;
            id v78 = v34;
            if ((buf.st_mode & 0xF000) == 0x4000)
            {
              v74[0] = kSZArchiverOptionCompressionOptions;
              v74[1] = kSZArchiverOptionZlibCompressionLevel;
              v75[0] = kSZArchiverCompressionOptionTryRecompress;
              v75[1] = &off_1005234F8;
              v74[2] = kSZArchiverOptionSkipPrescan;
              v74[3] = kSZArchiverOptionUncompressBloatedFiles;
              v75[2] = &__kCFBooleanFalse;
              v75[3] = &__kCFBooleanTrue;
              v74[4] = kSZArchiverOptionNoCache;
              v75[4] = &__kCFBooleanTrue;
              __int16 v36 = +[NSDictionary dictionaryWithObjects:v75 forKeys:v74 count:5];
              if (SZArchiverCreateStreamableZip())
              {

                fclose(v35);
                id v37 = +[NSFileManager defaultManager];
                uint64_t v64 = [v37 attributesOfItemAtPath:v32 error:0];

                uint64_t v65 = [v64 objectForKey:NSFileSize];
                if (v65)
                {
                  uint64_t v63 = +[NSURL fileURLWithPath:v32];
                  id v38 = [objc_alloc((Class)CKAsset) initWithFileURL:v63];
                  if (v38)
                  {
                    v61 = v38;
                    v62 = +[NSNumber numberWithUnsignedInteger:2];
                    id v39 = [v5 productCategory];
                    uint64_t v40 = [v5 languageCode];
                    v41 = [v5 version];
                    v42 = [v41 stringValue];
                    os_signpost_id_t v43 = +[NSString stringWithFormat:@"%@%@,%@%@,%@%@", @"Categ:", v39, @"Lang:", v40, @"Vers:", v42];

                    v70[0] = @"fileName";
                    v70[1] = @"fileCompressionType";
                    v71[0] = v43;
                    v71[1] = v62;
                    v70[2] = @"fileAssetSize";
                    v70[3] = @"fileAsset";
                    v71[2] = v65;
                    v71[3] = v61;
                    v70[4] = @"languages";
                    id v44 = [v5 languageCode];
                    uint64_t v69 = v44;
                    v45 = +[NSArray arrayWithObjects:&v69 count:1];
                    v71[4] = v45;
                    v70[5] = @"productType";
                    v70[6] = @"buildVersion";
                    uint64_t v46 = *(void *)(a1 + 64);
                    v71[5] = *(void *)(a1 + 56);
                    v71[6] = v46;
                    id v47 = +[NSDictionary dictionaryWithObjects:v71 forKeys:v70 count:7];

                    [*(id *)(*(void *)(*(void *)(a1 + 72) + 8) + 40) addObject:v47];
                    v48 = *(void **)(*(void *)(*(void *)(a1 + 80) + 8) + 40);
                    v49 = [v5 languageCode];
                    [v48 addObject:v49];

                    uint64_t v50 = AFSiriLogContextDaemon;
                    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
                    {
                      buf.st_dev = 136315906;
                      *(void *)&buf.st_mode = "-[ADCloudKitMultiUserSharedDataStore _synchronizeVoiceIDWithActivity:com"
                                                "pletion:]_block_invoke";
                      WORD2(buf.st_ino) = 2112;
                      *(__darwin_ino64_t *)((char *)&buf.st_ino + 6) = (__darwin_ino64_t)v43;
                      HIWORD(buf.st_gid) = 2112;
                      *(void *)&buf.st_rdev = v63;
                      LOWORD(buf.st_atimespec.tv_sec) = 2112;
                      *(__darwin_time_t *)((char *)&buf.st_atimespec.tv_sec + 2) = (__darwin_time_t)v65;
                      _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_INFO, "%s Creating record with name (%@) to file archive (%@) of file size = %@", (uint8_t *)&buf, 0x2Au);
                    }

                    id v26 = 0;
                  }
                  else
                  {
                    v60 = AFSiriLogContextDaemon;
                    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
                    {
                      buf.st_dev = 136315138;
                      *(void *)&buf.st_mode = "-[ADCloudKitMultiUserSharedDataStore _synchronizeVoiceIDWithActivity:com"
                                                "pletion:]_block_invoke";
                      _os_log_error_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_ERROR, "%s Unable to create file asset", (uint8_t *)&buf, 0xCu);
                    }
                    id v26 = +[AFError errorWithCode:4004];
                  }
                }
                else
                {
                  os_signpost_id_t v59 = AFSiriLogContextDaemon;
                  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
                  {
                    buf.st_dev = 136315138;
                    *(void *)&buf.st_mode = "-[ADCloudKitMultiUserSharedDataStore _synchronizeVoiceIDWithActivity:compl"
                                              "etion:]_block_invoke_2";
                    _os_log_error_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_ERROR, "%s Unable to get file size of archive file", (uint8_t *)&buf, 0xCu);
                  }
                  id v26 = +[AFError errorWithCode:4000];
                }

                goto LABEL_21;
              }
              v55 = AFSiriLogContextDaemon;
              if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)v72 = 136315138;
                id v73 = "_ADCloudKitCompressDirectoryToArchive";
                _os_log_error_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_ERROR, "%s Archive operation failed.", v72, 0xCu);
              }

              fclose(v35);
            }
            else
            {
              fclose(v34);
            }
LABEL_18:
            id v23 = AFSiriLogContextDaemon;
            if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
            {
              buf.st_dev = 136315138;
              *(void *)&buf.st_mode = "-[ADCloudKitMultiUserSharedDataStore _synchronizeVoiceIDWithActivity:completion:]_block_invoke";
              _os_log_error_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "%s Failed compressing archive", (uint8_t *)&buf, 0xCu);
            }
            uint64_t v24 = *(void *)(a1 + 48);
            __int16 v25 = *(NSObject **)(v24 + 80);
            block[0] = _NSConcreteStackBlock;
            block[1] = 3221225472;
            block[2] = sub_100155D8C;
            block[3] = &unk_10050E138;
            void block[4] = v24;
            dispatch_async(v25, block);
            id v26 = +[AFError errorWithCode:4002];
LABEL_21:

            goto LABEL_26;
          }
          uint64_t v51 = (void *)AFSiriLogContextDaemon;
          if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
          {
            id v52 = v51;
            uint64_t v53 = __error();
            uint64_t v54 = strerror(*v53);
            *(_DWORD *)v76 = 136315650;
            *(void *)&v76[4] = "_ADCloudKitCompressDirectoryToArchive";
            *(_WORD *)&v76[12] = 2080;
            *(void *)&v76[14] = v33;
            *(_WORD *)&v76[22] = 2080;
            *(void *)&v76[24] = v54;
            _os_log_error_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_ERROR, "%s Failed to open output archive at \"%s\": %s", v76, 0x20u);
          }
        }

        goto LABEL_18;
      }
    }
    else
    {
    }
  }
  uint64_t v31 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
  {
    buf.st_dev = 136315138;
    *(void *)&buf.st_mode = "-[ADCloudKitMultiUserSharedDataStore _synchronizeVoiceIDWithActivity:completion:]_block_invoke";
    _os_log_error_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_ERROR, "%s No language or version or product category specified. File radar.", (uint8_t *)&buf, 0xCu);
  }
  uint64_t v28 = +[AFError errorWithCode:4001];
LABEL_25:
  id v26 = (void *)v28;
LABEL_26:

  return v26;
}

id sub_100155D8C(uint64_t a1)
{
  return [*(id *)(a1 + 32) _cleanupCacheDirectory];
}

void sub_100155D94(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  unsigned __int8 v7 = v6;
  if (v5 || ![v6 count])
  {
    unsigned __int8 v8 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)stat buf = 136315394;
      uint64_t v31 = "-[ADCloudKitMultiUserSharedDataStore _synchronizeVoiceIDWithActivity:completion:]_block_invoke_3";
      __int16 v32 = 2112;
      id v33 = v5;
      _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "%s Failed to save voice trigger records with error: %@", buf, 0x16u);
    }
    uint64_t v9 = +[AFAnalytics sharedAnalytics];
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472;
    v20[2] = sub_100156580;
    v20[3] = &unk_10050E0C8;
    uint64_t v10 = &v21;
    id v11 = v5;
    id v21 = v11;
    [v9 logEventWithType:6101 contextProvider:v20];

    [*(id *)(*(void *)(a1 + 32) + 56) notifyUserVoiceProfileUploadCompleteForSiriProfileId:*(void *)(*(void *)(a1 + 32) + 48) withError:v11];
    [*(id *)(a1 + 32) cleanupCacheDirectory];
    if (v5)
    {
      BOOL v12 = +[ADCloudKitManager sharedManager];
      [v12 handleCloudKitError:v11 forZone:@"com.apple.assistant.multiuser.shared" mirror:0 operationType:2];
    }
    uint64_t v13 = *(void *)(a1 + 56);
    if (v13) {
      (*(void (**)(uint64_t, void))(v13 + 16))(v13, 0);
    }
  }
  else
  {
    id v14 = *(NSObject **)(*(void *)(a1 + 32) + 80);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100156034;
    block[3] = &unk_100503950;
    uint64_t v10 = (id *)v23;
    id v15 = v7;
    uint64_t v16 = *(void *)(a1 + 32);
    id v17 = *(void **)(a1 + 40);
    v23[0] = v15;
    v23[1] = v16;
    uint64_t v27 = *(void *)(a1 + 64);
    char v29 = *(unsigned char *)(a1 + 80);
    id v18 = v17;
    uint64_t v19 = *(void *)(a1 + 72);
    id v24 = v18;
    uint64_t v28 = v19;
    id v25 = *(id *)(a1 + 48);
    id v26 = *(id *)(a1 + 56);
    dispatch_async(v14, block);
  }
}

void sub_100156034(uint64_t a1)
{
  uint64_t v2 = (void *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    id v3 = *(void **)(a1 + 32);
    int v4 = v2;
    id v5 = [v3 count];
    unsigned int v6 = [*(id *)(a1 + 40) dataStoreIsOnSharedDatabase];
    CFStringRef v7 = @"local container";
    *(void *)&uint8_t buf[4] = "-[ADCloudKitMultiUserSharedDataStore _synchronizeVoiceIDWithActivity:completion:]_block_invoke_2";
    *(_DWORD *)stat buf = 136315650;
    if (v6) {
      CFStringRef v7 = @"shared container";
    }
    *(_WORD *)&buf[12] = 2048;
    *(void *)&buf[14] = v5;
    *(_WORD *)&buf[22] = 2112;
    CFStringRef v37 = v7;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%s Successfully saved %ld shared voice trigger record(s) to (%@)", buf, 0x20u);
  }
  unsigned __int8 v8 = +[AFAnalytics sharedAnalytics];
  v33[0] = _NSConcreteStackBlock;
  v33[1] = 3221225472;
  v33[2] = sub_100156588;
  v33[3] = &unk_10050E0C8;
  v33[4] = *(void *)(a1 + 40);
  [v8 logEventWithType:6105 contextProvider:v33];

  if ([*(id *)(*(void *)(*(void *)(a1 + 72) + 8) + 40) count]
    && !*(unsigned char *)(a1 + 88)
    && ([*(id *)(a1 + 40) dataStoreIsOnSharedDatabase] & 1) == 0)
  {
    uint64_t v9 = +[ADPreferences sharedPreferences];
    uint64_t v10 = [v9 phsAssetManifest:1];
    id v11 = [v10 mutableCopy];

    if (!v11) {
      id v11 = (id)objc_opt_new();
    }
    v34[0] = @"modificationDate";
    BOOL v12 = +[NSDate date];
    v34[1] = @"languages";
    uint64_t v13 = *(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 40);
    v35[0] = v12;
    v35[1] = v13;
    v34[2] = @"productType";
    v35[2] = *(void *)(a1 + 48);
    id v14 = +[NSDictionary dictionaryWithObjects:v35 forKeys:v34 count:3];

    [v11 setObject:v14 forKey:*(void *)(a1 + 48)];
    id v15 = v11;
    uint64_t v16 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)stat buf = 136315138;
      *(void *)&uint8_t buf[4] = "_ADCloudKitSaveAssetManifest";
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "%s ", buf, 0xCu);
    }
    id v17 = +[ADPreferences sharedPreferences];
    [v17 setPhsAssetManifest:v15 onSharedZone:1];

    id v18 = +[ADPreferences sharedPreferences];
    [v18 synchronize];

    uint64_t v19 = sub_10007891C(v15);
    id v20 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)stat buf = 136315394;
      *(void *)&uint8_t buf[4] = "_ADCloudKitSaveAssetManifest";
      *(_WORD *)&buf[12] = 2112;
      *(void *)&buf[14] = v19;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "%s %@", buf, 0x16u);
    }
    CFStringRef v40 = @"PHS Language Manifest V2";
    id v21 = v19;
    if (!v19)
    {
      id v21 = +[NSNull null];
    }
    v41 = v21;
    char v22 = +[NSDictionary dictionaryWithObjects:&v41 forKeys:&v40 count:1];
    if (!v19) {

    }
    id v23 = +[ADCloudKitManager sharedManager];
    *(void *)stat buf = _NSConcreteStackBlock;
    *(void *)&buf[8] = 3221225472;
    *(void *)&buf[16] = sub_100078C0C;
    CFStringRef v37 = (const __CFString *)&unk_1004FFCB8;
    char v39 = 0;
    id v38 = v22;
    id v24 = v22;
    [v23 saveKeyValueRecordsWithDictionary:v24 mirror:0 completion:buf];
  }
  if ([*(id *)(a1 + 40) dataStoreShouldMirrorData])
  {
    id v25 = +[ADCloudKitManager sharedManager];
    uint64_t v26 = *(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 40);
    uint64_t v27 = *(void *)(a1 + 40);
    uint64_t v28 = *(void *)(v27 + 72);
    v31[0] = _NSConcreteStackBlock;
    v31[1] = 3221225472;
    v31[2] = sub_10015662C;
    v31[3] = &unk_10050D750;
    v31[4] = v27;
    uint64_t v29 = *(void *)(a1 + 56);
    id v32 = *(id *)(a1 + 64);
    [v25 saveFileAssetRecordsWithDictionary:v26 mirror:1 onZone:v28 activity:v29 completion:v31];
  }
  else
  {
    [*(id *)(*(void *)(a1 + 40) + 56) notifyUserVoiceProfileUploadCompleteForSiriProfileId:*(void *)(*(void *)(a1 + 40) + 48) withError:0];
    [*(id *)(a1 + 40) cleanupCacheDirectory];
    uint64_t v30 = *(void *)(a1 + 64);
    if (v30) {
      (*(void (**)(uint64_t, uint64_t))(v30 + 16))(v30, 1);
    }
  }
}

uint64_t sub_100156580()
{
  return AFAnalyticsContextCreateWithError();
}

id sub_100156588(uint64_t a1)
{
  CFStringRef v5 = @"container";
  unsigned int v1 = [*(id *)(a1 + 32) dataStoreIsOnSharedDatabase];
  CFStringRef v2 = @"local container";
  if (v1) {
    CFStringRef v2 = @"shared container";
  }
  CFStringRef v6 = v2;
  id v3 = +[NSDictionary dictionaryWithObjects:&v6 forKeys:&v5 count:1];
  return v3;
}

void sub_10015662C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  CFStringRef v7 = (void *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    unsigned __int8 v8 = v7;
    *(_DWORD *)stat buf = 136315650;
    id v18 = "-[ADCloudKitMultiUserSharedDataStore _synchronizeVoiceIDWithActivity:completion:]_block_invoke_2";
    __int16 v19 = 2048;
    id v20 = [v6 count];
    __int16 v21 = 2112;
    id v22 = v5;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "%s Saved %ld VT Record(s) to mirrored container with error (%@)", buf, 0x20u);
  }
  [*(id *)(*(void *)(a1 + 32) + 56) notifyUserVoiceProfileUploadCompleteForSiriProfileId:*(void *)(*(void *)(a1 + 32) + 48) withError:0];
  uint64_t v9 = +[AFAnalytics sharedAnalytics];
  uint64_t v10 = v9;
  if (v5)
  {
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472;
    v15[2] = sub_100156870;
    v15[3] = &unk_10050E0C8;
    id v11 = v5;
    id v16 = v11;
    [v10 logEventWithType:6101 contextProvider:v15];

    BOOL v12 = +[ADCloudKitManager sharedManager];
    [v12 handleCloudKitError:v11 forZone:@"com.apple.assistant.multiuser.shared" mirror:1 operationType:2];
  }
  else
  {
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    v14[2] = sub_100156878;
    v14[3] = &unk_10050E0C8;
    v14[4] = *(void *)(a1 + 32);
    [v9 logEventWithType:6105 contextProvider:v14];
  }
  uint64_t v13 = *(void *)(a1 + 40);
  if (v13) {
    (*(void (**)(uint64_t, uint64_t))(v13 + 16))(v13, 1);
  }
}

uint64_t sub_100156870()
{
  return AFAnalyticsContextCreateWithError();
}

id sub_100156878(uint64_t a1)
{
  CFStringRef v5 = @"container";
  unsigned int v1 = [*(id *)(a1 + 32) dataStoreIsOnSharedDatabase];
  CFStringRef v2 = @"local container";
  if (v1) {
    CFStringRef v2 = @"shared container";
  }
  CFStringRef v6 = v2;
  id v3 = +[NSDictionary dictionaryWithObjects:&v6 forKeys:&v5 count:1];
  return v3;
}

void sub_100156B00(uint64_t a1)
{
  if (!AFSupportsMultiUser() || *(void *)(*(void *)(a1 + 32) + 48))
  {
LABEL_3:
    uint64_t v2 = *(void *)(a1 + 32);
    if (*(unsigned char *)(v2 + 32))
    {
      *(unsigned char *)(v2 + 33) = 1;
      if (*(void *)(a1 + 48))
      {
        if (!*(void *)(*(void *)(a1 + 32) + 40))
        {
          id v3 = objc_alloc_init((Class)AFQueue);
          uint64_t v4 = *(void *)(a1 + 32);
          CFStringRef v5 = *(void **)(v4 + 40);
          *(void *)(v4 + 40) = v3;
        }
        CFStringRef v6 = AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)stat buf = 136315138;
          uint64_t v31 = "-[ADCloudKitMultiUserSharedDataStore synchronizeUsingActivity:completion:]_block_invoke";
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "%s Enqueue completion", buf, 0xCu);
        }
        CFStringRef v7 = *(void **)(*(void *)(a1 + 32) + 40);
        id v8 = objc_retainBlock(*(id *)(a1 + 48));
        [v7 enqueueObject:v8];
      }
    }
    else
    {
      *(unsigned char *)(v2 + 32) = 1;
      uint64_t v9 = AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
      {
        if (*(unsigned char *)(*(void *)(a1 + 32) + 65)) {
          CFStringRef v26 = @"shared";
        }
        else {
          CFStringRef v26 = @"owner";
        }
        *(_DWORD *)stat buf = 136315394;
        uint64_t v31 = "-[ADCloudKitMultiUserSharedDataStore synchronizeUsingActivity:completion:]_block_invoke";
        __int16 v32 = 2112;
        CFStringRef v33 = v26;
        _os_log_debug_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "%s Upload started for %@", buf, 0x16u);
      }
      uint64_t v10 = *(void **)(a1 + 32);
      uint64_t v11 = *(void *)(a1 + 40);
      v27[0] = _NSConcreteStackBlock;
      v27[1] = 3221225472;
      v27[2] = sub_100156E84;
      v27[3] = &unk_1005061E8;
      id v12 = *(id *)(a1 + 48);
      uint64_t v13 = *(void *)(a1 + 32);
      id v14 = *(void **)(a1 + 40);
      id v29 = v12;
      void v27[4] = v13;
      id v28 = v14;
      [v10 _synchronizeUsingActivity:v11 completion:v27];
    }
    return;
  }
  id v15 = +[ADMultiUserService sharedService];
  id v16 = [*(id *)(a1 + 32) zone];
  id v17 = [v16 zoneID];
  id v18 = [v17 ownerName];
  uint64_t v19 = [v15 getSharedUserIdForShareOwnerName:v18];
  uint64_t v20 = *(void *)(a1 + 32);
  __int16 v21 = *(void **)(v20 + 48);
  *(void *)(v20 + 48) = v19;

  CFStringRef v22 = *(const __CFString **)(*(void *)(a1 + 32) + 48);
  if (v22)
  {
    id v23 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)stat buf = 136315395;
      uint64_t v31 = "-[ADCloudKitMultiUserSharedDataStore synchronizeUsingActivity:completion:]_block_invoke";
      __int16 v32 = 2113;
      CFStringRef v33 = v22;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "%s SharedUserId is %{private}@", buf, 0x16u);
    }
    goto LABEL_3;
  }
  uint64_t v24 = *(void *)(a1 + 48);
  if (v24)
  {
    id v25 = *(void (**)(void))(v24 + 16);
    v25();
  }
}

void sub_100156E84(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)stat buf = 136315138;
    uint64_t v11 = "-[ADCloudKitMultiUserSharedDataStore synchronizeUsingActivity:completion:]_block_invoke";
    _os_log_debug_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "%s Upload ended", buf, 0xCu);
  }
  uint64_t v5 = *(void *)(a1 + 48);
  if (v5) {
    (*(void (**)(uint64_t, uint64_t))(v5 + 16))(v5, a2);
  }
  uint64_t v6 = *(void *)(a1 + 32);
  CFStringRef v7 = *(NSObject **)(v6 + 80);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100156FC8;
  v8[3] = &unk_10050E160;
  v8[4] = v6;
  id v9 = *(id *)(a1 + 40);
  dispatch_async(v7, v8);
}

void *sub_100156FC8(void *result)
{
  *(unsigned char *)(result[4] + 32) = 0;
  uint64_t v1 = result[4];
  if (*(unsigned char *)(v1 + 33))
  {
    *(unsigned char *)(v1 + 33) = 0;
    *(unsigned char *)(result[4] + 32) = 1;
    id v3 = (void *)result[4];
    uint64_t v2 = result[5];
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472;
    v4[2] = sub_100157060;
    v4[3] = &unk_10050B918;
    v4[4] = v3;
    return [v3 _synchronizeUsingActivity:v2 completion:v4];
  }
  return result;
}

void sub_100157060(uint64_t a1, char a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(NSObject **)(v2 + 80);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1001570D8;
  v4[3] = &unk_10050CD50;
  v4[4] = v2;
  char v5 = a2;
  dispatch_async(v3, v4);
}

void sub_1001570D8(uint64_t a1)
{
  *(unsigned char *)(*(void *)(a1 + 32) + 32) = 0;
  uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 40) dequeueObject];
  if (v2)
  {
    id v3 = (void (**)(void, void))v2;
    do
    {
      uint64_t v4 = AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)stat buf = 136315138;
        id v9 = "-[ADCloudKitMultiUserSharedDataStore synchronizeUsingActivity:completion:]_block_invoke_3";
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%s Dequeue completion", buf, 0xCu);
      }
      v3[2](v3, *(unsigned __int8 *)(a1 + 40));
      uint64_t v5 = [*(id *)(*(void *)(a1 + 32) + 40) dequeueObject];

      id v3 = (void (**)(void, void))v5;
    }
    while (v5);
  }
  uint64_t v6 = *(void *)(a1 + 32);
  CFStringRef v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = 0;
}

void sub_100157340(id a1, NSException *a2)
{
  uint64_t v2 = a2;
  id v3 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
  {
    int v4 = 136315394;
    uint64_t v5 = "-[ADCloudKitMultiUserSharedDataStore setServerChangeToken:]_block_invoke";
    __int16 v6 = 2112;
    CFStringRef v7 = v2;
    _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "%s Error encountered while encoding voice trigger server change token: %@", (uint8_t *)&v4, 0x16u);
  }
}

void sub_1001574A4(id a1, NSException *a2)
{
  uint64_t v2 = a2;
  id v3 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
  {
    int v4 = 136315394;
    uint64_t v5 = "-[ADCloudKitMultiUserSharedDataStore serverChangeToken]_block_invoke";
    __int16 v6 = 2112;
    CFStringRef v7 = v2;
    _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "%s Error encountered while decoding voice trigger server change token: %@", (uint8_t *)&v4, 0x16u);
  }
}

uint64_t sub_100157A64(uint64_t a1, uint64_t a2)
{
  objc_msgSend(*(id *)(a1 + 32), "_setLastKnownAvailableAnnouncementRequestTypesAndNotifyObservers:", objc_msgSend(*(id *)(a1 + 32), "_requestTypesForCarPlayAvailableOrConnected:", a2));
  id v3 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);
  return v3();
}

id sub_100157B58(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _availableAnnouncementRequestTypesForCarPlayConnectionWithCompletion:*(void *)(a1 + 40)];
}

uint64_t sub_100157BFC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = [*(id *)(a1 + 32) lastKnownEligibleAnnouncementRequestTypes];
  id v3 = *(uint64_t (**)(uint64_t, id))(v1 + 16);
  return v3(v1, v2);
}

id sub_100157D14(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _updateForCarPlaySessionConnected:*(unsigned __int8 *)(a1 + 40)];
}

id sub_100157E6C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _isCarPlayConnectedWithCompletion:*(void *)(a1 + 40)];
}

void sub_100157FD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class sub_100157FEC(uint64_t a1)
{
  v6[0] = 0;
  if (!qword_100585CD0)
  {
    v6[1] = _NSConcreteStackBlock;
    void v6[2] = (void *)3221225472;
    v6[3] = sub_1001581D8;
    v6[4] = &unk_10050E350;
    void v6[5] = v6;
    long long v7 = off_100503AD0;
    uint64_t v8 = 0;
    qword_100585CD0 = _sl_dlopen();
  }
  if (!qword_100585CD0)
  {
    id v3 = +[NSAssertionHandler currentHandler];
    int v4 = +[NSString stringWithUTF8String:"void *CarKitLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"AFCarPlayAnnouncementRequestCapabilityProvider.m", 20, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("CARSessionStatus");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    id v3 = +[NSAssertionHandler currentHandler];
    uint64_t v5 = +[NSString stringWithUTF8String:"Class getCARSessionStatusClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"AFCarPlayAnnouncementRequestCapabilityProvider.m", 21, @"Unable to find class %s", "CARSessionStatus");

LABEL_10:
    __break(1u);
  }
  qword_100585CC8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_1001581D8()
{
  uint64_t result = _sl_dlopen();
  qword_100585CD0 = result;
  return result;
}

void sub_100158450(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100158470()
{
  uint64_t v6 = 0;
  long long v7 = &v6;
  uint64_t v8 = 0x2020000000;
  v0 = (void **)qword_100585CD8;
  uint64_t v9 = qword_100585CD8;
  if (!qword_100585CD8)
  {
    uint64_t v1 = sub_100158628();
    v7[3] = (uint64_t)dlsym(v1, "INSearchForMessagesIntentIdentifier");
    qword_100585CD8 = v7[3];
    v0 = (void **)v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (v0)
  {
    id v2 = *v0;
    id v3 = v2;
  }
  else
  {
    int v4 = +[NSAssertionHandler currentHandler];
    uint64_t v5 = +[NSString stringWithUTF8String:"NSString *getINSearchForMessagesIntentIdentifier(void)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"AFCarPlayAnnouncementRequestCapabilityProvider.m", 29, @"%s", dlerror());

    __break(1u);
  }
}

void sub_1001585C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *sub_1001585D8(uint64_t a1)
{
  id v2 = sub_100158628();
  uint64_t result = dlsym(v2, "INSendMessageIntentIdentifier");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_100585CE8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_100158628()
{
  v4[0] = 0;
  if (!qword_100585CE0)
  {
    v4[1] = _NSConcreteStackBlock;
    v4[2] = (void *)3221225472;
    v4[3] = sub_10015877C;
    v4[4] = &unk_10050E350;
    void v4[5] = v4;
    long long v5 = off_100503AE8;
    uint64_t v6 = 0;
    qword_100585CE0 = _sl_dlopen();
  }
  v0 = (void *)qword_100585CE0;
  if (!qword_100585CE0)
  {
    v0 = +[NSAssertionHandler currentHandler];
    id v3 = +[NSString stringWithUTF8String:"void *IntentsLibrary(void)"];
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v3, @"AFCarPlayAnnouncementRequestCapabilityProvider.m", 28, @"%s", v4[0]);

    __break(1u);
    goto LABEL_7;
  }
  uint64_t v1 = v4[0];
  if (v4[0]) {
LABEL_7:
  }
    free(v1);
  return v0;
}

uint64_t sub_10015877C()
{
  uint64_t result = _sl_dlopen();
  qword_100585CE0 = result;
  return result;
}

void *sub_1001587F0(uint64_t a1)
{
  id v2 = sub_100158628();
  uint64_t result = dlsym(v2, "INSearchForMessagesIntentIdentifier");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_100585CD8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_100158998()
{
  id v0 = objc_alloc((Class)objc_opt_class());
  uint64_t v1 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  dispatch_queue_t v4 = dispatch_queue_create("com.apple.assistant.announce.carplay", v1);

  id v2 = [v0 initWithQueue:v4];
  id v3 = (void *)qword_100585CC0;
  qword_100585CC0 = (uint64_t)v2;
}

void sub_100158C64(uint64_t a1)
{
  [*(id *)(a1 + 32) _decrementAndTestExecutionCount];
  id v2 = [*(id *)(*(void *)(a1 + 32) + 24) frontObject];

  if (v2)
  {
    [*(id *)(a1 + 32) _incrementAndTestExecutionCount];
    id v3 = [*(id *)(*(void *)(a1 + 32) + 24) dequeueObject];
    dispatch_queue_t v4 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      int v7 = 136315394;
      uint64_t v8 = "-[ADClientLiteListener _doDelayedClientWorkIfAny:]_block_invoke";
      __int16 v9 = 2112;
      uint64_t v10 = v3;
      _os_log_debug_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "%s Now executing %@", (uint8_t *)&v7, 0x16u);
    }
    long long v5 = [v3 timeout];
    uint64_t v6 = [v3 workItem];
    if (v5) {
      v5[2](v5);
    }
    v6[2](v6);
  }
}

void sub_100158FC8(void *a1)
{
  id v2 = (void *)a1[4];
  uint64_t v3 = v2[4];
  if (v3 < 1)
  {
    if (v3 || !a1[5])
    {
      uint64_t v6 = AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
      {
        int v9 = 136315138;
        uint64_t v10 = "-[ADClientLiteListener doClientWork:withTimeoutBlock:]_block_invoke";
        _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "%s Unexpected execution count. File radar.", (uint8_t *)&v9, 0xCu);
      }
    }
    else
    {
      [v2 _incrementAndTestExecutionCount];
      uint64_t v7 = a1[6];
      if (v7) {
        (*(void (**)(void))(v7 + 16))();
      }
      uint64_t v8 = *(void (**)(void))(a1[5] + 16);
      v8();
    }
  }
  else
  {
    dispatch_queue_t v4 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      int v9 = 136315394;
      uint64_t v10 = "-[ADClientLiteListener doClientWork:withTimeoutBlock:]_block_invoke";
      __int16 v11 = 2048;
      uint64_t v12 = v3;
      _os_log_debug_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "%s Current execution count: %ld, enqueuing work", (uint8_t *)&v9, 0x16u);
    }
    long long v5 = [[ADClientLiteWorkItem alloc] initWithWork:a1[5] timeout:a1[6]];
    [*(id *)(a1[4] + 24) enqueueObject:v5];
  }
}

void sub_100159610(uint64_t a1, void *a2)
{
  id v4 = a2;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
  uint64_t v3 = *(void *)(a1 + 40);
  if (v3) {
    (*(void (**)(uint64_t, id, void))(v3 + 16))(v3, v4, 0);
  }
}

void sub_100159678(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 32));
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_100159848;
  v9[3] = &unk_10050D440;
  id v10 = *(id *)(a1 + 48);
  uint64_t v3 = [WeakRetained remoteObjectProxyWithErrorHandler:v9];

  if (v3)
  {
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    void v7[2] = sub_10015985C;
    v7[3] = &unk_100503BD0;
    uint64_t v4 = *(void *)(a1 + 40);
    id v8 = *(id *)(a1 + 48);
    [v3 handleCommand:v4 completion:v7];
  }
  else
  {
    long long v5 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      uint64_t v6 = *(void *)(a1 + 40);
      *(_DWORD *)stat buf = 136315394;
      uint64_t v12 = "-[ADClientLite adRequestDidReceiveCommand:reply:]_block_invoke_2";
      __int16 v13 = 2112;
      uint64_t v14 = v6;
      _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "%s No client handler for command %@", buf, 0x16u);
    }
    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
}

uint64_t sub_100159848(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_10015985C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100159CA8(uint64_t a1, char a2, void *a3, int a4)
{
  id v7 = a3;
  id v8 = *(NSObject **)(a1 + 40);
  int v9 = *(NSObject **)(*(void *)(a1 + 32) + 16);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10015A3A8;
  block[3] = &unk_100509CF0;
  id v19 = *(id *)(a1 + 56);
  char v20 = a2;
  id v10 = v7;
  uint64_t v11 = *(void *)(a1 + 32);
  uint64_t v12 = *(void **)(a1 + 40);
  id v16 = v10;
  uint64_t v17 = v11;
  id v18 = v12;
  dispatch_group_notify(v9, v8, block);
  if (a4)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 24));
    [WeakRetained doDelayedClientWorkIfAny];
  }
  uint64_t v14 = +[ADCommandCenter sharedCommandCenter];
  [v14 releaseShutdownAssertion:*(void *)(a1 + 48)];
}

void sub_100159DCC(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v6 = *(void *)(a1 + 32);
  id v7 = a4;
  id v10 = a3;
  id v8 = [a2 BOOLValue];
  id v9 = [v7 BOOLValue];

  (*(void (**)(uint64_t, id, id, id))(v6 + 16))(v6, v8, v10, v9);
}

void sub_100159E60(uint64_t a1)
{
  objc_initWeak(&location, *(id *)(a1 + 32));
  dispatch_time_t v2 = dispatch_time(0, 50000000000);
  uint64_t v3 = *(NSObject **)(*(void *)(a1 + 40) + 8);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10015A24C;
  v4[3] = &unk_1005076D8;
  objc_copyWeak(&v6, &location);
  id v5 = *(id *)(a1 + 48);
  char v7 = *(unsigned char *)(a1 + 56);
  dispatch_after(v2, v3, v4);

  objc_destroyWeak(&v6);
  objc_destroyWeak(&location);
}

void sub_100159F4C(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10015A00C;
  block[3] = &unk_100503B80;
  dispatch_time_t v2 = *(NSObject **)(a1 + 32);
  id v3 = *(id *)(a1 + 40);
  __int16 v10 = *(_WORD *)(a1 + 64);
  uint64_t v4 = *(void *)(a1 + 48);
  id v6 = v3;
  uint64_t v7 = v4;
  id v8 = *(id *)(a1 + 32);
  id v9 = *(id *)(a1 + 56);
  dispatch_async(v2, block);
}

void sub_10015A00C(uint64_t a1)
{
  dispatch_time_t v2 = +[ADCommandCenter sharedCommandCenter];
  uint64_t v3 = *(unsigned __int8 *)(a1 + 64);
  BOOL v4 = *(unsigned char *)(a1 + 65) == 0;
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 40);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  void v7[2] = sub_10015A100;
  v7[3] = &unk_100503B58;
  id v8 = *(id *)(a1 + 48);
  id v9 = *(id *)(a1 + 56);
  char v10 = *(unsigned char *)(a1 + 64);
  [v2 handleAceCommand:v5 afterCurrentRequest:v3 waitForResponse:v4 withDelegate:v6 completion:v7];
}

void sub_10015A100(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10015A1C0;
  block[3] = &unk_10050C728;
  char v11 = a2;
  uint64_t v6 = *(NSObject **)(a1 + 32);
  id v9 = *(id *)(a1 + 40);
  id v10 = v5;
  char v12 = *(unsigned char *)(a1 + 48);
  id v7 = v5;
  dispatch_async(v6, block);
}

void sub_10015A1C0(uint64_t a1)
{
  id v5 = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 48)];
  dispatch_time_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  BOOL v4 = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 49)];
  [v2 invokeWithValue:v5 andValue:v3 andValue:v4];
}

void sub_10015A24C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    uint64_t v3 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      uint64_t v7 = *(void *)(a1 + 32);
      int v8 = 136315394;
      id v9 = "-[ADClientLite handleRemoteCommand:afterCurrentRequest:isOneWay:completion:]_block_invoke_7";
      __int16 v10 = 2112;
      uint64_t v11 = v7;
      _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "%s Timing out ClientLite command %@", (uint8_t *)&v8, 0x16u);
    }
    BOOL v4 = +[NSError errorWithDomain:kAFAssistantErrorDomain code:3000 userInfo:&__NSDictionary0__struct];
    id v5 = +[NSNumber numberWithBool:0];
    uint64_t v6 = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 48)];
    [WeakRetained invokeWithValue:v5 andValue:v4 andValue:v6];
  }
}

void sub_10015A3A8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 56);
  if (v2) {
    (*(void (**)(uint64_t, void, void))(v2 + 16))(v2, *(unsigned __int8 *)(a1 + 64), *(void *)(a1 + 32));
  }
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 40) + 32));
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_10015A468;
  v6[3] = &unk_10050E160;
  id v4 = *(id *)(a1 + 48);
  uint64_t v5 = *(void *)(a1 + 40);
  id v7 = v4;
  uint64_t v8 = v5;
  [WeakRetained addBarrierBlock:v6];
}

void sub_10015A468(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10015A4DC;
  block[3] = &unk_10050E138;
  uint64_t v1 = *(NSObject **)(a1 + 32);
  void block[4] = *(void *)(a1 + 40);
  dispatch_async(v1, block);
}

id sub_10015A4DC(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 32));
  [WeakRetained invalidate];

  uint64_t v3 = (id *)(*(void *)(a1 + 32) + 32);
  return objc_storeWeak(v3, 0);
}

void sub_10015BAF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10015BB14(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10015BB24(uint64_t a1)
{
}

intptr_t sub_10015BB2C(uint64_t a1, void *a2)
{
  uint64_t v3 = [a2 firstObject];
  uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;

  uint64_t v6 = *(NSObject **)(a1 + 32);
  return dispatch_semaphore_signal(v6);
}

uint64_t sub_10015BF10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(result + 16))(result, a3);
  }
  return result;
}

void sub_10015C5C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_10015C5E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  id obj = *(id *)(v3 + 40);
  id v4 = [v2 _preparePerson:a2 meCardCache:&obj];
  objc_storeStrong((id *)(v3 + 40), obj);
  return v4;
}

void sub_10015CCA8(uint64_t a1)
{
  uint64_t v2 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)stat buf = 136315138;
    uint64_t v8 = "-[ADExtensionService handleCommand:forDomain:executionContext:reply:]_block_invoke";
    _os_log_debug_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s ", buf, 0xCu);
  }
  uint64_t v3 = *(void *)(a1 + 40);
  id v4 = *(void **)(*(void *)(a1 + 32) + 56);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10015D4D8;
  v5[3] = &unk_10050CF00;
  id v6 = *(id *)(a1 + 48);
  [v4 handleCommand:v3 completionHandler:v5];
}

void sub_10015CDD8(uint64_t a1, uint64_t a2)
{
  id v4 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    int v5 = 136315394;
    id v6 = "-[ADExtensionService handleCommand:forDomain:executionContext:reply:]_block_invoke";
    __int16 v7 = 2048;
    uint64_t v8 = a2;
    _os_log_debug_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "%s safetyGroup1 leave invoked with signal %ld", (uint8_t *)&v5, 0x16u);
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_10015CEA8(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  id v6 = +[ADCommandCenter sharedCommandCenter];
  __int16 v7 = [v6 _queue];
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_10015D37C;
  v9[3] = &unk_10050B6A8;
  id v10 = v5;
  int v13 = a2;
  id v11 = *(id *)(a1 + 32);
  id v12 = *(id *)(a1 + 40);
  id v8 = v5;
  dispatch_async(v7, v9);
}

void sub_10015CFA8(uint64_t a1, uint64_t a2)
{
  id v4 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    int v5 = 136315394;
    id v6 = "-[ADExtensionService handleCommand:forDomain:executionContext:reply:]_block_invoke";
    __int16 v7 = 2048;
    uint64_t v8 = a2;
    _os_log_debug_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "%s safetyGroup2 leave invoked with signal %ld", (uint8_t *)&v5, 0x16u);
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_10015D078(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id v10 = +[ADCommandCenter sharedCommandCenter];
  id v11 = [v10 _queue];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10015D1C4;
  block[3] = &unk_100507F88;
  id v16 = v7;
  id v17 = *(id *)(a1 + 32);
  id v18 = v8;
  id v19 = v9;
  id v20 = *(id *)(a1 + 40);
  id v12 = v9;
  id v13 = v8;
  id v14 = v7;
  dispatch_async(v11, block);
}

uint64_t sub_10015D1B4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

id sub_10015D1C4(uint64_t a1)
{
  uint64_t v2 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v6 = *(void *)(a1 + 32);
    int v9 = 136315394;
    id v10 = "-[ADExtensionService handleCommand:forDomain:executionContext:reply:]_block_invoke_2";
    __int16 v11 = 2112;
    uint64_t v12 = v6;
    _os_log_debug_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s recordRoute = %@", (uint8_t *)&v9, 0x16u);
  }
  [*(id *)(a1 + 40) _setRecordRoute:*(void *)(a1 + 32)];
  uint64_t v3 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v7 = *(void *)(a1 + 48);
    int v9 = 136315394;
    id v10 = "-[ADExtensionService handleCommand:forDomain:executionContext:reply:]_block_invoke";
    __int16 v11 = 2112;
    uint64_t v12 = v7;
    _os_log_debug_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "%s recordDeviceIdentifier = %@", (uint8_t *)&v9, 0x16u);
  }
  [*(id *)(a1 + 40) _setRecordDeviceIdentifier:*(void *)(a1 + 48)];
  id v4 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v8 = *(void *)(a1 + 56);
    int v9 = 136315394;
    id v10 = "-[ADExtensionService handleCommand:forDomain:executionContext:reply:]_block_invoke";
    __int16 v11 = 2112;
    uint64_t v12 = v8;
    _os_log_debug_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "%s recordDeviceUID = %@", (uint8_t *)&v9, 0x16u);
  }
  [*(id *)(a1 + 40) _setRecordDeviceUID:*(void *)(a1 + 56)];
  return [*(id *)(a1 + 64) invokeWithSignal:0];
}

id sub_10015D37C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = AFSiriLogContextDaemon;
  if (v2)
  {
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      int v7 = *(_DWORD *)(a1 + 56);
      int v9 = 136315650;
      id v10 = "-[ADExtensionService handleCommand:forDomain:executionContext:reply:]_block_invoke";
      __int16 v11 = 1024;
      int v12 = v7;
      __int16 v13 = 2112;
      uint64_t v14 = v2;
      _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "%s audioSessionID = %u, error = %@", (uint8_t *)&v9, 0x1Cu);
    }
    id v4 = *(void **)(a1 + 40);
    uint64_t v5 = 0;
  }
  else
  {
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      int v8 = *(_DWORD *)(a1 + 56);
      int v9 = 136315394;
      id v10 = "-[ADExtensionService handleCommand:forDomain:executionContext:reply:]_block_invoke_2";
      __int16 v11 = 1024;
      int v12 = v8;
      _os_log_debug_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "%s audioSessionID = %u", (uint8_t *)&v9, 0x12u);
    }
    id v4 = *(void **)(a1 + 40);
    uint64_t v5 = *(unsigned int *)(a1 + 56);
  }
  [v4 _setAudioSessionID:v5];
  return [*(id *)(a1 + 48) invokeWithSignal:0];
}

uint64_t sub_10015D4D8(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_10015F330(id a1)
{
  id v1 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"b73213eb-92f8-45a6-9328-6e71cdbb77d6"];
  uint64_t v2 = qword_100585CF0;
  qword_100585CF0 = (uint64_t)v1;
  _objc_release_x1(v1, v2);
}

void sub_10015F468(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  uint64_t v5 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v6 = *(void *)(a1 + 32);
    int v7 = 136315651;
    int v8 = "-[ADRemoteContextStore _dumpStateForReason:]_block_invoke";
    __int16 v9 = 2112;
    uint64_t v10 = v6;
    __int16 v11 = 2113;
    id v12 = v4;
    _os_log_debug_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "%s #hal [%@] remote context: %{private}@", (uint8_t *)&v7, 0x20u);
  }
}

void sub_10015F5E0(uint64_t a1)
{
  if (*(unsigned char *)(*(void *)(a1 + 32) + 40))
  {
    uint64_t v2 = sub_10016B52C(*(void **)(a1 + 40), 0);
    uint64_t v3 = AFSiriLogContextDaemon;
    if (v2)
    {
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
      {
        int v5 = 136315394;
        uint64_t v6 = "-[ADRemoteContextStore rapportLink:didLoseDevice:]_block_invoke";
        __int16 v7 = 2112;
        int v8 = v2;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "%s #hal Clearing context for %@", (uint8_t *)&v5, 0x16u);
      }
      [*(id *)(*(void *)(a1 + 32) + 32) removeObjectForPeerInfo:v2];
    }
    else if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      id v4 = *(void **)(a1 + 40);
      int v5 = 136315394;
      uint64_t v6 = "-[ADRemoteContextStore rapportLink:didLoseDevice:]_block_invoke";
      __int16 v7 = 2112;
      int v8 = v4;
      _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "%s #hal Unable to clear context because we can't extract peer info for %@", (uint8_t *)&v5, 0x16u);
    }
  }
}

void sub_10015F82C(uint64_t a1)
{
  if ([*(id *)(a1 + 32) count])
  {
    unsigned __int8 v2 = [*(id *)(a1 + 32) containsObject:AFDeviceContextKeyAll];
    id v3 = objc_alloc_init((Class)NSMutableArray);
    id v4 = v3;
    int v5 = *(void **)(a1 + 40);
    if (v2)
    {
      v11[0] = _NSConcreteStackBlock;
      v11[1] = 3221225472;
      v11[2] = sub_10015FAF8;
      v11[3] = &unk_100503D20;
      id v6 = v3;
      id v12 = v6;
      [v5 _enumerateDeviceContextsUsingBlock:v11];
      __int16 v7 = v12;
    }
    else
    {
      v13[0] = _NSConcreteStackBlock;
      v13[1] = 3221225472;
      v13[2] = sub_10015FA40;
      v13[3] = &unk_100503CF8;
      id v14 = *(id *)(a1 + 48);
      id v15 = *(id *)(a1 + 32);
      id v6 = v4;
      id v16 = v6;
      [v5 _enumerateDeviceContextsUsingBlock:v13];

      __int16 v7 = v14;
    }
  }
  else
  {
    int v8 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)stat buf = 136315138;
      id v18 = "-[ADRemoteContextStore getSerializedDeviceContextSnapshotIncludingKeys:excludingMandatoryKeys:completion:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "%s #hal No included keys specified", buf, 0xCu);
    }
    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
    id v6 = 0;
  }
  (*(void (**)(void, id, uint64_t, uint64_t))(*(void *)(a1 + 56) + 16))(*(void *)(a1 + 56), v6, v9, v10);
}

void sub_10015FA40(uint64_t a1, void *a2, void *a3)
{
  id v8 = a2;
  id v5 = a3;
  if (([v5 isValid] & 1) != 0 || objc_msgSend(*(id *)(a1 + 32), "count"))
  {
    id v6 = [v5 partialSerializedBackingStoreIncludingKeys:*(void *)(a1 + 40) excludingMandatoryKeys:*(void *)(a1 + 32)];
    if (v6)
    {
      id v7 = [objc_alloc((Class)AFPeerContentTuple) initWithInfo:v8 content:v6];
      [*(id *)(a1 + 48) addObject:v7];
    }
  }
}

void sub_10015FAF8(uint64_t a1, void *a2, void *a3)
{
  id v8 = a2;
  id v5 = a3;
  if ([v5 isValid])
  {
    id v6 = [v5 serializedBackingStore];
    if (v6)
    {
      id v7 = [objc_alloc((Class)AFPeerContentTuple) initWithInfo:v8 content:v6];
      [*(id *)(a1 + 32) addObject:v7];
    }
  }
}

void sub_10015FCEC(uint64_t a1)
{
  unsigned __int8 v2 = [*(id *)(a1 + 32) deviceInfo];
  id v3 = AFPeerInfoMerge();

  if ([*(id *)(a1 + 48) count])
  {
    if ([*(id *)(a1 + 48) containsObject:AFDeviceContextKeyAll])
    {
      id v4 = [objc_alloc((Class)AFPeerContentTuple) initWithInfo:*(void *)(a1 + 40) content:*(void *)(a1 + 32)];
      [*(id *)(*(void *)(a1 + 64) + 32) setObject:v4 forPeerInfo:v3];
    }
    else
    {
      id v6 = AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v12 = *(void *)(a1 + 48);
        uint64_t v13 = *(void *)(a1 + 56);
        int v14 = 136315650;
        id v15 = "-[ADRemoteContextStore setDeviceContext:includedKeys:excludedKeys:forDeviceWithPeerInfo:completion:]_block_invoke";
        __int16 v16 = 2112;
        uint64_t v17 = v12;
        __int16 v18 = 2112;
        uint64_t v19 = v13;
        _os_log_debug_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "%s #hal included keys = %@, excluded keys = %@, updating with partial context", (uint8_t *)&v14, 0x20u);
      }
      id v7 = [*(id *)(*(void *)(a1 + 64) + 32) objectForPeerInfo:v3];
      id v4 = v7;
      if (v7)
      {
        id v8 = [v7 content];
        uint64_t v9 = [v8 partiallyUpdatedContextForDeviceContextKeys:*(void *)(a1 + 48) excludingMandatoryKeys:*(void *)(a1 + 56) fromDeviceContext:*(void *)(a1 + 32)];
        id v10 = [objc_alloc((Class)AFPeerContentTuple) initWithInfo:*(void *)(a1 + 40) content:v9];
        [*(id *)(*(void *)(a1 + 64) + 32) setObject:v10 forPeerInfo:v3];
      }
      else
      {
        id v8 = [objc_alloc((Class)AFPeerContentTuple) initWithInfo:*(void *)(a1 + 40) content:*(void *)(a1 + 32)];
        [*(id *)(*(void *)(a1 + 64) + 32) setObject:v8 forPeerInfo:v3];
      }
    }
  }
  else
  {
    id v5 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      int v14 = 136315138;
      id v15 = "-[ADRemoteContextStore setDeviceContext:includedKeys:excludedKeys:forDeviceWithPeerInfo:completion:]_block_invoke";
      _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "%s #hal no included keys. Skipping", (uint8_t *)&v14, 0xCu);
    }
  }
  [*(id *)(a1 + 64) _dumpStateForReason:@"deviceContextUpdate"];
  uint64_t v11 = *(void *)(a1 + 72);
  if (v11) {
    (*(void (**)(void))(v11 + 16))();
  }
}

id sub_1001600E8(uint64_t a1)
{
  objc_msgSend(*(id *)(*(void *)(a1 + 32) + 16), "removeListener:");
  objc_storeStrong((id *)(*(void *)(a1 + 32) + 16), *(id *)(a1 + 40));
  unsigned __int8 v2 = *(void **)(*(void *)(a1 + 32) + 16);
  return objc_msgSend(v2, "addListener:");
}

void sub_100160290(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(NSObject **)(*(void *)(a1 + 32) + 8);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100160364;
  v8[3] = &unk_10050E228;
  id v9 = v3;
  id v5 = *(id *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 32);
  id v10 = v5;
  uint64_t v11 = v6;
  id v12 = *(id *)(a1 + 48);
  id v7 = v3;
  dispatch_async(v4, v8);
}

void sub_100160364(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) count];
  id v3 = AFSiriLogContextDaemon;
  BOOL v4 = os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO);
  if (v2)
  {
    if (v4)
    {
      uint64_t v5 = *(void *)(a1 + 32);
      *(_DWORD *)stat buf = 136315394;
      *(void *)&uint8_t buf[4] = "-[ADRemoteContextStore _fetchContextFromCollectorAndForceFetchingFromDevicesWithPeerInfo:comp"
                           "letion:]_block_invoke_2";
      *(_WORD *)&buf[12] = 2112;
      *(void *)&buf[14] = v5;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "%s #hal identified collector(s): %@", buf, 0x16u);
    }
    CFStringRef v22 = objc_msgSend(*(id *)(a1 + 40), "af_lenientMappedArray:", &stru_100503DB8);
    id v20 = objc_msgSend(*(id *)(a1 + 40), "af_lenientMappedArray:", &stru_100503DD8);
    id v24 = objc_alloc_init((Class)NSMutableDictionary);
    if ([v22 count]) {
      [v24 setObject:v22 forKey:@"forceFetchingContextFrom"];
    }
    if (objc_msgSend(v20, "count", v20)) {
      [v24 setObject:v21 forKey:@"force_fetch_assistant_identifiers"];
    }
    [v24 setObject:&__kCFBooleanTrue forKey:@"prefers_assistant_identifiers"];
    uint64_t v6 = dispatch_group_create();
    id v7 = objc_alloc_init((Class)NSMutableArray);
    *(void *)stat buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x3032000000;
    char v39 = sub_10016081C;
    CFStringRef v40 = sub_10016082C;
    id v41 = 0;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    id obj = *(id *)(a1 + 32);
    id v8 = [obj countByEnumeratingWithState:&v33 objects:v37 count:16];
    if (v8)
    {
      uint64_t v9 = *(void *)v34;
      do
      {
        id v10 = 0;
        do
        {
          if (*(void *)v34 != v9) {
            objc_enumerationMutation(obj);
          }
          uint64_t v11 = *(void *)(*((void *)&v33 + 1) + 8 * (void)v10);
          dispatch_group_enter(v6);
          id v12 = *(void **)(a1 + 48);
          uint64_t v13 = (void *)v12[2];
          int v14 = [v12 _contextLinkMessageOptions];
          v29[0] = _NSConcreteStackBlock;
          v29[1] = 3221225472;
          v29[2] = sub_100160834;
          v29[3] = &unk_100504CA8;
          v29[4] = *(void *)(a1 + 48);
          v29[5] = v11;
          id v30 = v7;
          __int16 v32 = buf;
          uint64_t v31 = v6;
          [v13 sendRequestID:@"com.apple.siri.rapport-link.request.generic" messageType:@"agg_context_fetch" messagePayload:v24 toDeviceWithIDSDeviceID:v11 options:v14 completion:v29];

          id v15 = +[AFAnalytics sharedAnalytics];
          [v15 logEventWithType:4585 context:0];

          id v10 = (char *)v10 + 1;
        }
        while (v8 != v10);
        id v8 = [obj countByEnumeratingWithState:&v33 objects:v37 count:16];
      }
      while (v8);
    }

    __int16 v16 = *(NSObject **)(*(void *)(a1 + 48) + 8);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100160930;
    block[3] = &unk_10050B828;
    id v17 = *(id *)(a1 + 56);
    id v26 = v7;
    id v27 = v17;
    id v28 = buf;
    id v18 = v7;
    dispatch_group_notify(v6, v16, block);

    _Block_object_dispose(buf, 8);
  }
  else
  {
    if (v4)
    {
      *(_DWORD *)stat buf = 136315138;
      *(void *)&uint8_t buf[4] = "-[ADRemoteContextStore _fetchContextFromCollectorAndForceFetchingFromDevicesWithPeerInfo:comp"
                           "letion:]_block_invoke_2";
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "%s #hal Context Collector unavailable", buf, 0xCu);
    }
    uint64_t v19 = *(void *)(a1 + 56);
    CFStringRef v22 = +[AFError errorWithCode:1013];
    (*(void (**)(uint64_t, void, void *))(v19 + 16))(v19, 0, v22);
  }
}

void sub_1001607F4(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 176), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10016081C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10016082C(uint64_t a1)
{
}

void sub_100160834(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = *(NSObject **)(*(void *)(a1 + 32) + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100160950;
  block[3] = &unk_100504C80;
  uint64_t v8 = *(void *)(a1 + 40);
  uint64_t v9 = *(void **)(a1 + 48);
  id v15 = v5;
  uint64_t v16 = v8;
  id v17 = v9;
  id v18 = v6;
  long long v13 = *(_OWORD *)(a1 + 56);
  id v10 = (id)v13;
  long long v19 = v13;
  id v11 = v6;
  id v12 = v5;
  dispatch_async(v7, block);
}

uint64_t sub_100160930(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[5] + 16))(a1[5], a1[4], *(void *)(*(void *)(a1[6] + 8) + 40));
}

void sub_100160950(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  if (v2)
  {
    uint64_t v9 = _NSConcreteStackBlock;
    uint64_t v10 = 3221225472;
    id v11 = sub_100160AF4;
    id v12 = &unk_100503E00;
    id v3 = *(void **)(a1 + 48);
    uint64_t v13 = *(void *)(a1 + 40);
    id v14 = v3;
    [v2 enumerateKeysAndObjectsUsingBlock:&v9];
    BOOL v4 = +[AFAnalytics sharedAnalytics];
    [v4 logEventWithType:4588 context:0];
  }
  else
  {
    id v5 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      uint64_t v7 = *(void *)(a1 + 40);
      uint64_t v8 = *(void *)(a1 + 56);
      *(_DWORD *)stat buf = 136315650;
      uint64_t v16 = "-[ADRemoteContextStore _fetchContextFromCollectorAndForceFetchingFromDevicesWithPeerInfo:completion:]_block_invoke";
      __int16 v17 = 2112;
      uint64_t v18 = v7;
      __int16 v19 = 2112;
      uint64_t v20 = v8;
      _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "%s #hal Error fetching context from device: %@, %@", buf, 0x20u);
    }
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 72) + 8) + 40), *(id *)(a1 + 56));
    id v6 = +[AFAnalytics sharedAnalytics];
    [v6 logEventWithType:4589 context:0];
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 64));
}

void sub_100160AF4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = sub_100174F64(v5);
  if (v7 || (sub_10016A850(v5), (uint64_t v7 = objc_claimAutoreleasedReturnValue()) != 0))
  {
    id v8 = [objc_alloc((Class)AFDeviceContext) initWithSerializedBackingStore:v6 fromLocalDevice:0 contextCollectorSource:*(void *)(a1 + 32)];
    uint64_t v9 = *(void **)(a1 + 40);
    id v10 = [objc_alloc((Class)AFPeerContentTuple) initWithInfo:v7 content:v8];
    [v9 addObject:v10];
  }
  else
  {
    id v11 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      int v12 = 136315394;
      uint64_t v13 = "-[ADRemoteContextStore _fetchContextFromCollectorAndForceFetchingFromDevicesWithPeerInfo:completion:]_block_invoke_5";
      __int16 v14 = 2112;
      id v15 = v5;
      _os_log_error_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "%s #hal Unable to get a peer info from deviceID: %@", (uint8_t *)&v12, 0x16u);
    }
  }
}

NSString *__cdecl sub_100160C5C(id a1, AFPeerInfo *a2)
{
  return (NSString *)sub_10017504C(a2);
}

NSString *__cdecl sub_100160C64(id a1, AFPeerInfo *a2)
{
  return (NSString *)sub_1001750D0(a2);
}

void sub_100160E5C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (!v5)
  {
    id v15 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      uint64_t v18 = *(void **)(a1 + 32);
      int v20 = 136315650;
      __int16 v21 = "-[ADRemoteContextStore _fetchContextFromDeviceWithPeerInfo:completion:]_block_invoke";
      __int16 v22 = 2112;
      id v23 = v18;
      __int16 v24 = 2112;
      id v25 = v6;
      _os_log_error_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "%s #hal Error fetching context from device: %@, %@", (uint8_t *)&v20, 0x20u);
    }
    id v16 = v6;
    goto LABEL_13;
  }
  uint64_t v7 = sub_10017504C(*(void **)(a1 + 32));
  if (!v7
    || (id v8 = (void *)v7,
        [v5 objectForKey:v7],
        uint64_t v9 = objc_claimAutoreleasedReturnValue(),
        v8,
        !v9))
  {
    uint64_t v10 = sub_1001750D0(*(void **)(a1 + 32));
    if (!v10
      || (id v11 = (void *)v10,
          [v5 objectForKey:v10],
          uint64_t v9 = objc_claimAutoreleasedReturnValue(),
          v11,
          !v9))
    {
      __int16 v17 = AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
      {
        __int16 v19 = *(void **)(a1 + 32);
        int v20 = 136315650;
        __int16 v21 = "-[ADRemoteContextStore _fetchContextFromDeviceWithPeerInfo:completion:]_block_invoke";
        __int16 v22 = 2112;
        id v23 = v5;
        __int16 v24 = 2112;
        id v25 = v19;
        _os_log_error_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "%s #hal Error no context in fetch response %@ from device: %@", (uint8_t *)&v20, 0x20u);
      }
      id v16 = +[AFError errorWithCode:3103];
LABEL_13:
      __int16 v14 = v16;
      uint64_t v9 = +[AFAnalytics sharedAnalytics];
      [v9 logEventWithType:4589 context:0];
      id v12 = 0;
      goto LABEL_14;
    }
  }
  id v12 = [objc_alloc((Class)AFDeviceContext) initWithSerializedBackingStore:v9 fromLocalDevice:0 contextCollectorSource:0];
  uint64_t v13 = +[AFAnalytics sharedAnalytics];
  [v13 logEventWithType:4588 context:0];

  __int16 v14 = 0;
LABEL_14:

  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_100161234(uint64_t a1)
{
  id v2 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)stat buf = 136315138;
    id v12 = "-[ADRemoteContextStore _fetchContextFromCollectorThroughOnDemandConnection:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%s #hal #on-demand send request to collector", buf, 0xCu);
  }
  id v3 = *(void **)(*(void *)(a1 + 32) + 16);
  CFStringRef v9 = @"prefers_assistant_identifiers";
  uint64_t v10 = &__kCFBooleanTrue;
  BOOL v4 = +[NSDictionary dictionaryWithObjects:&v10 forKeys:&v9 count:1];
  id v5 = [*(id *)(a1 + 32) _contextLinkMessageOptions];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  void v7[2] = sub_1001613C0;
  v7[3] = &unk_100504BB8;
  id v6 = *(void **)(a1 + 40);
  void v7[4] = *(void *)(a1 + 32);
  id v8 = v6;
  [v3 sendRequestToContextCollectorThroughOnDemandConnection:@"com.apple.siri.rapport-link.request.generic" messageType:@"agg_context_fetch" messagePayload:v4 options:v5 completion:v7];
}

void sub_1001613C0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)stat buf = 136315650;
    id v16 = "-[ADRemoteContextStore _fetchContextFromCollectorThroughOnDemandConnection:]_block_invoke";
    __int16 v17 = 2112;
    id v18 = v5;
    __int16 v19 = 2112;
    id v20 = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "%s #hal #on-demand send request to collector response: %@, error: %@", buf, 0x20u);
  }
  id v8 = *(NSObject **)(*(void *)(a1 + 32) + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100161534;
  block[3] = &unk_10050E1D8;
  id v12 = v5;
  id v13 = v6;
  id v14 = *(id *)(a1 + 40);
  id v9 = v6;
  id v10 = v5;
  dispatch_async(v8, block);
}

void sub_100161534(void *a1)
{
  id v2 = objc_alloc_init((Class)NSMutableArray);
  id v3 = (void *)a1[4];
  if (v3)
  {
    BOOL v4 = [v3 objectForKey:@"payload"];
    if (v4)
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        id v5 = AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)stat buf = 136315138;
          id v11 = "-[ADRemoteContextStore _fetchContextFromCollectorThroughOnDemandConnection:]_block_invoke";
          _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "%s #hal #on-demand received malformed response", buf, 0xCu);
        }

        BOOL v4 = 0;
      }
    }
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_10016172C;
    v8[3] = &unk_100504E58;
    id v9 = v2;
    [v4 enumerateKeysAndObjectsUsingBlock:v8];
  }
  else
  {
    id v6 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      uint64_t v7 = a1[5];
      *(_DWORD *)stat buf = 136315394;
      id v11 = "-[ADRemoteContextStore _fetchContextFromCollectorThroughOnDemandConnection:]_block_invoke";
      __int16 v12 = 2112;
      uint64_t v13 = v7;
      _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "%s #hal #on-demand Error fetching context from context collector through on-demand connection: %@", buf, 0x16u);
    }
  }
  (*(void (**)(void))(a1[6] + 16))();
}

void sub_10016172C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = sub_100174F64(v5);
  if (v7)
  {
    id v8 = [objc_alloc((Class)AFDeviceContext) initWithSerializedBackingStore:v6 fromLocalDevice:0 contextCollectorSource:&stru_10050F7D8];
    id v9 = *(void **)(a1 + 32);
    id v10 = [objc_alloc((Class)AFPeerContentTuple) initWithInfo:v7 content:v8];
    [v9 addObject:v10];
  }
  else
  {
    id v11 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      int v12 = 136315394;
      uint64_t v13 = "-[ADRemoteContextStore _fetchContextFromCollectorThroughOnDemandConnection:]_block_invoke";
      __int16 v14 = 2112;
      id v15 = v5;
      _os_log_error_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "%s #hal #on-demand Unable to get a peer info from deviceID: %@", (uint8_t *)&v12, 0x16u);
    }
  }
}

void sub_100161A7C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(NSObject **)(v4 + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100161B38;
  block[3] = &unk_10050E1D8;
  id v8 = v3;
  uint64_t v9 = v4;
  id v10 = *(id *)(a1 + 40);
  id v6 = v3;
  dispatch_async(v5, block);
}

id sub_100161B38(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = AFSiriLogContextDaemon;
  if (v2)
  {
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      uint64_t v8 = *(void *)(*(void *)(a1 + 40) + 16);
      int v9 = 136315650;
      id v10 = "-[ADRemoteContextStore _activateOnDemandRapportConnectionAndFetchContext:]_block_invoke_2";
      __int16 v11 = 2112;
      uint64_t v12 = v8;
      __int16 v13 = 2112;
      uint64_t v14 = v2;
      _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "%s #hal #on-demand Error activating on-demand rapportLink, invalidating: %@, %@", (uint8_t *)&v9, 0x20u);
    }
    [*(id *)(*(void *)(a1 + 40) + 16) invalidate];
    uint64_t v4 = *(void *)(a1 + 40);
    id v5 = *(void **)(v4 + 16);
    *(void *)(v4 + 16) = 0;

    return (id)(*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16))();
  }
  else
  {
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      uint64_t v7 = *(void *)(*(void *)(a1 + 40) + 16);
      int v9 = 136315394;
      id v10 = "-[ADRemoteContextStore _activateOnDemandRapportConnectionAndFetchContext:]_block_invoke";
      __int16 v11 = 2112;
      uint64_t v12 = v7;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "%s #hal #on-demand rapportLink activated: %@", (uint8_t *)&v9, 0x16u);
    }
    return [*(id *)(a1 + 40) _fetchContextFromCollectorThroughOnDemandConnection:*(void *)(a1 + 48)];
  }
}

void sub_100161D48(uint64_t a1)
{
  id v2 = objc_alloc_init((Class)NSMutableArray);
  long long v11 = 0u;
  long long v12 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  id v3 = objc_msgSend(*(id *)(*(void *)(a1 + 32) + 16), "activeDevices", 0);
  id v4 = [v3 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v10;
    do
    {
      uint64_t v7 = 0;
      do
      {
        if (*(void *)v10 != v6) {
          objc_enumerationMutation(v3);
        }
        uint64_t v8 = sub_10016B52C(*(void **)(*((void *)&v9 + 1) + 8 * (void)v7), 0);
        if (v8) {
          [v2 addObject:v8];
        }

        uint64_t v7 = (char *)v7 + 1;
      }
      while (v5 != v7);
      id v5 = [v3 countByEnumeratingWithState:&v9 objects:v13 count:16];
    }
    while (v5);
  }

  [*(id *)(a1 + 32) fetchContextSnapshotFromDevicesWithPeerInfo:v2 completion:*(void *)(a1 + 40)];
}

void sub_100161F78(uint64_t a1)
{
  id v2 = objc_alloc_init((Class)NSMutableArray);
  id v29 = objc_alloc_init((Class)NSMutableArray);
  if ([*(id *)(*(void *)(a1 + 32) + 16) canReachPersonalDevices])
  {
    id v3 = [*(id *)(a1 + 40) mutableCopy];

    id v2 = v3;
  }
  else
  {
    long long v59 = 0u;
    long long v60 = 0u;
    long long v57 = 0u;
    long long v58 = 0u;
    id v4 = *(id *)(a1 + 40);
    id v5 = [v4 countByEnumeratingWithState:&v57 objects:v62 count:16];
    if (v5)
    {
      uint64_t v6 = *(void *)v58;
      do
      {
        for (i = 0; i != v5; i = (char *)i + 1)
        {
          if (*(void *)v58 != v6) {
            objc_enumerationMutation(v4);
          }
          uint64_t v8 = *(void *)(*((void *)&v57 + 1) + 8 * i);
          long long v9 = [*(id *)(*(void *)(a1 + 32) + 16) remoteDeviceForPeerInfo:v8];
          BOOL v10 = v9 == 0;

          if (v10) {
            long long v11 = v29;
          }
          else {
            long long v11 = v2;
          }
          [v11 addObject:v8];
        }
        id v5 = [v4 countByEnumeratingWithState:&v57 objects:v62 count:16];
      }
      while (v5);
    }
  }
  id v12 = objc_msgSend(objc_alloc((Class)NSMutableArray), "initWithCapacity:", objc_msgSend(*(id *)(a1 + 40), "count"));
  v55[0] = 0;
  v55[1] = v55;
  v55[2] = 0x3032000000;
  v55[3] = sub_10016081C;
  v55[4] = sub_10016082C;
  id v56 = 0;
  id v13 = objc_alloc((Class)AFSafetyBlock);
  v50[0] = _NSConcreteStackBlock;
  v50[1] = 3221225472;
  v50[2] = sub_100162528;
  v50[3] = &unk_100503D48;
  id v51 = 0;
  id v53 = *(id *)(a1 + 48);
  id v31 = v12;
  id v52 = v31;
  uint64_t v54 = v55;
  id v14 = [v13 initWithBlock:v50];
  id v15 = objc_alloc((Class)AFWatchdogTimer);
  uint64_t v16 = *(void *)(*(void *)(a1 + 32) + 8);
  v46[0] = _NSConcreteStackBlock;
  v46[1] = 3221225472;
  v46[2] = sub_100162598;
  v46[3] = &unk_10050C700;
  id v47 = *(id *)(a1 + 40);
  v49 = v55;
  id v28 = v14;
  id v48 = v28;
  id v17 = [v15 initWithTimeoutInterval:v16 onQueue:v46 timeoutHandler:0.4];
  [v17 start];
  id v18 = dispatch_group_create();
  long long v42 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  id obj = v2;
  id v19 = [obj countByEnumeratingWithState:&v42 objects:v61 count:16];
  if (v19)
  {
    uint64_t v20 = *(void *)v43;
    do
    {
      for (j = 0; j != v19; j = (char *)j + 1)
      {
        if (*(void *)v43 != v20) {
          objc_enumerationMutation(obj);
        }
        uint64_t v22 = *(void *)(*((void *)&v42 + 1) + 8 * (void)j);
        dispatch_group_enter(v18);
        id v23 = *(void **)(a1 + 32);
        v39[0] = _NSConcreteStackBlock;
        v39[1] = 3221225472;
        v39[2] = sub_10016268C;
        v39[3] = &unk_100503D70;
        v39[4] = v23;
        v39[5] = v22;
        id v40 = v31;
        id v41 = v18;
        [v23 _fetchContextFromDeviceWithPeerInfo:v22 completion:v39];
      }
      id v19 = [obj countByEnumeratingWithState:&v42 objects:v61 count:16];
    }
    while (v19);
  }

  if ([v29 count])
  {
    dispatch_group_enter(v18);
    id v25 = *(void **)(a1 + 32);
    __int16 v24 = *(void **)(a1 + 40);
    v34[0] = _NSConcreteStackBlock;
    v34[1] = 3221225472;
    v34[2] = sub_100162780;
    void v34[3] = &unk_100503D98;
    v34[4] = v25;
    id v35 = v24;
    id v38 = v55;
    id v36 = v31;
    CFStringRef v37 = v18;
    [v25 _fetchContextFromCollectorAndForceFetchingFromDevicesWithPeerInfo:v35 completion:v34];
  }
  id v26 = *(NSObject **)(*(void *)(a1 + 32) + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10016288C;
  block[3] = &unk_10050E138;
  id v33 = v28;
  id v27 = v28;
  dispatch_group_notify(v18, v26, block);

  _Block_object_dispose(v55, 8);
}

void sub_1001624F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
}

void sub_100162528(uint64_t a1)
{
  [*(id *)(a1 + 32) cancel];
  uint64_t v2 = *(void *)(a1 + 48);
  id v3 = [*(id *)(a1 + 40) copy];
  (*(void (**)(uint64_t, id, void))(v2 + 16))(v2, v3, *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40));
}

id sub_100162598(uint64_t a1)
{
  uint64_t v2 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
  {
    uint64_t v7 = *(void *)(a1 + 32);
    int v8 = 136315394;
    long long v9 = "-[ADRemoteContextStore fetchContextSnapshotFromDevicesWithPeerInfo:completion:]_block_invoke_2";
    __int16 v10 = 2112;
    uint64_t v11 = v7;
    _os_log_error_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "%s #hal Timed out force fetching from %@", (uint8_t *)&v8, 0x16u);
  }
  uint64_t v3 = +[AFError errorWithCode:3102];
  uint64_t v4 = *(void *)(*(void *)(a1 + 48) + 8);
  id v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;

  return [*(id *)(a1 + 40) invokeWithSignal:-2];
}

void sub_10016268C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(NSObject **)(*(void *)(a1 + 32) + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1001629A0;
  block[3] = &unk_100507F88;
  id v12 = v6;
  id v13 = v5;
  int v8 = *(void **)(a1 + 48);
  uint64_t v14 = *(void *)(a1 + 40);
  id v15 = v8;
  id v16 = *(id *)(a1 + 56);
  id v9 = v5;
  id v10 = v6;
  dispatch_async(v7, block);
}

void sub_100162780(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(NSObject **)(*(void *)(a1 + 32) + 8);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_100162894;
  v12[3] = &unk_100504C80;
  id v13 = v6;
  id v14 = v5;
  id v8 = *(id *)(a1 + 40);
  uint64_t v9 = *(void *)(a1 + 64);
  id v15 = v8;
  uint64_t v18 = v9;
  id v16 = *(id *)(a1 + 48);
  id v17 = *(id *)(a1 + 56);
  id v10 = v5;
  id v11 = v6;
  dispatch_async(v7, v12);
}

id sub_10016288C(uint64_t a1)
{
  return [*(id *)(a1 + 32) invoke];
}

void sub_100162894(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2 || !*(void *)(a1 + 40))
  {
    uint64_t v3 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      uint64_t v4 = *(void *)(a1 + 48);
      int v5 = 136315650;
      id v6 = "-[ADRemoteContextStore fetchContextSnapshotFromDevicesWithPeerInfo:completion:]_block_invoke_2";
      __int16 v7 = 2112;
      uint64_t v8 = v4;
      __int16 v9 = 2112;
      id v10 = v2;
      _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "%s #hal Error fetching context through collector for %@: %@", (uint8_t *)&v5, 0x20u);
      uint64_t v2 = *(void **)(a1 + 32);
    }
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 72) + 8) + 40), v2);
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 56), "addObjectsFromArray:");
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 64));
}

void sub_1001629A0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2 || !*(void *)(a1 + 40))
  {
    uint64_t v3 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      uint64_t v4 = *(void *)(a1 + 48);
      int v7 = 136315650;
      uint64_t v8 = "-[ADRemoteContextStore fetchContextSnapshotFromDevicesWithPeerInfo:completion:]_block_invoke_2";
      __int16 v9 = 2112;
      uint64_t v10 = v4;
      __int16 v11 = 2112;
      uint64_t v12 = v2;
      _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "%s #hal Error fetching context from %@: %@", (uint8_t *)&v7, 0x20u);
    }
  }
  else
  {
    int v5 = *(void **)(a1 + 56);
    id v6 = [objc_alloc((Class)AFPeerContentTuple) initWithInfo:*(void *)(a1 + 48) content:*(void *)(a1 + 40)];
    [v5 addObject:v6];
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 64));
}

void sub_100162C28(uint64_t a1)
{
  if (*(unsigned char *)(*(void *)(a1 + 32) + 40))
  {
    id v2 = objc_alloc_init((Class)NSMutableArray);
    if ([*(id *)(a1 + 40) count])
    {
      if ([*(id *)(a1 + 40) containsObject:AFDeviceContextKeyAll])
      {
        uint64_t v3 = *(void **)(a1 + 32);
        v15[0] = _NSConcreteStackBlock;
        v15[1] = 3221225472;
        v15[2] = sub_100162FF0;
        v15[3] = &unk_100503D20;
        id v16 = v2;
        [v3 _enumerateDeviceContextsUsingBlock:v15];
        uint64_t v4 = v16;
      }
      else
      {
        __int16 v11 = AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v13 = *(void *)(a1 + 40);
          uint64_t v14 = *(void *)(a1 + 48);
          *(_DWORD *)stat buf = 136315650;
          uint64_t v22 = "-[ADRemoteContextStore getContextSnapshotIncludingKeys:excludingMandatoryKeys:completion:]_block_invoke";
          __int16 v23 = 2112;
          uint64_t v24 = v13;
          __int16 v25 = 2112;
          uint64_t v26 = v14;
          _os_log_debug_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "%s #hal ContextSnapshot with included keys = %@, excluded keys = %@, updating with partial context", buf, 0x20u);
        }
        uint64_t v12 = *(void **)(a1 + 32);
        v17[0] = _NSConcreteStackBlock;
        v17[1] = 3221225472;
        v17[2] = sub_100162F34;
        v17[3] = &unk_100503CF8;
        id v18 = *(id *)(a1 + 48);
        id v19 = *(id *)(a1 + 40);
        id v20 = v2;
        [v12 _enumerateDeviceContextsUsingBlock:v17];

        uint64_t v4 = v18;
      }
    }
    else
    {
      __int16 v9 = AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)stat buf = 136315138;
        uint64_t v22 = "-[ADRemoteContextStore getContextSnapshotIncludingKeys:excludingMandatoryKeys:completion:]_block_invoke";
        _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "%s #hal no key included. Skipping", buf, 0xCu);
      }
    }
    (*(void (**)(void, id, void, uint64_t))(*(void *)(a1 + 56) + 16))(*(void *)(a1 + 56), v2, 0, v10);
  }
  else
  {
    int v5 = AFSupportsHALOnDemandRapportConnection();
    id v6 = *(void **)(a1 + 32);
    uint64_t v7 = *(void *)(a1 + 56);
    if (v5)
    {
      uint64_t v8 = *(void *)(a1 + 56);
      _objc_msgSend(v6, "_activateOnDemandRapportConnectionAndFetchContext:", v8, v7);
    }
    else
    {
      [v6 _fetchContextFromCollectorAndForceFetchingFromDevicesWithPeerInfo:0 completion:v7];
    }
  }
}

void sub_100162F34(uint64_t a1, void *a2, void *a3)
{
  id v9 = a2;
  id v5 = a3;
  if (([v5 isValid] & 1) != 0 || objc_msgSend(*(id *)(a1 + 32), "count"))
  {
    id v6 = [v5 deviceContextForDeviceContextKeys:*(void *)(a1 + 40) excludingMandatoryKeys:*(void *)(a1 + 32)];
    if (v6)
    {
      uint64_t v7 = *(void **)(a1 + 48);
      id v8 = [objc_alloc((Class)AFPeerContentTuple) initWithInfo:v9 content:v6];
      [v7 addObject:v8];
    }
  }
}

void sub_100162FF0(uint64_t a1, void *a2, void *a3)
{
  id v8 = a2;
  id v5 = a3;
  if ([v5 isValid])
  {
    id v6 = *(void **)(a1 + 32);
    id v7 = [objc_alloc((Class)AFPeerContentTuple) initWithInfo:v8 content:v5];
    [v6 addObject:v7];
  }
}

void sub_100163120(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = a2;
  id v5 = [v3 info];
  uint64_t v4 = [v3 content];

  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v5, v4);
}

id sub_1001632C8(uint64_t a1)
{
  uint64_t v2 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v4 = 136315138;
    id v5 = "-[ADRemoteContextStore stopCollectingContext]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s #hal", (uint8_t *)&v4, 0xCu);
  }
  return [*(id *)(a1 + 32) _setContextCollectionAllowed:0];
}

id sub_1001633F4(uint64_t a1)
{
  uint64_t v2 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v4 = 136315138;
    id v5 = "-[ADRemoteContextStore startCollectingContext]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s #hal", (uint8_t *)&v4, 0xCu);
  }
  return [*(id *)(a1 + 32) _setContextCollectionAllowed:1];
}

void sub_1001646E0(void *a1, void *a2)
{
  uint64_t v3 = a1[4];
  id v4 = a2;
  [v4 setAceVersion:v3];
  [v4 setAssistantIdentifier:a1[5]];
  [v4 setBuildVersion:a1[6]];
  [v4 setProductType:a1[7]];
  [v4 setSharedUserIdentifier:a1[8]];
  [v4 setUserAssignedDeviceName:a1[9]];
  [v4 setUserInterfaceIdiom:a1[10]];
  [v4 setIsLocationSharingDevice:a1[11]];
  [v4 setHomeAccessoryInfo:a1[12]];
  [v4 setIsSiriCloudSyncEnabled:a1[13]];
  [v4 setMyriadTrialTreatment:a1[14]];
}

id sub_10016550C(uint64_t a1)
{
  return [*(id *)(a1 + 32) _reelectCollectorDeviceForReason:*(void *)(a1 + 48) completion:*(void *)(a1 + 40)];
}

uint64_t sub_10016561C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_100165634(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = objc_alloc_init((Class)NSMutableDictionary);
  id v8 = [v5 name];
  id v9 = v8;
  if (v8)
  {
    id v10 = v8;
  }
  else
  {
    id v11 = objc_alloc((Class)NSString);
    uint64_t v12 = [v5 productType];
    uint64_t v13 = [v5 idsDeviceUniqueIdentifier];
    uint64_t v14 = (void *)v13;
    if (v13)
    {
      id v10 = [v11 initWithFormat:@"%@ / %@\n", v12, v13];
    }
    else
    {
      id v15 = [v5 rapportEffectiveIdentifier];
      id v10 = [v11 initWithFormat:@"%@ / %@\n", v12, v15];
    }
  }

  id v16 = [v5 buildDictionaryRepresentation];
  [v7 setValue:v16 forKey:v10];

  if ([v6 count])
  {
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472;
    v17[2] = sub_1001657FC;
    v17[3] = &unk_1005042D8;
    id v18 = v7;
    [v6 enumerateObjectsUsingBlock:v17];
  }
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1001657FC(uint64_t a1, void *a2)
{
  id v13 = a2;
  uint64_t v3 = [v13 name];
  id v4 = v3;
  if (v3)
  {
    id v5 = v3;
  }
  else
  {
    id v6 = objc_alloc((Class)NSString);
    id v7 = [v13 productType];
    uint64_t v8 = [v13 idsDeviceUniqueIdentifier];
    id v9 = (void *)v8;
    if (v8)
    {
      id v5 = [v6 initWithFormat:@"%@ / %@\n", v7, v8];
    }
    else
    {
      id v10 = [v13 rapportEffectiveIdentifier];
      id v5 = [v6 initWithFormat:@"%@ / %@\n", v7, v10];
    }
  }

  id v11 = *(void **)(a1 + 32);
  uint64_t v12 = [v13 buildDictionaryRepresentation];
  [v11 setValue:v12 forKey:v5];
}

void sub_1001661E0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = AFSiriLogContextDaemon;
  BOOL v8 = os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG);
  if (v6)
  {
    if (v8)
    {
      uint64_t v9 = *(void *)(a1 + 32);
      int v14 = 136315650;
      id v15 = "-[ADDeviceCircleManager _sendSyncTokenToAccessoryWithHomeKitIdentifier:aceHost:clientLink:transferReason:]_block_invoke";
      __int16 v16 = 2112;
      uint64_t v17 = v9;
      __int16 v18 = 2112;
      id v19 = v6;
      id v10 = "%s Failed to send sync token for aceHost='%@' - error %@";
      id v11 = v7;
      uint32_t v12 = 32;
LABEL_7:
      _os_log_debug_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, v10, (uint8_t *)&v14, v12);
    }
  }
  else if (v8)
  {
    uint64_t v13 = *(void *)(a1 + 32);
    int v14 = 136315394;
    id v15 = "-[ADDeviceCircleManager _sendSyncTokenToAccessoryWithHomeKitIdentifier:aceHost:clientLink:transferReason:]_block_invoke";
    __int16 v16 = 2112;
    uint64_t v17 = v13;
    id v10 = "%s Sent the token for aceHost='%@";
    id v11 = v7;
    uint32_t v12 = 22;
    goto LABEL_7;
  }
}

void sub_100166D80(void *a1)
{
  long long v10 = 0u;
  long long v11 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  id v2 = *(id *)(a1[4] + 40);
  id v3 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v9;
    do
    {
      id v6 = 0;
      do
      {
        if (*(void *)v9 != v5) {
          objc_enumerationMutation(v2);
        }
        id v7 = *(void **)(*((void *)&v8 + 1) + 8 * (void)v6);
        if (objc_opt_respondsToSelector()) {
          objc_msgSend(v7, "localPeerInfoUpdatedFrom:to:", a1[5], a1[6], (void)v8);
        }
        id v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      id v4 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
    }
    while (v4);
  }
}

id sub_100166F18(void *a1)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100166FC8;
  v4[3] = &unk_10050DB08;
  id v5 = a1;
  id v1 = v5;
  id v2 = +[AFPeerInfo newWithBuilder:v4];

  return v2;
}

void sub_100166FC8(uint64_t a1, void *a2)
{
  id v16 = a2;
  [v16 setIsDeviceOwnedByCurrentUser:1];
  id v3 = +[ADPeerCloudService sharedInstance];
  id v4 = [v3 localPeerIDSDeviceUniqueIdentifier];

  if (v4)
  {
    [v16 setIdsDeviceUniqueIdentifier:v4];
    id v5 = (void *)_IDSCopyIDForDeviceUniqueID();
    [v16 setIdsIdentifier:v5];
  }
  id v6 = [*(id *)(a1 + 32) userAssignedDeviceName];
  [v16 setName:v6];

  id v7 = [*(id *)(a1 + 32) productType];
  [v16 setProductType:v7];

  long long v8 = [*(id *)(a1 + 32) buildVersion];
  [v16 setBuildVersion:v8];

  long long v9 = [*(id *)(a1 + 32) aceVersion];
  [v16 setAceVersion:v9];

  long long v10 = [*(id *)(a1 + 32) userInterfaceIdiom];
  [v16 setUserInterfaceIdiom:v10];

  long long v11 = [*(id *)(a1 + 32) assistantIdentifier];
  [v16 setAssistantIdentifier:v11];

  uint32_t v12 = [*(id *)(a1 + 32) sharedUserIdentifier];
  [v16 setSharedUserIdentifier:v12];

  uint64_t v13 = [*(id *)(a1 + 32) isSiriCloudSyncEnabled];
  objc_msgSend(v16, "setIsSiriCloudSyncEnabled:", objc_msgSend(v13, "BOOLValue"));

  int v14 = [*(id *)(a1 + 32) isLocationSharingDevice];
  objc_msgSend(v16, "setIsLocationSharingDevice:", objc_msgSend(v14, "BOOLValue"));

  id v15 = [*(id *)(a1 + 32) myriadTrialTreatment];
  [v16 setMyriadTrialTreatment:v15];
}

void sub_100167320(uint64_t a1, void *a2)
{
  id v17 = a2;
  [v17 setAceVersion:SAAceVersionCurrent];
  [v17 setAssistantIdentifier:*(void *)(*(void *)(a1 + 32) + 136)];
  id v3 = AFBuildVersion();
  [v17 setBuildVersion:v3];

  id v4 = AFProductType();
  [v17 setProductType:v4];

  id v5 = AFUserAssignedDeviceName();
  [v17 setUserAssignedDeviceName:v5];

  [v17 setSharedUserIdentifier:*(void *)(*(void *)(a1 + 32) + 144)];
  id v6 = AFCurrentUserInterfaceIdiom();
  [v17 setUserInterfaceIdiom:v6];

  [v17 setHomeAccessoryInfo:*(void *)(*(void *)(a1 + 32) + 160)];
  if (AFIsInternalInstall())
  {
    id v7 = +[ADMultiUserMeDevice sharedInstance];
    long long v8 = [v7 isMeDevice];
    id v9 = [v8 BOOLValue];
  }
  else
  {
    id v9 = 0;
  }
  long long v10 = &stru_10050F7D8;
  if (AFIsInternalInstall())
  {
    long long v11 = +[ADMyriadSettingsManager sharedSettingsManager];
    uint64_t v12 = [v11 treatmentId];
    uint64_t v13 = (void *)v12;
    if (v12) {
      int v14 = (__CFString *)v12;
    }
    else {
      int v14 = &stru_10050F7D8;
    }
    long long v10 = v14;
  }
  [v17 setMyriadTrialTreatment:v10];
  id v15 = +[NSNumber numberWithBool:v9];
  [v17 setIsLocationSharingDevice:v15];

  id v16 = +[NSNumber numberWithBool:_AFPreferencesCloudSyncEnabled()];
  [v17 setIsSiriCloudSyncEnabled:v16];
}

void sub_100167BB0(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    id v4 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      int v6 = 136315650;
      id v7 = "-[ADDeviceCircleManager _keepAliveLinkToDevice:]_block_invoke_3";
      __int16 v8 = 2112;
      uint64_t v9 = v5;
      __int16 v10 = 2112;
      id v11 = v3;
      _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "%s keepAlive link activation error for %@: %@", (uint8_t *)&v6, 0x20u);
    }
  }
}

void sub_100167C90(id a1, ADRapportLinkConfigurationMutating *a2)
{
  id v2 = a2;
  id v3 = +[ADRapportLinkDiscoveryOptions newWithBuilder:&stru_100504288];
  [(ADRapportLinkConfigurationMutating *)v2 setDiscoveryOptions:v3];
}

void sub_100167CFC(id a1, ADRapportLinkDiscoveryOptionsMutating *a2)
{
  id v2 = a2;
  [(ADRapportLinkDiscoveryOptionsMutating *)v2 setIncludesHome:2];
  [(ADRapportLinkDiscoveryOptionsMutating *)v2 setIncludesFamily:0];
  [(ADRapportLinkDiscoveryOptionsMutating *)v2 setIncludesRemoraDevices:2];
}

BOOL sub_100167FB4(id a1, ADDeviceCountAndTimestamp *a2, unint64_t a3, BOOL *a4)
{
  return [(ADDeviceCountAndTimestamp *)a2 deviceCount] == 0;
}

void sub_100168490(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1001684B8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _updateStationaryScoreAndResetTimer];
}

void sub_100168624(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v3 = WeakRetained;
    id v2 = [WeakRetained _syncCompanionLinkDeviceLocalPeerData];
    [v3 _updateSiriInfoWithLocalPeerData:v2];

    id WeakRetained = v3;
  }
}

void sub_1001687D4(uint64_t a1)
{
  id v2 = +[ADCommandCenter sharedCommandCenter];
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1001688A0;
  v3[3] = &unk_100504208;
  v3[4] = *(void *)(a1 + 32);
  objc_copyWeak(&v4, (id *)(a1 + 40));
  [v2 getSharedDataForPeer:v3];

  objc_destroyWeak(&v4);
}

void sub_10016888C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1001688A0(uint64_t a1)
{
  id v1 = *(NSObject **)(*(void *)(a1 + 32) + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100168934;
  block[3] = &unk_10050B790;
  objc_copyWeak(&v3, (id *)(a1 + 40));
  dispatch_async(v1, block);
  objc_destroyWeak(&v3);
}

void sub_100168934(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v2 = WeakRetained;
    [WeakRetained _updateSiriInfoWithDeviceCapabilities];
    id WeakRetained = v2;
  }
}

void sub_100168D48(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v19 = 136315650;
    id v20 = "-[ADDeviceCircleManager _updateAssistantIdentifierAndSharedUserIdentifier]_block_invoke";
    __int16 v21 = 2112;
    id v22 = v5;
    __int16 v23 = 2112;
    id v24 = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "%s assistantIdentifier = %@, sharedUserIdentifier = %@", (uint8_t *)&v19, 0x20u);
  }
  id v8 = *(id *)(*(void *)(a1 + 32) + 136);
  if (v8 == v5 || ([v8 isEqualToString:v5] & 1) != 0)
  {
    int v9 = 0;
  }
  else
  {
    id v10 = [v5 copy];
    uint64_t v11 = *(void *)(a1 + 32);
    uint64_t v12 = *(void **)(v11 + 136);
    *(void *)(v11 + 136) = v10;

    int v9 = 1;
  }
  id v13 = *(id *)(*(void *)(a1 + 32) + 144);
  if (v13 == v6 || ([v13 isEqualToString:v6] & 1) != 0)
  {
    if (!v9) {
      goto LABEL_14;
    }
  }
  else
  {
    id v14 = [v6 copy];
    uint64_t v15 = *(void *)(a1 + 32);
    id v16 = *(void **)(v15 + 144);
    *(void *)(v15 + 144) = v14;
  }
  uint64_t v17 = [*(id *)(a1 + 32) _syncCompanionLinkDeviceLocalPeerData];
  if (v17)
  {
    __int16 v18 = (void *)v17;
    [*(id *)(a1 + 32) _updateSiriInfoWithLocalPeerData:v17];
  }
LABEL_14:
}

void sub_100168ECC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(NSObject **)(*(void *)(a1 + 32) + 8);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_100168F88;
  v6[3] = &unk_10050E188;
  id v7 = v3;
  id v8 = *(id *)(a1 + 40);
  id v5 = v3;
  dispatch_async(v4, v6);
}

void sub_100168F88(uint64_t a1)
{
  id v4 = [*(id *)(a1 + 32) assistantIdentifier];
  id v2 = +[ADPreferences sharedPreferences];
  id v3 = [v2 sharedUserIdentifier];

  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

id sub_100169090(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _updateAssistantIdentifierAndSharedUserIdentifier];
}

id sub_10016910C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _updateAssistantIdentifierAndSharedUserIdentifier];
}

id sub_100169188(uint64_t a1)
{
  [*(id *)(a1 + 32) _updateCollectorElectionVersion];
  id v2 = *(void **)(a1 + 32);
  return _[v2 _updateAssistantIdentifierAndSharedUserIdentifier];
}

id sub_10016925C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _updateCurrentAccessoryInfo:*(void *)(a1 + 40)];
}

id sub_100169730(uint64_t a1, void *a2)
{
  id v3 = [a2 componentsSeparatedByString:@"/"];
  id v4 = [v3 lastObject];
  id v5 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    int v8 = 136315394;
    int v9 = "-[ADDeviceCircleManager rapportLink:didReceiveMessage:ofType:fromPeer:completion:]_block_invoke";
    __int16 v10 = 2112;
    uint64_t v11 = v4;
    _os_log_debug_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "%s #myriad #feedback handlerMessageType:%@", (uint8_t *)&v8, 0x16u);
  }
  id v6 = [*(id *)(a1 + 32) isEqualToString:v4];

  return v6;
}

void sub_100169FB4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v9 = *(void *)(a1 + 32);
    int v10 = 136315650;
    uint64_t v11 = "-[ADDeviceCircleManager _handleExecuteCommand:fromPeer:completion:]_block_invoke";
    __int16 v12 = 2112;
    uint64_t v13 = v9;
    __int16 v14 = 2112;
    id v15 = v6;
    _os_log_debug_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "%s #hal Received response for forwarded execute command from: %@, error: %@", (uint8_t *)&v10, 0x20u);
  }
  uint64_t v8 = *(void *)(a1 + 40);
  if (v8) {
    (*(void (**)(uint64_t, id, id))(v8 + 16))(v8, v5, v6);
  }
}

void sub_10016A0BC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = *(NSObject **)(*(void *)(a1 + 32) + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10016A198;
  block[3] = &unk_10050E1D8;
  id v8 = *(id *)(a1 + 40);
  id v13 = v6;
  id v14 = v8;
  id v12 = v5;
  id v9 = v6;
  id v10 = v5;
  dispatch_async(v7, block);
}

uint64_t sub_10016A198(void *a1)
{
  uint64_t result = a1[6];
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void))(result + 16))(result, a1[4], a1[5]);
  }
  return result;
}

id sub_10016A850(void *a1)
{
  id v1 = a1;
  if ([v1 length])
  {
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_10016A92C;
    v5[3] = &unk_10050DB08;
    id v6 = v1;
    id v2 = +[AFPeerInfo newWithBuilder:v5];
    id v3 = sub_10016A938(v2, 0);
  }
  else
  {
    id v3 = 0;
  }

  return v3;
}

id sub_10016A92C(uint64_t a1, void *a2)
{
  return [a2 setIdsDeviceUniqueIdentifier:*(void *)(a1 + 32)];
}

id sub_10016A938(void *a1, unsigned char *a2)
{
  id v3 = a1;
  id v4 = v3;
  if (a2) {
    *a2 = 0;
  }
  if (v3)
  {
    id v5 = +[ADDeviceCircleManager sharedInstance];
    id v6 = [v5 managedPeerInfoMatchingPeerInfo:v4];
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472;
    v18[2] = sub_10016AB88;
    v18[3] = &unk_100504300;
    id v7 = v5;
    id v19 = v7;
    id v8 = v4;
    id v20 = v8;
    id v9 = v6;
    id v21 = v9;
    id v10 = +[AFPeerInfo newWithBuilder:v18];
    uint64_t v11 = AFPeerInfoMerge();
    id v12 = AFPeerInfoMerge();

    if (([v12 isEqual:v8] & 1) == 0)
    {
      if (a2) {
        *a2 = 1;
      }
      id v13 = (void *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
      {
        id v15 = v13;
        id v16 = AFPeerInfoGetCompactDescription();
        uint64_t v17 = AFPeerInfoGetCompactDescription();
        *(_DWORD *)stat buf = 136315650;
        __int16 v23 = "ADDeviceCircleGetBestPeerInfo";
        __int16 v24 = 2112;
        __int16 v25 = v16;
        __int16 v26 = 2112;
        id v27 = v17;
        _os_log_debug_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "%s %@ -> %@", buf, 0x20u);
      }
    }
  }
  else
  {
    id v12 = 0;
  }

  return v12;
}

void sub_10016AB88(uint64_t a1, void *a2)
{
  id v15 = a2;
  id v3 = *(void **)(a1 + 32);
  id v4 = [*(id *)(a1 + 40) idsDeviceUniqueIdentifier];
  id v5 = [v3 assistantIdForDeviceWithIdsDeviceUniqueIdentifier:v4];
  if (v5)
  {
    [v15 setAssistantIdentifier:v5];
  }
  else
  {
    id v6 = *(void **)(a1 + 32);
    id v7 = [*(id *)(a1 + 48) idsDeviceUniqueIdentifier];
    id v8 = [v6 assistantIdForDeviceWithIdsDeviceUniqueIdentifier:v7];
    [v15 setAssistantIdentifier:v8];
  }
  id v9 = *(void **)(a1 + 32);
  id v10 = [*(id *)(a1 + 40) assistantIdentifier];
  uint64_t v11 = [v9 idsDeviceUniqueIdentifierForDeviceWithAssistantId:v10];
  if (v11)
  {
    [v15 setIdsDeviceUniqueIdentifier:v11];
  }
  else
  {
    id v12 = *(void **)(a1 + 32);
    id v13 = [*(id *)(a1 + 48) assistantIdentifier];
    id v14 = [v12 idsDeviceUniqueIdentifierForDeviceWithAssistantId:v13];
    [v15 setIdsDeviceUniqueIdentifier:v14];
  }
}

id sub_10016B24C(uint64_t a1)
{
  uint64_t v2 = [(id)objc_opt_class() _rapportLinkWithQueue:*(void *)(*(void *)(a1 + 32) + 8)];
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = *(void **)(v3 + 24);
  *(void *)(v3 + 24) = v2;

  id v5 = *(void **)(a1 + 32);
  return [v5 _setupClientLink];
}

uint64_t sub_10016B2A8(uint64_t result)
{
  if (!*(void *)(*(void *)(result + 32) + 24)) {
    return (*(uint64_t (**)(void))(*(void *)(result + 40) + 16))();
  }
  return result;
}

id sub_10016B52C(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if (v3)
  {
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    void v7[2] = sub_10016B610;
    v7[3] = &unk_100509958;
    id v8 = v3;
    id v9 = v4;
    id v5 = +[AFPeerInfo newWithBuilder:v7];
  }
  else
  {
    id v5 = 0;
  }

  return v5;
}

void sub_10016B610(uint64_t a1, void *a2)
{
  id v53 = a2;
  objc_msgSend(v53, "setIsDeviceOwnedByCurrentUser:", ((unint64_t)objc_msgSend(*(id *)(a1 + 32), "statusFlags") >> 19) & 1);
  id v3 = [*(id *)(a1 + 32) idsDeviceIdentifier];
  if (v3
    || *(void *)(a1 + 40)
    && (+[ADPeerCloudService sharedInstance],
        id v12 = objc_claimAutoreleasedReturnValue(),
        [v12 localPeerIDSDeviceUniqueIdentifier],
        id v3 = objc_claimAutoreleasedReturnValue(),
        v12,
        v3))
  {
    [v53 setIdsDeviceUniqueIdentifier:v3];
    id v4 = (void *)_IDSCopyIDForDeviceUniqueID();
    [v53 setIdsIdentifier:v4];
  }
  id v5 = [*(id *)(a1 + 32) effectiveIdentifier];
  [v53 setRapportEffectiveIdentifier:v5];

  id v6 = [*(id *)(a1 + 32) mediaSystemIdentifier];
  id v7 = [v6 UUIDString];
  [v53 setMediaSystemIdentifier:v7];

  id v8 = [*(id *)(a1 + 32) mediaRouteIdentifier];
  [v53 setMediaRouteIdentifier:v8];

  id v9 = [*(id *)(a1 + 32) homeKitIdentifier];
  [v53 setIsCommunalDevice:v9 != 0];

  id v10 = *(void **)(a1 + 32);
  if (*(void *)(a1 + 40))
  {
    uint64_t v11 = [v10 name];
    if (v11)
    {
      [v53 setName:v11];
    }
    else
    {
      id v15 = [*(id *)(a1 + 40) userAssignedDeviceName];
      [v53 setName:v15];
    }
    id v16 = [*(id *)(a1 + 32) model];
    if (v16)
    {
      [v53 setProductType:v16];
    }
    else
    {
      uint64_t v17 = [*(id *)(a1 + 40) productType];
      [v53 setProductType:v17];
    }
    __int16 v18 = [*(id *)(a1 + 40) buildVersion];
    [v53 setBuildVersion:v18];

    id v19 = [*(id *)(a1 + 40) aceVersion];
    [v53 setAceVersion:v19];

    id v20 = [*(id *)(a1 + 40) userInterfaceIdiom];
    [v53 setUserInterfaceIdiom:v20];

    id v21 = [*(id *)(a1 + 40) assistantIdentifier];
    [v53 setAssistantIdentifier:v21];

    id v22 = [*(id *)(a1 + 32) homeKitIdentifier];
    __int16 v23 = [v22 UUIDString];
    if (v23)
    {
      [v53 setHomeKitAccessoryIdentifier:v23];
    }
    else
    {
      __int16 v24 = [*(id *)(a1 + 40) homeAccessoryInfo];
      __int16 v25 = [v24 uniqueIdentifier];
      __int16 v26 = [v25 UUIDString];
      [v53 setHomeKitAccessoryIdentifier:v26];
    }
    id v27 = [*(id *)(a1 + 32) roomName];
    if (v27)
    {
      [v53 setRoomName:v27];
    }
    else
    {
      id v28 = [*(id *)(a1 + 40) homeAccessoryInfo];
      id v29 = [v28 roomName];
      [v53 setRoomName:v29];
    }
    id v30 = [*(id *)(a1 + 40) sharedUserIdentifier];
    [v53 setSharedUserIdentifier:v30];

    id v31 = [*(id *)(a1 + 40) isLocationSharingDevice];
    objc_msgSend(v53, "setIsLocationSharingDevice:", objc_msgSend(v31, "BOOLValue"));

    __int16 v32 = [*(id *)(a1 + 40) isSiriCloudSyncEnabled];
    objc_msgSend(v53, "setIsSiriCloudSyncEnabled:", objc_msgSend(v32, "BOOLValue"));

    id v13 = [*(id *)(a1 + 40) myriadTrialTreatment];
    [v53 setMyriadTrialTreatment:v13];
  }
  else
  {
    id v13 = sub_10016BC7C(v10);
    id v14 = [*(id *)(a1 + 32) name];
    if (v14)
    {
      [v53 setName:v14];
    }
    else
    {
      id v33 = [v13 userAssignedDeviceName];
      [v53 setName:v33];
    }
    long long v34 = [*(id *)(a1 + 32) model];
    if (v34)
    {
      [v53 setProductType:v34];
    }
    else
    {
      id v35 = [v13 productType];
      [v53 setProductType:v35];
    }
    id v36 = [v13 buildVersion];
    [v53 setBuildVersion:v36];

    CFStringRef v37 = [v13 aceVersion];
    [v53 setAceVersion:v37];

    id v38 = [v13 userInterfaceIdiom];
    [v53 setUserInterfaceIdiom:v38];

    char v39 = [v13 assistantIdentifier];
    id v40 = [v39 uppercaseString];
    [v53 setAssistantIdentifier:v40];

    id v41 = [*(id *)(a1 + 32) homeKitIdentifier];
    long long v42 = [v41 UUIDString];
    if (v42)
    {
      [v53 setHomeKitAccessoryIdentifier:v42];
    }
    else
    {
      long long v43 = [v13 homeAccessoryInfo];
      long long v44 = [v43 uniqueIdentifier];
      long long v45 = [v44 UUIDString];
      [v53 setHomeKitAccessoryIdentifier:v45];
    }
    uint64_t v46 = [*(id *)(a1 + 32) roomName];
    if (v46)
    {
      [v53 setRoomName:v46];
    }
    else
    {
      id v47 = [v13 homeAccessoryInfo];
      id v48 = [v47 roomName];
      [v53 setRoomName:v48];
    }
    v49 = [v13 sharedUserIdentifier];
    [v53 setSharedUserIdentifier:v49];

    uint64_t v50 = [v13 isLocationSharingDevice];
    objc_msgSend(v53, "setIsLocationSharingDevice:", objc_msgSend(v50, "BOOLValue"));

    id v51 = [v13 isSiriCloudSyncEnabled];
    objc_msgSend(v53, "setIsSiriCloudSyncEnabled:", objc_msgSend(v51, "BOOLValue"));

    id v52 = [v13 myriadTrialTreatment];
    [v53 setMyriadTrialTreatment:v52];
  }
}

ADDeviceCirclePeerData *sub_10016BC7C(void *a1)
{
  id v1 = a1;
  uint64_t v2 = v1;
  if (!v1)
  {
    id v5 = 0;
    goto LABEL_27;
  }
  id v3 = [v1 siriInfo];
  id v4 = [v3 objectForKey:@"peerData"];

  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v5 = [[ADDeviceCirclePeerData alloc] initWithDictionaryRepresentation:v4];
  }
  else {
    id v5 = 0;
  }
  id v6 = [(ADDeviceCirclePeerData *)v5 assistantIdentifier];
  id v7 = [v6 length];

  id v8 = [(ADDeviceCirclePeerData *)v5 sharedUserIdentifier];
  id v9 = [v8 length];

  if (!v7 || !v9)
  {
    id v10 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)stat buf = 136315138;
      id v29 = "ADDeviceCircleGetPeerDataFromRapportDevice";
      _os_log_debug_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "%s No assistantID or shredUserIdentifier. Fetching sharedData.", buf, 0xCu);
    }
    uint64_t v11 = objc_msgSend(v2, "_ad_siriSharedData");
    id v12 = v11;
    if (v7)
    {
      if (v9)
      {
LABEL_25:

        goto LABEL_26;
      }
    }
    else
    {
      id v13 = [v11 assistantId];
      if ([v13 length])
      {
        if (v5)
        {
          v26[0] = _NSConcreteStackBlock;
          v26[1] = 3221225472;
          v26[2] = sub_10016C04C;
          v26[3] = &unk_1005042B0;
          id v14 = &v27;
          id v27 = v13;
          uint64_t v15 = [(ADDeviceCirclePeerData *)v5 mutatedCopyWithMutator:v26];

          id v5 = (ADDeviceCirclePeerData *)v15;
        }
        else
        {
          v24[0] = _NSConcreteStackBlock;
          v24[1] = 3221225472;
          v24[2] = sub_10016C040;
          v24[3] = &unk_1005042B0;
          id v14 = &v25;
          id v25 = v13;
          id v5 = +[ADDeviceCirclePeerData newWithBuilder:v24];
        }
      }
      if (v9) {
        goto LABEL_25;
      }
    }
    id v16 = [v12 sharedUserId];
    if ([v16 length])
    {
      if (v5)
      {
        v22[0] = _NSConcreteStackBlock;
        v22[1] = 3221225472;
        v22[2] = sub_10016C064;
        v22[3] = &unk_1005042B0;
        uint64_t v17 = &v23;
        id v23 = v16;
        uint64_t v18 = [(ADDeviceCirclePeerData *)v5 mutatedCopyWithMutator:v22];

        id v5 = (ADDeviceCirclePeerData *)v18;
      }
      else
      {
        v20[0] = _NSConcreteStackBlock;
        v20[1] = 3221225472;
        v20[2] = sub_10016C058;
        v20[3] = &unk_1005042B0;
        uint64_t v17 = &v21;
        id v21 = v16;
        id v5 = +[ADDeviceCirclePeerData newWithBuilder:v20];
      }
    }
    goto LABEL_25;
  }
LABEL_26:

LABEL_27:
  return v5;
}

id sub_10016C040(uint64_t a1, void *a2)
{
  return [a2 setAssistantIdentifier:*(void *)(a1 + 32)];
}

id sub_10016C04C(uint64_t a1, void *a2)
{
  return [a2 setAssistantIdentifier:*(void *)(a1 + 32)];
}

id sub_10016C058(uint64_t a1, void *a2)
{
  return [a2 setSharedUserIdentifier:*(void *)(a1 + 32)];
}

id sub_10016C064(uint64_t a1, void *a2)
{
  return [a2 setSharedUserIdentifier:*(void *)(a1 + 32)];
}

void sub_10016C620(uint64_t a1)
{
  id v2 = [objc_alloc((Class)NSMutableSet) initWithArray:*(void *)(a1 + 32)];
  [v2 minusSet:*(void *)(a1 + 40)];
  uint64_t v3 = *(void *)(a1 + 48);
  id v4 = *(NSObject **)(v3 + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10016CDC8;
  block[3] = &unk_100509510;
  void block[4] = v3;
  id v7 = v2;
  uint64_t v10 = *(void *)(a1 + 72);
  id v8 = *(id *)(a1 + 56);
  id v9 = *(id *)(a1 + 64);
  id v5 = v2;
  dispatch_async(v4, block);
}

void sub_10016C710(id *a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  if (a3)
  {
    id v6 = objc_msgSend(a1[4], "af_lenientMappedArray:", &stru_100504140);
    id v7 = (void *)*((void *)a1[7] + 3);
    CFStringRef v33 = @"get_capabilities_for_devices";
    long long v34 = v6;
    id v8 = +[NSDictionary dictionaryWithObjects:&v34 forKeys:&v33 count:1];
    id v9 = a1[8];
    uint64_t v10 = [a1[7] _rapportLinkMessageOptions];
    v23[0] = _NSConcreteStackBlock;
    v23[1] = 3221225472;
    void v23[2] = sub_10016CA6C;
    v23[3] = &unk_100504168;
    id v24 = a1[8];
    id v25 = a1[4];
    id v26 = a1[5];
    id v27 = a1[6];
    id v28 = a1[9];
    [v7 sendRequestID:@"com.apple.siri.rapport-link.request.device-circle-manager" messageType:@"device_capabilities_fetch" messagePayload:v8 toDeviceWithIDSDeviceID:v9 options:v10 completion:v23];
  }
  else
  {
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    id obj = a1[4];
    id v11 = [obj countByEnumeratingWithState:&v29 objects:v41 count:16];
    if (v11)
    {
      id v13 = v11;
      uint64_t v14 = *(void *)v30;
      *(void *)&long long v12 = 136315650;
      long long v21 = v12;
      do
      {
        for (i = 0; i != v13; i = (char *)i + 1)
        {
          if (*(void *)v30 != v14) {
            objc_enumerationMutation(obj);
          }
          id v16 = *(void **)(*((void *)&v29 + 1) + 8 * i);
          uint64_t v17 = objc_msgSend(v16, "assistantIdentifier", v21);
          uint64_t v18 = [v5 objectForKey:v17];
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            id v19 = sub_10026FB40(v18);
            [a1[5] setObject:v19 forKey:v17];
            [a1[6] addObject:v16];
          }
          else
          {
            id v20 = AFSiriLogContextDaemon;
            if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)stat buf = v21;
              id v36 = "-[ADDeviceCircleManager _fetchDeviceCapabilitiesForDevices:fromCollectorWithIndex:existingCapabiliti"
                    "es:completion:]_block_invoke_4";
              __int16 v37 = 2112;
              id v38 = v17;
              __int16 v39 = 2112;
              id v40 = v18;
              _os_log_error_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "%s Invalid SVDCapabilities response for %@: %@", buf, 0x20u);
            }
          }
        }
        id v13 = [obj countByEnumeratingWithState:&v29 objects:v41 count:16];
      }
      while (v13);
    }

    (*((void (**)(void))a1[9] + 2))();
  }
}

void sub_10016CA6C(uint64_t a1, void *a2, void *a3)
{
  id v27 = a2;
  id v5 = a3;
  if (v5)
  {
    id v6 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      id v7 = *(void **)(a1 + 32);
      id v8 = *(void **)(a1 + 40);
      *(_DWORD *)stat buf = 136315906;
      id v35 = "-[ADDeviceCircleManager _fetchDeviceCapabilitiesForDevices:fromCollectorWithIndex:existingCapabilities:compl"
            "etion:]_block_invoke_2";
      __int16 v36 = 2112;
      __int16 v37 = v7;
      __int16 v38 = 2112;
      __int16 v39 = v8;
      __int16 v40 = 2112;
      id v41 = v5;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "%s Error getting capabilities from %@ for %@: %@", buf, 0x2Au);
    }
  }
  else
  {
    long long v30 = 0u;
    long long v31 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    id obj = *(id *)(a1 + 40);
    id v9 = [obj countByEnumeratingWithState:&v28 objects:v33 count:16];
    if (v9)
    {
      id v10 = v9;
      uint64_t v26 = *(void *)v29;
      id v11 = &HMAccessoryCategoryTypeAirPort_ptr;
      do
      {
        for (i = 0; i != v10; i = (char *)i + 1)
        {
          if (*(void *)v29 != v26) {
            objc_enumerationMutation(obj);
          }
          id v13 = *(void **)(*((void *)&v28 + 1) + 8 * i);
          uint64_t v14 = [v13 idsDeviceUniqueIdentifier];
          uint64_t v15 = [v13 assistantIdentifier];
          id v16 = [v27 objectForKey:v14];
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            if (v15)
            {
              id v25 = [objc_alloc((Class)AFDeviceCapabilities) initWithSerializedBackingStore:v16];
              if ([v25 voiceTriggerEnabled]) {
                uint64_t v17 = 1;
              }
              else {
                uint64_t v17 = 2;
              }
              id v24 = *(void **)(a1 + 48);
              id v18 = [objc_alloc((Class)SVDVoiceTriggerCapability) initWithStatus:v17];
              id v32 = v18;
              +[NSArray arrayWithObjects:&v32 count:1];
              id v19 = v11;
              v21 = uint64_t v20 = a1;
              [v24 setObject:v21 forKey:v15];

              a1 = v20;
              id v11 = v19;

              [*(id *)(a1 + 56) addObject:v13];
            }
          }
          else
          {
            id v22 = AFSiriLogContextDaemon;
            if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)stat buf = 136315650;
              id v35 = "-[ADDeviceCircleManager _fetchDeviceCapabilitiesForDevices:fromCollectorWithIndex:existingCapabiliti"
                    "es:completion:]_block_invoke";
              __int16 v36 = 2112;
              __int16 v37 = v14;
              __int16 v38 = 2112;
              __int16 v39 = v16;
              _os_log_error_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "%s Invalid capabilities response for %@: %@", buf, 0x20u);
            }
          }
        }
        id v10 = [obj countByEnumeratingWithState:&v28 objects:v33 count:16];
      }
      while (v10);
    }

    id v5 = 0;
  }
  (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
}

NSString *__cdecl sub_10016CDB8(id a1, AFPeerInfo *a2)
{
  return (NSString *)[(AFPeerInfo *)a2 idsDeviceUniqueIdentifier];
}

NSString *__cdecl sub_10016CDC0(id a1, AFPeerInfo *a2)
{
  return (NSString *)[(AFPeerInfo *)a2 assistantIdentifier];
}

void sub_10016CDC8(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = [*(id *)(a1 + 40) allObjects];
  [v2 _fetchDeviceCapabilitiesForDevices:v3 fromCollectorWithIndex:*(void *)(a1 + 64) + 1 existingCapabilities:*(void *)(a1 + 48) completion:*(void *)(a1 + 56)];
}

uint64_t sub_10016CF1C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10016D630(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  _Block_object_dispose(&a35, 8);
  _Block_object_dispose((const void *)(v35 - 176), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10016D65C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10016D66C(uint64_t a1)
{
}

uint64_t sub_10016D674(uint64_t a1, uint64_t a2)
{
  id v4 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    int v9 = 136315394;
    id v10 = "-[ADDeviceCircleManager _executeCommandThroughOnDemandClientLinkToContextCollector:onPeer:debugID:completion:]_block_invoke";
    __int16 v11 = 2112;
    uint64_t v12 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%s #hal safeCompletion invoked for executing commands through #on-demand connection for %@", (uint8_t *)&v9, 0x16u);
  }
  [*(id *)(a1 + 40) cancel];
  [*(id *)(a1 + 48) _cleanupOnDemandClientLinkToContextCollector:*(void *)(*(void *)(a1 + 48) + 32)];
  if (a2 == -2)
  {
    id v6 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      uint64_t v8 = *(void *)(a1 + 32);
      int v9 = 136315394;
      id v10 = "-[ADDeviceCircleManager _executeCommandThroughOnDemandClientLinkToContextCollector:onPeer:debugID:completion:]_block_invoke";
      __int16 v11 = 2112;
      uint64_t v12 = v8;
      _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "%s #hal timed-out executing commands through #on-demand connection for %@", (uint8_t *)&v9, 0x16u);
    }
  }
  uint64_t result = *(void *)(a1 + 56);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void))(result + 16))(result, *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40), *(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 40));
  }
  return result;
}

id sub_10016D7E4(uint64_t a1)
{
  [*(id *)(a1 + 32) invokeWithSignal:-2];
  id v2 = *(void **)(a1 + 32);
  return [v2 invoke];
}

void sub_10016D824(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (v4)
  {
    uint64_t v5 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      uint64_t v10 = *(void *)(*(void *)(a1 + 32) + 32);
      *(_DWORD *)stat buf = 136315650;
      uint64_t v17 = "-[ADDeviceCircleManager _executeCommandThroughOnDemandClientLinkToContextCollector:onPeer:debugID:completion:]_block_invoke";
      __int16 v18 = 2112;
      uint64_t v19 = v10;
      __int16 v20 = 2112;
      id v21 = v4;
      _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "%s #hal activate on-demand connection to context collector failed. Connection: %@, Error: %@", buf, 0x20u);
    }
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40), a2);
    [*(id *)(a1 + 40) invoke];
  }
  else
  {
    mach_absolute_time();
    uint64_t Milliseconds = AFMachAbsoluteTimeGetMilliseconds();
    id v7 = *(void **)(*(void *)(a1 + 32) + 32);
    uint64_t v8 = +[NSDictionary dictionaryWithDictionary:*(void *)(a1 + 48)];
    int v9 = [*(id *)(a1 + 32) _rapportLinkMessageOptions];
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_10016DA20;
    v11[3] = &unk_1005040B8;
    void v11[4] = *(void *)(a1 + 32);
    uint64_t v15 = Milliseconds;
    id v12 = *(id *)(a1 + 56);
    int8x16_t v14 = vextq_s8(*(int8x16_t *)(a1 + 64), *(int8x16_t *)(a1 + 64), 8uLL);
    id v13 = *(id *)(a1 + 40);
    [v7 sendRequestToContextCollectorThroughOnDemandConnection:@"com.apple.siri.rapport-link.request.device-circle-manager" messageType:@"execute_command_request" messagePayload:v8 options:v9 completion:v11];
  }
}

void sub_10016DA20(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = *(NSObject **)(*(void *)(a1 + 32) + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10016DB2C;
  block[3] = &unk_100504090;
  uint64_t v19 = *(void *)(a1 + 72);
  id v14 = *(id *)(a1 + 40);
  id v15 = v6;
  uint64_t v8 = *(void *)(a1 + 64);
  id v16 = v5;
  uint64_t v18 = v8;
  long long v12 = *(_OWORD *)(a1 + 48);
  id v9 = (id)v12;
  long long v17 = v12;
  id v10 = v5;
  id v11 = v6;
  dispatch_async(v7, block);
}

id sub_10016DB2C(uint64_t a1)
{
  mach_absolute_time();
  uint64_t Milliseconds = AFMachAbsoluteTimeGetMilliseconds();
  id v3 = (void *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = Milliseconds - *(void *)(a1 + 80);
    uint64_t v5 = *(void *)(a1 + 32);
    id v6 = v3;
    id v7 = +[NSNumber numberWithUnsignedLongLong:v4];
    uint64_t v8 = *(void *)(a1 + 40);
    int v10 = 136315906;
    id v11 = "-[ADDeviceCircleManager _executeCommandThroughOnDemandClientLinkToContextCollector:onPeer:debugID:completion:]_block_invoke_2";
    __int16 v12 = 2112;
    uint64_t v13 = v5;
    __int16 v14 = 2112;
    id v15 = v7;
    __int16 v16 = 2112;
    uint64_t v17 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "%s #hal (%@) execute command request response received in %@ ms, error: %@", (uint8_t *)&v10, 0x2Au);
  }
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40), *(id *)(a1 + 48));
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 72) + 8) + 40), *(id *)(a1 + 40));
  return [*(id *)(a1 + 56) invoke];
}

void sub_10016DE6C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) info];
  id v3 = [v2 originPeerInfo];

  if (!v3)
  {
    v28[0] = _NSConcreteStackBlock;
    v28[1] = 3221225472;
    v28[2] = sub_10016E224;
    v28[3] = &unk_100505D58;
    uint64_t v4 = *(void **)(a1 + 32);
    v28[4] = *(void *)(a1 + 40);
    [v4 updateInfoUsingBlock:v28];
  }
  uint64_t v5 = [*(id *)(a1 + 32) info];
  id v6 = [v5 buildDictionaryRepresentation];

  if (v6) {
    id v7 = v6;
  }
  else {
    id v7 = &__NSDictionary0__struct;
  }
  v37[0] = @"messageID";
  uint64_t v8 = +[NSUUID UUID];
  id v9 = [v8 UUIDString];
  v38[0] = v9;
  v38[1] = @"execute_command_request";
  v37[1] = @"type";
  v37[2] = @"serialized_command";
  uint64_t v10 = *(void *)(a1 + 48);
  v37[3] = @"execution_context";
  v38[2] = v10;
  v38[3] = v7;
  id v11 = +[NSDictionary dictionaryWithObjects:v38 forKeys:v37 count:4];

  __int16 v12 = +[NSUUID UUID];
  uint64_t v13 = [v12 UUIDString];
  __int16 v14 = [v13 componentsSeparatedByString:@"-"];
  id v15 = [v14 firstObject];

  __int16 v16 = (void *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v17 = *(void **)(a1 + 56);
    uint64_t v18 = v16;
    uint64_t v19 = [v17 assistantIdentifier];
    *(_DWORD *)stat buf = 136315650;
    id v32 = "-[ADDeviceCircleManager _executeCommand:onPeer:executionContext:throughOnDemandConnectionToContextCollector:co"
          "mpletion:]_block_invoke";
    __int16 v33 = 2112;
    long long v34 = v15;
    __int16 v35 = 2112;
    __int16 v36 = v19;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "%s #hal (%@) execute command request to peer with assistantId: %@", buf, 0x20u);
  }
  if (AFSupportsHALOnDemandRapportConnection() && *(unsigned char *)(a1 + 72))
  {
    [*(id *)(a1 + 40) _executeCommandThroughOnDemandClientLinkToContextCollector:v11 onPeer:*(void *)(a1 + 56) debugID:v15 completion:*(void *)(a1 + 64)];
  }
  else
  {
    mach_absolute_time();
    uint64_t Milliseconds = AFMachAbsoluteTimeGetMilliseconds();
    id v21 = *(void **)(*(void *)(a1 + 40) + 24);
    id v22 = [*(id *)(a1 + 56) assistantIdentifier];
    uint64_t v29 = RPOptionStatusFlags;
    long long v30 = &off_1005236A8;
    id v23 = +[NSDictionary dictionaryWithObjects:&v30 forKeys:&v29 count:1];
    v24[0] = _NSConcreteStackBlock;
    v24[1] = 3221225472;
    v24[2] = sub_10016E288;
    v24[3] = &unk_100504040;
    void v24[4] = *(void *)(a1 + 40);
    uint64_t v27 = Milliseconds;
    id v25 = v15;
    id v26 = *(id *)(a1 + 64);
    [v21 sendRequestID:@"com.apple.siri.rapport-link.request.device-circle-manager" messageType:@"execute_command_request" messagePayload:v11 toDeviceWithAssistantIdentifier:v22 options:v23 completion:v24];
  }
}

void sub_10016E224(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = a2;
  id v4 = [v2 _localPeerInfo];
  [v3 setOriginPeerInfo:v4];
}

void sub_10016E288(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = *(NSObject **)(*(void *)(a1 + 32) + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10016E37C;
  block[3] = &unk_100509510;
  uint64_t v16 = *(void *)(a1 + 56);
  id v12 = *(id *)(a1 + 40);
  id v13 = v6;
  id v8 = *(id *)(a1 + 48);
  id v14 = v5;
  id v15 = v8;
  id v9 = v5;
  id v10 = v6;
  dispatch_async(v7, block);
}

uint64_t sub_10016E37C(void *a1)
{
  mach_absolute_time();
  uint64_t Milliseconds = AFMachAbsoluteTimeGetMilliseconds();
  id v3 = (void *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v4 = Milliseconds - a1[8];
    uint64_t v5 = a1[4];
    id v6 = v3;
    id v7 = +[NSNumber numberWithUnsignedLongLong:v4];
    uint64_t v8 = a1[5];
    int v10 = 136315906;
    id v11 = "-[ADDeviceCircleManager _executeCommand:onPeer:executionContext:throughOnDemandConnectionToContextCollector:co"
          "mpletion:]_block_invoke_2";
    __int16 v12 = 2112;
    uint64_t v13 = v5;
    __int16 v14 = 2112;
    id v15 = v7;
    __int16 v16 = 2112;
    uint64_t v17 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "%s #hal (%@) execute command request response received in %@ ms, error: %@", (uint8_t *)&v10, 0x2Au);
  }
  uint64_t result = a1[7];
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void))(result + 16))(result, a1[6], a1[5]);
  }
  return result;
}

void sub_10016F0B8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(NSObject **)(*(void *)(a1 + 32) + 8);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_10016F5B4;
  v6[3] = &unk_100503FF0;
  id v7 = v3;
  id v8 = *(id *)(a1 + 40);
  id v9 = *(id *)(a1 + 48);
  id v10 = *(id *)(a1 + 56);
  id v11 = *(id *)(a1 + 64);
  id v12 = *(id *)(a1 + 72);
  id v13 = *(id *)(a1 + 80);
  id v14 = *(id *)(a1 + 88);
  id v5 = v3;
  dispatch_async(v4, v6);
}

void sub_10016F1EC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (*(void *)(*(void *)(a1 + 32) + 48))
  {
    if (v2)
    {
      id v3 = +[NSSet setWithArray:](NSSet, "setWithArray:");
      uint64_t v4 = +[NSSet setWithArray:*(void *)(a1 + 40)];
      unsigned __int8 v5 = [v3 isEqualToSet:v4];

      if (v5) {
        goto LABEL_4;
      }
    }
LABEL_6:
    id v7 = +[AFAnalytics sharedAnalytics];
    [v7 logEventWithType:4570 context:0];

    int v6 = 1;
    goto LABEL_7;
  }
  if (v2) {
    goto LABEL_6;
  }
LABEL_4:
  int v6 = 0;
LABEL_7:
  objc_storeStrong((id *)(*(void *)(a1 + 32) + 48), *(id *)(a1 + 40));
  uint64_t v8 = *(void *)(a1 + 32);
  id v9 = *(void **)(v8 + 48);
  v25[0] = _NSConcreteStackBlock;
  v25[1] = 3221225472;
  v25[2] = sub_10016F474;
  v25[3] = &unk_100503F88;
  v25[4] = v8;
  id v26 = *(id *)(a1 + 48);
  [v9 enumerateObjectsUsingBlock:v25];
  uint64_t v10 = +[NSDate date];
  uint64_t v11 = *(void *)(a1 + 32);
  id v12 = *(void **)(v11 + 104);
  *(void *)(v11 + 104) = v10;

  if (*(unsigned char *)(a1 + 72) && *(void *)(a1 + 56)) {
    unsigned int v13 = objc_msgSend(*(id *)(*(void *)(a1 + 32) + 48), "containsObject:");
  }
  else {
    unsigned int v13 = 0;
  }
  uint64_t v14 = *(void *)(a1 + 32);
  if (*(unsigned __int8 *)(v14 + 56) != v13)
  {
    *(unsigned char *)(v14 + 56) = v13;
    [*(id *)(a1 + 32) _updateClientLinkSiriInfo];
    [*(id *)(a1 + 32) _updateContextCollectorStatusToRapport:*(unsigned __int8 *)(*(void *)(a1 + 32) + 56)];
  }
  if (v6)
  {
    long long v23 = 0u;
    long long v24 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    id v15 = *(id *)(*(void *)(a1 + 32) + 40);
    id v16 = [v15 countByEnumeratingWithState:&v21 objects:v27 count:16];
    if (v16)
    {
      id v17 = v16;
      uint64_t v18 = *(void *)v22;
      do
      {
        uint64_t v19 = 0;
        do
        {
          if (*(void *)v22 != v18) {
            objc_enumerationMutation(v15);
          }
          objc_msgSend(*(id *)(*((void *)&v21 + 1) + 8 * (void)v19), "contextCollectorChangedToDevicesWithIdentifiers:localDeviceIsCollector:", *(void *)(*(void *)(a1 + 32) + 48), *(unsigned __int8 *)(*(void *)(a1 + 32) + 56), (void)v21);
          uint64_t v19 = (char *)v19 + 1;
        }
        while (v17 != v19);
        id v17 = [v15 countByEnumeratingWithState:&v21 objects:v27 count:16];
      }
      while (v17);
    }
  }
  uint64_t v20 = *(void *)(a1 + 64);
  if (v20) {
    (*(void (**)(void))(v20 + 16))();
  }
}

void sub_10016F474(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  int v6 = (void *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v7 = a3 + 1;
    uint64_t v8 = *(void **)(*(void *)(a1 + 32) + 48);
    id v9 = v6;
    id v10 = [v8 count];
    uint64_t v11 = [*(id *)(a1 + 40) objectForKeyedSubscript:v5];
    id v12 = (void *)v11;
    int v14 = 136316162;
    id v15 = "-[ADDeviceCircleManager _reelectCollectorDeviceForReason:completion:]_block_invoke_2";
    CFStringRef v13 = @"?";
    __int16 v16 = 2048;
    if (v11) {
      CFStringRef v13 = (const __CFString *)v11;
    }
    uint64_t v17 = v7;
    __int16 v18 = 2048;
    id v19 = v10;
    __int16 v20 = 2112;
    id v21 = v5;
    __int16 v22 = 2112;
    CFStringRef v23 = v13;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "%s #hal Elected collector device (%tu/%tu): %@, homeID: %@", (uint8_t *)&v14, 0x34u);
  }
}

void sub_10016F5B4(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    if ((objc_msgSend(*(id *)(a1 + 72), "containsObject:") & 1) == 0)
    {
      [*(id *)(a1 + 56) addObject:*(void *)(a1 + 64)];
      [*(id *)(a1 + 72) addObject:*(void *)(a1 + 32)];
      [*(id *)(a1 + 80) setObject:*(void *)(a1 + 32) forKey:*(void *)(a1 + 64)];
    }
  }
  else
  {
    uint64_t v2 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      uint64_t v3 = *(void *)(a1 + 40);
      uint64_t v4 = *(void *)(a1 + 48);
      int v5 = 136315650;
      int v6 = "-[ADDeviceCircleManager _reelectCollectorDeviceForReason:completion:]_block_invoke_3";
      __int16 v7 = 2112;
      uint64_t v8 = v3;
      __int16 v9 = 2112;
      uint64_t v10 = v4;
      _os_log_error_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "%s Unable to get home id for %@ from %@", (uint8_t *)&v5, 0x20u);
    }
    [*(id *)(a1 + 56) addObject:*(void *)(a1 + 64)];
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 88));
}

int64_t sub_10016F6C8(id a1, NSDictionary *a2, NSDictionary *a3)
{
  uint64_t v4 = a3;
  int v5 = a2;
  int v6 = [(NSDictionary *)v5 objectForKey:@"idsDeviceIdentifier"];
  __int16 v7 = [(NSDictionary *)v4 objectForKey:@"idsDeviceIdentifier"];
  uint64_t v8 = [(NSDictionary *)v5 objectForKey:@"isCollector"];
  unsigned int v9 = [v8 BOOLValue];

  uint64_t v10 = [(NSDictionary *)v4 objectForKey:@"isCollector"];
  LODWORD(v8) = [v10 BOOLValue];

  uint64_t v11 = [(NSDictionary *)v5 objectForKey:@"stationaryScore"];

  [v11 floatValue];
  float v13 = v12;

  int v14 = [(NSDictionary *)v4 objectForKey:@"stationaryScore"];

  [v14 floatValue];
  float v16 = v15;

  if (v9 == v8)
  {
    if (v13 == v16)
    {
      int64_t v17 = (int64_t)[v6 compare:v7];
    }
    else if (v13 <= v16)
    {
      int64_t v17 = 1;
    }
    else
    {
      int64_t v17 = -1;
    }
  }
  else if (v9)
  {
    int64_t v17 = -1;
  }
  else
  {
    int64_t v17 = 1;
  }

  return v17;
}

void sub_100170324(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    __int16 v7 = (void *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      uint64_t v11 = *(void *)(a1 + 32);
      float v12 = v7;
      float v13 = [v6 debugDescription];
      *(_DWORD *)stat buf = 136315650;
      id v19 = "-[ADDeviceCircleManager sendRequestType:data:toDeviceWithAssistantIdentifier:onQueue:completion:]_block_invoke";
      __int16 v20 = 2112;
      uint64_t v21 = v11;
      __int16 v22 = 2112;
      CFStringRef v23 = v13;
      _os_log_error_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "%s Error sending request to device with assistantId %@: %@", buf, 0x20u);
    }
  }
  if (*(void *)(a1 + 48))
  {
    uint64_t v8 = *(void **)(a1 + 40);
    if (v8)
    {
      unsigned int v9 = v8;
    }
    else
    {
      unsigned int v9 = &_dispatch_main_q;
      id v10 = &_dispatch_main_q;
    }
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1001704EC;
    block[3] = &unk_10050E1D8;
    id v17 = *(id *)(a1 + 48);
    id v15 = v5;
    id v16 = v6;
    dispatch_async(v9, block);
  }
}

uint64_t sub_1001704EC(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

void sub_1001706F8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    __int16 v7 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      uint64_t v9 = *(void *)(a1 + 32);
      int v10 = 136315650;
      uint64_t v11 = "-[ADDeviceCircleManager _forwardExecuteCommandToDevice:message:from:completion:]_block_invoke";
      __int16 v12 = 2112;
      uint64_t v13 = v9;
      __int16 v14 = 2112;
      id v15 = v6;
      _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "%s #hal Error in forwarding executeCommand to %@: error:%@", (uint8_t *)&v10, 0x20u);
    }
  }
  uint64_t v8 = *(void *)(a1 + 40);
  if (v8) {
    (*(void (**)(uint64_t, id, id))(v8 + 16))(v8, v5, v6);
  }
}

void sub_100170C48(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(unsigned char *)(v1 + 56))
  {
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    id obj = [*(id *)(v1 + 24) activeDevices];
    id v3 = [obj countByEnumeratingWithState:&v15 objects:v21 count:16];
    if (v3)
    {
      id v4 = v3;
      uint64_t v5 = *(void *)v16;
      do
      {
        id v6 = 0;
        do
        {
          if (*(void *)v16 != v5) {
            objc_enumerationMutation(obj);
          }
          __int16 v7 = [*(id *)(a1 + 32) _keepAliveLinkToDevice:*(void *)(*((void *)&v15 + 1) + 8 * (void)v6)];
          dispatch_time_t v8 = dispatch_time(0, 5000000000);
          uint64_t v9 = *(NSObject **)(*(void *)(a1 + 32) + 8);
          block[0] = _NSConcreteStackBlock;
          block[1] = 3221225472;
          block[2] = sub_100170E58;
          block[3] = &unk_10050E138;
          id v14 = v7;
          id v10 = v7;
          dispatch_after(v8, v9, block);

          id v6 = (char *)v6 + 1;
        }
        while (v4 != v6);
        id v4 = [obj countByEnumeratingWithState:&v15 objects:v21 count:16];
      }
      while (v4);
    }
  }
  else
  {
    uint64_t v11 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)stat buf = 136315138;
      __int16 v20 = "-[ADDeviceCircleManager wakeUpNearbyDevices]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "%s Current device is not context collector, skipping", buf, 0xCu);
    }
  }
}

id sub_100170E58(uint64_t a1)
{
  return [*(id *)(a1 + 32) invalidate];
}

void sub_100170F08(uint64_t a1)
{
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 128));
  id v3 = [*(id *)(a1 + 32) _localPeerInfo];
  uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 168) allValues];
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 32) + 128));
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_100171154(id *a1)
{
  uint64_t v2 = [a1[4] _setUpOnDemandClientLinkToContextCollector];
  [*((id *)a1[4] + 4) invalidate];
  objc_storeStrong((id *)a1[4] + 4, v2);
  id v3 = objc_opt_new();
  id v4 = objc_alloc((Class)AFSafetyBlock);
  v25[0] = _NSConcreteStackBlock;
  v25[1] = 3221225472;
  v25[2] = sub_100171444;
  v25[3] = &unk_100503F60;
  id v26 = 0;
  id v5 = v3;
  id v27 = v5;
  id v6 = a1[5];
  id v7 = a1[4];
  id v28 = v6;
  id v29 = v7;
  id v30 = a1[6];
  id v8 = [v4 initWithBlock:v25];
  id v9 = objc_alloc((Class)AFWatchdogTimer);
  uint64_t v10 = *((void *)a1[4] + 1);
  v23[0] = _NSConcreteStackBlock;
  v23[1] = 3221225472;
  void v23[2] = sub_1001715F0;
  v23[3] = &unk_10050E138;
  id v11 = v8;
  id v24 = v11;
  id v12 = [v9 initWithTimeoutInterval:v10 onQueue:v23 timeoutHandler:1.7];
  [v12 start];
  uint64_t v13 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)stat buf = 136315394;
    id v32 = "-[ADDeviceCircleManager getCapabilitiesAndPeersFromContextCollectorThroughOnDemandRapportConnection:]_block_invoke_2";
    __int16 v33 = 2112;
    long long v34 = v2;
    _os_log_debug_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "%s #hal activating #on-demand connection to context collector: %@", buf, 0x16u);
  }
  id v14 = a1[4];
  uint64_t v15 = v14[4];
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 3221225472;
  v19[2] = sub_100171630;
  v19[3] = &unk_1005082F0;
  void v19[4] = v14;
  id v20 = v11;
  id v16 = a1[6];
  id v21 = v5;
  id v22 = v16;
  id v17 = v5;
  id v18 = v11;
  [v14 _activateOnDemandClientLinkToContextCollector:v15 completion:v19];
}

uint64_t sub_100171444(uint64_t a1, uint64_t a2)
{
  [*(id *)(a1 + 32) cancel];
  id v4 = (void *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    id v7 = *(void **)(a1 + 40);
    id v8 = v4;
    id v9 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [v7 count]);
    uint64_t v10 = *(void *)(a1 + 48);
    int v12 = 136315650;
    uint64_t v13 = "-[ADDeviceCircleManager getCapabilitiesAndPeersFromContextCollectorThroughOnDemandRapportConnection:]_block_invoke_2";
    __int16 v14 = 2112;
    uint64_t v15 = v9;
    __int16 v16 = 2112;
    uint64_t v17 = v10;
    _os_log_debug_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "%s #hal fetched %@ peerCapabilitiesTuples for %@.", (uint8_t *)&v12, 0x20u);
  }
  [*(id *)(a1 + 56) _cleanupOnDemandClientLinkToContextCollector:*(void *)(*(void *)(a1 + 56) + 32)];
  if (a2 == -2)
  {
    id v5 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      id v11 = *(void **)(a1 + 48);
      int v12 = 136315394;
      uint64_t v13 = "-[ADDeviceCircleManager getCapabilitiesAndPeersFromContextCollectorThroughOnDemandRapportConnection:]_block_invoke";
      __int16 v14 = 2112;
      uint64_t v15 = v11;
      _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "%s #hal timed-out fetching capabilities through #on-demand connection for %@", (uint8_t *)&v12, 0x16u);
    }
  }
  uint64_t result = *(void *)(a1 + 64);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, *(void *)(a1 + 40));
  }
  return result;
}

id sub_1001715F0(uint64_t a1)
{
  [*(id *)(a1 + 32) invokeWithSignal:-2];
  uint64_t v2 = *(void **)(a1 + 32);
  return [v2 invoke];
}

void sub_100171630(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = AFSiriLogContextDaemon;
  if (v3)
  {
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      uint64_t v8 = *(void *)(*(void *)(a1 + 32) + 32);
      *(_DWORD *)stat buf = 136315650;
      uint64_t v15 = "-[ADDeviceCircleManager getCapabilitiesAndPeersFromContextCollectorThroughOnDemandRapportConnection:]_block_invoke";
      __int16 v16 = 2112;
      uint64_t v17 = v8;
      __int16 v18 = 2112;
      id v19 = v3;
      _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "%s #hal activate #on-demand connection to context collector failed. Connection: %@, Error: %@", buf, 0x20u);
    }
    [*(id *)(a1 + 40) invoke];
  }
  else
  {
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v9 = *(void *)(*(void *)(a1 + 32) + 32);
      *(_DWORD *)stat buf = 136315394;
      uint64_t v15 = "-[ADDeviceCircleManager getCapabilitiesAndPeersFromContextCollectorThroughOnDemandRapportConnection:]_block_invoke";
      __int16 v16 = 2112;
      uint64_t v17 = v9;
      _os_log_debug_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "%s #hal sending capabilities fetch message through #on-demand connection to context collector: %@", buf, 0x16u);
    }
    id v5 = *(void **)(a1 + 32);
    id v6 = (void *)v5[4];
    id v7 = [v5 _rapportLinkMessageOptions];
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_10017184C;
    v10[3] = &unk_100507B88;
    v10[4] = *(void *)(a1 + 32);
    id v13 = *(id *)(a1 + 56);
    id v11 = *(id *)(a1 + 48);
    id v12 = *(id *)(a1 + 40);
    [v6 sendRequestToContextCollectorThroughOnDemandConnection:@"com.apple.siri.rapport-link.request.device-circle-manager" messageType:@"peers_svdCapabilities_fetch" messagePayload:&__NSDictionary0__struct options:v7 completion:v10];
  }
}

void sub_10017184C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = *(NSObject **)(*(void *)(a1 + 32) + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100171950;
  block[3] = &unk_10050D3F0;
  id v11 = v5;
  id v12 = v6;
  id v15 = *(id *)(a1 + 56);
  id v13 = *(id *)(a1 + 40);
  id v14 = *(id *)(a1 + 48);
  id v8 = v6;
  id v9 = v5;
  dispatch_async(v7, block);
}

void sub_100171950(uint64_t a1)
{
  uint64_t v2 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(void *)(a1 + 40);
    *(_DWORD *)stat buf = 136315650;
    __int16 v18 = "-[ADDeviceCircleManager getCapabilitiesAndPeersFromContextCollectorThroughOnDemandRapportConnection:]_block_invoke_2";
    __int16 v19 = 2112;
    uint64_t v20 = v8;
    __int16 v21 = 2112;
    uint64_t v22 = v9;
    _os_log_debug_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s #hal #on-demand getCapabilitiesAndPeersCompletion response: %@, error: %@", buf, 0x20u);
  }
  if (*(void *)(a1 + 40))
  {
    (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
  }
  else
  {
    id v3 = [*(id *)(a1 + 32) objectForKey:@"payload"];
    if (v3)
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        id v4 = AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)stat buf = 136315138;
          __int16 v18 = "-[ADDeviceCircleManager getCapabilitiesAndPeersFromContextCollectorThroughOnDemandRapportConnection:]_block_invoke";
          _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "%s #hal #on-demand received malformed response", buf, 0xCu);
        }

        id v3 = 0;
      }
    }
    id v5 = [v3 allKeys];
    id v11 = _NSConcreteStackBlock;
    uint64_t v12 = 3221225472;
    id v13 = sub_100171BD0;
    id v14 = &unk_100503F88;
    id v6 = v3;
    id v15 = v6;
    id v16 = *(id *)(a1 + 48);
    [v5 enumerateObjectsUsingBlock:&v11];

    id v7 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v10 = *(void *)(a1 + 48);
      *(_DWORD *)stat buf = 136315394;
      __int16 v18 = "-[ADDeviceCircleManager getCapabilitiesAndPeersFromContextCollectorThroughOnDemandRapportConnection:]_block_invoke_2";
      __int16 v19 = 2112;
      uint64_t v20 = v10;
      _os_log_debug_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "%s #hal #on-demand peerCapabilitiesTuples: %@", buf, 0x16u);
    }
    objc_msgSend(*(id *)(a1 + 56), "invoke", v11, v12, v13, v14);
  }
}

void sub_100171BD0(uint64_t a1, uint64_t a2)
{
  id v12 = [*(id *)(a1 + 32) objectForKeyedSubscript:a2];
  uint64_t v3 = [v12 objectForKeyedSubscript:@"peerData"];
  if (v3)
  {
    id v4 = (void *)v3;
    id v5 = [v12 objectForKeyedSubscript:@"deviceCapabilitiesV2"];

    if (v5)
    {
      id v6 = [v12 objectForKeyedSubscript:@"peerData"];
      id v7 = [objc_alloc((Class)AFPeerInfo) initWithDictionaryRepresentation:v6];
      uint64_t v8 = [v12 objectForKeyedSubscript:@"deviceCapabilitiesV2"];
      uint64_t v9 = sub_10026FB40(v8);
      uint64_t v10 = v9;
      if (v7 && [v9 count])
      {
        id v11 = [objc_alloc((Class)AFPeerContentTuple) initWithInfo:v7 content:v10];
        [*(id *)(a1 + 40) addObject:v11];
      }
    }
  }
}

void sub_100171DB4(uint64_t a1)
{
  id v20 = objc_alloc_init((Class)NSMutableArray);
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  id obj = [*(id *)(*(void *)(a1 + 32) + 24) activeDevices];
  id v2 = [obj countByEnumeratingWithState:&v22 objects:v32 count:16];
  if (v2)
  {
    id v4 = v2;
    uint64_t v5 = *(void *)v23;
    *(void *)&long long v3 = 136315650;
    long long v19 = v3;
    do
    {
      id v6 = 0;
      do
      {
        if (*(void *)v23 != v5) {
          objc_enumerationMutation(obj);
        }
        id v7 = *(void **)(*((void *)&v22 + 1) + 8 * (void)v6);
        uint64_t v8 = objc_msgSend(v7, "siriInfo", v19);
        uint64_t v9 = [v8 objectForKey:@"deviceCapabilitiesV2"];

        uint64_t v10 = sub_10026FB40(v9);
        id v11 = sub_10016B52C(v7, 0);
        uint64_t v12 = [*(id *)(a1 + 32) _managedPeerInfoMatchingPeerInfo:v11];
        id v13 = (void *)v12;
        if (v12) {
          id v14 = (void *)v12;
        }
        else {
          id v14 = v11;
        }
        id v15 = v14;
        id v16 = AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)stat buf = v19;
          id v27 = "-[ADDeviceCircleManager getCapabilitiesForReachableDevicesWithCompletion:]_block_invoke";
          __int16 v28 = 2112;
          id v29 = v15;
          __int16 v30 = 2112;
          long long v31 = v10;
          _os_log_debug_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "%s #hal Capabilities for %@: %@", buf, 0x20u);
          if (!v15) {
            goto LABEL_13;
          }
        }
        else if (!v15)
        {
          goto LABEL_13;
        }
        if ([v10 count])
        {
          id v17 = [objc_alloc((Class)AFPeerContentTuple) initWithInfo:v15 content:v10];
          [v20 addObject:v17];
        }
LABEL_13:

        id v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      id v18 = [obj countByEnumeratingWithState:&v22 objects:v32 count:16];
      id v4 = v18;
    }
    while (v18);
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_10017210C(id *a1)
{
  id v2 = [a1[4] _rpDeviceMatchingPeerInfo:a1[5]];
  long long v3 = v2;
  if (v2)
  {
    id v4 = [v2 siriInfo];
    uint64_t v5 = [v4 objectForKey:@"deviceCapabilitiesV2"];

    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      id v6 = sub_10026FB40(v5);
      id v7 = AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
      {
        id v13 = a1[5];
        *(_DWORD *)stat buf = 136315650;
        id v20 = "-[ADDeviceCircleManager getCapabilitiesForDevice:completion:]_block_invoke";
        __int16 v21 = 2112;
        id v22 = v13;
        __int16 v23 = 2112;
        long long v24 = v6;
        _os_log_debug_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "%s #hal Capabilities for %@: %@", buf, 0x20u);
      }
      (*((void (**)(void))a1[6] + 2))();
    }
    else
    {
      (*((void (**)(void))a1[6] + 2))();
    }
  }
  else
  {
    id v8 = [*((id *)a1[4] + 6) count];
    uint64_t v9 = AFSiriLogContextDaemon;
    BOOL v10 = os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG);
    if (v8)
    {
      if (v10)
      {
        id v14 = a1[5];
        *(_DWORD *)stat buf = 136315394;
        id v20 = "-[ADDeviceCircleManager getCapabilitiesForDevice:completion:]_block_invoke";
        __int16 v21 = 2112;
        id v22 = v14;
        _os_log_debug_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "%s #hal Unable to reach %@ directly, fetching from collector", buf, 0x16u);
      }
      id v11 = a1[4];
      id v25 = a1[5];
      uint64_t v12 = +[NSArray arrayWithObjects:&v25 count:1];
      v16[0] = _NSConcreteStackBlock;
      v16[1] = 3221225472;
      v16[2] = sub_10017241C;
      v16[3] = &unk_10050D300;
      id v17 = a1[5];
      id v18 = a1[6];
      [v11 _fetchDeviceCapabilitiesForDevices:v12 completion:v16];
    }
    else
    {
      if (v10)
      {
        id v15 = a1[5];
        *(_DWORD *)stat buf = 136315394;
        id v20 = "-[ADDeviceCircleManager getCapabilitiesForDevice:completion:]_block_invoke";
        __int16 v21 = 2112;
        id v22 = v15;
        _os_log_debug_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "%s #hal Unable to reach %@ directly", buf, 0x16u);
      }
      (*((void (**)(void))a1[6] + 2))();
    }
  }
}

void sub_10017241C(uint64_t a1, void *a2)
{
  long long v3 = *(void **)(a1 + 32);
  id v4 = a2;
  uint64_t v5 = [v3 assistantIdentifier];
  id v6 = [v4 objectForKey:v5];

  id v7 = (void *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    id v8 = v7;
    uint64_t v9 = AFPeerInfoGetCompactDescription();
    int v10 = 136315650;
    id v11 = "-[ADDeviceCircleManager getCapabilitiesForDevice:completion:]_block_invoke";
    __int16 v12 = 2112;
    id v13 = v9;
    __int16 v14 = 2112;
    id v15 = v6;
    _os_log_debug_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "%s #hal Capabilities for %@: %@", (uint8_t *)&v10, 0x20u);
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_10017274C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(unsigned char *)(v1 + 56))
  {
    if (!*(void *)(v1 + 104)
      || (+[NSDate date],
          long long v3 = objc_claimAutoreleasedReturnValue(),
          [v3 timeIntervalSinceDate:*(void *)(*(void *)(a1 + 32) + 104)],
          double v5 = v4,
          v3,
          v5 > 86400.0))
    {
      id v6 = AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
      {
        int v7 = 136315138;
        id v8 = "-[ADDeviceCircleManager reelectContextCollectorWithBestScore]_block_invoke";
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "%s #hal Resigning collector role to trigger daily re-election based on score", (uint8_t *)&v7, 0xCu);
      }
      *(unsigned char *)(*(void *)(a1 + 32) + 56) = 0;
      [*(id *)(a1 + 32) _updateClientLinkSiriInfo];
      [*(id *)(a1 + 32) _reelectCollectorDeviceForReason:5 completion:0];
    }
  }
}

id sub_100172904(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 40) removeObject:*(void *)(a1 + 40)];
}

id sub_1001729A8(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 40) addObject:*(void *)(a1 + 40)];
}

uint64_t sub_100172A80(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(v2 + 104);
  double v4 = (os_log_t *)&AFSiriLogContextDaemon;
  double v5 = AFSiriLogContextDaemon;
  BOOL v6 = os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO);
  if (v3)
  {
    if (v6)
    {
      int v7 = *(void **)(v2 + 48);
      id v8 = v5;
      *(_DWORD *)stat buf = 136315394;
      __int16 v37 = "-[ADDeviceCircleManager getContextCollectorDeviceIdentifiersWithCompletion:]_block_invoke";
      __int16 v38 = 2048;
      id v39 = [v7 count];
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "%s #hal Current collector count: %zd", buf, 0x16u);

      uint64_t v2 = *(void *)(a1 + 32);
    }
    long long v34 = 0u;
    long long v35 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    id obj = *(id *)(v2 + 48);
    id v9 = [obj countByEnumeratingWithState:&v32 objects:v44 count:16];
    if (v9)
    {
      id v11 = v9;
      uint64_t v12 = *(void *)v33;
      *(void *)&long long v10 = 136315906;
      long long v30 = v10;
      do
      {
        for (i = 0; i != v11; i = (char *)i + 1)
        {
          if (*(void *)v33 != v12) {
            objc_enumerationMutation(obj);
          }
          __int16 v14 = *(void **)(*((void *)&v32 + 1) + 8 * i);
          id v15 = objc_msgSend(*(id *)(*(void *)(a1 + 32) + 24), "localDevice", v30);
          id v16 = [v15 idsDeviceIdentifier];
          unsigned int v17 = [v14 isEqualToString:v16];

          id v18 = *(void **)(a1 + 32);
          if (v17) {
            [v18 _localPeerInfo];
          }
          else {
          long long v19 = [v18 _remotePeerInfoForIDSDeviceUniqueIdentifier:v14];
          }
          os_log_t v20 = *v4;
          if (os_log_type_enabled(*v4, OS_LOG_TYPE_INFO))
          {
            __int16 v21 = v20;
            [v19 productType];
            v23 = id v22 = v4;
            *(_DWORD *)stat buf = v30;
            __int16 v37 = "-[ADDeviceCircleManager getContextCollectorDeviceIdentifiersWithCompletion:]_block_invoke";
            __int16 v38 = 2112;
            id v39 = v14;
            __int16 v40 = 2112;
            id v41 = v23;
            __int16 v42 = 1024;
            unsigned int v43 = v17;
            _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "%s #hal Current collector: %@ (%@, isLocalDevice = %d)", buf, 0x26u);

            double v4 = v22;
          }
        }
        id v11 = [obj countByEnumeratingWithState:&v32 objects:v44 count:16];
      }
      while (v11);
    }

    if (![*(id *)(*(void *)(a1 + 32) + 48) count] && AFIsHorseman())
    {
      long long v24 = AFSiriLogContextUtility;
      if (os_log_type_enabled(AFSiriLogContextUtility, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)stat buf = 136315138;
        __int16 v37 = "-[ADDeviceCircleManager getContextCollectorDeviceIdentifiersWithCompletion:]_block_invoke";
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "%s Logging ABC for missing context collector on HomePod", buf, 0xCu);
      }
      id v25 = +[SiriCoreSymptomsReporter sharedInstance];
      id v26 = +[NSProcessInfo processInfo];
      id v27 = [v26 processIdentifier];
      [v25 reportIssueForType:@"hal" subType:@"homepod_without_context_collector" context:&__NSDictionary0__struct processIdentifier:v27 walkboutStatus:byte_100585E38];
    }
    __int16 v28 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);
  }
  else
  {
    if (v6)
    {
      *(_DWORD *)stat buf = 136315138;
      __int16 v37 = "-[ADDeviceCircleManager getContextCollectorDeviceIdentifiersWithCompletion:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "%s #hal skip fetching context collector identifiers, re-election has never occurred yet", buf, 0xCu);
    }
    __int16 v28 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);
  }
  return v28();
}

void sub_100172FA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100172FBC(uint64_t a1, void *a2, void *a3, unsigned char *a4)
{
  id v8 = a2;
  if ([a3 isEqualToString:*(void *)(a1 + 32)])
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a2);
    *a4 = 1;
  }
}

void sub_10017344C(uint64_t a1, void *a2)
{
  id v3 = a2;
  double v4 = *(NSObject **)(*(void *)(a1 + 32) + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10017351C;
  block[3] = &unk_10050E1D8;
  id v7 = v3;
  id v8 = *(id *)(a1 + 40);
  id v9 = *(id *)(a1 + 48);
  id v5 = v3;
  dispatch_async(v4, block);
}

uint64_t sub_10017351C(void *a1)
{
  uint64_t v2 = a1[4];
  id v3 = AFSiriLogContextDaemon;
  if (v2)
  {
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      uint64_t v6 = a1[5];
      int v8 = 136315650;
      id v9 = "-[ADDeviceCircleManager _activateOnDemandClientLinkToContextCollector:completion:]_block_invoke_2";
      __int16 v10 = 2112;
      uint64_t v11 = v6;
      __int16 v12 = 2112;
      uint64_t v13 = v2;
      _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "%s #hal activate #on-demand connection to context collector failed. Connection: %@, Error: %@", (uint8_t *)&v8, 0x20u);
    }
    double v4 = *(uint64_t (**)(void))(a1[6] + 16);
  }
  else
  {
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v7 = a1[5];
      int v8 = 136315394;
      id v9 = "-[ADDeviceCircleManager _activateOnDemandClientLinkToContextCollector:completion:]_block_invoke";
      __int16 v10 = 2112;
      uint64_t v11 = v7;
      _os_log_debug_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "%s #hal activated #on-demand connection: %@", (uint8_t *)&v8, 0x16u);
    }
    double v4 = *(uint64_t (**)(void))(a1[6] + 16);
  }
  return v4();
}

void sub_100173720(id a1, ADRapportLinkConfigurationMutating *a2)
{
  uint64_t v2 = a2;
  id v3 = +[ADRapportLinkDiscoveryOptions newWithBuilder:&stru_100503EF0];
  [(ADRapportLinkConfigurationMutating *)v2 setDiscoveryOptions:v3];

  id v4 = +[ADRapportLinkConnectionOptions newWithBuilder:&stru_100503F10];
  [(ADRapportLinkConfigurationMutating *)v2 setConnectionOptions:v4];

  id v5 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    int v6 = 136315394;
    uint64_t v7 = "-[ADDeviceCircleManager _setUpOnDemandClientLinkToContextCollector]_block_invoke";
    __int16 v8 = 2112;
    id v9 = v2;
    _os_log_debug_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "%s #hal #on-demand connectionOptions: %@", (uint8_t *)&v6, 0x16u);
  }
}

void sub_100173834(id a1, ADRapportLinkConnectionOptionsMutating *a2)
{
}

void sub_100173840(id a1, ADRapportLinkDiscoveryOptionsMutating *a2)
{
  uint64_t v2 = a2;
  [(ADRapportLinkDiscoveryOptionsMutating *)v2 setIncludesHome:2];
  [(ADRapportLinkDiscoveryOptionsMutating *)v2 setIncludesFamily:0];
}

void sub_100173900(uint64_t a1)
{
  objc_msgSend(*(id *)(*(void *)(a1 + 32) + 24), "addListener:");
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = (void *)v2[3];
  id v4 = [v2 _rapportLinkMessageOptions];
  [v3 registerRequestID:@"com.apple.siri.rapport-link.request.device-circle-manager" options:v4];

  [*(id *)(*(void *)(a1 + 32) + 24) setRequestHandler:*(void *)(a1 + 32) forRequestID:@"com.apple.siri.rapport-link.request.device-circle-manager" messageType:@"device_capabilities_fetch"];
  [*(id *)(*(void *)(a1 + 32) + 24) setRequestHandler:*(void *)(a1 + 32) forRequestID:@"com.apple.siri.rapport-link.request.device-circle-manager" messageType:@"execute_command_request"];
  if (+[AFFeatureFlags isCrossDeviceTVControlFromWatchEnabled](AFFeatureFlags, "isCrossDeviceTVControlFromWatchEnabled"))[*(id *)(*(void *)(a1 + 32) + 24) setRequestHandler:*(void *)(a1 + 32) forRequestID:@"com.apple.siri.rapport-link.request.device-circle-manager" messageType:@"peers_svdCapabilities_fetch"]; {
  id v5 = *(void **)(a1 + 32);
  }
  int v6 = (void *)v5[3];
  uint64_t v7 = [v5 _rapportLinkMessageOptions];
  [v6 registerRequestID:@"com.apple.siri.mux.token.exchange" options:v7];

  [*(id *)(*(void *)(a1 + 32) + 24) setRequestHandler:*(void *)(a1 + 32) forRequestID:@"com.apple.siri.mux.token.exchange" messageType:@"siriMux_tokenExchange"];
  __int16 v8 = *(void **)(a1 + 32);
  id v9 = +[ADArbitrationFeedbackManager sharedManager];
  [v8 _registerRequestHandlerForRequestId:@"com.apple.siri.rapport-link.request.device-circle-manager" messageType:@"arbitration_info_push" handler:v9];

  __int16 v10 = [*(id *)(*(void *)(a1 + 32) + 216) keyEnumerator];
  uint64_t v11 = [v10 allObjects];
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  v16[2] = sub_100173B6C;
  v16[3] = &unk_100509580;
  void v16[4] = *(void *)(a1 + 32);
  [v11 enumerateObjectsUsingBlock:v16];

  objc_initWeak(&location, *(id *)(a1 + 32));
  __int16 v12 = *(void **)(*(void *)(a1 + 32) + 24);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_100173CD4;
  v13[3] = &unk_100507F10;
  objc_copyWeak(&v14, &location);
  void v13[4] = *(void *)(a1 + 32);
  [v12 activateWithCompletion:v13];
  objc_destroyWeak(&v14);
  objc_destroyWeak(&location);
}

void sub_100173B50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100173B6C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 componentsSeparatedByString:@"/"];
  id v5 = [v4 firstObject];
  int v6 = [v4 lastObject];
  uint64_t v7 = [*(id *)(*(void *)(a1 + 32) + 216) objectForKey:v3];

  if ([v5 length])
  {
    if ([v6 length])
    {
      if (v7)
      {
        [*(id *)(*(void *)(a1 + 32) + 24) setRequestHandler:*(void *)(a1 + 32) forRequestID:v5 messageType:v6];
        __int16 v8 = AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
        {
          int v9 = 136315650;
          __int16 v10 = "-[ADDeviceCircleManager _setupClientLink]_block_invoke_2";
          __int16 v11 = 2112;
          __int16 v12 = v5;
          __int16 v13 = 2112;
          id v14 = v6;
          _os_log_debug_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "%s #myriad #feedback registered handler requestId:%@, messageType:%@", (uint8_t *)&v9, 0x20u);
        }
      }
    }
  }
}

void sub_100173CD4(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    id v4 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      int v8 = 136315394;
      int v9 = "-[ADDeviceCircleManager _setupClientLink]_block_invoke";
      __int16 v10 = 2112;
      id v11 = v3;
      _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "%s #hal Error activating: %@", (uint8_t *)&v8, 0x16u);
    }
  }
  else
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    if (WeakRetained)
    {
      int v6 = WeakRetained;
      [WeakRetained _updateCollectorElectionVersion];
      if ([v6 _isLocalDeviceCollectorCandidate]) {
        [v6 _updateStationaryScore];
      }
      [v6 _updateSiriInfoWithDeviceCapabilities];
      os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 128));
      uint64_t v7 = [*(id *)(a1 + 32) _localPeerData];
      os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 32) + 128));
      [v6 _updateSiriInfoWithLocalPeerData:v7];
    }
  }
}

id sub_100173E88(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _updatePersonalRequestsEnabledAccessories];
}

id sub_100174540(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _updateAssistantIdentifierAndSharedUserIdentifier];
}

void sub_100174548(uint64_t a1)
{
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  v2[2] = sub_1001746EC;
  v2[3] = &unk_100503E50;
  uint64_t v1 = *(void **)(a1 + 32);
  id v3 = *(id *)(a1 + 40);
  [v1 getCurrentAccessoryInfoWithCompletion:v2];
}

void sub_1001745D0(uint64_t a1, unint64_t a2)
{
  id v3 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", @"Queue %s did not respond to watchdog and is likely blocked.", dispatch_queue_get_label(*(dispatch_queue_t *)(a1 + 32)));
  id v4 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)stat buf = 136315394;
    uint64_t v7 = "-[ADDeviceCircleManager _initWithQueue:rapportLink:]_block_invoke_5";
    __int16 v8 = 2112;
    id v9 = v3;
    _os_log_fault_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "%s %@", buf, 0x16u);
  }
  int v5 = AFIsInternalInstall();
  if (a2 <= 3 && v5) {
    WriteStackshotReport_async();
  }
}

void sub_1001746EC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  int v5 = v4[1];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  void v7[2] = sub_100174798;
  v7[3] = &unk_10050E160;
  __int16 v8 = v4;
  id v9 = v3;
  id v6 = v3;
  dispatch_async(v5, v7);
}

id sub_100174798(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _updateCurrentAccessoryInfo:*(void *)(a1 + 40)];
}

void sub_100174928(id a1, ADRapportLinkConfigurationMutating *a2)
{
  uint64_t v2 = a2;
  id v3 = +[ADRapportLinkDiscoveryOptions newWithBuilder:&stru_100503E90];
  [(ADRapportLinkConfigurationMutating *)v2 setDiscoveryOptions:v3];

  id v4 = +[ADRapportLinkTransportOptions newWithBuilder:&stru_100503EB0];
  [(ADRapportLinkConfigurationMutating *)v2 setTransportOptions:v4];
}

void sub_1001749BC(id a1, ADRapportLinkTransportOptionsMutating *a2)
{
  uint64_t v2 = a2;
  if (_AFPreferencesBLECompanionConnectionsEnabled()) {
    [(ADRapportLinkTransportOptionsMutating *)v2 setAllowsBLE:2];
  }
  if (AFSupportsPairedDevice()) {
    [(ADRapportLinkTransportOptionsMutating *)v2 setAllowsBTPipe:2];
  }
}

void sub_100174A1C(id a1, ADRapportLinkDiscoveryOptionsMutating *a2)
{
  uint64_t v2 = a2;
  [(ADRapportLinkDiscoveryOptionsMutating *)v2 setIncludesHome:2];
  [(ADRapportLinkDiscoveryOptionsMutating *)v2 setIncludesFamily:0];
  [(ADRapportLinkDiscoveryOptionsMutating *)v2 setIncludesRemoraDevices:2];
}

void sub_100174B14(uint64_t a1)
{
  uint64_t v2 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  dispatch_queue_t v6 = dispatch_queue_create("ADDeviceCircleManager", v2);

  id v3 = [*(id *)(a1 + 32) _rapportLinkWithQueue:v6];
  id v4 = [objc_alloc(*(Class *)(a1 + 32)) _initWithQueue:v6 rapportLink:v3];
  int v5 = (void *)qword_100585D00;
  qword_100585D00 = (uint64_t)v4;
}

uint64_t sub_100174BB8(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  int v5 = v4;
  uint64_t v6 = 0;
  if (v3 && v4)
  {
    if (sub_100174C8C(v3, v4))
    {
      uint64_t v6 = 1;
    }
    else
    {
      unsigned __int8 v11 = 0;
      uint64_t v7 = sub_10016A938(v3, &v11);
      unsigned __int8 v10 = 0;
      __int16 v8 = sub_10016A938(v5, &v10);
      uint64_t v6 = 0;
      if (v11 | v10) {
        uint64_t v6 = sub_100174C8C(v7, v8);
      }
    }
  }

  return v6;
}

uint64_t sub_100174C8C(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  int v5 = [v3 idsDeviceUniqueIdentifier];
  uint64_t v6 = [v4 idsDeviceUniqueIdentifier];
  id v7 = v5;
  id v8 = v6;
  id v9 = v8;
  if (v7 == v8)
  {
    unsigned __int8 v10 = v7 != 0;
  }
  else
  {
    if (!v7 || !v8)
    {

      goto LABEL_9;
    }
    unsigned __int8 v10 = [v7 isEqual:v8];
  }

  if (v10) {
    goto LABEL_23;
  }
LABEL_9:
  unsigned __int8 v11 = [v3 rapportEffectiveIdentifier];
  __int16 v12 = [v4 rapportEffectiveIdentifier];
  id v13 = v11;
  id v14 = v12;
  id v15 = v14;
  if (v13 == v14)
  {
    unsigned __int8 v16 = v13 != 0;
  }
  else
  {
    if (!v13 || !v14)
    {

      goto LABEL_17;
    }
    unsigned __int8 v16 = [v13 isEqual:v14];
  }

  if (v16) {
    goto LABEL_23;
  }
LABEL_17:
  unsigned int v17 = [v3 homeKitAccessoryIdentifier];
  id v18 = [v4 homeKitAccessoryIdentifier];
  id v19 = v17;
  id v20 = v18;
  __int16 v21 = v20;
  if (v19 == v20)
  {
    unsigned __int8 v22 = v19 != 0;
  }
  else
  {
    if (!v19 || !v20)
    {

      goto LABEL_25;
    }
    unsigned __int8 v22 = [v19 isEqual:v20];
  }

  if (v22)
  {
LABEL_23:
    uint64_t v23 = 1;
    goto LABEL_31;
  }
LABEL_25:
  long long v24 = [v3 assistantIdentifier];
  id v25 = [v24 uppercaseString];
  id v26 = [v4 assistantIdentifier];
  id v27 = [v26 uppercaseString];
  id v28 = v25;
  id v29 = v27;
  long long v30 = v29;
  if (v28 == v29)
  {
    uint64_t v23 = v28 != 0;
  }
  else
  {
    uint64_t v23 = 0;
    if (v28 && v29) {
      uint64_t v23 = (uint64_t)[v28 isEqual:v29];
    }
  }

LABEL_31:
  return v23;
}

id sub_100174F00(void *a1)
{
  uint64_t v1 = sub_10016BC7C(a1);
  uint64_t v2 = [v1 assistantIdentifier];
  id v3 = [v2 uppercaseString];

  return v3;
}

id sub_100174F64(void *a1)
{
  id v1 = a1;
  if ([v1 length])
  {
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_100175040;
    v5[3] = &unk_10050DB08;
    id v6 = v1;
    id v2 = +[AFPeerInfo newWithBuilder:v5];
    id v3 = sub_10016A938(v2, 0);
  }
  else
  {
    id v3 = 0;
  }

  return v3;
}

id sub_100175040(uint64_t a1, void *a2)
{
  return [a2 setAssistantIdentifier:*(void *)(a1 + 32)];
}

id sub_10017504C(void *a1)
{
  id v1 = a1;
  id v2 = [v1 assistantIdentifier];
  if (![v2 length])
  {
    id v3 = sub_10016A938(v1, 0);
    uint64_t v4 = [v3 assistantIdentifier];

    id v2 = (void *)v4;
  }

  return v2;
}

id sub_1001750D0(void *a1)
{
  id v1 = a1;
  id v2 = [v1 idsDeviceUniqueIdentifier];
  if (![v2 length])
  {
    id v3 = sub_10016A938(v1, 0);
    uint64_t v4 = [v3 idsDeviceUniqueIdentifier];

    id v2 = (void *)v4;
  }

  return v2;
}

void sub_10017584C(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if (!v4)
  {
    __int16 v36 = +[NSAssertionHandler currentHandler];
    __int16 v37 = +[NSString stringWithUTF8String:"_ADPBProxyTCPInfoMetrics *ADConnectionTCPInfoMetricsCreateProtocolBufferProxy(SiriCoreConnectionTCPInfoMetrics *__strong)"];
    [v36 handleFailureInFunction:v37, @"ADConnectionTCPInfoMetricsUtilities.m", 106, @"Invalid parameter not satisfying: %@", @"tcpInfoMetrics != nil" file lineNumber description];
  }
  __int16 v38 = objc_alloc_init(_ADPBProxyTCPInfoMetrics);
  int v5 = [v4 interfaceName];
  if (v5) {
    [(_ADPBProxyTCPInfoMetrics *)v38 setInterfaceName:v5];
  }

  id v6 = [v4 rttCurrent];
  id v7 = v6;
  if (v6) {
    -[_ADPBProxyTCPInfoMetrics setRttCurrent:](v38, "setRttCurrent:", [v6 unsignedIntValue]);
  }

  id v8 = [v4 rttSmoothed];
  id v9 = v8;
  if (v8) {
    -[_ADPBProxyTCPInfoMetrics setRttSmoothed:](v38, "setRttSmoothed:", [v8 unsignedIntValue]);
  }

  unsigned __int8 v10 = [v4 rttVariance];
  unsigned __int8 v11 = v10;
  if (v10) {
    -[_ADPBProxyTCPInfoMetrics setRttVariance:](v38, "setRttVariance:", [v10 unsignedIntValue]);
  }

  __int16 v12 = [v4 rttBest];
  id v13 = v12;
  if (v12) {
    -[_ADPBProxyTCPInfoMetrics setRttBest:](v38, "setRttBest:", [v12 unsignedIntValue]);
  }

  id v14 = [v4 packetsSent];
  id v15 = v14;
  if (v14) {
    -[_ADPBProxyTCPInfoMetrics setTxPackets:](v38, "setTxPackets:", [v14 unsignedLongLongValue]);
  }

  unsigned __int8 v16 = [v4 bytesSent];
  unsigned int v17 = v16;
  if (v16) {
    -[_ADPBProxyTCPInfoMetrics setTxBytes:](v38, "setTxBytes:", [v16 unsignedLongLongValue]);
  }

  id v18 = [v4 bytesRetransmitted];
  id v19 = v18;
  if (v18) {
    -[_ADPBProxyTCPInfoMetrics setTxRetransmitBytes:](v38, "setTxRetransmitBytes:", [v18 unsignedLongLongValue]);
  }

  id v20 = [v4 bytesUnacked];
  __int16 v21 = v20;
  if (v20) {
    -[_ADPBProxyTCPInfoMetrics setTxUnacked:](v38, "setTxUnacked:", [v20 unsignedLongLongValue]);
  }

  unsigned __int8 v22 = [v4 packetsReceived];
  uint64_t v23 = v22;
  if (v22) {
    -[_ADPBProxyTCPInfoMetrics setRxPackets:](v38, "setRxPackets:", [v22 unsignedLongLongValue]);
  }

  long long v24 = [v4 bytesReceived];
  id v25 = v24;
  if (v24) {
    -[_ADPBProxyTCPInfoMetrics setRxBytes:](v38, "setRxBytes:", [v24 unsignedLongLongValue]);
  }

  id v26 = [v4 duplicateBytesReceived];
  id v27 = v26;
  if (v26) {
    -[_ADPBProxyTCPInfoMetrics setRxDuplicateBytes:](v38, "setRxDuplicateBytes:", [v26 unsignedLongLongValue]);
  }

  id v28 = [v4 outOfOrderBytesReceived];
  id v29 = v28;
  if (v28) {
    -[_ADPBProxyTCPInfoMetrics setRxOooBytes:](v38, "setRxOooBytes:", [v28 unsignedLongLongValue]);
  }

  long long v30 = [v4 sendBandwidth];
  long long v31 = v30;
  if (v30) {
    -[_ADPBProxyTCPInfoMetrics setSndBandwidth:](v38, "setSndBandwidth:", [v30 unsignedLongLongValue]);
  }

  long long v32 = [v4 synRetransmits];
  long long v33 = v32;
  if (v32) {
    -[_ADPBProxyTCPInfoMetrics setSynRetransmits:](v38, "setSynRetransmits:", [v32 unsignedIntValue]);
  }

  long long v34 = [v4 tfoSynDataAcked];
  long long v35 = v34;
  if (v34) {
    -[_ADPBProxyTCPInfoMetrics setTfoSynDataAcked:](v38, "setTfoSynDataAcked:", [v34 unsignedIntValue]);
  }

  [*(id *)(a1 + 32) addTcpInfoMetrics:v38];
}

void sub_100176EF0(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  int v5 = [v3 timer];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  void v7[2] = sub_100176FB0;
  v7[3] = &unk_10050DEE8;
  id v6 = *(id *)(a1 + 40);
  void v7[4] = *(void *)(a1 + 32);
  id v8 = v6;
  [v4 setTimer:v5 completionHandler:v7];
}

void sub_100176FB0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  uint64_t v5 = *(void *)(a1 + 40);
  if (v5)
  {
    id v7 = v3;
    if (v3)
    {
      (*(void (**)(uint64_t, void, id))(v5 + 16))(v5, 0, v3);
    }
    else
    {
      id v6 = [*(id *)(a1 + 32) createResponse];
      (*(void (**)(uint64_t, void *, void))(v5 + 16))(v5, v6, 0);
    }
    id v4 = v7;
  }
}

void sub_1001770E0(uint64_t a1, void *a2)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100177174;
  v5[3] = &unk_100504380;
  id v4 = *(id *)(a1 + 40);
  void v5[4] = *(void *)(a1 + 32);
  id v6 = v4;
  [a2 getTimerWithCompletionHandler:v5];
}

void sub_100177174(uint64_t a1, void *a2, void *a3)
{
  id v8 = a2;
  id v5 = a3;
  uint64_t v6 = *(void *)(a1 + 40);
  if (v6)
  {
    if (v8)
    {
      id v7 = [*(id *)(a1 + 32) createResponseWithTimer:v8];
      (*(void (**)(uint64_t, void *, void))(v6 + 16))(v6, v7, 0);
    }
    else
    {
      (*(void (**)(uint64_t, void, id))(v6 + 16))(v6, 0, v5);
    }
  }
}

void sub_1001772B4(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  id v5 = [v3 timerURLs];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  void v7[2] = sub_100177374;
  v7[3] = &unk_10050DEE8;
  id v6 = *(id *)(a1 + 40);
  void v7[4] = *(void *)(a1 + 32);
  id v8 = v6;
  [v4 dismissTimersWithURLs:v5 completionHandler:v7];
}

void sub_100177374(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  uint64_t v5 = *(void *)(a1 + 40);
  if (v5)
  {
    id v7 = v3;
    if (v3)
    {
      (*(void (**)(uint64_t, void, id))(v5 + 16))(v5, 0, v3);
    }
    else
    {
      id v6 = [*(id *)(a1 + 32) createResponse];
      (*(void (**)(uint64_t, void *, void))(v5 + 16))(v5, v6, 0);
    }
    id v4 = v7;
  }
}

void sub_100177764(uint64_t a1)
{
  id v2 = objc_opt_new();
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  id v3 = *(id *)(a1 + 32);
  id v4 = [v3 countByEnumeratingWithState:&v25 objects:v34 count:16];
  if (v4)
  {
    id v6 = v4;
    uint64_t v7 = *(void *)v26;
    *(void *)&long long v5 = 136315394;
    long long v20 = v5;
    do
    {
      for (i = 0; i != v6; i = (char *)i + 1)
      {
        if (*(void *)v26 != v7) {
          objc_enumerationMutation(v3);
        }
        id v9 = *(void **)(*((void *)&v25 + 1) + 8 * i);
        unsigned __int8 v10 = AFSiriLogContextIDS;
        if (os_log_type_enabled(AFSiriLogContextIDS, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)stat buf = v20;
          long long v31 = "-[ADPeerCloudService service:devicesChanged:]_block_invoke";
          __int16 v32 = 2112;
          long long v33 = v9;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "%s device: %@", buf, 0x16u);
        }
        unsigned __int8 v11 = objc_msgSend(v9, "uniqueIDOverride", v20);
        if ([v11 length])
        {
          if (!v11) {
            goto LABEL_14;
          }
        }
        else
        {
          uint64_t v12 = [v9 uniqueID];

          unsigned __int8 v11 = (void *)v12;
          if (!v12) {
            goto LABEL_14;
          }
        }
        [v2 addObject:v11];
        if (([*(id *)(*(void *)(a1 + 40) + 80) containsObject:v11] & 1) == 0) {
          [*(id *)(*(void *)(a1 + 40) + 80) addObject:v11];
        }
LABEL_14:
      }
      id v6 = [v3 countByEnumeratingWithState:&v25 objects:v34 count:16];
    }
    while (v6);
  }

  [*(id *)(*(void *)(a1 + 40) + 80) intersectSet:v2];
  id v13 = objc_alloc_init((Class)NSMutableArray);
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  id v14 = *(id *)(*(void *)(a1 + 40) + 88);
  id v15 = [v14 countByEnumeratingWithState:&v21 objects:v29 count:16];
  if (v15)
  {
    id v16 = v15;
    uint64_t v17 = *(void *)v22;
    do
    {
      for (j = 0; j != v16; j = (char *)j + 1)
      {
        if (*(void *)v22 != v17) {
          objc_enumerationMutation(v14);
        }
        uint64_t v19 = *(void *)(*((void *)&v21 + 1) + 8 * (void)j);
        if (([v2 containsObject:v19] & 1) == 0) {
          [v13 addObject:v19];
        }
      }
      id v16 = [v14 countByEnumeratingWithState:&v21 objects:v29 count:16];
    }
    while (v16);
  }

  [*(id *)(*(void *)(a1 + 40) + 88) removeObjectsForKeys:v13];
}

id sub_100177F50(int a1)
{
  if ((a1 - 1) > 5)
  {
    id v2 = 0;
  }
  else
  {
    id v2 = objc_opt_class();
  }
  return v2;
}

void sub_1001785AC(uint64_t a1, void *a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 56))
  {
    long long v5 = *(void **)(a1 + 32);
    uint64_t v6 = *(void *)(a1 + 40);
    id v7 = a2;
    id v8 = objc_msgSend(objc_alloc((Class)NSSet), "initWithObjects:", *(void *)(a1 + 48), 0);
    [v5 _sendProto:v7 ofType:a3 originalRequestId:v6 toPeers:v8 responseType:0xFFFFLL completion:0];
  }
}

void sub_100178934(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = AFSiriLogContextIDS;
  if (v6)
  {
    if (os_log_type_enabled(AFSiriLogContextIDS, OS_LOG_TYPE_ERROR))
    {
      int v11 = 136315394;
      uint64_t v12 = "-[ADPeerCloudService _handleRemoteExecution:peer:completion:]_block_invoke";
      __int16 v13 = 2112;
      id v14 = v6;
      _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "%s error executing remote command: %@", (uint8_t *)&v11, 0x16u);
    }
    uint64_t v8 = *(void *)(a1 + 32);
    if (v8) {
      (*(void (**)(uint64_t, void, uint64_t, id))(v8 + 16))(v8, 0, 0xFFFFLL, v6);
    }
  }
  else
  {
    if (os_log_type_enabled(AFSiriLogContextIDS, OS_LOG_TYPE_INFO))
    {
      int v11 = 136315394;
      uint64_t v12 = "-[ADPeerCloudService _handleRemoteExecution:peer:completion:]_block_invoke";
      __int16 v13 = 2112;
      id v14 = v5;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "%s got command response: %@", (uint8_t *)&v11, 0x16u);
    }
    id v9 = objc_alloc_init(_ADPBDeviceExecuteOnRemoteResponse);
    unsigned __int8 v10 = [v5 plistData];
    [(_ADPBDeviceExecuteOnRemoteResponse *)v9 setContent:v10];

    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
}

void sub_100178DD4(uint64_t a1, char a2)
{
  id v4 = *(NSObject **)(*(void *)(a1 + 32) + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100178F18;
  block[3] = &unk_10050CA08;
  id v6 = *(id *)(a1 + 40);
  char v8 = a2;
  id v7 = *(id *)(a1 + 48);
  dispatch_async(v4, block);
}

void sub_100178E8C(uint64_t a1)
{
  id v3 = objc_alloc_init(_ADPBDeviceStartRemoteResponse);
  id v2 = [*(id *)(a1 + 32) firstObject];
  -[_ADPBDeviceStartRemoteResponse setSuccess:](v3, "setSuccess:", [v2 BOOLValue]);

  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_100178F18(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 48)];
  [v2 addObject:v3];

  id v4 = *(NSObject **)(a1 + 40);
  dispatch_group_leave(v4);
}

void sub_100179028(void *a1)
{
  id v2 = (const void *)a1[5];
  id v3 = *(NSMapTable **)(a1[4] + 48);
  if (v2)
  {
    if (!v3)
    {
      uint64_t v4 = +[ADPeerCloudService _pointerToBlockMap];
      uint64_t v5 = a1[4];
      id v6 = *(void **)(v5 + 48);
      *(void *)(v5 + 48) = v4;

      id v2 = (const void *)a1[5];
      id v3 = *(NSMapTable **)(a1[4] + 48);
    }
    id v7 = (const void *)a1[6];
    NSMapInsert(v3, v7, v2);
  }
  else if (v3)
  {
    char v8 = (const void *)a1[6];
    NSMapRemove(v3, v8);
  }
}

void sub_100179188(id a1, AFRequestInfo *a2, ADPeerInfo *a3, id a4)
{
  id v6 = a2;
  id v7 = a3;
  id v8 = a4;
  id v9 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)stat buf = 136315650;
    id v15 = "-[ADPeerCloudService startListeningForRemote]_block_invoke";
    __int16 v16 = 2112;
    uint64_t v17 = v6;
    __int16 v18 = 2112;
    uint64_t v19 = v7;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "%s %@ %@", buf, 0x20u);
  }
  unsigned __int8 v10 = +[ADCommandCenter sharedCommandCenter];
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_1001792F8;
  v12[3] = &unk_10050CF78;
  id v13 = v8;
  id v11 = v8;
  [v10 handleExternalActivationRequest:v6 completion:v12];
}

uint64_t sub_1001792F8(uint64_t a1, int a2)
{
  uint64_t v4 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v6 = 136315394;
    id v7 = "-[ADPeerCloudService startListeningForRemote]_block_invoke";
    __int16 v8 = 1024;
    int v9 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%s Request success %d", (uint8_t *)&v6, 0x12u);
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1001796A8(uint64_t a1)
{
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_100179814;
  v13[3] = &unk_1005044B8;
  id v2 = *(id *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(void **)(a1 + 48);
  id v14 = v2;
  uint64_t v15 = v3;
  id v5 = v4;
  uint64_t v6 = *(void *)(a1 + 72);
  id v16 = v5;
  uint64_t v19 = v6;
  id v17 = *(id *)(a1 + 56);
  id v18 = *(id *)(a1 + 64);
  id v7 = objc_retainBlock(v13);
  int v8 = AFSupportsAirPlayEndpointRoute();
  uint64_t v9 = *(void *)(a1 + 40);
  if (v8 && *(unsigned char *)(v9 + 72))
  {
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_100179980;
    v11[3] = &unk_10050E188;
    unsigned __int8 v10 = v7;
    void v11[4] = *(void *)(a1 + 40);
    id v12 = v10;
    [(id)v9 _updateAirPlayRouteIdentifierWithCompletion:v11];
  }
  else
  {
    ((void (*)(void *, void))v7[2])(v7, *(void *)(v9 + 64));
  }
}

void sub_100179814(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = objc_alloc_init(_ADPBDeviceExecuteOnRemoteRequest);
  [(_ADPBDeviceExecuteOnRemoteRequest *)v4 setContent:*(void *)(a1 + 32)];
  id v5 = [*(id *)(*(void *)(a1 + 40) + 16) firstRoutableInternetDestinationForSelf];
  [(_ADPBDeviceExecuteOnRemoteRequest *)v4 setSourceIDSFirstRoutableDestination:v5];

  [(_ADPBDeviceExecuteOnRemoteRequest *)v4 setSourceAirplayId:v3];
  uint64_t v6 = +[ADAccount activeAccount];
  id v7 = [v6 assistantIdentifier];
  [(_ADPBDeviceExecuteOnRemoteRequest *)v4 setAssistantId:v7];

  int v8 = *(void **)(a1 + 40);
  uint64_t v9 = +[NSSet setWithObject:*(void *)(a1 + 48)];
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_100179998;
  v10[3] = &unk_100504490;
  uint64_t v13 = *(void *)(a1 + 72);
  id v11 = *(id *)(a1 + 56);
  id v12 = *(id *)(a1 + 64);
  [v8 _sendProto:v4 ofType:5 toPeers:v9 responseType:6 completion:v10];
}

uint64_t sub_100179980(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(*(void *)(a1 + 32) + 64));
}

void sub_100179998(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  mach_absolute_time();
  uint64_t Milliseconds = AFMachAbsoluteTimeGetMilliseconds();
  int v8 = (void *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v9 = Milliseconds - a1[6];
    unsigned __int8 v10 = (void *)a1[4];
    id v11 = v8;
    id v12 = +[NSNumber numberWithUnsignedLongLong:v9];
    *(_DWORD *)stat buf = 136315906;
    long long v30 = "-[ADPeerCloudService startRemoteSerialzedCommandExecution:onPeer:allowsRelay:allowFallbackOnAWDL:executionCont"
          "ext:completion:]_block_invoke_3";
    __int16 v31 = 2112;
    id v32 = v10;
    __int16 v33 = 2112;
    long long v34 = v12;
    __int16 v35 = 2112;
    id v36 = v6;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "%s #hal1 (%@,) proto response received in %@ ms, error: %@", buf, 0x2Au);
  }
  if (v6)
  {
    uint64_t v13 = AFSiriLogContextIDS;
    if (os_log_type_enabled(AFSiriLogContextIDS, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)stat buf = 136315394;
      long long v30 = "-[ADPeerCloudService startRemoteSerialzedCommandExecution:onPeer:allowsRelay:allowFallbackOnAWDL:executionCo"
            "ntext:completion:]_block_invoke";
      __int16 v31 = 2112;
      id v32 = v6;
      _os_log_error_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "%s error: %@", buf, 0x16u);
    }
    (*(void (**)(void))(a1[5] + 16))();
  }
  else
  {
    long long v26 = 0u;
    long long v27 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    id v14 = v5;
    id v15 = [v14 countByEnumeratingWithState:&v24 objects:v28 count:16];
    if (v15)
    {
      id v16 = v15;
      uint64_t v17 = *(void *)v25;
      while (2)
      {
        id v18 = 0;
        do
        {
          if (*(void *)v25 != v17) {
            objc_enumerationMutation(v14);
          }
          uint64_t v19 = objc_msgSend(*(id *)(*((void *)&v24 + 1) + 8 * (void)v18), "proto", (void)v24);
          long long v20 = v19;
          if (v19 && [v19 hasContent])
          {
            long long v22 = [v20 content];
            long long v23 = +[NSDictionary dictionaryWithPlistData:v22];

            (*(void (**)(void))(a1[5] + 16))();
            goto LABEL_18;
          }

          id v18 = (char *)v18 + 1;
        }
        while (v16 != v18);
        id v16 = [v14 countByEnumeratingWithState:&v24 objects:v28 count:16];
        if (v16) {
          continue;
        }
        break;
      }
    }

    uint64_t v21 = a1[5];
    id v14 = +[ADPeerCloudService _unexpectedMessageError];
    (*(void (**)(uint64_t, void, id))(v21 + 16))(v21, 0, v14);
LABEL_18:
  }
}

uint64_t sub_100179EFC(uint64_t a1, void *a2)
{
  id v3 = [a2 allValues];
  uint64_t v4 = [v3 firstObject];
  [v4 BOOLValue];

  id v5 = *(uint64_t (**)(void))(*(void *)(a1 + 32) + 16);
  return v5();
}

void sub_10017A1E4(uint64_t a1)
{
  id v2 = objc_alloc_init(_ADPBDeviceStartRemoteRequest);
  [(_ADPBDeviceStartRemoteRequest *)v2 _ad_setRequestInfo:*(void *)(a1 + 32)];
  id v3 = *(void **)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 48);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10017A2A8;
  v5[3] = &unk_100504468;
  id v6 = *(id *)(a1 + 56);
  [v3 _sendProto:v2 ofType:3 toPeers:v4 responseType:4 completion:v5];
}

void sub_10017A2A8(uint64_t a1, void *a2, void *a3)
{
  id v4 = a2;
  id v5 = a3;
  id v6 = AFSiriLogContextIDS;
  if (os_log_type_enabled(AFSiriLogContextIDS, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)stat buf = 136315650;
    long long v25 = "-[ADPeerCloudService _startRemoteRequest:onPeers:completion:]_block_invoke_2";
    __int16 v26 = 2112;
    id v27 = v4;
    __int16 v28 = 2114;
    id v29 = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "%s %@ %{public}@", buf, 0x20u);
  }
  id v7 = objc_msgSend(objc_alloc((Class)NSMutableDictionary), "initWithCapacity:", objc_msgSend(v4, "count"));
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  id v8 = v4;
  id v9 = [v8 countByEnumeratingWithState:&v19 objects:v23 count:16];
  if (v9)
  {
    id v10 = v9;
    uint64_t v11 = *(void *)v20;
    do
    {
      for (i = 0; i != v10; i = (char *)i + 1)
      {
        if (*(void *)v20 != v11) {
          objc_enumerationMutation(v8);
        }
        uint64_t v13 = *(void **)(*((void *)&v19 + 1) + 8 * i);
        id v14 = [v13 proto];
        id v15 = v14;
        if (v14)
        {
          id v16 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [v14 success]);
          uint64_t v17 = [v13 peer];
          [v7 setObject:v16 forKey:v17];
        }
      }
      id v10 = [v8 countByEnumeratingWithState:&v19 objects:v23 count:16];
    }
    while (v10);
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10017A7A0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(NSObject **)(*(void *)(a1 + 32) + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10017A934;
  block[3] = &unk_10050DCB8;
  id v7 = *(id *)(a1 + 40);
  id v8 = v3;
  id v9 = *(id *)(a1 + 48);
  id v5 = v3;
  dispatch_async(v4, block);
}

void sub_10017A86C(uint64_t a1)
{
  if ([*(id *)(a1 + 32) count])
  {
    id v4 = [*(id *)(a1 + 32) firstObject];
    id v2 = objc_alloc_init(_ADPBDeviceSetDataRequest);
    [(_ADPBDeviceSetDataRequest *)v2 _ad_setData:v4];
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
  else
  {
    uint64_t v3 = *(void *)(a1 + 40);
    id v4 = +[ADPeerCloudService _unexpectedMessageError];
    (*(void (**)(uint64_t, void, uint64_t))(v3 + 16))(v3, 0, 0xFFFFLL);
  }
}

void sub_10017A934(uint64_t a1)
{
  [*(id *)(a1 + 32) addObject:*(void *)(a1 + 40)];
  id v2 = *(NSObject **)(a1 + 48);
  dispatch_group_leave(v2);
}

void sub_10017AA1C(void *a1)
{
  id v2 = (const void *)a1[5];
  uint64_t v3 = *(NSMapTable **)(a1[4] + 40);
  if (v2)
  {
    if (!v3)
    {
      uint64_t v4 = +[ADPeerCloudService _pointerToBlockMap];
      uint64_t v5 = a1[4];
      id v6 = *(void **)(v5 + 40);
      *(void *)(v5 + 40) = v4;

      id v2 = (const void *)a1[5];
      uint64_t v3 = *(NSMapTable **)(a1[4] + 40);
    }
    id v7 = (const void *)a1[6];
    NSMapInsert(v3, v7, v2);
  }
  else if (v3)
  {
    id v8 = (const void *)a1[6];
    NSMapRemove(v3, v8);
  }
}

void sub_10017AC10(uint64_t a1)
{
  id v2 = objc_alloc_init(_ADPBDeviceGetDataRequest);
  uint64_t v3 = *(void **)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10017ACD0;
  v5[3] = &unk_100504418;
  void v5[4] = v3;
  id v6 = *(id *)(a1 + 48);
  [v3 _sendProto:v2 ofType:2 toPeers:v4 responseType:1 completion:v5];
}

void sub_10017ACD0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    id v7 = AFSiriLogContextIDS;
    if (os_log_type_enabled(AFSiriLogContextIDS, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)stat buf = 136315394;
      long long v30 = "-[ADPeerCloudService getSharedDataFromPeers:completion:]_block_invoke_2";
      __int16 v31 = 2114;
      id v32 = v6;
      _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "%s %{public}@", buf, 0x16u);
    }
  }
  long long v22 = v6;
  id v8 = objc_msgSend(objc_alloc((Class)NSMutableDictionary), "initWithCapacity:", objc_msgSend(v5, "count"));
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  id obj = v5;
  id v9 = [obj countByEnumeratingWithState:&v24 objects:v28 count:16];
  if (v9)
  {
    id v10 = v9;
    uint64_t v11 = *(void *)v25;
    do
    {
      for (i = 0; i != v10; i = (char *)i + 1)
      {
        if (*(void *)v25 != v11) {
          objc_enumerationMutation(obj);
        }
        uint64_t v13 = *(void **)(*((void *)&v24 + 1) + 8 * i);
        id v14 = objc_msgSend(v13, "proto", v22);
        if (v14)
        {
          id v15 = *(void **)(a1 + 32);
          id v16 = [v13 peer];
          uint64_t v17 = [v15 _uniqueIdentifierForPeer:v16];

          id v18 = [v14 assistantId];
          if (v18)
          {
            long long v19 = +[ADDeviceCircleManager sharedInstance];
            [v19 _setAssistantId:v18 forDeviceWithIdsDeviceUniqueIdentifier:v17];
          }
          long long v20 = objc_msgSend(v14, "_ad_data");
          long long v21 = [v13 peer];
          [v8 setObject:v20 forKey:v21];

          if (AFIsHorseman()) {
            [*(id *)(a1 + 32) _setCachedSharedData:v20 forUniqueId:v17];
          }
        }
      }
      id v10 = [obj countByEnumeratingWithState:&v24 objects:v28 count:16];
    }
    while (v10);
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_10017B2B4(void *a1)
{
  id v2 = (const void *)a1[5];
  uint64_t v3 = *(NSMapTable **)(a1[4] + 32);
  if (v2)
  {
    if (!v3)
    {
      uint64_t v4 = +[ADPeerCloudService _pointerToBlockMap];
      uint64_t v5 = a1[4];
      id v6 = *(void **)(v5 + 32);
      *(void *)(v5 + 32) = v4;

      id v2 = (const void *)a1[5];
      uint64_t v3 = *(NSMapTable **)(a1[4] + 32);
    }
    id v7 = (const void *)a1[6];
    NSMapInsert(v3, v7, v2);
  }
  else if (v3)
  {
    id v8 = (const void *)a1[6];
    NSMapRemove(v3, v8);
  }
}

void sub_10017B4A4(uint64_t a1)
{
  id v2 = objc_alloc_init(_ADPBDeviceSetDataRequest);
  [(_ADPBDeviceSetDataRequest *)v2 _ad_setData:*(void *)(a1 + 32)];
  [*(id *)(a1 + 40) _sendProto:v2 ofType:1 toPeers:*(void *)(a1 + 48)];
}

void sub_10017B66C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(NSObject **)(v4 + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10017B728;
  block[3] = &unk_10050E1D8;
  void block[4] = v4;
  id v8 = v3;
  id v9 = *(id *)(a1 + 40);
  id v6 = v3;
  dispatch_async(v5, block);
}

uint64_t sub_10017B728(uint64_t a1)
{
  id v2 = *(void **)(a1 + 40);
  id v3 = *(void **)(*(void *)(a1 + 32) + 64);
  if (v3 == v2 || (objc_msgSend(v3, "isEqualToString:") & 1) != 0)
  {
    uint64_t v4 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      int v9 = 136315138;
      id v10 = "-[ADPeerCloudService _updateAirPlayRouteIdentifierWithCompletion:]_block_invoke_2";
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%s AirPlay route did not change", (uint8_t *)&v9, 0xCu);
    }
  }
  else
  {
    id v5 = [*(id *)(a1 + 40) copy];
    uint64_t v6 = *(void *)(a1 + 32);
    id v7 = *(void **)(v6 + 64);
    *(void *)(v6 + 64) = v5;
  }
  *(unsigned char *)(*(void *)(a1 + 32) + 72) = 0;
  uint64_t result = *(void *)(a1 + 48);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

id sub_10017B924(uint64_t a1)
{
  return [*(id *)(a1 + 32) _updateAirPlayRouteIdentifierWithCompletion:0];
}

uint64_t sub_10017BA4C(uint64_t a1)
{
  id v2 = +[ADPreferences sharedPreferences];
  id obj = [v2 companionIdentifier];

  id v3 = obj;
  id v4 = *(id *)(*(void *)(a1 + 32) + 56);
  if (v4 != obj)
  {
    id v4 = [v4 isEqualToString:obj];
    id v3 = obj;
    if ((v4 & 1) == 0)
    {
      objc_storeStrong((id *)(*(void *)(a1 + 32) + 56), obj);
      id v3 = obj;
    }
  }
  return _objc_release_x1(v4, v3);
}

uint64_t sub_10017BEB8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10017BEC8(uint64_t a1)
{
}

uint64_t sub_10017BED0(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) _cachedSharedDataForUniqueId:*(void *)(a1 + 40)];
  uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 40) = v2;
  return _objc_release_x1(v2, v4);
}

uint64_t sub_10017C0F8(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) _peerInfoForAssistantId:*(void *)(a1 + 40) allowNonPeers:*(unsigned __int8 *)(a1 + 56)];
  uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 40) = v2;
  return _objc_release_x1(v2, v4);
}

void *sub_10017C23C(uint64_t a1)
{
  uint64_t result = (void *)AFIsHorseman();
  if (result)
  {
    uint64_t result = *(void **)(*(void *)(a1 + 32) + 56);
    if (result)
    {
      id v3 = [result copy];
      uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8);
      uint64_t v5 = *(void *)(v4 + 40);
      *(void *)(v4 + 40) = v3;
      return (void *)_objc_release_x1(v3, v5);
    }
  }
  return result;
}

void sub_10017C534(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10017C564(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) _companionPeer];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 40) = v2;
  return _objc_release_x1(v2, v4);
}

uint64_t sub_10017C9D4(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) _peerInfoForIDSDeviceUniqueIdentifier:*(void *)(a1 + 40) allowNonPeers:*(unsigned __int8 *)(a1 + 56)];
  uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 40) = v2;
  return _objc_release_x1(v2, v4);
}

uint64_t sub_10017CCAC(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) _uniqueIdentifierForPeer:*(void *)(a1 + 40)];
  uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 40) = v2;
  return _objc_release_x1(v2, v4);
}

uint64_t sub_10017CDEC(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) _peers];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 40) = v2;
  return _objc_release_x1(v2, v4);
}

void sub_10017D5B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,id location)
{
  objc_destroyWeak(v23);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10017D5F0(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v4 = +[ADPeerCloudService _timedOutError];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [v2 _handleMessageResponse:0 ofType:0xFFFFLL orError:v4 fromID:0 handler:WeakRetained];
}

void sub_10017DA70(uint64_t a1)
{
  uint64_t v2 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)stat buf = 136315138;
    __int16 v38 = "-[ADPeerCloudService _init]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s Begin setting up IDS service.", buf, 0xCu);
  }
  id v3 = [objc_alloc((Class)IDSService) initWithService:@"com.apple.private.alloy.siri.icloud"];
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void **)(v4 + 16);
  *(void *)(v4 + 16) = v3;

  [*(id *)(*(void *)(a1 + 32) + 16) addDelegate:*(void *)(a1 + 32) queue:*(void *)(*(void *)(a1 + 32) + 8)];
  uint64_t v6 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    id v7 = *(void **)(*(void *)(a1 + 32) + 16);
    *(_DWORD *)stat buf = 136315394;
    __int16 v38 = "-[ADPeerCloudService _init]_block_invoke";
    __int16 v39 = 2112;
    __int16 v40 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "%s End setting up IDS service %@.", buf, 0x16u);
  }
  id v8 = [*(id *)(*(void *)(a1 + 32) + 16) devices];
  int v9 = AFSiriLogContextIDS;
  if (os_log_type_enabled(AFSiriLogContextIDS, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)stat buf = 136315394;
    __int16 v38 = "-[ADPeerCloudService _init]_block_invoke";
    __int16 v39 = 2112;
    __int16 v40 = v8;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "%s %@", buf, 0x16u);
  }
  uint64_t v10 = objc_opt_new();
  uint64_t v11 = *(void *)(a1 + 32);
  id v12 = *(void **)(v11 + 80);
  *(void *)(v11 + 80) = v10;

  long long v34 = 0u;
  long long v35 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  id v13 = v8;
  id v14 = [v13 countByEnumeratingWithState:&v32 objects:v36 count:16];
  if (v14)
  {
    id v15 = v14;
    uint64_t v16 = *(void *)v33;
    do
    {
      uint64_t v17 = 0;
      do
      {
        if (*(void *)v33 != v16) {
          objc_enumerationMutation(v13);
        }
        id v18 = *(void **)(*((void *)&v32 + 1) + 8 * (void)v17);
        long long v19 = [v18 uniqueIDOverride];
        if ([v19 length])
        {
          if (!v19) {
            goto LABEL_15;
          }
LABEL_14:
          [*(id *)(*(void *)(a1 + 32) + 80) addObject:v19];
          goto LABEL_15;
        }
        uint64_t v20 = [v18 uniqueID];

        long long v19 = (void *)v20;
        if (v20) {
          goto LABEL_14;
        }
LABEL_15:

        uint64_t v17 = (char *)v17 + 1;
      }
      while (v15 != v17);
      id v21 = [v13 countByEnumeratingWithState:&v32 objects:v36 count:16];
      id v15 = v21;
    }
    while (v21);
  }

  long long v22 = +[ADPreferences sharedPreferences];
  uint64_t v23 = [v22 companionIdentifier];
  uint64_t v24 = *(void *)(a1 + 32);
  long long v25 = *(void **)(v24 + 56);
  *(void *)(v24 + 56) = v23;

  long long v26 = +[NSNotificationCenter defaultCenter];
  [v26 addObserver:*(void *)(a1 + 32) selector:"_companionIdentifierDidChangeNotification:" name:@"ADPreferencesCompanionIdentifierDidChangeNotification" object:0];
  if (AFSupportsAirPlayEndpointRoute())
  {
    *(unsigned char *)(*(void *)(a1 + 32) + 72) = 1;
    [v26 addObserver:*(void *)(a1 + 32) selector:"_airplayRouteDidChange:" name:AFMediaRemoteDeviceInfoRouteIdentifierDidChangeNotification object:0];
  }
  [*(id *)(a1 + 32) _updateActiveAccountState];
  id v27 = *(id *)(*(void *)(a1 + 32) + 8);
  __int16 v28 = +[ADQueueMonitor sharedMonitor];
  v30[0] = _NSConcreteStackBlock;
  v30[1] = 3221225472;
  v30[2] = sub_10017DE6C;
  v30[3] = &unk_10050C458;
  id v31 = v27;
  id v29 = v27;
  [v28 addQueue:v29 heartBeatInterval:v30 timeoutInterval:5.0 timeoutHandler:5.0];
}

void sub_10017DE6C(uint64_t a1, unint64_t a2)
{
  id v3 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", @"Queue %s did not respond to watchdog and is likely blocked.", dispatch_queue_get_label(*(dispatch_queue_t *)(a1 + 32)));
  uint64_t v4 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)stat buf = 136315394;
    id v7 = "-[ADPeerCloudService _init]_block_invoke";
    __int16 v8 = 2112;
    id v9 = v3;
    _os_log_fault_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "%s %@", buf, 0x16u);
  }
  int v5 = AFIsInternalInstall();
  if (a2 <= 3 && v5) {
    WriteStackshotReport_async();
  }
}

void sub_10017E1A0(id a1)
{
  id v1 = [[ADPeerCloudService alloc] _init];
  uint64_t v2 = qword_100585D10;
  qword_100585D10 = (uint64_t)v1;
  _objc_release_x1(v1, v2);
}

void sub_10017EDF4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v5)
  {
    id v7 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      uint64_t v9 = *(void *)(a1 + 32);
      int v10 = 136315394;
      uint64_t v11 = "-[ADCloudKitKeyValueMirroredStore synchronizeKeychainPreferencesWithCompletion:]_block_invoke";
      __int16 v12 = 2112;
      uint64_t v13 = v9;
      _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "%s Failed to save mirror keys: %@", (uint8_t *)&v10, 0x16u);
    }
    __int16 v8 = +[ADCloudKitManager sharedManager];
    [v8 handleCloudKitError:v5 forZone:@"com.apple.assistant.backedup" mirror:1 operationType:2];
  }
}

void sub_100180874(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v5)
  {
    id v7 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      uint64_t v9 = *(void *)(a1 + 32);
      int v10 = 136315394;
      uint64_t v11 = "-[ADCloudKitKeyValueMirroredStore synchronizeWithCompletion:]_block_invoke";
      __int16 v12 = 2112;
      uint64_t v13 = v9;
      _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "%s Failed to save mirror keys: %@", (uint8_t *)&v10, 0x16u);
    }
    __int16 v8 = +[ADCloudKitManager sharedManager];
    [v8 handleCloudKitError:v5 forZone:@"com.apple.assistant.backedup" mirror:1 operationType:2];
  }
}

uint64_t sub_100180A4C(void *a1)
{
  id v1 = a1;
  uint64_t v2 = (void *)qword_100585D28;
  if (!qword_100585D28)
  {
    uint64_t v46 = objc_opt_class();
    uint64_t v45 = objc_opt_class();
    uint64_t v44 = objc_opt_class();
    uint64_t v43 = objc_opt_class();
    uint64_t v42 = objc_opt_class();
    uint64_t v41 = objc_opt_class();
    uint64_t v40 = objc_opt_class();
    uint64_t v39 = objc_opt_class();
    uint64_t v38 = objc_opt_class();
    uint64_t v37 = objc_opt_class();
    uint64_t v36 = objc_opt_class();
    uint64_t v35 = objc_opt_class();
    uint64_t v34 = objc_opt_class();
    uint64_t v33 = objc_opt_class();
    uint64_t v32 = objc_opt_class();
    uint64_t v31 = objc_opt_class();
    uint64_t v30 = objc_opt_class();
    uint64_t v29 = objc_opt_class();
    uint64_t v28 = objc_opt_class();
    uint64_t v27 = objc_opt_class();
    uint64_t v26 = objc_opt_class();
    uint64_t v25 = objc_opt_class();
    uint64_t v24 = objc_opt_class();
    uint64_t v23 = objc_opt_class();
    uint64_t v22 = objc_opt_class();
    uint64_t v21 = objc_opt_class();
    uint64_t v20 = objc_opt_class();
    uint64_t v19 = objc_opt_class();
    uint64_t v18 = objc_opt_class();
    uint64_t v17 = objc_opt_class();
    uint64_t v16 = objc_opt_class();
    uint64_t v3 = objc_opt_class();
    uint64_t v4 = objc_opt_class();
    uint64_t v5 = objc_opt_class();
    uint64_t v6 = objc_opt_class();
    uint64_t v7 = objc_opt_class();
    uint64_t v8 = objc_opt_class();
    uint64_t v9 = objc_opt_class();
    uint64_t v10 = objc_opt_class();
    uint64_t v11 = objc_opt_class();
    +[NSSet setWithObjects:](NSSet, "setWithObjects:", v46, v45, v44, v43, v42, v41, v40, v39, v38, v37, v36, v35, v34, v33, v32, v31, v30,
      v29,
      v28,
      v27,
      v26,
      v25,
      v24,
      v23,
      v22,
      v21,
      v20,
      v19,
      v18,
      v17,
      v16,
      v3,
      v4,
      v5,
      v6,
      v7,
      v8,
      v9,
      v10,
      v11,
      objc_opt_class(),
    uint64_t v12 = 0);
    uint64_t v13 = (void *)qword_100585D28;
    qword_100585D28 = v12;

    uint64_t v2 = (void *)qword_100585D28;
  }
  uint64_t v14 = [v2 containsObject:objc_opt_class()] ^ 1;

  return v14;
}

void sub_1001820E4(uint64_t a1)
{
  id v2 = objc_alloc((Class)NSMutableSet);
  uint64_t v3 = [*(id *)(*(void *)(a1 + 32) + 16) allKeys];
  id v6 = [v2 initWithArray:v3];

  uint64_t v4 = +[ADPreferences sharedPreferences];
  uint64_t v5 = [v4 languageCode];
  [v6 addObject:v5];

  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_1001827B0(id a1)
{
  id v1 = objc_alloc_init((Class)SiriTTSDaemonSession);
  uint64_t v2 = qword_100585D30;
  qword_100585D30 = (uint64_t)v1;
  _objc_release_x1(v1, v2);
}

void sub_100182E0C(void (**a1)(void, void))
{
  uint64_t v2 = a1;
  uint64_t v3 = objc_alloc_init(ADUnavailableAlarmStore);
  ((void (**)(void, ADUnavailableAlarmStore *))a1)[2](v2, v3);
}

void sub_10018302C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (v9)
  {
    uint64_t v10 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      int v12 = 136315394;
      uint64_t v13 = "-[ADCloudKitZoneShareCreator saveZoneShare:completion:]_block_invoke";
      __int16 v14 = 2112;
      id v15 = v9;
      _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "%s Error saving shared zone (%@)", (uint8_t *)&v12, 0x16u);
    }
  }
  uint64_t v11 = *(void *)(a1 + 32);
  if (v11) {
    (*(void (**)(uint64_t, id))(v11 + 16))(v11, v9);
  }
}

void sub_1001831D8(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 24);
  if (v2 && ([v2 zone], uint64_t v3 = objc_claimAutoreleasedReturnValue(), v3, v3))
  {
    id v4 = objc_alloc((Class)CKShare);
    uint64_t v5 = [*(id *)(*(void *)(a1 + 32) + 24) zone];
    id v6 = [v5 zoneID];
    id v7 = [v4 initWithRecordZoneID:v6];

    id v8 = [v7 recordID];
    id v9 = objc_alloc((Class)CKFetchRecordsOperation);
    uint64_t v24 = v8;
    uint64_t v10 = +[NSArray arrayWithObjects:&v24 count:1];
    id v11 = [v9 initWithRecordIDs:v10];

    uint64_t v17 = _NSConcreteStackBlock;
    uint64_t v18 = 3221225472;
    uint64_t v19 = sub_10018344C;
    uint64_t v20 = &unk_1005072C8;
    int v12 = *(void **)(a1 + 40);
    uint64_t v21 = *(void *)(a1 + 32);
    id v22 = v8;
    id v23 = v12;
    id v13 = v8;
    [v11 setFetchRecordsCompletionBlock:&v17];
    objc_msgSend(v11, "setQualityOfService:", 17, v17, v18, v19, v20, v21);
    __int16 v14 = [*(id *)(*(void *)(a1 + 32) + 16) privateCloudDatabase];
    [v14 addOperation:v11];
  }
  else
  {
    id v7 = +[AFError errorWithCode:4020];
    id v15 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)stat buf = 136315394;
      uint64_t v26 = "-[ADCloudKitZoneShareCreator fetchZoneShare:]_block_invoke";
      __int16 v27 = 2112;
      id v28 = v7;
      _os_log_error_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "%s %@", buf, 0x16u);
    }
    uint64_t v16 = *(void *)(a1 + 40);
    if (v16) {
      (*(void (**)(uint64_t, void, void, id))(v16 + 16))(v16, 0, 0, v7);
    }
  }
}

void sub_10018344C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    id v7 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      int v12 = 136315394;
      id v13 = "-[ADCloudKitZoneShareCreator fetchZoneShare:]_block_invoke";
      __int16 v14 = 2112;
      id v15 = v6;
      _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "%s Failed to fetch share with error (%@). Try creating a record.", (uint8_t *)&v12, 0x16u);
    }
    [*(id *)(a1 + 32) _setupZoneSharing:*(void *)(a1 + 48)];
  }
  else
  {
    id v8 = [v5 objectForKey:*(void *)(a1 + 40)];
    id v9 = AFSiriLogContextDaemon;
    if (v8)
    {
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
      {
        uint64_t v10 = v9;
        id v11 = [v8 URL];
        int v12 = 136315394;
        id v13 = "-[ADCloudKitZoneShareCreator fetchZoneShare:]_block_invoke";
        __int16 v14 = 2112;
        id v15 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "%s one share record fetched with %@", (uint8_t *)&v12, 0x16u);
      }
      (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
    }
    else
    {
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
      {
        int v12 = 136315138;
        id v13 = "-[ADCloudKitZoneShareCreator fetchZoneShare:]_block_invoke";
        _os_log_debug_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "%s Creating zone share", (uint8_t *)&v12, 0xCu);
      }
      [*(id *)(a1 + 32) _setupZoneSharing:*(void *)(a1 + 48)];
    }
  }
}

void sub_100183718(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 24);
  if (v2 && ([v2 zone], uint64_t v3 = objc_claimAutoreleasedReturnValue(), v3, v3))
  {
    id v4 = objc_alloc((Class)CKShare);
    id v5 = [*(id *)(*(void *)(a1 + 32) + 24) zone];
    id v6 = [v5 zoneID];
    id v7 = [v4 initWithRecordZoneID:v6];

    id v8 = [v7 recordID];
    id v9 = objc_alloc((Class)CKModifyRecordsOperation);
    uint64_t v18 = v8;
    uint64_t v10 = +[NSArray arrayWithObjects:&v18 count:1];
    id v11 = [v9 initWithRecordsToSave:0 recordIDsToDelete:v10];

    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472;
    v16[2] = sub_100183978;
    v16[3] = &unk_1005046A0;
    id v17 = *(id *)(a1 + 40);
    [v11 setModifyRecordsCompletionBlock:v16];
    if (*(unsigned char *)(a1 + 48)) {
      [v11 setMarkAsParticipantNeedsNewInvitationToken:1];
    }
    [v11 setQualityOfService:17];
    int v12 = *(void **)(*(void *)(a1 + 32) + 16);
    if (*(unsigned char *)(a1 + 49)) {
      [v12 privateCloudDatabase];
    }
    else {
    __int16 v14 = [v12 sharedCloudDatabase];
    }
    [v14 addOperation:v11];
  }
  else
  {
    uint64_t v13 = *(void *)(a1 + 40);
    if (v13)
    {
      id v15 = +[AFError errorWithCode:4020];
      (*(void (**)(uint64_t))(v13 + 16))(v13);
    }
  }
}

void sub_100183978(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  uint64_t v10 = AFSiriLogContextDaemon;
  if (v9)
  {
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      int v14 = 136315394;
      id v15 = "-[ADCloudKitZoneShareCreator deleteZoneShare:markForReinvitation:completion:]_block_invoke_2";
      __int16 v16 = 2112;
      id v17 = v9;
      _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "%s Error deleting ckshare (%@)", (uint8_t *)&v14, 0x16u);
    }
    uint64_t v11 = *(void *)(a1 + 32);
    if (v11)
    {
      int v12 = *(void (**)(void))(v11 + 16);
LABEL_10:
      v12();
    }
  }
  else
  {
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      int v14 = 136315138;
      id v15 = "-[ADCloudKitZoneShareCreator deleteZoneShare:markForReinvitation:completion:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "%s Deletion successful", (uint8_t *)&v14, 0xCu);
    }
    uint64_t v13 = *(void *)(a1 + 32);
    if (v13)
    {
      int v12 = *(void (**)(void))(v13 + 16);
      goto LABEL_10;
    }
  }
}

void sub_100183CE4(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  uint64_t v10 = AFSiriLogContextDaemon;
  if (v9)
  {
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      int v21 = 136315394;
      id v22 = "-[ADCloudKitZoneShareCreator _setupZoneSharing:]_block_invoke";
      __int16 v23 = 2112;
      id v24 = v9;
      _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "%s Error creating shared zone (%@)", (uint8_t *)&v21, 0x16u);
    }
    BOOL v11 = sub_100311748(v9);
    int v12 = AFSiriLogContextDaemon;
    BOOL v13 = os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO);
    if (v11)
    {
      if (!v13) {
        goto LABEL_14;
      }
      int v21 = 136315394;
      id v22 = "-[ADCloudKitZoneShareCreator _setupZoneSharing:]_block_invoke";
      __int16 v23 = 2112;
      id v24 = v7;
      int v14 = "%s Zone share record exists %@";
    }
    else
    {
      if (!v13) {
        goto LABEL_14;
      }
      int v21 = 136315394;
      id v22 = "-[ADCloudKitZoneShareCreator _setupZoneSharing:]_block_invoke";
      __int16 v23 = 2112;
      id v24 = v9;
      int v14 = "%s Zone share record creation failed with error (%@)";
    }
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, v14, (uint8_t *)&v21, 0x16u);
LABEL_14:
    uint64_t v20 = *(void *)(a1 + 40);
    if (v20) {
      (*(void (**)(uint64_t, void, void, id))(v20 + 16))(v20, 0, 0, v9);
    }
    goto LABEL_16;
  }
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    id v15 = v10;
    __int16 v16 = [v7 firstObject];
    id v17 = [v16 URL];
    int v21 = 136315394;
    id v22 = "-[ADCloudKitZoneShareCreator _setupZoneSharing:]_block_invoke";
    __int16 v23 = 2112;
    id v24 = v17;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "%s Zone share record creation succeeded with %@", (uint8_t *)&v21, 0x16u);
  }
  uint64_t v18 = *(void *)(a1 + 40);
  if (v18)
  {
    uint64_t v19 = [v7 firstObject];
    (*(void (**)(uint64_t, void *, void, void))(v18 + 16))(v18, v19, *(void *)(*(void *)(a1 + 32) + 16), 0);
  }
LABEL_16:
}

void sub_100184508(id a1)
{
  id v1 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"00000000-0000-0000-0000-000000000000"];
  uint64_t v2 = qword_100585D50;
  qword_100585D50 = (uint64_t)v1;
  _objc_release_x1(v1, v2);
}

void sub_1001845A4(id a1)
{
  os_log_t v1 = os_log_create("com.apple.siri", "AnalyticsIdentifiers");
  uint64_t v2 = qword_100585D40;
  qword_100585D40 = (uint64_t)v1;
  _objc_release_x1(v1, v2);
}

void sub_100184894(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1001848B4(uint64_t a1, void *a2)
{
  uint64_t v3 = [a2 eventBody];
  id v4 = [v3 deviceSegmentsReported];
  if ([v4 count]
    && ([v4 objectAtIndexedSubscript:0],
        id v5 = objc_claimAutoreleasedReturnValue(),
        unsigned int v6 = [v5 hasDaysWithTwoAssistantSpeechRequestsPerWeek],
        v5,
        v6))
  {
    id v7 = [v4 objectAtIndexedSubscript:0];
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = [v7 daysWithTwoAssistantSpeechRequestsPerWeek];

    id v8 = [v3 eventMetadata];
    id v9 = [v8 eventTimestampInMSSince1970];
    uint64_t v10 = +[NSDate dateWithTimeIntervalSince1970:(double)(unint64_t)v9];
    id v11 = objc_alloc_init((Class)NSDateFormatter);
    [v11 setDateFormat:@"yyyy-MM-dd"];
    int v12 = [v11 stringFromDate:v10];
    BOOL v13 = AFSiriLogContextAnalytics;
    if (os_log_type_enabled(AFSiriLogContextAnalytics, OS_LOG_TYPE_DEBUG))
    {
      int v15 = *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
      int v16 = 136315906;
      id v17 = "+[ADSiriAnalyticsOnDeviceDigestProvider _fetchLatestDaysWithTwoAssistantSpeechRequestsPerWeek]_block_invoke";
      __int16 v18 = 1024;
      int v19 = v15;
      __int16 v20 = 2048;
      id v21 = v9;
      __int16 v22 = 2112;
      __int16 v23 = v12;
      _os_log_debug_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "%s DIMSchemaDIMOnDeviceDigest: Retrieved latest daysWithTwoAssistantSpeechRequestsPerWeek value: %u from Biome stream with epoch time: %llu and date: %@", (uint8_t *)&v16, 0x26u);
    }
  }
  else
  {
    int v14 = AFSiriLogContextAnalytics;
    if (os_log_type_enabled(AFSiriLogContextAnalytics, OS_LOG_TYPE_DEBUG))
    {
      int v16 = 136315138;
      id v17 = "+[ADSiriAnalyticsOnDeviceDigestProvider _fetchLatestDaysWithTwoAssistantSpeechRequestsPerWeek]_block_invoke";
      _os_log_debug_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "%s DIMSchemaDIMOnDeviceDigest: No data for daysWithTwoAssistantSpeechRequestsPerWeek available in Biome stream", (uint8_t *)&v16, 0xCu);
    }
  }
}

void sub_100184AFC(id a1, BPSCompletion *a2)
{
  uint64_t v3 = (void *)AFSiriLogContextAnalytics;
  if (os_log_type_enabled(AFSiriLogContextAnalytics, OS_LOG_TYPE_DEBUG))
  {
    id v4 = v3;
    id v5 = a2;
    id v6 = [(BPSCompletion *)v5 state];
    id v7 = [(BPSCompletion *)v5 error];

    int v8 = 136315650;
    id v9 = "+[ADSiriAnalyticsOnDeviceDigestProvider _fetchLatestDaysWithTwoAssistantSpeechRequestsPerWeek]_block_invoke";
    __int16 v10 = 2048;
    id v11 = v6;
    __int16 v12 = 2112;
    BOOL v13 = v7;
    _os_log_debug_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "%s DIMSchemaDIMOnDeviceDigest: BMSiriOnDeviceDigestSegmentsCohorts Publisher completed with state: %ld; error: %@",
      (uint8_t *)&v8,
      0x20u);
  }
}

void sub_100184D38(uint64_t a1)
{
  int v2 = *(_DWORD *)(*(void *)(a1 + 32) + 24);
  if ((v2 & 0x80000000) == 0)
  {
    close(v2);
    *(_DWORD *)(*(void *)(a1 + 32) + 24) = -1;
    uint64_t v3 = +[AFAnalytics sharedAnalytics];
    v14[0] = @"path";
    id v4 = [*(id *)(*(void *)(a1 + 32) + 32) stringByStandardizingPath];
    v14[1] = @"success";
    v15[0] = v4;
    v15[1] = &__kCFBooleanTrue;
    id v5 = +[NSDictionary dictionaryWithObjects:v15 forKeys:v14 count:2];
    [v3 logEventWithType:313 context:v5];

    id v6 = AFSiriLogContextSpeech;
    if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_INFO))
    {
      uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 32);
      int v10 = 136315394;
      id v11 = "-[ADSpeechLog endSpeechLog]_block_invoke";
      __int16 v12 = 2112;
      uint64_t v13 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "%s Logged speech file at path %@", (uint8_t *)&v10, 0x16u);
    }
    uint64_t v8 = *(void *)(a1 + 32);
    id v9 = *(void **)(v8 + 32);
    *(void *)(v8 + 32) = 0;
  }
}

void sub_100184F28(uint64_t a1)
{
  int v2 = *(_DWORD *)(*(void *)(a1 + 32) + 24);
  if ((v2 & 0x80000000) == 0)
  {
    close(v2);
    *(_DWORD *)(*(void *)(a1 + 32) + 24) = -1;
    uint64_t v3 = +[AFAnalytics sharedAnalytics];
    v20[0] = @"path";
    id v4 = [*(id *)(*(void *)(a1 + 32) + 32) stringByStandardizingPath];
    v20[1] = @"success";
    v21[0] = v4;
    v21[1] = &__kCFBooleanFalse;
    uint64_t v5 = +[NSDictionary dictionaryWithObjects:v21 forKeys:v20 count:2];
    [v3 logEventWithType:313 context:v5];

    id v6 = +[NSFileManager defaultManager];
    uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 32);
    id v13 = 0;
    LOBYTE(v5) = [v6 removeItemAtPath:v7 error:&v13];
    id v8 = v13;

    if ((v5 & 1) == 0)
    {
      id v9 = AFSiriLogContextSpeech;
      if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_ERROR))
      {
        uint64_t v12 = *(void *)(*(void *)(a1 + 32) + 32);
        *(_DWORD *)stat buf = 136315650;
        int v15 = "-[ADSpeechLog cancelCurrentSpeechLog]_block_invoke";
        __int16 v16 = 2114;
        uint64_t v17 = v12;
        __int16 v18 = 2114;
        id v19 = v8;
        _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "%s error removing file at path %{public}@ %{public}@", buf, 0x20u);
      }
    }
    uint64_t v10 = *(void *)(a1 + 32);
    id v11 = *(void **)(v10 + 32);
    *(void *)(v10 + 32) = 0;
  }
}

ssize_t sub_10018528C(ssize_t result)
{
  if ((*(_DWORD *)(*(void *)(result + 32) + 24) & 0x80000000) == 0)
  {
    ssize_t v1 = result;
    unsigned int v2 = [*(id *)(result + 40) length];
    char v3 = v2;
    if ((v2 & 0xFF80) != 0)
    {
      __stat buf = (v2 >> 7) | 0x80;
      write(*(_DWORD *)(*(void *)(v1 + 32) + 24), &__buf, 1uLL);
    }
    char v4 = v3 & 0x7F;
    write(*(_DWORD *)(*(void *)(v1 + 32) + 24), &v4, 1uLL);
    return write(*(_DWORD *)(*(void *)(v1 + 32) + 24), [*(id *)(v1 + 40) bytes], (size_t)objc_msgSend(*(id *)(v1 + 40), "length"));
  }
  return result;
}

void sub_1001853DC(uint64_t a1)
{
  unsigned int v2 = +[AFPreferences sharedPreferences];
  unsigned __int8 v3 = [v2 limitedAudioLoggingEnabled];

  if ((v3 & 1) == 0)
  {
    if (*(void *)(*(void *)(a1 + 32) + 32))
    {
      char v4 = AFSiriLogContextSpeech;
      if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)stat buf = 136315138;
        uint64_t v26 = "-[ADSpeechLog beginNewSpeechLogWithFormat:]_block_invoke";
        _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "%s Already have a log open, ignoring", buf, 0xCu);
      }
    }
    unsigned int v5 = [*(id *)(a1 + 40) hasPrefix:@"OPUS"];
    id v6 = @"spx";
    if (v5) {
      id v6 = @"opx";
    }
    uint64_t v7 = v6;
    id v8 = objc_alloc((Class)NSString);
    id v9 = AFSpeechLogsDirectory();
    uint64_t v10 = *(void *)(a1 + 40);
    id v11 = [*(id *)(a1 + 32) _nowString];
    id v12 = [v8 initWithFormat:@"%@/%@-%@.%@", v9, v10, v11, v7];

    uint64_t v13 = *(void *)(a1 + 32);
    int v14 = *(void **)(v13 + 32);
    *(void *)(v13 + 32) = v12;

    *(_DWORD *)(*(void *)(a1 + 32) + 24) = open((const char *)[*(id *)(*(void *)(a1 + 32) + 32) fileSystemRepresentation], 522, 384);
    uint64_t v15 = *(void *)(a1 + 32);
    if ((*(_DWORD *)(v15 + 24) & 0x80000000) != 0)
    {
      id v21 = AFSiriLogContextSpeech;
      if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_ERROR))
      {
        uint64_t v22 = *(void *)(v15 + 32);
        *(_DWORD *)stat buf = 136315394;
        uint64_t v26 = "-[ADSpeechLog beginNewSpeechLogWithFormat:]_block_invoke";
        __int16 v27 = 2114;
        uint64_t v28 = v22;
        _os_log_error_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "%s Couldn't open file %{public}@", buf, 0x16u);
      }
    }
    else
    {
      __int16 v16 = +[AFAnalytics sharedAnalytics];
      uint64_t v17 = *(void *)(a1 + 32);
      uint64_t v18 = *(void *)(a1 + 40);
      v23[0] = @"format";
      v23[1] = @"path";
      v24[0] = v18;
      id v19 = [*(id *)(v17 + 32) stringByStandardizingPath];
      v24[1] = v19;
      __int16 v20 = +[NSDictionary dictionaryWithObjects:v24 forKeys:v23 count:2];
      [v16 logEventWithType:312 context:v20];
    }
  }
}

void sub_100186538(uint64_t a1, void *a2)
{
  id v3 = a2;
  char v4 = AFSAERequiredAssets();
  uint64_t v5 = AFAssetsAvailabilityMatchesRequiredAssets();

  if (v5 != [*(id *)(a1 + 40) saeAssetsForCurrentLocaleAvailable])
  {
    char v6 = objc_opt_respondsToSelector();
    uint64_t v7 = AFSiriLogContextDaemon;
    BOOL v8 = os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO);
    if (v6)
    {
      if (v8)
      {
        int v9 = 136315138;
        uint64_t v10 = "-[ADSAEAssetsAvailabilityObserver refreshAssetsAvailabilityWithAssetManager:]_block_invoke";
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "%s Sending updateAvailabilityWithCompletion: to GM", (uint8_t *)&v9, 0xCu);
      }
      [*(id *)(*(void *)(a1 + 40) + 8) updateAvailabilityWithCompletion:&stru_100504720];
    }
    else if (v8)
    {
      int v9 = 136315138;
      uint64_t v10 = "-[ADSAEAssetsAvailabilityObserver refreshAssetsAvailabilityWithAssetManager:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "%s updateAvailabilityWithCompletion: is not implemented by GMAvailabilityWrapper", (uint8_t *)&v9, 0xCu);
    }
  }
  [*(id *)(a1 + 40) setSaeAssetsForCurrentLocaleAvailable:v5];
}

void sub_1001866B8(id a1, NSError *a2)
{
  unsigned int v2 = a2;
  id v3 = AFSiriLogContextDaemon;
  if (v2)
  {
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      char v4 = v3;
      uint64_t v5 = [(NSError *)v2 localizedDescription];
      int v6 = 136315394;
      uint64_t v7 = "-[ADSAEAssetsAvailabilityObserver refreshAssetsAvailabilityWithAssetManager:]_block_invoke";
      __int16 v8 = 2112;
      int v9 = v5;
      _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "%s updateAvailabilityWithCompletion: failed with error %@", (uint8_t *)&v6, 0x16u);
    }
  }
  else if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v6 = 136315138;
    uint64_t v7 = "-[ADSAEAssetsAvailabilityObserver refreshAssetsAvailabilityWithAssetManager:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "%s Successfully sent updateAvailabilityWithCompletion: to GM", (uint8_t *)&v6, 0xCu);
  }
}

void sub_1001868BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class sub_1001868D4(uint64_t a1)
{
  v6[0] = 0;
  if (!qword_100585D68)
  {
    v6[1] = _NSConcreteStackBlock;
    void v6[2] = (void *)3221225472;
    v6[3] = sub_100186AC0;
    void v6[4] = &unk_10050E350;
    void v6[5] = v6;
    long long v7 = off_100504740;
    uint64_t v8 = 0;
    qword_100585D68 = _sl_dlopen();
  }
  if (!qword_100585D68)
  {
    id v3 = +[NSAssertionHandler currentHandler];
    char v4 = +[NSString stringWithUTF8String:"void *GenerativeModelsLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"ADSAEAssetsAvailabilityObserver.m", 18, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("GMAvailabilityWrapper");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    id v3 = +[NSAssertionHandler currentHandler];
    uint64_t v5 = +[NSString stringWithUTF8String:"Class getGMAvailabilityWrapperClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"ADSAEAssetsAvailabilityObserver.m", 19, @"Unable to find class %s", "GMAvailabilityWrapper");

LABEL_10:
    __break(1u);
  }
  qword_100585D60 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_100186AC0()
{
  uint64_t result = _sl_dlopen();
  qword_100585D68 = result;
  return result;
}

void sub_100186FF0(_Unwind_Exception *a1)
{
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 96));
  _Unwind_Resume(a1);
}

void sub_100187024(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  unsigned int v2 = AFSiriLogContextDaemon;
  BOOL v3 = os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO);
  if (WeakRetained)
  {
    if (v3)
    {
      int v4 = 136315138;
      uint64_t v5 = "-[ADMultiUserMeDevice _setupMeDeviceFetch]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s Change notification", (uint8_t *)&v4, 0xCu);
    }
    [WeakRetained _checkMeDevice];
  }
  else if (v3)
  {
    int v4 = 136315138;
    uint64_t v5 = "-[ADMultiUserMeDevice _setupMeDeviceFetch]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s Change notification after deallocation?", (uint8_t *)&v4, 0xCu);
  }
}

void sub_10018712C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  unsigned int v2 = AFSiriLogContextDaemon;
  BOOL v3 = os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO);
  if (WeakRetained)
  {
    if (v3)
    {
      int v4 = 136315138;
      uint64_t v5 = "-[ADMultiUserMeDevice _setupMeDeviceFetch]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s Activation done", (uint8_t *)&v4, 0xCu);
    }
    [WeakRetained _checkMeDevice];
  }
  else if (v3)
  {
    int v4 = 136315138;
    uint64_t v5 = "-[ADMultiUserMeDevice _setupMeDeviceFetch]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s Activation after deallocation?", (uint8_t *)&v4, 0xCu);
  }
}

void sub_100187234(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  unsigned int v2 = WeakRetained;
  if (WeakRetained)
  {
    BOOL v3 = [WeakRetained isMeDevice];

    if (!v3)
    {
      int v4 = AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
      {
        int v5 = 136315138;
        int v6 = "-[ADMultiUserMeDevice _setupMeDeviceFetch]_block_invoke";
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%s Forced evaluation", (uint8_t *)&v5, 0xCu);
      }
      [v2 _checkMeDevice];
    }
  }
}

void sub_100187410(id a1)
{
  id v1 = [[ADMultiUserMeDevice alloc] _init];
  uint64_t v2 = qword_100585D78;
  qword_100585D78 = (uint64_t)v1;
  _objc_release_x1(v1, v2);
}

void sub_100188968(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    uint64_t v2 = AFSiriLogContextLocation;
    if (os_log_type_enabled(AFSiriLogContextLocation, OS_LOG_TYPE_INFO))
    {
      int v3 = 136315138;
      int v4 = "-[ADLocationManager scheduleLocationUpdateSessionTeardown]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s Tearing down location update session", (uint8_t *)&v3, 0xCu);
    }
    [WeakRetained cancelLocationUpdateSessionTeardown];
    WeakRetained[23] = 0;
    [WeakRetained setLastShiftedLocation:0];
  }
}

uint64_t sub_100188D00(uint64_t a1)
{
  [*(id *)(a1 + 32) _dismissTCCDialogIfNeeded];
  uint64_t result = *(void *)(a1 + 40);
  if (result)
  {
    int v3 = *(uint64_t (**)(void))(result + 16);
    return v3();
  }
  return result;
}

void sub_100188EB0(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48))
  {
    uint64_t v2 = AFSiriLogContextLocation;
    if (os_log_type_enabled(AFSiriLogContextLocation, OS_LOG_TYPE_INFO))
    {
      int v4 = 136315138;
      int v5 = "-[ADLocationManager drainRequestsWithErrorCode:clearLocationCache:dismissDialog:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s Clearing location service cache", (uint8_t *)&v4, 0xCu);
    }
    [*(id *)(a1 + 32) setLastShiftedLocation:0];
  }
  int v3 = +[NSError errorWithDomain:kAFLocationServiceErrorDomain code:*(void *)(a1 + 40) userInfo:0];
  [*(id *)(a1 + 32) drainAuthorizationRequestCompletionsWithPossibleError:v3];
  [*(id *)(a1 + 32) drainLocationFetchRequestsWithPossibleError:v3];
  if (*(unsigned char *)(a1 + 49)) {
    [*(id *)(a1 + 32) _dismissTCCDialogIfNeeded];
  }
}

void sub_100189038(uint64_t a1)
{
  unint64_t v2 = (unint64_t)[*(id *)(a1 + 32) currentState];
  unint64_t v3 = HIDWORD(v2);
  if (HIDWORD(v2) >= 3)
  {
    if ((HIDWORD(v2) - 3) < 2)
    {
      int v5 = *(void **)(a1 + 32);
      [v5 startLocationPrefetchRoutine];
    }
  }
  else
  {
    int v4 = AFSiriLogContextLocation;
    if (os_log_type_enabled(AFSiriLogContextLocation, OS_LOG_TYPE_INFO))
    {
      int v6 = 136315394;
      long long v7 = "-[ADLocationManager prefetchCurrentLocation]_block_invoke";
      __int16 v8 = 1024;
      int v9 = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%s Location prefetch is skipped due to lack of authorization, status: %d", (uint8_t *)&v6, 0x12u);
    }
  }
}

void sub_100189400(uint64_t a1)
{
  unint64_t v2 = AFSiriLogContextLocation;
  if (os_log_type_enabled(AFSiriLogContextLocation, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)uint64_t v34 = 136315138;
    *(void *)&v34[4] = "-[ADLocationManager currentLocationWithFetchRequest:completion:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s Internal queue hop", v34, 0xCu);
  }
  unint64_t v3 = (unint64_t)[*(id *)(a1 + 32) currentState];
  if ((v3 & 1) == 0)
  {
    int v4 = AFSiriLogContextLocation;
    if (os_log_type_enabled(AFSiriLogContextLocation, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t v34 = 136315138;
      *(void *)&v34[4] = "-[ADLocationManager currentLocationWithFetchRequest:completion:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%s Location fetch is skipped due to location services being completely disabled", v34, 0xCu);
    }
    uint64_t v5 = kAFLocationServiceErrorDomain;
    uint64_t v6 = 9;
LABEL_11:
    int v9 = +[NSError errorWithDomain:v5 code:v6 userInfo:0];
    uint64_t v10 = *(void (**)(void))(*(void *)(a1 + 48) + 16);
LABEL_12:
    v10();
LABEL_13:

    return;
  }
  unint64_t v7 = HIDWORD(v3);
  if (HIDWORD(v3) < 3)
  {
    __int16 v8 = AFSiriLogContextLocation;
    if (os_log_type_enabled(AFSiriLogContextLocation, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t v34 = 136315394;
      *(void *)&v34[4] = "-[ADLocationManager currentLocationWithFetchRequest:completion:]_block_invoke";
      *(_WORD *)&v34[12] = 1024;
      *(_DWORD *)&v34[14] = v7;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "%s Location fetch is skipped due to lack of authorization, status: %d", v34, 0x12u);
    }
    uint64_t v5 = kAFLocationServiceErrorDomain;
    uint64_t v6 = 5;
    goto LABEL_11;
  }
  if ((HIDWORD(v3) - 3) < 2)
  {
    int v9 = [*(id *)(a1 + 32) lastShiftedLocation];
    id v11 = *(void **)(a1 + 32);
    if (!v11[8])
    {
      id v12 = AFSiriLogContextLocation;
      if (os_log_type_enabled(AFSiriLogContextLocation, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)uint64_t v34 = 136315138;
        *(void *)&v34[4] = "-[ADLocationManager currentLocationWithFetchRequest:completion:]_block_invoke";
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "%s Someone is fetching current location - grabbing assertion once", v34, 0xCu);
        id v11 = *(void **)(a1 + 32);
      }
      uint64_t v13 = [v11 createLocationInUseAssertion];
      uint64_t v14 = *(void *)(a1 + 32);
      uint64_t v15 = *(void **)(v14 + 64);
      *(void *)(v14 + 64) = v13;
    }
    id v16 = [*(id *)(a1 + 40) style];
    if (v16 == (id)1)
    {
      if (!v9) {
        goto LABEL_32;
      }
      uint64_t v25 = AFSiriLogContextLocation;
      if (os_log_type_enabled(AFSiriLogContextLocation, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)uint64_t v34 = 136315138;
        *(void *)&v34[4] = "-[ADLocationManager currentLocationWithFetchRequest:completion:]_block_invoke";
        uint64_t v26 = "%s Cached location is not empty and request style is 'eager'";
        __int16 v27 = v25;
        uint32_t v28 = 12;
LABEL_37:
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_INFO, v26, v34, v28);
      }
    }
    else
    {
      if (v16) {
        goto LABEL_32;
      }
      if (!v9)
      {
        uint64_t v29 = AFSiriLogContextLocation;
        if (os_log_type_enabled(AFSiriLogContextLocation, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)uint64_t v34 = 136315138;
          *(void *)&v34[4] = "-[ADLocationManager currentLocationWithFetchRequest:completion:]_block_invoke";
          uint64_t v22 = "%s No cached location and request style is 'default'";
          __int16 v23 = v29;
          uint32_t v24 = 12;
          goto LABEL_31;
        }
LABEL_32:
        uint64_t v30 = AFSiriLogContextLocation;
        if (os_log_type_enabled(AFSiriLogContextLocation, OS_LOG_TYPE_INFO))
        {
          uint64_t v31 = *(void *)(a1 + 56);
          *(_DWORD *)uint64_t v34 = 136315394;
          *(void *)&v34[4] = "-[ADLocationManager currentLocationWithFetchRequest:completion:]_block_invoke";
          *(_WORD *)&v34[12] = 2048;
          *(void *)&v34[14] = v31;
          _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_INFO, "%s Starting location monitoring routine with accuracy of %f", v34, 0x16u);
        }
        objc_msgSend(*(id *)(a1 + 32), "_startMonitoringLocationWithDesiredAccuracy:", *(double *)(a1 + 56), *(_OWORD *)v34, *(void *)&v34[16]);
        uint64_t v32 = [[ADLocationFetchRequest alloc] initWithClientFetchRequest:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];
        [*(id *)(*(void *)(a1 + 32) + 144) addObject:v32];
        [*(id *)(a1 + 32) scheduleLocationFetchRequestTimeoutForRequest:v32 timeout:*(double *)(a1 + 64)];

        goto LABEL_13;
      }
      [v9 horizontalAccuracy];
      double v17 = *(double *)(a1 + 56);
      double v19 = v18 - v17;
      __int16 v20 = AFSiriLogContextLocation;
      BOOL v21 = os_log_type_enabled(AFSiriLogContextLocation, OS_LOG_TYPE_INFO);
      if (v19 > 2.22044605e-16)
      {
        if (v21)
        {
          *(_DWORD *)uint64_t v34 = 136315394;
          *(void *)&v34[4] = "-[ADLocationManager currentLocationWithFetchRequest:completion:]_block_invoke";
          *(_WORD *)&v34[12] = 2048;
          *(double *)&v34[14] = v17;
          uint64_t v22 = "%s Cached location accuracy is not satisfying requested accuracy of %f and request style is 'default'";
          __int16 v23 = v20;
          uint32_t v24 = 22;
LABEL_31:
          _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, v22, v34, v24);
          goto LABEL_32;
        }
        goto LABEL_32;
      }
      if (v21)
      {
        *(_DWORD *)uint64_t v34 = 136315394;
        *(void *)&v34[4] = "-[ADLocationManager currentLocationWithFetchRequest:completion:]_block_invoke";
        *(_WORD *)&v34[12] = 2048;
        *(double *)&v34[14] = v17;
        uint64_t v26 = "%s Cached location satisfies requested accuracy %f and request style is 'default'";
        __int16 v27 = v20;
        uint32_t v28 = 22;
        goto LABEL_37;
      }
    }
    uint64_t v33 = AFSiriLogContextLocation;
    if (os_log_type_enabled(AFSiriLogContextLocation, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t v34 = 136315138;
      *(void *)&v34[4] = "-[ADLocationManager currentLocationWithFetchRequest:completion:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_INFO, "%s Cached location satisfies fetch request", v34, 0xCu);
    }
    uint64_t v10 = *(void (**)(void))(*(void *)(a1 + 48) + 16);
    goto LABEL_12;
  }
}

id sub_100189B44(uint64_t a1)
{
  unint64_t v2 = AFSiriLogContextLocation;
  if (os_log_type_enabled(AFSiriLogContextLocation, OS_LOG_TYPE_INFO))
  {
    int v20 = 136315138;
    BOOL v21 = "-[ADLocationManager updateTemporaryAuthorizationForAccurateLocation:timeout:completion:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s Internal queue hop", (uint8_t *)&v20, 0xCu);
  }
  unint64_t v3 = (unint64_t)[*(id *)(a1 + 32) currentState];
  char v4 = v3;
  uint64_t v6 = v5;
  unint64_t v7 = HIDWORD(v3);
  [*(id *)(a1 + 32) _dismissTCCDialogIfNeeded];
  if ((v4 & 1) != 0
    && ((v7 - 3) <= 1 ? (BOOL v8 = (v6 == 0) == (*(unsigned char *)(a1 + 56) != 0)) : (BOOL v8 = 1),
        !v8 && (objc_opt_respondsToSelector() & 1) != 0))
  {
    uint64_t v9 = *(unsigned __int8 *)(a1 + 56);
    uint64_t v10 = AFEffectiveSiriBundlePathForLocation();
    +[CLLocationManager setTemporaryFullAccuracyAuthorizationGranted:v9 forBundlePath:v10];

    id v11 = *(void **)(*(void *)(a1 + 32) + 136);
    id v12 = objc_retainBlock(*(id *)(a1 + 40));
    [v11 addObject:v12];

    return [*(id *)(a1 + 32) scheduleAuthorizationRequestTimeoutForCompletionBlock:*(void *)(a1 + 40) timeout:*(double *)(a1 + 48)];
  }
  else
  {
    uint64_t v14 = (void *)AFSiriLogContextLocation;
    if (os_log_type_enabled(AFSiriLogContextLocation, OS_LOG_TYPE_INFO))
    {
      uint64_t v15 = v4 & 1;
      id v16 = v14;
      double v17 = +[NSNumber numberWithBool:v15];
      double v18 = +[NSNumber numberWithInt:v7];
      double v19 = +[NSNumber numberWithInteger:v6];
      int v20 = 136315906;
      BOOL v21 = "-[ADLocationManager updateTemporaryAuthorizationForAccurateLocation:timeout:completion:]_block_invoke";
      __int16 v22 = 2112;
      __int16 v23 = v17;
      __int16 v24 = 2112;
      uint64_t v25 = v18;
      __int16 v26 = 2112;
      __int16 v27 = v19;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "%s Temporary accuracy update is not needed. Location services enabled: %@, current auth: %@, accuracy auth: %@", (uint8_t *)&v20, 0x2Au);
    }
    return (id)(*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

uint64_t sub_100189E6C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

id sub_10018A008(uint64_t a1)
{
  unint64_t v2 = AFSiriLogContextLocation;
  if (os_log_type_enabled(AFSiriLogContextLocation, OS_LOG_TYPE_INFO))
  {
    int v21 = 136315138;
    __int16 v22 = "-[ADLocationManager updateAuthorizationStyleWithUserSelection:timeout:completion:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s Internal queue hop", (uint8_t *)&v21, 0xCu);
  }
  unint64_t v3 = (unint64_t)[*(id *)(a1 + 32) currentState];
  char v4 = v3;
  uint64_t v6 = v5;
  unint64_t v7 = HIDWORD(v3);
  [*(id *)(a1 + 32) _dismissTCCDialogIfNeeded];
  if ((v4 & 1) == 0) {
    goto LABEL_4;
  }
  uint64_t v14 = *(void *)(a1 + 48);
  if (v7 == 2)
  {
    if (v14) {
      goto LABEL_13;
    }
  }
  else if (v7 == 4)
  {
    if ((unint64_t)(v14 - 3) < 0xFFFFFFFFFFFFFFFELL) {
      goto LABEL_16;
    }
  }
  else if (v7 != 3 || (v14 & 0xFFFFFFFFFFFFFFFDLL) != 1)
  {
LABEL_13:
    if (v14 == 1)
    {
      id v16 = AFEffectiveSiriBundleForLocation();
      +[CLLocationManager setTemporaryAuthorizationGranted:1 forBundle:v16];
LABEL_23:

      double v19 = *(void **)(*(void *)(a1 + 32) + 136);
      id v20 = objc_retainBlock(*(id *)(a1 + 40));
      [v19 addObject:v20];

      return [*(id *)(a1 + 32) scheduleAuthorizationRequestTimeoutForCompletionBlock:*(void *)(a1 + 40) timeout:*(double *)(a1 + 56)];
    }
LABEL_16:
    if (v14 == 3) {
      unsigned int v17 = 3;
    }
    else {
      unsigned int v17 = 2;
    }
    if (v14 == 2) {
      uint64_t v18 = 4;
    }
    else {
      uint64_t v18 = v17;
    }
    id v16 = AFEffectiveSiriBundlePathForLocation();
    +[CLLocationManager setAuthorizationStatusByType:v18 forBundlePath:v16];
    goto LABEL_23;
  }
LABEL_4:
  BOOL v8 = (void *)AFSiriLogContextLocation;
  if (os_log_type_enabled(AFSiriLogContextLocation, OS_LOG_TYPE_INFO))
  {
    uint64_t v9 = v4 & 1;
    uint64_t v10 = v8;
    id v11 = +[NSNumber numberWithBool:v9];
    id v12 = +[NSNumber numberWithInt:v7];
    uint64_t v13 = +[NSNumber numberWithInteger:v6];
    int v21 = 136315906;
    __int16 v22 = "-[ADLocationManager updateAuthorizationStyleWithUserSelection:timeout:completion:]_block_invoke";
    __int16 v23 = 2112;
    __int16 v24 = v11;
    __int16 v25 = 2112;
    __int16 v26 = v12;
    __int16 v27 = 2112;
    uint32_t v28 = v13;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "%s Authorization style update is not needed. Location services enabled: %@, current auth: %@, accuracy auth: %@", (uint8_t *)&v21, 0x2Au);
  }
  return (id)(*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
}

uint64_t sub_10018A374(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10018A50C(uint64_t a1)
{
  unint64_t v2 = AFSiriLogContextLocation;
  if (os_log_type_enabled(AFSiriLogContextLocation, OS_LOG_TYPE_INFO))
  {
    int v11 = 136315138;
    id v12 = "-[ADLocationManager requestTemporaryAccuracyAuthorizationWithStyle:timeout:completion:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s Internal queue hop", (uint8_t *)&v11, 0xCu);
  }
  unint64_t v3 = (unint64_t)[*(id *)(a1 + 32) currentState];
  if (v3)
  {
    unint64_t v7 = HIDWORD(v3);
    if (HIDWORD(v3) >= 3)
    {
      if ((HIDWORD(v3) - 3) >= 2) {
        return;
      }
      if (v4 == 1)
      {
        [*(id *)(a1 + 32) sendTemporaryAccuracyAuthorizationRequestWithTimeout:*(void *)(a1 + 40) completion:*(double *)(a1 + 48)];
        return;
      }
      if (v4) {
        return;
      }
      uint64_t v10 = AFSiriLogContextLocation;
      if (os_log_type_enabled(AFSiriLogContextLocation, OS_LOG_TYPE_INFO))
      {
        int v11 = 136315138;
        id v12 = "-[ADLocationManager requestTemporaryAccuracyAuthorizationWithStyle:timeout:completion:]_block_invoke";
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "%s Full accuracy is already granted", (uint8_t *)&v11, 0xCu);
      }
      uint64_t v9 = *(void (**)(void))(*(void *)(a1 + 40) + 16);
    }
    else
    {
      BOOL v8 = AFSiriLogContextLocation;
      if (os_log_type_enabled(AFSiriLogContextLocation, OS_LOG_TYPE_INFO))
      {
        int v11 = 136315394;
        id v12 = "-[ADLocationManager requestTemporaryAccuracyAuthorizationWithStyle:timeout:completion:]_block_invoke";
        __int16 v13 = 1024;
        int v14 = v7;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "%s Authorization status is a form of 'denied' with value: %d", (uint8_t *)&v11, 0x12u);
      }
      uint64_t v9 = *(void (**)(void))(*(void *)(a1 + 40) + 16);
    }
    v9();
    return;
  }
  uint64_t v5 = AFSiriLogContextLocation;
  if (os_log_type_enabled(AFSiriLogContextLocation, OS_LOG_TYPE_INFO))
  {
    int v11 = 136315138;
    id v12 = "-[ADLocationManager requestTemporaryAccuracyAuthorizationWithStyle:timeout:completion:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "%s Not requesting temporary accuracy authorization due to location services being completely disabled", (uint8_t *)&v11, 0xCu);
  }
  uint64_t v6 = +[NSError errorWithDomain:kAFLocationServiceErrorDomain code:9 userInfo:0];
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_10018A9B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10018A9E0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  uint64_t v5 = WeakRetained;
  if (WeakRetained)
  {
    uint64_t v6 = [WeakRetained _locationManager];
    objc_msgSend(v5, "setCurrentState:", +[CLLocationManager locationServicesEnabled](CLLocationManager, "locationServicesEnabled") | ((void)objc_msgSend(v6, "authorizationStatus") << 32), objc_msgSend(v6, "accuracyAuthorization"));

    [v5 currentState];
    uint64_t v8 = v7;
    uint64_t v9 = (void *)v5[17];
    id v10 = objc_retainBlock(*(id *)(a1 + 40));
    LODWORD(v9) = [v9 containsObject:v10];

    if (v9)
    {
      int v11 = (void *)AFSiriLogContextLocation;
      if (v3)
      {
        if (os_log_type_enabled(AFSiriLogContextLocation, OS_LOG_TYPE_ERROR))
        {
          id v12 = *(void **)(*(void *)(a1 + 32) + 136);
          __int16 v13 = v11;
          int v18 = 136315650;
          double v19 = "-[ADLocationManager sendTemporaryAccuracyAuthorizationRequestWithTimeout:completion:]_block_invoke";
          __int16 v20 = 2114;
          id v21 = v3;
          __int16 v22 = 2048;
          id v23 = [v12 count];
          _os_log_error_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "%s Temporary full accuracy request failed and it's intentionally ignored. Error: %{public}@. Currently awaiting requests count: %lu", (uint8_t *)&v18, 0x20u);
        }
      }
      else
      {
        if (os_log_type_enabled(AFSiriLogContextLocation, OS_LOG_TYPE_INFO))
        {
          int v14 = v11;
          uint64_t v15 = +[NSNumber numberWithInt:v8 == 0];
          int v18 = 136315394;
          double v19 = "-[ADLocationManager sendTemporaryAccuracyAuthorizationRequestWithTimeout:completion:]_block_invoke";
          __int16 v20 = 2112;
          id v21 = v15;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "%s Received non-error response for requestTemporaryFullAccuracyAuthorizationWithPurposeKey:completion:, preciseLocationEnabled: %@", (uint8_t *)&v18, 0x16u);
        }
        (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
        id v16 = (void *)v5[17];
        id v17 = objc_retainBlock(*(id *)(a1 + 40));
        [v16 removeObject:v17];
      }
    }
  }
}

void sub_10018ADF8(uint64_t a1)
{
  unint64_t v2 = AFSiriLogContextLocation;
  if (os_log_type_enabled(AFSiriLogContextLocation, OS_LOG_TYPE_INFO))
  {
    int v18 = 136315138;
    double v19 = "-[ADLocationManager requestAuthorizationWithStyle:timeout:completion:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s Internal queue hop", (uint8_t *)&v18, 0xCu);
  }
  unint64_t v3 = (unint64_t)[*(id *)(a1 + 32) currentState];
  if (v3)
  {
    unint64_t v7 = HIDWORD(v3);
    uint64_t v5 = [*(id *)(a1 + 32) _locationManager];
    switch((int)v7)
    {
      case 0:
        uint64_t v8 = *(void **)(*(void *)(a1 + 32) + 136);
        id v9 = objc_retainBlock(*(id *)(a1 + 40));
        [v8 addObject:v9];

        [*(id *)(a1 + 32) scheduleAuthorizationRequestTimeoutForCompletionBlock:*(void *)(a1 + 40) timeout:*(double *)(a1 + 48)];
        id v10 = *(void **)(a1 + 32);
        if (!v10[8])
        {
          int v11 = AFSiriLogContextLocation;
          if (os_log_type_enabled(AFSiriLogContextLocation, OS_LOG_TYPE_INFO))
          {
            int v18 = 136315138;
            double v19 = "-[ADLocationManager requestAuthorizationWithStyle:timeout:completion:]_block_invoke";
            _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "%s Will request location authorization - grabbing assertion once", (uint8_t *)&v18, 0xCu);
            id v10 = *(void **)(a1 + 32);
          }
          uint64_t v12 = [v10 createLocationInUseAssertion];
          uint64_t v13 = *(void *)(a1 + 32);
          int v14 = *(void **)(v13 + 64);
          *(void *)(v13 + 64) = v12;
        }
        uint64_t v15 = *(void *)(a1 + 56);
        if (v15 == 1)
        {
          id v17 = AFSiriLogContextLocation;
          if (os_log_type_enabled(AFSiriLogContextLocation, OS_LOG_TYPE_INFO))
          {
            int v18 = 136315138;
            double v19 = "-[ADLocationManager requestAuthorizationWithStyle:timeout:completion:]_block_invoke";
            _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "%s Requesting 'always' location authorization", (uint8_t *)&v18, 0xCu);
          }
          [v5 requestAlwaysAuthorization];
        }
        else if (!v15)
        {
          id v16 = AFSiriLogContextLocation;
          if (os_log_type_enabled(AFSiriLogContextLocation, OS_LOG_TYPE_INFO))
          {
            int v18 = 136315138;
            double v19 = "-[ADLocationManager requestAuthorizationWithStyle:timeout:completion:]_block_invoke";
            _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "%s Requesting 'when in use' location authorization", (uint8_t *)&v18, 0xCu);
          }
          [v5 requestWhenInUseAuthorization];
        }
        break;
      default:
        uint64_t v6 = *(void (**)(void))(*(void *)(a1 + 40) + 16);
        goto LABEL_18;
    }
  }
  else
  {
    uint64_t v4 = AFSiriLogContextLocation;
    if (os_log_type_enabled(AFSiriLogContextLocation, OS_LOG_TYPE_INFO))
    {
      int v18 = 136315138;
      double v19 = "-[ADLocationManager requestAuthorizationWithStyle:timeout:completion:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%s Not requesting location authorization due to location services being completely disabled", (uint8_t *)&v18, 0xCu);
    }
    uint64_t v5 = +[NSError errorWithDomain:kAFLocationServiceErrorDomain code:9 userInfo:0];
    uint64_t v6 = *(void (**)(void))(*(void *)(a1 + 40) + 16);
LABEL_18:
    v6();
  }
}

uint64_t sub_10018B284(uint64_t a1)
{
  unint64_t v2 = AFSiriLogContextLocation;
  if (os_log_type_enabled(AFSiriLogContextLocation, OS_LOG_TYPE_INFO))
  {
    int v4 = 136315138;
    uint64_t v5 = "-[ADLocationManager currentAuthorizationStyle:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s Internal queue hop", (uint8_t *)&v4, 0xCu);
  }
  [*(id *)(a1 + 32) currentState];
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
}

uint64_t sub_10018BA04(id *a1)
{
  id WeakRetained = (id *)objc_loadWeakRetained(a1 + 6);
  unint64_t v3 = WeakRetained;
  if (WeakRetained)
  {
    uint64_t v8 = WeakRetained;
    id WeakRetained = (id *)[WeakRetained[18] containsObject:a1[4]];
    unint64_t v3 = v8;
    if (WeakRetained)
    {
      int v4 = [a1[5] lastShiftedLocation];
      if (v4)
      {
        uint64_t v5 = 0;
      }
      else
      {
        uint64_t v5 = +[NSError errorWithDomain:kAFLocationServiceErrorDomain code:3 userInfo:0];
      }
      uint64_t v6 = [a1[4] completion];
      ((void (**)(void, void *, void *))v6)[2](v6, v4, v5);

      [v8[18] removeObject:a1[4]];
      unint64_t v3 = v8;
    }
  }
  return _objc_release_x1(WeakRetained, v3);
}

void sub_10018BBF0(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  unint64_t v3 = WeakRetained;
  if (WeakRetained)
  {
    int v4 = (void *)WeakRetained[17];
    id v5 = objc_retainBlock(*(id *)(a1 + 32));
    LODWORD(v4) = [v4 containsObject:v5];

    if (v4)
    {
      uint64_t v6 = +[NSError errorWithDomain:kAFLocationServiceErrorDomain code:3 userInfo:0];
      (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
      unint64_t v7 = (void *)v3[17];
      id v8 = objc_retainBlock(*(id *)(a1 + 32));
      [v7 removeObject:v8];
    }
  }
  else
  {
    id v9 = AFSiriLogContextLocation;
    if (os_log_type_enabled(AFSiriLogContextLocation, OS_LOG_TYPE_ERROR))
    {
      int v10 = 136315138;
      int v11 = "-[ADLocationManager scheduleAuthorizationRequestTimeoutForCompletionBlock:timeout:]_block_invoke";
      _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "%s ADLocationManager is deallocated unexpectedly when location fetch timeout was triggered", (uint8_t *)&v10, 0xCu);
    }
  }
}

id sub_10018BE10(uint64_t a1)
{
  *(unsigned char *)(*(void *)(a1 + 32) + 192) = 0;
  unint64_t v2 = AFSiriLogContextLocation;
  if (os_log_type_enabled(AFSiriLogContextLocation, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 40);
    int v5 = 136315394;
    uint64_t v6 = "-[ADLocationManager dismissedAllVisibleAssistantUIForReason:]_block_invoke";
    __int16 v7 = 2112;
    uint64_t v8 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%s UI dismissed per %@, ending location update session", (uint8_t *)&v5, 0x16u);
  }
  return [*(id *)(a1 + 32) endLocationUpdateSessionIfNeeded];
}

uint64_t sub_10018BFA0(uint64_t a1)
{
  *(unsigned char *)(*(void *)(a1 + 32) + 192) = 1;
  if (*(void *)(*(void *)(a1 + 32) + 64))
  {
    unint64_t v2 = AFSiriLogContextLocation;
    if (os_log_type_enabled(AFSiriLogContextLocation, OS_LOG_TYPE_INFO))
    {
      CFStringRef v3 = &stru_10050F7D8;
      if (*(void *)(a1 + 40)) {
        CFStringRef v3 = *(const __CFString **)(a1 + 40);
      }
      *(_DWORD *)stat buf = 136315394;
      int v11 = "-[ADLocationManager showingVisibleAssistantUIForReason:completion:]_block_invoke";
      __int16 v12 = 2112;
      CFStringRef v13 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s '%@' - already have an assertion, nothing to do", buf, 0x16u);
    }
  }
  else
  {
    int v4 = +[NSString stringWithFormat:@"first showed active UI per %@", *(void *)(a1 + 40)];
    int v5 = AFSiriLogContextLocation;
    if (os_log_type_enabled(AFSiriLogContextLocation, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)stat buf = 136315394;
      int v11 = "-[ADLocationManager showingVisibleAssistantUIForReason:completion:]_block_invoke";
      __int16 v12 = 2112;
      CFStringRef v13 = v4;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "%s '%@' - grabbing assertion once", buf, 0x16u);
    }
    uint64_t v6 = [*(id *)(a1 + 32) createLocationInUseAssertion];
    uint64_t v7 = *(void *)(a1 + 32);
    uint64_t v8 = *(void **)(v7 + 64);
    *(void *)(v7 + 64) = v6;
  }
  uint64_t result = *(void *)(a1 + 48);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_10018C274(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = v3;
  if (v3)
  {
    [v3 latitude];
    if (v5 == 0.0)
    {
      [v4 longitude];
      if (v6 != 0.0)
      {
        uint64_t v7 = (void *)AFSiriLogContextLocation;
        if (os_log_type_enabled(AFSiriLogContextLocation, OS_LOG_TYPE_ERROR))
        {
          int v11 = v7;
          [v4 latitude];
          uint64_t v13 = v12;
          [v4 longitude];
          *(_DWORD *)stat buf = 136315651;
          double v19 = "-[ADLocationManager updateLocationForCommand:completion:]_block_invoke";
          __int16 v20 = 2049;
          uint64_t v21 = v13;
          __int16 v22 = 2049;
          uint64_t v23 = v14;
          _os_log_error_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "%s Zero latitude in SASetRequestOrigin. Latitude: %{private}f, Longitude: %{private}f", buf, 0x20u);
        }
      }
    }
  }
  uint64_t v8 = *(NSObject **)(*(void *)(a1 + 32) + 48);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  void v15[2] = sub_10018C7D0;
  v15[3] = &unk_10050E188;
  id v9 = *(id *)(a1 + 40);
  id v16 = v4;
  id v17 = v9;
  id v10 = v4;
  dispatch_async(v8, v15);
}

void sub_10018C414(id *a1)
{
  if (([a1[4] currentState] & 1) == 0)
  {
    id v3 = AFSiriLogContextLocation;
    if (os_log_type_enabled(AFSiriLogContextLocation, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)stat buf = 136315138;
      uint64_t v29 = "-[ADLocationManager updateLocationForCommand:completion:]_block_invoke_2";
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "%s Location Services Disabled", buf, 0xCu);
    }
    [a1[4] _generateLocationDisabledResponseForGetRequestOriginCommand:a1[5] completion:a1[6]];
    return;
  }
  uint64_t v4 = v2;
  if (AFLocationStatusIsDenied())
  {
    double v5 = AFSiriLogContextLocation;
    if (os_log_type_enabled(AFSiriLogContextLocation, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)stat buf = 136315138;
      uint64_t v29 = "-[ADLocationManager updateLocationForCommand:completion:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "%s Location Services Denied for assistant", buf, 0xCu);
    }
    [a1[4] _generateLocationDeniedResponseForGetRequestOriginCommand:a1[5] completion:a1[6]];
    return;
  }
  if (([a1[4] _locationUpdateIsCapableOfSucceeding] & 1) != 0
    || (+[ADPreferences sharedPreferences],
        double v6 = objc_claimAutoreleasedReturnValue(),
        unsigned __int8 v7 = [v6 ignoreLocationWiFiStatus],
        v6,
        (v7 & 1) != 0))
  {
    uint64_t v8 = a1[4];
    if (a1[5])
    {
      id v27 = [v8 locationForSnapshot];
      [a1[5] desiredCLAccuracy];
      if ((v4 || objc_msgSend(v27, "_af_isWithinAccuracy:"))
        && ([a1[5] maxAge],
            id v9 = objc_claimAutoreleasedReturnValue(),
            unsigned __int8 v10 = objc_msgSend(v27, "_af_isOlderThanAge:", v9),
            v9,
            (v10 & 1) == 0))
      {
        [a1[4] _generateResponseForGetRequestOriginCommand:a1[5] withUnshiftedLocation:v27 completion:a1[6]];
      }
      else
      {
        unsigned int v11 = [(id)objc_opt_class() _shouldUseOneshotLocationRequest];
        id v12 = a1[4];
        id v13 = a1[5];
        id v14 = a1[6];
        if (v11) {
          [v12 _requestLocationForGetRequestOrigin:v13 completion:v14];
        }
        else {
          [v12 _startMonitoringLocationForGetRequestOrigin:v13 completion:v14];
        }
      }

      return;
    }
    uint64_t v15 = (void *)v8[14];
    if (v15)
    {
      id v16 = v15;
    }
    else
    {
      id v16 = [v8 locationForSnapshot];
      if (!v16)
      {
        uint64_t v23 = AFSiriLogContextLocation;
        if (os_log_type_enabled(AFSiriLogContextLocation, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)stat buf = 136315138;
          uint64_t v29 = "-[ADLocationManager updateLocationForCommand:completion:]_block_invoke";
          _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "%s No cached location, waiting for first update", buf, 0xCu);
        }
        id v24 = objc_retainBlock(a1[6]);
        __int16 v25 = a1[4];
        __int16 v26 = (void *)v25[4];
        void v25[4] = v24;

        id v16 = 0;
        goto LABEL_31;
      }
    }
    __int16 v20 = AFSiriLogContextLocation;
    if (os_log_type_enabled(AFSiriLogContextLocation, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)stat buf = 136315138;
      uint64_t v29 = "-[ADLocationManager updateLocationForCommand:completion:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "%s Using cached location", buf, 0xCu);
    }
    [a1[4] _generateResponseForGetRequestOriginCommand:a1[5] withUnshiftedLocation:v16 completion:a1[6]];
LABEL_31:
    unsigned int v21 = [(id)objc_opt_class() _shouldUseOneshotLocationRequest];
    __int16 v22 = (double *)a1[4];
    if (v21) {
      [v22 _requestLocationWithBestAccuracy];
    }
    else {
      [v22 _startMonitoringLocationWithDesiredAccuracy:v22[21]];
    }

    return;
  }
  id v17 = a1[4];
  id v18 = a1[5];
  id v19 = a1[6];
  _[v17 _generateLocationWiFiOffResponseForGetRequestOriginCommand:v18 completion:v19];
}

uint64_t sub_10018C7D0(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, *(void *)(a1 + 32));
  }
  return result;
}

uint64_t sub_10018CEA4(uint64_t a1)
{
  [*(id *)(a1 + 32) updateLocationSnapshot];
  uint64_t result = *(void *)(a1 + 40);
  if (result)
  {
    id v3 = *(uint64_t (**)(void))(result + 16);
    return v3();
  }
  return result;
}

void sub_10018D230(id a1, AFLocationSnapshotMutating *a2)
{
}

void sub_10018D23C(id a1, AFLocationSnapshotMutating *a2)
{
}

id sub_10018D6F4(uint64_t a1)
{
  v10[0] = @"newAuthorization";
  uint64_t v2 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 44)];
  v11[0] = v2;
  v10[1] = @"lastAuthorization";
  id v3 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 60)];
  v11[1] = v3;
  v10[2] = @"lastEnabled";
  uint64_t v4 = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 56)];
  v11[2] = v4;
  v10[3] = @"refID";
  uint64_t v5 = [*(id *)(*(void *)(a1 + 32) + 24) aceId];
  double v6 = (void *)v5;
  CFStringRef v7 = @"NULL";
  if (v5) {
    CFStringRef v7 = (const __CFString *)v5;
  }
  v11[3] = v7;
  uint64_t v8 = +[NSDictionary dictionaryWithObjects:v11 forKeys:v10 count:4];

  return v8;
}

void sub_10018D840(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(NSObject **)(v4 + 48);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  void v7[2] = sub_10018DABC;
  v7[3] = &unk_10050E160;
  void v7[4] = v4;
  id v8 = v3;
  id v6 = v3;
  dispatch_async(v5, v7);
}

void sub_10018D8DC(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(NSObject **)(v4 + 48);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  void v7[2] = sub_10018DA68;
  v7[3] = &unk_10050E160;
  void v7[4] = v4;
  id v8 = v3;
  id v6 = v3;
  dispatch_async(v5, v7);
}

void sub_10018D978(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(NSObject **)(v4 + 48);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  void v7[2] = sub_10018DA14;
  v7[3] = &unk_10050E160;
  void v7[4] = v4;
  id v8 = v3;
  id v6 = v3;
  dispatch_async(v5, v7);
}

void sub_10018DA14(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 40));
  [WeakRetained locationManager:*(void *)(a1 + 32) wantsToSetRequestOrigin:*(void *)(a1 + 40)];
}

void sub_10018DA68(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 40));
  [WeakRetained locationManager:*(void *)(a1 + 32) wantsToSetRequestOrigin:*(void *)(a1 + 40)];
}

void sub_10018DABC(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 40));
  [WeakRetained locationManager:*(void *)(a1 + 32) wantsToSetRequestOrigin:*(void *)(a1 + 40)];
}

id sub_10018DEA4(uint64_t a1)
{
  v11[0] = @"errorCode";
  uint64_t v2 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [*(id *)(a1 + 32) code]);
  v12[0] = v2;
  v11[1] = @"errorDomain";
  uint64_t v3 = [*(id *)(a1 + 32) domain];
  uint64_t v4 = (void *)v3;
  if (v3) {
    CFStringRef v5 = (const __CFString *)v3;
  }
  else {
    CFStringRef v5 = @"NULL";
  }
  v12[1] = v5;
  v11[2] = @"refID";
  uint64_t v6 = [*(id *)(*(void *)(a1 + 40) + 24) aceId];
  CFStringRef v7 = (void *)v6;
  if (v6) {
    CFStringRef v8 = (const __CFString *)v6;
  }
  else {
    CFStringRef v8 = @"NULL";
  }
  v12[2] = v8;
  id v9 = +[NSDictionary dictionaryWithObjects:v12 forKeys:v11 count:3];

  return v9;
}

void sub_10018E310(_Unwind_Exception *a1)
{
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 144));
  _Unwind_Resume(a1);
}

void sub_10018E33C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    uint64_t v3 = +[NSError errorWithDomain:kAFLocationServiceErrorDomain code:7 userInfo:0];
    [WeakRetained drainLocationFetchRequestsWithPossibleError:v3];
    [WeakRetained endLocationUpdateSessionIfNeeded];
  }
  else
  {
    uint64_t v4 = (void *)AFSiriLogContextLocation;
    if (os_log_type_enabled(AFSiriLogContextLocation, OS_LOG_TYPE_ERROR))
    {
      CFStringRef v5 = *(const char **)(a1 + 40);
      uint64_t v6 = v4;
      CFStringRef v7 = NSStringFromSelector(v5);
      int v8 = 136315394;
      id v9 = "-[ADLocationManager locationManager:didUpdateLocations:]_block_invoke";
      __int16 v10 = 2112;
      unsigned int v11 = v7;
      _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "%s ADLocationManager is deallocated unexpectedly while waiting for location shifting to complete. Origin %@", (uint8_t *)&v8, 0x16u);
    }
  }
}

void sub_10018E47C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    if (v6)
    {
      NSErrorUserInfoKey v14 = NSUnderlyingErrorKey;
      id v15 = v6;
      int v8 = +[NSDictionary dictionaryWithObjects:&v15 forKeys:&v14 count:1];
      id v9 = +[NSError errorWithDomain:kAFLocationServiceErrorDomain code:8 userInfo:v8];
    }
    else
    {
      id v9 = 0;
    }
    [WeakRetained setLastShiftedLocation:v5];
    [WeakRetained updateLocationSnapshot];
    [WeakRetained drainLocationFetchRequestsWithPossibleError:v9];
    [WeakRetained endLocationUpdateSessionIfNeeded];
  }
  else
  {
    __int16 v10 = (void *)AFSiriLogContextLocation;
    if (os_log_type_enabled(AFSiriLogContextLocation, OS_LOG_TYPE_ERROR))
    {
      unsigned int v11 = *(const char **)(a1 + 40);
      id v12 = v10;
      id v13 = NSStringFromSelector(v11);
      *(_DWORD *)stat buf = 136315394;
      id v17 = "-[ADLocationManager locationManager:didUpdateLocations:]_block_invoke";
      __int16 v18 = 2112;
      id v19 = v13;
      _os_log_error_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "%s ADLocationManager is deallocated unexpectedly while waiting for location shifting to complete. Origin %@", buf, 0x16u);
    }
  }
}

void sub_10018E730(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(void **)(v1 + 112);
  *(void *)(v1 + 112) = 0;
}

void sub_10018E874(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (!*(void *)(v2 + 112))
  {
LABEL_4:
    objc_storeStrong((id *)(v2 + 112), *(id *)(a1 + 40));
    uint64_t v3 = *(void **)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 40);
    [v3 _processUpdatedLocation:v4];
    return;
  }
  if (objc_msgSend(*(id *)(a1 + 40), "ad_isNewerThan:"))
  {
    uint64_t v2 = *(void *)(a1 + 32);
    goto LABEL_4;
  }
  id v5 = AFSiriLogContextLocation;
  if (os_log_type_enabled(AFSiriLogContextLocation, OS_LOG_TYPE_INFO))
  {
    int v6 = 136315138;
    CFStringRef v7 = "-[ADLocationManager peerLocationConnection:didReceiveUnsolicitedLocation:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "%s Ignoring location older than _lastPeerLocation", (uint8_t *)&v6, 0xCu);
  }
}

void sub_10018EAD0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(NSObject **)(v4 + 48);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  void v7[2] = sub_10018EB6C;
  v7[3] = &unk_10050E160;
  void v7[4] = v4;
  id v8 = v3;
  id v6 = v3;
  dispatch_async(v5, v7);
}

void sub_10018EB6C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 40));
  [WeakRetained locationManager:*(void *)(a1 + 32) wantsToSetRequestOrigin:*(void *)(a1 + 40)];
}

void sub_10018EFBC(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = AFSiriLogContextLocation;
  BOOL v5 = os_log_type_enabled(AFSiriLogContextLocation, OS_LOG_TYPE_INFO);
  if (v3)
  {
    if (v5)
    {
      *(_DWORD *)stat buf = 136315395;
      unsigned int v11 = "-[ADLocationManager _requestLocationWithBestAccuracy]_block_invoke";
      __int16 v12 = 2113;
      id v13 = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%s Received location from peer: %{private}@", buf, 0x16u);
    }
    uint64_t v6 = *(void *)(a1 + 32);
    CFStringRef v7 = *(NSObject **)(v6 + 8);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_10018F13C;
    v8[3] = &unk_10050E160;
    void v8[4] = v6;
    id v9 = v3;
    dispatch_async(v7, v8);
  }
  else if (v5)
  {
    *(_DWORD *)stat buf = 136315138;
    unsigned int v11 = "-[ADLocationManager _requestLocationWithBestAccuracy]_block_invoke_2";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%s Received empty location response from peer", buf, 0xCu);
  }
}

id sub_10018F13C(uint64_t a1)
{
  objc_storeStrong((id *)(*(void *)(a1 + 32) + 112), *(id *)(a1 + 40));
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  return [v2 _processUpdatedLocation:v3];
}

void sub_10018F578(uint64_t a1)
{
  uint64_t v2 = AFSiriLogContextLocation;
  if (os_log_type_enabled(AFSiriLogContextLocation, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)stat buf = 136315138;
    NSErrorUserInfoKey v14 = "-[ADLocationManager _scheduleLocationTimerWithTimeout:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s Location timer firing", buf, 0xCu);
  }
  id v3 = *(id *)(*(void *)(a1 + 32) + 24);
  if (v3)
  {
    uint64_t v4 = [*(id *)(a1 + 32) locationForSnapshot];
    if (v4)
    {
      [*(id *)(a1 + 32) _generateResponseForGetRequestOriginCommand:v3 withUnshiftedLocation:v4 completion:*(void *)(*(void *)(a1 + 32) + 32)];
    }
    else
    {
      BOOL v5 = +[AFAnalytics sharedAnalytics];
      uint64_t v6 = +[NSNumber numberWithDouble:*(double *)(a1 + 40), @"timeout"];
      v11[1] = @"refID";
      v12[0] = v6;
      uint64_t v7 = [v3 aceId];
      id v8 = (void *)v7;
      CFStringRef v9 = @"NULL";
      if (v7) {
        CFStringRef v9 = (const __CFString *)v7;
      }
      v12[1] = v9;
      __int16 v10 = +[NSDictionary dictionaryWithObjects:v12 forKeys:v11 count:2];
      [v5 logEventWithType:1929 context:v10];

      [*(id *)(a1 + 32) _triggerLocationABCForSubtype:@"location_timeout"];
      [*(id *)(a1 + 32) _generateLocationTimedOutResponseForGetRequestOriginCommand:v3 completion:*(void *)(*(void *)(a1 + 32) + 32)];
    }
    [*(id *)(a1 + 32) _clearCompletionState];
  }
  [*(id *)(a1 + 32) _cancelLocationTimer];
  [*(id *)(a1 + 32) endLocationUpdateSessionIfNeeded];
}

id sub_10018FA04(uint64_t a1)
{
  uint64_t v2 = AFSiriLogContextLocation;
  if (os_log_type_enabled(AFSiriLogContextLocation, OS_LOG_TYPE_INFO))
  {
    int v4 = 136315138;
    BOOL v5 = "-[ADLocationManager _scheduleLocationSLATimer]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s Location-SLA timer firing", (uint8_t *)&v4, 0xCu);
  }
  [*(id *)(a1 + 32) _triggerLocationABCForSubtype:@"slow_location_update"];
  return [*(id *)(a1 + 32) _cancelLocationSLATimer];
}

void sub_1001900D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,id location)
{
  objc_destroyWeak(v26);
  objc_destroyWeak(v25);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100190104(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  id v3 = WeakRetained;
  if (WeakRetained)
  {
    [WeakRetained _generateLocationTimedOutResponseForGetRequestOriginCommand:*(void *)(a1 + 32) completion:*(void *)(a1 + 40)];
  }
  else
  {
    int v4 = (void *)AFSiriLogContextLocation;
    if (os_log_type_enabled(AFSiriLogContextLocation, OS_LOG_TYPE_ERROR))
    {
      BOOL v5 = *(const char **)(a1 + 56);
      uint64_t v6 = v4;
      uint64_t v7 = NSStringFromSelector(v5);
      int v8 = 136315394;
      CFStringRef v9 = "-[ADLocationManager _generateResponseForGetRequestOriginCommand:withUnshiftedLocation:completion:]_block_invoke";
      __int16 v10 = 2112;
      unsigned int v11 = v7;
      _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "%s ADLocationManager is deallocated unexpectedly while waiting for location shifting to complete. Origin %@", (uint8_t *)&v8, 0x16u);
    }
  }
}

void sub_100190210(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 48));
  uint64_t v7 = WeakRetained;
  if (!WeakRetained)
  {
    int v8 = (void *)AFSiriLogContextLocation;
    if (!os_log_type_enabled(AFSiriLogContextLocation, OS_LOG_TYPE_ERROR)) {
      goto LABEL_12;
    }
    CFStringRef v9 = *(const char **)(a1 + 56);
    __int16 v10 = v8;
    unsigned int v11 = NSStringFromSelector(v9);
    int v19 = 136315394;
    __int16 v20 = "-[ADLocationManager _generateResponseForGetRequestOriginCommand:withUnshiftedLocation:completion:]_block_invoke";
    __int16 v21 = 2112;
    id v22 = v11;
    _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "%s ADLocationManager is deallocated unexpectedly while waiting for location shifting to complete. Origin %@", (uint8_t *)&v19, 0x16u);

LABEL_11:
    goto LABEL_12;
  }
  if (!a3)
  {
    [v5 coordinate];
    if (v12 == 0.0)
    {
      [v5 coordinate];
      if (v13 != 0.0)
      {
        NSErrorUserInfoKey v14 = AFSiriLogContextLocation;
        if (os_log_type_enabled(AFSiriLogContextLocation, OS_LOG_TYPE_ERROR))
        {
          int v19 = 136315395;
          __int16 v20 = "-[ADLocationManager _generateResponseForGetRequestOriginCommand:withUnshiftedLocation:completion:]_block_invoke";
          __int16 v21 = 2113;
          id v22 = v5;
          _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "%s Zero latitude detected: %{private}@", (uint8_t *)&v19, 0x16u);
        }
      }
    }
    __int16 v10 = objc_opt_new();
    [v7 currentState];
    id v16 = +[NSNumber numberWithInt:v15 == 0];
    [v10 setPreciseLocationEnabled:v16];

    [v10 setPropertiesWithCLLocation:v5];
    id v17 = [*(id *)(a1 + 32) aceId];
    [v10 setRefId:v17];

    __int16 v18 = [*(id *)(a1 + 32) desiredAccuracy];
    [v10 setDesiredAccuracy:v18];

    [v7[15] logLocationSend];
    [v7 setLocationSentToServer:v5];
    [v7 setNeedsToSendLocation:0];
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
    goto LABEL_11;
  }
  [WeakRetained _generateLocationUnknownResponseForGetRequestOriginCommand:*(void *)(a1 + 32) completion:*(void *)(a1 + 40)];
LABEL_12:
}

void sub_10019068C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1001906AC(uint64_t result)
{
  uint64_t v1 = *(void *)(*(void *)(result + 40) + 8);
  if (!*(unsigned char *)(v1 + 24))
  {
    uint64_t v2 = result;
    *(unsigned char *)(v1 + 24) = 1;
    id v3 = AFSiriLogContextLocation;
    if (os_log_type_enabled(AFSiriLogContextLocation, OS_LOG_TYPE_INFO))
    {
      int v4 = 136315138;
      id v5 = "-[ADLocationManager shiftLocationWithTimeout:timeoutHandler:completion:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "%s Location shifting timed out", (uint8_t *)&v4, 0xCu);
    }
    return (*(uint64_t (**)(void))(*(void *)(v2 + 32) + 16))();
  }
  return result;
}

uint64_t sub_100190780(uint64_t result)
{
  uint64_t v1 = *(void *)(*(void *)(result + 40) + 8);
  if (!*(unsigned char *)(v1 + 24))
  {
    *(unsigned char *)(v1 + 24) = 1;
    return (*(uint64_t (**)(void))(*(void *)(result + 32) + 16))();
  }
  return result;
}

void sub_100190A20(uint64_t a1, CLLocationDegrees a2, CLLocationDegrees a3, double a4)
{
  id v8 = *(id *)(a1 + 32);
  CLLocationCoordinate2D v9 = CLLocationCoordinate2DMake(a2, a3);
  id v10 = objc_alloc((Class)CLLocation);
  [v8 altitude];
  double v12 = v11;
  [v8 verticalAccuracy];
  double v14 = v13;
  uint64_t v15 = [v8 timestamp];

  id v16 = objc_msgSend(v10, "initWithCoordinate:altitude:horizontalAccuracy:verticalAccuracy:timestamp:referenceFrame:", v15, 2, v9.latitude, v9.longitude, v12, a4, v14);
  id v17 = AFSiriLogContextLocation;
  if (os_log_type_enabled(AFSiriLogContextLocation, OS_LOG_TYPE_INFO))
  {
    int v18 = 136315138;
    int v19 = "-[ADLocationManager shiftLocation:completion:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "%s Successfully performed location shifting", (uint8_t *)&v18, 0xCu);
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_100190B9C(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = AFSiriLogContextLocation;
  if (os_log_type_enabled(AFSiriLogContextLocation, OS_LOG_TYPE_ERROR))
  {
    int v5 = 136315394;
    uint64_t v6 = "-[ADLocationManager shiftLocation:completion:]_block_invoke";
    __int16 v7 = 2114;
    id v8 = v3;
    _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "%s Shifting location failed due to error: %{public}@", (uint8_t *)&v5, 0x16u);
  }
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100190C84(id a1)
{
  uint64_t v1 = AFSiriLogContextLocation;
  if (os_log_type_enabled(AFSiriLogContextLocation, OS_LOG_TYPE_INFO))
  {
    int v2 = 136315138;
    id v3 = "-[ADLocationManager shiftLocation:completion:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_INFO, "%s Location shifter needs to fetch shifter function from network", (uint8_t *)&v2, 0xCu);
  }
}

id sub_100190FA8(uint64_t a1)
{
  uint64_t IsActive = AFMapsNavigationStatusIsActive();
  id v3 = *(void **)(a1 + 32);
  return _[v3 setIsNavigating:IsActive];
}

void sub_100191914(uint64_t a1, unint64_t a2)
{
  id v3 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", @"Queue %s did not respond to watchdog and is likely blocked.", dispatch_queue_get_label(*(dispatch_queue_t *)(a1 + 32)));
  int v4 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)stat buf = 136315394;
    __int16 v7 = "-[ADLocationManager initWithSerialQueue:]_block_invoke";
    __int16 v8 = 2112;
    id v9 = v3;
    _os_log_fault_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "%s %@", buf, 0x16u);
  }
  int v5 = AFIsInternalInstall();
  if (a2 <= 3 && v5) {
    WriteStackshotReport_async();
  }
}

void sub_100191A30(uint64_t a1)
{
  uint64_t v1 = [*(id *)(a1 + 32) _locationManager];
}

uint64_t sub_100191C34(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100191C4C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) currentState];
  uint64_t v4 = v3;
  int v5 = AFSiriLogContextLocation;
  if (os_log_type_enabled(AFSiriLogContextLocation, OS_LOG_TYPE_INFO))
  {
    uint64_t v6 = *(void *)(a1 + 32);
    if (*(unsigned char *)(v6 + 88)) {
      __int16 v7 = "WILL";
    }
    else {
      __int16 v7 = "Will NOT";
    }
    *(_DWORD *)stat buf = 136315650;
    id v17 = "-[ADLocationManager fetchLocationAuthorization:]_block_invoke_2";
    __int16 v18 = 2080;
    int v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "%s %s wait for initial location callback %p", buf, 0x20u);
  }
  uint64_t v8 = *(void *)(a1 + 32);
  id v9 = *(NSObject **)(v8 + 96);
  id v10 = *(NSObject **)(v8 + 8);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  void v12[2] = sub_100191DCC;
  void v12[3] = &unk_100507500;
  id v11 = *(id *)(a1 + 40);
  id v14 = v2;
  uint64_t v15 = v4;
  void v12[4] = *(void *)(a1 + 32);
  id v13 = v11;
  dispatch_group_notify(v9, v10, v12);
}

void sub_100191DCC(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  id v2 = AFSiriLogContextLocation;
  if (os_log_type_enabled(AFSiriLogContextLocation, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v4 = 136315394;
    int v5 = "-[ADLocationManager fetchLocationAuthorization:]_block_invoke";
    __int16 v6 = 2048;
    uint64_t v7 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s Got initial location callback %p", (uint8_t *)&v4, 0x16u);
  }
}

void sub_100191FC4(id a1)
{
  uint64_t v1 = AFEffectiveSiriBundlePathForLocation();
  unsigned int v2 = +[CLLocationManager authorizationStatusForBundlePath:v1];

  if (!v2)
  {
    uint64_t v3 = AFSiriLogContextLocation;
    if (os_log_type_enabled(AFSiriLogContextLocation, OS_LOG_TYPE_INFO))
    {
      int v7 = 136315138;
      uint64_t v8 = "+[ADLocationManager prepareForAssistantEnablementInBackground]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "%s Location authorization status for Siri is not determined, granting default authorization for Siri requests.", (uint8_t *)&v7, 0xCu);
    }
    int v4 = AFIsMac();
    int v5 = AFEffectiveSiriBundleForLocation();
    if (v4) {
      +[CLLocationManager setAuthorizationStatus:1 forBundle:v5];
    }
    else {
      +[CLLocationManager setAuthorizationStatusByType:4 forBundle:v5];
    }

    __int16 v6 = AFSiriLogContextLocation;
    if (os_log_type_enabled(AFSiriLogContextLocation, OS_LOG_TYPE_INFO))
    {
      int v7 = 136315138;
      uint64_t v8 = "+[ADLocationManager prepareForAssistantEnablementInBackground]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "%s Prepared location subsystem for Siri.", (uint8_t *)&v7, 0xCu);
    }
  }
}

id sub_10019292C(uint64_t a1)
{
  [*(id *)(a1 + 32) setParticipation:0];
  [*(id *)(a1 + 32) setCompletedTurnId:0];
  unsigned int v2 = *(void **)(a1 + 32);
  return [v2 setExecutionContexts:0];
}

void sub_100192B7C(uint64_t a1, void *a2, char a3)
{
  id v5 = a2;
  __int16 v6 = v5;
  if ((a3 & 1) != 0 || ![v5 count])
  {
    id v11 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      int v13 = 136315138;
      id v14 = "-[ADArbitrationFeedbackManager _forwardToContextCollectorMessage:From:completion:]_block_invoke";
      _os_log_debug_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "%s #myriad #feedback Location Sharing Device or Context Collector not found. Returning.", (uint8_t *)&v13, 0xCu);
    }
    id v9 = +[AFError errorWithCode:1011 description:@"Unable to find location sharing device."];
    uint64_t v12 = *(void *)(a1 + 56);
    if (v12) {
      (*(void (**)(uint64_t, void, void *))(v12 + 16))(v12, 0, v9);
    }
  }
  else
  {
    int v7 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      int v13 = 136315138;
      id v14 = "-[ADArbitrationFeedbackManager _forwardToContextCollectorMessage:From:completion:]_block_invoke";
      _os_log_debug_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "%s #myriad #feedback Forwarding arbitration request to context collector", (uint8_t *)&v13, 0xCu);
    }
    uint64_t v8 = [v6 firstObject];
    id v9 = sub_10016A850(v8);

    id v10 = [v9 assistantIdentifier];
    [*(id *)(a1 + 32) _forwardToDevice:v10 message:*(void *)(a1 + 40) From:*(void *)(a1 + 48) completion:*(void *)(a1 + 56)];
  }
}

void sub_100192ED0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    int v7 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v9 = *(void *)(a1 + 32);
      int v10 = 136315650;
      id v11 = "-[ADArbitrationFeedbackManager _forwardToDevice:message:From:completion:]_block_invoke";
      __int16 v12 = 2112;
      uint64_t v13 = v9;
      __int16 v14 = 2112;
      id v15 = v6;
      _os_log_debug_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "%s #myriad #feedback Error in forwarding arbitration info to %@: error:%@", (uint8_t *)&v10, 0x20u);
    }
  }
  uint64_t v8 = *(void *)(a1 + 40);
  if (v8) {
    (*(void (**)(uint64_t, id, id))(v8 + 16))(v8, v5, v6);
  }
}

id sub_10019329C(uint64_t a1, void *a2)
{
  uint64_t v3 = [a2 idsDeviceUniqueIdentifier];
  id v4 = [v3 isEqualToString:*(void *)(a1 + 32)];

  return v4;
}

BOOL sub_1001932F0(id a1, AFPeerInfo *a2, unint64_t a3, BOOL *a4)
{
  id v4 = [(AFPeerInfo *)a2 rapportEffectiveIdentifier];
  unsigned __int8 v5 = [v4 isEqualToString:@"BTPipe-Phone"];

  return v5;
}

void sub_10019357C(uint64_t a1, void *a2, char a3)
{
  id v5 = a2;
  id v6 = *(NSObject **)(*(void *)(a1 + 32) + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100193654;
  block[3] = &unk_100509CF0;
  char v15 = a3;
  id v7 = *(id *)(a1 + 48);
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void **)(a1 + 40);
  id v14 = v7;
  void block[4] = v8;
  id v12 = v9;
  id v13 = v5;
  id v10 = v5;
  dispatch_async(v6, block);
}

void sub_100193654(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 64))
  {
    uint64_t v3 = *(void **)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 40);
    id v5 = [*(id *)(a1 + 48) firstObject];
    id v6 = [v3 _findContextCollectorIn:v4 withIDSIdentifier:v5];

    if (v6)
    {
      id v7 = (void *)AFSiriLogContextConnection;
      if (os_log_type_enabled(AFSiriLogContextConnection, OS_LOG_TYPE_DEBUG))
      {
        char v15 = v7;
        id v16 = [v6 assistantIdentifier];
        int v17 = 136315394;
        __int16 v18 = "-[ADArbitrationFeedbackManager _findTargetDeviceInDeviceCircleLocalPeer:remotePeers:completion:]_block_invoke";
        __int16 v19 = 2112;
        __int16 v20 = v16;
        _os_log_debug_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "%s #myriad #feedback Target device is context collector: %@", (uint8_t *)&v17, 0x16u);
      }
      uint64_t v8 = *(void *)(a1 + 56);
      uint64_t v9 = [v6 assistantIdentifier];
      (*(void (**)(uint64_t, void *, void))(v8 + 16))(v8, v9, 0);
    }
    else
    {
      if (![*(id *)(a1 + 32) _shouldRouteThroughPairedPhone])
      {
        id v14 = AFSiriLogContextConnection;
        if (os_log_type_enabled(AFSiriLogContextConnection, OS_LOG_TYPE_DEBUG))
        {
          int v17 = 136315138;
          __int16 v18 = "-[ADArbitrationFeedbackManager _findTargetDeviceInDeviceCircleLocalPeer:remotePeers:completion:]_block_invoke";
          _os_log_debug_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "%s #myriad #feedback Unable to find a locationSharing device or context collector. Returning.", (uint8_t *)&v17, 0xCu);
        }
        (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
        goto LABEL_10;
      }
      uint64_t v9 = [*(id *)(a1 + 32) _findPairedPhoneIn:*(void *)(a1 + 40)];
      id v10 = AFSiriLogContextConnection;
      BOOL v11 = os_log_type_enabled(AFSiriLogContextConnection, OS_LOG_TYPE_DEBUG);
      if (v9)
      {
        if (v11)
        {
          int v17 = 136315138;
          __int16 v18 = "-[ADArbitrationFeedbackManager _findTargetDeviceInDeviceCircleLocalPeer:remotePeers:completion:]_block_invoke";
          _os_log_debug_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "%s #myriad #feedback Unable to find a context collector. Try sending to the paired companion phone.", (uint8_t *)&v17, 0xCu);
        }
        uint64_t v12 = *(void *)(a1 + 56);
        id v13 = [v9 assistantIdentifier];
        (*(void (**)(uint64_t, void *, void))(v12 + 16))(v12, v13, 0);
      }
      else
      {
        if (v11)
        {
          int v17 = 136315138;
          __int16 v18 = "-[ADArbitrationFeedbackManager _findTargetDeviceInDeviceCircleLocalPeer:remotePeers:completion:]_block_invoke";
          _os_log_debug_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "%s #myriad #feedback Unable to find a context collector or paired companion phone. Returning.", (uint8_t *)&v17, 0xCu);
        }
        (*(void (**)(void, void, void))(*(void *)(a1 + 56) + 16))(*(void *)(a1 + 56), 0, 0);
      }
    }

LABEL_10:
    return;
  }
  unsigned int v2 = AFSiriLogContextConnection;
  if (os_log_type_enabled(AFSiriLogContextConnection, OS_LOG_TYPE_DEBUG))
  {
    int v17 = 136315138;
    __int16 v18 = "-[ADArbitrationFeedbackManager _findTargetDeviceInDeviceCircleLocalPeer:remotePeers:completion:]_block_invoke_2";
    _os_log_debug_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s #myriad #feedback Location sharing device not available and local device is already a context collector. returning.", (uint8_t *)&v17, 0xCu);
  }
  (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
}

SCDAFDevice *__cdecl sub_1001939B0(id a1, AFPeerInfo *a2)
{
  unsigned int v2 = a2;
  uint64_t v3 = objc_opt_new();
  uint64_t v4 = [(AFPeerInfo *)v2 idsIdentifier];
  id v5 = [v4 length];

  if (v5)
  {
    id v6 = [(AFPeerInfo *)v2 idsIdentifier];
    [v3 setIdsIdentifier:v6];
  }
  id v7 = [(AFPeerInfo *)v2 name];
  id v8 = [v7 length];

  if (v8)
  {
    uint64_t v9 = [(AFPeerInfo *)v2 name];
    [v3 setName:v9];
  }
  id v10 = [(AFPeerInfo *)v2 buildVersion];
  id v11 = [v10 length];

  if (v11)
  {
    uint64_t v12 = [(AFPeerInfo *)v2 buildVersion];
    [v3 setBuild:v12];
  }
  id v13 = [(AFPeerInfo *)v2 assistantIdentifier];
  id v14 = [v13 length];

  if (v14)
  {
    char v15 = [(AFPeerInfo *)v2 assistantIdentifier];
    [v3 setAssistantId:v15];
  }
  id v16 = [(AFPeerInfo *)v2 productType];
  id v17 = [v16 length];

  if (v17)
  {
    __int16 v18 = [(AFPeerInfo *)v2 productType];
    id v19 = +[SCDAFDevice deviceClassFromProductTypeString:v18];

    __int16 v20 = +[NSNumber numberWithUnsignedInteger:v19];
    uint64_t v29 = v20;
    uint64_t v21 = +[NSArray arrayWithObjects:&v29 count:1];
    [v3 setDeviceClass:v21];

    id v22 = [(AFPeerInfo *)v2 productType];
    uint32_t v28 = v22;
    uint64_t v23 = +[NSArray arrayWithObjects:&v28 count:1];
    [v3 setProductTypes:v23];
  }
  id v24 = [(AFPeerInfo *)v2 roomName];
  id v25 = [v24 length];

  if (v25 && (objc_opt_respondsToSelector() & 1) != 0)
  {
    __int16 v26 = [(AFPeerInfo *)v2 roomName];
    [v3 performSelector:"setRoomName:" withObject:v26];
  }
  return (SCDAFDevice *)v3;
}

void sub_10019402C(uint64_t a1)
{
  id v2 = objc_alloc_init((Class)SCDAFDevice);
  uint64_t v3 = AFBuildVersion();
  [v2 setBuild:v3];

  if (AFDeviceEnclosureRGBColor())
  {
    uint64_t v4 = +[NSString stringWithFormat:@"#%02X", AFDeviceEnclosureRGBColor()];
    [v2 setEnclosureColor:v4];
  }
  id v5 = +[NSLocale currentLocale];
  id v6 = v5;
  if (v5)
  {
    id v7 = [v5 countryCode];
    [v6 languageCode];
    if (v7) {
      id v8 = {;
    }
      uint64_t v9 = [v6 countryCode];
      id v10 = +[NSString stringWithFormat:@"%@_%@", v8, v9];
    }
    else {
      id v10 = {;
    }
    }

    if ([v10 length]) {
      [v2 setLocale:v10];
    }
  }
  id v11 = sub_100103320(0);
  uint64_t v12 = v11;
  if (v11)
  {
    id v13 = [v11 connectedBTProductID];

    if (v13)
    {
      id v14 = [v12 connectedBTProductID];
      uint64_t v15 = CBProductIDFromNSString();

      id v16 = +[CBProductInfo productInfoWithProductID:v15];
      id v13 = [v16 model];
    }
  }
  else
  {
    id v13 = 0;
  }
  uint64_t v17 = AFProductType();
  __int16 v18 = (void *)v17;
  if (v17 && v13)
  {
    v38[0] = v17;
    v38[1] = v13;
    id v19 = v38;
    uint64_t v20 = 2;
  }
  else
  {
    if (!v17) {
      goto LABEL_20;
    }
    uint64_t v37 = v17;
    id v19 = &v37;
    uint64_t v20 = 1;
  }
  uint64_t v21 = +[NSArray arrayWithObjects:v19 count:v20];
  [v2 setProductTypes:v21];

LABEL_20:
  id v22 = AFUserAssignedDeviceName();
  [v2 setName:v22];

  [*(id *)(a1 + 32) setDevice:v2];
  uint64_t v23 = dispatch_group_create();
  dispatch_group_enter(v23);
  id v24 = +[ADCommandCenter sharedCommandCenter];
  v31[0] = _NSConcreteStackBlock;
  v31[1] = 3221225472;
  v31[2] = sub_100194430;
  v31[3] = &unk_100504AE8;
  id v25 = *(id *)(a1 + 32);
  uint64_t v26 = *(void *)(a1 + 40);
  id v32 = v25;
  uint64_t v33 = v26;
  id v27 = v23;
  uint64_t v34 = v27;
  [v24 fetchActiveAccount:v31];

  dispatch_time_t v28 = dispatch_time(0, 1000000000);
  intptr_t v29 = dispatch_group_wait(v27, v28);
  uint64_t v30 = AFSiriLogContextConnection;
  if (v29)
  {
    if (os_log_type_enabled(AFSiriLogContextConnection, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)stat buf = 136315138;
      uint64_t v36 = "-[ADArbitrationFeedbackManager _createDeviceInfoOperationForParticipation:]_block_invoke";
      _os_log_error_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_ERROR, "%s #myriad #feedback failed to created device info", buf, 0xCu);
    }
  }
  else if (os_log_type_enabled(AFSiriLogContextConnection, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)stat buf = 136315138;
    uint64_t v36 = "-[ADArbitrationFeedbackManager _createDeviceInfoOperationForParticipation:]_block_invoke";
    _os_log_debug_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "%s #myriad #feedback successfully created device info", buf, 0xCu);
  }
}

void sub_100194430(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void **)(a1 + 32);
  id v4 = a2;
  id v5 = [v3 device];
  id v6 = [v4 assistantIdentifier];
  [v5 setAssistantId:v6];

  id v7 = [*(id *)(a1 + 32) device];
  id v8 = [v4 speechIdentifier];
  [v7 setSpeechId:v8];

  uint64_t v9 = *(void **)(*(void *)(a1 + 40) + 40);
  id v10 = [v4 assistantIdentifier];

  [v9 setLocalDeviceAssistantIdentifier:v10];
  id v11 = *(NSObject **)(a1 + 48);
  dispatch_group_leave(v11);
}

void sub_1001945C4(uint64_t a1)
{
  id v2 = dispatch_group_create();
  dispatch_group_enter(v2);
  uint64_t v3 = [*(id *)(a1 + 32) deviceCircleManager];
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100194790;
  v8[3] = &unk_100504A98;
  void v8[4] = *(void *)(a1 + 32);
  id v4 = v2;
  uint64_t v9 = v4;
  id v10 = *(id *)(a1 + 40);
  [v3 getManagedLocalAndRemotePeerInfoWithCompletion:v8];

  dispatch_time_t v5 = dispatch_time(0, 1000000000);
  intptr_t v6 = dispatch_group_wait(v4, v5);
  id v7 = AFSiriLogContextConnection;
  if (v6)
  {
    if (os_log_type_enabled(AFSiriLogContextConnection, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)stat buf = 136315138;
      uint64_t v12 = "-[ADArbitrationFeedbackManager _createPublishOperationForParticipation:]_block_invoke";
      _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "%s #myriad #feedback failed to publish", buf, 0xCu);
    }
  }
  else if (os_log_type_enabled(AFSiriLogContextConnection, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)stat buf = 136315138;
    uint64_t v12 = "-[ADArbitrationFeedbackManager _createPublishOperationForParticipation:]_block_invoke";
    _os_log_debug_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "%s #myriad #feedback successfully published", buf, 0xCu);
  }
}

void sub_100194790(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)stat buf = 136315138;
    __int16 v18 = "-[ADArbitrationFeedbackManager _createPublishOperationForParticipation:]_block_invoke_2";
    _os_log_debug_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "%s #myriad #feedback About to call _findTargetDeviceInDeviceCircleLocalPeer.", buf, 0xCu);
  }
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  void v12[2] = sub_1001948F8;
  void v12[3] = &unk_100504AC0;
  id v8 = *(void **)(a1 + 32);
  id v9 = *(id *)(a1 + 40);
  uint64_t v10 = *(void *)(a1 + 32);
  id v13 = v9;
  uint64_t v14 = v10;
  id v15 = *(id *)(a1 + 48);
  id v16 = v5;
  id v11 = v5;
  [v8 _findTargetDeviceInDeviceCircleLocalPeer:v11 remotePeers:v6 completion:v12];
}

void sub_1001948F8(uint64_t a1, void *a2, int a3)
{
  id v5 = a2;
  if (![v5 length])
  {
    id v8 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)stat buf = 136315138;
      id v25 = "-[ADArbitrationFeedbackManager _createPublishOperationForParticipation:]_block_invoke";
      _os_log_debug_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "%s #myriad #feedback Unable to find a target device to publish arbitration feedback. Returning.", buf, 0xCu);
    }
    goto LABEL_8;
  }
  if (a3)
  {
    id v6 = AFSiriLogContextConnection;
    if (os_log_type_enabled(AFSiriLogContextConnection, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)stat buf = 136315138;
      id v25 = "-[ADArbitrationFeedbackManager _createPublishOperationForParticipation:]_block_invoke";
      _os_log_debug_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "%s #myriad #feedback Local device is location sharing device", buf, 0xCu);
    }
    id v7 = [*(id *)(a1 + 40) feedbackService];
    [v7 handleReceivedArbitrationParticipation:*(void *)(a1 + 48)];

LABEL_8:
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
    goto LABEL_17;
  }
  uint64_t v9 = [*(id *)(a1 + 56) buildDictionaryRepresentation];
  uint64_t v10 = (void *)v9;
  id v11 = &__NSDictionary0__struct;
  if (v9) {
    id v11 = (void *)v9;
  }
  id v12 = v11;

  id v13 = [*(id *)(a1 + 48) dictionaryRepresentation];
  if (v13)
  {
    uint64_t v14 = [*(id *)(a1 + 48) dictionaryRepresentation];
    v22[0] = @"ADArbitrationParticipationMessage";
    v22[1] = @"ADArbitrationParticipationOriginDevice";
    v23[0] = v14;
    v23[1] = v12;
    id v15 = +[NSDictionary dictionaryWithObjects:v23 forKeys:v22 count:2];
    uint64_t v16 = *(void *)(a1 + 56);
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472;
    void v20[2] = sub_100194BE8;
    v20[3] = &unk_100509040;
    uint64_t v17 = *(void **)(a1 + 40);
    id v21 = *(id *)(a1 + 32);
    [v17 _forwardToDevice:v5 message:v15 From:v16 completion:v20];
  }
  else
  {
    __int16 v18 = AFSiriLogContextConnection;
    if (os_log_type_enabled(AFSiriLogContextConnection, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v19 = *(void *)(a1 + 48);
      *(_DWORD *)stat buf = 136315394;
      id v25 = "-[ADArbitrationFeedbackManager _createPublishOperationForParticipation:]_block_invoke";
      __int16 v26 = 2112;
      uint64_t v27 = v19;
      _os_log_debug_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "%s #myriad #feedback SCDAFParticipation could not be serialized: %@", buf, 0x16u);
    }
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
  }

LABEL_17:
}

void sub_100194BE8(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
  if (v4)
  {
    id v5 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      int v6 = 136315394;
      id v7 = "-[ADArbitrationFeedbackManager _createPublishOperationForParticipation:]_block_invoke";
      __int16 v8 = 2112;
      id v9 = v4;
      _os_log_debug_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "%s #myriad #feedback Error in publishParticipation: %@", (uint8_t *)&v6, 0x16u);
    }
  }
}

void sub_100194D74(uint64_t a1)
{
  id v2 = dispatch_group_create();
  dispatch_group_enter(v2);
  uint64_t v3 = [*(id *)(a1 + 32) deviceCircleManager];
  id v4 = [v3 localPeerInfo];

  if (v4)
  {
    id v5 = [v4 idsIdentifier];
    id v6 = [v5 length];

    if (v6)
    {
      id v7 = [*(id *)(a1 + 40) device];
      __int16 v8 = [v4 idsIdentifier];
      [v7 setIdsIdentifier:v8];
    }
  }
  id v9 = AFSiriLogContextConnection;
  if (os_log_type_enabled(AFSiriLogContextConnection, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v16 = *(void *)(a1 + 40);
    *(_DWORD *)stat buf = 136315394;
    id v21 = "-[ADArbitrationFeedbackManager _createPeerInfoUpdateOperationForParticipation:]_block_invoke";
    __int16 v22 = 2112;
    uint64_t v23 = v16;
    _os_log_debug_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "%s #myriad #feedback participation:%@", buf, 0x16u);
  }
  uint64_t v10 = [*(id *)(a1 + 32) deviceCircleManager];
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472;
  v17[2] = sub_100195024;
  v17[3] = &unk_100504A98;
  id v11 = *(void **)(a1 + 40);
  void v17[4] = *(void *)(a1 + 32);
  id v18 = v11;
  id v12 = v2;
  uint64_t v19 = v12;
  [v10 getManagedLocalAndRemotePeerInfoWithCompletion:v17];

  dispatch_time_t v13 = dispatch_time(0, 1000000000);
  intptr_t v14 = dispatch_group_wait(v12, v13);
  id v15 = AFSiriLogContextConnection;
  if (v14)
  {
    if (os_log_type_enabled(AFSiriLogContextConnection, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)stat buf = 136315138;
      id v21 = "-[ADArbitrationFeedbackManager _createPeerInfoUpdateOperationForParticipation:]_block_invoke";
      _os_log_error_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "%s #myriad #feedback failed to peer info identifiers", buf, 0xCu);
    }
  }
  else if (os_log_type_enabled(AFSiriLogContextConnection, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)stat buf = 136315138;
    id v21 = "-[ADArbitrationFeedbackManager _createPeerInfoUpdateOperationForParticipation:]_block_invoke";
    _os_log_debug_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "%s #myriad #feedback successfully peer info identifiers", buf, 0xCu);
  }
}

void sub_100195024(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = *(void **)(a1 + 32);
  id v7 = [a3 copy];
  __int16 v8 = [v6 _nearByDevicesFrom:v7];

  id v9 = (void *)AFSiriLogContextConnection;
  if (os_log_type_enabled(AFSiriLogContextConnection, OS_LOG_TYPE_DEBUG))
  {
    intptr_t v14 = v9;
    id v15 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [v8 count]);
    int v16 = 136315394;
    uint64_t v17 = "-[ADArbitrationFeedbackManager _createPeerInfoUpdateOperationForParticipation:]_block_invoke";
    __int16 v18 = 2112;
    uint64_t v19 = v15;
    _os_log_debug_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "%s #myriad #feedback nearByDevices count:%@", (uint8_t *)&v16, 0x16u);
  }
  [*(id *)(a1 + 40) setNearbyDevices:v8];
  uint64_t v10 = [v5 roomName];
  id v11 = [v10 length];

  if (v11)
  {
    id v12 = [*(id *)(a1 + 40) device];
    dispatch_time_t v13 = [v5 roomName];
    [v12 setRoomName:v13];
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
}

void sub_100195280(uint64_t a1)
{
  id v2 = dispatch_group_create();
  dispatch_group_enter(v2);
  uint64_t v3 = +[ADCommandCenter sharedCommandCenter];
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_10019544C;
  v9[3] = &unk_100504A70;
  id v4 = *(void **)(a1 + 40);
  void v9[4] = *(void *)(a1 + 32);
  id v10 = v4;
  id v5 = v2;
  id v11 = v5;
  [v3 getCurrentContextSnapshotWithCompletion:v9];

  dispatch_time_t v6 = dispatch_time(0, 1000000000);
  intptr_t v7 = dispatch_group_wait(v5, v6);
  __int16 v8 = AFSiriLogContextConnection;
  if (v7)
  {
    if (os_log_type_enabled(AFSiriLogContextConnection, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)stat buf = 136315138;
      dispatch_time_t v13 = "-[ADArbitrationFeedbackManager _createDeviceContextUpdateOperationForParticipation:]_block_invoke";
      _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "%s #myriad #feedback failed to retrieve device context info", buf, 0xCu);
    }
  }
  else if (os_log_type_enabled(AFSiriLogContextConnection, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)stat buf = 136315138;
    dispatch_time_t v13 = "-[ADArbitrationFeedbackManager _createDeviceContextUpdateOperationForParticipation:]_block_invoke_2";
    _os_log_debug_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "%s #myriad #feedback successfully retrieved device context info", buf, 0xCu);
  }
}

void sub_10019544C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_opt_new();
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  id v5 = v3;
  id v6 = [v5 countByEnumeratingWithState:&v15 objects:v19 count:16];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = *(void *)v16;
    while (2)
    {
      for (i = 0; i != v7; i = (char *)i + 1)
      {
        if (*(void *)v16 != v8) {
          objc_enumerationMutation(v5);
        }
        id v10 = [*(id *)(*((void *)&v15 + 1) + 8 * i) content];
        id v11 = [v10 copy];

        if ([v11 fromLocalDevice])
        {
          [v4 addObject:v11];

          goto LABEL_11;
        }
      }
      id v7 = [v5 countByEnumeratingWithState:&v15 objects:v19 count:16];
      if (v7) {
        continue;
      }
      break;
    }
  }
LABEL_11:

  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_100195610;
  v13[3] = &unk_100504A48;
  id v12 = *(void **)(a1 + 40);
  void v13[4] = *(void *)(a1 + 32);
  id v14 = v12;
  [v4 enumerateObjectsUsingBlock:v13];
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
}

void sub_100195610(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 serializedContextForKey:AFDeviceContextKeyPlaybackState];
  id v5 = [v3 serializedContextForKey:AFDeviceContextKeyTimer];
  id v6 = [v3 serializedContextForKey:AFDeviceContextKeyAlarm];
  if (v4)
  {
    id v7 = [objc_alloc((Class)AFMediaPlaybackStateSnapshot) initWithSerializedBackingStore:v4];
    uint64_t v8 = objc_msgSend(*(id *)(a1 + 32), "_mediaStateFrom:", objc_msgSend(v7, "playbackState"));
    [*(id *)(a1 + 40) setMediaState:v8];
  }
  if (v5)
  {
    id v9 = [objc_alloc((Class)AFClockTimerSnapshot) initWithSerializedBackingStore:v5];
    id v10 = [v9 notifiedFiringTimerIDs];
    id v11 = [v10 count];

    if (v11)
    {
      id v12 = &off_1005236F0;
    }
    else
    {
      dispatch_time_t v13 = [v9 timersByID];
      id v14 = [v13 count];

      id v12 = &off_1005236D8;
      if (v14)
      {
        uint64_t v25 = 0;
        __int16 v26 = &v25;
        uint64_t v27 = 0x2020000000;
        char v28 = 0;
        long long v15 = [v9 timersByID];
        v24[0] = _NSConcreteStackBlock;
        v24[1] = 3221225472;
        void v24[2] = sub_100195960;
        v24[3] = &unk_10050DBF0;
        void v24[4] = &v25;
        [v15 enumerateKeysAndObjectsUsingBlock:v24];

        if (*((unsigned char *)v26 + 24)) {
          id v12 = &off_100523708;
        }
        _Block_object_dispose(&v25, 8);
      }
    }
    [*(id *)(a1 + 40) setTimerState:v12];
  }
  if (v6)
  {
    id v16 = [objc_alloc((Class)AFClockAlarmSnapshot) initWithSerializedBackingStore:v6];
    long long v17 = [v16 notifiedFiringAlarmIDs];
    id v18 = [v17 count];

    if (v18)
    {
      uint64_t v19 = &off_1005236F0;
    }
    else
    {
      uint64_t v20 = [v16 alarmsByID];
      id v21 = [v20 count];

      uint64_t v19 = &off_1005236D8;
      if (v21)
      {
        uint64_t v25 = 0;
        __int16 v26 = &v25;
        uint64_t v27 = 0x2020000000;
        char v28 = 0;
        __int16 v22 = [v16 alarmsByID];
        v23[0] = _NSConcreteStackBlock;
        v23[1] = 3221225472;
        void v23[2] = sub_1001959A8;
        v23[3] = &unk_10050DB78;
        void v23[4] = &v25;
        [v22 enumerateKeysAndObjectsUsingBlock:v23];

        if (*((unsigned char *)v26 + 24)) {
          uint64_t v19 = &off_100523708;
        }
        _Block_object_dispose(&v25, 8);
      }
    }
    [*(id *)(a1 + 40) setAlarmState:v19];
  }
}

void sub_100195944(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_100195960(uint64_t a1, uint64_t a2, void *a3, unsigned char *a4)
{
  id result = [a3 state];
  if (result == (id)3)
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
    *a4 = 1;
  }
  return result;
}

void sub_1001959A8(uint64_t a1, uint64_t a2, void *a3, unsigned char *a4)
{
  id v8 = a3;
  if ([v8 isEnabled])
  {
    id v6 = [v8 dismissedDate];
    if (v6)
    {
    }
    else
    {
      id v7 = [v8 firedDate];

      if (!v7)
      {
        *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
        *a4 = 1;
      }
    }
  }
}

void sub_100195B60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100195B7C(id *a1)
{
  id WeakRetained = objc_loadWeakRetained(a1 + 6);
  id v3 = WeakRetained;
  if (WeakRetained)
  {
    id v4 = [WeakRetained executionContexts];
    if (!v4)
    {
      id v5 = +[ADCommandCenter sharedCommandCenter];
      id v4 = [v5 rootExecutionContexts];
    }
    [v3 setExecutionContexts:0];
    if ([v4 count])
    {
      v8[0] = _NSConcreteStackBlock;
      v8[1] = 3221225472;
      v8[2] = sub_100195D74;
      v8[3] = &unk_100504A20;
      id v9 = a1[4];
      id v10 = a1[5];
      [v4 enumerateKeysAndObjectsUsingBlock:v8];
    }
    else
    {
      id v7 = AFSiriLogContextConnection;
      if (os_log_type_enabled(AFSiriLogContextConnection, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)stat buf = 136315138;
        id v12 = "-[ADArbitrationFeedbackManager _createRequestInfoUpdateOperationForParticipation:forTurnId:]_block_invoke";
        _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "%s #myriad #feedback no execution contexts found. User request will be missing from feedback tool.", buf, 0xCu);
      }
    }
  }
  else
  {
    id v6 = AFSiriLogContextConnection;
    if (os_log_type_enabled(AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)stat buf = 136315138;
      id v12 = "-[ADArbitrationFeedbackManager _createRequestInfoUpdateOperationForParticipation:forTurnId:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "%s #myriad #feedback FeedbackManager instance deallocated. Returning.", buf, 0xCu);
    }
  }
}

void sub_100195D74(uint64_t a1, void *a2, void *a3, unsigned char *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = [v8 info];
  id v10 = [v9 turnId];
  unsigned int v11 = [v10 isEqual:*(void *)(a1 + 32)];

  if (v11)
  {
    id v12 = [v8 info];
    [*(id *)(a1 + 40) setRequestId:v7];
    dispatch_time_t v13 = [v12 speechInfo];
    id v14 = [v13 speechRecognizedCommand];

    if (v14)
    {
      long long v15 = [v12 speechInfo];
      id v16 = [v15 speechRecognizedCommand];
      long long v17 = objc_msgSend(v16, "af_bestTextInterpretation");
      [*(id *)(a1 + 40) setUserRequestText:v17];
      id v18 = AFSiriLogContextConnection;
      if (os_log_type_enabled(AFSiriLogContextConnection, OS_LOG_TYPE_DEBUG))
      {
        int v19 = 136315394;
        uint64_t v20 = "-[ADArbitrationFeedbackManager _createRequestInfoUpdateOperationForParticipation:forTurnId:]_block_invoke";
        __int16 v21 = 2112;
        id v22 = v17;
        _os_log_debug_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "%s #myriad #feedback _currentRequestRecognizedText: %@", (uint8_t *)&v19, 0x16u);
        id v18 = AFSiriLogContextConnection;
      }
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
      {
        int v19 = 136315394;
        uint64_t v20 = "-[ADArbitrationFeedbackManager _createRequestInfoUpdateOperationForParticipation:forTurnId:]_block_invoke";
        __int16 v21 = 2112;
        id v22 = v7;
        _os_log_debug_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "%s #myriad #feedback _requestID: %@", (uint8_t *)&v19, 0x16u);
      }
      *a4 = 1;
    }
  }
}

void sub_100196220(id a1, SAAceCommand *a2, NSError *a3)
{
  id v4 = a2;
  id v5 = a3;
  id v6 = AFSiriLogContextConnection;
  if (os_log_type_enabled(AFSiriLogContextConnection, OS_LOG_TYPE_DEBUG))
  {
    int v7 = 136315650;
    id v8 = "-[ADArbitrationFeedbackManager handleUserFeedbackAction:]_block_invoke";
    __int16 v9 = 2112;
    id v10 = v4;
    __int16 v11 = 2112;
    id v12 = v5;
    _os_log_debug_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "%s #myriad #feedback Launch feedback app completed. Response: %@, Error: %@", (uint8_t *)&v7, 0x20u);
  }
}

uint64_t sub_1001965C0(uint64_t a1)
{
  id v1 = [objc_alloc(*(Class *)(a1 + 32)) _init];
  uint64_t v2 = qword_100585D80;
  qword_100585D80 = (uint64_t)v1;
  return _objc_release_x1(v1, v2);
}

id sub_100196E08(uint64_t a1)
{
  id result = *(id *)(a1 + 32);
  if (result != *(id *)(a1 + 40))
  {
    id result = objc_msgSend(result, "isEqual:");
    if ((result & 1) == 0)
    {
      id v3 = AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v7 = *(void *)(a1 + 40);
        *(_DWORD *)stat buf = 136315394;
        __int16 v11 = "-[ADLocalContextStore localPeerInfoUpdatedFrom:to:]_block_invoke";
        __int16 v12 = 2112;
        uint64_t v13 = v7;
        _os_log_debug_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "%s #hal local peer info updated: %@", buf, 0x16u);
      }
      [*(id *)(a1 + 48) _updateLocalPeerInfo:*(void *)(a1 + 40)];
      id v4 = +[AFAnalytics sharedAnalytics];
      CFStringRef v8 = @"local_context_type";
      uint64_t v5 = AFDeviceContextKeyDeviceInfo;
      uint64_t v9 = AFDeviceContextKeyDeviceInfo;
      id v6 = +[NSDictionary dictionaryWithObjects:&v9 forKeys:&v8 count:1];
      [v4 logEventWithType:4575 context:v6];

      return [*(id *)(a1 + 48) _pushContextToCollectorsForReason:v5 completion:0];
    }
  }
  return result;
}

void sub_100196FDC(uint64_t a1)
{
  if ((AFIsATV() & 1) != 0 || AFIsHorseman())
  {
    uint64_t v2 = *(void **)(a1 + 32);
    [v2 _pushContextToCollectorsForReason:@"ContextCollectorChanged" completion:0];
  }
  else
  {
    id v3 = +[NSDate date];
    uint64_t v17 = a1;
    id v4 = [*(id *)(*(void *)(a1 + 32) + 16) objectForKey:&off_100523768];
    long long v18 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    uint64_t v5 = [v4 allContextKeys];
    id v6 = [v5 countByEnumeratingWithState:&v18 objects:v28 count:16];
    if (v6)
    {
      id v7 = v6;
      uint64_t v8 = *(void *)v19;
      while (2)
      {
        for (i = 0; i != v7; i = (char *)i + 1)
        {
          if (*(void *)v19 != v8) {
            objc_enumerationMutation(v5);
          }
          uint64_t v10 = *(void *)(*((void *)&v18 + 1) + 8 * i);
          __int16 v11 = [v4 contextMetadataForKey:v10];
          __int16 v12 = [v11 expirationDate];
          id v13 = [v12 compare:v3];

          if (v13 == (id)1)
          {
            id v14 = (void *)AFSiriLogContextDaemon;
            if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
            {
              long long v15 = v14;
              id v16 = [v11 expirationDate];
              *(_DWORD *)stat buf = 136315650;
              uint64_t v23 = "-[ADLocalContextStore contextCollectorChangedToDevicesWithIdentifiers:localDeviceIsCollector:]_block_invoke";
              __int16 v24 = 2112;
              uint64_t v25 = v10;
              __int16 v26 = 2112;
              uint64_t v27 = v16;
              _os_log_debug_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "%s %@ context is active with expiration date: %@", buf, 0x20u);
            }
            [*(id *)(v17 + 32) _pushContextToCollectorsForReason:@"ContextCollectorChanged" completion:0];

            goto LABEL_18;
          }
        }
        id v7 = [v5 countByEnumeratingWithState:&v18 objects:v28 count:16];
        if (v7) {
          continue;
        }
        break;
      }
    }
LABEL_18:
  }
}

void sub_10019741C(uint64_t a1)
{
  uint64_t v2 = +[AFAnalytics sharedAnalytics];
  uint64_t v3 = *(void *)(a1 + 32);
  CFStringRef v12 = @"local_context_type";
  uint64_t v13 = v3;
  id v4 = +[NSDictionary dictionaryWithObjects:&v13 forKeys:&v12 count:1];
  [v2 logEventWithType:4575 context:v4];

  uint64_t v5 = [*(id *)(a1 + 40) objectForKey:&off_100523798];
  if (v5)
  {
    id v6 = [*(id *)(a1 + 56) objectForKey:&off_100523798];
    [*(id *)(*(void *)(a1 + 48) + 8) setSerializedContextSnapshot:v5 withMetadata:v6];
  }
  else
  {
    [*(id *)(*(void *)(a1 + 48) + 8) removeContextSnapshotForType:*(void *)(a1 + 32)];
  }
  id v7 = [*(id *)(a1 + 40) objectForKey:&off_100523768];
  uint64_t v8 = [*(id *)(*(void *)(a1 + 48) + 16) objectForKey:&off_100523768];
  uint64_t v9 = v8;
  if (v7)
  {
    uint64_t v10 = [*(id *)(a1 + 56) objectForKey:&off_100523768];
    [v9 setSerializedContextSnapshot:v7 withMetadata:v10];
  }
  else
  {
    [v8 removeContextSnapshotForType:*(void *)(a1 + 32)];
  }
  if (*(unsigned char *)(a1 + 72)) {
    [*(id *)(a1 + 48) _pushContextToCollectorsForReason:*(void *)(a1 + 32) completion:0];
  }
  uint64_t v11 = *(void *)(a1 + 64);
  if (v11) {
    (*(void (**)(void))(v11 + 16))();
  }
  [*(id *)(a1 + 48) _didUpdateContext];
}

void sub_100197768(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) type];
  if (v2)
  {
    uint64_t v3 = +[AFAnalytics sharedAnalytics];
    CFStringRef v19 = @"local_context_type";
    long long v20 = v2;
    id v4 = +[NSDictionary dictionaryWithObjects:&v20 forKeys:&v19 count:1];
    [v3 logEventWithType:4575 context:v4];

    uint64_t v5 = *(void *)(a1 + 40);
    id v6 = *(void **)(*(void *)(a1 + 48) + 8);
    if (v5)
    {
      [v6 setContextSnapshot:v5 withMetadata:*(void *)(a1 + 32)];
      uint64_t v7 = [*(id *)(*(void *)(a1 + 48) + 24) objectForKey:v2];
      if (v7)
      {
        uint64_t v8 = (void *)v7;
        uint64_t v10 = *(void *)(a1 + 32);
        uint64_t v9 = *(void *)(a1 + 40);
        v12[0] = _NSConcreteStackBlock;
        v12[1] = 3221225472;
        void v12[2] = sub_1001979B0;
        void v12[3] = &unk_100504CF8;
        void v12[4] = *(void *)(a1 + 48);
        id v13 = v2;
        char v14 = *(unsigned char *)(a1 + 56);
        [v8 getRedactedContextForContextSnapshot:v9 metadata:v10 privacyPolicy:50 completion:v12];
      }
      else
      {
        uint64_t v11 = AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)stat buf = 136315394;
          id v16 = "-[ADLocalContextStore donateContext:withMetadata:pushToRemote:]_block_invoke";
          __int16 v17 = 2112;
          long long v18 = v2;
          _os_log_error_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "%s #hal No transformer for %@, not pushing to remote", buf, 0x16u);
        }
        uint64_t v8 = 0;
      }
    }
    else
    {
      [v6 removeContextSnapshotForType:v2];
      uint64_t v8 = [*(id *)(*(void *)(a1 + 48) + 16) objectForKey:&off_100523768];
      [v8 removeContextSnapshotForType:v2];
      if (*(unsigned char *)(a1 + 56)) {
        [*(id *)(a1 + 48) _pushContextToCollectorsForReason:v2 completion:0];
      }
    }

    [*(id *)(a1 + 48) _didUpdateContext];
  }
}

void sub_1001979B0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = *(NSObject **)(v7 + 48);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100197A98;
  block[3] = &unk_100506058;
  id v12 = v5;
  id v13 = v6;
  uint64_t v14 = v7;
  id v15 = *(id *)(a1 + 40);
  char v16 = *(unsigned char *)(a1 + 48);
  id v9 = v6;
  id v10 = v5;
  dispatch_async(v8, block);
}

void sub_100197A98(uint64_t a1)
{
  uint64_t v2 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = *(void *)(a1 + 40);
    int v7 = 136315651;
    uint64_t v8 = "-[ADLocalContextStore donateContext:withMetadata:pushToRemote:]_block_invoke_3";
    __int16 v9 = 2113;
    uint64_t v10 = v5;
    __int16 v11 = 2112;
    uint64_t v12 = v6;
    _os_log_debug_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s #hal Redacted version: %{private}@ %@", (uint8_t *)&v7, 0x20u);
  }
  uint64_t v3 = [*(id *)(*(void *)(a1 + 48) + 16) objectForKey:&off_100523768];
  id v4 = v3;
  if (*(void *)(a1 + 32))
  {
    if (*(void *)(a1 + 40)) {
      objc_msgSend(v3, "setContextSnapshot:withMetadata:");
    }
  }
  else
  {
    [v3 removeContextSnapshotForType:*(void *)(a1 + 56)];
  }
  if (*(unsigned char *)(a1 + 64) && AFSupportsHALContextDonation()) {
    [*(id *)(a1 + 48) _pushContextToCollectorsForReason:*(void *)(a1 + 56) completion:0];
  }
}

id sub_100197C8C(void *a1)
{
  return [*(id *)(a1[4] + 24) setObject:a1[5] forKey:a1[6]];
}

void sub_100198114(uint64_t a1, void *a2, int a3)
{
  id v5 = a2;
  if (![v5 count])
  {
    uint64_t v6 = AFSiriLogContextDaemon;
    if (!os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO)) {
      goto LABEL_8;
    }
    *(_DWORD *)stat buf = 136315138;
    CFStringRef v19 = "-[ADLocalContextStore _pushContextToCollector:forReason:includingKeys:excludingMandatoryKeys:includingKeysInRe"
          "sponse:excludingMandatoryKeysInResponse:completion:]_block_invoke";
    int v7 = "%s #hal Context Collector unavailable";
    goto LABEL_7;
  }
  if (!a3)
  {
    __int16 v9 = *(NSObject **)(*(void *)(a1 + 32) + 48);
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_1001982DC;
    v13[3] = &unk_10050E228;
    id v10 = v5;
    uint64_t v11 = *(void *)(a1 + 32);
    uint64_t v12 = *(void **)(a1 + 40);
    id v14 = v10;
    uint64_t v15 = v11;
    id v16 = v12;
    id v17 = *(id *)(a1 + 48);
    dispatch_async(v9, v13);

    goto LABEL_11;
  }
  uint64_t v6 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)stat buf = 136315138;
    CFStringRef v19 = "-[ADLocalContextStore _pushContextToCollector:forReason:includingKeys:excludingMandatoryKeys:includingKeysInRe"
          "sponse:excludingMandatoryKeysInResponse:completion:]_block_invoke";
    int v7 = "%s #hal Local device is Context Collector, skip pushing context";
LABEL_7:
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, v7, buf, 0xCu);
  }
LABEL_8:
  uint64_t v8 = *(void *)(a1 + 48);
  if (v8) {
    (*(void (**)(uint64_t, void, void))(v8 + 16))(v8, 0, 0);
  }
LABEL_11:
}

void sub_1001982DC(uint64_t a1)
{
  uint64_t v2 = dispatch_group_create();
  id v16 = objc_alloc_init((Class)NSMutableArray);
  v29[0] = 0;
  v29[1] = v29;
  v29[2] = 0x3032000000;
  v29[3] = sub_1001985D0;
  v29[4] = sub_1001985E0;
  id v30 = 0;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  id obj = *(id *)(a1 + 32);
  id v3 = [obj countByEnumeratingWithState:&v25 objects:v31 count:16];
  if (v3)
  {
    uint64_t v4 = *(void *)v26;
    do
    {
      id v5 = 0;
      do
      {
        if (*(void *)v26 != v4) {
          objc_enumerationMutation(obj);
        }
        uint64_t v6 = *(void *)(*((void *)&v25 + 1) + 8 * (void)v5);
        dispatch_group_enter(v2);
        int v7 = *(void **)(a1 + 40);
        uint64_t v8 = *(void *)(a1 + 48);
        __int16 v9 = (void *)v7[5];
        id v10 = [v7 _contextLinkMessageOptions];
        v21[0] = _NSConcreteStackBlock;
        v21[1] = 3221225472;
        void v21[2] = sub_1001985E8;
        v21[3] = &unk_100504CA8;
        uint64_t v11 = *(void *)(a1 + 40);
        __int16 v24 = v29;
        v21[4] = v11;
        v21[5] = v6;
        id v22 = v16;
        uint64_t v23 = v2;
        [v9 sendRequestID:@"com.apple.siri.rapport-link.request.generic" messageType:@"context_push" messagePayload:v8 toDeviceWithIDSDeviceID:v6 options:v10 completion:v21];

        id v5 = (char *)v5 + 1;
      }
      while (v3 != v5);
      id v3 = [obj countByEnumeratingWithState:&v25 objects:v31 count:16];
    }
    while (v3);
  }

  uint64_t v12 = *(NSObject **)(*(void *)(a1 + 40) + 48);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1001986E4;
  block[3] = &unk_10050B828;
  id v13 = *(id *)(a1 + 56);
  id v18 = v16;
  id v19 = v13;
  long long v20 = v29;
  id v14 = v16;
  dispatch_group_notify(v2, v12, block);

  _Block_object_dispose(v29, 8);
}

void sub_1001985A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
}

uint64_t sub_1001985D0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1001985E0(uint64_t a1)
{
}

void sub_1001985E8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  int v7 = *(NSObject **)(*(void *)(a1 + 32) + 48);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  void v12[2] = sub_100198764;
  void v12[3] = &unk_100504C80;
  id v13 = v5;
  id v14 = v6;
  uint64_t v8 = *(void *)(a1 + 40);
  __int16 v9 = *(void **)(a1 + 48);
  uint64_t v18 = *(void *)(a1 + 64);
  uint64_t v15 = v8;
  id v16 = v9;
  id v17 = *(id *)(a1 + 56);
  id v10 = v6;
  id v11 = v5;
  dispatch_async(v7, v12);
}

void sub_1001986E4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  if (v1)
  {
    id v3 = [*(id *)(a1 + 32) copy];
    (*(void (**)(uint64_t, id, void))(v1 + 16))(v1, v3, *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40));
  }
}

void sub_100198764(uint64_t a1)
{
  uint64_t v2 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v6 = *(void *)(a1 + 32);
    uint64_t v7 = *(void *)(a1 + 40);
    *(_DWORD *)stat buf = 136315650;
    id v11 = "-[ADLocalContextStore _pushContextToCollector:forReason:includingKeys:excludingMandatoryKeys:includingKeysInRe"
          "sponse:excludingMandatoryKeysInResponse:completion:]_block_invoke_3";
    __int16 v12 = 2112;
    uint64_t v13 = v6;
    __int16 v14 = 2112;
    uint64_t v15 = v7;
    _os_log_debug_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s #hal response: %@, error: %@", buf, 0x20u);
  }
  id v3 = *(void **)(a1 + 40);
  if (v3)
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 72) + 8) + 40), v3);
  }
  else
  {
    uint64_t v4 = *(void **)(a1 + 32);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_1001988BC;
    v8[3] = &unk_100504C58;
    id v5 = *(void **)(a1 + 56);
    void v8[4] = *(void *)(a1 + 48);
    id v9 = v5;
    [v4 enumerateKeysAndObjectsUsingBlock:v8];
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 64));
}

void sub_1001988BC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = v5;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v8 = v7;

    if (v8)
    {
      id v9 = v6;
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        id v10 = v9;

        if (v10)
        {
          id v11 = sub_100174F64(v8);
          if (v11 || (sub_10016A850(v8), (id v11 = objc_claimAutoreleasedReturnValue()) != 0))
          {
            id v12 = [objc_alloc((Class)AFDeviceContext) initWithSerializedBackingStore:v10 fromLocalDevice:0 contextCollectorSource:*(void *)(a1 + 32)];
            uint64_t v13 = *(void **)(a1 + 40);
            id v14 = [objc_alloc((Class)AFPeerContentTuple) initWithInfo:v11 content:v12];
            [v13 addObject:v14];
          }
          else
          {
            id v17 = AFSiriLogContextDaemon;
            if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
            {
              int v18 = 136315394;
              id v19 = "-[ADLocalContextStore _pushContextToCollector:forReason:includingKeys:excludingMandatoryKeys:includi"
                    "ngKeysInResponse:excludingMandatoryKeysInResponse:completion:]_block_invoke";
              __int16 v20 = 2112;
              id v21 = v8;
              _os_log_error_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "%s #hal Unable to resolve device ID %@ to peer info. Skipping", (uint8_t *)&v18, 0x16u);
            }
          }
LABEL_16:

          goto LABEL_17;
        }
      }
      else
      {
      }
      id v16 = AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
      {
        int v18 = 136315138;
        id v19 = "-[ADLocalContextStore _pushContextToCollector:forReason:includingKeys:excludingMandatoryKeys:includingKeys"
              "InResponse:excludingMandatoryKeysInResponse:completion:]_block_invoke";
        _os_log_error_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "%s #hal Serialized context is not a dictionary. Skipping", (uint8_t *)&v18, 0xCu);
      }
      id v10 = 0;
      goto LABEL_16;
    }
  }
  else
  {
  }
  uint64_t v15 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
  {
    int v18 = 136315138;
    id v19 = "-[ADLocalContextStore _pushContextToCollector:forReason:includingKeys:excludingMandatoryKeys:includingKeysInRe"
          "sponse:excludingMandatoryKeysInResponse:completion:]_block_invoke";
    _os_log_error_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "%s #hal Device ID is not a string. Skipping", (uint8_t *)&v18, 0xCu);
  }
  id v8 = 0;
LABEL_17:
}

void sub_100199238(uint64_t a1)
{
  if ([*(id *)(a1 + 32) count])
  {
    uint64_t v2 = [*(id *)(a1 + 40) _deviceContextToVendForPrivacyClass:50];
    id v3 = [v2 partialSerializedBackingStoreIncludingKeys:*(void *)(a1 + 32) excludingMandatoryKeys:*(void *)(a1 + 48)];
    if (v3)
    {
      [*(id *)(a1 + 40) _pushContextToCollector:v3 forReason:@"external_request" includingKeys:*(void *)(a1 + 32) excludingMandatoryKeys:*(void *)(a1 + 48) includingKeysInResponse:*(void *)(a1 + 56) excludingMandatoryKeysInResponse:*(void *)(a1 + 64) completion:*(void *)(a1 + 72)];
    }
    else
    {
      id v6 = AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)stat buf = 136315138;
        id v10 = "-[ADLocalContextStore pushContextToContextCollectorIncludingKeys:excludingMandatoryKeys:expectingResponseI"
              "ncludingKeys:excludingMandatoryKeys:completion:]_block_invoke";
        _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "%s #hal serialized context is nil", buf, 0xCu);
      }
      uint64_t v7 = *(void *)(a1 + 72);
      if (v7)
      {
        id v8 = +[AFError errorWithCode:3100];
        (*(void (**)(uint64_t, void, void *))(v7 + 16))(v7, 0, v8);
      }
    }
  }
  else
  {
    uint64_t v4 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)stat buf = 136315138;
      id v10 = "-[ADLocalContextStore pushContextToContextCollectorIncludingKeys:excludingMandatoryKeys:expectingResponseInc"
            "ludingKeys:excludingMandatoryKeys:completion:]_block_invoke";
      _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "%s #hal nothing specified in includedKeysInPush", buf, 0xCu);
    }
    uint64_t v5 = *(void *)(a1 + 72);
    if (v5) {
      (*(void (**)(uint64_t, void, void))(v5 + 16))(v5, 0, 0);
    }
  }
}

id sub_1001994A4(uint64_t a1)
{
  objc_msgSend(*(id *)(*(void *)(a1 + 32) + 40), "removeListener:");
  objc_storeStrong((id *)(*(void *)(a1 + 32) + 40), *(id *)(a1 + 40));
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 40);
  return objc_msgSend(v2, "addListener:");
}

uint64_t sub_100199770(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) _localContextWithPrivacyClass:*(void *)(a1 + 48)];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 40) = v2;
  return _objc_release_x1(v2, v4);
}

void sub_10019986C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = [*(id *)(a1 + 32) _localContextWithPrivacyClass:*(void *)(a1 + 48)];
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_100199B40(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 64) localPeerInfo];
  [*(id *)(a1 + 32) _updateLocalPeerInfo:v2];
}

id sub_100199B9C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _initializeBuiltInContextProviders];
}

void sub_100199D9C(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 16) objectForKey:&off_100523768];
  if (*(void *)(a1 + 40))
  {
    uint64_t v3 = +[NSDate date];
    id v4 = objc_alloc((Class)AFDeviceContextMetadata);
    uint64_t v5 = AFDeviceContextKeyMyriadAdvertisement;
    id v6 = [v3 dateByAddingTimeInterval:15.0];
    id v7 = [v4 initWithType:v5 deliveryDate:v3 expirationDate:v6 redactedKeyPaths:0 historyConfiguration:0];

    [*(id *)(*(void *)(a1 + 32) + 8) setSerializedContextSnapshot:*(void *)(a1 + 40) withMetadata:v7];
    [v2 setSerializedContextSnapshot:*(void *)(a1 + 40) withMetadata:v7];
  }
  else
  {
    uint64_t v5 = AFDeviceContextKeyMyriadAdvertisement;
    [*(id *)(*(void *)(a1 + 32) + 8) removeContextSnapshotForType:AFDeviceContextKeyMyriadAdvertisement];
    [v2 removeContextSnapshotForType:v5];
  }
  [*(id *)(a1 + 32) _didUpdateContext];
  id v8 = +[AFAnalytics sharedAnalytics];
  CFStringRef v11 = @"local_context_type";
  uint64_t v12 = v5;
  id v9 = +[NSDictionary dictionaryWithObjects:&v12 forKeys:&v11 count:1];
  [v8 logEventWithType:4575 context:v9];

  uint64_t v10 = *(void *)(a1 + 48);
  if (v10) {
    (*(void (**)(void))(v10 + 16))();
  }
}

void sub_10019B480(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  objc_opt_class();
  char isKindOfClass = objc_opt_isKindOfClass();
  id v8 = AFSiriLogContextDaemon;
  if (isKindOfClass)
  {
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      id v9 = "remote";
      if (*(void *)(a1 + 48) == 1) {
        id v9 = "local";
      }
      *(_DWORD *)stat buf = 136315394;
      __int16 v20 = "-[SANPStartPlayback(ADMediaRemote) _ad_performWithMediaRemoteService:replyHandler:]_block_invoke_2";
      __int16 v21 = 2080;
      id v22 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "%s %s MRMediaRemoteCommandPlay returned success", buf, 0x16u);
    }
    uint64_t v10 = *(void *)(a1 + 40);
    if (v10) {
      (*(void (**)(uint64_t, id, id))(v10 + 16))(v10, v5, v6);
    }
  }
  else
  {
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      uint64_t v13 = *(void *)(a1 + 48);
      __int16 v20 = "-[SANPStartPlayback(ADMediaRemote) _ad_performWithMediaRemoteService:replyHandler:]_block_invoke";
      *(_DWORD *)stat buf = 136315650;
      if (v13 == 1) {
        id v14 = "local";
      }
      else {
        id v14 = "remote";
      }
      __int16 v21 = 2080;
      id v22 = v14;
      __int16 v23 = 2112;
      id v24 = v6;
      _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "%s %s MRMediaRemoteCommandPlay did not return success %@", buf, 0x20u);
    }
    uint64_t v11 = *(void *)(a1 + 48);
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472;
    void v15[2] = sub_10019BB78;
    v15[3] = &unk_10050E1D8;
    uint64_t v12 = *(void **)(a1 + 32);
    id v18 = *(id *)(a1 + 40);
    id v16 = v5;
    id v17 = v6;
    [v12 handleFailedStartPlaybackWithDestination:v11 completion:v15];
  }
}

void sub_10019B6CC(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0)
  {
    id v8 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)stat buf = 136315138;
      *(void *)&uint8_t buf[4] = "-[SANPStartPlayback(ADMediaRemote) _ad_performWithMediaRemoteService:replyHandler:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "%s Failed to prepare for StartPlayback, failing without sending MRMediaRemoteCommandPlay", buf, 0xCu);
    }
    id v9 = [objc_alloc((Class)SACommandFailed) initWithReason:@"Client failed to prepare for StartPlayback"];
    uint64_t v10 = *(void **)(a1 + 32);
    uint64_t v11 = *(void *)(a1 + 80);
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472;
    v18[2] = sub_10019BA38;
    v18[3] = &unk_10050E188;
    id v12 = *(id *)(a1 + 64);
    id v19 = v9;
    id v20 = v12;
    id v3 = v9;
    [v10 handleFailedStartPlaybackWithDestination:v11 completion:v18];

    id v7 = v20;
    goto LABEL_9;
  }
  id v3 = [*(id *)(a1 + 40) appId];
  if (v3)
  {
LABEL_3:
    id v4 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)stat buf = 136315394;
      *(void *)&uint8_t buf[4] = "-[SANPStartPlayback(ADMediaRemote) _ad_performWithMediaRemoteService:replyHandler:]_block_invoke_2";
      *(_WORD *)&buf[12] = 2112;
      *(void *)&buf[14] = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%s Sending MRMediaRemoteCommandPlay to %@", buf, 0x16u);
    }
    *(void *)stat buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000;
    char v22 = 0;
    id v5 = [*(id *)(a1 + 56) targetQueue];
    id v17 = *(id *)(a1 + 72);
    char v6 = MRMediaRemoteSendCommandToApp();

    *(unsigned char *)(*(void *)&buf[8] + 24) = v6;
    _Block_object_dispose(buf, 8);
    id v7 = v17;
LABEL_9:

    goto LABEL_10;
  }
  uint64_t v13 = [*(id *)(a1 + 40) targetAppId];
  id v14 = [v13 scheme];
  unsigned __int8 v15 = [v14 isEqualToString:@"x-apple-siri-app"];

  if (v15)
  {
    id v3 = [v13 host];

    if (v3) {
      goto LABEL_3;
    }
  }
  else
  {
  }
  id v16 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)stat buf = 136315138;
    *(void *)&uint8_t buf[4] = "-[SANPStartPlayback(ADMediaRemote) _ad_performWithMediaRemoteService:replyHandler:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "%s Sending MRMediaRemoteCommandPlay now", buf, 0xCu);
  }
  id v3 = [*(id *)(a1 + 56) targetQueue];
  AFMediaRemoteSendCommandWithOptions();
LABEL_10:
}

uint64_t sub_10019BA38(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void))(result + 16))(result, *(void *)(a1 + 32), 0);
  }
  return result;
}

void sub_10019BA5C(uint64_t a1, int a2, uint64_t a3)
{
  char v6 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v7 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
    int v10 = 136315906;
    uint64_t v11 = "-[SANPStartPlayback(ADMediaRemote) _ad_performWithMediaRemoteService:replyHandler:]_block_invoke";
    __int16 v12 = 1024;
    int v13 = v7;
    __int16 v14 = 1024;
    int v15 = a2;
    __int16 v16 = 2112;
    uint64_t v17 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "%s Sent = %d mrError=%d statuses = %@", (uint8_t *)&v10, 0x22u);
  }
  uint64_t v8 = *(void *)(a1 + 32);
  if (v8)
  {
    id v9 = AFCommandOutcomeFromMediaRemoteStatuses();
    (*(void (**)(uint64_t, void *, void))(v8 + 16))(v8, v9, 0);
  }
}

uint64_t sub_10019BB78(void *a1)
{
  uint64_t result = a1[6];
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void))(result + 16))(result, a1[4], a1[5]);
  }
  return result;
}

void sub_10019BC88(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v11 = a3;
  id v8 = a4;
  id v9 = a5;
  int v10 = objc_msgSend(a2, "_ad_mediaRemoteOptions");
  if (v11) {
    [v10 addEntriesFromDictionary:v11];
  }
  AFMediaRemoteSendCommandWithOptions();
}

void sub_10019C0E8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = objc_alloc((Class)AFSafetyBlock);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  void v12[2] = sub_10019C220;
  void v12[3] = &unk_100504D98;
  id v15 = *(id *)(a1 + 40);
  id v8 = v5;
  id v13 = v8;
  id v9 = v6;
  id v14 = v9;
  id v10 = [v7 initWithBlock:v12];
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v11 = [*(id *)(a1 + 32) volumeTracker];
    [v11 setDirtySiriOutputVolumeHostTime:*(void *)(a1 + 48)];

    [v10 invoke];
  }
}

uint64_t sub_10019C220(void *a1)
{
  uint64_t result = a1[6];
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void))(result + 16))(result, a1[4], a1[5]);
  }
  return result;
}

void sub_10019CC68(void **a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v5
    && ([v5 objectForKeyedSubscript:kMRMediaRemoteNowPlayingInfoMediaType],
        (id v7 = objc_claimAutoreleasedReturnValue()) != 0)
    && (id v8 = v7,
        unsigned int v9 = [v7 isEqualToString:kMRMediaRemoteMediaTypeITunesRadio],
        v8,
        v9))
  {
    id v10 = (void (**)(void *, id, void))a1[6];
    id v11 = objc_alloc((Class)SACommandFailed);
    id v12 = [v11 initWithErrorCode:SAMPCannotGoBackToPreviousRadioSongErrorCode];
    v10[2](v10, v12, 0);
  }
  else
  {
    uint64_t v13 = kMRMediaRemoteOptionPlaybackPosition;
    id v14 = &off_100523F28;
    id v12 = +[NSDictionary dictionaryWithObjects:&v14 forKeys:&v13 count:1];
    sub_10019BC88(24, a1[4], v12, a1[5], a1[6]);
  }
}

void sub_10019D070(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v9 = objc_alloc_init((Class)SAMPGetStateResponse);
  id v4 = [v3 listeningToItem];
  [v9 setListeningToItem:v4];

  objc_msgSend(v9, "setState:", objc_msgSend(v3, "state"));
  id v5 = [v3 source];
  [v9 setSource:v5];

  id v6 = [v3 applicationIdentifier];

  id v7 = [v6 isEqualToString:@"com.apple.music"];
  id v8 = +[NSNumber numberWithBool:v7];
  [v9 setListeningToMusicApplication:v8];

  [v9 setHashedGroupID:0];
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10019D2C8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v8 = *(_DWORD *)(a1 + 40);
    CFStringRef v9 = &stru_10050F7D8;
    if (v6) {
      CFStringRef v9 = v6;
    }
    int v13 = 136315906;
    id v14 = "-[SADomainCommand(ADMediaRemote) _ad_performAudioPausingCommand:mediaRemoteService:replyHandler:]_block_invoke";
    __int16 v15 = 1024;
    int v16 = v8;
    __int16 v17 = 2112;
    id v18 = v5;
    __int16 v19 = 2112;
    CFStringRef v20 = v9;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "%s Sent MRMediaRemoteCommand %d, got %@ %@", (uint8_t *)&v13, 0x26u);
  }
  uint64_t v10 = *(void *)(a1 + 32);
  if (v10)
  {
    if (*(unsigned char *)(a1 + 44))
    {
      id v11 = AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
      {
        int v13 = 136315138;
        id v14 = "-[SADomainCommand(ADMediaRemote) _ad_performAudioPausingCommand:mediaRemoteService:replyHandler:]_block_invoke";
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "%s reporting success", (uint8_t *)&v13, 0xCu);
        uint64_t v10 = *(void *)(a1 + 32);
      }
      id v12 = objc_alloc_init((Class)SACommandSucceeded);
      (*(void (**)(uint64_t, id, void))(v10 + 16))(v10, v12, 0);
    }
    else
    {
      (*(void (**)(void, id, __CFString *))(v10 + 16))(*(void *)(a1 + 32), v5, v6);
    }
  }
}

uint64_t sub_10019E130(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10019E140(uint64_t a1)
{
}

void sub_10019E148(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id v2 = *(void ***)(a1 + 40);
  if (v3)
  {
    id v4 = objc_msgSend(v2, "_sessionWithUUID:");
  }
  else
  {
    id v5 = sub_1002E8948(v2[1], &stru_10050B270);
    id v6 = [v5 lastObject];
    id v7 = v6;
    if (v6)
    {
      id v8 = v6;
    }
    else
    {
      id v8 = [*(id *)(a1 + 40) _startedOrStartingSession];
    }
    id v4 = v8;
  }
  CFStringRef v9 = (void *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v10 = v9;
    id v11 = [v4 uuid];
    int v16 = 136315394;
    __int16 v17 = "-[ADDictationSessionTracker notifyAudioFileIOTransactionStoppedForReason:sessionUUID:]_block_invoke";
    __int16 v18 = 2112;
    __int16 v19 = v11;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "%s sessionUUID = %@", (uint8_t *)&v16, 0x16u);
  }
  if (v4)
  {
    [*(id *)(a1 + 40) _endAudioFileIOTransactionForReason:*(void *)(a1 + 48) session:v4];
  }
  else
  {
    id v12 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      int v13 = *(void **)(a1 + 32);
      int v16 = 136315394;
      __int16 v17 = "-[ADDictationSessionTracker notifyAudioFileIOTransactionStoppedForReason:sessionUUID:]_block_invoke";
      __int16 v18 = 2112;
      __int16 v19 = v13;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "%s Can not find an active session with UUID %@", (uint8_t *)&v16, 0x16u);
    }
  }
  uint64_t v14 = *(void *)(*(void *)(a1 + 56) + 8);
  __int16 v15 = *(void **)(v14 + 40);
  *(void *)(v14 + 40) = 0;
}

void sub_10019E44C(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id v2 = *(void ***)(a1 + 40);
  if (v3)
  {
    id v4 = objc_msgSend(v2, "_sessionWithUUID:");
  }
  else
  {
    id v5 = sub_1002E8948(v2[1], &stru_10050B250);
    id v6 = [v5 lastObject];
    id v7 = v6;
    if (v6)
    {
      id v8 = v6;
    }
    else
    {
      id v8 = [*(id *)(a1 + 40) _startedOrStartingSession];
    }
    id v4 = v8;
  }
  CFStringRef v9 = (void *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v10 = v9;
    id v11 = [v4 uuid];
    int v16 = 136315394;
    __int16 v17 = "-[ADDictationSessionTracker notifySpeechRecognitionTransactionStoppedForReason:sessionUUID:]_block_invoke";
    __int16 v18 = 2112;
    __int16 v19 = v11;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "%s sessionUUID = %@", (uint8_t *)&v16, 0x16u);
  }
  if (v4)
  {
    [*(id *)(a1 + 40) _endSpeechRecognitionTransactionForReason:*(void *)(a1 + 48) session:v4];
  }
  else
  {
    id v12 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      int v13 = *(void **)(a1 + 32);
      int v16 = 136315394;
      __int16 v17 = "-[ADDictationSessionTracker notifySpeechRecognitionTransactionStoppedForReason:sessionUUID:]_block_invoke";
      __int16 v18 = 2112;
      __int16 v19 = v13;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "%s Can not find an active session with UUID %@", (uint8_t *)&v16, 0x16u);
    }
  }
  uint64_t v14 = *(void *)(*(void *)(a1 + 56) + 8);
  __int16 v15 = *(void **)(v14 + 40);
  *(void *)(v14 + 40) = 0;
}

void sub_10019E6FC(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) _startedOrStartingSession];
  uint64_t v3 = (void *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    id v4 = v3;
    id v5 = [v2 uuid];
    int v9 = 136315394;
    uint64_t v10 = "-[ADDictationSessionTracker stopSessionForReason:]_block_invoke";
    __int16 v11 = 2112;
    id v12 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%s sessionUUID = %@", (uint8_t *)&v9, 0x16u);
  }
  if (v2)
  {
    if ([v2 speechRecognitionTransactionState]) {
      [v2 _setSpeechRecognitionTransactionState:3];
    }
    if ([v2 audioFileIOTransactionState]) {
      [v2 _setAudioFileIOTransactionState:3];
    }
  }
  else
  {
    id v6 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      int v9 = 136315138;
      uint64_t v10 = "-[ADDictationSessionTracker stopSessionForReason:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "%s Can not find an active session", (uint8_t *)&v9, 0xCu);
    }
  }
  uint64_t v7 = *(void *)(*(void *)(a1 + 40) + 8);
  id v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = 0;
}

void sub_10019EA78(uint64_t a1)
{
  id v2 = [[ADDictationSession alloc] initWithUUID:*(void *)(a1 + 32) timestamp:*(void *)(a1 + 88) languageCode:*(void *)(a1 + 40) options:*(void *)(a1 + 48) speechRequestOptions:*(void *)(a1 + 56)];
  uint64_t v3 = (void *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    id v4 = v3;
    id v5 = [(ADDictationSession *)v2 uuid];
    int v8 = 136315394;
    int v9 = "-[ADDictationSessionTracker startSessionForReason:languageCode:options:speechRequestOptions:]_block_invoke";
    __int16 v10 = 2112;
    __int16 v11 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%s sessionUUID = %@", (uint8_t *)&v8, 0x16u);
  }
  [*(id *)(a1 + 64) _beginSpeechRecognitionTransactionForReason:*(void *)(a1 + 72) session:v2];
  [*(id *)(a1 + 64) _beginAudioFileIOTransactionForReason:*(void *)(a1 + 72) session:v2];
  [*(id *)(a1 + 64) _addSession:v2];
  uint64_t v6 = *(void *)(*(void *)(a1 + 80) + 8);
  uint64_t v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = 0;
}

void sub_1001A06A4(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v4 = v3;
    id v5 = [*(id *)(a1 + 48) expExperimentFromExperimentAllocationStatus:v4];
    if (v5)
    {
      if (!*(void *)(a1 + 32)
        || ([v4 date],
            uint64_t v6 = objc_claimAutoreleasedReturnValue(),
            id v7 = [v6 compare:*(void *)(a1 + 32)],
            v6,
            v7 == (id)1))
      {
        int v8 = (void *)AFSiriLogContextConnection;
        if (os_log_type_enabled(AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
        {
          int v15 = *(_DWORD *)(a1 + 56);
          int v9 = v8;
          __int16 v10 = [v5 experimentId];
          id v11 = [v5 deploymentId];
          id v12 = [v4 treatmentId];
          unsigned int v13 = [v5 allocationStatus];
          uint64_t v14 = +[NSDate dateWithTimeIntervalSince1970:](NSDate, "dateWithTimeIntervalSince1970:", (double)(unint64_t)[v5 lastUpdatedAtInMs] / 1000.0);
          *(_DWORD *)stat buf = 136316674;
          __int16 v17 = "+[ADExperimentManager(Tracer) getAllEXPExperimentsFromProvider:cursor:environment:fromDate:retries:exper"
                "imentsEmitted:namespaceAssetSet:]_block_invoke";
          __int16 v18 = 1024;
          int v19 = v15;
          __int16 v20 = 2112;
          __int16 v21 = v10;
          __int16 v22 = 2048;
          id v23 = v11;
          __int16 v24 = 2112;
          long long v25 = v12;
          __int16 v26 = 1024;
          unsigned int v27 = v13;
          __int16 v28 = 2112;
          intptr_t v29 = v14;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "%s Updated EXP experiment for environment %d. ExperimentId: %@, DeploymentId: %lld, TreatmentId: %@, Status: %d, Date: %@", buf, 0x40u);
        }
        [*(id *)(a1 + 40) addObject:v5];
      }
    }
  }
}

void sub_1001A0B9C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [*(id *)(a1 + 48) expExperimentFromExperimentAllocationStatus:v3];
  id v5 = [v4 experimentNamespace];
  uint64_t v6 = [*(id *)(a1 + 32) objectForKeyedSubscript:v5];

  if (!v6)
  {
    int v21 = 1;
    if (!v4) {
      goto LABEL_15;
    }
    goto LABEL_11;
  }
  id v7 = +[UAFAssetSetManager sharedManager];
  int v8 = [*(id *)(a1 + 32) objectForKeyedSubscript:v5];
  int v9 = [v7 retrieveAssetSet:v8 usages:0];

  uint64_t v10 = [v9 experimentId];
  if (v10
    && (id v11 = (void *)v10,
        [v9 experimentId],
        id v12 = objc_claimAutoreleasedReturnValue(),
        unsigned int v13 = [v12 isEqualToString:&stru_10050F7D8],
        v12,
        v11,
        !v13))
  {
    int v21 = 1;
  }
  else
  {
    uint64_t v14 = (void *)AFSiriLogContextConnection;
    if (os_log_type_enabled(AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
    {
      int v15 = *(void **)(a1 + 32);
      log = v14;
      int v16 = [v15 objectForKeyedSubscript:v5];
      int v30 = *(_DWORD *)(a1 + 56);
      __int16 v17 = [v4 experimentId];
      id v29 = [v4 deploymentId];
      __int16 v18 = [v3 treatmentId];
      unsigned int v19 = [v4 allocationStatus];
      __int16 v20 = +[NSDate dateWithTimeIntervalSince1970:](NSDate, "dateWithTimeIntervalSince1970:", (double)(unint64_t)[v4 lastUpdatedAtInMs] / 1000.0);
      *(_DWORD *)stat buf = 136317186;
      uint64_t v34 = "+[ADExperimentManager(Tracer) getActiveEXPExperimentsFromProvider:environment:retries:]_block_invoke";
      __int16 v35 = 2112;
      *(void *)uint64_t v36 = v16;
      *(_WORD *)&v36[8] = 2112;
      *(void *)&v36[10] = v5;
      *(_WORD *)&v36[18] = 1024;
      *(_DWORD *)&v36[20] = v30;
      __int16 v37 = 2112;
      uint64_t v38 = v17;
      __int16 v39 = 2048;
      *(void *)uint64_t v40 = v29;
      *(_WORD *)&v40[8] = 2112;
      *(void *)&v40[10] = v18;
      __int16 v41 = 1024;
      unsigned int v42 = v19;
      __int16 v43 = 2112;
      uint64_t v44 = v20;
      _os_log_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_INFO, "%s Not active AB experiment for AssetSet %@ (%@), environment %d. ExperimentId: %@, DeploymentId: %lld, TreatmentId: %@, Status: %d, Date: %@", buf, 0x54u);
    }
    int v21 = 0;
  }

  if (v4)
  {
LABEL_11:
    if (v21)
    {
      __int16 v22 = (void *)AFSiriLogContextConnection;
      if (os_log_type_enabled(AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
      {
        int loga = *(_DWORD *)(a1 + 56);
        id v23 = v22;
        __int16 v24 = [v4 experimentId];
        id v25 = [v4 deploymentId];
        __int16 v26 = [v3 treatmentId];
        unsigned int v27 = [v4 allocationStatus];
        __int16 v28 = +[NSDate dateWithTimeIntervalSince1970:](NSDate, "dateWithTimeIntervalSince1970:", (double)(unint64_t)[v4 lastUpdatedAtInMs] / 1000.0);
        *(_DWORD *)stat buf = 136316674;
        uint64_t v34 = "+[ADExperimentManager(Tracer) getActiveEXPExperimentsFromProvider:environment:retries:]_block_invoke";
        __int16 v35 = 1024;
        *(_DWORD *)uint64_t v36 = loga;
        *(_WORD *)&v36[4] = 2112;
        *(void *)&v36[6] = v24;
        *(_WORD *)&v36[14] = 2048;
        *(void *)&v36[16] = v25;
        __int16 v37 = 2112;
        uint64_t v38 = v26;
        __int16 v39 = 1024;
        *(_DWORD *)uint64_t v40 = v27;
        *(_WORD *)&v40[4] = 2112;
        *(void *)&v40[6] = v28;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "%s Active EXP experiment for environment %d. ExperimentId: %@, DeploymentId: %lld, TreatmentId: %@, Status: %d, Date: %@", buf, 0x40u);
      }
      [*(id *)(a1 + 40) addObject:v4];
    }
  }
LABEL_15:
}

void sub_1001A1264(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 48);
  id v4 = a2;
  id v5 = [v3 abExperimentFromExperimentAllocationStatus:v4];
  uint64_t v6 = [v4 namespaces];

  id v7 = [v6 firstObject];
  int v8 = [v7 name];

  int v9 = [*(id *)(a1 + 32) objectForKeyedSubscript:v8];

  if (!v9)
  {
    int v25 = 1;
    if (!v5) {
      goto LABEL_15;
    }
    goto LABEL_11;
  }
  uint64_t v10 = +[UAFAssetSetManager sharedManager];
  id v11 = [*(id *)(a1 + 32) objectForKeyedSubscript:v8];
  id v12 = [v10 retrieveAssetSet:v11 usages:0];

  uint64_t v13 = [v12 experimentId];
  if (v13
    && (uint64_t v14 = (void *)v13,
        [v12 experimentId],
        int v15 = objc_claimAutoreleasedReturnValue(),
        unsigned int v16 = [v15 isEqualToString:&stru_10050F7D8],
        v15,
        v14,
        !v16))
  {
    int v25 = 1;
  }
  else
  {
    __int16 v17 = (void *)AFSiriLogContextConnection;
    if (os_log_type_enabled(AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
    {
      __int16 v18 = *(void **)(a1 + 32);
      unsigned int v19 = v17;
      __int16 v20 = [v18 objectForKeyedSubscript:v8];
      int v21 = *(_DWORD *)(a1 + 56);
      __int16 v22 = [v5 experimentId];
      id v23 = [v5 deploymentId];
      __int16 v24 = [v5 treatmentId];
      int v32 = 136316674;
      uint64_t v33 = "+[ADExperimentManager(Tracer) getActiveABExperimentsFromProvider:environment:retries:]_block_invoke";
      __int16 v34 = 2112;
      *(void *)__int16 v35 = v20;
      *(_WORD *)&v35[8] = 2112;
      *(void *)&v35[10] = v8;
      *(_WORD *)&v35[18] = 1024;
      *(_DWORD *)&v35[20] = v21;
      __int16 v36 = 2112;
      __int16 v37 = v22;
      __int16 v38 = 2112;
      __int16 v39 = v23;
      __int16 v40 = 2112;
      __int16 v41 = v24;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "%s Not active AB experiment for AssetSet %@ (%@), environment %d. ExperimentId: %@, DeploymentId: %@, TreatmentId: %@", (uint8_t *)&v32, 0x44u);
    }
    int v25 = 0;
  }

  if (v5)
  {
LABEL_11:
    if (v25)
    {
      __int16 v26 = (void *)AFSiriLogContextConnection;
      if (os_log_type_enabled(AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
      {
        int v27 = *(_DWORD *)(a1 + 56);
        __int16 v28 = v26;
        id v29 = [v5 experimentId];
        int v30 = [v5 deploymentId];
        uint64_t v31 = [v5 treatmentId];
        int v32 = 136316162;
        uint64_t v33 = "+[ADExperimentManager(Tracer) getActiveABExperimentsFromProvider:environment:retries:]_block_invoke";
        __int16 v34 = 1024;
        *(_DWORD *)__int16 v35 = v27;
        *(_WORD *)&v35[4] = 2112;
        *(void *)&v35[6] = v29;
        *(_WORD *)&v35[14] = 2112;
        *(void *)&v35[16] = v30;
        __int16 v36 = 2112;
        __int16 v37 = v31;
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_INFO, "%s Active AB experiment for environment %d. ExperimentId: %@, DeploymentId: %@, TreatmentId: %@", (uint8_t *)&v32, 0x30u);
      }
      [*(id *)(a1 + 40) addObject:v5];
    }
  }
LABEL_15:
}

void sub_1001A17A8(uint64_t a1)
{
  id v2 = *(NSObject **)(a1 + 32);
  id v3 = v2;
  if (!v2)
  {
    id v3 = dispatch_get_global_queue(0, 0);
  }
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1001A1868;
  v4[3] = &unk_10050D8C0;
  uint64_t v6 = *(void *)(a1 + 40);
  id v5 = v2;
  dispatch_async(v3, v4);
  if (!v2) {
}
  }

void sub_1001A1868(uint64_t a1)
{
  id v2 = +[ADExperimentManager assetSets];
  v30[0] = 0;
  v30[1] = v30;
  v30[2] = 0x3032000000;
  v30[3] = sub_1001A1CA4;
  void v30[4] = sub_1001A1CB4;
  id v3 = +[ADExperimentManager assetSets];
  id v31 = +[ADExperimentManager namespaceAssetSet:v3];

  uint64_t v24 = 0;
  int v25 = &v24;
  uint64_t v26 = 0x3032000000;
  int v27 = sub_1001A1CA4;
  __int16 v28 = sub_1001A1CB4;
  id v29 = (id)objc_opt_new();
  id v4 = +[ADPreferences sharedPreferences];
  id v5 = [v4 experimentsUAFEmitted];

  if (v5) {
    [(id)v25[5] addEntriesFromDictionary:v5];
  }
  v23[0] = _NSConcreteStackBlock;
  v23[1] = 3221225472;
  uint64_t v6 = *(void *)(a1 + 40);
  void v23[2] = sub_1001A1CBC;
  v23[3] = &unk_100504E80;
  void v23[4] = &v24;
  void v23[5] = v30;
  v23[6] = v6;
  id v7 = objc_retainBlock(v23);
  v22[0] = _NSConcreteStackBlock;
  v22[1] = 3221225472;
  void v22[2] = sub_1001A202C;
  v22[3] = &unk_100504E80;
  uint64_t v8 = *(void *)(a1 + 40);
  v22[5] = v30;
  v22[6] = v8;
  void v22[4] = &v24;
  int v9 = objc_retainBlock(v22);
  ((void (*)(void *))v7[2])(v7);
  ((void (*)(void *))v9[2])(v9);
  uint64_t v10 = +[TRIAllocationStatus defaultProvider];
  id v11 = *(void **)(a1 + 32);
  id v12 = v11;
  if (!v11)
  {
    id v12 = dispatch_get_global_queue(0, 0);
  }
  id v13 = [v10 addStatusUpdateHandlerForEnvironment:3 queue:v12 block:v7];
  if (!v11) {

  }
  uint64_t v14 = +[TRIAllocationStatus defaultProvider];
  int v15 = *(void **)(a1 + 32);
  unsigned int v16 = v15;
  if (!v15)
  {
    unsigned int v16 = dispatch_get_global_queue(0, 0);
  }
  id v17 = [v14 addStatusUpdateHandlerForEnvironment:0 queue:v16 block:v9];
  if (!v15) {

  }
  __int16 v18 = AFSiriLogContextConnection;
  if (os_log_type_enabled(AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)stat buf = 136315394;
    uint64_t v33 = "+[ADExperimentManager(Tracer) tracerAllocationsWithQueue:]_block_invoke";
    __int16 v34 = 2112;
    __int16 v35 = v2;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "%s Start observing assetSets %@", buf, 0x16u);
  }
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 3221225472;
  v19[2] = sub_1001A2274;
  v19[3] = &unk_100504EA8;
  int v21 = &v24;
  id v20 = *(id *)(a1 + 32);
  [v2 enumerateKeysAndObjectsUsingBlock:v19];

  _Block_object_dispose(&v24, 8);
  _Block_object_dispose(v30, 8);
}

void sub_1001A1C6C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 176), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1001A1CA4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1001A1CB4(uint64_t a1)
{
}

void sub_1001A1CBC(uint64_t a1)
{
  id v2 = *(void **)(a1 + 48);
  id v3 = +[TRIAllocationStatus defaultProvider];
  id v4 = [v2 getActiveABExperimentsFromProvider:v3 environment:3 retries:5];

  id v5 = v4;
  os_unfair_lock_lock((os_unfair_lock_t)&unk_100585740);
  if (v5)
  {
    int v6 = AFIsInternalInstall();
    id v7 = [v5 count];
    unint64_t v8 = 20;
    if (v6) {
      unint64_t v8 = 35;
    }
    if (v8 >= (unint64_t)v7) {
      id v9 = v7;
    }
    else {
      id v9 = (id)v8;
    }
    uint64_t v10 = objc_msgSend(v5, "subarrayWithRange:", 0, v9);
  }
  else
  {
    uint64_t v10 = 0;
  }
  id v11 = (void *)qword_100585738;
  qword_100585738 = v10;

  id v12 = AFSiriLogContextConnection;
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    id v13 = (id)qword_100585738;
    if (qword_100585738) {
      id v13 = [(id)qword_100585738 count];
    }
    *(_DWORD *)stat buf = 136315394;
    uint64_t v26 = "ADTrialActiveExperimentsUpdate";
    __int16 v27 = 2048;
    id v28 = v13;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "%s Total active experiments updated: %lu", buf, 0x16u);
  }

  os_unfair_lock_unlock((os_unfair_lock_t)&unk_100585740);
  uint64_t v14 = +[ADPreferences sharedPreferences];
  int v15 = [v14 lastServerExperimentCheckDate];

  unsigned int v16 = +[NSDate date];
  id v17 = AFSiriLogContextConnection;
  if (os_log_type_enabled(AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)stat buf = 136315394;
    uint64_t v26 = "+[ADExperimentManager(Tracer) tracerAllocationsWithQueue:]_block_invoke";
    __int16 v27 = 2112;
    id v28 = v15;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "%s Search for server experiments from date %@", buf, 0x16u);
  }
  id v18 = [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) copy];
  unsigned int v19 = *(void **)(a1 + 48);
  id v20 = +[TRIAllocationStatus defaultProvider];
  int v21 = [v19 getAllEXPExperimentsFromProvider:v20 cursor:0 environment:3 fromDate:v15 retries:5 experimentsEmitted:*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) namespaceAssetSet:*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40)];

  if (v21)
  {
    __int16 v22 = AFSiriLogContextConnection;
    if (os_log_type_enabled(AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)stat buf = 136315394;
      uint64_t v26 = "+[ADExperimentManager(Tracer) tracerAllocationsWithQueue:]_block_invoke";
      __int16 v27 = 2112;
      id v28 = v16;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, "%s New Server Experiment Check Date: %@", buf, 0x16u);
    }
    [*(id *)(a1 + 48) emitUpdatedExperiments:v21];
    id v23 = +[ADPreferences sharedPreferences];
    [v23 setLastServerExperimentCheckDate:v16];

    if (([*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) isEqual:v18] & 1) == 0)
    {
      uint64_t v24 = +[ADPreferences sharedPreferences];
      [v24 setExperimentsUAFEmitted:*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)];
    }
  }
}

void sub_1001A202C(uint64_t a1)
{
  id v2 = +[ADPreferences sharedPreferences];
  id v3 = [v2 lastDeviceExperimentCheckDate];

  id v4 = +[NSDate date];
  id v5 = AFSiriLogContextConnection;
  if (os_log_type_enabled(AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)stat buf = 136315394;
    uint64_t v14 = "+[ADExperimentManager(Tracer) tracerAllocationsWithQueue:]_block_invoke";
    __int16 v15 = 2112;
    unsigned int v16 = v3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "%s Search for client experiments from date %@", buf, 0x16u);
  }
  id v6 = [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) copy];
  id v7 = *(void **)(a1 + 48);
  unint64_t v8 = +[TRIAllocationStatus defaultProvider];
  id v9 = [v7 getAllEXPExperimentsFromProvider:v8 cursor:0 environment:0 fromDate:v3 retries:5 experimentsEmitted:*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) namespaceAssetSet:*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40)];

  if (v9)
  {
    uint64_t v10 = AFSiriLogContextConnection;
    if (os_log_type_enabled(AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)stat buf = 136315394;
      uint64_t v14 = "+[ADExperimentManager(Tracer) tracerAllocationsWithQueue:]_block_invoke";
      __int16 v15 = 2112;
      unsigned int v16 = v4;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "%s New Client Experiment Check Date: %@", buf, 0x16u);
    }
    [*(id *)(a1 + 48) emitUpdatedExperiments:v9];
    id v11 = +[ADPreferences sharedPreferences];
    [v11 setLastDeviceExperimentCheckDate:v4];

    if (([*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) isEqual:v6] & 1) == 0)
    {
      id v12 = +[ADPreferences sharedPreferences];
      [v12 setExperimentsUAFEmitted:*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)];
    }
  }
}

void sub_1001A2274(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = [v6 copy];
  +[ADExperimentManager logAssetSetExperiment:v5 trialData:v7 experimentsEmitted:*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40)];

  unint64_t v8 = +[UAFAssetSetManager sharedManager];
  id v9 = *(void **)(a1 + 32);
  uint64_t v10 = v9;
  if (!v9)
  {
    uint64_t v10 = dispatch_get_global_queue(0, 0);
  }
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  void v14[2] = sub_1001A23C4;
  v14[3] = &unk_10050C700;
  id v15 = v5;
  id v16 = v6;
  uint64_t v17 = *(void *)(a1 + 40);
  id v11 = v6;
  id v12 = v5;
  id v13 = [v8 observeAssetSet:v12 queue:v10 handler:v14];
  if (!v9) {
}
  }

void sub_1001A23C4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = [*(id *)(a1 + 40) copy];
  +[ADExperimentManager logAssetSetExperiment:v2 trialData:v3 experimentsEmitted:*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40)];
}

void sub_1001A24FC(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v5 = [a3 objectForKeyedSubscript:@"TrialNamespace"];
  if (v5) {
    [*(id *)(a1 + 32) setObject:v6 forKeyedSubscript:v5];
  }
}

void sub_1001A25CC(id a1)
{
  uint64_t v1 = objc_opt_new();
  v5[0] = @"TrialProject";
  v5[1] = @"TrialNamespace";
  v6[0] = @"UAF_AB";
  v6[1] = @"UAF_AB_UNDERSTANDING";
  uint64_t v2 = +[NSDictionary dictionaryWithObjects:v6 forKeys:v5 count:2];
  [v1 setObject:v2 forKeyedSubscript:@"com.apple.siri.understanding"];
  uint64_t v3 = +[NSDictionary dictionaryWithDictionary:v1];
  id v4 = (void *)qword_100585D90;
  qword_100585D90 = v3;
}

void sub_1001A29D4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v5)
  {
    id v7 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      uint64_t v11 = *(void *)(a1 + 32);
      int v12 = 136315650;
      id v13 = "-[ADCloudKitCapabilitiesDataStore synchronizeWithCompletion:]_block_invoke";
      __int16 v14 = 2112;
      uint64_t v15 = v11;
      __int16 v16 = 2112;
      id v17 = v5;
      _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "%s Failed to save %@ with error: %@", (uint8_t *)&v12, 0x20u);
    }
    uint64_t v8 = *(void *)(a1 + 40);
    if (v8)
    {
      id v9 = *(void (**)(void))(v8 + 16);
LABEL_8:
      v9();
    }
  }
  else
  {
    uint64_t v10 = *(void *)(a1 + 40);
    if (v10)
    {
      id v9 = *(void (**)(void))(v10 + 16);
      goto LABEL_8;
    }
  }
}

id sub_1001A33EC(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1;
  id v5 = [objc_alloc((Class)NSString) initWithFormat:@"%@_index_%@", v4, v3];

  return v5;
}

void sub_1001A43B4(void *a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  id v7 = a1;
  uint64_t v8 = sub_1001A33EC(v7, v6);
  id v9 = objc_alloc((Class)SiriCoreSQLiteIndexDescription);
  id v12 = v6;
  uint64_t v10 = +[NSArray arrayWithObjects:&v12 count:1];

  id v11 = [v9 initWithName:v8 tableName:v7 columnNames:v10 options:0];
  [v5 createIndex:v11 error:0];
}

void sub_1001A4AF0(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) _account];
  uint64_t v3 = [v2 localCryptoKeyData];
  if (!v3)
  {
    uint64_t v18 = 0;
    id v4 = AFSecurityGenerateRandomData();
    id v5 = 0;
    if (!v5)
    {
      if ([v2 setLocalCryptoKeyData:v4]) {
        goto LABEL_3;
      }
      id v5 = +[AFError errorWithCode:1605];
      if (!v5) {
        goto LABEL_6;
      }
    }

    id v4 = 0;
    goto LABEL_6;
  }
  id v4 = (void *)v3;
LABEL_3:
  id v5 = 0;
LABEL_6:
  id v6 = [v2 identifier];
  id v7 = [v6 dataUsingEncoding:4];

  uint64_t v8 = *(NSObject **)(*(void *)(a1 + 40) + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1001A4C84;
  block[3] = &unk_10050E228;
  id v9 = *(id *)(a1 + 48);
  id v14 = v4;
  id v15 = v7;
  id v16 = v5;
  id v17 = v9;
  id v10 = v5;
  id v11 = v7;
  id v12 = v4;
  dispatch_async(v8, block);
}

uint64_t sub_1001A4C84(void *a1)
{
  return (*(uint64_t (**)(void, void, void, void))(a1[7] + 16))(a1[7], a1[4], a1[5], a1[6]);
}

uint64_t sub_1001A4D80(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

uint64_t sub_1001A4E7C(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

uint64_t sub_1001A4F70(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32), 0);
}

uint64_t sub_1001A5064(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32), 0);
}

uint64_t sub_1001A5154(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_1001A5240(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1001A5364(uint64_t a1)
{
  char v2 = AFKeychainSetValueForAccountAndKey();
  uint64_t v3 = *(void **)(a1 + 64);
  if (v3)
  {
    char v4 = v2;
    id v5 = *(NSObject **)(*(void *)(a1 + 56) + 24);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    void v6[2] = sub_1001A5410;
    v6[3] = &unk_10050CF50;
    id v7 = v3;
    char v8 = v4;
    dispatch_async(v5, v6);
  }
}

void sub_1001A5410(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(unsigned char *)(a1 + 40))
  {
    char v2 = *(void (**)(uint64_t, void))(v1 + 16);
    uint64_t v3 = *(void *)(a1 + 32);
    v2(v3, 0);
  }
  else
  {
    id v4 = +[AFError errorWithCode:1613];
    (*(void (**)(uint64_t, id))(v1 + 16))(v1, v4);
  }
}

void sub_1001A561C(uint64_t a1)
{
  char v2 = *(void **)(a1 + 56);
  uint64_t v3 = 1;
  switch((unint64_t)v2)
  {
    case 1uLL:
    case 3uLL:
      objc_initWeak(&location, *(id *)(a1 + 40));
      id v4 = *(void **)(a1 + 40);
      v19[0] = _NSConcreteStackBlock;
      v19[1] = 3221225472;
      v19[2] = sub_1001A5A68;
      v19[3] = &unk_100504F58;
      id v20 = *(id *)(a1 + 32);
      v22[1] = v2;
      objc_copyWeak(v22, &location);
      id v21 = *(id *)(a1 + 48);
      [v4 _retrieveKeyAndSaltWithCompletion:v19];

      objc_destroyWeak(v22);
      objc_destroyWeak(&location);
      return;
    case 2uLL:
      goto LABEL_4;
    case 4uLL:
      uint64_t v3 = 3;
LABEL_4:
      objc_initWeak(&location, *(id *)(a1 + 40));
      id v5 = *(void **)(a1 + 40);
      v15[0] = _NSConcreteStackBlock;
      v15[1] = 3221225472;
      void v15[2] = sub_1001A5CBC;
      v15[3] = &unk_100504F58;
      id v16 = *(id *)(a1 + 32);
      v18[1] = (id)v3;
      objc_copyWeak(v18, &location);
      id v17 = *(id *)(a1 + 48);
      [v5 _retrieveKeyAndSaltWithCompletion:v15];

      objc_destroyWeak(v18);
      objc_destroyWeak(&location);
      return;
    case 5uLL:
      goto LABEL_7;
    case 6uLL:
      uint64_t v3 = 2;
LABEL_7:
      id v9 = [*(id *)(a1 + 32) count];
      id v10 = [objc_alloc((Class)NSMutableDictionary) initWithCapacity:v9];
      id v11 = [objc_alloc((Class)NSMutableDictionary) initWithCapacity:v9];
      id v12 = *(void **)(a1 + 32);
      v24[0] = _NSConcreteStackBlock;
      v24[1] = 3221225472;
      void v24[2] = sub_1001A59C8;
      v24[3] = &unk_100504F80;
      void v24[4] = *(void *)(a1 + 40);
      id v25 = v10;
      id v26 = v11;
      uint64_t v27 = v3;
      id v13 = v11;
      id v14 = v10;
      [v12 enumerateKeysAndObjectsUsingBlock:v24];
      [*(id *)(a1 + 40) _dispatchCallbackForProcessedDataMap:v14 errorMap:v13 completion:*(void *)(a1 + 48)];

      break;
    default:
      id v6 = *(void **)(a1 + 40);
      CFStringRef v28 = @"error";
      id v7 = +[AFError errorWithCode:1600];
      id v29 = v7;
      char v8 = +[NSDictionary dictionaryWithObjects:&v29 forKeys:&v28 count:1];
      [v6 _dispatchCallbackForProcessedDataMap:0 errorMap:v8 completion:*(void *)(a1 + 48)];

      break;
  }
}

void sub_1001A5974(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,id location)
{
  objc_destroyWeak(v25);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1001A59C8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = AFSecurityDigestData();
  id v5 = 0;
  if (v4) {
    [*(id *)(a1 + 40) setObject:v4 forKey:v3];
  }
  if (v5) {
    [*(id *)(a1 + 48) setObject:v5 forKey:v3];
  }
}

void sub_1001A5A68(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v5 = a4;
  if (v5)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
    CFStringRef v24 = @"error";
    id v25 = v5;
    id v7 = +[NSDictionary dictionaryWithObjects:&v25 forKeys:&v24 count:1];
    [WeakRetained _dispatchCallbackForProcessedDataMap:0 errorMap:v7 completion:*(void *)(a1 + 40)];
  }
  else
  {
    uint64_t v23 = 0;
    id v7 = AFSecurityDigestData();
    id WeakRetained = 0;
    if (WeakRetained)
    {
      id v8 = objc_loadWeakRetained((id *)(a1 + 48));
      CFStringRef v26 = @"error";
      id v27 = WeakRetained;
      id v9 = +[NSDictionary dictionaryWithObjects:&v27 forKeys:&v26 count:1];
      [v8 _dispatchCallbackForProcessedDataMap:0 errorMap:v9 completion:*(void *)(a1 + 40)];
    }
    else
    {
      id v10 = [*(id *)(a1 + 32) count];
      id v11 = [objc_alloc((Class)NSMutableDictionary) initWithCapacity:v10];
      id v12 = [objc_alloc((Class)NSMutableDictionary) initWithCapacity:v10];
      id v13 = *(void **)(a1 + 32);
      v17[0] = _NSConcreteStackBlock;
      v17[1] = 3221225472;
      v17[2] = sub_1001A5FB0;
      v17[3] = &unk_100504FA8;
      id v14 = v7;
      uint64_t v15 = *(void *)(a1 + 56);
      id v21 = v12;
      uint64_t v22 = v15;
      id v18 = v14;
      id v19 = v11;
      id v20 = 0;
      id v9 = v12;
      id v8 = v11;
      [v13 enumerateKeysAndObjectsUsingBlock:v17];
      id v16 = objc_loadWeakRetained((id *)(a1 + 48));
      [v16 _dispatchCallbackForProcessedDataMap:v8 errorMap:v9 completion:*(void *)(a1 + 40)];
    }
  }
}

void sub_1001A5CBC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v5 = a4;
  if (v5)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
    CFStringRef v24 = @"error";
    id v25 = v5;
    id v7 = +[NSDictionary dictionaryWithObjects:&v25 forKeys:&v24 count:1];
    [WeakRetained _dispatchCallbackForProcessedDataMap:0 errorMap:v7 completion:*(void *)(a1 + 40)];
  }
  else
  {
    uint64_t v23 = 0;
    id v7 = AFSecurityDigestData();
    id WeakRetained = 0;
    if (WeakRetained)
    {
      id v8 = objc_loadWeakRetained((id *)(a1 + 48));
      CFStringRef v26 = @"error";
      id v27 = WeakRetained;
      id v9 = +[NSDictionary dictionaryWithObjects:&v27 forKeys:&v26 count:1];
      [v8 _dispatchCallbackForProcessedDataMap:0 errorMap:v9 completion:*(void *)(a1 + 40)];
    }
    else
    {
      id v10 = [*(id *)(a1 + 32) count];
      id v11 = [objc_alloc((Class)NSMutableDictionary) initWithCapacity:v10];
      id v12 = [objc_alloc((Class)NSMutableDictionary) initWithCapacity:v10];
      id v13 = *(void **)(a1 + 32);
      v17[0] = _NSConcreteStackBlock;
      v17[1] = 3221225472;
      v17[2] = sub_1001A5F10;
      v17[3] = &unk_100504FA8;
      id v14 = v7;
      uint64_t v15 = *(void *)(a1 + 56);
      id v21 = v12;
      uint64_t v22 = v15;
      id v18 = v14;
      id v19 = v11;
      id v20 = 0;
      id v9 = v12;
      id v8 = v11;
      [v13 enumerateKeysAndObjectsUsingBlock:v17];
      id v16 = objc_loadWeakRetained((id *)(a1 + 48));
      [v16 _dispatchCallbackForProcessedDataMap:v8 errorMap:v9 completion:*(void *)(a1 + 40)];
    }
  }
}

void sub_1001A5F10(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = AFSecurityDecryptData();
  id v5 = 0;
  if (v4) {
    [*(id *)(a1 + 40) setObject:v4 forKey:v3];
  }
  if (*(void *)(a1 + 48)) {
    [*(id *)(a1 + 56) setObject:v5 forKey:v3];
  }
}

void sub_1001A5FB0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = AFSecurityEncryptData();
  id v5 = 0;
  if (v4) {
    [*(id *)(a1 + 40) setObject:v4 forKey:v3];
  }
  if (*(void *)(a1 + 48)) {
    [*(id *)(a1 + 56) setObject:v5 forKey:v3];
  }
}

void sub_1001A615C(uint64_t a1)
{
  char v2 = *(void **)(a1 + 56);
  uint64_t v3 = 1;
  switch((unint64_t)v2)
  {
    case 1uLL:
    case 3uLL:
      objc_initWeak(location, *(id *)(a1 + 40));
      v15[0] = _NSConcreteStackBlock;
      v15[1] = 3221225472;
      void v15[2] = sub_1001A63E8;
      v15[3] = &unk_100504F58;
      id v4 = *(void **)(a1 + 40);
      id v16 = *(id *)(a1 + 32);
      v18[1] = v2;
      objc_copyWeak(v18, location);
      id v17 = *(id *)(a1 + 48);
      [v4 _retrieveKeyAndSaltWithCompletion:v15];

      objc_destroyWeak(v18);
      id v5 = v16;
      goto LABEL_5;
    case 2uLL:
      goto LABEL_4;
    case 4uLL:
      uint64_t v3 = 3;
LABEL_4:
      objc_initWeak(location, *(id *)(a1 + 40));
      v11[0] = _NSConcreteStackBlock;
      v11[1] = 3221225472;
      void v11[2] = sub_1001A64EC;
      void v11[3] = &unk_100504F58;
      id v6 = *(void **)(a1 + 40);
      id v12 = *(id *)(a1 + 32);
      v14[1] = (id)v3;
      objc_copyWeak(v14, location);
      id v13 = *(id *)(a1 + 48);
      [v6 _retrieveKeyAndSaltWithCompletion:v11];

      objc_destroyWeak(v14);
      id v5 = v12;
LABEL_5:

      objc_destroyWeak(location);
      break;
    case 5uLL:
    case 6uLL:
      location[1] = 0;
      id v8 = AFSecurityDigestData();
      id v9 = 0;
      [*(id *)(a1 + 40) _dispatchCallbackForProcessedData:v8 error:v9 completion:*(void *)(a1 + 48)];

      break;
    default:
      id v7 = *(void **)(a1 + 40);
      id v10 = +[AFError errorWithCode:1600];
      [v7 _dispatchCallbackForProcessedData:0 error:v10 completion:*(void *)(a1 + 48)];

      break;
  }
}

void sub_1001A63B0(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 48));
  _Unwind_Resume(a1);
}

void sub_1001A63E8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v5 = a4;
  if (v5)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
    [WeakRetained _dispatchCallbackForProcessedData:0 error:v5 completion:*(void *)(a1 + 40)];
  }
  else
  {
    id v7 = AFSecurityDigestData();
    id v8 = 0;
    if (v8)
    {
      id v9 = v8;
      id v10 = 0;
    }
    else
    {
      id v10 = AFSecurityEncryptData();
      id v9 = 0;
    }
    id v11 = objc_loadWeakRetained((id *)(a1 + 48));
    [v11 _dispatchCallbackForProcessedData:v10 error:v9 completion:*(void *)(a1 + 40)];
  }
}

void sub_1001A64EC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v5 = a4;
  if (v5)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
    [WeakRetained _dispatchCallbackForProcessedData:0 error:v5 completion:*(void *)(a1 + 40)];
  }
  else
  {
    id v7 = AFSecurityDigestData();
    id v8 = 0;
    if (v8)
    {
      id v9 = v8;
      id v10 = 0;
    }
    else
    {
      id v10 = AFSecurityDecryptData();
      id v9 = 0;
    }
    id v11 = objc_loadWeakRetained((id *)(a1 + 48));
    [v11 _dispatchCallbackForProcessedData:v10 error:v9 completion:*(void *)(a1 + 40)];
  }
}

void sub_1001A6868(uint64_t a1, unint64_t a2)
{
  id v3 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", @"Queue %s did not respond to watchdog and is likely blocked.", dispatch_queue_get_label(*(dispatch_queue_t *)(a1 + 32)));
  id v4 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)stat buf = 136315394;
    id v7 = "-[ADSecurityService init]_block_invoke";
    __int16 v8 = 2112;
    id v9 = v3;
    _os_log_fault_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "%s %@", buf, 0x16u);
  }
  int v5 = AFIsInternalInstall();
  if (a2 <= 3 && v5) {
    WriteStackshotReport_async();
  }
}

void sub_1001A6984(uint64_t a1, unint64_t a2)
{
  id v3 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", @"Queue %s did not respond to watchdog and is likely blocked.", dispatch_queue_get_label(*(dispatch_queue_t *)(a1 + 32)));
  id v4 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)stat buf = 136315394;
    id v7 = "-[ADSecurityService init]_block_invoke";
    __int16 v8 = 2112;
    id v9 = v3;
    _os_log_fault_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "%s %@", buf, 0x16u);
  }
  int v5 = AFIsInternalInstall();
  if (a2 <= 3 && v5) {
    WriteStackshotReport_async();
  }
}

void sub_1001A6AF4(id a1)
{
  uint64_t v1 = objc_alloc_init(ADSecurityService);
  uint64_t v2 = qword_100585DA8;
  qword_100585DA8 = (uint64_t)v1;
  _objc_release_x1(v1, v2);
}

void sub_1001A6F4C(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 112);
  id v3 = +[NSDate date];
  id v4 = [v2 compare:v3];

  if (v4 == (id)-1)
  {
    id v5 = objc_alloc((Class)AFDeviceContextMetadata);
    uint64_t v6 = AFDeviceContextKeyHeardVoiceTrigger;
    id v7 = +[NSDate date];
    __int16 v8 = +[NSDate dateWithTimeIntervalSinceNow:15.0];
    id v9 = [v5 initWithType:v6 deliveryDate:v7 expirationDate:v8 redactedKeyPaths:0 historyConfiguration:0];

    [*(id *)(*(void *)(a1 + 32) + 48) donateContext:&off_1005237E0 withMetadata:v9 pushToRemote:0];
    id v10 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      int v11 = 136315138;
      id v12 = "-[ADDeviceProximityManager notifyObserver:didReceiveNotificationWithToken:]_block_invoke";
      _os_log_debug_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "%s #hal Heard Voice Trigger expired", (uint8_t *)&v11, 0xCu);
    }
  }
}

void sub_1001A70CC(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 112);
  id v3 = +[NSDate date];
  id v4 = [v2 compare:v3];

  if (v4 == (id)-1)
  {
    id v5 = objc_alloc((Class)AFDeviceContextMetadata);
    uint64_t v6 = AFDeviceContextKeyHeardVoiceTrigger;
    id v7 = +[NSDate date];
    __int16 v8 = +[NSDate dateWithTimeIntervalSinceNow:5.0];
    id v9 = [v5 initWithType:v6 deliveryDate:v7 expirationDate:v8 redactedKeyPaths:0 historyConfiguration:0];

    [*(id *)(*(void *)(a1 + 32) + 48) donateContext:&off_1005237E0 withMetadata:v9 pushToRemote:0];
    id v10 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      int v11 = 136315138;
      id v12 = "-[ADDeviceProximityManager notifyObserver:didReceiveNotificationWithToken:]_block_invoke";
      _os_log_debug_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "%s #hal Voice Trigger first pass expired", (uint8_t *)&v11, 0xCu);
    }
  }
}

void sub_1001A72C0(uint64_t a1)
{
  uint64_t v2 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    int v7 = 136315138;
    __int16 v8 = "-[ADDeviceProximityManager requestLifecycleObserver:requestDidEndWithInfo:origin:client:]_block_invoke";
    _os_log_debug_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s #hal cached proximity cleared", (uint8_t *)&v7, 0xCu);
  }
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = *(void **)(v3 + 24);
  *(void *)(v3 + 24) = 0;

  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *(void **)(v5 + 120);
  *(void *)(v5 + 120) = 0;
}

uint64_t sub_1001A742C(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 40) uuid];
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void *)(v3 + 120);
  *(void *)(v3 + 120) = v2;
  return _objc_release_x1(v2, v4);
}

uint64_t sub_1001A74EC(uint64_t result)
{
  *(unsigned char *)(*(void *)(result + 32) + 32) = *(unsigned char *)(result + 40);
  return result;
}

id sub_1001A781C(id a1, NSArray *a2)
{
  uint64_t v2 = sub_1001A786C(a2);
  uint64_t v3 = [v2 buildDictionaryRepresentation];

  return v3;
}

id sub_1001A786C(void *a1)
{
  id v1 = a1;
  uint64_t v2 = +[NSDate date];
  uint64_t v22 = 0;
  uint64_t v23 = &v22;
  uint64_t v24 = 0x3032000000;
  id v25 = sub_1001A7B1C;
  CFStringRef v26 = sub_1001A7B2C;
  id v27 = 0;
  id v3 = objc_alloc_init((Class)NSCountedSet);
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472;
  v17[2] = sub_1001A7B34;
  v17[3] = &unk_100505098;
  id v4 = v2;
  id v18 = v4;
  id v5 = v1;
  id v19 = v5;
  id v21 = &v22;
  id v6 = v3;
  id v20 = v6;
  [v5 enumerateObjectsWithOptions:2 usingBlock:v17];
  if ((unint64_t)[v6 count] >= 2)
  {
    int v7 = [v6 allObjects];
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472;
    void v15[2] = sub_1001A7CC8;
    v15[3] = &unk_1005050C0;
    id v16 = v6;
    __int16 v8 = [v7 sortedArrayUsingComparator:v15];
    id v9 = [v8 firstObject];
    unsigned int v10 = [v9 intValue];

    if (v10 && [(id)v23[5] proximity] != v10)
    {
      v13[0] = _NSConcreteStackBlock;
      v13[1] = 3221225472;
      v13[2] = sub_1001A7D80;
      v13[3] = &unk_1005050E8;
      unsigned int v14 = v10;
      void v13[4] = &v22;
      [v5 enumerateObjectsWithOptions:2 usingBlock:v13];
    }
  }
  id v11 = (id)v23[5];

  _Block_object_dispose(&v22, 8);
  return v11;
}

void sub_1001A7B00(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1001A7B1C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1001A7B2C(uint64_t a1)
{
}

void sub_1001A7B34(uint64_t a1, void *a2, unsigned char *a3, unsigned char *a4)
{
  id v8 = a2;
  id v9 = *(void **)(a1 + 32);
  unsigned int v10 = [v8 observationDate];
  [v9 timeIntervalSinceDate:v10];
  double v12 = v11;

  if (v12 >= 420.0)
  {
    *a4 = 1;
  }
  else
  {
    if ((char *)[*(id *)(a1 + 40) count] - 1 == a3)
    {
      id v13 = AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
      {
        int v16 = 136315394;
        id v17 = "ADProximityObservationForHistoricalProximityObservations_block_invoke";
        __int16 v18 = 2112;
        id v19 = v8;
        _os_log_debug_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "%s #hal Most recent prox observation: %@", (uint8_t *)&v16, 0x16u);
      }
      objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40), a2);
    }
    unsigned int v14 = *(void **)(a1 + 48);
    uint64_t v15 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", [v8 proximity]);
    [v14 addObject:v15];
  }
}

uint64_t sub_1001A7CC8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = [*(id *)(a1 + 32) countForObject:v5];
  id v8 = [*(id *)(a1 + 32) countForObject:v6];
  if (v7 >= v8)
  {
    if (v7 > v8)
    {
      uint64_t v9 = -1;
    }
    else
    {
      unsigned int v10 = [v5 intValue];
      unsigned int v11 = [v6 intValue];
      if (v10) {
        int v12 = v10;
      }
      else {
        int v12 = 30;
      }
      if (v11) {
        int v13 = v11;
      }
      else {
        int v13 = 30;
      }
      BOOL v14 = v12 < v13;
      BOOL v15 = v12 > v13;
      uint64_t v16 = v14;
      uint64_t v9 = v15 - v16;
    }
  }
  else
  {
    uint64_t v9 = 1;
  }

  return v9;
}

void sub_1001A7D80(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  id v7 = a2;
  if ([v7 proximity] == *(_DWORD *)(a1 + 40))
  {
    id v8 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      int v9 = 136315394;
      unsigned int v10 = "ADProximityObservationForHistoricalProximityObservations_block_invoke_2";
      __int16 v11 = 2112;
      id v12 = v7;
      _os_log_debug_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "%s #hal Using most seen prox observation: %@", (uint8_t *)&v9, 0x16u);
    }
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), a2);
    *a4 = 1;
  }
}

void sub_1001A8638(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(NSObject **)(*(void *)(a1 + 32) + 128);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1001A86F8;
  block[3] = &unk_10050E1D8;
  id v5 = *(id *)(a1 + 40);
  id v8 = v3;
  id v9 = v5;
  void block[4] = *(void *)(a1 + 32);
  id v6 = v3;
  dispatch_async(v4, block);
}

void sub_1001A86F8(uint64_t a1)
{
  id v2 = objc_alloc_init((Class)NSMutableArray);
  uint64_t v37 = 0;
  __int16 v38 = &v37;
  uint64_t v39 = 0x3032000000;
  __int16 v40 = sub_1001A7B1C;
  __int16 v41 = sub_1001A7B2C;
  id v42 = 0;
  id v3 = objc_alloc((Class)AFSafetyBlock);
  v33[0] = _NSConcreteStackBlock;
  v33[1] = 3221225472;
  v33[2] = sub_1001A8B00;
  v33[3] = &unk_10050CA30;
  __int16 v36 = &v37;
  id v35 = *(id *)(a1 + 48);
  id v21 = v2;
  id v34 = v21;
  id v4 = [v3 initWithBlock:v33];
  id v5 = objc_alloc((Class)AFWatchdogTimer);
  uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 128);
  v31[0] = _NSConcreteStackBlock;
  v31[1] = 3221225472;
  v31[2] = sub_1001A8B4C;
  v31[3] = &unk_10050E138;
  id v19 = v4;
  id v32 = v19;
  id v7 = [v5 initWithTimeoutInterval:v6 onQueue:v31 timeoutHandler:0.5];
  id v8 = (void *)v38[5];
  v38[5] = (uint64_t)v7;

  [(id)v38[5] start];
  id v9 = dispatch_group_create();
  long long v27 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  id obj = *(id *)(a1 + 40);
  id v10 = [obj countByEnumeratingWithState:&v27 objects:v43 count:16];
  if (v10)
  {
    uint64_t v11 = *(void *)v28;
    do
    {
      id v12 = 0;
      do
      {
        if (*(void *)v28 != v11) {
          objc_enumerationMutation(obj);
        }
        uint64_t v13 = *(void *)(*((void *)&v27 + 1) + 8 * (void)v12);
        dispatch_group_enter(v9);
        BOOL v14 = *(void **)(a1 + 32);
        BOOL v15 = (void *)v14[9];
        uint64_t v16 = [v14 _rapportLinkMessageOptions];
        v24[0] = _NSConcreteStackBlock;
        v24[1] = 3221225472;
        void v24[2] = sub_1001A8C04;
        v24[3] = &unk_1005054C0;
        void v24[4] = *(void *)(a1 + 32);
        void v24[5] = v13;
        id v25 = v21;
        CFStringRef v26 = v9;
        [v15 sendRequestID:@"com.apple.siri.rapport-link.request.device-proximity-manager" messageType:@"device_proximity_fetch" messagePayload:&__NSDictionary0__struct toDeviceWithIDSDeviceID:v13 options:v16 completion:v24];

        id v12 = (char *)v12 + 1;
      }
      while (v10 != v12);
      id v10 = [obj countByEnumeratingWithState:&v27 objects:v43 count:16];
    }
    while (v10);
  }

  id v17 = *(NSObject **)(*(void *)(a1 + 32) + 128);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1001A8CF8;
  block[3] = &unk_10050E138;
  id v23 = v19;
  id v18 = v19;
  dispatch_group_notify(v9, v17, block);

  _Block_object_dispose(&v37, 8);
}

void sub_1001A8AD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46)
{
}

uint64_t sub_1001A8B00(uint64_t a1)
{
  [*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) cancel];
  id v2 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);
  return v2();
}

id sub_1001A8B4C(uint64_t a1)
{
  id v2 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
  {
    int v4 = 136315138;
    id v5 = "-[ADDeviceProximityManager _fetchProximityObservationsFromCollectorsWithCompletion:]_block_invoke_4";
    _os_log_error_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "%s #hal proximity fetch timed out", (uint8_t *)&v4, 0xCu);
  }
  return [*(id *)(a1 + 32) invoke];
}

void sub_1001A8C04(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = *(NSObject **)(*(void *)(a1 + 32) + 128);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1001A8D00;
  block[3] = &unk_100507F88;
  uint64_t v8 = *(void *)(a1 + 40);
  id v9 = *(void **)(a1 + 48);
  id v13 = v6;
  uint64_t v14 = v8;
  id v15 = v5;
  id v16 = v9;
  id v17 = *(id *)(a1 + 56);
  id v10 = v5;
  id v11 = v6;
  dispatch_async(v7, block);
}

id sub_1001A8CF8(uint64_t a1)
{
  return [*(id *)(a1 + 32) invoke];
}

void sub_1001A8D00(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    id v3 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      uint64_t v4 = *(void *)(a1 + 40);
      int v7 = 136315650;
      uint64_t v8 = "-[ADDeviceProximityManager _fetchProximityObservationsFromCollectorsWithCompletion:]_block_invoke_2";
      __int16 v9 = 2112;
      uint64_t v10 = v4;
      __int16 v11 = 2112;
      uint64_t v12 = v2;
      _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "%s #hal Error fetching proximity information from %@: %@", (uint8_t *)&v7, 0x20u);
    }
  }
  else
  {
    id v5 = [*(id *)(a1 + 48) objectForKeyedSubscript:@"proximity_observations"];
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      id v6 = objc_msgSend(v5, "af_lenientMappedArray:", &stru_100505498);
      if ([v6 count]) {
        [*(id *)(a1 + 56) addObjectsFromArray:v6];
      }
    }
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 64));
}

id sub_1001A8E48(id a1, NSDictionary *a2)
{
  uint64_t v2 = a2;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v3 = [[ADRapportProximityObservation alloc] initWithDictionaryRepresentation:v2];
  }
  else {
    id v3 = 0;
  }

  return v3;
}

void sub_1001A9010(uint64_t a1, void *a2)
{
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  id obj = a2;
  id v3 = [obj countByEnumeratingWithState:&v14 objects:v18 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v15;
    do
    {
      id v6 = 0;
      do
      {
        if (*(void *)v15 != v5) {
          objc_enumerationMutation(obj);
        }
        uint64_t v7 = *(void *)(*((void *)&v14 + 1) + 8 * (void)v6);
        uint64_t v8 = *(void **)(*(void *)(a1 + 32) + 72);
        __int16 v9 = [*(id *)(a1 + 40) buildDictionaryRepresentation];
        uint64_t v10 = [*(id *)(a1 + 32) _rapportLinkMessageOptions];
        v12[0] = _NSConcreteStackBlock;
        v12[1] = 3221225472;
        void v12[2] = sub_1001A91CC;
        void v12[3] = &unk_10050CB20;
        void v12[4] = v7;
        id v13 = *(id *)(a1 + 40);
        [v8 sendRequestID:@"com.apple.siri.rapport-link.request.device-proximity-manager" messageType:@"device_proximity_push" messagePayload:v9 toDeviceWithIDSDeviceID:v7 options:v10 completion:v12];

        id v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      id v4 = [obj countByEnumeratingWithState:&v14 objects:v18 count:16];
    }
    while (v4);
  }
}

void sub_1001A91CC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = AFSiriLogContextDaemon;
  if (v6)
  {
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      uint64_t v8 = *(void *)(a1 + 32);
      uint64_t v9 = *(void *)(a1 + 40);
      int v12 = 136315906;
      id v13 = "-[ADDeviceProximityManager _pushProximityObservationToCollector:]_block_invoke_2";
      __int16 v14 = 2112;
      uint64_t v15 = v8;
      __int16 v16 = 2112;
      uint64_t v17 = v9;
      __int16 v18 = 2112;
      id v19 = v6;
      _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "%s #hal Failed to update %@ with proximity observation: %@, error: %@", (uint8_t *)&v12, 0x2Au);
    }
  }
  else if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v10 = *(void *)(a1 + 32);
    uint64_t v11 = *(void *)(a1 + 40);
    int v12 = 136315650;
    id v13 = "-[ADDeviceProximityManager _pushProximityObservationToCollector:]_block_invoke";
    __int16 v14 = 2112;
    uint64_t v15 = v10;
    __int16 v16 = 2112;
    uint64_t v17 = v11;
    _os_log_debug_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "%s #hal Received ack from %@ for sending observation: %@", (uint8_t *)&v12, 0x20u);
  }
}

int64_t sub_1001A95D0(id a1, ADRapportProximityObservation *a2, ADRapportProximityObservation *a3)
{
  id v4 = a3;
  id v5 = [(ADRapportProximityObservation *)a2 observationDate];
  id v6 = [(ADRapportProximityObservation *)v4 observationDate];

  id v7 = [v5 compare:v6];
  return (int64_t)v7;
}

BOOL sub_1001A9640(id a1, ADRapportProximityObservation *a2, unint64_t a3, BOOL *a4)
{
  id v4 = a2;
  id v5 = +[NSDate date];
  id v6 = [(ADRapportProximityObservation *)v4 observationDate];

  [v5 timeIntervalSinceDate:v6];
  LOBYTE(v4) = v7 > 420.0;

  return (char)v4;
}

id sub_1001A9A3C(uint64_t a1)
{
  return [*(id *)(a1 + 32) _messageLink];
}

void sub_1001A9BBC(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  if (v2)
  {
    id v3 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      int v4 = 136315394;
      id v5 = "-[ADDeviceProximityManager _proximityDiscoveryLink]_block_invoke_4";
      __int16 v6 = 2112;
      double v7 = v2;
      _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "%s #hal device proximity link activation error: %@", (uint8_t *)&v4, 0x16u);
    }
  }
}

void sub_1001A9C84(id a1, ADRapportLinkConnectionOptionsMutating *a2)
{
}

void sub_1001A9C90(id a1, ADRapportLinkTransportOptionsMutating *a2)
{
  uint64_t v2 = a2;
  [(ADRapportLinkTransportOptionsMutating *)v2 setAllowsBLE:2];
  [(ADRapportLinkTransportOptionsMutating *)v2 setAllowsInfraWiFi:1];
}

void sub_1001A9CDC(id a1, ADRapportLinkDiscoveryOptionsMutating *a2)
{
  uint64_t v2 = a2;
  [(ADRapportLinkDiscoveryOptionsMutating *)v2 setIncludesHome:2];
  [(ADRapportLinkDiscoveryOptionsMutating *)v2 setIncludesRemoraDevices:2];
}

void sub_1001A9E98(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  if (v2)
  {
    id v3 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      int v4 = 136315394;
      id v5 = "-[ADDeviceProximityManager _messageLink]_block_invoke_4";
      __int16 v6 = 2112;
      double v7 = v2;
      _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "%s #hal message link activation error: %@", (uint8_t *)&v4, 0x16u);
    }
  }
}

void sub_1001A9F60(id a1, ADRapportLinkConnectionOptionsMutating *a2)
{
}

void sub_1001A9F6C(id a1, ADRapportLinkTransportOptionsMutating *a2)
{
}

void sub_1001A9F78(id a1, ADRapportLinkDiscoveryOptionsMutating *a2)
{
  uint64_t v2 = a2;
  [(ADRapportLinkDiscoveryOptionsMutating *)v2 setIncludesHome:2];
  [(ADRapportLinkDiscoveryOptionsMutating *)v2 setIncludesRemoraDevices:2];
}

id sub_1001AA15C(void *a1)
{
  id v1 = a1;
  if (AFIsInternalInstall())
  {
    uint64_t v2 = _AFPreferencesHardCodedBluetoothProximityNumber();
    id v3 = v2;
    if (v2)
    {
      v6[0] = _NSConcreteStackBlock;
      v6[1] = 3221225472;
      void v6[2] = sub_1001AA41C;
      v6[3] = &unk_1005055A8;
      id v7 = v2;
      objc_msgSend(v1, "af_mappedArray:", v6);
      id v4 = (id)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      id v4 = v1;
    }
  }
  else
  {
    id v4 = v1;
  }

  return v4;
}

void sub_1001AA244(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_1001AA330;
  v9[3] = &unk_100505290;
  id v10 = [v3 mutableCopy];
  id v5 = v10;
  [v4 enumerateObjectsUsingBlock:v9];

  uint64_t v6 = *(void *)(a1 + 40);
  id v7 = [v5 allValues];
  uint64_t v8 = sub_1001AA15C(v7);
  (*(void (**)(uint64_t, void *))(v6 + 16))(v6, v8);
}

void sub_1001AA330(uint64_t a1, void *a2)
{
  id v9 = a2;
  id v3 = [v9 deviceIDPair];
  id v4 = objc_msgSend(v3, "adpm_sortedKeyString");

  id v5 = [*(id *)(a1 + 32) objectForKeyedSubscript:v4];
  if (!v5
    || [v9 proximity]
    && ([v5 observationDate],
        uint64_t v6 = objc_claimAutoreleasedReturnValue(),
        [v9 observationDate],
        id v7 = objc_claimAutoreleasedReturnValue(),
        id v8 = [v6 compare:v7],
        v7,
        v6,
        v8 == (id)-1))
  {
    [*(id *)(a1 + 32) setObject:v9 forKeyedSubscript:v4];
  }
}

id sub_1001AA41C(uint64_t a1, void *a2)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  void v5[2] = sub_1001AA4C4;
  v5[3] = &unk_100505580;
  id v6 = *(id *)(a1 + 32);
  id v3 = [a2 mutatedCopyWithMutator:v5];

  return v3;
}

void sub_1001AA4C4(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = a2;
  objc_msgSend(v3, "setProximity:", objc_msgSend(v2, "intValue"));
}

id sub_1001AA51C(id a1, NSString *a2, NSArray *a3)
{
  return sub_1001A786C(a3);
}

void sub_1001AA5F0(uint64_t a1)
{
  id v2 = *(id *)(*(void *)(a1 + 32) + 120);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  void v15[2] = sub_1001AA898;
  v15[3] = &unk_100505228;
  id v3 = *(void **)(a1 + 40);
  void v15[4] = *(void *)(a1 + 32);
  id v16 = v3;
  id v4 = v2;
  id v17 = v4;
  char v19 = *(unsigned char *)(a1 + 56);
  id v18 = *(id *)(a1 + 48);
  id v5 = objc_retainBlock(v15);
  if ((AFSupportsHALProximityScanning() & 1) == 0) {
    goto LABEL_7;
  }
  if ([*(id *)(*(void *)(a1 + 32) + 24) count])
  {
    id v6 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)stat buf = 136315138;
      id v21 = "-[ADDeviceProximityManager getDeviceProximityRelativeToLocalDeviceWithDeviceContexts:includesAllReachableDev"
            "ices:completion:]_block_invoke_3";
      id v7 = "%s #hal Using cached proximity";
      id v8 = v6;
LABEL_13:
      _os_log_debug_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, v7, buf, 0xCu);
      goto LABEL_7;
    }
    goto LABEL_7;
  }
  id v9 = *(void **)(a1 + 32);
  uint64_t v10 = v9[3];
  uint64_t v11 = AFSiriLogContextDaemon;
  BOOL v12 = os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG);
  if (v10)
  {
    if (v12)
    {
      *(_DWORD *)stat buf = 136315138;
      id v21 = "-[ADDeviceProximityManager getDeviceProximityRelativeToLocalDeviceWithDeviceContexts:includesAllReachableDev"
            "ices:completion:]_block_invoke";
      id v7 = "%s #hal cached proximity is empty, re-calculating based on context...";
      id v8 = v11;
      goto LABEL_13;
    }
LABEL_7:
    ((void (*)(void *, void))v5[2])(v5, 0);
    goto LABEL_8;
  }
  if (v12)
  {
    *(_DWORD *)stat buf = 136315138;
    id v21 = "-[ADDeviceProximityManager getDeviceProximityRelativeToLocalDeviceWithDeviceContexts:includesAllReachableDevic"
          "es:completion:]_block_invoke";
    _os_log_debug_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "%s #hal Calculating proximity...", buf, 0xCu);
    id v9 = *(void **)(a1 + 32);
  }
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_1001AAD0C;
  v13[3] = &unk_10050DEC0;
  void v13[4] = v9;
  __int16 v14 = v5;
  [v9 _getAggregatedProximityObservationsWithCompletion:v13];

LABEL_8:
}

void sub_1001AA898(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v34 = 0;
  id v35 = &v34;
  uint64_t v36 = 0x3032000000;
  uint64_t v37 = sub_1001A7B1C;
  __int16 v38 = sub_1001A7B2C;
  id v39 = 0;
  if ([*(id *)(*(void *)(a1 + 32) + 24) count])
  {
    id v4 = [*(id *)(*(void *)(a1 + 32) + 24) copy];
    id v5 = (void *)v35[5];
    v35[5] = (uint64_t)v4;
  }
  else
  {
    uint64_t v10 = sub_1001AAD74(*(void **)(a1 + 40), *(void **)(*(void *)(a1 + 32) + 40), v3);
    uint64_t v11 = (void *)v35[5];
    v35[5] = v10;

    BOOL v12 = *(void **)(a1 + 48);
    if (v12 && [v12 isEqual:*(void *)(*(void *)(a1 + 32) + 120)])
    {
      objc_storeStrong((id *)(*(void *)(a1 + 32) + 24), (id)v35[5]);
      id v13 = AFSiriLogContextDaemon;
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
      {
        id v24 = [(id)v35[5] count];
        *(_DWORD *)stat buf = 136315394;
        id v42 = "-[ADDeviceProximityManager getDeviceProximityRelativeToLocalDeviceWithDeviceContexts:includesAllReachableD"
              "evices:completion:]_block_invoke_2";
        __int16 v43 = 2048;
        id v44 = v24;
        _os_log_debug_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "%s #hal cached %lu proximity tuples", buf, 0x16u);
      }

      if (AFIsInternalInstall())
      {
        long long v32 = 0u;
        long long v33 = 0u;
        long long v30 = 0u;
        long long v31 = 0u;
        id v14 = (id)v35[5];
        id v15 = [v14 countByEnumeratingWithState:&v30 objects:v40 count:16];
        if (v15)
        {
          uint64_t v16 = *(void *)v31;
          do
          {
            id v17 = 0;
            do
            {
              if (*(void *)v31 != v16) {
                objc_enumerationMutation(v14);
              }
              id v18 = AFSiriLogContextDaemon;
              if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
              {
                char v19 = *(void **)(*((void *)&v30 + 1) + 8 * (void)v17);
                *(_DWORD *)stat buf = 136315394;
                id v42 = "-[ADDeviceProximityManager getDeviceProximityRelativeToLocalDeviceWithDeviceContexts:includesAllRe"
                      "achableDevices:completion:]_block_invoke";
                __int16 v43 = 2112;
                id v44 = v19;
                _os_log_debug_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "%s #hal cached proximity tuple: %@", buf, 0x16u);
              }
              id v17 = (char *)v17 + 1;
            }
            while (v15 != v17);
            id v15 = [v14 countByEnumeratingWithState:&v30 objects:v40 count:16];
          }
          while (v15);
        }
      }
      dispatch_time_t v20 = dispatch_time(0, 30000000000);
      uint64_t v21 = *(void *)(a1 + 32);
      uint64_t v22 = *(NSObject **)(v21 + 128);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_1001AB30C;
      block[3] = &unk_10050D5F0;
      void block[4] = v21;
      void block[5] = &v34;
      dispatch_after(v20, v22, block);
    }
  }
  if (*(unsigned char *)(a1 + 64))
  {
    id v6 = objc_msgSend((id)v35[5], "af_lenientMappedDictionary:", &stru_1005051D8);
    id v7 = [v6 mutableCopy];

    id v8 = *(void **)(*(void *)(a1 + 32) + 56);
    v25[0] = _NSConcreteStackBlock;
    v25[1] = 3221225472;
    v25[2] = sub_1001AB3E8;
    v25[3] = &unk_100505200;
    id v9 = v7;
    id v26 = v9;
    long long v28 = &v34;
    id v27 = *(id *)(a1 + 56);
    [v8 getManagedLocalAndRemotePeerInfoWithCompletion:v25];
  }
  else
  {
    uint64_t v23 = *(void *)(a1 + 56);
    id v9 = [(id)v35[5] copy];
    (*(void (**)(uint64_t, id))(v23 + 16))(v23, v9);
  }

  _Block_object_dispose(&v34, 8);
}

void sub_1001AACD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
}

void sub_1001AAD0C(uint64_t a1, void *a2)
{
  id v3 = *(NSObject **)(*(void *)(a1 + 32) + 128);
  id v4 = a2;
  dispatch_assert_queue_V2(v3);
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

id sub_1001AAD74(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  id v8 = 0;
  uint64_t v34 = v6;
  id v35 = v7;
  if (v6 && v7)
  {
    v43[0] = _NSConcreteStackBlock;
    v43[1] = 3221225472;
    v43[2] = sub_1001ABA74;
    v43[3] = &unk_100504FF8;
    id v44 = v6;
    id v8 = objc_msgSend(v35, "af_lenientMappedDictionary:", v43);
  }
  id v9 = v5;
  id v10 = objc_alloc_init((Class)NSMutableArray);
  long long v57 = 0u;
  long long v58 = 0u;
  memset(buf, 0, sizeof(buf));
  id v11 = v9;
  id v12 = [v11 countByEnumeratingWithState:buf objects:&v52 count:16];
  if (!v12)
  {

LABEL_18:
    char v19 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      LODWORD(v47) = 136315138;
      *(void *)((char *)&v47 + 4) = "_ADProximityTuplesForDeviceContexts";
    }
    id v13 = 0;
    goto LABEL_21;
  }
  id v13 = 0;
  uint64_t v14 = **(void **)&buf[16];
  do
  {
    for (i = 0; i != v12; i = (char *)i + 1)
    {
      if (**(void **)&buf[16] != v14) {
        objc_enumerationMutation(v11);
      }
      uint64_t v16 = *(void **)(*(void *)&buf[8] + 8 * i);
      id v17 = [v16 deviceInfo];
      if ([v16 fromLocalDevice])
      {
        id v18 = v17;

        id v13 = v18;
      }
      else if (v17)
      {
        [v10 addObject:v17];
      }
    }
    id v12 = [v11 countByEnumeratingWithState:buf objects:&v52 count:16];
  }
  while (v12);

  if (!v13) {
    goto LABEL_18;
  }
LABEL_21:
  dispatch_time_t v20 = sub_1001AB578(v13, v10);
  id v21 = objc_alloc_init((Class)NSMutableArray);
  v45[0] = _NSConcreteStackBlock;
  v45[1] = 3221225472;
  v45[2] = sub_1001ABBDC;
  v45[3] = &unk_100505530;
  id v22 = v21;
  id v46 = v22;
  uint64_t v23 = objc_msgSend(v11, "af_lenientMappedArray:", v45);
  *(void *)&long long v47 = _NSConcreteStackBlock;
  *((void *)&v47 + 1) = 3221225472;
  id v48 = sub_1001ABC64;
  v49 = &unk_100505558;
  id v50 = v22;
  id v51 = v23;
  id v24 = v22;
  id v25 = v23;
  objc_msgSend(v20, "af_mappedArray:", &v47);
  id v26 = (id)objc_claimAutoreleasedReturnValue();

  v41[0] = _NSConcreteStackBlock;
  v41[1] = 3221225472;
  v41[2] = sub_1001ABEA8;
  v41[3] = &unk_100505020;
  id v27 = objc_alloc_init((Class)NSMutableDictionary);
  id v42 = v27;
  [v26 enumerateObjectsUsingBlock:v41];
  if ([v8 count])
  {
    id v28 = [v26 mutableCopy];
    uint64_t v52 = 0;
    id v53 = &v52;
    uint64_t v54 = 0x2020000000;
    uint64_t v55 = 0;
    v36[0] = _NSConcreteStackBlock;
    v36[1] = 3221225472;
    v36[2] = sub_1001ABF5C;
    v36[3] = &unk_100505070;
    id v37 = v27;
    id v29 = v26;
    id v38 = v29;
    __int16 v40 = &v52;
    id v30 = v28;
    id v39 = v30;
    [v8 enumerateKeysAndObjectsUsingBlock:v36];
    id v26 = [v30 copy];

    long long v31 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v33 = v53[3];
      *(_DWORD *)stat buf = 136315650;
      *(void *)&uint8_t buf[4] = "ADProximityTuplesForProximitySignals";
      *(_WORD *)&buf[12] = 2048;
      *(void *)&buf[14] = v33;
      *(_WORD *)&buf[22] = 2112;
      *(void *)&unsigned char buf[24] = v26;
      _os_log_debug_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEBUG, "%s #hal Incorporated %lu from RP proximity: %@", buf, 0x20u);
    }

    _Block_object_dispose(&v52, 8);
  }

  return v26;
}

void sub_1001AB2EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
}

void sub_1001AB30C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = *(void **)(v1 + 24);
  if (v2 == *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40))
  {
    id v4 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      int v5 = 136315138;
      id v6 = "-[ADDeviceProximityManager getDeviceProximityRelativeToLocalDeviceWithDeviceContexts:includesAllReachableDevi"
           "ces:completion:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%s #hal cached proximity for request cleared due to timeout", (uint8_t *)&v5, 0xCu);
      uint64_t v1 = *(void *)(a1 + 32);
      id v2 = *(void **)(v1 + 24);
    }
    *(void *)(v1 + 24) = 0;
  }
}

void sub_1001AB3E8(uint64_t a1, void *a2, void *a3)
{
  id v4 = sub_1001AB578(a2, a3);
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  id v5 = [v4 countByEnumeratingWithState:&v16 objects:v20 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v17;
    do
    {
      for (i = 0; i != v6; i = (char *)i + 1)
      {
        if (*(void *)v17 != v7) {
          objc_enumerationMutation(v4);
        }
        id v9 = *(void **)(*((void *)&v16 + 1) + 8 * i);
        id v10 = [v9 info];
        id v11 = [v10 assistantIdentifier];

        if (v11)
        {
          id v12 = [*(id *)(a1 + 32) objectForKey:v11];

          if (!v12) {
            [*(id *)(a1 + 32) setObject:v9 forKey:v11];
          }
        }
      }
      id v6 = [v4 countByEnumeratingWithState:&v16 objects:v20 count:16];
    }
    while (v6);
  }
  uint64_t v13 = [*(id *)(a1 + 32) allValues];
  uint64_t v14 = *(void *)(*(void *)(a1 + 48) + 8);
  id v15 = *(void **)(v14 + 40);
  *(void *)(v14 + 40) = v13;

  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

id sub_1001AB578(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v5 = [v3 roomName];
  id v6 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)stat buf = 136315394;
    id v46 = "_ADProximityTuplesForPeerInfo";
    __int16 v47 = 2112;
    id v48 = v5;
    _os_log_debug_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "%s #hal Primary Device Room Name: %@", buf, 0x16u);
  }
  uint64_t v34 = v5;
  uint64_t v33 = v3;
  if ([v5 length])
  {
    id v7 = objc_alloc_init((Class)NSMutableDictionary);
    long long v39 = 0u;
    long long v40 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    id v8 = v4;
    id v9 = [v8 countByEnumeratingWithState:&v39 objects:v44 count:16];
    if (v9)
    {
      id v10 = v9;
      uint64_t v11 = *(void *)v40;
      do
      {
        for (i = 0; i != v10; i = (char *)i + 1)
        {
          if (*(void *)v40 != v11) {
            objc_enumerationMutation(v8);
          }
          uint64_t v13 = [*(id *)(*((void *)&v39 + 1) + 8 * i) roomName];
          if (v13)
          {
            uint64_t v14 = [v7 objectForKeyedSubscript:v13];
            [v14 integerValue];

            if ([v34 isEqual:v13])
            {
              uint64_t v15 = AFDeviceProximityCompare();
              long long v16 = &off_100523810;
              if (v15 == 1) {
                goto LABEL_13;
              }
            }
            uint64_t v17 = AFDeviceProximityCompare();
            long long v16 = &off_100523828;
            if (v17 == 1) {
LABEL_13:
            }
              [v7 setObject:v16 forKeyedSubscript:v13];
          }
        }
        id v10 = [v8 countByEnumeratingWithState:&v39 objects:v44 count:16];
      }
      while (v10);
    }

    id v3 = v33;
  }
  else
  {
    id v7 = 0;
  }
  long long v18 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)stat buf = 136315394;
    id v46 = "_ADProximityTuplesForPeerInfo";
    __int16 v47 = 2112;
    id v48 = v7;
    _os_log_debug_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "%s Proximity by Room Name: %@", buf, 0x16u);
  }
  id v19 = objc_alloc_init((Class)NSMutableArray);
  if (v3)
  {
    id v20 = [objc_alloc((Class)AFPeerContentTuple) initWithInfo:v3 content:&off_100523840];
    [v19 addObject:v20];
  }
  long long v37 = 0u;
  long long v38 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  id v21 = v4;
  id v22 = [v21 countByEnumeratingWithState:&v35 objects:v43 count:16];
  if (v22)
  {
    id v23 = v22;
    uint64_t v24 = *(void *)v36;
    do
    {
      for (j = 0; j != v23; j = (char *)j + 1)
      {
        if (*(void *)v36 != v24) {
          objc_enumerationMutation(v21);
        }
        id v26 = *(void **)(*((void *)&v35 + 1) + 8 * (void)j);
        id v27 = [v26 roomName];
        if (v27
          && ([v7 objectForKeyedSubscript:v27], (uint64_t v28 = objc_claimAutoreleasedReturnValue()) != 0))
        {
          id v29 = (void *)v28;
          id v30 = [objc_alloc((Class)AFPeerContentTuple) initWithInfo:v26 content:v28];
        }
        else
        {
          id v30 = [objc_alloc((Class)AFPeerContentTuple) initWithInfo:v26 content:&off_100523858];
        }
        [v19 addObject:v30];
      }
      id v23 = [v21 countByEnumeratingWithState:&v35 objects:v43 count:16];
    }
    while (v23);
  }

  id v31 = [v19 copy];
  return v31;
}

NSDictionary *__cdecl sub_1001AB9AC(id a1, AFPeerContentTuple *a2)
{
  id v2 = a2;
  id v3 = [(AFPeerContentTuple *)v2 info];
  id v4 = [v3 assistantIdentifier];

  if (v4)
  {
    id v7 = v4;
    id v8 = v2;
    id v5 = +[NSDictionary dictionaryWithObjects:&v8 forKeys:&v7 count:1];
  }
  else
  {
    id v5 = 0;
  }

  return (NSDictionary *)v5;
}

id sub_1001ABA74(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 deviceIDPair];
  unsigned int v5 = [v4 containsObject:*(void *)(a1 + 32)];

  if (v5)
  {
    id v6 = [v3 deviceIDPair];
    uint64_t v11 = _NSConcreteStackBlock;
    uint64_t v12 = 3221225472;
    uint64_t v13 = sub_1001AC3C0;
    uint64_t v14 = &unk_100504FD0;
    id v15 = *(id *)(a1 + 32);
    id v7 = [v6 objectsPassingTest:&v11];
    id v8 = objc_msgSend(v7, "anyObject", v11, v12, v13, v14);

    if (v8)
    {
      long long v16 = v8;
      id v17 = v3;
      id v9 = +[NSDictionary dictionaryWithObjects:&v17 forKeys:&v16 count:1];
    }
    else
    {
      id v9 = 0;
    }
  }
  else
  {
    id v9 = 0;
  }

  return v9;
}

id sub_1001ABBDC(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (objc_msgSend(v3, "af_didHearVoiceTrigger"))
  {
    id v4 = [v3 deviceInfo];
    [*(id *)(a1 + 32) addObject:v4];
    unsigned int v5 = [v4 roomName];
  }
  else
  {
    unsigned int v5 = 0;
  }

  return v5;
}

id sub_1001ABC64(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 info];
  unsigned int v5 = [v4 roomName];
  id v6 = [v3 content];
  [v6 integerValue];

  if ([*(id *)(a1 + 32) containsObject:v4] && AFDeviceProximityCompare() == 1)
  {
    id v7 = (void *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      id v8 = v7;
      id v9 = [v3 info];
      int v16 = 136315394;
      id v17 = "_ADProximityTuplesForDeviceContexts_block_invoke_2";
      __int16 v18 = 2112;
      id v19 = v9;
      id v10 = "%s #hal Upgrading %@ to Near because this device heard HS";
LABEL_14:
      _os_log_debug_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, v10, (uint8_t *)&v16, 0x16u);

      goto LABEL_8;
    }
    goto LABEL_8;
  }
  if ([*(id *)(a1 + 40) containsObject:v5] && AFDeviceProximityCompare() == 1)
  {
    uint64_t v11 = (void *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      id v8 = v11;
      id v9 = [v3 info];
      int v16 = 136315394;
      id v17 = "_ADProximityTuplesForDeviceContexts_block_invoke";
      __int16 v18 = 2112;
      id v19 = v9;
      id v10 = "%s #hal Upgrading %@ to Near because this room has a device that heard HS";
      goto LABEL_14;
    }
LABEL_8:
    id v12 = objc_alloc((Class)AFPeerContentTuple);
    uint64_t v13 = [v3 info];
    id v14 = [v12 initWithInfo:v13 content:&off_1005237F8];

    goto LABEL_10;
  }
  id v14 = v3;
LABEL_10:

  return v14;
}

void sub_1001ABEA8(uint64_t a1, void *a2, uint64_t a3)
{
  unsigned int v5 = [a2 info];
  uint64_t v8 = sub_1001750D0(v5);

  id v6 = (void *)v8;
  if (v8)
  {
    objc_msgSend(*(id *)(a1 + 32), "objectForKey:");
    id v7 = (id)objc_claimAutoreleasedReturnValue();
    if (!v7)
    {
      id v7 = objc_alloc_init((Class)NSMutableIndexSet);
      [*(id *)(a1 + 32) setObject:v7 forKey:v8];
    }
    [v7 addIndex:a3];

    id v6 = (void *)v8;
  }
}

void sub_1001ABF5C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = +[NSDate date];
  uint64_t v8 = [v6 observationDate];
  [v7 timeIntervalSinceDate:v8];
  double v10 = v9;

  if (v10 < 420.0)
  {
    unsigned int v11 = [v6 proximity];
    uint64_t v12 = 3000;
    if (v11 == 30) {
      uint64_t v12 = 1000;
    }
    if (v11) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    id v14 = [*(id *)(a1 + 32) objectForKey:v5];
    if ([v14 count])
    {
      v25[0] = _NSConcreteStackBlock;
      v25[1] = 3221225472;
      v25[2] = sub_1001AC200;
      v25[3] = &unk_100505048;
      id v15 = *(id *)(a1 + 40);
      uint64_t v16 = *(void *)(a1 + 56);
      id v26 = v15;
      uint64_t v29 = v16;
      uint64_t v30 = v13;
      id v27 = v5;
      id v28 = *(id *)(a1 + 48);
      [v14 enumerateIndexesUsingBlock:v25];

      id v17 = v26;
    }
    else
    {
      __int16 v18 = (void *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
      {
        id v23 = v18;
        uint64_t v24 = AFDeviceProximityGetName();
        *(_DWORD *)stat buf = 136315650;
        long long v32 = "ADProximityTuplesForProximitySignals_block_invoke";
        __int16 v33 = 2112;
        id v34 = v5;
        __int16 v35 = 2112;
        long long v36 = v24;
        _os_log_debug_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "%s #hal Adding %@ to proximity: %@", buf, 0x20u);
      }
      id v19 = *(void **)(a1 + 48);
      id v20 = objc_alloc((Class)AFPeerContentTuple);
      id v17 = sub_10016A850(v5);
      id v21 = +[NSNumber numberWithInteger:v13];
      id v22 = [v20 initWithInfo:v17 content:v21];
      [v19 addObject:v22];
    }
  }
}

void sub_1001AC200(uint64_t a1, uint64_t a2)
{
  id v4 = [*(id *)(a1 + 32) objectAtIndex:a2];
  id v5 = [v4 content];
  [v5 integerValue];
  uint64_t v6 = AFDeviceProximityCompare();

  if (v6 == 1)
  {
    ++*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24);
    id v7 = (void *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v13 = *(void *)(a1 + 40);
      id v14 = v7;
      id v15 = AFDeviceProximityGetName();
      int v16 = 136315650;
      id v17 = "ADProximityTuplesForProximitySignals_block_invoke_5";
      __int16 v18 = 2112;
      uint64_t v19 = v13;
      __int16 v20 = 2112;
      id v21 = v15;
      _os_log_debug_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "%s #hal Upgrading %@ to proximity: %@", (uint8_t *)&v16, 0x20u);
    }
    uint64_t v8 = *(void **)(a1 + 48);
    id v9 = objc_alloc((Class)AFPeerContentTuple);
    double v10 = [v4 info];
    unsigned int v11 = +[NSNumber numberWithInteger:*(void *)(a1 + 64)];
    id v12 = [v9 initWithInfo:v10 content:v11];
    [v8 replaceObjectAtIndex:a2 withObject:v12];
  }
}

uint64_t sub_1001AC3C0(uint64_t a1, void *a2)
{
  return [a2 isEqualToString:*(void *)(a1 + 32)] ^ 1;
}

void sub_1001AC4A8(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  v2[2] = sub_1001AC538;
  v2[3] = &unk_10050DEC0;
  void v2[4] = v1;
  id v3 = *(id *)(a1 + 40);
  [v1 _getAggregatedProximityObservationsWithCompletion:v2];
}

void sub_1001AC538(uint64_t a1, void *a2)
{
  id v3 = *(NSObject **)(*(void *)(a1 + 32) + 128);
  id v4 = a2;
  dispatch_assert_queue_V2(v3);
  sub_1001AAD74(0, *(void **)(*(void *)(a1 + 32) + 40), v4);
  id v5 = (id)objc_claimAutoreleasedReturnValue();

  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_1001AC6CC(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 8) allValues];
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_1001AC788;
  v6[3] = &unk_100505198;
  void v6[4] = *(void *)(a1 + 32);
  [v2 enumerateObjectsUsingBlock:v6];

  [*(id *)(a1 + 32) _clearProximityDiscoveryLink];
  id v3 = *(void **)(*(void *)(a1 + 32) + 80);
  if (v3)
  {
    [v3 cancel];
    uint64_t v4 = *(void *)(a1 + 32);
    id v5 = *(void **)(v4 + 80);
    *(void *)(v4 + 80) = 0;
  }
}

void sub_1001AC788(uint64_t a1, void *a2)
{
  id v3 = [a2 lastObject];
  id v4 = [v3 deviceIDPair];
  if (([v4 containsObject:*(void *)(*(void *)(a1 + 32) + 40)] & 1) == 0)
  {
LABEL_6:

    goto LABEL_7;
  }
  id v5 = [v3 observationDate];
  id v6 = [v5 compare:*(void *)(*(void *)(a1 + 32) + 88)];

  if (v6 == (id)-1)
  {
    id v7 = [v3 deviceIDPair];
    id v4 = [v7 mutableCopy];

    [v4 removeObject:*(void *)(*(void *)(a1 + 32) + 40)];
    uint64_t v8 = [v4 anyObject];
    id v9 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      int v10 = 136315394;
      unsigned int v11 = "-[ADDeviceProximityManager _stopScanning]_block_invoke_2";
      __int16 v12 = 2112;
      uint64_t v13 = v8;
      _os_log_debug_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "%s #hal Recording unseen device: %@ as Unknown proximity", (uint8_t *)&v10, 0x16u);
    }
    [*(id *)(a1 + 32) _insertProximityForRemoteDeviceID:v8 rpProximity:0];

    goto LABEL_6;
  }
LABEL_7:
}

void sub_1001ACA18(uint64_t a1)
{
  id v2 = +[NSDate date];
  id v3 = v2;
  if (*(void *)(*(void *)(a1 + 32) + 88) && (objc_msgSend(v2, "timeIntervalSinceDate:"), v4 <= 20.0))
  {
    id v14 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)stat buf = 136315138;
      id v17 = "-[ADDeviceProximityManager performProximityScan]_block_invoke";
      _os_log_debug_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "%s #hal Skip scan, previous scan occurred too recently", buf, 0xCu);
    }
  }
  else
  {
    id v5 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)stat buf = 136315394;
      id v17 = "-[ADDeviceProximityManager performProximityScan]_block_invoke";
      __int16 v18 = 2048;
      uint64_t v19 = 0x4014000000000000;
      _os_log_debug_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "%s #hal begin scanning for %f sec", buf, 0x16u);
    }
    objc_storeStrong((id *)(*(void *)(a1 + 32) + 88), v3);
    id v6 = [*(id *)(a1 + 32) _proximityDiscoveryLink];
    id v7 = *(void **)(*(void *)(a1 + 32) + 80);
    if (v7) {
      [v7 cancel];
    }
    id v8 = objc_alloc((Class)AFWatchdogTimer);
    uint64_t v9 = *(void *)(a1 + 32);
    uint64_t v10 = *(void *)(v9 + 128);
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472;
    void v15[2] = sub_1001ACC2C;
    v15[3] = &unk_10050E138;
    void v15[4] = v9;
    id v11 = [v8 initWithTimeoutInterval:v10 onQueue:v15 timeoutHandler:5.0];
    uint64_t v12 = *(void *)(a1 + 32);
    uint64_t v13 = *(void **)(v12 + 80);
    *(void *)(v12 + 80) = v11;

    [*(id *)(*(void *)(a1 + 32) + 80) start];
  }
}

id sub_1001ACC2C(uint64_t a1)
{
  id v2 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    int v4 = 136315138;
    id v5 = "-[ADDeviceProximityManager performProximityScan]_block_invoke";
    _os_log_debug_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s #hal Proximity scanning stopped", (uint8_t *)&v4, 0xCu);
  }
  return [*(id *)(a1 + 32) _stopScanning];
}

void sub_1001ACF54(uint64_t a1, uint64_t a2, char a3)
{
  int v4 = *(void **)(a1 + 32);
  id v5 = v4[16];
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_1001AD08C;
  v6[3] = &unk_10050CD50;
  id v7 = v4;
  char v8 = a3;
  dispatch_async(v5, v6);
}

void sub_1001ACFE8(id a1, AFSiriActivationContextMutating *a2)
{
  id v2 = a2;
  [(AFSiriActivationContextMutating *)v2 setSource:1];
  [(AFSiriActivationContextMutating *)v2 setEvent:4];
  [(AFSiriActivationContextMutating *)v2 setOptions:1];
}

void sub_1001AD040(id a1, AFSiriActivationContextMutating *a2)
{
  id v2 = a2;
  [(AFSiriActivationContextMutating *)v2 setSource:1];
  [(AFSiriActivationContextMutating *)v2 setEvent:15];
}

uint64_t sub_1001AD08C(uint64_t result)
{
  *(unsigned char *)(*(void *)(result + 32) + 32) = *(unsigned char *)(result + 40);
  return result;
}

void sub_1001AD0F0(id a1)
{
  uint64_t v1 = [ADDeviceProximityManager alloc];
  id v2 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  dispatch_queue_t v7 = dispatch_queue_create("ADDeviceProximityManager", v2);

  id v3 = +[AFContextDonationService defaultService];
  int v4 = +[ADDeviceCircleManager sharedInstance];
  id v5 = [(ADDeviceProximityManager *)v1 _initWithQueue:v7 donationService:v3 deviceCircleManager:v4];
  id v6 = (void *)qword_100585DB8;
  qword_100585DB8 = (uint64_t)v5;
}

void sub_1001AD7C0(void *a1, void *a2)
{
  uint64_t v3 = a1[4];
  id v4 = a2;
  [v4 setDiscoveryOptions:v3];
  [v4 setTransportOptions:a1[5]];
  [v4 setConnectionOptions:a1[6]];
  [v4 setEnablesProximityTracking:a1[7]];
}

void sub_1001AE388(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 240), 8);
  _Block_object_dispose((const void *)(v1 - 208), 8);
  _Block_object_dispose((const void *)(v1 - 176), 8);
  _Block_object_dispose((const void *)(v1 - 144), 8);
  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1001AE3E4(uint64_t a1, void *a2)
{
  uint64_t v3 = [a2 eventBody];
  uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 64);
  if (v4 && ((*(uint64_t (**)(uint64_t, void *))(v4 + 16))(v4, v3) & 1) == 0)
  {
    id v6 = +[ADAnalyticsIdentifiersUtils logger];
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      char v8 = [v3 homeIdentifier];
      int v9 = 138412290;
      uint64_t v10 = v8;
      _os_log_debug_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Ignoring item belonging to non-current Home %@", (uint8_t *)&v9, 0xCu);
    }
    uint64_t v5 = 0;
    ++*(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
  }
  else
  {
    uint64_t v5 = 1;
  }

  return v5;
}

id sub_1001AE508(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 16);
  uint64_t v3 = [a2 eventBody];
  uint64_t v4 = (*(void (**)(uint64_t, void *))(v2 + 16))(v2, v3);

  return v4;
}

BOOL sub_1001AE570(uint64_t a1)
{
  return *(int *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) < 1
      || *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) < 1;
}

BOOL sub_1001AE5A4(uint64_t a1, void *a2)
{
  id v3 = [a2 timelinePositionWithToday:*(void *)(*(void *)(a1 + 32) + 40) withCalendar:*(void *)(*(void *)(a1 + 32) + 32)];
  if (!v3) {
    ++*(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
  }
  return v3 != 0;
}

ADSynchronizedIdItemPair *sub_1001AE5F4(uint64_t a1, void *a2)
{
  id v3 = a2;
  ++*(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
  id v4 = [v3 timelinePositionWithToday:*(void *)(*(void *)(a1 + 32) + 40) withCalendar:*(void *)(*(void *)(a1 + 32) + 32)];
  uint64_t v5 = +[ADAnalyticsIdentifiersUtils logger];
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    int v11 = 138412546;
    id v12 = v3;
    __int16 v13 = 1024;
    int v14 = (int)v4;
    _os_log_debug_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Item %@ timelineposition %d", (uint8_t *)&v11, 0x12u);
  }

  if (v4 == (id)2)
  {
    id v7 = v3;
    id v6 = 0;
    uint64_t v8 = a1 + 56;
    goto LABEL_7;
  }
  if (v4 == (id)1)
  {
    id v6 = v3;
    id v7 = 0;
    uint64_t v8 = a1 + 48;
LABEL_7:
    ++*(_DWORD *)(*(void *)(*(void *)v8 + 8) + 24);
    goto LABEL_9;
  }
  id v6 = 0;
  id v7 = 0;
LABEL_9:
  int v9 = [[ADSynchronizedIdItemPair alloc] initWithCurrent:v6 andNext:v7];

  return v9;
}

id sub_1001AE774(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return [*(id *)(a1 + 32) _merge:a2 with:a3];
}

void sub_1001AE910(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 96), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1001AE934(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1001AE944(uint64_t a1)
{
}

void sub_1001AE94C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = +[ADAnalyticsIdentifiersUtils logger];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    int v6 = *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
    int v8 = 67109120;
    LODWORD(v9) = v6;
    _os_log_debug_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Devices with at least one item %d", (uint8_t *)&v8, 8u);
  }

  if ([v3 state])
  {
    uint64_t v5 = +[ADAnalyticsIdentifiersUtils logger];
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      id v7 = [v3 error];
      int v8 = 138412290;
      int v9 = v7;
      _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "mergeRemotes failed %@", (uint8_t *)&v8, 0xCu);
    }
  }
}

uint64_t sub_1001AEA94(uint64_t a1, uint64_t a2)
{
  ++*(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
  uint64_t v3 = [*(id *)(a1 + 32) _merge:*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) with:a2];
  uint64_t v4 = *(void *)(*(void *)(a1 + 48) + 8);
  uint64_t v5 = *(void *)(v4 + 40);
  *(void *)(v4 + 40) = v3;
  return _objc_release_x1(v3, v5);
}

void sub_1001AEE78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1001AEE94(uint64_t a1, void *a2)
{
}

void sub_1001AEEA4(id a1, BPSCompletion *a2)
{
  uint64_t v2 = a2;
  if ([(BPSCompletion *)v2 state] == (id)1)
  {
    uint64_t v3 = +[ADAnalyticsIdentifiersUtils logger];
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      uint64_t v4 = [(BPSCompletion *)v2 error];
      int v5 = 138412290;
      int v6 = v4;
      _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Finalizing local events failed: %@", (uint8_t *)&v5, 0xCu);
    }
  }
}

id sub_1001AF63C(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) _processPerDeviceEvents:a2];
}

BOOL sub_1001AF648(uint64_t a1, void *a2)
{
  uint64_t v3 = (char *)[a2 platform];
  return (unint64_t)(v3 - 1) <= 6
      && (*(void *)(*(void *)(a1 + 32) + 72) & qword_1003E2B80[(void)(v3 - 1)]) != 0;
}

id sub_1001AF928(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = [a2 homeIdentifier];
  id v4 = [v2 isEqual:v3];

  return v4;
}

id sub_1001AFCE8(uint64_t a1, void *a2)
{
  return _[a2 toBMSiriHomeSeedWithHomeIdentifier:*(void *)(a1 + 32)];
}

ADSynchronizedIdItem *__cdecl sub_1001AFCF4(id a1, BMSiriHomeSeed *a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = [[ADSynchronizedIdItem alloc] initWithBMHomeSeed:v2];

  return v3;
}

BMSiriUserAggregationId *__cdecl sub_1001B0030(id a1, ADSynchronizedIdItem *a2)
{
  return (BMSiriUserAggregationId *)[(ADSynchronizedIdItem *)a2 toBMSiriUserAggregationId];
}

ADSynchronizedIdItem *__cdecl sub_1001B0038(id a1, BMSiriUserAggregationId *a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = [[ADSynchronizedIdItem alloc] initWithBMUserAggregationId:v2];

  return v3;
}

BMSiriUserSeed *__cdecl sub_1001B020C(id a1, ADSynchronizedIdItem *a2)
{
  return (BMSiriUserSeed *)[(ADSynchronizedIdItem *)a2 toBMSiriUserSeed];
}

ADSynchronizedIdItem *__cdecl sub_1001B0214(id a1, BMSiriUserSeed *a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = [[ADSynchronizedIdItem alloc] initWithBMUserSeed:v2];

  return v3;
}

uint64_t sub_1001B0930(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1001B0A88(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (!v9)
  {
    if ([v7 statusCode] != (id)200)
    {
      id v26 = (void *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
      {
        id v27 = v26;
        id v28 = +[NSHTTPURLResponse localizedStringForStatusCode:](NSHTTPURLResponse, "localizedStringForStatusCode:", [v7 statusCode]);
        *(_DWORD *)stat buf = 136315394;
        uint64_t v54 = "-[ADExperimentManager _remoteFetchConfigMetadataWithServerConfigurationInfo:completion:]_block_invoke";
        __int16 v55 = 2114;
        id v56 = v28;
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_INFO, "%s Connected to remote configuration plist server but got back non 200 response: %{public}@", buf, 0x16u);
      }
      uint64_t v13 = *(void *)(a1 + 40);
      uint64_t v14 = 3303;
      goto LABEL_26;
    }
    if (!v8)
    {
      id v31 = AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)stat buf = 136315138;
        uint64_t v54 = "-[ADExperimentManager _remoteFetchConfigMetadataWithServerConfigurationInfo:completion:]_block_invoke";
        _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_INFO, "%s Error downloading remote configuration plist", buf, 0xCu);
      }
      goto LABEL_22;
    }
    id v51 = 0;
    id v15 = +[NSPropertyListSerialization propertyListWithData:v8 options:0 format:0 error:&v51];
    id v16 = v51;
    if (v16 || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0))
    {
      uint64_t v29 = (void *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
      {
        long long v40 = v29;
        long long v41 = [v16 localizedDescription];
        *(_DWORD *)stat buf = 136315394;
        uint64_t v54 = "-[ADExperimentManager _remoteFetchConfigMetadataWithServerConfigurationInfo:completion:]_block_invoke";
        __int16 v55 = 2112;
        id v56 = v41;
        _os_log_error_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_ERROR, "%s Error serializing plist data to dictionary: %@", buf, 0x16u);
      }
      uint64_t v30 = *(void *)(a1 + 40);
      __int16 v18 = +[AFError errorWithCode:3304];
      (*(void (**)(uint64_t, void, void *))(v30 + 16))(v30, 0, v18);
      goto LABEL_31;
    }
    id v17 = [v15 objectForKey:@"experiments"];
    __int16 v18 = v17;
    if (v17)
    {
      __int16 v43 = v15;
      id v44 = v8;
      long long v49 = 0u;
      long long v50 = 0u;
      long long v47 = 0u;
      long long v48 = 0u;
      long long v42 = v17;
      id obj = v17;
      id v19 = [obj countByEnumeratingWithState:&v47 objects:v52 count:16];
      if (!v19)
      {
LABEL_20:

LABEL_38:
        uint64_t v37 = *(void *)(a1 + 40);
        id v34 = +[AFError errorWithCode:3306];
        (*(void (**)(uint64_t, void, id))(v37 + 16))(v37, 0, v34);
        id v15 = v43;
        id v8 = v44;
        __int16 v18 = v42;
        goto LABEL_43;
      }
      id v20 = v19;
      uint64_t v46 = *(void *)v48;
LABEL_14:
      uint64_t v21 = 0;
      while (1)
      {
        if (*(void *)v48 != v46) {
          objc_enumerationMutation(obj);
        }
        id v22 = *(void **)(*((void *)&v47 + 1) + 8 * v21);
        id v23 = [v22 objectForKey:@"identifier"];
        uint64_t v24 = [*(id *)(a1 + 32) configurationIdentifier];
        unsigned __int8 v25 = [v23 isEqualToString:v24];

        if (v25) {
          break;
        }
        if (v20 == (id)++v21)
        {
          id v20 = [obj countByEnumeratingWithState:&v47 objects:v52 count:16];
          if (v20) {
            goto LABEL_14;
          }
          goto LABEL_20;
        }
      }
      id v34 = v22;

      if (!v34) {
        goto LABEL_38;
      }
      __int16 v35 = AFSiriLogContextDaemon;
      id v15 = v43;
      id v8 = v44;
      __int16 v18 = v42;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)stat buf = 136315138;
        uint64_t v54 = "-[ADExperimentManager _remoteFetchConfigMetadataWithServerConfigurationInfo:completion:]_block_invoke";
        _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_INFO, "%s Received remote configuration", buf, 0xCu);
      }
      long long v36 = *(void (**)(void))(*(void *)(a1 + 40) + 16);
    }
    else
    {
      long long v38 = AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)stat buf = 136315138;
        uint64_t v54 = "-[ADExperimentManager _remoteFetchConfigMetadataWithServerConfigurationInfo:completion:]_block_invoke";
        _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_INFO, "%s Error no experiments specified in plist", buf, 0xCu);
      }
      uint64_t v39 = *(void *)(a1 + 40);
      id v34 = +[AFError errorWithCode:3305];
      long long v36 = *(void (**)(void))(v39 + 16);
    }
    v36();
LABEL_43:

LABEL_31:
    goto LABEL_27;
  }
  uint64_t v10 = (void *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
  {
    long long v32 = v10;
    __int16 v33 = [v9 localizedDescription];
    *(_DWORD *)stat buf = 136315394;
    uint64_t v54 = "-[ADExperimentManager _remoteFetchConfigMetadataWithServerConfigurationInfo:completion:]_block_invoke";
    __int16 v55 = 2114;
    id v56 = v33;
    _os_log_error_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_ERROR, "%s Error downloading remote configuration plist: %{public}@", buf, 0x16u);
  }
  int v11 = [v9 domain];
  if (![v11 isEqualToString:NSURLErrorDomain])
  {

    goto LABEL_22;
  }
  id v12 = [v9 code];

  if (v12 != (id)-1001)
  {
LABEL_22:
    uint64_t v13 = *(void *)(a1 + 40);
    uint64_t v14 = 3302;
    goto LABEL_26;
  }
  uint64_t v13 = *(void *)(a1 + 40);
  uint64_t v14 = 3308;
LABEL_26:
  id v16 = +[AFError errorWithCode:v14];
  (*(void (**)(uint64_t, void, id))(v13 + 16))(v13, 0, v16);
LABEL_27:
}

void sub_1001B1544(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = *(NSObject **)(*(void *)(a1 + 32) + 8);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  void v12[2] = sub_1001B1640;
  void v12[3] = &unk_1005065D0;
  id v13 = v6;
  id v17 = *(id *)(a1 + 48);
  char v18 = 1;
  uint64_t v8 = *(void *)(a1 + 32);
  id v9 = *(void **)(a1 + 40);
  id v14 = v5;
  uint64_t v15 = v8;
  id v16 = v9;
  id v10 = v5;
  id v11 = v6;
  dispatch_async(v7, v12);
}

void sub_1001B1640(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    uint64_t v2 = *(void (**)(void))(*(void *)(a1 + 64) + 16);
    v2();
  }
  else
  {
    id v3 = [objc_alloc((Class)AFExperimentState) initWithDictionaryRepresentation:*(void *)(a1 + 40)];
    id v4 = [v3 mutatedCopyWithMutator:&stru_100505A38];

    id v5 = [objc_alloc((Class)AFExperimentConfiguration) initWithDictionaryRepresentation:*(void *)(a1 + 40)];
    if ([v4 didEnd]
      && (id v6 = *(void **)(a1 + 48),
          [v4 endingGroupIdentifier],
          id v7 = objc_claimAutoreleasedReturnValue(),
          LOBYTE(v6) = [v6 _isEndingGroupIdentifier:v7 validForConfiguration:v5],
          v7,
          (v6 & 1) == 0))
    {
      id v17 = (void *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
      {
        char v18 = v17;
        id v19 = [v4 endingGroupIdentifier];
        *(_DWORD *)stat buf = 136315394;
        id v26 = "-[ADExperimentManager _serverConfigurationForServerConfigurationInfo:completion:]_block_invoke_2";
        __int16 v27 = 2112;
        id v28 = v19;
        _os_log_error_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "%s Bad Ending Group Identifier Specified %@", buf, 0x16u);
      }
      id v16 = +[AFError errorWithCode:3307];
      (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
    }
    else
    {
      unsigned int v8 = [v4 didEnd];
      uint64_t v9 = *(void *)(a1 + 64);
      if (v8)
      {
        id v10 = *(void **)(a1 + 48);
        id v11 = [*(id *)(a1 + 56) configurationIdentifier];
        id v12 = [v10 _fallbackConfigurationForEndedExperimentWithIdentifier:v11 experimentState:v4];
        (*(void (**)(uint64_t, void *, void, void))(v9 + 16))(v9, v12, *(unsigned __int8 *)(a1 + 72), 0);
      }
      else
      {
        (*(void (**)(void, id, void, void))(v9 + 16))(*(void *)(a1 + 64), v5, *(unsigned __int8 *)(a1 + 72), 0);
      }
      id v13 = dispatch_get_global_queue(0, 0);
      v20[0] = _NSConcreteStackBlock;
      v20[1] = 3221225472;
      void v20[2] = sub_1001B1970;
      v20[3] = &unk_10050DC68;
      id v14 = v5;
      uint64_t v15 = *(void *)(a1 + 48);
      id v21 = v14;
      uint64_t v22 = v15;
      id v23 = v4;
      id v24 = *(id *)(a1 + 56);
      dispatch_async(v13, v20);

      id v16 = v21;
    }
  }
}

void sub_1001B1970(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v2 = *(void **)(a1 + 40);
  if (v3)
  {
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    void v7[2] = sub_1001B1A54;
    v7[3] = &unk_100507C90;
    void v7[4] = v2;
    id v8 = *(id *)(a1 + 48);
    id v9 = *(id *)(a1 + 56);
    [v2 _storeServerConfig:v3 completion:v7];
  }
  else
  {
    uint64_t v4 = *(void *)(a1 + 48);
    uint64_t v5 = *(void *)(a1 + 56);
    id v6 = *(void **)(a1 + 40);
    _[v6 _setExperimentState:v4 forServerConfigurationInfo:v5];
  }
}

id *sub_1001B1A54(id *result, uint64_t a2)
{
  if (!a2) {
    return (id *)_[result[4] _setExperimentState:result[5] forServerConfigurationInfo:result[6]];
  }
  return result;
}

void sub_1001B1A6C(id a1, AFExperimentStateMutating *a2)
{
  uint64_t v2 = a2;
  id v3 = +[NSDate now];
  [(AFExperimentStateMutating *)v2 setLastSyncDate:v3];
}

void sub_1001B2368(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) _getConfigurationsByIdentifier];
  uint64_t v16 = [v2 objectForKey:*(void *)(a1 + 40)];

  id v3 = [*(id *)(a1 + 32) _getServerConfigurationInfosByIdentifier];
  uint64_t v4 = [v3 objectForKey:*(void *)(a1 + 40)];

  if (v16 | v4)
  {
    uint64_t v5 = SiriCoreUUIDStringCreate();
    [*(id *)(a1 + 32) _setExperimentIdentifier:v5 forConfigurationIdentifier:*(void *)(a1 + 40)];
    id v6 = *(void **)(a1 + 32);
    if (v6[4])
    {
      id v7 = [v6 _getContext];
      id v8 = [v7 experimentsByConfigurationIdentifier];
      id v9 = +[NSMutableDictionary dictionaryWithDictionary:v8];

      id v10 = [*(id *)(a1 + 32) _createExperimentForExperimentConfiguration:v16 experimentIdentifier:v5];
      [v9 setObject:v10 forKey:*(void *)(a1 + 40)];
      id v11 = [objc_alloc((Class)AFExperimentContext) initWithExperimentsByConfigurationIdentifier:v9];
      uint64_t v12 = *(void *)(a1 + 32);
      id v13 = *(void **)(v12 + 32);
      *(void *)(v12 + 32) = v11;
    }
    uint64_t v14 = *(void *)(a1 + 48);
    if (!v14) {
      goto LABEL_9;
    }
    uint64_t v15 = *(void (**)(void))(v14 + 16);
  }
  else
  {
    if (!*(void *)(a1 + 48)) {
      goto LABEL_10;
    }
    uint64_t v5 = +[AFError errorWithCode:3300];
    uint64_t v15 = *(void (**)(void))(*(void *)(a1 + 48) + 16);
  }
  v15();
LABEL_9:

LABEL_10:
}

void sub_1001B26D4(uint64_t a1, void *a2, uint64_t a3)
{
  id v6 = a2;
  uint64_t v5 = [*(id *)(a1 + 32) _experimentForExperimentConfiguration:a3];
  if (v5) {
    [*(id *)(a1 + 40) setObject:v5 forKey:v6];
  }
}

id sub_1001B2DB4(uint64_t a1)
{
  uint64_t v2 = +[NSMutableDictionary dictionary];
  id v3 = *(void **)(a1 + 32);
  if (v3)
  {
    uint64_t v4 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%ld", [v3 code]);
    [v2 setObject:v4 forKey:@"errorCode"];
  }
  uint64_t v5 = [*(id *)(a1 + 40) configurationIdentifier];

  if (v5)
  {
    id v6 = [*(id *)(a1 + 40) configurationIdentifier];
    [v2 setObject:v6 forKey:@"configurationIdentifier"];
  }
  id v7 = [*(id *)(a1 + 40) deploymentGroupIdentifier];

  if (v7)
  {
    id v8 = [*(id *)(a1 + 40) deploymentGroupIdentifier];
    [v2 setObject:v8 forKey:@"groupIdentifier"];
  }
  id v9 = [*(id *)(a1 + 40) configurationVersion];

  if (v9)
  {
    id v10 = [*(id *)(a1 + 40) configurationVersion];
    [v2 setObject:v10 forKey:@"version"];
  }
  id v11 = [*(id *)(a1 + 48) objectForKey:@"timeToResolve"];
  [v11 doubleValue];
  double v13 = v12;

  uint64_t v14 = +[NSNumber numberWithDouble:v13];
  [v2 setObject:v14 forKey:@"timeToResolve"];

  uint64_t v15 = [*(id *)(a1 + 48) objectForKey:@"fetchedRemote"];
  id v16 = [v15 BOOLValue];

  id v17 = +[NSNumber numberWithBool:v16];
  [v2 setObject:v17 forKey:@"fetchedRemote"];

  return v2;
}

void sub_1001B3128(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v7 = a4;
  id v8 = a2;
  id v9 = +[NSDate now];
  [v9 timeIntervalSinceDate:*(void *)(a1 + 32)];
  double v11 = v10;

  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  v15[0] = @"timeToResolve";
  double v12 = +[NSNumber numberWithDouble:v11];
  v15[1] = @"fetchedRemote";
  v16[0] = v12;
  double v13 = +[NSNumber numberWithBool:a3];
  v16[1] = v13;
  uint64_t v14 = +[NSDictionary dictionaryWithObjects:v16 forKeys:v15 count:2];

  [*(id *)(a1 + 40) _logDidVendExperiment:v8 fetchDetails:v14 error:v7];
}

void sub_1001B327C(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) _getServerConfigurationInfosByIdentifier];
  id v3 = [v2 objectForKey:*(void *)(a1 + 40)];

  uint64_t v4 = *(void **)(a1 + 32);
  if (v3)
  {
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_1001B33E8;
    v10[3] = &unk_1005059A8;
    id v5 = *(id *)(a1 + 48);
    void v10[4] = *(void *)(a1 + 32);
    id v11 = v5;
    [v4 _serverConfigurationForServerConfigurationInfo:v3 completion:v10];
  }
  else
  {
    id v6 = [*(id *)(a1 + 32) _getContext];
    id v7 = [v6 experimentsByConfigurationIdentifier];
    id v8 = [v7 objectForKey:*(void *)(a1 + 40)];

    if (v8)
    {
      (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
    }
    else
    {
      id v9 = +[AFError errorWithCode:3301];
      (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
    }
  }
}

void sub_1001B33E8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v6 = a2;
  id v16 = v6;
  if (a4)
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
  else
  {
    id v7 = [*(id *)(a1 + 32) _experimentForExperimentConfiguration:v6];
    if (v7)
    {
      id v8 = *(void **)(*(void *)(a1 + 32) + 32);
      if (v8)
      {
        id v9 = [v8 experimentsByConfigurationIdentifier];
        double v10 = +[NSMutableDictionary dictionaryWithDictionary:v9];

        id v11 = [v16 identifier];
        [v10 setObject:v7 forKey:v11];

        id v12 = [objc_alloc((Class)AFExperimentContext) initWithExperimentsByConfigurationIdentifier:v10];
        uint64_t v13 = *(void *)(a1 + 32);
        uint64_t v14 = *(void **)(v13 + 32);
        *(void *)(v13 + 32) = v12;
      }
      (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
    }
    else
    {
      uint64_t v15 = +[AFError errorWithCode:3301];
      (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
    }
  }
}

void sub_1001B3850(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6 = a2;
  id v7 = a4;
  id v8 = (void *)AFSiriLogContextDaemon;
  if (v7)
  {
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      uint64_t v14 = *(void **)(a1 + 32);
      uint64_t v15 = v8;
      id v16 = [v14 configurationIdentifier];
      int v17 = 136315650;
      char v18 = "-[ADExperimentManager synchronizeExperimentConfigurationsIfApplicableWithCompletion:]_block_invoke";
      __int16 v19 = 2112;
      id v20 = v16;
      __int16 v21 = 2112;
      id v22 = v7;
      _os_log_error_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "%s Encountered error while synchronizing %@: %@", (uint8_t *)&v17, 0x20u);
    }
    uint64_t v9 = *(void *)(a1 + 40);
    if (v9)
    {
      double v10 = *(void (**)(void))(v9 + 16);
LABEL_10:
      v10();
    }
  }
  else
  {
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      id v11 = v8;
      id v12 = [v6 identifier];
      int v17 = 136315394;
      char v18 = "-[ADExperimentManager synchronizeExperimentConfigurationsIfApplicableWithCompletion:]_block_invoke";
      __int16 v19 = 2112;
      id v20 = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "%s Fished synchronizing configuration  %@", (uint8_t *)&v17, 0x16u);
    }
    uint64_t v13 = *(void *)(a1 + 40);
    if (v13)
    {
      double v10 = *(void (**)(void))(v13 + 16);
      goto LABEL_10;
    }
  }
}

void sub_1001B3AB4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = [*(id *)(a1 + 32) _getContext];
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

uint64_t sub_1001B3C00(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1001B3C10(uint64_t a1)
{
}

uint64_t sub_1001B3C18(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) _getContext];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 40) = v2;
  return _objc_release_x1(v2, v4);
}

void sub_1001B3D08(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v3 = [*(id *)(a1 + 32) _getConfigurationsByIdentifier];
  uint64_t v2 = [v3 allValues];
  (*(void (**)(uint64_t, void *))(v1 + 16))(v1, v2);
}

void sub_1001B3E64(uint64_t a1)
{
  id v5 = [*(id *)(a1 + 32) _getConfigurationsByIdentifier];
  uint64_t v2 = [v5 allValues];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_1001B3FC4(id a1)
{
  uint64_t v1 = objc_alloc_init(ADExperimentManager);
  uint64_t v2 = qword_100585DC8;
  qword_100585DC8 = (uint64_t)v1;
  _objc_release_x1(v1, v2);
}

void sub_1001B4C90(uint64_t a1)
{
  uint64_t v1 = [*(id *)(a1 + 32) _serviceManager];
  uint64_t v2 = [v1 allServices];

  id v3 = objc_alloc_init((Class)NSMutableDictionary);
  uint64_t v4 = dispatch_group_create();
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  id v5 = v2;
  id v6 = [v5 countByEnumeratingWithState:&v21 objects:v25 count:16];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = *(void *)v22;
    do
    {
      uint64_t v9 = 0;
      do
      {
        if (*(void *)v22 != v8) {
          objc_enumerationMutation(v5);
        }
        double v10 = *(void **)(*((void *)&v21 + 1) + 8 * (void)v9);
        dispatch_group_enter(v4);
        v17[0] = _NSConcreteStackBlock;
        v17[1] = 3221225472;
        v17[2] = sub_1001B4ED8;
        v17[3] = &unk_1005068B8;
        id v18 = v3;
        __int16 v19 = v10;
        id v20 = v4;
        [v10 getInfoWithCompletion:v17];

        uint64_t v9 = (char *)v9 + 1;
      }
      while (v7 != v9);
      id v7 = [v5 countByEnumeratingWithState:&v21 objects:v25 count:16];
    }
    while (v7);
  }

  id v11 = *(NSObject **)(*(void *)(a1 + 32) + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1001B4F4C;
  block[3] = &unk_10050E188;
  id v15 = v3;
  id v16 = *(id *)(a1 + 40);
  id v12 = v3;
  dispatch_group_notify(v4, v11, block);
}

void sub_1001B4ED8(void *a1, void *a2)
{
  if (a2)
  {
    id v3 = (void *)a1[4];
    uint64_t v4 = (void *)a1[5];
    id v5 = a2;
    id v6 = [v4 identifier];
    [v3 setObject:v5 forKey:v6];
  }
  id v7 = a1[6];
  dispatch_group_leave(v7);
}

uint64_t sub_1001B4F4C(uint64_t a1)
{
  uint64_t v2 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v5 = 136315394;
    id v6 = "-[ADCommandCenter _listInstalledServicesWithCompletion:]_block_invoke_3";
    __int16 v7 = 2112;
    uint64_t v8 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s Services %@", (uint8_t *)&v5, 0x16u);
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
}

id sub_1001B5228(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _adviseSessionArbiterToContinueWithPreviousWinner:*(unsigned __int8 *)(a1 + 40)];
}

void sub_1001B5808(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v5)
  {
    double v8 = *(double *)(a1 + 40);
    double v7 = *(double *)(a1 + 48);
    uint64_t v9 = *(void *)(a1 + 56);
    id v10 = v5;
    char v122 = 0;
    id v11 = +[NSFileManager defaultManager];
    id v12 = [v10 path];
    unsigned int v13 = [v11 fileExistsAtPath:v12 isDirectory:&v122];

    if (v13)
    {
      if (!v122) {
        goto LABEL_13;
      }
      id v14 = objc_alloc((Class)NSString);
      id v15 = [v10 path];
      id v16 = [v14 initWithFormat:@"Directory exists at path %@, but it is expected to be a file.", v15];
    }
    else
    {
      id v18 = objc_alloc((Class)NSString);
      id v15 = [v10 path];
      id v16 = [v18 initWithFormat:@"File does not exist at path %@.", v15];
    }
    __int16 v19 = v16;
    id v20 = +[AFError errorWithCode:226 description:v16];

    if (v20)
    {
      long long v21 = AFSiriLogContextUtility;
      if (os_log_type_enabled(AFSiriLogContextUtility, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)inPropertyData = 136315394;
        *(void *)&inPropertyData[4] = "ADAudioFileTrim";
        *(_WORD *)&inPropertyData[12] = 2112;
        *(void *)&inPropertyData[14] = v20;
        _os_log_error_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "%s error = %@", inPropertyData, 0x16u);
      }
      id v22 = v20;
      long long v23 = 0;
      int v24 = 0;
      goto LABEL_31;
    }
LABEL_13:
    unsigned __int8 v25 = CSSiriSpeechRecordingTrimmedAudioDirectoryPath();
    id v26 = +[NSFileManager defaultManager];
    unsigned int v27 = [v26 fileExistsAtPath:v25 isDirectory:&v122];

    if (v27)
    {
      if (v122) {
        goto LABEL_23;
      }
      id v28 = [objc_alloc((Class)NSString) initWithFormat:@"File exists at path %@, but it is expected to be directory.", v25];
      uint64_t v29 = +[AFError errorWithCode:226 description:v28];
    }
    else
    {
      uint64_t v30 = +[NSFileManager defaultManager];
      id v121 = 0;
      unsigned int v31 = [v30 createDirectoryAtPath:v25 withIntermediateDirectories:1 attributes:0 error:&v121];
      id v28 = v121;

      if (v31)
      {

        goto LABEL_23;
      }
      id v32 = [objc_alloc((Class)NSString) initWithFormat:@"Unable to create directory at path %@.", v25];
      uint64_t v29 = +[AFError errorWithCode:226 description:v32 underlyingError:v28];
    }
    if (v29)
    {
      __int16 v33 = AFSiriLogContextUtility;
      if (os_log_type_enabled(AFSiriLogContextUtility, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)inPropertyData = 136315394;
        *(void *)&inPropertyData[4] = "ADAudioFileTrim";
        *(_WORD *)&inPropertyData[12] = 2112;
        *(void *)&inPropertyData[14] = v29;
        _os_log_error_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_ERROR, "%s error = %@", inPropertyData, 0x16u);
      }
      id v34 = (void *)v29;
      goto LABEL_29;
    }
LABEL_23:
    *(_OWORD *)inPropertyData = xmmword_1003E2C00;
    *(_OWORD *)&inPropertyData[16] = unk_1003E2C10;
    uint64_t v129 = 16;
    memset(&inStreamDesc.mFormatID, 0, 32);
    ExtAudioFileRef outExtAudioFile = 0;
    inStreamDesc.mSampleRate = 16000.0;
    inStreamDesc.mFormatID = 1869641075;
    inStreamDesc.mFramesPerPacket = 320;
    inStreamDesc.mChannelsPerFrame = 1;
    uint64_t v35 = ExtAudioFileOpenURL((CFURLRef)v10, &outExtAudioFile);
    if (v35)
    {
      uint64_t v36 = v35;
      id v37 = objc_alloc((Class)NSString);
      long long v38 = [v10 path];
      id v39 = [v37 initWithFormat:@"ExtAudioFileOpenURL() failed to open input audio file at %@. (status = %d)", v38, v36];
      long long v40 = +[NSError errorWithDomain:NSOSStatusErrorDomain code:(int)v36 userInfo:0];
      uint64_t v41 = +[AFError errorWithCode:226 description:v39 underlyingError:v40];

      long long v42 = AFSiriLogContextUtility;
      if (os_log_type_enabled(AFSiriLogContextUtility, OS_LOG_TYPE_ERROR)) {
        goto LABEL_65;
      }
      goto LABEL_28;
    }
    uint64_t v43 = ExtAudioFileSetProperty(outExtAudioFile, 0x63666D74u, 0x28u, inPropertyData);
    if (v43)
    {
      int v44 = v43;
      id v45 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", @"ExtAudioFileSetProperty() failed to set client data format of input audio file. (status = %d)", v43);
      uint64_t v46 = +[NSError errorWithDomain:NSOSStatusErrorDomain code:v44 userInfo:0];
      uint64_t v41 = +[AFError errorWithCode:226 description:v45 underlyingError:v46];

      long long v42 = AFSiriLogContextUtility;
      if (os_log_type_enabled(AFSiriLogContextUtility, OS_LOG_TYPE_ERROR))
      {
LABEL_65:
        buf.mNumberBuffers = 136315394;
        *(void *)(&buf.mNumberBuffers + 1) = "ADAudioFileTrim";
        LOWORD(buf.mBuffers[0].mDataByteSize) = 2112;
        *(void *)((char *)&buf.mBuffers[0].mDataByteSize + 2) = v41;
        _os_log_error_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_ERROR, "%s error = %@", (uint8_t *)&buf, 0x16u);
      }
LABEL_28:
      id v34 = (void *)v41;
LABEL_29:
      id v22 = v34;
      long long v23 = 0;
      int v24 = 0;
LABEL_30:

LABEL_31:
      id v47 = v23;
      id v48 = v22;
      long long v49 = AFSiriLogContextDaemon;
      if (v24)
      {
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)inPropertyData = 136315394;
          *(void *)&inPropertyData[4] = "-[ADCommandCenter _trimRecordedAudioWithIdentifier:offset:duration:outputFileT"
                                          "ype:completion:]_block_invoke";
          *(_WORD *)&inPropertyData[12] = 2112;
          *(void *)&inPropertyData[14] = v47;
          _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_INFO, "%s trimmedAudioFileURL = %@", inPropertyData, 0x16u);
        }
        long long v50 = *(void (**)(void))(*(void *)(a1 + 32) + 16);
      }
      else
      {
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)inPropertyData = 136315394;
          *(void *)&inPropertyData[4] = "-[ADCommandCenter _trimRecordedAudioWithIdentifier:offset:duration:outputFileT"
                                          "ype:completion:]_block_invoke";
          *(_WORD *)&inPropertyData[12] = 2112;
          *(void *)&inPropertyData[14] = v48;
          _os_log_error_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_ERROR, "%s error = %@", inPropertyData, 0x16u);
        }
        long long v50 = *(void (**)(void))(*(void *)(a1 + 32) + 16);
      }
      v50();

      goto LABEL_39;
    }
    uint64_t outPropertyData = 0;
    UInt32 ioPropertyDataSize = 8;
    if (!ExtAudioFileGetProperty(outExtAudioFile, 0x2366726Du, &ioPropertyDataSize, &outPropertyData))
    {
      id v51 = AFSiriLogContextUtility;
      if (os_log_type_enabled(AFSiriLogContextUtility, OS_LOG_TYPE_INFO))
      {
        buf.mNumberBuffers = 136315394;
        *(void *)(&buf.mNumberBuffers + 1) = "ADAudioFileTrim";
        LOWORD(buf.mBuffers[0].mDataByteSize) = 2048;
        *(void *)((char *)&buf.mBuffers[0].mDataByteSize + 2) = outPropertyData;
        _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_INFO, "%s totalFrameLength = %lld", (uint8_t *)&buf, 0x16u);
      }
    }
    if (v9 == 3) {
      CFStringRef v52 = @".caf";
    }
    else {
      CFStringRef v52 = @".wav";
    }
    id v53 = objc_alloc((Class)NSString);
    id v54 = objc_alloc_init((Class)NSUUID);
    __int16 v55 = [v54 UUIDString];
    id v56 = [v53 initWithFormat:@"%@%@", v55, v52];

    id v57 = objc_alloc((Class)NSURL);
    long long v58 = [v25 stringByAppendingPathComponent:v56];
    id v59 = [v57 initFileURLWithPath:v58];

    ExtAudioFileRef inExtAudioFile = 0;
    id v113 = v56;
    id v114 = v59;
    if (v9 == 2)
    {
      p_AudioStreamBasicDescription inStreamDesc = (AudioStreamBasicDescription *)inPropertyData;
      CFURLRef v61 = (const __CFURL *)v59;
      AudioFileTypeID v62 = 1463899717;
    }
    else
    {
      if (v9 != 3)
      {
        id v74 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", @"Output file type %ld is not supported.", v9);
        char v68 = +[AFError errorWithCode:226 description:v74];

        uint64_t v69 = AFSiriLogContextUtility;
        if (os_log_type_enabled(AFSiriLogContextUtility, OS_LOG_TYPE_ERROR)) {
          goto LABEL_62;
        }
        goto LABEL_63;
      }
      p_AudioStreamBasicDescription inStreamDesc = &inStreamDesc;
      CFURLRef v61 = (const __CFURL *)v59;
      AudioFileTypeID v62 = 1667327590;
    }
    uint64_t v63 = ExtAudioFileCreateWithURL(v61, v62, p_inStreamDesc, 0, 1u, &inExtAudioFile);
    if (v63)
    {
      id v64 = objc_alloc((Class)NSString);
      uint64_t v65 = [v59 path];
      id v66 = [v64 initWithFormat:@"ExtAudioFileCreateWithURL() failed to create output audio file at %@. (status = %d)", v65, v63];
      uint64_t v67 = +[NSError errorWithDomain:NSOSStatusErrorDomain code:(int)v63 userInfo:0];
      char v68 = +[AFError errorWithCode:226 description:v66 underlyingError:v67];

      uint64_t v69 = AFSiriLogContextUtility;
      if (os_log_type_enabled(AFSiriLogContextUtility, OS_LOG_TYPE_ERROR)) {
        goto LABEL_62;
      }
      goto LABEL_63;
    }
    uint64_t v70 = ExtAudioFileSetProperty(inExtAudioFile, 0x63666D74u, 0x28u, inPropertyData);
    if (v70)
    {
      int v71 = v70;
      id v72 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", @"ExtAudioFileSetProperty() failed to set client data format of output audio file. (status = %d)", v70);
      id v73 = +[NSError errorWithDomain:NSOSStatusErrorDomain code:v71 userInfo:0];
      char v68 = +[AFError errorWithCode:226 description:v72 underlyingError:v73];

      uint64_t v69 = AFSiriLogContextUtility;
      if (os_log_type_enabled(AFSiriLogContextUtility, OS_LOG_TYPE_ERROR)) {
        goto LABEL_62;
      }
      goto LABEL_63;
    }
    SInt64 v75 = (uint64_t)(*(double *)inPropertyData * v8);
    v76 = AFSiriLogContextUtility;
    if (os_log_type_enabled(AFSiriLogContextUtility, OS_LOG_TYPE_DEBUG))
    {
      buf.mNumberBuffers = 136315394;
      *(void *)(&buf.mNumberBuffers + 1) = "ADAudioFileTrim";
      LOWORD(buf.mBuffers[0].mDataByteSize) = 2048;
      *(void *)((char *)&buf.mBuffers[0].mDataByteSize + 2) = v75;
      _os_log_debug_impl((void *)&_mh_execute_header, v76, OS_LOG_TYPE_DEBUG, "%s frameOffset = %lld", (uint8_t *)&buf, 0x16u);
    }
    uint64_t v77 = ExtAudioFileSeek(outExtAudioFile, v75);
    if (v77)
    {
      int v79 = v77;
      id v80 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", @"ExtAudioFileSeek() failed to seek to frame offset %lld in input audio file. (status = %d)", v75, v77);
      long long v81 = +[NSError errorWithDomain:NSOSStatusErrorDomain code:v79 userInfo:0];
      char v68 = +[AFError errorWithCode:226 description:v80 underlyingError:v81];

      uint64_t v69 = AFSiriLogContextUtility;
      if (os_log_type_enabled(AFSiriLogContextUtility, OS_LOG_TYPE_ERROR))
      {
LABEL_62:
        buf.mNumberBuffers = 136315394;
        *(void *)(&buf.mNumberBuffers + 1) = "ADAudioFileTrim";
        LOWORD(buf.mBuffers[0].mDataByteSize) = 2112;
        *(void *)((char *)&buf.mBuffers[0].mDataByteSize + 2) = v68;
        _os_log_error_impl((void *)&_mh_execute_header, v69, OS_LOG_TYPE_ERROR, "%s error = %@", (uint8_t *)&buf, 0x16u);
      }
LABEL_63:
      id v22 = v68;
      long long v23 = 0;
      int v24 = 0;
LABEL_64:

      goto LABEL_30;
    }
    LODWORD(v78) = *(_DWORD *)&inPropertyData[24];
    uint64_t v82 = (*(double *)inPropertyData * (double)v78 * v7);
    id v83 = AFSiriLogContextUtility;
    if (os_log_type_enabled(AFSiriLogContextUtility, OS_LOG_TYPE_DEBUG))
    {
      buf.mNumberBuffers = 136315394;
      *(void *)(&buf.mNumberBuffers + 1) = "ADAudioFileTrim";
      LOWORD(buf.mBuffers[0].mDataByteSize) = 1024;
      *(UInt32 *)((char *)&buf.mBuffers[0].mDataByteSize + 2) = v82;
      _os_log_debug_impl((void *)&_mh_execute_header, v83, OS_LOG_TYPE_DEBUG, "%s dataByteSize = %u", (uint8_t *)&buf, 0x12u);
    }
    id v84 = +[NSMutableData dataWithLength:v82];
    *(void *)&buf.mNumberBuffers = 1;
    buf.mBuffers[0].mNumberChannels = 1;
    buf.mBuffers[0].mDataByteSize = v82;
    id v85 = v84;
    buf.mBuffers[0].mData = [v85 mutableBytes];
    UInt32 v86 = (*(double *)inPropertyData * v7);
    UInt32 ioNumberFrames = v86;
    id v87 = AFSiriLogContextUtility;
    if (os_log_type_enabled(AFSiriLogContextUtility, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)v123 = 136315394;
      v124 = "ADAudioFileTrim";
      __int16 v125 = 1024;
      LODWORD(v126) = v86;
      _os_log_debug_impl((void *)&_mh_execute_header, v87, OS_LOG_TYPE_DEBUG, "%s numberOfFrames = %u (read)", v123, 0x12u);
    }
    uint64_t v88 = ExtAudioFileRead(outExtAudioFile, &ioNumberFrames, &buf);
    if (v88)
    {
      uint64_t v89 = v88;
      id v112 = v85;
      id v90 = objc_alloc((Class)NSString);
      id v91 = objc_msgSend(v90, "initWithFormat:", @"ExtAudioFileRead() failed to read %u frames from input audio file. (status = %d)", ioNumberFrames, v89);
      id v92 = +[NSError errorWithDomain:NSOSStatusErrorDomain code:(int)v89 userInfo:0];
      id v93 = +[AFError errorWithCode:226 description:v91 underlyingError:v92];

      id v94 = AFSiriLogContextUtility;
      if (os_log_type_enabled(AFSiriLogContextUtility, OS_LOG_TYPE_ERROR)) {
        goto LABEL_87;
      }
      goto LABEL_77;
    }
    id v95 = AFSiriLogContextUtility;
    if (os_log_type_enabled(AFSiriLogContextUtility, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)v123 = 136315394;
      v124 = "ADAudioFileTrim";
      __int16 v125 = 1024;
      LODWORD(v126) = ioNumberFrames;
      _os_log_debug_impl((void *)&_mh_execute_header, v95, OS_LOG_TYPE_DEBUG, "%s numberOfFrames = %u (write)", v123, 0x12u);
    }
    uint64_t v96 = ExtAudioFileWrite(inExtAudioFile, ioNumberFrames, &buf);
    if (v96)
    {
      uint64_t v97 = v96;
      id v112 = v85;
      id v98 = objc_alloc((Class)NSString);
      id v99 = objc_msgSend(v98, "initWithFormat:", @"ExtAudioFileWrite() failed to write %u frames to output audio file. (status = %d)", ioNumberFrames, v97);
      id v100 = +[NSError errorWithDomain:NSOSStatusErrorDomain code:(int)v97 userInfo:0];
      id v93 = +[AFError errorWithCode:226 description:v99 underlyingError:v100];

      id v94 = AFSiriLogContextUtility;
      if (os_log_type_enabled(AFSiriLogContextUtility, OS_LOG_TYPE_ERROR))
      {
LABEL_87:
        *(_DWORD *)v123 = 136315394;
        v124 = "ADAudioFileTrim";
        __int16 v125 = 2112;
        v126 = v93;
        _os_log_error_impl((void *)&_mh_execute_header, v94, OS_LOG_TYPE_ERROR, "%s error = %@", v123, 0x16u);
      }
LABEL_77:
      long long v23 = 0;
      int v24 = 0;
      id v22 = v93;
      id v85 = v112;
LABEL_78:
      id v101 = v93;

      goto LABEL_64;
    }
    uint64_t v102 = ExtAudioFileDispose(outExtAudioFile);
    if (v102)
    {
      int v103 = v102;
      id v104 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", @"ExtAudioFileDispose() failed to close input audio file. (status = %d)", v102);
      id v105 = +[NSError errorWithDomain:NSOSStatusErrorDomain code:v103 userInfo:0];
      id v93 = +[AFError errorWithCode:226 description:v104 underlyingError:v105];

      uint64_t v106 = AFSiriLogContextUtility;
      if (!os_log_type_enabled(AFSiriLogContextUtility, OS_LOG_TYPE_ERROR))
      {
LABEL_84:
        long long v23 = 0;
        int v24 = 0;
        id v22 = v93;
        goto LABEL_78;
      }
    }
    else
    {
      uint64_t v107 = ExtAudioFileDispose(inExtAudioFile);
      if (!v107)
      {
        id v111 = AFSiriLogContextUtility;
        int v24 = 1;
        if (os_log_type_enabled(AFSiriLogContextUtility, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)v123 = 136315394;
          v124 = "ADAudioFileTrim";
          __int16 v125 = 2112;
          long long v23 = v114;
          v126 = v114;
          _os_log_impl((void *)&_mh_execute_header, v111, OS_LOG_TYPE_INFO, "%s trimmedAudioFileURL = %@", v123, 0x16u);
          id v22 = 0;
        }
        else
        {
          id v22 = 0;
          long long v23 = v114;
        }
        id v93 = v23;
        goto LABEL_78;
      }
      int v108 = v107;
      id v109 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", @"ExtAudioFileDispose() failed to close output audio file. (status = %d)", v107);
      id v110 = +[NSError errorWithDomain:NSOSStatusErrorDomain code:v108 userInfo:0];
      id v93 = +[AFError errorWithCode:226 description:v109 underlyingError:v110];

      uint64_t v106 = AFSiriLogContextUtility;
      if (!os_log_type_enabled(AFSiriLogContextUtility, OS_LOG_TYPE_ERROR)) {
        goto LABEL_84;
      }
    }
    *(_DWORD *)v123 = 136315394;
    v124 = "ADAudioFileTrim";
    __int16 v125 = 2112;
    v126 = v93;
    _os_log_error_impl((void *)&_mh_execute_header, v106, OS_LOG_TYPE_ERROR, "%s error = %@", v123, 0x16u);
    goto LABEL_84;
  }
  int v17 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)inPropertyData = 136315394;
    *(void *)&inPropertyData[4] = "-[ADCommandCenter _trimRecordedAudioWithIdentifier:offset:duration:outputFileType:co"
                                    "mpletion:]_block_invoke";
    *(_WORD *)&inPropertyData[12] = 2112;
    *(void *)&inPropertyData[14] = v6;
    _os_log_error_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "%s error = %@", inPropertyData, 0x16u);
  }
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
LABEL_39:
}

id sub_1001B6BDC(uint64_t a1)
{
  return [*(id *)(a1 + 32) _trimRecordedAudioWithIdentifier:*(void *)(a1 + 40) offset:*(void *)(a1 + 72) duration:*(void *)(a1 + 48) outputFileType:*(double *)(a1 + 56) completion:*(double *)(a1 + 64)];
}

void sub_1001B6E6C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  double v7 = *(NSObject **)(*(void *)(a1 + 32) + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1001B6F48;
  block[3] = &unk_10050C688;
  id v11 = v5;
  id v12 = *(id *)(a1 + 40);
  id v13 = v6;
  id v8 = v6;
  id v9 = v5;
  dispatch_async(v7, block);
}

uint64_t sub_1001B6F48(void *a1)
{
  uint64_t v2 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = a1[4];
    int v5 = 136315394;
    id v6 = "-[ADCommandCenter _accessRecordedAudioWithIdentifier:completion:]_block_invoke_2";
    __int16 v7 = 2112;
    uint64_t v8 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s recordedAudioFileURL = %@", (uint8_t *)&v5, 0x16u);
  }
  (*(void (**)(void))(a1[5] + 16))();
  return (*(uint64_t (**)(void))(a1[6] + 16))();
}

id sub_1001B70EC(uint64_t a1)
{
  return [*(id *)(a1 + 32) _accessRecordedAudioWithIdentifier:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];
}

void sub_1001B72A8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)AudioBufferList buf = 136315394;
    id v15 = "-[ADCommandCenter _setSiriOutputVolume:forAudioRoute:operationType:completion:]_block_invoke";
    __int16 v16 = 2112;
    id v17 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%s volumeService = %@", buf, 0x16u);
  }
  if (v3)
  {
    int v5 = *(_DWORD *)(a1 + 56);
    uint64_t v6 = *(void *)(a1 + 48);
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    void v12[2] = sub_1001B7488;
    void v12[3] = &unk_10050D440;
    uint64_t v7 = *(void *)(a1 + 32);
    id v13 = *(id *)(a1 + 40);
    LODWORD(v8) = v5;
    [v3 setSiriOutputVolume:0 forAudioRoute:v7 withName:v6 operationType:v12 completion:v8];
    id v9 = v13;
LABEL_9:

    goto LABEL_10;
  }
  id v10 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)AudioBufferList buf = 136315138;
    id v15 = "-[ADCommandCenter _setSiriOutputVolume:forAudioRoute:operationType:completion:]_block_invoke";
    _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "%s Volume service is unavailable.", buf, 0xCu);
  }
  uint64_t v11 = *(void *)(a1 + 40);
  if (v11)
  {
    id v9 = +[AFError errorWithCode:2601];
    (*(void (**)(uint64_t, void *))(v11 + 16))(v11, v9);
    goto LABEL_9;
  }
LABEL_10:
}

void sub_1001B7488(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = AFSiriLogContextDaemon;
  if (v3)
  {
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      int v6 = 136315394;
      uint64_t v7 = "-[ADCommandCenter _setSiriOutputVolume:forAudioRoute:operationType:completion:]_block_invoke";
      __int16 v8 = 2112;
      id v9 = v3;
      _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "%s error = %@", (uint8_t *)&v6, 0x16u);
    }
  }
  else if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v6 = 136315138;
    uint64_t v7 = "-[ADCommandCenter _setSiriOutputVolume:forAudioRoute:operationType:completion:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%s success", (uint8_t *)&v6, 0xCu);
  }
  uint64_t v5 = *(void *)(a1 + 32);
  if (v5) {
    (*(void (**)(uint64_t, id))(v5 + 16))(v5, v3);
  }
}

id sub_1001B7698(uint64_t a1, double a2)
{
  LODWORD(a2) = *(_DWORD *)(a1 + 64);
  return [*(id *)(a1 + 32) _setSiriOutputVolume:*(void *)(a1 + 40) forAudioRoute:*(void *)(a1 + 56) operationType:*(void *)(a1 + 48) completion:a2];
}

void sub_1001B7820(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)AudioBufferList buf = 136315394;
    id v12 = "-[ADCommandCenter _getSiriOutputVolumeForAudioRoute:completion:]_block_invoke";
    __int16 v13 = 2112;
    id v14 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%s volumeService = %@", buf, 0x16u);
  }
  if (v3)
  {
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_1001B79EC;
    v9[3] = &unk_10050D120;
    uint64_t v5 = *(void *)(a1 + 32);
    id v10 = *(id *)(a1 + 40);
    [v3 getSiriOutputVolumeForAudioRoute:0 withName:v5 completion:v9];
    int v6 = v10;
LABEL_9:

    goto LABEL_10;
  }
  uint64_t v7 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)AudioBufferList buf = 136315138;
    id v12 = "-[ADCommandCenter _getSiriOutputVolumeForAudioRoute:completion:]_block_invoke";
    _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "%s Volume service is unavailable.", buf, 0xCu);
  }
  uint64_t v8 = *(void *)(a1 + 40);
  if (v8)
  {
    int v6 = +[AFError errorWithCode:2601];
    (*(void (**)(uint64_t, void *, double))(v8 + 16))(v8, v6, 0.0);
    goto LABEL_9;
  }
LABEL_10:
}

void sub_1001B79EC(uint64_t a1, void *a2, float a3)
{
  id v5 = a2;
  int v6 = AFSiriLogContextDaemon;
  if (v5)
  {
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      int v8 = 136315394;
      id v9 = "-[ADCommandCenter _getSiriOutputVolumeForAudioRoute:completion:]_block_invoke";
      __int16 v10 = 2112;
      double v11 = *(double *)&v5;
      _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "%s error = %@", (uint8_t *)&v8, 0x16u);
    }
  }
  else if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v8 = 136315394;
    id v9 = "-[ADCommandCenter _getSiriOutputVolumeForAudioRoute:completion:]_block_invoke";
    __int16 v10 = 2048;
    double v11 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "%s volume = %f", (uint8_t *)&v8, 0x16u);
  }
  uint64_t v7 = *(void *)(a1 + 32);
  if (v7) {
    (*(void (**)(uint64_t, id, float))(v7 + 16))(v7, v5, a3);
  }
}

id sub_1001B7C08(uint64_t a1)
{
  return [*(id *)(a1 + 32) _getSiriOutputVolumeForAudioRoute:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];
}

void sub_1001B7C8C(uint64_t a1)
{
  uint64_t v2 = (void *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    id v3 = v2;
    uint64_t v4 = AFExternalNotificationRequestHandlerStateGetName();
    int v8 = 136315394;
    id v9 = "-[ADCommandCenter announceNotificationHandlingStateUpdatedToState:]_block_invoke";
    __int16 v10 = 2112;
    double v11 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "%s Announce notification handling state changed to: %@", (uint8_t *)&v8, 0x16u);
  }
  id v5 = [*(id *)(a1 + 32) _requestDispatcherService];
  int v6 = [*(id *)(a1 + 32) _account];
  uint64_t v7 = [v6 assistantIdentifier];
  [v5 announceNotificationHandlingStateUpdatedWithAssistantId:v7 toState:*(void *)(a1 + 40)];
}

void sub_1001B7E78(uint64_t a1)
{
  id v2 = +[ADHomeInfoManager sharedInfoManager];
  [v2 getAccessoryInfoForAccessoryWithUUID:*(void *)(a1 + 32) completionHandler:*(void *)(a1 + 40)];
}

void sub_1001B7F90(uint64_t a1)
{
  id v2 = +[ADHomeInfoManager sharedInfoManager];
  [v2 getSpeakerCapabilityForAccessoryWithUUID:*(void *)(a1 + 32) completionHandler:*(void *)(a1 + 40)];
}

void sub_1001B80AC(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) _contextManager];
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1001B8158;
  v4[3] = &unk_10050C2C8;
  uint64_t v3 = *(void *)(a1 + 40);
  id v5 = *(id *)(a1 + 48);
  [v2 pushSCDAAdvertisementContextToContextCollector:v3 completion:v4];
}

uint64_t sub_1001B8158(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_1001B8234(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) _contextManager];
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1001B82E0;
  v4[3] = &unk_10050C2C8;
  uint64_t v3 = *(void *)(a1 + 40);
  id v5 = *(id *)(a1 + 48);
  [v2 pushMyriadAdvertisementContextToContextCollector:v3 completion:v4];
}

uint64_t sub_1001B82E0(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_1001B8394(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [*(id *)(a1 + 32) _account];
  id v5 = [v4 assistantIdentifier];
  [v3 setAssistantId:v5];

  int v6 = [*(id *)(a1 + 32) _sessionManager];
  uint64_t v7 = [v6 languageCode];
  [v3 setLanguageCode:v7];

  [v3 setUnderstandingOnDevice:*(unsigned __int8 *)(*(void *)(a1 + 32) + 912)];
  int v8 = +[ADMultiUserService sharedService];
  uint64_t v9 = [v8 getDeviceOwnerSharedUserId];
  __int16 v10 = (void *)v9;
  if (v9) {
    uint64_t v11 = v9;
  }
  else {
    uint64_t v11 = AFMultiUserDefaultSharedUserId;
  }
  [v3 setSharedUserId:v11];

  id v12 = *(void **)(*(void *)(a1 + 32) + 16);
  if (v12) {
    [v12 adClientConnectionAuditToken];
  }
  else {
    memset(v13, 0, sizeof(v13));
  }
  [v3 setClientAuditToken:v13];
}

void sub_1001B8584(uint64_t a1, void *a2)
{
  id v6 = a2;
  [v6 setAudioSource:0];
  [v6 setAudioDestination:0];
  [v6 setResponseMode:*(void *)(a1 + 32)];
  objc_msgSend(v6, "setIsEyesFree:", objc_msgSend(*(id *)(*(void *)(a1 + 40) + 288), "isEyesFree"));
  [v6 setIsVoiceTriggerEnabled:sub_1001FD6CC()];
  objc_msgSend(v6, "setIsTextToSpeechEnabled:", objc_msgSend(*(id *)(*(void *)(a1 + 40) + 16), "adTextToSpeechIsMuted") ^ 1);
  [v6 setIsTriggerlessFollowup:*(unsigned __int8 *)(a1 + 48)];
  id v3 = [*(id *)(a1 + 40) _bargeInModes];
  [v6 setBargeInModes:v3];

  uint64_t v4 = [*(id *)(a1 + 40) _approximatePreviousTTSInterval:0];
  [v6 setApproximatePreviousTTSInterval:v4];

  id v5 = [*(id *)(a1 + 40) _restrictedCommands];
  [v6 setDeviceRestrictions:v5];

  [v6 setVoiceTriggerEventInfo:0];
  objc_msgSend(v6, "setVoiceAudioSessionId:", objc_msgSend(*(id *)(a1 + 40), "_sharedVoiceAudioSessionID"));
  objc_msgSend(v6, "setIsSystemApertureEnabled:", objc_msgSend(*(id *)(*(void *)(a1 + 40) + 288), "isSystemApertureEnabled"));
  objc_msgSend(v6, "setIsLiveActivitiesSupported:", objc_msgSend(*(id *)(*(void *)(a1 + 40) + 288), "isLiveActivitiesSupported"));
  objc_msgSend(v6, "setIsInAmbient:", objc_msgSend(*(id *)(*(void *)(a1 + 40) + 288), "isInAmbient"));
  [v6 setIsDeviceShowingLockScreen:*(unsigned __int8 *)(*(void *)(a1 + 40) + 513)];
  [v6 setIsDeviceLocked:*(unsigned __int8 *)(*(void *)(a1 + 40) + 512)];
}

void sub_1001B9470(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) _speechManager];
  id v3 = AFSiriLogContextSpeech;
  if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_INFO))
  {
    uint64_t v4 = *(void *)(a1 + 40);
    *(_DWORD *)__int16 v19 = 136315394;
    *(void *)&void v19[4] = "-[ADCommandCenter dictationRequestDidCompleteRecognitionWithError:secureOfflineOnlyRecognition:"
                         "sessionUUID:statistics:]_block_invoke";
    *(_WORD *)&v19[12] = 2114;
    *(void *)&v19[14] = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "%s %{public}@", v19, 0x16u);
  }
  id v5 = *(id *)(a1 + 40);
  if (*(unsigned char *)(a1 + 64))
  {
    id v6 = +[NSMutableDictionary dictionaryWithDictionary:*(void *)(a1 + 40)];
    uint64_t v7 = [v2 dictationOptions];
    uint64_t v8 = [v7 interactionIdentifier];
    uint64_t v9 = (void *)v8;
    if (v8) {
      CFStringRef v10 = (const __CFString *)v8;
    }
    else {
      CFStringRef v10 = &stru_10050F7D8;
    }
    [v6 setObject:v10 forKeyedSubscript:@"dictationUIInteractionIdentifier"];

    uint64_t v11 = +[NSDictionary dictionaryWithDictionary:v6];

    id v5 = (id)v11;
  }
  objc_msgSend(*(id *)(a1 + 32), "_metrics_markLocalSpeechCompletedWithStatistics:", v5);
  id v12 = [*(id *)(*(void *)(a1 + 32) + 328) currentRequestId];
  uint64_t v13 = *(void *)(a1 + 48);
  if (!v13)
  {
    if (!*(unsigned char *)(a1 + 64)) {
      goto LABEL_18;
    }
    goto LABEL_16;
  }
  if (*(unsigned char *)(*(void *)(a1 + 32) + 370))
  {
    id v14 = AFSiriLogContextSpeech;
    if (!os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_ERROR)) {
      goto LABEL_16;
    }
    *(_DWORD *)__int16 v19 = 136315394;
    *(void *)&void v19[4] = "-[ADCommandCenter dictationRequestDidCompleteRecognitionWithError:secureOfflineOnlyRecognition:"
                         "sessionUUID:statistics:]_block_invoke";
    *(_WORD *)&v19[12] = 2114;
    *(void *)&v19[14] = v13;
    id v15 = "%s Local speech recognition failed, and so did the session: %{public}@";
    goto LABEL_24;
  }
  id v14 = AFSiriLogContextSpeech;
  if (*(unsigned char *)(a1 + 64))
  {
    if (!os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_ERROR)) {
      goto LABEL_16;
    }
    *(_DWORD *)__int16 v19 = 136315394;
    *(void *)&void v19[4] = "-[ADCommandCenter dictationRequestDidCompleteRecognitionWithError:secureOfflineOnlyRecognition:"
                         "sessionUUID:statistics:]_block_invoke";
    *(_WORD *)&v19[12] = 2114;
    *(void *)&v19[14] = v13;
    id v15 = "%s Local speech recognition failed: %{public}@";
LABEL_24:
    _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, v15, v19, 0x16u);
LABEL_16:
    *(unsigned char *)(*(void *)(a1 + 32) + 370) = 0;
    if (objc_msgSend(*(id *)(a1 + 56), "isEqualToString:", v12, *(_OWORD *)v19, *(void *)&v19[16])) {
      [*(id *)(a1 + 32) _endSpeechRequestForCommand:0 withError:*(void *)(a1 + 48) suppressAlert:1 secureOfflineOnlyDictation:*(unsigned __int8 *)(a1 + 64)];
    }
    goto LABEL_18;
  }
  if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)__int16 v19 = 136315394;
    *(void *)&void v19[4] = "-[ADCommandCenter dictationRequestDidCompleteRecognitionWithError:secureOfflineOnlyRecognition:"
                         "sessionUUID:statistics:]_block_invoke";
    *(_WORD *)&v19[12] = 2114;
    *(void *)&v19[14] = v13;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "%s Ignoring local speech recognition failure because the session is still active: %{public}@", v19, 0x16u);
  }
LABEL_18:
  if ([*(id *)(a1 + 56) isEqualToString:v12])
  {
    __int16 v16 = [*(id *)(a1 + 32) _requestDispatcherService];
    id v17 = [*(id *)(a1 + 32) _account];
    id v18 = [v17 assistantIdentifier];
    [v16 endDictationSessionWithAssistantId:v18];
  }
}

void sub_1001B98A8(id *a1)
{
  id v2 = [a1[4] _speechManager];
  id v3 = [a1[5] recognition];
  uint64_t v4 = [v3 phrases];
  id v5 = [v3 utterances];
  id v6 = [a1[5] rawRecognition];
  uint64_t v7 = [v6 phrases];
  id v45 = [v6 utterances];
  unsigned int v44 = [a1[5] recognitionPaused];
  uint64_t v8 = [v2 dictationOptions];
  if (![v8 forceOfflineRecognition])
  {
    unsigned int v43 = 0;
    goto LABEL_5;
  }
  uint64_t v9 = [v2 dictationOptions];
  unsigned int v10 = [v9 secureOfflineOnly];

  if (v10)
  {
    uint64_t v8 = [v2 dictationOptions];
    unsigned int v43 = [v8 detectUtterances];
LABEL_5:

    goto LABEL_7;
  }
  unsigned int v43 = 0;
LABEL_7:
  uint64_t v11 = [v2 dictationOptions];
  unsigned int v12 = [v11 secureOfflineOnly];

  if (v12)
  {
    uint64_t v13 = AFSiriLogContextSpeech;
    if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)AudioBufferList buf = 136315138;
      CFURLRef v61 = "-[ADCommandCenter dictationRequestDidRecognizePackage:nluResult:sessionUUID:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "%s Phrases=<REDACTED>", buf, 0xCu);
    }
  }
  else
  {
    [v4 enumerateObjectsUsingBlock:&stru_1005066E0];
    [v5 enumerateObjectsUsingBlock:&stru_100506700];
  }
  id v14 = [v2 dictationOptions];
  id v15 = [v14 transcriptionMode];

  if (v15 != (id)3)
  {
    id v18 = [v2 dictationLanguages];
    __int16 v19 = [v18 firstObject];

    id v20 = a1[4];
    if (v20[371])
    {
      if (v20[368])
      {
        long long v21 = AFSiriLogContextSpeech;
        if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)AudioBufferList buf = 136315138;
          CFURLRef v61 = "-[ADCommandCenter dictationRequestDidRecognizePackage:nluResult:sessionUUID:]_block_invoke";
          _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "%s Ignoring and canceling final local recognition because server results have arrived", buf, 0xCu);
        }
        [v2 cancelLocalRecognitionIfActive];
        id v17 = v45;
LABEL_23:

        goto LABEL_24;
      }
      if (!v20[370])
      {
        long long v42 = v19;
        if (v20[648])
        {
          uint64_t v29 = _AFPreferencesMultilingualDictationTimeoutInMilliSeconds();
          uint64_t v30 = v29;
          if (v29)
          {
            [v29 doubleValue];
            double v32 = v31;
          }
          else
          {
            double v32 = 2000.0;
          }
        }
        else
        {
          double v32 = 2000.0;
        }
        if (![v2 isLocallyRecognizingInDictationMode]) {
          double v32 = 1000.0;
        }
        __int16 v33 = AFSiriLogContextSpeech;
        if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)AudioBufferList buf = 136315394;
          CFURLRef v61 = "-[ADCommandCenter dictationRequestDidRecognizePackage:nluResult:sessionUUID:]_block_invoke";
          __int16 v62 = 2048;
          double v63 = v32;
          _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_INFO, "%s Deferring final local recognition results for %f seconds while waiting for the server", buf, 0x16u);
        }
        id v34 = [*((id *)a1[4] + 41) currentRequestId];
        id v35 = [v34 copy];

        dispatch_time_t v36 = dispatch_time(0, (uint64_t)(v32 * 1000000.0));
        id v37 = a1[4];
        id v39 = *((void *)v37 + 1);
        dispatch_time_t v40 = v36;
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472;
        block[2] = sub_1001B9E84;
        block[3] = &unk_100506750;
        id v47 = v35;
        id v48 = v37;
        __int16 v19 = v42;
        id v49 = v42;
        id v50 = v3;
        char v58 = v43;
        id v51 = v2;
        char v59 = v44;
        id v52 = v4;
        id v53 = v7;
        id v54 = v5;
        id v17 = v45;
        id v55 = v45;
        id v56 = a1[6];
        id v57 = a1[7];
        id v38 = v35;
        dispatch_after(v40, v39, block);

        goto LABEL_23;
      }
    }
    uint64_t v41 = v6;
    id v22 = v19;
    [v20 _handleLocalSpeechRecognitionForOfflineSupport:v3 logText:v43 ^ 1];
    if (v44) {
      [*((id *)a1[4] + 5) adSpeechDidPauseRecognition];
    }
    id v23 = a1[4];
    int v24 = (void *)*((void *)v23 + 5);
    id v26 = a1[6];
    id v25 = a1[7];
    unsigned int v27 = [*((id *)v23 + 37) aceId];
    id v28 = v24;
    id v17 = v45;
    [v28 adSpeechRecordingDidRecognizePhrases:v4 rawPhrases:v7 utterances:v5 rawUtterances:v45 nluResult:v26 sessionUUID:v25 refId:v27];

    __int16 v19 = v22;
    id v6 = v41;
    goto LABEL_23;
  }
  __int16 v16 = AFSiriLogContextSpeech;
  id v17 = v45;
  if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)AudioBufferList buf = 136315138;
    CFURLRef v61 = "-[ADCommandCenter dictationRequestDidRecognizePackage:nluResult:sessionUUID:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "%s Not handling phraseRecognition because this is a phoneme transcription request", buf, 0xCu);
  }
LABEL_24:
}

void sub_1001B9E84(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = [*(id *)(*(void *)(a1 + 40) + 328) currentRequestId];
  LOBYTE(v2) = [v2 isEqualToString:v3];

  if ((v2 & 1) == 0)
  {
    uint64_t v4 = AFSiriLogContextSpeech;
    if (!os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_INFO)) {
      return;
    }
    *(_DWORD *)AudioBufferList buf = 136315138;
    id v17 = "-[ADCommandCenter dictationRequestDidRecognizePackage:nluResult:sessionUUID:]_block_invoke";
    id v5 = "%s Ignoring final local recognition because the previous request has already finished";
    goto LABEL_7;
  }
  if (*(unsigned char *)(*(void *)(a1 + 40) + 368))
  {
    uint64_t v4 = AFSiriLogContextSpeech;
    if (!os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_INFO)) {
      return;
    }
    *(_DWORD *)AudioBufferList buf = 136315138;
    id v17 = "-[ADCommandCenter dictationRequestDidRecognizePackage:nluResult:sessionUUID:]_block_invoke";
    id v5 = "%s Ignoring final local recognition because the server won the race";
LABEL_7:
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, v5, buf, 0xCu);
    return;
  }
  +[AFAggregator logLocalRecognitionWonForLanguage:*(void *)(a1 + 48)];
  [*(id *)(a1 + 40) _handleLocalSpeechRecognitionForOfflineSupport:*(void *)(a1 + 56) logText:*(unsigned char *)(a1 + 120) == 0];
  if ([*(id *)(a1 + 64) isLocallyRecognizingInDictationMode])
  {
    id v6 = AFSiriLogContextSpeech;
    if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)AudioBufferList buf = 136315138;
      id v17 = "-[ADCommandCenter dictationRequestDidRecognizePackage:nluResult:sessionUUID:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "%s Giving up on final server recognition because local won the race", buf, 0xCu);
    }
    uint64_t v7 = *(void **)(a1 + 40);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_1001BA120;
    v8[3] = &unk_100506728;
    char v15 = *(unsigned char *)(a1 + 121);
    void v8[4] = v7;
    id v9 = *(id *)(a1 + 72);
    id v10 = *(id *)(a1 + 80);
    id v11 = *(id *)(a1 + 88);
    id v12 = *(id *)(a1 + 96);
    id v13 = *(id *)(a1 + 104);
    id v14 = *(id *)(a1 + 112);
    [v7 _handleSpeechRecognizedWithDelegateBlock:v8];
  }
}

void sub_1001BA120(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 88)) {
    [*(id *)(*(void *)(a1 + 32) + 40) adSpeechDidPauseRecognition];
  }
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(void **)(v2 + 40);
  uint64_t v5 = *(void *)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 56);
  uint64_t v7 = *(void *)(a1 + 64);
  uint64_t v8 = *(void *)(a1 + 72);
  uint64_t v9 = *(void *)(a1 + 80);
  id v10 = [*(id *)(v2 + 296) aceId];
  [v4 adSpeechRecordingDidRecognizePhrases:v3 rawPhrases:v5 utterances:v6 rawUtterances:v7 nluResult:v8 sessionUUID:v9 refId:v10];
}

void sub_1001BA1CC(id a1, AFSpeechUtterance *a2, unint64_t a3, BOOL *a4)
{
  uint64_t v5 = a2;
  uint64_t v6 = AFSiriLogContextSpeech;
  if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_INFO))
  {
    int v7 = 136315650;
    uint64_t v8 = "-[ADCommandCenter dictationRequestDidRecognizePackage:nluResult:sessionUUID:]_block_invoke";
    __int16 v9 = 2048;
    unint64_t v10 = a3;
    __int16 v11 = 2112;
    id v12 = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "%s Utterance[%lu]=%@", (uint8_t *)&v7, 0x20u);
  }
}

void sub_1001BA2A4(id a1, AFSpeechPhrase *a2, unint64_t a3, BOOL *a4)
{
  uint64_t v5 = a2;
  uint64_t v6 = AFSiriLogContextSpeech;
  if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_INFO))
  {
    int v7 = 136315650;
    uint64_t v8 = "-[ADCommandCenter dictationRequestDidRecognizePackage:nluResult:sessionUUID:]_block_invoke";
    __int16 v9 = 2048;
    unint64_t v10 = a3;
    __int16 v11 = 2112;
    id v12 = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "%s Phrase[%lu]=%@", (uint8_t *)&v7, 0x20u);
  }
}

void sub_1001BA460(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) _speechManager];
  uint64_t v3 = [v2 dictationOptions];
  unsigned int v4 = [v3 secureOfflineOnly];

  if (v4)
  {
    uint64_t v5 = AFSiriLogContextSpeech;
    if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_INFO))
    {
      int v9 = 136315138;
      unint64_t v10 = "-[ADCommandCenter dictationRequestDidRecognizeVoiceCommandCandidatePackage:nluResult:sessionUUID:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "%s VoiceCommandCandidate Phrases=<REDACTED>", (uint8_t *)&v9, 0xCu);
    }
  }
  else
  {
    uint64_t v6 = [*(id *)(a1 + 40) recognition];
    int v7 = [v6 phrases];
    uint64_t v8 = [v6 utterances];
    [v7 enumerateObjectsUsingBlock:&stru_1005066A0];
    [v8 enumerateObjectsUsingBlock:&stru_1005066C0];
  }
  [*(id *)(*(void *)(a1 + 32) + 40) adSpeechRecordingDidRecognizeVoiceCommandCandidatePackage:*(void *)(a1 + 40) nluResult:*(void *)(a1 + 48) sessionUUID:*(void *)(a1 + 56)];
}

void sub_1001BA5B8(id a1, AFSpeechUtterance *a2, unint64_t a3, BOOL *a4)
{
  uint64_t v5 = a2;
  uint64_t v6 = AFSiriLogContextSpeech;
  if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_INFO))
  {
    int v7 = 136315650;
    uint64_t v8 = "-[ADCommandCenter dictationRequestDidRecognizeVoiceCommandCandidatePackage:nluResult:sessionUUID:]_block_invoke";
    __int16 v9 = 2048;
    unint64_t v10 = a3;
    __int16 v11 = 2112;
    id v12 = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "%s VoiceCommandCandidate Utterance[%lu]=%@", (uint8_t *)&v7, 0x20u);
  }
}

void sub_1001BA690(id a1, AFSpeechPhrase *a2, unint64_t a3, BOOL *a4)
{
  uint64_t v5 = a2;
  uint64_t v6 = AFSiriLogContextSpeech;
  if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_INFO))
  {
    int v7 = 136315650;
    uint64_t v8 = "-[ADCommandCenter dictationRequestDidRecognizeVoiceCommandCandidatePackage:nluResult:sessionUUID:]_block_invoke";
    __int16 v9 = 2048;
    unint64_t v10 = a3;
    __int16 v11 = 2112;
    id v12 = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "%s VoiceCommandCandidate Phrase[%lu]=%@", (uint8_t *)&v7, 0x20u);
  }
}

void sub_1001BA82C(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) _speechManager];
  uint64_t v3 = [*(id *)(a1 + 40) recognition];
  unsigned int v4 = [v3 phrases];
  uint64_t v5 = [v3 utterances];
  uint64_t v6 = [v2 dictationOptions];
  unsigned int v7 = [v6 secureOfflineOnly];

  if (v7)
  {
    uint64_t v8 = AFSiriLogContextSpeech;
    if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_INFO))
    {
      int v9 = 136315138;
      unint64_t v10 = "-[ADCommandCenter dictationRequestDidRecognizeFinalResultCandidatePackage:sessionUUID:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "%s FinalResultCandidate Phrases=<REDACTED>", (uint8_t *)&v9, 0xCu);
    }
  }
  else
  {
    [v4 enumerateObjectsUsingBlock:&stru_100506660];
    [v5 enumerateObjectsUsingBlock:&stru_100506680];
  }
  [*(id *)(*(void *)(a1 + 32) + 40) adSpeechRecordingDidRecognizeFinalResultCandidatePackage:*(void *)(a1 + 40) sessionUUID:*(void *)(a1 + 48)];
}

void sub_1001BA990(id a1, AFSpeechUtterance *a2, unint64_t a3, BOOL *a4)
{
  uint64_t v5 = a2;
  uint64_t v6 = AFSiriLogContextSpeech;
  if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_INFO))
  {
    int v7 = 136315650;
    uint64_t v8 = "-[ADCommandCenter dictationRequestDidRecognizeFinalResultCandidatePackage:sessionUUID:]_block_invoke";
    __int16 v9 = 2048;
    unint64_t v10 = a3;
    __int16 v11 = 2112;
    id v12 = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "%s FinalResultCandidate Utterance[%lu]=%@", (uint8_t *)&v7, 0x20u);
  }
}

void sub_1001BAA68(id a1, AFSpeechPhrase *a2, unint64_t a3, BOOL *a4)
{
  uint64_t v5 = a2;
  uint64_t v6 = AFSiriLogContextSpeech;
  if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_INFO))
  {
    int v7 = 136315650;
    uint64_t v8 = "-[ADCommandCenter dictationRequestDidRecognizeFinalResultCandidatePackage:sessionUUID:]_block_invoke";
    __int16 v9 = 2048;
    unint64_t v10 = a3;
    __int16 v11 = 2112;
    id v12 = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "%s FinalResultCandidate Phrase[%lu]=%@", (uint8_t *)&v7, 0x20u);
  }
}

void sub_1001BAC24(id *a1)
{
  uint64_t v2 = [a1[4] _speechManager];
  uint64_t v3 = [a1[5] recognition];
  unsigned int v4 = [v3 oneBestTokenList];

  uint64_t v5 = [(__CFString *)v4 lastObject];
  [v5 endTime];
  double v7 = v6;
  uint64_t v8 = [v2 dictationOptions];
  unsigned int v9 = [v8 secureOfflineOnly];

  if (v9)
  {
    unsigned int v10 = [a1[4] canLogWithSpeechManager:v2];
    __int16 v11 = AFSiriLogContextSpeech;
    if (!os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_INFO)) {
      goto LABEL_9;
    }
    CFStringRef v12 = @"<REDACTED>";
    if (v10) {
      CFStringRef v12 = v4;
    }
    *(_DWORD *)AudioBufferList buf = 136315394;
    id v20 = "-[ADCommandCenter dictationRequestDidRecognizePartialPackage:nluResult:sessionUUID:]_block_invoke";
    __int16 v21 = 2112;
    CFStringRef v22 = v12;
  }
  else
  {
    __int16 v11 = AFSiriLogContextSpeech;
    if (!os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_INFO)) {
      goto LABEL_9;
    }
    *(_DWORD *)AudioBufferList buf = 136315394;
    id v20 = "-[ADCommandCenter dictationRequestDidRecognizePartialPackage:nluResult:sessionUUID:]_block_invoke";
    __int16 v21 = 2112;
    CFStringRef v22 = v4;
  }
  _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "%s %@", buf, 0x16u);
LABEL_9:
  objc_msgSend(a1[4], "_metrics_markLocalPartialSpeechRecognition");
  id v13 = a1[4];
  if (v13[371])
  {
    id v14 = AFSiriLogContextSpeech;
    if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)AudioBufferList buf = 136315138;
      id v20 = "-[ADCommandCenter dictationRequestDidRecognizePartialPackage:nluResult:sessionUUID:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "%s Ignoring partial local recognitions because server results have arrived", buf, 0xCu);
    }
  }
  else
  {
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472;
    void v15[2] = sub_1001BAED8;
    v15[3] = &unk_10050DC68;
    void v15[4] = v13;
    id v16 = a1[5];
    id v17 = a1[6];
    id v18 = a1[7];
    [v13 _handlePartialSpeechRecognitionForElapsedTime:v15 WithDelegateBlock:v7];
  }
}

id sub_1001BAED8(void *a1)
{
  return _[*(id *)(a1[4] + 40) adSpeechRecordingDidRecognizePartialPackage:a1[5] nluResult:a1[6] sessionUUID:a1[7]];
}

void sub_1001BAFD0(id *a1)
{
  uint64_t v2 = [a1[4] _speechManager];
  uint64_t v3 = [a1[5] lastObject];
  [v3 endTime];
  double v5 = v4;
  double v6 = [v2 dictationOptions];
  unsigned int v7 = [v6 secureOfflineOnly];

  if (v7)
  {
    unsigned int v8 = [a1[4] canLogWithSpeechManager:v2];
    unsigned int v9 = AFSiriLogContextSpeech;
    if (!os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_INFO)) {
      goto LABEL_10;
    }
    if (v8) {
      CFStringRef v10 = (const __CFString *)a1[5];
    }
    else {
      CFStringRef v10 = @"<REDACTED>";
    }
    *(_DWORD *)AudioBufferList buf = 136315394;
    __int16 v19 = "-[ADCommandCenter dictationRequestDidRecognizeTokens:nluResult:sessionUUID:]_block_invoke";
    __int16 v20 = 2112;
    CFStringRef v21 = v10;
  }
  else
  {
    unsigned int v9 = AFSiriLogContextSpeech;
    if (!os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_INFO)) {
      goto LABEL_10;
    }
    CFStringRef v11 = (const __CFString *)a1[5];
    *(_DWORD *)AudioBufferList buf = 136315394;
    __int16 v19 = "-[ADCommandCenter dictationRequestDidRecognizeTokens:nluResult:sessionUUID:]_block_invoke";
    __int16 v20 = 2112;
    CFStringRef v21 = v11;
  }
  _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "%s %@", buf, 0x16u);
LABEL_10:
  objc_msgSend(a1[4], "_metrics_markLocalPartialSpeechRecognition");
  CFStringRef v12 = a1[4];
  if (v12[371])
  {
    id v13 = AFSiriLogContextSpeech;
    if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)AudioBufferList buf = 136315138;
      __int16 v19 = "-[ADCommandCenter dictationRequestDidRecognizeTokens:nluResult:sessionUUID:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "%s Ignoring partial local recognitions because server results have arrived", buf, 0xCu);
    }
  }
  else
  {
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    id v14[2] = sub_1001BB260;
    v14[3] = &unk_10050DC68;
    void v14[4] = v12;
    id v15 = a1[5];
    id v16 = a1[6];
    id v17 = a1[7];
    [v12 _handlePartialSpeechRecognitionForElapsedTime:v14 WithDelegateBlock:v5];
  }
}

id sub_1001BB260(void *a1)
{
  return _[*(id *)(a1[4] + 40) adSpeechRecordingDidRecognizeTokens:a1[5] nluResult:a1[6] sessionUUID:a1[7]];
}

void sub_1001BB330(id a1)
{
  id v1 = +[ADExternalNotificationRequestHandler sharedNotificationRequestHandler];
  [v1 notifySpeechDetectedIsUndirected];
}

void sub_1001BB4C4(void *a1)
{
  uint64_t v2 = (void *)a1[4];
  uint64_t v3 = (void *)a1[5];
  id v5 = [v3 refId];
  double v4 = [v2 _rootExecutionContextForRequestID:v5];
  [v2 _sasSpeechRecognized:v3 executionContext:v4 completion:a1[6]];
}

id sub_1001BB694(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _sasSpeechServerEndpointIdentified:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];
}

id sub_1001BB7F0(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _sasResultCandidate:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];
}

id sub_1001BB900(uint64_t a1)
{
  return [*(id *)(a1 + 32) _shutdownAfterDelay:0.0];
}

void *sub_1001BBA34(void *result)
{
  if (result[4]) {
    return objc_msgSend(*(id *)(result[5] + 496), "removeObject:");
  }
  return result;
}

id sub_1001BBB88(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 496);
  if (!v2)
  {
    id v3 = objc_alloc_init((Class)NSMutableSet);
    uint64_t v4 = *(void *)(a1 + 32);
    id v5 = *(void **)(v4 + 496);
    *(void *)(v4 + 496) = v3;

    uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 496);
  }
  uint64_t v6 = *(void *)(a1 + 40);
  return [v2 addObject:v6];
}

id sub_1001BBC60(uint64_t a1)
{
  return [*(id *)(a1 + 32) _cancelCurrentRequestForReason:*(void *)(a1 + 40) andError:0 successorInfo:0];
}

void sub_1001BBD18(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) _speechManager];
  [v2 updateSpeechSynthesisRecord:*(void *)(a1 + 40)];
}

id sub_1001BBE68(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _handleAceCommand:*(void *)(a1 + 40) afterCurrentRequest:*(unsigned __int8 *)(a1 + 64) waitForResponse:*(unsigned __int8 *)(a1 + 65) withDelegate:*(void *)(a1 + 48) completion:*(void *)(a1 + 56)];
}

id sub_1001BBF44(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _getDeferredObjectsWithIdentifiers:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];
}

void sub_1001BC008(uint64_t a1)
{
  id v2 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)AudioBufferList buf = 136315138;
    unsigned int v8 = "-[ADCommandCenter prepareForShutdown]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s Canceling session for shutdown", buf, 0xCu);
  }
  uint64_t v3 = *(void *)(a1 + 32);
  if (*(void *)(v3 + 568))
  {
    dispatch_group_enter(*(dispatch_group_t *)(a1 + 40));
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    void v5[2] = sub_1001BC144;
    v5[3] = &unk_10050E138;
    uint64_t v4 = *(void **)(a1 + 32);
    id v6 = *(id *)(a1 + 40);
    [v4 _stopObservingCallStateWithCompletion:v5];

    uint64_t v3 = *(void *)(a1 + 32);
  }
  [*(id *)(v3 + 96) cancelSynchronously];
  dispatch_suspend(*(dispatch_object_t *)(*(void *)(a1 + 32) + 8));
}

void sub_1001BC144(uint64_t a1)
{
}

void sub_1001BC1F4(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) _speechManager];
  [v2 getOfflineDictationStatusIgnoringCache:*(unsigned __int8 *)(a1 + 48) completion:*(void *)(a1 + 40)];
}

void sub_1001BC3A0(uint64_t a1)
{
  if ([*(id *)(a1 + 32) _hasOutstandingRequestId:*(void *)(a1 + 40)])
  {
    id v2 = *(void **)(*(void *)(a1 + 32) + 16);
    double v3 = *(double *)(a1 + 48);
    _[v2 adRequestDidReceiveTimeoutExtensionRequestWithDuration:v3];
  }
  else
  {
    uint64_t v4 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      uint64_t v5 = *(void *)(a1 + 40);
      int v6 = 136315394;
      unsigned int v7 = "-[ADCommandCenter extendRequestTimeoutBy:forRequestID:]_block_invoke";
      __int16 v8 = 2112;
      uint64_t v9 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%s Received unknown requestId: %@. Ignoring.", (uint8_t *)&v6, 0x16u);
    }
  }
}

uint64_t sub_1001BC55C(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 40) + 8) + 24) = *(unsigned char *)(*(void *)(result + 32) + 534);
  return result;
}

void sub_1001BC704(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = [*(id *)(a1 + 48) refId];
  uint64_t v5 = [v2 _executionContextMatchingExecutionInfo:v3 fallbackRequestID:v4];

  int v6 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v7 = 136315394;
    __int16 v8 = "-[ADCommandCenter handleCommand:withExecutionContextMatchingInfo:completion:]_block_invoke";
    __int16 v9 = 2112;
    CFStringRef v10 = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "%s matchedExecutionContext = %@", (uint8_t *)&v7, 0x16u);
  }
  [*(id *)(a1 + 32) _handleCommandAndClientReply:*(void *)(a1 + 48) executionContext:v5 commandCompletion:*(void *)(a1 + 56)];
}

uint64_t sub_1001BC8A0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = [*(id *)(*(void *)(a1 + 32) + 504) areAnnouncementRequestsPermittedByPresentationWhileActive];
  uint64_t v3 = *(uint64_t (**)(uint64_t, id))(v1 + 16);
  return v3(v1, v2);
}

uint64_t sub_1001BC980(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(unsigned __int8 *)(*(void *)(a1 + 32) + 533));
}

uint64_t sub_1001BCA44(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 40) + 8) + 24) = *(unsigned char *)(*(void *)(result + 32) + 530);
  return result;
}

uint64_t sub_1001BCAF0(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(unsigned __int8 *)(*(void *)(a1 + 32) + 530));
}

uint64_t sub_1001BCBB4(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 40) + 8) + 24) = *(unsigned char *)(*(void *)(result + 32) + 529);
  return result;
}

uint64_t sub_1001BCC60(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(unsigned __int8 *)(*(void *)(a1 + 32) + 529));
}

uint64_t sub_1001BCD24(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 40) + 8) + 24) = *(unsigned char *)(*(void *)(result + 32) + 528);
  return result;
}

uint64_t sub_1001BCDE4(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 40) + 8) + 24) = *(unsigned char *)(*(void *)(result + 32) + 513);
  return result;
}

uint64_t sub_1001BCEA4(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 40) + 8) + 24) = *(unsigned char *)(*(void *)(result + 32) + 512);
  return result;
}

id sub_1001BCF3C(uint64_t a1)
{
  return _[*(id *)(*(void *)(a1 + 32) + 16) adRequestRequestedDismissAssistantWithReason:*(void *)(a1 + 40)];
}

id sub_1001BCFBC(uint64_t a1)
{
  return _[*(id *)(*(void *)(a1 + 32) + 16) adRequestRequestedDismissAssistant];
}

id sub_1001BD08C(uint64_t a1)
{
  return [*(id *)(a1 + 32) _openURL:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];
}

uint64_t (**sub_1001BD180(void *a1))(id, void)
{
  if (*(void *)(a1[4] + 16)) {
    return (uint64_t (**)(id, void))_[*(id *)(a1[4] + 16) adRequestRequestedOpenApplicationWithBundleID:a1[5] URL:a1[6] completion:a1[7]];
  }
  uint64_t result = (uint64_t (**)(id, void))a1[7];
  if (result) {
    return (uint64_t (**)(id, void))result[2](result, 0);
  }
  return result;
}

void sub_1001BD250(uint64_t a1)
{
  unsigned int v2 = [*(id *)(a1 + 32) _hasActiveClientOrSyncingOrInCall];
  uint64_t v3 = [*(id *)(a1 + 32) _serviceManager];
  uint64_t v4 = *(void *)(a1 + 40);
  id v5 = v3;
  if (v2) {
    [v3 pendServiceReloadNotification:v4];
  }
  else {
    [v3 reloadServiceForNotification:v4];
  }
}

void sub_1001BD354(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) _serviceManager];
  [v2 removeService:*(void *)(a1 + 40)];
}

void sub_1001BD440(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) _serviceManager];
  [v2 addService:*(void *)(a1 + 40)];
}

id sub_1001BD52C(uint64_t a1)
{
  id v2 = (void *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = v2;
    id v5 = +[AFInstanceContext currentContext];
    int v33 = 136315650;
    id v34 = "-[ADCommandCenter clientDisconnected:]_block_invoke";
    __int16 v35 = 2048;
    uint64_t v36 = v3;
    __int16 v37 = 2112;
    id v38 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%s %p %@", (uint8_t *)&v33, 0x20u);
  }
  uint64_t v6 = *(void *)(a1 + 40);
  if (*(void *)(a1 + 32) == *(void *)(v6 + 16))
  {
    int v7 = *(void **)(v6 + 504);
    *(void *)(v6 + 504) = 0;

    uint64_t v8 = *(void *)(a1 + 40);
    __int16 v9 = *(void **)(v8 + 16);
    *(void *)(v8 + 16) = 0;

    [*(id *)(*(void *)(a1 + 40) + 96) setHasClient:0];
    CFStringRef v10 = [*(id *)(a1 + 40) _serviceManager];
    [v10 setCommandCenterClient:0];

    char v11 = AFIsHorseman();
    uint64_t v6 = *(void *)(a1 + 40);
    if ((v11 & 1) == 0)
    {
      CFStringRef v12 = [(id)v6 _account];
      id v13 = [v12 assistantIdentifier];

      if (v13)
      {
        id v14 = AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
        {
          int v33 = 136315138;
          id v34 = "-[ADCommandCenter clientDisconnected:]_block_invoke";
          _os_log_debug_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "%s Notify SRD to end assistant session", (uint8_t *)&v33, 0xCu);
        }
        [*(id *)(*(void *)(a1 + 40) + 928) endSessionWithAssistantId:v13];
      }

      uint64_t v6 = *(void *)(a1 + 40);
    }
  }
  id v15 = *(void **)(a1 + 32);
  id v16 = [*(id *)(v6 + 72) handle];

  if (v15 == v16)
  {
    id v17 = [*(id *)(a1 + 40) _serviceManager];
    [v17 removeService:*(void *)(*(void *)(a1 + 40) + 72)];
    [*(id *)(a1 + 40) _setUIService:0];
    if (!*(void *)(*(void *)(a1 + 40) + 80))
    {
      id v18 = objc_alloc_init(ADFauxUIService);
      uint64_t v19 = *(void *)(a1 + 40);
      __int16 v20 = *(void **)(v19 + 80);
      *(void *)(v19 + 80) = v18;

      [v17 addService:*(void *)(*(void *)(a1 + 40) + 80)];
    }
  }
  uint64_t v21 = *(void *)(a1 + 40);
  if (!*(void *)(v21 + 16))
  {
    [*(id *)(v21 + 96) setHasActiveRequest:0];
    [*(id *)(a1 + 40) _stopUpdatingMotionActivity];
    [*(id *)(a1 + 40) _resetServices];
    CFStringRef v22 = [*(id *)(a1 + 40) _resultObjectCache];
    [v22 clearResultObjectsForAllRequestIdsExcept:0];

    sub_1001FB7C0();
    [*(id *)(a1 + 40) _processQueuedLanguageCodeAndOutputVoice];
  }
  id v23 = +[AFPreferences sharedPreferences];
  unsigned int v24 = [v23 assistantIsEnabled];

  id v25 = +[AFPreferences sharedPreferences];
  unsigned int v26 = [v25 dictationIsEnabled];

  if ((v24 & 1) != 0 || v26)
  {
    sub_1001FD584(@"session_did_finish_timestamp");
    unsigned int v27 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      int v33 = 136315138;
      id v34 = "-[ADCommandCenter clientDisconnected:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_INFO, "%s Client disconnected, sanity checking", (uint8_t *)&v33, 0xCu);
    }
    if (v24) {
      [*(id *)(a1 + 40) sanityCheckAutodownloadedAssetsForced:0];
    }
    if (([*(id *)(a1 + 40) _callIsLikely] & 1) == 0
      && ([*(id *)(a1 + 40) _isInCall] & 1) == 0)
    {
      id v28 = AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
      {
        int v33 = 136315138;
        id v34 = "-[ADCommandCenter clientDisconnected:]_block_invoke";
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_INFO, "%s Client disconnected and no phone call underway, syncing if needed", (uint8_t *)&v33, 0xCu);
      }
      objc_msgSend(*(id *)(a1 + 40), "_sync_syncIfNeeded");
    }
  }
  int v29 = AFSupportsSCDAFramework();
  uint64_t v30 = (id *)SCDAMonitor_ptr;
  if (!v29) {
    uint64_t v30 = (id *)AFMyriadMonitor_ptr;
  }
  double v31 = [*v30 sharedMonitor];
  [v31 stopMonitoring];

  [*(id *)(a1 + 40) _cancelCrossDeviceRequestOperationsForRemoteRequest];
  [*(id *)(a1 + 40) _clearAllExecutionDevices];
  return [*(id *)(a1 + 40) _shutdownSessionWhenIdle];
}

void sub_1001BD9F8(uint64_t a1)
{
  id v2 = (void *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = v2;
    id v5 = +[AFInstanceContext currentContext];
    int v24 = 136315650;
    id v25 = "-[ADCommandCenter clientConnected:]_block_invoke";
    __int16 v26 = 2048;
    uint64_t v27 = v3;
    __int16 v28 = 2112;
    int v29 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%s %p %@", (uint8_t *)&v24, 0x20u);
  }
  objc_storeStrong((id *)(*(void *)(a1 + 40) + 16), *(id *)(a1 + 32));
  uint64_t v6 = *(void *)(a1 + 40);
  int v7 = *(void **)(v6 + 504);
  *(void *)(v6 + 504) = 0;

  uint64_t v8 = [[ADUIService alloc] initWithRequestDelegate:*(void *)(a1 + 32)];
  __int16 v9 = [*(id *)(a1 + 40) _serviceManager];
  [v9 addService:v8];
  [v9 setCommandCenterClient:*(void *)(a1 + 32)];
  [*(id *)(a1 + 40) _setUIService:v8];
  CFStringRef v10 = *(void **)(a1 + 40);
  if (v10[10])
  {
    objc_msgSend(v9, "removeService:");
    uint64_t v11 = *(void *)(a1 + 40);
    CFStringRef v12 = *(void **)(v11 + 80);
    *(void *)(v11 + 80) = 0;

    CFStringRef v10 = *(void **)(a1 + 40);
  }
  [v10 _startUpdatingMotionActivity];
  *(unsigned char *)(*(void *)(a1 + 40) + 528) = 0;
  *(unsigned char *)(*(void *)(a1 + 40) + 529) = 0;
  *(unsigned char *)(*(void *)(a1 + 40) + 530) = 0;
  *(unsigned char *)(*(void *)(a1 + 40) + 532) = 0;
  *(unsigned char *)(*(void *)(a1 + 40) + 533) = 0;
  id v13 = [*(id *)(a1 + 40) _sessionManager];
  [v13 setHasClient:1];

  if (!*(unsigned char *)(*(void *)(a1 + 40) + 916)
    && ((AFDeviceSupportsSiriUOD() & 1) != 0 || AFShouldRunAsrOnServerForUOD()))
  {
    id v14 = [*(id *)(a1 + 40) _sessionManager];
    id v15 = [v14 languageCode];

    id v16 = [*(id *)(a1 + 40) _updateUODAssetStatusForLanguage:v15];
  }
  id v17 = +[AFPreferences sharedPreferences];
  id v18 = [v17 myriadMonitorTimeOutInterval];

  if (v18 && AFIsInternalInstall()) {
    [v18 doubleValue];
  }
  else {
    AFMyriadMonitorDecisionGetWaitTime();
  }
  double v20 = v19;
  int v21 = AFSupportsSCDAFramework();
  CFStringRef v22 = (id *)SCDAMonitor_ptr;
  if (!v21) {
    CFStringRef v22 = (id *)AFMyriadMonitor_ptr;
  }
  id v23 = [*v22 sharedMonitor];
  [v23 startMonitoringWithTimeoutInterval:*(void *)(*(void *)(a1 + 40) + 688) instanceContext:v20];
}

void sub_1001BDD7C(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t v3 = +[NSArray arrayWithObjects:&v6 count:1];
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1001BDE68;
  v4[3] = &unk_10050CE88;
  id v5 = *(id *)(a1 + 48);
  objc_msgSend(v2, "_context_fetchApplicationContextForApplicationInfos:completion:", v3, v4);
}

uint64_t sub_1001BDE68(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

id sub_1001BDF44(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _setManagedStoreObject:*(void *)(a1 + 40) forKey:*(void *)(a1 + 48)];
}

void sub_1001BE01C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  if (v1)
  {
    id v2 = [*(id *)(a1 + 32) _managedStoreObjectForKey:*(void *)(a1 + 40)];
    (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
  }
}

id sub_1001BE108(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _rescheduleValidationRefresh];
}

id sub_1001BE184(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _refreshAssistantValidation];
}

id sub_1001BE200(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _destroyActiveAccount];
}

id sub_1001BE2A0(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _setActiveAccountIdentifier:*(void *)(a1 + 40)];
}

void sub_1001BE344(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  if (v1)
  {
    id v2 = [*(id *)(a1 + 32) _activeAccountIdentifier];
    (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
  }
}

uint64_t sub_1001BE52C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1001BE53C(uint64_t a1)
{
}

void sub_1001BE544(uint64_t a1)
{
  id v5 = [*(id *)(a1 + 32) _account];
  uint64_t v2 = [v5 assistantIdentifier];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_1001BE644(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  if (v1)
  {
    id v2 = [*(id *)(a1 + 32) _account];
    (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
  }
}

id sub_1001BE750(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _deleteAccountWithIdentifier:*(void *)(a1 + 40)];
}

void sub_1001BE7F4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  if (v1)
  {
    id v2 = [*(id *)(a1 + 32) _accounts];
    (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
  }
}

id sub_1001BE908(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _fetchSupportedLanguagesWithCompletion:*(void *)(a1 + 40)];
}

uint64_t sub_1001BEBFC(uint64_t a1)
{
  id v2 = +[ADAnalyticsService sharedService];
  [v2 checkForMetricsUploadProblem];

  uint64_t result = *(void *)(a1 + 32);
  if (result)
  {
    uint64_t v4 = *(uint64_t (**)(void))(result + 16);
    return v4();
  }
  return result;
}

id sub_1001BEC64(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_metrics_sendMetricsToServerUntilLimit:requiresUnlimitedPower:requiresActiveSession:purgesOversizedStorage:scheduledActivity:completion:", *(unsigned __int8 *)(a1 + 56), *(unsigned __int8 *)(a1 + 57), *(unsigned __int8 *)(a1 + 58), *(unsigned __int8 *)(a1 + 59), *(void *)(a1 + 40), *(double *)(a1 + 48));
}

id sub_1001BED20(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _requestBarrierIfNecessary:*(void *)(a1 + 40)];
}

id sub_1001BEDC4(uint64_t a1)
{
  return [*(id *)(a1 + 32) _requestBarrier:*(void *)(a1 + 40)];
}

id sub_1001BEE44(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _telephonyRequestCompleted];
}

id sub_1001BEEC0(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _prepareForPhoneCall];
}

void sub_1001BEF8C(id *a1)
{
  id v2 = [a1[4] _contextManager];
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1001BF040;
  v3[3] = &unk_10050DEC0;
  id v4 = a1[5];
  id v5 = a1[6];
  [v2 getContextSnapshotForCurrentRequestWithCompletion:v3];
}

void sub_1001BF040(uint64_t a1, void *a2)
{
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  id v3 = a2;
  id v4 = [v3 countByEnumeratingWithState:&v17 objects:v27 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v18;
    while (2)
    {
      int v7 = 0;
      do
      {
        if (*(void *)v18 != v6) {
          objc_enumerationMutation(v3);
        }
        uint64_t v8 = objc_msgSend(*(id *)(*((void *)&v17 + 1) + 8 * (void)v7), "content", (void)v17);
        __int16 v9 = [v8 identifier];
        unsigned int v10 = [v9 isEqual:*(void *)(a1 + 32)];

        if (v10)
        {
          CFStringRef v12 = AFSiriLogContextDaemon;
          if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
          {
            id v15 = *(void **)(a1 + 32);
            *(_DWORD *)AudioBufferList buf = 136315650;
            CFStringRef v22 = "-[ADCommandCenter getOriginDeviceInfoForContextIdentifier:completion:]_block_invoke_2";
            __int16 v23 = 2112;
            int v24 = v8;
            __int16 v25 = 2112;
            id v26 = v15;
            _os_log_debug_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "%s Found %@ given context ID %@", buf, 0x20u);
          }
          uint64_t v13 = *(void *)(a1 + 40);
          id v14 = [v8 deviceInfo];
          (*(void (**)(uint64_t, void *))(v13 + 16))(v13, v14);

          goto LABEL_15;
        }

        int v7 = (char *)v7 + 1;
      }
      while (v5 != v7);
      id v5 = [v3 countByEnumeratingWithState:&v17 objects:v27 count:16];
      if (v5) {
        continue;
      }
      break;
    }
  }

  uint64_t v11 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
  {
    id v16 = *(void **)(a1 + 32);
    *(_DWORD *)AudioBufferList buf = 136315650;
    CFStringRef v22 = "-[ADCommandCenter getOriginDeviceInfoForContextIdentifier:completion:]_block_invoke";
    __int16 v23 = 2112;
    int v24 = v16;
    __int16 v25 = 2112;
    id v26 = v3;
    _os_log_error_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "%s Unable to find context ID %@ in %@", buf, 0x20u);
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
LABEL_15:
}

void sub_1001BF398(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = [*(id *)(*(void *)(a1 + 40) + 328) currentRequestId];
  if ([v2 isEqualToString:v3]) {
    id v4 = 0;
  }
  else {
    id v4 = *(void **)(a1 + 32);
  }
  id v5 = v4;

  id v6 = [*(id *)(a1 + 40) _contextManager];
  [v6 getDeviceContextsForKeys:*(void *)(a1 + 48) forForeignRequestID:v5 includesNearbyDevices:*(unsigned __int8 *)(a1 + 64) completion:*(void *)(a1 + 56)];
}

void sub_1001BF4D4(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) _contextManager];
  uint64_t v6 = AFDeviceContextKeyAll;
  id v3 = +[NSArray arrayWithObjects:&v6 count:1];
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1001BF5E4;
  v4[3] = &unk_10050C2C8;
  id v5 = *(id *)(a1 + 40);
  [v2 getContextIncludingKeys:v3 excludingMandatoryKeys:0 timeOut:v4 completion:0.0];
}

uint64_t sub_1001BF5E4(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_1001BF694(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) _contextManager];
  [v2 getContextSnapshotForCurrentRequestWithCompletion:*(void *)(a1 + 40)];
}

id sub_1001BF75C(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_context_setAlertContextDirty");
}

id sub_1001BF828(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_context_setApplicationContextForApplicationInfos:withRefId:", *(void *)(a1 + 40), *(void *)(a1 + 48));
}

id sub_1001BF8FC(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_context_setOverriddenApplicationContext:withContext:", *(void *)(a1 + 40), *(void *)(a1 + 48));
}

id sub_1001BF9F0(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_context_fetchAppicationContextForApplicationInfo:supplementalContext:refID:", *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56));
}

id sub_1001BFA98(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_context_setApplicationContext:", *(void *)(a1 + 40));
}

id sub_1001BFB3C(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_context_willSetApplicationContextWithRefId:", *(void *)(a1 + 40));
}

id sub_1001BFBBC(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_context_rollbackClearContext");
}

id sub_1001BFC38(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _clearContextAndStartAssistantSession];
}

void sub_1001BFD64(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v5 = *(unsigned __int8 *)(a1 + 72);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_1001BFE2C;
  v6[3] = &unk_10050C890;
  id v8 = *(id *)(a1 + 64);
  id v7 = *(id *)(a1 + 56);
  [v2 _handleGenericAceCommand:v3 withDelegate:v4 interruptOutstandingRequest:v5 reply:v6];
}

void sub_1001BFE2C(uint64_t a1, char a2)
{
  uint64_t v3 = *(void **)(a1 + 40);
  if (v3)
  {
    uint64_t v5 = *(NSObject **)(a1 + 32);
    if (v5)
    {
      v7[0] = _NSConcreteStackBlock;
      v7[1] = 3221225472;
      void v7[2] = sub_1001BFEF8;
      v7[3] = &unk_10050CF50;
      id v8 = v3;
      char v9 = a2;
      dispatch_async(v5, v7);
    }
    else
    {
      uint64_t v6 = (void (*)(void))v3[2];
      v6();
    }
  }
}

uint64_t sub_1001BFEF8(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

void sub_1001BFFB0(uint64_t a1)
{
  id v2 = +[AFPreferences sharedPreferences];
  [v2 _suppressLowStorageNotificationForLanguage:*(void *)(a1 + 32) suppress:*(unsigned __int8 *)(a1 + 40)];
}

id sub_1001C01B4(uint64_t a1)
{
  return [*(id *)(a1 + 32) _updateVoiceCommandContextWithPrefixText:*(void *)(a1 + 40) postfixText:*(void *)(a1 + 48) selectedText:*(void *)(a1 + 56) disambiguationActive:*(void *)(a1 + 64) cursorInVisibleText:*(void *)(a1 + 72) favorCommandSuppression:*(void *)(a1 + 80) abortCommandSuppression:*(void *)(a1 + 88) undoEvent:*(void *)(a1 + 96)];
}

id sub_1001C02D4(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _resumeRecognitionWithPrefixText:*(void *)(a1 + 40) postfixText:*(void *)(a1 + 48) selectedText:*(void *)(a1 + 56)];
}

id sub_1001C0358(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _pauseRecognition];
}

id sub_1001C0424(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _sendSpeechCorrectionInfo:*(void *)(a1 + 40) interactionIdentifier:*(void *)(a1 + 48)];
}

id sub_1001C04F8(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _sendSpeechCorrectionInfo:*(void *)(a1 + 40) forCorrectionContext:*(void *)(a1 + 48)];
}

void sub_1001C05DC(uint64_t a1)
{
  id v2 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)AudioBufferList buf = 136315138;
    uint64_t v13 = "-[ADCommandCenter prepareForStartPlaybackWithDestination:intent:completion:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s ", buf, 0xCu);
  }
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void **)(v3 + 16);
  if (v4)
  {
    uint64_t v5 = *(void *)(a1 + 56);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_1001C0788;
    v9[3] = &unk_100506580;
    uint64_t v11 = v5;
    void v9[4] = v3;
    uint64_t v6 = *(void *)(a1 + 40);
    id v10 = *(id *)(a1 + 48);
    [v4 adRequestWillProcessStartPlayback:v5 intent:v6 completion:v9];
  }
  else
  {
    id v7 = AFSiriLogContextConnection;
    if (os_log_type_enabled(AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)AudioBufferList buf = 136315138;
      uint64_t v13 = "-[ADCommandCenter prepareForStartPlaybackWithDestination:intent:completion:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "%s No client, assuming success and returning immediately", buf, 0xCu);
    }
    uint64_t v8 = *(void *)(a1 + 48);
    if (v8) {
      (*(void (**)(uint64_t, uint64_t))(v8 + 16))(v8, 1);
    }
  }
}

void sub_1001C0788(uint64_t a1, int a2, int a3)
{
  uint64_t v6 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)AudioBufferList buf = 136315650;
    long long v20 = "-[ADCommandCenter prepareForStartPlaybackWithDestination:intent:completion:]_block_invoke";
    __int16 v21 = 1024;
    *(_DWORD *)CFStringRef v22 = a3;
    *(_WORD *)&void v22[4] = 1024;
    *(_DWORD *)&v22[6] = a2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "%s success = %d, shouldSuppress= %d", buf, 0x18u);
  }
  uint64_t v7 = *(void *)(a1 + 48);
  if (v7 != 1 || a3 == 0)
  {
    char v9 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      id v10 = "non-local playback destination";
      if (v7 == 1) {
        id v10 = "";
      }
      long long v20 = "-[ADCommandCenter prepareForStartPlaybackWithDestination:intent:completion:]_block_invoke_2";
      *(_DWORD *)AudioBufferList buf = 136315650;
      __int16 v21 = 2080;
      *(void *)CFStringRef v22 = v10;
      if (a2) {
        uint64_t v11 = "";
      }
      else {
        uint64_t v11 = "ADCommandCenterClient failure";
      }
      *(_WORD *)&v22[8] = 2080;
      __int16 v23 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "%s Not ending session because of %s %s", buf, 0x20u);
    }
    uint64_t v12 = *(void *)(a1 + 40);
    if (v12)
    {
      uint64_t v13 = *(void (**)(void))(v12 + 16);
LABEL_21:
      v13();
    }
  }
  else
  {
    if (a2)
    {
      id v14 = *(void **)(*(void *)(a1 + 32) + 112);
      v16[0] = _NSConcreteStackBlock;
      v16[1] = 3221225472;
      void v16[2] = sub_1001C09A4;
      v16[3] = &unk_10050CF50;
      id v17 = *(id *)(a1 + 40);
      char v18 = a3;
      [v14 suppressAudioInterruptionEndedNotificationsAndEndSessionIfIdle:v16];

      return;
    }
    uint64_t v15 = *(void *)(a1 + 40);
    if (v15)
    {
      uint64_t v13 = *(void (**)(void))(v15 + 16);
      goto LABEL_21;
    }
  }
}

uint64_t sub_1001C09A4(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, *(unsigned __int8 *)(a1 + 40));
  }
  return result;
}

uint64_t sub_1001C0A6C(void *a1)
{
  id v2 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v4 = 136315138;
    uint64_t v5 = "-[ADCommandCenter handleFailedStartPlaybackWithDestination:completion:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s ", (uint8_t *)&v4, 0xCu);
  }
  [*(id *)(a1[4] + 16) adRequestDidHandleFailedStartPlayback:a1[6]];
  uint64_t result = a1[5];
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

id sub_1001C0BB4(uint64_t a1)
{
  id v2 = (void *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = *(unsigned __int8 *)(a1 + 40);
    int v4 = v2;
    uint64_t v5 = +[NSNumber numberWithBool:v3];
    int v7 = 136315394;
    uint64_t v8 = "-[ADCommandCenter setSuppressAudioInterruptionEndedNotifications:]_block_invoke";
    __int16 v9 = 2112;
    id v10 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%s %@", (uint8_t *)&v7, 0x16u);
  }
  return [*(id *)(*(void *)(a1 + 32) + 112) setSuppressAudioInterruptionEndedNotifications:*(unsigned __int8 *)(a1 + 40)];
}

id sub_1001C0D78(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _updateSpeechOptions:*(void *)(a1 + 40) forDelegate:*(void *)(a1 + 48)];
}

id sub_1001C0E20(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _cancelSpeechForDelegate:*(void *)(a1 + 40)];
}

id sub_1001C0EF0(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _stopSpeechWithOptions:*(void *)(a1 + 40) forDelegate:*(void *)(a1 + 48)];
}

id sub_1001C0F98(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _removeDelegate:*(void *)(a1 + 40)];
}

id sub_1001C104C(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_metrics_sendEngagementFeedback:voiceQueryIdentifier:", *(void *)(a1 + 48), *(void *)(a1 + 40));
}

id sub_1001C119C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _startDictationWithURL:*(void *)(a1 + 40) isNarrowBand:*(unsigned __int8 *)(a1 + 80) language:*(void *)(a1 + 48) options:*(void *)(a1 + 56) sessionUUID:*(void *)(a1 + 64) delegate:*(void *)(a1 + 72)];
}

id sub_1001C1278(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _addRecordedSpeechSampleData:*(void *)(a1 + 40) delegate:*(void *)(a1 + 48)];
}

id sub_1001C13A0(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _startRecordedDictationWithLanguage:*(void *)(a1 + 40) options:*(void *)(a1 + 48) sessionUUID:*(void *)(a1 + 56) narrowband:*(unsigned __int8 *)(a1 + 72) delegate:*(void *)(a1 + 64)];
}

id sub_1001C14F0(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _startDictationWithLanguageCode:*(void *)(a1 + 40) options:*(void *)(a1 + 48) speechOptions:*(void *)(a1 + 56) sessionUUID:*(void *)(a1 + 64) delegate:*(void *)(a1 + 72)];
}

id sub_1001C1660(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _startRecordingForPendingDictationWithLanguageCode:*(void *)(a1 + 40) options:*(void *)(a1 + 48) speechOptions:*(void *)(a1 + 56) sessionUUID:*(void *)(a1 + 64) delegate:*(void *)(a1 + 72) completion:*(void *)(a1 + 80)];
}

id sub_1001C1710(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _rollbackRequestForDelegate:*(void *)(a1 + 40)];
}

id sub_1001C17E4(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _cancelRequestForDelegate:*(void *)(a1 + 40) reason:*(void *)(a1 + 56) error:*(void *)(a1 + 48)];
}

id sub_1001C18C0(uint64_t a1)
{
  return [*(id *)(a1 + 32) _startSpeechRequestWithURL:*(void *)(a1 + 40) isNarrowBand:*(unsigned __int8 *)(a1 + 56) withDelegate:*(void *)(a1 + 48) completion:0];
}

id sub_1001C19BC(uint64_t a1)
{
  return [*(id *)(a1 + 32) _startAcousticIDRequestWithDelegate:*(void *)(a1 + 40) withOptions:*(void *)(a1 + 48) context:*(void *)(a1 + 56)];
}

id sub_1001C1AB0(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _startSpeechPronunciationRequestWithDelegate:*(void *)(a1 + 40) withOptions:*(void *)(a1 + 48) pronunciationContext:*(void *)(a1 + 56)];
}

void sub_1001C1C7C(void *a1)
{
  id v1 = a1;
  if (AFIsInternalInstall())
  {
    if ([v1 activationEvent] == (id)1)
    {
      id v2 = +[NSProcessInfo processInfo];
      [v2 systemUptime];
      double v4 = v3;

      [v1 expectedActivationEventTime];
      double v6 = v5;
      [v1 activationEventTime];
      double v8 = v7;
      __int16 v9 = AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
      {
        int v10 = 136315650;
        uint64_t v11 = "_LogActivationDeltasForOptions";
        __int16 v12 = 2048;
        double v13 = v4 - v6;
        __int16 v14 = 2048;
        double v15 = v4 - v8;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "%s Current delta from expected activation: %lf activation: %lf", (uint8_t *)&v10, 0x20u);
      }
    }
  }
}

void sub_1001C1DAC(uint64_t a1)
{
  kdebug_trace();
  [*(id *)(a1 + 32) _startRecordingForPendingSpeechRequestForDelegate:*(void *)(a1 + 40) withOptions:*(void *)(a1 + 48) sessionUUID:*(void *)(a1 + 56) completion:*(void *)(a1 + 64)];
  int v2 = AFSupportsSCDAFramework();
  double v3 = (id *)SCDAMonitor_ptr;
  if (!v2) {
    double v3 = (id *)AFMyriadMonitor_ptr;
  }
  double v4 = [*v3 sharedMonitor];
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  void v5[2] = sub_1001C1E90;
  v5[3] = &unk_10050B918;
  void v5[4] = *(void *)(a1 + 32);
  [v4 waitForMyriadDecisionForReason:AFDeviceContextKeyMultiUserState withCompletion:v5];
}

void sub_1001C1E90(uint64_t a1)
{
  [*(id *)(*(void *)(a1 + 32) + 112) getSpeechRecorderVTSatScore:&stru_1005064E8];
  id v2 = [objc_alloc((Class)AFWatchdogTimer) initWithTimeoutInterval:*(void *)(*(void *)(a1 + 32) + 8) onQueue:&stru_100506508 timeoutHandler:1.7];
  [v2 start];
  uint64_t v3 = *(void *)(a1 + 32);
  double v4 = *(void **)(v3 + 760);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_1001C1F6C;
  v6[3] = &unk_100506530;
  void v6[4] = v3;
  id v7 = v2;
  id v5 = v2;
  [v4 getContextSnapshotForCurrentRequestWithCompletion:v6];
}

void sub_1001C1F6C(uint64_t a1, void *a2)
{
  id v3 = a2;
  double v4 = *(NSObject **)(*(void *)(a1 + 32) + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1001C202C;
  block[3] = &unk_10050DCB8;
  id v7 = *(id *)(a1 + 40);
  id v8 = v3;
  uint64_t v9 = *(void *)(a1 + 32);
  id v5 = v3;
  dispatch_async(v4, block);
}

void sub_1001C202C(uint64_t a1)
{
  if ([*(id *)(a1 + 32) cancelIfNotAlreadyCanceled])
  {
    uint64_t v26 = a1;
    id v2 = *(id *)(a1 + 40);
    id v3 = +[NSMutableDictionary dictionary];
    long long v31 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    id obj = v2;
    id v4 = [obj countByEnumeratingWithState:&v31 objects:v41 count:16];
    if (v4)
    {
      id v5 = v4;
      uint64_t v6 = *(void *)v32;
      uint64_t v27 = v3;
      do
      {
        id v7 = 0;
        do
        {
          if (*(void *)v32 != v6) {
            objc_enumerationMutation(obj);
          }
          id v8 = *(void **)(*((void *)&v31 + 1) + 8 * (void)v7);
          uint64_t v9 = objc_msgSend(v8, "content", v25);
          if (([v9 fromLocalDevice] & 1) == 0)
          {
            int v10 = [v9 multiUserStateSnapshot];
            uint64_t v11 = [v10 confidenceScores];
            __int16 v12 = [v10 vtSatScore];
            [v12 floatValue];
            float v14 = v13;

            if ([v11 count])
            {
              v29[0] = _NSConcreteStackBlock;
              v29[1] = 3221225472;
              v29[2] = sub_1002A83E8;
              v29[3] = &unk_100509B28;
              id v30 = v3;
              [v11 enumerateObjectsUsingBlock:v29];
              double v15 = v30;
              goto LABEL_15;
            }
            if (v14 != 0.0)
            {
              double v15 = sub_1002AB6EC(v8);
              if (v15)
              {
                id v16 = +[NSNumber numberWithInt:(int)(float)(v14 * 100.0)];
                id v17 = +[NSArray arrayWithObject:v16];
                [v27 setObject:v17 forKey:v15];
              }
              else
              {
                id v16 = AFSiriLogContextDaemon;
                if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
                {
                  char v18 = [v8 info];
                  long long v19 = v18;
                  if (!v18)
                  {
                    __int16 v25 = [v9 deviceInfo];
                    long long v19 = v25;
                  }
                  *(_DWORD *)AudioBufferList buf = 136315650;
                  uint64_t v36 = "ADMultiUserServiceDonatedScoresFromDeviceContextTuples";
                  __int16 v37 = 1024;
                  int v38 = (int)(float)(v14 * 100.0);
                  __int16 v39 = 2112;
                  dispatch_time_t v40 = v19;
                  _os_log_error_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "%s Dropped %d in donated scores from %@ because there's no Assistant identifier.", buf, 0x1Cu);
                  if (!v18) {
                }
                  }
              }

              id v3 = v27;
LABEL_15:
            }
          }

          id v7 = (char *)v7 + 1;
        }
        while (v5 != v7);
        id v20 = [obj countByEnumeratingWithState:&v31 objects:v41 count:16];
        id v5 = v20;
      }
      while (v20);
    }

    id v21 = [v3 copy];
    uint64_t v22 = *(void *)(v26 + 48);
    __int16 v23 = *(void **)(v22 + 680);
    *(void *)(v22 + 680) = v21;

    int v24 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t v41 = 136315394;
      long long v42 = "-[ADCommandCenter startRecordingForPendingSpeechRequestForDelegate:withOptions:sessionUUID:completion:]_block_invoke_2";
      __int16 v43 = 2112;
      unsigned int v44 = v3;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "%s Score donation received: %@", v41, 0x16u);
    }
  }
}

void sub_1001C2408(id a1)
{
  id v1 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
  {
    int v2 = 136315138;
    id v3 = "-[ADCommandCenter startRecordingForPendingSpeechRequestForDelegate:withOptions:sessionUUID:completion:]_block_invoke_4";
    _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "%s Timed out fetching multi user state context", (uint8_t *)&v2, 0xCu);
  }
}

void sub_1001C24B4(id a1, NSNumber *a2)
{
  if (a2)
  {
    int v2 = a2;
    id v3 = +[NSNotificationCenter defaultCenter];
    CFStringRef v5 = @"vtSatScore";
    uint64_t v6 = v2;
    id v4 = +[NSDictionary dictionaryWithObjects:&v6 forKeys:&v5 count:1];

    [v3 postNotificationName:@"ADMultiUserDidReceiveScoresNotification" object:v4];
  }
}

id sub_1001C26EC(void *a1)
{
  kdebug_trace();
  int v2 = (void *)a1[4];
  uint64_t v3 = a1[5];
  uint64_t v4 = a1[6];
  return _[v2 _startSpeechRequestWithDelegate:v3 withOptions:v4 sessionUUID:0];
}

id sub_1001C2808(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _handleRemoteSpeechRequest:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];
}

id sub_1001C28DC(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _handleExternalActivationRequest:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];
}

id sub_1001C29B0(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _startRequest:*(void *)(a1 + 40) withDelegate:*(void *)(a1 + 48)];
}

id sub_1001C2A58(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _endSessionForDelegate:*(void *)(a1 + 40)];
}

id sub_1001C2B28(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _setConfiguration:*(void *)(a1 + 40) forClient:*(void *)(a1 + 48)];
}

id sub_1001C2BD0(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _setModesConfiguration:*(void *)(a1 + 40)];
}

id sub_1001C2C54(uint64_t a1)
{
  return [*(id *)(a1 + 32) _setCarDNDRestriction:*(unsigned __int8 *)(a1 + 40)];
}

id sub_1001C2CDC(uint64_t a1)
{
  return [*(id *)(a1 + 32) _setWatchAuthenticated:*(unsigned __int8 *)(a1 + 40)];
}

id sub_1001C2D64(uint64_t a1)
{
  return [*(id *)(a1 + 32) _setHeadphonesAuthenticated:*(unsigned __int8 *)(a1 + 40)];
}

id sub_1001C2DF0(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _setLockState:*(unsigned __int8 *)(a1 + 40) showingLockScreen:*(unsigned __int8 *)(a1 + 41)];
}

void *sub_1001C3108(uint64_t a1)
{
  *(unsigned char *)(*(void *)(a1 + 32) + 616) = 1;
  objc_storeStrong((id *)(*(void *)(a1 + 32) + 624), *(id *)(a1 + 40));
  uint64_t result = *(void **)(a1 + 32);
  if (!result[2])
  {
    return _[result _processQueuedOutputVoice];
  }
  return result;
}

void *sub_1001C3478(uint64_t a1)
{
  *(unsigned char *)(*(void *)(a1 + 32) + 600) = 1;
  objc_storeStrong((id *)(*(void *)(a1 + 32) + 608), *(id *)(a1 + 40));
  *(unsigned char *)(*(void *)(a1 + 32) + 616) = 1;
  objc_storeStrong((id *)(*(void *)(a1 + 32) + 624), *(id *)(a1 + 48));
  uint64_t result = *(void **)(a1 + 32);
  if (!result[2])
  {
    return [result _processQueuedLanguageCodeAndOutputVoice];
  }
  return result;
}

void *sub_1001C37F0(uint64_t a1)
{
  *(unsigned char *)(*(void *)(a1 + 32) + 600) = 1;
  objc_storeStrong((id *)(*(void *)(a1 + 32) + 608), *(id *)(a1 + 40));
  uint64_t result = *(void **)(a1 + 32);
  if (!result[2])
  {
    return _[result _processQueuedLanguageCode];
  }
  return result;
}

void sub_1001C3914(uint64_t a1)
{
  id v1 = *(void **)(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1001C39B0;
  v3[3] = &unk_10050D058;
  id v4 = *(id *)(a1 + 48);
  [v1 _setLanguageCode:@"ADLanguageCodeKeepSame" outputVoice:v2 isDefaultValue:0 withCompletion:v3];
}

uint64_t sub_1001C39B0(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

id sub_1001C3A44(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _setLanguageCodeIfNeeded];
}

id sub_1001C3CB8(uint64_t a1)
{
  return [*(id *)(a1 + 32) _setLanguageCode:*(void *)(a1 + 40) outputVoice:*(void *)(a1 + 48) isDefaultValue:0 withCompletion:*(void *)(a1 + 56)];
}

void sub_1001C3F78(uint64_t a1)
{
  id v1 = *(void **)(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1001C4010;
  v3[3] = &unk_10050D058;
  id v4 = *(id *)(a1 + 48);
  [v1 _setLanguageCode:v2 outputVoice:0 isDefaultValue:0 withCompletion:v3];
}

uint64_t sub_1001C4010(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_1001C4130(uint64_t a1, void *a2)
{
  [a2 _setDictationIsEnabledLocal:*(unsigned __int8 *)(a1 + 32)];
  id v2 = +[NSNotificationCenter defaultCenter];
  [v2 postNotificationName:@"ADSharedDataDidChangeNotification" object:0];
}

void sub_1001C4190(void *a1)
{
  id v1 = a1;
  id v2 = +[AFPreferences sharedPreferences];
  unsigned int v3 = [v2 assistantIsEnabled];
  unsigned int v4 = [v2 dictationIsEnabled];
  v1[2](v1, v2);

  [v2 synchronize];
  unsigned int v5 = [v2 assistantIsEnabled];
  unsigned int v6 = [v2 dictationIsEnabled];
  id v7 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v25 = 136315650;
    uint64_t v26 = "ModifyActivenessPreferenceWithBlock";
    __int16 v27 = 1024;
    *(_DWORD *)__int16 v28 = v3;
    *(_WORD *)&v28[4] = 1024;
    *(_DWORD *)&v28[6] = v5;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "%s assistantIsEnabled: %d -> %d", (uint8_t *)&v25, 0x18u);
    id v7 = AFSiriLogContextDaemon;
  }
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    int v25 = 136315650;
    uint64_t v26 = "ModifyActivenessPreferenceWithBlock";
    __int16 v27 = 1024;
    *(_DWORD *)__int16 v28 = v4;
    *(_WORD *)&v28[4] = 1024;
    *(_DWORD *)&v28[6] = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "%s dictationIsEnabled: %d -> %d", (uint8_t *)&v25, 0x18u);
    id v7 = AFSiriLogContextDaemon;
  }
  int v8 = v3 ^ v5;
  int v9 = v4 ^ v6;
  BOOL v10 = os_log_type_enabled(v7, OS_LOG_TYPE_INFO);
  if ((v8 & 1) != 0 || v9)
  {
    if (v10)
    {
      int v25 = 136315394;
      uint64_t v26 = "ModifyActivenessPreferenceWithBlock";
      __int16 v27 = 2112;
      *(void *)__int16 v28 = @"ADPreferencesEnabledBitsDidChangeNotification";
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "%s Post (local) %@", (uint8_t *)&v25, 0x16u);
    }
    uint64_t v11 = +[NSNotificationCenter defaultCenter];
    [v11 postNotificationName:@"ADPreferencesEnabledBitsDidChangeNotification" object:0];

    if (v8)
    {
      __int16 v12 = AFSiriLogContextDaemon;
      BOOL v13 = os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO);
      CFStringRef v14 = (const __CFString *)AFAssistantEnablementDidChangeDarwinNotification;
      if (v13)
      {
        int v25 = 136315394;
        uint64_t v26 = "ModifyActivenessPreferenceWithBlock";
        __int16 v27 = 2112;
        *(void *)__int16 v28 = AFAssistantEnablementDidChangeDarwinNotification;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "%s Post (darwin) %@", (uint8_t *)&v25, 0x16u);
      }
      DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
      CFNotificationCenterPostNotification(DarwinNotifyCenter, v14, 0, 0, 1u);
    }
    if (v9)
    {
      id v16 = AFSiriLogContextDaemon;
      BOOL v17 = os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO);
      CFStringRef v18 = (const __CFString *)AFDictationEnablementDidChangeDarwinNotification;
      if (v17)
      {
        int v25 = 136315394;
        uint64_t v26 = "ModifyActivenessPreferenceWithBlock";
        __int16 v27 = 2112;
        *(void *)__int16 v28 = AFDictationEnablementDidChangeDarwinNotification;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "%s Post (darwin) %@", (uint8_t *)&v25, 0x16u);
      }
      long long v19 = CFNotificationCenterGetDarwinNotifyCenter();
      CFNotificationCenterPostNotification(v19, v18, 0, 0, 1u);
    }
  }
  else if (v10)
  {
    int v25 = 136315138;
    uint64_t v26 = "ModifyActivenessPreferenceWithBlock";
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "%s Skipped post local and darwin notifications because Siri and Dictation enablement states did not change.", (uint8_t *)&v25, 0xCu);
  }
  if (v5)
  {
    id v20 = +[ADCommandCenter sharedCommandCenter];
    [v20 sanityCheckAutodownloadedAssetsForced:1];

    id v21 = +[ADCommandCenter sharedCommandCenter];
    uint64_t v22 = [v2 languageCode];
    [v21 _downloadMorphunAssets:v22];

LABEL_25:
    goto LABEL_26;
  }
  if ((v6 & 1) == 0)
  {
    __int16 v23 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      int v25 = 136315138;
      uint64_t v26 = "ModifyActivenessPreferenceWithBlock";
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "%s Destroy active account because Siri and Dictation are both disabled.", (uint8_t *)&v25, 0xCu);
    }
    int v24 = +[ADCommandCenter sharedCommandCenter];
    [v24 destroyActiveAccount];

    id v21 = +[NSNotificationCenter defaultCenter];
    [v21 postNotificationName:@"AssistantAccountRemoved" object:0];
    goto LABEL_25;
  }
LABEL_26:
}

void sub_1001C4814(uint64_t a1, void *a2)
{
  [a2 _setAssistantIsEnabledLocal:*(unsigned __int8 *)(a1 + 32)];
  id v2 = +[ADCommandCenter sharedCommandCenter];
  [v2 setLanguageCodeIfNeeded];

  id v3 = +[NSNotificationCenter defaultCenter];
  [v3 postNotificationName:@"ADSharedDataDidChangeNotification" object:0];
}

void sub_1001C4A04(uint64_t a1)
{
  id v1 = *(void **)(a1 + 32);
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  v2[2] = sub_1001C4A9C;
  v2[3] = &unk_10050B720;
  id v3 = v1;
  +[MorphunAssets onDemandDownloadForLocale:v3 withProgress:0 withCompletion:v2];
}

void sub_1001C4A9C(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  unsigned int v6 = AFSiriLogContextConnection;
  BOOL v7 = os_log_type_enabled(AFSiriLogContextConnection, OS_LOG_TYPE_INFO);
  if (a2)
  {
    if (v7)
    {
      int v8 = *(void **)(a1 + 32);
      int v16 = 136315394;
      BOOL v17 = "-[ADCommandCenter _downloadMorphunAssets:]_block_invoke_2";
      __int16 v18 = 2112;
      long long v19 = v8;
      int v9 = "%s Morphun assets for %@ downloaded successfully!";
      BOOL v10 = v6;
      uint32_t v11 = 22;
LABEL_11:
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, v9, (uint8_t *)&v16, v11);
    }
  }
  else
  {
    if (v7)
    {
      __int16 v12 = *(void **)(a1 + 32);
      int v16 = 136315394;
      BOOL v17 = "-[ADCommandCenter _downloadMorphunAssets:]_block_invoke";
      __int16 v18 = 2112;
      long long v19 = v12;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "%s Morphun assets for %@ download failed.", (uint8_t *)&v16, 0x16u);
      unsigned int v6 = AFSiriLogContextConnection;
    }
    BOOL v13 = os_log_type_enabled(v6, OS_LOG_TYPE_INFO);
    if (v5)
    {
      if (v13)
      {
        CFStringRef v14 = v6;
        double v15 = [v5 localizedDescription];
        int v16 = 136315394;
        BOOL v17 = "-[ADCommandCenter _downloadMorphunAssets:]_block_invoke";
        __int16 v18 = 2112;
        long long v19 = v15;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "%s Morphun assets download failure reason: %@", (uint8_t *)&v16, 0x16u);
      }
    }
    else if (v13)
    {
      int v16 = 136315138;
      BOOL v17 = "-[ADCommandCenter _downloadMorphunAssets:]_block_invoke";
      int v9 = "%s Morphun assets download failed with a nil error.";
      BOOL v10 = v6;
      uint32_t v11 = 12;
      goto LABEL_11;
    }
  }
}

id sub_1001C4D38(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _forceAudioSessionInactiveWithOptions:*(void *)(a1 + 48) completion:*(void *)(a1 + 40)];
}

id sub_1001C4E0C(uint64_t a1)
{
  return [*(id *)(a1 + 32) _forceAudioSessionActiveWithContext:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];
}

void sub_1001C4EB4(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) _serviceManager];
  [v2 preheatServicesForDomain:*(void *)(a1 + 40)];
}

void sub_1001C5004(uint64_t a1)
{
  id v2 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    *(_DWORD *)AudioBufferList buf = 136315394;
    uint32_t v11 = "_ADPreheatSpeechManagerInBackgroundWithRecordDeviceIdentifier_block_invoke";
    __int16 v12 = 2112;
    uint64_t v13 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s %@", buf, 0x16u);
  }
  unsigned int v4 = +[ADSpeechManager sharedManager];
  if (*(void *)(a1 + 32))
  {
    id v5 = [objc_alloc((Class)AFSpeechRequestOptions) initWithActivationEvent:0];
    [v5 setRecordDeviceIdentifier:*(void *)(a1 + 32)];
  }
  else
  {
    id v5 = 0;
  }
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1001C51AC;
  v8[3] = &unk_100508698;
  id v9 = v5;
  id v6 = v5;
  id v7 = +[AFSetAudioSessionActiveContext newWithBuilder:v8];
  [v4 prepareAudioSystemWithContext:v7 completion:0];
}

id sub_1001C5198(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _preheatWithStyle:0 forOptions:0 completion:0];
}

void sub_1001C51AC(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 setReason:1];
  [v3 setSpeechRequestOptions:*(void *)(a1 + 32)];
}

id sub_1001C5448(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _preheatViaRequestDispatcher];
}

id sub_1001C5450(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _preheatWithStyle:*(void *)(a1 + 56) forOptions:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];
}

id sub_1001C55A8(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "_sync_continueIfConditionsMet");
  id v2 = *(void **)(a1 + 32);
  return [v2 _shutdownSessionWhenIdle];
}

void sub_1001C567C(uint64_t a1)
{
  id v2 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v4 = 136315138;
    id v5 = "-[ADCommandCenter startCloudKitSyncWeeklyForActivity:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s ", (uint8_t *)&v4, 0xCu);
  }
  id v3 = +[ADCloudKitManager sharedManager];
  [v3 forceMultiUserSync:1 download:1 activity:*(void *)(a1 + 32) completion:0];
}

id sub_1001C57EC(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_sync_setSyncDelegate:", *(void *)(a1 + 40));
}

id sub_1001C58C4(uint64_t a1)
{
  [*(id *)(a1 + 32) _startObservingCallState];
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(unsigned __int8 *)(a1 + 56);
  uint64_t v5 = *(void *)(a1 + 48);
  return objc_msgSend(v2, "_sync_syncAnchorKeys:forceReset:reasons:forSyncPromise:", v3, v4, v5, 0);
}

uint64_t sub_1001C5C34()
{
  return AFAnalyticsContextCreateWithSpeechRequestOptions();
}

void sub_1001C5C3C(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = [*(id *)(a1 + 40) currentToken];
  LODWORD(v2) = [v2 isEqual:v3];

  if (v2)
  {
    uint64_t v4 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      int v7 = 136315394;
      int v8 = "-[ADCommandCenter _handleRemoteSpeechRequest:completion:]_block_invoke_2";
      __int16 v9 = 2048;
      uint64_t v10 = 0x4014000000000000;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%s Failed to handle remote speech request in %lfs", (uint8_t *)&v7, 0x16u);
    }
    uint64_t v5 = [*(id *)(a1 + 40) completion];
    id v6 = (void *)v5;
    if (v5) {
      (*(void (**)(uint64_t, void))(v5 + 16))(v5, 0);
    }
    [*(id *)(a1 + 40) reset];
  }
}

uint64_t sub_1001C6328()
{
  return AFAnalyticsContextCreateWithRequestInfo();
}

void sub_1001C6330(uint64_t a1)
{
  uint64_t v5 = _NSConcreteStackBlock;
  uint64_t v6 = 3221225472;
  int v7 = sub_1001C6674;
  int v8 = &unk_100506440;
  id v9 = *(id *)(a1 + 32);
  id v10 = *(id *)(a1 + 40);
  id v2 = +[AFSiriActivationContext newWithBuilder:&v5];
  uint64_t v3 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)AudioBufferList buf = 136315394;
    __int16 v12 = "-[ADCommandCenter _handleExternalActivationRequest:completion:]_block_invoke_2";
    __int16 v13 = 2112;
    id v14 = v2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "%s context = %@", buf, 0x16u);
  }
  uint64_t v4 = +[AFSiriActivationConnection sharedConnection];
  [v4 activateWithRequestInfo:*(void *)(a1 + 40) context:v2 completion:&stru_100506460];
}

void sub_1001C64A4(uint64_t a1, void *a2)
{
  uint64_t v3 = [a2 actionIdentifier];
  unsigned int v4 = [v3 isEqualToString:UNNotificationDefaultActionIdentifier];

  if (v4)
  {
    uint64_t v5 = *(void (**)(void))(*(void *)(a1 + 32) + 16);
    v5();
  }
}

void sub_1001C6524(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = [*(id *)(a1 + 40) remoteRequestInfo];

  if (v2 == v3)
  {
    unsigned int v4 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      uint64_t v5 = *(void *)(a1 + 56);
      int v9 = 136315394;
      id v10 = "-[ADCommandCenter _handleExternalActivationRequest:completion:]_block_invoke_2";
      __int16 v11 = 2048;
      uint64_t v12 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%s Failed to handle remote request in %lfs", (uint8_t *)&v9, 0x16u);
    }
    uint64_t v6 = [*(id *)(a1 + 40) completion];
    int v7 = (void *)v6;
    if (v6) {
      (*(void (**)(uint64_t, void, void))(v6 + 16))(v6, 0, 0);
    }
    [*(id *)(a1 + 40) setRemoteRequestInfo:0];
    [*(id *)(a1 + 40) setCompletion:0];
  }
  if (*(void *)(a1 + 48))
  {
    int v8 = +[ADUserNotificationServiceProvider personalDomainNotificationProvider];
    [v8 withdrawNotificationRequestWithIdentifier:*(void *)(a1 + 48)];
  }
}

void sub_1001C6674(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void **)(a1 + 32);
  id v5 = a2;
  id v4 = [v3 activationEventMachAbsoluteTime];
  if (!v4)
  {
    id v4 = [*(id *)(a1 + 40) timestamp];
    if (!v4) {
      id v4 = (id)mach_absolute_time();
    }
  }
  [v5 setTimestamp:v4];
  [v5 setSource:11];
  [v5 setEvent:13];
}

void sub_1001C6704(id a1, AFSiriActivationResult *a2)
{
  id v2 = a2;
  uint64_t v3 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v4 = 136315394;
    id v5 = "-[ADCommandCenter _handleExternalActivationRequest:completion:]_block_invoke";
    __int16 v6 = 2112;
    int v7 = v2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "%s uint64_t result = %@", (uint8_t *)&v4, 0x16u);
  }
}

void sub_1001C6C2C(id a1)
{
  +[AFDictationSamplingUtilities deleteAllSamplingData];
  +[AFAssistantSamplingUtilities deleteAllSamplingData];
  +[SSRRPISampler deleteAllRPISampledData];
  id v1 = [objc_alloc((Class)CoreEmbeddedSpeechRecognizer) initWithDelegate:0 instanceUUID:&CoreEmbeddedSpeechRecognizerInstanceUUIDInteractive];
  [v1 deleteAllDESRecordsForDictationPersonalization];
  [v1 invalidate];
}

void sub_1001C6DE8(void *a1)
{
  id v1 = a1;
  id v2 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)AudioBufferList buf = 136315138;
    id v5 = "_AnalyticsSendOnDeviceDeletionEventWithError";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s #RPI sending event kCoreAnalyticsDeletionTelemetryKey", buf, 0xCu);
  }
  id v3 = v1;
  AnalyticsSendEventLazy();
}

id sub_1001C6F14(uint64_t a1)
{
  id v2 = +[NSMutableDictionary dictionary];
  id v3 = *(void **)(a1 + 32);
  if (v3)
  {
    int v4 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%ld", [v3 code]);
    [v2 setObject:v4 forKey:@"errorCode"];
  }
  id v5 = +[AFPreferences sharedPreferences];
  unsigned int v6 = [v5 assistantIsEnabled];

  if (v6)
  {
    int v7 = +[AFPreferences sharedPreferences];
    int v8 = [v7 languageCode];
    [v2 setObject:v8 forKey:@"siriInputLocale"];
  }
  int v9 = *(_DWORD *)(a1 + 40);
  CFStringRef v10 = @"DHTTRIGGEREVENT_UNKNOWN";
  if (v9 == 1) {
    CFStringRef v10 = @"DHTTRIGGEREVENT_DESTROY_ASSISTANT";
  }
  if (v9 == 2) {
    CFStringRef v11 = @"DHTTRIGGEREVENT_DELETE_ASSISTANT_HISTORY";
  }
  else {
    CFStringRef v11 = v10;
  }
  [v2 setObject:v11 forKey:@"trigger"];
  return v2;
}

void sub_1001C74A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,id location)
{
  objc_destroyWeak(&location);
  _Block_object_dispose((const void *)(v30 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_1001C74F8(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = AFSiriLogContextDaemon;
  if (v3)
  {
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      int v15 = 136315394;
      int v16 = "-[ADCommandCenter _deleteSiriHistoryWithContext:withCompletion:]_block_invoke";
      __int16 v17 = 2112;
      id v18 = v3;
      _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "%s Failed with error %@.", (uint8_t *)&v15, 0x16u);
    }
  }
  else if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v15 = 136315138;
    int v16 = "-[ADCommandCenter _deleteSiriHistoryWithContext:withCompletion:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%s Done", (uint8_t *)&v15, 0xCu);
  }
  unsigned int v5 = +[AFFeatureFlags isOnDeviceHistoryDeletionEnabled];
  unsigned int v6 = +[AFPreferences sharedPreferences];
  unsigned int v7 = [v6 longLivedIdentifierUploadingEnabled] ^ 1;

  int v8 = v5 & v7;
  if (v3 && v8)
  {
    int v9 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      int v15 = 136315138;
      int v16 = "-[ADCommandCenter _deleteSiriHistoryWithContext:withCompletion:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "%s #RPI Skip surfacing server side deletion error as UI alert.", (uint8_t *)&v15, 0xCu);
    }

    id v3 = 0;
  }
  if (AFIsNano() && *(void *)(a1 + 32))
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
    [WeakRetained _postWatchNotificationWithContext:*(void *)(a1 + 32) withError:v3];
  }
  CFStringRef v11 = *(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
  if (v11)
  {
    [v11 cancel];
    uint64_t v12 = *(void *)(*(void *)(a1 + 48) + 8);
    __int16 v13 = *(void **)(v12 + 40);
    *(void *)(v12 + 40) = 0;
  }
  uint64_t v14 = *(void *)(a1 + 40);
  if (v14) {
    (*(void (**)(uint64_t, id))(v14 + 16))(v14, v3);
  }
  if (v8) {
    sub_1001C6DE8(v3);
  }
}

void sub_1001C7730(uint64_t a1)
{
  id v1 = *(void **)(a1 + 32);
  id v2 = +[AFError errorWithCode:1 description:@"Client timed out because no server response was received in 20 seconds."];
  [v1 invokeWithValue:v2];
}

void sub_1001C7798(uint64_t a1)
{
  id v1 = *(void **)(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1001C782C;
  v3[3] = &unk_10050B308;
  id v4 = *(id *)(a1 + 48);
  [v1 _sendCommandToServer:v2 opportunistically:0 completion:v3];
}

void sub_1001C782C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  unsigned int v7 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v17 = 136315650;
    id v18 = "-[ADCommandCenter _deleteSiriHistoryWithContext:withCompletion:]_block_invoke_2";
    __int16 v19 = 2112;
    id v20 = v5;
    __int16 v21 = 2112;
    id v22 = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "%s response = %@, error = %@", (uint8_t *)&v17, 0x20u);
  }
  if (!v5)
  {
    CFStringRef v10 = *(void **)(a1 + 32);
    if (v6)
    {
      int v8 = v10;
      id v9 = v6;
      goto LABEL_8;
    }
    CFStringRef v15 = @"Server response is nil.";
LABEL_13:
    int v16 = +[AFError errorWithCode:8 description:v15];
    [v10 invokeWithValue:v16];

    goto LABEL_14;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    objc_opt_class();
    char isKindOfClass = objc_opt_isKindOfClass();
    CFStringRef v10 = *(void **)(a1 + 32);
    if (isKindOfClass)
    {
      uint64_t v12 = [v5 reason];
      __int16 v13 = objc_msgSend(v5, "ad_error");
      uint64_t v14 = +[AFError errorWithCode:2 description:v12 underlyingError:v13];
      [v10 invokeWithValue:v14];

      goto LABEL_14;
    }
    CFStringRef v15 = @"Server response is unexpected.";
    goto LABEL_13;
  }
  int v8 = *(void **)(a1 + 32);
  id v9 = 0;
LABEL_8:
  [v8 invokeWithValue:v9];
LABEL_14:
}

void sub_1001C7ECC(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  id v3 = AFSiriLogContextFides;
  if (v2)
  {
    if (os_log_type_enabled(AFSiriLogContextFides, OS_LOG_TYPE_ERROR))
    {
      int v4 = 136315394;
      id v5 = "-[ADCommandCenter _destroyActiveAccount]_block_invoke";
      __int16 v6 = 2114;
      unsigned int v7 = v2;
      _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "%s Error disabling fides: %{public}@", (uint8_t *)&v4, 0x16u);
    }
  }
  else if (os_log_type_enabled(AFSiriLogContextFides, OS_LOG_TYPE_INFO))
  {
    int v4 = 136315138;
    id v5 = "-[ADCommandCenter _destroyActiveAccount]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "%s Successfully disabled DES", (uint8_t *)&v4, 0xCu);
  }
}

void sub_1001C82F4(id a1)
{
}

void sub_1001C8650(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v7 = v5;
    __int16 v37 = [v7 refId];
    uint64_t v8 = objc_msgSend(*(id *)(*(void *)(a1 + 32) + 96), "sessionRequestIdForRefId:");
    id v9 = [*(id *)(a1 + 32) _resultObjectCache];
    int v38 = v7;
    uint64_t v36 = (void *)v8;
    [v9 addResultObjects:v7 sessionRequestId:v8];

    id v10 = objc_alloc_init((Class)NSMutableDictionary);
    long long v47 = 0u;
    long long v48 = 0u;
    long long v49 = 0u;
    long long v50 = 0u;
    id v11 = *(id *)(a1 + 40);
    id v12 = [v11 countByEnumeratingWithState:&v47 objects:v55 count:16];
    if (v12)
    {
      id v13 = v12;
      uint64_t v14 = *(void *)v48;
      do
      {
        for (i = 0; i != v13; i = (char *)i + 1)
        {
          if (*(void *)v48 != v14) {
            objc_enumerationMutation(v11);
          }
          int v16 = *(void **)(*((void *)&v47 + 1) + 8 * i);
          int v17 = [v16 aceId];
          if (v17) {
            [v10 setObject:v16 forKey:v17];
          }
        }
        id v13 = [v11 countByEnumeratingWithState:&v47 objects:v55 count:16];
      }
      while (v13);
    }

    long long v45 = 0u;
    long long v46 = 0u;
    long long v43 = 0u;
    long long v44 = 0u;
    id v18 = [v38 objects];
    id v19 = [v18 countByEnumeratingWithState:&v43 objects:v54 count:16];
    if (v19)
    {
      id v20 = v19;
      uint64_t v21 = *(void *)v44;
      do
      {
        for (j = 0; j != v20; j = (char *)j + 1)
        {
          if (*(void *)v44 != v21) {
            objc_enumerationMutation(v18);
          }
          __int16 v23 = *(void **)(*((void *)&v43 + 1) + 8 * (void)j);
          int v24 = [v23 aceId];
          if (v24) {
            [v10 setObject:v23 forKey:v24];
          }
        }
        id v20 = [v18 countByEnumeratingWithState:&v43 objects:v54 count:16];
      }
      while (v20);
    }

    id v25 = objc_alloc_init((Class)NSMutableArray);
    long long v39 = 0u;
    long long v40 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    id v26 = *(id *)(a1 + 48);
    id v27 = [v26 countByEnumeratingWithState:&v39 objects:v53 count:16];
    if (v27)
    {
      id v28 = v27;
      uint64_t v29 = *(void *)v40;
      do
      {
        for (k = 0; k != v28; k = (char *)k + 1)
        {
          if (*(void *)v40 != v29) {
            objc_enumerationMutation(v26);
          }
          long long v31 = [v10 objectForKey:*(void *)(*((void *)&v39 + 1) + 8 * (void)k)];
          if (v31) {
            [v25 addObject:v31];
          }
        }
        id v28 = [v26 countByEnumeratingWithState:&v39 objects:v53 count:16];
      }
      while (v28);
    }
  }
  else
  {
    long long v32 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioBufferList buf = 136315138;
      id v52 = "-[ADCommandCenter _getDeferredObjectsWithIdentifiers:completion:]_block_invoke";
      _os_log_error_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_ERROR, "%s Failed getting deferred objects", buf, 0xCu);
    }
    id v25 = *(id *)(a1 + 40);
  }
  id v33 = [*(id *)(a1 + 48) count];
  if (v33 != [v25 count])
  {
    uint64_t v34 = +[AFError errorWithCode:900 description:0 underlyingError:v6];

    id v6 = (id)v34;
  }
  uint64_t v35 = *(void *)(a1 + 56);
  if (v35) {
    (*(void (**)(uint64_t, id, id))(v35 + 16))(v35, v25, v6);
  }
}

void sub_1001C8BA8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (*(void *)(a1 + 32))
  {
    id v7 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      int v11 = 136315138;
      id v12 = "-[ADCommandCenter _fetchSupportedLanguagesWithCompletion:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "%s Sending fetch supported languages completion", (uint8_t *)&v11, 0xCu);
    }
    objc_opt_class();
    char isKindOfClass = objc_opt_isKindOfClass();
    uint64_t v9 = *(void *)(a1 + 32);
    if (isKindOfClass)
    {
      id v10 = [v5 locales];
      (*(void (**)(uint64_t, void *, void))(v9 + 16))(v9, v10, 0);
LABEL_9:

      goto LABEL_10;
    }
    if (!v6)
    {
      id v10 = +[AFError errorWithCode:8];
      (*(void (**)(uint64_t, void, void *))(v9 + 16))(v9, 0, v10);
      goto LABEL_9;
    }
    (*(void (**)(uint64_t, void, id))(v9 + 16))(v9, 0, v6);
  }
LABEL_10:
}

void sub_1001C8F44(uint64_t a1)
{
  id v1 = [*(id *)(*(void *)(a1 + 32) + 120) allServices];
  [v1 makeObjectsPerformSelector:"clearDomainObjects"];
}

void sub_1001C90D4(uint64_t a1)
{
  id v1 = [*(id *)(*(void *)(a1 + 32) + 120) allServices];
  [v1 makeObjectsPerformSelector:"clearDomainObjects"];
}

id sub_1001C9B8C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _emitDeviceDynamicContextForRequest:*(void *)(a1 + 40) withTimestamp:*(void *)(a1 + 48)];
}

void sub_1001C9DA0(uint64_t a1)
{
  uint64_t v92 = 0;
  id v93 = &v92;
  uint64_t v94 = 0x3032000000;
  id v95 = sub_1001BE52C;
  uint64_t v96 = sub_1001BE53C;
  id v97 = 0;
  objc_opt_class();
  char isKindOfClass = objc_opt_isKindOfClass();
  id v3 = *(void **)(a1 + 32);
  if (isKindOfClass)
  {
    uint64_t v4 = [v3 commands];
  }
  else
  {
    if (!v3)
    {
      id v5 = 0;
      goto LABEL_6;
    }
    uint64_t v105 = *(void *)(a1 + 32);
    uint64_t v4 = +[NSArray arrayWithObjects:&v105 count:1];
  }
  id v5 = (void *)v4;
LABEL_6:
  if (*(void *)(a1 + 40))
  {
    if (AFIsInternalInstall())
    {
      id v6 = +[NSDate date];
      [v6 timeIntervalSinceDate:*(void *)(a1 + 40)];
      double v8 = v7;

      int v9 = (int)(v8 / 60.0);
      if (v9 >= 6)
      {
        id v10 = @"greater_than_15_min";
        if (v9 < 0xF) {
          id v10 = @"less_than_15_min";
        }
        int v11 = v10;
        id v12 = AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
        {
          long long v60 = *(void **)(a1 + 32);
          *(_DWORD *)AudioBufferList buf = 136315650;
          id v99 = "-[ADCommandCenter _handleAceCommand:afterCurrentRequest:waitForResponse:withDelegate:completion:]_block_invoke";
          __int16 v100 = 2112;
          id v101 = v60;
          __int16 v102 = 1024;
          LODWORD(v103) = (int)(v8 / 60.0);
          _os_log_error_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "%s Commands %@ weren't ran for %d minutes", buf, 0x1Cu);
        }
        id v13 = +[SiriCoreSymptomsReporter sharedInstance];
        uint64_t v14 = +[NSProcessInfo processInfo];
        id v15 = [v14 processIdentifier];
        [v13 reportIssueForType:@"command_stuck_in_group" subType:v11 context:0 processIdentifier:v15 walkboutStatus:byte_100585E38];
      }
    }
  }
  int v16 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v17 = *(unsigned __int8 *)(a1 + 72);
    *(_DWORD *)AudioBufferList buf = 136315650;
    id v99 = "-[ADCommandCenter _handleAceCommand:afterCurrentRequest:waitForResponse:withDelegate:completion:]_block_invoke";
    __int16 v100 = 2112;
    id v101 = v5;
    __int16 v102 = 1024;
    LODWORD(v103) = v17;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "%s Performing commands %@ after request %d", buf, 0x1Cu);
  }
  id v18 = dispatch_group_create();
  long long v88 = 0u;
  long long v89 = 0u;
  long long v90 = 0u;
  long long v91 = 0u;
  id obj = v5;
  id v19 = [obj countByEnumeratingWithState:&v88 objects:v104 count:16];
  if (v19)
  {
    uint64_t v62 = *(void *)v89;
    do
    {
      for (i = 0; i != v19; i = (char *)i + 1)
      {
        if (*(void *)v89 != v62) {
          objc_enumerationMutation(obj);
        }
        uint64_t v21 = *(void **)(*((void *)&v88 + 1) + 8 * i);
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          dispatch_group_enter(v18);
          id v22 = [[ADUIService alloc] initWithRequestDelegate:*(void *)(a1 + 48)];
          __int16 v23 = [*(id *)(a1 + 56) _serviceManager];
          [v23 addService:v22];
          int v24 = [v21 aceId];
          BOOL v25 = v24 == 0;

          if (v25)
          {
            id v26 = SiriCoreUUIDStringCreate();
            [v21 setAceId:v26];
          }
          id v27 = *(void **)(a1 + 56);
          id v28 = [v21 aceId];
          [v27 _setFirstChanceService:v22 forAceId:v28];

          uint64_t v30 = *(void *)(a1 + 48);
          uint64_t v29 = *(void **)(a1 + 56);
          v83[0] = _NSConcreteStackBlock;
          v83[1] = 3221225472;
          v83[2] = sub_1001CA820;
          v83[3] = &unk_100506318;
          id v31 = v23;
          id v84 = v31;
          long long v32 = v22;
          id v85 = v32;
          id v87 = &v92;
          UInt32 v86 = v18;
          [v29 _startNonSpeechRequest:v21 forDelegate:v30 withInfo:0 options:0 suppressAlert:0 completion:v83];
          if (!*(unsigned char *)(a1 + 73))
          {
            id v33 = AFSiriLogContextDaemon;
            if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)AudioBufferList buf = 136315138;
              id v99 = "-[ADCommandCenter _handleAceCommand:afterCurrentRequest:waitForResponse:withDelegate:completion:]_block_invoke_2";
              _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_INFO, "%s Ignoring early return flag for non interrupting request", buf, 0xCu);
            }
          }
        }
        else
        {
          unsigned int v34 = [*(id *)(a1 + 56) _isServerBoundCommand:*(void *)(a1 + 32)];
          uint64_t v35 = *(void **)(a1 + 56);
          if (v34)
          {
            uint64_t v36 = [v35 _sessionManager];
            id v37 = [objc_alloc((Class)NSString) initWithFormat:@"Executing one-off server-bound command %@ from client %@.", *(void *)(a1 + 32), *(void *)(a1 + 48)];
            int v38 = [v36 acquireAssertionForReason:v37];

            long long v39 = [*(id *)(a1 + 32) refId];
            LODWORD(v37) = v39 == 0;

            if (v37)
            {
              long long v40 = sub_1001CA890(*(void **)(a1 + 32));
              long long v46 = AFSiriLogContextDaemon;
              if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
              {
                uint64_t v47 = *(void *)(a1 + 32);
                *(_DWORD *)AudioBufferList buf = 136315650;
                id v99 = "-[ADCommandCenter _handleAceCommand:afterCurrentRequest:waitForResponse:withDelegate:completion:]_block_invoke";
                __int16 v100 = 2112;
                id v101 = v40;
                __int16 v102 = 2112;
                uint64_t v103 = v47;
                _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_INFO, "%s Create a transient root execution context %@ for locally submitted server-bound command %@.", buf, 0x20u);
              }
              [*(id *)(a1 + 56) _createRootExecutionContextForRequestID:v40];
            }
            else
            {
              long long v40 = 0;
            }
            dispatch_group_enter(v18);
            id v48 = objc_alloc((Class)AFSafetyBlock);
            v76[0] = _NSConcreteStackBlock;
            v76[1] = 3221225472;
            v76[2] = sub_1001CA8F4;
            v76[3] = &unk_100506340;
            uint64_t v77 = v18;
            id v49 = v40;
            id v78 = v49;
            id v50 = *(id *)(a1 + 32);
            uint64_t v51 = *(void *)(a1 + 56);
            id v79 = v50;
            uint64_t v80 = v51;
            long long v32 = v36;
            long long v81 = v32;
            id v52 = v38;
            id v82 = v52;
            id v53 = [v48 initWithBlock:v76];
            id v54 = *(void **)(a1 + 56);
            if (*(unsigned char *)(a1 + 73))
            {
              v72[0] = _NSConcreteStackBlock;
              v72[1] = 3221225472;
              v72[2] = sub_1001CAA00;
              v72[3] = &unk_100506368;
              id v55 = *(id *)(a1 + 48);
              SInt64 v75 = &v92;
              uint64_t v56 = *(void *)(a1 + 56);
              v73[0] = v55;
              v73[1] = v56;
              id v74 = v53;
              [v54 _sendCommandToServer:v21 opportunistically:0 completion:v72];

              id v57 = (id *)v73;
            }
            else
            {
              [*(id *)(a1 + 56) _sendCommandToServer:v21 opportunistically:0];
              char v58 = [*(id *)(a1 + 56) _sessionManager];
              v70[0] = _NSConcreteStackBlock;
              v70[1] = 3221225472;
              v70[2] = sub_1001CAB24;
              v70[3] = &unk_100509230;
              v71[1] = &v92;
              v71[0] = v53;
              [v58 barrier:v70];

              id v57 = (id *)v71;
            }
          }
          else if ([v35 _isClientBoundCommand:*(void *)(a1 + 32)])
          {
            dispatch_group_enter(v18);
            long long v32 = (ADUIService *)*(id *)(a1 + 32);
            [*(id *)(a1 + 56) _preheatCallbacksForCommand:v32];
            long long v41 = *(void **)(a1 + 56);
            long long v42 = [*(id *)(a1 + 32) refId];
            long long v43 = [v41 _rootExecutionContextForRequestID:v42];

            v66[0] = _NSConcreteStackBlock;
            v66[1] = 3221225472;
            v66[2] = sub_1001CAB84;
            v66[3] = &unk_100506390;
            long long v44 = *(void **)(a1 + 56);
            id v67 = *(id *)(a1 + 48);
            uint64_t v69 = &v92;
            char v68 = v18;
            [v44 _handleServiceCommand:v32 executionContext:v43 completion:v66];
          }
          else
          {
            if (v93[5]) {
              continue;
            }
            uint64_t v45 = +[AFError errorWithCode:500];
            long long v32 = (ADUIService *)v93[5];
            v93[5] = v45;
          }
        }
      }
      id v19 = [obj countByEnumeratingWithState:&v88 objects:v104 count:16];
    }
    while (v19);
  }

  char v59 = *(NSObject **)(*(void *)(a1 + 56) + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1001CAC08;
  block[3] = &unk_10050CA58;
  id v64 = *(id *)(a1 + 64);
  uint64_t v65 = &v92;
  dispatch_group_notify(v18, v59, block);

  _Block_object_dispose(&v92, 8);
}

void sub_1001CA7CC(_Unwind_Exception *a1)
{
}

void sub_1001CA820(uint64_t a1, uint64_t a2, void *a3)
{
  id v8 = a3;
  [*(id *)(a1 + 32) removeService:*(void *)(a1 + 40)];
  uint64_t v5 = *(void *)(*(void *)(a1 + 56) + 8);
  uint64_t v7 = *(void *)(v5 + 40);
  id v6 = (id *)(v5 + 40);
  if (!v7) {
    objc_storeStrong(v6, a3);
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
}

id sub_1001CA890(void *a1)
{
  id v1 = a1;
  uint64_t v2 = [v1 aceId];
  if (!v2)
  {
    uint64_t v2 = SiriCoreUUIDStringCreate();
    [v1 setAceId:v2];
  }

  return v2;
}

id sub_1001CA8F4(uint64_t a1)
{
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2)
  {
    id v3 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      uint64_t v4 = *(void *)(a1 + 48);
      int v6 = 136315650;
      uint64_t v7 = "-[ADCommandCenter _handleAceCommand:afterCurrentRequest:waitForResponse:withDelegate:completion:]_block_invoke";
      __int16 v8 = 2112;
      uint64_t v9 = v2;
      __int16 v10 = 2112;
      uint64_t v11 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "%s Destroy the transient root execution context %@ for locally submitted server-bound command %@.", (uint8_t *)&v6, 0x20u);
      uint64_t v2 = *(void *)(a1 + 40);
    }
    [*(id *)(a1 + 56) _removeHandledCommandIdsForRequestId:v2];
    [*(id *)(a1 + 56) _removePostCommandHandlingBlocksForRequestId:*(void *)(a1 + 40)];
    [*(id *)(a1 + 56) _destroyRootExecutionContextForRequestID:*(void *)(a1 + 40)];
  }
  return [*(id *)(a1 + 64) relinquishAssertion:*(void *)(a1 + 72)];
}

void sub_1001CAA00(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  [*(id *)(a1 + 32) adRequestDidReceiveCommand:v5 reply:0];
  uint64_t v7 = *(void *)(*(void *)(a1 + 56) + 8);
  uint64_t v9 = *(void *)(v7 + 40);
  __int16 v8 = (id *)(v7 + 40);
  if (!v9)
  {
    objc_storeStrong(v8, a3);
    if (v5) {
      goto LABEL_3;
    }
LABEL_5:
    [*(id *)(a1 + 48) invoke];
    goto LABEL_6;
  }
  if (!v5) {
    goto LABEL_5;
  }
LABEL_3:
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  _OWORD v13[2] = sub_1001CAC38;
  v13[3] = &unk_10050E138;
  __int16 v10 = *(void **)(a1 + 40);
  id v14 = *(id *)(a1 + 48);
  uint64_t v11 = [v5 aceId];
  id v12 = [v5 refId];
  [v10 _addPostCommandHandlingBlock:v13 forCommandId:v11 requestId:v12];

LABEL_6:
}

id sub_1001CAB24(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0)
  {
    uint64_t v3 = +[AFError errorWithCode:17];
    uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8);
    id v5 = *(void **)(v4 + 40);
    *(void *)(v4 + 40) = v3;
  }
  id v6 = *(void **)(a1 + 32);
  return [v6 invoke];
}

void sub_1001CAB84(uint64_t a1, uint64_t a2, void *a3)
{
  id v9 = a3;
  [*(id *)(a1 + 32) adRequestDidReceiveCommand:a2 reply:0];
  uint64_t v6 = *(void *)(*(void *)(a1 + 48) + 8);
  uint64_t v8 = *(void *)(v6 + 40);
  uint64_t v7 = (id *)(v6 + 40);
  if (!v8) {
    objc_storeStrong(v7, a3);
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

uint64_t sub_1001CAC08(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, BOOL))(result + 16))(result, *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) == 0);
  }
  return result;
}

id sub_1001CAC38(uint64_t a1)
{
  return [*(id *)(a1 + 32) invoke];
}

void sub_1001CB290(id *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if ([a1[4] _isClientBoundCommand:v5])
  {
    id v7 = a1[4];
    id v8 = v5;
    [v7 _preheatCallbacksForCommand:v8];
    id v9 = a1[4];
    __int16 v10 = [a1[5] refId];
    uint64_t v11 = [v9 _rootExecutionContextForRequestID:v10];

    id v12 = a1[4];
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    _OWORD v13[2] = sub_1001CB3BC;
    v13[3] = &unk_100505BB0;
    id v14 = v6;
    id v15 = a1[6];
    [v12 _handleServiceCommand:v8 executionContext:v11 completion:v13];
  }
}

id *sub_1001CB3BC(id *result)
{
  if (result[4]) {
    return (id *)objc_msgSend(result[5], "adRequestEncounteredIntermediateError:");
  }
  return result;
}

void sub_1001CBDA8(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) _speechManager];
  id v6 = [v2 context];

  if (v6)
  {
    uint64_t v3 = [*(id *)(*(void *)(a1 + 32) + 328) currentRequestId];
    uint64_t v4 = [v6 aceId];
    unsigned int v5 = [v3 isEqualToString:v4];

    if (v5) {
      [*(id *)(a1 + 32) _sendWillStopRecordingForCommand:v6];
    }
  }
}

void sub_1001CC1BC(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  [WeakRetained _updateSpeechOptions:*(void *)(a1 + 32) forDelegate:*(void *)(a1 + 40) allowUpdateInSpeechCompletion:0];
}

void sub_1001CC220(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) _speechManager];
  uint64_t v3 = [v2 context];
  uint64_t v4 = [v3 aceId];

  unsigned int v5 = [*(id *)(*(void *)(a1 + 32) + 328) currentRequestId];
  if ([v4 isEqualToString:v5])
  {
    [*(id *)(a1 + 32) _sendEnableServerEndpointerCommandWithRefID:v4];
  }
  else
  {
    id v6 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      int v7 = 136315650;
      id v8 = "-[ADCommandCenter _updateSpeechOptions:forDelegate:allowUpdateInSpeechCompletion:]_block_invoke";
      __int16 v9 = 2112;
      __int16 v10 = v5;
      __int16 v11 = 2112;
      id v12 = v4;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "%s Skipped enable server endpointer command because (_currentRequest.aceId = %@) and (_speechManager.context.aceId = %@) mismatched.", (uint8_t *)&v7, 0x20u);
    }
  }
}

void sub_1001CC8AC(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "_requestWillStartWithInfo:showNetworkActivityIndicator:", 0, objc_msgSend(*(id *)(a1 + 40), "secureOfflineOnly") ^ 1);
  uint64_t v2 = [*(id *)(a1 + 32) _speechManager];
  [v2 setInitialDictationLanguage:*(void *)(a1 + 48)];
  [v2 setPrimaryDictationLanguage:*(void *)(a1 + 48)];
  if (*(void *)(a1 + 48))
  {
    uint64_t v4 = *(void *)(a1 + 48);
    uint64_t v3 = +[NSArray arrayWithObjects:&v4 count:1];
    [v2 setDictationLanguages:v3];
  }
  else
  {
    [v2 setDictationLanguages:0];
  }
  [v2 setDictationOptions:*(void *)(a1 + 40)];
  [v2 startSpeechCaptureWithURL:*(void *)(a1 + 56) isNarrowBand:*(unsigned __int8 *)(a1 + 72) isDictation:1 sessionUUID:*(void *)(a1 + 64)];
}

void sub_1001CCC74(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "_requestWillStartWithInfo:showNetworkActivityIndicator:", 0, objc_msgSend(*(id *)(a1 + 40), "secureOfflineOnly") ^ 1);
  uint64_t v2 = [*(id *)(a1 + 32) _speechManager];
  [v2 setInitialDictationLanguage:*(void *)(a1 + 48)];
  [v2 setPrimaryDictationLanguage:*(void *)(a1 + 48)];
  if (*(void *)(a1 + 48))
  {
    uint64_t v4 = *(void *)(a1 + 48);
    uint64_t v3 = +[NSArray arrayWithObjects:&v4 count:1];
    [v2 setDictationLanguages:v3];
  }
  else
  {
    [v2 setDictationLanguages:0];
  }
  [v2 setDictationOptions:*(void *)(a1 + 40)];
  objc_msgSend(v2, "startRecordedDictationCaptureWithSessionUUID:narrowband:secureOfflineOnly:", *(void *)(a1 + 56), *(unsigned __int8 *)(a1 + 64), objc_msgSend(*(id *)(a1 + 40), "secureOfflineOnly"));
}

void sub_1001CD154(uint64_t a1)
{
  uint64_t v2 = *(id *)(*(void *)(a1 + 32) + 400);
  uint64_t v3 = v2;
  if (*(void *)(a1 + 56)) {
    BOOL v4 = v2 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    unsigned int v5 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v9 = *(void *)(a1 + 40);
      *(_DWORD *)AudioBufferList buf = 136315650;
      int v17 = "-[ADCommandCenter _startRecordingForPendingDictationWithLanguageCode:options:speechOptions:sessionUUID:deleg"
            "ate:completion:]_block_invoke";
      __int16 v18 = 2112;
      id v19 = v3;
      __int16 v20 = 2112;
      uint64_t v21 = v9;
      _os_log_debug_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "%s Entering speech group %@ (%@)...", buf, 0x20u);
    }
    dispatch_group_enter(v3);
    uint64_t v6 = *(void *)(a1 + 56);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_1001CD2F0;
    v10[3] = &unk_100506278;
    id v7 = *(id *)(a1 + 40);
    char v15 = *(unsigned char *)(a1 + 64);
    uint64_t v8 = *(void *)(a1 + 32);
    id v11 = v7;
    uint64_t v12 = v8;
    id v13 = v3;
    id v14 = *(id *)(a1 + 48);
    (*(void (**)(uint64_t, void *))(v6 + 16))(v6, v10);
  }
}

void sub_1001CD2F0(uint64_t a1, double a2)
{
  BOOL v4 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v12 = *(void *)(a1 + 32);
    *(_DWORD *)AudioBufferList buf = 136315650;
    id v22 = "-[ADCommandCenter _startRecordingForPendingDictationWithLanguageCode:options:speechOptions:sessionUUID:delegat"
          "e:completion:]_block_invoke";
    __int16 v23 = 2048;
    double v24 = a2;
    __int16 v25 = 2112;
    uint64_t v26 = v12;
    _os_log_debug_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "%s Continue pending recording at %f (%@)...", buf, 0x20u);
  }
  unsigned int v5 = +[AFAnalytics sharedAnalytics];
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 3221225472;
  v19[2] = sub_1001CD5F4;
  v19[3] = &unk_100506250;
  *(double *)&void v19[4] = a2;
  char v20 = *(unsigned char *)(a1 + 64);
  [v5 logEventWithType:307 contextProvider:v19];

  *(double *)(*(void *)(a1 + 40) + 40_Block_object_dispose(&STACK[0x220], 8) = a2;
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v6 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)AudioBufferList buf = 136315138;
      id v22 = "-[ADCommandCenter _startRecordingForPendingDictationWithLanguageCode:options:speechOptions:sessionUUID:deleg"
            "ate:completion:]_block_invoke_2";
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "%s Asking to play recording start alert on prelistening continue", buf, 0xCu);
    }
    uint64_t v7 = *(void *)(a1 + 40);
    uint64_t v8 = *(NSObject **)(v7 + 8);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1001CD6D4;
    block[3] = &unk_10050E138;
    void block[4] = v7;
    dispatch_async(v8, block);
  }
  uint64_t v9 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    double v13 = *(double *)(a1 + 48);
    uint64_t v14 = *(void *)(a1 + 32);
    *(_DWORD *)AudioBufferList buf = 136315650;
    id v22 = "-[ADCommandCenter _startRecordingForPendingDictationWithLanguageCode:options:speechOptions:sessionUUID:delegat"
          "e:completion:]_block_invoke_2";
    __int16 v23 = 2112;
    double v24 = v13;
    __int16 v25 = 2112;
    uint64_t v26 = v14;
    _os_log_debug_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "%s Leaving speech group %@ (%@)...", buf, 0x20u);
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
  __int16 v10 = *(NSObject **)(a1 + 48);
  id v11 = *(NSObject **)(*(void *)(a1 + 40) + 8);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  void v15[2] = sub_1001CD6E0;
  v15[3] = &unk_10050E160;
  id v16 = *(id *)(a1 + 56);
  id v17 = *(id *)(a1 + 32);
  dispatch_group_notify(v10, v11, v15);
}

id sub_1001CD5F4(uint64_t a1)
{
  v6[0] = @"timestamp";
  uint64_t v2 = +[NSNumber numberWithDouble:*(double *)(a1 + 32)];
  v6[1] = @"prelistening";
  v7[0] = v2;
  uint64_t v3 = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 40)];
  v7[1] = v3;
  BOOL v4 = +[NSDictionary dictionaryWithObjects:v7 forKeys:v6 count:2];

  return v4;
}

id sub_1001CD6D4(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 112) playRecordingStartAlert];
}

void sub_1001CD6E0(uint64_t a1)
{
  uint64_t v2 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 40);
    int v5 = 136315650;
    uint64_t v6 = "-[ADCommandCenter _startRecordingForPendingDictationWithLanguageCode:options:speechOptions:sessionUUID:delegate"
         ":completion:]_block_invoke";
    __int16 v7 = 2112;
    uint64_t v8 = v3;
    __int16 v9 = 2112;
    uint64_t v10 = v4;
    _os_log_debug_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s Leaving request group %@ (%@)...", (uint8_t *)&v5, 0x20u);
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_1001CDC3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  _Block_object_dispose(&a36, 8);
  _Block_object_dispose((const void *)(v36 - 232), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1001CDC68()
{
  return AFAnalyticsContextCreateWithSpeechRequestOptions();
}

void sub_1001CDC70(uint64_t a1)
{
  uint64_t v2 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    int v3 = 136315138;
    uint64_t v4 = "-[ADCommandCenter _startDictationWithLanguageCode:options:speechOptions:sessionUUID:delegate:completion:]_block_invoke";
    _os_log_debug_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s Leaving _replaceSpeechDelegateWhenReady group", (uint8_t *)&v3, 0xCu);
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_1001CDD28(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  __int16 v7 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    int v14 = 136315138;
    char v15 = "-[ADCommandCenter _startDictationWithLanguageCode:options:speechOptions:sessionUUID:delegate:completion:]_block_invoke";
    _os_log_debug_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "%s Leaving _getDictationLanguages group", (uint8_t *)&v14, 0xCu);
  }
  uint64_t v8 = *(void *)(*(void *)(a1 + 40) + 8);
  __int16 v9 = *(void **)(v8 + 40);
  *(void *)(v8 + 40) = v5;
  id v10 = v5;

  uint64_t v11 = *(void *)(*(void *)(a1 + 48) + 8);
  uint64_t v12 = *(void **)(v11 + 40);
  *(void *)(v11 + 40) = v6;
  id v13 = v6;

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_1001CDE3C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (!*(void *)(v2 + 24))
  {
    int v3 = *(void **)(v2 + 40);
    if (v3 == *(void **)(a1 + 40) && ([v3 adSpeechSessionEnded] & 1) == 0)
    {
      id v5 = AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
      {
        uint64_t v6 = *(void *)(a1 + 48);
        uint64_t v7 = *(void *)(*(void *)(*(void *)(a1 + 88) + 8) + 40);
        uint64_t v8 = *(void *)(*(void *)(*(void *)(a1 + 96) + 8) + 40);
        int v32 = 136315906;
        id v33 = "-[ADCommandCenter _startDictationWithLanguageCode:options:speechOptions:sessionUUID:delegate:completion:]_block_invoke";
        __int16 v34 = 2112;
        uint64_t v35 = v6;
        __int16 v36 = 2112;
        uint64_t v37 = v7;
        __int16 v38 = 2112;
        uint64_t v39 = v8;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "%s Dictation with session id %@ will start with primary language code %@ and dictation languages %@.", (uint8_t *)&v32, 0x2Au);
      }
      objc_msgSend(*(id *)(a1 + 32), "_requestWillStartWithInfo:showNetworkActivityIndicator:", 0, objc_msgSend(*(id *)(a1 + 56), "secureOfflineOnly") ^ 1);
      __int16 v9 = *(void **)(a1 + 48);
      id v10 = [*(id *)(a1 + 64) turnIdentifier];
      sub_1001CE2B0(v9, v10);

      uint64_t v11 = *(void *)(*(void *)(a1 + 32) + 16);
      if ((AFIsATVOnly() & 1) != 0 || !v11) {
        [*(id *)(a1 + 32) _clearContextAndStartDictationSessionWithLanguageCode:*(void *)(a1 + 72) dictationOptions:*(void *)(a1 + 56)];
      }
      objc_storeStrong((id *)(*(void *)(a1 + 32) + 288), *(id *)(a1 + 64));
      objc_msgSend(*(id *)(*(void *)(a1 + 32) + 288), "setDictationInputOrigin:", objc_msgSend(*(id *)(a1 + 56), "dictationInputOrigin"));
      uint64_t v12 = *(void **)(*(void *)(a1 + 32) + 288);
      id v13 = [*(id *)(a1 + 56) applicationDisplayName];
      [v12 setApplicationDisplayName:v13];

      int v14 = *(void **)(*(void *)(a1 + 32) + 288);
      char v15 = [*(id *)(a1 + 56) applicationName];
      [v14 setApplicationBundleIdentifier:v15];

      objc_msgSend(*(id *)(*(void *)(a1 + 32) + 288), "setSkipGeneratingSpeechPacket:", objc_msgSend(*(id *)(a1 + 56), "secureOfflineOnly"));
      id v16 = *(void **)(a1 + 32);
      id v17 = [*(id *)(a1 + 56) context];
      objc_msgSend(v16, "_context_setSTApplicationContext:", v17);

      __int16 v18 = [*(id *)(a1 + 32) _speechManager];
      [v18 setInitialDictationLanguage:*(void *)(a1 + 72)];
      [v18 setPrimaryDictationLanguage:*(void *)(*(void *)(*(void *)(a1 + 88) + 8) + 40)];
      [v18 setDictationLanguages:*(void *)(*(void *)(*(void *)(a1 + 96) + 8) + 40)];
      [v18 setDictationOptions:*(void *)(a1 + 56)];
      [*(id *)(a1 + 32) _setSpeechCapturingContext:0];
      id v19 = -[NSObject startSpeechCaptureForDictationWithOptions:sessionUUID:secureOfflineOnly:](v18, "startSpeechCaptureForDictationWithOptions:sessionUUID:secureOfflineOnly:", *(void *)(a1 + 64), *(void *)(a1 + 48), [*(id *)(a1 + 56) secureOfflineOnly]);
      [*(id *)(a1 + 32) _setSpeechCapturingContext:v19];
      if ([*(id *)(a1 + 64) audioFileType]) {
        objc_storeStrong((id *)(*(void *)(a1 + 32) + 48), *(id *)(a1 + 40));
      }
      char v20 = +[ADDictationOfflineStatusObserver sharedDictationOfflineStatusObserver];
      uint64_t v21 = [v20 offlineDictationStatus];

      if (AFIsATV() && ([*(id *)(a1 + 56) secureOfflineOnly] & 1) != 0
        || (AFOfflineDictationStatusForLanguage(),
            id v22 = objc_claimAutoreleasedReturnValue(),
            v22,
            v22))
      {
        __int16 v23 = [*(id *)(a1 + 32) _requestDispatcherService];
        double v24 = [*(id *)(a1 + 32) _account];
        __int16 v25 = [v24 assistantIdentifier];
        [v23 startDictationRequestWithAssistantId:v25 requestId:*(void *)(a1 + 48) inputOrigin:0 dictationOptions:*(void *)(a1 + 56)];

        [*(id *)(a1 + 32) _emitDeviceDynamicContextForRequest:*(void *)(a1 + 48)];
      }
      uint64_t v26 = *(void *)(a1 + 80);
      if (v26) {
        (*(void (**)(void))(v26 + 16))();
      }

      goto LABEL_21;
    }
  }
  uint64_t v4 = (void *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
  {
    uint64_t v28 = *(void *)(a1 + 40);
    uint64_t v27 = *(void *)(a1 + 48);
    uint64_t v29 = *(void *)(a1 + 32);
    uint64_t v30 = *(void *)(v29 + 24);
    id v31 = *(void **)(v29 + 40);
    __int16 v18 = v4;
    id v19 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [v31 adSpeechSessionEnded]);
    int v32 = 136316418;
    id v33 = "-[ADCommandCenter _startDictationWithLanguageCode:options:speechOptions:sessionUUID:delegate:completion:]_block_invoke";
    __int16 v34 = 2112;
    uint64_t v35 = v27;
    __int16 v36 = 2112;
    uint64_t v37 = v28;
    __int16 v38 = 2112;
    uint64_t v39 = v30;
    __int16 v40 = 2112;
    long long v41 = v31;
    __int16 v42 = 2112;
    long long v43 = v19;
    _os_log_error_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "%s Ignored Dictation with session id %@ because the expected request delegate is nil and speech delegate is %@, but the actual request delegate is %@ and speech delegate is %@, delegate session ended %@.", (uint8_t *)&v32, 0x3Eu);
LABEL_21:
  }
}

void sub_1001CE2B0(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1;
  id v5 = objc_alloc((Class)SISchemaUUID);
  id v6 = [objc_alloc((Class)NSUUID) initWithUUIDString:v4];

  id v12 = [v5 initWithNSUUID:v6];
  id v7 = objc_alloc_init((Class)SISchemaRequestLinkInfo);
  [v7 setUuid:v12];
  [v7 setComponent:1];
  id v8 = [objc_alloc((Class)SISchemaUUID) initWithNSUUID:v3];

  id v9 = objc_alloc_init((Class)SISchemaRequestLinkInfo);
  [v9 setUuid:v8];
  [v9 setComponent:2];
  id v10 = objc_alloc_init((Class)SISchemaRequestLink);
  [v10 setSource:v7];
  [v10 setTarget:v9];
  uint64_t v11 = +[AssistantSiriAnalytics sharedStream];
  [v11 emitMessage:v10];
}

uint64_t sub_1001CE5A4(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) _speechManager];
  [v2 startSpeechCaptureWithURL:*(void *)(a1 + 40) isNarrowBand:*(unsigned __int8 *)(a1 + 56) isDictation:0 sessionUUID:0];

  uint64_t result = *(void *)(a1 + 48);
  if (result)
  {
    id v4 = *(uint64_t (**)(void))(result + 16);
    return v4();
  }
  return result;
}

uint64_t sub_1001CE794()
{
  return AFAnalyticsContextCreateWithSpeechRequestOptions();
}

void sub_1001CE79C(uint64_t a1)
{
  objc_storeStrong((id *)(*(void *)(a1 + 32) + 288), *(id *)(a1 + 40));
  objc_msgSend(*(id *)(a1 + 32), "_acousticId_startSessionWithContext:", *(void *)(a1 + 48));
  id v2 = [*(id *)(a1 + 32) _speechManager];
  [v2 startAcousticIDCaptureWithOptions:*(void *)(a1 + 40) sessionUUID:0];
}

uint64_t sub_1001CEAFC()
{
  return AFAnalyticsContextCreateWithSpeechRequestOptions();
}

void sub_1001CEB04(id *a1)
{
  objc_storeStrong((id *)a1[4] + 36, a1[5]);
  objc_storeStrong((id *)a1[4] + 45, a1[6]);
  *((unsigned char *)a1[4] + 352) = 1;
  [a1[4] _setSpeechCapturingContext:0];
  id v2 = [a1[4] _speechManager];
  id v3 = a1[5];
  id v4 = [a1[4] _sessionManager];
  id v5 = [v4 languageCode];
  id v6 = [v2 startSpeechCaptureForRequestWithOptions:v3 sessionUUID:0 language:v5];

  [a1[4] _setSpeechCapturingContext:v6];
}

void sub_1001CEE50(uint64_t a1)
{
  id v2 = *(id *)(*(void *)(a1 + 32) + 400);
  id v3 = v2;
  if (*(void *)(a1 + 56)) {
    BOOL v4 = v2 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    id v5 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v9 = *(void *)(a1 + 40);
      *(_DWORD *)AudioBufferList buf = 136315650;
      id v17 = "-[ADCommandCenter _startRecordingForPendingSpeechRequestForDelegate:withOptions:sessionUUID:completion:]_block_invoke";
      __int16 v18 = 2112;
      id v19 = v3;
      __int16 v20 = 2112;
      uint64_t v21 = v9;
      _os_log_debug_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "%s Entering speech group %@ (%@)...", buf, 0x20u);
    }
    dispatch_group_enter(v3);
    uint64_t v6 = *(void *)(a1 + 56);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_1001CEFEC;
    v10[3] = &unk_100506278;
    id v7 = *(id *)(a1 + 40);
    char v15 = *(unsigned char *)(a1 + 64);
    uint64_t v8 = *(void *)(a1 + 32);
    id v11 = v7;
    uint64_t v12 = v8;
    id v13 = v3;
    id v14 = *(id *)(a1 + 48);
    (*(void (**)(uint64_t, void *))(v6 + 16))(v6, v10);
  }
}

void sub_1001CEFEC(uint64_t a1, double a2)
{
  BOOL v4 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v12 = *(void *)(a1 + 32);
    *(_DWORD *)AudioBufferList buf = 136315650;
    __int16 v23 = "-[ADCommandCenter _startRecordingForPendingSpeechRequestForDelegate:withOptions:sessionUUID:completion:]_block_invoke";
    __int16 v24 = 2048;
    double v25 = a2;
    __int16 v26 = 2112;
    uint64_t v27 = v12;
    _os_log_debug_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "%s Continue pending recording at %f (%@)...", buf, 0x20u);
  }
  id v5 = +[AFAnalytics sharedAnalytics];
  v20[0] = _NSConcreteStackBlock;
  v20[1] = 3221225472;
  void v20[2] = sub_1001CF304;
  v20[3] = &unk_100506250;
  *(double *)&void v20[4] = a2;
  char v21 = *(unsigned char *)(a1 + 64);
  [v5 logEventWithType:307 contextProvider:v20];

  *(double *)(*(void *)(a1 + 40) + 40_Block_object_dispose(&STACK[0x220], 8) = a2;
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v6 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)AudioBufferList buf = 136315138;
      __int16 v23 = "-[ADCommandCenter _startRecordingForPendingSpeechRequestForDelegate:withOptions:sessionUUID:completion:]_block_invoke_2";
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "%s Asking to play recording start alert on prelistening continue", buf, 0xCu);
    }
    uint64_t v7 = *(void *)(a1 + 40);
    uint64_t v8 = *(NSObject **)(v7 + 8);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1001CF3E4;
    block[3] = &unk_10050E138;
    void block[4] = v7;
    dispatch_async(v8, block);
  }
  uint64_t v9 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    double v13 = *(double *)(a1 + 48);
    uint64_t v14 = *(void *)(a1 + 32);
    *(_DWORD *)AudioBufferList buf = 136315650;
    __int16 v23 = "-[ADCommandCenter _startRecordingForPendingSpeechRequestForDelegate:withOptions:sessionUUID:completion:]_block_invoke_2";
    __int16 v24 = 2112;
    double v25 = v13;
    __int16 v26 = 2112;
    uint64_t v27 = v14;
    _os_log_debug_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "%s Leaving speech group %@ (%@)...", buf, 0x20u);
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
  id v10 = *(void **)(a1 + 48);
  id v11 = *(NSObject **)(*(void *)(a1 + 40) + 8);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  void v15[2] = sub_1001CF3F0;
  v15[3] = &unk_10050DCB8;
  id v16 = v10;
  id v17 = *(id *)(a1 + 32);
  id v18 = *(id *)(a1 + 56);
  dispatch_group_notify(v16, v11, v15);
}

id sub_1001CF304(uint64_t a1)
{
  v6[0] = @"timestamp";
  id v2 = +[NSNumber numberWithDouble:*(double *)(a1 + 32)];
  v6[1] = @"prelistening";
  v7[0] = v2;
  id v3 = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 40)];
  v7[1] = v3;
  BOOL v4 = +[NSDictionary dictionaryWithObjects:v7 forKeys:v6 count:2];

  return v4;
}

id sub_1001CF3E4(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 112) playRecordingStartAlert];
}

void sub_1001CF3F0(uint64_t a1)
{
  id v2 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 40);
    int v5 = 136315650;
    uint64_t v6 = "-[ADCommandCenter _startRecordingForPendingSpeechRequestForDelegate:withOptions:sessionUUID:completion:]_block_invoke";
    __int16 v7 = 2112;
    uint64_t v8 = v3;
    __int16 v9 = 2112;
    uint64_t v10 = v4;
    _os_log_debug_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s Leaving request group %@ (%@)...", (uint8_t *)&v5, 0x20u);
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
}

uint64_t sub_1001CFDD0()
{
  return AFAnalyticsContextCreateWithSpeechRequestOptions();
}

uint64_t sub_1001CFDD8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_1001CFDEC(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(result + 16))(result, 1);
  }
  return result;
}

void sub_1001CFE08(uint64_t a1)
{
  objc_storeStrong((id *)(*(void *)(a1 + 32) + 288), *(id *)(a1 + 40));
  if (AFDeviceSupportsBargeIn())
  {
    id v2 = [*(id *)(a1 + 32) _contextManager];
    uint64_t v3 = [v2 localContextWithPrivacyClass:10];

    [*(id *)(a1 + 40) activationEvent];
    if (AFSpeechEventIsVoiceTrigger())
    {
      uint64_t v4 = *(void **)(*(void *)(a1 + 32) + 288);
      unint64_t v5 = (unint64_t)[*(id *)(a1 + 40) bargeInOptions];
      id v6 = v3;
      __int16 v7 = [v6 alarmSnapshot];
      unsigned int v8 = [v7 hasFiringAlarms];

      if (v8) {
        uint64_t v9 = 8;
      }
      else {
        uint64_t v9 = 0;
      }
      uint64_t v10 = [v6 timerSnapshot];
      unsigned int v11 = [v10 hasFiringTimers];

      if (v11) {
        uint64_t v12 = v9 | 0x10;
      }
      else {
        uint64_t v12 = v9;
      }
      double v13 = [v6 playbackStateSnapshot];
      BOOL v14 = [v13 playbackState] == (id)1;

      char v15 = [v6 homeAnnouncementSnapshot];

      unsigned __int8 v16 = [v15 state];
      [v4 setBargeInOptions:(v12 | v14) & 0xFFFFFFFFFFFFFFDFLL | (32 * (v16 & 1)) | v5];
    }
    id v17 = *(void **)(*(void *)(a1 + 32) + 288);
    id v18 = [v3 playbackStateSnapshot];
    objc_msgSend(v17, "setIsMediaPlaying:", objc_msgSend(v18, "playbackState") == (id)1);
  }
  id v19 = objc_alloc((Class)AFSafetyBlock);
  id v31 = _NSConcreteStackBlock;
  uint64_t v32 = 3221225472;
  id v33 = sub_1001D00DC;
  __int16 v34 = &unk_10050C2A0;
  id v35 = *(id *)(a1 + 48);
  id v36 = *(id *)(a1 + 56);
  id v20 = [v19 initWithBlock:&v31];
  uint64_t v21 = *(void *)(a1 + 32);
  id v22 = *(void **)(v21 + 64);
  *(void *)(v21 + 64) = v20;

  objc_msgSend(*(id *)(a1 + 32), "_acousticId_reset", v31, v32, v33, v34);
  __int16 v23 = [*(id *)(a1 + 32) _speechManager];
  [*(id *)(a1 + 32) _setSpeechCapturingContext:0];
  uint64_t v24 = *(void *)(a1 + 64);
  uint64_t v25 = *(void *)(a1 + 40);
  __int16 v26 = [*(id *)(a1 + 32) _sessionManager];
  uint64_t v27 = [v26 languageCode];
  uint64_t v28 = [v23 startSpeechCaptureForRequestWithOptions:v25 sessionUUID:v24 language:v27];

  [*(id *)(a1 + 32) _setSpeechCapturingContext:v28];
  if ([*(id *)(a1 + 40) audioFileType]) {
    objc_storeStrong((id *)(*(void *)(a1 + 32) + 48), *(id *)(a1 + 72));
  }
  uint64_t v29 = *(void *)(a1 + 80);
  if (v29) {
    (*(void (**)(void))(v29 + 16))();
  }
  uint64_t v30 = *(void *)(a1 + 88);
  if (v30) {
    (*(void (**)(uint64_t, uint64_t))(v30 + 16))(v30, 1);
  }
}

void sub_1001D00DC(uint64_t a1)
{
  id v2 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 40);
    int v5 = 136315650;
    id v6 = "-[ADCommandCenter _startSpeechRequestWithDelegate:withOptions:sessionUUID:completion:]_block_invoke_2";
    __int16 v7 = 2112;
    uint64_t v8 = v3;
    __int16 v9 = 2112;
    uint64_t v10 = v4;
    _os_log_debug_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s Leaving request group %@ (%@)...", (uint8_t *)&v5, 0x20u);
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_1001D01AC(id a1, AFSetAudioSessionActiveContextMutating *a2)
{
}

uint64_t sub_1001D0594()
{
  return AFAnalyticsContextCreateWithSpeechRequestOptions();
}

void sub_1001D059C(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  if (v2)
  {
    uint64_t v3 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)AudioBufferList buf = 136315394;
      uint64_t v12 = "-[ADCommandCenter _startNonSpeechRequest:forDelegate:withInfo:options:suppressAlert:completion:]_block_invoke";
      __int16 v13 = 2112;
      BOOL v14 = v2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "%s options = %@", buf, 0x16u);
      id v2 = *(void **)(a1 + 32);
    }
    objc_storeStrong((id *)(*(void *)(a1 + 40) + 288), v2);
    uint64_t v4 = [*(id *)(a1 + 40) _speechManager];
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_1001D07A8;
    v9[3] = &unk_100508698;
    id v10 = *(id *)(a1 + 32);
    id v5 = +[AFSetAudioSessionActiveContext newWithBuilder:v9];
    [v4 prepareAudioSystemWithContext:v5 completion:0];
  }
  [*(id *)(a1 + 40) _sendRestrictionsInPreparationForRequest];
  objc_msgSend(*(id *)(a1 + 40), "_context_updateContext");
  [*(id *)(a1 + 40) _reallyHandleNewStartRequest:*(void *)(a1 + 48) info:*(void *)(a1 + 56)];
  [*(id *)(a1 + 40) _sendLocationIfNeededForRequest];
  id v6 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    __int16 v7 = *(void **)(a1 + 64);
    uint64_t v8 = *(void *)(a1 + 72);
    *(_DWORD *)AudioBufferList buf = 136315650;
    uint64_t v12 = "-[ADCommandCenter _startNonSpeechRequest:forDelegate:withInfo:options:suppressAlert:completion:]_block_invoke_2";
    __int16 v13 = 2112;
    BOOL v14 = v7;
    __int16 v15 = 2112;
    uint64_t v16 = v8;
    _os_log_debug_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "%s Leaving request group %@ (%@)...", buf, 0x20u);
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 64));
}

void sub_1001D07A8(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 setReason:3];
  [v3 setSpeechRequestOptions:*(void *)(a1 + 32)];
}

uint64_t sub_1001D0E58()
{
  return AFAnalyticsContextCreateWithRequestInfo();
}

uint64_t sub_1001D0E60(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "_startNonSpeechRequest:forDelegate:withInfo:options:suppressAlert:completion:", *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), (unint64_t)objc_msgSend(*(id *)(a1 + 72), "options") & 1, 0);
  uint64_t result = *(void *)(a1 + 80);
  if (result)
  {
    id v3 = *(uint64_t (**)(void))(result + 16);
    return v3();
  }
  return result;
}

void sub_1001D0EFC(uint64_t a1, char a2)
{
  id v3 = *(NSObject **)(*(void *)(a1 + 32) + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1001D0FC4;
  block[3] = &unk_10050D378;
  char v7 = a2;
  id v6 = *(id *)(a1 + 48);
  id v5 = *(id *)(a1 + 40);
  dispatch_async(v3, block);
}

uint64_t sub_1001D0FA8(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t, void))(result + 16))(result, a2, 0);
  }
  return result;
}

void sub_1001D0FC4(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48))
  {
    id v1 = *(void (**)(void))(*(void *)(a1 + 40) + 16);
    v1();
  }
  else
  {
    id v2 = *(void **)(a1 + 32);
    id v3 = +[AFError errorWithCode:5 description:@"Unable to start UI with text." underlyingError:0];
    [v2 adRequestDidCompleteWithSuccess:0 error:v3];
  }
}

void sub_1001D170C(uint64_t a1)
{
  id v1 = *(void **)(a1 + 40);
  uint64_t v2 = v1[2];
  BOOL v3 = *(void *)(a1 + 32) == v2 || v2 == 0;
  if (v3 && !v1[5])
  {
    char v7 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      int v9 = 136315138;
      id v10 = "-[ADCommandCenter _reallyEndSessionForDelegate:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "%s Asking speech manager to release audio session...", (uint8_t *)&v9, 0xCu);
      id v1 = *(void **)(a1 + 40);
    }
    uint64_t v8 = [v1 _speechManager];
    [v8 endSession];
  }
  else
  {
    uint64_t v4 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      uint64_t v5 = v1[5];
      int v9 = 136315650;
      id v10 = "-[ADCommandCenter _reallyEndSessionForDelegate:]_block_invoke";
      __int16 v11 = 2048;
      uint64_t v12 = v2;
      __int16 v13 = 2048;
      uint64_t v14 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%s Ignored releasing audio session because current client is %p and speech delegate is %p.", (uint8_t *)&v9, 0x20u);
    }
  }
}

uint64_t sub_1001D186C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1001D1A84(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  [WeakRetained _reallyEndSessionForDelegate:*(void *)(a1 + 32)];
  uint64_t v2 = WeakRetained;
  if (WeakRetained)
  {
    BOOL v3 = *(void **)(a1 + 40);
    if (v3 == (void *)WeakRetained[69])
    {
      WeakRetained[69] = 0;

      uint64_t v2 = WeakRetained;
    }
  }
}

void sub_1001D1D0C(uint64_t a1)
{
  uint64_t v2 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v7 = 136315394;
    uint64_t v8 = "-[ADCommandCenter _prepareForAppLaunchForRequest:]_block_invoke";
    __int16 v9 = 2112;
    uint64_t v10 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s %@", (uint8_t *)&v7, 0x16u);
  }
  id v4 = [*(id *)(a1 + 32) copy];
  uint64_t v5 = *(void *)(a1 + 40);
  id v6 = *(void **)(v5 + 552);
  *(void *)(v5 + 552) = v4;
}

uint64_t sub_1001D1E58(uint64_t result)
{
  *(unsigned char *)(*(void *)(result + 32) + 534) = *(unsigned char *)(result + 40);
  return result;
}

void sub_1001D2060(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void **)(a1 + 32);
  id v4 = a2;
  uint64_t v5 = [v3 playbackStateSnapshot];
  objc_msgSend(v4, "setIsMediaPlaying:", objc_msgSend(v5, "playbackState") == (id)1);

  id v6 = [*(id *)(a1 + 40) _motionManager];
  objc_msgSend(v4, "setDeviceMotion:", objc_msgSend(v6, "deviceMotion"));
}

void sub_1001D3178(uint64_t a1)
{
  uint64_t v2 = *(unsigned char **)(a1 + 32);
  if (v2[577] || v2[576])
  {
    uint64_t v3 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)AudioBufferList buf = 136315138;
      int v7 = "-[ADCommandCenter resumeInterruptedAudioPlaybackIfNeeded]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "%s Not forcing audio session inactive since we are in a phone call", buf, 0xCu);
    }
  }
  else
  {
    id v4 = [v2 _contextManager];
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    void v5[2] = sub_1001D32A0;
    v5[3] = &unk_10050B918;
    void v5[4] = *(void *)(a1 + 32);
    [v4 getNowPlayingMediaIsResumable:v5];
  }
}

id *sub_1001D32A0(id *result, int a2)
{
  if (a2) {
    return (id *)[result[4] forceAudioSessionInactiveWithOptions:1 completion:0];
  }
  return result;
}

id sub_1001D35DC(uint64_t a1, void *a2)
{
  return [a2 setSpeechRequestOptions:*(void *)(*(void *)(a1 + 32) + 288)];
}

void sub_1001D3C98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1001D3CB8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  int v7 = *(NSObject **)(*(void *)(a1 + 32) + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1001D3DF0;
  block[3] = &unk_100506170;
  uint64_t v8 = *(void *)(a1 + 80);
  id v14 = v6;
  uint64_t v22 = v8;
  id v15 = *(id *)(a1 + 40);
  id v16 = v5;
  id v17 = *(id *)(a1 + 48);
  id v18 = *(id *)(a1 + 56);
  id v9 = *(id *)(a1 + 64);
  uint64_t v10 = *(void *)(a1 + 32);
  id v19 = v9;
  uint64_t v20 = v10;
  id v21 = *(id *)(a1 + 72);
  id v11 = v5;
  id v12 = v6;
  dispatch_async(v7, block);
}

uint64_t sub_1001D3DF0(uint64_t a1)
{
  if (!*(void *)(a1 + 32))
  {
    int v7 = *(void **)(a1 + 40);
    uint64_t v8 = *(void *)(a1 + 48);
    id v26 = 0;
    uint64_t v9 = [v7 getDictationLanguagesForSupportedLocales:v8 error:&v26];
    id v6 = v26;
    uint64_t v10 = *(void *)(*(void *)(a1 + 96) + 8);
    id v11 = *(void **)(v10 + 40);
    *(void *)(v10 + 40) = v9;

    if (v6)
    {
      id v12 = AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)AudioBufferList buf = 136315394;
        id v31 = "-[ADCommandCenter _getDictationLanguages:options:speechOptions:delegate:completion:]_block_invoke_2";
        __int16 v32 = 2112;
        id v33 = v6;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "%s Falling back to non LID dictation flow for reason: %@", buf, 0x16u);
      }
      if (objc_opt_respondsToSelector()) {
        [*(id *)(a1 + 56) adSpeechLanguageDetectorFailedWithError:v6];
      }
      if (*(void *)(a1 + 64))
      {
        uint64_t v29 = *(void *)(a1 + 64);
        uint64_t v13 = +[NSArray arrayWithObjects:&v29 count:1];
        uint64_t v14 = *(void *)(*(void *)(a1 + 96) + 8);
        id v15 = *(void **)(v14 + 40);
        *(void *)(v14 + 40) = v13;
      }
    }
    else
    {
      id v16 = *(void **)(*(void *)(*(void *)(a1 + 96) + 8) + 40);
      if (v16 && [v16 count])
      {
        id v17 = AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
        {
          id v18 = *(void **)(*(void *)(*(void *)(a1 + 96) + 8) + 40);
          *(_DWORD *)AudioBufferList buf = 136315394;
          id v31 = "-[ADCommandCenter _getDictationLanguages:options:speechOptions:delegate:completion:]_block_invoke";
          __int16 v32 = 2112;
          id v33 = v18;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "%s Using language detector with languages: %@", buf, 0x16u);
        }
        [*(id *)(a1 + 72) setLanguageDetectionUserContext:*(void *)(a1 + 40)];
        id v6 = 0;
        *(unsigned char *)(*(void *)(a1 + 80) + 64_Block_object_dispose(&STACK[0x220], 8) = 1;
        *(unsigned char *)(*(void *)(a1 + 80) + 649) = 0;
      }
      else
      {
        id v19 = +[NSString stringWithFormat:@"User context returned 0 dictation languages\n%@\n%@", *(void *)(a1 + 40), *(void *)(a1 + 48)];
        uint64_t v20 = +[AFError errorWithCode:2800 description:v19 underlyingError:0];
        id v21 = AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)AudioBufferList buf = 136315394;
          id v31 = "-[ADCommandCenter _getDictationLanguages:options:speechOptions:delegate:completion:]_block_invoke";
          __int16 v32 = 2112;
          id v33 = v20;
          _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "%s Falling back to non LID dictation flow for reason: %@", buf, 0x16u);
        }
        if (objc_opt_respondsToSelector()) {
          [*(id *)(a1 + 56) adSpeechLanguageDetectorFailedWithError:v20];
        }
        if (*(void *)(a1 + 64))
        {
          uint64_t v28 = *(void *)(a1 + 64);
          uint64_t v22 = +[NSArray arrayWithObjects:&v28 count:1];
          uint64_t v23 = *(void *)(*(void *)(a1 + 96) + 8);
          uint64_t v24 = *(void **)(v23 + 40);
          *(void *)(v23 + 40) = v22;
        }
        id v6 = 0;
      }
    }
    goto LABEL_27;
  }
  if (objc_opt_respondsToSelector()) {
    [*(id *)(a1 + 56) adSpeechLanguageDetectorFailedWithError:*(void *)(a1 + 32)];
  }
  uint64_t v2 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = *(void **)(a1 + 32);
    *(_DWORD *)AudioBufferList buf = 136315394;
    id v31 = "-[ADCommandCenter _getDictationLanguages:options:speechOptions:delegate:completion:]_block_invoke";
    __int16 v32 = 2112;
    id v33 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s Falling back to non LID dictation flow for reason: %@", buf, 0x16u);
  }
  if (*(void *)(a1 + 64))
  {
    uint64_t v27 = *(void *)(a1 + 64);
    uint64_t v4 = +[NSArray arrayWithObjects:&v27 count:1];
    uint64_t v5 = *(void *)(*(void *)(a1 + 96) + 8);
    id v6 = *(id *)(v5 + 40);
    *(void *)(v5 + 40) = v4;
LABEL_27:
  }
  uint64_t result = *(void *)(a1 + 88);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void))(result + 16))(result, *(void *)(a1 + 64), *(void *)(*(void *)(*(void *)(a1 + 96) + 8) + 40));
  }
  return result;
}

void sub_1001D42BC(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = [*(id *)(a1 + 48) refId];
  uint64_t v5 = [v2 _executionContextMatchingExecutionInfo:v3 fallbackRequestID:v4];

  [v5 setPresentedUIResponse:1];
  unsigned int v6 = [v5 isFromRemote];
  int v7 = AFSiriLogContextDaemon;
  if (v6)
  {
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      uint64_t v8 = *(void *)(a1 + 48);
      int v13 = 136315650;
      uint64_t v14 = "-[ADCommandCenter UIService:didPresentUIResponseForCommand:withExecutionInfo:]_block_invoke";
      __int16 v15 = 2112;
      uint64_t v16 = v8;
      __int16 v17 = 2112;
      id v18 = v5;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "%s set most recent remote visible context for %@ to %@", (uint8_t *)&v13, 0x20u);
    }
    uint64_t v9 = *(void *)(a1 + 32);
    id v10 = v5;
    id v11 = *(void **)(v9 + 480);
    *(void *)(v9 + 480) = v10;
  }
  else
  {
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      int v13 = 136315138;
      uint64_t v14 = "-[ADCommandCenter UIService:didPresentUIResponseForCommand:withExecutionInfo:]_block_invoke";
      _os_log_debug_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "%s Most recent remote visible context cleared", (uint8_t *)&v13, 0xCu);
    }
    uint64_t v12 = *(void *)(a1 + 32);
    id v11 = *(void **)(v12 + 480);
    *(void *)(v12 + 480) = 0;
  }
}

id sub_1001D4918(uint64_t a1)
{
  return _[*(id *)(*(void *)(a1 + 32) + 16) adSpeechRecordingWillStopWithSignpostID:*(void *)(a1 + 40)];
}

void sub_1001D524C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a27, 8);
  _Block_object_dispose((const void *)(v27 - 192), 8);
  _Unwind_Resume(a1);
}

void sub_1001D5294(uint64_t a1, void *a2)
{
  id v3 = a2;
  unint64_t v45 = 0;
  char v44 = 0;
  uint64_t v4 = [*(id *)(a1 + 32) _sharedMultiUserService];
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(a1 + 40);
  if (!v6) {
    uint64_t v6 = *(void *)(a1 + 48);
  }
  uint64_t v7 = *(void *)(a1 + 56);
  if (!v7) {
    uint64_t v7 = *(void *)(a1 + 64);
  }
  id v43 = 0;
  id v38 = v3;
  uint64_t v8 = [v4 validateAndReturnScores:v6 classifiedUser:v7 donatedScores:v3 unknownUserSharedId:&v43 totalUsers:&v45 ghostVoiceProfileDetected:&v44];
  id v36 = v43;
  uint64_t v9 = *(void *)(*(void *)(a1 + 80) + 8);
  id v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = v8;

  id v11 = objc_alloc_init((Class)NSMutableArray);
  long long v39 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  id v12 = *(id *)(*(void *)(*(void *)(a1 + 80) + 8) + 40);
  id v13 = [v12 countByEnumeratingWithState:&v39 objects:v48 count:16];
  if (v13)
  {
    id v14 = v13;
    id v15 = 0;
    uint64_t v16 = *(void *)v40;
    do
    {
      for (i = 0; i != v14; i = (char *)i + 1)
      {
        if (*(void *)v40 != v16) {
          objc_enumerationMutation(v12);
        }
        id v18 = *(void **)(*((void *)&v39 + 1) + 8 * i);
        id v19 = objc_msgSend(*(id *)(*(void *)(*(void *)(a1 + 80) + 8) + 40), "objectForKey:", v18, v36);
        uint64_t v20 = v19;
        if (!*(void *)(*(void *)(*(void *)(a1 + 88) + 8) + 40)
          || (uint64_t)[v19 integerValue] > (uint64_t)v15)
        {
          id v15 = [v20 integerValue];
          id v21 = [v18 copy];
          uint64_t v22 = *(void *)(*(void *)(a1 + 88) + 8);
          uint64_t v23 = *(void **)(v22 + 40);
          *(void *)(v22 + 40) = v21;
        }
        id v24 = objc_alloc_init((Class)SAUserConfidenceScore);
        objc_msgSend(v24, "setConfidenceScore:", objc_msgSend(v20, "integerValue"));
        [v24 setSharedUserId:v18];
        [v11 addObject:v24];
      }
      id v14 = [v12 countByEnumeratingWithState:&v39 objects:v48 count:16];
    }
    while (v14);
  }

  if ([*(id *)(*(void *)(*(void *)(a1 + 80) + 8) + 40) count])
  {
    uint64_t v25 = v36;
    if ((AFIsATV() & 1) == 0)
    {
      id v26 = [*(id *)(*(void *)(*(void *)(a1 + 80) + 8) + 40) count];
      if (v26 != [*(id *)(a1 + 48) count]
        || (id v27 = [*(id *)(a1 + 48) count], (unint64_t)v27 < v45)
        || v44)
      {
        uint64_t v28 = AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioBufferList buf = 136315138;
          uint64_t v47 = "-[ADCommandCenter _handleConfidenceScores:classification:classifiedUser:unknownUserScore:duration:versio"
                "n:thresholdingType:assetVersion:]_block_invoke";
          _os_log_error_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_ERROR, "%s Assistantd and CoreSpeech are out of sync. Attempt recovery.", buf, 0xCu);
        }
        uint64_t v29 = objc_msgSend(*(id *)(a1 + 32), "_sharedMultiUserService", v36);
        [v29 voiceProfilesOutOfSync];
      }
    }
    if (v25)
    {
      id v30 = objc_alloc_init((Class)SAUserConfidenceScore);
      [v30 setConfidenceScore:*(void *)(a1 + 96)];
      [v30 setSharedUserId:v25];
      [v11 addObject:v30];
    }
    objc_msgSend(*(id *)(a1 + 72), "setScores:", v11, v36);
    id v31 = *(void **)(a1 + 72);
    __int16 v32 = +[NSNumber numberWithInteger:*(void *)(a1 + 104)];
    [v31 setScoringSchemeVersion:v32];
    id v33 = v38;
    goto LABEL_30;
  }
  __int16 v34 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)AudioBufferList buf = 136315138;
    uint64_t v47 = "-[ADCommandCenter _handleConfidenceScores:classification:classifiedUser:unknownUserScore:duration:version:thre"
          "sholdingType:assetVersion:]_block_invoke";
    _os_log_error_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_ERROR, "%s No scores found for tracked profiles.", buf, 0xCu);
  }
  id v35 = objc_msgSend(*(id *)(a1 + 48), "count", v36);
  uint64_t v25 = v37;
  id v33 = v38;
  if (v35)
  {
    __int16 v32 = [*(id *)(a1 + 32) _sharedMultiUserService];
    [v32 voiceProfilesOutOfSync];
LABEL_30:
  }
}

id sub_1001D57F0(uint64_t a1)
{
  return [*(id *)(a1 + 32) _handleConfidenceScores:*(void *)(a1 + 40) classification:*(void *)(a1 + 72) classifiedUser:*(void *)(a1 + 48) unknownUserScore:*(void *)(a1 + 80) duration:*(void *)(a1 + 88) version:*(void *)(a1 + 96) thresholdingType:*(void *)(a1 + 56) assetVersion:*(void *)(a1 + 64)];
}

void sub_1001D58AC(uint64_t a1)
{
  uint64_t v2 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v3 = *(unsigned __int8 *)(a1 + 40);
    int v5 = 136315394;
    uint64_t v6 = "-[ADCommandCenter speechManager:audioSessionDidBecomeActive:]_block_invoke";
    __int16 v7 = 1024;
    int v8 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s %d", (uint8_t *)&v5, 0x12u);
  }
  [*(id *)(*(void *)(a1 + 32) + 16) adAudioSessionDidBecomeActive:*(unsigned __int8 *)(a1 + 40)];
  if (!*(unsigned char *)(a1 + 40))
  {
    uint64_t v4 = +[ADExternalNotificationRequestHandler sharedNotificationRequestHandler];
    [v4 audioSessionDidEnd];
  }
}

id sub_1001D5A14(uint64_t a1)
{
  uint64_t v2 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v3 = *(unsigned __int8 *)(a1 + 40);
    int v5 = 136315394;
    uint64_t v6 = "-[ADCommandCenter speechManager:audioSessionWillBecomeActive:]_block_invoke";
    __int16 v7 = 1024;
    int v8 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s %d", (uint8_t *)&v5, 0x12u);
  }
  return [*(id *)(*(void *)(a1 + 32) + 16) adAudioSessionWillBecomeActive:*(unsigned __int8 *)(a1 + 40)];
}

void sub_1001D5B58(uint64_t a1)
{
  uint64_t v2 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v3 = *(unsigned __int8 *)(a1 + 40);
    int v4 = 136315394;
    int v5 = "-[ADCommandCenter speechManager:didChangeRecordingState:]_block_invoke";
    __int16 v6 = 1024;
    int v7 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s %d", (uint8_t *)&v4, 0x12u);
  }
  *(void *)(*(void *)(a1 + 32) + 24_Block_object_dispose(&STACK[0x220], 8) = 2 * *(unsigned __int8 *)(a1 + 40);
}

void sub_1001D614C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v5)
  {
    int v7 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      int v15 = 136315394;
      uint64_t v16 = "-[ADCommandCenter _saQuickStop:executionContext:completion:]_block_invoke";
      __int16 v17 = 2112;
      id v18 = v5;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "%s QuickStop invocation completed with response: %@", (uint8_t *)&v15, 0x16u);
    }
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      id v8 = +[AceObject aceObjectWithGenericCommand:v5];
    }
    else
    {
      id v8 = v5;
    }
    uint64_t v9 = v8;
  }
  else
  {
    uint64_t v9 = 0;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass() & 1) != 0 || (objc_opt_class(), (objc_opt_isKindOfClass()))
  {
    id v10 = objc_alloc_init((Class)SACommandSucceeded);
    id v11 = [*(id *)(a1 + 32) aceId];
    [v10 setRefId:v11];

    id v12 = *(void (**)(void))(*(void *)(a1 + 40) + 16);
  }
  else
  {
    id v13 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      int v15 = 136315650;
      uint64_t v16 = "-[ADCommandCenter _saQuickStop:executionContext:completion:]_block_invoke";
      __int16 v17 = 2112;
      id v18 = v5;
      __int16 v19 = 2112;
      id v20 = v6;
      _os_log_error_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "%s QuickStop invocation failed with response: %@, error: %@", (uint8_t *)&v15, 0x20u);
    }
    id v10 = objc_alloc_init((Class)SACommandFailed);
    id v14 = [*(id *)(a1 + 32) aceId];
    [v10 setRefId:v14];

    id v12 = *(void (**)(void))(*(void *)(a1 + 40) + 16);
  }
  v12();
}

void sub_1001D64F8(uint64_t a1, uint64_t a2)
{
  id v7 = objc_alloc_init((Class)SAQuickStopCompleted);
  int v4 = [*(id *)(a1 + 32) aceId];
  [v7 setRefId:v4];

  if (a2)
  {
    id v6 = &SAQuickStopCategoryAlarmValue;
LABEL_7:
    id v5 = v7;
    goto LABEL_8;
  }
  if ((a2 & 2) != 0)
  {
    id v6 = &SAQuickStopCategoryTimerValue;
    goto LABEL_7;
  }
  id v5 = v7;
  if (a2) {
    goto LABEL_9;
  }
  id v6 = &SAQuickStopCategoryNoneValue;
LABEL_8:
  [v5 setCategoryStopped:*v6];
LABEL_9:
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_1001D65C8(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = *(NSObject **)(*(void *)(a1 + 32) + 8);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_1001D6684;
  v6[3] = &unk_10050E188;
  id v7 = v3;
  id v8 = *(id *)(a1 + 40);
  id v5 = v3;
  dispatch_async(v4, v6);
}

void sub_1001D6684(uint64_t a1)
{
  uint64_t v2 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v32 = *(void *)(a1 + 32);
    *(_DWORD *)AudioBufferList buf = 136315394;
    unint64_t v45 = "-[ADCommandCenter _handleQuickStopCommandRoutedFromRemote:completion:]_block_invoke_3";
    __int16 v46 = 2112;
    uint64_t v47 = v32;
    _os_log_debug_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s %@", buf, 0x16u);
  }
  id v3 = [*(id *)(a1 + 32) alarmSnapshot];
  unsigned int v4 = [v3 hasFiringAlarms];
  if (v4)
  {
    id v5 = objc_alloc_init((Class)SOClockAlarmManager);
    long long v38 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    long long v41 = 0u;
    id v6 = [v3 alarmsByID];
    id v7 = [v6 allValues];

    id v8 = [v7 countByEnumeratingWithState:&v38 objects:v43 count:16];
    if (v8)
    {
      id v9 = v8;
      uint64_t v10 = *(void *)v39;
      do
      {
        for (i = 0; i != v9; i = (char *)i + 1)
        {
          if (*(void *)v39 != v10) {
            objc_enumerationMutation(v7);
          }
          id v12 = *(void **)(*((void *)&v38 + 1) + 8 * i);
          if ([v12 isFiring])
          {
            id v13 = [v12 alarmID];
            id v14 = [v13 UUIDString];
            id v15 = [v5 dismissAlarmWithIdentifier:v14];
          }
        }
        id v9 = [v7 countByEnumeratingWithState:&v38 objects:v43 count:16];
      }
      while (v9);
    }

    uint64_t v16 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)AudioBufferList buf = 136315138;
      unint64_t v45 = "-[ADCommandCenter _handleQuickStopCommandRoutedFromRemote:completion:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "%s QuickStop: Dismissed firing alarms.", buf, 0xCu);
    }
  }
  __int16 v17 = [*(id *)(a1 + 32) timerSnapshot];
  if ([v17 hasFiringTimers])
  {
    id v33 = v3;
    id v18 = objc_alloc_init((Class)SOClockTimerManager);
    long long v34 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    __int16 v19 = [v17 timersByID];
    id v20 = [v19 allValues];

    id v21 = [v20 countByEnumeratingWithState:&v34 objects:v42 count:16];
    if (v21)
    {
      id v22 = v21;
      uint64_t v23 = *(void *)v35;
      do
      {
        for (j = 0; j != v22; j = (char *)j + 1)
        {
          if (*(void *)v35 != v23) {
            objc_enumerationMutation(v20);
          }
          uint64_t v25 = *(void **)(*((void *)&v34 + 1) + 8 * (void)j);
          if ([v25 isFiring])
          {
            id v26 = [v25 timerID];
            id v27 = [v26 UUIDString];
            id v28 = [v18 dismissTimerWithIdentifier:v27];
          }
        }
        id v22 = [v20 countByEnumeratingWithState:&v34 objects:v42 count:16];
      }
      while (v22);
    }

    uint64_t v29 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)AudioBufferList buf = 136315138;
      unint64_t v45 = "-[ADCommandCenter _handleQuickStopCommandRoutedFromRemote:completion:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_INFO, "%s QuickStop: Dismissed firing timers.", buf, 0xCu);
    }

    id v3 = v33;
    goto LABEL_30;
  }
  if (v4)
  {
LABEL_30:
    id v30 = *(void (**)(void))(*(void *)(a1 + 40) + 16);
    goto LABEL_34;
  }
  id v31 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)AudioBufferList buf = 136315138;
    unint64_t v45 = "-[ADCommandCenter _handleQuickStopCommandRoutedFromRemote:completion:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_INFO, "%s QuickStop: Nothing to stop", buf, 0xCu);
  }
  id v30 = *(void (**)(void))(*(void *)(a1 + 40) + 16);
LABEL_34:
  v30();
}

void sub_1001D6C7C(uint64_t a1)
{
  id v2 = *(id *)(*(void *)(a1 + 32) + 40);
  if (objc_opt_respondsToSelector())
  {
    int v3 = AFSupportsSCDAFramework();
    unsigned int v4 = (id *)SCDAMonitor_ptr;
    if (!v3) {
      unsigned int v4 = (id *)AFMyriadMonitor_ptr;
    }
    id v5 = [*v4 sharedMonitor];
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_1001D6E10;
    v9[3] = &unk_10050CC00;
    void v9[4] = *(void *)(a1 + 32);
    id v6 = v2;
    uint64_t v7 = *(void *)(a1 + 56);
    id v10 = v6;
    uint64_t v13 = v7;
    id v11 = *(id *)(a1 + 40);
    id v12 = *(id *)(a1 + 48);
    [v5 waitForMyriadDecisionForReason:@"Perform two shot prompt." withCompletion:v9];

    goto LABEL_7;
  }
  if (*(void *)(a1 + 48))
  {
    id v8 = +[NSString stringWithFormat:@"%@ is incapable of performing fake two shot prompt.", v2];
    id v5 = +[AFError errorWithCode:15 description:v8 underlyingError:0];

    (*(void (**)(double, double))(*(void *)(a1 + 48) + 16))(0.0, 0.0);
LABEL_7:
  }
}

void sub_1001D6E10(uint64_t a1, char a2)
{
  int v3 = *(NSObject **)(*(void *)(a1 + 32) + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1001D6ED8;
  block[3] = &unk_1005060A8;
  char v11 = a2;
  id v4 = *(id *)(a1 + 40);
  uint64_t v5 = *(void *)(a1 + 64);
  id v7 = v4;
  uint64_t v10 = v5;
  id v8 = *(id *)(a1 + 48);
  id v9 = *(id *)(a1 + 56);
  dispatch_async(v3, block);
}

void sub_1001D6ED8(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    id v2 = *(void **)(a1 + 32);
    uint64_t v3 = *(void *)(a1 + 40);
    uint64_t v5 = *(void *)(a1 + 48);
    uint64_t v4 = *(void *)(a1 + 56);
    _[v2 adSpeechRecordingPerformTwoShotPromptWithType:v4 context:v3 completion:v5];
  }
  else
  {
    id v6 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)AudioBufferList buf = 136315138;
      uint64_t v10 = "-[ADCommandCenter speechManager:performTwoShotPromptWithType:context:completion:]_block_invoke_3";
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "%s Myriad lost, twoshot prompt dropped.", buf, 0xCu);
    }
    if (*(void *)(a1 + 48))
    {
      id v7 = +[NSString stringWithFormat:@"%@ two shot prompt was rejected.", *(void *)(a1 + 32)];
      id v8 = +[AFError errorWithCode:15 description:v7 underlyingError:0];

      (*(void (**)(double, double))(*(void *)(a1 + 48) + 16))(0.0, 0.0);
    }
  }
}

uint64_t sub_1001D70E4(uint64_t a1)
{
  *(unsigned char *)(*(void *)(a1 + 32) + 64_Block_object_dispose(&STACK[0x220], 8) = 0;
  uint64_t result = objc_opt_respondsToSelector();
  if (result)
  {
    uint64_t v3 = *(void *)(a1 + 40);
    uint64_t v4 = *(void **)(*(void *)(a1 + 32) + 40);
    return (uint64_t)[v4 adSpeechLanguageDetectorFailedWithError:v3];
  }
  return result;
}

void sub_1001D7220(uint64_t a1)
{
  if (*(void *)(*(void *)(a1 + 32) + 328))
  {
    id v2 = objc_alloc_init((Class)NSMutableDictionary);
    uint64_t v3 = *(void **)(a1 + 40);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    void v11[2] = sub_1001D73A8;
    void v11[3] = &unk_100506080;
    id v4 = v2;
    id v12 = v4;
    [v3 enumerateKeysAndObjectsUsingBlock:v11];
    id v5 = objc_alloc_init((Class)SASMultilingualDictationLanguageSelected);
    id v6 = [*(id *)(*(void *)(a1 + 32) + 328) currentRequestId];
    [v5 setRefId:v6];

    [v5 setLanguageDetected:*(void *)(a1 + 48)];
    [v5 setConfidenceScoresByLanguage:v4];
    [*(id *)(a1 + 32) _sendCommandToServer:v5];
    if (objc_opt_respondsToSelector()) {
      [*(id *)(*(void *)(a1 + 32) + 40) adSpeechRecordingDidDetectLanguage:*(void *)(a1 + 48) confidenceScores:*(void *)(a1 + 40) isConfident:*(unsigned __int8 *)(a1 + 56)];
    }
    *(unsigned char *)(*(void *)(a1 + 32) + 649) = 1;
    [*(id *)(a1 + 32) _stopLanguageDetectionWaitTimerIfNeeded];
    id v7 = *(void **)(*(void *)(a1 + 32) + 664);
    if (v7)
    {
      id v8 = objc_retainBlock(v7);
      uint64_t v9 = *(void *)(a1 + 32);
      uint64_t v10 = *(void **)(v9 + 664);
      *(void *)(v9 + 664) = 0;

      v8[2](v8);
    }
  }
}

void sub_1001D73A8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  [a3 floatValue];
  id v7 = *(void **)(a1 + 32);
  id v8 = +[NSNumber numberWithInteger:(int)llroundf(v6 * 1000.0)];
  [v7 setObject:v8 forKey:v5];
}

void sub_1001D74F8(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) context];
  id v7 = [v2 aceId];

  uint64_t v3 = [*(id *)(*(void *)(a1 + 40) + 328) currentRequestId];
  unsigned int v4 = [v7 isEqualToString:v3];

  if (v4)
  {
    id v5 = objc_alloc_init((Class)SASSpeechEndpointIdentified);
    float v6 = +[NSNumber numberWithLong:(uint64_t)*(double *)(a1 + 48)];
    [v5 setEndpointTimestamp:v6];

    [v5 setRefId:v7];
    [*(id *)(a1 + 40) _sendCommandToServer:v5];
  }
}

uint64_t sub_1001D7678(uint64_t a1)
{
  uint64_t result = objc_opt_respondsToSelector();
  if (result)
  {
    uint64_t v3 = *(void *)(a1 + 40);
    unsigned int v4 = *(void **)(*(void *)(a1 + 32) + 40);
    return (uint64_t)_[v4 adSpeechRecordingDidDetectStartPointWithContext:v3];
  }
  return result;
}

void sub_1001D77CC(uint64_t a1)
{
  id v2 = AFSiriLogContextSpeech;
  if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    *(_DWORD *)id v14 = 136315394;
    *(void *)&void v14[4] = "-[ADCommandCenter speechManager:recognitionDidCompleteWithError:secureOfflineOnlyRecognition:se"
                         "ssionUUID:statistics:]_block_invoke";
    *(_WORD *)&v14[12] = 2114;
    *(void *)&v14[14] = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s %{public}@", v14, 0x16u);
  }
  id v4 = *(id *)(a1 + 32);
  if (*(unsigned char *)(a1 + 64))
  {
    id v5 = +[NSMutableDictionary dictionaryWithDictionary:*(void *)(a1 + 32)];
    float v6 = [*(id *)(a1 + 40) dictationOptions];
    uint64_t v7 = [v6 interactionIdentifier];
    id v8 = (void *)v7;
    if (v7) {
      CFStringRef v9 = (const __CFString *)v7;
    }
    else {
      CFStringRef v9 = &stru_10050F7D8;
    }
    [v5 setObject:v9 forKeyedSubscript:@"dictationUIInteractionIdentifier"];

    uint64_t v10 = +[NSDictionary dictionaryWithDictionary:v5];

    id v4 = (id)v10;
  }
  objc_msgSend(*(id *)(a1 + 48), "_metrics_markLocalSpeechCompletedWithStatistics:", v4);
  uint64_t v11 = *(void *)(a1 + 56);
  if (!v11)
  {
    if (!*(unsigned char *)(a1 + 64)) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }
  if (*(unsigned char *)(*(void *)(a1 + 48) + 370))
  {
    id v12 = AFSiriLogContextSpeech;
    if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)id v14 = 136315394;
      *(void *)&void v14[4] = "-[ADCommandCenter speechManager:recognitionDidCompleteWithError:secureOfflineOnlyRecognition:"
                           "sessionUUID:statistics:]_block_invoke";
      *(_WORD *)&v14[12] = 2114;
      *(void *)&v14[14] = v11;
      uint64_t v13 = "%s Local speech recognition failed, and so did the session: %{public}@";
LABEL_21:
      _os_log_error_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, v13, v14, 0x16u);
      goto LABEL_16;
    }
    goto LABEL_16;
  }
  id v12 = AFSiriLogContextSpeech;
  if (*(unsigned char *)(a1 + 64))
  {
    if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)id v14 = 136315394;
      *(void *)&void v14[4] = "-[ADCommandCenter speechManager:recognitionDidCompleteWithError:secureOfflineOnlyRecognition:"
                           "sessionUUID:statistics:]_block_invoke";
      *(_WORD *)&v14[12] = 2114;
      *(void *)&v14[14] = v11;
      uint64_t v13 = "%s Local speech recognition failed: %{public}@";
      goto LABEL_21;
    }
LABEL_16:
    *(unsigned char *)(*(void *)(a1 + 48) + 370) = 0;
    objc_msgSend(*(id *)(a1 + 48), "_endSpeechRequestForCommand:withError:suppressAlert:secureOfflineOnlyDictation:", 0, *(void *)(a1 + 56), 1, *(unsigned __int8 *)(a1 + 64), *(_OWORD *)v14, *(void *)&v14[16]);
    goto LABEL_17;
  }
  if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)id v14 = 136315394;
    *(void *)&void v14[4] = "-[ADCommandCenter speechManager:recognitionDidCompleteWithError:secureOfflineOnlyRecognition:se"
                         "ssionUUID:statistics:]_block_invoke";
    *(_WORD *)&v14[12] = 2114;
    *(void *)&v14[14] = v11;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "%s Ignoring local speech recognition failure because the session is still active: %{public}@", v14, 0x16u);
  }
LABEL_17:
}

void sub_1001D7B48(uint64_t a1)
{
  id v2 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v14 = 136315138;
    id v15 = "-[ADCommandCenter speechManager:didProduceLocalLoggablePackage:sessionUUID:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s ", (uint8_t *)&v14, 0xCu);
  }
  uint64_t v3 = +[AFPreferences sharedPreferences];
  id v4 = [v3 siriDataSharingOptInStatus];

  id v5 = [*(id *)(a1 + 32) dictationOptions];
  if ([v5 forceOfflineRecognition])
  {
    float v6 = [*(id *)(a1 + 32) dictationOptions];
    unsigned int v7 = [v6 secureOfflineOnly];
  }
  else
  {
    unsigned int v7 = 0;
  }

  id v8 = +[AFPreferences sharedPreferences];
  unsigned int v9 = [v8 isDictationHIPAACompliant];

  if (!v9)
  {
    if (v7)
    {
      uint64_t v11 = *(void **)(a1 + 40);
      uint64_t v10 = *(void *)(a1 + 48);
      id v12 = [*(id *)(a1 + 32) dictationOptions];
      uint64_t v13 = [v12 interactionIdentifier];
      objc_msgSend(v11, "_metrics_markLocalSpeechPackage:interactionId:optedIn:", v10, v13, v4 == (id)1);
    }
  }
}

void sub_1001D7EC4(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) recognition];
  uint64_t v3 = [v2 phrases];
  id v4 = [v2 utterances];
  id v5 = [*(id *)(a1 + 32) rawRecognition];
  float v6 = [v5 phrases];
  unsigned int v7 = [v5 utterances];
  id v8 = [*(id *)(a1 + 40) dictationOptions];
  if (![v8 forceOfflineRecognition])
  {
    unsigned int v11 = 0;
    goto LABEL_5;
  }
  unsigned int v9 = [*(id *)(a1 + 40) dictationOptions];
  unsigned int v10 = [v9 secureOfflineOnly];

  if (v10)
  {
    id v8 = [*(id *)(a1 + 40) dictationOptions];
    unsigned int v11 = [v8 detectUtterances];
LABEL_5:

    goto LABEL_7;
  }
  unsigned int v11 = 0;
LABEL_7:
  id v12 = [*(id *)(a1 + 40) dictationOptions];
  unsigned int v13 = [v12 secureOfflineOnly];

  if (v13)
  {
    int v14 = AFSiriLogContextSpeech;
    if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)AudioBufferList buf = 136315138;
      uint64_t v51 = "-[ADCommandCenter speechManager:didRecognizePackage:sessionUUID:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "%s Phrases=<REDACTED>", buf, 0xCu);
    }
  }
  else
  {
    [v3 enumerateObjectsUsingBlock:&stru_100505FA0];
    [v4 enumerateObjectsUsingBlock:&stru_100505FE0];
  }
  id v15 = [*(id *)(a1 + 40) dictationOptions];
  id v16 = [v15 transcriptionMode];

  if (v16 != (id)3)
  {
    id v18 = [*(id *)(a1 + 40) dictationLanguages];
    __int16 v19 = [v18 firstObject];

    id v20 = *(unsigned char **)(a1 + 48);
    if (v20[371])
    {
      if (v20[368])
      {
        id v21 = AFSiriLogContextSpeech;
        if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)AudioBufferList buf = 136315138;
          uint64_t v51 = "-[ADCommandCenter speechManager:didRecognizePackage:sessionUUID:]_block_invoke";
          _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "%s Ignoring and canceling final local recognition because server results have arrived", buf, 0xCu);
        }
        [*(id *)(a1 + 40) cancelLocalRecognitionIfActive];
        goto LABEL_21;
      }
      if (!v20[370])
      {
        if (v20[648])
        {
          id v26 = _AFPreferencesMultilingualDictationTimeoutInMilliSeconds();
          id v27 = v26;
          if (v26)
          {
            [v26 doubleValue];
            double v29 = v28;
          }
          else
          {
            double v29 = 2000.0;
          }
        }
        else
        {
          double v29 = 2000.0;
        }
        if (![*(id *)(a1 + 40) isLocallyRecognizingInDictationMode]) {
          double v29 = 1000.0;
        }
        id v30 = AFSiriLogContextSpeech;
        if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)AudioBufferList buf = 136315394;
          uint64_t v51 = "-[ADCommandCenter speechManager:didRecognizePackage:sessionUUID:]_block_invoke";
          __int16 v52 = 2048;
          double v53 = v29;
          _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_INFO, "%s Deferring final local recognition results for %f seconds while waiting for the server", buf, 0x16u);
        }
        id v31 = [*(id *)(*(void *)(a1 + 48) + 328) currentRequestId];
        id v35 = [v31 copy];

        dispatch_time_t v32 = dispatch_time(0, (uint64_t)(v29 * 1000000.0));
        uint64_t v33 = *(void *)(a1 + 48);
        long long v36 = *(NSObject **)(v33 + 8);
        dispatch_time_t v37 = v32;
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472;
        block[2] = sub_1001D8420;
        block[3] = &unk_100506030;
        id v39 = v35;
        uint64_t v40 = v33;
        id v41 = v19;
        id v42 = v2;
        char v49 = v11;
        id v43 = *(id *)(a1 + 40);
        id v44 = v3;
        id v45 = v6;
        id v46 = v4;
        id v47 = v7;
        id v48 = *(id *)(a1 + 56);
        id v34 = v35;
        dispatch_after(v37, v36, block);

        goto LABEL_21;
      }
    }
    [v20 _handleLocalSpeechRecognitionForOfflineSupport:v2 logText:v11 ^ 1];
    uint64_t v22 = *(void *)(a1 + 48);
    uint64_t v23 = *(void *)(a1 + 56);
    id v24 = *(void **)(v22 + 40);
    uint64_t v25 = [*(id *)(v22 + 296) aceId];
    [v24 adSpeechRecordingDidRecognizePhrases:v3 rawPhrases:v6 utterances:v4 rawUtterances:v7 nluResult:0 sessionUUID:v23 refId:v25];

LABEL_21:
    goto LABEL_22;
  }
  __int16 v17 = AFSiriLogContextSpeech;
  if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)AudioBufferList buf = 136315138;
    uint64_t v51 = "-[ADCommandCenter speechManager:didRecognizePackage:sessionUUID:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "%s Not handling phraseRecognition because this is a phoneme transcription request", buf, 0xCu);
  }
LABEL_22:
}

void sub_1001D8420(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = [*(id *)(*(void *)(a1 + 40) + 328) currentRequestId];
  LOBYTE(v2) = [v2 isEqualToString:v3];

  if ((v2 & 1) == 0)
  {
    id v4 = AFSiriLogContextSpeech;
    if (!os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_INFO)) {
      return;
    }
    *(_DWORD *)AudioBufferList buf = 136315138;
    id v15 = "-[ADCommandCenter speechManager:didRecognizePackage:sessionUUID:]_block_invoke";
    id v5 = "%s Ignoring final local recognition because the previous request has already finished";
    goto LABEL_7;
  }
  if (*(unsigned char *)(*(void *)(a1 + 40) + 368))
  {
    id v4 = AFSiriLogContextSpeech;
    if (!os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_INFO)) {
      return;
    }
    *(_DWORD *)AudioBufferList buf = 136315138;
    id v15 = "-[ADCommandCenter speechManager:didRecognizePackage:sessionUUID:]_block_invoke";
    id v5 = "%s Ignoring final local recognition because the server won the race";
LABEL_7:
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, v5, buf, 0xCu);
    return;
  }
  +[AFAggregator logLocalRecognitionWonForLanguage:*(void *)(a1 + 48)];
  [*(id *)(a1 + 40) _handleLocalSpeechRecognitionForOfflineSupport:*(void *)(a1 + 56) logText:*(unsigned char *)(a1 + 112) == 0];
  if ([*(id *)(a1 + 64) isLocallyRecognizingInDictationMode])
  {
    float v6 = AFSiriLogContextSpeech;
    if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)AudioBufferList buf = 136315138;
      id v15 = "-[ADCommandCenter speechManager:didRecognizePackage:sessionUUID:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "%s Giving up on final server recognition because local won the race", buf, 0xCu);
    }
    unsigned int v7 = *(void **)(a1 + 40);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_1001D86A0;
    v8[3] = &unk_100506008;
    void v8[4] = v7;
    id v9 = *(id *)(a1 + 72);
    id v10 = *(id *)(a1 + 80);
    id v11 = *(id *)(a1 + 88);
    id v12 = *(id *)(a1 + 96);
    id v13 = *(id *)(a1 + 104);
    [v7 _handleSpeechRecognizedWithDelegateBlock:v8];
  }
}

void sub_1001D86A0(void *a1)
{
  uint64_t v1 = a1[4];
  uint64_t v2 = a1[5];
  uint64_t v3 = *(void **)(v1 + 40);
  uint64_t v4 = a1[6];
  uint64_t v5 = a1[7];
  uint64_t v6 = a1[8];
  uint64_t v7 = a1[9];
  id v8 = [*(id *)(v1 + 296) aceId];
  [v3 adSpeechRecordingDidRecognizePhrases:v2 rawPhrases:v4 utterances:v5 rawUtterances:v6 nluResult:0 sessionUUID:v7 refId:v8];
}

void sub_1001D8728(id a1, AFSpeechUtterance *a2, unint64_t a3, BOOL *a4)
{
  uint64_t v5 = a2;
  uint64_t v6 = AFSiriLogContextSpeech;
  if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_INFO))
  {
    int v7 = 136315650;
    id v8 = "-[ADCommandCenter speechManager:didRecognizePackage:sessionUUID:]_block_invoke";
    __int16 v9 = 2048;
    unint64_t v10 = a3;
    __int16 v11 = 2112;
    id v12 = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "%s Utterance[%lu]=%@", (uint8_t *)&v7, 0x20u);
  }
}

void sub_1001D8800(id a1, AFSpeechPhrase *a2, unint64_t a3, BOOL *a4)
{
  uint64_t v5 = a2;
  uint64_t v6 = AFSiriLogContextSpeech;
  if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_INFO))
  {
    int v7 = 136315650;
    id v8 = "-[ADCommandCenter speechManager:didRecognizePackage:sessionUUID:]_block_invoke";
    __int16 v9 = 2048;
    unint64_t v10 = a3;
    __int16 v11 = 2112;
    id v12 = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "%s Phrase[%lu]=%@", (uint8_t *)&v7, 0x20u);
  }
}

void sub_1001D8970(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "_metrics_markLocalEagerRecognitionCandidate:", *(void *)(a1 + 40));
  id v2 = objc_alloc_init((Class)SASServerBoundConfusionNetwork);
  uint64_t v3 = +[NSUUID UUID];
  uint64_t v4 = [v3 UUIDString];
  [v2 setAceId:v4];

  uint64_t v5 = [*(id *)(*(void *)(a1 + 32) + 296) aceId];
  [v2 setRefId:v5];

  uint64_t v6 = [*(id *)(a1 + 40) aceRecognition];
  [v2 setRawRecognition:v6];

  int v7 = AFSiriLogContextSpeech;
  if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_INFO))
  {
    int v8 = 136315394;
    __int16 v9 = "-[ADCommandCenter speechManager:didRecognizeRawEagerRecognitionCandidate:sessionUUID:]_block_invoke";
    __int16 v10 = 2112;
    id v11 = v2;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "%s Sending raw recognition to server %@", (uint8_t *)&v8, 0x16u);
  }
  [*(id *)(a1 + 32) _sendCommandToServer:v2];
}

void sub_1001D8BB8(id *a1)
{
  id v2 = [a1[4] lastObject];
  [v2 endTime];
  double v4 = v3;
  uint64_t v5 = [a1[5] dictationOptions];
  unsigned int v6 = [v5 secureOfflineOnly];

  if (v6)
  {
    unsigned int v7 = [a1[6] canLogWithSpeechManager:a1[5]];
    int v8 = AFSiriLogContextSpeech;
    if (!os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_INFO)) {
      goto LABEL_10;
    }
    if (v7) {
      CFStringRef v9 = (const __CFString *)a1[4];
    }
    else {
      CFStringRef v9 = @"<REDACTED>";
    }
    *(_DWORD *)AudioBufferList buf = 136315394;
    __int16 v17 = "-[ADCommandCenter speechManager:didRecognizeTokens:sessionUUID:]_block_invoke";
    __int16 v18 = 2112;
    CFStringRef v19 = v9;
  }
  else
  {
    int v8 = AFSiriLogContextSpeech;
    if (!os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_INFO)) {
      goto LABEL_10;
    }
    CFStringRef v10 = (const __CFString *)a1[4];
    *(_DWORD *)AudioBufferList buf = 136315394;
    __int16 v17 = "-[ADCommandCenter speechManager:didRecognizeTokens:sessionUUID:]_block_invoke";
    __int16 v18 = 2112;
    CFStringRef v19 = v10;
  }
  _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "%s %@", buf, 0x16u);
LABEL_10:
  objc_msgSend(a1[6], "_metrics_markLocalPartialSpeechRecognition");
  id v11 = a1[6];
  if (v11[371])
  {
    id v12 = AFSiriLogContextSpeech;
    if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)AudioBufferList buf = 136315138;
      __int16 v17 = "-[ADCommandCenter speechManager:didRecognizeTokens:sessionUUID:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "%s Ignoring partial local recognitions because server results have arrived", buf, 0xCu);
    }
  }
  else
  {
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    _OWORD v13[2] = sub_1001D8E1C;
    v13[3] = &unk_10050DCB8;
    void v13[4] = v11;
    id v14 = a1[4];
    id v15 = a1[7];
    [v11 _handlePartialSpeechRecognitionForElapsedTime:v13 WithDelegateBlock:v4];
  }
}

id sub_1001D8E1C(void *a1)
{
  return _[*(id *)(a1[4] + 40) adSpeechRecordingDidRecognizeTokens:a1[5] nluResult:0 sessionUUID:a1[6]];
}

void sub_1001D8EF8(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) valueForKey:@"ModelInfo"];
  if (objc_opt_respondsToSelector()) {
    [*(id *)(*(void *)(a1 + 40) + 40) adSpeechDidBeginLocalRecognitionWithModelInfo:v2 sessionUUID:*(void *)(a1 + 48)];
  }
  objc_msgSend(*(id *)(a1 + 40), "_metrics_markLocalSpeechStartedWithContext:", *(void *)(a1 + 32));
}

void sub_1001D9104(void *a1)
{
  if (objc_opt_respondsToSelector())
  {
    [*(id *)(a1[4] + 48) adAudioFileFinishedWriting:a1[5] error:a1[6] context:a1[7]];
    uint64_t v2 = a1[4];
    double v3 = *(void **)(v2 + 48);
    *(void *)(v2 + 4_Block_object_dispose(&STACK[0x220], 8) = 0;
  }
}

id sub_1001D9390(void *a1)
{
  return [*(id *)(a1[4] + 40) adSpeechRecordingDidFail:a1[5] context:a1[6]];
}

void sub_1001D93A4(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) context];
  double v3 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 328);
    int v13 = 136315650;
    id v14 = "-[ADCommandCenter speechManager:didFailWithError:context:]_block_invoke_2";
    __int16 v15 = 2112;
    uint64_t v16 = v4;
    __int16 v17 = 2112;
    __int16 v18 = v2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "%s %@ %@", (uint8_t *)&v13, 0x20u);
  }
  uint64_t v5 = *(id **)(a1 + 40);
  if (v2 || !v5[41])
  {
    unsigned int v6 = [v5[41] currentRequestId];
    unsigned int v7 = [v2 aceId];
    unsigned int v8 = [v6 isEqualToString:v7];

    if (v8)
    {
      [*(id *)(a1 + 40) _sendCancelSpeechForCommand:v2];
      CFStringRef v9 = *(id **)(a1 + 40);
      CFStringRef v10 = [v9[41] currentRequestId];
      id v11 = NSStringFromSelector(*(SEL *)(a1 + 56));
      [v9 _removeOutstandingRequestId:v10 forReason:v11];
    }
    if (v2)
    {
      id v12 = [*(id *)(a1 + 40) _sessionManager];
      [v12 endRetryableRequestForCommand:v2];
    }
    [*(id *)(a1 + 40) _completeRequestForCurrentDelegate:0 error:*(void *)(a1 + 48)];
    [*(id *)(a1 + 40) _setCurrentRequest:0];
    [*(id *)(a1 + 40) _requestDidEnd];
    [*(id *)(a1 + 32) setContext:0];
    uint64_t v5 = *(id **)(a1 + 40);
  }
  [v5 _clearSpeechDelegateState];
  [*(id *)(a1 + 40) _speechCaptureCompleted];
}

id sub_1001D9738(uint64_t a1)
{
  return _[*(id *)(*(void *)(a1 + 32) + 40) adSpeechRecordingDidCancelWithContext:*(void *)(a1 + 40)];
}

void sub_1001D9744(uint64_t a1)
{
  id v5 = [*(id *)(a1 + 32) context];
  if (v5)
  {
    uint64_t v2 = [*(id *)(*(void *)(a1 + 40) + 328) currentRequestId];
    double v3 = [v5 aceId];
    unsigned int v4 = [v2 isEqualToString:v3];

    if (v4)
    {
      [*(id *)(a1 + 40) _requestDidEnd];
      [*(id *)(a1 + 40) _sendCancelSpeechForCommand:v5];
    }
    [*(id *)(a1 + 32) setContext:0];
  }
  [*(id *)(a1 + 40) _clearSpeechDelegateState];
  [*(id *)(a1 + 40) _speechCaptureCompleted];
}

id sub_1001D9A68(uint64_t a1)
{
  uint64_t v2 = +[NSProcessInfo processInfo];
  [v2 systemUptime];
  *(void *)(*(void *)(a1 + 32) + 520) = v3;

  uint64_t v4 = *(void *)(a1 + 40);
  id v5 = *(void **)(*(void *)(a1 + 32) + 40);
  return [v5 adSpeechRecordingDidEndWithContext:v4];
}

void sub_1001D9AC4(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) context];
  id v3 = [v2 aceId];

  if (v3) {
    [*(id *)(a1 + 32) setContext:0];
  }
  [*(id *)(a1 + 40) _speechCaptureCompleted];
  if (*(void *)(a1 + 48) == 4)
  {
    [*(id *)(a1 + 40) _requestDidEnd];
    [*(id *)(a1 + 40) _completeRequestForCurrentDelegate:1 error:0];
  }
}

void sub_1001D9D68(uint64_t a1)
{
  if (!*(unsigned char *)(*(void *)(a1 + 32) + 374) && AFIsInternalInstall() && AFIsHorseman())
  {
    uint64_t v2 = +[ADMultiUserTestSupport sharedService];
    id v3 = [v2 getDebugVoiceIdScores];

    if (v3) {
      id v4 = objc_msgSend(*(id *)(a1 + 32), "_handleConfidenceScores:classification:classifiedUser:unknownUserScore:duration:version:thresholdingType:assetVersion:", &__NSDictionary0__struct, 3, kCSSpeakerIdentificationVTInvocationScoreThresholdingType, &stru_10050F7D8);
    }
  }
}

void sub_1001D9E20(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) context];
  id v3 = [v2 aceId];

  if (v3)
  {
    id v4 = objc_alloc_init((Class)SASFinishSpeech);
    [v4 setPacketCount:*(void *)(a1 + 56)];
    [v4 setRefId:v3];
    objc_msgSend(v4, "ad_setAFEndpointMode:", *(void *)(a1 + 64));
    objc_msgSend(v4, "ad_setCSEndpointerMetrics:", *(void *)(a1 + 40));
    id v5 = (void *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      unsigned int v6 = v5;
      id v7 = [v4 packetCount];
      [v4 totalAudioRecorded];
      int v14 = 136315906;
      __int16 v15 = "-[ADCommandCenter speechManager:didReceiveLastAudioBufferWithEndpointMode:totalPacketCount:endpointerMetrics"
            ":context:]_block_invoke_2";
      __int16 v16 = 2112;
      id v17 = v4;
      __int16 v18 = 2048;
      id v19 = v7;
      __int16 v20 = 2048;
      uint64_t v21 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "%s Sending %@ (packetCount = %zd, totalAudioRecorded = %f)...", (uint8_t *)&v14, 0x2Au);
    }
    [*(id *)(a1 + 48) _sendCommandToServer:v4];
    uint64_t v9 = *(void *)(a1 + 48);
    CFStringRef v10 = *(void **)(v9 + 312);
    *(void *)(v9 + 312) = v4;
    id v11 = v4;

    id v12 = +[SiriCoreNetworkActivityTracing sharedNetworkActivityTracing];
    [v12 networkActivityStop:3 withReason:2 andError:0];

    int v13 = +[SNNetworkActivityTracing sharedInstance];

    [v13 networkActivityStop:3 withReason:2 andError:0 completion:0];
  }
}

id sub_1001DA1B4(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_acousticId_musicWasDetected");
}

id sub_1001DA274(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_acousticId_handleFingerprint:duration:", *(void *)(a1 + 40), *(double *)(a1 + 48));
}

void sub_1001DA434(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(unsigned char *)(v2 + 370))
  {
    if ([*(id *)(a1 + 40) isLocallyRecognizing])
    {
      id v3 = AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)AudioBufferList buf = 136315138;
        __int16 v15 = "-[ADCommandCenter speechManager:capturedPackets:atTimestamp:totalCount:context:]_block_invoke";
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "%s Not sending audio packet to session because it has already failed and local recognition has taken over", buf, 0xCu);
      }
      return;
    }
    uint64_t v2 = *(void *)(a1 + 32);
  }
  uint64_t v4 = *(void *)(a1 + 56);
  if ([*(id *)(v2 + 288) usePrelisteningMode])
  {
    double v5 = *(double *)(a1 + 64);
    uint64_t v6 = *(void *)(a1 + 32);
    double v7 = *(double *)(v6 + 408);
    if (v5 < v7)
    {
      uint64_t v8 = AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)AudioBufferList buf = 136315650;
        __int16 v15 = "-[ADCommandCenter speechManager:capturedPackets:atTimestamp:totalCount:context:]_block_invoke";
        __int16 v16 = 2048;
        double v17 = v5;
        __int16 v18 = 2048;
        double v19 = v7;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "%s Ignoring prelistening speech data from %lf. Threshold is %lf", buf, 0x20u);
        uint64_t v6 = *(void *)(a1 + 32);
      }
      *(void *)(v6 + 416) = *(void *)(a1 + 56);
      return;
    }
    uint64_t v4 = *(void *)(a1 + 56) - *(void *)(v6 + 416);
  }
  uint64_t v9 = [*(id *)(a1 + 40) context];
  id v13 = [v9 aceId];

  CFStringRef v10 = [*(id *)(*(void *)(a1 + 32) + 328) currentRequestId];
  unsigned int v11 = [v13 isEqualToString:v10];

  if (v11)
  {
    id v12 = objc_alloc_init((Class)SiriCoreSpeechPacket);
    [v12 setPackets:*(void *)(a1 + 48)];
    [v12 setPacketNumber:v4];
    [v12 setRefId:v13];
    [*(id *)(a1 + 32) _sendSessionObject:v12 opportunistically:0];
  }
}

void sub_1001DA7F0(id *a1)
{
  uint64_t v2 = [a1[4] context];
  id v3 = [v2 aceId];

  uint64_t v4 = [*((id *)a1[5] + 41) currentRequestId];
  unsigned int v5 = [v3 isEqualToString:v4];

  if (v5)
  {
    if (([a1[6] isEndAlertInfo] & 1) == 0)
    {
      id v6 = objc_alloc_init((Class)SASUpdateAudioInfo);
      objc_msgSend(v6, "ad_updateWithRecordingInfo:speechRequestOptions:clientConfiguration:", a1[6], *((void *)a1[5] + 36), *((void *)a1[5] + 63));
      [v6 setRefId:v3];
      [a1[5] _sendCommandToServer:v6];
    }
    id v7 = [a1[6] audioSessionSetActiveEndHostTime];
    id v8 = [a1[6] firstBufferHostTime];
    if (v7 > v8)
    {
      id v9 = v8;
      if (v8)
      {
        CFStringRef v10 = AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
        {
          int v14 = 136315650;
          __int16 v15 = "-[ADCommandCenter speechManager:didUpdateRecordingWithInfo:context:]_block_invoke";
          __int16 v16 = 2048;
          id v17 = v9;
          __int16 v18 = 2048;
          id v19 = v7;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "%s firstBufferHostTime = %llu, audioSessionSetActiveEndHostTime = %llu", (uint8_t *)&v14, 0x20u);
        }
        id v11 = objc_alloc_init((Class)SASSetAudioDuckingDelay);
        id v12 = +[NSNumber numberWithUnsignedLongLong:AFMachAbsoluteTimeGetMilliseconds()];
        [v11 setPreTriggerToDuckingEndDuration:v12];

        mach_absolute_time();
        id v13 = +[NSNumber numberWithUnsignedLongLong:AFMachAbsoluteTimeGetMilliseconds()];
        [v11 setDuckingEventSyncDelay:v13];

        [v11 setRefId:v3];
        [a1[5] _sendCommandToServer:v11];
      }
    }
  }
}

void sub_1001DAA18(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) route];
  id v3 = +[ADBluetoothManager sharedInstance];
  uint64_t v4 = [v3 deviceWithRecordingInfo:*(void *)(a1 + 32)];

  unsigned int v5 = [*(id *)(a1 + 32) isDucking];
  unsigned int v6 = [*(id *)(a1 + 32) triggeredTwoShotBorealis];
  id v7 = [*(id *)(a1 + 32) estimatedSpeechEndHostTime];
  id v8 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v11 = 136316418;
    id v12 = "-[ADCommandCenter speechManager:didUpdateRecordingWithInfo:context:]_block_invoke";
    __int16 v13 = 2112;
    int v14 = v2;
    __int16 v15 = 2112;
    __int16 v16 = v4;
    __int16 v17 = 1024;
    unsigned int v18 = v5;
    __int16 v19 = 1024;
    unsigned int v20 = v6;
    __int16 v21 = 2048;
    id v22 = v7;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "%s recordRoute = %@, bluetoothDevice = %@, isDucking = %d, isTwoShot = %d, speechEndHostTime = %llu", (uint8_t *)&v11, 0x36u);
  }
  id v9 = *(void **)(*(void *)(a1 + 40) + 40);
  CFStringRef v10 = [*(id *)(a1 + 32) route];
  objc_msgSend(v9, "adSpeechRecordingDidChangeAVRecordRoute:bluetoothDevice:isDucking:isTwoShot:speechEndHostTime:context:", v10, v4, objc_msgSend(*(id *)(a1 + 32), "isDucking"), objc_msgSend(*(id *)(a1 + 32), "triggeredTwoShotBorealis"), objc_msgSend(*(id *)(a1 + 32), "estimatedSpeechEndHostTime"), *(void *)(a1 + 48));
}

void sub_1001DAE60(id *a1)
{
  uint64_t v2 = (void *)*((void *)a1[4] + 5);
  id v10 = [a1[5] route];
  id v3 = [a1[5] audioSessionID];
  uint64_t v4 = +[ADBluetoothManager sharedInstance];
  unsigned int v5 = [v4 deviceWithRecordingInfo:a1[5]];
  unsigned int v6 = [a1[4] _sessionManager];
  id v7 = [a1[6] sessionUUID];
  id v8 = [v6 sessionRequestIdForRefId:v7];
  id v9 = [a1[7] dictationOptions];
  [v2 adSpeechRecordingDidBeginOnAVRecordRoute:v10 audioSessionID:v3 bluetoothDevice:v5 sessionRequestUUID:v8 dictationOptions:v9 context:a1[6]];
}

void sub_1001DAF7C(uint64_t a1)
{
  *(void *)(*(void *)(a1 + 32) + 520) = 0;
  uint64_t v2 = [*(id *)(a1 + 40) route];
  if (AFRecordRouteIsHearst())
  {
  }
  else
  {
    int v3 = *(unsigned __int8 *)(*(void *)(a1 + 32) + 532);

    if (v3)
    {
      uint64_t v4 = (void *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
      {
        unsigned int v5 = *(void **)(a1 + 40);
        unsigned int v6 = v4;
        id v7 = [v5 route];
        int v16 = 136315394;
        __int16 v17 = "-[ADCommandCenter speechManager:didStartRecordingWithInfo:context:]_block_invoke";
        __int16 v18 = 2112;
        __int16 v19 = v7;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "%s 🎧 Recording route %@ != BluetoothDoAP, ignoring headphones' authenticated state", (uint8_t *)&v16, 0x16u);
      }
      [*(id *)(a1 + 32) _setHeadphonesAuthenticated:0];
    }
  }
  if ([*(id *)(a1 + 40) isFingerprintOnly])
  {
    id v8 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      int v16 = 136315138;
      __int16 v17 = "-[ADCommandCenter speechManager:didStartRecordingWithInfo:context:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "%s Fingerprint only request not sending start speech", (uint8_t *)&v16, 0xCu);
    }
  }
  else if ([*(id *)(a1 + 40) isSecureOfflineOnly])
  {
    id v9 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      int v16 = 136315138;
      __int16 v17 = "-[ADCommandCenter speechManager:didStartRecordingWithInfo:context:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "%s Secure offline request not sending start speech", (uint8_t *)&v16, 0xCu);
    }
    id v10 = *(void **)(a1 + 32);
    int v11 = [*(id *)(a1 + 48) sessionUUID];
    [v10 _setCurrentRequestWithRequestId:v11];
  }
  else
  {
    id v12 = *(void **)(a1 + 32);
    if (v12[37])
    {
      id v13 = objc_alloc_init((Class)SASUpdateAudioInfo);
      objc_msgSend(v13, "ad_updateWithRecordingInfo:speechRequestOptions:clientConfiguration:", *(void *)(a1 + 40), *(void *)(*(void *)(a1 + 32) + 288), *(void *)(*(void *)(a1 + 32) + 504));
      int v14 = [*(id *)(*(void *)(a1 + 32) + 296) aceId];
      [v13 setRefId:v14];

      if (objc_msgSend(v13, "ad_isDifferentFromStartSpeech:", *(void *)(*(void *)(a1 + 32) + 296)))
      {
        [*(id *)(a1 + 32) _sendCommandToServer:v13];
      }
      else
      {
        __int16 v15 = AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
        {
          int v16 = 136315138;
          __int16 v17 = "-[ADCommandCenter speechManager:didStartRecordingWithInfo:context:]_block_invoke";
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "%s Recording Info didn't change, not sending update audio", (uint8_t *)&v16, 0xCu);
        }
      }
    }
    else
    {
      [v12 _sendStartSpeechCommandWithSpeechManager:*(void *)(a1 + 56) info:*(void *)(a1 + 40) context:*(void *)(a1 + 48)];
    }
  }
}

id sub_1001DB3E4(uint64_t a1)
{
  *(void *)(*(void *)(a1 + 32) + 416) = 0;
  [*(id *)(*(void *)(a1 + 32) + 40) adSpeechRecordingWillBeginWithInputAudioPowerXPCWrapper:*(void *)(a1 + 40) context:*(void *)(a1 + 48)];
  uint64_t v2 = *(void **)(a1 + 32);
  double v3 = 0.0;
  if (!*(unsigned char *)(a1 + 64)) {
    double v3 = *(double *)(a1 + 56);
  }
  return _[v2 _awdRecordRecordingWillStart:v3];
}

void sub_1001DB8E4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  unsigned int v6 = a3;
  id v7 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    CFStringRef v8 = &stru_10050F7D8;
    uint64_t v9 = *(void *)(a1 + 32);
    uint64_t v10 = *(void *)(a1 + 40);
    if (v6) {
      CFStringRef v8 = v6;
    }
    int v11 = 136316162;
    id v12 = "-[ADCommandCenter _trySendingShowRequestHandlingStatusForAsrOnDevice:startSpeechRequestId:]_block_invoke";
    __int16 v13 = 2112;
    uint64_t v14 = v9;
    __int16 v15 = 2112;
    uint64_t v16 = v10;
    __int16 v17 = 2112;
    id v18 = v5;
    __int16 v19 = 2112;
    CFStringRef v20 = v8;
    _os_log_debug_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "%s #AsrOnServer Sent SAUIShowRequestHandlingStatus with asrStatus = %@ for startSpeechRequestId = %@ response = %@ error = %@", (uint8_t *)&v11, 0x34u);
  }
}

void sub_1001DCD90(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v5 = sub_1000D4598(v4);
  if (v5)
  {
    id v6 = objc_alloc_init((Class)ORCHSchemaORCHServerFallbackInitiated);
    [v6 setFallbackReason:1];
    if ((AFIsSpeechAssetAvailableFromUodStatus() & 1) == 0) {
      [v6 addMissingAsset:1];
    }
    if ((AFIsMorphunAssetAvailableFromUodStatus() & 1) == 0) {
      [v6 addMissingAsset:3];
    }
    if ((AFIsNLAssetAvailableFromUodStatus() & 1) == 0) {
      [v6 addMissingAsset:2];
    }
    id v7 = objc_alloc_init((Class)ORCHSchemaORCHServerFallbackContext);
    [v7 setStartedOrChanged:v6];
    id v8 = v7;
    id v9 = v5;
    id v10 = objc_alloc_init((Class)ORCHSchemaORCHClientEvent);
    [v10 setServerFallbackContext:v8];

    id v11 = objc_alloc_init((Class)ORCHSchemaORCHClientEventMetadata);
    [v11 setRequestId:v9];

    [v10 setEventMetadata:v11];
    id v12 = +[AssistantSiriAnalytics sharedStream];
    [v12 emitMessage:v10];
  }
  else
  {
    __int16 v13 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      int v14 = 136315394;
      __int16 v15 = "_EmitServerFallbackMessageForMissingAssets";
      __int16 v16 = 2112;
      id v17 = v4;
      _os_log_error_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "%s The requestId=%@ is malformed for request", (uint8_t *)&v14, 0x16u);
    }
  }
}

void sub_1001DCF94(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v10 = a2;
  id v4 = [v3 audioSource];
  [v10 setAudioSource:v4];

  id v5 = [*(id *)(a1 + 32) audioDestination];
  [v10 setAudioDestination:v5];

  [v10 setResponseMode:*(void *)(a1 + 40)];
  objc_msgSend(v10, "setIsEyesFree:", objc_msgSend(*(id *)(*(void *)(a1 + 48) + 288), "isEyesFree"));
  [v10 setIsVoiceTriggerEnabled:sub_1001FD6CC()];
  objc_msgSend(v10, "setIsTextToSpeechEnabled:", objc_msgSend(*(id *)(*(void *)(a1 + 48) + 16), "adTextToSpeechIsMuted") ^ 1);
  [v10 setIsTriggerlessFollowup:*(unsigned __int8 *)(a1 + 56)];
  id v6 = [*(id *)(a1 + 48) _bargeInModes];
  [v10 setBargeInModes:v6];

  id v7 = [*(id *)(a1 + 48) _approximatePreviousTTSInterval:0];
  [v10 setApproximatePreviousTTSInterval:v7];

  id v8 = [*(id *)(a1 + 48) _restrictedCommands];
  [v10 setDeviceRestrictions:v8];

  id v9 = [*(id *)(a1 + 32) voiceTriggerEventInfo];
  [v10 setVoiceTriggerEventInfo:v9];

  objc_msgSend(v10, "setVoiceAudioSessionId:", objc_msgSend(*(id *)(a1 + 48), "_sharedVoiceAudioSessionID"));
  objc_msgSend(v10, "setIsSystemApertureEnabled:", objc_msgSend(*(id *)(*(void *)(a1 + 48) + 288), "isSystemApertureEnabled"));
  objc_msgSend(v10, "setIsLiveActivitiesSupported:", objc_msgSend(*(id *)(*(void *)(a1 + 48) + 288), "isLiveActivitiesSupported"));
  objc_msgSend(v10, "setIsInAmbient:", objc_msgSend(*(id *)(*(void *)(a1 + 48) + 288), "isInAmbient"));
  [v10 setIsDeviceShowingLockScreen:*(unsigned __int8 *)(*(void *)(a1 + 48) + 513)];
  [v10 setIsDeviceLocked:*(unsigned __int8 *)(*(void *)(a1 + 48) + 512)];
}

uint64_t sub_1001DD174(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t isKindOfClass = a2;
  uint64_t v6 = isKindOfClass;
  if (!a3)
  {
    uint64_t v8 = isKindOfClass;
    objc_opt_class();
    uint64_t isKindOfClass = objc_opt_isKindOfClass();
    uint64_t v6 = v8;
    if (isKindOfClass)
    {
      uint64_t isKindOfClass = (uint64_t)[*(id *)(a1 + 32) _saSetMultilingualDictationConfig:v8 completion:0];
      uint64_t v6 = v8;
    }
  }
  return _objc_release_x1(isKindOfClass, v6);
}

void sub_1001DD2E8(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) codec];

  if (v2)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    id v3 = *(void **)(a1 + 40);
    uint64_t v5 = *(void *)(a1 + 48);
    uint64_t v6 = *(void *)(a1 + 56);
    [v3 _sendStartSpeechCommandWithSpeechManager:v5 info:v4 context:v6];
  }
}

uint64_t sub_1001DD46C(uint64_t a1)
{
  uint64_t result = objc_opt_respondsToSelector();
  if (result)
  {
    uint64_t v3 = *(void *)(a1 + 40);
    uint64_t v4 = *(void **)(*(void *)(a1 + 32) + 40);
    return (uint64_t)_[v4 adSpeechRecognitionWillBeginRecognitionUpdateForTask:v3];
  }
  return result;
}

void sub_1001DE784(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 56);
  if (v2)
  {
    uint64_t v3 = objc_retainBlock(v2);
  }
  else
  {
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472;
    v17[2] = sub_1001DE990;
    v17[3] = &unk_100505BB0;
    uint64_t v4 = *(void **)(a1 + 40);
    void v17[4] = *(void *)(a1 + 32);
    id v18 = v4;
    uint64_t v3 = objc_retainBlock(v17);
  }
  if (!*(void *)(a1 + 48))
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      id v5 = [*(id *)(a1 + 40) description];
    }
  }
  if (AFSupportsHALDeviceRouting())
  {
    id v6 = *(id *)(a1 + 40);
    id v7 = +[ADPreferences sharedPreferences];
    uint64_t v8 = [v7 sharedUserIdentifier];

    id v9 = [*(id *)(a1 + 32) _deviceRouter];
    id v10 = *(void **)(a1 + 48);
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    void v12[2] = sub_1001DE9A4;
    void v12[3] = &unk_100505F60;
    void v12[4] = *(void *)(a1 + 32);
    id v13 = v6;
    id v14 = v10;
    id v15 = *(id *)(a1 + 40);
    __int16 v16 = v3;
    id v11 = v6;
    [v9 getPreferredDeviceToHandleCommand:v11 logNearbyDeviceMetrics:1 executionContext:v14 sharedUserID:v8 completion:v12];
  }
  else
  {
    [*(id *)(a1 + 32) _handleCommand:*(void *)(a1 + 40) executionContext:*(void *)(a1 + 48) completion:v3];
  }
}

id sub_1001DE990(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _[*(id *)(a1 + 32) _handleClientReply:a2 error:a3 forSessionCommand:*(void *)(a1 + 40)];
}

void sub_1001DE9A4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = *(NSObject **)(v7 + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1001DEABC;
  block[3] = &unk_100507D58;
  id v13 = v5;
  uint64_t v14 = v7;
  id v15 = *(id *)(a1 + 40);
  id v16 = *(id *)(a1 + 48);
  id v17 = *(id *)(a1 + 56);
  id v9 = *(id *)(a1 + 64);
  id v18 = v6;
  id v19 = v9;
  id v10 = v6;
  id v11 = v5;
  dispatch_async(v8, block);
}

void sub_1001DEABC(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) peerInfo];
  uint64_t v3 = *(void **)(a1 + 40);
  if (v2)
  {
    uint64_t v4 = *(void *)(a1 + 48);
    id v5 = [*(id *)(a1 + 32) commandRelayProxyIdentifier];
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472;
    v19[2] = sub_1001DECD4;
    v19[3] = &unk_100505F10;
    void v19[4] = *(void *)(a1 + 40);
    uint64_t v6 = *(void *)(a1 + 56);
    id v20 = *(id *)(a1 + 64);
    id v21 = *(id *)(a1 + 56);
    id v26 = *(id *)(a1 + 80);
    id v22 = *(id *)(a1 + 48);
    id v23 = v2;
    id v24 = *(id *)(a1 + 32);
    id v25 = *(id *)(a1 + 72);
    objc_msgSend(v3, "_remoteExecute_remoteDeviceExecuteCommand:onPeer:allowsRelay:throughProxyDevice:executionContext:completion:", v4, v23, 1, v5, v6, v19);

    uint64_t v7 = v20;
  }
  else
  {
    uint64_t v9 = *(void *)(a1 + 56);
    uint64_t v8 = *(void *)(a1 + 64);
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    _OWORD v13[2] = sub_1001DEE2C;
    v13[3] = &unk_100505F38;
    id v18 = *(id *)(a1 + 80);
    id v10 = *(id *)(a1 + 32);
    uint64_t v11 = *(void *)(a1 + 40);
    id v12 = *(void **)(a1 + 48);
    id v14 = v10;
    uint64_t v15 = v11;
    id v16 = v12;
    id v17 = *(id *)(a1 + 72);
    [v3 _handleCommand:v8 executionContext:v9 completion:v13];

    uint64_t v7 = v18;
  }
}

void sub_1001DECD4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = *(NSObject **)(v7 + 8);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  void v11[2] = sub_1001DEEFC;
  void v11[3] = &unk_100505EE8;
  void v11[4] = v7;
  id v12 = v5;
  id v13 = v6;
  id v14 = *(id *)(a1 + 40);
  id v15 = *(id *)(a1 + 48);
  id v20 = *(id *)(a1 + 88);
  id v16 = *(id *)(a1 + 56);
  id v17 = *(id *)(a1 + 64);
  id v18 = *(id *)(a1 + 72);
  id v19 = *(id *)(a1 + 80);
  id v9 = v6;
  id v10 = v5;
  dispatch_async(v8, v11);
}

void sub_1001DEE2C(void *a1, void *a2, void *a3)
{
  uint64_t v5 = a1[8];
  id v6 = *(void (**)(uint64_t, id, id))(v5 + 16);
  id v7 = a3;
  id v8 = a2;
  v6(v5, v8, v7);
  id v9 = (void *)a1[4];
  if (v9) {
    uint64_t v10 = (uint64_t)[v9 proximity];
  }
  else {
    uint64_t v10 = 4000;
  }
  uint64_t v11 = (void *)a1[5];
  uint64_t v12 = a1[6];
  AFProductType();
  id v13 = (id)objc_claimAutoreleasedReturnValue();
  [v11 _logCrossDeviceCommandEndedMetricsForCommand:v12 targetProductType:v13 targetDeviceID:0 targetDeviceContextIdentifier:0 targetProximity:v10 coreAnalyticsEvent:a1[7] response:v8 error:v7];
}

void sub_1001DEEFC(uint64_t a1)
{
  [*(id *)(a1 + 32) _handleCommandResponse:*(void *)(a1 + 40) error:*(void *)(a1 + 48) forCommand:*(void *)(a1 + 56) executionContext:*(void *)(a1 + 64) completion:*(void *)(a1 + 104)];
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 72);
  id v6 = [*(id *)(a1 + 80) productType];
  uint64_t v4 = [*(id *)(a1 + 80) idsDeviceUniqueIdentifier];
  uint64_t v5 = [*(id *)(a1 + 88) contextIdentifier];
  objc_msgSend(v2, "_logCrossDeviceCommandEndedMetricsForCommand:targetProductType:targetDeviceID:targetDeviceContextIdentifier:targetProximity:coreAnalyticsEvent:response:error:", v3, v6, v4, v5, objc_msgSend(*(id *)(a1 + 88), "proximity"), *(void *)(a1 + 96), *(void *)(a1 + 40), *(void *)(a1 + 48));
}

void sub_1001DF2D8(uint64_t a1, void *a2)
{
  id v9 = a2;
  id v3 = objc_alloc_init((Class)SAPerformDataDetectionMatch);
  uint64_t v4 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [v9 range]);
  [v3 setLocation:v4];

  [v9 range];
  id v6 = +[NSNumber numberWithUnsignedInteger:v5];
  [v3 setLength:v6];

  if ([v9 resultType] == (id)32)
  {
    [v3 setDataDetectionType:SAPerformDataDetectionMatchDataDetectionTypeLinkValue];
    id v7 = [v9 URL];
    id v8 = [v7 absoluteString];
    [v3 setValue:v8];
  }
  [*(id *)(a1 + 32) addObject:v3];
}

void sub_1001DF60C(uint64_t a1)
{
  uint64_t v2 = (void *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    id v3 = *(void **)(*(void *)(a1 + 32) + 664);
    uint64_t v4 = v2;
    id v5 = objc_retainBlock(v3);
    int v10 = 136315394;
    uint64_t v11 = "-[ADCommandCenter _startLanguageDetectionWaitTimer]_block_invoke";
    __int16 v12 = 2112;
    id v13 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%s _languageDetectionWaitTimer fired. Executing _multilingualSpeechRecognizedCommandHandlerBlock %@", (uint8_t *)&v10, 0x16u);
  }
  id v6 = *(void **)(*(void *)(a1 + 32) + 664);
  if (v6)
  {
    id v7 = objc_retainBlock(v6);
    uint64_t v8 = *(void *)(a1 + 32);
    id v9 = *(void **)(v8 + 664);
    *(void *)(v8 + 664) = 0;

    v7[2](v7);
  }
}

void sub_1001E01F0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc_init((Class)SASExtractSpeechDataCompleted);
  id v5 = [v3 absoluteString];
  [v4 setSpeechDataUrl:v5];

  if (*(void *)(a1 + 32) && [*(id *)(a1 + 40) isFromRemote])
  {
    id v6 = +[NSData dataWithContentsOfURL:v3];
    [v4 setSpeechData:v6];
  }
  id v7 = (void *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v8 = v7;
    id v9 = [v4 speechDataUrl];
    int v10 = [v4 speechData];
    int v11 = 136315906;
    __int16 v12 = "-[ADCommandCenter _sasExtractSpeechData:executionContext:completion:]_block_invoke";
    __int16 v13 = 2112;
    id v14 = v4;
    __int16 v15 = 2112;
    id v16 = v9;
    __int16 v17 = 2112;
    id v18 = v10;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "%s extractSpeechDataCompleted = %@ (speechDataUrl = %@), (speechData = %@)", (uint8_t *)&v11, 0x2Au);
  }
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
}

void sub_1001E0678(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    id v8 = v3;
    if (v3)
    {
      id v5 = objc_alloc((Class)SACommandFailed);
      id v6 = [v8 localizedDescription];
      id v7 = [v5 initWithReason:v6];
      (*(void (**)(uint64_t, id, void))(v4 + 16))(v4, v7, 0);
    }
    else
    {
      id v6 = objc_alloc_init((Class)SACommandSucceeded);
      (*(void (**)(uint64_t, id, void))(v4 + 16))(v4, v6, 0);
    }

    id v3 = v8;
  }
}

void sub_1001E0920(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v8 = 136315394;
    id v9 = "-[ADCommandCenter _saPostUpdatePersonalRequestSettingsNotification:executionContext:completion:]_block_invoke";
    __int16 v10 = 2112;
    id v11 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%s Posting update-PR notification for accessory category = %@", (uint8_t *)&v8, 0x16u);
  }
  id v5 = *(void **)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 40);
  id v7 = [*(id *)(a1 + 48) objectForKey:v3];
  [v5 _postUpdatePersonalRequestSettingsNotification:v6 forLocalizationKey:v7 executionContext:*(void *)(a1 + 56) completion:*(void *)(a1 + 64)];
}

void sub_1001E0E70(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  id v5 = &stru_10050F7D8;
  if (v3) {
    id v5 = v3;
  }
  uint64_t v6 = v5;
  id v7 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)AudioBufferList buf = 136315394;
    __int16 v17 = "-[ADCommandCenter _postPersonalDomainActivityNotificationWithBody:command:executionContext:completion:]_block_invoke";
    __int16 v18 = 2112;
    id v19 = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "%s Posting activity notification for accessory category = %@", buf, 0x16u);
  }
  if ([*(id *)(a1 + 32) length])
  {
    int v8 = +[AFLocalization sharedInstance];
    id v9 = +[NSBundle bundleForClass:objc_opt_class()];
    __int16 v10 = [v8 localizedStringForKey:@"ASSISTANT_SERVICES_HOMEPOD_ACTIVITY_NOTIFICATION_TITLE" table:0 bundle:v9 languageCode:0];

    id v11 = +[NSString stringWithValidatedFormat:v10, @"%@%@", 0, *(void *)(a1 + 32), v6 validFormatSpecifiers error];
    [*(id *)(a1 + 40) setTitle:v11];
  }
  __int16 v12 = +[UNNotificationRequest requestWithIdentifier:*(void *)(a1 + 48) content:*(void *)(a1 + 40) trigger:0];
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  id v14[2] = sub_1001E109C;
  v14[3] = &unk_10050D440;
  __int16 v13 = *(void **)(a1 + 56);
  id v15 = *(id *)(a1 + 64);
  [v13 postNotificationRequest:v12 completion:v14];
}

void sub_1001E109C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    id v8 = v3;
    if (v3)
    {
      id v5 = objc_alloc((Class)SACommandFailed);
      id v6 = [v8 localizedDescription];
      id v7 = [v5 initWithReason:v6];
      (*(void (**)(uint64_t, id, void))(v4 + 16))(v4, v7, 0);
    }
    else
    {
      id v6 = objc_alloc_init((Class)SACommandSucceeded);
      (*(void (**)(uint64_t, id, void))(v4 + 16))(v4, v6, 0);
    }

    id v3 = v8;
  }
}

id sub_1001E1634(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) _completeNotificationSearch:*(void *)(a1 + 40) bulletins:a2 completion:*(void *)(a1 + 48)];
}

void sub_1001E1648(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_msgSend(objc_alloc((Class)NSMutableArray), "initWithCapacity:", objc_msgSend(v3, "count"));
  id v5 = [*(id *)(a1 + 32) sourceAppId];
  uint64_t v21 = a1;
  id v6 = [*(id *)(a1 + 32) notificationType];
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  id v7 = v3;
  id v8 = [v7 countByEnumeratingWithState:&v22 objects:v34 count:16];
  if (v8)
  {
    id v9 = v8;
    uint64_t v10 = *(void *)v23;
    do
    {
      id v11 = 0;
      do
      {
        if (*(void *)v23 != v10) {
          objc_enumerationMutation(v7);
        }
        __int16 v12 = *(void **)(*((void *)&v22 + 1) + 8 * (void)v11);
        if (v5)
        {
          __int16 v13 = [*(id *)(*((void *)&v22 + 1) + 8 * (void)v11) sectionID];
          unsigned __int8 v14 = [v13 isEqualToString:v5];

          if ((v14 & 1) == 0)
          {
            id v15 = (void *)AFSiriLogContextDaemon;
            if (!os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG)) {
              goto LABEL_14;
            }
            id v16 = v15;
            __int16 v17 = [v12 bulletinID];
            __int16 v18 = [v12 sectionID];
            *(_DWORD *)AudioBufferList buf = 136315906;
            id v27 = "-[ADCommandCenter _saNotificationSearch:completion:]_block_invoke_2";
            __int16 v28 = 2112;
            double v29 = v17;
            __int16 v30 = 2112;
            id v31 = v18;
            __int16 v32 = 2112;
            uint64_t v33 = v5;
            _os_log_debug_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "%s Filtered notification %@ due to app match %@ vs %@", buf, 0x2Au);

            goto LABEL_17;
          }
        }
        if (!v6 || ([v12 contentTypeMatchesNotificationType:v6] & 1) != 0)
        {
          [v4 addObject:v12];
          goto LABEL_14;
        }
        id v19 = (void *)AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
        {
          id v16 = v19;
          __int16 v17 = [v12 bulletinID];
          *(_DWORD *)AudioBufferList buf = 136315650;
          id v27 = "-[ADCommandCenter _saNotificationSearch:completion:]_block_invoke";
          __int16 v28 = 2112;
          double v29 = v17;
          __int16 v30 = 2112;
          id v31 = v6;
          _os_log_debug_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "%s Filtered notification %@ due to content type not matching %@", buf, 0x20u);
LABEL_17:
        }
LABEL_14:
        id v11 = (char *)v11 + 1;
      }
      while (v9 != v11);
      id v20 = [v7 countByEnumeratingWithState:&v22 objects:v34 count:16];
      id v9 = v20;
    }
    while (v20);
  }

  [*(id *)(v21 + 40) _completeNotificationSearch:*(void *)(v21 + 32) bulletins:v4 completion:*(void *)(v21 + 48)];
}

void sub_1001E1F20(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 40);
  if (v4)
  {
    id v7 = v3;
    if (v3)
    {
      (*(void (**)(uint64_t, void, id))(v4 + 16))(v4, 0, v3);
    }
    else
    {
      id v5 = objc_alloc_init((Class)SACommandSucceeded);
      id v6 = [*(id *)(a1 + 32) aceId];
      [v5 setRefId:v6];

      (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
    }
    id v3 = v7;
  }
}

void sub_1001E22EC(uint64_t a1, void *a2, float a3)
{
  id v5 = a2;
  id v6 = v5;
  uint64_t v7 = *(void *)(a1 + 40);
  if (v7)
  {
    if (v5)
    {
      id v8 = AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
      {
        int v13 = 136315394;
        unsigned __int8 v14 = "-[ADCommandCenter _saTTSGetSpeechSynthesisVolume:completion:]_block_invoke";
        __int16 v15 = 2112;
        id v16 = v6;
        _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "%s Error occurred while getting the volume. Error=%@", (uint8_t *)&v13, 0x16u);
        uint64_t v7 = *(void *)(a1 + 40);
      }
      (*(void (**)(uint64_t, void, void *))(v7 + 16))(v7, 0, v6);
    }
    else
    {
      id v9 = objc_alloc_init((Class)SATTSGetSpeechSynthesisVolumeResponse);
      uint64_t v10 = [*(id *)(a1 + 32) aceId];
      [v9 setRefId:v10];

      *(float *)&double v11 = a3;
      __int16 v12 = +[NSNumber numberWithFloat:v11];
      [v9 setVolumeLevel:v12];

      (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
    }
  }
}

void sub_1001E2A3C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v5 = v3;
  if (!v3) {
    id v3 = [objc_alloc((Class)SACommandFailed) initWithReason:@"Failed getting diagnostic report"];
  }
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4) {
    (*(void (**)(uint64_t, id, void))(v4 + 16))(v4, v3, 0);
  }
}

void sub_1001E2C1C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v6 = 136315394;
    uint64_t v7 = "-[ADCommandCenter _saGetAssistantData:executionContext:completion:]_block_invoke";
    __int16 v8 = 2112;
    id v9 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%s %@", (uint8_t *)&v6, 0x16u);
  }
  uint64_t v5 = *(void *)(a1 + 32);
  if (v5) {
    (*(void (**)(uint64_t, id, void))(v5 + 16))(v5, v3, 0);
  }
}

void sub_1001E2F9C(uint64_t a1, void *a2)
{
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  id v3 = a2;
  id v4 = [v3 countByEnumeratingWithState:&v23 objects:v33 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v24;
    while (2)
    {
      uint64_t v7 = 0;
      do
      {
        if (*(void *)v24 != v6) {
          objc_enumerationMutation(v3);
        }
        __int16 v8 = objc_msgSend(*(id *)(*((void *)&v23 + 1) + 8 * (void)v7), "content", (void)v23);
        id v9 = [v8 locationSnapshot];
        if (v9)
        {
          __int16 v12 = v9;
          int v13 = objc_msgSend(v9, "ace_setRequestOrigin");
          unsigned __int8 v14 = [v8 locationMetadata];
          __int16 v15 = [v14 deliveryDate];
          [v15 timeIntervalSinceNow];
          double v17 = fabs(v16);

          __int16 v18 = +[NSNumber numberWithInt:(int)v17];
          [v13 setAge:v18];

          id v19 = [*(id *)(a1 + 32) desiredAccuracy];
          [v13 setDesiredAccuracy:v19];

          id v20 = (void *)AFSiriLogContextDaemon;
          if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v21 = v20;
            long long v22 = [v13 status];
            *(_DWORD *)AudioBufferList buf = 136315650;
            __int16 v28 = "-[ADCommandCenter _saGetRequestOrigin:executionContext:completion:]_block_invoke";
            __int16 v29 = 2112;
            __int16 v30 = v22;
            __int16 v31 = 2112;
            __int16 v32 = v12;
            _os_log_debug_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "%s SetRequestOrigin status: %@, for %@", buf, 0x20u);
          }
          (*(void (**)(void))(*(void *)(a1 + 40) + 16))();

          id v11 = v3;
          goto LABEL_15;
        }

        uint64_t v7 = (char *)v7 + 1;
      }
      while (v5 != v7);
      id v5 = [v3 countByEnumeratingWithState:&v23 objects:v33 count:16];
      if (v5) {
        continue;
      }
      break;
    }
  }

  uint64_t v10 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)AudioBufferList buf = 136315138;
    __int16 v28 = "-[ADCommandCenter _saGetRequestOrigin:executionContext:completion:]_block_invoke";
    _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "%s Unable to get location from context cache", buf, 0xCu);
  }
  id v11 = objc_alloc_init((Class)SASetRequestOrigin);
  [v11 setStatus:SASetRequestOriginStatusUnknownValue];
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
LABEL_15:
}

void sub_1001E3290(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v5 = v3;
  if (!v3) {
    id v3 = [objc_alloc((Class)SACommandFailed) initWithReason:@"Failed getting request origin"];
  }
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4) {
    (*(void (**)(uint64_t, id, void))(v4 + 16))(v4, v3, 0);
  }
}

uint64_t sub_1001E381C(uint64_t a1)
{
  uint64_t v2 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v5 = 136315138;
    uint64_t v6 = "-[ADCommandCenter _endSpeechRequestForCommand:withError:suppressAlert:secureOfflineOnlyDictation:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s Clearing speech delegate in recording completion", (uint8_t *)&v5, 0xCu);
  }
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained _clearSpeechDelegateState];

  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_1001E3E9C(uint64_t a1, double a2, double a3)
{
  id v6 = objc_alloc_init((Class)SASEndpointStatus);
  BOOL v7 = a2 > 0.0 && *(double *)(a1 + 40) > a2;
  id v10 = v6;
  [v6 setConfirmed:v7];
  __int16 v8 = +[NSNumber numberWithDouble:a3 * 1000.0];
  [v10 setEndpointConfirmationTimestamp:v8];

  uint64_t v9 = *(void *)(a1 + 32);
  if (v9) {
    (*(void (**)(uint64_t, id, void))(v9 + 16))(v9, v10, 0);
  }
}

id sub_1001E4D6C(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  if (v1)
  {
    CFStringRef v5 = @"bestTextInterpretation";
    uint64_t v2 = objc_msgSend(v1, "af_bestTextInterpretation");
    id v6 = v2;
    id v3 = +[NSDictionary dictionaryWithObjects:&v6 forKeys:&v5 count:1];
  }
  else
  {
    id v3 = 0;
  }
  return v3;
}

uint64_t sub_1001E4E20(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  CFStringRef v5 = [v3 currentRequestCommand];
  objc_opt_class();
  if (objc_opt_isKindOfClass() & 1) != 0 || (objc_opt_class(), (objc_opt_isKindOfClass()))
  {
    uint64_t v6 = 0;
  }
  else
  {
    uint64_t v6 = [v3 currentRequestId];

    if (!v6) {
      goto LABEL_5;
    }
    if (!AFIsHorseman())
    {
      uint64_t v6 = 1;
      goto LABEL_5;
    }
    CFStringRef v5 = [v4 encodedClassName];
    if (([v5 isEqual:@"ExecuteOnRemoteRequest"] & 1) != 0
      || ([v5 isEqual:@"StartHandoffRequest"] & 1) != 0)
    {
      uint64_t v6 = 1;
    }
    else
    {
      uint64_t v6 = (uint64_t)[v5 isEqual:@"InitiateHandoffOnCompanion"];
    }
  }

LABEL_5:
  return v6;
}

void sub_1001E4F30(void *a1, void *a2, void *a3, uint64_t a4)
{
  id v7 = a1;
  id v8 = a2;
  id v9 = a3;
  id v10 = sub_1000D4598(v7);
  if (v10)
  {
    id v11 = objc_alloc_init((Class)ORCHSchemaORCHClientEvent);
    id v12 = objc_alloc_init((Class)ORCHSchemaORCHClientEventMetadata);
    [v12 setRequestId:v10];
    [v11 setEventMetadata:v12];
    id v13 = objc_alloc_init((Class)ORCHSchemaORCHAceCommandContext);
    id v14 = objc_alloc_init((Class)ORCHSchemaORCHAceCommandStarted);
    [v14 setAceCommandType:a4];
    [v14 setAceCommandName:v8];
    [v13 setStartedOrChanged:v14];
    __int16 v15 = sub_1000D4598(v9);
    [v13 setAceId:v15];

    [v11 setAceCommandContext:v13];
    double v16 = +[AssistantSiriAnalytics sharedStream];
    [v16 emitMessage:v11];
  }
  else
  {
    double v17 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      int v18 = 136315394;
      id v19 = "_EmitAceCommandStartedEvent";
      __int16 v20 = 2112;
      id v21 = v7;
      _os_log_error_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "%s The requestId=%@ is malformed, unable to log SELF command", (uint8_t *)&v18, 0x16u);
    }
  }
}

unsigned char *sub_1001E5124(uint64_t a1)
{
  [*(id *)(*(void *)(a1 + 32) + 40) adSpeechRecognizedPartialResult:*(void *)(a1 + 40)];
  uint64_t result = *(unsigned char **)(a1 + 32);
  if (!result[369])
  {
    uint64_t result = [result _awdRecordTimeToFirstWord];
    *(unsigned char *)(*(void *)(a1 + 32) + 369) = 1;
  }
  return result;
}

void sub_1001E532C(uint64_t a1)
{
  if (*(void *)(*(void *)(a1 + 32) + 248) == 2)
  {
    id v4 = [objc_alloc((Class)AFSpeechRequestOptions) initWithActivationEvent:5];
    uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 288) activationDeviceIdentifier];
    [v4 setActivationDeviceIdentifier:v2];

    objc_msgSend(v4, "setIsOnPhoneCall:", objc_msgSend(*(id *)(a1 + 32), "_isInCall"));
    id v3 = [*(id *)(a1 + 32) _speechManager];
    [v3 stopSpeechCaptureWithOptions:v4];
  }
}

uint64_t sub_1001E5684(uint64_t a1)
{
  uint64_t result = objc_opt_respondsToSelector();
  if (result)
  {
    uint64_t v3 = *(void *)(a1 + 40);
    id v4 = *(void **)(*(void *)(a1 + 32) + 40);
    return (uint64_t)_[v4 adPronunciationRecognized:v3 usingSpeechModel:0 sessionUUID:0];
  }
  return result;
}

void sub_1001E5A7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1001E5AA4(uint64_t a1)
{
  uint64_t v2 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    LODWORD(buf) = 136315138;
    *(void *)((char *)&buf + 4) = "-[ADCommandCenter _sasSpeechMultilingualSpeechRecognized:executionContext:completion:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s Dispatching SASMultilingualSpeechRecognized command", (uint8_t *)&buf, 0xCu);
  }
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 48));
  id v4 = WeakRetained;
  if (WeakRetained)
  {
    CFStringRef v5 = objc_msgSend(WeakRetained[37], "ad_languageModel");
    id v6 = *(id *)(a1 + 32);
    id v7 = v5;
    id v8 = objc_alloc_init((Class)NSMutableDictionary);
    id v9 = objc_alloc_init((Class)NSMutableArray);
    id v10 = [v6 speechRecognizedByLanguage];
    *(void *)&long long buf = _NSConcreteStackBlock;
    *((void *)&buf + 1) = 3221225472;
    long long v26 = sub_1001E5DD8;
    id v27 = &unk_1005068E0;
    id v28 = v7;
    id v11 = v8;
    id v29 = v11;
    id v12 = v9;
    id v30 = v12;
    id v13 = v7;
    [v10 enumerateKeysAndObjectsUsingBlock:&buf];

    if ([v12 count]) {
      [v11 setObject:v12 forKey:@"secondaryLanguages"];
    }
    id v14 = AFAnalyticsContextCreateWithCommand();
    v24[0] = v14;
    v24[1] = v11;
    __int16 v15 = +[NSArray arrayWithObjects:v24 count:2];
    double v16 = AFAnalyticsContextsMerge();

    double v17 = +[AFAnalytics sharedAnalytics];
    [v17 logEventWithType:1102 context:v16];

    id v18 = objc_loadWeakRetained((id *)(a1 + 48));
    [v18 _setSpeechRecognizedContext:v16];

    [v4 _cancelLocalRecognitionIfRequired];
    v21[0] = _NSConcreteStackBlock;
    v21[1] = 3221225472;
    void v21[2] = sub_1001E5E8C;
    v21[3] = &unk_10050E160;
    long long v22 = v4;
    id v23 = *(id *)(a1 + 32);
    [v22 _handleSpeechRecognizedWithDelegateBlock:v21];
    uint64_t v19 = *(void *)(a1 + 40);
    if (v19)
    {
      id v20 = objc_alloc_init((Class)SACommandSucceeded);
      (*(void (**)(uint64_t, id, void))(v19 + 16))(v19, v20, 0);
    }
  }
}

void sub_1001E5DD8(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = *(void *)(a1 + 32);
  id v6 = a3;
  id v7 = a2;
  LODWORD(v5) = [v7 isEqualToString:v5];
  sub_1001E5EEC(v6, v7);
  id v9 = (id)objc_claimAutoreleasedReturnValue();

  if (v5)
  {
    id v8 = v9;
    if (!v9) {
      goto LABEL_7;
    }
    [*(id *)(a1 + 40) addEntriesFromDictionary:v9];
  }
  else
  {
    id v8 = v9;
    if (!v9) {
      goto LABEL_7;
    }
    [*(id *)(a1 + 48) addObject:v9];
  }
  id v8 = v9;
LABEL_7:
}

uint64_t sub_1001E5E8C(uint64_t a1)
{
  uint64_t result = objc_opt_respondsToSelector();
  if (result)
  {
    uint64_t v3 = *(void *)(a1 + 40);
    id v4 = *(void **)(*(void *)(a1 + 32) + 40);
    return (uint64_t)_[v4 adSpeechMultilingualSpeechRecognized:v3 sessionUUID:0];
  }
  return result;
}

id sub_1001E5EEC(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v5 = objc_alloc_init((Class)NSMutableDictionary);
  id v6 = objc_msgSend(v3, "ad_leadingSilence");
  if (v6) {
    [v5 setObject:v6 forKey:@"leadingSilence"];
  }
  id v7 = objc_msgSend(v3, "ad_trailingSilence");
  if (v7) {
    [v5 setObject:v7 forKey:@"trailingSilence"];
  }
  id v8 = objc_msgSend(v3, "ad_endTime");
  if (v8) {
    [v5 setObject:v8 forKey:@"endTime"];
  }
  id v9 = [v3 resultId];
  if (v9) {
    [v5 setObject:v9 forKey:@"resultId"];
  }
  id v10 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [v3 eager]);
  [v5 setObject:v10 forKey:@"eager"];

  if ((AFIsInternalInstall() & 1) != 0
    || (+[AFPreferences sharedPreferences],
        id v11 = objc_claimAutoreleasedReturnValue(),
        unsigned int v12 = [v11 shouldLogForQA],
        v11,
        v12))
  {
    id v13 = objc_msgSend(v3, "af_bestTextInterpretation");
    if (v13) {
      [v5 setObject:v13 forKey:@"bestTextInterpretation"];
    }
  }
  if (v4) {
    [v5 setObject:v4 forKey:@"languageCode"];
  }
  id v14 = AFAnalyticsContextCreateWithCommand();
  v18[0] = v14;
  v18[1] = v5;
  __int16 v15 = +[NSArray arrayWithObjects:v18 count:2];
  double v16 = AFAnalyticsContextsMerge();

  return v16;
}

void sub_1001E64C4(uint64_t a1)
{
  uint64_t v2 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v10 = 136315138;
    id v11 = "-[ADCommandCenter _sasSpeechRecognized:executionContext:completion:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s Logging audio topology", (uint8_t *)&v10, 0xCu);
  }
  id v3 = *(void **)(a1 + 32);
  id v4 = objc_alloc((Class)NSUUID);
  id v5 = [*(id *)(*(void *)(a1 + 32) + 328) currentRequestId];
  id v6 = [v4 initWithUUIDString:v5];
  [v3 _logAudioTopologyForRequestId:v6];

  id v7 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v10 = 136315138;
    id v11 = "-[ADCommandCenter _sasSpeechRecognized:executionContext:completion:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "%s Logging nearby devices reported", (uint8_t *)&v10, 0xCu);
  }
  id v8 = +[ADCompanionService sharedInstance];
  id v9 = [*(id *)(*(void *)(a1 + 32) + 328) currentRequestId];
  [v8 _logPersonalDevicesDiscoveredNearbyForRequestId:v9];
}

void sub_1001E6654(uint64_t a1, void *a2)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  void v5[2] = sub_1001E6720;
  v5[3] = &unk_100505D30;
  id v6 = *(id *)(a1 + 32);
  id v3 = a2;
  id v4 = +[AFSpeechInfo newWithBuilder:v5];
  [v3 setSpeechInfo:v4];
}

id sub_1001E6708(void *a1)
{
  return _[*(id *)(a1[4] + 40) adSpeechRecognized:a1[5] usingSpeechModel:a1[6] sessionUUID:0];
}

id sub_1001E6720(uint64_t a1, void *a2)
{
  return _[a2 setSpeechRecognizedCommand:*(void *)(a1 + 32)];
}

void sub_1001E773C(uint64_t a1, int a2, int a3, void *a4)
{
  id v7 = a4;
  id v8 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)long long buf = 136315650;
    long long v22 = "-[ADCommandCenter _sasResultCandidate:completion:]_block_invoke";
    __int16 v23 = 1024;
    int v24 = a2;
    __int16 v25 = 1024;
    int v26 = a3;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "%s accepted = %d, mitigated = %d", buf, 0x18u);
  }
  uint64_t v9 = *(void *)(a1 + 32);
  int v10 = *(NSObject **)(v9 + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1001E78D8;
  block[3] = &unk_100505CE0;
  char v19 = a2;
  void block[4] = v9;
  id v14 = *(id *)(a1 + 40);
  uint64_t v18 = *(void *)(a1 + 64);
  id v17 = *(id *)(a1 + 56);
  id v11 = *(id *)(a1 + 48);
  char v20 = a3;
  id v15 = v11;
  id v16 = v7;
  id v12 = v7;
  dispatch_async(v10, block);
}

id sub_1001E78D8(uint64_t a1)
{
  uint64_t v2 = +[AFAnalytics sharedAnalytics];
  [v2 logEventWithType:309 context:0];

  if (*(unsigned char *)(a1 + 80) && [*(id *)(a1 + 32) _refIdIsSpeechStart:*(void *)(a1 + 40)])
  {
    *(unsigned char *)(*(void *)(a1 + 32) + 372) = 1;
    *(void *)(*(void *)(a1 + 32) + 384) = *(void *)(a1 + 72);
    id v3 = *(unsigned char **)(a1 + 32);
    if (v3[373])
    {
      uint64_t v4 = *(unsigned __int8 *)(a1 + 81);
      uint64_t v5 = *(void *)(a1 + 48);
      uint64_t v6 = *(void *)(a1 + 56);
      uint64_t v7 = *(void *)(a1 + 64);
      return _[v3 _acceptResultCandidate:v5 isMitigated:v4 featuresToLog:v6 completion:v7];
    }
    else
    {
      uint64_t v9 = AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
      {
        int v11 = 136315138;
        id v12 = "-[ADCommandCenter _sasResultCandidate:completion:]_block_invoke";
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "%s This is a race between a network layer RollbackRequest retry and Speech Endpointing. Ignore the RC.", (uint8_t *)&v11, 0xCu);
      }
      id result = *(id *)(a1 + 64);
      if (result) {
        return (id)(*((uint64_t (**)(id, void, void))result + 2))(result, 0, 0);
      }
    }
  }
  else
  {
    id result = *(id *)(a1 + 64);
    if (result)
    {
      id v8 = (uint64_t (*)(void))*((void *)result + 2);
      return (id)v8();
    }
  }
  return result;
}

uint64_t sub_1001E7D10()
{
  if (AFSupportsSCDAFramework())
  {
    uint64_t v0 = SCDAPreferencesChangedNotifyStatePublisher();
    uint64_t v1 = qword_100585DE8;
    qword_100585DE8 = v0;
  }
  else
  {
    uint64_t v0 = AFMyriadPreferencesChangedNotifyStatePublisher();
    uint64_t v1 = qword_100585DE0;
    qword_100585DE0 = v0;
  }
  return _objc_release_x1(v0, v1);
}

void sub_1001E84A8(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = a2;
  [v3 setTimestamp:v2];
  [v3 setSource:12];
  [v3 setEvent:18];
}

uint64_t sub_1001E866C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, 0);
  }
  return result;
}

uint64_t sub_1001E879C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, 0);
  }
  return result;
}

void sub_1001E8DE0(uint64_t a1, void *a2, void *a3)
{
  id v8 = a2;
  id v5 = a3;
  uint64_t v6 = *(void *)(a1 + 32);
  if (v6)
  {
    if (v8)
    {
      (*(void (**)(uint64_t, id, id))(v6 + 16))(v6, v8, v5);
    }
    else
    {
      id v7 = objc_alloc_init((Class)SACommandSucceeded);
      (*(void (**)(uint64_t, id, id))(v6 + 16))(v6, v7, v5);
    }
  }
}

void sub_1001E8E8C(uint64_t a1)
{
  if ([*(id *)(a1 + 32) invokeWithValue:0 andValue:0])
  {
    uint64_t v2 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      uint64_t v3 = *(void *)(a1 + 40);
      int v4 = 136315394;
      id v5 = "-[ADCommandCenter _saWaitForCommands:completion:]_block_invoke_2";
      __int16 v6 = 2112;
      uint64_t v7 = v3;
      _os_log_error_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "%s %@ timed out.", (uint8_t *)&v4, 0x16u);
    }
  }
}

void sub_1001E8F60(uint64_t a1)
{
  uint64_t v2 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v4 = 136315394;
    id v5 = "-[ADCommandCenter _saWaitForCommands:completion:]_block_invoke";
    __int16 v6 = 2112;
    uint64_t v7 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s Stop waiting for command %@.", (uint8_t *)&v4, 0x16u);
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

id sub_1001E9024(uint64_t a1)
{
  return [*(id *)(a1 + 32) invokeWithSignal:0];
}

void sub_1001E9030(uint64_t a1)
{
  [*(id *)(a1 + 32) cancel];
  if ([*(id *)(a1 + 40) invokeWithValue:0 andValue:0])
  {
    uint64_t v2 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      uint64_t v3 = *(void *)(a1 + 48);
      int v4 = 136315394;
      id v5 = "-[ADCommandCenter _saWaitForCommands:completion:]_block_invoke";
      __int16 v6 = 2112;
      uint64_t v7 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s Done %@", (uint8_t *)&v4, 0x16u);
    }
  }
}

void sub_1001E9610(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = (Class *)SACommandSucceeded_ptr;
  id v8 = v3;
  if (v3) {
    int v4 = (Class *)SACommandFailed_ptr;
  }
  id v5 = objc_alloc_init(*v4);
  __int16 v6 = [*(id *)(a1 + 32) aceId];
  [v5 setRefId:v6];

  uint64_t v7 = *(void *)(a1 + 40);
  if (v7) {
    (*(void (**)(uint64_t, id, id))(v7 + 16))(v7, v5, v8);
  }
}

void sub_1001E96C0(uint64_t a1, void *a2, void *a3)
{
  id v7 = a2;
  id v5 = a3;
  if (v5)
  {
    uint64_t v6 = *(void *)(a1 + 56);
    if (v6) {
      (*(void (**)(uint64_t, void, id))(v6 + 16))(v6, 0, v5);
    }
  }
  else
  {
    [*(id *)(a1 + 32) startRemoteRequest:*(void *)(a1 + 40) onTargetDevice:v7 completion:*(void *)(a1 + 48)];
  }
}

void sub_1001E9E08(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    int v4 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      uint64_t v6 = *(void *)(a1 + 40);
      *(_DWORD *)long long buf = 136315650;
      id v14 = "-[ADCommandCenter _emitTriggerWithCachingForUUID:namespace:requestID:]_block_invoke";
      __int16 v15 = 2112;
      uint64_t v16 = v5;
      __int16 v17 = 2112;
      uint64_t v18 = v6;
      _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "%s Unable to cache trial experiment IDs for codePathID: %@ and namespace: %@", buf, 0x20u);
    }
  }
  else
  {
    id v7 = [*(id *)(a1 + 48) _experimentationAnalyticsManager];
    id v8 = *(void **)(a1 + 32);
    uint64_t v9 = *(void *)(a1 + 56);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_1001E9F8C;
    v10[3] = &unk_10050CB48;
    id v11 = v8;
    id v12 = *(id *)(a1 + 40);
    [v7 emitTriggerFromCacheForCodePathID:v11 requestID:v9 completionHandler:v10];
  }
}

void sub_1001E9F8C(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = AFSiriLogContextDaemon;
  if (v3)
  {
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      uint64_t v6 = *(void *)(a1 + 40);
      int v9 = 136315650;
      int v10 = "-[ADCommandCenter _emitTriggerWithCachingForUUID:namespace:requestID:]_block_invoke";
      __int16 v11 = 2112;
      uint64_t v12 = v5;
      __int16 v13 = 2112;
      uint64_t v14 = v6;
      _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "%s Unable to emit trigger from cache for codePathID: %@ and namespace: %@", (uint8_t *)&v9, 0x20u);
    }
  }
  else if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v7 = *(void *)(a1 + 32);
    uint64_t v8 = *(void *)(a1 + 40);
    int v9 = 136315650;
    int v10 = "-[ADCommandCenter _emitTriggerWithCachingForUUID:namespace:requestID:]_block_invoke";
    __int16 v11 = 2112;
    uint64_t v12 = v7;
    __int16 v13 = 2112;
    uint64_t v14 = v8;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%s Emitted trigger log successfully for codePathID: %@ and namespace: %@", (uint8_t *)&v9, 0x20u);
  }
}

id sub_1001EB278(uint64_t a1)
{
  uint64_t v2 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v3 = *(unsigned __int8 *)(a1 + 40);
    int v6 = 136315394;
    uint64_t v7 = "-[ADCommandCenter adCallStateChangedCallIncoming:]_block_invoke";
    __int16 v8 = 1024;
    int v9 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s Got call state changed; call is incoming: %d",
      (uint8_t *)&v6,
      0x12u);
  }
  id result = [*(id *)(a1 + 32) _hasIncomingCall];
  int v5 = *(unsigned __int8 *)(a1 + 40);
  if (v5 != result) {
    return [*(id *)(a1 + 32) _setHasIncomingCall:v5 != 0];
  }
  return result;
}

id sub_1001EB3D0(uint64_t a1)
{
  uint64_t v2 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v3 = *(unsigned __int8 *)(a1 + 40);
    int v6 = 136315394;
    uint64_t v7 = "-[ADCommandCenter adCallStateChangedCallInProcess:]_block_invoke";
    __int16 v8 = 1024;
    int v9 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s Got call state changed; call is in process: %d",
      (uint8_t *)&v6,
      0x12u);
  }
  id result = [*(id *)(a1 + 32) _isInCall];
  int v5 = *(unsigned __int8 *)(a1 + 40);
  if (v5 != result)
  {
    id result = [*(id *)(a1 + 32) _setIsInCall:v5 != 0];
    if (!*(unsigned char *)(a1 + 40)) {
      return objc_msgSend(*(id *)(a1 + 32), "_sync_continueIfConditionsMet");
    }
  }
  return result;
}

id sub_1001EB5B0(uint64_t a1)
{
  id result = [*(id *)(*(void *)(a1 + 32) + 584) isEqual:*(void *)(a1 + 40)];
  if (result)
  {
    int v3 = *(void **)(a1 + 32);
    return [v3 _cancelCallKeepAlive];
  }
  return result;
}

id sub_1001EB7D0(uint64_t a1)
{
  return [*(id *)(a1 + 32) _startObservingCallState];
}

id sub_1001EB99C(uint64_t a1)
{
  return [*(id *)(a1 + 32) _cancelCallKeepAlive];
}

void sub_1001EBA68(uint64_t a1)
{
  id v6 = [*(id *)(a1 + 32) _requestDispatcherService];
  uint64_t v2 = [*(id *)(a1 + 32) _account];
  int v3 = [v2 assistantIdentifier];
  int v4 = [*(id *)(a1 + 32) _currentRequest];
  int v5 = [v4 currentRequestId];
  [v6 postTestResultSelectedWithAssistantId:v3 requestId:v5 rcId:*(void *)(a1 + 40)];
}

void sub_1001EBBE4(uint64_t a1)
{
  id v6 = [*(id *)(a1 + 32) _requestDispatcherService];
  uint64_t v2 = [*(id *)(a1 + 32) _account];
  int v3 = [v2 assistantIdentifier];
  int v4 = [*(id *)(a1 + 32) _currentRequest];
  int v5 = [v4 currentRequestId];
  [v6 postTestResultCandidateWithAssistantId:v3 requestId:v5 rcId:*(void *)(a1 + 40) recognitionSausage:*(void *)(a1 + 48)];
}

void sub_1001EBE88(uint64_t a1, void *a2)
{
  id v6 = a2;
  [v6 setAudioSource:0];
  [v6 setAudioDestination:0];
  [v6 setResponseMode:*(void *)(a1 + 32)];
  objc_msgSend(v6, "setIsEyesFree:", objc_msgSend(*(id *)(a1 + 40), "eyesFree"));
  [v6 setIsVoiceTriggerEnabled:sub_1001FD6CC()];
  objc_msgSend(v6, "setIsTextToSpeechEnabled:", objc_msgSend(*(id *)(*(void *)(a1 + 48) + 16), "adTextToSpeechIsMuted") ^ 1);
  [v6 setIsTriggerlessFollowup:*(unsigned __int8 *)(a1 + 56)];
  int v3 = [*(id *)(a1 + 48) _bargeInModes];
  [v6 setBargeInModes:v3];

  int v4 = [*(id *)(a1 + 48) _approximatePreviousTTSInterval:0];
  [v6 setApproximatePreviousTTSInterval:v4];

  int v5 = [*(id *)(a1 + 48) _restrictedCommands];
  [v6 setDeviceRestrictions:v5];

  [v6 setVoiceTriggerEventInfo:0];
  objc_msgSend(v6, "setVoiceAudioSessionId:", objc_msgSend(*(id *)(a1 + 48), "_sharedVoiceAudioSessionID"));
  objc_msgSend(v6, "setIsSystemApertureEnabled:", objc_msgSend(*(id *)(*(void *)(a1 + 48) + 288), "isSystemApertureEnabled"));
  objc_msgSend(v6, "setIsLiveActivitiesSupported:", objc_msgSend(*(id *)(*(void *)(a1 + 48) + 288), "isLiveActivitiesSupported"));
  objc_msgSend(v6, "setIsInAmbient:", objc_msgSend(*(id *)(*(void *)(a1 + 48) + 288), "isInAmbient"));
  [v6 setIsDeviceShowingLockScreen:*(unsigned __int8 *)(*(void *)(a1 + 48) + 513)];
  [v6 setIsDeviceLocked:*(unsigned __int8 *)(*(void *)(a1 + 48) + 512)];
}

void sub_1001EC0E4(id *a1)
{
  uint64_t v2 = [a1[4] encodedClassName];
  int v3 = [a1[4] groupIdentifier];
  int v4 = [a1[5] _serviceManager];
  int v5 = [v4 serviceForDomain:v3 command:v2];
  id v6 = (void *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    id v7 = a1[4];
    __int16 v8 = v6;
    int v9 = [v5 identifier];
    *(_DWORD *)long long buf = 136315650;
    char v19 = "-[ADCommandCenter _sendServiceCommand:completion:]_block_invoke";
    __int16 v20 = 2112;
    id v21 = v7;
    __int16 v22 = 2112;
    __int16 v23 = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "%s Dispatching out of band service command %@ to service %@", buf, 0x20u);
  }
  if (v5)
  {
    id v10 = a1[4];
    id v11 = a1[5];
    uint64_t v12 = [v10 refId];
    __int16 v13 = [v11 _rootExecutionContextForRequestID:v12];
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472;
    void v16[2] = sub_1001EC314;
    v16[3] = &unk_10050CF00;
    id v17 = a1[6];
    [v5 handleCommand:v10 forDomain:v3 executionContext:v13 reply:v16];

    uint64_t v14 = v17;
LABEL_7:

    goto LABEL_8;
  }
  __int16 v15 = (void (**)(id, void, void *))a1[6];
  if (v15)
  {
    uint64_t v14 = +[AFError errorWithCode:100];
    v15[2](v15, 0, v14);
    goto LABEL_7;
  }
LABEL_8:
}

void sub_1001EC314(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v6 = +[AceObject aceObjectWithGenericCommand:a2];
  id v7 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    if (v6) {
      id v8 = v6;
    }
    else {
      id v8 = v5;
    }
    int v10 = 136315394;
    id v11 = "-[ADCommandCenter _sendServiceCommand:completion:]_block_invoke";
    __int16 v12 = 2112;
    id v13 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "%s Reply for out of band command %@", (uint8_t *)&v10, 0x16u);
  }
  uint64_t v9 = *(void *)(a1 + 32);
  if (v9) {
    (*(void (**)(uint64_t, void *, id))(v9 + 16))(v9, v6, v5);
  }
}

void sub_1001ECA48(uint64_t a1)
{
  unsigned int v2 = [*(id *)(a1 + 32) _shouldIgnoreCommand:*(void *)(a1 + 40) executionContext:*(void *)(a1 + 48)];
  int v3 = sub_1001E4E20(*(void **)(*(void *)(a1 + 32) + 328), *(void **)(a1 + 40));
  if (!v2)
  {
    int v8 = v3;
    if (objc_msgSend(*(id *)(a1 + 40), "ad_shouldLogToMetrics"))
    {
      uint64_t v9 = AFAnalyticsContextCreateWithCommand();
      int v10 = +[AFAnalytics sharedAnalytics];
      [v10 logEventWithType:401 context:v9 contextNoCopy:1];

      if (v8)
      {
        id v11 = [*(id *)(*(void *)(a1 + 32) + 328) currentRequestId];
        __int16 v12 = *(void **)(a1 + 56);
        id v13 = [*(id *)(a1 + 40) aceId];
        sub_1001E4F30(v11, v12, v13, 1);
      }
    }
    else
    {
      uint64_t v9 = 0;
    }
    uint64_t v14 = *(void **)(a1 + 64);
    uint64_t v15 = *(void *)(a1 + 72);
    uint64_t v16 = *(void **)(a1 + 40);
    uint64_t v17 = *(void *)(a1 + 48);
    v29[0] = _NSConcreteStackBlock;
    v29[1] = 3221225472;
    v29[2] = sub_1001ECF6C;
    v29[3] = &unk_100505C20;
    void v29[4] = *(void *)(a1 + 32);
    id v30 = v16;
    id v18 = v9;
    id v31 = v18;
    char v33 = v8;
    id v32 = *(id *)(a1 + 80);
    [v14 handleCommand:v30 forDomain:v15 executionContext:v17 reply:v29];
    char v19 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v28 = *(void *)(a1 + 40);
      *(_DWORD *)long long buf = 136315394;
      *(void *)&uint8_t buf[4] = "-[ADCommandCenter _handleServiceCommand:afterMyriadDecision:executionContext:completion:]_block_invoke";
      *(_WORD *)&buf[12] = 2112;
      *(void *)&buf[14] = v28;
      _os_log_debug_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "%s Dispatched command: %@", buf, 0x16u);
    }
    id v20 = *(id *)(a1 + 40);
    id v21 = [v20 groupIdentifier];
    uint64_t v22 = [v20 encodedClassName];
    __int16 v23 = (void *)v22;
    if (!v21 || !v22)
    {
      id v27 = AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 136315650;
        *(void *)&uint8_t buf[4] = "ADRecordCoreDuetEventForServiceCommandIfNeeded";
        *(_WORD *)&buf[12] = 2112;
        *(void *)&buf[14] = v21;
        __int16 v38 = 2112;
        id v39 = v23;
        _os_log_error_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_ERROR, "%s Duet domain and command must be non-nil: %@, %@", buf, 0x20u);
      }
      goto LABEL_23;
    }
    if (objc_opt_respondsToSelector())
    {
      uint64_t v24 = [v20 domainFromSADObject];

      id v21 = (void *)v24;
    }
    if (qword_100585E68 == -1)
    {
      if (v21) {
        goto LABEL_17;
      }
    }
    else
    {
      dispatch_once(&qword_100585E68, &stru_100506A30);
      if (v21)
      {
LABEL_17:
        if ([(id)qword_100585E60 containsObject:v21])
        {
          if (qword_100585E78 != -1) {
            dispatch_once(&qword_100585E78, &stru_100506A50);
          }
          CFStringRef v35 = @"domain";
          long long v36 = v21;
          __int16 v25 = +[NSDictionary dictionaryWithObjects:&v36 forKeys:&v35 count:1];
          AFRecordCoreDuetEventWithStream();

          v34[0] = @"domain";
          v34[1] = @"command";
          *(void *)long long buf = v21;
          *(void *)&buf[8] = v23;
          int v26 = +[NSDictionary dictionaryWithObjects:buf forKeys:v34 count:2];
          AFRecordCoreDuetContext();
        }
      }
    }
LABEL_23:

    return;
  }
  int v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 48);
  uint64_t v7 = *(void *)(a1 + 80);
  [v4 _handleIgnoredCommand:v5 executionContext:v6 completion:v7];
}

void sub_1001ECEC4(uint64_t a1, int a2)
{
  if (a2)
  {
    unsigned int v2 = *(NSObject **)(*(void *)(a1 + 32) + 8);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1001ECF5C;
    block[3] = &unk_10050D0D0;
    id v4 = *(id *)(a1 + 40);
    dispatch_async(v2, block);
  }
}

uint64_t sub_1001ECF5C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1001ECF6C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(NSObject **)(*(void *)(a1 + 32) + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1001ED07C;
  block[3] = &unk_100507D30;
  id v13 = *(id *)(a1 + 40);
  id v14 = v5;
  id v15 = v6;
  id v8 = *(id *)(a1 + 48);
  char v19 = *(unsigned char *)(a1 + 64);
  uint64_t v9 = *(void *)(a1 + 32);
  id v16 = v8;
  uint64_t v17 = v9;
  id v18 = *(id *)(a1 + 56);
  id v10 = v6;
  id v11 = v5;
  dispatch_async(v7, block);
}

uint64_t sub_1001ED07C(uint64_t a1)
{
  unsigned int v2 = (void *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v3 = *(void **)(a1 + 32);
    id v4 = v2;
    id v5 = [v3 encodedClassName];
    uint64_t v6 = [*(id *)(a1 + 40) encodedClassName];
    uint64_t v7 = (void *)v6;
    CFStringRef v8 = *(const __CFString **)(a1 + 48);
    id v41 = "-[ADCommandCenter _handleServiceCommand:afterMyriadDecision:executionContext:completion:]_block_invoke_3";
    *(_DWORD *)long long buf = 136315906;
    if (!v8) {
      CFStringRef v8 = &stru_10050F7D8;
    }
    __int16 v42 = 2112;
    id v43 = v5;
    __int16 v44 = 2112;
    uint64_t v45 = v6;
    __int16 v46 = 2112;
    CFStringRef v47 = v8;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%s Service reply for %@ %@ %@", buf, 0x2Au);
  }
  if (objc_msgSend(*(id *)(a1 + 32), "ad_shouldLogToMetrics"))
  {
    if (*(void *)(a1 + 40))
    {
      uint64_t v9 = AFAnalyticsContextCreateWithCommand();
    }
    else
    {
      uint64_t v9 = &__NSDictionary0__struct;
    }
    if (*(void *)(a1 + 48))
    {
      id v10 = AFAnalyticsContextCreateWithError();
    }
    else
    {
      id v10 = &__NSDictionary0__struct;
    }
    id v11 = [*(id *)(a1 + 40) resultCallbackCode];
    if (v11)
    {
      CFStringRef v38 = @"resultCallbackCode";
      __int16 v12 = +[NSNumber numberWithInteger:v11];
      id v39 = v12;
      id v13 = +[NSDictionary dictionaryWithObjects:&v39 forKeys:&v38 count:1];
    }
    else
    {
      id v13 = &__NSDictionary0__struct;
    }
    v37[0] = *(void *)(a1 + 56);
    v37[1] = v9;
    v37[2] = v10;
    v37[3] = v13;
    id v14 = +[NSArray arrayWithObjects:v37 count:4];
    id v15 = AFAnalyticsContextsMerge();

    id v16 = +[AFAnalytics sharedAnalytics];
    [v16 logEventWithType:402 context:v15 contextNoCopy:1];

    if (*(unsigned char *)(a1 + 80))
    {
      uint64_t v17 = [*(id *)(*(void *)(a1 + 64) + 328) currentRequestId];
      id v18 = [*(id *)(a1 + 32) aceId];
      id v19 = v17;
      uint64_t v20 = sub_1000D4598(v19);
      if (v20)
      {
        id v35 = v19;
        id v21 = objc_alloc_init((Class)ORCHSchemaORCHClientEvent);
        id v22 = objc_alloc_init((Class)ORCHSchemaORCHClientEventMetadata);
        [v22 setRequestId:v20];
        [v21 setEventMetadata:v22];
        id v23 = objc_alloc_init((Class)ORCHSchemaORCHAceCommandContext);
        id v34 = (void *)v20;
        id v24 = objc_alloc_init((Class)ORCHSchemaORCHAceCommandEnded);
        [v24 setExists:1];
        [v24 setAceCommandType:1];
        [v23 setEnded:v24];
        sub_1000D4598(v18);
        long long v36 = v18;
        __int16 v25 = v15;
        int v26 = v13;
        id v27 = v10;
        v29 = uint64_t v28 = v9;
        [v23 setAceId:v29];

        [v21 setAceCommandContext:v23];
        id v30 = +[AssistantSiriAnalytics sharedStream];
        [v30 emitMessage:v21];

        uint64_t v9 = v28;
        id v10 = v27;
        id v13 = v26;
        id v15 = v25;
        id v18 = v36;

        id v31 = v34;
        id v19 = v35;
      }
      else
      {
        id v31 = 0;
        id v32 = AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long buf = 136315394;
          id v41 = "_EmitAceCommandEndedEvent";
          __int16 v42 = 2112;
          id v43 = v19;
          _os_log_error_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_ERROR, "%s The requestId=%@ is malformed, unable to log SELF command", buf, 0x16u);
        }
      }
    }
  }
  uint64_t result = *(void *)(a1 + 72);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void))(result + 16))(result, *(void *)(a1 + 40), *(void *)(a1 + 48));
  }
  return result;
}

void sub_1001EDC50(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  int v3 = *(NSObject **)(v2 + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1001EDD24;
  block[3] = &unk_100507F88;
  void block[4] = v2;
  id v5 = *(id *)(a1 + 40);
  id v6 = *(id *)(a1 + 48);
  id v7 = *(id *)(a1 + 56);
  id v8 = *(id *)(a1 + 64);
  dispatch_async(v3, block);
}

id sub_1001EDD24(uint64_t a1)
{
  return [*(id *)(a1 + 32) _performCallbacksForCommand:*(void *)(a1 + 40) reply:*(void *)(a1 + 48) executionContext:*(void *)(a1 + 56) error:*(void *)(a1 + 64)];
}

id sub_1001EE1B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return [*(id *)(a1 + 32) _handleCommandResponse:a2 error:a3 forCommand:*(void *)(a1 + 40) executionContext:*(void *)(a1 + 48) completion:*(void *)(a1 + 56)];
}

void sub_1001EE1C8(uint64_t a1, void *a2, void *a3)
{
  id v10 = a2;
  id v5 = a3;
  if (v5 && *(void *)(a1 + 32) && objc_msgSend(*(id *)(a1 + 40), "_hasOutstandingRequestId:")) {
    [*(id *)(a1 + 48) adRequestEncounteredIntermediateError:v5];
  }
  (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
  [*(id *)(*(void *)(a1 + 40) + 96) delegateDidHandleCommand:*(void *)(a1 + 56)];
  id v6 = *(void **)(a1 + 40);
  id v7 = objc_msgSend(*(id *)(a1 + 56), "ad_getNetworkActivityTracingLabel");
  if (v5)
  {
    uint64_t v8 = 4;
    id v9 = v5;
  }
  else
  {
    uint64_t v8 = 2;
    id v9 = 0;
  }
  [v6 _addNetworkActivityTracingForLabel:v7 start:0 withCompletionReason:v8 andError:v9];
}

uint64_t sub_1001EE2A4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1001EEBA0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  int v3 = *(NSObject **)(v2 + 8);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1001EEC14;
  v4[3] = &unk_10050D8C0;
  void v4[4] = v2;
  void v4[5] = a2;
  dispatch_async(v3, v4);
}

void sub_1001EEC14(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 40))
  {
    id v2 = objc_alloc_init((Class)SAUpdateRestrictions);
    uint64_t v4 = SADeviceRestrictionSPOKEN_NOTIFICATIONS_OVER_DOAPValue;
    int v3 = +[NSArray arrayWithObjects:&v4 count:1];
    [v2 setRestrictionsToAdd:v3];

    [*(id *)(a1 + 32) _sendCommandToServer:v2];
  }
}

id sub_1001EF1B0(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_sync_setSyncVerificationNeededAndFullReportNeeded:shouldPostNotification:", *(unsigned __int8 *)(a1 + 40), *(unsigned __int8 *)(a1 + 41));
}

id sub_1001EF4C8(uint64_t a1)
{
  id v2 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    double v3 = *(double *)(a1 + 40) * 0.5;
    int v5 = 136315394;
    id v6 = "-[ADCommandCenter _shutdownAfterDelay:]_block_invoke";
    __int16 v7 = 2048;
    double v8 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s Start sending metrics for %f seconds before shutting down...", (uint8_t *)&v5, 0x16u);
  }
  return [*(id *)(a1 + 32) sendMetricsToServerWithTimeout:0 requiresUnlimitedPower:1 requiresActiveSession:0 purgesOversizedStorage:0 ignoresMetricsSenderDisabledSetting:0 scheduledActivity:&stru_100505BD0 completion:*(double *)(a1 + 40) * 0.5];
}

id sub_1001EF5BC(uint64_t a1)
{
  return [*(id *)(a1 + 32) _shutdownAfterDelay:0.0];
}

void sub_1001EF5C8(id a1)
{
  uint64_t v1 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v2 = 136315138;
    double v3 = "-[ADCommandCenter _shutdownAfterDelay:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_INFO, "%s Done sending metrics before shutting down.", (uint8_t *)&v2, 0xCu);
  }
}

void sub_1001EFA7C(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  objc_opt_class();
  char isKindOfClass = objc_opt_isKindOfClass();
  __int16 v7 = AFSiriLogContextDaemon;
  if (a3 || (isKindOfClass & 1) != 0)
  {
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      double v8 = *(void **)(a1 + 32);
      uint64_t v9 = *(void *)(a1 + 40);
      int v10 = 136315650;
      id v11 = "-[ADCommandCenter _cancelCrossDeviceRequestOperationsForRemoteRequest]_block_invoke";
      __int16 v12 = 2112;
      id v13 = v8;
      __int16 v14 = 2112;
      uint64_t v15 = v9;
      _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "%s Failed to cancel cross device request %@ on %@", (uint8_t *)&v10, 0x20u);
    }
  }
  else if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    int v10 = 136315394;
    id v11 = "-[ADCommandCenter _cancelCrossDeviceRequestOperationsForRemoteRequest]_block_invoke";
    __int16 v12 = 2112;
    id v13 = v5;
    _os_log_debug_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "%s response: %@", (uint8_t *)&v10, 0x16u);
  }
}

void sub_1001EFD28(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [*(id *)(a1 + 32) _executionDevicesForLocalRequestWithId:v3];
  id v5 = [v4 copy];

  uint64_t v20 = a1;
  [*(id *)(a1 + 32) _removeExecutionDevicesForLocalRequestWithId:v3];
  if ([v5 count])
  {
    id v6 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 136315394;
      id v30 = "-[ADCommandCenter _cancelCrossDeviceRequestOperationsForLocalRequestWithId:]_block_invoke";
      __int16 v31 = 2112;
      id v32 = v3;
      _os_log_debug_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "%s %@", buf, 0x16u);
    }
    __int16 v7 = [*(id *)(a1 + 32) _executionContextMatchingExecutionInfo:0 fallbackRequestID:v3];
    long long v24 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    id v18 = v5;
    id obj = v5;
    id v8 = [obj countByEnumeratingWithState:&v24 objects:v28 count:16];
    if (v8)
    {
      id v9 = v8;
      uint64_t v10 = *(void *)v25;
      do
      {
        for (i = 0; i != v9; i = (char *)i + 1)
        {
          if (*(void *)v25 != v10) {
            objc_enumerationMutation(obj);
          }
          uint64_t v12 = *(void *)(*((void *)&v24 + 1) + 8 * i);
          id v13 = objc_alloc_init((Class)SACancelCrossDeviceRequest);
          __int16 v14 = +[NSUUID UUID];
          uint64_t v15 = [v14 UUIDString];
          [v13 setAceId:v15];

          [v13 setRequestId:v3];
          id v16 = *(void **)(v20 + 32);
          uint64_t v17 = [[ADPeerInfo alloc] initWithAFPeerInfo:v12];
          v21[0] = _NSConcreteStackBlock;
          v21[1] = 3221225472;
          void v21[2] = sub_1001EFFFC;
          v21[3] = &unk_100505BB0;
          id v22 = v3;
          uint64_t v23 = v12;
          objc_msgSend(v16, "_remoteExecute_remoteDeviceExecuteCommand:onPeer:allowsRelay:throughProxyDevice:executionContext:completion:", v13, v17, 0, 0, v7, v21);
        }
        id v9 = [obj countByEnumeratingWithState:&v24 objects:v28 count:16];
      }
      while (v9);
    }

    id v5 = v18;
  }
}

void sub_1001EFFFC(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  objc_opt_class();
  char isKindOfClass = objc_opt_isKindOfClass();
  __int16 v7 = AFSiriLogContextDaemon;
  if (a3 || (isKindOfClass & 1) != 0)
  {
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      id v8 = *(void **)(a1 + 32);
      uint64_t v9 = *(void *)(a1 + 40);
      int v10 = 136315650;
      id v11 = "-[ADCommandCenter _cancelCrossDeviceRequestOperationsForLocalRequestWithId:]_block_invoke";
      __int16 v12 = 2112;
      id v13 = v8;
      __int16 v14 = 2112;
      uint64_t v15 = v9;
      _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "%s Failed to cancel cross device request %@ on %@", (uint8_t *)&v10, 0x20u);
    }
  }
  else if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    int v10 = 136315394;
    id v11 = "-[ADCommandCenter _cancelCrossDeviceRequestOperationsForLocalRequestWithId:]_block_invoke";
    __int16 v12 = 2112;
    id v13 = v5;
    _os_log_debug_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "%s response: %@", (uint8_t *)&v10, 0x16u);
  }
}

id sub_1001F0A6C(uint64_t a1)
{
  int v2 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v4 = 136315138;
    id v5 = "-[ADCommandCenter _handleNextCallbacksForReply:forCommand:forRequestId:withExecutionContext:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s missing refs resolved", (uint8_t *)&v4, 0xCu);
  }
  return [*(id *)(a1 + 32) _handleNextCallbacksForReply:*(void *)(a1 + 40) forCommand:*(void *)(a1 + 48) forRequestId:*(void *)(a1 + 56) withExecutionContext:*(void *)(a1 + 64)];
}

void sub_1001F0B28(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if ([*(id *)(a1 + 32) hasBeenFulfilled])
  {
    __int16 v7 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      id v8 = *(void **)(a1 + 40);
      *(_DWORD *)long long buf = 136315394;
      id v32 = "-[ADCommandCenter _handleNextCallbacksForReply:forCommand:forRequestId:withExecutionContext:]_block_invoke";
      __int16 v33 = 2112;
      id v34 = v8;
      uint64_t v9 = "%s missing refs for %@ have already been fulfilled";
      int v10 = v7;
      uint32_t v11 = 22;
LABEL_15:
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, v9, buf, v11);
    }
  }
  else
  {
    objc_opt_class();
    char isKindOfClass = objc_opt_isKindOfClass();
    id v13 = AFSiriLogContextDaemon;
    if (isKindOfClass)
    {
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)long long buf = 136315138;
        id v32 = "-[ADCommandCenter _handleNextCallbacksForReply:forCommand:forRequestId:withExecutionContext:]_block_invoke";
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "%s GetResultObjects Response, trying to handle callbacks again.", buf, 0xCu);
      }
      __int16 v14 = *(void **)(a1 + 48);
      uint64_t v15 = [*(id *)(*(void *)(a1 + 56) + 328) currentRequestId];
      LODWORD(v14) = [v14 isEqualToString:v15];

      if (v14)
      {
        uint64_t v16 = *(void *)(a1 + 48);
        id v17 = v5;
        [v17 setRefId:v16];
        id v18 = *(void **)(a1 + 56);
        v26[0] = _NSConcreteStackBlock;
        v26[1] = 3221225472;
        v26[2] = sub_1001F0E98;
        v26[3] = &unk_100505B60;
        id v27 = *(id *)(a1 + 32);
        id v19 = *(id *)(a1 + 48);
        uint64_t v20 = *(void *)(a1 + 56);
        id v21 = *(void **)(a1 + 64);
        id v28 = v19;
        uint64_t v29 = v20;
        id v30 = v21;
        [v18 _saAddResultObjects:v17 completion:v26];
      }
      else
      {
        uint64_t v23 = AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)long long buf = 136315138;
          id v32 = "-[ADCommandCenter _handleNextCallbacksForReply:forCommand:forRequestId:withExecutionContext:]_block_invoke";
          uint64_t v9 = "%s Ignore ARO for past requests";
          int v10 = v23;
          uint32_t v11 = 12;
          goto LABEL_15;
        }
      }
    }
    else
    {
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
      {
        uint64_t v25 = *(void *)(a1 + 48);
        *(_DWORD *)long long buf = 136315650;
        id v32 = "-[ADCommandCenter _handleNextCallbacksForReply:forCommand:forRequestId:withExecutionContext:]_block_invoke";
        __int16 v33 = 2112;
        id v34 = v6;
        __int16 v35 = 2112;
        uint64_t v36 = v25;
        _os_log_error_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "%s Failed getting result objects, error %@ request Id %@", buf, 0x20u);
      }
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        id v22 = v5;
      }
      else
      {
        id v22 = objc_alloc_init((Class)SACommandFailed);
        long long v24 = SiriCoreUUIDStringCreate();
        [v22 setAceId:v24];
      }
      [v22 setRefId:*(void *)(a1 + 48)];
      [*(id *)(a1 + 56) _handleCommand:v22 executionContext:*(void *)(a1 + 64) completion:0];
    }
  }
}

void sub_1001F0E98(uint64_t a1)
{
  if (([*(id *)(a1 + 32) hasBeenFulfilled] & 1) == 0)
  {
    int v2 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      int v5 = 136315138;
      id v6 = "-[ADCommandCenter _handleNextCallbacksForReply:forCommand:forRequestId:withExecutionContext:]_block_invoke";
      _os_log_error_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "%s Missing references still not fulfilled, failing", (uint8_t *)&v5, 0xCu);
    }
    id v3 = objc_alloc_init((Class)SACommandFailed);
    int v4 = SiriCoreUUIDStringCreate();
    [v3 setAceId:v4];

    [v3 setRefId:*(void *)(a1 + 40)];
    [*(id *)(a1 + 48) _handleCommand:v3 executionContext:*(void *)(a1 + 56) completion:0];
  }
}

void sub_1001F1248(uint64_t a1)
{
  uint64_t v2 = objc_msgSend(*(id *)(a1 + 40), "_ad_speechRequestOptionsWithClientConfiguration:", *(void *)(*(void *)(a1 + 32) + 504));
  uint64_t v3 = *(void *)(a1 + 32);
  int v4 = *(void **)(v3 + 288);
  *(void *)(v3 + 28_Block_object_dispose(&STACK[0x220], 8) = v2;

  [*(id *)(a1 + 32) _reallyHandleNewStartLocalRequest:*(void *)(a1 + 48)];
  int v5 = [*(id *)(a1 + 48) aceId];
  id v6 = [*(id *)(a1 + 40) turnIdentifier];
  __int16 v7 = AFSiriLogContextDaemon;
  if (v6)
  {
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      int v11 = 136315394;
      __int16 v12 = "-[ADCommandCenter _startLocalRequest:withRequestInfo:forDelegate:suppressCancelationAlertIfCapturingSpeech:c"
            "ompletion:]_block_invoke";
      __int16 v13 = 2112;
      __int16 v14 = v5;
      _os_log_debug_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "%s Logging RequestLink for StartLocalRequest with requestId=%@", (uint8_t *)&v11, 0x16u);
    }
    sub_1001CE2B0(v5, v6);
  }
  else if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
  {
    int v11 = 136315394;
    __int16 v12 = "-[ADCommandCenter _startLocalRequest:withRequestInfo:forDelegate:suppressCancelationAlertIfCapturingSpeech:com"
          "pletion:]_block_invoke";
    __int16 v13 = 2112;
    __int16 v14 = v5;
    _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "%s TurnId nil for local request with requestId=%@", (uint8_t *)&v11, 0x16u);
  }
  id v8 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v9 = *(void **)(a1 + 56);
    uint64_t v10 = *(void *)(a1 + 64);
    int v11 = 136315650;
    __int16 v12 = "-[ADCommandCenter _startLocalRequest:withRequestInfo:forDelegate:suppressCancelationAlertIfCapturingSpeech:com"
          "pletion:]_block_invoke";
    __int16 v13 = 2112;
    __int16 v14 = v9;
    __int16 v15 = 2112;
    uint64_t v16 = v10;
    _os_log_debug_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "%s Leaving request group %@ (%@)...", (uint8_t *)&v11, 0x20u);
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 56));
}

uint64_t sub_1001F258C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(unsigned __int8 *)(*(void *)(a1 + 32) + 512), *(unsigned __int8 *)(*(void *)(a1 + 32) + 513), *(unsigned __int8 *)(*(void *)(a1 + 32) + 528));
}

uint64_t sub_1001F2D50(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2) {
    (*(void (**)(void))(v2 + 16))();
  }
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 56));
  int v4 = WeakRetained;
  __int16 v7 = WeakRetained;
  if (WeakRetained)
  {
    [WeakRetained _clearSpeechDelegateState];
    objc_storeStrong(v7 + 5, *(id *)(a1 + 32));
    [v7 _setSpeechCapturingContext:0];
    int v4 = v7;
  }
  uint64_t v5 = *(void *)(a1 + 48);
  if (v5)
  {
    uint64_t v5 = (*(uint64_t (**)(uint64_t, id *))(v5 + 16))(v5, v4);
    int v4 = v7;
  }
  return _objc_release_x1(v5, v4);
}

uint64_t sub_1001F384C(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);
  return v2();
}

id sub_1001F3DA0(uint64_t a1)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1001F3E14;
  v3[3] = &unk_10050E2A0;
  uint64_t v1 = *(void **)(a1 + 32);
  void v3[4] = *(void *)(a1 + 40);
  return [v1 getContextSnapshotForCurrentRequestWithCompletion:v3];
}

void sub_1001F3E14(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(NSObject **)(v4 + 8);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  void v7[2] = sub_1001F3EB0;
  v7[3] = &unk_10050E160;
  void v7[4] = v4;
  id v8 = v3;
  id v6 = v3;
  dispatch_async(v5, v7);
}

void sub_1001F3EB0(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) _deviceRouter];
  [v2 updateContext:*(void *)(a1 + 40)];
}

void sub_1001F45F4(id a1)
{
  uint64_t v1 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    int v2 = 136315138;
    id v3 = "-[ADCommandCenter _stopUpdatingMotionActivity]_block_invoke";
    _os_log_debug_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEBUG, "%s Motion activity manager stopped", (uint8_t *)&v2, 0xCu);
  }
}

void sub_1001F4710(id a1, BOOL a2)
{
  BOOL v2 = a2;
  id v3 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    CFStringRef v4 = @"NO";
    if (v2) {
      CFStringRef v4 = @"YES";
    }
    int v5 = 136315394;
    id v6 = "-[ADCommandCenter _startUpdatingMotionActivity]_block_invoke";
    __int16 v7 = 2112;
    CFStringRef v8 = v4;
    _os_log_debug_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "%s Motion activity manager started: %@", (uint8_t *)&v5, 0x16u);
  }
}

void sub_1001F6134(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  __int16 v7 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v8 = *(void *)(a1 + 32);
    int v9 = 136315650;
    uint64_t v10 = "-[ADCommandCenter _addCompletion:forCommand:forKey:]_block_invoke";
    __int16 v11 = 2112;
    uint64_t v12 = v8;
    __int16 v13 = 2112;
    id v14 = v6;
    _os_log_debug_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "%s Calling command completion block for command %@ with error %@)", (uint8_t *)&v9, 0x20u);
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_1001F71D4(uint64_t a1)
{
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  BOOL v2 = WeakRetained;
  if (!WeakRetained || !WeakRetained[58])
  {
    __int16 v7 = AFSiriLogContextDaemon;
    if (!os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO)) {
      goto LABEL_12;
    }
    int v12 = 136315138;
    __int16 v13 = "-[ADCommandCenter _createRootExecutionContextForRequestID:]_block_invoke";
    __int16 v11 = "%s _mostRecentRootExecutionContext already nil";
LABEL_11:
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, v11, (uint8_t *)&v12, 0xCu);
    goto LABEL_12;
  }
  id v3 = +[NSDate now];
  CFStringRef v4 = [v2[58] creationDate];
  [v3 timeIntervalSinceDate:v4];
  double v6 = v5;

  __int16 v7 = AFSiriLogContextDaemon;
  BOOL v8 = os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO);
  if (v6 <= 300.0)
  {
    if (!v8) {
      goto LABEL_12;
    }
    int v12 = 136315138;
    __int16 v13 = "-[ADCommandCenter _createRootExecutionContextForRequestID:]_block_invoke";
    __int16 v11 = "%s Not clearing _mostRecentRootExecutionContext, due to more recent request";
    goto LABEL_11;
  }
  if (v8)
  {
    id v9 = v2[58];
    int v12 = 136315394;
    __int16 v13 = "-[ADCommandCenter _createRootExecutionContextForRequestID:]_block_invoke";
    __int16 v14 = 2112;
    id v15 = v9;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "%s Clearing _mostRecentRootExecutionContext %@", (uint8_t *)&v12, 0x16u);
  }
  id v10 = v2[58];
  v2[58] = 0;

LABEL_12:
}

void sub_1001F7A90(uint64_t a1)
{
  if (AFIsNano() && (*(unsigned char *)(a1 + 40) || *(unsigned char *)(a1 + 41)) || AFIsHorseman())
  {
    if (AFIsHorseman())
    {
      BOOL v2 = [*(id *)(a1 + 32) _getPreheatOptionsForHorseman];
    }
    else
    {
      BOOL v2 = 0;
    }
    id v3 = [*(id *)(a1 + 32) _speechManager];
    [v3 preheatWithOptions:v2];

    CFStringRef v4 = [*(id *)(a1 + 32) _speechManager];
    [v4 endSession];

    *(void *)(*(void *)(a1 + 32) + 24_Block_object_dispose(&STACK[0x220], 8) = 0;
    id v5 = +[CSSiriVibrationManager sharedManager];
    double v6 = [*(id *)(a1 + 32) _sessionManager];
    [v6 preheatSessions];

    id v7 = [*(id *)(a1 + 32) _locationManager];
    [*(id *)(a1 + 32) _preheatAllServices];
    if (AFIsHorseman())
    {
      id v8 = +[ADHomeInfoManager sharedInfoManager];
      id v9 = +[ADClockService sharedService];
      id v10 = +[ADHomeAnnouncementService sharedService];
      id v11 = [*(id *)(a1 + 32) _deviceSyncCoordinator];
    }
    else if (!AFIsNano())
    {
LABEL_12:

      goto LABEL_13;
    }
    int v12 = [*(id *)(a1 + 32) _contextManager];
    [v12 preheatBackgroundContext];

    goto LABEL_12;
  }
LABEL_13:
  if (AFSupportsMultiUser())
  {
    id v13 = +[ADMultiUserService sharedService];
    id v14 = +[ADUserProfileService sharedService];
  }
  id v15 = [*(id *)(a1 + 32) _contextManager];
  uint64_t v16 = +[ADDeviceCircleManager sharedInstance];
  id v17 = [[ADDeviceResolutionServiceListener alloc] initWithInstanceContext:*(void *)(*(void *)(a1 + 32) + 688) deviceCircleManager:v16];
  uint64_t v18 = *(void *)(a1 + 32);
  id v19 = *(void **)(v18 + 224);
  *(void *)(v18 + 224) = v17;

  id v20 = objc_alloc_init((Class)NSMapTable);
  uint64_t v21 = *(void *)(a1 + 32);
  id v22 = *(void **)(v21 + 944);
  *(void *)(v21 + 944) = v20;

  id v23 = objc_alloc_init((Class)NSMapTable);
  uint64_t v24 = *(void *)(a1 + 32);
  uint64_t v25 = *(void **)(v24 + 936);
  *(void *)(v24 + 936) = v23;

  if (AFDeviceSupportsCarPlay())
  {
    long long v26 = [(AFSiriAnnouncementRequestCapabilityManager *)[ADSiriAnnouncementRequestCapabilityManager alloc] initWithPlatform:2];
    uint64_t v27 = *(void *)(a1 + 32);
    id v28 = *(void **)(v27 + 216);
    *(void *)(v27 + 216) = v26;
  }
  uint64_t v29 = [*(id *)(a1 + 32) _flowServiceListener];
  [v29 setupListener];

  id v30 = _AFPreferencesValueForKey();
  *(unsigned char *)(*(void *)(a1 + 32) + 535) = _AFPreferencesBoolFromValueWithDefault();

  uint64_t v31 = +[ADAssetManager sharedInstance];
  uint64_t v32 = *(void *)(a1 + 32);
  __int16 v33 = *(void **)(v32 + 232);
  *(void *)(v32 + 232) = v31;

  id v34 = objc_alloc_init(ADSAEAssetsAvailabilityObserver);
  [*(id *)(*(void *)(a1 + 32) + 232) addAvailabilityObserver:v34];
  id v35 = +[ADSyncConfigAssetManager sharedInstance];
  if (+[AFFeatureFlags isNLServerFallbackDisabledWithExperiment](AFFeatureFlags, "isNLServerFallbackDisabledWithExperiment"))id v36 = +[ADServerFallbackConfigManager sharedInstance]; {
  [*(id *)(a1 + 32) _setupUIBridgeServiceListener];
  }
  if (AFDeviceSupportsSiriUOD())
  {
    dispatch_time_t v37 = objc_alloc_init(ADVoiceTriggerInCallDiscoverabilitySignalManager);
    uint64_t v38 = *(void *)(a1 + 32);
    id v39 = *(void **)(v38 + 240);
    *(void *)(v38 + 240) = v37;
  }
  id v40 = *(id *)(*(void *)(a1 + 32) + 8);
  id v41 = +[ADQueueMonitor sharedMonitor];
  v43[0] = _NSConcreteStackBlock;
  v43[1] = 3221225472;
  v43[2] = sub_1001F7E70;
  v43[3] = &unk_10050C458;
  id v44 = v40;
  id v42 = v40;
  [v41 addQueue:v42 heartBeatInterval:v43 timeoutInterval:5.0 timeoutHandler:5.0];
}

void sub_1001F7E70(uint64_t a1, unint64_t a2)
{
  id v3 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", @"Queue %s did not respond to watchdog and is likely blocked.", dispatch_queue_get_label(*(dispatch_queue_t *)(a1 + 32)));
  CFStringRef v4 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)long long buf = 136315394;
    id v7 = "-[ADCommandCenter init]_block_invoke_2";
    __int16 v8 = 2112;
    id v9 = v3;
    _os_log_fault_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "%s %@", buf, 0x16u);
  }
  int v5 = AFIsInternalInstall();
  if (a2 <= 3 && v5) {
    WriteStackshotReport_async();
  }
}

void sub_1001F8154(id a1)
{
  uint64_t v1 = objc_alloc_init(ADCommandCenter);
  uint64_t v2 = qword_100585DD0;
  qword_100585DD0 = (uint64_t)v1;
  _objc_release_x1(v1, v2);
}

void sub_1001F8494(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  if (([a3 isFiring] & 1) == 0) {
    [*(id *)(a1 + 32) removeObjectForKey:v5];
  }
}

void sub_1001F89E0(uint64_t a1, void *a2)
{
  id v3 = a2;
  CFStringRef v4 = +[ADPreferences sharedPreferences];
  uint64_t v5 = [v4 languageCode];
  double v6 = (void *)v5;
  id v7 = &stru_10050F7D8;
  if (v5) {
    id v7 = (__CFString *)v5;
  }
  __int16 v8 = v7;

  id v25 = objc_alloc_init((Class)NSMutableArray);
  long long v30 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  id v9 = v3;
  id v10 = [v9 countByEnumeratingWithState:&v30 objects:v35 count:16];
  if (v10)
  {
    id v11 = v10;
    uint64_t v12 = 0;
    uint64_t v13 = *(void *)v31;
    do
    {
      for (i = 0; i != v11; i = (char *)i + 1)
      {
        if (*(void *)v31 != v13) {
          objc_enumerationMutation(v9);
        }
        id v15 = *(void **)(*((void *)&v30 + 1) + 8 * i);
        uint64_t v16 = *(void **)(a1 + 32);
        id v17 = [v15 sectionID];
        LODWORD(v16) = [v16 isFirstPartyApplicationWithBundleId:v17];

        if (v16)
        {
          [*(id *)(a1 + 32) _emitAnnounceEnablementEventFromSectionInfo:v15 siriLocale:v8];
        }
        else
        {
          uint64_t v18 = +[NSNumber numberWithUnsignedInteger:(char *)i + v12];
          [v25 addObject:v18];
        }
      }
      v12 += (uint64_t)i;
      id v11 = [v9 countByEnumeratingWithState:&v30 objects:v35 count:16];
    }
    while (v11);
  }

  id v19 = [*(id *)(a1 + 32) _randomlySampleWithoutReplacementNumSamples:5 fromArray:v25];
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  id v20 = [v19 countByEnumeratingWithState:&v26 objects:v34 count:16];
  if (v20)
  {
    id v21 = v20;
    uint64_t v22 = *(void *)v27;
    do
    {
      for (j = 0; j != v21; j = (char *)j + 1)
      {
        if (*(void *)v27 != v22) {
          objc_enumerationMutation(v19);
        }
        uint64_t v24 = objc_msgSend(v9, "objectAtIndex:", objc_msgSend(*(id *)(*((void *)&v26 + 1) + 8 * (void)j), "unsignedIntegerValue"));
        [*(id *)(a1 + 32) _emitAnnounceEnablementEventFromSectionInfo:v24 siriLocale:v8];
      }
      id v21 = [v19 countByEnumeratingWithState:&v26 objects:v34 count:16];
    }
    while (v21);
  }
}

id sub_1001F8C70()
{
  if (qword_100585DF8 != -1) {
    dispatch_once(&qword_100585DF8, &stru_100506970);
  }
  uint64_t v0 = (void *)qword_100585E00;
  return v0;
}

void sub_1001F8CC4(id a1)
{
  if (qword_100585E08 != -1) {
    dispatch_once(&qword_100585E08, &stru_100506990);
  }
  qword_100585E00 = (uint64_t)objc_getClass("BBSettingsGateway");
  off_100582468 = sub_1001F8D28;
}

id sub_1001F8D28()
{
  return (id)qword_100585E00;
}

void sub_1001F8D34(id a1)
{
  qword_100585E10 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/BulletinBoard.framework/BulletinBoard", 2);
}

id sub_1001FA06C(uint64_t a1)
{
  [*(id *)(a1 + 32) _updateAudioRouteOnMainThread];
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = sub_1001FA0B4();
  return [v2 _notifyObservers:v3];
}

uint64_t sub_1001FA0B4()
{
  if (!sub_1001FA16C()) {
    return 0;
  }
  uint64_t v0 = +[AFPreferences sharedPreferences];
  id v1 = [v0 useDeviceSpeakerForTTS];

  if (v1 != (id)2)
  {
    uint64_t v2 = +[ADTTSMutingObserver sharedInstance];
    unsigned __int8 v3 = [v2 _currentRouteIsHandsFree];

    if ((v3 & 1) == 0)
    {
      if (v1 != (id)3)
      {
        double v6 = +[ADSystemMuteModeObserver sharedInstance];
        BOOL v4 = [v6 muteMode] != (id)1;

        return v4;
      }
      return 0;
    }
  }
  return 1;
}

uint64_t sub_1001FA16C()
{
  if (AFIsATVOnly()) {
    return 0;
  }
  if (!AFIsNano()) {
    return 1;
  }
  return _AFSupportsSiriSpeaks();
}

id sub_1001FA2D8(uint64_t a1)
{
  [*(id *)(a1 + 32) _cleanupAudioRouteOnMainThread];
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = sub_1001FA0B4();
  return [v2 _notifyObservers:v3];
}

id sub_1001FA444(uint64_t a1)
{
  [*(id *)(a1 + 32) _updateAudioRouteOnMainThread];
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = sub_1001FA0B4();
  return [v2 _notifyObservers:v3];
}

void *sub_1001FA524(uint64_t a1)
{
  CFBagRemoveValue(*(CFMutableBagRef *)(*(void *)(a1 + 32) + 8), *(const void **)(a1 + 40));
  uint64_t result = (void *)CFBagGetCount(*(CFBagRef *)(*(void *)(a1 + 32) + 8));
  if (!result)
  {
    DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterRemoveObserver(DarwinNotifyCenter, *(const void **)(a1 + 32), kAFPreferencesDidChangeDarwinNotification, 0);
    uint64_t result = *(void **)(a1 + 32);
    if (result[2] == 1)
    {
      return [result _stopListeningForMuteStateChanges];
    }
  }
  return result;
}

void *sub_1001FA640(uint64_t a1)
{
  CFBagAddValue(*(CFMutableBagRef *)(*(void *)(a1 + 32) + 8), *(const void **)(a1 + 40));
  uint64_t result = (void *)CFBagGetCount(*(CFBagRef *)(*(void *)(a1 + 32) + 8));
  if (result == (void *)1)
  {
    DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterAddObserver(DarwinNotifyCenter, *(const void **)(a1 + 32), (CFNotificationCallback)sub_1001FA700, kAFPreferencesDidChangeDarwinNotification, 0, CFNotificationSuspensionBehaviorDeliverImmediately);
    BOOL v4 = +[AFPreferences sharedPreferences];
    *(void *)(*(void *)(a1 + 32) + 16) = [v4 useDeviceSpeakerForTTS];

    uint64_t result = *(void **)(a1 + 32);
    if (result[2] == 1)
    {
      return [result _listenForMuteStateChanges];
    }
  }
  return result;
}

void sub_1001FA700(uint64_t a1, uint64_t a2)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1001FA774;
  block[3] = &unk_10050E350;
  void block[4] = a2;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
}

id sub_1001FA774(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _useDeviceSpeakerForTTSPreferenceChanged];
}

id sub_1001FAD58(uint64_t a1)
{
  id v1 = *(void **)(a1 + 32);
  uint64_t v2 = sub_1001FA0B4();
  return [v1 _notifyObservers:v2];
}

id sub_1001FADC8(void *a1, const __CFBoolean *a2)
{
  return _[a1 adShouldSpeakStateDidChange:kCFBooleanTrue == a2];
}

id sub_1001FB1CC(uint64_t a1)
{
  [*(id *)(a1 + 32) _listenForAudioRouteChanges];
  uint64_t v2 = *(void **)(a1 + 32);
  return [v2 _updateAudioRouteOnMainThread];
}

void sub_1001FB25C(id a1)
{
  id v1 = objc_alloc_init(ADTTSMutingObserver);
  uint64_t v2 = qword_100585E28;
  qword_100585E28 = (uint64_t)v1;
  _objc_release_x1(v1, v2);
}

void sub_1001FB400(id a1)
{
  id v1 = objc_alloc_init(ADSystemLanguagePreferencesObserver);
  uint64_t v2 = qword_100585E88;
  qword_100585E88 = (uint64_t)v1;
  _objc_release_x1(v1, v2);
}

id sub_1001FB43C()
{
  uint64_t v0 = SiriCoreUUIDStringCreate();
  id v1 = [objc_alloc((Class)NSString) initWithFormat:@"amos://%@", v0];
  id v2 = [objc_alloc((Class)NSURL) initWithString:v1];

  return v2;
}

void sub_1001FB51C(id a1)
{
  AFUserSupportDirectoryPath();
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  id v1 = [objc_alloc((Class)NSURL) initFileURLWithPath:v4 isDirectory:1];
  id v2 = (void *)qword_100585E18;
  qword_100585E18 = (uint64_t)v1;

  uint64_t v3 = +[NSFileManager defaultManager];
  [v3 createDirectoryAtURL:qword_100585E18 withIntermediateDirectories:1 attributes:0 error:0];
}

id sub_1001FB5B4(void *a1)
{
  id v2 = AFApplicationStateUnknown;
  if (a1)
  {
    id v3 = a1;
    id v4 = objc_alloc_init((Class)BKSApplicationStateMonitor);
    [v4 applicationStateForApplication:v3];

    [v4 invalidate];
    uint64_t v5 = AFDescriptionOfBKSApplicationState();

    id v2 = (id)v5;
  }
  return v2;
}

void sub_1001FB658(char a1)
{
  id v2 = dispatch_get_global_queue(0, 0);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1001FB6F4;
  v3[3] = &unk_10050CD50;
  id v4 = 0;
  char v5 = a1;
  dispatch_async(v2, v3);
}

void sub_1001FB6F4(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    uint64_t v2 = *(unsigned __int8 *)(a1 + 40);
    _SBSSetStatusBarShowsActivityForApplication(v2);
    return;
  }
  os_unfair_lock_lock(&stru_100585E90);
  if (*(unsigned char *)(a1 + 40))
  {
    int v3 = 1;
LABEL_9:
    dword_100585E94 += v3;
    os_unfair_lock_unlock(&stru_100585E90);
    uint64_t v4 = *(unsigned __int8 *)(a1 + 40);
    _SBSSetAllApplicationsShowProgress(v4, 2000);
    return;
  }
  if (dword_100585E94 > 0)
  {
    int v3 = -1;
    goto LABEL_9;
  }
  os_unfair_lock_unlock(&stru_100585E90);
}

void sub_1001FB7C0()
{
  uint64_t v0 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v1 = 136315138;
    uint64_t v2 = "ADHideNetworkActivityIndicatorForApplicationIdentifier";
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_INFO, "%s *** Turning off data spinny", (uint8_t *)&v1, 0xCu);
  }
  sub_1001FB658(0);
}

uint64_t sub_1001FB870()
{
  if (AFIsNano())
  {
    return _AFPreferencesShouldCensorSpeechInternal();
  }
  else
  {
    int v1 = AFIsHorseman();
    uint64_t v2 = +[MCProfileConnection sharedConnection];
    int v3 = v2;
    if (v1) {
      BOOL v4 = [v2 effectiveRestrictedBoolValueForSetting:MCFeatureExplicitContentAllowed] != 1;
    }
    else {
      BOOL v4 = [v2 effectiveBoolValueForSetting:MCFeatureAssistantProfanityFilterForced] == 1;
    }

    return v4;
  }
}

BOOL sub_1001FB914()
{
  uint64_t v0 = +[MCProfileConnection sharedConnection];
  BOOL v1 = [v0 effectiveBoolValueForSetting:MCFeatureAllowVoiceDialing] == 2;

  return v1;
}

BOOL sub_1001FB964()
{
  uint64_t v0 = +[MCProfileConnection sharedConnection];
  BOOL v1 = [v0 effectiveBoolValueForSetting:MCFeatureLockScreenControlCenterAllowed] == 2;

  return v1;
}

uint64_t sub_1001FB9B4()
{
  if (AFIsHorseman() & 1) != 0 || (AFIsATV()) {
    return 0;
  }
  else {
    return AFIsNano() ^ 1;
  }
}

uint64_t sub_1001FB9E8()
{
  int IsRunningAsInstance = AFProcessIsRunningAsInstance();
  if (IsRunningAsInstance)
  {
    BOOL v1 = AFSiriLogContextSync;
    if (os_log_type_enabled(AFSiriLogContextSync, OS_LOG_TYPE_INFO))
    {
      int v3 = 136315138;
      BOOL v4 = "ADCanEverAllowSync";
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_INFO, "%s Sync never allowed because this process is running as an instance of a multi-instance service.", (uint8_t *)&v3, 0xCu);
    }
  }
  return IsRunningAsInstance ^ 1u;
}

BOOL sub_1001FBAA0()
{
  uint64_t v0 = +[AFPreferences sharedPreferences];
  BOOL v1 = +[ADPreferences sharedPreferences];
  uint64_t v2 = [v1 languageCode];

  int v3 = +[ADAssetManager sharedInstance];
  BOOL v4 = [v3 assetsAvailableStatusForLanguage:v2];
  unsigned int v5 = +[AFUtilitiesWrapper uodStatusSupportedFull:v4 languageCode:v2];

  unsigned int v6 = [v0 deviceHasPairedWatches];
  unsigned int v7 = [v0 deviceHasAtvOrHomepodInHome];
  __int16 v8 = +[ADSyncConfigAssetManager sharedInstance];
  unsigned int v9 = [v8 isInactiveDeviceSyncDisabled];
  id v10 = AFSiriLogContextSync;
  if (os_log_type_enabled(AFSiriLogContextSync, OS_LOG_TYPE_INFO))
  {
    int v16 = 136316162;
    id v17 = "ADShouldAllowInactiveDeviceSync";
    __int16 v18 = 1024;
    unsigned int v19 = v5;
    __int16 v20 = 1024;
    unsigned int v21 = v7;
    __int16 v22 = 1024;
    unsigned int v23 = v6;
    __int16 v24 = 1024;
    unsigned int v25 = v9;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "%s fullUodCapable: %d, deviceHasAtvOrHomepodInHome: %d, deviceHasPairedWatch: %d, inactiveDeviceSyncDisabledViaAssets: %d", (uint8_t *)&v16, 0x24u);
  }
  char v11 = v5 ^ 1 | v7 | v6;
  BOOL v12 = 1;
  if ((v11 & 1) == 0 && ((v9 ^ 1) & 1) == 0)
  {
    uint64_t v13 = +[ADUtilitiesWrapper lastTimestampForFileName:@"session_did_finish_timestamp"];
    if (v13
      || (+[ADUtilitiesWrapper lastTimestampForFileName:@"session_created_siri_timestamp"], (uint64_t v13 = objc_claimAutoreleasedReturnValue()) != 0))
    {
      [v13 timeIntervalSinceNow];
      BOOL v12 = -v14 < (double)(86400 * (uint64_t)[v8 inactiveDeviceThreshold]);
    }
    else
    {
      BOOL v12 = 1;
    }
  }

  return v12;
}

uint64_t sub_1001FC284()
{
  if (!sub_1001FB9E8()) {
    return 0;
  }
  if ((AFHasUnlockedSinceBoot() & 1) == 0)
  {
    BOOL v4 = AFSiriLogContextSync;
    if (os_log_type_enabled(AFSiriLogContextSync, OS_LOG_TYPE_INFO))
    {
      int v6 = 136315138;
      unsigned int v7 = "ADShouldAllowSync";
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%s Sync disallowed because device has not unlocked.", (uint8_t *)&v6, 0xCu);
    }
    return 0;
  }
  if (!-[ADAssistantProperties _getIsServerUserDataSyncEnabled]_0()) {
    return 0;
  }
  uint64_t v0 = +[AFPreferences sharedPreferences];
  unsigned int v1 = [v0 isDictationHIPAACompliant];
  if (v1)
  {
    uint64_t v2 = AFSiriLogContextSync;
    if (os_log_type_enabled(AFSiriLogContextSync, OS_LOG_TYPE_INFO))
    {
      int v6 = 136315138;
      unsigned int v7 = "ADShouldAllowSync";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s Sync disallowd because we have HIPAA On-Device Dictation enabled.", (uint8_t *)&v6, 0xCu);
    }
  }
  uint64_t v3 = v1 ^ 1;

  return v3;
}

id sub_1001FC3D8(void *a1)
{
  id v1 = a1;
  uint64_t v2 = +[LSApplicationWorkspace defaultWorkspace];
  uint64_t v6 = FBSOpenApplicationOptionKeyPromptUnlockDevice;
  unsigned int v7 = &__kCFBooleanTrue;
  uint64_t v3 = +[NSDictionary dictionaryWithObjects:&v7 forKeys:&v6 count:1];
  id v4 = [v2 openSensitiveURL:v1 withOptions:v3];

  return v4;
}

void sub_1001FC4B0(void *a1)
{
  uint64_t v2 = @"ClientConnection";
  id v3 = a1;
  id v4 = dispatch_get_global_queue(17, 0);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  void v7[2] = sub_1001FC584;
  v7[3] = &unk_10050E160;
  __int16 v8 = @"ClientConnection";
  id v9 = v3;
  id v5 = v3;
  uint64_t v6 = @"ClientConnection";
  dispatch_async(v4, v7);
}

uint64_t sub_1001FC584(uint64_t a1)
{
  uint64_t result = PLShouldLogRegisteredEvent();
  if (result)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 40);
    return _PLLogRegisteredEvent(38, v3, v4, 0);
  }
  return result;
}

void sub_1001FC5E0(void *a1)
{
  id v1 = a1;
  uint64_t v2 = dispatch_get_global_queue(17, 0);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1001FC68C;
  block[3] = &unk_10050E138;
  id v5 = v1;
  id v3 = v1;
  dispatch_async(v2, block);
}

uint64_t sub_1001FC68C(uint64_t a1)
{
  return _PLLogTimeSensitiveRegisteredEvent(38, @"DictationConnection", *(void *)(a1 + 32), 0);
}

void sub_1001FC6A4(id a1)
{
  id v1 = (id)CFPreferencesCopyAppValue(@"StoreDemoMode", @"com.apple.demo-settings");
  id v2 = v1;
  if (v1)
  {
    id v3 = v1;
    id v1 = [v1 BOOLValue];
    id v2 = v3;
  }
  byte_100585E39 = (char)v1;
  _objc_release_x1(v1, v2);
}

id sub_1001FC704()
{
  memset(&v3, 0, sizeof(v3));
  pthread_attr_init(&v3);
  sched_param v2 = 0;
  pthread_attr_getschedparam(&v3, &v2);
  v2.sched_priority = 46;
  pthread_attr_setschedpolicy(&v3, 2);
  pthread_attr_setschedparam(&v3, &v2);
  pthread_attr_setinheritsched(&v3, 2);
  uint64_t v0 = (void *)dispatch_pthread_root_queue_create();
  pthread_attr_destroy(&v3);
  return v0;
}

void sub_1001FC7E0(id a1)
{
  memset(v15, 0, sizeof(v15));
  size_t v10 = 37;
  int v1 = sysctlbyname("kern.bootsessionuuid", v15, &v10, 0, 0);
  if (v1)
  {
    int v2 = v1;
    pthread_attr_t v3 = (void *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      __int16 v8 = v3;
      id v9 = strerror(v2);
      *(_DWORD *)long long buf = 136315394;
      BOOL v12 = "ADSystemGetBootSessionUUID_block_invoke";
      __int16 v13 = 2080;
      uint64_t v14 = (uint64_t)v9;
      _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "%s Failed getting kern.bootsessionuuid with sysctlbyname() %s", buf, 0x16u);
    }
    uint64_t v4 = (void *)qword_100585E50;
    qword_100585E50 = 0;
  }
  else
  {
    id v5 = [objc_alloc((Class)NSString) initWithUTF8String:v15];
    uint64_t v6 = (void *)qword_100585E50;
    qword_100585E50 = (uint64_t)v5;

    unsigned int v7 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 136315394;
      BOOL v12 = "ADSystemGetBootSessionUUID_block_invoke";
      __int16 v13 = 2112;
      uint64_t v14 = qword_100585E50;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "%s kern.bootsessionuuid is %@", buf, 0x16u);
    }
  }
}

void sub_1001FC984(id a1)
{
  int v1 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  int v2 = dispatch_queue_attr_make_with_qos_class(v1, QOS_CLASS_UTILITY, 0);

  dispatch_queue_t v3 = dispatch_queue_create("com.apple.siri.duet", v2);
  uint64_t v4 = (void *)qword_100585E70;
  qword_100585E70 = (uint64_t)v3;
}

void sub_1001FCA00(id a1)
{
  id v1 = objc_alloc((Class)NSSet);
  id v2 = objc_msgSend(v1, "initWithObjects:", SAAlarmGroupIdentifier, SAPhoneGroupIdentifier, SAReminderGroupIdentifier, SATimerGroupIdentifier, SAMPGroupIdentifier, SALocalSearchGroupIdentifier, 0);
  uint64_t v3 = qword_100585E60;
  qword_100585E60 = (uint64_t)v2;
  _objc_release_x1(v2, v3);
}

void sub_1001FCA9C(uint64_t a1, void *a2)
{
  uint64_t v3 = [a2 eventBody];
  unsigned int v4 = [v3 isStart];
  id v5 = AFSiriLogContextUtility;
  if (os_log_type_enabled(AFSiriLogContextUtility, OS_LOG_TYPE_INFO))
  {
    int v6 = 136315394;
    unsigned int v7 = "ADCarPlayHasBeenActiveInLast24Hours_block_invoke";
    __int16 v8 = 1024;
    unsigned int v9 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "%s Received CarPlay event isStart: %d", (uint8_t *)&v6, 0x12u);
  }
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) |= v4;
}

void sub_1001FCB8C(id a1, BPSCompletion *a2)
{
  uint64_t v3 = (void *)AFSiriLogContextUtility;
  if (os_log_type_enabled(AFSiriLogContextUtility, OS_LOG_TYPE_INFO))
  {
    unsigned int v4 = v3;
    id v5 = a2;
    id v6 = [(BPSCompletion *)v5 state];
    unsigned int v7 = [(BPSCompletion *)v5 error];

    int v8 = 136315650;
    unsigned int v9 = "ADCarPlayHasBeenActiveInLast24Hours_block_invoke";
    __int16 v10 = 2048;
    id v11 = v6;
    __int16 v12 = 2112;
    __int16 v13 = v7;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%s CarPlayPublisher completed with state: %ld; error: %@",
      (uint8_t *)&v8,
      0x20u);
  }
}

id sub_1001FCC8C()
{
  if (qword_100585E98 != -1) {
    dispatch_once(&qword_100585E98, &stru_100506AD8);
  }
  uint64_t v0 = (void *)qword_100585EA0;
  return v0;
}

void sub_1001FCCE0(id a1)
{
  if (qword_100585EA8 != -1) {
    dispatch_once(&qword_100585EA8, &stru_100506AF8);
  }
  qword_100585EA0 = (uint64_t)objc_getClass("BMStreams");
  off_100582470 = sub_1001FCD44;
}

id sub_1001FCD44()
{
  return (id)qword_100585EA0;
}

void sub_1001FCD50(id a1)
{
  qword_100585EB0 = (uint64_t)dlopen("/System/Library/Frameworks/BiomeStreams.framework/BiomeStreams", 2);
}

void sub_1001FCD7C(void *a1)
{
  id v1 = a1;
  id v2 = objc_alloc_init((Class)NSMutableArray);
  uint64_t v3 = +[ADBluetoothManager sharedInstance];
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_1001FCE54;
  v6[3] = &unk_10050DEC0;
  id v7 = v2;
  id v8 = v1;
  id v4 = v1;
  id v5 = v2;
  [v3 getPairedDevicesWithCompletion:v6];
}

void sub_1001FCE54(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = dispatch_group_create();
  id v5 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  dispatch_queue_t v6 = dispatch_queue_create("com.apple.assistant.settings-client.paired-bluetooth-devices", v5);

  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  id obj = v3;
  id v7 = [obj countByEnumeratingWithState:&v20 objects:v24 count:16];
  if (v7)
  {
    id v8 = v7;
    uint64_t v9 = *(void *)v21;
    do
    {
      __int16 v10 = 0;
      do
      {
        if (*(void *)v21 != v9) {
          objc_enumerationMutation(obj);
        }
        id v11 = *(void **)(*((void *)&v20 + 1) + 8 * (void)v10);
        dispatch_group_enter(v4);
        v16[0] = _NSConcreteStackBlock;
        v16[1] = 3221225472;
        void v16[2] = sub_1001FD0AC;
        v16[3] = &unk_10050D200;
        id v17 = v6;
        id v18 = *(id *)(a1 + 32);
        unsigned int v19 = v4;
        [v11 getDeviceInfo:v16];

        __int16 v10 = (char *)v10 + 1;
      }
      while (v8 != v10);
      id v8 = [obj countByEnumeratingWithState:&v20 objects:v24 count:16];
    }
    while (v8);
  }

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1001FD174;
  block[3] = &unk_10050E188;
  id v15 = *(id *)(a1 + 40);
  id v14 = *(id *)(a1 + 32);
  dispatch_group_notify(v4, v6, block);
}

void sub_1001FD0AC(uint64_t a1, void *a2)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1001FD194;
  block[3] = &unk_10050DCB8;
  id v6 = a2;
  id v3 = *(NSObject **)(a1 + 32);
  id v7 = *(id *)(a1 + 40);
  id v8 = *(id *)(a1 + 48);
  id v4 = v6;
  dispatch_async(v3, block);
}

uint64_t sub_1001FD174(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, *(void *)(a1 + 32));
  }
  return result;
}

void sub_1001FD194(uint64_t a1)
{
  if (*(void *)(a1 + 32)) {
    objc_msgSend(*(id *)(a1 + 40), "addObject:");
  }
  id v2 = *(NSObject **)(a1 + 48);
  dispatch_group_leave(v2);
}

id sub_1001FD1D8(void *a1)
{
  id v1 = a1;
  *(void *)md = 0;
  uint64_t v27 = 0;
  int v28 = 0;
  memset(&c, 0, sizeof(c));
  CC_SHA1_Init(&c);
  id v2 = AFSiriLogContextSession;
  if (os_log_type_enabled(AFSiriLogContextSession, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)long long buf = 136315395;
    long long v23 = "ADSHAAnchorForData";
    __int16 v24 = 2113;
    id v25 = v1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s Generating anchor for values %{private}@", buf, 0x16u);
  }
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  id v3 = v1;
  id v4 = [v3 countByEnumeratingWithState:&v16 objects:v21 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v17;
    do
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(void *)v17 != v6) {
          objc_enumerationMutation(v3);
        }
        id v8 = *(void **)(*((void *)&v16 + 1) + 8 * i);
        uint64_t v9 = +[NSNull null];

        if (v8 != v9)
        {
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            __int16 v10 = (const char *)[v8 UTF8String];
          }
          else
          {
            objc_opt_class();
            if (objc_opt_isKindOfClass())
            {
              id v11 = [v8 stringValue];
            }
            else
            {
              if (objc_opt_respondsToSelector()) {
                objc_msgSend(v8, "_ad_SADHash");
              }
              else {
              id v11 = [v8 description];
              }
            }
            id v12 = v11;
            __int16 v10 = (const char *)[v12 UTF8String];
          }
          CC_LONG v13 = strlen(v10);
          CC_SHA1_Update(&c, v10, v13);
        }
      }
      id v5 = [v3 countByEnumeratingWithState:&v16 objects:v21 count:16];
    }
    while (v5);
  }

  CC_SHA1_Final(md, &c);
  id v14 = +[NSString hexStringFromBytes:md length:20];

  return v14;
}

id sub_1001FD474(void *a1)
{
  id v1 = sub_1001FD4FC(a1);
  id v2 = +[NSFileManager defaultManager];
  id v3 = [v2 attributesOfItemAtPath:v1 error:0];

  id v4 = [v3 fileModificationDate];

  return v4;
}

id sub_1001FD4FC(void *a1)
{
  id v1 = a1;
  id v2 = NSHomeDirectoryForUser(@"mobile");
  id v3 = [v2 stringByAppendingPathComponent:@"Library/Assistant"];

  id v4 = [v3 stringByAppendingPathComponent:v1];

  return v4;
}

void sub_1001FD584(void *a1)
{
  id v1 = sub_1001FD4FC(a1);
  id v2 = +[NSFileManager defaultManager];
  if ([v2 fileExistsAtPath:v1])
  {
    NSFileAttributeKey v5 = NSFileModificationDate;
    id v3 = +[NSDate date];
    uint64_t v6 = v3;
    id v4 = +[NSDictionary dictionaryWithObjects:&v6 forKeys:&v5 count:1];

    [v2 setAttributes:v4 ofItemAtPath:v1 error:0];
  }
  else
  {
    [v2 createFileAtPath:v1 contents:0 attributes:0];
  }
}

id sub_1001FD68C()
{
  uint64_t v0 = +[ADSystemLanguagePreferencesObserver sharedObserver];
  id v1 = [v0 systemLanguagePreferenceHasChanged];

  return v1;
}

id sub_1001FD6CC()
{
  uint64_t v0 = +[VTPreferences sharedPreferences];
  id v1 = [v0 voiceTriggerEnabled];

  return v1;
}

void sub_1001FD70C(uint64_t a1, void *a2)
{
  id v5 = a2;
  id v3 = +[VTPreferences sharedPreferences];
  [v3 setVoiceTriggerEnabled:a1];

  id v4 = v5;
  if (v5)
  {
    (*((void (**)(id, void))v5 + 2))(v5, 0);
    id v4 = v5;
  }
}

BOOL sub_1001FD788()
{
  uint64_t v0 = +[MCProfileConnection sharedConnection];
  BOOL v1 = [v0 effectiveBoolValueForSetting:MCFeatureAppAnalyticsAllowed] == 1;

  return v1;
}

id sub_1001FD7D8(uint64_t a1)
{
  BOOL v1 = +[LSBundleProxy bundleProxyForIdentifier:a1];
  CFBundleRef v2 = CFBundleCreate(0, (CFURLRef)[v1 bundleURL]);
  if (v2)
  {
    CFBundleRef cf = v2;
    long long v14 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    id v3 = (id)TCCAccessCopyInformationForBundle();
    id v4 = [v3 countByEnumeratingWithState:&v14 objects:v18 count:16];
    if (v4)
    {
      id v5 = v4;
      uint64_t v6 = *(void *)v15;
      while (2)
      {
        for (i = 0; i != v5; i = (char *)i + 1)
        {
          if (*(void *)v15 != v6) {
            objc_enumerationMutation(v3);
          }
          id v8 = *(void **)(*((void *)&v14 + 1) + 8 * i);
          uint64_t v9 = objc_msgSend(v8, "objectForKey:", kTCCInfoService, cf);
          __int16 v10 = [v8 objectForKey:kTCCInfoGranted];
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) != 0
              && v9
              && ([v9 isEqualToString:kTCCServiceSiri] & 1) != 0)
            {
              CFRelease(cf);
              id v11 = [v10 BOOLValue];

              goto LABEL_16;
            }
          }
        }
        id v5 = [v3 countByEnumeratingWithState:&v14 objects:v18 count:16];
        if (v5) {
          continue;
        }
        break;
      }
    }

    CFRelease(cf);
    id v11 = 0;
LABEL_16:
  }
  else
  {
    id v11 = 0;
  }

  return v11;
}

void sub_1001FDCD4(uint64_t a1)
{
  BOOL v1 = [*(id *)(a1 + 32) _homeManager];
  CFBundleRef v2 = [v1 currentHome];
  id v3 = [v2 uniqueIdentifier];

  if (v3)
  {
    id v4 = objc_alloc_init((Class)HOMESchemaHOMEClientEventMetadata);
    id v5 = objc_alloc((Class)SISchemaUUID);
    uint64_t v6 = +[NSUUID UUID];
    id v7 = [v5 initWithNSUUID:v6];
    [v4 setHomeComponentId:v7];

    id v8 = [@"com.apple.assistant.homemetric.seed.value" dataUsingEncoding:4];
    uint64_t v9 = +[NSUUID hmf_UUIDWithNamespace:v3 data:v8];

    id v10 = [objc_alloc((Class)SISchemaUUID) initWithNSUUID:v9];
    id v11 = objc_alloc_init((Class)HOMESchemaHOMEAssistantInfoReported);
    [v11 setHashedHomeId:v10];
    id v12 = objc_alloc_init((Class)HOMESchemaHOMEClientEvent);
    [v12 setEventMetadata:v4];
    [v12 setAssistantInfoReported:v11];
    CC_LONG v13 = +[AssistantSiriAnalytics sharedAnalytics];
    long long v14 = [v13 defaultMessageStream];
    long long v15 = +[NSUUID UUID];
    [v14 emitMessage:v12 isolatedStreamUUID:v15];
  }
  else
  {
    long long v16 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      int v17 = 136315138;
      long long v18 = "-[ADHomeInfoManager emitHomeMetricInvocationEvent]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "%s Current Home UUID is nil, so not emiting home metric SELF event", (uint8_t *)&v17, 0xCu);
    }
  }
}

id sub_1001FE1DC(uint64_t a1, void *a2)
{
  return _[a2 setActivityNotificationsEnabledForPersonalRequests:*(unsigned __int8 *)(a1 + 32)];
}

void sub_1001FE434(uint64_t a1)
{
  CFBundleRef v2 = [*(id *)(a1 + 32) _getAccessoryCategoryForExecutionInfo:*(void *)(a1 + 40)];
  id v4 = [v2 categoryType];

  if ([v4 isEqualToString:HMAccessoryCategoryTypeHomePod])
  {
    id v3 = *(void (**)(void))(*(void *)(a1 + 48) + 16);
LABEL_5:
    v3();
    goto LABEL_7;
  }
  if ([v4 isEqualToString:HMAccessoryCategoryTypeSpeaker])
  {
    id v3 = *(void (**)(void))(*(void *)(a1 + 48) + 16);
    goto LABEL_5;
  }
  [v4 isEqualToString:HMAccessoryCategoryTypeAudioReceiver];
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
LABEL_7:
}

void sub_1001FE600(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  id v3 = [*(id *)(a1 + 32) _getAccessoryCategoryForExecutionInfo:*(void *)(a1 + 40)];
  CFBundleRef v2 = [v3 localizedDescription];
  (*(void (**)(uint64_t, void *))(v1 + 16))(v1, v2);
}

void sub_1001FE764(uint64_t a1)
{
  CFBundleRef v2 = +[NSMutableArray array];
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  uint64_t v16 = a1;
  id v3 = [*(id *)(a1 + 32) accessories];
  id v4 = [v3 countByEnumeratingWithState:&v20 objects:v24 count:16];
  if (!v4) {
    goto LABEL_12;
  }
  id v5 = v4;
  uint64_t v6 = *(void *)v21;
  uint64_t v7 = HMAccessoryCategoryTypeHomePod;
  do
  {
    for (i = 0; i != v5; i = (char *)i + 1)
    {
      if (*(void *)v21 != v6) {
        objc_enumerationMutation(v3);
      }
      uint64_t v9 = *(void **)(*((void *)&v20 + 1) + 8 * i);
      id v10 = [v9 siriEndpointProfile];
      if (v10)
      {
      }
      else
      {
        id v11 = [v9 category];
        id v12 = [v11 categoryType];
        unsigned int v13 = [v12 isEqualToString:v7];

        if (!v13) {
          continue;
        }
      }
      [v2 addObject:v9];
    }
    id v5 = [v3 countByEnumeratingWithState:&v20 objects:v24 count:16];
  }
  while (v5);
LABEL_12:

  id v14 = [v2 copy];
  long long v15 = *(NSObject **)(v16 + 40);
  if (v15)
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1001FE98C;
    block[3] = &unk_10050E188;
    id v19 = *(id *)(v16 + 48);
    id v18 = v14;
    dispatch_async(v15, block);
  }
  else
  {
    (*(void (**)(void))(*(void *)(v16 + 48) + 16))();
  }
}

uint64_t sub_1001FE98C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_1001FEBB4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = [*(id *)(a1 + 32) _homeManager];
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_1001FEFE8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = AFSiriLogContextDaemon;
  if (v3)
  {
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      int v6 = 136315650;
      uint64_t v7 = "-[ADHomeInfoManager _startAcceptingCloudSharesForMultiUserService]_block_invoke";
      __int16 v8 = 2112;
      id v9 = v3;
      __int16 v10 = 2112;
      uint64_t v11 = v5;
      _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "%s Container registration unsuccessful with error (%@) for (%@)", (uint8_t *)&v6, 0x20u);
    }
  }
  else if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v6 = 136315138;
    uint64_t v7 = "-[ADHomeInfoManager _startAcceptingCloudSharesForMultiUserService]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%s Container registration successful", (uint8_t *)&v6, 0xCu);
  }
}

void sub_1001FF370(uint64_t *a1)
{
  id v2 = +[ADCloudKitManager sharedManager];
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  void v5[2] = sub_1001FF444;
  v5[3] = &unk_100506D40;
  uint64_t v3 = a1[4];
  id v4 = (void *)a1[6];
  void v5[4] = a1[5];
  id v6 = v4;
  id v7 = (id)a1[4];
  [v2 shareWithOwner:v3 addShare:1 homes:0 completion:v5];
}

void sub_1001FF444(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  __int16 v10 = v9;
  if (!v7)
  {
    if (v9)
    {
      [*(id *)(*(void *)(a1 + 32) + 80) setObject:&off_1005238B8 forKey:*(void *)(a1 + 48)];
      int v17 = AFSiriLogContextDaemon;
      if (!os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_9;
      }
      *(_DWORD *)long long buf = 136315394;
      long long v29 = "-[ADHomeInfoManager _startCloudSharingForMultiUserService:]_block_invoke";
      __int16 v30 = 2112;
      long long v31 = v10;
      id v18 = "%s Failed to create a share with error (%@)";
      id v19 = v17;
      uint32_t v20 = 22;
    }
    else
    {
      long long v21 = AFSiriLogContextDaemon;
      if (!os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_9;
      }
      *(_DWORD *)long long buf = 136315138;
      long long v29 = "-[ADHomeInfoManager _startCloudSharingForMultiUserService:]_block_invoke";
      id v18 = "%s Share already exists";
      id v19 = v21;
      uint32_t v20 = 12;
    }
    _os_log_debug_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, v18, buf, v20);
    goto LABEL_9;
  }
  uint64_t v11 = [v7 participants];
  id v12 = +[NSSet setWithArray:v11];

  unsigned int v13 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)long long buf = 136315394;
    long long v29 = "-[ADHomeInfoManager _startCloudSharingForMultiUserService:]_block_invoke_2";
    __int16 v30 = 2112;
    long long v31 = v12;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "%s participants are (%@)", buf, 0x16u);
  }
  id v14 = *(NSObject **)(*(void *)(a1 + 32) + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1001FF6F4;
  block[3] = &unk_100507F88;
  id v23 = *(id *)(a1 + 40);
  id v24 = v7;
  id v25 = v8;
  id v15 = *(id *)(a1 + 48);
  uint64_t v16 = *(void *)(a1 + 32);
  id v26 = v15;
  uint64_t v27 = v16;
  dispatch_async(v14, block);

LABEL_9:
}

void sub_1001FF6F4(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  void v7[2] = sub_1001FF7AC;
  v7[3] = &unk_100506D18;
  uint64_t v4 = *(void *)(a1 + 48);
  id v5 = *(id *)(a1 + 56);
  uint64_t v6 = *(void *)(a1 + 64);
  id v8 = v5;
  uint64_t v9 = v6;
  id v10 = *(id *)(a1 + 40);
  [v2 establishShareWithHomeOwner:v3 container:v4 completionHandler:v7];
}

void sub_1001FF7AC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  id v7 = [v6 ownerUser];
  id v8 = [v6 participant];

  uint64_t v9 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v10 = *(void *)(a1 + 32);
    *(_DWORD *)long long buf = 136316163;
    id v23 = "-[ADHomeInfoManager _startCloudSharingForMultiUserService:]_block_invoke_2";
    __int16 v24 = 2113;
    id v25 = v8;
    __int16 v26 = 2113;
    uint64_t v27 = v7;
    __int16 v28 = 2112;
    id v29 = v5;
    __int16 v30 = 2113;
    uint64_t v31 = v10;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "%s participant is (%{private}@) ownerUser is (%{private}@) error is (%@) ownerID (%{private}@)", buf, 0x34u);
  }
  uint64_t v11 = *(NSObject **)(*(void *)(a1 + 40) + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1001FF97C;
  block[3] = &unk_100507F88;
  id v17 = v5;
  id v18 = v8;
  id v19 = *(id *)(a1 + 48);
  id v12 = *(id *)(a1 + 32);
  uint64_t v13 = *(void *)(a1 + 40);
  id v20 = v12;
  uint64_t v21 = v13;
  id v14 = v8;
  id v15 = v5;
  dispatch_async(v11, block);
}

void sub_1001FF97C(void *a1)
{
  uint64_t v2 = a1[4];
  uint64_t v3 = AFSiriLogContextDaemon;
  if (v2)
  {
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      int v7 = 136315394;
      id v8 = "-[ADHomeInfoManager _startCloudSharingForMultiUserService:]_block_invoke";
      __int16 v9 = 2112;
      uint64_t v10 = v2;
      _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "%s Encountered error (%@)", (uint8_t *)&v7, 0x16u);
    }
    [*(id *)(a1[8] + 80) setObject:&off_1005238B8 forKey:a1[7]];
    uint64_t v4 = +[ADCloudKitManager sharedManager];
    [v4 handleSharingError:a1[4]];
  }
  else
  {
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      uint64_t v5 = a1[5];
      int v7 = 136315395;
      id v8 = "-[ADHomeInfoManager _startCloudSharingForMultiUserService:]_block_invoke";
      __int16 v9 = 2113;
      uint64_t v10 = v5;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "%s This participant was added %{private}@", (uint8_t *)&v7, 0x16u);
    }
    id v6 = +[ADCloudKitManager sharedManager];
    [v6 saveParticipantsOnShare:a1[6] forOwner:a1[7] participants:a1[5]];

    [*(id *)(a1[8] + 80) setObject:&off_100523900 forKey:a1[7]];
  }
}

id sub_1001FFD5C(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  uint64_t v5 = [v4 settings];
  id v6 = [v5 countByEnumeratingWithState:&v24 objects:v29 count:16];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = *(void *)v25;
    while (2)
    {
      for (i = 0; i != v7; i = (char *)i + 1)
      {
        if (*(void *)v25 != v8) {
          objc_enumerationMutation(v5);
        }
        uint64_t v10 = *(void **)(*((void *)&v24 + 1) + 8 * i);
        uint64_t v11 = [v10 keyPath];
        unsigned __int8 v12 = [v11 isEqualToString:v3];

        if (v12)
        {
          id v17 = v10;
          goto LABEL_19;
        }
      }
      id v7 = [v5 countByEnumeratingWithState:&v24 objects:v29 count:16];
      if (v7) {
        continue;
      }
      break;
    }
  }

  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  uint64_t v5 = objc_msgSend(v4, "groups", 0);
  id v13 = [v5 countByEnumeratingWithState:&v20 objects:v28 count:16];
  if (v13)
  {
    id v14 = v13;
    uint64_t v15 = *(void *)v21;
LABEL_11:
    uint64_t v16 = 0;
    while (1)
    {
      if (*(void *)v21 != v15) {
        objc_enumerationMutation(v5);
      }
      sub_1001FFD5C(v3, *(void *)(*((void *)&v20 + 1) + 8 * v16));
      id v17 = (id)objc_claimAutoreleasedReturnValue();
      if (v17) {
        break;
      }
      if (v14 == (id)++v16)
      {
        id v14 = [v5 countByEnumeratingWithState:&v20 objects:v28 count:16];
        if (v14) {
          goto LABEL_11;
        }
        goto LABEL_17;
      }
    }
LABEL_19:
    id v18 = v17;
  }
  else
  {
LABEL_17:
    id v18 = 0;
  }

  return v18;
}

void sub_10020008C(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) _currentAccessory];
  id v3 = [v2 uniqueIdentifier];
  id v4 = [*(id *)(a1 + 40) uniqueIdentifier];
  unsigned int v5 = [v3 isEqual:v4];

  if (v5)
  {
    id v6 = *(void **)(a1 + 32);
    uint64_t v7 = *(void *)(a1 + 40);
    [v6 _updateCurrentAccessoryInfoWithAccessory:v7];
  }
}

id sub_100200264(uint64_t a1)
{
  return [*(id *)(a1 + 32) _startCloudSharingForMultiUserService:*(void *)(a1 + 40)];
}

void sub_1002003BC(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) _currentAccessory];
  id v3 = [v2 uniqueIdentifier];
  id v4 = [*(id *)(a1 + 40) uniqueIdentifier];
  unsigned int v5 = [v3 isEqual:v4];

  if (v5)
  {
    id v6 = *(void **)(a1 + 32);
    uint64_t v7 = *(void *)(a1 + 40);
    [v6 _updateCurrentAccessoryInfoWithAccessory:v7];
  }
}

void sub_1002005D4(uint64_t a1)
{
  id v2 = +[ADHomeDataSharingRepromptManager sharedManager];
  [v2 removeAccessoryFromPropagationList:*(void *)(a1 + 32)];
}

void sub_100200910(id a1, NSError *a2)
{
  id v2 = a2;
  id v3 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    int v4 = 136315394;
    unsigned int v5 = "-[ADHomeInfoManager home:didRemoveUser:]_block_invoke";
    __int16 v6 = 2112;
    uint64_t v7 = v2;
    _os_log_debug_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "%s User deletion status (%@)", (uint8_t *)&v4, 0x16u);
  }
}

void sub_100200B24(uint64_t a1)
{
  [*(id *)(a1 + 32) setDelegate:*(void *)(a1 + 40)];
  id v2 = [*(id *)(a1 + 32) userSettingsForHome:*(void *)(a1 + 48)];
  id v3 = [v2 settings];

  [v3 setDelegate:*(void *)(a1 + 40)];
}

void sub_100200C34(uint64_t a1)
{
  id v2 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)long long buf = 136315138;
    id v14 = "-[ADHomeInfoManager homeDidUpdateName:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s ", buf, 0xCu);
  }
  long long v10 = 0u;
  long long v11 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  id v3 = objc_msgSend(*(id *)(*(void *)(a1 + 32) + 16), "homes", 0);
  id v4 = [v3 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v9;
    while (2)
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(void *)v9 != v6) {
          objc_enumerationMutation(v3);
        }
        if (*(void *)(*((void *)&v8 + 1) + 8 * i) == *(void *)(a1 + 40))
        {
          [*(id *)(a1 + 32) _updateHomeContext:*(void *)(*(void *)(a1 + 32) + 16)];
          goto LABEL_13;
        }
      }
      id v5 = [v3 countByEnumeratingWithState:&v8 objects:v12 count:16];
      if (v5) {
        continue;
      }
      break;
    }
  }
LABEL_13:
}

void sub_100201290(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = AFSiriLogContextDaemon;
  if (v3)
  {
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      int v8 = 136315651;
      long long v9 = "-[ADHomeInfoManager _propagateSiriDataSharingOptInStatus:toAccessory:]_block_invoke";
      __int16 v10 = 2113;
      uint64_t v11 = v5;
      __int16 v12 = 2112;
      id v13 = v3;
      _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "%s Unable to set opt-in status for accessory (%{private}@), with error %@", (uint8_t *)&v8, 0x20u);
    }
  }
  else if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v7 = *(void **)(a1 + 32);
    uint64_t v6 = *(void *)(a1 + 40);
    int v8 = 136315651;
    long long v9 = "-[ADHomeInfoManager _propagateSiriDataSharingOptInStatus:toAccessory:]_block_invoke";
    __int16 v10 = 2048;
    uint64_t v11 = v6;
    __int16 v12 = 2113;
    id v13 = v7;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%s Success setting Siri data sharing status (%ld) for accessory (%{private}@)", (uint8_t *)&v8, 0x20u);
  }
}

void sub_1002013DC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = AFSiriLogContextDaemon;
  if (v3)
  {
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      int v8 = 136315651;
      long long v9 = "-[ADHomeInfoManager _propagateSiriDataSharingOptInStatus:toAccessory:]_block_invoke";
      __int16 v10 = 2113;
      uint64_t v11 = v5;
      __int16 v12 = 2112;
      id v13 = v3;
      _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "%s Unable to set opt-in status for accessory (%{private}@), with error %@", (uint8_t *)&v8, 0x20u);
    }
  }
  else if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v7 = *(void **)(a1 + 32);
    uint64_t v6 = *(void *)(a1 + 40);
    int v8 = 136315651;
    long long v9 = "-[ADHomeInfoManager _propagateSiriDataSharingOptInStatus:toAccessory:]_block_invoke";
    __int16 v10 = 2048;
    uint64_t v11 = v6;
    __int16 v12 = 2113;
    id v13 = v7;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%s Success setting Siri data sharing status (%ld) for accessory (%{private}@)", (uint8_t *)&v8, 0x20u);
  }
}

void sub_1002016B4(uint64_t a1)
{
  id v2 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = *(void *)(a1 + 40);
    uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 48);
    int v11 = 136315650;
    __int16 v12 = "-[ADHomeInfoManager user:didUpdateAssistantAccessControl:forHome:]_block_invoke";
    __int16 v13 = 2112;
    uint64_t v14 = v4;
    __int16 v15 = 2112;
    uint64_t v16 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s _currentHome (%@) home (%@)", (uint8_t *)&v11, 0x20u);
  }
  uint64_t v5 = [*(id *)(a1 + 40) uniqueIdentifier];
  uint64_t v6 = [*(id *)(*(void *)(a1 + 32) + 48) uniqueIdentifier];
  unsigned int v7 = objc_msgSend(v5, "hmf_isEqualToUUID:", v6);

  if (v7)
  {
    uint64_t v8 = *(void *)(a1 + 32);
    long long v9 = *(void **)(v8 + 56);
    *(void *)(v8 + 56) = 0;

    id v10 = [*(id *)(a1 + 32) _currentHomeInfo];
  }
}

void sub_1002019B4(uint64_t a1)
{
  if ([*(id *)(a1 + 32) _updateHomeUserSettings])
  {
    id v2 = +[NSNotificationCenter defaultCenter];
    [v2 postNotificationName:@"ADHomeInfoForThisDeviceDidChangeNotification" object:0];
  }
  if (AFIsHorseman())
  {
    id v23 = [*(id *)(a1 + 32) _homeManager];
    if ([v23 hasOptedToHH2])
    {

      return;
    }
    char IsHomePodInHH2Mode = _AFPreferencesIsHomePodInHH2Mode();

    if (IsHomePodInHH2Mode) {
      return;
    }
    uint64_t v4 = [*(id *)(a1 + 40) rootGroup];
    uint64_t v5 = sub_1001FFD5C(@"root.general.analytics.shareSiriAnalytics", v4);

    uint64_t v6 = AFSiriLogContextDaemon;
    BOOL v7 = os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO);
    if (!v5)
    {
      if (v7)
      {
        *(_DWORD *)long long buf = 136315394;
        long long v27 = "-[ADHomeInfoManager settingsDidUpdate:]_block_invoke";
        __int16 v28 = 2112;
        CFStringRef v29 = @"root.general.analytics.shareSiriAnalytics";
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "%s %@ setting not found for this HomePod, ignoring", buf, 0x16u);
      }
      goto LABEL_27;
    }
    if (v7)
    {
      uint64_t v8 = v6;
      long long v9 = [v5 value];
      *(_DWORD *)long long buf = 136315394;
      long long v27 = "-[ADHomeInfoManager settingsDidUpdate:]_block_invoke";
      __int16 v28 = 2112;
      CFStringRef v29 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "%s Siri data sharing status: %@", buf, 0x16u);
    }
    id v10 = [v5 value];

    if (v10)
    {
      int v11 = [v5 value];
      unsigned int v12 = [v11 BOOLValue];

      if (v12)
      {
        __int16 v13 = +[ADPreferences sharedPreferences];
        uint64_t v14 = v13;
        uint64_t v15 = 1;
LABEL_25:
        [(__CFString *)v13 setSiriDataSharingOptInStatus:v15 propagateToHomeAccessories:0 source:4 reason:0 completion:0];
LABEL_26:

        goto LABEL_27;
      }
      long long v21 = [v5 value];
      int v22 = [v21 BOOLValue];

      if ((v22 & 1) == 0)
      {
        __int16 v13 = +[ADPreferences sharedPreferences];
        uint64_t v14 = v13;
        uint64_t v15 = 2;
        goto LABEL_25;
      }
    }
    else
    {
      uint64_t v16 = +[ADPreferences sharedPreferences];
      id v17 = (char *)[v16 siriDataSharingOptInStatus];

      if ((unint64_t)(v17 - 1) <= 1)
      {
        id v18 = &off_1005238A0;
        if (v17 == (char *)1) {
          id v18 = &off_1005238D0;
        }
        id v19 = v18;
        long long v20 = AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)long long buf = 136315394;
          long long v27 = "-[ADHomeInfoManager settingsDidUpdate:]_block_invoke";
          __int16 v28 = 2112;
          CFStringRef v29 = v19;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "%s Siri Data Sharing value is null in HomeKit. Setting to %@", buf, 0x16u);
        }
        v24[0] = _NSConcreteStackBlock;
        v24[1] = 3221225472;
        void v24[2] = sub_100201D7C;
        v24[3] = &unk_10050C610;
        long long v25 = v19;
        uint64_t v14 = v19;
        [v5 updateValue:v14 completionHandler:v24];

        goto LABEL_26;
      }
    }
LABEL_27:
  }
}

void sub_100201D7C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = AFSiriLogContextDaemon;
  if (v3)
  {
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      int v7 = 136315650;
      uint64_t v8 = "-[ADHomeInfoManager settingsDidUpdate:]_block_invoke";
      __int16 v9 = 2112;
      uint64_t v10 = v5;
      __int16 v11 = 2112;
      id v12 = v3;
      _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "%s Unable to initialize HomeKit Siri Data Sharing status to %@ with error: %@", (uint8_t *)&v7, 0x20u);
    }
  }
  else if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v6 = *(void *)(a1 + 32);
    int v7 = 136315394;
    uint64_t v8 = "-[ADHomeInfoManager settingsDidUpdate:]_block_invoke";
    __int16 v9 = 2112;
    uint64_t v10 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%s Success initializing HomeKit Siri Data Sharing status to %@", (uint8_t *)&v7, 0x16u);
  }
}

void *sub_100201F50(uint64_t a1)
{
  id v2 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v4 = 136315138;
    uint64_t v5 = "-[ADHomeInfoManager homeManagerDidUpdateAssistantIdentifiers:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s ", (uint8_t *)&v4, 0xCu);
  }
  uint64_t result = *(void **)(a1 + 40);
  if (*(void *)(a1 + 32) == result[2]) {
    return objc_msgSend(result, "_updateHomeContext:");
  }
  return result;
}

void sub_1002020A8(uint64_t a1)
{
  id v2 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v8 = 136315138;
    __int16 v9 = "-[ADHomeInfoManager homeManagerDidUpdateDataSyncState:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s ", (uint8_t *)&v8, 0xCu);
  }
  id v3 = *(void **)(a1 + 40);
  if (*(void *)(a1 + 32) == v3[2])
  {
    id v4 = [v3 _currentAccessory];
    uint64_t v5 = [*(id *)(a1 + 40) _currentAccessoryInfo];
    uint64_t v6 = [*(id *)(a1 + 40) _currentHome];
    id v7 = [*(id *)(a1 + 40) _currentHomeInfo];
    [*(id *)(a1 + 40) _checkAndDisableVoiceIDIfRequired];
  }
}

void *sub_100202250(uint64_t a1)
{
  id v2 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v4 = 136315138;
    uint64_t v5 = "-[ADHomeInfoManager homeManagerDidUpdateCurrentHome:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s ", (uint8_t *)&v4, 0xCu);
  }
  uint64_t result = *(void **)(a1 + 40);
  if (*(void *)(a1 + 32) == result[2]) {
    return objc_msgSend(result, "_updateHomeContext:");
  }
  return result;
}

void sub_1002023A8(uint64_t a1)
{
  id v2 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)long long buf = 136315138;
    id v18 = "-[ADHomeInfoManager homeManager:didUpdateStatus:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s ", buf, 0xCu);
  }
  id v3 = *(void **)(a1 + 32);
  if (v3 == *(void **)(*(void *)(a1 + 40) + 16))
  {
    if (![v3 status])
    {
      [*(id *)(a1 + 40) _startCloudKitActivityForHomes:*(void *)(a1 + 32) homesToDelete:0];
      id v4 = [*(id *)(a1 + 40) _currentHomeInfo];
      [*(id *)(a1 + 40) _checkAndDisableVoiceIDIfRequired];
      [*(id *)(a1 + 40) _resolveSiriDataSharingStatusMismatch:*(void *)(a1 + 32)];
      [*(id *)(a1 + 40) _updateHomeContext:*(void *)(a1 + 32)];
    }
    uint64_t v5 = +[AFPreferences sharedPreferences];
    unsigned int v6 = [v5 hasPresentedCompactVoiceTriggerDisclosure];

    if (v6)
    {
      long long v14 = 0u;
      long long v15 = 0u;
      long long v12 = 0u;
      long long v13 = 0u;
      id v7 = [*(id *)(*(void *)(a1 + 40) + 16) homes];
      int v8 = (char *)[v7 countByEnumeratingWithState:&v12 objects:v16 count:16];
      if (v8)
      {
        __int16 v9 = v8;
        uint64_t v10 = *(void *)v13;
        do
        {
          for (i = 0; i != v9; ++i)
          {
            if (*(void *)v13 != v10) {
              objc_enumerationMutation(v7);
            }
            objc_msgSend(*(id *)(a1 + 40), "initializeHomeSiriPhraseOptions:completion:");
          }
          __int16 v9 = (char *)[v7 countByEnumeratingWithState:&v12 objects:v16 count:16];
        }
        while (v9);
      }
    }
  }
}

void sub_1002025D0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v5 = *(void **)(a1 + 32);
    unsigned int v6 = v4;
    id v7 = [v5 name];
    int v8 = 136315650;
    __int16 v9 = "-[ADHomeInfoManager homeManager:didUpdateStatus:]_block_invoke";
    __int16 v10 = 2112;
    __int16 v11 = v7;
    __int16 v12 = 2112;
    id v13 = v3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "%s phraseType in home %@ updated with error: %@", (uint8_t *)&v8, 0x20u);
  }
}

void sub_10020281C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) owner];
  id v3 = [v2 uniqueIdentifier];
  id v4 = [v3 UUIDString];

  uint64_t v5 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 136315395;
    id v19 = "-[ADHomeInfoManager homeManager:didRemoveHome:]_block_invoke";
    __int16 v20 = 2113;
    long long v21 = v4;
    _os_log_debug_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "%s homeOwner is (%{private}@)", buf, 0x16u);
    if (!v4) {
      goto LABEL_8;
    }
  }
  else if (!v4)
  {
    goto LABEL_8;
  }
  unsigned int v6 = [*(id *)(a1 + 40) _homesWithMultiUserEnabled];
  id v7 = [*(id *)(*(void *)(a1 + 40) + 80) objectForKey:v4];
  if (v7)
  {
    int v8 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 136315395;
      id v19 = "-[ADHomeInfoManager homeManager:didRemoveHome:]_block_invoke";
      __int16 v20 = 2113;
      long long v21 = v4;
      _os_log_debug_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "%s Resetting home sharing state for (%{private}@)", buf, 0x16u);
    }
    [*(id *)(*(void *)(a1 + 40) + 80) setObject:&off_1005238B8 forKey:v4];
  }
  __int16 v9 = +[ADCloudKitManager sharedManager];
  [v9 shareWithOwner:v4 addShare:0 homes:v6 completion:&stru_100506CD0];

  uint64_t v10 = *(void *)(a1 + 40);
  __int16 v11 = *(void **)(v10 + 56);
  *(void *)(v10 + 56) = 0;

  uint64_t v12 = *(void *)(a1 + 40);
  id v13 = *(void **)(v12 + 48);
  *(void *)(v12 + 4_Block_object_dispose(&STACK[0x220], 8) = 0;

  long long v15 = *(void **)(a1 + 40);
  uint64_t v14 = *(void *)(a1 + 48);
  uint64_t v17 = *(void *)(a1 + 32);
  uint64_t v16 = +[NSArray arrayWithObjects:&v17 count:1];
  [v15 _homeManagerUpdatedHomes:v14 homesToDelete:v16];

LABEL_8:
}

void sub_100202A5C(id a1, CKShare *a2, CKContainer *a3, NSError *a4)
{
  id v4 = a4;
  uint64_t v5 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    int v6 = 136315394;
    id v7 = "-[ADHomeInfoManager homeManager:didRemoveHome:]_block_invoke";
    __int16 v8 = 2112;
    __int16 v9 = v4;
    _os_log_debug_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "%s error is (%@)", (uint8_t *)&v6, 0x16u);
  }
}

void sub_100202C9C(uint64_t a1)
{
  [*(id *)(a1 + 32) setDelegate:*(void *)(a1 + 40)];
  id v4 = [*(id *)(a1 + 32) currentUser];
  [v4 setDelegate:*(void *)(a1 + 40)];
  id v2 = [v4 userSettingsForHome:*(void *)(a1 + 32)];
  id v3 = [v2 settings];

  [v3 setDelegate:*(void *)(a1 + 40)];
  [*(id *)(a1 + 40) _homeManagerUpdatedHomes:*(void *)(a1 + 48)];
  [*(id *)(a1 + 40) initializeHomeSiriPhraseOptions:*(void *)(a1 + 32) completion:&stru_100506C90];
}

void sub_100202D50(id a1, NSError *a2)
{
  id v2 = a2;
  id v3 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v4 = 136315394;
    uint64_t v5 = "-[ADHomeInfoManager homeManager:didAddHome:]_block_invoke_3";
    __int16 v6 = 2112;
    id v7 = v2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "%s phraseType updated with error: %@", (uint8_t *)&v4, 0x16u);
  }
}

NSDictionary *__cdecl sub_100202E10(id a1)
{
  CFStringRef v5 = @"date";
  uint64_t v1 = +[NSDate date];
  id v2 = +[NSDateFormatter localizedStringFromDate:v1 dateStyle:1 timeStyle:4];
  __int16 v6 = v2;
  id v3 = +[NSDictionary dictionaryWithObjects:&v6 forKeys:&v5 count:1];

  return (NSDictionary *)v3;
}

void *sub_100202F84(void *result)
{
  uint64_t v1 = (void *)result[4];
  id v2 = (void *)result[5];
  if (v1 == (void *)v2[2])
  {
    id v3 = result;
    int v4 = (void *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      CFStringRef v5 = v4;
      int v6 = 136315394;
      id v7 = "-[ADHomeInfoManager homeManagerDidUpdateHomes:]_block_invoke";
      __int16 v8 = 1024;
      unsigned int v9 = [v1 status];
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "%s status is %d", (uint8_t *)&v6, 0x12u);

      uint64_t v1 = (void *)v3[4];
      id v2 = (void *)v3[5];
    }
    return [v2 _homeManagerUpdatedHomes:v1];
  }
  return result;
}

void sub_100203E40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a27, 8);
  _Block_object_dispose((const void *)(v27 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_100203E70(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = AFSiriLogContextDaemon;
  if (v6)
  {
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 136315394;
      uint64_t v17 = "-[ADHomeInfoManager fetchMultiUserMetricsWithCompletion:]_block_invoke";
      __int16 v18 = 2112;
      id v19 = v6;
      _os_log_debug_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "%s Got metrics from homed %@", buf, 0x16u);
    }
    __int16 v8 = [v6 numSharedUsers];
    if (((unint64_t)[v8 integerValue] & 0x8000000000000000) != 0)
    {
      *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = 0;
    }
    else
    {
      unsigned int v9 = [v6 numSharedUsers];
      *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = [v9 integerValue];
    }
    uint64_t v10 = [v6 numUsersCloudShareTrustNotConfigured];
    if (((unint64_t)[v10 integerValue] & 0x8000000000000000) != 0)
    {
      *(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 24) = 0;
    }
    else
    {
      __int16 v11 = [v6 numUsersCloudShareTrustNotConfigured];
      *(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 24) = [v11 integerValue];
    }
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    _OWORD v13[2] = sub_100204438;
    v13[3] = &unk_10050DCE0;
    uint64_t v12 = *(void **)(a1 + 32);
    id v14 = *(id *)(a1 + 40);
    id v15 = *(id *)(a1 + 48);
    [v12 getVoiceSettingsForHomeMembers:v13];
  }
  else
  {
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136315394;
      uint64_t v17 = "-[ADHomeInfoManager fetchMultiUserMetricsWithCompletion:]_block_invoke";
      __int16 v18 = 2112;
      id v19 = v5;
      _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "%s Could not fetch multiuser metrics due to error %@", buf, 0x16u);
    }
    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  }
}

void sub_1002040E8(uint64_t a1)
{
  id v2 = +[ADMultiUserService sharedService];
  id v3 = [v2 allUsersBySharedUserID];

  __int16 v20 = v3;
  id v4 = [v3 count];
  id v5 = +[ADMultiUserService sharedService];
  id v6 = [v5 countVoiceProfiles];

  id v7 = +[ADMultiUserService sharedService];
  id v8 = [v7 countUsersWithPersonalRequestsEnabled];

  unsigned int v9 = +[ADMultiUserService sharedService];
  id v10 = [v9 countUsersWithSiriCloudSyncEnabled];

  __int16 v11 = +[ADMultiUserService sharedService];
  id v12 = [v11 countUsersWithMatchingSiriLanguage];

  id v13 = +[ADMultiUserService sharedService];
  id v14 = [v13 countUsersWithLocationServicesEnabled];

  [*(id *)(a1 + 32) setNumGuestsAccepted:*(unsigned int *)(*(void *)(*(void *)(a1 + 48) + 8) + 24)];
  id v15 = *(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
  uint64_t v16 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24);
  if ((uint64_t)v15 <= v16)
  {
    uint64_t v17 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 136315650;
      int v22 = "-[ADHomeInfoManager fetchMultiUserMetricsWithCompletion:]_block_invoke";
      __int16 v23 = 2048;
      id v24 = v15;
      __int16 v25 = 2048;
      uint64_t v26 = v16;
      _os_log_debug_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "%s Invalid participant data %ld/%ld", buf, 0x20u);
    }
  }
  else
  {
    [*(id *)(a1 + 32) setNumParticipantsWithTrust:(v15 - v16)];
  }
  [*(id *)(a1 + 32) setNumUsersWithRecognizeMyVoiceEnabled:v4];
  [*(id *)(a1 + 32) setNumVoiceProfilesAvailable:v6];
  [*(id *)(a1 + 32) setNumUsersWithPersonalRequestsEnabled:v8];
  [*(id *)(a1 + 32) setNumUsersWithSiriCloudSyncEnabled:v10];
  [*(id *)(a1 + 32) setNumUsersWithMatchingSiriLanguage:v12];
  [*(id *)(a1 + 32) setNumUsersWithLocationServicesEnabled:v14];
  id v18 = [objc_alloc((Class)NSString) initWithFormat:@"{numGuestsAccepted = %d, numParticipantsWithTrust = %d, numUsersWhoSyncedRecognizeMyVoice = %d, numUsersWithRecognizeMyVoiceEnabled = %d, numVoiceProfilesAvailable = %d, numUsersWithPersonalRequestEnabled = %d, numUsersWithSiriCloudSyncEnabled = %d, numUsersWithMatchingSiriLanguage = %d, numUsersWithLocationServicesEnabled = %d}", objc_msgSend(*(id *)(a1 + 32), "numGuestsAccepted"), objc_msgSend(*(id *)(a1 + 32), "numParticipantsWithTrust"), objc_msgSend(*(id *)(a1 + 32), "numUsersWhoSyncedRecognizeMyVoice"), objc_msgSend(*(id *)(a1 + 32), "numUsersWithRecognizeMyVoiceEnabled"), objc_msgSend(*(id *)(a1 + 32), "numVoiceProfilesAvailable"), objc_msgSend(*(id *)(a1 + 32), "numUsersWithPersonalRequestsEnabled"), objc_msgSend(*(id *)(a1 + 32), "numUsersWithSiriCloudSyncEnabled"), objc_msgSend(*(id *)(a1 + 32), "numUsersWithMatchingSiriLanguage"), objc_msgSend(*(id *)(a1 + 32), "numUsersWithLocationServicesEnabled")];
  id v19 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 136315394;
    int v22 = "-[ADHomeInfoManager fetchMultiUserMetricsWithCompletion:]_block_invoke";
    __int16 v23 = 2112;
    id v24 = v18;
    _os_log_debug_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "%s MultiUserSetup SELF metrics: %@", buf, 0x16u);
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_100204438(uint64_t a1, void *a2)
{
  if (a2) {
    id v3 = [a2 count];
  }
  else {
    id v3 = 0;
  }
  [*(id *)(a1 + 32) setNumUsersWhoSyncedRecognizeMyVoice:v3];
  id v4 = *(NSObject **)(a1 + 40);
  dispatch_group_leave(v4);
}

id sub_100204648(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 96) removeObject:*(void *)(a1 + 40)];
}

id sub_1002046FC(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 96) addObject:*(void *)(a1 + 40)];
}

void sub_1002047AC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = [*(id *)(a1 + 32) _currentAccessoryInfo];
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

uint64_t sub_1002048F8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100204908(uint64_t a1)
{
}

uint64_t sub_100204910(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) _currentAccessoryInfo];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 40) = v2;
  return _objc_release_x1(v2, v4);
}

uint64_t sub_100204A4C(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) _accessoryLoggingSalt];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 40) = v2;
  return _objc_release_x1(v2, v4);
}

void sub_100204D30(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (objc_opt_respondsToSelector()) {
    [v3 homeInfoManager:*(void *)(a1 + 32) didUpdateCurrentAccessoryInfo:*(void *)(a1 + 40)];
  }
}

void sub_100205124(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v20 = a2;
  uint64_t v4 = [v3 uniqueIdentifier];
  [v20 setUniqueIdentifier:v4];

  id v5 = [*(id *)(a1 + 32) name];
  [v20 setName:v5];

  id v6 = [*(id *)(a1 + 32) model];
  [v20 setModel:v6];

  id v7 = [*(id *)(a1 + 32) room];
  id v8 = [v7 name];
  [v20 setRoomName:v8];

  unsigned int v9 = [*(id *)(a1 + 32) assistantIdentifier];
  [v20 setAssistantIdentifier:v9];

  [v20 setIsSpeaker:*(unsigned __int8 *)(a1 + 56)];
  id v10 = [*(id *)(a1 + 32) manufacturer];
  [v20 setManufacturer:v10];

  __int16 v11 = [*(id *)(a1 + 32) category];
  id v12 = [v11 categoryType];
  [v20 setCategoryType:v12];

  [v20 setSchemaCategoryType:*(void *)(a1 + 48)];
  id v13 = [*(id *)(*(void *)(a1 + 40) + 24) uniqueIdentifier];
  id v14 = [*(id *)(a1 + 40) _accessoryLoggingSalt];
  id v15 = v14;
  id v16 = 0;
  if (v13 && v14)
  {
    int8x16_t v23 = 0uLL;
    [v13 getUUIDBytes:&v23];
    int8x16_t v22 = 0uLL;
    [v15 getUUIDBytes:&v22];
    int8x16_t v21 = veorq_s8(v22, v23);
    id v16 = [objc_alloc((Class)NSUUID) initWithUUIDBytes:&v21];
  }

  [v20 setLoggingUniqueIdentifier:v16];
  uint64_t v17 = +[MediaServiceConfiguration sharedInstance];
  id v18 = [*(id *)(a1 + 32) home];
  id v19 = [v17 thirdPartyMusicAvailable:v18];

  [v20 setHasActiveThirdPartyMusicSubscription:v19];
}

uint64_t sub_100205C00(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(*(void *)(a1 + 32) + 104));
}

void sub_100205CE8(uint64_t a1)
{
  uint64_t v2 = +[NSMutableArray array];
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  id v3 = [*(id *)(*(void *)(a1 + 32) + 16) currentHome];
  uint64_t v4 = [v3 accessories];

  id v5 = [v4 countByEnumeratingWithState:&v16 objects:v20 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v17;
    do
    {
      for (i = 0; i != v6; i = (char *)i + 1)
      {
        if (*(void *)v17 != v7) {
          objc_enumerationMutation(v4);
        }
        unsigned int v9 = *(void **)(*((void *)&v16 + 1) + 8 * i);
        if ([v9 supportsJustSiri])
        {
          id v10 = [*(id *)(a1 + 32) _accessoryInfoForAccessory:v9];
          [v2 addObject:v10];
        }
      }
      id v6 = [v4 countByEnumeratingWithState:&v16 objects:v20 count:16];
    }
    while (v6);
  }

  id v11 = [v2 copy];
  id v12 = *(NSObject **)(a1 + 40);
  if (v12)
  {
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    _OWORD v13[2] = sub_100205EE4;
    v13[3] = &unk_10050E188;
    id v15 = *(id *)(a1 + 48);
    id v14 = v11;
    dispatch_async(v12, v13);
  }
  else
  {
    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
}

uint64_t sub_100205EE4(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_100205FFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100206014(uint64_t a1)
{
  long long v12 = 0u;
  long long v13 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  uint64_t v2 = objc_msgSend(*(id *)(*(void *)(a1 + 32) + 16), "homes", 0);
  id v3 = [v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v11;
    do
    {
      id v6 = 0;
      do
      {
        if (*(void *)v11 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
        id v8 = [*(id *)(*((void *)&v10 + 1) + 8 * (void)v6) uniqueIdentifier];
        unsigned int v9 = [v8 UUIDString];
        [v7 addObject:v9];

        id v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      id v4 = [v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }
    while (v4);
  }
}

void sub_100206254(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10020626C(uint64_t a1)
{
  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  id obj = [*(id *)(*(void *)(a1 + 32) + 16) homes];
  id v19 = [obj countByEnumeratingWithState:&v25 objects:v36 count:16];
  if (v19)
  {
    uint64_t v18 = *(void *)v26;
    do
    {
      uint64_t v2 = 0;
      do
      {
        if (*(void *)v26 != v18) {
          objc_enumerationMutation(obj);
        }
        uint64_t v20 = v2;
        id v3 = *(void **)(*((void *)&v25 + 1) + 8 * v2);
        long long v21 = 0u;
        long long v22 = 0u;
        long long v23 = 0u;
        long long v24 = 0u;
        id v4 = [v3 accessories];
        id v5 = [v4 countByEnumeratingWithState:&v21 objects:v35 count:16];
        if (v5)
        {
          id v6 = v5;
          uint64_t v7 = *(void *)v22;
          do
          {
            for (i = 0; i != v6; i = (char *)i + 1)
            {
              if (*(void *)v22 != v7) {
                objc_enumerationMutation(v4);
              }
              unsigned int v9 = *(void **)(*((void *)&v21 + 1) + 8 * i);
              long long v10 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
              long long v11 = [*(id *)(a1 + 32) _accessoryInfoForAccessory:v9];
              [v10 addObject:v11];

              long long v12 = (void *)AFSiriLogContextDaemon;
              if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
              {
                long long v13 = v12;
                id v14 = [v9 uniqueIdentifier];
                id v15 = [v14 UUIDString];
                long long v16 = [v9 configuredName];
                *(_DWORD *)long long buf = 136315650;
                __int16 v30 = "-[ADHomeInfoManager accessoriesInHome]_block_invoke";
                __int16 v31 = 2112;
                long long v32 = v15;
                __int16 v33 = 2112;
                id v34 = v16;
                _os_log_debug_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "%s Adding accessoryId=%@ with name=%@ as accessory in Home", buf, 0x20u);
              }
            }
            id v6 = [v4 countByEnumeratingWithState:&v21 objects:v35 count:16];
          }
          while (v6);
        }

        uint64_t v2 = v20 + 1;
      }
      while ((id)(v20 + 1) != v19);
      id v19 = [obj countByEnumeratingWithState:&v25 objects:v36 count:16];
    }
    while (v19);
  }
}

void sub_100206600(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100206618(uint64_t a1)
{
  long long v30 = 0u;
  long long v31 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  id obj = [*(id *)(*(void *)(a1 + 32) + 16) homes];
  id v20 = [obj countByEnumeratingWithState:&v28 objects:v39 count:16];
  if (v20)
  {
    uint64_t v19 = *(void *)v29;
    do
    {
      uint64_t v2 = 0;
      do
      {
        if (*(void *)v29 != v19) {
          objc_enumerationMutation(obj);
        }
        uint64_t v23 = v2;
        id v3 = *(void **)(*((void *)&v28 + 1) + 8 * v2);
        long long v22 = [v3 currentUser];
        id v4 = [v22 assistantAccessControlForHome:v3];
        long long v24 = 0u;
        long long v25 = 0u;
        long long v26 = 0u;
        long long v27 = 0u;
        long long v21 = v4;
        id v5 = [v4 accessories];
        id v6 = [v5 countByEnumeratingWithState:&v24 objects:v38 count:16];
        if (v6)
        {
          id v7 = v6;
          uint64_t v8 = *(void *)v25;
          do
          {
            for (i = 0; i != v7; i = (char *)i + 1)
            {
              if (*(void *)v25 != v8) {
                objc_enumerationMutation(v5);
              }
              long long v10 = *(void **)(*((void *)&v24 + 1) + 8 * i);
              long long v11 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
              long long v12 = [*(id *)(a1 + 32) _accessoryInfoForAccessory:v10];
              [v11 addObject:v12];

              long long v13 = (void *)AFSiriLogContextDaemon;
              if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
              {
                id v14 = v13;
                id v15 = [v10 uniqueIdentifier];
                long long v16 = [v15 UUIDString];
                long long v17 = [v10 configuredName];
                *(_DWORD *)long long buf = 136315650;
                __int16 v33 = "-[ADHomeInfoManager accessoriesWithPersonalRequestsEnabled]_block_invoke";
                __int16 v34 = 2112;
                id v35 = v16;
                __int16 v36 = 2112;
                dispatch_time_t v37 = v17;
                _os_log_debug_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "%s Adding accessoryId=%@ with name=%@ as personal request enabled", buf, 0x20u);
              }
            }
            id v7 = [v5 countByEnumeratingWithState:&v24 objects:v38 count:16];
          }
          while (v7);
        }

        uint64_t v2 = v23 + 1;
      }
      while ((id)(v23 + 1) != v20);
      id v20 = [obj countByEnumeratingWithState:&v28 objects:v39 count:16];
    }
    while (v20);
  }
}

void sub_100206954(uint64_t a1)
{
  id v1 = [*(id *)(*(void *)(a1 + 32) + 16) status];
  uint64_t v2 = AFSiriLogContextDaemon;
  BOOL v3 = os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG);
  if (v1)
  {
    if (v3)
    {
      *(_DWORD *)long long buf = 136315138;
      id v35 = "-[ADHomeInfoManager setRecognizeMyVoiceEnabled:]_block_invoke";
      _os_log_debug_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s HMHomeManager not ready", buf, 0xCu);
    }
    *(unsigned char *)(*(void *)(a1 + 32) + 72) = *(unsigned char *)(a1 + 40) ^ 1;
  }
  else
  {
    if (v3)
    {
      *(_DWORD *)long long buf = 136315138;
      id v35 = "-[ADHomeInfoManager setRecognizeMyVoiceEnabled:]_block_invoke";
      _os_log_debug_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s ", buf, 0xCu);
    }
    id v4 = *(id *)(*(void *)(a1 + 32) + 16);
    id obj = [v4 homes];
    uint64_t v26 = *(unsigned __int8 *)(a1 + 40);
    long long v30 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    id v5 = [obj countByEnumeratingWithState:&v30 objects:v38 count:16];
    if (v5)
    {
      id v6 = v5;
      id v24 = v4;
      id v7 = 0;
      uint64_t v8 = 0;
      uint64_t v9 = *(void *)v31;
      uint64_t v10 = 2;
      do
      {
        for (i = 0; i != v6; i = (char *)i + 1)
        {
          long long v12 = v8;
          long long v13 = v7;
          if (*(void *)v31 != v9) {
            objc_enumerationMutation(obj);
          }
          id v14 = *(void **)(*((void *)&v30 + 1) + 8 * i);
          id v15 = [v14 currentUser];
          long long v16 = [v15 userSettingsForHome:v14];
          id v7 = [v16 settings];

          long long v17 = [v7 rootGroup];
          uint64_t v8 = sub_1001FFD5C(@"root.siri.identifyVoice", v17);

          if (v8)
          {
            uint64_t v18 = [v8 value];
            uint64_t v10 = [v18 BOOLValue];
          }
          uint64_t v19 = AFSiriLogContextDaemon;
          BOOL v20 = os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO);
          if (v10 == v26)
          {
            if (v20)
            {
              int v21 = *(unsigned __int8 *)(a1 + 40);
              *(_DWORD *)long long buf = 136315394;
              id v35 = "-[ADHomeInfoManager setRecognizeMyVoiceEnabled:]_block_invoke";
              __int16 v36 = 1024;
              int v37 = v21;
              _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "%s Setting is already VoiceID=%d", buf, 0x12u);
            }
          }
          else
          {
            if (v20)
            {
              int v22 = *(unsigned __int8 *)(a1 + 40);
              *(_DWORD *)long long buf = 136315394;
              id v35 = "-[ADHomeInfoManager setRecognizeMyVoiceEnabled:]_block_invoke";
              __int16 v36 = 1024;
              int v37 = v22;
              _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "%s Setting VoiceID=%d", buf, 0x12u);
            }
            if (*(unsigned char *)(a1 + 40)) {
              uint64_t v23 = &__kCFBooleanTrue;
            }
            else {
              uint64_t v23 = &__kCFBooleanFalse;
            }
            v28[0] = _NSConcreteStackBlock;
            v28[1] = 3221225472;
            v28[2] = sub_100206D48;
            v28[3] = &unk_10050C610;
            id v29 = v8;
            [v29 updateValue:v23 completionHandler:v28];
          }
        }
        id v6 = [obj countByEnumeratingWithState:&v30 objects:v38 count:16];
      }
      while (v6);

      id v4 = v24;
    }
  }
}

void sub_100206D48(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [*(id *)(a1 + 32) value];
  unsigned int v5 = [v4 BOOLValue];

  id v6 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v7 = 136315650;
    uint64_t v8 = "-[ADHomeInfoManager setRecognizeMyVoiceEnabled:]_block_invoke";
    __int16 v9 = 2112;
    id v10 = v3;
    __int16 v11 = 1024;
    unsigned int v12 = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "%s Settings operation completed with (%@) value (%d)", (uint8_t *)&v7, 0x1Cu);
  }
}

void sub_100206EB0(uint64_t a1)
{
  uint64_t v2 = +[ADPreferences sharedPreferences];
  id v3 = [v2 multiUserHomeUUIDsForDeletion];

  id v4 = [*(id *)(a1 + 32) _homesWithMultiUserEnabled];
  if ([v3 count])
  {
    long long v16 = 0u;
    long long v17 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    id obj = v3;
    id v5 = [obj countByEnumeratingWithState:&v14 objects:v22 count:16];
    if (v5)
    {
      id v6 = v5;
      uint64_t v7 = *(void *)v15;
      do
      {
        for (i = 0; i != v6; i = (char *)i + 1)
        {
          if (*(void *)v15 != v7) {
            objc_enumerationMutation(obj);
          }
          uint64_t v9 = *(void *)(*((void *)&v14 + 1) + 8 * i);
          id v10 = AFSiriLogContextDaemon;
          if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)long long buf = 136315395;
            uint64_t v19 = "-[ADHomeInfoManager restartShareDeletion]_block_invoke";
            __int16 v20 = 2113;
            uint64_t v21 = v9;
            _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "%s Retrying deletion for UUID (%{private}@)", buf, 0x16u);
          }
          __int16 v11 = +[ADCloudKitManager sharedManager];
          v13[0] = _NSConcreteStackBlock;
          v13[1] = 3221225472;
          _OWORD v13[2] = sub_1002070E8;
          v13[3] = &unk_100506BD8;
          void v13[4] = v9;
          [v11 shareWithOwner:v9 addShare:0 homes:v4 completion:v13];
        }
        id v6 = [obj countByEnumeratingWithState:&v14 objects:v22 count:16];
      }
      while (v6);
    }
  }
}

void sub_1002070E8(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id v10 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    int v12 = 136315394;
    long long v13 = "-[ADHomeInfoManager restartShareDeletion]_block_invoke";
    __int16 v14 = 2112;
    id v15 = v9;
    _os_log_debug_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "%s error is (%@)", (uint8_t *)&v12, 0x16u);
    if (v9) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if (!v9)
  {
LABEL_3:
    __int16 v11 = +[ADPreferences sharedPreferences];
    [v11 removeMultiUserHomeUUID:*(void *)(a1 + 32)];
  }
LABEL_4:
}

id sub_10020727C(uint64_t a1)
{
  return [*(id *)(a1 + 32) _startCloudKitActivityForHomes:*(void *)(*(void *)(a1 + 32) + 16) homesToDelete:0];
}

uint64_t sub_100207330(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(result + 16))(result, a2, a4);
  }
  return result;
}

void sub_100207480(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = [*(id *)(a1 + 32) _currentAccessory];
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_100207A18(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(NSObject **)(v4 + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100207C24;
  block[3] = &unk_10050DCB8;
  void block[4] = v4;
  id v8 = v3;
  id v9 = *(id *)(a1 + 40);
  id v6 = v3;
  dispatch_async(v5, block);
}

void sub_100207AD4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = AFSiriLogContextDaemon;
  if (v3)
  {
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      int v7 = 136315651;
      id v8 = "-[ADHomeInfoManager _onceSiriDataSharingAdjustment:]_block_invoke";
      __int16 v9 = 2049;
      uint64_t v10 = v5;
      __int16 v11 = 2112;
      id v12 = v3;
      _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "%s Error while migrating Siri Data Sharing status from %{private}ld, error=%@", (uint8_t *)&v7, 0x20u);
    }
  }
  else
  {
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      uint64_t v6 = *(void *)(a1 + 32);
      int v7 = 136315395;
      id v8 = "-[ADHomeInfoManager _onceSiriDataSharingAdjustment:]_block_invoke";
      __int16 v9 = 2049;
      uint64_t v10 = v6;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%s Successfully migrated Siri Data Sharing status to %{private}ld", (uint8_t *)&v7, 0x16u);
    }
    _AFPreferencesSetSiriDataSharingHomeAccessoryMigrated();
  }
}

id sub_100207C18(uint64_t a1)
{
  return [*(id *)(a1 + 32) _onceSiriDataSharingAdjustment:*(void *)(a1 + 40)];
}

void sub_100207C24(uint64_t a1)
{
  if ((_AFPreferencesHomePodPriorOptInValue2021IsPresentWithContext() & 1) == 0)
  {
    id v2 = +[ADPreferences sharedPreferences];
    [v2 siriDataSharingOptInStatus];

    _AFPreferencesSetHomePodPriorOptInValue2021WithContext();
  }
  id v3 = +[ADPreferences sharedPreferences];
  v22[0] = _NSConcreteStackBlock;
  v22[1] = 3221225472;
  id v22[2] = sub_100207F80;
  v22[3] = &unk_10050C610;
  id v23 = *(id *)(a1 + 40);
  [v3 setSiriDataSharingOptInStatus:2 propagateToHomeAccessories:0 source:11 reason:@"One-time adjustment" completion:v22];

  if (*(void *)(a1 + 40))
  {
    if ((unint64_t)++qword_100585ED0 > 0x13)
    {
      long long v13 = (void *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
      {
        __int16 v14 = *(void **)(a1 + 32);
        id v15 = v13;
        long long v16 = [v14 _currentAccessory];
        long long v17 = [v16 uniqueIdentifier];
        uint64_t v18 = *(void **)(a1 + 40);
        *(_DWORD *)long long buf = 136315651;
        long long v25 = "-[ADHomeInfoManager _onceSiriDataSharingAdjustment:]_block_invoke";
        __int16 v26 = 2113;
        uint64_t v27 = (uint64_t)v17;
        __int16 v28 = 2112;
        id v29 = v18;
        _os_log_error_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "%s Error setting siriDataSharing for accessory %{private}@ in HomeKit: %@ - maximum retries reached", buf, 0x20u);
      }
    }
    else
    {
      dispatch_time_t v4 = dispatch_time(0, 30000000000);
      uint64_t v5 = *(void *)(a1 + 32);
      uint64_t v6 = *(NSObject **)(v5 + 8);
      v19[0] = _NSConcreteStackBlock;
      v19[1] = 3221225472;
      v19[2] = sub_1002080BC;
      v19[3] = &unk_10050DCB8;
      void v19[4] = v5;
      id v20 = *(id *)(a1 + 40);
      id v21 = *(id *)(a1 + 48);
      dispatch_after(v4, v6, v19);
    }
  }
  else
  {
    int v7 = (void *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      uint64_t v8 = qword_100585ED0;
      __int16 v9 = *(void **)(a1 + 32);
      uint64_t v10 = v7;
      __int16 v11 = [v9 _currentAccessory];
      id v12 = [v11 uniqueIdentifier];
      *(_DWORD *)long long buf = 136315651;
      long long v25 = "-[ADHomeInfoManager _onceSiriDataSharingAdjustment:]_block_invoke";
      __int16 v26 = 2048;
      uint64_t v27 = v8;
      __int16 v28 = 2113;
      id v29 = v12;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "%s Success (%lu retries) setting siriDataSharing for accessory %{private}@ in HomeKit", buf, 0x20u);
    }
    _AFPreferencesSetHomePodOptIn2021AdjustedWithContext();
  }
}

void sub_100207F80(uint64_t a1, void *a2)
{
  id v3 = a2;
  dispatch_time_t v4 = AFSiriLogContextDaemon;
  if (v3)
  {
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      int v6 = 136315394;
      int v7 = "-[ADHomeInfoManager _onceSiriDataSharingAdjustment:]_block_invoke_3";
      __int16 v8 = 2112;
      uint64_t v9 = v5;
      _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "%s Error performing one-time adjustment to local value, error=%@", (uint8_t *)&v6, 0x16u);
    }
  }
  else
  {
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      int v6 = 136315138;
      int v7 = "-[ADHomeInfoManager _onceSiriDataSharingAdjustment:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%s Successfully performed one-time adjustment on local value", (uint8_t *)&v6, 0xCu);
    }
    _AFPreferencesSetSiriDataSharingHomeAccessoryMigrated();
  }
  if (+[AFFeatureFlags isSiriDataSharingRepromptEnabled])_AFPreferencesSetSiriDataSharingHomeAccessoryMigrated(); {
}
  }

id sub_1002080BC(uint64_t a1)
{
  id v2 = (void *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
  {
    dispatch_time_t v4 = *(void **)(a1 + 32);
    uint64_t v5 = v2;
    int v6 = [v4 _currentAccessory];
    int v7 = [v6 uniqueIdentifier];
    uint64_t v8 = *(void *)(a1 + 40);
    int v9 = 136315907;
    uint64_t v10 = "-[ADHomeInfoManager _onceSiriDataSharingAdjustment:]_block_invoke";
    __int16 v11 = 2113;
    id v12 = v7;
    __int16 v13 = 2112;
    uint64_t v14 = v8;
    __int16 v15 = 2048;
    uint64_t v16 = qword_100585ED0;
    _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "%s Error setting siriDataSharing for accessory %{private}@ in HomeKit: %@ - attempting retry %lu", (uint8_t *)&v9, 0x2Au);
  }
  return [*(id *)(a1 + 32) _onceSiriDataSharingAdjustment:*(void *)(a1 + 48)];
}

id sub_100208290(uint64_t a1)
{
  return [*(id *)(a1 + 32) _onceSiriDataSharingAdjustment:*(void *)(a1 + 40)];
}

void sub_1002084F4(uint64_t a1)
{
  id v20 = +[NSMutableArray array];
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  uint64_t v19 = a1;
  id v2 = [*(id *)(*(void *)(a1 + 32) + 16) currentHome];
  id v3 = [v2 accessories];

  id v4 = [v3 countByEnumeratingWithState:&v21 objects:v29 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v22;
    do
    {
      int v7 = 0;
      do
      {
        if (*(void *)v22 != v6) {
          objc_enumerationMutation(v3);
        }
        uint64_t v8 = [*(id *)(*((void *)&v21 + 1) + 8 * (void)v7) settings];
        int v9 = [v8 rootGroup];
        uint64_t v10 = sub_1001FFD5C(@"root.siri.language", v9);

        if (v10)
        {
          __int16 v11 = [v10 value];
          id v12 = [v11 title];
          __int16 v13 = [v12 componentsSeparatedByString:@","];

          if ([v13 count])
          {
            uint64_t v14 = [v13 firstObject];
            if (([v20 containsObject:v14] & 1) == 0) {
              [v20 addObject:v14];
            }
          }
          else
          {
            uint64_t v16 = AFSiriLogContextDaemon;
            if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)long long buf = 136315138;
              __int16 v26 = "-[ADHomeInfoManager availableLanguagesInTheHome:]_block_invoke";
              _os_log_debug_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "%s Language component is empty", buf, 0xCu);
            }
          }
        }
        else
        {
          __int16 v15 = AFSiriLogContextDaemon;
          if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)long long buf = 136315138;
            __int16 v26 = "-[ADHomeInfoManager availableLanguagesInTheHome:]_block_invoke";
            _os_log_debug_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "%s Siri language setting is nil", buf, 0xCu);
          }
        }

        int v7 = (char *)v7 + 1;
      }
      while (v5 != v7);
      id v5 = [v3 countByEnumeratingWithState:&v21 objects:v29 count:16];
    }
    while (v5);
  }

  long long v17 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 136315394;
    __int16 v26 = "-[ADHomeInfoManager availableLanguagesInTheHome:]_block_invoke";
    __int16 v27 = 2112;
    __int16 v28 = v20;
    _os_log_debug_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "%s Retrieved input language codes %@", buf, 0x16u);
  }
  id v18 = [v20 copy];
  (*(void (**)(void))(*(void *)(v19 + 40) + 16))();
}

void sub_100208924(void *a1)
{
  id v2 = (void *)a1[4];
  uint64_t v3 = a1[5];
  id v8 = 0;
  id v4 = [v2 _accessoryForIdentifier:v3 inHome:&v8];
  id v5 = v8;
  uint64_t v6 = a1[6];
  int v7 = [v5 uniqueIdentifier];
  (*(void (**)(uint64_t, void *))(v6 + 16))(v6, v7);
}

void sub_100208A44(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc_init((Class)NSMutableDictionary);
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  id v5 = v3;
  id v6 = [v5 countByEnumeratingWithState:&v13 objects:v17 count:16];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = *(void *)v14;
    do
    {
      for (i = 0; i != v7; i = (char *)i + 1)
      {
        if (*(void *)v14 != v8) {
          objc_enumerationMutation(v5);
        }
        uint64_t v10 = *(void *)(*((void *)&v13 + 1) + 8 * i);
        __int16 v11 = objc_msgSend(v5, "objectForKey:", v10, (void)v13);
        id v12 = [v11 objectForKey:@"allowVoiceID"];
        if (v12) {
          [v4 setObject:v12 forKey:v10];
        }
      }
      id v7 = [v5 countByEnumeratingWithState:&v13 objects:v17 count:16];
    }
    while (v7);
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100208C68(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(void *)(v2 + 48))
  {
    if (*(unsigned char *)(a1 + 48) || (v5 = [*(id *)(v2 + 64) count], uint64_t v2 = *(void *)(a1 + 32), !v5))
    {
      [(id)v2 _updateHomeUserSettings];
      uint64_t v3 = *(void *)(a1 + 40);
      id v7 = [*(id *)(*(void *)(a1 + 32) + 64) mutableCopy];
      (*(void (**)(uint64_t, id))(v3 + 16))(v3, v7);
    }
    else
    {
      uint64_t v6 = *(void *)(a1 + 40);
      id v7 = [*(id *)(v2 + 64) mutableCopy];
      (*(void (**)(uint64_t, id))(v6 + 16))(v6, v7);
    }
  }
  else
  {
    id v4 = *(void (**)(void))(*(void *)(a1 + 40) + 16);
    v4();
  }
}

void sub_100208DF0(uint64_t a1)
{
  uint64_t v2 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 48);
    *(_DWORD *)long long buf = 136315394;
    __int16 v28 = "-[ADHomeInfoManager getCurrentHomeMemberIds:]_block_invoke";
    __int16 v29 = 2112;
    uint64_t v30 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s currentHome:%@", buf, 0x16u);
  }
  id v4 = [*(id *)(a1 + 32) _currentHome];

  if (v4)
  {
    id v5 = [*(id *)(a1 + 32) _currentHome];
    long long v21 = [v5 owner];
    id v6 = objc_alloc_init((Class)NSMutableArray);
    long long v22 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    id v7 = [v5 users];
    id v8 = [v7 countByEnumeratingWithState:&v22 objects:v26 count:16];
    if (v8)
    {
      id v9 = v8;
      uint64_t v10 = *(void *)v23;
      do
      {
        for (i = 0; i != v9; i = (char *)i + 1)
        {
          if (*(void *)v23 != v10) {
            objc_enumerationMutation(v7);
          }
          id v12 = [*(id *)(*((void *)&v22 + 1) + 8 * i) uniqueIdentifier];
          long long v13 = [v12 UUIDString];
          id v14 = [v13 copy];
          [v6 addObject:v14];
        }
        id v9 = [v7 countByEnumeratingWithState:&v22 objects:v26 count:16];
      }
      while (v9);
    }

    if (v21)
    {
      long long v15 = [v21 uniqueIdentifier];
      id v16 = [v15 copy];
    }
    else
    {
      id v16 = 0;
    }
    uint64_t v17 = *(void *)(a1 + 40);
    id v18 = [v16 UUIDString];
    uint64_t v19 = [v5 uniqueIdentifier];
    id v20 = [v19 UUIDString];
    (*(void (**)(uint64_t, void *, void *, id))(v17 + 16))(v17, v18, v20, v6);
  }
  else
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

void sub_10020943C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = *(NSObject **)(*(void *)(a1 + 32) + 8);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  void v12[2] = sub_10020951C;
  void v12[3] = &unk_10050DC68;
  id v13 = v6;
  id v14 = v5;
  id v8 = *(id *)(a1 + 40);
  uint64_t v9 = *(void *)(a1 + 32);
  id v15 = v8;
  uint64_t v16 = v9;
  id v10 = v5;
  id v11 = v6;
  dispatch_async(v7, v12);
}

void sub_10020951C(void *a1)
{
  uint64_t v2 = (void *)a1[4];
  if (!v2)
  {
    id v7 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      uint64_t v8 = a1[5];
      uint64_t v9 = a1[6];
      int v14 = 136315651;
      id v15 = "-[ADHomeInfoManager _setPreferredMediaUserForAccessory:]_block_invoke_2";
      __int16 v16 = 2113;
      uint64_t v17 = v8;
      __int16 v18 = 2113;
      uint64_t v19 = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "%s Found sharedUserID (%{private}@) for homeUserID (%{private}@)", (uint8_t *)&v14, 0x20u);
    }
    [*(id *)(a1[7] + 112) setPreferredMediaUserHomeUserID:a1[6]];
    id v5 = *(void **)(a1[7] + 112);
    uint64_t v6 = a1[5];
    goto LABEL_9;
  }
  if ([v2 code] == (id)6001)
  {
    uint64_t v3 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      uint64_t v4 = a1[6];
      int v14 = 136315651;
      id v15 = "-[ADHomeInfoManager _setPreferredMediaUserForAccessory:]_block_invoke";
      __int16 v16 = 2113;
      uint64_t v17 = v4;
      __int16 v18 = 2113;
      uint64_t v19 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "%s sharedUserID not found for homeUserID (%{private}@), likely not enrolled in MultiUser, setting homeUserID (%{private}@) as preferred media user", (uint8_t *)&v14, 0x20u);
    }
    [*(id *)(a1[7] + 112) setPreferredMediaUserHomeUserID:a1[6]];
    id v5 = *(void **)(a1[7] + 112);
    uint64_t v6 = 0;
LABEL_9:
    [v5 setPreferredMediaUserSharedUserID:v6];
    goto LABEL_12;
  }
  [*(id *)(a1[7] + 112) setPreferredMediaUserHomeUserID:a1[6]];
  [*(id *)(a1[7] + 112) setPreferredMediaUserSharedUserID:0];
  id v10 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
  {
    uint64_t v12 = a1[4];
    uint64_t v13 = a1[6];
    int v14 = 136315651;
    id v15 = "-[ADHomeInfoManager _setPreferredMediaUserForAccessory:]_block_invoke";
    __int16 v16 = 2112;
    uint64_t v17 = v12;
    __int16 v18 = 2113;
    uint64_t v19 = v13;
    _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "%s Error (%@) looking up sharedUserID for homeUserID (%{private}@). We will only set homeUserID", (uint8_t *)&v14, 0x20u);
  }
LABEL_12:
  id v11 = +[NSNotificationCenter defaultCenter];
  [v11 postNotificationName:@"ADCurrentHomeKitHomeChanged" object:0];
}

uint64_t sub_100209A8C(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 112) copy];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 40) = v2;
  return _objc_release_x1(v2, v4);
}

void sub_100209BC8(uint64_t a1)
{
  id v5 = [*(id *)(a1 + 32) _currentHomeInfo];
  id v2 = [v5 copy];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

ADHomeInfo *sub_10020AED8(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if (v3)
  {
    id v5 = objc_alloc_init(ADHomeInfo);
    id v6 = v4;
    if (v6)
    {
      id v7 = v6;
      id v19 = v4;
      long long v22 = 0u;
      long long v23 = 0u;
      long long v20 = 0u;
      long long v21 = 0u;
      uint64_t v8 = [v3 accessories];
      id v9 = [v8 countByEnumeratingWithState:&v20 objects:buf count:16];
      if (v9)
      {
        id v10 = v9;
        uint64_t v11 = *(void *)v21;
        while (2)
        {
          for (i = 0; i != v10; i = (char *)i + 1)
          {
            if (*(void *)v21 != v11) {
              objc_enumerationMutation(v8);
            }
            uint64_t v13 = *(void **)(*((void *)&v20 + 1) + 8 * i);
            int v14 = [v7 uniqueIdentifier];
            id v15 = [v13 uniqueIdentifier];
            unsigned __int8 v16 = [v14 isEqual:v15];

            if (v16)
            {

              -[ADHomeInfo setPersonalDomainsIsEnabled:](v5, "setPersonalDomainsIsEnabled:", [v3 isEnabled]);
              -[ADHomeInfo setSecurePersonalDomainsRequireAuth:](v5, "setSecurePersonalDomainsRequireAuth:", [v3 allowUnauthenticatedRequests] ^ 1);
              id v4 = v19;
              goto LABEL_17;
            }
          }
          id v10 = [v8 countByEnumeratingWithState:&v20 objects:buf count:16];
          if (v10) {
            continue;
          }
          break;
        }
      }

      id v4 = v19;
    }
    uint64_t v17 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 136315138;
      long long v25 = "_ADHomeGetInfoFromAccessControl";
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "%s Current accessory is not found in the access control list.", buf, 0xCu);
    }
    [(ADHomeInfo *)v5 setPersonalDomainsIsEnabled:0];
  }
  else
  {
    id v5 = 0;
  }
LABEL_17:

  return v5;
}

void sub_10020B85C(uint64_t a1)
{
  uint64_t v2 = _AFPreferencesSiriDataSharingOptInStatus();
  id v3 = (void *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    id v4 = v3;
    id v5 = AFSiriDataSharingOptInStatusGetName();
    *(_DWORD *)long long buf = 136315394;
    int v37 = "-[ADHomeInfoManager _siriDataSharingOptInStatusDidChange:]_block_invoke";
    __int16 v38 = 2112;
    id v39 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%s Opt-in status: %@", buf, 0x16u);
  }
  id v6 = [*(id *)(a1 + 32) _homeManager];
  id v7 = [v6 homes];

  long long v32 = 0u;
  long long v33 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  id obj = v7;
  id v24 = [obj countByEnumeratingWithState:&v30 objects:v35 count:16];
  if (v24)
  {
    uint64_t v23 = *(void *)v31;
    do
    {
      for (i = 0; i != v24; i = (char *)i + 1)
      {
        if (*(void *)v31 != v23) {
          objc_enumerationMutation(obj);
        }
        id v9 = *(void **)(*((void *)&v30 + 1) + 8 * i);
        id v10 = [v9 owner];
        uint64_t v11 = [v10 uniqueIdentifier];
        uint64_t v12 = [v11 UUIDString];
        long long v25 = v9;
        uint64_t v13 = [v9 currentUser];
        int v14 = [v13 uniqueIdentifier];
        id v15 = [v14 UUIDString];
        unsigned int v16 = [v12 isEqualToString:v15];

        if (v16)
        {
          long long v28 = 0u;
          long long v29 = 0u;
          long long v26 = 0u;
          long long v27 = 0u;
          uint64_t v17 = [v25 accessories];
          id v18 = [v17 countByEnumeratingWithState:&v26 objects:v34 count:16];
          if (v18)
          {
            id v19 = v18;
            uint64_t v20 = *(void *)v27;
            do
            {
              for (j = 0; j != v19; j = (char *)j + 1)
              {
                if (*(void *)v27 != v20) {
                  objc_enumerationMutation(v17);
                }
                [*(id *)(a1 + 32) _propagateSiriDataSharingOptInStatus:v2 toAccessory:*(void *)(*((void *)&v26 + 1) + 8 * (void)j)];
              }
              id v19 = [v17 countByEnumeratingWithState:&v26 objects:v34 count:16];
            }
            while (v19);
          }
        }
      }
      id v24 = [obj countByEnumeratingWithState:&v30 objects:v35 count:16];
    }
    while (v24);
  }
}

id sub_10020BCB0(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

void sub_10020C338(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = [*(id *)(a1 + 32) _currentHome];
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

id sub_10020CC28(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _startAcceptingCloudSharesForMultiUserService];
}

void sub_10020CEC8(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) _homeManager];
  id v3 = [v2 homes];

  long long v35 = 0u;
  long long v36 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  id v4 = v3;
  id v5 = [v4 countByEnumeratingWithState:&v33 objects:v39 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v34;
LABEL_3:
    uint64_t v8 = 0;
    while (1)
    {
      if (*(void *)v34 != v7) {
        objc_enumerationMutation(v4);
      }
      id v9 = *(void **)(*((void *)&v33 + 1) + 8 * v8);
      id v10 = [v9 uniqueIdentifier];
      uint64_t v11 = [v10 UUIDString];
      unsigned int v12 = [v11 isEqualToString:*(void *)(a1 + 40)];

      if (v12) {
        break;
      }
      if (v6 == (id)++v8)
      {
        id v6 = [v4 countByEnumeratingWithState:&v33 objects:v39 count:16];
        if (v6) {
          goto LABEL_3;
        }
        goto LABEL_9;
      }
    }
    uint64_t v13 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 136315138;
      __int16 v38 = "-[ADHomeInfoManager updateCurrentUserRMVSettingForHome:enabled:completion:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "%s Found Home", buf, 0xCu);
    }
    id v14 = v9;

    if (v14)
    {
      id v15 = [v14 currentUser];
      unsigned int v16 = v15;
      if (v15)
      {
        uint64_t v17 = [v15 userSettingsForHome:v14];
        id v18 = [v17 settings];

        id v19 = [v18 rootGroup];
        uint64_t v20 = sub_1001FFD5C(@"root.siri.identifyVoice", v19);

        long long v21 = [v18 rootGroup];
        long long v22 = sub_1001FFD5C(@"root.home.dismissedIdentifyVoiceOnboarding", v21);

        uint64_t v23 = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 56)];
        long long v27 = _NSConcreteStackBlock;
        uint64_t v28 = 3221225472;
        long long v29 = sub_10020D258;
        long long v30 = &unk_10050DEE8;
        uint64_t v31 = *(void *)(a1 + 32);
        id v32 = *(id *)(a1 + 48);
        [v20 updateValue:v23 completionHandler:&v27];

        id v24 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", 1, v27, v28, v29, v30, v31);
        [v22 updateValue:v24 completionHandler:&stru_100506B60];
      }
      else
      {
        uint64_t v26 = *(void *)(a1 + 48);
        id v18 = +[AFError errorWithCode:6001 description:@"No current user found"];
        (*(void (**)(uint64_t, void *))(v26 + 16))(v26, v18);
      }

      goto LABEL_18;
    }
  }
  else
  {
LABEL_9:
  }
  uint64_t v25 = *(void *)(a1 + 48);
  id v14 = +[AFError errorWithCode:6002 description:@"Invalid Home unique ID for this user"];
  (*(void (**)(uint64_t, id))(v25 + 16))(v25, v14);
LABEL_18:
}

void sub_10020D258(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!v3 && [*(id *)(a1 + 32) _updateHomeUserSettings])
  {
    id v4 = +[NSNotificationCenter defaultCenter];
    [v4 postNotificationName:@"ADHomeInfoForThisDeviceDidChangeNotification" object:0];
  }
  id v5 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v6 = 136315394;
    uint64_t v7 = "-[ADHomeInfoManager updateCurrentUserRMVSettingForHome:enabled:completion:]_block_invoke";
    __int16 v8 = 2112;
    id v9 = v3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "%s Updated RMV setting with error %@", (uint8_t *)&v6, 0x16u);
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_10020D370(id a1, NSError *a2)
{
  id v2 = a2;
  id v3 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v4 = 136315394;
    id v5 = "-[ADHomeInfoManager updateCurrentUserRMVSettingForHome:enabled:completion:]_block_invoke";
    __int16 v6 = 2112;
    uint64_t v7 = v2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "%s Updated dismissed onboarding setting with error %@", (uint8_t *)&v4, 0x16u);
  }
}

void sub_10020D58C(uint64_t a1)
{
  id v2 = *(void **)(*(void *)(a1 + 32) + 48);
  if (v2)
  {
    long long v33 = 0u;
    long long v34 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    id v3 = [v2 users];
    id v4 = [v3 countByEnumeratingWithState:&v31 objects:v39 count:16];
    if (v4)
    {
      id v5 = v4;
      uint64_t v6 = *(void *)v32;
LABEL_4:
      uint64_t v7 = 0;
      while (1)
      {
        if (*(void *)v32 != v6) {
          objc_enumerationMutation(v3);
        }
        __int16 v8 = *(void **)(*((void *)&v31 + 1) + 8 * v7);
        id v9 = [v8 uniqueIdentifier];
        id v10 = [v9 UUIDString];
        unsigned __int8 v11 = [v10 isEqualToString:*(void *)(a1 + 40)];

        if (v11) {
          break;
        }
        if (v5 == (id)++v7)
        {
          id v5 = [v3 countByEnumeratingWithState:&v31 objects:v39 count:16];
          if (v5) {
            goto LABEL_4;
          }
          goto LABEL_10;
        }
      }
      id v12 = v8;

      if (v12) {
        goto LABEL_16;
      }
    }
    else
    {
LABEL_10:
    }
    uint64_t v13 = *(void **)(a1 + 40);
    id v14 = [*(id *)(*(void *)(a1 + 32) + 48) owner];
    id v15 = [v14 uniqueIdentifier];
    unsigned int v16 = [v15 UUIDString];
    LODWORD(v13) = [v13 isEqualToString:v16];

    if (!v13) {
      goto LABEL_21;
    }
    uint64_t v17 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 136315138;
      long long v36 = "-[ADHomeInfoManager updateRMVSettingForUser:enabled:completion:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "%s User is home owner", buf, 0xCu);
    }
    id v12 = [*(id *)(*(void *)(a1 + 32) + 48) owner];
    if (v12)
    {
LABEL_16:
      id v18 = [v12 userSettingsForHome:*(void *)(*(void *)(a1 + 32) + 48)];
      id v19 = [v18 settings];

      uint64_t v20 = [v19 rootGroup];
      long long v21 = sub_1001FFD5C(@"root.siri.identifyVoice", v20);

      if (v21)
      {
        long long v22 = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 56)];
        v29[0] = _NSConcreteStackBlock;
        v29[1] = 3221225472;
        v29[2] = sub_10020D9E8;
        v29[3] = &unk_10050DEE8;
        void v29[4] = *(void *)(a1 + 32);
        id v30 = *(id *)(a1 + 48);
        [v21 updateValue:v22 completionHandler:v29];
      }
      else
      {
        uint64_t v25 = AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long buf = 136315394;
          long long v36 = "-[ADHomeInfoManager updateRMVSettingForUser:enabled:completion:]_block_invoke";
          __int16 v37 = 2112;
          id v38 = v12;
          _os_log_error_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "%s No RmV setting found for user: %@", buf, 0x16u);
        }
        uint64_t v26 = *(void *)(a1 + 48);
        long long v27 = +[AFError errorWithCode:6008];
        (*(void (**)(uint64_t, void *))(v26 + 16))(v26, v27);
      }
    }
    else
    {
LABEL_21:
      uint64_t v24 = *(void *)(a1 + 48);
      id v12 = +[AFError errorWithCode:6001 description:@"No home user specified"];
      (*(void (**)(uint64_t, id))(v24 + 16))(v24, v12);
    }
  }
  else
  {
    uint64_t v23 = *(void *)(a1 + 48);
    id v28 = +[AFError errorWithCode:31 description:@"No Current Home"];
    (*(void (**)(uint64_t))(v23 + 16))(v23);
  }
}

void sub_10020D9E8(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!v3 && [*(id *)(a1 + 32) _updateHomeUserSettings])
  {
    id v4 = +[NSNotificationCenter defaultCenter];
    [v4 postNotificationName:@"ADHomeInfoForThisDeviceDidChangeNotification" object:0];
  }
  id v5 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v6 = 136315394;
    uint64_t v7 = "-[ADHomeInfoManager updateRMVSettingForUser:enabled:completion:]_block_invoke";
    __int16 v8 = 2112;
    id v9 = v3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "%s Updated RMV setting with error %@", (uint8_t *)&v6, 0x16u);
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_10020DCA8(uint64_t a1)
{
  id v2 = *(void **)(a1 + 40);
  id v3 = v2;
  if (!v2)
  {
    id v3 = +[AFInstanceContext defaultContext];
  }
  objc_storeStrong((id *)(*(void *)(a1 + 32) + 88), v3);
  if (!v2) {

  }
  uint64_t v4 = +[NSHashTable weakObjectsHashTable];
  uint64_t v5 = *(void *)(a1 + 32);
  int v6 = *(void **)(v5 + 96);
  *(void *)(v5 + 96) = v4;

  uint64_t v7 = objc_alloc_init(ADPreferredMediaUserInfo);
  uint64_t v8 = *(void *)(a1 + 32);
  id v9 = *(void **)(v8 + 112);
  *(void *)(v8 + 112) = v7;

  id v10 = [*(id *)(a1 + 32) _homeManager];
  unsigned __int8 v11 = +[TRIClient clientWithIdentifier:124];
  id v12 = +[TRINamespace namespaceNameFromId:874];
  uint64_t v13 = [v11 levelForFactor:@"ByPassServerFlow" withNamespaceName:v12];
  id v14 = v13;
  CFStringRef v15 = @"NO";
  if (v13)
  {
    id v16 = [v13 BOOLeanValue];
    uint64_t v17 = +[ADPreferences sharedPreferences];
    [v17 setHomeAutomationServerFlowBypassed:v16];

    if (v16) {
      CFStringRef v15 = @"YES";
    }
  }
  id v18 = AFSiriLogContextUtility;
  if (os_log_type_enabled(AFSiriLogContextUtility, OS_LOG_TYPE_DEBUG))
  {
    int v20 = 136315394;
    long long v21 = "fetchHomeContextTrialFactor";
    __int16 v22 = 2112;
    CFStringRef v23 = v15;
    _os_log_debug_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "%s Home Automation server flow by pass enabled: %@", (uint8_t *)&v20, 0x16u);
  }

  id v19 = +[NSNotificationCenter defaultCenter];
  [v19 addObserver:*(void *)(a1 + 32) selector:"_siriDataSharingOptInStatusDidChange:" name:@"ADPreferencesSiriDataSharingOptInStatusDidChangeNotification" object:0];
  *(unsigned char *)(*(void *)(a1 + 32) + 120) = AFIsATV();
}

void sub_10020DEE0(uint64_t a1, unint64_t a2)
{
  id v3 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", @"Queue %s did not respond to watchdog and is likely blocked.", dispatch_queue_get_label(*(dispatch_queue_t *)(a1 + 32)));
  uint64_t v4 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)long long buf = 136315394;
    uint64_t v7 = "-[ADHomeInfoManager _initWithContext:]_block_invoke_2";
    __int16 v8 = 2112;
    id v9 = v3;
    _os_log_fault_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "%s %@", buf, 0x16u);
  }
  int v5 = AFIsInternalInstall();
  if (a2 <= 3 && v5) {
    WriteStackshotReport_async();
  }
}

void sub_10020E250(id a1)
{
  uint64_t v1 = [ADHomeInfoManager alloc];
  id v4 = +[AFInstanceContext currentContext];
  id v2 = [(ADHomeInfoManager *)v1 _initWithContext:v4];
  id v3 = (void *)qword_100585EB8;
  qword_100585EB8 = (uint64_t)v2;
}

uint64_t sub_10020E824(uint64_t a1)
{
  uint64_t v1 = AFSiriLogContextSpeech;
  if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)long long buf = 136315138;
    uint64_t v65 = "ADTrainSpeechPersonalizedLM_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_INFO, "%s PLM: Training (and maintenance) start", buf, 0xCu);
  }
  id v2 = [objc_alloc((Class)CoreEmbeddedSpeechRecognizer) initWithDelegate:0 instanceUUID:&CoreEmbeddedSpeechRecognizerInstanceUUIDInteractive];
  [v2 removePersonalizedLMForFidesOnly:0];

  id v3 = AFLibraryDirectoryWithSubPath();
  id v4 = [v3 stringByAppendingPathComponent:@"SpeechPersonalizedLM"];

  if (![v4 length])
  {
    uint64_t v24 = AFSiriLogContextSpeech;
    if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 136315138;
      uint64_t v65 = "ADTrainSpeechPersonalizedLM_block_invoke";
      uint64_t v25 = "%s PLM: Empty path";
LABEL_24:
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, v25, buf, 0xCu);
    }
LABEL_25:
    uint64_t v26 = 0;
    goto LABEL_52;
  }
  int v5 = +[AFPreferences sharedPreferences];
  unsigned __int8 v6 = [v5 dictationIsEnabled];

  if ((v6 & 1) == 0)
  {
    uint64_t v24 = AFSiriLogContextSpeech;
    if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 136315138;
      uint64_t v65 = "ADTrainSpeechPersonalizedLM_block_invoke";
      uint64_t v25 = "%s PLM: Dictation disabled";
      goto LABEL_24;
    }
    goto LABEL_25;
  }
  uint64_t v52 = 0;
  double v53 = &v52;
  uint64_t v54 = 0x3032000000;
  id v55 = sub_10020F1D0;
  uint64_t v56 = sub_10020F1E0;
  id v57 = 0;
  id v7 = [objc_alloc((Class)CoreEmbeddedSpeechRecognizer) initWithDelegate:0 instanceUUID:&CoreEmbeddedSpeechRecognizerInstanceUUIDInteractive];
  __int16 v8 = dispatch_group_create();
  dispatch_group_enter(v8);
  v49[0] = _NSConcreteStackBlock;
  v49[1] = 3221225472;
  v49[2] = sub_10020F1E8;
  v49[3] = &unk_100506DA8;
  uint64_t v51 = &v52;
  id v9 = v8;
  id v50 = v9;
  id v42 = v7;
  [v7 getOfflineDictationStatusWithCompletion:v49];
  dispatch_time_t v10 = dispatch_time(0, 10000000000);
  dispatch_group_wait(v9, v10);
  id v11 = (id)v53[5];
  id v12 = objc_alloc_init((Class)NSMutableSet);
  long long v47 = 0u;
  long long v48 = 0u;
  long long v45 = 0u;
  long long v46 = 0u;
  id v13 = v11;
  id v14 = [v13 countByEnumeratingWithState:&v45 objects:buf count:16];
  if (v14)
  {
    uint64_t v15 = *(void *)v46;
    do
    {
      for (i = 0; i != v14; i = (char *)i + 1)
      {
        if (*(void *)v46 != v15) {
          objc_enumerationMutation(v13);
        }
        uint64_t v17 = *(void *)(*((void *)&v45 + 1) + 8 * i);
        id v18 = [v13 objectForKeyedSubscript:v17];
        int IsInstalled = AFOfflineDictationStatusStringIsInstalled();

        if (IsInstalled) {
          [v12 addObject:v17];
        }
      }
      id v14 = [v13 countByEnumeratingWithState:&v45 objects:buf count:16];
    }
    while (v14);
  }

  int v20 = AFSiriLogContextSpeech;
  if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)char v58 = 136315394;
    char v59 = "getPersonalizedLMUserLanguage";
    __int16 v60 = 2112;
    id v61 = v12;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "%s PLM: installedLanguages=%@", v58, 0x16u);
  }
  if (![v12 count])
  {
    __int16 v22 = 0;
    goto LABEL_37;
  }
  if ([v12 count] != (id)1)
  {
    long long v27 = +[ADPreferences sharedPreferences];
    id v28 = [v27 languageCode];

    long long v29 = AFOfflineDictationLanguageForKeyboardLanguage();
    id v30 = AFSiriLogContextSpeech;
    if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)char v58 = 136315650;
      char v59 = "getPersonalizedLMUserLanguage";
      __int16 v60 = 2112;
      id v61 = v28;
      __int16 v62 = 2112;
      id v63 = v29;
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_INFO, "%s PLM: Trying Siri language %@ result %@", v58, 0x20u);
    }
    if ([v29 length])
    {
      long long v31 = v28;
    }
    else
    {
      long long v32 = +[NSLocale currentLocale];
      long long v31 = [v32 localeIdentifier];

      AFOfflineDictationLanguageForKeyboardLanguage();
      id v33 = (id)objc_claimAutoreleasedReturnValue();

      long long v34 = AFSiriLogContextSpeech;
      if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)char v58 = 136315650;
        char v59 = "getPersonalizedLMUserLanguage";
        __int16 v60 = 2112;
        id v61 = v31;
        __int16 v62 = 2112;
        id v63 = v33;
        _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_INFO, "%s PLM: Trying system language %@ result %@", v58, 0x20u);
      }
      if (![v33 length])
      {
        __int16 v22 = 0;
        goto LABEL_36;
      }
      long long v29 = v33;
    }
    id v33 = v29;
    __int16 v22 = v33;
LABEL_36:

    goto LABEL_37;
  }
  long long v21 = [v12 allObjects];
  __int16 v22 = [v21 firstObject];

  CFStringRef v23 = AFSiriLogContextSpeech;
  if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)char v58 = 136315394;
    char v59 = "getPersonalizedLMUserLanguage";
    __int16 v60 = 2112;
    id v61 = v22;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "%s PLM: Found one dictation language %@", v58, 0x16u);
  }
LABEL_37:

  _Block_object_dispose(&v52, 8);
  long long v35 = AFSiriLogContextSpeech;
  if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)long long buf = 136315394;
    uint64_t v65 = "ADTrainSpeechPersonalizedLM_block_invoke";
    __int16 v66 = 2112;
    id v67 = v22;
    _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_INFO, "%s PLM: user language: %@", buf, 0x16u);
  }
  if (![v22 length])
  {
    id v40 = AFSiriLogContextSpeech;
    if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 136315138;
      uint64_t v65 = "ADTrainSpeechPersonalizedLM_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_INFO, "%s PLM: Could not get user language", buf, 0xCu);
    }
    uint64_t v26 = 0;
    goto LABEL_51;
  }
  id v36 = objc_alloc_init((Class)SpeechModelTrainingClient);
  __int16 v37 = v36;
  uint64_t v26 = *(void *)(a1 + 32);
  if (v26)
  {
    id v44 = v36;
    uint64_t v26 = xpc_activity_add_eligibility_changed_handler();
    if (xpc_activity_should_defer(*(xpc_activity_t *)(a1 + 32)))
    {
      BOOL v38 = xpc_activity_set_state(*(xpc_activity_t *)(a1 + 32), 3);
      id v39 = AFSiriLogContextSpeech;
      if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)long long buf = 136315394;
        uint64_t v65 = "ADTrainSpeechPersonalizedLM_block_invoke";
        __int16 v66 = 1024;
        LODWORD(v67) = v38;
        _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_INFO, "%s PLM: Deferred:%d", buf, 0x12u);
      }

      goto LABEL_50;
    }
  }
  [v37 trainPersonalizedLMWithLanguage:v22 directory:v4 completion:&stru_100506D80];
LABEL_50:

LABEL_51:
LABEL_52:

  if (v26) {
    xpc_activity_remove_eligibility_changed_handler();
  }
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_10020F128(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  if (!a2) {
    _Unwind_Resume(exc_buf);
  }
  objc_begin_catch(exc_buf);
  if (!v31) {
    JUMPOUT(0x10020F0BCLL);
  }
  JUMPOUT(0x10020F0B4);
}

uint64_t sub_10020F1D0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10020F1E0(uint64_t a1)
{
}

void sub_10020F1E8(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a2);
  id v4 = a2;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_10020F248(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (xpc_activity_should_defer(v3))
  {
    BOOL v4 = xpc_activity_set_state(v3, 3);
    int v5 = AFSiriLogContextSpeech;
    if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_INFO))
    {
      int v6 = 136315394;
      id v7 = "ADTrainSpeechPersonalizedLM_block_invoke";
      __int16 v8 = 1024;
      BOOL v9 = v4;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "%s PLM: eligibilityHandler deferred: %d", (uint8_t *)&v6, 0x12u);
    }
    [*(id *)(a1 + 32) invalidate];
  }
}

void sub_10020F334(id a1, NSDictionary *a2, NSError *a3)
{
  BOOL v4 = a2;
  int v5 = a3;
  int v6 = AFSiriLogContextSpeech;
  if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_INFO))
  {
    int v14 = 136315138;
    uint64_t v15 = "ADTrainSpeechPersonalizedLM_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "%s PLM: Training end", (uint8_t *)&v14, 0xCu);
  }
  if (v5)
  {
    id v7 = AFSiriLogContextSpeech;
    if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_INFO))
    {
      int v14 = 136315394;
      uint64_t v15 = "ADTrainSpeechPersonalizedLM_block_invoke";
      __int16 v16 = 2112;
      uint64_t v17 = v5;
      __int16 v8 = "%s PLM: Training error %@";
      BOOL v9 = v7;
      uint32_t v10 = 22;
LABEL_8:
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, v8, (uint8_t *)&v14, v10);
    }
  }
  else
  {
    id v11 = [objc_alloc((Class)CoreEmbeddedSpeechRecognizer) initWithDelegate:0 instanceUUID:&CoreEmbeddedSpeechRecognizerInstanceUUIDInteractive];
    [v11 invalidatePersonalizedLM];

    id v12 = [objc_alloc((Class)CoreEmbeddedSpeechRecognizer) initWithDelegate:0 instanceUUID:&CoreEmbeddedSpeechRecognizerInstanceUUIDBackground];
    [v12 invalidatePersonalizedLM];

    id v13 = AFSiriLogContextSpeech;
    if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_INFO))
    {
      int v14 = 136315138;
      uint64_t v15 = "ADTrainSpeechPersonalizedLM_block_invoke";
      __int16 v8 = "%s PLM: Invalidated previous PLM";
      BOOL v9 = v13;
      uint32_t v10 = 12;
      goto LABEL_8;
    }
  }
}

unint64_t sub_10020F5E0(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = a2 & 0xFFFFFFFFFFFFFFFELL | *(unsigned __int8 *)(a1 + 32);
  BOOL v4 = AFSiriLogContextConnection;
  if (os_log_type_enabled(AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
  {
    int v6 = 136315650;
    id v7 = "-[ADOpportuneSpeakingStateManager _listeningEdgeDetectorIDsChanged]_block_invoke";
    __int16 v8 = 2048;
    uint64_t v9 = a2;
    __int16 v10 = 2048;
    unint64_t v11 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%s state: %llu -> %llu", (uint8_t *)&v6, 0x20u);
  }
  return v3;
}

id sub_10020F7F0(uint64_t a1)
{
  [*(id *)(*(void *)(a1 + 32) + 16) removeObject:*(void *)(a1 + 40)];
  id v2 = *(void **)(a1 + 32);
  return _[v2 _listeningEdgeDetectorIDsChanged];
}

id sub_10020F968(uint64_t a1)
{
  [*(id *)(*(void *)(a1 + 32) + 16) addObject:*(void *)(a1 + 40)];
  id v2 = *(void **)(a1 + 32);
  return _[v2 _listeningEdgeDetectorIDsChanged];
}

void sub_1002100C8(uint64_t a1)
{
  dispatch_source_cancel(*(dispatch_source_t *)(*(void *)(a1 + 32) + 880));
  uint64_t v2 = *(void *)(a1 + 32);
  unint64_t v3 = *(void **)(v2 + 880);
  *(void *)(v2 + 880) = 0;

  if (([*(id *)(a1 + 32) _speechDelegateHasReceivedPartialResult] & 1) == 0)
  {
    BOOL v4 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      int v7 = 136315138;
      __int16 v8 = "-[ADCommandCenter(AcousticId) _saAISearchCompleted:completion:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%s Canceling speech request because we have an acoustic identification but no partial results", (uint8_t *)&v7, 0xCu);
    }
    int v5 = *(void **)(a1 + 32);
    int v6 = [v5 _speechDelegate];
    [v5 cancelSpeechForDelegate:v6];
  }
}

uint64_t sub_1002108BC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

id sub_100210D10(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _handleMessage:*(void *)(a1 + 40) messageType:*(void *)(a1 + 48) fromDeviceWithIdentifier:*(void *)(a1 + 56) completion:*(void *)(a1 + 64)];
}

void sub_100210F14(void *a1, void *a2)
{
  id v3 = a2;
  if (objc_opt_respondsToSelector()) {
    [v3 requestLifecycleObserver:a1[4] requestDidEndWithInfo:a1[5] origin:a1[7] client:a1[6]];
  }
}

void sub_10021119C(void *a1, void *a2)
{
  id v3 = a2;
  if (objc_opt_respondsToSelector()) {
    [v3 requestLifecycleObserver:a1[4] requestWasCancelledWithInfo:a1[5] forReason:a1[8] origin:a1[9] client:a1[6] successorInfo:a1[7]];
  }
}

void sub_1002113F8(void *a1, void *a2)
{
  id v3 = a2;
  if (objc_opt_respondsToSelector()) {
    [v3 requestLifecycleObserver:a1[4] requestWillBeginWithInfo:a1[5] origin:a1[7] client:a1[6]];
  }
}

void sub_1002115A8(id a1)
{
  uint64_t v1 = objc_alloc_init(ADRequestLifecycleObserver);
  uint64_t v2 = qword_100585EE0;
  qword_100585EE0 = (uint64_t)v1;
  _objc_release_x1(v1, v2);
}

id sub_1002118CC(uint64_t a1, void *a2)
{
  return _[a2 setGenerationsByDataType:*(void *)(a1 + 32)];
}

void sub_10021303C(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 56);
  id v4 = a2;
  [v4 setTimestamp:v3];
  [v4 setReason:*(void *)(a1 + 32)];
  [v4 setEffectiveDate:*(void *)(a1 + 40)];
  [v4 setExpirationDuration:*(double *)(a1 + 64)];
  [v4 setUserInfo:*(void *)(a1 + 48)];
}

id sub_100213B5C(uint64_t a1, void *a2)
{
  return [a2 setExpirationDuration:*(double *)(a1 + 32)];
}

void sub_100213F94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100213FB8(uint64_t a1, uint64_t a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _updateRingerMuteState:a2];
}

uint64_t sub_1002141A4(uint64_t result)
{
  *(void *)(*(void *)(*(void *)(result + 40) + 8) + 24) = *(void *)(*(void *)(result + 32) + 16);
  return result;
}

id sub_100214304(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  id v2 = [v1 _ringerStateToken];
  return [v1 _updateRingerMuteState:v2];
}

void sub_100214398(id a1)
{
  uint64_t v1 = objc_alloc_init(ADSystemMuteModeObserver);
  uint64_t v2 = qword_100585EE8;
  qword_100585EE8 = (uint64_t)v1;
  _objc_release_x1(v1, v2);
}

void sub_10021457C(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v3 = *(void **)(a1 + 32);
    id v4 = a2;
    id v5 = objc_alloc_init((Class)SISchemaLocation);
    [v3 setLocation:v5];

    int v6 = [*(id *)(a1 + 32) location];
    [v4 coordinate];
    *(float *)&double v7 = v7;
    [v6 setLatitude:v7];

    __int16 v8 = [*(id *)(a1 + 32) location];
    [v4 coordinate];
    *(float *)&double v10 = v9;
    [v8 setLongitude:v10];

    unint64_t v11 = [*(id *)(a1 + 32) location];
    [v4 horizontalAccuracy];
    double v13 = v12;

    *(float *)&double v14 = v13;
    [v11 setHorizontalAccuracyInMeters:v14];
  }
  uint64_t v15 = *(NSObject **)(*(void *)(a1 + 40) + 8);
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  void v16[2] = sub_1002146E8;
  v16[3] = &unk_10050E188;
  id v17 = *(id *)(a1 + 32);
  id v18 = *(id *)(a1 + 48);
  dispatch_async(v15, v16);
}

void sub_1002146E8(uint64_t a1)
{
  id v4 = +[ADPreferences sharedPreferences];
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = [v4 countryCode];
  [v2 setCountryCode:v3];

  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_100214954(uint64_t a1, void *a2)
{
  if (a2)
  {
    id v3 = a2;
    id v4 = +[AFAnalytics sharedAnalytics];
    [v4 logInstrumentation:v3 machAbsoluteTime:*(void *)(a1 + 40) turnIdentifier:*(void *)(a1 + 32)];
  }
}

void sub_100215124(void *a1, void *a2)
{
  uint64_t v3 = a1[4];
  id v4 = a2;
  [v4 setPeerInfo:v3];
  [v4 setContextIdentifier:a1[5]];
  [v4 setProximity:a1[8]];
  [v4 setCommandRelayProxyIdentifier:a1[6]];
  [v4 setError:a1[7]];
}

id sub_10021635C(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 16) deleteAllMetrics];
}

void sub_100216494(uint64_t a1)
{
  uint64_t v1 = *(void **)(*(void *)(a1 + 32) + 16);
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  v2[2] = sub_100216524;
  v2[3] = &unk_100507010;
  id v3 = *(id *)(a1 + 40);
  [v1 fetchNextMetricsUsingBlock:v2];
}

void sub_100216524(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  [v5 setOfflineIdentifier:a3];
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

id sub_1002166C0(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 16) deleteMetricsWithOfflineIdentifier:*(void *)(a1 + 40)];
}

void sub_100216804(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 40);
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 16);
  uint64_t v3 = [v1 offlineIdentifier];
  id v5 = (id)v3;
  if (v3)
  {
    [v2 insertMetrics:v1 withOfflineIdentifier:v3];
  }
  else
  {
    id v4 = SiriCoreUUIDStringCreate();
    [v2 insertMetrics:v1 withOfflineIdentifier:v4];
  }
}

uint64_t sub_1002169A0(uint64_t a1)
{
  [(id)objc_opt_class() _deleteLegacyOfflineMetricsFiles];
  uint64_t v2 = [(id)objc_opt_class() _buildOfflineMetricsMap];
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void *)(v3 + 16);
  *(void *)(v3 + 16) = v2;
  return _objc_release_x1(v2, v4);
}

id sub_100219024(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    uint64_t v3 = (*(void (**)(void))(v2 + 16))();
  }
  else
  {
    uint64_t v3 = 0;
  }
  if (objc_opt_respondsToSelector())
  {
    [v3 setTimestamp:*(void *)(a1 + 40)];
  }
  else
  {
    uint64_t v4 = AFSiriLogContextAnalysis;
    if (os_log_type_enabled(AFSiriLogContextAnalysis, OS_LOG_TYPE_ERROR))
    {
      uint64_t v6 = *(unsigned int *)(a1 + 48);
      int v7 = 136315394;
      __int16 v8 = "-[AFDiagnostics _submitMetricWithIdentifier:hotShipIdentifier:hotShipTimestamp:generation:]_block_invoke";
      __int16 v9 = 2048;
      uint64_t v10 = v6;
      _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "%s Hot-ship metric 0x%lx does not respond to -setTimestamp:. Will not set timestamp.", (uint8_t *)&v7, 0x16u);
    }
  }
  return v3;
}

id sub_1002193F0(void *a1)
{
  uint64_t v2 = (void *)a1[4];
  uint64_t v1 = a1[5];
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100219480;
  v4[3] = &unk_100507228;
  void v4[4] = v2;
  void v4[5] = a1[6];
  return [v2 _submitMetricWithIdentifier:1769481 hotShipIdentifier:1769490 hotShipTimestamp:v1 generation:v4];
}

id sub_100219480(uint64_t a1)
{
  uint64_t v2 = objc_opt_new();
  uint64_t v3 = [*(id *)(a1 + 32) _voiceRecordingEndTime];
  uint64_t v4 = v3;
  if (v3)
  {
    [v3 doubleValue];
    objc_msgSend(v2, "setDurationFromVoiceRecordingEnd:", objc_msgSend(*(id *)(a1 + 32), "_durationInMillisecondsFromTime:toTime:"));
  }
  else
  {
    id v5 = AFSiriLogContextAnalysis;
    if (os_log_type_enabled(AFSiriLogContextAnalysis, OS_LOG_TYPE_ERROR))
    {
      int v10 = 136315138;
      unint64_t v11 = "-[AFDiagnostics logSpeechRecognized]_block_invoke_2";
      _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "%s Received -logSpeechRecognized with no corresponding -logVoiceRecordingEnd. Unable to determine duration since voice recording completed.", (uint8_t *)&v10, 0xCu);
    }
  }
  uint64_t v6 = [*(id *)(a1 + 32) _voiceSendEndTime];
  int v7 = v6;
  if (v6)
  {
    [v6 doubleValue];
    objc_msgSend(v2, "setDurationFromVoiceSendEnd:", objc_msgSend(*(id *)(a1 + 32), "_durationInMillisecondsFromTime:toTime:"));
  }
  else
  {
    __int16 v8 = AFSiriLogContextAnalysis;
    if (os_log_type_enabled(AFSiriLogContextAnalysis, OS_LOG_TYPE_ERROR))
    {
      int v10 = 136315138;
      unint64_t v11 = "-[AFDiagnostics logSpeechRecognized]_block_invoke";
      _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "%s Received -logSpeechRecognized with no corresponding -logVoiceSendEnd. Unable to determine duration since voice send completed.", (uint8_t *)&v10, 0xCu);
    }
  }

  return v2;
}

void sub_100219778(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10021981C;
  v3[3] = &unk_100507200;
  uint64_t v2 = *(void **)(a1 + 32);
  id v4 = *(id *)(a1 + 40);
  [v2 _submitMetricWithIdentifier:1769480 hotShipIdentifier:1769489 hotShipTimestamp:v1 generation:v3];
}

id sub_10021981C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) metricValue];
}

id sub_100219964(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = +[NSNumber numberWithDouble:*(double *)(a1 + 40)];
  [v2 _setVoiceSendEndTime:v3];

  id v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 48);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  void v7[2] = sub_100219A34;
  v7[3] = &unk_1005071D8;
  void v7[4] = v4;
  void v7[5] = *(void *)(a1 + 40);
  return [v4 _submitMetricWithIdentifier:1769477 hotShipIdentifier:1769486 hotShipTimestamp:v5 generation:v7];
}

id sub_100219A34(uint64_t a1)
{
  uint64_t v2 = objc_opt_new();
  uint64_t v3 = [*(id *)(a1 + 32) _voiceSendStartTime];
  id v4 = v3;
  if (v3)
  {
    [v3 doubleValue];
    objc_msgSend(v2, "setDuration:", objc_msgSend(*(id *)(a1 + 32), "_durationInMillisecondsFromTime:toTime:"));
  }
  else
  {
    uint64_t v5 = AFSiriLogContextAnalysis;
    if (os_log_type_enabled(AFSiriLogContextAnalysis, OS_LOG_TYPE_ERROR))
    {
      int v7 = 136315138;
      __int16 v8 = "-[AFDiagnostics logVoiceSendEnd]_block_invoke_2";
      _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "%s Received -logVoiceSendEnd with no corresponding -logVoiceSendStart. Unable to determine how long voice transfer lasted.", (uint8_t *)&v7, 0xCu);
    }
  }

  return v2;
}

id sub_100219C8C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = +[NSNumber numberWithDouble:*(double *)(a1 + 40)];
  [v2 _setVoiceSendStartTime:v3];

  id v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 48);
  return [v4 _submitMetricWithIdentifier:1769476 hotShipIdentifier:1769485 hotShipTimestamp:v5 generation:&stru_1005071B0];
}

AWDSiriVoiceSendStart *__cdecl sub_100219D18(id a1)
{
  uint64_t v1 = objc_opt_new();
  return (AWDSiriVoiceSendStart *)v1;
}

id sub_100219E88(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = +[NSNumber numberWithDouble:*(double *)(a1 + 40)];
  [v2 _setVoiceRecordingEndTime:v3];

  id v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 48);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  void v7[2] = sub_100219F58;
  v7[3] = &unk_100507170;
  void v7[4] = v4;
  void v7[5] = *(void *)(a1 + 40);
  return [v4 _submitMetricWithIdentifier:1769475 hotShipIdentifier:1769484 hotShipTimestamp:v5 generation:v7];
}

id sub_100219F58(uint64_t a1)
{
  uint64_t v2 = objc_opt_new();
  uint64_t v3 = [*(id *)(a1 + 32) _voiceRecordingStartTime];
  id v4 = v3;
  if (v3)
  {
    [v3 doubleValue];
    objc_msgSend(v2, "setDuration:", objc_msgSend(*(id *)(a1 + 32), "_durationInMillisecondsFromTime:toTime:"));
  }
  else
  {
    uint64_t v5 = AFSiriLogContextAnalysis;
    if (os_log_type_enabled(AFSiriLogContextAnalysis, OS_LOG_TYPE_ERROR))
    {
      int v7 = 136315138;
      __int16 v8 = "-[AFDiagnostics logVoiceRecordingEnd]_block_invoke_2";
      _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "%s Received -logVoiceRecordingEnd with no corresponding -logVoiceRecordingStart. Unable to determine how long voice recording lasted.", (uint8_t *)&v7, 0xCu);
    }
  }

  return v2;
}

id sub_10021A1B0(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = +[NSNumber numberWithDouble:*(double *)(a1 + 40)];
  [v2 _setVoiceRecordingStartTime:v3];

  id v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 48);
  return [v4 _submitMetricWithIdentifier:1769474 hotShipIdentifier:1769483 hotShipTimestamp:v5 generation:&stru_100507148];
}

AWDSiriVoiceRecordingStart *__cdecl sub_10021A23C(id a1)
{
  uint64_t v1 = objc_opt_new();
  return (AWDSiriVoiceRecordingStart *)v1;
}

void sub_10021A3C0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_10021A474;
  v6[3] = &unk_100507108;
  uint64_t v3 = *(void **)(a1 + 32);
  id v4 = *(id *)(a1 + 40);
  uint64_t v5 = *(void *)(a1 + 56);
  id v7 = v4;
  uint64_t v8 = v5;
  [v3 _submitMetricWithIdentifier:1769479 hotShipIdentifier:1769488 hotShipTimestamp:v2 generation:v6];
}

id sub_10021A474(uint64_t a1)
{
  uint64_t v2 = objc_opt_new();
  uint64_t v3 = [*(id *)(a1 + 32) domain];
  [v2 setErrorDomain:v3];

  objc_msgSend(v2, "setErrorCode:", objc_msgSend(*(id *)(a1 + 32), "code"));
  [v2 setConnectionType:*(unsigned int *)(a1 + 40)];
  return v2;
}

id sub_10021A644(void *a1)
{
  uint64_t v2 = (void *)a1[4];
  uint64_t v1 = a1[5];
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  void v5[2] = sub_10021A6DC;
  v5[3] = &unk_1005070B8;
  uint64_t v3 = a1[6];
  void v5[4] = v2;
  void v5[5] = v3;
  void v5[6] = a1[7];
  return [v2 _submitMetricWithIdentifier:1769478 hotShipIdentifier:1769487 hotShipTimestamp:v1 generation:v5];
}

id sub_10021A6DC(uint64_t a1)
{
  uint64_t v2 = objc_opt_new();
  [v2 setConnectionType:*(unsigned int *)(a1 + 40)];
  uint64_t v3 = [*(id *)(a1 + 32) _connectionStartTime];
  id v4 = v3;
  if (v3)
  {
    [v3 doubleValue];
    objc_msgSend(v2, "setDuration:", objc_msgSend(*(id *)(a1 + 32), "_durationInMillisecondsFromTime:toTime:"));
  }
  else
  {
    uint64_t v5 = AFSiriLogContextAnalysis;
    if (os_log_type_enabled(AFSiriLogContextAnalysis, OS_LOG_TYPE_ERROR))
    {
      int v7 = 136315138;
      uint64_t v8 = "-[AFDiagnostics logConnectionOpenWithConnectionType:]_block_invoke_2";
      _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "%s Received -logConnectionOpenWithConnectionType: with no corresponding -logConnectionStart. Unable to determine how long it took to open the connection.", (uint8_t *)&v7, 0xCu);
    }
  }

  return v2;
}

id sub_10021A93C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = +[NSNumber numberWithDouble:*(double *)(a1 + 40)];
  [v2 _setConnectionStartTime:v3];

  id v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 48);
  return [v4 _submitMetricWithIdentifier:1769473 hotShipIdentifier:1769482 hotShipTimestamp:v5 generation:&stru_100507090];
}

AWDSiriServerConnectionStart *__cdecl sub_10021A9C4(id a1)
{
  uint64_t v1 = objc_opt_new();
  return (AWDSiriServerConnectionStart *)v1;
}

uint64_t sub_10021AB48(uint64_t a1)
{
  id v2 = [objc_alloc((Class)AWDServerConnection) initWithComponentId:27 andBlockOnConfiguration:0];
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void *)(v3 + 8);
  *(void *)(v3 + _Block_object_dispose(&STACK[0x220], 8) = v2;
  return _objc_release_x1(v2, v4);
}

void sub_10021ABF0(id a1)
{
  uint64_t v1 = objc_alloc_init(AFDiagnostics);
  uint64_t v2 = qword_100585EF8;
  qword_100585EF8 = (uint64_t)v1;
  _objc_release_x1(v1, v2);
}

void sub_10021BFBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10021BFE0(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v23 = 0;
  uint64_t v24 = &v23;
  uint64_t v25 = 0x2020000000;
  char v26 = 0;
  unint64_t v11 = *(NSObject **)(*(void *)(a1 + 32) + 8);
  uint64_t v15 = _NSConcreteStackBlock;
  uint64_t v16 = 3221225472;
  id v17 = sub_10021C134;
  id v18 = &unk_1005072F0;
  id v12 = v7;
  id v19 = v12;
  id v13 = v8;
  uint64_t v14 = *(void *)(a1 + 32);
  id v20 = v13;
  uint64_t v21 = v14;
  __int16 v22 = &v23;
  dispatch_async(v11, &v15);
  if (*((unsigned char *)v24 + 24)) {
    objc_msgSend(WeakRetained, "clearUnsavedRecords", v15, v16, v17, v18, v19);
  }

  _Block_object_dispose(&v23, 8);
}

void sub_10021C11C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10021C134(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 40);
    uint64_t v4 = AFSiriLogContextDaemon;
    BOOL v5 = os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR);
    if (v3)
    {
      if (v5)
      {
        int v7 = 136315394;
        id v8 = "-[ADCloudKitSharedZoneUpdater _retryRecordSave]_block_invoke_2";
        __int16 v9 = 2112;
        uint64_t v10 = v2;
        _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "%s Partial failure unhandled. File a bug for error (%@).", (uint8_t *)&v7, 0x16u);
      }
      *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = 1;
    }
    else
    {
      if (v5)
      {
        int v7 = 136315394;
        id v8 = "-[ADCloudKitSharedZoneUpdater _retryRecordSave]_block_invoke";
        __int16 v9 = 2112;
        uint64_t v10 = v2;
        _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "%s Error even during retry (%@)", (uint8_t *)&v7, 0x16u);
      }
      [*(id *)(a1 + 48) _startRetryTimer];
    }
  }
  else
  {
    uint64_t v6 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      int v7 = 136315138;
      id v8 = "-[ADCloudKitSharedZoneUpdater _retryRecordSave]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "%s Success in retry", (uint8_t *)&v7, 0xCu);
    }
    *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = 1;
  }
}

id sub_10021C3DC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(v2 + 40);
  *(void *)(v2 + 40) = 0;

  uint64_t v4 = *(void **)(a1 + 32);
  return _[v4 _retryRecordSave];
}

void sub_10021C4F0(uint64_t a1)
{
  uint64_t v2 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)long long buf = 136315138;
    id v36 = "-[ADCloudKitSharedZoneUpdater fetchValuesForKeysFromSharedStore:withQOS:completion:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s ", buf, 0xCu);
  }
  uint64_t v3 = *(void **)(a1 + 32);
  uint64_t v4 = [*(id *)(*(void *)(a1 + 40) + 56) zone];
  BOOL v5 = [v4 zoneID];
  uint64_t v6 = sub_10010B3C8(v3, v5);

  int v7 = [v6 allValues];
  id v8 = +[NSMutableDictionary dictionaryWithCapacity:](NSMutableDictionary, "dictionaryWithCapacity:", [v6 count]);
  long long v30 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  id v9 = v6;
  id v10 = [v9 countByEnumeratingWithState:&v30 objects:v34 count:16];
  if (v10)
  {
    id v11 = v10;
    uint64_t v12 = *(void *)v31;
    do
    {
      for (i = 0; i != v11; i = (char *)i + 1)
      {
        if (*(void *)v31 != v12) {
          objc_enumerationMutation(v9);
        }
        uint64_t v14 = *(void *)(*((void *)&v30 + 1) + 8 * i);
        uint64_t v15 = [v9 objectForKey:v14];
        [v8 setObject:v14 forKey:v15];
      }
      id v11 = [v9 countByEnumeratingWithState:&v30 objects:v34 count:16];
    }
    while (v11);
  }

  id v16 = [objc_alloc((Class)CKFetchRecordsOperation) initWithRecordIDs:v7];
  __int16 v22 = _NSConcreteStackBlock;
  uint64_t v23 = 3221225472;
  uint64_t v24 = sub_10021C7E0;
  uint64_t v25 = &unk_100507B88;
  id v26 = *(id *)(a1 + 32);
  id v29 = *(id *)(a1 + 48);
  id v17 = v7;
  id v27 = v17;
  id v18 = v8;
  id v28 = v18;
  [v16 setFetchRecordsCompletionBlock:&v22];
  objc_msgSend(v16, "setQualityOfService:", *(void *)(a1 + 56), v22, v23, v24, v25);
  uint64_t v19 = *(void *)(a1 + 40);
  id v20 = *(void **)(v19 + 24);
  if (*(unsigned char *)(v19 + 16)) {
    [v20 privateCloudDatabase];
  }
  else {
  uint64_t v21 = [v20 sharedCloudDatabase];
  }
  [v21 addOperation:v16];
}

void sub_10021C7E0(uint64_t a1, void *a2, void *a3)
{
  id v23 = a2;
  id v5 = a3;
  if (v5)
  {
    uint64_t v6 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      uint64_t v21 = *(void *)(a1 + 32);
      *(_DWORD *)long long buf = 136315394;
      long long v30 = "-[ADCloudKitSharedZoneUpdater fetchValuesForKeysFromSharedStore:withQOS:completion:]_block_invoke";
      __int16 v31 = 2112;
      uint64_t v32 = v21;
      _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "%s Failed to fetch values for keys: (%@)", buf, 0x16u);
    }
    if (sub_10031120C(v5))
    {
      int v7 = AFSiriLogContextDaemon;
      if (!os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
      {
LABEL_20:
        (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
        goto LABEL_23;
      }
      *(_DWORD *)long long buf = 136315138;
      long long v30 = "-[ADCloudKitSharedZoneUpdater fetchValuesForKeysFromSharedStore:withQOS:completion:]_block_invoke";
    }
    else
    {
      if (!sub_100310E18(v5)) {
        goto LABEL_20;
      }
      int v7 = AFSiriLogContextDaemon;
      if (!os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR)) {
        goto LABEL_20;
      }
      *(_DWORD *)long long buf = 136315138;
      long long v30 = "-[ADCloudKitSharedZoneUpdater fetchValuesForKeysFromSharedStore:withQOS:completion:]_block_invoke";
    }
    _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "%s Keychain sync error", buf, 0xCu);
    goto LABEL_20;
  }
  __int16 v22 = 0;
  id v8 = objc_alloc_init((Class)NSMutableDictionary);
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  uint64_t v9 = a1;
  id v10 = *(id *)(a1 + 40);
  id v11 = [v10 countByEnumeratingWithState:&v24 objects:v28 count:16];
  if (v11)
  {
    id v12 = v11;
    id v13 = 0;
    uint64_t v14 = *(void *)v25;
    do
    {
      for (i = 0; i != v12; i = (char *)i + 1)
      {
        if (*(void *)v25 != v14) {
          objc_enumerationMutation(v10);
        }
        uint64_t v16 = *(void *)(*((void *)&v24 + 1) + 8 * i);
        id v17 = objc_msgSend(v23, "objectForKey:", v16, v22);
        id v18 = v17;
        if (v17)
        {
          uint64_t v19 = sub_10010B5AC(v17);
          id v20 = [*(id *)(v9 + 48) objectForKey:v16];
          [v8 setObject:v19 forKey:v20];
        }
        else
        {
          +[AFError errorWithCode:4012];
          id v13 = v19 = v13;
        }
      }
      id v12 = [v10 countByEnumeratingWithState:&v24 objects:v28 count:16];
    }
    while (v12);
  }
  else
  {
    id v13 = 0;
  }

  (*(void (**)(void))(*(void *)(v9 + 56) + 16))();
  id v5 = v22;
LABEL_23:
}

void sub_10021CBE4(uint64_t a1)
{
  uint64_t v2 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)long long buf = 136315138;
    long long v24 = "-[ADCloudKitSharedZoneUpdater fetchValueForKeyFromSharedStore:withQOS:completion:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s ", buf, 0xCu);
  }
  uint64_t v3 = [*(id *)(*(void *)(a1 + 32) + 56) zone];
  uint64_t v4 = [v3 zoneID];

  if (v4)
  {
    id v5 = sub_10010B538(*(void **)(a1 + 40), v4);
    id v6 = objc_alloc((Class)CKFetchRecordsOperation);
    __int16 v22 = v5;
    int v7 = +[NSArray arrayWithObjects:&v22 count:1];
    id v8 = [v6 initWithRecordIDs:v7];

    uint64_t v15 = _NSConcreteStackBlock;
    uint64_t v16 = 3221225472;
    id v17 = sub_10021CE8C;
    id v18 = &unk_1005072C8;
    id v19 = *(id *)(a1 + 40);
    id v21 = *(id *)(a1 + 48);
    id v9 = v5;
    id v20 = v9;
    [v8 setFetchRecordsCompletionBlock:&v15];
    objc_msgSend(v8, "setQualityOfService:", *(void *)(a1 + 56), v15, v16, v17, v18);
    uint64_t v10 = *(void *)(a1 + 32);
    id v11 = *(void **)(v10 + 24);
    if (*(unsigned char *)(v10 + 16)) {
      [v11 privateCloudDatabase];
    }
    else {
    uint64_t v14 = [v11 sharedCloudDatabase];
    }
    [v14 addOperation:v8];
  }
  else
  {
    id v12 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136315138;
      long long v24 = "-[ADCloudKitSharedZoneUpdater fetchValueForKeyFromSharedStore:withQOS:completion:]_block_invoke";
      _os_log_error_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "%s Zone ID is nil. Bailing.", buf, 0xCu);
    }
    uint64_t v13 = *(void *)(a1 + 48);
    id v9 = +[AFError errorWithCode:4021 description:@"Zone ID is nil."];
    (*(void (**)(uint64_t, void, id))(v13 + 16))(v13, 0, v9);
  }
}

void sub_10021CE8C(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    int v7 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      uint64_t v14 = a1[4];
      int v15 = 136315394;
      uint64_t v16 = "-[ADCloudKitSharedZoneUpdater fetchValueForKeyFromSharedStore:withQOS:completion:]_block_invoke";
      __int16 v17 = 2112;
      uint64_t v18 = v14;
      _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "%s Failed to fetch value for key: (%@)", (uint8_t *)&v15, 0x16u);
    }
    if (sub_10031120C(v6))
    {
      id v8 = AFSiriLogContextDaemon;
      if (!os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
      {
LABEL_11:
        (*(void (**)(void))(a1[6] + 16))();
        goto LABEL_14;
      }
      int v15 = 136315138;
      uint64_t v16 = "-[ADCloudKitSharedZoneUpdater fetchValueForKeyFromSharedStore:withQOS:completion:]_block_invoke";
    }
    else
    {
      if (!sub_100310E18(v6)) {
        goto LABEL_11;
      }
      id v8 = AFSiriLogContextDaemon;
      if (!os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR)) {
        goto LABEL_11;
      }
      int v15 = 136315138;
      uint64_t v16 = "-[ADCloudKitSharedZoneUpdater fetchValueForKeyFromSharedStore:withQOS:completion:]_block_invoke";
    }
    _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "%s Keychain sync error", (uint8_t *)&v15, 0xCu);
    goto LABEL_11;
  }
  id v9 = [v5 objectForKey:a1[5]];
  uint64_t v10 = v9;
  if (v9)
  {
    id v11 = sub_10010B5AC(v9);
    id v12 = *(void (**)(void))(a1[6] + 16);
  }
  else
  {
    uint64_t v13 = a1[6];
    id v11 = +[AFError errorWithCode:4012];
    id v12 = *(void (**)(void))(v13 + 16);
  }
  v12();

LABEL_14:
}

void sub_10021D1BC(uint64_t a1)
{
  uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 56) zone];
  uint64_t v3 = [v2 zoneID];

  if (v3)
  {
    id v4 = *(id *)(a1 + 40);
    long long v26 = v3;
    id v5 = v3;
    id v6 = objc_alloc_init((Class)NSMutableDictionary);
    long long v30 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    id v7 = v4;
    id v8 = [v7 countByEnumeratingWithState:&v30 objects:buf count:16];
    if (v8)
    {
      id v9 = v8;
      uint64_t v10 = *(void *)v31;
      do
      {
        for (i = 0; i != v9; i = (char *)i + 1)
        {
          if (*(void *)v31 != v10) {
            objc_enumerationMutation(v7);
          }
          id v12 = *(void **)(*((void *)&v30 + 1) + 8 * i);
          uint64_t v13 = objc_msgSend(v7, "objectForKey:", v12, v26);
          uint64_t v14 = sub_10010B0EC(v12, v13, v5);

          if (v14)
          {
            id v15 = [v12 copy];
            [v6 setObject:v14 forKey:v15];
          }
        }
        id v9 = [v7 countByEnumeratingWithState:&v30 objects:buf count:16];
      }
      while (v9);
    }

    uint64_t v16 = sub_10010B3C8(*(void **)(a1 + 48), v5);
    __int16 v17 = [v16 allValues];
    if ([v6 count] || objc_msgSend(v17, "count"))
    {
      uint64_t v18 = objc_msgSend(v6, "allValues", v26);
      uint64_t v19 = *(void *)(a1 + 32);
      id v20 = *(void **)(v19 + 24);
      int v21 = *(unsigned __int8 *)(v19 + 16);
      v27[0] = _NSConcreteStackBlock;
      v27[1] = 3221225472;
      v27[2] = sub_10021D564;
      v27[3] = &unk_1005072A0;
      void v27[4] = v19;
      id v28 = v6;
      id v29 = *(id *)(a1 + 56);
      sub_10010B6C8(v18, v17, 25, v20, v21, 0, v27);
    }
    else
    {
      long long v24 = AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)long long buf = 136315138;
        long long v35 = "-[ADCloudKitSharedZoneUpdater addDictionaryToSharedStore:recordKeysForDeletion:completion:]_block_invoke";
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "%s Zero records created, and zero records deleted", buf, 0xCu);
      }
      uint64_t v25 = *(void *)(a1 + 56);
      if (v25) {
        (*(void (**)(uint64_t, void))(v25 + 16))(v25, 0);
      }
    }

    uint64_t v3 = v26;
    goto LABEL_19;
  }
  __int16 v22 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 136315138;
    long long v35 = "-[ADCloudKitSharedZoneUpdater addDictionaryToSharedStore:recordKeysForDeletion:completion:]_block_invoke";
    _os_log_debug_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "%s zoneID is nil. Abort", buf, 0xCu);
  }
  uint64_t v23 = *(void *)(a1 + 56);
  if (v23)
  {
    id v6 = +[AFError errorWithCode:4020];
    (*(void (**)(uint64_t, id))(v23 + 16))(v23, v6);
LABEL_19:
  }
}

void sub_10021D564(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(NSObject **)(v4 + 8);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  void v7[2] = sub_10021D634;
  v7[3] = &unk_10050E228;
  id v8 = v3;
  uint64_t v9 = v4;
  id v10 = *(id *)(a1 + 40);
  id v11 = *(id *)(a1 + 48);
  id v6 = v3;
  dispatch_async(v5, v7);
}

uint64_t sub_10021D634(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = AFSiriLogContextDaemon;
  if (v2)
  {
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      int v5 = 136315394;
      id v6 = "-[ADCloudKitSharedZoneUpdater addDictionaryToSharedStore:recordKeysForDeletion:completion:]_block_invoke_2";
      __int16 v7 = 2112;
      uint64_t v8 = v2;
      _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "%s Failed to save key,value pairs with error (%@)", (uint8_t *)&v5, 0x16u);
    }
    [*(id *)(*(void *)(a1 + 40) + 32) addEntriesFromDictionary:*(void *)(a1 + 48)];
    [*(id *)(a1 + 40) _notifyFailure:*(void *)(a1 + 32)];
  }
  else if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    int v5 = 136315138;
    id v6 = "-[ADCloudKitSharedZoneUpdater addDictionaryToSharedStore:recordKeysForDeletion:completion:]_block_invoke";
    _os_log_debug_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "%s Successfully uploaded", (uint8_t *)&v5, 0xCu);
  }
  uint64_t result = *(void *)(a1 + 56);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, *(void *)(a1 + 32));
  }
  return result;
}

void sub_10021D86C(uint64_t a1)
{
  uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 56) zone];
  id v3 = [v2 zoneID];

  uint64_t v4 = sub_10010B0EC(*(void **)(a1 + 40), *(void **)(a1 + 48), v3);
  id v15 = v4;
  int v5 = +[NSArray arrayWithObjects:&v15 count:1];
  uint64_t v6 = *(void *)(a1 + 32);
  __int16 v7 = *(void **)(v6 + 24);
  int v8 = *(unsigned __int8 *)(v6 + 16);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_10021D9F4;
  v10[3] = &unk_100507278;
  void v10[4] = v6;
  id v11 = *(id *)(a1 + 40);
  id v12 = *(id *)(a1 + 48);
  id v13 = v4;
  id v14 = *(id *)(a1 + 56);
  id v9 = v4;
  sub_10010B6C8(v5, 0, 17, v7, v8, 0, v10);
}

void sub_10021D9F4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(NSObject **)(*(void *)(a1 + 32) + 8);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_10021DAF0;
  v8[3] = &unk_100508278;
  id v9 = v3;
  id v10 = *(id *)(a1 + 40);
  id v5 = *(id *)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 32);
  id v11 = v5;
  uint64_t v12 = v6;
  id v13 = *(id *)(a1 + 56);
  id v14 = *(id *)(a1 + 64);
  id v7 = v3;
  dispatch_async(v4, v8);
}

uint64_t sub_10021DAF0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = AFSiriLogContextDaemon;
  if (v2)
  {
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      uint64_t v8 = *(void *)(a1 + 40);
      uint64_t v9 = *(void *)(a1 + 48);
      int v10 = 136315906;
      id v11 = "-[ADCloudKitSharedZoneUpdater addKeyToSharedStore:value:completion:]_block_invoke_3";
      __int16 v12 = 2112;
      uint64_t v13 = v8;
      __int16 v14 = 2112;
      uint64_t v15 = v9;
      __int16 v16 = 2112;
      uint64_t v17 = v2;
      _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "%s Failed to save key (%@) value (%@) with error (%@)", (uint8_t *)&v10, 0x2Au);
    }
    uint64_t v4 = *(void *)(a1 + 64);
    id v5 = *(void **)(*(void *)(a1 + 56) + 32);
    id v6 = [*(id *)(a1 + 40) copy];
    [v5 setObject:v4 forKey:v6];

    [*(id *)(a1 + 56) _notifyFailure:*(void *)(a1 + 32)];
  }
  else if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    int v10 = 136315138;
    id v11 = "-[ADCloudKitSharedZoneUpdater addKeyToSharedStore:value:completion:]_block_invoke";
    _os_log_debug_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "%s Successfully uploaded", (uint8_t *)&v10, 0xCu);
  }
  uint64_t result = *(void *)(a1 + 72);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, *(void *)(a1 + 32));
  }
  return result;
}

void sub_10021E0F4(uint64_t a1, void *a2, void *a3)
{
  id v8 = a2;
  id v5 = a3;
  objc_opt_class();
  if (objc_opt_isKindOfClass() & 1) != 0 || (objc_opt_class(), (objc_opt_isKindOfClass()))
  {
    id v6 = v5;
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      uint64_t v7 = [v6 stringValue];

      id v6 = (id)v7;
    }
    [*(id *)(a1 + 32) setObject:v6 forKey:v8];
  }
}

uint64_t sub_10021FBB4(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_10021FF98(id a1, AFExperimentConfigurationMutating *a2)
{
  uint64_t v2 = a2;
  [(AFExperimentConfigurationMutating *)v2 setType:1];
  [(AFExperimentConfigurationMutating *)v2 setIdentifier:AFInvocationFeedbacksExperimentConfigurationIdentifier];
  [(AFExperimentConfigurationMutating *)v2 setVersion:@"1.0.0"];
  [(AFExperimentConfigurationMutating *)v2 setSalt:@"DE3507E9-7F1D-4BC9-A2B1-E32FB56890D1"];
  id v3 = +[AFExperimentGroup newWithBuilder:&stru_1005073C0];
  [(AFExperimentConfigurationMutating *)v2 setControlGroup:v3];

  id v4 = +[AFExperimentGroup newWithBuilder:&stru_1005073E0];
  v9[0] = v4;
  id v5 = +[AFExperimentGroup newWithBuilder:&stru_100507400];
  v9[1] = v5;
  id v6 = +[AFExperimentGroup newWithBuilder:&stru_100507420];
  v9[2] = v6;
  id v7 = +[AFExperimentGroup newWithBuilder:&stru_100507440];
  v9[3] = v7;
  id v8 = +[NSArray arrayWithObjects:v9 count:4];
  [(AFExperimentConfigurationMutating *)v2 setExperimentGroups:v8];
}

void sub_100220104(id a1, AFExperimentGroupMutating *a2)
{
  uint64_t v2 = a2;
  [(AFExperimentGroupMutating *)v2 setIdentifier:@"phase_four"];
  [(AFExperimentGroupMutating *)v2 setAllocation:0];
  uint64_t v4 = AFInvocationFeedbacksExperimentGroupPropertyKeyFeatureGroups;
  id v5 = &off_100523990;
  id v3 = +[NSDictionary dictionaryWithObjects:&v5 forKeys:&v4 count:1];
  [(AFExperimentGroupMutating *)v2 setProperties:v3];
}

void sub_1002201C0(id a1, AFExperimentGroupMutating *a2)
{
  uint64_t v2 = a2;
  [(AFExperimentGroupMutating *)v2 setIdentifier:@"phase_three"];
  [(AFExperimentGroupMutating *)v2 setAllocation:0];
  uint64_t v4 = AFInvocationFeedbacksExperimentGroupPropertyKeyFeatureGroups;
  id v5 = &off_100523978;
  id v3 = +[NSDictionary dictionaryWithObjects:&v5 forKeys:&v4 count:1];
  [(AFExperimentGroupMutating *)v2 setProperties:v3];
}

void sub_10022027C(id a1, AFExperimentGroupMutating *a2)
{
  uint64_t v2 = a2;
  [(AFExperimentGroupMutating *)v2 setIdentifier:@"phase_two"];
  [(AFExperimentGroupMutating *)v2 setAllocation:0];
  uint64_t v4 = AFInvocationFeedbacksExperimentGroupPropertyKeyFeatureGroups;
  id v5 = &off_100523960;
  id v3 = +[NSDictionary dictionaryWithObjects:&v5 forKeys:&v4 count:1];
  [(AFExperimentGroupMutating *)v2 setProperties:v3];
}

void sub_100220338(id a1, AFExperimentGroupMutating *a2)
{
  uint64_t v2 = a2;
  [(AFExperimentGroupMutating *)v2 setIdentifier:@"phase_one"];
  [(AFExperimentGroupMutating *)v2 setAllocation:0];
  uint64_t v4 = AFInvocationFeedbacksExperimentGroupPropertyKeyFeatureGroups;
  id v5 = &off_100523948;
  id v3 = +[NSDictionary dictionaryWithObjects:&v5 forKeys:&v4 count:1];
  [(AFExperimentGroupMutating *)v2 setProperties:v3];
}

void sub_1002203F4(id a1, AFExperimentGroupMutating *a2)
{
  uint64_t v2 = a2;
  [(AFExperimentGroupMutating *)v2 setIdentifier:@"control"];
  [(AFExperimentGroupMutating *)v2 setAllocation:100];
  uint64_t v4 = AFInvocationFeedbacksExperimentGroupPropertyKeyFeatureGroups;
  id v5 = &off_100523930;
  id v3 = +[NSDictionary dictionaryWithObjects:&v5 forKeys:&v4 count:1];
  [(AFExperimentGroupMutating *)v2 setProperties:v3];
}

void sub_1002206B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *sub_1002206D0(void *a1)
{
  v5[0] = 0;
  if (!qword_100585F10)
  {
    v5[1] = _NSConcreteStackBlock;
    void v5[2] = (void *)3221225472;
    v5[3] = sub_100220854;
    void v5[4] = &unk_10050E350;
    void v5[5] = v5;
    long long v6 = off_100507460;
    uint64_t v7 = 0;
    qword_100585F10 = _sl_dlopen();
  }
  uint64_t v2 = (void *)qword_100585F10;
  if (!qword_100585F10)
  {
    a1 = +[NSAssertionHandler currentHandler];
    uint64_t v2 = +[NSString stringWithUTF8String:"void *BulletinBoardLibrary(void)"];
    objc_msgSend(a1, "handleFailureInFunction:file:lineNumber:description:", v2, @"AFBulletin+SANotificationObject.m", 18, @"%s", v5[0]);

    __break(1u);
    goto LABEL_7;
  }
  id v3 = v5[0];
  if (v5[0]) {
LABEL_7:
  }
    free(v3);
  uint64_t result = dlsym(v2, "BBBulletinContentTypeIncomingCall");
  *(void *)(*(void *)(a1[4] + 8) + 24) = result;
  qword_100585F08 = *(void *)(*(void *)(a1[4] + 8) + 24);
  return result;
}

uint64_t sub_100220854()
{
  uint64_t result = _sl_dlopen();
  qword_100585F10 = result;
  return result;
}

void sub_100221228(id a1)
{
  id v1 = objc_alloc_init((Class)AFAnalyticsConnection);
  uint64_t v2 = qword_100585F30;
  qword_100585F30 = (uint64_t)v1;
  _objc_release_x1(v1, v2);
}

uint64_t sub_100221434(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

id sub_1002214DC(uint64_t a1)
{
  return [*(id *)(a1 + 32) _stageEvents:*(void *)(a1 + 40)];
}

id sub_100221580(uint64_t a1)
{
  return [*(id *)(a1 + 32) _stageEvent:*(void *)(a1 + 40)];
}

void sub_10022166C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(NSObject **)(v4 + 8);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  void v7[2] = sub_100221A0C;
  v7[3] = &unk_10050D3C8;
  long long v10 = *(_OWORD *)(a1 + 40);
  id v8 = v3;
  uint64_t v9 = v4;
  id v6 = v3;
  dispatch_async(v5, v7);
}

void sub_100221710(uint64_t a1)
{
  sub_100221770(*(void *)(a1 + 40), *(void *)(a1 + 48), 0);
  id v2 = (id)objc_claimAutoreleasedReturnValue();
  [*(id *)(a1 + 32) _stageEvent:v2];
}

id sub_100221770(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if (v4)
  {
    id v15 = 0;
    id v6 = +[NSJSONSerialization dataWithJSONObject:v4 options:0 error:&v15];
    id v7 = v15;
    if (v7)
    {
      id v8 = AFSiriLogContextAnalytics;
      if (os_log_type_enabled(AFSiriLogContextAnalytics, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 136315650;
        uint64_t v17 = "_AFAnalyticsEventCreate";
        __int16 v18 = 2112;
        id v19 = v4;
        __int16 v20 = 2112;
        id v21 = v7;
        _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "%s Failed to serialize context %@ to JSON due to error %@.", buf, 0x20u);
      }

      id v6 = 0;
    }
    if ([v6 length])
    {
      id v9 = objc_alloc((Class)NSData);
      id v10 = v6;
      id v11 = objc_msgSend(v9, "initWithBytes:length:", objc_msgSend(v10, "bytes"), objc_msgSend(v10, "length"));
      uint64_t v12 = 2;
    }
    else
    {
      id v11 = 0;
      uint64_t v12 = 0;
    }
  }
  else
  {
    id v11 = 0;
    uint64_t v12 = 0;
  }
  id v13 = [objc_alloc((Class)AFAnalyticsEvent) initWithDeliveryStream:0 type:a1 timestamp:AFMachAbsoluteTimeGetNanoseconds() contextDataType:v12 contextData:v11];

  return v13;
}

void sub_100221A0C(uint64_t a1)
{
  sub_100221770(*(void *)(a1 + 48), *(void *)(a1 + 56), *(void **)(a1 + 32));
  id v2 = (id)objc_claimAutoreleasedReturnValue();
  [*(id *)(a1 + 40) _stageEvent:v2];
}

void sub_100221BA0(uint64_t a1)
{
  id v2 = sub_100221CC4(*(void *)(a1 + 48), *(void *)(a1 + 56), *(void **)(a1 + 40));
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = *(NSObject **)(v3 + 8);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_100221E54;
  v6[3] = &unk_10050D3C8;
  long long v9 = *(_OWORD *)(a1 + 48);
  id v7 = v2;
  uint64_t v8 = v3;
  id v5 = v2;
  dispatch_async(v4, v6);
}

void sub_100221C50(uint64_t a1)
{
  sub_100221CC4(*(void *)(a1 + 48), *(void *)(a1 + 56), *(void **)(a1 + 40));
  id v3 = (id)objc_claimAutoreleasedReturnValue();
  id v2 = sub_100221770(*(void *)(a1 + 48), *(void *)(a1 + 56), v3);
  [*(id *)(a1 + 32) _stageEvent:v2];
}

id sub_100221CC4(uint64_t a1, uint64_t a2, void *a3)
{
  id v3 = a3;
  id v4 = v3;
  if (v3)
  {
    id v5 = (*((void (**)(id))v3 + 2))(v3);
  }
  else
  {
    id v5 = 0;
  }

  return v5;
}

void sub_100221E3C(_Unwind_Exception *a1)
{
}

void sub_100221E54(uint64_t a1)
{
  sub_100221770(*(void *)(a1 + 48), *(void *)(a1 + 56), *(void **)(a1 + 32));
  id v2 = (id)objc_claimAutoreleasedReturnValue();
  [*(id *)(a1 + 40) _stageEvent:v2];
  dispatch_group_leave(*(dispatch_group_t *)(*(void *)(a1 + 40) + 16));
}

void sub_100221F94(uint64_t a1)
{
  sub_100221770(*(void *)(a1 + 48), *(void *)(a1 + 56), *(void **)(a1 + 32));
  id v2 = (id)objc_claimAutoreleasedReturnValue();
  [*(id *)(a1 + 40) _stageEvent:v2];
}

void sub_10022208C(uint64_t a1)
{
}

uint64_t sub_1002221D8(uint64_t a1)
{
  id v2 = AFSiriLogContextAnalytics;
  if (os_log_type_enabled(AFSiriLogContextAnalytics, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 8);
    int v5 = 136315394;
    id v6 = "-[AFAnalytics boostQueuedEvents:]_block_invoke";
    __int16 v7 = 2112;
    uint64_t v8 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s Completed boosting event producer queue %@", (uint8_t *)&v5, 0x16u);
  }
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_100222358(uint64_t a1)
{
  NSStringFromClass(*(Class *)(a1 + 48));
  id v3 = (id)objc_claimAutoreleasedReturnValue();
  id v2 = [*(id *)(a1 + 32) _service:1];
  [v2 logInstrumentationOfType:v3 machAbsoluteTime:*(void *)(a1 + 56) turnIdentifier:*(void *)(a1 + 40)];
}

void sub_1002224A0(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) _service:1];
  [v1 endEventsGrouping];
}

void sub_10022255C(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) _service:1];
  [v1 beginEventsGrouping];
}

void sub_1002228B8(uint64_t a1)
{
  id v7 = objc_alloc_init((Class)SISchemaClientEvent);
  id v2 = [*(id *)(a1 + 32) turnID];
  id v3 = objc_alloc_init((Class)SISchemaClientEventMetadata);
  [v7 setEventMetadata:v3];

  id v4 = [v7 eventMetadata];
  [v4 setTurnID:v2];

  [v7 setEventType:*(void *)(a1 + 40)];
  int v5 = [*(id *)(a1 + 48) _service:1];
  id v6 = [v7 data];
  [v5 stageUEIEventData:v6 timestamp:*(void *)(a1 + 56) completion:0];
}

void sub_100223080(id a1)
{
  id v1 = [AFAnalytics alloc];
  id v4 = +[AFInstanceContext currentContext];
  id v2 = [(AFAnalytics *)v1 initWithInstanceContext:v4];
  id v3 = (void *)qword_100585F20;
  qword_100585F20 = (uint64_t)v2;
}

uint64_t sub_100223298(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_1002239FC(id a1)
{
  id v1 = [ADLocationService alloc];
  id v4 = +[ADCommandCenter sharedQueue];
  id v2 = [(ADLocationService *)v1 initWithDispatchQueue:v4];
  id v3 = (void *)qword_100585F40;
  qword_100585F40 = (uint64_t)v2;
}

void sub_100223F5C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v6 = v3;
  if (v3) {
    BOOL v4 = xpc_dictionary_get_BOOL(v3, AFExternalRequestReplyKeyResult);
  }
  else {
    BOOL v4 = 0;
  }
  uint64_t v5 = *(void *)(a1 + 40);
  if (v5) {
    (*(void (**)(uint64_t, BOOL))(v5 + 16))(v5, v4);
  }
  xpc_connection_cancel(*(xpc_connection_t *)(a1 + 32));
}

void sub_1002243A0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v6 = v3;
  if (v3) {
    BOOL v4 = xpc_dictionary_get_BOOL(v3, AFExternalRequestReplyKeyResult);
  }
  else {
    BOOL v4 = 0;
  }
  uint64_t v5 = *(void *)(a1 + 40);
  if (v5) {
    (*(void (**)(uint64_t, BOOL))(v5 + 16))(v5, v4);
  }
  xpc_connection_cancel(*(xpc_connection_t *)(a1 + 32));
}

void sub_100224938(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v6 = v3;
  if (v3) {
    BOOL v4 = xpc_dictionary_get_BOOL(v3, AFExternalRequestReplyKeyResult);
  }
  else {
    BOOL v4 = 0;
  }
  uint64_t v5 = *(void *)(a1 + 40);
  if (v5) {
    (*(void (**)(uint64_t, BOOL))(v5 + 16))(v5, v4);
  }
  xpc_connection_cancel(*(xpc_connection_t *)(a1 + 32));
}

void sub_100224EEC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v6 = v3;
  if (v3) {
    BOOL v4 = xpc_dictionary_get_BOOL(v3, AFExternalRequestReplyKeyResult);
  }
  else {
    BOOL v4 = 0;
  }
  uint64_t v5 = *(void *)(a1 + 40);
  if (v5) {
    (*(void (**)(uint64_t, BOOL))(v5 + 16))(v5, v4);
  }
  xpc_connection_cancel(*(xpc_connection_t *)(a1 + 32));
}

void sub_1002257A4(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_1002257C8(uint64_t a1)
{
}

id sub_1002257D0(uint64_t a1, char a2)
{
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = a2;
  return [*(id *)(a1 + 32) invoke];
}

void sub_10022588C(uint64_t a1)
{
  uint64_t v1 = *(void **)(*(void *)(a1 + 32) + 24);
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  v2[2] = sub_10022591C;
  v2[3] = &unk_100507590;
  id v3 = *(id *)(a1 + 40);
  [v1 fetchAvailableAnnouncementRequestTypesWithCompletion:v2];
}

uint64_t sub_10022591C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100225C2C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_100225C50(uint64_t a1)
{
}

id sub_100225C58(uint64_t a1, char a2)
{
  *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = a2;
  id result = [*(id *)(a1 + 32) invoke];
  int v4 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
  if (v4 != *(unsigned __int8 *)(a1 + 56))
  {
    uint64_t v5 = AFSiriLogContextConnection;
    if (os_log_type_enabled(AFSiriLogContextConnection, OS_LOG_TYPE_DEBUG))
    {
      int v6 = 136315138;
      id v7 = "-[AFSiriUserNotificationRequestCapabilityManager hasEligibleSetup]_block_invoke_2";
      _os_log_debug_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "%s Eligible capabilities changed, notifying observers", (uint8_t *)&v6, 0xCu);
      int v4 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
    }
    return objc_msgSend(*(id *)(a1 + 40), "notifyObserversOfCurrentEligibleSetupState:onPlatform:", v4 != 0, objc_msgSend((id)objc_opt_class(), "platform"));
  }
  return result;
}

void sub_100225E18(uint64_t a1)
{
  uint64_t v1 = *(void **)(*(void *)(a1 + 32) + 24);
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  v2[2] = sub_100225EA8;
  v2[3] = &unk_100507590;
  id v3 = *(id *)(a1 + 40);
  [v1 fetchEligibleAnnouncementRequestTypesWithCompletion:v2];
}

uint64_t sub_100225EA8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_1002262C8()
{
  id v0 = [objc_alloc((Class)objc_opt_class()) _initWithPlatform:1];
  uint64_t v1 = qword_100585F50;
  qword_100585F50 = (uint64_t)v0;
  return _objc_release_x1(v0, v1);
}

id sub_100226BD4(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 24));
  [WeakRetained peerLocationPolicySuggestsClearingCachedLocation:*(void *)(a1 + 32)];

  id v3 = *(void **)(a1 + 32);
  return [v3 _cancelTimer];
}

void sub_100226CE8(uint64_t a1)
{
  [*(id *)(a1 + 32) _cancelTimer];
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 24));
  [WeakRetained peerLocationPolicySuggestsClearingCachedLocation:*(void *)(a1 + 32)];
}

id sub_100226DB8(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _resetTimer];
}

void sub_100227764(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  id v7 = objc_alloc_init((Class)SAUserState);
  [v7 setUserToken:v5];

  [v7 setSharedUserId:v6];
  [*(id *)(a1 + 32) addObject:v6];
  [*(id *)(a1 + 40) setObject:v7 forKeyedSubscript:v6];
}

void sub_100227808(uint64_t a1, void *a2, void *a3)
{
  id v9 = a2;
  id v5 = a3;
  id v6 = [*(id *)(a1 + 32) objectForKey:v9];
  id v7 = v6;
  if (v6)
  {
    [v6 setUserTokenStatus:v5];
  }
  else
  {
    id v8 = objc_alloc_init((Class)SAUserState);
    [v8 setUserTokenStatus:v5];
    [v8 setSharedUserId:v9];
    [*(id *)(a1 + 40) addObject:v9];
    [*(id *)(a1 + 32) setObject:v8 forKeyedSubscript:v9];
  }
}

void sub_1002278D4(uint64_t a1, uint64_t a2, void *a3)
{
  id v6 = a3;
  id v5 = [*(id *)(a1 + 32) objectForKey:a2];
  if (v5) {
    [v6 setSyncSharedUserId:v5];
  }
  [*(id *)(a1 + 40) addObject:v6];
}

void sub_10022886C(id a1)
{
  id v1 = [[ADUserProfileService alloc] _init];
  uint64_t v2 = qword_100585F58;
  qword_100585F58 = (uint64_t)v1;
  _objc_release_x1(v1, v2);
}

void sub_1002288AC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v16 = 136315394;
    uint64_t v17 = "ADFetchLanguageDetectorSupportedLocales_block_invoke";
    __int16 v18 = 2112;
    id v19 = v5;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "%s Fetched supported locales - %@", (uint8_t *)&v16, 0x16u);
  }
  if (v6 || ![v5 count])
  {
    if (AFIsInternalInstall()
      && [*(id *)(a1 + 32) shouldSimulateLanguageDetectorAssetsAvailability])
    {
      id v8 = [*(id *)(a1 + 32) simulatingLanguageCodes];
      id v9 = AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
      {
        int v16 = 136315394;
        uint64_t v17 = "ADFetchLanguageDetectorSupportedLocales_block_invoke";
        __int16 v18 = 2112;
        id v19 = v8;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "%s Fetched supported locales (Simulated) - %@", (uint8_t *)&v16, 0x16u);
      }
      id v10 = sub_100228AD4(v8);
      uint64_t v11 = *(void *)(a1 + 40);
      if (v11) {
        (*(void (**)(uint64_t, void *, void))(v11 + 16))(v11, v10, 0);
      }
    }
    else
    {
      if (v6) {
        CFStringRef v12 = @"Error fetching supported locales for language detection.";
      }
      else {
        CFStringRef v12 = @"Language detector returned 0 supported locales.";
      }
      id v8 = +[AFError errorWithCode:2801 description:v12 underlyingError:v6];
      uint64_t v13 = *(void *)(a1 + 40);
      if (v13)
      {
        __int16 v14 = *(void (**)(void))(v13 + 16);
LABEL_19:
        v14();
      }
    }
  }
  else
  {
    id v8 = sub_100228AD4(v5);
    uint64_t v15 = *(void *)(a1 + 40);
    if (v15)
    {
      __int16 v14 = *(void (**)(void))(v15 + 16);
      goto LABEL_19;
    }
  }
}

id sub_100228AD4(void *a1)
{
  id v1 = a1;
  id v2 = objc_alloc_init((Class)NSMutableSet);
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  id v3 = v1;
  int v4 = (char *)[v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v11;
    do
    {
      for (i = 0; i != v5; ++i)
      {
        if (*(void *)v11 != v6) {
          objc_enumerationMutation(v3);
        }
        id v8 = AFOverrideLanguageCode();
        if (v8) {
          objc_msgSend(v2, "addObject:", v8, v10);
        }
      }
      id v5 = (char *)[v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }
    while (v5);
  }

  return v2;
}

id sub_100229108(void *a1)
{
  id v1 = a1;
  uint64_t v2 = [v1 text];
  if (!v2
    || (id v3 = (void *)v2,
        [v1 expectedSpeakerSharedUserID],
        int v4 = objc_claimAutoreleasedReturnValue(),
        v4,
        v3,
        v4))
  {
    uint64_t v5 = [v1 text];
    if (v5)
    {
      uint64_t v6 = (void *)v5;
      id v7 = [v1 expectedSpeakerSharedUserID];
      if (v7 && (AFIsInternalInstall() & 1) != 0)
      {
        int v8 = AFSupportsMultiUser();

        if (v8)
        {
          id v9 = objc_alloc_init((Class)SAStartMultiUserTestRequest);
          long long v10 = [v1 expectedSpeakerSharedUserID];
          [v9 setExpectedSelectedSharedUserId:v10];

          long long v11 = [v1 text];
          [v9 setUtterance:v11];

          if ([v1 activationEvent] == (id)5) {
            [v9 setOrigin:SAInputOriginAssistantTextInputValue];
          }
          id v12 = objc_alloc_init((Class)SAConfidenceScores);
          [v12 setProcessedAudioDurationMilliseconds:4000];
          [v12 setThresholdType:SAVoiceIDConfidenceScoresThresholdTypeVOICE_TRIGGERValue];
          [v12 setAssetVersion:@"12.216.PremiumTests"];
          [v12 setScoringSchemeVersion:&off_1005239D8];
          long long v13 = [v1 expectedSpeakerSharedUserID];
          [v12 setClassifiedUser:v13];

          __int16 v14 = +[ADMultiUserTestSupport sharedService];
          uint64_t v15 = [v14 getDebugVoiceIdScores];

          int v16 = AFSiriLogContextDaemon;
          BOOL v17 = os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO);
          if (v15)
          {
            id v73 = v12;
            id v74 = v9;
            if (v17)
            {
              *(_DWORD *)long long buf = 136315138;
              *(void *)&uint8_t buf[4] = "_RequestForInfo";
              _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "%s Using debug voiceID scores", buf, 0xCu);
            }
            *(void *)long long buf = 0;
            __int16 v18 = +[ADMultiUserService sharedService];
            id v83 = 0;
            id v72 = v15;
            id v19 = [v18 validateAndReturnScores:v15 classifiedUser:0 donatedScores:&__NSDictionary0__struct unknownUserSharedId:&v83 totalUsers:buf ghostVoiceProfileDetected:0];
            id v71 = v83;

            id v20 = objc_alloc_init((Class)NSMutableArray);
            long long v79 = 0u;
            long long v80 = 0u;
            long long v81 = 0u;
            long long v82 = 0u;
            id v21 = v19;
            id v22 = [v21 countByEnumeratingWithState:&v79 objects:v85 count:16];
            if (v22)
            {
              id v23 = v22;
              uint64_t v24 = *(void *)v80;
              do
              {
                for (i = 0; i != v23; i = (char *)i + 1)
                {
                  if (*(void *)v80 != v24) {
                    objc_enumerationMutation(v21);
                  }
                  uint64_t v26 = *(void *)(*((void *)&v79 + 1) + 8 * i);
                  long long v27 = objc_msgSend(v21, "objectForKey:", v26, v71);
                  id v28 = objc_alloc_init((Class)SAUserConfidenceScore);
                  objc_msgSend(v28, "setConfidenceScore:", objc_msgSend(v27, "integerValue"));
                  [v28 setSharedUserId:v26];
                  [v20 addObject:v28];
                }
                id v23 = [v21 countByEnumeratingWithState:&v79 objects:v85 count:16];
              }
              while (v23);
            }

            id v29 = v71;
            if (v71)
            {
              id v30 = objc_alloc_init((Class)SAUserConfidenceScore);
              [v30 setConfidenceScore:0];
              [v30 setSharedUserId:v71];
              [v20 addObject:v30];
            }
            id v12 = v73;
            objc_msgSend(v73, "setScores:", v20, v71);

            id v9 = v74;
            uint64_t v15 = v72;
          }
          else
          {
            if (v17)
            {
              *(_DWORD *)long long buf = 136315138;
              *(void *)&uint8_t buf[4] = "_RequestForInfo";
              _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "%s Constructing voiceID scores", buf, 0xCu);
            }
            id v61 = +[ADMultiUserService sharedService];
            __int16 v62 = [v1 expectedSpeakerSharedUserID];
            id v63 = [v1 expectedSpeakerConfidenceScore];
            id v64 = [v1 nonspeakerConfidenceScores];
            id v29 = [v61 confidenceScoresForMultiUserTestingExpectedSpeakerSharedUserID:v62 expectedSpeakerConfidenceScore:v63 nonspeakerConfidenceScores:v64];

            [v12 setScores:v29];
          }

          [v9 setVoiceIDConfidenceScores:v12];
          long long v77 = 0u;
          long long v78 = 0u;
          long long v75 = 0u;
          long long v76 = 0u;
          uint64_t v65 = [v12 scores];
          id v66 = [v65 countByEnumeratingWithState:&v75 objects:v84 count:16];
          if (v66)
          {
            id v67 = v66;
            uint64_t v68 = *(void *)v76;
            while (2)
            {
              for (j = 0; j != v67; j = (char *)j + 1)
              {
                if (*(void *)v76 != v68) {
                  objc_enumerationMutation(v65);
                }
                if ([*(id *)(*((void *)&v75 + 1) + 8 * (void)j) confidenceScore])
                {

                  goto LABEL_61;
                }
              }
              id v67 = [v65 countByEnumeratingWithState:&v75 objects:v84 count:16];
              if (v67) {
                continue;
              }
              break;
            }
          }

          uint64_t v70 = AFSiriLogContextDaemon;
          if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)long long buf = 136315138;
            *(void *)&uint8_t buf[4] = "_RequestForInfo";
            _os_log_impl((void *)&_mh_execute_header, v70, OS_LOG_TYPE_INFO, "%s All provided scores are 0, defaulting to unknown user", buf, 0xCu);
          }
          [v9 setExpectedSelectedSharedUserId:@"unknown"];
LABEL_61:

          goto LABEL_33;
        }
      }
      else
      {
      }
    }
    long long v31 = [v1 legacyDirectActionIdentifier];

    if (v31)
    {
      id v9 = objc_alloc_init((Class)SAStartDirectActionRequest);
      long long v32 = [v1 legacyDirectActionIdentifier];
      [v9 setDirectAction:v32];
    }
    else
    {
      long long v33 = [v1 handoffRequestData];

      if (v33)
      {
        id v9 = objc_alloc_init((Class)SAStartHandoffRequest);
        long long v32 = [v1 handoffRequestData];
        [v9 setHandoffData:v32];
      }
      else
      {
        long long v35 = [v1 correctedSpeech];

        if (!v35)
        {
          __int16 v60 = [v1 startRequest];

          if (v60)
          {
            id v9 = [v1 startRequest];
          }
          else
          {
            id v9 = 0;
          }
          goto LABEL_33;
        }
        id v9 = objc_alloc_init((Class)SASStartCorrectedSpeechRequest);
        id v36 = [v1 correctedSpeech];
        [v9 setUtterance:v36];

        __int16 v37 = [v1 correctedSpeechContext];
        objc_msgSend(v9, "ad_setAFCorrectionContext:", v37);

        BOOL v38 = [v1 combinedRank];
        objc_msgSend(v9, "setCombinedRank:", objc_msgSend(v38, "integerValue"));

        id v39 = [v1 combinedScore];
        [v39 doubleValue];
        objc_msgSend(v9, "setCombinedScore:");

        id v40 = [v1 interactionId];
        [v9 setInteractionId:v40];

        id v41 = [v1 onDeviceUtterancesPresent];
        objc_msgSend(v9, "setOnDeviceUtterancesPresent:", objc_msgSend(v41, "BOOLValue"));

        id v42 = [v1 originalRank];
        objc_msgSend(v9, "setOriginalRank:", objc_msgSend(v42, "integerValue"));

        id v43 = [v1 originalScore];
        [v43 doubleValue];
        objc_msgSend(v9, "setOriginalScore:");

        id v44 = [v1 previousUtterance];
        [v9 setPreviousUtterance:v44];

        long long v45 = [v1 sessionId];
        [v9 setSessionId:v45];

        long long v32 = [v1 utteranceSource];
        [v9 setUtteranceSource:v32];
      }
    }
LABEL_32:

    goto LABEL_33;
  }
  id v9 = objc_alloc_init((Class)SAStartRequest);
  long long v34 = [v1 text];
  [v9 setUtterance:v34];

  if ([v1 activationEvent] == (id)5 || objc_msgSend(v1, "activationEvent") == (id)11)
  {
    [v9 setOrigin:SAInputOriginAssistantTextInputValue];
    goto LABEL_33;
  }
  if ([v1 activationEvent] == (id)8)
  {
    uint64_t v51 = [v1 speechRequestOptions];
    id v52 = [v51 activationEvent];

    if (v52)
    {
      double v53 = sub_10035C6FC((uint64_t)v52);
      [v9 setOrigin:v53];
    }
    uint64_t v54 = [v1 testRequestOptions];
    long long v32 = v54;
    if (v54)
    {
      id v55 = [v54 inputOrigin];
      id v56 = [v55 length];

      if (v56)
      {
        id v57 = [v32 inputOrigin];
        [v9 setOrigin:v57];
      }
      char v58 = [v32 isEyesFree];

      if (v58)
      {
        char v59 = [v32 isEyesFree];
        objc_msgSend(v9, "setEyesFree:", objc_msgSend(v59, "BOOLValue"));
      }
    }
    goto LABEL_32;
  }
LABEL_33:
  long long v46 = [v1 requestIdentifier];
  long long v47 = [v46 UUIDString];
  [v9 setAceId:v47];

  long long v48 = [v1 turnIdentifier];
  char v49 = AFTurnIdentifierGetString();
  [v9 setTurnId:v49];

  return v9;
}

id sub_10022A22C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _handleMessage:*(void *)(a1 + 40) messageType:*(void *)(a1 + 48) fromDeviceWithIdentifier:*(void *)(a1 + 56) completion:*(void *)(a1 + 64)];
}

void sub_10022AE64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Block_object_dispose(&a29, 8);
  objc_destroyWeak(v29);
  _Unwind_Resume(a1);
}

void sub_10022AE8C(uint64_t a1, uint64_t a2)
{
}

void sub_10022AE98(uint64_t a1)
{
}

uint64_t sub_10022AEA0(void *a1)
{
  uint64_t v2 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
  {
    uint64_t v6 = a1[4];
    int v7 = 136315394;
    int v8 = "-[ADCompanionRoutingPhoneService _hangUpHandler:completion:]_block_invoke";
    __int16 v9 = 2112;
    uint64_t v10 = v6;
    _os_log_error_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "%s command timed out: %@", (uint8_t *)&v7, 0x16u);
  }
  id v3 = (void *)a1[5];
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1[8] + 8) + 40));
  [v3 _removeTimer:WeakRetained];

  uint64_t result = a1[7];
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void))(result + 16))(result, a1[6], 0);
  }
  return result;
}

void sub_10022AFAC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1 + 32);
  int v8 = *(NSObject **)(v7 + 56);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  void v11[2] = sub_10022B0B8;
  void v11[3] = &unk_100508278;
  void v11[4] = v7;
  id v12 = *(id *)(a1 + 40);
  id v13 = v6;
  id v14 = *(id *)(a1 + 48);
  id v15 = v5;
  id v16 = *(id *)(a1 + 56);
  id v9 = v5;
  id v10 = v6;
  dispatch_async(v8, v11);
}

void sub_10022B0B8(uint64_t a1)
{
  [*(id *)(a1 + 32) _removeTimer:*(void *)(a1 + 40)];
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2 && ([v2 cancelIfNotAlreadyCanceled] & 1) == 0)
  {
    id v13 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      id v14 = *(void **)(a1 + 48);
      int v15 = 136315394;
      id v16 = "-[ADCompanionRoutingPhoneService _hangUpHandler:completion:]_block_invoke_2";
      __int16 v17 = 2112;
      __int16 v18 = v14;
      _os_log_error_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "%s command timed out, ignoring error %@", (uint8_t *)&v15, 0x16u);
    }
  }
  else
  {
    id v3 = *(id *)(a1 + 56);
    int v4 = [*(id *)(a1 + 64) objectForKey:@"response"];
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      id v5 = +[SAGenericCommand aceObjectWithDictionary:v4];
      id v6 = (void *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
      {
        uint64_t v7 = v6;
        int v8 = (objc_class *)objc_opt_class();
        id v9 = NSStringFromClass(v8);
        int v15 = 136315394;
        id v16 = "-[ADCompanionRoutingPhoneService _hangUpHandler:completion:]_block_invoke";
        __int16 v17 = 2112;
        __int16 v18 = v9;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "%s Received response: %@", (uint8_t *)&v15, 0x16u);
      }
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        id v10 = v5;

        id v3 = v10;
      }
    }
    else
    {
      long long v11 = AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
      {
        int v15 = 136315138;
        id v16 = "-[ADCompanionRoutingPhoneService _hangUpHandler:completion:]_block_invoke";
        _os_log_error_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "%s Received bad response", (uint8_t *)&v15, 0xCu);
      }
    }
    uint64_t v12 = *(void *)(a1 + 72);
    if (v12) {
      (*(void (**)(uint64_t, id, void))(v12 + 16))(v12, v3, 0);
    }
  }
}

void sub_10022B680(uint64_t a1)
{
  id v6 = [*(id *)(a1 + 32) encodedClassName];
  if ([v6 isEqualToString:SAPhoneAnswerClassIdentifier])
  {
    [*(id *)(a1 + 40) _answerHandler:*(void *)(a1 + 32) completion:*(void *)(a1 + 48)];
  }
  else if ([v6 isEqualToString:SAPhoneHangUpClassIdentifier])
  {
    [*(id *)(a1 + 40) _hangUpHandler:*(void *)(a1 + 32) completion:*(void *)(a1 + 48)];
  }
  else
  {
    unsigned int v2 = [v6 isEqualToString:SAPhoneIncomingCallSearchClassIdentifier];
    uint64_t v4 = *(void *)(a1 + 32);
    id v3 = *(void **)(a1 + 40);
    uint64_t v5 = *(void *)(a1 + 48);
    if (v2) {
      [v3 _incomingCallSearchHandler:v4 completion:v5];
    }
    else {
      [v3 _unhandledCommand:v4 completion:v5];
    }
  }
}

uint64_t sub_10022C228(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_10022CF78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10022CF9C(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    if (v5)
    {
      uint64_t v7 = AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
      {
        uint64_t v10 = *(void *)(a1 + 32);
        *(_DWORD *)long long buf = 136315650;
        id v16 = "-[ADAssetManager _subscribeToMorphunAssetStatusForLanguage:]_block_invoke";
        __int16 v17 = 2112;
        id v18 = v5;
        __int16 v19 = 2112;
        uint64_t v20 = v10;
        _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "%s Error getting Morphun asset status: %@ for language %@", buf, 0x20u);
      }
    }
    int v8 = WeakRetained[2];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10022D18C;
    block[3] = &unk_1005076D8;
    objc_copyWeak(&v13, (id *)(a1 + 40));
    char v14 = a2;
    id v12 = *(id *)(a1 + 32);
    dispatch_async(v8, block);

    objc_destroyWeak(&v13);
  }
  else
  {
    id v9 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136315138;
      id v16 = "-[ADAssetManager _subscribeToMorphunAssetStatusForLanguage:]_block_invoke";
      _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "%s ADAssetManager is already deallocated, cannot update asset status", buf, 0xCu);
    }
  }
}

void sub_10022D18C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    if (AFIsInternalInstall())
    {
      id v3 = AFSiriLogContextDaemon;
      os_signpost_id_t v4 = os_signpost_id_generate(AFSiriLogContextDaemon);
      if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        os_signpost_id_t v5 = v4;
        if (os_signpost_enabled(v3))
        {
          LOWORD(v9) = 0;
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v3, OS_SIGNPOST_EVENT, v5, "MorphunAssetCallback", (const char *)&unk_100458042, (uint8_t *)&v9, 2u);
        }
      }
    }
    id v6 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      uint64_t v7 = *(void *)(a1 + 32);
      if (*(unsigned char *)(a1 + 48)) {
        CFStringRef v8 = @"succeeded";
      }
      else {
        CFStringRef v8 = @"failed";
      }
      int v9 = 136315650;
      uint64_t v10 = "-[ADAssetManager _subscribeToMorphunAssetStatusForLanguage:]_block_invoke";
      __int16 v11 = 2112;
      CFStringRef v12 = v8;
      __int16 v13 = 2112;
      uint64_t v14 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "%s Morphun assets subscribe %@ for %@", (uint8_t *)&v9, 0x20u);
    }
    _AFPreferencesSiriXAssetsDidChange();
    [WeakRetained _checkAssetsStatusForIntervalRecording];
    [WeakRetained notifyObserversAssetAvailabilityChanged];
  }
}

void sub_10022DC48(uint64_t a1)
{
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    os_signpost_id_t v2 = os_signpost_id_generate(AFSiriLogContextDaemon);
    id v3 = AFSiriLogContextDaemon;
    os_signpost_id_t v4 = v3;
    if (v2 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v3))
    {
      LOWORD(v10) = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v4, OS_SIGNPOST_INTERVAL_BEGIN, v2, "RegisterAssetASR", (const char *)&unk_100458042, (uint8_t *)&v10, 2u);
    }

    if (!WeakRetained[9])
    {
      id v5 = objc_alloc_init((Class)SFEntitledAssetManager);
      id v6 = WeakRetained[9];
      WeakRetained[9] = v5;
    }
    uint64_t v7 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      int v10 = 136315138;
      __int16 v11 = "-[ADAssetManager _registerAssetStatusTrackers]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "%s Registering ASR delegate", (uint8_t *)&v10, 0xCu);
    }
    [WeakRetained[9] registerAssetDelegate:WeakRetained assetType:3];
    CFStringRef v8 = AFSiriLogContextDaemon;
    int v9 = v8;
    if (v2 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v8))
    {
      LOWORD(v10) = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v9, OS_SIGNPOST_INTERVAL_END, v2, "RegisterAssetASR", (const char *)&unk_100458042, (uint8_t *)&v10, 2u);
    }
  }
}

void sub_10022DE04(uint64_t a1)
{
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    os_signpost_id_t v2 = os_signpost_id_generate(AFSiriLogContextDaemon);
    id v3 = AFSiriLogContextDaemon;
    os_signpost_id_t v4 = v3;
    if (v2 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v3))
    {
      LOWORD(v10) = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v4, OS_SIGNPOST_INTERVAL_BEGIN, v2, "RegisterAssetAttention", (const char *)&unk_100458042, (uint8_t *)&v10, 2u);
    }

    if (!WeakRetained[13])
    {
      id v5 = objc_alloc_init((Class)CSAttSiriAttentionAssetsStatusProvider);
      id v6 = WeakRetained[13];
      WeakRetained[13] = v5;

      uint64_t v7 = AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
      {
        int v10 = 136315138;
        __int16 v11 = "-[ADAssetManager _registerAssetStatusTrackers]_block_invoke";
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "%s Registering Attention delegate", (uint8_t *)&v10, 0xCu);
      }
      [WeakRetained[13] setDelegate:WeakRetained];
    }
    CFStringRef v8 = AFSiriLogContextDaemon;
    int v9 = v8;
    if (v2 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v8))
    {
      LOWORD(v10) = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v9, OS_SIGNPOST_INTERVAL_END, v2, "RegisterAssetAttention", (const char *)&unk_100458042, (uint8_t *)&v10, 2u);
    }
  }
}

void sub_10022DFBC(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v2 = WeakRetained;
    [WeakRetained _registerCDMStatusTracker];
    id WeakRetained = v2;
  }
}

void sub_10022E000(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    os_signpost_id_t v2 = os_signpost_id_generate(AFSiriLogContextDaemon);
    id v3 = AFSiriLogContextDaemon;
    os_signpost_id_t v4 = v3;
    if (v2 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v3))
    {
      LOWORD(v11) = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v4, OS_SIGNPOST_INTERVAL_BEGIN, v2, "RegisterAssetMorphun", (const char *)&unk_100458042, (uint8_t *)&v11, 2u);
    }

    if (!WeakRetained[15])
    {
      uint64_t v5 = +[MorphunAssets get];
      id v6 = (void *)WeakRetained[15];
      WeakRetained[15] = v5;
    }
    uint64_t v7 = WeakRetained[1];
    if (v7)
    {
      CFStringRef v8 = AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
      {
        int v11 = 136315138;
        CFStringRef v12 = "-[ADAssetManager _registerAssetStatusTrackers]_block_invoke";
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "%s Registering morphun delegate", (uint8_t *)&v11, 0xCu);
        uint64_t v7 = WeakRetained[1];
      }
      [WeakRetained _subscribeToMorphunAssetStatusForLanguage:v7];
    }
    int v9 = AFSiriLogContextDaemon;
    int v10 = v9;
    if (v2 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v9))
    {
      LOWORD(v11) = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v10, OS_SIGNPOST_INTERVAL_END, v2, "RegisterAssetMorphun", (const char *)&unk_100458042, (uint8_t *)&v11, 2u);
    }
  }
}

void sub_10022E640(uint64_t a1)
{
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    if (AFIsInternalInstall())
    {
      os_signpost_id_t v2 = AFSiriLogContextDaemon;
      os_signpost_id_t v3 = os_signpost_id_generate(AFSiriLogContextDaemon);
      if (v3 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        os_signpost_id_t v4 = v3;
        if (os_signpost_enabled(v2))
        {
          LOWORD(v6) = 0;
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v2, OS_SIGNPOST_EVENT, v4, "NLAssetCallbackUnavailable", (const char *)&unk_100458042, (uint8_t *)&v6, 2u);
        }
      }
    }
    uint64_t v5 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      int v6 = 136315138;
      uint64_t v7 = "-[ADAssetManager assetsUnavailableWithType:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "%s NL asset became unavailable for all locales", (uint8_t *)&v6, 0xCu);
    }
    [WeakRetained[10] removeAllObjects];
    _AFPreferencesSiriXAssetsDidChange();
    [WeakRetained notifyObserversAssetAvailabilityChanged];
  }
}

void sub_10022E788(uint64_t a1)
{
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    if (AFIsInternalInstall())
    {
      os_signpost_id_t v2 = AFSiriLogContextDaemon;
      os_signpost_id_t v3 = os_signpost_id_generate(AFSiriLogContextDaemon);
      if (v3 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        os_signpost_id_t v4 = v3;
        if (os_signpost_enabled(v2))
        {
          LOWORD(v6) = 0;
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v2, OS_SIGNPOST_EVENT, v4, "NLRouterAssetCallbackUnavailable", (const char *)&unk_100458042, (uint8_t *)&v6, 2u);
        }
      }
    }
    uint64_t v5 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      int v6 = 136315138;
      uint64_t v7 = "-[ADAssetManager assetsUnavailableWithType:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "%s NL router asset became unavailable for all locales", (uint8_t *)&v6, 0xCu);
    }
    [WeakRetained[11] removeAllObjects];
    _AFPreferencesSiriXAssetsDidChange();
    [WeakRetained notifyObserversAssetAvailabilityChanged];
  }
}

void sub_10022EABC(uint64_t a1)
{
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    os_signpost_id_t v3 = [*(id *)(a1 + 32) localeIdentifier];
    os_signpost_id_t v4 = [v3 stringByReplacingOccurrencesOfString:@"_" withString:@"-"];

    if (AFIsInternalInstall())
    {
      uint64_t v5 = AFSiriLogContextDaemon;
      os_signpost_id_t v6 = os_signpost_id_generate(AFSiriLogContextDaemon);
      if (v6 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        os_signpost_id_t v7 = v6;
        if (os_signpost_enabled(v5))
        {
          LOWORD(v9) = 0;
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v5, OS_SIGNPOST_EVENT, v7, "NLAssetCallbackAvailable", (const char *)&unk_100458042, (uint8_t *)&v9, 2u);
        }
      }
    }
    CFStringRef v8 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      int v9 = 136315394;
      int v10 = "-[ADAssetManager assetsAvailableForLocale:withType:]_block_invoke";
      __int16 v11 = 2112;
      CFStringRef v12 = v4;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "%s NL asset became available for %@", (uint8_t *)&v9, 0x16u);
    }
    [WeakRetained[10] setObject:&__kCFBooleanTrue forKeyedSubscript:v4];
    _AFPreferencesSiriXAssetsDidChange();
    [WeakRetained _checkAssetsStatusForIntervalRecording];
    [WeakRetained notifyObserversAssetAvailabilityChanged];
  }
}

void sub_10022EC64(uint64_t a1)
{
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    os_signpost_id_t v3 = [*(id *)(a1 + 32) localeIdentifier];
    os_signpost_id_t v4 = [v3 stringByReplacingOccurrencesOfString:@"_" withString:@"-"];

    if (AFIsInternalInstall())
    {
      uint64_t v5 = AFSiriLogContextDaemon;
      os_signpost_id_t v6 = os_signpost_id_generate(AFSiriLogContextDaemon);
      if (v6 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        os_signpost_id_t v7 = v6;
        if (os_signpost_enabled(v5))
        {
          LOWORD(v9) = 0;
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v5, OS_SIGNPOST_EVENT, v7, "NLRouterAssetCallbackAvailable", (const char *)&unk_100458042, (uint8_t *)&v9, 2u);
        }
      }
    }
    CFStringRef v8 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      int v9 = 136315394;
      int v10 = "-[ADAssetManager assetsAvailableForLocale:withType:]_block_invoke";
      __int16 v11 = 2112;
      CFStringRef v12 = v4;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "%s NL router asset became available for %@", (uint8_t *)&v9, 0x16u);
    }
    [WeakRetained[11] setObject:&__kCFBooleanTrue forKeyedSubscript:v4];
    _AFPreferencesSiriXAssetsDidChange();
    [WeakRetained notifyObserversAssetAvailabilityChanged];
  }
}

void sub_10022EEDC(uint64_t a1)
{
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    if (AFIsInternalInstall())
    {
      os_signpost_id_t v3 = AFSiriLogContextDaemon;
      os_signpost_id_t v4 = os_signpost_id_generate(AFSiriLogContextDaemon);
      if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        os_signpost_id_t v5 = v4;
        if (os_signpost_enabled(v3))
        {
          LOWORD(v_Block_object_dispose(&STACK[0x220], 8) = 0;
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v3, OS_SIGNPOST_EVENT, v5, "AttentionAssetCallback", (const char *)&unk_100458042, (uint8_t *)&v8, 2u);
        }
      }
    }
    objc_storeStrong(WeakRetained + 12, *(id *)(a1 + 32));
    _AFPreferencesSiriXAssetsDidChange();
    os_signpost_id_t v6 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      uint64_t v7 = *(void *)(a1 + 32);
      int v8 = 136315394;
      int v9 = "-[ADAssetManager attentionAssetStatus:]_block_invoke";
      __int16 v10 = 2112;
      uint64_t v11 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "%s Updating Attention asset status: %@", (uint8_t *)&v8, 0x16u);
    }
    [WeakRetained _checkAssetsStatusForIntervalRecording];
    [WeakRetained notifyObserversAssetAvailabilityChanged];
  }
}

void sub_10022F124(uint64_t a1)
{
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    if (AFIsInternalInstall())
    {
      os_signpost_id_t v3 = AFSiriLogContextDaemon;
      os_signpost_id_t v4 = os_signpost_id_generate(AFSiriLogContextDaemon);
      if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        os_signpost_id_t v5 = v4;
        if (os_signpost_enabled(v3))
        {
          LOWORD(v10) = 0;
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v3, OS_SIGNPOST_EVENT, v5, "ASRAssetCallback", (const char *)&unk_100458042, (uint8_t *)&v10, 2u);
        }
      }
    }
    objc_storeStrong(WeakRetained + 7, *(id *)(a1 + 32));
    if (AFIsNano() && AFDeviceSupportsFullSiriUOD())
    {
      uint64_t v6 = +[SFEntitledAssetManager modelTasksForLocaleWithInstallationStatus:*(void *)(a1 + 32)];
      id v7 = WeakRetained[8];
      WeakRetained[8] = (id)v6;
    }
    _AFPreferencesSiriXAssetsDidChange();
    int v8 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      uint64_t v9 = *(void *)(a1 + 32);
      int v10 = 136315394;
      uint64_t v11 = "-[ADAssetManager assetStatus:]_block_invoke";
      __int16 v12 = 2112;
      uint64_t v13 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "%s Updating speech asset status: %@", (uint8_t *)&v10, 0x16u);
    }
    [WeakRetained _checkAssetsStatusForIntervalRecording];
    [WeakRetained notifyObserversAssetAvailabilityChanged];
  }
}

void sub_10022F3C0(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    long long v10 = 0u;
    long long v11 = 0u;
    long long v8 = 0u;
    long long v9 = 0u;
    id v3 = *(id *)(a1 + 32);
    id v4 = [v3 countByEnumeratingWithState:&v8 objects:v12 count:16];
    if (v4)
    {
      id v5 = v4;
      uint64_t v6 = *(void *)v9;
      do
      {
        id v7 = 0;
        do
        {
          if (*(void *)v9 != v6) {
            objc_enumerationMutation(v3);
          }
          objc_msgSend(*(id *)(*((void *)&v8 + 1) + 8 * (void)v7), "assetManager:didChangeLanguageCode:", WeakRetained, *(void *)(a1 + 40), (void)v8);
          id v7 = (char *)v7 + 1;
        }
        while (v5 != v7);
        id v5 = [v3 countByEnumeratingWithState:&v8 objects:v12 count:16];
      }
      while (v5);
    }
  }
}

void sub_10022F5B4(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    long long v10 = 0u;
    long long v11 = 0u;
    long long v8 = 0u;
    long long v9 = 0u;
    id v3 = *(id *)(a1 + 32);
    id v4 = [v3 countByEnumeratingWithState:&v8 objects:v12 count:16];
    if (v4)
    {
      id v5 = v4;
      uint64_t v6 = *(void *)v9;
      do
      {
        id v7 = 0;
        do
        {
          if (*(void *)v9 != v6) {
            objc_enumerationMutation(v3);
          }
          objc_msgSend(*(id *)(*((void *)&v8 + 1) + 8 * (void)v7), "assetManagerDidChangeAssetAvailability:", WeakRetained, (void)v8);
          id v7 = (char *)v7 + 1;
        }
        while (v5 != v7);
        id v5 = [v3 countByEnumeratingWithState:&v8 objects:v12 count:16];
      }
      while (v5);
    }
  }
}

void sub_10022F78C(uint64_t a1)
{
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    id v3 = WeakRetained;
    [WeakRetained[16] removeObject:*(void *)(a1 + 32)];
    id WeakRetained = v3;
  }
}

uint64_t sub_10022F8B4(uint64_t a1)
{
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 40));
  id v3 = WeakRetained;
  if (WeakRetained)
  {
    id v5 = WeakRetained;
    id WeakRetained = (id *)[WeakRetained[16] containsObject:*(void *)(a1 + 32)];
    id v3 = v5;
    if ((WeakRetained & 1) == 0)
    {
      [v5[16] addObject:*(void *)(a1 + 32)];
      id WeakRetained = (id *)[*(id *)(a1 + 32) assetManagerDidChangeAssetAvailability:v5];
      id v3 = v5;
    }
  }
  return _objc_release_x1(WeakRetained, v3);
}

void sub_10022FA98(uint64_t a1)
{
  os_signpost_id_t v2 = (id *)(a1 + 40);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v4 = WeakRetained;
  if (WeakRetained)
  {
    [WeakRetained _registerCDMStatusTracker];
    [v4 _subscribeToMorphunAssetStatusForLanguage:*(void *)(a1 + 32)];
    objc_storeStrong((id *)v4 + 1, *(id *)(a1 + 32));
    id v5 = *((void *)v4 + 2);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10022FB6C;
    block[3] = &unk_10050B790;
    objc_copyWeak(&v7, v2);
    dispatch_async(v5, block);
    objc_destroyWeak(&v7);
  }
}

void sub_10022FB6C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    os_signpost_id_t v2 = WeakRetained;
    [WeakRetained _recordAssetsNeededForLanguage:WeakRetained[1] resetPrevious:1];
    [v2 notifyObserversLanguageCodeChanged:v2[1]];
    id WeakRetained = v2;
  }
}

uint64_t sub_10022FEF4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_10022FF0C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10022FF24(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    id v4 = WeakRetained;
    id v3 = [WeakRetained _fetchAssetStatusForLanguage:*(void *)(a1 + 32)];
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();

    id WeakRetained = v4;
  }
}

void sub_1002301B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1002301D4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1002301E4(uint64_t a1)
{
}

uint64_t sub_1002301EC(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) _fetchAssetStatusForLanguage:*(void *)(a1 + 40)];
  uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 40) = v2;
  return _objc_release_x1(v2, v4);
}

void sub_100230544(id a1)
{
  id v1 = objc_alloc_init(ADAssetManager);
  uint64_t v2 = qword_100585F68;
  qword_100585F68 = (uint64_t)v1;
  _objc_release_x1(v1, v2);
}

void sub_100230B0C(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = a2;
  [v4 setEffectiveDate:v3];
  [v4 setExpirationDuration:*(double *)(a1 + 40)];
}

void sub_100231718(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_100231734(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _continueSync];
}

void sub_1002322BC(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  long long v10 = *(NSObject **)(*(void *)(a1 + 32) + 16);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1002323EC;
  block[3] = &unk_100507D58;
  id v11 = *(id *)(a1 + 40);
  uint64_t v12 = *(void *)(a1 + 32);
  id v17 = v11;
  uint64_t v18 = v12;
  id v23 = v9;
  id v19 = *(id *)(a1 + 48);
  id v20 = v8;
  id v21 = *(id *)(a1 + 56);
  id v22 = v7;
  id v13 = v7;
  id v14 = v8;
  id v15 = v9;
  dispatch_async(v10, block);
}

uint64_t (**sub_1002323EC(void *a1))(id, void)
{
  uint64_t v3 = a1[4];
  uint64_t v2 = a1[5];
  uint64_t v4 = *(void *)(v2 + 72);
  if (v3 != v4)
  {
    id v5 = AFSiriLogContextSync;
    if (!os_log_type_enabled(AFSiriLogContextSync, OS_LOG_TYPE_INFO)) {
      goto LABEL_12;
    }
    int v14 = 136315650;
    id v15 = "-[ADSyncManager _continueSync]_block_invoke_2";
    __int16 v16 = 2112;
    uint64_t v17 = v3;
    __int16 v18 = 2112;
    uint64_t v19 = v4;
    uint64_t v6 = "%s Ignoring sync chunk for service %@ that's not our current service %@";
    goto LABEL_11;
  }
  if (([*(id *)(v2 + 96) isEqual:a1[6]] & 1) == 0)
  {
    id v5 = AFSiriLogContextSync;
    if (!os_log_type_enabled(AFSiriLogContextSync, OS_LOG_TYPE_INFO)) {
      goto LABEL_12;
    }
    uint64_t v10 = a1[6];
    uint64_t v11 = *(void *)(a1[5] + 96);
    int v14 = 136315650;
    id v15 = "-[ADSyncManager _continueSync]_block_invoke";
    __int16 v16 = 2112;
    uint64_t v17 = v10;
    __int16 v18 = 2112;
    uint64_t v19 = v11;
    uint64_t v6 = "%s Ignoring sync chunk for ID %@ that's not our current ID %@";
LABEL_11:
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, v6, (uint8_t *)&v14, 0x20u);
LABEL_12:
    uint64_t result = (uint64_t (**)(id, void))a1[10];
    if (result) {
      return (uint64_t (**)(id, void))result[2](result, 0);
    }
    return result;
  }
  uint64_t v8 = a1[4];
  id v7 = (void *)a1[5];
  if (a1[10])
  {
    uint64_t v9 = a1[8];
    return (uint64_t (**)(id, void))_objc_msgSend(v7, "_syncingService:withSyncInfo:receivedChunk:continueBlock:", v8, v9);
  }
  else
  {
    uint64_t v12 = a1[7];
    return (uint64_t (**)(id, void))_[v7 _syncFinishedForService:v8 error:v12];
  }
}

void sub_100233050(uint64_t a1, unint64_t a2)
{
  id v3 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", @"Queue %s did not respond to watchdog and is likely blocked.", dispatch_queue_get_label(*(dispatch_queue_t *)(a1 + 32)));
  uint64_t v4 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)long long buf = 136315394;
    id v7 = "-[ADSyncManager initWithServiceManager:queue:]_block_invoke";
    __int16 v8 = 2112;
    id v9 = v3;
    _os_log_fault_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "%s %@", buf, 0x16u);
  }
  int v5 = AFIsInternalInstall();
  if (a2 <= 3 && v5) {
    WriteStackshotReport_async();
  }
}

id sub_100233C10(uint64_t a1)
{
  return [*(id *)(a1 + 32) _handleAceObject:*(void *)(a1 + 40)];
}

void sub_100234A5C(uint64_t a1)
{
  uint64_t v2 = (void *)AFSiriLogContextSession;
  if (os_log_type_enabled(AFSiriLogContextSession, OS_LOG_TYPE_INFO))
  {
    id v3 = *(void **)(a1 + 32);
    uint64_t v4 = v2;
    int v15 = 136315394;
    __int16 v16 = "-[ADSession assistantDataManager:didUpdateAssistantData:]_block_invoke";
    __int16 v17 = 1024;
    unsigned int v18 = [v3 sessionType];
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%s Got updated assistant data for session %d!", (uint8_t *)&v15, 0x12u);
  }
  unsigned int v5 = [*(id *)(a1 + 32) _waitingForAssistantData];
  objc_storeStrong((id *)(*(void *)(a1 + 32) + 112), *(id *)(a1 + 40));
  uint64_t v6 = *(uint64_t **)(a1 + 32);
  if (v6[11] >= 8)
  {
    if (v6[15])
    {
      objc_msgSend(v6, "_sendAssistantDataChangedSinceAnchor:refId:", 0);
      uint64_t v7 = *(void *)(a1 + 32);
      __int16 v8 = *(void **)(v7 + 120);
      *(void *)(v7 + 120) = 0;
    }
    else
    {
      if (![v6 _shouldSendAssistantData]) {
        goto LABEL_12;
      }
      uint64_t v9 = *(void *)(a1 + 32);
      uint64_t v10 = *(void **)(v9 + 40);
      if (v10)
      {
        id v11 = v10;
      }
      else
      {
        id v11 = [*(id *)(v9 + 16) lastAssistantDataAnchor];
      }
      __int16 v8 = v11;
      [*(id *)(a1 + 32) _sendAssistantDataChangedSinceAnchor:v11 refId:0];
    }

LABEL_12:
    if (v5)
    {
      uint64_t v12 = AFSiriLogContextSession;
      if (os_log_type_enabled(AFSiriLogContextSession, OS_LOG_TYPE_INFO))
      {
        int v15 = 136315138;
        __int16 v16 = "-[ADSession assistantDataManager:didUpdateAssistantData:]_block_invoke";
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "%s Sending pending commands after SAD update", (uint8_t *)&v15, 0xCu);
      }
      [*(id *)(a1 + 32) _sendPendingCommands];
      id v13 = *(void **)(a1 + 32);
      if (v13[11] == 11)
      {
        int v14 = AFSiriLogContextSession;
        if (os_log_type_enabled(AFSiriLogContextSession, OS_LOG_TYPE_INFO))
        {
          int v15 = 136315138;
          __int16 v16 = "-[ADSession assistantDataManager:didUpdateAssistantData:]_block_invoke";
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "%s Session is active, clearing limbo now.", (uint8_t *)&v15, 0xCu);
          id v13 = *(void **)(a1 + 32);
        }
        [v13 _clearLimbo];
      }
    }
  }
}

id sub_1002365C4(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _createDictationSampledPlistIfItDoesNotExist];
}

void sub_100236E70(id a1)
{
  id v1 = objc_alloc_init(ADDictationOnDeviceSampling);
  uint64_t v2 = qword_100585F78;
  qword_100585F78 = (uint64_t)v1;
  _objc_release_x1(v1, v2);
}

uint64_t sub_100237508(void *a1)
{
  id v1 = a1;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  uint64_t v2 = (char *)[v1 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v2)
  {
    id v3 = v2;
    uint64_t v4 = 0;
    uint64_t v5 = *(void *)v9;
    do
    {
      for (i = 0; i != v3; ++i)
      {
        if (*(void *)v9 != v5) {
          objc_enumerationMutation(v1);
        }
        switch(SAAlarmDayOfWeekForString())
        {
          case 2u:
            v4 |= 0x40uLL;
            break;
          case 3u:
            v4 |= 1uLL;
            break;
          case 4u:
            v4 |= 2uLL;
            break;
          case 5u:
            v4 |= 4uLL;
            break;
          case 6u:
            v4 |= 8uLL;
            break;
          case 7u:
            v4 |= 0x10uLL;
            break;
          case 8u:
            v4 |= 0x20uLL;
            break;
          default:
            continue;
        }
      }
      id v3 = (char *)[v1 countByEnumeratingWithState:&v8 objects:v12 count:16];
    }
    while (v3);
  }
  else
  {
    uint64_t v4 = 0;
  }

  return v4;
}

id sub_100237838(void *a1)
{
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = +[NSCharacterSet URLPathAllowedCharacterSet];
    id v3 = [v1 stringByAddingPercentEncodingWithAllowedCharacters:v2];

    uint64_t v4 = [@"siri-alarm-internal:" stringByAppendingString:v3];
    id v5 = [objc_alloc((Class)NSURL) initWithString:v4];
    if (!v5)
    {
      uint64_t v6 = AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
      {
        int v8 = 136315394;
        long long v9 = "AFAlarmURLForAlarmIdentifier";
        __int16 v10 = 2112;
        id v11 = v1;
        _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "%s Failed constructing URL identifier for %@", (uint8_t *)&v8, 0x16u);
      }
    }
  }
  else
  {
    id v5 = 0;
  }

  return v5;
}

id sub_100237C20(void *a1)
{
  id v1 = [a1 absoluteString];
  if ([v1 hasPrefix:@"siri-alarm-internal:"])
  {
    uint64_t v2 = [v1 substringFromIndex:objc_msgSend(@"siri-alarm-internal:", "length")];
    id v3 = [v2 stringByRemovingPercentEncoding];
  }
  else
  {
    id v3 = 0;
  }

  return v3;
}

void sub_100237CB0(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_100237D58;
  v6[3] = &unk_100507820;
  void v6[4] = v4;
  id v5 = *(id *)(a1 + 48);
  void v6[5] = *(void *)(a1 + 40);
  id v7 = v5;
  [a2 fetchAlarmsWithIdentifiers:v4 completionHandler:v6];
}

void sub_100237D58(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = v6;
  if (v5)
  {
    id v26 = v6;
    id v8 = objc_msgSend(objc_alloc((Class)NSMutableArray), "initWithCapacity:", objc_msgSend(v5, "count"));
    long long v33 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    id v27 = v5;
    id obj = v5;
    id v9 = [obj countByEnumeratingWithState:&v33 objects:v38 count:16];
    if (v9)
    {
      id v10 = v9;
      uint64_t v11 = *(void *)v34;
      do
      {
        for (i = 0; i != v10; i = (char *)i + 1)
        {
          if (*(void *)v34 != v11) {
            objc_enumerationMutation(obj);
          }
          id v13 = *(void **)(*((void *)&v33 + 1) + 8 * i);
          int v14 = (void *)a1[5];
          int v15 = [v13 identifier];
          __int16 v16 = [v14 objectForKey:v15];

          id v17 = [v13 copy];
          long long v29 = 0u;
          long long v30 = 0u;
          long long v31 = 0u;
          long long v32 = 0u;
          id v18 = v16;
          id v19 = [v18 countByEnumeratingWithState:&v29 objects:v37 count:16];
          if (v19)
          {
            id v20 = v19;
            uint64_t v21 = *(void *)v30;
            do
            {
              for (j = 0; j != v20; j = (char *)j + 1)
              {
                if (*(void *)v30 != v21) {
                  objc_enumerationMutation(v18);
                }
                objc_msgSend(v17, "_ad_updateWithModification:", *(void *)(*((void *)&v29 + 1) + 8 * (void)j));
              }
              id v20 = [v18 countByEnumeratingWithState:&v29 objects:v37 count:16];
            }
            while (v20);
          }

          [v8 addObject:v17];
        }
        id v10 = [obj countByEnumeratingWithState:&v33 objects:v38 count:16];
      }
      while (v10);
    }

    id v23 = objc_alloc_init((Class)AFUpdateAlarmRequest);
    [v23 setAlarms:v8];
    (*(void (**)(void))(a1[6] + 16))();

    id v7 = v26;
    id v5 = v27;
  }
  else
  {
    uint64_t v24 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      uint64_t v25 = a1[4];
      *(_DWORD *)long long buf = 136315650;
      id v40 = "-[SAAlarmUpdate(ADAlarmTransformer) _ad_getAlarmRequestRepresentationWithCompletionHandler:]_block_invoke_2";
      __int16 v41 = 2112;
      uint64_t v42 = v25;
      __int16 v43 = 2114;
      id v44 = v7;
      _os_log_error_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "%s Unable to fetch alarms with identifiers %@: %{public}@", buf, 0x20u);
    }
    (*(void (**)(void))(a1[6] + 16))();
  }
}

id sub_100238230(uint64_t a1)
{
  id v2 = objc_alloc_init((Class)NSMutableArray);
  id v3 = v2;
  if (a1)
  {
    [v2 addObject:SAAlarmDayOfWeekMondayValue];
    if ((a1 & 2) == 0)
    {
LABEL_3:
      if ((a1 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }
  else if ((a1 & 2) == 0)
  {
    goto LABEL_3;
  }
  [v3 addObject:SAAlarmDayOfWeekTuesdayValue];
  if ((a1 & 4) == 0)
  {
LABEL_4:
    if ((a1 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
LABEL_12:
  [v3 addObject:SAAlarmDayOfWeekWednesdayValue];
  if ((a1 & 8) == 0)
  {
LABEL_5:
    if ((a1 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_14;
  }
LABEL_13:
  [v3 addObject:SAAlarmDayOfWeekThursdayValue];
  if ((a1 & 0x10) == 0)
  {
LABEL_6:
    if ((a1 & 0x20) == 0) {
      goto LABEL_7;
    }
LABEL_15:
    [v3 addObject:SAAlarmDayOfWeekSaturdayValue];
    if ((a1 & 0x40) == 0) {
      goto LABEL_8;
    }
LABEL_16:
    uint64_t v4 = &SAAlarmDayOfWeekSundayValue;
    goto LABEL_17;
  }
LABEL_14:
  [v3 addObject:SAAlarmDayOfWeekFridayValue];
  if ((a1 & 0x20) != 0) {
    goto LABEL_15;
  }
LABEL_7:
  if ((a1 & 0x40) != 0) {
    goto LABEL_16;
  }
LABEL_8:
  if (a1) {
    goto LABEL_18;
  }
  uint64_t v4 = &SAAlarmDayOfWeekNeverValue;
LABEL_17:
  [v3 addObject:*v4];
LABEL_18:
  return v3;
}

void sub_100239054(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  id v5 = objc_msgSend(v3, "_ad_internalAlarmIdentifiers");
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  void v7[2] = sub_100239114;
  v7[3] = &unk_10050DF10;
  id v6 = *(void **)(a1 + 40);
  void v7[4] = *(void *)(a1 + 32);
  id v8 = v6;
  [v4 fetchAlarmsWithIdentifiers:v5 completionHandler:v7];
}

void sub_100239114(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v5)
  {
    id v7 = objc_alloc_init((Class)AFShowAlarmRequest);
    [v7 setAlarms:v5];
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
  else
  {
    id v8 = (void *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      id v9 = *(void **)(a1 + 32);
      id v10 = v8;
      uint64_t v11 = objc_msgSend(v9, "_ad_internalAlarmIdentifiers");
      int v12 = 136315650;
      id v13 = "-[SAAlarmAlarmShow(ADAlarmTransformer) _ad_getAlarmRequestRepresentationWithCompletionHandler:]_block_invoke_2";
      __int16 v14 = 2112;
      int v15 = v11;
      __int16 v16 = 2114;
      id v17 = v6;
      _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "%s Unable to fetch alarms with identifiers %@: %{public}@", (uint8_t *)&v12, 0x20u);
    }
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

void sub_100239584(uint64_t a1, void *a2)
{
  BOOL v3 = *(_DWORD *)(a1 + 56) != 7;
  id v4 = a2;
  [v4 setIsEnabled:v3];
  [v4 setPrimaryInEarStatus:*(void *)(a1 + 32)];
  [v4 setSecondaryInEarStatus:*(void *)(a1 + 40)];
  [v4 setPrimaryEarbudSide:*(void *)(a1 + 48)];
}

uint64_t sub_100239718(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100239824(void *a1, void *a2)
{
  id v3 = a2;
  if (objc_opt_respondsToSelector()) {
    [v3 bluetoothDevice:a1[4] deviceInfoDidChangeFrom:a1[5] to:a1[6]];
  }
}

id sub_1002398E4(void *a1)
{
  id v1 = a1;
  id v2 = [v1 coreBluetoothDevice];
  id v3 = v2;
  if (!v2)
  {
    id v15 = 0;
    goto LABEL_10;
  }
  unsigned int v4 = [v2 vendorID];
  id v5 = [v3 productID];
  uint64_t v6 = +[CBProductInfo productInfoWithProductID:v5];
  char v7 = (_BYTE)v5 - 10;
  id v20 = (void *)v6;
  unsigned int v19 = ((v5 - 8212) < 0x11) & (0x116A1u >> ((_BYTE)v5 - 20));
  if ((v5 - 8202) > 0x1A) {
    goto LABEL_13;
  }
  char v8 = 1;
  if (((1 << v7) & 0x20033F) == 0)
  {
    if (((1 << v7) & 0x45A8400) != 0)
    {
LABEL_5:
      v8 |= ((v5 - 8210) < 0x14) & (0x300261u >> ((_BYTE)v5 - 17));
      goto LABEL_6;
    }
LABEL_13:
    char v8 = 0;
    goto LABEL_5;
  }
LABEL_6:
  unsigned int v9 = ([v3 deviceFlags] >> 26) & 1;
  unsigned int v10 = ([v3 deviceFlags] >> 27) & 1;
  BOOL v11 = [v3 autoAncCapability] == 1;
  id v18 = v1;
  int v12 = sub_100239BE0(v1);
  v21[0] = _NSConcreteStackBlock;
  v21[1] = 3221225472;
  void v21[2] = sub_100239E24;
  v21[3] = &unk_1005079B8;
  id v22 = v3;
  char v27 = ((v5 - 8194) < 0x25) & (0x1C7BB7FF9BuLL >> (v5 - 2));
  unsigned int v25 = v4;
  int v26 = (int)v5;
  id v13 = v20;
  id v23 = v13;
  char v28 = v8;
  char v29 = v19;
  char v30 = v9;
  char v31 = v10;
  BOOL v32 = v11;
  id v14 = v12;
  id v24 = v14;
  id v15 = +[AFBluetoothDeviceInfo newWithBuilder:v21];
  __int16 v16 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)long long buf = 136315394;
    long long v34 = "_ADCBV2BluetoothDeviceGetDeviceInfo";
    __int16 v35 = 2112;
    id v36 = v15;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "%s deviceInfo: %@", buf, 0x16u);
  }

  id v1 = v18;
LABEL_10:

  return v15;
}

id sub_100239BE0(void *a1)
{
  id v1 = a1;
  unsigned int v2 = [v1 bobbleCapability];
  unsigned int v3 = [v1 headGestureToggle];
  unsigned int v4 = [v1 acceptReplyPlayPauseConfig];
  unsigned int v5 = [v1 declineDismissSkipConfig];

  uint64_t v6 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    if (v2 > 2) {
      char v7 = "?";
    }
    else {
      char v7 = (&off_1005079D8)[v2];
    }
    if (v3 > 2) {
      char v8 = "?";
    }
    else {
      char v8 = (&off_1005079F0)[v3];
    }
    if (v4 - 1 > 2) {
      unsigned int v9 = "?";
    }
    else {
      unsigned int v9 = (&off_100507A08)[(v4 - 1)];
    }
    if (v5 - 1 > 2) {
      unsigned int v10 = "?";
    }
    else {
      unsigned int v10 = (&off_100507A08)[(v5 - 1)];
    }
    *(_DWORD *)long long buf = 136316162;
    id v22 = "ADHeadGestureConfigurationForAA";
    __int16 v23 = 2080;
    id v24 = v7;
    __int16 v25 = 2080;
    int v26 = v8;
    __int16 v27 = 2080;
    char v28 = v9;
    __int16 v29 = 2080;
    char v30 = v10;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "%s [AAD States] bobbleCapability: %s, headGestureToggle: %s, acceptReplyPlayPauseConfig: %s, declineDismissSkipConfig: %s", buf, 0x34u);
  }
  int32x2_t v11 = vceq_s32((int32x2_t)__PAIR64__(v5, v4), (int32x2_t)0x200000002);
  v12.i64[0] = v11.u32[0];
  v12.i64[1] = v11.u32[1];
  int8x16_t v13 = v12;
  int32x2_t v14 = vceq_s32((int32x2_t)__PAIR64__(v5, v4), (int32x2_t)0x100000001);
  v12.i64[0] = v14.i32[0];
  v12.i64[1] = v14.i32[1];
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472;
  v17[2] = sub_100239FC0;
  v17[3] = &unk_100507978;
  char v19 = v2;
  char v20 = v3;
  int64x2_t v18 = vsubw_s32((int64x2_t)vandq_s8(vbicq_s8(v13, v12), (int8x16_t)vdupq_n_s64(2uLL)), v14);
  id v15 = +[AFBluetoothHeadGestureConfiguration newWithBuilder:v17];
  return v15;
}

void sub_100239E24(uint64_t a1, void *a2)
{
  id v8 = a2;
  id v3 = objc_alloc((Class)NSUUID);
  unsigned int v4 = [*(id *)(a1 + 32) identifier];
  id v5 = [v3 initWithUUIDString:v4];
  [v8 setDeviceUID:v5];

  uint64_t v6 = [*(id *)(a1 + 32) name];
  [v8 setName:v6];

  [v8 setIsAdvancedAppleAudioDevice:*(unsigned __int8 *)(a1 + 64)];
  [v8 setVendorID:*(unsigned int *)(a1 + 56)];
  [v8 setProductID:*(unsigned int *)(a1 + 60)];
  [v8 setIsAdvancedAppleAudioDevice:*(unsigned __int8 *)(a1 + 64)];
  objc_msgSend(v8, "setSupportsInEarDetection:", (objc_msgSend(*(id *)(a1 + 40), "flags") >> 8) & 1);
  [v8 setSupportsVoiceTrigger:*(unsigned __int8 *)(a1 + 65)];
  [v8 setSupportsJustSiri:*(unsigned __int8 *)(a1 + 66)];
  [v8 setSupportsListeningModeANC:*(unsigned __int8 *)(a1 + 67)];
  [v8 setSupportsListeningModeTransparency:*(unsigned __int8 *)(a1 + 68)];
  [v8 setSupportsListeningModeAutomatic:*(unsigned __int8 *)(a1 + 69)];
  objc_msgSend(v8, "setSupportsConversationAwareness:", objc_msgSend(*(id *)(a1 + 32), "conversationDetectCapability") == 1);
  objc_msgSend(v8, "setSupportsPersonalVolume:", objc_msgSend(*(id *)(a1 + 32), "adaptiveVolumeCapability") == 1);
  [v8 setSupportsSpokenNotification:*(unsigned __int8 *)(a1 + 65)];
  if (*(unsigned char *)(a1 + 65)) {
    uint64_t v7 = ([*(id *)(a1 + 40) flags] >> 8) & 1;
  }
  else {
    uint64_t v7 = 0;
  }
  [v8 setSupportsAnnounceCall:v7];
  [v8 setHeadGestureConfiguration:*(void *)(a1 + 48)];
}

void sub_100239FC0(uint64_t a1, void *a2)
{
  BOOL v3 = *(unsigned __int8 *)(a1 + 48) == 2;
  id v4 = a2;
  [v4 setIsSupported:v3];
  [v4 setIsEnabled:*(unsigned __int8 *)(a1 + 49) == 1];
  [v4 setAcceptGesture:*(void *)(a1 + 32)];
  [v4 setRejectGesture:*(void *)(a1 + 40)];
}

void sub_10023A43C(uint64_t a1)
{
  unsigned int v2 = [*(id *)(a1 + 32) identifier];
  unsigned __int8 v3 = [v2 isEqualToString:*(void *)(*(void *)(a1 + 40) + 64)];

  if ((v3 & 1) == 0)
  {
    id v4 = [*(id *)(a1 + 32) bluetoothAddress];
    unsigned int v5 = [v4 isEqualToString:*(void *)(*(void *)(a1 + 40) + 56)];

    if (!v5) {
      return;
    }
    uint64_t v6 = [*(id *)(a1 + 32) identifier];
    uint64_t v7 = *(void *)(a1 + 40);
    id v8 = *(void **)(v7 + 64);
    *(void *)(v7 + 64) = v6;
  }
  uint64_t v9 = [*(id *)(a1 + 32) bluetoothAddress];
  uint64_t v10 = *(void *)(a1 + 40);
  uint64_t v11 = *(void *)(v10 + 56);
  *(void *)(v10 + 56) = v9;
  _objc_release_x1(v9, v11);
}

void sub_10023A508(void *a1, void *a2)
{
  id v3 = a2;
  if (objc_opt_respondsToSelector()) {
    [v3 bluetoothDevice:a1[4] headphoneInEarDetectionStateDidChangeFrom:a1[5] to:a1[6]];
  }
}

void sub_10023A56C(void *a1, void *a2)
{
  id v3 = a2;
  if (objc_opt_respondsToSelector()) {
    [v3 bluetoothDevice:a1[4] headphoneListeningModeDidChangeFrom:a1[5] to:a1[6]];
  }
}

id sub_10023A668(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _updateDevice:*(void *)(a1 + 40)];
}

uint64_t sub_10023A71C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = [*(id *)(a1 + 32) _headphoneListeningModeFromDevice:*(void *)(*(void *)(a1 + 32) + 48)];
  id v3 = *(uint64_t (**)(uint64_t, id))(v1 + 16);
  return v3(v1, v2);
}

void sub_10023A80C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = [*(id *)(a1 + 32) _inEarDetectionStateFromCBDevice:*(void *)(*(void *)(a1 + 32) + 48)];
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_10023A91C(uint64_t a1)
{
  id v2 = objc_alloc_init(off_100582D18());
  id v3 = v2;
  if (*(unsigned char *)(a1 + 48)) {
    uint64_t v4 = 1;
  }
  else {
    uint64_t v4 = 2;
  }
  [v2 setHeadGestureToggle:v4];
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 8));
  uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 48);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  void v7[2] = sub_10023AA08;
  v7[3] = &unk_1005078C0;
  id v8 = *(id *)(a1 + 40);
  char v9 = *(unsigned char *)(a1 + 48);
  [WeakRetained sendDeviceConfig:v3 device:v6 completion:v7];
}

void sub_10023AA08(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc((Class)AFBluetoothDeviceBooleanSettingResponse);
  if (v3)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 2;
  }
  else
  {
    if (*(unsigned char *)(a1 + 40)) {
      uint64_t v5 = 2;
    }
    else {
      uint64_t v5 = 1;
    }
    uint64_t v6 = 1;
  }
  id v7 = [v4 initWithValue:v5 status:v6];
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  id v8 = AFSiriLogContextLocation;
  if (os_log_type_enabled(AFSiriLogContextLocation, OS_LOG_TYPE_INFO))
  {
    int v9 = 136315394;
    uint64_t v10 = "-[ADCoreBluetoothV2Device setHeadGestures:completion:]_block_invoke_2";
    __int16 v11 = 2112;
    id v12 = v7;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "%s Set head gestures response %@", (uint8_t *)&v9, 0x16u);
  }
}

Class sub_10023AB24()
{
  v4[0] = 0;
  if (!qword_100585F90)
  {
    v4[1] = _NSConcreteStackBlock;
    v4[2] = (void *)3221225472;
    v4[3] = sub_10023AC9C;
    void v4[4] = &unk_10050E350;
    void v4[5] = v4;
    long long v5 = off_100507998;
    uint64_t v6 = 0;
    qword_100585F90 = _sl_dlopen();
  }
  if (!qword_100585F90)
  {
    id v2 = +[NSAssertionHandler currentHandler];
    id v3 = +[NSString stringWithUTF8String:"void *AudioAccessoryServicesLibrary(void)"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"ADCoreBluetoothV2Device.m", 14, @"%s", v4[0]);

    __break(1u);
    goto LABEL_7;
  }
  id v0 = v4[0];
  if (v4[0]) {
LABEL_7:
  }
    free(v0);
  Class result = objc_getClass("AADeviceConfig");
  qword_100585F88 = (uint64_t)result;
  off_100582D18 = (uint64_t (*)())sub_10023AD10;
  return result;
}

uint64_t sub_10023AC9C()
{
  uint64_t result = _sl_dlopen();
  qword_100585F90 = result;
  return result;
}

id sub_10023AD10()
{
  return (id)qword_100585F88;
}

void sub_10023ADC4(uint64_t a1)
{
  id v2 = *(void **)(*(void *)(a1 + 32) + 48);
  if (!v2)
  {
    id v3 = AFSiriLogContextLocation;
    if (os_log_type_enabled(AFSiriLogContextLocation, OS_LOG_TYPE_INFO))
    {
      int v10 = 136315394;
      __int16 v11 = "-[ADCoreBluetoothV2Device getHeadGestures:]_block_invoke";
      __int16 v12 = 2048;
      id v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "%s AADevice is unavailable to get head gestures state %p", (uint8_t *)&v10, 0x16u);
      id v2 = *(void **)(*(void *)(a1 + 32) + 48);
    }
    else
    {
      id v2 = 0;
    }
  }
  if ([v2 bobbleCapability] == 2)
  {
    unsigned int v4 = [*(id *)(*(void *)(a1 + 32) + 48) headGestureToggle];
    if (v4 == 1)
    {
      uint64_t v5 = 1;
      uint64_t v6 = 2;
    }
    else if (v4 == 2)
    {
      uint64_t v5 = 1;
      uint64_t v6 = 1;
    }
    else
    {
      id v7 = AFSiriLogContextLocation;
      uint64_t v5 = 1;
      if (os_log_type_enabled(AFSiriLogContextLocation, OS_LOG_TYPE_INFO))
      {
        int v10 = 136315138;
        __int16 v11 = "-[ADCoreBluetoothV2Device getHeadGestures:]_block_invoke";
        uint64_t v5 = 1;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "%s Head gestures state is unknown", (uint8_t *)&v10, 0xCu);
      }
      uint64_t v6 = 0;
    }
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v5 = 3;
  }
  id v8 = [objc_alloc((Class)AFBluetoothDeviceBooleanSettingResponse) initWithValue:v6 status:v5];
  int v9 = AFSiriLogContextLocation;
  if (os_log_type_enabled(AFSiriLogContextLocation, OS_LOG_TYPE_INFO))
  {
    int v10 = 136315394;
    __int16 v11 = "-[ADCoreBluetoothV2Device getHeadGestures:]_block_invoke";
    __int16 v12 = 2112;
    id v13 = v8;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "%s Get head gestures response %@", (uint8_t *)&v10, 0x16u);
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_10023B08C(uint64_t a1)
{
  id v2 = objc_alloc_init(off_100582D18());
  id v3 = v2;
  if (*(unsigned char *)(a1 + 48)) {
    uint64_t v4 = 1;
  }
  else {
    uint64_t v4 = 2;
  }
  [v2 setAdaptiveVolumeConfig:v4];
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 8));
  uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 48);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  void v7[2] = sub_10023B178;
  v7[3] = &unk_1005078C0;
  id v8 = *(id *)(a1 + 40);
  char v9 = *(unsigned char *)(a1 + 48);
  [WeakRetained sendDeviceConfig:v3 device:v6 completion:v7];
}

void sub_10023B178(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc((Class)AFBluetoothDeviceBooleanSettingResponse);
  if (v3)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 2;
  }
  else
  {
    if (*(unsigned char *)(a1 + 40)) {
      uint64_t v5 = 2;
    }
    else {
      uint64_t v5 = 1;
    }
    uint64_t v6 = 1;
  }
  id v7 = [v4 initWithValue:v5 status:v6];
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  id v8 = AFSiriLogContextLocation;
  if (os_log_type_enabled(AFSiriLogContextLocation, OS_LOG_TYPE_INFO))
  {
    int v9 = 136315394;
    int v10 = "-[ADCoreBluetoothV2Device setPersonalVolume:completion:]_block_invoke_2";
    __int16 v11 = 2112;
    id v12 = v7;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "%s Set personal volume response %@", (uint8_t *)&v9, 0x16u);
  }
}

void sub_10023B33C(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 48) coreBluetoothDevice];

  if (!v2)
  {
    id v3 = (void *)AFSiriLogContextLocation;
    if (os_log_type_enabled(AFSiriLogContextLocation, OS_LOG_TYPE_INFO))
    {
      id v4 = *(void **)(*(void *)(a1 + 32) + 48);
      uint64_t v5 = v3;
      uint64_t v6 = [v4 coreBluetoothDevice];
      int v16 = 136315650;
      id v17 = "-[ADCoreBluetoothV2Device getPersonalVolume:]_block_invoke";
      __int16 v18 = 2048;
      id v19 = v4;
      __int16 v20 = 2048;
      uint64_t v21 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "%s CBDevice is unavailable to get personal volume state %p %p", (uint8_t *)&v16, 0x20u);
    }
  }
  id v7 = [*(id *)(*(void *)(a1 + 32) + 48) coreBluetoothDevice];
  unsigned int v8 = [v7 adaptiveVolumeCapability];

  if (v8 == 1)
  {
    int v9 = [*(id *)(*(void *)(a1 + 32) + 48) coreBluetoothDevice];
    unsigned int v10 = [v9 adaptiveVolumeConfig];

    if (v10 == 1)
    {
      uint64_t v11 = 2;
      uint64_t v12 = 1;
    }
    else
    {
      id v13 = AFSiriLogContextLocation;
      uint64_t v12 = 1;
      if (os_log_type_enabled(AFSiriLogContextLocation, OS_LOG_TYPE_INFO))
      {
        int v16 = 136315138;
        id v17 = "-[ADCoreBluetoothV2Device getPersonalVolume:]_block_invoke";
        uint64_t v12 = 1;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "%s Personal volume state is unknown", (uint8_t *)&v16, 0xCu);
      }
      uint64_t v11 = 0;
    }
  }
  else
  {
    uint64_t v11 = 0;
    uint64_t v12 = 3;
  }
  id v14 = [objc_alloc((Class)AFBluetoothDeviceBooleanSettingResponse) initWithValue:v11 status:v12];
  id v15 = AFSiriLogContextLocation;
  if (os_log_type_enabled(AFSiriLogContextLocation, OS_LOG_TYPE_INFO))
  {
    int v16 = 136315394;
    id v17 = "-[ADCoreBluetoothV2Device getPersonalVolume:]_block_invoke";
    __int16 v18 = 2112;
    id v19 = v14;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "%s Get personal volume response %@", (uint8_t *)&v16, 0x16u);
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_10023B654(uint64_t a1)
{
  id v2 = objc_alloc_init(off_100582D18());
  id v3 = v2;
  if (*(unsigned char *)(a1 + 48)) {
    uint64_t v4 = 1;
  }
  else {
    uint64_t v4 = 2;
  }
  [v2 setConversationDetectConfig:v4];
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 8));
  uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 48);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  void v7[2] = sub_10023B740;
  v7[3] = &unk_1005078C0;
  id v8 = *(id *)(a1 + 40);
  char v9 = *(unsigned char *)(a1 + 48);
  [WeakRetained sendDeviceConfig:v3 device:v6 completion:v7];
}

void sub_10023B740(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc((Class)AFBluetoothDeviceBooleanSettingResponse);
  if (v3)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 2;
  }
  else
  {
    if (*(unsigned char *)(a1 + 40)) {
      uint64_t v5 = 2;
    }
    else {
      uint64_t v5 = 1;
    }
    uint64_t v6 = 1;
  }
  id v7 = [v4 initWithValue:v5 status:v6];
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  id v8 = AFSiriLogContextLocation;
  if (os_log_type_enabled(AFSiriLogContextLocation, OS_LOG_TYPE_INFO))
  {
    int v9 = 136315394;
    unsigned int v10 = "-[ADCoreBluetoothV2Device setConversationAwareness:completion:]_block_invoke_2";
    __int16 v11 = 2112;
    id v12 = v7;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "%s Set conversation awareness response %@", (uint8_t *)&v9, 0x16u);
  }
}

void sub_10023B904(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 48) coreBluetoothDevice];

  if (!v2)
  {
    id v3 = (void *)AFSiriLogContextLocation;
    if (os_log_type_enabled(AFSiriLogContextLocation, OS_LOG_TYPE_INFO))
    {
      id v4 = *(void **)(*(void *)(a1 + 32) + 48);
      uint64_t v5 = v3;
      uint64_t v6 = [v4 coreBluetoothDevice];
      int v16 = 136315650;
      id v17 = "-[ADCoreBluetoothV2Device getConversationAwareness:]_block_invoke";
      __int16 v18 = 2048;
      id v19 = v4;
      __int16 v20 = 2048;
      uint64_t v21 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "%s CBDevice is unavailable to get conversation awareness state %p %p", (uint8_t *)&v16, 0x20u);
    }
  }
  id v7 = [*(id *)(*(void *)(a1 + 32) + 48) coreBluetoothDevice];
  unsigned int v8 = [v7 conversationDetectCapability];

  if (v8 == 1)
  {
    int v9 = [*(id *)(*(void *)(a1 + 32) + 48) coreBluetoothDevice];
    unsigned int v10 = [v9 conversationDetectConfig];

    if (v10 == 1)
    {
      uint64_t v11 = 2;
      uint64_t v12 = 1;
    }
    else
    {
      id v13 = AFSiriLogContextLocation;
      uint64_t v12 = 1;
      if (os_log_type_enabled(AFSiriLogContextLocation, OS_LOG_TYPE_INFO))
      {
        int v16 = 136315138;
        id v17 = "-[ADCoreBluetoothV2Device getConversationAwareness:]_block_invoke";
        uint64_t v12 = 1;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "%s Conversation awareness state is unknown", (uint8_t *)&v16, 0xCu);
      }
      uint64_t v11 = 0;
    }
  }
  else
  {
    uint64_t v11 = 0;
    uint64_t v12 = 3;
  }
  id v14 = [objc_alloc((Class)AFBluetoothDeviceBooleanSettingResponse) initWithValue:v11 status:v12];
  id v15 = AFSiriLogContextLocation;
  if (os_log_type_enabled(AFSiriLogContextLocation, OS_LOG_TYPE_INFO))
  {
    int v16 = 136315394;
    id v17 = "-[ADCoreBluetoothV2Device getConversationAwareness:]_block_invoke";
    __int16 v18 = 2112;
    id v19 = v14;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "%s Get conversation awareness response %@", (uint8_t *)&v16, 0x16u);
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_10023BC1C(uint64_t a1)
{
  id v2 = objc_alloc_init(off_100582D18());
  id v3 = v2;
  if ((unint64_t)(*(void *)(a1 + 48) - 2) < 4) {
    uint64_t v4 = (*(_DWORD *)(a1 + 48) - 1);
  }
  else {
    uint64_t v4 = 0;
  }
  [v2 setListeningMode:v4];
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 8));
  uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 48);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  void v7[2] = sub_10023BD00;
  v7[3] = &unk_10050D440;
  id v8 = *(id *)(a1 + 40);
  [WeakRetained sendDeviceConfig:v3 device:v6 completion:v7];
}

uint64_t sub_10023BD00(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10023BDB8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = [*(id *)(a1 + 32) cbuuid];
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

uint64_t sub_10023BF04(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10023BF14(uint64_t a1)
{
}

void sub_10023BF1C(uint64_t a1)
{
}

void sub_10023C020(uint64_t a1)
{
}

uint64_t sub_10023C124(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = *(void **)(v1 + 56);
  if (!v2) {
    id v2 = *(void **)(v1 + 64);
  }
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  id v4 = v2;
  uint64_t v5 = *(void *)(v3 + 40);
  *(void *)(v3 + 40) = v4;
  return _objc_release_x1(v4, v5);
}

void sub_10023C21C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = [*(id *)(a1 + 32) _deviceInfo];
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

uint64_t sub_10023C368(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) _deviceInfo];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 40) = v2;
  return _objc_release_x1(v2, v4);
}

void sub_10023C45C(uint64_t a1)
{
  [*(id *)(*(void *)(a1 + 32) + 16) removeObject:*(void *)(a1 + 40)];
  if (![*(id *)(*(void *)(a1 + 32) + 16) count])
  {
    id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 8));

    uint64_t v3 = *(id **)(a1 + 32);
    if (WeakRetained)
    {
      id v6 = objc_loadWeakRetained(v3 + 1);
      uint64_t v4 = [*(id *)(a1 + 32) address];
      uint64_t v5 = [*(id *)(a1 + 32) cbuuid];
      [v6 invalidateDeviceWithAddress:v4 cbuuid:v5];
    }
    else
    {
      [v3 _invalidate];
    }
  }
}

id sub_10023C5EC(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 16);
  if (!v2)
  {
    uint64_t v3 = +[NSHashTable weakObjectsHashTable];
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void **)(v4 + 16);
    *(void *)(v4 + 16) = v3;

    uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 16);
  }
  uint64_t v6 = *(void *)(a1 + 40);
  return [v2 addObject:v6];
}

void sub_10023C6DC(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (objc_opt_respondsToSelector()) {
    [v3 bluetoothDeviceDidInvalidate:*(void *)(a1 + 32)];
  }
}

id sub_10023C7B0(uint64_t a1)
{
  return [*(id *)(a1 + 32) _invalidate];
}

void sub_10023CA6C(uint64_t a1)
{
  objc_storeStrong((id *)(*(void *)(a1 + 32) + 56), *(id *)(a1 + 40));
  uint64_t v2 = *(void **)(a1 + 48);
  id v3 = (id *)(*(void *)(a1 + 32) + 64);
  objc_storeStrong(v3, v2);
}

void sub_10023CAB4(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v3 = [WeakRetained address];

  if (v3)
  {
    id v4 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 8));
    uint64_t v5 = [WeakRetained address];
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    id v14[2] = sub_10023CC6C;
    v14[3] = &unk_100507870;
    id v15 = *(id *)(a1 + 32);
    id v16 = WeakRetained;
    [v4 fetchAudioAccessoryDeviceForBTAddress:v5 completion:v14];

    uint64_t v6 = v15;
  }
  else
  {
    id v7 = [WeakRetained cbuuid];

    uint64_t v8 = *(void *)(a1 + 32);
    if (!v7)
    {
      dispatch_group_leave(*(dispatch_group_t *)(v8 + 40));
      goto LABEL_6;
    }
    id v9 = objc_loadWeakRetained((id *)(v8 + 8));
    unsigned int v10 = [WeakRetained cbuuid];
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    void v11[2] = sub_10023CD40;
    void v11[3] = &unk_100507870;
    id v12 = *(id *)(a1 + 32);
    id v13 = WeakRetained;
    [v9 fetchAudioAccessoryDeviceForCBUUID:v10 completion:v11];

    uint64_t v6 = v12;
  }

LABEL_6:
}

void sub_10023CC6C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    id v4 = *(void **)(a1 + 32);
    uint64_t v5 = v4[4];
    id v7 = _NSConcreteStackBlock;
    uint64_t v8 = 3221225472;
    id v9 = sub_10023CE9C;
    unsigned int v10 = &unk_10050E160;
    uint64_t v11 = v4;
    id v6 = v3;
    id v12 = v6;
    dispatch_async(v5, &v7);
    objc_msgSend(*(id *)(a1 + 40), "updateDevice:", v6, v7, v8, v9, v10);
  }
  dispatch_group_leave(*(dispatch_group_t *)(*(void *)(a1 + 32) + 40));
}

void sub_10023CD40(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (v3)
  {
    uint64_t v5 = *(NSObject **)(*(void *)(a1 + 32) + 32);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10023CE1C;
    block[3] = &unk_10050DCB8;
    id v7 = v3;
    id v8 = *(id *)(a1 + 32);
    id v9 = *(id *)(a1 + 40);
    dispatch_async(v5, block);
  }
  dispatch_group_leave(*(dispatch_group_t *)(*(void *)(a1 + 32) + 40));
}

id sub_10023CE1C(uint64_t a1)
{
  id result = *(id *)(a1 + 32);
  if (result)
  {
    uint64_t v3 = [result bluetoothAddress];
    uint64_t v4 = *(void *)(a1 + 40);
    uint64_t v5 = *(void **)(v4 + 56);
    *(void *)(v4 + 56) = v3;

    uint64_t v6 = [*(id *)(a1 + 32) identifier];
    uint64_t v7 = *(void *)(a1 + 40);
    id v8 = *(void **)(v7 + 64);
    *(void *)(v7 + 64) = v6;

    id v9 = *(void **)(a1 + 48);
    uint64_t v10 = *(void *)(a1 + 32);
    return [v9 updateDevice:v10];
  }
  return result;
}

uint64_t sub_10023CE9C(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 40) identifier];
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void *)(v3 + 64);
  *(void *)(v3 + 64) = v2;
  return _objc_release_x1(v2, v4);
}

void sub_10023D014(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10023D03C(uint64_t a1)
{
  uint64_t v2 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    int v4 = 136315394;
    uint64_t v5 = "-[ADCallNotificationObserver _resetCallNotificationTimer]_block_invoke";
    __int16 v6 = 2050;
    uint64_t v7 = 0x403E000000000000;
    _os_log_debug_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s Call notification ringtone timed out after %{public}.2f seconds", (uint8_t *)&v4, 0x16u);
  }
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _invokeRingtoneTimeout];
}

void sub_10023D638(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class sub_10023D664(uint64_t a1)
{
  v6[0] = 0;
  if (!qword_100585FB0)
  {
    v6[1] = _NSConcreteStackBlock;
    void v6[2] = (void *)3221225472;
    v6[3] = sub_10023DB80;
    void v6[4] = &unk_10050E350;
    void v6[5] = v6;
    long long v7 = off_100507A38;
    uint64_t v8 = 0;
    qword_100585FB0 = _sl_dlopen();
  }
  if (!qword_100585FB0)
  {
    uint64_t v3 = +[NSAssertionHandler currentHandler];
    int v4 = +[NSString stringWithUTF8String:"void *CoreServicesLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"ADCallNotificationObserver.m", 28, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("LSApplicationRecord");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    uint64_t v3 = +[NSAssertionHandler currentHandler];
    uint64_t v5 = +[NSString stringWithUTF8String:"Class getLSApplicationRecordClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"ADCallNotificationObserver.m", 29, @"Unable to find class %s", "LSApplicationRecord");

LABEL_10:
    __break(1u);
  }
  qword_100585FA8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_10023D850(uint64_t a1)
{
  sub_10023D968();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("INAppInfo");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_100585FB8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v2 = +[NSAssertionHandler currentHandler];
    uint64_t v3 = +[NSString stringWithUTF8String:"Class getINAppInfoClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"ADCallNotificationObserver.m", 37, @"Unable to find class %s", "INAppInfo");

    __break(1u);
  }
}

void *sub_10023D918(uint64_t a1)
{
  uint64_t v2 = sub_10023D968();
  Class result = dlsym(v2, "INAnswerCallIntentIdentifier");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_100585FC8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_10023D968()
{
  v4[0] = 0;
  if (!qword_100585FC0)
  {
    v4[1] = _NSConcreteStackBlock;
    v4[2] = (void *)3221225472;
    v4[3] = sub_10023DB0C;
    void v4[4] = &unk_10050E350;
    void v4[5] = v4;
    long long v5 = off_100507A50;
    uint64_t v6 = 0;
    qword_100585FC0 = _sl_dlopen();
  }
  id v0 = (void *)qword_100585FC0;
  if (!qword_100585FC0)
  {
    id v0 = +[NSAssertionHandler currentHandler];
    uint64_t v3 = +[NSString stringWithUTF8String:"void *IntentsLibrary(void)"];
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v3, @"ADCallNotificationObserver.m", 36, @"%s", v4[0]);

    __break(1u);
    goto LABEL_7;
  }
  uint64_t v1 = v4[0];
  if (v4[0]) {
LABEL_7:
  }
    free(v1);
  return v0;
}

void *sub_10023DABC(uint64_t a1)
{
  uint64_t v2 = sub_10023D968();
  Class result = dlsym(v2, "INHangUpCallIntentIdentifier");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_100585FD0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_10023DB0C()
{
  uint64_t result = _sl_dlopen();
  qword_100585FC0 = result;
  return result;
}

uint64_t sub_10023DB80()
{
  uint64_t result = _sl_dlopen();
  qword_100585FB0 = result;
  return result;
}

void sub_10023DC8C(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 16);
  uint64_t v3 = [*(id *)(a1 + 40) bulletinID];
  LODWORD(v2) = [v2 containsObject:v3];

  if (v2)
  {
    int v4 = *(void **)(*(void *)(a1 + 32) + 16);
    long long v5 = [*(id *)(a1 + 40) bulletinID];
    [v4 removeObject:v5];

    uint64_t v6 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v7 = *(void *)(a1 + 40);
      int v8 = 136315394;
      id v9 = "-[ADCallNotificationObserver notificationManager:didRemoveBulletin:]_block_invoke";
      __int16 v10 = 2112;
      uint64_t v11 = v7;
      _os_log_debug_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "%s Incoming call notification removed: %@", (uint8_t *)&v8, 0x16u);
    }
    if (![*(id *)(*(void *)(a1 + 32) + 16) count]) {
      [*(id *)(a1 + 32) _cancelCallNotificationTimer];
    }
  }
}

void sub_10023DE54(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) bbBulletin];
  uint64_t v3 = [v2 contentType];
  uint64_t v19 = 0;
  __int16 v20 = &v19;
  uint64_t v21 = 0x2020000000;
  int v4 = (void *)qword_100585F98;
  uint64_t v22 = qword_100585F98;
  if (!qword_100585F98)
  {
    *(void *)long long buf = _NSConcreteStackBlock;
    *(void *)&buf[8] = 3221225472;
    *(void *)&buf[16] = sub_10023E17C;
    id v24 = &unk_10050E318;
    __int16 v25 = &v19;
    sub_10023E17C(buf);
    int v4 = (void *)v20[3];
  }
  _Block_object_dispose(&v19, 8);
  if (!v4)
  {
    id v17 = +[NSAssertionHandler currentHandler];
    __int16 v18 = +[NSString stringWithUTF8String:"NSString *getBBBulletinContentTypeIncomingCall(void)"];
    objc_msgSend(v17, "handleFailureInFunction:file:lineNumber:description:", v18, @"ADCallNotificationObserver.m", 23, @"%s", dlerror());

    __break(1u);
  }
  if ([v3 isEqualToString:*v4])
  {
    long long v5 = [v2 sound];
    BOOL v6 = [v5 alertType] == (id)1;

    if (v6)
    {
      uint64_t v7 = *(void **)(a1 + 40);
      int v8 = [v2 sectionID];
      LODWORD(v7) = [v7 _answerAndHangUpIntentsSupportedByBundleID:v8];

      if (v7)
      {
        id v9 = *(void **)(*(void *)(a1 + 40) + 16);
        __int16 v10 = [*(id *)(a1 + 32) bulletinID];
        [v9 addObject:v10];

        uint64_t v11 = AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v16 = *(void *)(a1 + 32);
          *(_DWORD *)long long buf = 136315394;
          *(void *)&uint8_t buf[4] = "-[ADCallNotificationObserver notificationManager:didAddBulletin:]_block_invoke";
          *(_WORD *)&buf[12] = 2112;
          *(void *)&buf[14] = v16;
          _os_log_debug_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "%s Incoming call notification added: %@", buf, 0x16u);
        }
        [*(id *)(a1 + 40) _resetCallNotificationTimer];
      }
      else
      {
        id v12 = (void *)AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
        {
          id v13 = *(void **)(a1 + 32);
          id v14 = v12;
          id v15 = [v13 sectionID];
          *(_DWORD *)long long buf = 136315394;
          *(void *)&uint8_t buf[4] = "-[ADCallNotificationObserver notificationManager:didAddBulletin:]_block_invoke";
          *(_WORD *)&buf[12] = 2112;
          *(void *)&buf[14] = v15;
          _os_log_debug_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "%s Incoming call notification ignored by ADCallNotificationObserver because %@ does not support INAnswerCall or INHangUpCall intents", buf, 0x16u);
        }
      }
    }
  }
  else
  {
  }
}

void sub_10023E15C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *sub_10023E17C(void *a1)
{
  v5[0] = 0;
  if (!qword_100585FA0)
  {
    v5[1] = _NSConcreteStackBlock;
    void v5[2] = (void *)3221225472;
    v5[3] = sub_10023E300;
    void v5[4] = &unk_10050E350;
    void v5[5] = v5;
    long long v6 = off_100507A20;
    uint64_t v7 = 0;
    qword_100585FA0 = _sl_dlopen();
  }
  uint64_t v2 = (void *)qword_100585FA0;
  if (!qword_100585FA0)
  {
    a1 = +[NSAssertionHandler currentHandler];
    uint64_t v2 = +[NSString stringWithUTF8String:"void *BulletinBoardLibrary(void)"];
    objc_msgSend(a1, "handleFailureInFunction:file:lineNumber:description:", v2, @"ADCallNotificationObserver.m", 21, @"%s", v5[0]);

    __break(1u);
    goto LABEL_7;
  }
  uint64_t v3 = v5[0];
  if (v5[0]) {
LABEL_7:
  }
    free(v3);
  uint64_t result = dlsym(v2, "BBBulletinContentTypeIncomingCall");
  *(void *)(*(void *)(a1[4] + 8) + 24) = result;
  qword_100585F98 = *(void *)(*(void *)(a1[4] + 8) + 24);
  return result;
}

uint64_t sub_10023E300()
{
  uint64_t result = _sl_dlopen();
  qword_100585FA0 = result;
  return result;
}

id sub_10023E550()
{
  if (qword_100585FE0 != -1) {
    dispatch_once(&qword_100585FE0, &stru_100507A88);
  }
  id v0 = (void *)qword_100585FD8;
  return v0;
}

void sub_10023E5A4(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  uint64_t v2 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v7 = 136315394;
    int v8 = "-[ADManagedStorageConnection resetKnowledgeStoreWithName:completion:]_block_invoke";
    __int16 v9 = 2112;
    uint64_t v10 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s %@", (uint8_t *)&v7, 0x16u);
  }
  int v4 = [*(id *)(a1 + 40) _defaultStoreSpecificKeyPrefixForName:*(void *)(a1 + 32)];
  id v5 = [objc_alloc((Class)CKGenericCondition) initWithMatchType:0 value:v4 negated:0];
  long long v6 = [*(id *)(a1 + 40) _storeWithName:*(void *)(a1 + 32)];
  [v6 removeValuesMatching:v5 completionHandler:&stru_100507A68];

  [*(id *)(*(void *)(a1 + 40) + 8) removeObjectForKey:*(void *)(a1 + 32)];
}

void sub_10023E6E0(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  if (v2)
  {
    uint64_t v3 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      int v4 = 136315394;
      id v5 = "-[ADManagedStorageConnection resetKnowledgeStoreWithName:completion:]_block_invoke";
      __int16 v6 = 2112;
      int v7 = v2;
      _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "%s %@", (uint8_t *)&v4, 0x16u);
    }
  }
}

void sub_10023E7A8(id a1)
{
  uint64_t v1 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  dispatch_queue_t v2 = dispatch_queue_create("_ADGlobalKnowledgeStoreQueue_block_invoke", v1);

  uint64_t v3 = (void *)qword_100585FD8;
  qword_100585FD8 = (uint64_t)v2;
}

void sub_10023E908(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    dispatch_queue_t v2 = objc_msgSend(*(id *)(a1 + 40), "_defaultStoreSpecificKeyForName:key:", *(void *)(a1 + 48));
    uint64_t v3 = [*(id *)(a1 + 40) _storeWithName:*(void *)(a1 + 48)];
    int v4 = [v3 valueForKey:v2];
  }
  else
  {
    int v4 = 0;
  }
  id v5 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v6 = *(void *)(a1 + 48);
    int v7 = 136315650;
    int v8 = "-[ADManagedStorageConnection getKnowledgeStoreDataForKey:inStoreWithName:completion:]_block_invoke";
    __int16 v9 = 2112;
    uint64_t v10 = v6;
    __int16 v11 = 2112;
    id v12 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "%s %@ %@", (uint8_t *)&v7, 0x20u);
  }
  (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
}

void sub_10023EB54(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
  dispatch_queue_t v2 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v8 = 136315394;
    __int16 v9 = "-[ADManagedStorageConnection setKnowledgeStoreData:forKey:inStoreWithName:completion:]_block_invoke";
    __int16 v10 = 2112;
    uint64_t v11 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s %@", (uint8_t *)&v8, 0x16u);
  }
  if (*(void *)(a1 + 40))
  {
    int v4 = objc_msgSend(*(id *)(a1 + 48), "_defaultStoreSpecificKeyForName:key:", *(void *)(a1 + 32));
    uint64_t v5 = *(void *)(a1 + 56);
    uint64_t v6 = [*(id *)(a1 + 48) _storeWithName:*(void *)(a1 + 32)];
    int v7 = v6;
    if (v5) {
      [v6 setValue:*(void *)(a1 + 56) forKey:v4];
    }
    else {
      [v6 removeValueForKey:v4 error:0];
    }
  }
}

void sub_10023FA90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

void sub_10023FAB0(uint64_t a1)
{
  dispatch_queue_t v2 = [*(id *)(a1 + 32) objectForKey:*(void *)(a1 + 40)];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = v2 != 0;
}

id sub_10023FB04(uint64_t a1)
{
  return [*(id *)(a1 + 32) setObject:*(void *)(a1 + 48) forKeyedSubscript:*(void *)(a1 + 40)];
}

void sub_10023FB14(uint64_t a1, void *a2)
{
  if ([a2 isEqualToString:*(void *)(a1 + 32)])
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10023FCC4;
    block[3] = &unk_10050DCB8;
    uint64_t v3 = *(NSObject **)(a1 + 40);
    id v7 = *(id *)(a1 + 48);
    id v4 = *(id *)(a1 + 56);
    uint64_t v5 = *(void *)(a1 + 64);
    id v8 = v4;
    uint64_t v9 = v5;
    dispatch_async(v3, block);
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 72));
}

uint64_t sub_10023FBD0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10023FBE0(uint64_t a1)
{
}

void sub_10023FBE8(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) allValues];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  uint64_t v5 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v6 = *(void *)(a1 + 32);
    int v7 = 136315394;
    id v8 = "-[ADCompanionService getDevicesDiscoveredNearbyForUserID:]_block_invoke";
    __int16 v9 = 2112;
    uint64_t v10 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "%s user specific devices: %@", (uint8_t *)&v7, 0x16u);
  }
}

id sub_10023FCC4(uint64_t a1)
{
  return [*(id *)(a1 + 32) setObject:*(void *)(a1 + 48) forKeyedSubscript:*(void *)(a1 + 40)];
}

id sub_1002401C4(uint64_t a1)
{
  uint64_t v2 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v4 = 136315138;
    uint64_t v5 = "-[ADCompanionService _scheduleOrExtendAWDLClientLinkTimer]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s timer went off in _scheduleAWDLClientLinkTimer", (uint8_t *)&v4, 0xCu);
  }
  return [*(id *)(a1 + 32) invalidateClientAWDLTransportLink];
}

void sub_100241404(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v2 = *(void **)(a1 + 40);
  uint64_t v4 = v2[16];
  uint64_t v5 = AFSiriLogContextDaemon;
  BOOL v6 = os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO);
  if (v3 == v4)
  {
    if (v6)
    {
      *(_DWORD *)long long buf = 136315138;
      id v15 = "-[ADCompanionService rapportLinkDidInvalidate:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "%s AWDL client link invalidated", buf, 0xCu);
      uint64_t v2 = *(void **)(a1 + 40);
    }
    [v2 invalidateClientAWDLTransportLink];
  }
  else
  {
    if (v6)
    {
      *(_DWORD *)long long buf = 136315138;
      id v15 = "-[ADCompanionService rapportLinkDidInvalidate:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "%s companion service connection invalidated", buf, 0xCu);
      uint64_t v2 = *(void **)(a1 + 40);
    }
    int v7 = [v2 playbackDeviceIDs];
    [v7 removeAllObjects];

    [*(id *)(a1 + 32) removeListener:*(void *)(a1 + 40)];
    uint64_t v8 = *(void *)(a1 + 40);
    __int16 v9 = *(void **)(v8 + 152);
    *(void *)(v8 + 152) = 0;

    dispatch_time_t v10 = dispatch_time(0, 20000000000);
    uint64_t v11 = *(void *)(a1 + 40);
    id v12 = *(NSObject **)(v11 + 144);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1002415C0;
    block[3] = &unk_10050E138;
    void block[4] = v11;
    dispatch_after(v10, v12, block);
  }
}

id sub_1002415C0(uint64_t a1)
{
  return [*(id *)(a1 + 32) _setupClientLink];
}

id sub_1002416F0(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v2 = *(void **)(a1 + 40);
  uint64_t v4 = v2[16];
  uint64_t v5 = AFSiriLogContextDaemon;
  BOOL v6 = os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO);
  if (v3 == v4)
  {
    if (v6)
    {
      int v11 = 136315138;
      id v12 = "-[ADCompanionService rapportLinkDidInterrupt:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "%s AWDL client link interrupted", (uint8_t *)&v11, 0xCu);
      uint64_t v2 = *(void **)(a1 + 40);
    }
    return [v2 invalidateClientAWDLTransportLink];
  }
  else
  {
    if (v6)
    {
      int v11 = 136315138;
      id v12 = "-[ADCompanionService rapportLinkDidInterrupt:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "%s companion service connection interrupted", (uint8_t *)&v11, 0xCu);
      uint64_t v2 = *(void **)(a1 + 40);
    }
    int v7 = [v2 playbackDeviceIDs];
    [v7 removeAllObjects];

    [*(id *)(a1 + 32) removeListener:*(void *)(a1 + 40)];
    uint64_t v8 = *(void *)(a1 + 40);
    __int16 v9 = *(void **)(v8 + 152);
    *(void *)(v8 + 152) = 0;

    return [*(id *)(a1 + 40) _setupClientLink];
  }
}

void sub_1002424B8(uint64_t a1, void *a2)
{
  id v16 = a2;
  if (!v16) {
    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  }
  uint64_t v3 = dispatch_group_create();
  id v4 = objc_alloc_init((Class)NSMutableArray);
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  id obj = *(id *)(a1 + 32);
  id v5 = [obj countByEnumeratingWithState:&v25 objects:v29 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v26;
    do
    {
      for (i = 0; i != v6; i = (char *)i + 1)
      {
        if (*(void *)v26 != v7) {
          objc_enumerationMutation(obj);
        }
        __int16 v9 = *(void **)(*((void *)&v25 + 1) + 8 * i);
        dispatch_group_enter(v3);
        dispatch_time_t v10 = *(void **)(a1 + 40);
        int v11 = [v9 homeKitIdentifier];
        v20[0] = _NSConcreteStackBlock;
        v20[1] = 3221225472;
        void v20[2] = sub_100242744;
        v20[3] = &unk_100507FB0;
        void v20[4] = *(void *)(a1 + 48);
        id v21 = v16;
        id v22 = v4;
        __int16 v23 = v9;
        id v24 = v3;
        [v10 getHomeIdForAccessoryId:v11 completion:v20];
      }
      id v6 = [obj countByEnumeratingWithState:&v25 objects:v29 count:16];
    }
    while (v6);
  }

  id v12 = *(NSObject **)(*(void *)(a1 + 48) + 144);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100242828;
  block[3] = &unk_10050E188;
  id v13 = *(id *)(a1 + 56);
  id v18 = v4;
  id v19 = v13;
  id v14 = v4;
  dispatch_group_notify(v3, v12, block);
}

void sub_100242744(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(NSObject **)(*(void *)(a1 + 32) + 144);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10024283C;
  block[3] = &unk_100507F88;
  id v10 = v3;
  id v11 = *(id *)(a1 + 40);
  id v5 = *(id *)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 56);
  uint64_t v7 = *(void **)(a1 + 64);
  id v12 = v5;
  uint64_t v13 = v6;
  id v14 = v7;
  id v8 = v3;
  dispatch_async(v4, block);
}

uint64_t sub_100242828(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_10024283C(uint64_t a1)
{
  if ([*(id *)(a1 + 32) isEqual:*(void *)(a1 + 40)]) {
    [*(id *)(a1 + 48) addObject:*(void *)(a1 + 56)];
  }
  uint64_t v2 = *(NSObject **)(a1 + 64);
  dispatch_group_leave(v2);
}

id sub_100242FF8(uint64_t a1, void *a2)
{
  return [a2 setHomeKitAccessoryIdentifier:*(void *)(a1 + 32)];
}

id sub_100243134(uint64_t a1, void *a2)
{
  return [a2 setIdsDeviceUniqueIdentifier:*(void *)(a1 + 32)];
}

void sub_100244EC8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    id v2 = +[AFError errorWithCode:1007];
    (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
  }
}

void sub_100244F44(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id v10 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    id v11 = *(void **)(a1 + 32);
    int v14 = 136316162;
    id v15 = "-[ADCompanionService _sendHeartbeatMessage:targetDeviceIdentifier:timeout:completion:]_block_invoke";
    __int16 v16 = 2112;
    id v17 = v11;
    __int16 v18 = 2112;
    id v19 = v7;
    __int16 v20 = 2112;
    id v21 = v8;
    __int16 v22 = 2112;
    id v23 = v9;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "%s heartbeat request response : %@ %@ %@ %@", (uint8_t *)&v14, 0x34u);
  }
  if (*(unsigned char *)(a1 + 56)
    && ([*(id *)(a1 + 40) _cancelTimerForMessage:*(void *)(a1 + 32)] & 1) == 0)
  {
    uint64_t v13 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      int v14 = 136315394;
      id v15 = "-[ADCompanionService _sendHeartbeatMessage:targetDeviceIdentifier:timeout:completion:]_block_invoke";
      __int16 v16 = 2112;
      id v17 = v9;
      _os_log_error_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "%s message timed out, ignoring error %@", (uint8_t *)&v14, 0x16u);
    }
  }
  else
  {
    uint64_t v12 = *(void *)(a1 + 48);
    if (v12) {
      (*(void (**)(uint64_t, id))(v12 + 16))(v12, v9);
    }
  }
}

void sub_1002456E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,id location)
{
  objc_destroyWeak(v29);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100245734(uint64_t a1)
{
  id v2 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    *(_DWORD *)long long buf = 136315394;
    id v19 = "-[ADCompanionService _startTimerForMessage:targetDevice:timeout:heartbeat:completion:]_block_invoke";
    __int16 v20 = 2112;
    uint64_t v21 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s heartbeat fired: %@", buf, 0x16u);
  }
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  id v5 = [WeakRetained timerInfo];
  uint64_t v6 = [v5 objectForKey:*(void *)(a1 + 32)];
  id v7 = [v6 requestTimer];

  if (v7 && ([v7 isStopped] & 1) == 0)
  {
    double v10 = *(double *)(a1 + 64);
    double v11 = *(double *)(a1 + 72);
    id v12 = [*(id *)(a1 + 40) _newRequestDictionary];
    [v12 setObject:*(void *)(a1 + 32) forKey:@"hbMessageID"];
    uint64_t v13 = *(void **)(a1 + 40);
    uint64_t v14 = *(void *)(a1 + 48);
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472;
    void v15[2] = sub_100245AB8;
    v15[3] = &unk_100507F10;
    objc_copyWeak(&v17, (id *)(a1 + 56));
    id v16 = *(id *)(a1 + 32);
    [v13 _sendHeartbeatMessage:v12 targetDeviceIdentifier:v14 timeout:v15 completion:(v10 - v11) * 0.949999988];

    objc_destroyWeak(&v17);
  }
  else
  {
    id v8 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      uint64_t v9 = *(void *)(a1 + 32);
      *(_DWORD *)long long buf = 136315394;
      id v19 = "-[ADCompanionService _startTimerForMessage:targetDevice:timeout:heartbeat:completion:]_block_invoke";
      __int16 v20 = 2112;
      uint64_t v21 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "%s timer already fired: %@", buf, 0x16u);
    }
  }
}

void sub_100245998(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1002459B4(uint64_t a1)
{
  id v2 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
  {
    uint64_t v6 = *(void *)(a1 + 32);
    int v7 = 136315394;
    id v8 = "-[ADCompanionService _startTimerForMessage:targetDevice:timeout:heartbeat:completion:]_block_invoke";
    __int16 v9 = 2112;
    uint64_t v10 = v6;
    _os_log_error_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "%s request timed out: %@", (uint8_t *)&v7, 0x16u);
  }
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  id v4 = [WeakRetained timerInfo];
  [v4 removeObjectForKey:*(void *)(a1 + 32)];

  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_100245AB8(uint64_t a1, uint64_t a2)
{
  if (!a2)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    id v4 = [WeakRetained timerInfo];
    id v5 = [v4 objectForKey:*(void *)(a1 + 32)];

    uint64_t v6 = [v5 requestTimer];
    int v7 = v6;
    if (v6 && ([v6 isStopped] & 1) == 0)
    {
      double v11 = +[NSProcessInfo processInfo];
      [v11 systemUptime];
      double v13 = v12;
      [v5 startTime];
      double v15 = vabdd_f64(v13, v14);

      id v8 = AFSiriLogContextDaemon;
      BOOL v16 = os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO);
      if (v15 < 300.0)
      {
        if (v16)
        {
          uint64_t v17 = *(void *)(a1 + 32);
          int v23 = 136315394;
          id v24 = "-[ADCompanionService _startTimerForMessage:targetDevice:timeout:heartbeat:completion:]_block_invoke";
          __int16 v25 = 2112;
          uint64_t v26 = v17;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "%s resetting timer: %@", (uint8_t *)&v23, 0x16u);
        }
        [v7 reset];
        __int16 v18 = [v5 heartbeatTimer];
        if (v18)
        {
          id v19 = AFSiriLogContextDaemon;
          if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
          {
            uint64_t v20 = *(void *)(a1 + 32);
            int v23 = 136315394;
            id v24 = "-[ADCompanionService _startTimerForMessage:targetDevice:timeout:heartbeat:completion:]_block_invoke";
            __int16 v25 = 2112;
            uint64_t v26 = v20;
            _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "%s resetting heartbeat timer: %@", (uint8_t *)&v23, 0x16u);
          }
          id v21 = [v18 copy];
          [v5 setHeartbeatTimer:v21];
          [v21 start];
        }
        goto LABEL_17;
      }
      if (v16)
      {
        uint64_t v22 = *(void *)(a1 + 32);
        int v23 = 136315394;
        id v24 = "-[ADCompanionService _startTimerForMessage:targetDevice:timeout:heartbeat:completion:]_block_invoke";
        __int16 v25 = 2112;
        uint64_t v26 = v22;
        uint64_t v10 = "%s timer exceeded max timeout: %@";
        goto LABEL_6;
      }
    }
    else
    {
      id v8 = AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
      {
        uint64_t v9 = *(void *)(a1 + 32);
        int v23 = 136315394;
        id v24 = "-[ADCompanionService _startTimerForMessage:targetDevice:timeout:heartbeat:completion:]_block_invoke";
        __int16 v25 = 2112;
        uint64_t v26 = v9;
        uint64_t v10 = "%s timer already stopped: %@";
LABEL_6:
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, v10, (uint8_t *)&v23, 0x16u);
      }
    }
LABEL_17:
  }
}

void sub_100245EA8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  if (*(void *)(v1 + 152))
  {
    id v3 = [*(id *)(v1 + 88) dictionaryRepresentation];
    (*(void (**)(uint64_t, id, void))(v2 + 16))(v2, v3, 0);
  }
  else
  {
    id v3 = +[AFError errorWithCode:1009];
    (*(void (**)(uint64_t, void, id))(v2 + 16))(v2, 0, v3);
  }
}

void sub_100246068(uint64_t a1)
{
  BOOL v16 = objc_opt_new();
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 152) activeDevices];
  id v3 = [v2 countByEnumeratingWithState:&v17 objects:v25 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v18;
    do
    {
      for (i = 0; i != v4; i = (char *)i + 1)
      {
        if (*(void *)v18 != v5) {
          objc_enumerationMutation(v2);
        }
        int v7 = *(void **)(*((void *)&v17 + 1) + 8 * i);
        id v8 = *(void **)(*(void *)(a1 + 32) + 80);
        uint64_t v9 = [v7 identifier];
        uint64_t v10 = [v8 objectForKey:v9];
        if (v10)
        {
          double v11 = (void *)v10;
          double v12 = [*(id *)(*(void *)(a1 + 32) + 152) localDevice];
          unsigned int v13 = [v7 hasValidDiscoveryTypeForLocalDevice:v12];

          if (!v13) {
            continue;
          }
          uint64_t v9 = [*(id *)(a1 + 32) _remotePlaybackDeviceForDevice:v7];
          if (v9) {
            [v16 addObject:v9];
          }
        }
      }
      id v4 = [v2 countByEnumeratingWithState:&v17 objects:v25 count:16];
    }
    while (v4);
  }

  id v14 = [v16 count];
  double v15 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)long long buf = 136315394;
    uint64_t v22 = "-[ADCompanionService getPlaybackDeviceListWithCompletion:]_block_invoke";
    __int16 v23 = 2048;
    id v24 = v14;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "%s Found %lu playback device(s)", buf, 0x16u);
  }
  if (v14)
  {
    id v14 = objc_alloc_init((Class)SARemotePlaybackDeviceList);
    [v14 setRemotePlaybackDevices:v16];
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_1002464FC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    int v7 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136315394;
      long long v18 = "-[ADCompanionService _updateHashedRouteIDForDevice:]_block_invoke";
      __int16 v19 = 2112;
      id v20 = v6;
      _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "%s unable to hash route id: %@", buf, 0x16u);
    }
  }
  else
  {
    id v8 = [v5 base64EncodedStringWithOptions:0];
    if (v8)
    {
      uint64_t v9 = *(void *)(a1 + 40);
      uint64_t v10 = *(NSObject **)(v9 + 144);
      v13[0] = _NSConcreteStackBlock;
      v13[1] = 3221225472;
      _OWORD v13[2] = sub_100246708;
      v13[3] = &unk_10050DC68;
      void v13[4] = v9;
      id v14 = *(id *)(a1 + 32);
      id v15 = *(id *)(a1 + 48);
      id v16 = v8;
      dispatch_async(v10, v13);
    }
    else
    {
      double v11 = AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
      {
        double v12 = *(void **)(a1 + 32);
        *(_DWORD *)long long buf = 136315394;
        long long v18 = "-[ADCompanionService _updateHashedRouteIDForDevice:]_block_invoke";
        __int16 v19 = 2112;
        id v20 = v12;
        _os_log_error_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "%s unable to hash route id for device: %@", buf, 0x16u);
      }
    }
  }
}

void sub_100246708(uint64_t a1)
{
  if (*(void *)(*(void *)(a1 + 32) + 152))
  {
    uint64_t v2 = objc_msgSend(*(id *)(a1 + 40), "_ad_siriSharedDataProtobuf");
    id v3 = *(void **)(a1 + 48);
    id v4 = [v2 airplayRouteId];
    LODWORD(v3) = [v3 isEqualToString:v4];

    if (v3)
    {
      id v5 = *(void **)(*(void *)(a1 + 32) + 80);
      id v6 = [*(id *)(a1 + 40) identifier];
      int v7 = [v5 objectForKey:v6];

      if (v7)
      {
        id v8 = [v7 objectForKey:*(void *)(a1 + 48)];

        if (!v8)
        {
          uint64_t v9 = AFSiriLogContextDaemon;
          if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
          {
            uint64_t v10 = *(void *)(a1 + 40);
            int v12 = 136315394;
            unsigned int v13 = "-[ADCompanionService _updateHashedRouteIDForDevice:]_block_invoke";
            __int16 v14 = 2112;
            uint64_t v15 = v10;
            _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "%s Updated hashed route id for device: %@", (uint8_t *)&v12, 0x16u);
          }
          [v7 setObject:*(void *)(a1 + 56) forKey:*(void *)(a1 + 48)];
          double v11 = +[NSNotificationCenter defaultCenter];
          [v11 postNotificationName:@"ADCompanionServicePlaybackDevicesDidChangeNotification" object:0];
        }
      }
    }
  }
}

void sub_100246D98(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(NSObject **)(v4 + 144);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100246E54;
  block[3] = &unk_10050E1D8;
  void block[4] = v4;
  id v6 = *(id *)(a1 + 40);
  id v9 = v3;
  id v10 = v6;
  id v7 = v3;
  dispatch_async(v5, block);
}

uint64_t sub_100246E54(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(void *)(v2 + 152))
  {
    id v3 = *(void **)(a1 + 40);
    if (v3 != *(void **)(v2 + 96))
    {
      if (!objc_msgSend(v3, "isEqualToString:"))
      {
        id v7 = AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
        {
          int v12 = 136315138;
          unsigned int v13 = "-[ADCompanionService _updateStoreFrontIdentifierWithCompletion:]_block_invoke_2";
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "%s store front identifier updated", (uint8_t *)&v12, 0xCu);
        }
        uint64_t v8 = *(void *)(a1 + 32);
        id v9 = *(id *)(a1 + 40);
        id v10 = *(void **)(v8 + 96);
        *(void *)(v8 + 96) = v9;
        uint64_t v4 = 1;
        goto LABEL_17;
      }
      uint64_t v2 = *(void *)(a1 + 32);
      id v3 = *(void **)(v2 + 96);
    }
    if (v3)
    {
      uint64_t v4 = 0;
      goto LABEL_18;
    }
    double v11 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      int v12 = 136315138;
      unsigned int v13 = "-[ADCompanionService _updateStoreFrontIdentifierWithCompletion:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "%s store front identifier with empty identifier", (uint8_t *)&v12, 0xCu);
      uint64_t v2 = *(void *)(a1 + 32);
    }
    uint64_t v4 = 0;
    id v10 = *(void **)(v2 + 96);
    *(void *)(v2 + 96) = &stru_10050F7D8;
LABEL_17:

LABEL_18:
    uint64_t result = *(void *)(a1 + 48);
    if (result) {
      return (*(uint64_t (**)(uint64_t, uint64_t))(result + 16))(result, v4);
    }
    return result;
  }
  uint64_t result = *(void *)(a1 + 48);
  if (result)
  {
    id v6 = *(uint64_t (**)(void))(result + 16);
    return v6();
  }
  return result;
}

void sub_100247170(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(NSObject **)(v4 + 144);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10024722C;
  block[3] = &unk_10050E1D8;
  id v8 = v3;
  uint64_t v9 = v4;
  id v10 = *(id *)(a1 + 40);
  id v6 = v3;
  dispatch_async(v5, block);
}

void sub_10024722C(void *a1)
{
  id obj = objc_alloc_init(_ADPBDeviceSetDataRequest);
  [(_ADPBDeviceSetDataRequest *)obj _ad_setData:a1[4]];
  objc_storeStrong((id *)(a1[5] + 88), obj);
  uint64_t v2 = a1[6];
  if (v2) {
    (*(void (**)(uint64_t, uint64_t))(v2 + 16))(v2, 1);
  }
}

void sub_1002476C4(uint64_t a1)
{
  if (AFIsInternalInstall())
  {
    uint64_t v2 = AFSiriLogContextPerformance;
    os_signpost_id_t v3 = os_signpost_id_generate(AFSiriLogContextPerformance);
    if (v3 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      os_signpost_id_t v4 = v3;
      if (os_signpost_enabled(v2))
      {
        *(_WORD *)id v7 = 0;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v2, OS_SIGNPOST_EVENT, v4, "CompanionCouldNotReach", "_getSharedDataFromCompanionLinkDevice", v7, 2u);
      }
    }
  }
  uint64_t v5 = *(void *)(a1 + 32);
  if (v5)
  {
    id v6 = +[AFError errorWithCode:1000];
    (*(void (**)(uint64_t, void, void *))(v5 + 16))(v5, 0, v6);
  }
}

void sub_1002477A8(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id v10 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    double v11 = *(void **)(a1 + 32);
    int v19 = 136316162;
    id v20 = "-[ADCompanionService _getSharedDataFromCompanionLinkDevice:completion:]_block_invoke";
    __int16 v21 = 2112;
    id v22 = v11;
    __int16 v23 = 2112;
    id v24 = v7;
    __int16 v25 = 2112;
    id v26 = v8;
    __int16 v27 = 2112;
    id v28 = v9;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "%s request response : %@ %@ %@ %@", (uint8_t *)&v19, 0x34u);
  }
  if (*(unsigned char *)(a1 + 56)
    && ([*(id *)(a1 + 40) _cancelTimerForMessage:*(void *)(a1 + 32)] & 1) == 0)
  {
    __int16 v14 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      int v19 = 136315394;
      id v20 = "-[ADCompanionService _getSharedDataFromCompanionLinkDevice:completion:]_block_invoke";
      __int16 v21 = 2112;
      id v22 = v9;
      _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "%s message timed out, ignoring error %@", (uint8_t *)&v19, 0x16u);
    }
  }
  else
  {
    uint64_t v12 = *(void *)(a1 + 48);
    if (v12)
    {
      if (v9)
      {
        unsigned int v13 = 0;
      }
      else
      {
        uint64_t v15 = [v7 objectForKey:@"sharedDataProtoBuf"];
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          id v16 = [[_ADPBDeviceSetDataRequest alloc] initWithData:v15];
          unsigned int v13 = [(_ADPBDeviceSetDataRequest *)v16 _ad_data];
          if (v13)
          {
            id v9 = 0;
          }
          else
          {
            long long v18 = AFSiriLogContextDaemon;
            if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
            {
              int v19 = 136315138;
              id v20 = "-[ADCompanionService _getSharedDataFromCompanionLinkDevice:completion:]_block_invoke";
              _os_log_error_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "%s received malformed protobuf", (uint8_t *)&v19, 0xCu);
            }
            id v9 = +[AFError errorWithCode:11];
          }
        }
        else
        {
          long long v17 = AFSiriLogContextDaemon;
          if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
          {
            int v19 = 136315138;
            id v20 = "-[ADCompanionService _getSharedDataFromCompanionLinkDevice:completion:]_block_invoke";
            _os_log_error_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "%s received malformed data", (uint8_t *)&v19, 0xCu);
          }
          id v9 = +[AFError errorWithCode:11];
          unsigned int v13 = 0;
        }

        uint64_t v12 = *(void *)(a1 + 48);
      }
      (*(void (**)(uint64_t, void *, id))(v12 + 16))(v12, v13, v9);
    }
  }
}

id sub_100247B24(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _startListening];
}

uint64_t sub_100248040(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, 0);
  }
  return result;
}

void sub_10024805C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id v10 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    double v11 = *(void **)(a1 + 32);
    int v14 = 136316162;
    uint64_t v15 = "-[ADCompanionService _startRemoteRequest:onPeer:completion:]_block_invoke";
    __int16 v16 = 2112;
    id v17 = v11;
    __int16 v18 = 2112;
    id v19 = v7;
    __int16 v20 = 2112;
    id v21 = v8;
    __int16 v22 = 2112;
    id v23 = v9;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "%s remote request response : %@ %@ %@ %@", (uint8_t *)&v14, 0x34u);
  }
  if (*(unsigned char *)(a1 + 56)
    && ([*(id *)(a1 + 40) _cancelTimerForMessage:*(void *)(a1 + 32)] & 1) == 0)
  {
    unsigned int v13 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      int v14 = 136315394;
      uint64_t v15 = "-[ADCompanionService _startRemoteRequest:onPeer:completion:]_block_invoke";
      __int16 v16 = 2112;
      id v17 = v9;
      _os_log_error_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "%s message timed out, ignoring error %@", (uint8_t *)&v14, 0x16u);
    }
  }
  else
  {
    uint64_t v12 = *(void *)(a1 + 48);
    if (v12) {
      (*(void (**)(uint64_t, BOOL))(v12 + 16))(v12, v9 == 0);
    }
  }
}

id sub_100248390(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _startRemoteRequest:*(void *)(a1 + 40) onPeer:*(void *)(a1 + 48) completion:*(void *)(a1 + 56)];
}

void sub_1002487C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,id location)
{
  objc_destroyWeak(v23);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100248804(uint64_t a1)
{
  uint64_t v2 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)long long buf = 136315138;
    id v17 = "-[ADCompanionService _waitForMessageIDs:withContext:timeout:completion:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s MessageWaitContext timing out", buf, 0xCu);
  }
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  os_signpost_id_t v4 = [WeakRetained waitingOnMessageIDs];
  id v5 = [v4 copy];

  long long v13 = 0u;
  long long v14 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  id v6 = v5;
  id v7 = [v6 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v7)
  {
    id v8 = v7;
    uint64_t v9 = *(void *)v12;
    do
    {
      id v10 = 0;
      do
      {
        if (*(void *)v12 != v9) {
          objc_enumerationMutation(v6);
        }
        objc_msgSend(*(id *)(a1 + 32), "_unblockWaitContext:forMessageID:", WeakRetained, *(void *)(*((void *)&v11 + 1) + 8 * (void)v10), (void)v11);
        id v10 = (char *)v10 + 1;
      }
      while (v8 != v10);
      id v8 = [v6 countByEnumeratingWithState:&v11 objects:v15 count:16];
    }
    while (v8);
  }
}

void sub_100249FB4(_Unwind_Exception *a1)
{
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 160));
  _Unwind_Resume(a1);
}

void sub_100249FE8(uint64_t a1, void *a2, int a3)
{
  id v5 = a2;
  id v6 = [*(id *)(a1 + 32) objectForKey:@"messageID"];
  id v7 = objc_alloc_init((Class)HALSchemaHALCompanionDeviceCommunicationEnded);
  id v8 = v7;
  if (a3) {
    uint64_t v9 = 2;
  }
  else {
    uint64_t v9 = 1;
  }
  [v7 setConnectionType:v9];
  id v10 = *(void **)(a1 + 40);
  v55[0] = _NSConcreteStackBlock;
  v55[1] = 3221225472;
  v55[2] = sub_10024AC4C;
  v55[3] = &unk_10050D3F0;
  id v11 = v6;
  id v56 = v11;
  id v45 = v8;
  id v57 = v45;
  int8x16_t v43 = *(int8x16_t *)(a1 + 32);
  id v12 = (id)v43.i64[0];
  int8x16_t v58 = vextq_s8(v43, v43, 8uLL);
  id v59 = *(id *)(a1 + 56);
  unsigned __int8 v44 = [v10 _startTimerForMessage:v11 targetDevice:v5 heartbeat:1 completion:v55];
  [*(id *)(a1 + 40) _recordIntermediateMessageID:v11 forPeer:*(void *)(a1 + 48)];
  long long v13 = (void *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    long long v14 = v13;
    uint64_t v15 = [v5 identifier];
    __int16 v16 = [*(id *)(*(void *)(a1 + 40) + 152) localDevice];
    [v16 identifier];
    v18 = id v17 = v5;
    *(_DWORD *)long long buf = 136315906;
    id v63 = "-[ADCompanionService _executeRemoteRequest:onPeer:allowsRelay:allowFallbackOnAWDL:throughProxyDevice:completio"
          "n:]_block_invoke";
    __int16 v64 = 2112;
    id v65 = v11;
    __int16 v66 = 2112;
    id v67 = v15;
    __int16 v68 = 2112;
    uint64_t v69 = v18;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "%s sending message: %@ to destination: %@ (local: %@)", buf, 0x2Au);

    id v5 = v17;
  }
  id v19 = [*(id *)(a1 + 32) objectForKey:@"command"];
  if (!v19)
  {
    __int16 v20 = [*(id *)(a1 + 32) objectForKey:@"serializedCommand"];
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      id v21 = +[AceObject aceObjectWithPlistData:v20];
      id v19 = [v21 dictionary];
    }
    else
    {
      id v19 = 0;
    }
  }
  os_signpost_id_t v22 = os_signpost_id_generate(AFSiriLogContextPerformance);
  id v23 = AFSiriLogContextPerformance;
  id v24 = v23;
  if (v22 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v23))
  {
    __int16 v25 = [v19 valueForKey:@"$class"];
    *(_DWORD *)long long buf = 138412546;
    id v63 = v25;
    __int16 v64 = 2112;
    id v65 = v11;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v24, OS_SIGNPOST_INTERVAL_BEGIN, v22, "CompanionService", "Sending Execute Remote Request: Class=%@, MessageID=%@", buf, 0x16u);
  }
  uint64_t v26 = 152;
  if (a3) {
    uint64_t v26 = 128;
  }
  __int16 v27 = *(void **)(a1 + 32);
  id v28 = *(void **)(*(void *)(a1 + 40) + v26);
  __int16 v29 = @"iWifi";
  if (a3) {
    __int16 v29 = @"AWDL";
  }
  char v30 = v29;
  id v31 = v28;
  id v32 = [v27 mutableCopy];
  [v32 setObject:v30 forKey:@"messageLinkType"];
  __int16 v41 = v19;
  id v33 = [v32 copy];
  long long v34 = [*(id *)(a1 + 40) _initializeNewMessageWaitContext];
  __int16 v35 = [v5 identifier];
  uint64_t v60 = RPOptionStatusFlags;
  id v61 = &off_1005239F0;
  +[NSDictionary dictionaryWithObjects:&v61 forKeys:&v60 count:1];
  id v36 = v42 = v5;
  v46[0] = _NSConcreteStackBlock;
  v46[1] = 3221225472;
  v46[2] = sub_10024AE00;
  v46[3] = &unk_100507D80;
  unsigned __int8 v54 = v44;
  uint64_t v37 = *(void *)(a1 + 40);
  id v47 = v11;
  uint64_t v48 = v37;
  os_signpost_id_t v53 = v22;
  id v52 = *(id *)(a1 + 56);
  id v49 = v34;
  id v50 = v45;
  id v51 = *(id *)(a1 + 32);
  id v38 = v45;
  id v39 = v34;
  id v40 = v11;
  [v31 sendRequestID:@"com.apple.siri.request.execute.ace.command" request:v33 destinationID:v35 options:v36 responseHandler:v46];
}

void sub_10024A530(uint64_t a1)
{
  uint64_t v2 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    int v6 = 136315138;
    id v7 = "-[ADCompanionService _executeRemoteRequest:onPeer:allowsRelay:allowFallbackOnAWDL:throughProxyDevice:completion:]_block_invoke";
    _os_log_debug_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s setStateUpdateHandler checking if client link is using on demand connection.", (uint8_t *)&v6, 0xCu);
  }
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  os_signpost_id_t v4 = WeakRetained;
  if (WeakRetained && [WeakRetained usingOnDemandConnection])
  {
    id v5 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      int v6 = 136315138;
      id v7 = "-[ADCompanionService _executeRemoteRequest:onPeer:allowsRelay:allowFallbackOnAWDL:throughProxyDevice:completi"
           "on:]_block_invoke";
      _os_log_debug_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "%s setStateUpdateHandler message link is usingOnDemandConnection. Sending message.", (uint8_t *)&v6, 0xCu);
    }
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

void sub_10024A670(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    os_signpost_id_t v4 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      int v13 = 136315394;
      long long v14 = "-[ADCompanionService _executeRemoteRequest:onPeer:allowsRelay:allowFallbackOnAWDL:throughProxyDevice:complet"
            "ion:]_block_invoke";
      __int16 v15 = 2112;
      id v16 = v3;
      _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "%s Failed to activate message link. error: %@", (uint8_t *)&v13, 0x16u);
    }
    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
  else
  {
    uint64_t v5 = [*(id *)(a1 + 40) identifier];
    uint64_t v6 = *(void *)(a1 + 32);
    id v7 = *(void **)(v6 + 136);
    *(void *)(v6 + 136) = v5;

    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
    uint64_t v9 = *(void *)(a1 + 32);
    id v10 = *(void **)(v9 + 128);
    *(void *)(v9 + 12_Block_object_dispose(&STACK[0x220], 8) = WeakRetained;

    id v11 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      id v12 = *(void **)(*(void *)(a1 + 32) + 136);
      int v13 = 136315394;
      long long v14 = "-[ADCompanionService _executeRemoteRequest:onPeer:allowsRelay:allowFallbackOnAWDL:throughProxyDevice:complet"
            "ion:]_block_invoke";
      __int16 v15 = 2112;
      id v16 = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "%s _clientAWDLTransportLinkDestinationId set value:%@ ", (uint8_t *)&v13, 0x16u);
    }
    [*(id *)(a1 + 32) _scheduleOrExtendAWDLClientLinkTimer];
  }
}

void sub_10024A808(uint64_t a1)
{
  uint64_t v2 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
  {
    int v15 = 136315138;
    id v16 = "-[ADCompanionService _executeRemoteRequest:onPeer:allowsRelay:allowFallbackOnAWDL:throughProxyDevice:completio"
          "n:]_block_invoke";
    _os_log_error_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "%s unable to find remote device for execution", (uint8_t *)&v15, 0xCu);
    uint64_t v2 = AFSiriLogContextDaemon;
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    if (*(unsigned char *)(a1 + 48)) {
      CFStringRef v9 = @"YES";
    }
    else {
      CFStringRef v9 = @"NO";
    }
    id v10 = v2;
    if (+[AFFeatureFlags isAWDLFallbackForPersonalRequestsEnabled])CFStringRef v11 = @"YES"; {
    else
    }
      CFStringRef v11 = @"NO";
    int v12 = *(unsigned __int8 *)(a1 + 50);
    if (*(unsigned char *)(a1 + 49)) {
      CFStringRef v13 = @"YES";
    }
    else {
      CFStringRef v13 = @"NO";
    }
    int v15 = 136316162;
    id v16 = "-[ADCompanionService _executeRemoteRequest:onPeer:allowsRelay:allowFallbackOnAWDL:throughProxyDevice:completio"
          "n:]_block_invoke";
    if (v12) {
      CFStringRef v14 = @"YES";
    }
    else {
      CFStringRef v14 = @"NO";
    }
    __int16 v17 = 2112;
    CFStringRef v18 = v9;
    __int16 v19 = 2112;
    CFStringRef v20 = v11;
    __int16 v21 = 2112;
    CFStringRef v22 = v13;
    __int16 v23 = 2112;
    CFStringRef v24 = v14;
    _os_log_debug_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "%s allowFallbackOnAWDL: %@, isAWDLFallbackForPersonalRequestsEnabled: %@, isPeerIdsIDMatchingAWDLClientLinkDestinationId: %@, isDestinationDeviceDiscoveredOverWifiP2P:%@", (uint8_t *)&v15, 0x34u);
  }
  if (AFIsInternalInstall())
  {
    id v3 = AFSiriLogContextPerformance;
    os_signpost_id_t v4 = os_signpost_id_generate(AFSiriLogContextPerformance);
    if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      os_signpost_id_t v5 = v4;
      if (os_signpost_enabled(v3))
      {
        LOWORD(v15) = 0;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v3, OS_SIGNPOST_EVENT, v5, "CompanionDeviceNotFound", "ADCompanionService _executeRemoteRequest", (uint8_t *)&v15, 2u);
      }
    }
  }
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = *(void *)(a1 + 40);
  if (v6)
  {
    (*(void (**)(uint64_t, void))(v7 + 16))(v7, 0);
  }
  else
  {
    id v8 = +[AFError errorWithCode:1000];
    (*(void (**)(uint64_t, void, void *))(v7 + 16))(v7, 0, v8);
  }
}

void sub_10024AA60(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  os_signpost_id_t v5 = *(NSObject **)(v4 + 144);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10024AB38;
  block[3] = &unk_100507E48;
  void block[4] = v4;
  id v8 = v3;
  id v9 = *(id *)(a1 + 40);
  char v11 = *(unsigned char *)(a1 + 56);
  id v10 = *(id *)(a1 + 48);
  id v6 = v3;
  dispatch_async(v5, block);
}

void sub_10024AB38(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = [*(id *)(a1 + 40) firstObject];
  uint64_t v4 = [v2 _companionLinkDeviceForUniqueIDSIdentifier:v3];

  if (v4)
  {
    os_signpost_id_t v5 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      int v6 = 136315138;
      uint64_t v7 = "-[ADCompanionService _executeRemoteRequest:onPeer:allowsRelay:allowFallbackOnAWDL:throughProxyDevice:completi"
           "on:]_block_invoke_2";
      _os_log_debug_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "%s #hal Sending command via context collector", (uint8_t *)&v6, 0xCu);
    }
    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
  else
  {
    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  }
}

void sub_10024AC4C(uint64_t a1)
{
  uint64_t v2 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
  {
    uint64_t v11 = *(void *)(a1 + 32);
    int v12 = 136315394;
    CFStringRef v13 = "-[ADCompanionService _executeRemoteRequest:onPeer:allowsRelay:allowFallbackOnAWDL:throughProxyDevice:completio"
          "n:]_block_invoke_2";
    __int16 v14 = 2112;
    uint64_t v15 = v11;
    _os_log_error_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "%s heartbeat timeout for message %@", (uint8_t *)&v12, 0x16u);
  }
  if (AFIsInternalInstall())
  {
    id v3 = AFSiriLogContextPerformance;
    os_signpost_id_t v4 = os_signpost_id_generate(AFSiriLogContextPerformance);
    if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      os_signpost_id_t v5 = v4;
      if (os_signpost_enabled(v3))
      {
        LOWORD(v12) = 0;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v3, OS_SIGNPOST_EVENT, v5, "CompanionCouldNotReach", "_executeRemoteRequest", (uint8_t *)&v12, 2u);
      }
    }
  }
  [*(id *)(a1 + 40) setDidConnectionTimeOut:1];
  uint64_t v7 = *(void *)(a1 + 40);
  int v6 = *(void **)(a1 + 48);
  id v8 = [v6 _getExecutionIdFromRequest:*(void *)(a1 + 56)];
  [v6 _logCompanionDeviceCommunicationContextFor:v7 executionId:v8];

  uint64_t v9 = *(void *)(a1 + 64);
  if (v9)
  {
    id v10 = +[AFError errorWithCode:1007];
    (*(void (**)(uint64_t, void, void *))(v9 + 16))(v9, 0, v10);
  }
}

void sub_10024AE00(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id v10 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v11 = *(void **)(a1 + 32);
    *(_DWORD *)long long buf = 136316162;
    id v52 = "-[ADCompanionService _executeRemoteRequest:onPeer:allowsRelay:allowFallbackOnAWDL:throughProxyDevice:completio"
          "n:]_block_invoke";
    __int16 v53 = 2112;
    id v54 = v11;
    __int16 v55 = 2112;
    id v56 = v7;
    __int16 v57 = 2112;
    id v58 = v8;
    __int16 v59 = 2112;
    id v60 = v9;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "%s request response : %@ %@ %@ %@", buf, 0x34u);
  }
  if (*(unsigned char *)(a1 + 88)
    && ([*(id *)(a1 + 40) _cancelTimerForMessage:*(void *)(a1 + 32)] & 1) == 0)
  {
    __int16 v19 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136315394;
      id v52 = "-[ADCompanionService _executeRemoteRequest:onPeer:allowsRelay:allowFallbackOnAWDL:throughProxyDevice:complet"
            "ion:]_block_invoke";
      __int16 v53 = 2112;
      id v54 = v9;
      _os_log_error_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "%s message timed out, ignoring error %@", buf, 0x16u);
    }
    CFStringRef v20 = AFSiriLogContextPerformance;
    __int16 v21 = v20;
    os_signpost_id_t v22 = *(void *)(a1 + 80);
    if (v22 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v20))
    {
      *(_WORD *)long long buf = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v21, OS_SIGNPOST_INTERVAL_END, v22, "CompanionService", "Message timed out", buf, 2u);
    }
  }
  else
  {
    int v12 = AFSiriLogContextPerformance;
    CFStringRef v13 = v12;
    os_signpost_id_t v14 = *(void *)(a1 + 80);
    if (v14 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v12))
    {
      *(_WORD *)long long buf = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v13, OS_SIGNPOST_INTERVAL_END, v14, "CompanionService", "Received response", buf, 2u);
    }

    if (*(void *)(a1 + 72))
    {
      if (v9)
      {
        uint64_t v15 = [v9 domain];
        unsigned int v16 = [v15 isEqualToString:RPErrorDomain];

        if (v16)
        {
          __int16 v17 = AFSiriLogContextDaemon;
          if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
          {
            int8x16_t v43 = *(void **)(a1 + 32);
            *(_DWORD *)long long buf = 136315650;
            id v52 = "-[ADCompanionService _executeRemoteRequest:onPeer:allowsRelay:allowFallbackOnAWDL:throughProxyDevice:c"
                  "ompletion:]_block_invoke";
            __int16 v53 = 2112;
            id v54 = v9;
            __int16 v55 = 2112;
            id v56 = v43;
            _os_log_error_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "%s rapport error %@ for message %@", buf, 0x20u);
          }
          if ([v9 code] == (id)-6714)
          {
            uint64_t v18 = 1018;
          }
          else
          {
            if (AFIsInternalInstall())
            {
              __int16 v29 = AFSiriLogContextPerformance;
              os_signpost_id_t v30 = os_signpost_id_generate(AFSiriLogContextPerformance);
              if (v30 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
              {
                os_signpost_id_t v31 = v30;
                if (os_signpost_enabled(v29))
                {
                  *(_WORD *)long long buf = 0;
                  _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v29, OS_SIGNPOST_EVENT, v31, "CompanionRapportTransportError", "ADCompanionService _executeRemoteRequest", buf, 2u);
                }
              }
            }
            uint64_t v18 = 1000;
          }
          id v28 = +[AFError errorWithCode:v18 description:0 underlyingError:v9];
        }
        else
        {
          id v28 = v9;
        }
      }
      else
      {
        uint64_t v26 = [v7 objectForKey:@"commandResponse"];
        if (!v26 || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
        {
          __int16 v27 = 0;
          goto LABEL_38;
        }
        id v32 = AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long buf = 136315138;
          id v52 = "-[ADCompanionService _executeRemoteRequest:onPeer:allowsRelay:allowFallbackOnAWDL:throughProxyDevice:com"
                "pletion:]_block_invoke";
          _os_log_error_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_ERROR, "%s received malformed response", buf, 0xCu);
        }

        id v28 = +[AFError errorWithCode:11];
      }
      __int16 v27 = v28;
      uint64_t v26 = 0;
LABEL_38:
      id v33 = [v7 objectForKey:@"waitForMessageIDs"];
      if (v33)
      {
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          long long v34 = [v33 firstObject];
          objc_opt_class();
          char isKindOfClass = objc_opt_isKindOfClass();

          if (isKindOfClass)
          {
            id v36 = v33;
            uint64_t v37 = AFSiriLogContextDaemon;
            if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)long long buf = 136315394;
              id v52 = "-[ADCompanionService _executeRemoteRequest:onPeer:allowsRelay:allowFallbackOnAWDL:throughProxyDevice"
                    ":completion:]_block_invoke";
              __int16 v53 = 2112;
              id v54 = v36;
              _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_INFO, "%s Waiting for IDs %@", buf, 0x16u);
            }
            goto LABEL_46;
          }
        }
        id v38 = AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long buf = 136315138;
          id v52 = "-[ADCompanionService _executeRemoteRequest:onPeer:allowsRelay:allowFallbackOnAWDL:throughProxyDevice:com"
                "pletion:]_block_invoke";
          _os_log_error_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_ERROR, "%s Malformed waitfor IDs. dispatching invoking completion immediately", buf, 0xCu);
        }
      }
      id v36 = 0;
LABEL_46:
      id v40 = *(void **)(a1 + 40);
      id v39 = *(void **)(a1 + 48);
      v44[0] = _NSConcreteStackBlock;
      v44[1] = 3221225472;
      v44[2] = sub_10024B508;
      v44[3] = &unk_100507D58;
      v44[4] = v40;
      id v45 = v39;
      id v46 = v27;
      id v47 = *(id *)(a1 + 56);
      id v48 = *(id *)(a1 + 64);
      id v41 = *(id *)(a1 + 72);
      id v49 = v26;
      id v50 = v41;
      id v42 = v26;
      __int16 v21 = v27;
      [v40 _waitForMessageIDs:v36 withContext:v45 timeout:v44 completion:3.0];

      goto LABEL_47;
    }
    __int16 v23 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136315138;
      id v52 = "-[ADCompanionService _executeRemoteRequest:onPeer:allowsRelay:allowFallbackOnAWDL:throughProxyDevice:complet"
            "ion:]_block_invoke";
      _os_log_error_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "%s No completion returning", buf, 0xCu);
    }
    [*(id *)(a1 + 40) _cleanUpMessageWaitContext:*(void *)(a1 + 48)];
    CFStringRef v24 = *(void **)(a1 + 40);
    uint64_t v25 = *(void *)(a1 + 56);
    __int16 v21 = [v24 _getExecutionIdFromRequest:*(void *)(a1 + 64)];
    [v24 _logCompanionDeviceCommunicationContextFor:v25 executionId:v21];
  }
LABEL_47:
}

uint64_t sub_10024B508(uint64_t a1)
{
  [*(id *)(a1 + 32) _cleanUpMessageWaitContext:*(void *)(a1 + 40)];
  if (*(void *)(a1 + 48)) {
    [*(id *)(a1 + 56) setDidConnectionTimeOut:1];
  }
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 56);
  os_signpost_id_t v4 = [v2 _getExecutionIdFromRequest:*(void *)(a1 + 64)];
  [v2 _logCompanionDeviceCommunicationContextFor:v3 executionId:v4];

  os_signpost_id_t v5 = *(uint64_t (**)(void))(*(void *)(a1 + 80) + 16);
  return v5();
}

void sub_10024B780(uint64_t a1)
{
  id v8 = [*(id *)(a1 + 32) _newRequestDictionary];
  uint64_t v2 = [*(id *)(a1 + 40) dictionary];
  [v8 setObject:v2 forKey:@"command"];

  if (*(unsigned char *)(a1 + 80))
  {
    uint64_t v3 = [*(id *)(a1 + 48) assistantIdentifier];
    if ([v3 length]) {
      [v8 setObject:v3 forKey:@"forwardsToAssistantId"];
    }
    os_signpost_id_t v4 = [*(id *)(a1 + 48) idsDeviceUniqueIdentifier];
    if ([v4 length]) {
      [v8 setObject:v4 forKey:@"forwardsToIDSDeviceId"];
    }
  }
  os_signpost_id_t v5 = [*(id *)(a1 + 56) info];
  int v6 = [v5 buildDictionaryRepresentation];

  id v7 = v8;
  if (v6)
  {
    [v8 setObject:v6 forKey:@"executionContext"];
    id v7 = v8;
  }
  [*(id *)(a1 + 32) _executeRemoteRequest:v7 onPeer:*(void *)(a1 + 48) allowsRelay:*(unsigned __int8 *)(a1 + 80) allowFallbackOnAWDL:0 throughProxyDevice:*(void *)(a1 + 64) completion:*(void *)(a1 + 72)];
}

void sub_10024BA70(uint64_t a1)
{
  id v7 = [*(id *)(a1 + 32) _newRequestDictionary];
  [v7 setObject:*(void *)(a1 + 40) forKey:@"serializedCommand"];
  uint64_t v2 = [*(id *)(a1 + 48) info];
  uint64_t v3 = [v2 buildDictionaryRepresentation];

  if (v3) {
    [v7 setObject:v3 forKey:@"executionContext"];
  }
  if (*(unsigned char *)(a1 + 72))
  {
    os_signpost_id_t v4 = [*(id *)(a1 + 56) assistantIdentifier];
    if ([v4 length]) {
      [v7 setObject:v4 forKey:@"forwardsToAssistantId"];
    }
    os_signpost_id_t v5 = [*(id *)(a1 + 56) idsDeviceUniqueIdentifier];
    if ([v5 length]) {
      [v7 setObject:v5 forKey:@"forwardsToIDSDeviceId"];
    }

    BOOL v6 = *(unsigned char *)(a1 + 72) != 0;
  }
  else
  {
    BOOL v6 = 0;
  }
  [*(id *)(a1 + 32) _executeRemoteRequest:v7 onPeer:*(void *)(a1 + 56) allowsRelay:v6 allowFallbackOnAWDL:*(unsigned __int8 *)(a1 + 73) throughProxyDevice:0 completion:*(void *)(a1 + 64)];
}

void sub_10024BD14(void *a1)
{
  if (*(void *)(a1[4] + 64))
  {
    uint64_t v1 = a1[5];
    uint64_t v2 = a1[6];
    uint64_t v3 = (void *)a1[4];
    objc_msgSend(v3, "sendMessage:messageType:toDeviceWithIDSIdentifier:completion:", v1, v2);
  }
  else
  {
    uint64_t v4 = a1[7];
    if (v4)
    {
      id v5 = +[AFError errorWithCode:1000];
      (*(void (**)(uint64_t, void, id))(v4 + 16))(v4, 0, v5);
    }
  }
}

void sub_10024BEFC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = [*(id *)(*(void *)(a1 + 32) + 64) copy];
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

id sub_10024C5CC(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _removeMessageHandler:*(void *)(a1 + 40) forMessageType:*(void *)(a1 + 48)];
}

id sub_10024C880(void *a1)
{
  id v2 = *(void **)(a1[4] + 72);
  if (!v2)
  {
    uint64_t v3 = +[NSMapTable strongToWeakObjectsMapTable];
    uint64_t v4 = a1[4];
    id v5 = *(void **)(v4 + 72);
    *(void *)(v4 + 72) = v3;

    id v2 = *(void **)(a1[4] + 72);
  }
  uint64_t v6 = a1[5];
  uint64_t v7 = a1[6];
  return [v2 setObject:v6 forKey:v7];
}

void sub_10024CE48(uint64_t a1)
{
  id v2 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
  {
    uint64_t v8 = *(void *)(a1 + 32);
    int v9 = 136315394;
    id v10 = "-[ADCompanionService _sendMessage:messageType:toTargetDevice:completion:]_block_invoke";
    __int16 v11 = 2112;
    uint64_t v12 = v8;
    _os_log_error_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "%s heartbeat timeout for message %@", (uint8_t *)&v9, 0x16u);
  }
  if (AFIsInternalInstall())
  {
    uint64_t v3 = AFSiriLogContextPerformance;
    os_signpost_id_t v4 = os_signpost_id_generate(AFSiriLogContextPerformance);
    if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      os_signpost_id_t v5 = v4;
      if (os_signpost_enabled(v3))
      {
        LOWORD(v9) = 0;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v3, OS_SIGNPOST_EVENT, v5, "CompanionCouldNotReach", "_sendMessage", (uint8_t *)&v9, 2u);
      }
    }
  }
  uint64_t v6 = *(void *)(a1 + 40);
  if (v6)
  {
    uint64_t v7 = +[AFError errorWithCode:1000];
    (*(void (**)(uint64_t, void, void *))(v6 + 16))(v6, 0, v7);
  }
}

void sub_10024CFC4(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id v10 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    __int16 v11 = *(void **)(a1 + 32);
    int v29 = 136316162;
    os_signpost_id_t v30 = "-[ADCompanionService _sendMessage:messageType:toTargetDevice:completion:]_block_invoke";
    __int16 v31 = 2112;
    id v32 = v11;
    __int16 v33 = 2112;
    id v34 = v7;
    __int16 v35 = 2112;
    id v36 = v8;
    __int16 v37 = 2112;
    id v38 = v9;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "%s generic request response : %@ %@ %@ %@", (uint8_t *)&v29, 0x34u);
  }
  uint64_t v12 = [v7 objectForKey:@"assistantId"];
  if (v12)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0
      && ([*(id *)(a1 + 40) idsDeviceIdentifier],
          CFStringRef v13 = objc_claimAutoreleasedReturnValue(),
          v13,
          v13))
    {
      os_signpost_id_t v14 = +[ADDeviceCircleManager sharedInstance];
      uint64_t v15 = [*(id *)(a1 + 40) idsDeviceIdentifier];
      [v14 _setAssistantId:v12 forDeviceWithIdsDeviceUniqueIdentifier:v15];
    }
    else
    {
      unsigned int v16 = AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
      {
        int v29 = 136315138;
        os_signpost_id_t v30 = "-[ADCompanionService _sendMessage:messageType:toTargetDevice:completion:]_block_invoke";
        _os_log_error_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "%s received malformed assistant id", (uint8_t *)&v29, 0xCu);
      }
    }
  }
  if (*(unsigned char *)(a1 + 64)
    && ([*(id *)(a1 + 48) _cancelTimerForMessage:*(void *)(a1 + 32)] & 1) == 0)
  {
    CFStringRef v24 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      int v29 = 136315394;
      os_signpost_id_t v30 = "-[ADCompanionService _sendMessage:messageType:toTargetDevice:completion:]_block_invoke";
      __int16 v31 = 2112;
      id v32 = v9;
      _os_log_error_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "%s message timed out, ignoring error %@", (uint8_t *)&v29, 0x16u);
    }
  }
  else if (*(void *)(a1 + 56))
  {
    if (v9)
    {
      __int16 v17 = [v9 domain];
      unsigned int v18 = [v17 isEqualToString:RPErrorDomain];

      if (v18)
      {
        __int16 v19 = AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
        {
          id v28 = *(void **)(a1 + 32);
          int v29 = 136315650;
          os_signpost_id_t v30 = "-[ADCompanionService _sendMessage:messageType:toTargetDevice:completion:]_block_invoke";
          __int16 v31 = 2112;
          id v32 = v9;
          __int16 v33 = 2112;
          id v34 = v28;
          _os_log_error_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "%s rapport error %@ for message %@", (uint8_t *)&v29, 0x20u);
        }
        if (AFIsInternalInstall())
        {
          CFStringRef v20 = AFSiriLogContextPerformance;
          os_signpost_id_t v21 = os_signpost_id_generate(AFSiriLogContextPerformance);
          if (v21 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
          {
            os_signpost_id_t v22 = v21;
            if (os_signpost_enabled(v20))
            {
              LOWORD(v29) = 0;
              _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v20, OS_SIGNPOST_EVENT, v22, "CompanionRapportTransportError", "ADCompanionService _sendMessage", (uint8_t *)&v29, 2u);
            }
          }
        }
        id v23 = +[AFError errorWithCode:1000 description:0 underlyingError:v9];
      }
      else
      {
        id v23 = v9;
      }
    }
    else
    {
      uint64_t v25 = [v7 objectForKey:@"payload"];
      if (!v25 || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
      {
        uint64_t v26 = 0;
LABEL_32:
        (*(void (**)(void))(*(void *)(a1 + 56) + 16))();

        goto LABEL_33;
      }
      __int16 v27 = AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
      {
        int v29 = 136315138;
        os_signpost_id_t v30 = "-[ADCompanionService _sendMessage:messageType:toTargetDevice:completion:]_block_invoke";
        _os_log_error_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_ERROR, "%s received malformed response", (uint8_t *)&v29, 0xCu);
      }

      id v23 = +[AFError errorWithCode:11];
    }
    uint64_t v26 = v23;
    uint64_t v25 = 0;
    goto LABEL_32;
  }
LABEL_33:
}

void sub_10024D5EC(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) _companionLinkDeviceForHkIdentifier:*(void *)(a1 + 40)];
  [*(id *)(a1 + 32) _sendMessage:*(void *)(a1 + 48) messageType:*(void *)(a1 + 56) toTargetDevice:v2 completion:*(void *)(a1 + 64)];
}

void sub_10024D7E8(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) _companionLinkDeviceForUniqueIDSIdentifier:*(void *)(a1 + 40)];
  [*(id *)(a1 + 32) _sendMessage:*(void *)(a1 + 48) messageType:*(void *)(a1 + 56) toTargetDevice:v2 completion:*(void *)(a1 + 64)];
}

void sub_10024D8E4(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 152) activeDevices];
  if ([v2 count])
  {
    uint64_t v3 = +[NSMutableSet setWithCapacity:](NSMutableSet, "setWithCapacity:", [v2 count]);
    long long v18 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    __int16 v17 = v2;
    id v4 = v2;
    id v5 = [v4 countByEnumeratingWithState:&v18 objects:v22 count:16];
    if (v5)
    {
      id v6 = v5;
      uint64_t v7 = *(void *)v19;
      do
      {
        for (i = 0; i != v6; i = (char *)i + 1)
        {
          if (*(void *)v19 != v7) {
            objc_enumerationMutation(v4);
          }
          id v9 = *(void **)(*((void *)&v18 + 1) + 8 * i);
          uint64_t v10 = [v9 idsDeviceIdentifier];
          if (v10)
          {
            __int16 v11 = (void *)v10;
            uint64_t v12 = [*(id *)(*(void *)(a1 + 32) + 152) localDevice];
            unsigned int v13 = [v9 hasValidDiscoveryTypeForLocalDevice:v12];

            if (v13)
            {
              os_signpost_id_t v14 = [v9 idsDeviceIdentifier];
              [v3 addObject:v14];
            }
          }
        }
        id v6 = [v4 countByEnumeratingWithState:&v18 objects:v22 count:16];
      }
      while (v6);
    }

    id v2 = v17;
  }
  else
  {
    uint64_t v3 = 0;
  }
  uint64_t v15 = *(void *)(a1 + 40);
  if ([v3 count])
  {
    unsigned int v16 = [v3 allObjects];
    (*(void (**)(uint64_t, void *))(v15 + 16))(v15, v16);
  }
  else
  {
    (*(void (**)(uint64_t, void))(v15 + 16))(v15, 0);
  }
}

id sub_10024DD64(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _stopListening];
}

void sub_10024E2A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10024E2D4(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _musicPersonalizationTokenChanged];
}

id *sub_10024E4C8(id *result, int a2)
{
  if (a2) {
    return (id *)[result[4] _updateSiriInfoDictionary];
  }
  return result;
}

id sub_10024E5D8(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _resetHashedRouteIDs];
}

id *sub_10024E6E0(id *result, int a2)
{
  if (a2) {
    return (id *)[result[4] _updateSiriInfoDictionary];
  }
  return result;
}

void sub_10024ED08(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(void *)(v1 + 152))
  {
    if (*(unsigned char *)(v1 + 13))
    {
      uint64_t v3 = AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)long long buf = 136315138;
        __int16 v11 = "-[ADCompanionService _updateSiriInfoDictionary]_block_invoke";
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "%s initializing Siri Info dictionary", buf, 0xCu);
        uint64_t v1 = *(void *)(a1 + 32);
      }
      *(unsigned char *)(v1 + 13) = 0;
      [*(id *)(a1 + 32) _startObservingDataChangedNotifications];
      uint64_t v1 = *(void *)(a1 + 32);
    }
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_10024EEBC;
    v9[3] = &unk_10050E138;
    void v9[4] = v1;
    id v4 = objc_retainBlock(v9);
    id v5 = v4;
    id v6 = *(void **)(a1 + 32);
    if (v6[11])
    {
      ((void (*)(void *))v4[2])(v4);
    }
    else
    {
      v7[0] = _NSConcreteStackBlock;
      v7[1] = 3221225472;
      void v7[2] = sub_10024F210;
      v7[3] = &unk_10050E250;
      id v8 = v4;
      [v6 _updateSharedDataWithCompletion:v7];
    }
  }
}

void sub_10024EEBC(uint64_t a1)
{
  if (*(void *)(*(void *)(a1 + 32) + 152))
  {
    id v2 = dispatch_group_create();
    if (AFSupportsAirPlayEndpointRoute())
    {
      uint64_t v3 = [*(id *)(*(void *)(a1 + 32) + 152) localDevice];
      id v4 = [v3 mediaRouteIdentifier];

      if (v4)
      {
        [*(id *)(*(void *)(a1 + 32) + 88) setAirplayRouteId:v4];
      }
      else
      {
        id v5 = AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
        {
          LODWORD(buf) = 136315138;
          *(void *)((char *)&buf + 4) = "-[ADCompanionService _updateSiriInfoDictionary]_block_invoke";
          _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "%s unable to retrieve AirPlay route identifier", (uint8_t *)&buf, 0xCu);
        }
      }
    }
    if (AFSupportsPlayThisOnThatPlayback())
    {
      dispatch_group_enter(v2);
      uint64_t v18 = 0;
      long long v19 = &v18;
      uint64_t v20 = 0x2050000000;
      id v6 = (void *)qword_100585FF8;
      uint64_t v21 = qword_100585FF8;
      if (!qword_100585FF8)
      {
        *(void *)&long long buf = _NSConcreteStackBlock;
        *((void *)&buf + 1) = 3221225472;
        id v23 = sub_10024F220;
        CFStringRef v24 = &unk_10050E318;
        uint64_t v25 = &v18;
        sub_10024F220((uint64_t)&buf);
        id v6 = (void *)v19[3];
      }
      id v7 = v6;
      _Block_object_dispose(&v18, 8);
      id v8 = [v7 sharedProvider];
      v16[0] = _NSConcreteStackBlock;
      v16[1] = 3221225472;
      void v16[2] = sub_10024F40C;
      v16[3] = &unk_100507CB8;
      void v16[4] = *(void *)(a1 + 32);
      id v9 = v2;
      __int16 v17 = v9;
      [v8 getTokenForcingRefresh:0 completion:v16];

      if (*(void *)(*(void *)(a1 + 32) + 96))
      {
        objc_msgSend(*(id *)(*(void *)(a1 + 32) + 88), "setStoreFrontId:");
      }
      else
      {
        dispatch_group_enter(v9);
        uint64_t v10 = *(void **)(a1 + 32);
        v14[0] = _NSConcreteStackBlock;
        v14[1] = 3221225472;
        id v14[2] = sub_10024F4EC;
        v14[3] = &unk_10050C9E0;
        void v14[4] = v10;
        uint64_t v15 = v9;
        [v10 _updateStoreFrontIdentifierWithCompletion:v14];
      }
    }
    uint64_t v11 = *(void *)(a1 + 32);
    uint64_t v12 = *(NSObject **)(v11 + 144);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10024F52C;
    block[3] = &unk_10050E138;
    void block[4] = v11;
    dispatch_group_notify(v2, v12, block);
  }
}

void sub_10024F1F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

uint64_t sub_10024F210(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

Class sub_10024F220(uint64_t a1)
{
  v6[0] = 0;
  if (!qword_100586000)
  {
    v6[1] = _NSConcreteStackBlock;
    void v6[2] = (void *)3221225472;
    v6[3] = sub_10024F6E8;
    void v6[4] = &unk_10050E350;
    void v6[5] = v6;
    long long v7 = off_100508020;
    uint64_t v8 = 0;
    qword_100586000 = _sl_dlopen();
  }
  if (!qword_100586000)
  {
    uint64_t v3 = +[NSAssertionHandler currentHandler];
    id v4 = +[NSString stringWithUTF8String:"void *iTunesCloudLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"ADCompanionService.m", 81, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("ICLibraryAuthServiceClientTokenProvider");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    uint64_t v3 = +[NSAssertionHandler currentHandler];
    id v5 = +[NSString stringWithUTF8String:"Class getICLibraryAuthServiceClientTokenProviderClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"ADCompanionService.m", 82, @"Unable to find class %s", "ICLibraryAuthServiceClientTokenProvider");

LABEL_10:
    __break(1u);
  }
  qword_100585FF8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_10024F40C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = *(NSObject **)(v7 + 144);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  void v11[2] = sub_10024F60C;
  void v11[3] = &unk_10050DC68;
  id v12 = v5;
  id v13 = v6;
  uint64_t v14 = v7;
  id v15 = *(id *)(a1 + 40);
  id v9 = v6;
  id v10 = v5;
  dispatch_async(v8, v11);
}

void sub_10024F4EC(uint64_t a1)
{
  [*(id *)(*(void *)(a1 + 32) + 88) setStoreFrontId:*(void *)(*(void *)(a1 + 32) + 96)];
  id v2 = *(NSObject **)(a1 + 40);
  dispatch_group_leave(v2);
}

void sub_10024F52C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(void *)(v1 + 152))
  {
    id v2 = [*(id *)(v1 + 88) data];
    uint64_t v3 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      int v4 = 136315138;
      id v5 = "-[ADCompanionService _updateSiriInfoDictionary]_block_invoke_2";
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "%s Siri Info updated", (uint8_t *)&v4, 0xCu);
    }
    +[ADRapportLink updateSiriInfoWithObject:v2 forKey:@"sharedDataProtoBuf"];
  }
}

void sub_10024F60C(uint64_t a1)
{
  id v2 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 40);
    int v5 = 136315650;
    id v6 = "-[ADCompanionService _updateSiriInfoDictionary]_block_invoke_2";
    __int16 v7 = 2112;
    uint64_t v8 = v3;
    __int16 v9 = 2112;
    uint64_t v10 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s userToken: %@, error: %@", (uint8_t *)&v5, 0x20u);
  }
  [*(id *)(*(void *)(a1 + 48) + 88) setUserToken:*(void *)(a1 + 32)];
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 56));
}

uint64_t sub_10024F6E8()
{
  uint64_t result = _sl_dlopen();
  qword_100586000 = result;
  return result;
}

void sub_10024F924(void *a1)
{
  id v2 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 136315138;
    __int16 v9 = "-[ADCompanionService _activateAWDLMessageLink:completion:]_block_invoke";
    _os_log_debug_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s Activating client", buf, 0xCu);
  }
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  void v5[2] = sub_10024FA40;
  v5[3] = &unk_10050C5E8;
  uint64_t v4 = (void *)a1[4];
  uint64_t v3 = (void *)a1[5];
  uint64_t v7 = a1[6];
  id v6 = v3;
  [v4 activateWithCompletion:v5];
}

void sub_10024FA40(uint64_t a1, void *a2)
{
  uint64_t v3 = a2;
  uint64_t v4 = AFSiriLogContextDaemon;
  if (v3)
  {
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      int v13 = 136315394;
      uint64_t v14 = "-[ADCompanionService _activateAWDLMessageLink:completion:]_block_invoke";
      __int16 v15 = 2112;
      unsigned int v16 = v3;
      _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "%s message link activation error: %@", (uint8_t *)&v13, 0x16u);
    }
    if (*(void *)(a1 + 40))
    {
      int v5 = AFSiriLogContextPerformance;
      id v6 = v5;
      os_signpost_id_t v7 = *(void *)(a1 + 40);
      if (v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v5))
      {
        int v13 = 138412290;
        uint64_t v14 = v3;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v6, OS_SIGNPOST_INTERVAL_END, v7, "CompanionServiceAWDLClientLink", "AWDL companion link activation failed with error: %@", (uint8_t *)&v13, 0xCu);
      }
    }
    uint64_t v8 = *(void *)(a1 + 32);
    __int16 v9 = +[AFError errorWithCode:1021];
    (*(void (**)(uint64_t, void *))(v8 + 16))(v8, v9);
  }
  else
  {
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      int v13 = 136315138;
      uint64_t v14 = "-[ADCompanionService _activateAWDLMessageLink:completion:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%s message link activated successfully.", (uint8_t *)&v13, 0xCu);
    }
    if (*(void *)(a1 + 40))
    {
      uint64_t v10 = AFSiriLogContextPerformance;
      uint64_t v11 = v10;
      os_signpost_id_t v12 = *(void *)(a1 + 40);
      if (v12 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v10))
      {
        LOWORD(v13) = 0;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v11, OS_SIGNPOST_INTERVAL_END, v12, "CompanionServiceAWDLClientLink", "AWDL companion link activated successfully", (uint8_t *)&v13, 2u);
      }
    }
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
}

void sub_10024FF4C(id *a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    uint64_t v4 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      int v7 = 136315394;
      uint64_t v8 = "-[ADCompanionService _prepAWDLClientLinkIfMessageReceivedOverAWDL:]_block_invoke";
      __int16 v9 = 2112;
      id v10 = v3;
      _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "%s Failed to activate message link in advance. error: %@", (uint8_t *)&v7, 0x16u);
    }
  }
  else
  {
    objc_storeStrong((id *)a1[4] + 17, a1[5]);
    objc_storeStrong((id *)a1[4] + 16, a1[6]);
    int v5 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      id v6 = (void *)*((void *)a1[4] + 17);
      int v7 = 136315394;
      uint64_t v8 = "-[ADCompanionService _prepAWDLClientLinkIfMessageReceivedOverAWDL:]_block_invoke";
      __int16 v9 = 2112;
      id v10 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "%s _clientAWDLTransportLinkDestinationId set value:%@ ", (uint8_t *)&v7, 0x16u);
    }
    [a1[4] _scheduleOrExtendAWDLClientLinkTimer];
  }
}

void sub_100251460(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = a2;
  [v4 setIdsDeviceUniqueIdentifier:v3];
  [v4 setAssistantIdentifier:*(void *)(a1 + 40)];
}

void sub_1002514BC(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id v10 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    int v11 = 136315394;
    os_signpost_id_t v12 = "-[ADCompanionService _handleAceCommandRequest:messageID:options:responseHandler:]_block_invoke";
    __int16 v13 = 2112;
    id v14 = v7;
    _os_log_debug_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "%s Forwarding response: %@", (uint8_t *)&v11, 0x16u);
  }
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1002515D0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = *(NSObject **)(*(void *)(a1 + 32) + 144);
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  id v14[2] = sub_1002516F0;
  v14[3] = &unk_100507C40;
  id v15 = v6;
  id v16 = v5;
  id v8 = *(id *)(a1 + 40);
  uint64_t v9 = *(void *)(a1 + 32);
  id v17 = v8;
  uint64_t v18 = v9;
  id v19 = *(id *)(a1 + 48);
  id v20 = *(id *)(a1 + 56);
  id v10 = *(id *)(a1 + 64);
  uint64_t v11 = *(void *)(a1 + 72);
  id v21 = v10;
  uint64_t v22 = v11;
  id v12 = v5;
  id v13 = v6;
  dispatch_async(v7, v14);
}

void sub_1002516F0(uint64_t a1)
{
  id v2 = objc_alloc_init((Class)NSMutableDictionary);
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = AFSiriLogContextDaemon;
  if (v3)
  {
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      int v12 = 136315394;
      id v13 = "-[ADCompanionService _handleAceCommandRequest:messageID:options:responseHandler:]_block_invoke_2";
      __int16 v14 = 2112;
      uint64_t v15 = v3;
      _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "%s error executing remote command: %@", (uint8_t *)&v12, 0x16u);
    }
  }
  else
  {
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      uint64_t v5 = *(void *)(a1 + 40);
      int v12 = 136315394;
      id v13 = "-[ADCompanionService _handleAceCommandRequest:messageID:options:responseHandler:]_block_invoke";
      __int16 v14 = 2112;
      uint64_t v15 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%s got command response: %@", (uint8_t *)&v12, 0x16u);
    }
    uint64_t v6 = *(void *)(a1 + 40);
    if (v6) {
      [v2 setObject:v6 forKey:@"commandResponse"];
    }
  }
  if ([*(id *)(a1 + 48) count])
  {
    id v7 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v11 = *(void *)(a1 + 48);
      int v12 = 136315394;
      id v13 = "-[ADCompanionService _handleAceCommandRequest:messageID:options:responseHandler:]_block_invoke";
      __int16 v14 = 2112;
      uint64_t v15 = v11;
      _os_log_debug_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "%s intermediateMessageIDs set: %@", (uint8_t *)&v12, 0x16u);
    }
    [v2 setObject:*(void *)(a1 + 48) forKey:@"waitForMessageIDs"];
  }
  [*(id *)(a1 + 56) _tearDownIntermediateMessageIDs:*(void *)(a1 + 48) forPeer:*(void *)(a1 + 64)];
  if (![v2 count])
  {

    id v2 = 0;
  }
  if (*(void *)(a1 + 72)) {
    objc_msgSend(*(id *)(*(void *)(a1 + 56) + 48), "removeObjectForKey:");
  }
  (*(void (**)(void))(*(void *)(a1 + 80) + 16))();
  id v8 = AFSiriLogContextPerformance;
  uint64_t v9 = v8;
  os_signpost_id_t v10 = *(void *)(a1 + 88);
  if (v10 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v8))
  {
    LOWORD(v12) = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v9, OS_SIGNPOST_INTERVAL_END, v10, "CompanionService", "Finished processing message", (uint8_t *)&v12, 2u);
  }
}

void sub_100251C6C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a3;
  id v8 = a4;
  id v9 = a2;
  os_signpost_id_t v10 = [v9 objectForKey:@"messageID"];
  uint64_t v11 = (void *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v12 = RPOptionSenderID;
    id v13 = v11;
    __int16 v14 = [v7 objectForKey:v12];
    uint64_t v15 = [*(id *)(*(void *)(a1 + 32) + 128) localDevice];
    id v16 = [v15 identifier];
    int v17 = 136315906;
    uint64_t v18 = "-[ADCompanionService _setupClientAWDLTransportLinkForDestination:]_block_invoke";
    __int16 v19 = 2112;
    id v20 = v10;
    __int16 v21 = 2112;
    uint64_t v22 = v14;
    __int16 v23 = 2112;
    CFStringRef v24 = v16;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "%s received message: %@ from source: %@ (local: %@)", (uint8_t *)&v17, 0x2Au);
  }
  [*(id *)(a1 + 32) _handleAceCommandRequest:v9 messageID:v10 options:v7 responseHandler:v8];

  [*(id *)(a1 + 32) _unblockWaitingForMessageIDs:v10];
}

void sub_100251E14(id a1, ADRapportLinkConfigurationMutating *a2)
{
  id v2 = a2;
  id v3 = +[ADRapportLinkTransportOptions newWithBuilder:&stru_100507BF0];
  [(ADRapportLinkConfigurationMutating *)v2 setTransportOptions:v3];
}

void sub_100251E80(id a1, ADRapportLinkTransportOptionsMutating *a2)
{
  id v2 = a2;
  [(ADRapportLinkTransportOptionsMutating *)v2 setAllowsForceAWDL:2];
  [(ADRapportLinkTransportOptionsMutating *)v2 setNoL2Cap:2];
}

void sub_100252290(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a3;
  id v8 = a4;
  id v9 = a2;
  os_signpost_id_t v10 = [v9 objectForKey:@"messageID"];
  uint64_t v11 = (void *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v12 = RPOptionSenderID;
    id v13 = v11;
    __int16 v14 = [v7 objectForKey:v12];
    uint64_t v15 = [*(id *)(*(void *)(a1 + 32) + 152) localDevice];
    id v16 = [v15 identifier];
    int v17 = 136315906;
    uint64_t v18 = "-[ADCompanionService _setupClientLink]_block_invoke";
    __int16 v19 = 2112;
    id v20 = v10;
    __int16 v21 = 2112;
    uint64_t v22 = v14;
    __int16 v23 = 2112;
    CFStringRef v24 = v16;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "%s received message: %@ from source: %@ (local: %@)", (uint8_t *)&v17, 0x2Au);
  }
  [*(id *)(a1 + 32) _handleAceCommandRequest:v9 messageID:v10 options:v7 responseHandler:v8];

  [*(id *)(a1 + 32) _unblockWaitingForMessageIDs:v10];
}

void sub_100252438(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  os_signpost_id_t v10 = [v7 objectForKey:@"messageID"];
  uint64_t v11 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)long long buf = 136315906;
    id v42 = "-[ADCompanionService _setupClientLink]_block_invoke";
    __int16 v43 = 2112;
    id v44 = v10;
    __int16 v45 = 2112;
    id v46 = v7;
    __int16 v47 = 2112;
    id v48 = v8;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "%s incoming remote request: %@ %@ %@", buf, 0x2Au);
  }
  uint64_t v12 = +[ADFMDMonitor sharedManager];
  unsigned int v13 = [v12 isLostModeActive];

  if (v13)
  {
    __int16 v14 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136315138;
      id v42 = "-[ADCompanionService _setupClientLink]_block_invoke";
      _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "%s Lost mode is active, rejecting incoming request", buf, 0xCu);
    }
    id v15 = +[AFError errorWithCode:1003];
    (*((void (**)(id, void, void, id))v9 + 2))(v9, 0, 0, v15);
  }
  else
  {
    id v16 = *(void **)(a1 + 32);
    id v39 = 0;
    id v40 = 0;
    id v37 = 0;
    id v38 = 0;
    unsigned __int8 v17 = [v16 _validateIncomingRequest:v7 options:v8 error:&v40 assistantId:&v39 idsDeviceId:&v38 homeKitId:&v37];
    id v15 = v40;
    id v18 = v39;
    id v19 = v38;
    id v32 = v37;
    if (v17)
    {
      id v20 = [*(id *)(a1 + 32) _newRequestInfoWithRequestDictionary:v7];
      if (v20)
      {
        if (v18 && v19)
        {
          __int16 v21 = +[ADDeviceCircleManager sharedInstance];
          [v21 _setAssistantId:v18 forDeviceWithIdsDeviceUniqueIdentifier:v19];
        }
        id v31 = v18;
        if (v10)
        {
          os_signpost_id_t v30 = *(void **)(*(void *)(a1 + 32) + 48);
          uint64_t v22 = +[NSProcessInfo processInfo];
          [v22 systemUptime];
          __int16 v23 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
          [v30 setObject:v23 forKey:v10];
        }
        CFStringRef v24 = +[ADCommandCenter sharedCommandCenter];
        v33[0] = _NSConcreteStackBlock;
        v33[1] = 3221225472;
        v33[2] = sub_100253B9C;
        v33[3] = &unk_100507B60;
        id v25 = v10;
        uint64_t v26 = *(void *)(a1 + 32);
        id v34 = v25;
        uint64_t v35 = v26;
        id v36 = v9;
        [v24 handleExternalActivationRequest:v20 completion:v33];

        __int16 v27 = v34;
        id v18 = v31;
      }
      else
      {
        int v29 = AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)long long buf = 136315138;
          id v42 = "-[ADCompanionService _setupClientLink]_block_invoke";
          _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_INFO, "%s malformed remote request", buf, 0xCu);
        }
        __int16 v27 = +[AFError errorWithCode:0];
        (*((void (**)(id, void, void, void *))v9 + 2))(v9, 0, 0, v27);
      }
    }
    else
    {
      id v28 = AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 136315394;
        id v42 = "-[ADCompanionService _setupClientLink]_block_invoke";
        __int16 v43 = 2112;
        id v44 = v15;
        _os_log_error_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_ERROR, "%s validation error %@", buf, 0x16u);
      }
      (*((void (**)(id, void, void, id))v9 + 2))(v9, 0, 0, v15);
    }
  }
}

void sub_1002528C8(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  os_signpost_id_t v10 = [v7 objectForKey:@"messageID"];
  uint64_t v11 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)long long buf = 136315906;
    id v39 = "-[ADCompanionService _setupClientLink]_block_invoke";
    __int16 v40 = 2112;
    id v41 = v10;
    __int16 v42 = 2112;
    id v43 = v7;
    __int16 v44 = 2112;
    id v45 = v8;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "%s incoming shared data request: %@ %@ %@", buf, 0x2Au);
  }
  uint64_t v12 = +[ADFMDMonitor sharedManager];
  unsigned int v13 = [v12 isLostModeActive];

  if (v13)
  {
    __int16 v14 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136315138;
      id v39 = "-[ADCompanionService _setupClientLink]_block_invoke";
      _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "%s Lost mode is active, rejecting incoming request", buf, 0xCu);
    }
    id v15 = +[AFError errorWithCode:1003];
    (*((void (**)(id, void, void, id))v9 + 2))(v9, 0, 0, v15);
  }
  else
  {
    id v16 = *(void **)(a1 + 32);
    id v36 = 0;
    id v37 = 0;
    id v34 = 0;
    id v35 = 0;
    unsigned __int8 v17 = [v16 _validateIncomingRequest:v7 options:v8 error:&v37 assistantId:&v36 idsDeviceId:&v35 homeKitId:&v34];
    id v15 = v37;
    id v18 = v36;
    id v19 = v35;
    id v29 = v34;
    if (v17)
    {
      if (v18 && v19)
      {
        id v20 = +[ADDeviceCircleManager sharedInstance];
        [v20 _setAssistantId:v18 forDeviceWithIdsDeviceUniqueIdentifier:v19];
      }
      id v28 = v18;
      if (v10)
      {
        __int16 v21 = *(void **)(*(void *)(a1 + 32) + 48);
        uint64_t v22 = +[NSProcessInfo processInfo];
        [v22 systemUptime];
        __int16 v23 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
        [v21 setObject:v23 forKey:v10];
      }
      CFStringRef v24 = +[ADCommandCenter sharedCommandCenter];
      v30[0] = _NSConcreteStackBlock;
      v30[1] = 3221225472;
      v30[2] = sub_100253A6C;
      v30[3] = &unk_1005080B0;
      id v25 = v10;
      uint64_t v26 = *(void *)(a1 + 32);
      id v31 = v25;
      uint64_t v32 = v26;
      id v33 = v9;
      [v24 getSharedDataForPeer:v30];

      id v18 = v28;
    }
    else
    {
      __int16 v27 = AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 136315394;
        id v39 = "-[ADCompanionService _setupClientLink]_block_invoke";
        __int16 v40 = 2112;
        id v41 = v15;
        _os_log_error_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_ERROR, "%s validation error %@", buf, 0x16u);
      }
      (*((void (**)(id, void, void, id))v9 + 2))(v9, 0, 0, v15);
    }
  }
}

void sub_100252CB0(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  os_signpost_id_t v10 = [v7 objectForKey:@"messageID"];
  uint64_t v11 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)long long buf = 136315906;
    id v51 = "-[ADCompanionService _setupClientLink]_block_invoke_2";
    __int16 v52 = 2112;
    id v53 = v10;
    __int16 v54 = 2112;
    id v55 = v7;
    __int16 v56 = 2112;
    id v57 = v8;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "%s incoming generic request: %@ %@ %@", buf, 0x2Au);
  }
  uint64_t v12 = +[ADFMDMonitor sharedManager];
  unsigned int v13 = [v12 isLostModeActive];

  if (!v13)
  {
    id v15 = [*(id *)(a1 + 32) _newRequestDictionary];
    [v15 removeObjectForKey:@"messageID"];
    id v16 = *(void **)(a1 + 32);
    id v48 = 0;
    id v49 = 0;
    id v46 = 0;
    id v47 = 0;
    int v17 = [v16 _validateIncomingRequest:v7 options:v8 error:&v49 assistantId:&v48 idsDeviceId:&v47 homeKitId:&v46];
    id v41 = v49;
    id v18 = v48;
    id v19 = v47;
    id v40 = v46;
    if ((v17 & 1) == 0)
    {
      id v33 = AFSiriLogContextDaemon;
      uint64_t v32 = v41;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 136315394;
        id v51 = "-[ADCompanionService _setupClientLink]_block_invoke";
        __int16 v52 = 2112;
        id v53 = v41;
        _os_log_error_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_ERROR, "%s validation error %@", buf, 0x16u);
      }
      v9[2](v9, v15, 0, v41);
      goto LABEL_36;
    }
    if (v18 && v19)
    {
      id v20 = +[ADDeviceCircleManager sharedInstance];
      [v20 _setAssistantId:v18 forDeviceWithIdsDeviceUniqueIdentifier:v19];
    }
    uint64_t v21 = [v7 objectForKey:@"type"];
    objc_opt_class();
    id v39 = (void *)v21;
    char isKindOfClass = objc_opt_isKindOfClass();
    __int16 v23 = AFSiriLogContextDaemon;
    if ((isKindOfClass & 1) == 0)
    {
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 136315138;
        id v51 = "-[ADCompanionService _setupClientLink]_block_invoke";
        _os_log_error_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "%s received malformed message type", buf, 0xCu);
      }
      id v31 = +[AFError errorWithCode:11];
      v9[2](v9, v15, 0, v31);
      uint64_t v32 = v41;
      goto LABEL_35;
    }
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 136315394;
      id v51 = "-[ADCompanionService _setupClientLink]_block_invoke";
      __int16 v52 = 2112;
      id v53 = v39;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "%s incoming request type: %@", buf, 0x16u);
    }
    uint64_t v24 = [v7 objectForKey:@"payload"];
    objc_opt_class();
    id v38 = (void *)v24;
    char v25 = objc_opt_isKindOfClass();
    uint64_t v26 = AFSiriLogContextDaemon;
    if (v25)
    {
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
      {
        __int16 v27 = *(void **)(*(void *)(a1 + 32) + 72);
        *(_DWORD *)long long buf = 136315394;
        id v51 = "-[ADCompanionService _setupClientLink]_block_invoke";
        __int16 v52 = 2112;
        id v53 = v27;
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_INFO, "%s _handlerForMessageType: %@", buf, 0x16u);
      }
      uint64_t v28 = [*(id *)(*(void *)(a1 + 32) + 72) objectForKey:v39];
      if (v28)
      {
        id v29 = (void *)v28;
        if (v10)
        {
          id v37 = *(void **)(*(void *)(a1 + 32) + 48);
          id v36 = +[NSProcessInfo processInfo];
          [v36 systemUptime];
          os_signpost_id_t v30 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
          [v37 setObject:v30 forKey:v10];
        }
        v42[0] = _NSConcreteStackBlock;
        v42[1] = 3221225472;
        v42[2] = sub_1002538F4;
        v42[3] = &unk_100507B88;
        v42[4] = *(void *)(a1 + 32);
        id v43 = v15;
        id v44 = v10;
        id v45 = v9;
        id v31 = v38;
        [v29 handleMessage:v38 messageType:v39 fromDeviceWithIdentifier:v19 completion:v42];

        uint64_t v32 = v41;
        goto LABEL_34;
      }
      id v34 = AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 136315138;
        id v51 = "-[ADCompanionService _setupClientLink]_block_invoke";
        _os_log_error_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_ERROR, "%s unsupported message type", buf, 0xCu);
      }
      id v35 = +[AFError errorWithCode:1004];
      v9[2](v9, v15, 0, v35);

      id v29 = 0;
    }
    else
    {
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 136315138;
        id v51 = "-[ADCompanionService _setupClientLink]_block_invoke";
        _os_log_error_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, "%s received malformed message payload", buf, 0xCu);
      }
      id v29 = +[AFError errorWithCode:11];
      v9[2](v9, v15, 0, v29);
    }
    uint64_t v32 = v41;
    id v31 = v38;
LABEL_34:

LABEL_35:
LABEL_36:

    goto LABEL_37;
  }
  __int16 v14 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)long long buf = 136315138;
    id v51 = "-[ADCompanionService _setupClientLink]_block_invoke";
    _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "%s Lost mode is active, rejecting incoming request", buf, 0xCu);
  }
  id v15 = +[AFError errorWithCode:1003];
  v9[2](v9, 0, 0, v15);
LABEL_37:
}

void sub_1002533D4(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  os_signpost_id_t v10 = [v7 objectForKey:@"messageID"];
  uint64_t v11 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v21 = 136315906;
    uint64_t v22 = "-[ADCompanionService _setupClientLink]_block_invoke_3";
    __int16 v23 = 2112;
    uint64_t v24 = v10;
    __int16 v25 = 2112;
    id v26 = v7;
    __int16 v27 = 2112;
    id v28 = v8;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "%s incoming heartbeat request: %@ %@ %@", (uint8_t *)&v21, 0x2Au);
  }
  if (v10)
  {
    uint64_t v12 = *(void **)(*(void *)(a1 + 32) + 48);
    unsigned int v13 = +[NSProcessInfo processInfo];
    [v13 systemUptime];
    __int16 v14 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
    [v12 setObject:v14 forKey:v10];
  }
  id v15 = [v7 objectForKey:@"hbMessageID"];
  if (v15)
  {
    id v16 = [*(id *)(*(void *)(a1 + 32) + 48) objectForKey:v15];

    if (v16)
    {
      int v17 = 0;
      if (!v10) {
        goto LABEL_17;
      }
      goto LABEL_16;
    }
    id v20 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      int v21 = 136315394;
      uint64_t v22 = "-[ADCompanionService _setupClientLink]_block_invoke";
      __int16 v23 = 2112;
      uint64_t v24 = v10;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "%s unknown message id: %@", (uint8_t *)&v21, 0x16u);
    }
    uint64_t v19 = 1008;
  }
  else
  {
    id v18 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      int v21 = 136315138;
      uint64_t v22 = "-[ADCompanionService _setupClientLink]_block_invoke";
      _os_log_error_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "%s received malformed response", (uint8_t *)&v21, 0xCu);
    }
    uint64_t v19 = 11;
  }
  int v17 = +[AFError errorWithCode:v19];
  if (v10) {
LABEL_16:
  }
    [*(id *)(*(void *)(a1 + 32) + 48) removeObjectForKey:v10];
LABEL_17:
  (*((void (**)(id, void, void, void *))v9 + 2))(v9, 0, 0, v17);
}

void sub_1002536A8(uint64_t a1, void *a2)
{
  id v3 = a2;
  *(unsigned char *)(*(void *)(a1 + 32) + _Block_object_dispose(&STACK[0x220], 8) = 1;
  if (v3)
  {
    id v4 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136315394;
      int v17 = "-[ADCompanionService _setupClientLink]_block_invoke";
      __int16 v18 = 2112;
      uint64_t v19 = v3;
      _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "%s companion link activation error: %@", buf, 0x16u);
    }
    uint64_t v5 = AFSiriLogContextPerformance;
    uint64_t v6 = v5;
    os_signpost_id_t v7 = *(void *)(a1 + 40);
    if (v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v5))
    {
      *(_DWORD *)long long buf = 138412290;
      int v17 = v3;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v6, OS_SIGNPOST_INTERVAL_END, v7, "CompanionServiceClientLink", "companion link activation failed with error: %@", buf, 0xCu);
    }
  }
  else
  {
    id v8 = AFSiriLogContextPerformance;
    id v9 = v8;
    os_signpost_id_t v10 = *(void *)(a1 + 40);
    if (v10 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v8))
    {
      *(_WORD *)long long buf = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v9, OS_SIGNPOST_INTERVAL_END, v10, "CompanionServiceClientLink", "companion link activated successfully", buf, 2u);
    }

    if (AFIsHorseman())
    {
      uint64_t v11 = +[AFAnalytics sharedAnalytics];
      if (*(unsigned char *)(*(void *)(a1 + 32) + 11)) {
        uint64_t v12 = &off_100523A08;
      }
      else {
        uint64_t v12 = &off_100523A20;
      }
      CFStringRef v14 = @"deviceCount";
      id v15 = v12;
      unsigned int v13 = +[NSDictionary dictionaryWithObjects:&v15 forKeys:&v14 count:1];
      [v11 logEventWithType:5101 context:v13];
    }
    *(unsigned char *)(*(void *)(a1 + 32) + 13) = 1;
  }
}

void sub_1002538F4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  os_signpost_id_t v7 = *(NSObject **)(*(void *)(a1 + 32) + 144);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  _OWORD v13[2] = sub_1002539FC;
  v13[3] = &unk_100508278;
  id v14 = v5;
  id v15 = *(id *)(a1 + 40);
  id v8 = *(id *)(a1 + 48);
  uint64_t v9 = *(void *)(a1 + 32);
  id v16 = v8;
  uint64_t v17 = v9;
  id v10 = *(id *)(a1 + 56);
  id v18 = v6;
  id v19 = v10;
  id v11 = v6;
  id v12 = v5;
  dispatch_async(v7, v13);
}

uint64_t sub_1002539FC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2) {
    [*(id *)(a1 + 40) setObject:v2 forKey:@"payload"];
  }
  if (*(void *)(a1 + 48)) {
    objc_msgSend(*(id *)(*(void *)(a1 + 56) + 48), "removeObjectForKey:");
  }
  id v3 = *(uint64_t (**)(void))(*(void *)(a1 + 72) + 16);
  return v3();
}

void sub_100253A6C(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc_init(_ADPBDeviceSetDataRequest);
  [(_ADPBDeviceSetDataRequest *)v4 _ad_setData:v3];

  uint64_t v5 = [(_ADPBDeviceSetDataRequest *)v4 data];
  id v6 = (void *)v5;
  if (v5)
  {
    CFStringRef v9 = @"sharedDataProtoBuf";
    uint64_t v10 = v5;
    os_signpost_id_t v7 = +[NSDictionary dictionaryWithObjects:&v10 forKeys:&v9 count:1];
    id v8 = 0;
  }
  else
  {
    id v8 = +[AFError errorWithCode:0];
    os_signpost_id_t v7 = 0;
  }
  if (a1[4]) {
    objc_msgSend(*(id *)(a1[5] + 48), "removeObjectForKey:");
  }
  (*(void (**)(void))(a1[6] + 16))();
}

void sub_100253B9C(void *a1, int a2, void *a3)
{
  id v5 = a3;
  id v6 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v8 = 136315650;
    CFStringRef v9 = "-[ADCompanionService _setupClientLink]_block_invoke";
    __int16 v10 = 1024;
    int v11 = a2;
    __int16 v12 = 2112;
    id v13 = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "%s remote request success %d, error: %@", (uint8_t *)&v8, 0x1Cu);
  }
  if (a1[4]) {
    objc_msgSend(*(id *)(a1[5] + 48), "removeObjectForKey:");
  }
  if (!v5 && (a2 & 1) == 0)
  {
    id v5 = +[AFError errorWithCode:0];
  }
  if (a2) {
    id v7 = 0;
  }
  else {
    id v7 = v5;
  }
  (*(void (**)(void, void, void, id))(a1[6] + 16))(a1[6], 0, 0, v7);
}

void sub_100253CCC(id a1, ADRapportLinkConfigurationMutating *a2)
{
  uint64_t v2 = a2;
  id v3 = +[ADRapportLinkDiscoveryOptions newWithBuilder:&stru_100507AF0];
  [(ADRapportLinkConfigurationMutating *)v2 setDiscoveryOptions:v3];

  id v4 = +[ADRapportLinkTransportOptions newWithBuilder:&stru_100507B10];
  [(ADRapportLinkConfigurationMutating *)v2 setTransportOptions:v4];
}

void sub_100253D60(id a1, ADRapportLinkTransportOptionsMutating *a2)
{
  uint64_t v2 = a2;
  if (_AFPreferencesBLECompanionConnectionsEnabled()) {
    [(ADRapportLinkTransportOptionsMutating *)v2 setAllowsBLE:2];
  }
  if (AFIsHorseman()
    && +[AFFeatureFlags isForceBLEDiscoveryForCompanionLinkEnabled])
  {
    [(ADRapportLinkTransportOptionsMutating *)v2 setAllowsForceBLE:2];
  }
}

void sub_100253DD0(id a1, ADRapportLinkDiscoveryOptionsMutating *a2)
{
  uint64_t v2 = a2;
  [(ADRapportLinkDiscoveryOptionsMutating *)v2 setIncludesHome:2];
  [(ADRapportLinkDiscoveryOptionsMutating *)v2 setIncludesFamily:0];
  [(ADRapportLinkDiscoveryOptionsMutating *)v2 setIncludesRemoraDevices:2];
}

void sub_100254390(uint64_t a1, void *a2, void *a3)
{
  id v10 = a2;
  id v5 = a3;
  if (!v10 || v5)
  {
    if (*(unsigned char *)(a1 + 72))
    {
      id v8 = [*(id *)(a1 + 32) _updateSharedDataFromIDSWithIdentifier:*(void *)(a1 + 48)];
      goto LABEL_7;
    }
  }
  else
  {
    [*(id *)(a1 + 32) _updateSharedData:v10 forDevice:*(void *)(a1 + 40)];
    id v6 = *(void **)(*(void *)(a1 + 32) + 56);
    id v7 = +[NSNumber numberWithDouble:*(double *)(a1 + 64)];
    [v6 setObject:v7 forKey:*(void *)(a1 + 48)];
  }
  id v8 = 0;
LABEL_7:
  uint64_t v9 = *(void *)(a1 + 56);
  if (v9) {
    (*(void (**)(uint64_t, id))(v9 + 16))(v9, v8);
  }
}

id sub_100254580(uint64_t a1)
{
  return [*(id *)(a1 + 32) _updateSharedDataForCompanionDeviceWithRemoteFetchAllowed:*(unsigned __int8 *)(a1 + 40)];
}

void *sub_10025483C(void *result, int a2)
{
  if (a2)
  {
    uint64_t v2 = result;
    id v3 = (void *)result[4];
    id v4 = +[NSDate now];
    [v3 setLastCompanionRemoteDataFetchDate:v4];

    id v5 = (void *)v2[4];
    return [v5 synchronize];
  }
  return result;
}

void sub_100255460(uint64_t a1, unint64_t a2)
{
  id v3 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", @"Queue %s did not respond to watchdog and is likely blocked.", dispatch_queue_get_label(*(dispatch_queue_t *)(a1 + 32)));
  id v4 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)long long buf = 136315394;
    id v7 = "-[ADCompanionService init]_block_invoke";
    __int16 v8 = 2112;
    id v9 = v3;
    _os_log_fault_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "%s %@", buf, 0x16u);
  }
  int v5 = AFIsInternalInstall();
  if (a2 <= 3 && v5) {
    WriteStackshotReport_async();
  }
}

uint64_t sub_10025561C(uint64_t a1)
{
  id v1 = objc_alloc_init(*(Class *)(a1 + 32));
  uint64_t v2 = qword_100585FE8;
  qword_100585FE8 = (uint64_t)v1;
  return _objc_release_x1(v1, v2);
}

void sub_100255738(uint64_t a1)
{
  if (*(void *)(a1 + 40))
  {
    if (+[AFFeatureFlags isSCDATrialEnabled])
    {
      int v2 = AFIsInternalInstall();
      uint64_t v3 = *(void *)(a1 + 32);
      if (!v2 || *(unsigned char *)(v3 + 24))
      {
        id v4 = [*(id *)(v3 + 16) levelForFactor:@"SIDEKICK_BOOSTS_FILE" withNamespaceName:@"MYRIAD_BOOSTS"];
        int v5 = v4;
        if (v4)
        {
          id v6 = [v4 fileValue];
          id v7 = v6;
          if (v6
            && [v6 hasPath]
            && ([v7 path], __int16 v8 = objc_claimAutoreleasedReturnValue(), v8, v8))
          {
            id v9 = (void *)AFSiriLogContextDaemon;
            if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
            {
              id v10 = v9;
              int v11 = [v7 path];
              int v18 = 136315394;
              id v19 = "-[ADMyriadSettingsManager getSidekickBoostsFileWithCompletion:]_block_invoke";
              __int16 v20 = 2112;
              int v21 = v11;
              _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "%s #myriad Trial Myriad Sidekick Boosts File path read from Trial: %@", (uint8_t *)&v18, 0x16u);
            }
            uint64_t v12 = *(void *)(a1 + 40);
            id v13 = [v7 path];
            (*(void (**)(uint64_t, void *, void))(v12 + 16))(v12, v13, 0);
          }
          else
          {
            id v16 = AFSiriLogContextDaemon;
            if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
            {
              int v18 = 136315138;
              id v19 = "-[ADMyriadSettingsManager getSidekickBoostsFileWithCompletion:]_block_invoke";
              _os_log_error_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "%s #myriad Trial Myriad Sidekick Boosts File value undefined.", (uint8_t *)&v18, 0xCu);
            }
            id v13 = +[NSError errorWithDomain:kAFAssistantErrorDomain code:31 userInfo:0];
            (*(void (**)(void, void, void *))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), 0, v13);
          }
        }
        else
        {
          uint64_t v17 = AFSiriLogContextDaemon;
          if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
          {
            int v18 = 136315138;
            id v19 = "-[ADMyriadSettingsManager getSidekickBoostsFileWithCompletion:]_block_invoke";
            _os_log_error_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "%s #myriad Error reading Myriad Sidekick Boosts File from Trial framework", (uint8_t *)&v18, 0xCu);
          }
          id v7 = +[NSError errorWithDomain:kAFAssistantErrorDomain code:44 userInfo:0];
          (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
        }

        return;
      }
      id v15 = *(void (**)(void))(*(void *)(a1 + 40) + 16);
    }
    else
    {
      id v15 = *(void (**)(void))(*(void *)(a1 + 40) + 16);
    }
    v15();
  }
  else
  {
    id v14 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      int v18 = 136315138;
      id v19 = "-[ADMyriadSettingsManager getSidekickBoostsFileWithCompletion:]_block_invoke";
      _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "%s #myriad sidekick boosts file value read without completion", (uint8_t *)&v18, 0xCu);
    }
  }
}

void sub_100255BEC(uint64_t a1)
{
  if (*(void *)(a1 + 56))
  {
    if (+[AFFeatureFlags isSCDATrialEnabled])
    {
      if ([*(id *)(a1 + 32) count] || objc_msgSend(*(id *)(a1 + 40), "count"))
      {
        *(void *)&long long buf = 0;
        *((void *)&buf + 1) = &buf;
        uint64_t v21 = 0x3032000000;
        uint64_t v22 = sub_100256048;
        __int16 v23 = sub_100256058;
        id v24 = objc_alloc_init((Class)NSMutableDictionary);
        v19[0] = _NSConcreteStackBlock;
        v19[1] = 3221225472;
        v19[2] = sub_100256060;
        v19[3] = &unk_100508060;
        int v2 = *(void **)(a1 + 40);
        void v19[4] = *(void *)(a1 + 48);
        void v19[5] = &buf;
        [v2 enumerateObjectsUsingBlock:v19];
        uint64_t v3 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [*(id *)(a1 + 48) trialTreatmentMultiDeviceConsensus]);
        [*(id *)(*((void *)&buf + 1) + 40) setObject:v3 forKeyedSubscript:@"MULTI_DEVICE_TRIAL_TREATMENT_CONSENSUS"];

        uint64_t v13 = 0;
        id v14 = &v13;
        uint64_t v15 = 0x3032000000;
        id v16 = sub_100256048;
        uint64_t v17 = sub_100256058;
        id v18 = objc_alloc_init((Class)NSMutableDictionary);
        id v4 = *(void **)(a1 + 32);
        v12[0] = _NSConcreteStackBlock;
        v12[1] = 3221225472;
        void v12[2] = sub_10025619C;
        void v12[3] = &unk_100508060;
        void v12[4] = *(void *)(a1 + 48);
        void v12[5] = &v13;
        [v4 enumerateObjectsUsingBlock:v12];
        if (AFIsInternalInstall())
        {
          if (!*(unsigned char *)(*(void *)(a1 + 48) + 24)) {
            [(id)v14[5] setObject:&off_100523A50 forKeyedSubscript:@"HOMEPOD_BOOST"];
          }
        }
        uint64_t v5 = *(void *)(a1 + 56);
        id v6 = +[NSDictionary dictionaryWithDictionary:*(void *)(*((void *)&buf + 1) + 40)];
        id v7 = +[NSDictionary dictionaryWithDictionary:v14[5]];
        (*(void (**)(uint64_t, void *, void *, void))(v5 + 16))(v5, v6, v7, 0);

        _Block_object_dispose(&v13, 8);
        _Block_object_dispose(&buf, 8);
      }
      else
      {
        id v10 = AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
        {
          LODWORD(buf) = 136315138;
          *(void *)((char *)&buf + 4) = "-[ADMyriadSettingsManager getTrialEnables:doubleFactors:withCompletion:]_block_invoke";
          _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "%s #myriad Trial fetch with no factors to query", (uint8_t *)&buf, 0xCu);
        }
        int v11 = +[NSError errorWithDomain:kAFAssistantErrorDomain code:47 userInfo:0];
        (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
      }
    }
    else
    {
      id v9 = *(void (**)(void))(*(void *)(a1 + 56) + 16);
      v9();
    }
  }
  else
  {
    __int16 v8 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf) = 136315138;
      *(void *)((char *)&buf + 4) = "-[ADMyriadSettingsManager getTrialEnables:doubleFactors:withCompletion:]_block_invoke";
      _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "%s #myriad Trial fetch with nil completion", (uint8_t *)&buf, 0xCu);
    }
  }
}

void sub_100256010(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100256048(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100256058(uint64_t a1)
{
}

void sub_100256060(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [*(id *)(*(void *)(a1 + 32) + 16) levelForFactor:v3 withNamespaceName:@"MYRIAD_BOOSTS"];
  uint64_t v5 = v4;
  if (v4)
  {
    id v6 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [v4 BOOLeanValue]);
    [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) setObject:v6 forKeyedSubscript:v3];
  }
  else
  {
    id v7 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      int v8 = 136315394;
      id v9 = "-[ADMyriadSettingsManager getTrialEnables:doubleFactors:withCompletion:]_block_invoke";
      __int16 v10 = 2112;
      id v11 = v3;
      _os_log_debug_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "%s #myriad Trial BOOLean factor not found: %@", (uint8_t *)&v8, 0x16u);
    }
  }
}

void sub_10025619C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [*(id *)(*(void *)(a1 + 32) + 16) levelForFactor:v3 withNamespaceName:@"MYRIAD_BOOSTS"];
  uint64_t v5 = v4;
  if (v4)
  {
    [v4 doubleValue];
    id v6 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
    [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) setObject:v6 forKeyedSubscript:v3];
  }
  else
  {
    id v7 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      int v8 = 136315394;
      id v9 = "-[ADMyriadSettingsManager getTrialEnables:doubleFactors:withCompletion:]_block_invoke";
      __int16 v10 = 2112;
      id v11 = v3;
      _os_log_debug_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "%s #myriad Trial double factor not found: %@", (uint8_t *)&v8, 0x16u);
    }
  }
}

void sub_100256348(uint64_t a1)
{
  int v2 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v5 = 136315138;
    id v6 = "-[ADMyriadSettingsManager refreshTrial]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s Refreshing Trial Myriad Boosts", (uint8_t *)&v5, 0xCu);
  }
  [*(id *)(*(void *)(a1 + 32) + 16) refresh];
  id v3 = [*(id *)(*(void *)(a1 + 32) + 16) factorLevelsWithNamespaceName:@"MYRIAD_BOOSTS"];
  id v4 = +[NSDistributedNotificationCenter defaultCenter];
  [v4 postNotificationName:@"AFMyriadTrialBoostsUpdatedNotification" object:0];
}

void sub_100256594(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1002565B8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v7 = 136315394;
    int v8 = "-[ADMyriadSettingsManager _setupTrialRefresh]_block_invoke";
    __int16 v9 = 2112;
    id v10 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%s Myriad Trial boosts updated: %@", (uint8_t *)&v7, 0x16u);
  }
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v6 = WeakRetained;
  if (WeakRetained) {
    [WeakRetained refreshTrial];
  }
}

void sub_1002568F8(id a1)
{
  id v1 = [[ADMyriadSettingsManager alloc] _init];
  uint64_t v2 = qword_100586008;
  qword_100586008 = (uint64_t)v1;
  _objc_release_x1(v1, v2);
}

uint64_t sub_100256B10(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

id sub_100257488(void *a1)
{
  id v1 = a1;
  id v2 = [objc_alloc((Class)NSString) initWithFormat:@"%@.plist", v1];

  return v2;
}

void sub_100258194(uint64_t a1)
{
  id v2 = objc_alloc_init(ADSharedData);
  id v3 = +[AFPreferences sharedPreferences];
  id v4 = [v3 assistantIsEnabled];
  [(ADSharedData *)v2 setSiriEnabled:v4];
  -[ADSharedData setDictationEnabled:](v2, "setDictationEnabled:", [v3 dictationIsEnabled]);
  int v5 = [v3 languageCode];
  [(ADSharedData *)v2 setLanguageCode:v5];

  id v6 = [v3 outputVoice];
  [(ADSharedData *)v2 setOutputVoice:v6];

  int v7 = +[ADPreferences sharedPreferences];
  int v8 = [v7 sharedUserIdentifier];
  [(ADSharedData *)v2 setSharedUserId:v8];

  __int16 v9 = [v7 loggingSharedUserIdentifier];
  [(ADSharedData *)v2 setLoggingSharedUserId:v9];

  id v10 = [v7 productTypePrefix];
  id v11 = SiriCoreUserAgentStringCreate();
  [(ADSharedData *)v2 setUserAgent:v11];

  uint64_t v12 = [*(id *)(a1 + 32) _account];
  uint64_t v13 = [v12 speechIdentifier];
  [(ADSharedData *)v2 setSpeechId:v13];

  id v14 = [v12 assistantIdentifier];
  [(ADSharedData *)v2 setAssistantId:v14];
  uint64_t v15 = [v12 loggingAssistantIdentifier];
  [(ADSharedData *)v2 setLoggingAssistantId:v15];

  id v16 = [v12 hostname];
  [(ADSharedData *)v2 setHostname:v16];

  [(ADSharedData *)v2 setCloudSyncEnabled:_AFPreferencesCloudSyncEnabled()];
  [(ADSharedData *)v2 setShouldCensorSpeech:sub_1001FB870()];
  uint64_t v17 = +[NSLocale currentLocale];
  id v18 = objc_msgSend(v17, "af_aceTemperatureUnit");
  [(ADSharedData *)v2 setTemperatureUnit:v18];

  id v19 = sub_100111310((uint64_t)[v7 siriDataSharingOptInStatus]);
  [(ADSharedData *)v2 setDataSharingOptInStatus:v19];

  __int16 v20 = AFUserAssignedDeviceName();
  [(ADSharedData *)v2 setUserAssignedName:v20];

  [(ADSharedData *)v2 setIsRemotePlaybackDevice:AFSupportsPlayThisOnThatPlayback()];
  if (v4 && !v14)
  {
    uint64_t v21 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 136315138;
      id v29 = "-[ADCommandCenter(SharedDataRemote) getSharedDataForPeer:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "%s requesting preheat because assistantId is not configured", buf, 0xCu);
    }
    uint64_t v22 = [*(id *)(a1 + 32) _sessionManager];
    [v22 preheatAndMakeQuiet:0];
  }
  __int16 v23 = +[ADNotificationManager sharedManager];
  v25[0] = _NSConcreteStackBlock;
  v25[1] = 3221225472;
  v25[2] = sub_100258560;
  v25[3] = &unk_10050DEC0;
  id v26 = v2;
  id v27 = *(id *)(a1 + 40);
  id v24 = v2;
  [v23 fetchSiriRelatedNotificationPreviewRestrictedAppsWithCompletion:v25];
}

uint64_t sub_100258560(uint64_t a1, uint64_t a2)
{
  [*(id *)(a1 + 32) setNotificationPreviewRestrictedApps:a2];
  uint64_t result = *(void *)(a1 + 40);
  if (result)
  {
    id v4 = *(uint64_t (**)(void))(result + 16);
    return v4();
  }
  return result;
}

void sub_1002586C0(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  if (v5 && a2)
  {
    id v6 = [*(id *)(a1 + 32) _queue];
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    void v7[2] = sub_100258784;
    v7[3] = &unk_10050E160;
    void v7[4] = *(void *)(a1 + 32);
    id v8 = v5;
    dispatch_async(v6, v7);
  }
}

void sub_100258784(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) _sessionManager];
  [v2 sendRemoteGizmoDeviceToServer:*(void *)(a1 + 40)];
}

void sub_100258944(uint64_t a1)
{
  id v2 = +[ADPreferences sharedPreferences];
  if (AFIsNano())
  {
    if (_AFPreferencesCloudSyncEnabled())
    {
      if ([*(id *)(a1 + 32) cloudSyncEnabled])
      {
        int ShouldCensorSpeechInternal = _AFPreferencesShouldCensorSpeechInternal();
        if (ShouldCensorSpeechInternal != [*(id *)(a1 + 32) shouldCensorSpeech])
        {
          _AFPreferencesSetShouldCensorSpeechInternal();
          AFBackedUpPreferencesSynchronize();
          id v4 = +[NSNotificationCenter defaultCenter];
          [v4 postNotificationName:@"ADShouldCensorSpeechDidChangeNotification" object:0];
        }
      }
    }
  }
  if (AFIsHorseman())
  {
    id v5 = [v2 companionIdentifier];
    id v6 = +[ADPeerCloudService sharedInstance];
    int v7 = [v6 uniqueIdentifierForPeer:*(void *)(a1 + 40)];

    id v8 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      int v10 = 136315394;
      id v11 = "-[ADCommandCenter(SharedDataClient) updateSharedDataWithCloudData:fromPeer:]_block_invoke";
      __int16 v12 = 2112;
      uint64_t v13 = v7;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "%s unique device id for peer: %@", (uint8_t *)&v10, 0x16u);
    }
    if (v5 && ![v5 caseInsensitiveCompare:v7])
    {
      __int16 v9 = AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
      {
        int v10 = 136315138;
        id v11 = "-[ADCommandCenter(SharedDataClient) updateSharedDataWithCloudData:fromPeer:]_block_invoke";
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "%s resetting peer account...", (uint8_t *)&v10, 0xCu);
      }
      [*(id *)(a1 + 48) _resetPeerAccountSettingsWithSharedData:*(void *)(a1 + 32)];
    }
  }
}

void sub_100258CA8(uint64_t *a1)
{
  if ([(id)a1[4] count])
  {
    id v2 = +[ADPeerCloudService sharedInstance];
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    void v7[2] = sub_100258E08;
    v7[3] = &unk_10050D300;
    uint64_t v3 = a1[4];
    id v4 = (void *)a1[6];
    void v7[4] = a1[5];
    id v8 = v4;
    [v2 getSharedDataFromPeers:v3 completion:v7];
  }
  else
  {
    id v5 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 136315138;
      int v10 = "-[ADCommandCenter(SharedDataClient) _updateSharedDataFromPeers:completion:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "%s unable to sync data from empty peer set", buf, 0xCu);
    }
    uint64_t v6 = a1[6];
    if (v6) {
      (*(void (**)(void))(v6 + 16))();
    }
  }
}

void sub_100258E08(uint64_t a1, void *a2)
{
  id v3 = a2;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  id v4 = [v3 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v13;
    do
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(void *)v13 != v6) {
          objc_enumerationMutation(v3);
        }
        uint64_t v8 = *(void *)(*((void *)&v12 + 1) + 8 * i);
        __int16 v9 = *(void **)(a1 + 32);
        int v10 = [v3 objectForKey:v8];
        [v9 updateSharedDataWithCloudData:v10 fromPeer:v8];
      }
      id v5 = [v3 countByEnumeratingWithState:&v12 objects:v16 count:16];
    }
    while (v5);
  }
  uint64_t v11 = *(void *)(a1 + 40);
  if (v11) {
    (*(void (**)(void))(v11 + 16))();
  }
}

id sub_10025909C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _updateSharedDataFromPeers:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];
}

void sub_10025997C(uint64_t a1)
{
  id v2 = +[ADPreferences sharedPreferences];
  id v3 = [v2 companionIdentifier];

  if (v3)
  {
    id v4 = +[ADPeerCloudService sharedInstance];
    id v5 = +[ADDeviceCircleManager sharedInstance];
    uint64_t v6 = [v5 assistantIdForDeviceWithIdsDeviceUniqueIdentifier:v3];

    if (v6
      && ([*(id *)(a1 + 32) _account],
          int v7 = objc_claimAutoreleasedReturnValue(),
          [v7 peerAssistantIdentifier],
          uint64_t v8 = objc_claimAutoreleasedReturnValue(),
          unsigned int v9 = [v6 isEqualToString:v8],
          v8,
          v7,
          v9))
    {
      int v10 = AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
      {
        int v17 = 136315138;
        id v18 = "-[ADCommandCenter(SharedDataClient) updateSharedDataFromCompanion]_block_invoke";
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "%s companion identifier is already set in account", (uint8_t *)&v17, 0xCu);
      }
      uint64_t v11 = 0;
    }
    else
    {
      long long v12 = AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
      {
        int v17 = 136315138;
        id v18 = "-[ADCommandCenter(SharedDataClient) updateSharedDataFromCompanion]_block_invoke";
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "%s resetting peer account...", (uint8_t *)&v17, 0xCu);
      }
      long long v13 = [v4 cachedSharedDataForUniqueId:v3];
      if (v13)
      {
        long long v14 = AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
        {
          int v17 = 136315138;
          id v18 = "-[ADCommandCenter(SharedDataClient) updateSharedDataFromCompanion]_block_invoke";
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "%s using cached data for companion identifier", (uint8_t *)&v17, 0xCu);
        }
      }
      [*(id *)(a1 + 32) _resetPeerAccountSettingsWithSharedData:v13];

      uint64_t v11 = 1;
    }
    long long v15 = +[ADCompanionService sharedInstance];
    [v15 updateSharedDataForCompanionDeviceWithRemoteFetchAllowed:v11];
  }
  else
  {
    id v16 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      int v17 = 136315138;
      id v18 = "-[ADCommandCenter(SharedDataClient) updateSharedDataFromCompanion]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "%s unable to sync because there is no configured companion device", (uint8_t *)&v17, 0xCu);
    }
    [*(id *)(a1 + 32) _resetPeerAccountSettingsWithSharedData:0];
  }
}

void sub_100259C98(id a1)
{
  if (((AFIsHorseman() & 1) != 0 || AFIsATV()) && (_AFPreferencesCloudSyncEnabled() & 1) == 0)
  {
    id v1 = +[ADHomeInfoManager sharedInfoManager];
    id v2 = [v1 infoForThisDevice];
    unsigned __int8 v3 = [v2 personalDomainsIsEnabled];

    if ((v3 & 1) == 0)
    {
      id v4 = +[ADPreferences sharedPreferences];
      [v4 setSharedUserIdentifier:0 loggingSharedUserIdentifier:0];
    }
  }
}

id sub_100259ECC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return [*(id *)(a1 + 32) updateSharedDataWithCloudData:a2 fromPeer:a3];
}

id sub_100259EDC(uint64_t a1, void *a2)
{
  return _[a2 _cloudSyncPreferenceDidChange];
}

void sub_100259EE4(id a1, ADPeerInfo *a2, id a3)
{
  id v4 = a2;
  id v5 = a3;
  uint64_t v6 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v8 = 136315394;
    unsigned int v9 = "-[ADCommandCenter(SharedDataClient) listenForSharedDataFromCloud]_block_invoke";
    __int16 v10 = 2112;
    uint64_t v11 = v4;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "%s %@ is requesting shared data", (uint8_t *)&v8, 0x16u);
  }
  int v7 = +[ADCommandCenter sharedCommandCenter];
  [v7 getSharedDataForPeer:v5];
}

id sub_10025A114(uint64_t a1)
{
  return [*(id *)(a1 + 32) _updateSharedDataWithPairedPeerData:*(void *)(a1 + 40)];
}

void sub_10025A28C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) _sharedDataService];
  if (v2)
  {
    uint64_t v3 = *(unsigned __int8 *)(a1 + 56);
    uint64_t v4 = *(unsigned __int8 *)(a1 + 57);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_10025A378;
    v8[3] = &unk_1005080B0;
    id v5 = *(id *)(a1 + 40);
    uint64_t v6 = *(void *)(a1 + 32);
    id v9 = v5;
    uint64_t v10 = v6;
    id v11 = *(id *)(a1 + 48);
    [v2 getSharedDataFromPeerUseCache:v3 allowCloudMessaging:v4 completion:v8];
  }
  else
  {
    uint64_t v7 = *(void *)(a1 + 48);
    if (v7) {
      (*(void (**)(void))(v7 + 16))();
    }
  }
}

void sub_10025A378(void *a1, void *a2)
{
  id v3 = a2;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10025A430;
  block[3] = &unk_10050E1D8;
  uint64_t v4 = a1[4];
  id v5 = (void *)a1[6];
  void block[4] = a1[5];
  id v8 = v3;
  id v9 = v5;
  id v6 = v3;
  dispatch_async(v4, block);
}

uint64_t sub_10025A430(uint64_t a1)
{
  [*(id *)(a1 + 32) _updateSharedDataWithPairedPeerData:*(void *)(a1 + 40)];
  uint64_t result = *(void *)(a1 + 48);
  if (result)
  {
    id v3 = *(uint64_t (**)(void))(result + 16);
    return v3();
  }
  return result;
}

void sub_10025ACF0(id *a1, int a2, void *a3)
{
  id v5 = a3;
  if (a2)
  {
    id v6 = [a1[4] _queue];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10025AFDC;
    block[3] = &unk_10050DCB8;
    id v8 = a1[5];
    id v9 = a1[6];
    id v10 = v5;
    dispatch_async(v6, block);
  }
}

id sub_10025ADD0()
{
  if (qword_100586050 != -1) {
    dispatch_once(&qword_100586050, &stru_1005081E8);
  }
  id v0 = (void *)qword_100586028;
  return v0;
}

void sub_10025AE24(id a1)
{
  if (qword_100586040 != -1) {
    dispatch_once(&qword_100586040, &stru_1005081C8);
  }
  id v1 = (id *)dlsym((void *)qword_100586048, "NRDevicePropertySystemBuildVersion");
  if (!v1) {
    __assert_rtn("initNRDevicePropertySystemBuildVersion_block_invoke", "ADCommandCenter_SharedData.m", 43, "constant");
  }
  objc_storeStrong((id *)&qword_100586028, *v1);
  off_100582F08 = sub_10025AEBC;
}

id sub_10025AEBC()
{
  return (id)qword_100586028;
}

void sub_10025AEC8(id a1)
{
  qword_100586048 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/NanoRegistry.framework/NanoRegistry", 2);
}

id sub_10025AEF4()
{
  if (qword_100586030 != -1) {
    dispatch_once(&qword_100586030, &stru_1005081A8);
  }
  id v0 = (void *)qword_100586038;
  return v0;
}

void sub_10025AF48(id a1)
{
  if (qword_100586040 != -1) {
    dispatch_once(&qword_100586040, &stru_1005081C8);
  }
  qword_100586038 = (uint64_t)objc_getClass("NRPairedDeviceRegistry");
  if (!qword_100586038) {
    __assert_rtn("initNRPairedDeviceRegistry_block_invoke", "ADCommandCenter_SharedData.m", 42, "classNRPairedDeviceRegistry");
  }
  off_100582F00 = sub_10025AFD0;
}

id sub_10025AFD0()
{
  return (id)qword_100586038;
}

id sub_10025AFDC(uint64_t a1)
{
  return _[*(id *)(a1 + 32) updateGizmoData:*(void *)(a1 + 40) forUniqueId:*(void *)(a1 + 48)];
}

void sub_10025C238(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  id v6 = v5;
  if (!v5)
  {
    int v10 = 1;
    if (!a2) {
      goto LABEL_43;
    }
    goto LABEL_15;
  }
  uint64_t v7 = [v5 domain];
  if ([v7 isEqualToString:kSiriAnalyticsErrorDomain])
  {
    id v8 = [v6 code];

    if (v8 == (id)3)
    {
      id v9 = AFSiriLogContextSpeech;
      int v10 = 1;
      if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_INFO))
      {
        uint64_t v11 = *(void *)(a1 + 40);
        uint64_t v12 = *(void *)(*(void *)(a1 + 32) + 32);
        int v40 = 136315906;
        id v41 = "-[ADSpeechSamplingSendAudioData enqueueAudioDataWithAudioFileName:audioMetadataDict:folderPath:]_block_invoke";
        __int16 v42 = 2112;
        uint64_t v43 = v12;
        __int16 v44 = 2112;
        uint64_t v45 = v11;
        __int16 v46 = 2112;
        id v47 = v6;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "%s %@ Sampling: Suppression requested while uploading audio: %@, error: %@", (uint8_t *)&v40, 0x2Au);
      }
      goto LABEL_12;
    }
  }
  else
  {
  }
  long long v13 = AFSiriLogContextSpeech;
  if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_ERROR))
  {
    uint64_t v37 = *(void *)(a1 + 40);
    uint64_t v38 = *(void *)(*(void *)(a1 + 32) + 32);
    int v40 = 136315906;
    id v41 = "-[ADSpeechSamplingSendAudioData enqueueAudioDataWithAudioFileName:audioMetadataDict:folderPath:]_block_invoke";
    __int16 v42 = 2112;
    uint64_t v43 = v38;
    __int16 v44 = 2112;
    uint64_t v45 = v37;
    __int16 v46 = 2112;
    id v47 = v6;
    _os_log_error_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "%s %@ Sampling: Failed while uploading audio: %@, error: %@", (uint8_t *)&v40, 0x2Au);
  }
  int v10 = 0;
LABEL_12:
  long long v14 = *(void **)(a1 + 48);
  id v15 = *(id *)(*(void *)(a1 + 32) + 32);
  id v16 = v14;
  id v17 = v6;
  id v18 = objc_alloc_init((Class)ASRSchemaASRSampledAudioFileEnqueueFailed);
  id v19 = [objc_alloc((Class)SISchemaUUID) initWithNSUUID:v16];

  [v18 setOriginalAsrId:v19];
  objc_msgSend(v18, "setErrorCode:", objc_msgSend(v17, "code"));
  __int16 v20 = [v17 domain];
  [v18 setErrorDomain:v20];

  uint64_t v21 = [v17 userInfo];

  uint64_t v22 = [v21 objectForKey:NSUnderlyingErrorKey];

  if (v22)
  {
    objc_msgSend(v18, "setUnderlyingErrorCode:", objc_msgSend(v22, "code"));
    __int16 v23 = [v22 domain];
    [v18 setUnderlyingErrorDomain:v23];
  }
  sub_10025C7C8(v18, v15);

  if (a2)
  {
LABEL_15:
    id v24 = AFSiriLogContextSpeech;
    if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v35 = *(void *)(*(void *)(a1 + 32) + 32);
      uint64_t v36 = *(void *)(a1 + 56);
      int v40 = 136315650;
      id v41 = "-[ADSpeechSamplingSendAudioData enqueueAudioDataWithAudioFileName:audioMetadataDict:folderPath:]_block_invoke";
      __int16 v42 = 2112;
      uint64_t v43 = v35;
      __int16 v44 = 2112;
      uint64_t v45 = v36;
      _os_log_debug_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "%s %@ Sampling: Successfully enqueued: %@", (uint8_t *)&v40, 0x20u);
    }
    __int16 v25 = *(void **)(a1 + 48);
    id v26 = [*(id *)(a1 + 64) codec];
    id v27 = *(void **)(*(void *)(a1 + 32) + 32);
    id v28 = v26;
    id v29 = v27;
    id v30 = v25;
    id v31 = objc_alloc_init((Class)ASRSchemaASRSampledAudioFileEnqueued);
    id v32 = [objc_alloc((Class)SISchemaUUID) initWithNSUUID:v30];

    [v31 setOriginalAsrId:v32];
    id v33 = v28;
    if ([v33 isEqualToString:@"MHASRAUDIOCODEC_UNKNOWN"])
    {
      uint64_t v34 = 0;
    }
    else if ([v33 isEqualToString:@"MHASRAUDIOCODEC_PCM_MONO_16BIT_8000HZ_VALUE"])
    {
      uint64_t v34 = 1;
    }
    else if ([v33 isEqualToString:@"MHASRAUDIOCODEC_PCM_MONO_16BIT_11025HZ_VALUE"])
    {
      uint64_t v34 = 2;
    }
    else if ([v33 isEqualToString:@"MHASRAUDIOCODEC_PCM_MONO_16BIT_16000HZ_VALUE"])
    {
      uint64_t v34 = 3;
    }
    else if ([v33 isEqualToString:@"MHASRAUDIOCODEC_PCM_MONO_16BIT_22050HZ_VALUE"])
    {
      uint64_t v34 = 4;
    }
    else if ([v33 isEqualToString:@"MHASRAUDIOCODEC_PCM_MONO_16BIT_32000HZ_VALUE"])
    {
      uint64_t v34 = 5;
    }
    else if ([v33 isEqualToString:@"MHASRAUDIOCODEC_SPEEX_NB_QUALITY7_VALUE"])
    {
      uint64_t v34 = 6;
    }
    else if ([v33 isEqualToString:@"MHASRAUDIOCODEC_SPEEX_WB_QUALITY8_VALUE"])
    {
      uint64_t v34 = 7;
    }
    else if ([v33 isEqualToString:@"MHASRAUDIOCODEC_ALAC_MONO_8000HZ_VALUE"])
    {
      uint64_t v34 = 8;
    }
    else if ([v33 isEqualToString:@"MHASRAUDIOCODEC_ALAC_MONO_16000HZ_VALUE"])
    {
      uint64_t v34 = 9;
    }
    else if ([v33 isEqualToString:@"MHASRAUDIOCODEC_OPUS_MONO_8000HZ_VALUE"])
    {
      uint64_t v34 = 10;
    }
    else if ([v33 isEqualToString:@"MHASRAUDIOCODEC_OPUS_MONO_16000HZ_VALUE"])
    {
      uint64_t v34 = 11;
    }
    else
    {
      uint64_t v34 = 0;
    }

    [v31 setAudioCodec:v34];
    sub_10025C7C8(v31, v29);
  }
LABEL_43:
  if (v10)
  {
    id v39 = +[AFAssistantSamplingUtilities deleteItemAtFilePath:*(void *)(a1 + 56)];
    sub_10025CAA8(*(void *)(*(void *)(a1 + 32) + 24), *(void **)(a1 + 72), *(void **)(a1 + 80));
  }
}

void sub_10025C7C8(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v5 = objc_alloc_init((Class)ASRSchemaASRClientEventMetadata);
  id v6 = +[NSUUID UUID];
  id v7 = [objc_alloc((Class)SISchemaUUID) initWithNSUUID:v6];
  [v5 setAsrId:v7];
  id v8 = objc_alloc_init((Class)ASRSchemaASRClientEvent);
  [v8 setEventMetadata:v5];
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    [v8 setSampledAudioFileEnqueued:v3];
LABEL_9:
    id v9 = (void *)AFSiriLogContextSpeech;
    if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v12 = v9;
      long long v13 = (objc_class *)objc_opt_class();
      long long v14 = NSStringFromClass(v13);
      id v15 = [v6 UUIDString];
      int v16 = 136315906;
      id v17 = "wrapAndEmitTopLevelSelfEvent";
      __int16 v18 = 2112;
      id v19 = v4;
      __int16 v20 = 2112;
      uint64_t v21 = v14;
      __int16 v22 = 2112;
      __int16 v23 = v15;
      _os_log_debug_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "%s %@ Sampling: Wrapping and logging an ASR SELF event of type %@ with asrId %@", (uint8_t *)&v16, 0x2Au);
    }
    int v10 = +[AssistantSiriAnalytics sharedStream];
    [v10 emitMessage:v8];

    goto LABEL_12;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    [v8 setSampledAudioFileEnqueueFailed:v3];
    goto LABEL_9;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    [v8 setSampledAudioFileDeleted:v3];
    goto LABEL_9;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    [v8 setSampledAudioFileDeletionFailed:v3];
    goto LABEL_9;
  }
  uint64_t v11 = AFSiriLogContextSpeech;
  if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_ERROR))
  {
    int v16 = 136315394;
    id v17 = "wrapAndEmitTopLevelSelfEvent";
    __int16 v18 = 2112;
    id v19 = v4;
    _os_log_error_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "%s %@ Sampling: Failed trying to wrap and emit top-level ASR SELF event because event type was not mapped to loggable message type in the ASR SELF schema.", (uint8_t *)&v16, 0x16u);
  }
LABEL_12:
}

void sub_10025CAA8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  id v14 = [v5 stringByAppendingPathComponent:v6];
  id v7 = [v6 lastPathComponent];

  id v8 = [v7 stringByDeletingPathExtension];

  id v9 = +[NSString stringWithFormat:@"%@.plist", v8];
  int v10 = [v5 stringByAppendingPathComponent:v9];

  if (a1) {
    uint64_t v11 = (id *)AFAssistantSamplingUtilities_ptr;
  }
  else {
    uint64_t v11 = (id *)AFDictationSamplingUtilities_ptr;
  }
  id v12 = [*v11 deleteItemAtFilePath:v14];
  id v13 = [*v11 deleteItemAtFilePath:v10];
}

void sub_10025CC3C(uint64_t a1)
{
  long long v31 = 0u;
  long long v32 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  id obj = *(id *)(*(void *)(a1 + 32) + 16);
  id v22 = [obj countByEnumeratingWithState:&v29 objects:v42 count:16];
  if (v22)
  {
    uint64_t v21 = *(void *)v30;
    do
    {
      uint64_t v2 = 0;
      do
      {
        if (*(void *)v30 != v21) {
          objc_enumerationMutation(obj);
        }
        uint64_t v23 = v2;
        id v3 = *(void **)(*((void *)&v29 + 1) + 8 * v2);
        id v4 = +[NSFileManager defaultManager];
        id v5 = [v4 contentsOfDirectoryAtPath:v3 error:0];

        long long v27 = 0u;
        long long v28 = 0u;
        long long v25 = 0u;
        long long v26 = 0u;
        id v24 = v5;
        id v6 = [v24 countByEnumeratingWithState:&v25 objects:v41 count:16];
        if (v6)
        {
          id v7 = v6;
          uint64_t v8 = *(void *)v26;
          do
          {
            for (i = 0; i != v7; i = (char *)i + 1)
            {
              if (*(void *)v26 != v8) {
                objc_enumerationMutation(v24);
              }
              int v10 = *(void **)(*((void *)&v25 + 1) + 8 * i);
              uint64_t v11 = [v10 pathExtension];
              unsigned int v12 = [v11 isEqual:@"pcm"];

              if (v12)
              {
                id v13 = [v3 stringByAppendingPathComponent:v10];
                if (+[AFSamplingUtilities isFileOlderThanAgeInSeconds:v13 filePath:*(void *)(*(void *)(a1 + 32) + 32) samplingComponent:900.0])
                {
                  id v14 = v10;
                  id v15 = [v14 lastPathComponent];
                  int v16 = [v15 stringByDeletingPathExtension];

                  id v17 = sub_10025CF90(v3, (uint64_t)v16, *(void *)(*(void *)(a1 + 32) + 24));
                  if (v17)
                  {
                    [*(id *)(a1 + 32) enqueueAudioDataWithAudioFileName:v14 audioMetadataDict:v17 folderPath:v3];
                  }
                  else
                  {
                    __int16 v18 = AFSiriLogContextSpeech;
                    if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_ERROR))
                    {
                      uint64_t v19 = *(void *)(*(void *)(a1 + 32) + 32);
                      *(_DWORD *)long long buf = 136315906;
                      uint64_t v34 = "-[ADSpeechSamplingSendAudioData sendAudioDataToServer]_block_invoke";
                      __int16 v35 = 2112;
                      uint64_t v36 = v19;
                      __int16 v37 = 2112;
                      uint64_t v38 = v3;
                      __int16 v39 = 2112;
                      int v40 = v16;
                      _os_log_error_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "%s %@ Sampling: Audio metadata dict is nil for %@ - %@. It will be purged.", buf, 0x2Au);
                    }
                    sub_10025CAA8(*(void *)(*(void *)(a1 + 32) + 24), v14, v3);
                  }
                }
              }
            }
            id v7 = [v24 countByEnumeratingWithState:&v25 objects:v41 count:16];
          }
          while (v7);
        }

        uint64_t v2 = v23 + 1;
      }
      while ((id)(v23 + 1) != v22);
      id v22 = [obj countByEnumeratingWithState:&v29 objects:v42 count:16];
    }
    while (v22);
  }
}

id sub_10025CF90(void *a1, uint64_t a2, uint64_t a3)
{
  id v5 = a1;
  id v6 = +[NSString stringWithFormat:@"%@.plist", a2];
  id v7 = [v5 stringByAppendingPathComponent:v6];

  uint64_t v8 = +[NSURL fileURLWithPath:v7];
  id v16 = 0;
  id v9 = +[NSDictionary dictionaryWithContentsOfURL:v8 error:&v16];
  id v10 = v16;
  if (v10)
  {
    uint64_t v11 = (void *)AFSiriLogContextSpeech;
    if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_ERROR))
    {
      id v14 = v11;
      id v15 = sub_10025D15C(a3);
      *(_DWORD *)long long buf = 136315906;
      __int16 v18 = "_ADReadAudioMetadataPlist";
      __int16 v19 = 2112;
      __int16 v20 = v15;
      __int16 v21 = 2112;
      id v22 = v7;
      __int16 v23 = 2112;
      id v24 = v10;
      _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "%s %@ Sampling: Error while reading metadata plist at location %@ - %@", buf, 0x2Au);
    }
    id v12 = 0;
  }
  else
  {
    id v12 = v9;
  }

  return v12;
}

__CFString *sub_10025D15C(uint64_t a1)
{
  switch(a1)
  {
    case 2:
      id v1 = AFLocalSpeechRecognitionSamplingUtilities;
      goto LABEL_7;
    case 1:
      id v1 = AFAssistantSamplingUtilities;
      goto LABEL_7;
    case 0:
      id v1 = AFDictationSamplingUtilities;
LABEL_7:
      uint64_t v2 = [v1 component];
      goto LABEL_10;
  }
  id v3 = AFSiriLogContextSpeech;
  uint64_t v2 = @"Unknown";
  if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_ERROR))
  {
    int v5 = 136315394;
    id v6 = "_ADSamplingComponentFromSamplingType";
    __int16 v7 = 2112;
    CFStringRef v8 = @"Unknown";
    _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "%s %@ Sampling: Unsupported ADSpeechSamplingType", (uint8_t *)&v5, 0x16u);
  }
LABEL_10:
  return v2;
}

void sub_10025D648(uint64_t a1)
{
  uint64_t v2 = AFSiriLogContextSpeech;
  if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_ERROR))
  {
    uint64_t v4 = *(void *)(a1 + 40);
    uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 24);
    int v6 = 136315650;
    __int16 v7 = "-[ADSpeechSamplingDictationAudioDataHandler adSpeechRecordingDidFail:context:]_block_invoke";
    __int16 v8 = 2112;
    uint64_t v9 = v5;
    __int16 v10 = 2112;
    uint64_t v11 = v4;
    _os_log_error_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "%s Dictation Sampling: adSpeechRecordingDidFail for folder - %@ - %@", (uint8_t *)&v6, 0x20u);
  }
  [*(id *)(a1 + 32) setShouldStopAddingSamples:1];
  id v3 = [*(id *)(*(void *)(a1 + 32) + 40) valueForKey:@"dictationUIInteractionIdentifier"];
  sub_10025D770(1, v3, *(void **)(a1 + 40));

  [*(id *)(*(void *)(a1 + 32) + 16) removeObjectAtIndex:0];
  sub_10025DA74(*(void **)(*(void *)(a1 + 32) + 16), 0);
}

void sub_10025D770(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = a2;
  id v6 = a3;
  id v7 = objc_alloc((Class)NSMutableDictionary);
  CFStringRef v8 = &stru_10050F7D8;
  if (v5) {
    CFStringRef v9 = v5;
  }
  else {
    CFStringRef v9 = &stru_10050F7D8;
  }
  v28[0] = @"dictationUIInteractionIdentifier";
  v28[1] = @"applicationName";
  v29[0] = v9;
  v29[1] = @"OnDeviceDictationAudioData";
  __int16 v10 = +[NSDictionary dictionaryWithObjects:v29 forKeys:v28 count:2];
  id v11 = [v7 initWithDictionary:v10];

  switch(a1)
  {
    case 2:
      CFStringRef v8 = @"success";
      break;
    case 1:
      if (v6)
      {
        id v12 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v6 code]);
        [v11 setObject:v12 forKeyedSubscript:@"errorCode"];

        uint64_t v13 = [v6 domain];
        id v14 = (void *)v13;
        if (v13) {
          CFStringRef v15 = (const __CFString *)v13;
        }
        else {
          CFStringRef v15 = &stru_10050F7D8;
        }
        [v11 setObject:v15 forKeyedSubscript:@"errorDomain"];

        uint64_t v16 = [v6 localizedDescription];
        id v17 = (void *)v16;
        if (v16) {
          CFStringRef v18 = (const __CFString *)v16;
        }
        else {
          CFStringRef v18 = @"UNDEFINED";
        }
        [v11 setObject:v18 forKeyedSubscript:@"description"];

        __int16 v19 = [v6 userInfo];
        __int16 v20 = [v19 objectForKey:NSUnderlyingErrorKey];

        if (v20)
        {
          __int16 v21 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v20 code]);
          [v11 setObject:v21 forKeyedSubscript:@"underlyingErrorCode"];

          uint64_t v22 = [v20 domain];
          __int16 v23 = (void *)v22;
          if (v22) {
            CFStringRef v24 = (const __CFString *)v22;
          }
          else {
            CFStringRef v24 = &stru_10050F7D8;
          }
          [v11 setObject:v24 forKeyedSubscript:@"underlyingErrorDomain"];
        }
      }
      CFStringRef v8 = @"failed";
      break;
    case 0:
      [v11 setObject:@"Data older than maximum retention period." forKeyedSubscript:@"description"];
      CFStringRef v8 = @"deleted";
      break;
  }
  [v11 setObject:v8 forKeyedSubscript:@"status"];
  long long v25 = +[NSDate date];
  [v25 timeIntervalSince1970];
  long long v26 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
  [v11 setObject:v26 forKeyedSubscript:@"unixTime"];

  long long v27 = +[AFAnalytics sharedAnalytics];
  [v27 logEventWithType:2223 context:v11];
}

void sub_10025DA74(void *a1, uint64_t a2)
{
  id v3 = a1;
  uint64_t v4 = sub_10025D15C(a2);
  uint64_t v5 = (void *)AFSiriLogContextSpeech;
  if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_DEBUG))
  {
    long long v30 = v5;
    *(_DWORD *)long long buf = 136315650;
    id v41 = "_ADStartSendingAudioDataToServer";
    __int16 v42 = 2112;
    uint64_t v43 = v4;
    __int16 v44 = 2048;
    uint64_t v45 = (__CFString *)[v3 count];
    _os_log_debug_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "%s %@ Sampling: Number of audioDataFoldersToBeSentToServer: %ld", buf, 0x20u);
  }
  id v6 = +[ADPreferences sharedPreferences];
  id v7 = [v6 siriDataSharingOptInStatus];

  if (v7 == (id)1)
  {
    CFStringRef v8 = +[ADPreferences sharedPreferences];
    id v9 = [v8 siriDataSharingOptInStatus];
    __int16 v10 = +[AFPreferences sharedPreferences];
    id v11 = [v10 siriDataSharingOptInStatusHistory];
    if (qword_100585E40 != -1) {
      dispatch_once(&qword_100585E40, &stru_1005069F0);
    }
    int v12 = byte_100585E39;
    id v13 = v11;
    id v14 = v13;
    if (v9 == (id)2 || !v12)
    {
      id v19 = v13;
      id v20 = [v19 count];
      if (!v9 || v20)
      {
        uint64_t v22 = [v19 firstObject];
        __int16 v23 = [v22 objectForKey:kAFSiriDataSharingOptInStatusHistoryNewOptInStatusKey];

        if ((id)AFSiriDataSharingOptInStatusGetFromName() == v9)
        {

          int v16 = 0;
          char v15 = 1;
        }
        else
        {
          CFStringRef v24 = (void *)AFSiriLogContextDaemon;
          if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
          {
            log = v24;
            uint64_t v36 = AFSiriDataSharingOptInStatusGetName();
            AFSiriDataSharingOptInStatusGetName();
            __int16 v37 = (__CFString *)objc_claimAutoreleasedReturnValue();
            id v38 = [v19 count];
            *(_DWORD *)long long buf = 136315906;
            id v41 = "_ADIsOptInStatusExplainable";
            __int16 v42 = 2112;
            uint64_t v43 = v36;
            __int16 v44 = 2112;
            uint64_t v45 = v37;
            __int16 v46 = 2048;
            id v47 = v38;
            _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "%s Inconsistent opt-in status change history. Opt-in status = %@; mostRecentOptInStatusChangeValue = %@; o"
              "ptInStatusHistory size = %lu",
              buf,
              0x2Au);
          }
          char v15 = 0;
          int v16 = 2;
        }
      }
      else
      {
        __int16 v21 = (void *)AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
        {
          uint64_t v34 = v21;
          __int16 v35 = AFSiriDataSharingOptInStatusGetName();
          *(_DWORD *)long long buf = 136315394;
          id v41 = "_ADIsOptInStatusExplainable";
          __int16 v42 = 2112;
          uint64_t v43 = v35;
          _os_log_error_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_ERROR, "%s Inconsistent opt-in status change history. optInStatusHistory is empty and currentOptInStatus is not Unspecified (%@)", buf, 0x16u);
        }
        char v15 = 0;
        int v16 = 2;
      }
    }
    else
    {
      char v15 = 0;
      int v16 = 1;
    }

    if ((v15 & 1) == 0)
    {
      long long v26 = (void *)AFSiriLogContextSpeech;
      if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_ERROR))
      {
        long long v31 = v26;
        long long v32 = @"ADOptInStateInconsistencyConditionUnexplainable";
        if (!v16) {
          long long v32 = @"ADOptInStateInconsistencyConditionTinkerWatch";
        }
        if (v16 == 1) {
          long long v32 = @"ADOptInStateInconsistencyConditionDemoModeWatch";
        }
        id v33 = v32;
        *(_DWORD *)long long buf = 136315650;
        id v41 = "_ADStartSendingAudioDataToServer";
        __int16 v42 = 2112;
        uint64_t v43 = v4;
        __int16 v44 = 2112;
        uint64_t v45 = v33;
        _os_log_error_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_ERROR, "%s %@ Sampling: Cancelling audio upload due to inconsistent condition: %@.", buf, 0x20u);
      }
      long long v27 = (ADSpeechSamplingSendAudioData *)objc_alloc_init((Class)OPTINSchemaOPTINClientEvent);
      id v28 = objc_alloc_init((Class)OPTINSchemaOPTINInconsistentStateDetected);
      [v28 setInconsistencyTrigger:1];
      [v28 setInconsistencyCondition:(v16 + 1)];
      [(ADSpeechSamplingSendAudioData *)v27 setInconsistentStateDetected:v28];
      [(ADSpeechSamplingSendAudioData *)v27 setHasInconsistentStateDetected:1];
      long long v29 = +[AssistantSiriAnalytics sharedStream];
      [v29 emitMessage:v27];

      goto LABEL_33;
    }
    if ([v3 count])
    {
      if (a2) {
        long long v25 = [[ADSpeechSamplingSendAudioData alloc] initWithAudioDataFolders:v3 samplingType:1];
      }
      else {
        long long v25 = [[ADSpeechSamplingDictationAudioDataHandler alloc] initWithAudioDataFolders:v3];
      }
      long long v27 = v25;
      [(ADSpeechSamplingSendAudioData *)v25 sendAudioDataToServer];
LABEL_33:

      goto LABEL_34;
    }
    id v17 = AFSiriLogContextSpeech;
    if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 136315394;
      id v41 = "_ADStartSendingAudioDataToServer";
      __int16 v42 = 2112;
      uint64_t v43 = v4;
      CFStringRef v18 = "%s %@ Sampling: Done with sending audio data to server.";
      goto LABEL_11;
    }
  }
  else
  {
    id v17 = AFSiriLogContextSpeech;
    if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 136315394;
      id v41 = "_ADStartSendingAudioDataToServer";
      __int16 v42 = 2112;
      uint64_t v43 = v4;
      CFStringRef v18 = "%s %@ Sampling: Cancelling audio upload due to opt in status";
LABEL_11:
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, v18, buf, 0x16u);
    }
  }
LABEL_34:
}

void sub_10025E0B8(uint64_t a1)
{
  uint64_t v2 = AFSiriLogContextSpeech;
  if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 24);
    int v6 = 136315394;
    id v7 = "-[ADSpeechSamplingDictationAudioDataHandler adSpeechRecognized:usingSpeechModel:sessionUUID:]_block_invoke";
    __int16 v8 = 2112;
    uint64_t v9 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s Dictation Sampling: Done with sending audio to server. Deleting %@", (uint8_t *)&v6, 0x16u);
  }
  uint64_t v4 = [*(id *)(*(void *)(a1 + 32) + 40) valueForKey:@"dictationUIInteractionIdentifier"];
  sub_10025D770(2, v4, 0);

  id v5 = +[AFDictationSamplingUtilities deleteItemAtFilePath:*(void *)(*(void *)(a1 + 32) + 24)];
  [*(id *)(*(void *)(a1 + 32) + 16) removeObjectAtIndex:0];
  sub_10025DA74(*(void **)(*(void *)(a1 + 32) + 16), 0);
}

void sub_10025E2AC(uint64_t a1)
{
  uint64_t v2 = AFSiriLogContextSpeech;
  if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_ERROR))
  {
    uint64_t v4 = *(void *)(a1 + 40);
    uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 24);
    uint64_t v6 = *(void *)(a1 + 48);
    int v7 = 136315906;
    __int16 v8 = "-[ADSpeechSamplingDictationAudioDataHandler adSpeechRecognitionDidFail:sessionUUID:]_block_invoke";
    __int16 v9 = 2112;
    uint64_t v10 = v5;
    __int16 v11 = 2112;
    uint64_t v12 = v4;
    __int16 v13 = 2112;
    uint64_t v14 = v6;
    _os_log_error_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "%s Dictation Sampling: Error while sending audio to server %@ - %@ - %@", (uint8_t *)&v7, 0x2Au);
  }
  [*(id *)(a1 + 32) setShouldStopAddingSamples:1];
  uint64_t v3 = [*(id *)(*(void *)(a1 + 32) + 40) valueForKey:@"dictationUIInteractionIdentifier"];
  sub_10025D770(1, v3, *(void **)(a1 + 48));

  [*(id *)(*(void *)(a1 + 32) + 16) removeObjectAtIndex:0];
  sub_10025DA74(*(void **)(*(void *)(a1 + 32) + 16), 0);
}

id sub_10025E7EC(uint64_t a1)
{
  return [*(id *)(a1 + 32) addAudioSamplesOnQueue:*(void *)(a1 + 40)];
}

void sub_10025E86C(uint64_t a1)
{
  [*(id *)(*(void *)(a1 + 32) + 56) setApplicationName:@"OnDeviceDictationAudioData"];
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(v2 + 56);
  uint64_t v4 = *(void *)(v2 + 40);
  uint64_t v14 = 0;
  uint64_t v5 = +[NSJSONSerialization dataWithJSONObject:v4 options:0 error:&v14];
  if (v14) {
    uint64_t v6 = &stru_10050F7D8;
  }
  else {
    uint64_t v6 = (__CFString *)[objc_alloc((Class)NSString) initWithData:v5 encoding:4];
  }

  [v3 setSamplingInfo:v6];
  int v7 = [*(id *)(*(void *)(a1 + 32) + 40) valueForKey:@"language"];
  __int16 v8 = [*(id *)(*(void *)(a1 + 32) + 40) valueForKey:@"samplingRate"];
  id v9 = [v8 integerValue];

  *(void *)(*(void *)(a1 + 32) + 72) = (uint64_t)((double)(unint64_t)v9 * 5.0
                                                     + (double)(unint64_t)v9 * 5.0);
  uint64_t v10 = [*(id *)(*(void *)(a1 + 32) + 48) startSessionForReason:@"send on device dictation audio data" languageCode:v7 options:*(void *)(*(void *)(a1 + 32) + 56) speechRequestOptions:0];
  __int16 v11 = +[ADCommandCenter sharedCommandCenter];
  objc_msgSend(v11, "startRecordedDictationWithLanguage:options:sessionUUID:narrowband:delegate:", v7, *(void *)(*(void *)(a1 + 32) + 56), v10, v9 == (id)8000);

  uint64_t v12 = dispatch_get_global_queue(0, 0);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  _OWORD v13[2] = sub_10025EA5C;
  v13[3] = &unk_10050E138;
  void v13[4] = *(void *)(a1 + 32);
  dispatch_async(v12, v13);
}

void sub_10025EA5C(uint64_t a1)
{
  id v2 = +[NSFileHandle fileHandleForReadingAtPath:*(void *)(*(void *)(a1 + 32) + 32)];
  [*(id *)(a1 + 32) addAudioSamplesOnQueue:v2];
}

void sub_10025EF3C(uint64_t a1)
{
  uint64_t v1 = a1;
  id v93 = sub_10025D15C(a1);
  switch(v1)
  {
    case 2:
      id v2 = (objc_class *)AFLocalSpeechRecognitionSamplingUtilities;
      goto LABEL_7;
    case 1:
      id v2 = (objc_class *)AFAssistantSamplingUtilities;
      goto LABEL_7;
    case 0:
      id v2 = (objc_class *)AFDictationSamplingUtilities;
LABEL_7:
      id v3 = objc_alloc_init(v2);
      goto LABEL_11;
  }
  uint64_t v4 = AFSiriLogContextSpeech;
  if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)long long buf = 136315394;
    id v121 = "_ADSpeechSamplingDeleteOldData";
    __int16 v122 = 2112;
    v123 = v93;
    _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "%s %@ Sampling - Deletion: Unsupported ADSpeechSamplingType", buf, 0x16u);
  }
  id v3 = 0;
LABEL_11:
  UInt32 v86 = [(id)objc_opt_class() sampledLibraryDirectoryPath];
  if (v86)
  {
    uint64_t v5 = AFSiriLogContextSpeech;
    if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 136315394;
      id v121 = "_ADSpeechSamplingDeleteOldData";
      __int16 v122 = 2112;
      v123 = v93;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "%s %@ Sampling - Deletion: Start deleting old On Device sampled audio data", buf, 0x16u);
    }
    uint64_t v6 = +[NSFileManager defaultManager];
    id v110 = 0;
    int v7 = [v6 contentsOfDirectoryAtPath:v86 error:&v110];
    id v8 = v110;

    if (!v8 && [v7 count])
    {
      long long v78 = 0;
      id v80 = objc_alloc_init((Class)NSMutableArray);
      long long v106 = 0u;
      long long v107 = 0u;
      long long v108 = 0u;
      long long v109 = 0u;
      long long v79 = v7;
      id v9 = v7;
      id v10 = [v9 countByEnumeratingWithState:&v106 objects:v119 count:16];
      if (v10)
      {
        id v11 = v10;
        uint64_t v12 = *(void *)v107;
        do
        {
          for (i = 0; i != v11; i = (char *)i + 1)
          {
            if (*(void *)v107 != v12) {
              objc_enumerationMutation(v9);
            }
            uint64_t v14 = *(void **)(*((void *)&v106 + 1) + 8 * i);
            if ([(id)objc_opt_class() isFileNameValid:v14] && sub_10025FA18(v14)) {
              [v80 addObject:v14];
            }
          }
          id v11 = [v9 countByEnumeratingWithState:&v106 objects:v119 count:16];
        }
        while (v11);
      }

      if ([v80 count])
      {
        char v15 = (void *)AFSiriLogContextSpeech;
        if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_INFO))
        {
          int v16 = v15;
          id v17 = [v80 count];
          *(_DWORD *)long long buf = 136315906;
          id v121 = "_ADSpeechSamplingDeleteOldData";
          __int16 v122 = 2112;
          v123 = v93;
          __int16 v124 = 2048;
          uint64_t v125 = 7;
          __int16 v126 = 2048;
          id v127 = v17;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "%s %@ Sampling - Deletion: Number of data older than %ld days that will be purged: %ld", buf, 0x2Au);
        }
        long long v104 = 0u;
        long long v105 = 0u;
        long long v102 = 0u;
        long long v103 = 0u;
        id obj = v80;
        id v85 = [obj countByEnumeratingWithState:&v102 objects:v118 count:16];
        if (v85)
        {
          uint64_t v84 = *(void *)v103;
          uint64_t v82 = v1;
          id v83 = v3;
          do
          {
            for (j = 0; j != v85; j = (char *)j + 1)
            {
              if (*(void *)v103 != v84) {
                objc_enumerationMutation(obj);
              }
              id v19 = objc_msgSend(v86, "stringByAppendingPathComponent:", *(void *)(*((void *)&v102 + 1) + 8 * (void)j), v78);
              id v20 = v19;
              if (v1)
              {
                id v87 = v19;
                long long v89 = j;
                id v21 = v19;
                long long v91 = (__CFString *)objc_alloc_init((Class)NSMutableArray);
                id v22 = objc_alloc_init((Class)NSFileManager);
                __int16 v23 = [v22 contentsOfDirectoryAtPath:v21 error:0];
                long long v112 = 0u;
                long long v113 = 0u;
                long long v114 = 0u;
                long long v115 = 0u;
                id v24 = [v23 countByEnumeratingWithState:&v112 objects:buf count:16];
                if (v24)
                {
                  id v25 = v24;
                  uint64_t v26 = *(void *)v113;
                  do
                  {
                    for (k = 0; k != v25; k = (char *)k + 1)
                    {
                      if (*(void *)v113 != v26) {
                        objc_enumerationMutation(v23);
                      }
                      id v28 = *(void **)(*((void *)&v112 + 1) + 8 * (void)k);
                      if ([v28 hasSuffix:@".plist"])
                      {
                        long long v29 = [v28 lastPathComponent];
                        long long v30 = [v29 stringByDeletingPathExtension];

                        long long v31 = sub_10025CF90(v21, (uint64_t)v30, v1);
                        long long v32 = [v31 valueForKey:@"asrSelfComponentIdentifier"];
                        if (v32) {
                          [(__CFString *)v91 addObject:v32];
                        }
                      }
                    }
                    id v25 = [v23 countByEnumeratingWithState:&v112 objects:buf count:16];
                  }
                  while (v25);
                }

                id v33 = +[AFAssistantSamplingUtilities deleteItemAtFilePath:v21];
                if (v33)
                {
                  long long v96 = 0uLL;
                  long long v97 = 0uLL;
                  long long v94 = 0uLL;
                  long long v95 = 0uLL;
                  uint64_t v92 = v91;
                  id v34 = [(__CFString *)v92 countByEnumeratingWithState:&v94 objects:v116 count:16];
                  if (v34)
                  {
                    id v35 = v34;
                    uint64_t v36 = *(void *)v95;
                    do
                    {
                      for (m = 0; m != v35; m = (char *)m + 1)
                      {
                        if (*(void *)v95 != v36) {
                          objc_enumerationMutation(v92);
                        }
                        id v38 = [objc_alloc((Class)NSUUID) initWithUUIDString:*(void *)(*((void *)&v94 + 1) + 8 * (void)m)];
                        id v39 = v93;
                        id v40 = v38;
                        id v41 = v33;
                        id v42 = objc_alloc_init((Class)ASRSchemaASRSampledAudioFileDeletionFailed);
                        id v43 = [objc_alloc((Class)SISchemaUUID) initWithNSUUID:v40];

                        [v42 setOriginalAsrId:v43];
                        objc_msgSend(v42, "setErrorCode:", objc_msgSend(v41, "code"));
                        __int16 v44 = [v41 domain];
                        [v42 setErrorDomain:v44];

                        uint64_t v45 = [v41 userInfo];

                        __int16 v46 = [v45 objectForKey:NSUnderlyingErrorKey];

                        if (v46)
                        {
                          objc_msgSend(v42, "setUnderlyingErrorCode:", objc_msgSend(v46, "code"));
                          id v47 = [v46 domain];
                          [v42 setUnderlyingErrorDomain:v47];
                        }
                        sub_10025C7C8(v42, v39);
                      }
                      id v35 = [(__CFString *)v92 countByEnumeratingWithState:&v94 objects:v116 count:16];
                    }
                    while (v35);
                  }
                }
                else
                {
                  long long v100 = 0uLL;
                  long long v101 = 0uLL;
                  long long v98 = 0uLL;
                  long long v99 = 0uLL;
                  id v53 = v91;
                  id v54 = [(__CFString *)v53 countByEnumeratingWithState:&v98 objects:v117 count:16];
                  if (v54)
                  {
                    id v55 = v54;
                    uint64_t v56 = *(void *)v99;
                    do
                    {
                      for (n = 0; n != v55; n = (char *)n + 1)
                      {
                        if (*(void *)v99 != v56) {
                          objc_enumerationMutation(v53);
                        }
                        id v58 = [objc_alloc((Class)NSUUID) initWithUUIDString:*(void *)(*((void *)&v98 + 1) + 8 * (void)n)];
                        id v59 = v93;
                        id v60 = objc_alloc_init((Class)ASRSchemaASRSampledAudioFileDeleted);
                        id v61 = [objc_alloc((Class)SISchemaUUID) initWithNSUUID:v58];

                        [v60 setOriginalAsrId:v61];
                        sub_10025C7C8(v60, v59);
                      }
                      id v55 = [(__CFString *)v53 countByEnumeratingWithState:&v98 objects:v117 count:16];
                    }
                    while (v55);
                  }
                }
                __int16 v52 = v91;

                uint64_t v1 = v82;
                id v3 = v83;
                id v20 = v87;
                j = v89;
              }
              else
              {
                id v48 = +[NSFileManager defaultManager];
                id v111 = 0;
                id v49 = [v48 contentsOfDirectoryAtPath:v20 error:&v111];
                id v50 = v111;

                if (v50 || ![v49 count])
                {
                  id v51 = AFSiriLogContextSpeech;
                  __int16 v52 = &stru_10050F7D8;
                  if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)long long buf = 136315394;
                    id v121 = "_ADGetDictationUIInteractionIdentifier";
                    __int16 v122 = 2112;
                    v123 = v20;
                    _os_log_error_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_ERROR, "%s Dictation Sampling: Empty folderPath %@ or could not get contents.", buf, 0x16u);
                  }
                }
                else
                {
                  long long v114 = 0u;
                  long long v115 = 0u;
                  long long v112 = 0u;
                  long long v113 = 0u;
                  id v62 = v49;
                  id v63 = [v62 countByEnumeratingWithState:&v112 objects:buf count:16];
                  if (v63)
                  {
                    id v64 = v63;
                    long long v88 = v20;
                    long long v90 = j;
                    uint64_t v65 = *(void *)v113;
                    while (2)
                    {
                      for (ii = 0; ii != v64; ii = (char *)ii + 1)
                      {
                        if (*(void *)v113 != v65) {
                          objc_enumerationMutation(v62);
                        }
                        id v67 = *(void **)(*((void *)&v112 + 1) + 8 * (void)ii);
                        __int16 v68 = [v67 pathExtension];
                        unsigned int v69 = [v68 isEqual:@"pcm"];

                        if (v69)
                        {
                          id v71 = [v67 lastPathComponent];
                          id v72 = [v71 stringByDeletingPathExtension];

                          id v73 = sub_10025CF90(v88, (uint64_t)v72, 0);
                          uint64_t v74 = [v73 objectForKeyedSubscript:@"dictationUIInteractionIdentifier"];
                          long long v75 = (void *)v74;
                          long long v76 = &stru_10050F7D8;
                          if (v74) {
                            long long v76 = (__CFString *)v74;
                          }
                          uint64_t v70 = v76;

                          id v20 = v88;
                          id v3 = v83;
                          j = v90;
                          goto LABEL_82;
                        }
                      }
                      id v64 = [v62 countByEnumeratingWithState:&v112 objects:buf count:16];
                      if (v64) {
                        continue;
                      }
                      break;
                    }
                    uint64_t v70 = &stru_10050F7D8;
                    id v3 = v83;
                    id v20 = v88;
                    j = v90;
                  }
                  else
                  {
                    uint64_t v70 = &stru_10050F7D8;
                  }
LABEL_82:

                  __int16 v52 = v70;
                }

                sub_10025D770(0, v52, 0);
                id v77 = +[AFDictationSamplingUtilities deleteItemAtFilePath:v20];
              }
            }
            id v85 = [obj countByEnumeratingWithState:&v102 objects:v118 count:16];
          }
          while (v85);
        }
      }
      id v8 = v78;
      int v7 = v79;
    }
  }
}

BOOL sub_10025FA18(void *a1)
{
  id v1 = a1;
  uint64_t v2 = (uint64_t)[(id)objc_opt_class() calculateFileNameAgeInDays:v1];

  return v2 > 7;
}

void sub_10025FA60(uint64_t a1, char a2)
{
  id v61 = sub_10025D15C(a1);
  id v3 = AFSiriLogContextSpeech;
  if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)long long buf = 136315394;
    UInt32 v86 = "_ADSpeechSamplingSendSampledAudioDataToServer";
    __int16 v87 = 2112;
    long long v88 = v61;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "%s %@ Sampling - Send to server: Start processing On Device sampled audio data", buf, 0x16u);
  }
  if (a1)
  {
    if (a1 != 1)
    {
      __int16 v13 = AFSiriLogContextSpeech;
      if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 136315394;
        UInt32 v86 = "_ADSpeechSamplingSendSampledAudioDataToServer";
        __int16 v87 = 2112;
        long long v88 = v61;
        _os_log_error_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "%s %@ Sampling - Send to server: Unsupported ADSpeechSamplingType", buf, 0x16u);
      }
      uint64_t v6 = 0;
      id v5 = 0;
      goto LABEL_72;
    }
    uint64_t v4 = (Class *)AFAssistantSamplingUtilities_ptr;
  }
  else
  {
    uint64_t v4 = (Class *)AFDictationSamplingUtilities_ptr;
  }
  id v5 = objc_alloc_init(*v4);
  uint64_t v6 = [(objc_class *)*v4 sampledLibraryDirectoryPath];
  if (!v6) {
    goto LABEL_72;
  }
  int v7 = +[NSFileManager defaultManager];
  id v77 = 0;
  id v8 = [v7 contentsOfDirectoryAtPath:v6 error:&v77];
  id v9 = v77;

  if (v9 || ![v8 count])
  {
    id v10 = (void *)AFSiriLogContextSpeech;
    if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_INFO))
    {
      id v11 = v10;
      id v12 = [v8 count];
      *(_DWORD *)long long buf = 136315906;
      UInt32 v86 = "_ADSpeechSamplingSendSampledAudioDataToServer";
      __int16 v87 = 2112;
      long long v88 = v61;
      __int16 v89 = 2112;
      id v90 = v9;
      __int16 v91 = 2048;
      id v92 = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "%s %@ Sampling - Send to server: No data to be pushed to server. error: %@, listOfFiles=%lu", buf, 0x2Au);
    }
    goto LABEL_71;
  }
  id v62 = v6;
  id v64 = objc_alloc_init((Class)NSMutableArray);
  long long v73 = 0u;
  long long v74 = 0u;
  long long v75 = 0u;
  long long v76 = 0u;
  id v59 = v8;
  id v14 = v8;
  id v15 = [v14 countByEnumeratingWithState:&v73 objects:v84 count:16];
  id v68 = v5;
  if (!v15) {
    goto LABEL_32;
  }
  id v16 = v15;
  uint64_t v17 = *(void *)v74;
  do
  {
    for (i = 0; i != v16; i = (char *)i + 1)
    {
      if (*(void *)v74 != v17) {
        objc_enumerationMutation(v14);
      }
      id v19 = *(void **)(*((void *)&v73 + 1) + 8 * i);
      if (![(id)objc_opt_class() isFileNameValid:v19])
      {
        __int16 v23 = AFSiriLogContextSpeech;
        if (!os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_DEBUG)) {
          continue;
        }
        *(_DWORD *)long long buf = 136315650;
        UInt32 v86 = "_ADSpeechSamplingSendSampledAudioDataToServer";
        __int16 v87 = 2112;
        long long v88 = v61;
        __int16 v89 = 2112;
        id v90 = v19;
        id v21 = v23;
        id v22 = "%s %@ Sampling - invalid filename %@";
        goto LABEL_26;
      }
      if (sub_10025FA18(v19)
        || (a2 & 1) == 0
        && (id v24 = v19,
            uint64_t v25 = (uint64_t)[(id)objc_opt_class() calculateFileNameAgeInDays:v24],
            v24,
            BOOL v26 = v25 < 1,
            id v5 = v68,
            v26))
      {
        id v20 = AFSiriLogContextSpeech;
        if (!os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_DEBUG)) {
          continue;
        }
        *(_DWORD *)long long buf = 136315650;
        UInt32 v86 = "_ADSpeechSamplingSendSampledAudioDataToServer";
        __int16 v87 = 2112;
        long long v88 = v61;
        __int16 v89 = 2112;
        id v90 = v19;
        id v21 = v20;
        id v22 = "%s %@ Sampling - not to be pushed %@";
LABEL_26:
        _os_log_debug_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, v22, buf, 0x20u);
        continue;
      }
      [v64 addObject:v19];
    }
    id v16 = [v14 countByEnumeratingWithState:&v73 objects:v84 count:16];
  }
  while (v16);
LABEL_32:

  id v27 = [v64 count];
  id v28 = AFSiriLogContextSpeech;
  BOOL v29 = os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_INFO);
  if (v27)
  {
    if (v29)
    {
      long long v30 = v28;
      id v31 = [v64 count];
      *(_DWORD *)long long buf = 136315650;
      UInt32 v86 = "_ADSpeechSamplingSendSampledAudioDataToServer";
      __int16 v87 = 2112;
      long long v88 = v61;
      __int16 v89 = 2048;
      id v90 = v31;
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_INFO, "%s %@ Sampling - Send to server: Number of audio folders that needs to be pushed to server: %ld", buf, 0x20u);
    }
    id v60 = +[NSMutableArray array];
    long long v69 = 0u;
    long long v70 = 0u;
    long long v71 = 0u;
    long long v72 = 0u;
    id obj = v64;
    uint64_t v6 = v62;
    uint64_t v32 = a1;
    id v33 = &HMAccessoryCategoryTypeAirPort_ptr;
    id v67 = [obj countByEnumeratingWithState:&v69 objects:v83 count:16];
    if (v67)
    {
      uint64_t v66 = *(void *)v70;
      do
      {
        id v34 = 0;
        do
        {
          if (*(void *)v70 != v66) {
            objc_enumerationMutation(obj);
          }
          id v35 = [v6 stringByAppendingPathComponent:*(void *)(*((void *)&v69 + 1) + 8 * (void)v34)];
          uint64_t v36 = sub_10025D15C(v32);
          __int16 v37 = [v33[418] defaultManager];
          id v82 = 0;
          id v38 = [v37 contentsOfDirectoryAtPath:v35 error:&v82];
          id v39 = v82;

          if (v39 || ![v38 count])
          {
            id v40 = AFSiriLogContextSpeech;
            if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)id v93 = 136315650;
              long long v94 = "_ADIsAudioDataFolderValidForProcessing";
              __int16 v95 = 2112;
              long long v96 = v36;
              __int16 v97 = 2112;
              id v98 = v35;
              _os_log_error_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_ERROR, "%s %@ Sampling: Empty folderPath %@ or could not get contents.", v93, 0x20u);
            }
          }
          else
          {
            long long v80 = 0u;
            long long v81 = 0u;
            long long v78 = 0u;
            long long v79 = 0u;
            id v43 = v38;
            id v44 = [v43 countByEnumeratingWithState:&v78 objects:buf count:16];
            if (v44)
            {
              id v45 = v44;
              uint64_t v46 = *(void *)v79;
LABEL_51:
              uint64_t v47 = 0;
              while (1)
              {
                if (*(void *)v79 != v46) {
                  objc_enumerationMutation(v43);
                }
                id v48 = *(void **)(*((void *)&v78 + 1) + 8 * v47);
                id v49 = [v48 pathExtension];
                unsigned int v50 = [v49 isEqual:@"pcm"];

                if (v50) {
                  break;
                }
                if (v45 == (id)++v47)
                {
                  id v45 = [v43 countByEnumeratingWithState:&v78 objects:buf count:16];
                  if (v45) {
                    goto LABEL_51;
                  }
                  goto LABEL_57;
                }
              }
              __int16 v52 = [v48 lastPathComponent];
              id v53 = [v52 stringByDeletingPathExtension];

              uint64_t v32 = a1;
              id v54 = sub_10025CF90(v35, (uint64_t)v53, a1);
              id v55 = [v54 valueForKey:@"language"];
              uint64_t v56 = [v54 valueForKey:@"samplingRate"];
              id v57 = [v56 integerValue];

              uint64_t v6 = v62;
              id v33 = &HMAccessoryCategoryTypeAirPort_ptr;
              if (v54 && v55 && v57)
              {
                [v60 addObject:v35];
                id v5 = v68;
                goto LABEL_60;
              }
            }
            else
            {
LABEL_57:

              uint64_t v6 = v62;
              uint64_t v32 = a1;
              id v33 = &HMAccessoryCategoryTypeAirPort_ptr;
            }
          }
          id v41 = AFSiriLogContextSpeech;
          if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)long long buf = 136315650;
            UInt32 v86 = "_ADSpeechSamplingSendSampledAudioDataToServer";
            __int16 v87 = 2112;
            long long v88 = v61;
            __int16 v89 = 2112;
            id v90 = v35;
            _os_log_debug_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEBUG, "%s %@ Sampling - Send to server: audioDataFolderPath %@ does not contain valid contents. It will be purged.", buf, 0x20u);
          }
          id v5 = v68;
          if (v32) {
            id v42 = AFAssistantSamplingUtilities;
          }
          else {
            id v42 = AFDictationSamplingUtilities;
          }
          id v51 = [v42 deleteItemAtFilePath:v35];
LABEL_60:

          id v34 = (char *)v34 + 1;
        }
        while (v34 != v67);
        id v58 = [obj countByEnumeratingWithState:&v69 objects:v83 count:16];
        id v67 = v58;
      }
      while (v58);
    }

    sub_10025DA74(v60, v32);
  }
  else
  {
    uint64_t v6 = v62;
    if (v29)
    {
      *(_DWORD *)long long buf = 136315394;
      UInt32 v86 = "_ADSpeechSamplingSendSampledAudioDataToServer";
      __int16 v87 = 2112;
      long long v88 = v61;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_INFO, "%s %@ Sampling - Send to server: No data to be pushed to server.", buf, 0x16u);
    }
  }

  id v9 = 0;
  id v8 = v59;
LABEL_71:

LABEL_72:
}

void sub_1002605CC(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  uint64_t v2 = *(void *)(a1 + 40);
  id v3 = +[ADCommandCenter sharedCommandCenter];
  (*(void (**)(uint64_t, id))(v2 + 16))(v2, [v3 isTimeoutSuspended]);
}

void sub_100260754(uint64_t a1, void *a2, void *a3)
{
  id v7 = a2;
  id v5 = a3;
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  uint64_t v6 = *(void *)(a1 + 40);
  if (v6) {
    (*(void (**)(uint64_t, id, id))(v6 + 16))(v6, v7, v5);
  }
}

void sub_1002608B0(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  id v2 = +[ADCommandCenter sharedCommandCenter];
  [v2 isWatchAuthenticatedWithCompletion:*(void *)(a1 + 40)];
}

void sub_1002609F4(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  uint64_t v2 = *(void *)(a1 + 40);
  id v3 = +[ADCommandCenter sharedCommandCenter];
  (*(void (**)(uint64_t, id))(v2 + 16))(v2, [v3 isInStarkMode]);
}

void sub_100260B4C(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  id v2 = +[ADCommandCenter sharedCommandCenter];
  [v2 isInCarDNDModeWithCompletion:*(void *)(a1 + 40)];
}

void sub_100260C90(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  uint64_t v2 = *(void *)(a1 + 40);
  id v3 = +[ADCommandCenter sharedCommandCenter];
  (*(void (**)(uint64_t, id))(v2 + 16))(v2, [v3 isDeviceLocked]);
}

uint64_t sub_100260DFC(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);
  return v2();
}

uint64_t sub_100260F84(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100260F94(uint64_t a1)
{
}

void sub_100260F9C(uint64_t a1)
{
  uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 104) allKeys];
  id v3 = [v2 copy];
  uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8);
  id v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;

  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  id v6 = *(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
  id v7 = [v6 countByEnumeratingWithState:&v22 objects:v32 count:16];
  if (v7)
  {
    id v9 = v7;
    uint64_t v10 = *(void *)v23;
    *(void *)&long long v8 = 136315394;
    long long v21 = v8;
    do
    {
      id v11 = 0;
      do
      {
        if (*(void *)v23 != v10) {
          objc_enumerationMutation(v6);
        }
        uint64_t v12 = *(void *)(*((void *)&v22 + 1) + 8 * (void)v11);
        id v13 = objc_msgSend(*(id *)(*(void *)(a1 + 32) + 112), "countForObject:", v12, v21);
        id v14 = AFSiriLogContextDaemon;
        BOOL v15 = os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG);
        if (v13)
        {
          if (!v15) {
            goto LABEL_10;
          }
          *(_DWORD *)long long buf = 136315650;
          id v27 = "-[ADServiceConnection _stopTimersWithContinuation]_block_invoke";
          __int16 v28 = 2112;
          uint64_t v29 = v12;
          __int16 v30 = 2048;
          id v31 = v13;
          id v16 = v14;
          uint64_t v17 = "%s Timer %@ was already stopped %lu times, add one more time.";
          uint32_t v18 = 32;
        }
        else
        {
          if (!v15) {
            goto LABEL_10;
          }
          *(_DWORD *)long long buf = v21;
          id v27 = "-[ADServiceConnection _stopTimersWithContinuation]_block_invoke";
          __int16 v28 = 2112;
          uint64_t v29 = v12;
          id v16 = v14;
          uint64_t v17 = "%s Stopping timer %@ now...";
          uint32_t v18 = 22;
        }
        _os_log_debug_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, v17, buf, v18);
LABEL_10:
        id v19 = [*(id *)(*(void *)(a1 + 32) + 104) objectForKey:v12];
        [v19 stop];

        [*(id *)(*(void *)(a1 + 32) + 112) addObject:v12];
        id v11 = (char *)v11 + 1;
      }
      while (v9 != v11);
      id v20 = [v6 countByEnumeratingWithState:&v22 objects:v32 count:16];
      id v9 = v20;
    }
    while (v20);
  }
}

void sub_1002611EC(uint64_t a1)
{
  v3[0] = _NSConcreteStackBlock;
  long long v1 = *(_OWORD *)(a1 + 32);
  uint64_t v2 = *(NSObject **)(*(void *)(a1 + 32) + 8);
  v3[1] = 3221225472;
  v3[2] = sub_100261264;
  v3[3] = &unk_10050D5F0;
  long long v4 = v1;
  dispatch_async(v2, v3);
}

void sub_100261264(uint64_t a1)
{
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  id v2 = *(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
  id v3 = [v2 countByEnumeratingWithState:&v14 objects:v24 count:16];
  if (v3)
  {
    id v5 = v3;
    uint64_t v6 = *(void *)v15;
    *(void *)&long long v4 = 136315394;
    long long v13 = v4;
    do
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(void *)v15 != v6) {
          objc_enumerationMutation(v2);
        }
        uint64_t v8 = *(void *)(*((void *)&v14 + 1) + 8 * i);
        objc_msgSend(*(id *)(*(void *)(a1 + 32) + 112), "removeObject:", v8, v13);
        id v9 = [*(id *)(*(void *)(a1 + 32) + 112) countForObject:v8];
        uint64_t v10 = AFSiriLogContextDaemon;
        BOOL v11 = os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG);
        if (v9)
        {
          if (v11)
          {
            *(_DWORD *)long long buf = 136315650;
            id v19 = "-[ADServiceConnection _stopTimersWithContinuation]_block_invoke";
            __int16 v20 = 2112;
            uint64_t v21 = v8;
            __int16 v22 = 2048;
            id v23 = v9;
            _os_log_debug_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "%s Timer %@ was still stopped %lu times.", buf, 0x20u);
          }
        }
        else
        {
          if (v11)
          {
            *(_DWORD *)long long buf = v13;
            id v19 = "-[ADServiceConnection _stopTimersWithContinuation]_block_invoke_2";
            __int16 v20 = 2112;
            uint64_t v21 = v8;
            _os_log_debug_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "%s Resetting timer %@ now...", buf, 0x16u);
          }
          uint64_t v12 = [*(id *)(*(void *)(a1 + 32) + 104) objectForKey:v8];
          [v12 reset];
        }
      }
      id v5 = [v2 countByEnumeratingWithState:&v14 objects:v24 count:16];
    }
    while (v5);
  }
}

id sub_100261590(uint64_t a1)
{
  return [*(id *)(a1 + 32) invalidate];
}

uint64_t sub_100261684(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_100261950(void *a1, void *a2)
{
  id v3 = a2;
  long long v4 = AFSiriLogContextSync;
  if (os_log_type_enabled(AFSiriLogContextSync, OS_LOG_TYPE_ERROR))
  {
    uint64_t v5 = a1[4];
    uint64_t v6 = a1[5];
    int v7 = 136315906;
    uint64_t v8 = "-[ADServiceConnection sendFetchSyncSnapshotForInfo:completion:]_block_invoke";
    __int16 v9 = 2112;
    uint64_t v10 = v5;
    __int16 v11 = 2112;
    uint64_t v12 = v6;
    __int16 v13 = 2112;
    id v14 = v3;
    _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "%s %@ failed to fetch sync snapshot for info %@: %@", (uint8_t *)&v7, 0x2Au);
  }
  (*(void (**)(void))(a1[6] + 16))();
}

uint64_t sub_100261A48(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100261EAC(uint64_t a1)
{
  id v2 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = 136315394;
    int v7 = "-[ADServiceConnection sendBeginSyncWithInfo:chunkHandler:completion:]_block_invoke";
    __int16 v8 = 2112;
    uint64_t v9 = v5;
    _os_log_error_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "%s Plugin timed out for sync with info %@", (uint8_t *)&v6, 0x16u);
  }
  [*(id *)(a1 + 40) clearSyncRequestWithUUID:*(void *)(a1 + 48)];
  [*(id *)(a1 + 56) serviceConnectionTimedoutForSync];
  uint64_t v3 = *(void *)(a1 + 64);
  if (v3)
  {
    long long v4 = +[AFError errorWithCode:103];
    (*(void (**)(uint64_t, void *))(v3 + 16))(v3, v4);
  }
}

id sub_100261FB4(uint64_t a1)
{
  return _[*(id *)(a1 + 32) setSyncRequest:*(void *)(a1 + 40) forUUID:*(void *)(a1 + 48)];
}

void sub_100261FC4(uint64_t a1, void *a2)
{
  id v3 = a2;
  long long v4 = *(NSObject **)(*(void *)(a1 + 32) + 16);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  void v7[2] = sub_1002621D8;
  v7[3] = &unk_10050E228;
  id v8 = *(id *)(a1 + 40);
  id v9 = *(id *)(a1 + 48);
  id v5 = *(id *)(a1 + 56);
  id v10 = v3;
  id v11 = v5;
  id v6 = v3;
  dispatch_async(v4, v7);
}

void sub_1002620A4(void *a1, void *a2)
{
  id v3 = a2;
  long long v4 = AFSiriLogContextSync;
  if (os_log_type_enabled(AFSiriLogContextSync, OS_LOG_TYPE_ERROR))
  {
    uint64_t v7 = a1[4];
    uint64_t v8 = a1[5];
    int v9 = 136315906;
    id v10 = "-[ADServiceConnection sendBeginSyncWithInfo:chunkHandler:completion:]_block_invoke";
    __int16 v11 = 2112;
    uint64_t v12 = v7;
    __int16 v13 = 2112;
    uint64_t v14 = v8;
    __int16 v15 = 2112;
    id v16 = v3;
    _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "%s %@ Sync failed for info %@: %@", (uint8_t *)&v9, 0x2Au);
  }
  uint64_t v5 = a1[6];
  id v6 = +[AFError errorWithCode:101 description:0 underlyingError:v3];
  (*(void (**)(uint64_t, void *))(v5 + 16))(v5, v6);
}

uint64_t sub_1002621C4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1002621D8(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) syncRequestForUUID:*(void *)(a1 + 40)];
  if ([v2 timedout])
  {
    id v3 = AFSiriLogContextSync;
    if (os_log_type_enabled(AFSiriLogContextSync, OS_LOG_TYPE_ERROR))
    {
      int v5 = 136315138;
      id v6 = "-[ADServiceConnection sendBeginSyncWithInfo:chunkHandler:completion:]_block_invoke_3";
      _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "%s Plugin already timed out for sync", (uint8_t *)&v5, 0xCu);
    }
  }
  else
  {
    [*(id *)(a1 + 32) clearSyncRequestWithUUID:*(void *)(a1 + 40)];
    uint64_t v4 = *(void *)(a1 + 56);
    if (v4) {
      (*(void (**)(uint64_t, void))(v4 + 16))(v4, *(void *)(a1 + 48));
    }
  }
}

void sub_1002627D8(uint64_t a1)
{
  id v2 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
  {
    uint64_t v7 = *(void *)(a1 + 32);
    *(_DWORD *)long long buf = 136315394;
    int v9 = "-[ADServiceConnection sendClientBoundCommand:domain:executionContext:reply:]_block_invoke";
    __int16 v10 = 2114;
    uint64_t v11 = v7;
    _os_log_error_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "%s Plugin timed out for message %{public}@", buf, 0x16u);
  }
  [*(id *)(a1 + 40) _removeTimerForUUID:*(void *)(a1 + 48)];
  uint64_t v3 = *(void *)(a1 + 56);
  uint64_t v4 = +[AFError errorWithCode:103];
  (*(void (**)(uint64_t, void, void, void *))(v3 + 16))(v3, 0, 0, v4);

  if (AFIsInternalInstall())
  {
    int v5 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136315138;
      int v9 = "-[ADServiceConnection sendClientBoundCommand:domain:executionContext:reply:]_block_invoke";
      _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "%s Taking stackshot for timedout plugin", buf, 0xCu);
    }
    id v6 = +[NSString stringWithFormat:@"Siri plugin timed out for plugin: %@ %@", *(void *)(*(void *)(a1 + 40) + 32), *(void *)(a1 + 32)];
    WriteStackshotReport_async();
  }
}

void sub_100262978(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  int v5 = *(NSObject **)(v4 + 8);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  void v7[2] = sub_100262DB4;
  v7[3] = &unk_100508278;
  void v7[4] = v4;
  id v8 = *(id *)(a1 + 40);
  id v9 = *(id *)(a1 + 48);
  id v10 = v3;
  id v11 = *(id *)(a1 + 56);
  id v12 = *(id *)(a1 + 64);
  id v6 = v3;
  dispatch_async(v5, v7);
}

void sub_100262A70(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  uint64_t v10 = *(void *)(a1 + 32);
  id v11 = *(NSObject **)(v10 + 8);
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  void v16[2] = sub_100262BB0;
  v16[3] = &unk_100508390;
  void v16[4] = v10;
  id v17 = *(id *)(a1 + 40);
  id v18 = *(id *)(a1 + 48);
  id v19 = v7;
  id v20 = *(id *)(a1 + 56);
  id v21 = v9;
  id v12 = *(id *)(a1 + 64);
  id v22 = v8;
  id v23 = v12;
  id v13 = v8;
  id v14 = v9;
  id v15 = v7;
  dispatch_async(v11, v16);
}

void sub_100262BB0(uint64_t a1)
{
  [*(id *)(a1 + 32) _removeTimerForUUID:*(void *)(a1 + 40)];
  id v2 = *(void **)(a1 + 48);
  if (!v2 || ([v2 cancelIfNotAlreadyCanceled] & 1) != 0)
  {
    [*(id *)(*(void *)(a1 + 32) + 56) markResponseForCommand:*(void *)(a1 + 64)];
    id v3 = *(void **)(a1 + 72);
    if (v3)
    {
      id v4 = v3;
      id v5 = 0;
LABEL_16:
      (*(void (**)(void))(*(void *)(a1 + 88) + 16))();

      return;
    }
    id v8 = *(id *)(a1 + 56);
    if (v8)
    {
      id v5 = [objc_alloc((Class)SAGenericCommand) initWithDictionary:v8];
      id v9 = [v5 className];

      if (v9)
      {
        id v4 = 0;
LABEL_15:

        goto LABEL_16;
      }
      uint64_t v10 = AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
      {
        int v11 = 136315394;
        id v12 = "-[ADServiceConnection sendClientBoundCommand:domain:executionContext:reply:]_block_invoke";
        __int16 v13 = 2112;
        id v14 = v8;
        _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "%s Bad plugin response %@", (uint8_t *)&v11, 0x16u);
      }

      id v4 = +[AFError errorWithCode:102];
    }
    else
    {
      id v4 = 0;
    }
    id v5 = 0;
    goto LABEL_15;
  }
  id v6 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
  {
    id v7 = *(void **)(a1 + 56);
    int v11 = 136315394;
    id v12 = "-[ADServiceConnection sendClientBoundCommand:domain:executionContext:reply:]_block_invoke_2";
    __int16 v13 = 2112;
    id v14 = v7;
    _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "%s message timed out, ignoring plugin reply %@", (uint8_t *)&v11, 0x16u);
  }
}

void sub_100262DB4(uint64_t a1)
{
  [*(id *)(a1 + 32) _removeTimerForUUID:*(void *)(a1 + 40)];
  id v2 = *(void **)(a1 + 48);
  if (v2 && ([v2 cancelIfNotAlreadyCanceled] & 1) == 0)
  {
    id v4 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      uint64_t v7 = *(void *)(a1 + 56);
      int v8 = 136315394;
      id v9 = "-[ADServiceConnection sendClientBoundCommand:domain:executionContext:reply:]_block_invoke_2";
      __int16 v10 = 2114;
      uint64_t v11 = v7;
      _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "%s message timed out, ignoring provider service error %{public}@", (uint8_t *)&v8, 0x16u);
    }
  }
  else
  {
    id v3 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      uint64_t v6 = *(void *)(a1 + 56);
      uint64_t v5 = *(void *)(a1 + 64);
      int v8 = 136315650;
      id v9 = "-[ADServiceConnection sendClientBoundCommand:domain:executionContext:reply:]_block_invoke";
      __int16 v10 = 2114;
      uint64_t v11 = v5;
      __int16 v12 = 2114;
      uint64_t v13 = v6;
      _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "%s Plugin failed for message %{public}@: %{public}@", (uint8_t *)&v8, 0x20u);
    }
    (*(void (**)(void))(*(void *)(a1 + 72) + 16))();
  }
}

id sub_1002630B8(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 104) removeObjectForKey:*(void *)(a1 + 40)];
}

id sub_100263190(void *a1)
{
  return [*(id *)(a1[4] + 104) setObject:a1[5] forKey:a1[6]];
}

void sub_1002634DC(id a1)
{
  long long v1 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v2 = 136315138;
    id v3 = "-[ADServiceConnection _connection]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_INFO, "%s Assistant Service Connection Invalidated", (uint8_t *)&v2, 0xCu);
  }
}

void sub_100263584(id a1)
{
  long long v1 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v3 = 136315138;
    id v4 = "-[ADServiceConnection _connection]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_INFO, "%s Assistant Service Connection Interrupted", (uint8_t *)&v3, 0xCu);
  }
  int v2 = +[AFAnalytics sharedAnalytics];
  [v2 logEventWithType:4002 context:0];
}

uint64_t sub_100263A4C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_100263B10(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100263FC0(uint64_t a1)
{
  int v2 = [*(id *)(*(void *)(a1 + 32) + 24) objectForKey:*(void *)(a1 + 40)];
  [v2 invalidateTimer];
  int v3 = [v2 syncChunkHandler];
  if (v3)
  {
    id v4 = objc_alloc_init(ADSyncChunkInfo);
    [(ADSyncChunkInfo *)v4 setPre:*(void *)(a1 + 48)];
    [(ADSyncChunkInfo *)v4 setPost:*(void *)(a1 + 56)];
    [(ADSyncChunkInfo *)v4 setToAdd:*(void *)(a1 + 64)];
    [(ADSyncChunkInfo *)v4 setToRemove:*(void *)(a1 + 72)];
    [(ADSyncChunkInfo *)v4 setValidity:*(void *)(a1 + 80)];
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    void v11[2] = sub_1002641B4;
    void v11[3] = &unk_10050E250;
    id v12 = *(id *)(a1 + 88);
    ((void (**)(void, ADSyncChunkInfo *, void *))v3)[2](v3, v4, v11);
  }
  else
  {
    uint64_t v5 = AFSiriLogContextSync;
    if (os_log_type_enabled(AFSiriLogContextSync, OS_LOG_TYPE_INFO))
    {
      uint64_t v6 = *(void *)(a1 + 48);
      uint64_t v7 = *(void *)(a1 + 56);
      uint64_t v9 = *(void *)(a1 + 72);
      uint64_t v8 = *(void *)(a1 + 80);
      uint64_t v10 = *(void *)(a1 + 64);
      *(_DWORD *)long long buf = 136316418;
      id v14 = "-[ADServiceConnectionProviderServiceDelegate syncChunksWithPreAnchor:postAnchor:updates:deletes:validity:for"
            "RequestUUID:reply:]_block_invoke";
      __int16 v15 = 2112;
      uint64_t v16 = v6;
      __int16 v17 = 2112;
      uint64_t v18 = v7;
      __int16 v19 = 2112;
      uint64_t v20 = v8;
      __int16 v21 = 2112;
      uint64_t v22 = v10;
      __int16 v23 = 2112;
      uint64_t v24 = v9;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "%s Ignoring sync chunks as we have no chunk handler. (pre=%@, post=%@, validity=%@, updates=%@, deletes=%@)", buf, 0x3Eu);
    }
    (*(void (**)(void))(*(void *)(a1 + 88) + 16))();
  }
}

uint64_t sub_1002641B4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_100264DF8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100264E08(uint64_t a1)
{
}

uint64_t sub_100264E10(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) _cachedKeychainStringForKey:@"Internal Auth Session Token"];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 40) = v2;
  return _objc_release_x1(v2, v4);
}

uint64_t sub_100264F64(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) _cachedKeychainStringForKey:@"Internal Auth AppleConnect Service Ticket"];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 40) = v2;
  return _objc_release_x1(v2, v4);
}

void sub_1002652C4(uint64_t a1)
{
  id v9 = [*(id *)(a1 + 32) _keychainCache];
  uint64_t v2 = [v9 objectForKey:*(void *)(a1 + 40)];
  uint64_t v3 = +[NSNull null];
  if (v2 == v3)
  {
    uint64_t v4 = v2;
    if (!*(void *)(a1 + 48))
    {
LABEL_12:

      goto LABEL_13;
    }
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {

LABEL_7:
    uint64_t v6 = *(void *)(a1 + 48);
    if (v6)
    {
      [v9 setValue:v6 forKey:*(void *)(a1 + 40)];
    }
    else
    {
      uint64_t v7 = +[NSNull null];
      [v9 setValue:v7 forKey:*(void *)(a1 + 40)];
    }
    uint64_t v4 = [*(id *)(a1 + 48) dataUsingEncoding:4];
    AFKeychainSetValueForAccountAndKey();
    uint64_t v8 = *(void *)(a1 + 56);
    if (v8) {
      (*(void (**)(void))(v8 + 16))();
    }
    goto LABEL_12;
  }
  unsigned __int8 v5 = [*(id *)(a1 + 48) isEqualToString:v2];

  if ((v5 & 1) == 0) {
    goto LABEL_7;
  }
LABEL_13:
}

void sub_100266068(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100266084(uint64_t a1)
{
  id v3 = +[NSNotificationCenter defaultCenter];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [v3 postNotificationName:@"ADPreferencesCompanionIdentifierDidChangeNotification" object:WeakRetained];
}

uint64_t sub_1002661E8(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) _cachedKeychainStringForKey:@"Companion Identifier"];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 40) = v2;
  return _objc_release_x1(v2, v4);
}

void sub_100266328(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10026634C(uint64_t a1)
{
  id v3 = +[NSNotificationCenter defaultCenter];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [v3 postNotificationName:@"ADPreferencesSharedUserIdentifierDidChangeNotification" object:WeakRetained];
}

uint64_t sub_1002664B0(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) _cachedKeychainStringForKey:@"Logging User Identifier"];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 40) = v2;
  return _objc_release_x1(v2, v4);
}

uint64_t sub_1002665F4(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) _cachedKeychainStringForKey:@"User Identifier"];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 40) = v2;
  return _objc_release_x1(v2, v4);
}

void sub_100266AEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
}

uint64_t sub_100268240(uint64_t result)
{
  *(unsigned char *)(*(void *)(result + 32) + 17) = 1;
  return result;
}

uint64_t sub_100268384(uint64_t result)
{
  *(unsigned char *)(*(void *)(result + 32) + 16) = 1;
  return result;
}

void sub_100268724(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(unsigned char *)(v2 + 16) || *(unsigned char *)(v2 + 17)) {
    AFBackedUpPreferencesSynchronize();
  }
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, AFInternalPreferencesDidChangeDarwinNotification, 0, 0, 1u);
  uint64_t v4 = *(void *)(a1 + 32);
  if (*(unsigned char *)(v4 + 16))
  {
    unsigned __int8 v5 = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterPostNotification(v5, AFLanguageCodeDidChangeDarwinNotification, 0, 0, 1u);
    *(unsigned char *)(*(void *)(a1 + 32) + 16) = 0;
    uint64_t v4 = *(void *)(a1 + 32);
  }
  if (*(unsigned char *)(v4 + 17))
  {
    uint64_t v6 = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterPostNotification(v6, AFOutputLanguageDidChangeDarwinNotification, 0, 0, 1u);
    *(unsigned char *)(*(void *)(a1 + 32) + 17) = 0;
  }
}

void sub_100268900(id a1)
{
  long long v1 = [ADPreferences alloc];
  id v4 = +[AFInstanceContext currentContext];
  uint64_t v2 = [(ADPreferences *)v1 initWithInstanceContext:v4];
  uint64_t v3 = (void *)qword_100586060;
  qword_100586060 = (uint64_t)v2;
}

void sub_100268F84(void *a1, void *a2)
{
  uint64_t v3 = a1[7];
  id v4 = a2;
  [v4 setGeneration:v3];
  [v4 setDate:a1[4]];
  [v4 setInsertedOrUpdatedItems:a1[5]];
  [v4 setDeletedItemUUIDs:a1[6]];
}

void sub_10026A580(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  _Block_object_dispose((const void *)(v51 - 176), 8);
  _Block_object_dispose(&a51, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10026A60C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10026A61C(uint64_t a1)
{
}

void sub_10026A624(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(NSObject **)(*(void *)(a1 + 32) + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10026A70C;
  block[3] = &unk_100508470;
  id v11 = v3;
  id v5 = *(id *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 32);
  id v12 = v5;
  uint64_t v13 = v6;
  uint64_t v15 = *(void *)(a1 + 64);
  long long v9 = *(_OWORD *)(a1 + 48);
  id v7 = (id)v9;
  long long v14 = v9;
  id v8 = v3;
  dispatch_async(v4, block);
}

void sub_10026A70C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = AFSiriLogContextDaemon;
  BOOL v4 = os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO);
  if (v2)
  {
    if (v4)
    {
      *(_DWORD *)long long buf = 136315394;
      uint64_t v22 = "-[ADMultiUserCloudKitSyncer _syncIdentifiersToCloud:forceUpdate:voiceIDChangedToEnabled:]_block_invoke_2";
      __int16 v23 = 2112;
      uint64_t v24 = v2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "%s Error in updating shared store (%@)", buf, 0x16u);
    }
  }
  else
  {
    if (v4)
    {
      id v5 = *(void **)(a1 + 40);
      uint64_t v6 = v3;
      id v7 = [v5 description];
      *(_DWORD *)long long buf = 136315394;
      uint64_t v22 = "-[ADMultiUserCloudKitSyncer _syncIdentifiersToCloud:forceUpdate:voiceIDChangedToEnabled:]_block_invoke";
      __int16 v23 = 2112;
      uint64_t v24 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "%s succeeded in writing dictionary: %@", buf, 0x16u);
    }
    id v8 = *(void **)(a1 + 48);
    long long v9 = +[ADAssistantDataManager sharedDataManager];
    uint64_t v10 = [v9 unredactedAnchor];
    [v8 _saveCachedAssistantDataAnchor:v10];

    id v11 = *(void **)(a1 + 48);
    uint64_t v12 = *(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 40);
    if (*(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24)) {
      [v11 _saveIdentifiersAnchor:v12];
    }
    else {
      [v11 _saveBackupIdentifiersAnchor:v12];
    }
    uint64_t v13 = +[ADPreferences sharedPreferences];
    [v13 setIsMultiUserSyncerMeDevice:*(unsigned __int8 *)(*(void *)(*(void *)(a1 + 64) + 8) + 24)];

    *(unsigned char *)(*(void *)(a1 + 48) + 66) = *(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24);
    if ([*(id *)(a1 + 56) count])
    {
      long long v14 = +[ADCloudKitManager sharedManager];
      uint64_t v15 = *(void **)(a1 + 56);
      v18[0] = _NSConcreteStackBlock;
      v18[1] = 3221225472;
      void v18[2] = sub_10026A978;
      v18[3] = &unk_100508420;
      id v16 = v15;
      uint64_t v17 = *(void *)(a1 + 48);
      id v19 = v16;
      uint64_t v20 = v17;
      [v14 fetchValuesForKeysFromSharedStore:v16 withQOS:17 completion:v18];
    }
  }
}

void sub_10026A978(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = v5;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v8 = v7;
  }
  else {
    id v8 = 0;
  }

  id v9 = [v8 count];
  uint64_t v10 = AFSiriLogContextDaemon;
  if (v9)
  {
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      id v11 = v7;
      uint64_t v12 = v10;
      objc_opt_class();
      if (objc_opt_isKindOfClass()) {
        id v13 = v11;
      }
      else {
        id v13 = 0;
      }

      int v16 = 136315650;
      uint64_t v17 = "-[ADMultiUserCloudKitSyncer _syncIdentifiersToCloud:forceUpdate:voiceIDChangedToEnabled:]_block_invoke";
      __int16 v18 = 2048;
      id v19 = [v13 count];
      __int16 v20 = 2112;
      id v21 = v6;
      _os_log_error_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "%s Deletion failed, %ld records still exist, error %@", (uint8_t *)&v16, 0x20u);
    }
  }
  else
  {
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      long long v14 = *(void **)(a1 + 32);
      int v16 = 136315395;
      uint64_t v17 = "-[ADMultiUserCloudKitSyncer _syncIdentifiersToCloud:forceUpdate:voiceIDChangedToEnabled:]_block_invoke";
      __int16 v18 = 2113;
      id v19 = v14;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "%s Deletion successful, record fetch yielded no records for record keys (%{private}@)", (uint8_t *)&v16, 0x16u);
    }
    uint64_t v15 = [*(id *)(a1 + 40) _homeMembershipsToDelete];
    [v15 removeAllObjects];
  }
}

void sub_10026B048(void *a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    BOOL v4 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 136315394;
      __int16 v20 = "-[ADMultiUserCloudKitSyncer _deleteHomeMemberShipsFromCloud:]_block_invoke";
      __int16 v21 = 2112;
      id v22 = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%s Error deleting home memberships (%@)", buf, 0x16u);
    }
    unint64_t v5 = a1[6];
    if (v5 >= 5) {
      int64_t v6 = (uint64_t)((double)(v5 >> 1) * 60.0 * 1000000000.0);
    }
    else {
      int64_t v6 = 60000000000;
    }
    dispatch_time_t v11 = dispatch_time(0, v6);
    uint64_t v12 = a1[4];
    id v13 = *(NSObject **)(v12 + 8);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10026B248;
    block[3] = &unk_10050D8C0;
    uint64_t v14 = a1[6];
    void block[4] = v12;
    void block[5] = v14;
    dispatch_after(v11, v13, block);
  }
  else
  {
    id v7 = +[ADCloudKitManager sharedManager];
    id v8 = (void *)a1[5];
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472;
    void v15[2] = sub_10026B2FC;
    v15[3] = &unk_100508420;
    id v9 = v8;
    uint64_t v10 = a1[4];
    id v16 = v9;
    uint64_t v17 = v10;
    [v7 fetchValuesForKeysFromSharedStore:v9 withQOS:17 completion:v15];
  }
}

id sub_10026B248(uint64_t a1)
{
  uint64_t v2 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v4 = 136315138;
    unint64_t v5 = "-[ADMultiUserCloudKitSyncer _deleteHomeMemberShipsFromCloud:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s Retrying deletion", (uint8_t *)&v4, 0xCu);
  }
  return [*(id *)(a1 + 32) _deleteHomeMemberShipsFromCloud:*(void *)(a1 + 40)];
}

void sub_10026B2FC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = v5;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v8 = v7;
  }
  else {
    id v8 = 0;
  }

  id v9 = [v8 count];
  uint64_t v10 = AFSiriLogContextDaemon;
  if (v9)
  {
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      id v11 = v7;
      uint64_t v12 = v10;
      objc_opt_class();
      if (objc_opt_isKindOfClass()) {
        id v13 = v11;
      }
      else {
        id v13 = 0;
      }

      int v16 = 136315650;
      uint64_t v17 = "-[ADMultiUserCloudKitSyncer _deleteHomeMemberShipsFromCloud:]_block_invoke";
      __int16 v18 = 2048;
      id v19 = [v13 count];
      __int16 v20 = 2112;
      id v21 = v6;
      _os_log_error_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "%s Deletion failed, %ld records still exist, error %@", (uint8_t *)&v16, 0x20u);
    }
  }
  else
  {
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      uint64_t v14 = *(void **)(a1 + 32);
      int v16 = 136315395;
      uint64_t v17 = "-[ADMultiUserCloudKitSyncer _deleteHomeMemberShipsFromCloud:]_block_invoke";
      __int16 v18 = 2113;
      id v19 = v14;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "%s Deletion successful, record fetch yielded no records for record keys (%{private}@)", (uint8_t *)&v16, 0x16u);
    }
    uint64_t v15 = [*(id *)(a1 + 40) _homeMembershipsToDelete];
    [v15 removeAllObjects];
  }
}

void sub_10026C374(id *a1)
{
  uint64_t v2 = AFSiriLogContextSession;
  if (os_log_type_enabled(AFSiriLogContextSession, OS_LOG_TYPE_INFO))
  {
    int v17 = 136315138;
    __int16 v18 = "-[ADMultiUserCloudKitSyncer assistantDataManager:didUpdateAssistantData:meCards:unredactedAnchor:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s Got updated assistant data", (uint8_t *)&v17, 0xCu);
  }
  objc_storeStrong((id *)a1[4] + 9, a1[5]);
  objc_storeStrong((id *)a1[4] + 13, a1[6]);
  id v3 = (void *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v4 = v3;
    id v5 = +[ADPreferences sharedPreferences];
    id v6 = [v5 multiUserSyncerSADAnchor];
    uint64_t v7 = *((void *)a1[4] + 10);
    id v8 = a1[7];
    int v17 = 136315906;
    __int16 v18 = "-[ADMultiUserCloudKitSyncer assistantDataManager:didUpdateAssistantData:meCards:unredactedAnchor:]_block_invoke";
    __int16 v19 = 2112;
    __int16 v20 = v6;
    __int16 v21 = 2112;
    uint64_t v22 = v7;
    __int16 v23 = 2112;
    id v24 = v8;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%s saved anchor:%@\tcached anchor:%@\tnew anchor:%@", (uint8_t *)&v17, 0x2Au);
  }
  id v9 = (void *)*((void *)a1[4] + 10);
  id v10 = a1[7];
  if (v9)
  {
    if ([v9 isEqualToString:a1[7]]) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v12 = +[ADPreferences sharedPreferences];
    id v13 = [v12 multiUserSyncerSADAnchor];
    if ([v10 isEqualToString:v13])
    {
      uint64_t v14 = (void *)*((void *)a1[4] + 10);
      if (!v14)
      {

        goto LABEL_7;
      }
      unsigned __int8 v15 = [v14 isEqualToString:a1[7]];

      if (v15)
      {
LABEL_7:
        id v11 = AFSiriLogContextSession;
        if (os_log_type_enabled(AFSiriLogContextSession, OS_LOG_TYPE_INFO))
        {
          int v17 = 136315138;
          __int16 v18 = "-[ADMultiUserCloudKitSyncer assistantDataManager:didUpdateAssistantData:meCards:unredactedAnchor:]_block_invoke";
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "%s Me Card info already synced", (uint8_t *)&v17, 0xCu);
        }
        objc_storeStrong((id *)a1[4] + 10, a1[7]);
        return;
      }
    }
    else
    {
    }
  }
  int v16 = AFSiriLogContextSession;
  if (os_log_type_enabled(AFSiriLogContextSession, OS_LOG_TYPE_INFO))
  {
    int v17 = 136315138;
    __int16 v18 = "-[ADMultiUserCloudKitSyncer assistantDataManager:didUpdateAssistantData:meCards:unredactedAnchor:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "%s Syncing Me Card info", (uint8_t *)&v17, 0xCu);
  }
  [a1[4] _syncMeCard:0 anchorToSave:a1[7]];
}

void sub_10026C800(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(NSObject **)(v4 + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10026C8BC;
  block[3] = &unk_10050DCB8;
  id v8 = v3;
  uint64_t v9 = v4;
  id v10 = *(id *)(a1 + 40);
  id v6 = v3;
  dispatch_async(v5, block);
}

void sub_10026C8BC(void *a1)
{
  uint64_t v1 = a1[4];
  if (v1)
  {
    uint64_t v2 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      int v5 = 136315394;
      id v6 = "-[ADMultiUserCloudKitSyncer _syncMeCard:anchorToSave:]_block_invoke_2";
      __int16 v7 = 2112;
      uint64_t v8 = v1;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s Error in updating Me Card (%@)", (uint8_t *)&v5, 0x16u);
    }
  }
  else
  {
    uint64_t v3 = a1[6];
    uint64_t v4 = (void *)a1[5];
    [v4 _saveCachedAssistantDataAnchor:v3];
  }
}

void sub_10026CA58(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) object];
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    __int16 v20 = (void *)AFSiriLogContextDaemon;
    if (!os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR)) {
      goto LABEL_21;
    }
    __int16 v21 = v20;
    int v25 = 136315394;
    BOOL v26 = "-[ADMultiUserCloudKitSyncer meDeviceChanged:]_block_invoke";
    __int16 v27 = 2112;
    id v28 = (id)objc_opt_class();
    id v22 = v28;
    _os_log_error_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "%s MeDeviceChangedNotification with incorrect object type %@", (uint8_t *)&v25, 0x16u);

    goto LABEL_20;
  }
  unsigned int v3 = [v2 BOOLValue];
  uint64_t v4 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    CFStringRef v5 = @"NOT meDevice";
    if (v3) {
      CFStringRef v5 = @"meDevice";
    }
    int v25 = 136315394;
    BOOL v26 = "-[ADMultiUserCloudKitSyncer meDeviceChanged:]_block_invoke";
    __int16 v27 = 2112;
    id v28 = (id)v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%s (%@)", (uint8_t *)&v25, 0x16u);
  }
  uint64_t v6 = *(void *)(a1 + 40);
  if (*(unsigned __int8 *)(v6 + 65) != v3)
  {
    *(unsigned char *)(v6 + 65) = v3;
    if (v3)
    {
      __int16 v7 = +[ADMultiUserMeDevice sharedInstance];
      uint64_t v8 = [v7 meDeviceIDSIdentifier];
      uint64_t v9 = *(void *)(a1 + 40);
      id v10 = *(void **)(v9 + 32);
      *(void *)(v9 + 32) = v8;

      uint64_t v11 = *(void *)(a1 + 40);
      if (!*(void *)(v11 + 56))
      {
        uint64_t v12 = +[ADAccount activeAccount];
        uint64_t v13 = [v12 assistantIdentifier];
        uint64_t v14 = *(void *)(a1 + 40);
        unsigned __int8 v15 = *(void **)(v14 + 56);
        *(void *)(v14 + 56) = v13;

        uint64_t v11 = *(void *)(a1 + 40);
      }
      if (!*(unsigned char *)(v11 + 64))
      {
        int v16 = +[AFPreferences sharedPreferences];
        *(unsigned char *)(*(void *)(a1 + 40) + 64) = [v16 assistantIsEnabled];
      }
      int v17 = AFIsMultiUserCompanion();
      uint64_t v18 = *(void *)(a1 + 40);
      if (v17 && (!*(void *)(v18 + 56) || !*(unsigned char *)(v18 + 64)))
      {
        __int16 v19 = +[ADHomeInfoManager sharedInfoManager];
        [v19 setRecognizeMyVoiceEnabled:0];

        uint64_t v18 = *(void *)(a1 + 40);
      }
      [(id)v18 _syncIdentifiersToCloud:0 forceUpdate:0];
      goto LABEL_21;
    }
    *(unsigned char *)(*(void *)(a1 + 40) + 66) = 0;
    uint64_t v23 = *(void *)(a1 + 40);
    id v24 = *(void **)(v23 + 32);
    *(void *)(v23 + 32) = 0;

    __int16 v21 = +[ADPreferences sharedPreferences];
    [v21 setIsMultiUserSyncerMeDevice:0];
LABEL_20:
  }
LABEL_21:
}

void sub_10026CDA4(uint64_t a1)
{
  uint64_t v2 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v7 = 136315138;
    uint64_t v8 = "-[ADMultiUserCloudKitSyncer primaryUserSharedUserIdentifierDidChangeNotification:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s ", (uint8_t *)&v7, 0xCu);
  }
  unsigned int v3 = +[ADPreferences sharedPreferences];
  uint64_t v4 = [v3 sharedUserIdentifier];

  uint64_t v5 = *(void *)(a1 + 32);
  if (*(void *)(v5 + 40))
  {
    if (objc_msgSend(v4, "isEqualToString:")) {
      goto LABEL_8;
    }
    uint64_t v5 = *(void *)(a1 + 32);
  }
  objc_storeStrong((id *)(v5 + 40), v4);
  uint64_t v6 = *(void **)(a1 + 32);
  if (v6[5]) {
    [v6 _syncIdentifiersToCloud:0 forceUpdate:0];
  }
LABEL_8:
}

void sub_10026CF40(uint64_t a1)
{
  uint64_t v2 = +[ADAccount activeAccount];
  unsigned int v3 = [v2 assistantIdentifier];

  uint64_t v4 = AFSiriLogContextSession;
  if (os_log_type_enabled(AFSiriLogContextSession, OS_LOG_TYPE_INFO))
  {
    int v8 = 136315395;
    uint64_t v9 = "-[ADMultiUserCloudKitSyncer accountDidChange:]_block_invoke";
    __int16 v10 = 2113;
    uint64_t v11 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%s %{private}@", (uint8_t *)&v8, 0x16u);
  }
  objc_storeStrong((id *)(*(void *)(a1 + 32) + 56), v3);
  uint64_t v5 = *(void *)(a1 + 32);
  if (!*(void *)(v5 + 56))
  {
    int v6 = AFIsMultiUserCompanion();
    uint64_t v5 = *(void *)(a1 + 32);
    if (v6)
    {
      if (*(unsigned char *)(v5 + 65))
      {
        int v7 = +[ADHomeInfoManager sharedInfoManager];
        [v7 setRecognizeMyVoiceEnabled:0];

        uint64_t v5 = *(void *)(a1 + 32);
      }
    }
  }
  [(id)v5 _syncIdentifiersToCloud:0 forceUpdate:0];
}

void sub_10026D18C(uint64_t a1)
{
  id v10 = +[AFPreferences sharedPreferences];
  unsigned int v2 = [v10 assistantIsEnabled];
  uint64_t v3 = *(void *)(a1 + 32);
  if (v2)
  {
    if (*(unsigned char *)(v3 + 64))
    {
      if (*(void *)(v3 + 56)) {
        goto LABEL_11;
      }
      uint64_t v4 = +[ADAccount activeAccount];
      uint64_t v5 = [v4 assistantIdentifier];
      uint64_t v6 = *(void *)(a1 + 32);
      int v7 = *(void **)(v6 + 56);
      *(void *)(v6 + 56) = v5;

      int v8 = *(void **)(a1 + 32);
      if (!v8[7]) {
        goto LABEL_11;
      }
    }
    else
    {
      *(unsigned char *)(v3 + 64) = 1;
      int v8 = *(void **)(a1 + 32);
    }
    [v8 _gatherIdentifiersForMultiUser];
    goto LABEL_11;
  }
  *(unsigned char *)(v3 + 64) = 0;
  if (AFIsMultiUserCompanion() && *(unsigned char *)(*(void *)(a1 + 32) + 65))
  {
    uint64_t v9 = +[ADHomeInfoManager sharedInfoManager];
    [v9 setRecognizeMyVoiceEnabled:0];
  }
LABEL_11:
}

unsigned char *sub_10026D2F8(uint64_t a1)
{
  uint64_t result = *(unsigned char **)(a1 + 32);
  if (result[65]) {
    return [result _syncIdentifiersToCloud:0 forceUpdate:0];
  }
  return result;
}

id sub_10026D388(uint64_t a1)
{
  return [*(id *)(a1 + 32) _syncIdentifiersToCloud:0 forceUpdate:1];
}

void sub_10026D46C(uint64_t a1)
{
  unsigned int v2 = AFSiriLogContextSession;
  if (os_log_type_enabled(AFSiriLogContextSession, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = *(void **)(a1 + 32);
    int v33 = 136315395;
    id v34 = "-[ADMultiUserCloudKitSyncer setHomeMemberships:homeMembershipsToDelete:voiceIDSetting:]_block_invoke";
    __int16 v35 = 2113;
    uint64_t v36 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s memberships: %{private}@", (uint8_t *)&v33, 0x16u);
  }
  uint64_t v4 = *(void *)(a1 + 40);
  int v5 = *(unsigned __int8 *)(v4 + 67);
  int v6 = *(unsigned __int8 *)(a1 + 56);
  if (v5 == v6)
  {
    uint64_t v8 = 0;
  }
  else
  {
    if (*(unsigned char *)(v4 + 67)) {
      BOOL v7 = 1;
    }
    else {
      BOOL v7 = v6 == 0;
    }
    uint64_t v8 = !v7;
    *(unsigned char *)(v4 + 67) = v6;
  }
  id v9 = [*(id *)(a1 + 48) count];
  if (v5 == v6 && v9 == 0)
  {
    uint64_t v11 = *(void **)(*(void *)(a1 + 40) + 16);
    if (v11)
    {
      uint64_t v12 = [v11 allKeys];
      uint64_t v13 = +[NSSet setWithArray:v12];

      uint64_t v14 = [*(id *)(a1 + 32) allKeys];
      unsigned __int8 v15 = +[NSSet setWithArray:v14];

      if ([v15 isEqual:v13])
      {
        int v16 = [*(id *)(*(void *)(a1 + 40) + 16) allValues];
        int v17 = +[NSSet setWithArray:v16];

        uint64_t v18 = [*(id *)(a1 + 32) allValues];
        __int16 v19 = +[NSSet setWithArray:v18];

        if ([v19 isEqual:v17])
        {

          __int16 v20 = AFSiriLogContextSession;
          if (os_log_type_enabled(AFSiriLogContextSession, OS_LOG_TYPE_DEBUG))
          {
            __int16 v21 = *(void **)(*(void *)(a1 + 40) + 16);
            int v33 = 136315395;
            id v34 = "-[ADMultiUserCloudKitSyncer setHomeMemberships:homeMembershipsToDelete:voiceIDSetting:]_block_invoke";
            __int16 v35 = 2113;
            uint64_t v36 = v21;
            _os_log_debug_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "%s No change in (%{private}@). No home memberships marked for deletion", (uint8_t *)&v33, 0x16u);
          }
          return;
        }
        id v22 = AFSiriLogContextSession;
        if (os_log_type_enabled(AFSiriLogContextSession, OS_LOG_TYPE_INFO))
        {
          int v33 = 136315651;
          id v34 = "-[ADMultiUserCloudKitSyncer setHomeMemberships:homeMembershipsToDelete:voiceIDSetting:]_block_invoke";
          __int16 v35 = 2113;
          uint64_t v36 = v19;
          __int16 v37 = 2113;
          id v38 = v17;
          _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, "%s (%{private}@), (%{private}@)", (uint8_t *)&v33, 0x20u);
        }
      }
    }
  }
  uint64_t v23 = AFSiriLogContextSession;
  if (os_log_type_enabled(AFSiriLogContextSession, OS_LOG_TYPE_INFO))
  {
    id v24 = *(void **)(a1 + 48);
    int v33 = 136315395;
    id v34 = "-[ADMultiUserCloudKitSyncer setHomeMemberships:homeMembershipsToDelete:voiceIDSetting:]_block_invoke";
    __int16 v35 = 2113;
    uint64_t v36 = v24;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "%s Home memberships marked for deletion (%{private}@)", (uint8_t *)&v33, 0x16u);
  }
  int v25 = [*(id *)(a1 + 40) _homeMembershipsToDelete];
  [v25 addEntriesFromDictionary:*(void *)(a1 + 48)];

  id v26 = [*(id *)(a1 + 32) mutableCopy];
  __int16 v27 = [*(id *)(*(void *)(a1 + 40) + 24) allKeys];
  [v26 removeObjectsForKeys:v27];

  id v28 = AFSiriLogContextSession;
  if (os_log_type_enabled(AFSiriLogContextSession, OS_LOG_TYPE_INFO))
  {
    uint64_t v29 = *(void **)(*(void *)(a1 + 40) + 16);
    int v33 = 136315651;
    id v34 = "-[ADMultiUserCloudKitSyncer setHomeMemberships:homeMembershipsToDelete:voiceIDSetting:]_block_invoke";
    __int16 v35 = 2113;
    uint64_t v36 = v29;
    __int16 v37 = 2113;
    id v38 = v26;
    _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_INFO, "%s Changed (%{private}@) to (%{private}@)", (uint8_t *)&v33, 0x20u);
  }
  uint64_t v30 = *(void *)(a1 + 40);
  id v31 = *(void **)(v30 + 16);
  *(void *)(v30 + 16) = v26;
  id v32 = v26;

  [*(id *)(a1 + 40) _syncIdentifiersToCloud:0 forceUpdate:1 voiceIDChangedToEnabled:v8];
}

void sub_10026D92C(uint64_t a1)
{
  unsigned int v2 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v9 = 136315395;
    id v10 = "-[ADMultiUserCloudKitSyncer markHomeMembershipsForDeletion:]_block_invoke";
    __int16 v11 = 2113;
    uint64_t v12 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s Home memberships marked for deletion (%{private}@)", (uint8_t *)&v9, 0x16u);
  }
  uint64_t v4 = [*(id *)(a1 + 40) _homeMembershipsToDelete];
  [v4 addEntriesFromDictionary:*(void *)(a1 + 32)];

  id v5 = [*(id *)(*(void *)(a1 + 40) + 16) mutableCopy];
  int v6 = [*(id *)(*(void *)(a1 + 40) + 24) allKeys];
  [v5 removeObjectsForKeys:v6];

  objc_storeStrong((id *)(*(void *)(a1 + 40) + 16), v5);
  BOOL v7 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v8 = *(void *)(*(void *)(a1 + 40) + 16);
    int v9 = 136315395;
    id v10 = "-[ADMultiUserCloudKitSyncer markHomeMembershipsForDeletion:]_block_invoke";
    __int16 v11 = 2113;
    uint64_t v12 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "%s _homeMemberships are: (%{private}@)", (uint8_t *)&v9, 0x16u);
  }
  [*(id *)(a1 + 40) _deleteHomeMemberShipsFromCloud:0];
}

id sub_10026DB34(uint64_t a1)
{
  return [*(id *)(a1 + 32) _syncIdentifiersToCloud:0 forceUpdate:1];
}

void sub_10026DFE4(id a1)
{
  id v1 = [[ADMultiUserCloudKitSyncer alloc] _init];
  uint64_t v2 = qword_100586068;
  qword_100586068 = (uint64_t)v1;
  _objc_release_x1(v1, v2);
}

id sub_10026EA10(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _writeTokensToFile];
}

id sub_10026F20C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _loadContentsOfFileIfExists];
}

id sub_10026F340(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(v2 + 40);
  if (v3)
  {
    uint64_t v4 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 136315138;
      int v17 = "-[ADMUXCompanionSyncTokenContainer _removeFilePostAccountRemoval:]_block_invoke";
      _os_log_debug_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "%s Closing open file during account removal", buf, 0xCu);
      uint64_t v3 = *(void **)(*(void *)(a1 + 32) + 40);
    }
    [v3 closeFile];
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = *(void **)(v5 + 40);
    *(void *)(v5 + 40) = 0;

    uint64_t v2 = *(void *)(a1 + 32);
  }
  if (*(void *)(v2 + 48))
  {
    BOOL v7 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 136315138;
      int v17 = "-[ADMUXCompanionSyncTokenContainer _removeFilePostAccountRemoval:]_block_invoke";
      _os_log_debug_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "%s Removing the token file during account removal", buf, 0xCu);
    }
    uint64_t v8 = +[NSFileManager defaultManager];
    uint64_t v9 = *(void *)(*(void *)(a1 + 32) + 48);
    id v15 = 0;
    [v8 removeItemAtPath:v9 error:&v15];
    id v10 = v15;

    if (v10)
    {
      __int16 v11 = (void *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v13 = v11;
        uint64_t v14 = [v10 description];
        *(_DWORD *)long long buf = 136315394;
        int v17 = "-[ADMUXCompanionSyncTokenContainer _removeFilePostAccountRemoval:]_block_invoke";
        __int16 v18 = 2112;
        __int16 v19 = v14;
        _os_log_debug_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "%s Failed to delete the token file: %@", buf, 0x16u);
      }
    }

    uint64_t v2 = *(void *)(a1 + 32);
  }
  [*(id *)(v2 + 8) removeAllObjects];
  return [*(id *)(*(void *)(a1 + 32) + 64) removeAllObjects];
}

id sub_10026F974(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _loadContentsOfFileIfExists];
}

void sub_10026F9D8(id a1)
{
  id v1 = objc_alloc_init(ADMUXCompanionSyncTokenContainer);
  uint64_t v2 = qword_100586080;
  qword_100586080 = (uint64_t)v1;
  _objc_release_x1(v1, v2);
}

NSData *__cdecl sub_10026FA14(id a1, SVDCapability *a2)
{
  uint64_t v2 = a2;
  id v8 = 0;
  uint64_t v3 = +[NSKeyedArchiver archivedDataWithRootObject:v2 requiringSecureCoding:1 error:&v8];
  id v4 = v8;
  if (v4)
  {
    uint64_t v5 = AFSiriLogContextUtility;
    if (os_log_type_enabled(AFSiriLogContextUtility, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 136315394;
      id v10 = "ADSerializedSVDCapabilities_block_invoke";
      __int16 v11 = 2112;
      uint64_t v12 = v2;
      _os_log_debug_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "%s #hal Failed to serialize %@", buf, 0x16u);
    }
    id v6 = 0;
  }
  else
  {
    id v6 = v3;
  }

  return (NSData *)v6;
}

id sub_10026FB40(void *a1)
{
  id v15 = a1;
  uint64_t v1 = objc_opt_class();
  uint64_t v2 = objc_opt_class();
  uint64_t v3 = objc_opt_class();
  uint64_t v4 = objc_opt_class();
  uint64_t v5 = objc_opt_class();
  uint64_t v6 = objc_opt_class();
  uint64_t v7 = objc_opt_class();
  uint64_t v8 = objc_opt_class();
  uint64_t v9 = objc_opt_class();
  id v10 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v1, v2, v3, v4, v5, v6, v7, v8, v9, objc_opt_class(), 0);
  if (+[AFFeatureFlags isLassoEnabled])
  {
    __int16 v11 = +[NSMutableSet setWithSet:v10];
    [v11 addObject:objc_opt_class()];
    id v12 = [v11 copy];

    id v10 = v12;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472;
    void v16[2] = sub_10026FD5C;
    v16[3] = &unk_100508500;
    id v17 = v10;
    uint64_t v13 = objc_msgSend(v15, "af_lenientMappedArray:", v16);
  }
  else
  {
    uint64_t v13 = 0;
  }

  return v13;
}

id sub_10026FD5C(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    uint64_t v4 = *(void *)(a1 + 32);
    id v10 = 0;
    uint64_t v5 = +[NSKeyedUnarchiver unarchivedObjectOfClasses:v4 fromData:v3 error:&v10];
    id v6 = v10;
    if (v6 || !v5)
    {
      uint64_t v8 = AFSiriLogContextUtility;
      if (os_log_type_enabled(AFSiriLogContextUtility, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)long long buf = 136315650;
        id v12 = "ADDeserializedSVDCapabilities_block_invoke";
        __int16 v13 = 2112;
        id v14 = v3;
        __int16 v15 = 2112;
        id v16 = v6;
        _os_log_debug_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "%s #hal Unable to deserialize %@: %@", buf, 0x20u);
      }
      id v7 = 0;
    }
    else
    {
      id v7 = v5;
    }
  }
  else
  {
    id v7 = 0;
  }

  return v7;
}

void *sub_100270504(void *result)
{
  if (result[4]) {
    return objc_msgSend(*(id *)(result[5] + 32), "removeObject:");
  }
  return result;
}

void *sub_1002705B4(void *result)
{
  if (result[4]) {
    return objc_msgSend(*(id *)(result[5] + 32), "addObject:");
  }
  return result;
}

void sub_100270664(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 24) copy];
  id v3 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v4 = 136315394;
    uint64_t v5 = "-[ADLocalMeCardStore meCard:]_block_invoke";
    __int16 v6 = 2112;
    id v7 = v2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "%s Returning MeCard:%@", (uint8_t *)&v4, 0x16u);
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_1002707E4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(void **)(v2 + 16);
  if (v3)
  {
    if ([v3 isEqualToData:*(void *)(a1 + 40)]) {
      return;
    }
    uint64_t v2 = *(void *)(a1 + 32);
  }
  objc_storeStrong((id *)(v2 + 16), *(id *)(a1 + 40));
  int v4 = +[AceObject aceObjectWithPlistData:*(void *)(a1 + 40)];
  objc_storeStrong((id *)(*(void *)(a1 + 32) + 24), v4);
  uint64_t v5 = +[ADPreferences sharedPreferences];
  [v5 setSingleUserMeCard:*(void *)(a1 + 40)];
  __int16 v6 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 24);
    *(_DWORD *)long long buf = 136315394;
    __int16 v21 = "-[ADLocalMeCardStore storeMeCard:]_block_invoke";
    __int16 v22 = 2112;
    uint64_t v23 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "%s Saved MeCard:%@", buf, 0x16u);
  }
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  uint64_t v8 = objc_msgSend(*(id *)(*(void *)(a1 + 32) + 32), "allObjects", 0);
  id v9 = [v8 countByEnumeratingWithState:&v15 objects:v19 count:16];
  if (v9)
  {
    id v10 = v9;
    uint64_t v11 = *(void *)v16;
    do
    {
      id v12 = 0;
      do
      {
        if (*(void *)v16 != v11) {
          objc_enumerationMutation(v8);
        }
        __int16 v13 = *(void **)(*((void *)&v15 + 1) + 8 * (void)v12);
        id v14 = [*(id *)(*(void *)(a1 + 32) + 24) copy];
        [v13 localMeCardDidUpdate:v14];

        id v12 = (char *)v12 + 1;
      }
      while (v10 != v12);
      id v10 = [v8 countByEnumeratingWithState:&v15 objects:v19 count:16];
    }
    while (v10);
  }
}

void sub_100270ADC(uint64_t a1)
{
  uint64_t v2 = +[ADPreferences sharedPreferences];
  id v3 = [v2 singleUserMeCard];
  objc_storeStrong((id *)(*(void *)(a1 + 32) + 16), v3);
  if (*(void *)(*(void *)(a1 + 32) + 16))
  {
    int v4 = +[AceObject aceObjectWithPlistData:](AceObject, "aceObjectWithPlistData:");
    objc_storeStrong((id *)(*(void *)(a1 + 32) + 24), v4);
    uint64_t v5 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      int v10 = 136315394;
      uint64_t v11 = "-[ADLocalMeCardStore _init]_block_invoke";
      __int16 v12 = 2112;
      __int16 v13 = v4;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "%s Reading stored MeCard: (%@)", (uint8_t *)&v10, 0x16u);
    }
  }
  else
  {
    __int16 v6 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      int v10 = 136315138;
      uint64_t v11 = "-[ADLocalMeCardStore _init]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "%s No stored MeCard found", (uint8_t *)&v10, 0xCu);
    }
  }
  id v7 = objc_alloc_init((Class)NSMutableSet);
  uint64_t v8 = *(void *)(a1 + 32);
  id v9 = *(void **)(v8 + 32);
  *(void *)(v8 + 32) = v7;
}

void sub_100270CDC(id a1)
{
  id v1 = [[ADLocalMeCardStore alloc] _init];
  uint64_t v2 = qword_100586088;
  qword_100586088 = (uint64_t)v1;
  _objc_release_x1(v1, v2);
}

void sub_100270F4C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(void **)(a1 + 40);
  int v4 = *(void **)(v2 + 72);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  void v5[2] = sub_100271020;
  v5[3] = &unk_100508598;
  void v5[4] = v2;
  id v6 = v3;
  id v8 = *(id *)(a1 + 56);
  id v7 = *(id *)(a1 + 48);
  [v4 getSiriRequestForClientBoundAceCommand:v6 completionHandler:v5];
}

void sub_100271020(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    int v4 = +[ADCommandCenter sharedCommandCenter];
    uint64_t v5 = [*(id *)(a1 + 40) refId];
    [v4 _prepareForAppLaunchForRequest:v5];

    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      id v6 = *(void **)(a1 + 32);
      id v7 = +[ADCommandCenter sharedCommandCenter];
      id v8 = [v6 _informCommandCenter:v7 willPerformLaunchApp:*(void *)(a1 + 40)];
    }
    else
    {
      id v8 = 0;
    }
    id v14 = [*(id *)(a1 + 40) refId];
    [v3 _setRefId:v14];

    long long v15 = [*(id *)(a1 + 48) info];
    long long v16 = [v15 turnId];
    [v3 _setTurnId:v16];

    long long v17 = *(void **)(*(void *)(a1 + 32) + 88);
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472;
    void v20[2] = sub_1002712D0;
    v20[3] = &unk_100508570;
    id v18 = *(id *)(a1 + 40);
    uint64_t v19 = *(void *)(a1 + 32);
    id v21 = v18;
    uint64_t v22 = v19;
    id v23 = *(id *)(a1 + 56);
    id v24 = v8;
    id v13 = v8;
    [v17 handleSiriRequest:v3 deliveryHandler:0 completionHandler:v20];

    goto LABEL_10;
  }
  id v9 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v10 = *(void *)(a1 + 40);
    uint64_t v11 = *(void *)(*(void *)(a1 + 32) + 72);
    *(_DWORD *)long long buf = 136315650;
    id v26 = "-[ADSiriTaskService handleCommand:forDomain:executionContext:reply:]_block_invoke_2";
    __int16 v27 = 2112;
    uint64_t v28 = v11;
    __int16 v29 = 2112;
    uint64_t v30 = v10;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "%s No transformed requests returned from request transformer %@ for command %@", buf, 0x20u);
  }
  uint64_t v12 = *(void *)(a1 + 56);
  if (v12)
  {
    id v13 = +[NSError ad_siriTaskHandlerAceTranslationFailureError];
    (*(void (**)(uint64_t, void, id))(v12 + 16))(v12, 0, v13);
LABEL_10:
  }
}

void sub_1002712D0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = (void *)AFSiriLogContextConnection;
  if (os_log_type_enabled(AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
  {
    id v8 = *(void **)(a1 + 32);
    id v9 = v7;
    uint64_t v10 = [v8 aceId];
    uint64_t v11 = *(void *)(a1 + 40);
    *(_DWORD *)long long buf = 136316162;
    id v23 = "-[ADSiriTaskService handleCommand:forDomain:executionContext:reply:]_block_invoke";
    __int16 v24 = 2112;
    id v25 = v5;
    __int16 v26 = 2112;
    id v27 = v6;
    __int16 v28 = 2112;
    __int16 v29 = v10;
    __int16 v30 = 2112;
    uint64_t v31 = v11;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "%s Got response %@ (error=%@) for command: %@, handled by service: %@", buf, 0x34u);
  }
  uint64_t v12 = *(void *)(a1 + 40);
  id v13 = *(NSObject **)(v12 + 56);
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  void v16[2] = sub_1002714B8;
  v16[3] = &unk_100508548;
  void v16[4] = v12;
  id v17 = v5;
  id v18 = v6;
  id v19 = *(id *)(a1 + 32);
  id v20 = *(id *)(a1 + 48);
  id v21 = *(id *)(a1 + 56);
  id v14 = v6;
  id v15 = v5;
  dispatch_async(v13, v16);
}

void sub_1002714B8(void *a1)
{
  id v5 = [*(id *)(a1[4] + 80) aceCommandForSiriResponse:a1[5] responseError:a1[6] forRequestCommand:a1[7]];
  if (v5)
  {
    uint64_t v2 = 0;
  }
  else
  {
    uint64_t v2 = +[NSError ad_siriTaskHandlerAceTranslationFailureError];
  }
  uint64_t v3 = a1[8];
  if (v3) {
    (*(void (**)(uint64_t, id, void *))(v3 + 16))(v3, v5, v2);
  }
  uint64_t v4 = a1[9];
  if (v4) {
    (*(void (**)(uint64_t, id, void *))(v4 + 16))(v4, v5, v2);
  }
}

void sub_1002718BC(uint64_t a1, void *a2, void *a3)
{
  id v9 = a2;
  id v5 = a3;
  if (v5
    || ([v9 encodedClassName],
        id v6 = objc_claimAutoreleasedReturnValue(),
        unsigned int v7 = [v6 isEqualToString:SACommandFailedClassIdentifier],
        v6,
        v7))
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    [WeakRetained failedToLaunchAppWithBundleIdentifier:*(void *)(a1 + 32)];
  }
}

id sub_100271E80(uint64_t a1, void *a2)
{
  return _[a2 setUsesOnDemandConnection:*(void *)(a1 + 32)];
}

void sub_100272698(uint64_t a1)
{
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  void v15[2] = sub_1002728BC;
  v15[3] = &unk_100508620;
  id v16 = *(id *)(a1 + 64);
  uint64_t v2 = objc_retainBlock(v15);
  uint64_t v3 = *(void **)(a1 + 32);
  if (v3[7])
  {
    if ([v3 _shouldWakeSystemForHandlingCommand:*(void *)(a1 + 40) executionContext:*(void *)(a1 + 48)])objc_msgSend(*(id *)(a1 + 32), "_wakeSystemForHandlingCommand"); {
    uint64_t v4 = *(void **)(a1 + 40);
    }
    id v5 = *(void **)(*(void *)(a1 + 32) + 56);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_1002728DC;
    v8[3] = &unk_100508648;
    id v9 = v4;
    id v10 = *(id *)(a1 + 56);
    id v11 = *(id *)(a1 + 48);
    id v6 = *(id *)(a1 + 64);
    uint64_t v12 = *(void *)(a1 + 32);
    id v13 = v6;
    id v14 = v2;
    [v5 adRequestDidReceiveCommand:v9 reply:v8];
  }
  else
  {
    unsigned int v7 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136315138;
      id v18 = "-[ADUIService handleCommand:forDomain:executionContext:reply:]_block_invoke_2";
      _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "%s No request delegate to handle command", buf, 0xCu);
    }
    ((void (*)(void *, void, void))v2[2])(v2, *(void *)(a1 + 40), 0);
  }
}

uint64_t sub_1002728BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t, void))(result + 16))(result, a3, 0);
  }
  return result;
}

void sub_1002728DC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  unsigned int v7 = v6;
  if (v6 && [v6 code] == (id)26)
  {
    id v8 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136315138;
      __int16 v26 = "-[ADUIService handleCommand:forDomain:executionContext:reply:]_block_invoke_3";
      _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "%s Request delegate unable to handle command. Allowing fallback handler a chance", buf, 0xCu);
    }
    id v9 = objc_alloc_init(ADFauxUIService);
    [(ADFauxUIService *)v9 handleCommand:*(void *)(a1 + 32) forDomain:*(void *)(a1 + 40) executionContext:*(void *)(a1 + 48) reply:*(void *)(a1 + 64)];
  }
  else
  {
    id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 56) + 64));
    if (WeakRetained)
    {
      id v11 = WeakRetained;
      unsigned int v12 = objc_msgSend(*(id *)(a1 + 32), "_adui_presentsUIResponseInTranscript");

      if (v12)
      {
        uint64_t v13 = *(void *)(a1 + 56);
        id v14 = *(NSObject **)(v13 + 80);
        id v19 = _NSConcreteStackBlock;
        uint64_t v20 = 3221225472;
        id v21 = sub_100272AFC;
        uint64_t v22 = &unk_10050E160;
        uint64_t v23 = v13;
        id v24 = *(id *)(a1 + 48);
        dispatch_async(v14, &v19);
        id v15 = objc_loadWeakRetained((id *)(*(void *)(a1 + 56) + 64));
        uint64_t v16 = *(void *)(a1 + 32);
        uint64_t v17 = *(void *)(a1 + 56);
        id v18 = objc_msgSend(*(id *)(a1 + 48), "info", v19, v20, v21, v22, v23);
        [v15 UIService:v17 didPresentUIResponseForCommand:v16 withExecutionInfo:v18];
      }
    }
    (*(void (**)(void))(*(void *)(a1 + 72) + 16))();
  }
}

void sub_100272AFC(uint64_t a1)
{
}

void sub_100272C4C(uint64_t a1)
{
  uint64_t v2 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    int v12 = *(unsigned __int8 *)(a1 + 48);
    uint64_t v13 = *(void *)(a1 + 32);
    uint64_t v14 = *(void *)(*(void *)(a1 + 40) + 72);
    int v15 = 136315906;
    uint64_t v16 = "-[ADUIService cancelOperationsForRequestID:forAssistantID:fromRemote:reason:]_block_invoke";
    __int16 v17 = 2112;
    uint64_t v18 = v13;
    __int16 v19 = 1024;
    LODWORD(v20[0]) = v12;
    WORD2(v20[0]) = 2112;
    *(void *)((char *)v20 + 6) = v14;
    _os_log_debug_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s RequestId: %@, fromRemote: %d, Last handled context: %@", (uint8_t *)&v15, 0x26u);
  }
  if ([*(id *)(*(void *)(a1 + 40) + 72) isFromRemote])
  {
    if (*(unsigned char *)(a1 + 48))
    {
      uint64_t v3 = [*(id *)(*(void *)(a1 + 40) + 72) info];
      uint64_t v4 = [v3 requestID];
      unsigned int v5 = [v4 isEqualToString:*(void *)(a1 + 32)];

      if (v5)
      {
        id v6 = AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
        {
          uint64_t v7 = *(void *)(a1 + 32);
          uint64_t v8 = *(void *)(*(void *)(a1 + 40) + 72);
          int v15 = 136315650;
          uint64_t v16 = "-[ADUIService cancelOperationsForRequestID:forAssistantID:fromRemote:reason:]_block_invoke";
          __int16 v17 = 2112;
          uint64_t v18 = v7;
          __int16 v19 = 2112;
          v20[0] = v8;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "%s Dismissing UI for remote request %@: %@", (uint8_t *)&v15, 0x20u);
        }
        id v9 = objc_alloc_init((Class)SAUICloseAssistant);
        id v10 = *(void **)(a1 + 40);
        id v11 = [v9 groupIdentifier];
        [v10 handleCommand:v9 forDomain:v11 executionContext:*(void *)(*(void *)(a1 + 40) + 72) reply:&stru_1005085F8];
      }
    }
  }
}

void sub_100272E44(id a1, SAAceCommand *a2, NSError *a3)
{
  uint64_t v4 = a2;
  unsigned int v5 = a3;
  if (v5)
  {
    id v6 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      int v7 = 136315650;
      uint64_t v8 = "-[ADUIService cancelOperationsForRequestID:forAssistantID:fromRemote:reason:]_block_invoke";
      __int16 v9 = 2112;
      id v10 = v4;
      __int16 v11 = 2112;
      int v12 = v5;
      _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "%s response: %@, error: %@", (uint8_t *)&v7, 0x20u);
    }
  }
}

void sub_100273A6C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  int v7 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v8 = *(void *)(a1 + 32);
    int v10 = 136315906;
    __int16 v11 = "-[SAUIPlayNotificationSound(ADUIService) _adui_handleWithCompletion:]_block_invoke";
    __int16 v12 = 2112;
    uint64_t v13 = v8;
    __int16 v14 = 2112;
    id v15 = v5;
    __int16 v16 = 2112;
    id v17 = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "%s Handled command %@ with response %@ and error %@.", (uint8_t *)&v10, 0x2Au);
  }
  uint64_t v9 = *(void *)(a1 + 40);
  if (v9) {
    (*(void (**)(uint64_t, id, id))(v9 + 16))(v9, v5, v6);
  }
}

void sub_100273B78(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = a2;
  [v4 setItemURL:v3];
  [v4 setNumberOfLoops:0];
  LODWORD(v5) = 1.0;
  [v4 setVolume:v5];
  [v4 setFadeInDuration:0.0];
  [v4 setFadeOutDuration:0.0];
  id v6 = [*(id *)(a1 + 40) refId];
  [v4 setUUID:v6];
}

void sub_100273C20(uint64_t a1)
{
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  void v12[2] = sub_100273D74;
  void v12[3] = &unk_100508698;
  uint64_t v2 = *(void **)(a1 + 32);
  id v13 = *(id *)(a1 + 40);
  id v3 = +[AFSetAudioSessionActiveContext newWithBuilder:v12];
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_100273DD8;
  v6[3] = &unk_100508710;
  id v4 = *(id *)(a1 + 48);
  char v11 = *(unsigned char *)(a1 + 72);
  uint64_t v5 = *(void *)(a1 + 64);
  id v7 = v4;
  uint64_t v10 = v5;
  id v8 = *(id *)(a1 + 32);
  id v9 = *(id *)(a1 + 56);
  [v2 forceAudioSessionActiveWithContext:v3 completion:v6];
}

uint64_t sub_100273D64(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100273D74(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 setOptions:2];
  [v3 setReason:3];
  [v3 setSpeechRequestOptions:*(void *)(a1 + 32)];
}

void sub_100273DD8(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6 = a2;
  id v7 = [a4 error];
  id v8 = AFSiriLogContextDaemon;
  if (v7)
  {
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136315394;
      id v32 = "-[SAUIPlayNotificationSound(ADUIService) _adui_handleWithCompletion:]_block_invoke_3";
      __int16 v33 = 2112;
      id v34 = v7;
      _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "%s Error activating audio session: %@", buf, 0x16u);
    }
  }
  else
  {
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      id v9 = *(void **)(a1 + 32);
      uint64_t v10 = v8;
      char v11 = AFAudioPlaybackOptionsGetNames();
      *(_DWORD *)long long buf = 136315650;
      id v32 = "-[SAUIPlayNotificationSound(ADUIService) _adui_handleWithCompletion:]_block_invoke";
      __int16 v33 = 2112;
      id v34 = v9;
      __int16 v35 = 2112;
      uint64_t v36 = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "%s Enqueued playback %@ with %@", buf, 0x20u);
    }
    __int16 v12 = +[ADSpeechManager sharedManager];
    id v13 = [v12 audioPlaybackService];
    __int16 v14 = *(void **)(a1 + 32);
    v29[0] = _NSConcreteStackBlock;
    v29[1] = 3221225472;
    void v29[2] = sub_10027411C;
    v29[3] = &unk_10050E138;
    id v30 = v14;
    v23[0] = _NSConcreteStackBlock;
    v23[1] = 3221225472;
    void v23[2] = sub_1002741D8;
    v23[3] = &unk_1005086C0;
    id v15 = *(id *)(a1 + 32);
    char v28 = *(unsigned char *)(a1 + 64);
    uint64_t v16 = *(void *)(a1 + 56);
    id v24 = v15;
    uint64_t v27 = v16;
    id v25 = *(id *)(a1 + 40);
    id v26 = *(id *)(a1 + 48);
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472;
    v17[2] = sub_100274398;
    v17[3] = &unk_1005086E8;
    id v18 = *(id *)(a1 + 32);
    id v19 = *(id *)(a1 + 48);
    id v20 = v6;
    char v22 = *(unsigned char *)(a1 + 64);
    id v21 = *(id *)(a1 + 40);
    [v13 startRequest:v30 options:0 preparationHandler:v29 executionHandler:v23 finalizationHandler:v17];
  }
}

void sub_10027411C(uint64_t a1)
{
  uint64_t v2 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v4 = 136315394;
    uint64_t v5 = "-[SAUIPlayNotificationSound(ADUIService) _adui_handleWithCompletion:]_block_invoke";
    __int16 v6 = 2112;
    uint64_t v7 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s Starting playback %@", (uint8_t *)&v4, 0x16u);
  }
}

void sub_1002741D8(uint64_t a1)
{
  uint64_t v2 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    *(_DWORD *)long long buf = 136315394;
    __int16 v14 = "-[SAUIPlayNotificationSound(ADUIService) _adui_handleWithCompletion:]_block_invoke";
    __int16 v15 = 2112;
    uint64_t v16 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s Started playback %@", buf, 0x16u);
  }
  if (*(unsigned char *)(a1 + 64))
  {
    int v4 = *(void **)(a1 + 48);
    id v5 = objc_alloc_init((Class)SACommandSucceeded);
    [v4 invokeWithValue:v5 andValue:0];
  }
  else
  {
    if (*(void *)(a1 + 56) == 3) {
      float v6 = 2.0;
    }
    else {
      float v6 = 1.0;
    }
    dispatch_time_t v7 = dispatch_time(0, (uint64_t)(float)(v6 * 1000000000.0));
    id v8 = [*(id *)(a1 + 40) _queue];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100274580;
    block[3] = &unk_10050B7B8;
    float v12 = v6;
    id v10 = *(id *)(a1 + 32);
    id v11 = *(id *)(a1 + 48);
    dispatch_after(v7, v8, block);

    id v5 = v10;
  }
}

void sub_100274398(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = AFSiriLogContextDaemon;
  if (v3)
  {
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      uint64_t v9 = *(void *)(a1 + 32);
      int v10 = 136315650;
      id v11 = "-[SAUIPlayNotificationSound(ADUIService) _adui_handleWithCompletion:]_block_invoke";
      __int16 v12 = 2112;
      uint64_t v13 = v9;
      __int16 v14 = 2112;
      id v15 = v3;
      _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "%s Failed playback %@: %@", (uint8_t *)&v10, 0x20u);
    }
    id v5 = *(void **)(a1 + 40);
    id v6 = objc_alloc_init((Class)SACommandFailed);
    [v5 invokeWithValue:v6 andValue:v3];
  }
  else if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v7 = *(void *)(a1 + 32);
    int v10 = 136315394;
    id v11 = "-[SAUIPlayNotificationSound(ADUIService) _adui_handleWithCompletion:]_block_invoke";
    __int16 v12 = 2112;
    uint64_t v13 = v7;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%s Finished playback %@", (uint8_t *)&v10, 0x16u);
  }
  [*(id *)(a1 + 48) relinquishWithContext:0 options:0];
  if (*(unsigned char *)(a1 + 64))
  {
    id v8 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      int v10 = 136315138;
      id v11 = "-[SAUIPlayNotificationSound(ADUIService) _adui_handleWithCompletion:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "%s Forcing Audio session inactive", (uint8_t *)&v10, 0xCu);
    }
    [*(id *)(a1 + 56) forceAudioSessionInactiveWithOptions:0 completion:0];
  }
}

void sub_100274580(uint64_t a1)
{
  uint64_t v2 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    double v5 = *(float *)(a1 + 48);
    uint64_t v6 = *(void *)(a1 + 32);
    int v7 = 136315650;
    id v8 = "-[SAUIPlayNotificationSound(ADUIService) _adui_handleWithCompletion:]_block_invoke";
    __int16 v9 = 2048;
    double v10 = v5;
    __int16 v11 = 2112;
    uint64_t v12 = v6;
    _os_log_debug_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s Calling completion %f second after playback started: %@", (uint8_t *)&v7, 0x20u);
  }
  id v3 = *(void **)(a1 + 40);
  id v4 = objc_alloc_init((Class)SACommandSucceeded);
  [v3 invokeWithValue:v4 andValue:0];
}

void sub_100274AC4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  int v7 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v8 = *(void *)(a1 + 32);
    int v10 = 136315906;
    __int16 v11 = "-[SAUIPerformNotificationAction(ADUIService) _adui_handleWithCompletion:]_block_invoke";
    __int16 v12 = 2112;
    uint64_t v13 = v8;
    __int16 v14 = 2112;
    id v15 = v5;
    __int16 v16 = 2112;
    id v17 = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "%s Handled command %@ with response %@ and error %@.", (uint8_t *)&v10, 0x2Au);
  }
  uint64_t v9 = *(void *)(a1 + 40);
  if (v9) {
    (*(void (**)(uint64_t, id, id))(v9 + 16))(v9, v5, v6);
  }
}

void sub_100274BD0(uint64_t a1, int a2)
{
  uint64_t v2 = (Class *)SACommandSucceeded_ptr;
  id v3 = *(void **)(a1 + 32);
  if (!a2) {
    uint64_t v2 = (Class *)SACommandFailed_ptr;
  }
  id v4 = objc_alloc_init(*v2);
  [v3 invokeWithValue:v4 andValue:0];
}

void sub_100274ED8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  int v7 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    int v8 = 136315138;
    uint64_t v9 = "ADRegisterSyncNowActivity_block_invoke";
    _os_log_debug_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "%s sync now xpc activity handled", (uint8_t *)&v8, 0xCu);
  }
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  if (v6) {
    v6[2](v6);
  }
}

void sub_100274FD0(const char *a1, void *a2, void *a3, void *a4)
{
  id v7 = a3;
  id v8 = a4;
  uint64_t v9 = v8;
  if (a2)
  {
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_1002750A4;
    v10[3] = &unk_100508788;
    id v11 = v8;
    id v12 = v7;
    xpc_activity_register(a1, a2, v10);
  }
  else
  {
    xpc_activity_unregister(a1);
  }
}

void sub_1002750A4(uint64_t a1, void *a2)
{
  id v3 = a2;
  xpc_activity_state_t state = xpc_activity_get_state(v3);
  if (state)
  {
    if (state == 2)
    {
      if (!*(void *)(a1 + 32)) {
        goto LABEL_12;
      }
      if (!xpc_activity_set_state(v3, 4))
      {
        id v5 = AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long buf = 136315138;
          __int16 v14 = "_RegisterXPCActivity_block_invoke";
          _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "%s Failed setting activity state to continue", buf, 0xCu);
        }
      }
      uint64_t v6 = *(void *)(a1 + 32);
      v11[0] = _NSConcreteStackBlock;
      v11[1] = 3221225472;
      void v11[2] = sub_1002752C0;
      void v11[3] = &unk_10050E138;
      id v12 = v3;
      (*(void (**)(uint64_t, _xpc_activity_s *, void *))(v6 + 16))(v6, v12, v11);
    }
  }
  else
  {
    uint64_t v7 = *(void *)(a1 + 40);
    if (v7) {
      (*(void (**)(uint64_t, _xpc_activity_s *))(v7 + 16))(v7, v3);
    }
  }
  if (xpc_activity_should_defer(v3))
  {
    BOOL v8 = xpc_activity_set_state(v3, 3);
    uint64_t v9 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      CFStringRef v10 = @"No";
      *(_DWORD *)long long buf = 136315650;
      __int16 v14 = "_RegisterXPCActivity_block_invoke";
      __int16 v15 = 2112;
      __int16 v16 = v3;
      if (v8) {
        CFStringRef v10 = @"Yes";
      }
      __int16 v17 = 2112;
      CFStringRef v18 = v10;
      _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "%s Deferring activity:%@ deferred:%@", buf, 0x20u);
    }
  }
LABEL_12:
}

void sub_1002752C0(uint64_t a1)
{
  if (!xpc_activity_set_state(*(xpc_activity_t *)(a1 + 32), 5))
  {
    id v1 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      int v2 = 136315138;
      id v3 = "_RegisterXPCActivity_block_invoke";
      _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "%s Failed setting activity state to done", (uint8_t *)&v2, 0xCu);
    }
  }
}

void sub_10027537C(void *a1)
{
  id v1 = a1;
  int v2 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v3 = 136315394;
    id v4 = "_ADRegisterSiriDataSharingHomeDeviceRetryActivity";
    __int16 v5 = 2080;
    uint64_t v6 = "com.apple.siri.xpc_activity.data.sharing.retry";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s Registering %s activity", (uint8_t *)&v3, 0x16u);
  }
  sub_100274FD0("com.apple.siri.xpc_activity.data.sharing.retry", v1, &stru_1005087C8, &stru_100508828);
}

void sub_100275464(id a1, OS_xpc_object *a2, id a3)
{
  id v3 = a3;
  id v4 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)long long buf = 136315394;
    CFStringRef v10 = "_ADRegisterSiriDataSharingHomeDeviceRetryActivity_block_invoke";
    __int16 v11 = 2080;
    id v12 = "com.apple.siri.xpc_activity.data.sharing.retry";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%s Running '%s' activity", buf, 0x16u);
  }
  __int16 v5 = +[ADHomeDataSharingRepromptManager sharedManager];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  void v7[2] = sub_1002755A8;
  v7[3] = &unk_10050D440;
  id v8 = v3;
  id v6 = v3;
  [v5 propagateDataSharingStatusToAccessoriesWithCompletion:v7];
}

uint64_t sub_1002755A8(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_1002755C0(id a1, OS_xpc_object *a2)
{
  xpc_object_t v2 = xpc_activity_copy_criteria(a2);
  if (!v2)
  {
    id v3 = +[ADHomeDataSharingRepromptManager sharedManager];
    [v3 propagateDataSharingStatusToAccessoriesWithCompletion:&stru_1005087E8];

    xpc_object_t v2 = 0;
  }
}

void sub_10027562C(id a1, NSError *a2)
{
  xpc_object_t v2 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v3 = 136315394;
    id v4 = "_ADRegisterSiriDataSharingHomeDeviceRetryActivity_block_invoke_2";
    __int16 v5 = 2080;
    id v6 = "com.apple.siri.xpc_activity.data.sharing.retry";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s Check in complete for %s", (uint8_t *)&v3, 0x16u);
  }
}

void sub_1002756E8(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = *(void **)(a1 + 32);
  id v5 = a3;
  id v6 = [v4 taskFromActivity:a2];
  [v6 runWithCompletion:v5];
}

void sub_100275758(uint64_t a1, void *a2)
{
  activity = a2;
  xpc_object_t v3 = xpc_activity_copy_criteria(activity);
  if (!v3) {
    xpc_activity_set_criteria(activity, *(xpc_object_t *)(a1 + 32));
  }
}

void sub_1002757B8(id a1, OS_xpc_object *a2, id a3)
{
  id v5 = a3;
  xpc_object_t v3 = +[ADSiriAnalyticsServiceHost sharedSiriAnalyticsServiceHost];
  [v3 writeLogViewerIdentifierDefaults];

  id v4 = v5;
  if (v5)
  {
    (*((void (**)(id))v5 + 2))(v5);
    id v4 = v5;
  }
}

void sub_100275828(id a1, OS_xpc_object *a2)
{
  activity = a2;
  xpc_object_t v2 = xpc_activity_copy_criteria(activity);
  if (!v2)
  {
    xpc_object_t v3 = xpc_dictionary_create(0, 0, 0);
    xpc_dictionary_set_BOOL(v3, XPC_ACTIVITY_POST_INSTALL, 1);
    xpc_dictionary_set_BOOL(v3, XPC_ACTIVITY_REPEATING, 0);
    xpc_dictionary_set_string(v3, XPC_ACTIVITY_PRIORITY, XPC_ACTIVITY_PRIORITY_MAINTENANCE);
    xpc_dictionary_set_BOOL(v3, XPC_ACTIVITY_REQUIRE_NETWORK_CONNECTIVITY, 0);
    xpc_dictionary_set_BOOL(v3, XPC_ACTIVITY_ALLOW_BATTERY, 0);
    xpc_activity_set_criteria(activity, v3);
  }
}

void sub_100275914(id a1, OS_xpc_object *a2, id a3)
{
  id v5 = a3;
  xpc_object_t v3 = dispatch_get_global_queue(9, 0);
  dispatch_async(v3, &stru_100508D68);

  id v4 = v5;
  if (v5)
  {
    (*((void (**)(id))v5 + 2))(v5);
    id v4 = v5;
  }
}

void sub_10027598C(id a1)
{
  id v1 = +[NSFileManager defaultManager];
  xpc_object_t v2 = [v1 URLsForDirectory:13 inDomains:1];
  xpc_object_t v3 = [v2 firstObject];

  if (v3)
  {
    id v4 = [v3 URLByAppendingPathComponent:@"com.apple.pommes" isDirectory:1];
    id v5 = +[NSFileManager defaultManager];
    id v8 = 0;
    [v5 removeItemAtURL:v4 error:&v8];
    id v6 = v8;

    if (v6)
    {
      uint64_t v7 = AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)long long buf = 136315650;
        CFStringRef v10 = "_clearSiriInformationCache";
        __int16 v11 = 2112;
        id v12 = v4;
        __int16 v13 = 2112;
        id v14 = v6;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "%s Failure while deleting POMMES cache at %@ with error %@", buf, 0x20u);
      }
    }
  }
}

void sub_100275AEC(id a1, OS_xpc_object *a2)
{
  activity = a2;
  xpc_object_t v2 = xpc_activity_copy_criteria(activity);
  if (!v2)
  {
    xpc_object_t v3 = xpc_dictionary_create(0, 0, 0);
    xpc_dictionary_set_BOOL(v3, XPC_ACTIVITY_POST_INSTALL, 1);
    xpc_dictionary_set_int64(v3, XPC_ACTIVITY_GRACE_PERIOD, XPC_ACTIVITY_INTERVAL_5_MIN);
    xpc_dictionary_set_BOOL(v3, XPC_ACTIVITY_REPEATING, 0);
    xpc_dictionary_set_string(v3, XPC_ACTIVITY_PRIORITY, XPC_ACTIVITY_PRIORITY_UTILITY);
    xpc_dictionary_set_BOOL(v3, XPC_ACTIVITY_REQUIRE_NETWORK_CONNECTIVITY, 0);
    xpc_dictionary_set_BOOL(v3, XPC_ACTIVITY_ALLOW_BATTERY, 1);
    xpc_activity_set_criteria(activity, v3);
  }
}

void sub_100275BF8(id a1, OS_xpc_object *a2, id a3)
{
  id v3 = a3;
  id v4 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)long long buf = 136315394;
    CFStringRef v10 = "_RegisterMultiUserMetricsActivity_block_invoke_2";
    __int16 v11 = 2080;
    id v12 = "com.apple.siri.apc_activity.multi-user.metrics";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%s Running '%s' activity", buf, 0x16u);
  }
  id v5 = +[ADMultiUserService sharedService];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  void v7[2] = sub_100275D3C;
  v7[3] = &unk_10050D440;
  id v8 = v3;
  id v6 = v3;
  [v5 triggerMultiUserMetricsWithCompletion:v7];
}

void sub_100275D3C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    id v4 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      int v6 = 136315650;
      uint64_t v7 = "_RegisterMultiUserMetricsActivity_block_invoke";
      __int16 v8 = 2080;
      uint64_t v9 = "com.apple.siri.apc_activity.multi-user.metrics";
      __int16 v10 = 2112;
      id v11 = v3;
      _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "%s %s activity error: %@", (uint8_t *)&v6, 0x20u);
    }
  }
  uint64_t v5 = *(void *)(a1 + 32);
  if (v5) {
    (*(void (**)(void))(v5 + 16))();
  }
}

void sub_100275E38(id a1, OS_xpc_object *a2)
{
  activity = a2;
  xpc_object_t v2 = xpc_activity_copy_criteria(activity);
  if (!v2)
  {
    xpc_object_t v3 = xpc_dictionary_create(0, 0, 0);
    xpc_dictionary_set_BOOL(v3, XPC_ACTIVITY_REPEATING, 1);
    xpc_dictionary_set_string(v3, XPC_ACTIVITY_PRIORITY, XPC_ACTIVITY_PRIORITY_MAINTENANCE);
    xpc_dictionary_set_BOOL(v3, XPC_ACTIVITY_REQUIRE_NETWORK_CONNECTIVITY, 1);
    xpc_dictionary_set_int64(v3, XPC_ACTIVITY_INTERVAL, XPC_ACTIVITY_INTERVAL_1_DAY);
    xpc_activity_set_criteria(activity, v3);
  }
}

void sub_100275F14(id a1, OS_xpc_object *a2, id a3)
{
  id v5 = a3;
  xpc_object_t v3 = +[ADDeviceCircleManager sharedInstance];
  [v3 reelectContextCollectorWithBestScore];

  id v4 = v5;
  if (v5)
  {
    (*((void (**)(id))v5 + 2))(v5);
    id v4 = v5;
  }
}

void sub_100275F84(id a1, OS_xpc_object *a2)
{
  activity = a2;
  xpc_object_t v2 = xpc_activity_copy_criteria(activity);
  if (!v2)
  {
    xpc_object_t v3 = xpc_dictionary_create(0, 0, 0);
    xpc_dictionary_set_int64(v3, XPC_ACTIVITY_INTERVAL, XPC_ACTIVITY_INTERVAL_1_DAY);
    xpc_dictionary_set_BOOL(v3, XPC_ACTIVITY_REPEATING, 1);
    xpc_dictionary_set_string(v3, XPC_ACTIVITY_PRIORITY, XPC_ACTIVITY_PRIORITY_MAINTENANCE);
    xpc_dictionary_set_BOOL(v3, XPC_ACTIVITY_REQUIRE_SCREEN_SLEEP, 1);
    xpc_dictionary_set_int64(v3, XPC_ACTIVITY_GRACE_PERIOD, XPC_ACTIVITY_INTERVAL_4_HOURS);
    xpc_activity_set_criteria(activity, v3);
  }
}

void sub_100276080(id a1, OS_xpc_object *a2, id a3)
{
  id v4 = a3;
  sub_10025FA60(0, 0);
  sub_10025FA60(1, 0);
  xpc_object_t v3 = v4;
  if (v4)
  {
    (*((void (**)(id))v4 + 2))(v4);
    xpc_object_t v3 = v4;
  }
}

void sub_1002760E4(id a1, OS_xpc_object *a2)
{
  activity = a2;
  xpc_object_t v2 = xpc_activity_copy_criteria(activity);
  if (!v2)
  {
    xpc_object_t v3 = xpc_dictionary_create(0, 0, 0);
    xpc_dictionary_set_int64(v3, XPC_ACTIVITY_INTERVAL, XPC_ACTIVITY_INTERVAL_1_DAY);
    xpc_dictionary_set_int64(v3, XPC_ACTIVITY_GRACE_PERIOD, 0);
    xpc_dictionary_set_BOOL(v3, XPC_ACTIVITY_REPEATING, 1);
    xpc_dictionary_set_string(v3, XPC_ACTIVITY_PRIORITY, XPC_ACTIVITY_PRIORITY_MAINTENANCE);
    xpc_dictionary_set_BOOL(v3, XPC_ACTIVITY_ALLOW_BATTERY, 0);
    xpc_dictionary_set_BOOL(v3, XPC_ACTIVITY_REQUIRE_INEXPENSIVE_NETWORK_CONNECTIVITY, 1);
    xpc_dictionary_set_BOOL(v3, XPC_ACTIVITY_REQUIRE_SCREEN_SLEEP, 1);
    xpc_activity_set_criteria(activity, v3);
  }
}

void sub_100276208(id a1, OS_xpc_object *a2, id a3)
{
  id v4 = a3;
  sub_10025EF3C(0);
  sub_10025EF3C(1);
  sub_10025EF3C(2);
  +[SSRRPISampledAudioUploader purgeOldAudioData];
  xpc_object_t v3 = v4;
  if (v4)
  {
    (*((void (**)(id))v4 + 2))(v4);
    xpc_object_t v3 = v4;
  }
}

void sub_100276278(id a1, OS_xpc_object *a2)
{
  activity = a2;
  xpc_object_t v2 = xpc_activity_copy_criteria(activity);
  if (!v2)
  {
    xpc_object_t v3 = xpc_dictionary_create(0, 0, 0);
    xpc_dictionary_set_int64(v3, XPC_ACTIVITY_INTERVAL, XPC_ACTIVITY_INTERVAL_1_DAY);
    xpc_dictionary_set_int64(v3, XPC_ACTIVITY_GRACE_PERIOD, 0);
    xpc_dictionary_set_BOOL(v3, XPC_ACTIVITY_REPEATING, 1);
    xpc_dictionary_set_string(v3, XPC_ACTIVITY_PRIORITY, XPC_ACTIVITY_PRIORITY_MAINTENANCE);
    xpc_dictionary_set_BOOL(v3, XPC_ACTIVITY_ALLOW_BATTERY, 0);
    xpc_dictionary_set_BOOL(v3, XPC_ACTIVITY_REQUIRE_NETWORK_CONNECTIVITY, 0);
    xpc_activity_set_criteria(activity, v3);
  }
}

void sub_100276384(id a1, OS_xpc_object *a2, id a3)
{
  id v4 = a2;
  id v5 = a3;
  int v6 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  uint64_t v7 = dispatch_queue_create("com.apple.siri.speech-personalized-lm", v6);

  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  void v11[2] = sub_10020E824;
  void v11[3] = &unk_10050E188;
  __int16 v8 = v4;
  id v12 = v8;
  id v9 = v5;
  id v13 = v9;
  dispatch_async(v7, v11);
  __int16 v10 = AFSiriLogContextSpeech;
  if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)long long buf = 136315138;
    __int16 v15 = "ADTrainSpeechPersonalizedLM";
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "%s PLM: Started training", buf, 0xCu);
  }
}

void sub_1002764F8(id a1, OS_xpc_object *a2)
{
  activity = a2;
  xpc_object_t v2 = xpc_activity_copy_criteria(activity);
  if (!v2)
  {
    xpc_object_t v3 = xpc_dictionary_create(0, 0, 0);
    xpc_dictionary_set_int64(v3, XPC_ACTIVITY_INTERVAL, XPC_ACTIVITY_INTERVAL_1_DAY);
    xpc_dictionary_set_int64(v3, XPC_ACTIVITY_GRACE_PERIOD, 0);
    xpc_dictionary_set_BOOL(v3, XPC_ACTIVITY_REPEATING, 1);
    xpc_dictionary_set_string(v3, XPC_ACTIVITY_PRIORITY, XPC_ACTIVITY_PRIORITY_MAINTENANCE);
    xpc_dictionary_set_BOOL(v3, XPC_ACTIVITY_ALLOW_BATTERY, 0);
    xpc_dictionary_set_BOOL(v3, XPC_ACTIVITY_REQUIRE_NETWORK_CONNECTIVITY, 0);
    xpc_activity_set_criteria(activity, v3);
  }
}

void sub_100276604(id a1, OS_xpc_object *a2, id a3)
{
  id v8 = a3;
  xpc_object_t v3 = +[AFPreferences sharedPreferences];
  if ([v3 assistantIsEnabled])
  {
  }
  else
  {
    id v4 = +[AFPreferences sharedPreferences];
    unsigned __int8 v5 = [v4 dictationIsEnabled];

    if ((v5 & 1) == 0) {
      goto LABEL_5;
    }
  }
  int v6 = +[ADCommandCenter sharedCommandCenter];
  [v6 runBootTimeServiceMaintenanceWithCompletion:0];

LABEL_5:
  uint64_t v7 = v8;
  if (v8)
  {
    (*((void (**)(id))v8 + 2))(v8);
    uint64_t v7 = v8;
  }
}

void sub_1002766C8(id a1, OS_xpc_object *a2)
{
  activity = a2;
  xpc_object_t v2 = xpc_activity_copy_criteria(activity);
  if (!v2)
  {
    xpc_object_t v3 = xpc_dictionary_create(0, 0, 0);
    xpc_dictionary_set_BOOL(v3, XPC_ACTIVITY_REPEATING, 0);
    xpc_dictionary_set_string(v3, XPC_ACTIVITY_PRIORITY, XPC_ACTIVITY_PRIORITY_UTILITY);
    xpc_dictionary_set_int64(v3, XPC_ACTIVITY_DELAY, 0);
    xpc_dictionary_set_int64(v3, XPC_ACTIVITY_GRACE_PERIOD, 300);
    xpc_activity_set_criteria(activity, v3);
  }
}

void sub_10027679C(id a1, OS_xpc_object *a2, id a3)
{
  id v4 = a3;
  +[ADExternalNotificationInstrumentationEmitter emitCoreAnalyticsAnnounceNotificationApplicationEnablementEvents];
  xpc_object_t v3 = v4;
  if (v4)
  {
    (*((void (**)(id))v4 + 2))(v4);
    xpc_object_t v3 = v4;
  }
}

void sub_1002767F4(id a1, OS_xpc_object *a2)
{
  activity = a2;
  xpc_object_t v2 = xpc_activity_copy_criteria(activity);
  if (!v2)
  {
    xpc_object_t v3 = xpc_dictionary_create(0, 0, 0);
    xpc_dictionary_set_int64(v3, XPC_ACTIVITY_INTERVAL, XPC_ACTIVITY_INTERVAL_1_DAY);
    xpc_dictionary_set_BOOL(v3, XPC_ACTIVITY_REPEATING, 1);
    xpc_dictionary_set_string(v3, XPC_ACTIVITY_PRIORITY, XPC_ACTIVITY_PRIORITY_MAINTENANCE);
    xpc_activity_set_criteria(activity, v3);
  }
}

void sub_1002768B8(id a1, OS_xpc_object *a2, id a3)
{
  id v4 = a3;
  notify_post((const char *)[@"AFSiriUserNotificationRequestCapabilityForceUpdate" UTF8String]);
  xpc_object_t v3 = v4;
  if (v4)
  {
    (*((void (**)(id))v4 + 2))(v4);
    xpc_object_t v3 = v4;
  }
}

void sub_100276914(id a1, OS_xpc_object *a2)
{
  activity = a2;
  xpc_object_t v2 = xpc_activity_copy_criteria(activity);
  if (!v2)
  {
    xpc_object_t v3 = xpc_dictionary_create(0, 0, 0);
    xpc_dictionary_set_int64(v3, XPC_ACTIVITY_INTERVAL, XPC_ACTIVITY_INTERVAL_1_DAY);
    xpc_dictionary_set_BOOL(v3, XPC_ACTIVITY_REPEATING, 1);
    xpc_dictionary_set_string(v3, XPC_ACTIVITY_PRIORITY, XPC_ACTIVITY_PRIORITY_MAINTENANCE);
    xpc_dictionary_set_BOOL(v3, XPC_ACTIVITY_REQUIRE_SCREEN_SLEEP, 1);
    xpc_dictionary_set_int64(v3, XPC_ACTIVITY_GRACE_PERIOD, XPC_ACTIVITY_INTERVAL_4_HOURS);
    xpc_activity_set_criteria(activity, v3);
  }
}

void sub_100276A10(id a1, OS_xpc_object *a2, id a3)
{
  int v6 = (void (**)(void))a3;
  id v4 = a2;
  unsigned __int8 v5 = +[ADCommandCenter sharedCommandCenter];
  [v5 startCloudKitSyncWeeklyForActivity:v4];

  v6[2]();
}

void sub_100276A94(id a1, OS_xpc_object *a2)
{
  activity = a2;
  xpc_object_t v2 = xpc_activity_copy_criteria(activity);
  if (!v2)
  {
    xpc_object_t v3 = xpc_dictionary_create(0, 0, 0);
    xpc_dictionary_set_int64(v3, XPC_ACTIVITY_INTERVAL, XPC_ACTIVITY_INTERVAL_7_DAYS);
    xpc_dictionary_set_int64(v3, XPC_ACTIVITY_GRACE_PERIOD, 0);
    xpc_dictionary_set_BOOL(v3, XPC_ACTIVITY_REPEATING, 1);
    xpc_dictionary_set_string(v3, XPC_ACTIVITY_PRIORITY, XPC_ACTIVITY_PRIORITY_MAINTENANCE);
    xpc_dictionary_set_BOOL(v3, XPC_ACTIVITY_ALLOW_BATTERY, 1);
    xpc_dictionary_set_BOOL(v3, XPC_ACTIVITY_REQUIRE_INEXPENSIVE_NETWORK_CONNECTIVITY, 1);
    xpc_activity_set_criteria(activity, v3);
  }
}

void sub_100276BA0(id a1, OS_xpc_object *a2, id a3)
{
  id v5 = a3;
  xpc_object_t v3 = dispatch_get_global_queue(9, 0);
  dispatch_async(v3, &stru_100508AC8);

  id v4 = v5;
  if (v5)
  {
    (*((void (**)(id))v5 + 2))(v5);
    id v4 = v5;
  }
}

void sub_100276C1C(id a1, OS_xpc_object *a2)
{
  activity = a2;
  xpc_object_t v2 = xpc_activity_copy_criteria(activity);
  if (!v2)
  {
    xpc_object_t v3 = xpc_dictionary_create(0, 0, 0);
    xpc_dictionary_set_int64(v3, XPC_ACTIVITY_INTERVAL, XPC_ACTIVITY_INTERVAL_1_DAY);
    xpc_dictionary_set_BOOL(v3, XPC_ACTIVITY_REPEATING, 1);
    xpc_dictionary_set_string(v3, XPC_ACTIVITY_PRIORITY, XPC_ACTIVITY_PRIORITY_MAINTENANCE);
    xpc_activity_set_criteria(activity, v3);
  }
}

void sub_100276CE0(id a1, OS_xpc_object *a2, id a3)
{
  id v3 = a3;
  id v4 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)long long buf = 136315138;
    __int16 v10 = "_RegisterMetricsActivity_block_invoke_2";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%s Running 'com.apple.siri.xpc_activity.metrics-sender' activity", buf, 0xCu);
  }
  id v5 = +[ADCommandCenter sharedCommandCenter];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  void v7[2] = sub_100276E2C;
  v7[3] = &unk_10050D0D0;
  id v8 = v3;
  id v6 = v3;
  [v5 sendMetricsToServerWithTimeout:1 requiresUnlimitedPower:0 requiresActiveSession:1 purgesOversizedStorage:1 ignoresMetricsSenderDisabledSetting:1 scheduledActivity:v7 completion:600.0];
}

uint64_t sub_100276E2C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_100276E44(id a1, OS_xpc_object *a2)
{
  activity = a2;
  xpc_object_t v2 = xpc_activity_copy_criteria(activity);
  if (!v2)
  {
    xpc_object_t v3 = xpc_dictionary_create(0, 0, 0);
    xpc_dictionary_set_int64(v3, XPC_ACTIVITY_INTERVAL, XPC_ACTIVITY_INTERVAL_1_DAY);
    xpc_dictionary_set_BOOL(v3, XPC_ACTIVITY_REPEATING, 1);
    xpc_dictionary_set_string(v3, XPC_ACTIVITY_PRIORITY, XPC_ACTIVITY_PRIORITY_MAINTENANCE);
    xpc_dictionary_set_BOOL(v3, XPC_ACTIVITY_ALLOW_BATTERY, 0);
    xpc_dictionary_set_BOOL(v3, XPC_ACTIVITY_REQUIRE_NETWORK_CONNECTIVITY, 1);
    xpc_dictionary_set_BOOL(v3, XPC_ACTIVITY_REQUIRES_CLASS_C, 1);
    xpc_activity_set_criteria(activity, v3);
  }
}

void sub_100276F50(id a1, OS_xpc_object *a2, id a3)
{
  id v8 = a3;
  xpc_object_t v3 = +[AFPreferences sharedPreferences];
  if ([v3 assistantIsEnabled])
  {
  }
  else
  {
    id v4 = +[AFPreferences sharedPreferences];
    unsigned __int8 v5 = [v4 dictationIsEnabled];

    if ((v5 & 1) == 0) {
      goto LABEL_5;
    }
  }
  id v6 = +[ADCommandCenter sharedCommandCenter];
  [v6 runServiceMaintenanceWithCompletion:0];

LABEL_5:
  uint64_t v7 = v8;
  if (v8)
  {
    (*((void (**)(id))v8 + 2))(v8);
    uint64_t v7 = v8;
  }
}

void sub_100277014(id a1, OS_xpc_object *a2)
{
  activity = a2;
  xpc_object_t v2 = xpc_activity_copy_criteria(activity);
  if (!v2)
  {
    xpc_object_t v3 = xpc_dictionary_create(0, 0, 0);
    xpc_dictionary_set_int64(v3, XPC_ACTIVITY_INTERVAL, XPC_ACTIVITY_INTERVAL_1_DAY);
    xpc_dictionary_set_BOOL(v3, XPC_ACTIVITY_REPEATING, 1);
    xpc_dictionary_set_string(v3, XPC_ACTIVITY_PRIORITY, XPC_ACTIVITY_PRIORITY_MAINTENANCE);
    xpc_dictionary_set_BOOL(v3, XPC_ACTIVITY_REQUIRE_NETWORK_CONNECTIVITY, 1);
    xpc_dictionary_set_BOOL(v3, XPC_ACTIVITY_REQUIRE_SCREEN_SLEEP, 1);
    xpc_activity_set_criteria(activity, v3);
  }
}

void sub_100277108(id a1, OS_xpc_object *a2, id a3)
{
  xpc_object_t v3 = (void (**)(void))a3;
  id v4 = +[AFPreferences sharedPreferences];
  if ([v4 assistantIsEnabled])
  {
  }
  else
  {
    unsigned __int8 v5 = +[AFPreferences sharedPreferences];
    unsigned int v6 = [v5 dictationIsEnabled];

    if (!v6)
    {
      id v9 = +[ADDaemon sharedDaemon];
      [v9 keepAlive];

      id v8 = +[ADCommandCenter sharedCommandCenter];
      [v8 destroyActiveAccount];
      goto LABEL_8;
    }
  }
  uint64_t v7 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v10 = 136315138;
    id v11 = "_RegisterDestroyActivity_block_invoke_2";
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "%s Assistant is now enabled, clearing destroy job", (uint8_t *)&v10, 0xCu);
  }
  id v8 = +[ADDaemon sharedDaemon];
  [v8 unscheduleDestroyJob];
LABEL_8:

  if (v3) {
    v3[2](v3);
  }
}

void sub_100277278(id a1, OS_xpc_object *a2, id a3)
{
  id v4 = a3;
  sub_1002772F8(a2, XPC_ACTIVITY_INTERVAL_15_MIN, 2 * XPC_ACTIVITY_INTERVAL_1_HOUR);
  sub_10027742C(v4);
}

void sub_1002772F8(void *a1, int64_t a2, int64_t a3)
{
  unsigned __int8 v5 = a1;
  xpc_object_t v6 = xpc_activity_copy_criteria(v5);
  int64_t int64 = xpc_dictionary_get_int64(v6, XPC_ACTIVITY_INTERVAL);
  if (int64 < a3)
  {
    int64_t v8 = int64;
    if (2 * int64 > a2) {
      a2 = 2 * int64;
    }
    id v9 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      int v10 = 136315650;
      id v11 = "_BackoffFromShortInterval";
      __int16 v12 = 2048;
      int64_t v13 = a2;
      __int16 v14 = 2048;
      int64_t v15 = v8;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "%s Backing off to new interval %lld from %lld", (uint8_t *)&v10, 0x20u);
    }
    xpc_dictionary_set_int64(v6, XPC_ACTIVITY_INTERVAL, a2);
    xpc_activity_set_criteria(v5, v6);
  }
}

void sub_10027742C(void *a1)
{
  id v1 = a1;
  xpc_object_t v2 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v8 = 136315138;
    id v9 = "_RefreshValidationWithCompletion";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s ", (uint8_t *)&v8, 0xCu);
  }
  xpc_object_t v3 = +[AFPreferences sharedPreferences];
  if ([v3 assistantIsEnabled])
  {
  }
  else
  {
    id v4 = +[AFPreferences sharedPreferences];
    unsigned __int8 v5 = [v4 dictationIsEnabled];

    if ((v5 & 1) == 0) {
      goto LABEL_7;
    }
  }
  xpc_object_t v6 = +[ADDaemon sharedDaemon];
  [v6 keepAlive];

  uint64_t v7 = +[ADCommandCenter sharedCommandCenter];
  [v7 refreshAssistantValidation];

LABEL_7:
  if (v1) {
    v1[2](v1);
  }
}

void sub_10027757C(id a1, OS_xpc_object *a2)
{
  xpc_object_t v2 = xpc_activity_copy_criteria(a2);
  if (!v2)
  {
    xpc_object_t v3 = +[ADCommandCenter sharedCommandCenter];
    [v3 rescheduleValidationRefresh];

    id v4 = +[ADDaemon sharedDaemon];
    [v4 scheduleUnlockedWork:&stru_100508968];

    xpc_object_t v2 = 0;
  }
}

void sub_100277604(id a1)
{
}

void sub_10027760C(id a1, OS_xpc_object *a2, id a3)
{
  id v6 = a3;
  sub_1002772F8(a2, XPC_ACTIVITY_INTERVAL_1_DAY, XPC_ACTIVITY_INTERVAL_1_DAY);
  id v4 = +[ADCommandCenter sharedCommandCenter];
  [v4 updateSharedDataFromCompanion];

  unsigned __int8 v5 = v6;
  if (v6)
  {
    (*((void (**)(id))v6 + 2))(v6);
    unsigned __int8 v5 = v6;
  }
}

void sub_100277698(id a1, OS_xpc_object *a2)
{
  xpc_object_t v2 = a2;
  xpc_object_t v3 = xpc_activity_copy_criteria(v2);
  id v4 = v3;
  if (!v3 || xpc_dictionary_get_int64(v3, XPC_ACTIVITY_INTERVAL))
  {
    unsigned __int8 v5 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      int v8 = 136315138;
      id v9 = "_RegisterCompanionFetchActivity_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "%s setting new companion fetch interval on initial checkin", (uint8_t *)&v8, 0xCu);
    }
    xpc_object_t v6 = xpc_dictionary_create(0, 0, 0);
    xpc_dictionary_set_int64(v6, XPC_ACTIVITY_INTERVAL, XPC_ACTIVITY_INTERVAL_1_DAY);
    xpc_dictionary_set_int64(v6, XPC_ACTIVITY_GRACE_PERIOD, 0);
    xpc_dictionary_set_BOOL(v6, XPC_ACTIVITY_REPEATING, 1);
    xpc_dictionary_set_string(v6, XPC_ACTIVITY_PRIORITY, XPC_ACTIVITY_PRIORITY_MAINTENANCE);
    xpc_dictionary_set_BOOL(v6, XPC_ACTIVITY_ALLOW_BATTERY, 1);
    xpc_activity_set_criteria(v2, v6);

    if (!v4)
    {
      uint64_t v7 = +[ADDaemon sharedDaemon];
      [v7 scheduleUnlockedWork:&stru_100508908];
    }
  }
}

void sub_100277844(id a1)
{
  id v1 = +[ADCommandCenter sharedCommandCenter];
  [v1 updateSharedDataFromCompanion];
}

void sub_10027788C(id a1, OS_xpc_object *a2, id a3)
{
  id v6 = a3;
  sub_1002772F8(a2, XPC_ACTIVITY_INTERVAL_1_DAY, XPC_ACTIVITY_INTERVAL_1_DAY);
  id v4 = +[ADCommandCenter sharedCommandCenter];
  [v4 updateSharedDataFromPeerUseCache:1 completion:0];

  unsigned __int8 v5 = v6;
  if (v6)
  {
    (*((void (**)(id))v6 + 2))(v6);
    unsigned __int8 v5 = v6;
  }
}

void sub_100277920(id a1, OS_xpc_object *a2)
{
  xpc_object_t v2 = a2;
  xpc_object_t v3 = xpc_activity_copy_criteria(v2);
  id v4 = v3;
  if (!v3 || xpc_dictionary_get_int64(v3, XPC_ACTIVITY_INTERVAL))
  {
    unsigned __int8 v5 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      int v8 = 136315138;
      id v9 = "_RegisterPeerFetchActivity_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "%s setting new peer fetch interval on initial checkin", (uint8_t *)&v8, 0xCu);
    }
    xpc_object_t v6 = xpc_dictionary_create(0, 0, 0);
    xpc_dictionary_set_int64(v6, XPC_ACTIVITY_INTERVAL, XPC_ACTIVITY_INTERVAL_1_DAY);
    xpc_dictionary_set_int64(v6, XPC_ACTIVITY_GRACE_PERIOD, 0);
    xpc_dictionary_set_BOOL(v6, XPC_ACTIVITY_REPEATING, 1);
    xpc_dictionary_set_string(v6, XPC_ACTIVITY_PRIORITY, XPC_ACTIVITY_PRIORITY_MAINTENANCE);
    xpc_dictionary_set_BOOL(v6, XPC_ACTIVITY_ALLOW_BATTERY, 1);
    xpc_activity_set_criteria(v2, v6);

    if (!v4)
    {
      uint64_t v7 = +[ADDaemon sharedDaemon];
      [v7 scheduleUnlockedWork:&stru_1005088A8];
    }
  }
}

void sub_100277ACC(id a1)
{
  id v1 = +[ADCommandCenter sharedCommandCenter];
  [v1 updateSharedDataFromPeerUseCache:1 completion:0];
}

void sub_100277B1C(id a1, OS_xpc_object *a2, id a3)
{
  id v5 = a3;
  xpc_object_t v3 = +[ADDaemon sharedDaemon];
  [v3 syncForReason:@"daily_sync" withCoalescing:0];

  id v4 = v5;
  if (v5)
  {
    (*((void (**)(id))v5 + 2))(v5);
    id v4 = v5;
  }
}

void sub_100277B98(id a1, OS_xpc_object *a2)
{
  xpc_object_t v2 = a2;
  xpc_object_t v3 = xpc_activity_copy_criteria(v2);
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  xpc_dictionary_set_int64(v4, XPC_ACTIVITY_INTERVAL, XPC_ACTIVITY_INTERVAL_1_DAY);
  xpc_dictionary_set_BOOL(v4, XPC_ACTIVITY_REPEATING, 1);
  xpc_dictionary_set_string(v4, XPC_ACTIVITY_PRIORITY, XPC_ACTIVITY_PRIORITY_MAINTENANCE);
  xpc_dictionary_set_BOOL(v4, XPC_ACTIVITY_ALLOW_BATTERY, 1);
  xpc_dictionary_set_BOOL(v4, XPC_ACTIVITY_REQUIRE_NETWORK_CONNECTIVITY, 1);
  if (!v3 || !xpc_equal(v3, v4))
  {
    id v5 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      int v6 = 136315138;
      uint64_t v7 = "_RegisterDailySyncActivity_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "%s setting new daily criteria due to difference from checkin criteria", (uint8_t *)&v6, 0xCu);
    }
    xpc_activity_set_criteria(v2, v4);
  }
}

void sub_10027814C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100278174(uint64_t a1, void *a2)
{
  xpc_object_t v3 = *(void **)(a1 + 32);
  xpc_object_t v4 = [a2 eventBody];
  id v5 = [v4 json];
  [v3 appendData:v5];

  ++*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
}

void sub_1002781E4(id a1, BPSCompletion *a2)
{
  xpc_object_t v3 = (void *)AFSiriLogContextAnalytics;
  if (os_log_type_enabled(AFSiriLogContextAnalytics, OS_LOG_TYPE_DEBUG))
  {
    xpc_object_t v4 = v3;
    id v5 = a2;
    id v6 = [(BPSCompletion *)v5 state];
    uint64_t v7 = [(BPSCompletion *)v5 error];

    int v8 = 136315650;
    id v9 = "-[ADCommandCenter(ServiceMaintenance) _getEventsDataForStream:numEvents:]_block_invoke";
    __int16 v10 = 2048;
    id v11 = v6;
    __int16 v12 = 2112;
    int64_t v13 = v7;
    _os_log_debug_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "%s Publisher completed with state: %ld; error: %@",
      (uint8_t *)&v8,
      0x20u);
  }
}

void sub_100278BE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100278C10(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100278C20(uint64_t a1)
{
}

void sub_100278C28(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    dispatch_group_enter(*(dispatch_group_t *)(a1 + 32));
    xpc_object_t v4 = (objc_class *)objc_opt_class();
    id v5 = NSStringFromClass(v4);
    id v6 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 136315394;
      int64_t v13 = "-[ADCommandCenter(ServiceMaintenance) _dumpAssistantState]_block_invoke";
      __int16 v14 = 2112;
      int64_t v15 = v5;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "%s Calling %@ provider for a state chunk", buf, 0x16u);
    }
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_100278DF4;
    v8[3] = &unk_100508E48;
    uint64_t v11 = *(void *)(a1 + 40);
    id v7 = v5;
    id v9 = v7;
    id v10 = *(id *)(a1 + 32);
    [v3 dumpAssistantStateChunk:v8];
  }
}

void sub_100278DF4(uint64_t a1, void *a2)
{
  id v3 = a2;
  xpc_object_t v4 = (void *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    id v5 = v4;
    id v6 = [v3 description];
    int v7 = 136315394;
    int v8 = "-[ADCommandCenter(ServiceMaintenance) _dumpAssistantState]_block_invoke";
    __int16 v9 = 2112;
    id v10 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "%s State chunk retrieved: %@", (uint8_t *)&v7, 0x16u);
  }
  [*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) setValue:v3 forKey:*(void *)(a1 + 32)];
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void sub_1002790A8(uint64_t a1)
{
  id v1 = *(void **)(a1 + 32);
  id v3 = [v1 _serviceManager];
  xpc_object_t v2 = [v3 servicesThatRequireBootMaintenance];
  [v1 _runMaintenanceForServices:v2 completion:0];
}

void sub_100279224(uint64_t a1)
{
  id v1 = *(void **)(a1 + 32);
  id v3 = [v1 _serviceManager];
  xpc_object_t v2 = [v3 allServices];
  [v1 _runMaintenanceForServices:v2 completion:0];
}

void sub_10027955C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  objc_destroyWeak(v17);
  _Unwind_Resume(a1);
}

void sub_100279584(uint64_t a1, uint64_t a2)
{
}

void sub_100279590(uint64_t a1)
{
}

void sub_100279598(uint64_t a1, int a2)
{
  if (*(void *)(a1 + 64) > a2)
  {
    dispatch_group_enter(*(dispatch_group_t *)(a1 + 32));
    id v4 = objc_alloc((Class)AFSafetyBlock);
    v27[0] = _NSConcreteStackBlock;
    v27[1] = 3221225472;
    v27[2] = sub_100279940;
    v27[3] = &unk_100508DD0;
    uint64_t v29 = *(void *)(a1 + 56);
    int v30 = a2;
    id v28 = *(id *)(a1 + 32);
    id v5 = [v4 initWithBlock:v27];
    id v6 = [*(id *)(a1 + 40) objectAtIndex:a2];
    int v7 = (void *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      int v8 = v7;
      __int16 v9 = [v6 identifier];
      uint64_t v10 = *(void *)(a1 + 64);
      *(_DWORD *)long long buf = 136315906;
      id v32 = "-[ADCommandCenter(ServiceMaintenance) _runMaintenanceForServices:completion:]_block_invoke";
      __int16 v33 = 2112;
      id v34 = v9;
      __int16 v35 = 1024;
      int v36 = a2;
      __int16 v37 = 1024;
      int v38 = v10;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "%s service %@ at index %d of count %d", buf, 0x22u);
    }
    v21[0] = _NSConcreteStackBlock;
    v21[1] = 3221225472;
    void v21[2] = sub_1002799BC;
    v21[3] = &unk_100508DF8;
    id v11 = v6;
    int v26 = a2;
    uint64_t v25 = *(void *)(a1 + 64);
    uint64_t v12 = *(void *)(a1 + 48);
    id v22 = v11;
    uint64_t v23 = v12;
    id v13 = v5;
    id v24 = v13;
    [v11 runMaintenanceWorkWithCompletion:v21];
    objc_initWeak((id *)buf, v13);
    __int16 v14 = [v11 identifier];
    dispatch_time_t v15 = dispatch_time(0, 30000000000);
    __int16 v16 = [*(id *)(a1 + 48) _queue];
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472;
    void v18[2] = sub_100279B34;
    v18[3] = &unk_10050C7C8;
    objc_copyWeak(&v20, (id *)buf);
    id v19 = v14;
    id v17 = v14;
    dispatch_after(v15, v16, v18);

    objc_destroyWeak(&v20);
    objc_destroyWeak((id *)buf);
  }
}

void sub_1002798B4(_Unwind_Exception *a1)
{
  objc_destroyWeak((id *)(v1 - 128));
  _Unwind_Resume(a1);
}

uint64_t sub_1002798D0(uint64_t a1)
{
  xpc_object_t v2 = +[AFAnalytics sharedAnalytics];
  [v2 logEventWithType:1205 context:0];

  uint64_t result = *(void *)(a1 + 40);
  if (result)
  {
    id v4 = *(uint64_t (**)(void))(result + 16);
    return v4();
  }
  return result;
}

void sub_100279940(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40));

  if (WeakRetained)
  {
    id v3 = (void (**)(id, void))objc_loadWeakRetained((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40));
    v3[2](v3, (*(_DWORD *)(a1 + 48) + 1));
  }
  id v4 = *(NSObject **)(a1 + 32);
  dispatch_group_leave(v4);
}

void sub_1002799BC(uint64_t a1)
{
  xpc_object_t v2 = (void *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    id v3 = *(void **)(a1 + 32);
    id v4 = v2;
    id v5 = [v3 identifier];
    int v6 = *(_DWORD *)(a1 + 64);
    uint64_t v7 = *(void *)(a1 + 56);
    *(_DWORD *)long long buf = 136315906;
    uint64_t v12 = "-[ADCommandCenter(ServiceMaintenance) _runMaintenanceForServices:completion:]_block_invoke";
    __int16 v13 = 2112;
    __int16 v14 = v5;
    __int16 v15 = 1024;
    int v16 = v6;
    __int16 v17 = 1024;
    int v18 = v7;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%s service %@ at index %d of count %d complete", buf, 0x22u);
  }
  int v8 = [*(id *)(a1 + 40) _queue];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100279C24;
  block[3] = &unk_10050E138;
  id v10 = *(id *)(a1 + 48);
  dispatch_async(v8, block);
}

void sub_100279B34(uint64_t a1)
{
  xpc_object_t v2 = (id *)(a1 + 40);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));

  if (WeakRetained)
  {
    id v4 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      int v7 = 136315394;
      int v8 = "-[ADCommandCenter(ServiceMaintenance) _runMaintenanceForServices:completion:]_block_invoke_2";
      __int16 v9 = 2112;
      uint64_t v10 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%s Service %@ still has safety block, timing out", (uint8_t *)&v7, 0x16u);
    }
  }
  id v6 = objc_loadWeakRetained(v2);
  [v6 invoke];
}

id sub_100279C24(uint64_t a1)
{
  return [*(id *)(a1 + 32) invoke];
}

void sub_100279E5C(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 setHostTime:mach_absolute_time()];
  [v3 setType:5];
  [v3 setPayloadEndAudioSessionRequest:*(void *)(a1 + 32)];
}

void sub_100279EC8(uint64_t a1, void *a2, void *a3)
{
  id v13 = a2;
  id v5 = a3;
  uint64_t v6 = *(void *)(a1 + 32);
  if (v6)
  {
    if (v5)
    {
      (*(void (**)(uint64_t, void, id))(v6 + 16))(v6, 0, v5);
    }
    else if ([v13 type] == (id)6)
    {
      int v7 = [v13 payloadEndAudioSessionResponse];
      objc_opt_class();
      char isKindOfClass = objc_opt_isKindOfClass();
      uint64_t v9 = *(void *)(a1 + 32);
      if (isKindOfClass)
      {
        uint64_t v10 = +[AFError errorWithCode:1015 description:@"Unexpected response in reply message."];
        (*(void (**)(uint64_t, void, void *))(v9 + 16))(v9, 0, v10);
      }
      else
      {
        (*(void (**)(uint64_t, void *, void))(v9 + 16))(v9, v7, 0);
      }
    }
    else
    {
      uint64_t v11 = *(void *)(a1 + 32);
      uint64_t v12 = +[AFError errorWithCode:1014 description:@"Unexpected reply message type."];
      (*(void (**)(uint64_t, void, void *))(v11 + 16))(v11, 0, v12);
    }
  }
}

void sub_10027A25C(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 setHostTime:mach_absolute_time()];
  [v3 setType:3];
  [v3 setPayloadKeepAudioSessionAliveRequest:*(void *)(a1 + 32)];
}

void sub_10027A2C8(uint64_t a1, void *a2, void *a3)
{
  id v13 = a2;
  id v5 = a3;
  uint64_t v6 = *(void *)(a1 + 32);
  if (v6)
  {
    if (v5)
    {
      (*(void (**)(uint64_t, void, id))(v6 + 16))(v6, 0, v5);
    }
    else if ([v13 type] == (id)4)
    {
      int v7 = [v13 payloadKeepAudioSessionAliveResponse];
      objc_opt_class();
      char isKindOfClass = objc_opt_isKindOfClass();
      uint64_t v9 = *(void *)(a1 + 32);
      if (isKindOfClass)
      {
        uint64_t v10 = +[AFError errorWithCode:1015 description:@"Unexpected response in reply message."];
        (*(void (**)(uint64_t, void, void *))(v9 + 16))(v9, 0, v10);
      }
      else
      {
        (*(void (**)(uint64_t, void *, void))(v9 + 16))(v9, v7, 0);
      }
    }
    else
    {
      uint64_t v11 = *(void *)(a1 + 32);
      uint64_t v12 = +[AFError errorWithCode:1014 description:@"Unexpected reply message type."];
      (*(void (**)(uint64_t, void, void *))(v11 + 16))(v11, 0, v12);
    }
  }
}

void sub_10027A65C(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 setHostTime:mach_absolute_time()];
  [v3 setType:1];
  [v3 setPayloadBeginAudioSessionRequest:*(void *)(a1 + 32)];
}

void sub_10027A6C8(uint64_t a1, void *a2, void *a3)
{
  id v13 = a2;
  id v5 = a3;
  uint64_t v6 = *(void *)(a1 + 32);
  if (v6)
  {
    if (v5)
    {
      (*(void (**)(uint64_t, void, id))(v6 + 16))(v6, 0, v5);
    }
    else if ([v13 type] == (id)2)
    {
      int v7 = [v13 payloadBeginAudioSessionResponse];
      objc_opt_class();
      char isKindOfClass = objc_opt_isKindOfClass();
      uint64_t v9 = *(void *)(a1 + 32);
      if (isKindOfClass)
      {
        uint64_t v10 = +[AFError errorWithCode:1015 description:@"Unexpected response in reply message."];
        (*(void (**)(uint64_t, void, void *))(v9 + 16))(v9, 0, v10);
      }
      else
      {
        (*(void (**)(uint64_t, void *, void))(v9 + 16))(v9, v7, 0);
      }
    }
    else
    {
      uint64_t v11 = *(void *)(a1 + 32);
      uint64_t v12 = +[AFError errorWithCode:1014 description:@"Unexpected reply message type."];
      (*(void (**)(uint64_t, void, void *))(v11 + 16))(v11, 0, v12);
    }
  }
}

void sub_10027AB98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

uint64_t sub_10027ABBC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10027ABCC(uint64_t a1)
{
}

void sub_10027ABD4(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  [*(id *)(*(void *)(a1[6] + 8) + 40) cancel];
  uint64_t v7 = *(void *)(a1[6] + 8);
  int v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = 0;

  if (v5 && (uint64_t v9 = AFSiriLogContextDaemon, os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG)))
  {
    uint64_t v12 = a1[4];
    int v14 = 136315650;
    __int16 v15 = "-[ADAudioSessionCoordinator(Messaging) _sendMessage:toDeviceWithID:replyHandler:]_block_invoke";
    __int16 v16 = 2112;
    uint64_t v17 = v12;
    __int16 v18 = 2112;
    id v19 = v5;
    _os_log_debug_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "%s %@ ---> %@", (uint8_t *)&v14, 0x20u);
    if (!v6) {
      goto LABEL_6;
    }
  }
  else if (!v6)
  {
    goto LABEL_6;
  }
  uint64_t v10 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
  {
    uint64_t v13 = a1[4];
    int v14 = 136315650;
    __int16 v15 = "-[ADAudioSessionCoordinator(Messaging) _sendMessage:toDeviceWithID:replyHandler:]_block_invoke";
    __int16 v16 = 2112;
    uint64_t v17 = v13;
    __int16 v18 = 2112;
    id v19 = v6;
    _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "%s %@ ---> %@", (uint8_t *)&v14, 0x20u);
  }
LABEL_6:
  uint64_t v11 = a1[5];
  if (v11) {
    (*(void (**)(uint64_t, id, id))(v11 + 16))(v11, v5, v6);
  }
}

void sub_10027AD80(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  id v2 = +[AFError errorWithCode:1007];
  [v1 invokeWithValue:0 andValue:v2];
}

void sub_10027ADE4(uint64_t a1, void *a2, uint64_t a3)
{
  id v12 = a2;
  if (a3)
  {
    [*(id *)(a1 + 32) invokeWithValue:0 andValue:a3];
    goto LABEL_10;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v5 = [[ADAudioSessionCoordinationMessage alloc] initWithDictionaryRepresentation:v12];
    id v6 = *(void **)(a1 + 32);
    if (!v5)
    {
      uint64_t v11 = +[AFError errorWithCode:30 description:@"Unable to create reply message from response dictionary."];
      [v6 invokeWithValue:0 andValue:v11];

      goto LABEL_9;
    }
    uint64_t v7 = v6;
    int v8 = v5;
    uint64_t v9 = 0;
  }
  else
  {
    uint64_t v10 = *(void **)(a1 + 32);
    id v5 = +[AFError errorWithCode:30 description:@"Unexpected response dictionary."];
    uint64_t v7 = v10;
    int v8 = 0;
    uint64_t v9 = v5;
  }
  [v7 invokeWithValue:v8 andValue:v9];
LABEL_9:

LABEL_10:
}

void sub_10027BBB8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v5 && (uint64_t v7 = AFSiriLogContextDaemon, os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG)))
  {
    uint64_t v10 = *(void *)(a1 + 32);
    int v12 = 136315650;
    uint64_t v13 = "-[ADAudioSessionCoordinator(Messaging) _handleMessage:fromDeviceWithID:replyHandler:]_block_invoke";
    __int16 v14 = 2112;
    uint64_t v15 = v10;
    __int16 v16 = 2112;
    id v17 = v5;
    _os_log_debug_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "%s %@ <--- %@", (uint8_t *)&v12, 0x20u);
    if (!v6) {
      goto LABEL_6;
    }
  }
  else if (!v6)
  {
    goto LABEL_6;
  }
  int v8 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
  {
    uint64_t v11 = *(void *)(a1 + 32);
    int v12 = 136315650;
    uint64_t v13 = "-[ADAudioSessionCoordinator(Messaging) _handleMessage:fromDeviceWithID:replyHandler:]_block_invoke";
    __int16 v14 = 2112;
    uint64_t v15 = v11;
    __int16 v16 = 2112;
    id v17 = v6;
    _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "%s %@ <--- %@", (uint8_t *)&v12, 0x20u);
  }
LABEL_6:
  uint64_t v9 = *(void *)(a1 + 40);
  if (v9) {
    (*(void (**)(uint64_t, id, id))(v9 + 16))(v9, v5, v6);
  }
}

void sub_10027BD40(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  if (a3)
  {
    [*(id *)(a1 + 32) invokeWithValue:0 andValue:a3];
  }
  else
  {
    objc_opt_class();
    char isKindOfClass = objc_opt_isKindOfClass();
    uint64_t v7 = *(void **)(a1 + 32);
    if (isKindOfClass)
    {
      v10[0] = _NSConcreteStackBlock;
      v10[1] = 3221225472;
      v10[2] = sub_10027C1A8;
      v10[3] = &unk_100508F78;
      id v11 = v5;
      id v8 = +[ADAudioSessionCoordinationMessage newWithBuilder:v10];
      [v7 invokeWithValue:v8 andValue:0];
    }
    else
    {
      uint64_t v9 = +[AFError errorWithCode:1015 description:@"Unexpected response for reply message."];
      [v7 invokeWithValue:0 andValue:v9];
    }
  }
}

void sub_10027BE70(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  if (a3)
  {
    [*(id *)(a1 + 32) invokeWithValue:0 andValue:a3];
  }
  else
  {
    objc_opt_class();
    char isKindOfClass = objc_opt_isKindOfClass();
    uint64_t v7 = *(void **)(a1 + 32);
    if (isKindOfClass)
    {
      v10[0] = _NSConcreteStackBlock;
      v10[1] = 3221225472;
      v10[2] = sub_10027C13C;
      v10[3] = &unk_100508F78;
      id v11 = v5;
      id v8 = +[ADAudioSessionCoordinationMessage newWithBuilder:v10];
      [v7 invokeWithValue:v8 andValue:0];
    }
    else
    {
      uint64_t v9 = +[AFError errorWithCode:1015 description:@"Unexpected response for reply message."];
      [v7 invokeWithValue:0 andValue:v9];
    }
  }
}

void sub_10027BFA0(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  if (a3)
  {
    [*(id *)(a1 + 32) invokeWithValue:0 andValue:a3];
  }
  else
  {
    objc_opt_class();
    char isKindOfClass = objc_opt_isKindOfClass();
    uint64_t v7 = *(void **)(a1 + 32);
    if (isKindOfClass)
    {
      v10[0] = _NSConcreteStackBlock;
      v10[1] = 3221225472;
      v10[2] = sub_10027C0D0;
      v10[3] = &unk_100508F78;
      id v11 = v5;
      id v8 = +[ADAudioSessionCoordinationMessage newWithBuilder:v10];
      [v7 invokeWithValue:v8 andValue:0];
    }
    else
    {
      uint64_t v9 = +[AFError errorWithCode:1015 description:@"Unexpected response for reply message."];
      [v7 invokeWithValue:0 andValue:v9];
    }
  }
}

void sub_10027C0D0(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 setHostTime:mach_absolute_time()];
  [v3 setType:6];
  [v3 setPayloadEndAudioSessionResponse:*(void *)(a1 + 32)];
}

void sub_10027C13C(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 setHostTime:mach_absolute_time()];
  [v3 setType:4];
  [v3 setPayloadKeepAudioSessionAliveResponse:*(void *)(a1 + 32)];
}

void sub_10027C1A8(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 setHostTime:mach_absolute_time()];
  [v3 setType:2];
  [v3 setPayloadBeginAudioSessionResponse:*(void *)(a1 + 32)];
}

void sub_10027C408(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10027C42C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    uint64_t v10 = [[ADAudioSessionCoordinationMessage alloc] initWithDictionaryRepresentation:v7];
    if (v10)
    {
      id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
      v13[0] = _NSConcreteStackBlock;
      v13[1] = 3221225472;
      _OWORD v13[2] = sub_10027C5C8;
      v13[3] = &unk_100508F00;
      id v14 = v9;
      [WeakRetained _handleMessage:v10 fromDeviceWithID:v8 replyHandler:v13];
    }
    else if (v9)
    {
      int v12 = +[AFError errorWithCode:30 description:@"Unable to create message from request dictionary."];
      (*((void (**)(id, void, void *))v9 + 2))(v9, 0, v12);
    }
    goto LABEL_8;
  }
  if (v9)
  {
    uint64_t v10 = +[AFError errorWithCode:30 description:@"Unexpected request dictionary."];
    (*((void (**)(id, void, ADAudioSessionCoordinationMessage *))v9 + 2))(v9, 0, v10);
LABEL_8:
  }
}

void sub_10027C5C8(uint64_t a1, void *a2, void *a3)
{
  id v10 = a2;
  id v5 = a3;
  uint64_t v6 = *(void *)(a1 + 32);
  if (v6)
  {
    if (v5)
    {
      (*(void (**)(uint64_t, void, id))(v6 + 16))(v6, 0, v5);
    }
    else
    {
      id v7 = [v10 buildDictionaryRepresentation];
      uint64_t v8 = *(void *)(a1 + 32);
      if (v7)
      {
        (*(void (**)(uint64_t, void *, void))(v8 + 16))(v8, v7, 0);
      }
      else
      {
        id v9 = +[AFError errorWithCode:30 description:@"Unable to create response dictionary from reply message."];
        (*(void (**)(uint64_t, void, void *))(v8 + 16))(v8, 0, v9);
      }
    }
  }
}

id sub_10027C748(uint64_t a1)
{
  return [*(id *)(a1 + 32) _awdRequestEnd:0];
}

void sub_10027C80C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    id v5 = v4;
    *(_DWORD *)long long buf = 136315394;
    __int16 v37 = "-[ADCommandCenter(Metrics) _metrics_recordSNNetworkSnapshotForEvent:completion:]_block_invoke";
    __int16 v38 = 1024;
    unsigned int v39 = [v3 count];
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "%s SN Connection metrics count %d", buf, 0x12u);
  }
  long long v33 = 0u;
  long long v34 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  id obj = v3;
  id v6 = [obj countByEnumeratingWithState:&v31 objects:v35 count:16];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = *(void *)v32;
    do
    {
      id v9 = 0;
      do
      {
        if (*(void *)v32 != v8) {
          objc_enumerationMutation(obj);
        }
        id v10 = *(void **)(*((void *)&v31 + 1) + 8 * (void)v9);
        id v11 = +[AFAnalytics sharedAnalytics];
        v30[0] = _NSConcreteStackBlock;
        v30[1] = 3221225472;
        v30[2] = sub_10027CB74;
        v30[3] = &unk_10050E0F0;
        uint64_t v12 = *(void *)(a1 + 40);
        void v30[4] = v10;
        void v30[5] = v12;
        [v11 logEventWithType:902 contextProvider:v30];

        unint64_t v13 = *(void *)(a1 + 40);
        id v14 = @"(unknown)";
        if (v13 <= 3) {
          id v14 = *(&off_10050B550 + v13);
        }
        uint64_t v15 = v14;
        id v16 = +[SiriCoreNetworkingAnalytics snapshotStateFromStringEvent:v15];

        id v17 = [v10 connectionSnapshot];
        [v17 setSnapshotTriggerReason:v16];
        if (v17)
        {
          __int16 v18 = +[SNNetworkAnalytics sharedSNNetworkAnalytics];
          [v18 logSessionConnectionSnapshotCaptured:v17];
        }
        id v19 = [v10 debugConnectionSnapshot];
        if (v19)
        {
          id v20 = +[SNNetworkAnalytics sharedSNNetworkAnalytics];
          [v20 logDebugSessionConnectionSnapshotCaptured:v19];
        }
        id v21 = [v10 remoteMetrics];
        if (v21)
        {
          id v22 = +[AFAnalytics sharedAnalytics];
          v27[0] = _NSConcreteStackBlock;
          v27[1] = 3221225472;
          v27[2] = sub_10027CC98;
          v27[3] = &unk_10050E0F0;
          id v23 = v21;
          uint64_t v24 = *(void *)(a1 + 40);
          id v28 = v23;
          uint64_t v29 = v24;
          [v22 logEventWithType:903 contextProvider:v27];
        }
        id v9 = (char *)v9 + 1;
      }
      while (v7 != v9);
      id v7 = [obj countByEnumeratingWithState:&v31 objects:v35 count:16];
    }
    while (v7);
  }

  uint64_t v25 = *(void *)(a1 + 32);
  if (v25) {
    (*(void (**)(void))(v25 + 16))();
  }
}

id sub_10027CB74(uint64_t a1)
{
  id v2 = sub_1000BF708(*(void **)(a1 + 32));
  v12[0] = v2;
  CFStringRef v10 = @"snapshotEvent";
  unint64_t v3 = *(void *)(a1 + 40);
  if (v3 > 3) {
    id v4 = @"(unknown)";
  }
  else {
    id v4 = *(&off_10050B550 + v3);
  }
  id v5 = v4;
  id v11 = v5;
  id v6 = +[NSDictionary dictionaryWithObjects:&v11 forKeys:&v10 count:1];
  v12[1] = v6;
  id v7 = +[NSArray arrayWithObjects:v12 count:2];
  uint64_t v8 = AFAnalyticsContextsMerge();

  return v8;
}

id sub_10027CC98(uint64_t a1)
{
  id v2 = sub_1000BF708(*(void **)(a1 + 32));
  v12[0] = v2;
  CFStringRef v10 = @"snapshotEvent";
  unint64_t v3 = *(void *)(a1 + 40);
  if (v3 > 3) {
    id v4 = @"(unknown)";
  }
  else {
    id v4 = *(&off_10050B550 + v3);
  }
  id v5 = v4;
  id v11 = v5;
  id v6 = +[NSDictionary dictionaryWithObjects:&v11 forKeys:&v10 count:1];
  v12[1] = v6;
  id v7 = +[NSArray arrayWithObjects:v12 count:2];
  uint64_t v8 = AFAnalyticsContextsMerge();

  return v8;
}

void sub_10027CE74(uint64_t a1, void *a2)
{
  id v2 = a2;
  unint64_t v3 = (void *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    id v4 = v3;
    *(_DWORD *)long long buf = 136315394;
    id v48 = "-[ADCommandCenter(Metrics) _metrics_recordNetworkSnapshotForEvent:completion:]_block_invoke";
    __int16 v49 = 1024;
    unsigned int v50 = [v2 count];
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%s metrics count %d", buf, 0x12u);
  }
  long long v44 = 0u;
  long long v45 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  id obj = v2;
  id v34 = [obj countByEnumeratingWithState:&v42 objects:v46 count:16];
  if (v34)
  {
    uint64_t v33 = *(void *)v43;
    do
    {
      id v5 = 0;
      do
      {
        if (*(void *)v43 != v33) {
          objc_enumerationMutation(obj);
        }
        id v6 = *(void **)(*((void *)&v42 + 1) + 8 * (void)v5);
        id v7 = +[AFAnalytics sharedAnalytics];
        v41[0] = _NSConcreteStackBlock;
        v41[1] = 3221225472;
        v41[2] = sub_10027D350;
        v41[3] = &unk_10050E0F0;
        uint64_t v8 = *(void *)(a1 + 40);
        uint8_t v41[4] = v6;
        v41[5] = v8;
        [v7 logEventWithType:902 contextProvider:v41];

        id v9 = +[SiriCoreNetworkingAnalytics sharedSiriCoreNetworkingAnalytics];
        id v10 = [v9 getSequenceNumber];

        unint64_t v11 = *(void *)(a1 + 40);
        uint64_t v12 = @"(unknown)";
        if (v11 <= 3) {
          uint64_t v12 = *(&off_10050B550 + v11);
        }
        unint64_t v13 = v12;
        id v14 = +[SiriCoreNetworkingAnalytics snapshotStateFromStringEvent:v13];

        uint64_t v15 = +[SiriCoreNetworkingAnalytics sessionConnectionNetworkFromSiriCoreConnectionMetrics:v6];
        id v16 = [v6 flowNetworkInterfaceType];
        uint64_t v17 = +[SiriCoreNetworkingAnalytics networkInterfacesFromDictionary:v16];

        id v18 = objc_alloc_init((Class)NETSchemaNETSessionConnectionSnapshotCaptured);
        [v18 setSequenceNumber:v10];
        [v18 setSnapshotTriggerReason:v14];
        __int16 v37 = (void *)v15;
        [v18 setNetwork:v15];
        int v36 = (void *)v17;
        [v18 setNetworkInterfaces:v17];
        id v19 = [v6 providerStyle];
        objc_msgSend(v18, "setProvider:", +[SiriCoreNetworkingAnalytics providerFromString:](SiriCoreNetworkingAnalytics, "providerFromString:", v19));

        id v20 = +[SiriCoreNetworkingAnalytics sharedSiriCoreNetworkingAnalytics];
        [v20 logSessionConnectionSnapshotCaptured:v18];

        id v21 = +[SiriCoreNetworkingAnalytics debugSessionConnectionNetworkFromSiriCoreConnectionMetrics:v6];
        id v22 = +[SiriCoreNetworkingAnalytics debugNetworkInterfacesFromSiriCoreConnectionMetrics:v6];
        id v23 = +[SiriCoreNetworkingAnalytics pingInfoFromSiriCoreConnectionMetrics:v6];
        uint64_t v24 = +[SiriCoreNetworkingAnalytics sessionConnectionQualityFromSiriCoreConnectionMetrics:v6];
        id v25 = objc_alloc_init((Class)NETSchemaNETDebugSessionConnectionSnapshotCaptured);
        [v25 setSequenceNumber:v10];
        [v25 setNetwork:v21];
        [v25 setNetworkInterfaces:v22];
        [v25 setPingInfo:v23];
        [v25 setQuality:v24];
        int v26 = +[SiriCoreNetworkingAnalytics sharedSiriCoreNetworkingAnalytics];
        [v26 logDebugSessionConnectionSnapshotCaptured:v25];

        uint64_t v27 = [v6 remoteMetrics];
        if (v27)
        {
          id v28 = +[AFAnalytics sharedAnalytics];
          v38[0] = _NSConcreteStackBlock;
          v38[1] = 3221225472;
          void v38[2] = sub_10027D474;
          v38[3] = &unk_10050E0F0;
          id v29 = v27;
          uint64_t v30 = *(void *)(a1 + 40);
          id v39 = v29;
          uint64_t v40 = v30;
          [v28 logEventWithType:903 contextProvider:v38];
        }
        id v5 = (char *)v5 + 1;
      }
      while (v34 != v5);
      id v34 = [obj countByEnumeratingWithState:&v42 objects:v46 count:16];
    }
    while (v34);
  }

  uint64_t v31 = *(void *)(a1 + 32);
  if (v31) {
    (*(void (**)(void))(v31 + 16))();
  }
}

id sub_10027D350(uint64_t a1)
{
  id v2 = sub_1000BE55C(*(void **)(a1 + 32));
  v12[0] = v2;
  CFStringRef v10 = @"snapshotEvent";
  unint64_t v3 = *(void *)(a1 + 40);
  if (v3 > 3) {
    id v4 = @"(unknown)";
  }
  else {
    id v4 = *(&off_10050B550 + v3);
  }
  id v5 = v4;
  unint64_t v11 = v5;
  id v6 = +[NSDictionary dictionaryWithObjects:&v11 forKeys:&v10 count:1];
  v12[1] = v6;
  id v7 = +[NSArray arrayWithObjects:v12 count:2];
  uint64_t v8 = AFAnalyticsContextsMerge();

  return v8;
}

id sub_10027D474(uint64_t a1)
{
  id v2 = sub_1000BE55C(*(void **)(a1 + 32));
  v12[0] = v2;
  CFStringRef v10 = @"snapshotEvent";
  unint64_t v3 = *(void *)(a1 + 40);
  if (v3 > 3) {
    id v4 = @"(unknown)";
  }
  else {
    id v4 = *(&off_10050B550 + v3);
  }
  id v5 = v4;
  unint64_t v11 = v5;
  id v6 = +[NSDictionary dictionaryWithObjects:&v11 forKeys:&v10 count:1];
  v12[1] = v6;
  id v7 = +[NSArray arrayWithObjects:v12 count:2];
  uint64_t v8 = AFAnalyticsContextsMerge();

  return v8;
}

uint64_t sub_10027DBB8(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

uint64_t sub_10027DBD0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

id sub_10027DCB8(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_metrics_publishDailyDeviceStatus:completion:", *(void *)(a1 + 40), *(void *)(a1 + 48));
}

void sub_10027DF98(uint64_t a1, char a2)
{
  uint64_t v4 = *(void *)(a1 + 56);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_10027EAEC;
  v6[3] = &unk_1005092F8;
  id v5 = *(void **)(a1 + 32);
  id v7 = *(id *)(a1 + 40);
  id v8 = *(id *)(a1 + 48);
  char v9 = a2;
  [v5 countQueuedEventRecordsForDeliveryStream:v4 withCompletion:v6];
}

void sub_10027E050(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    id v7 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      id v25 = *(void **)(a1 + 96);
      *(_DWORD *)long long buf = 136315650;
      __int16 v38 = "-[ADCommandCenter(Metrics) _metrics_processEventRecordsFromStore:batch:deliveryStream:eventStreamUID:streamS"
            "peechId:untilLimit:uploadRecords:completion:]_block_invoke_3";
      __int16 v39 = 2048;
      id v40 = v25;
      __int16 v41 = 2112;
      id v42 = v6;
      _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "%s Failed to fetch analytics events in delivery stream %tu due to error %@", buf, 0x20u);
    }
    id v8 = *(void **)(a1 + 32);
    uint64_t v9 = 2;
LABEL_5:
    [v8 markFailedWithType:v9];
    uint64_t v10 = *(void *)(a1 + 72);
LABEL_6:
    (*(void (**)(uint64_t, void))(v10 + 16))(v10, 0);
    goto LABEL_7;
  }
  if ([v5 count])
  {
    unint64_t v11 = +[NSProcessInfo processInfo];
    [v11 systemUptime];
    double v13 = v12;
    double v14 = *(double *)(a1 + 104);

    uint64_t v15 = AFSiriLogContextDaemon;
    if (v13 >= v14)
    {
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 136315138;
        __int16 v38 = "-[ADCommandCenter(Metrics) _metrics_processEventRecordsFromStore:batch:deliveryStream:eventStreamUID:strea"
              "mSpeechId:untilLimit:uploadRecords:completion:]_block_invoke";
        _os_log_error_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "%s Attempted to send analytics event stream when time limit is reached.", buf, 0xCu);
      }
      id v8 = *(void **)(a1 + 32);
      uint64_t v9 = 1;
      goto LABEL_5;
    }
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      id v16 = v15;
      id v17 = [v5 count];
      id v18 = *(void **)(a1 + 40);
      uint64_t v19 = *(void *)(a1 + 96);
      *(_DWORD *)long long buf = 136315906;
      __int16 v38 = "-[ADCommandCenter(Metrics) _metrics_processEventRecordsFromStore:batch:deliveryStream:eventStreamUID:streamS"
            "peechId:untilLimit:uploadRecords:completion:]_block_invoke";
      __int16 v39 = 2048;
      id v40 = v17;
      __int16 v41 = 2112;
      id v42 = v18;
      __int16 v43 = 2048;
      uint64_t v44 = v19;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "%s Fetched %tu analytics events from event stream with UID %@ in delivery stream %tu.", buf, 0x2Au);
    }
    id v20 = [*(id *)(a1 + 48) _queue];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10027E42C;
    block[3] = &unk_1005093C0;
    uint64_t v35 = *(void *)(a1 + 104);
    id v28 = *(id *)(a1 + 32);
    id v33 = *(id *)(a1 + 72);
    id v34 = *(id *)(a1 + 88);
    id v29 = v5;
    id v30 = *(id *)(a1 + 56);
    id v31 = *(id *)(a1 + 64);
    int8x16_t v26 = *(int8x16_t *)(a1 + 40);
    id v21 = (id)v26.i64[0];
    int8x16_t v32 = vextq_s8(v26, v26, 8uLL);
    uint64_t v36 = *(void *)(a1 + 96);
    dispatch_async(v20, block);
  }
  else
  {
    id v22 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      id v23 = *(void **)(a1 + 40);
      uint64_t v24 = *(void **)(a1 + 96);
      *(_DWORD *)long long buf = 136315650;
      __int16 v38 = "-[ADCommandCenter(Metrics) _metrics_processEventRecordsFromStore:batch:deliveryStream:eventStreamUID:streamS"
            "peechId:untilLimit:uploadRecords:completion:]_block_invoke";
      __int16 v39 = 2112;
      id v40 = v23;
      __int16 v41 = 2048;
      id v42 = v24;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, "%s No analytics events was fetched from event stream with UID %@ in delivery stream %tu.", buf, 0x20u);
    }
    uint64_t v10 = *(void *)(a1 + 80);
    if (v10) {
      goto LABEL_6;
    }
  }
LABEL_7:
}

void sub_10027E42C(uint64_t a1)
{
  id v2 = +[NSProcessInfo processInfo];
  [v2 systemUptime];
  double v4 = v3;
  double v5 = *(double *)(a1 + 96);

  if (v4 >= v5)
  {
    double v14 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136315138;
      uint64_t v24 = "-[ADCommandCenter(Metrics) _metrics_processEventRecordsFromStore:batch:deliveryStream:eventStreamUID:streamS"
            "peechId:untilLimit:uploadRecords:completion:]_block_invoke";
      _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "%s Attempted to send analytics event stream when time limit is reached.", buf, 0xCu);
    }
    [*(id *)(a1 + 32) markFailedWithType:1];
    (*(void (**)(void))(*(void *)(a1 + 80) + 16))();
  }
  else
  {
    uint64_t v6 = *(void *)(a1 + 88);
    uint64_t v7 = *(void *)(a1 + 40);
    uint64_t v8 = *(void *)(a1 + 48);
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472;
    void v15[2] = sub_10027E610;
    v15[3] = &unk_100509398;
    id v16 = *(id *)(a1 + 32);
    id v17 = *(id *)(a1 + 40);
    id v21 = *(id *)(a1 + 80);
    id v9 = *(id *)(a1 + 56);
    uint64_t v10 = *(void *)(a1 + 64);
    unint64_t v11 = *(void **)(a1 + 72);
    id v18 = v9;
    uint64_t v19 = v10;
    id v12 = v11;
    uint64_t v13 = *(void *)(a1 + 104);
    id v20 = v12;
    uint64_t v22 = v13;
    (*(void (**)(uint64_t, uint64_t, uint64_t, void *))(v6 + 16))(v6, v7, v8, v15);
  }
}

void sub_10027E610(uint64_t a1, char a2)
{
  objc_msgSend(*(id *)(a1 + 32), "setProcessedCount:", objc_msgSend(*(id *)(a1 + 40), "count"));
  double v4 = *(void **)(a1 + 32);
  if (a2)
  {
    [v4 markSucceeded];
    id v5 = objc_msgSend(objc_alloc((Class)NSMutableSet), "initWithCapacity:", objc_msgSend(*(id *)(a1 + 40), "count"));
    long long v21 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    id v6 = *(id *)(a1 + 40);
    id v7 = [v6 countByEnumeratingWithState:&v21 objects:v25 count:16];
    if (v7)
    {
      id v8 = v7;
      uint64_t v9 = *(void *)v22;
      do
      {
        for (i = 0; i != v8; i = (char *)i + 1)
        {
          if (*(void *)v22 != v9) {
            objc_enumerationMutation(v6);
          }
          unint64_t v11 = [*(id *)(*((void *)&v21 + 1) + 8 * i) recordId];
          [v5 addObject:v11];
        }
        id v8 = [v6 countByEnumeratingWithState:&v21 objects:v25 count:16];
      }
      while (v8);
    }

    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472;
    void v16[2] = sub_10027E878;
    v16[3] = &unk_100509370;
    id v12 = *(void **)(a1 + 48);
    void v16[4] = *(void *)(a1 + 56);
    id v19 = *(id *)(a1 + 72);
    id v17 = *(id *)(a1 + 40);
    id v13 = *(id *)(a1 + 64);
    uint64_t v14 = *(void *)(a1 + 80);
    id v18 = v13;
    uint64_t v20 = v14;
    [v12 deleteEventRecordsWithRecordIDs:v5 completion:v16];
  }
  else
  {
    if (([v4 hasFailureType] & 1) == 0) {
      [*(id *)(a1 + 32) markFailedWithType:6];
    }
    uint64_t v15 = *(void (**)(void))(*(void *)(a1 + 72) + 16);
    v15();
  }
}

void sub_10027E878(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  id v6 = [*(id *)(a1 + 32) _queue];
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_10027E978;
  v10[3] = &unk_100509348;
  char v16 = a2;
  id v11 = v5;
  id v14 = *(id *)(a1 + 56);
  id v12 = *(id *)(a1 + 40);
  id v7 = *(id *)(a1 + 48);
  uint64_t v8 = *(void *)(a1 + 64);
  id v13 = v7;
  uint64_t v15 = v8;
  id v9 = v5;
  dispatch_async(v6, v10);
}

uint64_t sub_10027E978(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 72) && !*(void *)(a1 + 32))
  {
    double v4 = *(uint64_t (**)(void))(*(void *)(a1 + 56) + 16);
    return v4();
  }
  else
  {
    id v2 = (void *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      id v5 = *(void **)(a1 + 40);
      id v6 = v2;
      id v7 = [v5 count];
      uint64_t v8 = *(void *)(a1 + 48);
      uint64_t v9 = *(void *)(a1 + 64);
      uint64_t v10 = *(void *)(a1 + 32);
      int v11 = 136316162;
      id v12 = "-[ADCommandCenter(Metrics) _metrics_processEventRecordsFromStore:batch:deliveryStream:eventStreamUID:streamS"
            "peechId:untilLimit:uploadRecords:completion:]_block_invoke_3";
      __int16 v13 = 2048;
      id v14 = v7;
      __int16 v15 = 2112;
      uint64_t v16 = v8;
      __int16 v17 = 2048;
      uint64_t v18 = v9;
      __int16 v19 = 2112;
      uint64_t v20 = v10;
      _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "%s Failed to delete %tu sent analytics events from event stream with UID %@ in delivery stream %tu due to error %@.", (uint8_t *)&v11, 0x34u);
    }
    return (*(uint64_t (**)(void))(*(void *)(a1 + 56) + 16))();
  }
}

uint64_t sub_10027EAEC(uint64_t a1, uint64_t a2)
{
  [*(id *)(a1 + 32) setOutstandingCount:a2];
  [*(id *)(a1 + 32) markEndTime];
  +[ADCoreAnalyticsSideChannel logAnalyticsBatchUploadedWithBatch:*(void *)(a1 + 32)];
  uint64_t result = *(void *)(a1 + 40);
  if (result)
  {
    double v4 = *(uint64_t (**)(void))(result + 16);
    return v4();
  }
  return result;
}

uint64_t sub_10027F098(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_10027F0B0(uint64_t a1, void *a2)
{
  id v3 = a2;
  double v4 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)long long buf = 136315138;
    long long v21 = "-[ADCommandCenter(Metrics) _metrics_sendNextAnalyticsEventStreamToServerUntilLimit:requiresUnlimitedPower:requ"
          "iresActiveSession:prioritizedEventStreamUID:deliveryStreamContinuations:scheduledActivity:completion:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%s Fetching analytics event stream UIDs...", buf, 0xCu);
  }
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_10027F244;
  v8[3] = &unk_1005092A8;
  void v8[4] = *(void *)(a1 + 32);
  id v11 = *(id *)(a1 + 48);
  uint64_t v13 = *(void *)(a1 + 64);
  id v5 = *(id *)(a1 + 40);
  uint64_t v17 = *(void *)(a1 + 120);
  char v18 = *(unsigned char *)(a1 + 128);
  long long v6 = *(_OWORD *)(a1 + 88);
  long long v14 = *(_OWORD *)(a1 + 72);
  long long v15 = v6;
  long long v16 = *(_OWORD *)(a1 + 104);
  id v9 = v5;
  id v10 = v3;
  __int16 v19 = *(_WORD *)(a1 + 129);
  id v12 = *(id *)(a1 + 56);
  id v7 = v3;
  [v7 fetchEventStreamUIDsWithCompletion:v8];
}

void sub_10027F244(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  v125[0] = _NSConcreteStackBlock;
  v125[1] = 3221225472;
  v125[2] = sub_10027FF38;
  v125[3] = &unk_1005091B8;
  id v7 = objc_msgSend(objc_alloc((Class)NSMutableSet), "initWithCapacity:", objc_msgSend(v5, "count"));
  id v126 = v7;
  [v5 enumerateObjectsUsingBlock:v125];
  uint64_t v8 = [v7 allObjects];
  id v9 = v8;
  if (v6)
  {
    id v10 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136315394;
      *(void *)&uint8_t buf[4] = "-[ADCommandCenter(Metrics) _metrics_sendNextAnalyticsEventStreamToServerUntilLimit:requiresUn"
                           "limitedPower:requiresActiveSession:prioritizedEventStreamUID:deliveryStreamContinuations:sche"
                           "duledActivity:completion:]_block_invoke";
      *(_WORD *)&buf[12] = 2112;
      *(void *)&buf[14] = v6;
      _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "%s Failed to fetch analytics event stream UIDs due to error %@", buf, 0x16u);
    }
    id v11 = [*(id *)(a1 + 32) _queue];
    id v12 = block;
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10027FF90;
    block[3] = &unk_10050D0D0;
    void block[4] = *(id *)(a1 + 56);
    dispatch_async(v11, block);

LABEL_5:
    uint64_t v13 = (void *)v12[4];
    goto LABEL_6;
  }
  id v14 = [v8 count];
  long long v15 = AFSiriLogContextDaemon;
  BOOL v16 = os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO);
  if (!v14)
  {
    if (v16)
    {
      *(_DWORD *)long long buf = 136315138;
      *(void *)&uint8_t buf[4] = "-[ADCommandCenter(Metrics) _metrics_sendNextAnalyticsEventStreamToServerUntilLimit:requiresUn"
                           "limitedPower:requiresActiveSession:prioritizedEventStreamUID:deliveryStreamContinuations:sche"
                           "duledActivity:completion:]_block_invoke_2";
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "%s No analytics event stream UIDs was fetched.", buf, 0xCu);
    }
    long long v24 = [*(id *)(a1 + 32) _queue];
    id v12 = v123;
    v123[0] = _NSConcreteStackBlock;
    v123[1] = 3221225472;
    v123[2] = sub_10027FFA0;
    v123[3] = &unk_10050D0D0;
    uint8_t v123[4] = *(id *)(a1 + 56);
    dispatch_async(v24, v123);

    goto LABEL_5;
  }
  if (v16)
  {
    uint64_t v17 = v15;
    id v18 = [v9 count];
    *(_DWORD *)long long buf = 136315650;
    *(void *)&uint8_t buf[4] = "-[ADCommandCenter(Metrics) _metrics_sendNextAnalyticsEventStreamToServerUntilLimit:requiresUnli"
                         "mitedPower:requiresActiveSession:prioritizedEventStreamUID:deliveryStreamContinuations:schedule"
                         "dActivity:completion:]_block_invoke_2";
    *(_WORD *)&buf[12] = 2048;
    *(void *)&buf[14] = v18;
    *(_WORD *)&unsigned char buf[22] = 2112;
    v128 = (const char *)v9;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "%s Fetched %tu analytics event stream UIDs %@", buf, 0x20u);
  }
  __int16 v19 = +[NSProcessInfo processInfo];
  [v19 systemUptime];
  BOOL v21 = v20 < *(double *)(a1 + 72);

  if (!v21)
  {
    id v25 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136315138;
      *(void *)&uint8_t buf[4] = "-[ADCommandCenter(Metrics) _metrics_sendNextAnalyticsEventStreamToServerUntilLimit:requiresUn"
                           "limitedPower:requiresActiveSession:prioritizedEventStreamUID:deliveryStreamContinuations:sche"
                           "duledActivity:completion:]_block_invoke";
      _os_log_error_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "%s Attempted to send analytics event stream when time limit is reached.", buf, 0xCu);
    }
    int8x16_t v26 = [*(id *)(a1 + 32) _queue];
    id v12 = v122;
    v122[0] = _NSConcreteStackBlock;
    v122[1] = 3221225472;
    v122[2] = sub_10027FFB0;
    v122[3] = &unk_10050D0D0;
    v122[4] = *(id *)(a1 + 56);
    dispatch_async(v26, v122);

    goto LABEL_5;
  }
  long long v22 = +[ADAnalyticsService sharedService];
  uint64_t v13 = [v22 currentEventStreamUID];

  id v76 = [v9 mutableCopy];
  [v76 removeObject:v13];
  if (*(void *)(a1 + 40) && objc_msgSend(v9, "containsObject:"))
  {
    long long v23 = *(void **)(a1 + 40);
  }
  else
  {
    id v27 = [v76 count];
    long long v23 = v13;
    if (v27)
    {
      id v28 = [v76 firstObject];
      goto LABEL_23;
    }
  }
  id v28 = v23;
LABEL_23:
  id v29 = v28;
  unsigned int v30 = [v28 isEqualToString:*(void *)(a1 + 40)];
  unsigned int v31 = [v29 isEqualToString:v13];
  unsigned int v77 = v30;
  if (v30)
  {
    int8x16_t v32 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      uint64_t v33 = *(void *)(a1 + 40);
      *(_DWORD *)long long buf = 136315394;
      *(void *)&uint8_t buf[4] = "-[ADCommandCenter(Metrics) _metrics_sendNextAnalyticsEventStreamToServerUntilLimit:requiresUn"
                           "limitedPower:requiresActiveSession:prioritizedEventStreamUID:deliveryStreamContinuations:sche"
                           "duledActivity:completion:]_block_invoke_2";
      *(_WORD *)&buf[12] = 2112;
      *(void *)&buf[14] = v33;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_INFO, "%s Using prioritized event stream UID %@", buf, 0x16u);
    }
  }
  if (v31)
  {
    id v34 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 136315394;
      *(void *)&uint8_t buf[4] = "-[ADCommandCenter(Metrics) _metrics_sendNextAnalyticsEventStreamToServerUntilLimit:requiresUn"
                           "limitedPower:requiresActiveSession:prioritizedEventStreamUID:deliveryStreamContinuations:sche"
                           "duledActivity:completion:]_block_invoke";
      *(_WORD *)&buf[12] = 2112;
      *(void *)&buf[14] = v13;
      _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_INFO, "%s Using current event stream UID %@", buf, 0x16u);
    }
  }
  uint64_t v116 = 0;
  v117 = &v116;
  uint64_t v118 = 0x3032000000;
  __int16 v119 = sub_10027FFC0;
  id v120 = sub_10027FFD0;
  id v121 = 0;
  v113[0] = _NSConcreteStackBlock;
  v113[1] = 3221225472;
  v113[2] = sub_10027FFD8;
  v113[3] = &unk_1005091E0;
  id v75 = v29;
  id v114 = v75;
  long long v115 = &v116;
  [v5 enumerateObjectsUsingBlock:v113];
  uint64_t v35 = [*(id *)(a1 + 32) _account];
  long long v74 = [v35 speechIdentifier];

  *(void *)long long buf = 0;
  *(void *)&buf[8] = buf;
  *(void *)&buf[16] = 0x5810000000;
  v128 = "";
  if (v77)
  {
    long long v36 = *(_OWORD *)(a1 + 96);
    long long v129 = *(_OWORD *)(a1 + 80);
    long long v130 = v36;
    long long v131 = *(_OWORD *)(a1 + 112);
    uint64_t v37 = *(void *)(a1 + 128);
  }
  else
  {
    long long v129 = xmmword_1003E2C98;
    long long v130 = unk_1003E2CA8;
    long long v131 = xmmword_1003E2CB8;
    uint64_t v37 = 100;
  }
  uint64_t v132 = v37;
  __int16 v38 = dispatch_group_create();
  __int16 v39 = v38;
  uint64_t v40 = *(void *)&buf[8];
  long long v78 = v38;
  if (*(unsigned char *)(*(void *)&buf[8] + 32))
  {
    dispatch_group_enter(v38);
    __int16 v41 = [[ADAnalyticsDeliveryBatch alloc] initWithDeliveryStream:0];
    [(ADAnalyticsDeliveryBatch *)v41 markStartTime];
    id v42 = [*(id *)(a1 + 32) _account];
    __int16 v43 = [v42 hostname];
    [(ADAnalyticsDeliveryBatch *)v41 setServerEnvironment:v43];

    [(ADAnalyticsDeliveryBatch *)v41 setScheduledActivity:*(unsigned __int8 *)(a1 + 136)];
    uint64_t v68 = *(void *)(a1 + 48);
    long long v71 = *(void **)(a1 + 32);
    uint64_t v44 = v117[5];
    double v45 = *(double *)(a1 + 72);
    v107[0] = _NSConcreteStackBlock;
    v107[1] = 3221225472;
    v107[2] = sub_100280070;
    v107[3] = &unk_100509208;
    id v108 = v74;
    id v109 = v75;
    uint64_t v46 = v41;
    uint64_t v47 = *(void *)(a1 + 32);
    id v110 = v46;
    uint64_t v111 = v47;
    char v112 = *(unsigned char *)(a1 + 137);
    v104[0] = _NSConcreteStackBlock;
    v104[1] = 3221225472;
    v104[2] = sub_100280A48;
    v104[3] = &unk_100509230;
    long long v106 = buf;
    long long v105 = v78;
    objc_msgSend(v71, "_metrics_processEventRecordsFromStore:batch:deliveryStream:eventStreamUID:streamSpeechId:untilLimit:uploadRecords:completion:", v68, v46, 0, v109, v44, v107, v45, v104);

    uint64_t v40 = *(void *)&buf[8];
    __int16 v39 = v78;
  }
  if (*(unsigned char *)(v40 + 48))
  {
    dispatch_group_enter(v39);
    id v48 = [[ADAnalyticsDeliveryBatch alloc] initWithDeliveryStream:1];
    [(ADAnalyticsDeliveryBatch *)v48 markStartTime];
    __int16 v49 = [*(id *)(a1 + 32) _account];
    unsigned int v50 = [v49 hostname];
    [(ADAnalyticsDeliveryBatch *)v48 setServerEnvironment:v50];

    [(ADAnalyticsDeliveryBatch *)v48 setScheduledActivity:*(unsigned __int8 *)(a1 + 136)];
    uint64_t v69 = *(void *)(a1 + 48);
    long long v72 = *(void **)(a1 + 32);
    uint64_t v51 = v117[5];
    double v52 = *(double *)(a1 + 72);
    v99[0] = _NSConcreteStackBlock;
    v99[1] = 3221225472;
    v99[2] = sub_100280B6C;
    v99[3] = &unk_100509258;
    id v100 = v75;
    id v53 = v48;
    long long v101 = v53;
    id v54 = v13;
    uint64_t v55 = *(void *)(a1 + 32);
    id v102 = v54;
    uint64_t v103 = v55;
    v96[0] = _NSConcreteStackBlock;
    v96[1] = 3221225472;
    v96[2] = sub_100280E98;
    v96[3] = &unk_100509230;
    id v98 = buf;
    __int16 v97 = v78;
    objc_msgSend(v72, "_metrics_processEventRecordsFromStore:batch:deliveryStream:eventStreamUID:streamSpeechId:untilLimit:uploadRecords:completion:", v69, v53, 1, v100, v51, v99, v52, v96);

    uint64_t v40 = *(void *)&buf[8];
    __int16 v39 = v78;
  }
  if (*(unsigned char *)(v40 + 64))
  {
    dispatch_group_enter(v39);
    uint64_t v56 = [[ADAnalyticsDeliveryBatch alloc] initWithDeliveryStream:2];
    [(ADAnalyticsDeliveryBatch *)v56 markStartTime];
    id v57 = [*(id *)(a1 + 32) _account];
    id v58 = [v57 hostname];
    [(ADAnalyticsDeliveryBatch *)v56 setServerEnvironment:v58];

    [(ADAnalyticsDeliveryBatch *)v56 setScheduledActivity:*(unsigned __int8 *)(a1 + 136)];
    uint64_t v70 = *(void *)(a1 + 48);
    long long v73 = *(void **)(a1 + 32);
    uint64_t v59 = v117[5];
    double v60 = *(double *)(a1 + 72);
    v91[0] = _NSConcreteStackBlock;
    v91[1] = 3221225472;
    v91[2] = sub_100280FC4;
    v91[3] = &unk_100509258;
    id v92 = v75;
    id v61 = v56;
    id v93 = v61;
    id v62 = v13;
    uint64_t v63 = *(void *)(a1 + 32);
    id v94 = v62;
    uint64_t v95 = v63;
    v88[0] = _NSConcreteStackBlock;
    v88[1] = 3221225472;
    v88[2] = sub_100281304;
    v88[3] = &unk_100509230;
    id v90 = buf;
    __int16 v89 = v78;
    objc_msgSend(v73, "_metrics_processEventRecordsFromStore:batch:deliveryStream:eventStreamUID:streamSpeechId:untilLimit:uploadRecords:completion:", v70, v61, 2, v92, v59, v91, v60, v88);

    __int16 v39 = v78;
  }
  id v64 = [*(id *)(a1 + 32) _queue];
  v79[0] = _NSConcreteStackBlock;
  v79[1] = 3221225472;
  v79[2] = sub_100281430;
  v79[3] = &unk_100509280;
  id v83 = buf;
  id v65 = *(id *)(a1 + 56);
  uint64_t v66 = *(void *)(a1 + 32);
  uint64_t v84 = *(void *)(a1 + 72);
  char v85 = *(unsigned char *)(a1 + 138);
  char v86 = *(unsigned char *)(a1 + 137);
  v79[4] = v66;
  id v80 = v75;
  id v81 = v65;
  char v87 = *(unsigned char *)(a1 + 136);
  id v82 = *(id *)(a1 + 64);
  id v67 = v75;
  dispatch_group_notify(v39, v64, v79);

  _Block_object_dispose(buf, 8);
  _Block_object_dispose(&v116, 8);

LABEL_6:
}

void sub_10027FEF4(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 208), 8);
  _Block_object_dispose(&STACK[0x220], 8);
  _Unwind_Resume(a1);
}

void sub_10027FF38(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = [a2 streamUID];
  [v2 addObject:v3];
}

uint64_t sub_10027FF90(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_10027FFA0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_10027FFB0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_10027FFC0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10027FFD0(uint64_t a1)
{
}

void sub_10027FFD8(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  id v11 = a2;
  id v6 = [v11 streamUID];
  unsigned int v7 = [v6 isEqualToString:*(void *)(a1 + 32)];

  if (v7)
  {
    uint64_t v8 = [v11 speechId];
    uint64_t v9 = *(void *)(*(void *)(a1 + 40) + 8);
    id v10 = *(void **)(v9 + 40);
    *(void *)(v9 + 40) = v8;

    *a4 = 1;
  }
}

void sub_100280070(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id v10 = (void *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    id v11 = v10;
    *(_DWORD *)long long buf = 136315394;
    id v93 = "-[ADCommandCenter(Metrics) _metrics_sendNextAnalyticsEventStreamToServerUntilLimit:requiresUnlimitedPower:requ"
          "iresActiveSession:prioritizedEventStreamUID:deliveryStreamContinuations:scheduledActivity:completion:]_block_invoke_2";
    __int16 v94 = 2048;
    id v95 = [v7 count];
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "%s Converting %tu analytics events to Events metrics...", buf, 0x16u);
  }
  id v12 = v8;
  uint64_t v13 = v12;
  if (!v12 || (id v14 = v12, [v12 isEqualToString:@"unknown"]))
  {
    long long v15 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      BOOL v16 = *(void **)(a1 + 32);
      *(_DWORD *)long long buf = 136315650;
      id v93 = "-[ADCommandCenter(Metrics) _metrics_sendNextAnalyticsEventStreamToServerUntilLimit:requiresUnlimitedPower:re"
            "quiresActiveSession:prioritizedEventStreamUID:deliveryStreamContinuations:scheduledActivity:completion:]_block_invoke";
      __int16 v94 = 2112;
      id v95 = v13;
      __int16 v96 = 2112;
      id v97 = v16;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "%s Recorded speechId was %@, using current %@", buf, 0x20u);
    }
    id v14 = *(id *)(a1 + 32);
  }
  long long v73 = v13;
  uint64_t v17 = *(void **)(a1 + 40);
  id v72 = v14;
  id v18 = v17;
  id v19 = v7;
  id v74 = v18;
  id v20 = v19;
  id v21 = [v20 count];
  if (v21)
  {
    id v22 = v21;
    id v69 = v9;
    uint64_t v70 = a1;
    id v23 = [objc_alloc((Class)NSMutableDictionary) initWithCapacity:v21];
    id v24 = [objc_alloc((Class)NSMutableDictionary) initWithCapacity:v22];
    id v68 = v22;
    id v85 = [objc_alloc((Class)NSMutableDictionary) initWithCapacity:v22];
    long long v86 = 0u;
    long long v87 = 0u;
    long long v88 = 0u;
    long long v89 = 0u;
    id obj = v20;
    id v25 = [obj countByEnumeratingWithState:&v86 objects:buf count:16];
    if (!v25)
    {
      id v80 = 0;
      goto LABEL_55;
    }
    id v26 = v25;
    id v80 = 0;
    uint64_t v27 = *(void *)v87;
    id v78 = v20;
    id v79 = v23;
    uint64_t v81 = *(void *)v87;
    id v82 = v24;
    while (1)
    {
      id v28 = 0;
      id v83 = v26;
      do
      {
        if (*(void *)v87 != v27) {
          objc_enumerationMutation(obj);
        }
        id v29 = *(void **)(*((void *)&v86 + 1) + 8 * (void)v28);
        unsigned int v31 = [v29 event];
        [v31 type];
        if (AFAnalyticsEventTypeIsValid())
        {
          int8x16_t v32 = AFAnalyticsEventTypeGetLegacyName();
          uint64_t v33 = [v85 objectForKey:v32];
          id v34 = (char *)[v33 unsignedIntegerValue];

          if (v34 == (char *)1)
          {
            long long v36 = [v23 objectForKey:v32];
            uint64_t v37 = [v24 objectForKey:v32];
            __int16 v38 = +[NSString stringWithFormat:@"%@.%u", v32, 0];
            [v23 setObject:v36 forKey:v38];
            [v23 removeObjectForKey:v32];

            if (v37)
            {
              [v24 setObject:v37 forKey:v38];
              [v24 removeObjectForKey:v32];
            }
            id v20 = v78;
          }
          else
          {
            if (!v34)
            {
              id v35 = v32;
              goto LABEL_23;
            }
            __int16 v38 = 0;
          }
          id v35 = +[NSString stringWithFormat:@"%@.%tu", v32, v34];

LABEL_23:
          __int16 v39 = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", [v31 timestamp]);
          [v23 setObject:v39 forKey:v35];

          id v40 = v31;
          if (v40)
          {
            __int16 v41 = v40;
            id v42 = [v40 contextData];
            if (!v42) {
              goto LABEL_32;
            }
            id v43 = [v41 contextDataType];
            if (v43 == (id)2)
            {
              id v48 = [objc_alloc((Class)NSString) initWithData:v42 encoding:4];
              goto LABEL_39;
            }
            if (v43 != (id)1)
            {
LABEL_32:
              id v48 = 0;
              goto LABEL_39;
            }
            id v91 = 0;
            uint64_t v44 = +[NSPropertyListSerialization propertyListWithData:v42 options:0 format:0 error:&v91];
            id v45 = v91;
            id v76 = (void *)v44;
            if (v45 || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0))
            {
              __int16 v49 = AFSiriLogContextAnalytics;
              if (os_log_type_enabled(AFSiriLogContextAnalytics, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)id v98 = 136315394;
                long long v99 = "_ADAnalyticsMetricsGetEventInformationValue";
                __int16 v100 = 2114;
                id v101 = v45;
                _os_log_error_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_ERROR, "%s %{public}@", v98, 0x16u);
              }

              id v48 = 0;
LABEL_37:
              id v20 = v78;
            }
            else
            {
              id v90 = 0;
              uint64_t v46 = +[NSJSONSerialization dataWithJSONObject:v44 options:0 error:&v90];
              id v47 = v90;

              id v42 = (void *)v46;
              if (v46 && !v47)
              {
                id v48 = [objc_alloc((Class)NSString) initWithData:v46 encoding:4];
                goto LABEL_37;
              }
              id v75 = (void *)v46;
              double v52 = AFSiriLogContextAnalytics;
              id v20 = v78;
              if (os_log_type_enabled(AFSiriLogContextAnalytics, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)id v98 = 136315394;
                long long v99 = "_ADAnalyticsMetricsGetEventInformationValue";
                __int16 v100 = 2114;
                id v101 = v47;
                _os_log_error_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_ERROR, "%s %{public}@", v98, 0x16u);
              }

              id v48 = 0;
              id v42 = v75;
            }

LABEL_39:

            if (v48)
            {
              id v24 = v82;
              [v82 setObject:v48 forKey:v35];
              unsigned int v50 = (char *)[v35 lengthOfBytesUsingEncoding:4];
              id v80 = (char *)[v48 lengthOfBytesUsingEncoding:4] + (void)v80 + (unint64_t)v50;

              id v23 = v79;
LABEL_43:
              uint64_t v51 = +[NSNumber numberWithUnsignedInteger:v34 + 1];
              [v85 setObject:v51 forKey:v32];

              uint64_t v27 = v81;
              id v26 = v83;
              goto LABEL_44;
            }
            id v23 = v79;
          }
          id v24 = v82;
          goto LABEL_43;
        }
LABEL_44:

        id v28 = (char *)v28 + 1;
      }
      while (v26 != v28);
      id v53 = [obj countByEnumeratingWithState:&v86 objects:buf count:16];
      id v26 = v53;
      if (!v53)
      {
LABEL_55:

        id v58 = [v23 count];
        BOOL v57 = v58 != 0;
        if (v58)
        {
          AFSystemGetBootTimeInTimeInterval();
          uint64_t v59 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
          [v23 setObject:v59 forKey:@"SystemBootTime"];

          [v24 setObject:v74 forKey:@"StreamIdentifier"];
          id v55 = v23;
          id v56 = v24;
        }
        else
        {
          double v60 = AFSiriLogContextAnalytics;
          if (os_log_type_enabled(AFSiriLogContextAnalytics, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)id v98 = 136315394;
            long long v99 = "_ADAnalyticsMetricsCreateTimingsAndEventInformationDictionaries";
            __int16 v100 = 2048;
            id v101 = v68;
            _os_log_error_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_ERROR, "%s Dropped %tu events because no timings can be extracted from the events.", v98, 0x16u);
          }
          id v55 = 0;
          id v56 = 0;
        }
        id v9 = v69;
        a1 = v70;

        goto LABEL_61;
      }
    }
  }
  id v54 = AFSiriLogContextAnalytics;
  if (os_log_type_enabled(AFSiriLogContextAnalytics, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)long long buf = 136315138;
    id v93 = "_ADAnalyticsMetricsCreateTimingsAndEventInformationDictionaries";
    _os_log_error_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_ERROR, "%s Unable to build metrics out of no event records.", buf, 0xCu);
  }
  id v80 = 0;
  id v55 = 0;
  id v56 = 0;
  BOOL v57 = 0;
LABEL_61:

  id v61 = v55;
  id v62 = v56;
  if (v57)
  {
    id v63 = objc_alloc_init((Class)SAMetrics);
    [v63 setCategory:@"Events"];
    [v63 setEventInformation:v62];
    [v63 setTimings:v61];
    id v64 = v72;
    [v63 setSpeechId:v72];
  }
  else
  {
    id v63 = 0;
    id v64 = v72;
  }

  [*(id *)(a1 + 48) setPayloadSize:v80];
  id v65 = (void *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v66 = v65;
    id v67 = [v20 count];
    *(_DWORD *)long long buf = 136315650;
    id v93 = "-[ADCommandCenter(Metrics) _metrics_sendNextAnalyticsEventStreamToServerUntilLimit:requiresUnlimitedPower:requ"
          "iresActiveSession:prioritizedEventStreamUID:deliveryStreamContinuations:scheduledActivity:completion:]_block_invoke";
    __int16 v94 = 2048;
    id v95 = v67;
    __int16 v96 = 2112;
    id v97 = v63;
    _os_log_impl((void *)&_mh_execute_header, v66, OS_LOG_TYPE_INFO, "%s Converted %tu analytics events to Events metrics %@", buf, 0x20u);
  }
  [*(id *)(a1 + 56) _sendMetrics:v63 requiresActiveSession:*(unsigned __int8 *)(a1 + 64) batch:*(void *)(a1 + 48) completion:v9];
}

void sub_100280A48(uint64_t a1, char a2)
{
  if (a2)
  {
    id v3 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      int v5 = 136315394;
      id v6 = "-[ADCommandCenter(Metrics) _metrics_sendNextAnalyticsEventStreamToServerUntilLimit:requiresUnlimitedPower:req"
           "uiresActiveSession:prioritizedEventStreamUID:deliveryStreamContinuations:scheduledActivity:completion:]_block_invoke";
      __int16 v7 = 2048;
      uint64_t v8 = 0;
      double v4 = "%s Event record process complete for delivery stream %lu, moving on to next iteration";
LABEL_6:
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, v4, (uint8_t *)&v5, 0x16u);
    }
  }
  else
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 32) = 0;
    id v3 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      int v5 = 136315394;
      id v6 = "-[ADCommandCenter(Metrics) _metrics_sendNextAnalyticsEventStreamToServerUntilLimit:requiresUnlimitedPower:req"
           "uiresActiveSession:prioritizedEventStreamUID:deliveryStreamContinuations:scheduledActivity:completion:]_block_invoke";
      __int16 v7 = 2048;
      uint64_t v8 = 0;
      double v4 = "%s Ceasing to process events from delivery stream %tu.";
      goto LABEL_6;
    }
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_100280B6C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id v10 = (void *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    id v11 = v10;
    *(_DWORD *)long long buf = 136315394;
    *(void *)&uint8_t buf[4] = "-[ADCommandCenter(Metrics) _metrics_sendNextAnalyticsEventStreamToServerUntilLimit:requiresUnli"
                         "mitedPower:requiresActiveSession:prioritizedEventStreamUID:deliveryStreamContinuations:schedule"
                         "dActivity:completion:]_block_invoke";
    *(_WORD *)&buf[12] = 2048;
    *(void *)&buf[14] = [v7 count];
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "%s Converting %tu analytics events to SendInstrumentation...", buf, 0x16u);
  }
  uint64_t v29 = 0;
  id v12 = *(id *)(a1 + 32);
  id v13 = v7;
  id v14 = objc_alloc_init((Class)NSMutableArray);
  *(void *)long long buf = _NSConcreteStackBlock;
  *(void *)&buf[8] = 3221225472;
  *(void *)&buf[16] = sub_1000BE288;
  unsigned int v31 = &unk_100500DE8;
  id v16 = v14;
  id v32 = v16;
  uint64_t v33 = &v29;
  [v13 enumerateObjectsUsingBlock:buf];
  id v17 = objc_alloc_init((Class)SASendInstrumentation);
  [v17 setInstrumentationBatch:v16];

  [*(id *)(a1 + 40) setPayloadSize:v29];
  id v18 = (void *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    id v19 = v18;
    id v20 = [v13 count];
    *(_DWORD *)long long buf = 136315650;
    *(void *)&uint8_t buf[4] = "-[ADCommandCenter(Metrics) _metrics_sendNextAnalyticsEventStreamToServerUntilLimit:requiresUnli"
                         "mitedPower:requiresActiveSession:prioritizedEventStreamUID:deliveryStreamContinuations:schedule"
                         "dActivity:completion:]_block_invoke";
    *(_WORD *)&buf[12] = 2048;
    *(void *)&buf[14] = v20;
    *(_WORD *)&unsigned char buf[22] = 2112;
    unsigned int v31 = v17;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "%s Converted %tu analytics events to SendInstrumentation metrics %@", buf, 0x20u);
  }
  mach_absolute_time();
  id v21 = +[NSNumber numberWithUnsignedLongLong:AFMachAbsoluteTimeGetNanoseconds()];
  [v17 setEventTransmittedRelativeToBootTimeTimestampNs:v21];

  [v17 setEventTransmittedTimestampRefId:*(void *)(a1 + 48)];
  id v22 = *(void **)(a1 + 56);
  v25[0] = _NSConcreteStackBlock;
  v25[1] = 3221225472;
  v25[2] = sub_10028176C;
  v25[3] = &unk_10050B420;
  id v26 = *(id *)(a1 + 40);
  id v27 = v17;
  id v28 = v9;
  id v23 = v9;
  id v24 = v17;
  [v22 handleCommand:v24 completion:v25];
}

void sub_100280E98(uint64_t a1, char a2)
{
  if (a2)
  {
    id v3 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      int v5 = 136315394;
      id v6 = "-[ADCommandCenter(Metrics) _metrics_sendNextAnalyticsEventStreamToServerUntilLimit:requiresUnlimitedPower:req"
           "uiresActiveSession:prioritizedEventStreamUID:deliveryStreamContinuations:scheduledActivity:completion:]_block_invoke";
      __int16 v7 = 2048;
      uint64_t v8 = 1;
      double v4 = "%s Event record process complete for delivery stream %lu, moving on to next iteration";
LABEL_6:
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, v4, (uint8_t *)&v5, 0x16u);
    }
  }
  else
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 4_Block_object_dispose(&STACK[0x220], 8) = 0;
    id v3 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      int v5 = 136315394;
      id v6 = "-[ADCommandCenter(Metrics) _metrics_sendNextAnalyticsEventStreamToServerUntilLimit:requiresUnlimitedPower:req"
           "uiresActiveSession:prioritizedEventStreamUID:deliveryStreamContinuations:scheduledActivity:completion:]_block_invoke";
      __int16 v7 = 2048;
      uint64_t v8 = 1;
      double v4 = "%s Ceasing to process events from delivery stream %tu.";
      goto LABEL_6;
    }
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_100280FC4(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id v10 = (void *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    id v11 = v10;
    *(_DWORD *)long long buf = 136315394;
    *(void *)&uint8_t buf[4] = "-[ADCommandCenter(Metrics) _metrics_sendNextAnalyticsEventStreamToServerUntilLimit:requiresUnli"
                         "mitedPower:requiresActiveSession:prioritizedEventStreamUID:deliveryStreamContinuations:schedule"
                         "dActivity:completion:]_block_invoke";
    *(_WORD *)&buf[12] = 2048;
    *(void *)&buf[14] = [v7 count];
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "%s Converting %tu analytics events to SendInstrumentation(Generic)...", buf, 0x16u);
  }
  uint64_t v29 = 0;
  id v12 = *(id *)(a1 + 32);
  id v13 = v7;
  id v14 = objc_alloc_init((Class)NSMutableArray);
  *(void *)long long buf = _NSConcreteStackBlock;
  *(void *)&buf[8] = 3221225472;
  *(void *)&buf[16] = sub_1000BE1EC;
  unsigned int v31 = &unk_100500DE8;
  id v16 = v14;
  id v32 = v16;
  uint64_t v33 = &v29;
  [v13 enumerateObjectsUsingBlock:buf];
  id v17 = objc_alloc_init((Class)SASendInstrumentation);
  [v17 setPayloadVersion:SASendInstrumentationPayloadVersionGENERIC_WRAPPER_SUPPORTValue];
  [v17 setInstrumentationBatch:v16];

  [*(id *)(a1 + 40) setPayloadSize:v29];
  id v18 = (void *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    id v19 = v18;
    id v20 = [v13 count];
    *(_DWORD *)long long buf = 136315650;
    *(void *)&uint8_t buf[4] = "-[ADCommandCenter(Metrics) _metrics_sendNextAnalyticsEventStreamToServerUntilLimit:requiresUnli"
                         "mitedPower:requiresActiveSession:prioritizedEventStreamUID:deliveryStreamContinuations:schedule"
                         "dActivity:completion:]_block_invoke";
    *(_WORD *)&buf[12] = 2048;
    *(void *)&buf[14] = v20;
    *(_WORD *)&unsigned char buf[22] = 2112;
    unsigned int v31 = v17;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "%s Converted %tu analytics events to SendInstrumentation(Generic) %@", buf, 0x20u);
  }
  mach_absolute_time();
  id v21 = +[NSNumber numberWithUnsignedLongLong:AFMachAbsoluteTimeGetNanoseconds()];
  [v17 setEventTransmittedRelativeToBootTimeTimestampNs:v21];

  [v17 setEventTransmittedTimestampRefId:*(void *)(a1 + 48)];
  id v22 = *(void **)(a1 + 56);
  v25[0] = _NSConcreteStackBlock;
  v25[1] = 3221225472;
  v25[2] = sub_10028159C;
  v25[3] = &unk_10050B420;
  id v26 = *(id *)(a1 + 40);
  id v27 = v17;
  id v28 = v9;
  id v23 = v9;
  id v24 = v17;
  [v22 handleCommand:v24 completion:v25];
}

void sub_100281304(uint64_t a1, char a2)
{
  if (a2)
  {
    id v3 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      int v5 = 136315394;
      id v6 = "-[ADCommandCenter(Metrics) _metrics_sendNextAnalyticsEventStreamToServerUntilLimit:requiresUnlimitedPower:req"
           "uiresActiveSession:prioritizedEventStreamUID:deliveryStreamContinuations:scheduledActivity:completion:]_block_invoke";
      __int16 v7 = 2048;
      uint64_t v8 = 2;
      double v4 = "%s Event record process complete for delivery stream %lu, moving on to next iteration";
LABEL_6:
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, v4, (uint8_t *)&v5, 0x16u);
    }
  }
  else
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 64) = 0;
    id v3 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      int v5 = 136315394;
      id v6 = "-[ADCommandCenter(Metrics) _metrics_sendNextAnalyticsEventStreamToServerUntilLimit:requiresUnlimitedPower:req"
           "uiresActiveSession:prioritizedEventStreamUID:deliveryStreamContinuations:scheduledActivity:completion:]_block_invoke";
      __int16 v7 = 2048;
      uint64_t v8 = 2;
      double v4 = "%s Ceasing to process events from delivery stream %tu.";
      goto LABEL_6;
    }
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

id sub_100281430(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 64) + 8);
  if (!*(void *)(v2 + 80)
    || (!*(unsigned char *)(v2 + 32) ? (BOOL v3 = *(unsigned char *)(v2 + 48) == 0) : (BOOL v3 = 0),
        v3 ? (BOOL v4 = *(unsigned char *)(v2 + 64) == 0) : (BOOL v4 = 0),
        v4))
  {
    id v17 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      LODWORD(v18[0]) = 136315138;
      *(void *)((char *)v18 + 4) = "-[ADCommandCenter(Metrics) _metrics_sendNextAnalyticsEventStreamToServerUntilLimit:"
                                     "requiresUnlimitedPower:requiresActiveSession:prioritizedEventStreamUID:deliveryStre"
                                     "amContinuations:scheduledActivity:completion:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "%s Ceasing to process events from all delivery streams.", (uint8_t *)v18, 0xCu);
    }
    return (id)(*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16))();
  }
  else
  {
    int v5 = +[ADPreferences sharedPreferences];
    id v6 = +[NSDate date];
    [v5 setLastMetricsUploadDate:v6];

    double v7 = *(double *)(a1 + 72);
    uint64_t v8 = *(unsigned __int8 *)(a1 + 80);
    uint64_t v9 = *(unsigned __int8 *)(a1 + 81);
    id v10 = *(void **)(a1 + 32);
    uint64_t v11 = *(void *)(a1 + 40);
    uint64_t v12 = *(void *)(a1 + 56);
    uint64_t v13 = *(void *)(*(void *)(a1 + 64) + 8);
    uint64_t v14 = *(unsigned __int8 *)(a1 + 82);
    long long v15 = *(_OWORD *)(v13 + 48);
    v18[0] = *(_OWORD *)(v13 + 32);
    v18[1] = v15;
    void v18[2] = *(_OWORD *)(v13 + 64);
    uint64_t v19 = *(void *)(v13 + 80);
    return objc_msgSend(v10, "_metrics_sendNextAnalyticsEventStreamToServerUntilLimit:requiresUnlimitedPower:requiresActiveSession:prioritizedEventStreamUID:deliveryStreamContinuations:scheduledActivity:completion:", v8, v9, v11, v18, v14, v12, v7);
  }
}

void sub_10028159C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    [*(id *)(a1 + 32) markFailedWithType:6];
    double v7 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      uint64_t v8 = *(void *)(a1 + 40);
      int v11 = 136315650;
      uint64_t v12 = "-[ADCommandCenter(Metrics) _metrics_sendNextAnalyticsEventStreamToServerUntilLimit:requiresUnlimitedPower:re"
            "quiresActiveSession:prioritizedEventStreamUID:deliveryStreamContinuations:scheduledActivity:completion:]_block_invoke";
      __int16 v13 = 2112;
      uint64_t v14 = v8;
      __int16 v15 = 2112;
      id v16 = v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "%s SendInstrumentation(Generic) command %@ failed due to error: %@", (uint8_t *)&v11, 0x20u);
    }
  }
  else
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0) {
      [*(id *)(a1 + 32) markFailedWithType:6];
    }
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      uint64_t v9 = AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
      {
        uint64_t v10 = *(void *)(a1 + 40);
        int v11 = 136315650;
        uint64_t v12 = "-[ADCommandCenter(Metrics) _metrics_sendNextAnalyticsEventStreamToServerUntilLimit:requiresUnlimitedPower:"
              "requiresActiveSession:prioritizedEventStreamUID:deliveryStreamContinuations:scheduledActivity:completion:]_block_invoke";
        __int16 v13 = 2112;
        uint64_t v14 = v10;
        __int16 v15 = 2112;
        id v16 = v5;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "%s SendInstrumentation(Generic) command %@ failed due to response: %@", (uint8_t *)&v11, 0x20u);
      }
    }
  }
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
}

void sub_10028176C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    [*(id *)(a1 + 32) markFailedWithType:6];
    double v7 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      uint64_t v8 = *(void *)(a1 + 40);
      int v11 = 136315650;
      uint64_t v12 = "-[ADCommandCenter(Metrics) _metrics_sendNextAnalyticsEventStreamToServerUntilLimit:requiresUnlimitedPower:re"
            "quiresActiveSession:prioritizedEventStreamUID:deliveryStreamContinuations:scheduledActivity:completion:]_block_invoke";
      __int16 v13 = 2112;
      uint64_t v14 = v8;
      __int16 v15 = 2112;
      id v16 = v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "%s SendInstrumentation command %@ failed due to error: %@", (uint8_t *)&v11, 0x20u);
    }
  }
  else
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0) {
      [*(id *)(a1 + 32) markFailedWithType:6];
    }
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      uint64_t v9 = AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
      {
        uint64_t v10 = *(void *)(a1 + 40);
        int v11 = 136315650;
        uint64_t v12 = "-[ADCommandCenter(Metrics) _metrics_sendNextAnalyticsEventStreamToServerUntilLimit:requiresUnlimitedPower:"
              "requiresActiveSession:prioritizedEventStreamUID:deliveryStreamContinuations:scheduledActivity:completion:]_block_invoke";
        __int16 v13 = 2112;
        uint64_t v14 = v10;
        __int16 v15 = 2112;
        id v16 = v5;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "%s SendInstrumentation command %@ failed due to response: %@", (uint8_t *)&v11, 0x20u);
      }
    }
  }
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
}

uint64_t sub_100281E14(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_100281E2C(uint64_t a1, void *a2)
{
  id v3 = a2;
  BOOL v4 = v3;
  if (v3)
  {
    id v5 = [v3 offlineIdentifier];
    id v6 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 136315650;
      id v22 = "-[ADCommandCenter(Metrics) _metrics_sendNextOfflineMetricsToServerUntilLimit:requiresUnlimitedPower:requires"
            "ActiveSession:completion:]_block_invoke";
      __int16 v23 = 2112;
      id v24 = v5;
      __int16 v25 = 2112;
      id v26 = v4;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "%s Fetched next offline metrics. (offlineIdentifier = %@, metrics = %@)", buf, 0x20u);
    }
    double v7 = [*(id *)(a1 + 32) _queue];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1002820B8;
    block[3] = &unk_100509168;
    uint64_t v19 = *(void *)(a1 + 56);
    void block[4] = *(void *)(a1 + 32);
    id v8 = v4;
    __int16 v20 = *(_WORD *)(a1 + 64);
    id v15 = v8;
    id v16 = v5;
    id v17 = *(id *)(a1 + 40);
    id v18 = *(id *)(a1 + 48);
    id v9 = v5;
    dispatch_async(v7, block);
  }
  else
  {
    uint64_t v10 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 136315138;
      id v22 = "-[ADCommandCenter(Metrics) _metrics_sendNextOfflineMetricsToServerUntilLimit:requiresUnlimitedPower:requires"
            "ActiveSession:completion:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "%s No next offline metrics was fetched.", buf, 0xCu);
    }
    int v11 = [*(id *)(a1 + 32) _queue];
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    void v12[2] = sub_100282274;
    void v12[3] = &unk_10050D0D0;
    id v13 = *(id *)(a1 + 48);
    dispatch_async(v11, v12);

    id v9 = v13;
  }
}

void sub_1002820B8(uint64_t a1)
{
  uint64_t v2 = +[NSProcessInfo processInfo];
  [v2 systemUptime];
  double v4 = v3;
  double v5 = *(double *)(a1 + 72);

  if (v4 >= v5)
  {
    id v9 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136315138;
      id v18 = "-[ADCommandCenter(Metrics) _metrics_sendNextOfflineMetricsToServerUntilLimit:requiresUnlimitedPower:requires"
            "ActiveSession:completion:]_block_invoke";
      _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "%s Attempted to send offline metrics when time limit is reached.", buf, 0xCu);
    }
    (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
  }
  else
  {
    id v6 = *(void **)(a1 + 32);
    uint64_t v7 = *(void *)(a1 + 40);
    uint64_t v8 = *(unsigned __int8 *)(a1 + 80);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_100282284;
    v10[3] = &unk_100509140;
    void v10[4] = v6;
    id v11 = *(id *)(a1 + 48);
    uint64_t v14 = *(void *)(a1 + 72);
    char v15 = *(unsigned char *)(a1 + 81);
    char v16 = *(unsigned char *)(a1 + 80);
    id v12 = *(id *)(a1 + 56);
    id v13 = *(id *)(a1 + 64);
    [v6 _sendMetrics:v7 requiresActiveSession:v8 batch:0 completion:v10];
  }
}

uint64_t sub_100282274(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

id sub_100282284(uint64_t a1, int a2)
{
  if (a2)
  {
    double v3 = [*(id *)(a1 + 32) _offlineMetricsManager];
    [v3 deleteMetricsWithOfflineIdentifier:*(void *)(a1 + 40)];

    double v4 = *(void **)(a1 + 32);
    double v5 = *(double *)(a1 + 64);
    uint64_t v6 = *(unsigned __int8 *)(a1 + 72);
    uint64_t v7 = *(unsigned __int8 *)(a1 + 73);
    uint64_t v8 = *(void *)(a1 + 48);
    return objc_msgSend(v4, "_metrics_sendNextOfflineMetricsToServerUntilLimit:requiresUnlimitedPower:requiresActiveSession:completion:", v6, v7, v8, v5);
  }
  else
  {
    uint64_t v10 = *(uint64_t (**)(void))(*(void *)(a1 + 56) + 16);
    return (id)v10();
  }
}

void sub_10028270C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48))
  {
    uint64_t v2 = +[ADAnalyticsService sharedService];
    [v2 accessStoreUsingBlock:&stru_1005090A8];
  }
  double v3 = +[NSDate dateWithTimeIntervalSinceNow:-86400.0];
  double v4 = +[ADAnalyticsService sharedService];
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_100282D8C;
  v9[3] = &unk_10050B5C0;
  id v5 = v3;
  id v10 = v5;
  [v4 accessStoreUsingBlock:v9];

  uint64_t v6 = +[ADAnalyticsService sharedService];
  [v6 resumeEventsStaging];

  *(unsigned char *)(*(void *)(a1 + 32) + 72_Block_object_dispose(&STACK[0x220], 8) = 0;
  uint64_t v7 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)long long buf = 136315138;
    id v12 = "-[ADCommandCenter(Metrics) _metrics_sendMetricsToServerUntilLimit:requiresUnlimitedPower:requiresActiveSession"
          ":purgesOversizedStorage:scheduledActivity:completion:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "%s Done sending metrics to server.", buf, 0xCu);
  }
  uint64_t v8 = *(void *)(a1 + 40);
  if (v8) {
    (*(void (**)(void))(v8 + 16))();
  }
}

void sub_1002828B8(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)long long buf = 136315650;
    id v18 = "-[ADCommandCenter(Metrics) _metrics_sendMetricsToServerUntilLimit:requiresUnlimitedPower:requiresActiveSession"
          ":purgesOversizedStorage:scheduledActivity:completion:]_block_invoke";
    __int16 v19 = 1024;
    int v20 = a2;
    __int16 v21 = 2112;
    id v22 = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "%s Deleted events related to sensitive conditions with success: %d, error: %@", buf, 0x1Cu);
    uint64_t v6 = AFSiriLogContextDaemon;
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)long long buf = 136315138;
    id v18 = "-[ADCommandCenter(Metrics) _metrics_sendMetricsToServerUntilLimit:requiresUnlimitedPower:requiresActiveSession"
          ":purgesOversizedStorage:scheduledActivity:completion:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "%s Begin sending offline metrics...", buf, 0xCu);
  }
  uint64_t v7 = *(void **)(a1 + 32);
  double v8 = *(double *)(a1 + 48);
  uint64_t v9 = *(unsigned __int8 *)(a1 + 56);
  uint64_t v10 = *(unsigned __int8 *)(a1 + 57);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  void v11[2] = sub_100282A84;
  void v11[3] = &unk_1005090F0;
  double v13 = v8;
  void v11[4] = v7;
  char v14 = v9;
  char v15 = v10;
  char v16 = *(unsigned char *)(a1 + 58);
  id v12 = *(id *)(a1 + 40);
  objc_msgSend(v7, "_metrics_sendNextOfflineMetricsToServerUntilLimit:requiresUnlimitedPower:requiresActiveSession:completion:", v9, v10, v11, v8);
}

void sub_100282A84(uint64_t a1)
{
  uint64_t v2 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = "-[ADCommandCenter(Metrics) _metrics_sendMetricsToServerUntilLimit:requiresUnlimitedPower:requir"
                         "esActiveSession:purgesOversizedStorage:scheduledActivity:completion:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s End sending offline metrics.", buf, 0xCu);
  }
  double v3 = +[NSProcessInfo processInfo];
  [v3 systemUptime];
  double v5 = v4;
  double v6 = *(double *)(a1 + 48);

  uint64_t v7 = AFSiriLogContextDaemon;
  if (v5 >= v6)
  {
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136315138;
      *(void *)&uint8_t buf[4] = "-[ADCommandCenter(Metrics) _metrics_sendMetricsToServerUntilLimit:requiresUnlimitedPower:requ"
                           "iresActiveSession:purgesOversizedStorage:scheduledActivity:completion:]_block_invoke";
      _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "%s Skipped sending analytics event streams to server because time limit is reached.", buf, 0xCu);
    }
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
  else
  {
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 136315138;
      *(void *)&uint8_t buf[4] = "-[ADCommandCenter(Metrics) _metrics_sendMetricsToServerUntilLimit:requiresUnlimitedPower:requ"
                           "iresActiveSession:purgesOversizedStorage:scheduledActivity:completion:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "%s Begin sending analytics event streams...", buf, 0xCu);
    }
    double v8 = *(double *)(a1 + 48);
    uint64_t v9 = *(unsigned __int8 *)(a1 + 56);
    uint64_t v10 = *(unsigned __int8 *)(a1 + 57);
    uint64_t v11 = *(unsigned __int8 *)(a1 + 58);
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    _OWORD v13[2] = sub_100282CD0;
    v13[3] = &unk_10050D0D0;
    id v12 = *(void **)(a1 + 32);
    id v14 = *(id *)(a1 + 40);
    *(_OWORD *)long long buf = xmmword_1003E2C98;
    long long v16 = unk_1003E2CA8;
    long long v17 = xmmword_1003E2CB8;
    uint64_t v18 = 100;
    objc_msgSend(v12, "_metrics_sendNextAnalyticsEventStreamToServerUntilLimit:requiresUnlimitedPower:requiresActiveSession:prioritizedEventStreamUID:deliveryStreamContinuations:scheduledActivity:completion:", v9, v10, 0, buf, v11, v13, v8);
  }
}

uint64_t sub_100282CD0(uint64_t a1)
{
  uint64_t v2 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v4 = 136315138;
    double v5 = "-[ADCommandCenter(Metrics) _metrics_sendMetricsToServerUntilLimit:requiresUnlimitedPower:requiresActiveSession:"
         "purgesOversizedStorage:scheduledActivity:completion:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s End sending analytics event streams.", (uint8_t *)&v4, 0xCu);
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100282D8C(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = *(void **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_100282E38;
  v6[3] = &unk_10050CAF8;
  id v7 = v4;
  id v8 = v3;
  id v5 = v3;
  [v5 purgeDeletedEventRecordsBeforeOrEqualToDate:v7 completion:v6];
}

void sub_100282E38(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  if ((a2 & 1) == 0)
  {
    double v6 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      uint64_t v7 = *(void *)(a1 + 32);
      int v8 = 136315650;
      uint64_t v9 = "-[ADCommandCenter(Metrics) _metrics_sendMetricsToServerUntilLimit:requiresUnlimitedPower:requiresActiveSessio"
           "n:purgesOversizedStorage:scheduledActivity:completion:]_block_invoke_4";
      __int16 v10 = 2112;
      uint64_t v11 = v7;
      __int16 v12 = 2112;
      id v13 = v5;
      _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "%s Failed to purge deleted analytics events with timestamp before [%@] due to error %@.", (uint8_t *)&v8, 0x20u);
    }
  }
  [*(id *)(a1 + 40) checkpointWithCompletion:&stru_1005090C8];
}

void sub_100282F2C(id a1, BOOL a2, NSError *a3)
{
  int v4 = a3;
  if (!a2)
  {
    id v5 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      int v6 = 136315394;
      uint64_t v7 = "-[ADCommandCenter(Metrics) _metrics_sendMetricsToServerUntilLimit:requiresUnlimitedPower:requiresActiveSessio"
           "n:purgesOversizedStorage:scheduledActivity:completion:]_block_invoke";
      __int16 v8 = 2112;
      uint64_t v9 = v4;
      _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "%s Failed to checkpoint analytics store due to error %@.", (uint8_t *)&v6, 0x16u);
    }
  }
}

void sub_100282FF8(id a1, ADAnalyticsStore *a2)
{
}

id sub_10028308C(uint64_t a1)
{
  uint64_t v2 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v5 = 136315138;
    int v6 = "-[ADCommandCenter(Metrics) _metrics_recordCancellationMetrics]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s ", (uint8_t *)&v5, 0xCu);
  }
  id v3 = +[AFAnalytics sharedAnalytics];
  [v3 logEventWithType:1701 context:0];

  return [*(id *)(a1 + 32) _awdRequestEnd:0];
}

id sub_10028321C(uint64_t a1)
{
  uint64_t v2 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    *(_DWORD *)long long buf = 136315394;
    uint64_t v9 = "-[ADCommandCenter(Metrics) _metrics_recordFailureMetricsForError:]_block_invoke";
    __int16 v10 = 2112;
    uint64_t v11 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s %@", buf, 0x16u);
  }
  int v4 = +[AFAnalytics sharedAnalytics];
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_100283360;
  v6[3] = &unk_10050E0C8;
  id v7 = *(id *)(a1 + 32);
  [v4 logEventWithType:1702 contextProvider:v6];

  return [*(id *)(a1 + 40) _awdRequestEnd:*(void *)(a1 + 32)];
}

uint64_t sub_100283360()
{
  return AFAnalyticsContextCreateWithError();
}

id sub_100283440(uint64_t a1)
{
  if (AFIsInternalInstall() && (uint64_t v2 = *(void *)(a1 + 32)) != 0)
  {
    v12[0] = @"bestTextInterpretation";
    v12[1] = @"resultId";
    uint64_t v3 = *(void *)(a1 + 40);
    v13[0] = v2;
    v13[1] = v3;
    int v4 = v13;
    int v5 = (const __CFString **)v12;
    uint64_t v6 = 2;
  }
  else
  {
    uint64_t v7 = *(void *)(a1 + 40);
    CFStringRef v10 = @"resultId";
    uint64_t v11 = v7;
    int v4 = &v11;
    int v5 = &v10;
    uint64_t v6 = 1;
  }
  __int16 v8 = +[NSDictionary dictionaryWithObjects:v4 forKeys:v5 count:v6];
  return v8;
}

__CFString *sub_100283B50(void *a1)
{
  id v1 = a1;
  id v2 = objc_alloc_init((Class)NSMutableString);
  uint64_t v3 = [v1 utterances];
  int v4 = [v3 firstObject];

  id v28 = v1;
  int v5 = [v1 phrases];
  id v6 = 0;
  if ([v5 count])
  {
    unint64_t v7 = 0;
    uint64_t v29 = v5;
    unsigned int v30 = v4;
    do
    {
      __int16 v8 = [v4 interpretationIndices];
      id v9 = [v8 count];

      if (v7 >= (unint64_t)v9) {
        break;
      }
      CFStringRef v10 = [v5 objectAtIndex:v7];
      uint64_t v11 = [v4 interpretationIndices];
      __int16 v12 = [v11 objectAtIndex:v7];
      id v13 = [v12 unsignedIntegerValue];

      id v14 = [v10 interpretations];
      id v15 = [v14 count];

      if (v13 >= v15)
      {

        id v26 = &stru_10050F7D8;
        goto LABEL_19;
      }
      id v32 = v10;
      long long v16 = [v10 interpretations];
      long long v17 = [v16 objectAtIndex:v13];

      long long v35 = 0u;
      long long v36 = 0u;
      long long v33 = 0u;
      long long v34 = 0u;
      unsigned int v31 = v17;
      uint64_t v18 = [v17 tokens];
      id v19 = [v18 countByEnumeratingWithState:&v33 objects:v37 count:16];
      if (v19)
      {
        id v20 = v19;
        uint64_t v21 = *(void *)v34;
        do
        {
          for (i = 0; i != v20; i = (char *)i + 1)
          {
            __int16 v23 = v6;
            if (*(void *)v34 != v21) {
              objc_enumerationMutation(v18);
            }
            id v24 = *(void **)(*((void *)&v33 + 1) + 8 * i);
            if (([v24 removeSpaceBefore] & 1) == 0
              && ([v23 removeSpaceAfter] & 1) == 0
              && v23)
            {
              [v2 appendString:@" "];
            }
            __int16 v25 = [v24 text];
            [v2 appendString:v25];
            id v6 = v24;
          }
          id v20 = [v18 countByEnumeratingWithState:&v33 objects:v37 count:16];
        }
        while (v20);
      }

      ++v7;
      int v5 = v29;
      int v4 = v30;
    }
    while (v7 < (unint64_t)[v29 count]);
  }
  id v26 = (__CFString *)v2;
LABEL_19:

  return v26;
}

double sub_100283E34(void *a1)
{
  id v1 = [a1 phrases];
  id v2 = [v1 firstObject];

  uint64_t v3 = [v2 interpretations];
  int v4 = [v3 firstObject];

  int v5 = [v4 tokens];
  id v6 = [v5 firstObject];

  [v6 silenceStartTime];
  double v8 = v7;

  return v8;
}

void sub_100284CE0(id *a1, char a2)
{
  int v4 = [a1[4] _queue];
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  void v5[2] = sub_100284DB8;
  v5[3] = &unk_10050C840;
  char v9 = a2;
  id v6 = a1[5];
  id v7 = a1[6];
  id v8 = a1[7];
  dispatch_async(v4, v5);
}

uint64_t sub_100284DB8(uint64_t a1)
{
  int v2 = *(unsigned __int8 *)(a1 + 56);
  uint64_t v3 = *(void *)(a1 + 32);
  int v4 = AFSiriLogContextDaemon;
  BOOL v5 = os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO);
  if (!v2)
  {
    if (v3)
    {
      if (!v5) {
        goto LABEL_15;
      }
      uint64_t v8 = *(void *)(a1 + 40);
      int v14 = 136315650;
      id v15 = "-[ADCommandCenter(Metrics) _sendMetrics:requiresActiveSession:batch:completion:]_block_invoke";
      __int16 v16 = 2112;
      uint64_t v17 = v3;
      __int16 v18 = 2112;
      uint64_t v19 = v8;
      id v7 = "%s Failed to send metrics (%@:%@).";
      goto LABEL_8;
    }
    if (!v5) {
      goto LABEL_15;
    }
    uint64_t v12 = *(void *)(a1 + 40);
    int v14 = 136315394;
    id v15 = "-[ADCommandCenter(Metrics) _sendMetrics:requiresActiveSession:batch:completion:]_block_invoke";
    __int16 v16 = 2112;
    uint64_t v17 = v12;
    id v7 = "%s Failed to send metrics (%@).";
LABEL_13:
    char v9 = v4;
    uint32_t v10 = 22;
    goto LABEL_14;
  }
  if (!v3)
  {
    if (!v5) {
      goto LABEL_15;
    }
    uint64_t v11 = *(void *)(a1 + 40);
    int v14 = 136315394;
    id v15 = "-[ADCommandCenter(Metrics) _sendMetrics:requiresActiveSession:batch:completion:]_block_invoke";
    __int16 v16 = 2112;
    uint64_t v17 = v11;
    id v7 = "%s Sent metrics (%@).";
    goto LABEL_13;
  }
  if (!v5) {
    goto LABEL_15;
  }
  uint64_t v6 = *(void *)(a1 + 40);
  int v14 = 136315650;
  id v15 = "-[ADCommandCenter(Metrics) _sendMetrics:requiresActiveSession:batch:completion:]_block_invoke_2";
  __int16 v16 = 2112;
  uint64_t v17 = v3;
  __int16 v18 = 2112;
  uint64_t v19 = v6;
  id v7 = "%s Sent metrics (%@:%@).";
LABEL_8:
  char v9 = v4;
  uint32_t v10 = 32;
LABEL_14:
  _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, v7, (uint8_t *)&v14, v10);
LABEL_15:
  uint64_t result = *(void *)(a1 + 48);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, *(unsigned __int8 *)(a1 + 56));
  }
  return result;
}

void sub_100285388(uint64_t a1, uint64_t a2)
{
  int v4 = [*(id *)(a1 + 32) _queue];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100285458;
  block[3] = &unk_10050E278;
  uint64_t v10 = a2;
  id v5 = *(id *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 32);
  id v8 = v5;
  uint64_t v9 = v6;
  dispatch_async(v4, block);
}

id sub_10028543C(uint64_t a1, int a2)
{
  int v2 = *(void **)(a1 + 32);
  if (a2) {
    return [v2 invokeWithSignal:1];
  }
  else {
    return [v2 invoke];
  }
}

id sub_100285450(uint64_t a1)
{
  return [*(id *)(a1 + 32) invoke];
}

void sub_100285458(uint64_t a1)
{
  if (*(void *)(a1 + 48) != 1)
  {
    int v2 = (void *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      int v4 = *(void **)(a1 + 32);
      id v5 = v2;
      uint64_t v6 = [v4 category];
      id v7 = [*(id *)(a1 + 32) aceId];
      int v8 = 136315650;
      uint64_t v9 = "-[ADCommandCenter(Metrics) _reallyCommitOrSaveMetrics:]_block_invoke_2";
      __int16 v10 = 2112;
      uint64_t v11 = v6;
      __int16 v12 = 2112;
      id v13 = v7;
      _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "%s Failed to send live metrics (%@:%@), adding to offline metrics manager.", (uint8_t *)&v8, 0x20u);
    }
    uint64_t v3 = [*(id *)(a1 + 40) _offlineMetricsManager];
    [v3 insertMetrics:*(void *)(a1 + 32)];
  }
}

id sub_100285670(id result)
{
  uint64_t v1 = *((void *)result + 4);
  if (!*(unsigned char *)(v1 + 888) || *((unsigned char *)result + 40))
  {
    *(unsigned char *)(v1 + 88_Block_object_dispose(&STACK[0x220], 8) = 1;
    return [*((id *)result + 4) _updateAutoDownloadedVoiceAssetsForOutputVoice];
  }
  return result;
}

void sub_1002859BC(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    int v4 = (void *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      uint64_t v6 = v4;
      id v7 = [v3 localizedDescription];
      int v8 = 136315650;
      uint64_t v9 = "-[ADCommandCenter(OutputVoice) _updateAutoDownloadedVoiceAssetsForOutputVoice]_block_invoke";
      __int16 v10 = 2112;
      uint64_t v11 = v5;
      __int16 v12 = 2112;
      id v13 = v7;
      _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "%s Unable to subscribe voice %@, error: %@", (uint8_t *)&v8, 0x20u);
    }
  }
}

void sub_100286308(id a1)
{
  uint64_t v1 = objc_alloc_init(ADMUXSyncTokenManager);
  uint64_t v2 = qword_1005860A0;
  qword_1005860A0 = (uint64_t)v1;
  _objc_release_x1(v1, v2);
}

void sub_1002865E0(uint64_t a1, void *a2, void *a3)
{
  id v8 = a2;
  id v5 = a3;
  uint64_t v6 = objc_msgSend(*(id *)(a1 + 32), "_ad_finalMetricsContextWithResponse:error:", v8, v5);
  [*(id *)(a1 + 40) logEventWithType:507 context:v6 contextNoCopy:0];
  uint64_t v7 = *(void *)(a1 + 48);
  if (v7) {
    (*(void (**)(uint64_t, id, id))(v7 + 16))(v7, v8, v5);
  }
}

void sub_100286BA4(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) speakableIdentifier];
  id v3 = [*(id *)(*(void *)(a1 + 40) + 32) speakableIdentifier];
  unsigned int v4 = [v2 isEqualToString:v3];

  if (v4)
  {
    [*(id *)(*(void *)(a1 + 40) + 8) cancel];
    uint64_t v5 = *(void *)(a1 + 40);
    uint64_t v6 = *(void **)(v5 + 8);
    *(void *)(v5 + _Block_object_dispose(&STACK[0x220], 8) = 0;

    if (*(void *)(*(void *)(a1 + 40) + 64) == 3) {
      float v7 = 0.4;
    }
    else {
      float v7 = 0.0;
    }
    float v8 = *(float *)(a1 + 56);
    if (v8 <= v7) {
      uint64_t v9 = 1;
    }
    else {
      uint64_t v9 = 2;
    }
    if (AFIsInternalInstall())
    {
      __int16 v10 = [*(id *)(a1 + 40) _remoteOSMService];
      uint64_t v11 = @"Minimal Alert";
      if (v8 > v7) {
        uint64_t v11 = @"Speak Verbosely";
      }
      __int16 v12 = *(void **)(a1 + 32);
      id v13 = v11;
      int v14 = [v12 speakableIdentifier];
      [v10 recordRecommendedAction:v13 forSpeakableId:v14 withModelIdentifier:*(void *)(a1 + 48)];
    }
    if ([*(id *)(a1 + 48) isEqualToString:*(void *)(*(void *)(a1 + 40) + 56)])
    {
      id v15 = *(void **)(a1 + 40);
      [v15 _finishRunningCurrentSpeakableWithResult:v9 error:0];
    }
  }
}

void sub_100286D68(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  if (v2)
  {
    id v3 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      int v4 = 136315394;
      uint64_t v5 = "-[ADOpportuneSpeakingModule _remoteOSMService]_block_invoke";
      __int16 v6 = 2112;
      float v7 = v2;
      _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "%s Failed to communicate with Opportune Speaking Model Service: %@", (uint8_t *)&v4, 0x16u);
    }
  }
}

void sub_100286FB4(_Unwind_Exception *a1)
{
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 72));
  _Unwind_Resume(a1);
}

void sub_100286FE4(uint64_t a1)
{
  uint64_t v2 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
  {
    int v4 = 136315138;
    uint64_t v5 = "-[ADOpportuneSpeakingModule _connectionToOSMService]_block_invoke";
    _os_log_error_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "%s Connection to Opportune Speaking Model Service interrupted", (uint8_t *)&v4, 0xCu);
  }
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _resetConnectionToOSMService];
}

void sub_1002870A8(uint64_t a1)
{
  uint64_t v2 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v4 = 136315138;
    uint64_t v5 = "-[ADOpportuneSpeakingModule _connectionToOSMService]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s Connection to Opportune Speaking Model Service invalidated", (uint8_t *)&v4, 0xCu);
  }
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _resetConnectionToOSMService];
}

void sub_10028770C(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = a1[4];
  float v8 = *(NSObject **)(v7 + 16);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100287964;
  block[3] = &unk_100509510;
  id v14 = v5;
  uint64_t v15 = v7;
  __int16 v10 = (void *)a1[5];
  uint64_t v9 = a1[6];
  id v16 = v6;
  uint64_t v18 = v9;
  id v17 = v10;
  id v11 = v6;
  id v12 = v5;
  dispatch_async(v8, block);
}

void sub_1002877F0(void *a1)
{
  uint64_t v2 = [[ADOpportuneSpeakingVoiceActivityModel alloc] initWithQueue:*(void *)(a1[4] + 16) stateManager:*(void *)(a1[4] + 104)];
  uint64_t v3 = *(void **)(a1[4] + 72);
  int v4 = [(ADOpportuneSpeakingVoiceActivityModel *)v2 modelIdentifier];
  [v3 setObject:v2 forKey:v4];

  id v5 = *(void **)(a1[4] + 80);
  id v6 = [(ADOpportuneSpeakingVoiceActivityModel *)v2 modelIdentifier];
  uint64_t v7 = +[NSNumber numberWithInteger:a1[6]];
  [v5 setObject:v6 forKey:v7];

  float v8 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    int v10 = 136315394;
    id v11 = "-[ADOpportuneSpeakingModule _loadModelWithType:completion:]_block_invoke";
    __int16 v12 = 2112;
    id v13 = v2;
    _os_log_debug_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "%s Loaded model into assistantd: %@", (uint8_t *)&v10, 0x16u);
  }
  uint64_t v9 = a1[5];
  if (v9) {
    (*(void (**)(void))(v9 + 16))();
  }
}

uint64_t sub_100287964(void *a1)
{
  uint64_t v2 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v7 = a1[4];
    int v8 = 136315394;
    uint64_t v9 = "-[ADOpportuneSpeakingModule _loadModelWithType:completion:]_block_invoke_2";
    __int16 v10 = 2112;
    uint64_t v11 = v7;
    _os_log_debug_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s Loaded model on remote: %@", (uint8_t *)&v8, 0x16u);
  }
  [*(id *)(a1[5] + 72) setObject:a1[4] forKey:a1[6]];
  uint64_t v3 = a1[6];
  int v4 = *(void **)(a1[5] + 80);
  id v5 = +[NSNumber numberWithInteger:a1[8]];
  [v4 setObject:v3 forKey:v5];

  uint64_t result = a1[7];
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_100287DD0(uint64_t a1)
{
  unint64_t v2 = _AFPreferencesOpportuneSpeakingModelUsed();
  if (v2 <= 1) {
    uint64_t v3 = 1;
  }
  else {
    uint64_t v3 = v2;
  }
  *(void *)(*(void *)(a1 + 32) + 64) = v3;
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(void **)(v4 + 80);
  id v6 = +[NSNumber numberWithInteger:*(void *)(v4 + 64)];
  uint64_t v7 = [v5 objectForKey:v6];
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void **)(v8 + 56);
  *(void *)(v8 + 56) = v7;

  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  __int16 v10 = objc_msgSend(*(id *)(*(void *)(a1 + 32) + 72), "allValues", 0);
  uint64_t v11 = (char *)[v10 countByEnumeratingWithState:&v15 objects:v19 count:16];
  if (v11)
  {
    __int16 v12 = v11;
    uint64_t v13 = *(void *)v16;
    do
    {
      id v14 = 0;
      do
      {
        if (*(void *)v16 != v13) {
          objc_enumerationMutation(v10);
        }
        (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
        ++v14;
      }
      while (v12 != v14);
      __int16 v12 = (char *)[v10 countByEnumeratingWithState:&v15 objects:v19 count:16];
    }
    while (v12);
  }
}

void sub_100287F2C(uint64_t a1)
{
}

void sub_100287F38(uint64_t a1)
{
}

uint64_t sub_100287F44(uint64_t a1)
{
  *(unsigned char *)(*(void *)(a1 + 32) + 8_Block_object_dispose(&STACK[0x220], 8) = 0;
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
}

id sub_100288240(uint64_t a1)
{
  unint64_t v2 = *(void **)(*(void *)(a1 + 32) + 48);
  id v3 = objc_retainBlock(*(id *)(a1 + 48));
  uint64_t v4 = [*(id *)(a1 + 40) speakableIdentifier];
  [v2 setObject:v3 forKey:v4];

  [*(id *)(*(void *)(a1 + 32) + 40) addObject:*(void *)(a1 + 40)];
  id v5 = *(void **)(a1 + 32);
  return [v5 _processEnqueuedSpeakables];
}

id sub_100288504(uint64_t a1)
{
  unint64_t v2 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v6 = *(void *)(a1 + 40);
    int v7 = 136315394;
    uint64_t v8 = "-[ADOpportuneSpeakingModule _processEnqueuedSpeakables]_block_invoke";
    __int16 v9 = 2048;
    uint64_t v10 = v6;
    _os_log_debug_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s Timeout: could not execute opportune speaking models in time (%f sec)", (uint8_t *)&v7, 0x16u);
  }
  [*(id *)(*(void *)(a1 + 32) + 8) cancel];
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void **)(v3 + 8);
  *(void *)(v3 + _Block_object_dispose(&STACK[0x220], 8) = 0;

  return [*(id *)(a1 + 32) _finishRunningCurrentSpeakableWithResult:0 error:0];
}

void sub_1002885F0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (*(void *)(*(void *)(a1 + 32) + 32))
  {
    objc_msgSend(v3, "startWithDelegate:");
    [v4 setSpeakable:*(void *)(*(void *)(a1 + 32) + 32)];
  }
  else
  {
    id v5 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v6 = *(void *)(a1 + 40);
      int v7 = 136315394;
      uint64_t v8 = "-[ADOpportuneSpeakingModule _processEnqueuedSpeakables]_block_invoke";
      __int16 v9 = 2048;
      uint64_t v10 = v6;
      _os_log_debug_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "%s _currentSpeakable is nil while executing opportune speaking models, this is likely cause by timeout (length: %f sec)", (uint8_t *)&v7, 0x16u);
    }
  }
}

void sub_100288808(void *a1, int a2, int a3)
{
  uint64_t v3 = a1[6];
  if (v3 == 1)
  {
    if (!a2) {
      uint64_t v3 = 2;
    }
    if (a3) {
      uint64_t v5 = v3;
    }
    else {
      uint64_t v5 = 0;
    }
    id v6 = [*(id *)(a1[4] + 72) objectForKey:*(void *)(a1[4] + 56)];
    [v6 recordFeedbackOfType:v5 forSpeakable:a1[5]];
  }
}

void sub_100288B64(id a1)
{
  id v1 = [[ADOpportuneSpeakingModule alloc] _init];
  uint64_t v2 = qword_1005860B0;
  qword_1005860B0 = (uint64_t)v1;
  _objc_release_x1(v1, v2);
}

id sub_100288BA4(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v5 = [objc_alloc((Class)AFVoiceInfo) initWithDictionaryRepresentation:v3];
  }
  else {
    id v5 = 0;
  }
  if (([v5 isValidForSiriSessionLanguage:v4] & 1) == 0)
  {

    id v5 = 0;
  }

  return v5;
}

id sub_100288C4C(void *a1)
{
  id v1 = a1;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    uint64_t v2 = v1;
  }
  else {
    uint64_t v2 = 0;
  }
  id v3 = v2;

  return v3;
}

id sub_100288CA4(void *a1)
{
  id v1 = a1;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v2 = [objc_alloc((Class)AFVoiceInfo) initWithDictionaryRepresentation:v1];
  }
  else {
    id v2 = 0;
  }

  return v2;
}

id sub_100288D1C(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    id v2 = objc_alloc((Class)AFVoiceInfo);
    id v3 = [v1 languageCode];
    id v4 = [v1 gender];
    id v5 = [v1 isCustom];
    id v6 = [v1 name];
    id v7 = [v1 footprint];

    id v8 = [v2 initWithLanguageCode:v3 gender:v4 isCustom:v5 name:v6 footprint:v7 contentVersion:0 masteredVersion:0];
  }
  else
  {
    id v8 = 0;
  }
  return v8;
}

uint64_t sub_100288E0C(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v5 = v4;
  uint64_t v6 = 1;
  if (v3 && v4)
  {
    id v7 = sub_100288FF0(v4);
    id v8 = +[NSSet setWithObjects:@"da-DK", @"en-IE", @"en-ZA", @"fi-FI", @"ko-KR", @"nb-NO", @"tr-TR", @"zh-HK", @"zh-TW", 0];
    __int16 v9 = +[NSSet setWithObjects:@"en-AU", @"en-US", @"en-CA", @"en-GB", 0];
    uint64_t v10 = [v3 languageCode];
    if (([v10 isEqualToString:@"en-IN"] & 1) != 0
      || ([v8 containsObject:v7] & 1) != 0)
    {
      goto LABEL_14;
    }
    if ([v9 containsObject:v7])
    {
      if ([v10 isEqualToString:@"en-ZA"])
      {
LABEL_14:

        goto LABEL_15;
      }
    }
    else if (![v7 isEqualToString:@"en-ZA"])
    {
      if ([v7 isEqualToString:@"en-IE"]
        && ![v10 isEqualToString:@"en-IE"])
      {
        goto LABEL_14;
      }
LABEL_13:
      uint64_t v6 = sub_10028906C(v3, v5);
      goto LABEL_14;
    }
    if ([v10 isEqualToString:@"en-IE"]) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
LABEL_15:

  return v6;
}

id sub_100288FF0(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    uint64_t v2 = [&off_100523E50 objectForKey:v1];
    id v3 = (void *)v2;
    if (v2) {
      id v4 = (void *)v2;
    }
    else {
      id v4 = v1;
    }
    id v5 = v4;
  }
  else
  {
    id v5 = 0;
  }
  return v5;
}

uint64_t sub_10028906C(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v5 = v4;
  uint64_t v6 = 1;
  if (v3 && v4)
  {
    id v7 = [v3 languageCode];
    unsigned int v8 = [v7 isEqualToString:@"en-US"];

    if (!v8) {
      goto LABEL_9;
    }
    __int16 v9 = +[NSMutableSet set];
    uint64_t v10 = +[AFLocalization sharedInstance];
    uint64_t v11 = [v10 voiceNamesForOutputLanguageCode:@"en-US" gender:1];
    __int16 v12 = [v11 firstObject];

    uint64_t v13 = +[AFLocalization sharedInstance];
    id v14 = [v13 voiceNamesForOutputLanguageCode:@"en-US" gender:2];
    long long v15 = [v14 firstObject];

    if (v12) {
      [v9 addObject:v12];
    }
    if (v15) {
      [v9 addObject:v15];
    }
    long long v16 = [v3 name];
    unsigned int v17 = [v9 containsObject:v16];

    if (!v17) {
      uint64_t v6 = 1;
    }
    else {
LABEL_9:
    }
      uint64_t v6 = sub_1002891F0(v3, v5);
  }

  return v6;
}

uint64_t sub_1002891F0(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v5 = v4;
  uint64_t v6 = 1;
  if (v3 && v4)
  {
    id v7 = [v3 languageCode];
    unsigned __int8 v8 = [v7 isEqualToString:@"fi-FI"];

    if (v8) {
      uint64_t v6 = 1;
    }
    else {
      uint64_t v6 = sub_100289280(v3, v5);
    }
  }

  return v6;
}

uint64_t sub_100289280(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v5 = v4;
  uint64_t v6 = 1;
  if (v3)
  {
    if (v4)
    {
      id v7 = [v3 languageCode];
      unsigned int v8 = [v7 isEqualToString:@"en-US"];

      if (!v8) {
        goto LABEL_5;
      }
      __int16 v9 = +[NSMutableSet set];
      uint64_t v10 = +[AFLocalization sharedInstance];
      uint64_t v6 = 1;
      uint64_t v11 = [v10 voiceNamesForOutputLanguageCode:@"en-US" gender:1];
      v23[0] = _NSConcreteStackBlock;
      v23[1] = 3221225472;
      void v23[2] = sub_100289490;
      v23[3] = &unk_100509580;
      id v12 = v9;
      id v24 = v12;
      [v11 enumerateObjectsUsingBlock:v23];

      uint64_t v13 = +[AFLocalization sharedInstance];
      id v14 = [v13 voiceNamesForOutputLanguageCode:@"en-US" gender:2];
      long long v18 = _NSConcreteStackBlock;
      uint64_t v19 = 3221225472;
      id v20 = sub_1002894D0;
      uint64_t v21 = &unk_100509580;
      id v22 = v12;
      id v15 = v12;
      [v14 enumerateObjectsUsingBlock:&v18];

      long long v16 = objc_msgSend(v3, "name", v18, v19, v20, v21);
      LODWORD(v14) = [v15 containsObject:v16];

      if (v14) {
LABEL_5:
      }
        uint64_t v6 = sub_100289510(v3, v5);
    }
  }

  return v6;
}

id sub_100289490(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  id result = [*(id *)(a1 + 32) addObject:a2];
  if (a3 == 1) {
    *a4 = 1;
  }
  return result;
}

id sub_1002894D0(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  id result = [*(id *)(a1 + 32) addObject:a2];
  if (a3 == 1) {
    *a4 = 1;
  }
  return result;
}

uint64_t sub_100289510(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v5 = v4;
  uint64_t v6 = 1;
  if (v3 && v4)
  {
    id v7 = [v3 languageCode];
    unsigned __int8 v8 = [v7 isEqualToString:@"ja-JP"];

    if (v8) {
      uint64_t v6 = 1;
    }
    else {
      uint64_t v6 = sub_1002895A0(v3, v5);
    }
  }

  return v6;
}

uint64_t sub_1002895A0(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v5 = v4;
  uint64_t v6 = 1;
  if (v3 && v4)
  {
    id v7 = +[NSSet setWithObjects:@"ar-SA", @"he-IL", 0];
    unsigned __int8 v8 = [v3 languageCode];
    unsigned __int8 v9 = [v7 containsObject:v8];

    if (v9) {
      uint64_t v6 = 1;
    }
    else {
      uint64_t v6 = sub_10028966C(v3, v5);
    }
  }
  return v6;
}

uint64_t sub_10028966C(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v5 = v4;
  uint64_t v6 = 1;
  if (v3 && v4)
  {
    id v7 = [v3 languageCode];
    unsigned int v8 = [v7 isEqualToString:@"de-DE"];

    if (v8)
    {
      unsigned __int8 v9 = +[NSMutableSet set];
      uint64_t v10 = +[AFLocalization sharedInstance];
      uint64_t v6 = 1;
      uint64_t v11 = [v10 voiceNamesForOutputLanguageCode:@"de-DE" gender:1];
      id v12 = [v11 firstObject];

      [v9 addObject:v12];
      uint64_t v13 = +[AFLocalization sharedInstance];
      uint64_t v14 = [v13 voiceNamesForOutputLanguageCode:@"de-DE" gender:2];
      id v15 = [(id)v14 firstObject];

      [v9 addObject:v15];
      long long v16 = [v3 name];
      LOBYTE(v14) = [v9 containsObject:v16];

      if ((v14 & 1) == 0) {
        goto LABEL_12;
      }
      goto LABEL_11;
    }
    unsigned int v17 = [v3 languageCode];
    unsigned int v18 = [v17 isEqualToString:@"en-GB"];

    if (v18)
    {
      uint64_t v19 = +[NSMutableSet set];
      id v20 = +[AFLocalization sharedInstance];
      uint64_t v21 = [v20 voiceNamesForOutputLanguageCode:@"en-GB" gender:1];
      id v22 = [v21 firstObject];

      [v19 addObject:v22];
      __int16 v23 = +[AFLocalization sharedInstance];
      uint64_t v24 = [v23 voiceNamesForOutputLanguageCode:@"en-GB" gender:2];
      __int16 v25 = [(id)v24 firstObject];

      [v19 addObject:v25];
      id v26 = [v3 name];
      LOBYTE(v24) = [v19 containsObject:v26];

      uint64_t v6 = 1;
      if ((v24 & 1) == 0) {
        goto LABEL_12;
      }
      goto LABEL_11;
    }
    id v27 = [v3 languageCode];
    int v28 = [v27 isEqualToString:@"th-TH"];

    if ((v28 & 1) == 0)
    {
LABEL_11:
      uint64_t v6 = sub_100289930(v3, v5);
      goto LABEL_12;
    }
    uint64_t v6 = 1;
  }
LABEL_12:

  return v6;
}

uint64_t sub_100289930(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v5 = v4;
  uint64_t v6 = 1;
  if (v3 && v4)
  {
    id v7 = [v3 languageCode];
    unsigned __int8 v8 = [v7 isEqualToString:@"ms-MY"];

    if (v8) {
      uint64_t v6 = 1;
    }
    else {
      uint64_t v6 = sub_1002899C0(v3, v5);
    }
  }

  return v6;
}

uint64_t sub_1002899C0(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v5 = v4;
  uint64_t v6 = 1;
  if (v3)
  {
    if (v4)
    {
      id v7 = [v3 languageCode];
      unsigned int v8 = [v7 isEqualToString:@"zh-CN"];

      if (!v8) {
        goto LABEL_5;
      }
      unsigned __int8 v9 = +[NSMutableSet set];
      uint64_t v10 = +[AFLocalization sharedInstance];
      uint64_t v11 = [v10 voiceNamesForOutputLanguageCode:@"zh-CN" gender:2];
      id v12 = [v11 firstObject];

      [v9 addObject:v12];
      uint64_t v13 = +[AFLocalization sharedInstance];
      uint64_t v6 = 1;
      uint64_t v14 = [v13 voiceNamesForOutputLanguageCode:@"zh-CN" gender:1];
      id v15 = [v14 firstObject];

      [v9 addObject:v15];
      long long v16 = [v3 name];
      LODWORD(v13) = [v9 containsObject:v16];

      if (v13)
      {
LABEL_5:
        id v17 = v3;
        unsigned int v18 = [v17 languageCode];
        if ([v18 isEqualToString:@"vi-VN"])
        {
          uint64_t v6 = 1;
        }
        else
        {
          uint64_t v19 = [v17 languageCode];
          uint64_t v6 = (uint64_t)[v19 isEqualToString:@"vi-VN-u-sd-vnct"];
        }
      }
    }
  }

  return v6;
}

uint64_t sub_100289B80(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v5 = v4;
  uint64_t v6 = 1;
  if (v3 && v4)
  {
    id v7 = +[NSSet setWithObjects:@"fi-FI", @"ko-KR", @"tr-TR", 0];
    unsigned int v8 = [v3 languageCode];
    unsigned __int8 v9 = [v8 isEqualToString:@"en-IN"];

    if ((v9 & 1) != 0
      || ([v3 languageCode],
          uint64_t v10 = objc_claimAutoreleasedReturnValue(),
          unsigned __int8 v11 = [v7 containsObject:v10],
          v10,
          (v11 & 1) != 0))
    {
      uint64_t v6 = 1;
    }
    else
    {
      uint64_t v6 = sub_10028906C(v3, v5);
    }
  }
  return v6;
}

uint64_t sub_100289C80(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v5 = v4;
  uint64_t v6 = 1;
  if (v3 && v4)
  {
    id v7 = +[NSSet setWithObjects:@"fi-FI", @"ko-KR", @"tr-TR", 0];
    unsigned int v8 = [v3 languageCode];
    unsigned __int8 v9 = [v7 containsObject:v8];

    if (v9) {
      uint64_t v6 = 1;
    }
    else {
      uint64_t v6 = sub_10028906C(v3, v5);
    }
  }
  return v6;
}

id sub_100289D58(void *a1)
{
  id v1 = sub_100288FF0(a1);
  uint64_t v2 = v1;
  if (v1)
  {
    id v3 = v1;
    id v4 = +[NSSet setWithObjects:@"ar-SA", @"en-GB", @"fr-FR", @"nl-NL", 0];
    if ([v4 containsObject:v3]) {
      uint64_t v5 = 1;
    }
    else {
      uint64_t v5 = 2;
    }
    id v6 = [objc_alloc((Class)AFVoiceInfo) initWithLanguageCode:v3 gender:v5 isCustom:1];
  }
  else
  {
    id v6 = 0;
  }

  return v6;
}

id sub_100289E38(void *a1)
{
  id v1 = sub_100289D58(a1);
  uint64_t v2 = (uint64_t)[v1 gender];
  id v3 = [v1 isCustom];
  id v4 = +[AFLocalization sharedInstance];
  uint64_t v5 = [v1 languageCode];
  id v6 = [v4 voiceNamesForOutputLanguageCode:v5 gender:v2];
  id v7 = [v6 firstObject];

  unsigned int v8 = [v1 languageCode];
  LODWORD(v5) = [v8 isEqualToString:@"fi-FI"];

  if (v5)
  {

    id v3 = 0;
    id v7 = @"satu";
    uint64_t v2 = 2;
  }
  id v9 = objc_alloc((Class)AFVoiceInfo);
  uint64_t v10 = [v1 languageCode];
  id v11 = [v9 initWithLanguageCode:v10 gender:v2 isCustom:v3 name:v7 footprint:0 contentVersion:0 masteredVersion:0];

  return v11;
}

id sub_100289F8C(void *a1)
{
  id v1 = sub_100289E38(a1);
  uint64_t v2 = (uint64_t)[v1 gender];
  id v3 = +[AFLocalization sharedInstance];
  id v4 = [v1 languageCode];
  uint64_t v5 = [v3 voiceNamesForOutputLanguageCode:v4 gender:v2];
  id v6 = [v5 firstObject];

  id v7 = [v1 languageCode];
  LODWORD(v4) = [v7 isEqualToString:@"ja-JP"];

  if (v4)
  {

    BOOL v8 = v2 == 2;
    if (v2 == 2) {
      uint64_t v2 = 2;
    }
    else {
      uint64_t v2 = 1;
    }
    if (v8) {
      id v6 = @"oren";
    }
    else {
      id v6 = @"hattori";
    }
  }
  id v9 = objc_alloc((Class)AFVoiceInfo);
  uint64_t v10 = [v1 languageCode];
  id v11 = objc_msgSend(v9, "initWithLanguageCode:gender:isCustom:name:footprint:contentVersion:masteredVersion:", v10, v2, objc_msgSend(v1, "isCustom"), v6, 0, 0, 0);

  return v11;
}

id sub_10028A0E4(void *a1)
{
  id v1 = sub_100289F8C(a1);
  uint64_t v2 = (uint64_t)[v1 gender];
  id v3 = [v1 isCustom];
  id v4 = +[AFLocalization sharedInstance];
  uint64_t v5 = [v1 languageCode];
  id v6 = [v4 voiceNamesForOutputLanguageCode:v5 gender:v2];
  id v7 = [v6 firstObject];

  BOOL v8 = [v1 languageCode];
  LOBYTE(v5) = [v8 isEqualToString:@"ar-SA"];

  if (v5)
  {
    CFStringRef v9 = @"maged";
    uint64_t v2 = 1;
  }
  else
  {
    uint64_t v10 = [v1 languageCode];
    unsigned int v11 = [v10 isEqualToString:@"he-IL"];

    if (!v11) {
      goto LABEL_6;
    }
    CFStringRef v9 = @"carmit";
    uint64_t v2 = 2;
  }

  id v3 = 0;
  id v7 = (void *)v9;
LABEL_6:
  id v12 = objc_alloc((Class)AFVoiceInfo);
  uint64_t v13 = [v1 languageCode];
  id v14 = [v12 initWithLanguageCode:v13 gender:v2 isCustom:v3 name:v7 footprint:0 contentVersion:0 masteredVersion:0];

  return v14;
}

id sub_10028A274(void *a1)
{
  id v1 = sub_10028A0E4(a1);
  uint64_t v2 = (uint64_t)[v1 gender];
  id v3 = [v1 isCustom];
  id v4 = +[AFLocalization sharedInstance];
  uint64_t v5 = [v1 languageCode];
  id v6 = [v4 voiceNamesForOutputLanguageCode:v5 gender:v2];
  id v7 = [v6 firstObject];

  BOOL v8 = [v1 languageCode];
  LODWORD(v5) = [v8 isEqualToString:@"de-DE"];

  if (v5)
  {

    BOOL v9 = v2 == 1;
    if (v2 == 1) {
      uint64_t v2 = 1;
    }
    else {
      uint64_t v2 = 2;
    }
    CFStringRef v10 = @"helena";
    CFStringRef v11 = @"martin";
LABEL_11:
    if (v9) {
      id v7 = (__CFString *)v11;
    }
    else {
      id v7 = (__CFString *)v10;
    }
    goto LABEL_14;
  }
  id v12 = [v1 languageCode];
  unsigned int v13 = [v12 isEqualToString:@"en-GB"];

  if (v13)
  {

    BOOL v9 = v2 == 2;
    if (v2 == 2) {
      uint64_t v2 = 2;
    }
    else {
      uint64_t v2 = 1;
    }
    CFStringRef v10 = @"arthur";
    CFStringRef v11 = @"martha";
    goto LABEL_11;
  }
  unsigned int v18 = [v1 languageCode];
  unsigned int v19 = [v18 isEqualToString:@"th-TH"];

  if (v19)
  {

    id v3 = 0;
    id v7 = @"kanya";
    uint64_t v2 = 2;
  }
LABEL_14:
  id v14 = objc_alloc((Class)AFVoiceInfo);
  id v15 = [v1 languageCode];
  id v16 = [v14 initWithLanguageCode:v15 gender:v2 isCustom:v3 name:v7 footprint:0 contentVersion:0 masteredVersion:0];

  return v16;
}

id sub_10028A464(void *a1)
{
  id v1 = sub_10028A274(a1);
  uint64_t v2 = (uint64_t)[v1 gender];
  id v3 = [v1 isCustom];
  id v4 = +[AFLocalization sharedInstance];
  uint64_t v5 = [v1 languageCode];
  id v6 = [v4 voiceNamesForOutputLanguageCode:v5 gender:v2];
  id v7 = [v6 firstObject];

  BOOL v8 = [v1 languageCode];
  LODWORD(v5) = [v8 isEqualToString:@"ms-MY"];

  if (v5)
  {

    id v3 = 0;
    id v7 = @"amira";
    uint64_t v2 = 2;
  }
  id v9 = objc_alloc((Class)AFVoiceInfo);
  CFStringRef v10 = [v1 languageCode];
  id v11 = [v9 initWithLanguageCode:v10 gender:v2 isCustom:v3 name:v7 footprint:0 contentVersion:0 masteredVersion:0];

  return v11;
}

id sub_10028A5B8(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  uint64_t v6 = kAFOutputVoice;
  id v7 = a1;
  if ([a3 isEqualToString:v6])
  {
    BOOL v8 = sub_100288CA4(v7);

    id v9 = sub_100288CA4(v5);
    CFStringRef v10 = [v8 languageCode];
    id v11 = [v9 languageCode];
    if ([v10 isEqualToString:v11])
    {
      id v12 = [v8 gender];
      BOOL v13 = v12 == [v9 gender];
    }
    else
    {
      BOOL v13 = 0;
    }

    uint64_t v15 = [v8 name];
    if (v15)
    {
      id v16 = (void *)v15;
      id v17 = [v9 name];

      if (v17) {
        id v14 = 0;
      }
      else {
        id v14 = (id)v13;
      }
      if (v17 && v13)
      {
        unsigned int v18 = [v8 name];
        unsigned int v19 = [v9 name];
        id v14 = [v18 isEqualToString:v19];
      }
    }
    else
    {
      id v14 = (id)v13;
    }
  }
  else
  {
    id v14 = [v7 isEqual:v5];
    BOOL v8 = v7;
  }

  return v14;
}

void sub_10028A740(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = sub_10028A904(a2);
  id v5 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v10 = 136315394;
    id v11 = "_ADCloudKitKeyValueStoreSaveValueForKey";
    __int16 v12 = 2112;
    BOOL v13 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "%s Saving key to local prefs: %@", (uint8_t *)&v10, 0x16u);
  }
  if ([v4 isEqualToString:kAFSessionLanguage])
  {
    uint64_t v6 = +[ADCommandCenter sharedCommandCenter];
    [v6 setQueuedLanguageCode:v3];

    id v7 = +[AFAnalytics sharedAnalytics];
    [v7 logEventWithType:3201 context:&off_100523E78];
  }
  else
  {
    if (![v4 isEqualToString:kAFOutputVoice])
    {
      _AFBackedUpPreferencesSetValueForKey();
      goto LABEL_9;
    }
    id v7 = sub_100288CA4(v3);
    BOOL v8 = +[ADCommandCenter sharedCommandCenter];
    [v8 setQueuedOutputVoice:v7];

    id v9 = +[AFAnalytics sharedAnalytics];
    [v9 logEventWithType:3202 context:&off_100523EA0];
  }
LABEL_9:
}

id sub_10028A904(void *a1)
{
  id v1 = a1;
  if ([v1 isEqualToString:@"Output Voice v12"]) {
    uint64_t v2 = (void *)kAFOutputVoice;
  }
  else {
    uint64_t v2 = v1;
  }
  id v3 = v2;

  return v3;
}

id sub_10028A958()
{
  if ((AFIsHorseman() & 1) != 0 || AFIsATV())
  {
    uint64_t v2 = 0;
LABEL_4:
    +[NSSet setWithObjects:@"User Identifier", @"Logging User Identifier", v2, v3, v4, v5, v6, v7];
    goto LABEL_5;
  }
  if (AFIsVision())
  {
    uint64_t v3 = kAFSpokenNotificationSkipTriggerlessReplyConfirmation;
    uint64_t v4 = 0;
    uint64_t v2 = kAFSpokenNotificationTemporaryMuteEndDateKey;
    goto LABEL_4;
  }
  +[NSSet setWithObjects:kAFOutputVoice, kAFSessionLanguage, @"User Identifier", @"Logging User Identifier", kAFSpokenNotificationTemporaryMuteEndDateKey, kAFSpokenNotificationSkipTriggerlessReplyConfirmation, @"MultiUser VoiceIdentification Enabled", 0];
  id v0 = LABEL_5:;
  return v0;
}

id sub_10028AA54()
{
  id v0 = _AFBackedUpPreferencesKeyList();
  id v1 = +[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", [v0 count]);
  uint64_t v2 = sub_10028A958();
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  id v3 = v0;
  id v4 = [v3 countByEnumeratingWithState:&v22 objects:v27 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v23;
    do
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(void *)v23 != v6) {
          objc_enumerationMutation(v3);
        }
        uint64_t v8 = *(void *)(*((void *)&v22 + 1) + 8 * i);
        if ([v2 containsObject:v8]) {
          [v1 addObject:v8];
        }
      }
      id v5 = [v3 countByEnumeratingWithState:&v22 objects:v27 count:16];
    }
    while (v5);
  }

  id v9 = objc_msgSend(objc_alloc((Class)NSMutableDictionary), "initWithCapacity:", objc_msgSend(v1, "count"));
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  id v10 = v1;
  id v11 = [v10 countByEnumeratingWithState:&v18 objects:v26 count:16];
  if (v11)
  {
    id v12 = v11;
    uint64_t v13 = *(void *)v19;
    do
    {
      for (j = 0; j != v12; j = (char *)j + 1)
      {
        if (*(void *)v19 != v13) {
          objc_enumerationMutation(v10);
        }
        uint64_t v15 = *(void **)(*((void *)&v18 + 1) + 8 * (void)j);
        sub_10028A904(v15);
        id v16 = _AFBackedUpPreferencesValueForKey();
        if (v16) {
          objc_msgSend(v9, "setObject:forKey:", v16, v15, (void)v18);
        }
      }
      id v12 = [v10 countByEnumeratingWithState:&v18 objects:v26 count:16];
    }
    while (v12);
  }

  return v9;
}

id sub_10028AC94()
{
  id v0 = [objc_alloc((Class)NSMutableDictionary) initWithCapacity:2];
  id v1 = sub_10028A958();
  if ([v1 containsObject:@"User Identifier"])
  {
    uint64_t v2 = +[ADPreferences sharedPreferences];
    id v3 = [v2 sharedUserIdentifier];

    if (v3) {
      [v0 setObject:v3 forKey:@"User Identifier"];
    }
  }
  if ([v1 containsObject:@"Logging User Identifier"])
  {
    id v4 = +[ADPreferences sharedPreferences];
    id v5 = [v4 loggingSharedUserIdentifier];

    if (v5) {
      [v0 setObject:v5 forKey:@"Logging User Identifier"];
    }
  }
  return v0;
}

id sub_10028AD98()
{
  id v0 = objc_opt_new();
  id v1 = sub_10028A958();
  sub_10028A904(kAFModificationDates);
  uint64_t v2 = _AFBackedUpPreferencesValueForKey();
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    long long v13 = 0u;
    long long v14 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    id v3 = v2;
    id v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      id v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        for (i = 0; i != v5; i = (char *)i + 1)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          uint64_t v8 = *(void *)(*((void *)&v11 + 1) + 8 * i);
          if (objc_msgSend(v1, "containsObject:", v8, (void)v11))
          {
            id v9 = [v3 objectForKey:v8];
            objc_opt_class();
            if (objc_opt_isKindOfClass()) {
              [v0 setObject:v9 forKey:v8];
            }
          }
        }
        id v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);
    }
  }
  return v0;
}

id sub_10028B1E0(uint64_t a1, void *a2)
{
  return _[a2 setSnapshot:*(void *)(a1 + 32)];
}

uint64_t sub_10028B620(void *a1)
{
  uint64_t v2 = a1[4];
  if ((*(unsigned char *)(v2 + 32) & 9) != 0)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(v2 + 8));
    [WeakRetained sensitiveCondition:2 startedAt:a1[6]];
  }
  uint64_t result = a1[5];
  if (result)
  {
    id v5 = *(uint64_t (**)(void))(result + 16);
    return v5();
  }
  return result;
}

uint64_t sub_10028B8FC(uint64_t result)
{
  *(void *)(*(void *)(result + 32) + 32) = *(void *)(result + 40);
  return result;
}

void sub_10028BE28(uint64_t a1, void *a2)
{
  id v3 = *(void **)(*(void *)(a1 + 32) + 32);
  id v4 = a2;
  objc_msgSend(v4, "setCallState:", objc_msgSend(v3, "callState"));
  [v4 setOnSpeaker:*(unsigned __int8 *)(a1 + 40)];
  objc_msgSend(v4, "setIsDropInCall:", objc_msgSend(*(id *)(*(void *)(a1 + 32) + 32), "isDropInCall"));
}

void sub_10028C098(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 40);
  id v4 = a2;
  [v4 setCallState:v3];
  objc_msgSend(v4, "setOnSpeaker:", objc_msgSend(*(id *)(*(void *)(a1 + 32) + 32), "onSpeaker"));
  objc_msgSend(v4, "setIsDropInCall:", objc_msgSend(*(id *)(*(void *)(a1 + 32) + 32), "isDropInCall"));
}

void sub_10028C118(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 40);
  id v4 = a2;
  [v4 setCallState:v3];
  objc_msgSend(v4, "setOnSpeaker:", objc_msgSend(*(id *)(*(void *)(a1 + 32) + 32), "onSpeaker"));
  [v4 setIsDropInCall:*(unsigned __int8 *)(a1 + 48)];
}

void sub_10028C2C8(id a1)
{
  id v1 = objc_alloc_init((Class)AFHomeAnnouncementObserver);
  uint64_t v2 = qword_1005860C0;
  qword_1005860C0 = (uint64_t)v1;
  _objc_release_x1(v1, v2);
}

void sub_10028C46C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v6 = 136315394;
    uint64_t v7 = "-[ADPostSiriEngagementService runMaintenanceWorkWithCompletion:]_block_invoke";
    __int16 v8 = 2112;
    id v9 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%s ActivityDispatcher completion Error status: %@ (null is good)", (uint8_t *)&v6, 0x16u);
  }
  uint64_t v5 = *(void *)(a1 + 32);
  if (v5) {
    (*(void (**)(void))(v5 + 16))();
  }
}

uint64_t sub_10028C5F0(uint64_t a1)
{
  uint64_t v2 = objc_opt_new();
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void *)(v3 + 56);
  *(void *)(v3 + 56) = v2;
  return _objc_release_x1(v2, v4);
}

void sub_10028C9E8(uint64_t a1, char a2, void *a3, void *a4)
{
  id v9 = a3;
  id v7 = a4;
  if (a2)
  {
    uint64_t v8 = *(void *)(a1 + 48);
    if (v8) {
      (*(void (**)(uint64_t, id, id))(v8 + 16))(v8, v9, v7);
    }
  }
  else
  {
    [*(id *)(a1 + 32) _amosSADomainObjectPunchOut:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];
  }
}

void sub_10028CC50(uint64_t a1, char a2, void *a3, void *a4)
{
  id v9 = a3;
  id v7 = a4;
  if (a2)
  {
    uint64_t v8 = *(void *)(a1 + 48);
    if (v8) {
      (*(void (**)(uint64_t, id, id))(v8 + 16))(v8, v9, v7);
    }
  }
  else
  {
    [*(id *)(a1 + 32) _amosSADomainObjectCommit:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];
  }
}

void sub_10028D020(uint64_t a1, void *a2, int a3)
{
  id v5 = a2;
  id v6 = v5;
  if (!a3)
  {
    if ([*(id *)(a1 + 32) isAMOSIdentifier])
    {
      id v7 = *(void **)(a1 + 32);
      uint64_t v8 = [v5 identifier];
      LODWORD(v7) = [v7 isEqual:v8];

      if (v7)
      {
        id v9 = [*(id *)(a1 + 32) absoluteString];
        id v10 = [v9 stringByAppendingString:@"?committed=yes"];

        id v11 = [objc_alloc((Class)NSURL) initWithString:v10];
        [v5 setIdentifier:v11];
        [*(id *)(a1 + 40) setIdentifier:v11];
        long long v12 = *(void **)(a1 + 48);
        long long v13 = [*(id *)(a1 + 40) dictionary];
        long long v14 = [v11 absoluteString];
        [v12 setDomainObject:v13 forKey:v14];

        uint64_t v15 = AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
        {
          uint64_t v16 = *(void *)(a1 + 40);
          int v20 = 136315394;
          long long v21 = "-[ADCommandCenter(AMOS) _amosSADomainObjectCommit:completion:]_block_invoke";
          __int16 v22 = 2112;
          uint64_t v23 = v16;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "%s Keeping committed object around %@", (uint8_t *)&v20, 0x16u);
        }
      }
    }
    [*(id *)(a1 + 48) setDomainObject:0 forKey:*(void *)(a1 + 56)];
    id v6 = objc_alloc_init((Class)SADomainObjectCommitCompleted);
    id v17 = [v5 identifier];
    [v6 setIdentifier:v17];

    long long v18 = [*(id *)(a1 + 64) aceId];
    [v6 setRefId:v18];
  }
  uint64_t v19 = *(void *)(a1 + 72);
  if (v19) {
    (*(void (**)(uint64_t, id, void))(v19 + 16))(v19, v6, 0);
  }
}

void sub_10028D320(uint64_t a1, char a2, void *a3, void *a4)
{
  id v9 = a3;
  id v7 = a4;
  if (a2)
  {
    uint64_t v8 = *(void *)(a1 + 48);
    if (v8) {
      (*(void (**)(uint64_t, id, id))(v8 + 16))(v8, v9, v7);
    }
  }
  else
  {
    [*(id *)(a1 + 32) _amosSADomainObjectDelete:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];
  }
}

uint64_t sub_10028D634(uint64_t a1, uint64_t a2, int a3)
{
  if (a3) {
    id v4 = [objc_alloc((Class)SACommandFailed) initWithReason:@"Failed to receive object from service"];
  }
  else {
    id v4 = objc_alloc_init((Class)SADomainObjectDeleteCompleted);
  }
  id v5 = v4;
  uint64_t v6 = *(void *)(a1 + 32);
  if (v6)
  {
    id v8 = v5;
    uint64_t v6 = (*(uint64_t (**)(void))(v6 + 16))();
    id v5 = v8;
  }
  return _objc_release_x1(v6, v5);
}

void sub_10028D784(uint64_t a1, char a2, void *a3, void *a4)
{
  id v9 = a3;
  id v7 = a4;
  if (a2)
  {
    uint64_t v8 = *(void *)(a1 + 48);
    if (v8) {
      (*(void (**)(uint64_t, id, id))(v8 + 16))(v8, v9, v7);
    }
  }
  else
  {
    [*(id *)(a1 + 32) _amosSADomainObjectCancel:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];
  }
}

void sub_10028D95C(uint64_t a1, char a2, void *a3, void *a4)
{
  id v9 = a3;
  id v7 = a4;
  if (a2)
  {
    uint64_t v8 = *(void *)(a1 + 48);
    if (v8) {
      (*(void (**)(uint64_t, id, id))(v8 + 16))(v8, v9, v7);
    }
  }
  else
  {
    [*(id *)(a1 + 32) _amosSADomainObjectUpdate:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];
  }
}

void sub_10028DD8C(uint64_t a1, void *a2, int a3)
{
  id v5 = a2;
  uint64_t v6 = v5;
  if (a3)
  {
    id v7 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      int v24 = 136315394;
      long long v25 = "-[ADCommandCenter(AMOS) _updateObjectFromService:sadIdentifier:completion:]_block_invoke";
      __int16 v26 = 1026;
      LODWORD(v27) = a3;
      _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "%s Failed to retrieve object from service. status: %{public}d", (uint8_t *)&v24, 0x12u);
    }
    id v8 = [objc_alloc((Class)SACommandFailed) initWithReason:@"Failed to retrieve object from service"];
  }
  else
  {
    id v9 = [v5 objects];
    if ([v9 count] == (id)1)
    {
      id v10 = [v9 lastObject];
      id v11 = [v10 identifier];
      long long v12 = [v11 absoluteString];

      long long v13 = AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
      {
        int v24 = 136315394;
        long long v25 = "-[ADCommandCenter(AMOS) _updateObjectFromService:sadIdentifier:completion:]_block_invoke";
        __int16 v26 = 2112;
        id v27 = v10;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "%s Successfully retrieved object from service %@", (uint8_t *)&v24, 0x16u);
      }
      long long v14 = [*(id *)(a1 + 32) setFields];
      uint64_t v15 = [*(id *)(a1 + 32) addFields];
      uint64_t v16 = [*(id *)(a1 + 32) removeFields];
      [v10 updateUsingSet:v14 add:v15 remove:v16];

      id v17 = sub_1001FB43C();
      [v10 setIdentifier:v17];
      long long v18 = AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
      {
        int v24 = 136315394;
        long long v25 = "-[ADCommandCenter(AMOS) _updateObjectFromService:sadIdentifier:completion:]_block_invoke";
        __int16 v26 = 2112;
        id v27 = v10;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "%s Updated retrieved object to %@", (uint8_t *)&v24, 0x16u);
      }
      uint64_t v19 = [*(id *)(a1 + 40) _domainObjectCache];
      int v20 = [v10 dictionary];
      long long v21 = [v17 absoluteString];
      [v19 setDomainObject:v20 withOldId:v12 forKey:v21];

      id v8 = objc_alloc_init((Class)SADomainObjectUpdateCompleted);
      [v8 setIdentifier:v17];
    }
    else
    {
      __int16 v22 = AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
      {
        int v24 = 136315394;
        long long v25 = "-[ADCommandCenter(AMOS) _updateObjectFromService:sadIdentifier:completion:]_block_invoke";
        __int16 v26 = 2112;
        id v27 = v9;
        _os_log_error_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "%s Unexpected count of retrieved objects: %@", (uint8_t *)&v24, 0x16u);
      }
      id v8 = [objc_alloc((Class)SACommandFailed) initWithReason:@"Error retrieving object from service"];
    }
  }
  uint64_t v23 = *(void *)(a1 + 48);
  if (v23) {
    (*(void (**)(uint64_t, id, void))(v23 + 16))(v23, v8, 0);
  }
}

void sub_10028E1F4(uint64_t a1, char a2, void *a3, void *a4)
{
  id v9 = a3;
  id v7 = a4;
  if (a2)
  {
    uint64_t v8 = *(void *)(a1 + 48);
    if (v8) {
      (*(void (**)(uint64_t, id, id))(v8 + 16))(v8, v9, v7);
    }
  }
  else
  {
    [*(id *)(a1 + 32) _amosSADomainObjectRetrieve:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];
  }
}

void sub_10028E668(uint64_t a1, void *a2, int a3)
{
  id v5 = a2;
  id v10 = v5;
  if (a3)
  {
    id v6 = v5;
  }
  else
  {
    id v7 = *(void **)(a1 + 32);
    uint64_t v8 = [v5 objects];
    [v7 addObjectsFromArray:v8];

    id v6 = objc_alloc_init((Class)SADomainObjectRetrieveCompleted);
    [v6 setObjects:*(void *)(a1 + 32)];
  }
  uint64_t v9 = *(void *)(a1 + 40);
  if (v9) {
    (*(void (**)(uint64_t, id, void))(v9 + 16))(v9, v6, 0);
  }
}

void sub_10028E7E8(uint64_t a1, char a2, void *a3, void *a4)
{
  id v9 = a3;
  id v7 = a4;
  if (a2)
  {
    uint64_t v8 = *(void *)(a1 + 48);
    if (v8) {
      (*(void (**)(uint64_t, id, id))(v8 + 16))(v8, v9, v7);
    }
  }
  else
  {
    [*(id *)(a1 + 32) _amosSADomainObjectCreate:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];
  }
}

void sub_10028EB28(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = [v5 encodedClassName];
  uint64_t v8 = [*(id *)(a1 + 32) expectedResponseClassName];
  unsigned int v9 = [v7 isEqualToString:v8];

  if (v9)
  {
    id v10 = +[AceObject aceObjectWithGenericCommand:v5];
    id v11 = [*(id *)(a1 + 32) aceId];
    [v10 setRefId:v11];

    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
  else
  {
    id v12 = objc_alloc_init((Class)SACommandFailed);
    long long v13 = [v12 encodedClassName];
    unsigned int v14 = [v7 isEqualToString:v13];

    if (v14)
    {
      id v15 = v5;
    }
    else
    {
      uint64_t v16 = (void *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
      {
        long long v21 = *(void **)(a1 + 32);
        __int16 v22 = v16;
        uint64_t v23 = [v21 expectedResponseClassName];
        int v24 = 136315906;
        long long v25 = "-[ADCommandCenter(AMOS) _sendAMOSCommandToService:responseHandler:]_block_invoke";
        __int16 v26 = 2114;
        id v27 = v23;
        __int16 v28 = 2114;
        uint64_t v29 = v7;
        __int16 v30 = 2114;
        id v31 = v6;
        _os_log_error_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "%s Unexpected response from service. Expecting %{public}@, got %{public}@ error: %{public}@", (uint8_t *)&v24, 0x2Au);
      }
      id v15 = v12;
      objc_opt_class();
      if (objc_opt_isKindOfClass()) {
        id v17 = v15;
      }
      else {
        id v17 = 0;
      }

      [v17 setReason:@"Unexpected response from service"];
    }
    id v18 = v15;
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      id v19 = v18;
    }
    else {
      id v19 = 0;
    }

    int v20 = [*(id *)(a1 + 32) aceId];
    [v19 setRefId:v20];

    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

void sub_10028F114(void *a1, char a2, void *a3, void *a4)
{
  id v7 = a3;
  id v8 = a4;
  if (a2)
  {
    id v9 = v7;
  }
  else
  {
    id v10 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      uint64_t v13 = a1[4];
      uint64_t v14 = a1[5];
      int v15 = 136315650;
      uint64_t v16 = "-[ADCommandCenter(AMOS) _handleSADOCommandIfServiceDoesNotUseAMOS:allowInterposing:completion:]_block_invoke";
      __int16 v17 = 2112;
      uint64_t v18 = v13;
      __int16 v19 = 2114;
      uint64_t v20 = v14;
      _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "%s Couldn't send SADOCommand %@ to service %{public}@", (uint8_t *)&v15, 0x20u);
    }
    id v9 = objc_alloc_init((Class)SACommandIgnored);
  }
  id v11 = v9;
  uint64_t v12 = a1[6];
  if (v12) {
    (*(void (**)(uint64_t, uint64_t, void *, id))(v12 + 16))(v12, 1, v11, v8);
  }
}

void sub_10028F4A0(uint64_t a1, void *a2, void *a3)
{
  unint64_t v5 = a2;
  unint64_t v6 = a3;
  if (v5 | v6)
  {
    uint64_t v7 = *(void *)(a1 + 48);
    if (v7) {
      (*(void (**)(uint64_t, uint64_t, unint64_t, unint64_t))(v7 + 16))(v7, 1, v5, v6);
    }
  }
  else
  {
    id v8 = *(void **)(a1 + 32);
    uint64_t v9 = *(void *)(a1 + 40);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_10028F58C;
    v10[3] = &unk_10050CF00;
    id v11 = *(id *)(a1 + 48);
    [v8 _handleCommandInAMOS:v9 completion:v10];
  }
}

uint64_t sub_10028F58C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(result + 16))(result, 1, a2, a3);
  }
  return result;
}

uint64_t sub_10029065C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10029066C(uint64_t a1)
{
}

void sub_100290674(uint64_t a1)
{
  uint64_t v2 = *(id **)(a1 + 32);
  uint64_t v3 = [v2[3] sharedUserId];
  id v4 = [v2 _confidenceScoreForSharedUserID:v3 expectedSpeakerSharedUserID:*(void *)(a1 + 40) expectedSpeakerConfidenceScore:*(void *)(a1 + 64) confidenceScores:*(void *)(a1 + 48)];

  [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) addObject:v4];
  uint64_t v5 = *(void *)(a1 + 32);
  unint64_t v6 = *(void **)(v5 + 216);
  if (v6)
  {
    uint64_t v7 = [v6 sharedUserID];
    id v8 = [(id)v5 _confidenceScoreForSharedUserID:v7 expectedSpeakerSharedUserID:*(void *)(a1 + 40) expectedSpeakerConfidenceScore:*(void *)(a1 + 64) confidenceScores:*(void *)(a1 + 48)];

    [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) addObject:v8];
    uint64_t v5 = *(void *)(a1 + 32);
  }
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  id v9 = *(id *)(v5 + 208);
  id v10 = [v9 countByEnumeratingWithState:&v15 objects:v19 count:16];
  if (v10)
  {
    id v11 = v10;
    uint64_t v12 = *(void *)v16;
    do
    {
      uint64_t v13 = 0;
      do
      {
        if (*(void *)v16 != v12) {
          objc_enumerationMutation(v9);
        }
        uint64_t v14 = objc_msgSend(*(id *)(a1 + 32), "_confidenceScoreForSharedUserID:expectedSpeakerSharedUserID:expectedSpeakerConfidenceScore:confidenceScores:", *(void *)(*((void *)&v15 + 1) + 8 * (void)v13), *(void *)(a1 + 40), *(void *)(a1 + 64), *(void *)(a1 + 48), (void)v15);
        [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) addObject:v14];

        uint64_t v13 = (char *)v13 + 1;
      }
      while (v11 != v13);
      id v11 = [v9 countByEnumeratingWithState:&v15 objects:v19 count:16];
    }
    while (v11);
  }
}

void sub_1002908FC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v8 = 136315394;
    id v9 = "-[ADMultiUserService getSharedUserIdForiCloudAltDSID:completion:]_block_invoke";
    __int16 v10 = 2112;
    id v11 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%s Looked up user in ADMultiUserService %@", (uint8_t *)&v8, 0x16u);
  }
  uint64_t v5 = [v3 sharedUserId];

  if (v5)
  {
    uint64_t v6 = *(void *)(a1 + 40);
    uint64_t v7 = [v3 sharedUserId];
    (*(void (**)(uint64_t, void, void *))(v6 + 16))(v6, 0, v7);
  }
  else
  {
    uint64_t v7 = +[ADCloudKitManager sharedManager];
    [v7 fetchSharedUserIdForiCloudAltDSID:*(void *)(a1 + 32) completion:*(void *)(a1 + 40)];
  }
}

void sub_100290AF4(void *a1)
{
  uint64_t v2 = (void *)a1[4];
  if (!v2)
  {
    id v7 = 0;
    goto LABEL_12;
  }
  id v3 = [*(id *)(a1[5] + 216) iCloudAltDSID];
  unsigned int v4 = [v2 isEqualToString:v3];

  if (!v4)
  {
    int v8 = (void *)a1[4];
    id v9 = [*(id *)(a1[5] + 224) iCloudAltDSID];
    LODWORD(v_Block_object_dispose(&STACK[0x220], 8) = [v8 isEqualToString:v9];

    uint64_t v10 = a1[5];
    if (v8)
    {
      id v5 = *(id *)(v10 + 224);
      uint64_t v11 = a1[5];
      uint64_t v12 = *(void **)(v11 + 160);
      uint64_t v13 = *(void **)(v11 + 224);
    }
    else
    {
      uint64_t v13 = [*(id *)(v10 + 280) objectForKeyedSubscript:a1[4]];
      id v5 = v13;
      uint64_t v12 = *(void **)(a1[5] + 160);
    }
    uint64_t v14 = [v13 sharedUserID];
    id v6 = [v12 objectForKeyedSubscript:v14];

    if (v5) {
      goto LABEL_4;
    }
LABEL_10:
    id v15 = 0;
    goto LABEL_11;
  }
  id v5 = *(id *)(a1[5] + 216);
  id v6 = *(id *)(a1[5] + 152);
  if (!v5) {
    goto LABEL_10;
  }
LABEL_4:
  sub_100290C64(v5, v6);
  id v15 = (id)objc_claimAutoreleasedReturnValue();
LABEL_11:

  id v7 = v15;
LABEL_12:
  id v16 = v7;
  (*(void (**)(void))(a1[6] + 16))();
}

id sub_100290C64(void *a1, void *a2)
{
  id v3 = a1;
  unsigned int v4 = sub_100290D94(v3, a2);
  id v5 = +[ADCompanionService sharedInstance];
  id v6 = [v5 isReady];

  id v7 = objc_alloc((Class)AFSharedUserInfo);
  int v8 = [v3 sharedUserID];
  id v9 = [v3 loggableSharedUserID];
  id v10 = [v3 personalDomainsIsEnabled];
  uint64_t v11 = [v3 homeUserUUID];
  uint64_t v12 = [v3 iCloudAltDSID];

  id v13 = [v7 initWithSharedUserId:v8 loggableSharedUserId:v9 companionDeviceInfo:v4 personalRequestsEnabled:v10 companionLinkReady:v6 homeUserId:v11 iCloudAltDSID:v12];
  return v13;
}

id sub_100290D94(void *a1, void *a2)
{
  id v18 = a2;
  id v3 = a1;
  unsigned int v4 = [v3 productPrefix];
  __int16 v19 = productTypeFromUserAgentString();

  char v17 = AFDoesProductTypeSupportMUX();
  id v5 = objc_alloc((Class)AFCompanionDeviceInfo);
  id v6 = [v3 companionAssistantID];
  id v7 = [v3 companionSpeechID];
  int v8 = [v3 companionIDSIdentifier];
  id v9 = [v3 productPrefix];
  id v10 = [v3 aceHost];
  uint64_t v11 = [v3 companionSyncMetadata];
  unsigned __int8 v12 = [v3 companionSyncMetadataCapable];
  unsigned __int8 v13 = [v3 companionPeerToPeerHandoffCapable];

  BYTE3(v16) = 1;
  BYTE2(v16) = v17;
  BYTE1(v16) = v13;
  LOBYTE(v16) = v12;
  id v14 = objc_msgSend(v5, "initWithAssistantID:speechID:idsIdentifier:productPrefix:aceHost:syncMetadata:syncMetadataCapability:peerToPeerHandoffCapability:muxSupportCapability:meDevice:siriLanguage:", v6, v7, v8, v9, v10, v11, v16, v18);

  return v14;
}

void sub_100290FE4(void *a1)
{
  uint64_t v2 = (void *)a1[4];
  if (v2)
  {
    id v3 = [*(id *)(a1[5] + 216) sharedUserID];
    unsigned int v4 = [v2 isEqualToString:v3];

    if (v4)
    {
      id v5 = *(id *)(a1[5] + 216);
      id v6 = *(id *)(a1[5] + 152);
    }
    else
    {
      int v8 = (void *)a1[4];
      id v9 = [*(id *)(a1[5] + 224) sharedUserID];
      LODWORD(v_Block_object_dispose(&STACK[0x220], 8) = [v8 isEqualToString:v9];

      uint64_t v10 = a1[5];
      if (v8)
      {
        id v11 = *(id *)(v10 + 224);
      }
      else
      {
        id v11 = [*(id *)(v10 + 208) objectForKeyedSubscript:a1[4]];
      }
      id v5 = v11;
      id v6 = [*(id *)(a1[5] + 160) objectForKeyedSubscript:a1[4]];
    }
    unsigned __int8 v12 = v6;
    if (v5)
    {
      sub_100290C64(v5, v6);
      id v13 = (id)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      id v13 = 0;
    }

    id v7 = v13;
  }
  else
  {
    id v7 = 0;
  }
  id v14 = v7;
  (*(void (**)(void))(a1[6] + 16))();
}

uint64_t sub_100291218(uint64_t a1)
{
  uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 216) sharedUserID];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 40) = v2;
  return _objc_release_x1(v2, v4);
}

void sub_1002917A8(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) uppercaseString];
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(void **)(v3 + 216);
  if (!v4) {
    goto LABEL_6;
  }
  id v5 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 136315138;
    uint64_t v29 = "-[ADMultiUserService getIDSIdentifierForAssistantId:completion:]_block_invoke";
    _os_log_debug_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "%s Primary user present", buf, 0xCu);
    uint64_t v4 = *(void **)(*(void *)(a1 + 40) + 216);
  }
  id v6 = [v4 companionAssistantID];
  id v7 = [v6 uppercaseString];
  unsigned int v8 = [v7 isEqualToString:v2];

  uint64_t v3 = *(void *)(a1 + 40);
  if (v8)
  {
    uint64_t v9 = *(void *)(a1 + 48);
    id v10 = [*(id *)(v3 + 216) companionIDSIdentifier];
    (*(void (**)(uint64_t, id, void))(v9 + 16))(v9, v10, 0);
  }
  else
  {
LABEL_6:
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    id v10 = *(id *)(v3 + 208);
    id v11 = [v10 countByEnumeratingWithState:&v23 objects:v27 count:16];
    if (v11)
    {
      id v12 = v11;
      uint64_t v13 = *(void *)v24;
      while (2)
      {
        for (i = 0; i != v12; i = (char *)i + 1)
        {
          if (*(void *)v24 != v13) {
            objc_enumerationMutation(v10);
          }
          id v15 = objc_msgSend(*(id *)(*(void *)(a1 + 40) + 208), "objectForKey:", *(void *)(*((void *)&v23 + 1) + 8 * i), (void)v23);
          uint64_t v16 = [v15 companionAssistantID];
          char v17 = [v16 uppercaseString];
          unsigned int v18 = [v17 isEqualToString:v2];

          if (v18)
          {
            uint64_t v20 = AFSiriLogContextDaemon;
            if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)long long buf = 136315138;
              uint64_t v29 = "-[ADMultiUserService getIDSIdentifierForAssistantId:completion:]_block_invoke";
              _os_log_debug_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "%s Second user match found", buf, 0xCu);
            }
            uint64_t v21 = *(void *)(a1 + 48);
            __int16 v22 = [v15 companionIDSIdentifier];
            (*(void (**)(uint64_t, void *, void))(v21 + 16))(v21, v22, 0);

            goto LABEL_20;
          }
        }
        id v12 = [v10 countByEnumeratingWithState:&v23 objects:v27 count:16];
        if (v12) {
          continue;
        }
        break;
      }
    }

    __int16 v19 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136315138;
      uint64_t v29 = "-[ADMultiUserService getIDSIdentifierForAssistantId:completion:]_block_invoke";
      _os_log_error_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "%s Primary user not present or home user not found", buf, 0xCu);
    }
    +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", kAFAssistantErrorDomain, 6001, &__NSDictionary0__struct, (void)v23);
    id v10 = (id)objc_claimAutoreleasedReturnValue();
    (*(void (**)(void, void, id))(*(void *)(a1 + 48) + 16))(*(void *)(a1 + 48), 0, v10);
  }
LABEL_20:
}

uint64_t sub_100291D30(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100291F24(void *a1)
{
  id v2 = [*(id *)(a1[4] + 272) count];
  uint64_t v3 = a1[4];
  uint64_t v4 = *(void **)(v3 + 216);
  if (v2)
  {
    if (!v4) {
      goto LABEL_7;
    }
    goto LABEL_5;
  }
  if (v4)
  {
LABEL_5:
    id v5 = [v4 sharedUserID];
    unsigned int v6 = [v5 isEqualToString:a1[5]];

    uint64_t v3 = a1[4];
    if (v6)
    {
      id v7 = *(id *)(v3 + 216);
LABEL_8:
      unsigned int v8 = v7;
      if (v7)
      {
        uint64_t v9 = [v7 audioAppSignals];
        id v10 = AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
        {
          int v16 = 136315394;
          char v17 = "-[ADMultiUserService getMultiUserAudioAppSignalsForSharedUserID:completion:]_block_invoke";
          __int16 v18 = 2112;
          __int16 v19 = v9;
          _os_log_debug_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "%s User found, returning bag: %@", (uint8_t *)&v16, 0x16u);
        }
        (*(void (**)(void))(a1[6] + 16))();
      }
      else
      {
        id v11 = AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
        {
          int v16 = 136315138;
          char v17 = "-[ADMultiUserService getMultiUserAudioAppSignalsForSharedUserID:completion:]_block_invoke";
          _os_log_debug_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "%s User not found", (uint8_t *)&v16, 0xCu);
        }
        uint64_t v12 = a1[6];
        uint64_t v13 = +[AFError errorWithCode:6001 description:0];
        (*(void (**)(uint64_t, void, void *))(v12 + 16))(v12, 0, v13);

        uint64_t v9 = 0;
      }

      goto LABEL_16;
    }
LABEL_7:
    id v7 = [*(id *)(v3 + 208) objectForKey:a1[5]];
    goto LABEL_8;
  }
  id v14 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    int v16 = 136315138;
    char v17 = "-[ADMultiUserService getMultiUserAudioAppSignalsForSharedUserID:completion:]_block_invoke";
    _os_log_debug_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "%s Non multi-user HomePod and primary user not found. Returning an error", (uint8_t *)&v16, 0xCu);
  }
  uint64_t v15 = a1[6];
  uint64_t v9 = +[AFError errorWithCode:6001 description:0];
  (*(void (**)(uint64_t, void, void *))(v15 + 16))(v15, 0, v9);
LABEL_16:
}

void sub_1002922E0(void *a1)
{
  id v2 = [*(id *)(a1[4] + 272) count];
  uint64_t v3 = a1[4];
  uint64_t v4 = *(void **)(v3 + 216);
  if (v2)
  {
    if (!v4) {
      goto LABEL_7;
    }
    goto LABEL_5;
  }
  if (v4)
  {
LABEL_5:
    id v5 = [v4 sharedUserID];
    unsigned int v6 = [v5 isEqualToString:a1[5]];

    uint64_t v3 = a1[4];
    if (v6)
    {
      id v7 = *(id *)(v3 + 216);
      goto LABEL_8;
    }
LABEL_7:
    id v7 = [*(id *)(v3 + 208) objectForKey:a1[5]];
LABEL_8:
    unsigned int v8 = v7;
    if (v7)
    {
      uint64_t v9 = [v7 settings];
      id v10 = [v9 objectForKey:SAHomeMemberSettingsTemperatureUnitPListKey];

      id v11 = [v8 settings];
      uint64_t v12 = [v11 objectForKey:SAHomeMemberSettingsTwentyFourHourTimeDisplayPListKey];
      id v13 = [v12 BOOLValue];

      id v14 = [v8 settings];
      uint64_t v15 = [v14 objectForKey:SAHomeMemberSettingsRegionPListKey];

      int v16 = [v8 settings];
      char v17 = [v16 objectForKey:SAHomeMemberSettingsCountryCodePListKey];

      __int16 v18 = [v8 settings];
      __int16 v19 = [v18 objectForKey:SAHomeMemberSettingsPreferredLanguagePListKey];

LABEL_10:
      uint64_t v20 = AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
      {
        int v26 = 136315138;
        id v27 = "-[ADMultiUserService getMultiUserSettingsForSharedUserID:completion:]_block_invoke";
        _os_log_debug_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "%s User found", (uint8_t *)&v26, 0xCu);
      }
      uint64_t v21 = objc_alloc_init(AFPersonalUserSettings);
      [(AFPersonalUserSettings *)v21 setTemperatureUnit:v10];
      [(AFPersonalUserSettings *)v21 setTwentyFourHourTimeDisplay:v13];
      [(AFPersonalUserSettings *)v21 setRegion:v15];
      [(AFPersonalUserSettings *)v21 setCountryCode:v17];
      [(AFPersonalUserSettings *)v21 setPreferredLanguage:v19];
      (*(void (**)(void))(a1[6] + 16))();

      goto LABEL_18;
    }
    goto LABEL_15;
  }
  __int16 v22 = +[ADAssistantDataManager sharedDataManager];
  unsigned int v8 = [v22 _cachedAssistantData];

  if (v8)
  {
    id v10 = [v8 temperatureUnit];
    long long v23 = [v8 twentyFourHourTimeDisplay];
    id v13 = [v23 BOOLValue];

    uint64_t v15 = [v8 region];
    char v17 = [v8 countryCode];
    __int16 v19 = [v8 preferredLanguage];
    goto LABEL_10;
  }
LABEL_15:
  long long v24 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    int v26 = 136315138;
    id v27 = "-[ADMultiUserService getMultiUserSettingsForSharedUserID:completion:]_block_invoke";
    _os_log_debug_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "%s User not found", (uint8_t *)&v26, 0xCu);
  }
  uint64_t v25 = a1[6];
  id v10 = +[AFError errorWithCode:6001 description:0];
  (*(void (**)(uint64_t, void, void *))(v25 + 16))(v25, 0, v10);
LABEL_18:
}

void sub_100292794(uint64_t a1)
{
  id v2 = +[ADCommandCenter sharedCommandCenter];
  uint64_t v3 = [v2 _selectedSharedUserID];

  uint64_t v4 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    int v19 = 136315395;
    uint64_t v20 = "-[ADMultiUserService getCompanionAssistantIdForRecognizedUser:]_block_invoke";
    __int16 v21 = 2113;
    __int16 v22 = v3;
    _os_log_debug_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "%s Found currently recognized user sharedUserID: %{private}@", (uint8_t *)&v19, 0x16u);
  }
  if ([v3 length])
  {
    uint64_t v5 = *(void *)(a1 + 32);
    unsigned int v6 = *(void **)(v5 + 216);
    if (!v6) {
      goto LABEL_9;
    }
    id v7 = (void *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      char v17 = v7;
      __int16 v18 = [v6 sharedUserID];
      int v19 = 136315395;
      uint64_t v20 = "-[ADMultiUserService getCompanionAssistantIdForRecognizedUser:]_block_invoke";
      __int16 v21 = 2113;
      __int16 v22 = v18;
      _os_log_debug_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "%s Checking if it matches that of primary user: %{private}@", (uint8_t *)&v19, 0x16u);

      unsigned int v6 = *(void **)(*(void *)(a1 + 32) + 216);
    }
    unsigned int v8 = [v6 sharedUserID];
    unsigned int v9 = [v8 isEqualToString:v3];

    uint64_t v5 = *(void *)(a1 + 32);
    if (v9)
    {
      uint64_t v10 = *(void *)(a1 + 40);
      id v11 = [*(id *)(v5 + 216) companionAssistantID];
      (*(void (**)(uint64_t, void *, void))(v10 + 16))(v10, v11, 0);
    }
    else
    {
LABEL_9:
      uint64_t v12 = [*(id *)(v5 + 208) objectForKey:v3];
      id v11 = v12;
      if (v12)
      {
        uint64_t v13 = *(void *)(a1 + 40);
        id v14 = [v12 companionAssistantID];
        (*(void (**)(uint64_t, void *, void))(v13 + 16))(v13, v14, 0);
      }
      else
      {
        int v16 = AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
        {
          int v19 = 136315138;
          uint64_t v20 = "-[ADMultiUserService getCompanionAssistantIdForRecognizedUser:]_block_invoke";
          _os_log_error_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "%s companionAssistantID not found", (uint8_t *)&v19, 0xCu);
        }
        id v14 = +[NSError errorWithDomain:kAFAssistantErrorDomain code:6001 userInfo:&__NSDictionary0__struct];
        (*(void (**)(void, void, void *))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), 0, v14);
      }
    }
  }
  else
  {
    uint64_t v15 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      int v19 = 136315138;
      uint64_t v20 = "-[ADMultiUserService getCompanionAssistantIdForRecognizedUser:]_block_invoke";
      _os_log_debug_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "%s No selectedSharedUserID found, returning nil", (uint8_t *)&v19, 0xCu);
    }
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

void sub_100292BD0(uint64_t a1)
{
  id v2 = +[ADCommandCenter sharedCommandCenter];
  uint64_t v3 = [v2 _selectedSharedUserID];

  uint64_t v4 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    int v10 = 136315395;
    id v11 = "-[ADMultiUserService getMultiUserSettingsForRecognizedUserWithCompletion:]_block_invoke";
    __int16 v12 = 2113;
    uint64_t v13 = v3;
    _os_log_debug_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "%s Found currently recognized user sharedUserID: %{private}@", (uint8_t *)&v10, 0x16u);
    if (v3) {
      goto LABEL_7;
    }
  }
  else if (v3)
  {
    goto LABEL_7;
  }
  uint64_t v5 = +[ADMultiUserTestSupport sharedService];
  unsigned int v6 = [v5 hasTestUserSelectionScores];

  if (v6)
  {
    id v7 = +[ADMultiUserTestSupport sharedService];
    uint64_t v3 = [v7 getClassifiedUser];

    unsigned int v8 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      int v10 = 136315394;
      id v11 = "-[ADMultiUserService getMultiUserSettingsForRecognizedUserWithCompletion:]_block_invoke";
      __int16 v12 = 2112;
      uint64_t v13 = v3;
      _os_log_debug_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "%s Overriding selectedSharedUserID using debug voice id scores: %@", (uint8_t *)&v10, 0x16u);
    }
  }
  else
  {
    uint64_t v3 = 0;
  }
LABEL_7:
  if ([v3 length])
  {
    [*(id *)(a1 + 32) getMultiUserSettingsForSharedUserID:v3 completion:*(void *)(a1 + 40)];
  }
  else
  {
    unsigned int v9 = +[NSError errorWithDomain:kAFAssistantErrorDomain code:6001 userInfo:&__NSDictionary0__struct];
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

void sub_100292ED4(uint64_t a1)
{
  id v2 = +[ADCommandCenter sharedCommandCenter];
  uint64_t v3 = [v2 _selectedSharedUserID];

  uint64_t v4 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    int v19 = 136315395;
    uint64_t v20 = "-[ADMultiUserService getiCloudAltDSIDOfRecognizedUserWithCompletion:]_block_invoke";
    __int16 v21 = 2113;
    __int16 v22 = v3;
    _os_log_debug_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "%s Found currently recognized user sharedUserID: %{private}@", (uint8_t *)&v19, 0x16u);
  }
  if ([v3 length])
  {
    uint64_t v5 = *(void *)(a1 + 32);
    unsigned int v6 = *(void **)(v5 + 216);
    if (!v6) {
      goto LABEL_9;
    }
    id v7 = (void *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      char v17 = v7;
      __int16 v18 = [v6 sharedUserID];
      int v19 = 136315395;
      uint64_t v20 = "-[ADMultiUserService getiCloudAltDSIDOfRecognizedUserWithCompletion:]_block_invoke";
      __int16 v21 = 2113;
      __int16 v22 = v18;
      _os_log_debug_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "%s Checking if it matches that of primary user: %{private}@", (uint8_t *)&v19, 0x16u);

      unsigned int v6 = *(void **)(*(void *)(a1 + 32) + 216);
    }
    unsigned int v8 = [v6 sharedUserID];
    unsigned int v9 = [v8 isEqualToString:v3];

    uint64_t v5 = *(void *)(a1 + 32);
    if (v9)
    {
      uint64_t v10 = *(void *)(a1 + 40);
      id v11 = [*(id *)(v5 + 216) iCloudAltDSID];
      (*(void (**)(uint64_t, void *, void))(v10 + 16))(v10, v11, 0);
    }
    else
    {
LABEL_9:
      __int16 v12 = [*(id *)(v5 + 208) objectForKey:v3];
      id v11 = v12;
      if (v12)
      {
        uint64_t v13 = *(void *)(a1 + 40);
        id v14 = [v12 iCloudAltDSID];
        (*(void (**)(uint64_t, void *, void))(v13 + 16))(v13, v14, 0);
      }
      else
      {
        int v16 = AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
        {
          int v19 = 136315138;
          uint64_t v20 = "-[ADMultiUserService getiCloudAltDSIDOfRecognizedUserWithCompletion:]_block_invoke";
          _os_log_error_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "%s iCloudAltDSID not found", (uint8_t *)&v19, 0xCu);
        }
        id v14 = +[NSError errorWithDomain:kAFAssistantErrorDomain code:6001 userInfo:&__NSDictionary0__struct];
        (*(void (**)(void, void, void *))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), 0, v14);
      }
    }
  }
  else
  {
    uint64_t v15 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      int v19 = 136315138;
      uint64_t v20 = "-[ADMultiUserService getiCloudAltDSIDOfRecognizedUserWithCompletion:]_block_invoke";
      _os_log_debug_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "%s No selectedSharedUserID found, returning nil", (uint8_t *)&v19, 0xCu);
    }
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

void sub_100293310(uint64_t a1)
{
  id v2 = +[ADCommandCenter sharedCommandCenter];
  uint64_t v3 = [v2 _selectedSharedUserID];

  uint64_t v4 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    int v28 = 136315395;
    uint64_t v29 = "-[ADMultiUserService getHomeUserIdOfRecognizedUserWithCompletion:]_block_invoke";
    __int16 v30 = 2113;
    id v31 = v3;
    _os_log_debug_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "%s Found currently recognized user sharedUserID: %{private}@", (uint8_t *)&v28, 0x16u);
    if (v3) {
      goto LABEL_13;
    }
  }
  else if (v3)
  {
    goto LABEL_13;
  }
  uint64_t v5 = +[ADMultiUserTestSupport sharedService];
  unsigned int v6 = [v5 hasTestUserSelectionScores];

  if (v6)
  {
    id v7 = +[ADMultiUserTestSupport sharedService];
    uint64_t v3 = [v7 getClassifiedUser];

    unsigned int v8 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      int v28 = 136315394;
      uint64_t v29 = "-[ADMultiUserService getHomeUserIdOfRecognizedUserWithCompletion:]_block_invoke";
      __int16 v30 = 2112;
      id v31 = v3;
      _os_log_debug_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "%s Overriding selectedSharedUserID using debug voice id scores: %@", (uint8_t *)&v28, 0x16u);
    }
    uint64_t v9 = *(void *)(a1 + 32);
    if (!*(void *)(v9 + 216))
    {
      uint64_t v10 = *(void **)(v9 + 224);
      if (v10)
      {
        id v11 = [v10 sharedUserID];
        unsigned int v12 = [v11 isEqualToString:v3];

        if (v12)
        {
          uint64_t v13 = AFSiriLogContextDaemon;
          if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
          {
            int v28 = 136315138;
            uint64_t v29 = "-[ADMultiUserService getHomeUserIdOfRecognizedUserWithCompletion:]_block_invoke";
            _os_log_debug_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "%s Primary user not present, falling back to use _deviceOwner", (uint8_t *)&v28, 0xCu);
          }
          uint64_t v14 = *(void *)(a1 + 40);
          uint64_t v15 = [*(id *)(*(void *)(a1 + 32) + 224) homeUserUUID];
          (*(void (**)(uint64_t, void *, void))(v14 + 16))(v14, v15, 0);

          goto LABEL_29;
        }
      }
    }
  }
  else
  {
    uint64_t v3 = 0;
  }
LABEL_13:
  if ([v3 length])
  {
    uint64_t v16 = *(void *)(a1 + 32);
    char v17 = *(void **)(v16 + 216);
    if (!v17) {
      goto LABEL_19;
    }
    __int16 v18 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      int v28 = 136315138;
      uint64_t v29 = "-[ADMultiUserService getHomeUserIdOfRecognizedUserWithCompletion:]_block_invoke";
      _os_log_debug_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "%s Primary user present", (uint8_t *)&v28, 0xCu);
      char v17 = *(void **)(*(void *)(a1 + 32) + 216);
    }
    int v19 = [v17 sharedUserID];
    unsigned int v20 = [v19 isEqualToString:v3];

    uint64_t v16 = *(void *)(a1 + 32);
    if (v20)
    {
      uint64_t v21 = *(void *)(a1 + 40);
      __int16 v22 = [*(id *)(v16 + 216) homeUserUUID];
      (*(void (**)(uint64_t, void *, void))(v21 + 16))(v21, v22, 0);
    }
    else
    {
LABEL_19:
      long long v23 = [*(id *)(v16 + 208) objectForKey:v3];
      __int16 v22 = v23;
      if (v23)
      {
        uint64_t v24 = *(void *)(a1 + 40);
        uint64_t v25 = [v23 homeUserUUID];
        (*(void (**)(uint64_t, void *, void))(v24 + 16))(v24, v25, 0);
      }
      else
      {
        id v27 = AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
        {
          int v28 = 136315138;
          uint64_t v29 = "-[ADMultiUserService getHomeUserIdOfRecognizedUserWithCompletion:]_block_invoke";
          _os_log_error_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_ERROR, "%s Primary user not present or home userId not found", (uint8_t *)&v28, 0xCu);
        }
        uint64_t v25 = +[NSError errorWithDomain:kAFAssistantErrorDomain code:6001 userInfo:&__NSDictionary0__struct];
        (*(void (**)(void, void, void *))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), 0, v25);
      }
    }
  }
  else
  {
    int v26 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      int v28 = 136315138;
      uint64_t v29 = "-[ADMultiUserService getHomeUserIdOfRecognizedUserWithCompletion:]_block_invoke";
      _os_log_debug_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "%s No selectedSharedUserID found, returning nil", (uint8_t *)&v28, 0xCu);
    }
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
LABEL_29:
}

void sub_10029388C(uint64_t a1)
{
  id v34 = objc_alloc_init((Class)NSMutableDictionary);
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(v2 + 216);
  if (v3)
  {
    uint64_t v4 = [v3 iCloudAltDSID];
    id v5 = objc_alloc((Class)NSDictionary);
    unsigned int v6 = [*(id *)(*(void *)(a1 + 32) + 216) sharedUserID];
    uint64_t v7 = kAFMultiUserSharedUserIdKey;
    unsigned int v8 = [*(id *)(*(void *)(a1 + 32) + 216) loggableMusicSyncSharedUserID];
    id v9 = objc_msgSend(v5, "initWithObjectsAndKeys:", v6, v7, v8, kAFMultiUserConformingSharedUserIdKey, 0);

    if (!v4) {
      goto LABEL_12;
    }
    if (!AFIsHorseman())
    {
      uint64_t v10 = _AFPreferencesSiriRMVSetting();
      id v11 = AFSiriLogContextDaemon;
      if (!os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_10;
      }
      *(_DWORD *)long long buf = 136315394;
      id v43 = "-[ADMultiUserService getRecognizableUsersConfromingSharedUserIds:]_block_invoke";
      __int16 v44 = 2048;
      uint64_t v45 = v10;
      unsigned int v12 = "%s Primary user present. RmV enabled: %ld";
      goto LABEL_29;
    }
    goto LABEL_11;
  }
  uint64_t v13 = *(void **)(v2 + 224);
  if (v13)
  {
    uint64_t v4 = [v13 iCloudAltDSID];
    id v14 = objc_alloc((Class)NSDictionary);
    uint64_t v15 = [*(id *)(*(void *)(a1 + 32) + 224) sharedUserID];
    uint64_t v16 = kAFMultiUserSharedUserIdKey;
    char v17 = [*(id *)(*(void *)(a1 + 32) + 224) loggableMusicSyncSharedUserID];
    id v9 = objc_msgSend(v14, "initWithObjectsAndKeys:", v15, v16, v17, kAFMultiUserConformingSharedUserIdKey, 0);

    if (!v4) {
      goto LABEL_12;
    }
    if (!AFIsHorseman())
    {
      uint64_t v10 = _AFPreferencesSiriRMVSetting();
      id v11 = AFSiriLogContextDaemon;
      if (!os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_10;
      }
      *(_DWORD *)long long buf = 136315394;
      id v43 = "-[ADMultiUserService getRecognizableUsersConfromingSharedUserIds:]_block_invoke";
      __int16 v44 = 2048;
      uint64_t v45 = v10;
      unsigned int v12 = "%s Device Owner present. RmV enabled: %ld";
LABEL_29:
      _os_log_debug_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, v12, buf, 0x16u);
LABEL_10:
      if (v10 == 1) {
        goto LABEL_11;
      }
LABEL_12:

      uint64_t v2 = *(void *)(a1 + 32);
      goto LABEL_13;
    }
LABEL_11:
    [v34 setObject:v9 forKey:v4];
    goto LABEL_12;
  }
  uint64_t v4 = 0;
LABEL_13:
  long long v39 = 0u;
  long long v40 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  id obj = *(id *)(v2 + 208);
  id v18 = [obj countByEnumeratingWithState:&v37 objects:v41 count:16];
  if (v18)
  {
    id v19 = v18;
    uint64_t v36 = *(void *)v38;
    uint64_t v20 = kAFMultiUserSharedUserIdKey;
    uint64_t v21 = kAFMultiUserConformingSharedUserIdKey;
    do
    {
      for (i = 0; i != v19; i = (char *)i + 1)
      {
        long long v23 = v4;
        if (*(void *)v38 != v36) {
          objc_enumerationMutation(obj);
        }
        uint64_t v24 = *(void *)(*((void *)&v37 + 1) + 8 * i);
        uint64_t v4 = [*(id *)(*(void *)(a1 + 32) + 224) iCloudAltDSID];

        uint64_t v25 = a1;
        int v26 = [*(id *)(*(void *)(a1 + 32) + 208) objectForKey:v24];
        id v27 = objc_alloc((Class)NSDictionary);
        int v28 = [v26 sharedUserID];
        uint64_t v29 = [v26 loggableMusicSyncSharedUserID];
        id v30 = objc_msgSend(v27, "initWithObjectsAndKeys:", v28, v20, v29, v21, 0);

        if (v4 && ((AFIsHorseman() & 1) != 0 || _AFPreferencesSiriRMVSetting() == 1)) {
          [v34 setObject:v30 forKey:v4];
        }

        a1 = v25;
      }
      id v19 = [obj countByEnumeratingWithState:&v37 objects:v41 count:16];
    }
    while (v19);
  }

  id v31 = (void *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    id v32 = v31;
    id v33 = [v34 count];
    *(_DWORD *)long long buf = 136315394;
    id v43 = "-[ADMultiUserService getRecognizableUsersConfromingSharedUserIds:]_block_invoke";
    __int16 v44 = 2048;
    uint64_t v45 = (uint64_t)v33;
    _os_log_debug_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEBUG, "%s User count: %ld", buf, 0x16u);
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_100293E14(uint64_t a1)
{
  id v36 = objc_alloc_init((Class)NSMutableDictionary);
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(void *)(v2 + 216))
  {
    uint64_t v3 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 136315138;
      id v42 = "-[ADMultiUserService getConformingSharedUserIds:]_block_invoke";
      _os_log_debug_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "%s Primary user present", buf, 0xCu);
    }
    id v4 = objc_alloc((Class)NSDictionary);
    id v5 = [*(id *)(*(void *)(a1 + 32) + 216) sharedUserID];
    uint64_t v6 = kAFMultiUserSharedUserIdKey;
    uint64_t v7 = [*(id *)(*(void *)(a1 + 32) + 216) loggableMusicSyncSharedUserID];
    id v8 = objc_msgSend(v4, "initWithObjectsAndKeys:", v5, v6, v7, kAFMultiUserConformingSharedUserIdKey, 0);

    id v9 = [*(id *)(*(void *)(a1 + 32) + 216) homeUserUUID];

    if (!v9) {
      goto LABEL_12;
    }
    uint64_t v10 = *(void **)(*(void *)(a1 + 32) + 216);
    goto LABEL_11;
  }
  if (!*(void *)(v2 + 224)) {
    goto LABEL_13;
  }
  id v11 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 136315138;
    id v42 = "-[ADMultiUserService getConformingSharedUserIds:]_block_invoke";
    _os_log_debug_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "%s Device owner present", buf, 0xCu);
  }
  id v12 = objc_alloc((Class)NSDictionary);
  uint64_t v13 = [*(id *)(*(void *)(a1 + 32) + 224) sharedUserID];
  uint64_t v14 = kAFMultiUserSharedUserIdKey;
  uint64_t v15 = [*(id *)(*(void *)(a1 + 32) + 224) loggableMusicSyncSharedUserID];
  id v8 = objc_msgSend(v12, "initWithObjectsAndKeys:", v13, v14, v15, kAFMultiUserConformingSharedUserIdKey, 0);

  uint64_t v16 = [*(id *)(*(void *)(a1 + 32) + 224) homeUserUUID];

  if (v16)
  {
    uint64_t v10 = *(void **)(*(void *)(a1 + 32) + 224);
LABEL_11:
    char v17 = [v10 homeUserUUID];
    [v36 setObject:v8 forKey:v17];
  }
LABEL_12:

  uint64_t v2 = *(void *)(a1 + 32);
LABEL_13:
  long long v39 = 0u;
  long long v40 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  id obj = *(id *)(v2 + 208);
  id v18 = [obj countByEnumeratingWithState:&v37 objects:v45 count:16];
  if (v18)
  {
    id v19 = v18;
    uint64_t v20 = *(void *)v38;
    uint64_t v21 = kAFMultiUserSharedUserIdKey;
    uint64_t v22 = kAFMultiUserConformingSharedUserIdKey;
    do
    {
      long long v23 = 0;
      do
      {
        if (*(void *)v38 != v20) {
          objc_enumerationMutation(obj);
        }
        uint64_t v24 = a1;
        uint64_t v25 = [*(id *)(*(void *)(a1 + 32) + 208) objectForKey:*(void *)(*((void *)&v37 + 1) + 8 * (void)v23)];
        id v26 = objc_alloc((Class)NSDictionary);
        id v27 = [v25 sharedUserID];
        int v28 = [v25 loggableMusicSyncSharedUserID];
        id v29 = objc_msgSend(v26, "initWithObjectsAndKeys:", v27, v21, v28, v22, 0);

        id v30 = [v25 homeUserUUID];

        if (v30)
        {
          id v31 = [v25 homeUserUUID];
          [v36 setObject:v29 forKey:v31];
        }
        long long v23 = (char *)v23 + 1;
        a1 = v24;
      }
      while (v19 != v23);
      id v19 = [obj countByEnumeratingWithState:&v37 objects:v45 count:16];
    }
    while (v19);
  }

  id v32 = (void *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    id v33 = v32;
    id v34 = [v36 count];
    *(_DWORD *)long long buf = 136315394;
    id v42 = "-[ADMultiUserService getConformingSharedUserIds:]_block_invoke";
    __int16 v43 = 2048;
    id v44 = v34;
    _os_log_debug_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEBUG, "%s User count: %ld", buf, 0x16u);
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_1002943A4(void *a1)
{
  uint64_t v2 = (id *)a1[4];
  id v3 = v2[27];
  if (v3)
  {
    id v4 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      int v19 = 136315138;
      uint64_t v20 = "-[ADMultiUserService getConformingSharedUserIdForHomeUserId:completion:]_block_invoke";
      _os_log_debug_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "%s Primary user present", (uint8_t *)&v19, 0xCu);
      id v3 = *(id *)(a1[4] + 216);
    }
    id v5 = [v3 homeUserUUID];
    unsigned int v6 = [v5 isEqualToString:a1[5]];

    uint64_t v2 = (id *)a1[4];
    if (v6)
    {
      uint64_t v7 = a1[6];
      id v8 = [v2[27] sharedUserID];
      id v9 = *(void **)(a1[4] + 216);
LABEL_11:
      uint64_t v14 = [v9 loggableMusicSyncSharedUserID];
      (*(void (**)(uint64_t, void *, void *, void))(v7 + 16))(v7, v8, v14, 0);
      goto LABEL_17;
    }
  }
  else
  {
    id v10 = v2[28];
    if (v10)
    {
      id v11 = AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
      {
        int v19 = 136315138;
        uint64_t v20 = "-[ADMultiUserService getConformingSharedUserIdForHomeUserId:completion:]_block_invoke";
        _os_log_debug_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "%s Device owner present", (uint8_t *)&v19, 0xCu);
        id v10 = *(id *)(a1[4] + 224);
      }
      id v12 = [v10 homeUserUUID];
      unsigned int v13 = [v12 isEqualToString:a1[5]];

      uint64_t v2 = (id *)a1[4];
      if (v13)
      {
        uint64_t v7 = a1[6];
        id v8 = [v2[28] sharedUserID];
        id v9 = *(void **)(a1[4] + 224);
        goto LABEL_11;
      }
    }
  }
  uint64_t v15 = [v2[34] objectForKey:a1[5]];
  if (v15)
  {
    id v8 = v15;
    uint64_t v16 = a1[6];
    uint64_t v14 = [v15 sharedUserID];
    char v17 = [v8 loggableMusicSyncSharedUserID];
    (*(void (**)(uint64_t, void *, void *, void))(v16 + 16))(v16, v14, v17, 0);
  }
  else
  {
    id v18 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      int v19 = 136315138;
      uint64_t v20 = "-[ADMultiUserService getConformingSharedUserIdForHomeUserId:completion:]_block_invoke";
      _os_log_error_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "%s Primary user not present or sharedUserId not found", (uint8_t *)&v19, 0xCu);
    }
    uint64_t v14 = +[NSError errorWithDomain:kAFAssistantErrorDomain code:6001 userInfo:&__NSDictionary0__struct];
    (*(void (**)(void))(a1[6] + 16))();
    id v8 = 0;
  }
LABEL_17:
}

void sub_1002947BC(void *a1)
{
  uint64_t v2 = (void *)a1[4];
  id v3 = [*(id *)(a1[5] + 216) sharedUserID];
  LODWORD(v2) = [v2 isEqualToString:v3];

  uint64_t v4 = a1[5];
  if (v2)
  {
    id v5 = *(id *)(v4 + 216);
  }
  else
  {
    id v5 = [*(id *)(v4 + 208) objectForKey:a1[4]];
  }
  id v14 = v5;
  if (v5)
  {
    unsigned int v6 = +[ADCommunalDeviceUser saHomeMemberInfo:v5];
    uint64_t v7 = [v6 homeMemberSettings];
    id v8 = [v7 meCard];

    if (v8 && ([v8 firstName], id v9 = objc_claimAutoreleasedReturnValue(), v9, v9))
    {
      uint64_t v10 = a1[6];
      id v11 = [v8 firstName];
      (*(void (**)(uint64_t, void *, void))(v10 + 16))(v10, v11, 0);
    }
    else
    {
      uint64_t v13 = a1[6];
      id v11 = +[NSError errorWithDomain:kAFAssistantErrorDomain code:6008 userInfo:&__NSDictionary0__struct];
      (*(void (**)(uint64_t, void, void *))(v13 + 16))(v13, 0, v11);
    }
  }
  else
  {
    uint64_t v12 = a1[6];
    id v8 = +[NSError errorWithDomain:kAFAssistantErrorDomain code:6001 userInfo:&__NSDictionary0__struct];
    (*(void (**)(uint64_t, void, void *))(v12 + 16))(v12, 0, v8);
  }
}

void sub_100294B28(void *a1)
{
  uint64_t v2 = a1[4];
  id v3 = *(void **)(v2 + 216);
  if (v3)
  {
    uint64_t v4 = (void *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      id v18 = v4;
      int v19 = [v3 sharedUserID];
      int v22 = 136315395;
      long long v23 = "-[ADMultiUserService getSharedUserIdForHomeUserId:completion:]_block_invoke";
      __int16 v24 = 2113;
      uint64_t v25 = v19;
      _os_log_debug_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "%s Primary user present with sharedUserId = %{private}@", (uint8_t *)&v22, 0x16u);

      id v3 = *(void **)(a1[4] + 216);
    }
    id v5 = [v3 homeUserUUID];
    unsigned int v6 = [v5 isEqualToString:a1[5]];

    uint64_t v2 = a1[4];
    if (v6)
    {
      uint64_t v7 = a1[6];
      id v8 = *(void **)(v2 + 216);
LABEL_11:
      uint64_t v13 = [v8 sharedUserID];
      (*(void (**)(uint64_t, void *, void))(v7 + 16))(v7, v13, 0);
      goto LABEL_18;
    }
  }
  else
  {
    id v9 = *(void **)(v2 + 224);
    if (v9)
    {
      uint64_t v10 = (void *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v20 = v10;
        uint64_t v21 = [v9 sharedUserID];
        int v22 = 136315395;
        long long v23 = "-[ADMultiUserService getSharedUserIdForHomeUserId:completion:]_block_invoke";
        __int16 v24 = 2113;
        uint64_t v25 = v21;
        _os_log_debug_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "%s Device owner present with sharedUserId = %{private}@", (uint8_t *)&v22, 0x16u);

        id v9 = *(void **)(a1[4] + 224);
      }
      id v11 = [v9 homeUserUUID];
      unsigned int v12 = [v11 isEqualToString:a1[5]];

      uint64_t v2 = a1[4];
      if (v12)
      {
        uint64_t v7 = a1[6];
        id v8 = *(void **)(v2 + 224);
        goto LABEL_11;
      }
    }
  }
  id v14 = [*(id *)(v2 + 272) objectForKey:a1[5]];
  uint64_t v13 = v14;
  if (v14)
  {
    uint64_t v15 = a1[6];
    uint64_t v16 = [v14 sharedUserID];
    (*(void (**)(uint64_t, void *, void))(v15 + 16))(v15, v16, 0);
  }
  else
  {
    char v17 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      int v22 = 136315138;
      long long v23 = "-[ADMultiUserService getSharedUserIdForHomeUserId:completion:]_block_invoke";
      _os_log_error_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "%s Primary user not present or sharedUserId not found", (uint8_t *)&v22, 0xCu);
    }
    uint64_t v16 = +[NSError errorWithDomain:kAFAssistantErrorDomain code:6001 userInfo:&__NSDictionary0__struct];
    (*(void (**)(void, void, void *))(a1[6] + 16))(a1[6], 0, v16);
  }

LABEL_18:
}

void sub_100294FE4(void *a1)
{
  uint64_t v2 = *(void **)(a1[4] + 216);
  if (v2)
  {
    id v3 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      int v17 = 136315138;
      id v18 = "-[ADMultiUserService getHomeUserIdForSharedUserId:completion:]_block_invoke";
      _os_log_debug_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "%s Primary user present", (uint8_t *)&v17, 0xCu);
      uint64_t v2 = *(void **)(a1[4] + 216);
    }
    uint64_t v4 = [v2 sharedUserID];
    unsigned int v5 = [v4 isEqualToString:a1[5]];

    if (v5)
    {
      uint64_t v6 = a1[6];
      uint64_t v7 = *(void **)(a1[4] + 216);
LABEL_12:
      unsigned int v12 = [v7 homeUserUUID];
      (*(void (**)(uint64_t, void *, void))(v6 + 16))(v6, v12, 0);
      goto LABEL_19;
    }
  }
  if (AFIsATV())
  {
    id v8 = *(void **)(a1[4] + 224);
    if (v8)
    {
      id v9 = AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
      {
        int v17 = 136315138;
        id v18 = "-[ADMultiUserService getHomeUserIdForSharedUserId:completion:]_block_invoke";
        _os_log_debug_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "%s Platform is ATV and not primary user. Checking device owner", (uint8_t *)&v17, 0xCu);
        id v8 = *(void **)(a1[4] + 224);
      }
      uint64_t v10 = [v8 sharedUserID];
      unsigned int v11 = [v10 isEqualToString:a1[5]];

      if (v11)
      {
        uint64_t v6 = a1[6];
        uint64_t v7 = *(void **)(a1[4] + 224);
        goto LABEL_12;
      }
    }
  }
  if (a1[5]
    && (objc_msgSend(*(id *)(a1[4] + 208), "objectForKey:"), (uint64_t v13 = objc_claimAutoreleasedReturnValue()) != 0))
  {
    unsigned int v12 = v13;
    uint64_t v14 = a1[6];
    uint64_t v15 = [v13 homeUserUUID];
    (*(void (**)(uint64_t, void *, void))(v14 + 16))(v14, v15, 0);
  }
  else
  {
    uint64_t v16 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      int v17 = 136315138;
      id v18 = "-[ADMultiUserService getHomeUserIdForSharedUserId:completion:]_block_invoke";
      _os_log_error_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "%s Primary user not present or home userId not found", (uint8_t *)&v17, 0xCu);
    }
    unsigned int v12 = +[NSError errorWithDomain:kAFAssistantErrorDomain code:6001 userInfo:&__NSDictionary0__struct];
    (*(void (**)(void, void, void *))(a1[6] + 16))(a1[6], 0, v12);
  }
LABEL_19:
}

void sub_100295388(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1002953A0(uint64_t a1)
{
  uint64_t v2 = +[ADCommandCenter sharedCommandCenter];
  id v3 = [v2 _selectedSharedUserID];

  if (![v3 length]) {
    goto LABEL_10;
  }
  uint64_t v4 = [*(id *)(*(void *)(a1 + 32) + 216) sharedUserID];
  unsigned int v5 = [v4 isEqualToString:v3];

  uint64_t v6 = *(void *)(a1 + 32);
  if (!v5)
  {
    id v9 = [*(id *)(v6 + 208) objectForKey:v3];
    uint64_t v10 = v9;
    if (v9)
    {
      *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = [v9 allowExplicitContent];
      unsigned int v11 = AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
      {
        int v12 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
        int v17 = 136315651;
        id v18 = "-[ADMultiUserService getAllowExplicitContentSettingForRecognizedUser]_block_invoke";
        __int16 v19 = 1024;
        LODWORD(v20[0]) = v12;
        WORD2(v20[0]) = 2113;
        *(void *)((char *)v20 + 6) = v3;
        uint64_t v13 = "%s AllowExplicitContent=%i for Shared user with sharedUserId=%{private}@";
        uint64_t v14 = v11;
        uint32_t v15 = 28;
LABEL_12:
        _os_log_debug_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, v13, (uint8_t *)&v17, v15);
      }
    }
    else
    {
      uint64_t v16 = AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
      {
        int v17 = 136315395;
        id v18 = "-[ADMultiUserService getAllowExplicitContentSettingForRecognizedUser]_block_invoke";
        __int16 v19 = 2113;
        v20[0] = v3;
        uint64_t v13 = "%s Shared user with sharedUserId=%{private}@ not found";
        uint64_t v14 = v16;
        uint32_t v15 = 22;
        goto LABEL_12;
      }
    }

    goto LABEL_10;
  }
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = [*(id *)(v6 + 216) allowExplicitContent];
  uint64_t v7 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    int v8 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
    int v17 = 136315651;
    id v18 = "-[ADMultiUserService getAllowExplicitContentSettingForRecognizedUser]_block_invoke";
    __int16 v19 = 1024;
    LODWORD(v20[0]) = v8;
    WORD2(v20[0]) = 2113;
    *(void *)((char *)v20 + 6) = v3;
    _os_log_debug_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "%s AllowExplicitContent=%i for Primary user with sharedUserId=%{private}@", (uint8_t *)&v17, 0x1Cu);
  }
LABEL_10:
}

void sub_100295728(void *a1)
{
  uint64_t v2 = a1[4];
  id v3 = *(void **)(v2 + 216);
  if (v3)
  {
    uint64_t v4 = [v3 homeUserUUID];
    unsigned int v5 = [v4 isEqualToString:a1[5]];

    uint64_t v2 = a1[4];
    if (!v5) {
      goto LABEL_8;
    }
    uint64_t v6 = *(void **)(v2 + 216);
    goto LABEL_7;
  }
  uint64_t v7 = *(void **)(v2 + 224);
  if (v7)
  {
    int v8 = [v7 homeUserUUID];
    unsigned int v9 = [v8 isEqualToString:a1[5]];

    uint64_t v2 = a1[4];
    if (v9)
    {
      uint64_t v6 = *(void **)(v2 + 224);
LABEL_7:
      uint64_t v10 = [v6 sharedUserID];
      id v11 = [v10 copy];
      uint64_t v12 = *(void *)(a1[6] + 8);
      uint64_t v13 = *(void **)(v12 + 40);
      *(void *)(v12 + 40) = v11;

      uint64_t v2 = a1[4];
    }
  }
LABEL_8:
  uint64_t v14 = [*(id *)(v2 + 272) objectForKey:a1[5]];
  if (v14)
  {
    id v19 = v14;
    uint32_t v15 = [v14 sharedUserID];
    id v16 = [v15 copy];
    uint64_t v17 = *(void *)(a1[6] + 8);
    id v18 = *(void **)(v17 + 40);
    *(void *)(v17 + 40) = v16;

    uint64_t v14 = v19;
  }
}

void sub_100295950(void *a1)
{
  uint64_t v2 = +[NSMutableDictionary dictionary];
  int v8 = _NSConcreteStackBlock;
  uint64_t v9 = 3221225472;
  uint64_t v10 = sub_100295A18;
  id v11 = &unk_100509A88;
  id v3 = (void *)a1[4];
  uint64_t v12 = a1[5];
  id v13 = v2;
  id v4 = v2;
  [v3 enumerateObjectsUsingBlock:&v8];
  id v5 = objc_msgSend(v4, "copy", v8, v9, v10, v11, v12);
  uint64_t v6 = *(void *)(a1[6] + 8);
  uint64_t v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v5;
}

void sub_100295A18(uint64_t a1, void *a2)
{
  id v12 = a2;
  id v3 = [*(id *)(*(void *)(a1 + 32) + 216) sharedUserID];
  unsigned int v4 = [v12 isEqualToString:v3];

  uint64_t v5 = *(void *)(a1 + 32);
  if (v4)
  {
    uint64_t v6 = *(void **)(v5 + 216);
LABEL_5:
    uint64_t v10 = [v6 loggableMusicSyncSharedUserID];
    [*(id *)(a1 + 40) setObject:v10 forKeyedSubscript:v12];
    goto LABEL_7;
  }
  uint64_t v7 = [*(id *)(v5 + 224) sharedUserID];
  unsigned int v8 = [v12 isEqualToString:v7];

  uint64_t v9 = *(void *)(a1 + 32);
  if (v8)
  {
    uint64_t v6 = *(void **)(v9 + 224);
    goto LABEL_5;
  }
  uint64_t v10 = [*(id *)(v9 + 208) objectForKey:v12];
  id v11 = [v10 loggableMusicSyncSharedUserID];
  [*(id *)(a1 + 40) setObject:v11 forKeyedSubscript:v12];

LABEL_7:
}

uint64_t sub_100295C34(uint64_t result)
{
  id v1 = *(void **)(result + 32);
  if (!v1) {
    return result;
  }
  uint64_t v2 = (void *)result;
  id v3 = [*(id *)(*(void *)(result + 40) + 216) sharedUserID];
  unsigned int v4 = [v1 isEqualToString:v3];

  if (v4)
  {
    uint64_t v5 = *(void **)(v2[5] + 216);
  }
  else
  {
    uint64_t v6 = (void *)v2[4];
    uint64_t v7 = [*(id *)(v2[5] + 224) sharedUserID];
    LODWORD(v6) = [v6 isEqualToString:v7];

    uint64_t v8 = v2[5];
    if (!v6)
    {
      uint32_t v15 = [*(id *)(v8 + 208) objectForKey:v2[4]];
      uint64_t v12 = [v15 loggableMusicSyncSharedUserID];
      uint64_t v13 = *(void *)(v2[6] + 8);
      uint64_t v14 = *(void **)(v13 + 40);
      *(void *)(v13 + 40) = v12;

      id v11 = v15;
      goto LABEL_9;
    }
    uint64_t v5 = *(void **)(v8 + 224);
  }
  uint64_t v9 = [v5 loggableMusicSyncSharedUserID];
  uint64_t v10 = *(void *)(v2[6] + 8);
  id v11 = *(void **)(v10 + 40);
  *(void *)(v10 + 40) = v9;
LABEL_9:
  return _objc_release_x1(v9, v11);
}

void sub_100295E70(void *a1)
{
  uint64_t v2 = a1[4];
  id v3 = *(void **)(v2 + 216);
  if (v3)
  {
    unsigned int v4 = [v3 shareOwnerName];
    unsigned int v5 = [v4 isEqualToString:a1[5]];
    uint64_t v2 = a1[4];
    if (v5)
    {
      uint64_t v6 = [*(id *)(v2 + 216) sharedUserID];
      uint64_t v7 = *(void *)(a1[6] + 8);
      uint64_t v8 = *(void **)(v7 + 40);
      *(void *)(v7 + 40) = v6;

      uint64_t v2 = a1[4];
    }
  }
  else
  {
    unsigned int v4 = 0;
  }
  long long v19 = 0u;
  long long v20 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  id v9 = *(id *)(v2 + 208);
  id v10 = [v9 countByEnumeratingWithState:&v17 objects:v21 count:16];
  if (v10)
  {
    id v11 = v10;
    uint64_t v12 = *(void *)v18;
    while (2)
    {
      uint64_t v13 = 0;
      uint64_t v14 = v4;
      do
      {
        if (*(void *)v18 != v12) {
          objc_enumerationMutation(v9);
        }
        uint32_t v15 = *(void **)(*((void *)&v17 + 1) + 8 * (void)v13);
        id v16 = objc_msgSend(*(id *)(a1[4] + 208), "objectForKey:", v15, (void)v17);
        unsigned int v4 = [v16 shareOwnerName];

        if ([v4 isEqualToString:a1[5]])
        {
          objc_storeStrong((id *)(*(void *)(a1[6] + 8) + 40), v15);

          goto LABEL_15;
        }

        uint64_t v13 = (char *)v13 + 1;
        uint64_t v14 = v4;
      }
      while (v11 != v13);
      id v11 = [v9 countByEnumeratingWithState:&v17 objects:v21 count:16];
      if (v11) {
        continue;
      }
      break;
    }
  }
LABEL_15:
}

void sub_100296190(uint64_t a1)
{
  uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 208) objectForKey:*(void *)(a1 + 40)];
  id v10 = v2;
  if (v2)
  {
    [v2 setShareOwnerName:*(void *)(a1 + 48)];
    [v10 testAndSetLoggingIsAllowed:*(unsigned __int8 *)(a1 + 72)];
    id v3 = *(void **)(a1 + 56);
    if (v3)
    {
      unsigned int v4 = [v3 dictionary];
      [v10 setSettings:v4];
    }
    if (*(void *)(a1 + 64)) {
      objc_msgSend(v10, "setAudioAppSignals:");
    }
  }
  else
  {
    unsigned int v5 = [*(id *)(*(void *)(a1 + 32) + 216) sharedUserID];
    unsigned int v6 = [v5 isEqualToString:*(void *)(a1 + 40)];

    if (v6)
    {
      [*(id *)(*(void *)(a1 + 32) + 216) setShareOwnerName:*(void *)(a1 + 48)];
      uint64_t v7 = *(void **)(a1 + 56);
      if (v7)
      {
        uint64_t v8 = *(void **)(*(void *)(a1 + 32) + 216);
        id v9 = [v7 dictionary];
        [v8 setSettings:v9];
      }
      if (*(void *)(a1 + 64)) {
        objc_msgSend(*(id *)(*(void *)(a1 + 32) + 216), "setAudioAppSignals:");
      }
      [*(id *)(*(void *)(a1 + 32) + 216) testAndSetLoggingIsAllowed:*(unsigned __int8 *)(a1 + 72)];
    }
  }
}

void sub_10029638C(void *a1)
{
  uint64_t v2 = [*(id *)(a1[4] + 272) objectForKey:a1[5]];
  if (v2)
  {
    id v3 = v2;
    [v2 setEnrollmentName:a1[6]];
    uint64_t v2 = v3;
  }
}

void sub_100296848(uint64_t a1)
{
  uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 208) objectForKey:*(void *)(a1 + 40)];
  id v3 = v2;
  if (!v2)
  {
    unsigned int v4 = [*(id *)(*(void *)(a1 + 32) + 216) sharedUserID];
    unsigned int v5 = [v4 isEqualToString:*(void *)(a1 + 40)];

    if (!v5) {
      goto LABEL_5;
    }
    id v3 = *(void **)(*(void *)(a1 + 32) + 216);
  }
  uint64_t v6 = *(void *)(*(void *)(a1 + 120) + 8);
  id v7 = v3;
  uint64_t v8 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v7;

LABEL_5:
  id v9 = *(void **)(*(void *)(*(void *)(a1 + 120) + 8) + 40);
  if (!v9)
  {
    id v16 = +[NSError errorWithDomain:kAFAssistantErrorDomain code:6001 userInfo:&__NSDictionary0__struct];
    long long v17 = 0;
    goto LABEL_46;
  }
  id v10 = *(void **)(a1 + 48);
  id v11 = [v9 companionAssistantID];
  id v12 = v10;
  id v13 = v11;
  if (v12 == v13)
  {

    goto LABEL_15;
  }
  uint64_t v14 = v13;
  if (!v12 || !v13)
  {

    goto LABEL_14;
  }
  unsigned __int8 v15 = [v12 isEqual:v13];

  if ((v15 & 1) == 0)
  {
LABEL_14:
    [*(id *)(*(void *)(*(void *)(a1 + 120) + 8) + 40) setCompanionAssistantID:*(void *)(a1 + 48)];
    *(unsigned char *)(*(void *)(*(void *)(a1 + 128) + 8) + 24) = 1;
  }
LABEL_15:
  if (*(void *)(a1 + 56)) {
    objc_msgSend(*(id *)(*(void *)(*(void *)(a1 + 120) + 8) + 40), "setCompanionSpeechID:");
  }
  if (*(void *)(a1 + 64)) {
    objc_msgSend(*(id *)(*(void *)(*(void *)(a1 + 120) + 8) + 40), "setCompanionIDSIdentifier:");
  }
  if (*(void *)(a1 + 72)) {
    objc_msgSend(*(id *)(*(void *)(*(void *)(a1 + 120) + 8) + 40), "setProductPrefix:");
  }
  long long v18 = *(void **)(a1 + 80);
  long long v19 = [*(id *)(*(void *)(*(void *)(a1 + 120) + 8) + 40) aceHost];
  id v20 = v18;
  id v21 = v19;
  if (v20 == v21)
  {
  }
  else
  {
    int v22 = v21;
    if (v20 && v21)
    {
      unsigned __int8 v23 = [v20 isEqual:v21];

      if (v23) {
        goto LABEL_29;
      }
    }
    else
    {
    }
    [*(id *)(*(void *)(*(void *)(a1 + 120) + 8) + 40) setAceHost:*(void *)(a1 + 80)];
    *(unsigned char *)(*(void *)(*(void *)(a1 + 128) + 8) + 24) = 1;
  }
LABEL_29:
  uint64_t v24 = [*(id *)(*(void *)(*(void *)(a1 + 120) + 8) + 40) companionSyncMetadata];
  uint64_t v25 = *(void *)(*(void *)(a1 + 136) + 8);
  id v26 = *(void **)(v25 + 40);
  *(void *)(v25 + 40) = v24;

  [*(id *)(*(void *)(*(void *)(a1 + 120) + 8) + 40) setCompanionSyncMetadata:*(void *)(a1 + 88)];
  unsigned int v27 = [*(id *)(*(void *)(*(void *)(a1 + 120) + 8) + 40) companionSyncMetadataCapable];
  if (v27 != [*(id *)(a1 + 96) syncMetadataCapability])
  {
    objc_msgSend(*(id *)(*(void *)(*(void *)(a1 + 120) + 8) + 40), "setCompanionSyncMetadataCapable:", objc_msgSend(*(id *)(a1 + 96), "syncMetadataCapability"));
    *(unsigned char *)(*(void *)(*(void *)(a1 + 128) + 8) + 24) = 1;
  }
  unsigned int v28 = [*(id *)(*(void *)(*(void *)(a1 + 120) + 8) + 40) companionPeerToPeerHandoffCapable];
  if (v28 != [*(id *)(a1 + 96) peerToPeerHandoffCapability])
  {
    objc_msgSend(*(id *)(*(void *)(*(void *)(a1 + 120) + 8) + 40), "setCompanionPeerToPeerHandoffCapable:", objc_msgSend(*(id *)(a1 + 96), "peerToPeerHandoffCapability"));
    *(unsigned char *)(*(void *)(*(void *)(a1 + 128) + 8) + 24) = 1;
  }
  long long v17 = [*(id *)(*(void *)(*(void *)(a1 + 120) + 8) + 40) homeUserUUID];
  id v29 = *(void **)(a1 + 32);
  if (*(void *)(*(void *)(*(void *)(a1 + 120) + 8) + 40) == v29[27])
  {
    [v29 _savePrimaryAndDeviceOwner];
    long long v35 = *(void **)(a1 + 32);
    if (*(void *)(a1 + 104))
    {
      objc_msgSend(*(id *)(a1 + 32), "_setPrimaryUserSiriLanguage:");
    }
    else
    {
      long long v39 = +[AFPreferences sharedPreferences];
      long long v40 = [v39 languageCode];
      [v35 _setPrimaryUserSiriLanguage:v40];

      __int16 v41 = AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)long long buf = 136315138;
        id v83 = "-[ADMultiUserService updateMultiUserWithSharedUserId:companionInfo:completion:]_block_invoke";
        _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_INFO, "%s siriLanguage unavailable. Setting it to the same language as HomePod.", buf, 0xCu);
      }
    }
    [*(id *)(a1 + 32) _setPrimaryUserMeDevice:*(unsigned __int8 *)(a1 + 144)];
  }
  else
  {
    [v29 _saveSharedUsers];
    uint64_t v30 = *(void *)(a1 + 104);
    id v31 = *(void **)(a1 + 32);
    if (v30)
    {
      [*(id *)(a1 + 32) _setSharedUserSiriLanguage:v30 forSharedUser:*(void *)(a1 + 40)];
      id v32 = (void *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
      {
        id v33 = *(void **)(*(void *)(a1 + 32) + 160);
        id v34 = v32;
        *(_DWORD *)long long buf = 136315394;
        id v83 = "-[ADMultiUserService updateMultiUserWithSharedUserId:companionInfo:completion:]_block_invoke";
        __int16 v84 = 2048;
        id v85 = [v33 count];
        _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_INFO, "%s _sharedUsersSiriLanguageBySharedUserID: %lu", buf, 0x16u);
      }
    }
    else
    {
      id v36 = +[AFPreferences sharedPreferences];
      long long v37 = [v36 languageCode];
      [v31 _setSharedUserSiriLanguage:v37 forSharedUser:*(void *)(a1 + 40)];

      long long v38 = AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)long long buf = 136315138;
        id v83 = "-[ADMultiUserService updateMultiUserWithSharedUserId:companionInfo:completion:]_block_invoke";
        _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_INFO, "%s siriLanguage unavailable for shared user. Setting it to the same language as HomePod.", buf, 0xCu);
      }
    }
    [*(id *)(a1 + 32) _setSharedUserMeDevice:*(unsigned __int8 *)(a1 + 144) forSharedUser:*(void *)(a1 + 40)];
  }
  id v16 = 0;
LABEL_46:
  if (AFIsATV())
  {
    id v42 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 136315138;
      id v83 = "-[ADMultiUserService updateMultiUserWithSharedUserId:companionInfo:completion:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_INFO, "%s #multi-user-atv skipping MU update since we cannot trust HomeKit settings on ATV", buf, 0xCu);
    }
    [*(id *)(a1 + 32) _updateVoiceProfileInfo];
    [*(id *)(a1 + 32) _updateSAMultiUserInfo];
    __int16 v43 = *(void (**)(void))(*(void *)(a1 + 112) + 16);
    goto LABEL_53;
  }
  if (!v16)
  {
    uint64_t v45 = *(void **)(a1 + 32);
    if (v45[4] && v17)
    {
      if ([v45 _updateHomeKitSettings:v17])
      {
        uint64_t v46 = [*(id *)(*(void *)(a1 + 32) + 32) objectForKey:v17];
        id v47 = v46;
        if (v46)
        {
          id v48 = [v46 objectForKey:@"allowVoiceID"];
          if ([v48 integerValue] == (id)1)
          {
            uint64_t v49 = *(void *)(a1 + 112);
            if (v49) {
              (*(void (**)(uint64_t, void))(v49 + 16))(v49, 0);
            }
          }
          else
          {
            BOOL v57 = AFSiriLogContextDaemon;
            if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)long long buf = 136315138;
              id v83 = "-[ADMultiUserService updateMultiUserWithSharedUserId:companionInfo:completion:]_block_invoke";
              _os_log_error_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_ERROR, "%s VoiceID disabled for existing user and we did not get a homeinfo change notification", buf, 0xCu);
            }
            [*(id *)(a1 + 32) removeUserWithHomeUUID:v17 completion:&stru_1005099C8];
            uint64_t v58 = *(void *)(a1 + 112);
            if (v58)
            {
              uint64_t v59 = +[NSError errorWithDomain:kAFAssistantErrorDomain code:6010 userInfo:&__NSDictionary0__struct];
              (*(void (**)(uint64_t, void *))(v58 + 16))(v58, v59);
            }
          }
        }
        else
        {
          id v55 = AFSiriLogContextDaemon;
          if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)long long buf = 136315138;
            id v83 = "-[ADMultiUserService updateMultiUserWithSharedUserId:companionInfo:completion:]_block_invoke";
            _os_log_error_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_ERROR, "%s We should have a user setting. File a bug.", buf, 0xCu);
          }
          uint64_t v56 = *(void *)(a1 + 112);
          if (v56) {
            (*(void (**)(uint64_t, void))(v56 + 16))(v56, 0);
          }
        }
      }
      else if (AFIsATV() {
             && [*(id *)(a1 + 32) _updateNonHomeUserSettings:*(void *)(a1 + 40)])
      }
      {
        uint64_t v51 = AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)long long buf = 136315138;
          id v83 = "-[ADMultiUserService updateMultiUserWithSharedUserId:companionInfo:completion:]_block_invoke";
          _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_INFO, "%s Updated settings for user on ATV but not part of same home.", buf, 0xCu);
        }
        uint64_t v52 = *(void *)(a1 + 112);
        if (v52) {
          (*(void (**)(uint64_t, void))(v52 + 16))(v52, 0);
        }
      }
      else
      {
        uint64_t v53 = *(void *)(a1 + 112);
        if (v53)
        {
          id v54 = +[NSError errorWithDomain:kAFAssistantErrorDomain code:6008 userInfo:&__NSDictionary0__struct];
          (*(void (**)(uint64_t, void *))(v53 + 16))(v53, v54);
        }
      }
      [*(id *)(a1 + 32) _updateVoiceProfileInfo];
      [*(id *)(a1 + 32) _updateSAMultiUserInfo];
    }
    else
    {
      unsigned int v50 = +[ADHomeInfoManager sharedInfoManager];
      id v74 = _NSConcreteStackBlock;
      uint64_t v75 = 3221225472;
      id v76 = sub_1002973D8;
      unsigned int v77 = &unk_100509A10;
      uint64_t v78 = *(void *)(a1 + 32);
      id v79 = v17;
      id v80 = *(id *)(a1 + 40);
      id v81 = *(id *)(a1 + 112);
      [v50 settingsForMultiUserWithRefresh:0 completion:&v74];
    }
    if (!*(void *)(*(void *)(*(void *)(a1 + 120) + 8) + 40)) {
      goto LABEL_54;
    }
    double v60 = *(void **)(a1 + 88);
    id v61 = *(id *)(*(void *)(*(void *)(a1 + 136) + 8) + 40);
    id v62 = v60;
    if (v61 == v62)
    {
    }
    else
    {
      id v63 = v62;
      if (v61 && v62)
      {
        unsigned __int8 v64 = [v61 isEqual:v62];

        if (v64)
        {
LABEL_94:
          if (*(unsigned char *)(*(void *)(*(void *)(a1 + 128) + 8) + 24))
          {
            id v69 = (void *)AFSiriLogContextDaemon;
            if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
            {
              uint64_t v70 = *(void **)(*(void *)(*(void *)(a1 + 120) + 8) + 40);
              long long v71 = v69;
              id v72 = [v70 sharedUserID];
              *(_DWORD *)long long buf = 136315395;
              id v83 = "-[ADMultiUserService updateMultiUserWithSharedUserId:companionInfo:completion:]_block_invoke";
              __int16 v84 = 2113;
              id v85 = v72;
              _os_log_impl((void *)&_mh_execute_header, v71, OS_LOG_TYPE_INFO, "%s Posting notification that companion device information/capabilities changed for sharedUserId: (%{private}@)", buf, 0x16u);
            }
            long long v73 = +[NSNotificationCenter defaultCenter];
            [v73 postNotificationName:@"ADMultiUserSharedUserCompanionInfoChangedNotification" object:*(void *)(*(void *)(*(void *)(a1 + 120) + 8) + 40)];
          }
          goto LABEL_54;
        }
      }
      else
      {
      }
      id v65 = (void *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
      {
        uint64_t v66 = *(void **)(*(void *)(*(void *)(a1 + 120) + 8) + 40);
        id v67 = v65;
        id v68 = [v66 sharedUserID];
        *(_DWORD *)long long buf = 136315395;
        id v83 = "-[ADMultiUserService updateMultiUserWithSharedUserId:companionInfo:completion:]_block_invoke";
        __int16 v84 = 2113;
        id v85 = v68;
        _os_log_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_INFO, "%s Posting notification that sync information changed for sharedUserId: (%{private}@)", buf, 0x16u);
      }
      id v61 = +[NSNotificationCenter defaultCenter];
      [v61 postNotificationName:@"ADMultiUserSyncMetadataDidChangeNotification" object:*(void *)(*(void *)(*(void *)(a1 + 120) + 8) + 40)];
    }

    goto LABEL_94;
  }
  uint64_t v44 = *(void *)(a1 + 112);
  if (v44)
  {
    __int16 v43 = *(void (**)(void))(v44 + 16);
LABEL_53:
    v43();
  }
LABEL_54:
}

void sub_1002973D8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  unsigned int v5 = *(NSObject **)(v4 + 256);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1002974BC;
  block[3] = &unk_10050D3F0;
  id v8 = v3;
  uint64_t v9 = v4;
  id v10 = *(id *)(a1 + 40);
  id v11 = *(id *)(a1 + 48);
  id v12 = *(id *)(a1 + 56);
  id v6 = v3;
  dispatch_async(v5, block);
}

void sub_1002974BC(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (!v2)
  {
    id v7 = +[NSError errorWithDomain:kAFAssistantErrorDomain code:6009 userInfo:&__NSDictionary0__struct];
    if (AFIsATV() && !*(void *)(a1 + 48))
    {

      [*(id *)(a1 + 40) _updateNonHomeUserSettings:*(void *)(a1 + 56)];
      id v3 = AFSiriLogContextDaemon;
      if (!os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO)) {
        goto LABEL_17;
      }
      *(_DWORD *)id v13 = 136315138;
      *(void *)&void v13[4] = "-[ADMultiUserService updateMultiUserWithSharedUserId:companionInfo:completion:]_block_invoke";
LABEL_16:
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "%s Updated settings for user on ATV but not part of same home.", v13, 0xCu);
LABEL_17:
      uint64_t v8 = *(void *)(a1 + 64);
      if (v8) {
        (*(void (**)(uint64_t, void))(v8 + 16))(v8, 0);
      }
      goto LABEL_19;
    }
LABEL_21:
    objc_msgSend(*(id *)(a1 + 40), "_updateVoiceProfileInfo", *(_OWORD *)v13);
    [*(id *)(a1 + 40) _updateSAMultiUserInfo];
    uint64_t v9 = *(void *)(a1 + 64);
    if (v9) {
      (*(void (**)(uint64_t, void *))(v9 + 16))(v9, v7);
    }
    goto LABEL_23;
  }
  objc_storeStrong((id *)(*(void *)(a1 + 40) + 32), v2);
  if (AFIsATV()
    && !*(void *)(a1 + 48)
    && [*(id *)(a1 + 40) _updateNonHomeUserSettings:*(void *)(a1 + 56)])
  {
    id v3 = AFSiriLogContextDaemon;
    if (!os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO)) {
      goto LABEL_17;
    }
    *(_DWORD *)id v13 = 136315138;
    *(void *)&void v13[4] = "-[ADMultiUserService updateMultiUserWithSharedUserId:companionInfo:completion:]_block_invoke_2";
    goto LABEL_16;
  }
  if (([*(id *)(a1 + 40) _updateHomeKitSettings:*(void *)(a1 + 48)] & 1) == 0)
  {
    id v7 = +[NSError errorWithDomain:kAFAssistantErrorDomain code:6008 userInfo:&__NSDictionary0__struct];
    goto LABEL_21;
  }
  uint64_t v4 = [*(id *)(*(void *)(a1 + 40) + 32) objectForKey:*(void *)(a1 + 48)];
  unsigned int v5 = v4;
  if (!v4)
  {
LABEL_11:

LABEL_19:
    id v7 = 0;
    goto LABEL_21;
  }
  id v6 = [v4 objectForKey:@"allowVoiceID"];
  if ([v6 integerValue])
  {

    goto LABEL_11;
  }
  id v10 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)id v13 = 136315138;
    *(void *)&void v13[4] = "-[ADMultiUserService updateMultiUserWithSharedUserId:companionInfo:completion:]_block_invoke";
    _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "%s VoiceID disabled for existing user and we did not get a homeinfo change notification", v13, 0xCu);
  }
  [*(id *)(a1 + 40) removeUserWithHomeUUID:*(void *)(a1 + 48) completion:&stru_1005099E8];
  uint64_t v11 = *(void *)(a1 + 64);
  if (v11)
  {
    id v12 = +[NSError errorWithDomain:kAFAssistantErrorDomain code:6010 userInfo:&__NSDictionary0__struct];
    (*(void (**)(uint64_t, void *))(v11 + 16))(v11, v12);
  }
  id v7 = 0;
LABEL_23:
}

void sub_1002977C8(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  if (v2)
  {
    id v3 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      int v4 = 136315394;
      unsigned int v5 = "-[ADMultiUserService updateMultiUserWithSharedUserId:companionInfo:completion:]_block_invoke";
      __int16 v6 = 2112;
      id v7 = v2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "%s Error when removing user (%@)", (uint8_t *)&v4, 0x16u);
    }
  }
}

void sub_10029788C(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  if (v2)
  {
    id v3 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      int v4 = 136315394;
      unsigned int v5 = "-[ADMultiUserService updateMultiUserWithSharedUserId:companionInfo:completion:]_block_invoke";
      __int16 v6 = 2112;
      id v7 = v2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "%s Error when removing user (%@)", (uint8_t *)&v4, 0x16u);
    }
  }
}

void sub_100297A8C(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = v3;
  if (v3)
  {
    unsigned int v5 = *(NSObject **)(*(void *)(a1 + 32) + 256);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100297C14;
    block[3] = &unk_10050E1D8;
    id v6 = v3;
    uint64_t v7 = *(void *)(a1 + 32);
    uint64_t v8 = *(void **)(a1 + 40);
    id v12 = v6;
    uint64_t v13 = v7;
    id v14 = v8;
    dispatch_async(v5, block);

    uint64_t v9 = v12;
  }
  else
  {
    id v10 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136315138;
      id v16 = "-[ADMultiUserService triggerMultiUserMetricsWithCompletion:]_block_invoke";
      _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "%s Unable to gather multi-user metrics. Unable to determine home users and their voice settings", buf, 0xCu);
    }
    uint64_t v9 = +[NSError errorWithDomain:kAFAssistantErrorDomain code:6014 userInfo:&__NSDictionary0__struct];
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

uint64_t sub_100297C14(uint64_t a1)
{
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 countByEnumeratingWithState:&v21 objects:v35 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = 0;
    uint64_t v6 = *(void *)v22;
    do
    {
      for (i = 0; i != v4; i = (char *)i + 1)
      {
        if (*(void *)v22 != v6) {
          objc_enumerationMutation(v2);
        }
        uint64_t v8 = objc_msgSend(*(id *)(a1 + 32), "objectForKey:", *(void *)(*((void *)&v21 + 1) + 8 * i), (void)v21);
        if ([v8 integerValue] == (id)1) {
          ++v5;
        }
      }
      id v4 = [v2 countByEnumeratingWithState:&v21 objects:v35 count:16];
    }
    while (v4);
  }
  else
  {
    uint64_t v5 = 0;
  }

  id v9 = [*(id *)(a1 + 40) _countVoiceProfiles];
  id v10 = [*(id *)(*(void *)(a1 + 40) + 48) homeMembers];
  uint64_t v11 = (char *)[v10 count];

  id v12 = [*(id *)(*(void *)(a1 + 40) + 48) homeMembers];
  unsigned int v13 = [v12 containsObject:*(void *)(*(void *)(a1 + 40) + 24)];

  id v14 = AFSiriLogContextDaemon;
  if (v13)
  {
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 136315138;
      unsigned int v28 = "-[ADMultiUserService triggerMultiUserMetricsWithCompletion:]_block_invoke_2";
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "%s Unknown user will be substracted from multiuser count", buf, 0xCu);
      id v14 = AFSiriLogContextDaemon;
    }
    --v11;
  }
  if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)long long buf = 136315906;
    unsigned int v28 = "-[ADMultiUserService triggerMultiUserMetricsWithCompletion:]_block_invoke";
    __int16 v29 = 2048;
    uint64_t v30 = v5;
    __int16 v31 = 2048;
    id v32 = v11;
    __int16 v33 = 2048;
    id v34 = v9;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "%s Voice Recognition enabled users count: %ld, multi-user members count: %ld, voice profiles count: %ld", buf, 0x2Au);
  }
  unsigned __int8 v15 = +[AFAnalytics sharedAnalytics];
  v25[0] = @"voice recognition enabled users count";
  id v16 = +[NSNumber numberWithInteger:v5];
  v26[0] = v16;
  v25[1] = @"multi users count";
  long long v17 = +[NSNumber numberWithUnsignedInteger:v11];
  v26[1] = v17;
  v25[2] = @"voice profiles count";
  long long v18 = +[NSNumber numberWithUnsignedInteger:v9];
  v26[2] = v18;
  long long v19 = +[NSDictionary dictionaryWithObjects:v26 forKeys:v25 count:3];
  [v15 logEventWithType:6114 context:v19];

  return (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16))();
}

id sub_100298034(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) _updateVoiceProfileInfo];
  if (result)
  {
    id v3 = *(void **)(a1 + 32);
    return [v3 _updateSAMultiUserInfo];
  }
  return result;
}

void sub_100298120(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    int v6 = 136315395;
    uint64_t v7 = "-[ADMultiUserService _removeGhostVoiceProfiles]_block_invoke";
    __int16 v8 = 2113;
    id v9 = v3;
    _os_log_debug_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "%s removing ghost voice profile for sharedUserID %{private}@", (uint8_t *)&v6, 0x16u);
  }
  id v5 = [*(id *)(*(void *)(a1 + 32) + 248) discardSiriEnrollmentForProfileId:v3 forLanguageCode:0];
}

void sub_100298490(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) _getUserAgentStringForSharedUserID:*(void *)(a1 + 40)];
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
}

uint64_t sub_10029861C(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) _getUserAgentStringForSharedUserID:*(void *)(a1 + 40)];
  uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 40) = v2;
  return _objc_release_x1(v2, v4);
}

void sub_100298748(uint64_t a1)
{
}

void sub_1002987C8(uint64_t a1)
{
  uint64_t v2 = +[NSProcessInfo processInfo];
  [v2 systemUptime];
  double v4 = v3;

  uint64_t v5 = *(void *)(a1 + 32);
  double v6 = *(double *)(v5 + 104);
  if ((v6 == 0.0 || v4 - v6 >= 3600.0) && *(void *)(v5 + 112) <= 2uLL)
  {
    *(double *)(v5 + 104) = v4;
    dispatch_time_t v7 = dispatch_time(0, 60000000000);
    uint64_t v8 = *(void *)(a1 + 32);
    id v9 = *(NSObject **)(v8 + 256);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1002988B8;
    block[3] = &unk_10050E138;
    void block[4] = v8;
    dispatch_after(v7, v9, block);
  }
}

id sub_1002988B8(uint64_t a1)
{
  [*(id *)(a1 + 32) _removeGhostVoiceProfiles];
  uint64_t v2 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 136315138;
    dispatch_time_t v7 = "-[ADMultiUserService voiceProfilesOutOfSync]_block_invoke_2";
    _os_log_debug_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s Starting a download.", buf, 0xCu);
  }
  ++*(void *)(*(void *)(a1 + 32) + 112);
  double v3 = *(void **)(a1 + 32);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  void v5[2] = sub_1002989D4;
  v5[3] = &unk_10050B918;
  void v5[4] = v3;
  return [v3 _forceCloudSyncedUserDownload:v5];
}

void sub_1002989D4(uint64_t a1, int a2)
{
  double v4 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    int v5 = 136315394;
    double v6 = "-[ADMultiUserService voiceProfilesOutOfSync]_block_invoke";
    __int16 v7 = 1024;
    int v8 = a2;
    _os_log_debug_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "%s download status is (%d)", (uint8_t *)&v5, 0x12u);
    if (!a2) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if (a2) {
LABEL_3:
  }
    *(void *)(*(void *)(a1 + 32) + 112) = 0;
LABEL_4:
  *(void *)(*(void *)(a1 + 32) + 104) = 0;
}

id sub_100298B28(uint64_t a1)
{
  uint64_t v2 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 136315138;
    __int16 v7 = "-[ADMultiUserService resetAllUsers]_block_invoke";
    _os_log_debug_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s ", buf, 0xCu);
  }
  [*(id *)(a1 + 32) _resetAllUsers];
  [*(id *)(a1 + 32) _updateSAMultiUserInfo];
  double v3 = *(void **)(a1 + 32);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  void v5[2] = sub_100298C3C;
  v5[3] = &unk_10050B918;
  void v5[4] = v3;
  return [v3 _forceCloudSyncedUserDownload:v5];
}

void sub_100298C3C(uint64_t a1, int a2)
{
  if (a2)
  {
    dispatch_time_t v3 = dispatch_time(0, 30000000000);
    uint64_t v4 = *(void *)(a1 + 32);
    int v5 = *(NSObject **)(v4 + 256);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100298CD8;
    block[3] = &unk_10050E138;
    void block[4] = v4;
    dispatch_after(v3, v5, block);
  }
}

id sub_100298CD8(uint64_t a1)
{
  return [*(id *)(a1 + 32) _refreshUsersAndVoiceProfiles:0];
}

void sub_1002990DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v15 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_100299108(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 48);
  if (v2)
  {
    dispatch_time_t v3 = [v2 homeMembers];
    *(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 24) = [v3 count];

    uint64_t v4 = *(void *)(*(void *)(a1 + 80) + 8);
    uint64_t v5 = *(void *)(v4 + 24);
    if (v5) {
      *(void *)(v4 + 24) = v5 - 1;
    }
  }
  if (*(void *)(a1 + 40))
  {
    double v6 = objc_msgSend(*(id *)(*(void *)(a1 + 32) + 208), "objectForKey:");
    __int16 v7 = [*(id *)(*(void *)(a1 + 32) + 216) sharedUserID];
    unsigned __int8 v8 = [v7 isEqualToString:*(void *)(a1 + 40)];

    id v9 = AFSiriLogContextDaemon;
    BOOL v10 = os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG);
    if ((v8 & 1) != 0 || v6)
    {
      if (v10)
      {
        uint64_t v49 = *(void **)(a1 + 40);
        *(_DWORD *)long long buf = 136315395;
        uint64_t v59 = "-[ADMultiUserService validateAndReturnScores:classifiedUser:donatedScores:unknownUserSharedId:totalUsers:g"
              "hostVoiceProfileDetected:]_block_invoke";
        __int16 v60 = 2113;
        id v61 = v49;
        _os_log_debug_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "%s classifiedUser %{private}@ is enrolled, no cleanup needed", buf, 0x16u);
      }
    }
    else
    {
      if (v10)
      {
        id v48 = *(void **)(a1 + 40);
        *(_DWORD *)long long buf = 136315395;
        uint64_t v59 = "-[ADMultiUserService validateAndReturnScores:classifiedUser:donatedScores:unknownUserSharedId:totalUsers:g"
              "hostVoiceProfileDetected:]_block_invoke";
        __int16 v60 = 2113;
        id v61 = v48;
        _os_log_debug_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "%s classifiedUser %{private}@ is not enrolled, its voice profile will be removed", buf, 0x16u);
      }
      [*(id *)(a1 + 32) _trackGhostVoiceProfile:*(void *)(a1 + 40)];
      uint64_t v11 = *(unsigned char **)(a1 + 96);
      if (v11) {
        unsigned char *v11 = 1;
      }
    }
  }
  long long v56 = 0u;
  long long v57 = 0u;
  long long v54 = 0u;
  long long v55 = 0u;
  id obj = *(id *)(a1 + 48);
  id v12 = [obj countByEnumeratingWithState:&v54 objects:v64 count:16];
  if (v12)
  {
    id v14 = v12;
    uint64_t v15 = *(void *)v55;
    *(void *)&long long v13 = 136315651;
    long long v50 = v13;
    do
    {
      for (i = 0; i != v14; i = (char *)i + 1)
      {
        if (*(void *)v55 != v15) {
          objc_enumerationMutation(obj);
        }
        long long v17 = *(void **)(*((void *)&v54 + 1) + 8 * i);
        long long v18 = objc_msgSend(*(id *)(*(void *)(a1 + 32) + 208), "objectForKey:", v17, v50);
        if (v18)
        {

LABEL_22:
          long long v21 = +[NSMutableDictionary dictionary];
          id v22 = [*(id *)(*(void *)(a1 + 32) + 208) objectForKey:v17];
          long long v23 = (void *)AFSiriLogContextDaemon;
          BOOL v24 = os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG);
          if (v22)
          {
            if (v24)
            {
              uint64_t v25 = v23;
              id v26 = [v22 sharedUserID];
              *(_DWORD *)long long buf = 136315394;
              uint64_t v59 = "-[ADMultiUserService validateAndReturnScores:classifiedUser:donatedScores:unknownUserSharedId:totalU"
                    "sers:ghostVoiceProfileDetected:]_block_invoke";
              __int16 v60 = 2112;
              id v61 = v26;
              _os_log_debug_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "%s Using shared user %@.", buf, 0x16u);
            }
            goto LABEL_28;
          }
          if (v24)
          {
            __int16 v41 = *(void **)(*(void *)(a1 + 32) + 216);
            id v42 = v23;
            __int16 v43 = [v41 sharedUserID];
            *(_DWORD *)long long buf = 136315394;
            uint64_t v59 = "-[ADMultiUserService validateAndReturnScores:classifiedUser:donatedScores:unknownUserSharedId:totalUse"
                  "rs:ghostVoiceProfileDetected:]_block_invoke";
            __int16 v60 = 2112;
            id v61 = v43;
            _os_log_debug_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEBUG, "%s Using primary user %@.", buf, 0x16u);
          }
          id v22 = *(id *)(*(void *)(a1 + 32) + 216);
          if (v22)
          {
LABEL_28:
            unsigned int v27 = [v22 companionAssistantID];

            if (v27)
            {
              unsigned int v28 = *(void **)(a1 + 56);
              __int16 v29 = [v22 companionAssistantID];
              uint64_t v30 = [v28 objectForKey:v29];

              if (v30) {
                goto LABEL_49;
              }
            }
            __int16 v31 = [v22 companionIDSIdentifier];

            if (!v31) {
              goto LABEL_34;
            }
            id v32 = *(void **)(a1 + 56);
            __int16 v33 = [v22 companionIDSIdentifier];
            uint64_t v30 = [v32 objectForKey:v33];

            if (v30)
            {
LABEL_49:
              if ([v30 count])
              {
                id v34 = [v30 objectAtIndex:0];
                [v21 setObject:v34 forKey:@"companion_device_score"];
              }
              else
              {
                long long v38 = (void *)AFSiriLogContextDaemon;
                if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
                {
                  log = v38;
                  uint64_t v51 = [v22 companionAssistantID];
                  uint64_t v44 = [v22 companionIDSIdentifier];
                  *(_DWORD *)long long buf = v50;
                  uint64_t v59 = "-[ADMultiUserService validateAndReturnScores:classifiedUser:donatedScores:unknownUserSharedId:to"
                        "talUsers:ghostVoiceProfileDetected:]_block_invoke";
                  __int16 v60 = 2113;
                  id v61 = v51;
                  __int16 v62 = 2113;
                  id v63 = v44;
                  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "%s Empty Score array from assistantId %{private}@ idsIdentifier %{private}@", buf, 0x20u);
                }
              }
LABEL_42:
            }
            else
            {
LABEL_34:
              uint64_t v35 = [*(id *)(a1 + 56) objectForKey:v17];
              if (v35)
              {
                uint64_t v30 = (void *)v35;
                [v21 setObject:v35 forKey:@"nearby_devices_scores"];
                goto LABEL_42;
              }
            }
          }
          [*(id *)(a1 + 64) setObject:v21 forKey:v17];
          long long v39 = *(void **)(a1 + 72);
          long long v40 = [*(id *)(a1 + 48) objectForKey:v17];
          [v39 setObject:v40 forKey:v17];

          continue;
        }
        long long v19 = [*(id *)(*(void *)(a1 + 32) + 216) sharedUserID];
        unsigned int v20 = [v19 isEqualToString:v17];

        if (v20) {
          goto LABEL_22;
        }
        id v36 = AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)long long buf = 136315395;
          uint64_t v59 = "-[ADMultiUserService validateAndReturnScores:classifiedUser:donatedScores:unknownUserSharedId:totalUsers"
                ":ghostVoiceProfileDetected:]_block_invoke";
          __int16 v60 = 2113;
          id v61 = v17;
          _os_log_debug_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEBUG, "%s Ghost voice profile detected for sharedUserID (%{private}@)", buf, 0x16u);
        }
        [*(id *)(a1 + 32) _trackGhostVoiceProfile:v17];
        long long v37 = *(unsigned char **)(a1 + 96);
        if (v37) {
          *long long v37 = 1;
        }
      }
      id v14 = [obj countByEnumeratingWithState:&v54 objects:v64 count:16];
    }
    while (v14);
  }

  uint64_t v45 = [*(id *)(*(void *)(a1 + 32) + 24) sharedUserId];
  uint64_t v46 = *(void *)(*(void *)(a1 + 88) + 8);
  id v47 = *(void **)(v46 + 40);
  *(void *)(v46 + 40) = v45;
}

void sub_10029986C(uint64_t a1)
{
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  id obj = *(id *)(*(void *)(a1 + 32) + 208);
  id v2 = [obj countByEnumeratingWithState:&v18 objects:v22 count:16];
  if (v2)
  {
    id v3 = v2;
    uint64_t v14 = *(void *)v19;
    do
    {
      uint64_t v4 = 0;
      do
      {
        if (*(void *)v19 != v14) {
          objc_enumerationMutation(obj);
        }
        uint64_t v5 = [*(id *)(*(void *)(a1 + 32) + 208) objectForKey:*(void *)(*((void *)&v18 + 1) + 8 * (void)v4)];
        double v6 = +[ADCommunalDeviceUser saRemoteDeviceForHomeMember:v5];
        v15[0] = _NSConcreteStackBlock;
        v15[1] = 3221225472;
        void v15[2] = sub_100299AB4;
        v15[3] = &unk_100509958;
        id v7 = v6;
        id v16 = v7;
        id v8 = v5;
        id v17 = v8;
        id v9 = +[AFPeerInfo newWithBuilder:v15];
        BOOL v10 = +[ADCompanionService sharedInstance];
        uint64_t v11 = [[ADPeerInfo alloc] initWithAFPeerInfo:v9];
        id v12 = [v10 discoveryTypeForPeer:v11];

        if (v12) {
          [v7 setDiscoveryMode:v12];
        }
        if (v7 && [v8 voiceIDAllowedByUser]) {
          [*(id *)(a1 + 40) addObject:v7];
        }

        uint64_t v4 = (char *)v4 + 1;
      }
      while (v3 != v4);
      id v3 = [obj countByEnumeratingWithState:&v18 objects:v22 count:16];
    }
    while (v3);
  }
}

void sub_100299AB4(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  uint64_t v5 = [v3 assistantId];
  [v4 setAssistantIdentifier:v5];

  id v6 = [*(id *)(a1 + 40) companionIDSIdentifier];
  [v4 setIdsDeviceUniqueIdentifier:v6];
}

void sub_10029A038(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = +[ADHomeInfoManager sharedInfoManager];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  void v7[2] = sub_10029A104;
  v7[3] = &unk_100509908;
  uint64_t v5 = *(void **)(a1 + 40);
  void v7[4] = *(void *)(a1 + 32);
  id v8 = v3;
  id v9 = v5;
  id v6 = v3;
  [v4 getCurrentHomeMemberIds:v7];
}

void sub_10029A104(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = +[ADPreferences sharedPreferences];
  uint64_t v5 = [v4 sharedUserIdentifier];
  id v6 = (void *)v5;
  id v7 = (void *)AFMultiUserDefaultSharedUserId;
  if (v5) {
    id v8 = (void *)v5;
  }
  else {
    id v8 = (void *)AFMultiUserDefaultSharedUserId;
  }
  id v17 = v8;

  id v9 = +[ADPreferences sharedPreferences];
  uint64_t v10 = [v9 loggingSharedUserIdentifier];
  uint64_t v11 = (void *)v10;
  if (v10) {
    id v12 = (void *)v10;
  }
  else {
    id v12 = v7;
  }
  id v13 = v12;

  uint64_t v14 = [*(id *)(a1 + 32) _generateDeviceUserWithHomeUserUUID:v3 sharedUserId:v17 loggableSharedUserId:v13 adaccount:*(void *)(a1 + 40)];

  uint64_t v15 = *(void *)(a1 + 48);
  id v16 = +[ADCommunalDeviceUser saMultiUserInfo:v14];
  (*(void (**)(uint64_t, void *))(v15 + 16))(v15, v16);
}

uint64_t sub_10029A320(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 48) copy];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 40) = v2;
  return _objc_release_x1(v2, v4);
}

uint64_t sub_10029A5E8(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_10029A6A8(uint64_t a1)
{
  id v2 = *(void **)(*(void *)(a1 + 32) + 216);
  if (v2)
  {
    uint64_t v3 = [v2 sharedUserID];
  }
  else
  {
    uint64_t v3 = 0;
  }
  id v4 = objc_alloc_init((Class)NSMutableArray);
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  id v5 = *(id *)(*(void *)(a1 + 32) + 208);
  id v6 = [v5 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = *(void *)v13;
    do
    {
      id v9 = 0;
      do
      {
        if (*(void *)v13 != v8) {
          objc_enumerationMutation(v5);
        }
        uint64_t v10 = objc_msgSend(*(id *)(*(void *)(a1 + 32) + 208), "objectForKey:", *(void *)(*((void *)&v12 + 1) + 8 * (void)v9), (void)v12);
        uint64_t v11 = [v10 sharedUserID];

        if (v11) {
          [v4 addObject:v11];
        }

        id v9 = (char *)v9 + 1;
      }
      while (v7 != v9);
      id v7 = [v5 countByEnumeratingWithState:&v12 objects:v16 count:16];
    }
    while (v7);
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_10029A8D8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(v2 + 216);
  if (v3 || (uint64_t v3 = *(void **)(v2 + 224)) != 0)
  {
    uint64_t v4 = [v3 sharedUserID];
  }
  else
  {
    uint64_t v4 = 0;
  }
  id v5 = (id)v4;
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_10029A9F8(uint64_t a1)
{
  id v2 = objc_alloc_init((Class)NSMutableDictionary);
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void **)(v3 + 216);
  if (v4)
  {
    id v5 = sub_100290D94(v4, *(void **)(v3 + 152));
    id v6 = *(void **)(*(void *)(a1 + 32) + 216);
  }
  else
  {
    id v7 = *(void **)(v3 + 224);
    if (!v7) {
      goto LABEL_6;
    }
    uint64_t v8 = *(void **)(v3 + 160);
    id v9 = [*(id *)(v3 + 224) sharedUserID];
    uint64_t v10 = [v8 objectForKeyedSubscript:v9];
    id v5 = sub_100290D94(v7, v10);

    id v6 = *(void **)(*(void *)(a1 + 32) + 224);
  }
  uint64_t v11 = [v6 sharedUserID];
  [v2 setObject:v5 forKey:v11];

  uint64_t v3 = *(void *)(a1 + 32);
LABEL_6:
  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  id v12 = *(id *)(v3 + 208);
  id v13 = [v12 countByEnumeratingWithState:&v24 objects:v28 count:16];
  if (v13)
  {
    id v14 = v13;
    uint64_t v15 = *(void *)v25;
    do
    {
      id v16 = 0;
      do
      {
        if (*(void *)v25 != v15) {
          objc_enumerationMutation(v12);
        }
        id v17 = objc_msgSend(*(id *)(*(void *)(a1 + 32) + 208), "objectForKey:", *(void *)(*((void *)&v24 + 1) + 8 * (void)v16), (void)v24);
        long long v18 = v17;
        if (v17)
        {
          long long v19 = *(void **)(*(void *)(a1 + 32) + 160);
          long long v20 = [v17 sharedUserID];
          long long v21 = [v19 objectForKeyedSubscript:v20];
          id v22 = sub_100290D94(v18, v21);

          long long v23 = [v18 sharedUserID];
          [v2 setObject:v22 forKey:v23];
        }
        id v16 = (char *)v16 + 1;
      }
      while (v14 != v16);
      id v14 = [v12 countByEnumeratingWithState:&v24 objects:v28 count:16];
    }
    while (v14);
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_10029ACF4(uint64_t a1)
{
  id v40 = objc_alloc_init((Class)NSMutableArray);
  id v2 = (void *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = *(void **)(*(void *)(a1 + 32) + 216);
    uint64_t v4 = v2;
    id v5 = [v3 dictionaryRepresentation];
    *(_DWORD *)long long buf = 136315395;
    long long v50 = "-[ADMultiUserService showMultiUsersWithCompletion:]_block_invoke";
    __int16 v51 = 2113;
    uint64_t v52 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%s primaryUser:%{private}@:", buf, 0x16u);
  }
  uint64_t v6 = *(void *)(a1 + 32);
  if (*(void *)(v6 + 216))
  {
    id v7 = objc_msgSend(*(id *)(a1 + 32), "_augmentUserPropertiesWithHomeInfoForUser:");
    [v40 addObject:v7];

    uint64_t v6 = *(void *)(a1 + 32);
  }
  uint64_t v8 = *(void **)(v6 + 224);
  if (v8 && !*(void *)(v6 + 216))
  {
    id v9 = (void *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      uint64_t v10 = v9;
      uint64_t v11 = [v8 dictionaryRepresentation];
      *(_DWORD *)long long buf = 136315395;
      long long v50 = "-[ADMultiUserService showMultiUsersWithCompletion:]_block_invoke";
      __int16 v51 = 2113;
      uint64_t v52 = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "%s Device Owner:%{private}@:", buf, 0x16u);

      uint64_t v6 = *(void *)(a1 + 32);
      uint64_t v8 = *(void **)(v6 + 224);
    }
    id v12 = [(id)v6 _augmentUserPropertiesWithHomeInfoForUser:v8];
    [v40 addObject:v12];

    uint64_t v6 = *(void *)(a1 + 32);
  }
  long long v47 = 0u;
  long long v48 = 0u;
  long long v45 = 0u;
  long long v46 = 0u;
  id v13 = *(id *)(v6 + 208);
  id v14 = [v13 countByEnumeratingWithState:&v45 objects:v56 count:16];
  if (v14)
  {
    id v16 = v14;
    uint64_t v17 = *(void *)v46;
    *(void *)&long long v15 = 136315395;
    long long v38 = v15;
    do
    {
      long long v18 = 0;
      do
      {
        if (*(void *)v46 != v17) {
          objc_enumerationMutation(v13);
        }
        long long v19 = objc_msgSend(*(id *)(*(void *)(a1 + 32) + 208), "objectForKey:", *(void *)(*((void *)&v45 + 1) + 8 * (void)v18), v38);
        long long v20 = (void *)AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
        {
          long long v21 = v20;
          id v22 = [v19 dictionaryRepresentation];
          *(_DWORD *)long long buf = v38;
          long long v50 = "-[ADMultiUserService showMultiUsersWithCompletion:]_block_invoke";
          __int16 v51 = 2113;
          uint64_t v52 = v22;
          _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "%s sharedUser:%{private}@:", buf, 0x16u);
        }
        if (v19)
        {
          long long v23 = [*(id *)(a1 + 32) _augmentUserPropertiesWithHomeInfoForUser:v19];
          [v40 addObject:v23];
        }
        long long v18 = (char *)v18 + 1;
      }
      while (v16 != v18);
      id v16 = [v13 countByEnumeratingWithState:&v45 objects:v56 count:16];
    }
    while (v16);
  }

  if (AFIsATV())
  {
    long long v43 = 0u;
    long long v44 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    id v24 = *(id *)(*(void *)(a1 + 32) + 280);
    id v25 = [v24 countByEnumeratingWithState:&v41 objects:v55 count:16];
    if (v25)
    {
      id v27 = v25;
      uint64_t v28 = *(void *)v42;
      *(void *)&long long v26 = 136315651;
      long long v39 = v26;
      do
      {
        __int16 v29 = 0;
        do
        {
          if (*(void *)v42 != v28) {
            objc_enumerationMutation(v24);
          }
          uint64_t v30 = objc_msgSend(*(id *)(*(void *)(a1 + 32) + 280), "objectForKey:", *(void *)(*((void *)&v41 + 1) + 8 * (void)v29), v39);
          __int16 v31 = v30;
          if (v30)
          {
            id v32 = [v30 sharedUserID];

            if (!v32)
            {
              __int16 v33 = (void *)AFSiriLogContextDaemon;
              if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
              {
                id v34 = v33;
                uint64_t v35 = [v31 dictionaryRepresentation];
                id v36 = [v31 iCloudAltDSID];
                *(_DWORD *)long long buf = v39;
                long long v50 = "-[ADMultiUserService showMultiUsersWithCompletion:]_block_invoke";
                __int16 v51 = 2113;
                uint64_t v52 = v35;
                __int16 v53 = 2112;
                long long v54 = v36;
                _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_INFO, "%s [cloud-only]sharedUser:%{private}@ %@", buf, 0x20u);
              }
              long long v37 = [*(id *)(a1 + 32) _augmentUserPropertiesWithHomeInfoForUser:v31];
              [v40 addObject:v37];
            }
          }

          __int16 v29 = (char *)v29 + 1;
        }
        while (v27 != v29);
        id v27 = [v24 countByEnumeratingWithState:&v41 objects:v55 count:16];
      }
      while (v27);
    }
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_10029B808(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 208) objectForKey:*(void *)(a1 + 40)];
  uint64_t v3 = *(void **)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  id v7 = 0;
  [v3 _removeUser:v2 homeUserID:0 sharedUserID:v4 iCloudAltDSID:0 error:&v7];
  id v5 = v7;
  if (!v5) {
    [*(id *)(a1 + 32) _postRemovalStateCleanup];
  }
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6) {
    (*(void (**)(uint64_t, id))(v6 + 16))(v6, v5);
  }
}

void sub_10029BA14(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 272) objectForKey:*(void *)(a1 + 40)];
  uint64_t v3 = *(void **)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  id v7 = 0;
  [v3 _removeUser:v2 homeUserID:v4 sharedUserID:0 iCloudAltDSID:0 error:&v7];
  id v5 = v7;
  if (!v5) {
    [*(id *)(a1 + 32) _postRemovalStateCleanup];
  }
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6) {
    (*(void (**)(uint64_t, id))(v6 + 16))(v6, v5);
  }
}

id sub_10029C450(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 32)) {
    CFStringRef v1 = @"owner";
  }
  else {
    CFStringRef v1 = @"participant";
  }
  v6[0] = @"user";
  v6[1] = @"timestamp";
  v7[0] = v1;
  id v2 = +[NSDate date];
  [v2 timeIntervalSince1970];
  uint64_t v3 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
  v7[1] = v3;
  uint64_t v4 = +[NSDictionary dictionaryWithObjects:v7 forKeys:v6 count:2];

  return v4;
}

void sub_10029C6C8(uint64_t a1)
{
  id v2 = objc_alloc_init((Class)NSMutableArray);
  long long v34 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  uint64_t v24 = a1;
  id obj = *(id *)(*(void *)(a1 + 32) + 272);
  id v23 = [obj countByEnumeratingWithState:&v34 objects:v44 count:16];
  if (v23)
  {
    uint64_t v3 = 0;
    uint64_t v22 = *(void *)v35;
    do
    {
      uint64_t v4 = 0;
      id v5 = v3;
      do
      {
        if (*(void *)v35 != v22) {
          objc_enumerationMutation(obj);
        }
        uint64_t v25 = v4;
        uint64_t v3 = [*(id *)(*(void *)(v24 + 32) + 272) objectForKey:*(void *)(*((void *)&v34 + 1) + 8 * v4)];

        long long v32 = 0u;
        long long v33 = 0u;
        long long v30 = 0u;
        long long v31 = 0u;
        id v6 = *(id *)(v24 + 40);
        id v7 = [v6 countByEnumeratingWithState:&v30 objects:v43 count:16];
        if (v7)
        {
          id v8 = v7;
          uint64_t v9 = *(void *)v31;
          do
          {
            uint64_t v10 = 0;
            do
            {
              if (*(void *)v31 != v9) {
                objc_enumerationMutation(v6);
              }
              uint64_t v11 = *(void *)(*((void *)&v30 + 1) + 8 * (void)v10);
              id v12 = [v3 shareOwnerName];
              unsigned int v13 = [v12 isEqualToString:v11];

              if (v13)
              {
                id v14 = AFSiriLogContextDaemon;
                if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)long long buf = 136315394;
                  id v40 = "-[ADMultiUserService removeUserWithShareOwnerNames:completion:]_block_invoke";
                  __int16 v41 = 2112;
                  uint64_t v42 = v11;
                  _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "%s Adding (%@) for removal", buf, 0x16u);
                }
                [v2 addObject:v3];
              }
              uint64_t v10 = (char *)v10 + 1;
            }
            while (v8 != v10);
            id v8 = [v6 countByEnumeratingWithState:&v30 objects:v43 count:16];
          }
          while (v8);
        }

        uint64_t v4 = v25 + 1;
        id v5 = v3;
      }
      while ((id)(v25 + 1) != v23);
      id v23 = [obj countByEnumeratingWithState:&v34 objects:v44 count:16];
    }
    while (v23);
  }
  if ([v2 count])
  {
    long long v28 = 0u;
    long long v29 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    id v15 = v2;
    id v16 = [v15 countByEnumeratingWithState:&v26 objects:v38 count:16];
    if (v16)
    {
      id v17 = v16;
      uint64_t v18 = *(void *)v27;
      do
      {
        for (i = 0; i != v17; i = (char *)i + 1)
        {
          if (*(void *)v27 != v18) {
            objc_enumerationMutation(v15);
          }
          [*(id *)(v24 + 32) _removeUser:*(void *)(*((void *)&v26 + 1) + 8 * i) homeUserID:0 sharedUserID:0 iCloudAltDSID:0 error:0];
        }
        id v17 = [v15 countByEnumeratingWithState:&v26 objects:v38 count:16];
      }
      while (v17);
    }

    [*(id *)(v24 + 32) _postRemovalStateCleanup];
  }
  uint64_t v20 = *(void *)(v24 + 48);
  if (v20) {
    (*(void (**)(uint64_t, void))(v20 + 16))(v20, 0);
  }
}

id sub_10029CB28(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(v2 + 224);
  *(void *)(v2 + 224) = 0;

  uint64_t v4 = +[ADPreferences sharedPreferences];
  [v4 setDeviceOwner:0];

  id v5 = *(void **)(a1 + 32);
  return [v5 _saveDeviceOwnerToKeychainCache];
}

void sub_10029DA84(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  if (*(unsigned char *)(a1 + 88))
  {
    LOBYTE(v_Block_object_dispose(&STACK[0x220], 8) = 1;
    [v2 _addUser:v3 sharedUserId:*(void *)(a1 + 48) loggableSharedUserId:*(void *)(a1 + 56) iCloudAltDSID:*(void *)(a1 + 64) enrollmentName:*(void *)(a1 + 72) isPrimary:*(unsigned __int8 *)(a1 + 89) nonCloudSyncedUser:v8 completion:*(void *)(a1 + 80)];
  }
  else
  {
    uint64_t v4 = *(void *)(a1 + 64);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_10029DBD4;
    v9[3] = &unk_100509898;
    id v5 = *(id *)(a1 + 80);
    uint64_t v6 = *(void *)(a1 + 32);
    id v7 = *(void **)(a1 + 40);
    id v15 = v5;
    void v9[4] = v6;
    id v10 = v7;
    id v11 = *(id *)(a1 + 48);
    id v12 = *(id *)(a1 + 56);
    id v13 = *(id *)(a1 + 64);
    id v14 = *(id *)(a1 + 72);
    char v16 = *(unsigned char *)(a1 + 89);
    char v17 = *(unsigned char *)(a1 + 88);
    [v2 _allowVoiceIdentificationForThisUser:v3 iCloudAltDSID:v4 completion:v9];
  }
}

uint64_t sub_10029DBD4(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    uint64_t v4 = *(uint64_t (***)(void))(a1 + 80);
    if (!v4) {
      goto LABEL_6;
    }
    id v7 = v3;
    uint64_t v4 = (uint64_t (**)(void))v4[2]();
  }
  else
  {
    LOBYTE(v6) = *(unsigned char *)(a1 + 89);
    id v7 = 0;
    uint64_t v4 = (uint64_t (**)(void))[*(id *)(a1 + 32) _addUser:*(void *)(a1 + 40) sharedUserId:*(void *)(a1 + 48) loggableSharedUserId:*(void *)(a1 + 56) iCloudAltDSID:*(void *)(a1 + 64) enrollmentName:*(void *)(a1 + 72) isPrimary:*(unsigned __int8 *)(a1 + 88) nonCloudSyncedUser:v6 completion:*(void *)(a1 + 80)];
  }
  id v3 = v7;
LABEL_6:
  return _objc_release_x1(v4, v3);
}

id sub_10029F37C(uint64_t a1)
{
  LOBYTE(v2) = *(unsigned char *)(a1 + 120);
  return [*(id *)(a1 + 32) _addDeviceOwner:*(void *)(a1 + 40) sharedUserId:*(void *)(a1 + 48) loggableSharedUserId:*(void *)(a1 + 56) iCloudAltDSID:*(void *)(a1 + 64) audioAppSignals:*(void *)(a1 + 72) enrollmentName:*(void *)(a1 + 80) companionInfo:*(void *)(a1 + 88) shareOwnerName:*(void *)(a1 + 96) homeMemberSettings:*(void *)(a1 + 104) loggingAllowed:v2 completion:*(void *)(a1 + 112)];
}

void sub_10029F434(id a1)
{
  CFStringRef v1 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v2 = 136315138;
    id v3 = "-[ADMultiUserService _deleteShareForUser:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_INFO, "%s Share removal operation complete.", (uint8_t *)&v2, 0xCu);
  }
}

void sub_10029F90C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(NSObject **)(v4 + 256);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10029F9F0;
  block[3] = &unk_10050D3F0;
  void block[4] = v4;
  id v8 = v3;
  id v9 = *(id *)(a1 + 40);
  id v11 = *(id *)(a1 + 56);
  id v10 = *(id *)(a1 + 48);
  id v6 = v3;
  dispatch_async(v5, block);
}

void sub_10029F9F0(uint64_t a1)
{
  objc_storeStrong((id *)(*(void *)(a1 + 32) + 32), *(id *)(a1 + 40));
  int v2 = *(void **)(a1 + 40);
  if (v2 && [v2 count])
  {
    uint64_t v3 = [*(id *)(a1 + 40) objectForKey:*(void *)(a1 + 48)];
    if (v3)
    {
      uint64_t v4 = (void *)v3;
      if (AFIsATV()
        && +[AFFeatureFlags isLassoEnabled]
        && [*(id *)(*(void *)(a1 + 32) + 88) isEqualToString:*(void *)(a1 + 56)])
      {
        id v5 = AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
        {
          uint64_t v6 = *(void *)(a1 + 56);
          int v22 = 136315394;
          id v23 = "-[ADMultiUserService _allowVoiceIdentificationForThisUser:iCloudAltDSID:completion:]_block_invoke";
          __int16 v24 = 2112;
          uint64_t v25 = v6;
          _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "%s Set RMV enabled for the user requested during buddy flow with iCloudAltDSID%@", (uint8_t *)&v22, 0x16u);
        }
        id v7 = [v4 mutableCopy];
        [v7 setObject:&off_100523AB0 forKey:@"allowVoiceID"];
        [*(id *)(a1 + 40) setObject:v7 forKey:*(void *)(a1 + 48)];

        uint64_t v4 = v7;
      }
      id v8 = [v4 objectForKey:@"allowVoiceID"];
      id v9 = v8;
      if (v8 && [v8 integerValue] == (id)1)
      {
        uint64_t v10 = *(void *)(a1 + 64);
        if (v10) {
          (*(void (**)(uint64_t, void))(v10 + 16))(v10, 0);
        }
      }
      else
      {
        char v16 = AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
        {
          uint64_t v17 = *(void *)(a1 + 48);
          int v22 = 136315394;
          id v23 = "-[ADMultiUserService _allowVoiceIdentificationForThisUser:iCloudAltDSID:completion:]_block_invoke";
          __int16 v24 = 2112;
          uint64_t v25 = v17;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "%s VoiceID disallowed on fresh retrieval for (%@)", (uint8_t *)&v22, 0x16u);
        }
        uint64_t v18 = *(void *)(a1 + 64);
        if (v18)
        {
          long long v19 = +[NSError errorWithDomain:kAFAssistantErrorDomain code:6010 userInfo:&__NSDictionary0__struct];
          (*(void (**)(uint64_t, void *))(v18 + 16))(v18, v19);
        }
      }

      goto LABEL_24;
    }
    uint64_t v20 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      uint64_t v21 = *(void *)(a1 + 48);
      int v22 = 136315394;
      id v23 = "-[ADMultiUserService _allowVoiceIdentificationForThisUser:iCloudAltDSID:completion:]_block_invoke";
      __int16 v24 = 2112;
      uint64_t v25 = v21;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "%s Missing setting even on fresh retrieval (%@)", (uint8_t *)&v22, 0x16u);
    }
    uint64_t v13 = *(void *)(a1 + 64);
    if (v13)
    {
      uint64_t v14 = kAFAssistantErrorDomain;
      uint64_t v15 = 6008;
      goto LABEL_18;
    }
  }
  else
  {
    id v11 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      uint64_t v12 = *(void *)(a1 + 48);
      int v22 = 136315394;
      id v23 = "-[ADMultiUserService _allowVoiceIdentificationForThisUser:iCloudAltDSID:completion:]_block_invoke_2";
      __int16 v24 = 2112;
      uint64_t v25 = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "%s Missing all settings for (%@)", (uint8_t *)&v22, 0x16u);
    }
    uint64_t v13 = *(void *)(a1 + 64);
    if (v13)
    {
      uint64_t v14 = kAFAssistantErrorDomain;
      uint64_t v15 = 6009;
LABEL_18:
      uint64_t v4 = +[NSError errorWithDomain:v14 code:v15 userInfo:&__NSDictionary0__struct];
      (*(void (**)(uint64_t, void *))(v13 + 16))(v13, v4);
LABEL_24:
    }
  }
}

void sub_1002A1878(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1002A18A4(uint64_t a1, void *a2)
{
  uint64_t v3 = [a2 homeMemberSettings];
  if (!v3) {
    ++*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
}

id sub_1002A3DE4(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) _countVoiceProfiles];
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_1002A4D00(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    CFStringRef v5 = @"failed";
    int v7 = 136315650;
    id v8 = "-[ADMultiUserService _forceCloudSyncedUserDownload:]_block_invoke";
    __int16 v9 = 2112;
    if (!v3) {
      CFStringRef v5 = @"succeeded";
    }
    CFStringRef v10 = v5;
    __int16 v11 = 2112;
    id v12 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%s Download %@ with error: %@", (uint8_t *)&v7, 0x20u);
  }
  uint64_t v6 = *(void *)(a1 + 32);
  if (v6) {
    (*(void (**)(uint64_t, BOOL))(v6 + 16))(v6, v3 == 0);
  }
}

void sub_1002A62C8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = 136315650;
    int v7 = "-[ADMultiUserService _refreshUsersAndVoiceProfiles:]_block_invoke";
    __int16 v8 = 2112;
    uint64_t v9 = v5;
    __int16 v10 = 2112;
    id v11 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%s Removed (%@) with error (%@)", (uint8_t *)&v6, 0x20u);
  }
}

void sub_1002A63A0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = AFSiriLogContextDaemon;
  if (v3)
  {
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      int v7 = 136315650;
      __int16 v8 = "-[ADMultiUserService _refreshUsersAndVoiceProfiles:]_block_invoke";
      __int16 v9 = 2112;
      id v10 = v3;
      __int16 v11 = 2112;
      uint64_t v12 = v5;
      _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "%s There was an error %@ adding %@", (uint8_t *)&v7, 0x20u);
    }
  }
  else if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v6 = *(void **)(a1 + 32);
    int v7 = 136315394;
    __int16 v8 = "-[ADMultiUserService _refreshUsersAndVoiceProfiles:]_block_invoke";
    __int16 v9 = 2112;
    id v10 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%s Added %@", (uint8_t *)&v7, 0x16u);
  }
}

id sub_1002A64DC(uint64_t a1)
{
  if ([*(id *)(a1 + 32) count])
  {
    int v2 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      int v4 = 136315138;
      uint64_t v5 = "-[ADMultiUserService _refreshUsersAndVoiceProfiles:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s Configured LiveOn Users.", (uint8_t *)&v4, 0xCu);
    }
  }
  return [*(id *)(a1 + 40) _updateSAMultiUserInfo];
}

id sub_1002A6610(uint64_t a1)
{
  int v2 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)long long buf = 136315138;
    __int16 v8 = "-[ADMultiUserService refreshHomeKitOnboardedUsers]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s ", buf, 0xCu);
  }
  uint64_t v3 = *(void *)(a1 + 32);
  int v4 = *(void **)(v3 + 288);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_1002A6718;
  v6[3] = &unk_100509800;
  void v6[4] = v3;
  return [v4 settingsForMultiUserWithRefresh:1 completion:v6];
}

void sub_1002A6718(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)long long buf = 136315395;
    uint64_t v12 = "-[ADMultiUserService refreshHomeKitOnboardedUsers]_block_invoke";
    __int16 v13 = 2113;
    id v14 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%s userSettings = %{private}@", buf, 0x16u);
  }
  id v5 = [*(id *)(*(void *)(a1 + 32) + 88) copy];
  uint64_t v6 = *(void *)(a1 + 32);
  int v7 = *(NSObject **)(v6 + 256);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_1002A6864;
  v9[3] = &unk_10050E160;
  void v9[4] = v6;
  id v10 = v3;
  id v8 = v3;
  dispatch_async(v7, v9);
}

void sub_1002A6864(uint64_t a1)
{
  objc_storeStrong((id *)(*(void *)(a1 + 32) + 32), *(id *)(a1 + 40));
  long long v26 = +[NSMutableArray array];
  [*(id *)(a1 + 32) _updateHomeKitSettingsForDeviceOwner];
  if (![*(id *)(a1 + 32) _isHostingMultiUserLanguage]) {
    goto LABEL_43;
  }
  long long v32 = 0u;
  long long v33 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  id v2 = *(id *)(a1 + 40);
  id v3 = [v2 countByEnumeratingWithState:&v30 objects:v36 count:16];
  if (!v3) {
    goto LABEL_42;
  }
  id v5 = v3;
  char v6 = 0;
  char v27 = 0;
  uint64_t v7 = *(void *)v31;
  *(void *)&long long v4 = 136315138;
  long long v25 = v4;
  id obj = v2;
  do
  {
    id v8 = 0;
    do
    {
      if (*(void *)v31 != v7) {
        objc_enumerationMutation(obj);
      }
      uint64_t v9 = *(void *)(*((void *)&v30 + 1) + 8 * (void)v8);
      id v10 = objc_msgSend(*(id *)(*(void *)(a1 + 32) + 272), "objectForKey:", v9, v25);
      __int16 v11 = [*(id *)(*(void *)(a1 + 32) + 32) objectForKey:v9];
      uint64_t v12 = [v11 objectForKey:@"allowVoiceID"];
      unsigned __int8 v13 = [*(id *)(a1 + 32) personalDomainSettingsDidChange:v10 newUserSettings:v11];
      if (([*(id *)(a1 + 32) _updateHomeKitSettings:v9] & 1) == 0
        && !AFIsATV())
      {
        if (!v11 || [v12 integerValue] != (id)1) {
          goto LABEL_27;
        }
        char v16 = AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)long long buf = v25;
          long long v35 = "-[ADMultiUserService refreshHomeKitOnboardedUsers]_block_invoke";
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "%s New user participating in multi-user", buf, 0xCu);
        }
        [*(id *)(a1 + 32) _trackHomeUserUUIDForInFlightVoiceProfile:v9];
        uint64_t v17 = +[AFAnalytics sharedAnalytics];
        [v17 logEventWithType:6109 contextProvider:&stru_1005097D8];

        goto LABEL_21;
      }
      if (!v11) {
        goto LABEL_27;
      }
      if ([v12 integerValue] == (id)1)
      {
        if ((v6 & 1) != 0 || [v12 integerValue] != (id)1)
        {
          v27 |= v13;
          goto LABEL_27;
        }
        if (([v10 nonCloudSyncedUser] & 1) != 0
          || (id v14 = *(void **)(*(void *)(a1 + 32) + 248),
              [v10 sharedUserID],
              uint64_t v15 = objc_claimAutoreleasedReturnValue(),
              LOBYTE(v14) = [v14 isSATEnrolledForSiriProfileId:v15 forLanguageCode:*(void *)(*(void *)(a1 + 32) + 96)], v15, (v14 & 1) != 0))
        {
          char v6 = 0;
          goto LABEL_27;
        }
        uint64_t v18 = AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)long long buf = v25;
          long long v35 = "-[ADMultiUserService refreshHomeKitOnboardedUsers]_block_invoke";
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "%s newUsersJoined", buf, 0xCu);
        }
        os_signpost_id_t v19 = os_signpost_id_generate(AFSiriLogContextMultiUser);
        uint64_t v20 = AFSiriLogContextMultiUser;
        uint64_t v21 = v20;
        if (v19 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v20))
        {
          *(_WORD *)long long buf = 0;
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v21, OS_SIGNPOST_INTERVAL_BEGIN, v19, "MultiUserService", "New user was added", buf, 2u);
        }

        *(void *)(*(void *)(a1 + 32) + 16) = v19;
LABEL_21:
        if (AFIsATV()) {
          [v26 addObject:v9];
        }
        char v6 = 1;
        goto LABEL_27;
      }
      if (([v10 nonCloudSyncedUser] & 1) == 0) {
        [*(id *)(a1 + 32) removeUserWithHomeUUID:v9 completion:&stru_100509798];
      }
LABEL_27:

      id v8 = (char *)v8 + 1;
    }
    while (v5 != v8);
    id v22 = [obj countByEnumeratingWithState:&v30 objects:v36 count:16];
    id v5 = v22;
  }
  while (v22);

  if (v6)
  {
    id v23 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = v25;
      long long v35 = "-[ADMultiUserService refreshHomeKitOnboardedUsers]_block_invoke_2";
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "%s Triggering download", buf, 0xCu);
    }
    __int16 v24 = *(void **)(a1 + 32);
    v29[0] = _NSConcreteStackBlock;
    v29[1] = 3221225472;
    void v29[2] = sub_1002A6D50;
    v29[3] = &unk_10050B918;
    void v29[4] = v24;
    [v24 _forceCloudSyncedUserDownload:v29];
  }
  if (v27)
  {
    [*(id *)(a1 + 32) _saveSharedUsers];
    [*(id *)(a1 + 32) _updateSAMultiUserInfo];
    id v2 = +[NSNotificationCenter defaultCenter];
    [v2 postNotificationName:@"ADMultiUsersDidChangeNotification" object:0];
LABEL_42:
  }
LABEL_43:
}

void sub_1002A6D50(uint64_t a1, char a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(NSObject **)(v2 + 256);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1002A6DC8;
  v4[3] = &unk_10050CD50;
  char v5 = a2;
  void v4[4] = v2;
  dispatch_async(v3, v4);
}

void sub_1002A6DC8(uint64_t a1)
{
  uint64_t v2 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v3 = *(unsigned __int8 *)(a1 + 40);
    int v10 = 136315394;
    __int16 v11 = "-[ADMultiUserService refreshHomeKitOnboardedUsers]_block_invoke_2";
    __int16 v12 = 1024;
    int v13 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s Download completed, success: %{BOOL}d", (uint8_t *)&v10, 0x12u);
  }
  [*(id *)(a1 + 32) _untrackAllHomeUserUUIDsForInFlightVoiceProfile];
  long long v4 = AFSiriLogContextMultiUser;
  char v5 = v4;
  os_signpost_id_t v6 = *(void *)(*(void *)(a1 + 32) + 16);
  if (v6 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v4))
  {
    LOWORD(v10) = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v5, OS_SIGNPOST_INTERVAL_END, v6, "MultiUserService", "Cloud sync finished", (uint8_t *)&v10, 2u);
  }

  if (*(unsigned char *)(a1 + 40))
  {
    uint64_t v7 = AFSiriLogContextMultiUser;
    id v8 = v7;
    os_signpost_id_t v9 = *(void *)(*(void *)(a1 + 32) + 8);
    if (v9 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v7))
    {
      LOWORD(v10) = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v8, OS_SIGNPOST_INTERVAL_END, v9, "MultiUserService", "MultiUser is ready", (uint8_t *)&v10, 2u);
    }

    [*(id *)(a1 + 32) _updateSAMultiUserInfo];
  }
}

NSDictionary *__cdecl sub_1002A6F74(id a1)
{
  CFStringRef v5 = @"date";
  CFStringRef v1 = +[NSDate date];
  uint64_t v2 = +[NSDateFormatter localizedStringFromDate:v1 dateStyle:1 timeStyle:4];
  os_signpost_id_t v6 = v2;
  int v3 = +[NSDictionary dictionaryWithObjects:&v6 forKeys:&v5 count:1];

  return (NSDictionary *)v3;
}

void sub_1002A7050(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  if (v2)
  {
    int v3 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      int v4 = 136315394;
      CFStringRef v5 = "-[ADMultiUserService refreshHomeKitOnboardedUsers]_block_invoke_2";
      __int16 v6 = 2112;
      uint64_t v7 = v2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "%s Error when removing user (%@)", (uint8_t *)&v4, 0x16u);
    }
  }
}

void sub_1002A718C(uint64_t a1)
{
  uint64_t v2 = +[ADPreferences sharedPreferences];
  int v3 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)long long buf = 136315138;
    id v14 = "-[ADMultiUserService _primaryUserSharedUserIdentifierDidChangeNotification:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "%s ", buf, 0xCu);
  }
  int v4 = AFIsInternalInstall();
  uint64_t v5 = *(void *)(a1 + 32);
  if (!v4 || !*(unsigned char *)(v5 + 84))
  {
    if (!*(void *)(v5 + 216))
    {
LABEL_15:
      v12[0] = _NSConcreteStackBlock;
      v12[1] = 3221225472;
      void v12[2] = sub_1002A73D0;
      void v12[3] = &unk_10050B918;
      void v12[4] = v5;
      [(id)v5 _forceCloudSyncedUserDownload:v12];
      goto LABEL_17;
    }
    __int16 v6 = [v2 sharedUserIdentifier];
    uint64_t v7 = [v2 loggingSharedUserIdentifier];
    id v8 = [*(id *)(*(void *)(a1 + 32) + 216) sharedUserID];
    if ([v6 isEqualToString:v8])
    {
      os_signpost_id_t v9 = [*(id *)(*(void *)(a1 + 32) + 216) loggableSharedUserID];
      unsigned __int8 v10 = [v7 isEqualToString:v9];

      if ((v10 & 1) != 0 || !v6) {
        goto LABEL_16;
      }
    }
    else
    {

      if (!v6) {
        goto LABEL_16;
      }
    }
    if (v7)
    {
      __int16 v11 = AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)long long buf = 136315138;
        id v14 = "-[ADMultiUserService _primaryUserSharedUserIdentifierDidChangeNotification:]_block_invoke";
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "%s SharedUserId of primary user changed. Resetting primary user.", buf, 0xCu);
      }
      [*(id *)(a1 + 32) _resetPrimaryUser];

      uint64_t v5 = *(void *)(a1 + 32);
      goto LABEL_15;
    }
LABEL_16:
  }
LABEL_17:
}

void sub_1002A73D0(uint64_t a1, int a2)
{
  if (a2)
  {
    dispatch_time_t v3 = dispatch_time(0, 30000000000);
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(NSObject **)(v4 + 256);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1002A746C;
    block[3] = &unk_10050E138;
    void block[4] = v4;
    dispatch_after(v3, v5, block);
  }
}

id sub_1002A746C(uint64_t a1)
{
  return [*(id *)(a1 + 32) _refreshUsersAndVoiceProfiles:0];
}

void sub_1002A76E8(uint64_t a1)
{
  uint64_t v2 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v3 = *(_DWORD *)(a1 + 32);
    int v4 = 136315394;
    uint64_t v5 = "-[ADMultiUserService _multiUserListenerShouldAcceptNewConnection:]_block_invoke";
    __int16 v6 = 1024;
    int v7 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s MultiUser Connection Invalidated (pid=%d)", (uint8_t *)&v4, 0x12u);
  }
}

void sub_1002A77A4(uint64_t a1)
{
  uint64_t v2 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v3 = *(_DWORD *)(a1 + 32);
    int v4 = 136315394;
    uint64_t v5 = "-[ADMultiUserService _multiUserListenerShouldAcceptNewConnection:]_block_invoke";
    __int16 v6 = 1024;
    int v7 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s MultiUser Connection Interrupted (pid=%d)", (uint8_t *)&v4, 0x12u);
  }
}

uint64_t sub_1002A7BC0(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) _allUsersBySharedUserID];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 40) = v2;
  return _objc_release_x1(v2, v4);
}

void sub_1002A7C80(uint64_t a1)
{
  uint64_t v2 = +[AFPreferences sharedPreferences];
  uint64_t v3 = [v2 languageCode];

  if (v3 && ([v3 isEqualToString:*(void *)(*(void *)(a1 + 32) + 96)] & 1) == 0)
  {
    uint64_t v4 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      int v7 = 136315394;
      id v8 = "-[ADMultiUserService _languageCodeDidChange]_block_invoke";
      __int16 v9 = 2112;
      unsigned __int8 v10 = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%s Language changed to %@", (uint8_t *)&v7, 0x16u);
    }
    objc_storeStrong((id *)(*(void *)(a1 + 32) + 96), v3);
    unsigned int v5 = [*(id *)(a1 + 32) _isHostingMultiUserLanguage];
    __int16 v6 = *(void **)(a1 + 32);
    if (v5)
    {
      [v6 _refreshUsersAndVoiceProfiles:1];
      [*(id *)(a1 + 32) refreshHomeKitOnboardedUsers];
    }
    else
    {
      [v6 resetAllUsers];
    }
  }
}

void sub_1002A81C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1002A81F0(uint64_t a1)
{
  uint64_t v2 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v4 = 136315394;
    unsigned int v5 = "-[ADMultiUserService _initWithPreferences:ssrManager:homeInfoManager:]_block_invoke";
    __int16 v6 = 2080;
    int v7 = "com.apple.siri.corespeech.voiceprofilelist.change";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s Handling \"%s\" notification", (uint8_t *)&v4, 0x16u);
  }
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _refreshUsersAndVoiceProfiles:1];
}

void sub_1002A8330(id a1)
{
  id v6 = +[SSRVoiceProfileManager sharedInstance];
  CFStringRef v1 = [ADMultiUserService alloc];
  uint64_t v2 = +[ADPreferences sharedPreferences];
  uint64_t v3 = +[ADHomeInfoManager sharedInfoManager];
  id v4 = [(ADMultiUserService *)v1 _initWithPreferences:v2 ssrManager:v6 homeInfoManager:v3];
  unsigned int v5 = (void *)qword_1005860D0;
  qword_1005860D0 = (uint64_t)v4;
}

void sub_1002A83E8(uint64_t a1, void *a2)
{
  id v11 = a2;
  uint64_t v3 = [v11 sharedUserId];

  if (v3)
  {
    id v4 = *(void **)(a1 + 32);
    unsigned int v5 = [v11 sharedUserId];
    id v6 = [v4 objectForKey:v5];
    id v7 = [v6 mutableCopy];

    if (!v7)
    {
      id v7 = +[NSMutableArray array];
    }
    id v8 = +[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", [v11 confidenceScore]);
    [v7 addObject:v8];

    __int16 v9 = *(void **)(a1 + 32);
    unsigned __int8 v10 = [v11 sharedUserId];
    [v9 setObject:v7 forKey:v10];
  }
}

void sub_1002A8670(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (!v2[2])
  {
    uint64_t v3 = [v2 _fetchMappedMeCard];
    uint64_t v4 = *(void *)(a1 + 32);
    unsigned int v5 = *(void **)(v4 + 16);
    *(void *)(v4 + 16) = v3;

    uint64_t v6 = *(void *)(a1 + 32);
    if (*(void *)(v6 + 16))
    {
      id WeakRetained = objc_loadWeakRetained((id *)(v6 + 24));
      [WeakRetained addressBookManagerDidUpdateData:*(void *)(a1 + 32) meCard:*(void *)(*(void *)(a1 + 32) + 16)];
    }
  }
}

void sub_1002A881C(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) _fetchMappedMeCard];
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void **)(v3 + 16);
  *(void *)(v3 + 16) = v2;

  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 24));
  [WeakRetained addressBookManagerDidUpdateData:*(void *)(a1 + 32) meCard:*(void *)(*(void *)(a1 + 32) + 16)];
}

uint64_t sub_1002A8EF8(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (!v2[2])
  {
    uint64_t v3 = [v2 _fetchMappedMeCard];
    uint64_t v4 = *(void *)(a1 + 32);
    unsigned int v5 = *(void **)(v4 + 16);
    *(void *)(v4 + 16) = v3;
  }
  uint64_t v6 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);
  return v6();
}

void sub_1002A93FC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(unsigned char *)(v1 + 32))
  {
    uint64_t v2 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      int v11 = 136315394;
      __int16 v12 = "-[ADCoreBluetoothManager peripheral:didReadRSSI:error:]_block_invoke";
      __int16 v13 = 2112;
      uint64_t v14 = v1;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s %@ already invalidated", (uint8_t *)&v11, 0x16u);
    }
  }
  else
  {
    uint64_t v4 = [*(id *)(a1 + 40) identifier];
    unsigned int v5 = [*(id *)(*(void *)(a1 + 32) + 40) objectForKey:v4];

    if (v5)
    {
      uint64_t v6 = *(void *)(a1 + 48);
      if (v6)
      {
        id v7 = AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
        {
          uint64_t v9 = *(void *)(a1 + 40);
          int v11 = 136315650;
          __int16 v12 = "-[ADCoreBluetoothManager peripheral:didReadRSSI:error:]_block_invoke";
          __int16 v13 = 2112;
          uint64_t v14 = v9;
          __int16 v15 = 2112;
          uint64_t v16 = v6;
          _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "%s Error reading RSSI for %@: %@", (uint8_t *)&v11, 0x20u);
        }
      }
      [*(id *)(a1 + 32) _didReadRSSI:*(void *)(a1 + 56) forPeripheral:*(void *)(a1 + 40)];
    }
    else
    {
      id v8 = AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v10 = *(void *)(a1 + 40);
        int v11 = 136315394;
        __int16 v12 = "-[ADCoreBluetoothManager peripheral:didReadRSSI:error:]_block_invoke";
        __int16 v13 = 2112;
        uint64_t v14 = v10;
        _os_log_debug_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "%s Read RSSI for peripheral that we didn't sign up for: %@", (uint8_t *)&v11, 0x16u);
      }
    }
  }
}

void sub_1002A9D88(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 64));
  [WeakRetained invoke];
}

void sub_1002A9FD4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(void *)(v2 + 24))
  {
    uint64_t v3 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136315138;
      id v23 = "-[ADCoreBluetoothManager _retrieveConnectedDevicesInfoOnServices:completion:]_block_invoke";
      _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "%s Fatal error: ADCoreBluetoothManager is designed for one-time use!", buf, 0xCu);
    }
    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
  else
  {
    objc_storeStrong((id *)(v2 + 56), *(id *)(a1 + 40));
    id v4 = objc_alloc((Class)AFSafetyBlock);
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472;
    void v18[2] = sub_1002AA25C;
    _OWORD v18[3] = &unk_100509B78;
    void v18[4] = *(void *)(a1 + 32);
    id v19 = *(id *)(a1 + 48);
    id v5 = [v4 initWithBlock:v18];
    objc_storeWeak((id *)(*(void *)(a1 + 32) + 64), v5);
    dispatch_time_t v6 = dispatch_time(0, 5000000000);
    id v7 = *(NSObject **)(*(void *)(a1 + 32) + 8);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1002AA46C;
    block[3] = &unk_10050E138;
    id v17 = v5;
    id v8 = v5;
    dispatch_after(v6, v7, block);
    id v9 = objc_alloc((Class)CBCentralManager);
    uint64_t v10 = *(void *)(a1 + 32);
    uint64_t v11 = *(void *)(v10 + 8);
    uint64_t v20 = CBCentralManagerOptionShowPowerAlertKey;
    uint64_t v21 = &__kCFBooleanFalse;
    __int16 v12 = +[NSDictionary dictionaryWithObjects:&v21 forKeys:&v20 count:1];
    id v13 = [v9 initWithDelegate:v10 queue:v11 options:v12];
    uint64_t v14 = *(void *)(a1 + 32);
    __int16 v15 = *(void **)(v14 + 24);
    *(void *)(v14 + 24) = v13;
  }
}

void sub_1002AA25C(uint64_t a1)
{
  id v2 = *(id *)(a1 + 32);
  [*(id *)(*(void *)(a1 + 32) + 24) setDelegate:v2];
  uint64_t v3 = *(void *)(a1 + 32);
  if (*(unsigned char *)(v3 + 32))
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
  else
  {
    id v12 = v2;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v4 = [*(id *)(v3 + 40) allValues];
    id v5 = [v4 countByEnumeratingWithState:&v13 objects:v21 count:16];
    if (v5)
    {
      id v6 = v5;
      uint64_t v7 = *(void *)v14;
      do
      {
        for (i = 0; i != v6; i = (char *)i + 1)
        {
          if (*(void *)v14 != v7) {
            objc_enumerationMutation(v4);
          }
          uint64_t v9 = *(void *)(*((void *)&v13 + 1) + 8 * i);
          uint64_t v10 = AFSiriLogContextDaemon;
          if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)long long buf = 136315394;
            uint64_t v18 = "-[ADCoreBluetoothManager _retrieveConnectedDevicesInfoOnServices:completion:]_block_invoke";
            __int16 v19 = 2112;
            uint64_t v20 = v9;
            _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "%s Unable to read RSSI for peripheral %@ before timeout", buf, 0x16u);
          }
          uint64_t v11 = [*(id *)(a1 + 32) _adCoreBluetoothDeviceForPeripheral:v9 RSSI:0];
          [*(id *)(*(void *)(a1 + 32) + 48) addObject:v11];
          [*(id *)(*(void *)(a1 + 32) + 24) cancelPeripheralConnection:v9];
        }
        id v6 = [v4 countByEnumeratingWithState:&v13 objects:v21 count:16];
      }
      while (v6);
    }

    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
    id v2 = v12;
  }
}

id sub_1002AA46C(uint64_t a1)
{
  return [*(id *)(a1 + 32) invoke];
}

void sub_1002AA5A0(uint64_t a1, unint64_t a2)
{
  id v3 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", @"Queue %s did not respond to watchdog and is likely blocked.", dispatch_queue_get_label(*(dispatch_queue_t *)(a1 + 32)));
  id v4 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)long long buf = 136315394;
    uint64_t v7 = "-[ADCoreBluetoothManager _init]_block_invoke";
    __int16 v8 = 2112;
    id v9 = v3;
    _os_log_fault_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "%s %@", buf, 0x16u);
  }
  int v5 = AFIsInternalInstall();
  if (a2 <= 3 && v5) {
    WriteStackshotReport_async();
  }
}

void sub_1002AA7D4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    uint64_t v7 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      uint64_t v10 = *(void *)(a1 + 32);
      int v11 = 136315394;
      id v12 = "+[ADCoreBluetoothManager fetchCBUUIDForConnectedDeviceWithAddress:completion:]_block_invoke";
      __int16 v13 = 2112;
      uint64_t v14 = v10;
      _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "%s CBController failed to find CBUUID for device with address: %@", (uint8_t *)&v11, 0x16u);
    }
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 40);
    id v9 = [v5 identifier];
    (*(void (**)(uint64_t, void *))(v8 + 16))(v8, v9);
  }
}

id sub_1002AB0C4(void *a1)
{
  id v1 = a1;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  id v2 = [v1 countByEnumeratingWithState:&v20 objects:v24 count:16];
  if (v2)
  {
    id v3 = v2;
    id v4 = 0;
    id v5 = 0;
    uint64_t v6 = *(void *)v21;
    uint64_t v19 = AFDeviceContextKeyFlowContextUpdateCommand;
    do
    {
      for (i = 0; i != v3; i = (char *)i + 1)
      {
        if (*(void *)v21 != v6) {
          objc_enumerationMutation(v1);
        }
        uint64_t v8 = *(void **)(*((void *)&v20 + 1) + 8 * i);
        if (([v8 fromLocalDevice] & 1) == 0)
        {
          id v9 = [v8 deviceInfo];
          unsigned int v10 = [v9 isCommunalDevice];

          if (v10)
          {
            int v11 = objc_msgSend(v8, "af_validFlowContext");
            if (v11)
            {
              id v12 = [v8 contextMetadataForKey:v19];
              __int16 v13 = [v12 deliveryDate];
              uint64_t v14 = v13;
              if (!v4 || [v13 compare:v4] == (id)1)
              {
                id v15 = v14;

                id v16 = v11;
                id v17 = v5;
                id v5 = v16;

                id v4 = v15;
              }
            }
          }
        }
      }
      id v3 = [v1 countByEnumeratingWithState:&v20 objects:v24 count:16];
    }
    while (v3);
  }
  else
  {
    id v4 = 0;
    id v5 = 0;
  }

  return v5;
}

id sub_1002AB298(void *a1)
{
  id v1 = a1;
  id v2 = v1;
  if (!v1)
  {
    id v4 = 0;
    goto LABEL_48;
  }
  id v3 = [v1 count];
  if ((unint64_t)v3 <= 1)
  {
    id v4 = [v2 copy];
    goto LABEL_48;
  }
  id v5 = v3;
  id v41 = [objc_alloc((Class)NSMutableSet) initWithCapacity:v3];
  id v6 = [objc_alloc((Class)NSMutableSet) initWithCapacity:v5];
  long long v37 = v2;
  id v39 = [objc_alloc((Class)NSMutableArray) initWithCapacity:v5];
  long long v46 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  long long v49 = 0u;
  id obj = v2;
  id v7 = [obj countByEnumeratingWithState:&v46 objects:v57 count:16];
  if (!v7)
  {
    id v9 = 0;
    goto LABEL_33;
  }
  id v8 = v7;
  id v9 = 0;
  uint64_t v10 = *(void *)v47;
  do
  {
    for (i = 0; i != v8; i = (char *)i + 1)
    {
      if (*(void *)v47 != v10) {
        objc_enumerationMutation(obj);
      }
      id v12 = *(void **)(*((void *)&v46 + 1) + 8 * i);
      __int16 v13 = sub_1002AB6EC(v12);
      uint64_t v14 = sub_1002AB798(v12);
      id v15 = (void *)v14;
      if (v13)
      {
        unsigned int v16 = [v41 containsObject:v13];
        if (v15) {
          goto LABEL_12;
        }
      }
      else
      {
        unsigned int v16 = 0;
        if (v14)
        {
LABEL_12:
          unsigned int v17 = objc_msgSend(v6, "containsObject:", v15, v37);
          goto LABEL_15;
        }
      }
      unsigned int v17 = 0;
LABEL_15:
      if ((v16 | v17) == 1)
      {
        id v18 = v9;
        if (!v9)
        {
          id v18 = objc_alloc_init((Class)NSMutableArray);
          id v9 = v18;
        }
      }
      else
      {
        id v18 = v39;
      }
      objc_msgSend(v18, "addObject:", v12, v37);
      if (v13) {
        char v19 = v16;
      }
      else {
        char v19 = 1;
      }
      if ((v19 & 1) == 0) {
        [v41 addObject:v13];
      }
      if (v15) {
        char v20 = v17;
      }
      else {
        char v20 = 1;
      }
      if ((v20 & 1) == 0) {
        [v6 addObject:v15];
      }
    }
    id v8 = [obj countByEnumeratingWithState:&v46 objects:v57 count:16];
  }
  while (v8);
LABEL_33:

  id v21 = [v9 count];
  if (v21)
  {
    id v22 = v21;
    long long v23 = (void *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      long long v35 = v23;
      id v36 = [obj count];
      *(_DWORD *)long long buf = 136315650;
      uint64_t v52 = "ADDeviceContextDeduplicateTuples";
      __int16 v53 = 2048;
      long long v54 = v22;
      __int16 v55 = 2048;
      id v56 = v36;
      _os_log_error_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_ERROR, "%s Rejected %tu/%tu device context tuples.", buf, 0x20u);
    }
    if (AFIsInternalInstall())
    {
      long long v44 = 0u;
      long long v45 = 0u;
      long long v42 = 0u;
      long long v43 = 0u;
      id v24 = v9;
      id v25 = [v24 countByEnumeratingWithState:&v42 objects:v50 count:16];
      if (v25)
      {
        id v26 = v25;
        uint64_t v27 = *(void *)v43;
        do
        {
          for (j = 0; j != v26; j = (char *)j + 1)
          {
            if (*(void *)v43 != v27) {
              objc_enumerationMutation(v24);
            }
            long long v29 = (void *)AFSiriLogContextDaemon;
            if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
            {
              long long v30 = *(void **)(*((void *)&v42 + 1) + 8 * (void)j);
              long long v31 = v29;
              long long v32 = [v30 content];
              long long v33 = [v30 info];
              *(_DWORD *)long long buf = 136315650;
              uint64_t v52 = "ADDeviceContextDeduplicateTuples";
              __int16 v53 = 2112;
              long long v54 = v32;
              __int16 v55 = 2112;
              id v56 = v33;
              _os_log_error_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_ERROR, "%s Rejected %@ from %@.", buf, 0x20u);
            }
          }
          id v26 = [v24 countByEnumeratingWithState:&v42 objects:v50 count:16];
        }
        while (v26);
      }
    }
  }
  id v4 = objc_msgSend(v39, "copy", v37);

  id v2 = v38;
LABEL_48:

  return v4;
}

id sub_1002AB6EC(void *a1)
{
  id v1 = a1;
  id v2 = [v1 content];
  id v3 = [v2 deviceInfo];
  id v4 = sub_10017504C(v3);
  if (v4)
  {
    id v5 = v4;
    id v6 = v5;
  }
  else
  {
    id v7 = [v1 info];
    id v6 = sub_10017504C(v7);

    id v5 = 0;
  }

  return v6;
}

id sub_1002AB798(void *a1)
{
  id v1 = a1;
  id v2 = [v1 content];
  id v3 = [v2 deviceInfo];
  id v4 = sub_1001750D0(v3);
  if (v4)
  {
    id v5 = v4;
    id v6 = v5;
  }
  else
  {
    id v7 = [v1 info];
    id v6 = sub_1001750D0(v7);

    id v5 = 0;
  }

  return v6;
}

id sub_1002AB844(uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 32)) {
    sub_1001750D0(a2);
  }
  else {
  id v2 = [a2 idsDeviceUniqueIdentifier];
  }
  return v2;
}

BOOL sub_1002AB88C(id a1, id a2)
{
  id v2 = a2;
  objc_opt_class();
  char isKindOfClass = objc_opt_isKindOfClass();

  return isKindOfClass & 1;
}

id sub_1002AB8D8(void *a1)
{
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    if ([v1 count])
    {
      uint64_t v28 = 0;
      long long v29 = _NSConcreteStackBlock;
      uint64_t v30 = 3221225472;
      long long v31 = sub_1002ABBF8;
      long long v32 = &unk_100509BB8;
      char v33 = 1;
      id v3 = AFPeerContentTupleGetContentMapFromArray();
      id v4 = 0;
      id v5 = [v4 count];
      if (v5)
      {
        id v6 = v5;
        id v7 = (void *)AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
        {
          char v20 = v7;
          *(_DWORD *)long long buf = 136315650;
          id v36 = "ADDeviceProximityGetMapByAssistantIdentifierFromTuples";
          __int16 v37 = 2048;
          long long v38 = v6;
          __int16 v39 = 2048;
          id v40 = [v2 count];
          _os_log_error_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "%s Rejected %tu/%tu device context tuples.", buf, 0x20u);
        }
        if (AFIsInternalInstall())
        {
          id v22 = v3;
          long long v23 = v2;
          long long v26 = 0u;
          long long v27 = 0u;
          long long v24 = 0u;
          long long v25 = 0u;
          id v21 = v4;
          id v8 = v4;
          id v9 = [v8 countByEnumeratingWithState:&v24 objects:v34 count:16];
          if (v9)
          {
            id v10 = v9;
            uint64_t v11 = *(void *)v25;
            do
            {
              for (i = 0; i != v10; i = (char *)i + 1)
              {
                if (*(void *)v25 != v11) {
                  objc_enumerationMutation(v8);
                }
                __int16 v13 = (void *)AFSiriLogContextDaemon;
                if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
                {
                  uint64_t v14 = *(void **)(*((void *)&v24 + 1) + 8 * i);
                  id v15 = v13;
                  unsigned int v16 = [v14 content];
                  unsigned int v17 = [v14 info];
                  id v18 = AFPeerInfoGetCompactDescription();
                  *(_DWORD *)long long buf = 136315650;
                  id v36 = "ADDeviceProximityGetMapByAssistantIdentifierFromTuples";
                  __int16 v37 = 2112;
                  long long v38 = v16;
                  __int16 v39 = 2112;
                  id v40 = v18;
                  _os_log_error_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "%s Rejected %@ from %@.", buf, 0x20u);
                }
              }
              id v10 = [v8 countByEnumeratingWithState:&v24 objects:v34 count:16];
            }
            while (v10);
          }

          id v3 = v22;
          id v2 = v23;
          id v4 = v21;
        }
      }
    }
    else
    {
      id v3 = &__NSDictionary0__struct;
    }
  }
  else
  {
    id v3 = 0;
  }

  return v3;
}

id sub_1002ABBF8(uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 32)) {
    sub_10017504C(a2);
  }
  else {
  id v2 = [a2 assistantIdentifier];
  }
  return v2;
}

BOOL sub_1002ABC40(id a1, id a2)
{
  id v2 = a2;
  objc_opt_class();
  char isKindOfClass = objc_opt_isKindOfClass();

  return isKindOfClass & 1;
}

id sub_1002ABC8C(void *a1)
{
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    if ([v1 count])
    {
      id v3 = objc_msgSend(v2, "af_lenientMappedArray:", &stru_100509C58);
    }
    else
    {
      id v3 = &__NSArray0__struct;
    }
  }
  else
  {
    id v3 = 0;
  }

  return v3;
}

AFDeviceContext *__cdecl sub_1002ABD04(id a1, AFPeerContentTuple *a2)
{
  return (AFDeviceContext *)[(AFPeerContentTuple *)a2 content];
}

id sub_1002ABD0C(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v5 = [v3 count];
  id v6 = 0;
  if (v4 && v5)
  {
    id v7 = sub_10017504C(v4);
    if ([v7 length])
    {
      id v8 = [v3 objectForKey:v7];

      if (v8)
      {
LABEL_11:
        id v6 = [v8 integerValue];

        goto LABEL_12;
      }
    }
    else
    {
    }
    id v9 = sub_1001750D0(v4);
    if ([v9 length])
    {
      id v8 = [v3 objectForKey:v9];
    }
    else
    {
      id v8 = 0;
    }

    goto LABEL_11;
  }
LABEL_12:

  return v6;
}

id sub_1002ABDE8(uint64_t a1, void *a2)
{
  id v18 = a2;
  id v2 = [v18 content];
  id v20 = objc_alloc_init((Class)NSMutableDictionary);
  id v19 = objc_alloc_init((Class)NSMutableArray);
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  id obj = [v2 allContextKeys];
  id v3 = [obj countByEnumeratingWithState:&v29 objects:v33 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v30;
    do
    {
      for (i = 0; i != v4; i = (char *)i + 1)
      {
        if (*(void *)v30 != v5) {
          objc_enumerationMutation(obj);
        }
        uint64_t v7 = *(void *)(*((void *)&v29 + 1) + 8 * i);
        id v8 = [v2 contextMetadataForKey:v7];
        id v9 = [v2 serializedHistoricalContextForKey:v7];
        id v10 = [v2 historicalContextMetadataForKey:v7];
        if ([v9 count])
        {
          uint64_t v11 = [v8 deliveryDate];
          id v12 = [v11 compare:*(void *)(a1 + 32)];

          if (v12 == (id)1)
          {
            v23[0] = _NSConcreteStackBlock;
            v23[1] = 3221225472;
            void v23[2] = sub_1002AC0F4;
            v23[3] = &unk_100509C80;
            id v24 = *(id *)(a1 + 32);
            id v25 = v9;
            id v26 = v20;
            uint64_t v27 = v7;
            id v28 = v19;
            [v10 enumerateObjectsWithOptions:2 usingBlock:v23];
          }
        }
      }
      id v4 = [obj countByEnumeratingWithState:&v29 objects:v33 count:16];
    }
    while (v4);
  }

  if ([v20 count])
  {
    uint64_t v13 = [v2 updatedContextWithSerializedContextByKey:v20 metadata:v19];

    id v2 = (void *)v13;
  }
  id v14 = objc_alloc((Class)AFPeerContentTuple);
  id v15 = [v18 info];
  id v16 = [v14 initWithInfo:v15 content:v2];

  return v16;
}

void sub_1002AC0F4(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  id v7 = a2;
  id v8 = [v7 deliveryDate];
  id v9 = [v8 compare:*(void *)(a1 + 32)];

  if (v9 != (id)1)
  {
    id v10 = [*(id *)(a1 + 40) objectAtIndex:a3];
    [*(id *)(a1 + 48) setObject:v10 forKey:*(void *)(a1 + 56)];
    [*(id *)(a1 + 64) addObject:v7];
    uint64_t v11 = AFSiriLogContextUtility;
    if (os_log_type_enabled(AFSiriLogContextUtility, OS_LOG_TYPE_DEBUG))
    {
      int v12 = 136315394;
      uint64_t v13 = "ADDeviceContextTuplesAdjustedForDate_block_invoke_2";
      __int16 v14 = 2112;
      id v15 = v7;
      _os_log_debug_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "%s #hal Adjusted context for %@", (uint8_t *)&v12, 0x16u);
    }
    *a4 = 1;
  }
}

uint64_t sub_1002ACB78(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1002ACB88(uint64_t a1)
{
}

void sub_1002ACB90(uint64_t a1)
{
  id v2 = sub_1002ACDB0(*(void **)(*(void *)(a1 + 32) + 16));
  id v3 = *(void **)(*(void *)(a1 + 32) + 16);
  id v21 = v2;
  id v4 = v3;
  id v5 = SAUserIdentityClassificationUnknownValue;
  if ([v21 count] != (id)1)
  {
    if ((unint64_t)[v21 count] < 2) {
      goto LABEL_19;
    }
    id v7 = [v21 firstObject];
    uint64_t v13 = [v4 objectForKey:v7];
    uint64_t v14 = (uint64_t)[v13 integerValue];

    int v12 = [v21 objectAtIndex:1];
    id v15 = [v4 objectForKey:v12];
    id v16 = [v15 integerValue];

    if (v14 >= 46)
    {
      if (v14 - (uint64_t)v16 >= 16)
      {
        if ((unint64_t)v14 <= 0x59)
        {
          unsigned int v17 = (id *)&SAUserIdentityClassificationUnsure1Value;
          if ((unint64_t)v14 > 0x37) {
            unsigned int v17 = (id *)&SAUserIdentityClassificationKnownValue;
          }
        }
        else
        {
          unsigned int v17 = (id *)&SAUserIdentityClassificationConfidentValue;
        }
      }
      else
      {
        unsigned int v17 = (id *)&SAUserIdentityClassificationUnsureNValue;
      }
      id v18 = *v17;

      id v5 = v18;
    }
    goto LABEL_17;
  }
  id v6 = [v4 allKeys];
  id v7 = [v6 firstObject];

  id v8 = [v4 objectForKey:v7];
  uint64_t v9 = (uint64_t)[v8 integerValue];

  if (v9 >= 46)
  {
    id v10 = (id *)&SAUserIdentityClassificationConfidentValue;
    uint64_t v11 = (id *)&SAUserIdentityClassificationKnownValue;
    if ((unint64_t)v9 <= 0x37) {
      uint64_t v11 = (id *)&SAUserIdentityClassificationUnsure1Value;
    }
    if ((unint64_t)v9 <= 0x59) {
      id v10 = v11;
    }
    int v12 = v5;
    id v5 = *v10;
LABEL_17:
  }
LABEL_19:

  uint64_t v19 = *(void *)(*(void *)(a1 + 40) + 8);
  id v20 = *(void **)(v19 + 40);
  *(void *)(v19 + 40) = v5;
}

id sub_1002ACDB0(void *a1)
{
  id v1 = a1;
  id v2 = [v1 keysSortedByValueUsingComparator:&stru_100509D30];
  id v3 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    int v5 = 136315394;
    id v6 = "_ADMultiUserTestSupportSortSharedIDsByScoresDescending";
    __int16 v7 = 2112;
    id v8 = v2;
    _os_log_debug_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "%s Sorted IDs: %@", (uint8_t *)&v5, 0x16u);
    id v3 = AFSiriLogContextDaemon;
  }
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    int v5 = 136315394;
    id v6 = "_ADMultiUserTestSupportSortSharedIDsByScoresDescending";
    __int16 v7 = 2112;
    id v8 = v1;
    _os_log_debug_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "%s sharedIDs dict: %@", (uint8_t *)&v5, 0x16u);
  }

  return v2;
}

int64_t sub_1002ACF04(id a1, NSNumber *a2, NSNumber *a3)
{
  id v4 = a3;
  NSInteger v5 = [(NSNumber *)a2 integerValue];
  NSInteger v6 = [(NSNumber *)v4 integerValue];

  if (v5 > v6) {
    return -1;
  }
  else {
    return v5 < v6;
  }
}

void sub_1002AD0E8(uint64_t a1)
{
  sub_1002ACDB0(*(void **)(*(void *)(a1 + 32) + 16));
  id v12 = (id)objc_claimAutoreleasedReturnValue();
  if ([v12 count])
  {
    id v2 = [v12 firstObject];
    id v3 = [*(id *)(*(void *)(a1 + 32) + 16) objectForKey:v2];
    uint64_t v4 = (uint64_t)[v3 integerValue];

    if (v4 > 45)
    {
      id v10 = [v2 copy];
      uint64_t v11 = *(void *)(*(void *)(a1 + 40) + 8);
      __int16 v7 = *(void **)(v11 + 40);
      *(void *)(v11 + 40) = v10;
    }
    else
    {
      uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8);
      id v6 = AFMultiUserDefaultSharedUserId;
      __int16 v7 = *(void **)(v5 + 40);
      *(void *)(v5 + 40) = v6;
    }
  }
  else
  {
    uint64_t v8 = *(void *)(*(void *)(a1 + 40) + 8);
    id v9 = AFMultiUserDefaultSharedUserId;
    id v2 = *(void **)(v8 + 40);
    *(void *)(v8 + 40) = v9;
  }
}

uint64_t sub_1002AD2DC(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 16) copy];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 40) = v2;
  return _objc_release_x1(v2, v4);
}

uint64_t sub_1002AD440(uint64_t a1)
{
  id v2 = *(void **)(*(void *)(a1 + 32) + 16);
  if (*(unsigned char *)(a1 + 64))
  {
    [*(id *)(*(void *)(a1 + 32) + 16) removeAllObjects];
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void **)(v3 + 16);
    *(void *)(v3 + 16) = 0;
  }
  else
  {
    if (!v2)
    {
      id v5 = objc_alloc_init((Class)NSMutableDictionary);
      uint64_t v6 = *(void *)(a1 + 32);
      __int16 v7 = *(void **)(v6 + 16);
      *(void *)(v6 + 16) = v5;

      id v2 = *(void **)(*(void *)(a1 + 32) + 16);
    }
    uint64_t v4 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [*(id *)(a1 + 40) integerValue]);
    [v2 setObject:v4 forKey:*(void *)(a1 + 48)];
  }

  uint64_t result = *(void *)(a1 + 56);
  if (result)
  {
    id v9 = *(uint64_t (**)(void))(result + 16);
    return v9();
  }
  return result;
}

void sub_1002AD618(id a1)
{
  id v1 = [[ADMultiUserTestSupport alloc] _init];
  uint64_t v2 = qword_1005860E0;
  qword_1005860E0 = (uint64_t)v1;
  _objc_release_x1(v1, v2);
}

void sub_1002AD8D8(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void **)(a1 + 32);
  id v4 = a2;
  id v5 = [v3 alarms];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  void v7[2] = sub_1002AD998;
  v7[3] = &unk_10050DF10;
  id v6 = *(id *)(a1 + 40);
  void v7[4] = *(void *)(a1 + 32);
  id v8 = v6;
  [v4 updateAlarms:v5 completionHandler:v7];
}

void sub_1002AD998(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (*(void *)(a1 + 40))
  {
    id v4 = objc_msgSend(objc_alloc((Class)NSMutableArray), "initWithCapacity:", objc_msgSend(v3, "count"));
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    id v5 = v3;
    id v6 = [v5 countByEnumeratingWithState:&v12 objects:v16 count:16];
    if (v6)
    {
      id v7 = v6;
      uint64_t v8 = *(void *)v13;
      do
      {
        id v9 = 0;
        do
        {
          if (*(void *)v13 != v8) {
            objc_enumerationMutation(v5);
          }
          id v10 = objc_msgSend(*(id *)(*((void *)&v12 + 1) + 8 * (void)v9), "identifier", (void)v12);
          [v4 addObject:v10];

          id v9 = (char *)v9 + 1;
        }
        while (v7 != v9);
        id v7 = [v5 countByEnumeratingWithState:&v12 objects:v16 count:16];
      }
      while (v7);
    }

    uint64_t v11 = [*(id *)(a1 + 32) createResponse];
    [v11 setAlarmIdentifiers:v4];
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

void sub_1002ADCC4(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  id v5 = [v3 criteria];
  id v6 = [*(id *)(a1 + 32) options];
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1002ADD94;
  v8[3] = &unk_10050DF10;
  id v7 = *(id *)(a1 + 40);
  void v8[4] = *(void *)(a1 + 32);
  id v9 = v7;
  [v4 fetchAlarmsMeetingCriteria:v5 searchOptions:v6 completionHandler:v8];
}

void sub_1002ADD94(uint64_t a1, void *a2, void *a3)
{
  id v8 = a2;
  id v5 = a3;
  uint64_t v6 = *(void *)(a1 + 40);
  if (v6)
  {
    if (v8)
    {
      id v7 = [*(id *)(a1 + 32) createResponse];
      [v7 setResults:v8];
      (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
    }
    else
    {
      (*(void (**)(uint64_t, void, id))(v6 + 16))(v6, 0, v5);
    }
  }
}

void sub_1002ADED8(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  id v5 = [v3 alarmURLs];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  void v7[2] = sub_1002ADF98;
  v7[3] = &unk_10050DEE8;
  id v6 = *(id *)(a1 + 40);
  void v7[4] = *(void *)(a1 + 32);
  id v8 = v6;
  [v4 dismissAlarmsWithURLs:v5 completionHandler:v7];
}

void sub_1002ADF98(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  uint64_t v5 = *(void *)(a1 + 40);
  if (v5)
  {
    id v7 = v3;
    if (v3)
    {
      (*(void (**)(uint64_t, void, id))(v5 + 16))(v5, 0, v3);
    }
    else
    {
      id v6 = [*(id *)(a1 + 32) createResponse];
      (*(void (**)(uint64_t, void *, void))(v5 + 16))(v5, v6, 0);
    }
    id v4 = v7;
  }
}

void sub_1002AE0C8(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  uint64_t v5 = [v3 alarmIdentifiers];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  void v7[2] = sub_1002AE188;
  v7[3] = &unk_10050DEE8;
  id v6 = *(id *)(a1 + 40);
  void v7[4] = *(void *)(a1 + 32);
  id v8 = v6;
  [v4 deleteAlarmsWithIdentifiers:v5 completionHandler:v7];
}

void sub_1002AE188(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  uint64_t v5 = *(void *)(a1 + 40);
  if (v5)
  {
    id v7 = v3;
    if (v3)
    {
      (*(void (**)(uint64_t, void, id))(v5 + 16))(v5, 0, v3);
    }
    else
    {
      id v6 = [*(id *)(a1 + 32) createResponse];
      (*(void (**)(uint64_t, void *, void))(v5 + 16))(v5, v6, 0);
    }
    id v4 = v7;
  }
}

void sub_1002AE2B8(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  uint64_t v5 = [v3 alarm];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  void v7[2] = sub_1002AE378;
  v7[3] = &unk_100509D58;
  id v6 = *(id *)(a1 + 40);
  void v7[4] = *(void *)(a1 + 32);
  id v8 = v6;
  [v4 addAlarm:v5 completionHandler:v7];
}

void sub_1002AE378(uint64_t a1, void *a2, void *a3)
{
  id v9 = a2;
  id v5 = a3;
  uint64_t v6 = *(void *)(a1 + 40);
  if (v6)
  {
    if (v9)
    {
      id v7 = [*(id *)(a1 + 32) createResponse];
      id v8 = [v9 identifier];
      [v7 setAlarmIdentifier:v8];

      (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
    }
    else
    {
      (*(void (**)(uint64_t, void, id))(v6 + 16))(v6, 0, v5);
    }
  }
}

id sub_1002AE45C(int a1)
{
  if (a1 == 1 || a1 == 2)
  {
    uint64_t v2 = objc_opt_class();
  }
  else
  {
    uint64_t v2 = 0;
  }
  return v2;
}

void sub_1002AE8D0(uint64_t a1)
{
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v2 = *(void **)(a1 + 40);
    uint64_t v4 = *(void *)(a1 + 48);
    uint64_t v5 = *(void *)(a1 + 64);
    _[v2 _appPunchOutHandler:v3 forDomain:v4 completion:v5];
  }
  else
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      id v23 = *(id *)(a1 + 32);
      uint64_t v6 = [v23 toneLibraryAlertType];
      id v7 = [v6 integerValue];

      id v8 = [v23 itemURL];

      if (v8)
      {
        id v9 = [objc_alloc((Class)off_100583390()) initWithType:v7];
        id v10 = objc_alloc((Class)NSURL);
        uint64_t v11 = [v23 itemURL];
        id v12 = [v10 initWithString:v11];
        [v9 setExternalToneFileURL:v12];

        [v9 setShouldIgnoreRingerSwitch:1];
        long long v13 = [off_100583398() alertWithConfiguration:v9];
        [v13 play];
      }
      else
      {
        [off_100583398() playAlertForType:v7];
      }
      uint64_t v21 = *(void *)(a1 + 64);
      id v22 = objc_alloc_init((Class)SACommandSucceeded);
      (*(void (**)(uint64_t, id, void))(v21 + 16))(v21, v22, 0);
    }
    else if ([*(id *)(a1 + 56) isFromRemote])
    {
      id v14 = +[AFSiriActivationContext newWithBuilder:&stru_100509DC0];
      long long v15 = +[AFSiriActivationConnection sharedConnection];
      v25[0] = _NSConcreteStackBlock;
      v25[1] = 3221225472;
      v25[2] = sub_1002AEBD8;
      void v25[3] = &unk_100509DE8;
      *(_OWORD *)id v24 = *(_OWORD *)(a1 + 32);
      id v16 = v24[0];
      int8x16_t v26 = vextq_s8(*(int8x16_t *)v24, *(int8x16_t *)v24, 8uLL);
      id v27 = *(id *)(a1 + 48);
      id v29 = *(id *)(a1 + 64);
      id v28 = *(id *)(a1 + 56);
      [v15 activateWithRequestInfo:0 context:v14 completion:v25];
    }
    else
    {
      uint64_t v18 = *(void *)(a1 + 32);
      unsigned int v17 = *(void **)(a1 + 40);
      uint64_t v19 = *(void *)(a1 + 48);
      uint64_t v20 = *(void *)(a1 + 64);
      [v17 _unhandledCommand:v18 forDomain:v19 completion:v20];
    }
  }
}

void sub_1002AEBD8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [v3 error];

  if (v4)
  {
    uint64_t v5 = (void *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      id v10 = v5;
      uint64_t v11 = [v3 error];
      int v12 = 136315394;
      long long v13 = "-[ADFauxUIService handleCommand:forDomain:executionContext:reply:]_block_invoke_3";
      __int16 v14 = 2112;
      long long v15 = v11;
      _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "%s Unable to bring up UI: %@", (uint8_t *)&v12, 0x16u);
    }
    uint64_t v6 = [v3 error];
    id v7 = +[AFError errorWithCode:12 description:0 underlyingError:v6];

    [*(id *)(a1 + 32) _unhandledCommand:*(void *)(a1 + 40) error:v7 forDomain:*(void *)(a1 + 48) completion:*(void *)(a1 + 64)];
  }
  else
  {
    id v7 = +[ADCommandCenter sharedCommandCenter];
    uint64_t v8 = *(void *)(a1 + 40);
    id v9 = [*(id *)(a1 + 56) info];
    [v7 handleCommand:v8 withExecutionContextMatchingInfo:v9 completion:*(void *)(a1 + 64)];
  }
}

void sub_1002AED78(id a1, AFSiriActivationContextMutating *a2)
{
  uint64_t v2 = a2;
  [(AFSiriActivationContextMutating *)v2 setTimestamp:mach_absolute_time()];
  [(AFSiriActivationContextMutating *)v2 setSource:12];
  [(AFSiriActivationContextMutating *)v2 setEvent:18];
}

id sub_1002AEDD8()
{
  if (qword_100586108 != -1) {
    dispatch_once(&qword_100586108, &stru_100509E28);
  }
  id v0 = (void *)qword_100586110;
  return v0;
}

void sub_1002AEE2C(id a1)
{
  qword_100586110 = (uint64_t)objc_getClass("TLAlert");
  if (!qword_100586110) {
    __assert_rtn("initTLAlert_block_invoke", "ADFauxUIService.m", 30, "classTLAlert");
  }
  off_100583398 = sub_1002AEEF0;
}

void sub_1002AEE90()
{
  if (!qword_100586100)
  {
    qword_100586100 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/ToneLibrary.framework/ToneLibrary", 2);
    if (!qword_100586100) {
      __assert_rtn("ToneLibraryLibrary", "ADFauxUIService.m", 28, "frameworkLibrary");
    }
  }
}

id sub_1002AEEF0()
{
  return (id)qword_100586110;
}

id sub_1002AEEFC()
{
  if (qword_1005860F0 != -1) {
    dispatch_once(&qword_1005860F0, &stru_100509E08);
  }
  id v0 = (void *)qword_1005860F8;
  return v0;
}

void sub_1002AEF50(id a1)
{
  qword_1005860F8 = (uint64_t)objc_getClass("TLAlertConfiguration");
  if (!qword_1005860F8) {
    __assert_rtn("initTLAlertConfiguration_block_invoke", "ADFauxUIService.m", 29, "classTLAlertConfiguration");
  }
  off_100583390 = sub_1002AEFB4;
}

id sub_1002AEFB4()
{
  return (id)qword_1005860F8;
}

void sub_1002B116C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1002B1188(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1002B1198(uint64_t a1)
{
}

void sub_1002B11A0(uint64_t a1)
{
  [*(id *)(a1 + 32) _refreshEphemeralIdentifiers:0];
  uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 48) aggregationIds];
  id v3 = [v2 current];
  uint64_t v4 = [v3 value];
  uint64_t v5 = *(void *)(*(void *)(a1 + 48) + 8);
  uint64_t v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 40) = v4;

  uint64_t v7 = *(void *)(a1 + 40);
  id v8 = +[ADAnalyticsDeviceAndUserIds deviceAggregationIdWithDeviceId:*(void *)(*(void *)(a1 + 32) + 32) forUserAggregationId:*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40)];
  (*(void (**)(uint64_t, id))(v7 + 16))(v7, v8);
}

void sub_1002B1334(uint64_t a1)
{
  uint64_t v2 = +[ADMultiUserService sharedService];
  id v3 = [v2 allUsersBySharedUserID];

  uint64_t v4 = [v3 objectForKey:*(void *)(a1 + 32)];
  uint64_t v5 = [v4 iCloudAltDSID];
  if (!v5)
  {
    uint64_t v6 = +[ADAnalyticsIdentifiersUtils logger];
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v9) = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Will be using the default user for the device as iCloudAltDSId could not be looked up for sharedUser", (uint8_t *)&v9, 2u);
    }

    uint64_t v5 = [*(id *)(*(void *)(a1 + 40) + 40) defaultUserId];
  }
  uint64_t v7 = +[ADAnalyticsIdentifiersUtils logger];
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v8 = *(void *)(a1 + 32);
    int v9 = 138412546;
    uint64_t v10 = v8;
    __int16 v11 = 2112;
    int v12 = v5;
    _os_log_debug_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "Mapped sharedUserID %@ to iCloudAltDSId %@", (uint8_t *)&v9, 0x16u);
  }

  [*(id *)(a1 + 40) fetchDeviceAndUserIdsForiCloudAltDSId:v5 withCallback:*(void *)(a1 + 48)];
}

void sub_1002B1588(uint64_t a1)
{
  [*(id *)(a1 + 32) _refreshEphemeralIdentifiers:0];
  if ([*(id *)(*(void *)(a1 + 32) + 40) multiUserDevice]
    && (uint64_t v2 = *(void **)(a1 + 40),
        [*(id *)(*(void *)(a1 + 32) + 40) defaultUserId],
        id v3 = objc_claimAutoreleasedReturnValue(),
        LODWORD(v2) = [v2 isEqualToString:v3],
        v3,
        !v2))
  {
    uint64_t v7 = +[NSDate now];
    id v5 = [*(id *)(a1 + 32) _fetchIdsForUser:*(void *)(a1 + 40) creationTime:v7];
    uint64_t v8 = [v5 currentEphemeralSeed];
    id v6 = +[ADAnalyticsIdentifiersProvider _createUserEphemeralIdWithUserSeed:v8 withCreationTime:v7];
  }
  else
  {
    uint64_t v4 = +[ADAnalyticsIdentifiersUtils logger];
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(v21) = 0;
      _os_log_debug_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Using same identifiers as DIM event as this is either not a multi-user device or the provided user is same as the default user for the device", (uint8_t *)&v21, 2u);
    }

    id v5 = *(id *)(*(void *)(a1 + 32) + 48);
    id v6 = *(id *)(*(void *)(a1 + 32) + 72);
  }
  int v9 = [v5 aggregationIds];
  uint64_t v10 = [v9 current];

  __int16 v11 = [ADAnalyticsDeviceAndUserIds alloc];
  uint64_t v12 = *(void *)(*(void *)(a1 + 32) + 32);
  long long v13 = [v10 value];
  __int16 v14 = [v10 effectiveFrom];
  long long v15 = [v10 expirationDate];
  id v16 = [(ADAnalyticsDeviceAndUserIds *)v11 initWithFixedDeviceId:v12 withUserEphemeralId:v6 withUserAggregationId:v13 withUserAggregationIdEffectiveFrom:v14 withUserAggregationIdExpiration:v15];

  unsigned int v17 = +[ADAnalyticsIdentifiersUtils logger];
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v18 = *(void *)(a1 + 40);
    uint64_t v19 = [(ADAnalyticsDeviceAndUserIds *)v16 userAggregationId];
    uint64_t v20 = [(ADAnalyticsDeviceAndUserIds *)v16 deviceAggregationId];
    int v21 = 138413058;
    uint64_t v22 = v18;
    __int16 v23 = 2112;
    id v24 = v6;
    __int16 v25 = 2112;
    int8x16_t v26 = v19;
    __int16 v27 = 2112;
    id v28 = v20;
    _os_log_debug_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "Created user ephemeral identifiers user:%@ ephemeralId:%@ userAggregationId:%@ deviceAggregationId:%@", (uint8_t *)&v21, 0x2Au);
  }
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
}

void sub_1002B1904(uint64_t a1)
{
  uint64_t v2 = +[ADAnalyticsIdentifiersUtils logger];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t v12 = 0;
    _os_log_debug_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Preparing to log Analytics Identifiers DIM events", v12, 2u);
  }

  id v3 = objc_msgSend(*(id *)(a1 + 32), "_createDIMEphemeralIdentifiersEvent:", objc_msgSend(*(id *)(a1 + 32), "_refreshEphemeralIdentifiers:", 1));
  uint64_t v4 = +[AssistantSiriAnalytics sharedStream];
  [v4 emitMessage:v3];

  id v5 = [*(id *)(a1 + 32) _createDIMEphemeralToAggregationIdentifierMapEvent];
  id v6 = +[AssistantSiriAnalytics sharedStream];
  [v6 emitMessage:v5];

  uint64_t v7 = +[ADSiriAnalyticsExperimentIdentifiersProvider createExperimentContextEventWithBucketId:*(unsigned int *)(*(void *)(a1 + 32) + 16)];
  uint64_t v8 = +[AssistantSiriAnalytics sharedStream];
  [v8 emitMessage:v7];

  int v9 = +[ADSiriAnalyticsOnDeviceDigestProvider createOnDeviceDigestEvent];
  uint64_t v10 = +[AssistantSiriAnalytics sharedStream];
  [v10 emitMessage:v9];

  uint64_t v11 = *(void *)(a1 + 40);
  if (v11) {
    (*(void (**)(uint64_t, void *, void *))(v11 + 16))(v11, v3, v5);
  }
}

uint64_t sub_1002B1E9C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 40);
    id v4 = v2;
    uint64_t v5 = *(void *)(v3 + 40);
    *(void *)(v3 + 40) = v4;
  }
  else
  {
    int v6 = AFIsHorseman();
    uint64_t v7 = [*(id *)(a1 + 40) _fetchOrCreateFixedDeviceId];
    uint64_t v8 = *(void *)(a1 + 40);
    int v9 = *(void **)(v8 + 32);
    *(void *)(v8 + 32) = v7;

    if (v6)
    {
      uint64_t v10 = ADSyncCoordinatorCommunalDevices;
    }
    else if (AFIsATV())
    {
      uint64_t v10 = ADSyncCoordinatorATV;
    }
    else
    {
      uint64_t v10 = ADSyncCoordinatorPersonalDevices;
    }
    id v4 = objc_alloc_init(v10);
    uint64_t v11 = *(void *)(a1 + 40);
    uint64_t v5 = *(void *)(v11 + 40);
    *(void *)(v11 + 40) = v4;
  }
  return _objc_release_x1(v4, v5);
}

void sub_1002B1FA8(id a1)
{
  uint64_t v1 = +[ADAnalyticsIdentifiersUtils logger];
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)id v4 = 0;
    _os_log_debug_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEBUG, "Initializing sharedInstance of ADAnalyticsIdentifiersProvider", v4, 2u);
  }

  uint64_t v2 = objc_alloc_init(ADAnalyticsIdentifiersProvider);
  uint64_t v3 = (void *)qword_100586148;
  qword_100586148 = (uint64_t)v2;
}

void sub_1002B236C(id a1)
{
  id v1 = objc_alloc_init((Class)NSISO8601DateFormatter);
  uint64_t v2 = qword_100586138;
  qword_100586138 = (uint64_t)v1;
  _objc_release_x1(v1, v2);
}

void sub_1002B23FC(id a1)
{
  id v1 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"19cd0db1-af0c-40c1-89ca-ae40361b5fe6"];
  uint64_t v2 = qword_100586128;
  qword_100586128 = (uint64_t)v1;
  _objc_release_x1(v1, v2);
}

void sub_1002B2498(id a1)
{
  id v1 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"7cc79b2d-e953-4e2f-95cd-5af8a4e707fe"];
  uint64_t v2 = qword_100586118;
  qword_100586118 = (uint64_t)v1;
  _objc_release_x1(v1, v2);
}

void sub_1002B2DA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location, char a17)
{
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1002B2DE8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1002B2DF8(uint64_t a1)
{
}

void sub_1002B2E00(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  uint64_t v3 = WeakRetained;
  if (WeakRetained)
  {
    id v4 = (void *)WeakRetained[4];
    if (v4 && [v4 isEqual:*(void *)(a1 + 32)])
    {
      [v3 _processAndEvaluateSnapshot:*(void *)(a1 + 32)];
    }
    else
    {
      uint64_t v5 = AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v8 = v3[4];
        uint64_t v9 = *(void *)(a1 + 32);
        int v10 = 136315650;
        uint64_t v11 = "-[ADHomeAnnouncementContextAdaptor _processAndEvaluateSnapshot:]_block_invoke";
        __int16 v12 = 2112;
        uint64_t v13 = v8;
        __int16 v14 = 2112;
        uint64_t v15 = v9;
        _os_log_debug_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "%s Ignored expiration timer based reevaluation because snapshot was changed. (current = %@, expected = %@)", (uint8_t *)&v10, 0x20u);
      }
    }
  }
  [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) cancel];
  uint64_t v6 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = 0;
}

void sub_1002B2F30(id a1, AFHomeAnnouncementSnapshotMutating *a2)
{
}

id sub_1002B30C0(uint64_t a1)
{
  return [*(id *)(a1 + 32) _processAndEvaluateSnapshot:*(void *)(a1 + 40)];
}

id sub_1002B3144(uint64_t a1)
{
  return [*(id *)(a1 + 32) _invalidate];
}

uint64_t sub_1002B31F8(uint64_t a1)
{
  if (*(void *)(*(void *)(a1 + 32) + 40))
  {
    uint64_t v2 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);
    return v2();
  }
  else
  {
    id v4 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      int v5 = 136315138;
      uint64_t v6 = "-[ADHomeAnnouncementContextAdaptor getSnapshotWithCompletion:]_block_invoke";
      _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "%s Unable to get home announcement snapshot until a snapshot updater is registered.", (uint8_t *)&v5, 0xCu);
    }
    return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

void sub_1002B3428(uint64_t a1)
{
  objc_msgSend(*(id *)(*(void *)(a1 + 32) + 24), "removeListener:");
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(v2 + 40);
  *(void *)(v2 + 40) = 0;

  uint64_t v4 = *(void *)(a1 + 32);
  int v5 = *(void **)(v4 + 32);
  *(void *)(v4 + 32) = 0;

  uint64_t v6 = *(NSObject **)(*(void *)(a1 + 32) + 16);
  dispatch_group_leave(v6);
}

id sub_1002B35CC(uint64_t a1)
{
  id v2 = objc_retainBlock(*(id *)(a1 + 40));
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  objc_msgSend(*(id *)(*(void *)(a1 + 32) + 24), "addListener:");
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *(void **)(v5 + 24);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1002B3670;
  v8[3] = &unk_100509EF8;
  void v8[4] = v5;
  return [v6 getSnapshotWithCompletion:v8];
}

void sub_1002B3670(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(NSObject **)(v4 + 8);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  void v7[2] = sub_1002B370C;
  v7[3] = &unk_10050E160;
  void v7[4] = v4;
  id v8 = v3;
  id v6 = v3;
  dispatch_async(v5, v7);
}

void sub_1002B370C(uint64_t a1)
{
  [*(id *)(a1 + 32) _processAndEvaluateSnapshot:*(void *)(a1 + 40)];
  id v2 = *(NSObject **)(*(void *)(a1 + 32) + 16);
  dispatch_group_leave(v2);
}

id sub_1002B40D4(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _handleMessage:*(void *)(a1 + 40) messageType:*(void *)(a1 + 48) fromDeviceWithIdentifier:*(void *)(a1 + 56) completion:*(void *)(a1 + 64)];
}

void sub_1002B41FC(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(NSObject **)(v4 + 8);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  void v7[2] = sub_1002B4298;
  v7[3] = &unk_10050E160;
  void v7[4] = v4;
  id v8 = v3;
  id v6 = v3;
  dispatch_async(v5, v7);
}

id sub_1002B4298(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _setStereoPartnerIdentifier:*(void *)(a1 + 40)];
}

void sub_1002B44DC(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 64));
  _Unwind_Resume(a1);
}

void sub_1002B4508(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(NSObject **)(*(void *)(a1 + 32) + 8);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_1002B4608;
  v10[3] = &unk_100509F88;
  id v11 = v6;
  id v12 = v5;
  id v8 = v5;
  id v9 = v6;
  objc_copyWeak(&v14, (id *)(a1 + 48));
  id v13 = *(id *)(a1 + 40);
  dispatch_async(v7, v10);

  objc_destroyWeak(&v14);
}

void sub_1002B4608(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    uint64_t v2 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      int v9 = 136315394;
      int v10 = "-[ADMyriadService _syncLastWinWithStereoPartner]_block_invoke";
      __int16 v11 = 2112;
      uint64_t v12 = v1;
      _os_log_error_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "%s Request failed: %@", (uint8_t *)&v9, 0x16u);
    }
  }
  else
  {
    uint64_t v4 = [*(id *)(a1 + 40) objectForKey:@"lastWin"];
    if (v4 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0))
    {
      uint64_t v7 = AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
      {
        int v9 = 136315138;
        int v10 = "-[ADMyriadService _syncLastWinWithStereoPartner]_block_invoke_2";
        _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "%s Received malformed lastWin data", (uint8_t *)&v9, 0xCu);
      }
    }
    else
    {
      id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
      if (WeakRetained)
      {
        if ([*(id *)(a1 + 48) isEqualToString:WeakRetained[4]])
        {
          id v6 = objc_loadWeakRetained((id *)(a1 + 56));
          [v6 _setLastTimeStereoPartnerWon:v4];
        }
        else
        {
          id v8 = AFSiriLogContextDaemon;
          if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
          {
            int v9 = 136315138;
            int v10 = "-[ADMyriadService _syncLastWinWithStereoPartner]_block_invoke";
            _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "%s Stereo partner changed since request initiated", (uint8_t *)&v9, 0xCu);
          }
        }
      }
    }
  }
}

void sub_1002B4AE4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  if (*(void *)(v1 + 32))
  {
    uint64_t v3 = *(void *)(v1 + 24);
    uint64_t v4 = *(void (**)(uint64_t, uint64_t, void))(v2 + 16);
    uint64_t v5 = *(void *)(a1 + 40);
    v4(v5, v3, 0);
  }
  else
  {
    id v6 = +[AFError errorWithCode:1006];
    (*(void (**)(uint64_t, void, id))(v2 + 16))(v2, 0, v6);
  }
}

void sub_1002B4D48(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  id v2 = +[NSDate date];
  [v1 _setLastMyriadWin:v2];
}

void sub_1002B4EF4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 32);
  uint64_t v5 = v4[1];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  void v7[2] = sub_1002B4FA0;
  v7[3] = &unk_10050E160;
  id v8 = v4;
  id v9 = v3;
  id v6 = v3;
  dispatch_async(v5, v7);
}

id sub_1002B4FA0(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _setStereoPartnerIdentifier:*(void *)(a1 + 40)];
}

uint64_t sub_1002B504C(uint64_t a1)
{
  id v1 = objc_alloc_init(*(Class *)(a1 + 32));
  uint64_t v2 = qword_100586160;
  qword_100586160 = (uint64_t)v1;
  return _objc_release_x1(v1, v2);
}

void sub_1002B5CB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v17 - 96), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1002B5CE4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1002B5CF4(uint64_t a1)
{
}

void sub_1002B5CFC(void *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = AFSiriLogContextSession;
  if (os_log_type_enabled(AFSiriLogContextSession, OS_LOG_TYPE_DEBUG))
  {
    int v12 = 136315394;
    id v13 = "-[ADSessionRemoteServer getSNConnectionMetrics:]_block_invoke";
    __int16 v14 = 2112;
    id v15 = v3;
    _os_log_debug_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "%s SNConnectionMetric: %@", (uint8_t *)&v12, 0x16u);
    if (!v3) {
      goto LABEL_6;
    }
  }
  else if (!v3)
  {
    goto LABEL_6;
  }
  uint64_t v5 = *(void **)(*(void *)(a1[5] + 8) + 40);
  if (!v5)
  {
    id v6 = objc_alloc_init((Class)NSMutableArray);
    uint64_t v7 = *(void *)(a1[5] + 8);
    id v8 = *(void **)(v7 + 40);
    *(void *)(v7 + 40) = v6;

    uint64_t v5 = *(void **)(*(void *)(a1[5] + 8) + 40);
  }
  [v5 addObject:v3];
  uint64_t v9 = [v3 symptomsBasedNetworkQuality];
  uint64_t v10 = *(void *)(a1[6] + 8);
  __int16 v11 = *(void **)(v10 + 40);
  *(void *)(v10 + 40) = v9;

LABEL_6:
  dispatch_group_leave(*(dispatch_group_t *)(a1[4] + 480));
}

uint64_t sub_1002B5E4C(void *a1)
{
  id v2 = [*(id *)(*(void *)(a1[6] + 8) + 40) count];
  if ([*(id *)(a1[4] + 464) count])
  {
    if (!v2)
    {
      id v3 = [*(id *)(a1[4] + 464) mutableCopy];
      uint64_t v4 = *(void *)(a1[6] + 8);
      uint64_t v5 = *(void **)(v4 + 40);
      *(void *)(v4 + 40) = v3;
    }
    [*(id *)(a1[4] + 464) removeAllObjects];
  }
  id v6 = (char *)[*(id *)(*(void *)(a1[6] + 8) + 40) count];
  if (v6)
  {
    uint64_t v7 = [*(id *)(*(void *)(a1[6] + 8) + 40) objectAtIndexedSubscript:v6 - 1];
    [v7 setSymptomsBasedNetworkQuality:*(void *)(*(void *)(a1[7] + 8) + 40)];
  }
  id v8 = *(uint64_t (**)(void))(a1[5] + 16);
  return v8();
}

void sub_1002B6154(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v15 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1002B6180(uint64_t a1, void *a2)
{
  id v7 = a2;
  if (v7)
  {
    id v3 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
    if (!v3)
    {
      id v4 = objc_alloc_init((Class)NSMutableArray);
      uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8);
      id v6 = *(void **)(v5 + 40);
      *(void *)(v5 + 40) = v4;

      id v3 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
    }
    [v3 addObject:v7];
  }
  dispatch_group_leave(*(dispatch_group_t *)(*(void *)(a1 + 32) + 480));
}

uint64_t sub_1002B6220(void *a1)
{
  id v2 = [*(id *)(*(void *)(a1[6] + 8) + 40) count];
  if ([*(id *)(a1[4] + 456) count])
  {
    if (!v2)
    {
      id v3 = [*(id *)(a1[4] + 456) mutableCopy];
      uint64_t v4 = *(void *)(a1[6] + 8);
      uint64_t v5 = *(void **)(v4 + 40);
      *(void *)(v4 + 40) = v3;
    }
    [*(id *)(a1[4] + 456) removeAllObjects];
  }
  id v6 = (char *)[*(id *)(*(void *)(a1[6] + 8) + 40) count];
  if (v6)
  {
    id v7 = [*(id *)(*(void *)(a1[6] + 8) + 40) objectAtIndexedSubscript:v6 - 1];
    [v7 setSymptomsBasedNetworkQuality:*(void *)(*(void *)(a1[7] + 8) + 40)];
  }
  id v8 = *(uint64_t (**)(void))(a1[5] + 16);
  return v8();
}

void sub_1002B638C(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) delegate];
  [v1 assistantSessionDictationHIPAAMDMStatusDidChange];
}

void sub_1002B6B98(id a1)
{
}

void sub_1002B6FD4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(unsigned char *)(v1 + 307))
  {
    id v3 = AFSiriLogContextSession;
    if (os_log_type_enabled(AFSiriLogContextSession, OS_LOG_TYPE_INFO))
    {
      int v4 = 136315138;
      uint64_t v5 = "-[ADSessionRemoteServer networkManagerLostNonWWANConnectivity:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "%s Clearing flag to switch to WiFi on request end", (uint8_t *)&v4, 0xCu);
      uint64_t v1 = *(void *)(a1 + 32);
    }
    *(unsigned char *)(v1 + 307) = 0;
  }
}

void sub_1002B7120(uint64_t a1)
{
  if ((uint64_t)[*(id *)(a1 + 32) state] >= 4
    && [*(id *)(a1 + 32) _connectionIsWWAN])
  {
    id v2 = *(unsigned char **)(a1 + 32);
    if (v2[354]
      || ([v2 delegate],
          id v3 = objc_claimAutoreleasedReturnValue(),
          unsigned int v4 = [v3 assistantSessionShouldRestartConnectionOnWiFi:*(void *)(a1 + 32)],
          v3,
          !v4))
    {
      id v6 = AFSiriLogContextSession;
      if (os_log_type_enabled(AFSiriLogContextSession, OS_LOG_TYPE_INFO))
      {
        int v7 = 136315138;
        id v8 = "-[ADSessionRemoteServer networkManagerNonWWANDidBecomeAvailable:]_block_invoke";
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "%s We're in a request, we'll check for a wifi transition afterward", (uint8_t *)&v7, 0xCu);
      }
      *(unsigned char *)(*(void *)(a1 + 32) + 307) = 1;
    }
    else
    {
      uint64_t v5 = AFSiriLogContextSession;
      if (os_log_type_enabled(AFSiriLogContextSession, OS_LOG_TYPE_INFO))
      {
        int v7 = 136315138;
        id v8 = "-[ADSessionRemoteServer networkManagerNonWWANDidBecomeAvailable:]_block_invoke";
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "%s WiFi became available and we're not on a request restarting connection", (uint8_t *)&v7, 0xCu);
      }
      [*(id *)(a1 + 32) _resetServerConnection];
      [*(id *)(a1 + 32) _startConnection];
    }
  }
}

id sub_1002B7320(uint64_t a1)
{
  id v2 = AFSiriLogContextSession;
  if (os_log_type_enabled(AFSiriLogContextSession, OS_LOG_TYPE_INFO))
  {
    int v4 = 136315138;
    uint64_t v5 = "-[ADSessionRemoteServer _multiUsersDidChange:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s ", (uint8_t *)&v4, 0xCu);
  }
  return [*(id *)(a1 + 32) _sendMultiUserInfo];
}

void sub_1002B7450(uint64_t a1)
{
  id v2 = AFSiriLogContextSession;
  if (os_log_type_enabled(AFSiriLogContextSession, OS_LOG_TYPE_INFO))
  {
    int v5 = 136315138;
    id v6 = "-[ADSessionRemoteServer _companionServiceStateDidChange:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s ", (uint8_t *)&v5, 0xCu);
  }
  id v3 = *(void **)(a1 + 32);
  int v4 = [v3 _account];
  [v3 _sendSetRemoteDevicesWithAccount:v4];
}

void sub_1002B75C0(uint64_t a1)
{
  id v2 = AFSiriLogContextSession;
  if (os_log_type_enabled(AFSiriLogContextSession, OS_LOG_TYPE_INFO))
  {
    int v5 = 136315138;
    id v6 = "-[ADSessionRemoteServer _homeContextDidChange:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s ", (uint8_t *)&v5, 0xCu);
  }
  if ([*(id *)(a1 + 32) state] == (id)11)
  {
    id v3 = [*(id *)(a1 + 40) object];
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      int v4 = v3;
    }
    else {
      int v4 = 0;
    }
    [*(id *)(a1 + 32) _sendHomeContext:v4];
  }
}

void sub_1002B7734(uint64_t a1)
{
  id v2 = AFSiriLogContextSession;
  if (os_log_type_enabled(AFSiriLogContextSession, OS_LOG_TYPE_INFO))
  {
    int v5 = 136315138;
    id v6 = "-[ADSessionRemoteServer _homeInfoDidChange:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s ", (uint8_t *)&v5, 0xCu);
  }
  id v3 = *(void **)(a1 + 32);
  int v4 = [v3 _account];
  [v3 _sendSetRemoteDevicesWithAccount:v4];
}

void sub_1002B78EC(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_1002B7914(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = *(unsigned __int8 *)(*(void *)(a1 + 32) + 504);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v6 = WeakRetained;
  if (v4)
  {
    int v7 = [WeakRetained _siriNetworkServerConnection];
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472;
    v17[2] = sub_1002B7A4C;
    v17[3] = &unk_10050B918;
    id v8 = &v18;
    id v18 = v3;
    id v9 = v3;
    uint64_t v10 = (void ***)v17;
  }
  else
  {
    int v7 = [WeakRetained _serverConnection];
    int v12 = _NSConcreteStackBlock;
    uint64_t v13 = 3221225472;
    __int16 v14 = sub_1002B7A58;
    uint64_t v15 = &unk_10050B918;
    id v8 = &v16;
    id v16 = v3;
    id v11 = v3;
    uint64_t v10 = &v12;
  }
  objc_msgSend(v7, "barrier:", v10, v12, v13, v14, v15);
}

id sub_1002B7A4C(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) barrierResultReturnedWithSuccess:a2];
}

id sub_1002B7A58(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) barrierResultReturnedWithSuccess:a2];
}

void sub_1002B7AF4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  int v5 = *(NSObject **)(v4 + 232);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  void v7[2] = sub_1002B7B98;
  v7[3] = &unk_10050E160;
  void v7[4] = v4;
  id v8 = v3;
  id v6 = v3;
  dispatch_async(v5, v7);
}

id sub_1002B7B98(uint64_t a1)
{
  return [*(id *)(a1 + 32) _sendHomeContext:*(void *)(a1 + 40)];
}

id sub_1002B7D40(void *a1)
{
  id v1 = a1;
  uint64_t v2 = +[NSMutableString string];
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  id v3 = v1;
  id v4 = [v3 countByEnumeratingWithState:&v14 objects:v18 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v15;
    do
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(void *)v15 != v6) {
          objc_enumerationMutation(v3);
        }
        id v8 = *(void **)(*((void *)&v14 + 1) + 8 * i);
        id v9 = [v8 name];
        uint64_t v10 = [v8 identifier];
        id v11 = [v10 absoluteString];
        [v2 appendFormat:@"\n    %@/%@", v9, v11, (void)v14];
      }
      id v5 = [v3 countByEnumeratingWithState:&v14 objects:v18 count:16];
    }
    while (v5);
  }

  id v12 = [v2 copy];
  return v12;
}

void sub_1002B8C58(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = a2;
  id v4 = [v2 assistantId];
  [v3 setAssistantIdentifier:v4];

  id v6 = +[ADPreferences sharedPreferences];
  id v5 = [v6 companionIdentifier];
  [v3 setIdsDeviceUniqueIdentifier:v5];
}

void sub_1002B96D8(id a1)
{
}

void sub_1002BA028(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,id location)
{
  objc_destroyWeak(v42);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1002BA090(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  int v7 = AFSiriLogContextSession;
  if (v6)
  {
    if (os_log_type_enabled(AFSiriLogContextSession, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136315650;
      long long v14 = "-[ADSessionRemoteServer _sendServerCommands:]_block_invoke";
      __int16 v15 = 2112;
      id v16 = v5;
      __int16 v17 = 2114;
      id v18 = v6;
      _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "%s Error sending command %@ %{public}@", buf, 0x20u);
    }
    id v8 = *(NSObject **)(*(void *)(a1 + 32) + 232);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1002BA4D8;
    block[3] = &unk_10050A280;
    objc_copyWeak(&v12, (id *)(a1 + 40));
    id v10 = v6;
    id v11 = v5;
    dispatch_async(v8, block);

    objc_destroyWeak(&v12);
  }
  else if (os_log_type_enabled(AFSiriLogContextSession, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)long long buf = 136315394;
    long long v14 = "-[ADSessionRemoteServer _sendServerCommands:]_block_invoke_2";
    __int16 v15 = 2112;
    id v16 = v5;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "%s %@ sent or buffered", buf, 0x16u);
  }
}

void sub_1002BA27C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  int v7 = AFSiriLogContextSession;
  if (v6)
  {
    if (os_log_type_enabled(AFSiriLogContextSession, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136315650;
      long long v14 = "-[ADSessionRemoteServer _sendServerCommands:]_block_invoke";
      __int16 v15 = 2112;
      id v16 = v5;
      __int16 v17 = 2114;
      id v18 = v6;
      _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "%s Error sending command %@ %{public}@", buf, 0x20u);
    }
    id v8 = *(NSObject **)(*(void *)(a1 + 32) + 232);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1002BA468;
    block[3] = &unk_10050A280;
    objc_copyWeak(&v12, (id *)(a1 + 40));
    id v10 = v6;
    id v11 = v5;
    dispatch_async(v8, block);

    objc_destroyWeak(&v12);
  }
  else if (os_log_type_enabled(AFSiriLogContextSession, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)long long buf = 136315394;
    long long v14 = "-[ADSessionRemoteServer _sendServerCommands:]_block_invoke_2";
    __int16 v15 = 2112;
    id v16 = v5;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "%s %@ sent or buffered", buf, 0x16u);
  }
}

void sub_1002BA468(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    id v4 = WeakRetained;
    id v3 = [WeakRetained _generateAnalyticsContextWithError:*(void *)(a1 + 32)];
    [v4 _sendServerCommandLogErrorForCommand:*(void *)(a1 + 40) withContext:v3];

    id WeakRetained = v4;
  }
}

void sub_1002BA4D8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    id v4 = WeakRetained;
    id v3 = [WeakRetained _generateAnalyticsContextWithError:*(void *)(a1 + 32)];
    [v4 _sendServerCommandLogErrorForCommand:*(void *)(a1 + 40) withContext:v3];

    id WeakRetained = v4;
  }
}

void sub_1002BA858(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 80));
  _Unwind_Resume(a1);
}

void sub_1002BA89C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = AFSiriLogContextSession;
  if (v3)
  {
    if (os_log_type_enabled(AFSiriLogContextSession, OS_LOG_TYPE_ERROR))
    {
      uint64_t v7 = *(void *)(a1 + 32);
      *(_DWORD *)long long buf = 136315650;
      uint64_t v13 = "-[ADSessionRemoteServer _sendServerCommand:]_block_invoke";
      __int16 v14 = 2112;
      uint64_t v15 = v7;
      __int16 v16 = 2114;
      id v17 = v3;
      _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "%s Error sending command %@ %{public}@", buf, 0x20u);
    }
    id v5 = *(NSObject **)(*(void *)(a1 + 40) + 232);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1002BACCC;
    block[3] = &unk_10050A280;
    objc_copyWeak(&v11, (id *)(a1 + 48));
    id v9 = v3;
    id v10 = *(id *)(a1 + 32);
    dispatch_async(v5, block);

    objc_destroyWeak(&v11);
  }
  else if (os_log_type_enabled(AFSiriLogContextSession, OS_LOG_TYPE_INFO))
  {
    uint64_t v6 = *(void *)(a1 + 32);
    *(_DWORD *)long long buf = 136315394;
    uint64_t v13 = "-[ADSessionRemoteServer _sendServerCommand:]_block_invoke_2";
    __int16 v14 = 2112;
    uint64_t v15 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%s %@ sent or buffered", buf, 0x16u);
  }
}

void sub_1002BAA7C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = AFSiriLogContextSession;
  if (v3)
  {
    if (os_log_type_enabled(AFSiriLogContextSession, OS_LOG_TYPE_ERROR))
    {
      uint64_t v7 = *(void *)(a1 + 32);
      *(_DWORD *)long long buf = 136315650;
      uint64_t v13 = "-[ADSessionRemoteServer _sendServerCommand:]_block_invoke";
      __int16 v14 = 2112;
      uint64_t v15 = v7;
      __int16 v16 = 2114;
      id v17 = v3;
      _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "%s Error sending command %@ %{public}@", buf, 0x20u);
    }
    id v5 = *(NSObject **)(*(void *)(a1 + 40) + 232);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1002BAC5C;
    block[3] = &unk_10050A280;
    objc_copyWeak(&v11, (id *)(a1 + 48));
    id v9 = v3;
    id v10 = *(id *)(a1 + 32);
    dispatch_async(v5, block);

    objc_destroyWeak(&v11);
  }
  else if (os_log_type_enabled(AFSiriLogContextSession, OS_LOG_TYPE_INFO))
  {
    uint64_t v6 = *(void *)(a1 + 32);
    *(_DWORD *)long long buf = 136315394;
    uint64_t v13 = "-[ADSessionRemoteServer _sendServerCommand:]_block_invoke_2";
    __int16 v14 = 2112;
    uint64_t v15 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%s %@ sent or buffered", buf, 0x16u);
  }
}

void sub_1002BAC5C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    id v4 = WeakRetained;
    id v3 = [WeakRetained _generateAnalyticsContextWithError:*(void *)(a1 + 32)];
    [v4 _sendServerCommandLogErrorForCommand:*(void *)(a1 + 40) withContext:v3];

    id WeakRetained = v4;
  }
}

void sub_1002BACCC(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    id v4 = WeakRetained;
    id v3 = [WeakRetained _generateAnalyticsContextWithError:*(void *)(a1 + 32)];
    [v4 _sendServerCommandLogErrorForCommand:*(void *)(a1 + 40) withContext:v3];

    id WeakRetained = v4;
  }
}

id sub_1002BAE14(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2) {
    id v3 = [v2 mutableCopy];
  }
  else {
    id v3 = objc_alloc_init((Class)NSMutableDictionary);
  }
  id v4 = v3;
  if ([*(id *)(a1 + 40) conformsToProtocol:&OBJC_PROTOCOL___AceObject])
  {
    id v5 = [*(id *)(a1 + 40) groupIdentifier];
    if (v5) {
      [v4 setObject:v5 forKey:@"groupIdentifier"];
    }
    uint64_t v6 = [*(id *)(a1 + 40) encodedClassName];
    if (v6) {
      [v4 setObject:v6 forKey:@"classIdentifier"];
    }
  }
  uint64_t v7 = [*(id *)(a1 + 40) aceId];
  if (v7) {
    [v4 setObject:v7 forKey:@"aceId"];
  }
  id v8 = [*(id *)(a1 + 40) refId];
  if (v8) {
    [v4 setObject:v8 forKey:@"refId"];
  }

  return v4;
}

id sub_1002BB510(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) state];
  if (result == (id)2)
  {
    id v3 = AFSiriLogContextSession;
    if (os_log_type_enabled(AFSiriLogContextSession, OS_LOG_TYPE_INFO))
    {
      int v4 = 136315138;
      id v5 = "-[ADSessionRemoteServer _assistantFailedForReason:error:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "%s Retrying after assistant failure", (uint8_t *)&v4, 0xCu);
    }
    return [*(id *)(a1 + 32) _startConnection];
  }
  return result;
}

id sub_1002BBAC8(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2) {
    id v3 = [v2 mutableCopy];
  }
  else {
    id v3 = objc_alloc_init((Class)NSMutableDictionary);
  }
  int v4 = v3;
  id v5 = [*(id *)(a1 + 40) aceId];
  if (v5) {
    [v4 setObject:v5 forKey:@"aceId"];
  }
  uint64_t v6 = [*(id *)(a1 + 40) refId];
  if (v6) {
    [v4 setObject:v6 forKey:@"refId"];
  }

  return v4;
}

id sub_1002BCADC(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2) {
    id v3 = [v2 mutableCopy];
  }
  else {
    id v3 = objc_alloc_init((Class)NSMutableDictionary);
  }
  int v4 = v3;
  id v5 = [*(id *)(a1 + 40) aceId];
  if (v5) {
    [v4 setObject:v5 forKey:@"aceId"];
  }
  uint64_t v6 = [*(id *)(a1 + 40) refId];
  if (v6) {
    [v4 setObject:v6 forKey:@"refId"];
  }

  return v4;
}

id sub_1002BCB90(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) _authenticator];
  [v2 reset];

  [*(id *)(a1 + 32) _clearLimbo];
  id v3 = *(void **)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  return [v3 _informDelegateOfError:v4];
}

uint64_t sub_1002BCBE4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

id sub_1002BDB3C(uint64_t a1, char a2, int a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  if (*(void *)(a1 + 48) != *(void *)(v4 + 240) && *(void *)(a1 + 56) != *(void *)(v4 + 248))
  {
    id v5 = *(void **)(a1 + 40);
    return [v5 reset];
  }
  if (!a3)
  {
    if (a2) {
      goto LABEL_14;
    }
LABEL_11:
    id v8 = AFSiriLogContextSession;
    if (!os_log_type_enabled(AFSiriLogContextSession, OS_LOG_TYPE_ERROR)) {
      return objc_msgSend((id)v4, "_authenticationFailed", *(_OWORD *)v12);
    }
    *(_DWORD *)id v12 = 136315138;
    *(void *)&void v12[4] = "-[ADSessionRemoteServer _continueAuthWithCertificateData:]_block_invoke";
    id v9 = "%s Exceeded NAC cert retry attempts, failing authentication";
    goto LABEL_24;
  }
  if (*(unsigned char *)(v4 + 304))
  {
    unint64_t v7 = *(void *)(v4 + 440);
    if (v7 <= 2)
    {
      *(void *)(v4 + 440) = v7 + 1;
      [*(id *)(a1 + 32) _setCachedServerCertificate:0];
LABEL_19:
      id v10 = *(void **)(a1 + 32);
      goto LABEL_20;
    }
    id v8 = AFSiriLogContextSession;
    if (!os_log_type_enabled(AFSiriLogContextSession, OS_LOG_TYPE_ERROR)) {
      return objc_msgSend((id)v4, "_authenticationFailed", *(_OWORD *)v12);
    }
    *(_DWORD *)id v12 = 136315138;
    *(void *)&void v12[4] = "-[ADSessionRemoteServer _continueAuthWithCertificateData:]_block_invoke";
    id v9 = "%s Exceeded bad cached cert retry attempts, failing authentication";
LABEL_24:
    _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, v9, v12, 0xCu);
    uint64_t v4 = *(void *)(a1 + 32);
    return objc_msgSend((id)v4, "_authenticationFailed", *(_OWORD *)v12);
  }
  if ((a2 & 1) == 0)
  {
    unint64_t v11 = *(void *)(v4 + 448);
    if (v11 <= 1)
    {
      *(void *)(v4 + 44_Block_object_dispose(&STACK[0x220], 8) = v11 + 1;
      goto LABEL_19;
    }
    goto LABEL_11;
  }
LABEL_14:
  id v10 = *(void **)(a1 + 32);
LABEL_20:
  return [v10 _continueAuthentication];
}

void sub_1002BE51C(uint64_t a1)
{
  *(unsigned char *)(*(void *)(a1 + 32) + 377) = 0;
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2[31] == *(void *)(a1 + 40))
  {
    if ([v2 _shouldRetry]
      && ((uint64_t)[*(id *)(a1 + 32) state] < 11
       || ([*(id *)(a1 + 32) delegate],
           uint64_t v4 = objc_claimAutoreleasedReturnValue(),
           unsigned int v5 = [v4 assistantSessionShouldAttemptRetry:*(void *)(a1 + 32)],
           v4,
           v5)))
    {
      uint64_t v6 = AFSiriLogContextSession;
      if (os_log_type_enabled(AFSiriLogContextSession, OS_LOG_TYPE_INFO))
      {
        int v8 = 136315138;
        id v9 = "-[ADSessionRemoteServer _retrySiriNetworkForFailedConnection:siriNetworkAnalysisInfo:onError:]_block_invoke";
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "%s Retrying after backoff", (uint8_t *)&v8, 0xCu);
      }
      [*(id *)(a1 + 32) _retryWithParameters:*(unsigned __int8 *)(a1 + 64) skipPeer:*(unsigned __int8 *)(a1 + 65) skipPeerError:*(void *)(a1 + 48) causedByError:*(void *)(a1 + 56) useSecondary:*(unsigned __int8 *)(a1 + 66)];
    }
    else
    {
      unint64_t v7 = AFSiriLogContextSession;
      if (os_log_type_enabled(AFSiriLogContextSession, OS_LOG_TYPE_INFO))
      {
        int v8 = 136315138;
        id v9 = "-[ADSessionRemoteServer _retrySiriNetworkForFailedConnection:siriNetworkAnalysisInfo:onError:]_block_invoke";
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "%s State has changed, not proceeding with retry.", (uint8_t *)&v8, 0xCu);
      }
      [*(id *)(a1 + 32) _clearLimbo];
      [*(id *)(a1 + 32) _resetServerConnection];
      [*(id *)(a1 + 32) _informDelegateOfError:*(void *)(a1 + 56)];
    }
  }
  else
  {
    id v3 = AFSiriLogContextSession;
    if (os_log_type_enabled(AFSiriLogContextSession, OS_LOG_TYPE_INFO))
    {
      int v8 = 136315138;
      id v9 = "-[ADSessionRemoteServer _retrySiriNetworkForFailedConnection:siriNetworkAnalysisInfo:onError:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "%s Server connection is no longer current. ignoring backoff", (uint8_t *)&v8, 0xCu);
    }
  }
}

void sub_1002BEABC(uint64_t a1)
{
  *(unsigned char *)(*(void *)(a1 + 32) + 377) = 0;
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2[30] == *(void *)(a1 + 40))
  {
    if ([v2 _shouldRetry]
      && ((uint64_t)[*(id *)(a1 + 32) state] < 11
       || ([*(id *)(a1 + 32) delegate],
           uint64_t v4 = objc_claimAutoreleasedReturnValue(),
           unsigned int v5 = [v4 assistantSessionShouldAttemptRetry:*(void *)(a1 + 32)],
           v4,
           v5)))
    {
      uint64_t v6 = AFSiriLogContextSession;
      if (os_log_type_enabled(AFSiriLogContextSession, OS_LOG_TYPE_INFO))
      {
        int v8 = 136315138;
        id v9 = "-[ADSessionRemoteServer _retryForFailedConnection:withType:onError:]_block_invoke";
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "%s Retrying after backoff", (uint8_t *)&v8, 0xCu);
      }
      [*(id *)(a1 + 32) _retryWithParameters:*(unsigned __int8 *)(a1 + 64) skipPeer:*(unsigned __int8 *)(a1 + 65) skipPeerError:*(void *)(a1 + 48) causedByError:*(void *)(a1 + 56) useSecondary:*(unsigned __int8 *)(a1 + 66)];
    }
    else
    {
      unint64_t v7 = AFSiriLogContextSession;
      if (os_log_type_enabled(AFSiriLogContextSession, OS_LOG_TYPE_INFO))
      {
        int v8 = 136315138;
        id v9 = "-[ADSessionRemoteServer _retryForFailedConnection:withType:onError:]_block_invoke";
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "%s State has changed, not proceeding with retry.", (uint8_t *)&v8, 0xCu);
      }
      [*(id *)(a1 + 32) _clearLimbo];
      [*(id *)(a1 + 32) _resetServerConnection];
      [*(id *)(a1 + 32) _informDelegateOfError:*(void *)(a1 + 56)];
    }
  }
  else
  {
    id v3 = AFSiriLogContextSession;
    if (os_log_type_enabled(AFSiriLogContextSession, OS_LOG_TYPE_INFO))
    {
      int v8 = 136315138;
      id v9 = "-[ADSessionRemoteServer _retryForFailedConnection:withType:onError:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "%s Server connection is no longer current. ignoring backoff", (uint8_t *)&v8, 0xCu);
    }
  }
}

id sub_1002BF318(uint64_t a1)
{
  v4[0] = @"oldId";
  v4[1] = @"newId";
  uint64_t v1 = *(void *)(a1 + 40);
  v5[0] = *(void *)(a1 + 32);
  v5[1] = v1;
  uint64_t v2 = +[NSDictionary dictionaryWithObjects:v5 forKeys:v4 count:2];
  return v2;
}

void sub_1002BF64C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  unsigned int v5 = *(NSObject **)(v4 + 232);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1002BF91C;
  block[3] = &unk_10050A190;
  id v8 = v3;
  uint64_t v9 = v4;
  __int16 v12 = *(_WORD *)(a1 + 56);
  id v10 = *(id *)(a1 + 40);
  id v11 = *(id *)(a1 + 48);
  char v13 = *(unsigned char *)(a1 + 58);
  id v6 = v3;
  dispatch_async(v5, block);
}

void sub_1002BF734(uint64_t a1, char a2, char a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  unsigned int v5 = *(NSObject **)(v4 + 232);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_1002BF800;
  v6[3] = &unk_10050A1E0;
  char v9 = a2;
  char v10 = a3;
  void v6[4] = v4;
  __int16 v11 = *(_WORD *)(a1 + 56);
  id v7 = *(id *)(a1 + 40);
  id v8 = *(id *)(a1 + 48);
  char v12 = *(unsigned char *)(a1 + 58);
  dispatch_async(v5, v6);
}

id sub_1002BF800(uint64_t a1)
{
  uint64_t v2 = AFSiriLogContextSession;
  if (os_log_type_enabled(AFSiriLogContextSession, OS_LOG_TYPE_INFO))
  {
    if (*(unsigned char *)(a1 + 56)) {
      CFStringRef v3 = @"preferBT";
    }
    else {
      CFStringRef v3 = @"notBT";
    }
    int v4 = *(unsigned __int8 *)(a1 + 57);
    char v9 = "-[ADSessionRemoteServer _retryWithParameters:skipPeer:skipPeerError:causedByError:useSecondary:]_block_invoke_2";
    *(_DWORD *)long long buf = 136315650;
    __int16 v10 = 2112;
    CFStringRef v11 = v3;
    if (v4) {
      CFStringRef v5 = @"preferWiFi";
    }
    else {
      CFStringRef v5 = @"notWiFi";
    }
    __int16 v12 = 2112;
    CFStringRef v13 = v5;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s Recommendation on retry %@ %@", buf, 0x20u);
  }
  LOBYTE(v7) = *(unsigned char *)(a1 + 60);
  return [*(id *)(a1 + 32) _reallyRetryPreferringWWAN:*(unsigned __int8 *)(a1 + 58) skipPeer:*(unsigned __int8 *)(a1 + 59) skipPeerError:*(void *)(a1 + 40) useWiFiHint:*(unsigned __int8 *)(a1 + 57) causedByError:*(void *)(a1 + 48) forceReconnect:0 useSecondary:v7];
}

id sub_1002BF91C(uint64_t a1)
{
  uint64_t v2 = (void *)AFSiriLogContextSession;
  if (os_log_type_enabled(AFSiriLogContextSession, OS_LOG_TYPE_INFO))
  {
    CFStringRef v3 = *(void **)(a1 + 32);
    int v4 = v2;
    if ([v3 btPreference]) {
      CFStringRef v5 = @"preferBT";
    }
    else {
      CFStringRef v5 = @"notBT";
    }
    unsigned int v6 = [*(id *)(a1 + 32) wifiPreference];
    CFStringRef v7 = @"notWiFi";
    __int16 v16 = "-[ADSessionRemoteServer _retryWithParameters:skipPeer:skipPeerError:causedByError:useSecondary:]_block_invoke_2";
    *(_DWORD *)long long buf = 136315650;
    __int16 v17 = 2112;
    CFStringRef v18 = v5;
    if (v6) {
      CFStringRef v7 = @"preferWiFi";
    }
    __int16 v19 = 2112;
    CFStringRef v20 = v7;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%s Recommendation on retry %@ %@", buf, 0x20u);
  }
  uint64_t v8 = *(unsigned __int8 *)(a1 + 64);
  uint64_t v9 = *(unsigned __int8 *)(a1 + 65);
  CFStringRef v11 = *(void **)(a1 + 40);
  uint64_t v10 = *(void *)(a1 + 48);
  id v12 = [*(id *)(a1 + 32) wifiPreference];
  LOBYTE(v14) = *(unsigned char *)(a1 + 66);
  return [v11 _reallyRetryPreferringWWAN:v8 skipPeer:v9 skipPeerError:v10 useWiFiHint:v12 causedByError:*(void *)(a1 + 56) forceReconnect:0 useSecondary:v14];
}

id sub_1002C13FC(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _siriConnection:0 didEncounterIntermediateError:*(void *)(a1 + 40)];
}

id sub_1002C14F8(uint64_t a1)
{
  return [*(id *)(a1 + 32) _siriConnection:0 siriNetworkConnection:*(void *)(a1 + 40) didEncounterError:*(void *)(a1 + 48) siriCoreAnalysisInfo:0 siriNetworkAnalysisInfo:*(void *)(a1 + 56)];
}

void sub_1002C15B0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(void *)(v1 + 248);
  if (v2 == *(void *)(a1 + 40))
  {
    int v4 = *(unsigned __int8 *)(v1 + 377);
    CFStringRef v5 = AFSiriLogContextSession;
    BOOL v6 = os_log_type_enabled(AFSiriLogContextSession, OS_LOG_TYPE_INFO);
    if (v4)
    {
      if (v6)
      {
        int v12 = 136315138;
        CFStringRef v13 = "-[ADSessionRemoteServer didCloseConnection:]_block_invoke";
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "%s Ignoring connection close since we have an incoming retry", (uint8_t *)&v12, 0xCu);
      }
    }
    else
    {
      if (v6)
      {
        int v12 = 136315394;
        CFStringRef v13 = "-[ADSessionRemoteServer didCloseConnection:]_block_invoke";
        __int16 v14 = 2112;
        uint64_t v15 = v2;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "%s Connection closed %@", (uint8_t *)&v12, 0x16u);
        uint64_t v1 = *(void *)(a1 + 32);
      }
      if (*(unsigned char *)(v1 + 354))
      {
        CFStringRef v7 = AFSiriLogContextSession;
        if (os_log_type_enabled(AFSiriLogContextSession, OS_LOG_TYPE_ERROR))
        {
          int v12 = 136315138;
          CFStringRef v13 = "-[ADSessionRemoteServer didCloseConnection:]_block_invoke";
          _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "%s Connection closed with active request, treating as error", (uint8_t *)&v12, 0xCu);
          uint64_t v1 = *(void *)(a1 + 32);
        }
        uint64_t v8 = *(void *)(a1 + 40);
        uint64_t v9 = +[AFError errorWithCode:9];
        [(id)v1 _siriConnection:0 siriNetworkConnection:v8 didEncounterError:v9 siriCoreAnalysisInfo:0 siriNetworkAnalysisInfo:0];
      }
      else
      {
        uint64_t v10 = [(id)v1 delegate];
        [v10 assistantSessionConnectionDidClose:*(void *)(a1 + 32)];

        [*(id *)(a1 + 32) _clearLimbo];
        CFStringRef v11 = [*(id *)(a1 + 32) _siriNetworkManager];
        [v11 releaseWiFiAssertion];

        [*(id *)(a1 + 32) _resetServerConnection];
      }
    }
  }
}

void *sub_1002C18A4(void *result)
{
  uint64_t v1 = (void *)result[4];
  if (v1[31] == result[5])
  {
    uint64_t v2 = result;
    CFStringRef v3 = AFSiriLogContextSession;
    if (os_log_type_enabled(AFSiriLogContextSession, OS_LOG_TYPE_INFO))
    {
      uint64_t v4 = v2[6];
      int v5 = 136315394;
      BOOL v6 = "-[ADSessionRemoteServer didReceiveAceObject:object:]_block_invoke";
      __int16 v7 = 2112;
      uint64_t v8 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "%s Received object %@", (uint8_t *)&v5, 0x16u);
      uint64_t v1 = (void *)v2[4];
    }
    return [v1 _handleAceObject:v2[6]];
  }
  return result;
}

void *sub_1002C1CD0(uint64_t a1)
{
  id result = *(void **)(a1 + 32);
  if (result[31] == *(void *)(a1 + 40))
  {
    [result _setSNCurrentConnectionType:*(void *)(a1 + 48)];
    CFStringRef v3 = [*(id *)(a1 + 32) delegate];
    [v3 assistantSession:*(void *)(a1 + 32) didOpenConnectionWithPolicyId:*(void *)(a1 + 56) routeId:*(void *)(a1 + 64) connectionDelay:*(double *)(a1 + 80)];

    [*(id *)(a1 + 32) _connectionOpened];
    uint64_t v4 = *(void **)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 72);
    uint64_t v6 = *(void *)(a1 + 48);
    return _[v4 _generateAWDMetricsForOpenedConnectionFromSiriNetwork:v5 type:v6];
  }
  return result;
}

id sub_1002C1D68(uint64_t a1)
{
  id v2 = objc_alloc_init((Class)NSMutableDictionary);
  CFStringRef v3 = v2;
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4) {
    [v2 setObject:v4 forKey:@"policyId"];
  }
  uint64_t v5 = *(void *)(a1 + 40);
  if (v5) {
    [v3 setObject:v5 forKey:@"routeId"];
  }
  uint64_t v6 = +[NSNumber numberWithDouble:*(double *)(a1 + 56)];
  [v3 setObject:v6 forKey:@"delay"];

  __int16 v7 = [*(id *)(a1 + 48) technologyDescription];
  if (v7) {
    [v3 setObject:v7 forKey:@"connectionType"];
  }

  return v3;
}

id sub_1002C2024(uint64_t a1)
{
  if ([*(id *)(a1 + 32) canUseWiFiDirectly] && (sub_100078614() & 1) == 0)
  {
    id v2 = [*(id *)(a1 + 40) _siriNetworkManager];
    [v2 acquireWiFiAssertion:1];
  }
  uint64_t v4 = *(void *)(a1 + 32);
  CFStringRef v3 = *(void **)(a1 + 40);
  return _[v3 _generateAWDMetricsForWillStartConnectionFromSNConnectionType:v4];
}

id sub_1002C2208(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _siriConnection:*(void *)(a1 + 40) didEncounterIntermediateError:*(void *)(a1 + 48)];
}

id sub_1002C2F50(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    id v2 = *(void **)(a1 + 40);
    if (v2) {
      id v3 = [v2 mutableCopy];
    }
    else {
      id v3 = objc_alloc_init((Class)NSMutableDictionary);
    }
    id v6 = v3;
    __int16 v7 = [*(id *)(a1 + 32) connectionType];
    [v7 technology];
    uint64_t v8 = SiriCoreConnectionTechnologyGetDescription();

    if (v8) {
      [v6 setObject:v8 forKey:@"connectionType"];
    }
    uint64_t v9 = [*(id *)(a1 + 32) connectionURL];
    uint64_t v10 = v9;
    if (v9)
    {
      CFStringRef v11 = [v9 absoluteString];
      [v6 setObject:v11 forKey:@"connectionURL"];
    }
    int v12 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", [*(id *)(a1 + 32) interfaceIndex]);
    [v6 setObject:v12 forKey:@"interfaceIndex"];

    CFStringRef v13 = [*(id *)(a1 + 32) sendBufferSize];
    if (v13) {
      [v6 setObject:v13 forKey:@"sendBufferSize"];
    }
    __int16 v14 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [*(id *)(a1 + 32) wwanPreferred]);
    [v6 setObject:v14 forKey:@"wwanPreferred"];

    uint64_t v15 = *(void **)(a1 + 32);
  }
  else
  {
    uint64_t v4 = *(void **)(a1 + 40);
    if (!*(void *)(a1 + 48))
    {
      id v6 = v4;
      goto LABEL_27;
    }
    if (v4) {
      id v5 = [v4 mutableCopy];
    }
    else {
      id v5 = objc_alloc_init((Class)NSMutableDictionary);
    }
    id v6 = v5;
    __int16 v16 = [*(id *)(a1 + 56) _currentSNConnectionType];
    uint64_t v8 = [v16 technologyDescription];

    if (v8) {
      [v6 setObject:v8 forKey:@"connectionType"];
    }
    __int16 v17 = [*(id *)(a1 + 48) connectionURL];
    uint64_t v10 = v17;
    if (v17)
    {
      CFStringRef v18 = [v17 absoluteString];
      [v6 setObject:v18 forKey:@"connectionURL"];
    }
    __int16 v19 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", [*(id *)(a1 + 48) interfaceIndex]);
    [v6 setObject:v19 forKey:@"interfaceIndex"];

    CFStringRef v13 = [*(id *)(a1 + 48) sendBufferSize];
    if (v13) {
      [v6 setObject:v13 forKey:@"sendBufferSize"];
    }
    CFStringRef v20 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [*(id *)(a1 + 48) wwanPreferred]);
    [v6 setObject:v20 forKey:@"wwanPreferred"];

    uint64_t v15 = *(void **)(a1 + 48);
  }
  int v21 = [v15 policyId];
  if (v21) {
    [v6 setObject:v21 forKey:@"policyId"];
  }

LABEL_27:
  return v6;
}

id sub_1002C3350(uint64_t a1)
{
  return [*(id *)(a1 + 32) _siriConnection:*(void *)(a1 + 40) didEncounterError:*(void *)(a1 + 48) analysisInfo:*(void *)(a1 + 56)];
}

void sub_1002C3400(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(void *)(v1 + 240);
  if (v2 == *(void *)(a1 + 40))
  {
    int v4 = *(unsigned __int8 *)(v1 + 377);
    id v5 = AFSiriLogContextSession;
    BOOL v6 = os_log_type_enabled(AFSiriLogContextSession, OS_LOG_TYPE_INFO);
    if (v4)
    {
      if (v6)
      {
        int v12 = 136315138;
        CFStringRef v13 = "-[ADSessionRemoteServer siriConnectionDidClose:]_block_invoke";
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "%s Ignoring connection close since we have an incoming retry", (uint8_t *)&v12, 0xCu);
      }
    }
    else
    {
      if (v6)
      {
        int v12 = 136315394;
        CFStringRef v13 = "-[ADSessionRemoteServer siriConnectionDidClose:]_block_invoke";
        __int16 v14 = 2112;
        uint64_t v15 = v2;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "%s Connection closed %@", (uint8_t *)&v12, 0x16u);
        uint64_t v1 = *(void *)(a1 + 32);
      }
      if (*(unsigned char *)(v1 + 354))
      {
        __int16 v7 = AFSiriLogContextSession;
        if (os_log_type_enabled(AFSiriLogContextSession, OS_LOG_TYPE_ERROR))
        {
          int v12 = 136315138;
          CFStringRef v13 = "-[ADSessionRemoteServer siriConnectionDidClose:]_block_invoke";
          _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "%s Connection closed with active request, treating as error", (uint8_t *)&v12, 0xCu);
          uint64_t v1 = *(void *)(a1 + 32);
        }
        uint64_t v8 = *(void *)(a1 + 40);
        uint64_t v9 = +[AFError errorWithCode:9];
        [(id)v1 _siriConnection:v8 didEncounterError:v9 analysisInfo:0];
      }
      else
      {
        uint64_t v10 = [(id)v1 delegate];
        [v10 assistantSessionConnectionDidClose:*(void *)(a1 + 32)];

        [*(id *)(a1 + 32) _clearLimbo];
        CFStringRef v11 = [*(id *)(a1 + 32) _networkManager];
        [v11 releaseWiFiAssertion];

        [*(id *)(a1 + 32) _resetServerConnection];
      }
    }
  }
}

void *sub_1002C36EC(void *result)
{
  uint64_t v1 = (void *)result[4];
  if (v1[30] == result[5])
  {
    uint64_t v2 = result;
    id v3 = AFSiriLogContextSession;
    if (os_log_type_enabled(AFSiriLogContextSession, OS_LOG_TYPE_INFO))
    {
      uint64_t v4 = v2[6];
      int v5 = 136315394;
      BOOL v6 = "-[ADSessionRemoteServer siriConnection:didReceiveAceObject:]_block_invoke";
      __int16 v7 = 2112;
      uint64_t v8 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "%s Received object %@", (uint8_t *)&v5, 0x16u);
      uint64_t v1 = (void *)v2[4];
    }
    return [v1 _handleAceObject:v2[6]];
  }
  return result;
}

void *sub_1002C3A60(uint64_t a1)
{
  id result = *(void **)(a1 + 32);
  if (result[30] == *(void *)(a1 + 40))
  {
    [result _setCurrentConnectionType:*(void *)(a1 + 48)];
    id v3 = [*(id *)(a1 + 32) delegate];
    [v3 assistantSession:*(void *)(a1 + 32) didOpenConnectionWithPolicyId:*(void *)(a1 + 56) routeId:*(void *)(a1 + 64) connectionDelay:*(double *)(a1 + 80)];

    [*(id *)(a1 + 32) _connectionOpened];
    uint64_t v4 = *(void **)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 72);
    uint64_t v6 = *(void *)(a1 + 48);
    return _[v4 _generateAWDMetricsForOpenedConnection:v5 type:v6];
  }
  return result;
}

id sub_1002C3AF8(uint64_t a1)
{
  id v2 = objc_alloc_init((Class)NSMutableDictionary);
  id v3 = v2;
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4) {
    [v2 setObject:v4 forKey:@"policyId"];
  }
  uint64_t v5 = *(void *)(a1 + 40);
  if (v5) {
    [v3 setObject:v5 forKey:@"routeId"];
  }
  uint64_t v6 = +[NSNumber numberWithDouble:*(double *)(a1 + 56)];
  [v3 setObject:v6 forKey:@"delay"];

  [*(id *)(a1 + 48) technology];
  __int16 v7 = SiriCoreConnectionTechnologyGetDescription();
  if (v7) {
    [v3 setObject:v7 forKey:@"connectionType"];
  }

  return v3;
}

id sub_1002C3D10(uint64_t a1)
{
  if ([*(id *)(a1 + 32) canUseWiFiDirectly] && (sub_100078614() & 1) == 0)
  {
    id v2 = [*(id *)(a1 + 40) _networkManager];
    [v2 acquireWiFiAssertion:1];
  }
  uint64_t v4 = *(void *)(a1 + 32);
  id v3 = *(void **)(a1 + 40);
  return _[v3 _generateAWDMetricsForWillStartConnection:v4];
}

id sub_1002C42C0(uint64_t a1, int a2, int a3)
{
  if (a2)
  {
    *(unsigned char *)(*(void *)(a1 + 32) + 304) = 1;
  }
  else if (a3)
  {
    [*(id *)(a1 + 32) _setCachedServerCertificate:0];
  }
  uint64_t v4 = *(void **)(a1 + 32);
  return _[v4 _eagerAuthDidComplete];
}

id sub_1002C4CAC(uint64_t a1, int a2, int a3)
{
  if (a2)
  {
    *(unsigned char *)(*(void *)(a1 + 32) + 304) = 1;
  }
  else if (a3)
  {
    [*(id *)(a1 + 32) _setCachedServerCertificate:0];
  }
  uint64_t v4 = *(void **)(a1 + 32);
  return _[v4 _eagerAuthDidComplete];
}

void sub_1002C549C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id location)
{
  objc_destroyWeak(v26);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1002C54BC(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  uint64_t v6 = AFSiriLogContextSession;
  if (os_log_type_enabled(AFSiriLogContextSession, OS_LOG_TYPE_INFO))
  {
    int v9 = 136315138;
    uint64_t v10 = "-[ADSessionRemoteServer _resetServerConnectionSynchronously:completion:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "%s ", (uint8_t *)&v9, 0xCu);
  }
  [v5 cancelSynchronously:*(unsigned __int8 *)(a1 + 48) onQueue:a3 completion:*(void *)(a1 + 40)];
  kdebug_trace();
  __int16 v7 = +[AFAnalytics sharedAnalytics];
  [v7 logEventWithType:913 context:0];

  uint64_t v8 = [*(id *)(a1 + 32) _networkManager];
  [v8 releaseWiFiAssertion];
}

void sub_1002C55EC(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  uint64_t v6 = AFSiriLogContextSession;
  if (os_log_type_enabled(AFSiriLogContextSession, OS_LOG_TYPE_INFO))
  {
    int v9 = 136315138;
    uint64_t v10 = "-[ADSessionRemoteServer _resetServerConnectionSynchronously:completion:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "%s ", (uint8_t *)&v9, 0xCu);
  }
  [v5 cancelSynchronously:*(unsigned __int8 *)(a1 + 48) isOnConnectionQueue:a3 completion:*(void *)(a1 + 40)];
  kdebug_trace();
  __int16 v7 = +[AFAnalytics sharedAnalytics];
  [v7 logEventWithType:913 context:0];

  uint64_t v8 = [*(id *)(a1 + 32) _siriNetworkManager];
  [v8 releaseWiFiAssertion];
}

void sub_1002C571C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  id v5 = WeakRetained;
  if (v3 && WeakRetained)
  {
    uint64_t v6 = WeakRetained[29];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1002C5A80;
    block[3] = &unk_10050D3F0;
    uint64_t v10 = WeakRetained;
    id v7 = v3;
    uint64_t v8 = *(void *)(a1 + 32);
    id v11 = v7;
    uint64_t v12 = v8;
    id v14 = *(id *)(a1 + 48);
    id v13 = *(id *)(a1 + 40);
    dispatch_async(v6, block);
  }
  else
  {
    dispatch_group_leave(*(dispatch_group_t *)(*(void *)(a1 + 32) + 480));
    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
}

void sub_1002C5844(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  id v5 = WeakRetained;
  if (v3 && WeakRetained)
  {
    uint64_t v6 = WeakRetained[29];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1002C596C;
    block[3] = &unk_10050D3F0;
    uint64_t v10 = WeakRetained;
    id v7 = v3;
    uint64_t v8 = *(void *)(a1 + 32);
    id v11 = v7;
    uint64_t v12 = v8;
    id v14 = *(id *)(a1 + 48);
    id v13 = *(id *)(a1 + 40);
    dispatch_async(v6, block);
  }
  else
  {
    dispatch_group_leave(*(dispatch_group_t *)(*(void *)(a1 + 32) + 480));
    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
}

uint64_t sub_1002C596C(void *a1)
{
  id v2 = AFSiriLogContextSession;
  if (os_log_type_enabled(AFSiriLogContextSession, OS_LOG_TYPE_INFO))
  {
    int v8 = 136315138;
    int v9 = "-[ADSessionRemoteServer _resetServerConnectionSynchronously:completion:]_block_invoke_2";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s Adding metrics", (uint8_t *)&v8, 0xCu);
  }
  id v3 = *(void **)(a1[4] + 464);
  if (!v3)
  {
    id v4 = objc_alloc_init((Class)NSMutableArray);
    uint64_t v5 = a1[4];
    uint64_t v6 = *(void **)(v5 + 464);
    *(void *)(v5 + 464) = v4;

    id v3 = *(void **)(a1[4] + 464);
  }
  [v3 addObject:a1[5]];
  dispatch_group_leave(*(dispatch_group_t *)(a1[6] + 480));
  return (*(uint64_t (**)(void))(a1[8] + 16))();
}

uint64_t sub_1002C5A80(void *a1)
{
  id v2 = AFSiriLogContextSession;
  if (os_log_type_enabled(AFSiriLogContextSession, OS_LOG_TYPE_INFO))
  {
    int v8 = 136315138;
    int v9 = "-[ADSessionRemoteServer _resetServerConnectionSynchronously:completion:]_block_invoke_2";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s Adding metrics", (uint8_t *)&v8, 0xCu);
  }
  id v3 = *(void **)(a1[4] + 456);
  if (!v3)
  {
    id v4 = objc_alloc_init((Class)NSMutableArray);
    uint64_t v5 = a1[4];
    uint64_t v6 = *(void **)(v5 + 456);
    *(void *)(v5 + 456) = v4;

    id v3 = *(void **)(a1[4] + 456);
  }
  [v3 addObject:a1[5]];
  dispatch_group_leave(*(dispatch_group_t *)(a1[6] + 480));
  return (*(uint64_t (**)(void))(a1[8] + 16))();
}

void sub_1002C6ECC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3 = a3;
  [*(id *)(a1 + 32) _startConnectionPreferringWWAN:*(unsigned __int8 *)(*(void *)(a1 + 32) + 308) skipPeer:a2 skipPeerError:*(void *)(*(void *)(a1 + 32) + 312) useWiFiHint:a3 forceReconnect:*(unsigned __int8 *)(*(void *)(a1 + 32) + 320)];
  *(unsigned char *)(*(void *)(a1 + 32) + 309) = 0;
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *(void **)(v5 + 312);
  *(void *)(v5 + 312) = 0;

  *(unsigned char *)(*(void *)(a1 + 32) + 320) = 0;
  *(unsigned char *)(*(void *)(a1 + 32) + 353) = v3;
  id v7 = +[AFDiagnostics sharedDiagnostics];
  [v7 logConnectionStart];
}

void sub_1002C6F98(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(NSObject **)(v4 + 232);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1002C724C;
  block[3] = &unk_10050E1D8;
  id v8 = v3;
  uint64_t v9 = v4;
  id v10 = *(id *)(a1 + 40);
  id v6 = v3;
  dispatch_async(v5, block);
}

void sub_1002C705C(uint64_t a1, char a2, char a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(NSObject **)(v3 + 232);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1002C7100;
  block[3] = &unk_10050A028;
  char v7 = a2;
  char v8 = a3;
  void block[4] = v3;
  id v6 = *(id *)(a1 + 40);
  dispatch_async(v4, block);
}

uint64_t sub_1002C7100(uint64_t a1)
{
  id v2 = AFSiriLogContextSession;
  if (os_log_type_enabled(AFSiriLogContextSession, OS_LOG_TYPE_INFO))
  {
    if (*(unsigned char *)(a1 + 48)) {
      CFStringRef v3 = @"preferBT";
    }
    else {
      CFStringRef v3 = @"notBT";
    }
    int v4 = *(unsigned __int8 *)(a1 + 49);
    id v10 = "-[ADSessionRemoteServer _startConnection]_block_invoke_2";
    int v9 = 136315650;
    __int16 v11 = 2112;
    CFStringRef v12 = v3;
    if (v4) {
      CFStringRef v5 = @"preferWiFi";
    }
    else {
      CFStringRef v5 = @"notWiFi";
    }
    __int16 v13 = 2112;
    CFStringRef v14 = v5;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s Starting with proximity link recommendation %@ %@", (uint8_t *)&v9, 0x20u);
  }
  if (*(unsigned char *)(a1 + 49))
  {
    id v6 = [*(id *)(a1 + 32) _networkManager];
    [v6 acquireWiFiAssertion:2];

    BOOL v7 = *(unsigned char *)(a1 + 49) != 0;
  }
  else
  {
    BOOL v7 = 0;
  }
  return (*(uint64_t (**)(void, BOOL, BOOL))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(unsigned char *)(a1 + 48) == 0, v7);
}

uint64_t sub_1002C724C(uint64_t a1)
{
  id v2 = (void *)AFSiriLogContextSession;
  if (os_log_type_enabled(AFSiriLogContextSession, OS_LOG_TYPE_INFO))
  {
    CFStringRef v3 = *(void **)(a1 + 32);
    int v4 = v2;
    if ([v3 btPreference]) {
      CFStringRef v5 = @"preferBT";
    }
    else {
      CFStringRef v5 = @"notBT";
    }
    unsigned int v6 = [*(id *)(a1 + 32) wifiPreference];
    CFStringRef v7 = @"notWiFi";
    *(void *)&void v10[4] = "-[ADSessionRemoteServer _startConnection]_block_invoke_2";
    *(_DWORD *)id v10 = 136315650;
    *(_WORD *)&v10[12] = 2112;
    *(void *)&v10[14] = v5;
    if (v6) {
      CFStringRef v7 = @"preferWiFi";
    }
    *(_WORD *)&v10[22] = 2112;
    CFStringRef v11 = v7;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%s Starting with proximity link recommendation %@ %@", v10, 0x20u);
  }
  if (objc_msgSend(*(id *)(a1 + 32), "wifiPreference", *(_OWORD *)v10, *(void *)&v10[16]))
  {
    char v8 = [*(id *)(a1 + 40) _siriNetworkManager];
    [v8 acquireWiFiAssertion:2];
  }
  return (*(uint64_t (**)(void, void, id))(*(void *)(a1 + 48) + 16))(*(void *)(a1 + 48), [*(id *)(a1 + 32) btPreference] ^ 1, objc_msgSend(*(id *)(a1 + 32), "wifiPreference"));
}

void sub_1002C78E0(uint64_t a1)
{
}

void sub_1002C7EE4(uint64_t a1, void *a2)
{
  id v12 = a2;
  id v3 = [objc_alloc((Class)NSMutableDictionary) initWithCapacity:4];
  unint64_t v4 = (unint64_t)[v12 cellularInstant];
  if (v4 > 2) {
    CFStringRef v5 = @"Unknown";
  }
  else {
    CFStringRef v5 = off_10050A448[v4];
  }
  [v3 setObject:v5 forKey:@"CellularInstant"];
  unint64_t v6 = (unint64_t)[v12 cellularHistorical];
  if (v6 > 2) {
    CFStringRef v7 = @"Unknown";
  }
  else {
    CFStringRef v7 = off_10050A448[v6];
  }
  [v3 setObject:v7 forKey:@"CellularHistorical"];
  unint64_t v8 = (unint64_t)[v12 wifiInstant];
  if (v8 > 2) {
    CFStringRef v9 = @"Unknown";
  }
  else {
    CFStringRef v9 = off_10050A448[v8];
  }
  [v3 setObject:v9 forKey:@"WiFiInstant"];
  unint64_t v10 = (unint64_t)[v12 wifiHistorical];
  if (v10 > 2) {
    CFStringRef v11 = @"Unknown";
  }
  else {
    CFStringRef v11 = off_10050A448[v10];
  }
  [v3 setObject:v11 forKey:@"WiFiHistorical"];
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1002C9E20(uint64_t a1, void *a2)
{
  id v3 = a2;
  unint64_t v4 = AFSiriLogContextDeviceSync;
  if (os_log_type_enabled(AFSiriLogContextDeviceSync, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)long long buf = 136315394;
    CFStringRef v11 = "-[ADDeviceSyncTimerProvider getSnapshotWithCompletion:]_block_invoke";
    __int16 v12 = 2112;
    id v13 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%s Fetched local timer snapshot %@.", buf, 0x16u);
  }
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1002C9FD8;
  v8[3] = &unk_10050A4B8;
  id v5 = v3;
  id v9 = v5;
  id v6 = +[ADDeviceSyncSnapshot newWithBuilder:v8];
  CFStringRef v7 = AFSiriLogContextDeviceSync;
  if (os_log_type_enabled(AFSiriLogContextDeviceSync, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)long long buf = 136315394;
    CFStringRef v11 = "-[ADDeviceSyncTimerProvider getSnapshotWithCompletion:]_block_invoke_3";
    __int16 v12 = 2112;
    id v13 = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "%s Converted to device sync snapshot %@.", buf, 0x16u);
  }
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1002C9FD8(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  objc_msgSend(v4, "setGeneration:", objc_msgSend(v3, "generation"));
  id v5 = [*(id *)(a1 + 32) date];
  [v4 setDate:v5];

  id v6 = objc_alloc_init((Class)NSMutableArray);
  CFStringRef v7 = [*(id *)(a1 + 32) timersByID];
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_1002CA0E4;
  v9[3] = &unk_10050A490;
  id v10 = v6;
  id v8 = v6;
  [v7 enumerateKeysAndObjectsUsingBlock:v9];

  [v4 setItems:v8];
}

void sub_1002CA0E4(uint64_t a1, uint64_t a2, void *a3)
{
  id v3 = *(void **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_1000B9734;
  v6[3] = &unk_100500CC0;
  id v7 = a3;
  id v4 = v7;
  id v5 = +[ADDeviceSyncItem newWithBuilder:v6];

  [v3 addObject:v5];
}

uint64_t sub_1002CA51C(uint64_t a1, void *a2)
{
  id v3 = [a2 generation];
  id v4 = AFSiriLogContextDeviceSync;
  if (os_log_type_enabled(AFSiriLogContextDeviceSync, OS_LOG_TYPE_INFO))
  {
    int v6 = 136315394;
    id v7 = "-[ADDeviceSyncTimerProvider getGenerationWithCompletion:]_block_invoke";
    __int16 v8 = 2048;
    id v9 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%s Loaded local timer generation %llu.", (uint8_t *)&v6, 0x16u);
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1002CAAB8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = +[ADDeviceProximityManager sharedManager];
  id v5 = sub_1002ABC8C(v3);
  uint64_t v6 = *(unsigned __int8 *)(a1 + 40);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_1002CABA8;
  v9[3] = &unk_10050DEC0;
  id v7 = *(id *)(a1 + 32);
  id v10 = v3;
  id v11 = v7;
  id v8 = v3;
  [v4 getDeviceProximityRelativeToLocalDeviceWithDeviceContexts:v5 includesAllReachableDevices:v6 completion:v9];
}

uint64_t sub_1002CABA8(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, void, uint64_t))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32), a2);
}

void sub_1002CAD78(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v12 = 0;
  id v13 = &v12;
  uint64_t v14 = 0x3032000000;
  uint64_t v15 = sub_1002CAF70;
  __int16 v16 = sub_1002CAF80;
  id v17 = 0;
  if ([v5 isLocationSharingDevice])
  {
    uint64_t v7 = sub_1002CAF88(v5, 4000);
    id v8 = (void *)v13[5];
    void v13[5] = v7;
  }
  else
  {
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    void v11[2] = sub_1002CB244;
    void v11[3] = &unk_10050A740;
    void v11[4] = &v12;
    [v6 enumerateObjectsUsingBlock:v11];
  }
  id v9 = AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v10 = v13[5];
    *(_DWORD *)long long buf = 136315394;
    __int16 v19 = "-[ADDeviceResolutionServiceListener meDeviceWithCompletion:]_block_invoke";
    __int16 v20 = 2112;
    uint64_t v21 = v10;
    _os_log_debug_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "%s #hal meDevice: %@", buf, 0x16u);
  }
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  _Block_object_dispose(&v12, 8);
}

void sub_1002CAF50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1002CAF70(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1002CAF80(uint64_t a1)
{
}

id sub_1002CAF88(void *a1, uint64_t a2)
{
  id v3 = a1;
  id v4 = +[ADDeviceCircleManager sharedInstance];
  id v5 = [v4 managedPeerInfoMatchingPeerInfo:v3];

  id v6 = [v3 idsDeviceUniqueIdentifier];
  uint64_t v7 = v6;
  if (v6)
  {
    id v8 = v6;
  }
  else
  {
    id v8 = [v5 idsDeviceUniqueIdentifier];
  }
  id v9 = v8;

  uint64_t v10 = [v3 assistantIdentifier];
  id v11 = v10;
  if (v10)
  {
    id v12 = v10;
  }
  else
  {
    id v12 = [v5 assistantIdentifier];
  }
  id v13 = v12;

  uint64_t v14 = [v3 name];
  uint64_t v15 = v14;
  if (v14)
  {
    id v16 = v14;
  }
  else
  {
    id v16 = [v5 name];
  }
  id v17 = v16;

  CFStringRef v18 = [v3 roomName];
  __int16 v19 = v18;
  if (v18)
  {
    id v20 = v18;
  }
  else
  {
    id v20 = [v5 roomName];
  }
  uint64_t v21 = v20;

  uint64_t v22 = [v3 mediaRouteIdentifier];
  __int16 v23 = v22;
  if (v22)
  {
    id v24 = v22;
  }
  else
  {
    id v24 = [v5 mediaRouteIdentifier];
  }
  __int16 v25 = v24;

  int8x16_t v26 = v9;
  uint64_t v27 = a2;
  if ([v3 isCommunalDevice]) {
    unsigned __int8 v28 = 1;
  }
  else {
    unsigned __int8 v28 = [v5 isCommunalDevice];
  }
  id v29 = [v3 homeKitAccessoryIdentifier];
  long long v30 = v29;
  id v40 = v5;
  if (v29)
  {
    id v31 = v29;
  }
  else
  {
    id v31 = [v5 homeKitAccessoryIdentifier];
  }
  long long v32 = v31;

  id v33 = objc_alloc((Class)SVDDeviceUnit);
  v41[0] = _NSConcreteStackBlock;
  v41[1] = 3221225472;
  v41[2] = sub_1002CB2C0;
  v41[3] = &unk_10050A7B8;
  id v42 = v17;
  id v43 = v21;
  id v45 = v32;
  uint64_t v46 = v27;
  unsigned __int8 v47 = v28;
  id v44 = v25;
  id v34 = v32;
  id v35 = v25;
  id v36 = v21;
  id v37 = v17;
  id v38 = [v33 initWithIdentifier:v26 assistantId:v13 builder:v41];

  return v38;
}

void sub_1002CB244(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  id v9 = a2;
  if ([v9 isLocationSharingDevice])
  {
    uint64_t v6 = sub_1002CAF88(v9, 0);
    uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 8);
    id v8 = *(void **)(v7 + 40);
    *(void *)(v7 + 40) = v6;

    *a4 = 1;
  }
}

void sub_1002CB2C0(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = a2;
  [v4 setName:v3];
  [v4 setRoomName:*(void *)(a1 + 40)];
  [v4 setProximity:*(void *)(a1 + 64)];
  [v4 setMediaRouteIdentifier:*(void *)(a1 + 48)];
  [v4 setIsCommunalDevice:*(unsigned __int8 *)(a1 + 72)];
  [v4 setHomeKitAccessoryIdentifier:*(void *)(a1 + 56)];
}

void sub_1002CB4A0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 assistantId];
  id v5 = [v3 userAssignedName];
  unsigned __int8 v6 = [v3 siriEnabled];

  if (!v3 || (v6 & 1) != 0)
  {
    id v9 = +[ADCommandCenter sharedCommandCenter];
    uint64_t v10 = [v9 _sharedDataService];
    if ([v10 watchIsNearbyForAssistantId:v4]) {
      uint64_t v11 = 2000;
    }
    else {
      uint64_t v11 = 0;
    }

    id v12 = objc_alloc((Class)SVDDeviceUnit);
    id v13 = objc_opt_new();
    uint64_t v14 = [v13 UUIDString];
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472;
    v17[2] = sub_1002CB6BC;
    v17[3] = &unk_10050A6F0;
    id v18 = v5;
    uint64_t v19 = v11;
    id v15 = [v12 initWithIdentifier:v14 assistantId:v4 builder:v17];

    uint64_t v16 = *(void *)(a1 + 32);
    if (v16) {
      (*(void (**)(uint64_t, id))(v16 + 16))(v16, v15);
    }
  }
  else
  {
    uint64_t v7 = AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 136315138;
      uint64_t v21 = "-[ADDeviceResolutionServiceListener _pairedCompanionDeviceFromSharedDataWithCompletion:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "%s #hal assistant is disabled on paired companion. Returning nil.", buf, 0xCu);
    }
    uint64_t v8 = *(void *)(a1 + 32);
    if (v8) {
      (*(void (**)(uint64_t, void))(v8 + 16))(v8, 0);
    }
  }
}

void sub_1002CB6BC(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = a2;
  [v4 setName:v3];
  [v4 setProximity:*(void *)(a1 + 40)];
}

void sub_1002CB86C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v11 = 0;
  id v12 = &v11;
  uint64_t v13 = 0x3032000000;
  uint64_t v14 = sub_1002CAF70;
  id v15 = sub_1002CAF80;
  id v16 = 0;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_1002CBA94;
  v10[3] = &unk_10050A6A0;
  void v10[4] = *(void *)(a1 + 32);
  void v10[5] = &v11;
  [v6 enumerateObjectsUsingBlock:v10];
  uint64_t v7 = v12[5];
  uint64_t v8 = AFSiriLogContextDaemon;
  BOOL v9 = os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG);
  if (v7)
  {
    if (v9)
    {
      *(_DWORD *)long long buf = 136315394;
      id v18 = "-[ADDeviceResolutionServiceListener pairedCompanionDeviceWithCompletion:]_block_invoke_2";
      __int16 v19 = 2112;
      uint64_t v20 = v7;
      _os_log_debug_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "%s #hal pairedCompanionDevice from device circle: %@", buf, 0x16u);
    }
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
  else
  {
    if (v9)
    {
      *(_DWORD *)long long buf = 136315138;
      id v18 = "-[ADDeviceResolutionServiceListener pairedCompanionDeviceWithCompletion:]_block_invoke";
      _os_log_debug_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "%s #hal paired companion not found in device circle, falling back to find synced id from shared data.", buf, 0xCu);
    }
    [*(id *)(a1 + 32) _pairedCompanionDeviceFromSharedDataWithCompletion:*(void *)(a1 + 40)];
  }
  _Block_object_dispose(&v11, 8);
}

void sub_1002CBA74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1002CBA94(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  id v9 = a2;
  if ((objc_msgSend(*(id *)(a1 + 32), "_peerIsPairedWatch:") & 1) != 0
    || [*(id *)(a1 + 32) _peerIsPairedPhone:v9])
  {
    uint64_t v6 = sub_1002CAF88(v9, 3000);
    uint64_t v7 = *(void *)(*(void *)(a1 + 40) + 8);
    uint64_t v8 = *(void **)(v7 + 40);
    *(void *)(v7 + 40) = v6;

    *a4 = 1;
  }
}

void sub_1002CBE00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}