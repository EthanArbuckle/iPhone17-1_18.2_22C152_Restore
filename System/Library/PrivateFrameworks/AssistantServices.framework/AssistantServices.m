id getTRINamespaceClass()
{
  void *v0;
  id v1;
  void v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t vars8;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getTRINamespaceClass_softClass;
  v7 = getTRINamespaceClass_softClass;
  if (!getTRINamespaceClass_softClass)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = __getTRINamespaceClass_block_invoke;
    v3[3] = &unk_1E592C0B0;
    v3[4] = &v4;
    __getTRINamespaceClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_19CF1FC58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getAVSystemControllerClass()
{
  uint64_t v4 = 0;
  v5 = &v4;
  uint64_t v6 = 0x2050000000;
  v0 = (void *)getAVSystemControllerClass_softClass;
  uint64_t v7 = getAVSystemControllerClass_softClass;
  if (!getAVSystemControllerClass_softClass)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = __getAVSystemControllerClass_block_invoke;
    v3[3] = &unk_1E592C0B0;
    v3[4] = &v4;
    __getAVSystemControllerClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_19CF1FD3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void getAVSystemController_PickableRoutesDidChangeNotification()
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  v0 = (void **)getAVSystemController_PickableRoutesDidChangeNotificationSymbolLoc_ptr;
  uint64_t v9 = getAVSystemController_PickableRoutesDidChangeNotificationSymbolLoc_ptr;
  if (!getAVSystemController_PickableRoutesDidChangeNotificationSymbolLoc_ptr)
  {
    id v1 = MediaExperienceLibrary();
    v7[3] = (uint64_t)dlsym(v1, "AVSystemController_PickableRoutesDidChangeNotification");
    getAVSystemController_PickableRoutesDidChangeNotificationSymbolLoc_ptr = v7[3];
    v0 = (void **)v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (v0)
  {
    v2 = *v0;
    id v3 = v2;
  }
  else
  {
    uint64_t v4 = [MEMORY[0x1E4F28B00] currentHandler];
    v5 = [NSString stringWithUTF8String:"NSString *getAVSystemController_PickableRoutesDidChangeNotification(void)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"AFSiriHeadphonesMonitor.m", 50, @"%s", dlerror());

    __break(1u);
  }
}

void sub_19CF1FEA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void getAVSystemController_PreferredExternalRouteDidChangeNotification()
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  v0 = (void **)getAVSystemController_PreferredExternalRouteDidChangeNotificationSymbolLoc_ptr;
  uint64_t v9 = getAVSystemController_PreferredExternalRouteDidChangeNotificationSymbolLoc_ptr;
  if (!getAVSystemController_PreferredExternalRouteDidChangeNotificationSymbolLoc_ptr)
  {
    id v1 = MediaExperienceLibrary();
    v7[3] = (uint64_t)dlsym(v1, "AVSystemController_PreferredExternalRouteDidChangeNotification");
    getAVSystemController_PreferredExternalRouteDidChangeNotificationSymbolLoc_ptr = v7[3];
    v0 = (void **)v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (v0)
  {
    v2 = *v0;
    id v3 = v2;
  }
  else
  {
    uint64_t v4 = [MEMORY[0x1E4F28B00] currentHandler];
    v5 = [NSString stringWithUTF8String:"NSString *getAVSystemController_PreferredExternalRouteDidChangeNotification(void)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"AFSiriHeadphonesMonitor.m", 49, @"%s", dlerror());

    __break(1u);
  }
}

void sub_19CF2000C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _AFPreferencesBoolValueForKeyWithContext(const __CFString *a1, uint64_t a2, const __CFString *a3, void *a4)
{
  uint64_t v6 = _AFPreferencesValueForKeyWithContext(a1, a3, a4);
  uint64_t v7 = _AFPreferencesBoolFromValueWithDefault(v6, (uint64_t)a1, a2);

  return v7;
}

uint64_t _AFPreferencesBoolFromValueWithDefault(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  if (objc_opt_respondsToSelector())
  {
    a3 = [v5 BOOLValue];
  }
  else if (v5)
  {
    uint64_t v6 = AFSiriLogContextConnection;
    if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_ERROR))
    {
      int v8 = 136315906;
      uint64_t v9 = "_AFPreferencesBoolFromValueWithDefault";
      __int16 v10 = 1024;
      int v11 = a3;
      __int16 v12 = 2112;
      uint64_t v13 = a2;
      __int16 v14 = 2112;
      id v15 = v5;
      _os_log_error_impl(&dword_19CF1D000, v6, OS_LOG_TYPE_ERROR, "%s Expected a value responding to -BOOLValue, but found something else. Returning %{BOOL}d. {key: %@, value: %@}", (uint8_t *)&v8, 0x26u);
    }
  }

  return a3;
}

BOOL AFMapsNavigationStatusIsActive()
{
  v0 = +[AFPreferences sharedPreferences];
  uint64_t v1 = [v0 currentNavigationState];

  return (unint64_t)(v1 - 1) < 3;
}

uint64_t _AFPreferencesSiriDataSharingOptInStatusWithContext(void *a1)
{
  id v1 = a1;
  if (+[AFFeatureFlags isSiriDataSharingRepromptEnabled])
  {
    CFStringRef v2 = @"Siri Data Sharing Opt-In Status 2.0";
  }
  else
  {
    CFStringRef v2 = @"Siri Data Sharing Opt-In Status";
  }
  id v3 = _AFPreferencesValueForKeyWithContext(v2, @"com.apple.assistant.support", v1);

  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    uint64_t v4 = [v3 integerValue];
  }
  else {
    uint64_t v4 = 0;
  }

  return v4;
}

uint64_t AFDictationHasHighQualityModels()
{
  uint64_t v5 = 0;
  uint64_t v6 = &v5;
  uint64_t v7 = 0x2020000000;
  char v8 = 0;
  v0 = +[AFPreferences sharedPreferences];
  id v1 = [v0 offlineDictationStatus];
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = __AFDictationHasHighQualityModels_block_invoke;
  v4[3] = &unk_1E592C030;
  v4[4] = &v5;
  [v1 enumerateKeysAndObjectsUsingBlock:v4];

  uint64_t v2 = *((unsigned __int8 *)v6 + 24);
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_19CF20C1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19CF21EE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _AFSupportPreferencesBoolForKeyWithDefault(const __CFString *a1, uint64_t a2)
{
  id v3 = _AFSupportPreferencesBoolValueForKey(a1);
  uint64_t v4 = v3;
  if (v3) {
    a2 = [v3 BOOLValue];
  }

  return a2;
}

id _AFSupportPreferencesBoolValueForKey(const __CFString *a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = _AFPreferencesValueForKeyWithContext(a1, @"com.apple.assistant.support", 0);
  if (v2 && (objc_opt_respondsToSelector() & 1) == 0)
  {
    id v3 = AFSiriLogContextConnection;
    if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_ERROR))
    {
      int v5 = 136315650;
      uint64_t v6 = "_AFSupportPreferencesBoolValueForKey";
      __int16 v7 = 2112;
      CFStringRef v8 = a1;
      __int16 v9 = 2112;
      __int16 v10 = v2;
      _os_log_error_impl(&dword_19CF1D000, v3, OS_LOG_TYPE_ERROR, "%s Expected a value responding to -BOOLValue, but found something else! Acting as-if no value was set. {key: %@, value: %@}", (uint8_t *)&v5, 0x20u);
    }

    uint64_t v2 = 0;
  }
  return v2;
}

id _AFPreferencesValueForKeyWithContext(const __CFString *a1, const __CFString *a2, void *a3)
{
  int v5 = [a3 preferencesSubdomain];
  if (v5)
  {
    uint64_t v6 = (__CFString *)[[NSString alloc] initWithFormat:@"%@/%@", v5, a1];
    __int16 v7 = (void *)CFPreferencesCopyAppValue(v6, a2);
  }
  else
  {
    __int16 v7 = (void *)CFPreferencesCopyAppValue(a1, a2);
  }

  return v7;
}

void sub_19CF22484(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void __AFLogInitIfNeeded_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.siri", (const char *)kAFLogContextConnection);
  id v1 = (void *)AFSiriLogContextConnection;
  AFSiriLogContextConnection = (uint64_t)v0;

  os_log_t v2 = os_log_create("com.apple.siri", (const char *)kAFLogContextClientFlow);
  id v3 = (void *)AFSiriLogContextClientFlow;
  AFSiriLogContextClientFlow = (uint64_t)v2;

  os_log_t v4 = os_log_create("com.apple.siri", (const char *)kAFLogContextDaemon);
  int v5 = (void *)AFSiriLogContextDaemon;
  AFSiriLogContextDaemon = (uint64_t)v4;

  os_log_t v6 = os_log_create("com.apple.siri", (const char *)kAFLogContextPersisted);
  __int16 v7 = (void *)AFSiriLogContextPersisted;
  AFSiriLogContextPersisted = (uint64_t)v6;

  os_log_t v8 = os_log_create("com.apple.siri", (const char *)kAFLogContextSession);
  __int16 v9 = (void *)AFSiriLogContextSession;
  AFSiriLogContextSession = (uint64_t)v8;

  os_log_t v10 = os_log_create("com.apple.siri", (const char *)kAFLogContextSpeech);
  uint64_t v11 = (void *)AFSiriLogContextSpeech;
  AFSiriLogContextSpeech = (uint64_t)v10;

  os_log_t v12 = os_log_create("com.apple.siri", (const char *)kAFLogContextFides);
  uint64_t v13 = (void *)AFSiriLogContextFides;
  AFSiriLogContextFides = (uint64_t)v12;

  os_log_t v14 = os_log_create("com.apple.siri", (const char *)kAFLogContextLocation);
  id v15 = (void *)AFSiriLogContextLocation;
  AFSiriLogContextLocation = (uint64_t)v14;

  os_log_t v16 = os_log_create("com.apple.siri", (const char *)kAFLogContextDaemonAce);
  v17 = (void *)AFSiriLogContextDaemonAce;
  AFSiriLogContextDaemonAce = (uint64_t)v16;

  os_log_t v18 = os_log_create("com.apple.siri", (const char *)kAFLogContextService);
  v19 = (void *)AFSiriLogContextService;
  AFSiriLogContextService = (uint64_t)v18;

  os_log_t v20 = os_log_create("com.apple.siri", (const char *)kAFLogContextPlugin);
  v21 = (void *)AFSiriLogContextPlugin;
  AFSiriLogContextPlugin = (uint64_t)v20;

  os_log_t v22 = os_log_create("com.apple.siri", (const char *)kAFLogContextUtility);
  v23 = (void *)AFSiriLogContextUtility;
  AFSiriLogContextUtility = (uint64_t)v22;

  os_log_t v24 = os_log_create("com.apple.siri", (const char *)kAFLogContextAnalysis);
  v25 = (void *)AFSiriLogContextAnalysis;
  AFSiriLogContextAnalysis = (uint64_t)v24;

  os_log_t v26 = os_log_create("com.apple.siri", (const char *)kAFLogContextPerformance);
  v27 = (void *)AFSiriLogContextPerformance;
  AFSiriLogContextPerformance = (uint64_t)v26;

  os_log_t v28 = os_log_create("com.apple.siri", (const char *)kAFLogContextIDS);
  v29 = (void *)AFSiriLogContextIDS;
  AFSiriLogContextIDS = (uint64_t)v28;

  os_log_t v30 = os_log_create("com.apple.siri", (const char *)kAFLogContextProxy);
  v31 = (void *)AFSiriLogContextProxy;
  AFSiriLogContextProxy = (uint64_t)v30;

  os_log_t v32 = os_log_create("com.apple.siri", (const char *)kAFLogContextDispatch);
  v33 = (void *)AFSiriLogContextDispatch;
  AFSiriLogContextDispatch = (uint64_t)v32;

  os_log_t v34 = os_log_create("com.apple.siri", (const char *)kAFLogContextAnalytics);
  v35 = (void *)AFSiriLogContextAnalytics;
  AFSiriLogContextAnalytics = (uint64_t)v34;

  os_log_t v36 = os_log_create("com.apple.siri", (const char *)kAFLogContextTinyCDB);
  v37 = (void *)AFSiriLogContextTinyCDB;
  AFSiriLogContextTinyCDB = (uint64_t)v36;

  os_log_t v38 = os_log_create("com.apple.siri", (const char *)kAFLogContextMediaSupport);
  v39 = (void *)AFSiriLogContextMediaSupport;
  AFSiriLogContextMediaSupport = (uint64_t)v38;

  os_log_t v40 = os_log_create("com.apple.siri", (const char *)kAFLogContextMockServer);
  v41 = (void *)AFSiriLogContextMockServer;
  AFSiriLogContextMockServer = (uint64_t)v40;

  os_log_t v42 = os_log_create("com.apple.siri", (const char *)kAFLogContextMusicIndexer);
  v43 = (void *)AFSiriLogContextMusicIndexer;
  AFSiriLogContextMusicIndexer = (uint64_t)v42;

  os_log_t v44 = os_log_create("com.apple.siri", (const char *)kAFLogContextDatabase);
  v45 = (void *)AFSiriLogContextDatabase;
  AFSiriLogContextDatabase = (uint64_t)v44;

  os_log_t v46 = os_log_create("com.apple.siri", (const char *)kAFLogContextSync);
  v47 = (void *)AFSiriLogContextSync;
  AFSiriLogContextSync = (uint64_t)v46;

  os_log_t v48 = os_log_create("com.apple.siri", (const char *)kAFLogContextDeviceSync);
  v49 = (void *)AFSiriLogContextDeviceSync;
  AFSiriLogContextDeviceSync = (uint64_t)v48;

  os_log_t v50 = os_log_create("com.apple.siri", (const char *)kAFLogContextInternalAuth);
  v51 = (void *)AFSiriLogContextInternalAuth;
  AFSiriLogContextInternalAuth = (uint64_t)v50;

  os_log_t v52 = os_log_create("com.apple.siri", (const char *)kAFLogContextMyriad);
  v53 = (void *)AFSiriLogContextMyriad;
  AFSiriLogContextMyriad = (uint64_t)v52;

  os_log_t v54 = os_log_create("com.apple.siri", (const char *)kAFLogContextPower);
  v55 = (void *)AFSiriLogContextPower;
  AFSiriLogContextPower = (uint64_t)v54;

  os_log_t v56 = os_log_create("com.apple.siri", (const char *)AFLogContextNetworkingFunctional);
  v57 = (void *)AFNetworkingLogContextFunctional;
  AFNetworkingLogContextFunctional = (uint64_t)v56;

  os_log_t v58 = os_log_create("com.apple.siri", (const char *)AFLogContextNetworkingPerformance);
  v59 = (void *)AFNetworkingLogContextPerformance;
  AFNetworkingLogContextPerformance = (uint64_t)v58;

  os_log_t v60 = os_log_create("com.apple.siri", (const char *)kAFSiriLogContextMUXReverseSync);
  v61 = (void *)AFSiriLogContextMUXReverseSync;
  AFSiriLogContextMUXReverseSync = (uint64_t)v60;
}

uint64_t AFPreferencesLanguageIsSupportedForDictation(uint64_t a1)
{
  id v1 = AFLanguagePrefixForLanguageCode(a1);
  if (v1)
  {
    if (_AFPreferencesDictationLanguagePrefixes_onceToken != -1) {
      dispatch_once(&_AFPreferencesDictationLanguagePrefixes_onceToken, &__block_literal_global_1983);
    }
    uint64_t v2 = [(id)_AFPreferencesDictationLanguagePrefixes_sLanguagePrefixes containsObject:v1];
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

id AFLanguagePrefixForLanguageCode(uint64_t a1)
{
  if (a1)
  {
    id v1 = [MEMORY[0x1E4F1CA20] localeWithLocaleIdentifier:a1];
    uint64_t v2 = [v1 languageCode];
  }
  else
  {
    uint64_t v2 = 0;
  }
  return v2;
}

AFPreferencesNotificationCenter *_AFPreferencesNotificationCenterGetSharedInstance(int a1)
{
  if (_AFPreferencesNotificationCenterSharedLock_s_once != -1) {
    dispatch_once(&_AFPreferencesNotificationCenterSharedLock_s_once, &__block_literal_global_8244);
  }
  id v2 = (id)_AFPreferencesNotificationCenterSharedLock_sharedLock;
  [v2 lock];
  WeakRetained = (AFPreferencesNotificationCenter *)objc_loadWeakRetained(&_AFPreferencesNotificationCenterGetSharedInstance_weakSharedInstance);
  if (!WeakRetained && a1)
  {
    WeakRetained = objc_alloc_init(AFPreferencesNotificationCenter);
    objc_storeWeak(&_AFPreferencesNotificationCenterGetSharedInstance_weakSharedInstance, WeakRetained);
  }
  [v2 unlock];

  return WeakRetained;
}

void getAVSystemController_RouteDescriptionKey_PreferredExternalRouteDetails_InEarDetectEnabled()
{
  uint64_t v6 = 0;
  __int16 v7 = &v6;
  uint64_t v8 = 0x2020000000;
  os_log_t v0 = (void **)getAVSystemController_RouteDescriptionKey_PreferredExternalRouteDetails_InEarDetectEnabledSymbolLoc_ptr;
  uint64_t v9 = getAVSystemController_RouteDescriptionKey_PreferredExternalRouteDetails_InEarDetectEnabledSymbolLoc_ptr;
  if (!getAVSystemController_RouteDescriptionKey_PreferredExternalRouteDetails_InEarDetectEnabledSymbolLoc_ptr)
  {
    id v1 = MediaExperienceLibrary_27262();
    v7[3] = (uint64_t)dlsym(v1, "AVSystemController_RouteDescriptionKey_PreferredExternalRouteDetails_InEarDetectEnabled");
    getAVSystemController_RouteDescriptionKey_PreferredExternalRouteDetails_InEarDetectEnabledSymbolLoc_ptr = v7[3];
    os_log_t v0 = (void **)v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (v0)
  {
    id v2 = *v0;
    id v3 = v2;
  }
  else
  {
    os_log_t v4 = [MEMORY[0x1E4F28B00] currentHandler];
    int v5 = [NSString stringWithUTF8String:"NSString *getAVSystemController_RouteDescriptionKey_PreferredExternalRouteDetails_InEarDetectEnabled(void)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"AFSiriAudioRoute.m", 28, @"%s", dlerror());

    __break(1u);
  }
}

void sub_19CF23098(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t AFBTProductIDSupportsIED(void *a1)
{
  id v1 = a1;
  if ([v1 length]) {
    uint64_t v2 = [&unk_1EEE99760 containsObject:v1];
  }
  else {
    uint64_t v2 = 0;
  }

  return v2;
}

uint64_t AFBTProductIDSupportsFauxIED(void *a1)
{
  id v1 = a1;
  if ([v1 length]) {
    uint64_t v2 = [&unk_1EEE99778 containsObject:v1];
  }
  else {
    uint64_t v2 = 0;
  }

  return v2;
}

uint64_t AFBTProductIDSupportsAnnounce(void *a1)
{
  id v1 = a1;
  if ([v1 length]) {
    uint64_t v2 = [&unk_1EEE99748 containsObject:v1];
  }
  else {
    uint64_t v2 = 0;
  }

  return v2;
}

id _AFPreferencesAlternativeLocaleLanguages()
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  os_log_t v0 = objc_msgSend(MEMORY[0x1E4F1CA60], "dictionaryWithObjectsAndKeys:", @"zh-Hans-HK", @"en-IN", @"hi-IN", @"yue-CN", @"zh-Hans-MO", @"es-ES", @"ca-ES", @"en-SG", @"en-MY", 0);
  id v1 = AFPreferencesSupportedLanguages();
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  uint64_t v2 = [v1 countByEnumeratingWithState:&v11 objects:v19 count:16];
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v4 = *(void *)v12;
    do
    {
      for (uint64_t i = 0; i != v3; ++i)
      {
        if (*(void *)v12 != v4) {
          objc_enumerationMutation(v1);
        }
        uint64_t v6 = *(void *)(*((void *)&v11 + 1) + 8 * i);
        __int16 v7 = [v0 objectForKey:v6];

        if (v7)
        {
          [v0 removeObjectForKey:v6];
          uint64_t v8 = AFSiriLogContextConnection;
          if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            os_log_t v16 = "_AFPreferencesAlternativeLocaleLanguages";
            __int16 v17 = 2112;
            uint64_t v18 = v6;
            _os_log_error_impl(&dword_19CF1D000, v8, OS_LOG_TYPE_ERROR, "%s Removing \"%@\" from alternative language map. Please file a radar on Siri Frameworks to remove it permanently.", buf, 0x16u);
          }
        }
      }
      uint64_t v3 = [v1 countByEnumeratingWithState:&v11 objects:v19 count:16];
    }
    while (v3);
  }
  uint64_t v9 = (void *)[v0 copy];

  return v9;
}

void __AFPreferencesSupportedDictationLanguages_block_invoke()
{
  AFPreferencesSupportedLanguages();
  id v2 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v0 = [v2 arrayByAddingObjectsFromArray:&unk_1EEE99610];
  id v1 = (void *)AFPreferencesSupportedDictationLanguages_sSupportedDictationLanguages;
  AFPreferencesSupportedDictationLanguages_sSupportedDictationLanguages = v0;
}

id AFPreferencesSupportedLanguages()
{
  if (AFPreferencesSupportedLanguages_onceToken != -1) {
    dispatch_once(&AFPreferencesSupportedLanguages_onceToken, &__block_literal_global_9735);
  }
  uint64_t v0 = (void *)AFPreferencesSupportedLanguages_stAllLanguageCodes;
  return v0;
}

id _AFAddCountryCodeToLanguageIdentifier(void *a1, void *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  if (![v3 length])
  {
    id v10 = v4;
    goto LABEL_10;
  }
  int v5 = [MEMORY[0x1E4F1CA20] componentsFromLocaleIdentifier:v4];
  uint64_t v6 = v5;
  if (!v5)
  {
    long long v11 = AFSiriLogContextUtility;
    if (os_log_type_enabled((os_log_t)AFSiriLogContextUtility, OS_LOG_TYPE_INFO))
    {
      int v13 = 136315138;
      long long v14 = "_AFAddCountryCodeToLanguageIdentifier";
      _os_log_impl(&dword_19CF1D000, v11, OS_LOG_TYPE_INFO, "%s Could not parse languageID, passing it through!", (uint8_t *)&v13, 0xCu);
    }
    goto LABEL_8;
  }
  uint64_t v7 = *MEMORY[0x1E4F1C400];
  uint64_t v8 = [v5 objectForKey:*MEMORY[0x1E4F1C400]];

  if (v8)
  {
LABEL_8:
    id v10 = v4;
    goto LABEL_9;
  }
  uint64_t v9 = (void *)[v6 mutableCopy];
  [v9 setObject:v3 forKey:v7];
  id v10 = [MEMORY[0x1E4F1CA20] localeIdentifierFromComponents:v9];

LABEL_9:
LABEL_10:

  return v10;
}

void __AFPreferencesSupportedLanguages_block_invoke()
{
  uint64_t v0 = _AFPreferencesValueForKeyWithContext(@"Additional Languages", @"com.apple.assistant.backedup", 0);
  if (_IsArrayOfStrings(v0)) {
    id v1 = v0;
  }
  else {
    id v1 = 0;
  }
  id v2 = v1;

  id v3 = AFInternalConfigValueForKey(@"Additional Languages");
  if (_IsArrayOfStrings(v3)) {
    id v4 = v3;
  }
  else {
    id v4 = 0;
  }
  id v5 = v4;

  if ([v2 count] || objc_msgSend(v5, "count"))
  {
    uint64_t v6 = objc_opt_new();
    uint64_t v7 = v6;
    if (v5) {
      [v6 addObjectsFromArray:v5];
    }
    if (v2) {
      [v7 addObjectsFromArray:v2];
    }
    id v13 = [v7 allObjects];
  }
  else
  {
    id v13 = 0;
  }

  if ([v13 count])
  {
    uint64_t v8 = objc_opt_new();
    uint64_t v9 = _AFPreferencesBuiltInLanguages();
    if (v9) {
      [v8 addObjectsFromArray:v9];
    }
    [v8 addObjectsFromArray:v13];
    uint64_t v10 = [v8 allObjects];
    long long v11 = (void *)AFPreferencesSupportedLanguages_stAllLanguageCodes;
    AFPreferencesSupportedLanguages_stAllLanguageCodes = v10;
  }
  else
  {
    uint64_t v12 = _AFPreferencesBuiltInLanguages();
    uint64_t v8 = (void *)AFPreferencesSupportedLanguages_stAllLanguageCodes;
    AFPreferencesSupportedLanguages_stAllLanguageCodes = v12;
  }
}

uint64_t _IsArrayOfStrings(void *a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    objc_opt_class();
    long long v9 = 0u;
    long long v10 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    id v2 = v1;
    uint64_t v3 = [v2 countByEnumeratingWithState:&v9 objects:v13 count:16];
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = *(void *)v10;
      while (2)
      {
        uint64_t v6 = 0;
        do
        {
          if (*(void *)v10 != v5) {
            objc_enumerationMutation(v2);
          }
          if ((objc_opt_isKindOfClass() & 1) == 0)
          {
            uint64_t v7 = 0;
            goto LABEL_13;
          }
          ++v6;
        }
        while (v4 != v6);
        uint64_t v4 = [v2 countByEnumeratingWithState:&v9 objects:v13 count:16];
        if (v4) {
          continue;
        }
        break;
      }
    }
    uint64_t v7 = 1;
LABEL_13:
  }
  else
  {
    uint64_t v7 = 0;
  }

  return v7;
}

id _AFPreferencesBuiltInLanguages()
{
  if (_AFPreferencesBuiltInLanguages_onceToken != -1) {
    dispatch_once(&_AFPreferencesBuiltInLanguages_onceToken, &__block_literal_global_1900);
  }
  uint64_t v0 = (void *)_AFPreferencesBuiltInLanguages_sStaticLanguages;
  return v0;
}

id AFInternalConfigValueForKey(void *a1)
{
  id v1 = (void *)MEMORY[0x1E4F1C9E8];
  id v2 = a1;
  uint64_t v3 = CPSystemRootDirectory();
  uint64_t v4 = [v3 stringByAppendingPathComponent:@"AppleInternal/Library/Assistant/InternalConfig.plist"];
  uint64_t v5 = [v1 dictionaryWithContentsOfFile:v4];
  uint64_t v6 = [v5 objectForKey:v2];

  return v6;
}

uint64_t AFIsNano()
{
  return 0;
}

uint64_t AFOfflineDictationStatusStringIsInstalled(void *a1, const char *a2)
{
  return [a1 hasPrefix:@"Version:"];
}

BOOL AFConnectionHasEntitlement(void *a1, uint64_t a2)
{
  id v2 = [a1 valueForEntitlement:a2];
  BOOL v3 = v2 != 0;

  return v3;
}

uint64_t __AFIsHorseman_block_invoke()
{
  uint64_t result = MGGetBoolAnswer();
  AFIsHorseman_isHorseman = result;
  return result;
}

uint64_t __AFDictationCapable_block_invoke()
{
  uint64_t result = MGGetBoolAnswer();
  AFDictationCapable_isCapable = result;
  return result;
}

BOOL AFAssistantRestricted()
{
  return AFAssistantRestrictedWithReason();
}

BOOL AFAssistantRestrictedWithReason()
{
  uint64_t v0 = [MEMORY[0x1E4F74230] sharedConnection];
  BOOL v1 = [v0 effectiveBoolValueForSetting:*MEMORY[0x1E4F73F18]] == 2;

  return v1;
}

uint64_t AFDictationRestricted()
{
  uint64_t v0 = [MEMORY[0x1E4F74230] sharedConnection];
  uint64_t v1 = [v0 isDictationAllowed] ^ 1;

  return v1;
}

AFSiriAudioRoute *AFSiriHeadphonesMonitorGetCurrentlySelectedAudioRoute(uint64_t a1)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = _AFPreferencesAnnounceNotificationsOnHearingAidsEnabled();
  uint64_t v3 = _AFPreferencesAnnounceNotificationsOnBuiltInSpeakerEnabled();
  uint64_t v4 = [getAVSystemControllerClass() sharedAVSystemController];
  uint64_t v25 = 0;
  os_log_t v26 = &v25;
  uint64_t v27 = 0x2020000000;
  uint64_t v5 = (void *)getAVSystemController_PickableRoutesAttributeSymbolLoc_ptr;
  uint64_t v28 = getAVSystemController_PickableRoutesAttributeSymbolLoc_ptr;
  if (!getAVSystemController_PickableRoutesAttributeSymbolLoc_ptr)
  {
    uint64_t v20 = MEMORY[0x1E4F143A8];
    uint64_t v21 = 3221225472;
    os_log_t v22 = __getAVSystemController_PickableRoutesAttributeSymbolLoc_block_invoke;
    v23 = &unk_1E592C0B0;
    os_log_t v24 = &v25;
    uint64_t v6 = MediaExperienceLibrary();
    v26[3] = (uint64_t)dlsym(v6, "AVSystemController_PickableRoutesAttribute");
    getAVSystemController_PickableRoutesAttributeSymbolLoc_ptr = *(void *)(v24[1] + 24);
    uint64_t v5 = (void *)v26[3];
  }
  _Block_object_dispose(&v25, 8);
  if (!v5)
  {
    uint64_t v14 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v15 = [NSString stringWithUTF8String:"NSString *getAVSystemController_PickableRoutesAttribute(void)"];
    objc_msgSend(v14, "handleFailureInFunction:file:lineNumber:description:", v15, @"AFSiriHeadphonesMonitor.m", 47, @"%s", dlerror());

    __break(1u);
  }
  uint64_t v7 = [v4 attributeForKey:*v5];

  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  id v8 = v7;
  uint64_t v9 = [v8 countByEnumeratingWithState:&v16 objects:v29 count:16];
  if (v9)
  {
    uint64_t v10 = *(void *)v17;
LABEL_6:
    uint64_t v11 = 0;
    while (1)
    {
      if (*(void *)v17 != v10) {
        objc_enumerationMutation(v8);
      }
      long long v12 = [[AFSiriAudioRoute alloc] initWithRouteDescription:*(void *)(*((void *)&v16 + 1) + 8 * v11) hearingAidsAnnounceEnabled:v2 builtInSpeakerAnnounceEnabled:v3 ringerSwitchState:a1];
      if ([(AFSiriAudioRoute *)v12 isRouteCurrentlyPicked]) {
        break;
      }

      if (v9 == ++v11)
      {
        uint64_t v9 = [v8 countByEnumeratingWithState:&v16 objects:v29 count:16];
        if (v9) {
          goto LABEL_6;
        }
        goto LABEL_12;
      }
    }
  }
  else
  {
LABEL_12:
    long long v12 = 0;
  }

  return v12;
}

void sub_19CF2490C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _AFPreferencesAnnounceNotificationsOnHearingAidsEnabled()
{
  uint64_t v0 = _AFPreferencesValueForKeyWithContext(@"Announce Notifications On Hearing Aids", @"com.apple.assistant.backedup", 0);
  uint64_t v1 = v0;
  if (v0) {
    uint64_t v2 = [v0 BOOLValue];
  }
  else {
    uint64_t v2 = 0;
  }

  return v2;
}

uint64_t _AFPreferencesAnnounceNotificationsOnBuiltInSpeakerEnabled()
{
  uint64_t v0 = _AFPreferencesValueForKeyWithContext(@"Announce Notifications On Built In Speaker", @"com.apple.assistant.backedup", 0);
  uint64_t v1 = v0;
  if (v0) {
    uint64_t v2 = [v0 BOOLValue];
  }
  else {
    uint64_t v2 = 0;
  }

  return v2;
}

void __AFAssetsAvailabilityMatchesRequiredAssets_block_invoke(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  uint64_t v5 = [*(id *)(a1 + 32) objectForKey:a2];
  char v6 = [v5 BOOLValue];

  if ((v6 & 1) == 0)
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
    *a3 = 1;
  }
}

BOOL AFUODStatusSupportedFull(void *a1, void *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  BOOL v4 = 0;
  if (v3 && a2)
  {
    uint64_t v5 = AFRequiredAssetsForFullUOD(a2);
    if ([v5 containsObject:@"ATTENTION"])
    {
      char v6 = (void *)AFSiriLogContextDaemon;
      if (os_log_type_enabled((os_log_t)AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
      {
        uint64_t v7 = v6;
        id v8 = [v3 objectForKey:@"ATTENTION"];
        int v9 = [v8 BOOLValue];

        int v11 = 136315394;
        long long v12 = "AFUODStatusSupportedFull";
        __int16 v13 = 1024;
        int v14 = v9;
        _os_log_impl(&dword_19CF1D000, v7, OS_LOG_TYPE_INFO, "%s Checking for availability of Attention assets returned = %u", (uint8_t *)&v11, 0x12u);
      }
    }
    BOOL v4 = AFAssetsAvailabilityMatchesRequiredAssets(v3, v5);
  }
  return v4;
}

id AFRequiredAssetsForFullUOD(void *a1)
{
  uint64_t v1 = (void *)MEMORY[0x1E4F1CA80];
  id v2 = a1;
  id v3 = objc_msgSend(v1, "setWithObjects:", @"NL", @"SPEECH", @"MORPHUN", 0);
  int v4 = AFIsTop13Locale(v2);

  if (v4) {
    [v3 addObject:@"ATTENTION"];
  }
  uint64_t v5 = (void *)[v3 copy];

  return v5;
}

uint64_t AFIsTop13Locale(void *a1)
{
  id v1 = a1;
  id v2 = _AFTop13Locales();
  uint64_t v3 = [v2 containsObject:v1];

  return v3;
}

BOOL AFAssetsAvailabilityMatchesRequiredAssets(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  uint64_t v11 = 0;
  long long v12 = &v11;
  uint64_t v13 = 0x2020000000;
  char v14 = 0;
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  v8[2] = __AFAssetsAvailabilityMatchesRequiredAssets_block_invoke;
  v8[3] = &unk_1E592BF48;
  id v5 = v3;
  id v9 = v5;
  uint64_t v10 = &v11;
  [v4 enumerateObjectsUsingBlock:v8];
  BOOL v6 = *((unsigned char *)v12 + 24) == 0;

  _Block_object_dispose(&v11, 8);
  return v6;
}

void sub_19CF25254(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id AFPreferencesSupportedDictationLanguages()
{
  if (AFPreferencesSupportedDictationLanguages_onceToken != -1) {
    dispatch_once(&AFPreferencesSupportedDictationLanguages_onceToken, &__block_literal_global_829);
  }
  uint64_t v0 = (void *)AFPreferencesSupportedDictationLanguages_sSupportedDictationLanguages;
  return v0;
}

uint64_t AFIsVision()
{
  return 0;
}

uint64_t AFIsMac()
{
  return 0;
}

id _AFPreferencesLanguageCode()
{
  return _AFPreferencesValueForKeyWithContext(@"Session Language", @"com.apple.assistant.backedup", 0);
}

void __AFDictationHasHighQualityModels_block_invoke(uint64_t a1, uint64_t a2, void *a3, unsigned char *a4)
{
  BOOL v6 = [a3 objectForKey:@"High Quality"];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = [v6 BOOLValue];

  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    *a4 = 1;
  }
}

void AFLogInitIfNeeded()
{
  if (AFLogInitIfNeeded_once != -1) {
    dispatch_once(&AFLogInitIfNeeded_once, &__block_literal_global_2935);
  }
}

id AFContextProviderNameForBundleId(void *a1)
{
  id v1 = (objc_class *)NSString;
  id v2 = a1;
  id v3 = (void *)[[v1 alloc] initWithFormat:@"com.apple.assistant.contextprovider.%@", v2];

  return v3;
}

BOOL AFIsCustomerInstall()
{
  if (AFIsInternalInstall_onceToken != -1) {
    dispatch_once(&AFIsInternalInstall_onceToken, &__block_literal_global_158);
  }
  return AFIsInternalInstall_isInternal == 0;
}

uint64_t __AFDeviceHighestLanguageModelCapabilityIdentifier_block_invoke()
{
  AFDeviceHighestLanguageModelCapabilityIdentifier_deviceHighestCapabilityIdentifier = 0;
  uint64_t result = MGGetBoolAnswer();
  if (result) {
    AFDeviceHighestLanguageModelCapabilityIdentifier_deviceHighestCapabilityIdentifier = 1;
  }
  return result;
}

id AFPreferencesSupportedMultiUserLanguages()
{
  v2[39] = *MEMORY[0x1E4F143B8];
  v2[0] = @"en-US";
  v2[1] = @"en-GB";
  v2[2] = @"en-AU";
  v2[3] = @"en-CA";
  v2[4] = @"en-IE";
  v2[5] = @"en-NZ";
  v2[6] = @"fr-FR";
  v2[7] = @"fr-CA";
  v2[8] = @"es-MX";
  v2[9] = @"es-US";
  v2[10] = @"es-ES";
  v2[11] = @"de-DE";
  v2[12] = @"de-AT";
  v2[13] = @"fr-CH";
  v2[14] = @"de-CH";
  v2[15] = @"en-IN";
  v2[16] = @"it-CH";
  v2[17] = @"it-IT";
  v2[18] = @"ru-RU";
  v2[19] = @"fr-BE";
  v2[20] = @"nl-BE";
  v2[21] = @"nl-NL";
  v2[22] = @"nb-NO";
  v2[23] = @"sv-SE";
  v2[24] = @"zh-CN";
  v2[25] = @"yue-CN";
  v2[26] = @"zh-HK";
  v2[27] = @"zh-TW";
  v2[28] = @"ja-JP";
  v2[29] = @"en-ZA";
  v2[30] = @"es-CL";
  v2[31] = @"fi-FI";
  v2[32] = @"en-SG";
  v2[33] = @"da-DK";
  v2[34] = @"he-IL";
  v2[35] = @"th-TH";
  v2[36] = @"ar-SA";
  v2[37] = @"tr-TR";
  v2[38] = @"ms-MY";
  uint64_t v0 = [MEMORY[0x1E4F1C978] arrayWithObjects:v2 count:39];
  return v0;
}

id _AFPreferencesBuiltIniOSLanguages()
{
  v2[41] = *MEMORY[0x1E4F143B8];
  v2[0] = @"en-US";
  v2[1] = @"de-DE";
  v2[2] = @"de-CH";
  v2[3] = @"en-AU";
  v2[4] = @"en-GB";
  v2[5] = @"en-CA";
  v2[6] = @"en-SG";
  v2[7] = @"es-ES";
  v2[8] = @"es-MX";
  v2[9] = @"es-US";
  v2[10] = @"fr-FR";
  v2[11] = @"fr-CA";
  v2[12] = @"fr-CH";
  v2[13] = @"it-IT";
  v2[14] = @"it-CH";
  v2[15] = @"ja-JP";
  v2[16] = @"ko-KR";
  v2[17] = @"zh-CN";
  v2[18] = @"zh-TW";
  v2[19] = @"zh-HK";
  v2[20] = @"pt-BR";
  v2[21] = @"da-DK";
  v2[22] = @"nl-NL";
  v2[23] = @"en-NZ";
  v2[24] = @"en-IN";
  v2[25] = @"ru-RU";
  v2[26] = @"sv-SE";
  v2[27] = @"th-TH";
  v2[28] = @"tr-TR";
  v2[29] = @"nb-NO";
  v2[30] = @"de-AT";
  v2[31] = @"fr-BE";
  v2[32] = @"nl-BE";
  v2[33] = @"ar-SA";
  v2[34] = @"fi-FI";
  v2[35] = @"he-IL";
  v2[36] = @"ms-MY";
  v2[37] = @"es-CL";
  v2[38] = @"en-ZA";
  v2[39] = @"yue-CN";
  void v2[40] = @"en-IE";
  uint64_t v0 = [MEMORY[0x1E4F1C978] arrayWithObjects:v2 count:41];
  return v0;
}

uint64_t _AFPreferencesSiriXNLAssetOverride()
{
  uint64_t result = AFDeviceSupportsSiriUOD();
  if (result)
  {
    return _AFPreferencesBoolValueForKeyWithContext(@"Override Missing SiriX NL Assets", 0, @"com.apple.assistant", 0);
  }
  return result;
}

uint64_t AFDeviceSupportsSiriUOD()
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if (AFDeviceHighestLanguageModelCapabilityIdentifier_onceToken != -1) {
    dispatch_once(&AFDeviceHighestLanguageModelCapabilityIdentifier_onceToken, &__block_literal_global_705);
  }
  if (AFDeviceHighestLanguageModelCapabilityIdentifier_deviceHighestCapabilityIdentifier)
  {
    uint64_t v0 = 1;
  }
  else
  {
    if (AFIsInternalInstall_onceToken != -1) {
      dispatch_once(&AFIsInternalInstall_onceToken, &__block_literal_global_158);
    }
    if (AFIsInternalInstall_isInternal
      && +[AFFeatureFlags isSiriUODForceEnabledForDevice])
    {
      id v1 = AFSiriLogContextUtility;
      uint64_t v0 = 1;
      if (os_log_type_enabled((os_log_t)AFSiriLogContextUtility, OS_LOG_TYPE_INFO))
      {
        int v4 = 136315138;
        id v5 = "AFDeviceSupportsSiriUOD";
        _os_log_impl(&dword_19CF1D000, v1, OS_LOG_TYPE_INFO, "%s WARNING: UOD is forced on for this device", (uint8_t *)&v4, 0xCu);
      }
    }
    else
    {
      uint64_t v0 = 0;
    }
  }
  id v2 = AFSiriLogContextUtility;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextUtility, OS_LOG_TYPE_DEBUG))
  {
    int v4 = 136315394;
    id v5 = "AFDeviceSupportsSiriUOD";
    __int16 v6 = 1024;
    int v7 = v0;
    _os_log_debug_impl(&dword_19CF1D000, v2, OS_LOG_TYPE_DEBUG, "%s AFDeviceSupportsSiriUOD=%d", (uint8_t *)&v4, 0x12u);
  }
  return v0;
}

BOOL AFHasUnlockedSinceBoot()
{
  return softLinkMKBDeviceUnlockedSinceBoot() == 1;
}

uint64_t _AFBackedUpPreferencesBoolForKeyWithDefault(const __CFString *a1, uint64_t a2)
{
  id v3 = _AFBackedUpPreferencesBoolValueForKey(a1);
  int v4 = v3;
  if (v3) {
    a2 = [v3 BOOLValue];
  }

  return a2;
}

id _AFBackedUpPreferencesBoolValueForKey(const __CFString *a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  id v2 = _AFPreferencesValueForKeyWithContext(a1, @"com.apple.assistant.backedup", 0);
  if (v2 && (objc_opt_respondsToSelector() & 1) == 0)
  {
    id v3 = AFSiriLogContextConnection;
    if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_ERROR))
    {
      int v5 = 136315650;
      __int16 v6 = "_AFBackedUpPreferencesBoolValueForKey";
      __int16 v7 = 2112;
      CFStringRef v8 = a1;
      __int16 v9 = 2112;
      uint64_t v10 = v2;
      _os_log_error_impl(&dword_19CF1D000, v3, OS_LOG_TYPE_ERROR, "%s Expected a value responding to -BOOLValue, but found something else! Acting as-if no value was set. {key: %@, value: %@}", (uint8_t *)&v5, 0x20u);
    }

    id v2 = 0;
  }
  return v2;
}

BOOL AFProcessIsRunningAsInstance()
{
  uint64_t v0 = AFProcessGetInstanceUUID();
  BOOL v1 = v0 != 0;

  return v1;
}

id AFProcessGetInstanceUUID()
{
  if (AFProcessGetInstanceUUID_onceToken != -1) {
    dispatch_once(&AFProcessGetInstanceUUID_onceToken, &__block_literal_global_732);
  }
  uint64_t v0 = (void *)AFProcessGetInstanceUUID_instanceUUID;
  return v0;
}

uint64_t AFOfflineDictationCapable()
{
  if (AFOfflineDictationCapableWithoutOverride_onceToken != -1) {
    dispatch_once(&AFOfflineDictationCapableWithoutOverride_onceToken, &__block_literal_global_125_45536);
  }
  if (AFOfflineDictationCapableWithoutOverride_isCapable) {
    return 1;
  }
  BOOL v1 = +[AFPreferences sharedPreferences];
  uint64_t v2 = [v1 offlineDictationOverride];

  return v2;
}

uint64_t AFSetAudioSessionActiveOptionsValidate(char a1)
{
  return a1 & 3;
}

id AFSetAudioSessionActiveOptionsGetNames(uint64_t a1)
{
  if (a1)
  {
    char v1 = a1;
    id v2 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
    id v3 = v2;
    if (v1) {
      [v2 addObject:@"waitsUntilRecordingAndAlertsDone"];
    }
    if ((v1 & 2) != 0) {
      [v3 addObject:@"updatesAudioContext"];
    }
    int v4 = (void *)[v3 copy];
  }
  else
  {
    int v4 = (void *)MEMORY[0x1E4F1CBF0];
  }
  return v4;
}

uint64_t AFSetAudioSessionActiveOptionsGetFromNames(void *a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if ([v1 count])
  {
    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v12 = v1;
    id v2 = v1;
    uint64_t v3 = [v2 countByEnumeratingWithState:&v13 objects:v17 count:16];
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = 0;
      uint64_t v6 = *(void *)v14;
      do
      {
        uint64_t v7 = 0;
        do
        {
          if (*(void *)v14 != v6) {
            objc_enumerationMutation(v2);
          }
          id v8 = *(id *)(*((void *)&v13 + 1) + 8 * v7);
          if ([v8 length])
          {
            if (_AFSetAudioSessionActiveOptionsGetFromName_onceToken != -1) {
              dispatch_once(&_AFSetAudioSessionActiveOptionsGetFromName_onceToken, &__block_literal_global);
            }
            __int16 v9 = [(id)_AFSetAudioSessionActiveOptionsGetFromName_map objectForKey:v8];
            uint64_t v10 = [v9 unsignedIntegerValue];
          }
          else
          {
            uint64_t v10 = 0;
          }

          v5 |= v10;
          ++v7;
        }
        while (v4 != v7);
        uint64_t v4 = [v2 countByEnumeratingWithState:&v13 objects:v17 count:16];
      }
      while (v4);
    }
    else
    {
      uint64_t v5 = 0;
    }

    id v1 = v12;
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

id initINSerializedCacheItem()
{
  if (initINSerializedCacheItem_sOnce != -1) {
    dispatch_once(&initINSerializedCacheItem_sOnce, &__block_literal_global_951);
  }
  uint64_t v0 = (void *)classINSerializedCacheItem;
  return v0;
}

Class __initINSerializedCacheItem_block_invoke()
{
  if (!IntentsLibrary_frameworkLibrary)
  {
    IntentsLibrary_frameworkLibrary = (uint64_t)dlopen("/System/Library/Frameworks/Intents.framework/Intents", 2);
    if (!IntentsLibrary_frameworkLibrary) {
      __assert_rtn("IntentsLibrary", "AFConnection.m", 92, "frameworkLibrary");
    }
  }
  Class result = objc_getClass("INSerializedCacheItem");
  classINSerializedCacheItem = (uint64_t)result;
  if (!result) {
    __assert_rtn("initINSerializedCacheItem_block_invoke", "AFConnection.m", 93, "classINSerializedCacheItem");
  }
  getINSerializedCacheItemClass = INSerializedCacheItemFunction;
  return result;
}

id INSerializedCacheItemFunction()
{
  return (id)classINSerializedCacheItem;
}

void _LogUEIRequestCategorization(void *a1, uint64_t a2, uint64_t a3)
{
  if (a1)
  {
    uint64_t v5 = (objc_class *)MEMORY[0x1E4FA1348];
    id v6 = a1;
    id v8 = objc_alloc_init(v5);
    [v8 setRequestStatus:a2];
    [v8 setRequestType:a3];
    uint64_t v7 = +[AFAnalytics sharedAnalytics];
    [v7 logInstrumentation:v8 machAbsoluteTime:mach_absolute_time() turnIdentifier:v6];
  }
}

id _PNRFatalErrorInfo(void *a1)
{
  id v1 = (objc_class *)MEMORY[0x1E4FA12E8];
  id v2 = a1;
  id v3 = objc_alloc_init(v1);
  uint64_t v4 = objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithInteger:", objc_msgSend(v2, "code"));
  uint64_t v5 = [v4 stringValue];
  [v3 setErrorCode:v5];

  id v6 = [v2 domain];

  [v3 setErrorDomain:v6];
  return v3;
}

BOOL _AFConnectionIsErrorDeallocation(void *a1)
{
  id v1 = a1;
  id v2 = [v1 domain];
  if ([v2 isEqualToString:@"kAFAssistantErrorDomain"]) {
    BOOL v3 = [v1 code] == 24;
  }
  else {
    BOOL v3 = 0;
  }

  return v3;
}

__CFString *_AFConnectionGetBucketStringFromTimeIntervals(double a1, double a2)
{
  if (a1 <= 0.0)
  {
    if (a2 <= 0.0) {
      return @"no_start_and_stop";
    }
    else {
      return @"no_start";
    }
  }
  else if (a2 <= 0.0)
  {
    return @"no_stop";
  }
  else
  {
    double v2 = a2 - a1;
    if (v2 >= 0.0)
    {
      if (v2 >= 0.1)
      {
        if (v2 >= 0.2)
        {
          if (v2 >= 0.3)
          {
            if (v2 >= 0.4)
            {
              if (v2 >= 0.5)
              {
                if (v2 >= 1.0)
                {
                  if (v2 >= 2.0)
                  {
                    if (v2 >= 4.0)
                    {
                      uint64_t v4 = @"8-15s";
                      uint64_t v5 = @"15-30s";
                      id v6 = @"60s+";
                      if (v2 < 60.0) {
                        id v6 = @"30-60s";
                      }
                      if (v2 >= 30.0) {
                        uint64_t v5 = v6;
                      }
                      if (v2 >= 15.0) {
                        uint64_t v4 = v5;
                      }
                      if (v2 >= 8.0) {
                        return v4;
                      }
                      else {
                        return @"4-8s";
                      }
                    }
                    else
                    {
                      return @"2-4s";
                    }
                  }
                  else
                  {
                    return @"1-2s";
                  }
                }
                else
                {
                  return @"500ms-1s";
                }
              }
              else
              {
                return @"400-500ms";
              }
            }
            else
            {
              return @"300-400ms";
            }
          }
          else
          {
            return @"200-300ms";
          }
        }
        else
        {
          return @"100-200ms";
        }
      }
      else
      {
        return @"0-100ms";
      }
    }
    else
    {
      return @"stop_before_start";
    }
  }
}

void sub_19CF3316C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void _EmitHomePodLaunchContextTime(void *a1, void *a2, void *a3, void *a4)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  id v7 = a1;
  id v8 = a2;
  id v9 = a3;
  id v10 = a4;
  if (AFIsHorseman_onceToken != -1) {
    dispatch_once(&AFIsHorseman_onceToken, &__block_literal_global_220_45602);
  }
  if (AFIsHorseman_isHorseman)
  {
    if (v9)
    {
      if (v10)
      {
        uint64_t v11 = [v10 activationEventMachAbsoluteTime];
        uint64_t v12 = mach_absolute_time();
        long long v13 = AFSiriLogContextConnection;
        if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
        {
          int v23 = 136316162;
          os_log_t v24 = "_EmitHomePodLaunchContextTime";
          __int16 v25 = 2112;
          id v26 = v8;
          __int16 v27 = 2112;
          id v28 = v9;
          __int16 v29 = 2048;
          uint64_t v30 = v11;
          __int16 v31 = 2048;
          uint64_t v32 = v12;
          _os_log_impl(&dword_19CF1D000, v13, OS_LOG_TYPE_INFO, "%s Logging instrumentation for requestUUID = %@ turnId = %@ HomePod launch: (startTime = %llu endTime = %llu)", (uint8_t *)&v23, 0x34u);
        }
        id v14 = objc_alloc_init(MEMORY[0x1E4FA1330]);
        id v15 = objc_alloc_init(MEMORY[0x1E4FA1340]);
        [v15 setExists:1];
        [v14 setStartedOrChanged:v15];
        [v14 setHasStartedOrChanged:1];
        [v7 logInstrumentation:v14 machAbsoluteTime:v11 turnIdentifier:v9];
        id v16 = objc_alloc_init(MEMORY[0x1E4FA1330]);
        id v17 = objc_alloc_init(MEMORY[0x1E4FA1338]);
        [v17 setExists:1];
        [v16 setEnded:v17];
        [v16 setHasEnded:1];
        [v7 logInstrumentation:v16 machAbsoluteTime:v12 turnIdentifier:v9];

        goto LABEL_12;
      }
      uint64_t v22 = AFSiriLogContextConnection;
      if (!os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_ERROR)) {
        goto LABEL_12;
      }
      int v23 = 136315650;
      os_log_t v24 = "_EmitHomePodLaunchContextTime";
      __int16 v25 = 2112;
      id v26 = v8;
      __int16 v27 = 2112;
      id v28 = v9;
      long long v19 = "%s speechRequestOptions is nil. Instrumentation logging is skipped. requestUUID = %@ turnId = %@";
      uint64_t v20 = v22;
      uint32_t v21 = 32;
    }
    else
    {
      uint64_t v18 = AFSiriLogContextConnection;
      if (!os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_ERROR)) {
        goto LABEL_12;
      }
      int v23 = 136315394;
      os_log_t v24 = "_EmitHomePodLaunchContextTime";
      __int16 v25 = 2112;
      id v26 = v8;
      long long v19 = "%s turnId is nil. Instrumentation logging is skipped. requestUUID = %@";
      uint64_t v20 = v18;
      uint32_t v21 = 22;
    }
    _os_log_error_impl(&dword_19CF1D000, v20, OS_LOG_TYPE_ERROR, v19, (uint8_t *)&v23, v21);
  }
LABEL_12:
}

void sub_19CF34304(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19CF34864(_Unwind_Exception *a1)
{
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 88));
  _Unwind_Resume(a1);
}

void sub_19CF3BD74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id _ConvertIdToSchemaUUID(void *a1)
{
  id v1 = (objc_class *)MEMORY[0x1E4F29128];
  id v2 = a1;
  uint64_t v3 = (void *)[[v1 alloc] initWithUUIDString:v2];

  if (v3) {
    uint64_t v4 = (void *)[objc_alloc(MEMORY[0x1E4FA1378]) initWithNSUUID:v3];
  }
  else {
    uint64_t v4 = 0;
  }

  return v4;
}

id _ExtractAceViewId(void *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  id v2 = [v1 allKeys];
  uint64_t v3 = [v2 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v13;
    while (2)
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        if (*(void *)v13 != v5) {
          objc_enumerationMutation(v2);
        }
        id v7 = *(void **)(*((void *)&v12 + 1) + 8 * i);
        id v8 = [v1 objectForKey:v7];
        if ([v7 isEqualToString:@"aceId"])
        {
          uint64_t v9 = [NSString stringWithFormat:@"%@", v8];
LABEL_13:
          id v10 = (void *)v9;

          goto LABEL_14;
        }
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          uint64_t v9 = _ExtractAceViewId(v8);
          if (v9) {
            goto LABEL_13;
          }
        }
      }
      uint64_t v4 = [v2 countByEnumeratingWithState:&v12 objects:v16 count:16];
      if (v4) {
        continue;
      }
      break;
    }
  }
  id v10 = 0;
LABEL_14:

  return v10;
}

BOOL AFLocationAccessStateGetIsValid(unint64_t a1)
{
  return a1 < 4;
}

BOOL AFLocationAccessStateGetIsValidAndSpecified(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 3;
}

__CFString *AFLocationAccessStateGetName(unint64_t a1)
{
  if (a1 > 3) {
    return @"(unknown)";
  }
  else {
    return off_1E5924A50[a1];
  }
}

uint64_t AFLocationAccessStateGetFromName(void *a1)
{
  id v1 = a1;
  if ([v1 length])
  {
    if (AFLocationAccessStateGetFromName_onceToken != -1) {
      dispatch_once(&AFLocationAccessStateGetFromName_onceToken, &__block_literal_global_109);
    }
    id v2 = [(id)AFLocationAccessStateGetFromName_map objectForKey:v1];
    uint64_t v3 = [v2 integerValue];
  }
  else
  {
    uint64_t v3 = 0;
  }

  return v3;
}

void __AFLocationAccessStateGetFromName_block_invoke()
{
  uint64_t v0 = (void *)AFLocationAccessStateGetFromName_map;
  AFLocationAccessStateGetFromName_map = (uint64_t)&unk_1EEE986D0;
}

void sub_19CF3FC14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id *location, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,id a30)
{
}

id _AFInterstitialGetLocalizationKey(void *a1)
{
  id v1 = (objc_class *)NSString;
  id v2 = a1;
  uint64_t v3 = (void *)[[v1 alloc] initWithFormat:@"%@_%@_%@", @"ASSISTANT_SERVICES_INTERSTITIAL", @"DISPLAY", v2];

  return v3;
}

id AFApplicationClientIdentifierForApp(void *a1)
{
  id v1 = a1;
  return v1;
}

uint64_t AFApplicationClientIdentifierForWatchApp(uint64_t a1)
{
  return [@"nano://" stringByAppendingString:a1];
}

id AFBundleIDFromApplicationClientIdentifier(void *a1)
{
  id v1 = a1;
  if ([v1 hasPrefix:@"nano://"])
  {
    id v2 = [v1 substringFromIndex:objc_msgSend(@"nano://", "length")];
  }
  else
  {
    id v2 = v1;
  }
  uint64_t v3 = v2;

  return v3;
}

void AFMessagesGetPhoneNumberEmailAddressFromString(void *a1, void *a2, void *a3)
{
  id v5 = a3;
  if (v5)
  {
    id v9 = v5;
    uint64_t v6 = [v5 rangeOfString:@"@"];
    id v7 = v9;
    if (v6 == 0x7FFFFFFFFFFFFFFFLL) {
      id v8 = a1;
    }
    else {
      id v8 = a2;
    }
    *id v8 = v7;
    id v5 = v9;
  }
}

id AFMessagesGetDomainObjectsFromContext(void *a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  id v2 = AFSiriLogContextUtility;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextUtility, OS_LOG_TYPE_INFO))
  {
    int v7 = 136315395;
    id v8 = "AFMessagesGetDomainObjectsFromContext";
    __int16 v9 = 2113;
    id v10 = v1;
    _os_log_impl(&dword_19CF1D000, v2, OS_LOG_TYPE_INFO, "%s %{private}@", (uint8_t *)&v7, 0x16u);
  }
  uint64_t v3 = (void *)MEMORY[0x1E4F96508];
  uint64_t v4 = AFMessagesGetAceDomainObjectsFromContext(v1);
  id v5 = [v3 dictionaryArrayWithAceObjectArray:v4];

  return v5;
}

id AFMessagesGetAceDomainObjectsFromContext(void *a1)
{
  v26[1] = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  id v2 = [v1 objectForKey:@"AssistantDirectActionEventMessagesConversationGUIDKey"];
  if (v2)
  {
    uint64_t v3 = AFSiriLogContextUtility;
    if (os_log_type_enabled((os_log_t)AFSiriLogContextUtility, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315395;
      *(void *)&uint8_t buf[4] = "AFMessagesGetAceDomainObjectsFromContext";
      __int16 v24 = 2113;
      __int16 v25 = v2;
      _os_log_impl(&dword_19CF1D000, v3, OS_LOG_TYPE_INFO, "%s Using conversation guid: %{private}@", buf, 0x16u);
    }
    id v4 = objc_alloc_init(MEMORY[0x1E4F96A60]);
    [v4 setChatIdentifier:v2];
    if (v4) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
  uint64_t v6 = [v1 objectForKey:@"AssistantDirectActionEventMessagesFullNameKey"];
  uint64_t v7 = [v1 objectForKey:@"AssistantDirectActionEventMessagesAddressKey"];
  if (!(v6 | v7))
  {
    id v4 = 0;
    goto LABEL_14;
  }
  id v4 = objc_alloc_init(MEMORY[0x1E4F96A60]);
  [v4 setOutgoing:MEMORY[0x1E4F1CC38]];
  id v8 = objc_alloc_init(MEMORY[0x1E4F968D0]);
  [v8 setDisplayText:v6];
  [v8 setData:v7];
  __int16 v9 = (objc_class *)MEMORY[0x1E4F968C8];
  id v10 = (id)v6;
  id v11 = (id)v7;
  id v12 = objc_alloc_init(v9);
  [v12 setFullName:v10];

  *(void *)buf = 0;
  id v20 = 0;
  AFMessagesGetPhoneNumberEmailAddressFromString(buf, &v20, v11);

  id v13 = *(id *)buf;
  id v14 = v20;
  if (v14)
  {
    id v19 = v13;
    id v15 = objc_alloc_init(MEMORY[0x1E4F96630]);
    [v15 setEmailAddress:v14];
    v26[0] = v15;
    id v16 = [MEMORY[0x1E4F1C978] arrayWithObjects:v26 count:1];
    [v12 setEmails:v16];
LABEL_12:

    id v13 = v19;
    goto LABEL_13;
  }
  if (v13)
  {
    id v15 = objc_alloc_init(MEMORY[0x1E4F968D8]);
    id v19 = v13;
    [v15 setNumber:v13];
    v26[0] = v15;
    id v16 = [MEMORY[0x1E4F1C978] arrayWithObjects:v26 count:1];
    [v12 setPhones:v16];
    goto LABEL_12;
  }
LABEL_13:

  [v8 setObject:v12];
  id v22 = v8;
  uint64_t v17 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v22 count:1];
  [v4 setMsgRecipients:v17];

LABEL_14:
  if (v4)
  {
LABEL_5:
    id v21 = v4;
    id v5 = objc_msgSend(MEMORY[0x1E4F1C978], "arrayWithObjects:count:", &v21, 1, v19);
    goto LABEL_16;
  }
LABEL_15:
  id v5 = 0;
LABEL_16:

  return v5;
}

AFAudioSessionAssertionRemoteAcquisitionService *AFAudioSessionAssertionGetCurrentAcquisitionService()
{
  os_unfair_lock_lock((os_unfair_lock_t)&s_acquisitionServiceLock);
  if (s_currentAcquisitionService)
  {
    uint64_t v0 = (AFAudioSessionAssertionRemoteAcquisitionService *)(id)s_currentAcquisitionService;
  }
  else
  {
    if (s_localAcquisitionService)
    {
      uint64_t v0 = (AFAudioSessionAssertionRemoteAcquisitionService *)(id)s_localAcquisitionService;
    }
    else if (!s_localAcquisitionServiceProvider {
           || ((*(void (**)(void))(s_localAcquisitionServiceProvider + 16))(),
    }
               (uint64_t v0 = (AFAudioSessionAssertionRemoteAcquisitionService *)objc_claimAutoreleasedReturnValue()) == 0))
    {
      id v1 = [AFAudioSessionAssertionRemoteAcquisitionService alloc];
      id v2 = +[AFInstanceContext currentContext];
      uint64_t v0 = [(AFAudioSessionAssertionRemoteAcquisitionService *)v1 initWithInstanceContext:v2];
    }
    objc_storeStrong((id *)&s_currentAcquisitionService, v0);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&s_acquisitionServiceLock);
  return v0;
}

void AFAudioSessionAssertionSetLocalAcquisitionService(void *a1)
{
  id v1 = a1;
  os_unfair_lock_lock((os_unfair_lock_t)&s_acquisitionServiceLock);
  id v2 = (void *)s_currentAcquisitionService;
  s_currentAcquisitionService = 0;

  uint64_t v3 = (void *)s_localAcquisitionService;
  s_localAcquisitionService = (uint64_t)v1;

  os_unfair_lock_unlock((os_unfair_lock_t)&s_acquisitionServiceLock);
}

void AFAudioSessionAssertionSetLocalAcquisitionServiceProvider(void *a1)
{
  id v1 = a1;
  os_unfair_lock_lock((os_unfair_lock_t)&s_acquisitionServiceLock);
  id v2 = (void *)s_currentAcquisitionService;
  s_currentAcquisitionService = 0;

  uint64_t v3 = MEMORY[0x19F3A50D0](v1);
  id v4 = (void *)s_localAcquisitionServiceProvider;
  s_localAcquisitionServiceProvider = v3;

  os_unfair_lock_unlock((os_unfair_lock_t)&s_acquisitionServiceLock);
}

uint64_t initIMStringIsPhoneNumber(void *a1)
{
  id v1 = a1;
  id v2 = IMFoundationLibrary();
  uint64_t v3 = (uint64_t (*)())dlsym(v2, "IMStringIsPhoneNumber");
  softLinkIMStringIsPhoneNumber = v3;
  if (!v3) {
    __assert_rtn("initIMStringIsPhoneNumber", "AFSiriRingtone.m", 34, "softLinkIMStringIsPhoneNumber");
  }
  uint64_t v4 = ((uint64_t (*)(id))v3)(v1);

  return v4;
}

void *IMFoundationLibrary()
{
  Class result = (void *)IMFoundationLibrary_frameworkLibrary;
  if (!IMFoundationLibrary_frameworkLibrary)
  {
    Class result = dlopen("/System/Library/PrivateFrameworks/IMFoundation.framework/IMFoundation", 2);
    IMFoundationLibrary_frameworkLibrary = (uint64_t)result;
    if (!result) {
      __assert_rtn("IMFoundationLibrary", "AFSiriRingtone.m", 33, "frameworkLibrary");
    }
  }
  return result;
}

uint64_t initIMStringIsEmail(void *a1)
{
  id v1 = a1;
  id v2 = IMFoundationLibrary();
  uint64_t v3 = (uint64_t (*)())dlsym(v2, "IMStringIsEmail");
  softLinkIMStringIsEmail = v3;
  if (!v3) {
    __assert_rtn("initIMStringIsEmail", "AFSiriRingtone.m", 35, "softLinkIMStringIsEmail");
  }
  uint64_t v4 = ((uint64_t (*)(id))v3)(v1);

  return v4;
}

id AFRingtoneLocalizedString(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1;
  id v5 = +[AFLocalization sharedInstance];
  uint64_t v6 = [MEMORY[0x1E4F28B50] bundleForClass:objc_opt_class()];
  uint64_t v7 = [v5 localizedStringForKey:v4 table:@"Ringtone" bundle:v6 languageCode:v3];

  return v7;
}

id _FullyQualifiedDomainObjectProperty(void *a1, void *a2, void *a3)
{
  id v5 = (objc_class *)NSString;
  id v6 = a3;
  id v7 = a2;
  id v8 = a1;
  __int16 v9 = (void *)[[v5 alloc] initWithFormat:@"%@#%@#%@", v8, v7, v6];

  return v9;
}

id initCNContactPhonemeDataKey()
{
  if (initCNContactPhonemeDataKey_sOnce != -1) {
    dispatch_once(&initCNContactPhonemeDataKey_sOnce, &__block_literal_global_486);
  }
  uint64_t v0 = (void *)constantCNContactPhonemeDataKey;
  return v0;
}

void __initCNContactPhonemeDataKey_block_invoke()
{
  if (ContactsLibrary_sOnce != -1) {
    dispatch_once(&ContactsLibrary_sOnce, &__block_literal_global_207);
  }
  uint64_t v0 = (id *)dlsym((void *)ContactsLibrary_sLib, "CNContactPhonemeDataKey");
  if (!v0) {
    __assert_rtn("initCNContactPhonemeDataKey_block_invoke", "AFSiriRingtone.m", 31, "constant");
  }
  objc_storeStrong((id *)&constantCNContactPhonemeDataKey, *v0);
  getCNContactPhonemeDataKey = (uint64_t (*)())CNContactPhonemeDataKeyFunction;
}

id CNContactPhonemeDataKeyFunction()
{
  return (id)constantCNContactPhonemeDataKey;
}

void *__ContactsLibrary_block_invoke()
{
  Class result = dlopen("/System/Library/Frameworks/Contacts.framework/Contacts", 2);
  ContactsLibrary_sLib = (uint64_t)result;
  return result;
}

void sub_19CF46E14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  objc_destroyWeak(v22);
  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19CF47150(_Unwind_Exception *a1)
{
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 88));
  _Unwind_Resume(a1);
}

void sub_19CF4761C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 72));
  _Unwind_Resume(a1);
}

id AFProviderServiceXPCInterface()
{
  if (AFProviderServiceXPCInterface_onceToken != -1) {
    dispatch_once(&AFProviderServiceXPCInterface_onceToken, &__block_literal_global_861);
  }
  uint64_t v0 = (void *)AFProviderServiceXPCInterface_cachedXPCInterface;
  return v0;
}

void __AFProviderServiceXPCInterface_block_invoke()
{
  uint64_t v0 = [MEMORY[0x1E4F29280] interfaceWithProtocol:&unk_1EEEE6828];
  id v1 = (void *)AFProviderServiceXPCInterface_cachedXPCInterface;
  AFProviderServiceXPCInterface_cachedXPCInterface = v0;
}

id AFProviderServiceDelegateXPCInterface()
{
  if (AFProviderServiceDelegateXPCInterface_onceToken != -1) {
    dispatch_once(&AFProviderServiceDelegateXPCInterface_onceToken, &__block_literal_global_60);
  }
  uint64_t v0 = (void *)AFProviderServiceDelegateXPCInterface_cachedXPCInterface;
  return v0;
}

void __AFProviderServiceDelegateXPCInterface_block_invoke()
{
  v11[2] = *MEMORY[0x1E4F143B8];
  uint64_t v0 = [MEMORY[0x1E4F29280] interfaceWithProtocol:&unk_1EEEE6888];
  id v1 = (void *)AFProviderServiceDelegateXPCInterface_cachedXPCInterface;
  AFProviderServiceDelegateXPCInterface_cachedXPCInterface = v0;

  id v2 = (void *)AFProviderServiceDelegateXPCInterface_cachedXPCInterface;
  uint64_t v3 = (void *)MEMORY[0x1E4F1CAD0];
  v11[0] = objc_opt_class();
  v11[1] = objc_opt_class();
  id v4 = [MEMORY[0x1E4F1C978] arrayWithObjects:v11 count:2];
  id v5 = [v3 setWithArray:v4];
  [v2 setClasses:v5 forSelector:sel_fetchContextsForKeys_forRequestID_includesNearbyDevices_completion_ argumentIndex:0 ofReply:0];

  id v6 = (void *)AFProviderServiceDelegateXPCInterface_cachedXPCInterface;
  id v7 = (void *)MEMORY[0x1E4F1CAD0];
  v10[0] = objc_opt_class();
  v10[1] = objc_opt_class();
  id v8 = [MEMORY[0x1E4F1C978] arrayWithObjects:v10 count:2];
  __int16 v9 = [v7 setWithArray:v8];
  [v6 setClasses:v9 forSelector:sel_fetchContextsForKeys_forRequestID_includesNearbyDevices_completion_ argumentIndex:0 ofReply:1];
}

uint64_t AFInvocationFeedbackExperimentFeatureGroupsValidate(char a1)
{
  return a1 & 0xF;
}

id AFInvocationFeedbackExperimentFeatureGroupsGetNames(uint64_t a1)
{
  if (a1)
  {
    char v1 = a1;
    id v2 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
    uint64_t v3 = v2;
    if (v1)
    {
      [v2 addObject:@"one"];
      if ((v1 & 2) == 0)
      {
LABEL_4:
        if ((v1 & 4) == 0) {
          goto LABEL_5;
        }
        goto LABEL_14;
      }
    }
    else if ((v1 & 2) == 0)
    {
      goto LABEL_4;
    }
    [v3 addObject:@"two"];
    if ((v1 & 4) == 0)
    {
LABEL_5:
      if ((v1 & 8) == 0)
      {
LABEL_7:
        id v4 = (void *)[v3 copy];

        goto LABEL_9;
      }
LABEL_6:
      [v3 addObject:@"four"];
      goto LABEL_7;
    }
LABEL_14:
    [v3 addObject:@"three"];
    if ((v1 & 8) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  id v4 = (void *)MEMORY[0x1E4F1CBF0];
LABEL_9:
  return v4;
}

uint64_t AFInvocationFeedbackExperimentFeatureGroupsGetFromNames(void *a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if ([v1 count])
  {
    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v12 = v1;
    id v2 = v1;
    uint64_t v3 = [v2 countByEnumeratingWithState:&v13 objects:v17 count:16];
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = 0;
      uint64_t v6 = *(void *)v14;
      do
      {
        uint64_t v7 = 0;
        do
        {
          if (*(void *)v14 != v6) {
            objc_enumerationMutation(v2);
          }
          id v8 = *(id *)(*((void *)&v13 + 1) + 8 * v7);
          if ([v8 length])
          {
            if (_AFInvocationFeedbackExperimentFeatureGroupsGetFromName_onceToken != -1) {
              dispatch_once(&_AFInvocationFeedbackExperimentFeatureGroupsGetFromName_onceToken, &__block_literal_global_877);
            }
            __int16 v9 = [(id)_AFInvocationFeedbackExperimentFeatureGroupsGetFromName_map objectForKey:v8];
            uint64_t v10 = [v9 unsignedIntegerValue];
          }
          else
          {
            uint64_t v10 = 0;
          }

          v5 |= v10;
          ++v7;
        }
        while (v4 != v7);
        uint64_t v4 = [v2 countByEnumeratingWithState:&v13 objects:v17 count:16];
      }
      while (v4);
    }
    else
    {
      uint64_t v5 = 0;
    }

    id v1 = v12;
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

void sub_19CF4AE84(_Unwind_Exception *a1)
{
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 72));
  _Unwind_Resume(a1);
}

uint64_t AFSpeechRecordingEventListenerGetXPCInterface()
{
  return [MEMORY[0x1E4F29280] interfaceWithProtocol:&unk_1EEEE68E8];
}

BOOL AFSiriUserNotificationAnnouncementTypeGetIsValid(unint64_t a1)
{
  return a1 < 0xA;
}

BOOL AFSiriUserNotificationAnnouncementTypeGetIsValidAndSpecified(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 9;
}

__CFString *AFSiriUserNotificationAnnouncementTypeGetName(unint64_t a1)
{
  if (a1 > 9) {
    return @"(unknown)";
  }
  else {
    return off_1E5924D80[a1];
  }
}

uint64_t AFSiriUserNotificationAnnouncementTypeGetFromName(void *a1)
{
  id v1 = a1;
  if ([v1 length])
  {
    if (AFSiriUserNotificationAnnouncementTypeGetFromName_onceToken != -1) {
      dispatch_once(&AFSiriUserNotificationAnnouncementTypeGetFromName_onceToken, &__block_literal_global_1366);
    }
    id v2 = [(id)AFSiriUserNotificationAnnouncementTypeGetFromName_map objectForKey:v1];
    uint64_t v3 = [v2 integerValue];
  }
  else
  {
    uint64_t v3 = 0;
  }

  return v3;
}

void __AFSiriUserNotificationAnnouncementTypeGetFromName_block_invoke()
{
  uint64_t v0 = (void *)AFSiriUserNotificationAnnouncementTypeGetFromName_map;
  AFSiriUserNotificationAnnouncementTypeGetFromName_map = (uint64_t)&unk_1EEE98720;
}

__CFString *AFVoiceGenderGetName(unint64_t a1)
{
  if (a1 > 3) {
    return 0;
  }
  else {
    return off_1E5924DD0[a1];
  }
}

__CFString *AFVoiceFootprintGetName(unint64_t a1)
{
  if (a1 > 2) {
    return 0;
  }
  else {
    return off_1E5924DF0[a1];
  }
}

BOOL AFSiriActivationSourceGetIsValid(unint64_t a1)
{
  return a1 < 0x10;
}

BOOL AFSiriActivationSourceGetIsValidAndSpecified(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 0xF;
}

__CFString *AFSiriActivationSourceGetName(unint64_t a1)
{
  if (a1 > 0xF) {
    return @"(unknown)";
  }
  else {
    return off_1E5924E08[a1];
  }
}

uint64_t AFSiriActivationSourceGetFromName(void *a1)
{
  id v1 = a1;
  if ([v1 length])
  {
    if (AFSiriActivationSourceGetFromName_onceToken != -1) {
      dispatch_once(&AFSiriActivationSourceGetFromName_onceToken, &__block_literal_global_1573);
    }
    id v2 = [(id)AFSiriActivationSourceGetFromName_map objectForKey:v1];
    uint64_t v3 = [v2 integerValue];
  }
  else
  {
    uint64_t v3 = 0;
  }

  return v3;
}

void __AFSiriActivationSourceGetFromName_block_invoke()
{
  uint64_t v0 = (void *)AFSiriActivationSourceGetFromName_map;
  AFSiriActivationSourceGetFromName_map = (uint64_t)&unk_1EEE98748;
}

id initBMStreams()
{
  if (initBMStreams_sOnce != -1) {
    dispatch_once(&initBMStreams_sOnce, &__block_literal_global_41);
  }
  uint64_t v0 = (void *)classBMStreams;
  return v0;
}

Class __initBMStreams_block_invoke()
{
  if (BiomeStreamsLibrary_sOnce != -1) {
    dispatch_once(&BiomeStreamsLibrary_sOnce, &__block_literal_global_38);
  }
  Class result = objc_getClass("BMStreams");
  classBMStreams = (uint64_t)result;
  getBMStreamsClass = BMStreamsFunction;
  return result;
}

id BMStreamsFunction()
{
  return (id)classBMStreams;
}

void *__BiomeStreamsLibrary_block_invoke()
{
  Class result = dlopen("/System/Library/Frameworks/BiomeStreams.framework/BiomeStreams", 2);
  BiomeStreamsLibrary_sLib = (uint64_t)result;
  return result;
}

id initBMDiscoverabilitySignalEvent()
{
  if (initBMDiscoverabilitySignalEvent_sOnce != -1) {
    dispatch_once(&initBMDiscoverabilitySignalEvent_sOnce, &__block_literal_global_35);
  }
  uint64_t v0 = (void *)classBMDiscoverabilitySignalEvent;
  return v0;
}

Class __initBMDiscoverabilitySignalEvent_block_invoke()
{
  if (BiomeStreamsLibrary_sOnce != -1) {
    dispatch_once(&BiomeStreamsLibrary_sOnce, &__block_literal_global_38);
  }
  Class result = objc_getClass("BMDiscoverabilitySignalEvent");
  classBMDiscoverabilitySignalEvent = (uint64_t)result;
  getBMDiscoverabilitySignalEventClass = BMDiscoverabilitySignalEventFunction;
  return result;
}

id BMDiscoverabilitySignalEventFunction()
{
  return (id)classBMDiscoverabilitySignalEvent;
}

void sub_19CF50C80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id _AFAssertionCreateDescriptionOfProperties(void *a1)
{
  id v1 = (objc_class *)NSString;
  id v2 = a1;
  id v19 = [v1 alloc];
  uint64_t v3 = [v2 uuid];
  id v21 = [v2 context];
  uint64_t v4 = [v21 timestamp];
  id v20 = [v2 context];
  uint64_t v5 = [v20 reason];
  uint64_t v6 = [v2 context];
  uint64_t v7 = [v6 effectiveDate];
  id v8 = [v2 context];
  __int16 v9 = [v8 effectiveDate];
  [v9 timeIntervalSinceNow];
  uint64_t v11 = v10;
  id v12 = [v2 context];
  [v12 expirationDuration];
  uint64_t v14 = v13;
  long long v15 = [v2 context];

  long long v16 = [v15 userInfo];
  uint64_t v17 = (void *)[v19 initWithFormat:@"uuid = %@, timestamp = %llu, reason = %@, effectiveDate = %@ (%f), expirationDuration = %f, userInfo = %@", v3, v4, v5, v7, v11, v14, v16];

  return v17;
}

void sub_19CF52F34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id location,char a23)
{
  _Block_object_dispose(&a23, 8);
  objc_destroyWeak(v23);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy_(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose_(uint64_t a1)
{
}

void sub_19CF53720(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id location,char a23)
{
  objc_destroyWeak(v23);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

BOOL AFMyriadGoodnessScoreBumpReasonGetIsValid(unint64_t a1)
{
  return a1 < 4;
}

BOOL AFMyriadGoodnessScoreBumpReasonGetIsValidAndSpecified(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 3;
}

__CFString *AFMyriadGoodnessScoreBumpReasonGetName(unint64_t a1)
{
  if (a1 > 3) {
    return @"(unknown)";
  }
  else {
    return off_1E59252F8[a1];
  }
}

uint64_t AFMyriadGoodnessScoreBumpReasonGetFromName(void *a1)
{
  id v1 = a1;
  if ([v1 length])
  {
    if (AFMyriadGoodnessScoreBumpReasonGetFromName_onceToken != -1) {
      dispatch_once(&AFMyriadGoodnessScoreBumpReasonGetFromName_onceToken, &__block_literal_global_2849);
    }
    id v2 = [(id)AFMyriadGoodnessScoreBumpReasonGetFromName_map objectForKey:v1];
    uint64_t v3 = [v2 integerValue];
  }
  else
  {
    uint64_t v3 = 0;
  }

  return v3;
}

void __AFMyriadGoodnessScoreBumpReasonGetFromName_block_invoke()
{
  uint64_t v0 = (void *)AFMyriadGoodnessScoreBumpReasonGetFromName_map;
  AFMyriadGoodnessScoreBumpReasonGetFromName_map = (uint64_t)&unk_1EEE98770;
}

id AFLogDirectory()
{
  uint64_t v0 = CPSharedResourcesDirectory();
  id v1 = [v0 stringByAppendingPathComponent:@"/Library/Logs/CrashReporter/Assistant/"];

  return v1;
}

id AFSpeechLogsDirectory()
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v0 = AFLogDirectory();
  id v1 = [v0 stringByAppendingPathComponent:@"SpeechLogs"];

  id v2 = [MEMORY[0x1E4F28CB8] defaultManager];
  id v7 = 0;
  char v3 = [v2 createDirectoryAtPath:v1 withIntermediateDirectories:1 attributes:0 error:&v7];
  id v4 = v7;

  if ((v3 & 1) == 0)
  {
    uint64_t v5 = AFSiriLogContextSpeech;
    if (os_log_type_enabled((os_log_t)AFSiriLogContextSpeech, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      __int16 v9 = "AFSpeechLogsDirectory";
      __int16 v10 = 2114;
      uint64_t v11 = v1;
      __int16 v12 = 2114;
      id v13 = v4;
      _os_log_error_impl(&dword_19CF1D000, v5, OS_LOG_TYPE_ERROR, "%s Couldn't create speech log directory at path %{public}@ %{public}@", buf, 0x20u);
    }
  }

  return v1;
}

id AFAnalyticsLogsDirectory()
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v0 = AFLogDirectory();
  id v1 = [v0 stringByAppendingPathComponent:@"Analytics"];

  id v2 = [MEMORY[0x1E4F28CB8] defaultManager];
  id v7 = 0;
  char v3 = [v2 createDirectoryAtPath:v1 withIntermediateDirectories:1 attributes:0 error:&v7];
  id v4 = v7;

  if ((v3 & 1) == 0)
  {
    uint64_t v5 = AFSiriLogContextSpeech;
    if (os_log_type_enabled((os_log_t)AFSiriLogContextSpeech, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      __int16 v9 = "AFAnalyticsLogsDirectory";
      __int16 v10 = 2114;
      uint64_t v11 = v1;
      __int16 v12 = 2114;
      id v13 = v4;
      _os_log_error_impl(&dword_19CF1D000, v5, OS_LOG_TYPE_ERROR, "%s Couldn't create analytics log directory at path %{public}@ %{public}@", buf, 0x20u);
    }
  }

  return v1;
}

void AFClearInternalLogFiles()
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  if (AFIsInternalInstall_onceToken != -1) {
    dispatch_once(&AFIsInternalInstall_onceToken, &__block_literal_global_158);
  }
  if (AFIsInternalInstall_isInternal)
  {
    uint64_t v0 = [MEMORY[0x1E4F1C9C8] date];
    id v1 = [v0 dateByAddingTimeInterval:-1296000.0];

    id v2 = objc_alloc_init(MEMORY[0x1E4F28CB8]);
    AFSpeechLogsDirectory();
    long long v30 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    id v26 = v29[1] = 0;
    __int16 v27 = v2;
    char v3 = objc_msgSend(v2, "contentsOfDirectoryAtPath:error:");
    id v4 = (__CFString *)0;
    id obj = v3;
    uint64_t v5 = [v3 countByEnumeratingWithState:&v30 objects:v40 count:16];
    if (v5)
    {
      uint64_t v7 = v5;
      int v23 = 0;
      uint64_t v8 = *(void *)v31;
      uint64_t v24 = *MEMORY[0x1E4F282C0];
      *(void *)&long long v6 = 136315650;
      long long v20 = v6;
      id v21 = v1;
      do
      {
        for (uint64_t i = 0; i != v7; ++i)
        {
          if (*(void *)v31 != v8) {
            objc_enumerationMutation(obj);
          }
          __int16 v10 = *(void **)(*((void *)&v30 + 1) + 8 * i);
          uint64_t v11 = objc_msgSend(v10, "pathExtension", v20);
          if (![v11 compare:@"opx" options:1]
            || ![v11 compare:@"pcm" options:1])
          {
            __int16 v12 = [v26 stringByAppendingPathComponent:v10];
            v29[0] = v4;
            id v13 = [v27 attributesOfItemAtPath:v12 error:v29];
            uint64_t v14 = (__CFString *)v29[0];

            if (!v14)
            {
              long long v15 = [v13 objectForKey:v24];
              if ([v15 compare:v1] == -1)
              {
                id v28 = 0;
                int v22 = [v27 removeItemAtPath:v12 error:&v28];
                uint64_t v14 = (__CFString *)v28;
                long long v16 = AFSiriLogContextUtility;
                if (os_log_type_enabled((os_log_t)AFSiriLogContextUtility, OS_LOG_TYPE_INFO))
                {
                  *(_DWORD *)buf = v20;
                  uint64_t v17 = &stru_1EEE35D28;
                  if (!v22) {
                    uint64_t v17 = v14;
                  }
                  v35 = "AFClearInternalLogFiles";
                  __int16 v36 = 2112;
                  v37 = v10;
                  __int16 v38 = 2112;
                  v39 = v17;
                  _os_log_impl(&dword_19CF1D000, v16, OS_LOG_TYPE_INFO, "%s Removing speech log %@ %@", buf, 0x20u);
                }
                ++v23;
                id v1 = v21;
              }
              else
              {
                uint64_t v14 = 0;
              }
            }
            id v4 = v14;
          }
        }
        uint64_t v7 = [obj countByEnumeratingWithState:&v30 objects:v40 count:16];
      }
      while (v7);
    }
    else
    {
      int v23 = 0;
    }

    id v19 = AFSiriLogContextUtility;
    if (os_log_type_enabled((os_log_t)AFSiriLogContextUtility, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315394;
      v35 = "AFClearInternalLogFiles";
      __int16 v36 = 2048;
      v37 = v23;
      _os_log_impl(&dword_19CF1D000, v19, OS_LOG_TYPE_INFO, "%s Finished, and removed %ld files", buf, 0x16u);
    }
  }
  else
  {
    uint64_t v18 = AFSiriLogContextUtility;
    if (os_log_type_enabled((os_log_t)AFSiriLogContextUtility, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315138;
      v35 = "AFClearInternalLogFiles";
      _os_log_impl(&dword_19CF1D000, v18, OS_LOG_TYPE_INFO, "%s Nothing to do on non-internal install", buf, 0xCu);
    }
  }
}

uint64_t AFLogWantsToLogParsedCommandObjects()
{
  return 0;
}

void AFLogParsedCommandObject(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  id v10 = a1;
  id v11 = a2;
  __int16 v12 = AFLogDirectory();
  id v13 = [v12 stringByAppendingPathComponent:@"CommandLogs"];

  uint64_t v14 = [MEMORY[0x1E4F28CB8] defaultManager];
  id v28 = 0;
  char v15 = [v14 createDirectoryAtPath:v13 withIntermediateDirectories:1 attributes:0 error:&v28];
  id v16 = v28;

  if (v15)
  {
    id v27 = 0;
    uint64_t v17 = [MEMORY[0x1E4F28F98] dataWithPropertyList:v10 format:200 options:0 error:&v27];
    id v18 = v27;

    if (v17)
    {
      v26[1] = &a9;
      id v19 = (void *)[[NSString alloc] initWithFormat:v11 arguments:&a9];
      long long v20 = [v13 stringByAppendingPathComponent:v19];
      id v21 = [v20 stringByAppendingPathExtension:@"plist"];

      v26[0] = v18;
      char v22 = [v17 writeToFile:v21 options:1 error:v26];
      id v16 = v26[0];

      if ((v22 & 1) == 0)
      {
        int v23 = AFSiriLogContextUtility;
        if (os_log_type_enabled((os_log_t)AFSiriLogContextUtility, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315650;
          long long v30 = "AFLogParsedCommandObject";
          __int16 v31 = 2112;
          id v32 = v21;
          __int16 v33 = 2112;
          id v34 = v16;
          _os_log_impl(&dword_19CF1D000, v23, OS_LOG_TYPE_INFO, "%s Couldn't write to %@: %@", buf, 0x20u);
        }
      }
    }
    else
    {
      __int16 v25 = AFSiriLogContextUtility;
      if (os_log_type_enabled((os_log_t)AFSiriLogContextUtility, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315394;
        long long v30 = "AFLogParsedCommandObject";
        __int16 v31 = 2112;
        id v32 = v18;
        _os_log_impl(&dword_19CF1D000, v25, OS_LOG_TYPE_INFO, "%s Couldn't serialize: %@", buf, 0x16u);
      }
      id v16 = v18;
    }
  }
  else
  {
    uint64_t v24 = AFSiriLogContextUtility;
    if (os_log_type_enabled((os_log_t)AFSiriLogContextUtility, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      long long v30 = "AFLogParsedCommandObject";
      __int16 v31 = 2112;
      id v32 = v13;
      __int16 v33 = 2112;
      id v34 = v16;
      _os_log_impl(&dword_19CF1D000, v24, OS_LOG_TYPE_INFO, "%s Couldn't create %@: %@", buf, 0x20u);
    }
  }
}

unint64_t AFTruncateMachTimeToTenthOfASecond(uint64_t a1)
{
  if (AFTruncateMachTimeToTenthOfASecond_onceToken != -1) {
    dispatch_once(&AFTruncateMachTimeToTenthOfASecond_onceToken, &__block_literal_global_73);
  }
  return 1000000000
       * (unint64_t)AFTruncateMachTimeToTenthOfASecond_machTimebaseInfo
       * a1
       / *(unsigned int *)algn_1E943B264
       / 0x3B9ACA00
       * *(unsigned int *)algn_1E943B264
       / AFTruncateMachTimeToTenthOfASecond_machTimebaseInfo;
}

uint64_t __AFTruncateMachTimeToTenthOfASecond_block_invoke()
{
  return mach_timebase_info((mach_timebase_info_t)&AFTruncateMachTimeToTenthOfASecond_machTimebaseInfo);
}

void AFDispatchSyncLogged(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  __int16 v9 = a1;
  id v10 = a2;
  label = dispatch_queue_get_label(v9);
  __int16 v12 = AFSiriLogContextDispatch;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextDispatch, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315906;
    id v21 = "AFDispatchSyncLogged";
    __int16 v22 = 2080;
    uint64_t v23 = a3;
    __int16 v24 = 2048;
    uint64_t v25 = a4;
    __int16 v26 = 2080;
    id v27 = label;
    _os_log_impl(&dword_19CF1D000, v12, OS_LOG_TYPE_INFO, "%s Queue block at %s line %lu (queue: %s)", buf, 0x2Au);
  }
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __AFDispatchSyncLogged_block_invoke;
  block[3] = &unk_1E5925330;
  uint64_t v17 = a4;
  id v18 = label;
  uint64_t v19 = a5;
  id v15 = v10;
  uint64_t v16 = a3;
  id v13 = v10;
  dispatch_sync(v9, block);
}

void __AFDispatchSyncLogged_block_invoke(void *a1)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  id v2 = (void *)AFSiriLogContextDispatch;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextDispatch, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = a1[5];
    uint64_t v4 = a1[6];
    uint64_t v5 = a1[7];
    long long v6 = v2;
    uint64_t v7 = mach_absolute_time();
    unint64_t v8 = _AFConvertMachTimeToMilliseconds(v7 - a1[8]);
    int v17 = 136316162;
    id v18 = "AFDispatchSyncLogged_block_invoke";
    __int16 v19 = 2080;
    uint64_t v20 = v3;
    __int16 v21 = 2048;
    uint64_t v22 = v4;
    __int16 v23 = 2080;
    uint64_t v24 = v5;
    __int16 v25 = 2048;
    unint64_t v26 = v8;
    _os_log_impl(&dword_19CF1D000, v6, OS_LOG_TYPE_INFO, "%s Enter block at %s line %lu (queue: %s, waitingTime: %llums)", (uint8_t *)&v17, 0x34u);
  }
  uint64_t v9 = mach_absolute_time();
  (*(void (**)(void))(a1[4] + 16))();
  id v10 = (void *)AFSiriLogContextDispatch;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextDispatch, OS_LOG_TYPE_INFO))
  {
    uint64_t v11 = a1[5];
    uint64_t v12 = a1[6];
    uint64_t v13 = a1[7];
    uint64_t v14 = v10;
    uint64_t v15 = mach_absolute_time();
    unint64_t v16 = _AFConvertMachTimeToMilliseconds(v15 - v9);
    int v17 = 136316162;
    id v18 = "AFDispatchSyncLogged_block_invoke";
    __int16 v19 = 2080;
    uint64_t v20 = v11;
    __int16 v21 = 2048;
    uint64_t v22 = v12;
    __int16 v23 = 2080;
    uint64_t v24 = v13;
    __int16 v25 = 2048;
    unint64_t v26 = v16;
    _os_log_impl(&dword_19CF1D000, v14, OS_LOG_TYPE_INFO, "%s Leave block at %s line %lu (queue: %s, executionTime: %llums)", (uint8_t *)&v17, 0x34u);
  }
}

unint64_t _AFConvertMachTimeToMilliseconds(uint64_t a1)
{
  if (_AFConvertMachTimeToMilliseconds_onceToken != -1) {
    dispatch_once(&_AFConvertMachTimeToMilliseconds_onceToken, &__block_literal_global_76);
  }
  return (unint64_t)_AFConvertMachTimeToMilliseconds_machTimebaseInfo
       * a1
       / *(unsigned int *)algn_1E943B274
       / 0xF4240;
}

void AFDispatchAsyncLogged(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  uint64_t v9 = a1;
  id v10 = a2;
  label = dispatch_queue_get_label(v9);
  uint64_t v12 = AFSiriLogContextDispatch;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextDispatch, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315906;
    __int16 v21 = "AFDispatchAsyncLogged";
    __int16 v22 = 2080;
    uint64_t v23 = a3;
    __int16 v24 = 2048;
    uint64_t v25 = a4;
    __int16 v26 = 2080;
    uint64_t v27 = label;
    _os_log_impl(&dword_19CF1D000, v12, OS_LOG_TYPE_INFO, "%s Queue block at %s line %lu (queue: %s)", buf, 0x2Au);
  }
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __AFDispatchAsyncLogged_block_invoke;
  block[3] = &unk_1E5925330;
  uint64_t v17 = a4;
  id v18 = label;
  uint64_t v19 = a5;
  id v15 = v10;
  uint64_t v16 = a3;
  id v13 = v10;
  dispatch_async(v9, block);
}

void __AFDispatchAsyncLogged_block_invoke(void *a1)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  id v2 = (void *)AFSiriLogContextDispatch;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextDispatch, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = a1[5];
    uint64_t v4 = a1[6];
    uint64_t v5 = a1[7];
    long long v6 = v2;
    uint64_t v7 = mach_absolute_time();
    unint64_t v8 = _AFConvertMachTimeToMilliseconds(v7 - a1[8]);
    int v17 = 136316162;
    id v18 = "AFDispatchAsyncLogged_block_invoke";
    __int16 v19 = 2080;
    uint64_t v20 = v3;
    __int16 v21 = 2048;
    uint64_t v22 = v4;
    __int16 v23 = 2080;
    uint64_t v24 = v5;
    __int16 v25 = 2048;
    unint64_t v26 = v8;
    _os_log_impl(&dword_19CF1D000, v6, OS_LOG_TYPE_INFO, "%s Enter block at %s line %lu (queue: %s, waitingTime: %llums)", (uint8_t *)&v17, 0x34u);
  }
  uint64_t v9 = mach_absolute_time();
  (*(void (**)(void))(a1[4] + 16))();
  id v10 = (void *)AFSiriLogContextDispatch;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextDispatch, OS_LOG_TYPE_INFO))
  {
    uint64_t v11 = a1[5];
    uint64_t v12 = a1[6];
    uint64_t v13 = a1[7];
    uint64_t v14 = v10;
    uint64_t v15 = mach_absolute_time();
    unint64_t v16 = _AFConvertMachTimeToMilliseconds(v15 - v9);
    int v17 = 136316162;
    id v18 = "AFDispatchAsyncLogged_block_invoke";
    __int16 v19 = 2080;
    uint64_t v20 = v11;
    __int16 v21 = 2048;
    uint64_t v22 = v12;
    __int16 v23 = 2080;
    uint64_t v24 = v13;
    __int16 v25 = 2048;
    unint64_t v26 = v16;
    _os_log_impl(&dword_19CF1D000, v14, OS_LOG_TYPE_INFO, "%s Leave block at %s line %lu (queue: %s, executionTime: %llums)", (uint8_t *)&v17, 0x34u);
  }
}

void sub_19CF588AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19CF58C00(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

BOOL AFExperimentConfigurationTypeGetIsValid(unint64_t a1)
{
  return a1 < 3;
}

BOOL AFExperimentConfigurationTypeGetIsValidAndSpecified(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 2;
}

__CFString *AFExperimentConfigurationTypeGetName(unint64_t a1)
{
  if (a1 > 2) {
    return @"(unknown)";
  }
  else {
    return off_1E5925410[a1];
  }
}

uint64_t AFExperimentConfigurationTypeGetFromName(void *a1)
{
  id v1 = a1;
  if ([v1 length])
  {
    if (AFExperimentConfigurationTypeGetFromName_onceToken != -1) {
      dispatch_once(&AFExperimentConfigurationTypeGetFromName_onceToken, &__block_literal_global_3314);
    }
    id v2 = [(id)AFExperimentConfigurationTypeGetFromName_map objectForKey:v1];
    uint64_t v3 = [v2 integerValue];
  }
  else
  {
    uint64_t v3 = 0;
  }

  return v3;
}

void __AFExperimentConfigurationTypeGetFromName_block_invoke()
{
  uint64_t v0 = (void *)AFExperimentConfigurationTypeGetFromName_map;
  AFExperimentConfigurationTypeGetFromName_map = (uint64_t)&unk_1EEE98798;
}

BOOL AFSiriActivationServicePortGetIsValid(unint64_t a1)
{
  return a1 < 4;
}

BOOL AFSiriActivationServicePortGetIsValidAndSpecified(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 3;
}

__CFString *AFSiriActivationServicePortGetName(unint64_t a1)
{
  if (a1 > 3) {
    return @"(unknown)";
  }
  else {
    return off_1E5925428[a1];
  }
}

uint64_t AFSiriActivationServicePortGetFromName(void *a1)
{
  id v1 = a1;
  if ([v1 length])
  {
    if (AFSiriActivationServicePortGetFromName_onceToken != -1) {
      dispatch_once(&AFSiriActivationServicePortGetFromName_onceToken, &__block_literal_global_3339);
    }
    id v2 = [(id)AFSiriActivationServicePortGetFromName_map objectForKey:v1];
    uint64_t v3 = [v2 integerValue];
  }
  else
  {
    uint64_t v3 = 0;
  }

  return v3;
}

void __AFSiriActivationServicePortGetFromName_block_invoke()
{
  uint64_t v0 = (void *)AFSiriActivationServicePortGetFromName_map;
  AFSiriActivationServicePortGetFromName_map = (uint64_t)&unk_1EEE987C0;
}

id AFSecurityServiceGetXPCInterface()
{
  v45[3] = *MEMORY[0x1E4F143B8];
  uint64_t v0 = [MEMORY[0x1E4F29280] interfaceWithProtocol:&unk_1EEE9F668];
  id v1 = (void *)MEMORY[0x1E4F1CAD0];
  v45[0] = objc_opt_class();
  v45[1] = objc_opt_class();
  v45[2] = objc_opt_class();
  id v2 = [MEMORY[0x1E4F1C978] arrayWithObjects:v45 count:3];
  uint64_t v3 = [v1 setWithArray:v2];
  [v0 setClasses:v3 forSelector:sel_processDataMap_usingProcedure_completion_ argumentIndex:0 ofReply:0];

  uint64_t v4 = (void *)MEMORY[0x1E4F1CAD0];
  v44[0] = objc_opt_class();
  v44[1] = objc_opt_class();
  v44[2] = objc_opt_class();
  uint64_t v5 = [MEMORY[0x1E4F1C978] arrayWithObjects:v44 count:3];
  long long v6 = [v4 setWithArray:v5];
  [v0 setClasses:v6 forSelector:sel_processDataMap_usingProcedure_completion_ argumentIndex:0 ofReply:1];

  uint64_t v7 = (void *)MEMORY[0x1E4F1CAD0];
  v43[0] = objc_opt_class();
  v43[1] = objc_opt_class();
  v43[2] = objc_opt_class();
  unint64_t v8 = [MEMORY[0x1E4F1C978] arrayWithObjects:v43 count:3];
  uint64_t v9 = [v7 setWithArray:v8];
  [v0 setClasses:v9 forSelector:sel_processDataMap_usingProcedure_completion_ argumentIndex:1 ofReply:1];

  id v10 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v42 = objc_opt_class();
  uint64_t v11 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v42 count:1];
  uint64_t v12 = [v10 setWithArray:v11];
  [v0 setClasses:v12 forSelector:sel_internalAuthAppleConnectServiceTicket_ argumentIndex:0 ofReply:1];

  uint64_t v13 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v41 = objc_opt_class();
  uint64_t v14 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v41 count:1];
  uint64_t v15 = [v13 setWithArray:v14];
  [v0 setClasses:v15 forSelector:sel_internalAuthAppleConnectServiceTicket_ argumentIndex:1 ofReply:1];

  unint64_t v16 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v40 = objc_opt_class();
  int v17 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v40 count:1];
  id v18 = [v16 setWithArray:v17];
  [v0 setClasses:v18 forSelector:sel_setInternalAuthAppleConnectServiceTicket_completion_ argumentIndex:0 ofReply:0];

  __int16 v19 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v39 = objc_opt_class();
  uint64_t v20 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v39 count:1];
  __int16 v21 = [v19 setWithArray:v20];
  [v0 setClasses:v21 forSelector:sel_setInternalAuthAppleConnectServiceTicket_completion_ argumentIndex:0 ofReply:1];

  uint64_t v22 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v38 = objc_opt_class();
  __int16 v23 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v38 count:1];
  uint64_t v24 = [v22 setWithArray:v23];
  [v0 setClasses:v24 forSelector:sel_internalAuthSessionToken_ argumentIndex:0 ofReply:1];

  __int16 v25 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v37 = objc_opt_class();
  unint64_t v26 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v37 count:1];
  uint64_t v27 = [v25 setWithArray:v26];
  [v0 setClasses:v27 forSelector:sel_internalAuthSessionToken_ argumentIndex:1 ofReply:1];

  uint64_t v28 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v36 = objc_opt_class();
  __int16 v29 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v36 count:1];
  long long v30 = [v28 setWithArray:v29];
  [v0 setClasses:v30 forSelector:sel_setInternalAuthSessionToken_completion_ argumentIndex:0 ofReply:0];

  __int16 v31 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v35 = objc_opt_class();
  id v32 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v35 count:1];
  __int16 v33 = [v31 setWithArray:v32];
  [v0 setClasses:v33 forSelector:sel_setInternalAuthSessionToken_completion_ argumentIndex:0 ofReply:1];

  return v0;
}

AFCoreAnalyticsCrossDeviceEvent *AFCoreAnalyticsEventCreateForDeviceContexts(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1;
  uint64_t v5 = [AFCoreAnalyticsCrossDeviceEvent alloc];
  long long v6 = [MEMORY[0x1E4F29128] UUID];
  uint64_t v7 = [v6 UUIDString];
  unint64_t v8 = [(AFCoreAnalyticsCrossDeviceEvent *)v5 initWithNearbyDevicesLoggingID:v7];

  [(AFCoreAnalyticsCrossDeviceEvent *)v8 addNearbyDeviceContexts:v4 proximityInfo:v3];
  return v8;
}

AFCoreAnalyticsCrossDeviceEvent *AFCoreAnalyticsEventCreateForServiceDeviceContexts(void *a1)
{
  id v1 = a1;
  id v2 = [AFCoreAnalyticsCrossDeviceEvent alloc];
  id v3 = [MEMORY[0x1E4F29128] UUID];
  id v4 = [v3 UUIDString];
  uint64_t v5 = [(AFCoreAnalyticsCrossDeviceEvent *)v2 initWithNearbyDevicesLoggingID:v4];

  id v6 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  uint64_t v12 = MEMORY[0x1E4F143A8];
  uint64_t v13 = 3221225472;
  uint64_t v14 = __AFCoreAnalyticsEventCreateForServiceDeviceContexts_block_invoke;
  uint64_t v15 = &unk_1E5925490;
  uint64_t v7 = v5;
  unint64_t v16 = v7;
  id v17 = v6;
  id v8 = v6;
  [v1 enumerateObjectsUsingBlock:&v12];

  -[AFCoreAnalyticsCrossDeviceEvent setNearbyDevicesPayloads:](v7, "setNearbyDevicesPayloads:", v8, v12, v13, v14, v15);
  uint64_t v9 = v17;
  id v10 = v7;

  return v10;
}

void __AFCoreAnalyticsEventCreateForServiceDeviceContexts_block_invoke(uint64_t a1, void *a2)
{
  id v3 = [a2 metricsContext];
  id v4 = [v3 objectForKey:@"coreAnalyticsContextPayload"];

  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  v8[2] = __AFCoreAnalyticsEventCreateForServiceDeviceContexts_block_invoke_2;
  v8[3] = &unk_1E5927E18;
  id v9 = *(id *)(a1 + 32);
  uint64_t v5 = [v4 mutatedCopyWithMutator:v8];

  id v6 = *(void **)(a1 + 40);
  uint64_t v7 = [v5 contextIdentifier];
  [v6 setObject:v5 forKey:v7];
}

void __AFCoreAnalyticsEventCreateForServiceDeviceContexts_block_invoke_2(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = a2;
  id v4 = [v2 nearbyDevicesLoggingID];
  [v3 setNearbyDevicesRequestIdentifier:v4];
}

AFCoreAnalyticsDeviceContextPayload *AFCoreAnalyticsPayloadCreateForDeviceContext(void *a1, uint64_t a2, void *a3)
{
  id v5 = a1;
  id v6 = (void *)MEMORY[0x1E4F1C9C8];
  id v7 = a3;
  v43 = [v6 date];
  id v8 = [v5 identifier];
  uint64_t v9 = [v8 UUIDString];

  id v10 = [v5 deviceInfo];
  uint64_t v11 = [v10 productType];

  if (a2 <= 1999)
  {
    uint64_t v14 = @"unknown";
    uint64_t v15 = @"far";
    if (a2 != 1000) {
      uint64_t v15 = 0;
    }
    if (a2) {
      uint64_t v14 = v15;
    }
  }
  else
  {
    switch(a2)
    {
      case 2000:
        uint64_t v14 = @"near";
        break;
      case 3000:
        uint64_t v14 = @"immediate";
        break;
      case 4000:
        uint64_t v12 = @"primary";
        uint64_t v13 = @"primary";
        if (!v11) {
          uint64_t v11 = (__CFString *)MGCopyAnswer();
        }
        goto LABEL_17;
      default:
        uint64_t v14 = 0;
        break;
    }
  }
  uint64_t v12 = v14;
  if (!v11) {
    uint64_t v11 = @"Unknown";
  }
LABEL_17:
  unint64_t v16 = (void *)MEMORY[0x1E4F28ED0];
  id v17 = [v5 alarmSnapshot];
  uint64_t v18 = objc_msgSend(v16, "numberWithBool:", objc_msgSend(v17, "hasFiringAlarms"));

  __int16 v19 = (void *)MEMORY[0x1E4F28ED0];
  uint64_t v20 = [v5 timerSnapshot];
  uint64_t v21 = objc_msgSend(v19, "numberWithBool:", objc_msgSend(v20, "hasFiringTimers"));

  uint64_t v22 = [v5 playbackStateSnapshot];
  unint64_t v23 = [v22 playbackState];
  os_log_t v44 = (void *)v9;
  uint64_t v42 = v7;
  uint64_t v24 = v5;
  __int16 v25 = (void *)v21;
  unint64_t v26 = (void *)v18;
  uint64_t v27 = v12;
  if (v23 > 5) {
    uint64_t v28 = @"(unknown)";
  }
  else {
    uint64_t v28 = *(&off_1E5928EB8 + v23);
  }
  uint64_t v41 = v28;

  __int16 v29 = [v24 playbackStateSnapshot];
  long long v30 = [v29 nowPlayingTimestamp];
  uint64_t v40 = AFAnalyticsBucketizedDurationForStartDateAndEndDate((uint64_t)v30, v43, 1, 1800.0);

  __int16 v31 = [v24 homeAnnouncementSnapshot];
  id v32 = AFHomeAnnouncementStateGetNames([v31 state]);
  __int16 v33 = [v32 componentsJoinedByString:@","];

  id v34 = [v24 homeAnnouncementSnapshot];
  uint64_t v35 = [v34 lastPlayedAnnouncement];
  uint64_t v36 = [v35 startedDate];

  uint64_t v37 = AFAnalyticsBucketizedDurationForStartDateAndEndDate((uint64_t)v36, v43, 1, 1800.0);
  uint64_t v39 = [[AFCoreAnalyticsDeviceContextPayload alloc] initWithNearbyProductType:v11 proximity:v27 alarmFiring:v26 timerFiring:v25 playbackState:v41 playbackRecency:v40 homeAnnouncementState:v33 homeAnnouncementRecency:v37 nearbyDevicesRequestIdentifier:v42 targetedResult:0 contextIdentifier:v44];

  return v39;
}

uint64_t AFTurnIdentifierGenerate()
{
  return [MEMORY[0x1E4F29128] UUID];
}

id AFTurnIdentifierGetBytes(void *a1)
{
  v2[2] = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    v2[0] = 0;
    v2[1] = 0;
    [a1 getUUIDBytes:v2];
    a1 = [MEMORY[0x1E4F1C9B8] dataWithBytes:v2 length:16];
  }
  return a1;
}

id AFTurnIdentifierCreateFromBytes(void *a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if ([v1 length] == 16)
  {
    *(void *)id v6 = 0;
    *(void *)&v6[8] = 0;
    [v1 getBytes:v6 length:16];
    id v2 = (void *)[objc_alloc(MEMORY[0x1E4F29128]) initWithUUIDBytes:v6];
  }
  else
  {
    id v3 = (void *)AFSiriLogContextUtility;
    if (os_log_type_enabled((os_log_t)AFSiriLogContextUtility, OS_LOG_TYPE_INFO))
    {
      id v4 = v3;
      *(_DWORD *)id v6 = 136315394;
      *(void *)&v6[4] = "AFTurnIdentifierCreateFromBytes";
      *(_WORD *)&v6[12] = 2048;
      *(void *)&v6[14] = [v1 length];
      _os_log_impl(&dword_19CF1D000, v4, OS_LOG_TYPE_INFO, "%s Attempted to convert bytes with invalid length (%ld) to AFTurnIdentifier", v6, 0x16u);
    }
    id v2 = 0;
  }

  return v2;
}

void sub_19CF5E2AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  objc_destroyWeak(v20);
  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19CF603FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19CF61088(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

BOOL AFBluetoothDeviceSettingBooleanValueGetIsValid(unint64_t a1)
{
  return a1 < 3;
}

BOOL AFBluetoothDeviceSettingBooleanValueGetIsValidAndSpecified(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 2;
}

__CFString *AFBluetoothDeviceSettingBooleanValueGetName(unint64_t a1)
{
  if (a1 > 2) {
    return @"(unknown)";
  }
  else {
    return off_1E5925630[a1];
  }
}

uint64_t AFBluetoothDeviceSettingBooleanValueGetFromName(void *a1)
{
  id v1 = a1;
  if ([v1 length])
  {
    if (AFBluetoothDeviceSettingBooleanValueGetFromName_onceToken != -1) {
      dispatch_once(&AFBluetoothDeviceSettingBooleanValueGetFromName_onceToken, &__block_literal_global_4637);
    }
    id v2 = [(id)AFBluetoothDeviceSettingBooleanValueGetFromName_map objectForKey:v1];
    uint64_t v3 = [v2 integerValue];
  }
  else
  {
    uint64_t v3 = 0;
  }

  return v3;
}

void __AFBluetoothDeviceSettingBooleanValueGetFromName_block_invoke()
{
  uint64_t v0 = (void *)AFBluetoothDeviceSettingBooleanValueGetFromName_map;
  AFBluetoothDeviceSettingBooleanValueGetFromName_map = (uint64_t)&unk_1EEE987E8;
}

id AFAnalyticsObserverGetXPCInterface()
{
  v5[2] = *MEMORY[0x1E4F143B8];
  uint64_t v0 = [MEMORY[0x1E4F29280] interfaceWithProtocol:&unk_1EEECC088];
  id v1 = (void *)MEMORY[0x1E4F1CAD0];
  v5[0] = objc_opt_class();
  v5[1] = objc_opt_class();
  id v2 = [MEMORY[0x1E4F1C978] arrayWithObjects:v5 count:2];
  uint64_t v3 = [v1 setWithArray:v2];
  [v0 setClasses:v3 forSelector:sel_didObserveEvents_completion_ argumentIndex:0 ofReply:0];

  return v0;
}

BOOL AFIsSyncNeeded()
{
  uint64_t v0 = AFSyncKeysThatNeedToBeSynced();
  BOOL v1 = [v0 count] != 0;

  return v1;
}

id AFSyncKeysThatNeedToBeSynced()
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v0 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  BOOL v1 = [MEMORY[0x1E4F28CB8] defaultManager];
  id v2 = AFUserSupportDirectoryPath();
  uint64_t v3 = [v1 contentsOfDirectoryAtPath:v2 error:0];

  long long v14 = 0u;
  long long v15 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  id v4 = v3;
  uint64_t v5 = [v4 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)v13;
    do
    {
      for (uint64_t i = 0; i != v6; ++i)
      {
        if (*(void *)v13 != v7) {
          objc_enumerationMutation(v4);
        }
        uint64_t v9 = *(void **)(*((void *)&v12 + 1) + 8 * i);
        if ((objc_msgSend(v9, "isEqualToString:", @"sync_flag", (void)v12) & 1) == 0
          && [v9 hasPrefix:@"sync_flag"])
        {
          id v10 = [v9 substringFromIndex:objc_msgSend(@"sync_flag", "length")];
          if ([v10 length]) {
            [v0 addObject:v10];
          }
        }
      }
      uint64_t v6 = [v4 countByEnumeratingWithState:&v12 objects:v16 count:16];
    }
    while (v6);
  }

  return v0;
}

void sub_19CF65090(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  objc_destroyWeak(v21);
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19CF65640(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  objc_destroyWeak(v20);
  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19CF65A64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  objc_destroyWeak(v22);
  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void AFErrorEnumerate(void *a1, char a2, void *a3)
{
  v25[1] = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  id v6 = a3;
  uint64_t v7 = (void (**)(void, void, void))v6;
  if (v5 && v6)
  {
    if (a2)
    {
      v25[0] = v5;
      id v8 = [MEMORY[0x1E4F1C978] arrayWithObjects:v25 count:1];
    }
    else
    {
      id v8 = _AFErrorGetUnderlyingErrors(v5);
    }
    id v9 = v8;
    if ([v8 count])
    {
      long long v10 = 0uLL;
      do
      {
        long long v22 = v10;
        long long v23 = v10;
        long long v20 = v10;
        long long v21 = v10;
        id v11 = v9;
        uint64_t v12 = [v11 countByEnumeratingWithState:&v20 objects:v24 count:16];
        if (v12)
        {
          uint64_t v13 = v12;
          id v9 = 0;
          uint64_t v14 = *(void *)v21;
          while (2)
          {
            for (uint64_t i = 0; i != v13; ++i)
            {
              if (*(void *)v21 != v14) {
                objc_enumerationMutation(v11);
              }
              unint64_t v16 = *(void **)(*((void *)&v20 + 1) + 8 * i);
              char v19 = 0;
              ((void (**)(void, void *, char *))v7)[2](v7, v16, &v19);
              if (v19)
              {

                id v9 = v11;
                goto LABEL_25;
              }
              uint64_t v17 = _AFErrorGetUnderlyingErrors(v16);
              if ([v17 count])
              {
                if (!v9) {
                  id v9 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
                }
                [v9 addObjectsFromArray:v17];
              }
            }
            uint64_t v13 = [v11 countByEnumeratingWithState:&v20 objects:v24 count:16];
            if (v13) {
              continue;
            }
            break;
          }
        }
        else
        {
          id v9 = 0;
        }

        uint64_t v18 = [v9 count];
        long long v10 = 0uLL;
      }
      while (v18);
    }
LABEL_25:
  }
}

id _AFErrorGetUnderlyingErrors(void *a1)
{
  v9[1] = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    uint64_t v3 = [v1 userInfo];
    id v4 = [v3 objectForKey:*MEMORY[0x1E4F28A50]];

    if (v4)
    {
      v9[0] = v4;
      id v5 = [MEMORY[0x1E4F1C978] arrayWithObjects:v9 count:1];
    }
    else
    {
      id v6 = [v2 userInfo];
      uint64_t v7 = [v6 objectForKey:@"SiriUnderlyingErrors"];

      if ([v7 count]) {
        id v5 = v7;
      }
      else {
        id v5 = 0;
      }
    }
  }
  else
  {
    id v5 = 0;
  }

  return v5;
}

uint64_t AFErrorSetUnderlyingError(void *a1, void *a2, void *a3, void *a4)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v7 = a1;
  id v8 = a3;
  id v9 = a4;
  long long v10 = v9;
  if (!a2)
  {
    uint64_t v12 = AFSiriLogContextUtility;
    if (!os_log_type_enabled((os_log_t)AFSiriLogContextUtility, OS_LOG_TYPE_ERROR)) {
      goto LABEL_15;
    }
    int v15 = 136315138;
    unint64_t v16 = "AFErrorSetUnderlyingError";
    uint64_t v13 = "%s outTopLevelErrorPtr is NULL";
LABEL_14:
    _os_log_error_impl(&dword_19CF1D000, v12, OS_LOG_TYPE_ERROR, v13, (uint8_t *)&v15, 0xCu);
    goto LABEL_15;
  }
  *a2 = 0;
  if (!v7)
  {
    uint64_t v12 = AFSiriLogContextUtility;
    if (!os_log_type_enabled((os_log_t)AFSiriLogContextUtility, OS_LOG_TYPE_ERROR)) {
      goto LABEL_15;
    }
    int v15 = 136315138;
    unint64_t v16 = "AFErrorSetUnderlyingError";
    uint64_t v13 = "%s inTopLevelError is nil";
    goto LABEL_14;
  }
  if (!v8)
  {
    uint64_t v12 = AFSiriLogContextUtility;
    if (!os_log_type_enabled((os_log_t)AFSiriLogContextUtility, OS_LOG_TYPE_ERROR)) {
      goto LABEL_15;
    }
    int v15 = 136315138;
    unint64_t v16 = "AFErrorSetUnderlyingError";
    uint64_t v13 = "%s matchError block is nil";
    goto LABEL_14;
  }
  if (!v9)
  {
    uint64_t v12 = AFSiriLogContextUtility;
    if (os_log_type_enabled((os_log_t)AFSiriLogContextUtility, OS_LOG_TYPE_ERROR))
    {
      int v15 = 136315138;
      unint64_t v16 = "AFErrorSetUnderlyingError";
      uint64_t v13 = "%s buildUnderlyingError block is nil";
      goto LABEL_14;
    }
LABEL_15:
    uint64_t v11 = 0;
    goto LABEL_16;
  }
  uint64_t v11 = _AFErrorSetUnderlyingErrorRecursively(v7, a2, v8, v9);
LABEL_16:

  return v11;
}

uint64_t _AFErrorSetUnderlyingErrorRecursively(void *a1, void *a2, void *a3, void *a4)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  id v7 = a1;
  id v8 = a3;
  id v9 = a4;
  uint64_t v37 = 0;
  uint64_t v38 = &v37;
  uint64_t v39 = 0x3032000000;
  uint64_t v40 = __Block_byref_object_copy__5363;
  uint64_t v41 = __Block_byref_object_dispose__5364;
  id v42 = 0;
  if (v8[2](v8, v7))
  {
    v9[2](v9);
    id v10 = (id)objc_claimAutoreleasedReturnValue();
    if (!v10)
    {
      uint64_t v11 = AFSiriLogContextUtility;
      if (os_log_type_enabled((os_log_t)AFSiriLogContextUtility, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315138;
        os_log_t v44 = "_AFErrorSetUnderlyingErrorRecursively";
        _os_log_error_impl(&dword_19CF1D000, v11, OS_LOG_TYPE_ERROR, "%s Unable to create the new underlying error from specified block.", buf, 0xCu);
      }
      goto LABEL_10;
    }
LABEL_9:
    char v17 = 0;
    goto LABEL_12;
  }
  uint64_t v12 = [v7 userInfo];
  uint64_t v13 = [v12 objectForKey:*MEMORY[0x1E4F28A50]];

  if (v13)
  {
    id v36 = 0;
    _AFErrorSetUnderlyingErrorRecursively(v13, &v36, v8, v9);
    id v10 = v36;
  }
  else
  {
    id v10 = 0;
  }

  uint64_t v14 = [v7 userInfo];
  int v15 = [v14 objectForKey:@"SiriUnderlyingErrors"];

  v31[0] = MEMORY[0x1E4F143A8];
  v31[1] = 3221225472;
  v31[2] = ___AFErrorSetUnderlyingErrorRecursively_block_invoke;
  v31[3] = &unk_1E5925790;
  __int16 v33 = v8;
  id v34 = v9;
  uint64_t v35 = &v37;
  id v16 = v15;
  id v32 = v16;
  [v16 enumerateObjectsUsingBlock:v31];

  if (v10) {
    goto LABEL_9;
  }
LABEL_10:
  id v10 = 0;
  if (![(id)v38[5] count])
  {
    uint64_t v29 = 0;
    goto LABEL_22;
  }
  char v17 = 1;
LABEL_12:
  uint64_t v18 = [v7 userInfo];
  char v19 = (void *)[v18 mutableCopy];
  long long v20 = v19;
  if (v19) {
    id v21 = v19;
  }
  else {
    id v21 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  }
  long long v22 = v21;

  if ((v17 & 1) == 0) {
    [v22 setObject:v10 forKey:*MEMORY[0x1E4F28A50]];
  }
  if ([(id)v38[5] count])
  {
    long long v23 = (void *)[(id)v38[5] copy];
    [v22 setObject:v23 forKey:@"SiriUnderlyingErrors"];
  }
  uint64_t v24 = (void *)MEMORY[0x1E4F28C58];
  __int16 v25 = [v7 domain];
  uint64_t v26 = [v7 code];
  uint64_t v27 = (void *)[v22 copy];
  uint64_t v28 = [v24 errorWithDomain:v25 code:v26 userInfo:v27];

  if (a2) {
    *a2 = v28;
  }

  uint64_t v29 = 1;
LABEL_22:
  _Block_object_dispose(&v37, 8);

  return v29;
}

void sub_19CF6819C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__5363(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__5364(uint64_t a1)
{
}

void sub_19CF69E08(_Unwind_Exception *a1)
{
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 72));
  _Unwind_Resume(a1);
}

void AFRecordCoreDuetEventAtTimestamps(void *a1, void *a2, void *a3, void *a4, void *a5)
{
}

void _AFRecordCoreDuetEventAtTimestamps(void *a1, void *a2, void *a3, void *a4, void *a5, void *a6)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  id v11 = a1;
  id v12 = a2;
  id v13 = a3;
  id v14 = a4;
  id v15 = a5;
  id v16 = a6;
  if ([v13 isEqualToString:@"/siri/service"])
  {
    char v17 = [[AFSiriServiceEvent alloc] initWithMetadata:v14 identifier:v12];
    if (!v17)
    {
      long long v23 = AFSiriLogContextEvent;
      if (os_log_type_enabled((os_log_t)AFSiriLogContextEvent, OS_LOG_TYPE_ERROR))
      {
        int v24 = 136315138;
        __int16 v25 = "_AFRecordCoreDuetEventAtTimestamps";
        _os_log_error_impl(&dword_19CF1D000, v23, OS_LOG_TYPE_ERROR, "%s Error creating biome event", (uint8_t *)&v24, 0xCu);
      }
      goto LABEL_16;
    }
    uint64_t v18 = +[AFEventStore sharedInstance];
    char v19 = v18;
    if (v18)
    {
      if (v15 == v16)
      {
        [v18 storeSiriServiceEvent:v17 withQueue:v11 atTime:v15 withCompletionHandler:&__block_literal_global_24];
        goto LABEL_15;
      }
      long long v20 = AFSiriLogContextEvent;
      if (os_log_type_enabled((os_log_t)AFSiriLogContextEvent, OS_LOG_TYPE_ERROR))
      {
        int v24 = 136315138;
        __int16 v25 = "_AFRecordCoreDuetEventAtTimestamps";
        id v21 = "%s Biome Store APIs does not support end time for events";
LABEL_13:
        _os_log_error_impl(&dword_19CF1D000, v20, OS_LOG_TYPE_ERROR, v21, (uint8_t *)&v24, 0xCu);
      }
    }
    else
    {
      long long v20 = AFSiriLogContextEvent;
      if (os_log_type_enabled((os_log_t)AFSiriLogContextEvent, OS_LOG_TYPE_ERROR))
      {
        int v24 = 136315138;
        __int16 v25 = "_AFRecordCoreDuetEventAtTimestamps";
        id v21 = "%s Error creating biome event store";
        goto LABEL_13;
      }
    }
LABEL_15:

LABEL_16:
    goto LABEL_17;
  }
  long long v22 = AFSiriLogContextEvent;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextEvent, OS_LOG_TYPE_ERROR))
  {
    int v24 = 136315394;
    __int16 v25 = "_AFRecordCoreDuetEventAtTimestamps";
    __int16 v26 = 2112;
    id v27 = v13;
    _os_log_error_impl(&dword_19CF1D000, v22, OS_LOG_TYPE_ERROR, "%s Unsupported Biome stream %@", (uint8_t *)&v24, 0x16u);
  }
LABEL_17:
}

void AFRecordCoreDuetEventWithStream(void *a1, void *a2, void *a3, void *a4)
{
  id v7 = (void *)MEMORY[0x1E4F1C9C8];
  id v8 = a4;
  id v9 = a3;
  id v10 = a2;
  id v11 = a1;
  id v12 = [v7 date];
  _AFRecordCoreDuetEventAtTimestamps(v11, v10, v9, v8, v12, v12);
}

void AFRecordCoreDuetEvent(void *a1, void *a2, void *a3)
{
  id v5 = (void *)MEMORY[0x1E4F1C9C8];
  id v6 = a3;
  id v7 = a2;
  id v8 = a1;
  id v9 = [v5 date];
  _AFRecordCoreDuetEventAtTimestamps(v8, v7, @"/siri/ui", v6, v9, v9);
}

void AFRecordCoreDuetContext(void *a1, void *a2, void *a3)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  id v8 = [v7 objectForKeyedSubscript:@"domain"];
  id v9 = [v7 objectForKeyedSubscript:@"command"];

  id v10 = AFSiriLogContextEvent;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextEvent, OS_LOG_TYPE_DEBUG))
  {
    int v16 = 136315906;
    char v17 = "AFRecordCoreDuetContext";
    __int16 v18 = 2112;
    id v19 = v6;
    __int16 v20 = 2112;
    id v21 = v8;
    __int16 v22 = 2112;
    long long v23 = v9;
    _os_log_debug_impl(&dword_19CF1D000, v10, OS_LOG_TYPE_DEBUG, "%s Recording context event with {key: %@, domain: %@, command: %@}", (uint8_t *)&v16, 0x2Au);
  }
  id v11 = [[AFSiriServiceEvent alloc] initWithDomain:v8 identifier:v6 command:v9];
  if (v11)
  {
    id v12 = +[AFEventStore sharedInstance];
    id v13 = v12;
    if (v12)
    {
      [v12 storeSiriServiceEvent:v11 withQueue:v5 withCompletionHandler:&__block_literal_global_5758];
    }
    else
    {
      id v15 = AFSiriLogContextEvent;
      if (os_log_type_enabled((os_log_t)AFSiriLogContextEvent, OS_LOG_TYPE_ERROR))
      {
        int v16 = 136315138;
        char v17 = "AFRecordCoreDuetContext";
        _os_log_error_impl(&dword_19CF1D000, v15, OS_LOG_TYPE_ERROR, "%s Error creating biome event store", (uint8_t *)&v16, 0xCu);
      }
    }
  }
  else
  {
    id v14 = AFSiriLogContextEvent;
    if (os_log_type_enabled((os_log_t)AFSiriLogContextEvent, OS_LOG_TYPE_ERROR))
    {
      int v16 = 136315138;
      char v17 = "AFRecordCoreDuetContext";
      _os_log_error_impl(&dword_19CF1D000, v14, OS_LOG_TYPE_ERROR, "%s Error creating biome event", (uint8_t *)&v16, 0xCu);
    }
  }
}

void __AFRecordCoreDuetContext_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  id v2 = a2;
  if (v2)
  {
    uint64_t v3 = AFSiriLogContextEvent;
    if (os_log_type_enabled((os_log_t)AFSiriLogContextEvent, OS_LOG_TYPE_ERROR))
    {
      int v4 = 136315394;
      id v5 = "AFRecordCoreDuetContext_block_invoke";
      __int16 v6 = 2112;
      id v7 = v2;
      _os_log_error_impl(&dword_19CF1D000, v3, OS_LOG_TYPE_ERROR, "%s Error recoding events: %@", (uint8_t *)&v4, 0x16u);
    }
  }
}

void AFDeleteCoreDuetEventsInStream(void *a1, void *a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  if (([v4 isEqualToString:@"/siri/service"] & 1) != 0
    || ([v4 isEqualToString:@"/bluetooth/dataDictionary"] & 1) != 0)
  {
    id v5 = +[AFEventStore sharedInstance];
    if (v5)
    {
      if ([v4 isEqualToString:@"/siri/service"])
      {
        [v5 deleteAllSiriServiceEventsWithQueue:v3 withCompletionHandler:&__block_literal_global_17];
LABEL_13:

        goto LABEL_14;
      }
      if ([v4 isEqualToString:@"/bluetooth/dataDictionary"])
      {
        [v5 deleteAllBTEventsWithQueue:v3 withCompletionHandler:&__block_literal_global_20];
        goto LABEL_13;
      }
      uint64_t v11 = AFSiriLogContextEvent;
      if (!os_log_type_enabled((os_log_t)AFSiriLogContextEvent, OS_LOG_TYPE_ERROR)) {
        goto LABEL_13;
      }
      int v12 = 136315394;
      id v13 = "AFDeleteCoreDuetEventsInStream";
      __int16 v14 = 2112;
      id v15 = v4;
      id v7 = "%s Unknown Biome stream: %@";
      uint64_t v8 = v11;
      uint32_t v9 = 22;
    }
    else
    {
      uint64_t v6 = AFSiriLogContextEvent;
      if (!os_log_type_enabled((os_log_t)AFSiriLogContextEvent, OS_LOG_TYPE_ERROR)) {
        goto LABEL_13;
      }
      int v12 = 136315138;
      id v13 = "AFDeleteCoreDuetEventsInStream";
      id v7 = "%s Error creating biome event store";
      uint64_t v8 = v6;
      uint32_t v9 = 12;
    }
    _os_log_error_impl(&dword_19CF1D000, v8, OS_LOG_TYPE_ERROR, v7, (uint8_t *)&v12, v9);
    goto LABEL_13;
  }
  id v10 = AFSiriLogContextEvent;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextEvent, OS_LOG_TYPE_ERROR))
  {
    int v12 = 136315394;
    id v13 = "AFDeleteCoreDuetEventsInStream";
    __int16 v14 = 2112;
    id v15 = v4;
    _os_log_error_impl(&dword_19CF1D000, v10, OS_LOG_TYPE_ERROR, "%s Unsupported Biome stream %@", (uint8_t *)&v12, 0x16u);
  }
LABEL_14:
}

void __AFDeleteCoreDuetEventsInStream_block_invoke_18(uint64_t a1, void *a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  id v2 = a2;
  id v3 = AFSiriLogContextEvent;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextEvent, OS_LOG_TYPE_ERROR))
  {
    int v4 = 136315394;
    id v5 = "AFDeleteCoreDuetEventsInStream_block_invoke";
    __int16 v6 = 2112;
    id v7 = v2;
    _os_log_error_impl(&dword_19CF1D000, v3, OS_LOG_TYPE_ERROR, "%s Error deleting BT event: %@", (uint8_t *)&v4, 0x16u);
  }
}

void __AFDeleteCoreDuetEventsInStream_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  id v2 = a2;
  id v3 = AFSiriLogContextEvent;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextEvent, OS_LOG_TYPE_ERROR))
  {
    int v4 = 136315394;
    id v5 = "AFDeleteCoreDuetEventsInStream_block_invoke";
    __int16 v6 = 2112;
    id v7 = v2;
    _os_log_error_impl(&dword_19CF1D000, v3, OS_LOG_TYPE_ERROR, "%s Error deleting SiriService event: %@", (uint8_t *)&v4, 0x16u);
  }
}

id AFBTHeadunitsConnectedInLast24Hours()
{
  id v0 = +[AFEventStore sharedInstance];
  uint64_t v4 = 0;
  id v5 = &v4;
  uint64_t v6 = 0x3032000000;
  id v7 = __Block_byref_object_copy__5770;
  uint64_t v8 = __Block_byref_object_dispose__5771;
  id v9 = 0;
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 3221225472;
  v3[2] = __AFBTHeadunitsConnectedInLast24Hours_block_invoke;
  v3[3] = &unk_1E5928918;
  v3[4] = &v4;
  [v0 fetchHeadunitsConnectedInLast24HoursWithCompletionHandler:v3];
  id v1 = (id)v5[5];
  _Block_object_dispose(&v4, 8);

  return v1;
}

void sub_19CF6B474(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__5770(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__5771(uint64_t a1)
{
}

void __AFBTHeadunitsConnectedInLast24Hours_block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  id v6 = a2;
  id v7 = a3;
  if (v7)
  {
    uint64_t v8 = AFSiriLogContextEvent;
    if (os_log_type_enabled((os_log_t)AFSiriLogContextEvent, OS_LOG_TYPE_ERROR))
    {
      int v9 = 136315394;
      id v10 = "AFBTHeadunitsConnectedInLast24Hours_block_invoke";
      __int16 v11 = 2112;
      id v12 = v7;
      _os_log_error_impl(&dword_19CF1D000, v8, OS_LOG_TYPE_ERROR, "%s Error fetching BT events: %@", (uint8_t *)&v9, 0x16u);
    }
  }
  else
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), a2);
  }
}

id AFAppleAudioDeviceConnectedInLast24Hours()
{
  id v0 = +[AFEventStore sharedInstance];
  uint64_t v4 = 0;
  id v5 = &v4;
  uint64_t v6 = 0x3032000000;
  id v7 = __Block_byref_object_copy__5770;
  uint64_t v8 = __Block_byref_object_dispose__5771;
  id v9 = 0;
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 3221225472;
  v3[2] = __AFAppleAudioDeviceConnectedInLast24Hours_block_invoke;
  v3[3] = &unk_1E59258B8;
  v3[4] = &v4;
  [v0 fetchAppleAudioDeviceConnectedInLast24HoursWithCompletionHandler:v3];
  id v1 = (id)v5[5];
  _Block_object_dispose(&v4, 8);

  return v1;
}

void sub_19CF6B69C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __AFAppleAudioDeviceConnectedInLast24Hours_block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    id v7 = AFSiriLogContextEvent;
    if (os_log_type_enabled((os_log_t)AFSiriLogContextEvent, OS_LOG_TYPE_ERROR))
    {
      int v11 = 136315394;
      id v12 = "AFAppleAudioDeviceConnectedInLast24Hours_block_invoke";
      __int16 v13 = 2112;
      id v14 = v6;
      _os_log_error_impl(&dword_19CF1D000, v7, OS_LOG_TYPE_ERROR, "%s Error fetching BT events: %@", (uint8_t *)&v11, 0x16u);
    }
  }
  else
  {
    uint64_t v8 = [v5 allObjects];
    uint64_t v9 = *(void *)(*(void *)(a1 + 32) + 8);
    id v10 = *(void **)(v9 + 40);
    *(void *)(v9 + 40) = v8;
  }
}

id AFFileURLForConversationWithIdentifier(void *a1)
{
  id v1 = a1;
  id v2 = CPSharedResourcesDirectory();
  id v3 = [v2 stringByAppendingPathComponent:@"Library"];
  uint64_t v4 = [v3 stringByAppendingPathComponent:@"Assistant"];

  id v5 = [MEMORY[0x1E4F1CB10] fileURLWithPath:v4 isDirectory:1];

  id v6 = [v5 URLByAppendingPathComponent:v1 isDirectory:0];

  return v6;
}

__CFString *AFActivationEventGetDescription(unint64_t a1)
{
  if (a1 > 0xB) {
    return @"Unknown";
  }
  else {
    return off_1E5925920[a1];
  }
}

uint64_t AFSpeechEventIsBluetooth(unint64_t a1)
{
  return (a1 < 0x1C) & (0x9C0C408u >> a1);
}

uint64_t AFSpeechEventIsRemotePlugin(unint64_t a1)
{
  return (a1 < 0x1C) & (0x9C1C400u >> a1);
}

uint64_t AFSpeechEventIsVoiceTrigger(unint64_t a1)
{
  return (a1 < 0x20) & (0x80018900 >> a1);
}

uint64_t AFSpeechEventIsTVRemote(unint64_t a1)
{
  return (a1 < 0x19) & (0x1C00400u >> a1);
}

uint64_t AFSpeechEventIsHardwareTrigger(unint64_t a1)
{
  return (a1 < 0x1C) & (0x800460Eu >> a1);
}

__CFString *AFSpeechEventGetDescription(unint64_t a1)
{
  if (a1 > 0x24) {
    return @"Unknown";
  }
  else {
    return off_1E5925980[a1];
  }
}

__CFString *AFDescriptionOfAFQuickStopActions(uint64_t a1)
{
  if (a1)
  {
    __int16 v1 = a1;
    id v2 = (void *)[objc_alloc(MEMORY[0x1E4F1CA48]) initWithCapacity:4];
    id v3 = v2;
    if (v1)
    {
      [v2 addObject:@"AFQuickStopActionDismissFiringAlarm"];
      if ((v1 & 2) == 0)
      {
LABEL_4:
        if ((v1 & 4) == 0) {
          goto LABEL_5;
        }
        goto LABEL_17;
      }
    }
    else if ((v1 & 2) == 0)
    {
      goto LABEL_4;
    }
    [v3 addObject:@"AFQuickStopActionDismissFiringTimer"];
    if ((v1 & 4) == 0)
    {
LABEL_5:
      if ((v1 & 8) == 0) {
        goto LABEL_6;
      }
      goto LABEL_18;
    }
LABEL_17:
    [v3 addObject:@"AFQuickStopActionInterruptSiriVoiceOutput"];
    if ((v1 & 8) == 0)
    {
LABEL_6:
      if ((v1 & 0x10) == 0) {
        goto LABEL_7;
      }
      goto LABEL_19;
    }
LABEL_18:
    [v3 addObject:@"AFQuickStopActionStopMediaPlayback"];
    if ((v1 & 0x10) == 0)
    {
LABEL_7:
      if ((v1 & 0x20) == 0) {
        goto LABEL_8;
      }
      goto LABEL_20;
    }
LABEL_19:
    [v3 addObject:@"AFQuickStopActionStopHomeAnnouncementPlayback"];
    if ((v1 & 0x20) == 0)
    {
LABEL_8:
      if ((v1 & 0x400) == 0)
      {
LABEL_10:
        uint64_t v4 = [v3 componentsJoinedByString:@"|"];

        goto LABEL_12;
      }
LABEL_9:
      [v3 addObject:@"AFQuickSTopActionPromptForConfirmation"];
      goto LABEL_10;
    }
LABEL_20:
    [v3 addObject:@"AFQuickStopActionCancelRunningTimer"];
    if ((v1 & 0x400) == 0) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  uint64_t v4 = @"AFQuickStopActionNone";
LABEL_12:
  return v4;
}

void __af_mergedUtteranceDictionary_block_invoke(uint64_t a1, void *a2, void *a3, unsigned char *a4)
{
  id v7 = a2;
  id v8 = a3;
  *a4 = 0;
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 3221225472;
  v12[2] = __af_mergedUtteranceDictionary_block_invoke_2;
  v12[3] = &unk_1E5925B18;
  id v13 = v8;
  uint64_t v9 = *(void **)(a1 + 32);
  id v14 = *(id *)(a1 + 40);
  id v15 = v7;
  id v10 = v7;
  id v11 = v8;
  [v9 enumerateKeysAndObjectsUsingBlock:v12];
}

id af_bestTokenInterpretation(void *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  id v2 = objc_alloc_init(MEMORY[0x1E4F28E78]);
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  id v3 = v1;
  uint64_t v4 = [v3 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (!v4)
  {

LABEL_14:
    objc_msgSend(v2, "appendString:", @" ", (void)v12);
    goto LABEL_15;
  }
  uint64_t v5 = v4;
  char v6 = 0;
  uint64_t v7 = *(void *)v13;
  do
  {
    for (uint64_t i = 0; i != v5; ++i)
    {
      if (*(void *)v13 != v7) {
        objc_enumerationMutation(v3);
      }
      uint64_t v9 = *(void **)(*((void *)&v12 + 1) + 8 * i);
      if (!((objc_msgSend(v2, "length", (void)v12) == 0) | v6 & 1)
        && ([v9 removeSpaceBefore] & 1) == 0)
      {
        [v2 appendString:@" "];
      }
      id v10 = [v9 text];
      [v2 appendString:v10];

      char v6 = [v9 removeSpaceAfter];
    }
    uint64_t v5 = [v3 countByEnumeratingWithState:&v12 objects:v16 count:16];
  }
  while (v5);

  if ((v6 & 1) == 0) {
    goto LABEL_14;
  }
LABEL_15:

  return v2;
}

void __af_mergedUtteranceDictionary_block_invoke_2(uint64_t a1, void *a2, void *a3, unsigned char *a4)
{
  *a4 = 0;
  char v6 = (objc_class *)MEMORY[0x1E4F1CA60];
  id v7 = a3;
  id v8 = a2;
  id v35 = objc_alloc_init(v6);
  uint64_t v9 = [*(id *)(a1 + 32) objectForKey:@"min"];
  int v10 = [v9 intValue];

  id v11 = [v7 objectForKey:@"min"];
  int v12 = [v11 intValue];

  if (v10 >= v12) {
    int v13 = v12;
  }
  else {
    int v13 = v10;
  }
  long long v14 = [MEMORY[0x1E4F28ED0] numberWithInteger:v13];
  [v35 setObject:v14 forKey:@"min"];

  long long v15 = [*(id *)(a1 + 32) objectForKey:@"max"];
  int v16 = [v15 intValue];

  uint64_t v17 = [v7 objectForKey:@"max"];
  int v18 = [v17 intValue];

  if (v16 <= v18) {
    int v19 = v18;
  }
  else {
    int v19 = v16;
  }
  __int16 v20 = [MEMORY[0x1E4F28ED0] numberWithInteger:v19];
  [v35 setObject:v20 forKey:@"max"];

  id v21 = [*(id *)(a1 + 32) objectForKey:@"sum"];
  int v22 = [v21 intValue];

  long long v23 = [v7 objectForKey:@"sum"];
  uint64_t v24 = (int)[v23 intValue];

  uint64_t v25 = v24 + v22;
  __int16 v26 = [MEMORY[0x1E4F28ED0] numberWithInteger:v25];
  [v35 setObject:v26 forKey:@"sum"];

  id v27 = [*(id *)(a1 + 32) objectForKey:@"count"];
  LODWORD(v24) = [v27 intValue];

  uint64_t v28 = [v7 objectForKey:@"count"];

  uint64_t v29 = (int)[v28 intValue];
  uint64_t v30 = v29 + (int)v24;
  __int16 v31 = [MEMORY[0x1E4F28ED0] numberWithInteger:v30];
  [v35 setObject:v31 forKey:@"count"];

  id v32 = [MEMORY[0x1E4F28ED0] numberWithInteger:v25 / v30];
  [v35 setObject:v32 forKey:@"avg"];

  __int16 v33 = *(void **)(a1 + 40);
  id v34 = [*(id *)(a1 + 48) stringByAppendingString:v8];

  [v33 setObject:v35 forKey:v34];
}

void sub_19CF75374(_Unwind_Exception *a1)
{
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 72));
  _Unwind_Resume(a1);
}

BOOL AFSiriUserNotificationAnnouncementSpeakingStateGetIsValid(unint64_t a1)
{
  return a1 < 6;
}

BOOL AFSiriUserNotificationAnnouncementSpeakingStateGetIsValidAndSpecified(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 5;
}

__CFString *AFSiriUserNotificationAnnouncementSpeakingStateGetName(unint64_t a1)
{
  if (a1 > 5) {
    return @"(unknown)";
  }
  else {
    return *(&off_1E5925C68 + a1);
  }
}

uint64_t AFSiriUserNotificationAnnouncementSpeakingStateGetFromName(void *a1)
{
  id v1 = a1;
  if ([v1 length])
  {
    if (AFSiriUserNotificationAnnouncementSpeakingStateGetFromName_onceToken != -1) {
      dispatch_once(&AFSiriUserNotificationAnnouncementSpeakingStateGetFromName_onceToken, &__block_literal_global_6947);
    }
    id v2 = [(id)AFSiriUserNotificationAnnouncementSpeakingStateGetFromName_map objectForKey:v1];
    uint64_t v3 = [v2 integerValue];
  }
  else
  {
    uint64_t v3 = 0;
  }

  return v3;
}

void __AFSiriUserNotificationAnnouncementSpeakingStateGetFromName_block_invoke()
{
  id v0 = (void *)AFSiriUserNotificationAnnouncementSpeakingStateGetFromName_map;
  AFSiriUserNotificationAnnouncementSpeakingStateGetFromName_map = (uint64_t)&unk_1EEE98810;
}

id getBMSiriServiceClass()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  id v0 = (void *)getBMSiriServiceClass_softClass;
  uint64_t v7 = getBMSiriServiceClass_softClass;
  if (!getBMSiriServiceClass_softClass)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = __getBMSiriServiceClass_block_invoke;
    v3[3] = &unk_1E592C0B0;
    v3[4] = &v4;
    __getBMSiriServiceClass_block_invoke((uint64_t)v3);
    id v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_19CF77268(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getBMSiriServiceClass_block_invoke(uint64_t a1)
{
  if (!BiomeLibraryLibraryCore_frameworkLibrary) {
    BiomeLibraryLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  Class result = objc_getClass("BMSiriService");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getBMSiriServiceClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __BiomeLibraryLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  BiomeLibraryLibraryCore_frameworkLibrary = result;
  return result;
}

BOOL strictValidationOfObjectWithClassType(void *a1, void *a2)
{
  id v3 = a1;
  uint64_t v4 = a2;
  uint64_t v5 = v4;
  BOOL v6 = 0;
  if (v3)
  {
    NSClassFromString(v4);
    if (objc_opt_isKindOfClass()) {
      BOOL v6 = 1;
    }
  }

  return v6;
}

void sub_19CF7B19C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__7905(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__7906(uint64_t a1)
{
}

id AFSettingsServiceXPCInterface()
{
  v100[2] = *MEMORY[0x1E4F143B8];
  id v0 = [MEMORY[0x1E4F29280] interfaceWithProtocol:&unk_1EEEE6A08];
  id v1 = (void *)MEMORY[0x1E4F1CAD0];
  v100[0] = objc_opt_class();
  v100[1] = objc_opt_class();
  id v2 = [MEMORY[0x1E4F1C978] arrayWithObjects:v100 count:2];
  id v3 = [v1 setWithArray:v2];
  [v0 setClasses:v3 forSelector:sel_getAvailableVoicesIncludingAssetInfo_completion_ argumentIndex:0 ofReply:1];

  uint64_t v4 = (void *)MEMORY[0x1E4F1CAD0];
  v99[0] = objc_opt_class();
  v99[1] = objc_opt_class();
  v99[2] = objc_opt_class();
  uint64_t v5 = [MEMORY[0x1E4F1C978] arrayWithObjects:v99 count:3];
  BOOL v6 = [v4 setWithArray:v5];
  [v0 setClasses:v6 forSelector:sel_fetchEventRecordsFromAnalyticsStoreAtPath_completion_ argumentIndex:0 ofReply:1];

  uint64_t v7 = (void *)MEMORY[0x1E4F1CAD0];
  v98[0] = objc_opt_class();
  v98[1] = objc_opt_class();
  id v8 = [MEMORY[0x1E4F1C978] arrayWithObjects:v98 count:2];
  uint64_t v9 = [v7 setWithArray:v8];
  [v0 setClasses:v9 forSelector:sel_fetchExperimentConfigurationsWithCompletion_ argumentIndex:0 ofReply:1];

  int v10 = (void *)MEMORY[0x1E4F1CAD0];
  v97[0] = objc_opt_class();
  v97[1] = objc_opt_class();
  id v11 = [MEMORY[0x1E4F1C978] arrayWithObjects:v97 count:2];
  int v12 = [v10 setWithArray:v11];
  [v0 setClasses:v12 forSelector:sel_getConnectedBluetoothDeviceInfoArrayWithCompletion_ argumentIndex:0 ofReply:1];

  int v13 = (void *)MEMORY[0x1E4F1CAD0];
  v96[0] = objc_opt_class();
  v96[1] = objc_opt_class();
  long long v14 = [MEMORY[0x1E4F1C978] arrayWithObjects:v96 count:2];
  long long v15 = [v13 setWithArray:v14];
  [v0 setClasses:v15 forSelector:sel_getPairedBluetoothDeviceInfoArrayWithCompletion_ argumentIndex:0 ofReply:1];

  int v16 = (void *)MEMORY[0x1E4F1CAD0];
  v95[0] = objc_opt_class();
  v95[1] = objc_opt_class();
  uint64_t v17 = [MEMORY[0x1E4F1C978] arrayWithObjects:v95 count:2];
  int v18 = [v16 setWithArray:v17];
  [v0 setClasses:v18 forSelector:sel_getCrossDeviceContextWithCompletion_ argumentIndex:0 ofReply:1];

  int v19 = (void *)MEMORY[0x1E4F1CAD0];
  v94[0] = objc_opt_class();
  v94[1] = objc_opt_class();
  __int16 v20 = [MEMORY[0x1E4F1C978] arrayWithObjects:v94 count:2];
  id v21 = [v19 setWithArray:v20];
  [v0 setClasses:v21 forSelector:sel_getCurrentContextSnapshotWithCompletion_ argumentIndex:0 ofReply:1];

  int v22 = (void *)MEMORY[0x1E4F1CAD0];
  v93[0] = objc_opt_class();
  v93[1] = objc_opt_class();
  long long v23 = [MEMORY[0x1E4F1C978] arrayWithObjects:v93 count:2];
  uint64_t v24 = [v22 setWithArray:v23];
  [v0 setClasses:v24 forSelector:sel_pushMyriadAdvertisementContext_completionHandler_ argumentIndex:0 ofReply:1];

  uint64_t v25 = (void *)MEMORY[0x1E4F1CAD0];
  v92[0] = objc_opt_class();
  v92[1] = objc_opt_class();
  __int16 v26 = [MEMORY[0x1E4F1C978] arrayWithObjects:v92 count:2];
  id v27 = [v25 setWithArray:v26];
  [v0 setClasses:v27 forSelector:sel_pushSCDAAdvertisementContext_completionHandler_ argumentIndex:0 ofReply:1];

  uint64_t v28 = (void *)MEMORY[0x1E4F1CAD0];
  v91[0] = objc_opt_class();
  v91[1] = objc_opt_class();
  uint64_t v29 = [MEMORY[0x1E4F1C978] arrayWithObjects:v91 count:2];
  uint64_t v30 = [v28 setWithArray:v29];
  [v0 setClasses:v30 forSelector:sel_getContextCollectorsInfoWithCompletion_ argumentIndex:0 ofReply:1];

  __int16 v31 = (void *)MEMORY[0x1E4F1CAD0];
  v90[0] = objc_opt_class();
  v90[1] = objc_opt_class();
  id v32 = [MEMORY[0x1E4F1C978] arrayWithObjects:v90 count:2];
  __int16 v33 = [v31 setWithArray:v32];
  [v0 setClasses:v33 forSelector:sel_getManagedLocalAndRemotePeerInfoWithCompletion_ argumentIndex:1 ofReply:1];

  id v34 = (void *)MEMORY[0x1E4F1CAD0];
  v89[0] = objc_opt_class();
  v89[1] = objc_opt_class();
  id v35 = [MEMORY[0x1E4F1C978] arrayWithObjects:v89 count:2];
  id v36 = [v34 setWithArray:v35];
  [v0 setClasses:v36 forSelector:sel_getProximityTuplesWithCompletion_ argumentIndex:0 ofReply:1];

  uint64_t v37 = (void *)MEMORY[0x1E4F1CAD0];
  v88[0] = objc_opt_class();
  v88[1] = objc_opt_class();
  v88[2] = objc_opt_class();
  v88[3] = objc_opt_class();
  uint64_t v38 = [MEMORY[0x1E4F1C978] arrayWithObjects:v88 count:4];
  uint64_t v39 = [v37 setWithArray:v38];
  [v0 setClasses:v39 forSelector:sel_getCapabilitiesDataFromReachableDevicesWithCompletion_ argumentIndex:0 ofReply:1];

  uint64_t v40 = (void *)MEMORY[0x1E4F1CAD0];
  v87[0] = objc_opt_class();
  v87[1] = objc_opt_class();
  v87[2] = objc_opt_class();
  uint64_t v41 = [MEMORY[0x1E4F1C978] arrayWithObjects:v87 count:3];
  id v42 = [v40 setWithArray:v41];
  [v0 setClasses:v42 forSelector:sel_triggerABCForType_subType_context_completionHandler_ argumentIndex:0 ofReply:0];

  v43 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v86 = objc_opt_class();
  os_log_t v44 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v86 count:1];
  uint64_t v45 = [v43 setWithArray:v44];
  [v0 setClasses:v45 forSelector:sel_getCurrentAccessoryInfoWithCompletion_ argumentIndex:0 ofReply:1];

  os_log_t v46 = (void *)MEMORY[0x1E4F1CAD0];
  v85[0] = objc_opt_class();
  v85[1] = objc_opt_class();
  v85[2] = objc_opt_class();
  v85[3] = objc_opt_class();
  v85[4] = objc_opt_class();
  v85[5] = objc_opt_class();
  v47 = [MEMORY[0x1E4F1C978] arrayWithObjects:v85 count:6];
  os_log_t v48 = [v46 setWithArray:v47];
  [v0 setClasses:v48 forSelector:sel_getAssistantIsEnabledForDeviceWithSiriInfo_withCompletion_ argumentIndex:0 ofReply:0];

  if (objc_opt_class() && objc_opt_class() && objc_opt_class())
  {
    v49 = (void *)MEMORY[0x1E4F1CAD0];
    v84[0] = objc_opt_class();
    v84[1] = objc_opt_class();
    v84[2] = objc_opt_class();
    v84[3] = objc_opt_class();
    v84[4] = objc_opt_class();
    v84[5] = objc_opt_class();
    v84[6] = objc_opt_class();
    v84[7] = objc_opt_class();
    v84[8] = objc_opt_class();
    os_log_t v50 = (void *)MEMORY[0x1E4F1C978];
    v51 = v84;
    uint64_t v52 = 9;
  }
  else
  {
    v53 = (void *)AFSiriLogContextService;
    if (os_log_type_enabled((os_log_t)AFSiriLogContextService, OS_LOG_TYPE_INFO))
    {
      os_log_t v54 = v53;
      v55 = objc_opt_class();
      id v71 = v55;
      os_log_t v56 = objc_opt_class();
      id v57 = v56;
      *(_DWORD *)buf = 136315906;
      v77 = "AFSettingsServiceXPCInterface";
      __int16 v78 = 2112;
      v79 = v55;
      __int16 v80 = 2112;
      v81 = v56;
      __int16 v82 = 2112;
      id v83 = (id)objc_opt_class();
      id v58 = v83;
      _os_log_impl(&dword_19CF1D000, v54, OS_LOG_TYPE_INFO, "%s Found nil SCDAF Class: %@, %@, %@.", buf, 0x2Au);
    }
    v49 = (void *)MEMORY[0x1E4F1CAD0];
    v75[0] = objc_opt_class();
    v75[1] = objc_opt_class();
    v75[2] = objc_opt_class();
    v75[3] = objc_opt_class();
    v75[4] = objc_opt_class();
    v75[5] = objc_opt_class();
    os_log_t v50 = (void *)MEMORY[0x1E4F1C978];
    v51 = v75;
    uint64_t v52 = 6;
  }
  v59 = objc_msgSend(v50, "arrayWithObjects:count:", v51, v52, v71);
  os_log_t v60 = [v49 setWithArray:v59];
  [v0 setClasses:v60 forSelector:sel_publishFeedbackArbitrationParticipation_ argumentIndex:0 ofReply:0];

  v61 = (void *)MEMORY[0x1E4F1CAD0];
  v74[0] = objc_opt_class();
  v74[1] = objc_opt_class();
  v62 = [MEMORY[0x1E4F1C978] arrayWithObjects:v74 count:2];
  v63 = [v61 setWithArray:v62];
  [v0 setClasses:v63 forSelector:sel_getPersonalMultiUserDeviceIdentifiers_ argumentIndex:0 ofReply:1];

  v64 = (void *)MEMORY[0x1E4F1CAD0];
  v73[0] = objc_opt_class();
  v73[1] = objc_opt_class();
  v65 = [MEMORY[0x1E4F1C978] arrayWithObjects:v73 count:2];
  v66 = [v64 setWithArray:v65];
  [v0 setClasses:v66 forSelector:sel_multiUserCompanionDeviceIdentifiers_ argumentIndex:0 ofReply:1];

  v67 = (void *)MEMORY[0x1E4F1CAD0];
  v72[0] = objc_opt_class();
  v72[1] = objc_opt_class();
  v72[2] = objc_opt_class();
  v68 = [MEMORY[0x1E4F1C978] arrayWithObjects:v72 count:3];
  v69 = [v67 setWithArray:v68];
  [v0 setClasses:v69 forSelector:sel_getMultiUserCompanionInfo_ argumentIndex:0 ofReply:1];

  return v0;
}

id AFSettingsServiceDelegateXPCInterface()
{
  v5[6] = *MEMORY[0x1E4F143B8];
  id v0 = [MEMORY[0x1E4F29280] interfaceWithProtocol:&unk_1EEEBD770];
  id v1 = (void *)MEMORY[0x1E4F1CAD0];
  v5[0] = objc_opt_class();
  v5[1] = objc_opt_class();
  v5[2] = objc_opt_class();
  void v5[3] = objc_opt_class();
  v5[4] = objc_opt_class();
  v5[5] = objc_opt_class();
  id v2 = [MEMORY[0x1E4F1C978] arrayWithObjects:v5 count:6];
  id v3 = [v1 setWithArray:v2];
  [v0 setClasses:v3 forSelector:sel_syncVerificationPartialResult_ argumentIndex:0 ofReply:0];

  return v0;
}

BOOL AFDeviceRingerSwitchStateGetIsValid(unint64_t a1)
{
  return a1 < 3;
}

BOOL AFDeviceRingerSwitchStateGetIsValidAndSpecified(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 2;
}

__CFString *AFDeviceRingerSwitchStateGetName(unint64_t a1)
{
  if (a1 > 2) {
    return @"(unknown)";
  }
  else {
    return off_1E5925DC0[a1];
  }
}

uint64_t AFDeviceRingerSwitchStateGetFromName(void *a1)
{
  id v1 = a1;
  if ([v1 length])
  {
    if (AFDeviceRingerSwitchStateGetFromName_onceToken != -1) {
      dispatch_once(&AFDeviceRingerSwitchStateGetFromName_onceToken, &__block_literal_global_8207);
    }
    id v2 = [(id)AFDeviceRingerSwitchStateGetFromName_map objectForKey:v1];
    uint64_t v3 = [v2 integerValue];
  }
  else
  {
    uint64_t v3 = 0;
  }

  return v3;
}

void __AFDeviceRingerSwitchStateGetFromName_block_invoke()
{
  id v0 = (void *)AFDeviceRingerSwitchStateGetFromName_map;
  AFDeviceRingerSwitchStateGetFromName_map = (uint64_t)&unk_1EEE98838;
}

void _AFPreferencesNotificationCenterTrampoline(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = AFSiriLogContextConnection;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
  {
    int v6 = 136315394;
    uint64_t v7 = "_AFPreferencesNotificationCenterTrampoline";
    __int16 v8 = 2112;
    uint64_t v9 = a3;
    _os_log_impl(&dword_19CF1D000, v4, OS_LOG_TYPE_INFO, "%s Received Darwin notification %@; reposting on internal AFPreferencesNotificationCenter",
      (uint8_t *)&v6,
      0x16u);
  }
  uint64_t v5 = _AFPreferencesNotificationCenterGetSharedInstance(0);
  [v5 postNotificationName:a3 object:0];
}

BOOL AFTestRequestPathGetIsValid(unint64_t a1)
{
  return a1 < 3;
}

BOOL AFTestRequestPathGetIsValidAndSpecified(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 2;
}

__CFString *AFTestRequestPathGetName(unint64_t a1)
{
  if (a1 > 2) {
    return @"(unknown)";
  }
  else {
    return off_1E5925DD8[a1];
  }
}

uint64_t AFTestRequestPathGetFromName(void *a1)
{
  id v1 = a1;
  if ([v1 length])
  {
    if (AFTestRequestPathGetFromName_onceToken != -1) {
      dispatch_once(&AFTestRequestPathGetFromName_onceToken, &__block_literal_global_8269);
    }
    id v2 = [(id)AFTestRequestPathGetFromName_map objectForKey:v1];
    uint64_t v3 = [v2 integerValue];
  }
  else
  {
    uint64_t v3 = 0;
  }

  return v3;
}

void __AFTestRequestPathGetFromName_block_invoke()
{
  id v0 = (void *)AFTestRequestPathGetFromName_map;
  AFTestRequestPathGetFromName_map = (uint64_t)&unk_1EEE98860;
}

id AFMultiUserServiceXPCInterface()
{
  if (AFMultiUserServiceXPCInterface___onceToken != -1) {
    dispatch_once(&AFMultiUserServiceXPCInterface___onceToken, &__block_literal_global_8368);
  }
  id v0 = (void *)AFMultiUserServiceXPCInterface_interface;
  return v0;
}

void __AFMultiUserServiceXPCInterface_block_invoke()
{
  uint64_t v0 = [MEMORY[0x1E4F29280] interfaceWithProtocol:&unk_1EEEE6A68];
  id v1 = (void *)AFMultiUserServiceXPCInterface_interface;
  AFMultiUserServiceXPCInterface_interface = v0;

  id v2 = (void *)AFMultiUserServiceXPCInterface_interface;
  uint64_t v3 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v4 = objc_opt_class();
  uint64_t v5 = objc_msgSend(v3, "setWithObjects:", v4, objc_opt_class(), 0);
  [v2 setClasses:v5 forSelector:sel_getMultiUserSettingsForSharedUserID_completion_ argumentIndex:0 ofReply:1];

  int v6 = (void *)AFMultiUserServiceXPCInterface_interface;
  uint64_t v7 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v8 = objc_opt_class();
  uint64_t v9 = objc_msgSend(v7, "setWithObjects:", v8, objc_opt_class(), 0);
  [v6 setClasses:v9 forSelector:sel_getMultiUserSettingsForRecognizedUserWithCompletion_ argumentIndex:0 ofReply:1];

  uint64_t v10 = (void *)AFMultiUserServiceXPCInterface_interface;
  id v11 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v12 = objc_opt_class();
  uint64_t v13 = objc_opt_class();
  long long v14 = objc_msgSend(v11, "setWithObjects:", v12, v13, objc_opt_class(), 0);
  [v10 setClasses:v14 forSelector:sel_homeUserIdToNames_ argumentIndex:0 ofReply:1];

  long long v15 = (void *)AFMultiUserServiceXPCInterface_interface;
  int v16 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v17 = objc_opt_class();
  int v18 = objc_msgSend(v16, "setWithObjects:", v17, objc_opt_class(), 0);
  [v15 setClasses:v18 forSelector:sel_getSharedUserInfoForSharedUserID_completion_ argumentIndex:0 ofReply:1];

  int v19 = (void *)AFMultiUserServiceXPCInterface_interface;
  __int16 v20 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v21 = objc_opt_class();
  objc_msgSend(v20, "setWithObjects:", v21, objc_opt_class(), 0);
  id v22 = (id)objc_claimAutoreleasedReturnValue();
  [v19 setClasses:v22 forSelector:sel_getSharedUserInfoForiCloudAltDSID_completion_ argumentIndex:0 ofReply:1];
}

id initSIRINLUEXTERNALCDMNluResponse()
{
  if (initSIRINLUEXTERNALCDMNluResponse_sOnce != -1) {
    dispatch_once(&initSIRINLUEXTERNALCDMNluResponse_sOnce, &__block_literal_global_8420);
  }
  uint64_t v0 = (void *)classSIRINLUEXTERNALCDMNluResponse;
  return v0;
}

Class __initSIRINLUEXTERNALCDMNluResponse_block_invoke()
{
  if (SiriNLUTypesLibrary_sOnce != -1) {
    dispatch_once(&SiriNLUTypesLibrary_sOnce, &__block_literal_global_54);
  }
  Class result = objc_getClass("SIRINLUEXTERNALCDMNluResponse");
  classSIRINLUEXTERNALCDMNluResponse = (uint64_t)result;
  getSIRINLUEXTERNALCDMNluResponseClass = SIRINLUEXTERNALCDMNluResponseFunction;
  return result;
}

id SIRINLUEXTERNALCDMNluResponseFunction()
{
  return (id)classSIRINLUEXTERNALCDMNluResponse;
}

void *__SiriNLUTypesLibrary_block_invoke()
{
  Class result = dlopen("/System/Library/PrivateFrameworks/SiriNLUTypes.framework/SiriNLUTypes", 2);
  SiriNLUTypesLibrary_sLib = (uint64_t)result;
  return result;
}

__CFString *AFAnalyticsEventTypeGetName(uint64_t a1)
{
  if (a1 > 2299)
  {
    if (a1 <= 4299)
    {
      if (a1 > 3599)
      {
        if (a1 > 3899)
        {
          if (a1 > 4099)
          {
            switch(a1)
            {
              case 4100:
                id v1 = @"cloud-kit";
                break;
              case 4101:
                id v1 = @"cloud-kit.siri.change-arrived";
                break;
              case 4102:
                id v1 = @"cloud-kit.knowledge.change-arrived";
                break;
              case 4103:
                id v1 = @"cloud-kit.keychain.sync-error";
                break;
              case 4104:
                id v1 = @"cloud-kit.zone.not-found";
                break;
              case 4105:
                id v1 = @"cloud-kit.server.change-token.expired";
                break;
              case 4106:
                id v1 = @"cloud-kit.rate-limited";
                break;
              case 4107:
                id v1 = @"cloud-kit.network-failure";
                break;
              case 4108:
                id v1 = @"cloud-kit.server.record-changed";
                break;
              default:
                if (a1 == 4200)
                {
                  id v1 = @"ids";
                }
                else
                {
                  if (a1 != 4201) {
                    goto LABEL_590;
                  }
                  id v1 = @"ids.device-connection.snapshot.local";
                }
                break;
            }
          }
          else
          {
            switch(a1)
            {
              case 4000:
                id v1 = @"assistant-service";
                break;
              case 4001:
                id v1 = @"assistant-service.launch";
                break;
              case 4002:
                id v1 = @"assistant-service.exit";
                break;
              case 4003:
                id v1 = @"assistant-service.message.send";
                break;
              case 4004:
                id v1 = @"assistant-service.message.delivered";
                break;
              case 4005:
                id v1 = @"assistant-service.message.begin";
                break;
              case 4006:
                id v1 = @"assistant-service.message.end";
                break;
              case 4007:
                id v1 = @"assistant-service.command-perform.begin";
                break;
              case 4008:
                id v1 = @"assistant-service.command-perform.end";
                break;
              case 4009:
                id v1 = @"assistant-service.bundle-loading.begin";
                break;
              case 4010:
                id v1 = @"assistant-service.bundle-loading.end";
                break;
              default:
                switch(a1)
                {
                  case 3900:
                    id v1 = @"ui.card.present.begin";
                    break;
                  case 3901:
                    id v1 = @"ui.card.present.end";
                    break;
                  case 3902:
                    id v1 = @"ui.card.section-present.begin";
                    break;
                  case 3903:
                    id v1 = @"ui.card.section-present.end";
                    break;
                  case 3904:
                    id v1 = @"ui.card.engaged-with";
                    break;
                  case 3905:
                    id v1 = @"ui.card.section-engaged-with";
                    break;
                  case 3906:
                    id v1 = @"ui.card.async-card-requested";
                    break;
                  case 3907:
                    id v1 = @"ui.card.async-card-received";
                    break;
                  case 3908:
                    id v1 = @"ui.card.relationship-identified";
                    break;
                  default:
                    goto LABEL_590;
                }
                break;
            }
          }
        }
        else
        {
          switch(a1)
          {
            case 3750:
              id v1 = @"client-flow.update-scripts.script.download-from-server";
              break;
            case 3751:
              id v1 = @"client-flow.update-scripts.script.download-from-cdn";
              break;
            case 3752:
              id v1 = @"client-flow.update-scripts.script.download-failed-from-cdn.invalidUrl";
              break;
            case 3753:
              id v1 = @"client-flow.update-scripts.script.download-failed-from-cdn.networkError";
              break;
            case 3754:
              id v1 = @"client-flow.update-scripts.script.download-failed-from-cdn.hmacVerificationError";
              break;
            case 3755:
              id v1 = @"client-flow.update-scripts.script.download-failed-from-cdn.decryptionError";
              break;
            case 3756:
              id v1 = @"client-flow.update-scripts.script.download-failed-from-cdn.checksumVerificationError";
              break;
            case 3757:
            case 3758:
            case 3759:
            case 3760:
            case 3761:
            case 3762:
            case 3763:
            case 3764:
            case 3765:
            case 3766:
            case 3767:
            case 3768:
            case 3769:
            case 3770:
            case 3771:
            case 3772:
            case 3773:
            case 3774:
            case 3775:
            case 3776:
            case 3777:
            case 3778:
            case 3779:
            case 3780:
            case 3781:
            case 3782:
            case 3783:
            case 3784:
            case 3785:
            case 3786:
            case 3787:
            case 3788:
            case 3789:
            case 3790:
            case 3791:
            case 3792:
            case 3793:
            case 3794:
            case 3795:
            case 3796:
            case 3797:
            case 3798:
            case 3799:
              goto LABEL_590;
            case 3800:
              id v1 = @"client-flow.client-scripter";
              break;
            case 3801:
              id v1 = @"client-flow.client-scripter.started";
              break;
            case 3802:
              id v1 = @"client-flow.client-scripter.js-context-setup.started";
              break;
            case 3803:
              id v1 = @"client-flow.client-scripter.js-context-setup.finished";
              break;
            case 3804:
              id v1 = @"client-flow.client-scripter.js-evaluation.started-for-script";
              break;
            case 3805:
              id v1 = @"client-flow.client-scripter.js-evaluation.finished-for-script";
              break;
            case 3806:
              id v1 = @"client-flow.client-scripter.js-execution.started";
              break;
            case 3807:
              id v1 = @"client-flow.client-scripter.js-execution.finished";
              break;
            case 3808:
              id v1 = @"client-flow.client-scripter.js-execution.successful";
              break;
            case 3809:
              id v1 = @"client-flow.client-scripter.js-execution.failed";
              break;
            case 3810:
              id v1 = @"client-flow.client-scripter.script.sent-from-server";
              break;
            case 3811:
              id v1 = @"client-flow.client-scripter.script.retrieved-from-server";
              break;
            case 3812:
              id v1 = @"client-flow.client-scripter.script.loaded-from-memory-cache";
              break;
            case 3813:
              id v1 = @"client-flow.client-scripter.script.loaded-from-filesystem";
              break;
            case 3814:
              id v1 = @"client-flow.client-scripter.script.used-cached-js-context";
              break;
            case 3815:
              id v1 = @"client-flow.client-scripter.script.used-deferred-cached-js-context";
              break;
            case 3816:
              id v1 = @"client-flow.client-scripter.script.retrieval-failed";
              break;
            case 3817:
              id v1 = @"client-flow.client-scripter.script.caching-failed";
              break;
            case 3818:
              id v1 = @"client-flow.client-scripter.sent-command";
              break;
            case 3819:
              id v1 = @"client-flow.client-scripter.sent-command-async";
              break;
            case 3820:
              id v1 = @"client-flow.client-scripter.received-response";
              break;
            case 3821:
              id v1 = @"client-flow.client-scripter.js-context-created-in-warmup";
              break;
            case 3822:
              id v1 = @"client-flow.client-scripter.js-context-evaluated-script-in-warmup-for-script";
              break;
            case 3823:
              id v1 = @"client-flow.client-scripter.cached-js-context-count";
              break;
            case 3824:
              id v1 = @"client-flow.client-scripter.execution.failed";
              break;
            case 3825:
              id v1 = @"client-flow.client-scripter.connection-interrupted";
              break;
            case 3826:
              id v1 = @"client-flow.client-scripter.connection-invalidated";
              break;
            case 3827:
              id v1 = @"client-flow.client-scripter.memory-usage";
              break;
            case 3828:
              id v1 = @"client-flow.client-scripter.warmup-failed";
              break;
            default:
              switch(a1)
              {
                case 3600:
                  id v1 = @"client-flow.cf-client";
                  break;
                case 3601:
                  id v1 = @"client-flow.cf-client.scripter-load-started";
                  break;
                case 3602:
                  id v1 = @"client-flow.cf-client.scripter-load-finished";
                  break;
                case 3603:
                  id v1 = @"client-flow.cf-client.scripter-warmed-up";
                  break;
                case 3604:
                  id v1 = @"client-flow.cf-client.scripter-warmed-up-with-script-hint";
                  break;
                case 3605:
                  id v1 = @"client-flow.cf-client.execution.started";
                  break;
                case 3606:
                  id v1 = @"client-flow.cf-client.execution.finished";
                  break;
                case 3607:
                  id v1 = @"client-flow.cf-client.execution.failed";
                  break;
                case 3608:
                  id v1 = @"client-flow.cf-client.warmup.started";
                  break;
                case 3609:
                  id v1 = @"client-flow.cf-client.cache.evicted";
                  break;
                default:
                  JUMPOUT(0);
              }
              return result;
          }
        }
      }
      else if (a1 > 2799)
      {
        if (a1 > 3299)
        {
          switch(a1)
          {
            case 3300:
              id v1 = @"setup";
              break;
            case 3301:
              id v1 = @"setup.phs.bootstrapped";
              break;
            case 3302:
              id v1 = @"setup.phs.training-started";
              break;
            case 3303:
              id v1 = @"setup.phs.training-finished";
              break;
            case 3304:
              id v1 = @"setup.phs.training-canceled";
              break;
            case 3305:
              id v1 = @"setup.phs.training-phs-1";
              break;
            case 3306:
              id v1 = @"setup.phs.training-phs-2";
              break;
            case 3307:
              id v1 = @"setup.phs.training-phs-3";
              break;
            case 3308:
              id v1 = @"setup.phs.training-phs-4";
              break;
            case 3309:
              id v1 = @"setup.phs.training-phs-5";
              break;
            case 3310:
              id v1 = @"setup.phs.training-skipped";
              break;
            case 3311:
              id v1 = @"setup.phs.training-step-retry";
              break;
            default:
              switch(a1)
              {
                case 3500:
                  id v1 = @"client-flow.plugin";
                  break;
                case 3501:
                  id v1 = @"client-flow.plugin.started";
                  break;
                case 3502:
                  id v1 = @"client-flow.plugin.execution.started";
                  break;
                case 3503:
                  id v1 = @"client-flow.plugin.execution.finished";
                  break;
                case 3504:
                  id v1 = @"client-flow.plugin.execution.failed";
                  break;
                default:
                  switch(a1)
                  {
                    case 3400:
                      id v1 = @"experiment";
                      break;
                    case 3401:
                      id v1 = @"experiment.exposure.siri-vox-sounds";
                      break;
                    case 3402:
                      id v1 = @"experiment.exposure.siri-vox-tap-to-siri-behavior";
                      break;
                    case 3403:
                      id v1 = @"experiment.exposure.invocation-feedback";
                      break;
                    default:
                      goto LABEL_590;
                  }
                  break;
              }
              break;
          }
        }
        else if (a1 > 2999)
        {
          if (a1 <= 3099)
          {
            switch(a1)
            {
              case 3000:
                id v1 = @"xcode";
                goto LABEL_857;
              case 3001:
                id v1 = @"xcode.test.begin";
                goto LABEL_857;
              case 3002:
                id v1 = @"xcode.test.end";
                goto LABEL_857;
            }
            goto LABEL_590;
          }
          switch(a1)
          {
            case 3200:
              id v1 = @"settings";
              break;
            case 3201:
              id v1 = @"settings.set-language";
              break;
            case 3202:
              id v1 = @"settings.set-output-voice";
              break;
            case 3203:
              id v1 = @"settings.set-voice-feedback";
              break;
            case 3204:
              id v1 = @"settings.changed-tcc-info";
              break;
            case 3205:
              id v1 = @"settings.changed-type-to-siri";
              break;
            default:
              if (a1 == 3100)
              {
                id v1 = @"device-configuration";
              }
              else
              {
                if (a1 != 3101) {
                  goto LABEL_590;
                }
                id v1 = @"device-configuration.snapshot";
              }
              break;
          }
        }
        else
        {
          switch(a1)
          {
            case 2900:
              id v1 = @"music";
              break;
            case 2901:
              id v1 = @"music.playback.ready";
              break;
            case 2902:
              id v1 = @"music.playback.secure-key";
              break;
            case 2903:
              id v1 = @"music.playback.asset-load";
              break;
            case 2904:
              id v1 = @"music.playback.summary";
              break;
            case 2905:
              id v1 = @"music.playback.start";
              break;
            case 2906:
              id v1 = @"music.playback.queue.received";
              break;
            case 2907:
              id v1 = @"music.playback.queue.daemon.received";
              break;
            case 2908:
              id v1 = @"music.playback.alternatives";
              break;
            default:
              if (a1 == 2800)
              {
                id v1 = @"now-playing";
              }
              else
              {
                if (a1 != 2801) {
                  goto LABEL_590;
                }
                id v1 = @"now-playing.is-playing.changed";
              }
              break;
          }
        }
      }
      else if (a1 <= 2599)
      {
        if (a1 > 2401)
        {
          if (a1 <= 2499)
          {
            switch(a1)
            {
              case 2402:
                id v1 = @"ui-plugin.movies.loading-media-buttons.end";
                goto LABEL_857;
              case 2420:
                id v1 = @"ui-plugin.sports.watch-list-kit-call.begin";
                goto LABEL_857;
              case 2421:
                id v1 = @"ui-plugin.sports.watch-list-kit-call.end";
                goto LABEL_857;
            }
            goto LABEL_590;
          }
          switch(a1)
          {
            case 2500:
              id v1 = @"qa.automation";
              break;
            case 2501:
              id v1 = @"qa.automation.begin";
              break;
            case 2502:
              id v1 = @"qa.automation.end";
              break;
            case 2503:
              id v1 = @"qa.automation.mark";
              break;
            default:
              goto LABEL_590;
          }
        }
        else
        {
          switch(a1)
          {
            case 2300:
              id v1 = @"voice-trigger";
              break;
            case 2301:
              id v1 = @"voice-trigger.start";
              break;
            case 2302:
              id v1 = @"voice-trigger.fire";
              break;
            case 2303:
              id v1 = @"voice-trigger.end";
              break;
            case 2304:
              id v1 = @"voice-trigger.early-detect";
              break;
            default:
              if (a1 == 2400)
              {
                id v1 = @"ui-plugin";
              }
              else
              {
                if (a1 != 2401) {
                  goto LABEL_590;
                }
                id v1 = @"ui-plugin.movies.loading-media-buttons.begin";
              }
              break;
          }
        }
      }
      else
      {
        switch(a1)
        {
          case 2600:
            id v1 = @"cdm";
            break;
          case 2601:
            id v1 = @"cdm.nl-service.handle-command.begin";
            break;
          case 2602:
            id v1 = @"cdm.nl-service.handle-command.end";
            break;
          case 2603:
            id v1 = @"cdm.flow-service.handle-command.begin";
            break;
          case 2604:
            id v1 = @"cdm.flow-service.handle-command.end";
            break;
          case 2605:
            id v1 = @"cdm.config.asset-manager.offline-query-start";
            break;
          case 2606:
            id v1 = @"cdm.config.asset-manager.offline-query-success";
            break;
          case 2607:
            id v1 = @"cdm.config.asset-manager.offline-query-failed";
            break;
          case 2608:
            id v1 = @"cdm.config.asset-manager.online-query-start";
            break;
          case 2609:
            id v1 = @"cdm.config.asset-manager.online-query-success";
            break;
          case 2610:
            id v1 = @"cdm.config.asset-manager.online-query-failed";
            break;
          case 2611:
            id v1 = @"cdm.config.asset-manager.asset-download-start";
            break;
          case 2612:
            id v1 = @"cdm.config.asset-manager.asset-download-completed";
            break;
          case 2613:
            id v1 = @"cdm.config.asset-manager.asset-download-failed";
            break;
          case 2614:
            id v1 = @"cdm.config.asset-manager.asset-download-cancelled";
            break;
          case 2615:
            id v1 = @"cdm.config.asset-manager.asset-purged";
            break;
          case 2616:
            id v1 = @"cdm.start-speech.received";
            break;
          case 2617:
            id v1 = @"cdm.set-assistant-data.received";
            break;
          case 2618:
            id v1 = @"cdm.load-assistant.received";
            break;
          case 2619:
            id v1 = @"cdm.service.handle-command.begin";
            break;
          case 2620:
            id v1 = @"cdm.service.handle-command.end";
            break;
          default:
            switch(a1)
            {
              case 2700:
                id v1 = @"vox";
                break;
              case 2701:
                id v1 = @"vox.speech-synthesis.enqueued";
                break;
              case 2702:
                id v1 = @"vox.speech-synthesis.canceled";
                break;
              case 2703:
                id v1 = @"vox.speech-synthesis.failed";
                break;
              case 2704:
                id v1 = @"vox.speech-synthesis.finished";
                break;
              case 2705:
                id v1 = @"vox.speech-synthesis.interrupted";
                break;
              case 2706:
                id v1 = @"vox.speech-synthesis.started";
                break;
              case 2707:
                id v1 = @"vox.two-shot-sound.begin";
                break;
              case 2708:
                id v1 = @"vox.two-shot-sound.end";
                break;
              case 2709:
                id v1 = @"vox.session-inactive-sound.begin";
                break;
              case 2710:
                id v1 = @"vox.session-inactive-sound.end";
                break;
              case 2711:
                id v1 = @"vox.tap-to-siri-sound.begin";
                break;
              case 2712:
                id v1 = @"vox.tap-to-siri-sound.end";
                break;
              default:
                goto LABEL_590;
            }
            break;
        }
      }
    }
    else if (a1 > 5299)
    {
      if (a1 > 6099)
      {
        if (a1 > 6200)
        {
          if (a1 <= 6499)
          {
            if (a1 > 6300)
            {
              switch(a1)
              {
                case 6301:
                  id v1 = @"client-ad-blocker.found-match";
                  goto LABEL_857;
                case 6400:
                  id v1 = @"dialog-engine";
                  goto LABEL_857;
                case 6401:
                  id v1 = @"dialog-engine.cat-executed";
                  goto LABEL_857;
              }
            }
            else
            {
              switch(a1)
              {
                case 6201:
                  id v1 = @"donate-activity.location-search.donation-displayed-in-maps";
                  goto LABEL_857;
                case 6202:
                  id v1 = @"donate-activity.location-search.donation-selected-in-maps";
                  goto LABEL_857;
                case 6300:
                  id v1 = @"client-ad-blocker";
                  goto LABEL_857;
              }
            }
            goto LABEL_590;
          }
          switch(a1)
          {
            case 6500:
              id v1 = @"home-automation";
              break;
            case 6501:
              id v1 = @"home-automation.homekit-request.start";
              break;
            case 6502:
              id v1 = @"home-automation.homekit-request.end";
              break;
            case 6503:
              id v1 = @"home-automation.control-home.flow.start";
              break;
            case 6504:
              id v1 = @"home-automation.control-home.flow.end";
              break;
            case 6505:
              id v1 = @"home-automation.control-home.app-extension.start";
              break;
            case 6506:
              id v1 = @"home-automation.control-home.app-extension.end";
              break;
            case 6507:
              id v1 = @"home-automation.homekit-warm-up.start";
              break;
            case 6508:
              id v1 = @"home-automation.homekit-warm-up.end";
              break;
            default:
              if (a1 == 6600)
              {
                id v1 = @"post-siri-engagement";
              }
              else
              {
                if (a1 != 6601) {
                  goto LABEL_590;
                }
                id v1 = @"post-siri-engagement.activity-collection";
              }
              break;
          }
        }
        else
        {
          switch(a1)
          {
            case 6100:
              id v1 = @"multi-user";
              break;
            case 6101:
              id v1 = @"multi-user.voice-profile.upload-failure";
              break;
            case 6102:
              id v1 = @"multi-user.voice-profile.limit-reached";
              break;
            case 6103:
              id v1 = @"multi-user.manatee.key-loss";
              break;
            case 6104:
              id v1 = @"multi-user.participant.sharing-failure";
              break;
            case 6105:
              id v1 = @"multi-user.voice-profile.upload-success";
              break;
            case 6106:
              id v1 = @"multi-user.voice-profile.download-failure";
              break;
            case 6107:
              id v1 = @"multi-user.voice-profile.download-success";
              break;
            case 6108:
              id v1 = @"multi-user.setup.user.added-to-home";
              break;
            case 6109:
              id v1 = @"multi-user.setup.user.voice-id-enabled";
              break;
            case 6110:
              id v1 = @"multi-user.setup.homepod.user.added-to-home";
              break;
            case 6111:
              id v1 = @"multi-user.setup.homepod.user.voice-id-enabled";
              break;
            case 6112:
              id v1 = @"multi-user.setup.homepod.user.ready";
              break;
            case 6113:
              id v1 = @"multi-user.score.confusion";
              break;
            case 6114:
              id v1 = @"multi-user.metrics.homepod.voice-id-enablement-count";
              break;
            case 6115:
              id v1 = @"multi-user.score.donation";
              break;
            case 6116:
              id v1 = @"multi-user.score.usage";
              break;
            case 6117:
              id v1 = @"multi-user.setup.homepod.missing-home-member-settings";
              break;
            default:
              if (a1 != 6200) {
                goto LABEL_590;
              }
              id v1 = @"donate-activity";
              break;
          }
        }
      }
      else if (a1 > 5701)
      {
        switch(a1)
        {
          case 6000:
            id v1 = @"spoken-notifications";
            break;
          case 6001:
            id v1 = @"spoken-notifications-start";
            break;
          case 6002:
            id v1 = @"spoken-notifications.message-received";
            break;
          case 6003:
            id v1 = @"spoken-notifications.message-not-read-inopportune";
            break;
          case 6004:
            id v1 = @"spoken-notifications.message-not-read-muted";
            break;
          case 6005:
            id v1 = @"spoken-notifications.message-not-read-siri-in-use";
            break;
          case 6006:
            id v1 = @"spoken-notifications.message-opportune";
            break;
          case 6007:
            id v1 = @"spoken-notifications.message-readout-canceled-pull-out";
            break;
          case 6008:
            id v1 = @"spoken-notifications.message-readout-canceled-double-tap";
            break;
          case 6009:
            id v1 = @"spoken-notifications.message-readout-canceled-speech";
            break;
          case 6010:
            id v1 = @"spoken-notifications.message-readout-finished";
            break;
          case 6011:
            id v1 = @"spoken-notifications.message-reply-related";
            break;
          case 6012:
            id v1 = @"spoken-notifications.message-reply-silence";
            break;
          case 6013:
            id v1 = @"spoken-notifications.message-reply-unrelated";
            break;
          case 6014:
            id v1 = @"spoken-notifications-end";
            break;
          case 6015:
            id v1 = @"spoken-notification.bundleId";
            break;
          case 6016:
          case 6017:
          case 6018:
          case 6019:
          case 6020:
          case 6021:
          case 6022:
          case 6023:
          case 6024:
          case 6025:
          case 6026:
          case 6027:
          case 6028:
          case 6029:
            goto LABEL_590;
          case 6030:
            id v1 = @"announce-call-start";
            break;
          case 6031:
            id v1 = @"announce-call-end";
            break;
          case 6032:
            id v1 = @"announce-call.call-received";
            break;
          case 6033:
            id v1 = @"announce-call.call-announcement-readout-start";
            break;
          case 6034:
            id v1 = @"announce-call.call-announcement-readout-finished";
            break;
          case 6035:
            id v1 = @"announce-call.bargein";
            break;
          case 6036:
            id v1 = @"announce-call-responded-manually";
            break;
          default:
            if (a1 == 5702)
            {
              id v1 = @"interactive-messages.keyboard-dismissed";
            }
            else
            {
              if (a1 != 5703) {
                goto LABEL_590;
              }
              id v1 = @"interactive-messages.send-via-snippet";
            }
            break;
        }
      }
      else
      {
        if (a1 > 5599)
        {
          if (a1 <= 5601)
          {
            if (a1 == 5600) {
              id v1 = @"client-mode";
            }
            else {
              id v1 = @"client-mode.computation.evaluated-add-views";
            }
            goto LABEL_857;
          }
          if (a1 == 5602)
          {
            id v1 = @"client-mode.computation.evaluated-ace-command";
            goto LABEL_857;
          }
          if (a1 == 5701)
          {
            id v1 = @"interactive-messages.keyboard-invocation";
            goto LABEL_857;
          }
          goto LABEL_590;
        }
        switch(a1)
        {
          case 5500:
            id v1 = @"proximity.setup";
            break;
          case 5501:
            id v1 = @"proximity.setup.phs.bootstrapped";
            break;
          case 5502:
            id v1 = @"proximity.setup.phs.training-started";
            break;
          case 5503:
            id v1 = @"proximity.setup.phs.training-finished";
            break;
          case 5504:
            id v1 = @"proximity.setup.phs.training-canceled";
            break;
          case 5505:
            id v1 = @"proximity.setup.phs.training-phs-1";
            break;
          case 5506:
            id v1 = @"proximity.setup.phs.training-phs-2";
            break;
          case 5507:
            id v1 = @"proximity.setup.phs.training-phs-3";
            break;
          case 5508:
            id v1 = @"proximity.setup.phs.training-phs-4";
            break;
          case 5509:
            id v1 = @"proximity.setup.phs.training-phs-5";
            break;
          case 5510:
            id v1 = @"proximity.setup.phs.training-skipped";
            break;
          case 5511:
            id v1 = @"proximity.setup.phs.training-step-retry";
            break;
          case 5512:
            id v1 = @"proximity.setup.dismissed";
            break;
          default:
            switch(a1)
            {
              case 5400:
                id v1 = @"bluetooth-device";
                break;
              case 5401:
                id v1 = @"bluetooth-device.double-tap";
                break;
              case 5402:
                id v1 = @"bluetooth-device.voice";
                break;
              case 5403:
                id v1 = @"bluetooth-device.double-tap.false-remote-activation-decision";
                break;
              case 5404:
                id v1 = @"bluetooth-device.double-tap.false-remote-deactivation-decision";
                break;
              default:
                switch(a1)
                {
                  case 5300:
                    id v1 = @"voice-shortcut";
                    break;
                  case 5301:
                    id v1 = @"voice-shortcut.setup.started";
                    break;
                  case 5302:
                    id v1 = @"voice-shortcut.setup.finished";
                    break;
                  case 5303:
                    id v1 = @"voice-shortcut.setup.cancelled";
                    break;
                  default:
                    goto LABEL_590;
                }
                break;
            }
            break;
        }
      }
    }
    else if (a1 > 4699)
    {
      if (a1 > 4899)
      {
        if (a1 <= 5099)
        {
          if (a1 <= 4901)
          {
            if (a1 == 4900) {
              id v1 = @"call-status";
            }
            else {
              id v1 = @"call-status.audio-call.on";
            }
            goto LABEL_857;
          }
          switch(a1)
          {
            case 4902:
              id v1 = @"call-status.audio-call.off";
              goto LABEL_857;
            case 5000:
              id v1 = @"daemon.peer";
              goto LABEL_857;
            case 5001:
              id v1 = @"daemon.peer.companion.account.changed";
              goto LABEL_857;
          }
          goto LABEL_590;
        }
        switch(a1)
        {
          case 5200:
            id v1 = @"raise-to-speak";
            break;
          case 5201:
            id v1 = @"raise-to-speak.settings-enabled";
            break;
          case 5202:
            id v1 = @"raise-to-speak.settings-disabled";
            break;
          case 5203:
            id v1 = @"raise-to-speak.legacy-policy-decision";
            break;
          case 5204:
            id v1 = @"raise-to-speak.second-pass-policy-decision";
            break;
          case 5205:
            id v1 = @"raise-to-speak.silence-posterior-generator-decision";
            break;
          case 5206:
            id v1 = @"raise-to-speak.near-miss.nearby-activation";
            break;
          case 5207:
            id v1 = @"raise-to-speak.data-collection.session-mark";
            break;
          case 5208:
            id v1 = @"raise-to-speak.first-pass-policy-decision";
            break;
          default:
            if (a1 == 5100)
            {
              id v1 = @"daemon.wha";
            }
            else
            {
              if (a1 != 5101) {
                goto LABEL_590;
              }
              id v1 = @"daemon.wha.media.system.configuration.changed";
            }
            break;
        }
      }
      else
      {
        switch(a1)
        {
          case 4700:
            id v1 = @"core-speech";
            break;
          case 4701:
            id v1 = @"core-speech.audio-logging-metrics";
            break;
          case 4702:
            id v1 = @"core-speech.smart-siri-volume.fetched";
            break;
          case 4703:
            id v1 = @"core-speech.smart-language-detector.metrics";
            break;
          case 4704:
            id v1 = @"core-speech.voice-trigger.reject.info";
            break;
          case 4705:
            id v1 = @"core-speech.voice-trigger.phs-reject.info";
            break;
          case 4706:
            id v1 = @"core-speech.nvi.additional.signal";
            break;
          case 4707:
            id v1 = @"core-speech.last-process-chunk";
            break;
          case 4708:
            id v1 = @"core-speech.voice-trigger.toggle.info";
            break;
          case 4709:
            id v1 = @"core-speech.voice-trigger.phs-fa-reject.info";
            break;
          case 4710:
            id v1 = @"core-speech.audio.first-buffer.info";
            break;
          case 4711:
            id v1 = @"core-speech.audio.endpoint-buffer.info";
            break;
          case 4712:
            id v1 = @"core-speech.endpointer.latency.info";
            break;
          case 4713:
            id v1 = @"core-speech.acoustic-ftm.metrics.info";
            break;
          default:
            switch(a1)
            {
              case 4800:
                id v1 = @"daemon.peer-message";
                break;
              case 4801:
                id v1 = @"daemon.peer-message.send.begin";
                break;
              case 4802:
                id v1 = @"daemon.peer-message.send.end";
                break;
              case 4803:
                id v1 = @"daemon.peer-message.remote.execute.send.begin";
                break;
              case 4804:
                id v1 = @"daemon.peer-message.remote.execute.send.end";
                break;
              default:
                goto LABEL_590;
            }
            break;
        }
      }
    }
    else
    {
      switch(a1)
      {
        case 4500:
          id v1 = @"daemon.context";
          break;
        case 4501:
          id v1 = @"daemon.context.get-background-context.begin";
          break;
        case 4502:
          id v1 = @"daemon.context.get-background-context.end";
          break;
        case 4503:
          id v1 = @"daemon.context.get-background-context.nav-status.begin";
          break;
        case 4504:
          id v1 = @"daemon.context.get-background-context.nav-status.end";
          break;
        case 4505:
          id v1 = @"daemon.context.get-background-context.now-playing.begin";
          break;
        case 4506:
          id v1 = @"daemon.context.get-background-context.now-playing.end";
          break;
        case 4507:
          id v1 = @"daemon.context.get-background-context.siri-kit-settings.begin";
          break;
        case 4508:
          id v1 = @"daemon.context.get-background-context.siri-kit-settings.end";
          break;
        case 4509:
          id v1 = @"daemon.context.get-background-context.device-problems.begin";
          break;
        case 4510:
          id v1 = @"daemon.context.get-background-context.device-problems.end";
          break;
        case 4511:
          id v1 = @"daemon.context.get-background-context.current-home-kit-home.begin";
          break;
        case 4512:
          id v1 = @"daemon.context.get-background-context.current-home-kit-home.end";
          break;
        case 4513:
          id v1 = @"daemon.context.get-background-context.app-subscription-status.begin";
          break;
        case 4514:
          id v1 = @"daemon.context.get-background-context.app-subscription-status.end";
          break;
        case 4515:
          id v1 = @"daemon.context.get-background-context.music-personalization-token.begin";
          break;
        case 4516:
          id v1 = @"daemon.context.get-background-context.music-personalization-token.end";
          break;
        case 4517:
          id v1 = @"daemon.context.get-background-context.phone-call-state.begin";
          break;
        case 4518:
          id v1 = @"daemon.context.get-background-context.phone-call-state.end";
          break;
        case 4519:
          id v1 = @"daemon.context.get-background-context.simple-state.begin";
          break;
        case 4520:
          id v1 = @"daemon.context.get-background-context.simple-state.end";
          break;
        case 4521:
          id v1 = @"daemon.context.get-background-context.is-navigating.begin";
          break;
        case 4522:
          id v1 = @"daemon.context.get-background-context.is-navigating.end";
          break;
        case 4523:
          id v1 = @"daemon.context.get-background-context.playback-devices.begin";
          break;
        case 4524:
          id v1 = @"daemon.context.get-background-context.playback-devices.end";
          break;
        case 4525:
          id v1 = @"daemon.context.get-cross-device-context.begin";
          break;
        case 4526:
          id v1 = @"daemon.context.get-cross-device-context.end";
          break;
        case 4527:
        case 4530:
        case 4531:
        case 4532:
        case 4533:
        case 4534:
        case 4535:
        case 4536:
        case 4537:
        case 4538:
        case 4539:
        case 4540:
        case 4541:
        case 4542:
        case 4543:
        case 4544:
        case 4545:
        case 4546:
        case 4547:
        case 4548:
        case 4549:
        case 4550:
        case 4551:
        case 4552:
        case 4553:
        case 4554:
        case 4555:
        case 4556:
        case 4557:
        case 4558:
        case 4559:
        case 4562:
        case 4563:
        case 4564:
        case 4565:
        case 4566:
        case 4567:
        case 4568:
        case 4569:
        case 4571:
        case 4572:
        case 4573:
        case 4574:
        case 4576:
        case 4577:
        case 4578:
        case 4579:
        case 4580:
        case 4581:
        case 4582:
        case 4583:
        case 4584:
        case 4590:
        case 4591:
        case 4592:
        case 4593:
        case 4594:
        case 4595:
        case 4596:
        case 4597:
        case 4598:
        case 4599:
          goto LABEL_590;
        case 4528:
          id v1 = @"daemon.context.get-background-context.home-communication-announcement.begin";
          break;
        case 4529:
          id v1 = @"daemon.context.get-background.context.home-communication-announcement.end";
          break;
        case 4560:
          id v1 = @"daemon.context.cross-device-command.handled";
          break;
        case 4561:
          id v1 = @"daemon.context.cross-device-command.nearby-devices";
          break;
        case 4570:
          id v1 = @"daemon.context.context-collector.changed";
          break;
        case 4575:
          id v1 = @"daemon.context.local-context.changed";
          break;
        case 4585:
          id v1 = @"daemon.context.context-fetch.request.sent";
          break;
        case 4586:
          id v1 = @"daemon.context.context-fetch.request.received";
          break;
        case 4587:
          id v1 = @"daemon.context.context-fetch.response.sent";
          break;
        case 4588:
          id v1 = @"daemon.context.context-fetch.response.received";
          break;
        case 4589:
          id v1 = @"daemon.context.context-fetch.error";
          break;
        case 4600:
          id v1 = @"volume";
          break;
        case 4601:
          id v1 = @"volume.changed";
          break;
        case 4602:
          id v1 = @"volume.fetched";
          break;
        case 4603:
          id v1 = @"volume.updated";
          break;
        case 4604:
          id v1 = @"volume.down";
          break;
        case 4605:
          id v1 = @"volume.up";
          break;
        default:
          switch(a1)
          {
            case 4300:
              id v1 = @"analytics";
              break;
            case 4301:
              id v1 = @"analytics.store.database.post-corruption-detected";
              break;
            case 4302:
              id v1 = @"analytics.store.database.open-failed";
              break;
            case 4303:
              id v1 = @"analytics.store.database.integrity-check-failed";
              break;
            case 4304:
              id v1 = @"analytics.store.database.unrecoverable-error-detected";
              break;
            case 4305:
              id v1 = @"analytics.store.database.preparation-failed";
              break;
            case 4306:
              id v1 = @"analytics.store.reset";
              break;
            case 4307:
              id v1 = @"analytics.store.database.created";
              break;
            case 4308:
            case 4309:
              goto LABEL_590;
            case 4310:
              id v1 = @"analytics.redaction.summary";
              break;
            default:
              switch(a1)
              {
                case 4400:
                  id v1 = @"local-recognition";
                  break;
                case 4401:
                  id v1 = @"local-recognition.started";
                  break;
                case 4402:
                  id v1 = @"local-recognition.partial-result";
                  break;
                case 4403:
                  id v1 = @"local-recognition.eager-candidate";
                  break;
                case 4404:
                  id v1 = @"local-recognition.package";
                  break;
                case 4405:
                  id v1 = @"local-recognition.finished";
                  break;
                case 4406:
                  id v1 = @"local-recognition.preheat.start";
                  break;
                case 4407:
                  id v1 = @"local-recognition.preheat.done";
                  break;
                default:
                  goto LABEL_590;
              }
              break;
          }
          break;
      }
    }
  }
  else
  {
    if (a1 <= 1099)
    {
      if (a1 > 599)
      {
        if (a1 <= 800)
        {
          switch(a1)
          {
            case 600:
              id v1 = @"daemon.intent";
              break;
            case 601:
              id v1 = @"daemon.intent.extension.prepare";
              break;
            case 602:
              id v1 = @"daemon.intent.extension.ready";
              break;
            case 603:
              id v1 = @"daemon.intent.extension.unexpected-exit";
              break;
            case 604:
              id v1 = @"daemon.intent.extension.launch.timeout.";
              break;
            case 605:
              id v1 = @"daemon.intent.extension.request.timeout";
              break;
            case 606:
              id v1 = @"daemon.intent.resolve.begin";
              break;
            case 607:
              id v1 = @"daemon.intent.resolve.request.sent";
              break;
            case 608:
              id v1 = @"daemon.intent.resolve.response.received";
              break;
            case 609:
              id v1 = @"daemon.intent.resolve.end";
              break;
            case 610:
              id v1 = @"daemon.intent.confirm.begin";
              break;
            case 611:
              id v1 = @"daemon.intent.confirm.request.sent";
              break;
            case 612:
              id v1 = @"daemon.intent.confirm.response.received";
              break;
            case 613:
              id v1 = @"daemon.intent.confirm.response-ui-visible";
              break;
            case 614:
              id v1 = @"daemon.intent.confirm.end";
              break;
            case 615:
              id v1 = @"daemon.intent.handle.begin";
              break;
            case 616:
              id v1 = @"daemon.intent.handle.request.sent";
              break;
            case 617:
              id v1 = @"daemon.intent.handle.response.received";
              break;
            case 618:
              id v1 = @"daemon.intent.handle.response-ui-visible";
              break;
            case 619:
              id v1 = @"daemon.intent.handle.end";
              break;
            case 620:
              id v1 = @"daemon.intent.launch-with-intent.begin";
              break;
            case 621:
              id v1 = @"daemon.intent.launch-with-intent.end";
              break;
            case 622:
              id v1 = @"daemon.intent.launch-with-user-activity.begin";
              break;
            case 623:
              id v1 = @"daemon.intent.launch-with-user-activity.end";
              break;
            case 624:
              id v1 = @"daemon.intent.resolve-app.begin";
              break;
            case 625:
              id v1 = @"daemon.intent.resolve-app.end";
              break;
            case 626:
              id v1 = @"daemon.intent.extension.request.begin";
              break;
            case 627:
              id v1 = @"daemon.intent.extension.request.end";
              break;
            case 628:
              id v1 = @"daemon.intent.extension.prewarm.begin";
              break;
            case 629:
              id v1 = @"daemon.intent.extension.prewarm.end";
              break;
            case 630:
              id v1 = @"daemon.intent.process-intent.begin";
              break;
            case 631:
              id v1 = @"daemon.intent.process-intent.end";
              break;
            case 632:
              id v1 = @"daemon.intent.process-intent.extension.sent";
              break;
            case 633:
              id v1 = @"daemon.intent.process-intent.extension.received";
              break;
            case 634:
              id v1 = @"daemon.intent.get-app-info.begin";
              break;
            case 635:
              id v1 = @"daemon.intent.get-app-info.end";
              break;
            case 636:
              id v1 = @"daemon.intent.process-intent.resolve.begin";
              break;
            case 637:
              id v1 = @"daemon.intent.process-intent.resolve.end";
              break;
            case 638:
              id v1 = @"daemon.intent.process-intent.confirm.begin";
              break;
            case 639:
              id v1 = @"daemon.intent.process-intent.confirm.end";
              break;
            case 640:
              id v1 = @"daemon.intent.process-intent.handle.begin";
              break;
            case 641:
              id v1 = @"daemon.intent.process-intent.handle.end";
              break;
            case 642:
            case 643:
            case 644:
            case 645:
            case 646:
            case 647:
            case 648:
            case 649:
            case 650:
            case 651:
            case 652:
            case 653:
            case 654:
            case 655:
            case 656:
            case 657:
            case 658:
            case 659:
            case 660:
            case 661:
            case 662:
            case 663:
            case 664:
            case 665:
            case 666:
            case 667:
            case 668:
            case 669:
            case 670:
            case 671:
            case 672:
            case 673:
            case 674:
            case 675:
            case 676:
            case 677:
            case 678:
            case 679:
            case 680:
            case 681:
            case 682:
            case 683:
            case 684:
            case 685:
            case 686:
            case 687:
            case 688:
            case 689:
            case 690:
            case 691:
            case 692:
            case 693:
            case 694:
            case 695:
            case 696:
            case 697:
            case 698:
            case 699:
              goto LABEL_590;
            case 700:
              id v1 = @"daemon.task";
              break;
            case 701:
              id v1 = @"daemon.task.schedule";
              break;
            case 702:
              id v1 = @"daemon.task.start";
              break;
            case 703:
              id v1 = @"daemon.task.deliver";
              break;
            case 704:
              id v1 = @"daemon.task.finish";
              break;
            default:
              if (a1 != 800) {
                goto LABEL_590;
              }
              id v1 = @"daemon.domain-signal";
              break;
          }
        }
        else
        {
          switch(a1)
          {
            case 900:
              id v1 = @"daemon.session";
              break;
            case 901:
              id v1 = @"daemon.session.connection.opened";
              break;
            case 902:
              id v1 = @"daemon.session.connection.snapshot.local";
              break;
            case 903:
              id v1 = @"daemon.session.connection.snapshot.remote";
              break;
            case 904:
              id v1 = @"daemon.session.connection.timeout";
              break;
            case 905:
              id v1 = @"daemon.session.connection.dropped";
              break;
            case 906:
              id v1 = @"daemon.session.connection.failed";
              break;
            case 907:
              id v1 = @"daemon.session.validation.failed";
              break;
            case 908:
              id v1 = @"daemon.session.authentication.failed";
              break;
            case 909:
              id v1 = @"daemon.session.assistant.failed";
              break;
            case 910:
              id v1 = @"daemon.session.assistant.not-ready";
              break;
            case 911:
              id v1 = @"daemon.session.remapped-request-id";
              break;
            case 912:
              id v1 = @"daemon.session.connection.start";
              break;
            case 913:
              id v1 = @"daemon.session.connection.reset";
              break;
            case 914:
              id v1 = @"daemon.session.connection.client-connection-id.created";
              break;
            case 915:
              id v1 = @"daemon.session.connection.first-byte.received";
              break;
            case 916:
              id v1 = @"daemon.session.local.assistant.not-ready";
              break;
            case 917:
              id v1 = @"daemon.session.local.connection.reset";
              break;
            case 918:
              id v1 = @"daemon.session.proxied-request-id";
              break;
            case 919:
              id v1 = @"daemon.session.won";
              break;
            case 920:
              id v1 = @"daemon.session.load-assistant";
              break;
            case 921:
              id v1 = @"daemon.session.failed";
              break;
            case 922:
              id v1 = @"daemon.session.connection.http-header.created";
              break;
            case 923:
              id v1 = @"daemon.session.results.queued";
              break;
            case 924:
              id v1 = @"daemon.session.assistant.loaded";
              break;
            case 925:
              id v1 = @"daemon.session.reset-on-request-boundary";
              break;
            case 926:
              id v1 = @"daemon.session.connection-header.ace-host.mismatch";
              break;
            default:
              switch(a1)
              {
                case 1000:
                  id v1 = @"daemon.network";
                  break;
                case 1001:
                  id v1 = @"daemon.network.available";
                  break;
                case 1002:
                  id v1 = @"daemon.network.server-address.resolved";
                  break;
                case 1003:
                  id v1 = @"daemon.network.failure";
                  break;
                case 1004:
                  id v1 = @"daemon.network.peer.error";
                  break;
                case 1005:
                  id v1 = @"daemon.network.ace-ping.sent";
                  break;
                case 1006:
                  id v1 = @"daemon.network.ace-pong.received";
                  break;
                case 1007:
                  id v1 = @"daemon.network.provider.open.begin";
                  break;
                case 1008:
                  id v1 = @"daemon.network.provider.open.end";
                  break;
                case 1009:
                  id v1 = @"daemon.network.provider.secondary.open.begin";
                  break;
                case 1010:
                  id v1 = @"daemon.network.provider.secondary.open.end";
                  break;
                case 1011:
                  id v1 = @"daemon.network.link.recommendation.begin";
                  break;
                case 1012:
                  id v1 = @"daemon.network.link.recommendation.end";
                  break;
                case 1013:
                  id v1 = @"daemon.network.link.recommendation.timeout";
                  break;
                case 1014:
                  id v1 = @"daemon.network.connection.unviable";
                  break;
                case 1015:
                  id v1 = @"daemon.network.connection.viable";
                  break;
                case 1016:
                  id v1 = @"daemon.network.connection.state-prepare";
                  break;
                case 1017:
                  id v1 = @"daemon.network.connection.state-ready";
                  break;
                case 1018:
                  id v1 = @"daemon.network.connection.data.consumed";
                  break;
                default:
                  if (a1 != 801) {
                    goto LABEL_590;
                  }
                  id v1 = @"daemon.domain-signal.launch-app";
                  break;
              }
              break;
          }
        }
      }
      else if (a1 > 299)
      {
        if (a1 <= 449)
        {
          switch(a1)
          {
            case 300:
              id v1 = @"daemon.speech";
              break;
            case 301:
              id v1 = @"daemon.speech.capture.start.begin";
              break;
            case 302:
              id v1 = @"daemon.speech.capture.start.end";
              break;
            case 303:
              id v1 = @"daemon.speech.capture.update";
              break;
            case 304:
              id v1 = @"daemon.speech.capture.cancel";
              break;
            case 305:
              id v1 = @"daemon.speech.capture.stop";
              break;
            case 306:
              id v1 = @"daemon.speech.failure";
              break;
            case 307:
              id v1 = @"daemon.speech.capture.continued";
              break;
            case 308:
              id v1 = @"daemon.speech.result-candidate.evaluation.begin";
              break;
            case 309:
              id v1 = @"daemon.speech.result-candidate.evaluation.end";
              break;
            case 310:
              id v1 = @"daemon.speech.result-candidate.accepted";
              break;
            case 311:
              id v1 = @"daemon.speech.result-candidate.stashed";
              break;
            case 312:
              id v1 = @"daemon.speech.log.begin";
              break;
            case 313:
              id v1 = @"daemon.speech.log.end";
              break;
            default:
              switch(a1)
              {
                case 400:
                  id v1 = @"daemon.service";
                  break;
                case 401:
                  id v1 = @"daemon.service.handle.begin";
                  break;
                case 402:
                  id v1 = @"daemon.service.handle.end";
                  break;
                case 403:
                  id v1 = @"daemon.service.bundle.handle.begin";
                  break;
                case 404:
                  id v1 = @"daemon.service.bundle.handle.end";
                  break;
                default:
                  goto LABEL_590;
              }
              break;
          }
        }
        else
        {
          switch(a1)
          {
            case 500:
              id v1 = @"daemon.generic-intent";
              break;
            case 501:
              id v1 = @"daemon.generic-intent.handle.begin";
              break;
            case 502:
              id v1 = @"daemon.generic-intent.handle.timeout";
              break;
            case 503:
              id v1 = @"daemon.generic-intent.deliver.begin";
              break;
            case 504:
              id v1 = @"daemon.generic-intent.recipient.state-changed";
              break;
            case 505:
              id v1 = @"daemon.generic-intent.recipient.crash";
              break;
            case 506:
              id v1 = @"daemon.generic-intent.recipient.finished";
              break;
            case 507:
              id v1 = @"daemon.generic-intent.handle.end";
              break;
            default:
              if (a1 == 450)
              {
                id v1 = @"daemon.memory";
              }
              else
              {
                if (a1 != 451) {
                  goto LABEL_590;
                }
                id v1 = @"daemon.memory.pressure.notification";
              }
              break;
          }
        }
      }
      else
      {
        switch(a1)
        {
          case 100:
            id v1 = @"daemon";
            break;
          case 101:
            id v1 = @"daemon.launch";
            break;
          case 102:
            id v1 = @"daemon.loaded";
            break;
          case 103:
            id v1 = @"daemon.exit";
            break;
          case 104:
            id v1 = @"daemon.failure";
            break;
          case 105:
          case 106:
          case 107:
          case 108:
          case 109:
          case 110:
          case 111:
          case 112:
          case 113:
          case 114:
          case 115:
          case 116:
          case 117:
          case 118:
          case 119:
          case 124:
          case 125:
          case 126:
          case 127:
          case 128:
          case 129:
          case 130:
          case 131:
          case 132:
          case 133:
          case 134:
          case 135:
          case 136:
          case 137:
          case 138:
          case 139:
          case 142:
          case 143:
          case 144:
          case 145:
          case 146:
          case 147:
          case 148:
          case 149:
          case 150:
          case 151:
          case 152:
          case 153:
          case 154:
          case 155:
          case 156:
          case 157:
          case 158:
          case 159:
          case 160:
          case 161:
          case 162:
          case 163:
          case 164:
          case 165:
          case 166:
          case 167:
          case 168:
          case 169:
          case 170:
          case 171:
          case 172:
          case 173:
          case 174:
          case 175:
          case 176:
          case 177:
          case 178:
          case 179:
          case 180:
          case 181:
          case 182:
          case 183:
          case 184:
          case 185:
          case 186:
          case 187:
          case 188:
          case 189:
          case 190:
          case 191:
          case 192:
          case 193:
          case 194:
          case 195:
          case 196:
          case 197:
          case 198:
          case 199:
            goto LABEL_590;
          case 120:
            id v1 = @"daemon.start-request.speech";
            break;
          case 121:
            id v1 = @"daemon.start-request.dictation";
            break;
          case 122:
            id v1 = @"daemon.start-request.other";
            break;
          case 123:
            id v1 = @"daemon.start-request.keyboard";
            break;
          case 140:
            id v1 = @"daemon.log.numeric-event";
            break;
          case 141:
            id v1 = @"daemon.log.string-event";
            break;
          case 200:
            id v1 = @"daemon.audio";
            break;
          case 201:
            id v1 = @"daemon.audio.init.begin";
            break;
          case 202:
            id v1 = @"daemon.audio.init.end";
            break;
          case 203:
            id v1 = @"daemon.audio.configure.begin";
            break;
          case 204:
            id v1 = @"daemon.audio.configure.end";
            break;
          case 205:
            id v1 = @"daemon.audio.prewarm.begin";
            break;
          case 206:
            id v1 = @"daemon.audio.prewarm.end";
            break;
          case 207:
            id v1 = @"daemon.audio.prepare.begin";
            break;
          case 208:
            id v1 = @"daemon.audio.prepare.end";
            break;
          case 209:
            id v1 = @"daemon.audio.fetch-route.begin";
            break;
          case 210:
            id v1 = @"daemon.audio.fetch-route.end";
            break;
          case 211:
            id v1 = @"daemon.audio.start-recording.begin";
            break;
          case 212:
            id v1 = @"daemon.audio.start-recording.end";
            break;
          case 213:
            id v1 = @"daemon.audio.recording.begin";
            break;
          case 214:
            id v1 = @"daemon.audio.recording.first-buffer";
            break;
          case 215:
            id v1 = @"daemon.audio.recording.end";
            break;
          case 216:
            id v1 = @"daemon.audio.stop-recording.begin";
            break;
          case 217:
            id v1 = @"daemon.audio.stop-recording.end";
            break;
          case 218:
            id v1 = @"daemon.audio.late-buffer";
            break;
          case 219:
            id v1 = @"daemon.audio.analyzer.startpoint.detected";
            break;
          case 220:
            id v1 = @"daemon.audio.analyzer.hard-endpoint.detected";
            break;
          case 221:
            id v1 = @"daemon.audio.failure";
            break;
          case 222:
            id v1 = @"daemon.audio.bt-info.fetch.begin";
            break;
          case 223:
            id v1 = @"daemon.audio.bt-info.fetch.end";
            break;
          case 224:
            id v1 = @"daemon.audio.fan-info";
            break;
          case 225:
            id v1 = @"daemon.audio.first-chance-trigger-info";
            break;
          case 226:
            id v1 = @"daemon.audio.recording.interruption.begin";
            break;
          case 227:
            id v1 = @"daemon.audio.recording.interruption.end";
            break;
          case 228:
            id v1 = @"daemon.audio.set-endpoint-state";
            break;
          case 229:
            id v1 = @"daemon.audio.recording.first-buffer.start";
            break;
          case 230:
            id v1 = @"daemon.audio.recording.first-buffer.receipt";
            break;
          case 231:
            id v1 = @"daemon.audio.recording.last-buffer.start";
            break;
          case 232:
            id v1 = @"daemon.audio.recording.last-buffer.receipt";
            break;
          case 233:
            id v1 = @"daemon.audio.session.set-active.begin";
            break;
          case 234:
            id v1 = @"daemon.audio.session.set-active.end";
            break;
          case 235:
            id v1 = @"daemon.audio.session.set-inactive.begin";
            break;
          case 236:
            id v1 = @"daemon.audio.session.set-inactive.end";
            break;
          case 237:
            id v1 = @"daemon.audio.recording.missed-buffer";
            break;
          case 238:
            id v1 = @"daemon.audio.file.started";
            break;
          case 239:
            id v1 = @"daemon.audio.two-shot.transition.begin";
            break;
          case 240:
            id v1 = @"daemon.audio.two-shot.transition.end";
            break;
          case 241:
            id v1 = @"daemon.audio.recording.metrics";
            break;
          case 242:
            id v1 = @"daemon.audio.bluetooth-info";
            break;
          case 243:
            id v1 = @"daemon.audio.analyzer.multi-modal-endpoint.detected";
            break;
          case 244:
            id v1 = @"daemon.audio.session.prepare.begin";
            break;
          case 245:
            id v1 = @"daemon.audio.session.prepare.end";
            break;
          case 246:
            id v1 = @"daemon.audio.session.release.begin";
            break;
          case 247:
            id v1 = @"daemon.audio.session.release.end";
            break;
          case 248:
            id v1 = @"daemon.audio.session.local-assertion.acquire";
            break;
          case 249:
            id v1 = @"daemon.audio.session.local-assertion.activate";
            break;
          case 250:
            id v1 = @"daemon.audio.session.local-assertion.deactivate";
            break;
          case 251:
            id v1 = @"daemon.audio.session.local-assertion.relinquish";
            break;
          case 252:
            id v1 = @"daemon.audio.session.remote-assertion.acquire";
            break;
          case 253:
            id v1 = @"daemon.audio.session.remote-assertion.activate";
            break;
          case 254:
            id v1 = @"daemon.audio.session.remote-assertion.deactivate";
            break;
          case 255:
            id v1 = @"daemon.audio.session.remote-assertion.relinquish";
            break;
          case 256:
            id v1 = @"daemon.audio.session.first-assertion.activate";
            break;
          case 257:
            id v1 = @"daemon.audio.session.last-assertion.deactivate";
            break;
          default:
            if (a1) {
              goto LABEL_590;
            }
            id v1 = @"unspecified";
            break;
        }
      }
      goto LABEL_857;
    }
    if (a1 > 1799)
    {
      if (a1 > 2099)
      {
        switch(a1)
        {
          case 2200:
            id v1 = @"client.dictation";
            break;
          case 2201:
            id v1 = @"client.dictation.start-request";
            break;
          case 2202:
            id v1 = @"client.dictation.update-speech";
            break;
          case 2203:
            id v1 = @"client.dictation.stop-speech";
            break;
          case 2204:
            id v1 = @"client.dictation.cancel-speech";
            break;
          case 2205:
            id v1 = @"client.dictation.request-canceled";
            break;
          case 2206:
            id v1 = @"client.dictation.request-failed";
            break;
          case 2207:
            id v1 = @"client.dictation.request-completed";
            break;
          case 2208:
            id v1 = @"client.dictation.timeout-request";
            break;
          case 2209:
            id v1 = @"client.dictation.speech-recording.started";
            break;
          case 2210:
            id v1 = @"client.dictation.speech-recording.canceled";
            break;
          case 2211:
            id v1 = @"client.dictation.speech-recording.completed";
            break;
          case 2212:
            id v1 = @"client.dictation.speech-recording.failed";
            break;
          case 2213:
            id v1 = @"client.dictation.speech-recognition.phrases-recognized";
            break;
          case 2214:
            id v1 = @"client.dictation.speech-recognition.tokens-recognized";
            break;
          case 2215:
            id v1 = @"client.dictation.speech-recognition.transcription-objects-recognized";
            break;
          case 2216:
            id v1 = @"client.dictation.speech-recognition.completed";
            break;
          case 2217:
            id v1 = @"client.dictation.speech-recognition.failed";
            break;
          case 2218:
            id v1 = @"client.dictation.app-did-enter-background";
            break;
          case 2219:
            id v1 = @"client.dictation.smart-language-selection.language-overridden";
            break;
          case 2220:
            id v1 = @"client.dictation.request-sampled";
            break;
          case 2221:
            id v1 = @"client.dictation.personalization-validation-metrics";
            break;
          case 2222:
            id v1 = @"client.dictation.request-completion-status";
            break;
          case 2223:
            id v1 = @"client.dictation.sampled-audio.send-to-server.status";
            break;
          case 2224:
            id v1 = @"client.dictation.request-sampled.save-audio";
            break;
          case 2225:
            id v1 = @"client.dictation.preheat";
            break;
          case 2226:
            id v1 = @"client.dictation.offline-dictation-status";
            break;
          default:
            switch(a1)
            {
              case 2100:
                id v1 = @"ui.watch";
                break;
              case 2101:
                id v1 = @"ui.activation.gizmo-vt-while-already-recording";
                break;
              case 2102:
                id v1 = @"ui.delayed-response.education";
                break;
              case 2103:
                id v1 = @"ui.delayed-response.wrist-lowered";
                break;
              case 2104:
                id v1 = @"ui.delayed-response.backlight-on";
                break;
              case 2105:
                id v1 = @"ui.tts.canceled";
                break;
              default:
                goto LABEL_590;
            }
            break;
        }
      }
      else
      {
        switch(a1)
        {
          case 1900:
            id v1 = @"client";
            break;
          case 1901:
            id v1 = @"client.start-request";
            break;
          case 1902:
            id v1 = @"client.start-speech-request";
            break;
          case 1903:
            id v1 = @"client.start-speech-pronunciation-request";
            break;
          case 1904:
            id v1 = @"client.start-acoustic-id-request";
            break;
          case 1905:
            id v1 = @"client.start-continuity-request";
            break;
          case 1906:
            id v1 = @"client.start-correction-request";
            break;
          case 1907:
            id v1 = @"client.start-direct-action-request";
            break;
          case 1908:
            id v1 = @"client.start-text-request";
            break;
          case 1909:
            id v1 = @"client.update-speech";
            break;
          case 1910:
            id v1 = @"client.stop-speech";
            break;
          case 1911:
            id v1 = @"client.cancel-speech";
            break;
          case 1912:
            id v1 = @"client.request-canceled";
            break;
          case 1913:
            id v1 = @"client.request-failed";
            break;
          case 1914:
            id v1 = @"client.request-completed";
            break;
          case 1915:
            id v1 = @"client.preheat";
            break;
          case 1916:
            id v1 = @"client.acoustic-id.begin";
            break;
          case 1917:
            id v1 = @"client.acoustic-id.end";
            break;
          case 1918:
            id v1 = @"client.tether.wait.begin";
            break;
          case 1919:
            id v1 = @"client.tether.wait.end";
            break;
          case 1920:
            id v1 = @"client.tether.attach.begin";
            break;
          case 1921:
            id v1 = @"client.tether.attach.end";
            break;
          case 1922:
            id v1 = @"client.tether.attached";
            break;
          case 1923:
            id v1 = @"client.tether.detached";
            break;
          case 1924:
            id v1 = @"client.feedback.presented";
            break;
          case 1925:
            id v1 = @"client.auto-disambiguation.requested";
            break;
          case 1926:
            id v1 = @"client.auto-disambiguation.saved";
            break;
          case 1927:
            id v1 = @"client.location.no-result";
            break;
          case 1928:
            id v1 = @"client.location.start-updating";
            break;
          case 1929:
            id v1 = @"client.location.did-update";
            break;
          case 1930:
            id v1 = @"client.screen-wake-requested";
            break;
          case 1931:
            id v1 = @"client.screen-turn-off-requested";
            break;
          case 1932:
          case 1933:
          case 1934:
          case 1935:
          case 1936:
          case 1937:
          case 1938:
          case 1939:
          case 1940:
          case 1941:
          case 1942:
          case 1943:
          case 1944:
          case 1945:
          case 1946:
          case 1947:
          case 1948:
          case 1949:
          case 1950:
          case 1951:
          case 1952:
          case 1953:
          case 1954:
          case 1955:
          case 1956:
          case 1957:
          case 1958:
          case 1959:
          case 1960:
          case 1961:
          case 1962:
          case 1963:
          case 1964:
          case 1965:
          case 1966:
          case 1967:
          case 1968:
          case 1969:
          case 1970:
          case 1971:
          case 1972:
          case 1973:
          case 1974:
          case 1975:
          case 1976:
          case 1977:
          case 1978:
          case 1979:
          case 1980:
          case 1981:
          case 1982:
          case 1983:
          case 1984:
          case 1985:
          case 1986:
          case 1987:
          case 1988:
          case 1989:
          case 1990:
          case 1991:
          case 1992:
          case 1993:
          case 1994:
          case 1995:
          case 1996:
          case 1997:
          case 1998:
          case 1999:
            goto LABEL_590;
          case 2000:
            id v1 = @"client.coord";
            break;
          case 2001:
            id v1 = @"client.coord.audio-ready";
            break;
          case 2002:
            id v1 = @"client.coord.advertising-start-request";
            break;
          case 2003:
            id v1 = @"client.coord.advertising-did-start";
            break;
          case 2004:
            id v1 = @"client.coord.advertising-end-request";
            break;
          case 2005:
            id v1 = @"client.coord.advertising-did-end";
            break;
          case 2006:
            id v1 = @"client.coord.decision-made";
            break;
          case 2007:
            id v1 = @"client.coord.slowdown-generated";
            break;
          case 2008:
            id v1 = @"client.coord.slowdown-received";
            break;
          case 2009:
            id v1 = @"client.coord.multiple-continuation-signals";
            break;
          case 2010:
            id v1 = @"client.coord.advertising-will-end";
            break;
          case 2011:
            id v1 = @"client.coord.activity-start";
            break;
          case 2012:
            id v1 = @"client.coord.activity-end";
            break;
          case 2013:
            id v1 = @"client.coord.advertisement-push-begin";
            break;
          case 2014:
            id v1 = @"client.coord.advertisement-push-error";
            break;
          case 2015:
            id v1 = @"client.coord.advertisement-push-response-received";
            break;
          case 2016:
            id v1 = @"client.coord.advertisement-push-response-received-invalidAdvertisementId";
            break;
          case 2017:
            id v1 = @"client.coord.advertisement-push-response-received-late";
            break;
          case 2018:
            id v1 = @"client.coord.suppress-late-trigger";
            break;
          case 2019:
            id v1 = @"client.coord.accessory-message-pushed";
            break;
          case 2020:
            id v1 = @"client.coord.accessory-message-push-ack-received";
            break;
          case 2021:
            id v1 = @"client.coord.accessory-decision-received";
            break;
          case 2022:
            id v1 = @"client.coord.accessory-emergency-handled";
            break;
          default:
            switch(a1)
            {
              case 1800:
                id v1 = @"voice-services.daemon";
                break;
              case 1801:
                id v1 = @"voice-services.daemon.speech-request.creation";
                break;
              case 1802:
                id v1 = @"voice-services.daemon.speech-request.vocalization.begin";
                break;
              case 1803:
                id v1 = @"voice-services.daemon.speech-request.vocalization.end";
                break;
              case 1804:
                id v1 = @"voice-services.daemon.speech-request.synthesize.begin";
                break;
              case 1805:
                id v1 = @"voice-services.daemon.speech-request.synthesize.end";
                break;
              case 1806:
                id v1 = @"voice-services.daemon.speech-request.vocalization.output-estimated-begin";
                break;
              default:
                goto LABEL_590;
            }
            break;
        }
      }
      goto LABEL_857;
    }
    if (a1 > 1399)
    {
      if (a1 <= 1599)
      {
        switch(a1)
        {
          case 1400:
            id v1 = @"ui";
            break;
          case 1401:
            id v1 = @"ui.plugin.loaded";
            break;
          case 1402:
            id v1 = @"ui.activation.prepare";
            break;
          case 1403:
            id v1 = @"ui.activation.cancel";
            break;
          case 1404:
            id v1 = @"ui.activation.handle.begin";
            break;
          case 1405:
            id v1 = @"ui.activation.handle.end";
            break;
          case 1406:
            id v1 = @"ui.present.begin";
            break;
          case 1407:
            id v1 = @"ui.present.end";
            break;
          case 1408:
            id v1 = @"ui.dismiss.begin";
            break;
          case 1409:
            id v1 = @"ui.dismiss.end";
            break;
          case 1410:
            id v1 = @"ui.button.down";
            break;
          case 1411:
            id v1 = @"ui.button.up";
            break;
          case 1412:
            id v1 = @"ui.button.tap";
            break;
          case 1413:
            id v1 = @"ui.blur";
            break;
          case 1414:
            id v1 = @"ui.flames.present";
            break;
          case 1415:
            id v1 = @"ui.flames.dismiss";
            break;
          case 1416:
            id v1 = @"ui.mode.idle";
            break;
          case 1417:
            id v1 = @"ui.mode.listening";
            break;
          case 1418:
            id v1 = @"ui.mode.thinking";
            break;
          case 1419:
            id v1 = @"ui.mode.success";
            break;
          case 1420:
            id v1 = @"ui.uufr.present";
            break;
          case 1421:
            id v1 = @"ui.command.handle.begin";
            break;
          case 1422:
            id v1 = @"ui.command.handle.end";
            break;
          case 1423:
            id v1 = @"ui.failure";
            break;
          case 1424:
            id v1 = @"ui.tap-to-edit-button.tap";
            break;
          case 1425:
            id v1 = @"ui.url-session-load.failure";
            break;
          case 1426:
            id v1 = @"ui.disambiguation.selected";
            break;
          case 1427:
            id v1 = @"ui.tts.should-speak";
            break;
          case 1428:
            id v1 = @"ui.tts.should-not-speak";
            break;
          case 1429:
            id v1 = @"ui.transcript-item.inserted";
            break;
          case 1430:
            id v1 = @"ui.transcript-item.did-appear";
            break;
          case 1431:
            id v1 = @"ui.transcript-item.did-disappear";
            break;
          case 1432:
            id v1 = @"ui.transcript.scrolled";
            break;
          case 1433:
            id v1 = @"ui.unlock-ui.presented";
            break;
          case 1434:
            id v1 = @"ui.unlock-ui.dismissed";
            break;
          case 1435:
            id v1 = @"ui.device.locked";
            break;
          case 1436:
            id v1 = @"ui.device.unlocked";
            break;
          case 1437:
            id v1 = @"ui.punchout.begin";
            break;
          case 1438:
            id v1 = @"ui.punchout.end";
            break;
          case 1439:
            id v1 = @"ui.transcript-items.reload.begin";
            break;
          case 1440:
            id v1 = @"ui.transcript-items.reload.end";
            break;
          case 1441:
            id v1 = @"ui.mode.presenting";
            break;
          case 1442:
            id v1 = @"ui.mode.idle.rendered";
            break;
          case 1443:
            id v1 = @"ui.mode.listening.rendered";
            break;
          case 1444:
            id v1 = @"ui.mode.thinking.rendered";
            break;
          case 1445:
            id v1 = @"ui.mode.presenting.rendered";
            break;
          case 1446:
            id v1 = @"ui.button.text-request-input.start";
            break;
          case 1447:
            id v1 = @"ui.button.text-request-input.done";
            break;
          case 1448:
            id v1 = @"ui.button.text-request-input.clear";
            break;
          case 1449:
            id v1 = @"ui.add-views.view.null-ace-id-detected";
            break;
          case 1450:
            id v1 = @"ui.swipe.dismiss";
            break;
          case 1451:
            id v1 = @"ui.bluetooth.bvra1.received";
            break;
          case 1452:
            id v1 = @"ui.notification-sound.playback.failure";
            break;
          case 1453:
            id v1 = @"ui.view.presented";
            break;
          case 1454:
            id v1 = @"ui.view.dismissed";
            break;
          case 1455:
            id v1 = @"ui.view.did-engage";
            break;
          case 1456:
            id v1 = @"ui.view.scrolled";
            break;
          case 1457:
            id v1 = @"ui.view.item-selected";
            break;
          case 1458:
            id v1 = @"ui.audio-route-picker.tapped";
            break;
          case 1459:
            id v1 = @"ui.received-reveal-speech-command";
            break;
          case 1460:
            id v1 = @"ui.dismiss.request";
            break;
          case 1461:
            id v1 = @"ui.view.did-appear";
            break;
          case 1462:
            id v1 = @"ui.view.did-disappear";
            break;
          case 1500:
            id v1 = @"ui.view-service";
            break;
          case 1501:
            id v1 = @"ui.view-service.launch";
            break;
          case 1502:
            id v1 = @"ui.view-service.loaded";
            break;
          case 1503:
            id v1 = @"ui.view-service.exit";
            break;
          case 1504:
            id v1 = @"ui.view-service.speech-partial-result.received";
            break;
          case 1505:
            id v1 = @"ui.view-service.speech-partial-result.presented";
            break;
          case 1506:
            id v1 = @"ui.view-service.speech-recognized.received";
            break;
          case 1507:
            id v1 = @"ui.view-service.speech-recognized.presented";
            break;
          case 1508:
            id v1 = @"ui.view-service.failure";
            break;
          case 1509:
            id v1 = @"ui.view-service.pin";
            break;
          case 1510:
            id v1 = @"ui.view-service.pin.begin";
            break;
          case 1511:
            id v1 = @"ui.view-service.pin.end";
            break;
          case 1512:
            id v1 = @"ui.view-service.drag";
            break;
          case 1513:
            id v1 = @"ui.view-service.did-appear";
            break;
          case 1514:
            id v1 = @"ui.view-service.did-disappear";
            break;
          default:
            goto LABEL_590;
        }
        goto LABEL_857;
      }
      if (a1 > 1699)
      {
        switch(a1)
        {
          case 1700:
            id v1 = @"coverage.request-statistics";
            goto LABEL_857;
          case 1701:
            id v1 = @"coverage.request-statistics.cancellation";
            goto LABEL_857;
          case 1702:
            id v1 = @"coverage.request-statistics.failure";
            goto LABEL_857;
        }
      }
      else
      {
        switch(a1)
        {
          case 1600:
            id v1 = @"coverage.aggregate-dictionary";
            goto LABEL_857;
          case 1601:
            id v1 = @"coverage.aggregate-dictionary.scalar";
            goto LABEL_857;
          case 1602:
            id v1 = @"coverage.aggregate-dictionary.distribution";
            goto LABEL_857;
        }
      }
LABEL_590:
      id v1 = (__CFString *)objc_msgSend([NSString alloc], "initWithFormat:", @"unknown.%ld", a1);
      goto LABEL_857;
    }
    if (a1 <= 1199)
    {
      switch(a1)
      {
        case 1100:
          id v1 = @"daemon.incoming-command";
          goto LABEL_857;
        case 1101:
          id v1 = @"daemon.incoming-command.speech-partial-result";
          goto LABEL_857;
        case 1102:
          id v1 = @"daemon.incoming-command.speech-recognized";
          goto LABEL_857;
      }
      goto LABEL_590;
    }
    switch(a1)
    {
      case 1200:
        id v1 = @"daemon.outgoing-command";
        break;
      case 1201:
        id v1 = @"daemon.outgoing-command.failure";
        break;
      case 1202:
        id v1 = @"daemon.local.outgoing-command.failure";
        break;
      case 1204:
        id v1 = @"daemon.service.maintenance.begin";
        break;
      case 1205:
        id v1 = @"daemon.service.maintenance.end";
        break;
      case 1206:
        id v1 = @"daemon.preferences.synchronize.failure";
        break;
      default:
        goto LABEL_590;
    }
  }
LABEL_857:
  return v1;
}

uint64_t AFAnalyticsEventTypeIsValid(uint64_t a1)
{
  uint64_t result = 0;
  if (a1 <= 2299)
  {
    if (a1 <= 1099)
    {
      if (a1 <= 599)
      {
        if (a1 <= 399)
        {
          switch(a1)
          {
            case 120:
            case 121:
            case 122:
            case 123:
            case 140:
            case 141:
            case 200:
            case 201:
            case 202:
            case 203:
            case 204:
            case 205:
            case 206:
            case 207:
            case 208:
            case 209:
            case 210:
            case 211:
            case 212:
            case 213:
            case 214:
            case 215:
            case 216:
            case 217:
            case 218:
            case 219:
            case 220:
            case 221:
            case 222:
            case 223:
            case 224:
            case 225:
            case 226:
            case 227:
            case 228:
            case 229:
            case 230:
            case 231:
            case 232:
            case 233:
            case 234:
            case 235:
            case 236:
            case 237:
            case 238:
            case 239:
            case 240:
            case 241:
            case 242:
            case 243:
            case 244:
            case 245:
            case 246:
            case 247:
            case 248:
            case 249:
            case 250:
            case 251:
            case 252:
            case 253:
            case 254:
            case 255:
            case 256:
            case 257:
            case 300:
            case 301:
            case 302:
            case 303:
            case 304:
            case 305:
            case 306:
            case 307:
            case 308:
            case 309:
            case 310:
            case 311:
            case 312:
            case 313:
              return 1;
            case 124:
            case 125:
            case 126:
            case 127:
            case 128:
            case 129:
            case 130:
            case 131:
            case 132:
            case 133:
            case 134:
            case 135:
            case 136:
            case 137:
            case 138:
            case 139:
            case 142:
            case 143:
            case 144:
            case 145:
            case 146:
            case 147:
            case 148:
            case 149:
            case 150:
            case 151:
            case 152:
            case 153:
            case 154:
            case 155:
            case 156:
            case 157:
            case 158:
            case 159:
            case 160:
            case 161:
            case 162:
            case 163:
            case 164:
            case 165:
            case 166:
            case 167:
            case 168:
            case 169:
            case 170:
            case 171:
            case 172:
            case 173:
            case 174:
            case 175:
            case 176:
            case 177:
            case 178:
            case 179:
            case 180:
            case 181:
            case 182:
            case 183:
            case 184:
            case 185:
            case 186:
            case 187:
            case 188:
            case 189:
            case 190:
            case 191:
            case 192:
            case 193:
            case 194:
            case 195:
            case 196:
            case 197:
            case 198:
            case 199:
            case 258:
            case 259:
            case 260:
            case 261:
            case 262:
            case 263:
            case 264:
            case 265:
            case 266:
            case 267:
            case 268:
            case 269:
            case 270:
            case 271:
            case 272:
            case 273:
            case 274:
            case 275:
            case 276:
            case 277:
            case 278:
            case 279:
            case 280:
            case 281:
            case 282:
            case 283:
            case 284:
            case 285:
            case 286:
            case 287:
            case 288:
            case 289:
            case 290:
            case 291:
            case 292:
            case 293:
            case 294:
            case 295:
            case 296:
            case 297:
            case 298:
            case 299:
              return result;
            default:
              unint64_t v6 = a1 - 100;
              goto LABEL_110;
          }
          return result;
        }
        if ((unint64_t)(a1 - 450) > 0x39 || ((1 << (a1 + 62)) & 0x3FC000000000003) == 0)
        {
          unint64_t v6 = a1 - 400;
          goto LABEL_110;
        }
        return 1;
      }
      if (a1 <= 799)
      {
        if ((unint64_t)(a1 - 600) >= 0x2A)
        {
          unint64_t v6 = a1 - 700;
          goto LABEL_110;
        }
        return 1;
      }
      if ((unint64_t)(a1 - 900) < 0x1B || (unint64_t)(a1 - 1000) < 0x13) {
        return 1;
      }
      unint64_t v4 = a1 - 800;
LABEL_107:
      if (v4 >= 2) {
        return result;
      }
      return 1;
    }
    if (a1 > 1799)
    {
      if (a1 <= 1999)
      {
        if ((unint64_t)(a1 - 1900) >= 0x20 && (unint64_t)(a1 - 1800) >= 7) {
          return result;
        }
      }
      else if ((unint64_t)(a1 - 2200) >= 0x1B {
             && (unint64_t)(a1 - 2000) >= 0x17
      }
             && (unint64_t)(a1 - 2100) >= 6)
      {
        return result;
      }
      return 1;
    }
    if (a1 > 1499)
    {
      if ((unint64_t)(a1 - 1500) < 0xF || (unint64_t)(a1 - 1600) < 3) {
        return 1;
      }
      unint64_t v5 = a1 - 1700;
    }
    else
    {
      if ((unint64_t)(a1 - 1400) < 0x3F || (unint64_t)(a1 - 1200) <= 6 && a1 != 1203) {
        return 1;
      }
      unint64_t v5 = a1 - 1100;
    }
LABEL_69:
    if (v5 >= 3) {
      return result;
    }
    return 1;
  }
  if (a1 <= 4299)
  {
    if (a1 <= 3599)
    {
      if (a1 > 2799)
      {
        if (a1 <= 3299)
        {
          if (a1 > 2999)
          {
            if ((unint64_t)(a1 - 3200) < 6 || (unint64_t)(a1 - 3000) < 3) {
              return 1;
            }
            unint64_t v4 = a1 - 3100;
          }
          else
          {
            if ((unint64_t)(a1 - 2900) < 9) {
              return 1;
            }
            unint64_t v4 = a1 - 2800;
          }
          goto LABEL_107;
        }
        if ((unint64_t)(a1 - 3300) < 0xC || (unint64_t)(a1 - 3500) < 5) {
          return 1;
        }
        unint64_t v8 = a1 - 3400;
      }
      else
      {
        if (a1 > 2599)
        {
          if ((unint64_t)(a1 - 2600) >= 0x15 && (unint64_t)(a1 - 2700) >= 0xD) {
            return result;
          }
          return 1;
        }
        if ((unint64_t)(a1 - 2300) < 5
          || (unint64_t)(a1 - 2400) <= 0x15 && ((1 << (a1 - 96)) & 0x300007) != 0)
        {
          return 1;
        }
        unint64_t v8 = a1 - 2500;
      }
      goto LABEL_92;
    }
    if (a1 > 3899)
    {
      if (a1 <= 4099)
      {
        if ((unint64_t)(a1 - 4000) >= 0xB && (unint64_t)(a1 - 3900) >= 9) {
          return result;
        }
        return 1;
      }
      if ((unint64_t)(a1 - 4100) < 9) {
        return 1;
      }
      uint64_t v9 = -4200;
      goto LABEL_106;
    }
    if ((unint64_t)(a1 - 3800) < 0x1D
      || (unint64_t)(a1 - 3700) <= 0x38 && ((1 << (a1 - 116)) & 0x1FC0000000003FFLL) != 0
      || (unint64_t)(a1 - 3600) < 0xA)
    {
      return 1;
    }
  }
  else
  {
    if (a1 > 5199)
    {
      if (a1 > 5999)
      {
        if (a1 <= 6099)
        {
          unint64_t v7 = a1 - 6000;
          if (v7 > 0x24 || ((1 << v7) & 0x1FC000FFFFLL) == 0) {
            return result;
          }
          return 1;
        }
        if (a1 <= 6299)
        {
          if ((unint64_t)(a1 - 6100) < 0x12) {
            return 1;
          }
          uint64_t v3 = -6200;
          goto LABEL_55;
        }
        if (a1 > 6499)
        {
          if ((unint64_t)(a1 - 6500) >= 9 && (unint64_t)(a1 - 6600) > 1) {
            return result;
          }
          return 1;
        }
        if ((unint64_t)(a1 - 6300) < 2) {
          return 1;
        }
        uint64_t v9 = -6400;
LABEL_106:
        unint64_t v4 = a1 + v9;
        goto LABEL_107;
      }
      if (a1 > 5499)
      {
        if ((unint64_t)(a1 - 5500) < 0xD || (unint64_t)(a1 - 5600) < 3) {
          return 1;
        }
        uint64_t v3 = -5701;
LABEL_55:
        unint64_t v5 = a1 + v3;
        goto LABEL_69;
      }
      if ((unint64_t)(a1 - 5200) < 9 || (unint64_t)(a1 - 5400) < 5) {
        return 1;
      }
      unint64_t v8 = a1 - 5300;
LABEL_92:
      if (v8 >= 4) {
        return result;
      }
      return 1;
    }
    if (a1 > 4699)
    {
      if (a1 <= 4799)
      {
        if ((unint64_t)(a1 - 4700) >= 0xE) {
          return result;
        }
        return 1;
      }
      if (a1 <= 4899)
      {
        unint64_t v6 = a1 - 4800;
LABEL_110:
        if (v6 >= 5) {
          return result;
        }
        return 1;
      }
      if ((unint64_t)(a1 - 4900) < 3 || (unint64_t)(a1 - 5000) < 2) {
        return 1;
      }
      uint64_t v9 = -5100;
      goto LABEL_106;
    }
    switch(a1)
    {
      case 4500:
      case 4501:
      case 4502:
      case 4503:
      case 4504:
      case 4505:
      case 4506:
      case 4507:
      case 4508:
      case 4509:
      case 4510:
      case 4511:
      case 4512:
      case 4513:
      case 4514:
      case 4515:
      case 4516:
      case 4517:
      case 4518:
      case 4519:
      case 4520:
      case 4521:
      case 4522:
      case 4523:
      case 4524:
      case 4525:
      case 4526:
      case 4528:
      case 4529:
      case 4560:
      case 4561:
      case 4570:
      case 4575:
      case 4585:
      case 4586:
      case 4587:
      case 4588:
      case 4589:
      case 4600:
      case 4601:
      case 4602:
      case 4603:
      case 4604:
      case 4605:
        return 1;
      case 4527:
      case 4530:
      case 4531:
      case 4532:
      case 4533:
      case 4534:
      case 4535:
      case 4536:
      case 4537:
      case 4538:
      case 4539:
      case 4540:
      case 4541:
      case 4542:
      case 4543:
      case 4544:
      case 4545:
      case 4546:
      case 4547:
      case 4548:
      case 4549:
      case 4550:
      case 4551:
      case 4552:
      case 4553:
      case 4554:
      case 4555:
      case 4556:
      case 4557:
      case 4558:
      case 4559:
      case 4562:
      case 4563:
      case 4564:
      case 4565:
      case 4566:
      case 4567:
      case 4568:
      case 4569:
      case 4571:
      case 4572:
      case 4573:
      case 4574:
      case 4576:
      case 4577:
      case 4578:
      case 4579:
      case 4580:
      case 4581:
      case 4582:
      case 4583:
      case 4584:
      case 4590:
      case 4591:
      case 4592:
      case 4593:
      case 4594:
      case 4595:
      case 4596:
      case 4597:
      case 4598:
      case 4599:
        return result;
      default:
        if ((unint64_t)(a1 - 4300) <= 0xA && ((1 << (a1 + 52)) & 0x4FF) != 0
          || (unint64_t)(a1 - 4400) < 8)
        {
          return 1;
        }
        break;
    }
  }
  return result;
}

void sub_19CF8189C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__8732(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__8733(uint64_t a1)
{
}

void sub_19CF81DAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t validationOfObjectWithClassType(void *a1, void *a2)
{
  id v3 = a1;
  unint64_t v4 = a2;
  if (v3
    && ([MEMORY[0x1E4F1CA98] null],
        unint64_t v5 = objc_claimAutoreleasedReturnValue(),
        char v6 = [v3 isEqual:v5],
        v5,
        (v6 & 1) == 0))
  {
    NSClassFromString(v4);
    char isKindOfClass = objc_opt_isKindOfClass();
  }
  else
  {
    char isKindOfClass = 1;
  }

  return isKindOfClass & 1;
}

void sub_19CF83F38(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

BOOL AFSpeechEndpointerOperationModeGetIsValid(unint64_t a1)
{
  return a1 < 5;
}

BOOL AFSpeechEndpointerOperationModeGetIsValidAndSpecified(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 4;
}

__CFString *AFSpeechEndpointerOperationModeGetName(unint64_t a1)
{
  if (a1 > 4) {
    return @"(unknown)";
  }
  else {
    return off_1E5925E18[a1];
  }
}

uint64_t AFSpeechEndpointerOperationModeGetFromName(void *a1)
{
  id v1 = a1;
  if ([v1 length])
  {
    if (AFSpeechEndpointerOperationModeGetFromName_onceToken != -1) {
      dispatch_once(&AFSpeechEndpointerOperationModeGetFromName_onceToken, &__block_literal_global_8933);
    }
    id v2 = [(id)AFSpeechEndpointerOperationModeGetFromName_map objectForKey:v1];
    uint64_t v3 = [v2 integerValue];
  }
  else
  {
    uint64_t v3 = 0;
  }

  return v3;
}

void __AFSpeechEndpointerOperationModeGetFromName_block_invoke()
{
  uint64_t v0 = (void *)AFSpeechEndpointerOperationModeGetFromName_map;
  AFSpeechEndpointerOperationModeGetFromName_map = (uint64_t)&unk_1EEE98888;
}

id initNPSManager()
{
  if (initNPSManager_sOnce != -1) {
    dispatch_once(&initNPSManager_sOnce, &__block_literal_global_2105);
  }
  uint64_t v0 = (void *)classNPSManager;
  return v0;
}

Class __initNPSManager_block_invoke()
{
  NanoPreferencesSyncLibrary();
  Class result = objc_getClass("NPSManager");
  classNPSManager = (uint64_t)result;
  if (!result) {
    __assert_rtn("initNPSManager_block_invoke", "AFPreferences.m", 57, "classNPSManager");
  }
  getNPSManagerClass = NPSManagerFunction;
  return result;
}

void NanoPreferencesSyncLibrary()
{
  if (!NanoPreferencesSyncLibrary_frameworkLibrary)
  {
    NanoPreferencesSyncLibrary_frameworkLibrary = (uint64_t)dlopen("/System/Library/PrivateFrameworks/NanoPreferencesSync.framework/NanoPreferencesSync", 2);
    if (!NanoPreferencesSyncLibrary_frameworkLibrary) {
      __assert_rtn("NanoPreferencesSyncLibrary", "AFPreferences.m", 56, "frameworkLibrary");
    }
  }
}

id NPSManagerFunction()
{
  return (id)classNPSManager;
}

id initNPSDomainAccessor()
{
  if (initNPSDomainAccessor_sOnce != -1) {
    dispatch_once(&initNPSDomainAccessor_sOnce, &__block_literal_global_2100);
  }
  uint64_t v0 = (void *)classNPSDomainAccessor;
  return v0;
}

Class __initNPSDomainAccessor_block_invoke()
{
  NanoPreferencesSyncLibrary();
  Class result = objc_getClass("NPSDomainAccessor");
  classNPSDomainAccessor = (uint64_t)result;
  if (!result) {
    __assert_rtn("initNPSDomainAccessor_block_invoke", "AFPreferences.m", 58, "classNPSDomainAccessor");
  }
  getNPSDomainAccessorClass = (uint64_t (*)())NPSDomainAccessorFunction;
  return result;
}

id NPSDomainAccessorFunction()
{
  return (id)classNPSDomainAccessor;
}

void _AFNanoPreferencesSetValueForKey(void *a1, uint64_t a2)
{
  uint64_t v3 = getNPSDomainAccessorClass;
  id v4 = a1;
  id v9 = (id)[objc_alloc((Class)v3()) initWithDomain:@"com.apple.assistant.nano"];
  [v9 setObject:v4 forKey:a2];

  id v5 = (id)[v9 synchronize];
  getNPSManagerClass();
  char v6 = objc_opt_new();
  unint64_t v7 = [MEMORY[0x1E4F1CAD0] setWithObject:a2];
  [v6 synchronizeNanoDomain:@"com.apple.assistant.nano" keys:v7];

  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, @"com.apple.assistant.nano.preferences.did_change.internal", 0, 0, 1u);
}

id _AFNanoPreferencesValueForKey(uint64_t a1)
{
  id v2 = (void *)[objc_alloc((Class)getNPSDomainAccessorClass()) initWithDomain:@"com.apple.assistant.nano"];
  id v3 = (id)[v2 synchronize];
  id v4 = [v2 objectForKey:a1];

  return v4;
}

void _AFPreferencesSetValueForKeyWithContext(void *a1, const __CFString *a2, const __CFString *a3, void *a4)
{
  id value = a1;
  unint64_t v7 = [a4 preferencesSubdomain];
  if (v7)
  {
    unint64_t v8 = (__CFString *)[[NSString alloc] initWithFormat:@"%@/%@", v7, a2];
    CFPreferencesSetAppValue(v8, value, a3);
  }
  else
  {
    CFPreferencesSetAppValue(a2, value, a3);
  }
}

uint64_t _AFPreferencesNetworkLoggingEnabled()
{
  uint64_t v0 = _AFPreferencesValueForKeyWithContext(@"Network Logging Enabled", @"com.apple.assistant", 0);
  uint64_t v1 = [v0 BOOLValue];

  return v1;
}

void _AFPreferencesSetNetworkLoggingEnabled(uint64_t a1)
{
  id v1 = [MEMORY[0x1E4F28ED0] numberWithBool:a1];
  _AFPreferencesSetValueForKeyWithContext(v1, @"Network Logging Enabled", @"com.apple.assistant", 0);
}

uint64_t _AFPreferencesKeepRecorededAudioFiles()
{
  uint64_t v0 = (void *)CFPreferencesCopyValue(@"Keep Recorded Audio Files", @"com.apple.assistant", @"mobile", (CFStringRef)*MEMORY[0x1E4F1D3E0]);
  if (v0 && (objc_opt_respondsToSelector() & 1) != 0) {
    uint64_t v1 = [v0 BOOLValue];
  }
  else {
    uint64_t v1 = 0;
  }

  return v1;
}

BOOL _AFPreferencesDictationOnDeviceSamplingDisabled()
{
  uint64_t v0 = (void *)[objc_alloc(MEMORY[0x1E4F1CB18]) initWithSuiteName:@"com.apple.internal.ck"];
  uint64_t v1 = [v0 objectForKey:@"DictationOnDeviceSamplingDisabled"];
  BOOL v2 = 0;
  if (v1)
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass() & 1) != 0 && ([v1 BOOLValue]) {
      BOOL v2 = 1;
    }
  }

  return v2;
}

uint64_t _AFPreferencesDictationLanguageDetectorEnabledByServer()
{
  uint64_t v0 = _AFPreferencesValueForKeyWithContext(@"Dictation Language Detector Enabled By Server", @"com.apple.assistant", 0);
  uint64_t v1 = v0;
  if (v0) {
    uint64_t v2 = [v0 BOOLValue];
  }
  else {
    uint64_t v2 = 1;
  }

  return v2;
}

uint64_t _AFPreferencesDictationLanguageDetectorEnabled()
{
  if (AFIsInternalInstall_onceToken != -1) {
    dispatch_once(&AFIsInternalInstall_onceToken, &__block_literal_global_158);
  }
  if (!AFIsInternalInstall_isInternal) {
    return 1;
  }
  uint64_t v0 = _AFPreferencesValueForKeyWithContext(@"Dictation Language Detector Enabled", @"com.apple.assistant", 0);
  uint64_t v1 = v0;
  if (v0) {
    uint64_t v2 = [v0 BOOLValue];
  }
  else {
    uint64_t v2 = 1;
  }

  return v2;
}

uint64_t _AFPreferencesSetDictationLanguageDetectorEnabled(uint64_t a1)
{
  uint64_t v1 = [MEMORY[0x1E4F28ED0] numberWithBool:a1];
  _AFPreferencesSetValueForKeyWithContext(v1, @"Dictation Language Detector Enabled", @"com.apple.assistant", 0);

  return CFPreferencesAppSynchronize(@"com.apple.assistant");
}

uint64_t AFPreferencesTypeToSiriEnabled()
{
  uint64_t v0 = _AFPreferencesValueForKeyWithContext(@"Type To Siri Enabled", @"com.apple.assistant.backedup", 0);
  uint64_t v1 = v0;
  if (v0) {
    uint64_t v2 = [v0 BOOLValue];
  }
  else {
    uint64_t v2 = 0;
  }

  return v2;
}

AFVoiceInfo *_AFPreferencesOutputVoiceWithContext(void *a1)
{
  uint64_t v1 = _AFPreferencesValueForKeyWithContext(@"Output Voice", @"com.apple.assistant.backedup", a1);
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    uint64_t v2 = [[AFVoiceInfo alloc] initWithDictionaryRepresentation:v1];
  }
  else {
    uint64_t v2 = 0;
  }

  return v2;
}

uint64_t AFPreferencesLanguageIsSupported(void *a1)
{
  id v1 = a1;
  uint64_t v2 = AFPreferencesSupportedLanguages();
  if (([v2 containsObject:v1] & 1) == 0)
  {
    if (v1)
    {
      id v4 = _AFPreferencesAlternativeLocaleLanguages();
      id v5 = [v4 objectForKey:v1];

      if (v5)
      {
        int v3 = (int)([v2 containsObject:v5] << 31) >> 31;
LABEL_8:

        goto LABEL_9;
      }
    }
    else
    {
      id v5 = 0;
    }
    LOBYTE(v3) = 0;
    goto LABEL_8;
  }
  LOBYTE(v3) = 1;
LABEL_9:

  return v3 & 1;
}

id _AFPreferencesBuiltInVisionLanguages()
{
  v2[1] = *MEMORY[0x1E4F143B8];
  v2[0] = @"en-US";
  uint64_t v0 = [MEMORY[0x1E4F1C978] arrayWithObjects:v2 count:1];
  return v0;
}

void _AFPreferencesSetInProgressOutputVoice(void *a1)
{
  id v1 = [a1 dictionaryRepresentation];
  _AFPreferencesSetValueForKeyWithContext(v1, @"In Progress Output Voice", @"com.apple.assistant.backedup", 0);
}

AFVoiceInfo *_AFPreferencesInProgressOutputVoice()
{
  uint64_t v0 = _AFPreferencesValueForKeyWithContext(@"In Progress Output Voice", @"com.apple.assistant.backedup", 0);
  objc_opt_class();
  id v1 = 0;
  if (objc_opt_isKindOfClass()) {
    id v1 = [[AFVoiceInfo alloc] initWithDictionaryRepresentation:v0];
  }

  return v1;
}

id initTIInputModeController()
{
  if (initTIInputModeController_sOnce != -1) {
    dispatch_once(&initTIInputModeController_sOnce, &__block_literal_global_2087);
  }
  uint64_t v0 = (void *)classTIInputModeController;
  return v0;
}

Class __initTIInputModeController_block_invoke()
{
  if (TextInputLibrary_sOnce != -1) {
    dispatch_once(&TextInputLibrary_sOnce, &__block_literal_global_2090);
  }
  Class result = objc_getClass("TIInputModeController");
  classTIInputModeController = (uint64_t)result;
  getTIInputModeControllerClass = TIInputModeControllerFunction;
  return result;
}

id TIInputModeControllerFunction()
{
  return (id)classTIInputModeController;
}

void *__TextInputLibrary_block_invoke()
{
  Class result = dlopen("/System/Library/Frameworks/TextInput.framework/TextInput", 2);
  TextInputLibrary_sLib = (uint64_t)result;
  return result;
}

id _AFBestEffortNormalizedLanguageIdentifier(void *a1)
{
  id v1 = [a1 componentsSeparatedByString:@"@"];
  uint64_t v2 = [v1 firstObject];

  int v3 = [v2 stringByReplacingOccurrencesOfString:@"-" withString:@"_"];

  return v3;
}

void _AFPreferencesSetEnabledNonFullScreen(uint64_t a1)
{
  id v1 = [MEMORY[0x1E4F28ED0] numberWithBool:a1];
  _AFPreferencesSetValueForKeyWithContext(v1, @"Enable the New Siri appearance for iOS", @"com.apple.assistant", 0);
}

uint64_t _AFPreferencesEnabledNonFullScreen()
{
  uint64_t v0 = _AFPreferencesValueForKeyWithContext(@"Enable the New Siri appearance for iOS", @"com.apple.assistant", 0);
  id v1 = v0;
  if (v0) {
    uint64_t v2 = [v0 BOOLValue];
  }
  else {
    uint64_t v2 = 0;
  }

  return v2;
}

void _AFPreferencesSetEnabledDragAndDrop(uint64_t a1)
{
  id v1 = [MEMORY[0x1E4F28ED0] numberWithBool:a1];
  _AFPreferencesSetValueForKeyWithContext(v1, @"Enable Drag And Drop Feature for iOS", @"com.apple.assistant", 0);
}

uint64_t _AFPreferencesEnabledDragAndDrop()
{
  uint64_t v0 = _AFPreferencesValueForKeyWithContext(@"Enable Drag And Drop Feature for iOS", @"com.apple.assistant", 0);
  id v1 = v0;
  if (v0) {
    uint64_t v2 = [v0 BOOLValue];
  }
  else {
    uint64_t v2 = 0;
  }

  return v2;
}

void _AFPreferencesSetFeedbackBannerForNearMissesEnabled(uint64_t a1)
{
  id v1 = [MEMORY[0x1E4F28ED0] numberWithBool:a1];
  _AFPreferencesSetValueForKeyWithContext(v1, @"Enable Feedback Banner for Near Misses", @"com.apple.assistant.backedup", 0);
}

void _AFPreferencesSetFeedbackBannerForAcceptsEnabled(uint64_t a1)
{
  id v1 = [MEMORY[0x1E4F28ED0] numberWithBool:a1];
  _AFPreferencesSetValueForKeyWithContext(v1, @"Enable Feedback Banner for Accepts", @"com.apple.assistant.backedup", 0);
}

void _AFPreferencesSetEnableSpeakerGradingDebugUI(uint64_t a1)
{
  id v1 = [MEMORY[0x1E4F28ED0] numberWithBool:a1];
  _AFPreferencesSetValueForKeyWithContext(v1, @"Enable Speaker Grading Debug UI", @"com.apple.assistant", 0);
}

uint64_t _AFPreferencesEnableSpeakerGradingDebugUI()
{
  if (AFIsInternalInstall_onceToken != -1) {
    dispatch_once(&AFIsInternalInstall_onceToken, &__block_literal_global_158);
  }
  if (!AFIsInternalInstall_isInternal) {
    return 0;
  }
  uint64_t v0 = _AFPreferencesValueForKeyWithContext(@"Enable Speaker Grading Debug UI", @"com.apple.assistant", 0);
  id v1 = v0;
  if (v0) {
    uint64_t v2 = [v0 BOOLValue];
  }
  else {
    uint64_t v2 = 1;
  }

  return v2;
}

void _AFPreferencesSetDeviceUnlockSignal(uint64_t a1)
{
  id v1 = [MEMORY[0x1E4F28ED0] numberWithBool:a1];
  _AFPreferencesSetValueForKeyWithContext(v1, @"Enable Phone Unlocked Signal", @"com.apple.assistant", 0);
}

uint64_t _AFPreferencesDeviceUnlockSignalEnabled()
{
  uint64_t v0 = _AFPreferencesValueForKeyWithContext(@"Enable Phone Unlocked Signal", @"com.apple.assistant", 0);
  id v1 = v0;
  if (v0) {
    uint64_t v2 = [v0 BOOLValue];
  }
  else {
    uint64_t v2 = 1;
  }

  return v2;
}

void _AFPreferencesSetOverrideModeWhileInAmbient(uint64_t a1)
{
  id v1 = [MEMORY[0x1E4F28ED0] numberWithBool:a1];
  _AFPreferencesSetValueForKeyWithContext(v1, @"Enable Override Mode When In Ambient", @"com.apple.assistant", 0);
}

uint64_t _AFPreferencesOverrideModeWhileInAmbient()
{
  uint64_t v0 = _AFPreferencesValueForKeyWithContext(@"Enable Override Mode When In Ambient", @"com.apple.assistant", 0);
  id v1 = v0;
  if (v0) {
    uint64_t v2 = [v0 BOOLValue];
  }
  else {
    uint64_t v2 = 0;
  }

  return v2;
}

void _AFPreferencesSetAlwaysInAmbient(uint64_t a1)
{
  id v1 = [MEMORY[0x1E4F28ED0] numberWithBool:a1];
  _AFPreferencesSetValueForKeyWithContext(v1, @"Enable Always In Ambient", @"com.apple.assistant", 0);
}

uint64_t _AFPreferencesAlwaysInAmbient()
{
  uint64_t v0 = _AFPreferencesValueForKeyWithContext(@"Enable Always In Ambient", @"com.apple.assistant", 0);
  id v1 = v0;
  if (v0) {
    uint64_t v2 = [v0 BOOLValue];
  }
  else {
    uint64_t v2 = 0;
  }

  return v2;
}

void _AFPreferencesSetEnableSiriDebugUI(uint64_t a1)
{
  id v1 = [MEMORY[0x1E4F28ED0] numberWithBool:a1];
  _AFPreferencesSetValueForKeyWithContext(v1, @"Enable Siri Debug UI", @"com.apple.assistant", 0);
}

uint64_t _AFPreferencesEnableSiriDebugUI()
{
  if (AFIsInternalInstall_onceToken != -1) {
    dispatch_once(&AFIsInternalInstall_onceToken, &__block_literal_global_158);
  }
  if (!AFIsInternalInstall_isInternal) {
    return 0;
  }
  uint64_t v0 = _AFPreferencesValueForKeyWithContext(@"Enable Siri Debug UI", @"com.apple.assistant", 0);
  id v1 = v0;
  if (v0) {
    uint64_t v2 = [v0 BOOLValue];
  }
  else {
    uint64_t v2 = 1;
  }

  return v2;
}

uint64_t _AFPreferencesIncludeProbePacketCaptureForABC()
{
  uint64_t v0 = _AFPreferencesValueForKeyWithContext(@"Include Probe Packet Capture For ABC", @"com.apple.assistant", 0);
  id v1 = v0;
  if (v0) {
    uint64_t v2 = [v0 BOOLValue];
  }
  else {
    uint64_t v2 = 0;
  }

  return v2;
}

uint64_t _AFPreferencesDatabaseSyncingEnabled()
{
  uint64_t v0 = _AFPreferencesValueForKeyWithContext(@"Enable Database Syncing", @"com.apple.assistant", 0);
  if (v0 && (objc_opt_respondsToSelector() & 1) != 0) {
    uint64_t v1 = [v0 BOOLValue];
  }
  else {
    uint64_t v1 = 0;
  }

  return v1;
}

void _AFPreferencesSetDatabaseSyncingEnabled(uint64_t a1)
{
  id v1 = [MEMORY[0x1E4F28ED0] numberWithBool:a1];
  _AFPreferencesSetValueForKeyWithContext(v1, @"Enable Database Syncing", @"com.apple.assistant", 0);
}

void _AFPreferencesSetLimitedPersistentAudioLogging(uint64_t a1)
{
  id v1 = [MEMORY[0x1E4F28ED0] numberWithBool:a1];
  _AFPreferencesSetValueForKeyWithContext(v1, @"Limited Audio Logging", @"com.apple.assistant", 0);
}

uint64_t _AFPreferencesLimitedPersistentAudioLogging()
{
  uint64_t v0 = _AFPreferencesValueForKeyWithContext(@"Limited Audio Logging", @"com.apple.assistant", 0);
  if (v0 && (objc_opt_respondsToSelector() & 1) != 0) {
    uint64_t v1 = [v0 BOOLValue];
  }
  else {
    uint64_t v1 = 0;
  }

  return v1;
}

void _AFPreferencesSetOpportuneSpeakingFileLoggingIsEnabled(uint64_t a1)
{
  id v1 = [MEMORY[0x1E4F28ED0] numberWithBool:a1];
  _AFPreferencesSetValueForKeyWithContext(v1, @"Opportune Speaking File Logging Enabled", @"com.apple.assistant", 0);
}

uint64_t _AFPreferencesOpportuneSpeakingFileLoggingIsEnabled()
{
  uint64_t v0 = _AFPreferencesValueForKeyWithContext(@"Opportune Speaking File Logging Enabled", @"com.apple.assistant", 0);
  id v1 = v0;
  if (v0) {
    uint64_t v2 = [v0 BOOLValue];
  }
  else {
    uint64_t v2 = 0;
  }

  return v2;
}

void _AFPreferencesSetOpportuneSpeakingTimeout(double a1)
{
  *(float *)&a1 = a1;
  id v1 = [MEMORY[0x1E4F28ED0] numberWithFloat:a1];
  _AFPreferencesSetValueForKeyWithContext(v1, @"Opportune Speaking Timeout", @"com.apple.assistant", 0);
}

double _AFPreferencesOpportuneSpeakingTimeout()
{
  uint64_t v0 = _AFPreferencesValueForKeyWithContext(@"Opportune Speaking Timeout", @"com.apple.assistant", 0);
  id v1 = v0;
  if (v0)
  {
    [v0 floatValue];
    double v3 = v2;
  }
  else
  {
    double v3 = 7.0;
  }

  return v3;
}

void _AFPreferencesSetOpportuneSpeakingPause(double a1)
{
  *(float *)&a1 = a1;
  id v1 = [MEMORY[0x1E4F28ED0] numberWithFloat:a1];
  _AFPreferencesSetValueForKeyWithContext(v1, @"Opportune Speaking Pause", @"com.apple.assistant", 0);
}

double _AFPreferencesOpportuneSpeakingPause()
{
  uint64_t v0 = _AFPreferencesValueForKeyWithContext(@"Opportune Speaking Pause", @"com.apple.assistant", 0);
  objc_opt_class();
  double v1 = 3.0;
  if (objc_opt_isKindOfClass())
  {
    [v0 floatValue];
    double v1 = v2;
  }

  return v1;
}

void _AFPreferencesEnableBLECompanionConnections(uint64_t a1)
{
  id v1 = [MEMORY[0x1E4F28ED0] numberWithBool:a1];
  _AFPreferencesSetValueForKeyWithContext(v1, @"Enable BLE Companion Connections", @"com.apple.assistant", 0);
}

uint64_t _AFPreferencesBLECompanionConnectionsEnabled()
{
  uint64_t v0 = _AFPreferencesValueForKeyWithContext(@"Enable BLE Companion Connections", @"com.apple.assistant", 0);
  id v1 = v0;
  if (v0) {
    uint64_t v2 = [v0 BOOLValue];
  }
  else {
    uint64_t v2 = 0;
  }

  return v2;
}

void AFPreferencesSetStreamingDictationEnabled(char a1)
{
  if (a1)
  {
    id v2 = [MEMORY[0x1E4F28ED0] numberWithBool:1];
    _AFPreferencesSetValueForKeyWithContext(v2, @"Streaming Dictation Enabled", @"com.apple.assistant", 0);
  }
  else
  {
    _AFPreferencesSetValueForKeyWithContext(0, @"Streaming Dictation Enabled", @"com.apple.assistant", 0);
  }
}

uint64_t AFPreferencesStreamingDictationEnabled()
{
  CFPreferencesAppSynchronize(@"com.apple.assistant");
  uint64_t v0 = _AFPreferencesValueForKeyWithContext(@"Streaming Dictation Enabled", @"com.apple.assistant", 0);
  uint64_t v1 = v0;
  if (v0) {
    uint64_t v2 = [v0 BOOLValue];
  }
  else {
    uint64_t v2 = 1;
  }

  return v2;
}

id AFPreferencesManualEndpointingThreshold()
{
  CFPreferencesAppSynchronize(@"com.apple.assistant");
  uint64_t v0 = _AFPreferencesValueForKeyWithContext(@"Manual Endpointing Threshold", @"com.apple.assistant", 0);
  if (!v0) {
    uint64_t v0 = &unk_1EEE997C0;
  }
  return v0;
}

void AFPreferencesSetIgnoreServerManualEndpointingThreshold(char a1)
{
  if (a1)
  {
    id v2 = [MEMORY[0x1E4F28ED0] numberWithBool:1];
    _AFPreferencesSetValueForKeyWithContext(v2, @"Ignore Server Manual Endpointing Threshold", @"com.apple.assistant", 0);
  }
  else
  {
    _AFPreferencesSetValueForKeyWithContext(0, @"Ignore Server Manual Endpointing Threshold", @"com.apple.assistant", 0);
  }
}

uint64_t AFPreferencesIgnoreServerManualEndpointingThreshold()
{
  CFPreferencesAppSynchronize(@"com.apple.assistant");
  uint64_t v0 = _AFPreferencesValueForKeyWithContext(@"Ignore Server Manual Endpointing Threshold", @"com.apple.assistant", 0);
  uint64_t v1 = [v0 BOOLValue];

  return v1;
}

void sub_19CF8E5A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__9959(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__9960(uint64_t a1)
{
}

void sub_19CF8E790(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19CF8EA04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19CF8EC28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void _AFPreferencesSetSiriDesignModeEnabled(uint64_t a1)
{
  id v1 = [MEMORY[0x1E4F28ED0] numberWithBool:a1];
  _AFPreferencesSetValueForKeyWithContext(v1, @"HI/CI Design Mode", @"com.apple.assistant.support", 0);
}

id initVTPreferences()
{
  if (initVTPreferences_sOnce != -1) {
    dispatch_once(&initVTPreferences_sOnce, &__block_literal_global_2033);
  }
  uint64_t v0 = (void *)classVTPreferences;
  return v0;
}

Class __initVTPreferences_block_invoke()
{
  if (!VoiceTriggerLibrary_frameworkLibrary)
  {
    VoiceTriggerLibrary_frameworkLibrary = (uint64_t)dlopen("/System/Library/PrivateFrameworks/VoiceTrigger.framework/VoiceTrigger", 2);
    if (!VoiceTriggerLibrary_frameworkLibrary) {
      __assert_rtn("VoiceTriggerLibrary", "AFPreferences.m", 75, "frameworkLibrary");
    }
  }
  Class result = objc_getClass("VTPreferences");
  classVTPreferences = (uint64_t)result;
  if (!result) {
    __assert_rtn("initVTPreferences_block_invoke", "AFPreferences.m", 76, "classVTPreferences");
  }
  getVTPreferencesClass = VTPreferencesFunction;
  return result;
}

id VTPreferencesFunction()
{
  return (id)classVTPreferences;
}

id _AFHashedBluetoothAddressForDiscoveryNotification(void *a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  id v2 = [@"*^&9aM&A#^&Sn" dataUsingEncoding:4];
  double v3 = [v1 uppercaseString];

  id v4 = [v3 dataUsingEncoding:4];

  id v10 = 0;
  id v5 = AFSecurityDigestChunksWithProvider(v4, 1u, v2, 1, &v10);
  id v6 = v10;
  if (v6)
  {
    unint64_t v7 = AFSiriLogContextDaemon;
    if (os_log_type_enabled((os_log_t)AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      uint64_t v12 = "_AFHashedBluetoothAddressForDiscoveryNotification";
      __int16 v13 = 2112;
      id v14 = v6;
      _os_log_error_impl(&dword_19CF1D000, v7, OS_LOG_TYPE_ERROR, "%s Failed to generate hashed Bluetooth address due to error: %@", buf, 0x16u);
    }
    unint64_t v8 = 0;
  }
  else
  {
    unint64_t v8 = [NSString hexStringFromData:v5];
  }

  return v8;
}

uint64_t _AFPreferencesGetMessageWithoutConfirmationHeadphonesEnabled()
{
  uint64_t v0 = _AFPreferencesValueForKeyWithContext(@"Message Without Confirmation in Headphones", @"com.apple.assistant.backedup", 0);
  id v1 = v0;
  if (v0) {
    uint64_t v2 = [v0 BOOLValue];
  }
  else {
    uint64_t v2 = 0;
  }

  return v2;
}

void _AFPreferencesSetLongLivedIdentifierUploadingEnabled(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (void *)AFSiriLogContextConnection;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_DEBUG))
  {
    id v5 = (void *)MEMORY[0x1E4F28ED0];
    id v6 = v2;
    unint64_t v7 = [v5 numberWithBool:a1];
    int v8 = 136315394;
    id v9 = "_AFPreferencesSetLongLivedIdentifierUploadingEnabled";
    __int16 v10 = 2112;
    id v11 = v7;
    _os_log_debug_impl(&dword_19CF1D000, v6, OS_LOG_TYPE_DEBUG, "%s #RPI Setting long-lived IDs uploading to %@", (uint8_t *)&v8, 0x16u);
  }
  double v3 = [MEMORY[0x1E4F28ED0] numberWithBool:a1];
  _AFPreferencesSetValueForKeyWithContext(v3, @"Long Lived Identifier Uploading", @"com.apple.assistant", 0);

  CFPreferencesAppSynchronize(@"com.apple.assistant");
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, @"kAFPreferencesDidChangeDarwinNotification", 0, 0, 1u);
}

uint64_t _AFPreferencesLongLivedIdentifierUploadingEnabled()
{
  if (!AFDeviceSupportsRemovalOfPersistentIDs()) {
    return 1;
  }
  if (AFIsInternalInstall_onceToken != -1) {
    dispatch_once(&AFIsInternalInstall_onceToken, &__block_literal_global_158);
  }
  if (AFIsInternalInstall_isInternal
    && +[AFFeatureFlags isPersistentIDLoggingInternalBuildRuleEnabled])
  {
    uint64_t result = +[AFFeatureFlags isPersistentIDLoggingInternalSettingEnabled];
    if (result)
    {
      return _AFPreferencesValueForLongLivedIdentifierUploadingKey();
    }
  }
  else
  {
    if (+[AFFeatureFlags isPersistentIDLoggingDisabledForType:](AFFeatureFlags, "isPersistentIDLoggingDisabledForType:", 14)|| +[AFFeatureFlags isPersistentIDLoggingDisabledForType:](AFFeatureFlags, "isPersistentIDLoggingDisabledForType:", 13)|| +[AFFeatureFlags isPersistentIDLoggingDisabledForType:3])
    {
      goto LABEL_20;
    }
    if (AFHasGMSCapabilityUnembargoed_once != -1) {
      dispatch_once(&AFHasGMSCapabilityUnembargoed_once, &__block_literal_global_840);
    }
    if (AFHasGMSCapabilityUnembargoed_deviceSupportsGenerativeModelSystems
      && +[AFFeatureFlags isPersistentIDLoggingDisabledForType:](AFFeatureFlags, "isPersistentIDLoggingDisabledForType:", 1)|| +[AFFeatureFlags isPersistentIDLoggingDisabledForType:9]&& (AFDeviceSupportsSiriUOD() & 1) != 0)
    {
LABEL_20:
      BOOL v1 = 0;
    }
    else if (+[AFFeatureFlags isPersistentIDLoggingDisabledForType:11])
    {
      BOOL v1 = !AFDeviceSupportsHybridUOD();
    }
    else
    {
      BOOL v1 = 1;
    }
    uint64_t v2 = +[AFPreferences sharedPreferences];
    uint64_t v3 = [v2 siriDataSharingOptInStatus];

    return v3 == 1 && v1;
  }
  return result;
}

uint64_t _AFPreferencesValueForLongLivedIdentifierUploadingKey()
{
  uint64_t v0 = _AFPreferencesValueForKeyWithContext(@"Long Lived Identifier Uploading", @"com.apple.assistant", 0);
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    uint64_t v1 = [v0 BOOLValue];
  }
  else {
    uint64_t v1 = 1;
  }

  return v1;
}

void _AFPreferencesSetSiriInCallEnabled(uint64_t a1)
{
  uint64_t v1 = [MEMORY[0x1E4F28ED0] numberWithBool:a1];
  _AFPreferencesSetValueForKeyWithContext(v1, @"Siri In Call", @"com.apple.assistant.backedup", 0);

  CFPreferencesAppSynchronize(@"com.apple.assistant.backedup");
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, @"kAFPreferencesDidChangeDarwinNotification", 0, 0, 1u);
}

uint64_t _AFPreferencesGetSiriInCallEnablementState()
{
  uint64_t v0 = _AFPreferencesValueForKeyWithContext(@"Siri In Call", @"com.apple.assistant.backedup", 0);
  uint64_t v1 = v0;
  if (v0)
  {
    if ([v0 BOOLValue]) {
      uint64_t v2 = 2;
    }
    else {
      uint64_t v2 = 1;
    }
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

uint64_t _AFPreferencesGetShowAppsBehindSiriInCarPlayEnabled()
{
  uint64_t v0 = _AFPreferencesValueForKeyWithContext(@"Show Apps Behind Siri in CarPlay", @"com.apple.assistant.backedup", 0);
  uint64_t v1 = v0;
  if (v0) {
    uint64_t v2 = [v0 BOOLValue];
  }
  else {
    uint64_t v2 = 1;
  }

  return v2;
}

void sub_19CF90118(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19CF90290(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _AFPreferencesGetMessageWithoutConfirmationInCarPlayEnabled()
{
  uint64_t v0 = _AFPreferencesValueForKeyWithContext(@"Message Without Confirmation in CarPlay", @"com.apple.assistant.backedup", 0);
  uint64_t v1 = v0;
  if (v0) {
    uint64_t v2 = [v0 BOOLValue];
  }
  else {
    uint64_t v2 = 0;
  }

  return v2;
}

void sub_19CF90530(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _AFPreferencesGetMessageWithoutConfirmationEnabled()
{
  uint64_t v0 = _AFPreferencesValueForKeyWithContext(@"Message Without Confirmation", @"com.apple.assistant.backedup", 0);
  uint64_t v1 = v0;
  if (v0) {
    uint64_t v2 = [v0 BOOLValue];
  }
  else {
    uint64_t v2 = 0;
  }

  return v2;
}

void sub_19CF907D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19CF90A10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19CF90C50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19CF90E8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19CF91114(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 144), 8);
  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_19CF91518(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19CF91784(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_19CF919B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _AFPreferencesAnnounceNotificationsOnHearingAidsSupported()
{
  uint64_t v0 = _AFPreferencesValueForKeyWithContext(@"Announce Notifications On Hearing Aids Supported", @"com.apple.assistant", 0);
  uint64_t v1 = v0;
  if (v0) {
    uint64_t v2 = [v0 BOOLValue];
  }
  else {
    uint64_t v2 = 0;
  }

  return v2;
}

void sub_19CF91D38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19CF91F18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void _AFPreferencesSetSpokenNotificationSkipTriggerlessReplyConfirmation(uint64_t a1)
{
  uint64_t v1 = [MEMORY[0x1E4F28ED0] numberWithBool:a1];
  _AFPreferencesSetValueForKeyWithContext(v1, @"Spoken Notification Skip Triggerless Reply Confirmation", @"com.apple.assistant.backedup", 0);

  CFPreferencesAppSynchronize(@"com.apple.assistant.backedup");
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, @"kAFPreferencesDidChangeDarwinNotification", 0, 0, 1u);
}

void _AFPreferencesRemoveThreadCancellationForApp(void *a1, void *a2)
{
  id v8 = a1;
  id v3 = a2;
  id v4 = _AFPreferencesLastAnnouncementThreadCancellationDicationary();
  id v5 = (void *)[objc_alloc(MEMORY[0x1E4F1CA60]) initWithDictionary:v4];
  if ([v8 length] && objc_msgSend(v3, "length"))
  {
    id v6 = [NSString stringWithFormat:@"%@/%@", v8, v3];
    [v5 removeObjectForKey:v6];
  }
  _AFPreferencesSetValueForKeyWithContext(v5, @"Announce Notifications Thread Cancellation History", @"com.apple.assistant.backedup", 0);
  CFPreferencesAppSynchronize(@"com.apple.assistant.backedup");
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, @"kAFPreferencesDidChangeDarwinNotification", 0, 0, 1u);
}

id _AFPreferencesLastAnnouncementThreadCancellationDicationary()
{
  uint64_t v0 = _AFPreferencesValueForKeyWithContext(@"Announce Notifications Thread Cancellation History", @"com.apple.assistant.backedup", 0);
  objc_opt_class();
  id v1 = 0;
  if (objc_opt_isKindOfClass()) {
    id v1 = v0;
  }

  return v1;
}

void _AFPreferencesInsertThreadCancellationForApp(void *a1, void *a2)
{
  id v9 = a1;
  id v3 = a2;
  id v4 = _AFPreferencesLastAnnouncementThreadCancellationDicationary();
  id v5 = (void *)[objc_alloc(MEMORY[0x1E4F1CA60]) initWithDictionary:v4];
  if ([v9 length] && objc_msgSend(v3, "length"))
  {
    id v6 = [NSString stringWithFormat:@"%@/%@", v9, v3];
    unint64_t v7 = [MEMORY[0x1E4F1C9C8] now];
    [v5 setObject:v7 forKey:v6];
  }
  _AFPreferencesSetValueForKeyWithContext(v5, @"Announce Notifications Thread Cancellation History", @"com.apple.assistant.backedup", 0);
  CFPreferencesAppSynchronize(@"com.apple.assistant.backedup");
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, @"kAFPreferencesDidChangeDarwinNotification", 0, 0, 1u);
}

BOOL _AFPreferencesLastAnnouncementInThreadWasCancelled(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 length] && objc_msgSend(v4, "length"))
  {
    id v5 = _AFPreferencesLastAnnouncementThreadCancellationDicationary();
    if (v5)
    {
      id v6 = [NSString stringWithFormat:@"%@/%@", v3, v4];
      unint64_t v7 = [v5 objectForKey:v6];
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        [v7 timeIntervalSinceNow];
        BOOL v9 = _AFPreferencesAnnounceNotificationThreadCancellationStaleThreshold() > -v8;
      }
      else
      {
        BOOL v9 = 0;
      }
    }
    else
    {
      BOOL v9 = 0;
    }
  }
  else
  {
    BOOL v9 = 0;
  }

  return v9;
}

double _AFPreferencesAnnounceNotificationThreadCancellationStaleThreshold()
{
  uint64_t v0 = _AFPreferencesValueForKeyWithContext(@"Announce Notifications Thread Cancellation State Threshold", @"com.apple.assistant", 0);
  id v1 = v0;
  if (v0)
  {
    [v0 doubleValue];
    double v3 = v2;
  }
  else
  {
    double v3 = 604800.0;
  }

  return v3;
}

void sub_19CF92708(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19CF92890(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19CF92A08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19CF92B90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19CF92D08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19CF92E90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id _AFPreferencesCloudSyncEnabledModificationDate()
{
  uint64_t v0 = _AFPreferencesValueForKeyWithContext(@"Cloud Sync Enabled Modification Date", @"com.apple.assistant.backedup", 0);
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v1 = v0;
  }
  else
  {
    id v1 = [MEMORY[0x1E4F1C9C8] distantPast];
  }
  double v2 = v1;

  return v2;
}

void _AFPreferencesEnableCloudSync(uint64_t a1)
{
  id v1 = [MEMORY[0x1E4F28ED0] numberWithBool:a1];
  _AFPreferencesSetValueForKeyWithContext(v1, @"Cloud Sync Enabled", @"com.apple.assistant.backedup", 0);
}

void _AFPreferencesSetSiriResponseShouldAlwaysPrintOverride(uint64_t a1)
{
  id v1 = [MEMORY[0x1E4F28ED0] numberWithBool:a1];
  _AFPreferencesSetValueForKeyWithContext(v1, @"Always Print Siri Response Override", @"com.apple.assistant.backedup", 0);
}

void _AFPreferencesSetSuppressDictationOptIn(uint64_t a1)
{
  id v1 = [MEMORY[0x1E4F28ED0] numberWithBool:a1];
  _AFPreferencesSetValueForKeyWithContext(v1, @"Suppress Dictation Opt In", @"com.apple.assistant.support", 0);
}

BOOL _AFPreferencesValueIsForcedWithContext(const __CFString *a1, const __CFString *a2, void *a3)
{
  id v5 = [a3 preferencesSubdomain];
  if (v5)
  {
    id v6 = (__CFString *)[[NSString alloc] initWithFormat:@"%@/%@", v5, a1];
    int IsForced = CFPreferencesAppValueIsForced(v6, a2);
  }
  else
  {
    int IsForced = CFPreferencesAppValueIsForced(a1, a2);
  }

  return IsForced != 0;
}

void sub_19CF93D54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

unint64_t _AFPreferencesSearchQueriesDataSharingStatusWithContext(void *a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  id v1 = _AFPreferencesValueForKeyWithContext(@"Search Queries Data Sharing Status", @"com.apple.assistant.support", a1);
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    unint64_t v2 = [v1 integerValue];
  }
  else {
    unint64_t v2 = 0;
  }
  double v3 = (void *)AFSiriLogContextConnection;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
  {
    id v4 = v3;
    if (v2 > 2) {
      id v5 = @"(unknown)";
    }
    else {
      id v5 = off_1E592A1C8[v2];
    }
    id v6 = v5;
    int v8 = 136315395;
    BOOL v9 = "_AFPreferencesSearchQueriesDataSharingStatusWithContext";
    __int16 v10 = 2113;
    id v11 = v6;
    _os_log_impl(&dword_19CF1D000, v4, OS_LOG_TYPE_INFO, "%s Search Queries Data Sharing status: %{private}@", (uint8_t *)&v8, 0x16u);
  }
  return v2;
}

uint64_t _AFPreferencesForceOnDeviceOnlyDictationEnabled()
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t v0 = [MEMORY[0x1E4F74230] sharedConnection];
  uint64_t v1 = [v0 isOnDeviceOnlyDictationForced];

  unint64_t v2 = AFSiriLogContextConnection;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
  {
    int v4 = 136315394;
    id v5 = "_AFPreferencesForceOnDeviceOnlyDictationEnabled";
    __int16 v6 = 1024;
    int v7 = v1;
    _os_log_impl(&dword_19CF1D000, v2, OS_LOG_TYPE_INFO, "%s HIPAA On-Device Dictation MDM flag is %d", (uint8_t *)&v4, 0x12u);
  }
  return v1;
}

void sub_19CF94D8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t AFInternalPreferencesSynchronize()
{
  return CFPreferencesAppSynchronize(@"com.apple.assistant");
}

void _AFPreferencesSetValueForKey(void *a1, const __CFString *a2)
{
}

id _AFPreferencesValueForKey(const __CFString *a1)
{
  return _AFPreferencesValueForKeyWithContext(a1, @"com.apple.assistant", 0);
}

uint64_t AFBackedUpPreferencesSynchronize()
{
  return CFPreferencesAppSynchronize(@"com.apple.assistant.backedup");
}

void _AFBackedUpPreferencesSetValueForKey(void *a1, const __CFString *a2)
{
}

id _AFBackedUpPreferencesValueForKey(const __CFString *a1)
{
  return _AFPreferencesValueForKeyWithContext(a1, @"com.apple.assistant.backedup", 0);
}

void _AFBackedUpPreferencesSetValueForKeyWithContext(void *a1, const __CFString *a2, void *a3)
{
}

id _AFBackedUpPreferencesValueForKeyWithContext(const __CFString *a1, void *a2)
{
  return _AFPreferencesValueForKeyWithContext(a1, @"com.apple.assistant.backedup", a2);
}

double _AFPreferencesDoubleForKeyWithDefault(const __CFString *a1, double a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  int v4 = _AFPreferencesValueForKeyWithContext(a1, @"com.apple.assistant", 0);
  if (objc_opt_respondsToSelector())
  {
    [v4 doubleValue];
    a2 = v5;
  }
  else
  {
    __int16 v6 = AFSiriLogContextConnection;
    if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_ERROR))
    {
      int v8 = 136315906;
      BOOL v9 = "_AFPreferencesDoubleForKeyWithDefault";
      __int16 v10 = 2048;
      double v11 = a2;
      __int16 v12 = 2112;
      CFStringRef v13 = a1;
      __int16 v14 = 2112;
      uint64_t v15 = v4;
      _os_log_error_impl(&dword_19CF1D000, v6, OS_LOG_TYPE_ERROR, "%s Expected a value responding to -doubleValue, but found something else. Returning %f. {key: %@, value: %@}", (uint8_t *)&v8, 0x2Au);
    }
  }

  return a2;
}

CFArrayRef _AFBackedUpPreferencesKeyList()
{
  CFArrayRef v0 = CFPreferencesCopyKeyList(@"com.apple.assistant.backedup", (CFStringRef)*MEMORY[0x1E4F1D3F0], (CFStringRef)*MEMORY[0x1E4F1D3C8]);
  return v0;
}

BOOL AFNavigationStateIsNavigating(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 3;
}

uint64_t AFSupportPreferencesSynchronize()
{
  return CFPreferencesAppSynchronize(@"com.apple.assistant.support");
}

void _AFSupportPreferencesSetValueForKey(void *a1, const __CFString *a2)
{
}

id _AFSupportPreferencesValueForKey(const __CFString *a1)
{
  return _AFPreferencesValueForKeyWithContext(a1, @"com.apple.assistant.support", 0);
}

uint64_t AFPreferencesAssistantEnabled()
{
  return _AFSupportPreferencesBoolForKeyWithDefault(@"Assistant Enabled", 0);
}

BOOL AFPreferencesTestAccessEnabled()
{
  return CFPreferencesGetAppBooleanValue(@"ADTestAccess", @"com.apple.assistant.support", 0) != 0;
}

uint64_t AFPreferencesSupplementalLanguagesModificationDate()
{
  return 0;
}

uint64_t AFPreferencesHorsemanSupplementalLanguageDictionary()
{
  return 0;
}

uint64_t AFPreferencesSupplementalLanguages()
{
  return 0;
}

id AFPreferencesMultiUserCompanionNotificationLanguageCodesForHomePodVersion(void *a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  unint64_t v2 = AFSiriLogContextConnection;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)double v11 = 136315394;
    *(void *)&v11[4] = "_AFPreferencesMultiUserCompanionNotificationLanguageCodesForHomePodVersion";
    *(_WORD *)&v11[12] = 2112;
    *(void *)&v11[14] = v1;
    _os_log_impl(&dword_19CF1D000, v2, OS_LOG_TYPE_INFO, "%s version=%@", v11, 0x16u);
  }
  if (objc_opt_respondsToSelector())
  {
    [v1 doubleValue];
    double v4 = v3;
    if (v3 >= 15.2)
    {
      *(_OWORD *)double v11 = xmmword_1E59264A0;
      *(_OWORD *)&v11[16] = unk_1E59264B0;
      long long v12 = xmmword_1E59264C0;
      long long v13 = unk_1E59264D0;
      id v7 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
      for (uint64_t i = 0; i != 64; i += 16)
      {
        if (*(double *)&v11[i] > v4) {
          break;
        }
        [v7 addObjectsFromArray:*(void *)&v11[i + 8]];
      }
      for (uint64_t j = 56; j != -8; j -= 16)

      goto LABEL_15;
    }
    double v5 = AFSiriLogContextConnection;
    if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)double v11 = 136315394;
      *(void *)&v11[4] = "_AFPreferencesMultiUserCompanionNotificationLanguageCodesForHomePodVersion";
      *(_WORD *)&v11[12] = 2048;
      *(double *)&v11[14] = v4;
      _os_log_impl(&dword_19CF1D000, v5, OS_LOG_TYPE_INFO, "%s Version number is smaller than 15.2. Returning an empty list. versionNum=%f", v11, 0x16u);
    }
  }
  else
  {
    __int16 v6 = AFSiriLogContextConnection;
    if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)double v11 = 136315394;
      *(void *)&v11[4] = "_AFPreferencesMultiUserCompanionNotificationLanguageCodesForHomePodVersion";
      *(_WORD *)&v11[12] = 2112;
      *(void *)&v11[14] = v1;
      _os_log_error_impl(&dword_19CF1D000, v6, OS_LOG_TYPE_ERROR, "%s Expected a double value for version number, but found something else. Returning an empty list. version=%@", v11, 0x16u);
    }
  }
  id v7 = (id)MEMORY[0x1E4F1CBF0];
LABEL_15:

  return v7;
}

void sub_19CF970AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  for (uint64_t i = 56; i != -8; i -= 16)

  _Unwind_Resume(a1);
}

uint64_t AFHasRMVCapableAppleTV()
{
  return 0;
}

id AFPreferencesSupportedLanguagesForStorefrontIdentifier(void *a1)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (+[AFFeatureFlags isTVPolyglotEnabled])
  {
    _AFPreferencesBuiltInLanguages();
    id v2 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    if (AFPreferencesSupportedLanguagesForStorefrontIdentifier_onceToken != -1) {
      dispatch_once(&AFPreferencesSupportedLanguagesForStorefrontIdentifier_onceToken, &__block_literal_global_576);
    }
    double v3 = _AFPreferencesBuiltInLanguages();
    uint64_t v21 = [(id)AFPreferencesSupportedLanguagesForStorefrontIdentifier_sStaticStorefrontMapping objectForKey:v1];
    id v4 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    long long v26 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    id v5 = v3;
    uint64_t v6 = [v5 countByEnumeratingWithState:&v26 objects:v31 count:16];
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v8 = *(void *)v27;
      do
      {
        for (uint64_t i = 0; i != v7; ++i)
        {
          if (*(void *)v27 != v8) {
            objc_enumerationMutation(v5);
          }
          __int16 v10 = *(void **)(*((void *)&v26 + 1) + 8 * i);
          double v11 = objc_msgSend(v10, "_afpreferences_languageCodePrefix");
          id v12 = [v4 objectForKey:v11];
          if (!v12) {
            id v12 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
          }
          [v12 addObject:v10];
          [v4 setObject:v12 forKey:v11];
        }
        uint64_t v7 = [v5 countByEnumeratingWithState:&v26 objects:v31 count:16];
      }
      while (v7);
    }

    id v2 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
    long long v22 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    id v13 = v21;
    uint64_t v14 = [v13 countByEnumeratingWithState:&v22 objects:v30 count:16];
    if (v14)
    {
      uint64_t v15 = v14;
      uint64_t v16 = *(void *)v23;
      do
      {
        for (uint64_t j = 0; j != v15; ++j)
        {
          if (*(void *)v23 != v16) {
            objc_enumerationMutation(v13);
          }
          int v18 = *(void **)(*((void *)&v22 + 1) + 8 * j);
          if (objc_msgSend(v18, "_afpreferences_isLanguageCodePrefix"))
          {
            int v19 = [v4 objectForKey:v18];
            [v2 addObjectsFromArray:v19];
          }
          else
          {
            [v2 addObject:v18];
          }
        }
        uint64_t v15 = [v13 countByEnumeratingWithState:&v22 objects:v30 count:16];
      }
      while (v15);
    }
  }
  return v2;
}

void __AFPreferencesSupportedLanguagesForStorefrontIdentifier_block_invoke()
{
  CFArrayRef v0 = (void *)AFPreferencesSupportedLanguagesForStorefrontIdentifier_sStaticStorefrontMapping;
  AFPreferencesSupportedLanguagesForStorefrontIdentifier_sStaticStorefrontMapping = (uint64_t)&unk_1EEE988B0;
}

void *_AFPreferencesMultiSiriLanguageScenarios()
{
  return &unk_1EEE988D8;
}

id _AFPreferencesReplacementLanguageForLocalRecognizerLanguageCode(void *a1)
{
  id v1 = a1;
  if (v1)
  {
    if (_AFPreferencesReplacementLanguageForLocalRecognizerLanguageCode_onceToken != -1) {
      dispatch_once(&_AFPreferencesReplacementLanguageForLocalRecognizerLanguageCode_onceToken, &__block_literal_global_808);
    }
    id v2 = [(id)_AFPreferencesReplacementLanguageForLocalRecognizerLanguageCode_sAlternativeLocalRecognizerLocaleOverrideMap objectForKey:v1];
  }
  else
  {
    id v2 = 0;
  }

  return v2;
}

id AFPreferencesSupportedLanguagesForRemote(void *a1, void *a2)
{
  double v3 = a1;
  id v4 = a2;
  if (AFPreferencesSupportedLanguagesForRemote_onceToken != -1) {
    dispatch_once(&AFPreferencesSupportedLanguagesForRemote_onceToken, &__block_literal_global_820);
  }
  if (v3) {
    id v5 = v3;
  }
  else {
    id v5 = @"iPhone OS";
  }
  uint64_t v6 = AFWatchOSVersion(v5, v4);
  if (v6 != -1)
  {
    uint64_t v7 = v6;
    if (AFWatchOSVersionIsGreaterThanOrEqual(v6, 131584))
    {
      uint64_t v8 = _AFPreferencesBuiltInLanguages();
      if (v8) {
        goto LABEL_18;
      }
      goto LABEL_17;
    }
    if (AFWatchOSVersionIsGreaterThanOrEqual(v7, 131328))
    {
      BOOL v9 = @"fi-FI";
      goto LABEL_16;
    }
    if (AFWatchOSVersionIsGreaterThanOrEqual(v7, 0x20000))
    {
      BOOL v9 = @"ar-SA";
      goto LABEL_16;
    }
    if (AFWatchOSVersionIsGreaterThanOrEqual(v7, 65537))
    {
      BOOL v9 = @"nb-NO";
LABEL_16:
      __int16 v10 = _AFSupportedLanguagesToLanguage(v9);
      uint64_t v8 = (void *)[v10 copy];

      if (v8) {
        goto LABEL_18;
      }
    }
  }
LABEL_17:
  double v11 = _AFSupportedLanguagesToLanguage(@"pt-BR");
  uint64_t v8 = (void *)[v11 copy];

LABEL_18:
  return v8;
}

id _AFSupportedLanguagesToLanguage(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    id v2 = _AFPreferencesBuiltInLanguages();
    uint64_t v3 = [v2 indexOfObject:v1];

    id v4 = 0;
    if (v3 && v3 != 0x7FFFFFFFFFFFFFFFLL)
    {
      id v4 = objc_msgSend(v2, "subarrayWithRange:", 0, v3);
    }
  }
  else
  {
    id v4 = 0;
  }
  return v4;
}

void __AFPreferencesSupportedLanguagesForRemote_block_invoke()
{
  uint64_t v0 = [objc_alloc(MEMORY[0x1E4F29128]) initWithUUIDString:@"776E7CEE-4FCE-4780-A401-691B2C16EF68"];
  id v1 = (void *)AFPreferencesSupportedLanguagesForRemote_arabicCapability;
  AFPreferencesSupportedLanguagesForRemote_arabicCapability = v0;
}

id AFPreferencesSupportedDictationLanguagesSet()
{
  if (AFPreferencesSupportedDictationLanguagesSet_onceToken != -1) {
    dispatch_once(&AFPreferencesSupportedDictationLanguagesSet_onceToken, &__block_literal_global_831);
  }
  uint64_t v0 = (void *)AFPreferencesSupportedDictationLanguagesSet_stAllLanguagesSet;
  return v0;
}

void __AFPreferencesSupportedDictationLanguagesSet_block_invoke()
{
  id v0 = objc_alloc(MEMORY[0x1E4F1CAD0]);
  AFPreferencesSupportedDictationLanguages();
  id v3 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v1 = [v0 initWithArray:v3];
  id v2 = (void *)AFPreferencesSupportedDictationLanguagesSet_stAllLanguagesSet;
  AFPreferencesSupportedDictationLanguagesSet_stAllLanguagesSet = v1;
}

uint64_t AFPreferencesLanguageIsSupportedForDeviceSettings(void *a1)
{
  id v1 = a1;
  uint64_t IsSupported = AFPreferencesLanguageIsSupported(v1);

  return IsSupported;
}

uint64_t AFPreferencesLanguageIsExplicitlySupportedForDictation(void *a1)
{
  id v1 = a1;
  id v2 = [v1 stringByReplacingOccurrencesOfString:@"_" withString:@"-"];

  id v3 = AFPreferencesSupportedDictationLanguages();
  uint64_t v4 = [v3 containsObject:v2];

  return v4;
}

uint64_t AFPreferencesShouldIgnoreInternalConfig()
{
  id v0 = _AFPreferencesValueForKeyWithContext(@"Ignore Internal Config", @"com.apple.assistant", 0);
  uint64_t v1 = [v0 BOOLValue];

  return v1;
}

void AFPreferencesSetShouldIgnoreInternalConfig(char a1)
{
  if (a1)
  {
    id v2 = [MEMORY[0x1E4F28ED0] numberWithBool:1];
    _AFPreferencesSetValueForKeyWithContext(v2, @"Ignore Internal Config", @"com.apple.assistant", 0);
  }
  else
  {
    _AFPreferencesSetValueForKeyWithContext(0, @"Ignore Internal Config", @"com.apple.assistant", 0);
  }
}

uint64_t AFPreferencesAlwaysEyesFreeEnabled()
{
  CFPreferencesAppSynchronize(@"com.apple.assistant");
  id v0 = _AFPreferencesValueForKeyWithContext(@"Always Eyes Free", @"com.apple.assistant", 0);
  uint64_t v1 = [v0 BOOLValue];

  return v1;
}

void AFPreferencesSetAlwaysEyesFreeEnabled(char a1)
{
  if (a1)
  {
    id v2 = [MEMORY[0x1E4F28ED0] numberWithBool:1];
    _AFPreferencesSetValueForKeyWithContext(v2, @"Always Eyes Free", @"com.apple.assistant", 0);
  }
  else
  {
    _AFPreferencesSetValueForKeyWithContext(0, @"Always Eyes Free", @"com.apple.assistant", 0);
  }
}

void AFPreferencesSetManualEndpointingThreshold(void *a1)
{
}

double AFPreferencesATVStopRecordingDelay()
{
  id v0 = (void *)[objc_alloc(MEMORY[0x1E4F1CB18]) initWithSuiteName:@"com.apple.internal.ck"];
  uint64_t v1 = [v0 objectForKey:@"ATVStopRecordingDelay"];
  objc_opt_class();
  double v2 = 0.0;
  if (objc_opt_isKindOfClass()) {
    double v2 = (double)[v1 unsignedIntValue] / 1000.0;
  }

  return v2;
}

uint64_t AFPreferencesSimulateImmediateSpeechCapture()
{
  id v0 = _AFPreferencesValueForKeyWithContext(@"Simulate Immediate Speech Capture", @"com.apple.assistant", 0);
  uint64_t v1 = [v0 BOOLValue];

  return v1;
}

double AFPreferencesBufferedSpeechCapturePacketInterval()
{
  id v0 = _AFPreferencesValueForKeyWithContext(@"Buffered Speech Capture Packet Interval", @"com.apple.assistant", 0);
  [v0 doubleValue];
  double v2 = v1;

  return v2;
}

id AFPreferencesDefaultsDeleteTypeToSiriSetting()
{
  id v0 = (void *)[objc_alloc(MEMORY[0x1E4F1CB18]) initWithSuiteName:@"com.apple.siri.textinput"];
  double v1 = [v0 objectForKey:@"SiriUITextInputEnabled"];
  if (v1)
  {
    [v0 setValue:0 forKey:@"SiriUITextInputEnabled"];
    [v0 synchronize];
  }

  return v1;
}

void AFPreferencesSetTypeToSiriEnabled(uint64_t a1)
{
  v14[1] = *MEMORY[0x1E4F143B8];
  double v2 = [MEMORY[0x1E4F28ED0] numberWithBool:a1];
  _AFPreferencesSetValueForKeyWithContext(v2, @"Type To Siri Enabled", @"com.apple.assistant.backedup", 0);

  CFPreferencesAppSynchronize(@"com.apple.assistant.backedup");
  id v3 = +[AFAnalytics sharedAnalytics];
  id v13 = @"Type To Siri Enabled";
  uint64_t v4 = [MEMORY[0x1E4F28ED0] numberWithBool:a1];
  v14[0] = v4;
  id v5 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v14 forKeys:&v13 count:1];
  [v3 logEventWithType:3205 context:v5];

  uint64_t v6 = AFSiriLogContextConnection;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
  {
    uint64_t v7 = @"disabled";
    if (a1) {
      uint64_t v7 = @"enabled";
    }
    int v9 = 136315394;
    __int16 v10 = "AFPreferencesSetTypeToSiriEnabled";
    __int16 v11 = 2112;
    id v12 = v7;
    _os_log_impl(&dword_19CF1D000, v6, OS_LOG_TYPE_INFO, "%s #preferences Setting Type To Siri %@", (uint8_t *)&v9, 0x16u);
  }
  _AFPreferencesSetSiriResponseShouldAlwaysPrintOverride(a1);
  uint64_t v8 = +[AFPreferences sharedPreferences];
  [v8 synchronize];
}

uint64_t AFPreferencesHoldToTalkForTypeToSiriEnabled()
{
  id v0 = (void *)[objc_alloc(MEMORY[0x1E4F1CB18]) initWithSuiteName:@"com.apple.siri.textinput"];
  double v1 = [v0 objectForKey:@"SiriUITextInputHTTEnabled"];
  uint64_t v2 = [v1 BOOLValue];

  return v2;
}

void AFPreferencesSetHoldToTalkForTypeToSiriEnabled(uint64_t a1)
{
  id v3 = (id)[objc_alloc(MEMORY[0x1E4F1CB18]) initWithSuiteName:@"com.apple.siri.textinput"];
  uint64_t v2 = [MEMORY[0x1E4F28ED0] numberWithBool:a1];
  [v3 setObject:v2 forKey:@"SiriUITextInputHTTEnabled"];
}

id AFPreferencesMobileUserSessionLanguage()
{
  CFPreferencesSynchronize(@"com.apple.assistant.backedup", @"mobile", (CFStringRef)*MEMORY[0x1E4F1D3E0]);
  id v0 = (void *)CFPreferencesCopyValue(@"Session Language", @"com.apple.assistant.backedup", @"mobile", (CFStringRef)*MEMORY[0x1E4F1D3C8]);
  return v0;
}

id AFPreferencesLanguageCodeForUser(void *a1)
{
  CFStringRef v1 = a1;
  if (v1) {
    CFStringRef v2 = v1;
  }
  else {
    CFStringRef v2 = (const __CFString *)*MEMORY[0x1E4F1D3F0];
  }
  CFPreferencesSynchronize(@"com.apple.assistant.backedup", v2, (CFStringRef)*MEMORY[0x1E4F1D3E0]);
  id v3 = (void *)CFPreferencesCopyValue(@"Session Language", @"com.apple.assistant.backedup", v2, (CFStringRef)*MEMORY[0x1E4F1D3C8]);
  return v3;
}

id _AFPreferencesLanguageCodeWithContext(void *a1)
{
  return _AFPreferencesValueForKeyWithContext(@"Session Language", @"com.apple.assistant.backedup", a1);
}

void _AFPreferencesSetLanguageCodeWithContext(void *a1, void *a2)
{
}

void _AFPreferencesSetLanguageCode(void *a1)
{
}

uint64_t _AFPreferencesShowAllDialogVariantsEnabled()
{
  id v0 = _AFPreferencesValueForKeyWithContext(@"Show All Dialog Variants", @"com.apple.assistant", 0);
  uint64_t v1 = [v0 BOOLValue];

  return v1;
}

void _AFPreferencesSetShowAllDialogVariantsEnabled(uint64_t a1)
{
  id v1 = [MEMORY[0x1E4F28ED0] numberWithBool:a1];
  _AFPreferencesSetValueForKeyWithContext(v1, @"Show All Dialog Variants", @"com.apple.assistant", 0);
}

uint64_t _AFPreferencesForceRTL()
{
  return _AFBackedUpPreferencesBoolForKeyWithDefault(@"SessionLanguageUIForceRTL", 0);
}

void _AFPreferencesSetForceRTL(uint64_t a1)
{
  id v1 = [MEMORY[0x1E4F28ED0] numberWithBool:a1];
  _AFPreferencesSetValueForKeyWithContext(v1, @"SessionLanguageUIForceRTL", @"com.apple.assistant.backedup", 0);
}

id _AFPreferencesCloudUserID()
{
  id v0 = _AFPreferencesValueForKeyWithContext(@"Cloud Sync User ID", @"com.apple.assistant.backedup", 0);
  objc_opt_class();
  id v1 = 0;
  if (objc_opt_isKindOfClass()) {
    id v1 = v0;
  }

  return v1;
}

void _AFPreferencesSetCloudUserID(void *a1)
{
}

uint64_t _AFPreferencesCloudSyncEnabled()
{
  return _AFBackedUpPreferencesBoolForKeyWithDefault(@"Cloud Sync Enabled", 1);
}

void _AFPreferencesSetCloudSyncEnabledModificationDate(void *a1)
{
}

uint64_t AFPreferencesStartAlertEnabled()
{
  id v0 = _AFPreferencesValueForKeyWithContext(@"StartAlertEnabled", @"com.apple.assistant.backedup", 0);
  uint64_t v1 = _AFPreferencesBoolFromValueWithDefault(v0, @"StartAlertEnabled", 0);

  return v1;
}

void AFPreferencesSetStartAlertEnabled(uint64_t a1)
{
  id v1 = [MEMORY[0x1E4F28ED0] numberWithBool:a1];
  _AFPreferencesSetValueForKeyWithContext(v1, @"StartAlertEnabled", @"com.apple.assistant.backedup", 0);
}

uint64_t _AFPreferencesShouldUseTFO()
{
  id v0 = _AFPreferencesValueForKeyWithContext(@"Enable TFO", @"com.apple.assistant", 0);
  id v1 = v0;
  if (v0) {
    uint64_t v2 = [v0 BOOLValue];
  }
  else {
    uint64_t v2 = 0;
  }

  return v2;
}

void _AFPreferencesSetTFO(uint64_t a1)
{
  id v1 = [MEMORY[0x1E4F28ED0] numberWithBool:a1];
  _AFPreferencesSetValueForKeyWithContext(v1, @"Enable TFO", @"com.apple.assistant", 0);
}

uint64_t _AFPreferencesGetTuscanyStatus()
{
  id v0 = _AFPreferencesValueForKeyWithContext(@"Disable Tuscany", @"com.apple.assistant", 0);
  uint64_t v1 = [v0 BOOLValue];

  return v1;
}

void _AFPreferencesDisableTuscany(uint64_t a1)
{
  id v1 = [MEMORY[0x1E4F28ED0] numberWithBool:a1];
  _AFPreferencesSetValueForKeyWithContext(v1, @"Disable Tuscany", @"com.apple.assistant", 0);
}

uint64_t _AFPreferencesGetEnableServerDebugFlags()
{
  id v0 = _AFPreferencesValueForKeyWithContext(@"Enable Server Debug Flags", @"com.apple.assistant", 0);
  uint64_t v1 = [v0 BOOLValue];

  return v1;
}

void _AFPreferencesEnableServerDebugFlags(uint64_t a1)
{
  id v1 = [MEMORY[0x1E4F28ED0] numberWithBool:a1];
  _AFPreferencesSetValueForKeyWithContext(v1, @"Enable Server Debug Flags", @"com.apple.assistant", 0);
}

void _AFPreferencesSetNonManateeIdentity(uint64_t a1)
{
  id v1 = [MEMORY[0x1E4F28ED0] numberWithBool:a1];
  _AFPreferencesSetValueForKeyWithContext(v1, @"Enable Non Manatee Identity", @"com.apple.assistant", 0);
}

uint64_t _AFPreferencesGetNonManateeIdentity()
{
  id v0 = _AFPreferencesValueForKeyWithContext(@"Enable Non Manatee Identity", @"com.apple.assistant", 0);
  uint64_t v1 = [v0 BOOLValue];

  return v1;
}

uint64_t _AFPreferencesSiriPersonalizedASRDisabled()
{
  if (+[AFFeatureFlags isSiriXEnabled]) {
    return 1;
  }
  if (AFDeviceHighestLanguageModelCapabilityIdentifier_onceToken != -1) {
    dispatch_once(&AFDeviceHighestLanguageModelCapabilityIdentifier_onceToken, &__block_literal_global_705);
  }
  if (AFDeviceHighestLanguageModelCapabilityIdentifier_deviceHighestCapabilityIdentifier != 1) {
    return 1;
  }
  id v0 = (void *)[objc_alloc(MEMORY[0x1E4F1CB18]) initWithSuiteName:@"com.apple.internal.ck"];
  uint64_t v1 = [v0 objectForKey:@"SiriPersonalizedASRDisabled"];
  objc_opt_class();
  BOOL v2 = (objc_opt_isKindOfClass() & 1) != 0 && [v1 integerValue] != 0;

  return v2;
}

uint64_t _AFPreferencesSyncFromWatchEnabled()
{
  id v0 = _AFPreferencesValueForKeyWithContext(@"Enable Sync Directly From Watch", @"com.apple.assistant", 0);
  uint64_t v1 = [v0 BOOLValue];

  return v1;
}

AFVoiceInfo *_AFPreferencesOutputVoice()
{
  return _AFPreferencesOutputVoiceWithContext(0);
}

void _AFPreferencesSetOutputVoiceWithContext(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = [a1 dictionaryRepresentation];
  _AFPreferencesSetValueForKeyWithContext(v4, @"Output Voice", @"com.apple.assistant.backedup", v3);
}

void _AFPreferencesSetOutputVoice(void *a1)
{
}

id _AFPreferencesMirroredTCCInfo()
{
  id v0 = _AFPreferencesValueForKeyWithContext(@"SiriKit Enabled List", @"com.apple.assistant.backedup", 0);
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v1 = v0;
    BOOL v2 = [v1 firstObject];
    if (v2 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0))
    {
    }
    else
    {
      id v3 = (void *)[objc_alloc(MEMORY[0x1E4F1CAD0]) initWithArray:v1];

      if (v3) {
        goto LABEL_8;
      }
    }
  }
  id v3 = [MEMORY[0x1E4F1CAD0] set];
LABEL_8:

  return v3;
}

void _AFPreferencesSetMirroredTCCInfo(void *a1)
{
  id v1 = [a1 allObjects];
  _AFPreferencesSetValueForKeyWithContext(v1, @"SiriKit Enabled List", @"com.apple.assistant.backedup", 0);
}

id _AFPreferencesNetworkStackOverride()
{
  id v0 = _AFPreferencesValueForKeyWithContext(@"Network Stack Override", @"com.apple.assistant", 0);
  if (v0 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    id v1 = v0;
  }
  else {
    id v1 = 0;
  }

  return v1;
}

uint64_t _AFPreferencesFeedbackBannerForAcceptsEnabled()
{
  if (AFIsInternalInstall_onceToken != -1) {
    dispatch_once(&AFIsInternalInstall_onceToken, &__block_literal_global_158);
  }
  if (!AFIsInternalInstall_isInternal) {
    return 0;
  }
  return _AFBackedUpPreferencesBoolForKeyWithDefault(@"Enable Feedback Banner for Accepts", 1);
}

uint64_t _AFPreferencesFeedbackBannerForNearMissesEnabled()
{
  if (AFIsInternalInstall_onceToken != -1) {
    dispatch_once(&AFIsInternalInstall_onceToken, &__block_literal_global_158);
  }
  if (!AFIsInternalInstall_isInternal) {
    return 0;
  }
  return _AFBackedUpPreferencesBoolForKeyWithDefault(@"Enable Feedback Banner for Near Misses", 1);
}

uint64_t _AFPreferencesCompanionMessagingEnabled()
{
  id v0 = _AFPreferencesValueForKeyWithContext(@"Enable Companion Messaging", @"com.apple.assistant", 0);
  id v1 = v0;
  if (v0) {
    uint64_t v2 = [v0 BOOLValue];
  }
  else {
    uint64_t v2 = 1;
  }

  return v2;
}

void _AFPreferencesSetCompanionMessagingEnabled(uint64_t a1)
{
  id v1 = [MEMORY[0x1E4F28ED0] numberWithBool:a1];
  _AFPreferencesSetValueForKeyWithContext(v1, @"Enable Companion Messaging", @"com.apple.assistant", 0);
}

uint64_t _AFPreferencesForceSpeexAudioRecording()
{
  id v0 = _AFPreferencesValueForKeyWithContext(@"Force Speex Audio Recording", @"com.apple.assistant", 0);
  uint64_t v1 = [v0 BOOLValue];

  return v1;
}

void _AFPreferencesSetForceSpeexAudioRecording(uint64_t a1)
{
  id v1 = [MEMORY[0x1E4F28ED0] numberWithBool:a1];
  _AFPreferencesSetValueForKeyWithContext(v1, @"Force Speex Audio Recording", @"com.apple.assistant", 0);
}

uint64_t _AFPreferencesForceUncompressedAudioRecording()
{
  id v0 = _AFPreferencesValueForKeyWithContext(@"Force Uncompressed Audio Recording", @"com.apple.assistant", 0);
  uint64_t v1 = [v0 BOOLValue];

  return v1;
}

void _AFPreferencesSetForceUncompressedAudioRecording(uint64_t a1)
{
  id v1 = [MEMORY[0x1E4F28ED0] numberWithBool:a1];
  _AFPreferencesSetValueForKeyWithContext(v1, @"Force Uncompressed Audio Recording", @"com.apple.assistant", 0);
}

uint64_t _AFPreferencesAcousticIDAutoEndpoint()
{
  id v0 = _AFPreferencesValueForKeyWithContext(@"Acoustic ID Auto Endpoint", @"com.apple.assistant", 0);
  uint64_t v1 = [v0 BOOLValue];

  return v1;
}

void _AFPreferencesSetAcousticIDAutoEndpoint(uint64_t a1)
{
  id v1 = [MEMORY[0x1E4F28ED0] numberWithBool:a1];
  _AFPreferencesSetValueForKeyWithContext(v1, @"Acoustic ID Auto Endpoint", @"com.apple.assistant", 0);
}

uint64_t _AFPreferencesVibrateWithAlert()
{
  id v0 = _AFPreferencesValueForKeyWithContext(@"Vibrate with Siri Alert", @"com.apple.assistant", 0);
  id v1 = v0;
  if (v0) {
    uint64_t v2 = [v0 BOOLValue];
  }
  else {
    uint64_t v2 = 1;
  }

  return v2;
}

void _AFPreferencesSetVibrateWithAlert(uint64_t a1)
{
  id v1 = [MEMORY[0x1E4F28ED0] numberWithBool:a1];
  _AFPreferencesSetValueForKeyWithContext(v1, @"Vibrate with Siri Alert", @"com.apple.assistant", 0);
}

void _AFPreferencesSetKeepRecorededAudioFiles(uint64_t a1)
{
  id v1 = (const void *)[MEMORY[0x1E4F28ED0] numberWithBool:a1];
  CFStringRef v2 = (const __CFString *)*MEMORY[0x1E4F1D3E0];
  CFPreferencesSetValue(@"Keep Recorded Audio Files", v1, @"com.apple.assistant", @"mobile", v2);
}

id _AFPreferencesSessionShutdownDelayOverride()
{
  return _AFPreferencesValueForKeyWithContext(@"SessionShutdownDelayOverride", @"com.apple.assistant", 0);
}

uint64_t _AFPreferencesSetSessionShutdownDelayOverride(void *a1)
{
  _AFPreferencesSetValueForKeyWithContext(a1, @"SessionShutdownDelayOverride", @"com.apple.assistant", 0);
  return CFPreferencesAppSynchronize(@"com.apple.assistant");
}

float _AFPreferencesVibrationIntensity()
{
  id v0 = _AFPreferencesValueForKeyWithContext(@"Beep Vibration Intensity", @"com.apple.assistant", 0);
  [v0 floatValue];
  float v2 = v1;

  return v2;
}

void _AFPreferencesSetVibrationIntensity()
{
  objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithFloat:");
  id v0 = (id)objc_claimAutoreleasedReturnValue();
  _AFPreferencesSetValueForKeyWithContext(v0, @"Beep Vibration Intensity", @"com.apple.assistant", 0);
}

double _AFPreferencesVibrationGap()
{
  id v0 = _AFPreferencesValueForKeyWithContext(@"Beep InterVibration Gap", @"com.apple.assistant", 0);
  [v0 doubleValue];
  double v2 = v1;

  return v2;
}

void _AFPreferencesSetVibrationGap()
{
  objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithDouble:");
  id v0 = (id)objc_claimAutoreleasedReturnValue();
  _AFPreferencesSetValueForKeyWithContext(v0, @"Beep InterVibration Gap", @"com.apple.assistant", 0);
}

double _AFPreferencesVibrationDuration()
{
  id v0 = _AFPreferencesValueForKeyWithContext(@"Beep Vibration Duration", @"com.apple.assistant", 0);
  [v0 doubleValue];
  double v2 = v1;

  return v2;
}

void _AFPreferencesSetVibrationDuration()
{
  objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithDouble:");
  id v0 = (id)objc_claimAutoreleasedReturnValue();
  _AFPreferencesSetValueForKeyWithContext(v0, @"Beep Vibration Duration", @"com.apple.assistant", 0);
}

uint64_t _AFPreferencesVibrationCount()
{
  id v0 = _AFPreferencesValueForKeyWithContext(@"Number of Vibrations per Beep", @"com.apple.assistant", 0);
  uint64_t v1 = [v0 integerValue];

  return v1;
}

void _AFPreferencesSetVibrationCount(uint64_t a1)
{
  id v1 = [MEMORY[0x1E4F28ED0] numberWithUnsignedInteger:a1];
  _AFPreferencesSetValueForKeyWithContext(v1, @"Number of Vibrations per Beep", @"com.apple.assistant", 0);
}

id _AFPreferencesCountryCode()
{
  return _AFPreferencesValueForKeyWithContext(@"Country Code", @"com.apple.assistant", 0);
}

void _AFPreferencesSetCountryCode(void *a1)
{
}

id AFPreferencesBorealisEducationHeaderDisplayCount()
{
  CFPreferencesAppSynchronize(@"com.apple.assistant");
  return _AFPreferencesValueForKeyWithContext(@"Borealis Education Header Display Count", @"com.apple.assistant", 0);
}

void AFPreferencesSetBorealisEducationHeaderDisplayCount(void *a1)
{
}

id _AFPreferencesLowerWristEducationHeaderDisplayCount()
{
  CFPreferencesAppSynchronize(@"com.apple.assistant");
  return _AFPreferencesValueForKeyWithContext(@"Lower Wrist Education Message Display Count", @"com.apple.assistant", 0);
}

void _AFPreferencesSetLowerWristEducationHeaderDisplayCount(void *a1)
{
}

double AFPreferencesSiriTaskResponseTimeout()
{
  if (AFIsInternalInstall_onceToken != -1) {
    dispatch_once(&AFIsInternalInstall_onceToken, &__block_literal_global_158);
  }
  if (!AFIsInternalInstall_isInternal) {
    return 10.0;
  }
  id v0 = _AFPreferencesValueForKeyWithContext(@"AFSiriTaskResponseTimeout", @"com.apple.assistant", 0);
  id v1 = v0;
  if (v0)
  {
    [v0 doubleValue];
    double v3 = v2;
  }
  else
  {
    double v3 = 10.0;
  }

  return v3;
}

double AFPreferencesSiriTaskBackgroundAssertionTimeout()
{
  if (AFIsInternalInstall_onceToken != -1) {
    dispatch_once(&AFIsInternalInstall_onceToken, &__block_literal_global_158);
  }
  if (!AFIsInternalInstall_isInternal) {
    return 5.0;
  }
  id v0 = _AFPreferencesValueForKeyWithContext(@"AFSiriTaskBackgroundAssertionTimeout", @"com.apple.assistant", 0);
  id v1 = v0;
  if (v0)
  {
    [v0 doubleValue];
    double v3 = v2;
  }
  else
  {
    double v3 = 5.0;
  }

  return v3;
}

double _AFPreferencesGetClientCommandDeliveryDelay()
{
  if (AFIsInternalInstall_onceToken != -1) {
    dispatch_once(&AFIsInternalInstall_onceToken, &__block_literal_global_158);
  }
  if (!AFIsInternalInstall_isInternal) {
    return 0.0;
  }
  id v0 = _AFPreferencesValueForKeyWithContext(@"Client Command Delivery Delay", @"com.apple.assistant", 0);
  objc_opt_class();
  double v1 = 0.0;
  if (objc_opt_isKindOfClass())
  {
    [v0 doubleValue];
    double v1 = fmax(v2, 0.0);
  }

  return v1;
}

uint64_t _AFPreferencesGetForcedInterstitialStyle()
{
  if (AFIsInternalInstall_onceToken != -1) {
    dispatch_once(&AFIsInternalInstall_onceToken, &__block_literal_global_158);
  }
  if (!AFIsInternalInstall_isInternal) {
    return 0;
  }
  id v0 = _AFPreferencesValueForKeyWithContext(@"Forced Interstitial Style", @"com.apple.assistant", 0);
  objc_opt_class();
  uint64_t v1 = 0;
  if (objc_opt_isKindOfClass()) {
    uint64_t v1 = AFInterstitialStyleGetFromName(v0);
  }

  return v1;
}

uint64_t _AFPreferencesGetInterstitialDisplayDisabledBeforeSpeechRecognition()
{
  if (AFIsInternalInstall_onceToken != -1) {
    dispatch_once(&AFIsInternalInstall_onceToken, &__block_literal_global_158);
  }
  if (!AFIsInternalInstall_isInternal) {
    return 0;
  }
  id v0 = _AFPreferencesValueForKeyWithContext(@"Interstitial Display Disabled Before Speech Recognition", @"com.apple.assistant", 0);
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    uint64_t v1 = [v0 BOOLValue];
  }
  else {
    uint64_t v1 = 0;
  }

  return v1;
}

double _AFPreferencesGetInitialInterstitialDelay(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 7)
  {
    id v4 = 0;
  }
  else
  {
    uint64_t v1 = NSString;
    double v2 = off_1E592B0C0[a1];
    CFStringRef v3 = (const __CFString *)[v1 stringWithFormat:@"%@ - %@", @"Initial Interstitial Delay", v2];

    id v4 = _AFPreferencesValueForKeyWithContext(v3, @"com.apple.assistant", 0);
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    uint64_t v5 = _AFPreferencesValueForKeyWithContext(@"Initial Interstitial Delay", @"com.apple.assistant", 0);

    id v4 = (void *)v5;
  }
  objc_opt_class();
  double v6 = 0.0;
  if (objc_opt_isKindOfClass())
  {
    [v4 doubleValue];
    double v6 = v7;
  }

  return v6;
}

void _AFPreferencesSetInitialInterstitialDelay(uint64_t a1, double a2)
{
  CFStringRef v3 = @"Initial Interstitial Delay";
  if ((unint64_t)(a1 - 1) <= 7)
  {
    id v4 = NSString;
    uint64_t v5 = off_1E592B0C0[a1];
    CFStringRef v3 = (const __CFString *)[v4 stringWithFormat:@"%@ - %@", @"Initial Interstitial Delay", v5];
  }
  id v6 = [MEMORY[0x1E4F28ED0] numberWithDouble:a2];
  _AFPreferencesSetValueForKeyWithContext(v6, v3, @"com.apple.assistant", 0);
}

double _AFPreferencesGetInitialInterstitialDelayForVoiceTriggerOneShotWithoutAudioDucking()
{
  id v0 = _AFPreferencesValueForKeyWithContext(@"Initial Interstitial Delay for VoiceTrigger One-Shot without Audio Ducking", @"com.apple.assistant", 0);
  objc_opt_class();
  double v1 = 0.0;
  if (objc_opt_isKindOfClass())
  {
    [v0 doubleValue];
    double v1 = v2;
  }

  return v1;
}

void _AFPreferencesSetInitialInterstitialDelayForVoiceTriggerOneShotWithoutAudioDucking()
{
  objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithDouble:");
  id v0 = (id)objc_claimAutoreleasedReturnValue();
  _AFPreferencesSetValueForKeyWithContext(v0, @"Initial Interstitial Delay for VoiceTrigger One-Shot without Audio Ducking", @"com.apple.assistant", 0);
}

uint64_t _AFPreferencesMTEOptOutOverrideEnabled()
{
  if (AFIsInternalInstall_onceToken != -1) {
    dispatch_once(&AFIsInternalInstall_onceToken, &__block_literal_global_158);
  }
  if (!AFIsInternalInstall_isInternal) {
    return 0;
  }
  id v0 = _AFPreferencesValueForKeyWithContext(@"Enable MTE Opt Out Override", @"com.apple.assistant", 0);
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    uint64_t v1 = [v0 BOOLValue];
  }
  else {
    uint64_t v1 = 0;
  }

  return v1;
}

BOOL AFPreferencesDictationAllowed()
{
  if (!CFPreferencesAppValueIsForced(@"Ironwood Allowed", @"com.apple.ironwood.support")) {
    return 1;
  }
  Boolean keyExistsAndHasValidFormat = 0;
  int AppBooleanValue = CFPreferencesGetAppBooleanValue(@"Ironwood Allowed", @"com.apple.ironwood.support", &keyExistsAndHasValidFormat);
  if (keyExistsAndHasValidFormat) {
    BOOL v1 = AppBooleanValue == 0;
  }
  else {
    BOOL v1 = 0;
  }
  return !v1;
}

BOOL AFPreferencesAssistantAllowed()
{
  return AFPreferencesAssistantIsRestrictedWithReason() == 0;
}

uint64_t AFPreferencesAssistantIsRestrictedWithReason()
{
  if (CFPreferencesAppValueIsForced(@"allowAssistant", @"com.apple.applicationaccess"))
  {
    Boolean keyExistsAndHasValidFormat = 0;
    int AppBooleanValue = CFPreferencesGetAppBooleanValue(@"allowAssistant", @"com.apple.applicationaccess", &keyExistsAndHasValidFormat);
    BOOL v1 = AppBooleanValue != 0;
    if (keyExistsAndHasValidFormat && !AppBooleanValue) {
      return 2;
    }
  }
  else
  {
    BOOL v1 = 1;
  }
  if (CFPreferencesAppValueIsForced(@"Assistant Allowed", @"com.apple.ironwood.support")
    && (Boolean v4 = 0,
        int v3 = CFPreferencesGetAppBooleanValue(@"Assistant Allowed", @"com.apple.ironwood.support", &v4),
        BOOL v1 = v3 != 0,
        v4)
    && !v3)
  {
    return 3;
  }
  else
  {
    return !v1;
  }
}

uint64_t AFPreferencesProfanityFilterForced()
{
  uint64_t result = CFPreferencesAppValueIsForced(@"forceAssistantProfanityFilter", @"com.apple.applicationaccess");
  if (result)
  {
    Boolean keyExistsAndHasValidFormat = 0;
    int AppBooleanValue = CFPreferencesGetAppBooleanValue(@"forceAssistantProfanityFilter", @"com.apple.applicationaccess", &keyExistsAndHasValidFormat);
    if (keyExistsAndHasValidFormat) {
      BOOL v2 = AppBooleanValue == 0;
    }
    else {
      BOOL v2 = 0;
    }
    return !v2;
  }
  return result;
}

BOOL AFPreferencesUserGeneratedContentAllowed()
{
  if (!CFPreferencesAppValueIsForced(@"allowAssistantUserGeneratedContent", @"com.apple.applicationaccess")) {
    return 1;
  }
  Boolean keyExistsAndHasValidFormat = 0;
  int AppBooleanValue = CFPreferencesGetAppBooleanValue(@"allowAssistantUserGeneratedContent", @"com.apple.applicationaccess", &keyExistsAndHasValidFormat);
  if (keyExistsAndHasValidFormat) {
    BOOL v1 = AppBooleanValue == 0;
  }
  else {
    BOOL v1 = 0;
  }
  return !v1;
}

BOOL AFPreferencesMontaraAllowed()
{
  if (!CFPreferencesAppValueIsForced(@"allowExternalIntelligenceIntegrations", @"com.apple.applicationaccess"))return 1; {
  Boolean keyExistsAndHasValidFormat = 0;
  }
  int AppBooleanValue = CFPreferencesGetAppBooleanValue(@"allowExternalIntelligenceIntegrations", @"com.apple.applicationaccess", &keyExistsAndHasValidFormat);
  if (keyExistsAndHasValidFormat) {
    BOOL v1 = AppBooleanValue == 0;
  }
  else {
    BOOL v1 = 0;
  }
  return !v1;
}

void _AFPreferencesSetShouldCensorSpeechInternal(uint64_t a1)
{
  id v1 = [MEMORY[0x1E4F28ED0] numberWithBool:a1];
  _AFPreferencesSetValueForKeyWithContext(v1, @"Censor Speech", @"com.apple.assistant.backedup", 0);
}

uint64_t _AFPreferencesShouldCensorSpeechInternal()
{
  return _AFBackedUpPreferencesBoolForKeyWithDefault(@"Censor Speech", 0);
}

BOOL _AFPreferencesClearShouldCensorSpeechInternal()
{
  id v0 = _AFPreferencesValueForKeyWithContext(@"Censor Speech", @"com.apple.assistant.backedup", 0);

  if (v0) {
    _AFPreferencesSetValueForKeyWithContext(0, @"Censor Speech", @"com.apple.assistant.backedup", 0);
  }
  return v0 != 0;
}

void _AFPreferencesSetNotificationPreviewRestrictedApps(void *a1)
{
}

id _AFPreferencesNotificationPreviewRestrictedApps()
{
  id v0 = _AFPreferencesValueForKeyWithContext(@"Notification Preview Restricted Apps", @"com.apple.assistant.backedup", 0);
  objc_opt_class();
  id v1 = 0;
  if (objc_opt_isKindOfClass())
  {
    id v2 = v0;
    int v3 = [v2 firstObject];
    if (v3 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0)) {
      id v1 = 0;
    }
    else {
      id v1 = v2;
    }
  }
  return v1;
}

uint64_t _AFPreferencesLastPushedCensorSpeechSetting()
{
  id v0 = _AFPreferencesValueForKeyWithContext(@"Last Pushed Censor Speech", @"com.apple.assistant", 0);
  uint64_t v1 = [v0 BOOLValue];

  return v1;
}

uint64_t _AFPreferencesSetLastPushedCensorSpeechSetting(uint64_t a1)
{
  uint64_t result = _AFPreferencesLastPushedCensorSpeechSetting();
  if (result != a1)
  {
    int v3 = [MEMORY[0x1E4F28ED0] numberWithBool:a1];
    _AFPreferencesSetValueForKeyWithContext(v3, @"Last Pushed Censor Speech", @"com.apple.assistant", 0);

    return CFPreferencesAppSynchronize(@"com.apple.assistant");
  }
  return result;
}

uint64_t _AFPreferencesIsSiriServerLoggingEnabled()
{
  id v0 = [MEMORY[0x1E4F74230] sharedConnection];
  uint64_t v1 = [v0 isSiriServerLoggingAllowed];

  return v1;
}

__CFString *_AFPreferencesSiriDataSharingOptInStatusKey()
{
  if (+[AFFeatureFlags isSiriDataSharingRepromptEnabled])
  {
    return @"Siri Data Sharing Opt-In Status 2.0";
  }
  else
  {
    return @"Siri Data Sharing Opt-In Status";
  }
}

void _AFPreferencesSetSiriDataSharingOptInStatusWithContext(uint64_t a1, unint64_t a2, void *a3, void *a4)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v7 = a3;
  id v8 = a4;
  int v9 = AFSiriLogContextConnection;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_DEBUG))
  {
    int v21 = 136315138;
    long long v22 = "_AFPreferencesSetSiriDataSharingOptInStatusWithContext";
    _os_log_debug_impl(&dword_19CF1D000, v9, OS_LOG_TYPE_DEBUG, "%s ", (uint8_t *)&v21, 0xCu);
  }
  uint64_t v10 = _AFPreferencesSiriDataSharingOptInStatusWithContext(v8);
  __int16 v11 = +[AFPreferences sharedPreferences];
  [v11 appendToSiriDataSharingOptInStatusHistory:a1 previousOptInStatus:v10 statusChangeSource:a2 reason:v7];

  id v12 = AFGradingOptInStateChangeWithNewOptInStatus(a1, v10, a2, v7);
  id v13 = [MEMORY[0x1E4F9F9A8] sharedStream];
  [v13 emitMessage:v12];

  uint64_t v14 = [MEMORY[0x1E4F28ED0] numberWithInteger:a1];
  if (+[AFFeatureFlags isSiriDataSharingRepromptEnabled])
  {
    CFStringRef v15 = @"Siri Data Sharing Opt-In Status 2.0";
  }
  else
  {
    CFStringRef v15 = @"Siri Data Sharing Opt-In Status";
  }
  _AFPreferencesSetValueForKeyWithContext(v14, v15, @"com.apple.assistant.support", v8);

  BOOL v16 = +[AFFeatureFlags isSiriDataSharingRepromptEnabled];
  if (a1 == 2 && v16)
  {
    uint64_t v17 = AFSiriLogContextConnection;
    if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
    {
      int v21 = 136315138;
      long long v22 = "_AFPreferencesSetSiriDataSharingOptInStatusWithContext";
      _os_log_impl(&dword_19CF1D000, v17, OS_LOG_TYPE_INFO, "%s Reprompt feature flag enabled and new status is opted out. Updating legacy value.", (uint8_t *)&v21, 0xCu);
    }
    int v18 = [MEMORY[0x1E4F28ED0] numberWithInteger:2];
    _AFPreferencesSetValueForKeyWithContext(v18, @"Siri Data Sharing Opt-In Status", @"com.apple.assistant.support", v8);
  }
  CFPreferencesAppSynchronize(@"com.apple.assistant.support");
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, @"AFSiriDataSharingOptStatusInDidChangeDarwinNotification", 0, 0, 1u);
  __int16 v20 = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(v20, @"kAFPreferencesDidChangeDarwinNotification", 0, 0, 1u);
}

id AFGradingOptInStateChangeWithNewOptInStatus(uint64_t a1, uint64_t a2, unint64_t a3, void *a4)
{
  id v7 = (objc_class *)MEMORY[0x1E4FA12B0];
  id v8 = a4;
  id v9 = objc_alloc_init(v7);
  uint64_t v10 = v9;
  if ((unint64_t)(a2 - 1) < 3) {
    uint64_t v11 = a2;
  }
  else {
    uint64_t v11 = 0;
  }
  [v9 setPrevOptInState:v11];
  if ((unint64_t)(a1 - 1) < 3) {
    uint64_t v12 = a1;
  }
  else {
    uint64_t v12 = 0;
  }
  [v10 setNewOptInState:v12];
  if (a3 < 0xC) {
    uint64_t v13 = (a3 + 1);
  }
  else {
    uint64_t v13 = 0;
  }
  [v10 setSource:v13];
  [v10 setReason:v8];

  uint64_t v14 = (void *)MGCopyAnswer();
  [v10 setSystemBuild:v14];

  CFStringRef v15 = [MEMORY[0x1E4F1C9C8] date];
  [v15 timeIntervalSince1970];
  [v10 setEpochEventTimestampInSeconds:(unint64_t)v16];

  return v10;
}

void _AFPreferencesSetSiriDataSharingOptInStatus(uint64_t a1, unint64_t a2, void *a3)
{
}

uint64_t _AFPreferencesSiriDataSharingOptInStatus()
{
  return _AFPreferencesSiriDataSharingOptInStatusWithContext(0);
}

uint64_t _AFPreferencesSiriDataSharingLegacyOptInStatusWithContext(void *a1)
{
  uint64_t v1 = _AFPreferencesValueForKeyWithContext(@"Siri Data Sharing Opt-In Status", @"com.apple.assistant.support", a1);
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    uint64_t v2 = [v1 integerValue];
  }
  else {
    uint64_t v2 = 0;
  }

  return v2;
}

uint64_t _AFPreferencesSetSiriDataSharingHomeAccessoryMigrated()
{
  id v0 = [MEMORY[0x1E4F28ED0] numberWithBool:1];
  _AFPreferencesSetValueForKeyWithContext(v0, @"Siri Data Sharing Home Accessory Migrated", @"com.apple.assistant.support", 0);

  return CFPreferencesAppSynchronize(@"com.apple.assistant.support");
}

uint64_t _AFPreferencesSiriDataSharingHomeAccessoryMigrated()
{
  return _AFSupportPreferencesBoolForKeyWithDefault(@"Siri Data Sharing Home Accessory Migrated", 0);
}

void _AFPreferencesSetPhoneOptedOut2021()
{
  id v0 = [MEMORY[0x1E4F28ED0] numberWithBool:1];
  _AFPreferencesSetValueForKeyWithContext(v0, @"Siri Data Sharing Phone Has Been Opted Out", @"com.apple.assistant.support", 0);

  CFPreferencesAppSynchronize(@"com.apple.assistant.support");
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, @"AFSiriDataSharingOptStatusInDidChangeDarwinNotification", 0, 0, 1u);
}

uint64_t _AFPreferencesGetPhoneOptedOut2021()
{
  return _AFSupportPreferencesBoolForKeyWithDefault(@"Siri Data Sharing Phone Has Been Opted Out", 0);
}

void _AFPreferencesSetWatchOptedOut2021()
{
  id v0 = [MEMORY[0x1E4F28ED0] numberWithBool:1];
  _AFPreferencesSetValueForKeyWithContext(v0, @"Siri Data Sharing Watch Has Been Opted Out", @"com.apple.assistant.support", 0);

  CFPreferencesAppSynchronize(@"com.apple.assistant.support");
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, @"AFSiriDataSharingOptStatusInDidChangeDarwinNotification", 0, 0, 1u);
}

uint64_t _AFPreferencesGetWatchOptedOut2021()
{
  return _AFSupportPreferencesBoolForKeyWithDefault(@"Siri Data Sharing Watch Has Been Opted Out", 0);
}

uint64_t _AFPreferencesSiriDataSharingHomePodSetupDeviceIsValidWithContext(void *a1)
{
  return _AFPreferencesBoolValueForKeyWithContext(@"Siri Data Sharing HomePod Setup Device Is Valid", 0, @"com.apple.assistant.support", a1);
}

uint64_t _AFPreferencesSetSiriDataSharingHomePodSetupDeviceIsValidWithContext(uint64_t a1, void *a2)
{
  int v3 = (void *)MEMORY[0x1E4F28ED0];
  id v4 = a2;
  uint64_t v5 = [v3 numberWithBool:a1];
  _AFPreferencesSetValueForKeyWithContext(v5, @"Siri Data Sharing HomePod Setup Device Is Valid", @"com.apple.assistant.support", v4);

  return CFPreferencesAppSynchronize(@"com.apple.assistant.support");
}

uint64_t _AFPreferencesIsHomePodInHH2Mode()
{
  return _AFSupportPreferencesBoolForKeyWithDefault(@"HomePod Is In HH2 Mode", 0);
}

uint64_t _AFPreferencesSetIsHomePodInHH2Mode(uint64_t a1)
{
  uint64_t v1 = [MEMORY[0x1E4F28ED0] numberWithBool:a1];
  _AFPreferencesSetValueForKeyWithContext(v1, @"HomePod Is In HH2 Mode", @"com.apple.assistant.support", 0);

  return CFPreferencesAppSynchronize(@"com.apple.assistant.support");
}

void _AFPreferencesSetTVOptedOut2021()
{
  id v0 = [MEMORY[0x1E4F28ED0] numberWithBool:1];
  _AFPreferencesSetValueForKeyWithContext(v0, @"Siri Data Sharing TV Has Been Opted Out", @"com.apple.assistant.support", 0);

  CFPreferencesAppSynchronize(@"com.apple.assistant.support");
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, @"AFSiriDataSharingOptStatusInDidChangeDarwinNotification", 0, 0, 1u);
}

uint64_t _AFPreferencesGetTVOptedOut2021()
{
  return _AFSupportPreferencesBoolForKeyWithDefault(@"Siri Data Sharing TV Has Been Opted Out", 0);
}

BOOL _AFPreferencesHomePodPriorOptInValue2021IsPresentWithContext(void *a1)
{
  uint64_t v1 = _AFPreferencesValueForKeyWithContext(@"Siri Data Sharing Opt-In Status Before Opting HomePod Out 2021", @"com.apple.assistant.support", a1);
  BOOL v2 = v1 != 0;

  return v2;
}

void _AFPreferencesSetHomePodPriorOptInValue2021WithContext(uint64_t a1, void *a2)
{
  int v3 = (void *)MEMORY[0x1E4F28ED0];
  id v4 = a2;
  uint64_t v5 = [v3 numberWithInteger:a1];
  _AFPreferencesSetValueForKeyWithContext(v5, @"Siri Data Sharing Opt-In Status Before Opting HomePod Out 2021", @"com.apple.assistant.support", v4);

  CFPreferencesAppSynchronize(@"com.apple.assistant.support");
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, @"AFSiriDataSharingOptStatusInDidChangeDarwinNotification", 0, 0, 1u);
}

void _AFPreferencesSetHomePodOptIn2021AdjustedWithContext(void *a1)
{
  uint64_t v1 = (void *)MEMORY[0x1E4F28ED0];
  id v2 = a1;
  int v3 = [v1 numberWithBool:1];
  _AFPreferencesSetValueForKeyWithContext(v3, @"Siri Data Sharing HomePod Has Been Opted Out", @"com.apple.assistant.support", v2);

  CFPreferencesAppSynchronize(@"com.apple.assistant.support");
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, @"AFSiriDataSharingOptStatusInDidChangeDarwinNotification", 0, 0, 1u);
}

uint64_t _AFPreferencesHomePodAdjustedOptIn2021WithContext(void *a1)
{
  return _AFPreferencesBoolValueForKeyWithContext(@"Siri Data Sharing HomePod Has Been Opted Out", 0, @"com.apple.assistant.support", a1);
}

void _AFPreferencesSetSiriDataSharingOptInAlertPresented(uint64_t a1)
{
  uint64_t v1 = [MEMORY[0x1E4F28ED0] numberWithBool:a1];
  _AFPreferencesSetValueForKeyWithContext(v1, @"Suppress Siri Data Sharing Opt In", @"com.apple.assistant.support", 0);

  CFPreferencesAppSynchronize(@"com.apple.assistant.support");
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, @"AFSiriDataSharingOptStatusInDidChangeDarwinNotification", 0, 0, 1u);
}

uint64_t _AFPreferencesShouldSuppressSiriDataSharingOptInAlert()
{
  return _AFSupportPreferencesBoolForKeyWithDefault(@"Suppress Siri Data Sharing Opt In", 0);
}

uint64_t _AFPreferencesSiriDesignModeIsEnabled()
{
  return _AFSupportPreferencesBoolForKeyWithDefault(@"HI/CI Design Mode", 0);
}

uint64_t AFPreferencesDisableDictationMode()
{
  id v0 = _AFPreferencesValueForKeyWithContext(@"Disable Dictation Mode", @"com.apple.assistant", 0);
  uint64_t v1 = [v0 BOOLValue];

  return v1;
}

uint64_t AFPreferencesAudioDuckingAllowed()
{
  return _AFSupportPreferencesBoolForKeyWithDefault(@"Audio Ducking Allowed", 1);
}

uint64_t _AFPreferencesOpportuneSpeakingModuleEnabled()
{
  id v0 = _AFPreferencesValueForKeyWithContext(@"Opportune Speaking Module Enabled", @"com.apple.assistant", 0);
  uint64_t v1 = v0;
  if (v0) {
    uint64_t v2 = [v0 BOOLValue];
  }
  else {
    uint64_t v2 = 1;
  }

  return v2;
}

void _AFPreferencesSetOpportuneSpeakingModuleEnabled(uint64_t a1)
{
  id v1 = [MEMORY[0x1E4F28ED0] numberWithBool:a1];
  _AFPreferencesSetValueForKeyWithContext(v1, @"Opportune Speaking Module Enabled", @"com.apple.assistant", 0);
}

uint64_t _AFPreferencesOpportuneSpeakingModelUsed()
{
  id v0 = _AFPreferencesValueForKeyWithContext(@"Opportune Speaking Model Used", @"com.apple.assistant", 0);
  uint64_t v1 = [v0 integerValue];

  return v1;
}

void _AFPreferencesSetOpportuneSpeakingModelUsed(uint64_t a1)
{
  id v1 = [MEMORY[0x1E4F28ED0] numberWithInteger:a1];
  _AFPreferencesSetValueForKeyWithContext(v1, @"Opportune Speaking Model Used", @"com.apple.assistant", 0);
}

uint64_t _AFPreferencesSpokenNotificationShowUIDuringTriggerlessListening()
{
  id v0 = _AFPreferencesValueForKeyWithContext(@"Show UI During Triggerless Listening", @"com.apple.assistant", 0);
  uint64_t v1 = [v0 BOOLValue];

  return v1;
}

void _AFPreferencesSetSpokenNotificationShowUIDuringTriggerlessListening(uint64_t a1)
{
  id v1 = [MEMORY[0x1E4F28ED0] numberWithBool:a1];
  _AFPreferencesSetValueForKeyWithContext(v1, @"Show UI During Triggerless Listening", @"com.apple.assistant", 0);
}

uint64_t _AFPreferencesSpokenNotificationPlayAlertBeforeTriggerlessListening()
{
  id v0 = _AFPreferencesValueForKeyWithContext(@"Play Alert Before Triggerless Listening", @"com.apple.assistant", 0);
  uint64_t v1 = [v0 BOOLValue];

  return v1;
}

void _AFPreferencesSetSpokenNotificationPlayAlertBeforeTriggerlessListening(uint64_t a1)
{
  id v1 = [MEMORY[0x1E4F28ED0] numberWithBool:a1];
  _AFPreferencesSetValueForKeyWithContext(v1, @"Play Alert Before Triggerless Listening", @"com.apple.assistant", 0);
}

float _AFPreferencesSpokenNotificationTriggerlessReplyWindow()
{
  id v0 = _AFPreferencesValueForKeyWithContext(@"Spoken Notification Triggerless Reply Window Time", @"com.apple.assistant", 0);
  id v1 = v0;
  if (v0)
  {
    [v0 floatValue];
    float v3 = v2;
  }
  else
  {
    float v3 = 9.0;
  }

  return v3;
}

void _AFPreferencesSetSpokenNotificationTriggerlessReplyWindow()
{
  objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithFloat:");
  id v0 = (id)objc_claimAutoreleasedReturnValue();
  _AFPreferencesSetValueForKeyWithContext(v0, @"Spoken Notification Triggerless Reply Window Time", @"com.apple.assistant", 0);
}

double _AFPreferencesSpokenNotificationQuickIgnoreTime()
{
  id v0 = _AFPreferencesValueForKeyWithContext(@"Spoken Notification Quick Ignore Time", @"com.apple.assistant", 0);
  id v1 = v0;
  if (v0)
  {
    [v0 doubleValue];
    double v3 = v2;
  }
  else
  {
    double v3 = 0.35;
  }

  return v3;
}

void _AFPreferencesSetSpokenNotificationQuickIgnoreTime()
{
  objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithDouble:");
  id v0 = (id)objc_claimAutoreleasedReturnValue();
  _AFPreferencesSetValueForKeyWithContext(v0, @"Spoken Notification Quick Ignore Time", @"com.apple.assistant", 0);
}

float _AFPreferencesSpokenNotificationTriggerlessReplyTresholdTime()
{
  id v0 = _AFPreferencesValueForKeyWithContext(@"Spoken Notification Triggerless Reply Time", @"com.apple.assistant", 0);
  id v1 = v0;
  if (v0)
  {
    [v0 floatValue];
    float v3 = v2;
  }
  else
  {
    float v3 = 0.26;
  }

  return v3;
}

void _AFPreferencesSetSpokenNotificationTriggerlessReplyTresholdTime()
{
  objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithFloat:");
  id v0 = (id)objc_claimAutoreleasedReturnValue();
  _AFPreferencesSetValueForKeyWithContext(v0, @"Spoken Notification Triggerless Reply Time", @"com.apple.assistant", 0);
}

uint64_t _AFPreferencesOpportuneSpeakingEdgeDetectorSignalOverride()
{
  id v0 = _AFPreferencesValueForKeyWithContext(@"Opportune Speaking Edge Detector Signal Override", @"com.apple.assistant", 0);
  id v1 = v0;
  if (v0) {
    uint64_t v2 = [v0 integerValue];
  }
  else {
    uint64_t v2 = -1;
  }

  return v2;
}

unint64_t _AFPreferencesSetOpportuneSpeakingEdgeDetectorSignalOverride(unint64_t result)
{
  if (result <= 1)
  {
    uint64_t v2 = [MEMORY[0x1E4F28ED0] numberWithInteger:result];
    _AFPreferencesSetValueForKeyWithContext(v2, @"Opportune Speaking Edge Detector Signal Override", @"com.apple.assistant", 0);

    return CFPreferencesAppSynchronize(@"com.apple.assistant");
  }
  return result;
}

uint64_t _AFPreferencesClearOpportuneSpeakingEdgeDetectorSignalOverride()
{
  _AFPreferencesSetValueForKeyWithContext(0, @"Opportune Speaking Edge Detector Signal Override", @"com.apple.assistant", 0);
  return CFPreferencesAppSynchronize(@"com.apple.assistant");
}

float _AFPreferencesAnnounceNotificationsVoiceOnMinRatio()
{
  id v0 = _AFPreferencesValueForKeyWithContext(@"Announce Notifications Voice On Min Ratio", @"com.apple.assistant", 0);
  uint64_t v1 = v0;
  if (v0)
  {
    [v0 floatValue];
    float v3 = v2;
  }
  else
  {
    float v3 = 0.3;
  }

  return v3;
}

void _AFPreferencesSetAnnounceNotificationsVoiceOnMinRatio()
{
  objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithFloat:");
  id v0 = (id)objc_claimAutoreleasedReturnValue();
  _AFPreferencesSetValueForKeyWithContext(v0, @"Announce Notifications Voice On Min Ratio", @"com.apple.assistant", 0);
}

float _AFPreferencesAnnounceNotificationsVoiceOffMaxRatio()
{
  id v0 = _AFPreferencesValueForKeyWithContext(@"Announce Notifications Voice Off Max Ratio", @"com.apple.assistant", 0);
  uint64_t v1 = v0;
  if (v0)
  {
    [v0 floatValue];
    float v3 = v2;
  }
  else
  {
    float v3 = 0.1;
  }

  return v3;
}

void _AFPreferencesSetAnnounceNotificationsVoiceOffMaxRatio()
{
  objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithFloat:");
  id v0 = (id)objc_claimAutoreleasedReturnValue();
  _AFPreferencesSetValueForKeyWithContext(v0, @"Announce Notifications Voice Off Max Ratio", @"com.apple.assistant", 0);
}

float _AFPreferencesAnnounceCallsVoiceOnMinRatio()
{
  id v0 = _AFPreferencesValueForKeyWithContext(@"Announce Calls Voice On Min Ratio", @"com.apple.assistant", 0);
  uint64_t v1 = v0;
  if (v0)
  {
    [v0 floatValue];
    float v3 = v2;
  }
  else
  {
    float v3 = 0.3;
  }

  return v3;
}

void _AFPreferencesSetAnnounceCallsVoiceOnMinRatio()
{
  objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithFloat:");
  id v0 = (id)objc_claimAutoreleasedReturnValue();
  _AFPreferencesSetValueForKeyWithContext(v0, @"Announce Calls Voice On Min Ratio", @"com.apple.assistant", 0);
}

float _AFPreferencesAnnounceCallsVoiceOffMaxRatio()
{
  id v0 = _AFPreferencesValueForKeyWithContext(@"Announce Calls Voice Off Max Ratio", @"com.apple.assistant", 0);
  uint64_t v1 = v0;
  if (v0)
  {
    [v0 floatValue];
    float v3 = v2;
  }
  else
  {
    float v3 = 0.1;
  }

  return v3;
}

void _AFPreferencesSetAnnounceCallsVoiceOffMaxRatio()
{
  objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithFloat:");
  id v0 = (id)objc_claimAutoreleasedReturnValue();
  _AFPreferencesSetValueForKeyWithContext(v0, @"Announce Calls Voice Off Max Ratio", @"com.apple.assistant", 0);
}

double _AFPreferencesAnnounceCallsBargeInTime()
{
  id v0 = _AFPreferencesValueForKeyWithContext(@"Announce Calls Barge In Time", @"com.apple.assistant", 0);
  uint64_t v1 = v0;
  if (v0)
  {
    [v0 doubleValue];
    double v3 = v2;
  }
  else
  {
    double v3 = 0.3;
  }

  return v3;
}

void _AFPreferencesSetAnnounceCallsBargeInTime()
{
  objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithDouble:");
  id v0 = (id)objc_claimAutoreleasedReturnValue();
  _AFPreferencesSetValueForKeyWithContext(v0, @"Announce Calls Barge In Time", @"com.apple.assistant", 0);
}

uint64_t _AFPreferencesSetDictationLanguageDetectorEnabledByServer(uint64_t a1)
{
  uint64_t v1 = [MEMORY[0x1E4F28ED0] numberWithBool:a1];
  _AFPreferencesSetValueForKeyWithContext(v1, @"Dictation Language Detector Enabled By Server", @"com.apple.assistant", 0);

  return CFPreferencesAppSynchronize(@"com.apple.assistant");
}

uint64_t _AFPreferencesSetMultilingualDictationTimeoutInMilliSeconds(void *a1)
{
  _AFPreferencesSetValueForKeyWithContext(a1, @"MultilingualDictationTimeout", @"com.apple.assistant", 0);
  return CFPreferencesAppSynchronize(@"com.apple.assistant");
}

id _AFPreferencesMultilingualDictationTimeoutInMilliSeconds()
{
  return _AFPreferencesValueForKeyWithContext(@"MultilingualDictationTimeout", @"com.apple.assistant", 0);
}

uint64_t _AFPreferencesShouldSyncFirstPartyAppIntentPolicy()
{
  id v0 = _AFPreferencesValueForKeyWithContext(@"Sync First Party App Intent Policy", @"com.apple.assistant", 0);
  uint64_t v1 = [v0 BOOLValue];

  return v1;
}

uint64_t _AFPreferencesSetShouldSyncFirstPartyAppIntentPolicy(uint64_t a1)
{
  uint64_t v1 = [MEMORY[0x1E4F28ED0] numberWithBool:a1];
  _AFPreferencesSetValueForKeyWithContext(v1, @"Sync First Party App Intent Policy", @"com.apple.assistant", 0);

  return CFPreferencesAppSynchronize(@"com.apple.assistant");
}

uint64_t _AFPreferencesAuthenticationDisabled()
{
  id v0 = _AFPreferencesValueForKeyWithContext(@"Authentication Disabled", @"com.apple.assistant", 0);
  uint64_t v1 = [v0 BOOLValue];

  return v1;
}

uint64_t _AFPreferencesSetiRATManagerRecommendationEnabled(uint64_t a1)
{
  uint64_t v1 = [MEMORY[0x1E4F28ED0] numberWithBool:a1];
  _AFPreferencesSetValueForKeyWithContext(v1, @"iRATManagerRecommendationEnabled", @"com.apple.assistant", 0);

  return CFPreferencesAppSynchronize(@"com.apple.assistant");
}

uint64_t _AFPreferencesiRATManagerRecommendationEnabled()
{
  id v0 = _AFPreferencesValueForKeyWithContext(@"iRATManagerRecommendationEnabled", @"com.apple.assistant", 0);
  uint64_t v1 = v0;
  if (v0) {
    uint64_t v2 = [v0 BOOLValue];
  }
  else {
    uint64_t v2 = 0;
  }

  return v2;
}

id _AFPreferencesAnnounceNotificationsTemporarilyDisabledEndDateForPlatform(uint64_t a1)
{
  uint64_t v1 = _AFPreferencesAnnounceNotificationsDisabledUntilEndDateDictionary(a1);
  uint64_t v2 = [v1 objectForKey:@"GLOBAL"];
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v3 = v2;
  }
  else {
    id v3 = 0;
  }

  return v3;
}

id _AFPreferencesAnnounceNotificationsDisabledUntilEndDateDictionary(uint64_t a1)
{
  if ((unint64_t)(a1 - 3) >= 2)
  {
    if (a1 == 2)
    {
      id v3 = _AFPreferencesValueForKeyWithContext(@"Announce Notifications in CarPlay", @"com.apple.assistant.backedup", 0);
      objc_opt_class();
      id v1 = 0;
      if (objc_opt_isKindOfClass()) {
        id v1 = v3;
      }

      id v4 = [v1 objectForKey:@"Spoken Notification Temporarily Muted End Date"];
      objc_opt_class();
      if (objc_opt_isKindOfClass()) {
        id v2 = v4;
      }
      else {
        id v2 = 0;
      }

      goto LABEL_14;
    }
    if (a1 != 1)
    {
      id v2 = 0;
      goto LABEL_15;
    }
  }
  _AFPreferencesValueForKeyWithContext(@"Spoken Notification Temporarily Muted End Date", @"com.apple.assistant.backedup", 0);
  id v1 = (id)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v1 = v1;
    id v2 = v1;
  }
  else
  {
    id v2 = 0;
  }
LABEL_14:

LABEL_15:
  return v2;
}

void _AFPreferencesSetAnnounceNotificationsTemporarilyDisabledEndDateForPlatform(void *a1, uint64_t a2)
{
  id v7 = a1;
  id v3 = _AFPreferencesAnnounceNotificationsDisabledUntilEndDateDictionary(a2);
  if (v3) {
    id v4 = (id)[objc_alloc(MEMORY[0x1E4F1CA60]) initWithDictionary:v3];
  }
  else {
    id v4 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  }
  uint64_t v5 = v4;
  if (v7) {
    [v4 setObject:v7 forKey:@"GLOBAL"];
  }
  else {
    [v4 removeObjectForKey:@"GLOBAL"];
  }
  _AFPreferencesSetValueForKeyWithContext(v5, @"Spoken Notification Temporarily Muted End Date", @"com.apple.assistant.backedup", 0);
  CFPreferencesAppSynchronize(@"com.apple.assistant.backedup");
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, @"kAFPreferencesDidChangeDarwinNotification", 0, 0, 1u);
}

void _AFPreferencesClearSpokenNotificationTemporarilyDisabledStatus()
{
  _AFPreferencesSetValueForKeyWithContext(0, @"Spoken Notification Temporarily Muted End Date", @"com.apple.assistant.backedup", 0);
  CFPreferencesAppSynchronize(@"com.apple.assistant.backedup");
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, @"kAFPreferencesDidChangeDarwinNotification", 0, 0, 1u);
}

id _AFPreferencesAnnounceNotificationsTemporarilyDisabledEndDateForAppOnPlatform(void *a1, uint64_t a2)
{
  id v3 = a1;
  id v4 = _AFPreferencesAnnounceNotificationsDisabledUntilEndDateDictionary(a2);
  uint64_t v5 = [v4 objectForKey:v3];

  id v6 = _AFPreferencesAnnounceNotificationsTemporarilyDisabledEndDateForPlatform(a2);
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v7 = v5;
    id v8 = v7;
    if (v6)
    {
      uint64_t v9 = [v7 laterDate:v6];

      id v8 = (id)v9;
    }
  }
  else
  {
    id v8 = v6;
  }
  id v10 = v8;

  return v10;
}

void _AFPreferencesSetAnnounceNotificationsTemporarilyDisabledEndDateForAppOnPlatform(void *a1, void *a2, uint64_t a3)
{
  id v10 = a1;
  id v5 = a2;
  id v6 = _AFPreferencesAnnounceNotificationsDisabledUntilEndDateDictionary(a3);
  if (v6) {
    id v7 = (id)[objc_alloc(MEMORY[0x1E4F1CA60]) initWithDictionary:v6];
  }
  else {
    id v7 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  }
  id v8 = v7;
  if (v10) {
    [v7 setObject:v10 forKey:v5];
  }
  else {
    [v7 removeObjectForKey:v5];
  }
  _AFPreferencesSetValueForKeyWithContext(v8, @"Spoken Notification Temporarily Muted End Date", @"com.apple.assistant.backedup", 0);
  CFPreferencesAppSynchronize(@"com.apple.assistant.backedup");
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, @"kAFPreferencesDidChangeDarwinNotification", 0, 0, 1u);
}

void _AFPreferencesRemoveThreadCancellationsOlderThanTimeInterval(double a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v2 = _AFPreferencesLastAnnouncementThreadCancellationDicationary();
  id v3 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  id v4 = v2;
  uint64_t v5 = [v4 countByEnumeratingWithState:&v13 objects:v17 count:16];
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)v14;
    do
    {
      for (uint64_t i = 0; i != v6; ++i)
      {
        if (*(void *)v14 != v7) {
          objc_enumerationMutation(v4);
        }
        uint64_t v9 = *(void *)(*((void *)&v13 + 1) + 8 * i);
        id v10 = objc_msgSend(v4, "objectForKey:", v9, (void)v13);
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          [v10 timeIntervalSinceNow];
          if (-v11 < a1) {
            [v3 setObject:v10 forKey:v9];
          }
        }
      }
      uint64_t v6 = [v4 countByEnumeratingWithState:&v13 objects:v17 count:16];
    }
    while (v6);
  }

  _AFPreferencesSetValueForKeyWithContext(v3, @"Announce Notifications Thread Cancellation History", @"com.apple.assistant.backedup", 0);
  CFPreferencesAppSynchronize(@"com.apple.assistant.backedup");
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, @"kAFPreferencesDidChangeDarwinNotification", 0, 0, 1u);
}

uint64_t _AFPreferencesSpokenNotificationsProxCardSeen()
{
  return _AFBackedUpPreferencesBoolForKeyWithDefault(@"Spoken Notifications Proximity Card Seen", 0);
}

void _AFPreferencesSetSpokenNotificationsProxCardSeen()
{
  _AFPreferencesSetValueForKeyWithContext(MEMORY[0x1E4F1CC38], @"Spoken Notifications Proximity Card Seen", @"com.apple.assistant.backedup", 0);
  CFPreferencesAppSynchronize(@"com.apple.assistant.backedup");
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, @"kAFPreferencesDidChangeDarwinNotification", 0, 0, 1u);
}

uint64_t _AFPreferencesSpokenNotificationSkipTriggerlessReplyConfirmation()
{
  return _AFBackedUpPreferencesBoolForKeyWithDefault(@"Spoken Notification Skip Triggerless Reply Confirmation", 0);
}

void _AFPreferencesSetSpokenNotificationIsAlwaysOpportune(uint64_t a1)
{
  id v1 = [MEMORY[0x1E4F28ED0] numberWithBool:a1];
  _AFPreferencesSetValueForKeyWithContext(v1, @"Spoken Notification Should Always Speak Notifications", @"com.apple.assistant", 0);
}

uint64_t _AFPreferencesSpokenNotificationIsAlwaysOpportune()
{
  id v0 = _AFPreferencesValueForKeyWithContext(@"Spoken Notification Should Always Speak Notifications", @"com.apple.assistant", 0);
  id v1 = v0;
  if (v0) {
    uint64_t v2 = [v0 BOOLValue];
  }
  else {
    uint64_t v2 = 0;
  }

  return v2;
}

void _AFPreferencesSetSpokenNotificationShouldAnnounceAllNotifications(uint64_t a1)
{
  id v1 = [MEMORY[0x1E4F28ED0] numberWithBool:a1];
  _AFPreferencesSetValueForKeyWithContext(v1, @"BBAlwaysSpeakLockScreenNotifications", @"com.apple.bulletinboard", 0);
}

uint64_t _AFPreferencesSpokenNotificationShouldAnnounceAllNotifications()
{
  id v0 = _AFPreferencesValueForKeyWithContext(@"BBAlwaysSpeakLockScreenNotifications", @"com.apple.bulletinboard", 0);
  id v1 = v0;
  if (v0) {
    uint64_t v2 = [v0 BOOLValue];
  }
  else {
    uint64_t v2 = 0;
  }

  return v2;
}

void _AFPreferencesSetAnnounceNotificationsOnBuiltInSpeakerEnabled(uint64_t a1)
{
  id v1 = [MEMORY[0x1E4F28ED0] numberWithBool:a1];
  _AFPreferencesSetValueForKeyWithContext(v1, @"Announce Notifications On Built In Speaker", @"com.apple.assistant.backedup", 0);

  CFPreferencesAppSynchronize(@"com.apple.assistant.backedup");
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, @"kAFPreferencesDidChangeDarwinNotification", 0, 0, 1u);
}

void _AFPreferencesSetAnnounceNotificationsOnHearingAidsSupported(uint64_t a1)
{
  id v1 = [MEMORY[0x1E4F28ED0] numberWithBool:a1];
  _AFPreferencesSetValueForKeyWithContext(v1, @"Announce Notifications On Hearing Aids Supported", @"com.apple.assistant", 0);

  CFPreferencesAppSynchronize(@"com.apple.assistant");
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, @"kAFPreferencesDidChangeDarwinNotification", 0, 0, 1u);
}

void _AFPreferencesUpdateAnnounceNotificationsOnHearingAidsSupported()
{
  id v0 = _AFPreferencesValueForKeyWithContext(@"AXHearingAidPaired", @"com.apple.Accessibility", 0);
  id v1 = v0;
  if (v0) {
    id v0 = (void *)[v0 BOOLValue];
  }
  _AFPreferencesSetAnnounceNotificationsOnHearingAidsSupported((uint64_t)v0);
}

void _AFPreferencesSetAnnounceNotificationsOnHearingAidsEnabled(uint64_t a1)
{
  id v1 = [MEMORY[0x1E4F28ED0] numberWithBool:a1];
  _AFPreferencesSetValueForKeyWithContext(v1, @"Announce Notifications On Hearing Aids", @"com.apple.assistant.backedup", 0);

  CFPreferencesAppSynchronize(@"com.apple.assistant.backedup");
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, @"kAFPreferencesDidChangeDarwinNotification", 0, 0, 1u);
}

uint64_t _AFPreferencesSetSpokenNotificationShouldSkipTriggerlessReplies(uint64_t a1)
{
  id v1 = [MEMORY[0x1E4F28ED0] numberWithBool:a1];
  _AFPreferencesSetValueForKeyWithContext(v1, @"Spoken Notification Should Skip Trggerless Replies", @"com.apple.assistant", 0);

  uint64_t v2 = (const char *)[@"AFSiriUserNotificationRequestCapabilityForceUpdate" UTF8String];
  return notify_post(v2);
}

uint64_t _AFPreferencesSpokenNotificationShouldSkipTriggerlessReplies()
{
  id v0 = _AFPreferencesValueForKeyWithContext(@"Spoken Notification Should Skip Trggerless Replies", @"com.apple.assistant", 0);
  id v1 = v0;
  if (v0) {
    uint64_t v2 = [v0 BOOLValue];
  }
  else {
    uint64_t v2 = 0;
  }

  return v2;
}

uint64_t _AFPreferencesAnnounceNotificationsInCarPlayTemporarilyDisabled()
{
  id v0 = _AFPreferencesValueForKeyWithContext(@"Announce Notifications Temporarily Disabled for CarPlay", @"com.apple.assistant", 0);
  id v1 = v0;
  if (v0) {
    uint64_t v2 = [v0 BOOLValue];
  }
  else {
    uint64_t v2 = 1;
  }

  return v2;
}

void _AFPreferencesSetAnnounceNotificationsInCarPlayTemporarilyDisabled(uint64_t a1)
{
  id v1 = [MEMORY[0x1E4F28ED0] numberWithBool:a1];
  _AFPreferencesSetValueForKeyWithContext(v1, @"Announce Notifications Temporarily Disabled for CarPlay", @"com.apple.assistant", 0);

  CFPreferencesAppSynchronize(@"com.apple.assistant");
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, @"kAFPreferencesDidChangeDarwinNotification", 0, 0, 1u);
}

void _AFPreferencesClearAnnounceNotificationsInCarPlayTemporarilyDisabled()
{
  _AFPreferencesSetValueForKeyWithContext(0, @"Announce Notifications Temporarily Disabled for CarPlay", @"com.apple.assistant", 0);
  CFPreferencesAppSynchronize(@"com.apple.assistant");
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, @"kAFPreferencesDidChangeDarwinNotification", 0, 0, 1u);
}

uint64_t _AFPreferencesAnnounceNotificationsInCarPlayType()
{
  id v0 = _AFPreferencesValueForKeyWithContext(@"Announce Notifications in CarPlay Type", @"com.apple.assistant.backedup", 0);
  id v1 = v0;
  if (v0 && (unint64_t)([v0 integerValue] - 1) <= 3) {
    uint64_t v2 = [v1 integerValue];
  }
  else {
    uint64_t v2 = 4;
  }

  return v2;
}

void _AFPreferencesSetAnnounceNotificationsInCarPlayType(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) <= 3)
  {
    uint64_t v2 = [MEMORY[0x1E4F28ED0] numberWithInteger:a1];
    _AFPreferencesSetValueForKeyWithContext(v2, @"Announce Notifications in CarPlay Type", @"com.apple.assistant.backedup", 0);

    CFPreferencesAppSynchronize(@"com.apple.assistant.backedup");
    DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterPostNotification(DarwinNotifyCenter, @"kAFPreferencesDidChangeDarwinNotification", 0, 0, 1u);
  }
}

void _AFPreferencesClearAnnounceNotificationsInCarPlayType()
{
  _AFPreferencesSetValueForKeyWithContext(0, @"Announce Notifications in CarPlay Type", @"com.apple.assistant.backedup", 0);
  CFPreferencesAppSynchronize(@"com.apple.assistant.backedup");
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, @"kAFPreferencesDidChangeDarwinNotification", 0, 0, 1u);
}

uint64_t _AFPreferencesSiriRMVSetting(void *a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = _AFPreferencesValueForKeyWithContext(@"Siri Apple TV Recognize my voice setting", @"com.apple.assistant.backedup", 0);
    id v3 = [v1 uppercaseString];
    id v4 = [v2 objectForKey:v3];
    uint64_t v5 = [v4 integerValue];
  }
  else
  {
    uint64_t v6 = AFSiriLogContextConnection;
    if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_ERROR))
    {
      int v8 = 136315138;
      uint64_t v9 = "_AFPreferencesSiriRMVSetting";
      _os_log_error_impl(&dword_19CF1D000, v6, OS_LOG_TYPE_ERROR, "%s Requested nil iCloudAltDSID", (uint8_t *)&v8, 0xCu);
    }
    uint64_t v5 = 0;
  }

  return v5;
}

void _AFPreferencesSetSiriRMVSetting(void *a1, uint64_t a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  if (v3)
  {
    uint64_t v4 = _AFPreferencesValueForKeyWithContext(@"Siri Apple TV Recognize my voice setting", @"com.apple.assistant.backedup", 0);
    uint64_t v5 = (void *)v4;
    uint64_t v6 = (void *)MEMORY[0x1E4F1CC08];
    if (v4) {
      uint64_t v6 = (void *)v4;
    }
    id v7 = v6;

    int v8 = (void *)[v7 mutableCopy];
    uint64_t v9 = [MEMORY[0x1E4F28ED0] numberWithLong:a2];
    uint64_t v10 = [v3 uppercaseString];
    [v8 setObject:v9 forKey:v10];

    _AFPreferencesSetValueForKeyWithContext(v8, @"Siri Apple TV Recognize my voice setting", @"com.apple.assistant.backedup", 0);
    CFPreferencesAppSynchronize(@"com.apple.assistant.backedup");
    DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterPostNotification(DarwinNotifyCenter, @"kAFPreferencesDidChangeDarwinNotification", 0, 0, 1u);
  }
  else
  {
    uint64_t v12 = AFSiriLogContextConnection;
    if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_ERROR))
    {
      int v13 = 136315138;
      long long v14 = "_AFPreferencesSetSiriRMVSetting";
      _os_log_error_impl(&dword_19CF1D000, v12, OS_LOG_TYPE_ERROR, "%s Asked to set nil iCloudAltDSID", (uint8_t *)&v13, 0xCu);
    }
  }
}

void _AFPreferencesSetMessageWithoutConfirmationEnabled(uint64_t a1)
{
  uint64_t v2 = [MEMORY[0x1E4F28ED0] numberWithBool:a1];
  _AFPreferencesSetValueForKeyWithContext(v2, @"Message Without Confirmation", @"com.apple.assistant.backedup", 0);

  id v3 = [MEMORY[0x1E4F28ED0] numberWithBool:a1];
  _AFPreferencesSetValueForKeyWithContext(v3, @"Message Without Confirmation in CarPlay", @"com.apple.assistant.backedup", 0);

  uint64_t v4 = [MEMORY[0x1E4F28ED0] numberWithBool:a1];
  _AFPreferencesSetValueForKeyWithContext(v4, @"Message Without Confirmation in Headphones", @"com.apple.assistant.backedup", 0);

  CFPreferencesAppSynchronize(@"com.apple.assistant.backedup");
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, @"kAFPreferencesDidChangeDarwinNotification", 0, 0, 1u);
}

void _AFPreferencesClearMessageWithoutConfirmationEnabled()
{
  _AFPreferencesSetValueForKeyWithContext(0, @"Message Without Confirmation", @"com.apple.assistant.backedup", 0);
  _AFPreferencesSetValueForKeyWithContext(0, @"Message Without Confirmation in CarPlay", @"com.apple.assistant.backedup", 0);
  _AFPreferencesSetValueForKeyWithContext(0, @"Message Without Confirmation in Headphones", @"com.apple.assistant.backedup", 0);
  CFPreferencesAppSynchronize(@"com.apple.assistant.backedup");
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, @"kAFPreferencesDidChangeDarwinNotification", 0, 0, 1u);
}

void _AFPreferencesSetMessageWithoutConfirmationInCarPlayEnabled(uint64_t a1)
{
  id v1 = [MEMORY[0x1E4F28ED0] numberWithBool:a1];
  _AFPreferencesSetValueForKeyWithContext(v1, @"Message Without Confirmation in CarPlay", @"com.apple.assistant.backedup", 0);

  CFPreferencesAppSynchronize(@"com.apple.assistant.backedup");
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, @"kAFPreferencesDidChangeDarwinNotification", 0, 0, 1u);
}

void _AFPreferencesClearMessageWithoutConfirmationInCarPlayEnabled()
{
  _AFPreferencesSetValueForKeyWithContext(0, @"Message Without Confirmation in CarPlay", @"com.apple.assistant.backedup", 0);
  CFPreferencesAppSynchronize(@"com.apple.assistant.backedup");
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, @"kAFPreferencesDidChangeDarwinNotification", 0, 0, 1u);
}

void _AFPreferencesSetMessageWithoutConfirmationHeadphonesEnabled(uint64_t a1)
{
  id v1 = [MEMORY[0x1E4F28ED0] numberWithBool:a1];
  _AFPreferencesSetValueForKeyWithContext(v1, @"Message Without Confirmation in Headphones", @"com.apple.assistant.backedup", 0);

  CFPreferencesAppSynchronize(@"com.apple.assistant.backedup");
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, @"kAFPreferencesDidChangeDarwinNotification", 0, 0, 1u);
}

void _AFPreferencesClearMessageWithoutConfirmationHeadphonesEnabled()
{
  _AFPreferencesSetValueForKeyWithContext(0, @"Message Without Confirmation in Headphones", @"com.apple.assistant.backedup", 0);
  CFPreferencesAppSynchronize(@"com.apple.assistant.backedup");
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, @"kAFPreferencesDidChangeDarwinNotification", 0, 0, 1u);
}

void _AFPreferencesSetShowAppsBehindSiriInCarPlayEnabled(uint64_t a1)
{
  id v1 = [MEMORY[0x1E4F28ED0] numberWithBool:a1];
  _AFPreferencesSetValueForKeyWithContext(v1, @"Show Apps Behind Siri in CarPlay", @"com.apple.assistant.backedup", 0);

  CFPreferencesAppSynchronize(@"com.apple.assistant.backedup");
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, @"kAFPreferencesDidChangeDarwinNotification", 0, 0, 1u);
}

void _AFPreferencesClearShowAppsBehindSiriInCarPlayEnabled()
{
  _AFPreferencesSetValueForKeyWithContext(0, @"Show Apps Behind Siri in CarPlay", @"com.apple.assistant.backedup", 0);
  CFPreferencesAppSynchronize(@"com.apple.assistant.backedup");
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, @"kAFPreferencesDidChangeDarwinNotification", 0, 0, 1u);
}

BOOL _AFPreferencesGetSiriInCallEnabled()
{
  return +[AFFeatureFlags isBlindedSphinxEnabled]
      || _AFPreferencesGetSiriInCallEnablementState() == 2;
}

void _AFPreferencesClearSiriInCallEnabled()
{
  _AFPreferencesSetValueForKeyWithContext(0, @"Siri In Call", @"com.apple.assistant.backedup", 0);
  CFPreferencesAppSynchronize(@"com.apple.assistant.backedup");
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, @"kAFPreferencesDidChangeDarwinNotification", 0, 0, 1u);
}

uint64_t _AFPreferencesShouldWriteSODABiomeStreamsToSysdiagnose()
{
  id v0 = _AFPreferencesValueForKeyWithContext(@"Write SODA Biome Streams To Sysdiagnose", @"com.apple.assistant", 0);
  uint64_t v1 = _AFPreferencesBoolFromValueWithDefault(v0, @"Write SODA Biome Streams To Sysdiagnose", 0);

  return v1;
}

id _AFPreferencesHardCodedBluetoothProximityNumber()
{
  id v0 = _AFPreferencesValueForKeyWithContext(@"Hard-coded BT Proximity", @"com.apple.assistant", 0);
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    uint64_t v1 = v0;
  }
  else {
    uint64_t v1 = 0;
  }
  id v2 = v1;

  return v2;
}

void _AFPreferencesSetHardCodedBluetoothProximity(void *a1)
{
}

void _AFPreferencesSiriXAssetsDidChange()
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  id v0 = AFSiriLogContextConnection;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
  {
    int v2 = 136315138;
    id v3 = "_AFPreferencesSiriXAssetsDidChange";
    _os_log_impl(&dword_19CF1D000, v0, OS_LOG_TYPE_INFO, "%s SiriX assets status changed. Posting AFSiriXAssetDidChangeDarwinNotification", (uint8_t *)&v2, 0xCu);
  }
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, @"AFSiriXAssetDidChangeDarwinNotification", 0, 0, 1u);
}

uint64_t _AFPreferencesSetSearchQueriesDataSharingStatusWithContext(uint64_t a1, void *a2)
{
  id v3 = (void *)MEMORY[0x1E4F28ED0];
  id v4 = a2;
  uint64_t v5 = [v3 numberWithInteger:a1];
  _AFPreferencesSetValueForKeyWithContext(v5, @"Search Queries Data Sharing Status", @"com.apple.assistant.support", v4);

  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, @"AFSearchQueriesDataSharingStatusDidChangeDarwinNotification", 0, 0, 1u);
  return CFPreferencesAppSynchronize(@"com.apple.assistant.support");
}

BOOL _AFPreferencesSearchQueriesDataSharingStatusIsForced(void *a1)
{
  return _AFPreferencesValueIsForcedWithContext(@"Search Queries Data Sharing Status", @"com.apple.assistant.support", a1);
}

id AFGradingOptInStateChangeWithHistoryEntry(void *a1)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  id v2 = objc_alloc_init(MEMORY[0x1E4FA12B0]);
  int v19 = [v1 valueForKey:@"Previous Opt-In Status"];
  unint64_t v3 = AFSiriDataSharingOptInStatusGetFromName(v19) - 1;
  if (v3 < 3) {
    uint64_t v4 = (v3 + 1);
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t v5 = [v1 valueForKey:@"New Opt-In Status"];
  unint64_t v6 = AFSiriDataSharingOptInStatusGetFromName(v5) - 1;
  if (v6 < 3) {
    uint64_t v7 = (v6 + 1);
  }
  else {
    uint64_t v7 = 0;
  }
  int v8 = [v1 valueForKey:@"Source"];
  unint64_t v9 = AFSiriDataSharingOptInStatusChangeSourceGetFromName(v8);
  if (v9 < 0xC) {
    uint64_t v10 = (v9 + 1);
  }
  else {
    uint64_t v10 = 0;
  }
  double v11 = [v1 valueForKey:@"Reason"];
  uint64_t v12 = [v1 valueForKey:@"Build Version"];
  int v13 = [v1 valueForKey:@"Date"];
  [v2 setPrevOptInState:v4];
  [v2 setNewOptInState:v7];
  [v2 setSource:v10];
  [v2 setReason:v11];
  [v2 setSystemBuild:v12];
  [v13 timeIntervalSince1970];
  [v2 setEpochEventTimestampInSeconds:(unint64_t)v14];
  uint64_t v15 = (void *)AFSiriLogContextConnection;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
  {
    long long v16 = v15;
    uint64_t v17 = [v2 formattedText];
    *(_DWORD *)buf = 136315650;
    int v21 = "AFGradingOptInStateChangeWithHistoryEntry";
    __int16 v22 = 2112;
    uint64_t v23 = v17;
    __int16 v24 = 2112;
    id v25 = v1;
    _os_log_impl(&dword_19CF1D000, v16, OS_LOG_TYPE_INFO, "%s Constructed SELF message %@ from opt-in status history entry %@", buf, 0x20u);
  }
  return v2;
}

uint64_t AFManagedPreferencesDomainForDomain(uint64_t a1)
{
  id v2 = NSString;
  unint64_t v3 = CPSystemRootDirectory();
  uint64_t v4 = [v2 stringWithFormat:@"%@Library/Managed Preferences/mobile/%@", v3, a1];

  return v4;
}

BOOL AFBluetoothDeviceSettingResponseStatusGetIsValid(unint64_t a1)
{
  return a1 < 5;
}

BOOL AFBluetoothDeviceSettingResponseStatusGetIsValidAndSpecified(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 4;
}

__CFString *AFBluetoothDeviceSettingResponseStatusGetName(unint64_t a1)
{
  if (a1 > 4) {
    return @"(unknown)";
  }
  else {
    return off_1E5926508[a1];
  }
}

uint64_t AFBluetoothDeviceSettingResponseStatusGetFromName(void *a1)
{
  id v1 = a1;
  if ([v1 length])
  {
    if (AFBluetoothDeviceSettingResponseStatusGetFromName_onceToken != -1) {
      dispatch_once(&AFBluetoothDeviceSettingResponseStatusGetFromName_onceToken, &__block_literal_global_10376);
    }
    id v2 = [(id)AFBluetoothDeviceSettingResponseStatusGetFromName_map objectForKey:v1];
    uint64_t v3 = [v2 integerValue];
  }
  else
  {
    uint64_t v3 = 0;
  }

  return v3;
}

void __AFBluetoothDeviceSettingResponseStatusGetFromName_block_invoke()
{
  id v0 = (void *)AFBluetoothDeviceSettingResponseStatusGetFromName_map;
  AFBluetoothDeviceSettingResponseStatusGetFromName_map = (uint64_t)&unk_1EEE98928;
}

BOOL AFSiriActivationActionTypeGetIsValid(unint64_t a1)
{
  return a1 < 7;
}

BOOL AFSiriActivationActionTypeGetIsValidAndSpecified(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 6;
}

__CFString *AFSiriActivationActionTypeGetName(unint64_t a1)
{
  if (a1 > 6) {
    return @"(unknown)";
  }
  else {
    return off_1E5926530[a1];
  }
}

uint64_t AFSiriActivationActionTypeGetFromName(void *a1)
{
  id v1 = a1;
  if ([v1 length])
  {
    if (AFSiriActivationActionTypeGetFromName_onceToken != -1) {
      dispatch_once(&AFSiriActivationActionTypeGetFromName_onceToken, &__block_literal_global_10433);
    }
    id v2 = [(id)AFSiriActivationActionTypeGetFromName_map objectForKey:v1];
    uint64_t v3 = [v2 integerValue];
  }
  else
  {
    uint64_t v3 = 0;
  }

  return v3;
}

void __AFSiriActivationActionTypeGetFromName_block_invoke()
{
  id v0 = (void *)AFSiriActivationActionTypeGetFromName_map;
  AFSiriActivationActionTypeGetFromName_map = (uint64_t)&unk_1EEE98950;
}

id initDCLongRunningLog()
{
  if (initDCLongRunningLog_sOnce != -1) {
    dispatch_once(&initDCLongRunningLog_sOnce, &__block_literal_global_120_10517);
  }
  id v0 = (void *)classDCLongRunningLog;
  return v0;
}

Class __initDCLongRunningLog_block_invoke()
{
  if (DataCollectionServicesLibrary_sOnce != -1) {
    dispatch_once(&DataCollectionServicesLibrary_sOnce, &__block_literal_global_109_10519);
  }
  Class result = objc_getClass("DCLongRunningLog");
  classDCLongRunningLog = (uint64_t)result;
  getDCLongRunningLogClass = DCLongRunningLogFunction;
  return result;
}

id DCLongRunningLogFunction()
{
  return (id)classDCLongRunningLog;
}

void *__DataCollectionServicesLibrary_block_invoke()
{
  Class result = dlopen("/AppleInternal/Library/Frameworks/DataCollectionServices.framework/DataCollectionServices", 2);
  DataCollectionServicesLibrary_sLib = (uint64_t)result;
  return result;
}

id initDCManager()
{
  if (initDCManager_sOnce != -1) {
    dispatch_once(&initDCManager_sOnce, &__block_literal_global_126);
  }
  id v0 = (void *)classDCManager;
  return v0;
}

Class __initDCManager_block_invoke()
{
  if (DataCollectionServicesLibrary_sOnce != -1) {
    dispatch_once(&DataCollectionServicesLibrary_sOnce, &__block_literal_global_109_10519);
  }
  Class result = objc_getClass("DCManager");
  classDCManager = (uint64_t)result;
  getDCManagerClass = DCManagerFunction;
  return result;
}

id DCManagerFunction()
{
  return (id)classDCManager;
}

id initDCUtils()
{
  if (initDCUtils_sOnce != -1) {
    dispatch_once(&initDCUtils_sOnce, &__block_literal_global_129);
  }
  id v0 = (void *)classDCUtils;
  return v0;
}

Class __initDCUtils_block_invoke()
{
  if (DataCollectionServicesLibrary_sOnce != -1) {
    dispatch_once(&DataCollectionServicesLibrary_sOnce, &__block_literal_global_109_10519);
  }
  Class result = objc_getClass("DCUtils");
  classDCUtils = (uint64_t)result;
  getDCUtilsClass = DCUtilsFunction;
  return result;
}

id DCUtilsFunction()
{
  return (id)classDCUtils;
}

id initDCRule()
{
  if (initDCRule_sOnce != -1) {
    dispatch_once(&initDCRule_sOnce, &__block_literal_global_123);
  }
  id v0 = (void *)classDCRule;
  return v0;
}

Class __initDCRule_block_invoke()
{
  if (DataCollectionServicesLibrary_sOnce != -1) {
    dispatch_once(&DataCollectionServicesLibrary_sOnce, &__block_literal_global_109_10519);
  }
  Class result = objc_getClass("DCRule");
  classDCRule = (uint64_t)result;
  getDCRuleClass = DCRuleFunction;
  return result;
}

id DCRuleFunction()
{
  return (id)classDCRule;
}

uint64_t initDCPackingPolicyTypeOnTimer()
{
  if (initDCPackingPolicyTypeOnTimer_sOnce != -1) {
    dispatch_once(&initDCPackingPolicyTypeOnTimer_sOnce, &__block_literal_global_115);
  }
  return constantDCPackingPolicyTypeOnTimer;
}

uint64_t *__initDCPackingPolicyTypeOnTimer_block_invoke()
{
  if (DataCollectionServicesLibrary_sOnce != -1) {
    dispatch_once(&DataCollectionServicesLibrary_sOnce, &__block_literal_global_109_10519);
  }
  Class result = (uint64_t *)dlsym((void *)DataCollectionServicesLibrary_sLib, "DCPackingPolicyTypeOnTimer");
  if (!result) {
    __assert_rtn("initDCPackingPolicyTypeOnTimer_block_invoke", "AFOpportuneSpeakingModuleDataCollection.m", 30, "constant");
  }
  constantDCPackingPolicyTypeOnTimer = *result;
  getDCPackingPolicyTypeOnTimer = DCPackingPolicyTypeOnTimerFunction;
  return result;
}

uint64_t DCPackingPolicyTypeOnTimerFunction()
{
  return constantDCPackingPolicyTypeOnTimer;
}

id initDCConfiguration()
{
  if (initDCConfiguration_sOnce != -1) {
    dispatch_once(&initDCConfiguration_sOnce, &__block_literal_global_112_10582);
  }
  id v0 = (void *)classDCConfiguration;
  return v0;
}

Class __initDCConfiguration_block_invoke()
{
  if (DataCollectionServicesLibrary_sOnce != -1) {
    dispatch_once(&DataCollectionServicesLibrary_sOnce, &__block_literal_global_109_10519);
  }
  Class result = objc_getClass("DCConfiguration");
  classDCConfiguration = (uint64_t)result;
  getDCConfigurationClass = DCConfigurationFunction;
  return result;
}

id DCConfigurationFunction()
{
  return (id)classDCConfiguration;
}

void sub_19CF9F0B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a27, 8);
  _Block_object_dispose((const void *)(v27 - 128), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__10648(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__10649(uint64_t a1)
{
}

void sub_19CFA124C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__10841(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__10842(uint64_t a1)
{
}

uint64_t AFSiriActivationOptionsValidate(char a1)
{
  return a1 & 1;
}

id AFSiriActivationOptionsGetNames(uint64_t a1)
{
  if (a1)
  {
    char v1 = a1;
    id v2 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
    uint64_t v3 = v2;
    if (v1) {
      [v2 addObject:@"prewarm"];
    }
    uint64_t v4 = (void *)[v3 copy];
  }
  else
  {
    uint64_t v4 = (void *)MEMORY[0x1E4F1CBF0];
  }
  return v4;
}

uint64_t AFSiriActivationOptionsGetFromNames(void *a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if ([v1 count])
  {
    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v12 = v1;
    id v2 = v1;
    uint64_t v3 = [v2 countByEnumeratingWithState:&v13 objects:v17 count:16];
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = 0;
      uint64_t v6 = *(void *)v14;
      do
      {
        uint64_t v7 = 0;
        do
        {
          if (*(void *)v14 != v6) {
            objc_enumerationMutation(v2);
          }
          id v8 = *(id *)(*((void *)&v13 + 1) + 8 * v7);
          if ([v8 length])
          {
            if (_AFSiriActivationOptionsGetFromName_onceToken != -1) {
              dispatch_once(&_AFSiriActivationOptionsGetFromName_onceToken, &__block_literal_global_11148);
            }
            unint64_t v9 = [(id)_AFSiriActivationOptionsGetFromName_map objectForKey:v8];
            uint64_t v10 = [v9 unsignedIntegerValue];
          }
          else
          {
            uint64_t v10 = 0;
          }

          v5 |= v10;
          ++v7;
        }
        while (v4 != v7);
        uint64_t v4 = [v2 countByEnumeratingWithState:&v13 objects:v17 count:16];
      }
      while (v4);
    }
    else
    {
      uint64_t v5 = 0;
    }

    id v1 = v12;
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

void sub_19CFA52DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__11472(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__11473(uint64_t a1)
{
}

void sub_19CFA613C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_19CFA6660(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getBluetoothPairedStatusChangedNotificationSymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = BluetoothManagerLibrary();
  Class result = dlsym(v2, "BluetoothPairedStatusChangedNotification");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getBluetoothPairedStatusChangedNotificationSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *BluetoothManagerLibrary()
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v4[0] = 0;
  if (!BluetoothManagerLibraryCore_frameworkLibrary)
  {
    v4[1] = (void *)MEMORY[0x1E4F143A8];
    v4[2] = (void *)3221225472;
    v4[3] = __BluetoothManagerLibraryCore_block_invoke;
    v4[4] = &__block_descriptor_40_e5_v8__0l;
    void v4[5] = v4;
    long long v5 = xmmword_1E59268A0;
    uint64_t v6 = 0;
    BluetoothManagerLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  id v0 = (void *)BluetoothManagerLibraryCore_frameworkLibrary;
  if (!BluetoothManagerLibraryCore_frameworkLibrary)
  {
    id v0 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v3 = [NSString stringWithUTF8String:"void *BluetoothManagerLibrary(void)"];
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v3, @"AFHeadphonesAnnouncementRequestCapabilityProvider.m", 50, @"%s", v4[0]);

    __break(1u);
    goto LABEL_7;
  }
  uint64_t v1 = v4[0];
  if (v4[0]) {
LABEL_7:
  }
    free(v1);
  return v0;
}

void *__getBluetoothFirstDeviceUnlockCompletedSymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = BluetoothManagerLibrary();
  Class result = dlsym(v2, "BluetoothFirstDeviceUnlockCompleted");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getBluetoothFirstDeviceUnlockCompletedSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __BluetoothManagerLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  BluetoothManagerLibraryCore_frameworkLibrary = result;
  return result;
}

void sub_19CFA6DA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void getINSearchForMessagesIntentIdentifier()
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  id v0 = (void **)getINSearchForMessagesIntentIdentifierSymbolLoc_ptr;
  uint64_t v9 = getINSearchForMessagesIntentIdentifierSymbolLoc_ptr;
  if (!getINSearchForMessagesIntentIdentifierSymbolLoc_ptr)
  {
    uint64_t v1 = IntentsLibrary();
    v7[3] = (uint64_t)dlsym(v1, "INSearchForMessagesIntentIdentifier");
    getINSearchForMessagesIntentIdentifierSymbolLoc_ptr = v7[3];
    id v0 = (void **)v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (v0)
  {
    id v2 = *v0;
    id v3 = v2;
  }
  else
  {
    uint64_t v4 = [MEMORY[0x1E4F28B00] currentHandler];
    long long v5 = [NSString stringWithUTF8String:"NSString *getINSearchForMessagesIntentIdentifier(void)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"AFHeadphonesAnnouncementRequestCapabilityProvider.m", 33, @"%s", dlerror());

    __break(1u);
  }
}

void sub_19CFA6F3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getINSendMessageIntentIdentifierSymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = IntentsLibrary();
  uint64_t result = dlsym(v2, "INSendMessageIntentIdentifier");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getINSendMessageIntentIdentifierSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *IntentsLibrary()
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v4[0] = 0;
  if (!IntentsLibraryCore_frameworkLibrary)
  {
    v4[1] = (void *)MEMORY[0x1E4F143A8];
    v4[2] = (void *)3221225472;
    v4[3] = __IntentsLibraryCore_block_invoke;
    v4[4] = &__block_descriptor_40_e5_v8__0l;
    void v4[5] = v4;
    long long v5 = xmmword_1E59268B8;
    uint64_t v6 = 0;
    IntentsLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  id v0 = (void *)IntentsLibraryCore_frameworkLibrary;
  if (!IntentsLibraryCore_frameworkLibrary)
  {
    id v0 = [MEMORY[0x1E4F28B00] currentHandler];
    id v3 = [NSString stringWithUTF8String:"void *IntentsLibrary(void)"];
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v3, @"AFHeadphonesAnnouncementRequestCapabilityProvider.m", 32, @"%s", v4[0]);

    __break(1u);
    goto LABEL_7;
  }
  uint64_t v1 = v4[0];
  if (v4[0]) {
LABEL_7:
  }
    free(v1);
  return v0;
}

void getINSearchForNotebookItemsIntentIdentifier()
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  id v0 = (void **)getINSearchForNotebookItemsIntentIdentifierSymbolLoc_ptr;
  uint64_t v9 = getINSearchForNotebookItemsIntentIdentifierSymbolLoc_ptr;
  if (!getINSearchForNotebookItemsIntentIdentifierSymbolLoc_ptr)
  {
    uint64_t v1 = IntentsLibrary();
    v7[3] = (uint64_t)dlsym(v1, "INSearchForNotebookItemsIntentIdentifier");
    getINSearchForNotebookItemsIntentIdentifierSymbolLoc_ptr = v7[3];
    id v0 = (void **)v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (v0)
  {
    id v2 = *v0;
    id v3 = v2;
  }
  else
  {
    uint64_t v4 = [MEMORY[0x1E4F28B00] currentHandler];
    long long v5 = [NSString stringWithUTF8String:"NSString *getINSearchForNotebookItemsIntentIdentifier(void)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"AFHeadphonesAnnouncementRequestCapabilityProvider.m", 36, @"%s", dlerror());

    __break(1u);
  }
}

void sub_19CFA7248(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getINAnswerCallIntentIdentifierSymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = IntentsLibrary();
  uint64_t result = dlsym(v2, "INAnswerCallIntentIdentifier");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getINAnswerCallIntentIdentifierSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getINHangUpCallIntentIdentifierSymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = IntentsLibrary();
  uint64_t result = dlsym(v2, "INHangUpCallIntentIdentifier");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getINHangUpCallIntentIdentifierSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getINSearchForNotebookItemsIntentIdentifierSymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = IntentsLibrary();
  uint64_t result = dlsym(v2, "INSearchForNotebookItemsIntentIdentifier");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getINSearchForNotebookItemsIntentIdentifierSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __IntentsLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  IntentsLibraryCore_frameworkLibrary = result;
  return result;
}

void *__getINSearchForMessagesIntentIdentifierSymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = IntentsLibrary();
  uint64_t result = dlsym(v2, "INSearchForMessagesIntentIdentifier");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getINSearchForMessagesIntentIdentifierSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_19CFA7914(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getINReadAnnouncementIntentIdentifierSymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = IntentsLibrary();
  uint64_t result = dlsym(v2, "INReadAnnouncementIntentIdentifier");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getINReadAnnouncementIntentIdentifierSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getINPlayVoicemailIntentIdentifierSymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = IntentsLibrary();
  uint64_t result = dlsym(v2, "INPlayVoicemailIntentIdentifier");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getINPlayVoicemailIntentIdentifierSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getINJoinCallIntentIdentifierSymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = IntentsLibrary();
  uint64_t result = dlsym(v2, "INJoinCallIntentIdentifier");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getINJoinCallIntentIdentifierSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

BOOL AFClockAlarmManagerEventGetIsValid(unint64_t a1)
{
  return a1 < 9;
}

BOOL AFClockAlarmManagerEventGetIsValidAndSpecified(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 8;
}

__CFString *AFClockAlarmManagerEventGetName(unint64_t a1)
{
  if (a1 > 8) {
    return @"(unknown)";
  }
  else {
    return off_1E5926918[a1];
  }
}

uint64_t AFClockAlarmManagerEventGetFromName(void *a1)
{
  id v1 = a1;
  if ([v1 length])
  {
    if (AFClockAlarmManagerEventGetFromName_onceToken != -1) {
      dispatch_once(&AFClockAlarmManagerEventGetFromName_onceToken, &__block_literal_global_11762);
    }
    id v2 = [(id)AFClockAlarmManagerEventGetFromName_map objectForKey:v1];
    uint64_t v3 = [v2 integerValue];
  }
  else
  {
    uint64_t v3 = 0;
  }

  return v3;
}

void __AFClockAlarmManagerEventGetFromName_block_invoke()
{
  id v0 = (void *)AFClockAlarmManagerEventGetFromName_map;
  AFClockAlarmManagerEventGetFromName_map = (uint64_t)&unk_1EEE989A0;
}

BOOL AFSoundIDGetIsValid(unint64_t a1)
{
  return a1 < 0xE;
}

BOOL AFSoundIDGetIsValidAndSpecified(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 0xD;
}

__CFString *AFSoundIDGetName(unint64_t a1)
{
  if (a1 > 0xD) {
    return @"(unknown)";
  }
  else {
    return off_1E59269A0[a1];
  }
}

uint64_t AFSoundIDGetFromName(void *a1)
{
  id v1 = a1;
  if ([v1 length])
  {
    if (AFSoundIDGetFromName_onceToken != -1) {
      dispatch_once(&AFSoundIDGetFromName_onceToken, &__block_literal_global_11864);
    }
    id v2 = [(id)AFSoundIDGetFromName_map objectForKey:v1];
    uint64_t v3 = [v2 integerValue];
  }
  else
  {
    uint64_t v3 = 0;
  }

  return v3;
}

void __AFSoundIDGetFromName_block_invoke()
{
  id v0 = (void *)AFSoundIDGetFromName_map;
  AFSoundIDGetFromName_map = (uint64_t)&unk_1EEE989C8;
}

void sub_19CFAABF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19CFAAD48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19CFAB4B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__12048(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__12049(uint64_t a1)
{
}

void sub_19CFAB6D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19CFAE3D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id AFSecurityDigestData(void *a1, void *a2, uint64_t a3, void *a4)
{
  return AFSecurityDigestChunksWithProvider(a1, 1u, a2, a3, a4);
}

id AFSecurityDigestChunksWithProvider(void *a1, unsigned int a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  id v9 = a1;
  id v10 = a3;
  if (a5)
  {
    *a5 = 0;
    if (!v9)
    {
      +[AFError errorWithCode:1603];
      double v11 = 0;
      *a5 = (id)objc_claimAutoreleasedReturnValue();
      goto LABEL_14;
    }
LABEL_5:
    if (a4 == 2)
    {
      uint64_t v17 = 0;
      uint64_t v18 = &v17;
      uint64_t v19 = 0xF010000000;
      __int16 v20 = &unk_19D139ADD;
      memset(&v21, 0, sizeof(v21));
      CC_SHA512_Init(&v21);
      v16[0] = MEMORY[0x1E4F143A8];
      v16[1] = 3221225472;
      v16[2] = __AFSecurityDigestChunksWithProvider_block_invoke_3;
      v16[3] = &unk_1E5926D00;
      v16[4] = &v17;
      objc_msgSend(v9, "af_enumerateDigestibleChunksWithOptions:usingBlock:", a2, v16);
      v15[0] = MEMORY[0x1E4F143A8];
      v15[1] = 3221225472;
      v15[2] = __AFSecurityDigestChunksWithProvider_block_invoke_4;
      v15[3] = &unk_1E5926D28;
      v15[4] = &v17;
      [v10 enumerateByteRangesUsingBlock:v15];
      long long v26 = 0u;
      long long v27 = 0u;
      *(_OWORD *)md = 0u;
      long long v25 = 0u;
      CC_SHA512_Final(md, (CC_SHA512_CTX *)(v18 + 4));
      uint64_t v12 = [objc_alloc(MEMORY[0x1E4F1C9B8]) initWithBytes:md length:64];
    }
    else
    {
      if (a4 != 1)
      {
        long long v13 = +[AFError errorWithCode:1601];
        double v11 = 0;
        if (!a5)
        {
LABEL_13:

          goto LABEL_14;
        }
LABEL_12:
        *a5 = v13;
        goto LABEL_13;
      }
      uint64_t v17 = 0;
      uint64_t v18 = &v17;
      uint64_t v19 = 0x8810000000;
      __int16 v20 = &unk_19D139ADD;
      memset(&v21, 0, 104);
      CC_SHA256_Init((CC_SHA256_CTX *)&v21);
      v23[0] = MEMORY[0x1E4F143A8];
      v23[1] = 3221225472;
      v23[2] = __AFSecurityDigestChunksWithProvider_block_invoke;
      v23[3] = &unk_1E5926D00;
      v23[4] = &v17;
      objc_msgSend(v9, "af_enumerateDigestibleChunksWithOptions:usingBlock:", a2, v23);
      v22[0] = MEMORY[0x1E4F143A8];
      v22[1] = 3221225472;
      v22[2] = __AFSecurityDigestChunksWithProvider_block_invoke_2;
      v22[3] = &unk_1E5926D28;
      v22[4] = &v17;
      [v10 enumerateByteRangesUsingBlock:v22];
      *(_OWORD *)md = 0u;
      long long v25 = 0u;
      CC_SHA256_Final(md, (CC_SHA256_CTX *)(v18 + 4));
      uint64_t v12 = [objc_alloc(MEMORY[0x1E4F1C9B8]) initWithBytes:md length:32];
    }
    double v11 = (void *)v12;
    _Block_object_dispose(&v17, 8);
    long long v13 = 0;
    if (!a5) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v9) {
    goto LABEL_5;
  }
  double v11 = 0;
LABEL_14:

  return v11;
}

void sub_19CFAF078(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __AFSecurityDigestChunksWithProvider_block_invoke(uint64_t a1, const void *a2, CC_LONG a3)
{
  return CC_SHA256_Update((CC_SHA256_CTX *)(*(void *)(*(void *)(a1 + 32) + 8) + 32), a2, a3);
}

uint64_t __AFSecurityDigestChunksWithProvider_block_invoke_2(uint64_t a1, const void *a2, int a3, CC_LONG len)
{
  return CC_SHA256_Update((CC_SHA256_CTX *)(*(void *)(*(void *)(a1 + 32) + 8) + 32), a2, len);
}

uint64_t __AFSecurityDigestChunksWithProvider_block_invoke_3(uint64_t a1, const void *a2, CC_LONG a3)
{
  return CC_SHA512_Update((CC_SHA512_CTX *)(*(void *)(*(void *)(a1 + 32) + 8) + 32), a2, a3);
}

uint64_t __AFSecurityDigestChunksWithProvider_block_invoke_4(uint64_t a1, const void *a2, int a3, CC_LONG len)
{
  return CC_SHA512_Update((CC_SHA512_CTX *)(*(void *)(*(void *)(a1 + 32) + 8) + 32), a2, len);
}

id AFSecurityEncryptData(void *a1, void *a2, uint64_t a3, void *a4)
{
  return __AFSecurityPerformCryptoOperationWithData(a1, a2, a3, 0, a4);
}

id __AFSecurityPerformCryptoOperationWithData(void *a1, void *a2, uint64_t a3, CCOperation a4, void *a5)
{
  id v9 = a1;
  id v10 = a2;
  if (a5)
  {
    *a5 = 0;
    if (![v9 length])
    {
      uint64_t v11 = 1603;
      goto LABEL_13;
    }
    if (![v10 length])
    {
      uint64_t v11 = 1604;
LABEL_13:
      +[AFError errorWithCode:v11];
      long long v16 = 0;
      *a5 = (id)objc_claimAutoreleasedReturnValue();
      goto LABEL_45;
    }
  }
  else if (![v9 length] || !objc_msgSend(v10, "length"))
  {
    long long v16 = 0;
    goto LABEL_45;
  }
  switch(a3)
  {
    case 3:
      id v37 = 0;
      AFSecurityDigestChunksWithProvider(v10, 1u, 0, 1, &v37);
      id v12 = (id)objc_claimAutoreleasedReturnValue();
      id v17 = v37;
      uint64_t v18 = 16;
      if (!v17) {
        goto LABEL_25;
      }
      break;
    case 2:
      id v38 = 0;
      AFSecurityDigestChunksWithProvider(v10, 1u, 0, 1, &v38);
      id v12 = (id)objc_claimAutoreleasedReturnValue();
      id v13 = v38;
      if (!v13)
      {
        long long v14 = v12;
        uint64_t v15 = 24;
        goto LABEL_24;
      }
LABEL_19:
      id v17 = v13;
      if (!a5) {
        goto LABEL_20;
      }
      goto LABEL_17;
    case 1:
      id v39 = 0;
      AFSecurityDigestChunksWithProvider(v10, 1u, 0, 1, &v39);
      id v12 = (id)objc_claimAutoreleasedReturnValue();
      id v13 = v39;
      if (!v13)
      {
        long long v14 = v12;
        uint64_t v15 = 16;
LABEL_24:
        uint64_t v19 = objc_msgSend(v14, "subdataWithRange:", 0, v15);

        uint64_t v18 = 16;
        id v12 = (id)v19;
        goto LABEL_25;
      }
      goto LABEL_19;
    default:
      id v17 = +[AFError errorWithCode:1601];
      uint64_t v18 = 0;
      id v12 = 0;
      if (!v17)
      {
LABEL_25:
        size_t dataOutMoved = 0;
        id v12 = v12;
        __int16 v20 = (const void *)[v12 bytes];
        size_t v21 = [v12 length];
        id v22 = v9;
        if (CCCrypt(a4, 0, 1u, v20, v21, 0, (const void *)[v22 bytes], objc_msgSend(v22, "length"), 0, 0, &dataOutMoved) == -4301)
        {
          dataOutMoved += v18;
          uint64_t v23 = malloc_type_malloc(dataOutMoved, 0xFC7CDDAAuLL);
          if (v23)
          {
            dataOut = v23;
            size_t v35 = 0;
            id v25 = v12;
            long long v26 = (const void *)[v25 bytes];
            size_t v27 = [v25 length];
            id v28 = v22;
            long long v29 = (const void *)[v28 bytes];
            size_t v30 = [v28 length];
            if (CCCrypt(a4, 0, 1u, v26, v27, 0, v29, v30, dataOut, dataOutMoved, &v35))
            {
              if (a4 == 1)
              {
                if (!a5)
                {
LABEL_41:
                  free(dataOut);
                  goto LABEL_42;
                }
                uint64_t v31 = 1610;
              }
              else
              {
                if (a4 || !a5) {
                  goto LABEL_41;
                }
                uint64_t v31 = 1609;
              }
              *a5 = +[AFError errorWithCode:v31];
              goto LABEL_41;
            }
            id v33 = objc_alloc(MEMORY[0x1E4F1C9B8]);
            long long v16 = (void *)[v33 initWithBytesNoCopy:dataOut length:v35 freeWhenDone:1];
LABEL_43:
            id v17 = 0;
            goto LABEL_44;
          }
          if (a5)
          {
            uint64_t v32 = 1607;
            goto LABEL_36;
          }
        }
        else if (a5)
        {
          uint64_t v32 = 1608;
LABEL_36:
          +[AFError errorWithCode:v32];
          long long v16 = 0;
          *a5 = (id)objc_claimAutoreleasedReturnValue();
          goto LABEL_43;
        }
LABEL_42:
        long long v16 = 0;
        goto LABEL_43;
      }
      break;
  }
  if (!a5)
  {
LABEL_20:
    long long v16 = 0;
    goto LABEL_44;
  }
LABEL_17:
  id v17 = v17;
  long long v16 = 0;
  *a5 = v17;
LABEL_44:

LABEL_45:
  return v16;
}

id AFSecurityDecryptData(void *a1, void *a2, uint64_t a3, void *a4)
{
  return __AFSecurityPerformCryptoOperationWithData(a1, a2, a3, 1u, a4);
}

char *AFSecurityGenerateRandomData()
{
  uint64_t v0 = MEMORY[0x1F4188790]();
  id v2 = v1;
  uint64_t v3 = (char *)v0;
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (v1)
  {
    *id v1 = 0;
    if (!v0)
    {
      id v5 = +[AFError errorWithCode:1602];
      goto LABEL_23;
    }
    int v4 = open("/dev/random", 0);
    if (v4 < 0)
    {
      id v5 = +[AFError errorWithCode:1611];
      uint64_t v3 = 0;
LABEL_23:
      void *v2 = v5;
      goto LABEL_24;
    }
LABEL_7:
    id v6 = (id)[objc_alloc(MEMORY[0x1E4F1CA58]) initWithCapacity:v3];
    if (!v6) {
      id v6 = objc_alloc_init(MEMORY[0x1E4F1CA58]);
    }
    do
    {
      if ((unint64_t)v3 >= 0x1000) {
        size_t v7 = 4096;
      }
      else {
        size_t v7 = (size_t)v3;
      }
      ssize_t v8 = read(v4, v11, v7);
      if (v8 >= 1 && v8 == v7)
      {
        [v6 appendBytes:v11 length:v7];
        id v9 = 0;
        v3 -= v7;
        if (!v3) {
          break;
        }
      }
      else
      {
        id v9 = +[AFError errorWithCode:1612];
        if (!v3) {
          break;
        }
      }
    }
    while (!v9);
    close(v4);
    if (v9)
    {
      uint64_t v3 = 0;
      if (!v2)
      {
LABEL_21:

        goto LABEL_24;
      }
    }
    else
    {
      uint64_t v3 = (char *)[objc_alloc(MEMORY[0x1E4F1C9B8]) initWithData:v6];
      if (!v2) {
        goto LABEL_21;
      }
    }
    void *v2 = v9;
    goto LABEL_21;
  }
  if (!v0) {
    goto LABEL_24;
  }
  int v4 = open("/dev/random", 0);
  if ((v4 & 0x80000000) == 0) {
    goto LABEL_7;
  }
  uint64_t v3 = 0;
LABEL_24:
  return v3;
}

BOOL AFPineBoardSystemStateGetIsValid(unint64_t a1)
{
  return a1 < 9;
}

BOOL AFPineBoardSystemStateGetIsValidAndSpecified(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 8;
}

__CFString *AFPineBoardSystemStateGetName(unint64_t a1)
{
  if (a1 > 8) {
    return @"(unknown)";
  }
  else {
    return off_1E5926D88[a1];
  }
}

uint64_t AFPineBoardSystemStateGetFromName(void *a1)
{
  id v1 = a1;
  if ([v1 length])
  {
    if (AFPineBoardSystemStateGetFromName_onceToken != -1) {
      dispatch_once(&AFPineBoardSystemStateGetFromName_onceToken, &__block_literal_global_12324);
    }
    id v2 = [(id)AFPineBoardSystemStateGetFromName_map objectForKey:v1];
    uint64_t v3 = [v2 integerValue];
  }
  else
  {
    uint64_t v3 = 0;
  }

  return v3;
}

void __AFPineBoardSystemStateGetFromName_block_invoke()
{
  uint64_t v0 = (void *)AFPineBoardSystemStateGetFromName_map;
  AFPineBoardSystemStateGetFromName_map = (uint64_t)&unk_1EEE989F0;
}

BOOL AFSpeechRecordingAlertStyleGetIsValid(unint64_t a1)
{
  return a1 < 4;
}

BOOL AFSpeechRecordingAlertStyleGetIsValidAndSpecified(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 3;
}

__CFString *AFSpeechRecordingAlertStyleGetName(unint64_t a1)
{
  if (a1 > 3) {
    return @"(unknown)";
  }
  else {
    return off_1E5926DD0[a1];
  }
}

uint64_t AFSpeechRecordingAlertStyleGetFromName(void *a1)
{
  id v1 = a1;
  if ([v1 length])
  {
    if (AFSpeechRecordingAlertStyleGetFromName_onceToken != -1) {
      dispatch_once(&AFSpeechRecordingAlertStyleGetFromName_onceToken, &__block_literal_global_12364);
    }
    id v2 = [(id)AFSpeechRecordingAlertStyleGetFromName_map objectForKey:v1];
    uint64_t v3 = [v2 integerValue];
  }
  else
  {
    uint64_t v3 = 0;
  }

  return v3;
}

void __AFSpeechRecordingAlertStyleGetFromName_block_invoke()
{
  uint64_t v0 = (void *)AFSpeechRecordingAlertStyleGetFromName_map;
  AFSpeechRecordingAlertStyleGetFromName_map = (uint64_t)&unk_1EEE98A18;
}

void sub_19CFB10D8(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 192));
  _Unwind_Resume(a1);
}

BOOL AFClockTimerManagerEventGetIsValid(unint64_t a1)
{
  return a1 < 9;
}

BOOL AFClockTimerManagerEventGetIsValidAndSpecified(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 8;
}

__CFString *AFClockTimerManagerEventGetName(unint64_t a1)
{
  if (a1 > 8) {
    return @"(unknown)";
  }
  else {
    return off_1E5926E90[a1];
  }
}

uint64_t AFClockTimerManagerEventGetFromName(void *a1)
{
  id v1 = a1;
  if ([v1 length])
  {
    if (AFClockTimerManagerEventGetFromName_onceToken != -1) {
      dispatch_once(&AFClockTimerManagerEventGetFromName_onceToken, &__block_literal_global_12863);
    }
    uint64_t v2 = [(id)AFClockTimerManagerEventGetFromName_map objectForKey:v1];
    uint64_t v3 = [v2 integerValue];
  }
  else
  {
    uint64_t v3 = 0;
  }

  return v3;
}

void __AFClockTimerManagerEventGetFromName_block_invoke()
{
  uint64_t v0 = (void *)AFClockTimerManagerEventGetFromName_map;
  AFClockTimerManagerEventGetFromName_map = (uint64_t)&unk_1EEE98A40;
}

__CFString *AFDeviceProximityGetName(uint64_t a1)
{
  id v1 = @"near";
  uint64_t v2 = @"immediate";
  uint64_t v3 = @"primary";
  if (a1 != 4000) {
    uint64_t v3 = 0;
  }
  if (a1 != 3000) {
    uint64_t v2 = v3;
  }
  if (a1 != 2000) {
    id v1 = v2;
  }
  int v4 = @"unknown";
  id v5 = @"far";
  if (a1 != 1000) {
    id v5 = 0;
  }
  if (a1) {
    int v4 = v5;
  }
  if (a1 <= 1999) {
    return v4;
  }
  else {
    return v1;
  }
}

uint64_t AFDeviceProximityCompare(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = -1;
  if (a1 <= a2) {
    uint64_t v2 = 1;
  }
  if (a1 == a2) {
    return 0;
  }
  else {
    return v2;
  }
}

void sub_19CFB42DC(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_19CFB4E48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__13301(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__13302(uint64_t a1)
{
}

void sub_19CFB58A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_19CFB72D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
}

uint64_t __Block_byref_object_copy__13572(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__13573(uint64_t a1)
{
}

uint64_t __Block_byref_object_copy__295(uint64_t a1, uint64_t a2)
{
  uint64_t result = MEMORY[0x19F3A50D0](*(void *)(a2 + 40));
  *(void *)(a1 + 40) = result;
  return result;
}

void __Block_byref_object_dispose__296(uint64_t a1)
{
}

void sub_19CFBB5F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19CFBD7C4(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

id DeltaPhrases(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  id v6 = a2;
  unint64_t v7 = [v5 count];
  unint64_t v8 = [v6 count];
  if (v7 >= v8) {
    unint64_t v9 = v8;
  }
  else {
    unint64_t v9 = v7;
  }
  if (v9)
  {
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = [v5 objectAtIndex:v10];
      uint64_t v12 = [v6 objectAtIndex:v10];
      int v13 = [v11 isEqual:v12];

      if (!v13) {
        break;
      }
      if (v9 == ++v10)
      {
        unint64_t v10 = v9;
        break;
      }
    }
    if (a3) {
      goto LABEL_10;
    }
  }
  else
  {
    unint64_t v10 = 0;
    if (a3) {
LABEL_10:
    }
      *a3 = [v6 count] - v10;
  }
  uint64_t v14 = objc_msgSend(v5, "subarrayWithRange:", v10, objc_msgSend(v5, "count") - v10);

  return v14;
}

BOOL AFBluetoothWirelessSplitterSessionStateGetIsValid(unint64_t a1)
{
  return a1 < 3;
}

BOOL AFBluetoothWirelessSplitterSessionStateGetIsValidAndSpecified(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 2;
}

__CFString *AFBluetoothWirelessSplitterSessionStateGetName(unint64_t a1)
{
  if (a1 > 2) {
    return @"(unknown)";
  }
  else {
    return off_1E59273F0[a1];
  }
}

uint64_t AFBluetoothWirelessSplitterSessionStateGetFromName(void *a1)
{
  id v1 = a1;
  if ([v1 length])
  {
    if (AFBluetoothWirelessSplitterSessionStateGetFromName_onceToken != -1) {
      dispatch_once(&AFBluetoothWirelessSplitterSessionStateGetFromName_onceToken, &__block_literal_global_14044);
    }
    uint64_t v2 = [(id)AFBluetoothWirelessSplitterSessionStateGetFromName_map objectForKey:v1];
    uint64_t v3 = [v2 integerValue];
  }
  else
  {
    uint64_t v3 = 0;
  }

  return v3;
}

void __AFBluetoothWirelessSplitterSessionStateGetFromName_block_invoke()
{
  uint64_t v0 = (void *)AFBluetoothWirelessSplitterSessionStateGetFromName_map;
  AFBluetoothWirelessSplitterSessionStateGetFromName_map = (uint64_t)&unk_1EEE98A68;
}

BOOL AFBluetoothHeadGestureTypeGetIsValid(unint64_t a1)
{
  return a1 < 3;
}

BOOL AFBluetoothHeadGestureTypeGetIsValidAndSpecified(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 2;
}

__CFString *AFBluetoothHeadGestureTypeGetName(unint64_t a1)
{
  if (a1 > 2) {
    return @"(unknown)";
  }
  else {
    return (__CFString *)*((void *)&off_1E59274B8 + a1);
  }
}

uint64_t AFBluetoothHeadGestureTypeGetFromName(void *a1)
{
  id v1 = a1;
  if ([v1 length])
  {
    if (AFBluetoothHeadGestureTypeGetFromName_onceToken != -1) {
      dispatch_once(&AFBluetoothHeadGestureTypeGetFromName_onceToken, &__block_literal_global_14363);
    }
    uint64_t v2 = [(id)AFBluetoothHeadGestureTypeGetFromName_map objectForKey:v1];
    uint64_t v3 = [v2 integerValue];
  }
  else
  {
    uint64_t v3 = 0;
  }

  return v3;
}

void __AFBluetoothHeadGestureTypeGetFromName_block_invoke()
{
  uint64_t v0 = (void *)AFBluetoothHeadGestureTypeGetFromName_map;
  AFBluetoothHeadGestureTypeGetFromName_map = (uint64_t)&unk_1EEE98A90;
}

id AFAudioSessionAssertionGetConnectionWorkloop()
{
  if (AFAudioSessionAssertionGetConnectionWorkloop_onceToken != -1) {
    dispatch_once(&AFAudioSessionAssertionGetConnectionWorkloop_onceToken, &__block_literal_global_14391);
  }
  uint64_t v0 = (void *)AFAudioSessionAssertionGetConnectionWorkloop_workloop;
  return v0;
}

void __AFAudioSessionAssertionGetConnectionWorkloop_block_invoke()
{
  dispatch_workloop_t v0 = dispatch_workloop_create("com.apple.assistant.audio-session-assertion.connection-workloop");
  id v1 = (void *)AFAudioSessionAssertionGetConnectionWorkloop_workloop;
  AFAudioSessionAssertionGetConnectionWorkloop_workloop = (uint64_t)v0;
}

id initANAnnounceFeatureStatus()
{
  if (initANAnnounceFeatureStatus_sOnce != -1) {
    dispatch_once(&initANAnnounceFeatureStatus_sOnce, &__block_literal_global_491);
  }
  dispatch_workloop_t v0 = (void *)classANAnnounceFeatureStatus;
  return v0;
}

Class __initANAnnounceFeatureStatus_block_invoke()
{
  if (AnnounceLibrary_sOnce != -1) {
    dispatch_once(&AnnounceLibrary_sOnce, &__block_literal_global_494);
  }
  Class result = objc_getClass("ANAnnounceFeatureStatus");
  classANAnnounceFeatureStatus = (uint64_t)result;
  getANAnnounceFeatureStatusClass = ANAnnounceFeatureStatusFunction;
  return result;
}

id ANAnnounceFeatureStatusFunction()
{
  return (id)classANAnnounceFeatureStatus;
}

void *__AnnounceLibrary_block_invoke()
{
  Class result = dlopen("/System/Library/PrivateFrameworks/Announce.framework/Announce", 2);
  AnnounceLibrary_sLib = (uint64_t)result;
  return result;
}

__CFString *AFDeviceMessagingOptionsGetNames(uint64_t a1)
{
  if (!a1)
  {
    uint64_t v2 = @"None";
    goto LABEL_12;
  }
  __int16 v1 = a1;
  if (a1)
  {
    uint64_t v2 = [&stru_1EEE35D28 stringByAppendingString:@"+IDS"];
    if ((v1 & 2) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  uint64_t v2 = &stru_1EEE35D28;
  if ((a1 & 2) != 0)
  {
LABEL_7:
    uint64_t v3 = [(__CFString *)v2 stringByAppendingString:@"+Rapport"];

    uint64_t v2 = (__CFString *)v3;
  }
LABEL_8:
  if ((v1 & 0x400) != 0)
  {
    uint64_t v6 = [(__CFString *)v2 stringByAppendingString:@"+Bluetooth"];

    uint64_t v2 = (__CFString *)v6;
    if ((v1 & 0x800) == 0)
    {
LABEL_10:
      if ((v1 & 0x1000) == 0) {
        goto LABEL_12;
      }
      goto LABEL_11;
    }
  }
  else if ((v1 & 0x800) == 0)
  {
    goto LABEL_10;
  }
  uint64_t v7 = [(__CFString *)v2 stringByAppendingString:@"+Wifi"];

  uint64_t v2 = (__CFString *)v7;
  if ((v1 & 0x1000) != 0)
  {
LABEL_11:
    uint64_t v4 = [(__CFString *)v2 stringByAppendingString:@"+Cloud"];

    uint64_t v2 = (__CFString *)v4;
  }
LABEL_12:
  return v2;
}

BOOL AFClockIsFiringAlarmValid(void *a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = [MEMORY[0x1E4F1C9C8] date];
  uint64_t v3 = [v1 firedDate];
  [v2 timeIntervalSinceDate:v3];
  double v5 = v4;

  if (v5 >= 900.0)
  {
    uint64_t v6 = AFSiriLogContextUtility;
    if (os_log_type_enabled((os_log_t)AFSiriLogContextUtility, OS_LOG_TYPE_DEBUG))
    {
      int v8 = 136315394;
      unint64_t v9 = "AFClockIsFiringAlarmValid";
      __int16 v10 = 2112;
      id v11 = v1;
      _os_log_debug_impl(&dword_19CF1D000, v6, OS_LOG_TYPE_DEBUG, "%s Firing alarm is not valid: %@", (uint8_t *)&v8, 0x16u);
    }
  }

  return v5 < 900.0;
}

void sub_19CFC77F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getCARSessionStatusClass_block_invoke(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  v6[0] = 0;
  if (!CarKitLibraryCore_frameworkLibrary)
  {
    v6[1] = (void *)MEMORY[0x1E4F143A8];
    v6[2] = (void *)3221225472;
    v6[3] = __CarKitLibraryCore_block_invoke;
    v6[4] = &__block_descriptor_40_e5_v8__0l;
    v6[5] = v6;
    long long v7 = xmmword_1E59275D0;
    uint64_t v8 = 0;
    CarKitLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!CarKitLibraryCore_frameworkLibrary)
  {
    uint64_t v3 = [MEMORY[0x1E4F28B00] currentHandler];
    double v4 = [NSString stringWithUTF8String:"void *CarKitLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"AFCarPlayAnnouncementRequestCapabilityProvider.m", 20, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("CARSessionStatus");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    uint64_t v3 = [MEMORY[0x1E4F28B00] currentHandler];
    double v5 = [NSString stringWithUTF8String:"Class getCARSessionStatusClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"AFCarPlayAnnouncementRequestCapabilityProvider.m", 21, @"Unable to find class %s", "CARSessionStatus");

LABEL_10:
    __break(1u);
  }
  getCARSessionStatusClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __CarKitLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  CarKitLibraryCore_frameworkLibrary = result;
  return result;
}

void sub_19CFC7C6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void getINSearchForMessagesIntentIdentifier_15130()
{
  uint64_t v6 = 0;
  long long v7 = &v6;
  uint64_t v8 = 0x2020000000;
  dispatch_workloop_t v0 = (void **)getINSearchForMessagesIntentIdentifierSymbolLoc_ptr_15140;
  uint64_t v9 = getINSearchForMessagesIntentIdentifierSymbolLoc_ptr_15140;
  if (!getINSearchForMessagesIntentIdentifierSymbolLoc_ptr_15140)
  {
    id v1 = IntentsLibrary_15133();
    v7[3] = (uint64_t)dlsym(v1, "INSearchForMessagesIntentIdentifier");
    getINSearchForMessagesIntentIdentifierSymbolLoc_ptr_15140 = v7[3];
    dispatch_workloop_t v0 = (void **)v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (v0)
  {
    uint64_t v2 = *v0;
    id v3 = v2;
  }
  else
  {
    double v4 = [MEMORY[0x1E4F28B00] currentHandler];
    double v5 = [NSString stringWithUTF8String:"NSString *getINSearchForMessagesIntentIdentifier(void)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"AFCarPlayAnnouncementRequestCapabilityProvider.m", 29, @"%s", dlerror());

    __break(1u);
  }
}

void sub_19CFC7DDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getINSendMessageIntentIdentifierSymbolLoc_block_invoke_15132(uint64_t a1)
{
  uint64_t v2 = IntentsLibrary_15133();
  uint64_t result = dlsym(v2, "INSendMessageIntentIdentifier");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getINSendMessageIntentIdentifierSymbolLoc_ptr_15131 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *IntentsLibrary_15133()
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v4[0] = 0;
  if (!IntentsLibraryCore_frameworkLibrary_15136)
  {
    v4[1] = (void *)MEMORY[0x1E4F143A8];
    v4[2] = (void *)3221225472;
    v4[3] = __IntentsLibraryCore_block_invoke_15137;
    v4[4] = &__block_descriptor_40_e5_v8__0l;
    void v4[5] = v4;
    long long v5 = xmmword_1E59275E8;
    uint64_t v6 = 0;
    IntentsLibraryCore_frameworkLibrary_15136 = _sl_dlopen();
  }
  dispatch_workloop_t v0 = (void *)IntentsLibraryCore_frameworkLibrary_15136;
  if (!IntentsLibraryCore_frameworkLibrary_15136)
  {
    dispatch_workloop_t v0 = [MEMORY[0x1E4F28B00] currentHandler];
    id v3 = [NSString stringWithUTF8String:"void *IntentsLibrary(void)"];
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v3, @"AFCarPlayAnnouncementRequestCapabilityProvider.m", 28, @"%s", v4[0]);

    __break(1u);
    goto LABEL_7;
  }
  id v1 = v4[0];
  if (v4[0]) {
LABEL_7:
  }
    free(v1);
  return v0;
}

uint64_t __IntentsLibraryCore_block_invoke_15137()
{
  uint64_t result = _sl_dlopen();
  IntentsLibraryCore_frameworkLibrary_15136 = result;
  return result;
}

void *__getINSearchForMessagesIntentIdentifierSymbolLoc_block_invoke_15141(uint64_t a1)
{
  uint64_t v2 = IntentsLibrary_15133();
  uint64_t result = dlsym(v2, "INSearchForMessagesIntentIdentifier");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getINSearchForMessagesIntentIdentifierSymbolLoc_ptr_15140 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

BOOL AFExternalNotificationRequestHandlerStateGetIsValid(unint64_t a1)
{
  return a1 < 7;
}

BOOL AFExternalNotificationRequestHandlerStateGetIsValidAndSpecified(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 6;
}

__CFString *AFExternalNotificationRequestHandlerStateGetName(unint64_t a1)
{
  if (a1 > 6) {
    return @"(unknown)";
  }
  else {
    return off_1E5927710[a1];
  }
}

uint64_t AFExternalNotificationRequestHandlerStateGetFromName(void *a1)
{
  id v1 = a1;
  if ([v1 length])
  {
    if (AFExternalNotificationRequestHandlerStateGetFromName_onceToken != -1) {
      dispatch_once(&AFExternalNotificationRequestHandlerStateGetFromName_onceToken, &__block_literal_global_16337);
    }
    uint64_t v2 = [(id)AFExternalNotificationRequestHandlerStateGetFromName_map objectForKey:v1];
    uint64_t v3 = [v2 integerValue];
  }
  else
  {
    uint64_t v3 = 0;
  }

  return v3;
}

void __AFExternalNotificationRequestHandlerStateGetFromName_block_invoke()
{
  dispatch_workloop_t v0 = (void *)AFExternalNotificationRequestHandlerStateGetFromName_map;
  AFExternalNotificationRequestHandlerStateGetFromName_map = (uint64_t)&unk_1EEE98AB8;
}

void sub_19CFCF5EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location, char a17)
{
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__16504(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__16505(uint64_t a1)
{
}

id initFAFetchFamilyCircleRequest()
{
  if (initFAFetchFamilyCircleRequest_sOnce != -1) {
    dispatch_once(&initFAFetchFamilyCircleRequest_sOnce, &__block_literal_global_37);
  }
  dispatch_workloop_t v0 = (void *)classFAFetchFamilyCircleRequest;
  return v0;
}

Class __initFAFetchFamilyCircleRequest_block_invoke()
{
  FamilyCircleLibrary();
  Class result = objc_getClass("FAFetchFamilyCircleRequest");
  classFAFetchFamilyCircleRequest = (uint64_t)result;
  if (!result) {
    __assert_rtn("initFAFetchFamilyCircleRequest_block_invoke", "AFFamilyCircleStatusManager.m", 30, "classFAFetchFamilyCircleRequest");
  }
  getFAFetchFamilyCircleRequestClass = FAFetchFamilyCircleRequestFunction;
  return result;
}

void *FamilyCircleLibrary()
{
  Class result = (void *)FamilyCircleLibrary_frameworkLibrary;
  if (!FamilyCircleLibrary_frameworkLibrary)
  {
    Class result = dlopen("/System/Library/PrivateFrameworks/FamilyCircle.framework/FamilyCircle", 2);
    FamilyCircleLibrary_frameworkLibrary = (uint64_t)result;
    if (!result) {
      __assert_rtn("FamilyCircleLibrary", "AFFamilyCircleStatusManager.m", 29, "frameworkLibrary");
    }
  }
  return result;
}

id FAFetchFamilyCircleRequestFunction()
{
  return (id)classFAFetchFamilyCircleRequest;
}

void sub_19CFD0060(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t _HandleACDAccountStoreDidChange(uint64_t a1, void *a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = AFSiriLogContextUtility;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextUtility, OS_LOG_TYPE_DEBUG))
  {
    int v5 = 136315138;
    uint64_t v6 = "_HandleACDAccountStoreDidChange";
    _os_log_debug_impl(&dword_19CF1D000, v3, OS_LOG_TYPE_DEBUG, "%s #Montara #FamilyCircle", (uint8_t *)&v5, 0xCu);
  }
  return [a2 fetchChildAccountStatus];
}

id initACDAccountStoreDidChangeNotification()
{
  if (initACDAccountStoreDidChangeNotification_sOnce != -1) {
    dispatch_once(&initACDAccountStoreDidChangeNotification_sOnce, &__block_literal_global_53);
  }
  dispatch_workloop_t v0 = (void *)constantACDAccountStoreDidChangeNotification;
  return v0;
}

void __initACDAccountStoreDidChangeNotification_block_invoke()
{
  dispatch_workloop_t v0 = AccountsLibrary();
  id v1 = (id *)dlsym(v0, "ACDAccountStoreDidChangeNotification");
  if (!v1) {
    __assert_rtn("initACDAccountStoreDidChangeNotification_block_invoke", "AFFamilyCircleStatusManager.m", 22, "constant");
  }
  objc_storeStrong((id *)&constantACDAccountStoreDidChangeNotification, *v1);
  getACDAccountStoreDidChangeNotification = ACDAccountStoreDidChangeNotificationFunction;
}

void *AccountsLibrary()
{
  Class result = (void *)AccountsLibrary_frameworkLibrary;
  if (!AccountsLibrary_frameworkLibrary)
  {
    Class result = dlopen("/System/Library/Frameworks/Accounts.framework/Accounts", 2);
    AccountsLibrary_frameworkLibrary = (uint64_t)result;
    if (!result) {
      __assert_rtn("AccountsLibrary", "AFFamilyCircleStatusManager.m", 20, "frameworkLibrary");
    }
  }
  return result;
}

id ACDAccountStoreDidChangeNotificationFunction()
{
  return (id)constantACDAccountStoreDidChangeNotification;
}

id initACXPCEventSubscriber()
{
  if (initACXPCEventSubscriber_sOnce != -1) {
    dispatch_once(&initACXPCEventSubscriber_sOnce, &__block_literal_global_48);
  }
  dispatch_workloop_t v0 = (void *)classACXPCEventSubscriber;
  return v0;
}

Class __initACXPCEventSubscriber_block_invoke()
{
  AccountsLibrary();
  Class result = objc_getClass("ACXPCEventSubscriber");
  classACXPCEventSubscriber = (uint64_t)result;
  if (!result) {
    __assert_rtn("initACXPCEventSubscriber_block_invoke", "AFFamilyCircleStatusManager.m", 21, "classACXPCEventSubscriber");
  }
  getACXPCEventSubscriberClass = ACXPCEventSubscriberFunction;
  return result;
}

id ACXPCEventSubscriberFunction()
{
  return (id)classACXPCEventSubscriber;
}

uint64_t _HandleFAFamilyUpdate(uint64_t a1, void *a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = AFSiriLogContextUtility;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextUtility, OS_LOG_TYPE_DEBUG))
  {
    int v5 = 136315138;
    uint64_t v6 = "_HandleFAFamilyUpdate";
    _os_log_debug_impl(&dword_19CF1D000, v3, OS_LOG_TYPE_DEBUG, "%s #Montara #FamilyCircle", (uint8_t *)&v5, 0xCu);
  }
  return [a2 fetchChildAccountStatus];
}

id initFAFamilyUpdateNotification()
{
  if (initFAFamilyUpdateNotification_sOnce != -1) {
    dispatch_once(&initFAFamilyUpdateNotification_sOnce, &__block_literal_global_44);
  }
  dispatch_workloop_t v0 = (void *)constantFAFamilyUpdateNotification;
  return v0;
}

void __initFAFamilyUpdateNotification_block_invoke()
{
  dispatch_workloop_t v0 = FamilyCircleLibrary();
  id v1 = (id *)dlsym(v0, "FAFamilyUpdateNotification");
  if (!v1) {
    __assert_rtn("initFAFamilyUpdateNotification_block_invoke", "AFFamilyCircleStatusManager.m", 31, "constant");
  }
  objc_storeStrong((id *)&constantFAFamilyUpdateNotification, *v1);
  getFAFamilyUpdateNotification = FAFamilyUpdateNotificationFunction;
}

id FAFamilyUpdateNotificationFunction()
{
  return (id)constantFAFamilyUpdateNotification;
}

id AFNonNilMutableCopyOfArray(void *a1)
{
  id v1 = (void *)[a1 mutableCopy];
  uint64_t v2 = v1;
  if (v1) {
    id v3 = v1;
  }
  else {
    id v3 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  }
  double v4 = v3;

  return v4;
}

id AFNonNilMutableCopyOfDictionary(void *a1)
{
  id v1 = (void *)[a1 mutableCopy];
  uint64_t v2 = v1;
  if (v1) {
    id v3 = v1;
  }
  else {
    id v3 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  }
  double v4 = v3;

  return v4;
}

void sub_19CFD2114(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,id location)
{
  objc_destroyWeak(v27);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t AFClientLiteClientObjectInterface()
{
  return [MEMORY[0x1E4F29280] interfaceWithProtocol:&unk_1EEEB4C68];
}

uint64_t AFClientLiteRemoteObjectInterface()
{
  return [MEMORY[0x1E4F29280] interfaceWithProtocol:&unk_1EEEE6B28];
}

id AFInterstitialCreateCommand(uint64_t a1, void *a2, void *a3, void *a4)
{
  v22[1] = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (a1 < 1)
  {
    __int16 v10 = 0;
  }
  else
  {
    __int16 v10 = (void *)*MEMORY[0x1E4F977C8];
    if ((unint64_t)a1 >= 5) {
      __int16 v10 = 0;
    }
    if ((unint64_t)a1 <= 4)
    {
      id v11 = off_1E5927818[a1 - 1];
      goto LABEL_8;
    }
  }
  id v11 = 0;
LABEL_8:
  uint64_t v12 = (objc_class *)MEMORY[0x1E4F96AD0];
  id v13 = v10;
  id v14 = objc_alloc_init(v12);
  id v15 = objc_alloc_init(MEMORY[0x1E4F29128]);
  uint64_t v16 = [v15 UUIDString];
  [v14 setAceId:v16];

  [v14 setRefId:v9];
  [v14 setText:v7];
  [v14 setSpeakableText:v8];
  [v14 setDialogIdentifier:v11];
  [v14 setCanUseServerTTS:1];
  id v17 = objc_alloc_init(MEMORY[0x1E4F96AC0]);
  id v18 = objc_alloc_init(MEMORY[0x1E4F29128]);
  uint64_t v19 = [v18 UUIDString];
  [v17 setAceId:v19];

  [v17 setRefId:v9];
  [v17 setDialogPhase:v13];
  [v17 setDisplayTarget:*MEMORY[0x1E4F977E0]];
  v22[0] = v14;
  __int16 v20 = [MEMORY[0x1E4F1C978] arrayWithObjects:v22 count:1];
  [v17 setViews:v20];

  [v17 setSupplemental:1];
  return v17;
}

__CFString *AFInterstitialGetDialogIdentifierForPhase(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 3) {
    return 0;
  }
  else {
    return off_1E5927818[a1 - 1];
  }
}

BOOL AFInterstitialIsCommandInterstitial(void *a1)
{
  id v1 = a1;
  objc_opt_class();
  BOOL v4 = 0;
  if (objc_opt_isKindOfClass())
  {
    uint64_t v2 = objc_msgSend(v1, "af_dialogPhase");
    char v3 = [v2 isExpository];

    if (v3) {
      BOOL v4 = 1;
    }
  }

  return v4;
}

uint64_t AFInterstitialIsDialogIdentifierInterstitial(void *a1)
{
  id v1 = a1;
  if (([v1 isEqualToString:@"client#interstitialInitial"] & 1) != 0
    || ([v1 isEqualToString:@"client#interstitialFollowUpOne"] & 1) != 0
    || ([v1 isEqualToString:@"client#interstitialFollowUpTwo"] & 1) != 0)
  {
    uint64_t v2 = 1;
  }
  else
  {
    uint64_t v2 = [v1 isEqualToString:@"client#interstitialFinal"];
  }

  return v2;
}

BOOL AFInterstitialSupportsRequestWithEvent(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 != 32;
  if (a2 == 9) {
    BOOL v2 = 0;
  }
  if (a2 == 6) {
    BOOL v2 = 0;
  }
  return a1 != 17 && v2;
}

void __destructor_8_s0_s8_s16_s24(uint64_t a1)
{
  BOOL v2 = *(void **)(a1 + 24);
}

void sub_19CFD594C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  __destructor_8_s0_s8_s16_s24((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19CFD6710(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19CFD7134(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__17037(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__17038(uint64_t a1)
{
}

void sub_19CFD854C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL AFSiriClientStateManagerTransactionReasonGetIsValid(unint64_t a1)
{
  return a1 < 5;
}

BOOL AFSiriClientStateManagerTransactionReasonGetIsValidAndSpecified(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 4;
}

__CFString *AFSiriClientStateManagerTransactionReasonGetName(unint64_t a1)
{
  if (a1 > 4) {
    return @"(unknown)";
  }
  else {
    return off_1E5927988[a1];
  }
}

uint64_t AFSiriClientStateManagerTransactionReasonGetFromName(void *a1)
{
  id v1 = a1;
  if ([v1 length])
  {
    if (AFSiriClientStateManagerTransactionReasonGetFromName_onceToken != -1) {
      dispatch_once(&AFSiriClientStateManagerTransactionReasonGetFromName_onceToken, &__block_literal_global_17114);
    }
    BOOL v2 = [(id)AFSiriClientStateManagerTransactionReasonGetFromName_map objectForKey:v1];
    uint64_t v3 = [v2 integerValue];
  }
  else
  {
    uint64_t v3 = 0;
  }

  return v3;
}

void __AFSiriClientStateManagerTransactionReasonGetFromName_block_invoke()
{
  dispatch_workloop_t v0 = (void *)AFSiriClientStateManagerTransactionReasonGetFromName_map;
  AFSiriClientStateManagerTransactionReasonGetFromName_map = (uint64_t)&unk_1EEE98AE0;
}

uint64_t AFDictationTaskHintTypeFromString(void *a1)
{
  id v1 = a1;
  if ([v1 isEqualToString:@"VoiceMail"])
  {
    uint64_t v2 = 1;
  }
  else if ([v1 isEqualToString:@"FaceTime"])
  {
    uint64_t v2 = 2;
  }
  else if ([v1 isEqualToString:@"SearchOrMessaging"])
  {
    uint64_t v2 = 3;
  }
  else if ([v1 isEqualToString:@"WebSearch"])
  {
    uint64_t v2 = 4;
  }
  else if ([v1 isEqualToString:@"VoiceControl"])
  {
    uint64_t v2 = 5;
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

uint64_t AFIsDictationRequestEligibleForOnDeviceDictation(void *a1)
{
  id v1 = a1;
  uint64_t v2 = [v1 fieldLabel];
  if ([v2 hasPrefix:@"SFSpeech"]) {
    BOOL v3 = [v1 keyboardType] == 12 || objc_msgSend(v1, "keyboardType") == 13;
  }
  else {
    BOOL v3 = 0;
  }

  uint64_t v4 = [v1 transcriptionMode];
  uint64_t v5 = 0;
  if (!v3 && v4 != 3)
  {
    if ([v1 preferOnlineRecognition])
    {
      uint64_t v5 = 0;
    }
    else
    {
      uint64_t v6 = [v1 languageDetectionUserContext];
      if (v6) {
        uint64_t v5 = 0;
      }
      else {
        uint64_t v5 = AFOfflineDictationCapable();
      }
    }
  }

  return v5;
}

BOOL AFIsSearchDictationRequest(void *a1)
{
  return [a1 returnKeyType] == 7;
}

void sub_19CFDA6F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 96), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__17523(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__17524(uint64_t a1)
{
}

AFMemoryInfo *AFMemoryInfoGetCurrent()
{
  kern_return_t v0;
  mach_error_t v1;
  void *v2;
  AFMemoryInfo *v3;
  AFMemoryInfo *v4;
  NSObject *v6;
  char *v7;
  mach_msg_type_number_t task_info_outCnt;
  integer_t task_info_out[4];
  long long v10;
  long long v11;
  long long v12;
  long long v13;
  long long v14;
  long long v15;
  long long v16;
  long long v17;
  long long v18;
  long long v19;
  long long v20;
  long long v21;
  long long v22;
  long long v23;
  long long v24;
  long long v25;
  long long v26;
  long long v27;
  long long v28;
  long long v29;
  long long v30;
  long long v31;
  int v32;
  uint8_t buf[4];
  const char *v34;
  __int16 v35;
  mach_error_t v36;
  __int16 v37;
  char *v38;
  uint64_t v39;
  uint64_t vars8;

  id v39 = *MEMORY[0x1E4F143B8];
  uint64_t v32 = 0;
  size_t v30 = 0u;
  uint64_t v31 = 0u;
  id v28 = 0u;
  long long v29 = 0u;
  long long v26 = 0u;
  size_t v27 = 0u;
  __int16 v24 = 0u;
  id v25 = 0u;
  id v22 = 0u;
  uint64_t v23 = 0u;
  __int16 v20 = 0u;
  size_t v21 = 0u;
  id v18 = 0u;
  uint64_t v19 = 0u;
  id v17 = 0u;
  id v15 = 0u;
  uint64_t v16 = 0u;
  id v13 = 0u;
  id v14 = 0u;
  id v11 = 0u;
  uint64_t v12 = 0u;
  *(_OWORD *)task_info_out = 0u;
  __int16 v10 = 0u;
  task_info_outCnt = 93;
  dispatch_workloop_t v0 = task_info(*MEMORY[0x1E4F14960], 0x16u, task_info_out, &task_info_outCnt);
  if (v0)
  {
    id v1 = v0;
    uint64_t v2 = (void *)AFSiriLogContextUtility;
    if (os_log_type_enabled((os_log_t)AFSiriLogContextUtility, OS_LOG_TYPE_ERROR))
    {
      uint64_t v6 = v2;
      id v7 = mach_error_string(v1);
      *(_DWORD *)buf = 136315650;
      id v34 = "AFMemoryInfoGetCurrent";
      size_t v35 = 1024;
      id v36 = v1;
      id v37 = 2080;
      id v38 = v7;
      _os_log_error_impl(&dword_19CF1D000, v6, OS_LOG_TYPE_ERROR, "%s task_info() with TASK_VM_INFO returned %d due to %s.", buf, 0x1Cu);
    }
    BOOL v3 = 0;
  }
  else
  {
    uint64_t v4 = [AFMemoryInfo alloc];
    BOOL v3 = -[AFMemoryInfo initWithVirtualMemorySizeInBytes:numberOfRegions:pageSizeInBytes:residentMemorySizeInBytes:peakResidentMemorySizeInBytes:physicalMemoryFootprintInBytes:](v4, "initWithVirtualMemorySizeInBytes:numberOfRegions:pageSizeInBytes:residentMemorySizeInBytes:peakResidentMemorySizeInBytes:physicalMemoryFootprintInBytes:", *(void *)task_info_out, task_info_out[2], task_info_out[3], v10, (void)v18);
  }
  return v3;
}

void extractMyriadDataFromAudioContext(void *a1, _WORD *a2, unsigned char *a3, unsigned char *a4, void *a5, unsigned char *a6)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v11 = a1;
  uint64_t v12 = v11;
  if (!v11 || (unint64_t)[v11 length] < 4)
  {
    id v15 = AFSiriLogContextConnection;
    if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "extractMyriadDataFromAudioContext";
      __int16 v20 = 2112;
      size_t v21 = v12;
      _os_log_impl(&dword_19CF1D000, v15, OS_LOG_TYPE_INFO, "%s AFMyriadRecord invalid data during init: %@", buf, 0x16u);
    }
    if (a2) {
      *a2 = 0;
    }
    if (a3) {
      *a3 = 0;
    }
    if (a4) {
      *a4 = 0;
    }
    goto LABEL_32;
  }
  if (!a2) {
    goto LABEL_28;
  }
  int v13 = (unsigned __int16)arc4random_uniform(0x10000u);
  while (!v13 || v13 == (unsigned __int16)*a2)
  {
    unsigned __int16 v14 = arc4random_uniform(0x10000u);
    if ((v14 & 0xFFFB) == 0xF0) {
      goto LABEL_11;
    }
    int v13 = v14;
    if (v14 > 0xF9F8u)
    {
      if (v14 == 63993 || v14 == 0xFFFF) {
        goto LABEL_11;
      }
    }
    else if (v14 - 208 <= 0x2F && ((1 << (v14 + 48)) & 0x830080010001) != 0 || !v14)
    {
LABEL_11:
      int v13 = 0;
    }
  }
  uint64_t v16 = AFSiriLogContextConnection;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    *(void *)&uint8_t buf[4] = "_generateRandomHash";
    __int16 v20 = 1024;
    LODWORD(v21) = v13;
    _os_log_impl(&dword_19CF1D000, v16, OS_LOG_TYPE_INFO, "%s Generated myriad hash: %hu", buf, 0x12u);
  }
  *a2 = v13;
LABEL_28:
  if (a3) {
    objc_msgSend(v12, "getBytes:range:", a3, 2, 1);
  }
  if (a4) {
    objc_msgSend(v12, "getBytes:range:", a4, 3, 1);
  }
LABEL_32:
  if (a5)
  {
    *(void *)buf = 0;
    unint64_t v17 = [v12 length];
    uint64_t v18 = 0;
    if (v17 >= 0xC)
    {
      objc_msgSend(v12, "getBytes:range:", buf, 4, 8, 0.0);
      uint64_t v18 = *(void *)buf;
    }
    *a5 = v18;
  }
  if (a6)
  {
    if ((unint64_t)[v12 length] < 0xD) {
      *a6 = 0;
    }
    else {
      objc_msgSend(v12, "getBytes:range:", a6, 12, 1);
    }
  }
}

id AFAssertionGetContexts(void *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = [v1 count];
  if (v2)
  {
    BOOL v3 = (void *)[objc_alloc(MEMORY[0x1E4F1CA48]) initWithCapacity:v2];
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    id v4 = v1;
    uint64_t v5 = [v4 countByEnumeratingWithState:&v12 objects:v16 count:16];
    if (v5)
    {
      uint64_t v6 = v5;
      uint64_t v7 = *(void *)v13;
      do
      {
        for (uint64_t i = 0; i != v6; ++i)
        {
          if (*(void *)v13 != v7) {
            objc_enumerationMutation(v4);
          }
          uint64_t v9 = objc_msgSend(*(id *)(*((void *)&v12 + 1) + 8 * i), "context", (void)v12);
          if (v9) {
            [v3 addObject:v9];
          }
        }
        uint64_t v6 = [v4 countByEnumeratingWithState:&v12 objects:v16 count:16];
      }
      while (v6);
    }

    __int16 v10 = (void *)[v3 copy];
  }
  else
  {
    __int16 v10 = (void *)MEMORY[0x1E4F1CBF0];
  }

  return v10;
}

id AFAssertionGetCurrentOrUpNextDateIntervalFromContexts(void *a1, void *a2)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  uint64_t v5 = [v3 count];
  id v6 = 0;
  if (!v4 || !v5) {
    goto LABEL_38;
  }
  id v7 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  long long v41 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  id v35 = v3;
  id v8 = v3;
  uint64_t v9 = [v8 countByEnumeratingWithState:&v41 objects:v46 count:16];
  if (!v9) {
    goto LABEL_23;
  }
  uint64_t v10 = v9;
  uint64_t v11 = *(void *)v42;
  do
  {
    for (uint64_t i = 0; i != v10; ++i)
    {
      if (*(void *)v42 != v11) {
        objc_enumerationMutation(v8);
      }
      long long v13 = *(void **)(*((void *)&v41 + 1) + 8 * i);
      long long v14 = objc_msgSend(v13, "effectiveDate", v35);
      if (v14)
      {
        [v13 expirationDuration];
        if (v15 >= 0.0)
        {
          double v16 = v15;
          [v14 timeIntervalSinceDate:v4];
          if (v17 <= 0.0)
          {
            if (v16 <= 0.0)
            {
              id v19 = objc_alloc(MEMORY[0x1E4F28C18]);
LABEL_19:
              size_t v21 = [MEMORY[0x1E4F1C9C8] distantFuture];
              __int16 v20 = (void *)[v19 initWithStartDate:v14 endDate:v21];

              if (!v20) {
                goto LABEL_21;
              }
LABEL_20:
              [v7 addObject:v20];

              goto LABEL_21;
            }
            if (v16 + v17 <= 0.0) {
              goto LABEL_21;
            }
            id v18 = objc_alloc(MEMORY[0x1E4F28C18]);
          }
          else
          {
            id v18 = objc_alloc(MEMORY[0x1E4F28C18]);
            id v19 = v18;
            if (v16 <= 0.0) {
              goto LABEL_19;
            }
          }
          __int16 v20 = (void *)[v18 initWithStartDate:v14 duration:v16];
          if (v20) {
            goto LABEL_20;
          }
        }
      }
LABEL_21:
    }
    uint64_t v10 = [v8 countByEnumeratingWithState:&v41 objects:v46 count:16];
  }
  while (v10);
LABEL_23:

  long long v39 = 0u;
  long long v40 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  id obj = [v7 sortedArrayUsingComparator:&__block_literal_global_18533];
  uint64_t v22 = [obj countByEnumeratingWithState:&v37 objects:v45 count:16];
  if (v22)
  {
    uint64_t v23 = v22;
    id v6 = 0;
    uint64_t v24 = *(void *)v38;
    do
    {
      for (uint64_t j = 0; j != v23; ++j)
      {
        if (*(void *)v38 != v24) {
          objc_enumerationMutation(obj);
        }
        long long v26 = *(void **)(*((void *)&v37 + 1) + 8 * j);
        if (v6)
        {
          if (![v6 intersectsDateInterval:*(void *)(*((void *)&v37 + 1) + 8 * j)]) {
            goto LABEL_37;
          }
          size_t v27 = [v6 endDate];
          id v28 = [v26 endDate];
          uint64_t v29 = [v27 compare:v28];

          if (v29 == -1)
          {
            id v30 = objc_alloc(MEMORY[0x1E4F28C18]);
            uint64_t v31 = [v6 startDate];
            uint64_t v32 = [v26 endDate];
            uint64_t v33 = [v30 initWithStartDate:v31 endDate:v32];

            id v6 = (id)v33;
          }
        }
        else
        {
          id v6 = v26;
        }
      }
      uint64_t v23 = [obj countByEnumeratingWithState:&v37 objects:v45 count:16];
    }
    while (v23);
  }
  else
  {
    id v6 = 0;
  }
LABEL_37:

  id v3 = v35;
LABEL_38:

  return v6;
}

uint64_t __AFAssertionGetCurrentOrUpNextDateIntervalFromContexts_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v4 = a3;
  uint64_t v5 = [a2 startDate];
  id v6 = [v4 startDate];

  uint64_t v7 = [v5 compare:v6];
  return v7;
}

uint64_t AFAssertionGetEffectiveDateAndExpirationDurationFromDateInterval(void *a1, void *a2, void *a3, double *a4)
{
  id v7 = a1;
  id v8 = a2;
  uint64_t v9 = v8;
  if (a3) {
    *a3 = 0;
  }
  if (a4) {
    *a4 = 0.0;
  }
  uint64_t v10 = 0;
  if (v7 && v8)
  {
    uint64_t v11 = [v7 startDate];
    [v7 duration];
    double v13 = v12;
    [v11 timeIntervalSinceDate:v9];
    double v15 = v11;
    if (v14 <= 0.0 && (double v13 = v13 + v14, v15 = v9, v13 <= 0.0))
    {
      double v17 = 0;
      uint64_t v10 = 0;
    }
    else
    {
      id v16 = v15;
      double v17 = v16;
      if (a3) {
        *a3 = v16;
      }
      if (a4) {
        *a4 = v13;
      }
      uint64_t v10 = 1;
    }
  }
  return v10;
}

uint64_t AFAssertionRelinquishmentOptionsValidate(char a1)
{
  return a1 & 1;
}

id AFAssertionRelinquishmentOptionsGetNames(uint64_t a1)
{
  if (a1)
  {
    char v1 = a1;
    id v2 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
    id v3 = v2;
    if (v1) {
      [v2 addObject:@"inactiveOnly"];
    }
    id v4 = (void *)[v3 copy];
  }
  else
  {
    id v4 = (void *)MEMORY[0x1E4F1CBF0];
  }
  return v4;
}

uint64_t AFAssertionRelinquishmentOptionsGetFromNames(void *a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if ([v1 count])
  {
    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v12 = v1;
    id v2 = v1;
    uint64_t v3 = [v2 countByEnumeratingWithState:&v13 objects:v17 count:16];
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = 0;
      uint64_t v6 = *(void *)v14;
      do
      {
        uint64_t v7 = 0;
        do
        {
          if (*(void *)v14 != v6) {
            objc_enumerationMutation(v2);
          }
          id v8 = *(id *)(*((void *)&v13 + 1) + 8 * v7);
          if ([v8 length])
          {
            if (_AFAssertionRelinquishmentOptionsGetFromName_onceToken != -1) {
              dispatch_once(&_AFAssertionRelinquishmentOptionsGetFromName_onceToken, &__block_literal_global_18552);
            }
            uint64_t v9 = [(id)_AFAssertionRelinquishmentOptionsGetFromName_map objectForKey:v8];
            uint64_t v10 = [v9 unsignedIntegerValue];
          }
          else
          {
            uint64_t v10 = 0;
          }

          v5 |= v10;
          ++v7;
        }
        while (v4 != v7);
        uint64_t v4 = [v2 countByEnumeratingWithState:&v13 objects:v17 count:16];
      }
      while (v4);
    }
    else
    {
      uint64_t v5 = 0;
    }

    id v1 = v12;
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

__CFString *_AFMemoryPressureConditionGetName(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 4) {
    return @"unknown";
  }
  else {
    return off_1E5927B80[a1 - 1];
  }
}

void AFApplicationWorkspaceEnumerateInstalledApplications(uint64_t a1, void *a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id v4 = objc_alloc_init(MEMORY[0x1E4F1CA80]);
  id LSApplicationProxyClass = getLSApplicationProxyClass();
  if (!LSApplicationProxyClass)
  {
    uint64_t v6 = AFSiriLogContextUtility;
    if (os_log_type_enabled((os_log_t)AFSiriLogContextUtility, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      long long v15 = "AFApplicationWorkspaceEnumerateInstalledApplications";
      _os_log_error_impl(&dword_19CF1D000, v6, OS_LOG_TYPE_ERROR, "%s Unable to get LSApplicationProxy class.", buf, 0xCu);
    }
  }
  uint64_t v7 = [getLSApplicationWorkspaceClass() defaultWorkspace];
  if (v7)
  {
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 3221225472;
    void v9[2] = __AFApplicationWorkspaceEnumerateInstalledApplications_block_invoke;
    v9[3] = &unk_1E5927BB0;
    id v12 = LSApplicationProxyClass;
    id v10 = v4;
    uint64_t v13 = a1;
    id v11 = v3;
    [v7 enumerateBundlesOfType:1 block:v9];
  }
  else
  {
    id v8 = AFSiriLogContextUtility;
    if (os_log_type_enabled((os_log_t)AFSiriLogContextUtility, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      long long v15 = "AFApplicationWorkspaceEnumerateInstalledApplications";
      _os_log_error_impl(&dword_19CF1D000, v8, OS_LOG_TYPE_ERROR, "%s Unable to get an instance of LSApplicationWorkspace.", buf, 0xCu);
    }
  }
}

void __AFApplicationWorkspaceEnumerateInstalledApplications_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (!*(void *)(a1 + 48) || (objc_opt_isKindOfClass() & 1) != 0)
  {
    id v4 = [v3 bundleIdentifier];
    if (!v4)
    {
      uint64_t v5 = AFSiriLogContextUtility;
      if (os_log_type_enabled((os_log_t)AFSiriLogContextUtility, OS_LOG_TYPE_INFO))
      {
        int v15 = 136315394;
        uint64_t v16 = "AFApplicationWorkspaceEnumerateInstalledApplications_block_invoke";
        __int16 v17 = 2112;
        id v18 = v3;
        uint64_t v6 = "%s Encountered an application proxy without bundle identifier: %@";
        goto LABEL_11;
      }
LABEL_24:

      goto LABEL_25;
    }
    if ([*(id *)(a1 + 32) containsObject:v4])
    {
      uint64_t v5 = AFSiriLogContextUtility;
      if (os_log_type_enabled((os_log_t)AFSiriLogContextUtility, OS_LOG_TYPE_INFO))
      {
        int v15 = 136315394;
        uint64_t v16 = "AFApplicationWorkspaceEnumerateInstalledApplications_block_invoke";
        __int16 v17 = 2112;
        id v18 = v3;
        uint64_t v6 = "%s Encountered an application proxy with an identical bundle identifier: %@";
LABEL_11:
        _os_log_impl(&dword_19CF1D000, v5, OS_LOG_TYPE_INFO, v6, (uint8_t *)&v15, 0x16u);
        goto LABEL_24;
      }
      goto LABEL_24;
    }
    id v8 = v3;
    uint64_t v9 = v8;
    if (!v8)
    {
LABEL_23:

      goto LABEL_24;
    }
    id v10 = [v8 applicationType];
    id v11 = v10;
    uint64_t v12 = *(void *)(a1 + 56);
    if (v12)
    {
      if ([v10 isEqualToString:@"Internal"])
      {
LABEL_22:

        goto LABEL_23;
      }
      uint64_t v12 = *(void *)(a1 + 56);
    }
    if ((v12 & 2) == 0
      || ![v11 isEqualToString:@"System"]
      || ([v9 appTags],
          uint64_t v13 = objc_claimAutoreleasedReturnValue(),
          char v14 = [v13 containsObject:@"hidden"],
          v13,
          (v14 & 1) == 0))
    {
      if ((*(unsigned char *)(a1 + 56) & 4) == 0 || ([v9 isLaunchProhibited] & 1) == 0)
      {
        [*(id *)(a1 + 32) addObject:v4];
        (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
      }
    }
    goto LABEL_22;
  }
  uint64_t v7 = AFSiriLogContextUtility;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextUtility, OS_LOG_TYPE_ERROR))
  {
    int v15 = 136315394;
    uint64_t v16 = "AFApplicationWorkspaceEnumerateInstalledApplications_block_invoke";
    __int16 v17 = 2112;
    id v18 = v3;
    _os_log_error_impl(&dword_19CF1D000, v7, OS_LOG_TYPE_ERROR, "%s Encountered a bundle proxy that is not a LSApplicationProxy: %@", (uint8_t *)&v15, 0x16u);
  }
LABEL_25:
}

id initLSApplicationWorkspace()
{
  if (initLSApplicationWorkspace_sOnce != -1) {
    dispatch_once(&initLSApplicationWorkspace_sOnce, &__block_literal_global_15);
  }
  dispatch_workloop_t v0 = (void *)classLSApplicationWorkspace;
  return v0;
}

Class __initLSApplicationWorkspace_block_invoke()
{
  CoreServicesLibrary();
  Class result = objc_getClass("LSApplicationWorkspace");
  classLSApplicationWorkspace = (uint64_t)result;
  if (!result) {
    __assert_rtn("initLSApplicationWorkspace_block_invoke", "AFApplicationWorkspaceUtils.m", 18, "classLSApplicationWorkspace");
  }
  getLSApplicationWorkspaceClass = (uint64_t (*)())LSApplicationWorkspaceFunction;
  return result;
}

void CoreServicesLibrary()
{
  if (!CoreServicesLibrary_frameworkLibrary)
  {
    CoreServicesLibrary_frameworkLibrary = (uint64_t)dlopen("/System/Library/Frameworks/CoreServices.framework/CoreServices", 2);
    if (!CoreServicesLibrary_frameworkLibrary) {
      __assert_rtn("CoreServicesLibrary", "AFApplicationWorkspaceUtils.m", 16, "frameworkLibrary");
    }
  }
}

id LSApplicationWorkspaceFunction()
{
  return (id)classLSApplicationWorkspace;
}

id initLSApplicationProxy()
{
  if (initLSApplicationProxy_sOnce != -1) {
    dispatch_once(&initLSApplicationProxy_sOnce, &__block_literal_global_19042);
  }
  dispatch_workloop_t v0 = (void *)classLSApplicationProxy;
  return v0;
}

Class __initLSApplicationProxy_block_invoke()
{
  CoreServicesLibrary();
  Class result = objc_getClass("LSApplicationProxy");
  classLSApplicationProxy = (uint64_t)result;
  if (!result) {
    __assert_rtn("initLSApplicationProxy_block_invoke", "AFApplicationWorkspaceUtils.m", 17, "classLSApplicationProxy");
  }
  getid LSApplicationProxyClass = (uint64_t (*)())LSApplicationProxyFunction;
  return result;
}

id LSApplicationProxyFunction()
{
  return (id)classLSApplicationProxy;
}

void AFApplicationWorkspaceEnumerateInstalledUserVisibleApplications(void *a1)
{
}

uint64_t AFDeviceContextPrivacyClassFromString(void *a1)
{
  id v1 = a1;
  if ([v1 isEqualToString:@"AFDeviceContextPrivacyClassUnknown"])
  {
    uint64_t v2 = 0;
  }
  else if ([v1 isEqualToString:@"AFDeviceContextPrivacyClassUsedByLocalUser"])
  {
    uint64_t v2 = 10;
  }
  else if ([v1 isEqualToString:@"AFDeviceContextPrivacyClassSharedWithHome"])
  {
    uint64_t v2 = 50;
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

__CFString *AFDeviceContextPrivacyClassGetStringDescription(uint64_t a1)
{
  id v1 = @"AFDeviceContextPrivacyClassUsedByLocalUser";
  if (a1 == 50) {
    id v1 = @"AFDeviceContextPrivacyClassSharedWithHome";
  }
  if (a1) {
    return v1;
  }
  else {
    return @"AFDeviceContextPrivacyClassUnknown";
  }
}

BOOL AFBluetoothHeadphoneEarbudSideGetIsValid(unint64_t a1)
{
  return a1 < 3;
}

BOOL AFBluetoothHeadphoneEarbudSideGetIsValidAndSpecified(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 2;
}

__CFString *AFBluetoothHeadphoneEarbudSideGetName(unint64_t a1)
{
  if (a1 > 2) {
    return @"(unknown)";
  }
  else {
    return off_1E5927BF8[a1];
  }
}

uint64_t AFBluetoothHeadphoneEarbudSideGetFromName(void *a1)
{
  id v1 = a1;
  if ([v1 length])
  {
    if (AFBluetoothHeadphoneEarbudSideGetFromName_onceToken != -1) {
      dispatch_once(&AFBluetoothHeadphoneEarbudSideGetFromName_onceToken, &__block_literal_global_19114);
    }
    uint64_t v2 = [(id)AFBluetoothHeadphoneEarbudSideGetFromName_map objectForKey:v1];
    uint64_t v3 = [v2 integerValue];
  }
  else
  {
    uint64_t v3 = 0;
  }

  return v3;
}

void __AFBluetoothHeadphoneEarbudSideGetFromName_block_invoke()
{
  dispatch_workloop_t v0 = (void *)AFBluetoothHeadphoneEarbudSideGetFromName_map;
  AFBluetoothHeadphoneEarbudSideGetFromName_map = (uint64_t)&unk_1EEE98B30;
}

uint64_t AFSiriDeactivationOptionsValidate(char a1)
{
  return a1 & 3;
}

id AFSiriDeactivationOptionsGetNames(uint64_t a1)
{
  if (a1)
  {
    char v1 = a1;
    id v2 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
    uint64_t v3 = v2;
    if (v1) {
      [v2 addObject:@"keepUISessionAlive"];
    }
    if ((v1 & 2) != 0) {
      [v3 addObject:@"keepAudioSessionAlive"];
    }
    id v4 = (void *)[v3 copy];
  }
  else
  {
    id v4 = (void *)MEMORY[0x1E4F1CBF0];
  }
  return v4;
}

uint64_t AFSiriDeactivationOptionsGetFromNames(void *a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if ([v1 count])
  {
    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v12 = v1;
    id v2 = v1;
    uint64_t v3 = [v2 countByEnumeratingWithState:&v13 objects:v17 count:16];
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = 0;
      uint64_t v6 = *(void *)v14;
      do
      {
        uint64_t v7 = 0;
        do
        {
          if (*(void *)v14 != v6) {
            objc_enumerationMutation(v2);
          }
          id v8 = *(id *)(*((void *)&v13 + 1) + 8 * v7);
          if ([v8 length])
          {
            if (_AFSiriDeactivationOptionsGetFromName_onceToken != -1) {
              dispatch_once(&_AFSiriDeactivationOptionsGetFromName_onceToken, &__block_literal_global_19631);
            }
            uint64_t v9 = [(id)_AFSiriDeactivationOptionsGetFromName_map objectForKey:v8];
            uint64_t v10 = [v9 unsignedIntegerValue];
          }
          else
          {
            uint64_t v10 = 0;
          }

          v5 |= v10;
          ++v7;
        }
        while (v4 != v7);
        uint64_t v4 = [v2 countByEnumeratingWithState:&v13 objects:v17 count:16];
      }
      while (v4);
    }
    else
    {
      uint64_t v5 = 0;
    }

    id v1 = v12;
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

void _af_SaveItemSelection(void *a1, void *a2, uint64_t a3)
{
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  id v6 = a2;
  uint64_t v7 = objc_msgSend(v5, "af_indexIdentifierForItem:", v6);
  if (v7)
  {
    id v37 = v6;
    id v8 = [MEMORY[0x1E4F1C9C8] date];
    uint64_t v9 = objc_alloc_init(AFDisambiguationEvent);
    long long v41 = v7;
    [(AFDisambiguationEvent *)v9 setItemIdentifier:v7];
    [(AFDisambiguationEvent *)v9 setDate:v8];
    uint64_t v38 = a3;
    [(AFDisambiguationEvent *)v9 setSelectionType:a3];
    id object = v5;
    uint64_t v10 = objc_msgSend(v5, "af_disambiguationInfo");
    id v11 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
    id v36 = v9;
    [v11 addObject:v9];
    id v12 = +[AFAssistedDisambiguationRules defaultRules];
    unint64_t v35 = [v12 maxPersistenceDepth];
    long long v39 = v12;
    [v12 maxPersistenceAge];
    double v14 = v13;
    unint64_t v15 = [v11 count];
    long long v43 = 0u;
    long long v44 = 0u;
    long long v45 = 0u;
    long long v46 = 0u;
    long long v40 = v10;
    long long v16 = [v10 history];
    uint64_t v17 = [v16 countByEnumeratingWithState:&v43 objects:v49 count:16];
    if (v17)
    {
      uint64_t v18 = v17;
      uint64_t v19 = *(void *)v44;
LABEL_4:
      uint64_t v20 = 0;
      BOOL v21 = v35 >= v15;
      unint64_t v22 = v35 - v15;
      v15 += v18;
      if (v21) {
        unint64_t v23 = v22;
      }
      else {
        unint64_t v23 = 0;
      }
      while (1)
      {
        if (*(void *)v44 != v19) {
          objc_enumerationMutation(v16);
        }
        if (v23 == v20) {
          break;
        }
        uint64_t v24 = *(void **)(*((void *)&v43 + 1) + 8 * v20);
        id v25 = [v24 date];
        if (!v25 || ([v8 timeIntervalSinceDate:v25], v26 > v14))
        {

          break;
        }
        [v11 addObject:v24];

        if (v18 == ++v20)
        {
          uint64_t v18 = [v16 countByEnumeratingWithState:&v43 objects:v49 count:16];
          if (v18) {
            goto LABEL_4;
          }
          break;
        }
      }
    }

    [v40 setHistory:v11];
    int v28 = 1;
    id v5 = object;
    objc_setAssociatedObject(object, "DisambiguationInfoKey", 0, (void *)1);
    uint64_t v29 = objc_alloc_init(AFDisambiguationStore);
    id v30 = objc_msgSend(object, "af_disambiguationIdentifier");
    [(AFDisambiguationStore *)v29 saveInfo:v40 forIdentifier:v30];

    if (v38 == 2)
    {
      int v28 = 0;
      uint64_t v31 = @"assisted";
    }
    else if (v38 == 1)
    {
      int v28 = 0;
      uint64_t v31 = @"singleResult";
    }
    else if (v38)
    {
      uint64_t v31 = 0;
    }
    else
    {
      int v28 = 0;
      uint64_t v31 = @"manual";
    }
    id v6 = v37;
    uint64_t v32 = +[AFAnalytics sharedAnalytics];
    uint64_t v33 = v32;
    if (v28)
    {
      [v32 logEventWithType:1926 context:0];
    }
    else
    {
      uint64_t v47 = @"type";
      os_log_t v48 = v31;
      id v34 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v48 forKeys:&v47 count:1];
      [v33 logEventWithType:1926 context:v34];
    }
    uint64_t v7 = v41;
  }
  else
  {
    size_t v27 = AFSiriLogContextConnection;
    if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v51 = "_af_SaveItemSelection";
      __int16 v52 = 2112;
      id v53 = v6;
      __int16 v54 = 2112;
      id v55 = v5;
      _os_log_error_impl(&dword_19CF1D000, v27, OS_LOG_TYPE_ERROR, "%s Not saving disambiguation event. Item %@ does not exist in object %@", buf, 0x20u);
    }
  }
}

id _af_AssistedSelectionItem(void *a1)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  id v2 = objc_msgSend(v1, "af_disambiguationInfo");
  uint64_t v3 = [v2 history];

  if (v3)
  {
    id v37 = v1;
    uint64_t v4 = +[AFAssistedDisambiguationRules defaultRules];
    unint64_t v38 = [v4 decisionDepth];
    [v4 decisionAge];
    double v6 = v5;
    id v7 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    long long v42 = 0u;
    long long v43 = 0u;
    long long v44 = 0u;
    long long v45 = 0u;
    id v36 = v3;
    id v8 = v3;
    uint64_t v9 = [v8 countByEnumeratingWithState:&v42 objects:v46 count:16];
    if (v9)
    {
      uint64_t v10 = v9;
      unint64_t v39 = 0;
      uint64_t v11 = *(void *)v43;
LABEL_4:
      uint64_t v12 = 0;
      if (v38 >= v39) {
        uint64_t v13 = v38 - v39;
      }
      else {
        uint64_t v13 = 0;
      }
      while (1)
      {
        if (*(void *)v43 != v11) {
          objc_enumerationMutation(v8);
        }
        if (v13 == v12) {
          break;
        }
        double v14 = *(void **)(*((void *)&v42 + 1) + 8 * v12);
        unint64_t v15 = [v14 itemIdentifier];
        if (v15)
        {
          long long v16 = [v14 date];
          [v16 timeIntervalSinceNow];
          double v18 = -v17;

          if (v6 >= v18)
          {
            [v4 weightForEvent:v14];
            double v20 = v19;
            BOOL v21 = [v7 objectForKey:v15];
            [v21 doubleValue];
            double v23 = v20 + v22;

            uint64_t v24 = [MEMORY[0x1E4F28ED0] numberWithDouble:v23];
            id v25 = [v14 itemIdentifier];
            [v7 setObject:v24 forKey:v25];
          }
        }

        if (v10 == ++v12)
        {
          v39 += v12;
          uint64_t v10 = [v8 countByEnumeratingWithState:&v42 objects:v46 count:16];
          if (v10) {
            goto LABEL_4;
          }
          break;
        }
      }
    }

    double v26 = [v7 allKeys];
    v40[0] = MEMORY[0x1E4F143A8];
    v40[1] = 3221225472;
    v40[2] = ___af_AssistedSelectionItem_block_invoke;
    v40[3] = &unk_1E5927D58;
    id v27 = v7;
    id v41 = v27;
    int v28 = [v26 sortedArrayUsingComparator:v40];
    uint64_t v29 = [v28 lastObject];

    id v30 = [v27 objectForKey:v29];
    [v30 doubleValue];
    double v32 = v31;

    [v4 decisionThreshold];
    if (v32 - v33 <= -2.22044605e-16)
    {
      id v34 = 0;
      id v1 = v37;
    }
    else
    {
      id v1 = v37;
      id v34 = objc_msgSend(v37, "af_itemForIndexIdentifier:", v29);
    }

    uint64_t v3 = v36;
  }
  else
  {
    id v34 = 0;
  }

  return v34;
}

AFDisambiguationInfo *_af_DisambiguationInfo(void *a1)
{
  id v1 = a1;
  objc_getAssociatedObject(v1, "DisambiguationInfoKey");
  id v2 = (AFDisambiguationInfo *)objc_claimAutoreleasedReturnValue();
  if (!v2)
  {
    uint64_t v3 = objc_alloc_init(AFDisambiguationStore);
    uint64_t v4 = objc_msgSend(v1, "af_disambiguationIdentifier");
    id v2 = [(AFDisambiguationStore *)v3 infoForIdentifier:v4];

    if (!v2) {
      id v2 = objc_alloc_init(AFDisambiguationInfo);
    }
    objc_setAssociatedObject(v1, "DisambiguationInfoKey", v2, (void *)1);
  }

  return v2;
}

void _UpdateSha1WithDisambiguationList(CC_SHA1_CTX *a1, void *a2)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v4 = v3;
  if (a1 && v3)
  {
    id v5 = [v3 disambiguationKey];
    double v6 = (const char *)[v5 UTF8String];
    if (v6)
    {
      id v7 = v6;
      CC_LONG v8 = strlen(v6);
      CC_SHA1_Update(a1, v7, v8);
    }

    unint64_t v35 = v4;
    uint64_t v9 = [v4 items];
    uint64_t v10 = [v9 sortedArrayUsingComparator:&__block_literal_global_19706];

    long long v38 = 0u;
    long long v39 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    id v11 = v10;
    uint64_t v12 = [v11 countByEnumeratingWithState:&v36 objects:v40 count:16];
    if (v12)
    {
      uint64_t v13 = v12;
      uint64_t v14 = *(void *)v37;
      do
      {
        for (uint64_t i = 0; i != v13; ++i)
        {
          if (*(void *)v37 != v14) {
            objc_enumerationMutation(v11);
          }
          long long v16 = *(void **)(*((void *)&v36 + 1) + 8 * i);
          id v17 = [v16 label];
          double v18 = (const char *)[v17 UTF8String];
          if (v18)
          {
            double v19 = v18;
            CC_LONG v20 = strlen(v18);
            CC_SHA1_Update(a1, v19, v20);
          }

          id v21 = [v16 labelValue];
          double v22 = (const char *)[v21 UTF8String];
          if (v22)
          {
            double v23 = v22;
            CC_LONG v24 = strlen(v22);
            CC_SHA1_Update(a1, v23, v24);
          }

          id v25 = [v16 title];
          double v26 = (const char *)[v25 UTF8String];
          if (v26)
          {
            id v27 = v26;
            CC_LONG v28 = strlen(v26);
            CC_SHA1_Update(a1, v27, v28);
          }

          uint64_t v29 = [v16 object];
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            id v30 = [v29 identifier];
            id v31 = [v30 absoluteString];
            double v32 = (const char *)[v31 UTF8String];
            if (v32)
            {
              double v33 = v32;
              CC_LONG v34 = strlen(v32);
              CC_SHA1_Update(a1, v33, v34);
            }
          }
        }
        uint64_t v13 = [v11 countByEnumeratingWithState:&v36 objects:v40 count:16];
      }
      while (v13);
    }

    uint64_t v4 = v35;
  }
}

__CFString *AFDisambiguationSelectionTypeGetName(unint64_t a1)
{
  if (a1 > 2) {
    return 0;
  }
  else {
    return off_1E5927D78[a1];
  }
}

void AFDisambiguationHistoryReset()
{
  dispatch_workloop_t v0 = objc_alloc_init(AFDisambiguationStore);
  [(AFDisambiguationStore *)v0 reset];
}

void sub_19CFE8248(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__19765(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__19766(uint64_t a1)
{
}

void sub_19CFE853C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19CFE8890(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id AFOpportuneSpeakingModelServiceInterface()
{
  v15[1] = *MEMORY[0x1E4F143B8];
  dispatch_workloop_t v0 = [MEMORY[0x1E4F29280] interfaceWithProtocol:&unk_1EEEE6BE8];
  id v1 = [MEMORY[0x1E4F29280] interfaceWithProtocol:&unk_1EEEE6C48];
  id v2 = (void *)MEMORY[0x1E4F1CAD0];
  v15[0] = objc_opt_class();
  id v3 = [MEMORY[0x1E4F1C978] arrayWithObjects:v15 count:1];
  uint64_t v4 = [v2 setWithArray:v3];
  [v1 setClasses:v4 forSelector:sel_modelWithIdentifier_didUpdateScore_forSpeakable_ argumentIndex:2 ofReply:0];

  id v5 = [MEMORY[0x1E4F29280] interfaceWithProtocol:&unk_1EEEE6CA8];
  [v5 setInterface:v1 forSelector:sel_startWithDelegate_ argumentIndex:0 ofReply:0];
  double v6 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v14 = objc_opt_class();
  id v7 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v14 count:1];
  CC_LONG v8 = [v6 setWithArray:v7];
  [v5 setClasses:v8 forSelector:sel_setSpeakable_ argumentIndex:0 ofReply:0];

  uint64_t v9 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v13 = objc_opt_class();
  uint64_t v10 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v13 count:1];
  id v11 = [v9 setWithArray:v10];
  [v5 setClasses:v11 forSelector:sel_recordFeedbackOfType_forSpeakable_ argumentIndex:1 ofReply:0];

  [v0 setInterface:v5 forSelector:sel_createModelWithType_completion_ argumentIndex:0 ofReply:1];
  return v0;
}

void sub_19CFEAB3C(_Unwind_Exception *a1)
{
  objc_destroyWeak((id *)(v1 - 40));
  _Unwind_Resume(a1);
}

void sub_19CFEADE0(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

void *__getBluetoothAccessoryAACPCapabilitiesReceivedSymbolLoc_block_invoke(void *a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  v5[0] = 0;
  if (!BluetoothManagerLibraryCore_frameworkLibrary_20245)
  {
    v5[1] = (void *)MEMORY[0x1E4F143A8];
    v5[2] = (void *)3221225472;
    void v5[3] = __BluetoothManagerLibraryCore_block_invoke_20246;
    v5[4] = &__block_descriptor_40_e5_v8__0l;
    v5[5] = v5;
    long long v6 = xmmword_1E5928088;
    uint64_t v7 = 0;
    BluetoothManagerLibraryCore_frameworkLibrary_20245 = _sl_dlopen();
  }
  id v2 = (void *)BluetoothManagerLibraryCore_frameworkLibrary_20245;
  if (!BluetoothManagerLibraryCore_frameworkLibrary_20245)
  {
    a1 = [MEMORY[0x1E4F28B00] currentHandler];
    id v2 = [NSString stringWithUTF8String:"void *BluetoothManagerLibrary(void)"];
    objc_msgSend(a1, "handleFailureInFunction:file:lineNumber:description:", v2, @"AFSiriHeadphonesMonitor.m", 61, @"%s", v5[0]);

    __break(1u);
    goto LABEL_7;
  }
  id v3 = v5[0];
  if (v5[0]) {
LABEL_7:
  }
    free(v3);
  Class result = dlsym(v2, "BluetoothAccessoryAACPCapabilitiesReceived");
  *(void *)(*(void *)(a1[4] + 8) + 24) = result;
  getBluetoothAccessoryAACPCapabilitiesReceivedSymbolLoc_ptr = *(void *)(*(void *)(a1[4] + 8) + 24);
  return result;
}

uint64_t __BluetoothManagerLibraryCore_block_invoke_20246()
{
  uint64_t result = _sl_dlopen();
  BluetoothManagerLibraryCore_frameworkLibrary_20245 = result;
  return result;
}

uint64_t __Block_byref_object_copy__20260(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__20261(uint64_t a1)
{
}

void *MediaExperienceLibrary()
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v4[0] = 0;
  if (!MediaExperienceLibraryCore_frameworkLibrary)
  {
    v4[1] = (void *)MEMORY[0x1E4F143A8];
    v4[2] = (void *)3221225472;
    v4[3] = __MediaExperienceLibraryCore_block_invoke;
    v4[4] = &__block_descriptor_40_e5_v8__0l;
    void v4[5] = v4;
    long long v5 = xmmword_1E5928070;
    uint64_t v6 = 0;
    MediaExperienceLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  dispatch_workloop_t v0 = (void *)MediaExperienceLibraryCore_frameworkLibrary;
  if (!MediaExperienceLibraryCore_frameworkLibrary)
  {
    dispatch_workloop_t v0 = [MEMORY[0x1E4F28B00] currentHandler];
    id v3 = [NSString stringWithUTF8String:"void *MediaExperienceLibrary(void)"];
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v3, @"AFSiriHeadphonesMonitor.m", 42, @"%s", v4[0]);

    __break(1u);
    goto LABEL_7;
  }
  uint64_t v1 = v4[0];
  if (v4[0]) {
LABEL_7:
  }
    free(v1);
  return v0;
}

uint64_t __MediaExperienceLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  MediaExperienceLibraryCore_frameworkLibrary = result;
  return result;
}

void __getAVSystemControllerClass_block_invoke(uint64_t a1)
{
  MediaExperienceLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("AVSystemController");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getAVSystemControllerClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x1E4F28B00] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getAVSystemControllerClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"AFSiriHeadphonesMonitor.m", 43, @"Unable to find class %s", "AVSystemController");

    __break(1u);
  }
}

void sub_19CFED5BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19CFED830(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19CFEE01C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19CFEECA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL AFSiriUserNotificationSummaryTypeGetIsValid(unint64_t a1)
{
  return a1 < 3;
}

BOOL AFSiriUserNotificationSummaryTypeGetIsValidAndSpecified(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 2;
}

__CFString *AFSiriUserNotificationSummaryTypeGetName(unint64_t a1)
{
  if (a1 > 2) {
    return @"(unknown)";
  }
  else {
    return off_1E59280E0[a1];
  }
}

uint64_t AFSiriUserNotificationSummaryTypeGetFromName(void *a1)
{
  id v1 = a1;
  if ([v1 length])
  {
    if (AFSiriUserNotificationSummaryTypeGetFromName_onceToken != -1) {
      dispatch_once(&AFSiriUserNotificationSummaryTypeGetFromName_onceToken, &__block_literal_global_20562);
    }
    id v2 = [(id)AFSiriUserNotificationSummaryTypeGetFromName_map objectForKey:v1];
    uint64_t v3 = [v2 integerValue];
  }
  else
  {
    uint64_t v3 = 0;
  }

  return v3;
}

void __AFSiriUserNotificationSummaryTypeGetFromName_block_invoke()
{
  dispatch_workloop_t v0 = (void *)AFSiriUserNotificationSummaryTypeGetFromName_map;
  AFSiriUserNotificationSummaryTypeGetFromName_map = (uint64_t)&unk_1EEE98BA8;
}

double AFMyriadMaxNoOperationDelay()
{
  if (AFMyriadMaxNoOperationDelay_onceToken != -1) {
    dispatch_once(&AFMyriadMaxNoOperationDelay_onceToken, &__block_literal_global_20699);
  }
  return *(double *)&AFMyriadMaxNoOperationDelay_noopDelay;
}

void __AFMyriadMaxNoOperationDelay_block_invoke()
{
  AFMyriadMaxNoOperationDelay_noopDelay = 0x3F747AE147AE147BLL;
  id v1 = +[AFPreferences sharedPreferences];
  [v1 myriadMaxNoOperationDelay];
  AFMyriadMaxNoOperationDelay_noopDelay = v0;
}

uint64_t AFMyriadMaxNoOperationAccessoryMessageCount()
{
  return 3;
}

double AFMyriadDecisionGetWaitTime()
{
  return 2.9000001;
}

double AFMyriadMonitorDecisionGetWaitTime()
{
  return 5.80000019;
}

double AFMyriadPreheatGetWaitTime()
{
  return 2.0;
}

id initTUHandle()
{
  if (initTUHandle_sOnce != -1) {
    dispatch_once(&initTUHandle_sOnce, &__block_literal_global_20766);
  }
  uint64_t v0 = (void *)classTUHandle;
  return v0;
}

Class __initTUHandle_block_invoke()
{
  if (!TelephonyUtilitiesLibrary_frameworkLibrary)
  {
    TelephonyUtilitiesLibrary_frameworkLibrary = (uint64_t)dlopen("/System/Library/PrivateFrameworks/TelephonyUtilities.framework/TelephonyUtilities", 2);
    if (!TelephonyUtilitiesLibrary_frameworkLibrary) {
      __assert_rtn("TelephonyUtilitiesLibrary", "AFSiriIncomingCall.m", 16, "frameworkLibrary");
    }
  }
  Class result = objc_getClass("TUHandle");
  classTUHandle = (uint64_t)result;
  if (!result) {
    __assert_rtn("initTUHandle_block_invoke", "AFSiriIncomingCall.m", 17, "classTUHandle");
  }
  getTUHandleClass = TUHandleFunction;
  return result;
}

id TUHandleFunction()
{
  return (id)classTUHandle;
}

void sub_19CFF1518(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void _StartUIRequest(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v6 = a2;
  id v11 = objc_alloc_init(AFRequestInfo);
  [(AFRequestInfo *)v11 setNotifyState:&unk_1EEE971C0];
  uint64_t v7 = [a5 objectForKey:@"RequiresUserInteraction"];
  -[AFRequestInfo setHandoffRequiresUserInteraction:](v11, "setHandoffRequiresUserInteraction:", [v7 BOOLValue]);

  uint64_t v8 = [a5 objectForKey:@"OriginDeviceName"];
  [(AFRequestInfo *)v11 setHandoffOriginDeviceName:v8];

  uint64_t v9 = [a5 objectForKey:@"ActivationEvent"];
  -[AFRequestInfo setActivationEvent:](v11, "setActivationEvent:", [v9 integerValue]);

  uint64_t v10 = v6[4];
  if (v10) {
    (*(void (**)(uint64_t, AFRequestInfo *, void *))(v10 + 16))(v10, v11, &__block_literal_global_103);
  }
}

BOOL AFResponseModeDeviceOrientationGetIsValid(unint64_t a1)
{
  return a1 < 7;
}

BOOL AFResponseModeDeviceOrientationGetIsValidAndSpecified(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 6;
}

__CFString *AFResponseModeDeviceOrientationGetName(unint64_t a1)
{
  if (a1 > 6) {
    return @"(unknown)";
  }
  else {
    return off_1E5928170[a1];
  }
}

uint64_t AFResponseModeDeviceOrientationGetFromName(void *a1)
{
  id v1 = a1;
  if ([v1 length])
  {
    if (AFResponseModeDeviceOrientationGetFromName_onceToken != -1) {
      dispatch_once(&AFResponseModeDeviceOrientationGetFromName_onceToken, &__block_literal_global_21024);
    }
    id v2 = [(id)AFResponseModeDeviceOrientationGetFromName_map objectForKey:v1];
    uint64_t v3 = [v2 integerValue];
  }
  else
  {
    uint64_t v3 = 0;
  }

  return v3;
}

void __AFResponseModeDeviceOrientationGetFromName_block_invoke()
{
  uint64_t v0 = (void *)AFResponseModeDeviceOrientationGetFromName_map;
  AFResponseModeDeviceOrientationGetFromName_map = (uint64_t)&unk_1EEE98BD0;
}

id AFDeviceContextServiceGetXPCInterface()
{
  uint64_t v0 = [MEMORY[0x1E4F29280] interfaceWithProtocol:&unk_1EEEE6D08];
  id v1 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v2 = objc_opt_class();
  uint64_t v3 = objc_opt_class();
  uint64_t v4 = objc_opt_class();
  uint64_t v5 = objc_opt_class();
  uint64_t v6 = objc_opt_class();
  uint64_t v7 = objc_msgSend(v1, "setWithObjects:", v2, v3, v4, v5, v6, objc_opt_class(), 0);
  [v0 setClasses:v7 forSelector:sel_donateSerializedContextMapByPrivacyClass_withMetadataMap_forType_pushToRemote_completion_ argumentIndex:0 ofReply:0];

  uint64_t v8 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v9 = objc_opt_class();
  uint64_t v10 = objc_opt_class();
  id v11 = objc_msgSend(v8, "setWithObjects:", v9, v10, objc_opt_class(), 0);
  [v0 setClasses:v11 forSelector:sel_donateSerializedContextMapByPrivacyClass_withMetadataMap_forType_pushToRemote_completion_ argumentIndex:1 ofReply:0];

  return v0;
}

uint64_t AFDeviceContextServiceDelegateGetXPCInterface()
{
  return [MEMORY[0x1E4F29280] interfaceWithProtocol:&unk_1EEECBE58];
}

void sub_19CFF4768(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__21271(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__21272(uint64_t a1)
{
}

id AFOpportuneSpeakingModelFeedbackPath()
{
  uint64_t v0 = AFUserSupportDirectoryPath();
  id v1 = [v0 stringByAppendingPathComponent:@"com.apple.siri.opportune_speaking.feedback.plist"];

  return v1;
}

id init_DKKnowledgeStore()
{
  if (init_DKKnowledgeStore_sOnce != -1) {
    dispatch_once(&init_DKKnowledgeStore_sOnce, &__block_literal_global_91);
  }
  uint64_t v0 = (void *)class_DKKnowledgeStore;
  return v0;
}

id _DKKnowledgeStoreFunction()
{
  return (id)class_DKKnowledgeStore;
}

__CFString *AFOpportuneSpeakingModelFeedbackGetDescription(unint64_t a1)
{
  if (a1 > 2) {
    return @"Unknown";
  }
  else {
    return off_1E59281F8[a1];
  }
}

__CFString *AFMetricsCategoryGetName(unint64_t a1)
{
  if (a1 > 8) {
    return 0;
  }
  else {
    return off_1E5928288[a1];
  }
}

void sub_19CFF90A8(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_19CFF9554(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_19CFFF4FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__22201(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__22202(uint64_t a1)
{
}

void sub_19CFFFC74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19D00C0C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19D00CC58(_Unwind_Exception *a1)
{
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 72));
  _Unwind_Resume(a1);
}

void sub_19D00E034(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 152), 8);
  _Unwind_Resume(a1);
}

id AFCreateDirectoryWithPath(void *a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = [MEMORY[0x1E4F28CB8] defaultManager];
  id v8 = 0;
  char v3 = [v2 createDirectoryAtPath:v1 withIntermediateDirectories:1 attributes:0 error:&v8];
  id v4 = v8;

  if (v3)
  {
    id v5 = v1;
  }
  else
  {
    uint64_t v6 = AFSiriLogContextUtility;
    if (os_log_type_enabled((os_log_t)AFSiriLogContextUtility, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      uint64_t v10 = "AFCreateDirectoryWithPath";
      __int16 v11 = 2112;
      id v12 = v1;
      __int16 v13 = 2112;
      id v14 = v4;
      _os_log_error_impl(&dword_19CF1D000, v6, OS_LOG_TYPE_ERROR, "%s Error creating directory %@ - %@", buf, 0x20u);
    }
    id v5 = 0;
  }

  return v5;
}

void AFAssetDownloadOptionsApplyForEmbeddedSpeechAssetDownload(void *a1)
{
  id v1 = a1;
  [v1 setAllowsCellularAccess:0];
  [v1 setDiscretionary:0];
}

id AFPNRFatalErrorInfoFromNSError(void *a1)
{
  if (a1)
  {
    id v1 = (objc_class *)MEMORY[0x1E4FA12E8];
    id v2 = a1;
    id v3 = objc_alloc_init(v1);
    id v4 = objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithInteger:", objc_msgSend(v2, "code"));
    id v5 = [v4 stringValue];
    [v3 setErrorCode:v5];

    uint64_t v6 = [v2 domain];

    [v3 setErrorDomain:v6];
  }
  else
  {
    id v3 = 0;
  }
  return v3;
}

void sub_19D010F08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__22876(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__22877(uint64_t a1)
{
}

void sub_19D0116E8(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

uint64_t AFUserNotificationAnnouncementSpeakingStateServiceGetXPCInterface()
{
  return [MEMORY[0x1E4F29280] interfaceWithProtocol:&unk_1EEEE6D68];
}

uint64_t AFUserNotificationAnnouncementSpeakingStateServiceDelegateGetXPCInterface()
{
  return [MEMORY[0x1E4F29280] interfaceWithProtocol:&unk_1EEEC33A0];
}

uint64_t AFShouldUseLanguageDetector(void *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    id v2 = +[AFPreferences sharedPreferences];
    int v3 = [v2 isLanguageDetectorEnabled];
    unsigned int v4 = [v2 isLanguageDetectorEnabledByServer];
    uint64_t v5 = v3 & v4;
    uint64_t v6 = AFSiriLogContextConnection;
    if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
    {
      int v9 = 136315906;
      uint64_t v10 = "AFShouldUseLanguageDetector";
      __int16 v11 = 1024;
      int v12 = v3 & v4;
      __int16 v13 = 1024;
      int v14 = v3;
      __int16 v15 = 1024;
      unsigned int v16 = v4;
      _os_log_impl(&dword_19CF1D000, v6, OS_LOG_TYPE_INFO, "%s Language detector enabled - %d (Client: %d, Server: %d)", (uint8_t *)&v9, 0x1Eu);
    }
  }
  else
  {
    uint64_t v7 = AFSiriLogContextConnection;
    if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_ERROR))
    {
      int v9 = 136315138;
      uint64_t v10 = "AFShouldUseLanguageDetector";
      _os_log_error_impl(&dword_19CF1D000, v7, OS_LOG_TYPE_ERROR, "%s Language detection user context is nil. Not using language detector", (uint8_t *)&v9, 0xCu);
    }
    uint64_t v5 = 0;
  }

  return v5;
}

id AFOverrideLanguageCode(void *a1, void *a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  uint64_t v5 = v4;
  if (!v4)
  {
LABEL_9:
    AFDictationLanguageForKeyboardLanguage(v3);
    id v8 = (id)objc_claimAutoreleasedReturnValue();
    int v9 = 0;
    goto LABEL_10;
  }
  int IsExplicitlySupportedForDictation = AFPreferencesLanguageIsExplicitlySupportedForDictation(v4);
  uint64_t v7 = AFSiriLogContextDaemon;
  if (!IsExplicitlySupportedForDictation)
  {
    if (os_log_type_enabled((os_log_t)AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      int v11 = 136315394;
      int v12 = "AFOverrideLanguageCode";
      __int16 v13 = 2114;
      int v14 = v5;
      _os_log_error_impl(&dword_19CF1D000, v7, OS_LOG_TYPE_ERROR, "%s Dictation override %{public}@ is not in our supported list.", (uint8_t *)&v11, 0x16u);
    }

    goto LABEL_9;
  }
  if (os_log_type_enabled((os_log_t)AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v11 = 136315650;
    int v12 = "AFOverrideLanguageCode";
    __int16 v13 = 2112;
    int v14 = v5;
    __int16 v15 = 2112;
    id v16 = v3;
    _os_log_impl(&dword_19CF1D000, v7, OS_LOG_TYPE_INFO, "%s Skipping dictation fallback code because override %@ has been set for keyboard %@", (uint8_t *)&v11, 0x20u);
  }
  id v8 = v5;
  int v9 = v8;
LABEL_10:

  return v8;
}

void sub_19D013FC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__23295(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__23296(uint64_t a1)
{
}

BOOL AFClockTimerStateGetIsValid(unint64_t a1)
{
  return a1 < 4;
}

BOOL AFClockTimerStateGetIsValidAndSpecified(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 3;
}

__CFString *AFClockTimerStateGetName(unint64_t a1)
{
  if (a1 > 3) {
    return @"(unknown)";
  }
  else {
    return off_1E59287B8[a1];
  }
}

uint64_t AFClockTimerStateGetFromName(void *a1)
{
  id v1 = a1;
  if ([v1 length])
  {
    if (AFClockTimerStateGetFromName_onceToken != -1) {
      dispatch_once(&AFClockTimerStateGetFromName_onceToken, &__block_literal_global_23369);
    }
    id v2 = [(id)AFClockTimerStateGetFromName_map objectForKey:v1];
    uint64_t v3 = [v2 integerValue];
  }
  else
  {
    uint64_t v3 = 0;
  }

  return v3;
}

void __AFClockTimerStateGetFromName_block_invoke()
{
  uint64_t v0 = (void *)AFClockTimerStateGetFromName_map;
  AFClockTimerStateGetFromName_map = (uint64_t)&unk_1EEE98BF8;
}

BOOL AFSiriDeactivationReasonGetIsValid(unint64_t a1)
{
  return a1 < 0x15;
}

BOOL AFSiriDeactivationReasonGetIsValidAndSpecified(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 0x14;
}

__CFString *AFSiriDeactivationReasonGetName(unint64_t a1)
{
  if (a1 > 0x14) {
    return @"(unknown)";
  }
  else {
    return off_1E59287D8[a1];
  }
}

uint64_t AFSiriDeactivationReasonGetFromName(void *a1)
{
  id v1 = a1;
  if ([v1 length])
  {
    if (AFSiriDeactivationReasonGetFromName_onceToken != -1) {
      dispatch_once(&AFSiriDeactivationReasonGetFromName_onceToken, &__block_literal_global_23452);
    }
    id v2 = [(id)AFSiriDeactivationReasonGetFromName_map objectForKey:v1];
    uint64_t v3 = [v2 integerValue];
  }
  else
  {
    uint64_t v3 = 0;
  }

  return v3;
}

void __AFSiriDeactivationReasonGetFromName_block_invoke()
{
  uint64_t v0 = (void *)AFSiriDeactivationReasonGetFromName_map;
  AFSiriDeactivationReasonGetFromName_map = (uint64_t)&unk_1EEE98C20;
}

id initCSActivationEvent()
{
  if (initCSActivationEvent_sOnce != -1) {
    dispatch_once(&initCSActivationEvent_sOnce, &__block_literal_global_61);
  }
  uint64_t v0 = (void *)classCSActivationEvent;
  return v0;
}

Class __initCSActivationEvent_block_invoke()
{
  CoreSpeechLibrary();
  Class result = objc_getClass("CSActivationEvent");
  classCSActivationEvent = (uint64_t)result;
  if (!result) {
    __assert_rtn("initCSActivationEvent_block_invoke", "AFSiriActivationHandlerCoreSpeechDaemon.m", 25, "classCSActivationEvent");
  }
  getCSActivationEventClass = CSActivationEventFunction;
  return result;
}

void CoreSpeechLibrary()
{
  if (!CoreSpeechLibrary_frameworkLibrary)
  {
    CoreSpeechLibrary_frameworkLibrary = (uint64_t)dlopen("/System/Library/PrivateFrameworks/CoreSpeech.framework/CoreSpeech", 2);
    if (!CoreSpeechLibrary_frameworkLibrary) {
      __assert_rtn("CoreSpeechLibrary", "AFSiriActivationHandlerCoreSpeechDaemon.m", 24, "frameworkLibrary");
    }
  }
}

id CSActivationEventFunction()
{
  return (id)classCSActivationEvent;
}

id initCSActivationEventNotifier()
{
  if (initCSActivationEventNotifier_sOnce != -1) {
    dispatch_once(&initCSActivationEventNotifier_sOnce, &__block_literal_global_23838);
  }
  uint64_t v0 = (void *)classCSActivationEventNotifier;
  return v0;
}

Class __initCSActivationEventNotifier_block_invoke()
{
  CoreSpeechLibrary();
  Class result = objc_getClass("CSActivationEventNotifier");
  classCSActivationEventNotifier = (uint64_t)result;
  if (!result) {
    __assert_rtn("initCSActivationEventNotifier_block_invoke", "AFSiriActivationHandlerCoreSpeechDaemon.m", 26, "classCSActivationEventNotifier");
  }
  getCSActivationEventNotifierClass = CSActivationEventNotifierFunction;
  return result;
}

id CSActivationEventNotifierFunction()
{
  return (id)classCSActivationEventNotifier;
}

id AFBTCarHeadunitsConnectedInLast24Hours()
{
  uint64_t v0 = +[AFEventStore sharedInstance];
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x3032000000;
  uint64_t v7 = __Block_byref_object_copy__23891;
  id v8 = __Block_byref_object_dispose__23892;
  id v9 = 0;
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 3221225472;
  v3[2] = __AFBTCarHeadunitsConnectedInLast24Hours_block_invoke;
  v3[3] = &unk_1E5928918;
  v3[4] = &v4;
  [v0 fetchHeadunitsConnectedInLast24HoursWithCompletionHandler:v3];
  id v1 = (id)v5[5];
  _Block_object_dispose(&v4, 8);

  return v1;
}

void sub_19D01718C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__23891(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__23892(uint64_t a1)
{
}

void __AFBTCarHeadunitsConnectedInLast24Hours_block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  id v6 = a2;
  id v7 = a3;
  if (v7)
  {
    id v8 = AFSiriLogContextEvent;
    if (os_log_type_enabled((os_log_t)AFSiriLogContextEvent, OS_LOG_TYPE_ERROR))
    {
      int v9 = 136315394;
      uint64_t v10 = "AFBTCarHeadunitsConnectedInLast24Hours_block_invoke";
      __int16 v11 = 2112;
      id v12 = v7;
      _os_log_error_impl(&dword_19CF1D000, v8, OS_LOG_TYPE_ERROR, "%s Error fetching BT events: %@", (uint8_t *)&v9, 0x16u);
    }
  }
  else
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), a2);
  }
}

__CFDictionary *AFCopyKeychainBaseQueryDictionary(__CFString *a1, void *a2)
{
  uint64_t v4 = @"Siri Global";
  if (a1) {
    uint64_t v4 = a1;
  }
  uint64_t v5 = v4;
  id v6 = a2;
  id v7 = a1;
  Mutable = CFDictionaryCreateMutable(0, 0, 0, 0);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F3B978], (const void *)*MEMORY[0x1E4F3B988]);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F3B550], @"com.apple.assistant");
  int v9 = (const void *)*MEMORY[0x1E4F3B5C0];
  uint64_t v10 = (const void *)[(__CFString *)v5 stringByAppendingFormat:@" - %@", v6];

  CFDictionarySetValue(Mutable, v9, v10);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F3B850], @"com.apple.assistant");

  return Mutable;
}

id AFKeychainValueForAccountAndKey(void *a1, void *a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1;
  id v4 = a2;
  if (v3)
  {
    Dictionary = AFCopyKeychainBaseQueryDictionary(v3, v4);
    CFDictionarySetValue(Dictionary, (const void *)*MEMORY[0x1E4F3BC70], (const void *)*MEMORY[0x1E4F1CFD0]);
    CFTypeRef result = 0;
    OSStatus v6 = SecItemCopyMatching(Dictionary, &result);
    if (Dictionary) {
      CFRelease(Dictionary);
    }
    if (v6 != -25300 && v6)
    {
      id v8 = AFSiriLogContextDaemon;
      if (os_log_type_enabled((os_log_t)AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315906;
        id v12 = "AFKeychainValueForAccountAndKey";
        __int16 v13 = 2112;
        id v14 = v4;
        __int16 v15 = 2112;
        id v16 = v3;
        __int16 v17 = 1026;
        OSStatus v18 = v6;
        _os_log_error_impl(&dword_19CF1D000, v8, OS_LOG_TYPE_ERROR, "%s Couldn't find keychain value %@ for account %@ %{public}d", buf, 0x26u);
      }
      id v7 = 0;
    }
    else
    {
      id v7 = (void *)[(id)result copy];
    }
    if (result) {
      CFRelease(result);
    }
  }
  else
  {
    id v7 = 0;
  }

  return v7;
}

BOOL AFKeychainRemoveValueForAccountAndKey(void *a1, void *a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1;
  id v4 = a2;
  if (v3)
  {
    Dictionary = AFCopyKeychainBaseQueryDictionary(v3, v4);
    OSStatus v6 = SecItemDelete(Dictionary);
    if (Dictionary) {
      CFRelease(Dictionary);
    }
    BOOL v7 = v6 == -25300 || v6 == 0;
    if (v6 != -25300)
    {
      if (v6)
      {
        id v8 = AFSiriLogContextDaemon;
        if (os_log_type_enabled((os_log_t)AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
        {
          int v10 = 136315906;
          __int16 v11 = "AFKeychainRemoveValueForAccountAndKey";
          __int16 v12 = 2112;
          id v13 = v4;
          __int16 v14 = 2112;
          __int16 v15 = v3;
          __int16 v16 = 1026;
          OSStatus v17 = v6;
          _os_log_error_impl(&dword_19CF1D000, v8, OS_LOG_TYPE_ERROR, "%s Couldn't delete value %@ from keychain for account %@ %{public}d", (uint8_t *)&v10, 0x26u);
        }
      }
    }
  }
  else
  {
    BOOL v7 = 0;
  }

  return v7;
}

BOOL AFKeychainSetValueForAccountAndKey(void *a1, void *a2, void *a3)
{
  keys[2] = *(void **)MEMORY[0x1E4F143B8];
  id v5 = a1;
  OSStatus v6 = a2;
  id v7 = a3;
  if (v5)
  {
    Dictionary = AFCopyKeychainBaseQueryDictionary(v6, v7);
    int v9 = (const void *)*MEMORY[0x1E4F3BD38];
    int v10 = (void *)*MEMORY[0x1E4F3B558];
    keys[0] = *(void **)MEMORY[0x1E4F3BD38];
    keys[1] = v10;
    __int16 v11 = (void *)*MEMORY[0x1E4F3B598];
    values[0] = v5;
    values[1] = v11;
    CFDictionaryRef v12 = CFDictionaryCreate(0, (const void **)keys, (const void **)values, 2, 0, 0);
    OSStatus v13 = SecItemUpdate(Dictionary, v12);
    if (v13 == -25300)
    {
      CFDictionarySetValue(Dictionary, v9, v5);
      CFDictionarySetValue(Dictionary, v10, v11);
      OSStatus v13 = SecItemAdd(Dictionary, 0);
    }
    if (Dictionary) {
      CFRelease(Dictionary);
    }
    if (v12) {
      CFRelease(v12);
    }
    BOOL v14 = v13 == -25300 || v13 == 0;
    if (v13 != -25300)
    {
      if (v13)
      {
        __int16 v15 = AFSiriLogContextDaemon;
        if (os_log_type_enabled((os_log_t)AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
        {
          int v17 = 136315906;
          uint64_t v18 = "AFKeychainSetValueForAccountAndKey";
          __int16 v19 = 2112;
          id v20 = v7;
          __int16 v21 = 2112;
          double v22 = v6;
          __int16 v23 = 1026;
          OSStatus v24 = v13;
          _os_log_error_impl(&dword_19CF1D000, v15, OS_LOG_TYPE_ERROR, "%s Couldn't update value %@ from keychain for account %@ %{public}d", (uint8_t *)&v17, 0x26u);
        }
      }
    }
  }
  else
  {
    BOOL v14 = AFKeychainRemoveValueForAccountAndKey(v6, v7);
  }

  return v14;
}

uint64_t AFCallStateValidate(char a1)
{
  return a1 & 0xF;
}

id AFCallStateGetNames(uint64_t a1)
{
  if (a1)
  {
    char v1 = a1;
    id v2 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
    uint64_t v3 = v2;
    if (v1)
    {
      [v2 addObject:@"active"];
      if ((v1 & 2) == 0)
      {
LABEL_4:
        if ((v1 & 4) == 0) {
          goto LABEL_5;
        }
        goto LABEL_14;
      }
    }
    else if ((v1 & 2) == 0)
    {
      goto LABEL_4;
    }
    [v3 addObject:@"sending"];
    if ((v1 & 4) == 0)
    {
LABEL_5:
      if ((v1 & 8) == 0)
      {
LABEL_7:
        id v4 = (void *)[v3 copy];

        goto LABEL_9;
      }
LABEL_6:
      [v3 addObject:@"disconnecting"];
      goto LABEL_7;
    }
LABEL_14:
    [v3 addObject:@"ringing"];
    if ((v1 & 8) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  id v4 = &unk_1EEE99670;
LABEL_9:
  return v4;
}

uint64_t AFCallStateGetFromNames(void *a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if ([v1 count])
  {
    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v12 = v1;
    id v2 = v1;
    uint64_t v3 = [v2 countByEnumeratingWithState:&v13 objects:v17 count:16];
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = 0;
      uint64_t v6 = *(void *)v14;
      do
      {
        uint64_t v7 = 0;
        do
        {
          if (*(void *)v14 != v6) {
            objc_enumerationMutation(v2);
          }
          id v8 = *(id *)(*((void *)&v13 + 1) + 8 * v7);
          if ([v8 length])
          {
            if (_AFCallStateGetFromName_onceToken != -1) {
              dispatch_once(&_AFCallStateGetFromName_onceToken, &__block_literal_global_24020);
            }
            int v9 = [(id)_AFCallStateGetFromName_map objectForKey:v8];
            uint64_t v10 = [v9 unsignedIntegerValue];
          }
          else
          {
            uint64_t v10 = 0;
          }

          v5 |= v10;
          ++v7;
        }
        while (v4 != v7);
        uint64_t v4 = [v2 countByEnumeratingWithState:&v13 objects:v17 count:16];
      }
      while (v4);
    }
    else
    {
      uint64_t v5 = 0;
    }

    id v1 = v12;
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

BOOL AFInterstitialPhaseGetIsValid(unint64_t a1)
{
  return a1 < 5;
}

BOOL AFInterstitialPhaseGetIsValidAndSpecified(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 4;
}

__CFString *AFInterstitialPhaseGetName(unint64_t a1)
{
  if (a1 > 4) {
    return @"(unknown)";
  }
  else {
    return off_1E5928BD8[a1];
  }
}

uint64_t AFInterstitialPhaseGetFromName(void *a1)
{
  id v1 = a1;
  if ([v1 length])
  {
    if (AFInterstitialPhaseGetFromName_onceToken != -1) {
      dispatch_once(&AFInterstitialPhaseGetFromName_onceToken, &__block_literal_global_25372);
    }
    id v2 = [(id)AFInterstitialPhaseGetFromName_map objectForKey:v1];
    uint64_t v3 = [v2 integerValue];
  }
  else
  {
    uint64_t v3 = 0;
  }

  return v3;
}

void __AFInterstitialPhaseGetFromName_block_invoke()
{
  uint64_t v0 = (void *)AFInterstitialPhaseGetFromName_map;
  AFInterstitialPhaseGetFromName_map = (uint64_t)&unk_1EEE98C70;
}

AFNotifyStatePublisher *AFElectionBeginNotifyStatePublisher(void *a1, void *a2)
{
  return publisherWithNotificationName((uint64_t)"com.apple.siri.myriad.decision.begin", a1, a2);
}

AFNotifyStatePublisher *publisherWithNotificationName(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = getEffectiveNotificationName(a1, a2);
  uint64_t v7 = [[AFNotifyStatePublisher alloc] initWithName:v6 queue:v5];

  return v7;
}

id getEffectiveNotificationName(uint64_t a1, void *a2)
{
  uint64_t v3 = NSString;
  id v4 = a2;
  id v5 = [v3 stringWithCString:a1 encoding:4];
  AFNotifyGetEffectiveNotificationName(v5, v4);
  objc_claimAutoreleasedReturnValue();

  return v5;
}

AFNotifyStatePublisher *AFElectionWinNotifyStatePublisher(void *a1, void *a2)
{
  return publisherWithNotificationName((uint64_t)"com.apple.siri.myriad.decision.won", a1, a2);
}

AFNotifyStatePublisher *AFElectionLossNotifyStatePublisher(void *a1, void *a2)
{
  return publisherWithNotificationName((uint64_t)"com.apple.siri.myriad.decision.lost", a1, a2);
}

AFNotifyStatePublisher *AFElectionRepostWinDecisionNotifyStatePublisher(void *a1, void *a2)
{
  return publisherWithNotificationName((uint64_t)"com.apple.siri.myriad.repost.decision.won", a1, a2);
}

AFNotifyStatePublisher *AFMyriadPreferencesChangedNotifyStatePublisher(void *a1, void *a2)
{
  return publisherWithNotificationName((uint64_t)"com.apple.siri.myriad.readdefaults", a1, a2);
}

id AFMyriadForceNoActivityNotifyStatePublisher(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1;
  id v5 = publisherWithNotificationName([@"com.apple.siri.myriad.force.noactivity.state" UTF8String], v4, v3);

  return v5;
}

AFNotifyObserver *AFElectionBeginNotifyStateObserver(void *a1, uint64_t a2, void *a3, void *a4)
{
  return observerWithNotificationName((uint64_t)"com.apple.siri.myriad.decision.begin", a1, a2, a3, a4);
}

AFNotifyObserver *observerWithNotificationName(uint64_t a1, void *a2, uint64_t a3, void *a4, void *a5)
{
  id v9 = a5;
  id v10 = a4;
  __int16 v11 = getEffectiveNotificationName(a1, a2);
  id v12 = [[AFNotifyObserver alloc] initWithName:v11 options:a3 queue:v9 delegate:v10];

  return v12;
}

AFNotifyObserver *AFElectionWinNotifyStateObserver(void *a1, uint64_t a2, void *a3, void *a4)
{
  return observerWithNotificationName((uint64_t)"com.apple.siri.myriad.decision.won", a1, a2, a3, a4);
}

AFNotifyObserver *AFElectionLossNotifyStateObserver(void *a1, uint64_t a2, void *a3, void *a4)
{
  return observerWithNotificationName((uint64_t)"com.apple.siri.myriad.decision.lost", a1, a2, a3, a4);
}

AFNotifyObserver *AFElectionDecisionRequestNotifyStateObserver(void *a1, uint64_t a2, void *a3, void *a4)
{
  return observerWithNotificationName((uint64_t)"com.apple.siri.myriad.get.decision", a1, a2, a3, a4);
}

AFNotifyObserver *AFElectionRepostWinDecisionNotifyStateObserver(void *a1, uint64_t a2, void *a3, void *a4)
{
  return observerWithNotificationName((uint64_t)"com.apple.siri.myriad.repost.decision.won", a1, a2, a3, a4);
}

AFNotifyObserver *AFMyriadPreferencesChangedNotifyStateObserver(void *a1, uint64_t a2, void *a3, void *a4)
{
  return observerWithNotificationName((uint64_t)"com.apple.siri.myriad.readdefaults", a1, a2, a3, a4);
}

id AFMyriadForceNoActivityNotifyStateObserver(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v7 = a4;
  id v8 = a3;
  id v9 = a1;
  id v10 = observerWithNotificationName([@"com.apple.siri.myriad.force.noactivity.state" UTF8String], v9, a2, v8, v7);

  return v10;
}

id AFMyriadReadDefaultsNotificationName(void *a1)
{
  return getEffectiveNotificationName((uint64_t)"com.apple.siri.myriad.readdefaults", a1);
}

BOOL AFResponseModeVoiceFeedbackGetIsValid(unint64_t a1)
{
  return a1 < 4;
}

BOOL AFResponseModeVoiceFeedbackGetIsValidAndSpecified(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 3;
}

__CFString *AFResponseModeVoiceFeedbackGetName(unint64_t a1)
{
  if (a1 > 3) {
    return @"(unknown)";
  }
  else {
    return off_1E5928C68[a1];
  }
}

uint64_t AFResponseModeVoiceFeedbackGetFromName(void *a1)
{
  id v1 = a1;
  if ([v1 length])
  {
    if (AFResponseModeVoiceFeedbackGetFromName_onceToken != -1) {
      dispatch_once(&AFResponseModeVoiceFeedbackGetFromName_onceToken, &__block_literal_global_26124);
    }
    id v2 = [(id)AFResponseModeVoiceFeedbackGetFromName_map objectForKey:v1];
    uint64_t v3 = [v2 integerValue];
  }
  else
  {
    uint64_t v3 = 0;
  }

  return v3;
}

void __AFResponseModeVoiceFeedbackGetFromName_block_invoke()
{
  uint64_t v0 = (void *)AFResponseModeVoiceFeedbackGetFromName_map;
  AFResponseModeVoiceFeedbackGetFromName_map = (uint64_t)&unk_1EEE98C98;
}

BOOL AFMyriadGoodnessScoreOverrideOptionGetIsValid(unint64_t a1)
{
  return a1 < 3;
}

BOOL AFMyriadGoodnessScoreOverrideOptionGetIsValidAndSpecified(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 2;
}

__CFString *AFMyriadGoodnessScoreOverrideOptionGetName(unint64_t a1)
{
  if (a1 > 2) {
    return @"(unknown)";
  }
  else {
    return off_1E5928C88[a1];
  }
}

uint64_t AFMyriadGoodnessScoreOverrideOptionGetFromName(void *a1)
{
  id v1 = a1;
  if ([v1 length])
  {
    if (AFMyriadGoodnessScoreOverrideOptionGetFromName_onceToken != -1) {
      dispatch_once(&AFMyriadGoodnessScoreOverrideOptionGetFromName_onceToken, &__block_literal_global_26151);
    }
    id v2 = [(id)AFMyriadGoodnessScoreOverrideOptionGetFromName_map objectForKey:v1];
    uint64_t v3 = [v2 integerValue];
  }
  else
  {
    uint64_t v3 = 0;
  }

  return v3;
}

void __AFMyriadGoodnessScoreOverrideOptionGetFromName_block_invoke()
{
  uint64_t v0 = (void *)AFMyriadGoodnessScoreOverrideOptionGetFromName_map;
  AFMyriadGoodnessScoreOverrideOptionGetFromName_map = (uint64_t)&unk_1EEE98CC0;
}

uint64_t AFAnalyticsObservationServiceGetXPCInterface()
{
  return [MEMORY[0x1E4F29280] interfaceWithProtocol:&unk_1EEEE6DC8];
}

uint64_t AFAudioPlaybackOptionsValidate(char a1)
{
  return a1 & 7;
}

id AFAudioPlaybackOptionsGetNames(uint64_t a1)
{
  if (a1)
  {
    char v1 = a1;
    id v2 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
    uint64_t v3 = v2;
    if (v1)
    {
      [v2 addObject:@"reusesRecycled"];
      if ((v1 & 2) == 0)
      {
LABEL_4:
        if ((v1 & 4) == 0)
        {
LABEL_6:
          id v4 = (void *)[v3 copy];

          goto LABEL_8;
        }
LABEL_5:
        [v3 addObject:@"forcesAirPlay"];
        goto LABEL_6;
      }
    }
    else if ((v1 & 2) == 0)
    {
      goto LABEL_4;
    }
    [v3 addObject:@"recyclesWhenDone"];
    if ((v1 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  id v4 = (void *)MEMORY[0x1E4F1CBF0];
LABEL_8:
  return v4;
}

uint64_t AFAudioPlaybackOptionsGetFromNames(void *a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if ([v1 count])
  {
    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v12 = v1;
    id v2 = v1;
    uint64_t v3 = [v2 countByEnumeratingWithState:&v13 objects:v17 count:16];
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = 0;
      uint64_t v6 = *(void *)v14;
      do
      {
        uint64_t v7 = 0;
        do
        {
          if (*(void *)v14 != v6) {
            objc_enumerationMutation(v2);
          }
          id v8 = *(id *)(*((void *)&v13 + 1) + 8 * v7);
          if ([v8 length])
          {
            if (_AFAudioPlaybackOptionsGetFromName_onceToken != -1) {
              dispatch_once(&_AFAudioPlaybackOptionsGetFromName_onceToken, &__block_literal_global_26614);
            }
            id v9 = [(id)_AFAudioPlaybackOptionsGetFromName_map objectForKey:v8];
            uint64_t v10 = [v9 unsignedIntegerValue];
          }
          else
          {
            uint64_t v10 = 0;
          }

          v5 |= v10;
          ++v7;
        }
        while (v4 != v7);
        uint64_t v4 = [v2 countByEnumeratingWithState:&v13 objects:v17 count:16];
      }
      while (v4);
    }
    else
    {
      uint64_t v5 = 0;
    }

    id v1 = v12;
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

BOOL SISchemaClientTurnBasedEventReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 2) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        int v17 = objc_alloc_init(SISchemaClientTurnContext);
        objc_storeStrong((id *)(a1 + 16), v17);
        if (!PBReaderPlaceMark() || (SISchemaClientTurnContextReadFrom((uint64_t)v17, a2) & 1) == 0) {
          goto LABEL_30;
        }
LABEL_25:
        PBReaderRecallMark();

        goto LABEL_27;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_27:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    int v17 = objc_alloc_init(SISchemaClientAnyEvent);
    objc_storeStrong((id *)(a1 + 8), v17);
    if (!PBReaderPlaceMark() || (SISchemaClientAnyEventReadFrom((uint64_t)v17, a2) & 1) == 0)
    {
LABEL_30:

      return 0;
    }
    goto LABEL_25;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void AFSiriActivationVoiceActivityDetected(uint64_t a1, unint64_t a2, void *a3, void *a4, void *a5)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  id v9 = a3;
  id v10 = a4;
  id v11 = a5;
  unint64_t v12 = (void *)AFSiriLogContextConnection;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
  {
    char v13 = v12;
    if (a2 > 0xF) {
      long long v14 = @"(unknown)";
    }
    else {
      long long v14 = off_1E5924E08[a2];
    }
    int v15 = v14;
    *(_DWORD *)buf = 136316162;
    id v25 = "AFSiriActivationVoiceActivityDetected";
    __int16 v26 = 2048;
    uint64_t v27 = a1;
    __int16 v28 = 2112;
    uint64_t v29 = v15;
    __int16 v30 = 2112;
    id v31 = v9;
    __int16 v32 = 2112;
    id v33 = v10;
    _os_log_impl(&dword_19CF1D000, v13, OS_LOG_TYPE_INFO, "%s timestamp = %llu, source = %@, deviceID = %@, context = %@", buf, 0x34u);
  }
  v19[0] = MEMORY[0x1E4F143A8];
  v19[1] = 3221225472;
  v19[2] = __AFSiriActivationVoiceActivityDetected_block_invoke;
  v19[3] = &unk_1E5928D60;
  uint64_t v22 = a1;
  unint64_t v23 = a2;
  id v20 = v9;
  id v21 = v10;
  id v16 = v10;
  id v17 = v9;
  id v18 = +[AFSiriActivationContext newWithBuilder:v19];
  AFSiriActivationPerform(v18, 0, v11);
}

void __AFSiriActivationVoiceActivityDetected_block_invoke(void *a1, void *a2)
{
  uint64_t v3 = a1[6];
  id v4 = a2;
  [v4 setTimestamp:v3];
  [v4 setSource:a1[7]];
  [v4 setEvent:3];
  [v4 setDeviceID:a1[4]];
  [v4 setUserInfo:a1[5]];
}

void AFSiriActivationPerform(void *a1, void *a2, void *a3)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  id v6 = a2;
  id v38 = a3;
  uint64_t v7 = AFSiriLogContextConnection;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    long long v46 = "AFSiriActivationPerform";
    __int16 v47 = 2112;
    id v48 = v5;
    __int16 v49 = 2112;
    id v50 = v6;
    _os_log_impl(&dword_19CF1D000, v7, OS_LOG_TYPE_INFO, "%s context = %@, instanceContext = %@", buf, 0x20u);
  }
  char v8 = (void *)[objc_alloc(MEMORY[0x1E4F1CA80]) initWithCapacity:2];
  id v9 = AFSiriActivationGetDarwinNotificationNameFromContext(v5, 0);
  [v8 addObject:v9];

  long long v39 = v5;
  id v10 = AFSiriActivationGetDarwinNotificationNameFromContext(v5, 1);
  [v8 addObject:v10];

  long long v42 = 0u;
  long long v43 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  id v11 = v8;
  uint64_t v12 = [v11 countByEnumeratingWithState:&v40 objects:v44 count:16];
  if (v12)
  {
    uint64_t v13 = v12;
    uint64_t v14 = *(void *)v41;
    do
    {
      for (uint64_t i = 0; i != v13; ++i)
      {
        if (*(void *)v41 != v14) {
          objc_enumerationMutation(v11);
        }
        id v16 = *(void **)(*((void *)&v40 + 1) + 8 * i);
        id v17 = AFSiriLogContextConnection;
        if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136315394;
          long long v46 = "AFSiriActivationPerform";
          __int16 v47 = 2112;
          id v48 = v16;
          _os_log_debug_impl(&dword_19CF1D000, v17, OS_LOG_TYPE_DEBUG, "%s Post darwin notification %@", buf, 0x16u);
        }
        notify_post((const char *)[v16 UTF8String]);
      }
      uint64_t v13 = [v11 countByEnumeratingWithState:&v40 objects:v44 count:16];
    }
    while (v13);
  }

  if (AFSiriActivationValidate(v39))
  {
    id v18 = v39;
    __int16 v19 = AFSiriLogContextConnection;
    if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315394;
      long long v46 = "_AFSiriActivationGetHandler";
      __int16 v47 = 2048;
      id v48 = v18;
      _os_log_impl(&dword_19CF1D000, v19, OS_LOG_TYPE_INFO, "%s context = %p", buf, 0x16u);
    }
    uint64_t v20 = [v18 source];
    uint64_t v21 = [v18 event] + (v20 << 16);
    os_unfair_lock_lock((os_unfair_lock_t)&s_overrideHandlerMapLock);
    uint64_t v22 = (void *)s_overrideHandlerMap;
    if (!s_overrideHandlerMap)
    {
      if (!s_overrideHandlerMapProvider)
      {
        id v25 = 0;
LABEL_19:
        os_unfair_lock_unlock((os_unfair_lock_t)&s_overrideHandlerMapLock);
        __int16 v26 = [MEMORY[0x1E4F28ED0] numberWithUnsignedInteger:v21];
        id v27 = [v25 objectForKey:v26];

        if (v27)
        {
          __int16 v28 = AFSiriLogContextConnection;
          if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 136315394;
            long long v46 = "_AFSiriActivationGetHandler";
            __int16 v47 = 2112;
            id v48 = v27;
            _os_log_impl(&dword_19CF1D000, v28, OS_LOG_TYPE_INFO, "%s handler = %@ (override)", buf, 0x16u);
          }
          uint64_t v29 = (void (**)(void, void))v38;
        }
        else
        {
          if (_AFSiriActivationGetDefaultHandler_onceToken != -1) {
            dispatch_once(&_AFSiriActivationGetDefaultHandler_onceToken, &__block_literal_global_85_26786);
          }
          id v33 = (void *)_AFSiriActivationGetDefaultHandler_handlerMap;
          uint64_t v34 = [MEMORY[0x1E4F28ED0] numberWithUnsignedInteger:v21];
          id v27 = [v33 objectForKey:v34];

          unint64_t v35 = AFSiriLogContextConnection;
          if (!v27)
          {
            uint64_t v29 = (void (**)(void, void))v38;
            if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315138;
              long long v46 = "_AFSiriActivationGetHandler";
              _os_log_error_impl(&dword_19CF1D000, v35, OS_LOG_TYPE_ERROR, "%s No handler can be found.", buf, 0xCu);
            }

            long long v36 = AFSiriLogContextConnection;
            if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315394;
              long long v46 = "AFSiriActivationPerform";
              __int16 v47 = 2112;
              id v48 = v18;
              _os_log_error_impl(&dword_19CF1D000, v36, OS_LOG_TYPE_ERROR, "%s No handler for context %@.", buf, 0x16u);
            }
            id v27 = 0;
            if (!v38) {
              goto LABEL_43;
            }
            id v31 = &__block_literal_global_45;
            goto LABEL_42;
          }
          uint64_t v29 = (void (**)(void, void))v38;
          if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 136315394;
            long long v46 = "_AFSiriActivationGetHandler";
            __int16 v47 = 2112;
            id v48 = v27;
            _os_log_impl(&dword_19CF1D000, v35, OS_LOG_TYPE_INFO, "%s handler = %@ (default)", buf, 0x16u);
          }
        }

        if (([v27 handleContext:v18 completion:v29] & 1) == 0)
        {
          __int16 v30 = AFSiriLogContextConnection;
          if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315650;
            long long v46 = "AFSiriActivationPerform";
            __int16 v47 = 2112;
            id v48 = v18;
            __int16 v49 = 2112;
            id v50 = v27;
            _os_log_error_impl(&dword_19CF1D000, v30, OS_LOG_TYPE_ERROR, "%s Context %@ rejected by handler %@.", buf, 0x20u);
            if (!v29) {
              goto LABEL_43;
            }
            goto LABEL_26;
          }
          if (v29)
          {
LABEL_26:
            id v31 = &__block_literal_global_48_26791;
LABEL_42:
            id v37 = +[AFSiriActivationResult newWithBuilder:v31];
            ((void (**)(void, id))v29)[2](v29, v37);
          }
        }
LABEL_43:

        goto LABEL_44;
      }
      uint64_t v23 = (*(void (**)(void))(s_overrideHandlerMapProvider + 16))();
      OSStatus v24 = (void *)s_overrideHandlerMap;
      s_overrideHandlerMap = v23;

      uint64_t v22 = (void *)s_overrideHandlerMap;
    }
    id v25 = v22;
    goto LABEL_19;
  }
  __int16 v32 = AFSiriLogContextConnection;
  uint64_t v29 = (void (**)(void, void))v38;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315394;
    long long v46 = "AFSiriActivationPerform";
    __int16 v47 = 2112;
    id v48 = v39;
    _os_log_error_impl(&dword_19CF1D000, v32, OS_LOG_TYPE_ERROR, "%s Invalid context %@.", buf, 0x16u);
    if (!v38) {
      goto LABEL_44;
    }
    goto LABEL_29;
  }
  if (v38)
  {
LABEL_29:
    id v27 = +[AFSiriActivationResult newWithBuilder:&__block_literal_global_26783];
    (*((void (**)(id, id))v38 + 2))(v38, v27);
    goto LABEL_43;
  }
LABEL_44:
}

id AFSiriActivationGetDarwinNotificationNameFromContext(void *a1, int a2)
{
  id v3 = a1;
  id v4 = [NSString alloc];
  unint64_t v5 = [v3 source];
  if (v5 > 0xF) {
    id v6 = @"(unknown)";
  }
  else {
    id v6 = off_1E5924E08[v5];
  }
  uint64_t v7 = v6;
  unint64_t v8 = [v3 event];
  if (v8 > 0x17) {
    id v9 = @"(unknown)";
  }
  else {
    id v9 = off_1E592B890[v8];
  }
  id v10 = v9;
  id v11 = (void *)[v4 initWithFormat:@"com.apple.siri.activation.%@-%@", v7, v10];

  uint64_t v12 = AFSiriActivationOptionsGetNames([v3 options]);
  uint64_t v13 = [v12 componentsJoinedByString:@"-"];

  if ([v13 length])
  {
    uint64_t v14 = [[NSString alloc] initWithFormat:@"%@-%@", v11, v13];

    id v11 = (void *)v14;
  }
  if (a2)
  {
    int v15 = [v3 deviceID];
    if ([v15 length])
    {
      uint64_t v16 = [[NSString alloc] initWithFormat:@"%@.%@", v11, v15];

      id v11 = (void *)v16;
    }
  }
  return v11;
}

uint64_t AFSiriActivationValidate(void *a1)
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  id v2 = AFSiriLogContextUtility;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextUtility, OS_LOG_TYPE_INFO))
  {
    int v49 = 136315394;
    id v50 = "AFSiriActivationValidate";
    __int16 v51 = 2048;
    id v52 = v1;
    _os_log_impl(&dword_19CF1D000, v2, OS_LOG_TYPE_INFO, "%s Validating Siri activation context %p...", (uint8_t *)&v49, 0x16u);
  }
  unint64_t v3 = [v1 event];
  unint64_t v4 = [v1 source];
  switch(v4)
  {
    case 1uLL:
      if (v3 <= 0x10 && ((1 << v3) & 0x1841C) != 0) {
        goto LABEL_6;
      }
      id v11 = (void *)AFSiriLogContextUtility;
      if (!os_log_type_enabled((os_log_t)AFSiriLogContextUtility, OS_LOG_TYPE_ERROR)) {
        goto LABEL_85;
      }
      unint64_t v8 = v11;
      uint64_t v12 = @"builtInMicrophone";
      uint64_t v13 = @"builtInMicrophone";
      if (v3 > 0x17) {
        uint64_t v14 = @"(unknown)";
      }
      else {
        uint64_t v14 = off_1E592B890[v3];
      }
      long long v46 = v14;
      int v49 = 136315906;
      id v50 = "AFSiriActivationValidate";
      __int16 v51 = 2112;
      id v52 = v1;
      __int16 v53 = 2112;
      __int16 v54 = @"builtInMicrophone";
      __int16 v55 = 2112;
      uint64_t v56 = v46;
      goto LABEL_83;
    case 2uLL:
      if (v3 <= 0x10 && ((1 << v3) & 0x10380) != 0) {
        goto LABEL_6;
      }
      int v15 = (void *)AFSiriLogContextUtility;
      if (!os_log_type_enabled((os_log_t)AFSiriLogContextUtility, OS_LOG_TYPE_ERROR)) {
        goto LABEL_85;
      }
      unint64_t v8 = v15;
      uint64_t v12 = @"builtInDigitizer";
      uint64_t v16 = @"builtInDigitizer";
      if (v3 > 0x17) {
        id v17 = @"(unknown)";
      }
      else {
        id v17 = off_1E592B890[v3];
      }
      long long v46 = v17;
      int v49 = 136315906;
      id v50 = "AFSiriActivationValidate";
      __int16 v51 = 2112;
      id v52 = v1;
      __int16 v53 = 2112;
      __int16 v54 = @"builtInDigitizer";
      __int16 v55 = 2112;
      uint64_t v56 = v46;
      goto LABEL_83;
    case 3uLL:
      if (v3 == 5 || v3 == 16) {
        goto LABEL_6;
      }
      id v18 = (void *)AFSiriLogContextUtility;
      if (!os_log_type_enabled((os_log_t)AFSiriLogContextUtility, OS_LOG_TYPE_ERROR)) {
        goto LABEL_85;
      }
      unint64_t v8 = v18;
      uint64_t v12 = @"accelerometer";
      __int16 v19 = @"accelerometer";
      if (v3 > 0x17) {
        uint64_t v20 = @"(unknown)";
      }
      else {
        uint64_t v20 = off_1E592B890[v3];
      }
      long long v46 = v20;
      int v49 = 136315906;
      id v50 = "AFSiriActivationValidate";
      __int16 v51 = 2112;
      id v52 = v1;
      __int16 v53 = 2112;
      __int16 v54 = @"accelerometer";
      __int16 v55 = 2112;
      uint64_t v56 = v46;
      goto LABEL_83;
    case 4uLL:
      if (v3 == 10) {
        goto LABEL_6;
      }
      uint64_t v21 = [v1 deviceID];

      if (!v21)
      {
        long long v43 = (void *)AFSiriLogContextUtility;
        if (!os_log_type_enabled((os_log_t)AFSiriLogContextUtility, OS_LOG_TYPE_ERROR)) {
          goto LABEL_85;
        }
        unint64_t v8 = v43;
        id v9 = @"bluetoothDevice";
        long long v44 = @"bluetoothDevice";
        int v49 = 136315650;
        id v50 = "AFSiriActivationValidate";
        __int16 v51 = 2112;
        id v52 = v1;
        __int16 v53 = 2112;
        __int16 v54 = @"bluetoothDevice";
        long long v42 = "%s Siri activation context %@ is invalid, because source '%@' requires a non-nil device ID.";
        goto LABEL_65;
      }
      if (v3 <= 0x14 && ((1 << v3) & 0x11985E) != 0) {
        goto LABEL_6;
      }
      uint64_t v22 = (void *)AFSiriLogContextUtility;
      if (!os_log_type_enabled((os_log_t)AFSiriLogContextUtility, OS_LOG_TYPE_ERROR)) {
        goto LABEL_85;
      }
      unint64_t v8 = v22;
      uint64_t v12 = @"bluetoothDevice";
      uint64_t v23 = @"bluetoothDevice";
      if (v3 > 0x17) {
        OSStatus v24 = @"(unknown)";
      }
      else {
        OSStatus v24 = off_1E592B890[v3];
      }
      long long v46 = v24;
      int v49 = 136315906;
      id v50 = "AFSiriActivationValidate";
      __int16 v51 = 2112;
      id v52 = v1;
      __int16 v53 = 2112;
      __int16 v54 = @"bluetoothDevice";
      __int16 v55 = 2112;
      uint64_t v56 = v46;
      goto LABEL_83;
    case 5uLL:
      id v25 = [v1 deviceID];

      if (!v25)
      {
        long long v40 = (void *)AFSiriLogContextUtility;
        if (os_log_type_enabled((os_log_t)AFSiriLogContextUtility, OS_LOG_TYPE_ERROR))
        {
          unint64_t v8 = v40;
          id v9 = @"carPlayDevice";
          long long v41 = @"carPlayDevice";
          int v49 = 136315650;
          id v50 = "AFSiriActivationValidate";
          __int16 v51 = 2112;
          id v52 = v1;
          __int16 v53 = 2112;
          __int16 v54 = @"carPlayDevice";
          long long v42 = "%s Siri activation context %@ is invalid, because source '%@' requires a non-nil device ID.";
LABEL_65:
          _os_log_error_impl(&dword_19CF1D000, v8, OS_LOG_TYPE_ERROR, v42, (uint8_t *)&v49, 0x20u);
LABEL_66:

LABEL_84:
        }
LABEL_85:
        if (AFIsInternalInstall_onceToken != -1) {
          dispatch_once(&AFIsInternalInstall_onceToken, &__block_literal_global_158);
        }
        if (AFIsInternalInstall_isInternal && (v4 == 11 || v3 == 13))
        {
          id v48 = AFSiriLogContextUtility;
          uint64_t v6 = 1;
          if (os_log_type_enabled((os_log_t)AFSiriLogContextUtility, OS_LOG_TYPE_INFO))
          {
            int v49 = 136315394;
            id v50 = "AFSiriActivationValidate";
            __int16 v51 = 2112;
            id v52 = v1;
            _os_log_impl(&dword_19CF1D000, v48, OS_LOG_TYPE_INFO, "%s Siri activation context %@ is valid. (internal override)", (uint8_t *)&v49, 0x16u);
          }
        }
        else
        {
          uint64_t v6 = 0;
        }
        goto LABEL_91;
      }
      if (v3 > 0x15 || ((1 << v3) & 0x21801C) == 0)
      {
        __int16 v26 = (void *)AFSiriLogContextUtility;
        if (os_log_type_enabled((os_log_t)AFSiriLogContextUtility, OS_LOG_TYPE_ERROR))
        {
          unint64_t v8 = v26;
          uint64_t v12 = @"carPlayDevice";
          id v27 = @"carPlayDevice";
          if (v3 > 0x17) {
            __int16 v28 = @"(unknown)";
          }
          else {
            __int16 v28 = off_1E592B890[v3];
          }
          long long v46 = v28;
          int v49 = 136315906;
          id v50 = "AFSiriActivationValidate";
          __int16 v51 = 2112;
          id v52 = v1;
          __int16 v53 = 2112;
          __int16 v54 = @"carPlayDevice";
          __int16 v55 = 2112;
          uint64_t v56 = v46;
LABEL_83:
          _os_log_error_impl(&dword_19CF1D000, v8, OS_LOG_TYPE_ERROR, "%s Siri activation context %@ is invalid, because source '%@' does not support event '%@'.", (uint8_t *)&v49, 0x2Au);

          goto LABEL_84;
        }
        goto LABEL_85;
      }
LABEL_6:
      unint64_t v5 = AFSiriLogContextUtility;
      if (os_log_type_enabled((os_log_t)AFSiriLogContextUtility, OS_LOG_TYPE_DEBUG))
      {
        int v49 = 136315394;
        id v50 = "AFSiriActivationValidate";
        __int16 v51 = 2048;
        id v52 = v1;
        _os_log_debug_impl(&dword_19CF1D000, v5, OS_LOG_TYPE_DEBUG, "%s Siri activation context %p is valid.", (uint8_t *)&v49, 0x16u);
      }
      uint64_t v6 = 1;
LABEL_91:

      return v6;
    case 6uLL:
    case 7uLL:
    case 8uLL:
    case 9uLL:
    case 0xAuLL:
    case 0xEuLL:
      if (v3 <= 0x10 && ((1 << v3) & 0x10300) != 0) {
        goto LABEL_6;
      }
      uint64_t v7 = (void *)AFSiriLogContextUtility;
      if (!os_log_type_enabled((os_log_t)AFSiriLogContextUtility, OS_LOG_TYPE_ERROR)) {
        goto LABEL_85;
      }
      unint64_t v8 = v7;
      id v9 = off_1E5924E08[v4];
      if (v3 > 0x17) {
        id v10 = @"(unknown)";
      }
      else {
        id v10 = off_1E592B890[v3];
      }
      long long v45 = v10;
      int v49 = 136315906;
      id v50 = "AFSiriActivationValidate";
      __int16 v51 = 2112;
      id v52 = v1;
      __int16 v53 = 2112;
      __int16 v54 = v9;
      __int16 v55 = 2112;
      uint64_t v56 = v45;
      _os_log_error_impl(&dword_19CF1D000, v8, OS_LOG_TYPE_ERROR, "%s Siri activation context %@ is invalid, because source '%@' does not support event '%@'.", (uint8_t *)&v49, 0x2Au);

      goto LABEL_66;
    case 0xBuLL:
      if (v3 <= 0x13 && ((1 << v3) & 0xB2000) != 0) {
        goto LABEL_6;
      }
      uint64_t v29 = (void *)AFSiriLogContextUtility;
      if (!os_log_type_enabled((os_log_t)AFSiriLogContextUtility, OS_LOG_TYPE_ERROR)) {
        goto LABEL_85;
      }
      unint64_t v8 = v29;
      uint64_t v12 = @"internal";
      __int16 v30 = @"internal";
      if (v3 > 0x17) {
        id v31 = @"(unknown)";
      }
      else {
        id v31 = off_1E592B890[v3];
      }
      long long v46 = v31;
      int v49 = 136315906;
      id v50 = "AFSiriActivationValidate";
      __int16 v51 = 2112;
      id v52 = v1;
      __int16 v53 = 2112;
      __int16 v54 = @"internal";
      __int16 v55 = 2112;
      uint64_t v56 = v46;
      goto LABEL_83;
    case 0xDuLL:
      if (v3 <= 0x17 && ((1 << v3) & 0x818410) != 0) {
        goto LABEL_6;
      }
      uint64_t v34 = (void *)AFSiriLogContextUtility;
      if (!os_log_type_enabled((os_log_t)AFSiriLogContextUtility, OS_LOG_TYPE_ERROR)) {
        goto LABEL_85;
      }
      unint64_t v8 = v34;
      uint64_t v12 = @"honeycombDevice";
      unint64_t v35 = @"honeycombDevice";
      if (v3 > 0x17) {
        long long v36 = @"(unknown)";
      }
      else {
        long long v36 = off_1E592B890[v3];
      }
      long long v46 = v36;
      int v49 = 136315906;
      id v50 = "AFSiriActivationValidate";
      __int16 v51 = 2112;
      id v52 = v1;
      __int16 v53 = 2112;
      __int16 v54 = @"honeycombDevice";
      __int16 v55 = 2112;
      uint64_t v56 = v46;
      goto LABEL_83;
    case 0xFuLL:
      if (v3 == 4) {
        goto LABEL_6;
      }
      id v37 = (void *)AFSiriLogContextUtility;
      if (!os_log_type_enabled((os_log_t)AFSiriLogContextUtility, OS_LOG_TYPE_ERROR)) {
        goto LABEL_85;
      }
      unint64_t v8 = v37;
      uint64_t v12 = @"exclave";
      id v38 = @"exclave";
      if (v3 > 0x17) {
        long long v39 = @"(unknown)";
      }
      else {
        long long v39 = off_1E592B890[v3];
      }
      long long v46 = v39;
      int v49 = 136315906;
      id v50 = "AFSiriActivationValidate";
      __int16 v51 = 2112;
      id v52 = v1;
      __int16 v53 = 2112;
      __int16 v54 = @"exclave";
      __int16 v55 = 2112;
      uint64_t v56 = v46;
      goto LABEL_83;
    default:
      __int16 v32 = (void *)AFSiriLogContextUtility;
      if (!os_log_type_enabled((os_log_t)AFSiriLogContextUtility, OS_LOG_TYPE_ERROR)) {
        goto LABEL_85;
      }
      unint64_t v8 = v32;
      if (v4 > 0xF) {
        id v33 = @"(unknown)";
      }
      else {
        id v33 = off_1E5924E08[v4];
      }
      id v9 = v33;
      int v49 = 136315650;
      id v50 = "AFSiriActivationValidate";
      __int16 v51 = 2112;
      id v52 = v1;
      __int16 v53 = 2112;
      __int16 v54 = v9;
      long long v42 = "%s Siri activation context %@ is invalid, because source '%@' is not supported yet.";
      goto LABEL_65;
  }
}

void __AFSiriActivationPerform_block_invoke_46(uint64_t a1, void *a2)
{
  id v2 = a2;
  id v3 = +[AFError errorWithCode:2503];
  [v2 setError:v3];
}

void __AFSiriActivationPerform_block_invoke_43(uint64_t a1, void *a2)
{
  id v2 = a2;
  id v3 = +[AFError errorWithCode:2502];
  [v2 setError:v3];
}

void __AFSiriActivationPerform_block_invoke(uint64_t a1, void *a2)
{
  id v2 = a2;
  id v3 = +[AFError errorWithCode:2501];
  [v2 setError:v3];
}

void AFSiriActivationVoiceKeywordDetected(uint64_t a1, unint64_t a2, void *a3, void *a4, void *a5)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  id v9 = a3;
  id v10 = a4;
  id v11 = a5;
  uint64_t v12 = (void *)AFSiriLogContextConnection;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
  {
    uint64_t v13 = v12;
    if (a2 > 0xF) {
      uint64_t v14 = @"(unknown)";
    }
    else {
      uint64_t v14 = off_1E5924E08[a2];
    }
    int v15 = v14;
    *(_DWORD *)buf = 136316162;
    id v25 = "AFSiriActivationVoiceKeywordDetected";
    __int16 v26 = 2048;
    uint64_t v27 = a1;
    __int16 v28 = 2112;
    uint64_t v29 = v15;
    __int16 v30 = 2112;
    id v31 = v9;
    __int16 v32 = 2112;
    id v33 = v10;
    _os_log_impl(&dword_19CF1D000, v13, OS_LOG_TYPE_INFO, "%s timestamp = %llu, source = %@, deviceID = %@, context = %@", buf, 0x34u);
  }
  v19[0] = MEMORY[0x1E4F143A8];
  v19[1] = 3221225472;
  v19[2] = __AFSiriActivationVoiceKeywordDetected_block_invoke;
  v19[3] = &unk_1E5928D60;
  uint64_t v22 = a1;
  unint64_t v23 = a2;
  id v20 = v9;
  id v21 = v10;
  id v16 = v10;
  id v17 = v9;
  id v18 = +[AFSiriActivationContext newWithBuilder:v19];
  AFSiriActivationPerform(v18, 0, v11);
}

void __AFSiriActivationVoiceKeywordDetected_block_invoke(void *a1, void *a2)
{
  uint64_t v3 = a1[6];
  id v4 = a2;
  [v4 setTimestamp:v3];
  [v4 setSource:a1[7]];
  [v4 setEvent:15];
  [v4 setDeviceID:a1[4]];
  [v4 setUserInfo:a1[5]];
}

void AFSiriActivationVoiceTriggerPrewarm(uint64_t a1, unint64_t a2, void *a3, void *a4, void *a5)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  id v9 = a3;
  id v10 = a4;
  id v11 = a5;
  uint64_t v12 = (void *)AFSiriLogContextConnection;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
  {
    uint64_t v13 = v12;
    if (a2 > 0xF) {
      uint64_t v14 = @"(unknown)";
    }
    else {
      uint64_t v14 = off_1E5924E08[a2];
    }
    int v15 = v14;
    *(_DWORD *)buf = 136316162;
    id v25 = "AFSiriActivationVoiceTriggerPrewarm";
    __int16 v26 = 2048;
    uint64_t v27 = a1;
    __int16 v28 = 2112;
    uint64_t v29 = v15;
    __int16 v30 = 2112;
    id v31 = v9;
    __int16 v32 = 2112;
    id v33 = v10;
    _os_log_impl(&dword_19CF1D000, v13, OS_LOG_TYPE_INFO, "%s timestamp = %llu, source = %@, deviceID = %@, context = %@", buf, 0x34u);
  }
  v19[0] = MEMORY[0x1E4F143A8];
  v19[1] = 3221225472;
  v19[2] = __AFSiriActivationVoiceTriggerPrewarm_block_invoke;
  v19[3] = &unk_1E5928D60;
  uint64_t v22 = a1;
  unint64_t v23 = a2;
  id v20 = v9;
  id v21 = v10;
  id v16 = v10;
  id v17 = v9;
  id v18 = +[AFSiriActivationContext newWithBuilder:v19];
  AFSiriActivationPerform(v18, 0, v11);
}

void __AFSiriActivationVoiceTriggerPrewarm_block_invoke(void *a1, void *a2)
{
  uint64_t v3 = a1[6];
  id v4 = a2;
  [v4 setTimestamp:v3];
  [v4 setSource:a1[7]];
  [v4 setEvent:4];
  [v4 setOptions:1];
  [v4 setDeviceID:a1[4]];
  [v4 setUserInfo:a1[5]];
}

void AFSiriActivationVoiceTriggerActivate(uint64_t a1, unint64_t a2, void *a3, void *a4, void *a5)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  id v9 = a3;
  id v10 = a4;
  id v11 = a5;
  uint64_t v12 = (void *)AFSiriLogContextConnection;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
  {
    uint64_t v13 = v12;
    if (a2 > 0xF) {
      uint64_t v14 = @"(unknown)";
    }
    else {
      uint64_t v14 = off_1E5924E08[a2];
    }
    int v15 = v14;
    *(_DWORD *)buf = 136316162;
    id v25 = "AFSiriActivationVoiceTriggerActivate";
    __int16 v26 = 2048;
    uint64_t v27 = a1;
    __int16 v28 = 2112;
    uint64_t v29 = v15;
    __int16 v30 = 2112;
    id v31 = v9;
    __int16 v32 = 2112;
    id v33 = v10;
    _os_log_impl(&dword_19CF1D000, v13, OS_LOG_TYPE_INFO, "%s timestamp = %llu, source = %@, deviceID = %@, context = %@", buf, 0x34u);
  }
  v19[0] = MEMORY[0x1E4F143A8];
  v19[1] = 3221225472;
  v19[2] = __AFSiriActivationVoiceTriggerActivate_block_invoke;
  v19[3] = &unk_1E5928D60;
  uint64_t v22 = a1;
  unint64_t v23 = a2;
  id v20 = v9;
  id v21 = v10;
  id v16 = v10;
  id v17 = v9;
  id v18 = +[AFSiriActivationContext newWithBuilder:v19];
  AFSiriActivationPerform(v18, 0, v11);
}

void __AFSiriActivationVoiceTriggerActivate_block_invoke(void *a1, void *a2)
{
  uint64_t v3 = a1[6];
  id v4 = a2;
  [v4 setTimestamp:v3];
  [v4 setSource:a1[7]];
  [v4 setEvent:4];
  [v4 setDeviceID:a1[4]];
  [v4 setUserInfo:a1[5]];
}

void AFSiriActivationContinuousVoiceTriggerDetected(uint64_t a1, unint64_t a2, void *a3, void *a4, void *a5)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  id v9 = a3;
  id v10 = a4;
  id v11 = a5;
  uint64_t v12 = (void *)AFSiriLogContextConnection;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
  {
    uint64_t v13 = v12;
    if (a2 > 0xF) {
      uint64_t v14 = @"(unknown)";
    }
    else {
      uint64_t v14 = off_1E5924E08[a2];
    }
    int v15 = v14;
    *(_DWORD *)buf = 136316162;
    id v25 = "AFSiriActivationContinuousVoiceTriggerDetected";
    __int16 v26 = 2048;
    uint64_t v27 = a1;
    __int16 v28 = 2112;
    uint64_t v29 = v15;
    __int16 v30 = 2112;
    id v31 = v9;
    __int16 v32 = 2112;
    id v33 = v10;
    _os_log_impl(&dword_19CF1D000, v13, OS_LOG_TYPE_INFO, "%s timestamp = %llu, source = %@, deviceID = %@, context = %@", buf, 0x34u);
  }
  v19[0] = MEMORY[0x1E4F143A8];
  v19[1] = 3221225472;
  v19[2] = __AFSiriActivationContinuousVoiceTriggerDetected_block_invoke;
  v19[3] = &unk_1E5928D60;
  uint64_t v22 = a1;
  unint64_t v23 = a2;
  id v20 = v9;
  id v21 = v10;
  id v16 = v10;
  id v17 = v9;
  id v18 = +[AFSiriActivationContext newWithBuilder:v19];
  AFSiriActivationPerform(v18, 0, v11);
}

void __AFSiriActivationContinuousVoiceTriggerDetected_block_invoke(void *a1, void *a2)
{
  uint64_t v3 = a1[6];
  id v4 = a2;
  [v4 setTimestamp:v3];
  [v4 setSource:a1[7]];
  [v4 setEvent:16];
  [v4 setDeviceID:a1[4]];
  [v4 setUserInfo:a1[5]];
}

void AFSiriActivationBuiltInMicVoice(uint64_t a1, void *a2, void *a3)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = AFSiriLogContextConnection;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    uint64_t v14 = "AFSiriActivationBuiltInMicVoice";
    __int16 v15 = 2048;
    uint64_t v16 = a1;
    __int16 v17 = 2112;
    id v18 = v5;
    _os_log_impl(&dword_19CF1D000, v7, OS_LOG_TYPE_INFO, "%s timestamp = %llu, context = %@", buf, 0x20u);
  }
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  void v10[2] = __AFSiriActivationBuiltInMicVoice_block_invoke;
  v10[3] = &unk_1E5928D88;
  id v11 = v5;
  uint64_t v12 = a1;
  id v8 = v5;
  id v9 = +[AFSiriActivationContext newWithBuilder:v10];
  AFSiriActivationPerformLegacy(v9, v6);
}

void __AFSiriActivationBuiltInMicVoice_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 40);
  id v4 = a2;
  [v4 setTimestamp:v3];
  [v4 setEvent:2];
  [v4 setSource:1];
  [v4 setUserInfo:*(void *)(a1 + 32)];
}

void AFSiriActivationPerformLegacy(void *a1, void *a2)
{
  id v3 = a2;
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  v5[2] = __AFSiriActivationPerformLegacy_block_invoke;
  void v5[3] = &unk_1E592B5F8;
  id v6 = v3;
  id v4 = v3;
  AFSiriActivationPerform(a1, 0, v5);
}

void __AFSiriActivationPerformLegacy_block_invoke(uint64_t a1, void *a2)
{
  if (*(void *)(a1 + 32))
  {
    id v3 = [a2 error];
    (*(void (**)(void, BOOL))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), v3 == 0);
  }
}

void AFSiriActivationBuiltInMicVoiceTriggerPrewarm(uint64_t a1, void *a2, void *a3)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = AFSiriLogContextConnection;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    uint64_t v14 = "AFSiriActivationBuiltInMicVoiceTriggerPrewarm";
    __int16 v15 = 2048;
    uint64_t v16 = a1;
    __int16 v17 = 2112;
    id v18 = v5;
    _os_log_impl(&dword_19CF1D000, v7, OS_LOG_TYPE_INFO, "%s timestamp = %llu, context = %@", buf, 0x20u);
  }
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  void v10[2] = __AFSiriActivationBuiltInMicVoiceTriggerPrewarm_block_invoke;
  v10[3] = &unk_1E5928D88;
  id v11 = v5;
  uint64_t v12 = a1;
  id v8 = v5;
  id v9 = +[AFSiriActivationContext newWithBuilder:v10];
  AFSiriActivationPerformLegacy(v9, v6);
}

void __AFSiriActivationBuiltInMicVoiceTriggerPrewarm_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 40);
  id v4 = a2;
  [v4 setTimestamp:v3];
  [v4 setEvent:4];
  [v4 setSource:1];
  [v4 setOptions:1];
  [v4 setUserInfo:*(void *)(a1 + 32)];
}

void AFSiriActivationBuiltInMicVoiceTrigger(uint64_t a1, void *a2, void *a3)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = AFSiriLogContextConnection;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    uint64_t v14 = "AFSiriActivationBuiltInMicVoiceTrigger";
    __int16 v15 = 2048;
    uint64_t v16 = a1;
    __int16 v17 = 2112;
    id v18 = v5;
    _os_log_impl(&dword_19CF1D000, v7, OS_LOG_TYPE_INFO, "%s timestamp = %llu, context = %@", buf, 0x20u);
  }
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  void v10[2] = __AFSiriActivationBuiltInMicVoiceTrigger_block_invoke;
  v10[3] = &unk_1E5928D88;
  id v11 = v5;
  uint64_t v12 = a1;
  id v8 = v5;
  id v9 = +[AFSiriActivationContext newWithBuilder:v10];
  AFSiriActivationPerformLegacy(v9, v6);
}

void __AFSiriActivationBuiltInMicVoiceTrigger_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 40);
  id v4 = a2;
  [v4 setTimestamp:v3];
  [v4 setEvent:4];
  [v4 setSource:1];
  [v4 setUserInfo:*(void *)(a1 + 32)];
}

void AFSiriActivationHearst(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v9 = a3;
  id v10 = a4;
  id v11 = a5;
  uint64_t v12 = AFSiriLogContextConnection;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_ERROR))
  {
    int v14 = 136315138;
    __int16 v15 = "AFSiriActivationHearst";
    _os_log_error_impl(&dword_19CF1D000, v12, OS_LOG_TYPE_ERROR, "%s Deprecated, use AFSiriActivationBluetoothDeviceDoubleTap() or AFSiriActivationBluetoothDeviceVoice() instead.", (uint8_t *)&v14, 0xCu);
  }
  if (a2 == 2)
  {
    AFSiriActivationHearstVoice(a1, v9, v10, v11);
  }
  else if (a2 == 1)
  {
    AFSiriActivationHearstDoubleTap(a1, v9, v10, v11);
  }
  else if (v11)
  {
    uint64_t v13 = +[AFError errorWithCode:13];
    (*((void (**)(id, void, void *))v11 + 2))(v11, 0, v13);
  }
}

void AFSiriActivationHearstDoubleTap(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id v10 = AFSiriLogContextConnection;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315138;
    __int16 v15 = "AFSiriActivationHearstDoubleTap";
    _os_log_error_impl(&dword_19CF1D000, v10, OS_LOG_TYPE_ERROR, "%s Deprecated, use AFSiriActivationBluetoothDeviceDoubleTap() instead.", buf, 0xCu);
  }
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 3221225472;
  v12[2] = __AFSiriActivationHearstDoubleTap_block_invoke;
  v12[3] = &unk_1E592B5F8;
  id v13 = v9;
  id v11 = v9;
  AFSiriActivationBluetoothDeviceDoubleTap(a1, v7, v8, v12);
}

void AFSiriActivationHearstVoice(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id v10 = AFSiriLogContextConnection;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315138;
    __int16 v15 = "AFSiriActivationHearstVoice";
    _os_log_error_impl(&dword_19CF1D000, v10, OS_LOG_TYPE_ERROR, "%s Deprecated, use AFSiriActivationBluetoothDeviceVoice() instead.", buf, 0xCu);
  }
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 3221225472;
  v12[2] = __AFSiriActivationHearstVoice_block_invoke;
  v12[3] = &unk_1E592B5F8;
  id v13 = v9;
  id v11 = v9;
  AFSiriActivationBluetoothDeviceVoice(a1, v7, v8, v12);
}

void __AFSiriActivationHearstVoice_block_invoke(uint64_t a1, void *a2)
{
  if (*(void *)(a1 + 32))
  {
    id v3 = [a2 error];
    (*(void (**)(void, BOOL))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), v3 == 0);
  }
}

void AFSiriActivationBluetoothDeviceVoice(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id v10 = AFSiriLogContextConnection;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315906;
    id v20 = "AFSiriActivationBluetoothDeviceVoice";
    __int16 v21 = 2048;
    uint64_t v22 = a1;
    __int16 v23 = 2112;
    id v24 = v7;
    __int16 v25 = 2112;
    id v26 = v8;
    _os_log_impl(&dword_19CF1D000, v10, OS_LOG_TYPE_INFO, "%s timestamp = %llu, deviceID = %@, context = %@", buf, 0x2Au);
  }
  id v11 = +[AFAnalytics sharedAnalytics];
  [v11 logEventWithType:5402 machAbsoluteTime:a1 context:0];

  v15[0] = MEMORY[0x1E4F143A8];
  v15[1] = 3221225472;
  void v15[2] = __AFSiriActivationBluetoothDeviceVoice_block_invoke;
  v15[3] = &unk_1E5928DB0;
  id v17 = v8;
  uint64_t v18 = a1;
  id v16 = v7;
  id v12 = v8;
  id v13 = v7;
  id v14 = +[AFSiriActivationContext newWithBuilder:v15];
  AFSiriActivationPerform(v14, 0, v9);
}

void __AFSiriActivationBluetoothDeviceVoice_block_invoke(void *a1, void *a2)
{
  uint64_t v3 = a1[6];
  id v4 = a2;
  [v4 setTimestamp:v3];
  [v4 setEvent:2];
  [v4 setSource:4];
  [v4 setDeviceID:a1[4]];
  [v4 setUserInfo:a1[5]];
}

void __AFSiriActivationHearstDoubleTap_block_invoke(uint64_t a1, void *a2)
{
  if (*(void *)(a1 + 32))
  {
    id v3 = a2;
    id v8 = [v3 error];
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = [v3 actionType];

    BOOL v7 = v5 == 1 && v8 == 0;
    (*(void (**)(uint64_t, BOOL))(v4 + 16))(v4, v7);
  }
}

void AFSiriActivationBluetoothDeviceDoubleTap(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id v10 = AFSiriLogContextConnection;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315906;
    __int16 v23 = "AFSiriActivationBluetoothDeviceDoubleTap";
    __int16 v24 = 2048;
    uint64_t v25 = a1;
    __int16 v26 = 2112;
    id v27 = v7;
    __int16 v28 = 2112;
    id v29 = v8;
    _os_log_impl(&dword_19CF1D000, v10, OS_LOG_TYPE_INFO, "%s timestamp = %llu, deviceID = %@, context = %@", buf, 0x2Au);
  }
  id v11 = +[AFAnalytics sharedAnalytics];
  [v11 logEventWithType:5401 machAbsoluteTime:a1 context:0];

  v18[0] = MEMORY[0x1E4F143A8];
  v18[1] = 3221225472;
  v18[2] = __AFSiriActivationBluetoothDeviceDoubleTap_block_invoke;
  v18[3] = &unk_1E5928DB0;
  id v20 = v8;
  uint64_t v21 = a1;
  id v19 = v7;
  id v12 = v8;
  id v13 = v7;
  id v14 = +[AFSiriActivationContext newWithBuilder:v18];
  v16[0] = MEMORY[0x1E4F143A8];
  v16[1] = 3221225472;
  v16[2] = __AFSiriActivationBluetoothDeviceDoubleTap_block_invoke_2;
  v16[3] = &unk_1E592B5F8;
  id v17 = v9;
  id v15 = v9;
  AFSiriActivationPerform(v14, 0, v16);
}

void __AFSiriActivationBluetoothDeviceDoubleTap_block_invoke(void *a1, void *a2)
{
  uint64_t v3 = a1[6];
  id v4 = a2;
  [v4 setTimestamp:v3];
  [v4 setEvent:1];
  [v4 setSource:4];
  [v4 setDeviceID:a1[4]];
  [v4 setUserInfo:a1[5]];
}

uint64_t __AFSiriActivationBluetoothDeviceDoubleTap_block_invoke_2(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void AFSiriActivationHearstBoron(uint64_t a1, void *a2, void *a3, double a4)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  id v8 = a3;
  id v9 = AFSiriLogContextConnection;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315138;
    id v14 = "AFSiriActivationHearstBoron";
    _os_log_error_impl(&dword_19CF1D000, v9, OS_LOG_TYPE_ERROR, "%s Deprecated, use AFSiriActivationBluetoothDeviceBoronSignal() instead.", buf, 0xCu);
  }
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 3221225472;
  v11[2] = __AFSiriActivationHearstBoron_block_invoke;
  void v11[3] = &unk_1E592B5F8;
  id v12 = v8;
  id v10 = v8;
  AFSiriActivationBluetoothDeviceBoronSignal(a1, v7, v11, a4);
}

void __AFSiriActivationHearstBoron_block_invoke(uint64_t a1, void *a2)
{
  if (*(void *)(a1 + 32))
  {
    id v3 = [a2 error];
    (*(void (**)(void, BOOL))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), v3 == 0);
  }
}

void AFSiriActivationBluetoothDeviceBoronSignal(uint64_t a1, void *a2, void *a3, double a4)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  id v8 = a3;
  id v9 = AFSiriLogContextConnection;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315906;
    id v17 = "AFSiriActivationBluetoothDeviceBoronSignal";
    __int16 v18 = 2048;
    uint64_t v19 = a1;
    __int16 v20 = 2112;
    id v21 = v7;
    __int16 v22 = 2048;
    double v23 = a4;
    _os_log_impl(&dword_19CF1D000, v9, OS_LOG_TYPE_INFO, "%s timestamp = %llu, deviceID = %@, score = %f", buf, 0x2Au);
  }
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 3221225472;
  v12[2] = __AFSiriActivationBluetoothDeviceBoronSignal_block_invoke;
  v12[3] = &unk_1E5928DD8;
  id v13 = v7;
  uint64_t v14 = a1;
  double v15 = a4;
  id v10 = v7;
  id v11 = +[AFSiriActivationContext newWithBuilder:v12];
  AFSiriActivationPerform(v11, 0, v8);
}

void __AFSiriActivationBluetoothDeviceBoronSignal_block_invoke(uint64_t a1, void *a2)
{
  v8[1] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a1 + 40);
  id v4 = a2;
  [v4 setTimestamp:v3];
  [v4 setEvent:6];
  [v4 setSource:4];
  [v4 setDeviceID:*(void *)(a1 + 32)];
  id v7 = @"score";
  uint64_t v5 = [MEMORY[0x1E4F28ED0] numberWithDouble:*(double *)(a1 + 48)];
  v8[0] = v5;
  id v6 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v8 forKeys:&v7 count:1];
  [v4 setUserInfo:v6];
}

void AFSiriActivationBluetoothDeviceVoiceTriggerPrewarm(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id v10 = AFSiriLogContextConnection;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315906;
    uint64_t v19 = "AFSiriActivationBluetoothDeviceVoiceTriggerPrewarm";
    __int16 v20 = 2048;
    uint64_t v21 = a1;
    __int16 v22 = 2112;
    id v23 = v7;
    __int16 v24 = 2112;
    id v25 = v8;
    _os_log_impl(&dword_19CF1D000, v10, OS_LOG_TYPE_INFO, "%s timestamp = %llu, deviceID = %@, context = %@", buf, 0x2Au);
  }
  v14[0] = MEMORY[0x1E4F143A8];
  v14[1] = 3221225472;
  void v14[2] = __AFSiriActivationBluetoothDeviceVoiceTriggerPrewarm_block_invoke;
  v14[3] = &unk_1E5928DB0;
  id v16 = v8;
  uint64_t v17 = a1;
  id v15 = v7;
  id v11 = v8;
  id v12 = v7;
  id v13 = +[AFSiriActivationContext newWithBuilder:v14];
  AFSiriActivationPerformLegacy(v13, v9);
}

void __AFSiriActivationBluetoothDeviceVoiceTriggerPrewarm_block_invoke(void *a1, void *a2)
{
  uint64_t v3 = a1[6];
  id v4 = a2;
  [v4 setTimestamp:v3];
  [v4 setEvent:4];
  [v4 setSource:4];
  [v4 setOptions:1];
  [v4 setDeviceID:a1[4]];
  [v4 setUserInfo:a1[5]];
}

void AFSiriActivationBluetoothDeviceVoiceTrigger(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id v10 = AFSiriLogContextConnection;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315906;
    uint64_t v19 = "AFSiriActivationBluetoothDeviceVoiceTrigger";
    __int16 v20 = 2048;
    uint64_t v21 = a1;
    __int16 v22 = 2112;
    id v23 = v7;
    __int16 v24 = 2112;
    id v25 = v8;
    _os_log_impl(&dword_19CF1D000, v10, OS_LOG_TYPE_INFO, "%s timestamp = %llu, deviceID = %@, context = %@", buf, 0x2Au);
  }
  v14[0] = MEMORY[0x1E4F143A8];
  v14[1] = 3221225472;
  void v14[2] = __AFSiriActivationBluetoothDeviceVoiceTrigger_block_invoke;
  v14[3] = &unk_1E5928DB0;
  id v16 = v8;
  uint64_t v17 = a1;
  id v15 = v7;
  id v11 = v8;
  id v12 = v7;
  id v13 = +[AFSiriActivationContext newWithBuilder:v14];
  AFSiriActivationPerformLegacy(v13, v9);
}

void __AFSiriActivationBluetoothDeviceVoiceTrigger_block_invoke(void *a1, void *a2)
{
  uint64_t v3 = a1[6];
  id v4 = a2;
  [v4 setTimestamp:v3];
  [v4 setEvent:4];
  [v4 setSource:4];
  [v4 setDeviceID:a1[4]];
  [v4 setUserInfo:a1[5]];
}

void AFSiriActivationBluetoothDeviceTriggerless(uint64_t a1, void *a2, void *a3, void *a4, double a5)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  id v9 = a2;
  id v10 = a3;
  id v11 = a4;
  id v12 = AFSiriLogContextConnection;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315906;
    __int16 v22 = "AFSiriActivationBluetoothDeviceTriggerless";
    __int16 v23 = 2048;
    uint64_t v24 = a1;
    __int16 v25 = 2048;
    double v26 = a5;
    __int16 v27 = 2112;
    id v28 = v9;
    _os_log_impl(&dword_19CF1D000, v12, OS_LOG_TYPE_INFO, "%s timestamp = %llu, activationTimeShift = %f, deviceID = %@", buf, 0x2Au);
  }
  v16[0] = MEMORY[0x1E4F143A8];
  v16[1] = 3221225472;
  v16[2] = __AFSiriActivationBluetoothDeviceTriggerless_block_invoke;
  v16[3] = &unk_1E5928D60;
  id v18 = v10;
  uint64_t v19 = a1;
  double v20 = a5;
  id v17 = v9;
  id v13 = v10;
  id v14 = v9;
  id v15 = +[AFSiriActivationContext newWithBuilder:v16];
  AFSiriActivationPerform(v15, 0, v11);
}

void __AFSiriActivationBluetoothDeviceTriggerless_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 48);
  double v4 = *(double *)(a1 + 56);
  id v5 = a2;
  id v6 = v5;
  if (_AFMachAbsoluteTimeRate_onceToken != -1)
  {
    dispatch_once(&_AFMachAbsoluteTimeRate_onceToken, &__block_literal_global_973);
    id v5 = v6;
  }
  [v5 setTimestamp:v3 - (unint64_t)(v4 * 1000000000.0 / *(double *)&_AFMachAbsoluteTimeRate_rate)];
  [v6 setEvent:10];
  [v6 setSource:4];
  [v6 setDeviceID:*(void *)(a1 + 32)];
  [v6 setUserInfo:*(void *)(a1 + 40)];
}

void AFSiriActivationBluetoothDeviceButtonPress(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id v10 = AFSiriLogContextConnection;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315906;
    uint64_t v19 = "AFSiriActivationBluetoothDeviceButtonPress";
    __int16 v20 = 2048;
    uint64_t v21 = a1;
    __int16 v22 = 2112;
    id v23 = v7;
    __int16 v24 = 2112;
    id v25 = v8;
    _os_log_impl(&dword_19CF1D000, v10, OS_LOG_TYPE_INFO, "%s timestamp = %llu, deviceID = %@, context = %@", buf, 0x2Au);
  }
  v14[0] = MEMORY[0x1E4F143A8];
  v14[1] = 3221225472;
  void v14[2] = __AFSiriActivationBluetoothDeviceButtonPress_block_invoke;
  v14[3] = &unk_1E5928DB0;
  id v16 = v8;
  uint64_t v17 = a1;
  id v15 = v7;
  id v11 = v8;
  id v12 = v7;
  id v13 = +[AFSiriActivationContext newWithBuilder:v14];
  AFSiriActivationPerform(v13, 0, v9);
}

void __AFSiriActivationBluetoothDeviceButtonPress_block_invoke(void *a1, void *a2)
{
  uint64_t v3 = a1[6];
  id v4 = a2;
  [v4 setTimestamp:v3];
  [v4 setEvent:8];
  [v4 setSource:4];
  [v4 setDeviceID:a1[4]];
  [v4 setUserInfo:a1[5]];
}

void AFSiriActivationBluetoothDeviceButtonRelease(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id v10 = AFSiriLogContextConnection;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315906;
    uint64_t v19 = "AFSiriActivationBluetoothDeviceButtonRelease";
    __int16 v20 = 2048;
    uint64_t v21 = a1;
    __int16 v22 = 2112;
    id v23 = v7;
    __int16 v24 = 2112;
    id v25 = v8;
    _os_log_impl(&dword_19CF1D000, v10, OS_LOG_TYPE_INFO, "%s timestamp = %llu, deviceID = %@, context = %@", buf, 0x2Au);
  }
  v14[0] = MEMORY[0x1E4F143A8];
  v14[1] = 3221225472;
  void v14[2] = __AFSiriActivationBluetoothDeviceButtonRelease_block_invoke;
  v14[3] = &unk_1E5928DB0;
  id v16 = v8;
  uint64_t v17 = a1;
  id v15 = v7;
  id v11 = v8;
  id v12 = v7;
  id v13 = +[AFSiriActivationContext newWithBuilder:v14];
  AFSiriActivationPerform(v13, 0, v9);
}

void __AFSiriActivationBluetoothDeviceButtonRelease_block_invoke(void *a1, void *a2)
{
  uint64_t v3 = a1[6];
  id v4 = a2;
  [v4 setTimestamp:v3];
  [v4 setEvent:9];
  [v4 setSource:4];
  [v4 setDeviceID:a1[4]];
  [v4 setUserInfo:a1[5]];
}

void AFSiriActivationHoneycombDeviceVoiceTriggerPrewarm(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id v10 = AFSiriLogContextConnection;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315906;
    uint64_t v19 = "AFSiriActivationHoneycombDeviceVoiceTriggerPrewarm";
    __int16 v20 = 2048;
    uint64_t v21 = a1;
    __int16 v22 = 2112;
    id v23 = v7;
    __int16 v24 = 2112;
    id v25 = v8;
    _os_log_impl(&dword_19CF1D000, v10, OS_LOG_TYPE_INFO, "%s timestamp = %llu, deviceID = %@, context = %@", buf, 0x2Au);
  }
  v14[0] = MEMORY[0x1E4F143A8];
  v14[1] = 3221225472;
  void v14[2] = __AFSiriActivationHoneycombDeviceVoiceTriggerPrewarm_block_invoke;
  v14[3] = &unk_1E5928DB0;
  id v16 = v8;
  uint64_t v17 = a1;
  id v15 = v7;
  id v11 = v8;
  id v12 = v7;
  id v13 = +[AFSiriActivationContext newWithBuilder:v14];
  AFSiriActivationPerform(v13, 0, v9);
}

void __AFSiriActivationHoneycombDeviceVoiceTriggerPrewarm_block_invoke(void *a1, void *a2)
{
  uint64_t v3 = a1[6];
  id v4 = a2;
  [v4 setTimestamp:v3];
  [v4 setEvent:4];
  [v4 setSource:13];
  [v4 setOptions:1];
  [v4 setDeviceID:a1[4]];
  [v4 setUserInfo:a1[5]];
}

void AFSiriActivationHoneycombDeviceVoiceTrigger(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id v10 = AFSiriLogContextConnection;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315906;
    uint64_t v19 = "AFSiriActivationHoneycombDeviceVoiceTrigger";
    __int16 v20 = 2048;
    uint64_t v21 = a1;
    __int16 v22 = 2112;
    id v23 = v7;
    __int16 v24 = 2112;
    id v25 = v8;
    _os_log_impl(&dword_19CF1D000, v10, OS_LOG_TYPE_INFO, "%s timestamp = %llu, deviceID = %@, context = %@", buf, 0x2Au);
  }
  v14[0] = MEMORY[0x1E4F143A8];
  v14[1] = 3221225472;
  void v14[2] = __AFSiriActivationHoneycombDeviceVoiceTrigger_block_invoke;
  v14[3] = &unk_1E5928DB0;
  id v16 = v8;
  uint64_t v17 = a1;
  id v15 = v7;
  id v11 = v8;
  id v12 = v7;
  id v13 = +[AFSiriActivationContext newWithBuilder:v14];
  AFSiriActivationPerform(v13, 0, v9);
}

void __AFSiriActivationHoneycombDeviceVoiceTrigger_block_invoke(void *a1, void *a2)
{
  uint64_t v3 = a1[6];
  id v4 = a2;
  [v4 setTimestamp:v3];
  [v4 setEvent:4];
  [v4 setSource:13];
  [v4 setDeviceID:a1[4]];
  [v4 setUserInfo:a1[5]];
}

void AFSiriActivationCarPlayDeviceVoice(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id v10 = AFSiriLogContextConnection;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315906;
    uint64_t v19 = "AFSiriActivationCarPlayDeviceVoice";
    __int16 v20 = 2048;
    uint64_t v21 = a1;
    __int16 v22 = 2112;
    id v23 = v7;
    __int16 v24 = 2112;
    id v25 = v8;
    _os_log_impl(&dword_19CF1D000, v10, OS_LOG_TYPE_INFO, "%s timestamp = %llu, deviceID = %@, context = %@", buf, 0x2Au);
  }
  v14[0] = MEMORY[0x1E4F143A8];
  v14[1] = 3221225472;
  void v14[2] = __AFSiriActivationCarPlayDeviceVoice_block_invoke;
  v14[3] = &unk_1E5928DB0;
  id v16 = v8;
  uint64_t v17 = a1;
  id v15 = v7;
  id v11 = v8;
  id v12 = v7;
  id v13 = +[AFSiriActivationContext newWithBuilder:v14];
  AFSiriActivationPerformLegacy(v13, v9);
}

void __AFSiriActivationCarPlayDeviceVoice_block_invoke(void *a1, void *a2)
{
  uint64_t v3 = a1[6];
  id v4 = a2;
  [v4 setTimestamp:v3];
  [v4 setEvent:2];
  [v4 setSource:5];
  [v4 setDeviceID:a1[4]];
  [v4 setUserInfo:a1[5]];
}

void AFSiriActivationCarPlayDeviceVoiceTriggerPrewarm(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id v10 = AFSiriLogContextConnection;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315906;
    uint64_t v19 = "AFSiriActivationCarPlayDeviceVoiceTriggerPrewarm";
    __int16 v20 = 2048;
    uint64_t v21 = a1;
    __int16 v22 = 2112;
    id v23 = v7;
    __int16 v24 = 2112;
    id v25 = v8;
    _os_log_impl(&dword_19CF1D000, v10, OS_LOG_TYPE_INFO, "%s timestamp = %llu, deviceID = %@, context = %@", buf, 0x2Au);
  }
  v14[0] = MEMORY[0x1E4F143A8];
  v14[1] = 3221225472;
  void v14[2] = __AFSiriActivationCarPlayDeviceVoiceTriggerPrewarm_block_invoke;
  v14[3] = &unk_1E5928DB0;
  id v16 = v8;
  uint64_t v17 = a1;
  id v15 = v7;
  id v11 = v8;
  id v12 = v7;
  id v13 = +[AFSiriActivationContext newWithBuilder:v14];
  AFSiriActivationPerformLegacy(v13, v9);
}

void __AFSiriActivationCarPlayDeviceVoiceTriggerPrewarm_block_invoke(void *a1, void *a2)
{
  uint64_t v3 = a1[6];
  id v4 = a2;
  [v4 setTimestamp:v3];
  [v4 setEvent:4];
  [v4 setSource:5];
  [v4 setOptions:1];
  [v4 setDeviceID:a1[4]];
  [v4 setUserInfo:a1[5]];
}

void AFSiriActivationCarPlayDeviceVoiceTrigger(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id v10 = AFSiriLogContextConnection;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315906;
    uint64_t v19 = "AFSiriActivationCarPlayDeviceVoiceTrigger";
    __int16 v20 = 2048;
    uint64_t v21 = a1;
    __int16 v22 = 2112;
    id v23 = v7;
    __int16 v24 = 2112;
    id v25 = v8;
    _os_log_impl(&dword_19CF1D000, v10, OS_LOG_TYPE_INFO, "%s timestamp = %llu, deviceID = %@, context = %@", buf, 0x2Au);
  }
  v14[0] = MEMORY[0x1E4F143A8];
  v14[1] = 3221225472;
  void v14[2] = __AFSiriActivationCarPlayDeviceVoiceTrigger_block_invoke;
  v14[3] = &unk_1E5928DB0;
  id v16 = v8;
  uint64_t v17 = a1;
  id v15 = v7;
  id v11 = v8;
  id v12 = v7;
  id v13 = +[AFSiriActivationContext newWithBuilder:v14];
  AFSiriActivationPerformLegacy(v13, v9);
}

void __AFSiriActivationCarPlayDeviceVoiceTrigger_block_invoke(void *a1, void *a2)
{
  uint64_t v3 = a1[6];
  id v4 = a2;
  [v4 setTimestamp:v3];
  [v4 setEvent:4];
  [v4 setSource:5];
  [v4 setDeviceID:a1[4]];
  [v4 setUserInfo:a1[5]];
}

void AFSiriActivationRaiseToSpeakPrewarm(uint64_t a1, void *a2, void *a3)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  id v7 = AFSiriLogContextConnection;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    id v14 = "AFSiriActivationRaiseToSpeakPrewarm";
    __int16 v15 = 2048;
    uint64_t v16 = a1;
    __int16 v17 = 2112;
    id v18 = v5;
    _os_log_impl(&dword_19CF1D000, v7, OS_LOG_TYPE_INFO, "%s timestamp = %llu, context = %@", buf, 0x20u);
  }
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  void v10[2] = __AFSiriActivationRaiseToSpeakPrewarm_block_invoke;
  v10[3] = &unk_1E5928D88;
  id v11 = v5;
  uint64_t v12 = a1;
  id v8 = v5;
  id v9 = +[AFSiriActivationContext newWithBuilder:v10];
  AFSiriActivationPerformLegacy(v9, v6);
}

void __AFSiriActivationRaiseToSpeakPrewarm_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 40);
  id v4 = a2;
  [v4 setTimestamp:v3];
  [v4 setEvent:5];
  [v4 setSource:3];
  [v4 setOptions:1];
  [v4 setUserInfo:*(void *)(a1 + 32)];
}

void AFSiriActivationRaiseToSpeak(uint64_t a1, void *a2, void *a3)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  id v7 = AFSiriLogContextConnection;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    id v14 = "AFSiriActivationRaiseToSpeak";
    __int16 v15 = 2048;
    uint64_t v16 = a1;
    __int16 v17 = 2112;
    id v18 = v5;
    _os_log_impl(&dword_19CF1D000, v7, OS_LOG_TYPE_INFO, "%s timestamp = %llu, context = %@", buf, 0x20u);
  }
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  void v10[2] = __AFSiriActivationRaiseToSpeak_block_invoke;
  v10[3] = &unk_1E5928D88;
  id v11 = v5;
  uint64_t v12 = a1;
  id v8 = v5;
  id v9 = +[AFSiriActivationContext newWithBuilder:v10];
  AFSiriActivationPerformLegacy(v9, v6);
}

void __AFSiriActivationRaiseToSpeak_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 40);
  id v4 = a2;
  [v4 setTimestamp:v3];
  [v4 setEvent:5];
  [v4 setSource:3];
  [v4 setUserInfo:*(void *)(a1 + 32)];
}

void AFSiriActivationTriggerless(uint64_t a1, void *a2, void *a3)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  id v7 = AFSiriLogContextConnection;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    id v14 = "AFSiriActivationTriggerless";
    __int16 v15 = 2048;
    uint64_t v16 = a1;
    __int16 v17 = 2112;
    id v18 = v5;
    _os_log_impl(&dword_19CF1D000, v7, OS_LOG_TYPE_INFO, "%s timestamp = %llu, context = %@", buf, 0x20u);
  }
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  void v10[2] = __AFSiriActivationTriggerless_block_invoke;
  v10[3] = &unk_1E5928D88;
  id v11 = v5;
  uint64_t v12 = a1;
  id v8 = v5;
  id v9 = +[AFSiriActivationContext newWithBuilder:v10];
  AFSiriActivationPerform(v9, 0, v6);
}

void __AFSiriActivationTriggerless_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 40);
  id v4 = a2;
  [v4 setTimestamp:v3];
  [v4 setEvent:10];
  [v4 setSource:1];
  [v4 setUserInfo:*(void *)(a1 + 32)];
}

void AFSiriActivationContinuousConversation(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id v10 = AFSiriLogContextConnection;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    uint64_t v19 = "AFSiriActivationContinuousConversation";
    __int16 v20 = 2048;
    uint64_t v21 = a1;
    __int16 v22 = 2112;
    id v23 = v8;
    _os_log_impl(&dword_19CF1D000, v10, OS_LOG_TYPE_INFO, "%s timestamp = %llu, context = %@", buf, 0x20u);
  }
  v14[0] = MEMORY[0x1E4F143A8];
  v14[1] = 3221225472;
  void v14[2] = __AFSiriActivationContinuousConversation_block_invoke;
  v14[3] = &unk_1E5928DB0;
  id v16 = v7;
  uint64_t v17 = a1;
  id v15 = v8;
  id v11 = v7;
  id v12 = v8;
  id v13 = +[AFSiriActivationContext newWithBuilder:v14];
  AFSiriActivationPerform(v13, 0, v9);
}

void __AFSiriActivationContinuousConversation_block_invoke(void *a1, void *a2)
{
  uint64_t v3 = a1[6];
  id v4 = a2;
  [v4 setTimestamp:v3];
  [v4 setEvent:17];
  [v4 setSource:11];
  [v4 setUserInfo:a1[4]];
  [v4 setDeviceID:a1[5]];
}

void AFSiriActivationContinuousConversationHearst(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id v10 = AFSiriLogContextConnection;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    uint64_t v19 = "AFSiriActivationContinuousConversationHearst";
    __int16 v20 = 2048;
    uint64_t v21 = a1;
    __int16 v22 = 2112;
    id v23 = v8;
    _os_log_impl(&dword_19CF1D000, v10, OS_LOG_TYPE_INFO, "%s timestamp = %llu, context = %@", buf, 0x20u);
  }
  v14[0] = MEMORY[0x1E4F143A8];
  v14[1] = 3221225472;
  void v14[2] = __AFSiriActivationContinuousConversationHearst_block_invoke;
  v14[3] = &unk_1E5928DB0;
  id v16 = v7;
  uint64_t v17 = a1;
  id v15 = v8;
  id v11 = v7;
  id v12 = v8;
  id v13 = +[AFSiriActivationContext newWithBuilder:v14];
  AFSiriActivationPerform(v13, 0, v9);
}

void __AFSiriActivationContinuousConversationHearst_block_invoke(void *a1, void *a2)
{
  uint64_t v3 = a1[6];
  id v4 = a2;
  [v4 setTimestamp:v3];
  [v4 setEvent:20];
  [v4 setSource:4];
  [v4 setUserInfo:a1[4]];
  [v4 setDeviceID:a1[5]];
}

void AFSiriActivationContinuousConversationJarvis(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id v10 = AFSiriLogContextConnection;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    uint64_t v19 = "AFSiriActivationContinuousConversationJarvis";
    __int16 v20 = 2048;
    uint64_t v21 = a1;
    __int16 v22 = 2112;
    id v23 = v8;
    _os_log_impl(&dword_19CF1D000, v10, OS_LOG_TYPE_INFO, "%s timestamp = %llu, context = %@", buf, 0x20u);
  }
  v14[0] = MEMORY[0x1E4F143A8];
  v14[1] = 3221225472;
  void v14[2] = __AFSiriActivationContinuousConversationJarvis_block_invoke;
  v14[3] = &unk_1E5928DB0;
  id v16 = v7;
  uint64_t v17 = a1;
  id v15 = v8;
  id v11 = v7;
  id v12 = v8;
  id v13 = +[AFSiriActivationContext newWithBuilder:v14];
  AFSiriActivationPerform(v13, 0, v9);
}

void __AFSiriActivationContinuousConversationJarvis_block_invoke(void *a1, void *a2)
{
  uint64_t v3 = a1[6];
  id v4 = a2;
  [v4 setTimestamp:v3];
  [v4 setEvent:21];
  [v4 setSource:5];
  [v4 setUserInfo:a1[4]];
  [v4 setDeviceID:a1[5]];
}

void AFSiriActivationContinuousConversationHoneycomb(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id v10 = AFSiriLogContextConnection;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    uint64_t v19 = "AFSiriActivationContinuousConversationHoneycomb";
    __int16 v20 = 2048;
    uint64_t v21 = a1;
    __int16 v22 = 2112;
    id v23 = v8;
    _os_log_impl(&dword_19CF1D000, v10, OS_LOG_TYPE_INFO, "%s timestamp = %llu, context = %@", buf, 0x20u);
  }
  v14[0] = MEMORY[0x1E4F143A8];
  v14[1] = 3221225472;
  void v14[2] = __AFSiriActivationContinuousConversationHoneycomb_block_invoke;
  v14[3] = &unk_1E5928DB0;
  id v16 = v7;
  uint64_t v17 = a1;
  id v15 = v8;
  id v11 = v7;
  id v12 = v8;
  id v13 = +[AFSiriActivationContext newWithBuilder:v14];
  AFSiriActivationPerform(v13, 0, v9);
}

void __AFSiriActivationContinuousConversationHoneycomb_block_invoke(void *a1, void *a2)
{
  uint64_t v3 = a1[6];
  id v4 = a2;
  [v4 setTimestamp:v3];
  [v4 setEvent:23];
  [v4 setSource:13];
  [v4 setUserInfo:a1[4]];
  [v4 setDeviceID:a1[5]];
}

void AFSiriActivationSiriPrompt(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id v10 = AFSiriLogContextConnection;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    uint64_t v19 = "AFSiriActivationSiriPrompt";
    __int16 v20 = 2048;
    uint64_t v21 = a1;
    __int16 v22 = 2112;
    id v23 = v8;
    _os_log_impl(&dword_19CF1D000, v10, OS_LOG_TYPE_INFO, "%s LAS activation: timestamp = %llu, context = %@", buf, 0x20u);
  }
  v14[0] = MEMORY[0x1E4F143A8];
  v14[1] = 3221225472;
  void v14[2] = __AFSiriActivationSiriPrompt_block_invoke;
  v14[3] = &unk_1E5928DB0;
  id v16 = v7;
  uint64_t v17 = a1;
  id v15 = v8;
  id v11 = v7;
  id v12 = v8;
  id v13 = +[AFSiriActivationContext newWithBuilder:v14];
  AFSiriActivationPerform(v13, 0, v9);
}

void __AFSiriActivationSiriPrompt_block_invoke(void *a1, void *a2)
{
  uint64_t v3 = a1[6];
  id v4 = a2;
  [v4 setTimestamp:v3];
  [v4 setEvent:19];
  [v4 setSource:11];
  [v4 setUserInfo:a1[4]];
  [v4 setDeviceID:a1[5]];
}

void AFSiriActivationHardwareKeyboardInvocation(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id v10 = AFSiriLogContextConnection;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315906;
    uint64_t v19 = "AFSiriActivationHardwareKeyboardInvocation";
    __int16 v20 = 2048;
    uint64_t v21 = a1;
    __int16 v22 = 2112;
    id v23 = v7;
    __int16 v24 = 2112;
    id v25 = v8;
    _os_log_impl(&dword_19CF1D000, v10, OS_LOG_TYPE_INFO, "%s timestamp = %llu, deviceID = %@, context = %@", buf, 0x2Au);
  }
  v14[0] = MEMORY[0x1E4F143A8];
  v14[1] = 3221225472;
  void v14[2] = __AFSiriActivationHardwareKeyboardInvocation_block_invoke;
  v14[3] = &unk_1E5928DB0;
  id v16 = v8;
  uint64_t v17 = a1;
  id v15 = v7;
  id v11 = v8;
  id v12 = v7;
  id v13 = +[AFSiriActivationContext newWithBuilder:v14];
  AFSiriActivationPerformLegacy(v13, v9);
}

void __AFSiriActivationHardwareKeyboardInvocation_block_invoke(void *a1, void *a2)
{
  uint64_t v3 = a1[6];
  id v4 = a2;
  [v4 setTimestamp:v3];
  [v4 setEvent:8];
  [v4 setSource:14];
  [v4 setOptions:0];
  [v4 setDeviceID:a1[4]];
  [v4 setUserInfo:a1[5]];
}

void AFSiriActivationExternalKeyboardInvocation(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id v10 = AFSiriLogContextConnection;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315906;
    uint64_t v19 = "AFSiriActivationExternalKeyboardInvocation";
    __int16 v20 = 2048;
    uint64_t v21 = a1;
    __int16 v22 = 2112;
    id v23 = v7;
    __int16 v24 = 2112;
    id v25 = v8;
    _os_log_impl(&dword_19CF1D000, v10, OS_LOG_TYPE_INFO, "%s timestamp = %llu, deviceID = %@, context = %@", buf, 0x2Au);
  }
  v14[0] = MEMORY[0x1E4F143A8];
  v14[1] = 3221225472;
  void v14[2] = __AFSiriActivationExternalKeyboardInvocation_block_invoke;
  v14[3] = &unk_1E5928DB0;
  id v16 = v8;
  uint64_t v17 = a1;
  id v15 = v7;
  id v11 = v8;
  id v12 = v7;
  id v13 = +[AFSiriActivationContext newWithBuilder:v14];
  AFSiriActivationPerform(v13, 0, v9);
}

void __AFSiriActivationExternalKeyboardInvocation_block_invoke(void *a1, void *a2)
{
  uint64_t v3 = a1[6];
  id v4 = a2;
  [v4 setTimestamp:v3];
  [v4 setEvent:8];
  [v4 setSource:14];
  [v4 setOptions:0];
  [v4 setDeviceID:a1[4]];
  [v4 setUserInfo:a1[5]];
}

void AFSiriActivationSetOverrideHandlerMapProvider(void *a1)
{
  id v1 = a1;
  os_unfair_lock_lock((os_unfair_lock_t)&s_overrideHandlerMapLock);
  uint64_t v2 = MEMORY[0x19F3A50D0](v1);

  uint64_t v3 = (void *)s_overrideHandlerMapProvider;
  s_overrideHandlerMapProvider = v2;

  id v4 = (void *)s_overrideHandlerMap;
  s_overrideHandlerMap = 0;

  os_unfair_lock_unlock((os_unfair_lock_t)&s_overrideHandlerMapLock);
}

AFRequestInfo *AFSiriActivationCreateRequestInfoFromContext(void *a1)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = AFSiriLogContextConnection;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
  {
    int v40 = 136315394;
    long long v41 = "AFSiriActivationCreateRequestInfoFromContext";
    __int16 v42 = 2112;
    uint64_t v43 = (uint64_t)v1;
    _os_log_impl(&dword_19CF1D000, v2, OS_LOG_TYPE_INFO, "%s context = %@", (uint8_t *)&v40, 0x16u);
  }
  uint64_t v3 = [v1 source];
  uint64_t v4 = [v1 event];
  uint64_t v5 = v4;
  switch(v3)
  {
    case 1:
      if (v4 == 4) {
        goto LABEL_25;
      }
      if (v4 != 16) {
        goto LABEL_20;
      }
      goto LABEL_35;
    case 3:
      if (v4 != 5) {
        goto LABEL_13;
      }
      int v6 = 0;
      uint64_t v7 = 13;
      goto LABEL_41;
    case 4:
      int v6 = 0;
      uint64_t v7 = 14;
      switch(v4)
      {
        case 1:
          goto LABEL_41;
        case 2:
        case 3:
        case 5:
        case 6:
        case 7:
        case 9:
          goto LABEL_32;
        case 4:
          int v6 = 0;
          uint64_t v7 = 15;
          goto LABEL_41;
        case 8:
          int v6 = 0;
          uint64_t v7 = 27;
          goto LABEL_41;
        case 10:
          goto LABEL_21;
        default:
          if (v4 == 16) {
            goto LABEL_35;
          }
          if (v4 != 20) {
            goto LABEL_32;
          }
          int v6 = 0;
          uint64_t v7 = 34;
          break;
      }
      goto LABEL_41;
    case 5:
      if (v4 == 4)
      {
        int v6 = 0;
        uint64_t v7 = 16;
        goto LABEL_41;
      }
      if (v4 == 21)
      {
        int v6 = 0;
        uint64_t v7 = 35;
        goto LABEL_41;
      }
LABEL_13:
      if (v4 == 16) {
        goto LABEL_35;
      }
      goto LABEL_32;
    case 11:
      if (v4 == 17)
      {
        int v6 = 0;
        uint64_t v7 = 30;
      }
      else
      {
        if (v4 != 19) {
          goto LABEL_32;
        }
        int v6 = 0;
        uint64_t v7 = 5;
      }
      goto LABEL_41;
    case 13:
      if (v4 > 15)
      {
        if (v4 == 16)
        {
LABEL_35:
          int v6 = 0;
          uint64_t v7 = 28;
          goto LABEL_41;
        }
        if (v4 == 23)
        {
          int v6 = 0;
          uint64_t v7 = 36;
          goto LABEL_41;
        }
      }
      else
      {
        if (v4 == 4)
        {
          int v6 = 0;
          uint64_t v7 = 31;
          goto LABEL_41;
        }
LABEL_20:
        if (v4 == 10)
        {
LABEL_21:
          int v6 = 0;
          uint64_t v7 = 17;
LABEL_41:
          id v11 = (void *)AFSiriLogContextConnection;
          if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
          {
            id v12 = v11;
            id v13 = off_1E5925980[v7];
            int v14 = AFPreferencesTypeToSiriEnabled();
            int v40 = 136316162;
            long long v41 = "AFSiriActivationCreateRequestInfoFromContext";
            __int16 v42 = 2048;
            uint64_t v43 = v7;
            __int16 v44 = 2112;
            long long v45 = v13;
            __int16 v46 = 1024;
            int v47 = v14;
            __int16 v48 = 1024;
            int v49 = v6;
            _os_log_impl(&dword_19CF1D000, v12, OS_LOG_TYPE_INFO, "%s speechEvent = %ld (%@), isTypeToSiriEnabled = %d, isTextRequest = %d.", (uint8_t *)&v40, 0x2Cu);
          }
          id v10 = -[AFRequestInfo initWithTimestamp:]([AFRequestInfo alloc], "initWithTimestamp:", [v1 timestamp]);
          if (v6)
          {
            id v15 = AFSiriLogContextConnection;
            if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
            {
              int v40 = 136315138;
              long long v41 = "AFSiriActivationCreateRequestInfoFromContext";
              _os_log_impl(&dword_19CF1D000, v15, OS_LOG_TYPE_INFO, "%s Activation context is textRequest. Don't set speechRequestOptions.", (uint8_t *)&v40, 0xCu);
            }
          }
          else
          {
            id v16 = [[AFSpeechRequestOptions alloc] initWithActivationEvent:v7];
            uint64_t v17 = [v1 deviceID];
            [(AFSpeechRequestOptions *)v16 setActivationDeviceIdentifier:v17];

            unint64_t v18 = [v1 timestamp];
            if (_AFMachAbsoluteTimeRate_onceToken != -1) {
              dispatch_once(&_AFMachAbsoluteTimeRate_onceToken, &__block_literal_global_973);
            }
            [(AFSpeechRequestOptions *)v16 setActivationEventTime:*(double *)&_AFMachAbsoluteTimeRate_rate * (double)v18 / 1000000000.0];
            -[AFSpeechRequestOptions setActivationEventMachAbsoluteTime:](v16, "setActivationEventMachAbsoluteTime:", [v1 timestamp]);
            uint64_t v19 = [v1 userInfo];
            __int16 v20 = [v19 objectForKey:@"hasPlayedStartAlert"];
            -[AFSpeechRequestOptions setHasPlayedStartAlert:](v16, "setHasPlayedStartAlert:", [v20 BOOLValue]);

            uint64_t v21 = [v1 userInfo];
            __int16 v22 = [v21 objectForKey:@"voiceTriggerInfo"];
            [(AFSpeechRequestOptions *)v16 setVoiceTriggerEventInfo:v22];

            id v23 = [v1 userInfo];
            __int16 v24 = [v23 objectForKey:@"raiseToSpeakInfo"];
            [(AFSpeechRequestOptions *)v16 setRaiseToSpeakEventInfo:v24];

            id v25 = [v1 userInfo];
            uint64_t v26 = [v25 objectForKey:@"continuousConversationInfo"];
            [(AFSpeechRequestOptions *)v16 setContinuousConversationInfo:v26];

            __int16 v27 = [v1 userInfo];
            id v28 = [v27 objectForKey:@"intuitiveConversationRequestId"];
            [(AFSpeechRequestOptions *)v16 setIntuitiveConversationRequestId:v28];

            if (AFSupportsSCDAFramework_onceToken != -1) {
              dispatch_once(&AFSupportsSCDAFramework_onceToken, &__block_literal_global_226);
            }
            int v29 = AFSupportsSCDAFramework_scdaFrameworkEnabled;
            uint64_t v30 = [v1 userInfo];
            id v31 = v30;
            if (v29)
            {
              __int16 v32 = [v30 objectForKey:@"scdaContext"];
              [(AFSpeechRequestOptions *)v16 setScdaContext:v32];
            }
            else
            {
              __int16 v32 = [v30 objectForKey:@"myriadContext"];
              [(AFSpeechRequestOptions *)v16 setMyriadContext:v32];
            }

            id v33 = [v1 userInfo];
            uint64_t v34 = [v33 objectForKey:@"analyticsContext"];
            [(AFSpeechRequestOptions *)v16 setClientAnalyticsContext:v34];

            unint64_t v35 = [v1 userInfo];
            long long v36 = [v35 objectForKey:@"endpointerMode"];

            if (v36)
            {
              uint64_t v37 = [v36 integerValue];
              if ((unint64_t)(v37 - 1) >= 4) {
                uint64_t v38 = 3;
              }
              else {
                uint64_t v38 = v37;
              }
            }
            else
            {
              uint64_t v38 = 3;
            }

            [(AFSpeechRequestOptions *)v16 setEndpointerOperationMode:v38];
            [(AFRequestInfo *)v10 setSpeechRequestOptions:v16];
          }
          goto LABEL_59;
        }
      }
LABEL_32:
      id v9 = AFSiriLogContextConnection;
      if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_ERROR))
      {
        int v40 = 136315394;
        long long v41 = "AFSiriActivationCreateRequestInfoFromContext";
        __int16 v42 = 2112;
        uint64_t v43 = (uint64_t)v1;
        _os_log_error_impl(&dword_19CF1D000, v9, OS_LOG_TYPE_ERROR, "%s Unable to resolve speech event for context %@.", (uint8_t *)&v40, 0x16u);
      }
      id v10 = 0;
LABEL_59:

      return v10;
    case 14:
      int v8 = AFPreferencesTypeToSiriEnabled();
      if (v5 != 8) {
        goto LABEL_32;
      }
      int v6 = v8;
      uint64_t v7 = 1;
      goto LABEL_41;
    case 15:
      if (v4 != 4) {
        goto LABEL_32;
      }
LABEL_25:
      int v6 = 0;
      uint64_t v7 = 8;
      goto LABEL_41;
    default:
      goto LABEL_32;
  }
}

id AFSiriActivationCreateContextFromXPCDictionary(void *a1)
{
  id v1 = a1;
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  v5[2] = __AFSiriActivationCreateContextFromXPCDictionary_block_invoke;
  void v5[3] = &unk_1E5928E00;
  id v6 = v1;
  id v2 = v1;
  id v3 = +[AFSiriActivationContext newWithBuilder:v5];

  return v3;
}

void __AFSiriActivationCreateContextFromXPCDictionary_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  objc_msgSend(v3, "setTimestamp:", xpc_dictionary_get_uint64(*(xpc_object_t *)(a1 + 32), "t"));
  objc_msgSend(v3, "setEvent:", xpc_dictionary_get_int64(*(xpc_object_t *)(a1 + 32), "e"));
  objc_msgSend(v3, "setSource:", xpc_dictionary_get_int64(*(xpc_object_t *)(a1 + 32), "s"));
  uint64_t v4 = xpc_dictionary_get_value(*(xpc_object_t *)(a1 + 32), "d");
  uint64_t v5 = (void *)v4;
  if (v4 && MEMORY[0x19F3A5530](v4) == MEMORY[0x1E4F145F0])
  {
    id v6 = [NSString alloc];
    string_ptr = xpc_string_get_string_ptr(v5);
    int v8 = (void *)[v6 initWithBytes:string_ptr length:xpc_string_get_length(v5) encoding:4];
    if ([v8 length]) {
      [v3 setDeviceID:v8];
    }
  }
  uint64_t v9 = xpc_dictionary_get_value(*(xpc_object_t *)(a1 + 32), "u");
  id v10 = (void *)v9;
  if (v9 && MEMORY[0x19F3A5530](v9) == MEMORY[0x1E4F14580])
  {
    id v11 = objc_alloc(MEMORY[0x1E4F1C9B8]);
    bytes_ptr = xpc_data_get_bytes_ptr(v10);
    id v13 = (void *)[v11 initWithBytesNoCopy:bytes_ptr length:xpc_data_get_length(v10) freeWhenDone:0];
    if ([v13 length])
    {
      if (AFSupportsSCDAFramework_onceToken != -1) {
        dispatch_once(&AFSupportsSCDAFramework_onceToken, &__block_literal_global_226);
      }
      int v27 = AFSupportsSCDAFramework_scdaFrameworkEnabled;
      __int16 v32 = (void *)MEMORY[0x1E4F1CAD0];
      id v33 = (void *)MEMORY[0x1E4F28DC0];
      uint64_t v31 = objc_opt_class();
      uint64_t v30 = objc_opt_class();
      uint64_t v29 = objc_opt_class();
      uint64_t v28 = objc_opt_class();
      uint64_t v26 = objc_opt_class();
      uint64_t v14 = objc_opt_class();
      uint64_t v15 = objc_opt_class();
      uint64_t v16 = objc_opt_class();
      uint64_t v17 = objc_opt_class();
      uint64_t v18 = objc_opt_class();
      uint64_t v19 = objc_opt_class();
      __int16 v20 = objc_msgSend(v32, "setWithObjects:", v31, v30, v29, v28, v26, v14, v15, v16, v17, v18, v19, objc_opt_class(), 0);
      if (v27)
      {
        uint64_t v35 = 0;
        uint64_t v21 = (id *)&v35;
        __int16 v22 = &v35;
      }
      else
      {
        uint64_t v34 = 0;
        uint64_t v21 = (id *)&v34;
        __int16 v22 = &v34;
      }
      id v23 = [v33 unarchivedObjectOfClasses:v20 fromData:v13 error:v22];
      id v24 = *v21;

      if (v24)
      {
        id v25 = AFSiriLogContextUtility;
        if (os_log_type_enabled((os_log_t)AFSiriLogContextUtility, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          uint64_t v37 = "AFSiriActivationCreateContextFromXPCDictionary_block_invoke";
          __int16 v38 = 2112;
          id v39 = v24;
          _os_log_error_impl(&dword_19CF1D000, v25, OS_LOG_TYPE_ERROR, "%s Unable to deserialize user info data due to error %@.", buf, 0x16u);
        }
      }
      if ([v23 count]) {
        [v3 setUserInfo:v23];
      }
    }
  }
}

id AFSiriActivationCreateXPCDictionaryFromContext(void *a1)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  *(_OWORD *)keys = xmmword_1E5928E20;
  __int16 v20 = "s";
  values[0] = xpc_uint64_create([v1 timestamp]);
  values[1] = xpc_int64_create([v1 event]);
  values[2] = xpc_int64_create([v1 source]);
  xpc_object_t v2 = xpc_dictionary_create((const char *const *)keys, values, 3uLL);
  id v3 = [v1 deviceID];
  if ([v3 length]) {
    xpc_dictionary_set_string(v2, "d", (const char *)[v3 UTF8String]);
  }
  uint64_t v4 = [v1 userInfo];
  if ([v4 count])
  {
    id v11 = 0;
    uint64_t v5 = [MEMORY[0x1E4F28DB0] archivedDataWithRootObject:v4 requiringSecureCoding:1 error:&v11];
    id v6 = v11;
    if (v6)
    {
      uint64_t v7 = AFSiriLogContextUtility;
      if (os_log_type_enabled((os_log_t)AFSiriLogContextUtility, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        id v13 = "AFSiriActivationCreateXPCDictionaryFromContext";
        __int16 v14 = 2112;
        uint64_t v15 = v4;
        __int16 v16 = 2112;
        id v17 = v6;
        _os_log_error_impl(&dword_19CF1D000, v7, OS_LOG_TYPE_ERROR, "%s Unable to serialize user info %@ due to error %@.", buf, 0x20u);
      }
    }
    if ([v5 length])
    {
      id v8 = v5;
      xpc_dictionary_set_data(v2, "u", (const void *)[v8 bytes], objc_msgSend(v8, "length"));
    }
  }
  for (uint64_t i = 2; i != -1; --i)

  return v2;
}

id AFSiriActivationCreateResultFromXPCDictionary(void *a1)
{
  id v1 = a1;
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  v5[2] = __AFSiriActivationCreateResultFromXPCDictionary_block_invoke;
  void v5[3] = &unk_1E59294E8;
  id v6 = v1;
  id v2 = v1;
  id v3 = +[AFSiriActivationResult newWithBuilder:v5];

  return v3;
}

void __AFSiriActivationCreateResultFromXPCDictionary_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  objc_msgSend(v3, "setActionType:", xpc_dictionary_get_int64(*(xpc_object_t *)(a1 + 32), "a"));
  uint64_t v4 = xpc_dictionary_get_value(*(xpc_object_t *)(a1 + 32), "e");
  uint64_t v5 = (void *)v4;
  if (v4 && MEMORY[0x19F3A5530](v4) == MEMORY[0x1E4F14580])
  {
    id v6 = objc_alloc(MEMORY[0x1E4F1C9B8]);
    bytes_ptr = xpc_data_get_bytes_ptr(v5);
    id v8 = (void *)[v6 initWithBytesNoCopy:bytes_ptr length:xpc_data_get_length(v5) freeWhenDone:0];
    if (![v8 length])
    {
LABEL_9:

      goto LABEL_10;
    }
    id v12 = 0;
    uint64_t v9 = [MEMORY[0x1E4F28DC0] unarchivedObjectOfClass:objc_opt_class() fromData:v8 error:&v12];
    id v10 = v12;
    if (v10
      && (id v11 = AFSiriLogContextUtility,
          os_log_type_enabled((os_log_t)AFSiriLogContextUtility, OS_LOG_TYPE_ERROR)))
    {
      *(_DWORD *)buf = 136315394;
      __int16 v14 = "AFSiriActivationCreateResultFromXPCDictionary_block_invoke";
      __int16 v15 = 2112;
      id v16 = v10;
      _os_log_error_impl(&dword_19CF1D000, v11, OS_LOG_TYPE_ERROR, "%s Unable to deserialize error data due to error %@.", buf, 0x16u);
      if (!v9) {
        goto LABEL_8;
      }
    }
    else if (!v9)
    {
LABEL_8:

      goto LABEL_9;
    }
    [v3 setError:v9];
    goto LABEL_8;
  }
LABEL_10:
}

id AFSiriActivationCreateXPCDictionaryFromResult(void *a1)
{
  keys[1] = *(char **)MEMORY[0x1E4F143B8];
  keys[0] = "a";
  id v1 = a1;
  xpc_object_t values = xpc_int64_create([v1 actionType]);
  xpc_object_t v2 = xpc_dictionary_create((const char *const *)keys, &values, 1uLL);
  id v3 = [v1 error];

  if (v3)
  {
    id v9 = 0;
    uint64_t v4 = [MEMORY[0x1E4F28DB0] archivedDataWithRootObject:v3 requiringSecureCoding:1 error:&v9];
    id v5 = v9;
    if (v5)
    {
      id v6 = AFSiriLogContextUtility;
      if (os_log_type_enabled((os_log_t)AFSiriLogContextUtility, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        id v11 = "AFSiriActivationCreateXPCDictionaryFromResult";
        __int16 v12 = 2112;
        id v13 = v3;
        __int16 v14 = 2112;
        id v15 = v5;
        _os_log_error_impl(&dword_19CF1D000, v6, OS_LOG_TYPE_ERROR, "%s Unable to serialize error %@ due to error %@.", buf, 0x20u);
      }
    }
    if ([v4 length])
    {
      id v7 = v4;
      xpc_dictionary_set_data(v2, "e", (const void *)[v7 bytes], objc_msgSend(v7, "length"));
    }
  }
  return v2;
}

void SoftBiomeLibrary()
{
  uint64_t v6 = 0;
  id v7 = &v6;
  uint64_t v8 = 0x2020000000;
  uint64_t v0 = (void (*)(void))getBiomeLibrarySymbolLoc_ptr;
  id v9 = getBiomeLibrarySymbolLoc_ptr;
  if (!getBiomeLibrarySymbolLoc_ptr)
  {
    v5[0] = MEMORY[0x1E4F143A8];
    v5[1] = 3221225472;
    v5[2] = __getBiomeLibrarySymbolLoc_block_invoke;
    void v5[3] = &unk_1E592C0B0;
    void v5[4] = &v6;
    __getBiomeLibrarySymbolLoc_block_invoke(v5);
    uint64_t v0 = (void (*)(void))v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (v0)
  {
    id v1 = v0();
    id v2 = v1;
  }
  else
  {
    id v3 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v4 = [NSString stringWithUTF8String:"id<BMRootLibrary> SoftBiomeLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"AFEvents_Internal.h", 21, @"%s", dlerror());

    __break(1u);
  }
}

void sub_19D02D440(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getBiomeLibrarySymbolLoc_block_invoke(void *a1)
{
  uint64_t v2 = BiomeLibraryLibraryCore();
  if (v2)
  {
    id v3 = (void *)v2;
  }
  else
  {
    a1 = [MEMORY[0x1E4F28B00] currentHandler];
    id v3 = [NSString stringWithUTF8String:"void *BiomeLibraryLibrary(void)"];
    objc_msgSend(a1, "handleFailureInFunction:file:lineNumber:description:", v3, @"AFEvents_Internal.h", 20, @"%s", 0);

    __break(1u);
    free(v5);
  }
  uint64_t result = dlsym(v3, "BiomeLibrary");
  *(void *)(*(void *)(a1[4] + 8) + 24) = result;
  getBiomeLibrarySymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(a1[4] + 8) + 24);
  return result;
}

uint64_t BiomeLibraryLibraryCore()
{
  if (!BiomeLibraryLibraryCore_frameworkLibrary_26907) {
    BiomeLibraryLibraryCore_frameworkLibrary_26907 = _sl_dlopen();
  }
  return BiomeLibraryLibraryCore_frameworkLibrary_26907;
}

uint64_t __BiomeLibraryLibraryCore_block_invoke_26908()
{
  uint64_t result = _sl_dlopen();
  BiomeLibraryLibraryCore_frameworkLibrary_26907 = result;
  return result;
}

void sub_19D02E400(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getBMSiriServiceClass_block_invoke_26925(uint64_t a1)
{
  BiomeLibraryLibraryCore();
  Class result = objc_getClass("BMSiriService");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getBMSiriServiceClass_softClass_26924 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

id AFPeerContentTupleGetContentMapFromArray(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  id v9 = a1;
  id v10 = a2;
  id v11 = a3;
  uint64_t v34 = a4;
  __int16 v32 = (void (**)(void, void))v10;
  if (v10)
  {
    if (!a5) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  uint64_t v26 = [MEMORY[0x1E4F28B00] currentHandler];
  int v27 = objc_msgSend(NSString, "stringWithUTF8String:", "NSDictionary<NSString *,id> * _Nullable AFPeerContentTupleGetContentMapFromArray(NSArray<AFPeerContentTuple *> * _Nullable __strong, __strong AFPeerContentTupleKeyProvider _Nonnull, AFPeerContentTupleContentFilter  _Nullable __strong, AFPeerContentTupleFallbackPeerProvider  _Nullable __strong, NSArray<AFPeerContentTuple *> * _Nullable __autoreleasing * _Nullable)");
  [v26 handleFailureInFunction:v27, @"AFPeerContentUtils.m", 15, @"Invalid parameter not satisfying: %@", @"keyProvider != nil" file lineNumber description];

  if (a5) {
LABEL_3:
  }
    *a5 = 0;
LABEL_4:
  if (v9)
  {
    uint64_t v12 = [v9 count];
    if (v12)
    {
      uint64_t v30 = (void *)[objc_alloc(MEMORY[0x1E4F1CA60]) initWithCapacity:v12];
      uint64_t v28 = a5;
      if (a5) {
        id v13 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
      }
      else {
        id v13 = 0;
      }
      long long v37 = 0u;
      long long v38 = 0u;
      long long v35 = 0u;
      long long v36 = 0u;
      id v29 = v9;
      id obj = v9;
      uint64_t v15 = [obj countByEnumeratingWithState:&v35 objects:v39 count:16];
      if (v15)
      {
        uint64_t v16 = v15;
        uint64_t v17 = *(void *)v36;
        do
        {
          uint64_t v18 = 0;
          uint64_t v31 = v16;
          do
          {
            if (*(void *)v36 != v17) {
              objc_enumerationMutation(obj);
            }
            uint64_t v19 = *(void **)(*((void *)&v35 + 1) + 8 * v18);
            __int16 v20 = [v19 content];
            if (v20 && (!v11 || (v11[2](v11, v20) & 1) != 0))
            {
              uint64_t v21 = [v19 info];
              if (v21)
              {
                __int16 v22 = ((void (**)(void, void *))v32)[2](v32, v21);
              }
              else
              {
                __int16 v22 = 0;
              }
              if (v34 && !v22)
              {
                id v23 = v34[2](v34, v20);
                if (v23)
                {
                  __int16 v22 = ((void (**)(void, void *))v32)[2](v32, v23);
                }
                else
                {
                  __int16 v22 = 0;
                }
              }
              if (v22)
              {
                id v24 = [v30 objectForKey:v22];

                if (v24) {
                  [v13 addObject:v19];
                }
                else {
                  [v30 setObject:v20 forKey:v22];
                }
                uint64_t v16 = v31;
              }
              else
              {
                [v13 addObject:v19];
              }
            }
            else
            {
              [v13 addObject:v19];
            }

            ++v18;
          }
          while (v16 != v18);
          uint64_t v16 = [obj countByEnumeratingWithState:&v35 objects:v39 count:16];
        }
        while (v16);
      }

      if (v28) {
        *uint64_t v28 = (id)[v13 copy];
      }
      __int16 v14 = (void *)[v30 copy];

      id v9 = v29;
    }
    else
    {
      __int16 v14 = (void *)MEMORY[0x1E4F1CC08];
    }
  }
  else
  {
    __int16 v14 = 0;
  }

  return v14;
}

BOOL AFMediaPlaybackStateGetIsValid(unint64_t a1)
{
  return a1 < 6;
}

BOOL AFMediaPlaybackStateGetIsValidAndSpecified(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 5;
}

__CFString *AFMediaPlaybackStateGetName(unint64_t a1)
{
  if (a1 > 5) {
    return @"(unknown)";
  }
  else {
    return *(&off_1E5928EB8 + a1);
  }
}

uint64_t AFMediaPlaybackStateGetFromName(void *a1)
{
  id v1 = a1;
  if ([v1 length])
  {
    if (AFMediaPlaybackStateGetFromName_onceToken != -1) {
      dispatch_once(&AFMediaPlaybackStateGetFromName_onceToken, &__block_literal_global_27101);
    }
    uint64_t v2 = [(id)AFMediaPlaybackStateGetFromName_map objectForKey:v1];
    uint64_t v3 = [v2 integerValue];
  }
  else
  {
    uint64_t v3 = 0;
  }

  return v3;
}

void __AFMediaPlaybackStateGetFromName_block_invoke()
{
  uint64_t v0 = (void *)AFMediaPlaybackStateGetFromName_map;
  AFMediaPlaybackStateGetFromName_map = (uint64_t)&unk_1EEE98D10;
}

void *MediaExperienceLibrary_27262()
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v4[0] = 0;
  if (!MediaExperienceLibraryCore_frameworkLibrary_27290)
  {
    v4[1] = (void *)MEMORY[0x1E4F143A8];
    v4[2] = (void *)3221225472;
    v4[3] = __MediaExperienceLibraryCore_block_invoke_27291;
    v4[4] = &__block_descriptor_40_e5_v8__0l;
    void v4[5] = v4;
    long long v5 = xmmword_1E5928EE8;
    uint64_t v6 = 0;
    MediaExperienceLibraryCore_frameworkLibrary_27290 = _sl_dlopen();
  }
  uint64_t v0 = (void *)MediaExperienceLibraryCore_frameworkLibrary_27290;
  if (!MediaExperienceLibraryCore_frameworkLibrary_27290)
  {
    uint64_t v0 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v3 = [NSString stringWithUTF8String:"void *MediaExperienceLibrary(void)"];
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v3, @"AFSiriAudioRoute.m", 25, @"%s", v4[0]);

    __break(1u);
    goto LABEL_7;
  }
  id v1 = v4[0];
  if (v4[0]) {
LABEL_7:
  }
    free(v1);
  return v0;
}

uint64_t __MediaExperienceLibraryCore_block_invoke_27291()
{
  uint64_t result = _sl_dlopen();
  MediaExperienceLibraryCore_frameworkLibrary_27290 = result;
  return result;
}

BOOL AFUserIdentityClassficationGetIsValid(unint64_t a1)
{
  return a1 < 5;
}

BOOL AFUserIdentityClassficationGetIsValidAndSpecified(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 4;
}

__CFString *AFUserIdentityClassficationGetName(unint64_t a1)
{
  if (a1 > 4) {
    return @"(unknown)";
  }
  else {
    return off_1E5928F00[a1];
  }
}

uint64_t AFUserIdentityClassficationGetFromName(void *a1)
{
  id v1 = a1;
  if ([v1 length])
  {
    if (AFUserIdentityClassficationGetFromName_onceToken != -1) {
      dispatch_once(&AFUserIdentityClassficationGetFromName_onceToken, &__block_literal_global_27321);
    }
    uint64_t v2 = [(id)AFUserIdentityClassficationGetFromName_map objectForKey:v1];
    uint64_t v3 = [v2 integerValue];
  }
  else
  {
    uint64_t v3 = 0;
  }

  return v3;
}

void __AFUserIdentityClassficationGetFromName_block_invoke()
{
  uint64_t v0 = (void *)AFUserIdentityClassficationGetFromName_map;
  AFUserIdentityClassficationGetFromName_map = (uint64_t)&unk_1EEE98D38;
}

BOOL AFSetAudioSessionActiveReasonGetIsValid(unint64_t a1)
{
  return a1 < 4;
}

BOOL AFSetAudioSessionActiveReasonGetIsValidAndSpecified(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 3;
}

__CFString *AFSetAudioSessionActiveReasonGetName(unint64_t a1)
{
  if (a1 > 3) {
    return @"(unknown)";
  }
  else {
    return off_1E5928FD8[a1];
  }
}

uint64_t AFSetAudioSessionActiveReasonGetFromName(void *a1)
{
  id v1 = a1;
  if ([v1 length])
  {
    if (AFSetAudioSessionActiveReasonGetFromName_onceToken != -1) {
      dispatch_once(&AFSetAudioSessionActiveReasonGetFromName_onceToken, &__block_literal_global_28150);
    }
    uint64_t v2 = [(id)AFSetAudioSessionActiveReasonGetFromName_map objectForKey:v1];
    uint64_t v3 = [v2 integerValue];
  }
  else
  {
    uint64_t v3 = 0;
  }

  return v3;
}

void __AFSetAudioSessionActiveReasonGetFromName_block_invoke()
{
  uint64_t v0 = (void *)AFSetAudioSessionActiveReasonGetFromName_map;
  AFSetAudioSessionActiveReasonGetFromName_map = (uint64_t)&unk_1EEE98D60;
}

void sub_19D034804(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

__CFString *AFOpportuneSpeakingModelTypeGetDescription(unint64_t a1)
{
  if (a1 > 4) {
    return 0;
  }
  else {
    return off_1E5929070[a1];
  }
}

uint64_t AFSetAudioSessionInactiveOptionsValidate(char a1)
{
  return a1 & 1;
}

id AFSetAudioSessionInactiveOptionsGetNames(uint64_t a1)
{
  if (a1)
  {
    char v1 = a1;
    id v2 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
    uint64_t v3 = v2;
    if (v1) {
      [v2 addObject:@"performsOnlyIfIdle"];
    }
    uint64_t v4 = (void *)[v3 copy];
  }
  else
  {
    uint64_t v4 = (void *)MEMORY[0x1E4F1CBF0];
  }
  return v4;
}

uint64_t AFSetAudioSessionInactiveOptionsGetFromNames(void *a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if ([v1 count])
  {
    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v12 = v1;
    id v2 = v1;
    uint64_t v3 = [v2 countByEnumeratingWithState:&v13 objects:v17 count:16];
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = 0;
      uint64_t v6 = *(void *)v14;
      do
      {
        uint64_t v7 = 0;
        do
        {
          if (*(void *)v14 != v6) {
            objc_enumerationMutation(v2);
          }
          id v8 = *(id *)(*((void *)&v13 + 1) + 8 * v7);
          if ([v8 length])
          {
            if (_AFSetAudioSessionInactiveOptionsGetFromName_onceToken != -1) {
              dispatch_once(&_AFSetAudioSessionInactiveOptionsGetFromName_onceToken, &__block_literal_global_28712);
            }
            id v9 = [(id)_AFSetAudioSessionInactiveOptionsGetFromName_map objectForKey:v8];
            uint64_t v10 = [v9 unsignedIntegerValue];
          }
          else
          {
            uint64_t v10 = 0;
          }

          v5 |= v10;
          ++v7;
        }
        while (v4 != v7);
        uint64_t v4 = [v2 countByEnumeratingWithState:&v13 objects:v17 count:16];
      }
      while (v4);
    }
    else
    {
      uint64_t v5 = 0;
    }

    id v1 = v12;
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

void sub_19D03814C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 96), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__28754(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__28755(uint64_t a1)
{
}

uint64_t AFClockAlarmRepeatOptionsValidate(char a1)
{
  return a1 & 0x7F;
}

id AFClockAlarmRepeatOptionsGetNames(uint64_t a1)
{
  if (a1)
  {
    char v1 = a1;
    id v2 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
    uint64_t v3 = v2;
    if (v1)
    {
      [v2 addObject:@"monday"];
      if ((v1 & 2) == 0)
      {
LABEL_4:
        if ((v1 & 4) == 0) {
          goto LABEL_5;
        }
        goto LABEL_17;
      }
    }
    else if ((v1 & 2) == 0)
    {
      goto LABEL_4;
    }
    [v3 addObject:@"tuesday"];
    if ((v1 & 4) == 0)
    {
LABEL_5:
      if ((v1 & 8) == 0) {
        goto LABEL_6;
      }
      goto LABEL_18;
    }
LABEL_17:
    [v3 addObject:@"wednesday"];
    if ((v1 & 8) == 0)
    {
LABEL_6:
      if ((v1 & 0x10) == 0) {
        goto LABEL_7;
      }
      goto LABEL_19;
    }
LABEL_18:
    [v3 addObject:@"thursday"];
    if ((v1 & 0x10) == 0)
    {
LABEL_7:
      if ((v1 & 0x20) == 0) {
        goto LABEL_8;
      }
      goto LABEL_20;
    }
LABEL_19:
    [v3 addObject:@"friday"];
    if ((v1 & 0x20) == 0)
    {
LABEL_8:
      if ((v1 & 0x40) == 0)
      {
LABEL_10:
        uint64_t v4 = (void *)[v3 copy];

        goto LABEL_12;
      }
LABEL_9:
      [v3 addObject:@"sunday"];
      goto LABEL_10;
    }
LABEL_20:
    [v3 addObject:@"saturday"];
    if ((v1 & 0x40) == 0) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  uint64_t v4 = (void *)MEMORY[0x1E4F1CBF0];
LABEL_12:
  return v4;
}

uint64_t AFClockAlarmRepeatOptionsGetFromNames(void *a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if ([v1 count])
  {
    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v12 = v1;
    id v2 = v1;
    uint64_t v3 = [v2 countByEnumeratingWithState:&v13 objects:v17 count:16];
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = 0;
      uint64_t v6 = *(void *)v14;
      do
      {
        uint64_t v7 = 0;
        do
        {
          if (*(void *)v14 != v6) {
            objc_enumerationMutation(v2);
          }
          id v8 = *(id *)(*((void *)&v13 + 1) + 8 * v7);
          if ([v8 length])
          {
            if (_AFClockAlarmRepeatOptionsGetFromName_onceToken != -1) {
              dispatch_once(&_AFClockAlarmRepeatOptionsGetFromName_onceToken, &__block_literal_global_28790);
            }
            id v9 = [(id)_AFClockAlarmRepeatOptionsGetFromName_map objectForKey:v8];
            uint64_t v10 = [v9 unsignedIntegerValue];
          }
          else
          {
            uint64_t v10 = 0;
          }

          v5 |= v10;
          ++v7;
        }
        while (v4 != v7);
        uint64_t v4 = [v2 countByEnumeratingWithState:&v13 objects:v17 count:16];
      }
      while (v4);
    }
    else
    {
      uint64_t v5 = 0;
    }

    id v1 = v12;
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

void sub_19D0391CC(_Unwind_Exception *a1)
{
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 72));
  _Unwind_Resume(a1);
}

BOOL AFHomeAccessorySiriDataSharingPropagationEventGetIsValid(unint64_t a1)
{
  return a1 < 5;
}

BOOL AFHomeAccessorySiriDataSharingPropagationEventGetIsValidAndSpecified(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 4;
}

__CFString *AFHomeAccessorySiriDataSharingPropagationEventGetName(unint64_t a1)
{
  if (a1 > 4) {
    return @"(unknown)";
  }
  else {
    return off_1E5929200[a1];
  }
}

uint64_t AFHomeAccessorySiriDataSharingPropagationEventGetFromName(void *a1)
{
  id v1 = a1;
  if ([v1 length])
  {
    if (AFHomeAccessorySiriDataSharingPropagationEventGetFromName_onceToken != -1) {
      dispatch_once(&AFHomeAccessorySiriDataSharingPropagationEventGetFromName_onceToken, &__block_literal_global_29204);
    }
    id v2 = [(id)AFHomeAccessorySiriDataSharingPropagationEventGetFromName_map objectForKey:v1];
    uint64_t v3 = [v2 integerValue];
  }
  else
  {
    uint64_t v3 = 0;
  }

  return v3;
}

void __AFHomeAccessorySiriDataSharingPropagationEventGetFromName_block_invoke()
{
  uint64_t v0 = (void *)AFHomeAccessorySiriDataSharingPropagationEventGetFromName_map;
  AFHomeAccessorySiriDataSharingPropagationEventGetFromName_map = (uint64_t)&unk_1EEE98DD8;
}

id initAWAttentionAwarenessClient()
{
  if (initAWAttentionAwarenessClient_sOnce != -1) {
    dispatch_once(&initAWAttentionAwarenessClient_sOnce, &__block_literal_global_25);
  }
  uint64_t v0 = (void *)classAWAttentionAwarenessClient;
  return v0;
}

Class __initAWAttentionAwarenessClient_block_invoke()
{
  AttentionAwarenessLibrary();
  Class result = objc_getClass("AWAttentionAwarenessClient");
  classAWAttentionAwarenessClient = (uint64_t)result;
  if (!result) {
    __assert_rtn("initAWAttentionAwarenessClient_block_invoke", "AFAttentionAwarenessController.m", 16, "classAWAttentionAwarenessClient");
  }
  getAWAttentionAwarenessClientClass = AWAttentionAwarenessClientFunction;
  return result;
}

void AttentionAwarenessLibrary()
{
  if (!AttentionAwarenessLibrary_frameworkLibrary)
  {
    AttentionAwarenessLibrary_frameworkLibrary = (uint64_t)dlopen("/System/Library/PrivateFrameworks/AttentionAwareness.framework/AttentionAwareness", 2);
    if (!AttentionAwarenessLibrary_frameworkLibrary) {
      __assert_rtn("AttentionAwarenessLibrary", "AFAttentionAwarenessController.m", 15, "frameworkLibrary");
    }
  }
}

id AWAttentionAwarenessClientFunction()
{
  return (id)classAWAttentionAwarenessClient;
}

id initAWAttentionAwarenessConfiguration()
{
  if (initAWAttentionAwarenessConfiguration_sOnce != -1) {
    dispatch_once(&initAWAttentionAwarenessConfiguration_sOnce, &__block_literal_global_29254);
  }
  uint64_t v0 = (void *)classAWAttentionAwarenessConfiguration;
  return v0;
}

Class __initAWAttentionAwarenessConfiguration_block_invoke()
{
  AttentionAwarenessLibrary();
  Class result = objc_getClass("AWAttentionAwarenessConfiguration");
  classAWAttentionAwarenessConfiguration = (uint64_t)result;
  if (!result) {
    __assert_rtn("initAWAttentionAwarenessConfiguration_block_invoke", "AFAttentionAwarenessController.m", 17, "classAWAttentionAwarenessConfiguration");
  }
  getAWAttentionAwarenessConfigurationClass = AWAttentionAwarenessConfigurationFunction;
  return result;
}

id AWAttentionAwarenessConfigurationFunction()
{
  return (id)classAWAttentionAwarenessConfiguration;
}

BOOL AFRequestCancellationReasonGetIsValid(unint64_t a1)
{
  return a1 < 0xF;
}

BOOL AFRequestCancellationReasonGetIsValidAndSpecified(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 0xE;
}

__CFString *AFRequestCancellationReasonGetName(unint64_t a1)
{
  if (a1 > 0xE) {
    return @"(unknown)";
  }
  else {
    return off_1E5929228[a1];
  }
}

uint64_t AFRequestCancellationReasonGetFromName(void *a1)
{
  id v1 = a1;
  if ([v1 length])
  {
    if (AFRequestCancellationReasonGetFromName_onceToken != -1) {
      dispatch_once(&AFRequestCancellationReasonGetFromName_onceToken, &__block_literal_global_29311);
    }
    id v2 = [(id)AFRequestCancellationReasonGetFromName_map objectForKey:v1];
    uint64_t v3 = [v2 integerValue];
  }
  else
  {
    uint64_t v3 = 0;
  }

  return v3;
}

void __AFRequestCancellationReasonGetFromName_block_invoke()
{
  uint64_t v0 = (void *)AFRequestCancellationReasonGetFromName_map;
  AFRequestCancellationReasonGetFromName_map = (uint64_t)&unk_1EEE98E00;
}

BOOL AFExperimentDeploymentReasonGetIsValid(unint64_t a1)
{
  return a1 < 3;
}

BOOL AFExperimentDeploymentReasonGetIsValidAndSpecified(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 2;
}

__CFString *AFExperimentDeploymentReasonGetName(unint64_t a1)
{
  if (a1 > 2) {
    return @"(unknown)";
  }
  else {
    return off_1E5929348[a1];
  }
}

uint64_t AFExperimentDeploymentReasonGetFromName(void *a1)
{
  id v1 = a1;
  if ([v1 length])
  {
    if (AFExperimentDeploymentReasonGetFromName_onceToken != -1) {
      dispatch_once(&AFExperimentDeploymentReasonGetFromName_onceToken, &__block_literal_global_29954);
    }
    id v2 = [(id)AFExperimentDeploymentReasonGetFromName_map objectForKey:v1];
    uint64_t v3 = [v2 integerValue];
  }
  else
  {
    uint64_t v3 = 0;
  }

  return v3;
}

void __AFExperimentDeploymentReasonGetFromName_block_invoke()
{
  uint64_t v0 = (void *)AFExperimentDeploymentReasonGetFromName_map;
  AFExperimentDeploymentReasonGetFromName_map = (uint64_t)&unk_1EEE98E28;
}

id AFSiriActivationServiceGetXPCInterface()
{
  if (AFSiriActivationServiceGetXPCInterface_onceToken != -1) {
    dispatch_once(&AFSiriActivationServiceGetXPCInterface_onceToken, &__block_literal_global_30081);
  }
  uint64_t v0 = (void *)AFSiriActivationServiceGetXPCInterface_interface;
  return v0;
}

void __AFSiriActivationServiceGetXPCInterface_block_invoke()
{
  uint64_t v0 = [MEMORY[0x1E4F29280] interfaceWithProtocol:&unk_1EEEA29C0];
  id v1 = (void *)AFSiriActivationServiceGetXPCInterface_interface;
  AFSiriActivationServiceGetXPCInterface_interface = v0;
}

uint64_t AFSiriActivationServiceGetPort()
{
  if (AFIsHorseman_onceToken != -1) {
    dispatch_once(&AFIsHorseman_onceToken, &__block_literal_global_220_45602);
  }
  if (AFIsHorseman_isHorseman) {
    return 2;
  }
  else {
    return 1;
  }
}

__CFString *AFSiriActivationServiceGetMachServiceName(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 2)
  {
    id v2 = 0;
  }
  else
  {
    id v2 = *off_1E5929378[a1 - 1];
  }
  return v2;
}

AFAnalyticsEvent *_AFAnalyticsEventCreate(uint64_t a1, unint64_t a2, void *a3)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  uint64_t v6 = (void *)MEMORY[0x19F3A4E70]();
  if (v5)
  {
    id v16 = 0;
    uint64_t v7 = [MEMORY[0x1E4F28D90] dataWithJSONObject:v5 options:0 error:&v16];
    id v8 = v16;
    if (v8)
    {
      id v9 = AFSiriLogContextAnalytics;
      if (os_log_type_enabled((os_log_t)AFSiriLogContextAnalytics, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        uint64_t v18 = "_AFAnalyticsEventCreate";
        __int16 v19 = 2112;
        id v20 = v5;
        __int16 v21 = 2112;
        id v22 = v8;
        _os_log_error_impl(&dword_19CF1D000, v9, OS_LOG_TYPE_ERROR, "%s Failed to serialize context %@ to JSON due to error %@.", buf, 0x20u);
      }

      uint64_t v7 = 0;
    }
    if ([v7 length])
    {
      id v10 = objc_alloc(MEMORY[0x1E4F1C9B8]);
      id v11 = v7;
      id v12 = objc_msgSend(v10, "initWithBytes:length:", objc_msgSend(v11, "bytes"), objc_msgSend(v11, "length"));
      uint64_t v13 = 2;
    }
    else
    {
      id v12 = 0;
      uint64_t v13 = 0;
    }
  }
  else
  {
    id v12 = 0;
    uint64_t v13 = 0;
  }
  if (_AFMachAbsoluteTimeRate_onceToken != -1) {
    dispatch_once(&_AFMachAbsoluteTimeRate_onceToken, &__block_literal_global_973);
  }
  long long v14 = [[AFAnalyticsEvent alloc] initWithDeliveryStream:0 type:a1 timestamp:(unint64_t)(*(double *)&_AFMachAbsoluteTimeRate_rate * (double)a2) contextDataType:v13 contextData:v12];

  return v14;
}

id _AFAnalyticsEventGetContextGuarded(uint64_t a1, uint64_t a2, void *a3)
{
  id v3 = a3;
  uint64_t v4 = v3;
  if (v3)
  {
    id v5 = (*((void (**)(id))v3 + 2))(v3);
  }
  else
  {
    id v5 = 0;
  }

  return v5;
}

void sub_19D03EB0C(_Unwind_Exception *a1)
{
}

id AFAnalyticsEventCreateCurrent(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = mach_absolute_time();
  kdebug_trace();
  id v5 = _AFAnalyticsEventCreate(a1, v4, v3);

  return v5;
}

BOOL AFEnablementFlowGetIsValid(unint64_t a1)
{
  return a1 < 0xA;
}

BOOL AFEnablementFlowGetIsValidAndSpecified(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 9;
}

__CFString *AFEnablementFlowGetName(unint64_t a1)
{
  if (a1 > 9) {
    return @"(unknown)";
  }
  else {
    return off_1E5929458[a1];
  }
}

uint64_t AFEnablementFlowGetFromName(void *a1)
{
  id v1 = a1;
  if ([v1 length])
  {
    if (AFEnablementFlowGetFromName_onceToken != -1) {
      dispatch_once(&AFEnablementFlowGetFromName_onceToken, &__block_literal_global_30223);
    }
    id v2 = [(id)AFEnablementFlowGetFromName_map objectForKey:v1];
    uint64_t v3 = [v2 integerValue];
  }
  else
  {
    uint64_t v3 = 0;
  }

  return v3;
}

void __AFEnablementFlowGetFromName_block_invoke()
{
  uint64_t v0 = (void *)AFEnablementFlowGetFromName_map;
  AFEnablementFlowGetFromName_map = (uint64_t)&unk_1EEE98E50;
}

uint64_t AFAudioSessionAssertionServiceXPCInterface()
{
  return [MEMORY[0x1E4F29280] interfaceWithProtocol:&unk_1EEEE6E28];
}

void sub_19D0406AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location, char a16)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Block_object_dispose(&a16, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__30468(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__30469(uint64_t a1)
{
}

unsigned int AFMyriadGoodnessComputeExponentialBoost(double a1, double a2, double a3, double a4, double a5)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  double v5 = exp(-((a2 - a1) * a4 + a3 * ((a2 - a1) * (a2 - a1)) + a5));
  uint64_t v6 = AFSiriLogContextConnection;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
  {
    int v8 = 136315394;
    id v9 = "AFMyriadGoodnessComputeExponentialBoost";
    __int16 v10 = 2048;
    double v11 = v5;
    _os_log_impl(&dword_19CF1D000, v6, OS_LOG_TYPE_INFO, "%s #myriad exponential bump %f", (uint8_t *)&v8, 0x16u);
  }
  return llround(v5);
}

void sub_19D0484EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getLSApplicationRecordClass_block_invoke(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  v6[0] = 0;
  if (!CoreServicesLibraryCore_frameworkLibrary)
  {
    v6[1] = (void *)MEMORY[0x1E4F143A8];
    v6[2] = (void *)3221225472;
    v6[3] = __CoreServicesLibraryCore_block_invoke;
    v6[4] = &__block_descriptor_40_e5_v8__0l;
    v6[5] = v6;
    long long v7 = xmmword_1E59296C8;
    uint64_t v8 = 0;
    CoreServicesLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!CoreServicesLibraryCore_frameworkLibrary)
  {
    uint64_t v3 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v4 = [NSString stringWithUTF8String:"void *CoreServicesLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"AFSiriAnnouncementRequestCapabilityManager.m", 18, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("LSApplicationRecord");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    uint64_t v3 = [MEMORY[0x1E4F28B00] currentHandler];
    double v5 = [NSString stringWithUTF8String:"Class getLSApplicationRecordClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"AFSiriAnnouncementRequestCapabilityManager.m", 19, @"Unable to find class %s", "LSApplicationRecord");

LABEL_10:
    __break(1u);
  }
  getLSApplicationRecordClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

Class __getINAppInfoClass_block_invoke(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  v6[0] = 0;
  if (!IntentsLibraryCore_frameworkLibrary_30885)
  {
    v6[1] = (void *)MEMORY[0x1E4F143A8];
    v6[2] = (void *)3221225472;
    v6[3] = __IntentsLibraryCore_block_invoke_30886;
    v6[4] = &__block_descriptor_40_e5_v8__0l;
    v6[5] = v6;
    long long v7 = xmmword_1E59296E0;
    uint64_t v8 = 0;
    IntentsLibraryCore_frameworkLibrary_30885 = _sl_dlopen();
  }
  if (!IntentsLibraryCore_frameworkLibrary_30885)
  {
    uint64_t v3 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v4 = [NSString stringWithUTF8String:"void *IntentsLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"AFSiriAnnouncementRequestCapabilityManager.m", 24, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("INAppInfo");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    uint64_t v3 = [MEMORY[0x1E4F28B00] currentHandler];
    double v5 = [NSString stringWithUTF8String:"Class getINAppInfoClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"AFSiriAnnouncementRequestCapabilityManager.m", 25, @"Unable to find class %s", "INAppInfo");

LABEL_10:
    __break(1u);
  }
  getINAppInfoClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __IntentsLibraryCore_block_invoke_30886()
{
  uint64_t result = _sl_dlopen();
  IntentsLibraryCore_frameworkLibrary_30885 = result;
  return result;
}

uint64_t __CoreServicesLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  CoreServicesLibraryCore_frameworkLibrary = result;
  return result;
}

void HandleGenerativeModelsAvailabilityDidChange()
{
  id v0 = +[AFSystemAssistantExperienceStatusManager sharedManager];
  [v0 fetchGenerativeModelsAvailability];
}

id initWPHeySiriKeyManufacturerData()
{
  if (initWPHeySiriKeyManufacturerData_sOnce != -1) {
    dispatch_once(&initWPHeySiriKeyManufacturerData_sOnce, &__block_literal_global_998);
  }
  id v0 = (void *)constantWPHeySiriKeyManufacturerData;
  return v0;
}

void __initWPHeySiriKeyManufacturerData_block_invoke()
{
  id v0 = WirelessProximityLibrary();
  id v1 = (id *)dlsym(v0, "WPHeySiriKeyManufacturerData");
  if (!v1) {
    __assert_rtn("initWPHeySiriKeyManufacturerData_block_invoke", "AFMyriadCoordinator.m", 59, "constant");
  }
  objc_storeStrong((id *)&constantWPHeySiriKeyManufacturerData, *v1);
  getWPHeySiriKeyManufacturerData = WPHeySiriKeyManufacturerDataFunction;
}

void *WirelessProximityLibrary()
{
  uint64_t result = (void *)WirelessProximityLibrary_frameworkLibrary;
  if (!WirelessProximityLibrary_frameworkLibrary)
  {
    uint64_t result = dlopen("/System/Library/PrivateFrameworks/WirelessProximity.framework/WirelessProximity", 2);
    WirelessProximityLibrary_frameworkLibrary = (uint64_t)result;
    if (!result) {
      __assert_rtn("WirelessProximityLibrary", "AFMyriadCoordinator.m", 56, "frameworkLibrary");
    }
  }
  return result;
}

id WPHeySiriKeyManufacturerDataFunction()
{
  return (id)constantWPHeySiriKeyManufacturerData;
}

id initSFDiagnostics()
{
  if (initSFDiagnostics_sOnce != -1) {
    dispatch_once(&initSFDiagnostics_sOnce, &__block_literal_global_993);
  }
  id v0 = (void *)classSFDiagnostics;
  return v0;
}

Class __initSFDiagnostics_block_invoke()
{
  if (!SharingLibrary_frameworkLibrary)
  {
    SharingLibrary_frameworkLibrary = (uint64_t)dlopen("/System/Library/PrivateFrameworks/Sharing.framework/Sharing", 2);
    if (!SharingLibrary_frameworkLibrary) {
      __assert_rtn("SharingLibrary", "AFMyriadCoordinator.m", 47, "frameworkLibrary");
    }
  }
  Class result = objc_getClass("SFDiagnostics");
  classSFDiagnostics = (uint64_t)result;
  if (!result) {
    __assert_rtn("initSFDiagnostics_block_invoke", "AFMyriadCoordinator.m", 48, "classSFDiagnostics");
  }
  getSFDiagnosticsClass = SFDiagnosticsFunction;
  return result;
}

id SFDiagnosticsFunction()
{
  return (id)classSFDiagnostics;
}

id initWPHeySiriAdvertisingData()
{
  if (initWPHeySiriAdvertisingData_sOnce != -1) {
    dispatch_once(&initWPHeySiriAdvertisingData_sOnce, &__block_literal_global_989);
  }
  id v0 = (void *)constantWPHeySiriAdvertisingData;
  return v0;
}

void __initWPHeySiriAdvertisingData_block_invoke()
{
  id v0 = WirelessProximityLibrary();
  id v1 = (id *)dlsym(v0, "WPHeySiriAdvertisingData");
  if (!v1) {
    __assert_rtn("initWPHeySiriAdvertisingData_block_invoke", "AFMyriadCoordinator.m", 58, "constant");
  }
  objc_storeStrong((id *)&constantWPHeySiriAdvertisingData, *v1);
  getWPHeySiriAdvertisingData = WPHeySiriAdvertisingDataFunction;
}

id WPHeySiriAdvertisingDataFunction()
{
  return (id)constantWPHeySiriAdvertisingData;
}

void sub_19D0582F4(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_19D05C4A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19D05F3B4(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 176), 8);
  _Unwind_Resume(a1);
}

id safelyGetAudioData()
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  id v0 = NSHomeDirectory();
  uint64_t v1 = [v0 stringByAppendingPathComponent:@"Library/VoiceTrigger"];
  uint64_t v2 = AFSiriLogContextConnection;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315395;
    uint64_t v30 = "AFMyriadCoordinatorAudioHashFileBaseDirectory";
    __int16 v31 = 2113;
    uint64_t v32 = (uint64_t)v1;
    _os_log_impl(&dword_19CF1D000, v2, OS_LOG_TYPE_INFO, "%s BTLE audio hash base directory %{private}@", buf, 0x16u);
  }

  uint64_t v3 = [v1 stringByAppendingPathComponent:@"siriBC"];
  uint64_t v4 = AFSiriLogContextConnection;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315395;
    uint64_t v30 = "AFMyriadCoordinatorAudioHashFilePath";
    __int16 v31 = 2113;
    uint64_t v32 = (uint64_t)v3;
    _os_log_impl(&dword_19CF1D000, v4, OS_LOG_TYPE_INFO, "%s BTLE audio hash file path %{private}@", buf, 0x16u);
  }

  double v5 = [MEMORY[0x1E4F28CB8] defaultManager];
  if ([v5 fileExistsAtPath:v3]) {
    uint64_t v6 = (const char *)[v3 UTF8String];
  }
  else {
    uint64_t v6 = 0;
  }

  long long v7 = AFSiriLogContextConnection;
  if (!os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_DEBUG))
  {
    if (v6) {
      goto LABEL_10;
    }
LABEL_27:
    uint64_t v9 = AFSiriLogContextConnection;
LABEL_28:
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      uint64_t v30 = "safelyGetAudioData";
      uint64_t v18 = "%s #myriad BTLE could not open audio data file";
      goto LABEL_34;
    }
LABEL_29:
    *(_DWORD *)buf = 0;
    uint64_t v12 = [MEMORY[0x1E4F1C9B8] dataWithBytes:buf length:4];
    goto LABEL_30;
  }
  *(_DWORD *)buf = 136315395;
  uint64_t v30 = "safelyGetAudioData";
  __int16 v31 = 2081;
  uint64_t v32 = (uint64_t)v6;
  _os_log_debug_impl(&dword_19CF1D000, v7, OS_LOG_TYPE_DEBUG, "%s #myriad BTLE opening audio file at path %{private}s", buf, 0x16u);
  if (!v6) {
    goto LABEL_27;
  }
LABEL_10:
  int v8 = open(v6, 0);
  uint64_t v9 = AFSiriLogContextConnection;
  if (v8 < 0) {
    goto LABEL_28;
  }
  int v10 = v8;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315394;
    uint64_t v30 = "safelyGetAudioData";
    __int16 v31 = 1024;
    LODWORD(v32) = 12;
    _os_log_error_impl(&dword_19CF1D000, v9, OS_LOG_TYPE_ERROR, "%s #myriad BTLE could open audio data file, MYR_EXT_FINGERPRINT_LEN: %d", buf, 0x12u);
  }
  ssize_t v11 = read(v10, v41, 0xDuLL);
  if ((v11 & 0xFFFFFFFFFFFFFFFELL) != 0xC)
  {
    uint64_t v9 = AFSiriLogContextConnection;
    if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      uint64_t v30 = "safelyGetAudioData";
      uint64_t v18 = "%s #myriad BTLE could not read 12 bytes from audio data file";
LABEL_34:
      _os_log_error_impl(&dword_19CF1D000, v9, OS_LOG_TYPE_ERROR, v18, buf, 0xCu);
      goto LABEL_29;
    }
    goto LABEL_29;
  }
  uint64_t v12 = [MEMORY[0x1E4F1C9B8] dataWithBytes:v41 length:v11];
  close(v10);
  uint64_t v28 = 0;
  if ((unint64_t)[v12 length] >= 0xC) {
    objc_msgSend(v12, "getBytes:range:", &v28, 4, 8);
  }
  unsigned __int16 v27 = 0;
  __int16 v26 = 0;
  unint64_t v25 = 0;
  unsigned __int8 v24 = 0;
  objc_msgSend(v12, "getBytes:range:", &v27, 0, 2);
  objc_msgSend(v12, "getBytes:range:", (char *)&v26 + 1, 2, 1);
  objc_msgSend(v12, "getBytes:range:", &v26, 3, 1);
  objc_msgSend(v12, "getBytes:range:", &v25, 4, 8);
  objc_msgSend(v12, "getBytes:range:", &v24, 12, 1);
  uint64_t v13 = AFSiriLogContextConnection;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_DEBUG))
  {
    id v20 = v13;
    __int16 v21 = [v12 debugDescription];
    *(_DWORD *)buf = 136315650;
    uint64_t v30 = "safelyGetAudioData";
    __int16 v31 = 2112;
    uint64_t v32 = (uint64_t)v21;
    __int16 v33 = 2048;
    *(void *)uint64_t v34 = v28;
    _os_log_debug_impl(&dword_19CF1D000, v20, OS_LOG_TYPE_DEBUG, "%s data=%@, voiceTriggerTimeRaw=%f", buf, 0x20u);

    uint64_t v13 = AFSiriLogContextConnection;
  }
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    id v22 = v13;
    uint64_t v23 = [v12 debugDescription];
    *(_DWORD *)buf = 136316674;
    uint64_t v30 = "safelyGetAudioData";
    __int16 v31 = 2112;
    uint64_t v32 = (uint64_t)v23;
    __int16 v33 = 1024;
    *(_DWORD *)uint64_t v34 = v27;
    *(_WORD *)&v34[4] = 1024;
    *(_DWORD *)&v34[6] = HIBYTE(v26);
    __int16 v35 = 1024;
    int v36 = v26;
    __int16 v37 = 2048;
    unint64_t v38 = v25;
    __int16 v39 = 1024;
    int v40 = v24;
    _os_log_debug_impl(&dword_19CF1D000, v22, OS_LOG_TYPE_DEBUG, "%s data=%@, hash=%hu, good=%hu, conf=%hu, absTime=%llu, frac=%hu", buf, 0x38u);
  }
  uint64_t v14 = mach_absolute_time();
  if (_AFMachAbsoluteTimeRate_onceToken != -1) {
    dispatch_once(&_AFMachAbsoluteTimeRate_onceToken, &__block_literal_global_973);
  }
  double v15 = *(double *)&_AFMachAbsoluteTimeRate_rate;
  unint64_t v16 = v25;
  uint64_t v17 = AFSiriLogContextConnection;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    uint64_t v30 = "safelyGetAudioData";
    __int16 v31 = 2048;
    uint64_t v32 = v14;
    __int16 v33 = 2048;
    *(double *)uint64_t v34 = v15 * (double)v14 / 1000000000.0
                   - *(double *)&_AFMachAbsoluteTimeRate_rate * (double)v16 / 1000000000.0;
    _os_log_impl(&dword_19CF1D000, v17, OS_LOG_TYPE_INFO, "%s currentTime=%llu timeSinceActivationInSeconds=%f", buf, 0x20u);
  }
LABEL_30:

  return v12;
}

id initWPHeySiri()
{
  if (initWPHeySiri_sOnce != -1) {
    dispatch_once(&initWPHeySiri_sOnce, &__block_literal_global_977);
  }
  id v0 = (void *)classWPHeySiri;
  return v0;
}

Class __initWPHeySiri_block_invoke()
{
  WirelessProximityLibrary();
  Class result = objc_getClass("WPHeySiri");
  classWPHeySiruint64_t i = (uint64_t)result;
  if (!result) {
    __assert_rtn("initWPHeySiri_block_invoke", "AFMyriadCoordinator.m", 57, "classWPHeySiri");
  }
  getWPHeySiriClass = WPHeySiriFunction;
  return result;
}

id WPHeySiriFunction()
{
  return (id)classWPHeySiri;
}

uint64_t carplayTriggerSeenCallback()
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  id v0 = AFSiriLogContextConnection;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
  {
    int v2 = 136315138;
    uint64_t v3 = "carplayTriggerSeenCallback";
    _os_log_impl(&dword_19CF1D000, v0, OS_LOG_TYPE_INFO, "%s #myriad BTLE CarPlay trigger signal received", (uint8_t *)&v2, 0xCu);
  }
  uint64_t result = _currentCoordinator;
  if (_currentCoordinator) {
    return [(id)_currentCoordinator startAdvertisingFromCarPlayTrigger];
  }
  return result;
}

uint64_t inEarTriggerSeenCallback()
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  id v0 = AFSiriLogContextConnection;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
  {
    int v2 = 136315138;
    uint64_t v3 = "inEarTriggerSeenCallback";
    _os_log_impl(&dword_19CF1D000, v0, OS_LOG_TYPE_INFO, "%s #myriad BTLE in ear trigger signal received", (uint8_t *)&v2, 0xCu);
  }
  uint64_t result = _currentCoordinator;
  if (_currentCoordinator) {
    return [(id)_currentCoordinator startAdvertisingFromInEarTrigger];
  }
  return result;
}

uint64_t myriadDecisionRequestCallback()
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  id v0 = AFSiriLogContextConnection;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
  {
    int v2 = 136315138;
    uint64_t v3 = "myriadDecisionRequestCallback";
    _os_log_impl(&dword_19CF1D000, v0, OS_LOG_TYPE_INFO, "%s #myriad BTLE myriad decision fetch signal received", (uint8_t *)&v2, 0xCu);
  }
  uint64_t result = _currentCoordinator;
  if (_currentCoordinator) {
    return [(id)_currentCoordinator notifyCurrentDecisionResult];
  }
  return result;
}

uint64_t emergencyCallback()
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  id v0 = AFSiriLogContextConnection;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
  {
    int v2 = 136315138;
    uint64_t v3 = "emergencyCallback";
    _os_log_impl(&dword_19CF1D000, v0, OS_LOG_TYPE_INFO, "%s #myriad BTLE emergency signal received", (uint8_t *)&v2, 0xCu);
  }
  uint64_t result = _currentCoordinator;
  if (_currentCoordinator) {
    return [(id)_currentCoordinator startAdvertisingEmergency];
  }
  return result;
}

uint64_t outputTriggerSeenCallback()
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  id v0 = AFSiriLogContextConnection;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
  {
    int v2 = 136315138;
    uint64_t v3 = "outputTriggerSeenCallback";
    _os_log_impl(&dword_19CF1D000, v0, OS_LOG_TYPE_INFO, "%s #myriad BTLE self trigger signal received", (uint8_t *)&v2, 0xCu);
  }
  uint64_t result = _currentCoordinator;
  if (_currentCoordinator) {
    return [(id)_currentCoordinator startAdvertisingFromInTaskVoiceTrigger];
  }
  return result;
}

uint64_t notificationCallback()
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  kdebug_trace();
  id v0 = AFSiriLogContextConnection;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
  {
    int v2 = 136315138;
    uint64_t v3 = "notificationCallback";
    _os_log_impl(&dword_19CF1D000, v0, OS_LOG_TYPE_INFO, "%s #myriad BTLE audio data signal received", (uint8_t *)&v2, 0xCu);
  }
  uint64_t result = _currentCoordinator;
  if (_currentCoordinator) {
    return [(id)_currentCoordinator startAdvertisingFromVoiceTrigger];
  }
  return result;
}

uint64_t hammingDistance(int a1, int a2)
{
  int v2 = a2 ^ a1;
  if (a2 == a1) {
    return 0;
  }
  LODWORD(result) = 0;
  do
  {
    uint64_t result = (result + 1);
    v2 &= v2 - 1;
  }
  while (v2);
  return result;
}

id AFAnalyticsServiceGetXPCInterface()
{
  v5[2] = *MEMORY[0x1E4F143B8];
  id v0 = [MEMORY[0x1E4F29280] interfaceWithProtocol:&unk_1EEEA5468];
  uint64_t v1 = (void *)MEMORY[0x1E4F1CAD0];
  v5[0] = objc_opt_class();
  v5[1] = objc_opt_class();
  int v2 = [MEMORY[0x1E4F1C978] arrayWithObjects:v5 count:2];
  uint64_t v3 = [v1 setWithArray:v2];
  [v0 setClasses:v3 forSelector:sel_stageEvents_completion_ argumentIndex:0 ofReply:0];

  return v0;
}

uint64_t AFAnalyticsServiceDelegateGetXPCInterface()
{
  return objc_claimAutoreleasedReturnValue();
}

void sub_19D065568(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id location)
{
  objc_destroyWeak(v22);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id initBKSProcessAssertion()
{
  if (initBKSProcessAssertion_sOnce != -1) {
    dispatch_once(&initBKSProcessAssertion_sOnce, &__block_literal_global_171);
  }
  id v0 = (void *)classBKSProcessAssertion;
  return v0;
}

Class __initBKSProcessAssertion_block_invoke()
{
  if (AssertionServicesLibrary_sOnce != -1) {
    dispatch_once(&AssertionServicesLibrary_sOnce, &__block_literal_global_118);
  }
  Class result = objc_getClass("BKSProcessAssertion");
  classBKSProcessAssertion = (uint64_t)result;
  getBKSProcessAssertionClass = BKSProcessAssertionFunction;
  return result;
}

id BKSProcessAssertionFunction()
{
  return (id)classBKSProcessAssertion;
}

void *__AssertionServicesLibrary_block_invoke()
{
  Class result = dlopen("/System/Library/PrivateFrameworks/AssertionServices.framework/AssertionServices", 2);
  AssertionServicesLibrary_sLib = (uint64_t)result;
  return result;
}

id initFBSOpenApplicationServiceErrorDomain()
{
  if (initFBSOpenApplicationServiceErrorDomain_sOnce != -1) {
    dispatch_once(&initFBSOpenApplicationServiceErrorDomain_sOnce, &__block_literal_global_168_33293);
  }
  id v0 = (void *)constantFBSOpenApplicationServiceErrorDomain;
  return v0;
}

void __initFBSOpenApplicationServiceErrorDomain_block_invoke()
{
  if (FrontBoardServicesLibrary_sOnce != -1) {
    dispatch_once(&FrontBoardServicesLibrary_sOnce, &__block_literal_global_150_33295);
  }
  id v0 = (id *)dlsym((void *)FrontBoardServicesLibrary_sLib, "FBSOpenApplicationServiceErrorDomain");
  if (!v0) {
    __assert_rtn("initFBSOpenApplicationServiceErrorDomain_block_invoke", "AFUIApplicationSiriTaskDeliverer.m", 53, "constant");
  }
  objc_storeStrong((id *)&constantFBSOpenApplicationServiceErrorDomain, *v0);
  getFBSOpenApplicationServiceErrorDomain = FBSOpenApplicationServiceErrorDomainFunction;
}

id FBSOpenApplicationServiceErrorDomainFunction()
{
  return (id)constantFBSOpenApplicationServiceErrorDomain;
}

void *__FrontBoardServicesLibrary_block_invoke()
{
  Class result = dlopen("/System/Library/PrivateFrameworks/FrontBoardServices.framework/FrontBoardServices", 2);
  FrontBoardServicesLibrary_sLib = (uint64_t)result;
  return result;
}

id initFBSOpenApplicationOptions()
{
  if (initFBSOpenApplicationOptions_sOnce != -1) {
    dispatch_once(&initFBSOpenApplicationOptions_sOnce, &__block_literal_global_165);
  }
  id v0 = (void *)classFBSOpenApplicationOptions;
  return v0;
}

Class __initFBSOpenApplicationOptions_block_invoke()
{
  if (FrontBoardServicesLibrary_sOnce != -1) {
    dispatch_once(&FrontBoardServicesLibrary_sOnce, &__block_literal_global_150_33295);
  }
  Class result = objc_getClass("FBSOpenApplicationOptions");
  classFBSOpenApplicationOptions = (uint64_t)result;
  getFBSOpenApplicationOptionsClass = FBSOpenApplicationOptionsFunction;
  return result;
}

id FBSOpenApplicationOptionsFunction()
{
  return (id)classFBSOpenApplicationOptions;
}

id initFBSOpenApplicationService()
{
  if (initFBSOpenApplicationService_sOnce != -1) {
    dispatch_once(&initFBSOpenApplicationService_sOnce, &__block_literal_global_162);
  }
  id v0 = (void *)classFBSOpenApplicationService;
  return v0;
}

Class __initFBSOpenApplicationService_block_invoke()
{
  if (FrontBoardServicesLibrary_sOnce != -1) {
    dispatch_once(&FrontBoardServicesLibrary_sOnce, &__block_literal_global_150_33295);
  }
  Class result = objc_getClass("FBSOpenApplicationService");
  classFBSOpenApplicationService = (uint64_t)result;
  getFBSOpenApplicationServiceClass = FBSOpenApplicationServiceFunction;
  return result;
}

id FBSOpenApplicationServiceFunction()
{
  return (id)classFBSOpenApplicationService;
}

id initFBSOpenApplicationOptionKeyPromptUnlockDevice()
{
  if (initFBSOpenApplicationOptionKeyPromptUnlockDevice_sOnce != -1) {
    dispatch_once(&initFBSOpenApplicationOptionKeyPromptUnlockDevice_sOnce, &__block_literal_global_159_33303);
  }
  id v0 = (void *)constantFBSOpenApplicationOptionKeyPromptUnlockDevice;
  return v0;
}

void __initFBSOpenApplicationOptionKeyPromptUnlockDevice_block_invoke()
{
  if (FrontBoardServicesLibrary_sOnce != -1) {
    dispatch_once(&FrontBoardServicesLibrary_sOnce, &__block_literal_global_150_33295);
  }
  id v0 = (id *)dlsym((void *)FrontBoardServicesLibrary_sLib, "FBSOpenApplicationOptionKeyPromptUnlockDevice");
  if (!v0) {
    __assert_rtn("initFBSOpenApplicationOptionKeyPromptUnlockDevice_block_invoke", "AFUIApplicationSiriTaskDeliverer.m", 56, "constant");
  }
  objc_storeStrong((id *)&constantFBSOpenApplicationOptionKeyPromptUnlockDevice, *v0);
  getFBSOpenApplicationOptionKeyPromptUnlockDevice = FBSOpenApplicationOptionKeyPromptUnlockDeviceFunction;
}

id FBSOpenApplicationOptionKeyPromptUnlockDeviceFunction()
{
  return (id)constantFBSOpenApplicationOptionKeyPromptUnlockDevice;
}

id initFBSOpenApplicationOptionKeyUnlockDevice()
{
  if (initFBSOpenApplicationOptionKeyUnlockDevice_sOnce != -1) {
    dispatch_once(&initFBSOpenApplicationOptionKeyUnlockDevice_sOnce, &__block_literal_global_156_33306);
  }
  id v0 = (void *)constantFBSOpenApplicationOptionKeyUnlockDevice;
  return v0;
}

void __initFBSOpenApplicationOptionKeyUnlockDevice_block_invoke()
{
  if (FrontBoardServicesLibrary_sOnce != -1) {
    dispatch_once(&FrontBoardServicesLibrary_sOnce, &__block_literal_global_150_33295);
  }
  id v0 = (id *)dlsym((void *)FrontBoardServicesLibrary_sLib, "FBSOpenApplicationOptionKeyUnlockDevice");
  if (!v0) {
    __assert_rtn("initFBSOpenApplicationOptionKeyUnlockDevice_block_invoke", "AFUIApplicationSiriTaskDeliverer.m", 57, "constant");
  }
  objc_storeStrong((id *)&constantFBSOpenApplicationOptionKeyUnlockDevice, *v0);
  getFBSOpenApplicationOptionKeyUnlockDevice = FBSOpenApplicationOptionKeyUnlockDeviceFunction;
}

id FBSOpenApplicationOptionKeyUnlockDeviceFunction()
{
  return (id)constantFBSOpenApplicationOptionKeyUnlockDevice;
}

id initFBSOpenApplicationOptionKeyActivateSuspended()
{
  if (initFBSOpenApplicationOptionKeyActivateSuspended_sOnce != -1) {
    dispatch_once(&initFBSOpenApplicationOptionKeyActivateSuspended_sOnce, &__block_literal_global_153);
  }
  id v0 = (void *)constantFBSOpenApplicationOptionKeyActivateSuspended;
  return v0;
}

void __initFBSOpenApplicationOptionKeyActivateSuspended_block_invoke()
{
  if (FrontBoardServicesLibrary_sOnce != -1) {
    dispatch_once(&FrontBoardServicesLibrary_sOnce, &__block_literal_global_150_33295);
  }
  id v0 = (id *)dlsym((void *)FrontBoardServicesLibrary_sLib, "FBSOpenApplicationOptionKeyActivateSuspended");
  if (!v0) {
    __assert_rtn("initFBSOpenApplicationOptionKeyActivateSuspended_block_invoke", "AFUIApplicationSiriTaskDeliverer.m", 55, "constant");
  }
  objc_storeStrong((id *)&constantFBSOpenApplicationOptionKeyActivateSuspended, *v0);
  getFBSOpenApplicationOptionKeyActivateSuspended = FBSOpenApplicationOptionKeyActivateSuspendedFunction;
}

id FBSOpenApplicationOptionKeyActivateSuspendedFunction()
{
  return (id)constantFBSOpenApplicationOptionKeyActivateSuspended;
}

id initFBSOpenApplicationOptionKeyActions()
{
  if (initFBSOpenApplicationOptionKeyActions_sOnce != -1) {
    dispatch_once(&initFBSOpenApplicationOptionKeyActions_sOnce, &__block_literal_global_147);
  }
  id v0 = (void *)constantFBSOpenApplicationOptionKeyActions;
  return v0;
}

void __initFBSOpenApplicationOptionKeyActions_block_invoke()
{
  if (FrontBoardServicesLibrary_sOnce != -1) {
    dispatch_once(&FrontBoardServicesLibrary_sOnce, &__block_literal_global_150_33295);
  }
  id v0 = (id *)dlsym((void *)FrontBoardServicesLibrary_sLib, "FBSOpenApplicationOptionKeyActions");
  if (!v0) {
    __assert_rtn("initFBSOpenApplicationOptionKeyActions_block_invoke", "AFUIApplicationSiriTaskDeliverer.m", 54, "constant");
  }
  objc_storeStrong((id *)&constantFBSOpenApplicationOptionKeyActions, *v0);
  getFBSOpenApplicationOptionKeyActions = FBSOpenApplicationOptionKeyActionsFunction;
}

id FBSOpenApplicationOptionKeyActionsFunction()
{
  return (id)constantFBSOpenApplicationOptionKeyActions;
}

void *__UIKitLibrary_block_invoke()
{
  Class result = dlopen("/System/Library/Frameworks/UIKit.framework/UIKit", 2);
  UIKitLibrary_sLib = (uint64_t)result;
  return result;
}

id initUISiriTaskAction()
{
  if (initUISiriTaskAction_sOnce != -1) {
    dispatch_once(&initUISiriTaskAction_sOnce, &__block_literal_global_141);
  }
  id v0 = (void *)classUISiriTaskAction;
  return v0;
}

Class __initUISiriTaskAction_block_invoke()
{
  if (UIKitLibrary_sOnce != -1) {
    dispatch_once(&UIKitLibrary_sOnce, &__block_literal_global_144_33283);
  }
  Class result = objc_getClass("UISiriTaskAction");
  classUISiriTaskAction = (uint64_t)result;
  getUISiriTaskActionClass = UISiriTaskActionFunction;
  return result;
}

id UISiriTaskActionFunction()
{
  return (id)classUISiriTaskAction;
}

void sub_19D066948(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void _LogAppStateInfo(void *a1)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  int v2 = getSBApplicationStateDisplayIDKey();
  uint64_t v3 = _SafelyGetObject(v1, (uint64_t)v2);

  uint64_t v4 = getSBApplicationStateKey();
  double v5 = _SafelyGetObject(v1, (uint64_t)v4);

  uint64_t v6 = getBKSApplicationStateAppIsFrontmostKey();
  long long v7 = _SafelyGetObject(v1, (uint64_t)v6);

  if (v3) {
    BOOL v8 = v5 == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (v8 || v7 == 0)
  {
    int v10 = AFSiriLogContextConnection;
    if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
    {
      int v16 = 136315394;
      uint64_t v17 = "_LogAppStateInfo";
      __int16 v18 = 2112;
      id v19 = v1;
      _os_log_impl(&dword_19CF1D000, v10, OS_LOG_TYPE_INFO, "%s missing expected values dumping everything %@", (uint8_t *)&v16, 0x16u);
    }
  }
  else
  {
    int v11 = [v5 unsignedIntValue];
    uint64_t v12 = (void *)AFSiriLogContextConnection;
    if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
    {
      uint64_t v14 = v12;
      double v15 = AFDescriptionOfBKSApplicationState(v11);
      int v16 = 136315906;
      uint64_t v17 = "_LogAppStateInfo";
      __int16 v18 = 2112;
      id v19 = v3;
      __int16 v20 = 2112;
      __int16 v21 = v15;
      __int16 v22 = 2112;
      uint64_t v23 = v7;
      _os_log_impl(&dword_19CF1D000, v14, OS_LOG_TYPE_INFO, "%s %@ is %@ frontmost=%@", (uint8_t *)&v16, 0x2Au);
    }
  }
}

id _SafelyGetObject(void *a1, uint64_t a2)
{
  uint64_t v4 = 0;
  if (a1 && a2)
  {
    uint64_t v4 = [a1 objectForKey:a2];
    uint64_t v2 = vars8;
  }
  return v4;
}

id initSBApplicationStateKey()
{
  if (initSBApplicationStateKey_sOnce != -1) {
    dispatch_once(&initSBApplicationStateKey_sOnce, &__block_literal_global_138);
  }
  id v0 = (void *)constantSBApplicationStateKey;
  return v0;
}

void __initSBApplicationStateKey_block_invoke()
{
  if (SpringBoardServicesLibrary_sOnce != -1) {
    dispatch_once(&SpringBoardServicesLibrary_sOnce, &__block_literal_global_135_33323);
  }
  id v0 = (id *)dlsym((void *)SpringBoardServicesLibrary_sLib, "SBApplicationStateKey");
  if (!v0) {
    __assert_rtn("initSBApplicationStateKey_block_invoke", "AFUIApplicationSiriTaskDeliverer.m", 38, "constant");
  }
  objc_storeStrong((id *)&constantSBApplicationStateKey, *v0);
  getSBApplicationStateKey = SBApplicationStateKeyFunction;
}

id SBApplicationStateKeyFunction()
{
  return (id)constantSBApplicationStateKey;
}

void *__SpringBoardServicesLibrary_block_invoke()
{
  Class result = dlopen("/System/Library/PrivateFrameworks/SpringBoardServices.framework/SpringBoardServices", 2);
  SpringBoardServicesLibrary_sLib = (uint64_t)result;
  return result;
}

id initBKSApplicationStateAppIsFrontmostKey()
{
  if (initBKSApplicationStateAppIsFrontmostKey_sOnce != -1) {
    dispatch_once(&initBKSApplicationStateAppIsFrontmostKey_sOnce, &__block_literal_global_129_33329);
  }
  id v0 = (void *)constantBKSApplicationStateAppIsFrontmostKey;
  return v0;
}

void __initBKSApplicationStateAppIsFrontmostKey_block_invoke()
{
  if (AssertionServicesLibrary_sOnce != -1) {
    dispatch_once(&AssertionServicesLibrary_sOnce, &__block_literal_global_118);
  }
  id v0 = (id *)dlsym((void *)AssertionServicesLibrary_sLib, "BKSApplicationStateAppIsFrontmostKey");
  if (!v0) {
    __assert_rtn("initBKSApplicationStateAppIsFrontmostKey_block_invoke", "AFUIApplicationSiriTaskDeliverer.m", 27, "constant");
  }
  objc_storeStrong((id *)&constantBKSApplicationStateAppIsFrontmostKey, *v0);
  getBKSApplicationStateAppIsFrontmostKey = BKSApplicationStateAppIsFrontmostKeyFunction;
}

id BKSApplicationStateAppIsFrontmostKeyFunction()
{
  return (id)constantBKSApplicationStateAppIsFrontmostKey;
}

id initSBApplicationStateDisplayIDKey()
{
  if (initSBApplicationStateDisplayIDKey_sOnce != -1) {
    dispatch_once(&initSBApplicationStateDisplayIDKey_sOnce, &__block_literal_global_132);
  }
  id v0 = (void *)constantSBApplicationStateDisplayIDKey;
  return v0;
}

void __initSBApplicationStateDisplayIDKey_block_invoke()
{
  if (SpringBoardServicesLibrary_sOnce != -1) {
    dispatch_once(&SpringBoardServicesLibrary_sOnce, &__block_literal_global_135_33323);
  }
  id v0 = (id *)dlsym((void *)SpringBoardServicesLibrary_sLib, "SBApplicationStateDisplayIDKey");
  if (!v0) {
    __assert_rtn("initSBApplicationStateDisplayIDKey_block_invoke", "AFUIApplicationSiriTaskDeliverer.m", 37, "constant");
  }
  objc_storeStrong((id *)&constantSBApplicationStateDisplayIDKey, *v0);
  getSBApplicationStateDisplayIDKey = SBApplicationStateDisplayIDKeyFunction;
}

id SBApplicationStateDisplayIDKeyFunction()
{
  return (id)constantSBApplicationStateDisplayIDKey;
}

uint64_t initBKSApplicationStateAll()
{
  if (initBKSApplicationStateAll_sOnce != -1) {
    dispatch_once(&initBKSApplicationStateAll_sOnce, &__block_literal_global_121_33333);
  }
  return constantBKSApplicationStateAll;
}

void *__initBKSApplicationStateAll_block_invoke()
{
  if (AssertionServicesLibrary_sOnce != -1) {
    dispatch_once(&AssertionServicesLibrary_sOnce, &__block_literal_global_118);
  }
  Class result = dlsym((void *)AssertionServicesLibrary_sLib, "BKSApplicationStateAll");
  if (!result) {
    __assert_rtn("initBKSApplicationStateAll_block_invoke", "AFUIApplicationSiriTaskDeliverer.m", 28, "constant");
  }
  constantBKSApplicationStateAll = *result;
  getBKSApplicationStateAll = BKSApplicationStateAllFunction;
  return result;
}

uint64_t BKSApplicationStateAllFunction()
{
  return constantBKSApplicationStateAll;
}

id initBKSApplicationStateMonitor()
{
  if (initBKSApplicationStateMonitor_sOnce != -1) {
    dispatch_once(&initBKSApplicationStateMonitor_sOnce, &__block_literal_global_33336);
  }
  id v0 = (void *)classBKSApplicationStateMonitor;
  return v0;
}

Class __initBKSApplicationStateMonitor_block_invoke()
{
  if (AssertionServicesLibrary_sOnce != -1) {
    dispatch_once(&AssertionServicesLibrary_sOnce, &__block_literal_global_118);
  }
  Class result = objc_getClass("BKSApplicationStateMonitor");
  classBKSApplicationStateMonitor = (uint64_t)result;
  getBKSApplicationStateMonitorClass = BKSApplicationStateMonitorFunction;
  return result;
}

id BKSApplicationStateMonitorFunction()
{
  return (id)classBKSApplicationStateMonitor;
}

void sub_19D067D78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  __destructor_8_s0_s8_s16_s24((uint64_t)va);
  _Unwind_Resume(a1);
}

id __copy_constructor_8_8_s0_s8_s16_s24_t32w1(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(id *)a2;
  *(void *)(a1 + 8) = *(id *)(a2 + 8);
  *(void *)(a1 + 16) = *(id *)(a2 + 16);
  id result = *(id *)(a2 + 24);
  *(void *)(a1 + 24) = result;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  return result;
}

void sub_19D068040(_Unwind_Exception *a1)
{
  __destructor_8_s0_s8_s16_s24(v1);
  _Unwind_Resume(a1);
}

void sub_19D068168(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  __destructor_8_s0_s8_s16_s24((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19D068394(_Unwind_Exception *a1)
{
  __destructor_8_s0_s8_s16_s24(v1);
  _Unwind_Resume(a1);
}

BOOL AFSiriAnnouncementPlatformGetIsValid(unint64_t a1)
{
  return a1 < 5;
}

BOOL AFSiriAnnouncementPlatformGetIsValidAndSpecified(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 4;
}

__CFString *AFSiriAnnouncementPlatformGetName(unint64_t a1)
{
  if (a1 > 4) {
    return @"(unknown)";
  }
  else {
    return off_1E592A030[a1];
  }
}

uint64_t AFSiriAnnouncementPlatformGetFromName(void *a1)
{
  id v1 = a1;
  if ([v1 length])
  {
    if (AFSiriAnnouncementPlatformGetFromName_onceToken != -1) {
      dispatch_once(&AFSiriAnnouncementPlatformGetFromName_onceToken, &__block_literal_global_33471);
    }
    uint64_t v2 = [(id)AFSiriAnnouncementPlatformGetFromName_map objectForKey:v1];
    uint64_t v3 = [v2 integerValue];
  }
  else
  {
    uint64_t v3 = 0;
  }

  return v3;
}

void __AFSiriAnnouncementPlatformGetFromName_block_invoke()
{
  id v0 = (void *)AFSiriAnnouncementPlatformGetFromName_map;
  AFSiriAnnouncementPlatformGetFromName_map = (uint64_t)&unk_1EEE98E78;
}

id initLSApplicationProxy_34155()
{
  if (initLSApplicationProxy_sOnce_34156 != -1) {
    dispatch_once(&initLSApplicationProxy_sOnce_34156, &__block_literal_global_34157);
  }
  id v0 = (void *)classLSApplicationProxy_34158;
  return v0;
}

Class __initLSApplicationProxy_block_invoke_34161()
{
  if (CoreServicesLibrary_sOnce != -1) {
    dispatch_once(&CoreServicesLibrary_sOnce, &__block_literal_global_264);
  }
  Class result = objc_getClass("LSApplicationProxy");
  classLSApplicationProxy_34158 = (uint64_t)result;
  getLSApplicationProxyClass_34150 = LSApplicationProxyFunction_34164;
  return result;
}

id LSApplicationProxyFunction_34164()
{
  return (id)classLSApplicationProxy_34158;
}

void *__CoreServicesLibrary_block_invoke()
{
  Class result = dlopen("/System/Library/PrivateFrameworks/CoreServices.framework/CoreServices", 2);
  CoreServicesLibrary_sLib = (uint64_t)result;
  return result;
}

void sub_19D06DF4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  _Block_object_dispose(&a39, 8);
  _Block_object_dispose((const void *)(v39 - 224), 8);
  _Block_object_dispose((const void *)(v39 - 192), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__34591(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__34592(uint64_t a1)
{
}

uint64_t AFClockAlarmTypeValidate(char a1)
{
  return a1 & 1;
}

id AFClockAlarmTypeGetNames(uint64_t a1)
{
  if (a1)
  {
    char v1 = a1;
    id v2 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
    uint64_t v3 = v2;
    if (v1) {
      [v2 addObject:@"media"];
    }
    uint64_t v4 = (void *)[v3 copy];
  }
  else
  {
    uint64_t v4 = (void *)MEMORY[0x1E4F1CBF0];
  }
  return v4;
}

uint64_t AFClockAlarmTypeGetFromNames(void *a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if ([v1 count])
  {
    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v12 = v1;
    id v2 = v1;
    uint64_t v3 = [v2 countByEnumeratingWithState:&v13 objects:v17 count:16];
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = 0;
      uint64_t v6 = *(void *)v14;
      do
      {
        uint64_t v7 = 0;
        do
        {
          if (*(void *)v14 != v6) {
            objc_enumerationMutation(v2);
          }
          id v8 = *(id *)(*((void *)&v13 + 1) + 8 * v7);
          if ([v8 length])
          {
            if (_AFClockAlarmTypeGetFromName_onceToken != -1) {
              dispatch_once(&_AFClockAlarmTypeGetFromName_onceToken, &__block_literal_global_34750);
            }
            uint64_t v9 = [(id)_AFClockAlarmTypeGetFromName_map objectForKey:v8];
            uint64_t v10 = [v9 unsignedIntegerValue];
          }
          else
          {
            uint64_t v10 = 0;
          }

          v5 |= v10;
          ++v7;
        }
        while (v4 != v7);
        uint64_t v4 = [v2 countByEnumeratingWithState:&v13 objects:v17 count:16];
      }
      while (v4);
    }
    else
    {
      uint64_t v5 = 0;
    }

    id v1 = v12;
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

id AFPeerInfoGetCompactDescription(void *a1)
{
  id v1 = a1;
  if (!v1)
  {
    unsigned __int16 v27 = 0;
    goto LABEL_30;
  }
  id v2 = (void *)[objc_alloc(MEMORY[0x1E4F1CA48]) initWithCapacity:3];
  uint64_t v3 = (void *)[objc_alloc(MEMORY[0x1E4F1CA48]) initWithCapacity:9];
  uint64_t v4 = [v1 assistantIdentifier];
  uint64_t v5 = _AFPeerInfoGetShortIdentifier(v4);

  if ([v5 length]) {
    [v2 addObject:v5];
  }

  uint64_t v6 = [v1 name];
  if ([v6 length])
  {
    uint64_t v7 = (void *)[[NSString alloc] initWithFormat:@"\"%@\"", v6];
    [v2 addObject:v7];
  }
  id v8 = [v1 idsDeviceUniqueIdentifier];
  uint64_t v9 = _AFPeerInfoGetShortIdentifier(v8);

  if ([v9 length])
  {
    uint64_t v10 = (void *)[[NSString alloc] initWithFormat:@"ids %@", v9];
    [v3 addObject:v10];
  }
  int v11 = [v1 rapportEffectiveIdentifier];
  id v12 = _AFPeerInfoGetShortIdentifier(v11);

  if ([v12 length])
  {
    long long v13 = (void *)[[NSString alloc] initWithFormat:@"rp %@", v12];
    [v3 addObject:v13];
  }
  long long v14 = [v1 mediaRouteIdentifier];
  long long v15 = _AFPeerInfoGetShortIdentifier(v14);

  if ([v15 length])
  {
    long long v16 = (void *)[[NSString alloc] initWithFormat:@"mr %@", v15];
    [v3 addObject:v16];
  }
  uint64_t v17 = [v1 homeKitAccessoryIdentifier];
  uint64_t v18 = _AFPeerInfoGetShortIdentifier(v17);

  if ([v18 length])
  {
    id v19 = (void *)[[NSString alloc] initWithFormat:@"hk %@", v18];
    [v3 addObject:v19];
  }
  __int16 v20 = [v1 roomName];
  if ([v20 length])
  {
    __int16 v21 = (void *)[[NSString alloc] initWithFormat:@"rm \"%@\"", v20];
    [v3 addObject:v21];
  }
  __int16 v22 = [v1 productType];
  uint64_t v23 = [v1 buildVersion];
  uint64_t v24 = [v22 length];
  uint64_t v25 = [v23 length];
  if (!v24)
  {
    if (!v25) {
      goto LABEL_24;
    }
    uint64_t v28 = v3;
    id v29 = v23;
LABEL_23:
    [v28 addObject:v29];
    goto LABEL_24;
  }
  if (!v25)
  {
    uint64_t v28 = v3;
    id v29 = v22;
    goto LABEL_23;
  }
  __int16 v26 = (void *)[[NSString alloc] initWithFormat:@"md %@/%@", v22, v23];
  [v3 addObject:v26];

LABEL_24:
  unsigned int v30 = [v1 isSiriCloudSyncEnabled];
  __int16 v31 = objc_msgSend([NSString alloc], "initWithFormat:", @"sc \"%d\"", v30);
  [v3 addObject:v31];

  LODWORD(v31) = [v1 isLocationSharingDevice];
  uint64_t v32 = objc_msgSend([NSString alloc], "initWithFormat:", @"ls \"%d\"", v31);
  [v3 addObject:v32];

  __int16 v33 = [v1 myriadTrialTreatment];
  if ([v33 length])
  {
    uint64_t v34 = (void *)[[NSString alloc] initWithFormat:@"tt \"%@\"", v33];
    [v3 addObject:v34];
  }
  uint64_t v35 = [v2 count];
  id v36 = objc_alloc(MEMORY[0x1E4F28E78]);
  if (v35)
  {
    __int16 v37 = [v2 componentsJoinedByString:@" "];
    unint64_t v38 = [v3 componentsJoinedByString:@" "];
    unsigned __int16 v27 = (void *)[v36 initWithFormat:@"Peer %@ (%@)", v37, v38];
  }
  else
  {
    __int16 v37 = [v3 componentsJoinedByString:@" "];
    unsigned __int16 v27 = (void *)[v36 initWithFormat:@"Peer (%@)", v37];
  }

LABEL_30:
  return v27;
}

id _AFPeerInfoGetShortIdentifier(void *a1)
{
  id v1 = a1;
  if ((unint64_t)[v1 length] > 8)
  {
    id v2 = [v1 substringToIndex:8];
  }
  else
  {
    id v2 = v1;
  }
  uint64_t v3 = v2;

  return v3;
}

id AFPeerInfoMerge(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  uint64_t v5 = v4;
  if (v3)
  {
    if (v4)
    {
      v9[0] = MEMORY[0x1E4F143A8];
      v9[1] = 3221225472;
      void v9[2] = __AFPeerInfoMerge_block_invoke;
      v9[3] = &unk_1E592A1A8;
      id v10 = v3;
      id v11 = v5;
      uint64_t v6 = [v10 mutatedCopyWithMutator:v9];

      goto LABEL_7;
    }
    id v7 = v3;
  }
  else
  {
    id v7 = v4;
  }
  uint64_t v6 = v7;
LABEL_7:

  return v6;
}

void __AFPeerInfoMerge_block_invoke(uint64_t a1, void *a2)
{
  id v33 = a2;
  if (([*(id *)(a1 + 32) isDeviceOwnedByCurrentUser] & 1) == 0) {
    objc_msgSend(v33, "setIsDeviceOwnedByCurrentUser:", objc_msgSend(*(id *)(a1 + 40), "isDeviceOwnedByCurrentUser"));
  }
  id v3 = [*(id *)(a1 + 32) assistantIdentifier];

  if (!v3)
  {
    id v4 = [*(id *)(a1 + 40) assistantIdentifier];
    [v33 setAssistantIdentifier:v4];
  }
  uint64_t v5 = [*(id *)(a1 + 32) sharedUserIdentifier];

  if (!v5)
  {
    uint64_t v6 = [*(id *)(a1 + 40) sharedUserIdentifier];
    [v33 setSharedUserIdentifier:v6];
  }
  id v7 = [*(id *)(a1 + 32) idsIdentifier];

  if (!v7)
  {
    id v8 = [*(id *)(a1 + 40) idsIdentifier];
    [v33 setIdsIdentifier:v8];
  }
  uint64_t v9 = [*(id *)(a1 + 32) idsDeviceUniqueIdentifier];

  if (!v9)
  {
    id v10 = [*(id *)(a1 + 40) idsDeviceUniqueIdentifier];
    [v33 setIdsDeviceUniqueIdentifier:v10];
  }
  id v11 = [*(id *)(a1 + 32) rapportEffectiveIdentifier];

  if (!v11)
  {
    id v12 = [*(id *)(a1 + 40) rapportEffectiveIdentifier];
    [v33 setRapportEffectiveIdentifier:v12];
  }
  long long v13 = [*(id *)(a1 + 32) homeKitAccessoryIdentifier];

  if (!v13)
  {
    long long v14 = [*(id *)(a1 + 40) homeKitAccessoryIdentifier];
    [v33 setHomeKitAccessoryIdentifier:v14];
  }
  long long v15 = [*(id *)(a1 + 32) mediaSystemIdentifier];

  if (!v15)
  {
    long long v16 = [*(id *)(a1 + 40) mediaSystemIdentifier];
    [v33 setMediaSystemIdentifier:v16];
  }
  uint64_t v17 = [*(id *)(a1 + 32) mediaRouteIdentifier];

  if (!v17)
  {
    uint64_t v18 = [*(id *)(a1 + 40) mediaRouteIdentifier];
    [v33 setMediaRouteIdentifier:v18];
  }
  if (([*(id *)(a1 + 32) isCommunalDevice] & 1) == 0) {
    objc_msgSend(v33, "setIsCommunalDevice:", objc_msgSend(*(id *)(a1 + 40), "isCommunalDevice"));
  }
  id v19 = [*(id *)(a1 + 32) roomName];

  if (!v19)
  {
    __int16 v20 = [*(id *)(a1 + 40) roomName];
    [v33 setRoomName:v20];
  }
  __int16 v21 = [*(id *)(a1 + 32) name];

  if (!v21)
  {
    __int16 v22 = [*(id *)(a1 + 40) name];
    [v33 setName:v22];
  }
  uint64_t v23 = [*(id *)(a1 + 32) productType];

  if (!v23)
  {
    uint64_t v24 = [*(id *)(a1 + 40) productType];
    [v33 setProductType:v24];
  }
  uint64_t v25 = [*(id *)(a1 + 32) buildVersion];

  if (!v25)
  {
    __int16 v26 = [*(id *)(a1 + 40) buildVersion];
    [v33 setBuildVersion:v26];
  }
  unsigned __int16 v27 = [*(id *)(a1 + 32) userInterfaceIdiom];

  if (!v27)
  {
    uint64_t v28 = [*(id *)(a1 + 40) userInterfaceIdiom];
    [v33 setUserInterfaceIdiom:v28];
  }
  id v29 = [*(id *)(a1 + 32) aceVersion];

  if (!v29)
  {
    unsigned int v30 = [*(id *)(a1 + 40) aceVersion];
    [v33 setAceVersion:v30];
  }
  if (([*(id *)(a1 + 32) isSiriCloudSyncEnabled] & 1) == 0) {
    objc_msgSend(v33, "setIsSiriCloudSyncEnabled:", objc_msgSend(*(id *)(a1 + 40), "isSiriCloudSyncEnabled"));
  }
  if (([*(id *)(a1 + 32) isLocationSharingDevice] & 1) == 0) {
    objc_msgSend(v33, "setIsLocationSharingDevice:", objc_msgSend(*(id *)(a1 + 40), "isLocationSharingDevice"));
  }
  __int16 v31 = [*(id *)(a1 + 32) myriadTrialTreatment];

  if (!v31)
  {
    uint64_t v32 = [*(id *)(a1 + 40) myriadTrialTreatment];
    [v33 setMyriadTrialTreatment:v32];
  }
}

uint64_t SISchemaClientTurnContextReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    id v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        uint64_t v17 = PBReaderReadData();
        uint64_t v18 = *(void **)(a1 + 8);
        *(void *)(a1 + 8) = v17;
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

BOOL AFSearchQueriesDataSharingStatusGetIsValid(unint64_t a1)
{
  return a1 < 3;
}

BOOL AFSearchQueriesDataSharingStatusGetIsValidAndSpecified(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 2;
}

__CFString *AFSearchQueriesDataSharingStatusGetName(unint64_t a1)
{
  if (a1 > 2) {
    return @"(unknown)";
  }
  else {
    return off_1E592A1C8[a1];
  }
}

uint64_t AFSearchQueriesDataSharingStatusGetFromName(void *a1)
{
  id v1 = a1;
  if ([v1 length])
  {
    if (AFSearchQueriesDataSharingStatusGetFromName_onceToken != -1) {
      dispatch_once(&AFSearchQueriesDataSharingStatusGetFromName_onceToken, &__block_literal_global_34879);
    }
    id v2 = [(id)AFSearchQueriesDataSharingStatusGetFromName_map objectForKey:v1];
    uint64_t v3 = [v2 integerValue];
  }
  else
  {
    uint64_t v3 = 0;
  }

  return v3;
}

void __AFSearchQueriesDataSharingStatusGetFromName_block_invoke()
{
  id v0 = (void *)AFSearchQueriesDataSharingStatusGetFromName_map;
  AFSearchQueriesDataSharingStatusGetFromName_map = (uint64_t)&unk_1EEE98EC8;
}

void sub_19D0703C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
}

uint64_t __Block_byref_object_copy__35034(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__35035(uint64_t a1)
{
}

void sub_19D0708F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location, char a19)
{
  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

BOOL AFWorkoutTypeGetIsValid(unint64_t a1)
{
  return a1 < 0xB;
}

BOOL AFWorkoutTypeGetIsValidAndSpecified(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 0xA;
}

__CFString *AFWorkoutTypeGetName(unint64_t a1)
{
  if (a1 > 0xA) {
    return @"(unknown)";
  }
  else {
    return off_1E592A310[a1];
  }
}

uint64_t AFWorkoutTypeGetFromName(void *a1)
{
  id v1 = a1;
  if ([v1 length])
  {
    if (AFWorkoutTypeGetFromName_onceToken != -1) {
      dispatch_once(&AFWorkoutTypeGetFromName_onceToken, &__block_literal_global_35121);
    }
    id v2 = [(id)AFWorkoutTypeGetFromName_map objectForKey:v1];
    uint64_t v3 = [v2 integerValue];
  }
  else
  {
    uint64_t v3 = 0;
  }

  return v3;
}

void __AFWorkoutTypeGetFromName_block_invoke()
{
  id v0 = (void *)AFWorkoutTypeGetFromName_map;
  AFWorkoutTypeGetFromName_map = (uint64_t)&unk_1EEE98EF0;
}

uint64_t AFSiriResponseHandlingInterface()
{
  return [MEMORY[0x1E4F29280] interfaceWithProtocol:&unk_1EEEA1DC0];
}

__CFString *AFAnalyticsEventTypeGetLegacyName(__CFString *a1)
{
  if ((uint64_t)a1 > 1601)
  {
    if ((uint64_t)a1 > 2799)
    {
      if ((uint64_t)a1 <= 3799)
      {
        if ((uint64_t)a1 > 3400)
        {
          if ((uint64_t)a1 <= 3599)
          {
            switch((unint64_t)a1)
            {
              case 0xDACuLL:
                a1 = @"ClientFlow.Plugin";
                break;
              case 0xDADuLL:
                a1 = @"ClientFlow.Plugin.Started";
                break;
              case 0xDAEuLL:
                a1 = @"ClientFlow.Plugin.ExecutionStarted";
                break;
              case 0xDAFuLL:
                a1 = @"ClientFlow.Plugin.ExecutionFinished";
                break;
              case 0xDB0uLL:
                a1 = @"ClientFlow.Plugin.ExecutionFailed";
                break;
              default:
                if (a1 == (__CFString *)3401)
                {
                  a1 = @"Experiment.Exposure.SiriVOXSounds";
                }
                else
                {
                  if (a1 != (__CFString *)3402) {
                    goto LABEL_1026;
                  }
                  a1 = @"Experiment.Exposure.SiriVOXTapToSiriBehavior";
                }
                break;
            }
          }
          else
          {
            switch((unint64_t)a1)
            {
              case 0xE10uLL:
                a1 = @"ClientFlow.CFClient";
                break;
              case 0xE11uLL:
                a1 = @"ClientFlow.CFClient.ScripterLoadStarted";
                break;
              case 0xE12uLL:
                a1 = @"ClientFlow.CFClient.ScripterLoadFinished";
                break;
              case 0xE13uLL:
                a1 = @"ClientFlow.CFClient.ScripterWarmedUp";
                break;
              case 0xE14uLL:
                a1 = @"ClientFlow.CFClient.ScripterWarmedUpWithScriptHint";
                break;
              case 0xE15uLL:
                a1 = @"ClientFlow.CFClient.Execution.Started";
                break;
              case 0xE16uLL:
                a1 = @"ClientFlow.CFClient.Execution.Finished";
                break;
              case 0xE17uLL:
                a1 = @"ClientFlow.CFClient.Execution.Failed";
                break;
              default:
                switch((unint64_t)a1)
                {
                  case 0xE74uLL:
                    a1 = @"ClientFlow.JS";
                    break;
                  case 0xE75uLL:
                    a1 = @"ClientFlow.JS.SiriMini";
                    break;
                  case 0xE76uLL:
                    a1 = @"ClientFlow.JS.ServerFlow";
                    break;
                  case 0xE77uLL:
                    a1 = @"ClientFlow.JS.Provider";
                    break;
                  case 0xE78uLL:
                    a1 = @"ClientFlow.JS.BackgroundAction.Maintenance";
                    break;
                  case 0xE79uLL:
                    a1 = @"ClientFlow.JS.BackgroundAction.ActivityCollection";
                    break;
                  case 0xE7AuLL:
                    a1 = @"ClientFlow.JS.BackgroundAction.DataMigration";
                    break;
                  default:
                    goto LABEL_1026;
                }
                break;
            }
          }
        }
        else if ((uint64_t)a1 > 3100)
        {
          if ((uint64_t)a1 > 3299)
          {
            if ((uint64_t)a1 > 3301)
            {
              if (a1 == (__CFString *)3302)
              {
                a1 = @"Setup.PHSTrainingStarted";
              }
              else
              {
                if (a1 != (__CFString *)3400) {
                  goto LABEL_1026;
                }
                a1 = @"Experiment";
              }
            }
            else if (a1 == (__CFString *)3300)
            {
              a1 = @"Setup";
            }
            else
            {
              a1 = @"Setup.PHSBootstrapped";
            }
          }
          else
          {
            switch((unint64_t)a1)
            {
              case 0xC80uLL:
                a1 = @"Settings";
                break;
              case 0xC81uLL:
                a1 = @"Settings.SetLanguage";
                break;
              case 0xC82uLL:
                a1 = @"Settings.SetOutputVoice";
                break;
              case 0xC83uLL:
                a1 = @"Settings.SetVoiceFeedback";
                break;
              case 0xC84uLL:
                a1 = @"Settings.ChangedTCCInfo";
                break;
              case 0xC85uLL:
                a1 = @"Settings.ChangedTypeToSiri";
                break;
              default:
                if (a1 != (__CFString *)3101) {
                  goto LABEL_1026;
                }
                a1 = @"DeviceConfiguration.Snapshot";
                break;
            }
          }
        }
        else if ((uint64_t)a1 > 2999)
        {
          if ((uint64_t)a1 > 3001)
          {
            if (a1 == (__CFString *)3002)
            {
              a1 = @"Xcode.Test.End";
            }
            else
            {
              if (a1 != (__CFString *)3100) {
                goto LABEL_1026;
              }
              a1 = @"DeviceConfiguration";
            }
          }
          else if (a1 == (__CFString *)3000)
          {
            a1 = @"Xcode";
          }
          else
          {
            a1 = @"Xcode.Test.Begin";
          }
        }
        else
        {
          switch((unint64_t)a1)
          {
            case 0xB54uLL:
              a1 = @"Music";
              break;
            case 0xB55uLL:
              a1 = @"Music.Playback.Ready";
              break;
            case 0xB56uLL:
              a1 = @"Music.Playback.SecureKey";
              break;
            case 0xB57uLL:
              a1 = @"Music.Playback.AssetLoad";
              break;
            case 0xB58uLL:
              a1 = @"Music.Playback.Summary";
              break;
            default:
              if (a1 == (__CFString *)2800)
              {
                a1 = @"NowPlaying";
              }
              else
              {
                if (a1 != (__CFString *)2801) {
                  goto LABEL_1026;
                }
                a1 = @"NowPlaying.isPlaying.Changed";
              }
              break;
          }
        }
      }
      else if ((uint64_t)a1 > 3999)
      {
        if ((uint64_t)a1 > 4199)
        {
          if ((uint64_t)a1 > 4399)
          {
            switch((unint64_t)a1)
            {
              case 0x1130uLL:
                a1 = @"LocalRecognition";
                break;
              case 0x1131uLL:
                a1 = @"LocalRecognition.Started";
                break;
              case 0x1132uLL:
                a1 = @"LocalRecognition.PartialResult";
                break;
              case 0x1133uLL:
                a1 = @"LocalRecognition.EagerCandidate";
                break;
              case 0x1134uLL:
                a1 = @"LocalRecognition.Package";
                break;
              case 0x1135uLL:
                a1 = @"LocalRecognition.Finished";
                break;
              default:
                goto LABEL_1026;
            }
          }
          else
          {
            switch((unint64_t)a1)
            {
              case 0x10CCuLL:
                a1 = @"Analytics";
                break;
              case 0x10CDuLL:
                a1 = @"Analytics.Store.Database.PostCorruptionDetected";
                break;
              case 0x10CEuLL:
                a1 = @"Analytics.Store.Database.OpenFailed";
                break;
              case 0x10CFuLL:
                a1 = @"Analytics.Store.Database.IntegrityCheckFailed";
                break;
              case 0x10D0uLL:
                a1 = @"Analytics.Store.Database.UnrecoverableErrorDetected";
                break;
              case 0x10D1uLL:
                a1 = @"Analytics.Store.Database.PreparationFailed";
                break;
              default:
                if (a1 == (__CFString *)4200)
                {
                  a1 = @"IDS";
                }
                else
                {
                  if (a1 != (__CFString *)4201) {
                    goto LABEL_1026;
                  }
                  a1 = @"IDS.DeviceConnection.Snapshot.Local";
                }
                break;
            }
          }
        }
        else if ((uint64_t)a1 > 4099)
        {
          if (a1 == (__CFString *)4100)
          {
            a1 = @"CloudKit";
          }
          else if (a1 == (__CFString *)4101)
          {
            a1 = @"CloudKit.Siri.ChangeArrived";
          }
          else
          {
            if (a1 != (__CFString *)4102) {
              goto LABEL_1026;
            }
            a1 = @"CloudKit.Knowledge.ChangeArrived";
          }
        }
        else
        {
          switch((unint64_t)a1)
          {
            case 0xFA0uLL:
              a1 = @"AssistantService";
              break;
            case 0xFA1uLL:
              a1 = @"AssistantService.Launch";
              break;
            case 0xFA2uLL:
              a1 = @"AssistantService.Exit";
              break;
            case 0xFA3uLL:
              a1 = @"AssistantService.Message.Send";
              break;
            case 0xFA4uLL:
              a1 = @"AssistantService.Message.Delivered";
              break;
            case 0xFA5uLL:
              a1 = @"AssistantService.Message.Begin";
              break;
            case 0xFA6uLL:
              a1 = @"AssistantService.Message.End";
              break;
            case 0xFA7uLL:
              a1 = @"AssistantService.CommandPerform.Begin";
              break;
            case 0xFA8uLL:
              a1 = @"AssistantService.CommandPerform.End";
              break;
            case 0xFA9uLL:
              a1 = @"AssistantService.BundleLoading.Begin";
              break;
            case 0xFAAuLL:
              a1 = @"AssistantService.BundleLoading.End";
              break;
            default:
              goto LABEL_1026;
          }
        }
      }
      else
      {
        switch((unint64_t)a1)
        {
          case 0xED8uLL:
            a1 = @"ClientFlow.ClientScripter";
            break;
          case 0xED9uLL:
            a1 = @"ClientFlow.ClientScripter.Started";
            break;
          case 0xEDAuLL:
            a1 = @"ClientFlow.ClientScripter.JSContextSetup.Started";
            break;
          case 0xEDBuLL:
            a1 = @"ClientFlow.ClientScripter.JSContextSetup.Finished";
            break;
          case 0xEDCuLL:
            a1 = @"ClientFlow.ClientScripter.JSEvaluation.StartedForScript";
            break;
          case 0xEDDuLL:
            a1 = @"ClientFlow.ClientScripter.JSEvaluation.FinishedForScript";
            break;
          case 0xEDEuLL:
            a1 = @"ClientFlow.ClientScripter.JSExecution.Started";
            break;
          case 0xEDFuLL:
            a1 = @"ClientFlow.ClientScripter.JSExecution.Finished";
            break;
          case 0xEE0uLL:
            a1 = @"ClientFlow.ClientScripter.JSExecution.Successful";
            break;
          case 0xEE1uLL:
            a1 = @"ClientFlow.ClientScripter.JSExecution.Failed";
            break;
          case 0xEE2uLL:
            a1 = @"ClientFlow.ClientScripter.Script.SentFromServer";
            break;
          case 0xEE3uLL:
            a1 = @"ClientFlow.ClientScripter.Script.RetrievedFromServer";
            break;
          case 0xEE4uLL:
            a1 = @"ClientFlow.ClientScripter.Script.LoadedFromMemoryCache";
            break;
          case 0xEE5uLL:
            a1 = @"ClientFlow.ClientScripter.Script.LoadedFromFilesystem";
            break;
          case 0xEE6uLL:
            a1 = @"ClientFlow.ClientScripter.Script.UsedCachedJSContext";
            break;
          case 0xEE7uLL:
            a1 = @"ClientFlow.ClientScripter.Script.UsedDeferredCachedJSContext";
            break;
          case 0xEE8uLL:
            a1 = @"ClientFlow.ClientScripter.Script.RetrievalFailed";
            break;
          case 0xEE9uLL:
            a1 = @"ClientFlow.ClientScripter.Script.CachingFailed";
            break;
          case 0xEEAuLL:
            a1 = @"ClientFlow.ClientScripter.SentCommand";
            break;
          case 0xEEBuLL:
            a1 = @"ClientFlow.ClientScripter.SentCommandAsync";
            break;
          case 0xEECuLL:
            a1 = @"ClientFlow.ClientScripter.ReceivedResponse";
            break;
          case 0xEEDuLL:
            a1 = @"ClientFlow.ClientScripter.JSContextCreatedInWarmup";
            break;
          case 0xEEEuLL:
            a1 = @"ClientFlow.ClientScripter.JSContextEvaluatedScriptInWarmupForScript";
            break;
          case 0xEEFuLL:
            a1 = @"ClientFlow.ClientScripter.CachedJSContextCount";
            break;
          case 0xEF0uLL:
            a1 = @"ClientFlow.ClientScripter.ExecutionFailed";
            break;
          default:
            switch((unint64_t)a1)
            {
              case 0xF3CuLL:
                a1 = @"UI.Card.PresentBegin";
                break;
              case 0xF3DuLL:
                a1 = @"UI.Card.PresentEnd";
                break;
              case 0xF3EuLL:
                a1 = @"UI.Card.SectionPresentBegin";
                break;
              case 0xF3FuLL:
                a1 = @"UI.Card.SectionPresentEnd";
                break;
              case 0xF40uLL:
                a1 = @"UI.Card.EngagedWith";
                break;
              case 0xF41uLL:
                a1 = @"UI.Card.SectionEngagedWith";
                break;
              case 0xF42uLL:
                a1 = @"UI.Card.AsyncCardRequested";
                break;
              case 0xF43uLL:
                a1 = @"UI.Card.AsyncCardReceived";
                break;
              default:
                goto LABEL_1026;
            }
            break;
        }
      }
    }
    else if ((uint64_t)a1 <= 2199)
    {
      if ((uint64_t)a1 > 1899)
      {
        switch((unint64_t)a1)
        {
          case 0x76CuLL:
            a1 = @"Client";
            break;
          case 0x76DuLL:
            a1 = @"Client.StartRequest";
            break;
          case 0x76EuLL:
            a1 = @"Client.StartSpeechRequest";
            break;
          case 0x76FuLL:
            a1 = @"Client.StartSpeechPronunciationRequest";
            break;
          case 0x770uLL:
            a1 = @"Client.StartAcousticIDRequest";
            break;
          case 0x771uLL:
            a1 = @"Client.StartContinuityRequest";
            break;
          case 0x772uLL:
            a1 = @"Client.StartCorrectionRequest";
            break;
          case 0x773uLL:
            a1 = @"Client.StartDirectActionRequest";
            break;
          case 0x774uLL:
            a1 = @"Client.StartTextRequest";
            break;
          case 0x775uLL:
            a1 = @"Client.UpdateSpeech";
            break;
          case 0x776uLL:
            a1 = @"Client.StopSpeech";
            break;
          case 0x777uLL:
            a1 = @"Client.CancelSpeech";
            break;
          case 0x778uLL:
            a1 = @"Client.RequestCanceled";
            break;
          case 0x779uLL:
            a1 = @"Client.RequestFailed";
            break;
          case 0x77AuLL:
            a1 = @"Client.RequestCompleted";
            break;
          case 0x77BuLL:
            a1 = @"Client.Preheat";
            break;
          case 0x77CuLL:
            a1 = @"Client.AcousticId.Begin";
            break;
          case 0x77DuLL:
            a1 = @"Client.AcousticId.End";
            break;
          case 0x77EuLL:
            a1 = @"Client.Tether.Wait.Begin";
            break;
          case 0x77FuLL:
            a1 = @"Client.Tether.Wait.End";
            break;
          case 0x780uLL:
            a1 = @"Client.Tether.Attach.Begin";
            break;
          case 0x781uLL:
            a1 = @"Client.Tether.Attach.End";
            break;
          case 0x782uLL:
            a1 = @"Client.Tether.Attached";
            break;
          case 0x783uLL:
            a1 = @"Client.Tether.Detached";
            break;
          case 0x784uLL:
            a1 = @"Client.Feedback.Presented";
            break;
          case 0x785uLL:
            a1 = @"Client.AutoDisambiguation.Requested";
            break;
          case 0x786uLL:
            a1 = @"Client.AutoDisambiguation.Saved";
            break;
          default:
            switch((unint64_t)a1)
            {
              case 0x7D0uLL:
                a1 = @"Client.Coord";
                break;
              case 0x7D1uLL:
                a1 = @"Client.Coord.AudioReady";
                break;
              case 0x7D2uLL:
                a1 = @"Client.Coord.AdvertisingStartRequest";
                break;
              case 0x7D3uLL:
                a1 = @"Client.Coord.AdvertisingDidStart";
                break;
              case 0x7D4uLL:
                a1 = @"Client.Coord.AdvertisingEndRequest";
                break;
              case 0x7D5uLL:
                a1 = @"Client.Coord.AdvertisingDidEnd";
                break;
              case 0x7D6uLL:
                a1 = @"Client.Coord.DecisionMade";
                break;
              case 0x7D7uLL:
                a1 = @"Client.Coord.SlowdownGenerated";
                break;
              case 0x7D8uLL:
                a1 = @"Client.Coord.SlowdownReceived";
                break;
              case 0x7D9uLL:
                goto LABEL_1026;
              case 0x7DAuLL:
                a1 = @"Client.Coord.AdvertisingWillEnd";
                break;
              case 0x7DBuLL:
                a1 = @"Client.Coord.ActivityStart";
                break;
              case 0x7DCuLL:
                a1 = @"Client.Coord.ActivityEnd";
                break;
              default:
                switch((unint64_t)a1)
                {
                  case 0x834uLL:
                    a1 = @"UI.Watch";
                    break;
                  case 0x835uLL:
                    a1 = @"UI.Activation.GizmoVTWhileAlreadyRecording";
                    break;
                  case 0x836uLL:
                    a1 = @"UI.DelayedResponse.Education";
                    break;
                  case 0x837uLL:
                    a1 = @"UI.DelayedResponse.WristLowered";
                    break;
                  case 0x838uLL:
                    a1 = @"UI.DelayedResponse.BacklightOn";
                    break;
                  case 0x839uLL:
                    a1 = @"UI.TTS.Canceled";
                    break;
                  default:
                    goto LABEL_1026;
                }
                break;
            }
            break;
        }
      }
      else if ((uint64_t)a1 > 1701)
      {
        switch((unint64_t)a1)
        {
          case 0x708uLL:
            a1 = @"voice-services.daemon";
            break;
          case 0x709uLL:
            a1 = @"voice-services.daemon.speech-request.creation";
            break;
          case 0x70AuLL:
            a1 = @"voice-services.daemon.speech-request.vocalization.begin";
            break;
          case 0x70BuLL:
            a1 = @"voice-services.daemon.speech-request.vocalization.end";
            break;
          default:
            if (a1 != (__CFString *)1702) {
              goto LABEL_1026;
            }
            a1 = @"Coverage.RequestStatistics.Failure";
            break;
        }
      }
      else if (a1 == (__CFString *)1602)
      {
        a1 = @"Coverage.AggregateDictionary.Distribution";
      }
      else if (a1 == (__CFString *)1700)
      {
        a1 = @"Coverage.RequestStatistics";
      }
      else
      {
        if (a1 != (__CFString *)1701) {
          goto LABEL_1026;
        }
        a1 = @"Coverage.RequestStatistics.Cancellation";
      }
    }
    else if ((uint64_t)a1 > 2499)
    {
      switch((unint64_t)a1)
      {
        case 0xA28uLL:
          a1 = @"CDM";
          break;
        case 0xA29uLL:
          a1 = @"CDM.NLService.HandleCommand.Begin";
          break;
        case 0xA2AuLL:
          a1 = @"CDM.NLService.HandleCommand.End";
          break;
        case 0xA2BuLL:
          a1 = @"CDM.FlowService.HandleCommand.Begin";
          break;
        case 0xA2CuLL:
          a1 = @"CDM.FlowService.HandleCommand.End";
          break;
        case 0xA2DuLL:
          a1 = @"CDM.Config.AssetManager.OfflineQueryStart";
          break;
        case 0xA2EuLL:
          a1 = @"CDM.Config.AssetManager.OfflineQuerySuccess";
          break;
        case 0xA2FuLL:
          a1 = @"CDM.Config.AssetManager.OfflineQueryFailed";
          break;
        case 0xA30uLL:
          a1 = @"CDM.Config.AssetManager.OnlineQueryStart";
          break;
        case 0xA31uLL:
          a1 = @"CDM.Config.AssetManager.OnlineQuerySuccess";
          break;
        case 0xA32uLL:
          a1 = @"CDM.Config.AssetManager.OnlineQueryFailed";
          break;
        case 0xA33uLL:
          a1 = @"CDM.Config.AssetManager.AssetDownloadStart";
          break;
        case 0xA34uLL:
          a1 = @"CDM.Config.AssetManager.AssetDownloadCompleted";
          break;
        case 0xA35uLL:
          a1 = @"CDM.Config.AssetManager.AssetDownloadFailed";
          break;
        case 0xA36uLL:
          a1 = @"CDM.Config.AssetManager.AssetDownloadCancelled";
          break;
        case 0xA37uLL:
          a1 = @"CDM.Config.AssetManager.AssetPurged";
          break;
        case 0xA38uLL:
          a1 = @"CDM.StartSpeech.Received";
          break;
        case 0xA39uLL:
          a1 = @"CDM.SetAssistantData.Received";
          break;
        case 0xA3AuLL:
          a1 = @"CDM.LoadAssistant.Received";
          break;
        default:
          switch((unint64_t)a1)
          {
            case 0xA8CuLL:
              a1 = @"VOXService";
              break;
            case 0xA8DuLL:
              a1 = @"VOXService.SpeechSynthesis.Enqueued";
              break;
            case 0xA8EuLL:
              a1 = @"VOXService.SpeechSynthesis.Canceled";
              break;
            case 0xA8FuLL:
              a1 = @"VOXService.SpeechSynthesis.Failed";
              break;
            case 0xA90uLL:
              a1 = @"VOXService.SpeechSynthesis.Finished";
              break;
            case 0xA91uLL:
              a1 = @"VOXService.SpeechSynthesis.Interrupted";
              break;
            case 0xA92uLL:
              a1 = @"VOXService.SpeechSynthesis.Started";
              break;
            case 0xA93uLL:
              a1 = @"VOXService.TwoShotSound.Begin";
              break;
            case 0xA94uLL:
              a1 = @"VOXService.TwoShotSound.End";
              break;
            case 0xA95uLL:
              a1 = @"VOXService.SessionInactiveSound.Begin";
              break;
            case 0xA96uLL:
              a1 = @"VOXService.SessionInactiveSound.End";
              break;
            case 0xA97uLL:
              a1 = @"VOXService.TapToSiriSound.Begin";
              break;
            case 0xA98uLL:
              a1 = @"VOXService.TapToSiriSound.End";
              break;
            default:
              switch((unint64_t)a1)
              {
                case 0x9C4uLL:
                  a1 = @"QA.Automation";
                  break;
                case 0x9C5uLL:
                  a1 = @"QA.Automation.Begin";
                  break;
                case 0x9C6uLL:
                  a1 = @"QA.Automation.End";
                  break;
                case 0x9C7uLL:
                  a1 = @"QA.Automation.Mark";
                  break;
                default:
                  goto LABEL_1026;
              }
              break;
          }
          break;
      }
    }
    else if ((uint64_t)a1 > 2299)
    {
      if ((uint64_t)a1 > 2399)
      {
        if (a1 == (__CFString *)2400)
        {
          a1 = @"UIPlugin.Movies";
        }
        else if (a1 == (__CFString *)2401)
        {
          a1 = @"UIPlugin.Movies.BeginLoadingMediaButtons";
        }
        else
        {
          if (a1 != (__CFString *)2402) {
            goto LABEL_1026;
          }
          a1 = @"UIPlugin.Movies.EndLoadingMediaButtons";
        }
      }
      else
      {
        switch((unint64_t)a1)
        {
          case 0x8FCuLL:
            a1 = @"VoiceTrigger";
            break;
          case 0x8FDuLL:
            a1 = @"VoiceTrigger.Start";
            break;
          case 0x8FEuLL:
            a1 = @"VoiceTrigger.Fire";
            break;
          case 0x8FFuLL:
            a1 = @"VoiceTrigger.End";
            break;
          case 0x900uLL:
            a1 = @"VoiceTrigger.EarlyDetect";
            break;
          default:
            goto LABEL_1026;
        }
      }
    }
    else
    {
      switch((unint64_t)a1)
      {
        case 0x898uLL:
          a1 = @"Client.Dictation";
          break;
        case 0x899uLL:
          a1 = @"Client.Dictation.StartRequest";
          break;
        case 0x89AuLL:
          a1 = @"Client.Dictation.UpdateSpeech";
          break;
        case 0x89BuLL:
          a1 = @"Client.Dictation.StopSpeech";
          break;
        case 0x89CuLL:
          a1 = @"Client.Dictation.CancelSpeech";
          break;
        case 0x89DuLL:
          a1 = @"Client.Dictation.RequestCanceled";
          break;
        case 0x89EuLL:
          a1 = @"Client.Dictation.RequestFailed";
          break;
        case 0x89FuLL:
          a1 = @"Client.Dictation.RequestCompleted";
          break;
        case 0x8A0uLL:
          a1 = @"Client.Dictation.TimeoutRequest";
          break;
        case 0x8A1uLL:
          a1 = @"Client.Dictation.SpeechRecording.Started";
          break;
        case 0x8A2uLL:
          a1 = @"Client.Dictation.SpeechRecording.Canceled";
          break;
        case 0x8A3uLL:
          a1 = @"Client.Dictation.SpeechRecording.Completed";
          break;
        case 0x8A4uLL:
          a1 = @"Client.Dictation.SpeechRecording.Failed";
          break;
        case 0x8A5uLL:
          a1 = @"Client.Dictation.SpeechRecognition.PhrasesRecognized";
          break;
        case 0x8A6uLL:
          a1 = @"Client.Dictation.SpeechRecognition.TokensRecognized";
          break;
        case 0x8A7uLL:
          a1 = @"Client.Dictation.SpeechRecognition.TranscriptionObjectsRecognized";
          break;
        case 0x8A8uLL:
          a1 = @"Client.Dictation.SpeechRecognition.Completed";
          break;
        case 0x8A9uLL:
          a1 = @"Client.Dictation.SpeechRecognition.Failed";
          break;
        case 0x8AAuLL:
          a1 = @"Client.Dictation.AppDidEnterBackground";
          break;
        case 0x8ABuLL:
          a1 = @"Client.Dictation.SmartLanguageSelection.LanguageOverridden";
          break;
        default:
          goto LABEL_1026;
      }
    }
  }
  else
  {
    if ((uint64_t)a1 <= 799)
    {
      if ((uint64_t)a1 > 399)
      {
        if ((uint64_t)a1 <= 599)
        {
          switch((unint64_t)a1)
          {
            case 0x1F4uLL:
              a1 = @"Daemon.GenericIntent";
              break;
            case 0x1F5uLL:
              a1 = @"Daemon.GenericIntent.Handle.Begin";
              break;
            case 0x1F6uLL:
              a1 = @"Daemon.GenericIntent.Handle.Timeout";
              break;
            case 0x1F7uLL:
              a1 = @"Daemon.GenericIntent.Deliver.Begin";
              break;
            case 0x1F8uLL:
              a1 = @"Daemon.GenericIntent.Recipient.StateChange";
              break;
            case 0x1F9uLL:
              a1 = @"Daemon.GenericIntent.Recipient.Crash";
              break;
            case 0x1FAuLL:
              a1 = @"Daemon.GenericIntent.Recipient.Finished";
              break;
            case 0x1FBuLL:
              a1 = @"Daemon.GenericIntent.Handle.End";
              break;
            default:
              switch((unint64_t)a1)
              {
                case 0x190uLL:
                  a1 = @"Daemon.Service";
                  break;
                case 0x191uLL:
                  a1 = @"Daemon.Service.Handle.Begin";
                  break;
                case 0x192uLL:
                  a1 = @"Daemon.Service.Handle.End";
                  break;
                case 0x193uLL:
                  a1 = @"Daemon.Service.Bundle.Handle.Begin";
                  break;
                case 0x194uLL:
                  a1 = @"Daemon.Service.Bundle.Handle.End";
                  break;
                default:
                  goto LABEL_1026;
              }
              break;
          }
        }
        else
        {
          switch((unint64_t)a1)
          {
            case 0x258uLL:
              a1 = @"Daemon.Intent";
              break;
            case 0x259uLL:
              a1 = @"Daemon.Intent.Extension.Prepare";
              break;
            case 0x25AuLL:
              a1 = @"Daemon.Intent.Extension.Ready";
              break;
            case 0x25BuLL:
              a1 = @"Daemon.Intent.Extension.UnexpectedExit";
              break;
            case 0x25CuLL:
              a1 = @"Daemon.Intent.Extension.TimedOut.Launching";
              break;
            case 0x25DuLL:
              a1 = @"Daemon.Intent.Extension.TimedOut.Request";
              break;
            case 0x25EuLL:
              a1 = @"Daemon.Intent.Resolve.Begin";
              break;
            case 0x25FuLL:
              a1 = @"Daemon.Intent.Resolve.Request.Sent";
              break;
            case 0x260uLL:
              a1 = @"Daemon.Intent.Resolve.Response.Received";
              break;
            case 0x261uLL:
              a1 = @"Daemon.Intent.Resolve.End";
              break;
            case 0x262uLL:
              a1 = @"Daemon.Intent.Confirm.Begin";
              break;
            case 0x263uLL:
              a1 = @"Daemon.Intent.Confirm.Request.Sent";
              break;
            case 0x264uLL:
              a1 = @"Daemon.Intent.Confirm.Request.Received";
              break;
            case 0x265uLL:
              a1 = @"Daemon.Intent.Confirm.ResponseUIVisible";
              break;
            case 0x266uLL:
              a1 = @"Daemon.Intent.Confirm.End";
              break;
            case 0x267uLL:
              a1 = @"Daemon.Intent.Handle.Begin";
              break;
            case 0x268uLL:
              a1 = @"Daemon.Intent.Handle.Request.Sent";
              break;
            case 0x269uLL:
              a1 = @"Daemon.Intent.Handle.Request.Received";
              break;
            case 0x26AuLL:
              a1 = @"Daemon.Intent.Handle.ResponseUIVisible";
              break;
            case 0x26BuLL:
              a1 = @"Daemon.Intent.Handle.End";
              break;
            case 0x26CuLL:
              a1 = @"Daemon.Intent.Launch.WithIntent.Begin";
              break;
            case 0x26DuLL:
              a1 = @"Daemon.Intent.Launch.WithIntent.End";
              break;
            case 0x26EuLL:
              a1 = @"Daemon.Intent.Launch.WithUserActivity.Begin";
              break;
            case 0x26FuLL:
              a1 = @"Daemon.Intent.Launch.WithUserActivity.End";
              break;
            case 0x270uLL:
              a1 = @"Daemon.Intent.ResolveApp.Begin";
              break;
            case 0x271uLL:
              a1 = @"Daemon.Intent.ResolveApp.End";
              break;
            case 0x272uLL:
              a1 = @"Daemon.Intent.Extension.Request.Begin";
              break;
            case 0x273uLL:
              a1 = @"Daemon.Intent.Extension.Request.End";
              break;
            case 0x274uLL:
              a1 = @"Daemon.Intent.Extension.Prewarm.Begin";
              break;
            case 0x275uLL:
              a1 = @"Daemon.Intent.Extension.Prewarm.End";
              break;
            default:
              switch((unint64_t)a1)
              {
                case 0x2BCuLL:
                  a1 = @"Daemon.Task";
                  break;
                case 0x2BDuLL:
                  a1 = @"Daemon.Task.Schedule";
                  break;
                case 0x2BEuLL:
                  a1 = @"Daemon.Task.Start";
                  break;
                case 0x2BFuLL:
                  a1 = @"Daemon.Task.Deliver";
                  break;
                case 0x2C0uLL:
                  a1 = @"Daemon.Task.Finish";
                  break;
                default:
                  goto LABEL_1026;
              }
              break;
          }
        }
      }
      else
      {
        switch((unint64_t)a1)
        {
          case 0xC8uLL:
            a1 = @"Daemon.Audio";
            break;
          case 0xC9uLL:
            a1 = @"Daemon.Audio.Init.Begin";
            break;
          case 0xCAuLL:
            a1 = @"Daemon.Audio.Init.End";
            break;
          case 0xCBuLL:
            a1 = @"Daemon.Audio.Configure.Begin";
            break;
          case 0xCCuLL:
            a1 = @"Daemon.Audio.Configure.End";
            break;
          case 0xCDuLL:
            a1 = @"Daemon.Audio.Prewarm.Begin";
            break;
          case 0xCEuLL:
            a1 = @"Daemon.Audio.Prewarm.End";
            break;
          case 0xCFuLL:
            a1 = @"Daemon.Audio.Prepare.Begin";
            break;
          case 0xD0uLL:
            a1 = @"Daemon.Audio.Prepare.End";
            break;
          case 0xD1uLL:
            a1 = @"Daemon.Audio.FetchRoute.Begin";
            break;
          case 0xD2uLL:
            a1 = @"Daemon.Audio.FetchRoute.End";
            break;
          case 0xD3uLL:
            a1 = @"Daemon.Audio.StartRecording.Begin";
            break;
          case 0xD4uLL:
            a1 = @"Daemon.Audio.StartRecording.End";
            break;
          case 0xD5uLL:
            a1 = @"Daemon.Audio.Recording.Begin";
            break;
          case 0xD6uLL:
            a1 = @"Daemon.Audio.Recording.FirstBuffer";
            break;
          case 0xD7uLL:
            a1 = @"Daemon.Audio.Recording.End";
            break;
          case 0xD8uLL:
            a1 = @"Daemon.Audio.StopRecording.Begin";
            break;
          case 0xD9uLL:
            a1 = @"Daemon.Audio.StopRecording.End";
            break;
          case 0xDAuLL:
            a1 = @"Daemon.Audio.LateBuffer";
            break;
          case 0xDBuLL:
            a1 = @"Daemon.Audio.Analyzer.Startpoint.Detected";
            break;
          case 0xDCuLL:
            a1 = @"Daemon.Audio.Analyzer.Endpoint.Hard.Detected";
            break;
          case 0xDDuLL:
            a1 = @"Daemon.Audio.Failure";
            break;
          case 0xDEuLL:
            a1 = @"Daemon.Audio.BTInfoFetch.Begin";
            break;
          case 0xDFuLL:
            a1 = @"Daemon.Audio.BTInfoFetch.End";
            break;
          case 0xE0uLL:
            a1 = @"Daemon.Audio.FanInfo";
            break;
          case 0xE1uLL:
            a1 = @"Daemon.Audio.FirstChanceTriggerInfo";
            break;
          case 0xE2uLL:
            a1 = @"Daemon.Audio.Recording.Interruption.Begin";
            break;
          case 0xE3uLL:
            a1 = @"Daemon.Audio.Recording.Interruption.End";
            break;
          case 0xE4uLL:
            a1 = @"Daemon.Audio.Endpointer.State";
            break;
          case 0xE5uLL:
            a1 = @"Daemon.Audio.Recording.FirstBuffer.Start";
            break;
          case 0xE6uLL:
            a1 = @"Daemon.Audio.Recording.FirstBuffer.Receipt";
            break;
          case 0xE7uLL:
            a1 = @"Daemon.Audio.Recording.LastBuffer.Start";
            break;
          case 0xE8uLL:
            a1 = @"Daemon.Audio.Recording.LastBuffer.Receipt";
            break;
          case 0xE9uLL:
            a1 = @"Daemon.Audio.Session.SetActive.Begin";
            break;
          case 0xEAuLL:
            a1 = @"Daemon.Audio.Session.SetActive.End";
            break;
          case 0xEBuLL:
            a1 = @"Daemon.Audio.Session.SetInactive.Begin";
            break;
          case 0xECuLL:
            a1 = @"Daemon.Audio.Session.SetInactive.End";
            break;
          case 0xEDuLL:
            a1 = @"Daemon.Audio.Recording.MissedBuffer";
            break;
          case 0xEEuLL:
            a1 = @"Daemon.Audio.File.Started";
            break;
          case 0xEFuLL:
            a1 = @"Daemon.Audio.TwoShot.Transition.Begin";
            break;
          case 0xF0uLL:
            a1 = @"Daemon.Audio.TwoShot.Transition.End";
            break;
          case 0xF1uLL:
            a1 = @"Daemon.Audio.Recording.Metrics";
            break;
          case 0xF2uLL:
          case 0xF3uLL:
          case 0xF4uLL:
          case 0xF5uLL:
          case 0xF6uLL:
          case 0xF7uLL:
          case 0xF8uLL:
          case 0xF9uLL:
          case 0xFAuLL:
          case 0xFBuLL:
          case 0xFCuLL:
          case 0xFDuLL:
          case 0xFEuLL:
          case 0xFFuLL:
          case 0x100uLL:
          case 0x101uLL:
          case 0x102uLL:
          case 0x103uLL:
          case 0x104uLL:
          case 0x105uLL:
          case 0x106uLL:
          case 0x107uLL:
          case 0x108uLL:
          case 0x109uLL:
          case 0x10AuLL:
          case 0x10BuLL:
          case 0x10CuLL:
          case 0x10DuLL:
          case 0x10EuLL:
          case 0x10FuLL:
          case 0x110uLL:
          case 0x111uLL:
          case 0x112uLL:
          case 0x113uLL:
          case 0x114uLL:
          case 0x115uLL:
          case 0x116uLL:
          case 0x117uLL:
          case 0x118uLL:
          case 0x119uLL:
          case 0x11AuLL:
          case 0x11BuLL:
          case 0x11CuLL:
          case 0x11DuLL:
          case 0x11EuLL:
          case 0x11FuLL:
          case 0x120uLL:
          case 0x121uLL:
          case 0x122uLL:
          case 0x123uLL:
          case 0x124uLL:
          case 0x125uLL:
          case 0x126uLL:
          case 0x127uLL:
          case 0x128uLL:
          case 0x129uLL:
          case 0x12AuLL:
          case 0x12BuLL:
            goto LABEL_1026;
          case 0x12CuLL:
            a1 = @"Daemon.Speech";
            break;
          case 0x12DuLL:
            a1 = @"Daemon.Speech.Capture.Start.Begin";
            break;
          case 0x12EuLL:
            a1 = @"Daemon.Speech.Capture.Start.End";
            break;
          case 0x12FuLL:
            a1 = @"Daemon.Speech.Capture.Update";
            break;
          case 0x130uLL:
            a1 = @"Daemon.Speech.Capture.Cancel";
            break;
          case 0x131uLL:
            a1 = @"Daemon.Speech.Capture.Stop";
            break;
          case 0x132uLL:
            a1 = @"Daemon.Speech.Failure";
            break;
          case 0x133uLL:
            a1 = @"Daemon.Speech.Capture.Continued";
            break;
          case 0x134uLL:
            a1 = @"Daemon.Speech.ResultCandidate.Evaluation.Begin";
            break;
          case 0x135uLL:
            a1 = @"Daemon.Speech.ResultCandidate.Evaluation.End";
            break;
          case 0x136uLL:
            a1 = @"Daemon.Speech.ResultCandidate.Accepted";
            break;
          case 0x137uLL:
            a1 = @"Daemon.Speech.ResultCandidate.Stashed";
            break;
          default:
            uint64_t v3 = (char *)&a1[-4].length + 4;
            a1 = @"Daemon";
            switch((unint64_t)v3)
            {
              case 0uLL:
                goto LABEL_1027;
              case 1uLL:
                a1 = @"Daemon.Launch";
                break;
              case 2uLL:
                a1 = @"Daemon.Loaded";
                break;
              case 3uLL:
                a1 = @"Daemon.Exit";
                break;
              case 4uLL:
                a1 = @"Daemon.Failure";
                break;
              default:
                switch((unint64_t)@"Daemon")
                {
                  case 'x':
                    a1 = @"Daemon.StartRequest.Speech";
                    break;
                  case 'y':
                    a1 = @"Daemon.StartRequest.Dictation";
                    break;
                  case 'z':
                    a1 = @"Daemon.StartRequest.Other";
                    break;
                  case '{':
                    a1 = @"Daemon.StartRequest.Keyboard";
                    break;
                  default:
                    goto LABEL_1026;
                }
                break;
            }
            break;
        }
      }
      return a1;
    }
    if ((uint64_t)a1 > 1399)
    {
      switch((unint64_t)a1)
      {
        case 0x578uLL:
          a1 = @"UI";
          return a1;
        case 0x579uLL:
          a1 = @"UI.Plugin.Loaded";
          return a1;
        case 0x57AuLL:
          a1 = @"UI.Activation.Prepare";
          return a1;
        case 0x57BuLL:
          a1 = @"UI.Activation.Cancel";
          return a1;
        case 0x57CuLL:
          a1 = @"UI.Activation.Handle.Begin";
          return a1;
        case 0x57DuLL:
          a1 = @"UI.Activation.Handle.End";
          return a1;
        case 0x57EuLL:
          a1 = @"UI.Present.Begin";
          return a1;
        case 0x57FuLL:
          a1 = @"UI.Present.End";
          return a1;
        case 0x580uLL:
          a1 = @"UI.Dismiss.Begin";
          return a1;
        case 0x581uLL:
          a1 = @"UI.Dismiss.End";
          return a1;
        case 0x582uLL:
          a1 = @"UI.Button.Down";
          return a1;
        case 0x583uLL:
          a1 = @"UI.Button.Up";
          return a1;
        case 0x584uLL:
          a1 = @"UI.Button.Tap";
          return a1;
        case 0x585uLL:
          a1 = @"UI.Blur";
          return a1;
        case 0x586uLL:
          a1 = @"UI.Flames.Present";
          return a1;
        case 0x587uLL:
          a1 = @"UI.Flames.Dismiss";
          return a1;
        case 0x588uLL:
          a1 = @"UI.Mode.Idle";
          return a1;
        case 0x589uLL:
          a1 = @"UI.Mode.Listening";
          return a1;
        case 0x58AuLL:
          a1 = @"UI.Mode.Thinking";
          return a1;
        case 0x58BuLL:
          a1 = @"UI.Mode.Success";
          return a1;
        case 0x58CuLL:
          a1 = @"UI.UUFR.Present";
          return a1;
        case 0x58DuLL:
          a1 = @"UI.Command.Handle.Begin";
          return a1;
        case 0x58EuLL:
          a1 = @"UI.Command.Handle.End";
          return a1;
        case 0x58FuLL:
          a1 = @"UI.Failure";
          return a1;
        case 0x590uLL:
          a1 = @"UI.TapToEditButton.Tap";
          return a1;
        case 0x591uLL:
          a1 = @"UI.URLSessionLoad.Failure";
          return a1;
        case 0x592uLL:
          a1 = @"UI.Disambiguation.Selected";
          return a1;
        case 0x593uLL:
          a1 = @"UI.TTS.ShouldSpeak";
          return a1;
        case 0x594uLL:
          a1 = @"UI.TTS.ShouldNotSpeak";
          return a1;
        case 0x595uLL:
          a1 = @"UI.TranscriptItem.Inserted";
          return a1;
        case 0x596uLL:
          a1 = @"UI.TranscriptItem.DidAppear";
          return a1;
        case 0x597uLL:
          a1 = @"UI.TranscriptItem.DidDisappear";
          return a1;
        case 0x598uLL:
          a1 = @"UI.Transcript.Scrolled";
          return a1;
        case 0x599uLL:
          a1 = @"UI.Unlock.Presented";
          return a1;
        case 0x59AuLL:
          a1 = @"UI.Unlock.Dismissed";
          return a1;
        case 0x59BuLL:
          a1 = @"UI.Device.Locked";
          return a1;
        case 0x59CuLL:
          a1 = @"UI.Device.Unlocked";
          return a1;
        case 0x59DuLL:
          a1 = @"UI.Punchout.Begin";
          return a1;
        case 0x59EuLL:
          a1 = @"UI.Punchout.End";
          return a1;
        case 0x59FuLL:
          a1 = @"UI.TranscriptItems.Reload.Begin";
          return a1;
        case 0x5A0uLL:
          a1 = @"UI.TranscriptItems.Reload.End";
          return a1;
        case 0x5A1uLL:
          a1 = @"UI.Mode.Presenting";
          return a1;
        case 0x5A2uLL:
          a1 = @"UI.Mode.Idle.Rendered";
          return a1;
        case 0x5A3uLL:
          a1 = @"UI.Mode.Listening.Rendered";
          return a1;
        case 0x5A4uLL:
          a1 = @"UI.Mode.Thinking.Rendered";
          return a1;
        case 0x5A5uLL:
          a1 = @"UI.Mode.Presenting.Rendered";
          return a1;
        case 0x5A6uLL:
          a1 = @"UI.Button.TextRequestInput.Start";
          return a1;
        case 0x5A7uLL:
          a1 = @"UI.Button.TextRequestInput.Done";
          return a1;
        case 0x5A8uLL:
          a1 = @"UI.Button.TextRequestInput.Clear";
          return a1;
        case 0x5A9uLL:
        case 0x5AAuLL:
        case 0x5ABuLL:
        case 0x5ACuLL:
        case 0x5ADuLL:
        case 0x5AEuLL:
        case 0x5AFuLL:
        case 0x5B0uLL:
        case 0x5B1uLL:
        case 0x5B2uLL:
        case 0x5B3uLL:
        case 0x5B4uLL:
        case 0x5B5uLL:
        case 0x5B6uLL:
        case 0x5B7uLL:
        case 0x5B8uLL:
        case 0x5B9uLL:
        case 0x5BAuLL:
        case 0x5BBuLL:
        case 0x5BCuLL:
        case 0x5BDuLL:
        case 0x5BEuLL:
        case 0x5BFuLL:
        case 0x5C0uLL:
        case 0x5C1uLL:
        case 0x5C2uLL:
        case 0x5C3uLL:
        case 0x5C4uLL:
        case 0x5C5uLL:
        case 0x5C6uLL:
        case 0x5C7uLL:
        case 0x5C8uLL:
        case 0x5C9uLL:
        case 0x5CAuLL:
        case 0x5CBuLL:
        case 0x5CCuLL:
        case 0x5CDuLL:
        case 0x5CEuLL:
        case 0x5CFuLL:
        case 0x5D0uLL:
        case 0x5D1uLL:
        case 0x5D2uLL:
        case 0x5D3uLL:
        case 0x5D4uLL:
        case 0x5D5uLL:
        case 0x5D6uLL:
        case 0x5D7uLL:
        case 0x5D8uLL:
        case 0x5D9uLL:
        case 0x5DAuLL:
        case 0x5DBuLL:
          goto LABEL_1026;
        case 0x5DCuLL:
          a1 = @"UI.ViewService";
          return a1;
        case 0x5DDuLL:
          a1 = @"UI.ViewService.Launch";
          return a1;
        case 0x5DEuLL:
          a1 = @"UI.ViewService.Loaded";
          return a1;
        case 0x5DFuLL:
          a1 = @"UI.ViewService.Exit";
          return a1;
        case 0x5E0uLL:
          a1 = @"UI.ViewService.SpeechPartialResult.Received";
          return a1;
        case 0x5E1uLL:
          a1 = @"UI.ViewService.SpeechPartialResult.Presented";
          return a1;
        case 0x5E2uLL:
          a1 = @"UI.ViewService.SpeechRecognized.Received";
          return a1;
        case 0x5E3uLL:
          a1 = @"UI.ViewService.SpeechRecognized.Presented";
          return a1;
        case 0x5E4uLL:
          a1 = @"UI.ViewService.Failure";
          return a1;
        case 0x5E5uLL:
          a1 = @"UI.ViewService.Pin";
          return a1;
        case 0x5E6uLL:
          a1 = @"UI.ViewService.Pin.Begin";
          return a1;
        case 0x5E7uLL:
          a1 = @"UI.ViewService.Pin.End";
          return a1;
        case 0x5E8uLL:
          a1 = @"UI.ViewService.Drag";
          return a1;
        case 0x5E9uLL:
          a1 = @"UI.ViewService.DidAppear";
          return a1;
        case 0x5EAuLL:
          a1 = @"UI.ViewService.DidDisappear";
          return a1;
        default:
          if (a1 == (__CFString *)1600)
          {
            a1 = @"Coverage.AggregateDictionary";
          }
          else
          {
            if (a1 != (__CFString *)1601) {
              goto LABEL_1026;
            }
            a1 = @"Coverage.AggregateDictionary.Scalar";
          }
          break;
      }
      return a1;
    }
    if ((uint64_t)a1 <= 999)
    {
      switch((unint64_t)a1)
      {
        case 0x384uLL:
          a1 = @"Daemon.Session";
          return a1;
        case 0x385uLL:
          a1 = @"Daemon.Session.Connection.Opened";
          return a1;
        case 0x386uLL:
          a1 = @"Daemon.Session.Connection.Snapshot.Local";
          return a1;
        case 0x387uLL:
          a1 = @"Daemon.Session.Connection.Snapshot.Remote";
          return a1;
        case 0x388uLL:
          a1 = @"Daemon.Session.Connection.Timeout";
          return a1;
        case 0x389uLL:
          a1 = @"Daemon.Session.Connection.Dropped";
          return a1;
        case 0x38AuLL:
          a1 = @"Daemon.Session.Connection.Failed";
          return a1;
        case 0x38BuLL:
          a1 = @"Daemon.Session.Validation.Failed";
          return a1;
        case 0x38CuLL:
          a1 = @"Daemon.Session.Authentication.Failed";
          return a1;
        case 0x38DuLL:
          a1 = @"Daemon.Session.Assistant.Failed";
          return a1;
        case 0x38EuLL:
          a1 = @"Daemon.Session.Assistant.NotReady";
          return a1;
        case 0x38FuLL:
          a1 = @"Daemon.Session.RemappedRequestId";
          return a1;
        case 0x390uLL:
          a1 = @"Daemon.Session.Connection.Start";
          return a1;
        case 0x391uLL:
          a1 = @"Daemon.Session.Connection.Reset";
          return a1;
        case 0x392uLL:
          a1 = @"Daemon.Session.Connection.ClientConnectionId.Created";
          return a1;
        case 0x393uLL:
          a1 = @"Daemon.Session.Connection.FirstByteReceived";
          return a1;
        case 0x394uLL:
          a1 = @"Daemon.Session.Local.Assistant.NotReady";
          return a1;
        case 0x395uLL:
          a1 = @"Daemon.Session.Local.Connection.Reset";
          return a1;
        case 0x396uLL:
          a1 = @"Daemon.Session.ProxiedRequestId";
          return a1;
        case 0x397uLL:
          a1 = @"Daemon.Session.Won";
          return a1;
        case 0x398uLL:
          a1 = @"Daemon.Session.LoadAssistant";
          return a1;
        case 0x399uLL:
          a1 = @"Daemon.Session.Failed";
          return a1;
        case 0x39AuLL:
          goto LABEL_1026;
        case 0x39BuLL:
          a1 = @"Daemon.Session.Results.Queued";
          return a1;
        default:
          if (a1 == (__CFString *)800)
          {
            a1 = @"Daemon.Signal";
          }
          else
          {
            if (a1 != (__CFString *)801) {
              goto LABEL_1026;
            }
            a1 = @"Daemon.DomainSignal.LaunchApp";
          }
          break;
      }
      return a1;
    }
    if ((uint64_t)a1 <= 1099)
    {
      switch((unint64_t)a1)
      {
        case 0x3E8uLL:
          a1 = @"Daemon.Network";
          break;
        case 0x3E9uLL:
          a1 = @"Daemon.Network.Available";
          break;
        case 0x3EAuLL:
          a1 = @"Daemon.Network.ServerAddress.Resolved";
          break;
        case 0x3EBuLL:
          a1 = @"Daemon.Network.Failure";
          break;
        case 0x3ECuLL:
          a1 = @"Daemon.Network.Peer.Error";
          break;
        case 0x3EDuLL:
          a1 = @"Daemon.Network.AcePing.Sent";
          break;
        case 0x3EEuLL:
          a1 = @"Daemon.Network.AcePong.Received";
          break;
        case 0x3EFuLL:
          a1 = @"Daemon.Network.Provider.Open.Begin";
          break;
        case 0x3F0uLL:
          a1 = @"Daemon.Network.Provider.Open.End";
          break;
        case 0x3F1uLL:
          a1 = @"Daemon.Network.Provider.Secondary.Open.Begin";
          break;
        case 0x3F2uLL:
          a1 = @"Daemon.Network.Provider.Secondary.Open.End";
          break;
        case 0x3F3uLL:
          a1 = @"Daemon.Network.Link.Recommendation.Begin";
          break;
        case 0x3F4uLL:
          a1 = @"Daemon.Network.Link.Recommendation.End";
          break;
        case 0x3F5uLL:
          a1 = @"Daemon.Network.Link.Recommendation.Timedout";
          break;
        default:
          goto LABEL_1026;
      }
      return a1;
    }
    if ((uint64_t)a1 > 1199)
    {
      if (a1 == (__CFString *)1200)
      {
        a1 = @"Daemon.OutgoingCommand";
      }
      else if (a1 == (__CFString *)1201)
      {
        a1 = @"Daemon.OutgoingCommand.Failure";
      }
      else
      {
        if (a1 != (__CFString *)1202) {
          goto LABEL_1026;
        }
        a1 = @"Daemon.Local.OutgoingCommand.Failure";
      }
    }
    else if (a1 == (__CFString *)1100)
    {
      a1 = @"Daemon.IncomingCommand";
    }
    else
    {
      if (a1 != (__CFString *)1101)
      {
        if (a1 == (__CFString *)1102)
        {
          a1 = @"Daemon.IncomingCommand.SpeechRecognized";
          return a1;
        }
LABEL_1026:
        AFAnalyticsEventTypeGetName((uint64_t)a1);
        a1 = (__CFString *)objc_claimAutoreleasedReturnValue();
LABEL_1027:
        return a1;
      }
      a1 = @"Daemon.IncomingCommand.SpeechPartialResult";
    }
  }
  return a1;
}

void sub_19D0755EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11)
{
  objc_destroyWeak(v11);
  objc_destroyWeak((id *)(v12 - 112));
  _Unwind_Resume(a1);
}

void sub_19D07596C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

AFKeyValueObserver *AFKeyValueObservingCreate(void *a1, void *a2, void *a3, void *a4)
{
  id v7 = a1;
  id v8 = a2;
  id v9 = a3;
  id v10 = a4;
  if (!v7)
  {
    char v13 = [MEMORY[0x1E4F28B00] currentHandler];
    long long v14 = objc_msgSend(NSString, "stringWithUTF8String:", "id<AFKeyValueObserving> AFKeyValueObservingCreate(__strong id, NSString *__strong, __strong AFKeyValueObservingHandler, AFKeyValueObservingDeliveryOptions *__strong)");
    [v13 handleFailureInFunction:v14, @"AFKeyValueObserving.m", 138, @"Invalid parameter not satisfying: %@", @"object != nil" file lineNumber description];
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    if (v9) {
      goto LABEL_5;
    }
  }
  else
  {
    int v15 = [MEMORY[0x1E4F28B00] currentHandler];
    long long v16 = objc_msgSend(NSString, "stringWithUTF8String:", "id<AFKeyValueObserving> AFKeyValueObservingCreate(__strong id, NSString *__strong, __strong AFKeyValueObservingHandler, AFKeyValueObservingDeliveryOptions *__strong)");
    [v15 handleFailureInFunction:v16, @"AFKeyValueObserving.m", 139, @"Invalid parameter not satisfying: %@", @"[keyPath isKindOfClass:[NSString class]]" file lineNumber description];

    if (v9) {
      goto LABEL_5;
    }
  }
  uint64_t v17 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v18 = objc_msgSend(NSString, "stringWithUTF8String:", "id<AFKeyValueObserving> AFKeyValueObservingCreate(__strong id, NSString *__strong, __strong AFKeyValueObservingHandler, AFKeyValueObservingDeliveryOptions *__strong)");
  [v17 handleFailureInFunction:v18, @"AFKeyValueObserving.m", 140, @"Invalid parameter not satisfying: %@", @"handler != nil" file lineNumber description];

LABEL_5:
  uint64_t v11 = [[AFKeyValueObserver alloc] initWithObject:v7 keyPath:v8 handler:v9 deliveryOptions:v10];

  return v11;
}

BOOL AFSiriAnnouncementSummaryDecisionGetIsValid(unint64_t a1)
{
  return a1 < 3;
}

BOOL AFSiriAnnouncementSummaryDecisionGetIsValidAndSpecified(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 2;
}

__CFString *AFSiriAnnouncementSummaryDecisionGetName(unint64_t a1)
{
  if (a1 > 2) {
    return @"(unknown)";
  }
  else {
    return off_1E592A400[a1];
  }
}

uint64_t AFSiriAnnouncementSummaryDecisionGetFromName(void *a1)
{
  id v1 = a1;
  if ([v1 length])
  {
    if (AFSiriAnnouncementSummaryDecisionGetFromName_onceToken != -1) {
      dispatch_once(&AFSiriAnnouncementSummaryDecisionGetFromName_onceToken, &__block_literal_global_36750);
    }
    id v2 = [(id)AFSiriAnnouncementSummaryDecisionGetFromName_map objectForKey:v1];
    uint64_t v3 = [v2 integerValue];
  }
  else
  {
    uint64_t v3 = 0;
  }

  return v3;
}

void __AFSiriAnnouncementSummaryDecisionGetFromName_block_invoke()
{
  id v0 = (void *)AFSiriAnnouncementSummaryDecisionGetFromName_map;
  AFSiriAnnouncementSummaryDecisionGetFromName_map = (uint64_t)&unk_1EEE98F18;
}

void sub_19D0787D0(_Unwind_Exception *a1)
{
}

void sub_19D0787E8(uint64_t a1, int a2)
{
  if (a2) {
    objc_terminate();
  }
  JUMPOUT(0x19D0787F4);
}

id AFAnalyticsContextCreateWithCommand(void *a1)
{
  id v1 = a1;
  char v2 = objc_opt_respondsToSelector();
  id v3 = (id)MEMORY[0x1E4F1CC08];
  if (v2)
  {
    uint64_t v4 = objc_msgSend(v1, "af_analyticsContext");
    uint64_t v5 = (void *)v4;
    if (v4) {
      uint64_t v6 = (void *)v4;
    }
    else {
      uint64_t v6 = v3;
    }
    id v3 = v6;
  }
  return v3;
}

id AFAnalyticsContextCreateWithError(void *a1)
{
  v5[1] = *MEMORY[0x1E4F143B8];
  id v1 = _AFAnalyticsContextCreateWithErrorRecursively(a1);
  if ([v1 count])
  {
    uint64_t v4 = @"error";
    v5[0] = v1;
    char v2 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v5 forKeys:&v4 count:1];
  }
  else
  {
    char v2 = (void *)MEMORY[0x1E4F1CC08];
  }

  return v2;
}

id _AFAnalyticsContextCreateWithErrorRecursively(void *a1)
{
  id v1 = a1;
  if (v1)
  {
    char v2 = [MEMORY[0x1E4F1CA60] dictionary];
    id v3 = [v1 domain];
    if (v3) {
      [v2 setObject:v3 forKey:@"domain"];
    }
    uint64_t v4 = objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithInteger:", objc_msgSend(v1, "code"));
    [v2 setObject:v4 forKey:@"code"];

    uint64_t v5 = [v1 userInfo];
    uint64_t v6 = [v5 objectForKey:*MEMORY[0x1E4F28A50]];

    if (v6)
    {
      id v7 = _AFAnalyticsContextCreateWithErrorRecursively(v6);
      if (v7) {
        [v2 setObject:v7 forKey:@"underlyingError"];
      }
    }
    id v8 = [v1 userInfo];
    v11[0] = MEMORY[0x1E4F143A8];
    v11[1] = 3221225472;
    v11[2] = ___AFAnalyticsContextCreateWithErrorRecursively_block_invoke;
    void v11[3] = &unk_1E592ACD0;
    id v9 = v2;
    id v12 = v9;
    [v8 enumerateKeysAndObjectsUsingBlock:v11];
  }
  else
  {
    id v9 = (id)MEMORY[0x1E4F1CC08];
  }

  return v9;
}

id AFAnalyticsContextCreateWithSpeechRequestOptions(void *a1)
{
  id v1 = a1;
  char v2 = [MEMORY[0x1E4F1CA60] dictionary];
  if ([v1 activationEvent])
  {
    unint64_t v3 = [v1 activationEvent];
    if (v3 > 0x24) {
      uint64_t v4 = @"Unknown";
    }
    else {
      uint64_t v4 = off_1E5925980[v3];
    }
    uint64_t v5 = v4;
    [v2 setObject:v5 forKey:@"speechEvent"];
  }
  uint64_t v6 = [v1 serverCommandId];

  if (v6)
  {
    id v7 = [v1 serverCommandId];
    [v2 setObject:v7 forKey:@"serverCommandId"];
  }
  if ([v1 isEyesFree]) {
    [v2 setObject:MEMORY[0x1E4F1CC38] forKey:@"isEyesFree"];
  }
  if ([v1 useAutomaticEndpointing]) {
    [v2 setObject:MEMORY[0x1E4F1CC38] forKey:@"useAutomaticEndpointing"];
  }
  if ([v1 useStreamingDictation]) {
    [v2 setObject:MEMORY[0x1E4F1CC38] forKey:@"useStreamingDictation"];
  }
  if ([v1 isInitialBringUp]) {
    [v2 setObject:MEMORY[0x1E4F1CC38] forKey:@"isInitialBringUp"];
  }
  if ([v1 acousticIdEnabled]) {
    [v2 setObject:MEMORY[0x1E4F1CC38] forKey:@"acousticIdEnabled"];
  }
  if ([v1 usePrelisteningMode]) {
    [v2 setObject:MEMORY[0x1E4F1CC38] forKey:@"usePrelisteningMode"];
  }
  if ([v1 useBorealisBuffer]) {
    [v2 setObject:MEMORY[0x1E4F1CC38] forKey:@"useBorealisBuffer"];
  }
  if ([v1 reloadSmartSiriVolume]) {
    [v2 setObject:MEMORY[0x1E4F1CC38] forKey:@"reloadSmartSiriVolume"];
  }
  id v8 = [v1 notifyState];

  if (v8) {
    [v2 setObject:MEMORY[0x1E4F1CC38] forKey:@"hasNotifyState"];
  }
  id v9 = [v1 audioFileURL];

  if (v9) {
    [v2 setObject:MEMORY[0x1E4F1CC38] forKey:@"hasAudioFileURL"];
  }
  if ([v1 bargeInOptions])
  {
    if (([v1 bargeInOptions] & 0x20) != 0) {
      [v2 setObject:MEMORY[0x1E4F1CC38] forKey:@"bargeInOverHomeAnnouncementPlayback"];
    }
    if (([v1 bargeInOptions] & 2) != 0) {
      [v2 setObject:MEMORY[0x1E4F1CC38] forKey:@"bargeInOverSiriRequest"];
    }
    if (([v1 bargeInOptions] & 4) != 0) {
      [v2 setObject:MEMORY[0x1E4F1CC38] forKey:@"bargeInOverSiriVoiceOutput"];
    }
    if (([v1 bargeInOptions] & 8) != 0) {
      [v2 setObject:MEMORY[0x1E4F1CC38] forKey:@"bargeInOverFiringAlarm"];
    }
    if (([v1 bargeInOptions] & 0x10) != 0) {
      [v2 setObject:MEMORY[0x1E4F1CC38] forKey:@"bargeInOverFiringTimer"];
    }
    if ([v1 bargeInOptions]) {
      [v2 setObject:MEMORY[0x1E4F1CC38] forKey:@"bargeInOverMediaPlayback"];
    }
  }
  if ([v1 isMediaPlaying])
  {
    [v2 setObject:MEMORY[0x1E4F1CC38] forKey:@"isMediaPlaying"];
    id v10 = (void *)MEMORY[0x1E4F28ED0];
    [v1 mediaPlaybackVolume];
    uint64_t v11 = objc_msgSend(v10, "numberWithFloat:");
    [v2 setObject:v11 forKey:@"mediaPlaybackVolume"];
  }
  id v12 = [v1 clientAnalyticsContext];
  uint64_t v13 = [v12 count];

  if (v13)
  {
    long long v14 = [v1 clientAnalyticsContext];
    [v2 addEntriesFromDictionary:v14];
  }
  if ([v1 activationEvent] == 12) {
    [v2 setObject:MEMORY[0x1E4F1CC38] forKey:@"isRecordedAudio"];
  }
  if ([v2 count]) {
    int v15 = v2;
  }
  else {
    int v15 = (void *)MEMORY[0x1E4F1CC08];
  }
  id v16 = v15;

  return v16;
}

id AFAnalyticsContextCreateWithRequestInfo(void *a1)
{
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  char v2 = [MEMORY[0x1E4F1CA60] dictionary];
  unint64_t v3 = [v1 notifyState];

  if (v3) {
    [v2 setObject:MEMORY[0x1E4F1CC38] forKey:@"hasNotifyState"];
  }
  uint64_t v4 = [v1 text];

  if (v4)
  {
    uint64_t v5 = [v1 text];
    [v2 setObject:v5 forKey:@"text"];
  }
  uint64_t v6 = [v1 legacyDirectActionIdentifier];

  if ([v1 activationEvent] == 2)
  {
    id v7 = [v1 startLocalRequest];
    BOOL v8 = v7 != 0;

    if (v6) {
      goto LABEL_10;
    }
LABEL_9:
    if (!v8) {
      goto LABEL_55;
    }
    goto LABEL_10;
  }
  BOOL v8 = 0;
  if (!v6) {
    goto LABEL_9;
  }
LABEL_10:
  [v2 setObject:MEMORY[0x1E4F1CC38] forKey:@"hasDirectAction"];
  id v9 = [v1 legacyDirectActionIdentifier];
  unint64_t v10 = [v1 directActionEvent];
  id v11 = v9;
  id v12 = v11;
  if (v11)
  {
    if ([v11 isEqualToString:*MEMORY[0x1E4F97730]])
    {
      uint64_t v13 = @"smsInitiate";
    }
    else if ([v12 isEqualToString:*MEMORY[0x1E4F97738]])
    {
      uint64_t v13 = @"smsRead";
    }
    else if ([v12 isEqualToString:*MEMORY[0x1E4F97728]])
    {
      uint64_t v13 = @"smsCompose";
    }
    else if ([v12 isEqualToString:*MEMORY[0x1E4F97740]])
    {
      uint64_t v13 = @"smsReply";
    }
    else if ([v12 isEqualToString:*MEMORY[0x1E4F97718]])
    {
      uint64_t v13 = @"phoneInitiate";
    }
    else if ([v12 isEqualToString:*MEMORY[0x1E4F97710]])
    {
      uint64_t v13 = @"phoneCall";
    }
    else if ([v12 isEqualToString:*MEMORY[0x1E4F97720]])
    {
      uint64_t v13 = @"phoneVoicemail";
    }
    else if ([v12 isEqualToString:*MEMORY[0x1E4F976C0]])
    {
      uint64_t v13 = @"acousticId";
    }
    else if ([v12 isEqualToString:*MEMORY[0x1E4F976F8]])
    {
      uint64_t v13 = @"musicSmartPlayInitiate";
    }
    else if ([v12 isEqualToString:*MEMORY[0x1E4F976F0]])
    {
      uint64_t v13 = @"musicSearch";
    }
    else if ([v12 isEqualToString:*MEMORY[0x1E4F976E0]])
    {
      uint64_t v13 = @"mapsSearch";
    }
    else if ([v12 isEqualToString:*MEMORY[0x1E4F976E8]])
    {
      uint64_t v13 = @"mapsSearchInNav";
    }
    else if ([v12 isEqualToString:*MEMORY[0x1E4F976D8]])
    {
      uint64_t v13 = @"guideUpdateAndShow";
    }
    else if ([v12 isEqualToString:*MEMORY[0x1E4F976C8]])
    {
      uint64_t v13 = @"appLaunch";
    }
    else if ([v12 isEqualToString:*MEMORY[0x1E4F97748]])
    {
      uint64_t v13 = @"weatherInitiate";
    }
    else if ([v12 isEqualToString:*MEMORY[0x1E4F976D0]])
    {
      uint64_t v13 = @"calendarInitiate";
    }
    else if ([v12 isEqualToString:*MEMORY[0x1E4F97700]])
    {
      uint64_t v13 = @"newsInitiate";
    }
    else if ([v12 isEqualToString:*MEMORY[0x1E4F97708]])
    {
      uint64_t v13 = @"spokenNotificationInitiate";
    }
    else
    {
      uint64_t v13 = 0;
    }
  }
  else if (v10 > 0x12)
  {
    uint64_t v13 = 0;
  }
  else
  {
    uint64_t v13 = (__CFString *)*((void *)&off_1E592A4F8 + v10);
  }

  if (v13) {
    [v2 setObject:v13 forKey:@"directActionEvent"];
  }
  long long v14 = [v1 directActionAppId];

  if (v14)
  {
    int v15 = [v1 directActionAppId];
    [v2 setObject:v15 forKey:@"directActionAppId"];
  }
LABEL_55:
  if (![v1 activationEvent])
  {
    id v16 = [v1 startLocalRequest];

    if (v16)
    {
      id v45 = v1;
      uint64_t v17 = [v1 startLocalRequest];
      uint64_t v18 = [v17 clientBoundCommands];

      long long v49 = 0u;
      long long v50 = 0u;
      long long v47 = 0u;
      long long v48 = 0u;
      id v19 = v18;
      uint64_t v20 = [v19 countByEnumeratingWithState:&v47 objects:v55 count:16];
      if (v20)
      {
        uint64_t v21 = v20;
        uint64_t v22 = *(void *)v48;
        while (2)
        {
          for (uint64_t i = 0; i != v21; ++i)
          {
            if (*(void *)v48 != v22) {
              objc_enumerationMutation(v19);
            }
            uint64_t v24 = *(void **)(*((void *)&v47 + 1) + 8 * i);
            objc_opt_class();
            if (objc_opt_isKindOfClass())
            {
              uint64_t v25 = [v24 parse];
              if (v25)
              {
                __int16 v26 = v25;
                unsigned __int16 v27 = [v25 directInvocation];
                uint64_t v28 = v27;
                if (v27)
                {
                  id v29 = [v27 invocationIdentifier];
                  uint64_t v30 = [v29 length];

                  if (v30)
                  {
                    __int16 v31 = [v28 invocationIdentifier];
                    [v2 setObject:v31 forKey:@"invocationIdentifier"];

                    [v2 setObject:MEMORY[0x1E4F1CC38] forKey:@"hasDirectInvocation"];
                    uint64_t v32 = [v28 data];
                    if (v32)
                    {
                      id v33 = (void *)v32;
                      id v46 = 0;
                      uint64_t v34 = [MEMORY[0x1E4F28F98] propertyListWithData:v32 options:0 format:0 error:&v46];
                      id v35 = v46;
                      if (v35)
                      {
                        id v36 = AFSiriLogContextService;
                        if (os_log_type_enabled((os_log_t)AFSiriLogContextService, OS_LOG_TYPE_ERROR))
                        {
                          *(_DWORD *)buf = 136315394;
                          id v52 = "AFAnalyticsContextCreateWithRequestInfo";
                          __int16 v53 = 2112;
                          id v54 = v35;
                          _os_log_error_impl(&dword_19CF1D000, v36, OS_LOG_TYPE_ERROR, "%s Unexpected error converting invocation context from plist to dictionary: %@", buf, 0x16u);
                        }
                      }
                      else
                      {
                        __int16 v37 = [v34 objectForKey:@"directActionEvent"];
                        objc_opt_class();
                        if ((objc_opt_isKindOfClass() & 1) != 0 && [v37 length]) {
                          [v2 setObject:v37 forKey:@"directActionEvent"];
                        }
                        unint64_t v38 = [v34 objectForKey:@"directActionAppId"];
                        objc_opt_class();
                        if ((objc_opt_isKindOfClass() & 1) != 0 && [v38 length]) {
                          [v2 setObject:v38 forKey:@"directActionAppId"];
                        }
                      }
                      goto LABEL_82;
                    }
                  }
                }
              }
            }
          }
          uint64_t v21 = [v19 countByEnumeratingWithState:&v47 objects:v55 count:16];
          if (v21) {
            continue;
          }
          break;
        }
      }
LABEL_82:

      id v1 = v45;
    }
  }
  uint64_t v39 = [v1 handoffRequestData];

  if (v39) {
    [v2 setObject:MEMORY[0x1E4F1CC38] forKey:@"hasHandoffRequestData"];
  }
  int v40 = [v1 handoffURLString];

  if (v40) {
    [v2 setObject:MEMORY[0x1E4F1CC38] forKey:@"hasHandoffURLString"];
  }
  long long v41 = [v1 correctedSpeech];

  if (v41) {
    [v2 setObject:MEMORY[0x1E4F1CC38] forKey:@"hasCorrectedSpeech"];
  }
  if ([v2 count]) {
    uint64_t v42 = v2;
  }
  else {
    uint64_t v42 = (void *)MEMORY[0x1E4F1CC08];
  }
  id v43 = v42;

  return v43;
}

id AFAnalyticsContextCreateWithDictationOptions(void *a1)
{
  id v1 = a1;
  char v2 = [MEMORY[0x1E4F1CA60] dictionary];
  unint64_t v3 = [v1 applicationName];
  if (v3) {
    [v2 setObject:v3 forKey:@"applicationName"];
  }
  uint64_t v4 = [v1 applicationVersion];
  if (v4) {
    [v2 setObject:v4 forKey:@"applicationVersion"];
  }
  uint64_t v5 = [v1 languageCodeOverride];
  if (v5) {
    [v2 setObject:v5 forKey:@"languageCodeOverride"];
  }
  uint64_t v6 = [v1 offlineLanguage];
  if (v6) {
    [v2 setObject:v6 forKey:@"offlineLanguageCode"];
  }
  unint64_t v7 = [v1 taskHint] - 1;
  if (v7 <= 4) {
    [v2 setObject:*((void *)&off_1E592A590 + v7) forKey:@"taskHint"];
  }
  BOOL v8 = [v1 languageDetectionUserContext];
  id v9 = [v8 getContextForAnalytics];

  if (v9) {
    [v2 setObject:v9 forKey:@"languageDetectionContext"];
  }
  if ([v2 count]) {
    unint64_t v10 = v2;
  }
  else {
    unint64_t v10 = (void *)MEMORY[0x1E4F1CC08];
  }
  id v11 = v10;

  return v11;
}

id AFAnalyticsContextCreateWithExperiment(void *a1)
{
  id v1 = a1;
  char v2 = [MEMORY[0x1E4F1CA60] dictionary];
  unint64_t v3 = [v1 configurationIdentifier];
  if (v3) {
    [v2 setObject:v3 forKey:@"configurationIdentifier"];
  }
  uint64_t v4 = [v1 configurationVersion];
  if (v4) {
    [v2 setObject:v4 forKey:@"configurationVersion"];
  }
  uint64_t v5 = [v1 deploymentGroupIdentifier];
  if (v5) {
    [v2 setObject:v5 forKey:@"deploymentGroupIdentifier"];
  }
  unint64_t v6 = [v1 deploymentReason];
  if (v6 > 2) {
    unint64_t v7 = @"(unknown)";
  }
  else {
    unint64_t v7 = off_1E5929348[v6];
  }
  BOOL v8 = v7;
  [v2 setObject:v8 forKey:@"deploymentReason"];
  if ([v2 count]) {
    id v9 = v2;
  }
  else {
    id v9 = (void *)MEMORY[0x1E4F1CC08];
  }
  id v10 = v9;

  return v10;
}

id AFAnalyticsContextCreateWithLanguageDetectorMetrics(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  uint64_t v5 = [MEMORY[0x1E4F1CA60] dictionary];
  unint64_t v6 = v5;
  if (v3) {
    [v5 addEntriesFromDictionary:v3];
  }
  if (v4) {
    [v6 setObject:v4 forKey:@"interactionId"];
  }

  return v6;
}

id AFAnalyticsTurnContextCreateWithRequestInfo(void *a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  char v2 = [MEMORY[0x1E4F1CA60] dictionary];
  id v3 = [v1 turnIdentifier];

  if (v3)
  {
    id v4 = [v1 turnIdentifier];
    uint64_t v5 = [v4 UUIDString];
    [v2 setObject:v5 forKeyedSubscript:@"turnId"];
  }
  else
  {
    unint64_t v6 = AFSiriLogContextAnalytics;
    if (os_log_type_enabled((os_log_t)AFSiriLogContextAnalytics, OS_LOG_TYPE_INFO))
    {
      int v8 = 136315138;
      id v9 = "AFAnalyticsTurnContextCreateWithRequestInfo";
      _os_log_impl(&dword_19CF1D000, v6, OS_LOG_TYPE_INFO, "%s turnId not provided in request info.", (uint8_t *)&v8, 0xCu);
    }
  }

  return v2;
}

id AFAnalyticsTurnContextCreateWithSpeechRequestOptions(void *a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  char v2 = [MEMORY[0x1E4F1CA60] dictionary];
  id v3 = [v1 turnIdentifier];

  if (v3)
  {
    id v4 = [v1 turnIdentifier];
    uint64_t v5 = [v4 UUIDString];
    [v2 setObject:v5 forKeyedSubscript:@"turnId"];
  }
  else
  {
    unint64_t v6 = AFSiriLogContextAnalytics;
    if (os_log_type_enabled((os_log_t)AFSiriLogContextAnalytics, OS_LOG_TYPE_INFO))
    {
      int v8 = 136315138;
      id v9 = "AFAnalyticsTurnContextCreateWithSpeechRequestOptions";
      _os_log_impl(&dword_19CF1D000, v6, OS_LOG_TYPE_INFO, "%s turnId not provided in speech options.", (uint8_t *)&v8, 0xCu);
    }
  }

  return v2;
}

id AFAnalyticsContextCreateForCrossDeviceCommandHandled(void *a1, uint64_t a2, void *a3)
{
  id v5 = a1;
  id v6 = a3;
  uint64_t v7 = [v5 count];
  if (a2 != 4000 && !v7)
  {
    uint64_t v8 = [MEMORY[0x1E4F1CAD0] setWithObject:@"Unknown"];

    id v5 = (id)v8;
  }
  id v9 = objc_msgSend(v5, "af_mappedSet:", &__block_literal_global_37215);
  if ([v9 count])
  {
    uint64_t v10 = [v9 allObjects];
    id v11 = [v10 sortedArrayUsingSelector:sel_localizedCaseInsensitiveCompare_];

    if (a2) {
      goto LABEL_10;
    }
  }
  else
  {
    id v11 = 0;
    if (a2) {
      goto LABEL_10;
    }
  }
  if (!v11)
  {
    id v12 = 0;
    goto LABEL_23;
  }
LABEL_10:
  uint64_t v13 = @"near";
  long long v14 = @"immediate";
  int v15 = @"primary";
  if (a2 != 4000) {
    int v15 = 0;
  }
  if (a2 != 3000) {
    long long v14 = v15;
  }
  if (a2 != 2000) {
    uint64_t v13 = v14;
  }
  id v16 = @"unknown";
  uint64_t v17 = @"far";
  if (a2 != 1000) {
    uint64_t v17 = 0;
  }
  if (a2) {
    id v16 = v17;
  }
  if (a2 <= 1999) {
    uint64_t v13 = v16;
  }
  id v12 = v13;
LABEL_23:
  uint64_t v18 = [MEMORY[0x1E4F1CA60] dictionary];
  id v19 = v18;
  if (v11) {
    [v18 setObject:v11 forKeyedSubscript:@"targetDevices"];
  }
  if (v12) {
    [v19 setObject:v12 forKeyedSubscript:@"proximity"];
  }
  if (v6) {
    [v19 setObject:v6 forKeyedSubscript:@"result"];
  }

  return v19;
}

id AFAnalyticsContextCreateForCrossDeviceCommandHandledWithServiceDeviceContexts(void *a1, void *a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  id v5 = [MEMORY[0x1E4F1CA80] set];
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  id v6 = v3;
  uint64_t v7 = [v6 countByEnumeratingWithState:&v18 objects:v22 count:16];
  if (v7)
  {
    uint64_t v8 = v7;
    uint64_t v9 = 0;
    uint64_t v10 = *(void *)v19;
    do
    {
      for (uint64_t i = 0; i != v8; ++i)
      {
        if (*(void *)v19 != v10) {
          objc_enumerationMutation(v6);
        }
        id v12 = *(void **)(*((void *)&v18 + 1) + 8 * i);
        uint64_t v13 = objc_msgSend(v12, "proximity", (void)v18);
        if (v9 <= v13) {
          uint64_t v9 = v13;
        }
        long long v14 = [v12 metricsContext];
        int v15 = [v14 objectForKey:@"productType"];

        if (v15) {
          [v5 addObject:v15];
        }
      }
      uint64_t v8 = [v6 countByEnumeratingWithState:&v18 objects:v22 count:16];
    }
    while (v8);
  }
  else
  {
    uint64_t v9 = 0;
  }

  id v16 = AFAnalyticsContextCreateForCrossDeviceCommandHandled(v5, v9, v4);

  return v16;
}

id AFAnalyticsContextCreateForCrossDeviceCommandNearbyDevices(void *a1, void *a2, void *a3)
{
  v23[1] = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = (void *)MEMORY[0x1E4F1C9C8];
  id v8 = a1;
  uint64_t v9 = [v7 date];
  uint64_t v10 = [MEMORY[0x1E4F1CA48] array];
  v17[0] = MEMORY[0x1E4F143A8];
  v17[1] = 3221225472;
  v17[2] = __AFAnalyticsContextCreateForCrossDeviceCommandNearbyDevices_block_invoke;
  v17[3] = &unk_1E592A460;
  id v11 = v5;
  id v18 = v11;
  id v12 = v9;
  id v19 = v12;
  id v13 = v6;
  id v20 = v13;
  id v14 = v10;
  id v21 = v14;
  [v8 enumerateKeysAndObjectsUsingBlock:v17];

  if ([v14 count])
  {
    uint64_t v22 = @"devices";
    v23[0] = v14;
    int v15 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v23 forKeys:&v22 count:1];
  }
  else
  {
    int v15 = 0;
  }

  return v15;
}

void __AFAnalyticsContextCreateForCrossDeviceCommandNearbyDevices_block_invoke(void **a1, void *a2, void *a3)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = [MEMORY[0x1E4F1CA48] array];
  int v40 = a1;
  __int16 v37 = v5;
  [a1[4] objectForKeyedSubscript:v5];
  long long v42 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  id obj = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v8 = [obj countByEnumeratingWithState:&v42 objects:v46 count:16];
  unint64_t v38 = v7;
  if (v8)
  {
    uint64_t v9 = v8;
    uint64_t v41 = *(void *)v43;
    do
    {
      uint64_t v10 = 0;
      do
      {
        if (*(void *)v43 != v41) {
          objc_enumerationMutation(obj);
        }
        id v11 = *(void **)(*((void *)&v42 + 1) + 8 * v10);
        id v12 = [MEMORY[0x1E4F1CA60] dictionary];
        id v13 = [v6 contextMetadataForKey:v11];
        if ([v11 isEqualToString:@"playbackState"])
        {
          id v14 = [v6 playbackStateSnapshot];
          unint64_t v15 = [v14 playbackState];
          id v16 = [v14 nowPlayingTimestamp];
          uint64_t v17 = AFAnalyticsBucketizedDurationForStartDateAndEndDate((uint64_t)v16, v40[5], 1, 1800.0);
          [v12 setObject:v17 forKeyedSubscript:@"recency"];

          id v18 = @"(unknown)";
          if (v15 <= 5) {
            id v18 = *(&off_1E5928EB8 + v15);
          }
          id v19 = v18;
          [v12 setObject:v19 forKeyedSubscript:@"playstate"];

          id v20 = [v14 mediaType];
          [v12 setObject:v20 forKeyedSubscript:@"media_type"];
          uint64_t v7 = v38;
LABEL_10:

          goto LABEL_12;
        }
        if (([v11 isEqualToString:@"heardVoiceTrigger"] & 1) == 0)
        {
          if ([v11 isEqualToString:@"homeAnnouncement"])
          {
            id v14 = [v6 homeAnnouncementSnapshot];
            id v21 = AFHomeAnnouncementStateGetNames([v14 state]);
            [v12 setObject:v21 forKeyedSubscript:@"announce_state"];

            uint64_t v22 = [v14 lastPlayedAnnouncement];
            id v20 = [v22 startedDate];

            if (v20)
            {
              uint64_t v23 = AFAnalyticsBucketizedDurationForStartDateAndEndDate((uint64_t)v20, v40[5], 1, 1800.0);
              [v12 setObject:v23 forKeyedSubscript:@"recency"];
            }
          }
          else
          {
            id v14 = [v13 deliveryDate];
            id v20 = AFAnalyticsBucketizedDurationForStartDateAndEndDate((uint64_t)v14, v40[5], 1, 1800.0);
            [v12 setObject:v20 forKeyedSubscript:@"recency"];
          }
          goto LABEL_10;
        }
LABEL_12:
        [v12 setObject:v11 forKeyedSubscript:@"context_type"];
        [v7 addObject:v12];

        ++v10;
      }
      while (v9 != v10);
      uint64_t v24 = [obj countByEnumeratingWithState:&v42 objects:v46 count:16];
      uint64_t v9 = v24;
    }
    while (v24);
  }
  if ([v7 count])
  {
    uint64_t v25 = [v40[6] objectForKeyedSubscript:v37];
    uint64_t v26 = [v25 integerValue];

    unsigned __int16 v27 = [v6 deviceInfo];
    uint64_t v28 = [v27 productType];

    if (!v28)
    {
      if (v26 == 4000) {
        uint64_t v28 = (__CFString *)MGCopyAnswer();
      }
      else {
        uint64_t v28 = @"Unknown";
      }
    }
    id v29 = [MEMORY[0x1E4F1CA60] dictionary];
    uint64_t v30 = v29;
    if (v28) {
      [v29 setObject:v28 forKeyedSubscript:@"product_type"];
    }
    __int16 v31 = @"near";
    uint64_t v32 = @"immediate";
    id v33 = @"primary";
    if (v26 != 4000) {
      id v33 = 0;
    }
    if (v26 != 3000) {
      uint64_t v32 = v33;
    }
    if (v26 != 2000) {
      __int16 v31 = v32;
    }
    uint64_t v34 = @"unknown";
    id v35 = @"far";
    if (v26 != 1000) {
      id v35 = 0;
    }
    if (v26) {
      uint64_t v34 = v35;
    }
    if (v26 <= 1999) {
      __int16 v31 = v34;
    }
    id v36 = v31;
    [v30 setObject:v36 forKeyedSubscript:@"proximity"];

    if ([v38 count]) {
      [v30 setObject:v38 forKeyedSubscript:@"contexts"];
    }
    [v40[7] addObject:v30];

    uint64_t v7 = v38;
  }
}

id AFAnalyticsBucketizedDurationForStartDateAndEndDate(uint64_t a1, void *a2, uint64_t a3, double a4)
{
  id v6 = 0;
  if (a1 && a2 && a3 >= 1)
  {
    objc_msgSend(a2, "timeIntervalSinceDate:");
    if (v8 <= 0.0)
    {
      if (v8 >= 0.0)
      {
        id v6 = &unk_1EEE997E0;
        goto LABEL_10;
      }
      uint64_t v9 = (void *)MEMORY[0x1E4F28ED0];
      double v10 = fmax(-a4, floor(v8 / (double)a3) * (double)a3);
    }
    else
    {
      uint64_t v9 = (void *)MEMORY[0x1E4F28ED0];
      double v10 = fmin(a4, ceil(v8 / (double)a3) * (double)a3);
    }
    id v6 = [v9 numberWithDouble:v10];
  }
LABEL_10:
  return v6;
}

id AFAnalyticsContextCreateForCurrentProcess()
{
  v5[1] = *MEMORY[0x1E4F143B8];
  id v4 = @"processName";
  id v0 = [MEMORY[0x1E4F28F80] processInfo];
  id v1 = [v0 processName];
  v5[0] = v1;
  char v2 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v5 forKeys:&v4 count:1];

  return v2;
}

id AFAnalyticsContextsMerge(void *a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  char v2 = [MEMORY[0x1E4F1CA60] dictionary];
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  id v3 = v1;
  uint64_t v4 = [v3 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = *(void *)v10;
    do
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v10 != v6) {
          objc_enumerationMutation(v3);
        }
        objc_msgSend(v2, "addEntriesFromDictionary:", *(void *)(*((void *)&v9 + 1) + 8 * i), (void)v9);
      }
      uint64_t v5 = [v3 countByEnumeratingWithState:&v9 objects:v13 count:16];
    }
    while (v5);
  }

  return v2;
}

id AFAnalyticsSafeContextForJson(void *a1)
{
  id v1 = a1;
  if ([v1 count])
  {
    char v5 = 0;
    _AFAnalyticsMapToSafeValueForJson(v1, &v5);
    id v2 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    id v2 = v1;
  }
  id v3 = v2;

  return v3;
}

id _AFAnalyticsMapToSafeValueForJson(void *a1, unsigned char *a2)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    *a2 = 1;
    uint64_t v25 = @"bytes";
    uint64_t v4 = objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithUnsignedInteger:", objc_msgSend(v3, "length"));
    id v18 = v4;
    id v5 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v18 forKeys:&v25 count:1];

    goto LABEL_18;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v6 = v3;
    if ([v6 count])
    {
      uint64_t v25 = 0;
      uint64_t v26 = &v25;
      uint64_t v27 = 0x3032000000;
      uint64_t v28 = __Block_byref_object_copy__37276;
      id v29 = __Block_byref_object_dispose__37277;
      id v30 = 0;
      id v18 = (void *)MEMORY[0x1E4F143A8];
      uint64_t v19 = 3221225472;
      id v20 = ___AFAnalyticsSafeDictionaryValueForJson_block_invoke;
      id v21 = &unk_1E592A488;
      uint64_t v23 = &v25;
      uint64_t v24 = a2;
      id v7 = v6;
      id v22 = v7;
      [v7 enumerateKeysAndObjectsUsingBlock:&v18];
      if ([(__CFString *)v26[5] count])
      {
        double v8 = (void *)[v7 mutableCopy];
        long long v9 = v26[5];
        uint64_t v13 = MEMORY[0x1E4F143A8];
        uint64_t v14 = 3221225472;
        unint64_t v15 = ___AFAnalyticsSafeDictionaryValueForJson_block_invoke_2;
        id v16 = &unk_1E592ACD0;
        id v5 = v8;
        id v17 = v5;
        [(__CFString *)v9 enumerateKeysAndObjectsUsingBlock:&v13];

LABEL_16:
        _Block_object_dispose(&v25, 8);

        goto LABEL_17;
      }
      goto LABEL_15;
    }
  }
  else
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      id v5 = v3;
      goto LABEL_18;
    }
    id v6 = v3;
    if ([v6 count])
    {
      uint64_t v25 = 0;
      uint64_t v26 = &v25;
      uint64_t v27 = 0x3032000000;
      uint64_t v28 = __Block_byref_object_copy__37276;
      id v29 = __Block_byref_object_dispose__37277;
      id v30 = 0;
      id v18 = (void *)MEMORY[0x1E4F143A8];
      uint64_t v19 = 3221225472;
      id v20 = ___AFAnalyticsSafeArrayValueForJson_block_invoke;
      id v21 = &unk_1E592A4B0;
      uint64_t v23 = &v25;
      uint64_t v24 = a2;
      id v7 = v6;
      id v22 = v7;
      [v7 enumerateObjectsUsingBlock:&v18];
      if ([(__CFString *)v26[5] count])
      {
        long long v10 = (void *)[v7 mutableCopy];
        long long v11 = v26[5];
        uint64_t v13 = MEMORY[0x1E4F143A8];
        uint64_t v14 = 3221225472;
        unint64_t v15 = ___AFAnalyticsSafeArrayValueForJson_block_invoke_2;
        id v16 = &unk_1E592A4D8;
        id v5 = v10;
        id v17 = v5;
        [(__CFString *)v11 enumerateKeysAndObjectsUsingBlock:&v13];

        goto LABEL_16;
      }
LABEL_15:
      id v5 = v7;
      goto LABEL_16;
    }
  }
  id v5 = v6;
LABEL_17:

LABEL_18:
  return v5;
}

void sub_19D07B51C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__37276(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__37277(uint64_t a1)
{
}

id AFFlowServiceXPCInterface()
{
  id v0 = [MEMORY[0x1E4F29280] interfaceWithProtocol:&unk_1EEEE6E88];
  if (AFFlowServiceXPCInterface___onceToken != -1) {
    dispatch_once(&AFFlowServiceXPCInterface___onceToken, &__block_literal_global_37296);
  }
  return v0;
}

void _AFAggregatorClientAddValueForScalarKey(uint64_t a1, uint64_t a2)
{
  void v8[2] = *MEMORY[0x1E4F143B8];
  ADClientAddValueForScalarKey();
  uint64_t v4 = +[AFAnalytics sharedAnalytics];
  v7[0] = @"add";
  v7[1] = @"value";
  v8[0] = a1;
  id v5 = [MEMORY[0x1E4F28ED0] numberWithLongLong:a2];
  v8[1] = v5;
  id v6 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v8 forKeys:v7 count:2];
  [v4 logEventWithType:1601 context:v6 contextNoCopy:1];
}

void _AFAggregatorClientPushValueForDistributionKey(uint64_t a1, double a2)
{
  void v8[2] = *MEMORY[0x1E4F143B8];
  ADClientPushValueForDistributionKey();
  uint64_t v4 = +[AFAnalytics sharedAnalytics];
  v7[0] = @"push";
  v7[1] = @"value";
  v8[0] = a1;
  id v5 = [MEMORY[0x1E4F28ED0] numberWithDouble:a2];
  v8[1] = v5;
  id v6 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v8 forKeys:v7 count:2];
  [v4 logEventWithType:1602 context:v6 contextNoCopy:1];
}

void sub_19D07DB6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19D07E200(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location, id a17)
{
  objc_destroyWeak(v18);
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  objc_destroyWeak(&a17);
  _Unwind_Resume(a1);
}

BOOL AFResponseModeDeviceMotionGetIsValid(unint64_t a1)
{
  return a1 < 4;
}

BOOL AFResponseModeDeviceMotionGetIsValidAndSpecified(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 3;
}

__CFString *AFResponseModeDeviceMotionGetName(unint64_t a1)
{
  if (a1 > 3) {
    return @"(unknown)";
  }
  else {
    return off_1E592A840[a1];
  }
}

uint64_t AFResponseModeDeviceMotionGetFromName(void *a1)
{
  id v1 = a1;
  if ([v1 length])
  {
    if (AFResponseModeDeviceMotionGetFromName_onceToken != -1) {
      dispatch_once(&AFResponseModeDeviceMotionGetFromName_onceToken, &__block_literal_global_38163);
    }
    id v2 = [(id)AFResponseModeDeviceMotionGetFromName_map objectForKey:v1];
    uint64_t v3 = [v2 integerValue];
  }
  else
  {
    uint64_t v3 = 0;
  }

  return v3;
}

void __AFResponseModeDeviceMotionGetFromName_block_invoke()
{
  id v0 = (void *)AFResponseModeDeviceMotionGetFromName_map;
  AFResponseModeDeviceMotionGetFromName_map = (uint64_t)&unk_1EEE98F40;
}

BOOL AFBooleanGetIsValid(unint64_t a1)
{
  return a1 < 3;
}

BOOL AFBooleanGetIsValidAndSpecified(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 2;
}

__CFString *AFBooleanGetName(unint64_t a1)
{
  if (a1 > 2) {
    return @"(unknown)";
  }
  else {
    return off_1E592A860[a1];
  }
}

uint64_t AFBooleanGetFromName(void *a1)
{
  id v1 = a1;
  if ([v1 length])
  {
    if (AFBooleanGetFromName_onceToken != -1) {
      dispatch_once(&AFBooleanGetFromName_onceToken, &__block_literal_global_38190);
    }
    id v2 = [(id)AFBooleanGetFromName_map objectForKey:v1];
    uint64_t v3 = [v2 integerValue];
  }
  else
  {
    uint64_t v3 = 0;
  }

  return v3;
}

void __AFBooleanGetFromName_block_invoke()
{
  id v0 = (void *)AFBooleanGetFromName_map;
  AFBooleanGetFromName_map = (uint64_t)&unk_1EEE98F68;
}

void AFSiriLocationAuthorizationStatus(void *a1)
{
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __AFSiriLocationAuthorizationStatus_block_invoke;
    block[3] = &unk_1E592C360;
    id v4 = v1;
    dispatch_async(MEMORY[0x1E4F14428], block);
  }
}

uint64_t __AFSiriLocationAuthorizationStatus_block_invoke(uint64_t a1)
{
  id v2 = (void *)MEMORY[0x1E4F1E600];
  uint64_t v3 = [MEMORY[0x1E4F28B50] bundleForClass:objc_opt_class()];
  [v2 authorizationStatusForBundle:v3];

  id v4 = *(uint64_t (**)(void))(*(void *)(a1 + 32) + 16);
  return v4();
}

uint64_t AFEffectiveSiriBundleForLocation()
{
  id v0 = (void *)MEMORY[0x1E4F28B50];
  uint64_t v1 = objc_opt_class();
  return [v0 bundleForClass:v1];
}

BOOL AFLocationStatusIsDenied(unsigned int a1)
{
  return a1 < 3;
}

BOOL AFLocationStatusIsAllowed(int a1)
{
  return (a1 - 3) < 2;
}

id AFEffectiveSiriBundlePathForLocation()
{
  id v0 = [MEMORY[0x1E4F28B50] bundleForClass:objc_opt_class()];
  uint64_t v1 = [v0 bundlePath];

  return v1;
}

void __getTRINamespaceClass_block_invoke(uint64_t a1)
{
  TrialLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("TRINamespace");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getTRINamespaceClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v3 = [NSString stringWithUTF8String:"Class getTRINamespaceClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"AFSiriDataSharingSensitivityManager.m", 21, @"Unable to find class %s", "TRINamespace");

    __break(1u);
  }
}

void TrialLibrary()
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v3[0] = 0;
  if (!TrialLibraryCore_frameworkLibrary)
  {
    v3[1] = (void *)MEMORY[0x1E4F143A8];
    v3[2] = (void *)3221225472;
    v3[3] = __TrialLibraryCore_block_invoke;
    v3[4] = &__block_descriptor_40_e5_v8__0l;
    void v3[5] = v3;
    long long v4 = xmmword_1E592A8A0;
    uint64_t v5 = 0;
    TrialLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!TrialLibraryCore_frameworkLibrary)
  {
    uint64_t v1 = [MEMORY[0x1E4F28B00] currentHandler];
    id v2 = [NSString stringWithUTF8String:"void *TrialLibrary(void)"];
    objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v2, @"AFSiriDataSharingSensitivityManager.m", 19, @"%s", v3[0]);

    __break(1u);
    goto LABEL_7;
  }
  id v0 = v3[0];
  if (v3[0]) {
LABEL_7:
  }
    free(v0);
}

uint64_t __TrialLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  TrialLibraryCore_frameworkLibrary = result;
  return result;
}

void sub_19D0811C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19D081628(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void __getTRIClientClass_block_invoke(uint64_t a1)
{
  TrialLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("TRIClient");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getTRIClientClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v3 = [NSString stringWithUTF8String:"Class getTRIClientClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"AFSiriDataSharingSensitivityManager.m", 20, @"Unable to find class %s", "TRIClient");

    __break(1u);
  }
}

__CFString *AFSiriDataSharingSensitivityPolicyToString(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 2) {
    return @"AFSiriDataSharingSensitivityPolicyUnknown";
  }
  else {
    return off_1E592A8B8[a1 - 1];
  }
}

BOOL AFWorkoutPredictionTypeGetIsValid(unint64_t a1)
{
  return a1 < 4;
}

BOOL AFWorkoutPredictionTypeGetIsValidAndSpecified(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 3;
}

__CFString *AFWorkoutPredictionTypeGetName(unint64_t a1)
{
  if (a1 > 3) {
    return @"(unknown)";
  }
  else {
    return off_1E592A8D0[a1];
  }
}

uint64_t AFWorkoutPredictionTypeGetFromName(void *a1)
{
  id v1 = a1;
  if ([v1 length])
  {
    if (AFWorkoutPredictionTypeGetFromName_onceToken != -1) {
      dispatch_once(&AFWorkoutPredictionTypeGetFromName_onceToken, &__block_literal_global_38355);
    }
    id v2 = [(id)AFWorkoutPredictionTypeGetFromName_map objectForKey:v1];
    uint64_t v3 = [v2 integerValue];
  }
  else
  {
    uint64_t v3 = 0;
  }

  return v3;
}

void __AFWorkoutPredictionTypeGetFromName_block_invoke()
{
  id v0 = (void *)AFWorkoutPredictionTypeGetFromName_map;
  AFWorkoutPredictionTypeGetFromName_map = (uint64_t)&unk_1EEE98F90;
}

void sub_19D082A70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  _Block_object_dispose(&a32, 8);
  _Block_object_dispose((const void *)(v32 - 192), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__38473(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__38474(uint64_t a1)
{
}

void notificationNearMissCallback(uint64_t a1, void *a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  id v2 = a2;
  uint64_t v3 = AFSiriLogContextConnection;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
  {
    int v4 = 136315138;
    uint64_t v5 = "notificationNearMissCallback";
    _os_log_impl(&dword_19CF1D000, v3, OS_LOG_TYPE_INFO, "%s #myriad #feedback near miss!", (uint8_t *)&v4, 0xCu);
  }
  [v2 _publishFeedbackArbitrationRecordForNearMiss];
}

AFRequestInfo *AFDirectActionCreateRequestInfo(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = objc_alloc_init(AFRequestInfo);
  [(AFRequestInfo *)v6 setActivationEvent:2];
  uint64_t v7 = a2 - 8;
  if (unint64_t)(a2 - 8) <= 6 && ((0x5Fu >> v7)) {
    id v8 = **((id **)&unk_1E592A990 + v7);
  }
  else {
    id v8 = 0;
  }
  [(AFRequestInfo *)v6 setLegacyDirectActionIdentifier:v8];

  [(AFRequestInfo *)v6 setDirectActionEvent:a2];
  long long v9 = [v5 associatedBundleIdentifier];
  [(AFRequestInfo *)v6 setDirectActionAppId:v9];

  id v10 = v5;
  long long v11 = [v10 associatedBundleIdentifier];
  long long v12 = [v10 contextDictionary];
  uint64_t v13 = v12;
  uint64_t v14 = 0;
  switch(a2)
  {
    case 1:
    case 15:
      uint64_t v15 = [getSKIMessagesInvocationClass() beginSiriRequestForApp:v11];
      goto LABEL_21;
    case 2:
    case 3:
      uint64_t v16 = [v12 objectForKeyedSubscript:@"AssistantDirectActionEventMessagesFullNameKey"];
      uint64_t v17 = [v13 objectForKeyedSubscript:@"AssistantDirectActionEventMessagesAddressKey"];
      if (v16 | v17)
      {
        id v32 = 0;
        id v33 = 0;
        AFMessagesGetPhoneNumberEmailAddressFromString(&v33, &v32, (void *)v17);
        id v18 = v33;
        id v19 = v32;
        uint64_t v14 = [getSKIMessagesInvocationClass() composeNewMessageRequestToContact:v16 phoneNumber:v18 emailAddress:v19 inApp:v11];

        goto LABEL_33;
      }
      uint64_t v26 = [getSKIMessagesInvocationClass() composeNewMessageRequestInApp:v11];
      goto LABEL_26;
    case 4:
      id v20 = [v10 bulletin];
      uint64_t v16 = (uint64_t)v20;
      if (v20)
      {
        uint64_t v17 = [v20 threadID];
        id SKIMessagesInvocationClass = getSKIMessagesInvocationClass();
        id v22 = SKIMessagesInvocationClass;
        if (!v17)
        {
          id v29 = [(id)v16 publisherBulletinID];
          uint64_t v14 = [v22 readMessagesRequestFromNotificationIdentifier:v29 fromApp:v11];

          uint64_t v17 = 0;
LABEL_33:

          goto LABEL_34;
        }
LABEL_25:
        uint64_t v26 = [SKIMessagesInvocationClass readMessagesRequestFromConversationIdentifier:v17 inApp:v11];
LABEL_26:
        uint64_t v14 = (void *)v26;
        goto LABEL_33;
      }
      if (v13)
      {
        uint64_t v17 = [v13 objectForKey:@"AssistantDirectActionEventMessagesConversationGUIDKey"];
        id SKIMessagesInvocationClass = getSKIMessagesInvocationClass();
        goto LABEL_25;
      }
      uint64_t v14 = 0;
LABEL_34:

LABEL_35:
      [(AFRequestInfo *)v6 setStartLocalRequest:v14];

      if ((unint64_t)(a1 - 1) <= 2)
      {
        id v30 = [[AFSpeechRequestOptions alloc] initWithActivationEvent:9];
        [(AFRequestInfo *)v6 setSpeechRequestOptions:v30];
      }
      return v6;
    case 5:
      if (v12)
      {
        uint64_t v16 = [v12 objectForKey:@"AssistantDirectActionEventMessagesConversationGUIDKey"];
        uint64_t v14 = [getSKIMessagesInvocationClass() composeReplyRequestToConversationIdentifier:v16 inApp:v11];
        goto LABEL_34;
      }
      uint64_t v14 = 0;
      goto LABEL_35;
    case 6:
      uint64_t v15 = [getSKIMapsInvocationClass() searchLocationRequestInApp:v11];
      goto LABEL_21;
    case 7:
      uint64_t v15 = [getSKIMusicInvocationClass() searchMusicRequestInApp:v11];
      goto LABEL_21;
    case 13:
      uint64_t v15 = [getSKIPhoneInvocationClass() startPhoneCallRequestFromApp:v11];
      goto LABEL_21;
    case 16:
      uint64_t v15 = [getSKIPhoneInvocationClass() readHomeAnnouncementRequestFromApp:v11];
      goto LABEL_21;
    case 17:
      uint64_t v16 = [v10 bulletin];
      uint64_t v23 = [(id)v16 threadID];
      uint64_t v24 = v23;
      if (v23)
      {
        id v25 = v23;
      }
      else
      {
        id v25 = [(id)v16 publisherBulletinID];
      }
      uint64_t v17 = (uint64_t)v25;

      uint64_t v14 = 0;
      if (v16 && v17)
      {
        id SKIVoiceShortcutsInvocationClass = getSKIVoiceShortcutsInvocationClass();
        uint64_t v28 = [(id)v16 displayName];
        uint64_t v14 = [SKIVoiceShortcutsInvocationClass startVoiceShortcutInCarPlayUsingTriggerId:v17 withTriggerName:v28 fromApp:v11];
      }
      goto LABEL_33;
    case 18:
      uint64_t v15 = [getSKIMapsInvocationClass() shareETARequestInApp:v11];
LABEL_21:
      uint64_t v14 = (void *)v15;
      goto LABEL_35;
    default:
      goto LABEL_35;
  }
}

id initSKIMusicInvocation()
{
  if (initSKIMusicInvocation_sOnce != -1) {
    dispatch_once(&initSKIMusicInvocation_sOnce, &__block_literal_global_104);
  }
  id v0 = (void *)classSKIMusicInvocation;
  return v0;
}

Class __initSKIMusicInvocation_block_invoke()
{
  if (SiriKitInvocationLibrary_sOnce != -1) {
    dispatch_once(&SiriKitInvocationLibrary_sOnce, &__block_literal_global_92);
  }
  Class result = objc_getClass("SKIMusicInvocation");
  classSKIMusicInvocation = (uint64_t)result;
  getSKIMusicInvocationClass = SKIMusicInvocationFunction;
  return result;
}

id SKIMusicInvocationFunction()
{
  return (id)classSKIMusicInvocation;
}

void *__SiriKitInvocationLibrary_block_invoke()
{
  Class result = dlopen("/System/Library/PrivateFrameworks/SiriKitInvocation.framework/SiriKitInvocation", 2);
  SiriKitInvocationLibrary_sLib = (uint64_t)result;
  return result;
}

id initSKIMapsInvocation()
{
  if (initSKIMapsInvocation_sOnce != -1) {
    dispatch_once(&initSKIMapsInvocation_sOnce, &__block_literal_global_101_38581);
  }
  id v0 = (void *)classSKIMapsInvocation;
  return v0;
}

Class __initSKIMapsInvocation_block_invoke()
{
  if (SiriKitInvocationLibrary_sOnce != -1) {
    dispatch_once(&SiriKitInvocationLibrary_sOnce, &__block_literal_global_92);
  }
  Class result = objc_getClass("SKIMapsInvocation");
  classSKIMapsInvocation = (uint64_t)result;
  getSKIMapsInvocationClass = SKIMapsInvocationFunction;
  return result;
}

id SKIMapsInvocationFunction()
{
  return (id)classSKIMapsInvocation;
}

id initSKIVoiceShortcutsInvocation()
{
  if (initSKIVoiceShortcutsInvocation_sOnce != -1) {
    dispatch_once(&initSKIVoiceShortcutsInvocation_sOnce, &__block_literal_global_98);
  }
  id v0 = (void *)classSKIVoiceShortcutsInvocation;
  return v0;
}

Class __initSKIVoiceShortcutsInvocation_block_invoke()
{
  if (SiriKitInvocationLibrary_sOnce != -1) {
    dispatch_once(&SiriKitInvocationLibrary_sOnce, &__block_literal_global_92);
  }
  Class result = objc_getClass("SKIVoiceShortcutsInvocation");
  classSKIVoiceShortcutsInvocation = (uint64_t)result;
  getid SKIVoiceShortcutsInvocationClass = SKIVoiceShortcutsInvocationFunction;
  return result;
}

id SKIVoiceShortcutsInvocationFunction()
{
  return (id)classSKIVoiceShortcutsInvocation;
}

id initSKIPhoneInvocation()
{
  if (initSKIPhoneInvocation_sOnce != -1) {
    dispatch_once(&initSKIPhoneInvocation_sOnce, &__block_literal_global_95_38585);
  }
  id v0 = (void *)classSKIPhoneInvocation;
  return v0;
}

Class __initSKIPhoneInvocation_block_invoke()
{
  if (SiriKitInvocationLibrary_sOnce != -1) {
    dispatch_once(&SiriKitInvocationLibrary_sOnce, &__block_literal_global_92);
  }
  Class result = objc_getClass("SKIPhoneInvocation");
  classSKIPhoneInvocation = (uint64_t)result;
  getSKIPhoneInvocationClass = SKIPhoneInvocationFunction;
  return result;
}

id SKIPhoneInvocationFunction()
{
  return (id)classSKIPhoneInvocation;
}

id initSKIMessagesInvocation()
{
  if (initSKIMessagesInvocation_sOnce != -1) {
    dispatch_once(&initSKIMessagesInvocation_sOnce, &__block_literal_global_38588);
  }
  id v0 = (void *)classSKIMessagesInvocation;
  return v0;
}

Class __initSKIMessagesInvocation_block_invoke()
{
  if (SiriKitInvocationLibrary_sOnce != -1) {
    dispatch_once(&SiriKitInvocationLibrary_sOnce, &__block_literal_global_92);
  }
  Class result = objc_getClass("SKIMessagesInvocation");
  classSKIMessagesInvocation = (uint64_t)result;
  getid SKIMessagesInvocationClass = SKIMessagesInvocationFunction;
  return result;
}

id SKIMessagesInvocationFunction()
{
  return (id)classSKIMessagesInvocation;
}

__CFString *AFDirectActionEventGetName(unint64_t a1)
{
  if (a1 > 0x12) {
    return @"Invalid direct action event";
  }
  else {
    return off_1E592A9C8[a1];
  }
}

__CFString *AFDirectActionSourceGetName(unint64_t a1)
{
  if (a1 > 3) {
    return @"Invalid direct action source";
  }
  else {
    return off_1E592AA60[a1];
  }
}

id AFValidatedNowPlayingInfo(void *a1)
{
  id v1 = a1;
  if (_WhitelistedNowPlayingKeysAndTypes_makeSchemaOnlyOnceGuard != -1) {
    dispatch_once(&_WhitelistedNowPlayingKeysAndTypes_makeSchemaOnlyOnceGuard, &__block_literal_global_38783);
  }
  id v2 = (objc_class *)MEMORY[0x1E4F1CA60];
  id v3 = (id)_WhitelistedNowPlayingKeysAndTypes_schema;
  id v4 = objc_alloc_init(v2);
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  void v10[2] = __AFValidatedNowPlayingInfo_block_invoke;
  v10[3] = &unk_1E592AB18;
  id v11 = v1;
  id v5 = v4;
  id v12 = v5;
  id v6 = v1;
  [v3 enumerateKeysAndObjectsUsingBlock:v10];
  uint64_t v7 = v12;
  id v8 = v5;

  return v8;
}

id AFGetCurrentItemAdamIDFromNowPlayingInfo(void *a1)
{
  v24[2] = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = *MEMORY[0x1E4F77640];
  v24[0] = *MEMORY[0x1E4F77638];
  v24[1] = v2;
  [MEMORY[0x1E4F1C978] arrayWithObjects:v24 count:2];
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  id v3 = (id)objc_claimAutoreleasedReturnValue();
  id v4 = (void *)[v3 countByEnumeratingWithState:&v13 objects:v23 count:16];
  if (v4)
  {
    uint64_t v6 = *(void *)v14;
    *(void *)&long long v5 = 136315650;
    long long v12 = v5;
    while (2)
    {
      for (uint64_t i = 0; i != v4; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v14 != v6) {
          objc_enumerationMutation(v3);
        }
        uint64_t v8 = *(void *)(*((void *)&v13 + 1) + 8 * i);
        long long v9 = objc_msgSend(v1, "objectForKeyedSubscript:", v8, v12, (void)v13);
        if (v9)
        {
          if (objc_opt_respondsToSelector())
          {
            id v4 = objc_msgSend(objc_alloc(MEMORY[0x1E4F28ED0]), "initWithLongLong:", objc_msgSend(v9, "longLongValue"));

            goto LABEL_14;
          }
          id v10 = AFSiriLogContextConnection;
          if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = v12;
            id v18 = "AFGetCurrentItemAdamIDFromNowPlayingInfo";
            __int16 v19 = 2112;
            uint64_t v20 = v8;
            __int16 v21 = 2112;
            id v22 = v9;
            _os_log_error_impl(&dword_19CF1D000, v10, OS_LOG_TYPE_ERROR, "%s Found %@ value that is illegal (not a 64 bit integer): %@", buf, 0x20u);
          }
        }
      }
      id v4 = (void *)[v3 countByEnumeratingWithState:&v13 objects:v23 count:16];
      if (v4) {
        continue;
      }
      break;
    }
  }
LABEL_14:

  return v4;
}

id AFLanguageOptionsForNowPlayingInfo(void *a1)
{
  CFDictionaryRef v1 = a1;
  CFDictionaryRef theDict = v1;
  if (!v1
    || (CFDictionaryRef v2 = v1,
        id v3 = (const void *)*MEMORY[0x1E4F77470],
        !CFDictionaryContainsKey(v1, (const void *)*MEMORY[0x1E4F77470])))
  {
    id v9 = 0;
    goto LABEL_54;
  }
  id v4 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  id v46 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  Value = CFDictionaryGetValue(v2, v3);
  uint64_t v6 = Value;
  if (Value)
  {
    CFTypeID v7 = CFGetTypeID(Value);
    if (v7 == CFDataGetTypeID())
    {
      CFArrayRef Copy = (const __CFArray *)MRLanguageOptionGroupsCreateFromExternalRepresentation();
    }
    else
    {
      CFTypeID v10 = CFGetTypeID(v6);
      if (v10 != CFArrayGetTypeID()) {
        goto LABEL_28;
      }
      CFArrayRef Copy = CFArrayCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (CFArrayRef)v6);
    }
    CFArrayRef v11 = Copy;
    if (Copy)
    {
      CFIndex Count = CFArrayGetCount(Copy);
      if (Count >= 1)
      {
        for (CFIndex i = 0; i != Count; ++i)
        {
          ValueAtIndex = CFArrayGetValueAtIndex(v11, i);
          CFTypeID v14 = CFGetTypeID(ValueAtIndex);
          if (v14 == CFDataGetTypeID()) {
            uint64_t v15 = MRLanguageOptionGroupCreateFromExternalRepresentation();
          }
          else {
            uint64_t v15 = (uint64_t)CFRetain(ValueAtIndex);
          }
          long long v16 = (const void *)v15;
          CFArrayRef v17 = (const __CFArray *)MRLanguageOptionGroupCopyLanguageOptions();
          CFArrayRef v18 = v17;
          if (v17)
          {
            CFIndex v19 = CFArrayGetCount(v17);
            if (v19 >= 1)
            {
              CFIndex v20 = 0;
              while (1)
              {
                __int16 v21 = CFArrayGetValueAtIndex(v18, v20);
                int v22 = MEMORY[0x19F3A45D0]();
                uint64_t v23 = [MEMORY[0x1E4F968C0] _languageOptionFromMediaRemoteRepresentation:v21];
                if (v23)
                {
                  uint64_t v24 = v4;
                  if (!v22) {
                    goto LABEL_22;
                  }
                  if (v22 == 1) {
                    break;
                  }
                }
LABEL_23:

                if (v19 == ++v20) {
                  goto LABEL_24;
                }
              }
              uint64_t v24 = v46;
LABEL_22:
              [v24 addObject:v23];
              goto LABEL_23;
            }
LABEL_24:
            CFRelease(v18);
            if (v16) {
              CFRelease(v16);
            }
          }
        }
      }
      CFRelease(v11);
    }
  }
LABEL_28:
  id v25 = (void *)CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E4F774A0]);
  uint64_t v26 = v25;
  if (v25)
  {
    CFTypeID v27 = CFGetTypeID(v25);
    if (v27 == CFDataGetTypeID())
    {
      CFArrayRef v28 = (const __CFArray *)MRLanguageOptionsCreateFromExternalRepresentation();
    }
    else
    {
      CFTypeID v29 = CFGetTypeID(v26);
      if (v29 != CFArrayGetTypeID())
      {
LABEL_49:
        uint64_t v26 = 0;
        goto LABEL_50;
      }
      CFArrayRef v28 = CFArrayCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (CFArrayRef)v26);
    }
    CFArrayRef v30 = v28;
    if (v28)
    {
      CFIndex v31 = CFArrayGetCount(v28);
      if (v31 >= 1)
      {
        id v32 = 0;
        CFIndex v33 = 0;
        uint64_t v26 = 0;
        while (1)
        {
          uint64_t v34 = CFArrayGetValueAtIndex(v30, v33);
          CFTypeID v35 = CFGetTypeID(v34);
          if (v35 == CFDataGetTypeID()) {
            uint64_t v36 = MRLanguageOptionCreateFromExternalRepresentation();
          }
          else {
            uint64_t v36 = (uint64_t)CFRetain(v34);
          }
          __int16 v37 = (const void *)v36;
          int v38 = MEMORY[0x19F3A45D0]();
          uint64_t v39 = [MEMORY[0x1E4F968C0] _languageOptionFromMediaRemoteRepresentation:v37];
          int v40 = v39;
          if (!v39) {
            goto LABEL_45;
          }
          if (!v38) {
            break;
          }
          if (v38 == 1)
          {
            uint64_t v41 = v26;
            uint64_t v26 = v39;
LABEL_44:
            id v42 = v39;
          }
LABEL_45:
          if (v37) {
            CFRelease(v37);
          }

          if (v31 == ++v33) {
            goto LABEL_52;
          }
        }
        uint64_t v41 = v32;
        id v32 = v39;
        goto LABEL_44;
      }
      id v32 = 0;
      uint64_t v26 = 0;
LABEL_52:
      CFRelease(v30);
      goto LABEL_53;
    }
    goto LABEL_49;
  }
LABEL_50:
  id v32 = 0;
LABEL_53:
  id v9 = objc_alloc_init(MEMORY[0x1E4F968B8]);
  [v9 setAvailableTracks:v4];
  [v9 setAvailableSubtitles:v46];
  [v9 setCurrentAudioTrack:v32];
  [v9 setCurrentSubtitles:v26];

LABEL_54:
  return v9;
}

void sub_19D085930(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, long long buf)
{
  if (a2 == 1)
  {
    id v13 = objc_begin_catch(a1);
    CFTypeID v14 = AFSiriLogContextConnection;
    if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf) = 136315394;
      *(void *)((char *)&buf + 4) = "AFLanguageOptionsForNowPlayingInfo";
      WORD6(buf) = 2112;
      *(void *)((char *)&buf + 14) = v13;
      _os_log_error_impl(&dword_19CF1D000, v14, OS_LOG_TYPE_ERROR, "%s Exception when decoding subtitle and audio languages %@", (uint8_t *)&buf, 0x16u);
    }

    objc_end_catch();
    JUMPOUT(0x19D0858C4);
  }
  _Unwind_Resume(a1);
}

void _AddSanitizedKeyAndValueToListeningToContainer(void *a1, void *a2, void *a3)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    uint64_t v10 = AFSiriLogContextDaemon;
    if (!os_log_type_enabled((os_log_t)AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR)) {
      goto LABEL_24;
    }
    *(_DWORD *)buf = 136315394;
    int v22 = "_AddSanitizedKeyAndValueToListeningToContainer";
    __int16 v23 = 2112;
    id v24 = v5;
    CFArrayRef v11 = "%s Ignoring non-string key %@";
LABEL_22:
    CFTypeID v14 = v10;
    uint32_t v15 = 22;
    goto LABEL_23;
  }
  if (![v5 isEqualToString:*MEMORY[0x1E4F77408]])
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      id v12 = v6;
    }
    else
    {
      long long v16 = (void *)AFSiriLogContextDaemon;
      if (os_log_type_enabled((os_log_t)AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
      {
        CFArrayRef v17 = v16;
        *(_DWORD *)buf = 136315650;
        int v22 = "_AddSanitizedKeyAndValueToListeningToContainer";
        __int16 v23 = 2112;
        id v24 = (id)objc_opt_class();
        __int16 v25 = 2112;
        id v26 = v5;
        id v18 = v24;
        _os_log_impl(&dword_19CF1D000, v17, OS_LOG_TYPE_INFO, "%s Unexpected non-string value of class %@ for key %@ -- attempting to convert to string", buf, 0x20u);
      }
      if ((objc_opt_respondsToSelector() & 1) == 0)
      {
LABEL_20:
        uint64_t v10 = AFSiriLogContextDaemon;
        if (!os_log_type_enabled((os_log_t)AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR)) {
          goto LABEL_24;
        }
        *(_DWORD *)buf = 136315394;
        int v22 = "_AddSanitizedKeyAndValueToListeningToContainer";
        __int16 v23 = 2112;
        id v24 = v5;
        CFArrayRef v11 = "%s Could not make safe value for key %@";
        goto LABEL_22;
      }
      id v12 = [v6 stringValue];
    }
    id v8 = v12;
    if (v12)
    {
      [v7 setObject:v12 forKey:v5];
LABEL_19:

      goto LABEL_24;
    }
    goto LABEL_20;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v8 = v6;
    id v9 = AFSiriLogContextDaemon;
    if (os_log_type_enabled((os_log_t)AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315138;
      int v22 = "_AddSanitizedKeyAndValueToListeningToContainer";
      _os_log_impl(&dword_19CF1D000, v9, OS_LOG_TYPE_INFO, "%s Processing kMRMediaRemoteNowPlayingCollectionInfoKeyIdentifiers", buf, 0xCu);
    }
    v19[0] = MEMORY[0x1E4F143A8];
    v19[1] = 3221225472;
    v19[2] = ___AddSanitizedKeyAndValueToListeningToContainer_block_invoke;
    v19[3] = &unk_1E592ACD0;
    id v20 = v7;
    [v8 enumerateKeysAndObjectsUsingBlock:v19];

    goto LABEL_19;
  }
  uint64_t v13 = AFSiriLogContextDaemon;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315138;
    int v22 = "_AddSanitizedKeyAndValueToListeningToContainer";
    CFArrayRef v11 = "%s Unexpected non-dictionary value for kMRMediaRemoteNowPlayingCollectionInfoKeyIdentifiers";
    CFTypeID v14 = v13;
    uint32_t v15 = 12;
LABEL_23:
    _os_log_error_impl(&dword_19CF1D000, v14, OS_LOG_TYPE_ERROR, v11, buf, v15);
  }
LABEL_24:
}

void __AFValidatedNowPlayingInfo_block_invoke(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = [*(id *)(a1 + 32) objectForKey:v5];
  if (v6)
  {
    if (objc_opt_isKindOfClass())
    {
      [*(id *)(a1 + 40) setObject:v6 forKey:v5];
    }
    else
    {
      id v7 = (void *)AFSiriLogContextDaemon;
      if (os_log_type_enabled((os_log_t)AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
      {
        id v8 = v7;
        int v10 = 136315906;
        CFArrayRef v11 = "AFValidatedNowPlayingInfo_block_invoke";
        __int16 v12 = 2112;
        uint64_t v13 = a3;
        __int16 v14 = 2112;
        id v15 = v5;
        __int16 v16 = 2112;
        id v17 = (id)objc_opt_class();
        id v9 = v17;
        _os_log_impl(&dword_19CF1D000, v8, OS_LOG_TYPE_INFO, "%s Bad NowPlaying Info, expected %@ for key %@ but got %@", (uint8_t *)&v10, 0x2Au);
      }
    }
  }
}

id _AFMediaIdURLFromHostAndIdentifier(void *a1, void *a2)
{
  id v2 = 0;
  v12[2] = *MEMORY[0x1E4F143B8];
  if (a1 && a2)
  {
    id v4 = (objc_class *)MEMORY[0x1E4F29088];
    id v5 = a2;
    id v6 = a1;
    id v2 = objc_alloc_init(v4);
    [v2 setScheme:@"x-sampmeditem"];
    [v2 setHost:v6];

    id v7 = NSString;
    v12[0] = @"/";
    v12[1] = v5;
    id v8 = [MEMORY[0x1E4F1C978] arrayWithObjects:v12 count:2];
    id v9 = [v7 pathWithComponents:v8];

    [v2 setPath:v9];
  }
  int v10 = [v2 URL];

  return v10;
}

void AFPerformDeviceVolumeAction(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v5 = a3;
  id v8 = a4;
  id v6 = v5;
  id v7 = v8;
  MRMediaRemoteGetPickedRouteHasVolumeControl();
}

void __AFPerformDeviceVolumeAction_block_invoke(uint64_t a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (!a2)
  {
    uint64_t v13 = AFSiriLogContextDaemon;
    if (os_log_type_enabled((os_log_t)AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      LODWORD(v16) = 136315138;
      *(void *)((char *)&v16 + 4) = "AFPerformDeviceVolumeAction_block_invoke";
      _os_log_error_impl(&dword_19CF1D000, v13, OS_LOG_TYPE_ERROR, "%s Media Remote reported that the picked route does NOT have volume control", (uint8_t *)&v16, 0xCu);
    }
    if (*(void *)(a1 + 40))
    {
      id v14 = objc_alloc(MEMORY[0x1E4F965A8]);
      id v12 = (id)[v14 initWithErrorCode:*MEMORY[0x1E4F974F8]];
      (*(void (**)(void, id, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), v12, 0);
      goto LABEL_21;
    }
  }
  uint64_t v3 = *(void *)(a1 + 48);
  if ((unint64_t)(v3 - 2) < 3)
  {
    uint64_t v4 = *(unsigned int *)(a1 + 56);
    float v5 = *(float *)(a1 + 60);
    uint64_t v6 = *(void *)(a1 + 32);
    id v7 = *(id *)(a1 + 40);
    if (v3 == 4) {
      float v5 = -v5;
    }
    if (v3 == 2) {
      id v8 = (void (*)(uint64_t, uint64_t, long long *, float))MEMORY[0x1E4F76F88];
    }
    else {
      id v8 = (void (*)(uint64_t, uint64_t, long long *, float))MEMORY[0x1E4F76F70];
    }
    *(void *)&long long v16 = MEMORY[0x1E4F143A8];
    *((void *)&v16 + 1) = 3221225472;
    id v17 = ___AFLocalSetVolumeActionNoCheck_block_invoke;
    uint64_t v18 = &unk_1E592AD20;
    id v19 = v7;
    id v9 = v7;
    v8(v4, v6, &v16, v5);
    goto LABEL_9;
  }
  if (v3 == 1)
  {
    id v15 = *(id *)(a1 + 40);
    id v9 = v15;
    if (!v15) {
      goto LABEL_10;
    }
    *(void *)&long long v16 = MEMORY[0x1E4F143A8];
    *((void *)&v16 + 1) = 3221225472;
    id v17 = ___AFLocalGetMediaPlaybackVolumeNoCheck_block_invoke;
    uint64_t v18 = &unk_1E592ACF8;
    id v19 = v15;
    MRMediaRemoteGetMediaPlaybackVolume();
LABEL_9:

LABEL_10:
    return;
  }
  if (!v3)
  {
    int v10 = AFSiriLogContextDaemon;
    if (os_log_type_enabled((os_log_t)AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      LODWORD(v16) = 136315138;
      *(void *)((char *)&v16 + 4) = "AFPerformDeviceVolumeAction_block_invoke";
      _os_log_error_impl(&dword_19CF1D000, v10, OS_LOG_TYPE_ERROR, "%s Unknown volume action", (uint8_t *)&v16, 0xCu);
    }
    uint64_t v11 = *(void *)(a1 + 40);
    if (v11)
    {
      id v12 = objc_alloc_init(MEMORY[0x1E4F965A8]);
      (*(void (**)(uint64_t, id, void))(v11 + 16))(v11, v12, 0);
LABEL_21:
    }
  }
}

void AFMediaRemoteSendCommandNoCheck(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v5 = a4;
  id v4 = v5;
  MRMediaRemoteSendCommandWithReply();
}

void __AFMediaRemoteSendCommandNoCheck_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    AFCommandOutcomeFromMediaRemoteStatuses(a2);
    id v3 = (id)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, id, void))(v2 + 16))(v2, v3, 0);
  }
}

id AFCommandOutcomeFromMediaRemoteStatuses(void *a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  id v1 = a1;
  uint64_t v2 = [v1 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v4 = *(void *)v10;
    while (2)
    {
      for (uint64_t i = 0; i != v3; ++i)
      {
        if (*(void *)v10 != v4) {
          objc_enumerationMutation(v1);
        }
        uint64_t v6 = AFAceErrorCodeFromMRMediaRemoteCommandHandlerStatus(objc_msgSend(*(id *)(*((void *)&v9 + 1) + 8 * i), "integerValue", (void)v9));
        if (v6)
        {
          id v7 = (id)[objc_alloc(MEMORY[0x1E4F965A8]) initWithErrorCode:v6];

          goto LABEL_11;
        }
      }
      uint64_t v3 = [v1 countByEnumeratingWithState:&v9 objects:v13 count:16];
      if (v3) {
        continue;
      }
      break;
    }
  }

  id v7 = objc_alloc_init(MEMORY[0x1E4F965B8]);
LABEL_11:
  return v7;
}

uint64_t AFAceErrorCodeFromMRMediaRemoteCommandHandlerStatus(int a1)
{
  uint64_t result = 0;
  if (a1 > 99)
  {
    if ((a1 - 102) >= 2)
    {
      if (a1 == 101)
      {
        uint64_t v3 = MEMORY[0x1E4F97368];
      }
      else
      {
        if (a1 != 100) {
          return result;
        }
        uint64_t v3 = MEMORY[0x1E4F97408];
      }
      return *(void *)v3;
    }
    goto LABEL_10;
  }
  if (a1 > 9)
  {
    if (a1 == 10)
    {
      uint64_t v3 = MEMORY[0x1E4F974F0];
    }
    else
    {
      if (a1 != 20) {
        return result;
      }
      uint64_t v3 = MEMORY[0x1E4F97338];
    }
    return *(void *)v3;
  }
  if (a1 == 1)
  {
    uint64_t v3 = MEMORY[0x1E4F97460];
    return *(void *)v3;
  }
  if (a1 == 2)
  {
LABEL_10:
    uint64_t v3 = MEMORY[0x1E4F97440];
    return *(void *)v3;
  }
  return result;
}

void AFMediaRemoteSendCommandWithOptions(int a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (a1)
  {
    id v10 = v7;
    id v11 = v8;
    id v12 = v9;
    MRMediaRemoteGetSupportedCommands();
  }
  else
  {
    AFMediaRemoteSendCommandNoCheck(0, (uint64_t)v7, (uint64_t)v8, v9);
  }
}

void __AFMediaRemoteSendCommandWithOptions_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  id v3 = a2;
  uint64_t v4 = [v3 countByEnumeratingWithState:&v22 objects:v30 count:16];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = *(void *)v23;
    while (2)
    {
      uint64_t v7 = 0;
      do
      {
        if (*(void *)v23 != v6) {
          objc_enumerationMutation(v3);
        }
        if (MEMORY[0x19F3A4620](*(void *)(*((void *)&v22 + 1) + 8 * v7)) == *(_DWORD *)(a1 + 56))
        {
          BOOL v12 = MRMediaRemoteCommandInfoGetEnabled() != 0;

          uint64_t v13 = *(unsigned int *)(a1 + 56);
          uint64_t v15 = *(void *)(a1 + 32);
          uint64_t v14 = *(void **)(a1 + 40);
          v17[0] = MEMORY[0x1E4F143A8];
          v17[1] = 3221225472;
          v17[2] = __AFMediaRemoteSendCommandWithOptions_block_invoke_2;
          v17[3] = &unk_1E592ABB8;
          BOOL v21 = v12;
          int v20 = v13;
          id v18 = v14;
          id v19 = *(id *)(a1 + 48);
          AFMediaRemoteSendCommandNoCheck(v13, v15, (uint64_t)v18, v17);

          id v11 = v18;
          goto LABEL_14;
        }
        ++v7;
      }
      while (v5 != v7);
      uint64_t v5 = [v3 countByEnumeratingWithState:&v22 objects:v30 count:16];
      if (v5) {
        continue;
      }
      break;
    }
  }

  uint64_t v8 = *(void *)(a1 + 48);
  if (v8)
  {
    id v9 = AFSiriLogContextConnection;
    if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_ERROR))
    {
      int v16 = *(_DWORD *)(a1 + 56);
      *(_DWORD *)buf = 136315394;
      uint64_t v27 = "AFMediaRemoteSendCommandWithOptions_block_invoke";
      __int16 v28 = 1024;
      int v29 = v16;
      _os_log_error_impl(&dword_19CF1D000, v9, OS_LOG_TYPE_ERROR, "%s MRMediaRemoteCommand %d is not supported by NowPlaying app", buf, 0x12u);
      uint64_t v8 = *(void *)(a1 + 48);
    }
    id v10 = objc_alloc(MEMORY[0x1E4F965A8]);
    id v11 = (id)[v10 initWithErrorCode:*MEMORY[0x1E4F97448]];
    (*(void (**)(uint64_t, id, void))(v8 + 16))(v8, v11, 0);
LABEL_14:
  }
}

void __AFMediaRemoteSendCommandWithOptions_block_invoke_2(uint64_t a1, void *a2, void *a3)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  if (v6 || *(unsigned char *)(a1 + 52) || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0))
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
  else
  {
    unsigned int v7 = *(_DWORD *)(a1 + 48);
    uint64_t v15 = MEMORY[0x1E4F143A8];
    uint64_t v16 = 3221225472;
    id v17 = __AFMediaRemoteSendCommandWithOptions_block_invoke_3;
    id v18 = &unk_1E592AB90;
    unsigned int v20 = v7;
    uint64_t v8 = *(void **)(a1 + 32);
    id v19 = *(id *)(a1 + 40);
    id v9 = v8;
    id v10 = &v15;
    id v11 = AFSiriLogContextConnection;
    if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "_CheckForSpecialFailureCodesForCurrentlyDisabledMRCommand";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = v7;
      _os_log_impl(&dword_19CF1D000, v11, OS_LOG_TYPE_INFO, "%s %d", buf, 0x12u);
    }
    if (v7 <= 0x12 && ((1 << v7) & 0x60030) != 0)
    {
      BOOL v12 = AFSiriLogContextConnection;
      if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315138;
        *(void *)&uint8_t buf[4] = "_CheckForSpecialFailureCodesForCurrentlyDisabledMRCommand";
        _os_log_impl(&dword_19CF1D000, v12, OS_LOG_TYPE_INFO, "%s Checking if an unsupported skip is unsupported by the app or the content", buf, 0xCu);
      }
      *(void *)buf = MEMORY[0x1E4F143A8];
      *(void *)&buf[8] = 3221225472;
      *(void *)&buf[16] = ___CheckForSpecialFailureCodesForCurrentlyDisabledMRCommand_block_invoke;
      long long v22 = &unk_1E592AD48;
      long long v23 = v10;
      AFGetNowPlayingInfoDictionary(v9, buf);
      uint64_t v13 = v23;
    }
    else
    {
      id v14 = objc_alloc(MEMORY[0x1E4F965A8]);
      uint64_t v13 = (uint64_t *)objc_msgSend(v14, "initWithErrorCode:", *MEMORY[0x1E4F97448], v15, v16);
      v17((uint64_t)v10, v13);
    }
  }
}

void __AFMediaRemoteSendCommandWithOptions_block_invoke_3(uint64_t a1, void *a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v4 = AFSiriLogContextConnection;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_ERROR))
  {
    int v5 = *(_DWORD *)(a1 + 40);
    int v6 = 136315650;
    unsigned int v7 = "AFMediaRemoteSendCommandWithOptions_block_invoke_3";
    __int16 v8 = 1024;
    int v9 = v5;
    __int16 v10 = 2112;
    id v11 = v3;
    _os_log_error_impl(&dword_19CF1D000, v4, OS_LOG_TYPE_ERROR, "%s Best failure for MR command %d is %@", (uint8_t *)&v6, 0x1Cu);
  }
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void AFGetNowPlayingInfoDictionary(void *a1, void *a2)
{
  if (a2)
  {
    id v3 = a2;
    id v4 = a1;
    id v5 = +[AFInstanceContext currentContext];
    _AFGetNowPlayingInfoDictionary(v4, 0, v3);
  }
}

void _AFGetNowPlayingInfoDictionary(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  id v6 = a3;
  unsigned int v7 = v6;
  if (a2)
  {
    v11[0] = MEMORY[0x1E4F143A8];
    v11[1] = 3221225472;
    v11[2] = ___AFGetNowPlayingInfoDictionary_block_invoke;
    void v11[3] = &unk_1E592AC30;
    __int16 v8 = &v12;
    id v12 = v5;
    id v13 = v7;
    [a2 performRequestWithCompletion:v11];
  }
  else
  {
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 3221225472;
    void v9[2] = ___AFGetNowPlayingInfoDictionary_block_invoke_120;
    v9[3] = &unk_1E592ACA8;
    __int16 v8 = &v10;
    id v10 = v6;
    _AFGetNowPlayingMediaContentItmes(0, 1, v5, v9);
  }
}

void _AFGetNowPlayingMediaContentItmes(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  id v6 = a4;
  unsigned int v7 = (const void *)MRPlaybackQueueRequestCreate();
  MRPlaybackQueueRequestSetIncludeLanguageOptions();
  MRPlaybackQueueRequestSetIncludeMetadata();
  if (v7)
  {
    __int16 v8 = (id *)&v12;
    id v12 = v5;
    id v13 = v6;
    id v9 = v6;
    MRMediaRemoteRequestNowPlayingPlaybackQueueSync();
    CFRelease(v7);
  }
  else
  {
    id v10 = AFSiriLogContextDaemon;
    if (os_log_type_enabled((os_log_t)AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      id v17 = "_AFGetNowPlayingMediaContentItmes";
      _os_log_error_impl(&dword_19CF1D000, v10, OS_LOG_TYPE_ERROR, "%s Failed to create queue request.", buf, 0xCu);
    }
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = ___AFGetNowPlayingMediaContentItmes_block_invoke;
    block[3] = &unk_1E592C360;
    __int16 v8 = &v15;
    id v15 = v6;
    id v11 = v6;
    dispatch_async(v5, block);
  }
}

__CFString *AFStringFromMRPlaybackState(uint64_t a1)
{
  if (a1 >= 6)
  {
    objc_msgSend(NSString, "stringWithFormat:", @"<Unknown MRPlaybackState:%u>", a1);
    id v1 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    id v1 = off_1E592ADF8[a1];
  }
  return v1;
}

uint64_t SAMPPlayStateFromMRPlaybackState(int a1)
{
  if ((a1 - 1) > 4) {
    return 0;
  }
  else {
    return dword_19D0E2654[a1 - 1];
  }
}

uint64_t MRPlaybackStateFromAFMediaPlaybackState(uint64_t result)
{
  if ((unint64_t)(result - 1) < 5) {
    return result;
  }
  else {
    return 0;
  }
}

void AFGetNowPlayingQueueState(void *a1, void *a2, void *a3)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  if (v7)
  {
    if (v6) {
      dispatch_group_t v8 = (dispatch_group_t)v6;
    }
    else {
      dispatch_group_t v8 = dispatch_group_create();
    }
    dispatch_group_t v9 = v8;
    uint64_t v10 = +[AFInstanceContext currentContext];
    id v11 = objc_alloc_init(MEMORY[0x1E4F96848]);
    id v12 = v9;
    id v13 = v11;
    if (v13)
    {
      id v14 = v5;
      dispatch_group_enter(v12);
      *(void *)buf = MEMORY[0x1E4F143A8];
      *(void *)&buf[8] = 3221225472;
      *(void *)&buf[16] = ___AFAddNowPlayingItemInfoToQueue_block_invoke;
      id v42 = &unk_1E592AD70;
      long long v43 = v12;
      id v44 = v13;
      id v15 = (void *)MEMORY[0x19F3A50D0](buf);
      _AFGetNowPlayingMediaContentItmes(-1, 3, v14, v15);
    }
    uint64_t v16 = v5;
    id v17 = v12;
    id v18 = v13;
    id v19 = [getCSAudioSessionControllerClass() sharedInstance];
    uint64_t v20 = [v19 getAudioSessionID];
    uint64_t v31 = (void *)v10;
    if (v20)
    {
      BOOL v21 = [getAVAudioSessionClass() retrieveSessionWithID:v20];
      long long v22 = v21;
      if (v21)
      {
        int v23 = [v21 lastActivationStoppedNowPlayingApp];
        uint64_t v24 = AFSiriLogContextDaemon;
        if (os_log_type_enabled((os_log_t)AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315650;
          *(void *)&uint8_t buf[4] = "_AFAddPlaybackStateToQueue";
          *(_WORD *)&unsigned char buf[12] = 2048;
          *(void *)&buf[14] = v17;
          *(_WORD *)&buf[22] = 1024;
          LODWORD(v42) = v23;
          _os_log_impl(&dword_19CF1D000, v24, OS_LOG_TYPE_INFO, "%s group=%p lastActivationStoppedNowPlayingApp=%d", buf, 0x1Cu);
        }
        if (v23)
        {
          if (AFIsInternalInstall_onceToken != -1) {
            dispatch_once(&AFIsInternalInstall_onceToken, &__block_literal_global_158);
          }
          if (AFIsInternalInstall_isInternal) {
            dispatch_assert_queue_V2(v16);
          }
          [v18 setState:1];
          long long v25 = &off_19D0E2000;
          goto LABEL_21;
        }
        int v26 = 2;
LABEL_20:
        dispatch_group_enter(v17);
        *(void *)buf = MEMORY[0x1E4F143A8];
        long long v25 = &off_19D0E2000;
        *(void *)&buf[8] = 3221225472;
        *(void *)&buf[16] = ___AFAddPlaybackStateToQueue_block_invoke;
        id v42 = &unk_1E592AD98;
        long long v43 = v17;
        int v45 = v26;
        id v44 = v18;
        _AFGetPlaybackState(v16, 0, buf);

LABEL_21:
        dispatch_group_enter(v17);
        uint64_t v35 = MEMORY[0x1E4F143A8];
        uint64_t v36 = *((void *)v25 + 70);
        uint64_t v27 = v36;
        __int16 v37 = __AFGetNowPlayingQueueState_block_invoke;
        int v38 = &unk_1E592AC08;
        uint64_t v39 = v17;
        id v28 = v18;
        id v40 = v28;
        int v29 = v17;
        _AFGetNowPlayingApplicationIdentifier(v16, 0, &v35);
        block[0] = MEMORY[0x1E4F143A8];
        block[1] = v27;
        block[2] = __AFGetNowPlayingQueueState_block_invoke_105;
        block[3] = &unk_1E592C6E8;
        id v33 = v28;
        id v34 = v7;
        id v30 = v28;
        dispatch_group_notify(v29, v16, block);

        goto LABEL_22;
      }
    }
    else
    {
      long long v22 = 0;
    }
    int v26 = 1;
    goto LABEL_20;
  }
LABEL_22:
}

void _AFGetPlaybackState(void *a1, void *a2, void *a3)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  if (v6)
  {
    dispatch_group_t v8 = AFSiriLogContextConnection;
    if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315138;
      id v18 = "_AFGetPlaybackState";
      _os_log_debug_impl(&dword_19CF1D000, v8, OS_LOG_TYPE_DEBUG, "%s Calling -[MRNowPlayingController performRequestWithCompletion:]...", buf, 0xCu);
    }
    v14[0] = MEMORY[0x1E4F143A8];
    v14[1] = 3221225472;
    void v14[2] = ___AFGetPlaybackState_block_invoke;
    v14[3] = &unk_1E592AC30;
    dispatch_group_t v9 = &v15;
    id v15 = v5;
    id v16 = v7;
    id v10 = v7;
    [v6 performRequestWithCompletion:v14];
  }
  else
  {
    id v11 = AFSiriLogContextUtility;
    if (os_log_type_enabled((os_log_t)AFSiriLogContextUtility, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315138;
      id v18 = "_AFGetPlaybackState";
      _os_log_debug_impl(&dword_19CF1D000, v11, OS_LOG_TYPE_DEBUG, "%s Calling MRMediaRemoteGetNowPlayingApplicationPlaybackState()...", buf, 0xCu);
    }
    dispatch_group_t v9 = &v13;
    id v13 = v7;
    id v12 = v7;
    MRMediaRemoteGetNowPlayingApplicationPlaybackState();
  }
}

void __AFGetNowPlayingQueueState_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id v4 = AFSiriLogContextDaemon;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = 136315650;
    id v7 = "AFGetNowPlayingQueueState_block_invoke";
    __int16 v8 = 2048;
    uint64_t v9 = v5;
    __int16 v10 = 2112;
    id v11 = v3;
    _os_log_impl(&dword_19CF1D000, v4, OS_LOG_TYPE_INFO, "%s group=%p ApplicationDisplayID %@", (uint8_t *)&v6, 0x20u);
  }
  [*(id *)(a1 + 40) setApplicationIdentifier:v3];
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void _AFGetNowPlayingApplicationIdentifier(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  id v6 = a3;
  id v7 = v6;
  if (a2)
  {
    v10[0] = MEMORY[0x1E4F143A8];
    v10[1] = 3221225472;
    void v10[2] = ___AFGetNowPlayingApplicationIdentifier_block_invoke;
    v10[3] = &unk_1E592AC30;
    __int16 v8 = &v11;
    id v11 = v5;
    id v12 = v7;
    [a2 performRequestWithCompletion:v10];
  }
  else
  {
    __int16 v8 = &v9;
    id v9 = v6;
    MRMediaRemoteGetNowPlayingClient();
  }
}

uint64_t __AFGetNowPlayingQueueState_block_invoke_105(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "_af_validateAndFinalize");
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);
  return v2();
}

id initAVAudioSession()
{
  if (initAVAudioSession_sOnce != -1) {
    dispatch_once(&initAVAudioSession_sOnce, &__block_literal_global_149);
  }
  id v0 = (void *)classAVAudioSession;
  return v0;
}

Class __initAVAudioSession_block_invoke()
{
  if (!AVFAudioLibrary_frameworkLibrary)
  {
    AVFAudioLibrary_frameworkLibrary = (uint64_t)dlopen("/System/Library/Frameworks/AVFoundation.framework/Frameworks/AVFAudio.framework/AVFAudio", 2);
    if (!AVFAudioLibrary_frameworkLibrary) {
      __assert_rtn("AVFAudioLibrary", "AFMediaRemoteUtilities.m", 38, "frameworkLibrary");
    }
  }
  Class result = objc_getClass("AVAudioSession");
  classAVAudioSession = (uint64_t)result;
  if (!result) {
    __assert_rtn("initAVAudioSession_block_invoke", "AFMediaRemoteUtilities.m", 39, "classAVAudioSession");
  }
  getAVAudioSessionClass = AVAudioSessionFunction;
  return result;
}

id AVAudioSessionFunction()
{
  return (id)classAVAudioSession;
}

id initCSAudioSessionController()
{
  if (initCSAudioSessionController_sOnce != -1) {
    dispatch_once(&initCSAudioSessionController_sOnce, &__block_literal_global_142);
  }
  id v0 = (void *)classCSAudioSessionController;
  return v0;
}

Class __initCSAudioSessionController_block_invoke()
{
  if (!CoreSpeechLibrary_frameworkLibrary_38855)
  {
    CoreSpeechLibrary_frameworkLibrary_38855 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/CoreSpeech.framework/CoreSpeech", 2);
    if (!CoreSpeechLibrary_frameworkLibrary_38855) {
      __assert_rtn("CoreSpeechLibrary", "AFMediaRemoteUtilities.m", 40, "frameworkLibrary");
    }
  }
  Class result = objc_getClass("CSAudioSessionController");
  classCSAudioSessionController = (uint64_t)result;
  if (!result) {
    __assert_rtn("initCSAudioSessionController_block_invoke", "AFMediaRemoteUtilities.m", 41, "classCSAudioSessionController");
  }
  getCSAudioSessionControllerClass = CSAudioSessionControllerFunction;
  return result;
}

id CSAudioSessionControllerFunction()
{
  return (id)classCSAudioSessionController;
}

BOOL AFPauseCommandsInterruptAudio()
{
  if (AFIsHorseman_onceToken != -1) {
    dispatch_once(&AFIsHorseman_onceToken, &__block_literal_global_220_45602);
  }
  return AFIsHorseman_isHorseman == 0;
}

BOOL AFClockIsFiringTimerValid(void *a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = [MEMORY[0x1E4F1C9C8] date];
  id v3 = [v1 firedDate];
  [v2 timeIntervalSinceDate:v3];
  double v5 = v4;

  if (v5 >= 900.0)
  {
    id v6 = AFSiriLogContextUtility;
    if (os_log_type_enabled((os_log_t)AFSiriLogContextUtility, OS_LOG_TYPE_DEBUG))
    {
      int v8 = 136315394;
      id v9 = "AFClockIsFiringTimerValid";
      __int16 v10 = 2112;
      id v11 = v1;
      _os_log_debug_impl(&dword_19CF1D000, v6, OS_LOG_TYPE_DEBUG, "%s Firing timer is not valid: %@", (uint8_t *)&v8, 0x16u);
    }
  }

  return v5 < 900.0;
}

BOOL AFSiriCarPlayAnnounceEnablementTypeGetIsValid(unint64_t a1)
{
  return a1 < 5;
}

BOOL AFSiriCarPlayAnnounceEnablementTypeGetIsValidAndSpecified(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 4;
}

__CFString *AFSiriCarPlayAnnounceEnablementTypeGetName(unint64_t a1)
{
  if (a1 > 4) {
    return @"(unknown)";
  }
  else {
    return off_1E592AEC0[a1];
  }
}

uint64_t AFSiriCarPlayAnnounceEnablementTypeGetFromName(void *a1)
{
  id v1 = a1;
  if ([v1 length])
  {
    if (AFSiriCarPlayAnnounceEnablementTypeGetFromName_onceToken != -1) {
      dispatch_once(&AFSiriCarPlayAnnounceEnablementTypeGetFromName_onceToken, &__block_literal_global_39246);
    }
    uint64_t v2 = [(id)AFSiriCarPlayAnnounceEnablementTypeGetFromName_map objectForKey:v1];
    uint64_t v3 = [v2 integerValue];
  }
  else
  {
    uint64_t v3 = 0;
  }

  return v3;
}

void __AFSiriCarPlayAnnounceEnablementTypeGetFromName_block_invoke()
{
  id v0 = (void *)AFSiriCarPlayAnnounceEnablementTypeGetFromName_map;
  AFSiriCarPlayAnnounceEnablementTypeGetFromName_map = (uint64_t)&unk_1EEE98FB8;
}

BOOL AFMyriadAdvertisementRecordTypeGetIsValid(unint64_t a1)
{
  return a1 < 0xB;
}

BOOL AFMyriadAdvertisementRecordTypeGetIsValidAndSpecified(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 0xA;
}

__CFString *AFMyriadAdvertisementRecordTypeGetName(unint64_t a1)
{
  if (a1 > 0xA) {
    return @"(unknown)";
  }
  else {
    return off_1E592AEE8[a1];
  }
}

uint64_t AFMyriadAdvertisementRecordTypeGetFromName(void *a1)
{
  id v1 = a1;
  if ([v1 length])
  {
    if (AFMyriadAdvertisementRecordTypeGetFromName_onceToken != -1) {
      dispatch_once(&AFMyriadAdvertisementRecordTypeGetFromName_onceToken, &__block_literal_global_39297);
    }
    uint64_t v2 = [(id)AFMyriadAdvertisementRecordTypeGetFromName_map objectForKey:v1];
    uint64_t v3 = [v2 integerValue];
  }
  else
  {
    uint64_t v3 = 0;
  }

  return v3;
}

void __AFMyriadAdvertisementRecordTypeGetFromName_block_invoke()
{
  id v0 = (void *)AFMyriadAdvertisementRecordTypeGetFromName_map;
  AFMyriadAdvertisementRecordTypeGetFromName_map = (uint64_t)&unk_1EEE98FE0;
}

id AFDictationServiceDelegateXPCInterface()
{
  v35[2] = *MEMORY[0x1E4F143B8];
  id v0 = [MEMORY[0x1E4F29280] interfaceWithProtocol:&unk_1EEEB0DC8];
  id v1 = (void *)MEMORY[0x1E4F1CAD0];
  v35[0] = objc_opt_class();
  v35[1] = objc_opt_class();
  uint64_t v2 = [MEMORY[0x1E4F1C978] arrayWithObjects:v35 count:2];
  uint64_t v3 = [v1 setWithArray:v2];
  [v0 setClasses:v3 forSelector:sel_speechDidRecognizePhrases_rawPhrases_utterances_rawUtterances_nluResult_usingSpeechModel_correctionContext_audioAnalytics_ argumentIndex:0 ofReply:0];

  double v4 = (void *)MEMORY[0x1E4F1CAD0];
  v34[0] = objc_opt_class();
  v34[1] = objc_opt_class();
  double v5 = [MEMORY[0x1E4F1C978] arrayWithObjects:v34 count:2];
  id v6 = [v4 setWithArray:v5];
  [v0 setClasses:v6 forSelector:sel_speechDidRecognizePhrases_rawPhrases_utterances_rawUtterances_nluResult_usingSpeechModel_correctionContext_audioAnalytics_ argumentIndex:1 ofReply:0];

  id v7 = (void *)MEMORY[0x1E4F1CAD0];
  v33[0] = objc_opt_class();
  v33[1] = objc_opt_class();
  int v8 = [MEMORY[0x1E4F1C978] arrayWithObjects:v33 count:2];
  id v9 = [v7 setWithArray:v8];
  [v0 setClasses:v9 forSelector:sel_speechDidRecognizePhrases_rawPhrases_utterances_rawUtterances_nluResult_usingSpeechModel_correctionContext_audioAnalytics_ argumentIndex:2 ofReply:0];

  __int16 v10 = (void *)MEMORY[0x1E4F1CAD0];
  v32[0] = objc_opt_class();
  v32[1] = objc_opt_class();
  id v11 = [MEMORY[0x1E4F1C978] arrayWithObjects:v32 count:2];
  uint64_t v12 = [v10 setWithArray:v11];
  [v0 setClasses:v12 forSelector:sel_speechDidRecognizePhrases_rawPhrases_utterances_rawUtterances_nluResult_usingSpeechModel_correctionContext_audioAnalytics_ argumentIndex:3 ofReply:0];

  id v13 = (void *)MEMORY[0x1E4F1CAD0];
  v31[0] = objc_opt_class();
  v31[1] = objc_opt_class();
  id v14 = [MEMORY[0x1E4F1C978] arrayWithObjects:v31 count:2];
  id v15 = [v13 setWithArray:v14];
  [v0 setClasses:v15 forSelector:sel_speechDidRecognizeTokens_nluResult_usingSpeechModel_ argumentIndex:0 ofReply:0];

  id v16 = (void *)MEMORY[0x1E4F1CAD0];
  v30[0] = objc_opt_class();
  v30[1] = objc_opt_class();
  v30[2] = objc_opt_class();
  v30[3] = objc_opt_class();
  id v17 = [MEMORY[0x1E4F1C978] arrayWithObjects:v30 count:4];
  id v18 = [v16 setWithArray:v17];
  [v0 setClasses:v18 forSelector:sel_speechDidRecognizeTranscriptionObjects_usingSpeechModel_ argumentIndex:0 ofReply:0];

  uint64_t v19 = (void *)MEMORY[0x1E4F1CAD0];
  v29[0] = objc_opt_class();
  v29[1] = objc_opt_class();
  uint64_t v20 = [MEMORY[0x1E4F1C978] arrayWithObjects:v29 count:2];
  BOOL v21 = [v19 setWithArray:v20];
  [v0 setClasses:v21 forSelector:sel_speechDidReceiveSearchResults_recognitionText_stable_final_ argumentIndex:0 ofReply:0];

  long long v22 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v26 = objc_opt_class();
  uint64_t v27 = objc_opt_class();
  uint64_t v28 = objc_opt_class();
  int v23 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v26 count:3];
  uint64_t v24 = objc_msgSend(v22, "setWithArray:", v23, v26, v27);
  [v0 setClasses:v24 forSelector:sel_speechDidDetectLanguage_confidenceScores_isConfident_ argumentIndex:1 ofReply:0];

  return v0;
}

uint64_t AFPendingSpeechRequestServiceInterface()
{
  return [MEMORY[0x1E4F29280] interfaceWithProtocol:&unk_1EEEE6EE8];
}

BOOL AFBluetoothHeadphoneInEarStatusGetIsValid(unint64_t a1)
{
  return a1 < 4;
}

BOOL AFBluetoothHeadphoneInEarStatusGetIsValidAndSpecified(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 3;
}

__CFString *AFBluetoothHeadphoneInEarStatusGetName(unint64_t a1)
{
  if (a1 > 3) {
    return @"(unknown)";
  }
  else {
    return off_1E592B038[a1];
  }
}

uint64_t AFBluetoothHeadphoneInEarStatusGetFromName(void *a1)
{
  id v1 = a1;
  if ([v1 length])
  {
    if (AFBluetoothHeadphoneInEarStatusGetFromName_onceToken != -1) {
      dispatch_once(&AFBluetoothHeadphoneInEarStatusGetFromName_onceToken, &__block_literal_global_40241);
    }
    uint64_t v2 = [(id)AFBluetoothHeadphoneInEarStatusGetFromName_map objectForKey:v1];
    uint64_t v3 = [v2 integerValue];
  }
  else
  {
    uint64_t v3 = 0;
  }

  return v3;
}

void __AFBluetoothHeadphoneInEarStatusGetFromName_block_invoke()
{
  id v0 = (void *)AFBluetoothHeadphoneInEarStatusGetFromName_map;
  AFBluetoothHeadphoneInEarStatusGetFromName_map = (uint64_t)&unk_1EEE99008;
}

BOOL AFBluetoothHeadphoneListeningModeGetIsValid(unint64_t a1)
{
  return a1 < 6;
}

BOOL AFBluetoothHeadphoneListeningModeGetIsValidAndSpecified(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 5;
}

__CFString *AFBluetoothHeadphoneListeningModeGetName(unint64_t a1)
{
  if (a1 > 5) {
    return @"(unknown)";
  }
  else {
    return off_1E592B058[a1];
  }
}

uint64_t AFBluetoothHeadphoneListeningModeGetFromName(void *a1)
{
  id v1 = a1;
  if ([v1 length])
  {
    if (AFBluetoothHeadphoneListeningModeGetFromName_onceToken != -1) {
      dispatch_once(&AFBluetoothHeadphoneListeningModeGetFromName_onceToken, &__block_literal_global_40275);
    }
    uint64_t v2 = [(id)AFBluetoothHeadphoneListeningModeGetFromName_map objectForKey:v1];
    uint64_t v3 = [v2 integerValue];
  }
  else
  {
    uint64_t v3 = 0;
  }

  return v3;
}

void __AFBluetoothHeadphoneListeningModeGetFromName_block_invoke()
{
  id v0 = (void *)AFBluetoothHeadphoneListeningModeGetFromName_map;
  AFBluetoothHeadphoneListeningModeGetFromName_map = (uint64_t)&unk_1EEE99030;
}

BOOL AFInterstitialStyleGetIsValid(unint64_t a1)
{
  return a1 < 9;
}

BOOL AFInterstitialStyleGetIsValidAndSpecified(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 8;
}

__CFString *AFInterstitialStyleGetName(unint64_t a1)
{
  if (a1 > 8) {
    return @"(unknown)";
  }
  else {
    return off_1E592B0C0[a1];
  }
}

uint64_t AFInterstitialStyleGetFromName(void *a1)
{
  id v1 = a1;
  if ([v1 length])
  {
    if (AFInterstitialStyleGetFromName_onceToken != -1) {
      dispatch_once(&AFInterstitialStyleGetFromName_onceToken, &__block_literal_global_40549);
    }
    uint64_t v2 = [(id)AFInterstitialStyleGetFromName_map objectForKey:v1];
    uint64_t v3 = [v2 integerValue];
  }
  else
  {
    uint64_t v3 = 0;
  }

  return v3;
}

void __AFInterstitialStyleGetFromName_block_invoke()
{
  id v0 = (void *)AFInterstitialStyleGetFromName_map;
  AFInterstitialStyleGetFromName_map = (uint64_t)&unk_1EEE99058;
}

BOOL AFSleepStateGetIsValid(unint64_t a1)
{
  return a1 < 3;
}

BOOL AFSleepStateGetIsValidAndSpecified(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 2;
}

__CFString *AFSleepStateGetName(unint64_t a1)
{
  if (a1 > 2) {
    return @"(unknown)";
  }
  else {
    return off_1E592B138[a1];
  }
}

uint64_t AFSleepStateGetFromName(void *a1)
{
  id v1 = a1;
  if ([v1 length])
  {
    if (AFSleepStateGetFromName_onceToken != -1) {
      dispatch_once(&AFSleepStateGetFromName_onceToken, &__block_literal_global_40773);
    }
    uint64_t v2 = [(id)AFSleepStateGetFromName_map objectForKey:v1];
    uint64_t v3 = [v2 integerValue];
  }
  else
  {
    uint64_t v3 = 0;
  }

  return v3;
}

void __AFSleepStateGetFromName_block_invoke()
{
  id v0 = (void *)AFSleepStateGetFromName_map;
  AFSleepStateGetFromName_map = (uint64_t)&unk_1EEE99080;
}

id AFClientServiceXPCInterface()
{
  if (AFClientServiceXPCInterface___onceToken != -1) {
    dispatch_once(&AFClientServiceXPCInterface___onceToken, &__block_literal_global_41191);
  }
  id v0 = (void *)AFClientServiceXPCInterface_interface;
  return v0;
}

void __AFClientServiceXPCInterface_block_invoke()
{
  uint64_t v0 = [MEMORY[0x1E4F29280] interfaceWithProtocol:&unk_1EEEE6F48];
  id v1 = (void *)AFClientServiceXPCInterface_interface;
  AFClientServiceXPCInterface_interface = v0;

  uint64_t v2 = (void *)AFClientServiceXPCInterface_interface;
  uint64_t v3 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v4 = objc_opt_class();
  uint64_t v5 = objc_opt_class();
  uint64_t v6 = objc_opt_class();
  uint64_t v7 = objc_opt_class();
  uint64_t v8 = objc_opt_class();
  id v9 = objc_msgSend(v3, "setWithObjects:", v4, v5, v6, v7, v8, objc_opt_class(), 0);
  [v2 setClasses:v9 forSelector:sel_setOverriddenApplicationContext_withContext_ argumentIndex:1 ofReply:0];

  __int16 v10 = (void *)AFClientServiceXPCInterface_interface;
  id v11 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v12 = objc_opt_class();
  id v13 = objc_msgSend(v11, "setWithObjects:", v12, objc_opt_class(), 0);
  [v10 setClasses:v13 forSelector:sel_setApplicationContextForApplicationInfos_withRefId_ argumentIndex:0 ofReply:0];

  id v14 = (void *)AFClientServiceXPCInterface_interface;
  id v15 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v16 = objc_opt_class();
  id v17 = objc_msgSend(v15, "setWithObjects:", v16, objc_opt_class(), 0);
  [v14 setClasses:v17 forSelector:sel_fetchAppicationContextForApplicationInfo_supplementalContext_refID_ argumentIndex:0 ofReply:0];

  id v18 = (void *)AFClientServiceXPCInterface_interface;
  uint64_t v19 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v20 = objc_opt_class();
  BOOL v21 = objc_msgSend(v19, "setWithObjects:", v20, objc_opt_class(), 0);
  [v18 setClasses:v21 forSelector:sel_fetchAppicationContextForApplicationInfo_supplementalContext_refID_ argumentIndex:1 ofReply:0];

  long long v22 = (void *)AFClientServiceXPCInterface_interface;
  int v23 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v24 = objc_opt_class();
  long long v25 = objc_msgSend(v23, "setWithObjects:", v24, objc_opt_class(), 0);
  [v22 setClasses:v25 forSelector:sel_getDeferredObjectsWithIdentifiers_completion_ argumentIndex:0 ofReply:0];

  uint64_t v26 = (void *)AFClientServiceXPCInterface_interface;
  uint64_t v27 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v28 = objc_opt_class();
  int v29 = objc_msgSend(v27, "setWithObjects:", v28, objc_opt_class(), 0);
  [v26 setClasses:v29 forSelector:sel_getDeferredObjectsWithIdentifiers_completion_ argumentIndex:0 ofReply:1];

  id v30 = (void *)AFClientServiceXPCInterface_interface;
  uint64_t v31 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v32 = objc_opt_class();
  uint64_t v33 = objc_opt_class();
  uint64_t v34 = objc_opt_class();
  objc_msgSend(v31, "setWithObjects:", v32, v33, v34, objc_opt_class(), 0);
  id v35 = (id)objc_claimAutoreleasedReturnValue();
  [v30 setClasses:v35 forSelector:sel_recordUIMetrics_ argumentIndex:0 ofReply:0];
}

id AFClientServiceDelegateXPCInterface()
{
  if (AFClientServiceDelegateXPCInterface___onceToken != -1) {
    dispatch_once(&AFClientServiceDelegateXPCInterface___onceToken, &__block_literal_global_179);
  }
  uint64_t v0 = (void *)AFClientServiceDelegateXPCInterface_interface;
  return v0;
}

void __AFClientServiceDelegateXPCInterface_block_invoke()
{
  uint64_t v0 = [MEMORY[0x1E4F29280] interfaceWithProtocol:&unk_1EEE9E280];
  id v1 = (void *)AFClientServiceDelegateXPCInterface_interface;
  AFClientServiceDelegateXPCInterface_interface = v0;

  uint64_t v2 = (void *)AFClientServiceDelegateXPCInterface_interface;
  uint64_t v3 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v4 = objc_opt_class();
  uint64_t v5 = objc_msgSend(v3, "setWithObjects:", v4, objc_opt_class(), 0);
  [v2 setClasses:v5 forSelector:sel_getBulletinContext_ argumentIndex:0 ofReply:1];

  uint64_t v6 = (void *)AFClientServiceDelegateXPCInterface_interface;
  uint64_t v7 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v8 = objc_opt_class();
  id v9 = objc_msgSend(v7, "setWithObjects:", v8, objc_opt_class(), 0);
  [v6 setClasses:v9 forSelector:sel_speechRecordingDidUpdateRecognitionPhrases_utterances_refId_ argumentIndex:0 ofReply:0];

  __int16 v10 = (void *)AFClientServiceDelegateXPCInterface_interface;
  id v11 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v12 = objc_opt_class();
  objc_msgSend(v11, "setWithObjects:", v12, objc_opt_class(), 0);
  id v13 = (id)objc_claimAutoreleasedReturnValue();
  [v10 setClasses:v13 forSelector:sel_speechRecordingDidUpdateRecognitionPhrases_utterances_refId_ argumentIndex:1 ofReply:0];
}

id AFNotifyGetEffectiveNotificationName(void *a1, void *a2)
{
  id v3 = a1;
  uint64_t v4 = [a2 info];
  [v4 applicationType];

  return v3;
}

uint64_t AFNotifyGetEffectiveNotification(uint64_t a1, void *a2)
{
  id v3 = (objc_class *)NSString;
  id v4 = a2;
  uint64_t v5 = (void *)[[v3 alloc] initWithCString:a1 encoding:1];
  AFNotifyGetEffectiveNotificationName(v5, v4);
  objc_claimAutoreleasedReturnValue();

  id v6 = v5;
  uint64_t v7 = [v6 cStringUsingEncoding:1];

  return v7;
}

void sub_19D0956F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19D095A54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  objc_destroyWeak(v20);
  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19D095EE4(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak(v2);
  objc_destroyWeak((id *)(v3 - 80));
  _Unwind_Resume(a1);
}

void sub_19D0969C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  objc_destroyWeak(v21);
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19D097AA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__41585(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__41586(uint64_t a1)
{
}

BOOL AFInstanceApplicationTypeGetIsValid(unint64_t a1)
{
  return a1 < 2;
}

BOOL AFInstanceApplicationTypeGetIsValidAndSpecified(uint64_t a1)
{
  return a1 == 1;
}

__CFString *AFInstanceApplicationTypeGetName(uint64_t a1)
{
  id v1 = @"(unknown)";
  if (a1 == 1) {
    id v1 = @"default";
  }
  if (a1) {
    return v1;
  }
  else {
    return @"unspecified";
  }
}

uint64_t AFInstanceApplicationTypeGetFromName(void *a1)
{
  id v1 = a1;
  if ([v1 length])
  {
    if (AFInstanceApplicationTypeGetFromName_onceToken != -1) {
      dispatch_once(&AFInstanceApplicationTypeGetFromName_onceToken, &__block_literal_global_41612);
    }
    uint64_t v2 = [(id)AFInstanceApplicationTypeGetFromName_map objectForKey:v1];
    uint64_t v3 = [v2 integerValue];
  }
  else
  {
    uint64_t v3 = 0;
  }

  return v3;
}

void __AFInstanceApplicationTypeGetFromName_block_invoke()
{
  uint64_t v0 = (void *)AFInstanceApplicationTypeGetFromName_map;
  AFInstanceApplicationTypeGetFromName_map = (uint64_t)&unk_1EEE990A8;
}

uint64_t AFSiriUsageResultHandlingInterface()
{
  return [MEMORY[0x1E4F29280] interfaceWithProtocol:&unk_1EEEC2890];
}

void sub_19D098554(_Unwind_Exception *a1)
{
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 72));
  _Unwind_Resume(a1);
}

void sub_19D09DA5C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 80));
  _Unwind_Resume(a1);
}

_xpc_connection_s *_ExternalRequestConnectionWithContext(void *a1)
{
  if (a1)
  {
    mach_service = [a1 createXPCConnectionForMachService:"com.apple.siri.external_request" targetQueue:0 flags:0];
  }
  else
  {
    mach_service = xpc_connection_create_mach_service("com.apple.siri.external_request", 0, 0);
  }
  uint64_t v2 = mach_service;
  xpc_connection_set_event_handler(mach_service, &__block_literal_global_43022);
  xpc_connection_resume(v2);
  return v2;
}

_xpc_connection_s *_ExternalRequestConnection()
{
  return _ExternalRequestConnectionWithContext(0);
}

id initANAnnouncementInfoPlaybackFinishedDateKey()
{
  if (initANAnnouncementInfoPlaybackFinishedDateKey_sOnce != -1) {
    dispatch_once(&initANAnnouncementInfoPlaybackFinishedDateKey_sOnce, &__block_literal_global_157);
  }
  uint64_t v0 = (void *)constantANAnnouncementInfoPlaybackFinishedDateKey;
  return v0;
}

void __initANAnnouncementInfoPlaybackFinishedDateKey_block_invoke()
{
  if (AnnounceLibrary_sOnce_43193 != -1) {
    dispatch_once(&AnnounceLibrary_sOnce_43193, &__block_literal_global_136_43194);
  }
  uint64_t v0 = (id *)dlsym((void *)AnnounceLibrary_sLib_43195, "ANAnnouncementInfoPlaybackFinishedDateKey");
  if (v0) {
    objc_storeStrong((id *)&constantANAnnouncementInfoPlaybackFinishedDateKey, *v0);
  }
  getANAnnouncementInfoPlaybackFinishedDateKey = ANAnnouncementInfoPlaybackFinishedDateKeyFunction;
}

id ANAnnouncementInfoPlaybackFinishedDateKeyFunction()
{
  return (id)constantANAnnouncementInfoPlaybackFinishedDateKey;
}

void *__AnnounceLibrary_block_invoke_43199()
{
  Class result = dlopen("/System/Library/PrivateFrameworks/Announce.framework/Announce", 2);
  AnnounceLibrary_sLib_43195 = (uint64_t)result;
  return result;
}

id initANAnnouncementInfoPlaybackStartDateKey()
{
  if (initANAnnouncementInfoPlaybackStartDateKey_sOnce != -1) {
    dispatch_once(&initANAnnouncementInfoPlaybackStartDateKey_sOnce, &__block_literal_global_154);
  }
  uint64_t v0 = (void *)constantANAnnouncementInfoPlaybackStartDateKey;
  return v0;
}

void __initANAnnouncementInfoPlaybackStartDateKey_block_invoke()
{
  if (AnnounceLibrary_sOnce_43193 != -1) {
    dispatch_once(&AnnounceLibrary_sOnce_43193, &__block_literal_global_136_43194);
  }
  uint64_t v0 = (id *)dlsym((void *)AnnounceLibrary_sLib_43195, "ANAnnouncementInfoPlaybackStartDateKey");
  if (v0) {
    objc_storeStrong((id *)&constantANAnnouncementInfoPlaybackStartDateKey, *v0);
  }
  getANAnnouncementInfoPlaybackStartDateKey = ANAnnouncementInfoPlaybackStartDateKeyFunction;
}

id ANAnnouncementInfoPlaybackStartDateKeyFunction()
{
  return (id)constantANAnnouncementInfoPlaybackStartDateKey;
}

id initANAnnouncementInfoPlaybackFinishedMachTimeKey()
{
  if (initANAnnouncementInfoPlaybackFinishedMachTimeKey_sOnce != -1) {
    dispatch_once(&initANAnnouncementInfoPlaybackFinishedMachTimeKey_sOnce, &__block_literal_global_151);
  }
  uint64_t v0 = (void *)constantANAnnouncementInfoPlaybackFinishedMachTimeKey;
  return v0;
}

void __initANAnnouncementInfoPlaybackFinishedMachTimeKey_block_invoke()
{
  if (AnnounceLibrary_sOnce_43193 != -1) {
    dispatch_once(&AnnounceLibrary_sOnce_43193, &__block_literal_global_136_43194);
  }
  uint64_t v0 = (id *)dlsym((void *)AnnounceLibrary_sLib_43195, "ANAnnouncementInfoPlaybackFinishedMachTimeKey");
  if (v0) {
    objc_storeStrong((id *)&constantANAnnouncementInfoPlaybackFinishedMachTimeKey, *v0);
  }
  getANAnnouncementInfoPlaybackFinishedMachTimeKey = ANAnnouncementInfoPlaybackFinishedMachTimeKeyFunction;
}

id ANAnnouncementInfoPlaybackFinishedMachTimeKeyFunction()
{
  return (id)constantANAnnouncementInfoPlaybackFinishedMachTimeKey;
}

id initANAnnouncementInfoPlaybackStartMachTimeKey()
{
  if (initANAnnouncementInfoPlaybackStartMachTimeKey_sOnce != -1) {
    dispatch_once(&initANAnnouncementInfoPlaybackStartMachTimeKey_sOnce, &__block_literal_global_148);
  }
  uint64_t v0 = (void *)constantANAnnouncementInfoPlaybackStartMachTimeKey;
  return v0;
}

void __initANAnnouncementInfoPlaybackStartMachTimeKey_block_invoke()
{
  if (AnnounceLibrary_sOnce_43193 != -1) {
    dispatch_once(&AnnounceLibrary_sOnce_43193, &__block_literal_global_136_43194);
  }
  uint64_t v0 = (id *)dlsym((void *)AnnounceLibrary_sLib_43195, "ANAnnouncementInfoPlaybackStartMachTimeKey");
  if (v0) {
    objc_storeStrong((id *)&constantANAnnouncementInfoPlaybackStartMachTimeKey, *v0);
  }
  getANAnnouncementInfoPlaybackStartMachTimeKey = ANAnnouncementInfoPlaybackStartMachTimeKeyFunction;
}

id ANAnnouncementInfoPlaybackStartMachTimeKeyFunction()
{
  return (id)constantANAnnouncementInfoPlaybackStartMachTimeKey;
}

id initANAnnouncementInfoAnnouncementIDKey()
{
  if (initANAnnouncementInfoAnnouncementIDKey_sOnce != -1) {
    dispatch_once(&initANAnnouncementInfoAnnouncementIDKey_sOnce, &__block_literal_global_145);
  }
  uint64_t v0 = (void *)constantANAnnouncementInfoAnnouncementIDKey;
  return v0;
}

void __initANAnnouncementInfoAnnouncementIDKey_block_invoke()
{
  if (AnnounceLibrary_sOnce_43193 != -1) {
    dispatch_once(&AnnounceLibrary_sOnce_43193, &__block_literal_global_136_43194);
  }
  uint64_t v0 = (id *)dlsym((void *)AnnounceLibrary_sLib_43195, "ANAnnouncementInfoAnnouncementIDKey");
  if (v0) {
    objc_storeStrong((id *)&constantANAnnouncementInfoAnnouncementIDKey, *v0);
  }
  getANAnnouncementInfoAnnouncementIDKey = ANAnnouncementInfoAnnouncementIDKeyFunction;
}

id ANAnnouncementInfoAnnouncementIDKeyFunction()
{
  return (id)constantANAnnouncementInfoAnnouncementIDKey;
}

id initANAnnouncementInfoPlaybackIsActiveKey()
{
  if (initANAnnouncementInfoPlaybackIsActiveKey_sOnce != -1) {
    dispatch_once(&initANAnnouncementInfoPlaybackIsActiveKey_sOnce, &__block_literal_global_142_43205);
  }
  uint64_t v0 = (void *)constantANAnnouncementInfoPlaybackIsActiveKey;
  return v0;
}

void __initANAnnouncementInfoPlaybackIsActiveKey_block_invoke()
{
  if (AnnounceLibrary_sOnce_43193 != -1) {
    dispatch_once(&AnnounceLibrary_sOnce_43193, &__block_literal_global_136_43194);
  }
  uint64_t v0 = (id *)dlsym((void *)AnnounceLibrary_sLib_43195, "ANAnnouncementInfoPlaybackIsActiveKey");
  if (v0) {
    objc_storeStrong((id *)&constantANAnnouncementInfoPlaybackIsActiveKey, *v0);
  }
  getANAnnouncementInfoPlaybackIsActiveKey = ANAnnouncementInfoPlaybackIsActiveKeyFunction;
}

id ANAnnouncementInfoPlaybackIsActiveKeyFunction()
{
  return (id)constantANAnnouncementInfoPlaybackIsActiveKey;
}

id initANLocalPlaybackSession()
{
  if (initANLocalPlaybackSession_sOnce != -1) {
    dispatch_once(&initANLocalPlaybackSession_sOnce, &__block_literal_global_139_43208);
  }
  uint64_t v0 = (void *)classANLocalPlaybackSession;
  return v0;
}

Class __initANLocalPlaybackSession_block_invoke()
{
  if (AnnounceLibrary_sOnce_43193 != -1) {
    dispatch_once(&AnnounceLibrary_sOnce_43193, &__block_literal_global_136_43194);
  }
  Class result = objc_getClass("ANLocalPlaybackSession");
  classANLocalPlaybackSession = (uint64_t)result;
  getANLocalPlaybackSessionClass = ANLocalPlaybackSessionFunction;
  return result;
}

id ANLocalPlaybackSessionFunction()
{
  return (id)classANLocalPlaybackSession;
}

id initkANAnnounceStateNotificationKey()
{
  if (initkANAnnounceStateNotificationKey_sOnce != -1) {
    dispatch_once(&initkANAnnounceStateNotificationKey_sOnce, &__block_literal_global_43215);
  }
  uint64_t v0 = (void *)constantkANAnnounceStateNotificationKey;
  return v0;
}

void __initkANAnnounceStateNotificationKey_block_invoke()
{
  if (AnnounceLibrary_sOnce_43193 != -1) {
    dispatch_once(&AnnounceLibrary_sOnce_43193, &__block_literal_global_136_43194);
  }
  uint64_t v0 = (id *)dlsym((void *)AnnounceLibrary_sLib_43195, "kANAnnounceStateNotificationKey");
  if (v0) {
    objc_storeStrong((id *)&constantkANAnnounceStateNotificationKey, *v0);
  }
  getkANAnnounceStateNotificationKey = kANAnnounceStateNotificationKeyFunction;
}

id kANAnnounceStateNotificationKeyFunction()
{
  return (id)constantkANAnnounceStateNotificationKey;
}

BOOL AFSiriDataSharingOptInStatusChangeSourceGetIsValid(unint64_t a1)
{
  return a1 < 0xC;
}

BOOL AFSiriDataSharingOptInStatusChangeSourceGetIsValidAndSpecified(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 0xB;
}

__CFString *AFSiriDataSharingOptInStatusChangeSourceGetName(unint64_t a1)
{
  if (a1 > 0xB) {
    return @"(unknown)";
  }
  else {
    return off_1E592B7A8[a1];
  }
}

uint64_t AFSiriDataSharingOptInStatusChangeSourceGetFromName(void *a1)
{
  id v1 = a1;
  if ([v1 length])
  {
    if (AFSiriDataSharingOptInStatusChangeSourceGetFromName_onceToken != -1) {
      dispatch_once(&AFSiriDataSharingOptInStatusChangeSourceGetFromName_onceToken, &__block_literal_global_43666);
    }
    uint64_t v2 = [(id)AFSiriDataSharingOptInStatusChangeSourceGetFromName_map objectForKey:v1];
    uint64_t v3 = [v2 integerValue];
  }
  else
  {
    uint64_t v3 = 0;
  }

  return v3;
}

void __AFSiriDataSharingOptInStatusChangeSourceGetFromName_block_invoke()
{
  uint64_t v0 = (void *)AFSiriDataSharingOptInStatusChangeSourceGetFromName_map;
  AFSiriDataSharingOptInStatusChangeSourceGetFromName_map = (uint64_t)&unk_1EEE990D0;
}

BOOL AFSiriDataSharingOptInStatusGetIsValid(unint64_t a1)
{
  return a1 < 4;
}

BOOL AFSiriDataSharingOptInStatusGetIsValidAndSpecified(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 3;
}

__CFString *AFSiriDataSharingOptInStatusGetName(unint64_t a1)
{
  if (a1 > 3) {
    return @"(unknown)";
  }
  else {
    return off_1E592B870[a1];
  }
}

uint64_t AFSiriDataSharingOptInStatusGetFromName(void *a1)
{
  id v1 = a1;
  if ([v1 length])
  {
    if (AFSiriDataSharingOptInStatusGetFromName_onceToken != -1) {
      dispatch_once(&AFSiriDataSharingOptInStatusGetFromName_onceToken, &__block_literal_global_43938);
    }
    uint64_t v2 = [(id)AFSiriDataSharingOptInStatusGetFromName_map objectForKey:v1];
    uint64_t v3 = [v2 integerValue];
  }
  else
  {
    uint64_t v3 = 0;
  }

  return v3;
}

void __AFSiriDataSharingOptInStatusGetFromName_block_invoke()
{
  uint64_t v0 = (void *)AFSiriDataSharingOptInStatusGetFromName_map;
  AFSiriDataSharingOptInStatusGetFromName_map = (uint64_t)&unk_1EEE990F8;
}

BOOL AFSiriActivationEventGetIsValid(unint64_t a1)
{
  return a1 < 0x18;
}

BOOL AFSiriActivationEventGetIsValidAndSpecified(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 0x17;
}

__CFString *AFSiriActivationEventGetName(unint64_t a1)
{
  if (a1 > 0x17) {
    return @"(unknown)";
  }
  else {
    return off_1E592B890[a1];
  }
}

uint64_t AFSiriActivationEventGetFromName(void *a1)
{
  id v1 = a1;
  if ([v1 length])
  {
    if (AFSiriActivationEventGetFromName_onceToken != -1) {
      dispatch_once(&AFSiriActivationEventGetFromName_onceToken, &__block_literal_global_44030);
    }
    uint64_t v2 = [(id)AFSiriActivationEventGetFromName_map objectForKey:v1];
    uint64_t v3 = [v2 integerValue];
  }
  else
  {
    uint64_t v3 = 0;
  }

  return v3;
}

void __AFSiriActivationEventGetFromName_block_invoke()
{
  uint64_t v0 = (void *)AFSiriActivationEventGetFromName_map;
  AFSiriActivationEventGetFromName_map = (uint64_t)&unk_1EEE99120;
}

void sub_19D0A8C38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t SISchemaClientAnyEventReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 2)
      {
        uint64_t v23 = PBReaderReadData();
        uint64_t v24 = *(void **)(a1 + 8);
        *(void *)(a1 + 8) = v23;
      }
      else if ((v10 >> 3) == 1)
      {
        char v17 = 0;
        unsigned int v18 = 0;
        uint64_t v19 = 0;
        *(unsigned char *)(a1 + 20) |= 1u;
        while (1)
        {
          uint64_t v20 = *v3;
          unint64_t v21 = *(void *)(a2 + v20);
          if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
          *(void *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0) {
            goto LABEL_31;
          }
          v17 += 7;
          BOOL v14 = v18++ >= 9;
          if (v14)
          {
            LODWORD(v19) = 0;
            goto LABEL_33;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_31:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v19) = 0;
        }
LABEL_33:
        *(_DWORD *)(a1 + 16) = v19;
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void SoftBiomeLibrary_45276()
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  uint64_t v0 = (void (*)(void))getBiomeLibrarySymbolLoc_ptr_45281;
  unsigned int v9 = getBiomeLibrarySymbolLoc_ptr_45281;
  if (!getBiomeLibrarySymbolLoc_ptr_45281)
  {
    v5[0] = MEMORY[0x1E4F143A8];
    v5[1] = 3221225472;
    void v5[2] = __getBiomeLibrarySymbolLoc_block_invoke_45282;
    void v5[3] = &unk_1E592C0B0;
    void v5[4] = &v6;
    __getBiomeLibrarySymbolLoc_block_invoke_45282(v5);
    uint64_t v0 = (void (*)(void))v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (v0)
  {
    id v1 = v0();
    id v2 = v1;
  }
  else
  {
    uint64_t v3 = [MEMORY[0x1E4F28B00] currentHandler];
    id v4 = [NSString stringWithUTF8String:"id<BMRootLibrary> SoftBiomeLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"AFEvents_Internal.h", 21, @"%s", dlerror());

    __break(1u);
  }
}

void sub_19D0AE3F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getBiomeLibrarySymbolLoc_block_invoke_45282(void *a1)
{
  uint64_t v2 = BiomeLibraryLibraryCore_45290();
  if (v2)
  {
    uint64_t v3 = (void *)v2;
  }
  else
  {
    a1 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v3 = [NSString stringWithUTF8String:"void *BiomeLibraryLibrary(void)"];
    objc_msgSend(a1, "handleFailureInFunction:file:lineNumber:description:", v3, @"AFEvents_Internal.h", 20, @"%s", 0);

    __break(1u);
    free(v5);
  }
  uint64_t result = dlsym(v3, "BiomeLibrary");
  *(void *)(*(void *)(a1[4] + 8) + 24) = result;
  getBiomeLibrarySymbolLoc_ptr_45281 = *(_UNKNOWN **)(*(void *)(a1[4] + 8) + 24);
  return result;
}

uint64_t BiomeLibraryLibraryCore_45290()
{
  if (!BiomeLibraryLibraryCore_frameworkLibrary_45293) {
    BiomeLibraryLibraryCore_frameworkLibrary_45293 = _sl_dlopen();
  }
  return BiomeLibraryLibraryCore_frameworkLibrary_45293;
}

uint64_t __BiomeLibraryLibraryCore_block_invoke_45294()
{
  uint64_t result = _sl_dlopen();
  BiomeLibraryLibraryCore_frameworkLibrary_45293 = result;
  return result;
}

void sub_19D0AF2D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getBMDeviceBluetoothClass_block_invoke(uint64_t a1)
{
  BiomeLibraryLibraryCore_45290();
  Class result = objc_getClass("BMDeviceBluetooth");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getBMDeviceBluetoothClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

id initBluetoothManager()
{
  if (initBluetoothManager_sOnce != -1) {
    dispatch_once(&initBluetoothManager_sOnce, &__block_literal_global_994);
  }
  uint64_t v0 = (void *)classBluetoothManager;
  return v0;
}

Class __initBluetoothManager_block_invoke()
{
  BluetoothManagerLibrary_45420();
  Class result = objc_getClass("BluetoothManager");
  classBluetoothManager = (uint64_t)result;
  if (!result) {
    __assert_rtn("initBluetoothManager_block_invoke", "AFUtilities.m", 146, "classBluetoothManager");
  }
  getBluetoothManagerClass = BluetoothManagerFunction;
  return result;
}

void *BluetoothManagerLibrary_45420()
{
  Class result = (void *)BluetoothManagerLibrary_frameworkLibrary;
  if (!BluetoothManagerLibrary_frameworkLibrary)
  {
    Class result = dlopen("/System/Library/PrivateFrameworks/BluetoothManager.framework/BluetoothManager", 2);
    BluetoothManagerLibrary_frameworkLibrary = (uint64_t)result;
    if (!result) {
      __assert_rtn("BluetoothManagerLibrary", "AFUtilities.m", 145, "frameworkLibrary");
    }
  }
  return result;
}

id BluetoothManagerFunction()
{
  return (id)classBluetoothManager;
}

id initBluetoothPairedStatusChangedNotification()
{
  if (initBluetoothPairedStatusChangedNotification_sOnce != -1) {
    dispatch_once(&initBluetoothPairedStatusChangedNotification_sOnce, &__block_literal_global_990);
  }
  uint64_t v0 = (void *)constantBluetoothPairedStatusChangedNotification;
  return v0;
}

void __initBluetoothPairedStatusChangedNotification_block_invoke()
{
  uint64_t v0 = BluetoothManagerLibrary_45420();
  id v1 = (id *)dlsym(v0, "BluetoothPairedStatusChangedNotification");
  if (!v1) {
    __assert_rtn("initBluetoothPairedStatusChangedNotification_block_invoke", "AFUtilities.m", 148, "constant");
  }
  objc_storeStrong((id *)&constantBluetoothPairedStatusChangedNotification, *v1);
  getBluetoothPairedStatusChangedNotification = BluetoothPairedStatusChangedNotificationFunction;
}

id BluetoothPairedStatusChangedNotificationFunction()
{
  return (id)constantBluetoothPairedStatusChangedNotification;
}

id AFBundleServicesCachePath()
{
  uint64_t v0 = NSSearchPathForDirectoriesInDomains(NSCachesDirectory, 1uLL, 1);
  id v1 = [v0 firstObject];

  uint64_t v2 = [v1 stringByAppendingPathComponent:@"com.apple.siri.bundleservicecache.plist"];

  return v2;
}

id AFMobileUserBundleServicesCachePath()
{
  uint64_t v0 = NSHomeDirectoryForUser(&cfstr_Mobile.isa);
  id v1 = [v0 stringByAppendingPathComponent:@"com.apple.siri.bundleservicecache.plist"];

  return v1;
}

id AFUserSupportDirectoryPath()
{
  if (AFUserSupportDirectoryPath_once != -1) {
    dispatch_once(&AFUserSupportDirectoryPath_once, &__block_literal_global_45472);
  }
  uint64_t v0 = (void *)AFUserSupportDirectoryPath_sUserSupportDirectoryPath;
  return v0;
}

void __AFUserSupportDirectoryPath_block_invoke()
{
  CPSharedResourcesDirectory();
  id v2 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v0 = [v2 stringByAppendingPathComponent:@"Library/Assistant"];
  id v1 = (void *)AFUserSupportDirectoryPath_sUserSupportDirectoryPath;
  AFUserSupportDirectoryPath_sUserSupportDirectoryPath = v0;
}

id AFKeyboardResourcesDirectoryPath()
{
  if (AFKeyboardResourcesDirectoryPath_once != -1) {
    dispatch_once(&AFKeyboardResourcesDirectoryPath_once, &__block_literal_global_9_45477);
  }
  uint64_t v0 = (void *)AFKeyboardResourcesDirectoryPath_sKeyboardResourcesDirectoryPath;
  return v0;
}

void __AFKeyboardResourcesDirectoryPath_block_invoke()
{
  CPSharedResourcesDirectory();
  id v2 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v0 = [v2 stringByAppendingPathComponent:@"Library/Keyboard"];
  id v1 = (void *)AFKeyboardResourcesDirectoryPath_sKeyboardResourcesDirectoryPath;
  AFKeyboardResourcesDirectoryPath_sKeyboardResourcesDirectoryPath = v0;
}

__CFString *AFKeyboardLMLocaleOverride(void *a1)
{
  id v1 = a1;
  if ([v1 isEqualToString:@"zh-CN"]) {
    id v2 = @"zh-Hans";
  }
  else {
    id v2 = (__CFString *)v1;
  }

  return v2;
}

id AFSupportBaseURL()
{
  if (AFSupportBaseURL_once != -1) {
    dispatch_once(&AFSupportBaseURL_once, &__block_literal_global_20_45488);
  }
  uint64_t v0 = (void *)AFSupportBaseURL_sSupportBaseURL;
  return v0;
}

void __AFSupportBaseURL_block_invoke()
{
  uint64_t v0 = CPSystemRootDirectory();
  id v3 = [v0 stringByAppendingPathComponent:@"System/Library/Assistant"];

  uint64_t v1 = [objc_alloc(MEMORY[0x1E4F1CB10]) initFileURLWithPath:v3 isDirectory:1];
  id v2 = (void *)AFSupportBaseURL_sSupportBaseURL;
  AFSupportBaseURL_sSupportBaseURL = v1;
}

id AFServicePluginsURL()
{
  uint64_t v0 = AFSupportBaseURL();
  uint64_t v1 = [v0 URLByAppendingPathComponent:@"Plugins"];

  return v1;
}

id AFPresentationPluginsURL()
{
  uint64_t v0 = AFSupportBaseURL();
  uint64_t v1 = [v0 URLByAppendingPathComponent:@"PresentationPlugins"];

  return v1;
}

BOOL AFIsFileNotFoundError(void *a1)
{
  id v1 = a1;
  id v2 = [v1 domain];
  int v3 = [v2 isEqualToString:*MEMORY[0x1E4F281F8]];

  BOOL v4 = v3 && ([v1 code] & 0xFFFFFFFFFFFFFEFFLL) == 4;
  return v4;
}

uint64_t AFAssistantCapable()
{
  if (AFAssistantCapable_onceToken != -1) {
    dispatch_once(&AFAssistantCapable_onceToken, &__block_literal_global_59_45503);
  }
  return AFAssistantCapable_isCapable;
}

uint64_t __AFAssistantCapable_block_invoke()
{
  uint64_t result = MGGetBoolAnswer();
  AFAssistantCapable_isCapable = result;
  return result;
}

uint64_t AFIsVirtualDevice()
{
  if (AFIsVirtualDevice_onceToken != -1) {
    dispatch_once(&AFIsVirtualDevice_onceToken, &__block_literal_global_64_45508);
  }
  return AFIsVirtualDevice_isVM;
}

uint64_t __AFIsVirtualDevice_block_invoke()
{
  uint64_t result = MGGetBoolAnswer();
  AFIsVirtualDevice_isVM = result;
  return result;
}

uint64_t AFHasGreenTeaCapability()
{
  if (AFHasGreenTeaCapability_onceToken != -1) {
    dispatch_once(&AFHasGreenTeaCapability_onceToken, &__block_literal_global_69);
  }
  return AFHasGreenTeaCapability_result;
}

uint64_t __AFHasGreenTeaCapability_block_invoke()
{
  uint64_t result = MGGetBoolAnswer();
  AFHasGreenTeaCapability_uint64_t result = result;
  return result;
}

uint64_t AFIsChinaSKU()
{
  if (AFIsChinaSKU_onceToken != -1) {
    dispatch_once(&AFIsChinaSKU_onceToken, &__block_literal_global_74_45520);
  }
  return AFIsChinaSKU_isRunningOnChinaSKU;
}

void __AFIsChinaSKU_block_invoke()
{
  v3[3] = *MEMORY[0x1E4F143B8];
  if (AFHasOSEligibilityEntitlement_token != -1) {
    dispatch_once(&AFHasOSEligibilityEntitlement_token, &__block_literal_global_759);
  }
  if (AFHasOSEligibilityEntitlement_hasEntitlement)
  {
    v3[0] = 0;
    if (os_eligibility_get_domain_answer()) {
      BOOL v0 = 0;
    }
    else {
      BOOL v0 = v3[0] == 4;
    }
    char v1 = v0;
    AFIsChinaSKU_isRunningOnChinaSKU = v1;
  }
  else
  {
    id v2 = AFSiriLogContextUtility;
    if (os_log_type_enabled((os_log_t)AFSiriLogContextUtility, OS_LOG_TYPE_ERROR))
    {
      LODWORD(v3[0]) = 136315138;
      *(void *)((char *)v3 + 4) = "AFIsChinaSKU_block_invoke";
      _os_log_error_impl(&dword_19CF1D000, v2, OS_LOG_TYPE_ERROR, "%s Missing entitlements for os_eligibility lookup", (uint8_t *)v3, 0xCu);
    }
    AFIsChinaSKU_isRunningOnChinaSKU = 0;
  }
}

void __AFHasOSEligibilityEntitlement_block_invoke()
{
  AFProcessGetValueForEntitlement(@"com.apple.private.security.storage.os_eligibility.readonly");
  id v0 = (id)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    AFHasOSEligibilityEntitlement_hasEntitlement = [v0 BOOLValue];
  }
}

id AFProcessGetValueForEntitlement(void *a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  char v1 = a1;
  id v2 = SecTaskCreateFromSelf(0);
  if (v2)
  {
    int v3 = v2;
    CFErrorRef error = 0;
    BOOL v4 = (void *)SecTaskCopyValueForEntitlement(v2, v1, &error);
    CFRelease(v3);
    CFErrorRef v5 = error;
    if (error)
    {
      uint64_t v6 = AFSiriLogContextDaemon;
      if (os_log_type_enabled((os_log_t)AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        unint64_t v10 = "AFProcessGetValueForEntitlement";
        __int16 v11 = 2112;
        unint64_t v12 = v1;
        __int16 v13 = 2112;
        CFErrorRef v14 = v5;
        _os_log_error_impl(&dword_19CF1D000, v6, OS_LOG_TYPE_ERROR, "%s Failed to check if %@ entitlement is set: %@", buf, 0x20u);
        CFErrorRef v5 = error;
      }
      CFRelease(v5);
    }
  }
  else
  {
    BOOL v4 = 0;
  }

  return v4;
}

uint64_t AFHasOSEligibilityEntitlement()
{
  if (AFHasOSEligibilityEntitlement_token != -1) {
    dispatch_once(&AFHasOSEligibilityEntitlement_token, &__block_literal_global_759);
  }
  return AFHasOSEligibilityEntitlement_hasEntitlement;
}

uint64_t AFDictationCapable()
{
  if (AFDictationCapable_onceToken != -1) {
    dispatch_once(&AFDictationCapable_onceToken, &__block_literal_global_76_45529);
  }
  return AFDictationCapable_isCapable;
}

uint64_t __AFOfflineDictationCapableWithoutOverride_block_invoke()
{
  uint64_t result = MGGetBoolAnswer();
  AFOfflineDictationCapableWithoutOverride_isCapable = result;
  return result;
}

uint64_t AFOfflineDictationCapableWithoutOverride()
{
  if (AFOfflineDictationCapableWithoutOverride_onceToken != -1) {
    dispatch_once(&AFOfflineDictationCapableWithoutOverride_onceToken, &__block_literal_global_125_45536);
  }
  return AFOfflineDictationCapableWithoutOverride_isCapable;
}

uint64_t AFOfflineDictationStatusStringForVersion(uint64_t a1)
{
  return [NSString stringWithFormat:@"Version: %@", a1];
}

uint64_t AFOfflineDictationStatusStringIsHighQualityModelInstalled(void *a1, const char *a2)
{
  return [a1 hasPrefix:@"Version: HQ:"];
}

uint64_t AFOfflineDictationStatusStringIsInstalling(void *a1)
{
  id v1 = a1;
  if ([v1 hasPrefix:@"Installing"]) {
    uint64_t v2 = 1;
  }
  else {
    uint64_t v2 = [v1 hasPrefix:@"Waiting to Install"];
  }

  return v2;
}

uint64_t AFOfflineDictationStatusStringIsHighQualityModelSupported(void *a1, const char *a2)
{
  return [a1 containsString:@": HQ:"];
}

uint64_t AFOfflineDictationStatusStringIsContinuousListeningSupported(void *a1, const char *a2)
{
  return [a1 containsString:@": CL:"];
}

uint64_t AFOfflineDictationStatusStringIsOnDeviceSearchSupported(void *a1, const char *a2)
{
  return [a1 containsString:@": DS:"];
}

uint64_t AFOfflineDictationStatusStringIsAutoPunctuationSupported(void *a1, const char *a2)
{
  return [a1 containsString:@": AP:"];
}

uint64_t AFOfflineDictationStatusStringIsEmojiRecognitionSupported(void *a1, const char *a2)
{
  return [a1 containsString:@": ER:"];
}

uint64_t AFOfflineDictationStatusStringIsVoiceCommandsSupported(void *a1, const char *a2)
{
  return [a1 containsString:@": VC:"];
}

id AFOfflineDictationStatusStringAssetId(void *a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  id v1 = objc_msgSend(a1, "componentsSeparatedByString:", @":", 0);
  uint64_t v2 = [v1 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v4 = *(void *)v10;
    while (2)
    {
      for (uint64_t i = 0; i != v3; ++i)
      {
        if (*(void *)v10 != v4) {
          objc_enumerationMutation(v1);
        }
        uint64_t v6 = *(void **)(*((void *)&v9 + 1) + 8 * i);
        if ([v6 hasPrefix:@" AssetId="])
        {
          uint64_t v7 = [v6 stringByReplacingOccurrencesOfString:@" AssetId=" withString:&stru_1EEE35D28];
          goto LABEL_11;
        }
      }
      uint64_t v3 = [v1 countByEnumeratingWithState:&v9 objects:v13 count:16];
      if (v3) {
        continue;
      }
      break;
    }
  }
  uint64_t v7 = 0;
LABEL_11:

  return v7;
}

BOOL AFMontaraRestricted()
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v0 = AFSiriLogContextUtility;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextUtility, OS_LOG_TYPE_DEBUG))
  {
    int v10 = 136315138;
    long long v11 = "AFMontaraRestricted";
    _os_log_debug_impl(&dword_19CF1D000, v0, OS_LOG_TYPE_DEBUG, "%s #Montara", (uint8_t *)&v10, 0xCu);
  }
  id v1 = [MEMORY[0x1E4F74230] sharedConnection];
  char v2 = [v1 isMontaraAllowed];

  if (v2)
  {
    BOOL v3 = +[AFFamilyCircleStatusManager isChildAccount];
    uint64_t v4 = AFSiriLogContextUtility;
    if (os_log_type_enabled((os_log_t)AFSiriLogContextUtility, OS_LOG_TYPE_DEBUG))
    {
      int v10 = 136315650;
      long long v11 = "AFMontaraRestricted";
      __int16 v12 = 1024;
      int v13 = 0;
      __int16 v14 = 1024;
      BOOL v15 = v3;
      CFErrorRef v5 = "%s #Montara restrictions, mdm: %d, child: %d";
      uint64_t v6 = v4;
      uint32_t v7 = 24;
LABEL_9:
      _os_log_debug_impl(&dword_19CF1D000, v6, OS_LOG_TYPE_DEBUG, v5, (uint8_t *)&v10, v7);
    }
  }
  else
  {
    uint64_t v8 = AFSiriLogContextUtility;
    BOOL v3 = 1;
    if (os_log_type_enabled((os_log_t)AFSiriLogContextUtility, OS_LOG_TYPE_DEBUG))
    {
      int v10 = 136315394;
      long long v11 = "AFMontaraRestricted";
      __int16 v12 = 1024;
      int v13 = 1;
      CFErrorRef v5 = "%s #Montara restrictions, mdm: %d, child: skipped";
      uint64_t v6 = v8;
      uint32_t v7 = 18;
      goto LABEL_9;
    }
  }
  return v3;
}

BOOL AFDiagnosticsSubmissionAllowed()
{
  id v0 = [MEMORY[0x1E4F74230] sharedConnection];
  BOOL v1 = [v0 effectiveBoolValueForSetting:*MEMORY[0x1E4F73FB8]] == 1;

  return v1;
}

uint64_t AFShouldRunDESRecording(char a1)
{
  uint64_t result = AFDiagnosticsSubmissionAllowed();
  if (result)
  {
    uint64_t result = AFOfflineDictationCapable();
    if (result)
    {
      if ((a1 & 1) == 0)
      {
        if (AFIsInternalInstall_onceToken != -1) {
          dispatch_once(&AFIsInternalInstall_onceToken, &__block_literal_global_158);
        }
        if (AFIsInternalInstall_isInternal) {
          uint32_t v3 = 2;
        }
        else {
          uint32_t v3 = 100;
        }
        return arc4random_uniform(v3) == 0;
      }
    }
  }
  return result;
}

uint64_t __AFIsInternalInstall_block_invoke()
{
  uint64_t result = os_variant_has_internal_diagnostics();
  AFIsInternalInstall_isInternal = result;
  return result;
}

uint64_t AFIsInternalInstall()
{
  if (AFIsInternalInstall_onceToken != -1) {
    dispatch_once(&AFIsInternalInstall_onceToken, &__block_literal_global_158);
  }
  return AFIsInternalInstall_isInternal;
}

uint64_t initMKBDeviceUnlockedSinceBoot()
{
  id v0 = MobileKeyBagLibrary();
  BOOL v1 = (uint64_t (*)())dlsym(v0, "MKBDeviceUnlockedSinceBoot");
  softLinkMKBDeviceUnlockedSinceBoot = v1;
  if (!v1) {
    __assert_rtn("initMKBDeviceUnlockedSinceBoot", "AFUtilities.m", 106, "softLinkMKBDeviceUnlockedSinceBoot");
  }
  return v1();
}

void *MobileKeyBagLibrary()
{
  uint64_t result = (void *)MobileKeyBagLibrary_frameworkLibrary;
  if (!MobileKeyBagLibrary_frameworkLibrary)
  {
    uint64_t result = dlopen("/System/Library/PrivateFrameworks/MobileKeyBag.framework/MobileKeyBag", 2);
    MobileKeyBagLibrary_frameworkLibrary = (uint64_t)result;
    if (!result) {
      __assert_rtn("MobileKeyBagLibrary", "AFUtilities.m", 105, "frameworkLibrary");
    }
  }
  return result;
}

BOOL AFIsDeviceUnlocked()
{
  return softLinkMKBGetDeviceLockState(0) == 3 || softLinkMKBGetDeviceLockState(0) == 0;
}

uint64_t initMKBGetDeviceLockState(uint64_t a1)
{
  char v2 = MobileKeyBagLibrary();
  uint32_t v3 = (uint64_t (*)())dlsym(v2, "MKBGetDeviceLockState");
  softLinkMKBGetDeviceLockState = v3;
  if (!v3) {
    __assert_rtn("initMKBGetDeviceLockState", "AFUtilities.m", 107, "softLinkMKBGetDeviceLockState");
  }
  return ((uint64_t (*)(uint64_t))v3)(a1);
}

id AFCurrentUserInterfaceIdiom()
{
  if (AFIsHorseman_onceToken != -1) {
    dispatch_once(&AFIsHorseman_onceToken, &__block_literal_global_220_45602);
  }
  if (AFIsHorseman_isHorseman)
  {
    id v0 = (id *)MEMORY[0x1E4F97880];
  }
  else
  {
    if (AFIsPad_onceToken != -1) {
      dispatch_once(&AFIsPad_onceToken, &__block_literal_global_208);
    }
    if (AFIsPad_isPad) {
      id v0 = (id *)MEMORY[0x1E4F97888];
    }
    else {
      id v0 = (id *)MEMORY[0x1E4F97890];
    }
  }
  id v1 = *v0;
  return v1;
}

uint64_t __AFIsPad_block_invoke()
{
  uint64_t result = MGGetBoolAnswer();
  AFIsPad_isPad = result;
  return result;
}

uint64_t AFIsHorseman()
{
  if (AFIsHorseman_onceToken != -1) {
    dispatch_once(&AFIsHorseman_onceToken, &__block_literal_global_220_45602);
  }
  return AFIsHorseman_isHorseman;
}

uint64_t AFIsPad()
{
  if (AFIsPad_onceToken != -1) {
    dispatch_once(&AFIsPad_onceToken, &__block_literal_global_208);
  }
  return AFIsPad_isPad;
}

uint64_t AFIsATV()
{
  return 0;
}

id AFDeviceName()
{
  id v0 = (void *)MGCopyAnswer();
  return v0;
}

id AFUserAssignedDeviceName()
{
  id v0 = (void *)MGCopyAnswer();
  return v0;
}

id AFProductName()
{
  id v0 = (void *)MGCopyAnswer();
  return v0;
}

id AFProductType()
{
  id v0 = (void *)MGCopyAnswer();
  return v0;
}

id AFProductTypeForInstrumentation()
{
  id v0 = (void *)MGCopyAnswer();
  return v0;
}

id AFBuildVersion()
{
  id v0 = (void *)MGCopyAnswer();
  return v0;
}

id AFProductVersion()
{
  id v0 = (void *)MGCopyAnswer();
  return v0;
}

id AFHardwareTarget()
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  size_t v8 = 64;
  int v0 = sysctlbyname("hw.target", v13, &v8, 0, 0);
  if (v0)
  {
    int v1 = v0;
    char v2 = (void *)AFSiriLogContextUtility;
    if (os_log_type_enabled((os_log_t)AFSiriLogContextUtility, OS_LOG_TYPE_ERROR))
    {
      uint64_t v6 = v2;
      uint32_t v7 = strerror(v1);
      *(_DWORD *)buf = 136315394;
      int v10 = "AFHardwareTarget";
      __int16 v11 = 2080;
      __int16 v12 = v7;
      _os_log_error_impl(&dword_19CF1D000, v6, OS_LOG_TYPE_ERROR, "%s Failed getting hw.target with sysctlbyname() %s", buf, 0x16u);
    }
    uint32_t v3 = 0;
  }
  else
  {
    size_t v4 = v8;
    if (v8 >= 0x3F) {
      size_t v4 = 63;
    }
    v13[v4] = 0;
    uint32_t v3 = [NSString stringWithCString:v13 encoding:30];
  }
  return v3;
}

id AFModelNumber()
{
  int v0 = (void *)MGCopyAnswer();
  return v0;
}

id AFModelForDailyStatus()
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t v0 = MGCopyAnswer();
  if (v0)
  {
    int v1 = (void *)v0;
    char v2 = AFSiriLogContextUtility;
    if (!os_log_type_enabled((os_log_t)AFSiriLogContextUtility, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_5;
    }
    int v5 = 136315394;
    uint64_t v6 = "AFModelForDailyStatus";
    __int16 v7 = 2112;
    size_t v8 = v1;
    uint32_t v3 = "%s ModelNumber returned by MobileGestalt: %@";
  }
  else
  {
    int v1 = AFHardwareTarget();
    char v2 = AFSiriLogContextUtility;
    if (!os_log_type_enabled((os_log_t)AFSiriLogContextUtility, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_5;
    }
    int v5 = 136315394;
    uint64_t v6 = "AFModelForDailyStatus";
    __int16 v7 = 2112;
    size_t v8 = v1;
    uint32_t v3 = "%s MobileGestalt not available. Using sysctlbyname() as fallback. ModelNumber returned: %@";
  }
  _os_log_debug_impl(&dword_19CF1D000, v2, OS_LOG_TYPE_DEBUG, v3, (uint8_t *)&v5, 0x16u);
LABEL_5:
  return v1;
}

id AFRegionInfo()
{
  uint64_t v0 = (void *)MGCopyAnswer();
  return v0;
}

uint64_t AFIsPPT()
{
  if (AFIsPPT___once != -1) {
    dispatch_once(&AFIsPPT___once, &__block_literal_global_161_45656);
  }
  return AFIsPPT_isPPTDevice;
}

void __AFIsPPT_block_invoke()
{
  uint64_t v0 = NSSearchPathForDirectoriesInDomains(NSLibraryDirectory, 1uLL, 1);
  id v3 = [v0 firstObject];

  int v1 = [v3 stringByAppendingPathComponent:@"PPTDevice"];
  char v2 = [MEMORY[0x1E4F28CB8] defaultManager];
  AFIsPPT_isPPTDevice = [v2 fileExistsAtPath:v1];
}

BOOL AFIsCustomerInstallOrPPT()
{
  if (AFIsPPT___once != -1) {
    dispatch_once(&AFIsPPT___once, &__block_literal_global_161_45656);
  }
  if (AFIsPPT_isPPTDevice) {
    return 1;
  }
  if (AFIsInternalInstall_onceToken != -1) {
    dispatch_once(&AFIsInternalInstall_onceToken, &__block_literal_global_158);
  }
  return AFIsInternalInstall_isInternal == 0;
}

uint64_t AFHasCellularData()
{
  return MGGetBoolAnswer();
}

uint64_t AFHasBaseband()
{
  return MGGetBoolAnswer();
}

uint64_t AFHasCellularTelephony()
{
  return MGGetBoolAnswer();
}

uint64_t AFHasPearlCameraCapability()
{
  if (AFHasPearlCameraCapability_onceToken != -1) {
    dispatch_once(&AFHasPearlCameraCapability_onceToken, &__block_literal_global_176_45674);
  }
  return AFHasPearlCameraCapability_hasPearlCameraCapability;
}

uint64_t __AFHasPearlCameraCapability_block_invoke()
{
  uint64_t result = MGGetBoolAnswer();
  AFHasPearlCameraCapability_hasPearlCameraCapability = result;
  return result;
}

uint64_t AFAccessibilitySupportsAttentionAwareFeatures()
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t v0 = softLink_AXSAttentionAwarenessFeaturesEnabled();
  int v1 = (void *)AFSiriLogContextUtility;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextUtility, OS_LOG_TYPE_DEBUG))
  {
    id v3 = (void *)MEMORY[0x1E4F28ED0];
    size_t v4 = v1;
    int v5 = [v3 numberWithBool:v0];
    int v6 = 136315394;
    __int16 v7 = "AFAccessibilitySupportsAttentionAwareFeatures";
    __int16 v8 = 2112;
    uint64_t v9 = v5;
    _os_log_debug_impl(&dword_19CF1D000, v4, OS_LOG_TYPE_DEBUG, "%s #myriad _AXSAttentionAwarenessFeaturesEnabled %@", (uint8_t *)&v6, 0x16u);
  }
  return v0;
}

uint64_t init_AXSAttentionAwarenessFeaturesEnabled()
{
  uint64_t v0 = (void *)AccessibilityLibrary_frameworkLibrary;
  if (!AccessibilityLibrary_frameworkLibrary)
  {
    uint64_t v0 = dlopen("/System/Library/Frameworks/Accessibility.framework/Accessibility", 2);
    AccessibilityLibrary_frameworkLibrary = (uint64_t)v0;
    if (!v0) {
      __assert_rtn("AccessibilityLibrary", "AFUtilities.m", 48, "frameworkLibrary");
    }
  }
  int v1 = (uint64_t (*)())dlsym(v0, "_AXSAttentionAwarenessFeaturesEnabled");
  softLink_AXSAttentionAwarenessFeaturesEnabled = v1;
  if (!v1) {
    __assert_rtn("init_AXSAttentionAwarenessFeaturesEnabled", "AFUtilities.m", 49, "softLink_AXSAttentionAwarenessFeaturesEnabled");
  }
  return v1();
}

uint64_t AFCanProxyTelephony()
{
  return 1;
}

uint64_t AFIsATVOnly()
{
  return 0;
}

BOOL AFSupportsVibration()
{
  if (AFHasHapticEngine_onceToken != -1) {
    dispatch_once(&AFHasHapticEngine_onceToken, &__block_literal_global_187);
  }
  if (AFHasHapticEngine_hasHapticEngine) {
    return 1;
  }
  if (AFSupportsVibration_onceToken != -1) {
    dispatch_once(&AFSupportsVibration_onceToken, &__block_literal_global_182_45688);
  }
  return AFSupportsVibration_supportsVibration != 0;
}

uint64_t __AFSupportsVibration_block_invoke()
{
  uint64_t result = MGGetBoolAnswer();
  AFSupportsVibration_supportsVibration = result;
  return result;
}

uint64_t __AFHasHapticEngine_block_invoke()
{
  uint64_t result = MGGetBoolAnswer();
  AFHasHapticEngine_hasHapticEngine = result;
  return result;
}

uint64_t AFHasHapticEngine()
{
  if (AFHasHapticEngine_onceToken != -1) {
    dispatch_once(&AFHasHapticEngine_onceToken, &__block_literal_global_187);
  }
  return AFHasHapticEngine_hasHapticEngine;
}

BOOL AFHasRingerSwitch()
{
  if (AFHasRingerSwitch_onceToken != -1) {
    dispatch_once(&AFHasRingerSwitch_onceToken, &__block_literal_global_192_45698);
  }
  if (AFHasRingerSwitch_hasRingerSwitch) {
    return 1;
  }
  if (AFHasRingerButton_onceToken != -1) {
    dispatch_once(&AFHasRingerButton_onceToken, &__block_literal_global_197_45699);
  }
  return AFHasRingerButton_hasRingerButton != 0;
}

uint64_t __AFHasRingerButton_block_invoke()
{
  uint64_t result = MGGetBoolAnswer();
  AFHasRingerButton_hasRingerButton = result;
  return result;
}

uint64_t __AFHasRingerSwitch_block_invoke()
{
  uint64_t result = MGGetBoolAnswer();
  AFHasRingerSwitch_hasRingerSwitch = result;
  return result;
}

uint64_t AFHasRingerButton()
{
  if (AFHasRingerButton_onceToken != -1) {
    dispatch_once(&AFHasRingerButton_onceToken, &__block_literal_global_197_45699);
  }
  return AFHasRingerButton_hasRingerButton;
}

uint64_t AFSupportsSiriSpeaks()
{
  return 0;
}

uint64_t AFHasGPS()
{
  return MGGetBoolAnswer();
}

uint64_t AFSupportsWAPI()
{
  return MGGetBoolAnswer();
}

uint64_t AFSupportsWatchListKit()
{
  return 0;
}

uint64_t AFIsIPod()
{
  if (AFIsIPod_onceToken != -1) {
    dispatch_once(&AFIsIPod_onceToken, &__block_literal_global_213);
  }
  return AFIsIPod_isIPod;
}

uint64_t __AFIsIPod_block_invoke()
{
  uint64_t result = MGGetSInt32Answer();
  AFIsIPod_isIPod = result == 2;
  return result;
}

uint64_t AFIsIPad()
{
  if (AFIsIPad_onceToken != -1) {
    dispatch_once(&AFIsIPad_onceToken, &__block_literal_global_218);
  }
  return AFIsIPad_isIPad;
}

uint64_t __AFIsIPad_block_invoke()
{
  uint64_t result = MGGetSInt32Answer();
  AFIsIPad_isIPad = result == 3;
  return result;
}

uint64_t AFIsIOS()
{
  return 1;
}

uint64_t AFIsUODCapableHorsemanDevice()
{
  return 0;
}

uint64_t AFIsUODCapableZeusDevice()
{
  return 0;
}

uint64_t AFIsHybridUODCapableZeusDevice()
{
  return 0;
}

uint64_t AFIsUODEnabledByDefaultDevice()
{
  return 0;
}

uint64_t AFIsUODCapableTVOSDevice()
{
  return 0;
}

uint64_t AFIsUODCapableWatchOSDevice()
{
  return 0;
}

uint64_t AFIsUODCapableMacOSDevice()
{
  return 0;
}

BOOL AFCDAFaceDetection()
{
  if (!+[AFFeatureFlags isCDAFaceDetectionEnabled]) {
    return 0;
  }
  if (AFHasPearlCameraCapability_onceToken != -1) {
    dispatch_once(&AFHasPearlCameraCapability_onceToken, &__block_literal_global_176_45674);
  }
  return AFHasPearlCameraCapability_hasPearlCameraCapability != 0;
}

uint64_t AFSupportsSCDAFramework()
{
  if (AFSupportsSCDAFramework_onceToken != -1) {
    dispatch_once(&AFSupportsSCDAFramework_onceToken, &__block_literal_global_226);
  }
  return AFSupportsSCDAFramework_scdaFrameworkEnabled;
}

BOOL __AFSupportsSCDAFramework_block_invoke()
{
  BOOL result = +[AFFeatureFlags isSCDAFrameworkEnabled];
  AFSupportsSCDAFramework_scdaFrameworkEnabled = result;
  return result;
}

uint64_t AFSupportsSCDAProximity()
{
  if (AFSupportsSCDAProximity_onceToken != -1) {
    dispatch_once(&AFSupportsSCDAProximity_onceToken, &__block_literal_global_228);
  }
  return AFSupportsSCDAProximity_scdaProximityEnabled;
}

BOOL __AFSupportsSCDAProximity_block_invoke()
{
  BOOL result = +[AFFeatureFlags isSCDAFrameworkEnabled];
  AFSupportsSCDAProximity_scdaProximityEnabled = result;
  return result;
}

BOOL AFMyriadEmitSelfMetrics()
{
  return +[AFFeatureFlags isMyriadSelfMetricsEnabled];
}

uint64_t AFMyriadEmitClassicMetrics()
{
  return +[AFFeatureFlags isMyriadSelfMetricsEnabled] ^ 1;
}

uint64_t AFSupportsPairedDevice()
{
  if (AFSupportsPairedDevice_onceToken != -1) {
    dispatch_once(&AFSupportsPairedDevice_onceToken, &__block_literal_global_230);
  }
  return AFSupportsPairedDevice_supportsPairedDevice;
}

uint64_t __AFSupportsPairedDevice_block_invoke()
{
  uint64_t result = MGGetBoolAnswer();
  AFSupportsPairedDevice_supportsPairedDevice = result;
  return result;
}

uint64_t AFSupportsAirPlayEndpointRoute()
{
  if (AFIsHorseman_onceToken != -1) {
    dispatch_once(&AFIsHorseman_onceToken, &__block_literal_global_220_45602);
  }
  return AFIsHorseman_isHorseman;
}

BOOL AFSupportsPlayThisOnThat()
{
  if (AFIsHorseman_onceToken != -1) {
    dispatch_once(&AFIsHorseman_onceToken, &__block_literal_global_220_45602);
  }
  return AFIsHorseman_isHorseman == 0;
}

uint64_t AFSupportsPlayThisOnThatPlayback()
{
  return 0;
}

uint64_t AFSupportsMultiUser()
{
  if (AFIsHorseman_onceToken != -1) {
    dispatch_once(&AFIsHorseman_onceToken, &__block_literal_global_220_45602);
  }
  return AFIsHorseman_isHorseman;
}

uint64_t AFIsMultiUserCompanion()
{
  return 1;
}

uint64_t AFSupportsWirelessSplitter()
{
  if (AFSupportsWirelessSplitter_onceToken != -1) {
    dispatch_once(&AFSupportsWirelessSplitter_onceToken, &__block_literal_global_235);
  }
  return AFSupportsWirelessSplitter_supportsWirelessSplitter;
}

uint64_t __AFSupportsWirelessSplitter_block_invoke()
{
  uint64_t result = MGGetBoolAnswer();
  AFSupportsWirelessSplitter_supportsWirelessSplitter = result;
  return result;
}

uint64_t AFSupportsSpeechExtraction()
{
  return 1;
}

uint64_t AFDeviceHighestLanguageModelCapabilityIdentifier()
{
  if (AFDeviceHighestLanguageModelCapabilityIdentifier_onceToken != -1) {
    dispatch_once(&AFDeviceHighestLanguageModelCapabilityIdentifier_onceToken, &__block_literal_global_705);
  }
  if (AFDeviceHighestLanguageModelCapabilityIdentifier_deviceHighestCapabilityIdentifier) {
    return 10;
  }
  else {
    return 0;
  }
}

uint64_t AFDeviceSupportsOnDeviceDictation()
{
  if (AFDeviceHighestLanguageModelCapabilityIdentifier_onceToken != -1) {
    dispatch_once(&AFDeviceHighestLanguageModelCapabilityIdentifier_onceToken, &__block_literal_global_705);
  }
  return AFDeviceHighestLanguageModelCapabilityIdentifier_deviceHighestCapabilityIdentifier;
}

uint64_t AFIsGoldLocale(void *a1)
{
  uint64_t v1 = AFIsGoldLocale_once;
  id v2 = a1;
  if (v1 != -1) {
    dispatch_once(&AFIsGoldLocale_once, &__block_literal_global_240_45747);
  }
  uint64_t v3 = [(id)AFIsGoldLocale_goldLocales containsObject:v2];

  return v3;
}

void __AFIsGoldLocale_block_invoke()
{
  objc_msgSend(MEMORY[0x1E4F1CAD0], "setWithObjects:", @"ar-SA", @"de-DE", @"en-AU", @"en-CA", @"en-GB", @"en-IN", @"en-SG", @"en-US", @"es-ES", @"es-MX", @"es-US", @"fr-FR", @"it-IT", @"ja-JP", @"ko-KR", @"ru-RU", @"tr-TR",
    @"yue-CN",
    @"zh-CN",
    @"zh-HK",
    @"zh-TW",
  uint64_t v0 = 0);
  uint64_t v1 = (void *)AFIsGoldLocale_goldLocales;
  AFIsGoldLocale_goldLocales = v0;
}

uint64_t AFIsVisionBuiltInLocale(void *a1)
{
  uint64_t v1 = AFIsVisionBuiltInLocale_once;
  id v2 = a1;
  if (v1 != -1) {
    dispatch_once(&AFIsVisionBuiltInLocale_once, &__block_literal_global_303);
  }
  uint64_t v3 = [(id)AFIsVisionBuiltInLocale_builtInLocales containsObject:v2];

  return v3;
}

void __AFIsVisionBuiltInLocale_block_invoke()
{
  uint64_t v0 = (void *)MEMORY[0x1E4F1CAD0];
  _AFPreferencesBuiltInVisionLanguages();
  id v3 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v1 = [v0 setWithArray:v3];
  id v2 = (void *)AFIsVisionBuiltInLocale_builtInLocales;
  AFIsVisionBuiltInLocale_builtInLocales = v1;
}

uint64_t AFIsTop41Locale(void *a1)
{
  id v1 = a1;
  id v2 = _AFTop41Locales();
  uint64_t v3 = [v2 containsObject:v1];

  return v3;
}

id _AFTop41Locales()
{
  if (_AFTop41Locales_once != -1) {
    dispatch_once(&_AFTop41Locales_once, &__block_literal_global_886);
  }
  uint64_t v0 = (void *)_AFTop41Locales_top41Locales;
  return v0;
}

id _AFTop13Locales()
{
  if (_AFTop13Locales_once != -1) {
    dispatch_once(&_AFTop13Locales_once, &__block_literal_global_912);
  }
  uint64_t v0 = (void *)_AFTop13Locales_top13Locales;
  return v0;
}

uint64_t AFShouldRunAsrOnServerForUODLanguage(void *a1)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (AFDeviceSupportsHybridUOD())
  {
    id v2 = (void *)MGCopyAnswer();
    if (v2)
    {
      if (v1)
      {
        if (+[AFFeatureFlags isAsrOnServerForUODEnabled])
        {
          if (+[AFFeatureFlags forceAsrOnServerForUOD])
          {
            uint64_t v3 = AFSiriLogContextDaemon;
            uint64_t v4 = 1;
            if (os_log_type_enabled((os_log_t)AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 136315138;
              uint64_t v14 = "AFShouldRunAsrOnServerForUODLanguage";
              _os_log_impl(&dword_19CF1D000, v3, OS_LOG_TYPE_INFO, "%s #AsrOnServer Forcing Hybrid UOD mode to true.", buf, 0xCu);
            }
          }
          else
          {
            block[0] = MEMORY[0x1E4F143A8];
            block[1] = 3221225472;
            block[2] = __AFShouldRunAsrOnServerForUODLanguage_block_invoke;
            block[3] = &unk_1E592C678;
            id v8 = v1;
            id v12 = v8;
            if (AFShouldRunAsrOnServerForUODLanguage_once != -1) {
              dispatch_once(&AFShouldRunAsrOnServerForUODLanguage_once, block);
            }
            if (AFDeviceSupportsSiriUOD()
              && [(id)AFShouldRunAsrOnServerForUODLanguage_supportedLanguageCodesForFullUOD containsObject:v8])
            {
              uint64_t v9 = AFSiriLogContextDaemon;
              if (os_log_type_enabled((os_log_t)AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)buf = 136315138;
                uint64_t v14 = "AFShouldRunAsrOnServerForUODLanguage";
                _os_log_impl(&dword_19CF1D000, v9, OS_LOG_TYPE_INFO, "%s #AsrOnServer Hybrid UOD mode not supported - as Full UOD is supported.", buf, 0xCu);
              }
              uint64_t v4 = 0;
            }
            else
            {
              if ([(id)AFShouldRunAsrOnServerForUODLanguage_supportedLanguageCodesForNL containsObject:v8])
              {
                if (AFShouldRunAsrOnServerForUODLanguage_unsupportedProductTypesForNL) {
                  uint64_t v4 = [(id)AFShouldRunAsrOnServerForUODLanguage_unsupportedProductTypesForNL containsObject:v2] ^ 1;
                }
                else {
                  uint64_t v4 = 1;
                }
              }
              else
              {
                uint64_t v4 = 0;
              }
              uint64_t v10 = AFSiriLogContextDaemon;
              if (os_log_type_enabled((os_log_t)AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)buf = 136315906;
                uint64_t v14 = "AFShouldRunAsrOnServerForUODLanguage";
                __int16 v15 = 1024;
                int v16 = v4;
                __int16 v17 = 2112;
                id v18 = v8;
                __int16 v19 = 2112;
                uint64_t v20 = v2;
                _os_log_impl(&dword_19CF1D000, v10, OS_LOG_TYPE_INFO, "%s #AsrOnServer Hybrid UOD mode supported=%d for languageCode=%@ and productType=%@", buf, 0x26u);
              }
            }
          }
          goto LABEL_17;
        }
        int v5 = AFSiriLogContextDaemon;
        if (os_log_type_enabled((os_log_t)AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315138;
          uint64_t v14 = "AFShouldRunAsrOnServerForUODLanguage";
          int v6 = "%s #AsrOnServer Hybrid UOD mode not supported - uod_asr_on_server_enabled is false.";
          goto LABEL_15;
        }
LABEL_16:
        uint64_t v4 = 0;
LABEL_17:

        goto LABEL_18;
      }
      int v5 = AFSiriLogContextDaemon;
      if (!os_log_type_enabled((os_log_t)AFSiriLogContextDaemon, OS_LOG_TYPE_INFO)) {
        goto LABEL_16;
      }
      *(_DWORD *)buf = 136315138;
      uint64_t v14 = "AFShouldRunAsrOnServerForUODLanguage";
      int v6 = "%s #AsrOnServer Hybrid UOD mode not supported - languageCode is nil.";
    }
    else
    {
      int v5 = AFSiriLogContextDaemon;
      if (!os_log_type_enabled((os_log_t)AFSiriLogContextDaemon, OS_LOG_TYPE_INFO)) {
        goto LABEL_16;
      }
      *(_DWORD *)buf = 136315138;
      uint64_t v14 = "AFShouldRunAsrOnServerForUODLanguage";
      int v6 = "%s #AsrOnServer Hybrid UOD mode not supported - productType is nil.";
    }
LABEL_15:
    _os_log_impl(&dword_19CF1D000, v5, OS_LOG_TYPE_INFO, v6, buf, 0xCu);
    goto LABEL_16;
  }
  uint64_t v4 = 0;
LABEL_18:

  return v4;
}

BOOL AFDeviceSupportsHybridUOD()
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  if (AFDeviceSupportsHybridUOD_once != -1) {
    dispatch_once(&AFDeviceSupportsHybridUOD_once, &__block_literal_global_359_45868);
  }
  if (AFDeviceSupportsHybridUOD_productType
    && (objc_msgSend((id)AFDeviceSupportsHybridUOD_supportedProductTypes, "containsObject:") & 1) != 0)
  {
    return 1;
  }
  id v1 = AFSiriLogContextDaemon;
  BOOL result = os_log_type_enabled((os_log_t)AFSiriLogContextDaemon, OS_LOG_TYPE_INFO);
  if (result)
  {
    int v2 = 136315394;
    uint64_t v3 = "AFDeviceSupportsHybridUOD";
    __int16 v4 = 2112;
    uint64_t v5 = AFDeviceSupportsHybridUOD_productType;
    _os_log_impl(&dword_19CF1D000, v1, OS_LOG_TYPE_INFO, "%s #AsrOnServer For iOS, only the devices with SoC H11 or later are supported for Hybrid. AFDeviceSupportsHybridUOD = NO. productType=%@", (uint8_t *)&v2, 0x16u);
    return 0;
  }
  return result;
}

void __AFShouldRunAsrOnServerForUODLanguage_block_invoke(uint64_t a1)
{
  uint64_t v2 = _AFTop13Locales();
  uint64_t v3 = (void *)AFShouldRunAsrOnServerForUODLanguage_supportedLanguageCodesForFullUOD;
  AFShouldRunAsrOnServerForUODLanguage_supportedLanguageCodesForFullUOD = v2;

  uint64_t v4 = _AFTop41Locales();
  uint64_t v5 = (void *)AFShouldRunAsrOnServerForUODLanguage_supportedLanguageCodesForNL;
  AFShouldRunAsrOnServerForUODLanguage_supportedLanguageCodesForNL = v4;

  id v8 = [MEMORY[0x1E4F1C9E8] dictionary];
  uint64_t v6 = [v8 objectForKey:*(void *)(a1 + 32)];
  __int16 v7 = (void *)AFShouldRunAsrOnServerForUODLanguage_unsupportedProductTypesForNL;
  AFShouldRunAsrOnServerForUODLanguage_unsupportedProductTypesForNL = v6;
}

void __AFDeviceSupportsHybridUOD_block_invoke()
{
  uint64_t v0 = MGCopyAnswer();
  id v1 = (void *)AFDeviceSupportsHybridUOD_productType;
  AFDeviceSupportsHybridUOD_productType = v0;

  uint64_t v2 = objc_msgSend(MEMORY[0x1E4F1CAD0], "setWithObjects:", @"iPad7,1", @"iPad7,2", @"iPad7,3", @"iPad7,4", @"iPad7,11", @"iPad7,12", 0);
  uint64_t v3 = (void *)AFDeviceSupportsHybridUOD_supportedProductTypes;
  AFDeviceSupportsHybridUOD_supportedProductTypes = v2;
}

uint64_t AFShouldRunAsrOnServerForUOD()
{
  uint64_t v0 = +[AFPreferences sharedPreferences];
  id v1 = [v0 languageCode];

  uint64_t v2 = AFShouldRunAsrOnServerForUODLanguage(v1);
  return v2;
}

uint64_t AFIsSpeechAssetAvailableFromUodStatus(void *a1)
{
  id v1 = [a1 objectForKey:@"SPEECH"];
  uint64_t v2 = [v1 BOOLValue];

  return v2;
}

uint64_t AFIsMorphunAssetAvailableFromUodStatus(void *a1)
{
  id v1 = [a1 objectForKey:@"MORPHUN"];
  uint64_t v2 = [v1 BOOLValue];

  return v2;
}

uint64_t AFIsNLAssetAvailableFromUodStatus(void *a1)
{
  id v1 = [a1 objectForKey:@"NL"];
  uint64_t v2 = [v1 BOOLValue];

  return v2;
}

uint64_t AFIsAttentionAssetAvailableFromUodStatus(void *a1)
{
  id v1 = [a1 objectForKey:@"ATTENTION"];
  uint64_t v2 = [v1 BOOLValue];

  return v2;
}

BOOL AFUODStatusSupportedSAE(void *a1, void *a2)
{
  if (!a1 || !a2) {
    return 0;
  }
  id v3 = a1;
  uint64_t v4 = AFSAERequiredAssets(a2);
  BOOL v5 = AFAssetsAvailabilityMatchesRequiredAssets(v3, v4);

  return v5;
}

id AFSAERequiredAssets(void *a1)
{
  id v1 = AFRequiredAssetsForFullUOD(a1);
  uint64_t v2 = (void *)[v1 mutableCopy];

  [v2 addObject:@"NLROUTER"];
  id v3 = (void *)[v2 copy];

  return v3;
}

BOOL AFUODStatusSupportedHybrid(void *a1, void *a2)
{
  id v3 = a1;
  BOOL v4 = 0;
  if (v3 && a2)
  {
    id v5 = a2;
    uint64_t v6 = AFRequiredAssetsForHybridUOD();
    int v7 = AFShouldRunAsrOnServerForUODLanguage(v5);

    if (v7) {
      BOOL v4 = AFAssetsAvailabilityMatchesRequiredAssets(v3, v6);
    }
    else {
      BOOL v4 = 0;
    }
  }
  return v4;
}

id AFRequiredAssetsForHybridUOD()
{
  uint64_t v0 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CAD0]), "initWithObjects:", @"NL", @"MORPHUN", 0);
  return v0;
}

uint64_t AFSimulatorSupportsSiriUOD()
{
  if (AFSimulatorSupportsSiriUOD_onceToken != -1) {
    dispatch_once(&AFSimulatorSupportsSiriUOD_onceToken, &__block_literal_global_323);
  }
  return AFSimulatorSupportsSiriUOD_currentSimulatorSupportsUOD;
}

void __AFSimulatorSupportsSiriUOD_block_invoke()
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v0 = [MEMORY[0x1E4F28F80] processInfo];
  id v1 = [v0 environment];
  uint64_t v2 = [v1 objectForKey:@"SIMULATOR_MODEL_IDENTIFIER"];

  if (v2)
  {
    if (([v2 hasPrefix:@"iPhone11,"] & 1) != 0
      || ([v2 hasPrefix:@"iPhone12,"] & 1) != 0
      || ([v2 hasPrefix:@"iPhone13,"] & 1) != 0
      || ([v2 hasPrefix:@"iPhone14,"] & 1) != 0
      || ([v2 hasPrefix:@"iPad11,"] & 1) != 0
      || ([v2 hasPrefix:@"iPad12,"] & 1) != 0
      || ([v2 hasPrefix:@"iPad13,"] & 1) != 0)
    {
      int v3 = 1;
    }
    else
    {
      int v3 = [v2 hasPrefix:@"Watch7,"];
    }
  }
  else
  {
    int v3 = 0;
  }
  AFSimulatorSupportsSiriUOD_currentSimulatorSupportsUOD = v3;
  BOOL v4 = AFSiriLogContextDaemon;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    id v5 = @"NO";
    int v6 = 136315650;
    int v7 = "AFSimulatorSupportsSiriUOD_block_invoke";
    __int16 v8 = 2112;
    uint64_t v9 = v2;
    if (v3) {
      id v5 = @"YES";
    }
    __int16 v10 = 2112;
    __int16 v11 = v5;
    _os_log_debug_impl(&dword_19CF1D000, v4, OS_LOG_TYPE_DEBUG, "%s Current simulator device is %@, supports UoD: %@", (uint8_t *)&v6, 0x20u);
  }
}

uint64_t AFDeviceSupportsFullSiriUOD()
{
  uint64_t result = AFDeviceSupportsSiriUOD();
  if (result) {
    return AFShouldRunAsrOnServerForUOD() ^ 1;
  }
  return result;
}

uint64_t AFDeviceSupportsSiriMUX()
{
  if (AFDeviceSupportsHybridUOD() || (uint64_t result = AFDeviceSupportsSiriUOD(), result))
  {
    if (AFIsHorseman_onceToken != -1) {
      dispatch_once(&AFIsHorseman_onceToken, &__block_literal_global_220_45602);
    }
    return AFIsHorseman_isHorseman != 0;
  }
  return result;
}

BOOL AFDeviceSupportsBobble()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  BOOL v0 = +[AFFeatureFlags isBobbleEnabled];
  if (!v0)
  {
    id v1 = AFSiriLogContextDaemon;
    if (os_log_type_enabled((os_log_t)AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      int v3 = 136315138;
      BOOL v4 = "AFDeviceSupportsBobble";
      _os_log_debug_impl(&dword_19CF1D000, v1, OS_LOG_TYPE_DEBUG, "%s 🫨 Feature flag is disabled!", (uint8_t *)&v3, 0xCu);
    }
  }
  return v0;
}

uint64_t AFNanoDeviceHasDedicatedSiriResources()
{
  return 0;
}

uint64_t AFDeviceSupportsCarPlay()
{
  if (AFDeviceSupportsCarPlay_onceToken != -1) {
    dispatch_once(&AFDeviceSupportsCarPlay_onceToken, &__block_literal_global_379);
  }
  return AFDeviceSupportsCarPlay_supportsCarPlay;
}

uint64_t __AFDeviceSupportsCarPlay_block_invoke()
{
  uint64_t result = MGGetBoolAnswer();
  AFDeviceSupportsCarPlay_supportsCarPlay = result;
  return result;
}

uint64_t AFWatchOSVersion(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if (NanoRegistryLibrary_sOnce != -1) {
    dispatch_once(&NanoRegistryLibrary_sOnce, &__block_literal_global_914);
  }
  if (NanoRegistryLibrary_sLib && dlsym((void *)NanoRegistryLibrary_sLib, "NRWatchOSVersion")) {
    uint64_t v5 = softLinkNRWatchOSVersion(v3, v4);
  }
  else {
    uint64_t v5 = 0xFFFFFFFFLL;
  }

  return v5;
}

uint64_t initNRWatchOSVersion(void *a1, void *a2)
{
  uint64_t v3 = NanoRegistryLibrary_sOnce;
  id v4 = a2;
  id v5 = a1;
  if (v3 != -1) {
    dispatch_once(&NanoRegistryLibrary_sOnce, &__block_literal_global_914);
  }
  softLinkNRWatchOSVersion = (uint64_t (*)())dlsym((void *)NanoRegistryLibrary_sLib, "NRWatchOSVersion");
  uint64_t v6 = ((uint64_t (*)(id, id))softLinkNRWatchOSVersion)(v5, v4);

  return v6;
}

void *__NanoRegistryLibrary_block_invoke()
{
  uint64_t result = dlopen("/System/Library/PrivateFrameworks/NanoRegistry.framework/NanoRegistry", 2);
  NanoRegistryLibrary_sLib = (uint64_t)result;
  return result;
}

uint64_t AFWatchOSVersionIsGreaterThanOrEqual(uint64_t a1, uint64_t a2)
{
  if (a1 == -1) {
    return 0;
  }
  if (NanoRegistryLibrary_sOnce != -1) {
    dispatch_once(&NanoRegistryLibrary_sOnce, &__block_literal_global_914);
  }
  if (!NanoRegistryLibrary_sLib || !dlsym((void *)NanoRegistryLibrary_sLib, "NRVersionIsGreaterThanOrEqual")) {
    return 0;
  }
  id v4 = (uint64_t (*)(uint64_t, uint64_t))softLinkNRVersionIsGreaterThanOrEqual;
  return v4(a1, a2);
}

uint64_t initNRVersionIsGreaterThanOrEqual(uint64_t a1, uint64_t a2)
{
  if (NanoRegistryLibrary_sOnce != -1) {
    dispatch_once(&NanoRegistryLibrary_sOnce, &__block_literal_global_914);
  }
  id v4 = (uint64_t (*)())dlsym((void *)NanoRegistryLibrary_sLib, "NRVersionIsGreaterThanOrEqual");
  softLinkNRVersionIsGreaterThanOrEqual = v4;
  return ((uint64_t (*)(uint64_t, uint64_t))v4)(a1, a2);
}

double AFMainScreenScale()
{
  MGGetFloat32Answer();
  return v0;
}

id AFDeviceColor()
{
  float v0 = (void *)MGCopyAnswer();
  return v0;
}

id AFDeviceEnclosureColor()
{
  float v0 = (void *)MGCopyAnswer();
  return v0;
}

uint64_t AFDeviceEnclosureRGBColor()
{
  return MGGetSInt32Answer();
}

uint64_t AFDeviceIsVictory()
{
  return 0;
}

BOOL AFPairedDeviceIsVictory()
{
  float v0 = [getNRPairedDeviceRegistryClass() sharedInstance];
  id v1 = [v0 getActivePairedDevice];

  uint64_t v2 = getNRDevicePropertyDeviceBrand();
  uint64_t v3 = [v1 valueForProperty:v2];

  BOOL v4 = [v3 intValue] == 2;
  return v4;
}

id initNRDevicePropertyDeviceBrand()
{
  if (initNRDevicePropertyDeviceBrand_sOnce != -1) {
    dispatch_once(&initNRDevicePropertyDeviceBrand_sOnce, &__block_literal_global_921);
  }
  float v0 = (void *)constantNRDevicePropertyDeviceBrand;
  return v0;
}

void __initNRDevicePropertyDeviceBrand_block_invoke()
{
  if (NanoRegistryLibrary_sOnce != -1) {
    dispatch_once(&NanoRegistryLibrary_sOnce, &__block_literal_global_914);
  }
  float v0 = (id *)dlsym((void *)NanoRegistryLibrary_sLib, "NRDevicePropertyDeviceBrand");
  if (!v0) {
    __assert_rtn("initNRDevicePropertyDeviceBrand_block_invoke", "AFUtilities.m", 120, "constant");
  }
  objc_storeStrong((id *)&constantNRDevicePropertyDeviceBrand, *v0);
  getNRDevicePropertyDeviceBrand = NRDevicePropertyDeviceBrandFunction;
}

id NRDevicePropertyDeviceBrandFunction()
{
  return (id)constantNRDevicePropertyDeviceBrand;
}

id initNRPairedDeviceRegistry()
{
  if (initNRPairedDeviceRegistry_sOnce != -1) {
    dispatch_once(&initNRPairedDeviceRegistry_sOnce, &__block_literal_global_917);
  }
  float v0 = (void *)classNRPairedDeviceRegistry;
  return v0;
}

Class __initNRPairedDeviceRegistry_block_invoke()
{
  if (NanoRegistryLibrary_sOnce != -1) {
    dispatch_once(&NanoRegistryLibrary_sOnce, &__block_literal_global_914);
  }
  Class result = objc_getClass("NRPairedDeviceRegistry");
  classNRPairedDeviceRegistry = (uint64_t)result;
  if (!result) {
    __assert_rtn("initNRPairedDeviceRegistry_block_invoke", "AFUtilities.m", 119, "classNRPairedDeviceRegistry");
  }
  getNRPairedDeviceRegistryClass = NRPairedDeviceRegistryFunction;
  return result;
}

id NRPairedDeviceRegistryFunction()
{
  return (id)classNRPairedDeviceRegistry;
}

uint64_t AFDeviceIsTinker()
{
  float v0 = [getNRPairedDeviceRegistryClass() sharedInstance];
  id v1 = [getNRPairedDeviceRegistryClass() activeDeviceSelectorBlock];
  uint64_t v2 = [v0 getAllDevicesWithArchivedAltAccountDevicesMatching:v1];

  uint64_t v3 = [v2 firstObject];
  BOOL v4 = getNRDevicePropertyIsAltAccount();
  id v5 = [v3 valueForProperty:v4];
  uint64_t v6 = [v5 BOOLValue];

  return v6;
}

id initNRDevicePropertyIsAltAccount()
{
  if (initNRDevicePropertyIsAltAccount_sOnce != -1) {
    dispatch_once(&initNRDevicePropertyIsAltAccount_sOnce, &__block_literal_global_925);
  }
  float v0 = (void *)constantNRDevicePropertyIsAltAccount;
  return v0;
}

void __initNRDevicePropertyIsAltAccount_block_invoke()
{
  if (NanoRegistryLibrary_sOnce != -1) {
    dispatch_once(&NanoRegistryLibrary_sOnce, &__block_literal_global_914);
  }
  float v0 = (id *)dlsym((void *)NanoRegistryLibrary_sLib, "NRDevicePropertyIsAltAccount");
  if (!v0) {
    __assert_rtn("initNRDevicePropertyIsAltAccount_block_invoke", "AFUtilities.m", 121, "constant");
  }
  objc_storeStrong((id *)&constantNRDevicePropertyIsAltAccount, *v0);
  getNRDevicePropertyIsAltAccount = NRDevicePropertyIsAltAccountFunction;
}

id NRDevicePropertyIsAltAccountFunction()
{
  return (id)constantNRDevicePropertyIsAltAccount;
}

void (__cdecl *AFInstallCommonSignalHandlers())(int)
{
  signal(15, (void (__cdecl *)(int))_AFHandleSignalByExitingCleanly);
  Class result = (void (__cdecl *)(int))AFEnableCrashTrappingTTRs();
  if (result)
  {
    signal(6, (void (__cdecl *)(int))_AFHandleSignalByFilingIssue);
    signal(10, (void (__cdecl *)(int))_AFHandleSignalByFilingIssue);
    return signal(11, (void (__cdecl *)(int))_AFHandleSignalByFilingIssue);
  }
  return result;
}

BOOL AFEnableCrashTrappingTTRs()
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = 0;
  id v5 = &v4;
  uint64_t v6 = 0x2020000000;
  char v7 = 0;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __AFEnableCrashTrappingTTRs_block_invoke;
  block[3] = &unk_1E592C0B0;
  void block[4] = &v4;
  if (AFEnableCrashTrappingTTRs_onceToken != -1) {
    dispatch_once(&AFEnableCrashTrappingTTRs_onceToken, block);
  }
  if (*((unsigned char *)v5 + 24))
  {
    float v0 = AFSiriLogContextUtility;
    BOOL v1 = 1;
    if (os_log_type_enabled((os_log_t)AFSiriLogContextUtility, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315138;
      uint64_t v9 = "AFEnableCrashTrappingTTRs";
      _os_log_impl(&dword_19CF1D000, v0, OS_LOG_TYPE_INFO, "%s Crash trapping TTRs has been enabled", buf, 0xCu);
      BOOL v1 = *((unsigned char *)v5 + 24) != 0;
    }
  }
  else
  {
    BOOL v1 = 0;
  }
  _Block_object_dispose(&v4, 8);
  return v1;
}

void _AFHandleSignalByFilingIssue(int a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = AFSiriLogContextUtility;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextUtility, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    int v13 = "_AFHandleSignalByFilingIssue";
    __int16 v14 = 2048;
    uint64_t v15 = MEMORY[0x1E4F14A48];
    _os_log_impl(&dword_19CF1D000, v2, OS_LOG_TYPE_INFO, "%s Got signal %ld, filing radar", buf, 0x16u);
  }
  dispatch_semaphore_t v3 = dispatch_semaphore_create(0);
  uint64_t v4 = objc_alloc_init(AFSettingsConnection);
  id v5 = [MEMORY[0x1E4F28F80] processInfo];
  uint64_t v6 = [v5 processName];
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  void v10[2] = ___AFHandleSignalByFilingIssue_block_invoke;
  v10[3] = &unk_1E592C248;
  char v7 = v3;
  __int16 v11 = v7;
  [(AFSettingsConnection *)v4 createRadarForCrashWithReason:@"crash_trap" process:v6 completion:v10];

  dispatch_time_t v8 = dispatch_time(0, 5000000000);
  if (dispatch_semaphore_wait(v7, v8))
  {
    uint64_t v9 = AFSiriLogContextUtility;
    if (os_log_type_enabled((os_log_t)AFSiriLogContextUtility, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      int v13 = "_AFHandleSignalByFilingIssue";
      _os_log_error_impl(&dword_19CF1D000, v9, OS_LOG_TYPE_ERROR, "%s Timed out waiting for radar to launch", buf, 0xCu);
    }
  }
  signal(a1, 0);
  raise(a1);
}

void __AFEnableCrashTrappingTTRs_block_invoke(uint64_t a1)
{
  id v2 = (id)[objc_alloc(MEMORY[0x1E4F1CB18]) initWithSuiteName:@"com.apple.assistant"];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = [v2 BOOLForKey:@"EnableCrashTrapTTR"];
}

uint64_t _AFHandleSignalByExitingCleanly(int a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  id v2 = AFSiriLogContextUtility;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextUtility, OS_LOG_TYPE_INFO))
  {
    int v4 = 136315394;
    id v5 = "_AFHandleSignalByExitingCleanly";
    __int16 v6 = 2048;
    uint64_t v7 = a1;
    _os_log_impl(&dword_19CF1D000, v2, OS_LOG_TYPE_INFO, "%s Got signal %ld, exiting when clean", (uint8_t *)&v4, 0x16u);
  }
  return xpc_transaction_exit_clean();
}

uint64_t AFConnectionHasEntitlementCached(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  uint64_t v8 = +[AFConnectionEntitlementCache sharedCache];
  uint64_t v9 = [v5 processIdentifier];
  if (([v8 hasEntitlement:v6 forPID:v9] & 1) == 0)
  {
    uint64_t v10 = [v5 valueForEntitlement:v6];

    if (!v10)
    {
      uint64_t v11 = 0;
      goto LABEL_6;
    }
    [v8 cacheEntitlement:v6 forPID:v9 bundleID:v7];
  }
  uint64_t v11 = 1;
LABEL_6:

  return v11;
}

id AFOutputVoiceLanguageForRecognitionLanguage(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    uint64_t v2 = [&unk_1EEE99148 objectForKey:v1];
    dispatch_semaphore_t v3 = (void *)v2;
    if (v2) {
      int v4 = (void *)v2;
    }
    else {
      int v4 = v1;
    }
    id v5 = v4;
  }
  else
  {
    id v5 = 0;
  }
  return v5;
}

id AFOutputVoiceLanguageForMacrolanguage(void *a1)
{
  id v1 = a1;
  if ((unint64_t)[v1 length] > 1)
  {
    dispatch_semaphore_t v3 = [v1 substringToIndex:2];
    int v4 = [&unk_1EEE99170 objectForKey:v3];

    if (v4) {
      id v5 = v4;
    }
    else {
      id v5 = v1;
    }
    id v2 = v5;
  }
  else
  {
    id v2 = v1;
  }

  return v2;
}

__CFString *AFCarouselBundleIdentifier()
{
  return @"com.apple.Carousel";
}

id AFOfflineDictationLanguageForKeyboardLanguage(void *a1, void *a2)
{
  id v3 = a2;
  int v4 = [a1 stringByReplacingOccurrencesOfString:@"_" withString:@"-"];
  if ([v3 containsObject:v4])
  {
    id v5 = v4;
  }
  else
  {
    id v6 = _AFPreferencesReplacementLanguageForLocalRecognizerLanguageCode(v4);
    id v7 = v6;
    if (v6
      && ([v6 isEqualToString:v4] & 1) == 0
      && [v3 containsObject:v7])
    {
      id v5 = v7;
    }
    else
    {
      uint64_t v8 = AFDictationLanguageForKeyboardLanguage(v4);
      if (v8 && [v3 containsObject:v8])
      {
        id v5 = v8;
      }
      else
      {
        uint64_t v9 = _AFSpecificFallbackForLanguage(v4, 0);
        if (v9 && [v3 containsObject:v9])
        {
          id v5 = v9;
        }
        else
        {
          uint64_t v10 = [v4 componentsSeparatedByString:@"-"];
          uint64_t v11 = [v10 firstObject];

          uint64_t v12 = _AFSpecificFallbackForLanguage(v4, v11);
          if (v12 && [v3 containsObject:v12]) {
            id v5 = v12;
          }
          else {
            id v5 = 0;
          }
        }
      }
    }
  }

  return v5;
}

id AFDictationLanguageForKeyboardLanguage(void *a1)
{
  id v1 = (void *)MEMORY[0x1E4F1CA20];
  id v2 = a1;
  id v3 = [v1 currentLocale];
  int v4 = [v3 countryCode];
  id v5 = +[AFPreferences sharedPreferences];
  id v6 = [v5 languageCode];
  id v7 = _AFDictationLanguageForKeyboardLanguageAndConfiguration(v2, v4, v6);

  return v7;
}

id _AFSpecificFallbackForLanguage(void *a1, void *a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  id v5 = v4;
  if (v3)
  {
    id v6 = [&unk_1EEE99198 objectForKey:v3];
    if (!v5) {
      goto LABEL_7;
    }
  }
  else
  {
    id v6 = 0;
    if (!v4) {
      goto LABEL_7;
    }
  }
  if (!v6)
  {
    id v6 = [&unk_1EEE99198 objectForKey:v5];
  }
LABEL_7:
  if (v6 && AFPreferencesLanguageIsExplicitlySupportedForDictation(v6))
  {
    id v7 = AFSiriLogContextUtility;
    if (os_log_type_enabled((os_log_t)AFSiriLogContextUtility, OS_LOG_TYPE_INFO))
    {
      int v13 = 136315650;
      __int16 v14 = "_AFSpecificFallbackForLanguage";
      __int16 v15 = 2112;
      id v16 = v6;
      __int16 v17 = 2112;
      id v18 = v3;
      _os_log_impl(&dword_19CF1D000, v7, OS_LOG_TYPE_INFO, "%s Using dictation hardcoded fallback %@ for %@", (uint8_t *)&v13, 0x20u);
    }
    goto LABEL_28;
  }

  if (AFIsInternalInstall_onceToken != -1) {
    dispatch_once(&AFIsInternalInstall_onceToken, &__block_literal_global_158);
  }
  if (!AFIsInternalInstall_isInternal)
  {
    id v6 = 0;
    goto LABEL_28;
  }
  uint64_t v8 = AFInternalConfigValueForKey(@"Language Fallbacks");
  uint64_t v9 = v8;
  if (!v3)
  {
    uint64_t v10 = 0;
    if (!v5) {
      goto LABEL_21;
    }
LABEL_19:
    if (!v10)
    {
      uint64_t v10 = [v9 objectForKey:v5];
    }
    goto LABEL_21;
  }
  uint64_t v10 = [v8 objectForKey:v3];
  if (v5) {
    goto LABEL_19;
  }
LABEL_21:
  if (v10 && AFPreferencesLanguageIsExplicitlySupportedForDictation(v10))
  {
    uint64_t v11 = AFSiriLogContextUtility;
    if (os_log_type_enabled((os_log_t)AFSiriLogContextUtility, OS_LOG_TYPE_INFO))
    {
      int v13 = 136315650;
      __int16 v14 = "_AFSpecificFallbackForLanguage";
      __int16 v15 = 2112;
      id v16 = v10;
      __int16 v17 = 2112;
      id v18 = v3;
      _os_log_impl(&dword_19CF1D000, v11, OS_LOG_TYPE_INFO, "%s Using dictation internal hardcoded fallback %@ for %@", (uint8_t *)&v13, 0x20u);
    }
    id v6 = v10;
  }
  else
  {
    id v6 = 0;
  }

LABEL_28:
  return v6;
}

id _AFDictationLanguageForKeyboardLanguageAndConfiguration(void *a1, void *a2, void *a3)
{
  uint64_t v64 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  uint64_t v8 = [v5 length];
  uint64_t v9 = AFSiriLogContextUtility;
  BOOL v10 = os_log_type_enabled((os_log_t)AFSiriLogContextUtility, OS_LOG_TYPE_INFO);
  if (v8)
  {
    if (v10)
    {
      *(_DWORD *)buf = 136315906;
      uint64_t v57 = "_AFDictationLanguageForKeyboardLanguageAndConfiguration";
      __int16 v58 = 2112;
      id v59 = v5;
      __int16 v60 = 2112;
      id v61 = v6;
      __int16 v62 = 2112;
      id v63 = v7;
      _os_log_impl(&dword_19CF1D000, v9, OS_LOG_TYPE_INFO, "%s %@ countryCode=%@ siriLanguage=%@", buf, 0x2Au);
    }
    uint64_t v11 = [v5 stringByReplacingOccurrencesOfString:@"_" withString:@"-"];
    uint64_t v12 = _AFSpecificFallbackForLanguage(v11, 0);

    if (v12)
    {
      int v13 = AFSiriLogContextUtility;
      if (os_log_type_enabled((os_log_t)AFSiriLogContextUtility, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        uint64_t v57 = "_AFDictationLanguageForKeyboardLanguageAndConfiguration";
        __int16 v58 = 2112;
        id v59 = v5;
        __int16 v60 = 2112;
        id v61 = v12;
        _os_log_impl(&dword_19CF1D000, v13, OS_LOG_TYPE_INFO, "%s %@ is specifically supported as %@", buf, 0x20u);
      }
      id v14 = v12;
    }
    else
    {
      id v16 = AFPreferencesSupportedDictationLanguagesSet();
      int v17 = [v16 containsObject:v5];

      if (!v17)
      {
        uint64_t v20 = (void *)[objc_alloc(MEMORY[0x1E4F1CA48]) initWithCapacity:3];
        uint64_t v21 = [MEMORY[0x1E4F1CA20] componentsFromLocaleIdentifier:v5];
        char v22 = (void *)[v21 mutableCopy];

        if (v22)
        {
          if (v6
            && (uint64_t v23 = *MEMORY[0x1E4F1C400],
                [v22 objectForKey:*MEMORY[0x1E4F1C400]],
                uint64_t v24 = objc_claimAutoreleasedReturnValue(),
                v24,
                !v24))
          {
            [v22 setObject:v6 forKey:v23];
            id v48 = [MEMORY[0x1E4F1CA20] localeIdentifierFromComponents:v22];
            objc_msgSend(v20, "addObject:");
          }
          else
          {
            id v48 = v5;
          }
          [v20 addObject:v5];
          uint64_t v26 = *MEMORY[0x1E4F1C438];
          long long v50 = [v22 objectForKey:*MEMORY[0x1E4F1C438]];
          if (v7)
          {
            uint64_t v27 = [MEMORY[0x1E4F1CA20] componentsFromLocaleIdentifier:v7];
            uint64_t v28 = [v27 objectForKey:v26];

            if ([v28 isEqualToString:v50]) {
              [v20 addObject:v7];
            }
          }
          int v29 = (void *)MEMORY[0x1E4F28B50];
          id v30 = AFPreferencesSupportedDictationLanguages();
          long long v49 = [v29 preferredLocalizationsFromArray:v30 forPreferences:v20];

          uint64_t v31 = AFSiriLogContextUtility;
          if (os_log_type_enabled((os_log_t)AFSiriLogContextUtility, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 136315650;
            uint64_t v57 = "_AFDictationLanguageForKeyboardLanguageAndConfiguration";
            __int16 v58 = 2112;
            id v59 = v20;
            __int16 v60 = 2112;
            id v61 = v49;
            _os_log_impl(&dword_19CF1D000, v31, OS_LOG_TYPE_INFO, "%s preferences %@ -> %@", buf, 0x20u);
          }
          if (v50)
          {
            id v44 = v22;
            int v45 = v20;
            id v46 = v7;
            id v47 = v6;
            long long v53 = 0u;
            long long v54 = 0u;
            long long v51 = 0u;
            long long v52 = 0u;
            id v32 = v49;
            uint64_t v33 = [v32 countByEnumeratingWithState:&v51 objects:v55 count:16];
            if (v33)
            {
              uint64_t v34 = v33;
              uint64_t v35 = *(void *)v52;
              while (2)
              {
                for (uint64_t i = 0; i != v34; ++i)
                {
                  if (*(void *)v52 != v35) {
                    objc_enumerationMutation(v32);
                  }
                  __int16 v37 = *(void **)(*((void *)&v51 + 1) + 8 * i);
                  int v38 = (void *)[objc_alloc(MEMORY[0x1E4F1CA20]) initWithLocaleIdentifier:v37];
                  uint64_t v39 = [v38 languageCode];
                  int v40 = [v39 isEqualToString:v50];

                  if (v40)
                  {
                    id v42 = AFSiriLogContextUtility;
                    if (os_log_type_enabled((os_log_t)AFSiriLogContextUtility, OS_LOG_TYPE_INFO))
                    {
                      *(_DWORD *)buf = 136315394;
                      uint64_t v57 = "_AFDictationLanguageForKeyboardLanguageAndConfiguration";
                      __int16 v58 = 2112;
                      id v59 = v38;
                      _os_log_impl(&dword_19CF1D000, v42, OS_LOG_TYPE_INFO, "%s %@ is the best-choice in the same base language, using it.", buf, 0x16u);
                    }
                    id v15 = v37;

                    goto LABEL_49;
                  }
                }
                uint64_t v34 = [v32 countByEnumeratingWithState:&v51 objects:v55 count:16];
                if (v34) {
                  continue;
                }
                break;
              }
            }

            uint64_t v41 = AFSiriLogContextUtility;
            if (os_log_type_enabled((os_log_t)AFSiriLogContextUtility, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 136315138;
              uint64_t v57 = "_AFDictationLanguageForKeyboardLanguageAndConfiguration";
              _os_log_impl(&dword_19CF1D000, v41, OS_LOG_TYPE_INFO, "%s No dictation language found", buf, 0xCu);
            }
            id v15 = 0;
LABEL_49:
            id v7 = v46;
            id v6 = v47;
            char v22 = v44;
            uint64_t v20 = v45;
          }
          else
          {
            id v15 = [v49 firstObject];
            long long v43 = AFSiriLogContextUtility;
            if (os_log_type_enabled((os_log_t)AFSiriLogContextUtility, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 136315394;
              uint64_t v57 = "_AFDictationLanguageForKeyboardLanguageAndConfiguration";
              __int16 v58 = 2112;
              id v59 = v15;
              _os_log_impl(&dword_19CF1D000, v43, OS_LOG_TYPE_INFO, "%s Could not determine keyboard language-code, returning best-guess: %@", buf, 0x16u);
            }
          }
        }
        else
        {
          long long v25 = AFSiriLogContextUtility;
          if (os_log_type_enabled((os_log_t)AFSiriLogContextUtility, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 136315138;
            uint64_t v57 = "_AFDictationLanguageForKeyboardLanguageAndConfiguration";
            _os_log_impl(&dword_19CF1D000, v25, OS_LOG_TYPE_INFO, "%s Could not parse keyboard language, giving up", buf, 0xCu);
          }
          id v15 = 0;
        }

        goto LABEL_16;
      }
      id v18 = AFSiriLogContextUtility;
      if (os_log_type_enabled((os_log_t)AFSiriLogContextUtility, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315394;
        uint64_t v57 = "_AFDictationLanguageForKeyboardLanguageAndConfiguration";
        __int16 v58 = 2112;
        id v59 = v5;
        _os_log_impl(&dword_19CF1D000, v18, OS_LOG_TYPE_INFO, "%s %@ is an exact match for a dictation language, using it", buf, 0x16u);
      }
      id v14 = v5;
    }
    id v15 = v14;
LABEL_16:

    goto LABEL_17;
  }
  if (v10)
  {
    *(_DWORD *)buf = 136315138;
    uint64_t v57 = "_AFDictationLanguageForKeyboardLanguageAndConfiguration";
    _os_log_impl(&dword_19CF1D000, v9, OS_LOG_TYPE_INFO, "%s Can not infer dictation language with no keyboard language", buf, 0xCu);
  }
  id v15 = 0;
LABEL_17:

  return v15;
}

uint64_t AFDeviceSupportsANE()
{
  return MGGetBoolAnswer();
}

uint64_t AFDeviceSupportsZLL()
{
  if (AFDeviceSupportsZLL_onceToken != -1) {
    dispatch_once(&AFDeviceSupportsZLL_onceToken, &__block_literal_global_475);
  }
  return AFDeviceSupportsZLL_deviceSupportsZLL;
}

void __AFDeviceSupportsZLL_block_invoke()
{
  AFDeviceSupportsZLL_deviceSupportsZLL = 0;
  if (AFIsHorseman_onceToken != -1) {
    dispatch_once(&AFIsHorseman_onceToken, &__block_literal_global_220_45602);
  }
  AFDeviceSupportsZLL_deviceSupportsZLL = AFIsHorseman_isHorseman;
  if (!AFIsHorseman_isHorseman) {
    AFDeviceSupportsZLL_deviceSupportsZLL = MGGetBoolAnswer();
  }
}

uint64_t AFDeviceSupportsAOP()
{
  return MGGetBoolAnswer();
}

uint64_t AFDeviceSupportsTTS()
{
  return 1;
}

uint64_t AFDeviceSupportsBargeIn()
{
  if (AFIsHorseman_onceToken != -1) {
    dispatch_once(&AFIsHorseman_onceToken, &__block_literal_global_220_45602);
  }
  if (AFIsHorseman_isHorseman) {
    return 1;
  }
  return MGGetBoolAnswer();
}

uint64_t AFDeviceSupportsWiFiLPASMode()
{
  return 1;
}

uint64_t AFDeviceSupportsAudioSessionCoordination()
{
  if (AFIsHorseman_onceToken != -1) {
    dispatch_once(&AFIsHorseman_onceToken, &__block_literal_global_220_45602);
  }
  if (!AFIsHorseman_isHorseman) {
    return 0;
  }
  float v0 = +[AFInstanceContext currentContext];
  uint64_t v1 = [v0 isDefault];

  return v1;
}

uint64_t AFDeviceSupportsUSBTypeCDisplay()
{
  if (AFDeviceSupportsUSBTypeCDisplay_onceToken != -1) {
    dispatch_once(&AFDeviceSupportsUSBTypeCDisplay_onceToken, &__block_literal_global_487);
  }
  return AFDeviceSupportsUSBTypeCDisplay_supportsAppleDisplay;
}

uint64_t __AFDeviceSupportsUSBTypeCDisplay_block_invoke()
{
  uint64_t result = MGGetBoolAnswer();
  AFDeviceSupportsUSBTypeCDisplay_supportsAppleDisplay = result;
  return result;
}

id AFDeviceRegionCode()
{
  if (AFDeviceRegionCode_onceToken != -1) {
    dispatch_once(&AFDeviceRegionCode_onceToken, &__block_literal_global_492);
  }
  float v0 = (void *)AFDeviceRegionCode_deviceRegionCode;
  return v0;
}

void __AFDeviceRegionCode_block_invoke()
{
  uint64_t v0 = MGGetStringAnswer();
  if (v0)
  {
    uint64_t v1 = (const void *)v0;
    uint64_t v2 = [NSString stringWithString:v0];
    id v3 = (void *)AFDeviceRegionCode_deviceRegionCode;
    AFDeviceRegionCode_deviceRegionCode = v2;

    CFRelease(v1);
  }
}

uint64_t AFDeviceSupportsSpokenMessages()
{
  return MGGetBoolAnswer();
}

BOOL AFDeviceHasAddressBook()
{
  if (AFIsHorseman_onceToken != -1) {
    dispatch_once(&AFIsHorseman_onceToken, &__block_literal_global_220_45602);
  }
  return AFIsHorseman_isHorseman == 0;
}

id _AFRedactedCopyPerson(void *a1)
{
  uint64_t v1 = (void *)[a1 copy];
  uint64_t v2 = [v1 fullName];
  uint64_t v3 = [v2 length];

  if (v3) {
    [v1 setFullName:@"@{fn#fullName}"];
  }
  id v4 = [v1 firstName];
  uint64_t v5 = [v4 length];

  if (v5) {
    [v1 setFirstName:@"@{fn#firstName}"];
  }
  id v6 = [v1 middleName];
  uint64_t v7 = [v6 length];

  if (v7) {
    [v1 setMiddleName:@"@{fn#middleName}"];
  }
  uint64_t v8 = [v1 lastName];
  uint64_t v9 = [v8 length];

  if (v9) {
    [v1 setLastName:@"@{fn#lastName}"];
  }
  BOOL v10 = [v1 nickName];
  uint64_t v11 = [v10 length];

  if (v11) {
    [v1 setNickName:@"@{fn#nickName}"];
  }
  uint64_t v12 = [v1 internalGUID];
  uint64_t v13 = [v12 length];

  if (v13) {
    [v1 setInternalGUID:@"@{fn#internalGUID}"];
  }
  return v1;
}

id _AFRedactedFamilyNamesCopyPerson(void *a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = (void *)[a1 copy];
  uint64_t v2 = [v1 relatedNames];
  uint64_t v3 = [v2 count];

  if (v3)
  {
    id v4 = [v1 relatedNames];
    id v5 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
    long long v13 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    id v6 = v4;
    uint64_t v7 = [v6 countByEnumeratingWithState:&v13 objects:v17 count:16];
    if (v7)
    {
      uint64_t v8 = v7;
      uint64_t v9 = *(void *)v14;
      do
      {
        for (uint64_t i = 0; i != v8; ++i)
        {
          if (*(void *)v14 != v9) {
            objc_enumerationMutation(v6);
          }
          uint64_t v11 = objc_msgSend(*(id *)(*((void *)&v13 + 1) + 8 * i), "copy", (void)v13);
          [v11 setName:@"@{fn#relationName}"];
          [v5 addObject:v11];
        }
        uint64_t v8 = [v6 countByEnumeratingWithState:&v13 objects:v17 count:16];
      }
      while (v8);
    }

    [v1 setRelatedNames:v5];
  }
  return v1;
}

unint64_t AFMachAbsoluteTimeGetNanoseconds(unint64_t a1)
{
  if (_AFMachAbsoluteTimeRate_onceToken != -1) {
    dispatch_once(&_AFMachAbsoluteTimeRate_onceToken, &__block_literal_global_973);
  }
  return (unint64_t)(*(double *)&_AFMachAbsoluteTimeRate_rate * (double)a1);
}

unint64_t AFMachAbsoluteTimeGetMicroseconds(unint64_t a1)
{
  if (_AFMachAbsoluteTimeRate_onceToken != -1) {
    dispatch_once(&_AFMachAbsoluteTimeRate_onceToken, &__block_literal_global_973);
  }
  return (unint64_t)(*(double *)&_AFMachAbsoluteTimeRate_rate * (double)a1 / 1000.0);
}

unint64_t AFMachAbsoluteTimeGetMilliseconds(unint64_t a1)
{
  if (_AFMachAbsoluteTimeRate_onceToken != -1) {
    dispatch_once(&_AFMachAbsoluteTimeRate_onceToken, &__block_literal_global_973);
  }
  return (unint64_t)(*(double *)&_AFMachAbsoluteTimeRate_rate * (double)a1 / 1000000.0);
}

double AFMachAbsoluteTimeGetTimeInterval(unint64_t a1)
{
  if (_AFMachAbsoluteTimeRate_onceToken != -1) {
    dispatch_once(&_AFMachAbsoluteTimeRate_onceToken, &__block_literal_global_973);
  }
  return *(double *)&_AFMachAbsoluteTimeRate_rate * (double)a1 / 1000000000.0;
}

unint64_t AFGetMachAbsoluteTimeFromTimeInterval(double a1)
{
  if (_AFMachAbsoluteTimeRate_onceToken != -1) {
    dispatch_once(&_AFMachAbsoluteTimeRate_onceToken, &__block_literal_global_973);
  }
  return (unint64_t)(a1 * 1000000000.0 / *(double *)&_AFMachAbsoluteTimeRate_rate);
}

uint64_t AFMachAbsoluteTimeAddTimeInterval(uint64_t a1, double a2)
{
  if (_AFMachAbsoluteTimeRate_onceToken != -1) {
    dispatch_once(&_AFMachAbsoluteTimeRate_onceToken, &__block_literal_global_973);
  }
  return (unint64_t)(a2 * 1000000000.0 / *(double *)&_AFMachAbsoluteTimeRate_rate) + a1;
}

uint64_t AFMachAbsoluteTimeSubtractTimeInterval(uint64_t a1, double a2)
{
  if (_AFMachAbsoluteTimeRate_onceToken != -1) {
    dispatch_once(&_AFMachAbsoluteTimeRate_onceToken, &__block_literal_global_973);
  }
  return a1 - (unint64_t)(a2 * 1000000000.0 / *(double *)&_AFMachAbsoluteTimeRate_rate);
}

unint64_t AFGetTimeSinceEpochRoundedToHourInMilliseconds()
{
  uint64_t v0 = [MEMORY[0x1E4F1C9C8] date];
  [v0 timeIntervalSince1970];
  double v2 = v1;

  return (unint64_t)((double)((int)v2 / 3600) * 3600.0 * 1000.0);
}

unint64_t AFGetTimeSinceEpochInMilliseconds()
{
  uint64_t v0 = [MEMORY[0x1E4F1C9C8] date];
  [v0 timeIntervalSince1970];
  unint64_t v2 = (unint64_t)(v1 * 1000.0);

  return v2;
}

uint64_t AFSystemGetBootTimeInMicroseconds()
{
  if (AFSystemGetBootTimeInMicroseconds_onceToken != -1) {
    dispatch_once(&AFSystemGetBootTimeInMicroseconds_onceToken, &__block_literal_global_501);
  }
  return AFSystemGetBootTimeInMicroseconds_bootTime;
}

void __AFSystemGetBootTimeInMicroseconds_block_invoke()
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  size_t v19 = 48;
  *(_OWORD *)uint64_t v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  int v0 = sysctlnametomib("kern.boottime", v24, &v19);
  if (v0)
  {
    int v1 = v0;
    unint64_t v2 = (void *)AFSiriLogContextUtility;
    if (os_log_type_enabled((os_log_t)AFSiriLogContextUtility, OS_LOG_TYPE_ERROR))
    {
      long long v14 = v2;
      long long v15 = strerror(v1);
      *(_DWORD *)buf = 136315394;
      uint64_t v21 = "AFSystemGetBootTimeInMicroseconds_block_invoke";
      __int16 v22 = 2080;
      uint64_t v23 = v15;
      _os_log_error_impl(&dword_19CF1D000, v14, OS_LOG_TYPE_ERROR, "%s Failed getting kern.boottime MIB with sysctlnametomib() %s", buf, 0x16u);
    }
    uint64_t v18 = 0;
    size_t v19 = 0;
    size_t v16 = 16;
    uint64_t v17 = 0;
LABEL_5:
    int v3 = sysctlbyname("kern.boottime", &v17, &v16, 0, 0);
    if (v3)
    {
      int v4 = v3;
      id v5 = (void *)AFSiriLogContextUtility;
      if (os_log_type_enabled((os_log_t)AFSiriLogContextUtility, OS_LOG_TYPE_ERROR))
      {
        id v6 = v5;
        uint64_t v7 = strerror(v4);
        *(_DWORD *)buf = 136315394;
        uint64_t v21 = "AFSystemGetBootTimeInMicroseconds_block_invoke";
        __int16 v22 = 2080;
        uint64_t v23 = v7;
        uint64_t v8 = "%s Failed getting kern.boottime with sysctlbyname() %s";
LABEL_12:
        _os_log_error_impl(&dword_19CF1D000, v6, OS_LOG_TYPE_ERROR, v8, buf, 0x16u);

        goto LABEL_13;
      }
      goto LABEL_13;
    }
LABEL_14:
    uint64_t v13 = (int)v18 + 1000000 * v17;
    goto LABEL_15;
  }
  size_t v16 = 16;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  if (!v19) {
    goto LABEL_5;
  }
  int v9 = sysctl(v24, v19, &v17, &v16, 0, 0);
  if (!v9) {
    goto LABEL_14;
  }
  int v10 = v9;
  uint64_t v11 = (void *)AFSiriLogContextUtility;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextUtility, OS_LOG_TYPE_ERROR))
  {
    id v6 = v11;
    uint64_t v12 = strerror(v10);
    *(_DWORD *)buf = 136315394;
    uint64_t v21 = "AFSystemGetBootTimeInMicroseconds_block_invoke";
    __int16 v22 = 2080;
    uint64_t v23 = v12;
    uint64_t v8 = "%s Failed getting kern.boottime with sysctl() %s";
    goto LABEL_12;
  }
LABEL_13:
  uint64_t v13 = 0;
LABEL_15:
  AFSystemGetBootTimeInMicroseconds_bootTime = v13;
}

double AFSystemGetBootTimeInTimeInterval()
{
  if (AFSystemGetBootTimeInMicroseconds_onceToken != -1) {
    dispatch_once(&AFSystemGetBootTimeInMicroseconds_onceToken, &__block_literal_global_501);
  }
  return (double)(unint64_t)AFSystemGetBootTimeInMicroseconds_bootTime / 1000000.0;
}

BOOL AFDeviceSupportsNavigation()
{
  if (AFIsHorseman_onceToken != -1) {
    dispatch_once(&AFIsHorseman_onceToken, &__block_literal_global_220_45602);
  }
  return AFIsHorseman_isHorseman == 0;
}

id AFLibraryDirectoryWithSubPath(void *a1, void *a2)
{
  id v3 = a1;
  int v4 = NSSearchPathForDirectoriesInDomains(NSLibraryDirectory, 1uLL, 1);
  id v5 = [v4 firstObject];

  if (v5)
  {
    id v6 = [v5 stringByAppendingPathComponent:v3];
    uint64_t v7 = [MEMORY[0x1E4F28CB8] defaultManager];
    int v8 = [v7 createDirectoryAtPath:v6 withIntermediateDirectories:1 attributes:0 error:a2];

    id v9 = 0;
    if (v8) {
      id v9 = v6;
    }
  }
  else if (a2)
  {
    [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F28798] code:2 userInfo:0];
    id v9 = 0;
    *a2 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    id v9 = 0;
  }

  return v9;
}

id AFAddInterruptingAudioSessionInfoToAnalyticsContext(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  CFArrayRef theArray = 0;
  int v10 = 8;
  uint64_t v2 = MEMORY[0x19F3A40B0](1634952297, &v10, &theArray);
  if (v2 || !theArray || CFArrayGetCount(theArray) < 1)
  {
    id v5 = (id)AFSiriLogContextSpeech;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      if (v2)
      {
        id v9 = [MEMORY[0x1E4F28ED0] numberWithInt:v2];
      }
      else
      {
        id v9 = @"No displayIDs found, but success reported";
      }
      *(_DWORD *)buf = 136315394;
      size_t v16 = "AFAddInterruptingAudioSessionInfoToAnalyticsContext";
      __int16 v17 = 2112;
      CFArrayRef v18 = (CFArrayRef)v9;
      _os_log_error_impl(&dword_19CF1D000, v5, OS_LOG_TYPE_ERROR, "%s Error fetching kAudioSessionProperty_ActiveSessionDisplayIDs %@", buf, 0x16u);
      if (v2) {
    }
      }
  }
  else
  {
    id v3 = AFSiriLogContextSpeech;
    if (os_log_type_enabled((os_log_t)AFSiriLogContextSpeech, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315394;
      size_t v16 = "AFAddInterruptingAudioSessionInfoToAnalyticsContext";
      __int16 v17 = 2112;
      CFArrayRef v18 = theArray;
      _os_log_impl(&dword_19CF1D000, v3, OS_LOG_TYPE_INFO, "%s kAudioSessionProperty_ActiveSessionDisplayIDs: %@", buf, 0x16u);
    }
    uint64_t v13 = @"kAudioSessionProperty_ActiveSessionDisplayIDs";
    CFArrayRef v14 = theArray;
    int v4 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v14 forKeys:&v13 count:1];
    id v5 = v4;
    if (v1)
    {
      v12[0] = v1;
      v12[1] = v4;
      id v6 = [MEMORY[0x1E4F1C978] arrayWithObjects:v12 count:2];
      uint64_t v7 = AFAnalyticsContextsMerge(v6);

      id v1 = (id)v7;
    }
    else
    {
      id v5 = v4;
      id v1 = v5;
    }
  }

  return v1;
}

__CFString *AFDescriptionOfBKSApplicationState(int a1)
{
  uint64_t result = @"Unknown";
  switch(a1)
  {
    case 1:
      uint64_t result = @"Terminated";
      break;
    case 2:
      uint64_t result = @"Suspended";
      break;
    case 3:
    case 5:
    case 6:
    case 7:
      return result;
    case 4:
      uint64_t result = @"BackgroundRunning";
      break;
    case 8:
      uint64_t result = @"ForegroundRunning";
      break;
    default:
      id v3 = @"RunningObscured";
      if (a1 != 32) {
        id v3 = @"Unknown";
      }
      if (a1 == 16) {
        uint64_t result = @"ProcessServer";
      }
      else {
        uint64_t result = v3;
      }
      break;
  }
  return result;
}

id AFSiriUsageDescriptionForAppID(void *a1)
{
  return _AFLocalizedValueForInfoPlistKey(a1, @"NSSiriUsageDescription");
}

id _AFLocalizedValueForInfoPlistKey(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v5 = +[AFPreferences sharedPreferences];
  id v6 = [v5 languageCode];

  uint64_t v7 = +[AFLocalization sharedInstance];
  int v8 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:v3];
  id v9 = [v7 localizedStringForKey:v4 table:@"InfoPlist" bundle:v8 languageCode:v6];

  if (!v9)
  {
    int v10 = [getLSApplicationProxyClass_46074() applicationProxyForIdentifier:v3];
    if (v10)
    {
      id v9 = [v10 objectForInfoDictionaryKey:v4 ofClass:objc_opt_class()];
    }
    else
    {
      id v9 = 0;
    }
  }
  return v9;
}

id initLSApplicationProxy_46076()
{
  if (initLSApplicationProxy_sOnce_46077 != -1) {
    dispatch_once(&initLSApplicationProxy_sOnce_46077, &__block_literal_global_979);
  }
  int v0 = (void *)classLSApplicationProxy_46078;
  return v0;
}

Class __initLSApplicationProxy_block_invoke_46080()
{
  if (!CoreServicesLibrary_frameworkLibrary_46081)
  {
    CoreServicesLibrary_frameworkLibrary_46081 = (uint64_t)dlopen("/System/Library/Frameworks/CoreServices.framework/CoreServices", 2);
    if (!CoreServicesLibrary_frameworkLibrary_46081) {
      __assert_rtn("CoreServicesLibrary", "AFUtilities.m", 126, "frameworkLibrary");
    }
  }
  Class result = objc_getClass("LSApplicationProxy");
  classLSApplicationProxy_46078 = (uint64_t)result;
  if (!result) {
    __assert_rtn("initLSApplicationProxy_block_invoke", "AFUtilities.m", 127, "classLSApplicationProxy");
  }
  getLSApplicationProxyClass_46074 = LSApplicationProxyFunction_46087;
  return result;
}

id LSApplicationProxyFunction_46087()
{
  return (id)classLSApplicationProxy_46078;
}

id AFSpeechRecognitionUsageDescriptionForAppID(void *a1)
{
  return _AFLocalizedValueForInfoPlistKey(a1, @"NSSpeechRecognitionUsageDescription");
}

uint64_t AFSerializeNSUserActivity(void *a1, const char *a2)
{
  return [a1 _createUserActivityDataWithOptions:0 completionHandler:a2];
}

uint64_t AFSpokenNotificationDataCollectionEnabled()
{
  if (DataCollectionServicesLibrary_sOnce_46097 != -1) {
    dispatch_once(&DataCollectionServicesLibrary_sOnce_46097, &__block_literal_global_984);
  }
  if (!DataCollectionServicesLibrary_sLib_46098) {
    return 0;
  }
  int v0 = [getDCPreferencesClass() sharedPreferences];
  uint64_t v1 = [v0 isDataCollectionEnabled];

  return v1;
}

id initDCPreferences()
{
  if (initDCPreferences_sOnce != -1) {
    dispatch_once(&initDCPreferences_sOnce, &__block_literal_global_987);
  }
  int v0 = (void *)classDCPreferences;
  return v0;
}

Class __initDCPreferences_block_invoke()
{
  if (DataCollectionServicesLibrary_sOnce_46097 != -1) {
    dispatch_once(&DataCollectionServicesLibrary_sOnce_46097, &__block_literal_global_984);
  }
  Class result = objc_getClass("DCPreferences");
  classDCPreferences = (uint64_t)result;
  getDCPreferencesClass = DCPreferencesFunction;
  return result;
}

id DCPreferencesFunction()
{
  return (id)classDCPreferences;
}

void *__DataCollectionServicesLibrary_block_invoke_46100()
{
  Class result = dlopen("/AppleInternal/Library/Frameworks/DataCollectionServices.framework/DataCollectionServices", 2);
  DataCollectionServicesLibrary_sLib_46098 = (uint64_t)result;
  return result;
}

void AFSetSpokenNotificationDataCollectionEnabled(uint64_t a1)
{
  if (DataCollectionServicesLibrary_sOnce_46097 != -1) {
    dispatch_once(&DataCollectionServicesLibrary_sOnce_46097, &__block_literal_global_984);
  }
  if (DataCollectionServicesLibrary_sLib_46098)
  {
    id v2 = [getDCPreferencesClass() sharedPreferences];
    [v2 setDataCollectionEnabled:a1];
  }
}

uint64_t AFSupportsHALCapabilitiesDonation()
{
  return 1;
}

uint64_t AFSupportsHALContextDonation()
{
  return 1;
}

uint64_t AFSupportsHALContextCollectorElection()
{
  return 1;
}

uint64_t AFSupportsHALContextCollecting()
{
  if (AFIsHorseman_onceToken != -1) {
    dispatch_once(&AFIsHorseman_onceToken, &__block_literal_global_220_45602);
  }
  return AFIsHorseman_isHorseman;
}

uint64_t AFSupportsHALOnDemandRapportConnection()
{
  return 0;
}

BOOL AFSupportsHALProximityScanning()
{
  return !AFProcessIsRunningAsInstance();
}

void __AFProcessGetInstanceUUID_block_invoke()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  memset(uu, 0, sizeof(uu));
  uuid_clear(uu);
  if (xpc_get_instance())
  {
    uint64_t v0 = [objc_alloc(MEMORY[0x1E4F29128]) initWithUUIDBytes:uu];
    uint64_t v1 = (void *)AFProcessGetInstanceUUID_instanceUUID;
    AFProcessGetInstanceUUID_instanceUUID = v0;
  }
}

uint64_t AFSupportsHALDeviceRouting()
{
  return 1;
}

uint64_t AFSupportsHALFlowRouting()
{
  return 0;
}

uint64_t AFSupportsCrossDeviceMediaControlFromWatch()
{
  return 0;
}

uint64_t AFSupportsAudioSessionCoordination()
{
  uint64_t result = AFDeviceSupportsAudioSessionCoordination();
  if (result)
  {
    return +[AFFeatureFlags isAudioSessionCoordinationEnabled];
  }
  return result;
}

id AFGetFlashlightLevel()
{
  Boolean keyExistsAndHasValidFormat = 0;
  unint64_t AppIntegerValue = CFPreferencesGetAppIntegerValue(@"FlashlightLevel", @"com.apple.springboard", &keyExistsAndHasValidFormat);
  if (keyExistsAndHasValidFormat)
  {
    LODWORD(v1) = 1.0;
    if (AppIntegerValue <= 3) {
      LODWORD(v1) = dword_19D0E2540[AppIntegerValue];
    }
    id v2 = [MEMORY[0x1E4F28ED0] numberWithFloat:v1];
  }
  else
  {
    id v2 = 0;
  }
  return v2;
}

double AFSpokenMessagesExecutionTimeout()
{
  double v0 = (double)softLinkBBGetObserverGatewayTimeout() + -3.0;
  return v0 - _AFPreferencesOpportuneSpeakingTimeout();
}

uint64_t initBBGetObserverGatewayTimeout()
{
  if (BulletinBoardLibrary_sOnce != -1) {
    dispatch_once(&BulletinBoardLibrary_sOnce, &__block_literal_global_999);
  }
  double v0 = (uint64_t (*)())dlsym((void *)BulletinBoardLibrary_sLib, "BBGetObserverGatewayTimeout");
  softLinkBBGetObserverGatewayTimeout = v0;
  return v0();
}

void *__BulletinBoardLibrary_block_invoke()
{
  uint64_t result = dlopen("/System/Library/PrivateFrameworks/BulletinBoard.framework/BulletinBoard", 2);
  BulletinBoardLibrary_sLib = (uint64_t)result;
  return result;
}

uint64_t AFIsW1Headset(void *a1)
{
  id v1 = a1;
  if ([v1 length])
  {
    if ([v1 hasPrefix:@"BTHeadphones"])
    {
      id v2 = [v1 substringFromIndex:objc_msgSend(@"BTHeadphones", "length")];
      uint64_t v3 = [&unk_1EEE996E8 containsObject:v2];
    }
    else
    {
      uint64_t v3 = [&unk_1EEE996E8 containsObject:v1];
    }
  }
  else
  {
    uint64_t v3 = 0;
  }

  return v3;
}

uint64_t AFIsH1Headset(void *a1)
{
  id v1 = a1;
  if ([v1 length])
  {
    if ([v1 hasPrefix:@"BTHeadphones"])
    {
      id v2 = [v1 substringFromIndex:objc_msgSend(@"BTHeadphones", "length")];
      uint64_t v3 = [&unk_1EEE99700 containsObject:v2];
    }
    else
    {
      uint64_t v3 = [&unk_1EEE99700 containsObject:v1];
    }
  }
  else
  {
    uint64_t v3 = 0;
  }

  return v3;
}

uint64_t AFIsH2Headset(void *a1)
{
  id v1 = a1;
  if ([v1 length])
  {
    if ([v1 hasPrefix:@"BTHeadphones"])
    {
      id v2 = [v1 substringFromIndex:objc_msgSend(@"BTHeadphones", "length")];
      uint64_t v3 = [&unk_1EEE99718 containsObject:v2];
    }
    else
    {
      uint64_t v3 = [&unk_1EEE99718 containsObject:v1];
    }
  }
  else
  {
    uint64_t v3 = 0;
  }

  return v3;
}

uint64_t AFBTAnnounceCallsUnsupportedOnProductID(void *a1)
{
  id v1 = a1;
  if ([v1 length]) {
    uint64_t v2 = [&unk_1EEE99730 containsObject:v1];
  }
  else {
    uint64_t v2 = 0;
  }

  return v2;
}

uint64_t AFPlaybackRouteIsHandsFree(void *a1)
{
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1 && ([v1 isEqualToString:@"Speaker"] & 1) == 0) {
    uint64_t v3 = [v2 isEqualToString:@"Receiver"] ^ 1;
  }
  else {
    uint64_t v3 = 0;
  }

  return v3;
}

void *AFRecordRouteIsHearst(void *a1, const char *a2)
{
  if (a1) {
    return (void *)[a1 isEqualToString:@"BluetoothDoAP"];
  }
  return a1;
}

uint64_t AFSupportsBluetooth()
{
  if (AFSupportsBluetooth_onceToken != -1) {
    dispatch_once(&AFSupportsBluetooth_onceToken, &__block_literal_global_696);
  }
  return AFSupportsBluetooth_supportsBluetooth;
}

uint64_t __AFSupportsBluetooth_block_invoke()
{
  uint64_t result = MGGetBoolAnswer();
  AFSupportsBluetooth_supportsBluetooth = result;
  return result;
}

uint64_t AFSupportsRecordFromBluetoothDevice()
{
  if (AFSupportsBluetooth_onceToken != -1) {
    dispatch_once(&AFSupportsBluetooth_onceToken, &__block_literal_global_696);
  }
  return AFSupportsBluetooth_supportsBluetooth;
}

uint64_t AFSupportsPlaybackToBluetoothDevice()
{
  if (AFSupportsBluetooth_onceToken != -1) {
    dispatch_once(&AFSupportsBluetooth_onceToken, &__block_literal_global_696);
  }
  return AFSupportsBluetooth_supportsBluetooth;
}

uint64_t AFGryphonAssetsExistForLanguage(void *a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  id v1 = AFOutputVoiceLanguageForRecognitionLanguage(a1);
  +[AFVoiceInfo allVoicesForSiriSessionLanguage:v1];
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  id v2 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v3 = [v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v3)
  {
    uint64_t v4 = *(void *)v11;
    while (2)
    {
      for (uint64_t i = 0; i != v3; ++i)
      {
        if (*(void *)v11 != v4) {
          objc_enumerationMutation(v2);
        }
        id v6 = *(void **)(*((void *)&v10 + 1) + 8 * i);
        if (objc_msgSend(v6, "isCustom", (void)v10))
        {
          uint64_t v7 = [v6 languageCode];
          char v8 = [v7 isEqualToString:v1];

          if (v8)
          {
            uint64_t v3 = 1;
            goto LABEL_12;
          }
        }
      }
      uint64_t v3 = [v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
      if (v3) {
        continue;
      }
      break;
    }
  }
LABEL_12:

  return v3;
}

void AFFetchLocalTTSAssetAvailabilityWithCompletion(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  if ([v5 length] && objc_msgSend(v6, "length"))
  {
    char v8 = AFOutputVoiceLanguageForRecognitionLanguage(v5);
    if (v8)
    {
      id v9 = (void *)[objc_alloc(MEMORY[0x1E4FA4F68]) initWithLanguage:v8 name:v6];
      long long v10 = [MEMORY[0x1E4FA4F30] afSharedSession];
      v11[0] = MEMORY[0x1E4F143A8];
      v11[1] = 3221225472;
      v11[2] = __AFFetchLocalTTSAssetAvailabilityWithCompletion_block_invoke;
      void v11[3] = &unk_1E592C008;
      id v12 = v8;
      id v13 = v7;
      [v10 downloadedVoicesMatching:v9 reply:v11];
    }
    else
    {
      (*((void (**)(id, void, void))v7 + 2))(v7, 0, 0);
    }
  }
  else
  {
    (*((void (**)(id, void, void))v7 + 2))(v7, 0, 0);
  }
}

void __AFFetchLocalTTSAssetAvailabilityWithCompletion_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  id v3 = a2;
  uint64_t v4 = [v3 countByEnumeratingWithState:&v13 objects:v23 count:16];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = *(void *)v14;
    while (2)
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v14 != v6) {
          objc_enumerationMutation(v3);
        }
        char v8 = *(void **)(*((void *)&v13 + 1) + 8 * i);
        if (objc_msgSend(v8, "type", (void)v13) == 3 || objc_msgSend(v8, "type") == 4)
        {
          id v9 = (void *)AFSiriLogContextUtility;
          if (os_log_type_enabled((os_log_t)AFSiriLogContextUtility, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v10 = *(void *)(a1 + 32);
            long long v11 = v9;
            id v12 = [v8 name];
            *(_DWORD *)buf = 136315650;
            CFArrayRef v18 = "AFFetchLocalTTSAssetAvailabilityWithCompletion_block_invoke";
            __int16 v19 = 2112;
            uint64_t v20 = v10;
            __int16 v21 = 2112;
            __int16 v22 = v12;
            _os_log_debug_impl(&dword_19CF1D000, v11, OS_LOG_TYPE_DEBUG, "%s Local TTS asset found for current output voice: %@ %@", buf, 0x20u);
          }
          (*(void (**)(void))(*(void *)(a1 + 40) + 16))();

          goto LABEL_14;
        }
      }
      uint64_t v5 = [v3 countByEnumeratingWithState:&v13 objects:v23 count:16];
      if (v5) {
        continue;
      }
      break;
    }
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
LABEL_14:
}

uint64_t AFIsDictationRequestSpeechApiRequest(void *a1, const char *a2)
{
  return [a1 hasPrefix:@"SFSpeech"];
}

id _AFXPCListenerCreateForMachServiceName(void *a1)
{
  id v1 = (objc_class *)MEMORY[0x1E4F29290];
  id v2 = a1;
  id v3 = (void *)[[v1 alloc] initWithMachServiceName:v2];

  return v3;
}

id AFOfflineDictationStatusForLanguage(void *a1, void *a2)
{
  if (a2)
  {
    id v3 = a2;
    uint64_t v4 = [a1 componentsSeparatedByString:@"_"];
    uint64_t v5 = [v4 componentsJoinedByString:@"-"];

    uint64_t v6 = _AFPreferencesReplacementLanguageForLocalRecognizerLanguageCode(v5);
    id v7 = (void *)v6;
    if (v6) {
      char v8 = (void *)v6;
    }
    else {
      char v8 = v5;
    }
    id v9 = v8;

    uint64_t v10 = [v3 objectForKey:v9];
  }
  else
  {
    uint64_t v10 = 0;
  }
  return v10;
}

uint64_t AFIsDictationLanguageSupportedForOnDeviceDictation(void *a1, void *a2)
{
  id v2 = AFOfflineDictationStatusForLanguage(a1, a2);
  id v3 = v2;
  if (v2)
  {
    uint64_t v4 = [v2 objectForKey:@"High Quality"];
    uint64_t v5 = [v4 BOOLValue];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t AFIsDictationLanguageInstalledForOnDeviceDictation(void *a1, void *a2)
{
  id v2 = AFOfflineDictationStatusForLanguage(a1, a2);
  id v3 = v2;
  if (v2)
  {
    uint64_t v4 = [v2 objectForKey:@"High Quality"];
    int v5 = [v4 BOOLValue];

    uint64_t v6 = [v3 objectForKey:@"Installed"];
    unsigned int v7 = [v6 BOOLValue];

    uint64_t v8 = v5 & v7;
  }
  else
  {
    uint64_t v8 = 0;
  }

  return v8;
}

uint64_t AFIsDictationLanguageInstalledForOfflineRecognition(void *a1, void *a2)
{
  id v2 = AFOfflineDictationStatusForLanguage(a1, a2);
  id v3 = v2;
  if (v2)
  {
    uint64_t v4 = [v2 objectForKey:@"Installed"];
    uint64_t v5 = [v4 BOOLValue];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t AFDictationRequiresRequestValidation()
{
  if (AFDictationRequiresRequestValidation_onceToken != -1) {
    dispatch_once(&AFDictationRequiresRequestValidation_onceToken, &__block_literal_global_712);
  }
  return AFDictationRequiresRequestValidation_requiresEntitlement;
}

uint64_t __AFDictationRequiresRequestValidation_block_invoke()
{
  if (AFIsIPad_onceToken != -1) {
    dispatch_once(&AFIsIPad_onceToken, &__block_literal_global_218);
  }
  uint64_t result = _os_feature_enabled_impl();
  AFDictationRequiresRequestValidation_requiresEntitlement = result;
  return result;
}

uint64_t AFIsDictationRequestFromAppleClient(void *a1)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    CFErrorRef error = 0;
    [v1 auditToken];
    id v3 = SecTaskCreateWithAuditToken(0, &token);
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = (__CFString *)SecTaskCopySigningIdentifier(v3, &error);
      CFErrorRef v6 = error;
      if (error)
      {
        unsigned int v7 = AFSiriLogContextDaemon;
        if (os_log_type_enabled((os_log_t)AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315650;
          long long v16 = "AFIsDictationRequestFromAppleClient";
          __int16 v17 = 2112;
          CFArrayRef v18 = v2;
          __int16 v19 = 2112;
          CFErrorRef v20 = v6;
          _os_log_error_impl(&dword_19CF1D000, v7, OS_LOG_TYPE_ERROR, "%s Could not get signing identifier. Connection: %@, error:  %@", buf, 0x20u);
          CFErrorRef v6 = error;
        }
        CFRelease(v6);
      }
      if (!v5)
      {
        uint64_t v8 = AFSiriLogContextDaemon;
        if (os_log_type_enabled((os_log_t)AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          long long v16 = "AFIsDictationRequestFromAppleClient";
          __int16 v17 = 2112;
          CFArrayRef v18 = v2;
          _os_log_error_impl(&dword_19CF1D000, v8, OS_LOG_TYPE_ERROR, "%s Could not get the bundle identifier. Connection: %@", buf, 0x16u);
        }
      }
      CFRelease(v4);
    }
    else
    {
      long long v11 = AFSiriLogContextDaemon;
      if (os_log_type_enabled((os_log_t)AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        long long v16 = "AFIsDictationRequestFromAppleClient";
        __int16 v17 = 2112;
        CFArrayRef v18 = v2;
        _os_log_error_impl(&dword_19CF1D000, v11, OS_LOG_TYPE_ERROR, "%s Could not create task with audit token. Connection: %@", buf, 0x16u);
      }
      uint64_t v5 = 0;
    }
    uint64_t v10 = [(__CFString *)v5 hasPrefix:@"com.apple"];
  }
  else
  {
    id v9 = AFSiriLogContextDaemon;
    if (os_log_type_enabled((os_log_t)AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      long long v16 = "AFIsDictationRequestFromAppleClient";
      _os_log_error_impl(&dword_19CF1D000, v9, OS_LOG_TYPE_ERROR, "%s Requiers non null xpc connection", buf, 0xCu);
    }
    uint64_t v10 = 0;
  }

  return v10;
}

id AFProductAndBuildVersion()
{
  if (AFProductAndBuildVersion_onceToken != -1) {
    dispatch_once(&AFProductAndBuildVersion_onceToken, &__block_literal_global_720);
  }
  double v0 = (void *)AFProductAndBuildVersion_systemVersionString;
  return v0;
}

void __AFProductAndBuildVersion_block_invoke()
{
  double v0 = NSString;
  uint64_t v1 = MGCopyAnswer();
  id v8 = (id)v1;
  if (v1) {
    id v2 = (__CFString *)v1;
  }
  else {
    id v2 = @"???";
  }
  uint64_t v3 = MGCopyAnswer();
  uint64_t v4 = (void *)v3;
  if (v3) {
    uint64_t v5 = (__CFString *)v3;
  }
  else {
    uint64_t v5 = @"???";
  }
  uint64_t v6 = [v0 stringWithFormat:@"%@/%@", v2, v5];
  unsigned int v7 = (void *)AFProductAndBuildVersion_systemVersionString;
  AFProductAndBuildVersion_systemVersionString = v6;
}

dispatch_time_t AFDispatchTimeGetFromDateAndOffset(void *a1, double a2)
{
  if (a1)
  {
    float64_t __y = 0.0;
    [a1 timeIntervalSince1970];
    long double v4 = modf(v3, (long double *)&__y);
    v5.f64[0] = __y;
    v5.f64[1] = v4 * 1000000000.0;
    timespec v7 = (timespec)vcvtq_s64_f64(vminnmq_f64(vmaxnmq_f64(v5, (float64x2_t)vdupq_n_s64(0xC3E0000000000000)), (float64x2_t)vdupq_n_s64(0x43E0000000000000uLL)));
    return dispatch_walltime(&v7, (uint64_t)(a2 * 1000000000.0));
  }
  else
  {
    return dispatch_walltime(0, (uint64_t)(a2 * 1000000000.0));
  }
}

void AFDispatchScheduleAtTime(dispatch_time_t a1, uint64_t a2, NSObject *a3, void *a4)
{
  id v7 = a4;
  uint64_t v13 = 0;
  long long v14 = &v13;
  uint64_t v15 = 0x3032000000;
  long long v16 = __Block_byref_object_copy__46184;
  __int16 v17 = __Block_byref_object_dispose__46185;
  dispatch_source_t v18 = dispatch_source_create(MEMORY[0x1E4F14490], 0, 0, a3);
  dispatch_source_set_timer((dispatch_source_t)v14[5], a1, 0xFFFFFFFFFFFFFFFFLL, a2);
  id v8 = v14[5];
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  void v10[2] = __AFDispatchScheduleAtTime_block_invoke;
  v10[3] = &unk_1E592C058;
  id v11 = v7;
  id v12 = &v13;
  id v9 = v7;
  dispatch_source_set_event_handler(v8, v10);
  dispatch_resume((dispatch_object_t)v14[5]);

  _Block_object_dispose(&v13, 8);
}

uint64_t __Block_byref_object_copy__46184(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__46185(uint64_t a1)
{
}

void __AFDispatchScheduleAtTime_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2) {
    (*(void (**)(void))(v2 + 16))();
  }
  long double v3 = *(NSObject **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
  if (v3)
  {
    dispatch_source_cancel(v3);
    uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8);
    float64x2_t v5 = *(void **)(v4 + 40);
    *(void *)(v4 + 40) = 0;
  }
}

void AFDispatchScheduleWithDelay(void *a1, void *a2, double a3)
{
  int64_t v4 = (uint64_t)(a3 * 1000000000.0);
  id v5 = a2;
  id v7 = a1;
  dispatch_time_t v6 = dispatch_walltime(0, v4);
  AFDispatchScheduleAtTime(v6, 0, v7, v5);
}

void AFFetchFollowerStatusInStereoPair(void *a1)
{
  id v1 = a1;
  if (v1)
  {
    uint64_t v6 = 0;
    id v7 = &v6;
    uint64_t v8 = 0x3032000000;
    id v9 = __Block_byref_object_copy__46184;
    uint64_t v10 = __Block_byref_object_dispose__46185;
    id v11 = objc_alloc_init((Class)getSBSStereoLeaderInterfaceClass());
    if (AFIsHorseman_onceToken != -1) {
      dispatch_once(&AFIsHorseman_onceToken, &__block_literal_global_220_45602);
    }
    if (AFIsHorseman_isHorseman && (uint64_t v2 = (void *)v7[5]) != 0)
    {
      v3[0] = MEMORY[0x1E4F143A8];
      v3[1] = 3221225472;
      v3[2] = __AFFetchFollowerStatusInStereoPair_block_invoke;
      v3[3] = &unk_1E592C088;
      id v4 = v1;
      id v5 = &v6;
      [v2 isFollower:v3];
    }
    else
    {
      (*((void (**)(id, void))v1 + 2))(v1, 0);
    }
    _Block_object_dispose(&v6, 8);
  }
}

void sub_19D0B7C14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __AFFetchFollowerStatusInStereoPair_block_invoke(uint64_t a1, void *a2)
{
  (*(void (**)(void, uint64_t))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), [a2 BOOLValue]);
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = 0;
}

id initSBSStereoLeaderInterface()
{
  if (initSBSStereoLeaderInterface_sOnce != -1) {
    dispatch_once(&initSBSStereoLeaderInterface_sOnce, &__block_literal_global_1002);
  }
  double v0 = (void *)classSBSStereoLeaderInterface;
  return v0;
}

Class __initSBSStereoLeaderInterface_block_invoke()
{
  if (SoundBoardServicesLibrary_sOnce != -1) {
    dispatch_once(&SoundBoardServicesLibrary_sOnce, &__block_literal_global_1005);
  }
  Class result = objc_getClass("SBSStereoLeaderInterface");
  classSBSStereoLeaderInterface = (uint64_t)result;
  getSBSStereoLeaderInterfaceClass = SBSStereoLeaderInterfaceFunction;
  return result;
}

id SBSStereoLeaderInterfaceFunction()
{
  return (id)classSBSStereoLeaderInterface;
}

void *__SoundBoardServicesLibrary_block_invoke()
{
  Class result = dlopen("/System/Library/PrivateFrameworks/SoundBoardServices.framework/SoundBoardServices", 2);
  SoundBoardServicesLibrary_sLib = (uint64_t)result;
  return result;
}

id AFNormalizeMacAddress(void *a1)
{
  id v1 = a1;
  if ([v1 length])
  {
    uint64_t v2 = [v1 uppercaseString];
    id v3 = [v2 stringByReplacingOccurrencesOfString:@":" withString:@"-"];
  }
  else
  {
    id v3 = v1;
  }

  return v3;
}

uint64_t AFProcessIsAssistantDaemon()
{
  if (AFProcessIsAssistantDaemon_onceToken != -1) {
    dispatch_once(&AFProcessIsAssistantDaemon_onceToken, &__block_literal_global_735);
  }
  return AFProcessIsAssistantDaemon_isAssistantDaemon;
}

void __AFProcessIsAssistantDaemon_block_invoke()
{
  double v0 = [MEMORY[0x1E4F28F80] processInfo];
  id v1 = [v0 processName];
  int v2 = [v1 isEqualToString:@"assistantd"];

  if (v2)
  {
    AFProcessGetValueForEntitlement(@"application-identifier");
    id v3 = (id)objc_claimAutoreleasedReturnValue();
    AFProcessIsAssistantDaemon_isAssistantDaemon = [v3 isEqualToString:@"com.apple.assistant.assistantd"];
  }
}

uint64_t AFProcessIsAssistantService()
{
  if (AFProcessIsAssistantService_onceToken != -1) {
    dispatch_once(&AFProcessIsAssistantService_onceToken, &__block_literal_global_746);
  }
  return AFProcessIsAssistantService_isAssistantService;
}

void __AFProcessIsAssistantService_block_invoke()
{
  double v0 = [MEMORY[0x1E4F28F80] processInfo];
  id v1 = [v0 processName];
  int v2 = [v1 isEqualToString:@"assistant_service"];

  if (v2)
  {
    AFProcessGetValueForEntitlement(@"application-identifier");
    id v3 = (id)objc_claimAutoreleasedReturnValue();
    AFProcessIsAssistantService_isAssistantService = [v3 isEqualToString:@"com.apple.assistant_service"];
  }
}

uint64_t AFHasPerfPowerEntitlement()
{
  if (AFHasPerfPowerEntitlement_token != -1) {
    dispatch_once(&AFHasPerfPowerEntitlement_token, &__block_literal_global_754);
  }
  return AFHasPerfPowerEntitlement_hasEntitlement;
}

void __AFHasPerfPowerEntitlement_block_invoke()
{
  AFProcessGetValueForEntitlement(@"com.apple.PerfPowerServices.data-donation");
  id v0 = (id)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    AFHasPerfPowerEntitlement_hasEntitlement = [v0 BOOLValue];
  }
}

uint64_t AFDeviceSetupIsActive(void *a1, void *a2, double a3)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  id v6 = a2;
  id v7 = [MEMORY[0x1E4F1C9C8] now];
  uint64_t v8 = v7;
  if (!v5)
  {
    if (!v6) {
      goto LABEL_14;
    }
    uint64_t v15 = AFSiriLogContextDaemon;
    if (!os_log_type_enabled((os_log_t)AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR)) {
      goto LABEL_14;
    }
    int v21 = 136315394;
    __int16 v22 = "AFDeviceSetupIsActive";
    __int16 v23 = 2112;
    double v24 = *(double *)&v6;
    id v12 = "%s endDate is %@ but not beginDate is nil.";
    goto LABEL_10;
  }
  [v7 timeIntervalSinceDate:v5];
  if (v9 < 0.0) {
    goto LABEL_14;
  }
  if (!v6)
  {
    [v8 timeIntervalSinceDate:v5];
    if (v16 <= 3600.0) {
      goto LABEL_17;
    }
    uint64_t v15 = AFSiriLogContextDaemon;
    if (!os_log_type_enabled((os_log_t)AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR)) {
      goto LABEL_14;
    }
    int v21 = 136315394;
    __int16 v22 = "AFDeviceSetupIsActive";
    __int16 v23 = 2112;
    double v24 = *(double *)&v5;
    id v12 = "%s endDate is nil but beginDate is %@ and it is more than one hour ago.";
    goto LABEL_10;
  }
  [v6 timeIntervalSinceDate:v5];
  if (v10 >= 0.0)
  {
    [v8 timeIntervalSinceDate:v6];
    if (v19 < 0.0) {
      goto LABEL_17;
    }
    if (a3 > 0.0)
    {
      [v8 timeIntervalSinceDate:v6];
      if (v20 >= a3) {
        goto LABEL_14;
      }
LABEL_17:
      uint64_t v17 = 1;
      goto LABEL_15;
    }
    if (a3 >= 0.0) {
      goto LABEL_14;
    }
    uint64_t v15 = AFSiriLogContextDaemon;
    if (!os_log_type_enabled((os_log_t)AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR)) {
      goto LABEL_14;
    }
    int v21 = 136315394;
    __int16 v22 = "AFDeviceSetupIsActive";
    __int16 v23 = 2048;
    double v24 = a3;
    id v12 = "%s recencyDuration %f is invalid.";
LABEL_10:
    uint64_t v13 = v15;
    uint32_t v14 = 22;
    goto LABEL_11;
  }
  uint64_t v11 = AFSiriLogContextDaemon;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
  {
    int v21 = 136315650;
    __int16 v22 = "AFDeviceSetupIsActive";
    __int16 v23 = 2112;
    double v24 = *(double *)&v6;
    __int16 v25 = 2112;
    id v26 = v5;
    id v12 = "%s endDate %@ is earlier than beginDate %@.";
    uint64_t v13 = v11;
    uint32_t v14 = 32;
LABEL_11:
    _os_log_error_impl(&dword_19CF1D000, v13, OS_LOG_TYPE_ERROR, v12, (uint8_t *)&v21, v14);
  }
LABEL_14:
  uint64_t v17 = 0;
LABEL_15:

  return v17;
}

id ADCreateRequestLinkInfo(void *a1, uint64_t a2)
{
  id v3 = (objc_class *)MEMORY[0x1E4FA1378];
  id v4 = a1;
  id v5 = [v3 alloc];
  id v6 = (void *)[objc_alloc(MEMORY[0x1E4F29128]) initWithUUIDString:v4];

  id v7 = (void *)[v5 initWithNSUUID:v6];
  id v8 = objc_alloc_init(MEMORY[0x1E4FA1308]);
  [v8 setUuid:v7];
  [v8 setComponent:a2];

  return v8;
}

void ADEmitRequestLinkEventMessage(void *a1, void *a2)
{
  id v3 = (objc_class *)MEMORY[0x1E4FA12F8];
  id v4 = a2;
  id v5 = a1;
  id v7 = objc_alloc_init(v3);
  [v7 setSource:v5];

  [v7 setTarget:v4];
  id v6 = [MEMORY[0x1E4F9F9A8] sharedStream];
  [v6 emitMessage:v7];
}

uint64_t AFShouldOptOutDataSharingForMigrationFromProductVersion(void *a1)
{
  id v1 = a1;
  if (([v1 hasPrefix:@"15.0"] & 1) != 0
    || ([v1 hasPrefix:@"15.1"] & 1) != 0)
  {
    uint64_t v2 = 1;
  }
  else
  {
    uint64_t v2 = [v1 hasPrefix:@"15.2"];
  }

  return v2;
}

uint64_t AFShouldOptOutDataSharingForMigrationFromBuildVersion(void *a1)
{
  id v1 = a1;
  if (([v1 hasPrefix:@"19A"] & 1) != 0
    || ([v1 hasPrefix:@"19B"] & 1) != 0)
  {
    uint64_t v2 = 1;
  }
  else
  {
    uint64_t v2 = [v1 hasPrefix:@"19C"];
  }

  return v2;
}

uint64_t AFDeviceSupportsFileACrashRadar()
{
  if (AFIsInternalInstall_onceToken != -1) {
    dispatch_once(&AFIsInternalInstall_onceToken, &__block_literal_global_158);
  }
  return AFIsInternalInstall_isInternal;
}

uint64_t AFDeviceSupportsFileARadar()
{
  return 0;
}

uint64_t AFDoesProductTypeSupportMUX(void *a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  uint64_t v2 = [&unk_1EEE99790 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v4 = *(void *)v9;
    while (2)
    {
      uint64_t v5 = 0;
      do
      {
        if (*(void *)v9 != v4) {
          objc_enumerationMutation(&unk_1EEE99790);
        }
        if ([v1 hasSuffix:*(void *)(*((void *)&v8 + 1) + 8 * v5)])
        {
          uint64_t v6 = 0;
          goto LABEL_11;
        }
        ++v5;
      }
      while (v3 != v5);
      uint64_t v3 = [&unk_1EEE99790 countByEnumeratingWithState:&v8 objects:v12 count:16];
      if (v3) {
        continue;
      }
      break;
    }
  }
  uint64_t v6 = 1;
LABEL_11:

  return v6;
}

uint64_t AFSupportsSiriInCall()
{
  id v0 = +[AFPreferences sharedPreferences];
  id v1 = [v0 languageCode];

  unsigned int v2 = AFIsVisionBuiltInLocale(v1);
  BOOL v3 = +[AFFeatureFlags isBlindedSphinxEnabled];
  BOOL v4 = +[AFFeatureFlags isBlushingPhantomEnabled];
  if (v3)
  {
    uint64_t v5 = v4 & v2;
  }
  else if (v4 && AFDeviceSupportsSiriUOD())
  {
    uint64_t v5 = v2 & ~AFShouldRunAsrOnServerForUOD();
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t AFSupportsCallHangUp()
{
  if (+[AFFeatureFlags isBlindedSphinxEnabled]) {
    return 1;
  }
  if (AFDeviceSupportsSiriUOD()) {
    int v1 = AFShouldRunAsrOnServerForUOD() ^ 1;
  }
  else {
    int v1 = 0;
  }
  unsigned int v2 = [getVTPreferencesClass_46214() sharedPreferences];
  uint64_t v0 = v1 & [v2 voiceTriggerEnabled];

  return v0;
}

id initVTPreferences_46216()
{
  if (initVTPreferences_sOnce_46217 != -1) {
    dispatch_once(&initVTPreferences_sOnce_46217, &__block_literal_global_1008);
  }
  uint64_t v0 = (void *)classVTPreferences_46218;
  return v0;
}

Class __initVTPreferences_block_invoke_46220()
{
  if (!VoiceTriggerLibrary_frameworkLibrary_46221)
  {
    VoiceTriggerLibrary_frameworkLibrary_46221 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/VoiceTrigger.framework/VoiceTrigger", 2);
    if (!VoiceTriggerLibrary_frameworkLibrary_46221) {
      __assert_rtn("VoiceTriggerLibrary", "AFUtilities.m", 167, "frameworkLibrary");
    }
  }
  Class result = objc_getClass("VTPreferences");
  classVTPreferences_46218 = (uint64_t)result;
  if (!result) {
    __assert_rtn("initVTPreferences_block_invoke", "AFUtilities.m", 168, "classVTPreferences");
  }
  getVTPreferencesClass_46214 = VTPreferencesFunction_46227;
  return result;
}

id VTPreferencesFunction_46227()
{
  return (id)classVTPreferences_46218;
}

uint64_t AFDeviceSupportsMedoc()
{
  if (AFDeviceSupportsMedoc_onceToken != -1) {
    dispatch_once(&AFDeviceSupportsMedoc_onceToken, &__block_literal_global_829_46228);
  }
  return AFDeviceSupportsMedoc_supportsMedoc;
}

uint64_t __AFDeviceSupportsMedoc_block_invoke()
{
  unsigned int v0 = +[AFFeatureFlags isMedocFeatureEnabled];
  unsigned int v1 = AFDeviceSupportsSiriUOD();
  unsigned int v2 = +[AFFeatureFlags isMedocFeatureEnabledForHybridMode];
  unsigned int v3 = AFShouldRunAsrOnServerForUOD();
  uint64_t result = AFDeviceSupportsMedocHelper(v0, v1, v2, v3);
  AFDeviceSupportsMedoc_supportsMedoc = result;
  return result;
}

uint64_t AFDeviceSupportsMedocHelper(unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (a1 && (a2 & 1) != 0)
  {
    uint64_t v4 = 1;
    uint64_t v5 = @"isMedocSupported=true, reason=Medoc feature flag enabled and device supports UOD";
  }
  else if (a3 && (a4 & 1) != 0)
  {
    uint64_t v4 = 1;
    uint64_t v5 = @"isMedocSupported=true, reason=Medoc Hybrid feature flag enabled and device should run hybrid mode";
  }
  else
  {
    [NSString stringWithFormat:@"isMedocSupported=false, Medoc feature flag: %d, device supports UOD? %d, Medoc Hybrid feature flag: %d, device should run hybrid mode? %d", a1, a2, a3, a4];
    uint64_t v5 = (__CFString *)objc_claimAutoreleasedReturnValue();
    uint64_t v4 = 0;
  }
  uint64_t v6 = AFSiriLogContextDaemon;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    long long v9 = "AFDeviceSupportsMedocHelper";
    __int16 v10 = 2114;
    long long v11 = v5;
    _os_log_impl(&dword_19CF1D000, v6, OS_LOG_TYPE_INFO, "%s #medoc %{public}@", buf, 0x16u);
  }

  return v4;
}

uint64_t AFHasGMSCapability()
{
  if (AFHasGMSCapabilityUnembargoed_once != -1) {
    dispatch_once(&AFHasGMSCapabilityUnembargoed_once, &__block_literal_global_840);
  }
  return AFHasGMSCapabilityUnembargoed_deviceSupportsGenerativeModelSystems;
}

uint64_t __AFHasGMSCapabilityUnembargoed_block_invoke()
{
  uint64_t result = MGGetBoolAnswer();
  AFHasGMSCapabilityUnembargoed_deviceSupportsGenerativeModelSystems = result;
  return result;
}

uint64_t AFHasGMSCapabilityUnembargoed()
{
  if (AFHasGMSCapabilityUnembargoed_once != -1) {
    dispatch_once(&AFHasGMSCapabilityUnembargoed_once, &__block_literal_global_840);
  }
  return AFHasGMSCapabilityUnembargoed_deviceSupportsGenerativeModelSystems;
}

uint64_t AFDeviceSupportsSAE()
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  int v0 = AFDeviceSupportsSAEByDeviceCapabilityAndFeatureFlags();
  unsigned int v1 = AFLocaleSupportsSAE();
  uint64_t v8 = 0;
  long long v9 = &v8;
  uint64_t v10 = 0x2050000000;
  unsigned int v2 = (void *)getGMAvailabilityWrapperClass_softClass;
  uint64_t v11 = getGMAvailabilityWrapperClass_softClass;
  if (!getGMAvailabilityWrapperClass_softClass)
  {
    *(void *)buf = MEMORY[0x1E4F143A8];
    *(void *)&buf[8] = 3221225472;
    *(void *)&buf[16] = __getGMAvailabilityWrapperClass_block_invoke;
    uint64_t v13 = &unk_1E592C0B0;
    uint32_t v14 = &v8;
    __getGMAvailabilityWrapperClass_block_invoke((uint64_t)buf);
    unsigned int v2 = (void *)v9[3];
  }
  id v3 = v2;
  _Block_object_dispose(&v8, 8);
  uint64_t v4 = objc_msgSend(v3, "currentWithUseCaseIdentifiers:", &unk_1EEE997A8, v8);
  if (v4) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = v0 & v1;
  }
  uint64_t v6 = AFSiriLogContextUtility;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextUtility, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136316162;
    *(void *)&uint8_t buf[4] = "AFDeviceSupportsSAE";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = v5;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&buf[20] = v0;
    LOWORD(v13) = 1024;
    *(_DWORD *)((char *)&v13 + 2) = v1;
    HIWORD(v13) = 1024;
    LODWORD(v14) = v4 == 0;
    _os_log_debug_impl(&dword_19CF1D000, v6, OS_LOG_TYPE_DEBUG, "%s deviceSupportsSAE = %d, deviceSupportsSAEByDeviceCapabilityAndFeatureFlags = %d, localeSupportsSAE = %d, gmsAvailable = %d", buf, 0x24u);
  }
  return v5;
}

void sub_19D0B8D2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t AFDeviceSupportsSAEByDeviceCapabilityAndFeatureFlags()
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  BOOL v0 = +[AFFeatureFlags isSAEOverrideEnabled];
  BOOL v1 = +[AFFeatureFlags isNLRouterEnabled];
  if (AFDeviceSupportsMedoc_onceToken != -1) {
    dispatch_once(&AFDeviceSupportsMedoc_onceToken, &__block_literal_global_829_46228);
  }
  int v2 = AFDeviceSupportsMedoc_supportsMedoc;
  if (AFHasGMSCapabilityUnembargoed_once != -1) {
    dispatch_once(&AFHasGMSCapabilityUnembargoed_once, &__block_literal_global_840);
  }
  int v3 = AFHasGMSCapabilityUnembargoed_deviceSupportsGenerativeModelSystems;
  if (AFHasGMSCapabilityUnembargoed_deviceSupportsGenerativeModelSystems) {
    int v4 = 1;
  }
  else {
    int v4 = v0;
  }
  if (!v2) {
    int v4 = 0;
  }
  uint64_t v5 = v4 & v1;
  uint64_t v6 = AFSiriLogContextUtility;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextUtility, OS_LOG_TYPE_DEBUG))
  {
    int v8 = 136316418;
    long long v9 = "AFDeviceSupportsSAEByDeviceCapabilityAndFeatureFlags";
    __int16 v10 = 1024;
    int v11 = v2;
    __int16 v12 = 1024;
    int v13 = v3;
    __int16 v14 = 1024;
    BOOL v15 = v0;
    __int16 v16 = 1024;
    BOOL v17 = v1;
    __int16 v18 = 1024;
    int v19 = v5;
    _os_log_debug_impl(&dword_19CF1D000, v6, OS_LOG_TYPE_DEBUG, "%s isMedocSupported = %d, deviceSupportsGenerativeModelSystems = %d, isSAEOverrideEnabled = %d, isNLRouterEnabled = %d, deviceSupportsSAEByDeviceCapabilityAndFeatureFlags = %d", (uint8_t *)&v8, 0x2Au);
  }
  return v5;
}

uint64_t AFLocaleSupportsSAE()
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  BOOL v0 = +[AFPreferences sharedPreferences];
  BOOL v1 = [v0 languageCode];

  if (v1) {
    goto LABEL_5;
  }
  int v2 = AFSiriLogContextDaemon;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v7 = 136315138;
    int v8 = "AFLocaleSupportsSAE";
    _os_log_impl(&dword_19CF1D000, v2, OS_LOG_TYPE_INFO, "%s Locale is nil, fall back to system lanugage", (uint8_t *)&v7, 0xCu);
  }
  int v3 = +[AFPreferences sharedPreferences];
  BOOL v1 = [v3 bestSupportedLanguageCodeForLanguageCode:0];

  if (v1)
  {
LABEL_5:
    if (+[AFFeatureFlags isSAELocaleOverrideEnabled])
    {
      uint64_t v4 = 1;
    }
    else
    {
      if (AFLocaleSupportsSAE_once != -1) {
        dispatch_once(&AFLocaleSupportsSAE_once, &__block_literal_global_845);
      }
      uint64_t v4 = [(id)AFLocaleSupportsSAE_supportedLocales containsObject:v1];
    }
  }
  else
  {
    uint64_t v5 = AFSiriLogContextDaemon;
    if (os_log_type_enabled((os_log_t)AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      int v7 = 136315138;
      int v8 = "AFLocaleSupportsSAE";
      _os_log_impl(&dword_19CF1D000, v5, OS_LOG_TYPE_INFO, "%s Locale is nil, returning unsupported", (uint8_t *)&v7, 0xCu);
    }
    BOOL v1 = 0;
    uint64_t v4 = 0;
  }

  return v4;
}

Class __getGMAvailabilityWrapperClass_block_invoke(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  v6[0] = 0;
  if (!GenerativeModelsLibraryCore_frameworkLibrary)
  {
    v6[1] = (void *)MEMORY[0x1E4F143A8];
    v6[2] = (void *)3221225472;
    v6[3] = __GenerativeModelsLibraryCore_block_invoke;
    v6[4] = &__block_descriptor_40_e5_v8__0l;
    v6[5] = v6;
    long long v7 = xmmword_1E592C0D0;
    uint64_t v8 = 0;
    GenerativeModelsLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!GenerativeModelsLibraryCore_frameworkLibrary)
  {
    int v3 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v4 = [NSString stringWithUTF8String:"void *GenerativeModelsLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"AFUtilities.m", 187, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("GMAvailabilityWrapper");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    int v3 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v5 = [NSString stringWithUTF8String:"Class getGMAvailabilityWrapperClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"AFUtilities.m", 188, @"Unable to find class %s", "GMAvailabilityWrapper");

LABEL_10:
    __break(1u);
  }
  getGMAvailabilityWrapperClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __GenerativeModelsLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  GenerativeModelsLibraryCore_frameworkLibrary = result;
  return result;
}

void __AFLocaleSupportsSAE_block_invoke()
{
  uint64_t v0 = objc_msgSend(MEMORY[0x1E4F1CAD0], "setWithObjects:", @"en-US", @"en-GB", @"en-CA", @"en-AU", @"en-IE", @"en-NZ", @"en-ZA", 0);
  BOOL v1 = (void *)AFLocaleSupportsSAE_supportedLocales;
  AFLocaleSupportsSAE_supportedLocales = v0;
}

uint64_t AFDeviceSupportsSystemAssistantExperience()
{
  BOOL v0 = +[AFFeatureFlags isSystemAssistantExperienceEnabled];
  return v0 & AFDeviceSupportsSAE();
}

BOOL AFDeviceSupportsRemovalOfPersistentIDs()
{
  if (+[AFFeatureFlags isPersistentIDLoggingDisabledForType:](AFFeatureFlags, "isPersistentIDLoggingDisabledForType:", 14)|| +[AFFeatureFlags isPersistentIDLoggingDisabledForType:](AFFeatureFlags, "isPersistentIDLoggingDisabledForType:", 12)|| +[AFFeatureFlags isPersistentIDLoggingDisabledForType:](AFFeatureFlags, "isPersistentIDLoggingDisabledForType:", 13)|| +[AFFeatureFlags isPersistentIDLoggingDisabledForType:](AFFeatureFlags, "isPersistentIDLoggingDisabledForType:", 2)|| +[AFFeatureFlags isPersistentIDLoggingDisabledForType:3])
  {
    return 1;
  }
  if (AFHasGMSCapabilityUnembargoed_once != -1) {
    dispatch_once(&AFHasGMSCapabilityUnembargoed_once, &__block_literal_global_840);
  }
  if (!AFHasGMSCapabilityUnembargoed_deviceSupportsGenerativeModelSystems) {
    return (+[AFFeatureFlags isPersistentIDLoggingDisabledForType:](AFFeatureFlags, "isPersistentIDLoggingDisabledForType:", 8)|| +[AFFeatureFlags isPersistentIDLoggingDisabledForType:](AFFeatureFlags, "isPersistentIDLoggingDisabledForType:", 9))&& (AFDeviceSupportsSiriUOD() & 1) != 0|| (+[AFFeatureFlags isPersistentIDLoggingDisabledForType:](AFFeatureFlags, "isPersistentIDLoggingDisabledForType:", 10)|| +[AFFeatureFlags isPersistentIDLoggingDisabledForType:11])&& AFDeviceSupportsHybridUOD();
  }
  if (+[AFFeatureFlags isPersistentIDLoggingDisabledForType:0])
  {
    return 1;
  }
  uint64_t v0 = 1;
  if (!+[AFFeatureFlags isPersistentIDLoggingDisabledForType:](AFFeatureFlags, "isPersistentIDLoggingDisabledForType:", 1))return (+[AFFeatureFlags isPersistentIDLoggingDisabledForType:](AFFeatureFlags, "isPersistentIDLoggingDisabledForType:", 8)|| +[AFFeatureFlags isPersistentIDLoggingDisabledForType:](AFFeatureFlags, "isPersistentIDLoggingDisabledForType:", 9))&& (AFDeviceSupportsSiriUOD() & 1) != 0|| (+[AFFeatureFlags isPersistentIDLoggingDisabledForType:](AFFeatureFlags, "isPersistentIDLoggingDisabledForType:", 10)|| +[AFFeatureFlags isPersistentIDLoggingDisabledForType:](AFFeatureFlags, "isPersistentIDLoggingDisabledForType:", {
              11))
  }
        && AFDeviceSupportsHybridUOD();
  return v0;
}

uint64_t AFDeviceSupportsDisablingServerFallbackWhenMissingAsset()
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if (+[AFFeatureFlags isServerFallbackDisabledWhenMissingAsset])
  {
    uint64_t v0 = +[AFPreferences sharedPreferences];
    uint64_t v1 = [v0 shouldDisableServerFallbackNL];
  }
  else
  {
    uint64_t v1 = 0;
  }
  int v2 = AFSiriLogContextUtility;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextUtility, OS_LOG_TYPE_DEBUG))
  {
    int v4 = 136315394;
    uint64_t v5 = "AFDeviceSupportsDisablingServerFallbackWhenMissingAsset";
    __int16 v6 = 1024;
    int v7 = v1;
    _os_log_debug_impl(&dword_19CF1D000, v2, OS_LOG_TYPE_DEBUG, "%s #DisableServerFallbackWhenMissingAsset: result=%u", (uint8_t *)&v4, 0x12u);
  }
  return v1;
}

BOOL AFFetchDeviceCarryStatus()
{
  if (AFIsInternalInstall_onceToken != -1) {
    dispatch_once(&AFIsInternalInstall_onceToken, &__block_literal_global_158);
  }
  if (!AFIsInternalInstall_isInternal) {
    return 0;
  }
  uint64_t v0 = +[AFPreferences sharedPreferences];
  uint64_t v1 = [v0 internalUserClassification];

  if (v1) {
    return v1 == 1;
  }
  int v3 = [MEMORY[0x1E4F1CB18] standardUserDefaults];
  int v4 = [v3 persistentDomainForName:@"com.apple.da"];
  uint64_t v5 = [v4 objectForKey:@"ExperimentGroup"];

  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    if ([v5 isEqualToString:@"walkabout"]) {
      uint64_t v2 = 1;
    }
    else {
      uint64_t v2 = [v5 isEqualToString:@"carry"];
    }
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

uint64_t AFDeviceSupportsPatientSiri()
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  BOOL v0 = +[AFFeatureFlags isPatientSiriFeatureEnabled];
  unsigned int v1 = AFDeviceSupportsSAE();
  if (AFDeviceSupportsMedoc_onceToken != -1) {
    dispatch_once(&AFDeviceSupportsMedoc_onceToken, &__block_literal_global_829_46228);
  }
  int v2 = AFDeviceSupportsMedoc_supportsMedoc;
  if (AFDeviceSupportsMedoc_supportsMedoc) {
    BOOL v3 = v0;
  }
  else {
    BOOL v3 = 0;
  }
  uint64_t v4 = v3 & v1;
  uint64_t v5 = AFSiriLogContextDaemon;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v7 = 136316162;
    uint64_t v8 = "AFDeviceSupportsPatientSiri";
    __int16 v9 = 1024;
    int v10 = v4;
    __int16 v11 = 1024;
    BOOL v12 = v0;
    __int16 v13 = 1024;
    int v14 = v2;
    __int16 v15 = 1024;
    unsigned int v16 = v1;
    _os_log_impl(&dword_19CF1D000, v5, OS_LOG_TYPE_INFO, "%s #patientSiri: featureSupported(%u), featureFlagSupported(%u), medocFeatureSupported(%u), assistantEngineSupported(%u)", (uint8_t *)&v7, 0x24u);
  }
  return v4;
}

uint64_t AFDeviceSupportsSiriCapella()
{
  return 0;
}

uint64_t AFDeviceSupportsShimTools()
{
  uint64_t result = AFDeviceSupportsSAE();
  if (result)
  {
    return +[AFFeatureFlags isShimToolsEnabled];
  }
  return result;
}

uint64_t AFDeviceSupportsGM()
{
  if (AFDeviceSupportsGM_onceToken != -1) {
    dispatch_once(&AFDeviceSupportsGM_onceToken, &__block_literal_global_871);
  }
  return AFDeviceSupportsGM_isGMDevice;
}

uint64_t __AFDeviceSupportsGM_block_invoke()
{
  uint64_t result = MGGetBoolAnswer();
  AFDeviceSupportsGM_isGMDevice = result;
  return result;
}

uint64_t AFDeviceSupportsMuSessions()
{
  return 0;
}

uint64_t AFDeviceSupportsBackgroundSession()
{
  return 0;
}

uint64_t AFDeviceSupportsRelay()
{
  return 0;
}

uint64_t AFDeviceRequestHandlingRolesValidate(char a1)
{
  return a1 & 0x1F;
}

id AFDeviceRequestHandlingRolesGetNames(uint64_t a1)
{
  if (a1)
  {
    char v1 = a1;
    id v2 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
    BOOL v3 = v2;
    if (v1)
    {
      [v2 addObject:@"input"];
      if ((v1 & 2) == 0)
      {
LABEL_4:
        if ((v1 & 4) == 0) {
          goto LABEL_5;
        }
        goto LABEL_15;
      }
    }
    else if ((v1 & 2) == 0)
    {
      goto LABEL_4;
    }
    [v3 addObject:@"understanding"];
    if ((v1 & 4) == 0)
    {
LABEL_5:
      if ((v1 & 8) == 0) {
        goto LABEL_6;
      }
      goto LABEL_16;
    }
LABEL_15:
    [v3 addObject:@"flow"];
    if ((v1 & 8) == 0)
    {
LABEL_6:
      if ((v1 & 0x10) == 0)
      {
LABEL_8:
        uint64_t v4 = (void *)[v3 copy];

        goto LABEL_10;
      }
LABEL_7:
      [v3 addObject:@"presentation"];
      goto LABEL_8;
    }
LABEL_16:
    [v3 addObject:@"intentHandler"];
    if ((v1 & 0x10) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  uint64_t v4 = (void *)MEMORY[0x1E4F1CBF0];
LABEL_10:
  return v4;
}

uint64_t AFDeviceRequestHandlingRolesGetFromNames(void *a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if ([v1 count])
  {
    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v12 = v1;
    id v2 = v1;
    uint64_t v3 = [v2 countByEnumeratingWithState:&v13 objects:v17 count:16];
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = 0;
      uint64_t v6 = *(void *)v14;
      do
      {
        uint64_t v7 = 0;
        do
        {
          if (*(void *)v14 != v6) {
            objc_enumerationMutation(v2);
          }
          id v8 = *(id *)(*((void *)&v13 + 1) + 8 * v7);
          if ([v8 length])
          {
            if (_AFDeviceRequestHandlingRolesGetFromName_onceToken != -1) {
              dispatch_once(&_AFDeviceRequestHandlingRolesGetFromName_onceToken, &__block_literal_global_46542);
            }
            __int16 v9 = [(id)_AFDeviceRequestHandlingRolesGetFromName_map objectForKey:v8];
            uint64_t v10 = [v9 unsignedIntegerValue];
          }
          else
          {
            uint64_t v10 = 0;
          }

          v5 |= v10;
          ++v7;
        }
        while (v4 != v7);
        uint64_t v4 = [v2 countByEnumeratingWithState:&v13 objects:v17 count:16];
      }
      while (v4);
    }
    else
    {
      uint64_t v5 = 0;
    }

    id v1 = v12;
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t AFHomeAnnouncementStateValidate(char a1)
{
  return a1 & 1;
}

id AFHomeAnnouncementStateGetNames(uint64_t a1)
{
  if (a1)
  {
    char v1 = a1;
    id v2 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
    uint64_t v3 = v2;
    if (v1) {
      [v2 addObject:@"isPlaying"];
    }
    uint64_t v4 = (void *)[v3 copy];
  }
  else
  {
    uint64_t v4 = (void *)MEMORY[0x1E4F1CBF0];
  }
  return v4;
}

uint64_t AFHomeAnnouncementStateGetFromNames(void *a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if ([v1 count])
  {
    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v12 = v1;
    id v2 = v1;
    uint64_t v3 = [v2 countByEnumeratingWithState:&v13 objects:v17 count:16];
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = 0;
      uint64_t v6 = *(void *)v14;
      do
      {
        uint64_t v7 = 0;
        do
        {
          if (*(void *)v14 != v6) {
            objc_enumerationMutation(v2);
          }
          id v8 = *(id *)(*((void *)&v13 + 1) + 8 * v7);
          if ([v8 length])
          {
            if (_AFHomeAnnouncementStateGetFromName_onceToken != -1) {
              dispatch_once(&_AFHomeAnnouncementStateGetFromName_onceToken, &__block_literal_global_46568);
            }
            __int16 v9 = [(id)_AFHomeAnnouncementStateGetFromName_map objectForKey:v8];
            uint64_t v10 = [v9 unsignedIntegerValue];
          }
          else
          {
            uint64_t v10 = 0;
          }

          v5 |= v10;
          ++v7;
        }
        while (v4 != v7);
        uint64_t v4 = [v2 countByEnumeratingWithState:&v13 objects:v17 count:16];
      }
      while (v4);
    }
    else
    {
      uint64_t v5 = 0;
    }

    id v1 = v12;
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

id initTUCallSourceIdentifierSpeakerRoute()
{
  if (initTUCallSourceIdentifierSpeakerRoute_sOnce != -1) {
    dispatch_once(&initTUCallSourceIdentifierSpeakerRoute_sOnce, &__block_literal_global_25_46876);
  }
  BOOL v0 = (void *)constantTUCallSourceIdentifierSpeakerRoute;
  return v0;
}

void __initTUCallSourceIdentifierSpeakerRoute_block_invoke()
{
  if (TelephonyUtilitiesLibrary_sOnce != -1) {
    dispatch_once(&TelephonyUtilitiesLibrary_sOnce, &__block_literal_global_19);
  }
  BOOL v0 = (id *)dlsym((void *)TelephonyUtilitiesLibrary_sLib, "TUCallSourceIdentifierSpeakerRoute");
  if (!v0) {
    __assert_rtn("initTUCallSourceIdentifierSpeakerRoute_block_invoke", "AFMyriadEmergencyCallPunchout.m", 19, "constant");
  }
  objc_storeStrong((id *)&constantTUCallSourceIdentifierSpeakerRoute, *v0);
  getTUCallSourceIdentifierSpeakerRoute = TUCallSourceIdentifierSpeakerRouteFunction;
}

id TUCallSourceIdentifierSpeakerRouteFunction()
{
  return (id)constantTUCallSourceIdentifierSpeakerRoute;
}

void *__TelephonyUtilitiesLibrary_block_invoke()
{
  uint64_t result = dlopen("/System/Library/PrivateFrameworks/TelephonyUtilities.framework/TelephonyUtilities", 2);
  TelephonyUtilitiesLibrary_sLib = (uint64_t)result;
  return result;
}

id initTUDialRequest()
{
  if (initTUDialRequest_sOnce != -1) {
    dispatch_once(&initTUDialRequest_sOnce, &__block_literal_global_22_46882);
  }
  BOOL v0 = (void *)classTUDialRequest;
  return v0;
}

Class __initTUDialRequest_block_invoke()
{
  if (TelephonyUtilitiesLibrary_sOnce != -1) {
    dispatch_once(&TelephonyUtilitiesLibrary_sOnce, &__block_literal_global_19);
  }
  Class result = objc_getClass("TUDialRequest");
  classTUDialRequest = (uint64_t)result;
  getTUDialRequestClass = TUDialRequestFunction;
  return result;
}

id TUDialRequestFunction()
{
  return (id)classTUDialRequest;
}

id initTUCallProviderManager()
{
  if (initTUCallProviderManager_sOnce != -1) {
    dispatch_once(&initTUCallProviderManager_sOnce, &__block_literal_global_16);
  }
  BOOL v0 = (void *)classTUCallProviderManager;
  return v0;
}

Class __initTUCallProviderManager_block_invoke()
{
  if (TelephonyUtilitiesLibrary_sOnce != -1) {
    dispatch_once(&TelephonyUtilitiesLibrary_sOnce, &__block_literal_global_19);
  }
  Class result = objc_getClass("TUCallProviderManager");
  classTUCallProviderManager = (uint64_t)result;
  getTUCallProviderManagerClass = TUCallProviderManagerFunction;
  return result;
}

id TUCallProviderManagerFunction()
{
  return (id)classTUCallProviderManager;
}

void sub_19D0BF8F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  _Block_object_dispose(&a30, 8);
  _Block_object_dispose((const void *)(v30 - 168), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__47377(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__47378(uint64_t a1)
{
}

BOOL AFClockTimerTypeGetIsValid(unint64_t a1)
{
  return a1 < 3;
}

BOOL AFClockTimerTypeGetIsValidAndSpecified(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 2;
}

__CFString *AFClockTimerTypeGetName(unint64_t a1)
{
  if (a1 > 2) {
    return @"(unknown)";
  }
  else {
    return off_1E592C540[a1];
  }
}

uint64_t AFClockTimerTypeGetFromName(void *a1)
{
  id v1 = a1;
  if ([v1 length])
  {
    if (AFClockTimerTypeGetFromName_onceToken != -1) {
      dispatch_once(&AFClockTimerTypeGetFromName_onceToken, &__block_literal_global_48060);
    }
    id v2 = [(id)AFClockTimerTypeGetFromName_map objectForKey:v1];
    uint64_t v3 = [v2 integerValue];
  }
  else
  {
    uint64_t v3 = 0;
  }

  return v3;
}

void __AFClockTimerTypeGetFromName_block_invoke()
{
  BOOL v0 = (void *)AFClockTimerTypeGetFromName_map;
  AFClockTimerTypeGetFromName_map = (uint64_t)&unk_1EEE99210;
}

void sub_19D0C45F8(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 192), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__48104(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__48105(uint64_t a1)
{
}

void sub_19D0C528C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19D0C55C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19D0C5898(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t init_AXSVibrationDisabled()
{
  BOOL v0 = libAccessibilityLibrary();
  uint64_t v1 = (uint64_t (*)())dlsym(v0, "_AXSVibrationDisabled");
  softLink_AXSVibrationDisabled = v1;
  if (!v1) {
    __assert_rtn("init_AXSVibrationDisabled", "AFAccessibilityObserver.m", 18, "softLink_AXSVibrationDisabled");
  }
  return v1();
}

void *libAccessibilityLibrary()
{
  Class result = (void *)libAccessibilityLibrary_frameworkLibrary;
  if (!libAccessibilityLibrary_frameworkLibrary)
  {
    Class result = dlopen("/usr/local/lib/libAccessibility.dylib", 2);
    libAccessibilityLibrary_frameworkLibrary = (uint64_t)result;
    if (!result)
    {
      Class result = dlopen("/usr/lib/libAccessibility.dylib", 2);
      libAccessibilityLibrary_frameworkLibrary = (uint64_t)result;
      if (!result) {
        __assert_rtn("libAccessibilityLibrary", "AFAccessibilityObserver.m", 14, "frameworkLibrary");
      }
    }
  }
  return result;
}

uint64_t init_AXSVoiceOverTouchEnabled()
{
  BOOL v0 = libAccessibilityLibrary();
  uint64_t v1 = (uint64_t (*)())dlsym(v0, "_AXSVoiceOverTouchEnabled");
  softLink_AXSVoiceOverTouchEnabled = v1;
  if (!v1) {
    __assert_rtn("init_AXSVoiceOverTouchEnabled", "AFAccessibilityObserver.m", 17, "softLink_AXSVoiceOverTouchEnabled");
  }
  return v1();
}

uint64_t __Block_byref_object_copy__48386(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__48387(uint64_t a1)
{
}

id initkAXSVibrationDisabledPreferenceDidChangeNotification()
{
  if (initkAXSVibrationDisabledPreferenceDidChangeNotification_sOnce != -1) {
    dispatch_once(&initkAXSVibrationDisabledPreferenceDidChangeNotification_sOnce, &__block_literal_global_55);
  }
  BOOL v0 = (void *)constantkAXSVibrationDisabledPreferenceDidChangeNotification;
  return v0;
}

void __initkAXSVibrationDisabledPreferenceDidChangeNotification_block_invoke()
{
  BOOL v0 = libAccessibilityLibrary();
  uint64_t v1 = (id *)dlsym(v0, "kAXSVibrationDisabledPreferenceDidChangeNotification");
  if (!v1) {
    __assert_rtn("initkAXSVibrationDisabledPreferenceDidChangeNotification_block_invoke", "AFAccessibilityObserver.m", 16, "constant");
  }
  objc_storeStrong((id *)&constantkAXSVibrationDisabledPreferenceDidChangeNotification, *v1);
  getkAXSVibrationDisabledPreferenceDidChangeNotification = kAXSVibrationDisabledPreferenceDidChangeNotificationFunction;
}

id kAXSVibrationDisabledPreferenceDidChangeNotificationFunction()
{
  return (id)constantkAXSVibrationDisabledPreferenceDidChangeNotification;
}

id initkAXSVoiceOverTouchEnabledNotification()
{
  if (initkAXSVoiceOverTouchEnabledNotification_sOnce != -1) {
    dispatch_once(&initkAXSVoiceOverTouchEnabledNotification_sOnce, &__block_literal_global_47);
  }
  BOOL v0 = (void *)constantkAXSVoiceOverTouchEnabledNotification;
  return v0;
}

void __initkAXSVoiceOverTouchEnabledNotification_block_invoke()
{
  BOOL v0 = libAccessibilityLibrary();
  uint64_t v1 = (id *)dlsym(v0, "kAXSVoiceOverTouchEnabledNotification");
  if (!v1) {
    __assert_rtn("initkAXSVoiceOverTouchEnabledNotification_block_invoke", "AFAccessibilityObserver.m", 15, "constant");
  }
  objc_storeStrong((id *)&constantkAXSVoiceOverTouchEnabledNotification, *v1);
  getkAXSVoiceOverTouchEnabledNotification = kAXSVoiceOverTouchEnabledNotificationFunction;
}

id kAXSVoiceOverTouchEnabledNotificationFunction()
{
  return (id)constantkAXSVoiceOverTouchEnabledNotification;
}

uint64_t ADClientAddValueForScalarKey()
{
  return MEMORY[0x1F41071E0]();
}

uint64_t ADClientPushValueForDistributionKey()
{
  return MEMORY[0x1F4107208]();
}

uint64_t AnalyticsSendEvent()
{
  return MEMORY[0x1F41138A0]();
}

uint64_t AnalyticsSendEventLazy()
{
  return MEMORY[0x1F41138B8]();
}

OSStatus AudioSessionGetProperty(AudioSessionPropertyID inID, UInt32 *ioDataSize, void *outData)
{
  return MEMORY[0x1F40D4E98](*(void *)&inID, ioDataSize, outData);
}

uint64_t BiomeLibrary()
{
  return MEMORY[0x1F410C8D0]();
}

CCCryptorStatus CCCrypt(CCOperation op, CCAlgorithm alg, CCOptions options, const void *key, size_t keyLength, const void *iv, const void *dataIn, size_t dataInLength, void *dataOut, size_t dataOutAvailable, size_t *dataOutMoved)
{
  return MEMORY[0x1F40C94A8](*(void *)&op, *(void *)&alg, *(void *)&options, key, keyLength, iv, dataIn, dataInLength);
}

int CC_SHA1_Final(unsigned __int8 *md, CC_SHA1_CTX *c)
{
  return MEMORY[0x1F40C9738](md, c);
}

int CC_SHA1_Init(CC_SHA1_CTX *c)
{
  return MEMORY[0x1F40C9740](c);
}

int CC_SHA1_Update(CC_SHA1_CTX *c, const void *data, CC_LONG len)
{
  return MEMORY[0x1F40C9748](c, data, *(void *)&len);
}

int CC_SHA256_Final(unsigned __int8 *md, CC_SHA256_CTX *c)
{
  return MEMORY[0x1F40C9778](md, c);
}

int CC_SHA256_Init(CC_SHA256_CTX *c)
{
  return MEMORY[0x1F40C9780](c);
}

int CC_SHA256_Update(CC_SHA256_CTX *c, const void *data, CC_LONG len)
{
  return MEMORY[0x1F40C9788](c, data, *(void *)&len);
}

int CC_SHA512_Final(unsigned __int8 *md, CC_SHA512_CTX *c)
{
  return MEMORY[0x1F40C97B8](md, c);
}

int CC_SHA512_Init(CC_SHA512_CTX *c)
{
  return MEMORY[0x1F40C97C0](c);
}

int CC_SHA512_Update(CC_SHA512_CTX *c, const void *data, CC_LONG len)
{
  return MEMORY[0x1F40C97C8](c, data, *(void *)&len);
}

CFAbsoluteTime CFAbsoluteTimeGetCurrent(void)
{
  MEMORY[0x1F40D70A8]();
  return result;
}

void CFArrayAppendValue(CFMutableArrayRef theArray, const void *value)
{
}

CFArrayRef CFArrayCreateCopy(CFAllocatorRef allocator, CFArrayRef theArray)
{
  return (CFArrayRef)MEMORY[0x1F40D7178](allocator, theArray);
}

CFMutableArrayRef CFArrayCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFArrayCallBacks *callBacks)
{
  return (CFMutableArrayRef)MEMORY[0x1F40D7190](allocator, capacity, callBacks);
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return MEMORY[0x1F40D71B8](theArray);
}

CFTypeID CFArrayGetTypeID(void)
{
  return MEMORY[0x1F40D71D8]();
}

const void *__cdecl CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx)
{
  return (const void *)MEMORY[0x1F40D71F0](theArray, idx);
}

void CFArrayRemoveValueAtIndex(CFMutableArrayRef theArray, CFIndex idx)
{
}

CFArrayRef CFBundleCopyLocalizationsForPreferences(CFArrayRef locArray, CFArrayRef prefArray)
{
  return (CFArrayRef)MEMORY[0x1F40D7490](locArray, prefArray);
}

CFTypeID CFDataGetTypeID(void)
{
  return MEMORY[0x1F40D7860]();
}

Boolean CFDictionaryContainsKey(CFDictionaryRef theDict, const void *key)
{
  return MEMORY[0x1F40D7968](theDict, key);
}

CFDictionaryRef CFDictionaryCreate(CFAllocatorRef allocator, const void **keys, const void **values, CFIndex numValues, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFDictionaryRef)MEMORY[0x1F40D7978](allocator, keys, values, numValues, keyCallBacks, valueCallBacks);
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFMutableDictionaryRef)MEMORY[0x1F40D7998](allocator, capacity, keyCallBacks, valueCallBacks);
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return (const void *)MEMORY[0x1F40D7A10](theDict, key);
}

void CFDictionarySetValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

CFIndex CFErrorGetCode(CFErrorRef err)
{
  return MEMORY[0x1F40D7AA8](err);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x1F40D7B80](cf);
}

void CFNotificationCenterAddObserver(CFNotificationCenterRef center, const void *observer, CFNotificationCallback callBack, CFStringRef name, const void *object, CFNotificationSuspensionBehavior suspensionBehavior)
{
}

CFNotificationCenterRef CFNotificationCenterGetDarwinNotifyCenter(void)
{
  return (CFNotificationCenterRef)MEMORY[0x1F40D7D08]();
}

CFNotificationCenterRef CFNotificationCenterGetDistributedCenter(void)
{
  return (CFNotificationCenterRef)MEMORY[0x1F40D7D18]();
}

void CFNotificationCenterPostNotification(CFNotificationCenterRef center, CFNotificationName name, const void *object, CFDictionaryRef userInfo, Boolean deliverImmediately)
{
}

void CFNotificationCenterRemoveEveryObserver(CFNotificationCenterRef center, const void *observer)
{
}

void CFNotificationCenterRemoveObserver(CFNotificationCenterRef center, const void *observer, CFNotificationName name, const void *object)
{
}

Boolean CFPreferencesAppSynchronize(CFStringRef applicationID)
{
  return MEMORY[0x1F40D7E90](applicationID);
}

Boolean CFPreferencesAppValueIsForced(CFStringRef key, CFStringRef applicationID)
{
  return MEMORY[0x1F40D7E98](key, applicationID);
}

CFPropertyListRef CFPreferencesCopyAppValue(CFStringRef key, CFStringRef applicationID)
{
  return (CFPropertyListRef)MEMORY[0x1F40D7EA0](key, applicationID);
}

CFArrayRef CFPreferencesCopyKeyList(CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
  return (CFArrayRef)MEMORY[0x1F40D7EB8](applicationID, userName, hostName);
}

CFPropertyListRef CFPreferencesCopyValue(CFStringRef key, CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
  return (CFPropertyListRef)MEMORY[0x1F40D7ED0](key, applicationID, userName, hostName);
}

Boolean CFPreferencesGetAppBooleanValue(CFStringRef key, CFStringRef applicationID, Boolean *keyExistsAndHasValidFormat)
{
  return MEMORY[0x1F40D7EE0](key, applicationID, keyExistsAndHasValidFormat);
}

CFIndex CFPreferencesGetAppIntegerValue(CFStringRef key, CFStringRef applicationID, Boolean *keyExistsAndHasValidFormat)
{
  return MEMORY[0x1F40D7EE8](key, applicationID, keyExistsAndHasValidFormat);
}

void CFPreferencesSetAppValue(CFStringRef key, CFPropertyListRef value, CFStringRef applicationID)
{
}

void CFPreferencesSetValue(CFStringRef key, CFPropertyListRef value, CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
}

Boolean CFPreferencesSynchronize(CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
  return MEMORY[0x1F40D7F10](applicationID, userName, hostName);
}

void CFRelease(CFTypeRef cf)
{
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x1F40D8048](cf);
}

void CFStringAppendCString(CFMutableStringRef theString, const char *cStr, CFStringEncoding encoding)
{
}

void CFStringAppendCharacters(CFMutableStringRef theString, const UniChar *chars, CFIndex numChars)
{
}

CFMutableStringRef CFStringCreateMutable(CFAllocatorRef alloc, CFIndex maxLength)
{
  return (CFMutableStringRef)MEMORY[0x1F40D8408](alloc, maxLength);
}

const char *__cdecl CFStringGetCStringPtr(CFStringRef theString, CFStringEncoding encoding)
{
  return (const char *)MEMORY[0x1F40D8520](theString, *(void *)&encoding);
}

void CFStringGetCharacters(CFStringRef theString, CFRange range, UniChar *buffer)
{
}

const UniChar *__cdecl CFStringGetCharactersPtr(CFStringRef theString)
{
  return (const UniChar *)MEMORY[0x1F40D8540](theString);
}

SInt32 CFUserNotificationDisplayNotice(CFTimeInterval timeout, CFOptionFlags flags, CFURLRef iconURL, CFURLRef soundURL, CFURLRef localizationURL, CFStringRef alertHeader, CFStringRef alertMessage, CFStringRef defaultButtonTitle)
{
  return MEMORY[0x1F40D8A50](flags, iconURL, soundURL, localizationURL, alertHeader, alertMessage, defaultButtonTitle, timeout);
}

uint64_t CPSharedResourcesDirectory()
{
  return MEMORY[0x1F41096C8]();
}

uint64_t CPSystemRootDirectory()
{
  return MEMORY[0x1F4109900]();
}

IOReturn IOPMAssertionCreateWithName(CFStringRef AssertionType, IOPMAssertionLevel AssertionLevel, CFStringRef AssertionName, IOPMAssertionID *AssertionID)
{
  return MEMORY[0x1F40E8F78](AssertionType, *(void *)&AssertionLevel, AssertionName, AssertionID);
}

IOReturn IOPMAssertionRelease(IOPMAssertionID AssertionID)
{
  return MEMORY[0x1F40E8FA8](*(void *)&AssertionID);
}

uint64_t MGCopyAnswer()
{
  return MEMORY[0x1F417CDE0]();
}

uint64_t MGGetBoolAnswer()
{
  return MEMORY[0x1F417CE00]();
}

uint64_t MGGetFloat32Answer()
{
  return MEMORY[0x1F417CE10]();
}

uint64_t MGGetProductType()
{
  return MEMORY[0x1F417CE18]();
}

uint64_t MGGetSInt32Answer()
{
  return MEMORY[0x1F417CE28]();
}

uint64_t MGGetStringAnswer()
{
  return MEMORY[0x1F417CE38]();
}

uint64_t MRContentItemCopyNowPlayingInfo()
{
  return MEMORY[0x1F412DE08]();
}

uint64_t MRContentItemGetAlbumArtistName()
{
  return MEMORY[0x1F412DE40]();
}

uint64_t MRContentItemGetAlbumName()
{
  return MEMORY[0x1F412DE48]();
}

uint64_t MRContentItemGetCalculatedPlaybackPosition()
{
  return MEMORY[0x1F412DE70]();
}

uint64_t MRContentItemGetDuration()
{
  return MEMORY[0x1F412DEB0]();
}

uint64_t MRContentItemGetElapsedTime()
{
  return MEMORY[0x1F412DEC8]();
}

uint64_t MRContentItemGetITunesStoreIdentifier()
{
  return MEMORY[0x1F412DF40]();
}

uint64_t MRContentItemGetITunesStoreSubscriptionIdentifier()
{
  return MEMORY[0x1F412DF48]();
}

uint64_t MRContentItemGetMediaType()
{
  return MEMORY[0x1F412DFD8]();
}

uint64_t MRContentItemGetPlayCount()
{
  return MEMORY[0x1F412DFE8]();
}

uint64_t MRContentItemGetReleaseDate()
{
  return MEMORY[0x1F412E028]();
}

uint64_t MRContentItemGetTitle()
{
  return MEMORY[0x1F412E068]();
}

uint64_t MRContentItemGetTrackArtistName()
{
  return MEMORY[0x1F412E080]();
}

uint64_t MRLanguageOptionCopyCharacteristics()
{
  return MEMORY[0x1F412E390]();
}

uint64_t MRLanguageOptionCopyDisplayName()
{
  return MEMORY[0x1F412E398]();
}

uint64_t MRLanguageOptionCopyIdentifier()
{
  return MEMORY[0x1F412E3A0]();
}

uint64_t MRLanguageOptionCopyLanguageTag()
{
  return MEMORY[0x1F412E3A8]();
}

uint64_t MRLanguageOptionCreateFromExternalRepresentation()
{
  return MEMORY[0x1F412E3C8]();
}

uint64_t MRLanguageOptionGetType()
{
  return MEMORY[0x1F412E3D0]();
}

uint64_t MRLanguageOptionGroupCopyLanguageOptions()
{
  return MEMORY[0x1F412E3D8]();
}

uint64_t MRLanguageOptionGroupCreateFromExternalRepresentation()
{
  return MEMORY[0x1F412E3E8]();
}

uint64_t MRLanguageOptionGroupsCreateFromExternalRepresentation()
{
  return MEMORY[0x1F412E408]();
}

uint64_t MRLanguageOptionsCreateFromExternalRepresentation()
{
  return MEMORY[0x1F412E428]();
}

uint64_t MRMediaRemoteCommandInfoGetCommand()
{
  return MEMORY[0x1F412E4D0]();
}

uint64_t MRMediaRemoteCommandInfoGetEnabled()
{
  return MEMORY[0x1F412E4D8]();
}

uint64_t MRMediaRemoteGetDeviceInfo()
{
  return MEMORY[0x1F412E588]();
}

uint64_t MRMediaRemoteGetLocalOrigin()
{
  return MEMORY[0x1F412E598]();
}

uint64_t MRMediaRemoteGetMediaPlaybackVolume()
{
  return MEMORY[0x1F412E5B0]();
}

uint64_t MRMediaRemoteGetNowPlayingApplicationPlaybackState()
{
  return MEMORY[0x1F412E5B8]();
}

uint64_t MRMediaRemoteGetNowPlayingClient()
{
  return MEMORY[0x1F412E5C8]();
}

uint64_t MRMediaRemoteGetPickedRouteHasVolumeControl()
{
  return MEMORY[0x1F412E5E8]();
}

uint64_t MRMediaRemoteGetSupportedCommands()
{
  return MEMORY[0x1F412E618]();
}

uint64_t MRMediaRemoteRegisterWantsSystemAppDidSkipTrackNotifications()
{
  return MEMORY[0x1F412E720]();
}

uint64_t MRMediaRemoteRequestNowPlayingPlaybackQueueSync()
{
  return MEMORY[0x1F412E748]();
}

uint64_t MRMediaRemoteSendCommandWithReply()
{
  return MEMORY[0x1F412E770]();
}

uint64_t MRNowPlayingClientGetBundleIdentifier()
{
  return MEMORY[0x1F412E878]();
}

uint64_t MRPairedDeviceCopyGroupUID()
{
  return MEMORY[0x1F412E8C0]();
}

uint64_t MRPairedDeviceCopyLocalReceiverPairingIdentity()
{
  return MEMORY[0x1F412E8D0]();
}

uint64_t MRPlaybackQueueCopyContentItems()
{
  return MEMORY[0x1F412E8E8]();
}

uint64_t MRPlaybackQueueGetRange()
{
  return MEMORY[0x1F412E900]();
}

uint64_t MRPlaybackQueueRequestCreate()
{
  return MEMORY[0x1F412E908]();
}

uint64_t MRPlaybackQueueRequestSetIncludeLanguageOptions()
{
  return MEMORY[0x1F412E950]();
}

uint64_t MRPlaybackQueueRequestSetIncludeMetadata()
{
  return MEMORY[0x1F412E960]();
}

NSArray *__cdecl NSAllMapTableValues(NSMapTable *table)
{
  return (NSArray *)MEMORY[0x1F40E6FE0](table);
}

Class NSClassFromString(NSString *aClassName)
{
  return (Class)MEMORY[0x1F40E7010](aClassName);
}

NSString *NSHomeDirectory(void)
{
  return (NSString *)MEMORY[0x1F40E7110]();
}

NSString *__cdecl NSHomeDirectoryForUser(NSString *userName)
{
  return (NSString *)MEMORY[0x1F40E7118](userName);
}

void NSLog(NSString *format, ...)
{
}

void *__cdecl NSMapGet(NSMapTable *table, const void *key)
{
  return (void *)MEMORY[0x1F40E7180](table, key);
}

void NSMapInsert(NSMapTable *table, const void *key, const void *value)
{
}

void NSMapRemove(NSMapTable *table, const void *key)
{
}

NSArray *__cdecl NSSearchPathForDirectoriesInDomains(NSSearchPathDirectory directory, NSSearchPathDomainMask domainMask, BOOL expandTilde)
{
  return (NSArray *)MEMORY[0x1F40E7248](directory, domainMask, expandTilde);
}

NSString *__cdecl NSStringFromClass(Class aClass)
{
  return (NSString *)MEMORY[0x1F40E7280](aClass);
}

NSString *__cdecl NSStringFromSelector(SEL aSelector)
{
  return (NSString *)MEMORY[0x1F40E72B0](aSelector);
}

uint64_t PBDataWriterWriteDataField()
{
  return MEMORY[0x1F41471B0]();
}

uint64_t PBDataWriterWriteInt32Field()
{
  return MEMORY[0x1F41471E0]();
}

uint64_t PBDataWriterWriteSubmessage()
{
  return MEMORY[0x1F4147230]();
}

uint64_t PBReaderPlaceMark()
{
  return MEMORY[0x1F4147268]();
}

uint64_t PBReaderReadData()
{
  return MEMORY[0x1F4147278]();
}

uint64_t PBReaderRecallMark()
{
  return MEMORY[0x1F41472A0]();
}

uint64_t PBReaderSkipValueWithTag()
{
  return MEMORY[0x1F41472A8]();
}

uint64_t SIReflectionHydrateProtoFromEventTypeAndData()
{
  return MEMORY[0x1F4151540]();
}

uint64_t SIReflectionInferClassFromEventType()
{
  return MEMORY[0x1F4151548]();
}

uint64_t SIReflectionInferEventTypeFromClass()
{
  return MEMORY[0x1F4151550]();
}

OSStatus SecItemAdd(CFDictionaryRef attributes, CFTypeRef *result)
{
  return MEMORY[0x1F40F6DD8](attributes, result);
}

OSStatus SecItemCopyMatching(CFDictionaryRef query, CFTypeRef *result)
{
  return MEMORY[0x1F40F6DE0](query, result);
}

OSStatus SecItemDelete(CFDictionaryRef query)
{
  return MEMORY[0x1F40F6DE8](query);
}

OSStatus SecItemUpdate(CFDictionaryRef query, CFDictionaryRef attributesToUpdate)
{
  return MEMORY[0x1F40F6E20](query, attributesToUpdate);
}

CFStringRef SecTaskCopySigningIdentifier(SecTaskRef task, CFErrorRef *error)
{
  return (CFStringRef)MEMORY[0x1F40F7128](task, error);
}

CFTypeRef SecTaskCopyValueForEntitlement(SecTaskRef task, CFStringRef entitlement, CFErrorRef *error)
{
  return (CFTypeRef)MEMORY[0x1F40F7138](task, entitlement, error);
}

SecTaskRef SecTaskCreateFromSelf(CFAllocatorRef allocator)
{
  return (SecTaskRef)MEMORY[0x1F40F7160](allocator);
}

SecTaskRef SecTaskCreateWithAuditToken(CFAllocatorRef allocator, audit_token_t *token)
{
  return (SecTaskRef)MEMORY[0x1F40F7168](allocator, token);
}

uint64_t VSPreferencesCopyDefaultOutputLanguageIdentifierForUserPreferences()
{
  return MEMORY[0x1F4167D08]();
}

uint64_t VSPreferencesCopySpokenLanguageIdentifier()
{
  return MEMORY[0x1F4167D18]();
}

uint64_t VSPreferencesSetSpokenLanguageIdentifier()
{
  return MEMORY[0x1F4167D20]();
}

BOOL _Block_has_signature(void *aBlock)
{
  return MEMORY[0x1F40C9A80](aBlock);
}

void _Block_object_dispose(const void *a1, const int a2)
{
}

const char *__cdecl _Block_signature(void *aBlock)
{
  return (const char *)MEMORY[0x1F40C9AB0](aBlock);
}

uint64_t _CFPreferencesWriteManagedDomainForUser()
{
  return MEMORY[0x1F40D8FE8]();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
}

double __exp10(double a1)
{
  MEMORY[0x1F40C9B90](a1);
  return result;
}

uint64_t _os_feature_enabled_impl()
{
  return MEMORY[0x1F40C9FB0]();
}

void _os_log_debug_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_fault_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_signpost_emit_with_name_impl(void *dso, os_log_t log, os_signpost_type_t type, os_signpost_id_t spid, const char *name, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _sl_dlopen()
{
  return MEMORY[0x1F415B160]();
}

uint32_t arc4random_uniform(uint32_t __upper_bound)
{
  return MEMORY[0x1F40CA3C0](*(void *)&__upper_bound);
}

void bzero(void *a1, size_t a2)
{
}

int close(int a1)
{
  return MEMORY[0x1F40CB3F8](*(void *)&a1);
}

void dispatch_after(dispatch_time_t when, dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_assert_queue_V2(dispatch_queue_t queue)
{
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_block_t dispatch_block_create_with_qos_class(dispatch_block_flags_t flags, dispatch_qos_class_t qos_class, int relative_priority, dispatch_block_t block)
{
  return (dispatch_block_t)MEMORY[0x1F40CB9C8](flags, *(void *)&qos_class, *(void *)&relative_priority, block);
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return (dispatch_queue_global_t)MEMORY[0x1F40CBA60](identifier, flags);
}

dispatch_group_t dispatch_group_create(void)
{
  return (dispatch_group_t)MEMORY[0x1F40CBA88]();
}

void dispatch_group_enter(dispatch_group_t group)
{
}

void dispatch_group_leave(dispatch_group_t group)
{
}

void dispatch_group_notify(dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block)
{
}

intptr_t dispatch_group_wait(dispatch_group_t group, dispatch_time_t timeout)
{
  return MEMORY[0x1F40CBAC0](group, timeout);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_autorelease_frequency(dispatch_queue_attr_t attr, dispatch_autorelease_frequency_t frequency)
{
  return (dispatch_queue_attr_t)MEMORY[0x1F40CBBA8](attr, frequency);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_qos_class(dispatch_queue_attr_t attr, dispatch_qos_class_t qos_class, int relative_priority)
{
  return (dispatch_queue_attr_t)MEMORY[0x1F40CBBB8](attr, *(void *)&qos_class, *(void *)&relative_priority);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x1F40CBBC0](label, attr);
}

dispatch_queue_t dispatch_queue_create_with_target_V2(const char *label, dispatch_queue_attr_t attr, dispatch_queue_t target)
{
  return (dispatch_queue_t)MEMORY[0x1F40CBBD0](label, attr, target);
}

const char *__cdecl dispatch_queue_get_label(dispatch_queue_t queue)
{
  return (const char *)MEMORY[0x1F40CBBD8](queue);
}

void dispatch_resume(dispatch_object_t object)
{
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x1F40CBC30](value);
}

intptr_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  return MEMORY[0x1F40CBC40](dsema);
}

intptr_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  return MEMORY[0x1F40CBC50](dsema, timeout);
}

void dispatch_source_cancel(dispatch_source_t source)
{
}

dispatch_source_t dispatch_source_create(dispatch_source_type_t type, uintptr_t handle, uintptr_t mask, dispatch_queue_t queue)
{
  return (dispatch_source_t)MEMORY[0x1F40CBC98](type, handle, mask, queue);
}

uintptr_t dispatch_source_get_data(dispatch_source_t source)
{
  return MEMORY[0x1F40CBCA0](source);
}

void dispatch_source_set_event_handler(dispatch_source_t source, dispatch_block_t handler)
{
}

void dispatch_source_set_timer(dispatch_source_t source, dispatch_time_t start, uint64_t interval, uint64_t leeway)
{
}

intptr_t dispatch_source_testcancel(dispatch_source_t source)
{
  return MEMORY[0x1F40CBCF8](source);
}

void dispatch_suspend(dispatch_object_t object)
{
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return MEMORY[0x1F40CBD30](when, delta);
}

dispatch_time_t dispatch_walltime(const timespec *when, int64_t delta)
{
  return MEMORY[0x1F40CBD40](when, delta);
}

dispatch_workloop_t dispatch_workloop_create(const char *label)
{
  return (dispatch_workloop_t)MEMORY[0x1F40CBD50](label);
}

int dladdr(const void *a1, Dl_info *a2)
{
  return MEMORY[0x1F40CBDA0](a1, a2);
}

char *dlerror(void)
{
  return (char *)MEMORY[0x1F40CBDB0]();
}

void *__cdecl dlopen(const char *__path, int __mode)
{
  return (void *)MEMORY[0x1F40CBDB8](__path, *(void *)&__mode);
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return (void *)MEMORY[0x1F40CBDC8](__handle, __symbol);
}

long double exp(long double __x)
{
  MEMORY[0x1F40CBFE0](__x);
  return result;
}

void free(void *a1)
{
}

pid_t getpid(void)
{
  return MEMORY[0x1F40CC4A0]();
}

uint64_t kdebug_trace()
{
  return MEMORY[0x1F40CC700]();
}

long double log10(long double __x)
{
  MEMORY[0x1F40CC880](__x);
  return result;
}

uint64_t mach_absolute_time(void)
{
  return MEMORY[0x1F40CC910]();
}

char *__cdecl mach_error_string(mach_error_t error_value)
{
  return (char *)MEMORY[0x1F40CC940](*(void *)&error_value);
}

kern_return_t mach_timebase_info(mach_timebase_info_t info)
{
  return MEMORY[0x1F40CCA60](info);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCB98](size, type_id);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1F40CCCF0](__dst, __src, __n);
}

void *__cdecl mmap(void *a1, size_t a2, int a3, int a4, int a5, off_t a6)
{
  return (void *)MEMORY[0x1F40CCE40](a1, a2, *(void *)&a3, *(void *)&a4, *(void *)&a5, a6);
}

long double modf(long double __x, long double *__y)
{
  MEMORY[0x1F40CCE48](__y, __x);
  return result;
}

int munmap(void *a1, size_t a2)
{
  return MEMORY[0x1F40CCE88](a1, a2);
}

uint32_t notify_cancel(int token)
{
  return MEMORY[0x1F40CD028](*(void *)&token);
}

uint32_t notify_get_state(int token, uint64_t *state64)
{
  return MEMORY[0x1F40CD040](*(void *)&token, state64);
}

uint32_t notify_post(const char *name)
{
  return MEMORY[0x1F40CD050](name);
}

uint32_t notify_register_check(const char *name, int *out_token)
{
  return MEMORY[0x1F40CD058](name, out_token);
}

uint32_t notify_register_dispatch(const char *name, int *out_token, dispatch_queue_t queue, notify_handler_t handler)
{
  return MEMORY[0x1F40CD060](name, out_token, queue, handler);
}

uint32_t notify_set_state(int token, uint64_t state64)
{
  return MEMORY[0x1F40CD088](*(void *)&token, state64);
}

uint64_t nwi_ifstate_get_flags()
{
  return MEMORY[0x1F40CD098]();
}

uint64_t nwi_state_copy()
{
  return MEMORY[0x1F40CD0A8]();
}

uint64_t nwi_state_get_first_ifstate()
{
  return MEMORY[0x1F40CD0B0]();
}

uint64_t nwi_state_get_notify_key()
{
  return MEMORY[0x1F40CD0C0]();
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x1F4181638](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x1F4181648]();
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x1F4181660](a1);
}

{
  MEMORY[0x1F4181668](context);
}

{
  return (void *)MEMORY[0x1F4181670]();
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1F4181678](a1);
}

id objc_begin_catch(void *exc_buf)
{
  return (id)MEMORY[0x1F4181680](exc_buf);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x1F4181688]();
}

void objc_copyWeak(id *to, id *from)
{
}

void objc_destroyWeak(id *location)
{
}

void objc_end_catch(void)
{
}

void objc_enumerationMutation(id obj)
{
}

void objc_exception_rethrow(void)
{
}

void objc_exception_throw(id exception)
{
}

id objc_getAssociatedObject(id object, const void *key)
{
  return (id)MEMORY[0x1F4181718](object, key);
}

Class objc_getClass(const char *name)
{
  return (Class)MEMORY[0x1F4181728](name);
}

id objc_initWeak(id *location, id val)
{
  return (id)MEMORY[0x1F4181758](location, val);
}

id objc_loadWeakRetained(id *location)
{
  return (id)MEMORY[0x1F4181780](location);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x1F41817A8](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x1F41817B0]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x1F41817B8]();
}

uint64_t objc_opt_new()
{
  return MEMORY[0x1F41817C0]();
}

uint64_t objc_opt_respondsToSelector()
{
  return MEMORY[0x1F41817C8]();
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x1F41818B0](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x1F41818B8](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1F41818C0](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1F41818C8](a1);
}

id objc_retainBlock(id a1)
{
  return (id)MEMORY[0x1F41818D0](a1);
}

void objc_setAssociatedObject(id object, const void *key, id value, void *policy)
{
}

void objc_setProperty_nonatomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_storeStrong(id *location, id obj)
{
}

id objc_storeWeak(id *location, id obj)
{
  return (id)MEMORY[0x1F4181A18](location, obj);
}

void objc_terminate(void)
{
}

id objc_unsafeClaimAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1F4181A40](a1);
}

int open(const char *a1, int a2, ...)
{
  return MEMORY[0x1F40CD0E0](a1, *(void *)&a2);
}

uint64_t os_eligibility_get_domain_answer()
{
  return MEMORY[0x1F40CD2B0]();
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x1F40CD360](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x1F40CD3B8](oslog, type);
}

BOOL os_signpost_enabled(os_log_t log)
{
  return MEMORY[0x1F40CD550](log);
}

os_signpost_id_t os_signpost_id_generate(os_log_t log)
{
  return MEMORY[0x1F40CD558](log);
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
}

uint64_t os_variant_has_internal_diagnostics()
{
  return MEMORY[0x1F40CD650]();
}

int raise(int a1)
{
  return MEMORY[0x1F40CDC00](*(void *)&a1);
}

ssize_t read(int a1, void *a2, size_t a3)
{
  return MEMORY[0x1F40CDC50](*(void *)&a1, a2, a3);
}

void (__cdecl *__cdecl signal(int a1, void (__cdecl *a2)(int)))(int)
{
  return (void (__cdecl *)(int))MEMORY[0x1F40CE030](*(void *)&a1, a2);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x1F40CE158](__s1, __s2);
}

char *__cdecl strerror(int __errnum)
{
  return (char *)MEMORY[0x1F40CE188](*(void *)&__errnum);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x1F40CE1C8](__s);
}

int sysctl(int *a1, u_int a2, void *a3, size_t *a4, void *a5, size_t a6)
{
  return MEMORY[0x1F40CE3C0](a1, *(void *)&a2, a3, a4, a5, a6);
}

int sysctlbyname(const char *a1, void *a2, size_t *a3, void *a4, size_t a5)
{
  return MEMORY[0x1F40CE3D0](a1, a2, a3, a4, a5);
}

int sysctlnametomib(const char *a1, int *a2, size_t *a3)
{
  return MEMORY[0x1F40CE3E0](a1, a2, a3);
}

kern_return_t task_info(task_name_t target_task, task_flavor_t flavor, task_info_t task_info_out, mach_msg_type_number_t *task_info_outCnt)
{
  return MEMORY[0x1F40CE470](*(void *)&target_task, *(void *)&flavor, task_info_out, task_info_outCnt);
}

void uuid_clear(uuid_t uu)
{
}

int uuid_is_null(const uuid_t uu)
{
  return MEMORY[0x1F40CE658](uu);
}

void uuid_unparse_upper(const uuid_t uu, uuid_string_t out)
{
}

xpc_object_t xpc_BOOL_create(BOOL value)
{
  return (xpc_object_t)MEMORY[0x1F40CEB10](value);
}

void xpc_connection_activate(xpc_connection_t connection)
{
}

void xpc_connection_cancel(xpc_connection_t connection)
{
}

xpc_connection_t xpc_connection_create_mach_service(const char *name, dispatch_queue_t targetq, uint64_t flags)
{
  return (xpc_connection_t)MEMORY[0x1F40CEBD0](name, targetq, flags);
}

void xpc_connection_resume(xpc_connection_t connection)
{
}

void xpc_connection_send_barrier(xpc_connection_t connection, dispatch_block_t barrier)
{
}

void xpc_connection_send_message(xpc_connection_t connection, xpc_object_t message)
{
}

void xpc_connection_send_message_with_reply(xpc_connection_t connection, xpc_object_t message, dispatch_queue_t replyq, xpc_handler_t handler)
{
}

void xpc_connection_set_event_handler(xpc_connection_t connection, xpc_handler_t handler)
{
}

xpc_object_t xpc_data_create(const void *bytes, size_t length)
{
  return (xpc_object_t)MEMORY[0x1F40CED90](bytes, length);
}

const void *__cdecl xpc_data_get_bytes_ptr(xpc_object_t xdata)
{
  return (const void *)MEMORY[0x1F40CEDB0](xdata);
}

size_t xpc_data_get_length(xpc_object_t xdata)
{
  return MEMORY[0x1F40CEDC0](xdata);
}

xpc_object_t xpc_dictionary_create(const char *const *keys, xpc_object_t *values, size_t count)
{
  return (xpc_object_t)MEMORY[0x1F40CEE20](keys, values, count);
}

BOOL xpc_dictionary_get_BOOL(xpc_object_t xdict, const char *key)
{
  return MEMORY[0x1F40CEE80](xdict, key);
}

xpc_object_t xpc_dictionary_get_dictionary(xpc_object_t xdict, const char *key)
{
  return (xpc_object_t)MEMORY[0x1F40CEEA8](xdict, key);
}

int64_t xpc_dictionary_get_int64(xpc_object_t xdict, const char *key)
{
  return MEMORY[0x1F40CEEC8](xdict, key);
}

uint64_t xpc_dictionary_get_uint64(xpc_object_t xdict, const char *key)
{
  return MEMORY[0x1F40CEEF8](xdict, key);
}

xpc_object_t xpc_dictionary_get_value(xpc_object_t xdict, const char *key)
{
  return (xpc_object_t)MEMORY[0x1F40CEF10](xdict, key);
}

void xpc_dictionary_set_data(xpc_object_t xdict, const char *key, const void *bytes, size_t length)
{
}

void xpc_dictionary_set_string(xpc_object_t xdict, const char *key, const char *string)
{
}

void xpc_dictionary_set_uint64(xpc_object_t xdict, const char *key, uint64_t value)
{
}

uint64_t xpc_get_instance()
{
  return MEMORY[0x1F40CF130]();
}

xpc_type_t xpc_get_type(xpc_object_t object)
{
  return (xpc_type_t)MEMORY[0x1F40CF148](object);
}

xpc_object_t xpc_int64_create(int64_t value)
{
  return (xpc_object_t)MEMORY[0x1F40CF188](value);
}

xpc_object_t xpc_shmem_create(void *region, size_t length)
{
  return (xpc_object_t)MEMORY[0x1F40CF268](region, length);
}

size_t xpc_shmem_map(xpc_object_t xshmem, void **region)
{
  return MEMORY[0x1F40CF278](xshmem, region);
}

xpc_object_t xpc_string_create(const char *string)
{
  return (xpc_object_t)MEMORY[0x1F40CF290](string);
}

size_t xpc_string_get_length(xpc_object_t xstring)
{
  return MEMORY[0x1F40CF2B8](xstring);
}

const char *__cdecl xpc_string_get_string_ptr(xpc_object_t xstring)
{
  return (const char *)MEMORY[0x1F40CF2C8](xstring);
}

uint64_t xpc_transaction_exit_clean()
{
  return MEMORY[0x1F40CF2F0]();
}

xpc_object_t xpc_uint64_create(uint64_t value)
{
  return (xpc_object_t)MEMORY[0x1F40CF320](value);
}