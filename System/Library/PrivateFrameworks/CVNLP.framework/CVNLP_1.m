void sub_1B4C24434(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a18 < 0)
  {
    operator delete(__p);
    if (a28 < 0)
    {
LABEL_5:
      operator delete(a23);
      _Unwind_Resume(a1);
    }
  }
  else if (a28 < 0)
  {
    goto LABEL_5;
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1B4C244A8(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
  {
    operator delete(*(void **)(a1 + 24));
    if ((*(char *)(a1 + 23) & 0x80000000) == 0) {
      return a1;
    }
  }
  else if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)a1);
  return a1;
}

std::locale *sub_1B4C24504(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1F0D55A40;
  locale = a1[17].__locale_;
  if (locale)
  {
    v3 = a1[18].__locale_;
    v4 = a1[17].__locale_;
    if (v3 != locale)
    {
      do
      {
        if (*((char *)v3 - 1) < 0) {
          operator delete(*((void **)v3 - 3));
        }
        v3 = (std::locale::__imp *)((char *)v3 - 24);
      }
      while (v3 != locale);
      v4 = a1[17].__locale_;
    }
    a1[18].__locale_ = locale;
    operator delete(v4);
  }
  v5 = a1[14].__locale_;
  if (v5)
  {
    a1[15].__locale_ = v5;
    operator delete(v5);
  }
  v6 = a1[11].__locale_;
  if (v6)
  {
    v7 = a1[12].__locale_;
    v8 = a1[11].__locale_;
    if (v7 == v6)
    {
LABEL_21:
      a1[12].__locale_ = v6;
      operator delete(v8);
      goto LABEL_22;
    }
    while (1)
    {
      if (*((char *)v7 - 1) < 0)
      {
        operator delete(*((void **)v7 - 3));
        if (*((char *)v7 - 25) < 0) {
LABEL_19:
        }
          operator delete(*((void **)v7 - 6));
      }
      else if (*((char *)v7 - 25) < 0)
      {
        goto LABEL_19;
      }
      v7 = (std::locale::__imp *)((char *)v7 - 48);
      if (v7 == v6)
      {
        v8 = a1[11].__locale_;
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  v9 = a1[8].__locale_;
  if (v9)
  {
    a1[9].__locale_ = v9;
    operator delete(v9);
  }
  v10 = a1[5].__locale_;
  if (v10)
  {
    a1[6].__locale_ = v10;
    operator delete(v10);
  }
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&unk_1F0D55928;
  v11 = a1[1].__locale_;
  if (v11) {
    (*(void (**)(std::locale::__imp *))(*(void *)v11 + 8))(v11);
  }
  return a1;
}

void sub_1B4C24678(uint64_t a1, uint64_t a2, unsigned char *__src, unsigned char *a4)
{
  size_t v4 = a4 - __src;
  if ((unint64_t)(a4 - __src) >= 0x7FFFFFFFFFFFFFF8) {
    sub_1B4BB33D8();
  }
  if (v4 <= 0x16)
  {
    HIBYTE(v19) = (_BYTE)a4 - (_BYTE)__src;
    p_dst = (void **)&__dst;
    if (__src == a4) {
      goto LABEL_9;
    }
LABEL_8:
    memcpy(p_dst, __src, v4);
    p_dst = (void **)((char *)p_dst + v4);
    goto LABEL_9;
  }
  uint64_t v10 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v4 | 7) != 0x17) {
    uint64_t v10 = v4 | 7;
  }
  uint64_t v11 = v10 + 1;
  p_dst = (void **)operator new(v10 + 1);
  size_t v18 = v4;
  int64_t v19 = v11 | 0x8000000000000000;
  __dst = p_dst;
  if (__src != a4) {
    goto LABEL_8;
  }
LABEL_9:
  *(unsigned char *)p_dst = 0;
  size_t v12 = HIBYTE(v19);
  if (v19 >= 0) {
    v13 = (void **)&__dst;
  }
  else {
    v13 = __dst;
  }
  if (v19 < 0) {
    size_t v12 = v18;
  }
  (*(void (**)(void, void **, char *))(**(void **)(a2 + 16) + 32))(*(void *)(a2 + 16), v13, (char *)v13 + v12);
  uint64_t v14 = *(unsigned __int8 *)(a1 + 23);
  int v15 = (char)v14;
  if ((v14 & 0x80u) != 0) {
    uint64_t v14 = *(void *)(a1 + 8);
  }
  if (v14 == 1)
  {
LABEL_25:
    if ((SHIBYTE(v19) & 0x80000000) == 0) {
      return;
    }
    goto LABEL_26;
  }
  if (v14 == 12)
  {
    if (v15 >= 0) {
      v16 = (unsigned char *)a1;
    }
    else {
      v16 = *(unsigned char **)a1;
    }
    v16[11] = v16[3];
    if (SHIBYTE(v19) < 0) {
      goto LABEL_26;
    }
    return;
  }
  if ((v15 & 0x80000000) == 0)
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 23) = 0;
    goto LABEL_25;
  }
  **(unsigned char **)a1 = 0;
  *(void *)(a1 + 8) = 0;
  if (SHIBYTE(v19) < 0) {
LABEL_26:
  }
    operator delete(__dst);
}

void sub_1B4C2480C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B4C24828()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1BA992590](exception, 5);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1B4C2486C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_1B4C24880(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, std::string *a4, uint64_t a5)
{
  if (a2 == a3) {
    sub_1B4C21D74();
  }
  switch(*a2)
  {
    case 'D':
      int v7 = *(_DWORD *)(a5 + 164) | 0x400;
      goto LABEL_9;
    case 'E':
    case 'F':
    case 'G':
    case 'H':
    case 'I':
    case 'J':
    case 'K':
    case 'L':
    case 'M':
    case 'N':
    case 'O':
    case 'P':
    case 'Q':
    case 'R':
    case 'T':
    case 'U':
    case 'V':
    case 'X':
    case 'Y':
    case 'Z':
    case '[':
    case '\\':
    case ']':
    case '^':
    case '_':
    case 'a':
    case 'c':
    case 'e':
    case 'f':
    case 'g':
    case 'h':
    case 'i':
    case 'j':
    case 'k':
    case 'l':
    case 'm':
    case 'n':
    case 'o':
    case 'p':
    case 'q':
    case 'r':
    case 't':
    case 'u':
    case 'v':
      return sub_1B4C21DCC(a1, a2, a3, a4);
    case 'S':
      int v7 = *(_DWORD *)(a5 + 164) | 0x4000;
LABEL_9:
      *(_DWORD *)(a5 + 164) = v7;
      return a2 + 1;
    case 'W':
      *(_DWORD *)(a5 + 164) |= 0x500u;
      if (!*(unsigned char *)(a5 + 169))
      {
        v16 = (void *)(a5 + 64);
        size_t v18 = *(unsigned char **)(a5 + 72);
        unint64_t v17 = *(void *)(a5 + 80);
        if (*(unsigned char *)(a5 + 170))
        {
          if ((unint64_t)v18 >= v17)
          {
            int64_t v19 = (unsigned char *)*v16;
            unint64_t v20 = (unint64_t)&v18[-*v16];
            unint64_t v21 = v20 + 1;
            if ((uint64_t)(v20 + 1) < 0) {
              goto LABEL_110;
            }
            unint64_t v22 = v17 - (void)v19;
            if (2 * v22 > v21) {
              unint64_t v21 = 2 * v22;
            }
            if (v22 >= 0x3FFFFFFFFFFFFFFFLL) {
              size_t v23 = 0x7FFFFFFFFFFFFFFFLL;
            }
            else {
              size_t v23 = v21;
            }
            if (v23) {
              v24 = operator new(v23);
            }
            else {
              v24 = 0;
            }
            v41 = &v24[v20];
            v42 = &v24[v23];
            v24[v20] = 95;
            uint64_t v31 = (uint64_t)&v24[v20 + 1];
            if (v18 != v19)
            {
              if (v20 >= 8 && (unint64_t)(v19 - v24) >= 0x20)
              {
                if (v20 < 0x20)
                {
                  unint64_t v43 = 0;
                  goto LABEL_79;
                }
                unint64_t v43 = v20 & 0xFFFFFFFFFFFFFFE0;
                v53 = (long long *)(v18 - 16);
                v54 = &v24[v18 - 16 - v19];
                unint64_t v55 = v20 & 0xFFFFFFFFFFFFFFE0;
                do
                {
                  long long v56 = *v53;
                  *(v54 - 1) = *(v53 - 1);
                  _OWORD *v54 = v56;
                  v54 -= 2;
                  v53 -= 2;
                  v55 -= 32;
                }
                while (v55);
                if (v20 == v43) {
                  goto LABEL_105;
                }
                if ((v20 & 0x18) != 0)
                {
LABEL_79:
                  v41 -= v20 & 0xFFFFFFFFFFFFFFF8;
                  v57 = &v18[-v43 - 8];
                  v58 = &v24[v57 - v19];
                  unint64_t v59 = v43 - (v20 & 0xFFFFFFFFFFFFFFF8);
                  do
                  {
                    uint64_t v60 = *(void *)v57;
                    v57 -= 8;
                    *v58-- = v60;
                    v59 += 8;
                  }
                  while (v59);
                  v18 -= v20 & 0xFFFFFFFFFFFFFFF8;
                  if (v20 == (v20 & 0xFFFFFFFFFFFFFFF8)) {
                    goto LABEL_105;
                  }
                  goto LABEL_99;
                }
                v41 -= v43;
                v18 -= v43;
              }
LABEL_99:
              v71 = v41 - 1;
              do
              {
                char v72 = *--v18;
                *v71-- = v72;
              }
              while (v18 != v19);
LABEL_105:
              size_t v18 = (unsigned char *)*v16;
LABEL_106:
              *(void *)(a5 + 64) = v24;
              *(void *)(a5 + 72) = v31;
              *(void *)(a5 + 80) = v42;
              if (v18) {
                operator delete(v18);
              }
              goto LABEL_108;
            }
LABEL_66:
            v24 = v41;
            goto LABEL_106;
          }
LABEL_38:
          *size_t v18 = 95;
          uint64_t v31 = (uint64_t)(v18 + 1);
LABEL_108:
          *(void *)(a5 + 72) = v31;
          return a2 + 1;
        }
        if ((unint64_t)v18 < v17) {
          goto LABEL_38;
        }
        v36 = (unsigned char *)*v16;
        unint64_t v37 = (unint64_t)&v18[-*v16];
        unint64_t v38 = v37 + 1;
        if ((uint64_t)(v37 + 1) < 0) {
          goto LABEL_110;
        }
        unint64_t v39 = v17 - (void)v36;
        if (2 * v39 > v38) {
          unint64_t v38 = 2 * v39;
        }
        if (v39 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v40 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v40 = v38;
        }
        if (v40) {
          v24 = operator new(v40);
        }
        else {
          v24 = 0;
        }
        v41 = &v24[v37];
        v42 = &v24[v40];
        v24[v37] = 95;
        uint64_t v31 = (uint64_t)&v24[v37 + 1];
        if (v18 == v36) {
          goto LABEL_66;
        }
        if (v37 >= 8 && (unint64_t)(v36 - v24) >= 0x20)
        {
          if (v37 < 0x20)
          {
            unint64_t v44 = 0;
            goto LABEL_87;
          }
          unint64_t v44 = v37 & 0xFFFFFFFFFFFFFFE0;
          v61 = (long long *)(v18 - 16);
          v62 = &v24[v18 - 16 - v36];
          unint64_t v63 = v37 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            long long v64 = *v61;
            *(v62 - 1) = *(v61 - 1);
            _OWORD *v62 = v64;
            v62 -= 2;
            v61 -= 2;
            v63 -= 32;
          }
          while (v63);
          if (v37 == v44) {
            goto LABEL_105;
          }
          if ((v37 & 0x18) != 0)
          {
LABEL_87:
            v41 -= v37 & 0xFFFFFFFFFFFFFFF8;
            v65 = &v18[-v44 - 8];
            v66 = &v24[v65 - v36];
            unint64_t v67 = v44 - (v37 & 0xFFFFFFFFFFFFFFF8);
            do
            {
              uint64_t v68 = *(void *)v65;
              v65 -= 8;
              *v66-- = v68;
              v67 += 8;
            }
            while (v67);
            v18 -= v37 & 0xFFFFFFFFFFFFFFF8;
            if (v37 == (v37 & 0xFFFFFFFFFFFFFFF8)) {
              goto LABEL_105;
            }
            goto LABEL_103;
          }
          v41 -= v44;
          v18 -= v44;
        }
LABEL_103:
        v73 = v41 - 1;
        do
        {
          char v74 = *--v18;
          *v73-- = v74;
        }
        while (v18 != v36);
        goto LABEL_105;
      }
      char v11 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a5 + 24) + 40))(*(void *)(a5 + 24), 95);
      char v12 = v11;
      uint64_t v14 = *(unsigned char **)(a5 + 72);
      unint64_t v13 = *(void *)(a5 + 80);
      if ((unint64_t)v14 >= v13)
      {
        v25 = *(unsigned char **)(a5 + 64);
        unint64_t v26 = v14 - v25;
        uint64_t v27 = v14 - v25 + 1;
        if (v27 >= 0)
        {
          unint64_t v28 = v13 - (void)v25;
          if (2 * v28 > v27) {
            uint64_t v27 = 2 * v28;
          }
          if (v28 >= 0x3FFFFFFFFFFFFFFFLL) {
            size_t v29 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            size_t v29 = v27;
          }
          if (v29) {
            v30 = operator new(v29);
          }
          else {
            v30 = 0;
          }
          v32 = &v30[v26];
          v33 = &v30[v29];
          v30[v26] = v12;
          uint64_t v34 = (uint64_t)&v30[v26 + 1];
          if (v14 == v25)
          {
            v30 += v26;
LABEL_95:
            *(void *)(a5 + 64) = v30;
            *(void *)(a5 + 72) = v34;
            *(void *)(a5 + 80) = v33;
            if (v14) {
              operator delete(v14);
            }
            *(void *)(a5 + 72) = v34;
            return a2 + 1;
          }
          if (v26 >= 8 && (unint64_t)(v25 - v30) >= 0x20)
          {
            if (v26 < 0x20)
            {
              unint64_t v35 = 0;
              goto LABEL_71;
            }
            unint64_t v35 = v26 & 0xFFFFFFFFFFFFFFE0;
            v45 = (long long *)(v14 - 16);
            v46 = &v30[v14 - 16 - v25];
            unint64_t v47 = v26 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              long long v48 = *v45;
              *(v46 - 1) = *(v45 - 1);
              _OWORD *v46 = v48;
              v46 -= 2;
              v45 -= 2;
              v47 -= 32;
            }
            while (v47);
            if (v26 == v35) {
              goto LABEL_94;
            }
            if ((v26 & 0x18) != 0)
            {
LABEL_71:
              v32 -= v26 & 0xFFFFFFFFFFFFFFF8;
              v49 = &v14[-v35 - 8];
              v50 = &v30[v49 - v25];
              unint64_t v51 = v35 - (v26 & 0xFFFFFFFFFFFFFFF8);
              do
              {
                uint64_t v52 = *(void *)v49;
                v49 -= 8;
                *v50-- = v52;
                v51 += 8;
              }
              while (v51);
              v14 -= v26 & 0xFFFFFFFFFFFFFFF8;
              if (v26 == (v26 & 0xFFFFFFFFFFFFFFF8)) {
                goto LABEL_94;
              }
              goto LABEL_92;
            }
            v32 -= v35;
            v14 -= v35;
          }
LABEL_92:
          v69 = v32 - 1;
          do
          {
            char v70 = *--v14;
            *v69-- = v70;
          }
          while (v14 != v25);
LABEL_94:
          uint64_t v14 = *(unsigned char **)(a5 + 64);
          goto LABEL_95;
        }
LABEL_110:
        sub_1B4C0E0BC();
      }
      *uint64_t v14 = v11;
      *(void *)(a5 + 72) = v14 + 1;
      return a2 + 1;
    case 'b':
      v9 = a4;
      std::string::value_type v8 = 8;
      goto LABEL_14;
    case 'd':
      int v15 = *(_DWORD *)(a5 + 160) | 0x400;
      goto LABEL_17;
    case 's':
      int v15 = *(_DWORD *)(a5 + 160) | 0x4000;
LABEL_17:
      *(_DWORD *)(a5 + 160) = v15;
      return a2 + 1;
    case 'w':
      *(_DWORD *)(a5 + 160) |= 0x500u;
      sub_1B4C230B8(a5, 95);
      return a2 + 1;
    default:
      if (*a2) {
        return sub_1B4C21DCC(a1, a2, a3, a4);
      }
      std::string::value_type v8 = 0;
      v9 = a4;
LABEL_14:
      std::string::operator=(v9, v8);
      return a2 + 1;
  }
}

char *sub_1B4C24EBC(uint64_t a1, char *a2, char *a3, std::string *this)
{
  if (a2 == a3) {
LABEL_43:
  }
    sub_1B4C21D74();
  int v5 = *a2;
  switch(v5)
  {
    case '""':
    case '/':
    case '\\':
      if (!this) {
        sub_1B4C222B8(a1);
      }
      std::string::operator=(this, v5);
      return a2 + 1;
    case 'a':
      if (!this) {
        sub_1B4C222B8(a1);
      }
      std::string::operator=(this, 7);
      return a2 + 1;
    case 'b':
      if (!this) {
        sub_1B4C222B8(a1);
      }
      std::string::operator=(this, 8);
      return a2 + 1;
    case 'f':
      if (!this) {
        sub_1B4C222B8(a1);
      }
      std::string::operator=(this, 12);
      return a2 + 1;
    case 'n':
      if (!this) {
        sub_1B4C222B8(a1);
      }
      std::string::operator=(this, 10);
      return a2 + 1;
    case 'r':
      if (!this) {
        sub_1B4C222B8(a1);
      }
      std::string::operator=(this, 13);
      return a2 + 1;
    case 't':
      if (!this) {
        sub_1B4C222B8(a1);
      }
      std::string::operator=(this, 9);
      return a2 + 1;
    case 'v':
      if (!this) {
        sub_1B4C222B8(a1);
      }
      std::string::operator=(this, 11);
      return a2 + 1;
    default:
      if ((v5 & 0xFFFFFFF8) != 0x30) {
        goto LABEL_43;
      }
      int v7 = a2 + 1;
      if (a2 + 1 == a3)
      {
        int v7 = a3;
LABEL_32:
        std::string::value_type v12 = v5 - 48;
        if (!this) {
          goto LABEL_42;
        }
        goto LABEL_33;
      }
      if ((*v7 & 0xF8) != 0x30) {
        goto LABEL_32;
      }
      std::string::value_type v8 = *v7 + 8 * (v5 - 48) - 48;
      if (a2 + 2 == a3)
      {
        int v7 = a3;
        std::string::value_type v12 = v8;
        if (!this) {
          goto LABEL_42;
        }
      }
      else
      {
        char v9 = a2[2];
        int v10 = v9 & 0xF8;
        std::string::value_type v11 = v9 + 8 * v8 - 48;
        if (v10 == 48) {
          int v7 = a2 + 3;
        }
        else {
          int v7 = a2 + 2;
        }
        if (v10 == 48) {
          std::string::value_type v8 = v11;
        }
        std::string::value_type v12 = v8;
        if (!this) {
LABEL_42:
        }
          sub_1B4C222B8(a1);
      }
LABEL_33:
      std::string::operator=(this, v12);
      return v7;
  }
}

void sub_1B4C25308(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 169))
  {
    unsigned __int8 v5 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a2);
    __int16 v6 = v5 | (unsigned __int16)((*(unsigned __int16 (**)(void, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a3) << 8);
    std::string::value_type v8 = *(char **)(a1 + 120);
    unint64_t v7 = *(void *)(a1 + 128);
    if ((unint64_t)v8 >= v7)
    {
      char v9 = *(char **)(a1 + 112);
      uint64_t v10 = v8 - v9;
      if (v8 - v9 > -3)
      {
        uint64_t v11 = v10 >> 1;
        unint64_t v12 = v7 - (void)v9;
        if (v12 <= (v10 >> 1) + 1) {
          unint64_t v13 = v11 + 1;
        }
        else {
          unint64_t v13 = v12;
        }
        if (v12 >= 0x7FFFFFFFFFFFFFFELL) {
          uint64_t v14 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v14 = v13;
        }
        if (!v14)
        {
          int v15 = 0;
          v16 = (_WORD *)(2 * v11);
          unint64_t v17 = 0;
          *(_WORD *)(2 * v11) = v6;
          uint64_t v18 = 2 * v11 + 2;
          int64_t v19 = (char *)(v8 - v9);
          if (v8 == v9) {
            goto LABEL_64;
          }
LABEL_30:
          unint64_t v29 = (unint64_t)(v19 - 2);
          if (v29 < 0x1E) {
            goto LABEL_71;
          }
          if (v8 - v15 - (v10 & 0xFFFFFFFFFFFFFFFELL) < 0x20) {
            goto LABEL_71;
          }
          uint64_t v30 = (v29 >> 1) + 1;
          unint64_t v31 = 2 * (v30 & 0xFFFFFFFFFFFFFFF0);
          v32 = &v8[-v31];
          v16 = (_WORD *)((char *)v16 - v31);
          v33 = &v15[2 * v11 - 16];
          uint64_t v34 = v8 - 16;
          unint64_t v35 = v30 & 0xFFFFFFFFFFFFFFF0;
          do
          {
            long long v36 = *(_OWORD *)v34;
            *(v33 - 1) = *((_OWORD *)v34 - 1);
            _OWORD *v33 = v36;
            v33 -= 2;
            v34 -= 32;
            v35 -= 16;
          }
          while (v35);
          std::string::value_type v8 = v32;
          if (v30 != (v30 & 0xFFFFFFFFFFFFFFF0))
          {
LABEL_71:
            do
            {
              __int16 v37 = *((_WORD *)v8 - 1);
              v8 -= 2;
              *--v16 = v37;
            }
            while (v8 != v9);
          }
LABEL_63:
          std::string::value_type v8 = *(char **)(a1 + 112);
          goto LABEL_64;
        }
        if ((v14 & 0x8000000000000000) == 0)
        {
          int v15 = operator new(2 * v14);
          v16 = &v15[2 * v11];
          unint64_t v17 = &v15[2 * v14];
          _WORD *v16 = v6;
          uint64_t v18 = (uint64_t)(v16 + 1);
          int64_t v19 = (char *)(v8 - v9);
          if (v8 == v9) {
            goto LABEL_64;
          }
          goto LABEL_30;
        }
LABEL_68:
        sub_1B4BB2D38();
      }
LABEL_67:
      sub_1B4C0E0BC();
    }
LABEL_28:
    *(_WORD *)std::string::value_type v8 = v6;
    uint64_t v18 = (uint64_t)(v8 + 2);
    goto LABEL_66;
  }
  __int16 v6 = a2 | (unsigned __int16)((_WORD)a3 << 8);
  std::string::value_type v8 = *(char **)(a1 + 120);
  unint64_t v20 = *(void *)(a1 + 128);
  if (*(unsigned char *)(a1 + 170))
  {
    if ((unint64_t)v8 < v20) {
      goto LABEL_28;
    }
    unint64_t v21 = *(char **)(a1 + 112);
    uint64_t v22 = v8 - v21;
    if (v8 - v21 <= -3) {
      goto LABEL_67;
    }
    uint64_t v23 = v22 >> 1;
    unint64_t v24 = v20 - (void)v21;
    if (v24 <= (v22 >> 1) + 1) {
      unint64_t v25 = v23 + 1;
    }
    else {
      unint64_t v25 = v24;
    }
    if (v24 >= 0x7FFFFFFFFFFFFFFELL) {
      uint64_t v26 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v26 = v25;
    }
    if (v26)
    {
      if (v26 < 0) {
        goto LABEL_68;
      }
      uint64_t v27 = operator new(2 * v26);
      v16 = &v27[2 * v23];
      unint64_t v17 = &v27[2 * v26];
      _WORD *v16 = v6;
      uint64_t v18 = (uint64_t)(v16 + 1);
      unint64_t v28 = (char *)(v8 - v21);
      if (v8 == v21) {
        goto LABEL_64;
      }
    }
    else
    {
      uint64_t v27 = 0;
      v16 = (_WORD *)(2 * v23);
      unint64_t v17 = 0;
      *(_WORD *)(2 * v23) = v6;
      uint64_t v18 = 2 * v23 + 2;
      unint64_t v28 = (char *)(v8 - v21);
      if (v8 == v21) {
        goto LABEL_64;
      }
    }
    unint64_t v46 = (unint64_t)(v28 - 2);
    if (v46 < 0x1E) {
      goto LABEL_72;
    }
    if (v8 - v27 - (v22 & 0xFFFFFFFFFFFFFFFELL) < 0x20) {
      goto LABEL_72;
    }
    uint64_t v47 = (v46 >> 1) + 1;
    unint64_t v48 = 2 * (v47 & 0xFFFFFFFFFFFFFFF0);
    v49 = &v8[-v48];
    v16 = (_WORD *)((char *)v16 - v48);
    v50 = &v27[2 * v23 - 16];
    unint64_t v51 = v8 - 16;
    unint64_t v52 = v47 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      long long v53 = *(_OWORD *)v51;
      *(v50 - 1) = *((_OWORD *)v51 - 1);
      _OWORD *v50 = v53;
      v50 -= 2;
      v51 -= 32;
      v52 -= 16;
    }
    while (v52);
    std::string::value_type v8 = v49;
    if (v47 != (v47 & 0xFFFFFFFFFFFFFFF0))
    {
LABEL_72:
      do
      {
        __int16 v54 = *((_WORD *)v8 - 1);
        v8 -= 2;
        *--v16 = v54;
      }
      while (v8 != v21);
    }
    goto LABEL_63;
  }
  if ((unint64_t)v8 < v20) {
    goto LABEL_28;
  }
  unint64_t v38 = *(char **)(a1 + 112);
  uint64_t v39 = v8 - v38;
  if (v8 - v38 <= -3) {
    goto LABEL_67;
  }
  uint64_t v40 = v39 >> 1;
  unint64_t v41 = v20 - (void)v38;
  if (v41 <= (v39 >> 1) + 1) {
    unint64_t v42 = v40 + 1;
  }
  else {
    unint64_t v42 = v41;
  }
  if (v41 >= 0x7FFFFFFFFFFFFFFELL) {
    uint64_t v43 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v43 = v42;
  }
  if (!v43)
  {
    unint64_t v44 = 0;
    v16 = (_WORD *)(2 * v40);
    unint64_t v17 = 0;
    *(_WORD *)(2 * v40) = v6;
    uint64_t v18 = 2 * v40 + 2;
    v45 = (char *)(v8 - v38);
    if (v8 == v38) {
      goto LABEL_64;
    }
    goto LABEL_57;
  }
  if (v43 < 0) {
    goto LABEL_68;
  }
  unint64_t v44 = operator new(2 * v43);
  v16 = &v44[2 * v40];
  unint64_t v17 = &v44[2 * v43];
  _WORD *v16 = v6;
  uint64_t v18 = (uint64_t)(v16 + 1);
  v45 = (char *)(v8 - v38);
  if (v8 != v38)
  {
LABEL_57:
    unint64_t v55 = (unint64_t)(v45 - 2);
    if (v55 < 0x1E) {
      goto LABEL_73;
    }
    if (v8 - v44 - (v39 & 0xFFFFFFFFFFFFFFFELL) < 0x20) {
      goto LABEL_73;
    }
    uint64_t v56 = (v55 >> 1) + 1;
    unint64_t v57 = 2 * (v56 & 0xFFFFFFFFFFFFFFF0);
    v58 = &v8[-v57];
    v16 = (_WORD *)((char *)v16 - v57);
    unint64_t v59 = &v44[2 * v40 - 16];
    uint64_t v60 = v8 - 16;
    unint64_t v61 = v56 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      long long v62 = *(_OWORD *)v60;
      *(v59 - 1) = *((_OWORD *)v60 - 1);
      *unint64_t v59 = v62;
      v59 -= 2;
      v60 -= 32;
      v61 -= 16;
    }
    while (v61);
    std::string::value_type v8 = v58;
    if (v56 != (v56 & 0xFFFFFFFFFFFFFFF0))
    {
LABEL_73:
      do
      {
        __int16 v63 = *((_WORD *)v8 - 1);
        v8 -= 2;
        *--v16 = v63;
      }
      while (v8 != v38);
    }
    goto LABEL_63;
  }
LABEL_64:
  *(void *)(a1 + 112) = v16;
  *(void *)(a1 + 120) = v18;
  *(void *)(a1 + 128) = v17;
  if (v8) {
    operator delete(v8);
  }
LABEL_66:
  *(void *)(a1 + 120) = v18;
}

void sub_1B4C256F8()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1BA992590](exception, 1);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1B4C2573C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1B4C25750(uint64_t a1, uint64_t a2, uint64_t a3, std::string::value_type *a4)
{
  std::string::size_type v4 = (std::string::size_type)&a4[-a3];
  if ((unint64_t)&a4[-a3] >= 0x7FFFFFFFFFFFFFF8) {
    sub_1B4BB33D8();
  }
  if (v4 <= 0x16)
  {
    *((unsigned char *)&__s.__r_.__value_.__s + 23) = (_BYTE)a4 - a3;
    p_s = &__s;
    if ((std::string::value_type *)a3 != a4) {
      goto LABEL_4;
    }
LABEL_13:
    uint64_t v10 = p_s;
    goto LABEL_16;
  }
  uint64_t v16 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v4 | 7) != 0x17) {
    uint64_t v16 = v4 | 7;
  }
  uint64_t v17 = v16 + 1;
  p_s = (std::string *)operator new(v16 + 1);
  __s.__r_.__value_.__l.__size_ = v4;
  __s.__r_.__value_.__r.__words[2] = v17 | 0x8000000000000000;
  __s.__r_.__value_.__r.__words[0] = (std::string::size_type)p_s;
  if ((std::string::value_type *)a3 == a4) {
    goto LABEL_13;
  }
LABEL_4:
  if (v4 < 0x20 || (unint64_t)p_s - a3 < 0x20)
  {
    uint64_t v10 = p_s;
    uint64_t v11 = (std::string::value_type *)a3;
    do
    {
LABEL_15:
      std::string::value_type v18 = *v11++;
      v10->__r_.__value_.__s.__data_[0] = v18;
      uint64_t v10 = (std::string *)((char *)v10 + 1);
    }
    while (v11 != a4);
    goto LABEL_16;
  }
  uint64_t v10 = (std::string *)((char *)p_s + (v4 & 0xFFFFFFFFFFFFFFE0));
  uint64_t v11 = (std::string::value_type *)(a3 + (v4 & 0xFFFFFFFFFFFFFFE0));
  unint64_t v12 = (long long *)(a3 + 16);
  unint64_t v13 = &p_s->__r_.__value_.__r.__words[2];
  unint64_t v14 = v4 & 0xFFFFFFFFFFFFFFE0;
  do
  {
    long long v15 = *v12;
    *((_OWORD *)v13 - 1) = *(v12 - 1);
    *(_OWORD *)unint64_t v13 = v15;
    v12 += 2;
    v13 += 4;
    v14 -= 32;
  }
  while (v14);
  if (v4 != (v4 & 0xFFFFFFFFFFFFFFE0)) {
    goto LABEL_15;
  }
LABEL_16:
  v10->__r_.__value_.__s.__data_[0] = 0;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!__s.__r_.__value_.__l.__size_) {
      goto LABEL_24;
    }
    int64_t v19 = (std::string *)__s.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (!*((unsigned char *)&__s.__r_.__value_.__s + 23)) {
      return;
    }
    int64_t v19 = &__s;
  }
  std::__get_collation_name(&v24, (const char *)v19);
  *(_OWORD *)a1 = *(_OWORD *)&v24.__r_.__value_.__l.__data_;
  unint64_t v20 = v24.__r_.__value_.__r.__words[2];
  *(void *)(a1 + 16) = *((void *)&v24.__r_.__value_.__l + 2);
  unint64_t v21 = HIBYTE(v20);
  if ((v21 & 0x80u) != 0) {
    unint64_t v21 = *(void *)(a1 + 8);
  }
  if (v21) {
    goto LABEL_24;
  }
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    if (__s.__r_.__value_.__l.__size_ >= 3) {
      goto LABEL_24;
    }
  }
  else if (HIBYTE(__s.__r_.__value_.__r.__words[2]) >= 3u)
  {
    return;
  }
  (*(void (**)(std::string *__return_ptr))(**(void **)(a2 + 16) + 32))(&v24);
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  *(std::string *)a1 = v24;
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    int v22 = *(unsigned __int8 *)(a1 + 23);
    if (v22 != 12 && v22 != 1)
    {
      *(unsigned char *)a1 = 0;
      *(unsigned char *)(a1 + 23) = 0;
      goto LABEL_24;
    }
    goto LABEL_39;
  }
  uint64_t v23 = *(void *)(a1 + 8);
  if (v23 == 1 || v23 == 12)
  {
LABEL_39:
    std::string::operator=((std::string *)a1, &__s);
    goto LABEL_24;
  }
  **(unsigned char **)a1 = 0;
  *(void *)(a1 + 8) = 0;
LABEL_24:
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__s.__r_.__value_.__l.__data_);
  }
}

void sub_1B4C259C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (*(char *)(v17 + 23) < 0)
  {
    operator delete(*(void **)v17);
    if ((a17 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a17 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1B4C25A08()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1BA992590](exception, 2);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1B4C25A4C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1B4C25A60(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  unint64_t v4 = (unint64_t)&a4[-a3];
  if ((unint64_t)&a4[-a3] >= 0x7FFFFFFFFFFFFFF8) {
    sub_1B4BB33D8();
  }
  if (v4 > 0x16)
  {
    uint64_t v15 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v15 = v4 | 7;
    }
    uint64_t v16 = v15 + 1;
    p_p = operator new(v15 + 1);
    unint64_t v21 = v4;
    int64_t v22 = v16 | 0x8000000000000000;
    __p = p_p;
    if ((char *)a3 != a4) {
      goto LABEL_4;
    }
LABEL_13:
    char v9 = p_p;
    goto LABEL_16;
  }
  HIBYTE(v22) = (_BYTE)a4 - a3;
  p_p = &__p;
  if ((char *)a3 == a4) {
    goto LABEL_13;
  }
LABEL_4:
  if (v4 < 0x20 || (unint64_t)p_p - a3 < 0x20)
  {
    char v9 = p_p;
    uint64_t v10 = (char *)a3;
  }
  else
  {
    char v9 = (char *)p_p + (v4 & 0xFFFFFFFFFFFFFFE0);
    uint64_t v10 = (char *)(a3 + (v4 & 0xFFFFFFFFFFFFFFE0));
    uint64_t v11 = (long long *)(a3 + 16);
    unint64_t v12 = p_p + 1;
    unint64_t v13 = v4 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      long long v14 = *v11;
      *(v12 - 1) = *(v11 - 1);
      *unint64_t v12 = v14;
      v11 += 2;
      v12 += 2;
      v13 -= 32;
    }
    while (v13);
    if (v4 == (v4 & 0xFFFFFFFFFFFFFFE0)) {
      goto LABEL_16;
    }
  }
  do
  {
    char v17 = *v10++;
    *v9++ = v17;
  }
  while (v10 != a4);
LABEL_16:
  unsigned char *v9 = 0;
  unint64_t v18 = HIBYTE(v22);
  if (v22 >= 0) {
    int64_t v19 = (char *)&__p;
  }
  else {
    int64_t v19 = (char *)__p;
  }
  if (v22 < 0) {
    unint64_t v18 = v21;
  }
  (*(void (**)(void, char *, char *))(**(void **)(a2 + 16) + 32))(*(void *)(a2 + 16), v19, &v19[v18]);
  if (SHIBYTE(v22) < 0) {
    operator delete(__p);
  }
}

void sub_1B4C25BF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B4C25C0C()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1BA992590](exception, 9);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1B4C25C50(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *sub_1B4C25C64(void **a1, uint64_t a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 4);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 > 0x555555555555555) {
    sub_1B4C0E0BC();
  }
  if (0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4) > v3) {
    unint64_t v3 = 0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v6 = 0x555555555555555;
  }
  else {
    unint64_t v6 = v3;
  }
  if (v6)
  {
    if (v6 > 0x555555555555555) {
      sub_1B4BB2D38();
    }
    unint64_t v7 = (char *)operator new(48 * v6);
  }
  else
  {
    unint64_t v7 = 0;
  }
  std::string::value_type v8 = &v7[48 * v2];
  *((void *)v8 + 2) = *(void *)(a2 + 16);
  *(_OWORD *)std::string::value_type v8 = *(_OWORD *)a2;
  char v9 = &v7[48 * v6];
  long long v10 = *(_OWORD *)(a2 + 24);
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(_OWORD *)(v8 + 24) = v10;
  *((void *)v8 + 5) = *(void *)(a2 + 40);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  uint64_t v11 = v8 + 48;
  unint64_t v12 = (void **)*a1;
  unint64_t v13 = (void **)a1[1];
  if (v13 != *a1)
  {
    do
    {
      long long v14 = *((_OWORD *)v13 - 3);
      *((void *)v8 - 4) = *(v13 - 4);
      *((_OWORD *)v8 - 3) = v14;
      *(v13 - 5) = 0;
      *(v13 - 4) = 0;
      *(v13 - 6) = 0;
      long long v15 = *(_OWORD *)(v13 - 3);
      *((void *)v8 - 1) = *(v13 - 1);
      *(_OWORD *)(v8 - 24) = v15;
      v8 -= 48;
      *(v13 - 2) = 0;
      *(v13 - 1) = 0;
      *(v13 - 3) = 0;
      v13 -= 6;
    }
    while (v13 != v12);
    unint64_t v13 = (void **)*a1;
    uint64_t v16 = (void **)a1[1];
    *a1 = v8;
    a1[1] = v11;
    a1[2] = v9;
    while (1)
    {
      if (v16 == v13) {
        goto LABEL_22;
      }
      if (*((char *)v16 - 1) < 0)
      {
        operator delete(*(v16 - 3));
        if ((*((char *)v16 - 25) & 0x80000000) == 0) {
          goto LABEL_14;
        }
      }
      else if ((*((char *)v16 - 25) & 0x80000000) == 0)
      {
        goto LABEL_14;
      }
      operator delete(*(v16 - 6));
LABEL_14:
      v16 -= 6;
    }
  }
  *a1 = v8;
  a1[1] = v11;
  a1[2] = v9;
LABEL_22:
  if (v13) {
    operator delete(v13);
  }
  return v11;
}

void *sub_1B4C25E00(void *a1)
{
  *a1 = &unk_1F0D55928;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void sub_1B4C25E6C(void *a1)
{
  *a1 = &unk_1F0D55928;
  uint64_t v1 = a1[1];
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  JUMPOUT(0x1BA9929C0);
}

uint64_t sub_1B4C25EF8(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(void *)(*(void *)(a2 + 32) + 24 * (*(_DWORD *)(result + 16) - 1)) = *(void *)(a2 + 16);
  *(void *)(a2 + 80) = *(void *)(result + 8);
  return result;
}

void *sub_1B4C25F28(void *a1)
{
  *a1 = &unk_1F0D55928;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void sub_1B4C25F94(void *a1)
{
  *a1 = &unk_1F0D55928;
  uint64_t v1 = a1[1];
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  JUMPOUT(0x1BA9929C0);
}

uint64_t sub_1B4C26020(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  uint64_t v2 = *(void *)(a2 + 32) + 24 * (*(_DWORD *)(result + 16) - 1);
  *(void *)(v2 + 8) = *(void *)(a2 + 16);
  *(unsigned char *)(v2 + 16) = 1;
  *(void *)(a2 + 80) = *(void *)(result + 8);
  return result;
}

void sub_1B4C26058()
{
}

void sub_1B4C261B0(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_1B4C261E8()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1BA992590](exception, 8);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1B4C2622C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1B4C26240()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1BA992590](exception, 7);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1B4C26284(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *sub_1B4C26298(void *a1)
{
  *a1 = &unk_1F0D55958;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *a1 = &unk_1F0D55928;
  uint64_t v3 = a1[1];
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

void sub_1B4C2634C(void *a1)
{
  *a1 = &unk_1F0D55958;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *a1 = &unk_1F0D55928;
  uint64_t v3 = a1[1];
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  JUMPOUT(0x1BA9929C0);
}

uint64_t sub_1B4C26420(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(result + 40);
  uint64_t v3 = *(void *)(a2 + 56);
  unint64_t v4 = (unint64_t *)(v3 + 16 * v2);
  if (*(_DWORD *)a2 != -991)
  {
    unint64_t *v4 = 0;
    if (!*(void *)(result + 32))
    {
      *(_DWORD *)a2 = -994;
      goto LABEL_28;
    }
    if (*(void *)(result + 24))
    {
      *(_DWORD *)a2 = -994;
      *(void *)(a2 + 80) = *(void *)(result + 8);
      *(void *)(v3 + 16 * v2 + 8) = *(void *)(a2 + 16);
      int v20 = *(_DWORD *)(result + 44);
      int v21 = *(_DWORD *)(result + 48);
      if (v20 == v21) {
        return result;
      }
      uint64_t v22 = (v21 - 1);
      uint64_t v23 = (v20 - 1);
      uint64_t v24 = *(void *)(a2 + 24);
      uint64_t v25 = *(void *)(a2 + 32);
      uint64_t v26 = v22 - v23;
      if ((unint64_t)(v22 - v23) >= 2)
      {
        uint64_t v27 = (v26 & 0xFFFFFFFFFFFFFFFELL) + v23;
        uint64_t v28 = v25 + 24 * v23 + 24;
        unint64_t v29 = v26 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          *(void *)(v28 - 24) = v24;
          *(void *)(v28 - 16) = v24;
          *(void *)uint64_t v28 = v24;
          *(void *)(v28 + 8) = v24;
          *(unsigned char *)(v28 - 8) = 0;
          *(unsigned char *)(v28 + 16) = 0;
          v28 += 48;
          v29 -= 2;
        }
        while (v29);
        if (v26 == (v26 & 0xFFFFFFFFFFFFFFFELL)) {
          return result;
        }
      }
      else
      {
        uint64_t v27 = v23;
      }
      uint64_t v30 = v22 - v27;
      unint64_t v31 = (unsigned char *)(v25 + 24 * v27 + 16);
      do
      {
        *((void *)v31 - 2) = v24;
        *((void *)v31 - 1) = v24;
        *unint64_t v31 = 0;
        v31 += 24;
        --v30;
      }
      while (v30);
      return result;
    }
LABEL_26:
    *(_DWORD *)a2 = -992;
    return result;
  }
  unint64_t v5 = *v4 + 1;
  unint64_t *v4 = v5;
  unint64_t v6 = *(void *)(result + 24);
  unint64_t v7 = *(void *)(result + 32);
  BOOL v8 = v5 < v7;
  if (v5 < v7 && v5 >= v6) {
    BOOL v8 = v5 < v7 && *(void *)(v3 + 16 * v2 + 8) != *(void *)(a2 + 16);
  }
  if (v8 && v5 >= v6) {
    goto LABEL_26;
  }
  *(_DWORD *)a2 = -994;
  if (!v8)
  {
LABEL_28:
    *(void *)(a2 + 80) = *(void *)(result + 16);
    return result;
  }
  *(void *)(a2 + 80) = *(void *)(result + 8);
  *(void *)(v3 + 16 * v2 + 8) = *(void *)(a2 + 16);
  int v12 = *(_DWORD *)(result + 44);
  int v13 = *(_DWORD *)(result + 48);
  if (v12 == v13) {
    return result;
  }
  uint64_t v14 = (v13 - 1);
  uint64_t v15 = (v12 - 1);
  uint64_t v16 = *(void *)(a2 + 24);
  uint64_t v17 = *(void *)(a2 + 32);
  uint64_t v18 = v14 - v15;
  if ((unint64_t)(v14 - v15) < 2)
  {
    uint64_t v19 = v15;
LABEL_39:
    uint64_t v34 = v14 - v19;
    unint64_t v35 = (unsigned char *)(v17 + 24 * v19 + 16);
    do
    {
      *((void *)v35 - 2) = v16;
      *((void *)v35 - 1) = v16;
      *unint64_t v35 = 0;
      v35 += 24;
      --v34;
    }
    while (v34);
    return result;
  }
  uint64_t v19 = (v18 & 0xFFFFFFFFFFFFFFFELL) + v15;
  uint64_t v32 = v17 + 24 * v15 + 24;
  unint64_t v33 = v18 & 0xFFFFFFFFFFFFFFFELL;
  do
  {
    *(void *)(v32 - 24) = v16;
    *(void *)(v32 - 16) = v16;
    *(void *)uint64_t v32 = v16;
    *(void *)(v32 + 8) = v16;
    *(unsigned char *)(v32 - 8) = 0;
    *(unsigned char *)(v32 + 16) = 0;
    v32 += 48;
    v33 -= 2;
  }
  while (v33);
  if (v18 != (v18 & 0xFFFFFFFFFFFFFFFELL)) {
    goto LABEL_39;
  }
  return result;
}

uint64_t sub_1B4C26604(uint64_t result, int a2, uint64_t a3)
{
  *(_DWORD *)a3 = -994;
  if (*(unsigned __int8 *)(result + 52) == a2)
  {
    *(void *)(a3 + 80) = *(void *)(result + 16);
    return result;
  }
  *(void *)(a3 + 80) = *(void *)(result + 8);
  int v3 = *(_DWORD *)(result + 44);
  *(void *)(*(void *)(a3 + 56) + 16 * *(unsigned int *)(result + 40) + 8) = *(void *)(a3 + 16);
  int v4 = *(_DWORD *)(result + 48);
  if (v3 != v4)
  {
    uint64_t v5 = (v4 - 1);
    uint64_t v6 = (v3 - 1);
    uint64_t v7 = *(void *)(a3 + 24);
    uint64_t v8 = *(void *)(a3 + 32);
    uint64_t v9 = v5 - v6;
    if ((unint64_t)(v5 - v6) < 2)
    {
      uint64_t v10 = v6;
LABEL_9:
      uint64_t v13 = v5 - v10;
      uint64_t v14 = (unsigned char *)(v8 + 24 * v10 + 16);
      do
      {
        *((void *)v14 - 2) = v7;
        *((void *)v14 - 1) = v7;
        *uint64_t v14 = 0;
        v14 += 24;
        --v13;
      }
      while (v13);
      return result;
    }
    uint64_t v10 = (v9 & 0xFFFFFFFFFFFFFFFELL) + v6;
    uint64_t v11 = v8 + 24 * v6 + 24;
    unint64_t v12 = v9 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      *(void *)(v11 - 24) = v7;
      *(void *)(v11 - 16) = v7;
      *(void *)uint64_t v11 = v7;
      *(void *)(v11 + 8) = v7;
      *(unsigned char *)(v11 - 8) = 0;
      *(unsigned char *)(v11 + 16) = 0;
      v11 += 48;
      v12 -= 2;
    }
    while (v12);
    if (v9 != (v9 & 0xFFFFFFFFFFFFFFFELL)) {
      goto LABEL_9;
    }
  }
  return result;
}

void *sub_1B4C266CC(void *a1)
{
  *a1 = &unk_1F0D55958;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *a1 = &unk_1F0D55928;
  uint64_t v3 = a1[1];
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

void sub_1B4C26780(void *a1)
{
  *a1 = &unk_1F0D55958;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *a1 = &unk_1F0D55928;
  uint64_t v3 = a1[1];
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  JUMPOUT(0x1BA9929C0);
}

void sub_1B4C26858()
{
}

uint64_t sub_1B4C2686C(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -991;
  *(void *)(a2 + 80) = *(void *)(result + 8);
  return result;
}

void *sub_1B4C26880(void *a1)
{
  *a1 = &unk_1F0D55958;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *a1 = &unk_1F0D55928;
  uint64_t v3 = a1[1];
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

void sub_1B4C26934(void *a1)
{
  *a1 = &unk_1F0D55958;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *a1 = &unk_1F0D55928;
  uint64_t v3 = a1[1];
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  JUMPOUT(0x1BA9929C0);
}

void sub_1B4C26A08(uint64_t a1, _DWORD *a2)
{
  *a2 = -992;
}

uint64_t sub_1B4C26A14(uint64_t result, int a2, uint64_t a3)
{
  *(_DWORD *)a3 = -994;
  uint64_t v3 = 8;
  if (a2) {
    uint64_t v3 = 16;
  }
  *(void *)(a3 + 80) = *(void *)(result + v3);
  return result;
}

void sub_1B4C26A3C()
{
}

uint64_t sub_1B4C26A50(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(void *)(a2 + 80) = *(void *)(result + 8);
  return result;
}

void sub_1B4C26A64()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1BA992590](exception, 15);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1B4C26AA8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_1B4C26ABC(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  if (a2 != a3)
  {
    uint64_t v7 = a2 + 1;
    int v6 = *a2;
    if (a2 + 1 != a3 || v6 != 36)
    {
      if ((v6 - 46) > 0x2E || ((1 << (v6 - 46)) & 0x600000000001) == 0) {
        sub_1B4C222B8(a1);
      }
      if (v7 == a3 || v6 != 92)
      {
        if (v6 == 46) {
          operator new();
        }
      }
      else
      {
        unsigned int v12 = (char)*v7 - 36;
        if (v12 <= 0x3A && ((1 << v12) & 0x580000000000441) != 0) {
          sub_1B4C222B8(a1);
        }
      }
    }
  }
  uint64_t v8 = sub_1B4C20AB0(a1, a2, a3);
  if (a2 != a3 && a2 == v8 && a2 + 1 != a3 && *a2 == 92)
  {
    int v9 = a2[1];
    if (v9 == 40)
    {
      uint64_t v10 = a2 + 2;
      if ((*(unsigned char *)(a1 + 24) & 2) == 0) {
        operator new();
      }
      do
      {
        if (v10 == a3) {
          goto LABEL_37;
        }
        uint64_t v13 = v10;
        uint64_t v14 = (unsigned __int8 *)sub_1B4C26ABC(a1, v10, a3);
        if (v10 == v14) {
          break;
        }
        uint64_t v10 = sub_1B4C26DE8(a1, v14, a3);
      }
      while (v13 != v10);
      if (v13 + 1 == a3 || *v13 != 92 || v13[1] != 41) {
LABEL_37:
      }
        sub_1B4C1F348();
      uint64_t v8 = &v13[2 * (v13[1] == 41)];
      if ((*(unsigned char *)(a1 + 24) & 2) == 0) {
        operator new();
      }
    }
    else if (((v9 & 0xF8) == 0x30 || (v9 & 0xFE) == 0x38) && (v9 - 49) <= 8)
    {
      if ((v9 - 48) <= *(_DWORD *)(a1 + 28)) {
        sub_1B4C224FC(a1);
      }
      sub_1B4C224A4();
    }
  }
  return v8;
}

unsigned __int8 *sub_1B4C26DE8(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  if (a2 != a3)
  {
    int v3 = *a2;
    if (v3 == 42) {
      sub_1B4C26058();
    }
    int v4 = a3;
    if (a2 + 1 != a3 && v3 == 92 && a2[1] == 123)
    {
      uint64_t v5 = &a2[2 * (a2[1] == 123)];
      if (v5 == a3) {
        goto LABEL_45;
      }
      int v6 = *v5;
      if ((v6 & 0xF8) != 0x30 && (v6 & 0xFE) != 0x38) {
        goto LABEL_45;
      }
      int v7 = v6 - 48;
      uint64_t v8 = v5 + 1;
      if (v5 + 1 == a3)
      {
LABEL_15:
        uint64_t v8 = a3;
      }
      else
      {
        while (1)
        {
          int v9 = *v8;
          if ((v9 & 0xF8) != 0x30 && (v9 & 0xFE) != 0x38) {
            break;
          }
          if (v7 >= 214748364) {
            goto LABEL_45;
          }
          int v7 = v9 + 10 * v7 - 48;
          if (++v8 == a3) {
            goto LABEL_15;
          }
        }
      }
      if (v8 == v5) {
LABEL_45:
      }
        sub_1B4C261E8();
      if (v8 == a3) {
LABEL_46:
      }
        sub_1B4C26240();
      uint64_t v10 = v8 + 1;
      int v11 = *v8;
      if (v11 != 44)
      {
        if (v10 != a3 && v11 == 92 && *v10 == 125) {
          sub_1B4C26058();
        }
        goto LABEL_46;
      }
      if (v10 == a3) {
        goto LABEL_46;
      }
      int v12 = *v10;
      if ((v12 & 0xF8) == 0x30 || (v12 & 0xFE) == 0x38)
      {
        int v13 = v12 - 48;
        uint64_t v10 = v8 + 2;
        if (v8 + 2 == a3)
        {
LABEL_37:
          uint64_t v10 = a3;
          goto LABEL_40;
        }
        while (1)
        {
          int v12 = *v10;
          if ((v12 & 0xF8) != 0x30 && (v12 & 0xFE) != 0x38) {
            break;
          }
          if (v13 >= 214748364) {
            goto LABEL_45;
          }
          int v13 = v12 + 10 * v13 - 48;
          if (++v10 == a3) {
            goto LABEL_37;
          }
        }
      }
      else
      {
        int v13 = -1;
      }
      if (v10 == a3)
      {
        uint64_t v15 = v10;
        uint64_t v10 = a3;
        int v4 = v15;
      }
      else if (v10 + 1 == a3 || v12 != 92)
      {
        int v4 = v10;
      }
      else
      {
        int v4 = &v10[2 * (v10[1] == 125)];
      }
LABEL_40:
      if (v10 != v4)
      {
        if (v13 == -1) {
          sub_1B4C26058();
        }
        if (v13 >= v7) {
          sub_1B4C26058();
        }
        goto LABEL_45;
      }
      goto LABEL_46;
    }
  }
  return a2;
}

void *sub_1B4C27098(void *a1)
{
  *a1 = &unk_1F0D55928;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void sub_1B4C27104(void *a1)
{
  *a1 = &unk_1F0D55928;
  uint64_t v1 = a1[1];
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  JUMPOUT(0x1BA9929C0);
}

uint64_t sub_1B4C27190(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned char **)(a2 + 16);
  if (v2 == *(unsigned char **)(a2 + 24) || !*v2)
  {
    *(_DWORD *)a2 = -993;
    *(void *)(a2 + 80) = 0;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(void *)(a2 + 16) = v2 + 1;
    *(void *)(a2 + 80) = *(void *)(result + 8);
  }
  return result;
}

uint64_t sub_1B4C271D0(uint64_t a1, unsigned __int8 a2)
{
  if (((a2 & 0xF8) == 0x30 || (a2 & 0xFE) == 0x38) && a2 - 49 <= 8)
  {
    if (a2 - 48 <= *(_DWORD *)(a1 + 28)) {
      sub_1B4C224FC(a1);
    }
    sub_1B4C224A4();
  }
  return 0;
}

char *sub_1B4C27234(uint64_t a1, char *a2, char *a3)
{
  if (a2 != a3)
  {
    int v6 = *a2;
    switch(*a2)
    {
      case '$':
      case '(':
      case '*':
      case '+':
      case '.':
      case '?':
      case '[':
      case '\\':
      case '^':
      case '{':
      case '|':
        goto LABEL_3;
      case ')':
        if (!*(_DWORD *)(a1 + 36)) {
          goto LABEL_8;
        }
LABEL_3:
        int v7 = (unsigned __int8 *)(a2 + 1);
        if (a2 + 1 != a3 && v6 == 92)
        {
          switch(*v7)
          {
            case '$':
            case '(':
            case ')':
            case '*':
            case '+':
            case '.':
            case '?':
            case '[':
            case '\\':
            case '^':
            case '{':
            case '|':
            case '}':
              sub_1B4C222B8(a1);
            default:
              if ((*(_DWORD *)(a1 + 24) & 0x1F0) == 0x40)
              {
                uint64_t v8 = sub_1B4C24EBC(a1, a2 + 1, a3, 0);
              }
              else
              {
                int v9 = sub_1B4C271D0(a1, *v7);
                uint64_t v10 = 2;
                if (!v9) {
                  uint64_t v10 = 0;
                }
                uint64_t v8 = &a2[v10];
              }
              if (v8 != a2) {
                goto LABEL_19;
              }
              int v6 = *a2;
              break;
          }
        }
        if (v6 == 46) {
          operator new();
        }
        return result;
      default:
LABEL_8:
        sub_1B4C222B8(a1);
    }
  }
  uint64_t v8 = sub_1B4C20AB0(a1, a2, a3);
LABEL_19:
  if (v8 == a2 && v8 != a3)
  {
    int v11 = *a2;
    if (v11 == 36) {
      operator new();
    }
    if (v11 != 40)
    {
      if (v11 == 94) {
        operator new();
      }
      return a2;
    }
    if ((*(unsigned char *)(a1 + 24) & 2) == 0) {
      operator new();
    }
    ++*(_DWORD *)(a1 + 36);
    int v12 = (char *)sub_1B4C1DCF8(a1, a2 + 1, a3);
    if (v12 == a3 || *v12 != 41) {
      sub_1B4C1F348();
    }
    if ((*(unsigned char *)(a1 + 24) & 2) == 0) {
      operator new();
    }
    --*(_DWORD *)(a1 + 36);
    uint64_t v8 = v12 + 1;
  }
  if (v8 == a2) {
    return a2;
  }
  return sub_1B4C1EE08(a1, v8, a3);
}

uint64_t sub_1B4C27904(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4 = (void *)a4;
  int v8 = *(_DWORD *)(a1 + 28);
  *(void *)(a4 + 24) = a3;
  int v9 = (uint64_t *)(a4 + 24);
  *(void *)(a4 + 32) = a3;
  *(unsigned char *)(a4 + 40) = 0;
  sub_1B4C2017C(a4, (v8 + 1), (long long *)(a4 + 24));
  v4[6] = a2;
  v4[7] = a2;
  *((unsigned char *)v4 + 64) = 0;
  *(_OWORD *)(v4 + 9) = *(_OWORD *)v9;
  *((unsigned char *)v4 + 88) = *((unsigned char *)v4 + 40);
  v4[13] = a2;
  *((unsigned char *)v4 + 96) = 1;
  v303 = v9;
  if ((*(_WORD *)(a1 + 24) & 0x1F0) == 0)
  {
    if ((sub_1B4C1FCB8(a1, a2, a3, v4, 4160, 1) & 1) == 0) {
      goto LABEL_159;
    }
    goto LABEL_11;
  }
  uint64_t v302 = a2;
  uint64_t v304 = a3;
  uint64_t v309 = a3 - a2;
  if (!*(_DWORD *)(a1 + 28))
  {
    long long v311 = 0u;
    long long v312 = 0u;
    *(_OWORD *)v310 = 0u;
    uint64_t v19 = *(void *)(a1 + 40);
    v299 = v4;
    if (!v19) {
      goto LABEL_343;
    }
    memset(&v313[4], 0, 24);
    sub_1B4C298D8((uint64_t)v310);
    unint64_t v20 = *((void *)v310[1] + ((void)v312 + *((void *)&v312 + 1)) / 0x2AuLL)
        + 96 * (((void)v312 + *((void *)&v312 + 1)) % 0x2AuLL);
    *(_DWORD *)unint64_t v20 = 0;
    *(_OWORD *)(v20 + 4) = *(_OWORD *)v313;
    long long v21 = *(_OWORD *)&v313[12];
    *(_OWORD *)(v20 + 48) = 0u;
    *(_OWORD *)(v20 + 64) = 0u;
    *(_OWORD *)(v20 + 16) = v21;
    *(_OWORD *)(v20 + 32) = 0u;
    *(_OWORD *)(v20 + 77) = 0u;
    uint64_t v23 = *((void *)&v312 + 1);
    uint64_t v22 = v312;
    uint64_t v24 = ++*((void *)&v312 + 1);
    uint64_t v25 = (char *)v310[1];
    unint64_t v26 = *(unsigned int *)(a1 + 32);
    unint64_t v27 = v312 + v23;
    unint64_t v28 = 8 * (v27 / 0x2A);
    unint64_t v29 = 96 * (v27 % 0x2A);
    unint64_t v30 = *(void *)((char *)v310[1] + v28) + v29;
    *(_DWORD *)unint64_t v30 = 0;
    *(void *)(v30 + 8) = a2;
    *(void *)(*(void *)&v25[v28] + v29 + 16) = a2;
    *(void *)(*(void *)&v25[v28] + v29 + 24) = a3;
    unint64_t v31 = *(void *)&v25[v28] + v29;
    uint64_t v34 = *(void *)(v31 + 56);
    unint64_t v32 = v31 + 56;
    uint64_t v33 = v34;
    unint64_t v35 = (*(void *)(v32 + 8) - v34) >> 4;
    if (v26 <= v35)
    {
      if (v26 < v35) {
        *(void *)(v32 + 8) = v33 + 16 * v26;
      }
    }
    else
    {
      sub_1B4C20804((char **)v32, v26 - v35);
      uint64_t v24 = *((void *)&v312 + 1);
      uint64_t v22 = v312;
      uint64_t v25 = (char *)v310[1];
    }
    char v296 = 0;
    unsigned int v127 = 0;
    uint64_t v294 = 0;
    unint64_t v128 = v22 + v24 - 1;
    unint64_t v129 = 8 * (v128 / 0x2A);
    unint64_t v130 = 96 * (v128 % 0x2A);
    *(void *)(*(void *)&v25[v129] + v130 + 80) = v19;
    unint64_t v131 = *(void *)&v25[v129] + v130;
    *(_DWORD *)(v131 + 88) = 4160;
    *(unsigned char *)(v131 + 92) = 1;
    while (2)
    {
      if ((++v127 & 0xFFF) == 0 && (int)(v127 >> 12) >= (int)v309) {
        sub_1B4C20350();
      }
      unint64_t v133 = v24 + v312 - 1;
      unint64_t v306 = v133 % 0x2A;
      v308 = (void *)*((void *)v310[1] + v133 / 0x2A);
      v134 = (char *)&v308[12 * (v133 % 0x2A)];
      v136 = v134 + 80;
      uint64_t v135 = *((void *)v134 + 10);
      if (v135) {
        (*(void (**)(uint64_t, char *))(*(void *)v135 + 16))(v135, v134);
      }
      switch(*(_DWORD *)v134)
      {
        case 0xFFFFFC18:
          if (v308[12 * v306 + 2] == v304)
          {
            uint64_t v159 = v294;
            if ((v296 & (v294 >= v304 - v308[12 * v306 + 1])) == 0) {
              uint64_t v159 = v304 - v308[12 * v306 + 1];
            }
            if (v159 != v309)
            {
              unint64_t v171 = *((void *)&v312 + 1) + v312 - 1;
              uint64_t v172 = *((void *)v310[1] + v171 / 0x2A);
              unint64_t v173 = v171 % 0x2A;
              v174 = *(void **)(v172 + 96 * (v171 % 0x2A) + 56);
              if (v174)
              {
                *(void *)(v172 + 96 * v173 + 64) = v174;
                operator delete(v174);
              }
              uint64_t v294 = v159;
              v175 = *(void **)(v172 + 96 * v173 + 32);
              if (v175)
              {
                *(void *)(v172 + 96 * v173 + 40) = v175;
                operator delete(v175);
              }
              uint64_t v176 = 42 * ((uint64_t)(v311 - (unint64_t)v310[1]) >> 3) - 1;
              long long v177 = v312;
              --*((void *)&v312 + 1);
              if ((void *)v311 == v310[1]) {
                uint64_t v176 = 0;
              }
              if ((unint64_t)(v176 - (*((void *)&v177 + 1) + v177) + 1) >= 0x54)
              {
                operator delete(*(void **)(v311 - 8));
                *(void *)&long long v311 = v311 - 8;
              }
              char v296 = 1;
              goto LABEL_164;
            }
            v160 = (void **)v310[1];
            uint64_t v161 = v311;
            if ((void *)v311 == v310[1])
            {
              *((void *)&v312 + 1) = 0;
              unint64_t v185 = 0;
            }
            else
            {
              v162 = (char *)v310[1] + 8 * ((unint64_t)v312 / 0x2A);
              v163 = (void *)(*v162 + 96 * ((unint64_t)v312 % 0x2A));
              unint64_t v164 = *((void *)v310[1] + (*((void *)&v312 + 1) + (void)v312) / 0x2AuLL)
                   + 96 * ((*((void *)&v312 + 1) + (void)v312) % 0x2AuLL);
              if (v163 != (void *)v164)
              {
                do
                {
                  v165 = (void *)v163[7];
                  if (v165)
                  {
                    v163[8] = v165;
                    operator delete(v165);
                  }
                  v166 = (void *)v163[4];
                  if (v166)
                  {
                    v163[5] = v166;
                    operator delete(v166);
                  }
                  v163 += 12;
                  if ((void *)((char *)v163 - *v162) == (void *)4032)
                  {
                    v167 = (void *)v162[1];
                    ++v162;
                    v163 = v167;
                  }
                }
                while (v163 != (void *)v164);
                v160 = (void **)v310[1];
                uint64_t v161 = v311;
              }
              *((void *)&v312 + 1) = 0;
              unint64_t v185 = v161 - (void)v160;
              if (v185 >= 0x11)
              {
                do
                {
                  operator delete(*v160);
                  v160 = (void **)((char *)v310[1] + 8);
                  v310[1] = v160;
                  unint64_t v185 = v311 - (void)v160;
                }
                while ((void)v311 - (void)v160 > 0x10uLL);
              }
            }
            if (v185 >> 3 == 1)
            {
              uint64_t v186 = 21;
LABEL_241:
              *(void *)&long long v312 = v186;
            }
            else if (v185 >> 3 == 2)
            {
              uint64_t v186 = 42;
              goto LABEL_241;
            }
            char v296 = 1;
            uint64_t v294 = v309;
            goto LABEL_164;
          }
          unint64_t v137 = *((void *)&v312 + 1) + v312 - 1;
          uint64_t v138 = *((void *)v310[1] + v137 / 0x2A);
          unint64_t v139 = v137 % 0x2A;
          v140 = *(void **)(v138 + 96 * (v137 % 0x2A) + 56);
          if (v140)
          {
LABEL_177:
            *(void *)(v138 + 96 * v139 + 64) = v140;
            operator delete(v140);
          }
LABEL_178:
          v142 = *(void **)(v138 + 96 * v139 + 32);
          if (v142)
          {
            uint64_t v143 = v138 + 96 * v139;
            goto LABEL_336;
          }
LABEL_337:
          uint64_t v285 = 42 * ((uint64_t)(v311 - (unint64_t)v310[1]) >> 3) - 1;
          long long v286 = v312;
          --*((void *)&v312 + 1);
          if ((void *)v311 == v310[1]) {
            uint64_t v285 = 0;
          }
          if ((unint64_t)(v285 - (*((void *)&v286 + 1) + v286) + 1) >= 0x54)
          {
            operator delete(*(void **)(v311 - 8));
            *(void *)&long long v311 = v311 - 8;
          }
LABEL_164:
          uint64_t v24 = *((void *)&v312 + 1);
          if (!*((void *)&v312 + 1))
          {
            if ((v296 & 1) == 0)
            {
              LOBYTE(v19) = 0;
              v288 = (void **)v310[1];
              v289 = (void **)v311;
              *((void *)&v312 + 1) = 0;
              unint64_t v290 = v311 - (unint64_t)v310[1];
              if ((unint64_t)v311 - (unint64_t)v310[1] < 0x11) {
                goto LABEL_345;
              }
              goto LABEL_344;
            }
            uint64_t v287 = *v299;
            *(void *)uint64_t v287 = v302;
            *(void *)(v287 + 8) = v302 + v294;
            LOBYTE(v19) = 1;
            *(unsigned char *)(v287 + 16) = 1;
LABEL_343:
            v288 = (void **)v310[1];
            v289 = (void **)v311;
            *((void *)&v312 + 1) = 0;
            unint64_t v290 = v311 - (unint64_t)v310[1];
            if ((unint64_t)v311 - (unint64_t)v310[1] < 0x11) {
              goto LABEL_345;
            }
            do
            {
LABEL_344:
              operator delete(*v288);
              v289 = (void **)v311;
              v288 = (void **)((char *)v310[1] + 8);
              v310[1] = v288;
              unint64_t v290 = v311 - (void)v288;
            }
            while ((void)v311 - (void)v288 > 0x10uLL);
LABEL_345:
            unint64_t v291 = v290 >> 3;
            if (v291 == 1)
            {
              uint64_t v292 = 21;
            }
            else
            {
              if (v291 != 2) {
                goto LABEL_350;
              }
              uint64_t v292 = 42;
            }
            *(void *)&long long v312 = v292;
LABEL_350:
            if (v288 != v289)
            {
              do
              {
                v293 = *v288++;
                operator delete(v293);
              }
              while (v288 != v289);
              if ((void *)v311 != v310[1]) {
                *(void *)&long long v311 = v311 + (((unint64_t)v310[1] - v311 + 7) & 0xFFFFFFFFFFFFFFF8);
              }
            }
            if (v310[0]) {
              operator delete(v310[0]);
            }
            int v4 = v299;
            if (v19) {
              goto LABEL_11;
            }
LABEL_159:
            uint64_t result = 0;
            v4[1] = *v4;
            return result;
          }
          continue;
        case 0xFFFFFC19:
        case 0xFFFFFC1E:
        case 0xFFFFFC21:
          goto LABEL_164;
        case 0xFFFFFC1D:
          unint64_t v150 = v312;
          v152 = (char *)v310[1];
          v151 = (char *)v311;
          if ((void)v312) {
            goto LABEL_328;
          }
          uint64_t v153 = v311 - (unint64_t)v310[1];
          unint64_t v154 = (uint64_t)(v311 - (unint64_t)v310[1]) >> 3;
          uint64_t v155 = 42 * v154 - 1;
          if ((void *)v311 == v310[1]) {
            uint64_t v155 = 0;
          }
          if ((unint64_t)(v155 - *((void *)&v312 + 1)) >= 0x2A)
          {
            *(void *)&long long v312 = 42;
            v156 = (char *)(v311 - 8);
            uint64_t v157 = *(void *)(v311 - 8);
            *(void *)&long long v311 = v311 - 8;
            if (v310[1] != v310[0])
            {
              v158 = (char *)v310[1];
LABEL_272:
              *((void *)v158 - 1) = v157;
              v152 = (char *)v310[1] - 8;
              v310[1] = (char *)v310[1] - 8;
LABEL_327:
              unint64_t v150 = v312;
              v151 = (char *)v311;
LABEL_328:
              v274 = &v152[8 * (v150 / 0x2A)];
              uint64_t v275 = *(void *)v274 + 96 * (v150 % 0x2A);
              if (v151 == v152) {
                uint64_t v275 = 0;
              }
              if (v275 == *(void *)v274) {
                uint64_t v275 = *((void *)v274 - 1) + 4032;
              }
              long long v276 = *((_OWORD *)v134 + 1);
              *(_OWORD *)(v275 - 96) = *(_OWORD *)v134;
              *(_OWORD *)(v275 - 80) = v276;
              v277 = (char *)&v308[12 * v306];
              *(void *)(v275 - 56) = 0;
              *(void *)(v275 - 48) = 0;
              *(void *)(v275 - 64) = 0;
              *(_OWORD *)(v275 - 64) = *((_OWORD *)v277 + 2);
              *(void *)(v275 - 48) = *((void *)v277 + 6);
              *((void *)v277 + 4) = 0;
              *((void *)v277 + 5) = 0;
              *((void *)v277 + 6) = 0;
              *(void *)(v275 - 40) = 0;
              *(void *)(v275 - 32) = 0;
              *(void *)(v275 - 24) = 0;
              *(_OWORD *)(v275 - 40) = *(_OWORD *)(v277 + 56);
              *(void *)(v275 - 24) = *((void *)v277 + 9);
              *((void *)v277 + 7) = 0;
              *((void *)v277 + 8) = 0;
              *((void *)v277 + 9) = 0;
              uint64_t v278 = *v136;
              *(void *)(v275 - 11) = *(void *)(v134 + 85);
              *(void *)(v275 - 16) = v278;
              uint64_t v279 = *((void *)&v312 + 1);
              *(void *)&long long v312 = v312 - 1;
              ++*((void *)&v312 + 1);
              uint64_t v280 = v279 + v312;
              unint64_t v281 = (v279 + (uint64_t)v312) / 0x2AuLL;
              uint64_t v282 = *((void *)v310[1] + v281);
              uint64_t v283 = v280 - 42 * v281;
              v284 = *(void **)(v282 + 96 * v283 + 56);
              if (v284)
              {
                *(void *)(v282 + 96 * v283 + 64) = v284;
                operator delete(v284);
              }
              v142 = *(void **)(v282 + 96 * v283 + 32);
              if (v142)
              {
                uint64_t v143 = v282 + 96 * v283;
LABEL_336:
                *(void *)(v143 + 40) = v142;
                operator delete(v142);
              }
              goto LABEL_337;
            }
            if ((unint64_t)v156 < *((void *)&v311 + 1))
            {
              uint64_t v187 = (uint64_t)(*((void *)&v311 + 1) - (void)v156) >> 3;
              if (v187 >= -1) {
                uint64_t v188 = v187 + 1;
              }
              else {
                uint64_t v188 = v187 + 2;
              }
              uint64_t v189 = v188 >> 1;
              v190 = &v156[8 * (v188 >> 1)];
              v158 = &v190[-(v156 - (char *)v310[1])];
              if (v156 != v310[1])
              {
                memmove(&v190[-(v156 - (char *)v310[1])], v310[1], v156 - (char *)v310[1]);
                v152 = (char *)v311;
              }
              v310[1] = v158;
              *(void *)&long long v311 = &v152[8 * v189];
              goto LABEL_272;
            }
            if (*((void **)&v311 + 1) == v310[1]) {
              unint64_t v209 = 1;
            }
            else {
              unint64_t v209 = (uint64_t)(*((void *)&v311 + 1) - (unint64_t)v310[1]) >> 2;
            }
            if (!(v209 >> 61))
            {
              v210 = (char *)operator new(8 * v209);
              unint64_t v211 = (v209 + 3) >> 2;
              v158 = &v210[8 * v211];
              v212 = v158;
              int64_t v213 = v156 - v152;
              if (v156 != v152)
              {
                v212 = &v158[v213 & 0xFFFFFFFFFFFFFFF8];
                unint64_t v214 = v213 - 8;
                v215 = &v210[8 * v211];
                v216 = v152;
                if (v214 < 0x38) {
                  goto LABEL_369;
                }
                uint64_t v217 = 8 * v211;
                v215 = &v210[8 * v211];
                v216 = v152;
                if ((unint64_t)(v215 - v152) < 0x20) {
                  goto LABEL_369;
                }
                uint64_t v218 = (v214 >> 3) + 1;
                uint64_t v219 = 8 * (v218 & 0x3FFFFFFFFFFFFFFCLL);
                v215 = &v158[v219];
                v216 = &v152[v219];
                v220 = (long long *)(v152 + 16);
                v221 = &v210[v217 + 16];
                uint64_t v222 = v218 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  long long v223 = *v220;
                  *((_OWORD *)v221 - 1) = *(v220 - 1);
                  *(_OWORD *)v221 = v223;
                  v220 += 2;
                  v221 += 32;
                  v222 -= 4;
                }
                while (v222);
                if (v218 != (v218 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_369:
                  do
                  {
                    uint64_t v224 = *(void *)v216;
                    v216 += 8;
                    *(void *)v215 = v224;
                    v215 += 8;
                  }
                  while (v215 != v212);
                }
              }
              v310[0] = v210;
              v310[1] = v158;
              *(void *)&long long v311 = v212;
              *((void *)&v311 + 1) = &v210[8 * v209];
              if (v152)
              {
                operator delete(v152);
                v158 = (char *)v310[1];
              }
              goto LABEL_272;
            }
LABEL_365:
            sub_1B4BB2D38();
          }
          v168 = (char *)*((void *)&v311 + 1);
          v169 = v310[0];
          if (v154 < (uint64_t)(*((void *)&v311 + 1) - (unint64_t)v310[0]) >> 3)
          {
            if (v310[1] != v310[0])
            {
              v170 = operator new(0xFC0uLL);
LABEL_324:
              *((void *)v152 - 1) = v170;
              v152 = (char *)v310[1] - 8;
              uint64_t v273 = 21;
              if ((void)v311 - ((unint64_t)v310[1] - 8) != 8) {
                uint64_t v273 = v312 + 42;
              }
              v310[1] = (char *)v310[1] - 8;
              *(void *)&long long v312 = v273;
              goto LABEL_327;
            }
            v191 = operator new(0xFC0uLL);
            if (v151 == v168)
            {
              if (v151 == v152) {
                unint64_t v192 = 1;
              }
              else {
                unint64_t v192 = (v151 - v169) >> 2;
              }
              if (v192 >> 61) {
                goto LABEL_366;
              }
              v193 = operator new(8 * v192);
              unint64_t v194 = v192 >> 2;
              v195 = &v193[8 * (v192 >> 2)];
              BOOL v196 = v151 == v152;
              v151 = v195;
              if (!v196)
              {
                v151 = &v195[8 * v154];
                v197 = &v193[8 * (v192 >> 2)];
                v198 = v152;
                if ((unint64_t)(v153 - 8) < 0x38) {
                  goto LABEL_370;
                }
                uint64_t v199 = 8 * v194;
                v197 = &v193[8 * (v192 >> 2)];
                v198 = v152;
                if ((unint64_t)(&v193[8 * v194] - v152) < 0x20) {
                  goto LABEL_370;
                }
                unint64_t v200 = ((unint64_t)(v153 - 8) >> 3) + 1;
                uint64_t v201 = 8 * (v200 & 0x3FFFFFFFFFFFFFFCLL);
                v197 = &v195[v201];
                v198 = &v152[v201];
                v202 = (long long *)(v152 + 16);
                v203 = &v193[v199 + 16];
                uint64_t v204 = v200 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  long long v205 = *v202;
                  *(v203 - 1) = *(v202 - 1);
                  _OWORD *v203 = v205;
                  v202 += 2;
                  v203 += 2;
                  v204 -= 4;
                }
                while (v204);
                if (v200 != (v200 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_370:
                  do
                  {
                    uint64_t v206 = *(void *)v198;
                    v198 += 8;
                    *(void *)v197 = v206;
                    v197 += 8;
                  }
                  while (v197 != v151);
                }
              }
              v310[0] = v193;
              v310[1] = &v193[8 * (v192 >> 2)];
              *(void *)&long long v311 = v151;
              *((void *)&v311 + 1) = &v193[8 * v192];
              if (v152)
              {
                operator delete(v152);
                v151 = (char *)v311;
              }
            }
            *(void *)v151 = v191;
            v208 = (char *)v310[1];
            v207 = (char *)v311;
            *(void *)&long long v311 = v311 + 8;
            v170 = *(void **)v207;
            *(void *)&long long v311 = v207;
            if (v310[1] != v310[0])
            {
              v152 = (char *)v310[1];
              goto LABEL_324;
            }
            if ((unint64_t)v207 < *((void *)&v311 + 1))
            {
              uint64_t v253 = (uint64_t)(*((void *)&v311 + 1) - (void)v207) >> 3;
              if (v253 >= -1) {
                uint64_t v254 = v253 + 1;
              }
              else {
                uint64_t v254 = v253 + 2;
              }
              uint64_t v255 = v254 >> 1;
              v256 = &v207[8 * (v254 >> 1)];
              v152 = &v256[-(v207 - (char *)v310[1])];
              if (v207 != v310[1])
              {
                memmove(&v256[-(v207 - (char *)v310[1])], v310[1], v207 - (char *)v310[1]);
                v207 = (char *)v311;
              }
              v310[1] = v152;
              *(void *)&long long v311 = &v207[8 * v255];
              goto LABEL_324;
            }
            if (*((void **)&v311 + 1) == v310[1]) {
              unint64_t v257 = 1;
            }
            else {
              unint64_t v257 = (uint64_t)(*((void *)&v311 + 1) - (unint64_t)v310[1]) >> 2;
            }
            if (!(v257 >> 61))
            {
              v258 = (char *)operator new(8 * v257);
              unint64_t v259 = (v257 + 3) >> 2;
              v152 = &v258[8 * v259];
              v260 = v152;
              int64_t v261 = v207 - v208;
              if (v207 != v208)
              {
                v260 = &v152[v261 & 0xFFFFFFFFFFFFFFF8];
                unint64_t v262 = v261 - 8;
                v263 = &v258[8 * v259];
                v264 = v208;
                if (v262 < 0x38) {
                  goto LABEL_371;
                }
                uint64_t v265 = 8 * v259;
                v263 = &v258[8 * v259];
                v264 = v208;
                if ((unint64_t)(v263 - v208) < 0x20) {
                  goto LABEL_371;
                }
                uint64_t v266 = (v262 >> 3) + 1;
                uint64_t v267 = 8 * (v266 & 0x3FFFFFFFFFFFFFFCLL);
                v263 = &v152[v267];
                v264 = &v208[v267];
                v268 = (long long *)(v208 + 16);
                v269 = &v258[v265 + 16];
                uint64_t v270 = v266 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  long long v271 = *v268;
                  *((_OWORD *)v269 - 1) = *(v268 - 1);
                  *(_OWORD *)v269 = v271;
                  v268 += 2;
                  v269 += 32;
                  v270 -= 4;
                }
                while (v270);
                if (v266 != (v266 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_371:
                  do
                  {
                    uint64_t v272 = *(void *)v264;
                    v264 += 8;
                    *(void *)v263 = v272;
                    v263 += 8;
                  }
                  while (v263 != v260);
                }
              }
              v310[0] = v258;
              v310[1] = v152;
              *(void *)&long long v311 = v260;
              *((void *)&v311 + 1) = &v258[8 * v257];
              if (v208)
              {
                operator delete(v208);
                v152 = (char *)v310[1];
              }
              goto LABEL_324;
            }
LABEL_366:
            sub_1B4BB2D38();
          }
          if (*((void **)&v311 + 1) == v310[0]) {
            unint64_t v178 = 1;
          }
          else {
            unint64_t v178 = (uint64_t)(*((void *)&v311 + 1) - (unint64_t)v310[0]) >> 2;
          }
          if (v178 >> 61) {
            goto LABEL_365;
          }
          v179 = (char *)operator new(8 * v178);
          v180 = operator new(0xFC0uLL);
          v181 = v180;
          if (v178)
          {
            v182 = &v179[8 * v178];
            *(void *)v179 = v180;
            v183 = v179 + 8;
            v300 = v179;
            v184 = v179;
            if (v152 != v151) {
              goto LABEL_280;
            }
            goto LABEL_274;
          }
          v301 = v179;
          v225 = (char *)operator new(8uLL);
          v182 = v225 + 8;
          operator delete(v301);
          v152 = (char *)v310[1];
          v226 = (char *)v311;
          *(void *)v225 = v181;
          v183 = v225 + 8;
          v300 = v225;
          v184 = v225;
          if (v152 == v226)
          {
LABEL_274:
            v227 = v310[0];
            v310[0] = v300;
            v310[1] = v184;
            *(void *)&long long v311 = v183;
            *((void *)&v311 + 1) = v182;
            uint64_t v228 = v312 + 42;
            if (v183 - v184 == 8) {
              uint64_t v228 = 21;
            }
            *(void *)&long long v312 = v228;
            v152 = v184;
            if (v227)
            {
              operator delete(v227);
              v152 = (char *)v310[1];
            }
            goto LABEL_327;
          }
          break;
        case 0xFFFFFC1F:
          unint64_t v141 = *((void *)&v312 + 1) + v312 - 1;
          uint64_t v138 = *((void *)v310[1] + v141 / 0x2A);
          unint64_t v139 = v141 % 0x2A;
          v140 = *(void **)(v138 + 96 * (v141 % 0x2A) + 56);
          if (v140) {
            goto LABEL_177;
          }
          goto LABEL_178;
        case 0xFFFFFC20:
          sub_1B4C2093C((uint64_t)v313, (long long *)v134);
          (*(void (**)(void, uint64_t, char *))(*(void *)*v136 + 24))(*v136, 1, v134);
          (*(void (**)(void, void, unsigned char *))(*(void *)v315[1] + 24))(v315[1], 0, v313);
          v144 = v310[1];
          if ((void *)v311 == v310[1]) {
            uint64_t v145 = 0;
          }
          else {
            uint64_t v145 = 42 * ((uint64_t)(v311 - (unint64_t)v310[1]) >> 3) - 1;
          }
          unint64_t v146 = *((void *)&v312 + 1) + v312;
          if (v145 == *((void *)&v312 + 1) + (void)v312)
          {
            sub_1B4C298D8((uint64_t)v310);
            v144 = v310[1];
            unint64_t v146 = *((void *)&v312 + 1) + v312;
          }
          unint64_t v147 = v144[v146 / 0x2A] + 96 * (v146 % 0x2A);
          long long v148 = *(_OWORD *)&v313[16];
          *(_OWORD *)unint64_t v147 = *(_OWORD *)v313;
          *(_OWORD *)(v147 + 16) = v148;
          *(void *)(v147 + 40) = 0;
          *(void *)(v147 + 48) = 0;
          *(void *)(v147 + 32) = 0;
          *(_OWORD *)(v147 + 32) = *(_OWORD *)&v313[32];
          *(void *)(v147 + 48) = *(void *)&v313[48];
          memset(&v313[32], 0, 24);
          *(void *)(v147 + 56) = 0;
          *(void *)(v147 + 64) = 0;
          *(void *)(v147 + 72) = 0;
          *(_OWORD *)(v147 + 56) = *(_OWORD *)__p;
          *(void *)(v147 + 72) = v315[0];
          __p[0] = 0;
          __p[1] = 0;
          v315[0] = 0;
          uint64_t v149 = v315[1];
          *(void *)(v147 + 85) = *(void *)((char *)&v315[1] + 5);
          *(void *)(v147 + 80) = v149;
          ++*((void *)&v312 + 1);
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
          if (*(void *)&v313[32])
          {
            *(void *)&v313[40] = *(void *)&v313[32];
            operator delete(*(void **)&v313[32]);
          }
          goto LABEL_164;
        default:
          sub_1B4C203A8();
      }
      break;
    }
    while (1)
    {
LABEL_280:
      if (v183 == v182)
      {
        if (v184 <= v300)
        {
          if (v183 == v300) {
            unint64_t v237 = 1;
          }
          else {
            unint64_t v237 = (v183 - v300) >> 2;
          }
          if (v237 >> 61) {
            sub_1B4BB2D38();
          }
          v238 = (char *)operator new(8 * v237);
          v239 = v238;
          unint64_t v240 = v237 >> 2;
          v229 = &v238[8 * (v237 >> 2)];
          v230 = v229;
          int64_t v241 = v183 - v184;
          if (v183 != v184)
          {
            v230 = &v229[v241 & 0xFFFFFFFFFFFFFFF8];
            unint64_t v242 = v241 - 8;
            if (v242 < 0x38 || (uint64_t v243 = 8 * v240, (unint64_t)(&v238[8 * v240] - v184) < 0x20))
            {
              v244 = &v238[8 * (v237 >> 2)];
              v245 = v184;
              goto LABEL_296;
            }
            uint64_t v247 = (v242 >> 3) + 1;
            uint64_t v248 = 8 * (v247 & 0x3FFFFFFFFFFFFFFCLL);
            v244 = &v229[v248];
            v245 = &v184[v248];
            v249 = (long long *)(v184 + 16);
            v250 = &v238[v243 + 16];
            uint64_t v251 = v247 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v252 = *v249;
              *((_OWORD *)v250 - 1) = *(v249 - 1);
              *(_OWORD *)v250 = v252;
              v249 += 2;
              v250 += 32;
              v251 -= 4;
            }
            while (v251);
            if (v247 != (v247 & 0x3FFFFFFFFFFFFFFCLL))
            {
              do
              {
LABEL_296:
                uint64_t v246 = *(void *)v245;
                v245 += 8;
                *(void *)v244 = v246;
                v244 += 8;
              }
              while (v244 != v230);
            }
          }
          v183 = &v238[8 * v237];
          if (v300) {
            operator delete(v300);
          }
          v300 = v239;
          goto LABEL_279;
        }
        uint64_t v232 = (v184 - v300) >> 3;
        if (v232 >= -1) {
          uint64_t v233 = v232 + 1;
        }
        else {
          uint64_t v233 = v232 + 2;
        }
        uint64_t v234 = v233 >> 1;
        v235 = &v184[-8 * (v233 >> 1)];
        v236 = v183;
        if (v183 != v184)
        {
          memmove(v235, v184, v183 - v184);
          v236 = v184;
        }
        v230 = &v235[v183 - v184];
        v229 = &v236[-8 * v234];
      }
      else
      {
        v229 = v184;
        v230 = v183;
        v183 = v182;
      }
LABEL_279:
      uint64_t v231 = *(void *)v152;
      v152 += 8;
      *(void *)v230 = v231;
      v184 = v229;
      v182 = v183;
      v183 = v230 + 8;
      if (v152 == (char *)v311) {
        goto LABEL_274;
      }
    }
  }
  v310[0] = 0;
  v310[1] = 0;
  *(void *)&long long v311 = 0;
  uint64_t v10 = *(void *)(a1 + 40);
  if (!v10) {
    goto LABEL_159;
  }
  *(void *)&long long v316 = a3;
  *((void *)&v316 + 1) = a3;
  char v317 = 0;
  *(_DWORD *)v313 = 0;
  memset(&v313[8], 0, 48);
  *(_OWORD *)__p = 0u;
  memset(v315, 0, 21);
  int v11 = sub_1B4C20484(v310, (uint64_t)v313);
  v310[1] = v11;
  if (__p[0]) {
    operator delete(__p[0]);
  }
  if (*(void *)&v313[32]) {
    operator delete(*(void **)&v313[32]);
  }
  uint64_t v12 = *((void *)v11 - 8);
  *((_DWORD *)v11 - 24) = 0;
  *((void *)v11 - 11) = a2;
  *((void *)v11 - 10) = a2;
  *((void *)v11 - 9) = a3;
  unint64_t v13 = *(unsigned int *)(a1 + 28);
  unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((*((void *)v11 - 7) - v12) >> 3);
  v298 = v4;
  if (v13 <= v14)
  {
    if (v13 < v14) {
      *((void *)v11 - 7) = v12 + 24 * v13;
    }
  }
  else
  {
    sub_1B4C20654((void **)v11 - 8, v13 - v14, &v316);
  }
  uint64_t v36 = *((void *)v11 - 5);
  unint64_t v37 = *(unsigned int *)(a1 + 32);
  unint64_t v38 = (*((void *)v11 - 4) - v36) >> 4;
  if (v37 <= v38)
  {
    if (v37 < v38) {
      *((void *)v11 - 4) = v36 + 16 * v37;
    }
  }
  else
  {
    sub_1B4C20804((char **)v11 - 5, v37 - v38);
  }
  uint64_t v39 = 0;
  uint64_t v295 = 0;
  uint64_t v297 = 0;
  v305 = 0;
  v307 = 0;
  uint64_t v40 = 0;
  uint64_t v41 = 0;
  char v42 = 0;
  unsigned int v43 = 0;
  *((void *)v11 - 2) = v10;
  *((_DWORD *)v11 - 2) = 4160;
  *(v11 - 4) = 1;
  while (2)
  {
    BOOL v45 = (++v43 & 0xFFF) != 0 || (int)(v43 >> 12) < (int)v309;
    if (!v45) {
      sub_1B4C20350();
    }
    uint64_t v46 = *((void *)v11 - 2);
    if (v46) {
      (*(void (**)(uint64_t, char *))(*(void *)v46 + 16))(v46, v11 - 96);
    }
    switch(*((_DWORD *)v11 - 24))
    {
      case 0xFFFFFC18:
        if (*((void *)v11 - 10) != v304) {
          goto LABEL_35;
        }
        uint64_t v53 = v304 - *((void *)v11 - 11);
        if ((v42 & (v41 >= v53)) != 0) {
          goto LABEL_100;
        }
        unint64_t v55 = (char *)*((void *)v11 - 8);
        __int16 v54 = (char *)*((void *)v11 - 7);
        uint64_t v56 = v54 - v55;
        unint64_t v57 = 0xAAAAAAAAAAAAAAABLL * ((v54 - v55) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((v297 - (uint64_t)v305) >> 3) >= v57)
        {
          if (0xAAAAAAAAAAAAAAABLL * ((v39 - v305) >> 3) >= v57)
          {
            uint64_t v68 = v305;
            if (v55 != v54)
            {
              v69 = v305;
              do
              {
                *(_OWORD *)v69 = *(_OWORD *)v55;
                v69[16] = v55[16];
                v68 += 24;
                v55 += 24;
                v69 += 24;
              }
              while (v55 != v54);
            }
            int64_t v62 = v68 - v305;
            uint64_t v39 = v305;
          }
          else
          {
            __int16 v63 = &v55[8 * ((v39 - v305) >> 3)];
            if (v39 != v305)
            {
              long long v64 = v305;
              do
              {
                *(_OWORD *)long long v64 = *(_OWORD *)v55;
                v64[16] = v55[16];
                v55 += 24;
                v64 += 24;
              }
              while (v55 != v63);
            }
            v65 = v39;
            if (v63 != v54)
            {
              v66 = v39;
              do
              {
                long long v67 = *(_OWORD *)v63;
                *((void *)v66 + 2) = *((void *)v63 + 2);
                *(_OWORD *)v66 = v67;
                v66 += 24;
                v63 += 24;
                v65 += 24;
              }
              while (v63 != v54);
            }
            int64_t v62 = v65 - v39;
          }
        }
        else
        {
          if (v305)
          {
            operator delete(v305);
            uint64_t v297 = 0;
          }
          if (v57 > 0xAAAAAAAAAAAAAAALL) {
            goto LABEL_363;
          }
          unint64_t v58 = 0x5555555555555556 * (v297 >> 3);
          if (v58 <= v57) {
            unint64_t v58 = 0xAAAAAAAAAAAAAAABLL * ((v54 - v55) >> 3);
          }
          unint64_t v59 = 0xAAAAAAAAAAAAAAABLL * (v297 >> 3) >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v58;
          if (v59 > 0xAAAAAAAAAAAAAAALL) {
LABEL_363:
          }
            sub_1B4C0E0BC();
          uint64_t v60 = operator new(24 * v59);
          uint64_t v39 = v60;
          unint64_t v61 = v60;
          if (v55 != v54)
          {
            memcpy(v60, v55, 24 * ((v56 - 24) / 0x18uLL) + 24);
            unint64_t v61 = &v39[24 * ((v56 - 24) / 0x18uLL) + 24];
          }
          uint64_t v297 = (uint64_t)&v39[24 * v59];
          int64_t v62 = v61 - v39;
          v305 = v39;
        }
        v71 = (const double *)*((void *)v11 - 5);
        char v70 = (char *)*((void *)v11 - 4);
        int64_t v72 = v70 - (char *)v71;
        unint64_t v73 = (v70 - (char *)v71) >> 4;
        if (v73 > (v295 - (uint64_t)v307) >> 4)
        {
          if (v307)
          {
            operator delete(v307);
            uint64_t v295 = 0;
          }
          if (v72 < 0) {
            goto LABEL_362;
          }
          uint64_t v74 = v295 >> 3;
          if (v295 >> 3 <= v73) {
            uint64_t v74 = (v70 - (char *)v71) >> 4;
          }
          unint64_t v75 = (unint64_t)v295 >= 0x7FFFFFFFFFFFFFF0 ? 0xFFFFFFFFFFFFFFFLL : v74;
          if (v75 >> 60) {
LABEL_362:
          }
            sub_1B4C0E0BC();
          v76 = (double *)operator new(16 * v75);
          uint64_t v40 = v76;
          v77 = v76;
          if (v71 != (const double *)v70)
          {
            memcpy(v76, v71, v72 & 0xFFFFFFFFFFFFFFF0);
            v77 = (double *)((char *)v40 + (v72 & 0xFFFFFFFFFFFFFFF0));
          }
          uint64_t v295 = (uint64_t)&v40[2 * v75];
          int64_t v78 = (char *)v77 - (char *)v40;
          v307 = v40;
          goto LABEL_99;
        }
        int64_t v79 = (char *)v40 - (char *)v307;
        unint64_t v80 = ((char *)v40 - (char *)v307) >> 4;
        if (v80 < v73)
        {
          v81 = &v71[2 * v80];
          if (v40 != v307)
          {
            unint64_t v82 = v79 - 16;
            if ((unint64_t)(v79 - 16) < 0xD0)
            {
              v83 = v307;
              goto LABEL_88;
            }
            unint64_t v95 = v79 & 0xFFFFFFFFFFFFFFF0;
            unint64_t v96 = (unint64_t)v307 + v95 - 8;
            unint64_t v97 = (unint64_t)v71 + v95 - 8;
            BOOL v99 = v307 + 1 < (const double *)((char *)v71 + v95) && v71 + 1 < (double *)((char *)v307 + v95);
            v83 = v307;
            if ((unint64_t)v71 < v96 && (unint64_t)v307 < v97) {
              goto LABEL_372;
            }
            if (v99) {
              goto LABEL_372;
            }
            uint64_t v101 = (v82 >> 4) + 1;
            uint64_t v102 = 2 * (v101 & 0x1FFFFFFFFFFFFFFCLL);
            v83 = &v307[v102];
            v103 = &v71[v102];
            v104 = v71 + 4;
            v105 = v307 + 4;
            uint64_t v106 = v101 & 0x1FFFFFFFFFFFFFFCLL;
            do
            {
              v107 = v104 - 4;
              float64x2x2_t v318 = vld2q_f64(v107);
              float64x2x2_t v320 = vld2q_f64(v104);
              v108 = v105 - 4;
              vst2q_f64(v108, v318);
              vst2q_f64(v105, v320);
              v104 += 8;
              v105 += 8;
              v106 -= 4;
            }
            while (v106);
            v71 = v103;
            if (v101 != (v101 & 0x1FFFFFFFFFFFFFFCLL))
            {
LABEL_372:
              do
              {
LABEL_88:
                double *v83 = *v71;
                v83[1] = v71[1];
                v71 += 2;
                v83 += 2;
              }
              while (v71 != v81);
            }
          }
          v84 = v40;
          if (v81 != (const double *)v70)
          {
            v85 = v40;
            do
            {
              long long v86 = *(_OWORD *)v81;
              v81 += 2;
              *(_OWORD *)v85 = v86;
              v85 += 2;
              v84 += 2;
            }
            while (v81 != (const double *)v70);
          }
          int64_t v78 = (char *)v84 - (char *)v40;
          goto LABEL_99;
        }
        if (v71 != (const double *)v70)
        {
          unint64_t v87 = v72 - 16;
          uint64_t v40 = v307;
          if ((unint64_t)(v72 - 16) < 0xD0)
          {
            v88 = (char *)v307;
            goto LABEL_96;
          }
          BOOL v110 = v307 + 1 < (const double *)((char *)v71 + (v87 & 0xFFFFFFFFFFFFFFF0) + 16)
              && v71 + 1 < (double *)((char *)v307 + (v87 & 0xFFFFFFFFFFFFFFF0) + 16);
          v88 = (char *)v307;
          if (v71 < (double *)((char *)v307 + (v87 & 0xFFFFFFFFFFFFFFF0) + 8)
            && v307 < (const double *)((char *)v71 + (v87 & 0xFFFFFFFFFFFFFFF0) + 8))
          {
            goto LABEL_373;
          }
          if (v110) {
            goto LABEL_373;
          }
          uint64_t v112 = (v87 >> 4) + 1;
          uint64_t v113 = 2 * (v112 & 0x1FFFFFFFFFFFFFFCLL);
          v88 = (char *)&v307[v113];
          v114 = &v71[v113];
          v115 = v71 + 4;
          v116 = v307 + 4;
          uint64_t v117 = v112 & 0x1FFFFFFFFFFFFFFCLL;
          do
          {
            v118 = v115 - 4;
            float64x2x2_t v319 = vld2q_f64(v118);
            float64x2x2_t v321 = vld2q_f64(v115);
            v119 = v116 - 4;
            vst2q_f64(v119, v319);
            vst2q_f64(v116, v321);
            v115 += 8;
            v116 += 8;
            v117 -= 4;
          }
          while (v117);
          v71 = v114;
          if (v112 != (v112 & 0x1FFFFFFFFFFFFFFCLL))
          {
LABEL_373:
            do
            {
LABEL_96:
              *(double *)v88 = *v71;
              *((double *)v88 + 1) = v71[1];
              v88 += 16;
              v71 += 2;
            }
            while (v71 != (const double *)v70);
          }
          int64_t v78 = v88 - (char *)v307;
          goto LABEL_99;
        }
        uint64_t v40 = v307;
        int64_t v78 = 0;
LABEL_99:
        v39 += v62;
        uint64_t v40 = (double *)((char *)v40 + v78);
        uint64_t v41 = v53;
LABEL_100:
        v89 = (char *)v310[1];
        if (v41 == v309)
        {
          v90 = (char *)v310[0];
          while (v89 != v90)
          {
            v91 = (void *)*((void *)v89 - 5);
            if (v91)
            {
              *((void *)v89 - 4) = v91;
              operator delete(v91);
            }
            v92 = (void *)*((void *)v89 - 8);
            if (v92)
            {
              *((void *)v89 - 7) = v92;
              operator delete(v92);
            }
            v89 -= 96;
          }
          v310[1] = v90;
          char v42 = 1;
          uint64_t v41 = v309;
        }
        else
        {
          v93 = (void *)*((void *)v310[1] - 5);
          if (v93)
          {
            *((void *)v310[1] - 4) = v93;
            operator delete(v93);
          }
          v94 = (void *)*((void *)v89 - 8);
          if (v94)
          {
            *((void *)v89 - 7) = v94;
            operator delete(v94);
          }
          v310[1] = v89 - 96;
          char v42 = 1;
        }
LABEL_25:
        unint64_t v44 = v310[0];
        int v11 = (char *)v310[1];
        if (v310[0] != v310[1]) {
          continue;
        }
        if (v42)
        {
          int v4 = v298;
          uint64_t v120 = *v298;
          *(void *)uint64_t v120 = v302;
          *(void *)(v120 + 8) = v302 + v41;
          *(unsigned char *)(v120 + 16) = 1;
          v122 = v305;
          v121 = v307;
          if (v39 != v305)
          {
            v123 = v305 + 16;
            unsigned int v124 = 1;
            do
            {
              uint64_t v125 = v120 + 24 * v124;
              *(_OWORD *)uint64_t v125 = *((_OWORD *)v123 - 1);
              char v126 = *v123;
              v123 += 24;
              *(unsigned char *)(v125 + 16) = v126;
              BOOL v45 = 0xAAAAAAAAAAAAAAABLL * ((v39 - v305) >> 3) > v124++;
            }
            while (v45);
          }
        }
        else
        {
          int v4 = v298;
          v122 = v305;
          v121 = v307;
        }
        if (v121) {
          operator delete(v121);
        }
        if (v122) {
          operator delete(v122);
        }
        if (v44) {
          operator delete(v44);
        }
        if ((v42 & 1) == 0) {
          goto LABEL_159;
        }
LABEL_11:
        uint64_t v15 = v303;
        if (v4[1] != *v4) {
          uint64_t v15 = (uint64_t *)*v4;
        }
        uint64_t v16 = *v15;
        v4[7] = *v15;
        *((unsigned char *)v4 + 64) = v4[6] != v16;
        uint64_t v17 = v15[1];
        v4[9] = v17;
        *((unsigned char *)v4 + 88) = v17 != v4[10];
        return 1;
      case 0xFFFFFC1D:
      case 0xFFFFFC1E:
      case 0xFFFFFC21:
        goto LABEL_25;
      case 0xFFFFFC1F:
LABEL_35:
        uint64_t v47 = v310[1];
        unint64_t v48 = (void *)*((void *)v310[1] - 5);
        if (v48)
        {
          *((void *)v310[1] - 4) = v48;
          operator delete(v48);
        }
        v49 = (void *)*(v47 - 8);
        if (v49)
        {
          *(v47 - 7) = v49;
          operator delete(v49);
        }
        v310[1] = v47 - 12;
        goto LABEL_25;
      case 0xFFFFFC20:
        sub_1B4C2093C((uint64_t)v313, (long long *)v11 - 6);
        (*(void (**)(void, uint64_t, char *))(**((void **)v11 - 2) + 24))(*((void *)v11 - 2), 1, v11 - 96);
        (*(void (**)(void, void, unsigned char *))(*(void *)v315[1] + 24))(v315[1], 0, v313);
        v50 = (char *)v310[1];
        if (v310[1] >= (void *)v311)
        {
          v310[1] = sub_1B4C20484(v310, (uint64_t)v313);
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
        }
        else
        {
          long long v51 = *(_OWORD *)&v313[16];
          *(_OWORD *)v310[1] = *(_OWORD *)v313;
          *((_OWORD *)v50 + 1) = v51;
          *((void *)v50 + 4) = 0;
          *((void *)v50 + 5) = 0;
          *((void *)v50 + 6) = 0;
          *((void *)v50 + 7) = 0;
          *((_OWORD *)v50 + 2) = *(_OWORD *)&v313[32];
          *((void *)v50 + 6) = *(void *)&v313[48];
          memset(&v313[32], 0, 24);
          *((void *)v50 + 8) = 0;
          *((void *)v50 + 9) = 0;
          *(_OWORD *)(v50 + 56) = *(_OWORD *)__p;
          *((void *)v50 + 9) = v315[0];
          __p[0] = 0;
          __p[1] = 0;
          v315[0] = 0;
          uint64_t v52 = v315[1];
          *(void *)(v50 + 85) = *(void *)((char *)&v315[1] + 5);
          *((void *)v50 + 10) = v52;
          v310[1] = v50 + 96;
        }
        if (*(void *)&v313[32])
        {
          *(void *)&v313[40] = *(void *)&v313[32];
          operator delete(*(void **)&v313[32]);
        }
        goto LABEL_25;
      default:
        sub_1B4C203A8();
    }
  }
}

void sub_1B4C292D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,void *__p,void **a24,void **a25,uint64_t a26,unint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38)
{
  uint64_t v39 = a24;
  uint64_t v40 = (uint64_t)a25;
  if (a25 == a24)
  {
    uint64_t v40 = (uint64_t)a24;
  }
  else
  {
    uint64_t v41 = &a24[a27 / 0x2A];
    char v42 = (char *)*v41 + 96 * (a27 % 0x2A);
    unint64_t v43 = (unint64_t)a24[(a28 + a27) / 0x2A] + 96 * ((a28 + a27) % 0x2A);
    if (v42 != (char *)v43)
    {
      do
      {
        unint64_t v44 = (void *)*((void *)v42 + 7);
        if (v44)
        {
          *((void *)v42 + 8) = v44;
          operator delete(v44);
        }
        BOOL v45 = (void *)*((void *)v42 + 4);
        if (v45)
        {
          *((void *)v42 + 5) = v45;
          operator delete(v45);
        }
        v42 += 96;
        if (v42 - (unsigned char *)*v41 == 4032)
        {
          uint64_t v46 = (char *)v41[1];
          ++v41;
          char v42 = v46;
        }
      }
      while (v42 != (char *)v43);
      uint64_t v39 = a24;
      uint64_t v40 = (uint64_t)a25;
    }
  }
  if ((unint64_t)(v40 - (void)v39) >= 0x11)
  {
    do
    {
      operator delete(*v39);
      uint64_t v40 = (uint64_t)a25;
      uint64_t v39 = a24 + 1;
      a24 = v39;
    }
    while ((unint64_t)((char *)a25 - (char *)v39) > 0x10);
  }
  while (v39 != (void **)v40)
  {
    uint64_t v47 = *v39++;
    operator delete(v47);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B4C295F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8 = a4[6];
  unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3);
  int v11 = *(char **)a1;
  uint64_t v10 = *(char **)(a1 + 8);
  unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v10[-*(void *)a1] >> 3);
  unint64_t v13 = v9 - v12;
  if (v9 <= v12)
  {
    if (v9 < v12)
    {
      uint64_t v10 = &v11[8 * ((a4[1] - *a4) >> 3)];
      *(void *)(a1 + 8) = v10;
    }
  }
  else
  {
    uint64_t v14 = *(void *)(a1 + 16);
    if (0xAAAAAAAAAAAAAAABLL * ((v14 - (uint64_t)v10) >> 3) >= v13)
    {
      unint64_t v20 = &v10[24 * v13];
      uint64_t v24 = 8 * ((a4[1] - *a4) >> 3) - 8 * ((uint64_t)&v10[-*(void *)a1] >> 3);
      do
      {
        *(void *)uint64_t v10 = 0;
        *((void *)v10 + 1) = 0;
        v10[16] = 0;
        v10 += 24;
        v24 -= 24;
      }
      while (v24);
      *(void *)(a1 + 8) = v20;
    }
    else
    {
      if (v9 > 0xAAAAAAAAAAAAAAALL) {
        sub_1B4C0E0BC();
      }
      unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((v14 - (uint64_t)v11) >> 3);
      unint64_t v16 = 0x5555555555555556 * ((v14 - (uint64_t)v11) >> 3);
      if (v16 <= v9) {
        unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3);
      }
      if (v15 >= 0x555555555555555) {
        unint64_t v17 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v17 = v16;
      }
      if (v17 > 0xAAAAAAAAAAAAAAALL) {
        sub_1B4BB2D38();
      }
      uint64_t v18 = (char *)operator new(24 * v17);
      uint64_t v19 = &v18[24 * v12];
      unint64_t v20 = &v18[24 * v9];
      uint64_t v21 = 24 * v9 - 24 * v12;
      uint64_t v22 = v19;
      do
      {
        *(void *)uint64_t v22 = 0;
        *((void *)v22 + 1) = 0;
        v22[16] = 0;
        v22 += 24;
        v21 -= 24;
      }
      while (v21);
      if (v10 != v11)
      {
        do
        {
          long long v23 = *(_OWORD *)(v10 - 24);
          *((void *)v19 - 1) = *((void *)v10 - 1);
          *(_OWORD *)(v19 - 24) = v23;
          v19 -= 24;
          v10 -= 24;
        }
        while (v10 != v11);
        uint64_t v10 = v11;
      }
      *(void *)a1 = v19;
      *(void *)(a1 + 8) = v20;
      *(void *)(a1 + 16) = &v18[24 * v17];
      if (v10)
      {
        operator delete(v10);
        unint64_t v20 = *(char **)(a1 + 8);
      }
    }
    int v11 = *(char **)a1;
    uint64_t v10 = v20;
  }
  if (v10 != v11)
  {
    unint64_t v25 = 0;
    unint64_t v26 = 0;
    uint64_t v28 = *a4;
    uint64_t v27 = a4[1];
    do
    {
      unint64_t v29 = 0xAAAAAAAAAAAAAAABLL * ((v27 - v28) >> 3);
      unint64_t v30 = (void *)(v28 + v25);
      if (v29 <= v26) {
        unint64_t v31 = a4 + 3;
      }
      else {
        unint64_t v31 = v30;
      }
      *(void *)&v11[v25] = a2 + *v31 - v8;
      if (0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3) <= v26) {
        unint64_t v32 = a4 + 3;
      }
      else {
        unint64_t v32 = (uint64_t *)(*a4 + v25);
      }
      *(void *)(*(void *)a1 + v25 + 8) = a2 + v32[1] - v8;
      uint64_t v28 = *a4;
      uint64_t v27 = a4[1];
      if (0xAAAAAAAAAAAAAAABLL * ((v27 - *a4) >> 3) <= v26) {
        uint64_t v33 = a4 + 3;
      }
      else {
        uint64_t v33 = (uint64_t *)(*a4 + v25);
      }
      int v11 = *(char **)a1;
      uint64_t v34 = *(void *)(a1 + 8);
      *(unsigned char *)(*(void *)a1 + v25 + 16) = *((unsigned char *)v33 + 16);
      ++v26;
      v25 += 24;
    }
    while (v26 < 0xAAAAAAAAAAAAAAABLL * ((v34 - (uint64_t)v11) >> 3));
  }
  *(void *)(a1 + 24) = a3;
  *(void *)(a1 + 32) = a3;
  *(unsigned char *)(a1 + 40) = 0;
  uint64_t v35 = a2 + a4[6] - v8;
  *(void *)(a1 + 48) = v35;
  *(void *)(a1 + 56) = a2 + a4[7] - v8;
  *(unsigned char *)(a1 + 64) = *((unsigned char *)a4 + 64);
  *(void *)(a1 + 72) = a2 + a4[9] - v8;
  *(void *)(a1 + 80) = a2 + a4[10] - v8;
  *(unsigned char *)(a1 + 88) = *((unsigned char *)a4 + 88);
  *(void *)(a1 + 104) = v35;
  *(unsigned char *)(a1 + 96) = *((unsigned char *)a4 + 96);
}

void sub_1B4C298D8(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 32);
  BOOL v3 = v2 >= 0x2A;
  unint64_t v4 = v2 - 42;
  if (v3)
  {
    *(void *)(a1 + 32) = v4;
    int v6 = *(void **)(a1 + 8);
    uint64_t v5 = *(char **)(a1 + 16);
    int v7 = (char *)(v6 + 1);
    uint64_t v8 = *v6;
    *(void *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_78:
      *(void *)uint64_t v5 = v8;
      *(void *)(a1 + 16) += 8;
      return;
    }
    unint64_t v9 = *(char **)a1;
    uint64_t v10 = (uint64_t)&v7[-*(void *)a1];
    if ((unint64_t)v7 <= *(void *)a1)
    {
      unint64_t v35 = (v5 - v9) >> 2;
      if (v5 == v9) {
        unint64_t v35 = 1;
      }
      if (!(v35 >> 61))
      {
        unint64_t v36 = v35 >> 2;
        uint64_t v37 = 8 * v35;
        unint64_t v38 = (char *)operator new(8 * v35);
        uint64_t v39 = &v38[8 * v36];
        uint64_t v40 = &v38[v37];
        int64_t v42 = v5 - v7;
        BOOL v41 = v5 == v7;
        uint64_t v5 = v39;
        if (!v41)
        {
          uint64_t v5 = &v39[v42 & 0xFFFFFFFFFFFFFFF8];
          unint64_t v43 = v42 - 8;
          if ((unint64_t)(v42 - 8) >= 0x38)
          {
            unint64_t v73 = &v38[8 * v36];
            unint64_t v44 = v73;
            if ((unint64_t)(v73 - v7) >= 0x20)
            {
              uint64_t v74 = (v43 >> 3) + 1;
              uint64_t v75 = 8 * (v74 & 0x3FFFFFFFFFFFFFFCLL);
              unint64_t v44 = &v39[v75];
              v7 += v75;
              v76 = (long long *)(v6 + 3);
              v77 = v73 + 16;
              uint64_t v78 = v74 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v79 = *v76;
                *(v77 - 1) = *(v76 - 1);
                _OWORD *v77 = v79;
                v76 += 2;
                v77 += 2;
                v78 -= 4;
              }
              while (v78);
              if (v74 == (v74 & 0x3FFFFFFFFFFFFFFCLL)) {
                goto LABEL_76;
              }
            }
          }
          else
          {
            unint64_t v44 = &v38[8 * v36];
          }
          do
          {
            uint64_t v80 = *(void *)v7;
            v7 += 8;
            *(void *)unint64_t v44 = v80;
            v44 += 8;
          }
          while (v44 != v5);
        }
        goto LABEL_76;
      }
LABEL_87:
      sub_1B4BB2D38();
    }
LABEL_5:
    uint64_t v11 = v10 >> 3;
    if (v11 >= -1) {
      uint64_t v12 = v11 + 1;
    }
    else {
      uint64_t v12 = v11 + 2;
    }
    uint64_t v13 = v12 >> 1;
    uint64_t v14 = -v13;
    unint64_t v15 = &v7[-8 * v13];
    int64_t v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      int v7 = *(char **)(a1 + 8);
    }
    uint64_t v5 = &v15[v16];
    *(void *)(a1 + 8) = &v7[8 * v14];
    *(void *)(a1 + 16) = &v15[v16];
    goto LABEL_78;
  }
  uint64_t v18 = *(void *)(a1 + 16);
  uint64_t v17 = *(void *)(a1 + 24);
  uint64_t v19 = *(void *)(a1 + 8);
  uint64_t v20 = v18 - v19;
  uint64_t v21 = (v18 - v19) >> 3;
  uint64_t v22 = v17 - *(void *)a1;
  if (v21 < (unint64_t)(v22 >> 3))
  {
    if (v17 != v18)
    {
      v89 = operator new(0xFC0uLL);
      sub_1B4BFE3B4((char **)a1, &v89);
      return;
    }
    v89 = operator new(0xFC0uLL);
    sub_1B4BFE544((void **)a1, &v89);
    BOOL v45 = *(void **)(a1 + 8);
    uint64_t v5 = *(char **)(a1 + 16);
    int v7 = (char *)(v45 + 1);
    uint64_t v8 = *v45;
    *(void *)(a1 + 8) = v45 + 1;
    if (v5 != *(char **)(a1 + 24)) {
      goto LABEL_78;
    }
    unint64_t v9 = *(char **)a1;
    uint64_t v10 = (uint64_t)&v7[-*(void *)a1];
    if ((unint64_t)v7 <= *(void *)a1)
    {
      unint64_t v46 = (v5 - v9) >> 2;
      if (v5 == v9) {
        unint64_t v46 = 1;
      }
      if (!(v46 >> 61))
      {
        unint64_t v47 = v46 >> 2;
        uint64_t v48 = 8 * v46;
        unint64_t v38 = (char *)operator new(8 * v46);
        uint64_t v39 = &v38[8 * v47];
        uint64_t v40 = &v38[v48];
        int64_t v49 = v5 - v7;
        BOOL v41 = v5 == v7;
        uint64_t v5 = v39;
        if (!v41)
        {
          uint64_t v5 = &v39[v49 & 0xFFFFFFFFFFFFFFF8];
          unint64_t v50 = v49 - 8;
          if ((unint64_t)(v49 - 8) >= 0x38)
          {
            v81 = &v38[8 * v47];
            long long v51 = v81;
            if ((unint64_t)(v81 - v7) >= 0x20)
            {
              uint64_t v82 = (v50 >> 3) + 1;
              uint64_t v83 = 8 * (v82 & 0x3FFFFFFFFFFFFFFCLL);
              long long v51 = &v39[v83];
              v7 += v83;
              v84 = (long long *)(v45 + 3);
              v85 = v81 + 16;
              uint64_t v86 = v82 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v87 = *v84;
                *(v85 - 1) = *(v84 - 1);
                _OWORD *v85 = v87;
                v84 += 2;
                v85 += 2;
                v86 -= 4;
              }
              while (v86);
              if (v82 == (v82 & 0x3FFFFFFFFFFFFFFCLL)) {
                goto LABEL_76;
              }
            }
          }
          else
          {
            long long v51 = &v38[8 * v47];
          }
          do
          {
            uint64_t v88 = *(void *)v7;
            v7 += 8;
            *(void *)long long v51 = v88;
            v51 += 8;
          }
          while (v51 != v5);
        }
LABEL_76:
        *(void *)a1 = v38;
        *(void *)(a1 + 8) = v39;
        *(void *)(a1 + 16) = v5;
        *(void *)(a1 + 24) = v40;
        if (v9)
        {
          operator delete(v9);
          uint64_t v5 = *(char **)(a1 + 16);
        }
        goto LABEL_78;
      }
      goto LABEL_87;
    }
    goto LABEL_5;
  }
  uint64_t v23 = v22 >> 2;
  if (v17 == *(void *)a1) {
    unint64_t v24 = 1;
  }
  else {
    unint64_t v24 = v23;
  }
  if (v24 >> 61) {
    goto LABEL_87;
  }
  unint64_t v25 = (char *)operator new(8 * v24);
  unint64_t v26 = operator new(0xFC0uLL);
  uint64_t v27 = v26;
  uint64_t v28 = &v25[8 * v21];
  unint64_t v29 = &v25[8 * v24];
  if (v21 == v24)
  {
    if (v20 < 1)
    {
      if (v18 == v19) {
        unint64_t v52 = 1;
      }
      else {
        unint64_t v52 = v20 >> 2;
      }
      if (v52 >> 61) {
        sub_1B4BB2D38();
      }
      uint64_t v28 = (char *)operator new(8 * v52);
      unint64_t v29 = &v28[8 * v52];
      operator delete(v25);
      uint64_t v53 = *(void *)(a1 + 8);
      uint64_t v18 = *(void *)(a1 + 16);
      unint64_t v25 = v28;
      *(void *)uint64_t v28 = v27;
      unint64_t v31 = v28 + 8;
      if (v18 == v53) {
        goto LABEL_24;
      }
      do
      {
LABEL_51:
        if (v28 == v25)
        {
          if (v31 >= v29)
          {
            if (v29 == v28) {
              unint64_t v58 = 1;
            }
            else {
              unint64_t v58 = (v29 - v28) >> 2;
            }
            if (v58 >> 61) {
              sub_1B4BB2D38();
            }
            unint64_t v59 = (char *)operator new(8 * v58);
            unint64_t v25 = v59;
            unint64_t v60 = (v58 + 3) >> 2;
            __int16 v54 = &v59[8 * v60];
            uint64_t v33 = v54;
            int64_t v61 = v31 - v28;
            if (v31 != v28)
            {
              uint64_t v33 = &v54[v61 & 0xFFFFFFFFFFFFFFF8];
              unint64_t v62 = v61 - 8;
              __int16 v63 = &v59[8 * v60];
              long long v64 = v28;
              if (v62 < 0x38) {
                goto LABEL_91;
              }
              uint64_t v65 = 8 * v60;
              __int16 v63 = &v59[8 * v60];
              long long v64 = v28;
              if ((unint64_t)(v63 - v28) < 0x20) {
                goto LABEL_91;
              }
              uint64_t v66 = (v62 >> 3) + 1;
              uint64_t v67 = 8 * (v66 & 0x3FFFFFFFFFFFFFFCLL);
              __int16 v63 = &v54[v67];
              long long v64 = &v28[v67];
              uint64_t v68 = (long long *)(v28 + 16);
              v69 = &v59[v65 + 16];
              uint64_t v70 = v66 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v71 = *v68;
                *((_OWORD *)v69 - 1) = *(v68 - 1);
                *(_OWORD *)v69 = v71;
                v68 += 2;
                v69 += 32;
                v70 -= 4;
              }
              while (v70);
              if (v66 != (v66 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_91:
                do
                {
                  uint64_t v72 = *(void *)v64;
                  v64 += 8;
                  *(void *)__int16 v63 = v72;
                  v63 += 8;
                }
                while (v63 != v33);
              }
            }
            unint64_t v29 = &v59[8 * v58];
            operator delete(v28);
          }
          else
          {
            uint64_t v56 = (v29 - v31) >> 3;
            if (v56 >= -1) {
              unint64_t v57 = v56 + 1;
            }
            else {
              unint64_t v57 = v56 + 2;
            }
            uint64_t v33 = &v31[8 * (v57 >> 1)];
            __int16 v54 = &v28[8 * (v57 >> 1)];
            if (v31 == v28)
            {
              unint64_t v25 = v31;
            }
            else
            {
              memmove(&v28[8 * (v57 >> 1)], v28, v31 - v28);
              unint64_t v25 = v28;
            }
          }
        }
        else
        {
          __int16 v54 = v28;
          uint64_t v33 = v31;
        }
        uint64_t v55 = *(void *)(v18 - 8);
        v18 -= 8;
        *((void *)v54 - 1) = v55;
        unint64_t v32 = v54 - 8;
        unint64_t v31 = v33;
        uint64_t v28 = v32;
      }
      while (v18 != *(void *)(a1 + 8));
      goto LABEL_25;
    }
    unint64_t v30 = v21 + 2;
    if (v21 >= -1) {
      unint64_t v30 = v21 + 1;
    }
    v28 -= 8 * (v30 >> 1);
  }
  *(void *)uint64_t v28 = v26;
  unint64_t v31 = v28 + 8;
  if (v18 != v19) {
    goto LABEL_51;
  }
LABEL_24:
  unint64_t v32 = v28;
  uint64_t v33 = v31;
LABEL_25:
  uint64_t v34 = *(char **)a1;
  *(void *)a1 = v25;
  *(void *)(a1 + 8) = v32;
  *(void *)(a1 + 16) = v33;
  *(void *)(a1 + 24) = v29;
  if (v34)
  {
    operator delete(v34);
  }
}

void sub_1B4C29E2C(_Unwind_Exception *a1)
{
  operator delete(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B4C29E48(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B4C29E5C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B4C29E74(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B4C29E8C(unint64_t *a1, void *a2, char *__src, char *a4)
{
  unint64_t v7 = *a1;
  unint64_t v6 = a1[1];
  uint64_t v8 = (uint64_t)a2 - *a1;
  uint64_t v9 = v8 >> 2;
  uint64_t v10 = (char *)(*a1 + (v8 & 0xFFFFFFFFFFFFFFFCLL));
  unint64_t v11 = a1[2];
  if ((uint64_t)(v11 - v6) < 4)
  {
    unint64_t v12 = ((uint64_t)(v6 - v7) >> 2) + 1;
    if (v12 >> 62) {
      sub_1B4BB3244();
    }
    uint64_t v14 = v11 - v7;
    if (v14 >> 1 > v12) {
      unint64_t v12 = v14 >> 1;
    }
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v15 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v15 = v12;
    }
    if (v15)
    {
      if (v15 >> 62) {
        sub_1B4BB2D38();
      }
      int64_t v16 = operator new(4 * v15);
      uint64_t v17 = &v16[4 * v9];
      *uint64_t v17 = *(_DWORD *)__src;
      uint64_t v18 = (char *)(v17 + 1);
      if ((void *)v7 == a2) {
        goto LABEL_31;
      }
    }
    else
    {
      int64_t v16 = 0;
      uint64_t v17 = (_DWORD *)(4 * v9);
      *(_DWORD *)(4 * v9) = *(_DWORD *)__src;
      uint64_t v18 = (char *)(4 * v9 + 4);
      if ((void *)v7 == a2) {
        goto LABEL_31;
      }
    }
    if ((unint64_t)(v8 - 4) >= 0x3C)
    {
      unint64_t v30 = v10;
      if ((v8 & 0xFFFFFFFFFFFFFFFCLL) + v7 - (unint64_t)&v16[v8 & 0xFFFFFFFFFFFFFFFCLL] >= 0x20)
      {
        unint64_t v31 = ((unint64_t)(v8 - 4) >> 2) + 1;
        uint64_t v32 = 4 * (v31 & 0x7FFFFFFFFFFFFFF8);
        unint64_t v30 = &v10[-v32];
        uint64_t v17 = (_DWORD *)((char *)v17 - v32);
        uint64_t v33 = 4 * v9 - 16;
        uint64_t v34 = &v16[v33];
        unint64_t v35 = (long long *)(v7 + v33);
        uint64_t v36 = v31 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v37 = *v35;
          *(v34 - 1) = *(v35 - 1);
          *uint64_t v34 = v37;
          v34 -= 2;
          v35 -= 2;
          v36 -= 8;
        }
        while (v36);
        if (v31 == (v31 & 0x7FFFFFFFFFFFFFF8)) {
          goto LABEL_31;
        }
      }
    }
    else
    {
      unint64_t v30 = v10;
    }
    do
    {
      int v38 = *((_DWORD *)v30 - 1);
      v30 -= 4;
      *--uint64_t v17 = v38;
    }
    while (v30 != (char *)v7);
LABEL_31:
    uint64_t v39 = &v16[4 * v15];
    size_t v40 = v6 - (void)v10;
    if (v40) {
      memmove(v18, v10, v40);
    }
    *a1 = (unint64_t)v17;
    a1[1] = (unint64_t)&v18[v40];
    a1[2] = (unint64_t)v39;
    if (v7)
    {
      operator delete((void *)v7);
    }
    return;
  }
  uint64_t v19 = v6 - (void)v10;
  if ((uint64_t)(v6 - (void)v10) > 3)
  {
    uint64_t v20 = __src + 4;
    unint64_t v22 = a1[1];
    goto LABEL_18;
  }
  uint64_t v20 = &__src[v19];
  int64_t v21 = a4 - &__src[v19];
  if (a4 != &__src[v19]) {
    memmove((void *)a1[1], &__src[v19], a4 - &__src[v19]);
  }
  unint64_t v22 = v6 + v21;
  a1[1] = v6 + v21;
  if (v19 >= 1)
  {
LABEL_18:
    int64_t v23 = v22 - (void)(v10 + 4);
    uint64_t v24 = v23 >> 2;
    unint64_t v25 = (int *)(v22 - 4);
    unint64_t v26 = (_DWORD *)v22;
    if (v22 - 4 < v6)
    {
      unint64_t v27 = (v8 & 0xFFFFFFFFFFFFFFFCLL) + v23;
      unint64_t v28 = v27 + v7 + 4;
      if (v6 > v28) {
        unint64_t v28 = v6;
      }
      unint64_t v29 = v28 + ~v7 - v27;
      if (v29 >= 0x2C)
      {
        unint64_t v26 = (_DWORD *)v22;
        if ((unint64_t)&v10[-(v8 & 0xFFFFFFFFFFFFFFFCLL) + 4 - v7] >= 0x20)
        {
          uint64_t v41 = (v29 >> 2) + 1;
          uint64_t v42 = 4 * (v41 & 0x7FFFFFFFFFFFFFF8);
          unint64_t v25 = (int *)((char *)v25 + v42);
          unint64_t v26 = (_DWORD *)(v22 + v42);
          unint64_t v43 = (_OWORD *)(v22 + 16);
          unint64_t v44 = (long long *)(4 * v24 + 4 * v9 + v7 + 16);
          uint64_t v45 = v41 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v46 = *v44;
            *(v43 - 1) = *(v44 - 1);
            *unint64_t v43 = v46;
            v43 += 2;
            v44 += 2;
            v45 -= 8;
          }
          while (v45);
          if (v41 == (v41 & 0x7FFFFFFFFFFFFFF8)) {
            goto LABEL_42;
          }
        }
      }
      else
      {
        unint64_t v26 = (_DWORD *)v22;
      }
      do
      {
        int v47 = *v25++;
        *v26++ = v47;
      }
      while ((unint64_t)v25 < v6);
    }
LABEL_42:
    a1[1] = (unint64_t)v26;
    if ((char *)v22 != v10 + 4) {
      memmove((void *)(v22 - 4 * v24), v10, v23);
    }
    if (v20 != __src)
    {
      memmove(v10, __src, v20 - __src);
    }
  }
}

void *sub_1B4C2A1CC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      uint64_t v9 = *(const void **)v6;
      uint64_t v8 = *(void *)(v6 + 8);
      int64_t v10 = v8 - *(void *)v6;
      if (v8 != *(void *)v6)
      {
        if (v10 < 0) {
          sub_1B4BB3244();
        }
        unint64_t v11 = (char *)operator new(v8 - *(void *)v6);
        *a4 = v11;
        a4[1] = v11;
        unint64_t v7 = &v11[4 * (v10 >> 2)];
        a4[2] = v7;
        memcpy(v11, v9, v10);
        a4[1] = v7;
      }
      a4 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  return a4;
}

void sub_1B4C2A298(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B4C2A2AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unint64_t v11 = *(void **)v9;
  if (*(void *)v9)
  {
    *(void *)(v9 + 8) = v11;
    operator delete(v11);
  }
  sub_1B4C2A2D0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1B4C2A2D0(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = **(void **)(a1 + 16);
    uint64_t v4 = **(void **)(a1 + 8);
    if (v3 != v4)
    {
      uint64_t v5 = **(void **)(a1 + 16);
      do
      {
        unint64_t v7 = *(void **)(v5 - 24);
        v5 -= 24;
        uint64_t v6 = v7;
        if (v7)
        {
          *(void *)(v3 - 16) = v6;
          operator delete(v6);
        }
        uint64_t v3 = v5;
      }
      while (v5 != v4);
    }
  }
  return a1;
}

void sub_1B4C2A340(int *a1, uint64_t a2, float a3)
{
  unint64_t v7 = *(unsigned char **)a2;
  uint64_t v6 = *(unsigned char **)(a2 + 8);
  float v8 = powf((float)(unint64_t)((uint64_t)&v6[-*(void *)a2] >> 2), -*((float *)a1 + 1));
  uint64_t v9 = *((void *)a1 + 1);
  float v10 = v8 * a3;
  unint64_t v11 = *((void *)a1 + 2);
  unint64_t v12 = (uint64_t)(v11 - v9) >> 5;
  if (v12 >= *a1)
  {
    if (v10 <= *(float *)(v9 + 4)) {
      return;
    }
    sub_1B4C2AF1C(v9, *((void *)a1 + 2), v12);
    uint64_t v14 = *((void *)a1 + 2);
    unint64_t v15 = *(void **)(v14 - 24);
    if (v15)
    {
      *(void *)(v14 - 16) = v15;
      operator delete(v15);
    }
    *((void *)a1 + 2) = v14 - 32;
    int64_t v16 = *(unsigned char **)a2;
    uint64_t v17 = *(unsigned char **)(a2 + 8);
    if ((unint64_t)(v14 - 32) >= *((void *)a1 + 3))
    {
      uint64_t v14 = sub_1B4C2A704((uint64_t *)a1 + 1, v16, v17, a3, v10);
    }
    else
    {
      sub_1B4C2A8A4(v14 - 32, v16, v17, a3, v10);
      *((void *)a1 + 2) = v14;
    }
    *((void *)a1 + 2) = v14;
    uint64_t v18 = *((void *)a1 + 1);
    uint64_t v19 = (v14 - v18) >> 5;
    uint64_t v13 = v14;
  }
  else
  {
    if (v11 >= *((void *)a1 + 3))
    {
      uint64_t v13 = sub_1B4C2A704((uint64_t *)a1 + 1, v7, v6, a3, v10);
    }
    else
    {
      sub_1B4C2A8A4(*((void *)a1 + 2), v7, v6, a3, v10);
      uint64_t v13 = v11 + 32;
      *((void *)a1 + 2) = v11 + 32;
    }
    *((void *)a1 + 2) = v13;
    uint64_t v18 = *((void *)a1 + 1);
    uint64_t v19 = (v13 - v18) >> 5;
  }
  sub_1B4C2AA80(v18, v13, v19);
}

void sub_1B4C2A4C8(_Unwind_Exception *a1)
{
  *(void *)(v1 + 16) = v2;
  _Unwind_Resume(a1);
}

void sub_1B4C2A4D0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 16) = v2;
  _Unwind_Resume(a1);
}

void sub_1B4C2A4D8(void *a1, uint64_t a2, uint64_t a3)
{
  int64_t v4 = a3 - a2;
  if (a3 == a2)
  {
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
  else
  {
    if (v4 < 0) {
      sub_1B4C0E0BC();
    }
    uint64_t v7 = v4 >> 5;
    size_t __sz = a3 - a2;
    float v8 = (char **)operator new(v4);
    unint64_t v9 = 0;
    uint64_t v24 = v8;
    uint64_t v22 = v7;
    do
    {
      uint64_t v10 = a2 + v9;
      unint64_t v11 = &v8[v9 / 8];
      void *v11 = *(char **)(a2 + v9);
      v11[2] = 0;
      v11[3] = 0;
      v11[1] = 0;
      uint64_t v13 = *(unsigned char **)(a2 + v9 + 8);
      unint64_t v12 = *(unsigned char **)(a2 + v9 + 16);
      int64_t v14 = v12 - v13;
      if (v12 != v13)
      {
        if (v14 < 0) {
          sub_1B4BB3244();
        }
        unint64_t v15 = (char *)operator new(v12 - v13);
        v11[1] = v15;
        v11[2] = v15;
        int64_t v16 = &v15[4 * (v14 >> 2)];
        v11[3] = v16;
        memcpy(v15, v13, v14);
        v11[2] = v16;
      }
      v9 += 32;
    }
    while (v10 + 32 != a3);
    uint64_t v17 = (uint64_t)&v8[v9 / 8];
    unint64_t v25 = &v8[v9 / 8];
    a1[1] = 0;
    a1[2] = 0;
    *a1 = 0;
    uint64_t v18 = (char *)operator new(__sz);
    *a1 = v18;
    a1[2] = &v18[32 * v22];
    bzero(v18, __sz);
    a1[1] = &v18[__sz];
    if (v9)
    {
      do
      {
        uint64_t v19 = (v17 - (uint64_t)v8) >> 5;
        uint64_t v20 = (char **)&v18[32 * v19 - 32];
        *uint64_t v20 = *v8;
        if (v20 != v8)
        {
          sub_1B4C2ADD4(v20 + 1, v8[1], v8[2], (v8[2] - v8[1]) >> 2);
          float v8 = v24;
          uint64_t v17 = (uint64_t)v25;
          uint64_t v19 = ((char *)v25 - (char *)v24) >> 5;
        }
        sub_1B4C2AF1C((uint64_t)v8, v17, v19);
        int64_t v21 = *(void **)(v17 - 24);
        if (v21)
        {
          *(void *)(v17 - 16) = v21;
          operator delete(v21);
        }
        v17 -= 32;
        unint64_t v25 = (char **)v17;
      }
      while (v8 != (char **)v17);
    }
    operator delete(v8);
  }
}

void sub_1B4C2A6C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1B4C0D350((void **)va);
  _Unwind_Resume(a1);
}

void sub_1B4C2A6E0(void *a1)
{
  int64_t v4 = *(void **)(v1 + v2 + 8);
  if (v4)
  {
    *(void *)(v1 + v2 + 16) = v4;
    operator delete(v4);
  }
  sub_1B4BB21F0(a1);
}

uint64_t sub_1B4C2A704(uint64_t *a1, unsigned char *a2, unsigned char *a3, float a4, float a5)
{
  uint64_t v5 = (a1[1] - *a1) >> 5;
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59) {
    sub_1B4C0E0BC();
  }
  uint64_t v12 = a1[2] - *a1;
  if (v12 >> 4 > v6) {
    unint64_t v6 = v12 >> 4;
  }
  if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v13 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v13 = v6;
  }
  if (v13)
  {
    if (v13 >> 59) {
      sub_1B4BB2D38();
    }
    int64_t v14 = (char *)operator new(32 * v13);
  }
  else
  {
    int64_t v14 = 0;
  }
  uint64_t v24 = (uint64_t)&v14[32 * v5];
  unint64_t v25 = &v14[32 * v13];
  sub_1B4C2A8A4(v24, a2, a3, a4, a5);
  uint64_t v15 = v24 + 32;
  int64_t v16 = (char *)*a1;
  uint64_t v17 = (char *)a1[1];
  if (v17 == (char *)*a1)
  {
    *a1 = v24;
    a1[1] = v15;
    a1[2] = (uint64_t)v25;
  }
  else
  {
    uint64_t v18 = 0;
    do
    {
      uint64_t v19 = v24 + v18;
      uint64_t v20 = &v17[v18];
      *(void *)(v19 - 32) = *(void *)&v17[v18 - 32];
      *(void *)(v19 - 16) = 0;
      *(void *)(v19 - 8) = 0;
      *(void *)(v19 - 24) = 0;
      *(_OWORD *)(v19 - 24) = *(_OWORD *)&v17[v18 - 24];
      *(void *)(v19 - 8) = *(void *)&v17[v18 - 8];
      *((void *)v20 - 3) = 0;
      *((void *)v20 - 2) = 0;
      *((void *)v20 - 1) = 0;
      v18 -= 32;
    }
    while (&v17[v18] != v16);
    uint64_t v17 = (char *)*a1;
    int64_t v21 = (char *)a1[1];
    *a1 = v24 + v18;
    a1[1] = v15;
    a1[2] = (uint64_t)v25;
    while (v21 != v17)
    {
      uint64_t v22 = (void *)*((void *)v21 - 3);
      if (v22)
      {
        *((void *)v21 - 2) = v22;
        operator delete(v22);
      }
      v21 -= 32;
    }
  }
  if (v17) {
    operator delete(v17);
  }
  return v24 + 32;
}

void sub_1B4C2A890(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1B4C2AA10((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1B4C2A8A4(uint64_t a1, unsigned char *a2, unsigned char *a3, float a4, float a5)
{
  int64_t v8 = a3 - a2;
  if (a3 == a2)
  {
    uint64_t v10 = 0;
    *(float *)a1 = a4;
    *(float *)(a1 + 4) = a5;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = 0;
    goto LABEL_4;
  }
  if (v8 < 0) {
    sub_1B4BB3244();
  }
  uint64_t v10 = (char *)operator new(a3 - a2);
  unint64_t v11 = &v10[4 * (v8 >> 2)];
  memcpy(v10, a2, v8);
  *(float *)a1 = a4;
  *(float *)(a1 + 4) = a5;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  uint64_t v12 = 4 * (v8 >> 2);
  if (v11 == v10)
  {
LABEL_4:
    if (!v10) {
      return;
    }
    goto LABEL_5;
  }
  if (v12 < 0) {
    sub_1B4BB3244();
  }
  unint64_t v13 = (char *)operator new(v11 - v10);
  *(void *)(a1 + 8) = v13;
  int64_t v14 = &v13[4 * (v12 >> 2)];
  *(void *)(a1 + 24) = v14;
  memcpy(v13, v10, v11 - v10);
  *(void *)(a1 + 16) = v14;
  if (v10)
  {
LABEL_5:
    operator delete(v10);
  }
}

void sub_1B4C2A9D8(void *a1)
{
  int64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 16) = v4;
    operator delete(v4);
  }
  sub_1B4BB21F0(a1);
}

void sub_1B4C2A9F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1B4C2AA10(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      while (1)
      {
        uint64_t v4 = v2 - 32;
        *(void *)(a1 + 16) = v2 - 32;
        uint64_t v5 = *(void **)(v2 - 24);
        if (!v5) {
          break;
        }
        *(void *)(v2 - 16) = v5;
        operator delete(v5);
        uint64_t v2 = *(void *)(a1 + 16);
        if (v2 == v3) {
          goto LABEL_6;
        }
      }
      v2 -= 32;
    }
    while (v4 != v3);
  }
LABEL_6:
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_1B4C2AA80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = a3 - 2;
  if (a3 >= 2)
  {
    unint64_t v5 = v3 >> 1;
    uint64_t v6 = a1 + 32 * (v3 >> 1);
    float v7 = *(float *)(v6 + 4);
    unint64_t v9 = *(unsigned char **)(v6 + 8);
    int64_t v8 = *(unsigned char **)(v6 + 16);
    size_t v10 = v8 - v9;
    if (v8 == v9)
    {
      unint64_t v11 = 0;
    }
    else
    {
      if ((v10 & 0x8000000000000000) != 0) {
        sub_1B4BB3244();
      }
      unint64_t v11 = operator new(v8 - v9);
      memcpy(v11, v9, v10);
    }
    uint64_t v12 = (void *)(a2 - 32);
    float v13 = *(float *)(a2 - 28);
    uint64_t v14 = *(void *)(a2 - 24);
    uint64_t v15 = *(void *)(a2 - 16);
    if (v15 != v14)
    {
      if (v15 - v14 < 0) {
        sub_1B4BB3244();
      }
      unint64_t v31 = operator new(v15 - v14);
      operator delete(v31);
    }
    if (v11) {
      operator delete(v11);
    }
    if (v7 > v13)
    {
      int v16 = *(_DWORD *)(a2 - 32);
      float v17 = *(float *)(a2 - 28);
      uint64_t v19 = *(char **)(a2 - 24);
      uint64_t v18 = *(char **)(a2 - 16);
      *(void *)(a2 - 24) = 0;
      *(void *)(a2 - 16) = 0;
      *(void *)(a2 - 8) = 0;
      unint64_t v28 = v18;
      size_t v20 = v18 - v19;
      uint64_t __sz = (v18 - v19) >> 2;
      while (1)
      {
        uint64_t v21 = v6;
        *uint64_t v12 = *(void *)v6;
        if (v12 != (void *)v6) {
          sub_1B4C2ADD4(v12 + 1, *(char **)(v6 + 8), *(char **)(v6 + 16), (uint64_t)(*(void *)(v6 + 16) - *(void *)(v6 + 8)) >> 2);
        }
        if (!v5)
        {
LABEL_26:
          *(_DWORD *)uint64_t v21 = v16;
          *(float *)(v21 + 4) = v17;
          sub_1B4C2ADD4((void *)(v21 + 8), v19, v28, __sz);
          if (v19)
          {
            operator delete(v19);
          }
          return;
        }
        unint64_t v5 = (v5 - 1) >> 1;
        uint64_t v6 = a1 + 32 * v5;
        float v22 = *(float *)(v6 + 4);
        uint64_t v24 = *(unsigned char **)(v6 + 8);
        int64_t v23 = *(unsigned char **)(v6 + 16);
        size_t v25 = v23 - v24;
        if (v23 != v24) {
          break;
        }
        unint64_t v26 = 0;
        if (v28 != v19) {
          goto LABEL_22;
        }
LABEL_24:
        if (v26) {
          operator delete(v26);
        }
        uint64_t v12 = (void *)v21;
        if (v22 <= v17) {
          goto LABEL_26;
        }
      }
      if ((v25 & 0x8000000000000000) != 0) {
        sub_1B4BB3244();
      }
      unint64_t v26 = operator new(v23 - v24);
      memcpy(v26, v24, v25);
      if (v28 == v19) {
        goto LABEL_24;
      }
LABEL_22:
      if ((v20 & 0x8000000000000000) != 0) {
        sub_1B4BB3244();
      }
      unint64_t v30 = operator new(v20);
      operator delete(v30);
      goto LABEL_24;
    }
  }
}

void sub_1B4C2AD70(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  if (__p) {
    operator delete(__p);
  }
  sub_1B4BB21F0(a1);
}

void *sub_1B4C2ADD4(void *result, char *__src, char *a3, size_t __sz)
{
  uint64_t v6 = __src;
  float v7 = result;
  uint64_t v8 = result[2];
  unint64_t v9 = (char *)*result;
  if (__sz > (v8 - *result) >> 2)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      void *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz >> 62) {
      goto LABEL_22;
    }
    uint64_t v10 = v8 >> 1;
    if (v8 >> 1 <= __sz) {
      uint64_t v10 = __sz;
    }
    BOOL v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL;
    unint64_t v12 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v11) {
      unint64_t v12 = v10;
    }
    if (v12 >> 62) {
LABEL_22:
    }
      sub_1B4BB3244();
    uint64_t v13 = 4 * v12;
    uint64_t result = operator new(4 * v12);
    unint64_t v9 = (char *)result;
    void *v7 = result;
    v7[1] = result;
    v7[2] = (char *)result + v13;
    size_t v14 = a3 - v6;
    if (v14) {
      uint64_t result = memcpy(result, v6, v14);
    }
    uint64_t v15 = (void **)(v7 + 1);
    goto LABEL_21;
  }
  uint64_t v15 = (void **)(result + 1);
  int v16 = (unsigned char *)result[1];
  unint64_t v17 = (v16 - v9) >> 2;
  if (v17 >= __sz)
  {
    size_t v14 = a3 - __src;
    if (a3 == __src) {
      goto LABEL_21;
    }
    uint64_t v19 = (void *)*result;
LABEL_20:
    uint64_t result = memmove(v19, __src, v14);
    goto LABEL_21;
  }
  uint64_t v18 = &__src[4 * v17];
  if (v16 != v9)
  {
    uint64_t result = memmove((void *)*result, __src, v16 - v9);
    unint64_t v9 = (char *)*v15;
  }
  size_t v14 = a3 - v18;
  if (v14)
  {
    uint64_t v19 = v9;
    __src = v18;
    goto LABEL_20;
  }
LABEL_21:
  *uint64_t v15 = &v9[v14];
  return result;
}

void sub_1B4C2AF1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3 >= 2)
  {
    uint64_t v4 = 0;
    int v6 = *(_DWORD *)a1;
    int v5 = *(_DWORD *)(a1 + 4);
    __src = *(char **)(a1 + 8);
    int64_t v23 = *(char **)(a1 + 16);
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = 0;
    int64_t v7 = (unint64_t)(a3 - 2) >> 1;
    uint64_t v8 = (float *)a1;
    *(void *)(a1 + 8) = 0;
    do
    {
      unint64_t v9 = &v8[8 * v4 + 8];
      uint64_t v10 = 2 * v4;
      uint64_t v4 = (2 * v4) | 1;
      uint64_t v11 = v10 + 2;
      if (v10 + 2 < a3)
      {
        float v12 = v9[1];
        size_t v14 = (unsigned char *)*((void *)v9 + 1);
        uint64_t v13 = (unsigned char *)*((void *)v9 + 2);
        size_t v15 = v13 - v14;
        if (v13 == v14)
        {
          int v16 = 0;
        }
        else
        {
          if ((v15 & 0x8000000000000000) != 0) {
            sub_1B4BB3244();
          }
          int v16 = operator new(v13 - v14);
          memcpy(v16, v14, v15);
        }
        float v17 = v9[9];
        uint64_t v18 = *((void *)v9 + 5);
        uint64_t v19 = *((void *)v9 + 6);
        if (v19 != v18)
        {
          if (v19 - v18 < 0) {
            sub_1B4BB3244();
          }
          unint64_t v26 = operator new(v19 - v18);
          operator delete(v26);
        }
        if (v16) {
          operator delete(v16);
        }
        if (v12 > v17)
        {
          v9 += 8;
          uint64_t v4 = v11;
        }
      }
      *(void *)uint64_t v8 = *(void *)v9;
      if (v8 != v9) {
        sub_1B4C2ADD4((void *)v8 + 1, *((char **)v9 + 1), *((char **)v9 + 2), (uint64_t)(*((void *)v9 + 2) - *((void *)v9 + 1)) >> 2);
      }
      uint64_t v8 = v9;
    }
    while (v4 <= v7);
    if ((float *)(a2 - 32) == v9)
    {
      *(_DWORD *)unint64_t v9 = v6;
      *((_DWORD *)v9 + 1) = v5;
      uint64_t v21 = __src;
      sub_1B4C2ADD4((void *)v9 + 1, __src, v23, (v23 - __src) >> 2);
    }
    else
    {
      size_t v20 = *(char **)(a2 - 24);
      *(void *)unint64_t v9 = *(void *)(a2 - 32);
      sub_1B4C2ADD4((void *)v9 + 1, v20, *(char **)(a2 - 16), (uint64_t)(*(void *)(a2 - 16) - (void)v20) >> 2);
      uint64_t v21 = __src;
      *(_DWORD *)(a2 - 32) = v6;
      *(_DWORD *)(a2 - 28) = v5;
      sub_1B4C2ADD4((void *)(a2 - 24), __src, v23, (v23 - __src) >> 2);
      sub_1B4C2AA80(a1, (uint64_t)(v9 + 8), ((uint64_t)v9 - a1 + 32) >> 5);
    }
    if (v21)
    {
      operator delete(v21);
    }
  }
}

void sub_1B4C2B1D0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (__p) {
    operator delete(__p);
  }
  sub_1B4BB21F0(a1);
}

void sub_1B4C2B20C(uint64_t *a1@<X0>, int a2@<W1>, void *a3@<X8>)
{
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  if (a2)
  {
    if (a2 < 0) {
      sub_1B4C0E0BC();
    }
    uint64_t v5 = a2;
    size_t v6 = 8 * a2;
    int64_t v7 = (char *)operator new(v6);
    uint64_t v8 = &v7[8 * v5];
    bzero(v7, v6);
    unint64_t v9 = &v7[v6];
  }
  else
  {
    uint64_t v8 = 0;
    unint64_t v9 = 0;
    int64_t v7 = 0;
  }
  sub_1B4C2B31C(a1, (char **)&__p);
  sub_1B4C2B544(__p, v11, v7, v9);
  *a3 = v7;
  a3[1] = v9;
  a3[2] = v8;
  if (__p)
  {
    uint64_t v11 = __p;
    operator delete(__p);
  }
}

void sub_1B4C2B2D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  if (v14) {
    operator delete(v14);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B4C2B31C(uint64_t *a1@<X0>, char **a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v3 = a1[1] - *a1;
  if (v3)
  {
    uint64_t v5 = 0;
    size_t v6 = 0;
    int64_t v7 = 0;
    uint64_t v8 = 0;
    uint64_t v9 = v3 >> 2;
    while (1)
    {
      while (1)
      {
        uint64_t v10 = *a1;
        if (v7 >= v6) {
          break;
        }
        *(_DWORD *)int64_t v7 = *(_DWORD *)(v10 + 4 * v8);
        *((_DWORD *)v7 + 1) = v8;
        v7 += 8;
        a2[1] = v7;
        if (++v8 == v9) {
          return;
        }
      }
      uint64_t v11 = (v7 - v5) >> 3;
      unint64_t v12 = v11 + 1;
      if ((unint64_t)(v11 + 1) >> 61) {
        sub_1B4C0E0BC();
      }
      if ((v6 - v5) >> 2 > v12) {
        unint64_t v12 = (v6 - v5) >> 2;
      }
      if ((unint64_t)(v6 - v5) >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v13 = v12;
      }
      if (v13 >> 61) {
        sub_1B4BB2D38();
      }
      uint64_t v14 = operator new(8 * v13);
      size_t v15 = &v14[8 * v11];
      *(_DWORD *)size_t v15 = *(_DWORD *)(v10 + 4 * v8);
      *((_DWORD *)v15 + 1) = v8;
      if (v7 == v5)
      {
        uint64_t v18 = &v14[8 * v11];
        size_t v6 = &v14[8 * v13];
        int64_t v7 = v15 + 8;
        *a2 = v15;
        a2[1] = v15 + 8;
        a2[2] = v6;
        if (!v5) {
          goto LABEL_18;
        }
LABEL_17:
        operator delete(v5);
        goto LABEL_18;
      }
      unint64_t v16 = v7 - v5 - 8;
      if (v16 < 0x168) {
        break;
      }
      unint64_t v20 = (v7 - 8 - v5) & 0xFFFFFFFFFFFFFFF8;
      if (&v14[v7 - v5 - 8 - v20] > &v14[v7 - v5 - 8] || &v7[-v20 - 8] > v7 - 8 || (unint64_t)(v5 - v14) < 0x20) {
        break;
      }
      uint64_t v21 = (v16 >> 3) + 1;
      uint64_t v22 = 8 * (v21 & 0x3FFFFFFFFFFFFFFCLL);
      float v17 = &v7[-v22];
      uint64_t v18 = &v15[-v22];
      int64_t v23 = &v14[8 * v11 - 16];
      uint64_t v24 = v7 - 16;
      uint64_t v25 = v21 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v26 = *(_OWORD *)v24;
        *(v23 - 1) = *((_OWORD *)v24 - 1);
        *int64_t v23 = v26;
        v23 -= 2;
        v24 -= 32;
        v25 -= 4;
      }
      while (v25);
      if (v21 != (v21 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_15;
      }
LABEL_16:
      size_t v6 = &v14[8 * v13];
      int64_t v7 = v15 + 8;
      *a2 = v18;
      a2[1] = v15 + 8;
      a2[2] = v6;
      if (v5) {
        goto LABEL_17;
      }
LABEL_18:
      uint64_t v5 = v18;
      a2[1] = v7;
      if (++v8 == v9) {
        return;
      }
    }
    float v17 = v7;
    uint64_t v18 = &v14[8 * v11];
    do
    {
LABEL_15:
      uint64_t v19 = *((void *)v17 - 1);
      v17 -= 8;
      *((void *)v18 - 1) = v19;
      v18 -= 8;
    }
    while (v17 != v5);
    goto LABEL_16;
  }
}

void sub_1B4C2B524(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1B4C2B544(void *a1, void *a2, char *a3, char *a4)
{
  if (a3 != a4)
  {
    uint64_t v5 = a3;
    if (a1 == a2)
    {
      a1 = a2;
      uint64_t v7 = 0;
      uint64_t v8 = 0;
    }
    else
    {
      do
      {
        *(_DWORD *)uint64_t v5 = *(_DWORD *)a1;
        *((_DWORD *)v5 + 1) = *((_DWORD *)a1++ + 1);
        v5 += 8;
      }
      while (a1 != a2 && v5 != a4);
      uint64_t v7 = v5 - a3;
      uint64_t v8 = (v5 - a3) >> 3;
      if (v5 - a3 >= 9 && (unint64_t)v7 >= 0x10)
      {
        int64_t v41 = (unint64_t)(v8 - 2) >> 1;
        int64_t v42 = v41;
        do
        {
          uint64_t v43 = 8 * v42;
          if (v41 >= (8 * v42) >> 3)
          {
            uint64_t v44 = (v43 >> 2) | 1;
            uint64_t v45 = (float *)&a3[8 * v44];
            if ((v43 >> 2) + 2 < v8 && *v45 > v45[2])
            {
              v45 += 2;
              uint64_t v44 = (v43 >> 2) + 2;
            }
            long long v46 = (float *)&a3[v43];
            float v47 = *v46;
            float v48 = *v45;
            float v49 = *v46;
            if (*v45 <= *v46)
            {
              int v50 = *((_DWORD *)v46 + 1);
              do
              {
                long long v51 = v46;
                long long v46 = v45;
                *long long v51 = v48;
                v51[1] = v45[1];
                if (v41 < v44) {
                  break;
                }
                uint64_t v52 = 2 * v44;
                uint64_t v44 = (2 * v44) | 1;
                uint64_t v45 = (float *)&a3[8 * v44];
                uint64_t v53 = v52 + 2;
                if (v53 < v8 && *v45 > v45[2])
                {
                  v45 += 2;
                  uint64_t v44 = v53;
                }
                float v48 = *v45;
              }
              while (*v45 <= v49);
              float *v46 = v47;
              *((_DWORD *)v46 + 1) = v50;
            }
          }
          BOOL v23 = v42-- <= 0;
        }
        while (!v23);
      }
    }
    if (a1 != a2)
    {
      if (v7 >= 16)
      {
        uint64_t v9 = (float *)(a3 + 8);
        uint64_t v10 = (float *)(a3 + 16);
        while (1)
        {
          if (COERCE_FLOAT(*a1) > *(float *)a3)
          {
            *(void *)a3 = *a1;
            if (v7 == 16 || *v9 <= *v10)
            {
              uint64_t v11 = (float *)(a3 + 8);
              uint64_t v12 = 1;
              float v13 = *(float *)a3;
              float v14 = *v9;
              float v15 = *(float *)a3;
              if (*v9 <= *(float *)a3)
              {
LABEL_27:
                int v16 = *((_DWORD *)a3 + 1);
                float v17 = (float *)a3;
                do
                {
                  uint64_t v18 = v17;
                  float v17 = v11;
                  *uint64_t v18 = v14;
                  v18[1] = v11[1];
                  if ((uint64_t)((unint64_t)(v8 - 2) >> 1) < v12) {
                    break;
                  }
                  uint64_t v19 = 2 * v12;
                  uint64_t v12 = (2 * v12) | 1;
                  uint64_t v11 = (float *)&a3[8 * v12];
                  uint64_t v20 = v19 + 2;
                  if (v20 < v8 && *v11 > v11[2])
                  {
                    v11 += 2;
                    uint64_t v12 = v20;
                  }
                  float v14 = *v11;
                }
                while (*v11 <= v15);
                *float v17 = v13;
                *((_DWORD *)v17 + 1) = v16;
              }
            }
            else
            {
              uint64_t v11 = (float *)(a3 + 16);
              uint64_t v12 = 2;
              float v13 = *(float *)a3;
              float v14 = *v10;
              float v15 = *(float *)a3;
              if (*v10 <= *(float *)a3) {
                goto LABEL_27;
              }
            }
          }
          if (++a1 == a2) {
            goto LABEL_33;
          }
        }
      }
      do
      {
        if (COERCE_FLOAT(*a1) > *(float *)a3) {
          *(void *)a3 = *a1;
        }
        ++a1;
      }
      while (a1 != a2);
    }
LABEL_33:
    if (v7 >= 9)
    {
      uint64_t v21 = (unint64_t)v7 >> 3;
      uint64_t v22 = v5;
      do
      {
        uint64_t v24 = 0;
        float v25 = *(float *)a3;
        int v26 = *((_DWORD *)a3 + 1);
        unint64_t v27 = a3;
        do
        {
          unint64_t v28 = v27;
          v27 += 8 * v24 + 8;
          uint64_t v29 = 2 * v24;
          uint64_t v24 = (2 * v24) | 1;
          uint64_t v30 = v29 + 2;
          if (v30 < v21 && *(float *)v27 > *((float *)v27 + 2))
          {
            v27 += 8;
            uint64_t v24 = v30;
          }
          *(_DWORD *)unint64_t v28 = *(_DWORD *)v27;
          *((_DWORD *)v28 + 1) = *((_DWORD *)v27 + 1);
        }
        while (v24 <= (uint64_t)((unint64_t)(v21 - 2) >> 1));
        unint64_t v31 = v22 - 8;
        if (v27 == v22 - 8)
        {
          *(float *)unint64_t v27 = v25;
          *((_DWORD *)v27 + 1) = v26;
        }
        else
        {
          *(_DWORD *)unint64_t v27 = *((_DWORD *)v22 - 2);
          *((_DWORD *)v27 + 1) = *((_DWORD *)v22 - 1);
          *((float *)v22 - 2) = v25;
          *((_DWORD *)v22 - 1) = v26;
          uint64_t v32 = v27 - a3 + 8;
          if (v32 >= 9)
          {
            unint64_t v33 = (((unint64_t)v32 >> 3) - 2) >> 1;
            uint64_t v34 = &a3[8 * v33];
            float v35 = *(float *)v27;
            float v36 = COERCE_FLOAT(*(void *)v34);
            float v37 = *(float *)v27;
            if (v36 > *(float *)v27)
            {
              int v38 = *((_DWORD *)v27 + 1);
              do
              {
                uint64_t v39 = v27;
                unint64_t v27 = v34;
                *(float *)uint64_t v39 = v36;
                *((_DWORD *)v39 + 1) = *((_DWORD *)v34 + 1);
                if (!v33) {
                  break;
                }
                unint64_t v33 = (v33 - 1) >> 1;
                uint64_t v34 = &a3[8 * v33];
                float v36 = COERCE_FLOAT(*(void *)v34);
              }
              while (v36 > v37);
              *(float *)unint64_t v27 = v35;
              *((_DWORD *)v27 + 1) = v38;
            }
          }
        }
        uint64_t v22 = v31;
        BOOL v23 = v21-- <= 2;
      }
      while (!v23);
    }
  }
  return a2;
}

char *sub_1B4C2B938(char **a1, uint64_t a2)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_1B4C0E0BC();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0x5555555555555556 * ((a1[2] - *a1) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) >= 0x555555555555555) {
    unint64_t v5 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v5 = v4;
  }
  if (v5 > 0xAAAAAAAAAAAAAAALL) {
    sub_1B4BB2D38();
  }
  uint64_t v7 = 24 * v5;
  uint64_t v8 = (char *)operator new(24 * v5);
  uint64_t v9 = &v8[24 * v3];
  uint64_t v10 = &v8[v7];
  *(_OWORD *)uint64_t v9 = *(_OWORD *)a2;
  *((void *)v9 + 2) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v11 = v9 + 24;
  uint64_t v12 = *a1;
  float v13 = a1[1];
  if (v13 == *a1)
  {
    *a1 = v9;
    a1[1] = v11;
    a1[2] = v10;
  }
  else
  {
    do
    {
      long long v14 = *(_OWORD *)(v13 - 24);
      v13 -= 24;
      *(_OWORD *)(v9 - 24) = v14;
      v9 -= 24;
      *((void *)v9 + 2) = *((void *)v13 + 2);
      *(void *)float v13 = 0;
      *((void *)v13 + 1) = 0;
      *((void *)v13 + 2) = 0;
    }
    while (v13 != v12);
    float v13 = *a1;
    float v15 = a1[1];
    *a1 = v9;
    a1[1] = v11;
    a1[2] = v10;
    if (v15 != v13)
    {
      int v16 = v15;
      do
      {
        uint64_t v18 = (void *)*((void *)v16 - 3);
        v16 -= 24;
        float v17 = v18;
        if (v18)
        {
          *((void *)v15 - 2) = v17;
          operator delete(v17);
        }
        float v15 = v16;
      }
      while (v16 != v13);
    }
  }
  if (v13) {
    operator delete(v13);
  }
  return v11;
}

void sub_1B4C2BD10(CGImage *a1)
{
}

__CVBuffer *sub_1B4C2BEB4(__CVBuffer *a1, size_t *a2)
{
  unint64_t v3 = a1;
  v11[1] = *MEMORY[0x1E4F143B8];
  if (CVPixelBufferGetPixelFormatType(a1) != 1111970369
    || CVPixelBufferGetWidth(v3) != *a2
    || CVPixelBufferGetHeight(v3) != a2[1])
  {
    VTPixelTransferSessionRef pixelTransferSessionOut = 0;
    CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    if (VTPixelTransferSessionCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], &pixelTransferSessionOut))
    {
      return 0;
    }
    else
    {
      CVPixelBufferRef pixelBufferOut = 0;
      uint64_t v10 = *MEMORY[0x1E4F24D20];
      v11[0] = MEMORY[0x1E4F1CC08];
      objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v5, (uint64_t)v11, (uint64_t)&v10, 1);
      CFDictionaryRef v6 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();
      if (CVPixelBufferCreate(v4, *a2, a2[1], 0x42475241u, v6, &pixelBufferOut)
        || VTPixelTransferSessionTransferImage(pixelTransferSessionOut, v3, pixelBufferOut))
      {
        CVPixelBufferRelease(pixelBufferOut);
        CFRelease(pixelTransferSessionOut);
        unint64_t v3 = 0;
      }
      else
      {
        CFRelease(pixelTransferSessionOut);
        unint64_t v3 = pixelBufferOut;
      }
    }
  }
  return v3;
}

void sub_1B4C2C014(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t CVNLPBeamSearchCreate(void *a1, void *a2)
{
  id v3 = a1;
  CFDictionaryRef v6 = objc_msgSend_objectForKeyedSubscript_(v3, v4, (uint64_t)CVNLPBeamSearchSize, v5);
  uint64_t v9 = objc_msgSend_objectForKeyedSubscript_(v3, v7, (uint64_t)CVNLPBeamSearchLengthNormalizationFactor, v8);
  uint64_t v12 = objc_msgSend_objectForKeyedSubscript_(v3, v10, (uint64_t)CVNLPBeamSearchOutputVocabSize, v11);
  float v15 = objc_msgSend_objectForKeyedSubscript_(v3, v13, (uint64_t)CVNLPBeamEndToken, v14);
  uint64_t v65 = objc_msgSend_objectForKeyedSubscript_(v3, v16, (uint64_t)CVNLPBeamSearchOutputVocabPath, v17);
  long long v64 = objc_msgSend_objectForKeyedSubscript_(v3, v18, (uint64_t)CVNLPBeamSearchOutputVocabMap, v19);
  __int16 v63 = objc_msgSend_objectForKeyedSubscript_(v3, v20, (uint64_t)CVNLPBeamSearchOutputVocabFilterList, v21);
  int v26 = objc_msgSend_objectForKeyedSubscript_(v3, v22, (uint64_t)CVNLPBeamSearchBlacklistRules, v23);
  if (v6 && v15)
  {
    int64_t v61 = v9;
    unint64_t v62 = v6;
    unint64_t v60 = v12;
    objc_msgSend_objectForKeyedSubscript_(v3, v24, (uint64_t)CVNLPBeamSearchIncludeLanguageModel, v25);
    id v27 = (id)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend_BOOLValue(v27, v28, v29, v30))
    {
      uint64_t v34 = objc_msgSend_defaultManager(MEMORY[0x1E4F28CB8], v31, v32, v33);
      int v37 = objc_msgSend_fileExistsAtPath_(v34, v35, @"/System/Library/PrivateFrameworks/CVNLP.framework/lm_vocabulary.plist", v36);

      if (v37) {
        int v38 = @"/System/Library/PrivateFrameworks/CVNLP.framework/lm_vocabulary.plist";
      }
      else {
        int v38 = @"/tmp/lm_vocabulary.plist";
      }
    }
    else
    {
      int v38 = 0;
    }
    int64_t v41 = (uint64_t *)objc_msgSend_unsignedIntegerValue(v6, v31, v32, v33);
    objc_msgSend_floatValue(v9, v42, v43, v44);
    float v46 = v45;
    int v50 = (uint64_t *)objc_msgSend_unsignedIntegerValue(v60, v47, v48, v49);
    __int16 v54 = (uint64_t *)objc_msgSend_unsignedIntegerValue(v15, v51, v52, v53);
    unint64_t v58 = objc_msgSend_path(v65, v55, v56, v57);
    if (qword_1EB9FE2B0 != -1) {
      dispatch_once(&qword_1EB9FE2B0, &unk_1F0D55FA0);
    }
    uint64_t Instance = _CFRuntimeCreateInstance();
    sub_1B4C3FB08((uint64_t **)(Instance + 16), v41, v50, v54, v58, v64, v63, v26, v46, v38);

    uint64_t v9 = v61;
    CFDictionaryRef v6 = v62;
    uint64_t v12 = v60;
  }
  else
  {
    uint64_t v39 = objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E4F28C58], v24, (uint64_t)CVNLPErrorDomain, 1, 0);
    id v27 = v39;
    if (a2)
    {
      id v27 = v39;
      uint64_t Instance = 0;
      *a2 = v27;
    }
    else
    {
      uint64_t Instance = 0;
    }
  }

  return Instance;
}

void sub_1B4C2C31C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_1B4C2C3A4()
{
}

void sub_1B4C2C3B4()
{
}

void sub_1B4C2C3C4()
{
}

void sub_1B4C2C3D4()
{
}

void sub_1B4C2C3E4()
{
}

void sub_1B4C2C3F4()
{
}

void sub_1B4C2C400(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C2C41C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

__CFArray *CVNLPBeamSearchOneStep(uint64_t a1, CFArrayRef theArray)
{
  v93 = 0;
  long long v94 = 0uLL;
  CFIndex Count = CFArrayGetCount(theArray);
  if (Count)
  {
    CFIndex v2 = 0;
    while (1)
    {
      CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, v2);
      Value = CFDictionaryGetValue(ValueAtIndex, CVNLPBeamSearchNextTokenMetaData);
      CFDictionaryRef v6 = ValueAtIndex;
      id v3 = objc_msgSend_objectForKeyedSubscript_(v6, v7, (uint64_t)CVNLPBeamSearchBeamID, v8);
      uint64_t v11 = objc_msgSend_objectForKeyedSubscript_(v6, v9, (uint64_t)CVNLPBeamSearchNextTokenID, v10);
      objc_msgSend_objectForKeyedSubscript_(v6, v12, (uint64_t)CVNLPBeamSearchNextTokenSoftmaxValues, v13);
      CFMutableArrayRef v85 = (CFMutableArrayRef) objc_claimAutoreleasedReturnValue();
      uint64_t v17 = objc_msgSend_bytes(v85, v14, v15, v16);
      v84 = v11;
      uint64_t v21 = objc_msgSend_unsignedIntegerValue(v11, v18, v19, v20);
      uint64_t v25 = objc_msgSend_unsignedIntegerValue(v3, v22, v23, v24);
      int v26 = (void *)v94;
      if ((unint64_t)v94 < *((void *)&v94 + 1))
      {
        *(void *)long long v94 = v21;
        v26[1] = CFRetain(Value);
        v26[2] = v17;
        id v27 = v26 + 4;
        v26[3] = v25;
        goto LABEL_5;
      }
      uint64_t v28 = (uint64_t)(v94 - (void)v93) >> 5;
      if ((unint64_t)(v28 + 1) >> 59) {
        sub_1B4BB3244();
      }
      unint64_t v29 = (uint64_t)(*((void *)&v94 + 1) - (void)v93) >> 4;
      if (v29 <= v28 + 1) {
        unint64_t v29 = v28 + 1;
      }
      unint64_t v30 = *((void *)&v94 + 1) - (void)v93 >= 0x7FFFFFFFFFFFFFE0uLL ? 0x7FFFFFFFFFFFFFFLL : v29;
      v98 = (char *)&v94 + 8;
      v81 = v3;
      if (v30)
      {
        if (v30 >> 59) {
          sub_1B4BB2D38();
        }
        unint64_t v31 = (char *)operator new(32 * v30);
      }
      else
      {
        unint64_t v31 = 0;
      }
      uint64_t v32 = (uint64_t *)&v31[32 * v28];
      unint64_t v95 = (uint64_t *)v31;
      unint64_t v96 = v32;
      uint64_t v33 = &v31[32 * v30];
      *(void *)&long long v97 = v32;
      *((void *)&v97 + 1) = v33;
      uint64_t *v32 = v21;
      v32[1] = (uint64_t)CFRetain(Value);
      v32[2] = v17;
      v32[3] = v25;
      id v27 = v32 + 4;
      *(void *)&long long v97 = v32 + 4;
      uint64_t v34 = (char *)v93;
      float v35 = (char *)v94;
      if ((void *)v94 == v93) {
        break;
      }
      unint64_t v36 = 0;
      do
      {
        int v37 = &v32[v36 / 8];
        v32[v36 / 8 - 4] = *(void *)&v35[v36 - 32];
        *(v37 - 3) = (uint64_t)CFRetain(*(CFTypeRef *)&v35[v36 - 24]);
        *(v37 - 2) = *(void *)&v35[v36 - 16];
        *(v37 - 1) = *(void *)&v35[v36 - 8];
        v36 -= 32;
      }
      while (&v35[v36] != v34);
      float v35 = (char *)v93;
      int v38 = (char *)v94;
      v93 = &v32[v36 / 8];
      long long v94 = v97;
      id v27 = (void *)v97;
      if (v38 != v35)
      {
        id v3 = v81;
        do
        {
          uint64_t v39 = (const void *)*((void *)v38 - 3);
          if (v39)
          {
            CFRelease(v39);
            *((void *)v38 - 3) = 0;
          }
          v38 -= 32;
        }
        while (v38 != v35);
LABEL_27:
        if (!v35) {
          goto LABEL_5;
        }
LABEL_4:
        operator delete(v35);
        goto LABEL_5;
      }
      id v3 = v81;
      if (v35) {
        goto LABEL_4;
      }
LABEL_5:
      *(void *)&long long v94 = v27;

      if (++v2 == Count) {
        goto LABEL_29;
      }
    }
    v93 = &v31[32 * v28];
    *(void *)&long long v94 = v32 + 4;
    *((void *)&v94 + 1) = v33;
    id v3 = v81;
    goto LABEL_27;
  }
LABEL_29:
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  v91 = 0;
  v92 = 0;
  __p = 0;
  size_t v40 = (char *)v93;
  int64_t v41 = (char *)v94;
  p_p = &__p;
  LOBYTE(v88) = 0;
  uint64_t v42 = v94 - (void)v93;
  if ((void *)v94 != v93)
  {
    if (v42 < 0) {
      sub_1B4BB3244();
    }
    uint64_t v43 = (char *)operator new(v94 - (void)v93);
    uint64_t v44 = 0;
    __p = v43;
    v91 = v43;
    v92 = &v43[32 * (v42 >> 5)];
    do
    {
      float v45 = &v40[v44];
      *(void *)&v43[v44] = *(void *)&v40[v44];
      CFTypeRef v46 = CFRetain(*(CFTypeRef *)&v40[v44 + 8]);
      float v47 = &v43[v44];
      *((void *)v47 + 1) = v46;
      *((void *)v47 + 2) = *(void *)&v40[v44 + 16];
      *((void *)v47 + 3) = *(void *)&v40[v44 + 24];
      v44 += 32;
    }
    while (v45 + 32 != v41);
    v91 = &v43[v44];
  }
  sub_1B4C40F14((void *)(a1 + 16), &__p, (void **)&v95);
  long long v51 = (char *)__p;
  if (__p)
  {
    uint64_t v52 = v91;
    uint64_t v53 = __p;
    if (v91 != __p)
    {
      do
      {
        __int16 v54 = (const void *)*((void *)v52 - 3);
        if (v54)
        {
          CFRelease(v54);
          *((void *)v52 - 3) = 0;
        }
        v52 -= 32;
      }
      while (v52 != v51);
      uint64_t v53 = __p;
    }
    v91 = v51;
    operator delete(v53);
  }
  uint64_t v55 = (char *)v95;
  uint64_t v56 = v96;
  if (v95 != v96)
  {
    do
    {
      uint64_t v57 = objc_msgSend_dictionary(MEMORY[0x1E4F1CA60], v48, v49, v50);
      unint64_t v60 = objc_msgSend_numberWithUnsignedLong_(NSNumber, v58, *((void *)v55 + 2), v59);
      objc_msgSend_setObject_forKeyedSubscript_(v57, v61, (uint64_t)v60, (uint64_t)CVNLPBeamSearchBeamID);

      long long v64 = objc_msgSend_numberWithUnsignedLong_(NSNumber, v62, *(void *)v55, v63);
      objc_msgSend_setObject_forKeyedSubscript_(v57, v65, (uint64_t)v64, (uint64_t)CVNLPBeamSearchNextTokenID);

      CFDictionarySetValue((CFMutableDictionaryRef)v57, CVNLPBeamSearchNextTokenMetaData, *((const void **)v55 + 1));
      p_p = 0;
      uint64_t v88 = 0;
      v89 = 0;
      uint64_t v67 = (unsigned char *)*((void *)v55 + 3);
      uint64_t v66 = (unsigned char *)*((void *)v55 + 4);
      int64_t v68 = v66 - v67;
      if (v66 == v67)
      {
        v69 = 0;
      }
      else
      {
        if (v68 < 0) {
          sub_1B4BB3244();
        }
        v69 = (uint64_t *)operator new(v66 - v67);
        p_p = (void **)v69;
        v89 = &v69[v68 >> 3];
        memcpy(v69, v67, v68);
        uint64_t v88 = &v69[v68 >> 3];
      }
      CFArrayRef v70 = sub_1B4C2D254((uint64_t **)&p_p);
      CFDictionarySetValue((CFMutableDictionaryRef)v57, CVNLPBeamTokens, v70);
      CFArrayAppendValue(Mutable, v57);
      if (v70) {
        CFRelease(v70);
      }
      if (v69) {
        operator delete(v69);
      }

      v55 += 48;
    }
    while (v55 != (char *)v56);
    uint64_t v55 = (char *)v95;
  }
  if (v55)
  {
    long long v71 = v96;
    uint64_t v72 = (uint64_t *)v55;
    if (v96 != (uint64_t *)v55)
    {
      do
      {
        unint64_t v73 = (const void *)*(v71 - 5);
        if (v73)
        {
          CFRelease(v73);
          *(v71 - 5) = 0;
        }
        uint64_t v74 = (void *)*(v71 - 3);
        if (v74)
        {
          *(v71 - 2) = (uint64_t)v74;
          operator delete(v74);
        }
        v71 -= 6;
      }
      while (v71 != (uint64_t *)v55);
      uint64_t v72 = v95;
    }
    unint64_t v96 = (uint64_t *)v55;
    operator delete(v72);
  }
  uint64_t v75 = (char *)v93;
  if (v93)
  {
    v76 = (char *)v94;
    v77 = v93;
    if ((void *)v94 != v93)
    {
      do
      {
        uint64_t v78 = (const void *)*((void *)v76 - 3);
        if (v78)
        {
          CFRelease(v78);
          *((void *)v76 - 3) = 0;
        }
        v76 -= 32;
      }
      while (v76 != v75);
      v77 = v93;
    }
    *(void *)&long long v94 = v75;
    operator delete(v77);
  }
  return Mutable;
}

void sub_1B4C2C9F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va1, a13);
  va_start(va, a13);
  uint64_t v14 = va_arg(va1, void *);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  sub_1B4C2CC28((void **)va);
  sub_1B4C2CC28((void **)va1);
  _Unwind_Resume(a1);
}

void sub_1B4C2CA10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  sub_1B4C2CC28((void **)va);
  _Unwind_Resume(a1);
}

void sub_1B4C2CA24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va1, a10);
  va_start(va, a10);
  uint64_t v11 = va_arg(va1, void **);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  sub_1B4C2D1B8((void ***)va);
  sub_1B4C2CC28((void **)va1);
  _Unwind_Resume(a1);
}

void sub_1B4C2CA4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, void *a16, char a17, void *__p, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  sub_1B4C2D13C(v26 - 128);

  sub_1B4C2CC28(&a24);
  _Unwind_Resume(a1);
}

void **sub_1B4C2CC28(void **a1)
{
  CFIndex v2 = (char *)*a1;
  if (*a1)
  {
    id v3 = (char *)a1[1];
    CFAllocatorRef v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = (const void *)*((void *)v3 - 3);
        if (v5)
        {
          CFRelease(v5);
          *((void *)v3 - 3) = 0;
        }
        v3 -= 32;
      }
      while (v3 != v2);
      CFAllocatorRef v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

const void **sub_1B4C2CCA0(const void **a1)
{
  CFIndex v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void **sub_1B4C2CCD4(void **a1)
{
  CFIndex v2 = (char *)*a1;
  if (*a1)
  {
    id v3 = (char *)a1[1];
    CFAllocatorRef v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = (const void *)*((void *)v3 - 5);
        if (v5)
        {
          CFRelease(v5);
          *((void *)v3 - 5) = 0;
        }
        CFDictionaryRef v6 = (void *)*((void *)v3 - 3);
        if (v6)
        {
          *((void *)v3 - 2) = v6;
          operator delete(v6);
        }
        v3 -= 48;
      }
      while (v3 != v2);
      CFAllocatorRef v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t CVNLPBeamSearchCopyTopBeams(uint64_t a1)
{
  v35[2] = *MEMORY[0x1E4F143B8];
  unint64_t v31 = 0;
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  sub_1B4C43AFC((uint64_t)&v31, *(void *)(a1 + 72), *(void *)(a1 + 80), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 80) - *(void *)(a1 + 72)) >> 4));
  uint64_t v7 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v1, v2, v3);
  uint64_t v8 = (char *)v31;
  uint64_t v9 = v32;
  if (v31 != v32)
  {
    do
    {
      sub_1B4C69BA4((uint64_t)v8, (char **)__p);
      CFArrayRef v29 = sub_1B4C2D254((uint64_t **)__p);
      v34[0] = CVNLPBeamTokens;
      CFArrayRef v10 = v29;
      v34[1] = CVNLPBeamScore;
      v35[0] = v10;
      LODWORD(v11) = *((_DWORD *)v8 + 1);
      uint64_t v15 = objc_msgSend_numberWithFloat_(NSNumber, v12, v13, v14, v11, v29);
      v35[1] = v15;
      uint64_t v17 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v16, (uint64_t)v35, (uint64_t)v34, 2);
      objc_msgSend_addObject_(v7, v18, (uint64_t)v17, v19);

      if (v10) {
        CFRelease(v10);
      }
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      v8 += 48;
    }
    while (v8 != v9);
  }
  uint64_t v20 = objc_msgSend_copy(v7, v4, v5, v6);

  uint64_t v21 = (char *)v31;
  if (v31)
  {
    uint64_t v22 = v32;
    uint64_t v23 = v31;
    if (v32 != v31)
    {
      do
      {
        uint64_t v25 = (const void *)*((void *)v22 - 2);
        if (v25)
        {
          CFRelease(v25);
          *((void *)v22 - 2) = 0;
        }
        uint64_t v26 = *((void *)v22 - 5);
        if (v26)
        {
          uint64_t v27 = *((void *)v22 - 4);
          uint64_t v24 = (void *)*((void *)v22 - 5);
          if (v27 != v26)
          {
            do
            {
              if (*(char *)(v27 - 1) < 0) {
                operator delete(*(void **)(v27 - 24));
              }
              v27 -= 40;
            }
            while (v27 != v26);
            uint64_t v24 = (void *)*((void *)v22 - 5);
          }
          *((void *)v22 - 4) = v26;
          operator delete(v24);
        }
        v22 -= 48;
      }
      while (v22 != v21);
      uint64_t v23 = v31;
    }
    uint64_t v32 = v21;
    operator delete(v23);
  }
  return v20;
}

void sub_1B4C2CF78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13)
{
  sub_1B4C2D00C(&a13);
  _Unwind_Resume(a1);
}

void **sub_1B4C2D00C(void **a1)
{
  uint64_t v2 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    CFAllocatorRef v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        uint64_t v6 = (const void *)*((void *)v3 - 2);
        if (v6)
        {
          CFRelease(v6);
          *((void *)v3 - 2) = 0;
        }
        uint64_t v7 = *((void *)v3 - 5);
        if (v7)
        {
          uint64_t v8 = *((void *)v3 - 4);
          uint64_t v5 = (void *)*((void *)v3 - 5);
          if (v8 != v7)
          {
            do
            {
              if (*(char *)(v8 - 1) < 0) {
                operator delete(*(void **)(v8 - 24));
              }
              v8 -= 40;
            }
            while (v8 != v7);
            uint64_t v5 = (void *)*((void *)v3 - 5);
          }
          *((void *)v3 - 4) = v7;
          operator delete(v5);
        }
        v3 -= 48;
      }
      while (v3 != v2);
      CFAllocatorRef v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void CVNLPBeamSearchReset(uint64_t a1)
{
}

uint64_t sub_1B4C2D0D8()
{
  qword_1EB9FE2C0 = 0;
  qword_1EB9FE2D0 = 0;
  unk_1EB9FE2D8 = 0;
  qword_1EB9FE2C8 = (uint64_t)"CVNLPBeamSearch";
  qword_1EB9FE2E0 = (uint64_t)sub_1B4C2D134;
  xmmword_1EB9FE2E8 = 0u;
  unk_1EB9FE2F8 = 0u;
  uint64_t result = _CFRuntimeRegisterClass();
  qword_1EB9FE2B8 = result;
  return result;
}

uint64_t sub_1B4C2D134(uint64_t a1)
{
  return sub_1B4C40DA0(a1 + 16);
}

uint64_t sub_1B4C2D13C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    while (1)
    {
      uint64_t v4 = i - 32;
      *(void *)(a1 + 16) = i - 32;
      uint64_t v5 = *(const void **)(i - 24);
      if (v5) {
        break;
      }
      i -= 32;
      if (v4 == v2) {
        goto LABEL_6;
      }
    }
    CFRelease(v5);
    *(void *)(i - 24) = 0;
  }
LABEL_6:
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void ***sub_1B4C2D1B8(void ***result)
{
  uint64_t v1 = result;
  if (!*((unsigned char *)result + 8))
  {
    uint64_t v2 = *result;
    uint64_t v3 = (char *)**result;
    if (v3)
    {
      uint64_t v4 = (char *)v2[1];
      uint64_t v5 = **result;
      if (v4 != v3)
      {
        do
        {
          uint64_t v6 = (const void *)*((void *)v4 - 3);
          if (v6)
          {
            CFRelease(v6);
            *((void *)v4 - 3) = 0;
          }
          v4 -= 32;
        }
        while (v4 != v3);
        uint64_t v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

CFArrayRef sub_1B4C2D254(uint64_t **a1)
{
  unint64_t v2 = a1[1] - *a1;
  __p = 0;
  unint64_t v36 = 0;
  v37[0] = 0;
  sub_1B4C2D544((uint64_t)&__p, v2);
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1 != v4)
  {
    uint64_t v5 = v36;
    do
    {
      uint64_t v6 = *v3;
      if ((unint64_t)v5 < v37[0])
      {
        sub_1B4C2D91C(v5++, *v3);
      }
      else
      {
        uint64_t v7 = ((char *)v5 - (unsigned char *)__p) >> 3;
        if ((unint64_t)(v7 + 1) >> 61) {
          sub_1B4BB3244();
        }
        unint64_t v8 = (uint64_t)(v37[0] - (void)__p) >> 2;
        if (v8 <= v7 + 1) {
          unint64_t v8 = v7 + 1;
        }
        if (v37[0] - (void)__p >= 0x7FFFFFFFFFFFFFF8uLL) {
          unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v9 = v8;
        }
        int64_t v41 = v37;
        if (v9)
        {
          if (v9 >> 61) {
            sub_1B4BB2D38();
          }
          CFArrayRef v10 = (char *)operator new(8 * v9);
        }
        else
        {
          CFArrayRef v10 = 0;
        }
        v37[1] = v10;
        int v38 = (CFNumberRef *)&v10[8 * v7];
        uint64_t v39 = v38;
        size_t v40 = &v10[8 * v9];
        sub_1B4C2D91C(v38, v6);
        double v11 = v38;
        uint64_t v5 = v39 + 1;
        uint64_t v12 = (CFNumberRef *)__p;
        uint64_t v13 = v36;
        if (v36 == __p)
        {
          __p = v38;
          unint64_t v36 = v39 + 1;
          v37[0] = v40;
        }
        else
        {
          unint64_t v14 = (char *)v36 - (unsigned char *)__p - 8;
          if (v14 < 0x48) {
            goto LABEL_23;
          }
          unint64_t v15 = ((char *)(v36 - 1) - (unsigned char *)__p) & 0xFFFFFFFFFFFFFFF8;
          if ((CFNumberRef *)((char *)v38 - v15 - 8) < v36 && (CFNumberRef *)((char *)v36 - v15 - 8) < v38) {
            goto LABEL_23;
          }
          uint64_t v16 = (v14 >> 3) + 1;
          unint64_t v17 = 8 * (v16 & 0x3FFFFFFFFFFFFFFCLL);
          uint64_t v18 = &v38[v17 / 0xFFFFFFFFFFFFFFF8];
          uint64_t v19 = &v36[v17 / 0xFFFFFFFFFFFFFFF8];
          uint64_t v20 = v36 - 2;
          uint64_t v21 = v38 - 2;
          uint64_t v22 = v16 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v23 = *(_OWORD *)v20;
            *((_OWORD *)v21 - 1) = *((_OWORD *)v20 - 1);
            *(_OWORD *)uint64_t v21 = v23;
            *((_OWORD *)v20 - 1) = 0uLL;
            *(_OWORD *)uint64_t v20 = 0uLL;
            v20 -= 4;
            v21 -= 4;
            v22 -= 4;
          }
          while (v22);
          double v11 = v18;
          uint64_t v13 = v19;
          if (v16 != (v16 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_23:
            uint64_t v18 = v11;
            do
            {
              CFNumberRef v24 = *--v13;
              *--uint64_t v18 = v24;
              *uint64_t v13 = 0;
            }
            while (v13 != v12);
          }
          uint64_t v13 = (CFNumberRef *)__p;
          uint64_t v25 = v36;
          __p = v18;
          unint64_t v36 = v5;
          v37[0] = v40;
          while (v25 != v13)
          {
            uint64_t v27 = *--v25;
            uint64_t v26 = v27;
            if (v27) {
              CFRelease(v26);
            }
          }
        }
        if (v13) {
          operator delete(v13);
        }
      }
      unint64_t v36 = v5;
      ++v3;
    }
    while (v3 != v4);
  }
  CFArrayRef v28 = sub_1B4C2D6B8((char **)&__p);
  CFArrayRef v29 = (CFNumberRef *)__p;
  if (__p)
  {
    unint64_t v30 = v36;
    unint64_t v31 = __p;
    if (v36 != __p)
    {
      do
      {
        uint64_t v33 = *--v30;
        uint64_t v32 = v33;
        if (v33) {
          CFRelease(v32);
        }
      }
      while (v30 != v29);
      unint64_t v31 = __p;
    }
    unint64_t v36 = v29;
    operator delete(v31);
  }
  return v28;
}

void sub_1B4C2D4CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

void sub_1B4C2D4E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

void sub_1B4C2D4F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, char a12)
{
}

void sub_1B4C2D514(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

void sub_1B4C2D52C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

void sub_1B4C2D544(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = *(char **)a1;
  if (a2 <= (uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) {
    return;
  }
  if (a2 >> 61) {
    sub_1B4BB3244();
  }
  uint64_t v4 = *(char **)(a1 + 8);
  uint64_t v5 = 8 * a2;
  uint64_t v6 = (char *)operator new(8 * a2);
  uint64_t v7 = &v6[v5];
  uint64_t v8 = v4 - v2;
  unint64_t v9 = (unint64_t)&v6[(v4 - v2) & 0xFFFFFFFFFFFFFFF8];
  if (v4 == v2)
  {
    *(void *)a1 = v9;
    *(void *)(a1 + 8) = v9;
    *(void *)(a1 + 16) = v7;
    goto LABEL_7;
  }
  unint64_t v10 = v8 - 8;
  if ((unint64_t)(v8 - 8) >= 0x78)
  {
    BOOL v12 = &v6[(v8 & 0xFFFFFFFFFFFFFFF8) - (v10 & 0xFFFFFFFFFFFFFFF8) - 8] >= v4
       || (unint64_t)&v4[-(v10 & 0xFFFFFFFFFFFFFFF8) - 8] >= v9;
    double v11 = &v6[(v4 - v2) & 0xFFFFFFFFFFFFFFF8];
    if (v12)
    {
      uint64_t v13 = v8 >> 3;
      uint64_t v14 = (v10 >> 3) + 1;
      uint64_t v15 = 8 * (v14 & 0x3FFFFFFFFFFFFFFCLL);
      double v11 = (char *)(v9 - v15);
      uint64_t v16 = &v4[-v15];
      unint64_t v17 = v4 - 16;
      uint64_t v18 = &v6[8 * v13 - 16];
      uint64_t v19 = v14 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v20 = *(_OWORD *)v17;
        *((_OWORD *)v18 - 1) = *((_OWORD *)v17 - 1);
        *(_OWORD *)uint64_t v18 = v20;
        *((_OWORD *)v17 - 1) = 0uLL;
        *(_OWORD *)unint64_t v17 = 0uLL;
        v17 -= 32;
        v18 -= 32;
        v19 -= 4;
      }
      while (v19);
      uint64_t v4 = v16;
      if (v14 == (v14 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_21;
      }
    }
  }
  else
  {
    double v11 = &v6[(v4 - v2) & 0xFFFFFFFFFFFFFFF8];
  }
  do
  {
    uint64_t v21 = *((void *)v4 - 1);
    v4 -= 8;
    *((void *)v11 - 1) = v21;
    v11 -= 8;
    *(void *)uint64_t v4 = 0;
  }
  while (v4 != v2);
LABEL_21:
  unint64_t v2 = *(char **)a1;
  uint64_t v22 = *(char **)(a1 + 8);
  *(void *)a1 = v11;
  *(void *)(a1 + 8) = v9;
  *(void *)(a1 + 16) = v7;
  while (v22 != v2)
  {
    CFNumberRef v24 = (const void *)*((void *)v22 - 1);
    v22 -= 8;
    long long v23 = v24;
    if (v24) {
      CFRelease(v23);
    }
  }
LABEL_7:
  if (v2)
  {
    operator delete(v2);
  }
}

CFArrayRef sub_1B4C2D6B8(char **a1)
{
  unint64_t v2 = *a1;
  uint64_t v1 = a1[1];
  unint64_t v3 = v1 - *a1;
  if (v1 == *a1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = 0;
    goto LABEL_12;
  }
  if ((v3 & 0x8000000000000000) != 0) {
    sub_1B4BB3244();
  }
  uint64_t v4 = operator new(v1 - v2);
  bzero(v4, v1 - v2);
  uint64_t v5 = (char *)v4 + v3;
  if (v3 - 8 < 0x18)
  {
    uint64_t v6 = v4;
    do
    {
LABEL_11:
      uint64_t v14 = *(void *)v2;
      v2 += 8;
      *v6++ = v14;
    }
    while (v2 != v1);
    goto LABEL_12;
  }
  uint64_t v6 = v4;
  if ((unint64_t)((char *)v4 - v2) < 0x20) {
    goto LABEL_11;
  }
  unint64_t v7 = ((v3 - 8) >> 3) + 1;
  uint64_t v8 = 8 * (v7 & 0x3FFFFFFFFFFFFFFCLL);
  uint64_t v6 = (void *)((char *)v4 + v8);
  unint64_t v9 = &v2[v8];
  unint64_t v10 = (long long *)(v2 + 16);
  double v11 = v4 + 1;
  uint64_t v12 = v7 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    long long v13 = *v10;
    *(v11 - 1) = *(v10 - 1);
    _OWORD *v11 = v13;
    v10 += 2;
    v11 += 2;
    v12 -= 4;
  }
  while (v12);
  unint64_t v2 = v9;
  if (v7 != (v7 & 0x3FFFFFFFFFFFFFFCLL)) {
    goto LABEL_11;
  }
LABEL_12:
  CFArrayRef v15 = CFArrayCreate(0, (const void **)v4, (v5 - (char *)v4) >> 3, MEMORY[0x1E4F1D510]);
  if (!v15)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (v4) {
    operator delete(v4);
  }
  return v15;
}

void sub_1B4C2D818(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  __cxa_free_exception(v12);
  if (v11) {
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

void **sub_1B4C2D854(void **a1)
{
  unint64_t v2 = (char *)*a1;
  if (*a1)
  {
    unint64_t v3 = (char *)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        uint64_t v6 = (const void *)*((void *)v3 - 1);
        v3 -= 8;
        uint64_t v5 = v6;
        if (v6) {
          CFRelease(v5);
        }
      }
      while (v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_1B4C2D8C4(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != v3)
  {
    uint64_t v5 = *(const void **)(v2 - 8);
    v2 -= 8;
    uint64_t v4 = v5;
    *(void *)(a1 + 16) = v2;
    if (v5)
    {
      CFRelease(v4);
      uint64_t v2 = *(void *)(a1 + 16);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

CFNumberRef sub_1B4C2D91C(CFNumberRef *a1, uint64_t a2)
{
  uint64_t valuePtr = a2;
  CFNumberRef result = CFNumberCreate(0, kCFNumberLongType, &valuePtr);
  *a1 = result;
  if (!result)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  return result;
}

void sub_1B4C2D9A4(_Unwind_Exception *exception_object)
{
  if (*v1) {
    CFRelease(*v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B4C2DAE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C2DB10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C2DBEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C2DC04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C2DCD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C2DE30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C2E39C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1B4BF9508((void **)va);

  _Unwind_Resume(a1);
}

void sub_1B4C2E4D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)CVNLPCaptionEncoderLSTM;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_1B4C2E600(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C2E8CC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1B4C2E8E0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1B4C2E8F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31)
{
  uint64_t v33 = *(void **)(v31 - 136);
  if (!v33) {
    _Unwind_Resume(exception_object);
  }
  *(void *)(v31 - 128) = v33;
  operator delete(v33);
  _Unwind_Resume(exception_object);
}

void sub_1B4C2E9C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C2F198(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  if (a46 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v53 - 129) < 0) {
    operator delete(*(void **)(v53 - 152));
  }
  if (a2 == 4)
  {
    uint64_t v56 = __cxa_begin_catch(a1);
    if (v52)
    {
      sub_1B4C3013C((uint64_t)v56);
      *uint64_t v52 = (id)objc_claimAutoreleasedReturnValue();
    }
  }
  else if (a2 == 3)
  {
    uint64_t v57 = __cxa_begin_catch(a1);
    if (v52)
    {
      sub_1B4C300C4((uint64_t)v57);
      *uint64_t v52 = (id)objc_claimAutoreleasedReturnValue();
    }
  }
  else
  {
    unint64_t v58 = __cxa_begin_catch(a1);
    if (a2 != 2)
    {
      uint64_t v59 = sub_1B4BFA19C(4);
      if (os_log_type_enabled(v59, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)(v53 - 160) = 0;
        _os_log_impl(&dword_1B4BAD000, v59, OS_LOG_TYPE_ERROR, "Unknown error encountered during initWithOptions.", (uint8_t *)(v53 - 160), 2u);
      }

      __cxa_end_catch();
LABEL_20:
      JUMPOUT(0x1B4C2F104);
    }
    if (v52)
    {
      sub_1B4C3004C((uint64_t)v58);
      *uint64_t v52 = (id)objc_claimAutoreleasedReturnValue();
    }
  }
  __cxa_end_catch();
  goto LABEL_20;
}

void sub_1B4C2F4F8(_Unwind_Exception *a1)
{
  __cxa_end_catch();

  _Unwind_Resume(a1);
}

void sub_1B4C2F540(const __CFURL **a1@<X0>, void *a2@<X8>)
{
  CFURLRef v2 = *a1;
  if (!v2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1B4C316A8(exception);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  CFStringRef v4 = CFURLCopyFileSystemPath(v2, kCFURLPOSIXPathStyle);
  sub_1B4C316B8(&cf, v4);
  if (!cf)
  {
    uint64_t v6 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v6, "Could not construct");
    __cxa_throw(v6, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  p_CFTypeRef cf = &cf;
  sub_1B4C315C8((const __CFString ***)&p_cf, a2);
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1B4C2F61C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  __cxa_free_exception(v9);
  sub_1B4C31674(&a9);
  _Unwind_Resume(a1);
}

void sub_1B4C2F638(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1B4C2F650(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

const void **sub_1B4C2F664(const void **a1)
{
  CFURLRef v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void sub_1B4C2F698(void *a1, uint64_t a2)
{
  sub_1B4BB2204((uint64_t)v31);
  int v4 = *(char *)(a2 + 23);
  if (v4 >= 0) {
    uint64_t v5 = a2;
  }
  else {
    uint64_t v5 = *(void *)a2;
  }
  if (v4 >= 0) {
    uint64_t v6 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v6 = *(void *)(a2 + 8);
  }
  unint64_t v7 = sub_1B4BB34F0(v31, v5, v6);
  sub_1B4BB34F0(v7, (uint64_t)"/", 1);
  uint64_t v8 = sub_1B4BB34F0(v31, (uint64_t)"CLIP", 4);
  sub_1B4BB34F0(v8, (uint64_t)"/", 1);
  std::stringbuf::str();
  if (((char)v30 & 0x80000000) == 0)
  {
    p_src = (void **)&__src;
    if (v30 >= (unint64_t)v30 - 1) {
      size_t v10 = v30 - 1;
    }
    else {
      size_t v10 = v30;
    }
    if (v10 < 0x7FFFFFFFFFFFFFF8) {
      goto LABEL_12;
    }
LABEL_41:
    sub_1B4BB33D8();
  }
  p_src = __src;
  if (v29 >= v29 - 1) {
    size_t v10 = v29 - 1;
  }
  else {
    size_t v10 = v29;
  }
  if (v10 >= 0x7FFFFFFFFFFFFFF8) {
    goto LABEL_41;
  }
LABEL_12:
  if (v10 >= 0x17)
  {
    uint64_t v21 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17) {
      uint64_t v21 = v10 | 7;
    }
    uint64_t v22 = v21 + 1;
    double v11 = operator new(v21 + 1);
    size_t v25 = v10;
    int64_t v26 = v22 | 0x8000000000000000;
    CFNumberRef v24 = v11;
LABEL_35:
    memmove(v11, p_src, v10);
    *((unsigned char *)v11 + v10) = 0;
    if (((char)v30 & 0x80000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_36;
  }
  HIBYTE(v26) = v10;
  double v11 = &v24;
  if (v10) {
    goto LABEL_35;
  }
  LOBYTE(v24) = 0;
  if (((char)v30 & 0x80000000) == 0) {
    goto LABEL_15;
  }
LABEL_36:
  operator delete(__src);
LABEL_15:
  v31[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v31 + *(void *)(v31[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v31[1] = MEMORY[0x1E4FBA470] + 16;
  if (v32 < 0) {
    operator delete((void *)v31[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1BA992920](&v33);
  if (v26 >= 0) {
    uint64_t v14 = (const UInt8 *)&v24;
  }
  else {
    uint64_t v14 = (const UInt8 *)v24;
  }
  if (v14)
  {
    if (v26 >= 0) {
      CFIndex v15 = HIBYTE(v26);
    }
    else {
      CFIndex v15 = v25;
    }
    CFStringRef v16 = CFStringCreateWithBytes(0, v14, v15, 0x8000100u, 0);
    CFStringRef v27 = v16;
    if (!v16)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    if (v26 < 0) {
      goto LABEL_26;
    }
  }
  else
  {
    CFStringRef v16 = 0;
    CFStringRef v27 = 0;
    if (v26 < 0) {
LABEL_26:
    }
      operator delete(v24);
  }
  unint64_t v17 = objc_msgSend_createBundle(*(void **)(a2 + 24), (const char *)v14, v12, v13, v24);
  objc_msgSend_pathForResource_ofType_(v17, v18, (uint64_t)v16, 0);
  uint64_t v19 = (__CFString *)objc_claimAutoreleasedReturnValue();
  long long v20 = v19;
  if (!v19) {
    uint64_t v19 = &stru_1F0D56340;
  }
  sub_1B4C2FDF4(v19, a1);

  if (v16) {
    CFRelease(v16);
  }
}

void sub_1B4C2F9E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1B4C2FA7C(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_1B4C2FAC8(void *a1, uint64_t a2, uint64_t a3)
{
  memset(&v7, 0, sizeof(v7));
  uint64_t v5 = *(unsigned __int8 *)(a3 + 23);
  if ((v5 & 0x80u) == 0) {
    uint64_t v6 = (char *)a3;
  }
  else {
    uint64_t v6 = *(char **)a3;
  }
  if ((v5 & 0x80u) != 0) {
    uint64_t v5 = *(void *)(a3 + 8);
  }
  sub_1B4BCC01C(&v7, v6, &v6[v5]);
  sub_1B4C0A568((std::__fs::filesystem::path *)&v7, a2 + 8, &__p);
  sub_1B4BF9AE4(a1, (uint64_t)&__p);
  if ((SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v7.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_10:
    operator delete(v7.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p.__pn_.__r_.__value_.__l.__data_);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_10;
  }
}

void sub_1B4C2FB74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1B4C2FBAC(uint64_t a1, uint64_t a2)
{
  sub_1B4BB2204((uint64_t)v12);
  sub_1B4BB34F0(v12, (uint64_t)"[InvalidArgument] ", 18);
  sub_1B4BB34F0(v12, (uint64_t)"Invalid model directory: ", 25);
  uint64_t v6 = *(unsigned char **)(a2 + 8);
  uint64_t v5 = a2 + 8;
  int v4 = v6;
  int v7 = *(char *)(v5 + 23);
  if (v7 >= 0) {
    uint64_t v8 = (unsigned char *)v5;
  }
  else {
    uint64_t v8 = v4;
  }
  if (v7 >= 0) {
    uint64_t v9 = *(unsigned __int8 *)(v5 + 23);
  }
  else {
    uint64_t v9 = *(void *)(v5 + 8);
  }
  sub_1B4BCBEB8(v12, v8, &v8[v9], 0x22u, 0x5Cu);
  std::stringbuf::str();
  v12[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v12 + *(void *)(v12[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v12[1] = MEMORY[0x1E4FBA470] + 16;
  if (v13 < 0) {
    operator delete((void *)v12[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1BA992920](&v14);
  *(void *)a1 = &unk_1F0D55388;
  size_t v10 = (const char *)(a1 + 16);
  if (*(char *)(a1 + 39) < 0) {
    size_t v10 = *(const char **)(a1 + 16);
  }
  std::logic_error::logic_error((std::logic_error *)a1, v10);
  *(void *)a1 = &unk_1F0D55388;
  return a1;
}

void sub_1B4C2FD78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (*(char *)(v10 + 39) < 0)
  {
    operator delete(*v11);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1B4C2FDAC(uint64_t a1)
{
  if (*(char *)(MEMORY[0x1BA992570]() + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

void sub_1B4C2FDF4(void *a1@<X0>, void *a2@<X8>)
{
  id v3 = a1;
  int v4 = v3;
  if (v3) {
    CFRetain(v3);
  }
  sub_1B4C316B8(&cf, v4);

  if (!cf)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  p_CFTypeRef cf = &cf;
  sub_1B4C315C8((const __CFString ***)&p_cf, a2);
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1B4C2FEB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  __cxa_free_exception(v10);
  sub_1B4C31674(&a9);

  _Unwind_Resume(a1);
}

void sub_1B4C2FEDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C2FEF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  sub_1B4C31674(&a9);

  _Unwind_Resume(a1);
}

uint64_t sub_1B4C2FF08(uint64_t a1)
{
  int v1 = *(char *)(a1 + 23);
  if (v1 < 0)
  {
    if (*(void *)(a1 + 8) != 3) {
      goto LABEL_29;
    }
    int v4 = *(unsigned __int16 **)a1;
    if (**(_WORD **)a1 != 20547 || *(unsigned char *)(*(void *)a1 + 2) != 85)
    {
      if (*v4 != 20551 || *((unsigned char *)v4 + 2) != 85) {
        goto LABEL_11;
      }
      return 0x100000005;
    }
    return 0x100000000;
  }
  if (v1 != 3) {
    goto LABEL_29;
  }
  if (*(_WORD *)a1 == 20547 && *(unsigned char *)(a1 + 2) == 85) {
    return 0x100000000;
  }
  BOOL v3 = *(_WORD *)a1 == 20551 && *(unsigned char *)(a1 + 2) == 85;
  int v4 = (unsigned __int16 *)a1;
  if (v3) {
    return 0x100000005;
  }
LABEL_11:
  int v5 = *v4;
  int v6 = *((unsigned __int8 *)v4 + 2);
  if (v5 != 20033 || v6 != 69)
  {
LABEL_29:
    exception = __cxa_allocate_exception(0x28uLL);
    sub_1B4C31A18((uint64_t)exception, "Unrecognized value for engine=", a1);
    __cxa_throw(exception, (struct type_info *)&unk_1F0D53678, (void (*)(void *))sub_1B4C2FDAC);
  }
  return 0x100002717;
}

void sub_1B4C30038(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

id sub_1B4C3004C(uint64_t a1)
{
  int v1 = sub_1B4C32754(a1);
  BOOL v3 = objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E4F28C58], v2, (uint64_t)off_1E9D40430, 5, v1);

  return v3;
}

void sub_1B4C300B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1B4C300C4(uint64_t a1)
{
  int v1 = sub_1B4C32754(a1);
  BOOL v3 = objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E4F28C58], v2, (uint64_t)off_1E9D40430, 3, v1);

  return v3;
}

void sub_1B4C3012C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1B4C3013C(uint64_t a1)
{
  int v1 = sub_1B4C32754(a1);
  BOOL v3 = objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E4F28C58], v2, (uint64_t)off_1E9D40430, 4, v1);

  return v3;
}

void sub_1B4C301A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C306C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, __int16 buf, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  _Block_object_dispose(&buf, 8);

  if (a2 == 4)
  {
    int64_t v26 = __cxa_begin_catch(exception_object);
    if (v22)
    {
      sub_1B4C3013C((uint64_t)v26);
      *uint64_t v22 = (id)objc_claimAutoreleasedReturnValue();
    }
  }
  else if (a2 == 3)
  {
    CFStringRef v27 = __cxa_begin_catch(exception_object);
    if (v22)
    {
      sub_1B4C300C4((uint64_t)v27);
      *uint64_t v22 = (id)objc_claimAutoreleasedReturnValue();
    }
  }
  else
  {
    CFArrayRef v28 = __cxa_begin_catch(exception_object);
    if (a2 != 2)
    {
      unint64_t v29 = sub_1B4BFA19C(4);
      if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
      {
        buf = 0;
        _os_log_impl(&dword_1B4BAD000, v29, OS_LOG_TYPE_ERROR, "Unknown error encountered during encodeImage.", (uint8_t *)&buf, 2u);
      }

      __cxa_end_catch();
LABEL_17:
      if (*MEMORY[0x1E4F143B8] != a22) {
        JUMPOUT(0x1B4C303B4);
      }
      JUMPOUT(0x1B4C30634);
    }
    if (v22)
    {
      sub_1B4C3004C((uint64_t)v28);
      *uint64_t v22 = (id)objc_claimAutoreleasedReturnValue();
    }
  }
  __cxa_end_catch();
  goto LABEL_17;
}

void sub_1B4C30C08(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t buf)
{
  __cxa_free_exception(v19);
  sub_1B4C09598(&buf);
  if (a2 == 4)
  {
    uint64_t v22 = __cxa_begin_catch(a1);
    if (v18)
    {
      sub_1B4C3013C((uint64_t)v22);
      *uint64_t v18 = (id)objc_claimAutoreleasedReturnValue();
    }
  }
  else if (a2 == 3)
  {
    long long v23 = __cxa_begin_catch(a1);
    if (v18)
    {
      sub_1B4C300C4((uint64_t)v23);
      *uint64_t v18 = (id)objc_claimAutoreleasedReturnValue();
    }
  }
  else
  {
    CFNumberRef v24 = __cxa_begin_catch(a1);
    if (a2 != 2)
    {
      size_t v25 = sub_1B4BFA19C(4);
      if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
      {
        LOWORD(buf) = 0;
        _os_log_impl(&dword_1B4BAD000, v25, OS_LOG_TYPE_ERROR, "Unknown Error encountered during encodeText.", (uint8_t *)&buf, 2u);
      }

      __cxa_end_catch();
LABEL_16:
      JUMPOUT(0x1B4C30B8CLL);
    }
    if (v18)
    {
      sub_1B4C3004C((uint64_t)v24);
      *uint64_t v18 = (id)objc_claimAutoreleasedReturnValue();
    }
  }
  __cxa_end_catch();
  goto LABEL_16;
}

void sub_1B4C30D50(_Unwind_Exception *a1)
{
  __cxa_end_catch();

  _Unwind_Resume(a1);
}

void sub_1B4C312B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t buf, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __cxa_free_exception(v32);
  sub_1B4C09598(&a32);
  sub_1B4BF9508(&a14);
  if (a2 == 4)
  {
    float v35 = __cxa_begin_catch(exception_object);
    if (a9)
    {
      sub_1B4C3013C((uint64_t)v35);
      *a9 = (id)objc_claimAutoreleasedReturnValue();
    }
  }
  else if (a2 == 3)
  {
    unint64_t v36 = __cxa_begin_catch(exception_object);
    if (a9)
    {
      sub_1B4C300C4((uint64_t)v36);
      *a9 = (id)objc_claimAutoreleasedReturnValue();
    }
  }
  else
  {
    int v37 = __cxa_begin_catch(exception_object);
    if (a2 != 2)
    {
      int v38 = sub_1B4BFA19C(4);
      if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
      {
        LOWORD(buf) = 0;
        _os_log_impl(&dword_1B4BAD000, v38, OS_LOG_TYPE_ERROR, "Unknown Error encountered during encodeText.", (uint8_t *)&buf, 2u);
      }

      __cxa_end_catch();
LABEL_18:
      JUMPOUT(0x1B4C311FCLL);
    }
    if (a9)
    {
      sub_1B4C3004C((uint64_t)v37);
      *a9 = (id)objc_claimAutoreleasedReturnValue();
    }
  }
  __cxa_end_catch();
  goto LABEL_18;
}

unint64_t sub_1B4C315C8@<X0>(const __CFString ***a1@<X0>, void *a2@<X8>)
{
  CFStringRef v3 = **a1;
  if (!v3 || (CFTypeID TypeID = CFStringGetTypeID(), TypeID != CFGetTypeID(v3)))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1B4C31770(exception);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  return sub_1B4C31780(v3, a2);
}

void sub_1B4C31660(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

const void **sub_1B4C31674(const void **a1)
{
  CFURLRef v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

std::runtime_error *sub_1B4C316A8@<X0>(std::runtime_error *a1@<X8>)
{
  return std::runtime_error::runtime_error(a1, "Could not construct");
}

void *sub_1B4C316B8(void *a1, CFTypeRef cf)
{
  *a1 = cf;
  if (cf)
  {
    CFTypeID v3 = CFGetTypeID(cf);
    if (v3 != CFStringGetTypeID())
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
  }
  return a1;
}

void sub_1B4C31740(_Unwind_Exception *a1)
{
  __cxa_free_exception(v2);
  if (*v1) {
    CFRelease(*v1);
  }
  _Unwind_Resume(a1);
}

std::runtime_error *sub_1B4C31770@<X0>(std::runtime_error *a1@<X8>)
{
  return std::runtime_error::runtime_error(a1, "Could not convert");
}

unint64_t sub_1B4C31780@<X0>(const __CFString *a1@<X0>, void *a2@<X8>)
{
  CStringPtr = CFStringGetCStringPtr(a1, 0x8000100u);
  if (CStringPtr)
  {
    int v5 = CStringPtr;
    unint64_t result = strlen(CStringPtr);
    if (result <= 0x7FFFFFFFFFFFFFF7)
    {
      size_t v7 = result;
      if (result >= 0x17)
      {
        uint64_t v11 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((result | 7) != 0x17) {
          uint64_t v11 = result | 7;
        }
        uint64_t v12 = v11 + 1;
        char v13 = operator new(v11 + 1);
        a2[1] = v7;
        a2[2] = v12 | 0x8000000000000000;
        *a2 = v13;
        a2 = v13;
      }
      else
      {
        *((unsigned char *)a2 + 23) = result;
        if (!result) {
          goto LABEL_14;
        }
      }
      unint64_t result = (unint64_t)memmove(a2, v5, v7);
LABEL_14:
      *((unsigned char *)a2 + v7) = 0;
      return result;
    }
LABEL_23:
    sub_1B4BB33D8();
  }
  CFIndex Length = CFStringGetLength(a1);
  CFIndex maxBufLen = 0;
  v18.location = 0;
  v18.length = Length;
  CFStringGetBytes(a1, v18, 0x8000100u, 0, 0, 0, 0, &maxBufLen);
  size_t v9 = maxBufLen;
  if ((unint64_t)maxBufLen > 0x7FFFFFFFFFFFFFF7) {
    goto LABEL_23;
  }
  if ((unint64_t)maxBufLen >= 0x17)
  {
    CFIndex v14 = (maxBufLen & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((maxBufLen | 7) != 0x17) {
      CFIndex v14 = maxBufLen | 7;
    }
    CFIndex v15 = v14 + 1;
    uint64_t v10 = operator new(v14 + 1);
    a2[1] = v9;
    a2[2] = v15 | 0x8000000000000000;
    *a2 = v10;
  }
  else
  {
    *((unsigned char *)a2 + 23) = maxBufLen;
    uint64_t v10 = a2;
    if (!v9) {
      goto LABEL_19;
    }
  }
  bzero(v10, v9);
LABEL_19:
  *((unsigned char *)v10 + v9) = 0;
  if (*((char *)a2 + 23) >= 0) {
    CFStringRef v16 = (UInt8 *)a2;
  }
  else {
    CFStringRef v16 = (UInt8 *)*a2;
  }
  v19.location = 0;
  v19.length = Length;
  return CFStringGetBytes(a1, v19, 0x8000100u, 0, 0, v16, maxBufLen, &maxBufLen);
}

void sub_1B4C31944(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1B4C31960(void *a1, CFTypeRef cf)
{
  *a1 = cf;
  if (cf)
  {
    CFTypeID v3 = CFGetTypeID(cf);
    if (v3 != CFURLGetTypeID())
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
  }
  return a1;
}

void sub_1B4C319E8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v2);
  if (*v1) {
    CFRelease(*v1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1B4C31A18(uint64_t a1, const char *a2, uint64_t a3)
{
  int v4 = (const char **)(a1 + 16);
  sub_1B4C31B08("[InvalidArgument] ", a2, a3);
  *(void *)a1 = &unk_1F0D55388;
  int v5 = (const char *)v4;
  if (*(char *)(a1 + 39) < 0) {
    int v5 = *v4;
  }
  std::logic_error::logic_error((std::logic_error *)a1, v5);
  *(void *)a1 = &unk_1F0D55388;
  return a1;
}

void sub_1B4C31A94(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 39) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B4C31AB0(uint64_t a1)
{
  if (*(char *)(MEMORY[0x1BA992570]() + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  JUMPOUT(0x1BA9929C0);
}

uint64_t sub_1B4C31B08(const char *a1, const char *a2, uint64_t a3)
{
  sub_1B4BB2204((uint64_t)v12);
  size_t v6 = strlen(a1);
  sub_1B4BB34F0(v12, (uint64_t)a1, v6);
  size_t v7 = strlen(a2);
  sub_1B4BB34F0(v12, (uint64_t)a2, v7);
  int v8 = *(char *)(a3 + 23);
  if (v8 >= 0) {
    uint64_t v9 = a3;
  }
  else {
    uint64_t v9 = *(void *)a3;
  }
  if (v8 >= 0) {
    uint64_t v10 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    uint64_t v10 = *(void *)(a3 + 8);
  }
  sub_1B4BB34F0(v12, v9, v10);
  std::stringbuf::str();
  v12[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v12 + *(void *)(v12[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v12[1] = MEMORY[0x1E4FBA470] + 16;
  if (v13 < 0) {
    operator delete((void *)v12[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1BA992920](&v14);
}

void sub_1B4C31C90(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1B4BC8450((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1B4C31CA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1B4BC8450((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B4C31CB8()
{
  uint64_t result = MGGetBoolAnswer();
  byte_1EB9FE320 = result;
  return result;
}

Class sub_1B4C31CE0(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v4[0] = 0;
  if (!qword_1EB9FE338)
  {
    v4[1] = MEMORY[0x1E4F143A8];
    v4[2] = 3221225472;
    v4[3] = sub_1B4C31E34;
    v4[4] = &unk_1E60A3918;
    v4[5] = v4;
    long long v5 = xmmword_1E60A3900;
    uint64_t v6 = 0;
    qword_1EB9FE338 = _sl_dlopen();
    CFURLRef v2 = (void *)v4[0];
    if (!qword_1EB9FE338)
    {
      abort_report_np();
      goto LABEL_7;
    }
    if (v4[0]) {
      goto LABEL_8;
    }
  }
  while (1)
  {
    Class result = objc_getClass("VNCreateSceneprintRequest");
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
    if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
      break;
    }
LABEL_7:
    CFURLRef v2 = (void *)abort_report_np();
LABEL_8:
    free(v2);
  }
  qword_1EB9FE330 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_1B4C31E34()
{
  uint64_t result = _sl_dlopen();
  qword_1EB9FE338 = result;
  return result;
}

Class sub_1B4C31EA8(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v4[0] = 0;
  if (!qword_1EB9FE338)
  {
    v4[1] = MEMORY[0x1E4F143A8];
    v4[2] = 3221225472;
    v4[3] = sub_1B4C31E34;
    v4[4] = &unk_1E60A3918;
    v4[5] = v4;
    long long v5 = xmmword_1E60A3900;
    uint64_t v6 = 0;
    qword_1EB9FE338 = _sl_dlopen();
    CFURLRef v2 = (void *)v4[0];
    if (!qword_1EB9FE338)
    {
      abort_report_np();
      goto LABEL_7;
    }
    if (v4[0]) {
      goto LABEL_8;
    }
  }
  while (1)
  {
    Class result = objc_getClass("VNImageRequestHandler");
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
    if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
      break;
    }
LABEL_7:
    CFURLRef v2 = (void *)abort_report_np();
LABEL_8:
    free(v2);
  }
  qword_1EB9FE340 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_1B4C31FFC(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
  {
    sub_1B4BCA11C(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)std::__fs::filesystem::path __p = *(_OWORD *)a2;
    uint64_t v7 = *(void *)(a2 + 16);
  }
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  CFTypeID v3 = (char *)HIBYTE(v7);
  if (v7 >= 0) {
    int v4 = (char *)__p;
  }
  else {
    int v4 = (char *)__p[0];
  }
  if (v7 < 0) {
    CFTypeID v3 = (char *)__p[1];
  }
  sub_1B4BCC01C((std::string *)(a1 + 8), v4, &v3[(void)v4]);
  *(void *)a1 = &unk_1F0D55410;
  if (SHIBYTE(v7) < 0) {
    operator delete(__p[0]);
  }
  *(void *)a1 = &unk_1F0D55498;
  return a1;
}

void sub_1B4C320D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (*(char *)(v14 + 31) < 0)
  {
    operator delete(*v15);
    if ((a14 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1B4C32114(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0D55C50;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1B4C32134(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0D55C50;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1BA9929C0);
}

void sub_1B4C32188(uint64_t a1)
{
  sub_1B4C32244(a1 + 120);
  if (*(char *)(a1 + 111) < 0)
  {
    operator delete(*(void **)(a1 + 88));
    if ((*(char *)(a1 + 87) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(a1 + 63) & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_10:
      operator delete(*(void **)(a1 + 40));
      sub_1B4C3236C((uint64_t **)(a1 + 32), 0);
      CFURLRef v2 = *(uint64_t **)(a1 + 24);
      *(void *)(a1 + 24) = 0;
      if (!v2) {
        return;
      }
      goto LABEL_5;
    }
  }
  else if ((*(char *)(a1 + 87) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 64));
  if (*(char *)(a1 + 63) < 0) {
    goto LABEL_10;
  }
LABEL_4:
  sub_1B4C3236C((uint64_t **)(a1 + 32), 0);
  CFURLRef v2 = *(uint64_t **)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (!v2) {
    return;
  }
LABEL_5:
  sub_1B4C325AC(a1 + 24, v2);
}

uint64_t sub_1B4C32244(uint64_t a1)
{
  if (*(char *)(a1 + 167) < 0)
  {
    operator delete(*(void **)(a1 + 144));
    if ((*(char *)(a1 + 143) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(a1 + 119) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((*(char *)(a1 + 143) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 120));
  if ((*(char *)(a1 + 119) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(a1 + 95) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(*(void **)(a1 + 96));
  if ((*(char *)(a1 + 95) & 0x80000000) == 0)
  {
LABEL_5:
    CFURLRef v2 = *(void ***)(a1 + 48);
    if (!v2) {
      goto LABEL_6;
    }
    goto LABEL_13;
  }
LABEL_12:
  operator delete(*(void **)(a1 + 72));
  CFURLRef v2 = *(void ***)(a1 + 48);
  if (!v2)
  {
LABEL_6:
    if ((*(char *)(a1 + 47) & 0x80000000) == 0) {
      goto LABEL_7;
    }
LABEL_20:
    operator delete(*(void **)(a1 + 24));
    if ((*(char *)(a1 + 23) & 0x80000000) == 0) {
      return a1;
    }
    goto LABEL_21;
  }
LABEL_13:
  int v4 = *(void ***)(a1 + 56);
  if (v4 == v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
    if (*(char *)(a1 + 47) < 0) {
      goto LABEL_20;
    }
  }
  else
  {
    do
    {
      if (*((char *)v4 - 1) < 0) {
        operator delete(*(v4 - 3));
      }
      v4 -= 3;
    }
    while (v4 != v2);
    long long v5 = *(void **)(a1 + 48);
    *(void *)(a1 + 56) = v2;
    operator delete(v5);
    if (*(char *)(a1 + 47) < 0) {
      goto LABEL_20;
    }
  }
LABEL_7:
  if ((*(char *)(a1 + 23) & 0x80000000) == 0) {
    return a1;
  }
LABEL_21:
  operator delete(*(void **)a1);
  return a1;
}

uint64_t **sub_1B4C3236C(uint64_t **result, uint64_t *a2)
{
  CFURLRef v2 = *result;
  char *result = a2;
  if (v2)
  {
    sub_1B4C32244((uint64_t)(v2 + 3));
    CFTypeID v3 = (uint64_t *)v2[2];
    v2[2] = 0;
    if (v3)
    {
      int v4 = sub_1B4C32450(v3);
      MEMORY[0x1BA9929C0](v4, 0x10B0C4005063E60);
    }
    uint64_t v5 = v2[1];
    v2[1] = 0;
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    }
    uint64_t v6 = *v2;
    *CFURLRef v2 = 0;
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    }
    JUMPOUT(0x1BA9929C0);
  }
  return result;
}

uint64_t *sub_1B4C32450(uint64_t *a1)
{
  a1[9] = (uint64_t)&unk_1F0D54F90;
  CFURLRef v2 = (std::__shared_weak_count *)a1[15];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    CFTypeID v3 = (void *)a1[11];
    if (!v3) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  CFTypeID v3 = (void *)a1[11];
  if (v3)
  {
LABEL_4:
    a1[12] = (uint64_t)v3;
    operator delete(v3);
  }
LABEL_5:
  a1[2] = (uint64_t)&unk_1F0D54F90;
  int v4 = (std::__shared_weak_count *)a1[8];
  if (!v4 || atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v5 = (void *)a1[4];
    if (!v5) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  uint64_t v5 = (void *)a1[4];
  if (v5)
  {
LABEL_8:
    a1[5] = (uint64_t)v5;
    operator delete(v5);
  }
LABEL_9:
  uint64_t v6 = *a1;
  *a1 = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  return a1;
}

void sub_1B4C325AC(uint64_t a1, uint64_t *a2)
{
  if (a2)
  {
    if (*((char *)a2 + 63) < 0)
    {
      operator delete((void *)a2[5]);
      if ((*((char *)a2 + 39) & 0x80000000) == 0)
      {
LABEL_4:
        uint64_t v3 = a2[1];
        a2[1] = 0;
        if (!v3) {
          goto LABEL_6;
        }
        goto LABEL_5;
      }
    }
    else if ((*((char *)a2 + 39) & 0x80000000) == 0)
    {
      goto LABEL_4;
    }
    operator delete((void *)a2[2]);
    uint64_t v3 = a2[1];
    a2[1] = 0;
    if (!v3)
    {
LABEL_6:
      uint64_t v5 = *a2;
      *a2 = 0;
      if (v5) {
        (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
      }
      JUMPOUT(0x1BA9929C0);
    }
LABEL_5:
    uint64_t v4 = sub_1B4C32684(v3);
    MEMORY[0x1BA9929C0](v4, 0x10B0C409CF98BECLL);
    goto LABEL_6;
  }
}

uint64_t sub_1B4C32684(uint64_t a1)
{
  *(void *)(a1 + 8) = &unk_1F0D54F90;
  CFURLRef v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = *(void **)(a1 + 24);
  if (v3)
  {
    *(void *)(a1 + 32) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(CFTypeRef **)a1;
  *(void *)a1 = 0;
  if (v4)
  {
    if (*v4) {
      CFRelease(*v4);
    }
    MEMORY[0x1BA9929C0](v4, 0x20C4093837F09);
  }
  return a1;
}

CFDictionaryRef sub_1B4C32754(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  size_t v2 = strlen(v1);
  if (!v1)
  {
    uint64_t v11 = 0;
    uint64_t v3 = (const void *)*MEMORY[0x1E4F1D170];
    if (!*MEMORY[0x1E4F1D170]) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v1 = (const char *)CFStringCreateWithBytes(0, (const UInt8 *)v1, v2, 0x8000100u, 0);
  uint64_t v11 = v1;
  if (!v1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v3 = (const void *)*MEMORY[0x1E4F1D170];
  if (*MEMORY[0x1E4F1D170]) {
LABEL_6:
  }
    CFRetain(v3);
LABEL_7:
  sub_1B4C316B8(&cf, v3);
  CFTypeRef v4 = cf;
  if (cf) {
    CFRetain(cf);
  }
  CFTypeRef v12 = v4;
  if (v1) {
    CFRetain(v1);
  }
  CFTypeRef v13 = v1;
  v9[0] = &v12;
  v9[1] = 1;
  CFDictionaryRef v5 = sub_1B4C329B0((uint64_t)v9);
  CFDictionaryRef v6 = v5;
  if (v5) {
    CFRelease(v5);
  }
  if (v13) {
    CFRelease(v13);
  }
  if (v12) {
    CFRelease(v12);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v1) {
    CFRelease(v1);
  }
  return v6;
}

void sub_1B4C32900(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1B4C32914(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, int a13, __int16 a14, char a15, char a16, int a17, __int16 a18, char a19, char a20)
{
  if (a2) {
    sub_1B4BB21F0(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1B4C3296C(uint64_t a1)
{
  size_t v2 = *(const void **)(a1 + 8);
  if (v2) {
    CFRelease(v2);
  }
  if (*(void *)a1) {
    CFRelease(*(CFTypeRef *)a1);
  }
  return a1;
}

CFDictionaryRef sub_1B4C329B0(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 8);
  std::__fs::filesystem::path __p = 0;
  if (v1)
  {
    if (v1 >> 61) {
      sub_1B4BB3244();
    }
    std::__fs::filesystem::path __p = (char *)operator new(8 * v1);
    uint64_t v53 = __p;
    __int16 v54 = &__p[8 * v1];
    uint64_t v49 = (char *)operator new(8 * v1);
    uint64_t v50 = v49;
    long long v51 = &v49[8 * v1];
    uint64_t v3 = *(uint64_t **)a1;
    unint64_t v48 = v1;
    uint64_t v4 = *(void *)a1 + 16 * v1;
    while (1)
    {
      uint64_t v6 = *v3;
      uint64_t v7 = v53;
      if (v53 < v54)
      {
        *(void *)uint64_t v53 = v6;
        uint64_t v8 = (uint64_t)(v53 + 8);
        goto LABEL_19;
      }
      uint64_t v9 = (v53 - __p) >> 3;
      unint64_t v10 = v9 + 1;
      if ((unint64_t)(v9 + 1) >> 61) {
        sub_1B4BB3244();
      }
      uint64_t v11 = v54 - __p;
      if ((v54 - __p) >> 2 > v10) {
        unint64_t v10 = v11 >> 2;
      }
      if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v12 = v10;
      }
      if (v12)
      {
        if (v12 >> 61) {
          sub_1B4BB2D38();
        }
        CFTypeRef v13 = operator new(8 * v12);
        uint64_t v14 = &v13[8 * v9];
        *(void *)uint64_t v14 = v6;
        uint64_t v8 = (uint64_t)(v14 + 8);
        int64_t v15 = v53 - __p;
        if (v53 == __p)
        {
LABEL_17:
          std::__fs::filesystem::path __p = v14;
          __int16 v54 = &v13[8 * v12];
          if (!v53) {
            goto LABEL_19;
          }
LABEL_18:
          operator delete(v7);
          goto LABEL_19;
        }
      }
      else
      {
        CFTypeRef v13 = 0;
        uint64_t v14 = (char *)(8 * v9);
        *(void *)(8 * v9) = v6;
        uint64_t v8 = 8 * v9 + 8;
        int64_t v15 = v53 - __p;
        if (v53 == __p) {
          goto LABEL_17;
        }
      }
      unint64_t v25 = v15 - 8;
      if (v25 < 0x58) {
        goto LABEL_65;
      }
      if ((unint64_t)(__p - v13) < 0x20) {
        goto LABEL_65;
      }
      uint64_t v26 = (v25 >> 3) + 1;
      uint64_t v27 = 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL);
      CFArrayRef v28 = &v53[-v27];
      v14 -= v27;
      unint64_t v29 = &v13[8 * v9 - 16];
      unsigned __int8 v30 = v53 - 16;
      uint64_t v31 = v26 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v32 = *(_OWORD *)v30;
        *(v29 - 1) = *((_OWORD *)v30 - 1);
        *unint64_t v29 = v32;
        v29 -= 2;
        v30 -= 32;
        v31 -= 4;
      }
      while (v31);
      uint64_t v7 = v28;
      if (v26 != (v26 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_65:
        do
        {
          uint64_t v33 = *((void *)v7 - 1);
          v7 -= 8;
          *((void *)v14 - 1) = v33;
          v14 -= 8;
        }
        while (v7 != __p);
      }
      uint64_t v7 = __p;
      std::__fs::filesystem::path __p = v14;
      __int16 v54 = &v13[8 * v12];
      if (v7) {
        goto LABEL_18;
      }
LABEL_19:
      uint64_t v53 = (char *)v8;
      uint64_t v16 = v3[1];
      unint64_t v17 = v50;
      if (v50 >= v51)
      {
        uint64_t v18 = (v50 - v49) >> 3;
        unint64_t v19 = v18 + 1;
        if ((unint64_t)(v18 + 1) >> 61) {
          sub_1B4BB3244();
        }
        uint64_t v20 = v51 - v49;
        if ((v51 - v49) >> 2 > v19) {
          unint64_t v19 = v20 >> 2;
        }
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v21 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v21 = v19;
        }
        if (v21)
        {
          if (v21 >> 61) {
            sub_1B4BB2D38();
          }
          uint64_t v22 = operator new(8 * v21);
          long long v23 = &v22[8 * v18];
          *(void *)long long v23 = v16;
          uint64_t v5 = (uint64_t)(v23 + 8);
          int64_t v24 = v50 - v49;
          if (v50 == v49) {
            goto LABEL_29;
          }
LABEL_41:
          unint64_t v34 = v24 - 8;
          if (v34 < 0x58) {
            goto LABEL_66;
          }
          if ((unint64_t)(v49 - v22) < 0x20) {
            goto LABEL_66;
          }
          uint64_t v35 = (v34 >> 3) + 1;
          uint64_t v36 = 8 * (v35 & 0x3FFFFFFFFFFFFFFCLL);
          int v37 = &v50[-v36];
          v23 -= v36;
          int v38 = &v22[8 * v18 - 16];
          uint64_t v39 = (long long *)(v50 - 16);
          uint64_t v40 = v35 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v41 = *v39;
            *(v38 - 1) = *(v39 - 1);
            *int v38 = v41;
            v38 -= 2;
            v39 -= 2;
            v40 -= 4;
          }
          while (v40);
          unint64_t v17 = v37;
          if (v35 != (v35 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_66:
            do
            {
              uint64_t v42 = *((void *)v17 - 1);
              v17 -= 8;
              *((void *)v23 - 1) = v42;
              v23 -= 8;
            }
            while (v17 != v49);
          }
          unint64_t v17 = v49;
          uint64_t v49 = v23;
          long long v51 = &v22[8 * v21];
          if (!v17) {
            goto LABEL_5;
          }
        }
        else
        {
          uint64_t v22 = 0;
          long long v23 = (char *)(8 * v18);
          *(void *)(8 * v18) = v16;
          uint64_t v5 = 8 * v18 + 8;
          int64_t v24 = v50 - v49;
          if (v50 != v49) {
            goto LABEL_41;
          }
LABEL_29:
          uint64_t v49 = v23;
          long long v51 = &v22[8 * v21];
          if (!v50) {
            goto LABEL_5;
          }
        }
        operator delete(v17);
        goto LABEL_5;
      }
      *(void *)uint64_t v50 = v16;
      uint64_t v5 = (uint64_t)(v50 + 8);
LABEL_5:
      uint64_t v50 = (char *)v5;
      v3 += 2;
      if (v3 == (uint64_t *)v4)
      {
        uint64_t v43 = (const void **)__p;
        unint64_t v1 = v48;
        uint64_t v44 = (const void **)v49;
        goto LABEL_51;
      }
    }
  }
  uint64_t v44 = 0;
  uint64_t v43 = 0;
LABEL_51:
  CFDictionaryRef v45 = CFDictionaryCreate(0, v43, v44, v1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!v45)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (v44) {
    operator delete(v44);
  }
  if (__p) {
    operator delete(__p);
  }
  return v45;
}

void sub_1B4C32DA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15)
{
  __cxa_free_exception(v15);
  if (__p)
  {
    operator delete(__p);
    unint64_t v17 = a14;
    if (!a14) {
LABEL_3:
    }
      _Unwind_Resume(a1);
  }
  else
  {
    unint64_t v17 = a14;
    if (!a14) {
      goto LABEL_3;
    }
  }
  operator delete(v17);
  _Unwind_Resume(a1);
}

void sub_1B4C32EAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C32EC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C32F5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C32F70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C3300C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C33020(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C3311C(void *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  (*(void (**)(void **__return_ptr))(**(void **)(a1[1] + 104) + 24))(v47);
  (*(void (**)(void **__return_ptr, void *, void **, uint64_t))(*a1 + 16))(&v45, a1, v47, a2);
  uint64_t v44 = 0;
  uint64_t v6 = (char *)v45;
  uint64_t v7 = v46;
  int64_t v8 = v46 - (unsigned char *)v45;
  if (v46 == v45)
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    goto LABEL_29;
  }
  unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
  if (v9 >= 0xAAAAAAAAAAAAAABLL) {
    sub_1B4C0E0BC();
  }
  long long v41 = a1;
  unint64_t v10 = (const void **)operator new(v8);
  uint64_t v11 = 0;
  uint64_t v42 = v10;
  uint64_t v44 = &v10[3 * v9];
  std::__fs::filesystem::path __p = v10;
  __int16 v54 = v10;
  v51[0] = &v44;
  v51[1] = &v54;
  p_p = &__p;
  char v53 = 0;
  do
  {
    unint64_t v12 = &v10[v11];
    CFTypeRef v13 = &v6[v11 * 8];
    *unint64_t v12 = 0;
    v12[1] = 0;
    v12[2] = 0;
    int64_t v15 = *(unsigned char **)&v6[v11 * 8];
    uint64_t v14 = *(unsigned char **)&v6[v11 * 8 + 8];
    int64_t v16 = v14 - v15;
    if (v14 != v15)
    {
      if (v16 < 0) {
        sub_1B4BB3244();
      }
      unint64_t v17 = (char *)operator new(v14 - v15);
      *unint64_t v12 = v17;
      v12[1] = v17;
      uint64_t v18 = &v17[4 * (v16 >> 2)];
      v12[2] = v18;
      memcpy(v17, v15, v16);
      v12[1] = v18;
    }
    std::__fs::filesystem::path __p = v12 + 3;
    v11 += 3;
  }
  while (v13 + 24 != v7);
  unint64_t v19 = &v10[v11];
  uint64_t v43 = &v10[v11];
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  if (!(v11 * 8))
  {
LABEL_23:
    unint64_t v29 = v43;
    unsigned __int8 v30 = v19;
    if (v43 != v19)
    {
      uint64_t v31 = v43;
      do
      {
        uint64_t v33 = (void *)*(v31 - 3);
        v31 -= 3;
        long long v32 = v33;
        if (v33)
        {
          *(v29 - 2) = v32;
          operator delete(v32);
        }
        unint64_t v29 = v31;
      }
      while (v31 != v19);
      unsigned __int8 v30 = v42;
    }
    operator delete(v30);
    unint64_t v34 = (char *)v45;
    if (!v45) {
      goto LABEL_30;
    }
    goto LABEL_35;
  }
  do
  {
    uint64_t v49 = 0;
    uint64_t v50 = 0;
    std::__fs::filesystem::path __p = 0;
    unint64_t v21 = *v10;
    uint64_t v20 = v10[1];
    int64_t v22 = v20 - (unsigned char *)*v10;
    if (v20 != *v10)
    {
      if (v22 < 0) {
        sub_1B4BB3244();
      }
      std::__fs::filesystem::path __p = operator new(v20 - (unsigned char *)*v10);
      uint64_t v49 = __p;
      long long v23 = (char *)__p + 4 * (v22 >> 2);
      uint64_t v50 = v23;
      memcpy(__p, v21, v22);
      uint64_t v49 = v23;
    }
    (*(void (**)(void **__return_ptr))(**(void **)(v41[1] + 104) + 32))(v51);
    unint64_t v24 = *(void *)(a3 + 8);
    if (v24 >= *(void *)(a3 + 16))
    {
      uint64_t v27 = sub_1B4BFB6B0((void **)a3, (uint64_t)v51);
      int v28 = SHIBYTE(p_p);
      *(void *)(a3 + 8) = v27;
      if ((v28 & 0x80000000) == 0)
      {
        uint64_t v26 = __p;
        if (!__p) {
          goto LABEL_10;
        }
LABEL_19:
        uint64_t v49 = v26;
        operator delete(v26);
        goto LABEL_10;
      }
      operator delete(v51[0]);
      uint64_t v26 = __p;
      if (__p) {
        goto LABEL_19;
      }
    }
    else
    {
      long long v25 = *(_OWORD *)v51;
      *(void *)(v24 + 16) = p_p;
      *(_OWORD *)unint64_t v24 = v25;
      v51[1] = 0;
      p_p = 0;
      v51[0] = 0;
      *(void *)(a3 + 8) = v24 + 24;
      uint64_t v26 = __p;
      if (__p) {
        goto LABEL_19;
      }
    }
LABEL_10:
    v10 += 3;
  }
  while (v10 != v19);
  unint64_t v19 = v42;
  if (v42) {
    goto LABEL_23;
  }
LABEL_29:
  unint64_t v34 = (char *)v45;
  if (!v45)
  {
LABEL_30:
    uint64_t v35 = v47[0];
    if (v47[0]) {
      goto LABEL_31;
    }
    return;
  }
LABEL_35:
  uint64_t v36 = v46;
  int v37 = v34;
  if (v46 != v34)
  {
    int v38 = v46;
    do
    {
      uint64_t v40 = (void *)*((void *)v38 - 3);
      v38 -= 24;
      uint64_t v39 = v40;
      if (v40)
      {
        *((void *)v36 - 2) = v39;
        operator delete(v39);
      }
      uint64_t v36 = v38;
    }
    while (v38 != v34);
    int v37 = v45;
  }
  CFTypeRef v46 = v34;
  operator delete(v37);
  uint64_t v35 = v47[0];
  if (v47[0])
  {
LABEL_31:
    v47[1] = v35;
    operator delete(v35);
  }
}

void sub_1B4C334CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B4C335BC(uint64_t a1@<X0>, const void **a2@<X1>, unint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v85 = *MEMORY[0x1E4F143B8];
  std::__fs::filesystem::path __p = 0;
  uint64_t v80 = 0;
  v81 = 0;
  int64_t v8 = *a2;
  uint64_t v7 = a2[1];
  int64_t v9 = v7 - (unsigned char *)*a2;
  if (v7 != *a2)
  {
    if (v9 < 0) {
      sub_1B4BB3244();
    }
    unint64_t v10 = (char *)operator new(v7 - (unsigned char *)*a2);
    uint64_t v11 = &v10[4 * (v9 >> 2)];
    std::__fs::filesystem::path __p = v10;
    v81 = v11;
    memcpy(v10, v8, v9);
    uint64_t v80 = v11;
  }
  uint64_t v12 = *(void *)(a1 + 8);
  LOBYTE(cf) = 0;
  char v75 = 0;
  int v13 = sub_1B4C33CE4(v12, a2, (uint64_t)&cf);
  uint64_t v14 = (char *)operator new(4uLL);
  *(_DWORD *)uint64_t v14 = v13;
  int64_t v15 = v14 + 4;
  v77 = v14 + 4;
  uint64_t v78 = v14 + 4;
  v76 = v14;
  if (v75 && cf) {
    CFRelease(cf);
  }
  if (a3 <= 1)
  {
    uint64_t v82 = 0;
    uint64_t v83 = 0;
    uint64_t v66 = 1;
    size_t v67 = 4;
    v84 = 0;
    goto LABEL_73;
  }
  CFArrayRef v70 = a4;
  uint64_t v16 = 2;
  unint64_t v17 = v14 + 4;
  do
  {
    unint64_t v19 = v15;
    uint64_t v20 = a1;
    if (sub_1B4C37030((uint64_t *)(*(void *)(a1 + 8) + 8), "position"))
    {
      unint64_t v21 = v80;
      if (v80 < v81)
      {
        *(_DWORD *)uint64_t v80 = *((_DWORD *)v17 - 1);
        uint64_t v22 = (uint64_t)(v21 + 4);
        int64_t v15 = v19;
LABEL_36:
        uint64_t v80 = (char *)v22;
        goto LABEL_37;
      }
      long long v25 = (char *)__p;
      int64_t v26 = v80 - (unsigned char *)__p;
      uint64_t v27 = (v80 - (unsigned char *)__p) >> 2;
      unint64_t v28 = v27 + 1;
      if ((unint64_t)(v27 + 1) >> 62) {
        sub_1B4BB3244();
      }
      uint64_t v29 = v81 - (unsigned char *)__p;
      if ((v81 - (unsigned char *)__p) >> 1 > v28) {
        unint64_t v28 = v29 >> 1;
      }
      if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v30 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v30 = v28;
      }
      if (v30)
      {
        if (v30 >> 62) {
          sub_1B4BB2D38();
        }
        unint64_t v31 = v30;
        long long v32 = (char *)operator new(4 * v30);
        unint64_t v30 = v31;
        uint64_t v33 = &v32[4 * v27];
        *(_DWORD *)uint64_t v33 = *((_DWORD *)v17 - 1);
        uint64_t v22 = (uint64_t)(v33 + 4);
        int64_t v34 = v21 - v25;
        if (v21 != v25)
        {
LABEL_25:
          unint64_t v35 = v34 - 4;
          if (v35 >= 0x2C)
          {
            unint64_t v36 = v21 - &v32[v26];
            a1 = v20;
            int64_t v15 = v19;
            if (v36 >= 0x20)
            {
              uint64_t v37 = (v35 >> 2) + 1;
              uint64_t v38 = 4 * (v37 & 0x7FFFFFFFFFFFFFF8);
              uint64_t v39 = &v21[-v38];
              v33 -= v38;
              uint64_t v40 = &v32[4 * v27 - 16];
              long long v41 = v21 - 16;
              uint64_t v42 = v37 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                long long v43 = *(_OWORD *)v41;
                *((_OWORD *)v40 - 1) = *((_OWORD *)v41 - 1);
                *(_OWORD *)uint64_t v40 = v43;
                v40 -= 32;
                v41 -= 32;
                v42 -= 8;
              }
              while (v42);
              unint64_t v21 = v39;
              if (v37 == (v37 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_34:
                std::__fs::filesystem::path __p = v33;
                uint64_t v80 = (char *)v22;
                v81 = &v32[4 * v30];
                if (v25) {
                  operator delete(v25);
                }
                goto LABEL_36;
              }
            }
          }
          else
          {
            a1 = v20;
            int64_t v15 = v19;
          }
          do
          {
            int v44 = *((_DWORD *)v21 - 1);
            v21 -= 4;
            *((_DWORD *)v33 - 1) = v44;
            v33 -= 4;
          }
          while (v21 != v25);
          goto LABEL_34;
        }
      }
      else
      {
        long long v32 = 0;
        uint64_t v33 = (char *)(4 * v27);
        *(_DWORD *)(4 * v27) = *((_DWORD *)v17 - 1);
        uint64_t v22 = 4 * v27 + 4;
        int64_t v34 = v21 - v25;
        if (v21 != v25) {
          goto LABEL_25;
        }
      }
      a1 = v20;
      int64_t v15 = v19;
      goto LABEL_34;
    }
    int v23 = *((_DWORD *)v17 - 1);
    unint64_t v24 = (char *)operator new(4uLL);
    *(_DWORD *)unint64_t v24 = v23;
    if (__p)
    {
      uint64_t v80 = (char *)__p;
      operator delete(__p);
    }
    std::__fs::filesystem::path __p = v24;
    uint64_t v80 = v24 + 4;
    v81 = v24 + 4;
    a1 = v20;
    int64_t v15 = v19;
LABEL_37:
    uint64_t v45 = *(void *)(a1 + 8);
    CFTypeRef v46 = (const void *)MRLNeuralNetworkCopyStates();
    sub_1B4C4304C(&v82, v46);
    CFTypeRef v72 = v82;
    char v73 = 1;
    int v47 = sub_1B4C33CE4(v45, &__p, (uint64_t)&v72);
    int v48 = v47;
    if (v17 < v15)
    {
      *(_DWORD *)unint64_t v17 = v47;
      v17 += 4;
      v77 = v17;
      if (!v73) {
        continue;
      }
LABEL_57:
      if (v72) {
        CFRelease(v72);
      }
      continue;
    }
    uint64_t v49 = (v17 - v14) >> 2;
    unint64_t v50 = v49 + 1;
    if ((unint64_t)(v49 + 1) >> 62) {
      sub_1B4BB3244();
    }
    if ((v15 - v14) >> 1 > v50) {
      unint64_t v50 = (v15 - v14) >> 1;
    }
    if ((unint64_t)(v15 - v14) >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v51 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v51 = v50;
    }
    if (v51)
    {
      if (v51 >> 62) {
        sub_1B4BB2D38();
      }
      uint64_t v52 = operator new(4 * v51);
      char v53 = &v52[4 * v49];
      *(_DWORD *)char v53 = v48;
      uint64_t v54 = (uint64_t)(v53 + 4);
      int64_t v55 = v17 - v14;
      if (v17 == v14) {
        goto LABEL_54;
      }
    }
    else
    {
      uint64_t v52 = 0;
      char v53 = (char *)(4 * v49);
      *(_DWORD *)(4 * v49) = v48;
      uint64_t v54 = 4 * v49 + 4;
      int64_t v55 = v17 - v14;
      if (v17 == v14) {
        goto LABEL_54;
      }
    }
    unint64_t v56 = v55 - 4;
    if (v56 < 0xBC)
    {
      uint64_t v57 = v17;
      goto LABEL_53;
    }
    unint64_t v59 = (v17 - 4 - v14) & 0xFFFFFFFFFFFFFFFCLL;
    if (&v52[v17 - v14 - 4 - v59] > &v52[v17 - v14 - 4])
    {
      uint64_t v57 = v17;
      do
      {
LABEL_53:
        int v58 = *((_DWORD *)v57 - 1);
        v57 -= 4;
        *((_DWORD *)v53 - 1) = v58;
        v53 -= 4;
      }
      while (v57 != v14);
      goto LABEL_54;
    }
    if (&v17[-v59 - 4] > v17 - 4)
    {
      uint64_t v57 = v17;
      goto LABEL_53;
    }
    if ((unint64_t)(v14 - v52) < 0x20)
    {
      uint64_t v57 = v17;
      goto LABEL_53;
    }
    uint64_t v60 = (v56 >> 2) + 1;
    uint64_t v61 = 4 * (v60 & 0x7FFFFFFFFFFFFFF8);
    uint64_t v57 = &v17[-v61];
    v53 -= v61;
    unint64_t v62 = &v52[4 * v49 - 16];
    uint64_t v63 = v17 - 16;
    uint64_t v64 = v60 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v65 = *(_OWORD *)v63;
      *(v62 - 1) = *((_OWORD *)v63 - 1);
      _OWORD *v62 = v65;
      v62 -= 2;
      v63 -= 32;
      v64 -= 8;
    }
    while (v64);
    if (v60 != (v60 & 0x7FFFFFFFFFFFFFF8)) {
      goto LABEL_53;
    }
LABEL_54:
    int64_t v15 = &v52[4 * v51];
    v76 = v53;
    uint64_t v78 = v15;
    if (v14) {
      operator delete(v14);
    }
    uint64_t v14 = v53;
    unint64_t v17 = (char *)v54;
    v77 = (char *)v54;
    if (v73) {
      goto LABEL_57;
    }
  }
  while (v16++ != a3);
  uint64_t v14 = v76;
  uint64_t v82 = 0;
  uint64_t v83 = 0;
  v84 = 0;
  size_t v67 = v17 - v76;
  a4 = v70;
  if (v17 != v76)
  {
    if (v17 - v76 < 0) {
      sub_1B4BB3244();
    }
    uint64_t v66 = v67 >> 2;
LABEL_73:
    uint64_t v82 = operator new(v67);
    uint64_t v83 = v82;
    int64_t v68 = (char *)v82 + 4 * v66;
    v84 = v68;
    memcpy(v82, v14, v67);
    uint64_t v83 = v68;
    unint64_t v17 = v14;
  }
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v69 = operator new(0x18uLL);
  *a4 = v69;
  a4[1] = v69;
  a4[2] = v69 + 3;
  a4[1] = sub_1B4C2A1CC((uint64_t)(a4 + 2), (uint64_t)&v82, (uint64_t)&v85, v69);
  if (v82)
  {
    uint64_t v83 = v82;
    operator delete(v82);
  }
  if (v17)
  {
    v77 = v17;
    operator delete(v17);
  }
  if (__p)
  {
    uint64_t v80 = (char *)__p;
    operator delete(__p);
  }
}

void sub_1B4C33B8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  if (a2) {
    sub_1B4BB21F0(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1B4C33CE4(uint64_t a1, void *a2, uint64_t a3)
{
  LOBYTE(cf) = 0;
  char v20 = 0;
  if (*(unsigned char *)(a3 + 8))
  {
    CFTypeRef v5 = *(CFTypeRef *)a3;
    if (*(void *)a3) {
      CFRetain(*(CFTypeRef *)a3);
    }
    CFTypeRef cf = v5;
    char v20 = 1;
  }
  sub_1B4C37B88(a1, (uint64_t)a2, (uint64_t)&cf, 1, (uint64_t)&v21);
  if (v20 && cf) {
    CFRelease(cf);
  }
  uint64_t OutputDimension = MRLNeuralNetworkGetOutputDimension();
  if (!OutputDimension) {
    return 0;
  }
  uint64_t v7 = (uint64_t)(a2[1] - *a2) >> 2;
  LODWORD(v8) = v21;
  if (v21) {
    uint64_t v9 = v22;
  }
  else {
    uint64_t v9 = v23;
  }
  if (v21)
  {
    LODWORD(v8) = 0;
    uint64_t v10 = 0;
    uint64_t v11 = v24 + 4 * v22 * (v7 - 1);
    float v12 = 0.0;
    do
    {
      float v13 = *(float *)(v11 + 4 * v10);
      BOOL v14 = v12 < v13;
      float v12 = fmaxf(v12, v13);
      if (v14) {
        uint64_t v8 = v10;
      }
      else {
        uint64_t v8 = v8;
      }
      ++v10;
    }
    while (OutputDimension != v10);
  }
  else
  {
    uint64_t v16 = 0;
    unint64_t v17 = (float *)(v24 + 4 * v7 - 4);
    float v18 = 0.0;
    do
    {
      BOOL v14 = v18 < *v17;
      float v18 = fmaxf(v18, *v17);
      if (v14) {
        uint64_t v8 = v16;
      }
      else {
        uint64_t v8 = v8;
      }
      ++v16;
      v17 += v9;
    }
    while (OutputDimension != v16);
  }
  return v8;
}

void sub_1B4C33E38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1B4C33E4C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8))
  {
    size_t v2 = *(const void **)a1;
    if (*(void *)a1) {
      CFRelease(v2);
    }
  }
  return a1;
}

void sub_1B4C33E88(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  LODWORD(v165) = *(_DWORD *)(a1 + 20);
  v167 = 0;
  uint64_t v168 = 0;
  std::__fs::filesystem::path __p = 0;
  float v5 = sub_1B4C35004(*(void *)(a1 + 8), a2);
  v162 = 0;
  v163 = 0;
  unint64_t v164 = 0;
  uint64_t v7 = (const void *)*a2;
  uint64_t v6 = a2[1];
  int64_t v8 = v6 - *a2;
  if (v6 == *a2)
  {
    uint64_t v9 = 0;
  }
  else
  {
    if (v8 < 0) {
      sub_1B4BB3244();
    }
    uint64_t v9 = (char *)operator new(v6 - *a2);
    v162 = v9;
    unint64_t v164 = &v9[4 * (v8 >> 2)];
    memcpy(v9, v7, v8);
    v163 = v164;
  }
  sub_1B4C3522C(&v165, (uint64_t)&v162, v5);
  if (v9)
  {
    v163 = v9;
    operator delete(v9);
  }
  uint64_t v161 = a2;
  sub_1B4C3543C((char **)v159, (uint64_t)&v165);
  uint64_t v10 = (char *)__p;
  if (__p)
  {
    uint64_t v11 = v167;
    float v12 = __p;
    if (v167 != __p)
    {
      do
      {
        float v13 = (void *)*((void *)v11 - 3);
        if (v13)
        {
          *((void *)v11 - 2) = v13;
          operator delete(v13);
        }
        v11 -= 32;
      }
      while (v11 != v10);
      float v12 = __p;
    }
    v167 = v10;
    operator delete(v12);
  }
  std::__fs::filesystem::path __p = 0;
  v167 = 0;
  uint64_t v168 = 0;
  if (a3)
  {
    uint64_t v148 = 0;
    uint64_t v144 = *MEMORY[0x1E4FBA418];
    uint64_t v145 = *(void *)(MEMORY[0x1E4FBA418] + 16);
    uint64_t v146 = *(void *)(MEMORY[0x1E4FBA418] + 8);
    uint64_t v143 = *(void *)(MEMORY[0x1E4FBA418] + 24);
    while (1)
    {
      int64_t v15 = (float *)v159[0];
      unint64_t v147 = (float *)v159[1];
      uint64_t v16 = a1;
      if (v159[0] != v159[1]) {
        break;
      }
LABEL_21:
      sub_1B4C3543C((char **)&v176, (uint64_t)&v165);
      sub_1B4C35A28((uint64_t)&v178, &v161, (uint64_t *)&v176);
      unint64_t v17 = (char *)v176;
      if (v176)
      {
        float v18 = v177;
        unint64_t v19 = v176;
        if (v177 != v176)
        {
          do
          {
            v103 = (void *)*((void *)v18 - 3);
            if (v103)
            {
              *((void *)v18 - 2) = v103;
              operator delete(v103);
            }
            v18 -= 32;
          }
          while (v18 != v17);
          unint64_t v19 = v176;
        }
        long long v177 = v17;
        operator delete(v19);
      }
      v104 = (const void **)v178;
      v105 = v179;
      if (v178 == v179)
      {
        if (v178) {
          goto LABEL_164;
        }
        goto LABEL_171;
      }
      do
      {
        unint64_t v173 = 0;
        v174 = 0;
        v175 = 0;
        v107 = *v104;
        uint64_t v106 = v104[1];
        int64_t v108 = v106 - (unsigned char *)*v104;
        if (v106 != *v104)
        {
          if (v108 < 0) {
            sub_1B4BB3244();
          }
          unint64_t v173 = operator new(v106 - (unsigned char *)*v104);
          v174 = v173;
          v109 = (char *)v173 + 4 * (v108 >> 2);
          v175 = v109;
          memcpy(v173, v107, v108);
          v174 = v109;
        }
        (*(void (**)(void **__return_ptr))(**(void **)(*(void *)(a1 + 8) + 104) + 32))(v169);
        uint64_t v110 = MEMORY[0x1E4FBA498] + 64;
        v186[0] = MEMORY[0x1E4FBA498] + 64;
        *(void *)&long long v181 = v146;
        *(void *)((char *)&v181 + *(void *)(v146 - 24)) = v145;
        v111 = (std::ios_base *)((char *)&v181 + *(void *)(v181 - 24));
        std::ios_base::init(v111, (char *)&v181 + 8);
        uint64_t v112 = MEMORY[0x1E4FBA498] + 24;
        v111[1].__vftable = 0;
        v111[1].__fmtflags_ = -1;
        *(void *)&long long v181 = v112;
        v186[0] = v110;
        std::streambuf::basic_streambuf();
        uint64_t v113 = MEMORY[0x1E4FBA470] + 16;
        *((void *)&v181 + 1) = MEMORY[0x1E4FBA470] + 16;
        long long v183 = 0u;
        long long v184 = 0u;
        int v185 = 16;
        sub_1B4BB34F0(&v181, (uint64_t)"[t=", 3);
        std::ostream::operator<<();
        sub_1B4BB34F0(&v181, (uint64_t)"] sampleText: ", 14);
        if ((v170 & 0x80u) == 0) {
          v114 = v169;
        }
        else {
          v114 = (void **)v169[0];
        }
        if ((v170 & 0x80u) == 0) {
          uint64_t v115 = v170;
        }
        else {
          uint64_t v115 = (uint64_t)v169[1];
        }
        sub_1B4BB34F0(&v181, (uint64_t)v114, v115);
        std::stringbuf::str();
        *(void *)&long long v181 = v144;
        *(void *)((char *)&v181 + *(void *)(v144 - 24)) = v143;
        *((void *)&v181 + 1) = v113;
        if (SBYTE7(v184) < 0) {
          operator delete((void *)v183);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x1BA992920](v186);
        if ((char)v170 < 0)
        {
          operator delete(v169[0]);
          if (v172 < 0)
          {
LABEL_161:
            operator delete(v171);
            v116 = v173;
            if (!v173) {
              goto LABEL_144;
            }
LABEL_162:
            v174 = v116;
            operator delete(v116);
            goto LABEL_144;
          }
        }
        else if (v172 < 0)
        {
          goto LABEL_161;
        }
        v116 = v173;
        if (v173) {
          goto LABEL_162;
        }
LABEL_144:
        v104 += 3;
      }
      while (v104 != v105);
      v104 = (const void **)v178;
      if (v178)
      {
LABEL_164:
        uint64_t v117 = v179;
        v118 = v104;
        if (v179 != v104)
        {
          v119 = v179;
          do
          {
            v121 = (void *)*(v119 - 3);
            v119 -= 3;
            uint64_t v120 = v121;
            if (v121)
            {
              *(v117 - 2) = v120;
              operator delete(v120);
            }
            uint64_t v117 = v119;
          }
          while (v119 != v104);
          v118 = v178;
        }
        v179 = v104;
        operator delete(v118);
      }
LABEL_171:
      sub_1B4C3543C((char **)&v181, (uint64_t)&v165);
      v122 = (char *)v159[0];
      if (v159[0])
      {
        v123 = (char *)v159[1];
        unsigned int v124 = v159[0];
        if (v159[1] != v159[0])
        {
          do
          {
            uint64_t v125 = (void *)*((void *)v123 - 3);
            if (v125)
            {
              *((void *)v123 - 2) = v125;
              operator delete(v125);
            }
            v123 -= 32;
          }
          while (v123 != v122);
          unsigned int v124 = v159[0];
        }
        v159[1] = v122;
        operator delete(v124);
      }
      *(_OWORD *)uint64_t v159 = v181;
      uint64_t v160 = v182;
      char v126 = (char *)__p;
      if (__p)
      {
        unsigned int v127 = v167;
        BOOL v14 = __p;
        if (v167 != __p)
        {
          do
          {
            unint64_t v128 = (void *)*((void *)v127 - 3);
            if (v128)
            {
              *((void *)v127 - 2) = v128;
              operator delete(v128);
            }
            v127 -= 32;
          }
          while (v127 != v126);
          BOOL v14 = __p;
        }
        v167 = v126;
        operator delete(v14);
      }
      std::__fs::filesystem::path __p = 0;
      v167 = 0;
      uint64_t v168 = 0;
      if (++v148 == a3) {
        goto LABEL_185;
      }
    }
    while (1)
    {
      sub_1B4C35790((__n128 **)&v176, *(void *)(v16 + 8), (uint64_t)(v15 + 2));
      uint64_t v20 = *(int *)(v16 + 16);
      long long v181 = 0uLL;
      uint64_t v182 = 0;
      if (v20)
      {
        if ((v20 & 0x80000000) != 0) {
          sub_1B4C0E0BC();
        }
        size_t v21 = 2 * v20;
        uint64_t v22 = (float *)operator new(8 * v20);
        bzero(v22, v21 * 4);
        v152 = (char *)&v22[v21];
        unint64_t v178 = 0;
        v179 = 0;
        v180 = 0;
        uint64_t v23 = v177 - (unsigned char *)v176;
        unint64_t v150 = v22;
        v151 = v15;
        if (v177 != v176)
        {
LABEL_28:
          uint64_t v24 = 0;
          long long v25 = 0;
          int64_t v26 = 0;
          uint64_t v27 = 0;
          unint64_t v28 = 0;
          uint64_t v29 = 0;
          uint64_t v30 = v23 >> 2;
          while (1)
          {
            while (1)
            {
              unint64_t v31 = v176;
              if (v25 >= v28) {
                break;
              }
              *(_DWORD *)long long v25 = *((_DWORD *)v176 + v29);
              *((_DWORD *)v25 + 1) = v29;
              v25 += 8;
              if (++v29 == v30) {
                goto LABEL_55;
              }
            }
            uint64_t v32 = (v25 - v27) >> 3;
            unint64_t v33 = v32 + 1;
            if ((unint64_t)(v32 + 1) >> 61)
            {
              unint64_t v178 = v26;
              v179 = (const void **)v25;
              v180 = v24;
              sub_1B4C0E0BC();
            }
            uint64_t v34 = v28 - v27;
            if (v34 >> 2 > v33) {
              unint64_t v33 = v34 >> 2;
            }
            if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v35 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v35 = v33;
            }
            if (v35 >> 61)
            {
              unint64_t v178 = v26;
              v180 = v24;
              sub_1B4BB2D38();
            }
            unint64_t v36 = operator new(8 * v35);
            uint64_t v37 = &v36[8 * v32];
            *uint64_t v37 = v31[v29];
            v37[1] = v29;
            if (v25 == v27)
            {
              int64_t v26 = &v36[8 * v32];
              uint64_t v24 = &v36[8 * v35];
              long long v25 = (char *)(v37 + 2);
              if (!v27) {
                goto LABEL_44;
              }
LABEL_43:
              operator delete(v27);
              goto LABEL_44;
            }
            unint64_t v38 = v25 - v27 - 8;
            if (v38 < 0x168) {
              break;
            }
            unint64_t v41 = (v25 - 8 - v27) & 0xFFFFFFFFFFFFFFF8;
            if (&v36[v25 - v27 - 8 - v41] > &v36[v25 - v27 - 8]
              || &v25[-v41 - 8] > v25 - 8
              || (unint64_t)(v27 - v36) < 0x20)
            {
              break;
            }
            uint64_t v42 = (v38 >> 3) + 1;
            uint64_t v43 = 8 * (v42 & 0x3FFFFFFFFFFFFFFCLL);
            uint64_t v39 = &v25[-v43];
            int64_t v26 = (char *)&v37[v43 / 0xFFFFFFFFFFFFFFFCLL];
            int v44 = &v36[8 * v32 - 16];
            uint64_t v45 = v25 - 16;
            uint64_t v46 = v42 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v47 = *(_OWORD *)v45;
              *(v44 - 1) = *((_OWORD *)v45 - 1);
              *int v44 = v47;
              v44 -= 2;
              v45 -= 32;
              v46 -= 4;
            }
            while (v46);
            if (v42 != (v42 & 0x3FFFFFFFFFFFFFFCLL)) {
              goto LABEL_41;
            }
LABEL_42:
            uint64_t v24 = &v36[8 * v35];
            long long v25 = (char *)(v37 + 2);
            if (v27) {
              goto LABEL_43;
            }
LABEL_44:
            uint64_t v27 = v26;
            unint64_t v28 = v24;
            if (++v29 == v30)
            {
LABEL_55:
              unint64_t v178 = v26;
              v180 = v24;
              uint64_t v22 = v150;
              int64_t v15 = v151;
              goto LABEL_58;
            }
          }
          uint64_t v39 = v25;
          int64_t v26 = &v36[8 * v32];
          do
          {
LABEL_41:
            uint64_t v40 = *((void *)v39 - 1);
            v39 -= 8;
            *((void *)v26 - 1) = v40;
            v26 -= 8;
          }
          while (v39 != v27);
          goto LABEL_42;
        }
      }
      else
      {
        v152 = 0;
        uint64_t v22 = 0;
        unint64_t v178 = 0;
        v179 = 0;
        v180 = 0;
        uint64_t v23 = v177 - (unsigned char *)v176;
        unint64_t v150 = 0;
        v151 = v15;
        if (v177 != v176) {
          goto LABEL_28;
        }
      }
      long long v25 = 0;
      int64_t v26 = 0;
LABEL_58:
      sub_1B4C2B544(v26, v25, (char *)v22, v152);
      if (v26)
      {
        v179 = (const void **)v26;
        operator delete(v26);
      }
      if (v22 != (float *)v152) {
        break;
      }
LABEL_61:
      if (v150) {
        operator delete(v150);
      }
      uint64_t v16 = a1;
      if (v176)
      {
        long long v177 = (char *)v176;
        operator delete(v176);
      }
      v15 += 8;
      if (v15 == v147) {
        goto LABEL_21;
      }
    }
    while (1)
    {
      float v48 = *v15;
      float v49 = logf(*v22);
      int v50 = *((_DWORD *)v22 + 1);
      __src = (char *)operator new(4uLL);
      *(_DWORD *)__src = v50;
      unint64_t v51 = __src + 4;
      uint64_t v157 = 0;
      v158 = 0;
      v156 = 0;
      uint64_t v52 = (int *)*((void *)v15 + 1);
      char v53 = (int *)*((void *)v15 + 2);
      if (v52 != v53)
      {
        uint64_t v54 = 0;
        while (1)
        {
          while (v54 < v158)
          {
            int v55 = *v52++;
            *(_DWORD *)uint64_t v54 = v55;
            v54 += 4;
            uint64_t v157 = v54;
            if (v52 == v53) {
              goto LABEL_98;
            }
          }
          unint64_t v56 = (char *)v156;
          int64_t v57 = v54 - (unsigned char *)v156;
          uint64_t v58 = (v54 - (unsigned char *)v156) >> 2;
          unint64_t v59 = v58 + 1;
          if ((unint64_t)(v58 + 1) >> 62) {
            sub_1B4BB3244();
          }
          uint64_t v60 = v158 - (unsigned char *)v156;
          if ((v158 - (unsigned char *)v156) >> 1 > v59) {
            unint64_t v59 = v60 >> 1;
          }
          if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v61 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v61 = v59;
          }
          if (v61)
          {
            if (v61 >> 62) {
              sub_1B4BB2D38();
            }
            unint64_t v62 = operator new(4 * v61);
            uint64_t v63 = (int *)&v62[4 * v58];
            *uint64_t v63 = *v52;
            uint64_t v64 = (uint64_t)(v63 + 1);
            int64_t v65 = v54 - v56;
            if (v54 == v56) {
              goto LABEL_84;
            }
          }
          else
          {
            unint64_t v62 = 0;
            uint64_t v63 = (int *)(4 * v58);
            *(_DWORD *)(4 * v58) = *v52;
            uint64_t v64 = 4 * v58 + 4;
            int64_t v65 = v54 - v56;
            if (v54 == v56) {
              goto LABEL_84;
            }
          }
          unint64_t v66 = v65 - 4;
          if (v66 >= 0xBC)
          {
            unint64_t v69 = (v54 - 4 - v56) & 0xFFFFFFFFFFFFFFFCLL;
            if (&v62[v57 - 4 - v69] > &v62[v57 - 4])
            {
              size_t v67 = v54;
            }
            else if (&v54[-v69 - 4] > v54 - 4)
            {
              size_t v67 = v54;
            }
            else if ((unint64_t)(v54 - v62 - v57) >= 0x20)
            {
              uint64_t v70 = (v66 >> 2) + 1;
              uint64_t v71 = 4 * (v70 & 0x7FFFFFFFFFFFFFF8);
              size_t v67 = &v54[-v71];
              uint64_t v63 = (int *)((char *)v63 - v71);
              CFTypeRef v72 = &v62[4 * v58 - 16];
              char v73 = v54 - 16;
              uint64_t v74 = v70 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                long long v75 = *(_OWORD *)v73;
                *(v72 - 1) = *((_OWORD *)v73 - 1);
                *CFTypeRef v72 = v75;
                v72 -= 2;
                v73 -= 32;
                v74 -= 8;
              }
              while (v74);
              if (v70 == (v70 & 0x7FFFFFFFFFFFFFF8)) {
                goto LABEL_84;
              }
            }
            else
            {
              size_t v67 = v54;
            }
          }
          else
          {
            size_t v67 = v54;
          }
          do
          {
            int v68 = *((_DWORD *)v67 - 1);
            v67 -= 4;
            *--uint64_t v63 = v68;
          }
          while (v67 != v56);
LABEL_84:
          v156 = v63;
          uint64_t v157 = (char *)v64;
          v158 = &v62[4 * v61];
          if (v56) {
            operator delete(v56);
          }
          uint64_t v54 = (char *)v64;
          uint64_t v157 = (char *)v64;
          if (++v52 == v53)
          {
LABEL_98:
            v76 = v156;
            v77 = v158;
            uint64_t v78 = v54;
            goto LABEL_100;
          }
        }
      }
      uint64_t v54 = 0;
      v77 = 0;
      v76 = 0;
      uint64_t v78 = 0;
LABEL_100:
      uint64_t v79 = v78 - v76;
      uint64_t v80 = &v76[(v78 - v76) & 0xFFFFFFFFFFFFFFFCLL];
      v81 = __src;
      if (v77 - v54 < 4) {
        break;
      }
      uint64_t v86 = v54 - v80;
      if (v54 - v80 > 3)
      {
        long long v87 = v54;
LABEL_114:
        uint64_t v88 = v87 - 4;
        v89 = v87;
        if (v87 - 4 < v54)
        {
          v89 = v87;
          do
          {
            int v102 = *(_DWORD *)v88;
            v88 += 4;
            *(_DWORD *)v89 = v102;
            v89 += 4;
          }
          while (v88 < v54);
        }
        uint64_t v157 = v89;
        if (v87 != v80 + 4) {
          memmove(&v87[-4 * ((v87 - (v80 + 4)) >> 2)], &v76[(v78 - v76) & 0xFFFFFFFFFFFFFFFCLL], v87 - (v80 + 4));
        }
        if (v51 != v81) {
          memmove(&v76[(v78 - v76) & 0xFFFFFFFFFFFFFFFCLL], v81, v51 - v81);
        }
        goto LABEL_134;
      }
      unint64_t v51 = &__src[v86];
      memmove(v54, &__src[v86], 4 - v86);
      long long v87 = v80 + 4;
      v81 = __src;
      uint64_t v157 = v80 + 4;
      if (v86 >= 1) {
        goto LABEL_114;
      }
LABEL_134:
      sub_1B4C3522C(&v165, (uint64_t)&v156, v49 + v48);
      if (v156)
      {
        uint64_t v157 = (char *)v156;
        operator delete(v156);
      }
      operator delete(v81);
      v22 += 2;
      int64_t v15 = v151;
      if (v22 == (float *)v152) {
        goto LABEL_61;
      }
    }
    unint64_t v82 = ((v54 - v76) >> 2) + 1;
    if (v82 >> 62) {
      sub_1B4BB3244();
    }
    uint64_t v83 = v77 - v76;
    if (v83 >> 1 > v82) {
      unint64_t v82 = v83 >> 1;
    }
    if ((unint64_t)v83 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v84 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v84 = v82;
    }
    if (v84)
    {
      if (v84 >> 62) {
        sub_1B4BB2D38();
      }
      uint64_t v85 = operator new(4 * v84);
    }
    else
    {
      uint64_t v85 = 0;
    }
    v90 = &v85[4 * ((v78 - v76) >> 2)];
    *(_DWORD *)v90 = *(_DWORD *)__src;
    v91 = v90 + 4;
    if (v78 != v76)
    {
      if ((unint64_t)(v79 - 4) >= 0x3C)
      {
        v92 = &v76[(v78 - v76) & 0xFFFFFFFFFFFFFFFCLL];
        if ((unint64_t)(&v76[v79 & 0xFFFFFFFFFFFFFFFCLL] - &v85[v79 & 0xFFFFFFFFFFFFFFFCLL]) >= 0x20)
        {
          unint64_t v93 = ((unint64_t)(v79 - 4) >> 2) + 1;
          uint64_t v94 = 4 * (v93 & 0x7FFFFFFFFFFFFFF8);
          v92 = &v80[-v94];
          v90 -= v94;
          uint64_t v95 = 4 * ((v78 - v76) >> 2);
          unint64_t v96 = &v85[v95 - 16];
          long long v97 = (long long *)&v76[v95 - 16];
          uint64_t v98 = v93 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v99 = *v97;
            *(v96 - 1) = *(v97 - 1);
            *unint64_t v96 = v99;
            v96 -= 2;
            v97 -= 2;
            v98 -= 8;
          }
          while (v98);
          if (v93 == (v93 & 0x7FFFFFFFFFFFFFF8)) {
            goto LABEL_125;
          }
        }
      }
      else
      {
        v92 = &v76[(v78 - v76) & 0xFFFFFFFFFFFFFFFCLL];
      }
      do
      {
        int v100 = *((_DWORD *)v92 - 1);
        v92 -= 4;
        *((_DWORD *)v90 - 1) = v100;
        v90 -= 4;
      }
      while (v92 != v76);
    }
LABEL_125:
    size_t v101 = v54 - v80;
    if (v101) {
      memmove(v91, &v76[(v78 - v76) & 0xFFFFFFFFFFFFFFFCLL], v101);
    }
    v156 = v90;
    uint64_t v157 = &v91[v101];
    v158 = &v85[4 * v84];
    v81 = __src;
    if (v76) {
      operator delete(v76);
    }
    goto LABEL_134;
  }
LABEL_185:
  sub_1B4C3A1BC(&v154, (uint64_t *)v159);
  sub_1B4C35A28(a4, &v161, (uint64_t *)&v154);
  unint64_t v129 = (char *)v154;
  if (v154)
  {
    unint64_t v130 = v155;
    unint64_t v131 = v154;
    if (v155 != v154)
    {
      do
      {
        v132 = (void *)*((void *)v130 - 3);
        if (v132)
        {
          *((void *)v130 - 2) = v132;
          operator delete(v132);
        }
        v130 -= 32;
      }
      while (v130 != v129);
      unint64_t v131 = v154;
    }
    uint64_t v155 = v129;
    operator delete(v131);
  }
  unint64_t v133 = (char *)v159[0];
  if (v159[0])
  {
    v134 = (char *)v159[1];
    uint64_t v135 = v159[0];
    if (v159[1] != v159[0])
    {
      do
      {
        v136 = (void *)*((void *)v134 - 3);
        if (v136)
        {
          *((void *)v134 - 2) = v136;
          operator delete(v136);
        }
        v134 -= 32;
      }
      while (v134 != v133);
      uint64_t v135 = v159[0];
    }
    v159[1] = v133;
    operator delete(v135);
  }
  unint64_t v137 = (char *)__p;
  if (__p)
  {
    uint64_t v138 = v167;
    unint64_t v139 = __p;
    if (v167 != __p)
    {
      do
      {
        v140 = (void *)*((void *)v138 - 3);
        if (v140)
        {
          *((void *)v138 - 2) = v140;
          operator delete(v140);
        }
        v138 -= 32;
      }
      while (v138 != v137);
      unint64_t v139 = __p;
    }
    v167 = v137;
    operator delete(v139);
  }
}

void sub_1B4C34DB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43)
{
  sub_1B4C0D350(&a27);
  int v44 = __p;
  if (__p)
  {
    uint64_t v45 = a34;
    uint64_t v46 = __p;
    if ((void *)a34 != __p)
    {
      do
      {
        long long v47 = *(void **)(v45 - 24);
        if (v47)
        {
          *(void *)(v45 - 16) = v47;
          operator delete(v47);
        }
        v45 -= 32;
      }
      while ((void *)v45 != v44);
      uint64_t v46 = __p;
    }
    a34 = (uint64_t)v44;
    operator delete(v46);
  }
  float v48 = a42;
  if (a42)
  {
    uint64_t v49 = a43;
    int v50 = a42;
    if ((void *)a43 != a42)
    {
      do
      {
        unint64_t v51 = *(void **)(v49 - 24);
        if (v51)
        {
          *(void *)(v49 - 16) = v51;
          operator delete(v51);
        }
        v49 -= 32;
      }
      while ((void *)v49 != v48);
      int v50 = a42;
    }
    a43 = (uint64_t)v48;
    operator delete(v50);
  }
  _Unwind_Resume(a1);
}

float sub_1B4C35004(uint64_t a1, uint64_t *a2)
{
  LOBYTE(cf) = 0;
  char v30 = 0;
  sub_1B4C37B88(a1, (uint64_t)a2, (uint64_t)&cf, 1, (uint64_t)&v31);
  if (v30 && cf) {
    CFRelease(cf);
  }
  uint64_t v3 = *a2;
  uint64_t v4 = (a2[1] - *a2) >> 2;
  uint64_t v5 = v4 - 1;
  if (v4 == 1) {
    return 0.0;
  }
  uint64_t v6 = v33[1];
  uint64_t v7 = v33;
  if (v31) {
    uint64_t v7 = &v32;
  }
  uint64_t v8 = *v7;
  if (!v31)
  {
    if (v4 == 2)
    {
      unint64_t v22 = 0;
      float v9 = 0.0;
    }
    else
    {
      uint64_t v21 = 0;
      unint64_t v22 = v5 & 0xFFFFFFFFFFFFFFFELL;
      float v23 = 0.0;
      float v24 = 0.0;
      do
      {
        uint64_t v25 = v3 + 4 * v21;
        float v26 = *(float *)(v6 + 4 * (v21 + v8 * *(unsigned int *)(v25 + 8)) + 4);
        float v23 = logf(*(float *)(v6 + 4 * (v21 + v8 * *(unsigned int *)(v25 + 4)))) + v23;
        float v24 = logf(v26) + v24;
        v21 += 2;
      }
      while (v22 != v21);
      float v9 = v24 + v23;
      if (v5 == v22) {
        return v9;
      }
    }
    uint64_t v27 = v3 + 4;
    do
    {
      float v9 = logf(*(float *)(v6 + 4 * (v22 + v8 * *(unsigned int *)(v27 + 4 * v22)))) + v9;
      ++v22;
    }
    while (v5 != v22);
    return v9;
  }
  if (v4 == 2)
  {
    unint64_t v11 = 0;
    float v9 = 0.0;
LABEL_17:
    unint64_t v17 = v8 * v11;
    unint64_t v18 = ~v11 + v4;
    unint64_t v19 = (unsigned int *)(v3 + 4 * v11 + 4);
    do
    {
      unsigned int v20 = *v19++;
      float v9 = logf(*(float *)(v6 + 4 * (v17 + v20))) + v9;
      v17 += v8;
      --v18;
    }
    while (v18);
    return v9;
  }
  uint64_t v10 = 0;
  unint64_t v11 = v5 & 0xFFFFFFFFFFFFFFFELL;
  float v12 = (unsigned int *)(v3 + 8);
  float v13 = 0.0;
  unint64_t v14 = v5 & 0xFFFFFFFFFFFFFFFELL;
  float v15 = 0.0;
  do
  {
    float v16 = *(float *)(v6 + 4 * (v8 + v10 + *v12));
    float v13 = logf(*(float *)(v6 + 4 * (v10 + *(v12 - 1)))) + v13;
    float v15 = logf(v16) + v15;
    v12 += 2;
    v10 += 2 * v8;
    v14 -= 2;
  }
  while (v14);
  float v9 = v15 + v13;
  if (v5 != v11) {
    goto LABEL_17;
  }
  return v9;
}

void sub_1B4C35218(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B4C3522C(void *a1, uint64_t a2, float a3)
{
  uint64_t v7 = a1 + 1;
  uint64_t v6 = (float *)a1[1];
  unint64_t v8 = a1[2];
  unint64_t v9 = (uint64_t)(v8 - (void)v6) >> 5;
  if (v9 >= *(int *)a1)
  {
    if (*v6 >= a3) {
      return;
    }
    sub_1B4C39EA8((uint64_t)v6, a1[2], v9);
    float v15 = (char *)a1[2];
    float v16 = (void *)*((void *)v15 - 3);
    if (v16)
    {
      *((void *)v15 - 2) = v16;
      operator delete(v16);
    }
    a1[2] = v15 - 32;
    if ((unint64_t)(v15 - 32) >= a1[3])
    {
      float v15 = sub_1B4C39944(v7, *(const void **)a2, *(void *)(a2 + 8), a3);
    }
    else
    {
      *((float *)v15 - 8) = a3;
      *((void *)v15 - 2) = 0;
      *((void *)v15 - 1) = 0;
      *((void *)v15 - 3) = 0;
      unint64_t v17 = *(const void **)a2;
      int64_t v18 = *(void *)(a2 + 8) - *(void *)a2;
      if (v18)
      {
        if (v18 < 0) {
          sub_1B4BB3244();
        }
        unint64_t v19 = (char *)operator new(v18);
        *((void *)v15 - 3) = v19;
        *((void *)v15 - 2) = v19;
        unsigned int v20 = &v19[4 * (v18 >> 2)];
        *((void *)v15 - 1) = v20;
        memcpy(v19, v17, v18);
        *((void *)v15 - 2) = v20;
      }
      a1[2] = v15;
    }
    a1[2] = v15;
    uint64_t v21 = a1[1];
    uint64_t v22 = (uint64_t)&v15[-v21] >> 5;
    unint64_t v14 = v15;
  }
  else
  {
    if (v8 >= a1[3])
    {
      unint64_t v14 = sub_1B4C39944(v7, *(const void **)a2, *(void *)(a2 + 8), a3);
    }
    else
    {
      *(void *)(v8 + 8) = 0;
      *(float *)unint64_t v8 = a3;
      *(void *)(v8 + 16) = 0;
      *(void *)(v8 + 24) = 0;
      uint64_t v10 = *(const void **)a2;
      int64_t v11 = *(void *)(a2 + 8) - *(void *)a2;
      if (v11)
      {
        if (v11 < 0) {
          sub_1B4BB3244();
        }
        float v12 = (char *)operator new(v11);
        *(void *)(v8 + 8) = v12;
        *(void *)(v8 + 16) = v12;
        float v13 = &v12[4 * (v11 >> 2)];
        *(void *)(v8 + 24) = v13;
        memcpy(v12, v10, v11);
        *(void *)(v8 + 16) = v13;
      }
      unint64_t v14 = (char *)(v8 + 32);
      a1[2] = v8 + 32;
    }
    a1[2] = v14;
    uint64_t v21 = a1[1];
    uint64_t v22 = (uint64_t)&v14[-v21] >> 5;
  }
  sub_1B4C39B38(v21, (uint64_t)v14, v22);
}

void sub_1B4C35408(_Unwind_Exception *exception_object)
{
  uint64_t v6 = *v4;
  if (*v4)
  {
    *(void *)(v3 - 16) = v6;
    operator delete(v6);
  }
  *(void *)(v1 + 16) = v2;
  _Unwind_Resume(exception_object);
}

void sub_1B4C3543C(char **a1, uint64_t a2)
{
  sub_1B4C3A1BC(&v35, (uint64_t *)(a2 + 8));
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v3 = v35;
  if (v35 == (void *)v36)
  {
    if (!v35) {
      return;
    }
  }
  else
  {
    do
    {
      uint64_t v5 = a1[1];
      unint64_t v4 = (unint64_t)a1[2];
      if ((unint64_t)v5 >= v4)
      {
        float v13 = *a1;
        uint64_t v14 = (v5 - *a1) >> 5;
        unint64_t v15 = v14 + 1;
        if ((unint64_t)(v14 + 1) >> 59) {
          sub_1B4BB3244();
        }
        uint64_t v16 = v4 - (void)v13;
        if (v16 >> 4 > v15) {
          unint64_t v15 = v16 >> 4;
        }
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFE0) {
          unint64_t v17 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v17 = v15;
        }
        uint64_t v40 = a1 + 2;
        if (v17)
        {
          if (v17 >> 59) {
            sub_1B4BB2D38();
          }
          int64_t v18 = (char *)operator new(32 * v17);
        }
        else
        {
          int64_t v18 = 0;
        }
        unint64_t v19 = &v18[32 * v14];
        uint64_t v37 = v18;
        unint64_t v38 = v19;
        unsigned int v20 = &v18[32 * v17];
        *(void *)&long long v39 = v19;
        *((void *)&v39 + 1) = v20;
        *(_DWORD *)unint64_t v19 = *(_DWORD *)v3;
        *((void *)v19 + 1) = 0;
        *((void *)v19 + 2) = 0;
        uint64_t v21 = (char **)(v19 + 16);
        *((void *)v19 + 3) = 0;
        float v23 = (unsigned char *)v3[1];
        uint64_t v22 = (unsigned char *)v3[2];
        int64_t v24 = v22 - v23;
        if (v22 != v23)
        {
          if (v24 < 0) {
            sub_1B4BB3244();
          }
          uint64_t v25 = (char *)operator new(v22 - v23);
          *((void *)v19 + 1) = v25;
          *uint64_t v21 = v25;
          float v26 = &v25[4 * (v24 >> 2)];
          *((void *)v19 + 3) = v26;
          memcpy(v25, v23, v24);
          *uint64_t v21 = v26;
        }
        float v12 = v19 + 32;
        *(void *)&long long v39 = v19 + 32;
        if (v5 == v13)
        {
          *a1 = v19;
          a1[1] = v12;
          a1[2] = v20;
        }
        else
        {
          uint64_t v27 = 0;
          do
          {
            unint64_t v28 = &v19[v27];
            uint64_t v29 = &v5[v27];
            *((_DWORD *)v28 - 8) = *(_DWORD *)&v5[v27 - 32];
            *((void *)v28 - 2) = 0;
            *((void *)v28 - 1) = 0;
            *(_OWORD *)(v28 - 24) = *(_OWORD *)&v5[v27 - 24];
            *((void *)v28 - 1) = *(void *)&v5[v27 - 8];
            *((void *)v29 - 3) = 0;
            *((void *)v29 - 2) = 0;
            *((void *)v29 - 1) = 0;
            v27 -= 32;
          }
          while (&v5[v27] != v13);
          uint64_t v5 = *a1;
          char v30 = a1[1];
          *a1 = &v19[v27];
          int v31 = (char *)v39;
          *(_OWORD *)(a1 + 1) = v39;
          float v12 = v31;
          while (v30 != v5)
          {
            uint64_t v32 = (void *)*((void *)v30 - 3);
            if (v32)
            {
              *((void *)v30 - 2) = v32;
              operator delete(v32);
            }
            v30 -= 32;
          }
        }
        if (v5) {
          operator delete(v5);
        }
        uint64_t v3 = v35;
      }
      else
      {
        int v6 = *(_DWORD *)v3;
        *((void *)v5 + 1) = 0;
        *(_DWORD *)uint64_t v5 = v6;
        *((void *)v5 + 2) = 0;
        *((void *)v5 + 3) = 0;
        unint64_t v8 = (unsigned char *)v3[1];
        uint64_t v7 = (unsigned char *)v3[2];
        int64_t v9 = v7 - v8;
        if (v7 != v8)
        {
          if (v9 < 0) {
            sub_1B4BB3244();
          }
          uint64_t v10 = (char *)operator new(v7 - v8);
          *((void *)v5 + 1) = v10;
          *((void *)v5 + 2) = v10;
          int64_t v11 = &v10[4 * (v9 >> 2)];
          *((void *)v5 + 3) = v11;
          memcpy(v10, v8, v9);
          *((void *)v5 + 2) = v11;
        }
        float v12 = v5 + 32;
        a1[1] = v5 + 32;
      }
      a1[1] = v12;
      sub_1B4C39EA8((uint64_t)v3, (uint64_t)v36, (v36 - (unsigned char *)v3) >> 5);
      uint64_t v33 = (uint64_t)v36;
      uint64_t v34 = (void *)*((void *)v36 - 3);
      if (v34)
      {
        *((void *)v36 - 2) = v34;
        operator delete(v34);
      }
      unint64_t v36 = (unsigned char *)(v33 - 32);
      uint64_t v3 = v35;
    }
    while (v35 != (void *)(v33 - 32));
    uint64_t v3 = (void *)(v33 - 32);
  }
  unint64_t v36 = v3;
  operator delete(v3);
}

void sub_1B4C35704(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v7 = va_arg(va1, void *);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  int v6 = *v3;
  if (*v3)
  {
    void *v4 = v6;
    operator delete(v6);
  }
  sub_1B4C2AA10((uint64_t)va1);
  sub_1B4C0D350(v2);
  sub_1B4C0D350((void **)va);
  _Unwind_Resume(a1);
}

void sub_1B4C3573C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  int v6 = *v4;
  if (*v4)
  {
    *(void *)(v3 + 16) = v6;
    operator delete(v6);
  }
  *(void *)(v2 + 8) = v3;
  sub_1B4C0D350((void **)v2);
  sub_1B4C0D350((void **)va);
  _Unwind_Resume(a1);
}

void sub_1B4C35770(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1B4C0D350(v2);
  sub_1B4C0D350((void **)va);
  _Unwind_Resume(a1);
}

__n128 sub_1B4C35790(__n128 **a1, uint64_t a2, uint64_t a3)
{
  LOBYTE(cf) = 0;
  char v38 = 0;
  sub_1B4C37B88(a2, a3, (uint64_t)&cf, 1, (uint64_t)&v39);
  if (v38 && cf) {
    CFRelease(cf);
  }
  uint64_t v5 = v41;
  unint64_t v6 = (*(uint64_t (**)(void))(**(void **)(a2 + 104) + 88))(*(void *)(a2 + 104));
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  if (v6)
  {
    unint64_t v7 = v6;
    if (v6 >> 62) {
      sub_1B4BB3244();
    }
    uint64_t v8 = 4 * v6;
    uint64_t v9 = (__n128 *)operator new(4 * v6);
    *a1 = v9;
    a1[2] = (__n128 *)((char *)v9 + 4 * v7);
    bzero(v9, 4 * v7);
    a1[1] = (__n128 *)((char *)v9 + v8);
  }
  else
  {
    uint64_t v9 = 0;
  }
  unint64_t v10 = (*(uint64_t (**)(void))(**(void **)(a2 + 104) + 88))(*(void *)(a2 + 104));
  if (v10)
  {
    uint64_t v12 = v42;
    if (!v39)
    {
      uint64_t v22 = v41;
      BOOL v23 = v10 >= 0xC && v41 == 1;
      if (v23 && (unint64_t)v9->n128_u64 + -v42 + -4 * v5 + 4 >= 0x20)
      {
        unint64_t v24 = v10 & 0xFFFFFFFFFFFFFFF8;
        uint64_t v33 = (__n128 *)(4 * v5 + v42 + 12);
        uint64_t v34 = v9 + 1;
        unint64_t v35 = v10 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          __n128 result = v33[-1];
          __n128 v36 = *v33;
          v34[-1] = result;
          *uint64_t v34 = v36;
          v33 += 2;
          v34 += 2;
          v35 -= 8;
        }
        while (v35);
        if (v10 == v24) {
          return result;
        }
      }
      else
      {
        unint64_t v24 = 0;
      }
      unint64_t v25 = v10 - v24;
      float v26 = (unsigned __int32 *)v9 + v24;
      uint64_t v27 = (unsigned __int32 *)(v12 + 4 * (v5 + v24 * v22) - 4);
      uint64_t v28 = 4 * v22;
      do
      {
        result.n128_u32[0] = *v27;
        *v26++ = *v27;
        uint64_t v27 = (unsigned __int32 *)((char *)v27 + v28);
        --v25;
      }
      while (v25);
      return result;
    }
    uint64_t v13 = v5 - 1;
    uint64_t v14 = v40;
    if (v10 < 8 || (uint64_t v15 = 4 * v40 * v13, (unint64_t)v9->n128_u64 - v42 - v15 < 0x20))
    {
      unint64_t v16 = 0;
LABEL_13:
      unint64_t v17 = v10 - v16;
      uint64_t v18 = 4 * v16;
      unint64_t v19 = (unsigned __int32 *)v9 + v16;
      unsigned int v20 = (unsigned __int32 *)(v12 + v18 + 4 * v14 * v13);
      do
      {
        unsigned __int32 v21 = *v20++;
        result.n128_u32[0] = v21;
        *v19++ = v21;
        --v17;
      }
      while (v17);
      return result;
    }
    unint64_t v16 = v10 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v29 = (__n128 *)(v15 + v42 + 16);
    char v30 = v9 + 1;
    unint64_t v31 = v10 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      __n128 result = v29[-1];
      __n128 v32 = *v29;
      v30[-1] = result;
      __n128 *v30 = v32;
      v29 += 2;
      v30 += 2;
      v31 -= 8;
    }
    while (v31);
    if (v10 != v16) {
      goto LABEL_13;
    }
  }
  return result;
}

void sub_1B4C359E4(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    *(void *)(v2 + 8) = v1;
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B4C35A28(uint64_t a1, void **a2, uint64_t *a3)
{
  sub_1B4C3A1BC(&v24, a3);
  uint64_t v5 = *a2;
  unint64_t v6 = v24;
  unint64_t v7 = v25;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = 0;
  if (v6 != v7)
  {
    do
    {
      int v26 = *(_DWORD *)v6;
      uint64_t v28 = 0;
      uint64_t v29 = 0;
      uint64_t v27 = 0;
      uint64_t v9 = (unsigned char *)v6[1];
      uint64_t v8 = (unsigned char *)v6[2];
      int64_t v10 = v8 - v9;
      if (v8 == v9)
      {
        uint64_t v12 = 0;
        uint64_t v11 = 0;
      }
      else
      {
        if (v10 < 0) {
          sub_1B4BB3244();
        }
        uint64_t v11 = (char *)operator new(v8 - v9);
        uint64_t v12 = &v11[4 * (v10 >> 2)];
        uint64_t v27 = v11;
        uint64_t v29 = v12;
        memcpy(v11, v9, v10);
        uint64_t v28 = v12;
      }
      uint64_t v13 = v5[1] - *v5;
      __p[0] = 0;
      __p[1] = 0;
      unint64_t v31 = 0;
      if ((v12 - v11) >> 2 != v13 >> 2)
      {
        uint64_t v14 = &v11[v13];
        int64_t v15 = v12 - &v11[v13];
        if (v15 < 0) {
          sub_1B4BB3244();
        }
        unint64_t v16 = (char *)operator new(v12 - &v11[v13]);
        unint64_t v17 = &v16[4 * (v15 >> 2)];
        __p[0] = v16;
        unint64_t v31 = v17;
        memcpy(v16, v14, v15);
        __p[1] = v17;
      }
      uint64_t v18 = *(void **)(a1 + 8);
      if ((unint64_t)v18 >= *(void *)(a1 + 16))
      {
        unint64_t v19 = sub_1B4C2B938((char **)a1, (uint64_t)__p);
        unsigned int v20 = __p[0];
        *(void *)(a1 + 8) = v19;
        if (v20)
        {
          __p[1] = v20;
          operator delete(v20);
        }
      }
      else
      {
        *uint64_t v18 = 0;
        v18[1] = 0;
        v18[2] = 0;
        *(_OWORD *)uint64_t v18 = *(_OWORD *)__p;
        v18[2] = v31;
        __p[0] = 0;
        __p[1] = 0;
        unint64_t v31 = 0;
        *(void *)(a1 + 8) = v18 + 3;
      }
      if (v11)
      {
        uint64_t v28 = v11;
        operator delete(v11);
      }
      v6 += 4;
    }
    while (v6 != v7);
    unint64_t v6 = v24;
  }
  if (v6)
  {
    unsigned __int32 v21 = v25;
    uint64_t v22 = v6;
    if (v25 != v6)
    {
      do
      {
        BOOL v23 = (void *)*(v21 - 3);
        if (v23)
        {
          *(v21 - 2) = v23;
          operator delete(v23);
        }
        v21 -= 4;
      }
      while (v21 != v6);
      uint64_t v22 = v24;
    }
    unint64_t v25 = v6;
    operator delete(v22);
  }
}

void sub_1B4C35C2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (__p)
  {
    a18 = (uint64_t)__p;
    operator delete(__p);
  }
  if (v19)
  {
    operator delete(v19);
    sub_1B4C07820(v18);
    sub_1B4C0D350(&a10);
    _Unwind_Resume(a1);
  }
  sub_1B4C07820(v18);
  sub_1B4C0D350(&a10);
  _Unwind_Resume(a1);
}

void sub_1B4C35CA0(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, char **a4@<X8>)
{
  uint64_t v5 = *(int *)(a1 + 20);
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  uint64_t v63 = v5;
  if (v5)
  {
    uint64_t v7 = 0;
    unint64_t v62 = a4;
    while (1)
    {
      uint64_t v9 = *(unsigned char **)a2;
      uint64_t v8 = *(unsigned char **)(a2 + 8);
      uint64_t v71 = 0;
      CFTypeRef v72 = 0;
      char v73 = 0;
      int64_t v10 = v8 - v9;
      if (v8 != v9)
      {
        if (v10 < 0) {
          sub_1B4BB3244();
        }
        uint64_t v11 = (char *)operator new(v8 - v9);
        uint64_t v12 = &v11[4 * (v10 >> 2)];
        uint64_t v71 = v11;
        char v73 = v12;
        memcpy(v11, v9, v10);
        CFTypeRef v72 = v12;
      }
      sub_1B4C371B4((uint64_t)&v70);
      v69[0] = a1;
      v69[1] = (uint64_t)&v71;
      v69[2] = (uint64_t)&v70;
      int v13 = sub_1B4C36284(v69);
      uint64_t v66 = v7;
      __p[0] = 0;
      __p[1] = 0;
      int v68 = 0;
      uint64_t v14 = operator new(4uLL);
      int64_t v15 = v14;
      *uint64_t v14 = v13;
      unint64_t v16 = (char *)(v14 + 1);
      __p[1] = v14 + 1;
      int v68 = (char *)(v14 + 1);
      __p[0] = v14;
      if (a3 >= 2) {
        break;
      }
LABEL_63:
      std::random_device::~random_device(&v70);
      if (v71)
      {
        CFTypeRef v72 = v71;
        operator delete(v71);
      }
      unint64_t v59 = v62[1];
      if (v59 < v62[2])
      {
        *(void *)unint64_t v59 = 0;
        *((void *)v59 + 1) = 0;
        *((void *)v59 + 2) = 0;
        *(_OWORD *)unint64_t v59 = *(_OWORD *)__p;
        *((void *)v59 + 2) = v68;
        v62[1] = v59 + 24;
      }
      else
      {
        uint64_t v60 = sub_1B4C2B938(v62, (uint64_t)__p);
        unint64_t v61 = __p[0];
        v62[1] = v60;
        if (v61)
        {
          __p[1] = v61;
          operator delete(v61);
        }
      }
      uint64_t v7 = v66 + 1;
      if (v66 + 1 == v63) {
        return;
      }
    }
    unint64_t v17 = v14 + 1;
    uint64_t v18 = 2;
    while (1)
    {
      unsigned int v20 = v72;
      if (v72 >= v73) {
        break;
      }
      *(_DWORD *)CFTypeRef v72 = *(v17 - 1);
      uint64_t v21 = (uint64_t)(v20 + 4);
LABEL_33:
      CFTypeRef v72 = (char *)v21;
      int v40 = sub_1B4C36284(v69);
      int v41 = v40;
      if (v17 < (_DWORD *)v16)
      {
        *v17++ = v40;
        __p[1] = v17;
        BOOL v19 = v18++ == a3;
        if (v19) {
          goto LABEL_63;
        }
      }
      else
      {
        uint64_t v42 = ((char *)v17 - v15) >> 2;
        unint64_t v43 = v42 + 1;
        if ((unint64_t)(v42 + 1) >> 62) {
          sub_1B4BB3244();
        }
        if ((v16 - v15) >> 1 > v43) {
          unint64_t v43 = (v16 - v15) >> 1;
        }
        if ((unint64_t)(v16 - v15) >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v44 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v44 = v43;
        }
        if (v44)
        {
          if (v44 >> 62) {
            sub_1B4BB2D38();
          }
          uint64_t v45 = operator new(4 * v44);
          uint64_t v46 = &v45[4 * v42];
          _DWORD *v46 = v41;
          long long v47 = v46 + 1;
          int64_t v48 = (char *)v17 - v15;
          if (v17 == (_DWORD *)v15) {
            goto LABEL_48;
          }
        }
        else
        {
          uint64_t v45 = 0;
          uint64_t v46 = (_DWORD *)(4 * v42);
          *(_DWORD *)(4 * v42) = v41;
          long long v47 = (void *)(4 * v42 + 4);
          int64_t v48 = (char *)v17 - v15;
          if (v17 == (_DWORD *)v15) {
            goto LABEL_48;
          }
        }
        unint64_t v49 = v48 - 4;
        if (v49 >= 0xBC)
        {
          unint64_t v52 = ((char *)(v17 - 1) - v15) & 0xFFFFFFFFFFFFFFFCLL;
          if (&v45[(char *)v17 - v15 - 4 - v52] > &v45[(char *)v17 - v15 - 4])
          {
            int v50 = v17;
          }
          else if ((_DWORD *)((char *)v17 - v52 - 4) > v17 - 1)
          {
            int v50 = v17;
          }
          else if ((unint64_t)(v15 - v45) >= 0x20)
          {
            uint64_t v53 = (v49 >> 2) + 1;
            uint64_t v54 = 4 * (v53 & 0x7FFFFFFFFFFFFFF8);
            int v50 = &v17[v54 / 0xFFFFFFFFFFFFFFFCLL];
            uint64_t v46 = (_DWORD *)((char *)v46 - v54);
            int v55 = &v45[4 * v42 - 16];
            unint64_t v56 = (long long *)(v17 - 4);
            uint64_t v57 = v53 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              long long v58 = *v56;
              *(v55 - 1) = *(v56 - 1);
              *int v55 = v58;
              v55 -= 2;
              v56 -= 2;
              v57 -= 8;
            }
            while (v57);
            if (v53 == (v53 & 0x7FFFFFFFFFFFFFF8)) {
              goto LABEL_48;
            }
          }
          else
          {
            int v50 = v17;
          }
        }
        else
        {
          int v50 = v17;
        }
        do
        {
          int v51 = *--v50;
          *--uint64_t v46 = v51;
        }
        while (v50 != (_DWORD *)v15);
LABEL_48:
        unint64_t v16 = &v45[4 * v44];
        __p[0] = v46;
        int v68 = v16;
        if (v15) {
          operator delete(v15);
        }
        int64_t v15 = v46;
        __p[1] = v47;
        unint64_t v17 = v47;
        BOOL v19 = v18++ == a3;
        if (v19) {
          goto LABEL_63;
        }
      }
    }
    uint64_t v22 = v71;
    uint64_t v23 = (v72 - v71) >> 2;
    unint64_t v24 = v23 + 1;
    if ((unint64_t)(v23 + 1) >> 62) {
      sub_1B4BB3244();
    }
    uint64_t v25 = v73 - v71;
    if ((v73 - v71) >> 1 > v24) {
      unint64_t v24 = v25 >> 1;
    }
    if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v26 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v26 = v24;
    }
    if (v26)
    {
      if (v26 >> 62) {
        sub_1B4BB2D38();
      }
      unint64_t v27 = v26;
      uint64_t v28 = operator new(4 * v26);
      unint64_t v26 = v27;
      uint64_t v29 = &v28[4 * v23];
      *(_DWORD *)uint64_t v29 = *(v17 - 1);
      uint64_t v21 = (uint64_t)(v29 + 4);
      int64_t v30 = v20 - v22;
      if (v20 == v22) {
        goto LABEL_31;
      }
    }
    else
    {
      uint64_t v28 = 0;
      uint64_t v29 = (char *)(4 * v23);
      *(_DWORD *)(4 * v23) = *(v17 - 1);
      uint64_t v21 = 4 * v23 + 4;
      int64_t v30 = v20 - v22;
      if (v20 == v22)
      {
LABEL_31:
        uint64_t v71 = v29;
        CFTypeRef v72 = (char *)v21;
        char v73 = &v28[4 * v26];
        if (v22) {
          operator delete(v22);
        }
        goto LABEL_33;
      }
    }
    unint64_t v31 = v30 - 4;
    if (v31 < 0x2C) {
      goto LABEL_76;
    }
    if ((unint64_t)(v22 - v28) < 0x20) {
      goto LABEL_76;
    }
    uint64_t v32 = (v31 >> 2) + 1;
    uint64_t v33 = 4 * (v32 & 0x7FFFFFFFFFFFFFF8);
    uint64_t v34 = &v20[-v33];
    v29 -= v33;
    unint64_t v35 = &v28[4 * v23 - 16];
    __n128 v36 = v20 - 16;
    uint64_t v37 = v32 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v38 = *(_OWORD *)v36;
      *(v35 - 1) = *((_OWORD *)v36 - 1);
      *unint64_t v35 = v38;
      v35 -= 2;
      v36 -= 32;
      v37 -= 8;
    }
    while (v37);
    unsigned int v20 = v34;
    if (v32 != (v32 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_76:
      do
      {
        int v39 = *((_DWORD *)v20 - 1);
        v20 -= 4;
        *((_DWORD *)v29 - 1) = v39;
        v29 -= 4;
      }
      while (v20 != v22);
    }
    goto LABEL_31;
  }
}

void sub_1B4C3617C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::random_device a21)
{
  if (__p) {
    operator delete(__p);
  }
  uint64_t v22 = (char *)*a10;
  if (!*a10) {
    _Unwind_Resume(exception_object);
  }
  uint64_t v23 = (char *)a10[1];
  unint64_t v24 = *a10;
  if (v23 != v22)
  {
    uint64_t v25 = (char *)a10[1];
    do
    {
      unint64_t v27 = (void *)*((void *)v25 - 3);
      v25 -= 24;
      unint64_t v26 = v27;
      if (v27)
      {
        *((void *)v23 - 2) = v26;
        operator delete(v26);
      }
      uint64_t v23 = v25;
    }
    while (v25 != v22);
    unint64_t v24 = *a10;
  }
  a10[1] = v22;
  operator delete(v24);
  _Unwind_Resume(exception_object);
}

unint64_t sub_1B4C36284(uint64_t *a1)
{
  uint64_t v2 = *a1;
  sub_1B4C35790((__n128 **)v15, *(void *)(*a1 + 8), a1[1]);
  sub_1B4C2B20C((uint64_t *)v15, *(_DWORD *)(v2 + 16), &__p);
  uint64_t v3 = a1[2];
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  int64_t v10 = 0;
  unint64_t v4 = __p;
  uint64_t v5 = v14 - (unsigned char *)__p;
  if (v14 == __p)
  {
    unint64_t v6 = 0;
  }
  else
  {
    if (v5 < 0) {
      sub_1B4C0E0BC();
    }
    unint64_t v6 = (char *)operator new(v14 - (unsigned char *)__p);
    int64_t v10 = v6;
    uint64_t v12 = &v6[8 * (v5 >> 3)];
    size_t v7 = v5 & 0xFFFFFFFFFFFFFFF8;
    memcpy(v6, v4, v7);
    uint64_t v11 = &v6[v7];
  }
  unint64_t v8 = sub_1B4C37298(v3, &v10);
  if (v6) {
    operator delete(v6);
  }
  if (__p)
  {
    uint64_t v14 = __p;
    operator delete(__p);
  }
  if (v15[0])
  {
    v15[1] = v15[0];
    operator delete(v15[0]);
  }
  return v8;
}

void sub_1B4C36378(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (v17) {
    operator delete(v17);
  }
  if (__p)
  {
    operator delete(__p);
    BOOL v19 = a16;
    if (!a16) {
LABEL_5:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    BOOL v19 = a16;
    if (!a16) {
      goto LABEL_5;
    }
  }
  operator delete(v19);
  _Unwind_Resume(exception_object);
}

void sub_1B4C363E4(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, char **a4@<X8>)
{
  uint64_t v4 = a1;
  *(_DWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  uint64_t v6 = *(int *)(a1 + 20);
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  uint64_t v78 = a4;
  uint64_t v77 = v6;
  if (!v6)
  {
    LODWORD(v83) = 3;
    goto LABEL_72;
  }
  uint64_t v8 = 0;
  do
  {
    int64_t v10 = *(unsigned char **)a2;
    uint64_t v9 = *(unsigned char **)(a2 + 8);
    unint64_t v93 = 0;
    uint64_t v94 = 0;
    uint64_t v95 = 0;
    int64_t v11 = v9 - v10;
    if (v9 != v10)
    {
      if (v11 < 0) {
        sub_1B4BB3244();
      }
      uint64_t v12 = (char *)operator new(v9 - v10);
      int v13 = &v12[4 * (v11 >> 2)];
      unint64_t v93 = v12;
      uint64_t v95 = v13;
      memcpy(v12, v10, v11);
      uint64_t v94 = v13;
    }
    sub_1B4C371B4((uint64_t)v88);
    uint64_t v85 = (void *)v4;
    uint64_t v86 = (void **)&v93;
    long long v87 = v88;
    int v14 = sub_1B4C36D14((uint64_t *)&v85);
    uint64_t v80 = v8;
    __p[0] = 0;
    __p[1] = 0;
    unint64_t v82 = 0;
    int64_t v15 = operator new(4uLL);
    unint64_t v16 = v15;
    *int64_t v15 = v14;
    unint64_t v17 = (char *)(v15 + 1);
    __p[1] = v15 + 1;
    unint64_t v82 = (char *)(v15 + 1);
    __p[0] = v15;
    if (a3 >= 2)
    {
      uint64_t v18 = v15 + 1;
      uint64_t v19 = 2;
      while (1)
      {
        uint64_t v21 = v94;
        if (v94 >= v95) {
          break;
        }
        *(_DWORD *)uint64_t v94 = *(v18 - 1);
        uint64_t v22 = (uint64_t)(v21 + 4);
LABEL_33:
        uint64_t v94 = (char *)v22;
        int v41 = sub_1B4C36D14((uint64_t *)&v85);
        int v42 = v41;
        if (v18 < (_DWORD *)v17)
        {
          *v18++ = v41;
          __p[1] = v18;
          BOOL v20 = v19++ == a3;
          if (v20) {
            goto LABEL_63;
          }
        }
        else
        {
          uint64_t v43 = ((char *)v18 - v16) >> 2;
          unint64_t v44 = v43 + 1;
          if ((unint64_t)(v43 + 1) >> 62) {
            sub_1B4BB3244();
          }
          if ((v17 - v16) >> 1 > v44) {
            unint64_t v44 = (v17 - v16) >> 1;
          }
          if ((unint64_t)(v17 - v16) >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v45 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v45 = v44;
          }
          if (v45)
          {
            if (v45 >> 62) {
              sub_1B4BB2D38();
            }
            uint64_t v46 = operator new(4 * v45);
            long long v47 = &v46[4 * v43];
            *long long v47 = v42;
            int64_t v48 = v47 + 1;
            int64_t v49 = (char *)v18 - v16;
            if (v18 == (_DWORD *)v16) {
              goto LABEL_48;
            }
          }
          else
          {
            uint64_t v46 = 0;
            long long v47 = (_DWORD *)(4 * v43);
            *(_DWORD *)(4 * v43) = v42;
            int64_t v48 = (void *)(4 * v43 + 4);
            int64_t v49 = (char *)v18 - v16;
            if (v18 == (_DWORD *)v16) {
              goto LABEL_48;
            }
          }
          unint64_t v50 = v49 - 4;
          if (v50 >= 0xBC)
          {
            unint64_t v53 = ((char *)(v18 - 1) - v16) & 0xFFFFFFFFFFFFFFFCLL;
            if (&v46[(char *)v18 - v16 - 4 - v53] > &v46[(char *)v18 - v16 - 4])
            {
              int v51 = v18;
            }
            else if ((_DWORD *)((char *)v18 - v53 - 4) > v18 - 1)
            {
              int v51 = v18;
            }
            else if ((unint64_t)(v16 - v46) >= 0x20)
            {
              uint64_t v54 = (v50 >> 2) + 1;
              uint64_t v55 = 4 * (v54 & 0x7FFFFFFFFFFFFFF8);
              int v51 = &v18[v55 / 0xFFFFFFFFFFFFFFFCLL];
              long long v47 = (_DWORD *)((char *)v47 - v55);
              unint64_t v56 = &v46[4 * v43 - 16];
              uint64_t v57 = (long long *)(v18 - 4);
              uint64_t v58 = v54 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                long long v59 = *v57;
                *(v56 - 1) = *(v57 - 1);
                *unint64_t v56 = v59;
                v56 -= 2;
                v57 -= 2;
                v58 -= 8;
              }
              while (v58);
              if (v54 == (v54 & 0x7FFFFFFFFFFFFFF8)) {
                goto LABEL_48;
              }
            }
            else
            {
              int v51 = v18;
            }
          }
          else
          {
            int v51 = v18;
          }
          do
          {
            int v52 = *--v51;
            *--long long v47 = v52;
          }
          while (v51 != (_DWORD *)v16);
LABEL_48:
          unint64_t v17 = &v46[4 * v45];
          __p[0] = v47;
          unint64_t v82 = v17;
          if (v16) {
            operator delete(v16);
          }
          unint64_t v16 = v47;
          __p[1] = v48;
          uint64_t v18 = v48;
          BOOL v20 = v19++ == a3;
          if (v20) {
            goto LABEL_63;
          }
        }
      }
      uint64_t v23 = v93;
      uint64_t v24 = (v94 - v93) >> 2;
      unint64_t v25 = v24 + 1;
      if ((unint64_t)(v24 + 1) >> 62) {
        sub_1B4BB3244();
      }
      uint64_t v26 = v95 - v93;
      if ((v95 - v93) >> 1 > v25) {
        unint64_t v25 = v26 >> 1;
      }
      if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v27 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v27 = v25;
      }
      if (v27)
      {
        if (v27 >> 62) {
          sub_1B4BB2D38();
        }
        unint64_t v28 = v27;
        uint64_t v29 = operator new(4 * v27);
        unint64_t v27 = v28;
        int64_t v30 = &v29[4 * v24];
        *(_DWORD *)int64_t v30 = *(v18 - 1);
        uint64_t v22 = (uint64_t)(v30 + 4);
        int64_t v31 = v21 - v23;
        if (v21 == v23) {
          goto LABEL_31;
        }
      }
      else
      {
        uint64_t v29 = 0;
        int64_t v30 = (char *)(4 * v24);
        *(_DWORD *)(4 * v24) = *(v18 - 1);
        uint64_t v22 = 4 * v24 + 4;
        int64_t v31 = v21 - v23;
        if (v21 == v23)
        {
LABEL_31:
          unint64_t v93 = v30;
          uint64_t v94 = (char *)v22;
          uint64_t v95 = &v29[4 * v27];
          if (v23) {
            operator delete(v23);
          }
          goto LABEL_33;
        }
      }
      unint64_t v32 = v31 - 4;
      if (v32 < 0x2C) {
        goto LABEL_106;
      }
      if ((unint64_t)(v23 - v29) < 0x20) {
        goto LABEL_106;
      }
      uint64_t v33 = (v32 >> 2) + 1;
      uint64_t v34 = 4 * (v33 & 0x7FFFFFFFFFFFFFF8);
      unint64_t v35 = &v21[-v34];
      v30 -= v34;
      __n128 v36 = &v29[4 * v24 - 16];
      uint64_t v37 = v21 - 16;
      uint64_t v38 = v33 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v39 = *(_OWORD *)v37;
        *(v36 - 1) = *((_OWORD *)v37 - 1);
        _OWORD *v36 = v39;
        v36 -= 2;
        v37 -= 32;
        v38 -= 8;
      }
      while (v38);
      uint64_t v21 = v35;
      if (v33 != (v33 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_106:
        do
        {
          int v40 = *((_DWORD *)v21 - 1);
          v21 -= 4;
          *((_DWORD *)v30 - 1) = v40;
          v30 -= 4;
        }
        while (v21 != v23);
      }
      goto LABEL_31;
    }
LABEL_63:
    std::random_device::~random_device(v88);
    if (v93)
    {
      uint64_t v94 = v93;
      operator delete(v93);
    }
    uint64_t v60 = v78[1];
    uint64_t v4 = a1;
    if (v60 < v78[2])
    {
      *(void *)uint64_t v60 = 0;
      *((void *)v60 + 1) = 0;
      *((void *)v60 + 2) = 0;
      *(_OWORD *)uint64_t v60 = *(_OWORD *)__p;
      *((void *)v60 + 2) = v82;
      v78[1] = v60 + 24;
    }
    else
    {
      unint64_t v61 = sub_1B4C2B938(v78, (uint64_t)__p);
      unint64_t v62 = __p[0];
      v78[1] = v61;
      if (v62)
      {
        __p[1] = v62;
        operator delete(v62);
      }
    }
    uint64_t v8 = v80 + 1;
  }
  while (v80 + 1 != v77);
  int v63 = *(_DWORD *)(a1 + 24);
  uint64_t v64 = *(void *)(a1 + 40);
  double v65 = *(double *)(a1 + 56);
  LODWORD(v83) = 3;
  if (v63 <= 0)
  {
LABEL_72:
    *(void *)&v88[0].__padding_ = 0;
    double v66 = 0.0;
    goto LABEL_74;
  }
  *(void *)&v88[0].__padding_ = v64;
  if (v63 == 1) {
    double v66 = 0.0;
  }
  else {
    double v66 = v65 / (double)(v63 - 1);
  }
LABEL_74:
  __p[0] = COERCE_VOID_(sqrt(v66));
  sub_1B4C3769C((uint64_t)&v85, (int *)&v83);
  int v67 = *(_DWORD *)(v4 + 64);
  uint64_t v68 = *(void *)(v4 + 80);
  double v69 = *(double *)(v4 + 96);
  int v84 = 3;
  if (v67 <= 0)
  {
    *(void *)&v88[0].__padding_ = 0;
    double v70 = 0.0;
  }
  else
  {
    *(void *)&v88[0].__padding_ = v68;
    double v70 = 0.0;
    int v71 = v67 - 1;
    if (v71) {
      double v70 = v69 / (double)v71;
    }
  }
  double v83 = sqrt(v70);
  sub_1B4C3769C((uint64_t)__p, &v84);
  sub_1B4BB2204((uint64_t)v88);
  sub_1B4BB34F0(v88, (uint64_t)"[p=", 3);
  std::ostream::operator<<();
  sub_1B4BB34F0(v88, (uint64_t)"] Avg vocab subset size over ", 29);
  std::ostream::operator<<();
  sub_1B4BB34F0(v88, (uint64_t)" samples: ", 10);
  if (SHIBYTE(v87) >= 0) {
    CFTypeRef v72 = &v85;
  }
  else {
    CFTypeRef v72 = v85;
  }
  if (SHIBYTE(v87) >= 0) {
    uint64_t v73 = HIBYTE(v87);
  }
  else {
    uint64_t v73 = (uint64_t)v86;
  }
  sub_1B4BB34F0(v88, (uint64_t)v72, v73);
  sub_1B4BB34F0(v88, (uint64_t)"; numRetries: ", 14);
  if (SHIBYTE(v82) >= 0) {
    uint64_t v74 = __p;
  }
  else {
    uint64_t v74 = (void **)__p[0];
  }
  if (SHIBYTE(v82) >= 0) {
    uint64_t v75 = HIBYTE(v82);
  }
  else {
    uint64_t v75 = (uint64_t)__p[1];
  }
  sub_1B4BB34F0(v88, (uint64_t)v74, v75);
  std::stringbuf::str();
  *(void *)&v88[0].__padding_ = *MEMORY[0x1E4FBA418];
  *(void *)((char *)&v88[0].__padding_ + *(void *)(*(void *)&v88[0].__padding_ - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  uint64_t v89 = MEMORY[0x1E4FBA470] + 16;
  if (v91 < 0) {
    operator delete(v90);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1BA992920](&v92);
  if (SHIBYTE(v82) < 0)
  {
    operator delete(__p[0]);
    if (SHIBYTE(v87) < 0) {
      goto LABEL_97;
    }
LABEL_94:
    if (SHIBYTE(v95) < 0) {
LABEL_98:
    }
      operator delete(v93);
  }
  else
  {
    if ((SHIBYTE(v87) & 0x80000000) == 0) {
      goto LABEL_94;
    }
LABEL_97:
    operator delete(v85);
    if (SHIBYTE(v95) < 0) {
      goto LABEL_98;
    }
  }
}

void sub_1B4C36B84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29)
{
  if (a20 < 0)
  {
    operator delete(__p);
    if ((a28 & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((a28 & 0x80000000) == 0)
  {
LABEL_3:
    sub_1B4C07820(a12);
    _Unwind_Resume(a1);
  }
  operator delete(a23);
  sub_1B4C07820(a12);
  _Unwind_Resume(a1);
}

void sub_1B4C36C08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::random_device a23)
{
  if (__p) {
    operator delete(__p);
  }
  uint64_t v24 = (char *)*a12;
  if (!*a12) {
    _Unwind_Resume(exception_object);
  }
  unint64_t v25 = (char *)a12[1];
  uint64_t v26 = *a12;
  if (v25 != v24)
  {
    unint64_t v27 = (char *)a12[1];
    do
    {
      uint64_t v29 = (void *)*((void *)v27 - 3);
      v27 -= 24;
      unint64_t v28 = v29;
      if (v29)
      {
        *((void *)v25 - 2) = v28;
        operator delete(v28);
      }
      unint64_t v25 = v27;
    }
    while (v27 != v24);
    uint64_t v26 = *a12;
  }
  a12[1] = v24;
  operator delete(v26);
  _Unwind_Resume(exception_object);
}

unint64_t sub_1B4C36D14(uint64_t *a1)
{
  uint64_t v2 = *a1;
  sub_1B4C35790((__n128 **)&__p, *(void *)(*a1 + 8), a1[1]);
  int v3 = (int)((double)(unint64_t)((v37 - (unsigned char *)__p) >> 2) * 0.1);
  sub_1B4C3784C((uint64_t)&v33, (uint64_t *)&__p, v2, v3);
  uint64_t v5 = v34;
  uint64_t v4 = v35;
  double v6 = 0.0;
  if (v33 < *(float *)(v2 + 16) && v3 < (unint64_t)((v37 - (unsigned char *)__p) >> 2))
  {
    int v7 = 1;
    do
    {
      int v8 = v7;
      v3 *= 2;
      sub_1B4C3784C((uint64_t)&v33, (uint64_t *)&__p, v2, v3);
      float v9 = v33;
      if (v5) {
        operator delete(v5);
      }
      uint64_t v5 = v34;
      uint64_t v4 = v35;
      if (v9 >= *(float *)(v2 + 16)) {
        break;
      }
      int v7 = v8 + 1;
    }
    while (v3 < (unint64_t)((v37 - (unsigned char *)__p) >> 2));
    double v6 = (double)v8;
  }
  int v10 = *(_DWORD *)(v2 + 64);
  *(_DWORD *)(v2 + 64) = v10 + 1;
  if (v10)
  {
    double v11 = *(double *)(v2 + 72);
    double v12 = v6 - v11;
    double v13 = (v6 - v11) / (double)(v10 + 1) + v11;
    double v14 = *(double *)(v2 + 88);
    *(double *)(v2 + 72) = v13;
    *(double *)(v2 + 80) = v13;
    double v15 = v14 + (v6 - v13) * v12;
    *(double *)(v2 + 88) = v15;
    *(double *)(v2 + 96) = v15;
  }
  else
  {
    *(double *)(v2 + 72) = v6;
    *(double *)(v2 + 80) = v6;
    *(void *)(v2 + 88) = 0;
  }
  int64_t v16 = v4 - v5;
  uint64_t v17 = (v4 - v5) >> 3;
  double v18 = (double)(unint64_t)v17;
  int v19 = *(_DWORD *)(v2 + 24);
  *(_DWORD *)(v2 + 24) = v19 + 1;
  if (!v19)
  {
    *(double *)(v2 + 32) = v18;
    *(double *)(v2 + 40) = v18;
    *(void *)(v2 + 48) = 0;
    uint64_t v25 = a1[2];
    int64_t v31 = 0;
    unint64_t v32 = 0;
    int64_t v30 = 0;
    if (v4 != v5) {
      goto LABEL_14;
    }
LABEL_17:
    uint64_t v26 = 0;
    goto LABEL_18;
  }
  double v20 = *(double *)(v2 + 32);
  double v21 = v18 - v20;
  double v22 = (v18 - v20) / (double)(v19 + 1) + v20;
  double v23 = *(double *)(v2 + 48);
  *(double *)(v2 + 32) = v22;
  *(double *)(v2 + 40) = v22;
  double v24 = v23 + (v18 - v22) * v21;
  *(double *)(v2 + 48) = v24;
  *(double *)(v2 + 56) = v24;
  uint64_t v25 = a1[2];
  int64_t v31 = 0;
  unint64_t v32 = 0;
  int64_t v30 = 0;
  if (v4 == v5) {
    goto LABEL_17;
  }
LABEL_14:
  if (v16 < 0) {
    sub_1B4C0E0BC();
  }
  uint64_t v26 = (char *)operator new(v4 - v5);
  int64_t v30 = v26;
  unint64_t v32 = &v26[8 * v17];
  size_t v27 = v16 & 0xFFFFFFFFFFFFFFF8;
  memcpy(v26, v5, v27);
  int64_t v31 = &v26[v27];
LABEL_18:
  unint64_t v28 = sub_1B4C37298(v25, &v30);
  if (v26) {
    operator delete(v26);
  }
  if (v5) {
    operator delete(v5);
  }
  if (__p)
  {
    uint64_t v37 = __p;
    operator delete(__p);
  }
  return v28;
}

void sub_1B4C36F5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (v18) {
    operator delete(v18);
  }
  if (v17)
  {
    operator delete(v17);
    double v20 = __p;
    if (!__p) {
LABEL_5:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    double v20 = __p;
    if (!__p) {
      goto LABEL_5;
    }
  }
  operator delete(v20);
  _Unwind_Resume(exception_object);
}

void sub_1B4C36FD4()
{
}

void sub_1B4C36FEC()
{
}

void sub_1B4C37004()
{
}

void sub_1B4C3701C()
{
}

BOOL sub_1B4C37030(uint64_t *a1, char *__s)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  size_t v6 = strlen(__s);
  if (v6 >= 0x7FFFFFFFFFFFFFF8) {
    sub_1B4BB33D8();
  }
  size_t v7 = v6;
  if (v6 >= 0x17)
  {
    uint64_t v10 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v10 = v6 | 7;
    }
    uint64_t v11 = v10 + 1;
    int v8 = (void **)operator new(v10 + 1);
    size_t v20 = v7;
    unint64_t v21 = v11 | 0x8000000000000000;
    __dst = v8;
LABEL_9:
    memcpy(v8, __s, v7);
    *((unsigned char *)v8 + v7) = 0;
    size_t v9 = HIBYTE(v21);
    if (v4 == v5) {
      goto LABEL_27;
    }
LABEL_10:
    if ((v9 & 0x80u) == 0) {
      size_t v12 = v9;
    }
    else {
      size_t v12 = v20;
    }
    if ((v9 & 0x80u) == 0) {
      p_dst = (void **)&__dst;
    }
    else {
      p_dst = __dst;
    }
    do
    {
      uint64_t v14 = *(unsigned __int8 *)(v4 + 23);
      if ((v14 & 0x80u) == 0) {
        uint64_t v15 = *(unsigned __int8 *)(v4 + 23);
      }
      else {
        uint64_t v15 = *(void *)(v4 + 8);
      }
      if (v15 == v12)
      {
        if ((v14 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)v4, p_dst, *(void *)(v4 + 8))) {
            goto LABEL_27;
          }
        }
        else
        {
          if (!*(unsigned char *)(v4 + 23)) {
            goto LABEL_27;
          }
          uint64_t v16 = 0;
          while (*(unsigned __int8 *)(v4 + v16) == *((unsigned __int8 *)p_dst + v16))
          {
            if (v14 == ++v16) {
              goto LABEL_27;
            }
          }
        }
      }
      v4 += 24;
    }
    while (v4 != v5);
    uint64_t v4 = v5;
    uint64_t v17 = a1[1];
    if ((v9 & 0x80) != 0) {
      goto LABEL_28;
    }
    return v4 != v17;
  }
  HIBYTE(v21) = v6;
  int v8 = (void **)&__dst;
  if (v6) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  size_t v9 = HIBYTE(v21);
  if (v4 != v5) {
    goto LABEL_10;
  }
LABEL_27:
  uint64_t v17 = a1[1];
  if ((v9 & 0x80) != 0) {
LABEL_28:
  }
    operator delete(__dst);
  return v4 != v17;
}

uint64_t sub_1B4C371B4(uint64_t a1)
{
  *((unsigned char *)&__token.__r_.__value_.__s + 23) = 12;
  strcpy((char *)&__token, "/dev/urandom");
  std::random_device::random_device((std::random_device *)a1, &__token);
  if (SHIBYTE(__token.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__token.__r_.__value_.__l.__data_);
  }
  unsigned int v2 = MEMORY[0x1BA9927F0](a1);
  *(_DWORD *)(a1 + 8) = v2;
  uint64_t v3 = 1;
  for (uint64_t i = 3; i != 626; ++i)
  {
    int v5 = 1812433253 * (v2 ^ (v2 >> 30));
    unsigned int v2 = v5 + v3;
    *(_DWORD *)(a1 + 4 * i) = i + v5 - 2;
    ++v3;
  }
  *(void *)(a1 + 2504) = 0;
  return a1;
}

void sub_1B4C37268(_Unwind_Exception *a1)
{
  std::random_device::~random_device(v1);
  _Unwind_Resume(a1);
}

void sub_1B4C3727C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_1B4C37298(uint64_t a1, void *a2)
{
  unsigned int v2 = a2;
  int v5 = (const void *)*a2;
  uint64_t v4 = a2[1];
  size_t v6 = (float *)(v4 - *a2);
  if (v4 == *a2)
  {
    uint64_t v10 = 0;
    float v33 = 0;
    goto LABEL_41;
  }
  if (((unint64_t)v6 & 0x8000000000000000) != 0) {
    sub_1B4C0E0BC();
  }
  size_t v7 = (char *)operator new(v4 - *a2);
  unint64_t v8 = (unint64_t)v6 & 0xFFFFFFFFFFFFFFF8;
  memcpy(v7, v5, (unint64_t)v6 & 0xFFFFFFFFFFFFFFF8);
  if (((unint64_t)v6 & 0xFFFFFFFFFFFFFFF8) == 0)
  {
    uint64_t v10 = 0;
    operator delete(v7);
    goto LABEL_40;
  }
  uint64_t v37 = a1;
  uint64_t v38 = v2;
  size_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  size_t v12 = &v7[v8];
  std::__fs::filesystem::path __p = v7;
  int v40 = &v7[v8];
  double v13 = v7;
  do
  {
    while (1)
    {
      int v15 = *(_DWORD *)v13;
      if (v9 >= v11) {
        break;
      }
      *(_DWORD *)size_t v9 = v15;
      v9 += 4;
      uint64_t v14 = (uint64_t)v9;
      v13 += 8;
      if (v13 == v12) {
        goto LABEL_35;
      }
    }
    uint64_t v16 = (v9 - v10) >> 2;
    unint64_t v17 = v16 + 1;
    if ((unint64_t)(v16 + 1) >> 62) {
      sub_1B4BB3244();
    }
    if ((v11 - v10) >> 1 > v17) {
      unint64_t v17 = (v11 - v10) >> 1;
    }
    if ((unint64_t)(v11 - v10) >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v18 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v17;
    }
    if (v18)
    {
      if (v18 >> 62) {
        sub_1B4BB2D38();
      }
      int v19 = operator new(4 * v18);
      size_t v20 = &v19[4 * v16];
      *(_DWORD *)size_t v20 = v15;
      uint64_t v14 = (uint64_t)(v20 + 4);
      int64_t v21 = v9 - v10;
      if (v9 == v10) {
        goto LABEL_21;
      }
    }
    else
    {
      int v19 = 0;
      size_t v20 = (char *)(4 * v16);
      *(_DWORD *)(4 * v16) = v15;
      uint64_t v14 = 4 * v16 + 4;
      int64_t v21 = v9 - v10;
      if (v9 == v10) {
        goto LABEL_21;
      }
    }
    unint64_t v22 = v21 - 4;
    if (v22 < 0xBC)
    {
      double v23 = v9;
      goto LABEL_20;
    }
    unint64_t v25 = (v9 - 4 - v10) & 0xFFFFFFFFFFFFFFFCLL;
    if (&v19[v9 - v10 - 4 - v25] > &v19[v9 - v10 - 4])
    {
      double v23 = v9;
      do
      {
LABEL_20:
        int v24 = *((_DWORD *)v23 - 1);
        v23 -= 4;
        *((_DWORD *)v20 - 1) = v24;
        v20 -= 4;
      }
      while (v23 != v10);
      goto LABEL_21;
    }
    if (&v9[-v25 - 4] > v9 - 4)
    {
      double v23 = v9;
      goto LABEL_20;
    }
    if ((unint64_t)(v10 - v19) < 0x20)
    {
      double v23 = v9;
      goto LABEL_20;
    }
    uint64_t v26 = (v22 >> 2) + 1;
    uint64_t v27 = 4 * (v26 & 0x7FFFFFFFFFFFFFF8);
    double v23 = &v9[-v27];
    v20 -= v27;
    unint64_t v28 = &v19[4 * v16 - 16];
    uint64_t v29 = v9 - 16;
    uint64_t v30 = v26 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v31 = *(_OWORD *)v29;
      *(v28 - 1) = *((_OWORD *)v29 - 1);
      *unint64_t v28 = v31;
      v28 -= 2;
      v29 -= 32;
      v30 -= 8;
    }
    while (v30);
    if (v26 != (v26 & 0x7FFFFFFFFFFFFFF8)) {
      goto LABEL_20;
    }
LABEL_21:
    uint64_t v11 = &v19[4 * v18];
    if (v10) {
      operator delete(v10);
    }
    uint64_t v10 = v20;
    size_t v12 = v40;
    v13 += 8;
    size_t v9 = (char *)v14;
  }
  while (v13 != v40);
LABEL_35:
  a1 = v37;
  unsigned int v2 = v38;
  operator delete(__p);
  int64_t v32 = v14 - (void)v10;
  if ((char *)v14 == v10)
  {
LABEL_40:
    size_t v6 = 0;
    float v33 = 0;
    goto LABEL_41;
  }
  if (v32 < 0) {
    sub_1B4BB3244();
  }
  float v33 = (char *)operator new(v32);
  size_t v6 = (float *)&v33[4 * (v32 >> 2)];
  memcpy(v33, v10, v32);
LABEL_41:
  sub_1B4BCB35C((uint64_t)v41, (float *)v33, v6);
  int v34 = sub_1B4BCB6C0((uint64_t)v41, a1 + 8, (double **)v41);
  if (v41[0])
  {
    v41[1] = v41[0];
    operator delete(v41[0]);
  }
  if (v33) {
    operator delete(v33);
  }
  unint64_t v35 = *(void *)(*v2 + 8 * v34);
  if (v10) {
    operator delete(v10);
  }
  return HIDWORD(v35);
}

void sub_1B4C37600(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23)
{
  if (__p)
  {
    operator delete(__p);
    double v23 = a19;
  }
  if (v23) {
    operator delete(v23);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1B4C3769C(uint64_t a1, int *a2)
{
  sub_1B4BB2204((uint64_t)v4);
  *(void *)((char *)&v4[2] + *(void *)(v4[0] - 24)) = *a2;
  std::ostream::operator<<();
  sub_1B4BB34F0(v4, (uint64_t)" ± ", 4);
  std::ostream::operator<<();
  std::stringbuf::str();
  v4[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v4 + *(void *)(v4[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v4[1] = MEMORY[0x1E4FBA470] + 16;
  if (v5 < 0) {
    operator delete((void *)v4[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1BA992920](&v6);
}

void sub_1B4C37824(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1B4BC8450((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1B4C37838(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1B4BC8450((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1B4C3784C(uint64_t a1, uint64_t *a2, uint64_t a3, int a4)
{
  sub_1B4C2B20C(a2, a4, &__p);
  int64_t v32 = 0;
  uint64_t v6 = (float *)__p;
  size_t v7 = v34;
  if (__p == v34)
  {
    *(_DWORD *)a1 = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 8) = 0;
    goto LABEL_41;
  }
  unint64_t v8 = 0;
  size_t v9 = 0;
  uint64_t v10 = 0;
  float v11 = 0.0;
  while (v11 < *(float *)(a3 + 16) || v10 == v9)
  {
    float v13 = *v6;
    if (v9 < v8)
    {
      float *v9 = v13;
      v9[1] = v6[1];
      v9 += 2;
      float v11 = v13 + v11;
      v6 += 2;
      if (v6 == v7) {
        goto LABEL_35;
      }
    }
    else
    {
      int64_t v14 = (char *)v9 - (char *)v10;
      uint64_t v15 = ((char *)v9 - (char *)v10) >> 3;
      unint64_t v16 = v15 + 1;
      if ((unint64_t)(v15 + 1) >> 61) {
        sub_1B4C0E0BC();
      }
      if (v8 - v10 > v16) {
        unint64_t v16 = v8 - v10;
      }
      if ((unint64_t)((char *)v8 - (char *)v10) >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v17 = v16;
      }
      if (v17 >> 61) {
        sub_1B4BB2D38();
      }
      unint64_t v18 = operator new(8 * v17);
      int v19 = (float *)&v18[8 * v15];
      *int v19 = v13;
      v19[1] = v6[1];
      if (v10 == v9)
      {
        int64_t v21 = &v18[8 * v15];
        unint64_t v8 = (float *)&v18[8 * v17];
        size_t v9 = v19 + 2;
        int64_t v32 = (float *)v21;
        if (!v10) {
          goto LABEL_23;
        }
LABEL_22:
        operator delete(v10);
        goto LABEL_23;
      }
      if ((unint64_t)(v14 - 8) < 0x168
        || (unint64_t v23 = ((char *)(v9 - 2) - (char *)v10) & 0xFFFFFFFFFFFFFFF8, &v18[v14 - 8 - v23] > &v18[v14 - 8])
        || (float *)((char *)v9 - v23 - 8) > v9 - 2
        || (unint64_t)((char *)v10 - v18) < 0x20)
      {
        size_t v20 = v9;
        int64_t v21 = &v18[8 * v15];
        do
        {
LABEL_20:
          uint64_t v22 = *((void *)v20 - 1);
          v20 -= 2;
          *((void *)v21 - 1) = v22;
          v21 -= 8;
        }
        while (v20 != v10);
        goto LABEL_21;
      }
      unint64_t v24 = ((unint64_t)(v14 - 8) >> 3) + 1;
      uint64_t v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
      size_t v20 = &v9[v25 / 0xFFFFFFFFFFFFFFFCLL];
      int64_t v21 = (char *)&v19[v25 / 0xFFFFFFFFFFFFFFFCLL];
      uint64_t v26 = &v18[8 * v15 - 16];
      uint64_t v27 = v9 - 4;
      uint64_t v28 = v24 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *uint64_t v26 = v29;
        v26 -= 2;
        v27 -= 8;
        v28 -= 4;
      }
      while (v28);
      if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_20;
      }
LABEL_21:
      unint64_t v8 = (float *)&v18[8 * v17];
      size_t v9 = v19 + 2;
      int64_t v32 = (float *)v21;
      if (v10) {
        goto LABEL_22;
      }
LABEL_23:
      uint64_t v10 = (float *)v21;
      float v11 = v13 + v11;
      v6 += 2;
      if (v6 == v7)
      {
LABEL_35:
        uint64_t v10 = v32;
        break;
      }
    }
  }
  *(float *)a1 = v11;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  uint64_t v30 = (char *)v9 - (char *)v10;
  if (v9 != v10)
  {
    if (v30 < 0) {
      sub_1B4C0E0BC();
    }
    long long v31 = (char *)operator new((char *)v9 - (char *)v10);
    *(void *)(a1 + 8) = v31;
    *(void *)(a1 + 24) = &v31[8 * (v30 >> 3)];
    memcpy(v31, v10, v30 & 0xFFFFFFFFFFFFFFF8);
    *(void *)(a1 + 16) = &v31[v30 & 0xFFFFFFFFFFFFFFF8];
  }
  if (v10) {
    operator delete(v10);
  }
LABEL_41:
  if (__p)
  {
    int v34 = (float *)__p;
    operator delete(__p);
  }
}

void sub_1B4C37B18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  unint64_t v16 = v15;
  unint64_t v18 = *v16;
  if (*v16)
  {
    *(void *)(v14 + 16) = v18;
    operator delete(v18);
    if (!v13)
    {
LABEL_3:
      int v19 = __p;
      if (!__p) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else if (!v13)
  {
    goto LABEL_3;
  }
  operator delete(v13);
  int v19 = __p;
  if (!__p) {
LABEL_4:
  }
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(v19);
  _Unwind_Resume(exception_object);
}

void sub_1B4C37B88(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  unint64_t v8 = *(uint32x4_t **)a2;
  uint64_t v9 = *(void *)(a2 + 8);
  LOBYTE(v17) = 0;
  int v10 = *(unsigned __int8 *)(a3 + 8);
  if (*(unsigned char *)(a3 + 8))
  {
    CFTypeRef v11 = *(CFTypeRef *)a3;
    if (*(void *)a3)
    {
      CFRetain(*(CFTypeRef *)a3);
      CFTypeRef v17 = v11;
      char v19 = 0;
      CFRetain(v11);
    }
    else
    {
      CFTypeRef v17 = 0;
      char v19 = 0;
    }
    CFTypeRef cf = v11;
    char v19 = 1;
  }
  else
  {
    LOBYTE(cf) = 0;
    char v19 = 0;
  }
  unint64_t v12 = (v9 - (uint64_t)v8) >> 2;
  sub_1B4C37CF8(a1, v8, (uint64_t *)v12, (uint64_t)&cf);
  if (v19 && cf) {
    CFRelease(cf);
  }
  uint64_t OutputDimension = MRLNeuralNetworkGetOutputDimension();
  uint64_t Output = MRLNeuralNetworkGetOutput();
  if (v12 <= 1) {
    uint64_t v15 = 1;
  }
  else {
    uint64_t v15 = v12;
  }
  if (a4 == 1) {
    uint64_t v16 = v15;
  }
  else {
    uint64_t v16 = OutputDimension;
  }
  *(_DWORD *)a5 = a4;
  if (a4 == 1) {
    uint64_t v15 = OutputDimension;
  }
  *(void *)(a5 + 8) = v15;
  *(void *)(a5 + 16) = v16;
  *(void *)(a5 + 24) = Output;
  if (v10)
  {
    if (v17) {
      CFRelease(v17);
    }
  }
}

void sub_1B4C37CC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_1B4C37CE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B4C37CF8(uint64_t a1, uint32x4_t *a2, uint64_t *a3, uint64_t a4)
{
  char v22 = 5;
  strcpy((char *)__p, "input");
  sub_1B4C37FF4(a1, a2, a3, (uint64_t)__p);
  if (v22 < 0)
  {
    operator delete(__p[0]);
    size_t v7 = (uint64_t *)(a1 + 8);
    if (!sub_1B4C37030((uint64_t *)(a1 + 8), "position")) {
      goto LABEL_17;
    }
  }
  else
  {
    size_t v7 = (uint64_t *)(a1 + 8);
    if (!sub_1B4C37030((uint64_t *)(a1 + 8), "position")) {
      goto LABEL_17;
    }
  }
  __p[0] = (void *)((void)a3 << 32);
  LODWORD(__p[1]) = 1;
  unsigned int v8 = a3;
  if (a3)
  {
    uint64_t v9 = (char *)operator new(((4 * *(uint64_t *)((char *)__p + 4) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
    int v10 = (uint32x4_t *)v9;
    if (v8 >= 8uLL)
    {
      unint64_t v11 = v8 - (unint64_t)(v8 & 7);
      unint64_t v12 = &v9[4 * v11];
      int32x4_t v13 = (int32x4_t)xmmword_1B4C9AEE0;
      uint64_t v14 = (int32x4_t *)(v9 + 16);
      v15.i64[0] = 0x400000004;
      v15.i64[1] = 0x400000004;
      v16.i64[0] = 0x800000008;
      v16.i64[1] = 0x800000008;
      unint64_t v17 = v11;
      do
      {
        v14[-1] = v13;
        *uint64_t v14 = vaddq_s32(v13, v15);
        int32x4_t v13 = vaddq_s32(v13, v16);
        v14 += 2;
        v17 -= 8;
      }
      while (v17);
      if ((v8 & 7) == 0) {
        goto LABEL_13;
      }
    }
    else
    {
      LODWORD(v11) = 0;
      unint64_t v12 = v9;
    }
    do
    {
      *(_DWORD *)unint64_t v12 = v11;
      v12 += 4;
      LODWORD(v11) = v11 + 1;
    }
    while (v8 != v11);
  }
  else
  {
    unint64_t v12 = 0;
    int v10 = 0;
  }
LABEL_13:
  char v22 = 8;
  strcpy((char *)__p, "position");
  sub_1B4C37FF4(a1, v10, (uint64_t *)((v12 - (char *)v10) >> 2), (uint64_t)__p);
  if (v22 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    operator delete(v10);
  }
LABEL_17:
  if (sub_1B4C37030(v7, "temperature"))
  {
    int v18 = *(_DWORD *)(a1 + 120);
    char v19 = operator new(4uLL);
    *char v19 = v18;
    char v22 = 11;
    strcpy((char *)__p, "temperature");
    sub_1B4C3967C(a1, v19, (uint64_t *)1, (uint64_t)__p);
    if (v22 < 0) {
      operator delete(__p[0]);
    }
    operator delete(v19);
  }
  __p[0] = 0;
  if (*(unsigned char *)(a4 + 8) && (size_t v20 = *(const void **)a4) != 0)
  {
    CFRetain(v20);
    MRLNeuralNetworkPredict();
  }
  else
  {
    MRLNeuralNetworkPredict();
    size_t v20 = 0;
  }
  sub_1B4C59698(a1);
  if (v20) {
    CFRelease(v20);
  }
}

void sub_1B4C37F7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  operator delete(v15);
  _Unwind_Resume(a1);
}

void sub_1B4C37FD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10)
{
}

void sub_1B4C37FF4(uint64_t a1, uint32x4_t *a2, uint64_t *a3, uint64_t a4)
{
  sub_1B4C381C0(a1, a2, a3, (long long *)a4);
  int32x4_t v13 = (long long *)a4;
  sub_1B4C385B4((uint64_t **)(a1 + 56), (const void **)a4, (uint64_t)&unk_1B4C9AE0A, &v13);
  size_t v7 = (uint64_t *)sub_1B4C3833C(a1, (uint64_t)a3);
  int32x4_t v13 = (long long *)a4;
  sub_1B4C394DC((uint64_t **)(a1 + 80), (const void **)a4, (uint64_t)&unk_1B4C9AE0A, &v13)[7] = v7;
  int32x4_t v13 = (long long *)a4;
  sub_1B4C394DC((uint64_t **)(a1 + 80), (const void **)a4, (uint64_t)&unk_1B4C9AE0A, &v13);
  MRLNeuralNetworkTensorAppendData();
  char v8 = *(unsigned char *)(a4 + 23);
  if (v8 >= 0) {
    uint64_t v9 = (const UInt8 *)a4;
  }
  else {
    uint64_t v9 = *(const UInt8 **)a4;
  }
  if (v9)
  {
    if (v8 >= 0) {
      CFIndex v10 = *(unsigned __int8 *)(a4 + 23);
    }
    else {
      CFIndex v10 = *(void *)(a4 + 8);
    }
    CFStringRef v11 = CFStringCreateWithBytes(0, v9, v10, 0x8000100u, 0);
    if (!v11)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
  }
  else
  {
    CFStringRef v11 = 0;
  }
  int32x4_t v13 = (long long *)a4;
  sub_1B4C394DC((uint64_t **)(a1 + 80), (const void **)a4, (uint64_t)&unk_1B4C9AE0A, &v13);
  MRLNeuralNetworkSetInputTensor();
  if (v11) {
    CFRelease(v11);
  }
}

void sub_1B4C38194(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1B4C381AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1B4C31674((const void **)va);
  _Unwind_Resume(a1);
}

void sub_1B4C381C0(uint64_t a1, uint32x4_t *a2, uint64_t *a3, long long *a4)
{
  char v5 = a3;
  if (a3)
  {
    if ((unint64_t)a3 >> 62) {
      sub_1B4BB3244();
    }
    uint64_t v8 = 4 * (void)a3;
    uint64_t v9 = (float32x4_t *)operator new(4 * (void)a3);
    bzero(v9, 4 * (void)v5);
    unint64_t v10 = ((unint64_t)v5 - 1) & 0x3FFFFFFFFFFFFFFFLL;
    CFStringRef v11 = (unsigned int *)a2;
    unint64_t v12 = (float *)v9;
    if (v10 < 7) {
      goto LABEL_16;
    }
    unint64_t v13 = v10 + 1;
    uint64_t v14 = v13 & 0x7FFFFFFFFFFFFFF8;
    CFStringRef v11 = &a2->u32[v14];
    unint64_t v12 = &v9->f32[v14];
    int32x4_t v15 = v9 + 1;
    int32x4_t v16 = a2 + 1;
    uint64_t v17 = v13 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      float32x4_t v18 = vcvtq_f32_u32(*v16);
      v15[-1] = vcvtq_f32_u32(v16[-1]);
      *int32x4_t v15 = v18;
      v15 += 2;
      v16 += 2;
      v17 -= 8;
    }
    while (v17);
    if (v13 != (v13 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_16:
      do
      {
        unsigned int v19 = *v11++;
        *v12++ = (float)v19;
      }
      while (v11 != (unsigned int *)((char *)a2 + 4 * (void)v5));
    }
    char v5 = (uint64_t *)((char *)v9->i64 + 4 * (void)v5);
    size_t v20 = (uint64_t *)((char *)v9 + v8);
  }
  else
  {
    size_t v20 = 0;
    uint64_t v9 = 0;
  }
  unint64_t v23 = a4;
  int64_t v21 = sub_1B4C385B4((uint64_t **)(a1 + 56), (const void **)a4, (uint64_t)&unk_1B4C9AE0A, &v23);
  char v22 = v21[7];
  if (v22)
  {
    v21[8] = v22;
    operator delete(v22);
    v21[7] = 0;
    v21[8] = 0;
    v21[9] = 0;
  }
  v21[7] = (uint64_t *)v9;
  v21[8] = v20;
  v21[9] = v5;
}

void sub_1B4C38310(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (v11) {
    operator delete(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1B4C3833C(uint64_t a1, uint64_t a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = a2;
  sub_1B4C38758("InputDimension", &cf);
  uint64_t valuePtr = 1;
  CFNumberRef v2 = CFNumberCreate(0, kCFNumberLongLongType, &valuePtr);
  if (!v2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  CFTypeRef v3 = cf;
  if (cf) {
    CFRetain(cf);
  }
  CFTypeRef v12 = v3;
  CFRetain(v2);
  CFTypeRef v13 = v2;
  sub_1B4C38758("SequenceLength", &valuePtr);
  sub_1B4C393C0(&v14, (CFTypeRef *)&valuePtr, &v10);
  v9[0] = &v12;
  v9[1] = 2;
  CFDictionaryRef v4 = sub_1B4C329B0((uint64_t)v9);
  void v9[2] = v4;
  if (v15) {
    CFRelease(v15);
  }
  if (v14) {
    CFRelease(v14);
  }
  if (v13) {
    CFRelease(v13);
  }
  if (v12) {
    CFRelease(v12);
  }
  if (valuePtr) {
    CFRelease((CFTypeRef)valuePtr);
  }
  CFRelease(v2);
  if (cf) {
    CFRelease(cf);
  }
  uint64_t v5 = MRLNeuralNetworkTensorCreate();
  if (v4) {
    CFRelease(v4);
  }
  return v5;
}

void sub_1B4C384DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10)
{
  __cxa_free_exception(v10);
  sub_1B4C31674(&a10);
  _Unwind_Resume(a1);
}

void sub_1B4C384F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, int a16, __int16 a17, char a18, char a19)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_1B4BB21F0(exception_object);
}

void sub_1B4C385A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1B4C31674((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t **sub_1B4C385B4(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  size_t v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    int v8 = *((char *)a2 + 23);
    if (v8 >= 0) {
      size_t v9 = *((unsigned __int8 *)a2 + 23);
    }
    else {
      size_t v9 = (size_t)a2[1];
    }
    if (v8 >= 0) {
      uint64_t v10 = a2;
    }
    else {
      uint64_t v10 = *a2;
    }
    while (1)
    {
      while (1)
      {
        CFStringRef v11 = (uint64_t **)v6;
        CFTypeRef v14 = (const void *)v6[4];
        CFTypeRef v12 = v6 + 4;
        CFTypeRef v13 = v14;
        int v15 = *((char *)v12 + 23);
        if (v15 >= 0) {
          size_t v16 = *((unsigned __int8 *)v12 + 23);
        }
        else {
          size_t v16 = v12[1];
        }
        if (v15 >= 0) {
          uint64_t v17 = v12;
        }
        else {
          uint64_t v17 = v13;
        }
        if (v16 >= v9) {
          size_t v18 = v9;
        }
        else {
          size_t v18 = v16;
        }
        int v19 = memcmp(v10, v17, v18);
        BOOL v20 = v9 < v16;
        if (v19) {
          BOOL v20 = v19 < 0;
        }
        if (!v20) {
          break;
        }
        uint64_t v6 = *v11;
        size_t v7 = v11;
        if (!*v11) {
          goto LABEL_27;
        }
      }
      int v21 = memcmp(v17, v10, v18);
      BOOL v22 = v16 < v9;
      if (v21) {
        BOOL v22 = v21 < 0;
      }
      if (!v22) {
        return v11;
      }
      uint64_t v6 = v11[1];
      if (!v6)
      {
        size_t v7 = v11 + 1;
        goto LABEL_27;
      }
    }
  }
  else
  {
    CFStringRef v11 = a1 + 1;
LABEL_27:
    unint64_t v23 = operator new(0x50uLL);
    unint64_t v24 = v23 + 4;
    uint64_t v25 = *a4;
    if (*((char *)*a4 + 23) < 0)
    {
      sub_1B4BCA11C(v24, *(void **)v25, *((void *)v25 + 1));
    }
    else
    {
      long long v26 = *v25;
      v23[6] = *((void *)v25 + 2);
      *(_OWORD *)unint64_t v24 = v26;
    }
    v23[7] = 0;
    v23[8] = 0;
    v23[9] = 0;
    *unint64_t v23 = 0;
    v23[1] = 0;
    v23[2] = v11;
    uint64_t *v7 = v23;
    uint64_t v27 = (uint64_t *)**a1;
    uint64_t v28 = v23;
    if (v27)
    {
      *a1 = v27;
      uint64_t v28 = *v7;
    }
    sub_1B4BB3DA4(a1[1], v28);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return (uint64_t **)v23;
}

void sub_1B4C38744(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B4C38758(const char *a1@<X0>, void *a2@<X8>)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  unint64_t v56 = a1;
  size_t v4 = strlen(a1);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    sub_1B4BB33D8();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v9 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v9 = v4 | 7;
    }
    uint64_t v10 = v9 + 1;
    uint64_t v6 = operator new(v9 + 1);
    *(void *)&__dst[8] = v5;
    *(void *)&__dst[16] = v10 | 0x8000000000000000;
    *(void *)__dst = v6;
LABEL_11:
    memcpy(v6, a1, v5);
    v6[v5] = 0;
    int v7 = __dst[23];
    if ((__dst[23] & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_12;
  }
  __dst[23] = v4;
  uint64_t v6 = __dst;
  if (v4) {
    goto LABEL_11;
  }
  __dst[0] = 0;
  int v7 = __dst[23];
  if ((__dst[23] & 0x80000000) == 0)
  {
LABEL_5:
    int v8 = (uint64_t *)__dst;
    switch(v7)
    {
      case 8:
        if (*(void *)__dst == 0x4C52556C65646F4DLL) {
          goto LABEL_14;
        }
        goto LABEL_174;
      case 9:
        if (*(void *)__dst == 0x7461446C65646F4DLL && __dst[8] == 97) {
          goto LABEL_184;
        }
        if (*(void *)__dst != 0x6D614E6C65646F4DLL || __dst[8] != 101) {
          goto LABEL_174;
        }
        goto LABEL_168;
      case 10:
        if (*(void *)__dst != 0x6D614E7475706E49 || *(unsigned __int16 *)&__dst[8] != 29541) {
          goto LABEL_174;
        }
        goto LABEL_98;
      case 11:
        if (*(void *)__dst != 0x614E74757074754FLL || *(void *)&__dst[3] != 0x73656D614E747570) {
          goto LABEL_174;
        }
        goto LABEL_186;
      case 12:
        if (*(void *)__dst != 0x7265566C65646F4DLL || *(_DWORD *)&__dst[8] != 1852795251) {
          goto LABEL_174;
        }
        goto LABEL_183;
      case 14:
        goto LABEL_153;
      case 18:
        if (*(void *)__dst != 0x617A69746E617551
          || *(void *)&__dst[8] != 0x617261506E6F6974
          || *(unsigned __int16 *)&__dst[16] != 29549)
        {
          goto LABEL_48;
        }
        goto LABEL_181;
      case 22:
        if (*(void *)__dst != 0x617A69746E617551
          || *(void *)&__dst[8] != 0x656863536E6F6974
          || *(void *)&__dst[14] != 0x656D614E656D6568)
        {
          goto LABEL_48;
        }
        goto LABEL_182;
      case 36:
        if (*(void *)__dst == 0x617A69746E617551
          && *(void *)&__dst[8] == 0x656863536E6F6974
          && *(void *)&__dst[16] == 0x7261656E694C656DLL
          && v56 == (const char *)0x676E615238746E49
          && *(_DWORD *)buf == 1852394853)
        {
          goto LABEL_188;
        }
        if (v7 == 14) {
          goto LABEL_92;
        }
        if (v7 != 36) {
          goto LABEL_174;
        }
        BOOL v26 = *(void *)__dst == 0x617A69746E617551 && *(void *)&__dst[8] == 0x656863536E6F6974;
        BOOL v27 = v26 && *(void *)&__dst[16] == 0x7261656E694C656DLL;
        BOOL v28 = v27 && v56 == (const char *)0x676E615238746E49;
        if (!v28 || *(_DWORD *)buf != 2019642725) {
          goto LABEL_174;
        }
        goto LABEL_189;
      default:
        goto LABEL_174;
    }
  }
LABEL_12:
  uint64_t v11 = *(void *)&__dst[8];
  switch(*(void *)&__dst[8])
  {
    case 8:
      if (**(void **)__dst != 0x4C52556C65646F4DLL) {
        goto LABEL_174;
      }
LABEL_14:
      CFTypeRef v12 = (CFTypeRef)*MEMORY[0x1E4F78EF0];
      if (*MEMORY[0x1E4F78EF0]) {
        CFRetain((CFTypeRef)*MEMORY[0x1E4F78EF0]);
      }
      goto LABEL_178;
    case 9:
      if (**(void **)__dst == 0x7461446C65646F4DLL && *(unsigned char *)(*(void *)__dst + 8) == 97)
      {
LABEL_184:
        CFTypeRef v12 = (CFTypeRef)*MEMORY[0x1E4F78EE0];
        if (*MEMORY[0x1E4F78EE0]) {
          CFRetain((CFTypeRef)*MEMORY[0x1E4F78EE0]);
        }
      }
      else
      {
        if (**(void **)__dst != 0x6D614E6C65646F4DLL || *(unsigned char *)(*(void *)__dst + 8) != 101) {
          goto LABEL_174;
        }
LABEL_168:
        CFTypeRef v12 = (CFTypeRef)*MEMORY[0x1E4F78EE8];
        if (*MEMORY[0x1E4F78EE8]) {
          CFRetain((CFTypeRef)*MEMORY[0x1E4F78EE8]);
        }
      }
      goto LABEL_178;
    case 0xALL:
      if (**(void **)__dst != 0x6D614E7475706E49 || *(_WORD *)(*(void *)__dst + 8) != 29541) {
        goto LABEL_174;
      }
LABEL_98:
      CFTypeRef v12 = (CFTypeRef)*MEMORY[0x1E4F78ED8];
      if (*MEMORY[0x1E4F78ED8]) {
        CFRetain((CFTypeRef)*MEMORY[0x1E4F78ED8]);
      }
      goto LABEL_178;
    case 0xBLL:
      if (**(void **)__dst != 0x614E74757074754FLL || *(void *)(*(void *)__dst + 3) != 0x73656D614E747570) {
        goto LABEL_174;
      }
LABEL_186:
      CFTypeRef v12 = (CFTypeRef)*MEMORY[0x1E4F78F08];
      if (*MEMORY[0x1E4F78F08]) {
        CFRetain((CFTypeRef)*MEMORY[0x1E4F78F08]);
      }
      goto LABEL_178;
    case 0xCLL:
      if (**(void **)__dst == 0x7265566C65646F4DLL && *(_DWORD *)(*(void *)__dst + 8) == 1852795251)
      {
LABEL_183:
        long long v47 = (CFTypeRef *)MEMORY[0x1E4F78F00];
        goto LABEL_176;
      }
      if (*(void *)&__dst[8] != 18) {
        goto LABEL_113;
      }
      goto LABEL_105;
    case 0x12:
LABEL_105:
      if (**(void **)__dst == 0x617A69746E617551
        && *(void *)(*(void *)__dst + 8) == 0x617261506E6F6974
        && *(_WORD *)(*(void *)__dst + 16) == 29549)
      {
LABEL_181:
        long long v47 = (CFTypeRef *)MEMORY[0x1E4F78F10];
        goto LABEL_176;
      }
      uint64_t v11 = *(void *)&__dst[8];
LABEL_113:
      if (v11 != 22) {
        goto LABEL_122;
      }
      if (**(void **)__dst == 0x617A69746E617551
        && *(void *)(*(void *)__dst + 8) == 0x656863536E6F6974
        && *(void *)(*(void *)__dst + 14) == 0x656D614E656D6568)
      {
LABEL_182:
        long long v47 = (CFTypeRef *)MEMORY[0x1E4F78F28];
        goto LABEL_176;
      }
      uint64_t v11 = *(void *)&__dst[8];
LABEL_122:
      if (v11 != 36) {
        goto LABEL_151;
      }
      if (**(void **)__dst == 0x617A69746E617551
        && *(void *)(*(void *)__dst + 8) == 0x656863536E6F6974
        && *(void *)(*(void *)__dst + 16) == 0x7261656E694C656DLL
        && *(void *)(*(void *)__dst + 24) == 0x676E615238746E49
        && *(_DWORD *)(*(void *)__dst + 32) == 1852394853)
      {
LABEL_188:
        long long v47 = (CFTypeRef *)MEMORY[0x1E4F78F20];
        goto LABEL_176;
      }
      uint64_t v11 = *(void *)&__dst[8];
      if (*(void *)&__dst[8] != 36) {
        goto LABEL_151;
      }
      if (**(void **)__dst == 0x617A69746E617551
        && *(void *)(*(void *)__dst + 8) == 0x656863536E6F6974
        && *(void *)(*(void *)__dst + 16) == 0x7261656E694C656DLL
        && *(void *)(*(void *)__dst + 24) == 0x676E615238746E49
        && *(_DWORD *)(*(void *)__dst + 32) == 2019642725)
      {
LABEL_189:
        long long v47 = (CFTypeRef *)MEMORY[0x1E4F78F18];
        goto LABEL_176;
      }
      if ((v7 & 0x80) != 0)
      {
LABEL_151:
        if (v11 != 14) {
          goto LABEL_174;
        }
        int v8 = *(uint64_t **)__dst;
      }
      else
      {
LABEL_48:
        if (v7 != 14) {
          goto LABEL_174;
        }
LABEL_92:
        int v8 = (uint64_t *)__dst;
      }
LABEL_153:
      uint64_t v44 = *v8;
      uint64_t v45 = *(uint64_t *)((char *)v8 + 6);
      if (v44 == 0x6D69447475706E49 && v45 == 0x6E6F69736E656D69)
      {
        long long v47 = (CFTypeRef *)MEMORY[0x1E4F78F30];
        goto LABEL_176;
      }
LABEL_174:
      if (!sub_1B4C39140(__dst, "SequenceLength"))
      {
        sub_1B4C39220("Unexpected mrlkey: ", &v56);
        if (qword_1E9D40AF0 != -1) {
          dispatch_once(&qword_1E9D40AF0, &unk_1F0D56000);
        }
        int v51 = (id)qword_1E9D40AE8;
        if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
        {
          int v52 = &v54;
          if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            int v52 = (std::string *)v54.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)buf = 136315138;
          uint64_t v58 = v52;
          _os_log_error_impl(&dword_1B4BAD000, v51, OS_LOG_TYPE_ERROR, "%s", buf, 0xCu);
        }

        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(exception, &v54);
        exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
        __cxa_throw(exception, (struct type_info *)off_1E60A34D0, MEMORY[0x1E4FBA1E8]);
      }
      long long v47 = (CFTypeRef *)MEMORY[0x1E4F78F38];
LABEL_176:
      CFTypeRef v12 = *v47;
      if (*v47) {
        CFRetain(*v47);
      }
LABEL_178:
      sub_1B4C316B8(a2, v12);
      if ((__dst[23] & 0x80000000) != 0) {
        operator delete(*(void **)__dst);
      }
      return;
    default:
      goto LABEL_113;
  }
}

void sub_1B4C38FC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2) {
    sub_1B4BB21F0(exception_object);
  }
  _Unwind_Resume(exception_object);
}

const void **sub_1B4C390D8(const void **a1)
{
  CFNumberRef v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

const void **sub_1B4C3910C(const void **a1)
{
  CFNumberRef v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

BOOL sub_1B4C39140(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if ((*((char *)a1 + 23) & 0x80000000) == 0)
  {
    if (v4 != *((unsigned __int8 *)a1 + 23)) {
      return 0;
    }
    return memcmp(a1, __s, v4) == 0;
  }
  if (v4 == a1[1])
  {
    if (v4 == -1) {
      sub_1B4C393A8();
    }
    a1 = (void *)*a1;
    return memcmp(a1, __s, v4) == 0;
  }
  return 0;
}

void *sub_1B4C391D4@<X0>(CFTypeRef cf@<X0>, void *a2@<X8>)
{
  if (cf) {
    CFRetain(cf);
  }
  return sub_1B4C316B8(a2, cf);
}

uint64_t sub_1B4C39220(const char *a1, const char **a2)
{
  sub_1B4BB2204((uint64_t)v8);
  size_t v4 = strlen(a1);
  sub_1B4BB34F0(v8, (uint64_t)a1, v4);
  size_t v5 = *a2;
  size_t v6 = strlen(v5);
  sub_1B4BB34F0(v8, (uint64_t)v5, v6);
  std::stringbuf::str();
  v8[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v8 + *(void *)(v8[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v8[1] = MEMORY[0x1E4FBA470] + 16;
  if (v9 < 0) {
    operator delete((void *)v8[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1BA992920](&v10);
}

void sub_1B4C39380(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1B4BC8450((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1B4C39394(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1B4BC8450((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1B4C393A8()
{
}

void *sub_1B4C393C0(void *a1, CFTypeRef *a2, uint64_t *a3)
{
  CFTypeRef v5 = *a2;
  if (*a2) {
    CFRetain(*a2);
  }
  *a1 = v5;
  uint64_t valuePtr = *a3;
  CFNumberRef v6 = CFNumberCreate(0, kCFNumberLongType, &valuePtr);
  a1[1] = v6;
  if (!v6)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  return a1;
}

void sub_1B4C39468(_Unwind_Exception *a1)
{
  CFTypeRef v3 = *(const void **)(v1 + 8);
  if (v3) {
    CFRelease(v3);
  }
  sub_1B4C394A8((const void **)v1);
  _Unwind_Resume(a1);
}

const void **sub_1B4C394A8(const void **a1)
{
  CFNumberRef v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

uint64_t **sub_1B4C394DC(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  int v7 = a1 + 1;
  CFNumberRef v6 = a1[1];
  if (v6)
  {
    int v8 = *((char *)a2 + 23);
    if (v8 >= 0) {
      size_t v9 = *((unsigned __int8 *)a2 + 23);
    }
    else {
      size_t v9 = (size_t)a2[1];
    }
    if (v8 >= 0) {
      uint64_t v10 = a2;
    }
    else {
      uint64_t v10 = *a2;
    }
    while (1)
    {
      while (1)
      {
        uint64_t v11 = (uint64_t **)v6;
        CFTypeRef v14 = (const void *)v6[4];
        CFTypeRef v12 = v6 + 4;
        CFTypeRef v13 = v14;
        int v15 = *((char *)v12 + 23);
        if (v15 >= 0) {
          size_t v16 = *((unsigned __int8 *)v12 + 23);
        }
        else {
          size_t v16 = v12[1];
        }
        if (v15 >= 0) {
          uint64_t v17 = v12;
        }
        else {
          uint64_t v17 = v13;
        }
        if (v16 >= v9) {
          size_t v18 = v9;
        }
        else {
          size_t v18 = v16;
        }
        int v19 = memcmp(v10, v17, v18);
        BOOL v20 = v9 < v16;
        if (v19) {
          BOOL v20 = v19 < 0;
        }
        if (!v20) {
          break;
        }
        CFNumberRef v6 = *v11;
        int v7 = v11;
        if (!*v11) {
          goto LABEL_27;
        }
      }
      int v21 = memcmp(v17, v10, v18);
      BOOL v22 = v16 < v9;
      if (v21) {
        BOOL v22 = v21 < 0;
      }
      if (!v22) {
        return v11;
      }
      CFNumberRef v6 = v11[1];
      if (!v6)
      {
        int v7 = v11 + 1;
        goto LABEL_27;
      }
    }
  }
  else
  {
    uint64_t v11 = a1 + 1;
LABEL_27:
    unint64_t v23 = operator new(0x40uLL);
    unint64_t v24 = v23 + 4;
    uint64_t v25 = *a4;
    if (*((char *)*a4 + 23) < 0)
    {
      sub_1B4BCA11C(v24, *(void **)v25, *((void *)v25 + 1));
    }
    else
    {
      long long v26 = *v25;
      v23[6] = *((void *)v25 + 2);
      *(_OWORD *)unint64_t v24 = v26;
    }
    v23[7] = 0;
    *unint64_t v23 = 0;
    v23[1] = 0;
    v23[2] = v11;
    uint64_t *v7 = v23;
    BOOL v27 = (uint64_t *)**a1;
    BOOL v28 = v23;
    if (v27)
    {
      *a1 = v27;
      BOOL v28 = *v7;
    }
    sub_1B4BB3DA4(a1[1], v28);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return (uint64_t **)v23;
}

void sub_1B4C39668(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B4C3967C(uint64_t a1, const void *a2, uint64_t *a3, uint64_t a4)
{
  sub_1B4C39848(a1, a2, a3, (long long *)a4);
  CFTypeRef v13 = (long long *)a4;
  sub_1B4C385B4((uint64_t **)(a1 + 56), (const void **)a4, (uint64_t)&unk_1B4C9AE0A, &v13);
  int v7 = (uint64_t *)sub_1B4C3833C(a1, (uint64_t)a3);
  CFTypeRef v13 = (long long *)a4;
  sub_1B4C394DC((uint64_t **)(a1 + 80), (const void **)a4, (uint64_t)&unk_1B4C9AE0A, &v13)[7] = v7;
  CFTypeRef v13 = (long long *)a4;
  sub_1B4C394DC((uint64_t **)(a1 + 80), (const void **)a4, (uint64_t)&unk_1B4C9AE0A, &v13);
  MRLNeuralNetworkTensorAppendData();
  char v8 = *(unsigned char *)(a4 + 23);
  if (v8 >= 0) {
    size_t v9 = (const UInt8 *)a4;
  }
  else {
    size_t v9 = *(const UInt8 **)a4;
  }
  if (v9)
  {
    if (v8 >= 0) {
      CFIndex v10 = *(unsigned __int8 *)(a4 + 23);
    }
    else {
      CFIndex v10 = *(void *)(a4 + 8);
    }
    CFStringRef v11 = CFStringCreateWithBytes(0, v9, v10, 0x8000100u, 0);
    if (!v11)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
  }
  else
  {
    CFStringRef v11 = 0;
  }
  CFTypeRef v13 = (long long *)a4;
  sub_1B4C394DC((uint64_t **)(a1 + 80), (const void **)a4, (uint64_t)&unk_1B4C9AE0A, &v13);
  MRLNeuralNetworkSetInputTensor();
  if (v11) {
    CFRelease(v11);
  }
}

void sub_1B4C3981C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1B4C39834(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1B4C31674((const void **)va);
  _Unwind_Resume(a1);
}

void sub_1B4C39848(uint64_t a1, const void *a2, uint64_t *a3, long long *a4)
{
  CFTypeRef v5 = a3;
  if (a3)
  {
    if (((unint64_t)a3 & 0x8000000000000000) != 0) {
      sub_1B4BB3244();
    }
    size_t v8 = 4 * (void)a3;
    size_t v9 = (char *)operator new(4 * (void)a3);
    CFTypeRef v5 = (uint64_t *)&v9[4 * (void)v5];
    memcpy(v9, a2, v8);
  }
  else
  {
    size_t v9 = 0;
  }
  CFTypeRef v12 = a4;
  CFIndex v10 = sub_1B4C385B4((uint64_t **)(a1 + 56), (const void **)a4, (uint64_t)&unk_1B4C9AE0A, &v12);
  CFStringRef v11 = v10[7];
  if (v11)
  {
    v10[8] = v11;
    operator delete(v11);
    v10[7] = 0;
    v10[8] = 0;
    v10[9] = 0;
  }
  v10[7] = (uint64_t *)v9;
  v10[8] = v5;
  v10[9] = v5;
}

void sub_1B4C39918(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (v11) {
    operator delete(v11);
  }
  _Unwind_Resume(exception_object);
}

char *sub_1B4C39944(void *a1, const void *a2, uint64_t a3, float a4)
{
  CFTypeRef v5 = (char *)*a1;
  size_t v4 = (char *)a1[1];
  uint64_t v6 = (uint64_t)&v4[-*a1] >> 5;
  unint64_t v7 = v6 + 1;
  if ((unint64_t)(v6 + 1) >> 59) {
    sub_1B4BB3244();
  }
  uint64_t v12 = a1[2] - (void)v5;
  if (v12 >> 4 > v7) {
    unint64_t v7 = v12 >> 4;
  }
  if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v13 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v13 = v7;
  }
  if (v13)
  {
    if (v13 >> 59) {
      sub_1B4BB2D38();
    }
    CFTypeRef v14 = (char *)operator new(32 * v13);
  }
  else
  {
    CFTypeRef v14 = 0;
  }
  size_t v16 = &v14[32 * v13];
  *((void *)&v27 + 1) = v16;
  int v15 = (int64x2_t *)&v14[32 * v6];
  v15->i64[1] = 0;
  *(float *)v15->i32 = a4;
  v15[1].i64[0] = 0;
  v15[1].i64[1] = 0;
  int64_t v17 = a3 - (void)a2;
  if (v17)
  {
    if (v17 < 0) {
      sub_1B4BB3244();
    }
    size_t v18 = operator new(v17);
    v15->i64[1] = (uint64_t)v18;
    unint64_t v19 = (unint64_t)v18 + 4 * (v17 >> 2);
    memcpy(v18, a2, v17);
    v15[1] = vdupq_n_s64(v19);
  }
  i8 = v15[2].i8;
  if (v4 == v5)
  {
    *a1 = v15;
    a1[1] = i8;
    a1[2] = v16;
  }
  else
  {
    unint64_t v21 = 0;
    do
    {
      BOOL v22 = v15[v21 / 0x10].i8;
      unint64_t v23 = &v4[v21];
      *((_DWORD *)v22 - 8) = *(_DWORD *)&v4[v21 - 32];
      *((void *)v22 - 2) = 0;
      *((void *)v22 - 1) = 0;
      *(_OWORD *)(v22 - 24) = *(_OWORD *)&v4[v21 - 24];
      *((void *)v22 - 1) = *(void *)&v4[v21 - 8];
      *((void *)v23 - 3) = 0;
      *((void *)v23 - 2) = 0;
      *((void *)v23 - 1) = 0;
      v21 -= 32;
    }
    while (&v4[v21] != v5);
    size_t v4 = (char *)*a1;
    unint64_t v24 = (char *)a1[1];
    *a1 = &v15[v21 / 0x10];
    *(void *)&long long v27 = v15 + 2;
    *(_OWORD *)(a1 + 1) = v27;
    i8 = v15[2].i8;
    while (v24 != v4)
    {
      uint64_t v25 = (void *)*((void *)v24 - 3);
      if (v25)
      {
        *((void *)v24 - 2) = v25;
        operator delete(v25);
      }
      v24 -= 32;
    }
  }
  if (v4) {
    operator delete(v4);
  }
  return i8;
}

void sub_1B4C39B14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  CFTypeRef v5 = *v2;
  if (*v2)
  {
    void *v3 = v5;
    operator delete(v5);
  }
  sub_1B4C2AA10((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1B4C39B38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = a3 - 2;
  if (a3 < 2) {
    return;
  }
  unint64_t v5 = v3 >> 1;
  uint64_t v6 = a1 + 32 * (v3 >> 1);
  float v7 = *(float *)v6;
  size_t v9 = *(unsigned char **)(v6 + 8);
  size_t v8 = *(unsigned char **)(v6 + 16);
  size_t v10 = v8 - v9;
  if (v8 != v9)
  {
    if ((v10 & 0x8000000000000000) != 0) {
      sub_1B4BB3244();
    }
    unint64_t v35 = operator new(v8 - v9);
    memcpy(v35, v9, v10);
    size_t v10 = (size_t)v35;
  }
  uint64_t v11 = a2 - 32;
  float v12 = *(float *)(a2 - 32);
  uint64_t v13 = *(void *)(a2 - 24);
  uint64_t v14 = *(void *)(a2 - 16);
  if (v14 != v13)
  {
    if (v14 - v13 < 0) {
      sub_1B4BB3244();
    }
    int v34 = operator new(v14 - v13);
    operator delete(v34);
  }
  if (v10) {
    operator delete((void *)v10);
  }
  if (v7 <= v12) {
    return;
  }
  float v15 = *(float *)(a2 - 32);
  uint64_t v16 = *(void *)(a2 - 24);
  long long v17 = *(_OWORD *)(a2 - 16);
  *(void *)(a2 - 24) = 0;
  *(void *)(a2 - 16) = 0;
  *(void *)(a2 - 8) = 0;
  long long v28 = v17;
  uint64_t v30 = v16;
  uint64_t v31 = v17;
  size_t __sz = v17 - v16;
  do
  {
    uint64_t v18 = v6;
    *(_DWORD *)uint64_t v11 = *(_DWORD *)v6;
    unint64_t v19 = *(void **)(v11 + 8);
    if (v19)
    {
      *(void *)(v11 + 16) = v19;
      operator delete(v19);
      *(void *)(v11 + 8) = 0;
      *(void *)(v11 + 16) = 0;
      *(void *)(v11 + 24) = 0;
    }
    BOOL v20 = (void *)(v6 + 8);
    *(_OWORD *)(v11 + 8) = *(_OWORD *)(v6 + 8);
    *(void *)(v11 + 24) = *(void *)(v6 + 24);
    *(void *)(v6 + 8) = 0;
    *(void *)(v6 + 16) = 0;
    *(void *)(v6 + 24) = 0;
    if (!v5)
    {
      *(float *)uint64_t v6 = v15;
      long long v26 = (void *)(v6 + 16);
      goto LABEL_28;
    }
    unint64_t v5 = (v5 - 1) >> 1;
    uint64_t v6 = a1 + 32 * v5;
    float v21 = *(float *)v6;
    unint64_t v23 = *(unsigned char **)(v6 + 8);
    BOOL v22 = *(unsigned char **)(v6 + 16);
    size_t v24 = v22 - v23;
    if (v22 == v23)
    {
      uint64_t v25 = 0;
      if (v31 == v16) {
        goto LABEL_23;
      }
LABEL_21:
      if ((__sz & 0x8000000000000000) != 0) {
        sub_1B4BB3244();
      }
      float v33 = operator new(__sz);
      operator delete(v33);
      goto LABEL_23;
    }
    if ((v24 & 0x8000000000000000) != 0) {
      sub_1B4BB3244();
    }
    uint64_t v25 = operator new(v22 - v23);
    memcpy(v25, v23, v24);
    uint64_t v16 = v30;
    if (v31 != v30) {
      goto LABEL_21;
    }
LABEL_23:
    if (v25) {
      operator delete(v25);
    }
    uint64_t v11 = v18;
  }
  while (v21 > v15);
  long long v26 = (void *)(v18 + 16);
  long long v27 = *(void **)(v18 + 8);
  *(float *)uint64_t v18 = v15;
  if (v27)
  {
    *long long v26 = v27;
    operator delete(v27);
    *BOOL v20 = 0;
    *(void *)(v18 + 16) = 0;
    *(void *)(v18 + 24) = 0;
  }
LABEL_28:
  *BOOL v20 = v16;
  *(_OWORD *)long long v26 = v28;
}

void sub_1B4C39E14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26)
{
  if (__p) {
    operator delete(__p);
  }
  if (v26) {
    operator delete(v26);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B4C39EA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3 >= 2)
  {
    uint64_t v4 = 0;
    int v5 = *(_DWORD *)a1;
    uint64_t v26 = *(void *)(a1 + 16);
    uint64_t v27 = *(void *)(a1 + 8);
    uint64_t v25 = *(void *)(a1 + 24);
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = 0;
    int64_t v6 = (unint64_t)(a3 - 2) >> 1;
    uint64_t v7 = a1;
    *(void *)(a1 + 8) = 0;
    do
    {
      uint64_t v9 = v7 + 32 * (v4 + 1);
      uint64_t v10 = 2 * v4;
      uint64_t v4 = (2 * v4) | 1;
      uint64_t v11 = v10 + 2;
      if (v10 + 2 < a3)
      {
        float v12 = *(float *)v9;
        uint64_t v14 = *(unsigned char **)(v9 + 8);
        uint64_t v13 = *(unsigned char **)(v9 + 16);
        size_t v15 = v13 - v14;
        if (v13 == v14)
        {
          uint64_t v16 = 0;
        }
        else
        {
          if ((v15 & 0x8000000000000000) != 0) {
            sub_1B4BB3244();
          }
          uint64_t v16 = operator new(v13 - v14);
          memcpy(v16, v14, v15);
        }
        float v17 = *(float *)(v9 + 32);
        uint64_t v18 = *(void *)(v9 + 40);
        uint64_t v19 = *(void *)(v9 + 48);
        if (v19 != v18)
        {
          if (v19 - v18 < 0) {
            sub_1B4BB3244();
          }
          long long v28 = operator new(v19 - v18);
          operator delete(v28);
        }
        if (v16) {
          operator delete(v16);
        }
        if (v12 > v17)
        {
          v9 += 32;
          uint64_t v4 = v11;
        }
      }
      *(_DWORD *)uint64_t v7 = *(_DWORD *)v9;
      BOOL v20 = *(void **)(v7 + 8);
      if (v20)
      {
        *(void *)(v7 + 16) = v20;
        operator delete(v20);
        *(void *)(v7 + 8) = 0;
        *(void *)(v7 + 16) = 0;
        *(void *)(v7 + 24) = 0;
      }
      size_t v8 = (void *)(v9 + 8);
      *(_OWORD *)(v7 + 8) = *(_OWORD *)(v9 + 8);
      *(void *)(v7 + 24) = *(void *)(v9 + 24);
      *(void *)(v9 + 8) = 0;
      *(void *)(v9 + 16) = 0;
      *(void *)(v9 + 24) = 0;
      uint64_t v7 = v9;
    }
    while (v4 <= v6);
    if (a2 - 32 == v9)
    {
      *(_DWORD *)uint64_t v9 = v5;
      BOOL v22 = *(void **)(v9 + 8);
      if (v22)
      {
        *(void *)(v9 + 16) = v22;
        operator delete(v22);
        void *v8 = 0;
        *(void *)(v9 + 16) = 0;
        *(void *)(v9 + 24) = 0;
      }
      *(void *)(v9 + 8) = v27;
      *(void *)(v9 + 16) = v26;
      *(void *)(v9 + 24) = v25;
    }
    else
    {
      *(_DWORD *)uint64_t v9 = *(_DWORD *)(a2 - 32);
      float v21 = *(void **)(v9 + 8);
      if (v21)
      {
        *(void *)(v9 + 16) = v21;
        operator delete(v21);
        void *v8 = 0;
        *(void *)(v9 + 16) = 0;
        *(void *)(v9 + 24) = 0;
      }
      *(_OWORD *)(v9 + 8) = *(_OWORD *)(a2 - 24);
      *(void *)(v9 + 24) = *(void *)(a2 - 8);
      *(_DWORD *)(a2 - 32) = v5;
      *(void *)(a2 - 24) = v27;
      *(void *)(a2 - 16) = v26;
      *(void *)(a2 - 8) = v25;
      sub_1B4C39B38(a1, v9 + 32, (v9 + 32 - a1) >> 5);
    }
  }
}

void sub_1B4C3A15C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  if (__p) {
    operator delete(__p);
  }
  if (a13) {
    operator delete(a13);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1B4C3A1BC(void *a1, uint64_t *a2)
{
  a1[2] = 0;
  *a1 = 0;
  a1[1] = 0;
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = v4 - *a2;
  if (v4 != *a2)
  {
    if (v5 < 0) {
      sub_1B4BB3244();
    }
    int64_t v6 = (char *)operator new(v4 - *a2);
    uint64_t v7 = 0;
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[32 * (v5 >> 5)];
    do
    {
      uint64_t v9 = v3 + v7;
      uint64_t v10 = &v6[v7];
      int v11 = *(_DWORD *)(v3 + v7);
      *(void *)&v6[v7 + 8] = 0;
      *(_DWORD *)uint64_t v10 = v11;
      *((void *)v10 + 2) = 0;
      *((void *)v10 + 3) = 0;
      uint64_t v13 = *(unsigned char **)(v3 + v7 + 8);
      float v12 = *(unsigned char **)(v3 + v7 + 16);
      int64_t v14 = v12 - v13;
      if (v12 != v13)
      {
        if (v14 < 0) {
          sub_1B4BB3244();
        }
        size_t v15 = (char *)operator new(v12 - v13);
        *(void *)&v6[v7 + 8] = v15;
        size_t v8 = &v15[4 * (v14 >> 2)];
        *((void *)v10 + 2) = v15;
        *((void *)v10 + 3) = v8;
        memcpy(v15, v13, v14);
        *((void *)v10 + 2) = v8;
      }
      v7 += 32;
    }
    while (v9 + 32 != v4);
    a1[1] = &v6[v7];
  }
  return a1;
}

void sub_1B4C3A2F0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = (char *)*v1;
  if (*v1)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = *v1;
    if (v4 != v3)
    {
      do
      {
        int64_t v6 = (void *)*((void *)v4 - 3);
        if (v6)
        {
          *((void *)v4 - 2) = v6;
          operator delete(v6);
        }
        v4 -= 32;
      }
      while (v4 != v3);
      uint64_t v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1B4C3A370(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = **(void **)(a1 + 16);
    uint64_t v4 = **(void **)(a1 + 8);
    while (v3 != v4)
    {
      uint64_t v5 = *(void **)(v3 - 24);
      if (v5)
      {
        *(void *)(v3 - 16) = v5;
        operator delete(v5);
      }
      v3 -= 32;
    }
  }
  return a1;
}

void sub_1B4C3A508(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C3A7EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1B4C3A824(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1B4C3A860(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1B4C3A99C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C3AA4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)CVNLPActivationMatrix;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_1B4C3AE24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1B4C3AF34(uint64_t a1, uint64_t a2, float a3)
{
  if (!*(unsigned char *)(a1 + 32))
  {
    *(void *)(a1 + 48) = *(void *)(a1 + 40);
    uint64_t v5 = *(const void **)a1;
    uint64_t v4 = *(void *)(a1 + 8);
    int64_t v6 = v4 - *(void *)a1;
    if (v4 == *(void *)a1)
    {
      *(unsigned char *)(a1 + 32) = 1;
      return a1 + 40;
    }
    if (v6 < 0) {
      sub_1B4BB3244();
    }
    uint64_t v9 = (float *)operator new(v4 - *(void *)a1);
    uint64_t v10 = &v9[2 * (v6 >> 3)];
    memcpy(v9, v5, v6);
    BOOL v11 = 1;
    char v12 = 1;
    while (1)
    {
      int64_t v14 = *(char **)(a1 + 40);
      uint64_t v13 = *(char **)(a1 + 48);
      unint64_t v15 = (v13 - v14) >> 3;
      if (v15 >= *(unsigned int *)(a2 + 16) || !v11)
      {
LABEL_52:
        *(unsigned char *)(a1 + 32) = 1;
        operator delete(v9);
        return a1 + 40;
      }
      if (*(void *)a2)
      {
        if (*(void *)a2 == 1)
        {
          float v16 = v9[1];
          float v17 = *(float *)(a2 + 12);
          a3 = v16 + a3;
          BOOL v11 = a3 < (float)(1.0 - v17);
          if (v16 > v17) {
            goto LABEL_12;
          }
        }
        else
        {
          BOOL v11 = 1;
          if (v12)
          {
LABEL_12:
            unint64_t v18 = *(void *)(a1 + 56);
            if ((unint64_t)v13 >= v18) {
              goto LABEL_17;
            }
LABEL_13:
            *(void *)uint64_t v13 = *(void *)v9;
            *(void *)(a1 + 48) = v13 + 8;
            char v12 = 1;
            uint64_t v19 = (char *)v10 - (char *)v9;
            if ((char *)v10 - (char *)v9 >= 9) {
              goto LABEL_40;
            }
            goto LABEL_6;
          }
        }
        char v12 = 0;
        uint64_t v19 = (char *)v10 - (char *)v9;
        if ((char *)v10 - (char *)v9 >= 9) {
          goto LABEL_40;
        }
      }
      else
      {
        float v20 = *(float *)(a2 + 12);
        BOOL v11 = (float)(v9[1] + a3) < v20;
        if (a3 < v20)
        {
          a3 = v9[1] + a3;
          unint64_t v18 = *(void *)(a1 + 56);
          if ((unint64_t)v13 >= v18)
          {
LABEL_17:
            BOOL v51 = v11;
            uint64_t v21 = v18 - (void)v14;
            if (v21 >> 2 <= v15 + 1) {
              uint64_t v22 = v15 + 1;
            }
            else {
              uint64_t v22 = v21 >> 2;
            }
            if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v23 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v23 = v22;
            }
            if (v23 >> 61) {
              sub_1B4BB2D38();
            }
            size_t v24 = (char *)operator new(8 * v23);
            uint64_t v25 = &v24[8 * v15];
            *(void *)uint64_t v25 = *(void *)v9;
            uint64_t v26 = v25 + 8;
            if (v13 != v14)
            {
              unint64_t v27 = v13 - v14 - 8;
              if (v27 < 0x58) {
                goto LABEL_59;
              }
              if ((unint64_t)(v14 - v24) < 0x20) {
                goto LABEL_59;
              }
              uint64_t v28 = (v27 >> 3) + 1;
              uint64_t v29 = 8 * (v28 & 0x3FFFFFFFFFFFFFFCLL);
              uint64_t v30 = &v13[-v29];
              v25 -= v29;
              uint64_t v31 = &v24[8 * v15 - 16];
              int64_t v32 = v13 - 16;
              uint64_t v33 = v28 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v34 = *(_OWORD *)v32;
                *((_OWORD *)v31 - 1) = *((_OWORD *)v32 - 1);
                *(_OWORD *)uint64_t v31 = v34;
                v31 -= 32;
                v32 -= 32;
                v33 -= 4;
              }
              while (v33);
              uint64_t v13 = v30;
              if (v28 != (v28 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_59:
                do
                {
                  uint64_t v35 = *((void *)v13 - 1);
                  v13 -= 8;
                  *((void *)v25 - 1) = v35;
                  v25 -= 8;
                }
                while (v13 != v14);
              }
              uint64_t v13 = v14;
            }
            *(void *)(a1 + 40) = v25;
            *(void *)(a1 + 48) = v26;
            *(void *)(a1 + 56) = &v24[8 * v23];
            if (v13) {
              operator delete(v13);
            }
            BOOL v11 = v51;
            *(void *)(a1 + 48) = v26;
            char v12 = 1;
            uint64_t v19 = (char *)v10 - (char *)v9;
            if ((char *)v10 - (char *)v9 < 9) {
              goto LABEL_6;
            }
LABEL_40:
            uint64_t v36 = 0;
            uint64_t v37 = v19 >> 3;
            uint64_t v38 = *(void *)v9;
            int64_t v39 = (unint64_t)((v19 >> 3) - 2) >> 1;
            int v40 = v9;
            do
            {
              int v41 = v40;
              v40 += 2 * v36 + 2;
              uint64_t v42 = 2 * v36;
              uint64_t v36 = (2 * v36) | 1;
              uint64_t v43 = v42 + 2;
              if (v43 < v37 && v40[1] < v40[3])
              {
                v40 += 2;
                uint64_t v36 = v43;
              }
              *(void *)int v41 = *(void *)v40;
            }
            while (v36 <= v39);
            uint64_t v44 = v10 - 2;
            if (v40 == v10 - 2)
            {
              *(void *)int v40 = v38;
            }
            else
            {
              *(void *)int v40 = *(void *)v44;
              *(void *)uint64_t v44 = v38;
              uint64_t v45 = (char *)v40 - (char *)v9 + 8;
              if (v45 >= 9)
              {
                unint64_t v46 = (((unint64_t)v45 >> 3) - 2) >> 1;
                float v47 = v40[1];
                if (v9[2 * v46 + 1] < v47)
                {
                  int v48 = *(_DWORD *)v40;
                  do
                  {
                    int64_t v49 = v40;
                    int v40 = &v9[2 * v46];
                    *(void *)int64_t v49 = *(void *)v40;
                    if (!v46) {
                      break;
                    }
                    unint64_t v46 = (v46 - 1) >> 1;
                  }
                  while (v9[2 * v46 + 1] < v47);
                  *(_DWORD *)int v40 = v48;
                  v40[1] = v47;
                }
              }
            }
            goto LABEL_6;
          }
          goto LABEL_13;
        }
        char v12 = 0;
        a3 = v9[1] + a3;
        uint64_t v19 = (char *)v10 - (char *)v9;
        if ((char *)v10 - (char *)v9 >= 9) {
          goto LABEL_40;
        }
      }
LABEL_6:
      v10 -= 2;
      if (v9 == v10) {
        goto LABEL_52;
      }
    }
  }
  return a1 + 40;
}

void sub_1B4C3B2E4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B4C3B2F8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B4C3B5EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C3B5FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C3B60C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C3B61C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C3B630(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C3BE50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C3BE64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C3BEC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C3BED4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C3C148()
{
}

void sub_1B4C3C2EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C3C378(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C3C594(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B4C3C628(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)CVNLPLexiconCursors;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_1B4C3CA44(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, std::string *a10, long long a11, long long a12, int64_t a13)
{
  operator delete(v13);

  __cxa_begin_catch(a1);
  sub_1B4BB8DC0(&a10, "Failed to load encoder network");
  espresso_plan_get_error_info();
  float v17 = std::string::append((std::string *)&a10, v16);
  long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  a13 = v17->__r_.__value_.__r.__words[2];
  a12 = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(a11) < 0) {
    operator delete(a10);
  }
  if (a13 >= 0) {
    uint64_t v19 = &a12;
  }
  else {
    uint64_t v19 = (long long *)a12;
  }
  sub_1B4C53070(2u, (uint64_t)v19);
}

void sub_1B4C3CB34(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  __cxa_end_catch();
  JUMPOUT(0x1B4C3C890);
}

void sub_1B4C3CB4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  __cxa_end_catch();

  _Unwind_Resume(a1);
}

void sub_1B4C3CC04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)CVNLPCaptionEncoderTransformer;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_1B4C3CCD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1B4C3CCE4(void *a1)
{
  return MEMORY[0x1F4181798](a1[4], sel_computeCaptionForImageImpl_outputs_, a1[5], a1[6]);
}

void sub_1B4C3CED4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1B4C3CEE8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1B4C3CEFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C3CFB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1B4C3CFC8(void *a1)
{
  return MEMORY[0x1F4181798](a1[4], sel_computeCaptionForPixelBufferImpl_outputs_, a1[5], a1[6]);
}

void sub_1B4C3D17C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1B4C3D190(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1B4C3D1A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C3D260(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1B4C3D270(void *a1)
{
  return MEMORY[0x1F4181798](a1[4], sel_computeCaptionForVideoPixelBufferImpl_outputs_, a1[5], a1[6]);
}

void sub_1B4C3D468(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1B4C3D47C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C3D494(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1B4C3D610(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C3D6F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C3D80C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C3DD84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1B4C3E280(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1B4C3E7A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_1B4C3E9B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C3E9C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C3E9E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C3E9F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C3ED68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1B4C3F004(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C3F4A8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);

  sub_1B4C3F524((void **)va);
  _Unwind_Resume(a1);
}

void **sub_1B4C3F524(void **a1)
{
  CFNumberRef v2 = (id *)*a1;
  if (*a1)
  {
    uint64_t v3 = (id *)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = v3 - 2;

        uint64_t v3 = v5;
      }
      while (v5 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_1B4C3F688(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C3F7E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C3F7F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1B4C3F808(uint64_t a1, uint64_t a2, void *a3)
{
  id v3 = a3;
  if (!sub_1B4C47B0C(v3))
  {
    id v5 = v3;
    if ((unint64_t)objc_msgSend_length(v5, v6, v7, v8) < 2)
    {
      objc_msgSend_characterAtIndex_(v5, v9, 0, v10);
      int Script = uscript_getScript();

      if (Script == 25)
      {
LABEL_7:
        uint64_t v4 = 0;
        goto LABEL_9;
      }
    }
    else
    {
    }
    if (!sub_1B4C47D8C(v5))
    {
      uint64_t v4 = !sub_1B4C47E1C(v5);
      goto LABEL_9;
    }
    goto LABEL_7;
  }
  uint64_t v4 = 2;
LABEL_9:

  return v4;
}

void sub_1B4C3F8B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C3F8CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C3F8E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C3F8F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1B4C3F910(uint64_t a1, uint64_t a2, void *a3)
{
  if (sub_1B4C47B0C(a3)) {
    return 2;
  }
  else {
    return 0;
  }
}

uint64_t sub_1B4C3F944()
{
  return 1;
}

uint64_t **sub_1B4C3FB08(uint64_t **a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, void *a5, void *a6, void *a7, void *a8, float a9, void *a10)
{
  uint64_t v188 = *MEMORY[0x1E4F143B8];
  id v15 = a5;
  id v16 = a6;
  id v170 = a7;
  v167 = a8;
  id v169 = a10;
  a1[1] = 0;
  a1[2] = 0;
  a1[4] = 0;
  uint64_t v19 = a1 + 4;
  long long v177 = a1 + 1;
  unint64_t v178 = a1;
  *a1 = (uint64_t *)(a1 + 1);
  a1[3] = (uint64_t *)(a1 + 4);
  uint64_t v176 = (char **)(a1 + 3);
  a1[5] = 0;
  *((_OWORD *)a1 + 3) = 0u;
  *((_OWORD *)a1 + 4) = 0u;
  *((_OWORD *)a1 + 5) = 0u;
  a1[12] = 0;
  a1[17] = (uint64_t *)1;
  v162 = v15;
  v166 = v16;
  if (v16)
  {
    unint64_t v171 = sub_1B4C40970(v16);
    if (!v170) {
      goto LABEL_142;
    }
  }
  else if (v15)
  {
    unint64_t v23 = objc_msgSend_fileURLWithPath_(MEMORY[0x1E4F1CB10], v17, (uint64_t)v15, v18);
    size_t v24 = (void *)MEMORY[0x1E4F1C9B8];
    uint64_t v28 = objc_msgSend_path(v23, v25, v26, v27);
    uint64_t v31 = objc_msgSend_dataWithContentsOfFile_(v24, v29, (uint64_t)v28, v30);

    id v181 = 0;
    uint64_t v33 = objc_msgSend_JSONObjectWithData_options_error_(MEMORY[0x1E4F28D90], v32, (uint64_t)v31, 0, &v181);
    id v34 = v181;
    uint64_t v35 = sub_1B4C40970(v33);

    unint64_t v171 = (void *)v35;
    if (!v170) {
      goto LABEL_142;
    }
  }
  else
  {
    unint64_t v171 = 0;
    if (!v170) {
      goto LABEL_142;
    }
  }
  id v20 = v170;
  CFRetain(v20);
  sub_1B4C4304C(&theArray, v20);

  CFArrayRef v21 = theArray;
  if (theArray)
  {
    CFIndex Count = CFArrayGetCount(theArray);
    CFArrayRef v22 = theArray;
    if (theArray)
    {
      CFIndex v168 = CFArrayGetCount(theArray);
      *((void *)&v182 + 1) = 0;
      *(void *)&long long v183 = 0;
      *(void *)&long long v182 = (char *)&v182 + 8;
      if (!Count) {
        goto LABEL_11;
      }
      goto LABEL_69;
    }
    CFIndex v168 = 0;
    *((void *)&v182 + 1) = 0;
    *(void *)&long long v183 = 0;
    *(void *)&long long v182 = (char *)&v182 + 8;
    if (Count)
    {
LABEL_69:
      unint64_t v63 = 0;
      CFArrayRef v172 = v22;
      CFArrayRef v173 = v21;
      while (1)
      {
        if (v21 == v22 && v63 == v168) {
          goto LABEL_11;
        }
        uint64_t v64 = v19;
        sub_1B4C4320C(v21, v63, __p);
        uint64_t v65 = *((void *)&v182 + 1);
        double v66 = (char *)&v182 + 8;
        if ((long long *)v182 != (long long *)((char *)&v182 + 8))
        {
          int v67 = (char *)*((void *)&v182 + 1);
          uint64_t v68 = (char *)&v182 + 8;
          if (*((void *)&v182 + 1))
          {
            do
            {
              double v66 = v67;
              int v67 = (char *)*((void *)v67 + 1);
            }
            while (v67);
          }
          else
          {
            do
            {
              double v66 = (char *)*((void *)v68 + 2);
              BOOL v61 = *(void *)v66 == (void)v68;
              uint64_t v68 = v66;
            }
            while (v61);
          }
          int v69 = v66[55];
          if (v69 >= 0) {
            size_t v70 = v66[55];
          }
          else {
            size_t v70 = *((void *)v66 + 5);
          }
          if (v69 >= 0) {
            int v71 = v66 + 32;
          }
          else {
            int v71 = (const void *)*((void *)v66 + 4);
          }
          if (SHIBYTE(v187) >= 0) {
            CFTypeRef v72 = (void *)HIBYTE(v187);
          }
          else {
            CFTypeRef v72 = __p[1];
          }
          if (SHIBYTE(v187) >= 0) {
            uint64_t v73 = __p;
          }
          else {
            uint64_t v73 = (void **)__p[0];
          }
          if ((unint64_t)v72 >= v70) {
            size_t v74 = v70;
          }
          else {
            size_t v74 = (size_t)v72;
          }
          int v75 = memcmp(v71, v73, v74);
          BOOL v76 = v70 < (unint64_t)v72;
          if (v75) {
            BOOL v76 = v75 < 0;
          }
          if (!v76) {
            break;
          }
        }
        if (v65) {
          uint64_t v77 = v66;
        }
        else {
          uint64_t v77 = (void *)&v182 + 1;
        }
        uint64_t v78 = &v182;
        if (v65)
        {
          uint64_t v78 = (long long *)v66;
          uint64_t v79 = v66 + 8;
        }
        else
        {
          uint64_t v79 = (void *)&v182 + 1;
        }
        if (!*((void *)v78 + 1)) {
          goto LABEL_124;
        }
LABEL_127:
        CFArrayRef v21 = v173;
        if (SHIBYTE(v187) < 0) {
          operator delete(__p[0]);
        }
        ++v63;
        uint64_t v19 = v64;
        CFArrayRef v22 = v172;
        if (v63 == Count) {
          goto LABEL_11;
        }
      }
      uint64_t v79 = (void *)&v182 + 1;
      uint64_t v77 = (void *)&v182 + 1;
      if (v65)
      {
        while (1)
        {
          while (1)
          {
            uint64_t v77 = (void *)v65;
            int v80 = *(char *)(v65 + 55);
            if (v80 >= 0) {
              size_t v81 = *(unsigned __int8 *)(v65 + 55);
            }
            else {
              size_t v81 = *(void *)(v65 + 40);
            }
            if (v80 >= 0) {
              unint64_t v82 = (const void *)(v65 + 32);
            }
            else {
              unint64_t v82 = *(const void **)(v65 + 32);
            }
            if (v81 >= (unint64_t)v72) {
              size_t v83 = (size_t)v72;
            }
            else {
              size_t v83 = v81;
            }
            int v84 = memcmp(v73, v82, v83);
            BOOL v85 = (unint64_t)v72 < v81;
            if (v84) {
              BOOL v85 = v84 < 0;
            }
            if (!v85) {
              break;
            }
            uint64_t v65 = *v77;
            uint64_t v79 = v77;
            if (!*v77) {
              goto LABEL_124;
            }
          }
          int v86 = memcmp(v82, v73, v83);
          BOOL v87 = v81 < (unint64_t)v72;
          if (v86) {
            BOOL v87 = v86 < 0;
          }
          if (!v87) {
            goto LABEL_127;
          }
          uint64_t v65 = v77[1];
          if (!v65)
          {
            uint64_t v79 = v77 + 1;
            break;
          }
        }
      }
LABEL_124:
      uint64_t v88 = operator new(0x38uLL);
      std::random_device v88[2] = *(_OWORD *)__p;
      *((void *)v88 + 6) = v187;
      __p[1] = 0;
      uint64_t v187 = 0;
      __p[0] = 0;
      *(void *)uint64_t v88 = 0;
      *((void *)v88 + 1) = 0;
      *((void *)v88 + 2) = v77;
      *uint64_t v79 = v88;
      if (*(void *)v182)
      {
        *(void *)&long long v182 = *(void *)v182;
        uint64_t v88 = (_OWORD *)*v79;
      }
      sub_1B4BB3DA4(*((uint64_t **)&v182 + 1), (uint64_t *)v88);
      *(void *)&long long v183 = v183 + 1;
      goto LABEL_127;
    }
  }
  else
  {
    *((void *)&v182 + 1) = 0;
    *(void *)&long long v183 = 0;
    *(void *)&long long v182 = (char *)&v182 + 8;
  }
LABEL_11:
  if (v176 != (char **)&v182)
  {
    uint64_t v36 = (_OWORD *)v182;
    if (a1[5])
    {
      uint64_t v37 = *v176;
      *uint64_t v176 = (char *)v19;
      *(void *)(*v19 + 16) = 0;
      *uint64_t v19 = 0;
      v19[1] = 0;
      if (*((void *)v37 + 1)) {
        uint64_t v38 = (char *)*((void *)v37 + 1);
      }
      else {
        uint64_t v38 = v37;
      }
      __p[0] = a1 + 3;
      uint64_t v187 = (uint64_t *)v38;
      if (!v38)
      {
        uint64_t v60 = v36;
        goto LABEL_138;
      }
      int64_t v39 = (char *)*((void *)v38 + 2);
      if (v39)
      {
        int v40 = *(char **)v39;
        if (*(char **)v39 == v38)
        {
          *(void *)int64_t v39 = 0;
          while (1)
          {
            uint64_t v161 = (char *)*((void *)v39 + 1);
            if (!v161) {
              break;
            }
            do
            {
              int64_t v39 = v161;
              uint64_t v161 = *(char **)v161;
            }
            while (v161);
          }
        }
        else
        {
          for (*((void *)v39 + 1) = 0; v40; int v40 = (char *)*((void *)v39 + 1))
          {
            do
            {
              int64_t v39 = v40;
              int v40 = *(char **)v40;
            }
            while (v40);
          }
        }
      }
      __p[1] = v39;
      if (v36 != (long long *)((char *)&v182 + 8))
      {
        while (1)
        {
          std::string::operator=((std::string *)(v38 + 32), (const std::string *)(v36 + 2));
          int v41 = v187;
          uint64_t v42 = (uint64_t *)*v19;
          uint64_t v43 = (uint64_t **)v19;
          uint64_t v44 = (uint64_t **)v19;
          if (*v19)
          {
            int v45 = *((char *)v187 + 55);
            if (v45 >= 0) {
              size_t v46 = *((unsigned __int8 *)v187 + 55);
            }
            else {
              size_t v46 = v187[5];
            }
            if (v45 >= 0) {
              float v47 = v187 + 4;
            }
            else {
              float v47 = (const void *)v187[4];
            }
            do
            {
              while (1)
              {
                uint64_t v43 = (uint64_t **)v42;
                unint64_t v50 = (const void *)v42[4];
                int v48 = v42 + 4;
                int64_t v49 = v50;
                int v51 = *((char *)v48 + 23);
                if (v51 >= 0) {
                  size_t v52 = *((unsigned __int8 *)v48 + 23);
                }
                else {
                  size_t v52 = v48[1];
                }
                if (v51 >= 0) {
                  unint64_t v53 = v48;
                }
                else {
                  unint64_t v53 = v49;
                }
                if (v52 >= v46) {
                  size_t v54 = v46;
                }
                else {
                  size_t v54 = v52;
                }
                int v55 = memcmp(v47, v53, v54);
                BOOL v56 = v46 < v52;
                if (v55) {
                  BOOL v56 = v55 < 0;
                }
                if (!v56) {
                  break;
                }
                uint64_t v42 = *v43;
                uint64_t v44 = v43;
                if (!*v43) {
                  goto LABEL_46;
                }
              }
              uint64_t v42 = v43[1];
            }
            while (v42);
            uint64_t v44 = v43 + 1;
          }
LABEL_46:
          uint64_t *v41 = 0;
          v41[1] = 0;
          v41[2] = (uint64_t)v43;
          *uint64_t v44 = v41;
          uint64_t v57 = *(char **)*v176;
          if (v57)
          {
            *uint64_t v176 = v57;
            int v41 = *v44;
          }
          a1 = v178;
          sub_1B4BB3DA4(v178[4], v41);
          v178[5] = (uint64_t *)((char *)v178[5] + 1);
          uint64_t v38 = (char *)__p[1];
          uint64_t v187 = (uint64_t *)__p[1];
          if (__p[1])
          {
            int64_t v39 = (char *)*((void *)__p[1] + 2);
            if (v39)
            {
              uint64_t v58 = *(char **)v39;
              if (*(void **)v39 == __p[1])
              {
                *(void *)int64_t v39 = 0;
                while (1)
                {
                  unint64_t v62 = (char *)*((void *)v39 + 1);
                  if (!v62) {
                    break;
                  }
                  do
                  {
                    int64_t v39 = v62;
                    unint64_t v62 = *(char **)v62;
                  }
                  while (v62);
                }
              }
              else
              {
                for (*((void *)v39 + 1) = 0; v58; uint64_t v58 = (char *)*((void *)v39 + 1))
                {
                  do
                  {
                    int64_t v39 = v58;
                    uint64_t v58 = *(char **)v58;
                  }
                  while (v58);
                }
              }
            }
            __p[1] = v39;
            uint64_t v59 = (void *)*((void *)v36 + 1);
            if (v59)
            {
              do
              {
LABEL_57:
                uint64_t v60 = v59;
                uint64_t v59 = (void *)*v59;
              }
              while (v59);
              goto LABEL_61;
            }
          }
          else
          {
            int64_t v39 = 0;
            uint64_t v59 = (void *)*((void *)v36 + 1);
            if (v59) {
              goto LABEL_57;
            }
          }
          do
          {
            uint64_t v60 = (_OWORD *)*((void *)v36 + 2);
            BOOL v61 = *(void *)v60 == (void)v36;
            uint64_t v36 = v60;
          }
          while (!v61);
LABEL_61:
          if (v38)
          {
            uint64_t v36 = v60;
            if (v60 != (long long *)((char *)&v182 + 8)) {
              continue;
            }
          }
          uint64_t v89 = __p[0];
          sub_1B4C43188((uint64_t)__p[0], v38);
          if (!v39) {
            goto LABEL_138;
          }
          goto LABEL_135;
        }
      }
      uint64_t v89 = a1 + 3;
      uint64_t v60 = (long long *)((char *)&v182 + 8);
      sub_1B4C43188((uint64_t)v176, v38);
      if (!v39) {
        goto LABEL_138;
      }
LABEL_135:
      for (uint64_t i = (char *)*((void *)v39 + 2); i; uint64_t i = (char *)*((void *)i + 2))
        int64_t v39 = i;
      sub_1B4C43188((uint64_t)v89, v39);
LABEL_138:
      uint64_t v36 = v60;
    }
    if (v36 != (long long *)((char *)&v182 + 8))
    {
      do
      {
        unint64_t v96 = (char *)operator new(0x38uLL);
        long long v97 = v96;
        uint64_t v98 = v96 + 32;
        if (*((char *)v36 + 55) < 0)
        {
          sub_1B4BCA11C(v96 + 32, *((void **)v36 + 4), *((void *)v36 + 5));
        }
        else
        {
          long long v99 = v36[2];
          *((void *)v96 + 6) = *((void *)v36 + 6);
          _OWORD *v98 = v99;
        }
        int v100 = (char *)*v19;
        size_t v101 = (char **)v19;
        int v102 = (char **)v19;
        if (*v19)
        {
          int v103 = v97[55];
          if (v103 >= 0) {
            size_t v104 = v97[55];
          }
          else {
            size_t v104 = *((void *)v97 + 5);
          }
          if (v103 < 0) {
            uint64_t v98 = (_OWORD *)*((void *)v97 + 4);
          }
          do
          {
            while (1)
            {
              size_t v101 = (char **)v100;
              v107 = (const void *)*((void *)v100 + 4);
              v105 = v100 + 32;
              uint64_t v106 = v107;
              int v108 = *((char *)v105 + 23);
              if (v108 >= 0) {
                size_t v109 = *((unsigned __int8 *)v105 + 23);
              }
              else {
                size_t v109 = v105[1];
              }
              if (v108 >= 0) {
                uint64_t v110 = v105;
              }
              else {
                uint64_t v110 = v106;
              }
              if (v109 >= v104) {
                size_t v111 = v104;
              }
              else {
                size_t v111 = v109;
              }
              int v112 = memcmp(v98, v110, v111);
              BOOL v113 = v104 < v109;
              if (v112) {
                BOOL v113 = v112 < 0;
              }
              if (!v113) {
                break;
              }
              int v100 = *v101;
              int v102 = v101;
              if (!*v101) {
                goto LABEL_172;
              }
            }
            int v100 = v101[1];
          }
          while (v100);
          int v102 = v101 + 1;
        }
LABEL_172:
        *(void *)long long v97 = 0;
        *((void *)v97 + 1) = 0;
        *((void *)v97 + 2) = v101;
        *int v102 = v97;
        v114 = *(char **)*v176;
        if (v114)
        {
          *uint64_t v176 = v114;
          long long v97 = *v102;
        }
        a1 = v178;
        sub_1B4BB3DA4(v178[4], (uint64_t *)v97);
        v178[5] = (uint64_t *)((char *)v178[5] + 1);
        uint64_t v115 = (void *)*((void *)v36 + 1);
        if (v115)
        {
          do
          {
            v116 = v115;
            uint64_t v115 = (void *)*v115;
          }
          while (v115);
        }
        else
        {
          do
          {
            v116 = (_OWORD *)*((void *)v36 + 2);
            BOOL v61 = *(void *)v116 == (void)v36;
            uint64_t v36 = v116;
          }
          while (!v61);
        }
        uint64_t v36 = v116;
      }
      while (v116 != (long long *)((char *)&v182 + 8));
    }
  }
  sub_1B4C43188((uint64_t)&v182, *((char **)&v182 + 1));
  if (theArray) {
    CFRelease(theArray);
  }
LABEL_142:
  if (v169)
  {
    char v91 = objc_msgSend_fileURLWithPath_(MEMORY[0x1E4F1CB10], v17, (uint64_t)v169, v18);
    id v92 = objc_alloc(MEMORY[0x1E4F1C9E8]);
    id v179 = 0;
    uint64_t v94 = objc_msgSend_initWithContentsOfURL_error_(v92, v93, (uint64_t)v91, (uint64_t)&v179);
    id v95 = v179;
    v175 = sub_1B4C40970(v94);

    if (!v171) {
      goto LABEL_228;
    }
  }
  else
  {
    v175 = 0;
    if (!v171) {
      goto LABEL_228;
    }
  }
  id v117 = v171;
  long long v182 = 0u;
  long long v183 = 0u;
  long long v184 = 0u;
  long long v185 = 0u;
  id v118 = v117;
  uint64_t v122 = objc_msgSend_countByEnumeratingWithState_objects_count_(v118, v119, (uint64_t)&v182, (uint64_t)__p, 16);
  if (v122)
  {
    uint64_t v123 = *(void *)v183;
    do
    {
      uint64_t v124 = 0;
      do
      {
        if (*(void *)v183 != v123) {
          objc_enumerationMutation(v118);
        }
        uint64_t v125 = *(void **)(*((void *)&v182 + 1) + 8 * v124);
        char v126 = objc_msgSend_objectForKeyedSubscript_(v118, v120, (uint64_t)v125, v121);
        id v127 = v125;
        uint64_t v131 = objc_msgSend_UTF8String(v127, v128, v129, v130);
        unint64_t v135 = objc_msgSend_unsignedIntegerValue(v126, v132, v133, v134);
        unint64_t v136 = v135;
        unint64_t v137 = v177;
        while (1)
        {
          uint64_t v138 = *v137;
          unint64_t v139 = v137;
          if (!*v137) {
            break;
          }
          while (1)
          {
            unint64_t v137 = (uint64_t **)v138;
            unint64_t v140 = v138[4];
            if (v135 < v140) {
              break;
            }
            if (v140 >= v135)
            {
              unint64_t v141 = (uint64_t *)v137;
              goto LABEL_218;
            }
            uint64_t v138 = v137[1];
            if (!v138)
            {
              unint64_t v139 = v137 + 1;
              goto LABEL_192;
            }
          }
        }
LABEL_192:
        unint64_t v141 = (uint64_t *)operator new(0x40uLL);
        v141[4] = v136;
        v141[5] = 0;
        v141[6] = 0;
        v141[7] = 0;
        *unint64_t v141 = 0;
        v141[1] = 0;
        v141[2] = (uint64_t)v137;
        *unint64_t v139 = v141;
        v142 = (uint64_t *)**v178;
        uint64_t v143 = v141;
        if (v142)
        {
          *unint64_t v178 = v142;
          uint64_t v143 = *v139;
        }
        uint64_t v144 = *v177;
        BOOL v61 = v143 == *v177;
        *((unsigned char *)v143 + 24) = v61;
        if (!v61)
        {
          do
          {
            uint64_t v145 = v143[2];
            if (*(unsigned char *)(v145 + 24)) {
              break;
            }
            uint64_t v146 = *(uint64_t **)(v145 + 16);
            uint64_t v147 = *v146;
            if (*v146 == v145)
            {
              uint64_t v150 = v146[1];
              if (!v150 || (v151 = *(unsigned __int8 *)(v150 + 24), uint64_t v148 = (unsigned char *)(v150 + 24), v151))
              {
                if (*(uint64_t **)v145 == v143)
                {
                  *(unsigned char *)(v145 + 24) = 1;
                  *((unsigned char *)v146 + 24) = 0;
                  uint64_t v154 = *(void *)(v145 + 8);
                  *uint64_t v146 = v154;
                  if (v154) {
                    goto LABEL_209;
                  }
                }
                else
                {
                  v152 = *(uint64_t **)(v145 + 8);
                  uint64_t v153 = *v152;
                  *(void *)(v145 + 8) = *v152;
                  if (v153)
                  {
                    *(void *)(v153 + 16) = v145;
                    uint64_t v146 = *(uint64_t **)(v145 + 16);
                  }
                  v152[2] = (uint64_t)v146;
                  *(void *)(*(void *)(v145 + 16) + 8 * (**(void **)(v145 + 16) != v145)) = v152;
                  uint64_t *v152 = v145;
                  *(void *)(v145 + 16) = v152;
                  uint64_t v146 = (uint64_t *)v152[2];
                  uint64_t v145 = *v146;
                  *((unsigned char *)v152 + 24) = 1;
                  *((unsigned char *)v146 + 24) = 0;
                  uint64_t v154 = *(void *)(v145 + 8);
                  *uint64_t v146 = v154;
                  if (v154) {
LABEL_209:
                  }
                    *(void *)(v154 + 16) = v146;
                }
                *(void *)(v145 + 16) = v146[2];
                *(void *)(v146[2] + 8 * (*(void *)v146[2] != (void)v146)) = v145;
                *(void *)(v145 + 8) = v146;
LABEL_216:
                v146[2] = v145;
                break;
              }
            }
            else if (!v147 || (v149 = *(unsigned __int8 *)(v147 + 24), uint64_t v148 = (unsigned char *)(v147 + 24), v149))
            {
              if (*(uint64_t **)v145 == v143)
              {
                uint64_t v156 = v143[1];
                *(void *)uint64_t v145 = v156;
                if (v156)
                {
                  *(void *)(v156 + 16) = v145;
                  uint64_t v146 = *(uint64_t **)(v145 + 16);
                }
                v143[2] = (uint64_t)v146;
                *(void *)(*(void *)(v145 + 16) + 8 * (**(void **)(v145 + 16) != v145)) = v143;
                v143[1] = v145;
                *(void *)(v145 + 16) = v143;
                uint64_t v146 = (uint64_t *)v143[2];
                *((unsigned char *)v143 + 24) = 1;
                *((unsigned char *)v146 + 24) = 0;
                uint64_t v145 = v146[1];
                uint64_t v155 = *(uint64_t **)v145;
                v146[1] = *(void *)v145;
                if (v155) {
LABEL_214:
                }
                  v155[2] = (uint64_t)v146;
              }
              else
              {
                *(unsigned char *)(v145 + 24) = 1;
                *((unsigned char *)v146 + 24) = 0;
                uint64_t v145 = v146[1];
                uint64_t v155 = *(uint64_t **)v145;
                v146[1] = *(void *)v145;
                if (v155) {
                  goto LABEL_214;
                }
              }
              *(void *)(v145 + 16) = v146[2];
              *(void *)(v146[2] + 8 * (*(void *)v146[2] != (void)v146)) = v145;
              *(void *)uint64_t v145 = v146;
              goto LABEL_216;
            }
            *(unsigned char *)(v145 + 24) = 1;
            uint64_t v143 = v146;
            *((unsigned char *)v146 + 24) = v146 == v144;
            *uint64_t v148 = 1;
          }
          while (v146 != v144);
        }
        v178[2] = (uint64_t *)((char *)v178[2] + 1);
LABEL_218:
        MEMORY[0x1BA9925F0](v141 + 5, v131);

        a1 = v178;
        ++v124;
      }
      while (v124 != v122);
      uint64_t v157 = objc_msgSend_countByEnumeratingWithState_objects_count_(v118, v120, (uint64_t)&v182, (uint64_t)__p, 16);
      uint64_t v122 = v157;
    }
    while (v157);
  }

LABEL_228:
  a1[13] = a2;
  float v158 = 1.0;
  if (a9 > 0.0) {
    float v158 = a9;
  }
  *((float *)a1 + 28) = v158;
  a1[15] = a3;
  a1[16] = a4;
  uint64_t v159 = a1[6];
  a1[6] = v167;

  return a1;
}

void sub_1B4C407C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, void *a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  sub_1B4C2D00C((void **)(a25 + 80));
  sub_1B4C2D00C((void **)(a25 + 56));

  sub_1B4C43188(a23, *(char **)(a25 + 32));
  sub_1B4C43104(a25, *(char **)(a25 + 8));

  _Unwind_Resume(a1);
}

id sub_1B4C40970(void *a1)
{
  uint64_t v64 = *MEMORY[0x1E4F143B8];
  memset(v61, 0, sizeof(v61));
  id v55 = a1;
  if (objc_msgSend_countByEnumeratingWithState_objects_count_(v55, v1, (uint64_t)v61, (uint64_t)v63, 16))
  {
    id v2 = **((id **)&v61[0] + 1);
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      if (objc_msgSend_integerValue(v2, v3, v4, v5) <= 0) {
        int v6 = 2;
      }
      else {
        int v6 = 3;
      }
    }
    else
    {
      objc_opt_class();
      int v6 = (objc_opt_isKindOfClass() & 1) != 0;
    }

    objc_msgSend_objectForKeyedSubscript_(v55, v8, (uint64_t)v2, v9);
    id v10 = (id)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      if (objc_msgSend_integerValue(v10, v11, v12, v13) <= 0) {
        int v7 = 2;
      }
      else {
        int v7 = 3;
      }
    }
    else
    {
      objc_opt_class();
      int v7 = (objc_opt_isKindOfClass() & 1) != 0;
    }
  }
  else
  {
    int v7 = 0;
    int v6 = 0;
  }

  BOOL v56 = objc_msgSend_dictionary(MEMORY[0x1E4F1CA60], v14, v15, v16);
  long long v59 = 0u;
  long long v60 = 0u;
  long long v57 = 0u;
  long long v58 = 0u;
  id v17 = v55;
  uint64_t v19 = objc_msgSend_countByEnumeratingWithState_objects_count_(v17, v18, (uint64_t)&v57, (uint64_t)v62, 16);
  if (v19)
  {
    uint64_t v20 = *(void *)v58;
    do
    {
      for (uint64_t i = 0; i != v19; ++i)
      {
        if (*(void *)v58 != v20) {
          objc_enumerationMutation(v17);
        }
        id v22 = *(id *)(*((void *)&v57 + 1) + 8 * i);
        unint64_t v23 = v22;
        if (v6 == 3)
        {
          id v25 = v22;
          uint64_t v26 = NSNumber;
          uint64_t v30 = objc_msgSend_integerValue(v25, v27, v28, v29);
          objc_msgSend_numberWithInteger_(v26, v31, v30, v32);
          id v24 = (id)objc_claimAutoreleasedReturnValue();
        }
        else if (v6 == 2 || v6 == 1)
        {
          id v24 = v22;
        }
        else
        {
          id v24 = 0;
        }

        objc_msgSend_objectForKeyedSubscript_(v17, v33, (uint64_t)v23, v34);
        id v35 = (id)objc_claimAutoreleasedReturnValue();
        uint64_t v36 = v35;
        if (v7 == 3)
        {
          id v38 = v35;
          int64_t v39 = NSNumber;
          uint64_t v43 = objc_msgSend_integerValue(v38, v40, v41, v42);
          objc_msgSend_numberWithInteger_(v39, v44, v43, v45);
          id v37 = (id)objc_claimAutoreleasedReturnValue();
        }
        else if (v7 == 2 || v7 == 1)
        {
          id v37 = v35;
        }
        else
        {
          id v37 = 0;
        }

        objc_opt_class();
        char isKindOfClass = objc_opt_isKindOfClass();
        if (isKindOfClass) {
          uint64_t v48 = (uint64_t)v37;
        }
        else {
          uint64_t v48 = (uint64_t)v24;
        }
        if (isKindOfClass) {
          objc_msgSend_setObject_forKeyedSubscript_(v56, v47, v48, (uint64_t)v24);
        }
        else {
          objc_msgSend_setObject_forKeyedSubscript_(v56, v47, v48, (uint64_t)v37);
        }
      }
      uint64_t v19 = objc_msgSend_countByEnumeratingWithState_objects_count_(v17, v49, (uint64_t)&v57, (uint64_t)v62, 16);
    }
    while (v19);
  }

  unint64_t v53 = objc_msgSend_copy(v56, v50, v51, v52);
  return v53;
}

void sub_1B4C40CE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1B4C40DA0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 80);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 88);
    uint64_t v4 = *(void **)(a1 + 80);
    if (v3 != v2)
    {
      do
      {
        int v6 = *(const void **)(v3 - 16);
        if (v6)
        {
          CFRelease(v6);
          *(void *)(v3 - 16) = 0;
        }
        uint64_t v7 = *(void *)(v3 - 40);
        if (v7)
        {
          uint64_t v8 = *(void *)(v3 - 32);
          uint64_t v5 = *(void **)(v3 - 40);
          if (v8 != v7)
          {
            do
            {
              if (*(char *)(v8 - 1) < 0) {
                operator delete(*(void **)(v8 - 24));
              }
              v8 -= 40;
            }
            while (v8 != v7);
            uint64_t v5 = *(void **)(v3 - 40);
          }
          *(void *)(v3 - 32) = v7;
          operator delete(v5);
        }
        v3 -= 48;
      }
      while (v3 != v2);
      uint64_t v4 = *(void **)(a1 + 80);
    }
    *(void *)(a1 + 88) = v2;
    operator delete(v4);
  }
  uint64_t v9 = *(void *)(a1 + 56);
  if (v9)
  {
    uint64_t v10 = *(void *)(a1 + 64);
    BOOL v11 = *(void **)(a1 + 56);
    if (v10 != v9)
    {
      do
      {
        uint64_t v13 = *(const void **)(v10 - 16);
        if (v13)
        {
          CFRelease(v13);
          *(void *)(v10 - 16) = 0;
        }
        uint64_t v14 = *(void *)(v10 - 40);
        if (v14)
        {
          uint64_t v15 = *(void *)(v10 - 32);
          uint64_t v12 = *(void **)(v10 - 40);
          if (v15 != v14)
          {
            do
            {
              if (*(char *)(v15 - 1) < 0) {
                operator delete(*(void **)(v15 - 24));
              }
              v15 -= 40;
            }
            while (v15 != v14);
            uint64_t v12 = *(void **)(v10 - 40);
          }
          *(void *)(v10 - 32) = v14;
          operator delete(v12);
        }
        v10 -= 48;
      }
      while (v10 != v9);
      BOOL v11 = *(void **)(a1 + 56);
    }
    *(void *)(a1 + 64) = v9;
    operator delete(v11);
  }

  sub_1B4C43188(a1 + 24, *(char **)(a1 + 32));
  sub_1B4C43104(a1, *(char **)(a1 + 8));
  return a1;
}

void sub_1B4C40F14(void *a1@<X0>, void *a2@<X1>, void **a3@<X8>)
{
  uint64_t v3 = (uint64_t)a1;
  uint64_t v4 = (void *)*a2;
  v244 = (void *)a2[1];
  if ((void *)*a2 != v244)
  {
    v249 = (char **)(a1 + 1);
    v250 = a1 + 10;
    do
    {
      uint64_t v5 = (const void *)v4[2];
      CFTypeRef v251 = (CFTypeRef)v4[1];
      uint64_t v248 = v4[3];
      uint64_t v6 = *(void *)(v3 + 120);
      unint64_t v259 = 0;
      v260 = 0;
      v258 = 0;
      if (v6)
      {
        if (v6 < 0) {
          sub_1B4BB3244();
        }
        v258 = operator new(4 * v6);
        v260 = (std::string *)((char *)v258 + 4 * v6);
        memcpy(v258, v5, 4 * v6);
        unint64_t v259 = v260;
      }
      uint64_t v246 = v4;
      v269 = 0;
      long long v270 = 0uLL;
      if ((*(void *)(v3 + 104) & 0x7FFFFFFFFFFFFFFFLL) != 0)
      {
        uint64_t v7 = 0;
        do
        {
          uint64_t v8 = (float *)((char *)v258 + 4);
          BOOL v9 = v258 == v259 || v8 == v259;
          uint64_t v10 = (char *)v258;
          if (!v9)
          {
            float v11 = *(float *)v258;
            uint64_t v10 = (char *)v258;
            uint64_t v12 = (float *)((char *)v258 + 4);
            do
            {
              float v13 = *v12++;
              BOOL v14 = v11 < v13;
              float v11 = fmaxf(v11, v13);
              if (v14) {
                uint64_t v10 = (char *)v8;
              }
              uint64_t v8 = v12;
            }
            while (v12 != v259);
          }
          unint64_t v15 = (v10 - (unsigned char *)v258) >> 2;
          int v16 = *(_DWORD *)v10;
          memset(&v268, 0, sizeof(v268));
          uint64_t v17 = *(void *)(v3 + 16);
          uint64_t v256 = v7;
          if (!v17)
          {
            int v36 = 0;
            goto LABEL_91;
          }
          uint64_t v18 = v249;
          while (1)
          {
            uint64_t v19 = *v18;
            uint64_t v20 = v18;
            if (!*v18) {
              break;
            }
            while (1)
            {
              uint64_t v18 = (char **)v19;
              unint64_t v21 = *((void *)v19 + 4);
              if (v15 < v21) {
                break;
              }
              if (v21 >= v15)
              {
                id v22 = (char *)v18;
                goto LABEL_57;
              }
              uint64_t v19 = v18[1];
              if (!v19)
              {
                uint64_t v20 = v18 + 1;
                goto LABEL_26;
              }
            }
          }
LABEL_26:
          id v22 = (char *)operator new(0x40uLL);
          *((void *)v22 + 4) = v15;
          *((void *)v22 + 5) = 0;
          *((void *)v22 + 6) = 0;
          *((void *)v22 + 7) = 0;
          *(void *)id v22 = 0;
          *((void *)v22 + 1) = 0;
          *((void *)v22 + 2) = v18;
          *uint64_t v20 = v22;
          uint64_t v23 = **(void **)v3;
          id v24 = v22;
          if (v23)
          {
            *(void *)uint64_t v3 = v23;
            id v24 = *v20;
          }
          id v25 = *v249;
          BOOL v9 = v24 == *v249;
          v24[24] = v9;
          if (!v9)
          {
            do
            {
              uint64_t v26 = *((void *)v24 + 2);
              if (*(unsigned char *)(v26 + 24)) {
                break;
              }
              uint64_t v27 = *(char **)(v26 + 16);
              uint64_t v28 = *(void *)v27;
              if (*(void *)v27 == v26)
              {
                uint64_t v31 = *((void *)v27 + 1);
                if (!v31 || (v32 = *(unsigned __int8 *)(v31 + 24), uint64_t v29 = (unsigned char *)(v31 + 24), v32))
                {
                  if (*(char **)v26 == v24)
                  {
                    *(unsigned char *)(v26 + 24) = 1;
                    v27[24] = 0;
                    uint64_t v35 = *(void *)(v26 + 8);
                    *(void *)uint64_t v27 = v35;
                    if (v35) {
                      goto LABEL_43;
                    }
                  }
                  else
                  {
                    uint64_t v33 = *(uint64_t **)(v26 + 8);
                    uint64_t v34 = *v33;
                    *(void *)(v26 + 8) = *v33;
                    if (v34)
                    {
                      *(void *)(v34 + 16) = v26;
                      uint64_t v27 = *(char **)(v26 + 16);
                    }
                    void v33[2] = (uint64_t)v27;
                    *(void *)(*(void *)(v26 + 16) + 8 * (**(void **)(v26 + 16) != v26)) = v33;
                    uint64_t *v33 = v26;
                    *(void *)(v26 + 16) = v33;
                    uint64_t v27 = (char *)v33[2];
                    uint64_t v26 = *(void *)v27;
                    *((unsigned char *)v33 + 24) = 1;
                    v27[24] = 0;
                    uint64_t v35 = *(void *)(v26 + 8);
                    *(void *)uint64_t v27 = v35;
                    if (v35) {
LABEL_43:
                    }
                      *(void *)(v35 + 16) = v27;
                  }
                  *(void *)(v26 + 16) = *((void *)v27 + 2);
                  *(void *)(*((void *)v27 + 2) + 8 * (**((void **)v27 + 2) != (void)v27)) = v26;
                  *(void *)(v26 + 8) = v27;
LABEL_55:
                  *((void *)v27 + 2) = v26;
                  break;
                }
              }
              else if (!v28 || (v30 = *(unsigned __int8 *)(v28 + 24), uint64_t v29 = (unsigned char *)(v28 + 24), v30))
              {
                if (*(char **)v26 == v24)
                {
                  uint64_t v37 = *((void *)v24 + 1);
                  *(void *)uint64_t v26 = v37;
                  if (v37)
                  {
                    *(void *)(v37 + 16) = v26;
                    uint64_t v27 = *(char **)(v26 + 16);
                  }
                  *((void *)v24 + 2) = v27;
                  *(void *)(*(void *)(v26 + 16) + 8 * (**(void **)(v26 + 16) != v26)) = v24;
                  *((void *)v24 + 1) = v26;
                  *(void *)(v26 + 16) = v24;
                  uint64_t v27 = (char *)*((void *)v24 + 2);
                }
                else
                {
                  id v24 = (char *)*((void *)v24 + 2);
                }
                v24[24] = 1;
                v27[24] = 0;
                uint64_t v26 = *((void *)v27 + 1);
                id v38 = *(char **)v26;
                *((void *)v27 + 1) = *(void *)v26;
                if (v38) {
                  *((void *)v38 + 2) = v27;
                }
                *(void *)(v26 + 16) = *((void *)v27 + 2);
                *(void *)(*((void *)v27 + 2) + 8 * (**((void **)v27 + 2) != (void)v27)) = v26;
                *(void *)uint64_t v26 = v27;
                goto LABEL_55;
              }
              *(unsigned char *)(v26 + 24) = 1;
              id v24 = v27;
              v27[24] = v27 == v25;
              *uint64_t v29 = 1;
            }
            while (v27 != v25);
          }
          *(void *)(v3 + 16) = v17 + 1;
LABEL_57:
          std::string::operator=(&v268, (const std::string *)(v22 + 40));
          int v36 = SHIBYTE(v268.__r_.__value_.__r.__words[2]);
          if (SHIBYTE(v268.__r_.__value_.__r.__words[2]) < 0)
          {
            if (v268.__r_.__value_.__l.__size_ == 3)
            {
              int64_t v39 = (std::string *)v268.__r_.__value_.__r.__words[0];
LABEL_62:
              int data_low = LOWORD(v39->__r_.__value_.__l.__data_);
              int v41 = v39->__r_.__value_.__s.__data_[2];
              if (data_low == 20053 && v41 == 75)
              {
LABEL_9:
                *(_DWORD *)uint64_t v10 = 0;
                if (SHIBYTE(v268.__r_.__value_.__r.__words[2]) < 0) {
                  goto LABEL_123;
                }
                goto LABEL_10;
              }
            }
          }
          else if (SHIBYTE(v268.__r_.__value_.__r.__words[2]) == 3)
          {
            int64_t v39 = &v268;
            goto LABEL_62;
          }
          uint64_t v43 = *(uint64_t ***)(v3 + 32);
          if (v43)
          {
            if ((v268.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type size = HIBYTE(v268.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type size = v268.__r_.__value_.__l.__size_;
            }
            if ((v268.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v45 = &v268;
            }
            else {
              uint64_t v45 = (std::string *)v268.__r_.__value_.__r.__words[0];
            }
            do
            {
              int v46 = *((char *)v43 + 55);
              if (v46 >= 0) {
                size_t v47 = *((unsigned __int8 *)v43 + 55);
              }
              else {
                size_t v47 = (size_t)v43[5];
              }
              if (v46 >= 0) {
                uint64_t v48 = (uint64_t *)(v43 + 4);
              }
              else {
                uint64_t v48 = v43[4];
              }
              if (v47 >= size) {
                size_t v49 = size;
              }
              else {
                size_t v49 = v47;
              }
              int v50 = memcmp(v45, v48, v49);
              BOOL v51 = size < v47;
              if (v50) {
                BOOL v51 = v50 < 0;
              }
              if (!v51)
              {
                int v52 = memcmp(v48, v45, v49);
                BOOL v53 = v47 < size;
                if (v52) {
                  BOOL v53 = v52 < 0;
                }
                if (!v53) {
                  goto LABEL_9;
                }
                ++v43;
              }
              uint64_t v43 = (uint64_t **)*v43;
            }
            while (v43);
          }
LABEL_91:
          uint64_t v54 = v270;
          if ((unint64_t)v270 < *((void *)&v270 + 1))
          {
            *(void *)long long v270 = v15;
            *(_DWORD *)(v54 + 8) = 0;
            *(_DWORD *)(v54 + 12) = v16;
            id v55 = (unsigned char *)(v54 + 16);
            if (SHIBYTE(v268.__r_.__value_.__r.__words[2]) < 0)
            {
              sub_1B4BCA11C(v55, v268.__r_.__value_.__l.__data_, v268.__r_.__value_.__l.__size_);
            }
            else
            {
              std::string::size_type v56 = v268.__r_.__value_.__r.__words[2];
              *(_OWORD *)id v55 = *(_OWORD *)&v268.__r_.__value_.__l.__data_;
              *(void *)(v54 + 32) = v56;
            }
            BOOL v61 = (void *)(v54 + 40);
            goto LABEL_122;
          }
          long long v57 = v269;
          unint64_t v58 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v270 - (void)v269) >> 3) + 1;
          if (v58 > 0x666666666666666) {
            sub_1B4C434F8();
          }
          if (0x999999999999999ALL * ((uint64_t)(*((void *)&v270 + 1) - (void)v269) >> 3) > v58) {
            unint64_t v58 = 0x999999999999999ALL * ((uint64_t)(*((void *)&v270 + 1) - (void)v269) >> 3);
          }
          if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)&v270 + 1) - (void)v269) >> 3) >= 0x333333333333333) {
            unint64_t v59 = 0x666666666666666;
          }
          else {
            unint64_t v59 = v58;
          }
          CFTypeRef cf = (char *)&v270 + 8;
          if (v59)
          {
            if (v59 > 0x666666666666666) {
              sub_1B4BB2D38();
            }
            long long v60 = (char *)operator new(40 * v59);
          }
          else
          {
            long long v60 = 0;
          }
          unint64_t v62 = (unint64_t *)&v60[8 * ((v54 - (uint64_t)v57) >> 3)];
          __p[0] = v60;
          __p[1] = v62;
          *(void *)&long long v265 = v62;
          *((void *)&v265 + 1) = &v60[40 * v59];
          unint64_t *v62 = v15;
          *((_DWORD *)v62 + 2) = 0;
          *((_DWORD *)v62 + 3) = v16;
          unint64_t v63 = v62 + 2;
          if (v36 < 0)
          {
            sub_1B4BCA11C(v63, v268.__r_.__value_.__l.__data_, v268.__r_.__value_.__l.__size_);
            long long v57 = v269;
            uint64_t v54 = v270;
            unint64_t v62 = (unint64_t *)__p[1];
            BOOL v61 = (void *)(v265 + 40);
            *(void *)&long long v265 = v265 + 40;
            if ((char *)v270 == v269)
            {
LABEL_119:
              v269 = (char *)v62;
              *(void *)&long long v270 = v61;
              *((void *)&v270 + 1) = *((void *)&v265 + 1);
              goto LABEL_120;
            }
          }
          else
          {
            *(_OWORD *)unint64_t v63 = *(_OWORD *)&v268.__r_.__value_.__l.__data_;
            v62[4] = v268.__r_.__value_.__r.__words[2];
            BOOL v61 = v62 + 5;
            *(void *)&long long v265 = v62 + 5;
            if ((char *)v54 == v57) {
              goto LABEL_119;
            }
          }
          unint64_t v64 = 0;
          do
          {
            double v66 = &v62[v64 / 8];
            *(v66 - 5) = *(void *)(v54 + v64 - 40);
            *((_DWORD *)v66 - 8) = *(_DWORD *)(v54 + v64 - 32);
            *((_DWORD *)v66 - 7) = *(_DWORD *)(v54 + v64 - 28);
            int v67 = &v62[v64 / 8 - 3];
            uint64_t v68 = (void **)(v54 + v64 - 24);
            if (*(char *)(v54 + v64 - 1) < 0)
            {
              sub_1B4BCA11C(v67, *v68, *(void *)(v54 + v64 - 16));
            }
            else
            {
              long long v65 = *(_OWORD *)v68;
              v62[v64 / 8 - 1] = *(void *)(v54 + v64 - 8);
              *(_OWORD *)int v67 = v65;
            }
            v64 -= 40;
          }
          while ((char *)(v54 + v64) != v57);
          long long v57 = v269;
          int v69 = (char *)v270;
          v269 = (char *)&v62[v64 / 8];
          long long v270 = v265;
          BOOL v61 = (void *)v265;
          while (v69 != v57)
          {
            if (*(v69 - 1) < 0) {
              operator delete(*((void **)v69 - 3));
            }
            v69 -= 40;
          }
LABEL_120:
          if (v57) {
            operator delete(v57);
          }
LABEL_122:
          *(void *)&long long v270 = v61;
          *(_DWORD *)uint64_t v10 = 0;
          if (SHIBYTE(v268.__r_.__value_.__r.__words[2]) < 0) {
LABEL_123:
          }
            operator delete(v268.__r_.__value_.__l.__data_);
LABEL_10:
          uint64_t v7 = v256 + 1;
        }
        while (v256 + 1 < (unint64_t)(2 * *(void *)(v3 + 104)));
      }
      uint64_t v70 = *(void *)(v3 + 56);
      uint64_t v247 = *(void *)(v3 + 64);
      if (v247 != v70)
      {
        while (1)
        {
          if (*(void *)(v70 + 40) == v248)
          {
            BOOL v76 = v269;
            uint64_t v253 = (char *)v270;
            if (v269 != (char *)v270) {
              break;
            }
          }
LABEL_132:
          v70 += 48;
          if (v70 == v247) {
            goto LABEL_216;
          }
        }
        uint64_t v257 = v70;
        while (2)
        {
          __p[0] = 0;
          __p[1] = 0;
          *(void *)&long long v265 = 0;
          uint64_t v79 = *(void *)(v70 + 8);
          uint64_t v78 = *(void *)(v70 + 16);
          if (v78 == v79)
          {
            if (MEMORY[0xFFFFFFFFFFFFFFF8] != *(void *)v76) {
              goto LABEL_174;
            }
            goto LABEL_138;
          }
          uint64_t v254 = v76;
          int v80 = 0;
          size_t v81 = 0;
          unint64_t v82 = 0;
          size_t v83 = 0;
          unint64_t v84 = 0;
          uint64_t v85 = 0;
LABEL_142:
          while (1)
          {
            int v86 = (void *)(v79 + 40 * v85);
            if ((unint64_t)v81 >= v84) {
              break;
            }
            *(void *)size_t v81 = *v86;
            v81 += 8;
            if (++v85 >= 0xCCCCCCCCCCCCCCCDLL * ((v78 - v79) >> 3)) {
              goto LABEL_169;
            }
          }
          int64_t v87 = v81 - v83;
          uint64_t v88 = (v81 - v83) >> 3;
          unint64_t v89 = v88 + 1;
          if ((unint64_t)(v88 + 1) >> 61)
          {
            __p[0] = v82;
            __p[1] = v81;
            *(void *)&long long v265 = v80;
            sub_1B4BB3244();
          }
          uint64_t v90 = v84 - (void)v83;
          if (v90 >> 2 > v89) {
            unint64_t v89 = v90 >> 2;
          }
          if ((unint64_t)v90 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v91 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v91 = v89;
          }
          if (v91)
          {
            if (v91 >> 61)
            {
              __p[0] = v82;
              *(void *)&long long v265 = v80;
              sub_1B4BB2D38();
            }
            uint64_t v92 = v79;
            uint64_t v93 = v78;
            unint64_t v94 = v91;
            id v95 = operator new(8 * v91);
            uint64_t v78 = v93;
            uint64_t v79 = v92;
            unint64_t v91 = v94;
            unint64_t v82 = &v95[8 * v88];
            *unint64_t v82 = *v86;
            uint64_t v96 = (uint64_t)(v82 + 1);
            int64_t v97 = v81 - v83;
            if (v81 != v83)
            {
LABEL_152:
              unint64_t v98 = v97 - 8;
              if (v98 < 0x168
                || (unint64_t v101 = (v81 - 8 - v83) & 0xFFFFFFFFFFFFFFF8, &v95[v87 - 8 - v101] > &v95[v87 - 8])
                || &v81[-v101 - 8] > v81 - 8
                || (unint64_t)(v83 - v95) < 0x20)
              {
                long long v99 = v81;
              }
              else
              {
                uint64_t v102 = (v98 >> 3) + 1;
                uint64_t v103 = 8 * (v102 & 0x3FFFFFFFFFFFFFFCLL);
                long long v99 = &v81[-v103];
                unint64_t v82 = (void *)((char *)v82 - v103);
                size_t v104 = &v95[v87 - 16];
                v105 = v81 - 16;
                uint64_t v106 = v102 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  long long v107 = *(_OWORD *)v105;
                  *(v104 - 1) = *((_OWORD *)v105 - 1);
                  _OWORD *v104 = v107;
                  v104 -= 2;
                  v105 -= 32;
                  v106 -= 4;
                }
                while (v106);
                if (v102 == (v102 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_155:
                  int v80 = &v95[8 * v91];
                  if (v83) {
                    goto LABEL_156;
                  }
                  goto LABEL_157;
                }
              }
              do
              {
                uint64_t v100 = *((void *)v99 - 1);
                v99 -= 8;
                *--unint64_t v82 = v100;
              }
              while (v99 != v83);
              goto LABEL_155;
            }
          }
          else
          {
            id v95 = 0;
            unint64_t v82 = (void *)(8 * v88);
            *(void *)(8 * v88) = *v86;
            uint64_t v96 = 8 * v88 + 8;
            int64_t v97 = v81 - v83;
            if (v81 != v83) {
              goto LABEL_152;
            }
          }
          int v80 = &v95[8 * v91];
          if (v83)
          {
LABEL_156:
            operator delete(v83);
            uint64_t v79 = *(void *)(v257 + 8);
            uint64_t v78 = *(void *)(v257 + 16);
          }
LABEL_157:
          size_t v83 = (char *)v82;
          unint64_t v84 = (unint64_t)v80;
          size_t v81 = (char *)v96;
          if (++v85 >= 0xCCCCCCCCCCCCCCCDLL * ((v78 - v79) >> 3))
          {
LABEL_169:
            __p[0] = v82;
            *(void *)&long long v265 = v80;
            uint64_t v108 = *((void *)v81 - 1);
            BOOL v76 = v254;
            uint64_t v109 = *(void *)v254;
            if (v82)
            {
              __p[1] = v82;
              operator delete(v82);
            }
            uint64_t v3 = (uint64_t)a1;
            uint64_t v70 = v257;
            if (v108 != v109)
            {
LABEL_174:
              uint64_t v110 = *(void *)(v3 + 136);
              *(void *)(v3 + 136) = v110 + 1;
              __p[0] = *(void **)v70;
              long long v265 = 0uLL;
              __p[1] = 0;
              sub_1B4C69FE0(&__p[1], *(void *)(v70 + 8), *(void *)(v70 + 16), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(v70 + 16) - *(void *)(v70 + 8)) >> 3));
              CFTypeRef cf = CFRetain(*(CFTypeRef *)(v70 + 32));
              uint64_t v267 = v110;
              uint64_t v111 = v265;
              if ((unint64_t)v265 >= *((void *)&v265 + 1))
              {
                *(void *)&long long v265 = sub_1B4C6A518((char **)&__p[1], (uint64_t)v76);
                CFTypeRef v114 = cf;
                if (!cf) {
                  goto LABEL_180;
                }
                goto LABEL_179;
              }
              *(void *)long long v265 = *(void *)v76;
              *(_DWORD *)(v111 + 8) = *((_DWORD *)v76 + 2);
              *(_DWORD *)(v111 + 12) = *((_DWORD *)v76 + 3);
              int v112 = (unsigned char *)(v111 + 16);
              if ((v76[39] & 0x80000000) == 0)
              {
                long long v113 = *((_OWORD *)v76 + 1);
                *(void *)(v111 + 32) = *((void *)v76 + 4);
                *(_OWORD *)int v112 = v113;
                *(void *)&long long v265 = v111 + 40;
                CFTypeRef v114 = cf;
                if (!cf) {
                  goto LABEL_180;
                }
LABEL_179:
                CFRelease(v114);
                CFTypeRef cf = 0;
                goto LABEL_180;
              }
              sub_1B4BCA11C(v112, *((void **)v76 + 2), *((void *)v76 + 3));
              *(void *)&long long v265 = v111 + 40;
              CFTypeRef v114 = cf;
              if (cf) {
                goto LABEL_179;
              }
LABEL_180:
              CFTypeRef cf = CFRetain(v251);
              float v115 = logf(*((float *)v76 + 3));
              __p[0] = (void *)COERCE_UNSIGNED_INT(*(float *)__p + v115);
              if ((sub_1B4C42D38(v3, (const char *)__p, v116, v117) & 1) == 0)
              {
                unint64_t v118 = *(void *)(v3 + 88);
                if (v118 >= *(void *)(v3 + 96))
                {
                  uint64_t v119 = sub_1B4C436A8(v250, (uint64_t)__p);
                }
                else
                {
                  *(void **)unint64_t v118 = __p[0];
                  *(void *)(v118 + 8) = 0;
                  *(void *)(v118 + 16) = 0;
                  *(void *)(v118 + 24) = 0;
                  sub_1B4C69FE0((unsigned char *)(v118 + 8), (uint64_t)__p[1], v265, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v265 - (unint64_t)__p[1]) >> 3));
                  *(void *)(v118 + 32) = CFRetain(cf);
                  *(void *)(v118 + 40) = v267;
                  uint64_t v119 = v118 + 48;
                  *(void *)(v3 + 88) = v118 + 48;
                }
                *(void *)(v3 + 88) = v119;
              }
              if (cf)
              {
                CFRelease(cf);
                CFTypeRef cf = 0;
              }
              uint64_t v120 = (void **)__p[1];
              if (__p[1])
              {
                uint64_t v121 = (void **)v265;
                uint64_t v77 = __p[1];
                if ((void *)v265 != __p[1])
                {
                  do
                  {
                    if (*((char *)v121 - 1) < 0) {
                      operator delete(*(v121 - 3));
                    }
                    v121 -= 5;
                  }
                  while (v121 != v120);
                  uint64_t v77 = __p[1];
                }
                *(void *)&long long v265 = v120;
                operator delete(v77);
              }
            }
LABEL_138:
            v76 += 40;
            if (v76 == v253) {
              goto LABEL_132;
            }
            continue;
          }
          goto LABEL_142;
        }
      }
      CFTypeRef v72 = (float *)v269;
      int v71 = (float *)v270;
      if (v269 == (char *)v270)
      {
        uint64_t v73 = v246;
        if (!v269) {
          goto LABEL_217;
        }
      }
      else
      {
        do
        {
          uint64_t v123 = *(void *)(v3 + 136);
          *(void *)(v3 + 136) = v123 + 1;
          *(_OWORD *)std::__fs::filesystem::path __p = 0u;
          long long v265 = 0u;
          CFTypeRef cf = 0;
          uint64_t v267 = v123;
          *(void *)&long long v265 = sub_1B4C6A518((char **)&__p[1], (uint64_t)v72);
          if (cf)
          {
            CFRelease(cf);
            CFTypeRef cf = 0;
          }
          CFTypeRef cf = CFRetain(v251);
          float v124 = logf(v72[3]);
          __p[0] = (void *)COERCE_UNSIGNED_INT(*(float *)__p + v124);
          if ((sub_1B4C42D38(v3, (const char *)__p, v125, v126) & 1) == 0)
          {
            unint64_t v127 = *(void *)(v3 + 88);
            if (v127 >= *(void *)(v3 + 96))
            {
              uint64_t v128 = sub_1B4C436A8(v250, (uint64_t)__p);
            }
            else
            {
              *(void **)unint64_t v127 = __p[0];
              *(void *)(v127 + 8) = 0;
              *(void *)(v127 + 16) = 0;
              *(void *)(v127 + 24) = 0;
              sub_1B4C69FE0((unsigned char *)(v127 + 8), (uint64_t)__p[1], v265, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v265 - (unint64_t)__p[1]) >> 3));
              *(void *)(v127 + 32) = CFRetain(cf);
              *(void *)(v127 + 40) = v267;
              uint64_t v128 = v127 + 48;
              *(void *)(v3 + 88) = v127 + 48;
            }
            *(void *)(v3 + 88) = v128;
          }
          if (cf)
          {
            CFRelease(cf);
            CFTypeRef cf = 0;
          }
          uint64_t v129 = (void **)__p[1];
          if (__p[1])
          {
            uint64_t v130 = (void **)v265;
            uint64_t v122 = __p[1];
            if ((void *)v265 != __p[1])
            {
              do
              {
                if (*((char *)v130 - 1) < 0) {
                  operator delete(*(v130 - 3));
                }
                v130 -= 5;
              }
              while (v130 != v129);
              uint64_t v122 = __p[1];
            }
            *(void *)&long long v265 = v129;
            operator delete(v122);
          }
          v72 += 10;
        }
        while (v72 != v71);
LABEL_216:
        CFTypeRef v72 = (float *)v269;
        uint64_t v73 = v246;
        if (!v269)
        {
LABEL_217:
          int v75 = v258;
          if (!v258) {
            goto LABEL_3;
          }
          goto LABEL_220;
        }
      }
      size_t v74 = (float *)v270;
      if ((float *)v270 == v72)
      {
        *(void *)&long long v270 = v72;
        operator delete(v72);
        int v75 = v258;
        if (!v258) {
          goto LABEL_3;
        }
      }
      else
      {
        do
        {
          if (*((char *)v74 - 1) < 0) {
            operator delete(*((void **)v74 - 3));
          }
          v74 -= 10;
        }
        while (v74 != v72);
        *(void *)&long long v270 = v72;
        operator delete(v269);
        int v75 = v258;
        if (!v258) {
          goto LABEL_3;
        }
      }
LABEL_220:
      operator delete(v75);
LABEL_3:
      uint64_t v4 = v73 + 4;
    }
    while (v4 != v244);
  }
  uint64_t v131 = *(void *)(v3 + 80);
  uint64_t v255 = (void *)(v3 + 80);
  v132 = *(void ***)(v3 + 88);
  if ((void **)v131 != v132)
  {
    double v133 = -*(float *)(v3 + 112);
    uint64_t v134 = *(void *)(v3 + 80);
    do
    {
      long double v135 = exp2(*(float *)v134 * 1.44269504);
      long double v136 = pow((double)(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(v134 + 16) - *(void *)(v134 + 8)) >> 3)), v133);
      float v137 = pow(v135, v136);
      *(float *)(v134 + 4) = v137;
      v134 += 48;
    }
    while ((void **)v134 != v132);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)v132 - v131) >> 4) >= *(void *)(v3 + 104)) {
    uint64_t v138 = *(void *)(v3 + 104);
  }
  else {
    uint64_t v138 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v132 - v131) >> 4);
  }
  if (v138)
  {
    unint64_t v139 = (void **)(v131 + 48 * v138);
    if (v138 >= 2)
    {
      unint64_t v140 = (unint64_t)(v138 - 2) >> 1;
      unint64_t v141 = v140 + 1;
      uint64_t v142 = v131 + 48 * v140;
      do
      {
        sub_1B4C438A0(v131, v138, v142);
        v142 -= 48;
        --v141;
      }
      while (v141);
    }
    if (v139 != v132)
    {
      uint64_t v143 = v131 + 48 * v138;
      do
      {
        if (*(float *)(v143 + 4) > *(float *)(v131 + 4))
        {
          sub_1B4C69A48((uint64_t)__p, v143);
          if (v143 != v131) {
            sub_1B4C6A1D0((void **)(v143 + 8), *(void *)(v131 + 8), *(void *)(v131 + 16), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(v131 + 16) - *(void *)(v131 + 8)) >> 3));
          }
          uint64_t v145 = *(const void **)(v143 + 32);
          if (v145)
          {
            CFRelease(v145);
            *(void *)(v143 + 32) = 0;
          }
          *(void *)(v143 + 32) = CFRetain(*(CFTypeRef *)(v131 + 32));
          *(void *)uint64_t v143 = *(void *)v131;
          *(void *)(v143 + 40) = *(void *)(v131 + 40);
          if ((void **)v131 != __p) {
            sub_1B4C6A1D0((void **)(v131 + 8), (uint64_t)__p[1], v265, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v265 - (unint64_t)__p[1]) >> 3));
          }
          uint64_t v146 = *(const void **)(v131 + 32);
          if (v146)
          {
            CFRelease(v146);
            *(void *)(v131 + 32) = 0;
          }
          *(void *)(v131 + 32) = CFRetain(cf);
          *(void **)uint64_t v131 = __p[0];
          CFTypeRef v147 = cf;
          *(void *)(v131 + 40) = v267;
          if (v147)
          {
            CFRelease(v147);
            CFTypeRef cf = 0;
          }
          uint64_t v148 = (void **)__p[1];
          if (__p[1])
          {
            int v149 = (void **)v265;
            uint64_t v144 = __p[1];
            if ((void *)v265 != __p[1])
            {
              do
              {
                if (*((char *)v149 - 1) < 0) {
                  operator delete(*(v149 - 3));
                }
                v149 -= 5;
              }
              while (v149 != v148);
              uint64_t v144 = __p[1];
            }
            *(void *)&long long v265 = v148;
            operator delete(v144);
          }
          sub_1B4C438A0(v131, v138, v131);
        }
        v143 += 48;
      }
      while ((void **)v143 != v132);
    }
    if (v138 >= 2)
    {
      int64_t v150 = 48 * v138 / 0x30uLL;
      do
      {
        sub_1B4C69A48((uint64_t)&v258, v131);
        uint64_t v153 = 0;
        uint64_t v154 = v131;
        do
        {
          uint64_t v155 = v154 + 48 * v153 + 48;
          uint64_t v156 = 2 * v153;
          uint64_t v153 = (2 * v153) | 1;
          if (v156 + 2 < v150)
          {
            float v157 = *(float *)(v155 + 4);
            float v158 = *(float *)(v155 + 52);
            v155 += 48 * (v157 > v158);
            if (v157 > v158) {
              uint64_t v153 = v156 + 2;
            }
          }
          if (v154 != v155) {
            sub_1B4C6A1D0((void **)(v154 + 8), *(void *)(v155 + 8), *(void *)(v155 + 16), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(v155 + 16) - *(void *)(v155 + 8)) >> 3));
          }
          uint64_t v159 = *(const void **)(v154 + 32);
          if (v159)
          {
            CFRelease(v159);
            *(void *)(v154 + 32) = 0;
          }
          *(void *)(v154 + 32) = CFRetain(*(CFTypeRef *)(v155 + 32));
          *(void *)uint64_t v154 = *(void *)v155;
          *(void *)(v154 + 40) = *(void *)(v155 + 40);
          uint64_t v154 = v155;
        }
        while (v153 <= (uint64_t)((unint64_t)(v150 - 2) >> 1));
        uint64_t v160 = v139 - 6;
        if ((void **)v155 == v139 - 6)
        {
          if ((void **)v155 != &v258) {
            sub_1B4C6A1D0((void **)(v155 + 8), (uint64_t)v259, (uint64_t)v260, 0xCCCCCCCCCCCCCCCDLL * (((char *)v260 - (unsigned char *)v259) >> 3));
          }
          CFArrayRef v173 = *(const void **)(v155 + 32);
          if (v173)
          {
            CFRelease(v173);
            *(void *)(v155 + 32) = 0;
          }
          *(void *)(v155 + 32) = CFRetain(v262);
          *(void *)uint64_t v155 = v258;
          *(void *)(v155 + 40) = v263;
        }
        else
        {
          sub_1B4C6A1D0((void **)(v155 + 8), (uint64_t)*(v139 - 5), (uint64_t)*(v139 - 4), 0xCCCCCCCCCCCCCCCDLL * (((unsigned char *)*(v139 - 4) - (unsigned char *)*(v139 - 5)) >> 3));
          uint64_t v161 = *(const void **)(v155 + 32);
          if (v161)
          {
            CFRelease(v161);
            *(void *)(v155 + 32) = 0;
          }
          *(void *)(v155 + 32) = CFRetain(*(v139 - 2));
          *(void *)uint64_t v155 = *(v139 - 6);
          *(void *)(v155 + 40) = *(v139 - 1);
          if (v160 != &v258) {
            sub_1B4C6A1D0(v139 - 5, (uint64_t)v259, (uint64_t)v260, 0xCCCCCCCCCCCCCCCDLL * (((char *)v260 - (unsigned char *)v259) >> 3));
          }
          v162 = *(v139 - 2);
          if (v162)
          {
            CFRelease(v162);
            *(v139 - 2) = 0;
          }
          *(v139 - 2) = (void *)CFRetain(v262);
          *(v139 - 6) = v258;
          *(v139 - 1) = v263;
          uint64_t v163 = v155 - v131 + 48;
          if (v163 >= 49)
          {
            unint64_t v164 = (v163 / 0x30uLL - 2) >> 1;
            unint64_t v165 = v131 + 48 * v164;
            if (*(float *)(v165 + 4) > *(float *)(v155 + 4))
            {
              sub_1B4C69A48((uint64_t)__p, v155);
              do
              {
                uint64_t v166 = v165;
                if (v155 != v165) {
                  sub_1B4C6A1D0((void **)(v155 + 8), *(void *)(v165 + 8), *(void *)(v165 + 16), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(v165 + 16) - *(void *)(v165 + 8)) >> 3));
                }
                v167 = *(const void **)(v155 + 32);
                if (v167)
                {
                  CFRelease(v167);
                  *(void *)(v155 + 32) = 0;
                }
                *(void *)(v155 + 32) = CFRetain(*(CFTypeRef *)(v165 + 32));
                *(void *)uint64_t v155 = *(void *)v165;
                *(void *)(v155 + 40) = *(void *)(v165 + 40);
                if (!v164) {
                  break;
                }
                unint64_t v164 = (v164 - 1) >> 1;
                unint64_t v165 = v131 + 48 * v164;
                uint64_t v155 = v166;
              }
              while (*(float *)(v165 + 4) > *((float *)__p + 1));
              if ((void **)v166 != __p) {
                sub_1B4C6A1D0((void **)(v166 + 8), (uint64_t)__p[1], v265, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v265 - (unint64_t)__p[1]) >> 3));
              }
              CFIndex v168 = *(const void **)(v166 + 32);
              if (v168)
              {
                CFRelease(v168);
                *(void *)(v166 + 32) = 0;
              }
              *(void *)(v166 + 32) = CFRetain(cf);
              *(void **)uint64_t v166 = __p[0];
              CFTypeRef v169 = cf;
              *(void *)(v166 + 40) = v267;
              if (v169)
              {
                CFRelease(v169);
                CFTypeRef cf = 0;
              }
              id v170 = (void **)__p[1];
              if (__p[1])
              {
                unint64_t v171 = (void **)v265;
                if ((void *)v265 == __p[1])
                {
                  *(void **)&long long v265 = __p[1];
                  operator delete(__p[1]);
                  CFTypeRef v172 = v262;
                  if (!v262) {
                    goto LABEL_304;
                  }
                }
                else
                {
                  do
                  {
                    if (*((char *)v171 - 1) < 0) {
                      operator delete(*(v171 - 3));
                    }
                    v171 -= 5;
                  }
                  while (v171 != v170);
                  *(void *)&long long v265 = v170;
                  operator delete(__p[1]);
                  CFTypeRef v172 = v262;
                  if (!v262) {
                    goto LABEL_304;
                  }
                }
LABEL_303:
                CFRelease(v172);
                CFTypeRef v262 = 0;
                goto LABEL_304;
              }
            }
          }
        }
        CFTypeRef v172 = v262;
        if (v262) {
          goto LABEL_303;
        }
LABEL_304:
        v174 = (std::string *)v259;
        if (v259)
        {
          v175 = v260;
          int v151 = v259;
          if (v260 != v259)
          {
            do
            {
              if (SHIBYTE(v175[-1].__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v175[-1].__r_.__value_.__l.__data_);
              }
              v175 = (std::string *)((char *)v175 - 40);
            }
            while (v175 != v174);
            int v151 = v259;
          }
          v260 = v174;
          operator delete(v151);
        }
        unint64_t v139 = v160;
      }
      while (v150-- > 2);
    }
  }
  uint64_t v176 = a1;
  uint64_t v177 = a1[11];
  uint64_t v178 = a1[10] + 48 * v138;
  if (v178 != v177)
  {
    while (v177 != v178)
    {
      v180 = *(const void **)(v177 - 16);
      if (v180)
      {
        CFRelease(v180);
        *(void *)(v177 - 16) = 0;
      }
      uint64_t v181 = *(void *)(v177 - 40);
      if (v181)
      {
        uint64_t v182 = *(void *)(v177 - 32);
        id v179 = *(void **)(v177 - 40);
        if (v182 != v181)
        {
          do
          {
            if (*(char *)(v182 - 1) < 0) {
              operator delete(*(void **)(v182 - 24));
            }
            v182 -= 40;
          }
          while (v182 != v181);
          id v179 = *(void **)(v177 - 40);
        }
        *(void *)(v177 - 32) = v181;
        operator delete(v179);
      }
      v177 -= 48;
    }
    a1[11] = v178;
  }
  long long v183 = (void **)(a1 + 7);
  uint64_t v184 = a1[7];
  if (v184)
  {
    uint64_t v185 = a1[8];
    uint64_t v186 = (void *)a1[7];
    if (v185 != v184)
    {
      do
      {
        uint64_t v188 = *(const void **)(v185 - 16);
        if (v188)
        {
          CFRelease(v188);
          *(void *)(v185 - 16) = 0;
        }
        uint64_t v189 = *(void *)(v185 - 40);
        if (v189)
        {
          uint64_t v190 = *(void *)(v185 - 32);
          uint64_t v187 = *(void **)(v185 - 40);
          if (v190 != v189)
          {
            do
            {
              if (*(char *)(v190 - 1) < 0) {
                operator delete(*(void **)(v190 - 24));
              }
              v190 -= 40;
            }
            while (v190 != v189);
            uint64_t v187 = *(void **)(v185 - 40);
          }
          *(void *)(v185 - 32) = v189;
          operator delete(v187);
        }
        v185 -= 48;
      }
      while (v185 != v184);
      uint64_t v186 = *v183;
    }
    a1[8] = v184;
    operator delete(v186);
    char *v183 = 0;
    a1[8] = 0;
    a1[9] = 0;
    uint64_t v178 = a1[11];
  }
  uint64_t v191 = a1[12];
  unint64_t v192 = (void *)a1[10];
  a1[7] = v192;
  a1[8] = v178;
  a1[9] = v191;
  v255[1] = 0;
  v255[2] = 0;
  *uint64_t v255 = 0;
  a3[1] = 0;
  a3[2] = 0;
  for (*a3 = 0; v192 != (void *)v178; v192 += 6)
  {
    while (1)
    {
      uint64_t v194 = *(void *)(v192[2] - 40);
      if (v194 != v176[16]) {
        break;
      }
      unint64_t v196 = v176[11];
      unint64_t v195 = v176[12];
      if (v196 < v195)
      {
        sub_1B4C69A48(v176[11], (uint64_t)v192);
        unint64_t v193 = v196 + 48;
        v176[11] = v196 + 48;
LABEL_346:
        v176[11] = v193;
        v192 += 6;
        if (v192 == (void *)v178) {
          return;
        }
      }
      else
      {
        unint64_t v197 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v196 - *v255) >> 4);
        unint64_t v198 = v197 + 1;
        if (v197 + 1 > 0x555555555555555) {
          sub_1B4C434F8();
        }
        unint64_t v199 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v195 - *v255) >> 4);
        if (2 * v199 > v198) {
          unint64_t v198 = 2 * v199;
        }
        if (v199 >= 0x2AAAAAAAAAAAAAALL) {
          unint64_t v200 = 0x555555555555555;
        }
        else {
          unint64_t v200 = v198;
        }
        CFTypeRef cf = a1 + 12;
        if (v200)
        {
          if (v200 > 0x555555555555555) {
            sub_1B4BB2D38();
          }
          uint64_t v201 = (char *)operator new(48 * v200);
        }
        else
        {
          uint64_t v201 = 0;
        }
        __p[0] = v201;
        __p[1] = &v201[48 * v197];
        *(void **)&long long v265 = __p[1];
        *((void *)&v265 + 1) = &v201[48 * v200];
        sub_1B4C69A48((uint64_t)__p[1], (uint64_t)v192);
        int64_t v213 = (char *)__p[1];
        unint64_t v193 = v265 + 48;
        *(void *)&long long v265 = v265 + 48;
        unint64_t v214 = (char *)v176[10];
        v215 = (char *)v176[11];
        if (v215 == v214)
        {
          v176[10] = __p[1];
          v176[11] = v193;
          v176[12] = *((void *)&v265 + 1);
        }
        else
        {
          uint64_t v216 = 0;
          do
          {
            uint64_t v217 = *(void *)&v215[v216 - 48];
            *(void *)&v213[v216 - 40] = 0;
            uint64_t v218 = (uint64_t)&v213[v216 - 40];
            *(void *)(v218 - 8) = v217;
            *(void *)(v218 + 8) = 0;
            *(void *)(v218 + 16) = 0;
            sub_1B4C69FE0((unsigned char *)v218, *(void *)&v215[v216 - 40], *(void *)&v215[v216 - 32], 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)&v215[v216 - 32] - *(void *)&v215[v216 - 40]) >> 3));
            CFTypeRef v219 = CFRetain(*(CFTypeRef *)&v215[v216 - 16]);
            v220 = &v213[v216];
            *((void *)v220 - 2) = v219;
            *((void *)v220 - 1) = *(void *)&v215[v216 - 8];
            v216 -= 48;
          }
          while (&v215[v216] != v214);
          v215 = (char *)v176[10];
          v221 = (char *)v176[11];
          v176[10] = &v213[v216];
          unint64_t v222 = v265;
          *(_OWORD *)(v176 + 11) = v265;
          unint64_t v193 = v222;
          while (v221 != v215)
          {
            uint64_t v224 = (const void *)*((void *)v221 - 2);
            if (v224)
            {
              CFRelease(v224);
              *((void *)v221 - 2) = 0;
            }
            uint64_t v225 = *((void *)v221 - 5);
            if (v225)
            {
              uint64_t v226 = *((void *)v221 - 4);
              long long v223 = (void *)*((void *)v221 - 5);
              if (v226 != v225)
              {
                do
                {
                  if (*(char *)(v226 - 1) < 0) {
                    operator delete(*(void **)(v226 - 24));
                  }
                  v226 -= 40;
                }
                while (v226 != v225);
                long long v223 = (void *)*((void *)v221 - 5);
              }
              *((void *)v221 - 4) = v225;
              operator delete(v223);
            }
            v221 -= 48;
          }
        }
        if (!v215) {
          goto LABEL_346;
        }
        operator delete(v215);
        v176[11] = v193;
        v192 += 6;
        if (v192 == (void *)v178) {
          return;
        }
      }
    }
    v202 = (const void *)v192[4];
    uint64_t v203 = v192[5];
    sub_1B4C69BA4((uint64_t)v192, &v269);
    long long v205 = (char *)a3[1];
    uint64_t v204 = (char *)a3[2];
    if (v205 >= v204)
    {
      unint64_t v208 = 0xAAAAAAAAAAAAAAABLL * ((v205 - (unsigned char *)*a3) >> 4);
      unint64_t v209 = v208 + 1;
      if (v208 + 1 > 0x555555555555555) {
        sub_1B4C434F8();
      }
      unint64_t v210 = 0xAAAAAAAAAAAAAAABLL * ((v204 - (unsigned char *)*a3) >> 4);
      if (2 * v210 > v209) {
        unint64_t v209 = 2 * v210;
      }
      if (v210 >= 0x2AAAAAAAAAAAAAALL) {
        unint64_t v211 = 0x555555555555555;
      }
      else {
        unint64_t v211 = v209;
      }
      CFTypeRef cf = a3 + 2;
      if (v211)
      {
        if (v211 > 0x555555555555555) {
          sub_1B4BB2D38();
        }
        v212 = (char *)operator new(48 * v211);
      }
      else
      {
        v212 = 0;
      }
      __p[0] = v212;
      __p[1] = &v212[48 * v208];
      *(void **)&long long v265 = __p[1];
      *((void *)&v265 + 1) = &v212[48 * v211];
      sub_1B4C43374((void *)__p[1], v194, v202, v203, (uint64_t)&v269);
      v227 = __p[1];
      uint64_t v228 = (void *)(v265 + 48);
      *(void *)&long long v265 = v265 + 48;
      v229 = (CFTypeRef *)*a3;
      v230 = (CFTypeRef *)a3[1];
      v268.__r_.__value_.__l.__data_ = (std::string::pointer)__p[1];
      v268.__r_.__value_.__l.__size_ = (std::string::size_type)__p[1];
      long long v271 = *(_OWORD *)&v268.__r_.__value_.__l.__data_;
      v258 = a3 + 2;
      unint64_t v259 = &v271;
      v260 = &v268;
      char v261 = 0;
      if (v230 == v229)
      {
        *a3 = __p[1];
        a3[1] = v228;
        a3[2] = (void *)*((void *)&v265 + 1);
      }
      else
      {
        uint64_t v231 = v230;
        do
        {
          uint64_t v232 = (uint64_t)*(v231 - 6);
          v231 -= 6;
          *(v227 - 6) = v232;
          CFTypeRef v233 = CFRetain(v231[1]);
          uint64_t v234 = (uint64_t)*(v230 - 4);
          *(v227 - 3) = 0;
          v235 = (char *)(v227 - 3);
          *(v227 - 5) = v233;
          *(v227 - 4) = v234;
          *((void *)v235 + 1) = 0;
          *((void *)v235 + 2) = 0;
          unint64_t v237 = *(v230 - 3);
          v236 = *(v230 - 2);
          int64_t v238 = v236 - v237;
          if (v236 != v237)
          {
            if (v238 < 0) {
              sub_1B4BB3244();
            }
            v239 = (char *)operator new(v236 - v237);
            *(v227 - 3) = v239;
            *(v227 - 2) = v239;
            unint64_t v240 = &v239[8 * (v238 >> 3)];
            *(v227 - 1) = v240;
            memcpy(v239, v237, v238);
            *(v227 - 2) = v240;
          }
          v227 = (void *)(v268.__r_.__value_.__l.__size_ - 48);
          v268.__r_.__value_.__l.__size_ -= 48;
          v230 = v231;
        }
        while (v231 != v229);
        v230 = (CFTypeRef *)*a3;
        int64_t v241 = (CFTypeRef *)a3[1];
        *a3 = v227;
        a3[1] = v228;
        a3[2] = (void *)*((void *)&v265 + 1);
        while (v241 != v230)
        {
          unint64_t v242 = *(v241 - 5);
          if (v242)
          {
            CFRelease(v242);
            *(v241 - 5) = 0;
          }
          uint64_t v243 = (void *)*(v241 - 3);
          if (v243)
          {
            *(v241 - 2) = v243;
            operator delete(v243);
          }
          v241 -= 6;
        }
      }
      if (v230) {
        operator delete(v230);
      }
      uint64_t v176 = a1;
      a3[1] = v228;
      v207 = v269;
      if (!v269) {
        continue;
      }
    }
    else
    {
      sub_1B4C43374(a3[1], v194, v202, v203, (uint64_t)&v269);
      uint64_t v206 = v205 + 48;
      a3[1] = v206;
      a3[1] = v206;
      v207 = v269;
      if (!v269) {
        continue;
      }
    }
    *(void *)&long long v270 = v207;
    operator delete(v207);
  }
}

void sub_1B4C42918(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11)
{
}

void sub_1B4C42930(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  uint64_t v33 = *(void **)(v31 - 168);
  if (v33)
  {
    *(void *)(v31 - 160) = v33;
    operator delete(v33);
  }
  sub_1B4C2CCD4(a11);
  _Unwind_Resume(a1);
}

void sub_1B4C42B78()
{
}

void sub_1B4C42BF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  sub_1B4C69B1C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1B4C42C08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  for (; v32; v32 += 40)
  {
    if (*(char *)(v31 + v32 + 39) < 0) {
      operator delete(*(void **)(v31 + v32 + 16));
    }
  }
  sub_1B4C43640((uint64_t)&a31);
  if (*(char *)(v33 - 169) < 0) {
    JUMPOUT(0x1B4C42CD8);
  }
  JUMPOUT(0x1B4C42CDCLL);
}

void sub_1B4C42C4C()
{
}

void sub_1B4C42C54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void **a32,void **a33)
{
  if (a32)
  {
    uint64_t v35 = a33;
    int v36 = a32;
    if (a33 != a32)
    {
      do
      {
        if (*((char *)v35 - 1) < 0) {
          operator delete(*(v35 - 3));
        }
        v35 -= 5;
      }
      while (v35 != a32);
      int v36 = a32;
    }
    operator delete(v36);
  }
  uint64_t v37 = *(void *)(v33 - 168);
  if (v37)
  {
    uint64_t v38 = *(void *)(v33 - 160);
    int64_t v39 = *(void **)(v33 - 168);
    if (v38 != v37)
    {
      do
      {
        if (*(char *)(v38 - 1) < 0) {
          operator delete(*(void **)(v38 - 24));
        }
        v38 -= 40;
      }
      while (v38 != v37);
      int64_t v39 = *(void **)(v33 - 168);
    }
    *(void *)(v33 - 160) = v37;
    operator delete(v39);
  }
  if (a25) {
    operator delete(a25);
  }
  _Unwind_Resume(a1);
}

void sub_1B4C42CB0()
{
  if (v0) {
    JUMPOUT(0x1B4C42CD8);
  }
  JUMPOUT(0x1B4C42CDCLL);
}

uint64_t sub_1B4C42D38(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  if (!objc_msgSend_count(*(void **)(a1 + 48), a2, a3, a4)) {
    return 0;
  }
  uint64_t v6 = NSString;
  sub_1B4C69E0C((uint64_t)a2, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    objc_msgSend_stringWithUTF8String_(v6, v7, (uint64_t)&__p, v8);
  }
  else {
  uint64_t v12 = objc_msgSend_stringWithUTF8String_(v6, v7, (uint64_t)__p.__r_.__value_.__l.__data_, v8);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v13 = objc_msgSend_length(v12, v9, v10, v11);
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  id v14 = *(id *)(a1 + 48);
  uint64_t v17 = objc_msgSend_countByEnumeratingWithState_objects_count_(v14, v15, (uint64_t)&v22, (uint64_t)v27, 16);
  if (v17)
  {
    uint64_t v18 = *(void *)v23;
    while (2)
    {
      uint64_t v19 = 0;
      do
      {
        if (*(void *)v23 != v18) {
          objc_enumerationMutation(v14);
        }
        if (objc_msgSend_rangeOfFirstMatchInString_options_range_(*(void **)(*((void *)&v22 + 1) + 8 * v19), v16, (uint64_t)v12, 0, 0, v13, (void)v22) != 0x7FFFFFFFFFFFFFFFLL)
        {
          uint64_t v20 = 1;
          goto LABEL_17;
        }
        ++v19;
      }
      while (v17 != v19);
      uint64_t v17 = objc_msgSend_countByEnumeratingWithState_objects_count_(v14, v16, (uint64_t)&v22, (uint64_t)v27, 16);
      if (v17) {
        continue;
      }
      break;
    }
  }
  uint64_t v20 = 0;
LABEL_17:

  return v20;
}

void sub_1B4C42EE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  _Unwind_Resume(a1);
}

void sub_1B4C42F2C(void *a1)
{
  uint64_t v2 = a1[7];
  for (uint64_t i = a1[8]; i != v2; i -= 48)
  {
    uint64_t v5 = *(const void **)(i - 16);
    if (v5)
    {
      CFRelease(v5);
      *(void *)(i - 16) = 0;
    }
    uint64_t v6 = *(void *)(i - 40);
    if (v6)
    {
      uint64_t v7 = *(void *)(i - 32);
      uint64_t v4 = *(void **)(i - 40);
      if (v7 != v6)
      {
        do
        {
          if (*(char *)(v7 - 1) < 0) {
            operator delete(*(void **)(v7 - 24));
          }
          v7 -= 40;
        }
        while (v7 != v6);
        uint64_t v4 = *(void **)(i - 40);
      }
      *(void *)(i - 32) = v6;
      operator delete(v4);
    }
  }
  a1[8] = v2;
  uint64_t v8 = a1[10];
  for (uint64_t j = a1[11]; j != v8; j -= 48)
  {
    uint64_t v11 = *(const void **)(j - 16);
    if (v11)
    {
      CFRelease(v11);
      *(void *)(j - 16) = 0;
    }
    uint64_t v12 = *(void *)(j - 40);
    if (v12)
    {
      uint64_t v13 = *(void *)(j - 32);
      uint64_t v10 = *(void **)(j - 40);
      if (v13 != v12)
      {
        do
        {
          if (*(char *)(v13 - 1) < 0) {
            operator delete(*(void **)(v13 - 24));
          }
          v13 -= 40;
        }
        while (v13 != v12);
        uint64_t v10 = *(void **)(j - 40);
      }
      *(void *)(j - 32) = v12;
      operator delete(v10);
    }
  }
  a1[11] = v8;
  a1[17] = 1;
}

void *sub_1B4C4304C(void *a1, CFTypeRef cf)
{
  *a1 = cf;
  if (cf)
  {
    CFTypeID v3 = CFGetTypeID(cf);
    if (v3 != CFArrayGetTypeID())
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
  }
  return a1;
}

void sub_1B4C430D4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v2);
  if (*v1) {
    CFRelease(*v1);
  }
  _Unwind_Resume(a1);
}

void sub_1B4C43104(uint64_t a1, char *a2)
{
  if (a2)
  {
    sub_1B4C43104(a1, *(void *)a2);
    sub_1B4C43104(a1, *((void *)a2 + 1));
    if (a2[63] < 0)
    {
      operator delete(*((void **)a2 + 5));
      uint64_t v4 = a2;
    }
    else
    {
      uint64_t v4 = a2;
    }
    operator delete(v4);
  }
}

void sub_1B4C43188(uint64_t a1, char *a2)
{
  if (a2)
  {
    sub_1B4C43188(a1, *(void *)a2);
    sub_1B4C43188(a1, *((void *)a2 + 1));
    if (a2[55] < 0)
    {
      operator delete(*((void **)a2 + 4));
      uint64_t v4 = a2;
    }
    else
    {
      uint64_t v4 = a2;
    }
    operator delete(v4);
  }
}

unint64_t sub_1B4C4320C@<X0>(const __CFArray *a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  if (!a1 || CFArrayGetCount(a1) <= a2 || (CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(a1, a2)) == 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1B4C4330C(exception);
    goto LABEL_10;
  }
  CFTypeID TypeID = CFStringGetTypeID();
  if (TypeID != CFGetTypeID(ValueAtIndex))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1B4C31770(exception);
LABEL_10:
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  return sub_1B4C31780(ValueAtIndex, a3);
}

void sub_1B4C432DC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1B4C432F8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::runtime_error *sub_1B4C4330C@<X0>(std::runtime_error *a1@<X8>)
{
  return std::runtime_error::runtime_error(a1, "Could not find item");
}

uint64_t sub_1B4C4331C(uint64_t a1)
{
  sub_1B4C43188(*(void *)a1, *(char **)(a1 + 16));
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 16);
    if (v3)
    {
      do
      {
        uint64_t v2 = v3;
        uint64_t v3 = *(void *)(v3 + 16);
      }
      while (v3);
      *(void *)(a1 + 8) = v2;
    }
    sub_1B4C43188(*(void *)a1, (char *)v2);
  }
  return a1;
}

void sub_1B4C43374(void *a1, uint64_t a2, CFTypeRef cf, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = *(unsigned char **)a5;
  uint64_t v8 = *(unsigned char **)(a5 + 8);
  *(void *)(a5 + 8) = 0;
  *(void *)(a5 + 16) = 0;
  *(void *)a5 = 0;
  *a1 = a2;
  CFTypeRef v9 = CFRetain(cf);
  a1[3] = 0;
  a1[1] = v9;
  a1[2] = a4;
  a1[4] = 0;
  a1[5] = 0;
  uint64_t v10 = v8 - v7;
  if (v8 != v7)
  {
    if (v10 < 0) {
      sub_1B4BB3244();
    }
    uint64_t v11 = (char *)operator new(v8 - v7);
    a1[3] = v11;
    a1[4] = v11;
    uint64_t v12 = &v11[8 * (v10 >> 3)];
    a1[5] = v12;
    memcpy(v11, v7, v8 - v7);
    a1[4] = v12;
  }
  if (v7)
  {
    operator delete(v7);
  }
}

void sub_1B4C4343C(_Unwind_Exception *exception_object)
{
  if (!v1) {
    _Unwind_Resume(exception_object);
  }
  operator delete(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1B4C4347C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 48;
    uint64_t v4 = *(const void **)(i - 40);
    if (v4)
    {
      CFRelease(v4);
      *(void *)(i - 40) = 0;
    }
    uint64_t v5 = *(void **)(i - 24);
    if (v5)
    {
      *(void *)(i - 16) = v5;
      operator delete(v5);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_1B4C434F8()
{
}

uint64_t sub_1B4C43510(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = *(void **)(*(void *)(a1 + 16) + 8);
    uint64_t v4 = *(void **)(*(void *)(a1 + 8) + 8);
    while (v3 != v4)
    {
      uint64_t v5 = (const void *)v3[1];
      if (v5)
      {
        CFRelease(v5);
        v3[1] = 0;
      }
      uint64_t v6 = (void *)v3[3];
      if (v6)
      {
        v3[4] = v6;
        operator delete(v6);
      }
      v3 += 6;
    }
  }
  return a1;
}

uint64_t sub_1B4C43588(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 48;
    uint64_t v5 = *(const void **)(i - 16);
    if (v5)
    {
      CFRelease(v5);
      *(void *)(i - 16) = 0;
    }
    uint64_t v6 = *(void *)(i - 40);
    if (v6)
    {
      uint64_t v7 = *(void *)(i - 32);
      uint64_t v4 = *(void **)(i - 40);
      if (v7 != v6)
      {
        do
        {
          if (*(char *)(v7 - 1) < 0) {
            operator delete(*(void **)(v7 - 24));
          }
          v7 -= 40;
        }
        while (v7 != v6);
        uint64_t v4 = *(void **)(i - 40);
      }
      *(void *)(i - 32) = v6;
      operator delete(v4);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_1B4C43640(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      uint64_t v5 = v2 - 40;
      *(void *)(a1 + 16) = v2 - 40;
      if (*(char *)(v2 - 1) < 0)
      {
        operator delete(*(void **)(v2 - 24));
        uint64_t v5 = *(void *)(a1 + 16);
      }
      uint64_t v2 = v5;
    }
    while (v5 != v3);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_1B4C436A8(void *a1, uint64_t a2)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 4);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x555555555555555) {
    sub_1B4C434F8();
  }
  if (0x5555555555555556 * ((uint64_t)(a1[2] - *a1) >> 4) > v4) {
    unint64_t v4 = 0x5555555555555556 * ((uint64_t)(a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v6 = 0x555555555555555;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x555555555555555) {
      sub_1B4BB2D38();
    }
    uint64_t v7 = (char *)operator new(48 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v19 = (uint64_t)&v7[48 * v3];
  *((void *)&v20 + 1) = &v7[48 * v6];
  sub_1B4C69A48(v19, a2);
  uint64_t v8 = 0;
  uint64_t v10 = (char *)*a1;
  for (uint64_t i = a1[1]; (char *)(i + v8) != v10; sub_1B4C69A48(v8 + v19, v8 + i))
    v8 -= 48;
  uint64_t v11 = v19 + v8;
  uint64_t v12 = (char *)*a1;
  uint64_t v13 = (char *)a1[1];
  *a1 = v11;
  *(void *)&long long v20 = v19 + 48;
  *(_OWORD *)(a1 + 1) = v20;
  while (v13 != v12)
  {
    unint64_t v15 = (const void *)*((void *)v13 - 2);
    if (v15)
    {
      CFRelease(v15);
      *((void *)v13 - 2) = 0;
    }
    uint64_t v16 = *((void *)v13 - 5);
    if (v16)
    {
      uint64_t v17 = *((void *)v13 - 4);
      id v14 = (void *)*((void *)v13 - 5);
      if (v17 != v16)
      {
        do
        {
          if (*(char *)(v17 - 1) < 0) {
            operator delete(*(void **)(v17 - 24));
          }
          v17 -= 40;
        }
        while (v17 != v16);
        id v14 = (void *)*((void *)v13 - 5);
      }
      *((void *)v13 - 4) = v16;
      operator delete(v14);
    }
    v13 -= 48;
  }
  if (v12) {
    operator delete(v12);
  }
  return v19 + 48;
}

void sub_1B4C43858(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1B4C43588((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1B4C438A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = a2 - 2;
  if (a2 >= 2)
  {
    uint64_t v4 = a3;
    uint64_t v6 = v3 >> 1;
    if ((uint64_t)(v3 >> 1) >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * ((a3 - a1) >> 4)))
    {
      uint64_t v8 = (0x5555555555555556 * ((a3 - a1) >> 4)) | 1;
      uint64_t v9 = a1 + 48 * v8;
      if (0x5555555555555556 * ((a3 - a1) >> 4) + 2 < a2)
      {
        float v10 = *(float *)(v9 + 4);
        float v11 = *(float *)(v9 + 52);
        v9 += 48 * (v10 > v11);
        if (v10 > v11) {
          uint64_t v8 = 0x5555555555555556 * ((a3 - a1) >> 4) + 2;
        }
      }
      if (*(float *)(v9 + 4) <= *(float *)(a3 + 4))
      {
        sub_1B4C69A48((uint64_t)&v22, a3);
        do
        {
          uint64_t v12 = v9;
          if (v4 != v9) {
            sub_1B4C6A1D0((void **)(v4 + 8), *(void *)(v9 + 8), *(void *)(v9 + 16), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(v9 + 16) - *(void *)(v9 + 8)) >> 3));
          }
          uint64_t v13 = *(const void **)(v4 + 32);
          if (v13)
          {
            CFRelease(v13);
            *(void *)(v4 + 32) = 0;
          }
          *(void *)(v4 + 32) = CFRetain(*(CFTypeRef *)(v9 + 32));
          *(void *)uint64_t v4 = *(void *)v9;
          *(void *)(v4 + 40) = *(void *)(v9 + 40);
          if (v6 < v8) {
            break;
          }
          uint64_t v14 = (2 * v8) | 1;
          uint64_t v9 = a1 + 48 * v14;
          if (2 * v8 + 2 < a2)
          {
            float v15 = *(float *)(v9 + 4);
            float v16 = *(float *)(v9 + 52);
            v9 += 48 * (v15 > v16);
            if (v15 > v16) {
              uint64_t v14 = 2 * v8 + 2;
            }
          }
          uint64_t v4 = v12;
          uint64_t v8 = v14;
        }
        while (*(float *)(v9 + 4) <= *((float *)&v22 + 1));
        if ((uint64_t *)v12 != &v22) {
          sub_1B4C6A1D0((void **)(v12 + 8), (uint64_t)__p, (uint64_t)v24, 0xCCCCCCCCCCCCCCCDLL * (((char *)v24 - (unsigned char *)__p) >> 3));
        }
        uint64_t v17 = *(const void **)(v12 + 32);
        if (v17)
        {
          CFRelease(v17);
          *(void *)(v12 + 32) = 0;
        }
        *(void *)(v12 + 32) = CFRetain(cf);
        *(void *)uint64_t v12 = v22;
        CFTypeRef v18 = cf;
        *(void *)(v12 + 40) = v26;
        if (v18)
        {
          CFRelease(v18);
          CFTypeRef cf = 0;
        }
        uint64_t v19 = (void **)__p;
        if (__p)
        {
          long long v20 = v24;
          unint64_t v21 = __p;
          if (v24 != __p)
          {
            do
            {
              if (*((char *)v20 - 1) < 0) {
                operator delete(*(v20 - 3));
              }
              v20 -= 5;
            }
            while (v20 != v19);
            unint64_t v21 = __p;
          }
          long long v24 = v19;
          operator delete(v21);
        }
      }
    }
  }
}

void sub_1B4C43AD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B4C43AE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1B4C43AFC(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v5 = (void *)result;
    if (a4 >= 0x555555555555556) {
      sub_1B4C434F8();
    }
    __n128 result = (uint64_t)operator new(48 * a4);
    uint64_t v8 = result;
    void *v5 = result;
    v5[1] = result;
    v5[2] = result + 48 * a4;
    if (a2 != a3)
    {
      uint64_t v9 = 0;
      do
      {
        __n128 result = sub_1B4C69A48(v8 + v9, a2 + v9);
        v9 += 48;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_1B4C43BBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_1B4C43BD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  for (; v11; v11 -= 48)
    sub_1B4C69B1C((void *)(v10 - 48 + v11));
  *(void *)(v9 + 8) = v10;
  sub_1B4C43C00(&a9);
  _Unwind_Resume(a1);
}

void ***sub_1B4C43C00(void ***result)
{
  uint64_t v1 = result;
  if (!*((unsigned char *)result + 8))
  {
    uint64_t v2 = *result;
    unint64_t v3 = (char *)**result;
    if (v3)
    {
      uint64_t v4 = (char *)v2[1];
      uint64_t v5 = **result;
      if (v4 != v3)
      {
        do
        {
          uint64_t v7 = (const void *)*((void *)v4 - 2);
          if (v7)
          {
            CFRelease(v7);
            *((void *)v4 - 2) = 0;
          }
          uint64_t v8 = *((void *)v4 - 5);
          if (v8)
          {
            uint64_t v9 = *((void *)v4 - 4);
            uint64_t v6 = (void *)*((void *)v4 - 5);
            if (v9 != v8)
            {
              do
              {
                if (*(char *)(v9 - 1) < 0) {
                  operator delete(*(void **)(v9 - 24));
                }
                v9 -= 40;
              }
              while (v9 != v8);
              uint64_t v6 = (void *)*((void *)v4 - 5);
            }
            *((void *)v4 - 4) = v8;
            operator delete(v6);
          }
          v4 -= 48;
        }
        while (v4 != v3);
        uint64_t v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

os_log_t sub_1B4C43CEC()
{
  os_log_t result = os_log_create("com.apple.CVNLP", "Default");
  qword_1E9D40AE8 = (uint64_t)result;
  return result;
}

void sub_1B4C43E30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C44BFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, uint64_t a20,uint64_t a21,void *a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *a52)
{
  _Unwind_Resume(a1);
}

id sub_1B4C44F30(void ***a1, void *a2)
{
  uint64_t v68 = *MEMORY[0x1E4F143B8];
  id v60 = a2;
  uint64_t v5 = objc_msgSend_objectForKeyedSubscript_(**a1, v3, (uint64_t)v60, v4);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {

    goto LABEL_32;
  }
  uint64_t v8 = objc_msgSend_objectForKeyedSubscript_(**a1, v6, (uint64_t)v60, v7);

  if (!v8)
  {
LABEL_32:
    obuint64_t j = 0;
    BOOL v53 = 0;
    uint64_t v57 = objc_msgSend_copy(0, v9, v10, v11);
    goto LABEL_33;
  }
  BOOL v61 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v9, v10, v11);
  long long v65 = 0u;
  long long v66 = 0u;
  long long v63 = 0u;
  long long v64 = 0u;
  obuint64_t j = v8;
  uint64_t v13 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v12, (uint64_t)&v63, (uint64_t)v67, 16);
  if (v13)
  {
    uint64_t v14 = *(void *)v64;
    do
    {
      for (uint64_t i = 0; i != v13; ++i)
      {
        if (*(void *)v64 != v14) {
          objc_enumerationMutation(obj);
        }
        float v16 = *(void **)(*((void *)&v63 + 1) + 8 * i);
        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          uint64_t v17 = v16;
        }
        else {
          uint64_t v17 = 0;
        }
        id v18 = v17;
        unint64_t v21 = v18;
        if (v18)
        {
          uint64_t v22 = objc_msgSend_objectForKeyedSubscript_(v18, v19, @"replaceKey", v20);
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            long long v25 = objc_msgSend_objectForKeyedSubscript_(v21, v23, @"replaceKey", v24);
          }
          else
          {
            long long v25 = 0;
          }

          uint64_t v28 = objc_msgSend_objectForKeyedSubscript_(v21, v26, @"replaceWith", v27);
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            uint64_t v31 = objc_msgSend_objectForKeyedSubscript_(v21, v29, @"replaceWith", v30);
          }
          else
          {
            uint64_t v31 = 0;
          }

          uint64_t v34 = objc_msgSend_objectForKeyedSubscript_(v21, v32, @"replaceProb", v33);
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            uint64_t v37 = objc_msgSend_objectForKeyedSubscript_(v21, v35, @"replaceProb", v36);
          }
          else
          {
            uint64_t v37 = 0;
          }

          int v40 = objc_msgSend_objectForKeyedSubscript_(v21, v38, @"genderOption", v39);
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            uint64_t v43 = objc_msgSend_objectForKeyedSubscript_(v21, v41, @"genderOption", v42);
          }
          else
          {
            uint64_t v43 = 0;
          }

          if (v25 && v31)
          {
            uint64_t v44 = [CVNLPCaptionRuntimeReplacements alloc];
            objc_msgSend_doubleValue(v37, v45, v46, v47);
            size_t v49 = objc_msgSend_initWithKey_value_prob_genderOption_(v44, v48, (uint64_t)v25, (uint64_t)v31, v43);
            objc_msgSend_addObject_(v61, v50, (uint64_t)v49, v51);
          }
        }
      }
      uint64_t v13 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v52, (uint64_t)&v63, (uint64_t)v67, 16);
    }
    while (v13);
  }

  BOOL v53 = v61;
  uint64_t v57 = objc_msgSend_copy(v61, v54, v55, v56);
LABEL_33:
  unint64_t v58 = (void *)v57;

  return v58;
}

void sub_1B4C452D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1B4C454F8(uint64_t a1)
{
  if (u_isWhitespace(a1)) {
    return 95;
  }
  uint64_t result = 57344;
  if ((a1 - 188) >= 3
    && (a1 - 48) >= 0xA
    && (a1 - 1632) >= 0xA
    && a1 != 8585
    && (a1 & 0xFFFFFFF0) != 0x2150)
  {
    if (u_charType(a1) == 20)
    {
      return 57345;
    }
    else if (u_charType(a1) == 21)
    {
      return 57346;
    }
    else
    {
      uint64_t result = 57347;
      if ((a1 > 0x3F || ((1 << a1) & 0x8C00502200000000) == 0)
        && ((a1 - 1548) > 0x13 || ((1 << (a1 - 12)) & 0x88001) == 0)
        && a1 != 1642)
      {
        int8_t v3 = u_charType(a1);
        uint64_t result = 57348;
        if (a1 != 63743 && ((1 << v3) & 0x3FF80000) == 0)
        {
          int v4 = 1 << u_charType(a1);
          uint64_t result = a1;
          if ((v4 & 0x3E) != 0)
          {
            JUMPOUT(0x1BA9934B0);
          }
        }
      }
    }
  }
  return result;
}

void sub_1B4C45A28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C45AD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C45AEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C45B98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C45BB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C45C64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C45C8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C45D40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)CVNLPDecodingLanguageModel;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_1B4C461C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  uint64_t v27 = v24;

  _Block_object_dispose(&a15, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1B4C46298(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1B4C462A8(uint64_t a1)
{
}

void sub_1B4C462B0(uint64_t a1, void *a2, int a3, void *a4, CFStringRef theString1, unsigned char *a6)
{
  if (CFEqual(theString1, (CFStringRef)*MEMORY[0x1E4F724A8]))
  {
    id v21 = a4;
    uint64_t v13 = objc_msgSend_localeIdentifier(v21, v10, v11, v12);
    uint64_t v17 = objc_msgSend_localeIdentifier(v21, v14, v15, v16);
    int isEqualToString = objc_msgSend_isEqualToString_(v13, v18, (uint64_t)v17, v19);

    if (isEqualToString)
    {
      objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), a2);
      *a6 = 1;
    }
  }
}

void sub_1B4C46398(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B4C463B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B4C463CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B4C4648C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C464A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C46564(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C4657C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C468C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if ((*(char *)(v36 - 33) & 0x80000000) == 0)
  {

    _Unwind_Resume(a1);
  }
  operator delete(*(void **)(v36 - 56));

  _Unwind_Resume(a1);
}

void sub_1B4C46A0C(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  sub_1B4C47868((uint64_t)"/", 1, a1, a2, __p);
  if ((v16 & 0x80u) == 0) {
    uint64_t v7 = __p;
  }
  else {
    uint64_t v7 = (void **)__p[0];
  }
  if (v7)
  {
    if ((v16 & 0x80u) == 0) {
      CFIndex v8 = v16;
    }
    else {
      CFIndex v8 = (CFIndex)__p[1];
    }
    CFStringRef v9 = CFStringCreateWithBytes(0, (const UInt8 *)v7, v8, 0x8000100u, 0);
    CFStringRef v17 = v9;
    if (!v9)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    if ((v16 & 0x80) != 0) {
      goto LABEL_10;
    }
  }
  else
  {
    CFStringRef v9 = 0;
    CFStringRef v17 = 0;
    if ((v16 & 0x80) != 0) {
LABEL_10:
    }
      operator delete(__p[0]);
  }
  uint64_t v10 = objc_msgSend_createBundle(*(void **)(a1 + 24), (const char *)v7, v5, v6);
  objc_msgSend_pathForResource_ofType_(v10, v11, (uint64_t)v9, 0);
  uint64_t v12 = (__CFString *)objc_claimAutoreleasedReturnValue();
  uint64_t v13 = v12;
  if (!v12) {
    uint64_t v12 = &stru_1F0D56340;
  }
  sub_1B4C2FDF4(v12, a3);

  if (v9) {
    CFRelease(v9);
  }
}

void sub_1B4C46B4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B4C46DD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (v14) {
    operator delete(v14);
  }

  _Unwind_Resume(a1);
}

void sub_1B4C47230(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  _Block_object_dispose(&a32, 8);
  _Block_object_dispose(&a40, 8);
  _Block_object_dispose((const void *)(v43 - 216), 8);

  _Block_object_dispose((const void *)(v43 - 176), 8);
  uint64_t v45 = *(void **)(v43 - 128);
  if (v45)
  {
    *(void *)(v43 - 120) = v45;
    operator delete(v45);
  }

  _Unwind_Resume(a1);
}

__n128 sub_1B4C47330(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void sub_1B4C47354(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

__n128 sub_1B4C4736C(__n128 *a1, __n128 *a2)
{
  __n128 result = a2[3];
  a1[3] = result;
  return result;
}

void sub_1B4C4737C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v8 = [NSString alloc];
  uint64_t v10 = objc_msgSend_initWithBytes_length_encoding_(v8, v9, a2, a3, 4);
  uint64_t v14 = objc_msgSend_whitespaceAndNewlineCharacterSet(MEMORY[0x1E4F28B88], v11, v12, v13);
  CFStringRef v17 = objc_msgSend_stringByTrimmingCharactersInSet_(v10, v15, (uint64_t)v14, v16);

  if (objc_msgSend_length(v17, v18, v19, v20))
  {
    uint64_t v74 = 0;
    id v21 = objc_opt_class();
    int v23 = objc_msgSend__normalizedLMTokenIDForWord_withTokenID_sourceLanguageModel_outScore_(v21, v22, (uint64_t)v17, a4, *(void *)(a1 + 32), &v74);
    uint64_t v24 = *(void **)(a1 + 40);
    uint64_t v25 = *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 24);
    uint64_t v29 = objc_msgSend_length(v24, v26, v27, v28);
    unint64_t v31 = objc_msgSend_rangeOfString_options_range_(v24, v30, (uint64_t)v17, 0, v25, v29 - *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 24));
    unint64_t v35 = v31;
    if (v31 != 0x7FFFFFFFFFFFFFFFLL)
    {
      uint64_t v36 = (uint64_t)v32;
      uint64_t v37 = *(void *)(*(void *)(a1 + 72) + 8);
      if (v31 >= *(void *)(v37 + 48))
      {
        *(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 24) += *(void *)(v37 + 56);
        unint64_t v38 = *(void *)(*(void *)(*(void *)(a1 + 88) + 8) + 24);
        if (v38 < objc_msgSend_count(*(void **)(a1 + 48), v32, v33, v34))
        {
          int v40 = objc_msgSend_objectAtIndex_(*(void **)(a1 + 48), v32, *(void *)(*(void *)(*(void *)(a1 + 88) + 8) + 24), v39);
          uint64_t v44 = objc_msgSend_rangeValue(v40, v41, v42, v43);
          uint64_t v45 = *(void *)(*(void *)(a1 + 72) + 8);
          *(void *)(v45 + 48) = v44;
          *(void *)(v45 + 56) = v46;

          ++*(void *)(*(void *)(*(void *)(a1 + 88) + 8) + 24);
        }
      }
      *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = v35 + v36;
      uint64_t v47 = *(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 24) + v35;
      uint64_t v48 = *(void **)(a1 + 56);
      size_t v49 = objc_msgSend_valueWithRange_(MEMORY[0x1E4F29238], v32, v47, v36);
      objc_msgSend_addObject_(v48, v50, (uint64_t)v49, v51);

      int v52 = *(void **)(*(void *)(a1 + 96) + 8);
      uint64_t v54 = (char *)v52[7];
      unint64_t v53 = v52[8];
      if ((unint64_t)v54 < v53)
      {
        *(_DWORD *)uint64_t v54 = v23;
        uint64_t v55 = (uint64_t)(v54 + 4);
LABEL_27:
        v52[7] = v55;
        goto LABEL_28;
      }
      uint64_t v56 = (char *)v52[6];
      uint64_t v57 = (v54 - v56) >> 2;
      unint64_t v58 = v57 + 1;
      if ((unint64_t)(v57 + 1) >> 62) {
        sub_1B4BB3244();
      }
      uint64_t v59 = v53 - (void)v56;
      if (v59 >> 1 > v58) {
        unint64_t v58 = v59 >> 1;
      }
      if ((unint64_t)v59 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v60 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v60 = v58;
      }
      if (v60)
      {
        if (v60 >> 62) {
          sub_1B4BB2D38();
        }
        BOOL v61 = operator new(4 * v60);
        unint64_t v62 = &v61[4 * v57];
        long long v63 = &v61[4 * v60];
        _DWORD *v62 = v23;
        uint64_t v55 = (uint64_t)(v62 + 1);
        int64_t v64 = v54 - v56;
        if (v54 == v56) {
          goto LABEL_25;
        }
      }
      else
      {
        BOOL v61 = 0;
        unint64_t v62 = (_DWORD *)(4 * v57);
        long long v63 = 0;
        *(_DWORD *)(4 * v57) = v23;
        uint64_t v55 = 4 * v57 + 4;
        int64_t v64 = v54 - v56;
        if (v54 == v56)
        {
LABEL_25:
          v52[6] = v62;
          v52[7] = v55;
          v52[8] = v63;
          if (v56) {
            operator delete(v56);
          }
          goto LABEL_27;
        }
      }
      unint64_t v65 = v64 - 4;
      if (v65 < 0x2C) {
        goto LABEL_33;
      }
      if ((unint64_t)(v56 - v61) < 0x20) {
        goto LABEL_33;
      }
      uint64_t v66 = (v65 >> 2) + 1;
      uint64_t v67 = 4 * (v66 & 0x7FFFFFFFFFFFFFF8);
      uint64_t v68 = &v54[-v67];
      unint64_t v62 = (_DWORD *)((char *)v62 - v67);
      int v69 = &v61[4 * v57 - 16];
      uint64_t v70 = v54 - 16;
      uint64_t v71 = v66 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v72 = *(_OWORD *)v70;
        *(v69 - 1) = *((_OWORD *)v70 - 1);
        _OWORD *v69 = v72;
        v69 -= 2;
        v70 -= 32;
        v71 -= 8;
      }
      while (v71);
      uint64_t v54 = v68;
      if (v66 != (v66 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_33:
        do
        {
          int v73 = *((_DWORD *)v54 - 1);
          v54 -= 4;
          *--unint64_t v62 = v73;
        }
        while (v54 != v56);
      }
      goto LABEL_25;
    }
  }
LABEL_28:
}

void sub_1B4C476C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C476D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C476E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C476F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C47710(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C47720(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C47730(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C477F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C47804(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C47814(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C47824(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1B4C47868@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  sub_1B4BB2204((uint64_t)v27);
  int v10 = *(char *)(a3 + 23);
  if (v10 >= 0) {
    uint64_t v11 = a3;
  }
  else {
    uint64_t v11 = *(void *)a3;
  }
  if (v10 >= 0) {
    uint64_t v12 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    uint64_t v12 = *(void *)(a3 + 8);
  }
  uint64_t v13 = sub_1B4BB34F0(v27, v11, v12);
  sub_1B4BB34F0(v13, a1, a2);
  int v14 = *(char *)(a4 + 23);
  if (v14 >= 0) {
    uint64_t v15 = a4;
  }
  else {
    uint64_t v15 = *(void *)a4;
  }
  if (v14 >= 0) {
    uint64_t v16 = *(unsigned __int8 *)(a4 + 23);
  }
  else {
    uint64_t v16 = *(void *)(a4 + 8);
  }
  CFStringRef v17 = sub_1B4BB34F0(v27, v15, v16);
  sub_1B4BB34F0(v17, a1, a2);
  std::stringbuf::str();
  if (((char)v26 & 0x80000000) == 0)
  {
    id v18 = &v24;
    if (v26 >= (unint64_t)v26 - 1) {
      size_t v19 = v26 - 1;
    }
    else {
      size_t v19 = v26;
    }
    if (v19 < 0x7FFFFFFFFFFFFFF8) {
      goto LABEL_18;
    }
LABEL_33:
    sub_1B4BB33D8();
  }
  id v18 = v24;
  if (v25 >= v25 - 1) {
    size_t v19 = v25 - 1;
  }
  else {
    size_t v19 = v25;
  }
  if (v19 >= 0x7FFFFFFFFFFFFFF8) {
    goto LABEL_33;
  }
LABEL_18:
  if (v19 >= 0x17)
  {
    uint64_t v21 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v19 | 7) != 0x17) {
      uint64_t v21 = v19 | 7;
    }
    uint64_t v22 = v21 + 1;
    int v23 = operator new(v21 + 1);
    a5[1] = v19;
    a5[2] = v22 | 0x8000000000000000;
    *a5 = v23;
    a5 = v23;
LABEL_27:
    memmove(a5, v18, v19);
    *((unsigned char *)a5 + v19) = 0;
    if (((char)v26 & 0x80000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_28;
  }
  *((unsigned char *)a5 + 23) = v19;
  if (v19) {
    goto LABEL_27;
  }
  *(unsigned char *)a5 = 0;
  if (((char)v26 & 0x80000000) == 0) {
    goto LABEL_21;
  }
LABEL_28:
  operator delete(v24);
LABEL_21:
  v27[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v27 + *(void *)(v27[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v27[1] = MEMORY[0x1E4FBA470] + 16;
  if (v28 < 0) {
    operator delete((void *)v27[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1BA992920](&v29);
}

void sub_1B4C47AC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1B4BC8450((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1B4C47AD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_1B4BC8450((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  sub_1B4BC8450((uint64_t)&a15);
  _Unwind_Resume(a1);
}

BOOL sub_1B4C47B0C(void *a1)
{
  id v1 = a1;
  uint64_t v5 = objc_msgSend_whitespaceCharacterSet(MEMORY[0x1E4F28B88], v2, v3, v4);
  objc_msgSend_rangeOfCharacterFromSet_(v1, v6, (uint64_t)v5, v7);
  BOOL v11 = v10 == (const char *)objc_msgSend_length(v1, v10, v8, v9);

  return v11;
}

void sub_1B4C47B78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C47B88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL CVNLPIsWordSeparatorForLexicon_0(void *a1)
{
  id v3 = a1;
  if (qword_1EB9FE348 != -1) {
    dispatch_once(&qword_1EB9FE348, &unk_1F0D56020);
  }
  objc_msgSend_rangeOfCharacterFromSet_(v3, v1, qword_1EB9FE350, v2);
  BOOL v7 = v6 == (const char *)objc_msgSend_length(v3, v6, v4, v5);

  return v7;
}

void sub_1B4C47C14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1B4C47C24(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  qword_1EB9FE350 = objc_msgSend_characterSetWithCharactersInString_(MEMORY[0x1E4F28B88], a2, @" -/", a4);
  return MEMORY[0x1F41817F8]();
}

BOOL sub_1B4C47C6C(void *a1)
{
  id v1 = a1;
  uint64_t v5 = objc_msgSend_lowercaseLetterCharacterSet(MEMORY[0x1E4F28B88], v2, v3, v4);
  objc_msgSend_rangeOfCharacterFromSet_(v1, v6, (uint64_t)v5, v7);
  BOOL v11 = v10 == (const char *)objc_msgSend_length(v1, v10, v8, v9);

  return v11;
}

void sub_1B4C47CD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C47CE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_1B4C47CFC(void *a1)
{
  id v1 = a1;
  uint64_t v5 = objc_msgSend_uppercaseLetterCharacterSet(MEMORY[0x1E4F28B88], v2, v3, v4);
  objc_msgSend_rangeOfCharacterFromSet_(v1, v6, (uint64_t)v5, v7);
  BOOL v11 = v10 == (const char *)objc_msgSend_length(v1, v10, v8, v9);

  return v11;
}

void sub_1B4C47D68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C47D78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_1B4C47D8C(void *a1)
{
  id v1 = a1;
  uint64_t v5 = objc_msgSend_punctuationCharacterSet(MEMORY[0x1E4F28B88], v2, v3, v4);
  objc_msgSend_rangeOfCharacterFromSet_(v1, v6, (uint64_t)v5, v7);
  BOOL v11 = v10 == (const char *)objc_msgSend_length(v1, v10, v8, v9);

  return v11;
}

void sub_1B4C47DF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C47E08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_1B4C47E1C(void *a1)
{
  id v3 = a1;
  if (qword_1EB9FE358 != -1) {
    dispatch_once(&qword_1EB9FE358, &unk_1F0D56120);
  }
  objc_msgSend_rangeOfCharacterFromSet_(v3, v1, qword_1EB9FE360, v2);
  BOOL v7 = v6 == (const char *)objc_msgSend_length(v3, v6, v4, v5);

  return v7;
}

void sub_1B4C47E94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1B4C47EA4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  qword_1EB9FE360 = objc_msgSend_characterSetWithCharactersInString_(MEMORY[0x1E4F28B88], a2, @"0123456789", a4);
  return MEMORY[0x1F41817F8]();
}

BOOL sub_1B4C47EEC(void *a1)
{
  id v1 = a1;
  unint64_t v2 = 0;
  uint64_t v3 = 0;
  for (unint64_t i = objc_msgSend_length(v1, v4, v5, v6); ; unint64_t i = objc_msgSend_length(v1, v13, v14, v15))
  {
    unint64_t v11 = i;
    if (v2 >= i) {
      break;
    }
    int v12 = objc_msgSend_characterAtIndex_(v1, v8, v2, v9);
    if ((v12 - 48) < 0xA)
    {
      uint64_t v10 = v3;
    }
    else
    {
      uint64_t v10 = 2;
      if (v12 != 32 && v12 != 45)
      {
        if ((v12 - 8208) >= 6)
        {
          v16.i16[0] = v12 & 0xFFDF;
          v16.i16[1] = v12;
          if (vmaxv_u16(vcgt_u16((uint16x4_t)0x158001F0017001ALL, (uint16x4_t)vadd_s16(vzip1_s16(v16, vdup_lane_s16(v16, 1)), (int16x4_t)0xFF08FF28FF40FFBFLL))))
          {
            if (v3 == 4) {
              break;
            }
            uint64_t v10 = 3;
          }
          else if ((v12 - 1024) >= 0x130)
          {
            if ((v12 - 880) >= 0x90)
            {
              uint64_t v10 = 6;
              if ((unsigned __int16)((unsigned __int16)(v12 + 21504) >> 10) >= 0xBu
                && (v12 & 0xFFE0) != 0xA960
                && (v12 & 0xFF00) != 0x1100
                && (unsigned __int16)(v12 - 12592) >= 0x60u)
              {
                if ((v12 - 1632) >= 0xA) {
                  uint64_t v10 = 0;
                }
                else {
                  uint64_t v10 = 7;
                }
              }
            }
            else
            {
              uint64_t v10 = 5;
            }
          }
          else
          {
            if (v3 == 3) {
              break;
            }
            uint64_t v10 = 4;
          }
        }
        else
        {
          uint64_t v10 = 2;
        }
      }
    }
    ++v2;
    uint64_t v3 = v10;
  }

  return v2 < v11;
}

void sub_1B4C48090(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1B4C480A0(uint64_t result, unsigned char *a2, int *a3, int16x4_t a4)
{
  if ((result - 48) >= 0xA)
  {
    int v4 = 2;
    if (result != 32 && result != 45)
    {
      if ((result - 8208) >= 6)
      {
        a4.i16[0] = result & 0xFFDF;
        a4.i16[1] = result;
        if (vmaxv_u16(vcgt_u16((uint16x4_t)0x158001F0017001ALL, (uint16x4_t)vadd_s16(vzip1_s16(a4, vdup_lane_s16(a4, 1)), (int16x4_t)0xFF08FF28FF40FFBFLL))))
        {
          int v4 = 3;
        }
        else if ((result - 1024) >= 0x130)
        {
          if ((result - 880) >= 0x90)
          {
            int v4 = 6;
            if ((unsigned __int16)((unsigned __int16)(result + 21504) >> 10) >= 0xBu
              && (result & 0xFFE0) != 0xA960
              && (result & 0xFF00) != 0x1100
              && (unsigned __int16)(result - 12592) >= 0x60u)
            {
              if ((result - 1632) >= 0xA) {
                int v4 = 0;
              }
              else {
                int v4 = 7;
              }
            }
          }
          else
          {
            int v4 = 5;
          }
        }
        else
        {
          int v4 = 4;
        }
      }
      else
      {
        int v4 = 2;
      }
    }
    if (!*a2)
    {
      if ((int v5 = *a3, v4 == 4) && v5 == 3 || v4 == 3 && v5 == 4) {
        *a2 = 1;
      }
    }
  }
  else
  {
    if (!*a2) {
      return result;
    }
    int v4 = 1;
  }
  *a3 = v4;
  return result;
}

id sub_1B4C481E8(void *a1)
{
  id v1 = a1;
  int v5 = objc_msgSend_string(MEMORY[0x1E4F28E78], v2, v3, v4);
  uint64_t v9 = objc_msgSend_length(v1, v6, v7, v8);
  v13[0] = MEMORY[0x1E4F143A8];
  v13[1] = 3221225472;
  v13[2] = sub_1B4C482F8;
  v13[3] = &unk_1E60A39F8;
  id v10 = v5;
  id v14 = v10;
  objc_msgSend_enumerateSubstringsInRange_options_usingBlock_(v1, v11, 0, v9, 2, v13);

  return v10;
}

void sub_1B4C482C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1B4C482E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C482F8(uint64_t a1, void *a2)
{
  id v11 = a2;
  if (objc_msgSend_length(v11, v3, v4, v5) == 1)
  {
    int v8 = objc_msgSend_characterAtIndex_(v11, v6, 0, v7);

    if (v8 == 57427)
    {
      objc_msgSend_appendString_(*(void **)(a1 + 32), v9, @"<PS>", v10);
      goto LABEL_6;
    }
  }
  else
  {
  }
  objc_msgSend_appendString_(*(void **)(a1 + 32), v9, (uint64_t)v11, v10);
LABEL_6:
}

void sub_1B4C483AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B4C483C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id sub_1B4C483E4(void *a1, void *a2)
{
  id v3 = a1;
  uint64_t v22 = 0;
  int v23 = &v22;
  uint64_t v24 = 0x3032000000;
  unint64_t v25 = sub_1B4C485F0;
  unsigned __int8 v26 = sub_1B4C48600;
  uint64_t v27 = &stru_1F0D56340;
  uint64_t v16 = 0;
  CFStringRef v17 = &v16;
  uint64_t v18 = 0x3032000000;
  size_t v19 = sub_1B4C485F0;
  uint64_t v20 = sub_1B4C48600;
  objc_msgSend_array(MEMORY[0x1E4F1CA48], v4, v5, v6);
  id v21 = (id)objc_claimAutoreleasedReturnValue();
  v15[0] = 0;
  v15[1] = v15;
  v15[2] = 0x2020000000;
  v15[3] = 0;
  uint64_t v10 = objc_msgSend_length(v3, v7, v8, v9);
  v14[0] = MEMORY[0x1E4F143A8];
  v14[1] = 3221225472;
  v14[2] = sub_1B4C48608;
  v14[3] = &unk_1E60A3A20;
  v14[4] = &v22;
  v14[5] = v15;
  v14[6] = &v16;
  objc_msgSend_enumerateSubstringsInRange_options_usingBlock_(v3, v11, 0, v10, 2, v14);
  if (a2) {
    *a2 = (id) v17[5];
  }
  id v12 = (id)v23[5];
  _Block_object_dispose(v15, 8);
  _Block_object_dispose(&v16, 8);

  _Block_object_dispose(&v22, 8);
  return v12;
}

void sub_1B4C485A4(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v2 - 80), 8);

  _Unwind_Resume(a1);
}

uint64_t sub_1B4C485F0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1B4C48600(uint64_t a1)
{
}

void sub_1B4C48608(void *a1, void *a2)
{
  id v46 = a2;
  objc_msgSend_dataUsingEncoding_(v46, v3, 2617245952, v4);
  id v5 = objc_claimAutoreleasedReturnValue();
  uint64_t v12 = objc_msgSend_bytes(v5, v6, v7, v8);
  char v13 = 0;
  unint64_t v14 = 0;
  uint64_t v15 = &stru_1F0D56340;
  while (v14 < (unint64_t)objc_msgSend_length(v5, v9, v10, v11) >> 2)
  {
    unsigned int v16 = *(_DWORD *)(v12 + 4 * v14);
    unsigned int v47 = v16;
    if (v16 >> 4 == 4064)
    {
      char v13 = 1;
      ++v14;
    }
    else
    {
      if (v16 - 917760 < 0xF0)
      {
        char v13 = 1;
      }
      else
      {
        id v17 = [NSString alloc];
        size_t v19 = objc_msgSend_initWithBytes_length_encoding_(v17, v18, (uint64_t)&v47, 4, 2617245952);
        uint64_t v22 = objc_msgSend_stringByAppendingString_(v15, v20, (uint64_t)v19, v21);

        uint64_t v15 = (__CFString *)v22;
      }
      ++v14;
    }
  }
  int v23 = *(void **)(*(void *)(a1[4] + 8) + 40);
  if (v13)
  {
    uint64_t v24 = objc_msgSend_stringByAppendingString_(v23, v9, (uint64_t)v15, v11);
    uint64_t v25 = *(void *)(a1[4] + 8);
    unsigned __int8 v26 = *(void **)(v25 + 40);
    *(void *)(v25 + 40) = v24;

    uint64_t v30 = objc_msgSend_length(v46, v27, v28, v29);
    *(void *)(*(void *)(a1[5] + 8) + 24) = v30 - objc_msgSend_length(v15, v31, v32, v33);
    uint64_t v37 = objc_msgSend_length(*(void **)(*(void *)(a1[4] + 8) + 40), v34, v35, v36);
    uint64_t v38 = *(void *)(*(void *)(a1[5] + 8) + 24);
    uint64_t v39 = *(void **)(*(void *)(a1[6] + 8) + 40);
    int v41 = objc_msgSend_valueWithRange_(MEMORY[0x1E4F29238], v40, v37, v38);
    objc_msgSend_addObject_(v39, v42, (uint64_t)v41, v43);
  }
  else
  {
    uint64_t v44 = objc_msgSend_stringByAppendingString_(v23, v9, (uint64_t)v46, v11);
    uint64_t v45 = *(void *)(a1[4] + 8);
    int v41 = *(void **)(v45 + 40);
    *(void *)(v45 + 40) = v44;
  }
}

void sub_1B4C487FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

void sub_1B4C4881C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

id sub_1B4C48890(void *a1, uint64_t a2, uint64_t *a3)
{
  id v5 = a1;
  __int16 v8 = objc_msgSend_characterAtIndex_(v5, v6, a2, v7);
  __int16 v18 = v8;
  if ((v8 & 0xFC00) != 0xD800)
  {
    uint64_t v14 = 1;
    if (a2 >= 1 && (v8 & 0xFC00) == 0xDC00)
    {
      __int16 v19 = v8;
      __int16 v15 = objc_msgSend_characterAtIndex_(v5, v9, a2 - 1, 1);
      __int16 v18 = v15;
      uint64_t v14 = (v15 & 0xFC00) == 0xD800 ? 2 : 1;
      if ((v15 & 0xFC00) == 0xD800) {
        --a2;
      }
    }
    if (!a3) {
      goto LABEL_17;
    }
LABEL_16:
    *a3 = a2;
    a3[1] = v14;
    goto LABEL_17;
  }
  if (a2 + 1 < (unint64_t)objc_msgSend_length(v5, v9, v10, v11))
  {
    unsigned int v13 = objc_msgSend_characterAtIndex_(v5, v9, a2 + 1, v12);
    __int16 v19 = v13;
    if (v13 >> 10 == 55) {
      uint64_t v14 = 2;
    }
    else {
      uint64_t v14 = 1;
    }
    if (!a3) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }
  uint64_t v14 = 1;
  if (a3) {
    goto LABEL_16;
  }
LABEL_17:
  unsigned int v16 = objc_msgSend_stringWithCharacters_length_(NSString, v9, (uint64_t)&v18, v14);

  return v16;
}

void sub_1B4C489A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1B4C489B8(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 24) + 56);
  if ((v2 & 0xFFFFFFFFFFFFFFFELL) != 0) {
    uint64_t v3 = (v2 & 0xFFFFFFFFFFFFFFFELL) - 56;
  }
  else {
    uint64_t v3 = 0;
  }
  sub_1B4C4E294(v3);
  operator delete(*(void **)(a1 + 24));
  return a1;
}

uint64_t sub_1B4C48A00(uint64_t a1)
{
  *(void *)a1 = &unk_1F0D55160;
  if ((*(char *)(a1 + 79) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 55) & 0x80000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0) {
      return a1;
    }
    goto LABEL_7;
  }
  operator delete(*(void **)(a1 + 56));
  if (*(char *)(a1 + 55) < 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0) {
    return a1;
  }
LABEL_7:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_1B4C48A90(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 8) = 4092732;
  *(unsigned char *)(a1 + 31) = 3;
  strcpy((char *)(a1 + 32), "</s>");
  *(unsigned char *)(a1 + 55) = 4;
  strcpy((char *)(a1 + 56), "<unk>");
  *(unsigned char *)(a1 + 79) = 5;
  *(void *)a1 = &unk_1F0D55200;
  uint64_t v4 = a1 + 112;
  *(void *)(a1 + 88) = a1 + 112;
  id v5 = operator new(0x50uLL);
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 104) = v5;
  v5[4] = 0;
  v5[5] = v5 + 4;
  v5[6] = v5 + 4;
  v5[7] = 0;
  v5[8] = v5 + 7;
  v5[9] = v5 + 7;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = v4;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 136) = v4;
  *(void *)(a1 + 144) = a1 + 152;
  *(void *)(a1 + 176) = 0;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_1B4BCA11C(__dst, *(void **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)(a2 + 8);
    *(void *)&__dst[16] = *(void *)(a2 + 24);
  }
  uint64_t v10 = *(void *)&__dst[16];
  *(_OWORD *)std::string __p = *(_OWORD *)__dst;
  __int16 v8 = &unk_1F0D55410;
  if ((__dst[23] & 0x80000000) != 0)
  {
    sub_1B4BCA11C(v6, __p[0], (unint64_t)__p[1]);
  }
  else
  {
    *(_OWORD *)uint64_t v6 = *(_OWORD *)__p;
    uint64_t v7 = v10;
  }
  *(_OWORD *)&__dst[8] = *(_OWORD *)v6;
  uint64_t v13 = v7;
  *(void *)__dst = &unk_1F0D55410;
  sub_1B4C506AC((uint64_t)&v11, (uint64_t)__dst);
}

void sub_1B4C4A058(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *__p,void *a33,int a34,__int16 a35,char a36,char a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53)
{
  if (a37 < 0)
  {
    operator delete(__p);
    if ((*(char *)(v53 - 137) & 0x80000000) == 0) {
      goto LABEL_8;
    }
  }
  else if ((*(char *)(v53 - 137) & 0x80000000) == 0)
  {
LABEL_8:
    sub_1B4BF9664(v53 - 232);
    uint64_t v55 = *(void *)(a19 + 176);
    *(void *)(a19 + 176) = 0;
    if (v55) {
      (*(void (**)(uint64_t))(*(void *)v55 + 8))(v55);
    }
    sub_1B4C50618(*a14);
    sub_1B4C489B8(a22);
    sub_1B4C48A00(a19);
    _Unwind_Resume(a1);
  }
  operator delete(*(void **)(v53 - 160));
  goto LABEL_8;
}

void sub_1B4C4A160()
{
  sub_1B4BF9508((void **)(v0 - 192));
  JUMPOUT(0x1B4C4A31CLL);
}

void sub_1B4C4A16C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  if (*(char *)(v44 - 129) < 0)
  {
    operator delete(*(void **)(v44 - 152));
    if ((a44 & 0x80000000) == 0)
    {
LABEL_3:
      uint64_t v45 = *(void *)(a19 + 176);
      *(void *)(a19 + 176) = 0;
      if (v45) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else if ((a44 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a39);
  uint64_t v46 = *(void *)(a19 + 176);
  *(void *)(a19 + 176) = 0;
  if (v46) {
LABEL_4:
  }
    JUMPOUT(0x1B4C4A190);
LABEL_7:
  JUMPOUT(0x1B4C4A1B4);
}

void sub_1B4C4A204(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
}

void sub_1B4C4A218(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  operator delete(v24);
  sub_1B4BB21F0(a1);
}

void sub_1B4C4A230(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  sub_1B4BF9664(v22 - 232);
  uint64_t v24 = *(void *)(a19 + 176);
  *(void *)(a19 + 176) = 0;
  if (v24) {
    (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
  }
  sub_1B4C50618(*a14);
  sub_1B4C489B8(a22);
  sub_1B4C48A00(a19);
  _Unwind_Resume(a1);
}

void sub_1B4C4A238(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29)
{
  operator delete(v29);
  sub_1B4BF9508((void **)(v30 - 192));
  sub_1B4BF9508(&a29);
  JUMPOUT(0x1B4C4A314);
}

void sub_1B4C4A248(void *a1)
{
  __cxa_begin_catch(a1);
  operator delete(v1);
  __cxa_rethrow();
}

void sub_1B4C4A25C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  __cxa_end_catch();
  if (*(char *)(v29 - 137) < 0) {
    operator delete(*(void **)(v29 - 160));
  }
  sub_1B4C489B8((uint64_t)&a29);
  JUMPOUT(0x1B4C4A2CCLL);
}

void sub_1B4C4A26C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29)
{
  __cxa_free_exception(v29);
  sub_1B4BF9508((void **)(v30 - 192));
  sub_1B4BF9508(&a29);
  JUMPOUT(0x1B4C4A314);
}

void sub_1B4C4A284(void *a1)
{
  __cxa_begin_catch(a1);
  operator delete(*v1);
  __cxa_rethrow();
}

void sub_1B4C4A298(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p)
{
  __cxa_end_catch();
  sub_1B4C4E6F8(v24 - 160);
  operator delete(__p);
  sub_1B4BB21F0(a1);
}

void sub_1B4C4A2A8()
{
}

void sub_1B4C4A2D8()
{
}

BOOL sub_1B4C4A338(uint64_t a1, std::string::value_type *a2, uint64_t a3)
{
  memset(&v10, 0, sizeof(v10));
  if (a3)
  {
    uint64_t v4 = a3;
    do
    {
      std::string::push_back(&v10, *a2++);
      --v4;
    }
    while (v4);
    uint64_t v6 = *(void *)(a1 + 48);
    if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    {
      sub_1B4BCA11C(&__p, v10.__r_.__value_.__l.__data_, v10.__r_.__value_.__l.__size_);
      uint64_t v7 = sub_1B4C4F874(*(void *)(v6 - 8), (const void **)&__p.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_6;
      }
LABEL_10:
      operator delete(__p.__r_.__value_.__l.__data_);
      __int16 v8 = *(const void ***)(*(void *)(a1 + 48) - 8);
      if ((SHIBYTE(v10.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        return v8 != v7;
      }
LABEL_11:
      operator delete(v10.__r_.__value_.__l.__data_);
      return v8 != v7;
    }
  }
  else
  {
    uint64_t v6 = *(void *)(a1 + 48);
  }
  std::string __p = v10;
  uint64_t v7 = sub_1B4C4F874(*(void *)(v6 - 8), (const void **)&__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_10;
  }
LABEL_6:
  __int16 v8 = *(const void ***)(*(void *)(a1 + 48) - 8);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_11;
  }
  return v8 != v7;
}

void sub_1B4C4A42C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_1B4C4A44C(uint64_t a1, std::string::value_type *a2, uint64_t a3)
{
  memset(&v9, 0, sizeof(v9));
  if (a3)
  {
    uint64_t v4 = a3;
    do
    {
      std::string::push_back(&v9, *a2++);
      --v4;
    }
    while (v4);
    uint64_t v6 = *(void *)(a1 + 48);
    if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    {
      sub_1B4BCA11C(&__p, v9.__r_.__value_.__l.__data_, v9.__r_.__value_.__l.__size_);
      uint64_t v7 = sub_1B4C4F874(*(void *)(v6 - 8), (const void **)&__p.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else
  {
    uint64_t v6 = *(void *)(a1 + 48);
  }
  std::string __p = v9;
  uint64_t v7 = sub_1B4C4F874(*(void *)(v6 - 8), (const void **)&__p.__r_.__value_.__l.__data_);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_6:
    if ((SHIBYTE(v9.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_7;
    }
LABEL_12:
    operator delete(v9.__r_.__value_.__l.__data_);
    if (*(const void ***)(*(void *)(a1 + 48) - 8) != v7) {
      return ((unint64_t)*((unsigned int *)v7 + 6) << 32) | 1;
    }
    return 0;
  }
LABEL_11:
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_12;
  }
LABEL_7:
  if (*(const void ***)(*(void *)(a1 + 48) - 8) != v7) {
    return ((unint64_t)*((unsigned int *)v7 + 6) << 32) | 1;
  }
  return 0;
}

void sub_1B4C4A56C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_1B4BB21F0(a1);
}

void *sub_1B4C4A588@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, void *a3@<X8>)
{
  v19[19] = *MEMORY[0x1E4F143B8];
  unint64_t v4 = *(void *)(*(void *)(a1 + 136) - 8);
  unint64_t v5 = *(void *)(v4 + 56) & 0xFFFFFFFFFFFFFFFELL;
  if (!v5) {
    goto LABEL_9;
  }
  unint64_t v6 = *(void *)(*(void *)(a1 + 136) - 8);
  do
  {
    while (*(_DWORD *)(v5 - 32) < a2)
    {
      unint64_t v5 = *(void *)(v5 + 16);
      if (!v5) {
        goto LABEL_7;
      }
    }
    unint64_t v6 = v5 - 56;
    unint64_t v5 = *(void *)(v5 + 8);
  }
  while (v5);
LABEL_7:
  if (v6 == v4 || *(_DWORD *)(v6 + 24) > a2)
  {
LABEL_9:
    sub_1B4BB2204((uint64_t)buf);
    sub_1B4BB34F0(buf, (uint64_t)"Unknown TokenID: ", 17);
    std::ostream::operator<<();
    std::stringbuf::str();
    *(void *)&buf[0] = *MEMORY[0x1E4FBA418];
    *(void *)((char *)buf + *(void *)(*(void *)&buf[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
    *((void *)&buf[0] + 1) = MEMORY[0x1E4FBA470] + 16;
    if (v18 < 0) {
      operator delete(__p);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x1BA992920](v19);
    if (qword_1E9D40AF0 != -1) {
      dispatch_once(&qword_1E9D40AF0, &unk_1F0D56000);
    }
    uint64_t v7 = (id)qword_1E9D40AE8;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      __int16 v8 = v14;
      if ((v15 & 0x80u) != 0) {
        __int16 v8 = (void *)v14[0];
      }
      LODWORD(buf[0]) = 136315138;
      *(void *)((char *)buf + 4) = v8;
      _os_log_error_impl(&dword_1B4BAD000, v7, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)buf, 0xCu);
    }

    exception = __cxa_allocate_exception(0x20uLL);
    std::string v10 = exception;
    uint64_t v11 = v15;
    uint64_t v12 = v14;
    if ((v15 & 0x80u) != 0)
    {
      uint64_t v12 = (void *)v14[0];
      uint64_t v11 = v14[1];
    }
    *(void *)&buf[0] = v12;
    *((void *)&buf[0] + 1) = v11;
    void *exception = &unk_1F0D552A0;
    sub_1B4C4F98C((uint64_t)(exception + 1), (uint64_t *)buf);
    __cxa_throw(v10, (struct type_info *)&unk_1F0D535C0, (void (*)(void *))sub_1B4C4A930);
  }
  return sub_1B4C4A9B0(a3, v4, a2);
}

void sub_1B4C4A864(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1B4C4A8C8(void *a1, uint64_t a2, uint64_t a3)
{
  v5[0] = a2;
  v5[1] = a3;
  *a1 = &unk_1F0D552A0;
  sub_1B4C4F98C((uint64_t)(a1 + 1), v5);
  return a1;
}

void sub_1B4C4A91C(_Unwind_Exception *a1)
{
  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

void sub_1B4C4A930(std::exception *this)
{
  id v1 = this;
  this->__vftable = (std::exception_vtbl *)&unk_1F0D552A0;
  if (SHIBYTE(this[3].__vftable) < 0)
  {
    operator delete(this[1].__vftable);
    this = v1;
  }
  else if (((vars8 ^ (2 * vars8)) & 0x4000000000000000) != 0)
  {
    __break(0xC471u);
  }
  std::exception::~exception(this);
}

void *sub_1B4C4A9B0(void *result, unint64_t a2, unsigned int a3)
{
  unint64_t v3 = *(void *)(a2 + 56) & 0xFFFFFFFFFFFFFFFELL;
  if (!v3) {
    goto LABEL_14;
  }
  unint64_t v4 = a2;
  do
  {
    while (*(_DWORD *)(v3 - 32) < a3)
    {
      unint64_t v3 = *(void *)(v3 + 16);
      if (!v3) {
        goto LABEL_7;
      }
    }
    unint64_t v4 = v3 - 56;
    unint64_t v3 = *(void *)(v3 + 8);
  }
  while (v3);
LABEL_7:
  if (v4 == a2 || *(_DWORD *)(v4 + 24) > a3)
  {
LABEL_14:
    std::logic_error::logic_error(&v8, "bimap<>: invalid key");
    v8.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D8] + 16);
    sub_1B4C4FB8C(&v8);
  }
  if (*(char *)(v4 + 23) < 0)
  {
    unint64_t v6 = *(void **)v4;
    unint64_t v7 = *(void *)(v4 + 8);
    return sub_1B4BCA11C(result, v6, v7);
  }
  else
  {
    long long v5 = *(_OWORD *)v4;
    result[2] = *(void *)(v4 + 16);
    *(_OWORD *)__n128 result = v5;
  }
  return result;
}

unint64_t sub_1B4C4AAA8(uint64_t a1, char *__s, uint64_t a3)
{
  v59[20] = *MEMORY[0x1E4F143B8];
  if (!*(void *)(a1 + 160))
  {
LABEL_55:
    unint64_t v31 = sub_1B4C4A44C(a1 + 80, __s, a3);
    if ((_BYTE)v31) {
      return HIDWORD(v31);
    }
    if (!*(unsigned char *)(a1 + 172))
    {
      sub_1B4BB2204((uint64_t)&__dst);
      sub_1B4BB34F0(&__dst, (uint64_t)"Unknown Token: ", 15);
      sub_1B4BB34F0(&__dst, (uint64_t)__s, a3);
      std::stringbuf::str();
      *(void *)&long long __dst = *MEMORY[0x1E4FBA418];
      *(void *)((char *)&__dst + *(void *)(__dst - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
      *((void *)&__dst + 1) = MEMORY[0x1E4FBA470] + 16;
      if (v58 < 0) {
        operator delete(__p);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x1BA992920](v59);
      if (qword_1E9D40AF0 != -1) {
        dispatch_once(&qword_1E9D40AF0, &unk_1F0D56000);
      }
      uint64_t v32 = (id)qword_1E9D40AE8;
      if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
      {
        uint64_t v33 = v53;
        if (v54 < 0) {
          uint64_t v33 = (void **)v53[0];
        }
        LODWORD(__dst) = 136315138;
        *(void *)((char *)&__dst + 4) = v33;
        _os_log_error_impl(&dword_1B4BAD000, v32, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&__dst, 0xCu);
      }

      exception = __cxa_allocate_exception(0x20uLL);
      uint64_t v35 = exception;
      uint64_t v36 = (void *)HIBYTE(v54);
      uint64_t v37 = v53;
      if (v54 < 0)
      {
        uint64_t v37 = (void **)v53[0];
        uint64_t v36 = v53[1];
      }
      *(void *)&long long __dst = v37;
      *((void *)&__dst + 1) = v36;
      void *exception = &unk_1F0D552A0;
      sub_1B4C4F98C((uint64_t)(exception + 1), (uint64_t *)&__dst);
      __cxa_throw(v35, (struct type_info *)&unk_1F0D535C0, (void (*)(void *))sub_1B4C4A930);
    }
    return *(unsigned int *)(a1 + 168);
  }
  size_t v6 = strlen(__s);
  if (v6 >= 0x7FFFFFFFFFFFFFF8) {
    sub_1B4BB33D8();
  }
  size_t v7 = v6;
  if (v6 >= 0x17)
  {
    uint64_t v12 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v12 = v6 | 7;
    }
    uint64_t v13 = v12 + 1;
    p_dst = (long long *)operator new(v12 + 1);
    *((void *)&__dst + 1) = v7;
    unint64_t v56 = v13 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
  }
  else
  {
    HIBYTE(v56) = v6;
    p_dst = &__dst;
    if (!v6)
    {
      LOBYTE(__dst) = 0;
      uint64_t v9 = a1 + 152;
      uint64_t v10 = *(void *)(a1 + 152);
      size_t v11 = HIBYTE(v56);
      if (!v10) {
        goto LABEL_53;
      }
      goto LABEL_11;
    }
  }
  memmove(p_dst, __s, v7);
  *((unsigned char *)p_dst + v7) = 0;
  uint64_t v9 = a1 + 152;
  uint64_t v10 = *(void *)(a1 + 152);
  size_t v11 = HIBYTE(v56);
  if (!v10) {
    goto LABEL_53;
  }
LABEL_11:
  if ((v11 & 0x80u) == 0) {
    size_t v14 = v11;
  }
  else {
    size_t v14 = *((void *)&__dst + 1);
  }
  if ((v11 & 0x80u) == 0) {
    unsigned __int8 v15 = &__dst;
  }
  else {
    unsigned __int8 v15 = (long long *)__dst;
  }
  uint64_t v16 = v9;
  do
  {
    int v17 = *(char *)(v10 + 55);
    if (v17 >= 0) {
      size_t v18 = *(unsigned __int8 *)(v10 + 55);
    }
    else {
      size_t v18 = *(void *)(v10 + 40);
    }
    if (v17 >= 0) {
      __int16 v19 = (const void *)(v10 + 32);
    }
    else {
      __int16 v19 = *(const void **)(v10 + 32);
    }
    if (v14 >= v18) {
      size_t v20 = v18;
    }
    else {
      size_t v20 = v14;
    }
    int v21 = memcmp(v19, v15, v20);
    BOOL v22 = v18 < v14;
    if (v21) {
      BOOL v22 = v21 < 0;
    }
    BOOL v23 = !v22;
    if (v22) {
      uint64_t v24 = (uint64_t *)(v10 + 8);
    }
    else {
      uint64_t v24 = (uint64_t *)v10;
    }
    if (v23) {
      uint64_t v16 = v10;
    }
    uint64_t v10 = *v24;
  }
  while (*v24);
  if (v16 != v9)
  {
    int v25 = *(char *)(v16 + 55);
    if (v25 >= 0) {
      size_t v26 = *(unsigned __int8 *)(v16 + 55);
    }
    else {
      size_t v26 = *(void *)(v16 + 40);
    }
    if (v25 >= 0) {
      uint64_t v27 = (const void *)(v16 + 32);
    }
    else {
      uint64_t v27 = *(const void **)(v16 + 32);
    }
    if (v26 >= v14) {
      size_t v28 = v14;
    }
    else {
      size_t v28 = v26;
    }
    int v29 = memcmp(v15, v27, v28);
    BOOL v30 = v14 < v26;
    if (v29) {
      BOOL v30 = v29 < 0;
    }
    if (!v30)
    {
      if ((v11 & 0x80) != 0) {
        goto LABEL_54;
      }
LABEL_50:
      if (v16 == v9) {
        goto LABEL_55;
      }
      goto LABEL_51;
    }
  }
LABEL_53:
  uint64_t v16 = v9;
  if ((v11 & 0x80) == 0) {
    goto LABEL_50;
  }
LABEL_54:
  operator delete((void *)__dst);
  if (v16 == v9) {
    goto LABEL_55;
  }
LABEL_51:
  if (*(char *)(v16 + 79) < 0)
  {
    sub_1B4BCA11C(v53, *(void **)(v16 + 56), *(void *)(v16 + 64));
  }
  else
  {
    *(_OWORD *)uint64_t v53 = *(_OWORD *)(v16 + 56);
    uint64_t v54 = *(void *)(v16 + 72);
  }
  if (v54 >= 0) {
    uint64_t v38 = v53;
  }
  else {
    uint64_t v38 = (void **)v53[0];
  }
  if (v54 >= 0) {
    uint64_t v39 = HIBYTE(v54);
  }
  else {
    uint64_t v39 = (uint64_t)v53[1];
  }
  unint64_t v40 = sub_1B4C4A44C(a1 + 80, (std::string::value_type *)v38, v39);
  if ((v40 & 1) == 0)
  {
    sub_1B4BB2204((uint64_t)&__dst);
    sub_1B4BB34F0(&__dst, (uint64_t)"Special token ", 14);
    if (v54 >= 0) {
      int v41 = v53;
    }
    else {
      int v41 = (void **)v53[0];
    }
    if (v54 >= 0) {
      uint64_t v42 = HIBYTE(v54);
    }
    else {
      uint64_t v42 = (uint64_t)v53[1];
    }
    sub_1B4BB34F0(&__dst, (uint64_t)v41, v42);
    sub_1B4BB34F0(&__dst, (uint64_t)" not found in vocab!", 20);
    std::stringbuf::str();
    *(void *)&long long __dst = *MEMORY[0x1E4FBA418];
    *(void *)((char *)&__dst + *(void *)(__dst - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
    *((void *)&__dst + 1) = MEMORY[0x1E4FBA470] + 16;
    if (v58 < 0) {
      operator delete(__p);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x1BA992920](v59);
    if (qword_1E9D40AF0 != -1) {
      dispatch_once(&qword_1E9D40AF0, &unk_1F0D56000);
    }
    uint64_t v43 = (id)qword_1E9D40AE8;
    if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
    {
      uint64_t v44 = v51;
      if ((v52 & 0x80u) != 0) {
        uint64_t v44 = (void *)v51[0];
      }
      LODWORD(__dst) = 136315138;
      *(void *)((char *)&__dst + 4) = v44;
      _os_log_error_impl(&dword_1B4BAD000, v43, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&__dst, 0xCu);
    }

    uint64_t v45 = __cxa_allocate_exception(0x20uLL);
    uint64_t v46 = v45;
    uint64_t v47 = v52;
    uint64_t v48 = v51;
    if ((v52 & 0x80u) != 0)
    {
      uint64_t v48 = (void *)v51[0];
      uint64_t v47 = v51[1];
    }
    *(void *)&long long __dst = v48;
    *((void *)&__dst + 1) = v47;
    void *v45 = &unk_1F0D552A0;
    sub_1B4C4F98C((uint64_t)(v45 + 1), (uint64_t *)&__dst);
    __cxa_throw(v46, (struct type_info *)&unk_1F0D535C0, (void (*)(void *))sub_1B4C4A930);
  }
  unint64_t v49 = HIDWORD(v40);
  if (SHIBYTE(v54) < 0) {
    operator delete(v53[0]);
  }
  return v49;
}

void sub_1B4C4B1BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if (a21 < 0)
    {
LABEL_6:
      operator delete(a16);
      _Unwind_Resume(a1);
    }
  }
  else if (a21 < 0)
  {
    goto LABEL_6;
  }
  _Unwind_Resume(a1);
}

void sub_1B4C4B26C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_1B4BC8450((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1B4C4B284(void *a1)
{
  uint64_t v1 = a1[22];
  (*(void (**)(void **__return_ptr))(*a1 + 72))(&__p);
  (*(void (**)(uint64_t, void **))(*(void *)v1 + 24))(v1, &__p);
  uint64_t v2 = (void **)__p;
  if (__p)
  {
    unint64_t v3 = v6;
    unint64_t v4 = __p;
    if (v6 != __p)
    {
      do
      {
        if (*((char *)v3 - 1) < 0) {
          operator delete(*(v3 - 3));
        }
        v3 -= 3;
      }
      while (v3 != v2);
      unint64_t v4 = __p;
    }
    size_t v6 = v2;
    operator delete(v4);
  }
}

void sub_1B4C4B350(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1B4BF9508((void **)va);
  _Unwind_Resume(a1);
}

void sub_1B4C4B364(uint64_t a1, char *__s, int64_t a3, int a4)
{
  size_t v7 = (std::string *)(a1 + 8);
  if (*(char *)(a1 + 31) < 0)
  {
    uint64_t v9 = *(char **)(a1 + 8);
    int64_t v8 = *(void *)(a1 + 16);
    if (!v8) {
      goto LABEL_25;
    }
  }
  else
  {
    int64_t v8 = *(unsigned __int8 *)(a1 + 31);
    uint64_t v9 = (char *)(a1 + 8);
    if (!*(unsigned char *)(a1 + 31)) {
      goto LABEL_25;
    }
  }
  if (a3 >= v8)
  {
    uint64_t v13 = &__s[a3];
    int v14 = *v9;
    int64_t v15 = a3;
    uint64_t v16 = __s;
    while (1)
    {
      int64_t v17 = v15 - v8;
      if (v17 == -1) {
        goto LABEL_6;
      }
      size_t v18 = (char *)memchr(v16, v14, v17 + 1);
      if (!v18) {
        goto LABEL_6;
      }
      __int16 v19 = v18;
      if (!memcmp(v18, v9, v8)) {
        break;
      }
      uint64_t v16 = v19 + 1;
      int64_t v15 = v13 - (v19 + 1);
      if (v15 < v8) {
        goto LABEL_6;
      }
    }
    if (v19 != v13 && __s == v19)
    {
LABEL_25:
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      sub_1B4C4B574(exception);
      __cxa_throw(exception, (struct type_info *)off_1E60A34D0, MEMORY[0x1E4FBA1E8]);
    }
  }
LABEL_6:
  (*(void (**)(void **__return_ptr))(**(void **)(a1 + 176) + 16))(&__p);
  if (a4) {
    sub_1B4C4B5B0((std::string **)&__p, (uint64_t)__p, v7);
  }
  (*(void (**)(uint64_t, void **))(*(void *)a1 + 80))(a1, &__p);
  uint64_t v10 = (void **)__p;
  if (__p)
  {
    size_t v11 = v22;
    uint64_t v12 = __p;
    if (v22 != __p)
    {
      do
      {
        if (*((char *)v11 - 1) < 0) {
          operator delete(*(v11 - 3));
        }
        v11 -= 3;
      }
      while (v11 != v10);
      uint64_t v12 = __p;
    }
    BOOL v22 = v10;
    operator delete(v12);
  }
}

void sub_1B4C4B538(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1B4BF9508((void **)va);
  _Unwind_Resume(a1);
}

void sub_1B4C4B54C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1B4C4B560(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1B4BF9508((void **)va);
  _Unwind_Resume(a1);
}

std::logic_error *sub_1B4C4B574(std::logic_error *a1)
{
  __n128 result = std::logic_error::logic_error(a1, "Input text should not contain BOS token!");
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
  return result;
}

void sub_1B4C4B5B0(std::string **a1, uint64_t a2, std::string *__str)
{
  unint64_t v3 = __str;
  size_t v6 = *a1;
  unint64_t v5 = (unint64_t)a1[1];
  uint64_t v7 = a2 - (void)*a1;
  uint64_t v8 = v7 / 24;
  uint64_t v9 = &(*a1)[v7 / 24];
  unint64_t v10 = (unint64_t)a1[2];
  if (v5 < v10)
  {
    if (v9 == (std::string *)v5)
    {
      if (SHIBYTE(__str->__r_.__value_.__r.__words[2]) < 0)
      {
        sub_1B4BCA11C(&(*a1)[v7 / 24], __str->__r_.__value_.__l.__data_, __str->__r_.__value_.__l.__size_);
      }
      else
      {
        long long v20 = *(_OWORD *)&__str->__r_.__value_.__l.__data_;
        v9->__r_.__value_.__r.__words[2] = __str->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v20;
      }
      a1[1] = v9 + 1;
      return;
    }
    size_t v11 = v9 + 1;
    unint64_t v12 = v5 - 24;
    if (v5 < 0x18)
    {
      a1[1] = (std::string *)v5;
      if ((std::string *)v5 == v11)
      {
LABEL_30:
        if (v9 <= v3) {
          v3 += a1[1] > v3;
        }
        std::string::operator=(v9, v3);
        return;
      }
    }
    else
    {
      unint64_t v13 = v5 - 24;
      int v14 = a1[1];
      do
      {
        long long v15 = *(_OWORD *)v13;
        v14->__r_.__value_.__r.__words[2] = *(void *)(v13 + 16);
        *(_OWORD *)&v14->__r_.__value_.__l.__data_ = v15;
        ++v14;
        *(void *)(v13 + 8) = 0;
        *(void *)(v13 + 16) = 0;
        *(void *)unint64_t v13 = 0;
        v13 += 24;
      }
      while (v13 < v5);
      a1[1] = v14;
      if ((std::string *)v5 == v11) {
        goto LABEL_30;
      }
    }
    uint64_t v23 = 8 * ((uint64_t)(v5 - (void)v11) >> 3);
    do
    {
      if (*(char *)(v12 + 23) < 0) {
        operator delete(*(void **)v12);
      }
      uint64_t v24 = (long long *)((char *)&v9[-1] + v23);
      long long v25 = *v24;
      *(void *)(v12 + 16) = *(void *)((char *)&v9->__r_.__value_.__l + v23 - 8);
      *(_OWORD *)unint64_t v12 = v25;
      v12 -= 24;
      v9->__r_.__value_.__s.__data_[v23 - 1] = 0;
      *(unsigned char *)uint64_t v24 = 0;
      v23 -= 24;
    }
    while (v23);
    goto LABEL_30;
  }
  unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - (void)v6) >> 3) + 1;
  if (v16 > 0xAAAAAAAAAAAAAAALL) {
    sub_1B4BB3244();
  }
  unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - (void)v6) >> 3);
  if (2 * v17 > v16) {
    unint64_t v16 = 2 * v17;
  }
  if (v17 >= 0x555555555555555) {
    unint64_t v18 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v18 = v16;
  }
  if (v18)
  {
    if (v18 > 0xAAAAAAAAAAAAAAALL) {
      sub_1B4BB2D38();
    }
    __int16 v19 = (char *)operator new(24 * v18);
  }
  else
  {
    __int16 v19 = 0;
  }
  int v21 = &v19[24 * v8];
  uint64_t v36 = v21;
  uint64_t v37 = v21;
  uint64_t v38 = &v19[24 * v18];
  if (v8 == v18)
  {
    if (v7 < 24)
    {
      if ((unint64_t)(v7 + 23) < 0x2F) {
        unint64_t v26 = 1;
      }
      else {
        unint64_t v26 = 2 * v8;
      }
      if (v26 > 0xAAAAAAAAAAAAAAALL) {
        sub_1B4BB2D38();
      }
      uint64_t v27 = (char *)operator new(24 * v26);
      int v21 = &v27[24 * (v26 >> 2)];
      uint64_t v36 = v21;
      uint64_t v37 = v21;
      uint64_t v38 = &v27[24 * v26];
      if (v19) {
        operator delete(v19);
      }
    }
    else
    {
      uint64_t v22 = v8 + 2;
      if (v8 >= -1) {
        uint64_t v22 = v8 + 1;
      }
      v21 -= 24 * (v22 >> 1);
      uint64_t v36 = v21;
      uint64_t v37 = v21;
    }
  }
  if (SHIBYTE(v3->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_1B4BCA11C(v21, v3->__r_.__value_.__l.__data_, v3->__r_.__value_.__l.__size_);
    int v21 = v36;
    size_t v28 = v37 + 24;
    int v29 = *a1;
    if (*a1 != v9) {
      goto LABEL_43;
    }
LABEL_50:
    unint64_t v31 = v21;
    uint64_t v33 = a1[1];
    if (v33 == v9) {
      goto LABEL_46;
    }
    goto LABEL_51;
  }
  *(_OWORD *)int v21 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
  *((void *)v21 + 2) = *((void *)&v3->__r_.__value_.__l + 2);
  size_t v28 = v21 + 24;
  int v29 = *a1;
  if (*a1 == v9) {
    goto LABEL_50;
  }
LABEL_43:
  BOOL v30 = v9;
  do
  {
    unint64_t v31 = v21 - 24;
    long long v32 = *(_OWORD *)&v30[-1].__r_.__value_.__l.__data_;
    *((void *)v21 - 1) = *((void *)&v30[-1].__r_.__value_.__l + 2);
    *(_OWORD *)(v21 - 24) = v32;
    v30[-1].__r_.__value_.__l.__size_ = 0;
    v30[-1].__r_.__value_.__r.__words[2] = 0;
    v30[-1].__r_.__value_.__r.__words[0] = 0;
    v21 -= 24;
    --v30;
  }
  while (v30 != v29);
  uint64_t v33 = a1[1];
  if (v33 == v9)
  {
LABEL_46:
    uint64_t v34 = *a1;
    *a1 = (std::string *)v31;
    a1[1] = (std::string *)v28;
    a1[2] = (std::string *)v38;
    if (v9 == v34) {
      goto LABEL_47;
    }
    goto LABEL_55;
  }
  do
  {
LABEL_51:
    long long v35 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    *((void *)v28 + 2) = *((void *)&v9->__r_.__value_.__l + 2);
    *(_OWORD *)size_t v28 = v35;
    v28 += 24;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    ++v9;
  }
  while (v9 != v33);
  uint64_t v34 = *a1;
  uint64_t v9 = a1[1];
  *a1 = (std::string *)v31;
  a1[1] = (std::string *)v28;
  a1[2] = (std::string *)v38;
  if (v9 == v34)
  {
LABEL_47:
    if (!v9) {
      return;
    }
LABEL_58:
    operator delete(v9);
    return;
  }
  do
  {
LABEL_55:
    if (SHIBYTE(v9[-1].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v9[-1].__r_.__value_.__l.__data_);
    }
    --v9;
  }
  while (v9 != v34);
  uint64_t v9 = v34;
  if (v34) {
    goto LABEL_58;
  }
}

void sub_1B4C4B9BC(_Unwind_Exception *a1)
{
  *(void *)(v2 + 8) = v1;
  _Unwind_Resume(a1);
}

void sub_1B4C4B9C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1B4BFA018((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1B4C4B9D8(char *__s@<X1>, uint64_t a2@<X0>, int64_t a3@<X2>, int a4@<W3>, std::string **a5@<X8>)
{
  uint64_t v9 = (std::string *)(a2 + 8);
  if (*(char *)(a2 + 31) < 0)
  {
    size_t v11 = *(char **)(a2 + 8);
    int64_t v10 = *(void *)(a2 + 16);
    if (!v10) {
      goto LABEL_17;
    }
  }
  else
  {
    int64_t v10 = *(unsigned __int8 *)(a2 + 31);
    size_t v11 = (char *)(a2 + 8);
    if (!*(unsigned char *)(a2 + 31)) {
      goto LABEL_17;
    }
  }
  if (a3 >= v10)
  {
    unint64_t v12 = &__s[a3];
    int v13 = *v11;
    int64_t v14 = a3;
    long long v15 = __s;
    while (1)
    {
      int64_t v16 = v14 - v10;
      if (v16 == -1) {
        goto LABEL_6;
      }
      unint64_t v17 = (char *)memchr(v15, v13, v16 + 1);
      if (!v17) {
        goto LABEL_6;
      }
      unint64_t v18 = v17;
      if (!memcmp(v17, v11, v10)) {
        break;
      }
      long long v15 = v18 + 1;
      int64_t v14 = v12 - (v18 + 1);
      if (v14 < v10) {
        goto LABEL_6;
      }
    }
    if (v18 != v12 && __s == v18)
    {
LABEL_17:
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      sub_1B4C4B574(exception);
      __cxa_throw(exception, (struct type_info *)off_1E60A34D0, MEMORY[0x1E4FBA1E8]);
    }
  }
LABEL_6:
  (*(void (**)(void, char *, int64_t))(**(void **)(a2 + 176) + 16))(*(void *)(a2 + 176), __s, a3);
  if (a4) {
    sub_1B4C4B5B0(a5, (uint64_t)*a5, v9);
  }
}

void sub_1B4C4BB38(_Unwind_Exception *a1)
{
  sub_1B4BF9508(v1);
  _Unwind_Resume(a1);
}

void sub_1B4C4BB4C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1B4C4BB60(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a1 + 31) = 3;
  *(_DWORD *)(a1 + 8) = 4092732;
  *(unsigned char *)(a1 + 55) = 4;
  strcpy((char *)(a1 + 32), "</s>");
  *(unsigned char *)(a1 + 79) = 5;
  strcpy((char *)(a1 + 56), "<unk>");
  uint64_t v4 = a1 + 80;
  *(void *)a1 = &unk_1F0D552F0;
  sub_1B4BB97DC(a1 + 80);
  int v5 = *(char *)(a2 + 23);
  if (v5 >= 0) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = *(void *)a2;
  }
  if (v5 >= 0) {
    uint64_t v7 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v7 = *(void *)(a2 + 8);
  }
  sub_1B4BB9DD4(v4, v6, v7);
  if (v12)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1B4BE40C0((uint64_t)&v12, &v11);
    if ((v11.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int64_t v10 = &v11;
    }
    else {
      int64_t v10 = (std::string *)v11.__r_.__value_.__r.__words[0];
    }
    std::runtime_error::runtime_error(exception, (const char *)v10);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  sub_1B4BE3D8C(&v12);
  return a1;
}

void sub_1B4C4BCA4(_Unwind_Exception *a1)
{
  sub_1B4BB997C(v2);
  sub_1B4C48A00(v1);
  _Unwind_Resume(a1);
}

void sub_1B4C4BCC0(_Unwind_Exception *a1)
{
  sub_1B4C48A00(v1);
  _Unwind_Resume(a1);
}

void sub_1B4C4BCD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((v18 & 1) == 0)
    {
LABEL_6:
      sub_1B4BE3D8C(&a15);
      sub_1B4BB997C(v16);
      sub_1B4C48A00(v15);
      _Unwind_Resume(a1);
    }
  }
  else if (!v18)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v17);
  goto LABEL_6;
}

uint64_t sub_1B4C4BD24(uint64_t a1)
{
  *(void *)a1 = &unk_1F0D552F0;
  sub_1B4BB997C(a1 + 80);
  *(void *)a1 = &unk_1F0D55160;
  if ((*(char *)(a1 + 79) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 55) & 0x80000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0) {
      return a1;
    }
    goto LABEL_7;
  }
  operator delete(*(void **)(a1 + 56));
  if (*(char *)(a1 + 55) < 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0) {
    return a1;
  }
LABEL_7:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

void *sub_1B4C4BDD4@<X0>(void **a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  int v18 = a2;
  if (((uint64_t (*)(void **))(*a1)[11])(a1) <= (unint64_t)a2)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    sub_1B4C4BF74();
    if ((v17 & 0x80u) == 0) {
      int64_t v14 = v16;
    }
    else {
      int64_t v14 = (void *)v16[0];
    }
    if ((v17 & 0x80u) == 0) {
      uint64_t v15 = v17;
    }
    else {
      uint64_t v15 = v16[1];
    }
    sub_1B4C4A8C8(exception, (uint64_t)v14, v15);
    __cxa_throw(exception, (struct type_info *)&unk_1F0D535C0, (void (*)(void *))sub_1B4C4A930);
  }
  __n128 result = (void *)sub_1B4BC4220(a1 + 10, a2);
  if (v7 >= 0x7FFFFFFFFFFFFFF8) {
    sub_1B4BB33D8();
  }
  uint64_t v8 = result;
  size_t v9 = v7;
  if (v7 >= 0x17)
  {
    uint64_t v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v10 = v7 | 7;
    }
    uint64_t v11 = v10 + 1;
    uint64_t v12 = operator new(v10 + 1);
    a3[1] = v9;
    a3[2] = v11 | 0x8000000000000000;
    *a3 = v12;
    a3 = v12;
  }
  else
  {
    *((unsigned char *)a3 + 23) = v7;
    if (!v7)
    {
      *(unsigned char *)a3 = 0;
      return result;
    }
  }
  __n128 result = memmove(a3, v8, v9);
  *((unsigned char *)a3 + v9) = 0;
  return result;
}

void sub_1B4C4BF38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if (v15)
    {
LABEL_6:
      __cxa_free_exception(v14);
      _Unwind_Resume(a1);
    }
  }
  else if (v15)
  {
    goto LABEL_6;
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1B4C4BF74()
{
  sub_1B4BB2204((uint64_t)v1);
  std::ostream::operator<<();
  std::stringbuf::str();
  v1[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v1 + *(void *)(v1[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v1[1] = MEMORY[0x1E4FBA470] + 16;
  if (v2 < 0) {
    operator delete((void *)v1[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1BA992920](&v3);
}

void sub_1B4C4C0A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1B4BC8450((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1B4C4C0BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1B4BC8450((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B4C4C0D0(uint64_t a1, std::string::value_type *__s, uint64_t a3)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  memset(&v39, 0, sizeof(v39));
  if (a3)
  {
    uint64_t v6 = a3;
    unint64_t v7 = __s;
    do
    {
      std::string::push_back(&v39, *v7++);
      --v6;
    }
    while (v6);
  }
  uint64_t v8 = &__s[a3];
  size_t v9 = a3;
  if (a3 >= 1)
  {
    uint64_t v10 = __s;
    do
    {
      uint64_t v11 = (char *)memchr(v10, 60, v9);
      if (!v11) {
        break;
      }
      if (*v11 == 60)
      {
        if (v11 == v8 || __s != v11 || __s[a3 - 1] != 62) {
          break;
        }
        if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v12 = &v39;
        }
        else {
          uint64_t v12 = (std::string *)v39.__r_.__value_.__r.__words[0];
        }
        if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v39.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v39.__r_.__value_.__l.__size_;
        }
        uint64_t v14 = sub_1B4BC4058((void **)(a1 + 80), (uint64_t)v12, size);
        goto LABEL_41;
      }
      uint64_t v10 = v11 + 1;
      size_t v9 = v8 - v10;
    }
    while (v8 - v10 >= 1);
  }
  std::string __p = 0;
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  int v15 = (void **)(a1 + 80);
  if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v16 = &v39;
  }
  else {
    uint64_t v16 = (std::string *)v39.__r_.__value_.__r.__words[0];
  }
  if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v17 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v17 = v39.__r_.__value_.__l.__size_;
  }
  sub_1B4BBD4E8(a1 + 80, (uint64_t)v16, v17, (char **)&__p, (uint64_t *)v34);
  if (v34[0])
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1B4BE40C0((uint64_t)v34, &buf);
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_std::string buf = &buf;
    }
    else {
      p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
    }
    std::runtime_error::runtime_error(exception, (const char *)p_buf);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  sub_1B4BE3D8C((uint64_t *)v34);
  int v18 = (unsigned int *)__p;
  int64_t v19 = v37 - (unsigned char *)__p;
  if (v37 - (unsigned char *)__p == 8)
  {
    if (*(char *)(a1 + 31) < 0)
    {
      uint64_t v20 = *(void *)(a1 + 8);
      uint64_t v21 = *(void *)(a1 + 16);
    }
    else
    {
      uint64_t v20 = a1 + 8;
      uint64_t v21 = *(unsigned __int8 *)(a1 + 31);
    }
    int v22 = *(_DWORD *)__p;
    if (v22 == (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 40))(a1, v20, v21))
    {
      uint64_t v23 = __p;
      int v18 = (unsigned int *)((char *)__p + 4);
LABEL_35:
      uint64_t v14 = *v18;
LABEL_40:
      uint64_t v37 = v23;
      operator delete(v23);
      goto LABEL_41;
    }
    int v18 = (unsigned int *)__p;
    int64_t v19 = v37 - (unsigned char *)__p;
  }
  uint64_t v23 = v18;
  if (v19 == 4) {
    goto LABEL_35;
  }
  if (qword_1E9D40AF0 != -1) {
    dispatch_once(&qword_1E9D40AF0, &unk_1F0D56000);
  }
  uint64_t v24 = (id)qword_1E9D40AE8;
  if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
  {
    if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v26 = &v39;
    }
    else {
      unint64_t v26 = (std::string *)v39.__r_.__value_.__r.__words[0];
    }
    size_t v28 = __p;
    uint64_t v27 = v37;
    sub_1B4BB8DC0(v32, " ");
    sub_1B4C4C50C(v34, (uint64_t *)&__p, (uint64_t)v32);
    if (v35 >= 0) {
      int v29 = v34;
    }
    else {
      int v29 = (void **)v34[0];
    }
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315650;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v26;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (v27 - v28) >> 2;
    HIWORD(buf.__r_.__value_.__r.__words[2]) = 2080;
    int v41 = v29;
    _os_log_error_impl(&dword_1B4BAD000, v24, OS_LOG_TYPE_ERROR, "Expected token=%s to get converted into single TokenID, but got %zu tokenIDs: %s. Returning UNK TokenID as fallback.", (uint8_t *)&buf, 0x20u);
    if (v35 < 0) {
      operator delete(v34[0]);
    }
    if (v33 < 0) {
      operator delete(v32[0]);
    }
  }

  uint64_t v14 = sub_1B4BC4058(v15, (uint64_t)"<unk>", 5);
  uint64_t v23 = __p;
  if (__p) {
    goto LABEL_40;
  }
LABEL_41:
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v39.__r_.__value_.__l.__data_);
  }
  return v14;
}

void sub_1B4C4C46C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1B4C4C50C(void *a1, uint64_t *a2, uint64_t a3)
{
  sub_1B4BB2204((uint64_t)v21);
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  uint64_t v8 = (v7 - *a2) >> 2;
  if (v8 == 1)
  {
    std::ostream::operator<<();
    std::stringbuf::str();
    goto LABEL_24;
  }
  if (!v8)
  {
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
    goto LABEL_24;
  }
  if (*(char *)(a3 + 23) >= 0) {
    size_t v9 = (const char *)a3;
  }
  else {
    size_t v9 = *(const char **)a3;
  }
  if (v6 != v7)
  {
    if (v9)
    {
      do
      {
        std::ostream::operator<<();
        size_t v10 = strlen(v9);
        sub_1B4BB34F0(v21, (uint64_t)v9, v10);
        v6 += 4;
      }
      while (v6 != v7);
    }
    else
    {
      do
      {
        std::ostream::operator<<();
        v6 += 4;
      }
      while (v6 != v7);
    }
  }
  uint64_t v11 = v19;
  std::stringbuf::str();
  size_t v12 = v20;
  uint64_t v13 = *(unsigned __int8 *)(a3 + 23);
  if ((v13 & 0x80u) != 0) {
    uint64_t v13 = *(void *)(a3 + 8);
  }
  if ((v20 & 0x80u) != 0)
  {
    size_t v12 = (size_t)v19[1];
    uint64_t v11 = (void **)v19[0];
  }
  if (v12 >= v12 - v13) {
    size_t v14 = v12 - v13;
  }
  else {
    size_t v14 = v12;
  }
  if (v14 >= 0x7FFFFFFFFFFFFFF8) {
    sub_1B4BB33D8();
  }
  if (v14 >= 0x17)
  {
    uint64_t v16 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17) {
      uint64_t v16 = v14 | 7;
    }
    uint64_t v17 = v16 + 1;
    int v18 = operator new(v16 + 1);
    a1[1] = v14;
    a1[2] = v17 | 0x8000000000000000;
    *a1 = v18;
    a1 = v18;
LABEL_30:
    memmove(a1, v11, v14);
    *((unsigned char *)a1 + v14) = 0;
    if (((char)v20 & 0x80000000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_31;
  }
  *((unsigned char *)a1 + 23) = v14;
  if (v14) {
    goto LABEL_30;
  }
  *(unsigned char *)a1 = 0;
  if (((char)v20 & 0x80000000) == 0) {
    goto LABEL_24;
  }
LABEL_31:
  operator delete(v19[0]);
LABEL_24:
  v21[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v21 + *(void *)(v21[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v21[1] = MEMORY[0x1E4FBA470] + 16;
  if (v22 < 0) {
    operator delete((void *)v21[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1BA992920](&v23);
}

void sub_1B4C4C7BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

void sub_1B4C4C804(uint64_t a1@<X0>, uint64_t **a2@<X8>)
{
  a2[1] = 0;
  uint64_t v3 = a2 + 1;
  a2[2] = 0;
  *a2 = (uint64_t *)(a2 + 1);
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1);
  uint64_t v31 = v4 << 32;
  int v32 = 1;
  int v27 = v4;
  if (v4)
  {
    for (int i = 0; i != v27; ++i)
    {
      (*(void (**)(void **__return_ptr))(*(void *)a1 + 48))(__p);
      uint64_t v6 = *v3;
      uint64_t v7 = v3;
      uint64_t v8 = v3;
      if (*v3)
      {
        char v9 = HIBYTE(v30);
        if (v30 >= 0) {
          size_t v10 = (void *)HIBYTE(v30);
        }
        else {
          size_t v10 = __p[1];
        }
        if (v30 >= 0) {
          uint64_t v11 = __p;
        }
        else {
          uint64_t v11 = (void **)__p[0];
        }
        while (1)
        {
          while (1)
          {
            uint64_t v8 = (uint64_t **)v6;
            size_t v14 = (uint64_t *)v6[4];
            size_t v12 = v6 + 4;
            uint64_t v13 = v14;
            int v15 = *((char *)v12 + 23);
            if (v15 >= 0) {
              size_t v16 = *((unsigned __int8 *)v12 + 23);
            }
            else {
              size_t v16 = v12[1];
            }
            if (v15 >= 0) {
              uint64_t v17 = v12;
            }
            else {
              uint64_t v17 = v13;
            }
            if (v16 >= (unint64_t)v10) {
              size_t v18 = (size_t)v10;
            }
            else {
              size_t v18 = v16;
            }
            int v19 = memcmp(v11, v17, v18);
            BOOL v20 = (unint64_t)v10 < v16;
            if (v19) {
              BOOL v20 = v19 < 0;
            }
            if (!v20) {
              break;
            }
            uint64_t v6 = *v8;
            uint64_t v7 = v8;
            if (!*v8) {
              goto LABEL_29;
            }
          }
          int v21 = memcmp(v17, v11, v18);
          BOOL v22 = v16 < (unint64_t)v10;
          if (v21) {
            BOOL v22 = v21 < 0;
          }
          if (!v22) {
            break;
          }
          uint64_t v6 = v8[1];
          if (!v6)
          {
            uint64_t v7 = v8 + 1;
            goto LABEL_29;
          }
        }
        *((_DWORD *)v8 + 14) = i;
        if ((v9 & 0x80) == 0) {
          continue;
        }
      }
      else
      {
LABEL_29:
        uint64_t v23 = operator new(0x40uLL);
        v23[2] = *(_OWORD *)__p;
        *((void *)v23 + 6) = v30;
        __p[1] = 0;
        uint64_t v30 = 0;
        __p[0] = 0;
        *((_DWORD *)v23 + 14) = 0;
        *(void *)uint64_t v23 = 0;
        *((void *)v23 + 1) = 0;
        *((void *)v23 + 2) = v8;
        std::string::value_type *v7 = (uint64_t *)v23;
        uint64_t v24 = (uint64_t *)**a2;
        long long v25 = (uint64_t *)v23;
        if (v24)
        {
          *a2 = v24;
          long long v25 = *v7;
        }
        sub_1B4BB3DA4(a2[1], v25);
        a2[2] = (uint64_t *)((char *)a2[2] + 1);
        char v26 = HIBYTE(v30);
        *((_DWORD *)v23 + 14) = i;
        if ((v26 & 0x80) == 0) {
          continue;
        }
      }
      operator delete(__p[0]);
    }
  }
}

void sub_1B4C4CA38(_Unwind_Exception *a1)
{
  sub_1B4C43188(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_1B4C4CA50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
  {
    operator delete(__p);
    sub_1B4C43188(v17, *(char **)(v17 + 8));
    _Unwind_Resume(a1);
  }
  sub_1B4C43188(v17, *(char **)(v17 + 8));
  _Unwind_Resume(a1);
}

__n128 sub_1B4C4CA90@<Q0>(uint64_t a1@<X0>, uint64_t **a2@<X8>)
{
  a2[1] = 0;
  uint64_t v4 = a2 + 1;
  a2[2] = 0;
  *a2 = (uint64_t *)(a2 + 1);
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1);
  uint64_t v20 = v5 << 32;
  int v21 = 1;
  int v7 = v5;
  if (v5)
  {
    uint64_t v8 = 0;
    do
    {
      (*(void (**)(__n128 *__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 48))(&v18, a1, v8);
      char v9 = *v4;
      size_t v10 = v4;
      uint64_t v11 = v4;
      if (*v4)
      {
        while (1)
        {
          while (1)
          {
            uint64_t v11 = v9;
            unsigned int v12 = *((_DWORD *)v9 + 8);
            if (v8 >= v12) {
              break;
            }
            char v9 = (uint64_t *)*v11;
            size_t v10 = (uint64_t **)v11;
            if (!*v11) {
              goto LABEL_11;
            }
          }
          if (v12 >= v8) {
            break;
          }
          char v9 = (uint64_t *)v11[1];
          if (!v9)
          {
            size_t v10 = (uint64_t **)(v11 + 1);
            goto LABEL_11;
          }
        }
        uint64_t v17 = v11;
        size_t v16 = (void **)(v11 + 5);
        if ((*((char *)v17 + 63) & 0x80000000) == 0) {
          goto LABEL_3;
        }
      }
      else
      {
LABEL_11:
        uint64_t v13 = operator new(0x40uLL);
        v13[8] = v8;
        *((void *)v13 + 6) = 0;
        *((void *)v13 + 7) = 0;
        *((void *)v13 + 5) = 0;
        *(void *)uint64_t v13 = 0;
        *((void *)v13 + 1) = 0;
        *((void *)v13 + 2) = v11;
        void *v10 = (uint64_t *)v13;
        size_t v14 = (uint64_t *)**a2;
        int v15 = (uint64_t *)v13;
        if (v14)
        {
          *a2 = v14;
          int v15 = *v10;
        }
        sub_1B4BB3DA4(a2[1], v15);
        a2[2] = (uint64_t *)((char *)a2[2] + 1);
        size_t v16 = (void **)(v13 + 10);
        if ((*((char *)v13 + 63) & 0x80000000) == 0) {
          goto LABEL_3;
        }
      }
      operator delete(*v16);
LABEL_3:
      __n128 result = v18;
      *(__n128 *)size_t v16 = v18;
      void v16[2] = v19;
      uint64_t v8 = (v8 + 1);
    }
    while (v8 != v7);
  }
  return result;
}

void sub_1B4C4CC34(_Unwind_Exception *a1)
{
  sub_1B4C43104(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_1B4C4CC4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    sub_1B4C43104(v15, *(char **)(v15 + 8));
    _Unwind_Resume(a1);
  }
  sub_1B4C43104(v15, *(char **)(v15 + 8));
  _Unwind_Resume(a1);
}

void sub_1B4C4CC8C(std::string::value_type *__s@<X1>, uint64_t a2@<X0>, int64_t a3@<X2>, int a4@<W3>, void *a5@<X8>)
{
  int64_t v6 = a3;
  int v7 = __s;
  size_t v10 = (char *)(a2 + 8);
  uint64_t v80 = a2 + 8;
  if (*(char *)(a2 + 31) < 0)
  {
    size_t v10 = *(char **)(a2 + 8);
    int64_t v11 = *(void *)(a2 + 16);
    if (!v11) {
      goto LABEL_31;
    }
  }
  else
  {
    int64_t v11 = *(unsigned __int8 *)(a2 + 31);
    if (!*(unsigned char *)(a2 + 31)) {
      goto LABEL_31;
    }
  }
  if (a3 >= v11)
  {
    uint64_t v15 = &__s[a3];
    int v16 = *v10;
    uint64_t v17 = (char *)a3;
    __n128 v18 = __s;
    while (1)
    {
      int v19 = &v17[-v11];
      if (v19 == (char *)-1) {
        goto LABEL_6;
      }
      uint64_t v20 = (char *)memchr(v18, v16, (size_t)(v19 + 1));
      if (!v20) {
        goto LABEL_6;
      }
      int v21 = v20;
      if (!memcmp(v20, v10, v11)) {
        break;
      }
      __n128 v18 = v21 + 1;
      uint64_t v17 = (char *)(v15 - (v21 + 1));
      if ((uint64_t)v17 < v11) {
        goto LABEL_6;
      }
    }
    if (v21 != v15 && v7 == v21)
    {
LABEL_31:
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      sub_1B4C4B574(exception);
      __cxa_throw(exception, (struct type_info *)off_1E60A34D0, MEMORY[0x1E4FBA1E8]);
    }
  }
LABEL_6:
  std::string __p = 0;
  unint64_t v84 = 0;
  unint64_t v85 = 0;
  memset(&v81, 0, sizeof(v81));
  if (v6)
  {
    do
    {
      std::string::push_back(&v81, *v7++);
      --v6;
    }
    while (v6);
    unsigned int v12 = HIBYTE(v81.__r_.__value_.__r.__words[2]);
    std::string::size_type size = v81.__r_.__value_.__l.__size_;
    std::string::size_type v14 = v81.__r_.__value_.__r.__words[0];
  }
  else
  {
    std::string::size_type size = 0;
    std::string::size_type v14 = 0;
    unsigned int v12 = 0;
  }
  if ((v12 & 0x80u) == 0) {
    BOOL v22 = &v81;
  }
  else {
    BOOL v22 = (std::string *)v14;
  }
  if ((v12 & 0x80u) == 0) {
    uint64_t v23 = v12;
  }
  else {
    uint64_t v23 = size;
  }
  sub_1B4BBD4E8(a2 + 80, (uint64_t)v22, v23, (char **)&__p, &v82);
  if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v81.__r_.__value_.__l.__data_);
  }
  if (v82)
  {
    uint64_t v78 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1B4BE40C0((uint64_t)&v82, &v81);
    if ((v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v79 = &v81;
    }
    else {
      uint64_t v79 = (std::string *)v81.__r_.__value_.__r.__words[0];
    }
    std::runtime_error::runtime_error(v78, (const char *)v79);
    __cxa_throw(v78, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  sub_1B4BE3D8C(&v82);
  if (!a4) {
    goto LABEL_80;
  }
  uint64_t v24 = (char *)__p;
  if (__p != v84)
  {
    if (*(char *)(a2 + 31) < 0)
    {
      uint64_t v26 = *(void *)(a2 + 8);
      uint64_t v25 = *(void *)(a2 + 16);
    }
    else
    {
      uint64_t v25 = *(unsigned __int8 *)(a2 + 31);
      uint64_t v26 = v80;
    }
    int v28 = *(_DWORD *)__p;
    if (v28 == (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 40))(a2, v26, v25)) {
      goto LABEL_80;
    }
    uint64_t v24 = (char *)__p;
  }
  if (*(char *)(a2 + 31) < 0)
  {
    uint64_t v30 = *(void *)(a2 + 8);
    uint64_t v29 = *(void *)(a2 + 16);
  }
  else
  {
    uint64_t v29 = *(unsigned __int8 *)(a2 + 31);
    uint64_t v30 = v80;
  }
  int v31 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 40))(a2, v30, v29);
  int v32 = v31;
  uint64_t v34 = (char *)__p;
  char v33 = v84;
  uint64_t v35 = v24 - (unsigned char *)__p;
  uint64_t v36 = (v24 - (unsigned char *)__p) >> 2;
  uint64_t v37 = (char *)__p + ((v24 - (unsigned char *)__p) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v84 < v85)
  {
    if (v37 == v84)
    {
      *(_DWORD *)uint64_t v37 = v31;
      unint64_t v84 = v37 + 4;
    }
    else
    {
      int64_t v38 = v84 - (v37 + 4);
      std::string v39 = (int *)(v84 - 4);
      if ((unint64_t)v84 < 4)
      {
        unint64_t v40 = v84;
      }
      else
      {
        unint64_t v40 = v84;
        do
        {
          int v60 = *v39++;
          *(_DWORD *)unint64_t v40 = v60;
          v40 += 4;
        }
        while (v39 < (int *)v33);
      }
      unint64_t v84 = v40;
      if (v33 != v37 + 4) {
        memmove(&v33[-4 * (v38 >> 2)], v37, v38);
      }
      *(_DWORD *)uint64_t v37 = v32;
    }
    goto LABEL_80;
  }
  unint64_t v41 = ((v84 - (unsigned char *)__p) >> 2) + 1;
  if (v41 >> 62) {
    sub_1B4BB3244();
  }
  uint64_t v42 = v85 - (void)__p;
  if ((uint64_t)(v85 - (void)__p) >> 1 > v41) {
    unint64_t v41 = v42 >> 1;
  }
  if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v43 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v43 = v41;
  }
  if (v43)
  {
    if (v43 >> 62) {
      sub_1B4BB2D38();
    }
    uint64_t v44 = (char *)operator new(4 * v43);
    uint64_t v45 = &v44[4 * v36];
    uint64_t v46 = &v44[4 * v43];
    if (v36 != v43) {
      goto LABEL_58;
    }
  }
  else
  {
    uint64_t v44 = 0;
    uint64_t v45 = (char *)(4 * v36);
    uint64_t v46 = 0;
    if (v36) {
      goto LABEL_58;
    }
  }
  if (v35 < 1)
  {
    if (v34 == v24) {
      unint64_t v59 = 1;
    }
    else {
      unint64_t v59 = v35 >> 1;
    }
    if (v59 >> 62) {
      sub_1B4BB2D38();
    }
    uint64_t v45 = (char *)operator new(4 * v59);
    uint64_t v46 = &v45[4 * v59];
    if (v44)
    {
      operator delete(v44);
      uint64_t v46 = &v45[4 * v59];
      uint64_t v48 = (char *)__p;
      *(_DWORD *)uint64_t v45 = v32;
      unint64_t v49 = v45 + 4;
      if (v48 != v37) {
        goto LABEL_59;
      }
LABEL_74:
      uint64_t v53 = v45;
      size_t v55 = v84 - v37;
      if (v84 == v37) {
        goto LABEL_65;
      }
      goto LABEL_64;
    }
  }
  else
  {
    unint64_t v47 = v36 + 2;
    if (v36 >= -1) {
      unint64_t v47 = v36 + 1;
    }
    v45 -= 4 * (v47 >> 1);
  }
LABEL_58:
  uint64_t v48 = v34;
  *(_DWORD *)uint64_t v45 = v32;
  unint64_t v49 = v45 + 4;
  if (v34 == v37) {
    goto LABEL_74;
  }
LABEL_59:
  int v50 = &v34[v35 & 0xFFFFFFFFFFFFFFFCLL];
  unint64_t v51 = v50 - v48 - 4;
  if (v51 < 0x2C || (unint64_t)(v50 - v45) < 0x20)
  {
    unsigned __int8 v52 = v37;
    uint64_t v53 = v45;
    do
    {
LABEL_62:
      int v54 = *((_DWORD *)v52 - 1);
      v52 -= 4;
      *((_DWORD *)v53 - 1) = v54;
      v53 -= 4;
    }
    while (v52 != v48);
    goto LABEL_63;
  }
  uint64_t v72 = (v51 >> 2) + 1;
  uint64_t v73 = 4 * (v72 & 0x7FFFFFFFFFFFFFF8);
  unsigned __int8 v52 = &v37[-v73];
  uint64_t v53 = &v45[-v73];
  uint64_t v74 = v45 - 16;
  int v75 = &v34[4 * v36 - 16];
  uint64_t v76 = v72 & 0x7FFFFFFFFFFFFFF8;
  do
  {
    long long v77 = *(_OWORD *)v75;
    *((_OWORD *)v74 - 1) = *((_OWORD *)v75 - 1);
    *(_OWORD *)uint64_t v74 = v77;
    v74 -= 32;
    v75 -= 32;
    v76 -= 8;
  }
  while (v76);
  if (v72 != (v72 & 0x7FFFFFFFFFFFFFF8)) {
    goto LABEL_62;
  }
LABEL_63:
  size_t v55 = v84 - v37;
  if (v84 != v37)
  {
LABEL_64:
    unint64_t v56 = v37;
    uint64_t v57 = v46;
    memmove(v49, v56, v55);
    uint64_t v46 = v57;
    uint64_t v48 = (char *)__p;
  }
LABEL_65:
  char v58 = &v49[v55];
  std::string __p = v53;
  unint64_t v84 = v58;
  unint64_t v85 = (unint64_t)v46;
  if (!v48) {
    goto LABEL_81;
  }
  operator delete(v48);
LABEL_80:
  uint64_t v53 = (char *)__p;
  char v58 = v84;
LABEL_81:
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  uint64_t v61 = v58 - v53;
  if (v58 != v53)
  {
    if (v61 < 0) {
      sub_1B4BB3244();
    }
    unint64_t v62 = operator new(v58 - v53);
    *a5 = v62;
    a5[2] = &v62[v61 >> 2];
    bzero(v62, v58 - v53);
    a5[1] = (char *)v62 + v61;
    if ((unint64_t)(v61 - 4) < 0x1C)
    {
      long long v63 = v53;
    }
    else
    {
      long long v63 = v53;
      if ((unint64_t)((char *)v62 - v53) >= 0x20)
      {
        unint64_t v64 = ((unint64_t)(v61 - 4) >> 2) + 1;
        uint64_t v65 = v64 & 0x7FFFFFFFFFFFFFF8;
        uint64_t v66 = &v62[v65];
        long long v63 = &v53[v65 * 4];
        uint64_t v67 = (long long *)(v53 + 16);
        uint64_t v68 = v62 + 4;
        uint64_t v69 = v64 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v70 = *v67;
          *(v68 - 1) = *(v67 - 1);
          *uint64_t v68 = v70;
          v67 += 2;
          v68 += 2;
          v69 -= 8;
        }
        while (v69);
        unint64_t v62 = v66;
        if (v64 == (v64 & 0x7FFFFFFFFFFFFFF8)) {
          goto LABEL_91;
        }
      }
    }
    do
    {
      int v71 = *(_DWORD *)v63;
      v63 += 4;
      *v62++ = v71;
    }
    while (v63 != v58);
  }
LABEL_91:
  if (v53)
  {
    unint64_t v84 = v53;
    operator delete(v53);
  }
}

void sub_1B4C4D310(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *__p, uint64_t a18)
{
  if (v18) {
    operator delete(v18);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_1B4C4D3C8@<X0>(uint64_t a1@<X0>, char **a2@<X1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  int64_t v6 = *a2;
  uint64_t v5 = a2[1];
  memset(&__p, 0, sizeof(__p));
  uint64_t v7 = v5 - v6;
  if (v5 != v6)
  {
    if (v7 < 0) {
      sub_1B4BB3244();
    }
    uint64_t v8 = operator new(v5 - v6);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&v8[v7 >> 2];
    bzero(v8, v5 - v6);
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)v8 + v7;
    if ((unint64_t)(v7 - 4) < 0x1C) {
      goto LABEL_20;
    }
    if ((unint64_t)((char *)v8 - v6) < 0x20) {
      goto LABEL_20;
    }
    unint64_t v9 = ((unint64_t)(v7 - 4) >> 2) + 1;
    uint64_t v10 = v9 & 0x7FFFFFFFFFFFFFF8;
    int64_t v11 = &v8[v10];
    unsigned int v12 = &v6[v10 * 4];
    uint64_t v13 = (long long *)(v6 + 16);
    std::string::size_type v14 = v8 + 4;
    uint64_t v15 = v9 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v16 = *v13;
      *(v14 - 1) = *(v13 - 1);
      *std::string::size_type v14 = v16;
      v13 += 2;
      v14 += 2;
      v15 -= 8;
    }
    while (v15);
    uint64_t v8 = v11;
    int64_t v6 = v12;
    if (v9 != (v9 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_20:
      do
      {
        int v17 = *(_DWORD *)v6;
        v6 += 4;
        *v8++ = v17;
      }
      while (v6 != v5);
    }
  }
  sub_1B4BBDBF0(a1 + 80, (uint64_t)&__p, (uint64_t)a3, &v22);
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v22)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1B4BE40C0((uint64_t)&v22, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    std::runtime_error::runtime_error(exception, (const char *)p_p);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  return sub_1B4BE3D8C(&v22);
}

void sub_1B4C4D564(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (__p)
  {
    operator delete(__p);
    if ((*(char *)(v15 + 23) & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((*(char *)(v15 + 23) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)v15);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_1B4C4D5E8@<X0>(uint64_t a1@<X0>, std::string::value_type *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  memset(&__p, 0, sizeof(__p));
  if (a3)
  {
    uint64_t v6 = a3;
    do
    {
      std::string::push_back(&__p, *a2++);
      --v6;
    }
    while (v6);
    unsigned int v8 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
    std::string::size_type v10 = __p.__r_.__value_.__r.__words[0];
  }
  else
  {
    std::string::size_type size = 0;
    std::string::size_type v10 = 0;
    unsigned int v8 = 0;
  }
  if ((v8 & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)v10;
  }
  if ((v8 & 0x80u) == 0) {
    uint64_t v12 = v8;
  }
  else {
    uint64_t v12 = size;
  }
  sub_1B4BBD1E4(a1 + 80, (uint64_t)p_p, v12, a4, &v17);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v17)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1B4BE40C0((uint64_t)&v17, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v15 = &__p;
    }
    else {
      uint64_t v15 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    std::runtime_error::runtime_error(exception, (const char *)v15);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  return sub_1B4BE3D8C(&v17);
}

void sub_1B4C4D710(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_1B4BF9508(v15);
    _Unwind_Resume(a1);
  }
  sub_1B4BF9508(v15);
  _Unwind_Resume(a1);
}

void sub_1B4C4D784(uint64_t a1)
{
  sub_1B4C50510(a1);
  JUMPOUT(0x1BA9929C0);
}

void sub_1B4C4D7BC(uint64_t a1@<X0>, uint64_t **a2@<X8>)
{
  uint64_t v3 = *(void **)(*(void *)(a1 + 128) - 8);
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v34 = v3;
  uint64_t v35 = (char **)(a2 + 1);
  *a2 = (uint64_t *)(a2 + 1);
  uint64_t v4 = v3[5];
  if (v4) {
    uint64_t v5 = (void *)(v4 - 32);
  }
  else {
    uint64_t v5 = 0;
  }
  if (v5 != v3)
  {
    do
    {
      if (*((char *)v5 + 23) < 0)
      {
        sub_1B4BCA11C(__p, (void *)*v5, v5[1]);
      }
      else
      {
        long long v11 = *(_OWORD *)v5;
        uint64_t v37 = v5[2];
        *(_OWORD *)std::string __p = v11;
      }
      int v12 = *((_DWORD *)v5 + 6);
      int v38 = v12;
      uint64_t v13 = v35;
      std::string::size_type v14 = *v35;
      uint64_t v15 = v35;
      if (*v35)
      {
        char v16 = HIBYTE(v37);
        if (v37 >= 0) {
          uint64_t v17 = (void *)HIBYTE(v37);
        }
        else {
          uint64_t v17 = __p[1];
        }
        if (v37 >= 0) {
          __n128 v18 = __p;
        }
        else {
          __n128 v18 = (void **)__p[0];
        }
        while (1)
        {
          while (1)
          {
            uint64_t v13 = (char **)v14;
            int v21 = (const void *)*((void *)v14 + 4);
            int v19 = v14 + 32;
            uint64_t v20 = v21;
            int v22 = *((char *)v19 + 23);
            if (v22 >= 0) {
              size_t v23 = *((unsigned __int8 *)v19 + 23);
            }
            else {
              size_t v23 = v19[1];
            }
            if (v22 >= 0) {
              uint64_t v24 = v19;
            }
            else {
              uint64_t v24 = v20;
            }
            if (v23 >= (unint64_t)v17) {
              size_t v25 = (size_t)v17;
            }
            else {
              size_t v25 = v23;
            }
            int v26 = memcmp(v18, v24, v25);
            BOOL v27 = (unint64_t)v17 < v23;
            if (v26) {
              BOOL v27 = v26 < 0;
            }
            if (!v27) {
              break;
            }
            std::string::size_type v14 = *v13;
            uint64_t v15 = v13;
            if (!*v13) {
              goto LABEL_42;
            }
          }
          int v28 = memcmp(v24, v18, v25);
          BOOL v29 = v23 < (unint64_t)v17;
          if (v28) {
            BOOL v29 = v28 < 0;
          }
          if (!v29) {
            break;
          }
          std::string::size_type v14 = v13[1];
          if (!v14)
          {
            uint64_t v15 = v13 + 1;
            goto LABEL_42;
          }
        }
      }
      else
      {
LABEL_42:
        uint64_t v30 = (char *)operator new(0x40uLL);
        int v31 = v30 + 32;
        if (SHIBYTE(v37) < 0)
        {
          sub_1B4BCA11C(v31, __p[0], (unint64_t)__p[1]);
          int v12 = v38;
        }
        else
        {
          *(_OWORD *)int v31 = *(_OWORD *)__p;
          *((void *)v30 + 6) = v37;
        }
        *((_DWORD *)v30 + 14) = v12;
        *(void *)uint64_t v30 = 0;
        *((void *)v30 + 1) = 0;
        *((void *)v30 + 2) = v13;
        *uint64_t v15 = v30;
        int v32 = (uint64_t *)**a2;
        if (v32)
        {
          *a2 = v32;
          uint64_t v30 = *v15;
        }
        sub_1B4BB3DA4(a2[1], (uint64_t *)v30);
        a2[2] = (uint64_t *)((char *)a2[2] + 1);
        char v16 = HIBYTE(v37);
      }
      if (v16 < 0)
      {
        operator delete(__p[0]);
        char v33 = (void *)v5[6];
        if (!v33)
        {
LABEL_6:
          uint64_t v7 = v5[4];
          uint64_t v6 = v5 + 4;
          unsigned int v8 = (void *)(v7 & 0xFFFFFFFFFFFFFFFELL);
          if (v6 == *(void **)((v7 & 0xFFFFFFFFFFFFFFFELL) + 16))
          {
            do
            {
              uint64_t v6 = v8;
              unsigned int v8 = (void *)(*v8 & 0xFFFFFFFFFFFFFFFELL);
            }
            while (v6 == (void *)v8[2]);
            unint64_t v9 = (void *)v6[2];
          }
          else
          {
            unint64_t v9 = 0;
          }
          if (v9 == v8) {
            std::string::size_type v10 = v6;
          }
          else {
            std::string::size_type v10 = v8;
          }
          goto LABEL_11;
        }
      }
      else
      {
        char v33 = (void *)v5[6];
        if (!v33) {
          goto LABEL_6;
        }
      }
      do
      {
        std::string::size_type v10 = v33;
        char v33 = (void *)v33[1];
      }
      while (v33);
LABEL_11:
      uint64_t v5 = v10 - 4;
    }
    while (v10 - 4 != v34);
  }
}

void sub_1B4C4DA28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  operator delete(v17);
  if (a16 < 0) {
    operator delete(__p);
  }
  sub_1B4C43188(v16, *(char **)(v16 + 8));
  _Unwind_Resume(a1);
}

void sub_1B4C4DA78(uint64_t a1@<X0>, uint64_t **a2@<X8>)
{
  uint64_t v3 = *(void **)(*(void *)(a1 + 128) - 8);
  a2[1] = 0;
  uint64_t v4 = (char **)(a2 + 1);
  a2[2] = 0;
  *a2 = (uint64_t *)(a2 + 1);
  uint64_t v5 = v3[5];
  if (v5) {
    uint64_t v6 = (void *)(v5 - 32);
  }
  else {
    uint64_t v6 = 0;
  }
  while (v6 != v3)
  {
    if (*((char *)v6 + 23) < 0)
    {
      sub_1B4BCA11C(__p, (void *)*v6, v6[1]);
    }
    else
    {
      long long v12 = *(_OWORD *)v6;
      uint64_t v23 = v6[2];
      *(_OWORD *)std::string __p = v12;
    }
    unsigned int v13 = *((_DWORD *)v6 + 6);
    unsigned int v24 = v13;
    std::string::size_type v14 = *v4;
    uint64_t v15 = v4;
    uint64_t v16 = v4;
    if (*v4)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v16 = (char **)v14;
          unsigned int v17 = *((_DWORD *)v14 + 8);
          if (v17 <= v13) {
            break;
          }
          std::string::size_type v14 = *v16;
          uint64_t v15 = v16;
          if (!*v16) {
            goto LABEL_23;
          }
        }
        if (v17 >= v13) {
          break;
        }
        std::string::size_type v14 = v16[1];
        if (!v14)
        {
          uint64_t v15 = v16 + 1;
          goto LABEL_23;
        }
      }
    }
    else
    {
LABEL_23:
      __n128 v18 = (char *)operator new(0x40uLL);
      *((_DWORD *)v18 + 8) = v13;
      int v19 = v18 + 40;
      if (SHIBYTE(v23) < 0)
      {
        sub_1B4BCA11C(v19, __p[0], (unint64_t)__p[1]);
      }
      else
      {
        *(_OWORD *)int v19 = *(_OWORD *)__p;
        *((void *)v18 + 7) = v23;
      }
      *(void *)__n128 v18 = 0;
      *((void *)v18 + 1) = 0;
      *((void *)v18 + 2) = v16;
      *uint64_t v15 = v18;
      uint64_t v20 = (uint64_t *)**a2;
      if (v20)
      {
        *a2 = v20;
        __n128 v18 = *v15;
      }
      sub_1B4BB3DA4(a2[1], (uint64_t *)v18);
      a2[2] = (uint64_t *)((char *)a2[2] + 1);
    }
    if (SHIBYTE(v23) < 0)
    {
      operator delete(__p[0]);
      int v21 = (void *)v6[6];
      if (v21)
      {
        do
        {
LABEL_33:
          long long v11 = v21;
          int v21 = (void *)v21[1];
        }
        while (v21);
        goto LABEL_9;
      }
    }
    else
    {
      int v21 = (void *)v6[6];
      if (v21) {
        goto LABEL_33;
      }
    }
    uint64_t v8 = v6[4];
    uint64_t v7 = v6 + 4;
    unint64_t v9 = (void *)(v8 & 0xFFFFFFFFFFFFFFFELL);
    if (v7 == *(void **)((v8 & 0xFFFFFFFFFFFFFFFELL) + 16))
    {
      do
      {
        uint64_t v7 = v9;
        unint64_t v9 = (void *)(*v9 & 0xFFFFFFFFFFFFFFFELL);
      }
      while (v7 == (void *)v9[2]);
      std::string::size_type v10 = (void *)v7[2];
    }
    else
    {
      std::string::size_type v10 = 0;
    }
    if (v10 == v9) {
      long long v11 = v7;
    }
    else {
      long long v11 = v9;
    }
LABEL_9:
    uint64_t v6 = v11 - 4;
  }
}

void sub_1B4C4DC44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  operator delete(v15);
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_1B4C43104(v14, *(char **)(v14 + 8));
  _Unwind_Resume(a1);
}

void sub_1B4C4DC94(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *(const void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  int64_t v6 = v4 - *(void *)a2;
  if (v4 == *(void *)a2)
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
  }
  else
  {
    if (v6 < 0) {
      sub_1B4BB3244();
    }
    uint64_t v8 = (char *)operator new(v4 - *(void *)a2);
    memcpy(v8, v5, v6);
    uint64_t v9 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    uint64_t v10 = 4 * (v6 >> 2);
    *(void *)a3 = 0;
    do
    {
      (*(void (**)(void **__return_ptr, uint64_t, void))(*(void *)a1 + 48))(__p, a1, *(unsigned int *)&v8[v9]);
      unint64_t v12 = *(void *)(a3 + 8);
      if (v12 < *(void *)(a3 + 16))
      {
        long long v11 = *(_OWORD *)__p;
        *(void *)(v12 + 16) = v16;
        *(_OWORD *)unint64_t v12 = v11;
        *(void *)(a3 + 8) = v12 + 24;
      }
      else
      {
        unsigned int v13 = sub_1B4BFB6B0((void **)a3, (uint64_t)__p);
        int v14 = SHIBYTE(v16);
        *(void *)(a3 + 8) = v13;
        if (v14 < 0) {
          operator delete(__p[0]);
        }
      }
      v9 += 4;
    }
    while (v10 != v9);
    operator delete(v8);
  }
}

void sub_1B4C4DDCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B4C4DE14(uint64_t a1@<X0>, long long **a2@<X1>, char **a3@<X8>)
{
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  sub_1B4BCA340((char *)&v35, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  int64_t v6 = (void **)v35;
  uint64_t v5 = v36;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  if (v6 != v5)
  {
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    uint64_t v34 = v5;
    while (1)
    {
      if (*((char *)v6 + 23) < 0)
      {
        sub_1B4BCA11C(__p, *v6, (unint64_t)v6[1]);
      }
      else
      {
        long long v10 = *(_OWORD *)v6;
        std::string v39 = v6[2];
        *(_OWORD *)std::string __p = v10;
      }
      long long v11 = SHIBYTE(v39) >= 0 ? __p : (void **)__p[0];
      unint64_t v12 = SHIBYTE(v39) >= 0 ? (void *)HIBYTE(v39) : __p[1];
      int v13 = (*(uint64_t (**)(uint64_t, void **, void *))(*(void *)a1 + 40))(a1, v11, v12);
      int v14 = v13;
      if (v9 >= v8) {
        break;
      }
      *(_DWORD *)uint64_t v9 = v13;
      v9 += 4;
      a3[1] = v9;
      if (SHIBYTE(v39) < 0) {
        goto LABEL_33;
      }
LABEL_3:
      v6 += 3;
      if (v6 == v5)
      {
        int64_t v6 = (void **)v35;
        goto LABEL_45;
      }
    }
    uint64_t v15 = (v9 - v7) >> 2;
    unint64_t v16 = v15 + 1;
    if ((unint64_t)(v15 + 1) >> 62) {
      sub_1B4BB3244();
    }
    if ((v8 - v7) >> 1 > v16) {
      unint64_t v16 = (v8 - v7) >> 1;
    }
    if ((unint64_t)(v8 - v7) >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v17 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v16;
    }
    if (v17)
    {
      if (v17 >> 62) {
        sub_1B4BB2D38();
      }
      __n128 v18 = operator new(4 * v17);
      int v19 = &v18[4 * v15];
      *(_DWORD *)int v19 = v14;
      uint64_t v20 = (uint64_t)(v19 + 4);
      int64_t v21 = v9 - v7;
      if (v9 == v7)
      {
LABEL_30:
        uint64_t v8 = &v18[4 * v17];
        *a3 = v19;
        a3[1] = (char *)v20;
        a3[2] = v8;
        if (v7) {
          operator delete(v7);
        }
        uint64_t v7 = v19;
        uint64_t v9 = (char *)v20;
        uint64_t v5 = v34;
        a3[1] = (char *)v20;
        if ((SHIBYTE(v39) & 0x80000000) == 0) {
          goto LABEL_3;
        }
LABEL_33:
        operator delete(__p[0]);
        goto LABEL_3;
      }
    }
    else
    {
      __n128 v18 = 0;
      int v19 = (char *)(4 * v15);
      *(_DWORD *)(4 * v15) = v14;
      uint64_t v20 = 4 * v15 + 4;
      int64_t v21 = v9 - v7;
      if (v9 == v7) {
        goto LABEL_30;
      }
    }
    unint64_t v22 = v21 - 4;
    if (v22 >= 0xBC)
    {
      unint64_t v25 = (v9 - 4 - v7) & 0xFFFFFFFFFFFFFFFCLL;
      if (&v18[v9 - v7 - 4 - v25] > &v18[v9 - v7 - 4])
      {
        uint64_t v23 = v9;
      }
      else if (&v9[-v25 - 4] > v9 - 4)
      {
        uint64_t v23 = v9;
      }
      else if ((unint64_t)(v7 - v18) >= 0x20)
      {
        uint64_t v26 = (v22 >> 2) + 1;
        uint64_t v27 = 4 * (v26 & 0x7FFFFFFFFFFFFFF8);
        uint64_t v23 = &v9[-v27];
        v19 -= v27;
        int v28 = &v18[4 * v15 - 16];
        BOOL v29 = v9 - 16;
        uint64_t v30 = v26 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v31 = *(_OWORD *)v29;
          *(v28 - 1) = *((_OWORD *)v29 - 1);
          *int v28 = v31;
          v28 -= 2;
          v29 -= 32;
          v30 -= 8;
        }
        while (v30);
        if (v26 == (v26 & 0x7FFFFFFFFFFFFFF8)) {
          goto LABEL_30;
        }
      }
      else
      {
        uint64_t v23 = v9;
      }
    }
    else
    {
      uint64_t v23 = v9;
    }
    do
    {
      int v24 = *((_DWORD *)v23 - 1);
      v23 -= 4;
      *((_DWORD *)v19 - 1) = v24;
      v19 -= 4;
    }
    while (v23 != v7);
    goto LABEL_30;
  }
LABEL_45:
  if (v6)
  {
    int v32 = v36;
    char v33 = v6;
    if (v36 != v6)
    {
      do
      {
        if (*((char *)v32 - 1) < 0) {
          operator delete(*(v32 - 3));
        }
        v32 -= 3;
      }
      while (v32 != v6);
      char v33 = v35;
    }
    uint64_t v36 = v6;
    operator delete(v33);
  }
}

void sub_1B4C4E12C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  int64_t v21 = *(void **)a11;
  if (!*(void *)a11)
  {
    sub_1B4BF9508(&a12);
    _Unwind_Resume(a1);
  }
  *(void *)(a11 + 8) = v21;
  operator delete(v21);
  sub_1B4BF9508(&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_1B4C4E19C(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 88) + 8);
}

void sub_1B4C4E1A8(uint64_t a1)
{
  *(void *)a1 = &unk_1F0D552F0;
  sub_1B4BB997C(a1 + 80);
  *(void *)a1 = &unk_1F0D55160;
  if (*(char *)(a1 + 79) < 0)
  {
    operator delete(*(void **)(a1 + 56));
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(a1 + 31) & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_9:
      operator delete(*(void **)(a1 + 8));
LABEL_4:
      JUMPOUT(0x1BA9929C0);
    }
  }
  else if ((*(char *)(a1 + 55) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 32));
  if ((*(char *)(a1 + 31) & 0x80000000) == 0) {
    goto LABEL_4;
  }
  goto LABEL_9;
}

uint64_t sub_1B4C4E26C(uint64_t a1)
{
  return (int)sub_1B4BC3EA8((void **)(a1 + 80));
}

void sub_1B4C4E294(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = *(void *)(a1 + 64);
    if (v2) {
      uint64_t v3 = v2 - 56;
    }
    else {
      uint64_t v3 = 0;
    }
    sub_1B4C4E294(v3);
    uint64_t v4 = *(void *)(a1 + 72);
    if (v4) {
      uint64_t v5 = v4 - 56;
    }
    else {
      uint64_t v5 = 0;
    }
    sub_1B4C4E294(v5);
    if (*(char *)(a1 + 23) < 0)
    {
      operator delete(*(void **)a1);
      int64_t v6 = (void *)a1;
    }
    else
    {
      int64_t v6 = (void *)a1;
    }
    operator delete(v6);
  }
}

unint64_t sub_1B4C4E328(unint64_t result, unint64_t **a2)
{
  unint64_t v2 = *(void *)result & 0xFFFFFFFFFFFFFFFELL;
  *(void *)__n128 result = v2;
  uint64_t v3 = *a2;
  if ((**a2 & 0xFFFFFFFFFFFFFFFELL) != result)
  {
    uint64_t v4 = *(void *)v2;
    if ((*(void *)v2 & 1) == 0)
    {
      unint64_t v5 = v2;
      while (1)
      {
        unint64_t v6 = v4 & 0xFFFFFFFFFFFFFFFELL;
        uint64_t v7 = *(unsigned char **)((v4 & 0xFFFFFFFFFFFFFFFELL) + 8);
        if (v7 == (unsigned char *)v5)
        {
          uint64_t v7 = *(unsigned char **)(v6 + 16);
          if (!v7 || (*v7 & 1) != 0)
          {
            if (result == *(void *)(v5 + 16))
            {
              *(void *)(v5 + 16) = *(void *)(result + 8);
              int v14 = *(unint64_t **)(result + 8);
              if (v14)
              {
                *int v14 = *v14 & 1 | v5;
                unint64_t v2 = *(void *)result;
                unint64_t v6 = *(void *)v5 & 0xFFFFFFFFFFFFFFFELL;
              }
              *(void *)__n128 result = v2 & 1 | v6;
              if (v5 == (*v3 & 0xFFFFFFFFFFFFFFFELL))
              {
                unint64_t *v3 = *v3 & 1 | result;
                uint64_t v15 = *(void *)v5;
              }
              else
              {
                uint64_t v15 = *(void *)v5;
                unint64_t v16 = *(void *)v5 & 0xFFFFFFFFFFFFFFFELL;
                if (*(void *)(v16 + 8) == v5) {
                  *(void *)(v16 + 8) = result;
                }
                else {
                  *(void *)(v16 + 16) = result;
                }
              }
              *(void *)(result + 8) = v5;
              *(void *)unint64_t v5 = v15 & 1 | result;
              uint64_t v3 = *a2;
              long long v10 = (void *)(result & 0xFFFFFFFFFFFFFFFELL);
              uint64_t v4 = *(void *)(result & 0xFFFFFFFFFFFFFFFELL);
            }
            else
            {
              long long v10 = (void *)v5;
              unint64_t v5 = result;
            }
            void *v10 = v4 | 1;
            *(void *)(*(void *)(*(void *)v5 & 0xFFFFFFFFFFFFFFFELL) & 0xFFFFFFFFFFFFFFFELL) &= ~1uLL;
            unint64_t v17 = *(void *)(*(void *)v5 & 0xFFFFFFFFFFFFFFFELL) & 0xFFFFFFFFFFFFFFFELL;
            __n128 v18 = *(unint64_t **)(v17 + 8);
            *(void *)(v17 + 8) = v18[2];
            unint64_t v22 = (unint64_t *)v18[2];
            if (v22) {
              *unint64_t v22 = *v22 & 1 | v17;
            }
            *__n128 v18 = *(void *)v17 & 0xFFFFFFFFFFFFFFFELL | *v18 & 1;
            if ((*v3 & 0xFFFFFFFFFFFFFFFELL) == v17)
            {
              unint64_t *v3 = *v3 & 1 | (unint64_t)v18;
              uint64_t v20 = *(void *)v17;
              v18[2] = v17;
            }
            else
            {
              uint64_t v20 = *(void *)v17;
              unint64_t v23 = *(void *)v17 & 0xFFFFFFFFFFFFFFFELL;
              if (*(void *)(v23 + 16) == v17) {
                *(void *)(v23 + 16) = v18;
              }
              else {
                *(void *)(v23 + 8) = v18;
              }
              v18[2] = v17;
            }
LABEL_36:
            *(void *)unint64_t v17 = v20 & 1 | (unint64_t)v18;
            __n128 result = v5;
            uint64_t v3 = *a2;
            unint64_t v9 = **a2 & 0xFFFFFFFFFFFFFFFELL;
            if (v5 == v9) {
              goto LABEL_51;
            }
            goto LABEL_37;
          }
        }
        else if (!v7 || (*v7 & 1) != 0)
        {
          if (result == *(void *)(v5 + 8))
          {
            *(void *)(v5 + 8) = *(void *)(result + 16);
            long long v11 = *(unint64_t **)(result + 16);
            if (v11)
            {
              unint64_t *v11 = *v11 & 1 | v5;
              unint64_t v2 = *(void *)result;
              unint64_t v6 = *(void *)v5 & 0xFFFFFFFFFFFFFFFELL;
            }
            *(void *)__n128 result = v2 & 1 | v6;
            if (v5 == (*v3 & 0xFFFFFFFFFFFFFFFELL))
            {
              unint64_t *v3 = *v3 & 1 | result;
              uint64_t v12 = *(void *)v5;
            }
            else
            {
              uint64_t v12 = *(void *)v5;
              unint64_t v13 = *(void *)v5 & 0xFFFFFFFFFFFFFFFELL;
              if (*(void *)(v13 + 16) == v5) {
                *(void *)(v13 + 16) = result;
              }
              else {
                *(void *)(v13 + 8) = result;
              }
            }
            *(void *)(result + 16) = v5;
            *(void *)unint64_t v5 = v12 & 1 | result;
            uint64_t v3 = *a2;
            uint64_t v8 = (void *)(result & 0xFFFFFFFFFFFFFFFELL);
            uint64_t v4 = *(void *)(result & 0xFFFFFFFFFFFFFFFELL);
          }
          else
          {
            uint64_t v8 = (void *)v5;
            unint64_t v5 = result;
          }
          void *v8 = v4 | 1;
          *(void *)(*(void *)(*(void *)v5 & 0xFFFFFFFFFFFFFFFELL) & 0xFFFFFFFFFFFFFFFELL) &= ~1uLL;
          unint64_t v17 = *(void *)(*(void *)v5 & 0xFFFFFFFFFFFFFFFELL) & 0xFFFFFFFFFFFFFFFELL;
          __n128 v18 = *(unint64_t **)(v17 + 16);
          *(void *)(v17 + 16) = v18[1];
          int v19 = (unint64_t *)v18[1];
          if (v19) {
            *int v19 = *v19 & 1 | v17;
          }
          *__n128 v18 = *(void *)v17 & 0xFFFFFFFFFFFFFFFELL | *v18 & 1;
          if ((*v3 & 0xFFFFFFFFFFFFFFFELL) == v17)
          {
            unint64_t *v3 = *v3 & 1 | (unint64_t)v18;
            uint64_t v20 = *(void *)v17;
          }
          else
          {
            uint64_t v20 = *(void *)v17;
            unint64_t v21 = *(void *)v17 & 0xFFFFFFFFFFFFFFFELL;
            if (*(void *)(v21 + 8) == v17) {
              *(void *)(v21 + 8) = v18;
            }
            else {
              *(void *)(v21 + 16) = v18;
            }
          }
          v18[1] = v17;
          goto LABEL_36;
        }
        *(void *)unint64_t v5 = v4 | 1;
        *(void *)v7 |= 1uLL;
        *(void *)(*(void *)(*(void *)result & 0xFFFFFFFFFFFFFFFELL) & 0xFFFFFFFFFFFFFFFELL) &= ~1uLL;
        __n128 result = *(void *)(*(void *)result & 0xFFFFFFFFFFFFFFFELL) & 0xFFFFFFFFFFFFFFFELL;
        uint64_t v3 = *a2;
        unint64_t v9 = **a2 & 0xFFFFFFFFFFFFFFFELL;
        if (result == v9) {
          goto LABEL_51;
        }
LABEL_37:
        unint64_t v2 = *(void *)result;
        unint64_t v5 = *(void *)result & 0xFFFFFFFFFFFFFFFELL;
        uint64_t v4 = *(void *)v5;
        if (*(void *)v5)
        {
          __n128 result = v9;
          goto LABEL_51;
        }
      }
    }
    __n128 result = **a2 & 0xFFFFFFFFFFFFFFFELL;
LABEL_51:
    unint64_t v2 = *(void *)result;
  }
  *(void *)__n128 result = v2 | 1;
  return result;
}

uint64_t sub_1B4C4E6F8(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 64) && *(void *)(a1 + 40))
  {
    unint64_t v3 = 0;
    uint64_t v4 = 8;
    do
    {
      uint64_t v5 = *(void *)(*(void *)(a1 + 32) + v4);
      if (*(char *)(v5 + 23) < 0)
      {
        operator delete(*(void **)v5);
        uint64_t v5 = *(void *)(*(void *)(a1 + 32) + v4);
      }
      operator delete((void *)v5);
      ++v3;
      v4 += 16;
    }
    while (v3 < *(void *)(a1 + 40));
  }
  if (*(void *)(a1 + 24)) {
    operator delete(*(void **)(a1 + 32));
  }
  return a1;
}

__n128 sub_1B4C4E78C(__n128 *a1, __n128 *a2, uint64_t a3, char a4, __n128 result)
{
LABEL_1:
  long long v11 = a2 - 1;
  uint64_t v12 = a2 - 2;
  unint64_t v13 = a2 - 3;
  int v14 = a1;
  while (1)
  {
    a1 = v14;
    uint64_t v15 = (char *)a2 - (char *)v14;
    uint64_t v16 = a2 - v14;
    if (v6 || !v5)
    {
      switch(v16)
      {
        case 0:
        case 1:
          return result;
        case 2:
          unint64_t v65 = a2[-1].n128_u64[0];
          unint64_t v64 = a2 - 1;
          if (v65 >= v14->n128_u64[0]) {
            return result;
          }
          goto LABEL_102;
        case 3:
          uint64_t v66 = v14 + 1;
          unint64_t v67 = v14[1].n128_u64[0];
          unint64_t v69 = a2[-1].n128_u64[0];
          unint64_t v64 = a2 - 1;
          unint64_t v68 = v69;
          if (v67 < v14->n128_u64[0])
          {
            if (v68 >= v67)
            {
              __n128 v137 = *v14;
              *int v14 = *v66;
              __n128 result = v137;
              __n128 *v66 = v137;
              if (v64->n128_u64[0] < v14[1].n128_u64[0])
              {
                __n128 result = *v66;
                __n128 *v66 = *v64;
                *unint64_t v64 = result;
              }
            }
            else
            {
LABEL_102:
              __n128 v133 = *v14;
              *int v14 = *v64;
              __n128 result = v133;
              *unint64_t v64 = v133;
            }
            return result;
          }
          if (v68 >= v67) {
            return result;
          }
          __n128 result = *v66;
          __n128 *v66 = *v64;
          *unint64_t v64 = result;
          goto LABEL_185;
        case 4:
          uint64_t v66 = v14 + 1;
          unint64_t v70 = v14[1].n128_u64[0];
          int v71 = v14 + 2;
          unint64_t v72 = v14[2].n128_u64[0];
          if (v70 >= v14->n128_u64[0])
          {
            if (v72 < v70)
            {
              __n128 result = *v66;
              __n128 *v66 = *v71;
              __n128 *v71 = result;
              if (v14[1].n128_u64[0] < v14->n128_u64[0])
              {
                __n128 v136 = *v14;
                *int v14 = *v66;
                __n128 result = v136;
                __n128 *v66 = v136;
              }
            }
          }
          else
          {
            if (v72 >= v70)
            {
              __n128 v138 = *v14;
              *int v14 = *v66;
              __n128 result = v138;
              __n128 *v66 = v138;
              if (v72 >= v14[1].n128_u64[0]) {
                goto LABEL_182;
              }
              __n128 result = *v66;
              __n128 *v66 = *v71;
            }
            else
            {
              __n128 v134 = *v14;
              *int v14 = *v71;
              __n128 result = v134;
            }
            __n128 *v71 = result;
          }
LABEL_182:
          if (v11->n128_u64[0] < v71->n128_u64[0])
          {
            __n128 result = *v71;
            __n128 *v71 = *v11;
            __n128 *v11 = result;
            if (v71->n128_u64[0] < v66->n128_u64[0])
            {
              __n128 result = *v66;
              __n128 *v66 = *v71;
              __n128 *v71 = result;
LABEL_185:
              if (v14[1].n128_u64[0] < v14->n128_u64[0])
              {
                __n128 v139 = *v14;
                *int v14 = *v66;
                __n128 result = v139;
                __n128 *v66 = v139;
              }
            }
          }
          break;
        case 5:
          result.n128_u64[0] = sub_1B4C4F6F0(v14, v14 + 1, v14[2].n128_u64, (__n128 *)v14[3].n128_u64, (__n128 *)a2[-1].n128_u64, result).n128_u64[0];
          return result;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v15 <= 383) {
      break;
    }
    if (!a3)
    {
      if (v14 == a2) {
        return result;
      }
      int64_t v84 = (unint64_t)(v16 - 2) >> 1;
      int64_t v85 = v84;
      while (1)
      {
        if (v84 >= v85)
        {
          uint64_t v87 = (2 * v85) | 1;
          uint64_t v88 = &v14[v87];
          if (2 * v85 + 2 >= v16)
          {
            unint64_t v91 = &v14[v85];
            unint64_t v92 = v91->n128_u64[0];
            if (v88->n128_u64[0] >= v91->n128_u64[0]) {
              goto LABEL_141;
            }
          }
          else
          {
            unint64_t v89 = v88[1].n128_u64[0];
            BOOL v90 = v88->n128_u64[0] >= v89;
            if (v88->n128_u64[0] < v89) {
              ++v88;
            }
            else {
              unint64_t v89 = v88->n128_u64[0];
            }
            if (!v90) {
              uint64_t v87 = 2 * v85 + 2;
            }
            unint64_t v91 = &v14[v85];
            unint64_t v92 = v91->n128_u64[0];
            if (v89 >= v91->n128_u64[0])
            {
LABEL_141:
              uint64_t v93 = v91->n128_i64[1];
              while (1)
              {
                id v95 = v91;
                unint64_t v91 = v88;
                *id v95 = *v88;
                if (v84 < v87) {
                  break;
                }
                uint64_t v96 = (2 * v87) | 1;
                uint64_t v88 = &v14[v96];
                uint64_t v87 = 2 * v87 + 2;
                if (v87 < v16)
                {
                  unint64_t v94 = v88->n128_u64[0];
                  if (v88->n128_u64[0] >= v88[1].n128_u64[0])
                  {
                    uint64_t v87 = v96;
                  }
                  else
                  {
                    unint64_t v94 = v88[1].n128_u64[0];
                    ++v88;
                  }
                  if (v94 < v92) {
                    break;
                  }
                }
                else
                {
                  uint64_t v87 = v96;
                  if (v88->n128_u64[0] < v92) {
                    break;
                  }
                }
              }
              v91->n128_u64[0] = v92;
              v91->n128_u64[1] = v93;
            }
          }
        }
        BOOL v86 = v85-- <= 0;
        if (v86)
        {
          uint64_t v97 = (unint64_t)v15 >> 4;
          do
          {
            uint64_t v98 = 0;
            __n128 v135 = *v14;
            long long v99 = v14;
            do
            {
              uint64_t v100 = &v99[v98 + 1];
              uint64_t v101 = (2 * v98) | 1;
              uint64_t v102 = 2 * v98 + 2;
              if (v102 < v97 && v100->n128_u64[0] < v100[1].n128_u64[0])
              {
                ++v100;
                uint64_t v101 = v102;
              }
              *long long v99 = *v100;
              long long v99 = v100;
              uint64_t v98 = v101;
            }
            while (v101 <= (uint64_t)((unint64_t)(v97 - 2) >> 1));
            if (v100 == --a2)
            {
              __n128 result = v135;
              *uint64_t v100 = v135;
            }
            else
            {
              *uint64_t v100 = *a2;
              __n128 result = v135;
              *a2 = v135;
              uint64_t v103 = (char *)v100 - (char *)v14 + 16;
              if (v103 >= 17)
              {
                unint64_t v104 = (((unint64_t)v103 >> 4) - 2) >> 1;
                v105 = &v14[v104];
                unint64_t v106 = v100->n128_u64[0];
                if (v105->n128_u64[0] < v100->n128_u64[0])
                {
                  unint64_t v107 = v100->n128_u64[1];
                  do
                  {
                    uint64_t v108 = v100;
                    uint64_t v100 = v105;
                    __n128 result = *v105;
                    __n128 *v108 = *v105;
                    if (!v104) {
                      break;
                    }
                    unint64_t v104 = (v104 - 1) >> 1;
                    v105 = &v14[v104];
                  }
                  while (v105->n128_u64[0] < v106);
                  v100->n128_u64[0] = v106;
                  v100->n128_u64[1] = v107;
                }
              }
            }
            BOOL v86 = v97-- <= 2;
          }
          while (!v86);
          return result;
        }
      }
    }
    unint64_t v17 = (unint64_t)v16 >> 1;
    __n128 v18 = &v14[(unint64_t)v16 >> 1];
    unint64_t v19 = v11->n128_u64[0];
    if ((unint64_t)v15 < 0x801)
    {
      unint64_t v21 = v14->n128_u64[0];
      if (v14->n128_u64[0] < v18->n128_u64[0])
      {
        if (v19 >= v21)
        {
          __n128 v122 = *v18;
          *__n128 v18 = *v14;
          __n128 result = v122;
          *int v14 = v122;
          if (v11->n128_u64[0] >= v14->n128_u64[0]) {
            goto LABEL_32;
          }
          __n128 v115 = *v14;
          *int v14 = *v11;
        }
        else
        {
          __n128 v115 = *v18;
          *__n128 v18 = *v11;
        }
        __n128 result = v115;
        __n128 *v11 = v115;
LABEL_32:
        --a3;
        unint64_t v22 = v14->n128_u64[0];
        if (a4) {
          goto LABEL_57;
        }
        goto LABEL_56;
      }
      if (v19 >= v21) {
        goto LABEL_32;
      }
      __n128 v118 = *v14;
      *int v14 = *v11;
      __n128 result = v118;
      __n128 *v11 = v118;
      if (v14->n128_u64[0] >= v18->n128_u64[0]) {
        goto LABEL_32;
      }
      __n128 v119 = *v18;
      *__n128 v18 = *v14;
      __n128 result = v119;
      *int v14 = v119;
      --a3;
      unint64_t v22 = v14->n128_u64[0];
      if (a4) {
        goto LABEL_57;
      }
LABEL_56:
      if (v14[-1].n128_u64[0] < v22) {
        goto LABEL_57;
      }
      if (v22 < v11->n128_u64[0])
      {
        do
        {
          unint64_t v56 = v14[1].n128_u64[0];
          ++v14;
        }
        while (v22 >= v56);
      }
      else
      {
        unint64_t n128_u64 = (unint64_t)v14[1].n128_u64;
        do
        {
          int v14 = (__n128 *)n128_u64;
          if (n128_u64 >= (unint64_t)a2) {
            break;
          }
          n128_u64 += 16;
        }
        while (v22 >= v14->n128_u64[0]);
      }
      char v58 = a2;
      if (v14 < a2)
      {
        char v58 = a2;
        do
        {
          unint64_t v59 = v58[-1].n128_u64[0];
          --v58;
        }
        while (v22 < v59);
      }
      unint64_t v60 = a1->n128_u64[1];
      while (v14 < v58)
      {
        __n128 v132 = *v14;
        *int v14 = *v58;
        __n128 result = v132;
        __n128 *v58 = v132;
        do
        {
          unint64_t v61 = v14[1].n128_u64[0];
          ++v14;
        }
        while (v22 >= v61);
        do
        {
          unint64_t v62 = v58[-1].n128_u64[0];
          --v58;
        }
        while (v22 < v62);
      }
      long long v63 = v14 - 1;
      BOOL v5 = &v14[-1] >= a1;
      BOOL v6 = &v14[-1] == a1;
      if (&v14[-1] != a1)
      {
        __n128 result = *v63;
        *a1 = *v63;
      }
      a4 = 0;
      v14[-1].n128_u64[0] = v22;
      v14[-1].n128_u64[1] = v60;
    }
    else
    {
      unint64_t v20 = v18->n128_u64[0];
      if (v18->n128_u64[0] >= v14->n128_u64[0])
      {
        if (v19 < v20)
        {
          __n128 v116 = *v18;
          *__n128 v18 = *v11;
          __n128 *v11 = v116;
          if (v18->n128_u64[0] < v14->n128_u64[0])
          {
            __n128 v117 = *v14;
            *int v14 = *v18;
            *__n128 v18 = v117;
          }
        }
      }
      else
      {
        if (v19 >= v20)
        {
          __n128 v120 = *v14;
          *int v14 = *v18;
          *__n128 v18 = v120;
          if (v11->n128_u64[0] >= v18->n128_u64[0]) {
            goto LABEL_23;
          }
          __n128 v114 = *v18;
          *__n128 v18 = *v11;
        }
        else
        {
          __n128 v114 = *v14;
          *int v14 = *v11;
        }
        __n128 *v11 = v114;
      }
LABEL_23:
      unint64_t v23 = v14 + 1;
      int v24 = &v14[v17];
      unint64_t v27 = v24[-1].n128_u64[0];
      unint64_t v25 = v24 - 1;
      unint64_t v26 = v27;
      unint64_t v28 = v12->n128_u64[0];
      if (v27 >= v14[1].n128_u64[0])
      {
        if (v28 < v26)
        {
          __n128 v121 = *v25;
          __n128 *v25 = *v12;
          *uint64_t v12 = v121;
          if (v25->n128_u64[0] < v23->n128_u64[0])
          {
            __n128 v30 = *v23;
            *unint64_t v23 = *v25;
            __n128 *v25 = v30;
          }
        }
      }
      else
      {
        if (v28 >= v26)
        {
          __n128 v31 = *v23;
          *unint64_t v23 = *v25;
          __n128 *v25 = v31;
          if (v12->n128_u64[0] >= v25->n128_u64[0]) {
            goto LABEL_37;
          }
          __n128 v123 = *v25;
          __n128 *v25 = *v12;
          __n128 v29 = v123;
        }
        else
        {
          __n128 v29 = *v23;
          *unint64_t v23 = *v12;
        }
        *uint64_t v12 = v29;
      }
LABEL_37:
      int v32 = v14 + 2;
      char v33 = &v14[v17];
      unint64_t v36 = v33[1].n128_u64[0];
      uint64_t v34 = v33 + 1;
      unint64_t v35 = v36;
      unint64_t v37 = v13->n128_u64[0];
      if (v36 >= v14[2].n128_u64[0])
      {
        if (v37 < v35)
        {
          __n128 v124 = *v34;
          *uint64_t v34 = *v13;
          *unint64_t v13 = v124;
          if (v34->n128_u64[0] < v32->n128_u64[0])
          {
            __n128 v39 = *v32;
            __n128 *v32 = *v34;
            *uint64_t v34 = v39;
          }
        }
      }
      else
      {
        if (v37 >= v35)
        {
          __n128 v40 = *v32;
          __n128 *v32 = *v34;
          *uint64_t v34 = v40;
          if (v13->n128_u64[0] >= v34->n128_u64[0]) {
            goto LABEL_46;
          }
          __n128 v125 = *v34;
          *uint64_t v34 = *v13;
          __n128 v38 = v125;
        }
        else
        {
          __n128 v38 = *v32;
          __n128 *v32 = *v13;
        }
        *unint64_t v13 = v38;
      }
LABEL_46:
      unint64_t v41 = v18->n128_u64[0];
      unint64_t v42 = v34->n128_u64[0];
      if (v18->n128_u64[0] >= v25->n128_u64[0])
      {
        if (v42 < v41)
        {
          __n128 v127 = *v18;
          *__n128 v18 = *v34;
          *uint64_t v34 = v127;
          if (v18->n128_u64[0] < v25->n128_u64[0])
          {
            __n128 v128 = *v25;
            __n128 *v25 = *v18;
            *__n128 v18 = v128;
          }
        }
      }
      else
      {
        if (v42 >= v41)
        {
          __n128 v129 = *v25;
          __n128 *v25 = *v18;
          *__n128 v18 = v129;
          if (v34->n128_u64[0] >= v18->n128_u64[0]) {
            goto LABEL_55;
          }
          __n128 v126 = *v18;
          *__n128 v18 = *v34;
        }
        else
        {
          __n128 v126 = *v25;
          __n128 *v25 = *v34;
        }
        *uint64_t v34 = v126;
      }
LABEL_55:
      __n128 v130 = *v14;
      *int v14 = *v18;
      __n128 result = v130;
      *__n128 v18 = v130;
      --a3;
      unint64_t v22 = v14->n128_u64[0];
      if ((a4 & 1) == 0) {
        goto LABEL_56;
      }
LABEL_57:
      uint64_t v43 = 0;
      unint64_t v44 = v14->n128_u64[1];
      do
        unint64_t v45 = v14[++v43].n128_u64[0];
      while (v45 < v22);
      uint64_t v46 = &v14[v43];
      unint64_t v47 = a2;
      if (v43 == 1)
      {
        unint64_t v47 = a2;
        do
        {
          if (v46 >= v47) {
            break;
          }
          unint64_t v49 = v47[-1].n128_u64[0];
          --v47;
        }
        while (v49 >= v22);
      }
      else
      {
        do
        {
          unint64_t v48 = v47[-1].n128_u64[0];
          --v47;
        }
        while (v48 >= v22);
      }
      int v14 = (__n128 *)((char *)v14 + v43 * 16);
      if (v46 < v47)
      {
        int v50 = v47;
        do
        {
          __n128 v131 = *v14;
          *int v14 = *v50;
          __n128 result = v131;
          __n128 *v50 = v131;
          do
          {
            unint64_t v51 = v14[1].n128_u64[0];
            ++v14;
          }
          while (v51 < v22);
          do
          {
            unint64_t v52 = v50[-1].n128_u64[0];
            --v50;
          }
          while (v52 >= v22);
        }
        while (v14 < v50);
      }
      uint64_t v53 = v14 - 1;
      if (&v14[-1] != a1)
      {
        __n128 result = *v53;
        *a1 = *v53;
      }
      v14[-1].n128_u64[0] = v22;
      v14[-1].n128_u64[1] = v44;
      if (v46 < v47)
      {
LABEL_76:
        sub_1B4C4E78C(a1, &v14[-1], a3, a4 & 1);
        a4 = 0;
      }
      else
      {
        BOOL v54 = sub_1B4C4F31C(a1, v14 - 1, result);
        if (sub_1B4C4F31C(v14, a2, v55))
        {
          a2 = v14 - 1;
          if (v54) {
            return result;
          }
          goto LABEL_1;
        }
        if (!v54) {
          goto LABEL_76;
        }
      }
    }
  }
  uint64_t v73 = v14 + 1;
  BOOL v75 = v14 == a2 || v73 == a2;
  if (a4)
  {
    if (v75) {
      return result;
    }
    uint64_t v76 = 0;
    long long v77 = v14;
    while (1)
    {
      uint64_t v79 = v73;
      unint64_t v80 = v77[1].n128_u64[0];
      if (v80 < v77->n128_u64[0])
      {
        uint64_t v81 = v77[1].n128_i64[1];
        uint64_t v82 = v76;
        do
        {
          __n128 result = *(__n128 *)((char *)v14 + v82);
          *(__n128 *)((char *)v14 + v82 + 16) = result;
          if (!v82)
          {
            uint64_t v78 = v14;
            goto LABEL_119;
          }
          unint64_t v83 = *(unint64_t *)((char *)v14[-1].n128_u64 + v82);
          v82 -= 16;
        }
        while (v80 < v83);
        uint64_t v78 = (__n128 *)((char *)v14 + v82 + 16);
LABEL_119:
        v78->n128_u64[0] = v80;
        v78->n128_u64[1] = v81;
      }
      uint64_t v73 = v79 + 1;
      v76 += 16;
      long long v77 = v79;
      if (&v79[1] == a2) {
        return result;
      }
    }
  }
  if (!v75)
  {
    do
    {
      uint64_t v109 = v73;
      unint64_t v110 = a1[1].n128_u64[0];
      if (v110 < a1->n128_u64[0])
      {
        unint64_t v111 = a1[1].n128_u64[1];
        int v112 = v109;
        do
        {
          __n128 result = v112[-1];
          *int v112 = result;
          unint64_t v113 = v112[-2].n128_u64[0];
          --v112;
        }
        while (v110 < v113);
        v112->n128_u64[0] = v110;
        v112->n128_u64[1] = v111;
      }
      uint64_t v73 = v109 + 1;
      a1 = v109;
    }
    while (&v109[1] != a2);
  }
  return result;
}

BOOL sub_1B4C4F31C(__n128 *a1, __n128 *a2, __n128 a3)
{
  switch(a2 - a1)
  {
    case 0:
    case 1:
      return 1;
    case 2:
      unint64_t v11 = a2[-1].n128_u64[0];
      long long v10 = a2 - 1;
      if (v11 < a1->n128_u64[0]) {
        goto LABEL_10;
      }
      return 1;
    case 3:
      uint64_t v12 = (long long *)&a1[1];
      unint64_t v13 = a1[1].n128_u64[0];
      unint64_t v15 = a2[-1].n128_u64[0];
      long long v10 = a2 - 1;
      unint64_t v14 = v15;
      if (v13 >= a1->n128_u64[0])
      {
        if (v14 < v13)
        {
          long long v25 = *v12;
          *uint64_t v12 = (__int128)*v10;
          __n128 *v10 = (__n128)v25;
          if (a1[1].n128_u64[0] < a1->n128_u64[0])
          {
LABEL_46:
            long long v41 = (__int128)*a1;
            *a1 = (__n128)*v12;
            *uint64_t v12 = v41;
            return 1;
          }
        }
      }
      else
      {
        if (v14 < v13)
        {
LABEL_10:
          __n128 v16 = *a1;
          *a1 = *v10;
LABEL_11:
          __n128 *v10 = v16;
          return 1;
        }
        long long v37 = (__int128)*a1;
        *a1 = (__n128)*v12;
        *uint64_t v12 = v37;
        if (v10->n128_u64[0] < a1[1].n128_u64[0])
        {
          __n128 v16 = (__n128)*v12;
          *uint64_t v12 = (__int128)*v10;
          goto LABEL_11;
        }
      }
      return 1;
    case 4:
      uint64_t v12 = (long long *)&a1[1];
      unint64_t v17 = a1[1].n128_u64[0];
      __n128 v18 = (long long *)&a1[2];
      unint64_t v19 = a1[2].n128_u64[0];
      unint64_t v20 = a2 - 1;
      unint64_t v21 = a1->n128_u64[0];
      if (v17 >= a1->n128_u64[0])
      {
        if (v19 < v17)
        {
          long long v26 = *v12;
          *uint64_t v12 = *v18;
          *__n128 v18 = v26;
          if (*(void *)v12 < v21)
          {
            long long v27 = (__int128)*a1;
            *a1 = (__n128)*v12;
            *uint64_t v12 = v27;
          }
        }
      }
      else
      {
        if (v19 >= v17)
        {
          long long v38 = (__int128)*a1;
          *a1 = (__n128)*v12;
          *uint64_t v12 = v38;
          if (v19 >= a1[1].n128_u64[0]) {
            goto LABEL_43;
          }
          long long v22 = *v12;
          *uint64_t v12 = *v18;
        }
        else
        {
          long long v22 = (__int128)*a1;
          *a1 = (__n128)*v18;
        }
        *__n128 v18 = v22;
      }
LABEL_43:
      if (v20->n128_u64[0] < *(void *)v18)
      {
        __n128 v39 = (__n128)*v18;
        *__n128 v18 = (__int128)*v20;
        *unint64_t v20 = v39;
        if (*(void *)v18 < *(void *)v12)
        {
          long long v40 = *v12;
          *uint64_t v12 = *v18;
          *__n128 v18 = v40;
          if (a1[1].n128_u64[0] < a1->n128_u64[0]) {
            goto LABEL_46;
          }
        }
      }
      return 1;
    case 5:
      sub_1B4C4F6F0(a1, a1 + 1, a1[2].n128_u64, (__n128 *)a1[3].n128_u64, (__n128 *)a2[-1].n128_u64, a3);
      return 1;
    default:
      uint64_t v4 = a1 + 2;
      unint64_t v5 = a1[2].n128_u64[0];
      BOOL v6 = a1 + 1;
      unint64_t v7 = a1[1].n128_u64[0];
      unint64_t v8 = a1->n128_u64[0];
      if (v7 >= a1->n128_u64[0])
      {
        if (v5 < v7)
        {
          __n128 v23 = *v6;
          __n128 *v6 = *v4;
          __n128 *v4 = v23;
          if (v6->n128_u64[0] < v8)
          {
            __n128 v24 = *a1;
            *a1 = *v6;
            __n128 *v6 = v24;
          }
        }
      }
      else
      {
        if (v5 >= v7)
        {
          __n128 v28 = *a1;
          *a1 = *v6;
          __n128 *v6 = v28;
          if (v5 >= a1[1].n128_u64[0]) {
            goto LABEL_28;
          }
          __n128 v9 = *v6;
          __n128 *v6 = *v4;
        }
        else
        {
          __n128 v9 = *a1;
          *a1 = *v4;
        }
        __n128 *v4 = v9;
      }
LABEL_28:
      __n128 v29 = a1 + 3;
      if (&a1[3] == a2) {
        return 1;
      }
      uint64_t v30 = 0;
      int v31 = 0;
      while (1)
      {
        unint64_t v32 = v29->n128_u64[0];
        if (v29->n128_u64[0] < v4->n128_u64[0]) {
          break;
        }
LABEL_31:
        uint64_t v4 = v29;
        v30 += 16;
        if (++v29 == a2) {
          return 1;
        }
      }
      uint64_t v33 = v29->n128_i64[1];
      uint64_t v34 = v30;
      do
      {
        *(__n128 *)((char *)a1 + v34 + 48) = *(__n128 *)((char *)a1 + v34 + 32);
        if (v34 == -32)
        {
          a1->n128_u64[0] = v32;
          a1->n128_u64[1] = v33;
          if (++v31 != 8) {
            goto LABEL_31;
          }
          return &v29[1] == a2;
        }
        unint64_t v35 = *(unint64_t *)((char *)a1[1].n128_u64 + v34);
        v34 -= 16;
      }
      while (v32 < v35);
      uint64_t v36 = (uint64_t)a1 + v34;
      *(void *)(v36 + 48) = v32;
      *(void *)(v36 + 56) = v33;
      if (++v31 != 8) {
        goto LABEL_31;
      }
      return &v29[1] == a2;
  }
}

__n128 sub_1B4C4F6F0(__n128 *a1, __n128 *a2, unint64_t *a3, _OWORD *a4, _OWORD *a5, __n128 result)
{
  unint64_t v6 = a2->n128_u64[0];
  unint64_t v7 = *a3;
  if (a2->n128_u64[0] >= a1->n128_u64[0])
  {
    if (v7 < v6)
    {
      __n128 result = *a2;
      *a2 = *(__n128 *)a3;
      *(__n128 *)a3 = result;
      if (a2->n128_u64[0] < a1->n128_u64[0])
      {
        __n128 result = *a1;
        *a1 = *a2;
        *a2 = result;
      }
    }
  }
  else
  {
    if (v7 < v6)
    {
      __n128 result = *a1;
      *a1 = *(__n128 *)a3;
LABEL_9:
      *(__n128 *)a3 = result;
      goto LABEL_10;
    }
    __n128 result = *a1;
    *a1 = *a2;
    *a2 = result;
    if (*a3 < a2->n128_u64[0])
    {
      __n128 result = *a2;
      *a2 = *(__n128 *)a3;
      goto LABEL_9;
    }
  }
LABEL_10:
  if (*(void *)a4 < *a3)
  {
    __n128 result = *(__n128 *)a3;
    *(_OWORD *)a3 = *a4;
    *a4 = result;
    if (*a3 < a2->n128_u64[0])
    {
      __n128 result = *a2;
      *a2 = *(__n128 *)a3;
      *(__n128 *)a3 = result;
      if (a2->n128_u64[0] < a1->n128_u64[0])
      {
        __n128 result = *a1;
        *a1 = *a2;
        *a2 = result;
      }
    }
  }
  if (*(void *)a5 < *(void *)a4)
  {
    __n128 result = *(__n128 *)a4;
    *a4 = *a5;
    *a5 = result;
    if (*(void *)a4 < *a3)
    {
      __n128 result = *(__n128 *)a3;
      *(_OWORD *)a3 = *a4;
      *a4 = result;
      if (*a3 < a2->n128_u64[0])
      {
        __n128 result = *a2;
        *a2 = *(__n128 *)a3;
        *(__n128 *)a3 = result;
        if (a2->n128_u64[0] < a1->n128_u64[0])
        {
          __n128 result = *a1;
          *a1 = *a2;
          *a2 = result;
        }
      }
    }
  }
  return result;
}

const void **sub_1B4C4F874(uint64_t a1, const void **a2)
{
  unint64_t v2 = (const void **)a1;
  unint64_t v3 = *(void *)(a1 + 32) & 0xFFFFFFFFFFFFFFFELL;
  if (v3)
  {
    int v4 = *((char *)a2 + 23);
    if (v4 >= 0) {
      size_t v5 = *((unsigned __int8 *)a2 + 23);
    }
    else {
      size_t v5 = (size_t)a2[1];
    }
    if (v4 >= 0) {
      unint64_t v6 = a2;
    }
    else {
      unint64_t v6 = *a2;
    }
    unint64_t v7 = (const void **)a1;
    do
    {
      while (1)
      {
        unint64_t v8 = (const void **)(v3 - 32);
        int v9 = *(char *)(v3 - 9);
        if (v9 >= 0) {
          size_t v10 = *(unsigned __int8 *)(v3 - 9);
        }
        else {
          size_t v10 = *(void *)(v3 - 24);
        }
        if (v9 >= 0) {
          unint64_t v11 = (const void *)(v3 - 32);
        }
        else {
          unint64_t v11 = *(const void **)(v3 - 32);
        }
        if (v5 >= v10) {
          size_t v12 = v10;
        }
        else {
          size_t v12 = v5;
        }
        int v13 = memcmp(v11, v6, v12);
        BOOL v14 = v10 < v5;
        if (v13) {
          BOOL v14 = v13 < 0;
        }
        if (v14) {
          break;
        }
        unint64_t v3 = *(void *)(v3 + 8);
        unint64_t v7 = v8;
        if (!v3) {
          goto LABEL_24;
        }
      }
      unint64_t v3 = *(void *)(v3 + 16);
    }
    while (v3);
    unint64_t v8 = v7;
LABEL_24:
    if (v8 != v2)
    {
      int v15 = *((char *)v8 + 23);
      if (v15 >= 0) {
        size_t v16 = *((unsigned __int8 *)v8 + 23);
      }
      else {
        size_t v16 = (size_t)v8[1];
      }
      if (v15 >= 0) {
        unint64_t v17 = v8;
      }
      else {
        unint64_t v17 = *v8;
      }
      if (v16 >= v5) {
        size_t v18 = v5;
      }
      else {
        size_t v18 = v16;
      }
      int v19 = memcmp(v6, v17, v18);
      BOOL v20 = v5 < v16;
      if (v19) {
        BOOL v20 = v19 < 0;
      }
      if (!v20) {
        return v8;
      }
    }
  }
  return v2;
}

uint64_t sub_1B4C4F98C(uint64_t a1, uint64_t *a2)
{
  sub_1B4BB2204((uint64_t)v4);
  sub_1B4BB34F0(v4, (uint64_t)"OutOfVocabularyError: ", 22);
  sub_1B4BB34F0(v4, *a2, a2[1]);
  std::stringbuf::str();
  v4[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v4 + *(void *)(v4[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v4[1] = MEMORY[0x1E4FBA470] + 16;
  if (v5 < 0) {
    operator delete((void *)v4[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1BA992920](&v6);
}

void sub_1B4C4FAD4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1B4BC8450((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1B4C4FAE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1B4BC8450((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1B4C4FAFC(std::exception *this)
{
  this->__vftable = (std::exception_vtbl *)&unk_1F0D552A0;
  if (SHIBYTE(this[3].__vftable) < 0) {
    operator delete(this[1].__vftable);
  }
  std::exception::~exception(this);
  JUMPOUT(0x1BA9929C0);
}

uint64_t sub_1B4C4FB70(uint64_t a1)
{
  uint64_t result = a1 + 8;
  if (*(char *)(a1 + 31) < 0) {
    return *(void *)result;
  }
  return result;
}

void sub_1B4C4FB8C(const std::logic_error *a1)
{
  exception = __cxa_allocate_exception(0x40uLL);
  unint64_t v3 = (void *)sub_1B4C4FBCC((uint64_t)exception, a1);
  __cxa_throw(v3, (struct type_info *)&unk_1F0D53480, (void (*)(void *))sub_1B4C4FC78);
}

uint64_t sub_1B4C4FBCC(uint64_t a1, const std::logic_error *a2)
{
  *(void *)a1 = &unk_1F0D55070;
  std::logic_error::logic_error((std::logic_error *)(a1 + 8), a2);
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = -1;
  *(void *)a1 = &unk_1F0D54FF8;
  *(void *)(a1 + 8) = &unk_1F0D55028;
  *(void *)(a1 + 24) = &unk_1F0D55050;
  return a1;
}

uint64_t sub_1B4C4FC78(uint64_t a1)
{
  *(void *)(a1 + 24) = &unk_1F0D550A0;
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2 && (*(unsigned int (**)(uint64_t))(*(void *)v2 + 32))(v2)) {
    *(void *)(a1 + 32) = 0;
  }
  MEMORY[0x1BA9924F0](a1 + 8);
  return a1;
}

void sub_1B4C4FCFC()
{
}

void sub_1B4C4FF90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_1B4C50378(&a9);
  sub_1B4C50378(&a10);
  (*(void (**)(uint64_t))(*(void *)v10 + 24))(v10);
  _Unwind_Resume(a1);
}

void sub_1B4C50010(uint64_t a1)
{
  exception = __cxa_allocate_exception(0x40uLL);
  sub_1B4C503D4((uint64_t)exception, a1);
  __cxa_throw(exception, (struct type_info *)&unk_1F0D53480, (void (*)(void *))sub_1B4C4FC78);
}

void sub_1B4C50058(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1B4C5006C(uint64_t a1)
{
  *(void *)(a1 + 24) = &unk_1F0D550A0;
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2 && (*(unsigned int (**)(uint64_t))(*(void *)v2 + 32))(v2)) {
    *(void *)(a1 + 32) = 0;
  }
  MEMORY[0x1BA9924F0](a1 + 8);
  JUMPOUT(0x1BA9929C0);
}

void sub_1B4C50110(uint64_t a1)
{
  *(void *)(a1 + 16) = &unk_1F0D550A0;
  uint64_t v2 = *(void *)(a1 + 24);
  if (v2 && (*(unsigned int (**)(uint64_t))(*(void *)v2 + 32))(v2)) {
    *(void *)(a1 + 24) = 0;
  }
  JUMPOUT(0x1BA9924F0);
}

void sub_1B4C5019C(uint64_t a1)
{
  *(void *)(a1 + 16) = &unk_1F0D550A0;
  uint64_t v2 = *(void *)(a1 + 24);
  if (v2 && (*(unsigned int (**)(uint64_t))(*(void *)v2 + 32))(v2)) {
    *(void *)(a1 + 24) = 0;
  }
  MEMORY[0x1BA9924F0](a1);
  JUMPOUT(0x1BA9929C0);
}

void sub_1B4C50244(void *a1)
{
  *a1 = &unk_1F0D550A0;
  uint64_t v2 = a1[1];
  if (v2 && (*(unsigned int (**)(uint64_t))(*(void *)v2 + 32))(v2)) {
    a1[1] = 0;
  }
  JUMPOUT(0x1BA9924F0);
}

void sub_1B4C502CC(void *a1)
{
  *a1 = &unk_1F0D550A0;
  uint64_t v2 = a1[1];
  if (v2 && (*(unsigned int (**)(uint64_t))(*(void *)v2 + 32))(v2)) {
    a1[1] = 0;
  }
  MEMORY[0x1BA9924F0](a1 - 2);
  JUMPOUT(0x1BA9929C0);
}

uint64_t *sub_1B4C50378(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2 && (*(unsigned int (**)(uint64_t))(*(void *)v2 + 32))(v2)) {
    *a1 = 0;
  }
  return a1;
}

uint64_t sub_1B4C503D4(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F0D55070;
  std::logic_error::logic_error((std::logic_error *)(a1 + 8), (const std::logic_error *)(a2 + 8));
  *(void *)(a1 + 8) = MEMORY[0x1E4FBA4D8] + 16;
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = &unk_1F0D550A0;
  *(void *)(a1 + 32) = v4;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  long long v5 = *(_OWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v5;
  *(void *)a1 = &unk_1F0D54FF8;
  *(void *)(a1 + 8) = &unk_1F0D55028;
  *(void *)(a1 + 24) = &unk_1F0D55050;
  return a1;
}

uint64_t sub_1B4C50510(uint64_t a1)
{
  *(void *)a1 = &unk_1F0D55200;
  uint64_t v2 = *(void *)(a1 + 176);
  *(void *)(a1 + 176) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  sub_1B4C50618(*(void *)(a1 + 152));
  uint64_t v3 = *(void *)(*(void *)(a1 + 104) + 56);
  if ((v3 & 0xFFFFFFFFFFFFFFFELL) != 0) {
    uint64_t v4 = (v3 & 0xFFFFFFFFFFFFFFFELL) - 56;
  }
  else {
    uint64_t v4 = 0;
  }
  sub_1B4C4E294(v4);
  operator delete(*(void **)(a1 + 104));
  *(void *)a1 = &unk_1F0D55160;
  if ((*(char *)(a1 + 79) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 55) & 0x80000000) == 0) {
      goto LABEL_8;
    }
LABEL_11:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0) {
      return a1;
    }
    goto LABEL_12;
  }
  operator delete(*(void **)(a1 + 56));
  if (*(char *)(a1 + 55) < 0) {
    goto LABEL_11;
  }
LABEL_8:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0) {
    return a1;
  }
LABEL_12:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_1B4C50618(uint64_t a1)
{
  if (a1)
  {
    sub_1B4C50618(*(void *)a1);
    sub_1B4C50618(*(void *)(a1 + 8));
    if (*(char *)(a1 + 79) < 0)
    {
      operator delete(*(void **)(a1 + 56));
      if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      {
LABEL_4:
        uint64_t v2 = (void *)a1;
LABEL_6:
        operator delete(v2);
        return;
      }
    }
    else if ((*(char *)(a1 + 55) & 0x80000000) == 0)
    {
      goto LABEL_4;
    }
    operator delete(*(void **)(a1 + 32));
    uint64_t v2 = (void *)a1;
    goto LABEL_6;
  }
}

void sub_1B4C506AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2 + 8;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_1B4BCA11C(__p, *(void **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)v4;
    uint64_t v6 = *(void *)(a2 + 24);
  }
  *(_OWORD *)(a1 + 8) = *(_OWORD *)__p;
  *(void *)(a1 + 24) = v6;
  *(void *)a1 = &unk_1F0D553D8;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_1B4BCA11C(__p, *(void **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)v4;
    uint64_t v6 = *(void *)(v4 + 16);
  }
  operator new();
}

void sub_1B4C507B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if ((*(char *)(v14 + 31) & 0x80000000) == 0) {
    _Unwind_Resume(exception_object);
  }
  operator delete(*(void **)(v14 + 8));
  _Unwind_Resume(exception_object);
}

void sub_1B4C50830()
{
}

void sub_1B4C50844(std::string::value_type *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  memset(&v6, 0, sizeof(v6));
  if (a2)
  {
    uint64_t v4 = a2;
    do
    {
      std::string::push_back(&v6, *a1++);
      --v4;
    }
    while (v4);
  }
  sub_1B4C50964((uint64_t)&v6, a3);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
}

void sub_1B4C508D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B4C508F0(uint64_t *a1@<X1>, void *a2@<X8>)
{
  char v3 = 0;
  LOBYTE(__p) = 0;
  sub_1B4C50CF4(a1, (uint64_t)&__p, a2);
  if (v3 < 0) {
    operator delete(__p);
  }
}

void sub_1B4C50948(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B4C50964(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  long long v27 = 0;
  __n128 v28 = 0;
  unint64_t v29 = 0;
  char v3 = *(unsigned char *)(a1 + 23);
  if (v3 >= 0) {
    uint64_t v4 = (const UInt8 *)a1;
  }
  else {
    uint64_t v4 = *(const UInt8 **)a1;
  }
  if (v4)
  {
    if (v3 >= 0) {
      CFIndex v5 = *(unsigned __int8 *)(a1 + 23);
    }
    else {
      CFIndex v5 = *(void *)(a1 + 8);
    }
    std::string v6 = (__CFString *)CFStringCreateWithBytes(0, v4, v5, 0x8000100u, 0);
    if (!v6)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    uint64_t v10 = v6;
    if (!v10) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  uint64_t v10 = (__CFString *)0;
  if (v10) {
LABEL_12:
  }
    CFRelease(v10);
LABEL_13:
  unint64_t v11 = 0;
  long long v26 = xmmword_1B4C9B020;
  while (v11 < objc_msgSend_length(v10, v7, v8, v9))
  {
    sub_1B4C48890(v10, v11, (uint64_t *)&v26);
    id v12 = (id)objc_claimAutoreleasedReturnValue();
    int v13 = v12;
    if (v12) {
      CFRetain(v12);
    }
    sub_1B4C316B8(&cf, v13);

    if (!cf)
    {
      BOOL v20 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v20, "Could not construct");
      __cxa_throw(v20, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    p_CFTypeRef cf = &cf;
    sub_1B4C315C8((const __CFString ***)&p_cf, __p);
    uint64_t v14 = v28;
    if ((unint64_t)v28 >= v29)
    {
      __n128 v28 = sub_1B4BFB6B0(&v27, (uint64_t)__p);
      if ((SHIBYTE(v25) & 0x80000000) == 0)
      {
        CFTypeRef v16 = cf;
        if (!cf) {
          goto LABEL_14;
        }
LABEL_24:
        CFRelease(v16);
        goto LABEL_14;
      }
      operator delete(__p[0]);
      CFTypeRef v16 = cf;
      if (cf) {
        goto LABEL_24;
      }
    }
    else
    {
      long long v15 = *(_OWORD *)__p;
      *((void *)v28 + 2) = v25;
      *(_OWORD *)uint64_t v14 = v15;
      __p[1] = 0;
      uint64_t v25 = 0;
      __p[0] = 0;
      __n128 v28 = v14 + 24;
      CFTypeRef v16 = cf;
      if (cf) {
        goto LABEL_24;
      }
    }
LABEL_14:

    v11 += *((void *)&v26 + 1);
  }
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  sub_1B4BCA340((char *)a2, (long long *)v27, (long long *)v28, 0xAAAAAAAAAAAAAAABLL * ((v28 - (unsigned char *)v27) >> 3));

  unint64_t v17 = (long long *)v27;
  if (v27)
  {
    size_t v18 = v28;
    int v19 = v27;
    if (v28 != v27)
    {
      do
      {
        if (*(v18 - 1) < 0) {
          operator delete(*((void **)v18 - 3));
        }
        v18 -= 24;
      }
      while (v18 != (char *)v17);
      int v19 = v27;
    }
    __n128 v28 = (char *)v17;
    operator delete(v19);
  }
}

void sub_1B4C50BEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  sub_1B4BF9508((void **)va);
  _Unwind_Resume(a1);
}

void sub_1B4C50C00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  __cxa_free_exception(v18);
  sub_1B4BF9508(&a18);
  _Unwind_Resume(a1);
}

void sub_1B4C50C20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  sub_1B4BF9508((void **)va);
  _Unwind_Resume(a1);
}

void sub_1B4C50C34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);

  sub_1B4BF9508((void **)va);
  _Unwind_Resume(a1);
}

void sub_1B4C50C4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  sub_1B4C31674(&a10);

  sub_1B4BF9508(&a21);
  _Unwind_Resume(a1);
}

void sub_1B4C50CC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);

  sub_1B4BF9508((void **)va);
  _Unwind_Resume(a1);
}

void sub_1B4C50CDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);

  sub_1B4BF9508((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B4C50CF4@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  sub_1B4BB2204((uint64_t)v30);
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
  if (v8 == 1)
  {
    int v9 = *(char *)(v6 + 23);
    if (v9 >= 0) {
      uint64_t v10 = *a1;
    }
    else {
      uint64_t v10 = *(void *)v6;
    }
    if (v9 >= 0) {
      uint64_t v11 = *(unsigned __int8 *)(v6 + 23);
    }
    else {
      uint64_t v11 = *(void *)(v6 + 8);
    }
    sub_1B4BB34F0(v30, v10, v11);
    std::stringbuf::str();
    goto LABEL_42;
  }
  if (!v8)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    goto LABEL_42;
  }
  if (*(char *)(a2 + 23) >= 0) {
    id v12 = (const char *)a2;
  }
  else {
    id v12 = *(const char **)a2;
  }
  if (v6 != v7)
  {
    if (v12)
    {
      do
      {
        int v13 = *(char *)(v6 + 23);
        if (v13 >= 0) {
          uint64_t v14 = v6;
        }
        else {
          uint64_t v14 = *(void *)v6;
        }
        if (v13 >= 0) {
          uint64_t v15 = *(unsigned __int8 *)(v6 + 23);
        }
        else {
          uint64_t v15 = *(void *)(v6 + 8);
        }
        sub_1B4BB34F0(v30, v14, v15);
        size_t v16 = strlen(v12);
        sub_1B4BB34F0(v30, (uint64_t)v12, v16);
        v6 += 24;
      }
      while (v6 != v7);
    }
    else
    {
      do
      {
        int v17 = *(char *)(v6 + 23);
        if (v17 >= 0) {
          uint64_t v18 = v6;
        }
        else {
          uint64_t v18 = *(void *)v6;
        }
        if (v17 >= 0) {
          uint64_t v19 = *(unsigned __int8 *)(v6 + 23);
        }
        else {
          uint64_t v19 = *(void *)(v6 + 8);
        }
        sub_1B4BB34F0(v30, v18, v19);
        v6 += 24;
      }
      while (v6 != v7);
    }
  }
  BOOL v20 = v28;
  std::stringbuf::str();
  size_t v21 = v29;
  uint64_t v22 = *(unsigned __int8 *)(a2 + 23);
  if ((v22 & 0x80u) != 0) {
    uint64_t v22 = *(void *)(a2 + 8);
  }
  if ((v29 & 0x80u) != 0)
  {
    size_t v21 = (size_t)v28[1];
    BOOL v20 = (void **)v28[0];
  }
  if (v21 >= v21 - v22) {
    size_t v23 = v21 - v22;
  }
  else {
    size_t v23 = v21;
  }
  if (v23 >= 0x7FFFFFFFFFFFFFF8) {
    sub_1B4BB33D8();
  }
  if (v23 >= 0x17)
  {
    uint64_t v25 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v23 | 7) != 0x17) {
      uint64_t v25 = v23 | 7;
    }
    uint64_t v26 = v25 + 1;
    long long v27 = operator new(v25 + 1);
    a3[1] = v23;
    a3[2] = v26 | 0x8000000000000000;
    *a3 = v27;
    a3 = v27;
LABEL_48:
    memmove(a3, v20, v23);
    *((unsigned char *)a3 + v23) = 0;
    if (((char)v29 & 0x80000000) == 0) {
      goto LABEL_42;
    }
    goto LABEL_49;
  }
  *((unsigned char *)a3 + 23) = v23;
  if (v23) {
    goto LABEL_48;
  }
  *(unsigned char *)a3 = 0;
  if (((char)v29 & 0x80000000) == 0) {
    goto LABEL_42;
  }
LABEL_49:
  operator delete(v28[0]);
LABEL_42:
  v30[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v30 + *(void *)(v30[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v30[1] = MEMORY[0x1E4FBA470] + 16;
  if (v31 < 0) {
    operator delete((void *)v30[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1BA992920](&v32);
}

void sub_1B4C50FEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

void sub_1B4C51038()
{
}

void sub_1B4C5104C(uint64_t a1@<X1>, unint64_t a2@<X2>, uint64_t a3@<X8>)
{
  sub_1B4BFB28C(a1, a2, " ", 1, (uint64_t)&v20);
  std::string __p = 0;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  sub_1B4BCA340((char *)&__p, (long long *)v20, v21, 0xAAAAAAAAAAAAAAABLL * (((char *)v21 - (unsigned char *)v20) >> 3));
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  uint64_t v4 = (std::string::value_type **)__p;
  CFIndex v5 = v18;
  if (__p == v18)
  {
    if (__p) {
      goto LABEL_16;
    }
LABEL_3:
    uint64_t v6 = (long long *)v20;
    if (!v20) {
      return;
    }
    goto LABEL_23;
  }
  do
  {
    int v8 = *((char *)v4 + 23);
    if (v8 < 0)
    {
      uint64_t v10 = *v4;
      int v9 = v4[1];
      memset(&v22, 0, sizeof(v22));
      if (!v9) {
        goto LABEL_10;
      }
    }
    else
    {
      int v9 = (std::string::value_type *)*((unsigned __int8 *)v4 + 23);
      uint64_t v10 = (std::string::value_type *)v4;
      memset(&v22, 0, sizeof(v22));
      if (!(_BYTE)v8) {
        goto LABEL_10;
      }
    }
    do
    {
      std::string::push_back(&v22, *v10++);
      --v9;
    }
    while (v9);
LABEL_10:
    unint64_t v11 = *(void *)(a3 + 8);
    if (v11 < *(void *)(a3 + 16))
    {
      long long v7 = *(_OWORD *)&v22.__r_.__value_.__l.__data_;
      *(void *)(v11 + 16) = *((void *)&v22.__r_.__value_.__l + 2);
      *(_OWORD *)unint64_t v11 = v7;
      *(void *)(a3 + 8) = v11 + 24;
    }
    else
    {
      id v12 = sub_1B4BFB6B0((void **)a3, (uint64_t)&v22);
      int v13 = SHIBYTE(v22.__r_.__value_.__r.__words[2]);
      *(void *)(a3 + 8) = v12;
      if (v13 < 0) {
        operator delete(v22.__r_.__value_.__l.__data_);
      }
    }
    v4 += 3;
  }
  while (v4 != v5);
  uint64_t v4 = (std::string::value_type **)__p;
  if (!__p) {
    goto LABEL_3;
  }
LABEL_16:
  uint64_t v14 = (void **)v18;
  if (v18 == v4)
  {
    uint64_t v18 = v4;
    operator delete(v4);
    uint64_t v6 = (long long *)v20;
    if (!v20) {
      return;
    }
LABEL_23:
    uint64_t v15 = v21;
    size_t v16 = v6;
    if (v21 != v6)
    {
      do
      {
        if (*((char *)v15 - 1) < 0) {
          operator delete(*((void **)v15 - 3));
        }
        uint64_t v15 = (long long *)((char *)v15 - 24);
      }
      while (v15 != v6);
      size_t v16 = v20;
    }
    size_t v21 = v6;
    operator delete(v16);
  }
  else
  {
    do
    {
      if (*((char *)v14 - 1) < 0) {
        operator delete(*(v14 - 3));
      }
      v14 -= 3;
    }
    while (v14 != (void **)v4);
    uint64_t v18 = v4;
    operator delete(__p);
    uint64_t v6 = (long long *)v20;
    if (v20) {
      goto LABEL_23;
    }
  }
}

void sub_1B4C5123C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_1B4BF9508((void **)va);
  _Unwind_Resume(a1);
}

void sub_1B4C51250(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  sub_1B4BF9508(v21);
  sub_1B4BF9508(&a10);
  sub_1B4BF9508(&a13);
  _Unwind_Resume(a1);
}

void sub_1B4C51288(uint64_t *a1@<X1>, void *a2@<X8>)
{
  char v3 = 1;
  LOWORD(__p) = 32;
  sub_1B4C50CF4(a1, (uint64_t)&__p, a2);
  if (v3 < 0) {
    operator delete(__p);
  }
}

void sub_1B4C512E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B4C5169C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a2 == 1)
  {
    uint64_t v34 = __cxa_begin_catch(a1);
    if (qword_1E9D40AF0 != -1) {
      dispatch_once(&qword_1E9D40AF0, &unk_1F0D56000);
    }
    unint64_t v35 = (id)qword_1E9D40AE8;
    if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
    {
      uint64_t v36 = (*(uint64_t (**)(void *))(*(void *)v34 + 16))(v34);
      *(_DWORD *)(v32 - 80) = 136315138;
      *(void *)(v32 - 76) = v36;
      _os_log_error_impl(&dword_1B4BAD000, v35, OS_LOG_TYPE_ERROR, "[CVNLPTokenIDConverter] Failed to load token id resources: %s", (uint8_t *)(v32 - 80), 0xCu);
    }

    __cxa_end_catch();
    if (a22 < 0) {
      operator delete(__p);
    }
    JUMPOUT(0x1B4C5165CLL);
  }
  if (a22 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1B4C51A38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C51B58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C51B6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1B4C52040(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1BA9929C0);
}

uint64_t sub_1B4C52078(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_1B4C520A8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x80000001B4C9B1CELL) {
    return a1 + 24;
  }
  if (((v3 & 0x80000001B4C9B1CELL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001B4C9B1CELL)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001B4C9B1CELL & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

void sub_1B4C521D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C52468(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C52478(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C52568(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C52578(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C52588(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C525E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C52648(uint64_t a1, unint64_t a2)
{
  CFIndex v5 = *(char **)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v6 = v5;
  if (a2 <= (v4 - (uint64_t)v5) >> 2)
  {
    if (a2)
    {
      bzero(v5, 4 * a2);
      uint64_t v6 = &v5[4 * a2];
    }
    *(void *)(a1 + 8) = v6;
  }
  else
  {
    long long v7 = *(char **)a1;
    uint64_t v8 = (uint64_t)&v5[-*(void *)a1];
    uint64_t v9 = v8 >> 2;
    unint64_t v10 = (v8 >> 2) + a2;
    if (v10 >> 62) {
      sub_1B4BB3244();
    }
    uint64_t v11 = v4 - (void)v7;
    if (v11 >> 1 > v10) {
      unint64_t v10 = v11 >> 1;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v12 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      if (v12 >> 62) {
        sub_1B4BB2D38();
      }
      int v13 = operator new(4 * v12);
    }
    else
    {
      int v13 = 0;
    }
    uint64_t v14 = &v13[4 * v9];
    size_t v15 = 4 * a2;
    size_t v16 = &v13[4 * v12];
    bzero(v14, v15);
    int v17 = &v14[v15];
    if (v5 != v7)
    {
      unint64_t v18 = v5 - v7 - 4;
      if (v18 < 0x2C) {
        goto LABEL_31;
      }
      if ((unint64_t)(v5 - v13 - v8) < 0x20) {
        goto LABEL_31;
      }
      uint64_t v19 = (v18 >> 2) + 1;
      uint64_t v20 = 4 * (v19 & 0x7FFFFFFFFFFFFFF8);
      uint64_t v6 = &v5[-v20];
      v14 -= v20;
      size_t v21 = &v13[4 * v9 - 16];
      std::string v22 = v5 - 16;
      uint64_t v23 = v19 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v24 = *(_OWORD *)v22;
        *(v21 - 1) = *((_OWORD *)v22 - 1);
        *size_t v21 = v24;
        v21 -= 2;
        v22 -= 32;
        v23 -= 8;
      }
      while (v23);
      if (v19 != (v19 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_31:
        do
        {
          int v25 = *((_DWORD *)v6 - 1);
          v6 -= 4;
          *((_DWORD *)v14 - 1) = v25;
          v14 -= 4;
        }
        while (v6 != v7);
      }
    }
    *(void *)a1 = v14;
    *(void *)(a1 + 8) = v17;
    *(void *)(a1 + 16) = v16;
    if (v7)
    {
      operator delete(v7);
    }
  }
}

void sub_1B4C5286C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C52908(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C52A7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C52B84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C52B98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C52BB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C52F50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C52FB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C53070(unsigned int a1, uint64_t a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (qword_1E9D40AF0 != -1) {
    dispatch_once(&qword_1E9D40AF0, &unk_1F0D56000);
  }
  uint64_t v4 = (id)qword_1E9D40AE8;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)std::string buf = 136315138;
    uint64_t v18 = a2;
    _os_log_error_impl(&dword_1B4BAD000, v4, OS_LOG_TYPE_ERROR, "%s", buf, 0xCu);
  }

  uint64_t v6 = objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E4F28C58], v5, (uint64_t)CVNLPCationErrorDomain, a1, 0);
  long long v7 = (void *)MEMORY[0x1E4F1CA00];
  unint64_t v10 = objc_msgSend_stringWithUTF8String_(NSString, v8, a2, v9);
  size_t v15 = off_1E9D40440;
  uint64_t v16 = v6;
  unint64_t v12 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v11, (uint64_t)&v16, (uint64_t)&v15, 1);
  objc_msgSend_exceptionWithName_reason_userInfo_(v7, v13, *MEMORY[0x1E4F1C3B8], (uint64_t)v10, v12);
  id v14 = (id)objc_claimAutoreleasedReturnValue();

  objc_exception_throw(v14);
}

void sub_1B4C531CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1B4C531F8(uint64_t a1, void *a2)
{
  id v4 = a2;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  CFIndex v5 = (void *)MEMORY[0x1BA992F90]();
  objc_storeStrong((id *)(a1 + 32), a2);
  uint64_t v6 = [CVNLPPerformance alloc];
  uint64_t v9 = objc_msgSend_initWithOptions_(v6, v7, (uint64_t)v4, v8);
  unint64_t v10 = *(void **)(a1 + 40);
  *(void *)(a1 + 40) = v9;

  uint64_t v11 = [CVNLPCaptionRuntimeParameters alloc];
  uint64_t v14 = objc_msgSend_initWithOptions_(v11, v12, *(void *)(a1 + 32), v13);
  size_t v15 = *(void **)(a1 + 48);
  *(void *)(a1 + 48) = v14;

  uint64_t v16 = [CVNLPCaptionPostProcessingHandler alloc];
  uint64_t v18 = objc_msgSend_initWithOptions_runtimeParameters_(v16, v17, *(void *)(a1 + 32), *(void *)(a1 + 48));
  uint64_t v19 = *(void **)(a1 + 24);
  *(void *)(a1 + 24) = v18;

  uint64_t v20 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_USER_INTERACTIVE, 0);
  dispatch_queue_t v21 = dispatch_queue_create("caption_queue", v20);
  std::string v22 = *(void **)(a1 + 64);
  *(void *)(a1 + 64) = v21;

  uint64_t v23 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_USER_INTERACTIVE, 0);
  dispatch_queue_t v24 = dispatch_queue_create("classify_queue", v23);
  int v25 = *(void **)(a1 + 72);
  *(void *)(a1 + 72) = v24;

  uint64_t v26 = *(void **)(a1 + 40);
  v29[0] = MEMORY[0x1E4F143A8];
  v29[1] = 3221225472;
  v29[2] = sub_1B4C53404;
  v29[3] = &unk_1E60A3918;
  v29[4] = a1;
  objc_msgSend_run_block_(v26, v27, @"Create", (uint64_t)v29);

  return a1;
}

void sub_1B4C533A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C53404(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = [CVNLPVisionRequestHandler alloc];
  uint64_t v4 = objc_msgSend_initWithOptions_runTimeParams_(v2, v3, *(void *)(v1 + 32), *(void *)(v1 + 48));
  CFIndex v5 = *(void **)(v1 + 16);
  *(void *)(v1 + 16) = v4;

  objc_msgSend_objectForKeyedSubscript_(*(void **)(v1 + 32), v6, (uint64_t)CVNLPCaptionModelType, v7);
  id v22 = (id)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend_isEqualToString_(v22, v8, (uint64_t)CVNLPCaptionModelLSTM, v9))
  {
    unint64_t v10 = [CVNLPCaptionEncoderLSTM alloc];
    uint64_t v12 = objc_msgSend_initWithOptions_runTimeParams_(v10, v11, *(void *)(v1 + 32), *(void *)(v1 + 48));
    uint64_t v13 = *(void **)v1;
    *(void *)uint64_t v1 = v12;

    uint64_t v14 = [CVNLPCaptionDecoderLSTM alloc];
  }
  else
  {
    int v17 = [CVNLPCaptionEncoderTransformer alloc];
    uint64_t v19 = objc_msgSend_initWithOptions_runTimeParams_(v17, v18, *(void *)(v1 + 32), *(void *)(v1 + 48));
    uint64_t v20 = *(void **)v1;
    *(void *)uint64_t v1 = v19;

    uint64_t v14 = [CVNLPCaptionDecoderTransformer alloc];
  }
  uint64_t v16 = objc_msgSend_initWithOptions_runTimeParams_(v14, v15, *(void *)(v1 + 32), *(void *)(v1 + 48));
  dispatch_queue_t v21 = *(void **)(v1 + 8);
  *(void *)(v1 + 8) = v16;
}

void sub_1B4C5351C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id sub_1B4C53534(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v7 = 0;
  uint64_t v8 = &v7;
  uint64_t v9 = 0x3032000000;
  unint64_t v10 = sub_1B4C53650;
  uint64_t v11 = sub_1B4C53660;
  id v12 = 0;
  uint64_t v3 = *(void **)(a1 + 40);
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  v6[2] = sub_1B4C53668;
  v6[3] = &unk_1E60A3A48;
  v6[4] = &v7;
  v6[5] = a1;
  v6[6] = a2;
  v6[7] = a3;
  objc_msgSend_run_block_(v3, a2, @"Total", (uint64_t)v6);
  id v4 = (id)v8[5];
  _Block_object_dispose(&v7, 8);

  return v4;
}

void sub_1B4C53630(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1B4C53650(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1B4C53660(uint64_t a1)
{
}

void sub_1B4C53668(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  long long v5 = *(_OWORD *)(a1 + 40);
  uint64_t v20 = 0;
  dispatch_queue_t v21 = &v20;
  uint64_t v22 = 0x5012000000;
  uint64_t v23 = sub_1B4C5382C;
  dispatch_queue_t v24 = nullsub_20;
  int v25 = &unk_1B4C9FEA6;
  long long v15 = v5;
  uint64_t v6 = v5;
  uint64_t v7 = objc_msgSend_objectForKeyedSubscript_(*(void **)(v5 + 32), a2, (uint64_t)CVNLPCaptionScaleMethod, a4);
  uint64_t v8 = *(void **)(v6 + 40);
  v16[0] = MEMORY[0x1E4F143A8];
  v16[1] = 3221225472;
  void v16[2] = sub_1B4C5383C;
  v16[3] = &unk_1E60A3A70;
  id v9 = v7;
  id v17 = v9;
  uint64_t v18 = &v20;
  long long v19 = v15;
  objc_msgSend_run_block_(v8, v10, @"Scale", (uint64_t)v16);
  uint64_t v11 = sub_1B4C53A64(v6, (uint64_t)(v21 + 6), 0);
  uint64_t v12 = v21[6];
  if (v12) {
    MEMORY[0x1BA992990](v12, 0x1000C8077774924);
  }

  _Block_object_dispose(&v20, 8);
  uint64_t v13 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v14 = *(void **)(v13 + 40);
  *(void *)(v13 + 40) = v11;
}

void sub_1B4C537EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B4C53814(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

__n128 sub_1B4C5382C(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 48);
  long long v3 = *(_OWORD *)(a2 + 64);
  *(__n128 *)(a1 + 48) = result;
  *(_OWORD *)(a1 + 64) = v3;
  return result;
}

void sub_1B4C5383C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  long long v3 = *(__CFString **)(a1 + 32);
  if (v3) {
    BOOL v4 = v3 == CVNLPCaptionScaleMethodvImage;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4) {
    sub_1B4C2BD10(*(CGImage **)(a1 + 56));
  }
  dispatch_queue_t v21 = v3;
  char isEqualToString = objc_msgSend_isEqualToString_(v21, v5, (uint64_t)CVNLPCaptionScaleMethodCGInterpolationNone, v6);
  if (isEqualToString)
  {
    CGInterpolationQuality v10 = kCGInterpolationNone;
    goto LABEL_15;
  }
  if (objc_msgSend_isEqualToString_(v21, v8, (uint64_t)CVNLPCaptionScaleMethodCGInterpolationLow, v9))
  {
    CGInterpolationQuality v10 = kCGInterpolationLow;
    goto LABEL_15;
  }
  if (objc_msgSend_isEqualToString_(v21, v11, (uint64_t)CVNLPCaptionScaleMethodCGInterpolationMedium, v12))
  {
    CGInterpolationQuality v10 = kCGInterpolationMedium;
    goto LABEL_15;
  }
  if (objc_msgSend_isEqualToString_(v21, v13, (uint64_t)CVNLPCaptionScaleMethodCGInterpolationHigh, v14))
  {
    CGInterpolationQuality v10 = kCGInterpolationHigh;
LABEL_15:

    long long v15 = *(CGImage **)(a1 + 56);
    size_t v16 = *(void *)(*(void *)v2 + 32);
    size_t v17 = *(void *)(*(void *)v2 + 40);
    DeviceRGB = CGColorSpaceCreateDeviceRGB();
    long long v19 = CGBitmapContextCreate(0, v16, v17, 8uLL, 4 * v16, DeviceRGB, 0x4005u);
    CGContextSetInterpolationQuality(v19, v10);
    v23.size.width = (double)v16;
    v23.size.height = (double)v17;
    v23.origin.x = 0.0;
    v23.origin.y = 0.0;
    CGContextDrawImage(v19, v23, v15);
    Image = CGBitmapContextCreateImage(v19);
    CGContextRelease(v19);
    CGColorSpaceRelease(DeviceRGB);
    sub_1B4C2BD10(Image);
  }
}

void sub_1B4C53A50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id sub_1B4C53A64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 | a3)
  {
    long long v3 = dispatch_group_create();
    *(void *)std::string buf = 0;
    dispatch_queue_t v21 = buf;
    uint64_t v22 = 0x3032000000;
    CGRect v23 = sub_1B4C53650;
    dispatch_queue_t v24 = sub_1B4C53660;
    id v25 = 0;
    uint64_t v8 = *(NSObject **)(a1 + 64);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = sub_1B4C540E8;
    block[3] = &unk_1E60A3A48;
    block[4] = buf;
    block[5] = a1;
    block[6] = a3;
    block[7] = a2;
    dispatch_group_async(v3, v8, block);
    uint64_t v13 = 0;
    uint64_t v14 = &v13;
    uint64_t v15 = 0x3032000000;
    size_t v16 = sub_1B4C53650;
    size_t v17 = sub_1B4C53660;
    id v18 = 0;
    uint64_t v9 = *(NSObject **)(a1 + 72);
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = sub_1B4C542F0;
    v12[3] = &unk_1E60A3A48;
    v12[6] = a3;
    v12[7] = a2;
    v12[4] = &v13;
    v12[5] = a1;
    dispatch_group_async(v3, v9, v12);
    dispatch_group_wait(v3, 0xFFFFFFFFFFFFFFFFLL);
    objc_storeStrong((id *)(a1 + 56), (id)v14[5]);
    BOOL v4 = objc_msgSend_postProcessCaptions_visionObservations_(*(void **)(a1 + 24), v10, *((void *)v21 + 5), v14[5]);
    _Block_object_dispose(&v13, 8);

    _Block_object_dispose(buf, 8);
  }
  else
  {
    if (qword_1E9D40AF0 != -1) {
      dispatch_once(&qword_1E9D40AF0, &unk_1F0D56000);
    }
    long long v3 = (id)qword_1E9D40AE8;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_error_impl(&dword_1B4BAD000, v3, OS_LOG_TYPE_ERROR, "Input buffer and pixel buffer are both nil", buf, 2u);
    }
    BOOL v4 = 0;
  }

  return v4;
}

void sub_1B4C53CC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  _Block_object_dispose(&a17, 8);

  _Block_object_dispose((const void *)(v23 - 112), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1B4C53CFC(uint64_t a1, const char *a2)
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  uint64_t v9 = 0;
  uint64_t v2 = *(void **)(a1 + 40);
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  uint64_t v5[2] = sub_1B4C53DCC;
  v5[3] = &unk_1E60A3A98;
  v5[4] = &v6;
  v5[5] = a1;
  v5[6] = a2;
  objc_msgSend_run_block_(v2, a2, @"ScalePx", (uint64_t)v5);
  uint64_t v3 = v7[3];
  _Block_object_dispose(&v6, 8);
  return v3;
}

void sub_1B4C53DB4(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

__CVBuffer *sub_1B4C53DCC(uint64_t a1)
{
  __n128 result = sub_1B4C2BEB4(*(__CVBuffer **)(a1 + 48), (size_t *)(**(void **)(a1 + 40) + 32));
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

id sub_1B4C53E14(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v7 = 0;
  uint64_t v8 = &v7;
  uint64_t v9 = 0x3032000000;
  CGInterpolationQuality v10 = sub_1B4C53650;
  uint64_t v11 = sub_1B4C53660;
  id v12 = 0;
  uint64_t v3 = *(void **)(a1 + 40);
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  v6[2] = sub_1B4C53F30;
  v6[3] = &unk_1E60A3A48;
  v6[4] = &v7;
  v6[5] = a1;
  v6[6] = a2;
  v6[7] = a3;
  objc_msgSend_run_block_(v3, a2, @"TotalPx", (uint64_t)v6);
  id v4 = (id)v8[5];
  _Block_object_dispose(&v7, 8);

  return v4;
}

void sub_1B4C53F10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  _Unwind_Resume(a1);
}

void sub_1B4C53F30(void *a1, const char *a2)
{
  uint64_t v3 = a1[5];
  id v4 = (__CVBuffer *)a1[6];
  uint64_t v12 = 0;
  uint64_t v13 = &v12;
  uint64_t v14 = 0x2020000000;
  uint64_t v15 = 0;
  long long v5 = *(void **)(v3 + 40);
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 3221225472;
  void v11[2] = sub_1B4C540A0;
  v11[3] = &unk_1E60A3A98;
  v11[4] = &v12;
  v11[5] = v3;
  v11[6] = v4;
  objc_msgSend_run_block_(v5, a2, @"ScalePx", (uint64_t)v11);
  uint64_t v6 = v13[3];
  if (v6)
  {
    uint64_t v7 = sub_1B4C53A64(v3, 0, v6);
    uint64_t v8 = (__CVBuffer *)v13[3];
    if (v8 != v4)
    {
      CVPixelBufferUnlockBaseAddress(v8, 0);
      CFRelease((CFTypeRef)v13[3]);
    }
  }
  else
  {
    uint64_t v7 = 0;
  }
  _Block_object_dispose(&v12, 8);
  uint64_t v9 = *(void *)(a1[4] + 8);
  CGInterpolationQuality v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = v7;
}

void sub_1B4C54054(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B4C5406C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B4C54088(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

__CVBuffer *sub_1B4C540A0(uint64_t a1)
{
  __n128 result = sub_1B4C2BEB4(*(__CVBuffer **)(a1 + 48), (size_t *)(**(void **)(a1 + 40) + 32));
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void sub_1B4C540E8(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a1[5];
  uint64_t v9 = objc_msgSend_genderOption(*(void **)(v5 + 48), a2, a3, a4);
  if (!v9)
  {
    uint64_t v9 = objc_msgSend_excludeGenderStrategy(*(void **)(v5 + 48), v6, v7, v8) == 2;
    uint64_t v10 = a1[6];
    uint64_t v11 = *(void **)v5;
    if (v10) {
      goto LABEL_3;
    }
LABEL_5:
    uint64_t v15 = a1[7];
    id v44 = 0;
    objc_msgSend_computeCaptionForImage_outputs_(v11, v6, v15, (uint64_t)&v44);
    id v12 = v44;
    uint64_t v14 = objc_msgSend_computeCaptionForImageWithInputs_genderOption_(*(void **)(v5 + 8), v16, (uint64_t)v12, v9);
    goto LABEL_6;
  }
  uint64_t v10 = a1[6];
  uint64_t v11 = *(void **)v5;
  if (!v10) {
    goto LABEL_5;
  }
LABEL_3:
  id v45 = 0;
  objc_msgSend_computeCaptionForPixelBuffer_outputs_(v11, v6, v10, (uint64_t)&v45);
  id v12 = v45;
  uint64_t v14 = objc_msgSend_computeCaptionForImageWithInputs_genderOption_(*(void **)(v5 + 8), v13, (uint64_t)v12, v9);
LABEL_6:
  uint64_t v17 = *(void *)(a1[4] + 8);
  id v18 = *(void **)(v17 + 40);
  *(void *)(v17 + 40) = v14;

  long long v19 = *(void **)(v5 + 24);
  uint64_t v20 = *(void *)(*(void *)(a1[4] + 8) + 40);
  id v43 = 0;
  uint64_t v22 = objc_msgSend_postProcessCaptions_genderOption_error_(v19, v21, v20, v9, &v43);
  id v23 = v43;
  uint64_t v24 = *(void *)(a1[4] + 8);
  id v25 = *(void **)(v24 + 40);
  *(void *)(v24 + 40) = v22;

  if (objc_msgSend_code(v23, v26, v27, v28) == 1001 || objc_msgSend_code(v23, v29, v30, v31) == 1002)
  {
    uint64_t v32 = objc_msgSend_computeCaptionForImageWithInputs_genderOption_(*(void **)(v5 + 8), v29, (uint64_t)v12, 0);
    uint64_t v33 = *(void *)(a1[4] + 8);
    uint64_t v34 = *(void **)(v33 + 40);
    *(void *)(v33 + 40) = v32;

    unint64_t v35 = *(void **)(v5 + 24);
    uint64_t v36 = *(void *)(*(void *)(a1[4] + 8) + 40);
    id v42 = v23;
    uint64_t v38 = objc_msgSend_postProcessCaptions_genderOption_error_(v35, v37, v36, 0, &v42);
    id v39 = v42;

    uint64_t v40 = *(void *)(a1[4] + 8);
    long long v41 = *(void **)(v40 + 40);
    *(void *)(v40 + 40) = v38;

    id v23 = v39;
  }
}

void sub_1B4C542CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C542DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C542F0(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a1[6];
  if (!v5) {
    operator new[]();
  }
  uint64_t v6 = objc_msgSend_classifyImage_(*(void **)(a1[5] + 16), a2, v5, a4);
  uint64_t v7 = *(void *)(a1[4] + 8);
  uint64_t v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v6;
}

id sub_1B4C5446C(void **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(void *)(a2 + 8) == *(void *)a2)
  {
    if (qword_1E9D40AF0 != -1) {
      dispatch_once(&qword_1E9D40AF0, &unk_1F0D56000);
    }
    id v18 = (id)qword_1E9D40AE8;
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_error_impl(&dword_1B4BAD000, v18, OS_LOG_TYPE_ERROR, "Video Pixel Buffers are empty", buf, 2u);
    }
    uint64_t v31 = 0;
  }
  else
  {
    uint64_t v9 = objc_msgSend_genderOption(a1[6], (const char *)a2, a3, a4);
    if (!v9) {
      uint64_t v9 = objc_msgSend_excludeGenderStrategy(a1[6], v6, v7, v8) == 2;
    }
    uint64_t v10 = *a1;
    id v35 = 0;
    objc_msgSend_computeCaptionForVideoPixelBuffer_outputs_(v10, v6, a2, (uint64_t)&v35);
    id v12 = v35;
    uint64_t v13 = *(void *)a2;
    if (*(void *)(a2 + 8) != *(void *)a2)
    {
      unint64_t v14 = 0;
      do
      {
        CFRelease(*(CFTypeRef *)(v13 + 8 * v14++));
        uint64_t v13 = *(void *)a2;
      }
      while (v14 < (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
    }
    uint64_t v15 = objc_msgSend_computeCaptionForImageWithInputs_genderOption_(a1[1], v11, (uint64_t)v12, v9);
    size_t v16 = a1[3];
    id v34 = 0;
    id v18 = objc_msgSend_postProcessCaptions_genderOption_error_(v16, v17, (uint64_t)v15, v9, &v34);
    id v19 = v34;

    if (objc_msgSend_code(v19, v20, v21, v22) == 1001 || objc_msgSend_code(v19, v23, v24, v25) == 1002)
    {
      uint64_t v26 = objc_msgSend_computeCaptionForImageWithInputs_genderOption_(a1[1], v23, (uint64_t)v12, 0);

      uint64_t v27 = a1[3];
      id v33 = v19;
      uint64_t v29 = objc_msgSend_postProcessCaptions_genderOption_error_(v27, v28, (uint64_t)v26, 0, &v33);
      id v30 = v33;

      id v18 = v29;
      id v19 = v30;
    }
    uint64_t v31 = objc_msgSend_postProcessCaptions_visionObservations_(a1[3], v23, (uint64_t)v18, 0);
  }
  return v31;
}

void sub_1B4C546B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C546DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1B4C546EC(void **a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = objc_msgSend_dictionary(MEMORY[0x1E4F1CA60], a2, a3, a4);
  uint64_t v9 = objc_msgSend_results(a1[5], v6, v7, v8);
  objc_msgSend_addEntriesFromDictionary_(v5, v10, (uint64_t)v9, v11);

  uint64_t v15 = objc_msgSend_performanceResults(*a1, v12, v13, v14);
  objc_msgSend_addEntriesFromDictionary_(v5, v16, (uint64_t)v15, v17);

  uint64_t v21 = objc_msgSend_performanceResults(a1[1], v18, v19, v20);
  objc_msgSend_addEntriesFromDictionary_(v5, v22, (uint64_t)v21, v23);

  uint64_t v27 = objc_msgSend_perfResults(a1[2], v24, v25, v26);
  uint64_t v31 = objc_msgSend_results(v27, v28, v29, v30);
  objc_msgSend_addEntriesFromDictionary_(v5, v32, (uint64_t)v31, v33);

  long long v37 = objc_msgSend_copy(v5, v34, v35, v36);
  return v37;
}

void sub_1B4C547DC(_Unwind_Exception *a1)
{
  id v4 = v2;

  _Unwind_Resume(a1);
}

void sub_1B4C547F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C5480C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C54820(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C54834(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C54848(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C549F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C54A6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)CVNLPCTCTextDecodingPath;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_1B4C54E28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C54EC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C557E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B4C55BDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_1B4C55D40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C55D50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C55E60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C560CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B4C560E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B4C560FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B4C56114(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B4C564D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C564F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C56504(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C56518(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  if (a14) {
    operator delete(a14);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B4C56550(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C56C3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21)
{
  _Unwind_Resume(a1);
}

void sub_1B4C56EBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B4C56F18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B4C56F34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B4C5734C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a18, 8);
  if (__p)
  {
    a25 = (uint64_t)__p;
    operator delete(__p);
  }
  _Block_object_dispose(&a27, 8);
  _Block_object_dispose((const void *)(v31 - 128), 8);

  _Unwind_Resume(a1);
}

void sub_1B4C5745C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

__n128 sub_1B4C57470(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void sub_1B4C57494(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void sub_1B4C574AC(uint64_t a1)
{
  uint64_t v2 = LXCursorCreateByAdvancing();
  if (!v2) {
    return;
  }
  uint64_t v3 = v2;
  id v4 = *(void **)(*(void *)(a1 + 40) + 8);
  uint64_t v6 = (uint64_t *)v4[7];
  unint64_t v5 = v4[8];
  if ((unint64_t)v6 >= v5)
  {
    uint64_t v8 = (char *)v4[6];
    uint64_t v9 = ((char *)v6 - v8) >> 3;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 61) {
      sub_1B4BB3244();
    }
    uint64_t v11 = v5 - (void)v8;
    if (v11 >> 2 > v10) {
      unint64_t v10 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      if (v12 >> 61) {
        sub_1B4BB2D38();
      }
      uint64_t v13 = (char *)operator new(8 * v12);
      uint64_t v14 = (uint64_t *)&v13[8 * v9];
      uint64_t v15 = &v13[8 * v12];
      *uint64_t v14 = v3;
      uint64_t v7 = (uint64_t)(v14 + 1);
      size_t v16 = (char *)((char *)v6 - v8);
      if (v6 == (uint64_t *)v8) {
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v13 = 0;
      uint64_t v14 = (uint64_t *)(8 * v9);
      uint64_t v15 = 0;
      *(void *)(8 * v9) = v3;
      uint64_t v7 = 8 * v9 + 8;
      size_t v16 = (char *)((char *)v6 - v8);
      if (v6 == (uint64_t *)v8)
      {
LABEL_22:
        void v4[6] = v14;
        v4[7] = v7;
        v4[8] = v15;
        if (v6) {
          operator delete(v6);
        }
        goto LABEL_24;
      }
    }
    unint64_t v17 = (unint64_t)(v16 - 8);
    if (v17 < 0x58) {
      goto LABEL_33;
    }
    if ((unint64_t)(v8 - v13) < 0x20) {
      goto LABEL_33;
    }
    uint64_t v18 = (v17 >> 3) + 1;
    uint64_t v19 = 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v20 = &v6[v19 / 0xFFFFFFFFFFFFFFF8];
    uint64_t v14 = (uint64_t *)((char *)v14 - v19);
    uint64_t v21 = &v13[8 * v9 - 16];
    uint64_t v22 = v6 - 2;
    uint64_t v23 = v18 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v24 = *(_OWORD *)v22;
      *((_OWORD *)v21 - 1) = *((_OWORD *)v22 - 1);
      *(_OWORD *)uint64_t v21 = v24;
      v21 -= 32;
      v22 -= 4;
      v23 -= 4;
    }
    while (v23);
    uint64_t v6 = v20;
    if (v18 != (v18 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_33:
      do
      {
        uint64_t v25 = *--v6;
        *--uint64_t v14 = v25;
      }
      while (v6 != (uint64_t *)v8);
    }
    uint64_t v6 = (uint64_t *)v4[6];
    goto LABEL_22;
  }
  uint64_t *v6 = v2;
  uint64_t v7 = (uint64_t)(v6 + 1);
LABEL_24:
  v4[7] = v7;
  LXCursorConditionalProbability();
  double v27 = v26 * 2.30258509;
  *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 1;
  if (v27 < 0.0)
  {
    uint64_t v28 = *(void *)(*(void *)(a1 + 56) + 8);
    double v29 = *(double *)(v28 + 24);
    double v30 = v27 - *(double *)(a1 + 64);
    double v31 = fmax(v29, v30);
    double v32 = fmin(v29, v30);
    if (v32 >= -1021.0)
    {
      long double v33 = exp(v32 - v31);
      double v31 = log1p(v33) + v31;
    }
    *(double *)(v28 + 24) = v31;
  }
}

void sub_1B4C57C90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, void *a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,void *a35)
{
  operator delete(v35);
  operator delete(__p);

  _Block_object_dispose((const void *)(v38 - 184), 8);
  _Block_object_dispose((const void *)(v38 - 152), 8);

  _Unwind_Resume(a1);
}

uint64_t sub_1B4C57DD0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  objc_msgSend_languageModel(*(void **)(a1 + 32), a2, a3, a4);
  uint64_t result = LMLanguageModelGetTokenIDForString();
  *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = result;
  return result;
}

void sub_1B4C582EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

void sub_1B4C5830C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

void sub_1B4C58328(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  long double v33 = *(void **)(v31 - 176);
  if (v33)
  {
    *(void *)(v31 - 168) = v33;
    operator delete(v33);
  }

  _Unwind_Resume(a1);
}

void sub_1B4C5842C()
{
  if (!*(void *)(v0 - 176)) {
    JUMPOUT(0x1B4C58414);
  }
  JUMPOUT(0x1B4C5840CLL);
}

uint64_t sub_1B4C5843C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  id v4 = objc_msgSend_letterCharacterSet(MEMORY[0x1E4F28B88], a2, a3, a4);
  uint64_t v8 = objc_msgSend_mutableCopy(v4, v5, v6, v7);
  uint64_t v9 = (void *)qword_1E9D406B0;
  qword_1E9D406B0 = v8;

  unint64_t v10 = (void *)qword_1E9D406B0;
  uint64_t v13 = objc_msgSend_characterSetWithCharactersInString_(MEMORY[0x1E4F28B88], v11, @"'.-/", v12);
  objc_msgSend_formUnionWithCharacterSet_(v10, v14, (uint64_t)v13, v15);

  qword_1E9D406A8 = objc_msgSend_invertedSet((void *)qword_1E9D406B0, v16, v17, v18);
  return MEMORY[0x1F41817F8]();
}

void sub_1B4C584E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C584F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C58504(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  objc_msgSend_wordLanguageModel(*(void **)(*(void *)(a1 + 32) + 352), a2, a3, a4);
  id v9 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_languageModel(v9, v5, v6, v7);
  LMLanguageModelConditionalProbability();
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v8;
}

void sub_1B4C58580(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void *sub_1B4C58594(void *result, uint64_t a2)
{
  result[6] = 0;
  result[7] = 0;
  result[8] = 0;
  uint64_t v3 = *(unsigned char **)(a2 + 48);
  uint64_t v2 = *(unsigned char **)(a2 + 56);
  int64_t v4 = v2 - v3;
  if (v2 != v3)
  {
    unint64_t v5 = result;
    if (v4 < 0) {
      sub_1B4BB3244();
    }
    uint64_t v6 = (char *)operator new(v2 - v3);
    v5[6] = v6;
    void v5[7] = v6;
    uint64_t v7 = &v6[4 * (v4 >> 2)];
    v5[8] = v7;
    uint64_t result = memcpy(v6, v3, v4);
    void v5[7] = v7;
  }
  return result;
}

void sub_1B4C5860C(_Unwind_Exception *exception_object)
{
  int64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 56) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B4C58628(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

uint64_t sub_1B4C586B0()
{
  qword_1E9D406C8 = (uint64_t)dispatch_queue_create("com.apple.cvnlp.languagemodeling", 0);
  return MEMORY[0x1F41817F8]();
}

void sub_1B4C58A30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C58A48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C58A5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double sub_1B4C58D6C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v7 = v3;
  if (*(unsigned char *)(a1 + 40) && (objc_msgSend_hasProblematicMixedScriptWords(v3, v4, v5, v6) & 1) != 0)
  {
    double v8 = -1000.0;
  }
  else
  {
    uint64_t v9 = objc_msgSend_characterCount(v7, v4, v5, v6) + 1;
    objc_msgSend_lexiconScore(v7, v10, v11, v12);
    double v14 = v13;
    uint64_t v18 = objc_msgSend_lexicons(*(void **)(a1 + 32), v15, v16, v17);
    objc_msgSend_decodingWeightValue(v18, v19, v20, v21);
    double v23 = v22 * v14 / (double)v9;

    objc_msgSend_characterLanguageModelLogProbability(v7, v24, v25, v26);
    double v28 = v27;
    double v32 = objc_msgSend_characterLanguageModel(*(void **)(a1 + 32), v29, v30, v31);
    objc_msgSend_decodingWeightValue(v32, v33, v34, v35);
    double v40 = v39 * v28 / (double)(v9 - objc_msgSend_pseudoSpaceCount(v7, v36, v37, v38));

    double v41 = v40 + v23;
    id v45 = objc_msgSend_wordLanguageModel(*(void **)(a1 + 32), v42, v43, v44);

    if (v45)
    {
      objc_msgSend_wordLanguageModelLogProbability(v7, v46, v47, v48);
      double v50 = v49;
      BOOL v54 = objc_msgSend_wordLanguageModel(*(void **)(a1 + 32), v51, v52, v53);
      objc_msgSend_decodingWeightValue(v54, v55, v56, v57);
      double v62 = v61 * v50 / (double)(objc_msgSend_tokenCount(v7, v58, v59, v60) + 1);

      double v41 = v62 + v41;
    }
    objc_msgSend_modelLogProbability(v7, v46, v47, v48);
    double v8 = v63 / (double)v9 + v41;
  }

  return v8;
}

double sub_1B4C58F88(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v7 = v3;
  if (*(unsigned char *)(a1 + 32) && (objc_msgSend_hasProblematicMixedScriptWords(v3, v4, v5, v6) & 1) != 0)
  {

    return -1000.0;
  }
  else
  {
    uint64_t v9 = objc_msgSend_characterCount(v7, v4, v5, v6) + 1;
    objc_msgSend_modelLogProbability(v7, v10, v11, v12);
    double v14 = v13 / (double)v9;

    return v14;
  }
}

uint64_t sub_1B4C59068(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 8) = 0u;
  id v3 = (void **)(a1 + 8);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 56) = a1 + 64;
  int64_t v4 = (void **)(a1 + 32);
  *(void *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(void *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(void *)(a1 + 80) = a1 + 88;
  *(void *)(a1 + 96) = 0;
  *(void *)a1 = a2;
  if (!a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "MRLNeuralNetworkCreate returned nullptr");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  sub_1B4C5927C((uint64_t)&v13, MEMORY[0x1E4F78E28], a2);
  uint64_t v5 = (void **)*v3;
  if (*v3)
  {
    uint64_t v6 = *(void ***)(a1 + 16);
    uint64_t v7 = *v3;
    if (v6 != v5)
    {
      do
      {
        if (*((char *)v6 - 1) < 0) {
          operator delete(*(v6 - 3));
        }
        v6 -= 3;
      }
      while (v6 != v5);
      uint64_t v7 = *v3;
    }
    *(void *)(a1 + 16) = v5;
    operator delete(v7);
    void *v3 = 0;
    v3[1] = 0;
    v3[2] = 0;
  }
  *(_OWORD *)(a1 + 8) = v13;
  *(void *)(a1 + 24) = v14;
  sub_1B4C5927C((uint64_t)&v13, MEMORY[0x1E4F78E30], *(void *)a1);
  double v8 = (void **)*v4;
  if (*v4)
  {
    uint64_t v9 = *(void ***)(a1 + 40);
    unint64_t v10 = *v4;
    if (v9 != v8)
    {
      do
      {
        if (*((char *)v9 - 1) < 0) {
          operator delete(*(v9 - 3));
        }
        v9 -= 3;
      }
      while (v9 != v8);
      unint64_t v10 = *v4;
    }
    *(void *)(a1 + 40) = v8;
    operator delete(v10);
    const char *v4 = 0;
    v4[1] = 0;
    v4[2] = 0;
  }
  *(_OWORD *)(a1 + 32) = v13;
  *(void *)(a1 + 48) = v14;
  return a1;
}

void sub_1B4C59228(_Unwind_Exception *a1)
{
  sub_1B4C43188(v5, *(char **)(v1 + 88));
  sub_1B4C59808(v4, *(char **)(v1 + 64));
  sub_1B4BF9508(v2);
  sub_1B4BF9508(v3);
  sub_1B4C59660((const void **)v1);
  _Unwind_Resume(a1);
}

void sub_1B4C5927C(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  uint64_t v4 = (const void *)a2(a3);
  sub_1B4C59934(&v35, v4);
  CFTypeRef v5 = v35;
  if (v35)
  {
    CFRetain(v35);
    CFRelease(v5);
  }
  sub_1B4C599EC((uint64_t)&v29, (CFDictionaryRef)v5);
  sub_1B4C599EC((uint64_t)&v23, (CFDictionaryRef)v5);
  uint64_t v24 = (v26 - (unsigned char *)v25) >> 3;
  while (!v29 || v30 == (v32 - (unsigned char *)v31) >> 3)
  {
    if (!v23 || v24 == (v26 - (unsigned char *)v25) >> 3) {
      goto LABEL_35;
    }
    unint64_t v6 = v30;
    if (v29 == v23 && v30 == v24) {
      goto LABEL_35;
    }
LABEL_19:
    if ((v6 & 0x8000000000000000) != 0 || v6 >= (v32 - (unsigned char *)v31) >> 3)
    {
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "DictionaryRef_iterator iterator out of range.");
      exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D8] + 16);
      __cxa_throw(exception, (struct type_info *)off_1E60A34C0, MEMORY[0x1E4FBA1D0]);
    }
    CFStringRef v9 = (const __CFString *)*((void *)v31 + v6);
    if (!v9 || (CFTypeID TypeID = CFStringGetTypeID(), TypeID != CFGetTypeID(v9)))
    {
      uint64_t v17 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v17, "Could not convert");
      __cxa_throw(v17, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    sub_1B4C31780(v9, &v38);
    uint64_t v11 = (const void *)*((void *)v33 + v30);
    if (!v11 || (CFTypeID v12 = CFArrayGetTypeID(), v12 != CFGetTypeID(v11)))
    {
      uint64_t v16 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v16, "Could not convert");
      __cxa_throw(v16, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    sub_1B4C59C64((const __CFArray *)v11, (char **)&v36);
    *(_OWORD *)uint64_t v19 = v38;
    uint64_t v20 = v39;
    *(_OWORD *)std::string __p = v36;
    uint64_t v22 = v37;
    unint64_t v13 = *(void *)(a1 + 8);
    if (v13 >= *(void *)(a1 + 16))
    {
      *(void *)(a1 + 8) = sub_1B4BF9E40((char **)a1, (uint64_t)v19);
      uint64_t v15 = __p[0];
      if (!__p[0]) {
        goto LABEL_30;
      }
LABEL_29:
      __p[1] = v15;
      operator delete(v15);
      goto LABEL_30;
    }
    if (SHIBYTE(v20) < 0)
    {
      sub_1B4BCA11C(*(unsigned char **)(a1 + 8), v19[0], (unint64_t)v19[1]);
    }
    else
    {
      long long v14 = *(_OWORD *)v19;
      *(void *)(v13 + 16) = v20;
      *(_OWORD *)unint64_t v13 = v14;
    }
    *(void *)(a1 + 8) = v13 + 24;
    *(void *)(a1 + 8) = v13 + 24;
    uint64_t v15 = __p[0];
    if (__p[0]) {
      goto LABEL_29;
    }
LABEL_30:
    if (SHIBYTE(v20) < 0) {
      operator delete(v19[0]);
    }
    ++v30;
  }
  unint64_t v6 = v30;
  if (v29 != v23 || v30 != v24) {
    goto LABEL_19;
  }
LABEL_35:
  if (v27)
  {
    double v28 = v27;
    operator delete(v27);
  }
  if (v25)
  {
    uint64_t v26 = v25;
    operator delete(v25);
  }
  if (v33)
  {
    uint64_t v34 = v33;
    operator delete(v33);
  }
  if (v31)
  {
    double v32 = v31;
    operator delete(v31);
  }
  if (v35) {
    CFRelease(v35);
  }
}

void sub_1B4C595B8(_Unwind_Exception *a1)
{
  sub_1B4BF9508(v1);
  _Unwind_Resume(a1);
}

void sub_1B4C595CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v27 = v25;
  *(void *)(v24 + 8) = v27;
  sub_1B4C5989C((uint64_t)&a9);
  sub_1B4C598F0(&a16);
  sub_1B4C598F0(&a24);
  sub_1B4C3910C((const void **)(v26 - 88));
  sub_1B4BF9508((void **)v24);
  _Unwind_Resume(a1);
}

const void **sub_1B4C59660(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  *a1 = 0;
  return a1;
}

void sub_1B4C59698(uint64_t a1)
{
  uint64_t v1 = *(long long **)(a1 + 8);
  uint64_t v2 = *(long long **)(a1 + 16);
  if (v1 != v2)
  {
    id v3 = (uint64_t **)(a1 + 80);
    uint64_t v4 = (uint64_t **)(a1 + 56);
    do
    {
      if (*((char *)v1 + 23) < 0)
      {
        sub_1B4BCA11C(__p, *(void **)v1, *((void *)v1 + 1));
      }
      else
      {
        long long v5 = *v1;
        uint64_t v10 = *((void *)v1 + 2);
        *(_OWORD *)std::string __p = v5;
      }
      uint64_t v11 = __p;
      if (sub_1B4C394DC(v3, (const void **)__p, (uint64_t)&unk_1B4C9AE0A, (long long **)&v11)[7])
      {
        uint64_t v11 = __p;
        unint64_t v6 = sub_1B4C394DC(v3, (const void **)__p, (uint64_t)&unk_1B4C9AE0A, (long long **)&v11);
        CFRelease(v6[7]);
        uint64_t v11 = __p;
        sub_1B4C394DC(v3, (const void **)__p, (uint64_t)&unk_1B4C9AE0A, (long long **)&v11)[7] = 0;
      }
      uint64_t v11 = __p;
      uint64_t v7 = sub_1B4C385B4(v4, (const void **)__p, (uint64_t)&unk_1B4C9AE0A, (long long **)&v11);
      if (v7[7] != v7[8])
      {
        uint64_t v11 = __p;
        double v8 = sub_1B4C385B4(v4, (const void **)__p, (uint64_t)&unk_1B4C9AE0A, (long long **)&v11);
        v8[8] = v8[7];
      }
      if (SHIBYTE(v10) < 0) {
        operator delete(__p[0]);
      }
      uint64_t v1 = (long long *)((char *)v1 + 24);
    }
    while (v1 != v2);
  }
}

void sub_1B4C597EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B4C59808(uint64_t a1, char *a2)
{
  if (a2)
  {
    sub_1B4C59808(a1, *(void *)a2);
    sub_1B4C59808(a1, *((void *)a2 + 1));
    uint64_t v4 = (void *)*((void *)a2 + 7);
    if (v4)
    {
      *((void *)a2 + 8) = v4;
      operator delete(v4);
    }
    if (a2[55] < 0)
    {
      operator delete(*((void **)a2 + 4));
      long long v5 = a2;
    }
    else
    {
      long long v5 = a2;
    }
    operator delete(v5);
  }
}

uint64_t sub_1B4C5989C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *sub_1B4C598F0(void *a1)
{
  uint64_t v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  id v3 = (void *)a1[2];
  if (v3)
  {
    a1[3] = v3;
    operator delete(v3);
  }
  return a1;
}

void *sub_1B4C59934(void *a1, CFTypeRef cf)
{
  *a1 = cf;
  if (cf)
  {
    CFTypeID v3 = CFGetTypeID(cf);
    if (v3 != CFDictionaryGetTypeID())
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
  }
  return a1;
}

void sub_1B4C599BC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v2);
  if (*v1) {
    CFRelease(*v1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1B4C599EC(uint64_t a1, CFDictionaryRef theDict)
{
  *(void *)a1 = theDict;
  *(_OWORD *)(a1 + 40) = 0u;
  CFTypeID v3 = (void **)(a1 + 40);
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(void *)(a1 + 56) = 0;
  if (theDict)
  {
    unint64_t Count = CFDictionaryGetCount(theDict);
    unint64_t v5 = Count;
    uint64_t v6 = *(void *)(a1 + 16);
    unint64_t v7 = (*(void *)(a1 + 24) - v6) >> 3;
    if (Count <= v7)
    {
      if (Count < v7) {
        *(void *)(a1 + 24) = v6 + 8 * Count;
      }
    }
    else
    {
      sub_1B4C59AB0((void **)(a1 + 16), Count - v7);
    }
    double v8 = *(const void ***)(a1 + 40);
    unint64_t v9 = (uint64_t)(*(void *)(a1 + 48) - (void)v8) >> 3;
    if (v5 <= v9)
    {
      if (v5 < v9) {
        *(void *)(a1 + 48) = &v8[v5];
      }
    }
    else
    {
      sub_1B4C59AB0(v3, v5 - v9);
      double v8 = (const void **)*v3;
    }
    CFDictionaryGetKeysAndValues(*(CFDictionaryRef *)a1, *(const void ***)(a1 + 16), v8);
  }
  return a1;
}

void sub_1B4C59AB0(void **a1, unint64_t a2)
{
  unint64_t v5 = (char *)a1[1];
  uint64_t v4 = a1[2];
  uint64_t v6 = v5;
  if (a2 <= (v4 - v5) >> 3)
  {
    if (a2)
    {
      bzero(v5, 8 * a2);
      uint64_t v6 = &v5[8 * a2];
    }
    a1[1] = v6;
  }
  else
  {
    unint64_t v7 = (char *)*a1;
    uint64_t v8 = v5 - (unsigned char *)*a1;
    uint64_t v9 = v8 >> 3;
    unint64_t v10 = (v8 >> 3) + a2;
    if (v10 >> 61) {
      sub_1B4BB3244();
    }
    uint64_t v11 = v4 - v7;
    if (v11 >> 2 > v10) {
      unint64_t v10 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      if (v12 >> 61) {
        sub_1B4BB2D38();
      }
      unint64_t v13 = operator new(8 * v12);
    }
    else
    {
      unint64_t v13 = 0;
    }
    long long v14 = &v13[8 * v9];
    size_t v15 = 8 * a2;
    uint64_t v16 = &v13[8 * v12];
    bzero(v14, v15);
    uint64_t v17 = &v14[v15];
    if (v5 != v7)
    {
      unint64_t v18 = v5 - v7 - 8;
      if (v18 < 0x58) {
        goto LABEL_32;
      }
      if ((unint64_t)(v5 - v13 - v8) < 0x20) {
        goto LABEL_32;
      }
      uint64_t v19 = (v18 >> 3) + 1;
      uint64_t v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v6 = &v5[-v20];
      v14 -= v20;
      uint64_t v21 = &v13[8 * v9 - 16];
      uint64_t v22 = v5 - 16;
      uint64_t v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v24 = *(_OWORD *)v22;
        *(v21 - 1) = *((_OWORD *)v22 - 1);
        *uint64_t v21 = v24;
        v21 -= 2;
        v22 -= 32;
        v23 -= 4;
      }
      while (v23);
      if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_32:
        do
        {
          uint64_t v25 = *((void *)v6 - 1);
          v6 -= 8;
          *((void *)v14 - 1) = v25;
          v14 -= 8;
        }
        while (v6 != v7);
      }
      uint64_t v6 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v17;
    a1[2] = v16;
    if (v6)
    {
      operator delete(v6);
    }
  }
}

void sub_1B4C59C64(const __CFArray *a1@<X0>, char **a2@<X8>)
{
  CFIndex Count = CFArrayGetCount(a1);
  int v4 = Count;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  if (Count << 32)
  {
    if (Count << 32 < 0) {
      sub_1B4BB3244();
    }
    unint64_t v5 = (char *)operator new((4 * Count) & 0x3FFFFFFFFLL);
    *a2 = v5;
    a2[1] = v5;
    a2[2] = &v5[4 * v4];
  }
  if (v4 >= 1)
  {
    CFIndex v6 = 0;
    uint64_t v7 = v4;
    while (1)
    {
      CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(a1, v6);
      uint64_t v10 = sub_1B4C59ED8((uint64_t)ValueAtIndex);
      if ((v10 & 0xFF00000000) == 0)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Could not convert");
        __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      int v11 = v10;
      unint64_t v13 = a2[1];
      unint64_t v12 = (unint64_t)a2[2];
      if ((unint64_t)v13 >= v12) {
        break;
      }
      *(_DWORD *)unint64_t v13 = v10;
      uint64_t v8 = (uint64_t)(v13 + 4);
LABEL_7:
      a2[1] = (char *)v8;
      if (++v6 == v7) {
        return;
      }
    }
    long long v14 = *a2;
    uint64_t v15 = v13 - *a2;
    uint64_t v16 = v15 >> 2;
    unint64_t v17 = (v15 >> 2) + 1;
    if (v17 >> 62) {
      sub_1B4BB3244();
    }
    uint64_t v18 = v12 - (void)v14;
    if (v18 >> 1 > v17) {
      unint64_t v17 = v18 >> 1;
    }
    if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v19 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v19 = v17;
    }
    if (v19)
    {
      if (v19 >> 62) {
        sub_1B4BB2D38();
      }
      uint64_t v20 = operator new(4 * v19);
      uint64_t v21 = &v20[4 * v16];
      *(_DWORD *)uint64_t v21 = v11;
      uint64_t v8 = (uint64_t)(v21 + 4);
      int64_t v22 = v13 - v14;
      if (v13 == v14) {
        goto LABEL_27;
      }
    }
    else
    {
      uint64_t v20 = 0;
      uint64_t v21 = (char *)(4 * v16);
      *(_DWORD *)(4 * v16) = v11;
      uint64_t v8 = 4 * v16 + 4;
      int64_t v22 = v13 - v14;
      if (v13 == v14)
      {
LABEL_27:
        *a2 = v21;
        a2[1] = (char *)v8;
        a2[2] = &v20[4 * v19];
        if (v14) {
          operator delete(v14);
        }
        goto LABEL_7;
      }
    }
    unint64_t v23 = v22 - 4;
    if (v23 < 0x2C) {
      goto LABEL_36;
    }
    if ((unint64_t)(v13 - v20 - v15) < 0x20) {
      goto LABEL_36;
    }
    uint64_t v24 = (v23 >> 2) + 1;
    uint64_t v25 = 4 * (v24 & 0x7FFFFFFFFFFFFFF8);
    uint64_t v26 = &v13[-v25];
    v21 -= v25;
    uint64_t v27 = &v20[4 * v16 - 16];
    double v28 = v13 - 16;
    uint64_t v29 = v24 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v30 = *(_OWORD *)v28;
      *(v27 - 1) = *((_OWORD *)v28 - 1);
      *uint64_t v27 = v30;
      v27 -= 2;
      v28 -= 32;
      v29 -= 8;
    }
    while (v29);
    unint64_t v13 = v26;
    if (v24 != (v24 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_36:
      do
      {
        int v31 = *((_DWORD *)v13 - 1);
        v13 -= 4;
        *((_DWORD *)v21 - 1) = v31;
        v21 -= 4;
      }
      while (v13 != v14);
    }
    goto LABEL_27;
  }
}

void sub_1B4C59EA4(_Unwind_Exception *exception_object)
{
  CFTypeID v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1B4C59ED8(uint64_t result)
{
  if (result)
  {
    CFNumberRef v1 = (const __CFNumber *)result;
    CFTypeID TypeID = CFNumberGetTypeID();
    if (TypeID == CFGetTypeID(v1))
    {
      return sub_1B4C59F74(v1);
    }
    else
    {
      CFTypeID v3 = CFBooleanGetTypeID();
      if (v3 == CFGetTypeID(v1)) {
        return CFBooleanGetValue(v1) | 0x100000000;
      }
      else {
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_1B4C59F74(const __CFNumber *a1)
{
  switch(CFNumberGetType(a1))
  {
    case kCFNumberSInt8Type:
      LOBYTE(valuePtr) = 0;
      CFNumberRef v2 = a1;
      CFNumberType v3 = kCFNumberSInt8Type;
      goto LABEL_10;
    case kCFNumberSInt16Type:
      LOWORD(valuePtr) = 0;
      CFNumberRef v7 = a1;
      CFNumberType v8 = kCFNumberSInt16Type;
      goto LABEL_17;
    case kCFNumberSInt32Type:
      LODWORD(valuePtr) = 0;
      CFNumberRef v9 = a1;
      CFNumberType v10 = kCFNumberSInt32Type;
      goto LABEL_28;
    case kCFNumberSInt64Type:
      double valuePtr = 0.0;
      CFNumberRef v9 = a1;
      CFNumberType v10 = kCFNumberSInt64Type;
      goto LABEL_28;
    case kCFNumberFloat32Type:
      LODWORD(valuePtr) = 0;
      CFNumberRef v11 = a1;
      CFNumberType v12 = kCFNumberFloat32Type;
      goto LABEL_24;
    case kCFNumberFloat64Type:
      double valuePtr = 0.0;
      CFNumberRef v13 = a1;
      CFNumberType v14 = kCFNumberFloat64Type;
      goto LABEL_30;
    case kCFNumberCharType:
      LOBYTE(valuePtr) = 0;
      CFNumberRef v2 = a1;
      CFNumberType v3 = kCFNumberCharType;
LABEL_10:
      int Value = CFNumberGetValue(v2, v3, &valuePtr);
      uint64_t v16 = Value != 0;
      if (Value) {
        unsigned __int8 v17 = LOBYTE(valuePtr);
      }
      else {
        unsigned __int8 v17 = 0;
      }
      int v18 = -256;
      if ((v16 & (SLOBYTE(valuePtr) < 0)) == 0) {
        int v18 = 0;
      }
      uint64_t v5 = v16 << 32;
      LODWORD(v6) = v18 & 0xFFFFFF00 | v17;
      int v4 = v6 & 0xFFFFFF00;
      return v5 | v4 & 0xFFFFFF00 | v6;
    case kCFNumberShortType:
      LOWORD(valuePtr) = 0;
      CFNumberRef v7 = a1;
      CFNumberType v8 = kCFNumberShortType;
LABEL_17:
      if (CFNumberGetValue(v7, v8, &valuePtr)) {
        uint64_t v6 = SLOWORD(valuePtr) & 0xFFFFFFFFLL | 0x100000000;
      }
      else {
        uint64_t v6 = 0;
      }
      goto LABEL_33;
    case kCFNumberIntType:
      LODWORD(valuePtr) = 0;
      CFNumberRef v9 = a1;
      CFNumberType v10 = kCFNumberIntType;
      goto LABEL_28;
    case kCFNumberLongType:
      double valuePtr = 0.0;
      CFNumberRef v9 = a1;
      CFNumberType v10 = kCFNumberLongType;
      goto LABEL_28;
    case kCFNumberLongLongType:
      double valuePtr = 0.0;
      CFNumberRef v9 = a1;
      CFNumberType v10 = kCFNumberLongLongType;
      goto LABEL_28;
    case kCFNumberFloatType:
      LODWORD(valuePtr) = 0;
      CFNumberRef v11 = a1;
      CFNumberType v12 = kCFNumberFloatType;
LABEL_24:
      int v19 = CFNumberGetValue(v11, v12, &valuePtr);
      uint64_t v20 = *(float *)&valuePtr;
      goto LABEL_31;
    case kCFNumberDoubleType:
      double valuePtr = 0.0;
      CFNumberRef v13 = a1;
      CFNumberType v14 = kCFNumberDoubleType;
      goto LABEL_30;
    case kCFNumberCFIndexType:
      double valuePtr = 0.0;
      CFNumberRef v9 = a1;
      CFNumberType v10 = kCFNumberCFIndexType;
      goto LABEL_28;
    case kCFNumberNSIntegerType:
      double valuePtr = 0.0;
      CFNumberRef v9 = a1;
      CFNumberType v10 = kCFNumberNSIntegerType;
LABEL_28:
      int v19 = CFNumberGetValue(v9, v10, &valuePtr);
      uint64_t v20 = LODWORD(valuePtr);
      goto LABEL_31;
    case kCFNumberCGFloatType:
      double valuePtr = 0.0;
      CFNumberRef v13 = a1;
      CFNumberType v14 = kCFNumberCGFloatType;
LABEL_30:
      int v19 = CFNumberGetValue(v13, v14, &valuePtr);
      uint64_t v20 = valuePtr;
LABEL_31:
      uint64_t v6 = v20 | 0x100000000;
      if (!v19) {
        uint64_t v6 = 0;
      }
LABEL_33:
      int v4 = v6 & 0xFFFFFF00;
      uint64_t v5 = v6 & 0x100000000;
      break;
    default:
      int v4 = 0;
      uint64_t v5 = 0;
      LOBYTE(v6) = 0;
      break;
  }
  return v5 | v4 & 0xFFFFFF00 | v6;
}

void sub_1B4C5A378(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C5A390(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C5A3A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C5A4A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)CVNLPCaptionDecoderBlock;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_1B4C5B1A4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,long long a27,int64_t a28)
{
  if (a26 < 0)
  {
    operator delete(__p);
    if ((SHIBYTE(a28) & 0x80000000) == 0) {
      goto LABEL_7;
    }
  }
  else if ((SHIBYTE(a28) & 0x80000000) == 0)
  {
    goto LABEL_7;
  }
  operator delete((void *)a27);
LABEL_7:

  __cxa_begin_catch(a1);
  sub_1B4BB8DC0(&__p, "Failed to load decoder network");
  espresso_plan_get_error_info();
  int v31 = std::string::append((std::string *)&__p, v30);
  long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
  a28 = v31->__r_.__value_.__r.__words[2];
  a27 = v32;
  v31->__r_.__value_.__l.__size_ = 0;
  v31->__r_.__value_.__r.__words[2] = 0;
  v31->__r_.__value_.__r.__words[0] = 0;
  if (a26 < 0) {
    operator delete(__p);
  }
  if (a28 >= 0) {
    long double v33 = &a27;
  }
  else {
    long double v33 = (long long *)a27;
  }
  sub_1B4C53070(3u, (uint64_t)v33);
}

void sub_1B4C5B3D8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  __cxa_end_catch();
  JUMPOUT(0x1B4C5A7ECLL);
}

void sub_1B4C5B3F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1B4C5B40C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a29 < 0) {
    operator delete(__p);
  }
  __cxa_end_catch();

  _Unwind_Resume(a1);
}

void sub_1B4C5DFD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *__p,uint64_t a54,int a55,__int16 a56,char a57,char a58,uint64_t a59,void *a60,uint64_t a61,uint64_t a62,void *a63)
{
  if (a58 < 0)
  {
    operator delete(__p);
    uint64_t v76 = *(void **)(v74 - 152);
    if (v76) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v76 = *(void **)(v74 - 152);
    if (v76)
    {
LABEL_3:
      *(void *)(v74 - 144) = v76;
      operator delete(v76);
      long long v77 = a12;
      if (a12) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  long long v77 = a12;
  if (a12)
  {
LABEL_4:
    operator delete(v77);
    uint64_t v78 = *(void **)(v74 - 128);
    if (!v78)
    {
LABEL_10:
      if (a60)
      {
        operator delete(a60);
        uint64_t v79 = a63;
        if (!a63)
        {
LABEL_12:
          sub_1B4BF9508(&a66);
          unint64_t v80 = a69;
          if (!a69) {
            goto LABEL_13;
          }
          goto LABEL_18;
        }
      }
      else
      {
        uint64_t v79 = a63;
        if (!a63) {
          goto LABEL_12;
        }
      }
      operator delete(v79);
      sub_1B4BF9508(&a66);
      unint64_t v80 = a69;
      if (!a69)
      {
LABEL_13:
        uint64_t v81 = a72;
        if (!a72) {
          goto LABEL_15;
        }
        goto LABEL_14;
      }
LABEL_18:
      a70 = (uint64_t)v80;
      operator delete(v80);
      uint64_t v81 = a72;
      if (!a72)
      {
LABEL_15:

        _Unwind_Resume(a1);
      }
LABEL_14:
      a73 = (uint64_t)v81;
      operator delete(v81);
      goto LABEL_15;
    }
LABEL_9:
    operator delete(v78);
    goto LABEL_10;
  }
LABEL_8:
  uint64_t v78 = *(void **)(v74 - 128);
  if (!v78) {
    goto LABEL_10;
  }
  goto LABEL_9;
}

void sub_1B4C5F7A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  _Unwind_Resume(a1);
}

void sub_1B4C602EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if ((*(char *)(v29 - 89) & 0x80000000) == 0)
  {

    _Unwind_Resume(a1);
  }
  operator delete(*(void **)(v29 - 112));

  _Unwind_Resume(a1);
}

void sub_1B4C60538(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  _Unwind_Resume(a1);
}

void sub_1B4C60554(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1B4C60568(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_1B4C60578(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend__runBlockWithCopyOutputBlock_(*(void **)(a1 + 32), a2, *(void *)(a1 + 40), a4);
}

void sub_1B4C60640(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1B4C60650(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void **)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 48);
  if (!v5)
  {
    uint64_t v13 = 0;
    memset(v12, 0, sizeof(v12));
    objc_msgSend__copy_data_to_blob_to_(0, a2, v6, (uint64_t)v12);
    uint64_t v10 = *(void *)(a1 + 48);
    if (!v10) {
      return objc_msgSend__runBlockWithCopyOutputBlock_(*(void **)(a1 + 32), v8, *(void *)(a1 + 40), v9);
    }
    goto LABEL_3;
  }
  objc_msgSend_blockInput(*(void **)(a1 + 32), a2, a3, a4);
  objc_msgSend__copy_data_to_blob_to_(v5, v7, v6, (uint64_t)v12);
  uint64_t v10 = *(void *)(a1 + 48);
  if (v10) {
LABEL_3:
  }
    MEMORY[0x1BA992990](v10, 0x1000C8052888210);
  return objc_msgSend__runBlockWithCopyOutputBlock_(*(void **)(a1 + 32), v8, *(void *)(a1 + 40), v9);
}

void sub_1B4C60870(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C60884(void *a1)
{
  __cxa_begin_catch(a1);
  sub_1B4BB8DC0((void *)(v4 - 136), "Failed to execute decoder network");
  objc_msgSend_decoderPlan(v1, v6, v7, v8);
  espresso_plan_get_error_info();
  uint64_t v10 = std::string::append((std::string *)(v4 - 136), v9);
  long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  *(void *)(v4 - 96) = *((void *)&v10->__r_.__value_.__l + 2);
  *(_OWORD *)(v4 - 112) = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if (*(char *)(v4 - 113) < 0) {
    operator delete(*(void **)(v4 - 136));
  }
  if (*(char *)(v4 - 89) >= 0) {
    uint64_t v12 = v4 - 112;
  }
  else {
    uint64_t v12 = *(void *)(v4 - 112);
  }
  sub_1B4C53070(5u, v12);
}

void sub_1B4C60910()
{
  if (*(char *)(v0 - 89) < 0) {
    operator delete(*(void **)(v0 - 112));
  }
  __cxa_end_catch();
  JUMPOUT(0x1B4C607ACLL);
}

void sub_1B4C60928(_Unwind_Exception *a1)
{
  if (*(char *)(v2 - 89) < 0) {
    operator delete(*(void **)(v2 - 112));
  }
  __cxa_end_catch();

  _Unwind_Resume(a1);
}

uint64_t sub_1B4C6097C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  objc_msgSend_decoderPlan(*(void **)(a1 + 32), a2, a3, a4);
  uint64_t result = espresso_plan_execute_sync();
  if (result)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    espresso_plan_get_error_info();
    std::runtime_error::runtime_error(exception, v6);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  return result;
}

void sub_1B4C609F8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1B4C60E64(_Unwind_Exception *a1)
{
  sub_1B4C59808(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_1B4C60F3C(_Unwind_Exception *a1)
{
  sub_1B4C59808(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_1B4C61200(_Unwind_Exception *a1)
{
  operator delete(v2);
  sub_1B4C62544(*v1);
  _Unwind_Resume(a1);
}

void sub_1B4C61220(_Unwind_Exception *a1)
{
  sub_1B4C62544(v1);
  _Unwind_Resume(a1);
}

void sub_1B4C61648(_Unwind_Exception *a1)
{
  sub_1B4C62544(v2);
  if (v1)
  {
    for (uint64_t i = *(void *)(v1 + 16); i; uint64_t i = *(void *)(i + 16))
      uint64_t v1 = i;
    sub_1B4C62544((char *)v1);
  }
  _Unwind_Resume(a1);
}

void sub_1B4C6167C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1B4C618EC(void *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_1B4BCA11C(__dst, *(void **)a2, *((void *)a2 + 1));
    __dst[3] = 0;
    __dst[4] = 0;
    __dst[5] = 0;
    uint64_t v6 = (unsigned char *)*((void *)a2 + 3);
    uint64_t v9 = (unsigned char *)*((void *)a2 + 4);
    int64_t v7 = v9 - v6;
    if (v9 == v6) {
      return __dst;
    }
  }
  else
  {
    long long v4 = *a2;
    __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)long long __dst = v4;
    __dst[3] = 0;
    __dst[4] = 0;
    __dst[5] = 0;
    uint64_t v6 = (unsigned char *)*((void *)a2 + 3);
    uint64_t v5 = (unsigned char *)*((void *)a2 + 4);
    int64_t v7 = v5 - v6;
    if (v5 == v6) {
      return __dst;
    }
  }
  if (v7 < 0) {
    sub_1B4BB3244();
  }
  uint64_t v10 = (char *)operator new(v7);
  __dst[3] = v10;
  __dst[4] = v10;
  long long v11 = &v10[4 * (v7 >> 2)];
  __dst[5] = v11;
  memcpy(v10, v6, v7);
  __dst[4] = v11;
  return __dst;
}

void sub_1B4C619BC(_Unwind_Exception *exception_object)
{
  long long v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 32) = v4;
    operator delete(v4);
    if ((*(char *)(v1 + 23) & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((*(char *)(v1 + 23) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_1B4C619F8(uint64_t *result, uint64_t a2, const void **a3, long long *a4)
{
  uint64_t v6 = (uint64_t **)a2;
  int64_t v7 = result;
  uint64_t v8 = (uint64_t **)(result + 1);
  if (result + 1 != (uint64_t *)a2)
  {
    int v9 = *(char *)(a2 + 55);
    int v10 = *((char *)a3 + 23);
    if (v10 >= 0) {
      size_t v11 = *((unsigned __int8 *)a3 + 23);
    }
    else {
      size_t v11 = (size_t)a3[1];
    }
    if (v10 >= 0) {
      uint64_t v12 = a3;
    }
    else {
      uint64_t v12 = *a3;
    }
    if (v9 >= 0) {
      size_t v13 = *(unsigned __int8 *)(a2 + 55);
    }
    else {
      size_t v13 = *(void *)(a2 + 40);
    }
    if (v9 >= 0) {
      CFNumberType v14 = (const void *)(a2 + 32);
    }
    else {
      CFNumberType v14 = *(const void **)(a2 + 32);
    }
    if (v13 >= v11) {
      size_t v15 = v11;
    }
    else {
      size_t v15 = v13;
    }
    uint64_t result = (uint64_t *)memcmp(v12, v14, v15);
    BOOL v16 = v11 < v13;
    if (result) {
      BOOL v16 = (int)result < 0;
    }
    if (!v16)
    {
      uint64_t result = (uint64_t *)memcmp(v14, v12, v15);
      BOOL v20 = v13 < v11;
      if (result) {
        BOOL v20 = (int)result < 0;
      }
      if (v20)
      {
        int64_t v22 = v6 + 1;
        uint64_t v21 = v6[1];
        if (v21)
        {
          do
          {
            int64_t v22 = (uint64_t **)v21;
            uint64_t v21 = (uint64_t *)*v21;
            uint64_t v6 = v22;
            unint64_t v23 = v22;
          }
          while (v21);
        }
        else
        {
          unint64_t v23 = v6;
          do
          {
            uint64_t v46 = (uint64_t *)v23;
            unint64_t v23 = (uint64_t **)v23[2];
          }
          while (*v23 != v46);
        }
        if (v23 == v8) {
          goto LABEL_96;
        }
        double v49 = v23[4];
        uint64_t v47 = (uint64_t *)(v23 + 4);
        uint64_t v48 = v49;
        int v50 = *((char *)v47 + 23);
        if (v50 >= 0) {
          size_t v51 = *((unsigned __int8 *)v47 + 23);
        }
        else {
          size_t v51 = v47[1];
        }
        if (v50 >= 0) {
          uint64_t v52 = v47;
        }
        else {
          uint64_t v52 = v48;
        }
        if (v51 >= v11) {
          size_t v53 = v11;
        }
        else {
          size_t v53 = v51;
        }
        int v54 = memcmp(v12, v52, v53);
        BOOL v55 = v11 < v51;
        if (v54) {
          BOOL v55 = v54 < 0;
        }
        if (v55) {
          goto LABEL_96;
        }
        uint64_t v56 = *v8;
        int64_t v22 = v8;
        uint64_t v6 = v8;
        if (!*v8) {
          goto LABEL_96;
        }
        while (1)
        {
          while (1)
          {
            uint64_t v6 = (uint64_t **)v56;
            double v61 = (const void *)v56[4];
            uint64_t v59 = v56 + 4;
            uint64_t v60 = v61;
            int v62 = *((char *)v59 + 23);
            if (v62 >= 0) {
              size_t v63 = *((unsigned __int8 *)v59 + 23);
            }
            else {
              size_t v63 = v59[1];
            }
            if (v62 >= 0) {
              unint64_t v64 = v59;
            }
            else {
              unint64_t v64 = v60;
            }
            if (v63 >= v11) {
              size_t v65 = v11;
            }
            else {
              size_t v65 = v63;
            }
            int v66 = memcmp(v12, v64, v65);
            BOOL v67 = v11 < v63;
            if (v66) {
              BOOL v67 = v66 < 0;
            }
            if (!v67) {
              break;
            }
            uint64_t v56 = *v6;
            int64_t v22 = v6;
            if (!*v6) {
              goto LABEL_96;
            }
          }
          uint64_t result = (uint64_t *)memcmp(v64, v12, v65);
          BOOL v68 = v63 < v11;
          if (result) {
            BOOL v68 = (int)result < 0;
          }
          if (!v68) {
            break;
          }
          uint64_t v56 = v6[1];
          if (!v56)
          {
LABEL_79:
            int64_t v22 = v6 + 1;
            goto LABEL_96;
          }
        }
      }
      return result;
    }
  }
  unsigned __int8 v17 = *v6;
  if ((uint64_t **)*v7 == v6)
  {
    int v19 = v6;
  }
  else
  {
    if (v17)
    {
      int v18 = *v6;
      do
      {
        int v19 = (uint64_t **)v18;
        int v18 = (uint64_t *)v18[1];
      }
      while (v18);
    }
    else
    {
      uint64_t v24 = v6;
      do
      {
        int v19 = (uint64_t **)v24[2];
        BOOL v25 = *v19 == (uint64_t *)v24;
        uint64_t v24 = v19;
      }
      while (v25);
    }
    int v26 = *((char *)a3 + 23);
    int v27 = *((char *)v19 + 55);
    if (v27 >= 0) {
      size_t v28 = *((unsigned __int8 *)v19 + 55);
    }
    else {
      size_t v28 = (size_t)v19[5];
    }
    if (v27 >= 0) {
      uint64_t v29 = (uint64_t *)(v19 + 4);
    }
    else {
      uint64_t v29 = v19[4];
    }
    if (v26 >= 0) {
      size_t v30 = *((unsigned __int8 *)a3 + 23);
    }
    else {
      size_t v30 = (size_t)a3[1];
    }
    if (v26 >= 0) {
      int v31 = a3;
    }
    else {
      int v31 = *a3;
    }
    if (v30 >= v28) {
      size_t v32 = v28;
    }
    else {
      size_t v32 = v30;
    }
    uint64_t result = (uint64_t *)memcmp(v29, v31, v32);
    BOOL v33 = v28 < v30;
    if (result) {
      BOOL v33 = (int)result < 0;
    }
    if (!v33)
    {
      CFTypeRef v35 = *v8;
      int64_t v22 = v8;
      uint64_t v6 = v8;
      if (!*v8) {
        goto LABEL_96;
      }
      while (1)
      {
        while (1)
        {
          uint64_t v6 = (uint64_t **)v35;
          long long v38 = (const void *)v35[4];
          long long v36 = v35 + 4;
          uint64_t v37 = v38;
          int v39 = *((char *)v36 + 23);
          if (v39 >= 0) {
            size_t v40 = *((unsigned __int8 *)v36 + 23);
          }
          else {
            size_t v40 = v36[1];
          }
          if (v39 >= 0) {
            double v41 = v36;
          }
          else {
            double v41 = v37;
          }
          if (v40 >= v30) {
            size_t v42 = v30;
          }
          else {
            size_t v42 = v40;
          }
          int v43 = memcmp(v31, v41, v42);
          BOOL v44 = v30 < v40;
          if (v43) {
            BOOL v44 = v43 < 0;
          }
          if (!v44) {
            break;
          }
          CFTypeRef v35 = *v6;
          int64_t v22 = v6;
          if (!*v6) {
            goto LABEL_96;
          }
        }
        uint64_t result = (uint64_t *)memcmp(v41, v31, v42);
        BOOL v45 = v40 < v30;
        if (result) {
          BOOL v45 = (int)result < 0;
        }
        if (!v45) {
          return result;
        }
        CFTypeRef v35 = v6[1];
        if (!v35) {
          goto LABEL_79;
        }
      }
    }
  }
  if (v17) {
    uint64_t v34 = v19;
  }
  else {
    uint64_t v34 = v6;
  }
  if (v17) {
    int64_t v22 = v19 + 1;
  }
  else {
    int64_t v22 = v6;
  }
  if (!*v22)
  {
    uint64_t v6 = v34;
LABEL_96:
    uint64_t v57 = (uint64_t *)operator new(0x50uLL);
    sub_1B4C618EC(v57 + 4, a4);
    uint64_t *v57 = 0;
    v57[1] = 0;
    v57[2] = (uint64_t)v6;
    *int64_t v22 = v57;
    uint64_t v58 = *(void *)*v7;
    if (v58)
    {
      uint64_t *v7 = v58;
      uint64_t v57 = *v22;
    }
    uint64_t result = sub_1B4BB3DA4((uint64_t *)v7[1], v57);
    ++v7[2];
  }
  return result;
}

void sub_1B4C61DE0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_1B4C61DF4(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((unsigned char *)a1 + 16))
    {
      CFNumberType v3 = *(void **)(v2 + 56);
      if (v3)
      {
        *(void *)(v2 + 64) = v3;
        operator delete(v3);
      }
      if (*(char *)(v2 + 55) < 0) {
        operator delete(*(void **)(v2 + 32));
      }
    }
    operator delete((void *)v2);
  }
  return a1;
}

void sub_1B4C61E54(uint64_t a1, long long *a2, long long *a3)
{
  CFNumberType v3 = a3;
  long long v4 = a2;
  if (!*(void *)(a1 + 16)) {
    goto LABEL_81;
  }
  uint64_t v6 = *(uint64_t **)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = a1 + 8;
  *(void *)(v7 + 16) = 0;
  uint64_t v74 = (uint64_t **)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  uint64_t v8 = v6[1] ? (char *)v6[1] : (char *)v6;
  long long v77 = (uint64_t *)v8;
  if (!v8) {
    goto LABEL_81;
  }
  int v9 = (char *)*((void *)v8 + 2);
  if (v9)
  {
    int v10 = *(char **)v9;
    if (*(char **)v9 == v8)
    {
      *(void *)int v9 = 0;
      while (1)
      {
        uint64_t v73 = (char *)*((void *)v9 + 1);
        if (!v73) {
          break;
        }
        do
        {
          int v9 = v73;
          uint64_t v73 = *(char **)v73;
        }
        while (v73);
      }
    }
    else
    {
      for (*((void *)v9 + 1) = 0; v10; int v10 = (char *)*((void *)v9 + 1))
      {
        do
        {
          int v9 = v10;
          int v10 = *(char **)v10;
        }
        while (v10);
      }
    }
  }
  uint64_t v76 = v9;
  if (a2 == a3)
  {
    uint64_t v50 = a1;
    sub_1B4C59808(a1, v8);
    if (v9) {
      goto LABEL_116;
    }
LABEL_81:
    if (v4 == v3) {
      return;
    }
    goto LABEL_82;
  }
  size_t v11 = a2;
  do
  {
    uint64_t v12 = v3;
    std::string::operator=((std::string *)(v8 + 32), (const std::string *)(v11 + 2));
    if (v8 == (char *)v11) {
      goto LABEL_35;
    }
    size_t v13 = (char *)*((void *)v8 + 7);
    CFNumberType v14 = (char *)*((void *)v11 + 7);
    size_t v15 = (unsigned char *)*((void *)v11 + 8);
    size_t v16 = v15 - v14;
    unint64_t v17 = (v15 - v14) >> 2;
    uint64_t v18 = *((void *)v8 + 9);
    if (v17 > (v18 - (uint64_t)v13) >> 2)
    {
      if (v13)
      {
        *((void *)v8 + 8) = v13;
        operator delete(v13);
        uint64_t v18 = 0;
        *((void *)v8 + 7) = 0;
        *((void *)v8 + 8) = 0;
        *((void *)v8 + 9) = 0;
      }
      if ((v16 & 0x8000000000000000) != 0) {
        goto LABEL_124;
      }
      uint64_t v19 = v18 >> 1;
      if (v18 >> 1 <= v17) {
        uint64_t v19 = (v15 - v14) >> 2;
      }
      unint64_t v20 = (unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v19;
      if (v20 >> 62) {
LABEL_124:
      }
        sub_1B4BB3244();
      uint64_t v21 = (char *)operator new(4 * v20);
      size_t v13 = v21;
      *((void *)v8 + 8) = v21;
      int64_t v22 = (char **)(v8 + 64);
      *(v22 - 1) = v21;
      v22[1] = &v21[4 * v20];
      if (v15 != v14) {
        memcpy(v21, v14, v15 - v14);
      }
      goto LABEL_34;
    }
    uint64_t v24 = (char *)*((void *)v8 + 8);
    int64_t v22 = (char **)(v8 + 64);
    unint64_t v23 = v24;
    size_t v25 = v24 - v13;
    unint64_t v26 = (v24 - v13) >> 2;
    if (v26 < v17)
    {
      if (v23 != v13)
      {
        memmove(v13, *((const void **)v11 + 7), v25);
        size_t v13 = *v22;
      }
      int v27 = &v14[4 * v26];
      size_t v16 = v15 - v27;
      if (v15 == v27) {
        goto LABEL_34;
      }
      size_t v28 = v13;
      goto LABEL_33;
    }
    if (v15 != v14)
    {
      size_t v28 = v13;
      int v27 = (char *)*((void *)v11 + 7);
LABEL_33:
      memmove(v28, v27, v16);
    }
LABEL_34:
    *int64_t v22 = &v13[v16];
LABEL_35:
    uint64_t v29 = v77;
    size_t v30 = v74;
    int v31 = *v74;
    size_t v32 = v74;
    if (!*v74)
    {
LABEL_56:
      uint64_t *v77 = 0;
      v77[1] = 0;
      v77[2] = (uint64_t)v32;
      const std::string::value_type *v30 = v77;
      uint64_t v45 = **(void **)a1;
      if (!v45) {
        goto LABEL_58;
      }
LABEL_57:
      *(void *)a1 = v45;
      uint64_t v29 = *v30;
      goto LABEL_58;
    }
    int v33 = *((char *)v77 + 55);
    if (v33 >= 0) {
      size_t v34 = *((unsigned __int8 *)v77 + 55);
    }
    else {
      size_t v34 = v77[5];
    }
    if (v33 >= 0) {
      CFTypeRef v35 = v77 + 4;
    }
    else {
      CFTypeRef v35 = (const void *)v77[4];
    }
    do
    {
      while (1)
      {
        size_t v32 = (uint64_t **)v31;
        long long v38 = (const void *)v31[4];
        long long v36 = v31 + 4;
        uint64_t v37 = v38;
        int v39 = *((char *)v36 + 23);
        if (v39 >= 0) {
          size_t v40 = *((unsigned __int8 *)v36 + 23);
        }
        else {
          size_t v40 = v36[1];
        }
        if (v39 >= 0) {
          double v41 = v36;
        }
        else {
          double v41 = v37;
        }
        if (v40 >= v34) {
          size_t v42 = v34;
        }
        else {
          size_t v42 = v40;
        }
        int v43 = memcmp(v35, v41, v42);
        BOOL v44 = v34 < v40;
        if (v43) {
          BOOL v44 = v43 < 0;
        }
        if (!v44) {
          break;
        }
        int v31 = *v32;
        size_t v30 = v32;
        if (!*v32) {
          goto LABEL_56;
        }
      }
      int v31 = v32[1];
    }
    while (v31);
    size_t v30 = v32 + 1;
    uint64_t *v77 = 0;
    v77[1] = 0;
    v77[2] = (uint64_t)v32;
    v32[1] = v77;
    uint64_t v45 = **(void **)a1;
    if (v45) {
      goto LABEL_57;
    }
LABEL_58:
    sub_1B4BB3DA4(*(uint64_t **)(a1 + 8), v29);
    ++*(void *)(a1 + 16);
    uint64_t v8 = v76;
    long long v77 = (uint64_t *)v76;
    CFNumberType v3 = v12;
    if (v76)
    {
      int v9 = (char *)*((void *)v76 + 2);
      if (v9)
      {
        uint64_t v46 = *(char **)v9;
        if (*(char **)v9 == v76)
        {
          *(void *)int v9 = 0;
          while (1)
          {
            double v49 = (char *)*((void *)v9 + 1);
            if (!v49) {
              break;
            }
            do
            {
              int v9 = v49;
              double v49 = *(char **)v49;
            }
            while (v49);
          }
        }
        else
        {
          for (*((void *)v9 + 1) = 0; v46; uint64_t v46 = (char *)*((void *)v9 + 1))
          {
            do
            {
              int v9 = v46;
              uint64_t v46 = *(char **)v46;
            }
            while (v46);
          }
        }
      }
      uint64_t v76 = v9;
      uint64_t v47 = (long long *)*((void *)v11 + 1);
      if (!v47)
      {
        do
        {
LABEL_69:
          long long v4 = (long long *)*((void *)v11 + 2);
          BOOL v48 = *(void *)v4 == (void)v11;
          size_t v11 = v4;
        }
        while (!v48);
        goto LABEL_71;
      }
    }
    else
    {
      int v9 = 0;
      uint64_t v47 = (long long *)*((void *)v11 + 1);
      if (!v47) {
        goto LABEL_69;
      }
    }
    do
    {
      long long v4 = v47;
      uint64_t v47 = *(long long **)v47;
    }
    while (v47);
LABEL_71:
    if (!v8) {
      break;
    }
    size_t v11 = v4;
  }
  while (v4 != v12);
  uint64_t v50 = a1;
  sub_1B4C59808(a1, v8);
  if (!v9) {
    goto LABEL_81;
  }
LABEL_116:
  for (uint64_t i = (char *)*((void *)v9 + 2); i; uint64_t i = (char *)*((void *)i + 2))
    int v9 = i;
  sub_1B4C59808(v50, v9);
  if (v4 != v3)
  {
LABEL_82:
    size_t v51 = (uint64_t **)(a1 + 8);
    while (1)
    {
      uint64_t v52 = (uint64_t *)operator new(0x50uLL);
      size_t v53 = sub_1B4C618EC(v52 + 4, v4 + 2);
      int v54 = *v51;
      BOOL v55 = (uint64_t **)(a1 + 8);
      uint64_t v56 = (uint64_t **)(a1 + 8);
      if (*v51) {
        break;
      }
LABEL_105:
      *uint64_t v52 = 0;
      v52[1] = 0;
      v52[2] = (uint64_t)v55;
      *uint64_t v56 = v52;
      uint64_t v69 = **(void **)a1;
      if (v69) {
        goto LABEL_106;
      }
LABEL_107:
      sub_1B4BB3DA4(*(uint64_t **)(a1 + 8), v52);
      ++*(void *)(a1 + 16);
      unint64_t v70 = (long long *)*((void *)v4 + 1);
      if (v70)
      {
        do
        {
          int v71 = v70;
          unint64_t v70 = *(long long **)v70;
        }
        while (v70);
      }
      else
      {
        do
        {
          int v71 = (long long *)*((void *)v4 + 2);
          BOOL v48 = *(void *)v71 == (void)v4;
          long long v4 = v71;
        }
        while (!v48);
      }
      long long v4 = v71;
      if (v71 == v3) {
        return;
      }
    }
    int v57 = *((char *)v52 + 55);
    if (v57 >= 0) {
      size_t v58 = *((unsigned __int8 *)v52 + 55);
    }
    else {
      size_t v58 = v52[5];
    }
    if (v57 >= 0) {
      uint64_t v59 = v53;
    }
    else {
      uint64_t v59 = (const void *)v52[4];
    }
    do
    {
      while (1)
      {
        BOOL v55 = (uint64_t **)v54;
        int v62 = (const void *)v54[4];
        uint64_t v60 = v54 + 4;
        double v61 = v62;
        int v63 = *((char *)v60 + 23);
        if (v63 >= 0) {
          size_t v64 = *((unsigned __int8 *)v60 + 23);
        }
        else {
          size_t v64 = v60[1];
        }
        if (v63 >= 0) {
          size_t v65 = v60;
        }
        else {
          size_t v65 = v61;
        }
        if (v64 >= v58) {
          size_t v66 = v58;
        }
        else {
          size_t v66 = v64;
        }
        int v67 = memcmp(v59, v65, v66);
        BOOL v68 = v58 < v64;
        if (v67) {
          BOOL v68 = v67 < 0;
        }
        if (!v68) {
          break;
        }
        int v54 = *v55;
        uint64_t v56 = v55;
        if (!*v55) {
          goto LABEL_105;
        }
      }
      int v54 = v55[1];
    }
    while (v54);
    uint64_t v56 = v55 + 1;
    *uint64_t v52 = 0;
    v52[1] = 0;
    v52[2] = (uint64_t)v55;
    v55[1] = v52;
    uint64_t v69 = **(void **)a1;
    if (!v69) {
      goto LABEL_107;
    }
LABEL_106:
    *(void *)a1 = v69;
    uint64_t v52 = *v56;
    goto LABEL_107;
  }
}

void sub_1B4C623A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1B4C623E0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1B4C623B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1B4C623E0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1B4C623CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1B4C61DF4((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B4C623E0(uint64_t a1)
{
  sub_1B4C59808(*(void *)a1, *(char **)(a1 + 16));
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 16);
    if (v3)
    {
      do
      {
        uint64_t v2 = v3;
        uint64_t v3 = *(void *)(v3 + 16);
      }
      while (v3);
      *(void *)(a1 + 8) = v2;
    }
    sub_1B4C59808(*(void *)a1, (char *)v2);
  }
  return a1;
}

void *sub_1B4C62438(void *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_1B4BCA11C(__dst, *(void **)a2, *((void *)a2 + 1));
    __dst[3] = 0;
    __dst[4] = 0;
    __dst[5] = 0;
    uint64_t v6 = (unsigned char *)*((void *)a2 + 3);
    int v9 = (unsigned char *)*((void *)a2 + 4);
    int64_t v7 = v9 - v6;
    if (v9 == v6) {
      return __dst;
    }
  }
  else
  {
    long long v4 = *a2;
    __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)long long __dst = v4;
    __dst[3] = 0;
    __dst[4] = 0;
    __dst[5] = 0;
    uint64_t v6 = (unsigned char *)*((void *)a2 + 3);
    uint64_t v5 = (unsigned char *)*((void *)a2 + 4);
    int64_t v7 = v5 - v6;
    if (v5 == v6) {
      return __dst;
    }
  }
  if (v7 < 0) {
    sub_1B4BB3244();
  }
  int v10 = (char *)operator new(v7);
  __dst[3] = v10;
  __dst[4] = v10;
  size_t v11 = &v10[8 * (v7 >> 3)];
  __dst[5] = v11;
  memcpy(v10, v6, v7);
  __dst[4] = v11;
  return __dst;
}

void sub_1B4C62508(_Unwind_Exception *exception_object)
{
  long long v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 32) = v4;
    operator delete(v4);
    if ((*(char *)(v1 + 23) & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((*(char *)(v1 + 23) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_1B4C62544(char *a1)
{
  if (a1)
  {
    sub_1B4C62544(*(void *)a1);
    sub_1B4C62544(*((void *)a1 + 1));
    uint64_t v2 = (void *)*((void *)a1 + 7);
    if (v2)
    {
      *((void *)a1 + 8) = v2;
      operator delete(v2);
    }
    if (a1[55] < 0)
    {
      operator delete(*((void **)a1 + 4));
      uint64_t v3 = a1;
    }
    else
    {
      uint64_t v3 = a1;
    }
    operator delete(v3);
  }
}

uint64_t *sub_1B4C625D0(uint64_t **a1, const void **a2, uint64_t a3)
{
  uint64_t v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    int v7 = *((char *)a2 + 23);
    if (v7 >= 0) {
      size_t v8 = *((unsigned __int8 *)a2 + 23);
    }
    else {
      size_t v8 = (size_t)a2[1];
    }
    if (v7 >= 0) {
      int v9 = a2;
    }
    else {
      int v9 = *a2;
    }
    do
    {
      while (1)
      {
        int v10 = (uint64_t **)v5;
        size_t v13 = (const void *)v5[4];
        size_t v11 = v5 + 4;
        uint64_t v12 = v13;
        int v14 = *((char *)v11 + 23);
        if (v14 >= 0) {
          size_t v15 = *((unsigned __int8 *)v11 + 23);
        }
        else {
          size_t v15 = v11[1];
        }
        if (v14 >= 0) {
          size_t v16 = v11;
        }
        else {
          size_t v16 = v12;
        }
        if (v15 >= v8) {
          size_t v17 = v8;
        }
        else {
          size_t v17 = v15;
        }
        int v18 = memcmp(v9, v16, v17);
        BOOL v19 = v8 < v15;
        if (v18) {
          BOOL v19 = v18 < 0;
        }
        if (!v19) {
          break;
        }
        uint64_t v5 = *v10;
        uint64_t v6 = v10;
        if (!*v10) {
          goto LABEL_26;
        }
      }
      int v20 = memcmp(v16, v9, v17);
      BOOL v21 = v15 < v8;
      if (v20) {
        BOOL v21 = v20 < 0;
      }
      if (!v21) {
        return (uint64_t *)v10;
      }
      uint64_t v5 = v10[1];
    }
    while (v5);
    uint64_t v6 = v10 + 1;
LABEL_26:
    int64_t v22 = (uint64_t *)operator new(0x50uLL);
    unint64_t v23 = v22 + 4;
    if (*(char *)(a3 + 23) < 0) {
      goto LABEL_29;
    }
  }
  else
  {
    int v10 = a1 + 1;
    int64_t v22 = (uint64_t *)operator new(0x50uLL);
    unint64_t v23 = v22 + 4;
    if (*(char *)(a3 + 23) < 0)
    {
LABEL_29:
      sub_1B4BCA11C(v23, *(void **)a3, *(void *)(a3 + 8));
      goto LABEL_30;
    }
  }
  *(_OWORD *)unint64_t v23 = *(_OWORD *)a3;
  v23[2] = *(void *)(a3 + 16);
LABEL_30:
  v22[7] = 0;
  v22[8] = 0;
  v22[9] = 0;
  *int64_t v22 = 0;
  v22[1] = 0;
  v22[2] = (uint64_t)v10;
  unsigned char *v6 = v22;
  uint64_t v24 = (uint64_t *)**a1;
  size_t v25 = v22;
  if (v24)
  {
    *a1 = v24;
    size_t v25 = *v6;
  }
  sub_1B4BB3DA4(a1[1], v25);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return v22;
}

void sub_1B4C62768(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B4C6277C(uint64_t a1, int a2)
{
  __p[23] = 9;
  strcpy(__p, "vocab.txt");
  sub_1B4C03298(a1, __p, &v15);
  BOOL v4 = sub_1B4BF99F0((uint64_t)&v15);
  if (SHIBYTE(v17) < 0)
  {
    operator delete((void *)v16);
    if ((__p[23] & 0x80000000) == 0)
    {
LABEL_3:
      if (v4) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((__p[23] & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)__p);
  if (v4)
  {
LABEL_4:
    __p[23] = 9;
    strcpy(__p, "vocab.txt");
    sub_1B4C03298(a1, __p, &v15);
    if ((SHIBYTE(v17) & 0x80000000) == 0)
    {
      *(_OWORD *)long long __dst = v16;
      uint64_t v12 = v17;
      if ((__p[23] & 0x80000000) == 0) {
        goto LABEL_17;
      }
      goto LABEL_6;
    }
    sub_1B4BCA11C(__dst, (void *)v16, *((unint64_t *)&v16 + 1));
    if (SHIBYTE(v17) < 0)
    {
      operator delete((void *)v16);
      if ((__p[23] & 0x80000000) == 0)
      {
LABEL_17:
        __p[23] = 15;
        strcpy(__p, "special_map.txt");
        sub_1B4C03298(a1, __p, &v15);
        BOOL v6 = sub_1B4BF99F0((uint64_t)&v15);
        BOOL v7 = v6;
        if (SHIBYTE(v17) < 0)
        {
          operator delete((void *)v16);
          if (v7)
          {
LABEL_19:
            HIBYTE(v14[2]) = 15;
            strcpy((char *)v14, "special_map.txt");
            sub_1B4C03298(a1, (char *)v14, &v15);
            if ((SHIBYTE(v17) & 0x80000000) == 0)
            {
              *(_OWORD *)int v9 = v16;
              uint64_t v10 = v17;
              if (SHIBYTE(v14[2]) < 0) {
                goto LABEL_21;
              }
LABEL_35:
              if ((__p[23] & 0x80000000) != 0) {
                goto LABEL_28;
              }
              goto LABEL_36;
            }
            sub_1B4BCA11C(v9, (void *)v16, *((unint64_t *)&v16 + 1));
            if (SHIBYTE(v17) < 0)
            {
              operator delete((void *)v16);
              if ((SHIBYTE(v14[2]) & 0x80000000) == 0) {
                goto LABEL_35;
              }
            }
            else if ((SHIBYTE(v14[2]) & 0x80000000) == 0)
            {
              goto LABEL_35;
            }
LABEL_21:
            operator delete(v14[0]);
            if ((__p[23] & 0x80000000) != 0)
            {
LABEL_28:
              operator delete(*(void **)__p);
              if (a2 == 2) {
                goto LABEL_29;
              }
              goto LABEL_37;
            }
LABEL_36:
            if (a2 == 2) {
LABEL_29:
            }
              operator new();
LABEL_37:
            if (a2 == 1) {
              operator new();
            }
            operator new();
          }
        }
        else if (v6)
        {
          goto LABEL_19;
        }
        HIBYTE(v10) = 0;
        LOBYTE(v9[0]) = 0;
        if ((__p[23] & 0x80000000) != 0) {
          goto LABEL_28;
        }
        goto LABEL_36;
      }
    }
    else if ((__p[23] & 0x80000000) == 0)
    {
      goto LABEL_17;
    }
LABEL_6:
    operator delete(*(void **)__p);
    goto LABEL_17;
  }
LABEL_9:
  __p[23] = 19;
  strcpy(__p, "sentencepiece.model");
  sub_1B4C03298(a1, __p, &v15);
  BOOL v5 = sub_1B4BF99F0((uint64_t)&v15);
  if (SHIBYTE(v17) < 0)
  {
    operator delete((void *)v16);
    if ((__p[23] & 0x80000000) == 0)
    {
LABEL_11:
      if (v5) {
        goto LABEL_12;
      }
      goto LABEL_25;
    }
  }
  else if ((__p[23] & 0x80000000) == 0)
  {
    goto LABEL_11;
  }
  operator delete(*(void **)__p);
  if (v5)
  {
LABEL_12:
    HIBYTE(v14[2]) = 19;
    strcpy((char *)v14, "sentencepiece.model");
    sub_1B4C03298(a1, (char *)v14, &v15);
    if ((SHIBYTE(v17) & 0x80000000) == 0)
    {
      *(_OWORD *)std::string __p = v16;
      *(void *)&__p[16] = v17;
      if ((SHIBYTE(v14[2]) & 0x80000000) == 0) {
        goto LABEL_32;
      }
      goto LABEL_14;
    }
    sub_1B4BCA11C(__p, (void *)v16, *((unint64_t *)&v16 + 1));
    if (SHIBYTE(v17) < 0)
    {
      operator delete((void *)v16);
      if ((SHIBYTE(v14[2]) & 0x80000000) == 0) {
LABEL_32:
      }
        operator new();
    }
    else if ((SHIBYTE(v14[2]) & 0x80000000) == 0)
    {
      goto LABEL_32;
    }
LABEL_14:
    operator delete(v14[0]);
    goto LABEL_32;
  }
LABEL_25:
  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "Unable to find vocab file.");
  __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
}

void sub_1B4C62DB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *__p,void *a33,int a34,__int16 a35,char a36,char a37,int a38,__int16 a39,char a40,char a41)
{
  if (*(char *)(v41 - 65) < 0) {
    operator delete(*(void **)(v41 - 88));
  }
  if (*(char *)(v41 - 105) < 0) {
    operator delete(*(void **)(v41 - 128));
  }
  if (a37 < 0) {
    operator delete(__p);
  }
  if (a23 < 0)
  {
    operator delete(a18);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

double sub_1B4C62FE8(double a1, double a2)
{
  double v2 = fmax(a1, a2);
  double v3 = fmin(a1, a2);
  if (v3 >= -1021.0)
  {
    long double v4 = exp(v3 - v2);
    return log1p(v4) + v2;
  }
  return v2;
}

double sub_1B4C63034(double a1, double a2)
{
  return fmax(a1, a2);
}

void sub_1B4C630A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C63174(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B4C63198(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B4C631B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B4C63274(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1B4C6328C(uint64_t a1, void *a2, void *a3)
{
  id v17 = a2;
  id v5 = a3;
  BOOL v6 = *(void **)(a1 + 32);
  BOOL v7 = NSString;
  objc_msgSend_normalizedTotalLogProbability(v5, v8, v9, v10);
  int v14 = objc_msgSend_stringWithFormat_(v7, v11, @"\t%@ : %.2f\n", v12, v17, v13);
  objc_msgSend_appendString_(v6, v15, (uint64_t)v14, v16);
}

void sub_1B4C6332C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

void sub_1B4C63348(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

void sub_1B4C6343C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1B4C63454(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1B4C63B3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30)
{
  _Block_object_dispose(&a23, 8);
  if (__p)
  {
    a30 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

__n128 sub_1B4C63B90(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void sub_1B4C63BB4(uint64_t a1)
{
  double v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void sub_1B4C63BCC(uint64_t a1, void *a2, void *a3)
{
  id v33 = a2;
  id v5 = a3;
  BOOL v6 = *(void **)(*(void *)(a1 + 32) + 8);
  objc_msgSend_normalizedTotalLogProbability(v5, v7, v8, v9);
  uint64_t v11 = v10;
  uint64_t v13 = (char *)v6[7];
  unint64_t v12 = v6[8];
  if ((unint64_t)v13 < v12)
  {
    *(void *)uint64_t v13 = v10;
    uint64_t v14 = (uint64_t)(v13 + 8);
    goto LABEL_22;
  }
  uint64_t v15 = (char *)v6[6];
  uint64_t v16 = (v13 - v15) >> 3;
  unint64_t v17 = v16 + 1;
  if ((unint64_t)(v16 + 1) >> 61) {
    sub_1B4BB3244();
  }
  uint64_t v18 = v12 - (void)v15;
  if (v18 >> 2 > v17) {
    unint64_t v17 = v18 >> 2;
  }
  if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v19 = v17;
  }
  if (v19)
  {
    if (v19 >> 61) {
      sub_1B4BB2D38();
    }
    int v20 = operator new(8 * v19);
    BOOL v21 = &v20[8 * v16];
    int64_t v22 = &v20[8 * v19];
    *BOOL v21 = v11;
    uint64_t v14 = (uint64_t)(v21 + 1);
    int64_t v23 = v13 - v15;
    if (v13 == v15) {
      goto LABEL_20;
    }
    goto LABEL_14;
  }
  int v20 = 0;
  BOOL v21 = (void *)(8 * v16);
  int64_t v22 = 0;
  *(void *)(8 * v16) = v10;
  uint64_t v14 = 8 * v16 + 8;
  int64_t v23 = v13 - v15;
  if (v13 != v15)
  {
LABEL_14:
    unint64_t v24 = v23 - 8;
    if (v24 < 0x58) {
      goto LABEL_29;
    }
    if ((unint64_t)(v15 - v20) < 0x20) {
      goto LABEL_29;
    }
    uint64_t v25 = (v24 >> 3) + 1;
    uint64_t v26 = 8 * (v25 & 0x3FFFFFFFFFFFFFFCLL);
    int v27 = &v13[-v26];
    BOOL v21 = (void *)((char *)v21 - v26);
    size_t v28 = &v20[8 * v16 - 16];
    uint64_t v29 = v13 - 16;
    uint64_t v30 = v25 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v31 = *(_OWORD *)v29;
      *(v28 - 1) = *((_OWORD *)v29 - 1);
      *size_t v28 = v31;
      v28 -= 2;
      v29 -= 32;
      v30 -= 4;
    }
    while (v30);
    uint64_t v13 = v27;
    if (v25 != (v25 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_29:
      do
      {
        uint64_t v32 = *((void *)v13 - 1);
        v13 -= 8;
        *--BOOL v21 = v32;
      }
      while (v13 != v15);
    }
  }
LABEL_20:
  v6[6] = v21;
  v6[7] = v14;
  void v6[8] = v22;
  if (v15) {
    operator delete(v15);
  }
LABEL_22:
  v6[7] = v14;
}

void sub_1B4C63D90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B4C63DA8(uint64_t a1, uint64_t a2, void *a3)
{
  id v28 = a3;
  objc_msgSend_normalizedTotalLogProbability(v28, v4, v5, v6);
  if (v9 >= *(double *)(a1 + 48))
  {
    objc_msgSend_addPath_(*(void **)(a1 + 32), v7, (uint64_t)v28, v8);
    if (*(unsigned char *)(a1 + 56))
    {
      uint64_t v16 = objc_msgSend_characterLMState(v28, v10, v11, v12);
      if (v16)
      {
        if (objc_msgSend_hasExpanded(v28, v13, v14, v15))
        {
          int v20 = objc_msgSend_latestExpandedSymbol(v28, v17, v18, v19);

          if (v20)
          {
            Copy = (const void *)CVNLPLanguageModelWithStateCreateCopy(v16);
            uint64_t v25 = objc_msgSend_latestExpandedSymbol(v28, v22, v23, v24);
            CVNLPLanguageModelWithStateUpdateWithContext((uint64_t)Copy, v25);

            objc_msgSend_setCharacterLMState_(v28, v26, (uint64_t)Copy, v27);
            CFRelease(Copy);
          }
        }
      }
    }
  }
  else
  {
    objc_msgSend_addPath_(*(void **)(a1 + 40), v7, (uint64_t)v28, v8);
  }
}

void sub_1B4C63E94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B4C63EAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B4C63EC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B4C63ED4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B4C63EE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B4C64114(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1B4C64300(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

uint64_t CVNLPCaptionHandlerCreate(void *a1)
{
  id v1 = a1;
  if (qword_1EB9FE378 != -1) {
    dispatch_once(&qword_1EB9FE378, &unk_1F0D56080);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  sub_1B4C53530(Instance + 16, v1);

  return Instance;
}

uint64_t sub_1B4C64424(_Unwind_Exception *a1, int a2)
{
  if (a2 != 1) {
    _Unwind_Resume(a1);
  }
  id v6 = objc_begin_catch(a1);
  uint64_t v10 = objc_msgSend_userInfo(v6, v7, v8, v9);
  uint64_t v13 = objc_msgSend_objectForKeyedSubscript_(v10, v11, (uint64_t)off_1E9D40440, v12);

  if (v2) {
    *double v2 = v13;
  }

  objc_end_catch();
  return 0;
}

uint64_t CVNLPCaptionCreateForImage(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  long double v4 = sub_1B4C53534(a1 + 16, a2, a4);
  BOOL v7 = objc_msgSend_objectForKeyedSubscript_(v4, v5, (uint64_t)CVNLPCaptions, v6);
  uint64_t v11 = objc_msgSend_copy(v7, v8, v9, v10);

  return v11;
}

uint64_t sub_1B4C6452C(_Unwind_Exception *a1, int a2)
{
  uint64_t v6 = v4;

  if (a2 != 1) {
    _Unwind_Resume(a1);
  }
  id v8 = objc_begin_catch(a1);
  uint64_t v12 = objc_msgSend_userInfo(v8, v9, v10, v11);
  uint64_t v15 = objc_msgSend_objectForKeyedSubscript_(v12, v13, (uint64_t)off_1E9D40440, v14);

  if (v2) {
    *double v2 = v15;
  }

  objc_end_catch();
  return 0;
}

uint64_t CVNLPCaptionCopyForImage(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  long double v4 = sub_1B4C53534(a1 + 16, a2, a4);
  uint64_t v8 = objc_msgSend_copy(v4, v5, v6, v7);

  return v8;
}

uint64_t sub_1B4C64638(_Unwind_Exception *a1, int a2)
{
  if (a2 != 1) {
    _Unwind_Resume(a1);
  }
  id v6 = objc_begin_catch(a1);
  uint64_t v10 = objc_msgSend_userInfo(v6, v7, v8, v9);
  uint64_t v13 = objc_msgSend_objectForKeyedSubscript_(v10, v11, (uint64_t)off_1E9D40440, v12);

  if (v2) {
    *double v2 = v13;
  }

  objc_end_catch();
  return 0;
}

uint64_t CVNLPCaptionCopyForVideo(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = objc_msgSend_fileURLWithPath_(MEMORY[0x1E4F1CB10], a2, (uint64_t)a2, a4);
  id v6 = objc_alloc(MEMORY[0x1E4F166C8]);
  uint64_t v8 = objc_msgSend_initWithURL_options_(v6, v7, v5, 0);
  uint64_t v11 = objc_msgSend_tracksWithMediaType_(v8, v9, *MEMORY[0x1E4F15C18], v10);
  uint64_t v15 = objc_msgSend_firstObject(v11, v12, v13, v14);

  objc_msgSend_nominalFrameRate(v15, v16, v17, v18);
  float v20 = v19;
  double v21 = v19;
  NSLog(&cfstr_FpsIsF.isa, v19);
  id v22 = objc_alloc(MEMORY[0x1E4F16368]);
  uint64_t v25 = objc_msgSend_initWithAsset_(v22, v23, (uint64_t)v8, v24);
  uint64_t v26 = (long long *)MEMORY[0x1E4F1FA48];
  long long v101 = *MEMORY[0x1E4F1FA48];
  uint64_t v102 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
  objc_msgSend_setRequestedTimeToleranceAfter_(v25, v27, (uint64_t)&v101, v28);
  long long v99 = *v26;
  uint64_t v100 = *((void *)v26 + 2);
  objc_msgSend_setRequestedTimeToleranceBefore_(v25, v29, (uint64_t)&v99, v30);
  unint64_t v83 = v8;
  int64_t v84 = (void *)v5;
  if (v8) {
    objc_msgSend_duration(v8, v31, v32, v33);
  }
  else {
    memset(&time, 0, sizeof(time));
  }
  uint64_t v88 = (void **)(a1 + 16);
  double v36 = CMTimeGetSeconds(&time) * v21;
  std::string __p = 0;
  uint64_t v96 = 0;
  uint64_t v97 = 0;
  double v37 = v36 + -1.0;
  if (v36 + -1.0 > 0.0)
  {
    long long v38 = 0;
    int timescale = (int)v20;
    double v39 = v36 * 0.0666666667;
    double v40 = 0.0;
    uint64_t v41 = MEMORY[0x1E4F1CC08];
    int64_t v85 = v15;
    BOOL v86 = v25;
    while (1)
    {
      uint64_t v42 = MEMORY[0x1BA992F90]();
      memset(&v94, 0, sizeof(v94));
      CMTimeMake(&v94, (uint64_t)v40, timescale);
      CMTime v92 = v94;
      id v91 = 0;
      BOOL v44 = (CGImage *)objc_msgSend_copyCGImageAtTime_actualTime_error_(v25, v43, (uint64_t)&v92, (uint64_t)v93, &v91);
      id v45 = v91;
      size_t Width = CGImageGetWidth(v44);
      size_t Height = CGImageGetHeight(v44);
      uint64_t v104 = 0;
      v105 = &v104;
      uint64_t v106 = 0x2050000000;
      BOOL v48 = (void *)qword_1EB9FE368;
      uint64_t v107 = qword_1EB9FE368;
      if (!qword_1EB9FE368)
      {
        v103[0] = MEMORY[0x1E4F143A8];
        v103[1] = 3221225472;
        v103[2] = sub_1B4C679A0;
        v103[3] = &unk_1E60A38E0;
        v103[4] = &v104;
        sub_1B4C679A0((uint64_t)v103);
        BOOL v48 = (void *)v105[3];
      }
      context = (void *)v42;
      BOOL v90 = v45;
      double v49 = v48;
      _Block_object_dispose(&v104, 8);
      id v50 = [v49 alloc];
      uint64_t v52 = objc_msgSend_initWithCGImage_orientation_options_(v50, v51, (uint64_t)v44, 1, v41);
      int v54 = (char *)objc_msgSend_bufferWithWidth_height_format_options_error_(v52, v53, Width, Height, 1111970369, v41, 0);
      uint64_t v55 = sub_1B4C53CFC((uint64_t)v88, v54);
      uint64_t v56 = (char *)v55;
      if (v38 < v97)
      {
        *v38++ = v55;
        uint64_t v96 = (uint64_t)v38;
        if (v54 == (char *)v55) {
          goto LABEL_30;
        }
LABEL_29:
        CVPixelBufferUnlockBaseAddress((CVPixelBufferRef)v54, 0);
        CFRelease(v54);
        goto LABEL_30;
      }
      int v57 = (uint64_t *)__p;
      int64_t v58 = (char *)v38 - (unsigned char *)__p;
      uint64_t v59 = ((char *)v38 - (unsigned char *)__p) >> 3;
      unint64_t v60 = v59 + 1;
      if ((unint64_t)(v59 + 1) >> 61) {
        sub_1B4BB3244();
      }
      uint64_t v61 = (char *)v97 - (unsigned char *)__p;
      if (((char *)v97 - (unsigned char *)__p) >> 2 > v60) {
        unint64_t v60 = v61 >> 2;
      }
      if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v62 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v62 = v60;
      }
      if (v62)
      {
        if (v62 >> 61) {
          sub_1B4BB2D38();
        }
        int v63 = operator new(8 * v62);
        size_t v64 = (char **)&v63[8 * v59];
        *size_t v64 = v56;
        uint64_t v65 = (uint64_t)(v64 + 1);
        int64_t v66 = (char *)v38 - (char *)v57;
        if (v38 == v57)
        {
LABEL_26:
          std::string __p = v64;
          uint64_t v96 = v65;
          uint64_t v97 = (uint64_t *)&v63[8 * v62];
          if (!v38) {
            goto LABEL_28;
          }
LABEL_27:
          operator delete(v38);
          goto LABEL_28;
        }
      }
      else
      {
        int v63 = 0;
        size_t v64 = (char **)(8 * v59);
        *(void *)(8 * v59) = v56;
        uint64_t v65 = 8 * v59 + 8;
        int64_t v66 = (char *)v38 - (char *)v57;
        if (v38 == v57) {
          goto LABEL_26;
        }
      }
      unint64_t v67 = v66 - 8;
      if (v67 < 0x168)
      {
        BOOL v68 = v38;
        goto LABEL_22;
      }
      unint64_t v70 = ((char *)(v38 - 1) - (char *)v57) & 0xFFFFFFFFFFFFFFF8;
      if (&v63[v58 - 8 - v70] > &v63[v58 - 8]) {
        break;
      }
      if ((uint64_t *)((char *)v38 - v70 - 8) > v38 - 1)
      {
        BOOL v68 = v38;
        goto LABEL_22;
      }
      if ((unint64_t)((char *)v38 - v63 - v58) < 0x20)
      {
        BOOL v68 = v38;
        goto LABEL_22;
      }
      uint64_t v71 = (v67 >> 3) + 1;
      uint64_t v72 = 8 * (v71 & 0x3FFFFFFFFFFFFFFCLL);
      BOOL v68 = &v38[v72 / 0xFFFFFFFFFFFFFFF8];
      size_t v64 = (char **)((char *)v64 - v72);
      uint64_t v73 = &v63[8 * v59 - 16];
      uint64_t v74 = v38 - 2;
      uint64_t v75 = v71 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v76 = *(_OWORD *)v74;
        *(v73 - 1) = *((_OWORD *)v74 - 1);
        _OWORD *v73 = v76;
        v73 -= 2;
        v74 -= 4;
        v75 -= 4;
      }
      while (v75);
      if (v71 != (v71 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_22;
      }
LABEL_23:
      long long v38 = (uint64_t *)__p;
      std::string __p = v64;
      uint64_t v96 = v65;
      uint64_t v97 = (uint64_t *)&v63[8 * v62];
      if (v38) {
        goto LABEL_27;
      }
LABEL_28:
      long long v38 = (uint64_t *)v65;
      uint64_t v15 = v85;
      uint64_t v96 = (uint64_t)v38;
      if (v54 != v56) {
        goto LABEL_29;
      }
LABEL_30:
      CGImageRelease(v44);

      double v40 = v40 + v39;
      uint64_t v25 = v86;
      uint64_t v41 = MEMORY[0x1E4F1CC08];
      if (v40 >= v37) {
        goto LABEL_42;
      }
    }
    BOOL v68 = v38;
    do
    {
LABEL_22:
      uint64_t v69 = (char *)*--v68;
      *--size_t v64 = v69;
    }
    while (v68 != v57);
    goto LABEL_23;
  }
LABEL_42:
  long long v77 = sub_1B4C5446C(v88, (uint64_t)&__p, v34, v35);
  uint64_t v81 = objc_msgSend_copy(v77, v78, v79, v80);

  if (__p)
  {
    uint64_t v96 = (uint64_t)__p;
    operator delete(__p);
  }

  return v81;
}

void sub_1B4C64C38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

uint64_t CVNLPCaptionCreateForCVPixelBuffer(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  long double v4 = sub_1B4C53E14(a1 + 16, a2, a4);
  uint64_t v7 = objc_msgSend_objectForKeyedSubscript_(v4, v5, (uint64_t)CVNLPCaptions, v6);
  uint64_t v11 = objc_msgSend_copy(v7, v8, v9, v10);

  return v11;
}

uint64_t sub_1B4C64DEC(_Unwind_Exception *a1, int a2)
{
  uint64_t v6 = v4;

  if (a2 != 1) {
    _Unwind_Resume(a1);
  }
  id v8 = objc_begin_catch(a1);
  uint64_t v12 = objc_msgSend_userInfo(v8, v9, v10, v11);
  uint64_t v15 = objc_msgSend_objectForKeyedSubscript_(v12, v13, (uint64_t)off_1E9D40440, v14);

  if (v2) {
    *double v2 = v15;
  }

  objc_end_catch();
  return 0;
}

uint64_t CVNLPCaptionCopyForCVPixelBuffer(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  long double v4 = sub_1B4C53E14(a1 + 16, a2, a4);
  uint64_t v8 = objc_msgSend_copy(v4, v5, v6, v7);

  return v8;
}

uint64_t sub_1B4C64EF8(_Unwind_Exception *a1, int a2)
{
  if (a2 != 1) {
    _Unwind_Resume(a1);
  }
  id v6 = objc_begin_catch(a1);
  uint64_t v10 = objc_msgSend_userInfo(v6, v7, v8, v9);
  uint64_t v13 = objc_msgSend_objectForKeyedSubscript_(v10, v11, (uint64_t)off_1E9D40440, v12);

  if (v2) {
    *double v2 = v13;
  }

  objc_end_catch();
  return 0;
}

uint64_t CVNLPCaptionCopyClassificationResults(uint64_t a1)
{
  id v1 = *(id *)(a1 + 72);
  uint64_t v5 = objc_msgSend_copy(v1, v2, v3, v4);

  return v5;
}

uint64_t sub_1B4C64FE8(_Unwind_Exception *a1, int a2)
{
  if (a2 != 1) {
    _Unwind_Resume(a1);
  }
  id v6 = objc_begin_catch(a1);
  uint64_t v10 = objc_msgSend_userInfo(v6, v7, v8, v9);
  uint64_t v13 = objc_msgSend_objectForKeyedSubscript_(v10, v11, (uint64_t)off_1E9D40440, v12);

  if (v2) {
    *double v2 = v13;
  }

  objc_end_catch();
  return 0;
}

uint64_t CVNLPCaptionCopyPerformanceMetrics(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = sub_1B4C546EC((void **)(a1 + 16), a2, a3, a4);
  uint64_t v8 = objc_msgSend_copy(v4, v5, v6, v7);

  return v8;
}

void sub_1B4C650C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C65710(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, void *__p, void *a19, int a20,__int16 a21,char a22,char a23,int a24,__int16 a25,char a26,char a27,long long buf,uint64_t a29,int a30,__int16 a31,char a32,char a33,long long a34,int a35,__int16 a36,char a37,char a38)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  if (a23 < 0) {
    operator delete(__p);
  }

  sub_1B4C035DC((uint64_t)&a9);
  if (a33 < 0) {
    operator delete(*((void **)&buf + 1));
  }
  if (a38 < 0) {
    operator delete((void *)a34);
  }

  switch(a2)
  {
    case 6:
      id v45 = __cxa_begin_catch(exception_object);
      uint64_t v46 = v45;
      if (v38)
      {
        sub_1B4C66B48((uint64_t)v45);
        *long long v38 = (id)objc_claimAutoreleasedReturnValue();
      }
      uint64_t v47 = sub_1B4BFA19C(5);
      if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
      {
        uint64_t v48 = (*(uint64_t (**)(void *))(*(void *)v46 + 16))(v46);
        LODWORD(buf) = 136315138;
        *(void *)((char *)&buf + 4) = v48;
        _os_log_impl(&dword_1B4BAD000, v47, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&buf, 0xCu);
      }
      break;
    case 5:
      double v49 = __cxa_begin_catch(exception_object);
      id v50 = v49;
      if (v38)
      {
        sub_1B4C66AD0((uint64_t)v49);
        *long long v38 = (id)objc_claimAutoreleasedReturnValue();
      }
      uint64_t v47 = sub_1B4BFA19C(5);
      if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
      {
        uint64_t v51 = (*(uint64_t (**)(void *))(*(void *)v50 + 16))(v50);
        LODWORD(buf) = 136315138;
        *(void *)((char *)&buf + 4) = v51;
        _os_log_impl(&dword_1B4BAD000, v47, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&buf, 0xCu);
      }
      break;
    case 4:
      uint64_t v52 = __cxa_begin_catch(exception_object);
      size_t v53 = v52;
      if (v38)
      {
        sub_1B4C66870((uint64_t)v52);
        *long long v38 = (id)objc_claimAutoreleasedReturnValue();
      }
      uint64_t v47 = sub_1B4BFA19C(5);
      if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
      {
        uint64_t v54 = (*(uint64_t (**)(void *))(*(void *)v53 + 16))(v53);
        LODWORD(buf) = 136315138;
        *(void *)((char *)&buf + 4) = v54;
        _os_log_impl(&dword_1B4BAD000, v47, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&buf, 0xCu);
      }
      break;
    case 3:
      uint64_t v55 = __cxa_begin_catch(exception_object);
      uint64_t v56 = v55;
      if (v38)
      {
        sub_1B4C66610((uint64_t)v55);
        *long long v38 = (id)objc_claimAutoreleasedReturnValue();
      }
      uint64_t v47 = sub_1B4BFA19C(5);
      if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
      {
        uint64_t v57 = (*(uint64_t (**)(void *))(*(void *)v56 + 16))(v56);
        LODWORD(buf) = 136315138;
        *(void *)((char *)&buf + 4) = v57;
        _os_log_impl(&dword_1B4BAD000, v47, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&buf, 0xCu);
      }
      break;
    default:
      int64_t v58 = __cxa_begin_catch(exception_object);
      if (a2 != 2)
      {
        uint64_t v61 = sub_1B4BFA19C(5);
        if (os_log_type_enabled(v61, OS_LOG_TYPE_ERROR))
        {
          LOWORD(buf) = 0;
          _os_log_impl(&dword_1B4BAD000, v61, OS_LOG_TYPE_ERROR, "Unknown error encountered during initWithOptions. See NSError object for more details.", (uint8_t *)&buf, 2u);
        }

        sub_1B4C682F8((uint64_t)&buf + 8, "Unknown error encountered during initWithOptions.");
        *(void *)&std::string buf = &unk_1F0D55360;
        if (v38)
        {
          sub_1B4C662D4((uint64_t)&buf);
          *long long v38 = (id)objc_claimAutoreleasedReturnValue();
        }
        unint64_t v62 = sub_1B4BFA19C(5);
        if (os_log_type_enabled(v62, OS_LOG_TYPE_ERROR))
        {
          if (a33 >= 0) {
            int v63 = (char *)&buf + 8;
          }
          else {
            int v63 = (char *)*((void *)&buf + 1);
          }
          LODWORD(a34) = 136315138;
          *(void *)((char *)&a34 + 4) = v63;
          _os_log_impl(&dword_1B4BAD000, v62, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&a34, 0xCu);
        }

        sub_1B4C66550((std::exception *)&buf);
        __cxa_end_catch();
LABEL_49:
        JUMPOUT(0x1B4C655ACLL);
      }
      uint64_t v59 = v58;
      if (v38)
      {
        sub_1B4C66598((uint64_t)v58);
        *long long v38 = (id)objc_claimAutoreleasedReturnValue();
      }
      uint64_t v47 = sub_1B4BFA19C(5);
      if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
      {
        uint64_t v60 = (*(uint64_t (**)(void *))(*(void *)v59 + 16))(v59);
        LODWORD(buf) = 136315138;
        *(void *)((char *)&buf + 4) = v60;
        _os_log_impl(&dword_1B4BAD000, v47, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&buf, 0xCu);
      }
      break;
  }

  __cxa_end_catch();
  goto LABEL_49;
}

uint64_t sub_1B4C65EF4(uint64_t a1, uint64_t a2)
{
  sub_1B4BB2204((uint64_t)v9);
  sub_1B4BB34F0(v9, (uint64_t)"[InvalidArgument] ", 18);
  sub_1B4BB34F0(v9, (uint64_t)"Invalid model URL: ", 19);
  int v4 = *(char *)(a2 + 23);
  if (v4 >= 0) {
    uint64_t v5 = a2;
  }
  else {
    uint64_t v5 = *(void *)a2;
  }
  if (v4 >= 0) {
    uint64_t v6 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v6 = *(void *)(a2 + 8);
  }
  sub_1B4BB34F0(v9, v5, v6);
  std::stringbuf::str();
  v9[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v9 + *(void *)(v9[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v9[1] = MEMORY[0x1E4FBA470] + 16;
  if (v10 < 0) {
    operator delete((void *)v9[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1BA992920](&v11);
  *(void *)a1 = &unk_1F0D55388;
  uint64_t v7 = (const char *)(a1 + 16);
  if (*(char *)(a1 + 39) < 0) {
    uint64_t v7 = *(const char **)(a1 + 16);
  }
  std::logic_error::logic_error((std::logic_error *)a1, v7);
  *(void *)a1 = &unk_1F0D55388;
  return a1;
}

void sub_1B4C660B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (*(char *)(v10 + 39) < 0)
  {
    operator delete(*v11);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1B4C660E4(uint64_t a1)
{
  sub_1B4BB2204((uint64_t)v4);
  sub_1B4BB34F0(v4, (uint64_t)"[InvalidArgument] ", 18);
  sub_1B4BB34F0(v4, (uint64_t)"Received lengthPenalty=", 23);
  std::ostream::operator<<();
  sub_1B4BB34F0(v4, (uint64_t)", which is outside the allowed range of [0.0, 10.0]. Please set to a floating point number between 0 and 10.", 108);
  std::stringbuf::str();
  v4[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v4 + *(void *)(v4[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v4[1] = MEMORY[0x1E4FBA470] + 16;
  if (v5 < 0) {
    operator delete((void *)v4[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1BA992920](&v6);
  *(void *)a1 = &unk_1F0D55388;
  double v2 = (const char *)(a1 + 16);
  if (*(char *)(a1 + 39) < 0) {
    double v2 = *(const char **)(a1 + 16);
  }
  std::logic_error::logic_error((std::logic_error *)a1, v2);
  *(void *)a1 = &unk_1F0D55388;
  return a1;
}

void sub_1B4C662A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (*(char *)(v10 + 39) < 0)
  {
    operator delete(*v11);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

id sub_1B4C662D4(uint64_t a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  size_t v2 = strlen(v1);
  if (!v1)
  {
    uint64_t v13 = 0;
    uint64_t v3 = (const void *)*MEMORY[0x1E4F1D170];
    if (!*MEMORY[0x1E4F1D170]) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  id v1 = (const char *)CFStringCreateWithBytes(0, (const UInt8 *)v1, v2, 0x8000100u, 0);
  uint64_t v13 = v1;
  if (!v1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v3 = (const void *)*MEMORY[0x1E4F1D170];
  if (*MEMORY[0x1E4F1D170]) {
LABEL_6:
  }
    CFRetain(v3);
LABEL_7:
  sub_1B4C316B8(&cf, v3);
  CFTypeRef v4 = cf;
  if (cf) {
    CFRetain(cf);
  }
  CFTypeRef v14 = v4;
  if (v1) {
    CFRetain(v1);
  }
  CFTypeRef v15 = v1;
  v11[0] = &v14;
  v11[1] = 1;
  CFDictionaryRef v5 = sub_1B4C329B0((uint64_t)v11);
  CFDictionaryRef v7 = v5;
  if (v5) {
    CFRelease(v5);
  }
  if (v15) {
    CFRelease(v15);
  }
  if (v14) {
    CFRelease(v14);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v1) {
    CFRelease(v1);
  }
  uint64_t v8 = objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E4F28C58], v6, (uint64_t)CVNLPVideoCaptioningModelErrorDomain, 7, v7);

  return v8;
}

void sub_1B4C664AC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1B4C664C0(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    sub_1B4BB21F0(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B4C664FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va2, a4);
  va_start(va1, a4);
  va_start(va, a4);
  CFDictionaryRef v5 = va_arg(va1, const void *);
  va_copy(va2, va1);
  CFDictionaryRef v7 = va_arg(va2, const void *);
  sub_1B4C3296C((uint64_t)va2);
  sub_1B4C31674((const void **)va);
  sub_1B4C31674((const void **)va1);
  _Unwind_Resume(a1);
}

void sub_1B4C66520(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_1B4C31674((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B4C66534(uint64_t a1)
{
  uint64_t result = a1 + 8;
  if (*(char *)(a1 + 31) < 0) {
    return *(void *)result;
  }
  return result;
}

std::exception *sub_1B4C66550(std::exception *a1)
{
  std::exception::~exception(a1);
  if (*(char *)(v2 + 31) < 0) {
    operator delete(a1[1].__vftable);
  }
  return a1;
}

id sub_1B4C66598(uint64_t a1)
{
  id v1 = sub_1B4C32754(a1);
  uint64_t v3 = objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E4F28C58], v2, (uint64_t)CVNLPVideoCaptioningModelErrorDomain, 7, v1);

  return v3;
}

void sub_1B4C66600(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1B4C66610(uint64_t a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  size_t v2 = strlen(v1);
  if (!v1)
  {
    uint64_t v13 = 0;
    uint64_t v3 = (const void *)*MEMORY[0x1E4F1D170];
    if (!*MEMORY[0x1E4F1D170]) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  id v1 = (const char *)CFStringCreateWithBytes(0, (const UInt8 *)v1, v2, 0x8000100u, 0);
  uint64_t v13 = v1;
  if (!v1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v3 = (const void *)*MEMORY[0x1E4F1D170];
  if (*MEMORY[0x1E4F1D170]) {
LABEL_6:
  }
    CFRetain(v3);
LABEL_7:
  sub_1B4C316B8(&cf, v3);
  CFTypeRef v4 = cf;
  if (cf) {
    CFRetain(cf);
  }
  CFTypeRef v14 = v4;
  if (v1) {
    CFRetain(v1);
  }
  CFTypeRef v15 = v1;
  v11[0] = &v14;
  v11[1] = 1;
  CFDictionaryRef v5 = sub_1B4C329B0((uint64_t)v11);
  CFDictionaryRef v7 = v5;
  if (v5) {
    CFRelease(v5);
  }
  if (v15) {
    CFRelease(v15);
  }
  if (v14) {
    CFRelease(v14);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v1) {
    CFRelease(v1);
  }
  uint64_t v8 = objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E4F28C58], v6, (uint64_t)CVNLPVideoCaptioningModelErrorDomain, 6, v7);

  return v8;
}

void sub_1B4C667E8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1B4C667FC(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    sub_1B4BB21F0(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B4C66838(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va2, a4);
  va_start(va1, a4);
  va_start(va, a4);
  CFDictionaryRef v5 = va_arg(va1, const void *);
  va_copy(va2, va1);
  CFDictionaryRef v7 = va_arg(va2, const void *);
  sub_1B4C3296C((uint64_t)va2);
  sub_1B4C31674((const void **)va);
  sub_1B4C31674((const void **)va1);
  _Unwind_Resume(a1);
}

void sub_1B4C6685C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_1B4C31674((const void **)va);
  _Unwind_Resume(a1);
}

id sub_1B4C66870(uint64_t a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  size_t v2 = strlen(v1);
  if (!v1)
  {
    uint64_t v13 = 0;
    uint64_t v3 = (const void *)*MEMORY[0x1E4F1D170];
    if (!*MEMORY[0x1E4F1D170]) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  id v1 = (const char *)CFStringCreateWithBytes(0, (const UInt8 *)v1, v2, 0x8000100u, 0);
  uint64_t v13 = v1;
  if (!v1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v3 = (const void *)*MEMORY[0x1E4F1D170];
  if (*MEMORY[0x1E4F1D170]) {
LABEL_6:
  }
    CFRetain(v3);
LABEL_7:
  sub_1B4C316B8(&cf, v3);
  CFTypeRef v4 = cf;
  if (cf) {
    CFRetain(cf);
  }
  CFTypeRef v14 = v4;
  if (v1) {
    CFRetain(v1);
  }
  CFTypeRef v15 = v1;
  v11[0] = &v14;
  v11[1] = 1;
  CFDictionaryRef v5 = sub_1B4C329B0((uint64_t)v11);
  CFDictionaryRef v7 = v5;
  if (v5) {
    CFRelease(v5);
  }
  if (v15) {
    CFRelease(v15);
  }
  if (v14) {
    CFRelease(v14);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v1) {
    CFRelease(v1);
  }
  uint64_t v8 = objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E4F28C58], v6, (uint64_t)CVNLPVideoCaptioningModelErrorDomain, 5, v7);

  return v8;
}

void sub_1B4C66A48(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1B4C66A5C(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    sub_1B4BB21F0(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B4C66A98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va2, a4);
  va_start(va1, a4);
  va_start(va, a4);
  CFDictionaryRef v5 = va_arg(va1, const void *);
  va_copy(va2, va1);
  CFDictionaryRef v7 = va_arg(va2, const void *);
  sub_1B4C3296C((uint64_t)va2);
  sub_1B4C31674((const void **)va);
  sub_1B4C31674((const void **)va1);
  _Unwind_Resume(a1);
}

void sub_1B4C66ABC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_1B4C31674((const void **)va);
  _Unwind_Resume(a1);
}

id sub_1B4C66AD0(uint64_t a1)
{
  id v1 = sub_1B4C32754(a1);
  uint64_t v3 = objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E4F28C58], v2, (uint64_t)CVNLPVideoCaptioningModelErrorDomain, 3, v1);

  return v3;
}

void sub_1B4C66B38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1B4C66B48(uint64_t a1)
{
  id v1 = sub_1B4C32754(a1);
  uint64_t v3 = objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E4F28C58], v2, (uint64_t)CVNLPVideoCaptioningModelErrorDomain, 4, v1);

  return v3;
}

void sub_1B4C66BB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C672B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, char a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,long long a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,long long buf,int a41,__int16 a42,char a43,char a44,int a45,__int16 a46,char a47,char a48)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  if (a33 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete((void *)a23);
  }
  sub_1B4C035DC((uint64_t)&buf);
  switch(a2)
  {
    case 6:
      id v50 = __cxa_begin_catch(exception_object);
      uint64_t v51 = v50;
      if (a10)
      {
        sub_1B4C66B48((uint64_t)v50);
        *a10 = (id)objc_claimAutoreleasedReturnValue();
      }
      uint64_t v52 = sub_1B4BFA19C(5);
      if (os_log_type_enabled(v52, OS_LOG_TYPE_ERROR))
      {
        uint64_t v53 = (*(uint64_t (**)(void *))(*(void *)v51 + 16))(v51);
        LODWORD(buf) = 136315138;
        *(void *)((char *)&buf + 4) = v53;
        _os_log_impl(&dword_1B4BAD000, v52, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&buf, 0xCu);
      }
      break;
    case 5:
      uint64_t v54 = __cxa_begin_catch(exception_object);
      uint64_t v55 = v54;
      if (a10)
      {
        sub_1B4C66AD0((uint64_t)v54);
        *a10 = (id)objc_claimAutoreleasedReturnValue();
      }
      uint64_t v52 = sub_1B4BFA19C(5);
      if (os_log_type_enabled(v52, OS_LOG_TYPE_ERROR))
      {
        uint64_t v56 = (*(uint64_t (**)(void *))(*(void *)v55 + 16))(v55);
        LODWORD(buf) = 136315138;
        *(void *)((char *)&buf + 4) = v56;
        _os_log_impl(&dword_1B4BAD000, v52, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&buf, 0xCu);
      }
      break;
    case 4:
      uint64_t v57 = __cxa_begin_catch(exception_object);
      int64_t v58 = v57;
      if (a10)
      {
        sub_1B4C66870((uint64_t)v57);
        *a10 = (id)objc_claimAutoreleasedReturnValue();
      }
      uint64_t v52 = sub_1B4BFA19C(5);
      if (os_log_type_enabled(v52, OS_LOG_TYPE_ERROR))
      {
        uint64_t v59 = (*(uint64_t (**)(void *))(*(void *)v58 + 16))(v58);
        LODWORD(buf) = 136315138;
        *(void *)((char *)&buf + 4) = v59;
        _os_log_impl(&dword_1B4BAD000, v52, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&buf, 0xCu);
      }
      break;
    case 3:
      uint64_t v60 = __cxa_begin_catch(exception_object);
      uint64_t v61 = v60;
      if (a10)
      {
        sub_1B4C66610((uint64_t)v60);
        *a10 = (id)objc_claimAutoreleasedReturnValue();
      }
      uint64_t v52 = sub_1B4BFA19C(5);
      if (os_log_type_enabled(v52, OS_LOG_TYPE_ERROR))
      {
        uint64_t v62 = (*(uint64_t (**)(void *))(*(void *)v61 + 16))(v61);
        LODWORD(buf) = 136315138;
        *(void *)((char *)&buf + 4) = v62;
        _os_log_impl(&dword_1B4BAD000, v52, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&buf, 0xCu);
      }
      break;
    default:
      int v63 = __cxa_begin_catch(exception_object);
      if (a2 != 2)
      {
        sub_1B4C682F8((uint64_t)&buf + 8, "Unknown error encountered during generateCaption.");
        *(void *)&std::string buf = &unk_1F0D55360;
        if (a10)
        {
          sub_1B4C662D4((uint64_t)&buf);
          *a10 = (id)objc_claimAutoreleasedReturnValue();
        }
        int64_t v66 = sub_1B4BFA19C(5);
        if (os_log_type_enabled(v66, OS_LOG_TYPE_ERROR))
        {
          if (a48 >= 0) {
            unint64_t v67 = (char *)&buf + 8;
          }
          else {
            unint64_t v67 = (char *)*((void *)&buf + 1);
          }
          LODWORD(a23) = 136315138;
          *(void *)((char *)&a23 + 4) = v67;
          _os_log_impl(&dword_1B4BAD000, v66, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&a23, 0xCu);
        }

        sub_1B4C66550((std::exception *)&buf);
        __cxa_end_catch();
LABEL_45:
        JUMPOUT(0x1B4C6724CLL);
      }
      size_t v64 = v63;
      if (a10)
      {
        sub_1B4C66598((uint64_t)v63);
        *a10 = (id)objc_claimAutoreleasedReturnValue();
      }
      uint64_t v52 = sub_1B4BFA19C(5);
      if (os_log_type_enabled(v52, OS_LOG_TYPE_ERROR))
      {
        uint64_t v65 = (*(uint64_t (**)(void *))(*(void *)v64 + 16))(v64);
        LODWORD(buf) = 136315138;
        *(void *)((char *)&buf + 4) = v65;
        _os_log_impl(&dword_1B4BAD000, v52, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&buf, 0xCu);
      }
      break;
  }

  __cxa_end_catch();
  goto LABEL_45;
}

void sub_1B4C678B4(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x1B4C678C4);
  }
  JUMPOUT(0x1B4C678ACLL);
}

Class sub_1B4C679A0(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v4[0] = 0;
  if (!qword_1EB9FE370)
  {
    v4[1] = MEMORY[0x1E4F143A8];
    v4[2] = 3221225472;
    v4[3] = sub_1B4C67AF4;
    v4[4] = &unk_1E60A3918;
    v4[5] = v4;
    long long v5 = xmmword_1E60A3CD0;
    uint64_t v6 = 0;
    qword_1EB9FE370 = _sl_dlopen();
    size_t v2 = (void *)v4[0];
    if (!qword_1EB9FE370)
    {
      abort_report_np();
      goto LABEL_7;
    }
    if (v4[0]) {
      goto LABEL_8;
    }
  }
  while (1)
  {
    Class result = objc_getClass("VNImageBuffer");
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
    if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
      break;
    }
LABEL_7:
    size_t v2 = (void *)abort_report_np();
LABEL_8:
    free(v2);
  }
  qword_1EB9FE368 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_1B4C67AF4()
{
  uint64_t result = _sl_dlopen();
  qword_1EB9FE370 = result;
  return result;
}

uint64_t sub_1B4C67B68(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  uint64_t v7 = objc_msgSend_objectForKey_(v3, v5, (uint64_t)v4, v6);
  uint64_t v11 = v7;
  if (!v7)
  {
    id v14 = v4;
    uint64_t v18 = (char *)objc_msgSend_UTF8String(v14, v15, v16, v17);
    sub_1B4BB8DC0(v20, v18);
    exception = __cxa_allocate_exception(0x28uLL);
    sub_1B4C67C8C((uint64_t)exception, (uint64_t)v20);
    __cxa_throw(exception, (struct type_info *)&unk_1F0D53750, (void (*)(void *))sub_1B4BFEDE4);
  }
  uint64_t v12 = objc_msgSend_intValue(v7, v8, v9, v10);

  return v12;
}

void sub_1B4C67C34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1B4C67C78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1B4C67C8C(uint64_t a1, uint64_t a2)
{
  sub_1B4BB2204((uint64_t)v9);
  sub_1B4BB34F0(v9, (uint64_t)"[KeyError] ", 11);
  sub_1B4BB34F0(v9, (uint64_t)"Key not found in dictionary: ", 29);
  int v4 = *(char *)(a2 + 23);
  if (v4 >= 0) {
    uint64_t v5 = a2;
  }
  else {
    uint64_t v5 = *(void *)a2;
  }
  if (v4 >= 0) {
    uint64_t v6 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v6 = *(void *)(a2 + 8);
  }
  sub_1B4BB34F0(v9, v5, v6);
  std::stringbuf::str();
  v9[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v9 + *(void *)(v9[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v9[1] = MEMORY[0x1E4FBA470] + 16;
  if (v10 < 0) {
    operator delete((void *)v9[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1BA992920](&v11);
  *(void *)a1 = &unk_1F0D55470;
  uint64_t v7 = (const char *)(a1 + 16);
  if (*(char *)(a1 + 39) < 0) {
    uint64_t v7 = *(const char **)(a1 + 16);
  }
  std::runtime_error::runtime_error((std::runtime_error *)a1, v7);
  *(void *)a1 = &unk_1F0D55470;
  return a1;
}

void sub_1B4C67E48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (*(char *)(v10 + 39) < 0)
  {
    operator delete(*v11);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1B4C67E7C()
{
  qword_1EB9FE388 = 0;
  qword_1EB9FE398 = 0;
  unk_1EB9FE3A0 = 0;
  qword_1EB9FE390 = (uint64_t)"CVNLPCaption";
  qword_1EB9FE3A8 = (uint64_t)sub_1B4C67ED8;
  xmmword_1EB9FE3B0 = 0u;
  unk_1EB9FE3C0 = 0u;
  uint64_t result = _CFRuntimeRegisterClass();
  qword_1EB9FE380 = result;
  return result;
}

void sub_1B4C67ED8(uint64_t a1)
{
  size_t v2 = *(void **)(a1 + 16);
}

void sub_1B4C67F54(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0D55C88;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1B4C67F74(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0D55C88;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1BA9929C0);
}

void sub_1B4C67FC8(uint64_t a1)
{
  size_t v2 = *(std::__shared_weak_count **)(a1 + 608);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    id v3 = *(std::__shared_weak_count **)(a1 + 592);
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    id v3 = *(std::__shared_weak_count **)(a1 + 592);
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  uint64_t v4 = *(void *)(a1 + 576);
  *(void *)(a1 + 576) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = *(void *)(a1 + 568);
  *(void *)(a1 + 568) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  if (*(unsigned char *)(a1 + 560))
  {
    uint64_t v6 = *(void *)(a1 + 536);
    if (v6)
    {
      uint64_t v7 = *(void *)(a1 + 544);
      uint64_t v8 = *(void **)(a1 + 536);
      if (v7 != v6)
      {
        do
        {
          if (*(char *)(v7 - 1) < 0) {
            operator delete(*(void **)(v7 - 24));
          }
          v7 -= 24;
        }
        while (v7 != v6);
        uint64_t v8 = *(void **)(a1 + 536);
      }
      *(void *)(a1 + 544) = v6;
      operator delete(v8);
    }
  }
  sub_1B4C0A624((void *)(a1 + 304));
  *(void *)(a1 + 248) = &unk_1F0D54F90;
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 296);
  if (!v9 || atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v10 = *(void **)(a1 + 264);
    if (!v10) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  uint64_t v10 = *(void **)(a1 + 264);
  if (v10)
  {
LABEL_23:
    *(void *)(a1 + 272) = v10;
    operator delete(v10);
  }
LABEL_24:
  if (*(char *)(a1 + 231) < 0)
  {
    operator delete(*(void **)(a1 + 208));
    if ((*(char *)(a1 + 207) & 0x80000000) == 0)
    {
LABEL_26:
      if ((*(char *)(a1 + 183) & 0x80000000) == 0) {
        goto LABEL_27;
      }
      goto LABEL_35;
    }
  }
  else if ((*(char *)(a1 + 207) & 0x80000000) == 0)
  {
    goto LABEL_26;
  }
  operator delete(*(void **)(a1 + 184));
  if ((*(char *)(a1 + 183) & 0x80000000) == 0)
  {
LABEL_27:
    if ((*(char *)(a1 + 159) & 0x80000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_36;
  }
LABEL_35:
  operator delete(*(void **)(a1 + 160));
  if ((*(char *)(a1 + 159) & 0x80000000) == 0)
  {
LABEL_28:
    if ((*(char *)(a1 + 135) & 0x80000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_37;
  }
LABEL_36:
  operator delete(*(void **)(a1 + 136));
  if ((*(char *)(a1 + 135) & 0x80000000) == 0)
  {
LABEL_29:
    if ((*(char *)(a1 + 95) & 0x80000000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_38;
  }
LABEL_37:
  operator delete(*(void **)(a1 + 112));
  if ((*(char *)(a1 + 95) & 0x80000000) == 0)
  {
LABEL_30:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0) {
      goto LABEL_31;
    }
LABEL_39:
    operator delete(*(void **)(a1 + 48));
    if ((*(char *)(a1 + 47) & 0x80000000) == 0) {
      return;
    }
    goto LABEL_40;
  }
LABEL_38:
  operator delete(*(void **)(a1 + 72));
  if (*(char *)(a1 + 71) < 0) {
    goto LABEL_39;
  }
LABEL_31:
  if ((*(char *)(a1 + 47) & 0x80000000) == 0) {
    return;
  }
LABEL_40:
  uint64_t v11 = *(void **)(a1 + 24);
  operator delete(v11);
}

void sub_1B4C682A0(std::exception *a1)
{
  std::exception::~exception(a1);
  if (*(char *)(v2 + 31) < 0) {
    operator delete(a1[1].__vftable);
  }
  JUMPOUT(0x1BA9929C0);
}

uint64_t sub_1B4C682F8(uint64_t a1, const char *a2)
{
  sub_1B4BB2204((uint64_t)v5);
  sub_1B4BB34F0(v5, (uint64_t)"[UnknownError] ", 15);
  size_t v3 = strlen(a2);
  sub_1B4BB34F0(v5, (uint64_t)a2, v3);
  std::stringbuf::str();
  v5[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v5 + *(void *)(v5[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v5[1] = MEMORY[0x1E4FBA470] + 16;
  if (v6 < 0) {
    operator delete((void *)v5[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1BA992920](&v7);
}

void sub_1B4C6844C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1B4BC8450((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1B4C68460(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1B4BC8450((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B4C68474(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend_stringWithFormat_(NSString, a2, @" %@ ", a4, a1);
}

void sub_1B4C6857C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C68594(_Unwind_Exception *a1)
{
  size_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1B4C688C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

id sub_1B4C68964(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (objc_class *)objc_opt_class();
  uint64_t v5 = NSStringFromClass(v4);
  uint64_t v9 = objc_msgSend_classifierRevisions(*(void **)(a1 + 32), v6, v7, v8);
  uint64_t v12 = objc_msgSend_objectForKeyedSubscript_(v9, v10, (uint64_t)v5, v11);

  if (v12)
  {
    uint64_t v16 = objc_msgSend_unsignedIntegerValue(v12, v13, v14, v15);
    id v20 = 0;
    objc_msgSend_setRevision_error_(v3, v17, v16 + 3737841664, (uint64_t)&v20);
    id v18 = v20;
  }
  else
  {
    id v18 = 0;
  }

  return v18;
}

void sub_1B4C68A2C(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1B4C68A5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C68C44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,id a28)
{
  _Block_object_dispose(&a23, 8);
  _Block_object_dispose((const void *)(v29 - 112), 8);

  _Unwind_Resume(a1);
}

uint64_t sub_1B4C68C90(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1B4C68CA0(uint64_t a1)
{
}

void sub_1B4C68CA8(uint64_t a1)
{
  uint64_t v10 = 0;
  uint64_t v11 = &v10;
  uint64_t v12 = 0x2050000000;
  uint64_t v2 = (void *)qword_1E9D406E8;
  uint64_t v13 = qword_1E9D406E8;
  if (!qword_1E9D406E8)
  {
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 3221225472;
    void v9[2] = sub_1B4C6929C;
    void v9[3] = &unk_1E60A38E0;
    v9[4] = &v10;
    sub_1B4C6929C((uint64_t)v9);
    uint64_t v2 = (void *)v11[3];
  }
  id v3 = v2;
  _Block_object_dispose(&v10, 8);
  id v4 = [v3 alloc];
  uint64_t v6 = objc_msgSend_initWithCVPixelBuffer_options_(v4, v5, *(void *)(a1 + 40), MEMORY[0x1E4F1CC08]);
  uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v6;
}

void sub_1B4C68D90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B4C68DA8(void *a1, const char *a2)
{
  v31[2] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1[4];
  id v4 = *(void **)(*(void *)(a1[5] + 8) + 40);
  v31[0] = *(void *)(v3 + 40);
  v31[1] = *(void *)(v3 + 32);
  uint64_t v5 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], a2, (uint64_t)v31, 2);
  id v30 = 0;
  objc_msgSend_performRequests_error_(v4, v6, (uint64_t)v5, (uint64_t)&v30);
  id v7 = v30;

  if (!v7)
  {
    uint64_t v11 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v8, v9, v10);
    uint64_t v15 = objc_msgSend_results(*(void **)(a1[4] + 40), v12, v13, v14);
    objc_msgSend_addObjectsFromArray_(v11, v16, (uint64_t)v15, v17);

    double v21 = objc_msgSend_results(*(void **)(a1[4] + 32), v18, v19, v20);
    objc_msgSend_addObjectsFromArray_(v11, v22, (uint64_t)v21, v23);

    uint64_t v27 = objc_msgSend_copy(v11, v24, v25, v26);
    uint64_t v28 = *(void *)(a1[6] + 8);
    uint64_t v29 = *(void **)(v28 + 40);
    *(void *)(v28 + 40) = v27;
  }
}

void sub_1B4C68EF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

Class sub_1B4C68F80(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v4[0] = 0;
  if (!qword_1E9D406D8)
  {
    v4[1] = MEMORY[0x1E4F143A8];
    v4[2] = 3221225472;
    v4[3] = sub_1B4C690D4;
    v4[4] = &unk_1E60A3918;
    v4[5] = v4;
    long long v5 = xmmword_1E60A3D60;
    uint64_t v6 = 0;
    qword_1E9D406D8 = _sl_dlopen();
    uint64_t v2 = (void *)v4[0];
    if (!qword_1E9D406D8)
    {
      abort_report_np();
      goto LABEL_7;
    }
    if (v4[0]) {
      goto LABEL_8;
    }
  }
  while (1)
  {
    Class result = objc_getClass("VN6Mb1ME89lyW3HpahkEygIG");
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
    if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
      break;
    }
LABEL_7:
    uint64_t v2 = (void *)abort_report_np();
LABEL_8:
    free(v2);
  }
  qword_1E9D406D0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_1B4C690D4()
{
  uint64_t result = _sl_dlopen();
  qword_1E9D406D8 = result;
  return result;
}

Class sub_1B4C69148(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v4[0] = 0;
  if (!qword_1E9D406D8)
  {
    v4[1] = MEMORY[0x1E4F143A8];
    v4[2] = 3221225472;
    v4[3] = sub_1B4C690D4;
    v4[4] = &unk_1E60A3918;
    v4[5] = v4;
    long long v5 = xmmword_1E60A3D60;
    uint64_t v6 = 0;
    qword_1E9D406D8 = _sl_dlopen();
    uint64_t v2 = (void *)v4[0];
    if (!qword_1E9D406D8)
    {
      abort_report_np();
      goto LABEL_7;
    }
    if (v4[0]) {
      goto LABEL_8;
    }
  }
  while (1)
  {
    Class result = objc_getClass("VNVYvzEtX1JlUdu8xx5qhDI");
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
    if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
      break;
    }
LABEL_7:
    uint64_t v2 = (void *)abort_report_np();
LABEL_8:
    free(v2);
  }
  qword_1E9D406E0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

Class sub_1B4C6929C(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v4[0] = 0;
  if (!qword_1E9D406D8)
  {
    v4[1] = MEMORY[0x1E4F143A8];
    v4[2] = 3221225472;
    v4[3] = sub_1B4C690D4;
    v4[4] = &unk_1E60A3918;
    v4[5] = v4;
    long long v5 = xmmword_1E60A3D60;
    uint64_t v6 = 0;
    qword_1E9D406D8 = _sl_dlopen();
    uint64_t v2 = (void *)v4[0];
    if (!qword_1E9D406D8)
    {
      abort_report_np();
      goto LABEL_7;
    }
    if (v4[0]) {
      goto LABEL_8;
    }
  }
  while (1)
  {
    Class result = objc_getClass("VNImageRequestHandler");
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
    if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
      break;
    }
LABEL_7:
    uint64_t v2 = (void *)abort_report_np();
LABEL_8:
    free(v2);
  }
  qword_1E9D406E8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_1B4C693F0(uint64_t a1, CFTypeRef *a2, uint64_t a3)
{
  CFTypeRef v5 = *a2;
  if (*a2) {
    CFRetain(*a2);
  }
  uint64_t v6 = MRLNeuralNetworkCreate();
  sub_1B4C59068(a1, v6);
  if (v5) {
    CFRelease(v5);
  }
  *(_OWORD *)(a1 + 104) = *(_OWORD *)a3;
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(_DWORD *)(a1 + 120) = 1065353216;
  return a1;
}

void sub_1B4C6947C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1B4C3910C((const void **)va);
  _Unwind_Resume(a1);
}

float sub_1B4C69490(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void **__return_ptr))(**(void **)(a1 + 104) + 24))(__p);
  unsigned int v6 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 104) + 40))(*(void *)(a1 + 104), a2, a3);
  float v7 = sub_1B4C69890(a1, v6, (uint64_t)__p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v7;
}

void sub_1B4C69560(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

float sub_1B4C6957C@<S0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  v21[0] = 0;
  v21[8] = 0;
  sub_1B4C69724(a1, (uint64_t)v21, 1, (uint64_t)&v22);
  uint64_t v8 = *a2;
  uint64_t v7 = a2[1];
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  uint64_t v9 = v7 - v8;
  if (v9)
  {
    uint64_t v10 = v9 / 24;
    if ((unint64_t)(v9 / 24) >> 62) {
      sub_1B4BB3244();
    }
    uint64_t v11 = (char *)operator new(4 * v10);
    *a3 = v11;
    a3[2] = &v11[4 * v10];
    bzero(v11, 4 * v10);
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    a3[1] = &v11[4 * v10];
    do
    {
      uint64_t v14 = (uint64_t *)(*a2 + v12);
      if (*((char *)v14 + 23) < 0)
      {
        uint64_t v16 = *v14;
        uint64_t v15 = v14[1];
      }
      else
      {
        uint64_t v15 = *((unsigned __int8 *)v14 + 23);
        uint64_t v16 = *a2 + v12;
      }
      unsigned int v17 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 104) + 40))(*(void *)(a1 + 104), v16, v15);
      uint64_t v18 = v17;
      uint64_t v19 = v24;
      if (v22) {
        uint64_t v20 = v24 - 1;
      }
      else {
        uint64_t v20 = v17;
      }
      if (v22) {
        uint64_t v19 = v23;
      }
      else {
        uint64_t v18 = v24 - 1;
      }
      float result = *(float *)(v25 + 4 * (v18 + v19 * v20));
      *(float *)&v11[4 * v13++] = result;
      v12 += 24;
    }
    while (v10 != v13);
  }
  return result;
}

void sub_1B4C696E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B4C696F8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B4C69724(uint64_t a1@<X0>, uint64_t a2@<X3>, int a3@<W4>, uint64_t a4@<X8>)
{
  (*(void (**)(void **__return_ptr))(**(void **)(a1 + 104) + 24))(&__p);
  LOBYTE(v13) = 0;
  int v8 = *(unsigned __int8 *)(a2 + 8);
  if (*(unsigned char *)(a2 + 8))
  {
    CFTypeRef v9 = *(CFTypeRef *)a2;
    if (*(void *)a2) {
      CFRetain(*(CFTypeRef *)a2);
    }
    CFTypeRef v13 = v9;
    uint64_t v10 = (uint32x4_t *)__p;
    uint64_t v11 = v15;
    LOBYTE(cf) = 0;
    char v17 = 0;
    if (v9) {
      CFRetain(v9);
    }
    uint64_t v12 = v11 - (unsigned char *)v10;
    CFTypeRef cf = v9;
    char v17 = 1;
  }
  else
  {
    uint64_t v10 = (uint32x4_t *)__p;
    uint64_t v12 = v15 - (unsigned char *)__p;
    LOBYTE(cf) = 0;
    char v17 = 0;
  }
  sub_1B4C69954(a1, v10, v12 >> 2, (uint64_t)&cf, a3, a4);
  if (v17 && cf) {
    CFRelease(cf);
  }
  if (v8 && v13) {
    CFRelease(v13);
  }
  if (__p)
  {
    uint64_t v15 = __p;
    operator delete(__p);
  }
}

void sub_1B4C69864(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char a15)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

float sub_1B4C69890(uint64_t a1, unsigned int a2, uint64_t a3)
{
  id v4 = *(uint32x4_t **)a3;
  unint64_t v5 = (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2;
  LOBYTE(cf) = 0;
  char v11 = 0;
  sub_1B4C69954(a1, v4, v5, (uint64_t)&cf, 1, (uint64_t)&v12);
  if (v11 && cf) {
    CFRelease(cf);
  }
  unint64_t v6 = a2;
  if (v12) {
    unint64_t v7 = v5 - 1;
  }
  else {
    unint64_t v7 = a2;
  }
  if (v12)
  {
    int v8 = &v13;
  }
  else
  {
    unint64_t v6 = v5 - 1;
    int v8 = v14;
  }
  return *(float *)(v14[1] + 4 * (v6 + *v8 * v7));
}

void sub_1B4C69930(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf, char a10)
{
  if (a10)
  {
    if (cf) {
      CFRelease(cf);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1B4C69954@<X0>(uint64_t a1@<X0>, uint32x4_t *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  LOBYTE(cf) = 0;
  char v16 = 0;
  if (*(unsigned char *)(a4 + 8))
  {
    CFTypeRef v11 = *(CFTypeRef *)a4;
    if (*(void *)a4) {
      CFRetain(*(CFTypeRef *)a4);
    }
    CFTypeRef cf = v11;
    char v16 = 1;
  }
  sub_1B4C37CF8(a1, a2, (uint64_t *)a3, (uint64_t)&cf);
  if (v16 && cf) {
    CFRelease(cf);
  }
  if (a3 <= 1) {
    a3 = 1;
  }
  uint64_t OutputDimension = MRLNeuralNetworkGetOutputDimension();
  if (a5 == 1) {
    unint64_t v13 = OutputDimension;
  }
  else {
    unint64_t v13 = a3;
  }
  if (a5 != 1) {
    a3 = OutputDimension;
  }
  uint64_t result = MRLNeuralNetworkGetOutput();
  *(_DWORD *)a6 = a5;
  *(void *)(a6 + 8) = v13;
  *(void *)(a6 + 16) = a3;
  *(void *)(a6 + 24) = result;
  return result;
}

void sub_1B4C69A34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1B4C69A48(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  sub_1B4C69FE0((unsigned char *)(a1 + 8), *(void *)(a2 + 8), *(void *)(a2 + 16), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3));
  CFTypeRef v4 = CFRetain(*(CFTypeRef *)(a2 + 32));
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = v4;
  *(void *)(a1 + 40) = v5;
  return a1;
}

void sub_1B4C69AC8(_Unwind_Exception *exception_object)
{
  CFTypeRef v4 = (void **)*v2;
  if (*v2)
  {
    uint64_t v5 = *(void ***)(v1 + 16);
    unint64_t v6 = *v2;
    if (v5 != v4)
    {
      do
      {
        if (*((char *)v5 - 1) < 0) {
          operator delete(*(v5 - 3));
        }
        v5 -= 5;
      }
      while (v5 != v4);
      unint64_t v6 = *v2;
    }
    *(void *)(v1 + 16) = v4;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1B4C69B1C(void *a1)
{
  uint64_t v2 = (const void *)a1[4];
  if (v2)
  {
    CFRelease(v2);
    a1[4] = 0;
  }
  uint64_t v3 = a1[1];
  if (v3)
  {
    uint64_t v4 = a1[2];
    uint64_t v5 = (void *)a1[1];
    if (v4 != v3)
    {
      do
      {
        if (*(char *)(v4 - 1) < 0) {
          operator delete(*(void **)(v4 - 24));
        }
        v4 -= 40;
      }
      while (v4 != v3);
      uint64_t v5 = (void *)a1[1];
    }
    a1[2] = v3;
    operator delete(v5);
  }
  return a1;
}

void sub_1B4C69BA4(uint64_t a1@<X0>, char **a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != v3)
  {
    uint64_t v5 = 0;
    unint64_t v6 = 0;
    unint64_t v7 = 0;
    unint64_t v8 = 0;
    while (1)
    {
      uint64_t v10 = (void *)(v3 + 40 * v8);
      if (v7 >= v6) {
        break;
      }
      *(void *)unint64_t v7 = *v10;
      uint64_t v9 = (uint64_t)(v7 + 8);
LABEL_4:
      a2[1] = (char *)v9;
      ++v8;
      unint64_t v7 = (char *)v9;
      if (v8 >= 0xCCCCCCCCCCCCCCCDLL * ((v2 - v3) >> 3)) {
        return;
      }
    }
    uint64_t v11 = (v7 - v5) >> 3;
    unint64_t v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 61) {
      sub_1B4BB3244();
    }
    if ((v6 - v5) >> 2 > v12) {
      unint64_t v12 = (v6 - v5) >> 2;
    }
    if ((unint64_t)(v6 - v5) >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v12;
    }
    if (v13)
    {
      if (v13 >> 61) {
        sub_1B4BB2D38();
      }
      uint64_t v14 = v2;
      uint64_t v15 = operator new(8 * v13);
      uint64_t v2 = v14;
      char v16 = &v15[8 * v11];
      *(void *)char v16 = *v10;
      uint64_t v9 = (uint64_t)(v16 + 8);
      int64_t v17 = v7 - v5;
      if (v7 == v5) {
        goto LABEL_20;
      }
    }
    else
    {
      uint64_t v15 = 0;
      char v16 = (char *)(8 * v11);
      *(void *)(8 * v11) = *v10;
      uint64_t v9 = 8 * v11 + 8;
      int64_t v17 = v7 - v5;
      if (v7 == v5) {
        goto LABEL_20;
      }
    }
    unint64_t v18 = v17 - 8;
    if (v18 >= 0x168)
    {
      unint64_t v21 = (v7 - 8 - v5) & 0xFFFFFFFFFFFFFFF8;
      if (&v15[v7 - v5 - 8 - v21] > &v15[v7 - v5 - 8])
      {
        uint64_t v19 = v7;
      }
      else if (&v7[-v21 - 8] > v7 - 8)
      {
        uint64_t v19 = v7;
      }
      else if ((unint64_t)(v5 - v15) >= 0x20)
      {
        uint64_t v22 = (v18 >> 3) + 1;
        uint64_t v23 = 8 * (v22 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v19 = &v7[-v23];
        v16 -= v23;
        uint64_t v24 = &v15[8 * v11 - 16];
        uint64_t v25 = v7 - 16;
        uint64_t v26 = v22 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v27 = *(_OWORD *)v25;
          *(v24 - 1) = *((_OWORD *)v25 - 1);
          _OWORD *v24 = v27;
          v24 -= 2;
          v25 -= 32;
          v26 -= 4;
        }
        while (v26);
        if (v22 == (v22 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_20:
          unint64_t v6 = &v15[8 * v13];
          *a2 = v16;
          a2[1] = (char *)v9;
          a2[2] = v6;
          if (v5)
          {
            operator delete(v5);
            uint64_t v3 = *(void *)(a1 + 8);
            uint64_t v2 = *(void *)(a1 + 16);
          }
          uint64_t v5 = v16;
          goto LABEL_4;
        }
      }
      else
      {
        uint64_t v19 = v7;
      }
    }
    else
    {
      uint64_t v19 = v7;
    }
    do
    {
      uint64_t v20 = *((void *)v19 - 1);
      v19 -= 8;
      *((void *)v16 - 1) = v20;
      v16 -= 8;
    }
    while (v19 != v5);
    goto LABEL_20;
  }
}

void sub_1B4C69DEC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B4C69E0C(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  uint64_t v3 = *(void *)(a1 + 8);
  if (*(void *)(a1 + 16) != v3)
  {
    uint64_t v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      uint64_t v7 = v3 + v5;
      size_t v8 = *(unsigned __int8 *)(v3 + v5 + 39);
      int v9 = (char)v8;
      if ((v8 & 0x80u) == 0) {
        size_t v10 = v8;
      }
      else {
        size_t v10 = *(void *)(v7 + 24);
      }
      unint64_t v11 = v10 + 1;
      if (v10 + 1 >= 0x7FFFFFFFFFFFFFF8) {
        sub_1B4BB33D8();
      }
      if (v11 >= 0x17) {
        break;
      }
      std::string::size_type v19 = 0;
      int64_t v20 = 0;
      long long __dst = 0;
      p_dst = (void **)&__dst;
      HIBYTE(v20) = v10 + 1;
      if (v10) {
        goto LABEL_14;
      }
LABEL_18:
      *(_WORD *)((char *)p_dst + v10) = 32;
      if (v20 >= 0) {
        char v16 = (const std::string::value_type *)&__dst;
      }
      else {
        char v16 = (const std::string::value_type *)__dst;
      }
      if (v20 >= 0) {
        std::string::size_type v17 = HIBYTE(v20);
      }
      else {
        std::string::size_type v17 = v19;
      }
      std::string::append(a2, v16, v17);
      if (SHIBYTE(v20) < 0) {
        operator delete(__dst);
      }
      ++v6;
      uint64_t v3 = *(void *)(a1 + 8);
      v5 += 40;
      if (v6 >= 0xCCCCCCCCCCCCCCCDLL * ((*(void *)(a1 + 16) - v3) >> 3)) {
        return;
      }
    }
    uint64_t v13 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17) {
      uint64_t v13 = v11 | 7;
    }
    uint64_t v14 = v13 + 1;
    p_dst = (void **)operator new(v13 + 1);
    std::string::size_type v19 = v10 + 1;
    int64_t v20 = v14 | 0x8000000000000000;
    long long __dst = p_dst;
LABEL_14:
    if (v9 >= 0) {
      uint64_t v15 = (const void *)(v7 + 16);
    }
    else {
      uint64_t v15 = *(const void **)(v7 + 16);
    }
    memmove(p_dst, v15, v10);
    goto LABEL_18;
  }
}

void sub_1B4C69F84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if ((*(char *)(v15 + 23) & 0x80000000) == 0) {
    _Unwind_Resume(exception_object);
  }
  operator delete(*(void **)v15);
  _Unwind_Resume(exception_object);
}

unsigned char *sub_1B4C69FE0(unsigned char *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v5 = result;
    if (a4 >= 0x666666666666667) {
      sub_1B4C434F8();
    }
    uint64_t result = operator new(40 * a4);
    size_t v8 = result;
    void *v5 = result;
    v5[1] = result;
    uint64_t v5[2] = &result[40 * a4];
    if (a2 != a3)
    {
      uint64_t v9 = 0;
      do
      {
        size_t v10 = &v8[v9];
        uint64_t v11 = a2 + v9;
        *(void *)size_t v10 = *(void *)(a2 + v9);
        *((_DWORD *)v10 + 2) = *(_DWORD *)(a2 + v9 + 8);
        *((_DWORD *)v10 + 3) = *(_DWORD *)(a2 + v9 + 12);
        uint64_t result = &v8[v9 + 16];
        unint64_t v12 = (void **)(a2 + v9 + 16);
        if (*(char *)(a2 + v9 + 39) < 0)
        {
          uint64_t result = sub_1B4BCA11C(result, *v12, *(void *)(v11 + 24));
        }
        else
        {
          *(_OWORD *)uint64_t result = *(_OWORD *)v12;
          *(void *)&v8[v9 + 32] = *(void *)(a2 + v9 + 32);
        }
        v9 += 40;
      }
      while (v11 + 40 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_1B4C6A0E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_1B4C6A0FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  for (; v11; v11 -= 40)
  {
    if (*(char *)(v10 + v11 - 1) < 0) {
      operator delete(*(void **)(v10 + v11 - 24));
    }
  }
  *(void *)(v9 + 8) = v10;
  sub_1B4C6A138(&a9);
  _Unwind_Resume(a1);
}

void ***sub_1B4C6A138(void ***result)
{
  uint64_t v1 = result;
  if (!*((unsigned char *)result + 8))
  {
    uint64_t v2 = *result;
    uint64_t v3 = (void **)**result;
    if (v3)
    {
      uint64_t v4 = (void **)v2[1];
      uint64_t v5 = **result;
      if (v4 != v3)
      {
        do
        {
          if (*((char *)v4 - 1) < 0) {
            operator delete(*(v4 - 3));
          }
          v4 -= 5;
        }
        while (v4 != v3);
        uint64_t v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

void sub_1B4C6A1D0(void **a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6 = a2;
  uint64_t v8 = (uint64_t)a1[2];
  uint64_t v9 = (char *)*a1;
  if (0xCCCCCCCCCCCCCCCDLL * ((v8 - (uint64_t)*a1) >> 3) < a4)
  {
    if (v9)
    {
      uint64_t v10 = (char *)a1[1];
      uint64_t v11 = *a1;
      if (v10 != v9)
      {
        do
        {
          if (*(v10 - 1) < 0) {
            operator delete(*((void **)v10 - 3));
          }
          v10 -= 40;
        }
        while (v10 != v9);
        uint64_t v11 = *a1;
      }
      a1[1] = v9;
      operator delete(v11);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0x666666666666666) {
      goto LABEL_46;
    }
    unint64_t v22 = 0xCCCCCCCCCCCCCCCDLL * (v8 >> 3);
    uint64_t v23 = 2 * v22;
    if (2 * v22 <= a4) {
      uint64_t v23 = a4;
    }
    unint64_t v24 = v22 >= 0x333333333333333 ? 0x666666666666666 : v23;
    if (v24 > 0x666666666666666) {
LABEL_46:
    }
      sub_1B4C434F8();
    uint64_t v25 = 5 * v24;
    unint64_t v21 = (void **)operator new(40 * v24);
    *a1 = v21;
    a1[1] = v21;
    a1[2] = &v21[v25];
    if (v6 != a3)
    {
      unint64_t v26 = 0;
      do
      {
        long long v27 = (char *)&v21[v26 / 8];
        uint64_t v28 = v6 + v26;
        *(void *)long long v27 = *(void *)(v6 + v26);
        *((_DWORD *)v27 + 2) = *(_DWORD *)(v6 + v26 + 8);
        *((_DWORD *)v27 + 3) = *(_DWORD *)(v6 + v26 + 12);
        uint64_t v29 = (char *)&v21[v26 / 8 + 2];
        id v30 = (void **)(v6 + v26 + 16);
        if (*(char *)(v6 + v26 + 39) < 0)
        {
          sub_1B4BCA11C(v29, *v30, *(void *)(v28 + 24));
        }
        else
        {
          *(_OWORD *)uint64_t v29 = *(_OWORD *)v30;
          v21[v26 / 8 + 4] = *(void **)(v6 + v26 + 32);
        }
        v26 += 40;
      }
      while (v28 + 40 != a3);
      unint64_t v21 = (void **)((char *)v21 + v26);
    }
LABEL_38:
    a1[1] = v21;
    return;
  }
  unint64_t v12 = (void **)a1[1];
  if (0xCCCCCCCCCCCCCCCDLL * (((char *)v12 - v9) >> 3) >= a4)
  {
    if (a2 == a3)
    {
      unint64_t v21 = (void **)*a1;
    }
    else
    {
      unint64_t v21 = (void **)*a1;
      do
      {
        *(_OWORD *)uint64_t v9 = *(_OWORD *)v6;
        std::string::operator=((std::string *)(v9 + 16), (const std::string *)(v6 + 16));
        v21 += 5;
        v6 += 40;
        v9 += 40;
      }
      while (v6 != a3);
      unint64_t v12 = (void **)a1[1];
    }
    while (v12 != v21)
    {
      if (*((char *)v12 - 1) < 0) {
        operator delete(*(v12 - 3));
      }
      v12 -= 5;
    }
    goto LABEL_38;
  }
  uint64_t v13 = a2 + 8 * (((char *)v12 - v9) >> 3);
  if (v12 != (void **)v9)
  {
    do
    {
      *(_OWORD *)uint64_t v9 = *(_OWORD *)v6;
      std::string::operator=((std::string *)(v9 + 16), (const std::string *)(v6 + 16));
      v6 += 40;
      v9 += 40;
    }
    while (v6 != v13);
    uint64_t v9 = (char *)a1[1];
  }
  uint64_t v14 = v9;
  if (v13 != a3)
  {
    uint64_t v15 = 0;
    do
    {
      std::string::size_type v17 = &v9[v15];
      uint64_t v18 = v13 + v15;
      *(void *)std::string::size_type v17 = *(void *)(v13 + v15);
      *((_DWORD *)v17 + 2) = *(_DWORD *)(v13 + v15 + 8);
      *((_DWORD *)v17 + 3) = *(_DWORD *)(v13 + v15 + 12);
      std::string::size_type v19 = &v9[v15 + 16];
      int64_t v20 = (void **)(v13 + v15 + 16);
      if (*(char *)(v13 + v15 + 39) < 0)
      {
        sub_1B4BCA11C(v19, *v20, *(void *)(v18 + 24));
      }
      else
      {
        long long v16 = *(_OWORD *)v20;
        *(void *)&v9[v15 + 32] = *(void *)(v13 + v15 + 32);
        *(_OWORD *)std::string::size_type v19 = v16;
      }
      v15 += 40;
    }
    while (v18 + 40 != a3);
    uint64_t v14 = &v9[v15];
  }
  a1[1] = v14;
}

void sub_1B4C6A4E4(_Unwind_Exception *exception_object)
{
  for (; v3; v3 -= 40)
  {
    if (*(char *)(v2 + v3 - 1) < 0) {
      operator delete(*(void **)(v2 + v3 - 24));
    }
  }
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(exception_object);
}

char *sub_1B4C6A518(char **a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  unint64_t v5 = 0xCCCCCCCCCCCCCCCDLL * ((v4 - *a1) >> 3);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x666666666666666) {
    sub_1B4C434F8();
  }
  if (0x999999999999999ALL * ((a1[2] - v3) >> 3) > v6) {
    unint64_t v6 = 0x999999999999999ALL * ((a1[2] - v3) >> 3);
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v3) >> 3) >= 0x333333333333333) {
    unint64_t v8 = 0x666666666666666;
  }
  else {
    unint64_t v8 = v6;
  }
  if (v8)
  {
    if (v8 > 0x666666666666666) {
      sub_1B4BB2D38();
    }
    uint64_t v9 = (char *)operator new(40 * v8);
  }
  else
  {
    uint64_t v9 = 0;
  }
  uint64_t v10 = &v9[40 * v5];
  unint64_t v22 = &v9[40 * v8];
  *(void *)uint64_t v10 = *(void *)a2;
  *((_DWORD *)v10 + 2) = *(_DWORD *)(a2 + 8);
  *((_DWORD *)v10 + 3) = *(_DWORD *)(a2 + 12);
  uint64_t v11 = v10 + 16;
  if ((*(char *)(a2 + 39) & 0x80000000) == 0)
  {
    *(_OWORD *)uint64_t v11 = *(_OWORD *)(a2 + 16);
    *((void *)v10 + 4) = *(void *)(a2 + 32);
    unint64_t v12 = v10 + 40;
    unint64_t v21 = v10 + 40;
    if (v4 != v3) {
      goto LABEL_13;
    }
LABEL_20:
    uint64_t v18 = v3;
    goto LABEL_21;
  }
  sub_1B4BCA11C(v11, *(void **)(a2 + 16), *(void *)(a2 + 24));
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  unint64_t v12 = v10 + 40;
  unint64_t v21 = v10 + 40;
  if (v4 == *a1) {
    goto LABEL_20;
  }
LABEL_13:
  uint64_t v13 = 0;
  do
  {
    uint64_t v15 = &v10[v13];
    *((void *)v15 - 5) = *(void *)&v4[v13 - 40];
    *((_DWORD *)v15 - 8) = *(_DWORD *)&v4[v13 - 32];
    *((_DWORD *)v15 - 7) = *(_DWORD *)&v4[v13 - 28];
    long long v16 = &v10[v13 - 24];
    std::string::size_type v17 = (void **)&v4[v13 - 24];
    if (v4[v13 - 1] < 0)
    {
      sub_1B4BCA11C(v16, *v17, *(void *)&v4[v13 - 16]);
    }
    else
    {
      long long v14 = *(_OWORD *)v17;
      *(void *)&v10[v13 - 8] = *(void *)&v4[v13 - 8];
      *(_OWORD *)long long v16 = v14;
    }
    v13 -= 40;
  }
  while (&v4[v13] != v3);
  uint64_t v18 = *a1;
  uint64_t v3 = a1[1];
  v10 += v13;
  unint64_t v12 = v21;
LABEL_21:
  *a1 = v10;
  a1[1] = v12;
  a1[2] = v22;
  if (v3 == v18)
  {
    if (v3) {
LABEL_23:
    }
      operator delete(v3);
  }
  else
  {
    do
    {
      int64_t v20 = v3 - 40;
      if (*(v3 - 1) < 0) {
        operator delete(*((void **)v3 - 3));
      }
      v3 -= 40;
    }
    while (v20 != v18);
    uint64_t v3 = v18;
    if (v18) {
      goto LABEL_23;
    }
  }
  return v12;
}

void sub_1B4C6A740(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1B4C43640((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1B4C6A754(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  for (; v2; v2 += 40)
  {
    if (*(char *)(v3 + v2 + 39) < 0) {
      operator delete(*(void **)(v3 + v2 + 16));
    }
  }
  sub_1B4C43640((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t CVNLPLanguageModelCreate(CFTypeRef cf)
{
  v107[5] = *(std::locale *)MEMORY[0x1E4F143B8];
  if (cf) {
    CFRetain(cf);
  }
  sub_1B4C59934(&v103, cf);
  CFDictionaryRef v2 = v103;
  if (v103) {
    CFRetain(v103);
  }
  CFDictionaryRef v102 = v2;
  uint64_t v3 = (const void **)operator new(8uLL);
  char *v3 = @"CVNLPTokenTypeKey";
  CFArrayRef v4 = CFArrayCreate(0, v3, 1, MEMORY[0x1E4F1D510]);
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  operator delete(v3);
  *(void *)&long long v104 = v4;
  CFIndex Count = CFArrayGetCount(v4);
  CFIndex v6 = CFArrayGetCount(v4);
  if (Count)
  {
    CFIndex v7 = v6;
    if (v2)
    {
      unint64_t v8 = 0;
      while (v7 != v8)
      {
        sub_1B4C4320C(v4, v8, buf);
        if (v101.__r_.__value_.__s.__data_[15] >= 0) {
          uint64_t v9 = buf;
        }
        else {
          uint64_t v9 = *(uint8_t **)buf;
        }
        if (v9)
        {
          if (v101.__r_.__value_.__s.__data_[15] >= 0) {
            CFIndex v10 = v101.__r_.__value_.__s.__data_[15];
          }
          else {
            CFIndex v10 = v101.__r_.__value_.__r.__words[0];
          }
          uint64_t v11 = (std::locale::__imp *)CFStringCreateWithBytes(0, v9, v10, 0x8000100u, 0);
          v107[0].__locale_ = v11;
          if (!v11)
          {
            unint64_t v70 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v70, "Could not construct");
            __cxa_throw(v70, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
        }
        else
        {
          uint64_t v11 = 0;
          v107[0].__locale_ = 0;
        }
        int v12 = CFDictionaryContainsKey(v2, v11);
        if (v11) {
          CFRelease(v11);
        }
        if (!v12)
        {
          unint64_t v22 = sub_1B4BB34F0(MEMORY[0x1E4FBA250], (uint64_t)"Missing required key:", 21);
          if (v101.__r_.__value_.__s.__data_[15] >= 0) {
            uint64_t v23 = buf;
          }
          else {
            uint64_t v23 = *(uint8_t **)buf;
          }
          if (v101.__r_.__value_.__s.__data_[15] >= 0) {
            uint64_t v24 = v101.__r_.__value_.__s.__data_[15];
          }
          else {
            uint64_t v24 = v101.__r_.__value_.__r.__words[0];
          }
          uint64_t v25 = sub_1B4BB34F0(v22, (uint64_t)v23, v24);
          std::ios_base::getloc((const std::ios_base *)((char *)v25 + *(void *)(*v25 - 24)));
          unint64_t v26 = std::locale::use_facet(v107, MEMORY[0x1E4FBA258]);
          ((void (*)(const std::locale::facet *, uint64_t))v26->__vftable[2].~facet_0)(v26, 10);
          std::locale::~locale(v107);
          std::ostream::put();
          std::ostream::flush();
          if (v101.__r_.__value_.__s.__data_[15] < 0) {
            operator delete(*(void **)buf);
          }
          char v13 = 0;
          goto LABEL_28;
        }
        if (v101.__r_.__value_.__s.__data_[15] < 0) {
          operator delete(*(void **)buf);
        }
        if (Count == ++v8) {
          break;
        }
      }
    }
    else if (v6)
    {
      sub_1B4C4320C(v4, 0, buf);
      uint64_t v74 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v74, "Could not construct");
      __cxa_throw(v74, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
  }
  char v13 = 1;
LABEL_28:
  CFRelease(v4);
  if (v2) {
    CFRelease(v2);
  }
  if ((v13 & 1) == 0)
  {
    if (qword_1E9D40AF0 != -1) {
      dispatch_once(&qword_1E9D40AF0, &unk_1F0D56000);
    }
    std::string::size_type v17 = (id)qword_1E9D40AE8;
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_error_impl(&dword_1B4BAD000, v17, OS_LOG_TYPE_ERROR, "Creation options does not contain all required keys.", buf, 2u);
    }

    CFDictionaryRef v18 = v103;
    if (v103) {
      goto LABEL_227;
    }
    return 0;
  }
  memset(&v101, 0, sizeof(v101));
  *(void *)std::string buf = &unk_1F0D55498;
  if (!v103)
  {
    uint64_t v72 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v72, "Could not construct");
    __cxa_throw(v72, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (!CFDictionaryContainsKey(v103, @"CVNLPModelURLKey"))
  {
    int Value = CFDictionaryGetValue((CFDictionaryRef)cf, @"CVNLPLocaleKey");
    int64_t v20 = Value;
    if (Value)
    {
      CFTypeID v21 = CFGetTypeID(Value);
      if (v21 == CFStringGetTypeID())
      {
        sub_1B4C71238(&v99, (CFDictionaryRef)cf, @"CVNLPLocaleKey");
        goto LABEL_78;
      }
      CFTypeID v28 = CFGetTypeID(v20);
      if (v28 == CFLocaleGetTypeID())
      {
        uint64_t v29 = (const void *)MEMORY[0x1BA991FA0](v20);
        id v30 = v29;
        if (v29) {
          CFRetain(v29);
        }
        sub_1B4C316B8(&v104, v30);
        if (!(void)v104)
        {
          uint64_t v80 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v80, "Could not construct");
          __cxa_throw(v80, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        v107[0].__locale_ = (std::locale::__imp *)&v104;
        sub_1B4C315C8((const __CFString ***)v107, &v99);
        if ((void)v104) {
          CFRelease((CFTypeRef)v104);
        }
        CFRelease(v30);
LABEL_78:
        std::string::size_type size = HIBYTE(v99.__r_.__value_.__r.__words[2]);
        if ((v99.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type size = v99.__r_.__value_.__l.__size_;
        }
        if (!size)
        {
          if (qword_1E9D40AF0 != -1) {
            dispatch_once(&qword_1E9D40AF0, &unk_1F0D56000);
          }
          double v36 = (id)qword_1E9D40AE8;
          if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
          {
            LODWORD(v107[0].__locale_) = 138412290;
            *(std::locale::__imp **)((char *)&v107[0].__locale_ + 4) = (std::locale::__imp *)cf;
            _os_log_error_impl(&dword_1B4BAD000, v36, OS_LOG_TYPE_ERROR, "Unable to determine model locale from options=%@", (uint8_t *)v107, 0xCu);
          }

          int v37 = 1;
          goto LABEL_168;
        }
        char v105 = 1;
        strcpy((char *)&v104, "-");
        BYTE7(v98[1]) = 1;
        strcpy((char *)v98, "_");
        if ((v99.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v33 = &v99;
        }
        else {
          uint64_t v33 = (std::string *)v99.__r_.__value_.__r.__words[0];
        }
        uint64_t v34 = v33;
        while (1)
        {
          int v35 = v34->__r_.__value_.__s.__data_[0];
          uint64_t v34 = (std::string *)((char *)v34 + 1);
          if (v35 == 45) {
            break;
          }
          uint64_t v33 = (std::string *)((char *)v33 + 1);
          if (!--size) {
            goto LABEL_95;
          }
        }
        v107[0].__locale_ = (std::locale::__imp *)&v104;
        v107[1].__locale_ = (std::locale::__imp *)((char *)&v104 + 1);
        sub_1B4BFBA7C(&v99, (uint64_t *)v107, (char *)v98, (char *)v98 + 1, v33, &v33->__r_.__value_.__s.__data_[1], (char *)v98, (char *)v98 + 1);
        if (SBYTE7(v98[1]) < 0) {
          operator delete(*(void **)&v98[0]);
        }
LABEL_95:
        if (v105 < 0) {
          operator delete((void *)v104);
        }
        if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0) {
          sub_1B4BCA11C(&v97, v99.__r_.__value_.__l.__data_, v99.__r_.__value_.__l.__size_);
        }
        else {
          std::string v97 = v99;
        }
        char v96 = 1;
        LOWORD(v95) = 95;
        sub_1B4BFB41C((uint64_t)&v97, (char *)&v95, (uint64_t)v107);
        locale = v107[0].__locale_;
        if (*((char *)v107[0].__locale_ + 23) < 0)
        {
          sub_1B4BCA11C(v98, *(void **)v107[0].__locale_, *((void *)v107[0].__locale_ + 1));
          locale = v107[0].__locale_;
          if (!v107[0].__locale_) {
            goto LABEL_110;
          }
        }
        else
        {
          long long v39 = *(_OWORD *)v107[0].__locale_;
          *(void *)&v98[1] = *((void *)v107[0].__locale_ + 2);
          v98[0] = v39;
        }
        double v40 = v107[1].__locale_;
        uint64_t v41 = locale;
        if (v107[1].__locale_ != locale)
        {
          do
          {
            if (*((char *)v40 - 1) < 0) {
              operator delete(*((void **)v40 - 3));
            }
            double v40 = (std::locale::__imp *)((char *)v40 - 24);
          }
          while (v40 != locale);
          uint64_t v41 = v107[0].__locale_;
        }
        v107[1].__locale_ = locale;
        operator delete(v41);
LABEL_110:
        if (v96 < 0) {
          operator delete(v95);
        }
        if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v97.__r_.__value_.__l.__data_);
        }
        *(void *)&long long v104 = 0x736C65646F4DLL;
        char v105 = 6;
        uint64_t v106 = objc_alloc_init(BundleHelper);
        sub_1B4C46A0C((uint64_t)&v104, (uint64_t)v98, v93);
        sub_1B4C31FFC((uint64_t)v107, (uint64_t)v93);
        std::string::operator=(&v101, (const std::string *)&v107[1]);
        if (SHIBYTE(v107[3].__locale_) < 0) {
          operator delete(v107[1].__locale_);
        }
        if (v94 < 0) {
          operator delete(v93[0]);
        }

        if (v105 < 0) {
          operator delete((void *)v104);
        }
        if (!v103)
        {
          uint64_t v78 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v78, "Could not construct");
          __cxa_throw(v78, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        if (!CFDictionaryContainsKey(v103, @"CVNLPLanguageModelArchitectureKey")) {
          goto LABEL_157;
        }
        if (!v103)
        {
          uint64_t v79 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v79, "Could not construct");
          __cxa_throw(v79, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        sub_1B4C71238(v91, v103, @"CVNLPLanguageModelArchitectureKey");
        char v42 = v92;
        if (v92 < 0)
        {
          int v43 = (void **)v91[0];
          if (v91[1] != (void *)3)
          {
LABEL_156:
            operator delete(v43);
            goto LABEL_157;
          }
        }
        else
        {
          if (v92 != 3) {
            goto LABEL_157;
          }
          int v43 = v91;
        }
        if (*(_WORD *)v43 != 20551 || *((unsigned char *)v43 + 2) != 84)
        {
LABEL_154:
          if (v42 < 0)
          {
            int v43 = (void **)v91[0];
            goto LABEL_156;
          }
LABEL_157:
          std::string::size_type v52 = HIBYTE(v101.__r_.__value_.__r.__words[2]);
          if ((v101.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type v52 = v101.__r_.__value_.__l.__size_;
          }
          if (v52 && sub_1B4BF9C48((uint64_t)buf))
          {
            int v37 = 0;
            if ((SBYTE7(v98[1]) & 0x80000000) == 0) {
              goto LABEL_168;
            }
            goto LABEL_167;
          }
          if (qword_1E9D40AF0 != -1) {
            dispatch_once(&qword_1E9D40AF0, &unk_1F0D56000);
          }
          uint64_t v53 = (id)qword_1E9D40AE8;
          if (os_log_type_enabled(v53, OS_LOG_TYPE_ERROR))
          {
            BOOL v68 = (std::locale::__imp *)v98;
            if (SBYTE7(v98[1]) < 0) {
              BOOL v68 = *(std::locale::__imp **)&v98[0];
            }
            LODWORD(v107[0].__locale_) = 136315138;
            *(std::locale::__imp **)((char *)&v107[0].__locale_ + 4) = v68;
            _os_log_error_impl(&dword_1B4BAD000, v53, OS_LOG_TYPE_ERROR, "Locale not supported: %s", (uint8_t *)v107, 0xCu);
          }

          int v37 = 1;
          if (SBYTE7(v98[1]) < 0) {
LABEL_167:
          }
            operator delete(*(void **)&v98[0]);
LABEL_168:
          if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v99.__r_.__value_.__l.__data_);
            if (v37) {
              goto LABEL_225;
            }
          }
          else if (v37)
          {
            goto LABEL_225;
          }
LABEL_172:
          CFDictionaryRef v54 = v103;
          if (!v103)
          {
            CFDictionaryRef v82 = 0;
            uint64_t v75 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v75, "Could not construct");
            __cxa_throw(v75, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
          CFRetain(v103);
          CFDictionaryRef v82 = v54;
          if (!CFDictionaryContainsKey(v54, @"CVNLPLanguageModelArchitectureKey"))
          {
            BYTE7(v98[1]) = 9;
            strcpy((char *)v98, "model.dat");
            goto LABEL_197;
          }
          sub_1B4C71238(&v104, v54, @"CVNLPLanguageModelArchitectureKey");
          if (v105 < 0)
          {
            if (*((void *)&v104 + 1) != 3)
            {
              if (*((void *)&v104 + 1) == 4 && *(_DWORD *)v104 == 1297371980)
              {
LABEL_183:
                BYTE7(v98[1]) = 9;
                strcpy((char *)v98, "model.dat");
                if ((v105 & 0x80) == 0) {
                  goto LABEL_197;
                }
                goto LABEL_196;
              }
              goto LABEL_191;
            }
            uint64_t v55 = (unsigned __int16 *)v104;
          }
          else
          {
            if (v105 != 3)
            {
              if (v105 == 4 && v104 == 1297371980) {
                goto LABEL_183;
              }
              goto LABEL_191;
            }
            uint64_t v55 = (unsigned __int16 *)&v104;
          }
          int v56 = *v55;
          int v57 = *((unsigned __int8 *)v55 + 2);
          if (v56 == 20551 && v57 == 84)
          {
            BYTE7(v98[1]) = 18;
            strcpy((char *)v98, "model.espresso.bin");
            if (v105 < 0) {
LABEL_196:
            }
              operator delete((void *)v104);
LABEL_197:
            sub_1B4C03298((uint64_t)buf, (char *)v98, v107);
            if (SHIBYTE(v107[3].__locale_) < 0) {
              sub_1B4BCA11C(&v99, v107[1].__locale_, (unint64_t)v107[2].__locale_);
            }
            else {
              std::string v99 = *(std::string *)&v107[1].__locale_;
            }
            if ((v99.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v60 = &v99;
            }
            else {
              uint64_t v60 = (std::string *)v99.__r_.__value_.__r.__words[0];
            }
            if ((v99.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v61 = HIBYTE(v99.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v61 = v99.__r_.__value_.__l.__size_;
            }
            CFURLRef v62 = CFURLCreateWithBytes(0, (const UInt8 *)v60, v61, 0, 0);
            v91[0] = v62;
            if (!v62)
            {
              long long v76 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v76, "Could not construct");
              __cxa_throw(v76, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
            }
            if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(v99.__r_.__value_.__l.__data_);
              if ((SHIBYTE(v107[3].__locale_) & 0x80000000) == 0)
              {
LABEL_209:
                if ((SBYTE7(v98[1]) & 0x80000000) == 0) {
                  goto LABEL_210;
                }
LABEL_224:
                operator delete(*(void **)&v98[0]);
LABEL_210:
                CFRelease(v54);
                sub_1B4C38758("ModelURL", v98);
                uint64_t v63 = *(void *)&v98[0];
                if (*(void *)&v98[0]) {
                  CFRetain(*(CFTypeRef *)&v98[0]);
                }
                *(void *)&long long v104 = v63;
                CFRetain(v62);
                *((void *)&v104 + 1) = v62;
                v107[0].__locale_ = (std::locale::__imp *)&v104;
                v107[1].__locale_ = (std::locale::__imp *)1;
                v99.__r_.__value_.__r.__words[0] = (std::string::size_type)sub_1B4C329B0((uint64_t)v107);
                if (*((void *)&v104 + 1)) {
                  CFRelease(*((CFTypeRef *)&v104 + 1));
                }
                if ((void)v104) {
                  CFRelease((CFTypeRef)v104);
                }
                if (*(void *)&v98[0]) {
                  CFRelease(*(CFTypeRef *)&v98[0]);
                }
                if (v103)
                {
                  CFNumberRef v64 = (const __CFNumber *)CFDictionaryGetValue(v103, @"CVNLPTokenTypeKey");
                  if (v64)
                  {
                    unint64_t v65 = sub_1B4C71560(v64);
                    if (HIDWORD(v65))
                    {
                      int v66 = v65;
                      sub_1B4BFA080((uint64_t)v81, (uint64_t)buf);
                      sub_1B4C6277C((uint64_t)v81, v66);
                    }
                    long long v77 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                    std::runtime_error::runtime_error(v77, "Could not convert");
                  }
                  else
                  {
                    long long v77 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                    std::runtime_error::runtime_error(v77, "Could not find item");
                  }
                }
                else
                {
                  long long v77 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v77, "Could not construct");
                }
                __cxa_throw(v77, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
              }
            }
            else if ((SHIBYTE(v107[3].__locale_) & 0x80000000) == 0)
            {
              goto LABEL_209;
            }
            operator delete(v107[1].__locale_);
            if ((SBYTE7(v98[1]) & 0x80000000) == 0) {
              goto LABEL_210;
            }
            goto LABEL_224;
          }
LABEL_191:
          if (qword_1E9D40AF0 != -1) {
            dispatch_once(&qword_1E9D40AF0, &unk_1F0D56000);
          }
          uint64_t v59 = (id)qword_1E9D40AE8;
          if (os_log_type_enabled(v59, OS_LOG_TYPE_ERROR))
          {
            LOWORD(__dst) = 0;
            _os_log_error_impl(&dword_1B4BAD000, v59, OS_LOG_TYPE_ERROR, "Received unsupported model format. Could be either Montreal or Espresso", (uint8_t *)&__dst, 2u);
          }

          memset(v98, 0, 24);
          if (v105 < 0) {
            goto LABEL_196;
          }
          goto LABEL_197;
        }
        *(void *)&long long v104 = 0x736C65646F4DLL;
        char v105 = 6;
        uint64_t v106 = objc_alloc_init(BundleHelper);
        int v45 = SBYTE7(v98[1]);
        if ((SBYTE7(v98[1]) & 0x80u) == 0) {
          size_t v46 = BYTE7(v98[1]);
        }
        else {
          size_t v46 = *((void *)&v98[0] + 1);
        }
        unint64_t v47 = v46 + 4;
        if (v46 + 4 >= 0x7FFFFFFFFFFFFFF8) {
          sub_1B4BB33D8();
        }
        if (v47 >= 0x17)
        {
          uint64_t v49 = (v47 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v47 | 7) != 0x17) {
            uint64_t v49 = v47 | 7;
          }
          uint64_t v50 = v49 + 1;
          p_dst = (void **)operator new(v49 + 1);
          size_t v87 = v46 + 4;
          unint64_t v88 = v50 | 0x8000000000000000;
          long long __dst = p_dst;
        }
        else
        {
          size_t v87 = 0;
          unint64_t v88 = 0;
          long long __dst = 0;
          p_dst = (void **)&__dst;
          HIBYTE(v88) = v46 + 4;
          if (!v46) {
            goto LABEL_148;
          }
        }
        if (v45 >= 0) {
          uint64_t v51 = v98;
        }
        else {
          uint64_t v51 = *(_OWORD **)&v98[0];
        }
        memmove(p_dst, v51, v46);
LABEL_148:
        strcpy((char *)p_dst + v46, "_gpt");
        sub_1B4C6C008(v89, (uint64_t)&v104, (uint64_t)&__dst);
        sub_1B4C31FFC((uint64_t)v107, (uint64_t)v89);
        std::string::operator=(&v101, (const std::string *)&v107[1]);
        if (SHIBYTE(v107[3].__locale_) < 0)
        {
          operator delete(v107[1].__locale_);
          if ((v90 & 0x80000000) == 0)
          {
LABEL_150:
            if ((SHIBYTE(v88) & 0x80000000) == 0)
            {
LABEL_151:

              if (v105 < 0) {
                operator delete((void *)v104);
              }
              char v42 = v92;
              goto LABEL_154;
            }
LABEL_235:
            operator delete(__dst);
            goto LABEL_151;
          }
        }
        else if ((v90 & 0x80000000) == 0)
        {
          goto LABEL_150;
        }
        operator delete(v89[0]);
        if ((SHIBYTE(v88) & 0x80000000) == 0) {
          goto LABEL_151;
        }
        goto LABEL_235;
      }
      if (qword_1E9D40AF0 != -1) {
        dispatch_once(&qword_1E9D40AF0, &unk_1F0D56000);
      }
      long long v31 = (id)qword_1E9D40AE8;
      if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
      {
        LOWORD(v107[0].__locale_) = 0;
        _os_log_error_impl(&dword_1B4BAD000, v31, OS_LOG_TYPE_ERROR, "Received unsupported CFType for locale.", (uint8_t *)v107, 2u);
      }
    }
    memset(&v99, 0, sizeof(v99));
    goto LABEL_78;
  }
  if (!v103)
  {
    uint64_t v73 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v73, "Could not construct");
    goto LABEL_248;
  }
  long long v14 = CFDictionaryGetValue(v103, @"CVNLPModelURLKey");
  uint64_t v15 = v14;
  if (!v14)
  {
    uint64_t v73 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v73, "Could not find item");
LABEL_248:
    __cxa_throw(v73, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  CFRetain(v14);
  sub_1B4C31960(&cfa, v15);
  sub_1B4C2F540((const __CFURL **)&cfa, __p);
  sub_1B4C31FFC((uint64_t)v107, (uint64_t)__p);
  std::string::operator=(&v101, (const std::string *)&v107[1]);
  if ((SHIBYTE(v107[3].__locale_) & 0x80000000) == 0)
  {
    if ((v85 & 0x80000000) == 0) {
      goto LABEL_37;
    }
LABEL_58:
    operator delete(__p[0]);
    CFTypeRef v16 = cfa;
    if (!cfa) {
      goto LABEL_60;
    }
    goto LABEL_59;
  }
  operator delete(v107[1].__locale_);
  if (v85 < 0) {
    goto LABEL_58;
  }
LABEL_37:
  CFTypeRef v16 = cfa;
  if (cfa) {
LABEL_59:
  }
    CFRelease(v16);
LABEL_60:
  if (sub_1B4BF9C48((uint64_t)buf)) {
    goto LABEL_172;
  }
  if (qword_1E9D40AF0 != -1) {
    dispatch_once(&qword_1E9D40AF0, &unk_1F0D56000);
  }
  long long v27 = (id)qword_1E9D40AE8;
  if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
  {
    if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0) {
      sub_1B4BCA11C(v107, v101.__r_.__value_.__l.__data_, v101.__r_.__value_.__l.__size_);
    }
    else {
      *(std::string *)&v107[0].__locale_ = v101;
    }
    uint64_t v69 = v107;
    if (SHIBYTE(v107[2].__locale_) < 0) {
      uint64_t v69 = v107[0].__locale_;
    }
    LODWORD(v104) = 136315138;
    *(void *)((char *)&v104 + 4) = v69;
    _os_log_error_impl(&dword_1B4BAD000, v27, OS_LOG_TYPE_ERROR, "Model directory does not exist: %s", (uint8_t *)&v104, 0xCu);
    if (SHIBYTE(v107[2].__locale_) < 0) {
      operator delete(v107[0].__locale_);
    }
  }

LABEL_225:
  if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v101.__r_.__value_.__l.__data_);
    CFDictionaryRef v18 = v103;
    if (!v103) {
      return 0;
    }
    goto LABEL_227;
  }
  CFDictionaryRef v18 = v103;
  if (v103) {
LABEL_227:
  }
    CFRelease(v18);
  return 0;
}

void sub_1B4C6BB08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53)
{
  if (*(char *)(v53 - 97) < 0)
  {
    operator delete(*(void **)(v53 - 120));
    if (a31 < 0)
    {
LABEL_5:
      operator delete(__p);
      if ((a24 & 0x80000000) == 0)
      {
LABEL_9:
        sub_1B4C2FA7C(v53 - 160);
        if (a37 < 0) {
          operator delete(a32);
        }
        if (a53 < 0) {
          operator delete(a48);
        }
        if (*(char *)(v53 - 217) < 0) {
          operator delete(*(void **)(v53 - 240));
        }
        if (*(char *)(v53 - 177) < 0)
        {
          operator delete(*(void **)(v53 - 200));
          sub_1B4C3910C((const void **)(v53 - 168));
          _Unwind_Resume(a1);
        }
        sub_1B4C3910C((const void **)(v53 - 168));
        _Unwind_Resume(a1);
      }
LABEL_8:
      operator delete(a19);
      goto LABEL_9;
    }
  }
  else if (a31 < 0)
  {
    goto LABEL_5;
  }
  if ((a24 & 0x80000000) == 0) {
    goto LABEL_9;
  }
  goto LABEL_8;
}

void sub_1B4C6C008(void *a1, uint64_t a2, uint64_t a3)
{
  sub_1B4BB2204((uint64_t)v36);
  int v6 = *(char *)(a2 + 23);
  if (v6 >= 0) {
    uint64_t v7 = a2;
  }
  else {
    uint64_t v7 = *(void *)a2;
  }
  if (v6 >= 0) {
    uint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v8 = *(void *)(a2 + 8);
  }
  uint64_t v9 = sub_1B4BB34F0(v36, v7, v8);
  sub_1B4BB34F0(v9, (uint64_t)"/", 1);
  int v10 = *(char *)(a3 + 23);
  if (v10 >= 0) {
    uint64_t v11 = a3;
  }
  else {
    uint64_t v11 = *(void *)a3;
  }
  if (v10 >= 0) {
    uint64_t v12 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    uint64_t v12 = *(void *)(a3 + 8);
  }
  char v13 = sub_1B4BB34F0(v36, v11, v12);
  sub_1B4BB34F0(v13, (uint64_t)"/", 1);
  std::stringbuf::str();
  if (((char)v35 & 0x80000000) == 0)
  {
    p_src = (void **)&__src;
    if (v35 >= (unint64_t)v35 - 1) {
      size_t v15 = v35 - 1;
    }
    else {
      size_t v15 = v35;
    }
    if (v15 < 0x7FFFFFFFFFFFFFF8) {
      goto LABEL_18;
    }
LABEL_47:
    sub_1B4BB33D8();
  }
  p_src = __src;
  if (v34 >= v34 - 1) {
    size_t v15 = v34 - 1;
  }
  else {
    size_t v15 = v34;
  }
  if (v15 >= 0x7FFFFFFFFFFFFFF8) {
    goto LABEL_47;
  }
LABEL_18:
  if (v15 >= 0x17)
  {
    uint64_t v26 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17) {
      uint64_t v26 = v15 | 7;
    }
    uint64_t v27 = v26 + 1;
    CFTypeRef v16 = operator new(v26 + 1);
    size_t v30 = v15;
    int64_t v31 = v27 | 0x8000000000000000;
    uint64_t v29 = v16;
LABEL_41:
    memmove(v16, p_src, v15);
    *((unsigned char *)v16 + v15) = 0;
    if (((char)v35 & 0x80000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_42;
  }
  HIBYTE(v31) = v15;
  CFTypeRef v16 = &v29;
  if (v15) {
    goto LABEL_41;
  }
  LOBYTE(v29) = 0;
  if (((char)v35 & 0x80000000) == 0) {
    goto LABEL_21;
  }
LABEL_42:
  operator delete(__src);
LABEL_21:
  v36[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v36 + *(void *)(v36[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v36[1] = MEMORY[0x1E4FBA470] + 16;
  if (v37 < 0) {
    operator delete((void *)v36[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1BA992920](&v38);
  if (v31 >= 0) {
    std::string::size_type v19 = (const UInt8 *)&v29;
  }
  else {
    std::string::size_type v19 = (const UInt8 *)v29;
  }
  if (v19)
  {
    if (v31 >= 0) {
      CFIndex v20 = HIBYTE(v31);
    }
    else {
      CFIndex v20 = v30;
    }
    CFStringRef v21 = CFStringCreateWithBytes(0, v19, v20, 0x8000100u, 0);
    CFStringRef v32 = v21;
    if (!v21)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    if (v31 < 0) {
      goto LABEL_32;
    }
  }
  else
  {
    CFStringRef v21 = 0;
    CFStringRef v32 = 0;
    if (v31 < 0) {
LABEL_32:
    }
      operator delete(v29);
  }
  unint64_t v22 = objc_msgSend_createBundle(*(void **)(a2 + 24), (const char *)v19, v17, v18, v29);
  objc_msgSend_pathForResource_ofType_(v22, v23, (uint64_t)v21, 0);
  uint64_t v24 = (__CFString *)objc_claimAutoreleasedReturnValue();
  uint64_t v25 = v24;
  if (!v24) {
    uint64_t v24 = &stru_1F0D56340;
  }
  sub_1B4C2FDF4(v24, a1);

  if (v21) {
    CFRelease(v21);
  }
}

void sub_1B4C6C360(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

CFDictionaryRef CVNLPLanguageModelCopyTokenIDMap(uint64_t a1)
{
  (*(void (**)(char ***__return_ptr))(**(void **)(a1 + 120) + 56))(&v34);
  std::string __p = 0;
  char v37 = 0;
  v38[0] = 0;
  sub_1B4C71A18((uint64_t)&__p, (unint64_t)v35[1]);
  uint64_t v1 = v34;
  if (v34 == v35)
  {
    CFDictionaryRef v2 = v37;
  }
  else
  {
    CFDictionaryRef v2 = v37;
    do
    {
      if ((unint64_t)v2 >= v38[0])
      {
        uint64_t v3 = ((char *)v2 - (unsigned char *)__p) >> 4;
        if ((unint64_t)(v3 + 1) >> 60) {
          sub_1B4BB3244();
        }
        unint64_t v4 = (uint64_t)(v38[0] - (void)__p) >> 3;
        if (v4 <= v3 + 1) {
          unint64_t v4 = v3 + 1;
        }
        if (v38[0] - (void)__p >= 0x7FFFFFFFFFFFFFF0uLL) {
          unint64_t v5 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v5 = v4;
        }
        char v42 = v38;
        if (v5)
        {
          if (v5 >> 60) {
            sub_1B4BB2D38();
          }
          int v6 = (char *)operator new(16 * v5);
        }
        else
        {
          int v6 = 0;
        }
        v38[1] = v6;
        long long v39 = (CFStringRef *)&v6[16 * v3];
        double v40 = v39;
        uint64_t v41 = &v6[16 * v5];
        sub_1B4C72154(v39, (const UInt8 *)v1 + 32, (int *)v1 + 14);
        uint64_t v7 = v39;
        CFDictionaryRef v2 = v40 + 2;
        uint64_t v8 = (CFStringRef *)__p;
        uint64_t v9 = v37;
        if (v37 == __p)
        {
          std::string __p = v39;
          char v37 = v40 + 2;
          v38[0] = v41;
        }
        else
        {
          unint64_t v10 = (char *)v37 - (unsigned char *)__p - 16;
          if (v10 < 0x50) {
            goto LABEL_23;
          }
          unint64_t v11 = ((char *)(v37 - 2) - (unsigned char *)__p) & 0xFFFFFFFFFFFFFFF0;
          if ((CFStringRef *)((char *)v39 - v11 - 16) < v37 && (CFStringRef *)((char *)v37 - v11 - 16) < v39) {
            goto LABEL_23;
          }
          uint64_t v12 = (v10 >> 4) + 1;
          unint64_t v13 = 16 * (v12 & 0x1FFFFFFFFFFFFFFELL);
          long long v14 = &v39[v13 / 0xFFFFFFFFFFFFFFF8];
          size_t v15 = &v37[v13 / 0xFFFFFFFFFFFFFFF8];
          CFTypeRef v16 = (double *)(v39 - 4);
          uint64_t v17 = (const double *)(v37 - 4);
          uint64_t v18 = v12 & 0x1FFFFFFFFFFFFFFELL;
          do
          {
            float64x2x2_t v43 = vld2q_f64(v17);
            vst2q_f64(v16, v43);
            *(_OWORD *)uint64_t v17 = 0uLL;
            *((_OWORD *)v17 + 1) = 0uLL;
            v17 -= 4;
            v16 -= 4;
            v18 -= 2;
          }
          while (v18);
          uint64_t v7 = v14;
          uint64_t v9 = v15;
          if (v12 != (v12 & 0x1FFFFFFFFFFFFFFELL))
          {
LABEL_23:
            long long v14 = v7;
            do
            {
              CFStringRef v19 = *(v9 - 2);
              v9 -= 2;
              *(v14 - 2) = v19;
              v14 -= 2;
              CFStringRef *v9 = 0;
              v14[1] = v9[1];
              v9[1] = 0;
            }
            while (v9 != v8);
          }
          uint64_t v9 = (CFStringRef *)__p;
          CFIndex v20 = v37;
          std::string __p = v14;
          char v37 = v2;
          v38[0] = v41;
          while (v20 != v9)
          {
            CFStringRef v21 = *(v20 - 1);
            if (v21) {
              CFRelease(v21);
            }
            unint64_t v22 = *(v20 - 2);
            if (v22) {
              CFRelease(v22);
            }
            v20 -= 2;
          }
        }
        if (v9) {
          operator delete(v9);
        }
      }
      else
      {
        sub_1B4C72154(v2, (const UInt8 *)v1 + 32, (int *)v1 + 14);
        v2 += 2;
      }
      char v37 = v2;
      uint64_t v23 = v1[1];
      if (v23)
      {
        do
        {
          uint64_t v24 = (char **)v23;
          uint64_t v23 = *(char **)v23;
        }
        while (v23);
      }
      else
      {
        do
        {
          uint64_t v24 = (char **)v1[2];
          BOOL v25 = *v24 == (char *)v1;
          uint64_t v1 = v24;
        }
        while (!v25);
      }
      uint64_t v1 = v24;
    }
    while (v24 != v35);
  }
  CFDictionaryRef v26 = sub_1B4C71BA0((char *)__p, (char *)v2);
  uint64_t v27 = (CFStringRef *)__p;
  if (__p)
  {
    CFTypeID v28 = v37;
    uint64_t v29 = __p;
    if (v37 != __p)
    {
      do
      {
        size_t v30 = *(v28 - 1);
        if (v30) {
          CFRelease(v30);
        }
        int64_t v31 = *(v28 - 2);
        if (v31) {
          CFRelease(v31);
        }
        v28 -= 2;
      }
      while (v28 != v27);
      uint64_t v29 = __p;
    }
    char v37 = v27;
    operator delete(v29);
  }
  CFDictionaryRef Copy = CFDictionaryCreateCopy(0, v26);
  CFRelease(v26);
  sub_1B4C43188((uint64_t)&v34, v35[0]);
  return Copy;
}

void sub_1B4C6C73C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, char a10, char *a11)
{
}

void sub_1B4C6C75C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  unint64_t v5 = va_arg(va1, char *);
  uint64_t v6 = va_arg(va1, void);
  sub_1B4C72058((void **)va1);
  sub_1B4C43188((uint64_t)va, v5);
  _Unwind_Resume(a1);
}

CFDictionaryRef CVNLPLanguageModelCopyIDTokenMap(uint64_t a1)
{
  (*(void (**)(char ***__return_ptr))(**(void **)(a1 + 120) + 64))(&v35);
  std::string __p = 0;
  uint64_t v38 = 0;
  v39[0] = 0;
  sub_1B4C71A18((uint64_t)&__p, (unint64_t)v36[1]);
  uint64_t v1 = v35;
  if (v35 == v36)
  {
    CFDictionaryRef v2 = v38;
  }
  else
  {
    CFDictionaryRef v2 = v38;
    do
    {
      int v3 = *((_DWORD *)v1 + 8);
      if ((unint64_t)v2 >= v39[0])
      {
        uint64_t v4 = ((char *)v2 - (unsigned char *)__p) >> 4;
        if ((unint64_t)(v4 + 1) >> 60) {
          sub_1B4BB3244();
        }
        unint64_t v5 = (uint64_t)(v39[0] - (void)__p) >> 3;
        if (v5 <= v4 + 1) {
          unint64_t v5 = v4 + 1;
        }
        if (v39[0] - (void)__p >= 0x7FFFFFFFFFFFFFF0uLL) {
          unint64_t v6 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v6 = v5;
        }
        float64x2x2_t v43 = v39;
        if (v6)
        {
          if (v6 >> 60) {
            sub_1B4BB2D38();
          }
          uint64_t v7 = (char *)operator new(16 * v6);
        }
        else
        {
          uint64_t v7 = 0;
        }
        v39[1] = v7;
        double v40 = (CFNumberRef *)&v7[16 * v4];
        uint64_t v41 = v40;
        char v42 = &v7[16 * v6];
        sub_1B4C722C0(v40, v3, (uint64_t)(v1 + 5));
        uint64_t v8 = v40;
        CFDictionaryRef v2 = v41 + 2;
        uint64_t v9 = (CFNumberRef *)__p;
        unint64_t v10 = v38;
        if (v38 == __p)
        {
          std::string __p = v40;
          uint64_t v38 = v41 + 2;
          v39[0] = v42;
        }
        else
        {
          unint64_t v11 = (char *)v38 - (unsigned char *)__p - 16;
          if (v11 < 0x50) {
            goto LABEL_23;
          }
          unint64_t v12 = ((char *)(v38 - 2) - (unsigned char *)__p) & 0xFFFFFFFFFFFFFFF0;
          if ((CFNumberRef *)((char *)v40 - v12 - 16) < v38 && (CFNumberRef *)((char *)v38 - v12 - 16) < v40) {
            goto LABEL_23;
          }
          uint64_t v13 = (v11 >> 4) + 1;
          unint64_t v14 = 16 * (v13 & 0x1FFFFFFFFFFFFFFELL);
          size_t v15 = &v40[v14 / 0xFFFFFFFFFFFFFFF8];
          CFTypeRef v16 = &v38[v14 / 0xFFFFFFFFFFFFFFF8];
          uint64_t v17 = (double *)(v40 - 4);
          uint64_t v18 = (const double *)(v38 - 4);
          uint64_t v19 = v13 & 0x1FFFFFFFFFFFFFFELL;
          do
          {
            float64x2x2_t v44 = vld2q_f64(v18);
            vst2q_f64(v17, v44);
            *(_OWORD *)uint64_t v18 = 0uLL;
            *((_OWORD *)v18 + 1) = 0uLL;
            v18 -= 4;
            v17 -= 4;
            v19 -= 2;
          }
          while (v19);
          uint64_t v8 = v15;
          unint64_t v10 = v16;
          if (v13 != (v13 & 0x1FFFFFFFFFFFFFFELL))
          {
LABEL_23:
            size_t v15 = v8;
            do
            {
              CFNumberRef v20 = *(v10 - 2);
              v10 -= 2;
              *(v15 - 2) = v20;
              v15 -= 2;
              CFNumberRef *v10 = 0;
              v15[1] = v10[1];
              v10[1] = 0;
            }
            while (v10 != v9);
          }
          unint64_t v10 = (CFNumberRef *)__p;
          CFStringRef v21 = v38;
          std::string __p = v15;
          uint64_t v38 = v2;
          v39[0] = v42;
          while (v21 != v10)
          {
            unint64_t v22 = *(v21 - 1);
            if (v22) {
              CFRelease(v22);
            }
            uint64_t v23 = *(v21 - 2);
            if (v23) {
              CFRelease(v23);
            }
            v21 -= 2;
          }
        }
        if (v10) {
          operator delete(v10);
        }
      }
      else
      {
        sub_1B4C722C0(v2, *((_DWORD *)v1 + 8), (uint64_t)(v1 + 5));
        v2 += 2;
      }
      uint64_t v38 = v2;
      uint64_t v24 = v1[1];
      if (v24)
      {
        do
        {
          BOOL v25 = (char **)v24;
          uint64_t v24 = *(char **)v24;
        }
        while (v24);
      }
      else
      {
        do
        {
          BOOL v25 = (char **)v1[2];
          BOOL v26 = *v25 == (char *)v1;
          uint64_t v1 = v25;
        }
        while (!v26);
      }
      uint64_t v1 = v25;
    }
    while (v25 != v36);
  }
  CFDictionaryRef v27 = sub_1B4C71BA0((char *)__p, (char *)v2);
  CFTypeID v28 = (CFNumberRef *)__p;
  if (__p)
  {
    uint64_t v29 = v38;
    size_t v30 = __p;
    if (v38 != __p)
    {
      do
      {
        int64_t v31 = *(v29 - 1);
        if (v31) {
          CFRelease(v31);
        }
        CFStringRef v32 = *(v29 - 2);
        if (v32) {
          CFRelease(v32);
        }
        v29 -= 2;
      }
      while (v29 != v28);
      size_t v30 = __p;
    }
    uint64_t v38 = v28;
    operator delete(v30);
  }
  CFDictionaryRef Copy = CFDictionaryCreateCopy(0, v27);
  CFRelease(v27);
  sub_1B4C43104((uint64_t)&v35, v36[0]);
  return Copy;
}

void sub_1B4C6CAF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, char a10, char *a11)
{
}

void sub_1B4C6CB10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  unint64_t v5 = va_arg(va1, char *);
  uint64_t v6 = va_arg(va1, void);
  sub_1B4C72058((void **)va1);
  sub_1B4C43104((uint64_t)va, v5);
  _Unwind_Resume(a1);
}

float CVNLPLanguageModelConditionalProbability(uint64_t a1, const __CFString *a2, const void *a3)
{
  return CVNLPLanguageModelConditionalProbabilityForTokenString_0(a1, a2, a3);
}

float CVNLPLanguageModelConditionalProbabilityForTokenString_0(uint64_t a1, const __CFString *a2, const void *a3)
{
  __p[3] = *(void **)MEMORY[0x1E4F143B8];
  if (a2)
  {
    sub_1B4C6EF48(&buf, a2);
    uint64_t v8 = v17;
    if ((v17 & 0x80u) != 0) {
      uint64_t v8 = *((void *)&buf + 1);
    }
    if (v8)
    {
      sub_1B4C391D4(a3, &v12);
      memset(v14, 0, sizeof(v14));
      size_t v15 = 0;
      if (v12)
      {
        uint64_t v13 = (const __CFString **)&v12;
        sub_1B4C315C8(&v13, __p);
        size_t v15 = __p[2];
        *(_OWORD *)unint64_t v14 = *(_OWORD *)__p;
      }
      sub_1B4C31674(&v12);
      if ((v17 & 0x80u) == 0) {
        p_long long buf = &buf;
      }
      else {
        p_long long buf = (long long *)buf;
      }
      if ((v17 & 0x80u) == 0) {
        uint64_t v11 = v17;
      }
      else {
        uint64_t v11 = *((void *)&buf + 1);
      }
      float v4 = sub_1B4C69490(a1 + 16, (uint64_t)p_buf, v11);
      if (SHIBYTE(v15) < 0) {
        operator delete(*(void **)v14);
      }
    }
    else
    {
      if (qword_1E9D40AF0 != -1) {
        dispatch_once(&qword_1E9D40AF0, &unk_1F0D56000);
      }
      uint64_t v9 = (id)qword_1E9D40AE8;
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        HIBYTE(__p[2]) = 21;
        strcpy((char *)__p, "Received empty token.");
        *(_DWORD *)unint64_t v14 = 136315138;
        *(void *)&v14[4] = __p;
        _os_log_error_impl(&dword_1B4BAD000, v9, OS_LOG_TYPE_ERROR, "%s", v14, 0xCu);
        if (SHIBYTE(__p[2]) < 0) {
          operator delete(__p[0]);
        }
      }

      float v4 = 0.0;
    }
    if ((char)v17 < 0) {
      operator delete((void *)buf);
    }
  }
  else
  {
    if (qword_1E9D40AF0 != -1) {
      dispatch_once(&qword_1E9D40AF0, &unk_1F0D56000);
    }
    uint64_t v3 = (id)qword_1E9D40AE8;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      HIBYTE(__p[2]) = 20;
      strcpy((char *)__p, "Received null token.");
      LODWORD(buf) = 136315138;
      *(void *)((char *)&buf + 4) = __p;
      _os_log_error_impl(&dword_1B4BAD000, v3, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&buf, 0xCu);
      if (SHIBYTE(__p[2]) < 0) {
        operator delete(__p[0]);
      }
    }

    return 0.0;
  }
  return v4;
}

void sub_1B4C6CE50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

CFArrayRef CVNLPLanguageModelCopyConditionalProbabilities(uint64_t a1, const void *a2, CFTypeRef cf)
{
  if (cf) {
    CFRetain(cf);
  }
  sub_1B4C316B8(&cfa, cf);
  v26[0] = 0;
  v26[1] = 0;
  uint64_t v27 = 0;
  if (cfa)
  {
    v24[0] = &cfa;
    sub_1B4C315C8((const __CFString ***)v24, &v28);
    *(_OWORD *)BOOL v26 = v28;
    uint64_t v27 = v29;
    if (cfa) {
      CFRelease(cfa);
    }
  }
  if (!a2 || (CFTypeID TypeID = CFArrayGetTypeID(), TypeID != CFGetTypeID(a2)))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not convert");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  int Count = CFArrayGetCount((CFArrayRef)a2);
  std::string __p = 0;
  unint64_t v22 = 0;
  unint64_t v23 = 0;
  sub_1B4BBF2D0((uint64_t *)&__p, Count);
  if (Count >= 1)
  {
    CFIndex v8 = 0;
    uint64_t v9 = Count;
    do
    {
      CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex((CFArrayRef)a2, v8);
      if (!ValueAtIndex || (CFTypeID v12 = CFStringGetTypeID(), v12 != CFGetTypeID(ValueAtIndex)))
      {
        uint64_t v19 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v19, "Could not convert");
        __cxa_throw(v19, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      sub_1B4C31780(ValueAtIndex, &v28);
      uint64_t v13 = v22;
      if ((unint64_t)v22 < v23)
      {
        long long v10 = v28;
        *((void *)v22 + 2) = v29;
        *uint64_t v13 = v10;
        unint64_t v22 = (char *)v13 + 24;
      }
      else
      {
        unint64_t v22 = sub_1B4BFB6B0(&__p, (uint64_t)&v28);
        if (SHIBYTE(v29) < 0) {
          operator delete((void *)v28);
        }
      }
      ++v8;
    }
    while (v9 != v8);
  }
  sub_1B4C6957C(a1 + 16, (uint64_t *)&__p, v24);
  unint64_t v14 = (char *)__p;
  if (__p)
  {
    size_t v15 = v22;
    CFTypeRef v16 = __p;
    if (v22 != __p)
    {
      do
      {
        if (*(v15 - 1) < 0) {
          operator delete(*((void **)v15 - 3));
        }
        v15 -= 24;
      }
      while (v15 != v14);
      CFTypeRef v16 = __p;
    }
    unint64_t v22 = v14;
    operator delete(v16);
  }
  CFArrayRef v17 = sub_1B4C72428((float **)v24);
  if (v24[0])
  {
    v24[1] = v24[0];
    operator delete(v24[0]);
  }
  if (SHIBYTE(v27) < 0) {
    operator delete(v26[0]);
  }
  return v17;
}

void sub_1B4C6D220(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_1B4C31674((const void **)va);
  _Unwind_Resume(a1);
}

void sub_1B4C6D238(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a13)
  {
    operator delete(a13);
    if (a22 < 0)
    {
LABEL_3:
      operator delete(__p);
      _Unwind_Resume(exception_object);
    }
  }
  else if (a22 < 0)
  {
    goto LABEL_3;
  }
  _Unwind_Resume(exception_object);
}

CFArrayRef CVNLPLanguageModelCopyNextTokenConditionalProbabilitiesOverVocabulary(uint64_t a1, CFTypeRef cf)
{
  if (cf) {
    CFRetain(cf);
  }
  sub_1B4C316B8(&cfa, cf);
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v48 = 0;
  if (cfa)
  {
    p_CFTypeRef cfa = &cfa;
    sub_1B4C315C8((const __CFString ***)&p_cfa, &v43);
    *(_OWORD *)std::string __p = v43;
    uint64_t v48 = v44;
    if (cfa) {
      CFRelease(cfa);
    }
  }
  LOBYTE(v41) = 0;
  char v42 = 0;
  sub_1B4C69724(a1 + 16, (uint64_t)&v41, 1, (uint64_t)&v43);
  if (v42 && v41) {
    CFRelease(v41);
  }
  uint64_t v4 = v44;
  unint64_t v5 = (*(uint64_t (**)(void))(**(void **)(a1 + 120) + 88))(*(void *)(a1 + 120));
  unint64_t v6 = v5;
  p_CFTypeRef cfa = 0;
  long long v39 = 0;
  double v40 = 0;
  if (v5)
  {
    if (v5 >> 62) {
      sub_1B4BB3244();
    }
    uint64_t v7 = v5;
    CFIndex v8 = (float *)operator new(4 * v5);
    p_CFTypeRef cfa = (CFTypeRef *)v8;
    double v40 = &v8[v6];
    bzero(v8, 4 * v6);
    long long v39 = &v8[v7];
  }
  else
  {
    CFIndex v8 = 0;
  }
  unint64_t v9 = (*(uint64_t (**)(void))(**(void **)(a1 + 120) + 88))(*(void *)(a1 + 120));
  if (v9)
  {
    uint64_t v10 = v45;
    if (!v43)
    {
      uint64_t v20 = v44;
      BOOL v21 = v9 >= 0xC && v44 == 1;
      if (v21 && (uint64_t v22 = 4 * v4 + v45, (unint64_t)v8 - v22 + 4 >= 0x20))
      {
        unint64_t v23 = v9 & 0xFFFFFFFFFFFFFFF8;
        unint64_t v34 = (long long *)(v22 + 12);
        unsigned __int8 v35 = v8 + 4;
        unint64_t v36 = v9 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          long long v37 = *v34;
          *(v35 - 1) = *(v34 - 1);
          *unsigned __int8 v35 = v37;
          v34 += 2;
          v35 += 2;
          v36 -= 8;
        }
        while (v36);
        if (v9 == v23) {
          goto LABEL_30;
        }
      }
      else
      {
        unint64_t v23 = 0;
      }
      unint64_t v24 = v9 - v23;
      BOOL v25 = &v8[v23];
      BOOL v26 = (float *)(v10 + 4 * (v4 + v23 * v20) - 4);
      uint64_t v27 = 4 * v20;
      do
      {
        *v25++ = *v26;
        BOOL v26 = (float *)((char *)v26 + v27);
        --v24;
      }
      while (v24);
      goto LABEL_30;
    }
    uint64_t v11 = v4 - 1;
    uint64_t v12 = *((void *)&v43 + 1);
    if (v9 < 8 || (uint64_t v13 = 4 * *((void *)&v43 + 1) * v11, (unint64_t)v8 - v45 - v13 < 0x20))
    {
      unint64_t v14 = 0;
LABEL_18:
      unint64_t v15 = v9 - v14;
      uint64_t v16 = 4 * v14;
      CFArrayRef v17 = &v8[v14];
      uint64_t v18 = (int *)(v10 + v16 + 4 * v12 * v11);
      do
      {
        int v19 = *v18++;
        *(_DWORD *)v17++ = v19;
        --v15;
      }
      while (v15);
      goto LABEL_30;
    }
    unint64_t v14 = v9 & 0xFFFFFFFFFFFFFFF8;
    size_t v30 = (long long *)(v13 + v45 + 16);
    int64_t v31 = v8 + 4;
    unint64_t v32 = v9 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      long long v33 = *v30;
      *(v31 - 1) = *(v30 - 1);
      *int64_t v31 = v33;
      v30 += 2;
      v31 += 2;
      v32 -= 8;
    }
    while (v32);
    if (v9 != v14) {
      goto LABEL_18;
    }
  }
LABEL_30:
  CFArrayRef v28 = sub_1B4C72428((float **)&p_cfa);
  if (v8) {
    operator delete(v8);
  }
  if (SHIBYTE(v48) < 0) {
    operator delete(__p[0]);
  }
  return v28;
}

void sub_1B4C6D5D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  sub_1B4C31674((const void **)va);
  _Unwind_Resume(a1);
}

void sub_1B4C6D5EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (v24) {
    operator delete(v24);
  }
  if (a24 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

CFArrayRef CVNLPLanguageModelCopyConditionalProbabilitiesForTokenIDs(uint64_t a1, const void *a2, const void *a3)
{
  if (!a2 || (CFTypeID TypeID = CFArrayGetTypeID(), TypeID != CFGetTypeID(a2)))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1B4C31770(exception);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  sub_1B4C59C64((const __CFArray *)a2, (char **)&v28);
  if (!a3 || (CFTypeID v7 = CFArrayGetTypeID(), v7 != CFGetTypeID(a3)))
  {
    BOOL v25 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v25, "Could not convert");
    __cxa_throw(v25, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  sub_1B4C59C64((const __CFArray *)a3, (char **)&__p);
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  CFIndex v8 = v28;
  int64_t v9 = v29 - (unsigned char *)v28;
  if (v29 == v28)
  {
    uint64_t v11 = 0;
    uint64_t v10 = 0;
  }
  else
  {
    if (v9 < 0) {
      sub_1B4BB3244();
    }
    uint64_t v10 = (char *)operator new(v29 - (unsigned char *)v28);
    uint64_t v11 = &v10[4 * (v9 >> 2)];
    memcpy(v10, v8, v9);
  }
  uint64_t v12 = a1 + 16;
  uint64_t v13 = (v27 - (unsigned char *)__p) >> 2;
  char v36 = 0;
  char v37 = 0;
  LOBYTE(v38) = 0;
  char v39 = 0;
  sub_1B4C37CF8(v12, (uint32x4_t *)__p, (uint64_t *)v13, (uint64_t)&v38);
  if (v39 && v38) {
    CFRelease(v38);
  }
  uint64_t OutputDimension = MRLNeuralNetworkGetOutputDimension();
  uint64_t Output = MRLNeuralNetworkGetOutput();
  int64_t v31 = 0;
  unint64_t v32 = 0;
  size_t v30 = 0;
  if (v11 == v10)
  {
    uint64_t v16 = 0;
    CFArrayRef v17 = 0;
    if (!v10)
    {
      uint64_t v18 = __p;
      if (!__p) {
        goto LABEL_16;
      }
      goto LABEL_15;
    }
  }
  else
  {
    int64_t v21 = v11 - v10;
    if (v11 - v10 < 0) {
      sub_1B4BB3244();
    }
    uint64_t v22 = Output;
    uint64_t v16 = (float *)operator new(v11 - v10);
    size_t v30 = v16;
    unint64_t v32 = &v16[v21 >> 2];
    bzero(v16, v21);
    uint64_t v23 = 0;
    int64_t v31 = (float *)((char *)v16 + v21);
    do
    {
      v16[v23] = *(float *)(v22 + 4 * (OutputDimension * (v13 - 1) + *(unsigned int *)&v10[4 * v23]));
      ++v23;
    }
    while (v21 >> 2 != v23);
  }
  operator delete(v10);
  CFArrayRef v17 = v16;
  uint64_t v18 = __p;
  if (__p)
  {
LABEL_15:
    uint64_t v27 = v18;
    operator delete(v18);
  }
LABEL_16:
  if (v28)
  {
    uint64_t v29 = v28;
    operator delete(v28);
  }
  CFArrayRef v19 = sub_1B4C72428(&v30);
  if (v17)
  {
    int64_t v31 = v17;
    operator delete(v17);
  }
  return v19;
}

void sub_1B4C6D8E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  uint64_t v22 = v21;
  if (v22) {
    operator delete(v22);
  }
  _Unwind_Resume(exception_object);
}

CFArrayRef CVNLPLanguageModelCopyNextTokenIDConditionalProbabilitiesOverVocabulary(uint64_t a1, const void *a2)
{
  if (!a2 || (CFTypeID TypeID = CFArrayGetTypeID(), TypeID != CFGetTypeID(a2)))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1B4C31770(exception);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  sub_1B4C59C64((const __CFArray *)a2, (char **)&__p);
  LOBYTE(cf) = 0;
  char v40 = 0;
  sub_1B4C37B88(a1 + 16, (uint64_t)&__p, (uint64_t)&cf, 1, (uint64_t)&v44);
  if (v40 && cf) {
    CFRelease(cf);
  }
  if (__p)
  {
    char v42 = (char *)__p;
    operator delete(__p);
  }
  uint64_t v5 = v46;
  unint64_t v6 = (*(uint64_t (**)(void))(**(void **)(a1 + 120) + 88))(*(void *)(a1 + 120));
  char v42 = 0;
  long long v43 = 0;
  std::string __p = 0;
  if (v6)
  {
    unint64_t v7 = v6;
    if (v6 >> 62) {
      sub_1B4BB3244();
    }
    uint64_t v8 = 4 * v6;
    int64_t v9 = operator new(4 * v6);
    std::string __p = v9;
    long long v43 = (char *)v9 + 4 * v7;
    bzero(v9, 4 * v7);
    char v42 = (char *)v9 + v8;
  }
  else
  {
    int64_t v9 = 0;
  }
  unint64_t v10 = (*(uint64_t (**)(void))(**(void **)(a1 + 120) + 88))(*(void *)(a1 + 120));
  if (v10)
  {
    uint64_t v11 = v47;
    if (!v44)
    {
      uint64_t v21 = v46;
      BOOL v22 = v10 >= 0xC && v46 == 1;
      if (v22 && (unint64_t)v9 + -v47 + -4 * v5 + 4 >= 0x20)
      {
        unint64_t v23 = v10 & 0xFFFFFFFFFFFFFFF8;
        uint64_t v34 = (long long *)(4 * v5 + v47 + 12);
        uint64_t v35 = v9 + 1;
        unint64_t v36 = v10 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          long long v37 = *v34;
          *(v35 - 1) = *(v34 - 1);
          *uint64_t v35 = v37;
          v34 += 2;
          v35 += 2;
          v36 -= 8;
        }
        while (v36);
        if (v10 == v23) {
          goto LABEL_29;
        }
      }
      else
      {
        unint64_t v23 = 0;
      }
      unint64_t v24 = v10 - v23;
      BOOL v25 = (_DWORD *)v9 + v23;
      BOOL v26 = (_DWORD *)(v11 + 4 * (v5 + v23 * v21) - 4);
      uint64_t v27 = 4 * v21;
      do
      {
        *v25++ = *v26;
        BOOL v26 = (_DWORD *)((char *)v26 + v27);
        --v24;
      }
      while (v24);
      goto LABEL_29;
    }
    uint64_t v12 = v5 - 1;
    uint64_t v13 = v45;
    if (v10 < 8 || (uint64_t v14 = 4 * v45 * v12, (unint64_t)v9 - v47 - v14 < 0x20))
    {
      unint64_t v15 = 0;
LABEL_17:
      unint64_t v16 = v10 - v15;
      uint64_t v17 = 4 * v15;
      uint64_t v18 = (_DWORD *)v9 + v15;
      CFArrayRef v19 = (int *)(v11 + v17 + 4 * v13 * v12);
      do
      {
        int v20 = *v19++;
        *v18++ = v20;
        --v16;
      }
      while (v16);
      goto LABEL_29;
    }
    unint64_t v15 = v10 & 0xFFFFFFFFFFFFFFF8;
    size_t v30 = (long long *)(v14 + v47 + 16);
    int64_t v31 = v9 + 1;
    unint64_t v32 = v10 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      long long v33 = *v30;
      *(v31 - 1) = *(v30 - 1);
      *int64_t v31 = v33;
      v30 += 2;
      v31 += 2;
      v32 -= 8;
    }
    while (v32);
    if (v10 != v15) {
      goto LABEL_17;
    }
  }
LABEL_29:
  CFArrayRef v28 = sub_1B4C72428((float **)&__p);
  if (v9) {
    operator delete(v9);
  }
  return v28;
}

void sub_1B4C6DC88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (v13) {
    operator delete(v13);
  }
  _Unwind_Resume(exception_object);
}

float CVNLPLanguageModelConditionalProbabilityForTokenID(uint64_t a1, unsigned int a2, uint32x4_t *a3, uint64_t *a4)
{
  return sub_1B4C6DCE4(a1 + 16, a2, a3, a4);
}

float sub_1B4C6DCE4(uint64_t a1, unsigned int a2, uint32x4_t *a3, uint64_t *a4)
{
  LOBYTE(cf) = 0;
  char v9 = 0;
  sub_1B4C37CF8(a1, a3, a4, (uint64_t)&cf);
  if (v9 && cf) {
    CFRelease(cf);
  }
  uint64_t OutputDimension = MRLNeuralNetworkGetOutputDimension();
  return *(float *)(MRLNeuralNetworkGetOutput() + 4 * (OutputDimension * ((void)a4 - 1) + a2));
}

void sub_1B4C6DD84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_1B4C6DDA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void CVNLPLanguageModelLogConditionalProbability(uint64_t a1, const __CFString *a2, const void *a3)
{
  float v3 = CVNLPLanguageModelConditionalProbabilityForTokenString_0(a1, a2, a3);
  logf(v3);
}

void CVNLPLanguageModelLogConditionalProbabilityForTokenString(uint64_t a1, const __CFString *a2, const void *a3)
{
  float v3 = CVNLPLanguageModelConditionalProbabilityForTokenString_0(a1, a2, a3);
  logf(v3);
}

float CVNLPLanguageModelLogConditionalProbabilityForTokenID(uint64_t a1, unsigned int a2, uint32x4_t *a3, uint64_t *a4)
{
  float v4 = sub_1B4C6DCE4(a1 + 16, a2, a3, a4);
  return logf(v4);
}

float CVNLPLanguageModelLogJointProbability(uint64_t a1, CFTypeRef cf)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a1 + 120);
  if (cf) {
    CFRetain(cf);
  }
  sub_1B4C316B8(&cfa, cf);
  v40[0] = 0;
  v40[1] = 0;
  uint64_t v41 = 0;
  if (cfa)
  {
    p_CFTypeRef cfa = &cfa;
    sub_1B4C315C8((const __CFString ***)&p_cfa, buf);
    *(_OWORD *)char v40 = *(_OWORD *)buf;
    uint64_t v41 = *(void *)&buf[16];
    if (cfa) {
      CFRelease(cfa);
    }
  }
  LOBYTE(v33) = 0;
  char v34 = 0;
  sub_1B4C69724(a1 + 16, (uint64_t)&v33, 1, (uint64_t)&p_cfa);
  if (v34 && v33) {
    CFRelease(v33);
  }
  sub_1B4C50964((uint64_t)v40, (uint64_t)&__p);
  uint64_t v6 = v36;
  uint64_t v5 = v37;
  if (v37 == 0xAAAAAAAAAAAAAAABLL * (((char *)v32 - (unsigned char *)__p) >> 3) + 1
    && v6 == (*(uint64_t (**)(uint64_t))(*(void *)v4 + 88))(v4))
  {
    uint64_t v7 = v5 - 1;
    if (v5 == 1)
    {
      float v10 = 0.0;
      int v18 = *(char *)(v4 + 55);
      if ((v18 & 0x80000000) == 0)
      {
LABEL_25:
        uint64_t v19 = v4 + 32;
        uint64_t v20 = v18;
        goto LABEL_41;
      }
    }
    else
    {
      uint64_t v8 = 0;
      uint64_t v9 = 0;
      float v10 = 0.0;
      do
      {
        uint64_t v11 = (char **)((char *)__p + v8);
        if (*((char *)__p + v8 + 23) < 0)
        {
          uint64_t v13 = *v11;
          uint64_t v12 = v11[1];
        }
        else
        {
          uint64_t v12 = (char *)*((unsigned __int8 *)__p + v8 + 23);
          uint64_t v13 = (char *)__p + v8;
        }
        unsigned int v14 = (*(uint64_t (**)(uint64_t, char *, char *))(*(void *)v4 + 40))(v4, v13, v12);
        uint64_t v15 = v14;
        if (p_cfa) {
          uint64_t v16 = v9;
        }
        else {
          uint64_t v16 = v14;
        }
        if (!p_cfa) {
          uint64_t v15 = v9;
        }
        uint64_t v17 = &v37;
        if (p_cfa) {
          uint64_t v17 = &v36;
        }
        float v10 = logf(*(float *)(v38 + 4 * (v15 + *v17 * v16))) + v10;
        ++v9;
        v8 += 24;
      }
      while (v7 != v9);
      int v18 = *(char *)(v4 + 55);
      if ((v18 & 0x80000000) == 0) {
        goto LABEL_25;
      }
    }
    uint64_t v19 = *(void *)(v4 + 32);
    uint64_t v20 = *(void *)(v4 + 40);
LABEL_41:
    unsigned int v25 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4 + 40))(v4, v19, v20);
    uint64_t v26 = v25;
    if (p_cfa) {
      uint64_t v27 = v7;
    }
    else {
      uint64_t v27 = v25;
    }
    if (!p_cfa) {
      uint64_t v26 = v7;
    }
    CFArrayRef v28 = &v36;
    if (!p_cfa) {
      CFArrayRef v28 = &v37;
    }
    float v22 = logf(*(float *)(v38 + 4 * (v26 + *v28 * v27))) + v10;
    unint64_t v23 = (void **)__p;
    if (!__p) {
      goto LABEL_49;
    }
    goto LABEL_31;
  }
  if (qword_1E9D40AF0 != -1) {
    dispatch_once(&qword_1E9D40AF0, &unk_1F0D56000);
  }
  uint64_t v21 = (id)qword_1E9D40AE8;
  if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
  {
    uint64_t v30 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 88))(v4);
    *(_DWORD *)long long buf = 134218752;
    *(void *)&uint8_t buf[4] = v30;
    *(_WORD *)&buf[12] = 2048;
    *(void *)&buf[14] = 1 - 0x5555555555555555 * (((char *)v32 - (unsigned char *)__p) >> 3);
    *(_WORD *)&buf[22] = 2048;
    uint64_t v43 = v6;
    __int16 v44 = 2048;
    uint64_t v45 = v5;
    _os_log_error_impl(&dword_1B4BAD000, v21, OS_LOG_TYPE_ERROR, "Expected output sequence to have dimensions (vocab=%ld, time=%ld), but got (vocab=%ld, time=%ld)", buf, 0x2Au);
  }

  float v22 = -INFINITY;
  unint64_t v23 = (void **)__p;
  if (!__p)
  {
LABEL_49:
    if ((SHIBYTE(v41) & 0x80000000) == 0) {
      return v22;
    }
    goto LABEL_33;
  }
LABEL_31:
  unint64_t v24 = v32;
  if (v32 == v23)
  {
    unint64_t v32 = v23;
    operator delete(v23);
    if (SHIBYTE(v41) < 0) {
LABEL_33:
    }
      operator delete(v40[0]);
  }
  else
  {
    do
    {
      if (*((char *)v24 - 1) < 0) {
        operator delete(*(v24 - 3));
      }
      v24 -= 3;
    }
    while (v24 != v23);
    unint64_t v32 = v23;
    operator delete(__p);
    if (SHIBYTE(v41) < 0) {
      goto LABEL_33;
    }
  }
  return v22;
}

void sub_1B4C6E284(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t CVNLPLanguageModelWithStateCreate(const void *a1)
{
  if (qword_1EB9FE3F8 != -1) {
    dispatch_once(&qword_1EB9FE3F8, &unk_1F0D52FB0);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  *(unsigned char *)(Instance + 16) = 0;
  *(unsigned char *)(Instance + 24) = 0;
  *(void *)(Instance + 32) = 0;
  *(void *)(Instance + 40) = 0;
  *(void *)(Instance + 48) = 0;
  float v3 = (void **)CFRetain(a1);
  *(void *)(Instance + 56) = v3;
  (*(void (**)(void **__return_ptr))(*v3[15] + 24))(__p);
  sub_1B4C6E80C(Instance + 16, (uint64_t)__p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return Instance;
}

void sub_1B4C6E430(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16)
{
  if (__p)
  {
    operator delete(__p);
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      uint64_t v20 = *v18;
      if (!*v18) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a9);
  uint64_t v20 = *v18;
  if (!*v18)
  {
LABEL_4:
    sub_1B4C33E4C(v17);
    _Unwind_Resume(a1);
  }
LABEL_7:
  *(void *)(v16 + 40) = v20;
  operator delete(v20);
  sub_1B4C33E4C(v17);
  _Unwind_Resume(a1);
}

uint64_t CVNLPLanguageModelWithStateUpdateWithContext(uint64_t a1, CFTypeRef cf)
{
  if (cf) {
    CFRetain(cf);
  }
  sub_1B4C316B8(&cfa, cf);
  v11[0] = 0;
  v11[1] = 0;
  uint64_t v12 = 0;
  if (cfa)
  {
    v9[0] = &cfa;
    sub_1B4C315C8((const __CFString ***)v9, __p);
    *(_OWORD *)uint64_t v11 = *(_OWORD *)__p;
    uint64_t v12 = v14;
    if (cfa) {
      CFRelease(cfa);
    }
  }
  if (SHIBYTE(v12) < 0)
  {
    uint64_t v6 = v11[0];
    if (!v11[1])
    {
      uint64_t v8 = 0;
      goto LABEL_21;
    }
    uint64_t v4 = a1 + 56;
    uint64_t v5 = *(void *)(*(void *)(a1 + 56) + 120);
  }
  else
  {
    if (!HIBYTE(v12)) {
      return 0;
    }
    uint64_t v4 = a1 + 56;
    uint64_t v5 = *(void *)(*(void *)(a1 + 56) + 120);
  }
  (*(void (**)(void **__return_ptr))(*(void *)v5 + 24))(v9);
  (*(void (**)(void **__return_ptr))(**(void **)(*(void *)v4 + 120) + 24))(__p);
  sub_1B4C6E80C(a1 + 16, (uint64_t)__p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v9[0])
  {
    v9[1] = v9[0];
    operator delete(v9[0]);
  }
  if ((SHIBYTE(v12) & 0x80000000) == 0) {
    return 1;
  }
  uint64_t v8 = 1;
  uint64_t v6 = v11[0];
LABEL_21:
  operator delete(v6);
  return v8;
}

void sub_1B4C6E688(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, char a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20)
{
  if (__p)
  {
    operator delete(__p);
    uint64_t v21 = a9;
    if (!a9)
    {
LABEL_3:
      if ((a18 & 0x80000000) == 0) {
LABEL_8:
      }
        _Unwind_Resume(exception_object);
LABEL_7:
      operator delete(a13);
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    uint64_t v21 = a9;
    if (!a9) {
      goto LABEL_3;
    }
  }
  operator delete(v21);
  if ((a18 & 0x80000000) == 0) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

BOOL CVNLPLanguageModelWithStateUpdateWithContextIDs(uint64_t a1, const void *a2)
{
  if (!a2 || (CFTypeID TypeID = CFArrayGetTypeID(), TypeID != CFGetTypeID(a2)))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1B4C31770(exception);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  sub_1B4C59C64((const __CFArray *)a2, (char **)&__p);
  uint64_t v6 = __p;
  uint64_t v5 = v11;
  if (v11 == __p)
  {
    uint64_t v7 = v11;
    if (!v11) {
      return v5 != v6;
    }
    goto LABEL_5;
  }
  sub_1B4C6E80C(a1 + 16, (uint64_t)&__p);
  uint64_t v7 = __p;
  if (__p)
  {
LABEL_5:
    uint64_t v11 = v7;
    operator delete(v7);
  }
  return v5 != v6;
}

void sub_1B4C6E7DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B4C6E7F8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *sub_1B4C6E80C(uint64_t a1, uint64_t a2)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a1 + 40) + 16;
  if (*(void *)(a2 + 8) != *(void *)a2)
  {
    __int32 v5 = **(_DWORD **)a2;
    uint64_t v6 = (uint32x4_t *)operator new(4uLL);
    v6->i32[0] = v5;
    LOBYTE(v33) = 0;
    char v34 = 0;
    int v7 = *(unsigned __int8 *)(a1 + 8);
    if (*(unsigned char *)(a1 + 8))
    {
      CFTypeRef v8 = *(CFTypeRef *)a1;
      if (*(void *)a1)
      {
        CFRetain(*(CFTypeRef *)a1);
        CFTypeRef v33 = v8;
        char v34 = 1;
        LOBYTE(cf) = 0;
        LOBYTE(v39[0]) = 0;
        CFRetain(v8);
      }
      else
      {
        CFTypeRef v33 = 0;
        char v34 = 1;
      }
      CFTypeRef cf = v8;
      char v9 = 1;
    }
    else
    {
      char v9 = 0;
      LOBYTE(cf) = 0;
    }
    LOBYTE(v39[0]) = v9;
    sub_1B4C37CF8(v3, v6, (uint64_t *)1, (uint64_t)&cf);
    if (LOBYTE(v39[0]) && cf) {
      CFRelease(cf);
    }
    if (v7 && v33) {
      CFRelease(v33);
    }
    float v10 = (const void *)MRLNeuralNetworkCopyStates();
    sub_1B4C4304C(&cf, v10);
    CFTypeRef v11 = cf;
    sub_1B4C71324(a1, cf, 1u);
    if (v11) {
      CFRelease(v11);
    }
    operator delete(v6);
    uint64_t v12 = *(__int32 **)a2;
    if (*(void *)(a2 + 8) - *(void *)a2 >= 5uLL)
    {
      unint64_t v13 = 1;
      do
      {
        __int32 v14 = v12[v13];
        uint64_t v15 = (uint32x4_t *)operator new(4uLL);
        v15->i32[0] = v14;
        LOBYTE(v33) = 0;
        char v34 = 0;
        int v16 = *(unsigned __int8 *)(a1 + 8);
        if (*(unsigned char *)(a1 + 8))
        {
          CFTypeRef v17 = *(CFTypeRef *)a1;
          if (*(void *)a1)
          {
            CFRetain(*(CFTypeRef *)a1);
            CFTypeRef v33 = v17;
            char v34 = 1;
            LOBYTE(cf) = 0;
            LOBYTE(v39[0]) = 0;
            CFRetain(v17);
          }
          else
          {
            CFTypeRef v33 = 0;
            char v34 = 1;
          }
          CFTypeRef cf = v17;
          char v18 = 1;
        }
        else
        {
          char v18 = 0;
          LOBYTE(cf) = 0;
        }
        LOBYTE(v39[0]) = v18;
        sub_1B4C37CF8(v3, v15, (uint64_t *)1, (uint64_t)&cf);
        if (LOBYTE(v39[0]) && cf) {
          CFRelease(cf);
        }
        if (v16 && v33) {
          CFRelease(v33);
        }
        uint64_t v19 = (const void *)MRLNeuralNetworkCopyStates();
        sub_1B4C4304C(&cf, v19);
        CFTypeRef v20 = cf;
        sub_1B4C71324(a1, cf, 1u);
        if (v20) {
          CFRelease(v20);
        }
        operator delete(v15);
        ++v13;
        uint64_t v12 = *(__int32 **)a2;
      }
      while (v13 < (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
    }
  }
  unint64_t OutputDimension = MRLNeuralNetworkGetOutputDimension();
  uint64_t Output = (const void *)MRLNeuralNetworkGetOutput();
  int v29 = 0;
  uint64_t v30 = 1;
  unint64_t v31 = OutputDimension;
  unint64_t v32 = Output;
  char v40 = v39;
  uint64_t v41 = 0;
  CFTypeRef cf = Output;
  v39[0] = &unk_1F0D55680;
  v39[1] = &v29;
  unint64_t v42 = OutputDimension;
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  if (OutputDimension)
  {
    if (OutputDimension >> 62) {
      sub_1B4BB3244();
    }
    unint64_t v23 = (char *)operator new(4 * OutputDimension);
    unint64_t v24 = &v23[4 * OutputDimension];
    bzero(v23, 4 * OutputDimension);
    uint64_t v26 = (void *)(a1 + 16);
    unsigned int v25 = *(void **)(a1 + 16);
    uint64_t v27 = v39;
    if (v25) {
      goto LABEL_36;
    }
  }
  else
  {
    unint64_t v24 = 0;
    unint64_t v23 = 0;
    uint64_t v26 = (void *)(a1 + 16);
    unsigned int v25 = *(void **)(a1 + 16);
    uint64_t v27 = v39;
    if (v25)
    {
LABEL_36:
      *(void *)(a1 + 24) = v25;
      operator delete(v25);
      *uint64_t v26 = 0;
      v26[1] = 0;
      v26[2] = 0;
      unint64_t OutputDimension = v42;
      uint64_t Output = cf;
      uint64_t v27 = v40;
    }
  }
  *(void *)(a1 + 16) = v23;
  *(void *)(a1 + 24) = v24;
  *(void *)(a1 + 32) = v24;
  uint64_t result = memmove(v23, Output, 4 * OutputDimension);
  if (v27 == v39) {
    return (void *)(*(uint64_t (**)(void *))(v39[0] + 32))(v39);
  }
  if (v27) {
    return (void *)(*(uint64_t (**)(void *))(*v27 + 40))(v27);
  }
  return result;
}

void sub_1B4C6EC00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, char a19)
{
  if (a2) {
    sub_1B4BB21F0(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B4C6ECA0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

float CVNLPLanguageModelWithStateConditionalProbabilityForTokenID(uint64_t a1, unsigned int a2)
{
  return *(float *)(*(void *)(a1 + 32) + 4 * a2);
}

float CVNLPLanguageModelWithStateConditionalProbability(uint64_t a1, const __CFString *a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (!a2)
  {
    if (qword_1E9D40AF0 != -1) {
      dispatch_once(&qword_1E9D40AF0, &unk_1F0D56000);
    }
    CFDictionaryRef v2 = (id)qword_1E9D40AE8;
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      char v9 = 20;
      strcpy(__p, "Received null token.");
      *(_DWORD *)long long buf = 136315138;
      *(void *)&uint8_t buf[4] = __p;
      _os_log_error_impl(&dword_1B4BAD000, v2, OS_LOG_TYPE_ERROR, "%s", buf, 0xCu);
      if (v9 < 0) {
        operator delete(*(void **)__p);
      }
    }

    return 0.0;
  }
  sub_1B4C6EF48(__p, a2);
  if (v9 < 0)
  {
    if (*(void *)&__p[8])
    {
      uint64_t v6 = *(char **)__p;
LABEL_21:
      float v3 = *(float *)(*(void *)(a1 + 32)
                    + 4
                    * (*(unsigned int (**)(void, char *))(**(void **)(*(void *)(a1 + 56) + 120) + 40))(*(void *)(*(void *)(a1 + 56) + 120), v6));
      if ((v9 & 0x80000000) == 0) {
        return v3;
      }
      goto LABEL_17;
    }
  }
  else if (v9)
  {
    uint64_t v6 = __p;
    goto LABEL_21;
  }
  if (qword_1E9D40AF0 != -1) {
    dispatch_once(&qword_1E9D40AF0, &unk_1F0D56000);
  }
  int v7 = (id)qword_1E9D40AE8;
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    char v11 = 21;
    strcpy((char *)buf, "Received empty token.");
    *(_DWORD *)uint64_t v12 = 136315138;
    unint64_t v13 = buf;
    _os_log_error_impl(&dword_1B4BAD000, v7, OS_LOG_TYPE_ERROR, "%s", v12, 0xCu);
    if (v11 < 0) {
      operator delete(*(void **)buf);
    }
  }

  float v3 = 0.0;
  if (v9 < 0) {
LABEL_17:
  }
    operator delete(*(void **)__p);
  return v3;
}

void sub_1B4C6EF20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_1B4C6EF48(void *a1, const __CFString *a2)
{
  CFTypeID TypeID = CFStringGetTypeID();
  if (TypeID != CFGetTypeID(a2))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1B4C31770(exception);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  return sub_1B4C31780(a2, a1);
}

void sub_1B4C6EFD8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

CFArrayRef CVNLPLanguageModelWithStateCopyConditionalProbabilitiesOverVocabulary(uint64_t a1)
{
  int v7 = 0;
  CFTypeRef v8 = 0;
  char v9 = 0;
  CFDictionaryRef v2 = *(unsigned char **)(a1 + 32);
  uint64_t v1 = *(unsigned char **)(a1 + 40);
  int64_t v3 = v1 - v2;
  if (v1 == v2)
  {
    uint64_t v4 = 0;
  }
  else
  {
    if (v3 < 0) {
      sub_1B4BB3244();
    }
    uint64_t v4 = (float *)operator new(v1 - v2);
    int v7 = v4;
    char v9 = &v4[v3 >> 2];
    memcpy(v4, v2, v3);
    CFTypeRef v8 = v9;
  }
  CFArrayRef v5 = sub_1B4C72428(&v7);
  if (v4) {
    operator delete(v4);
  }
  return v5;
}

void sub_1B4C6F08C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (v11) {
    operator delete(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t CVNLPLanguageModelWithStateReset(uint64_t a1)
{
  CFDictionaryRef v2 = (CFTypeRef *)(a1 + 16);
  if (*(unsigned char *)(a1 + 24))
  {
    if (*v2) {
      CFRelease(*v2);
    }
    *(unsigned char *)(a1 + 24) = 0;
  }
  (*(void (**)(void **__return_ptr))(**(void **)(*(void *)(a1 + 56) + 120) + 24))(__p);
  sub_1B4C6E80C((uint64_t)v2, (uint64_t)__p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return 1;
}

void sub_1B4C6F188(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16)
{
  if (__p)
  {
    operator delete(__p);
    if ((a14 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a9);
  _Unwind_Resume(exception_object);
}

uint64_t CVNLPLanguageModelWithStateCreateCopy(uint64_t a1)
{
  if (qword_1EB9FE3F8 != -1) {
    dispatch_once(&qword_1EB9FE3F8, &unk_1F0D52FB0);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  *(unsigned char *)(Instance + 16) = 0;
  *(unsigned char *)(Instance + 24) = 0;
  uint64_t v4 = *(unsigned char **)(a1 + 32);
  int64_t v3 = *(unsigned char **)(a1 + 40);
  int64_t v5 = v3 - v4;
  if (v3 == v4)
  {
    int v7 = 0;
    uint64_t v6 = 0;
  }
  else
  {
    if (v5 < 0) {
      sub_1B4BB3244();
    }
    uint64_t v6 = (char *)operator new(v3 - v4);
    int v7 = &v6[4 * (v5 >> 2)];
    memcpy(v6, v4, v5);
  }
  *(void *)(Instance + 32) = v6;
  *(void *)(Instance + 40) = v7;
  *(void *)(Instance + 48) = v7;
  *(void *)(Instance + 56) = CFRetain(*(CFTypeRef *)(a1 + 56));
  int v8 = *(unsigned __int8 *)(a1 + 24);
  if (*(unsigned char *)(a1 + 24))
  {
    char v9 = *(const void **)(a1 + 16);
    if (v9) {
      CFRetain(v9);
    }
    int v10 = *(unsigned __int8 *)(Instance + 24);
    if (v10 == 1)
    {
LABEL_11:
      if (v10)
      {
        char v11 = *(const void **)(Instance + 16);
        *(void *)(Instance + 16) = v9;
        char v9 = v11;
      }
      if (!v8) {
        return Instance;
      }
LABEL_20:
      if (v9) {
        CFRelease(v9);
      }
      return Instance;
    }
  }
  else
  {
    char v9 = 0;
    int v10 = *(unsigned __int8 *)(Instance + 24);
    if (!*(unsigned char *)(Instance + 24)) {
      goto LABEL_11;
    }
  }
  if (!v10)
  {
    *(void *)(Instance + 16) = v9;
    *(unsigned char *)(Instance + 24) = 1;
    return Instance;
  }
  uint64_t v12 = *(const void **)(Instance + 16);
  if (v12) {
    CFRelease(v12);
  }
  *(unsigned char *)(Instance + 24) = 0;
  if (v8) {
    goto LABEL_20;
  }
  return Instance;
}

void sub_1B4C6F364(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (!__p) {
    sub_1B4BB21F0(a1);
  }
  operator delete(__p);
  sub_1B4BB21F0(a1);
}

CFArrayRef CVNLPLanguageModelCopyPredictions(int a1, const void *a2, CFTypeRef cf)
{
  uint64_t v147 = *MEMORY[0x1E4F143B8];
  if (cf) {
    CFRetain(cf);
  }
  sub_1B4C59934(&theDict, cf);
  if (a2) {
    CFRetain(a2);
  }
  sub_1B4C316B8(&cfa, a2);
  v136[0] = 0;
  v136[1] = 0;
  uint64_t v137 = 0;
  if (cfa)
  {
    __s1[0] = &cfa;
    sub_1B4C315C8((const __CFString ***)__s1, &valuePtr);
    *(_OWORD *)__n128 v136 = valuePtr;
    uint64_t v137 = v144;
    if (cfa) {
      CFRelease(cfa);
    }
  }
  if (!theDict)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  sub_1B4C70AB4(&valuePtr, "Method");
  if (!theDict
    || !(void)valuePtr
    || (CFStringRef Value = (const __CFString *)CFDictionaryGetValue(theDict, (const void *)valuePtr)) == 0)
  {
    __n128 v115 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v115, "Could not find item");
    goto LABEL_293;
  }
  CFTypeID TypeID = CFStringGetTypeID();
  if (TypeID != CFGetTypeID(Value))
  {
    __n128 v115 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v115, "Could not convert");
LABEL_293:
    __cxa_throw(v115, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  sub_1B4C31780(Value, v133);
  if ((void)valuePtr) {
    CFRelease((CFTypeRef)valuePtr);
  }
  if (SHIBYTE(v134) < 0)
  {
    sub_1B4BCA11C(__dst, v133[0], (unint64_t)v133[1]);
  }
  else
  {
    *(_OWORD *)long long __dst = *(_OWORD *)v133;
    __n128 v132 = v134;
  }
  if (SHIBYTE(v132) < 0)
  {
    sub_1B4BCA11C(__p, __dst[0], (unint64_t)__dst[1]);
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)__dst;
    unint64_t v140 = v132;
  }
  if (SHIBYTE(v140) < 0)
  {
    sub_1B4BCA11C(__s1, __p[0], (unint64_t)__p[1]);
  }
  else
  {
    *(_OWORD *)__s1 = *(_OWORD *)__p;
    uint64_t v142 = v140;
  }
  *(void *)&long long valuePtr = 0x594445455247;
  LODWORD(v144) = v126;
  *(_DWORD *)((char *)&v144 + 3) = *(_DWORD *)((char *)&v126 + 3);
  HIBYTE(v144) = 6;
  if (SHIBYTE(v142) >= 0) {
    int v7 = (void *)HIBYTE(v142);
  }
  else {
    int v7 = __s1[1];
  }
  if (v7 == (void *)6)
  {
    p_long long valuePtr = (unsigned __int8 *)&valuePtr;
    if ((HIBYTE(v142) & 0x80) != 0)
    {
      BOOL v17 = memcmp(__s1[0], &valuePtr, (size_t)__s1[1]) == 0;
    }
    else if (HIBYTE(v142))
    {
      uint64_t v9 = HIBYTE(v142) - 1;
      int v10 = __s1;
      do
      {
        int v12 = *(unsigned __int8 *)v10;
        int v10 = (void **)((char *)v10 + 1);
        int v11 = v12;
        int v14 = *p_valuePtr++;
        int v13 = v14;
        BOOL v15 = v9-- != 0;
        char v16 = v15;
        BOOL v17 = v11 == v13;
      }
      while (v11 == v13 && (v16 & 1) != 0);
    }
    else
    {
      BOOL v17 = 1;
    }
  }
  else
  {
    BOOL v17 = 0;
  }
  if (!v17)
  {
    *(void *)&long long valuePtr = 1296123202;
    LODWORD(v144) = v130[0];
    *(_DWORD *)((char *)&v144 + 3) = *(_DWORD *)((char *)v130 + 3);
    HIBYTE(v144) = 4;
    char v18 = SHIBYTE(v142) >= 0 ? (void *)HIBYTE(v142) : __s1[1];
    if (v18 == (void *)4)
    {
      uint64_t v19 = (unsigned __int8 *)&valuePtr;
      if ((HIBYTE(v142) & 0x80) != 0)
      {
        BOOL v17 = memcmp(__s1[0], &valuePtr, (size_t)__s1[1]) == 0;
      }
      else if (HIBYTE(v142))
      {
        uint64_t v20 = HIBYTE(v142) - 1;
        uint64_t v21 = __s1;
        do
        {
          int v23 = *(unsigned __int8 *)v21;
          uint64_t v21 = (void **)((char *)v21 + 1);
          int v22 = v23;
          int v25 = *v19++;
          int v24 = v25;
          BOOL v15 = v20-- != 0;
          char v26 = v15;
          BOOL v17 = v22 == v24;
        }
        while (v22 == v24 && (v26 & 1) != 0);
      }
      else
      {
        BOOL v17 = 1;
      }
    }
    else
    {
      BOOL v17 = 0;
    }
    if (!v17)
    {
      *(void *)&long long valuePtr = 0x4B5F504F54;
      LODWORD(v144) = v129[0];
      *(_DWORD *)((char *)&v144 + 3) = *(_DWORD *)((char *)v129 + 3);
      HIBYTE(v144) = 5;
      uint64_t v27 = SHIBYTE(v142) >= 0 ? (void *)HIBYTE(v142) : __s1[1];
      if (v27 == (void *)5)
      {
        CFArrayRef v28 = (unsigned __int8 *)&valuePtr;
        if ((HIBYTE(v142) & 0x80) != 0)
        {
          BOOL v17 = memcmp(__s1[0], &valuePtr, (size_t)__s1[1]) == 0;
        }
        else if (HIBYTE(v142))
        {
          uint64_t v29 = HIBYTE(v142) - 1;
          uint64_t v30 = __s1;
          do
          {
            int v32 = *(unsigned __int8 *)v30;
            uint64_t v30 = (void **)((char *)v30 + 1);
            int v31 = v32;
            int v34 = *v28++;
            int v33 = v34;
            BOOL v15 = v29-- != 0;
            char v35 = v15;
            BOOL v17 = v31 == v33;
          }
          while (v31 == v33 && (v35 & 1) != 0);
        }
        else
        {
          BOOL v17 = 1;
        }
      }
      else
      {
        BOOL v17 = 0;
      }
      if (!v17)
      {
        *(void *)&long long valuePtr = 0x5355454C43554ELL;
        LODWORD(v144) = v128[0];
        *(_DWORD *)((char *)&v144 + 3) = *(_DWORD *)((char *)v128 + 3);
        HIBYTE(v144) = 7;
        if (SHIBYTE(v142) >= 0) {
          uint64_t v36 = (void *)HIBYTE(v142);
        }
        else {
          uint64_t v36 = __s1[1];
        }
        if (v36 == (void *)7)
        {
          uint64_t v37 = (unsigned __int8 *)&valuePtr;
          if ((HIBYTE(v142) & 0x80) != 0)
          {
            BOOL v17 = memcmp(__s1[0], &valuePtr, (size_t)__s1[1]) == 0;
          }
          else if (HIBYTE(v142))
          {
            uint64_t v38 = HIBYTE(v142) - 1;
            char v39 = __s1;
            do
            {
              int v41 = *(unsigned __int8 *)v39;
              char v39 = (void **)((char *)v39 + 1);
              int v40 = v41;
              int v43 = *v37++;
              int v42 = v43;
              BOOL v15 = v38-- != 0;
              char v44 = v15;
              BOOL v17 = v40 == v42;
            }
            while (v40 == v42 && (v44 & 1) != 0);
          }
          else
          {
            BOOL v17 = 1;
          }
        }
        else
        {
          BOOL v17 = 0;
        }
      }
    }
  }
  if (SHIBYTE(v142) < 0)
  {
    operator delete(__s1[0]);
    if ((SHIBYTE(v140) & 0x80000000) == 0)
    {
LABEL_93:
      if ((SHIBYTE(v132) & 0x80000000) == 0) {
        goto LABEL_94;
      }
      goto LABEL_101;
    }
  }
  else if ((SHIBYTE(v140) & 0x80000000) == 0)
  {
    goto LABEL_93;
  }
  operator delete(__p[0]);
  if ((SHIBYTE(v132) & 0x80000000) == 0)
  {
LABEL_94:
    if (v17) {
      goto LABEL_95;
    }
    goto LABEL_102;
  }
LABEL_101:
  operator delete(__dst[0]);
  if (v17)
  {
LABEL_95:
    if ((SHIBYTE(v134) & 0x80000000) == 0)
    {
      uint64_t v45 = v133;
      switch(HIBYTE(v134))
      {
        case 4:
          if (LODWORD(v133[0]) == 1296123202) {
            goto LABEL_108;
          }
          goto LABEL_154;
        case 5:
          if (LODWORD(v133[0]) != 1599098708 || BYTE4(v133[0]) != 75) {
            goto LABEL_154;
          }
          goto LABEL_156;
        case 6:
          if (LODWORD(v133[0]) != 1162170951 || WORD2(v133[0]) != 22852) {
            goto LABEL_154;
          }
          goto LABEL_132;
        case 7:
          goto LABEL_134;
        default:
          goto LABEL_154;
      }
    }
    switch((unint64_t)v133[1])
    {
      case 4uLL:
        if (*(_DWORD *)v133[0] == 1296123202)
        {
LABEL_108:
          if (theDict)
          {
            sub_1B4C70AB4(&valuePtr, "TopK");
            sub_1B4C72884(theDict, (const void *)valuePtr);
            if ((void)valuePtr) {
              CFRelease((CFTypeRef)valuePtr);
            }
            if (theDict)
            {
              sub_1B4C70AB4(&valuePtr, "Number");
              sub_1B4C72884(theDict, (const void *)valuePtr);
              if ((void)valuePtr) {
                CFRelease((CFTypeRef)valuePtr);
              }
              operator new();
            }
            __n128 v121 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v121, "Could not construct");
            __cxa_throw(v121, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
          __n128 v120 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v120, "Could not construct");
          __cxa_throw(v120, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        return result;
      case 5uLL:
        if (*(_DWORD *)v133[0] == 1599098708 && *((unsigned char *)v133[0] + 4) == 75)
        {
LABEL_156:
          if (theDict)
          {
            sub_1B4C70AB4(&valuePtr, "TopK");
            sub_1B4C72884(theDict, (const void *)valuePtr);
            if ((void)valuePtr) {
              CFRelease((CFTypeRef)valuePtr);
            }
            if (theDict)
            {
              sub_1B4C70AB4(&valuePtr, "Number");
              sub_1B4C72884(theDict, (const void *)valuePtr);
              if ((void)valuePtr) {
                CFRelease((CFTypeRef)valuePtr);
              }
              operator new();
            }
            __n128 v124 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v124, "Could not construct");
            __cxa_throw(v124, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
          __n128 v123 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v123, "Could not construct");
          __cxa_throw(v123, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        return result;
      case 6uLL:
        if (*(_DWORD *)v133[0] == 1162170951 && *((_WORD *)v133[0] + 2) == 22852) {
LABEL_132:
        }
          operator new();
        return result;
      case 7uLL:
        uint64_t v45 = (void **)v133[0];
LABEL_134:
        int v51 = *(_DWORD *)v45;
        int v52 = *(_DWORD *)((char *)v45 + 3);
        if (v51 == 1279481166 && v52 == 1398097228)
        {
          if (theDict)
          {
            sub_1B4C70AB4(&valuePtr, "NucleusThreshold");
            if (theDict && (void)valuePtr && (CFDictionaryRef v54 = CFDictionaryGetValue(theDict, (const void *)valuePtr)) != 0)
            {
              if ((sub_1B4C72934((uint64_t)v54) & 0xFF00000000) != 0)
              {
                if ((void)valuePtr) {
                  CFRelease((CFTypeRef)valuePtr);
                }
                if (theDict)
                {
                  sub_1B4C70AB4(&valuePtr, "Number");
                  sub_1B4C72884(theDict, (const void *)valuePtr);
                  if ((void)valuePtr) {
                    CFRelease((CFTypeRef)valuePtr);
                  }
                  operator new();
                }
                __n128 v125 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v125, "Could not construct");
                __cxa_throw(v125, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
              }
              __n128 v119 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v119, "Could not convert");
            }
            else
            {
              __n128 v119 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v119, "Could not find item");
            }
            __cxa_throw(v119, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
          __n128 v122 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v122, "Could not construct");
          __cxa_throw(v122, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        return result;
      default:
        break;
    }
LABEL_154:
    if (!theDict)
    {
      int v56 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v56, "Could not construct");
      __cxa_throw(v56, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    sub_1B4C70AB4(__s1, "MaxLength");
    if (theDict && __s1[0] && (CFNumberRef v57 = (const __CFNumber *)CFDictionaryGetValue(theDict, __s1[0])) != 0)
    {
      CFTypeID v58 = CFNumberGetTypeID();
      if (v58 == CFGetTypeID(v57))
      {
        switch(CFNumberGetType(v57))
        {
          case kCFNumberSInt8Type:
            LOBYTE(valuePtr) = 0;
            int v59 = CFNumberGetValue(v57, kCFNumberSInt8Type, &valuePtr);
            goto LABEL_197;
          case kCFNumberSInt16Type:
            LOWORD(valuePtr) = 0;
            int v68 = CFNumberGetValue(v57, kCFNumberSInt16Type, &valuePtr);
            goto LABEL_188;
          case kCFNumberSInt32Type:
            LODWORD(valuePtr) = 0;
            int v67 = CFNumberGetValue(v57, kCFNumberSInt32Type, &valuePtr);
            goto LABEL_214;
          case kCFNumberSInt64Type:
            *(void *)&long long valuePtr = 0;
            int v64 = CFNumberGetValue(v57, kCFNumberSInt64Type, &valuePtr);
            goto LABEL_210;
          case kCFNumberFloat32Type:
            LODWORD(valuePtr) = 0;
            int v65 = CFNumberGetValue(v57, kCFNumberFloat32Type, &valuePtr);
            goto LABEL_178;
          case kCFNumberFloat64Type:
            *(void *)&long long valuePtr = 0;
            int v66 = CFNumberGetValue(v57, kCFNumberFloat64Type, &valuePtr);
            goto LABEL_192;
          case kCFNumberCharType:
            LOBYTE(valuePtr) = 0;
            int v59 = CFNumberGetValue(v57, kCFNumberCharType, &valuePtr);
LABEL_197:
            if (v59) {
              unsigned __int8 v69 = valuePtr;
            }
            else {
              unsigned __int8 v69 = 0;
            }
            if ((valuePtr & 0x80u) == 0 || v59 == 0) {
              uint64_t v71 = 0;
            }
            else {
              uint64_t v71 = -256;
            }
            if (!v59) {
              goto LABEL_295;
            }
            uint64_t v61 = v71 & 0xFFFFFFFFFFFFFF00 | v69;
            CFURLRef v62 = __s1[0];
            if (!__s1[0]) {
              goto LABEL_217;
            }
            goto LABEL_216;
          case kCFNumberShortType:
            LOWORD(valuePtr) = 0;
            int v68 = CFNumberGetValue(v57, kCFNumberShortType, &valuePtr);
LABEL_188:
            if (!v68) {
              goto LABEL_295;
            }
            uint64_t v61 = (__int16)valuePtr & 0xFFFFFFFFFFFFFF00 | valuePtr;
            CFURLRef v62 = __s1[0];
            if (!__s1[0]) {
              goto LABEL_217;
            }
            goto LABEL_216;
          case kCFNumberIntType:
            LODWORD(valuePtr) = 0;
            int v67 = CFNumberGetValue(v57, kCFNumberIntType, &valuePtr);
LABEL_214:
            if (!v67) {
              goto LABEL_295;
            }
            uint64_t v61 = (int)valuePtr & 0xFFFFFFFFFFFFFF00 | valuePtr;
            CFURLRef v62 = __s1[0];
            if (__s1[0]) {
              goto LABEL_216;
            }
            goto LABEL_217;
          case kCFNumberLongType:
            *(void *)&long long valuePtr = 0;
            int v64 = CFNumberGetValue(v57, kCFNumberLongType, &valuePtr);
            goto LABEL_210;
          case kCFNumberLongLongType:
            *(void *)&long long valuePtr = 0;
            int v64 = CFNumberGetValue(v57, kCFNumberLongLongType, &valuePtr);
            goto LABEL_210;
          case kCFNumberFloatType:
            LODWORD(valuePtr) = 0;
            int v65 = CFNumberGetValue(v57, kCFNumberFloatType, &valuePtr);
LABEL_178:
            if (!v65) {
              goto LABEL_295;
            }
            uint64_t v61 = (unint64_t)*(float *)&valuePtr;
            CFURLRef v62 = __s1[0];
            if (!__s1[0]) {
              goto LABEL_217;
            }
            goto LABEL_216;
          case kCFNumberDoubleType:
            *(void *)&long long valuePtr = 0;
            int v66 = CFNumberGetValue(v57, kCFNumberDoubleType, &valuePtr);
            goto LABEL_192;
          case kCFNumberCFIndexType:
            *(void *)&long long valuePtr = 0;
            int v64 = CFNumberGetValue(v57, kCFNumberCFIndexType, &valuePtr);
            goto LABEL_210;
          case kCFNumberNSIntegerType:
            *(void *)&long long valuePtr = 0;
            int v64 = CFNumberGetValue(v57, kCFNumberNSIntegerType, &valuePtr);
LABEL_210:
            if (!v64) {
              goto LABEL_295;
            }
            uint64_t v61 = valuePtr;
            CFURLRef v62 = __s1[0];
            if (!__s1[0]) {
              goto LABEL_217;
            }
            goto LABEL_216;
          case kCFNumberCGFloatType:
            *(void *)&long long valuePtr = 0;
            int v66 = CFNumberGetValue(v57, kCFNumberCGFloatType, &valuePtr);
LABEL_192:
            if (!v66) {
              goto LABEL_295;
            }
            uint64_t v61 = (unint64_t)*(double *)&valuePtr;
            CFURLRef v62 = __s1[0];
            if (!__s1[0]) {
              goto LABEL_217;
            }
            goto LABEL_216;
          default:
            goto LABEL_295;
        }
      }
      CFTypeID v60 = CFBooleanGetTypeID();
      if (v60 == CFGetTypeID(v57))
      {
        uint64_t v61 = CFBooleanGetValue(v57);
        CFURLRef v62 = __s1[0];
        if (__s1[0]) {
LABEL_216:
        }
          CFRelease(v62);
LABEL_217:
        sub_1B4C3311C(0, v61, (uint64_t)&v126);
        uint64_t v73 = (char *)v126;
        uint64_t v72 = (char *)v127;
        __s1[0] = 0;
        __s1[1] = 0;
        uint64_t v142 = 0;
        if (v127 == v126) {
          goto LABEL_260;
        }
        unint64_t v74 = 0xAAAAAAAAAAAAAAABLL * (((char *)v127 - (unsigned char *)v126) >> 3);
        if (v74 >> 61) {
          sub_1B4BB3244();
        }
        __s1[0] = operator new(0x5555555555555558 * (((char *)v127 - (unsigned char *)v126) >> 3));
        __s1[1] = __s1[0];
        uint64_t v142 = (char *)__s1[0] + 8 * v74;
        do
        {
          if (v73[23] < 0)
          {
            sub_1B4BCA11C(__p, *(void **)v73, *((void *)v73 + 1));
          }
          else
          {
            long long v75 = *(_OWORD *)v73;
            unint64_t v140 = (char *)*((void *)v73 + 2);
            *(_OWORD *)std::string __p = v75;
          }
          long long v76 = (char *)__s1[1];
          if (__s1[1] >= v142)
          {
            int64_t v78 = ((char *)__s1[1] - (char *)__s1[0]) >> 3;
            if ((unint64_t)(v78 + 1) >> 61) {
              sub_1B4BB3244();
            }
            unint64_t v79 = (v142 - (char *)__s1[0]) >> 2;
            if (v79 <= v78 + 1) {
              unint64_t v79 = v78 + 1;
            }
            if ((unint64_t)(v142 - (char *)__s1[0]) >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v80 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v80 = v79;
            }
            uint64_t v146 = &v142;
            if (v80)
            {
              if (v80 >> 61) {
                sub_1B4BB2D38();
              }
              uint64_t v81 = (char *)operator new(8 * v80);
            }
            else
            {
              uint64_t v81 = 0;
            }
            *(void *)&long long valuePtr = v81;
            *((void *)&valuePtr + 1) = &v81[8 * v78];
            uint64_t v144 = *((void *)&valuePtr + 1);
            uint64_t v145 = &v81[8 * v80];
            sub_1B4C72FC0(*((CFStringRef *)&valuePtr + 1), (const UInt8 *)__p);
            CFDictionaryRef v82 = (char *)*((void *)&valuePtr + 1);
            long long v77 = (void *)(v144 + 8);
            unint64_t v83 = __s1[0];
            int64_t v84 = __s1[1];
            if (__s1[1] == __s1[0])
            {
              __s1[0] = *((void **)&valuePtr + 1);
              __s1[1] = (void *)(v144 + 8);
              uint64_t v142 = v145;
            }
            else
            {
              unint64_t v85 = (char *)__s1[1] - (char *)__s1[0] - 8;
              if (v85 < 0x48) {
                goto LABEL_243;
              }
              unint64_t v86 = ((char *)__s1[1] - 8 - (char *)__s1[0]) & 0xFFFFFFFFFFFFFFF8;
              if ((void *)(*((void *)&valuePtr + 1) - v86 - 8) < __s1[1]
                && (char *)__s1[1] - v86 - 8 < (void *)*((void *)&valuePtr + 1))
              {
                goto LABEL_243;
              }
              uint64_t v87 = (v85 >> 3) + 1;
              uint64_t v88 = 8 * (v87 & 0x3FFFFFFFFFFFFFFCLL);
              unint64_t v89 = (char *)(*((void *)&valuePtr + 1) - v88);
              char v90 = (char *)__s1[1] - v88;
              id v91 = (long long *)((char *)__s1[1] - 16);
              char v92 = (_OWORD *)(*((void *)&valuePtr + 1) - 16);
              uint64_t v93 = v87 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v94 = *v91;
                *(v92 - 1) = *(v91 - 1);
                _OWORD *v92 = v94;
                *(v91 - 1) = 0uLL;
                long long *v91 = 0uLL;
                v91 -= 2;
                v92 -= 2;
                v93 -= 4;
              }
              while (v93);
              CFDictionaryRef v82 = v89;
              int64_t v84 = v90;
              if (v87 != (v87 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_243:
                unint64_t v89 = v82;
                do
                {
                  uint64_t v95 = *--v84;
                  *((void *)v89 - 1) = v95;
                  v89 -= 8;
                  void *v84 = 0;
                }
                while (v84 != v83);
              }
              int64_t v84 = __s1[0];
              char v96 = __s1[1];
              __s1[0] = v89;
              __s1[1] = v77;
              uint64_t v142 = v145;
              while (v96 != v84)
              {
                uint64_t v98 = (const void *)*--v96;
                std::string v97 = v98;
                if (v98) {
                  CFRelease(v97);
                }
              }
            }
            if (v84) {
              operator delete(v84);
            }
          }
          else
          {
            sub_1B4C72FC0((CFStringRef)__s1[1], (const UInt8 *)__p);
            long long v77 = v76 + 8;
          }
          __s1[1] = v77;
          if (SHIBYTE(v140) < 0) {
            operator delete(__p[0]);
          }
          v73 += 24;
        }
        while (v73 != v72);
        std::string v99 = __s1[0];
        long long valuePtr = 0uLL;
        uint64_t v144 = 0;
        unint64_t v100 = (char *)__s1[1] - (char *)__s1[0];
        if (__s1[1] == __s1[0])
        {
LABEL_260:
          CFDictionaryRef v102 = 0;
          CFDictionaryRef v103 = 0;
        }
        else
        {
          if ((v100 & 0x8000000000000000) != 0) {
            sub_1B4BB3244();
          }
          std::string v101 = (char *)operator new((char *)__s1[1] - (char *)__s1[0]);
          CFDictionaryRef v102 = v101;
          CFDictionaryRef v103 = &v101[v100];
          if (v100 >= (v100 & 0xFFFFFFFFFFFFFFF8)) {
            size_t v104 = v100 - (v100 & 0xFFFFFFFFFFFFFFF8);
          }
          else {
            size_t v104 = 0;
          }
          bzero(&v101[v100 & 0xFFFFFFFFFFFFFFF8], v104);
          memcpy(v102, v99, v100 & 0xFFFFFFFFFFFFFFF8);
        }
        CFArrayRef v47 = CFArrayCreate(0, (const void **)v102, (v103 - (unsigned char *)v102) >> 3, MEMORY[0x1E4F1D510]);
        if (!v47)
        {
          __n128 v118 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v118, "Could not construct");
          __cxa_throw(v118, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        if (v102) {
          operator delete(v102);
        }
        char v105 = (char *)__s1[0];
        if (__s1[0])
        {
          uint64_t v106 = (char *)__s1[1];
          uint64_t v107 = __s1[0];
          if (__s1[1] != __s1[0])
          {
            do
            {
              uint64_t v109 = (const void *)*((void *)v106 - 1);
              v106 -= 8;
              uint64_t v108 = v109;
              if (v109) {
                CFRelease(v108);
              }
            }
            while (v106 != v105);
            uint64_t v107 = __s1[0];
          }
          __s1[1] = v105;
          operator delete(v107);
        }
        unint64_t v110 = (void **)v126;
        if (v126)
        {
          unint64_t v111 = v127;
          int v112 = v126;
          if (v127 != v126)
          {
            do
            {
              if (*((char *)v111 - 1) < 0) {
                operator delete(*(v111 - 3));
              }
              v111 -= 3;
            }
            while (v111 != v110);
            int v112 = v126;
          }
          __n128 v127 = v110;
          operator delete(v112);
        }
        goto LABEL_280;
      }
LABEL_295:
      __n128 v117 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v117, "Could not convert");
    }
    else
    {
      __n128 v117 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v117, "Could not find item");
    }
    __cxa_throw(v117, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
LABEL_102:
  if (qword_1E9D40AF0 != -1) {
    dispatch_once(&qword_1E9D40AF0, &unk_1F0D56000);
  }
  uint64_t v46 = (id)qword_1E9D40AE8;
  if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
  {
    uint64_t v63 = v133;
    if (SHIBYTE(v134) < 0) {
      uint64_t v63 = (void **)v133[0];
    }
    LODWORD(valuePtr) = 136315138;
    *(void *)((char *)&valuePtr + 4) = v63;
    _os_log_error_impl(&dword_1B4BAD000, v46, OS_LOG_TYPE_ERROR, "Invalid sampling method: \"%s\"", (uint8_t *)&valuePtr, 0xCu);
  }

  CFArrayRef v47 = 0;
LABEL_280:
  if (SHIBYTE(v134) < 0)
  {
    operator delete(v133[0]);
    if ((SHIBYTE(v137) & 0x80000000) == 0)
    {
LABEL_282:
      CFDictionaryRef v113 = theDict;
      if (!theDict) {
        return v47;
      }
      goto LABEL_286;
    }
  }
  else if ((SHIBYTE(v137) & 0x80000000) == 0)
  {
    goto LABEL_282;
  }
  operator delete(v136[0]);
  CFDictionaryRef v113 = theDict;
  if (theDict) {
LABEL_286:
  }
    CFRelease(v113);
  return v47;
}

void sub_1B4C7071C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,const void *a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,char a43,uint64_t a44)
{
  MEMORY[0x1BA9929C0](v44, 0x10A1C40A0D887F0);
  if (a27 < 0)
  {
    operator delete(__p);
    if ((a34 & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((a34 & 0x80000000) == 0)
  {
LABEL_3:
    sub_1B4C3910C(&a35);
    _Unwind_Resume(a1);
  }
  operator delete(a29);
  sub_1B4C3910C(&a35);
  _Unwind_Resume(a1);
}

void sub_1B4C70AB4(void *a1, char *__s)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  uint64_t v37 = __s;
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    sub_1B4BB33D8();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v10 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v10 = v4 | 7;
    }
    uint64_t v11 = v10 + 1;
    p_dst = operator new(v10 + 1);
    size_t v35 = v5;
    unint64_t v36 = v11 | 0x8000000000000000;
    long long __dst = p_dst;
  }
  else
  {
    HIBYTE(v36) = v4;
    p_dst = &__dst;
    if (!v4)
    {
      LOBYTE(__dst) = 0;
      int v7 = HIBYTE(v36);
      if ((SHIBYTE(v36) & 0x80000000) == 0) {
        goto LABEL_5;
      }
      goto LABEL_15;
    }
  }
  memcpy(p_dst, __s, v5);
  *((unsigned char *)p_dst + v5) = 0;
  int v7 = HIBYTE(v36);
  if ((SHIBYTE(v36) & 0x80000000) == 0)
  {
LABEL_5:
    int v8 = &__dst;
    switch(v7)
    {
      case 3:
        if ((unsigned __int16)__dst != 21077 || BYTE2(__dst) != 76) {
          goto LABEL_113;
        }
        goto LABEL_21;
      case 4:
        goto LABEL_32;
      case 6:
        if (__dst == 1633906508 && WORD2(__dst) == 25964) {
          goto LABEL_103;
        }
        if (__dst == 1752458573 && WORD2(__dst) == 25711) {
          goto LABEL_111;
        }
        if (__dst != 1651340622 || WORD2(__dst) != 29285) {
          goto LABEL_113;
        }
        goto LABEL_104;
      case 8:
        goto LABEL_92;
      case 9:
        if (__dst == (void *)0x7079546E656B6F54 && v35 == 101) {
          goto LABEL_102;
        }
        if (__dst == (void *)0x74676E654C78614DLL && v35 == 104) {
          goto LABEL_105;
        }
        if (v7 == 8)
        {
LABEL_58:
          int v8 = &__dst;
          goto LABEL_92;
        }
        if (v7 != 4) {
          goto LABEL_113;
        }
LABEL_32:
        if (__dst == 1265659732) {
          goto LABEL_94;
        }
        if ((v7 & 0x80) == 0)
        {
LABEL_113:
          sub_1B4C713E0((uint64_t)&v33, &v37);
          if (qword_1E9D40AF0 != -1) {
            dispatch_once(&qword_1E9D40AF0, &unk_1F0D56000);
          }
          uint64_t v30 = (id)qword_1E9D40AE8;
          if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
          {
            int v31 = &v33;
            if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              int v31 = (std::string *)v33.__r_.__value_.__r.__words[0];
            }
            *(_DWORD *)long long buf = 136315138;
            char v39 = v31;
            _os_log_error_impl(&dword_1B4BAD000, v30, OS_LOG_TYPE_ERROR, "%s", buf, 0xCu);
          }

          exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(exception, &v33);
          exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
          __cxa_throw(exception, (struct type_info *)off_1E60A34D0, MEMORY[0x1E4FBA1E8]);
        }
        return;
      case 12:
        if (__dst != (void *)0x6365746968637241 || v35 != 1701999988) {
          goto LABEL_113;
        }
        goto LABEL_100;
      case 16:
        if (__dst == (void *)0x547375656C63754ELL && v35 == 0x646C6F6873657268) {
          goto LABEL_101;
        }
        if (v7 == 8) {
          goto LABEL_58;
        }
        goto LABEL_113;
      default:
        goto LABEL_113;
    }
    goto LABEL_83;
  }
LABEL_15:
  size_t v12 = v35;
  switch(v35)
  {
    case 3uLL:
      if (*(_WORD *)__dst != 21077 || *((unsigned char *)__dst + 2) != 76) {
        goto LABEL_113;
      }
LABEL_21:
      int v14 = @"CVNLPModelURLKey";
      CFRetain(@"CVNLPModelURLKey");
      goto LABEL_107;
    case 6uLL:
      if (*(_DWORD *)__dst == 1633906508 && *((_WORD *)__dst + 2) == 25964)
      {
LABEL_103:
        int v14 = @"CVNLPLocaleKey";
        CFRetain(@"CVNLPLocaleKey");
        goto LABEL_107;
      }
      if (*(_DWORD *)__dst == 1752458573 && *((_WORD *)__dst + 2) == 25711)
      {
LABEL_111:
        int v14 = @"CVNLPSamplingMethodKey";
        CFRetain(@"CVNLPSamplingMethodKey");
        goto LABEL_107;
      }
      if (*(_DWORD *)__dst == 1651340622 && *((_WORD *)__dst + 2) == 29285)
      {
LABEL_104:
        int v14 = @"CVNLPSamplingNumberKey";
        goto LABEL_106;
      }
      if (v35 == 9)
      {
LABEL_63:
        if (*__dst == 0x74676E654C78614DLL && *((unsigned char *)__dst + 8) == 104)
        {
LABEL_105:
          int v14 = @"CVNLPSamplingMaxLengthKey";
          goto LABEL_106;
        }
        size_t v12 = v35;
      }
LABEL_81:
      if (v12 != 4) {
        goto LABEL_84;
      }
      if (*(_DWORD *)__dst == 1265659732)
      {
LABEL_94:
        int v14 = @"CVNLPSamplingTopKKey";
        goto LABEL_106;
      }
      break;
    case 9uLL:
      if (*__dst != 0x7079546E656B6F54 || *((unsigned char *)__dst + 8) != 101) {
        goto LABEL_63;
      }
LABEL_102:
      int v14 = @"CVNLPTokenTypeKey";
      CFRetain(@"CVNLPTokenTypeKey");
      goto LABEL_107;
    case 0xCuLL:
      if (*__dst != 0x6365746968637241 || *((_DWORD *)__dst + 2) != 1701999988) {
        goto LABEL_113;
      }
LABEL_100:
      int v14 = @"CVNLPLanguageModelArchitectureKey";
      CFRetain(@"CVNLPLanguageModelArchitectureKey");
      goto LABEL_107;
    default:
      goto LABEL_81;
  }
LABEL_83:
  size_t v12 = v35;
LABEL_84:
  if (v12 != 16) {
    goto LABEL_90;
  }
  if (*__dst != 0x547375656C63754ELL || __dst[1] != 0x646C6F6873657268)
  {
    size_t v12 = v35;
LABEL_90:
    if (v12 != 8) {
      goto LABEL_113;
    }
    int v8 = __dst;
LABEL_92:
    if (*v8 != 0x657A69536D616542) {
      goto LABEL_113;
    }
    int v14 = @"CVNLPSamplingBeamSizeKey";
    goto LABEL_106;
  }
LABEL_101:
  int v14 = @"CVNLPSamplingNucleusThresholdKey";
LABEL_106:
  CFRetain(v14);
LABEL_107:
  sub_1B4C316B8(a1, v14);
  if ((v7 & 0x80) != 0)
  {
    uint64_t v29 = __dst;
    operator delete(v29);
  }
}

void sub_1B4C71118(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16)
{
  if (a2) {
    sub_1B4BB21F0(exception_object);
  }
  _Unwind_Resume(exception_object);
}

BOOL CVNLPLanguageModelSetTemperature(uint64_t a1, float a2)
{
  BOOL result = sub_1B4C37030((uint64_t *)(a1 + 24), "temperature");
  if (result) {
    *(float *)(a1 + 136) = 1.0 / a2;
  }
  return result;
}

unint64_t sub_1B4C71238(void *a1, CFDictionaryRef theDict, void *key)
{
  if (!theDict || !key || (CFStringRef Value = (const __CFString *)CFDictionaryGetValue(theDict, key)) == 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1B4C4330C(exception);
    goto LABEL_10;
  }
  CFTypeID TypeID = CFStringGetTypeID();
  if (TypeID != CFGetTypeID(Value))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1B4C31770(exception);
LABEL_10:
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  return sub_1B4C31780(Value, a1);
}

void sub_1B4C712F8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1B4C7130C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1B4C71324(uint64_t a1, CFTypeRef cf, unsigned __int8 a3)
{
  if (*(unsigned __int8 *)(a1 + 8) == a3)
  {
    if (*(unsigned char *)(a1 + 8))
    {
      size_t v5 = *(const void **)a1;
      *(void *)a1 = cf;
      if (cf) {
        CFRetain(cf);
      }
      if (v5) {
        CFRelease(v5);
      }
    }
  }
  else if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v6 = *(const void **)a1;
    if (*(void *)a1) {
      CFRelease(v6);
    }
    *(unsigned char *)(a1 + 8) = 0;
  }
  else
  {
    if (cf) {
      CFRetain(cf);
    }
    *(void *)a1 = cf;
    *(unsigned char *)(a1 + 8) = 1;
  }
}

uint64_t sub_1B4C713E0(uint64_t a1, const char **a2)
{
  sub_1B4BB2204((uint64_t)v6);
  sub_1B4BB34F0(v6, (uint64_t)"Unexpected CVNLP key: ", 22);
  int64_t v3 = *a2;
  size_t v4 = strlen(v3);
  sub_1B4BB34F0(v6, (uint64_t)v3, v4);
  std::stringbuf::str();
  v6[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v6 + *(void *)(v6[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v6[1] = MEMORY[0x1E4FBA470] + 16;
  if (v7 < 0) {
    operator delete((void *)v6[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1BA992920](&v8);
}

void sub_1B4C71538(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1B4BC8450((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1B4C7154C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1B4BC8450((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B4C71560(const __CFNumber *a1)
{
  CFTypeID TypeID = CFNumberGetTypeID();
  if (TypeID == CFGetTypeID(a1))
  {
    switch(CFNumberGetType(a1))
    {
      case kCFNumberSInt8Type:
        LOBYTE(valuePtr) = 0;
        int Value = CFNumberGetValue(a1, kCFNumberSInt8Type, &valuePtr);
        goto LABEL_14;
      case kCFNumberSInt16Type:
        LOWORD(valuePtr) = 0;
        int v9 = CFNumberGetValue(a1, kCFNumberSInt16Type, &valuePtr);
        goto LABEL_21;
      case kCFNumberSInt32Type:
        LODWORD(valuePtr) = 0;
        int v10 = CFNumberGetValue(a1, kCFNumberSInt32Type, &valuePtr);
        goto LABEL_32;
      case kCFNumberSInt64Type:
        double valuePtr = 0.0;
        int v10 = CFNumberGetValue(a1, kCFNumberSInt64Type, &valuePtr);
        goto LABEL_32;
      case kCFNumberFloat32Type:
        LODWORD(valuePtr) = 0;
        int v10 = CFNumberGetValue(a1, kCFNumberFloat32Type, &valuePtr);
        goto LABEL_28;
      case kCFNumberFloat64Type:
        double valuePtr = 0.0;
        int v10 = CFNumberGetValue(a1, kCFNumberFloat64Type, &valuePtr);
        goto LABEL_34;
      case kCFNumberCharType:
        LOBYTE(valuePtr) = 0;
        int Value = CFNumberGetValue(a1, kCFNumberCharType, &valuePtr);
LABEL_14:
        uint64_t v11 = Value != 0;
        if (Value) {
          unsigned __int8 v12 = LOBYTE(valuePtr);
        }
        else {
          unsigned __int8 v12 = 0;
        }
        int v13 = -256;
        if ((v11 & (SLOBYTE(valuePtr) < 0)) == 0) {
          int v13 = 0;
        }
        uint64_t v7 = v11 << 32;
        LODWORD(v8) = v13 & 0xFFFFFF00 | v12;
        int v6 = v8 & 0xFFFFFF00;
        return v7 | v6 & 0xFFFFFF00 | v8;
      case kCFNumberShortType:
        LOWORD(valuePtr) = 0;
        int v9 = CFNumberGetValue(a1, kCFNumberShortType, &valuePtr);
LABEL_21:
        if (v9) {
          uint64_t v8 = SLOWORD(valuePtr) & 0xFFFFFFFFLL | 0x100000000;
        }
        else {
          uint64_t v8 = 0;
        }
        goto LABEL_37;
      case kCFNumberIntType:
        LODWORD(valuePtr) = 0;
        int v10 = CFNumberGetValue(a1, kCFNumberIntType, &valuePtr);
        goto LABEL_32;
      case kCFNumberLongType:
        double valuePtr = 0.0;
        int v10 = CFNumberGetValue(a1, kCFNumberLongType, &valuePtr);
        goto LABEL_32;
      case kCFNumberLongLongType:
        double valuePtr = 0.0;
        int v10 = CFNumberGetValue(a1, kCFNumberLongLongType, &valuePtr);
        goto LABEL_32;
      case kCFNumberFloatType:
        LODWORD(valuePtr) = 0;
        int v10 = CFNumberGetValue(a1, kCFNumberFloatType, &valuePtr);
LABEL_28:
        uint64_t v14 = (int)*(float *)&valuePtr;
        goto LABEL_35;
      case kCFNumberDoubleType:
        double valuePtr = 0.0;
        int v10 = CFNumberGetValue(a1, kCFNumberDoubleType, &valuePtr);
        goto LABEL_34;
      case kCFNumberCFIndexType:
        double valuePtr = 0.0;
        int v10 = CFNumberGetValue(a1, kCFNumberCFIndexType, &valuePtr);
        goto LABEL_32;
      case kCFNumberNSIntegerType:
        double valuePtr = 0.0;
        int v10 = CFNumberGetValue(a1, kCFNumberNSIntegerType, &valuePtr);
LABEL_32:
        uint64_t v14 = LODWORD(valuePtr);
        goto LABEL_35;
      case kCFNumberCGFloatType:
        double valuePtr = 0.0;
        int v10 = CFNumberGetValue(a1, kCFNumberCGFloatType, &valuePtr);
LABEL_34:
        uint64_t v14 = (int)valuePtr;
LABEL_35:
        uint64_t v8 = v14 | 0x100000000;
        if (!v10) {
          uint64_t v8 = 0;
        }
LABEL_37:
        int v6 = v8 & 0xFFFFFF00;
        uint64_t v7 = v8 & 0x100000000;
        break;
      default:
        int v6 = 0;
        uint64_t v7 = 0;
        LOBYTE(v8) = 0;
        break;
    }
    return v7 | v6 & 0xFFFFFF00 | v8;
  }
  else
  {
    CFTypeID v4 = CFBooleanGetTypeID();
    if (v4 == CFGetTypeID(a1)) {
      return CFBooleanGetValue(a1) | 0x100000000;
    }
    else {
      return 0;
    }
  }
}

uint64_t sub_1B4C71880()
{
  qword_1EB9FE408 = 0;
  qword_1EB9FE418 = 0;
  unk_1EB9FE420 = 0;
  qword_1EB9FE410 = (uint64_t)"CVNLPLanguageModel";
  qword_1EB9FE428 = (uint64_t)sub_1B4C718DC;
  xmmword_1EB9FE430 = 0u;
  unk_1EB9FE440 = 0u;
  uint64_t result = _CFRuntimeRegisterClass();
  qword_1EB9FE3F0 = result;
  return result;
}

void sub_1B4C718DC(uint64_t a1)
{
  CFDictionaryRef v2 = *(std::__shared_weak_count **)(a1 + 128);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  int64_t v3 = (CFTypeRef *)(a1 + 16);
  sub_1B4C59698(a1 + 16);
  sub_1B4C43188(a1 + 96, *(char **)(a1 + 104));
  sub_1B4C59808(a1 + 72, *(char **)(a1 + 80));
  uint64_t v4 = *(void *)(a1 + 48);
  if (v4)
  {
    uint64_t v5 = *(void *)(a1 + 56);
    int v6 = *(void **)(a1 + 48);
    if (v5 != v4)
    {
      do
      {
        if (*(char *)(v5 - 1) < 0) {
          operator delete(*(void **)(v5 - 24));
        }
        v5 -= 24;
      }
      while (v5 != v4);
      int v6 = *(void **)(a1 + 48);
    }
    *(void *)(a1 + 56) = v4;
    operator delete(v6);
  }
  uint64_t v7 = *(void *)(a1 + 24);
  if (v7)
  {
    uint64_t v8 = *(void *)(a1 + 32);
    int v9 = *(void **)(a1 + 24);
    if (v8 != v7)
    {
      do
      {
        if (*(char *)(v8 - 1) < 0) {
          operator delete(*(void **)(v8 - 24));
        }
        v8 -= 24;
      }
      while (v8 != v7);
      int v9 = *(void **)(a1 + 24);
    }
    *(void *)(a1 + 32) = v7;
    operator delete(v9);
  }
  if (*v3) {
    CFRelease(*v3);
  }
  CFTypeRef *v3 = 0;
}

void sub_1B4C71A18(uint64_t a1, unint64_t a2)
{
  CFDictionaryRef v2 = *(char **)a1;
  if (a2 <= (uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4) {
    return;
  }
  if (a2 >> 60) {
    sub_1B4BB3244();
  }
  uint64_t v4 = *(char **)(a1 + 8);
  uint64_t v5 = 16 * a2;
  int v6 = (char *)operator new(16 * a2);
  uint64_t v7 = &v6[v5];
  int64_t v8 = v4 - v2;
  unint64_t v9 = (unint64_t)&v6[(v4 - v2) & 0xFFFFFFFFFFFFFFF0];
  if (v4 == v2)
  {
    *(void *)a1 = v9;
    *(void *)(a1 + 8) = v9;
    *(void *)(a1 + 16) = v7;
    goto LABEL_7;
  }
  unint64_t v10 = v8 - 16;
  if ((unint64_t)(v8 - 16) < 0x90)
  {
    uint64_t v11 = &v6[(v4 - v2) & 0xFFFFFFFFFFFFFFF0];
    do
    {
LABEL_20:
      uint64_t v19 = *((void *)v4 - 2);
      v4 -= 16;
      *((void *)v11 - 2) = v19;
      v11 -= 16;
      *(void *)uint64_t v4 = 0;
      *((void *)v11 + 1) = *((void *)v4 + 1);
      *((void *)v4 + 1) = 0;
    }
    while (v4 != v2);
    goto LABEL_21;
  }
  BOOL v12 = &v6[(v8 & 0xFFFFFFFFFFFFFFF0) - (v10 & 0xFFFFFFFFFFFFFFF0) - 16] >= v4
     || (unint64_t)&v4[-(v10 & 0xFFFFFFFFFFFFFFF0) - 16] >= v9;
  uint64_t v11 = &v6[(v4 - v2) & 0xFFFFFFFFFFFFFFF0];
  if (!v12) {
    goto LABEL_20;
  }
  uint64_t v13 = (v10 >> 4) + 1;
  uint64_t v14 = 16 * (v13 & 0x1FFFFFFFFFFFFFFELL);
  uint64_t v11 = (char *)(v9 - v14);
  BOOL v15 = &v4[-v14];
  char v16 = (double *)(v9 - 32);
  BOOL v17 = (const double *)(v4 - 32);
  uint64_t v18 = v13 & 0x1FFFFFFFFFFFFFFELL;
  do
  {
    float64x2x2_t v24 = vld2q_f64(v17);
    vst2q_f64(v16, v24);
    *(_OWORD *)BOOL v17 = 0uLL;
    *((_OWORD *)v17 + 1) = 0uLL;
    v17 -= 4;
    v16 -= 4;
    v18 -= 2;
  }
  while (v18);
  uint64_t v4 = v15;
  if (v13 != (v13 & 0x1FFFFFFFFFFFFFFELL)) {
    goto LABEL_20;
  }
LABEL_21:
  CFDictionaryRef v2 = *(char **)a1;
  uint64_t v20 = *(char **)(a1 + 8);
  *(void *)a1 = v11;
  *(void *)(a1 + 8) = v9;
  *(void *)(a1 + 16) = v7;
  while (v20 != v2)
  {
    uint64_t v21 = (const void *)*((void *)v20 - 1);
    if (v21) {
      CFRelease(v21);
    }
    int v22 = (const void *)*((void *)v20 - 2);
    if (v22) {
      CFRelease(v22);
    }
    v20 -= 16;
  }
LABEL_7:
  if (v2)
  {
    operator delete(v2);
  }
}

CFDictionaryRef sub_1B4C71BA0(char *a1, char *a2)
{
  std::string __p = 0;
  unint64_t v2 = a2 - a1;
  CFIndex v3 = (a2 - a1) >> 4;
  if (a2 != a1)
  {
    if ((v2 & 0x8000000000000000) != 0) {
      sub_1B4BB3244();
    }
    uint64_t v5 = a1;
    size_t v6 = v2 >> 1;
    std::string __p = (char *)operator new(v2 >> 1);
    int v56 = __p;
    CFNumberRef v57 = &__p[8 * v3];
    CFIndex v51 = v3;
    int v52 = (char *)operator new(v6);
    uint64_t v53 = v52;
    CFDictionaryRef v54 = &v52[8 * v3];
    while (1)
    {
      uint64_t v8 = *(void *)v5;
      if (!*(void *)v5 || !*((void *)v5 + 1))
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Could not construct");
        __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      unint64_t v9 = v56;
      if (v56 < v57)
      {
        *(void *)int v56 = v8;
        uint64_t v10 = (uint64_t)(v56 + 8);
        goto LABEL_21;
      }
      uint64_t v11 = (v56 - __p) >> 3;
      unint64_t v12 = v11 + 1;
      if ((unint64_t)(v11 + 1) >> 61) {
        sub_1B4BB3244();
      }
      uint64_t v13 = v57 - __p;
      if ((v57 - __p) >> 2 > v12) {
        unint64_t v12 = v13 >> 2;
      }
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v14 = v12;
      }
      if (v14)
      {
        if (v14 >> 61) {
          sub_1B4BB2D38();
        }
        BOOL v15 = operator new(8 * v14);
        char v16 = &v15[8 * v11];
        *(void *)char v16 = v8;
        uint64_t v10 = (uint64_t)(v16 + 8);
        int64_t v17 = v56 - __p;
        if (v56 == __p)
        {
LABEL_19:
          std::string __p = v16;
          CFNumberRef v57 = &v15[8 * v14];
          if (!v56) {
            goto LABEL_21;
          }
LABEL_20:
          operator delete(v9);
          goto LABEL_21;
        }
      }
      else
      {
        BOOL v15 = 0;
        char v16 = (char *)(8 * v11);
        *(void *)(8 * v11) = v8;
        uint64_t v10 = 8 * v11 + 8;
        int64_t v17 = v56 - __p;
        if (v56 == __p) {
          goto LABEL_19;
        }
      }
      unint64_t v27 = v17 - 8;
      if (v27 < 0x58) {
        goto LABEL_68;
      }
      if ((unint64_t)(__p - v15) < 0x20) {
        goto LABEL_68;
      }
      uint64_t v28 = (v27 >> 3) + 1;
      uint64_t v29 = 8 * (v28 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v30 = &v56[-v29];
      v16 -= v29;
      int v31 = &v15[8 * v11 - 16];
      int v32 = v56 - 16;
      uint64_t v33 = v28 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v34 = *(_OWORD *)v32;
        *(v31 - 1) = *((_OWORD *)v32 - 1);
        *int v31 = v34;
        v31 -= 2;
        v32 -= 32;
        v33 -= 4;
      }
      while (v33);
      unint64_t v9 = v30;
      if (v28 != (v28 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_68:
        do
        {
          uint64_t v35 = *((void *)v9 - 1);
          v9 -= 8;
          *((void *)v16 - 1) = v35;
          v16 -= 8;
        }
        while (v9 != __p);
      }
      unint64_t v9 = __p;
      std::string __p = v16;
      CFNumberRef v57 = &v15[8 * v14];
      if (v9) {
        goto LABEL_20;
      }
LABEL_21:
      int v56 = (char *)v10;
      uint64_t v18 = *((void *)v5 + 1);
      uint64_t v19 = v53;
      if (v53 >= v54)
      {
        uint64_t v20 = (v53 - v52) >> 3;
        unint64_t v21 = v20 + 1;
        if ((unint64_t)(v20 + 1) >> 61) {
          sub_1B4BB3244();
        }
        uint64_t v22 = v54 - v52;
        if ((v54 - v52) >> 2 > v21) {
          unint64_t v21 = v22 >> 2;
        }
        if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v23 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v23 = v21;
        }
        if (v23)
        {
          if (v23 >> 61) {
            sub_1B4BB2D38();
          }
          float64x2x2_t v24 = operator new(8 * v23);
          int v25 = &v24[8 * v20];
          *(void *)int v25 = v18;
          uint64_t v7 = (uint64_t)(v25 + 8);
          int64_t v26 = v53 - v52;
          if (v53 == v52) {
            goto LABEL_31;
          }
LABEL_43:
          unint64_t v36 = v26 - 8;
          if (v36 < 0x58) {
            goto LABEL_69;
          }
          if ((unint64_t)(v52 - v24) < 0x20) {
            goto LABEL_69;
          }
          uint64_t v37 = (v36 >> 3) + 1;
          uint64_t v38 = 8 * (v37 & 0x3FFFFFFFFFFFFFFCLL);
          char v39 = &v53[-v38];
          v25 -= v38;
          uint64_t v40 = &v24[8 * v20 - 16];
          int v41 = (long long *)(v53 - 16);
          uint64_t v42 = v37 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v43 = *v41;
            *(v40 - 1) = *(v41 - 1);
            *uint64_t v40 = v43;
            v40 -= 2;
            v41 -= 2;
            v42 -= 4;
          }
          while (v42);
          uint64_t v19 = v39;
          if (v37 != (v37 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_69:
            do
            {
              uint64_t v44 = *((void *)v19 - 1);
              v19 -= 8;
              *((void *)v25 - 1) = v44;
              v25 -= 8;
            }
            while (v19 != v52);
          }
          uint64_t v19 = v52;
          int v52 = v25;
          CFDictionaryRef v54 = &v24[8 * v23];
          if (!v19) {
            goto LABEL_5;
          }
        }
        else
        {
          float64x2x2_t v24 = 0;
          int v25 = (char *)(8 * v20);
          *(void *)(8 * v20) = v18;
          uint64_t v7 = 8 * v20 + 8;
          int64_t v26 = v53 - v52;
          if (v53 != v52) {
            goto LABEL_43;
          }
LABEL_31:
          int v52 = v25;
          CFDictionaryRef v54 = &v24[8 * v23];
          if (!v53) {
            goto LABEL_5;
          }
        }
        operator delete(v19);
        goto LABEL_5;
      }
      *(void *)uint64_t v53 = v18;
      uint64_t v7 = (uint64_t)(v53 + 8);
LABEL_5:
      uint64_t v53 = (char *)v7;
      v5 += 16;
      if (v5 == a2)
      {
        uint64_t v45 = (const void **)__p;
        CFIndex v3 = v51;
        uint64_t v46 = (const void **)v52;
        goto LABEL_53;
      }
    }
  }
  uint64_t v46 = 0;
  uint64_t v45 = 0;
LABEL_53:
  CFDictionaryRef v47 = CFDictionaryCreate(0, v45, v46, v3, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!v47)
  {
    uint64_t v50 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v50, "Could not construct");
    __cxa_throw(v50, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (v46) {
    operator delete(v46);
  }
  if (__p) {
    operator delete(__p);
  }
  return v47;
}

void sub_1B4C71FD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15)
{
  __cxa_free_exception(v15);
  if (__p)
  {
    operator delete(__p);
    int64_t v17 = a14;
    if (!a14) {
LABEL_3:
    }
      _Unwind_Resume(a1);
  }
  else
  {
    int64_t v17 = a14;
    if (!a14) {
      goto LABEL_3;
    }
  }
  operator delete(v17);
  _Unwind_Resume(a1);
}

void **sub_1B4C72058(void **a1)
{
  unint64_t v2 = (char *)*a1;
  if (*a1)
  {
    CFIndex v3 = (char *)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = (const void *)*((void *)v3 - 1);
        if (v5) {
          CFRelease(v5);
        }
        size_t v6 = (const void *)*((void *)v3 - 2);
        if (v6) {
          CFRelease(v6);
        }
        v3 -= 16;
      }
      while (v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_1B4C720DC(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v4 = (CFTypeRef *)(i - 16);
    *(void *)(a1 + 16) = i - 16;
    uint64_t v5 = *(const void **)(i - 8);
    if (v5) {
      CFRelease(v5);
    }
    if (*v4) {
      CFRelease(*v4);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

CFStringRef *sub_1B4C72154(CFStringRef *a1, const UInt8 *a2, int *a3)
{
  CFIndex v5 = *((void *)a2 + 1);
  if (*((char *)a2 + 23) >= 0)
  {
    CFIndex v6 = a2[23];
  }
  else
  {
    a2 = *(const UInt8 **)a2;
    CFIndex v6 = v5;
  }
  CFStringRef v7 = CFStringCreateWithBytes(0, a2, v6, 0x8000100u, 0);
  *a1 = v7;
  if (!v7)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  int valuePtr = *a3;
  CFNumberRef v8 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  a1[1] = (CFStringRef)v8;
  if (!v8)
  {
    uint64_t v11 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v11, "Could not construct");
    __cxa_throw(v11, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  return a1;
}

void sub_1B4C72258(_Unwind_Exception *a1)
{
  uint64_t v3 = *(const void **)(v1 + 8);
  if (v3) {
    CFRelease(v3);
  }
  sub_1B4C394A8((const void **)v1);
  _Unwind_Resume(a1);
}

CFNumberRef *sub_1B4C722C0(CFNumberRef *a1, int a2, uint64_t a3)
{
  int valuePtr = a2;
  CFNumberRef v5 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  *a1 = v5;
  if (!v5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  int v6 = *(char *)(a3 + 23);
  if (v6 >= 0) {
    CFStringRef v7 = (const UInt8 *)a3;
  }
  else {
    CFStringRef v7 = *(const UInt8 **)a3;
  }
  if (v6 >= 0) {
    CFIndex v8 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    CFIndex v8 = *(void *)(a3 + 8);
  }
  CFStringRef v9 = CFStringCreateWithBytes(0, v7, v8, 0x8000100u, 0);
  a1[1] = (CFNumberRef)v9;
  if (!v9)
  {
    unint64_t v12 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v12, "Could not construct");
    __cxa_throw(v12, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  return a1;
}

void sub_1B4C723C0(_Unwind_Exception *a1)
{
  uint64_t v3 = *(const void **)(v1 + 8);
  if (v3) {
    CFRelease(v3);
  }
  sub_1B4C394A8((const void **)v1);
  _Unwind_Resume(a1);
}

CFArrayRef sub_1B4C72428(float **a1)
{
  unint64_t v2 = a1[1] - *a1;
  std::string __p = 0;
  unint64_t v36 = 0;
  v37[0] = 0;
  sub_1B4C2D544((uint64_t)&__p, v2);
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1 != v4)
  {
    CFNumberRef v5 = v36;
    do
    {
      float v6 = *v3;
      if ((unint64_t)v5 < v37[0])
      {
        sub_1B4C72720(v5++, *v3);
      }
      else
      {
        uint64_t v7 = ((char *)v5 - (unsigned char *)__p) >> 3;
        if ((unint64_t)(v7 + 1) >> 61) {
          sub_1B4BB3244();
        }
        unint64_t v8 = (uint64_t)(v37[0] - (void)__p) >> 2;
        if (v8 <= v7 + 1) {
          unint64_t v8 = v7 + 1;
        }
        if (v37[0] - (void)__p >= 0x7FFFFFFFFFFFFFF8uLL) {
          unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v9 = v8;
        }
        int v41 = v37;
        if (v9)
        {
          if (v9 >> 61) {
            sub_1B4BB2D38();
          }
          uint64_t v10 = (char *)operator new(8 * v9);
        }
        else
        {
          uint64_t v10 = 0;
        }
        v37[1] = v10;
        uint64_t v38 = (CFNumberRef *)&v10[8 * v7];
        char v39 = v38;
        uint64_t v40 = &v10[8 * v9];
        sub_1B4C72720(v38, v6);
        uint64_t v11 = v38;
        CFNumberRef v5 = v39 + 1;
        unint64_t v12 = (CFNumberRef *)__p;
        uint64_t v13 = v36;
        if (v36 == __p)
        {
          std::string __p = v38;
          unint64_t v36 = v39 + 1;
          v37[0] = v40;
        }
        else
        {
          unint64_t v14 = (char *)v36 - (unsigned char *)__p - 8;
          if (v14 < 0x48) {
            goto LABEL_23;
          }
          unint64_t v15 = ((char *)(v36 - 1) - (unsigned char *)__p) & 0xFFFFFFFFFFFFFFF8;
          if ((CFNumberRef *)((char *)v38 - v15 - 8) < v36 && (CFNumberRef *)((char *)v36 - v15 - 8) < v38) {
            goto LABEL_23;
          }
          uint64_t v16 = (v14 >> 3) + 1;
          unint64_t v17 = 8 * (v16 & 0x3FFFFFFFFFFFFFFCLL);
          uint64_t v18 = &v38[v17 / 0xFFFFFFFFFFFFFFF8];
          uint64_t v19 = &v36[v17 / 0xFFFFFFFFFFFFFFF8];
          uint64_t v20 = v36 - 2;
          unint64_t v21 = v38 - 2;
          uint64_t v22 = v16 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v23 = *(_OWORD *)v20;
            *((_OWORD *)v21 - 1) = *((_OWORD *)v20 - 1);
            *(_OWORD *)unint64_t v21 = v23;
            *((_OWORD *)v20 - 1) = 0uLL;
            *(_OWORD *)uint64_t v20 = 0uLL;
            v20 -= 4;
            v21 -= 4;
            v22 -= 4;
          }
          while (v22);
          uint64_t v11 = v18;
          uint64_t v13 = v19;
          if (v16 != (v16 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_23:
            uint64_t v18 = v11;
            do
            {
              CFNumberRef v24 = *--v13;
              *--uint64_t v18 = v24;
              *uint64_t v13 = 0;
            }
            while (v13 != v12);
          }
          uint64_t v13 = (CFNumberRef *)__p;
          int v25 = v36;
          std::string __p = v18;
          unint64_t v36 = v5;
          v37[0] = v40;
          while (v25 != v13)
          {
            unint64_t v27 = *--v25;
            int64_t v26 = v27;
            if (v27) {
              CFRelease(v26);
            }
          }
        }
        if (v13) {
          operator delete(v13);
        }
      }
      unint64_t v36 = v5;
      ++v3;
    }
    while (v3 != v4);
  }
  CFArrayRef v28 = sub_1B4C2D6B8((char **)&__p);
  uint64_t v29 = (CFNumberRef *)__p;
  if (__p)
  {
    uint64_t v30 = v36;
    int v31 = __p;
    if (v36 != __p)
    {
      do
      {
        uint64_t v33 = *--v30;
        int v32 = v33;
        if (v33) {
          CFRelease(v32);
        }
      }
      while (v30 != v29);
      int v31 = __p;
    }
    unint64_t v36 = v29;
    operator delete(v31);
  }
  return v28;
}

void sub_1B4C726A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

void sub_1B4C726BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

void sub_1B4C726D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, char a12)
{
}

void sub_1B4C726F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

void sub_1B4C72708(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

CFNumberRef sub_1B4C72720(CFNumberRef *a1, float a2)
{
  float valuePtr = a2;
  CFNumberRef result = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
  *a1 = result;
  if (!result)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  return result;
}

void sub_1B4C727A8(_Unwind_Exception *exception_object)
{
  if (*v1) {
    CFRelease(*v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1B4C727D4()
{
  qword_1EB9FE468 = 0;
  qword_1EB9FE478 = 0;
  unk_1EB9FE480 = 0;
  qword_1EB9FE470 = (uint64_t)"CVNLPLanguageModelWithState";
  qword_1EB9FE488 = (uint64_t)sub_1B4C72830;
  xmmword_1EB9FE490 = 0u;
  unk_1EB9FE4A0 = 0u;
  uint64_t result = _CFRuntimeRegisterClass();
  qword_1EB9FE400 = result;
  return result;
}

void sub_1B4C72830(uint64_t a1)
{
  CFRelease(*(CFTypeRef *)(a1 + 56));
  unint64_t v2 = *(void **)(a1 + 32);
  if (v2)
  {
    *(void *)(a1 + 40) = v2;
    operator delete(v2);
  }
  if (*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = *(const void **)(a1 + 16);
    if (v3) {
      CFRelease(v3);
    }
  }
}

unint64_t sub_1B4C72884(const __CFDictionary *a1, const void *a2)
{
  if (!a1 || !a2 || (CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(a1, a2)) == 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1B4C4330C(exception);
    goto LABEL_8;
  }
  unint64_t result = sub_1B4C71560(Value);
  if (!HIDWORD(result))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1B4C31770(exception);
LABEL_8:
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  return result;
}

void sub_1B4C72908(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1B4C7291C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1B4C72934(uint64_t result)
{
  if (result)
  {
    CFNumberRef v1 = (const __CFNumber *)result;
    CFTypeID TypeID = CFNumberGetTypeID();
    if (TypeID == CFGetTypeID(v1))
    {
      return sub_1B4C729C8(v1);
    }
    else
    {
      CFTypeID v3 = CFBooleanGetTypeID();
      if (v3 == CFGetTypeID(v1)) {
        return COERCE_UNSIGNED_INT((float)CFBooleanGetValue(v1)) | 0x100000000;
      }
      else {
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_1B4C729C8(const __CFNumber *a1)
{
  switch(CFNumberGetType(a1))
  {
    case kCFNumberSInt8Type:
      LOBYTE(valuePtr) = 0;
      CFNumberRef v2 = a1;
      CFNumberType v3 = kCFNumberSInt8Type;
      goto LABEL_10;
    case kCFNumberSInt16Type:
      LOWORD(valuePtr) = 0;
      CFNumberRef v7 = a1;
      CFNumberType v8 = kCFNumberSInt16Type;
      goto LABEL_12;
    case kCFNumberSInt32Type:
      LODWORD(valuePtr) = 0;
      CFNumberRef v9 = a1;
      CFNumberType v10 = kCFNumberSInt32Type;
      goto LABEL_14;
    case kCFNumberSInt64Type:
      double valuePtr = 0.0;
      CFNumberRef v11 = a1;
      CFNumberType v12 = kCFNumberSInt64Type;
      goto LABEL_22;
    case kCFNumberFloat32Type:
      LODWORD(valuePtr) = 0;
      CFNumberRef v13 = a1;
      CFNumberType v14 = kCFNumberFloat32Type;
      goto LABEL_18;
    case kCFNumberFloat64Type:
      double valuePtr = 0.0;
      CFNumberRef v15 = a1;
      CFNumberType v16 = kCFNumberFloat64Type;
      goto LABEL_24;
    case kCFNumberCharType:
      LOBYTE(valuePtr) = 0;
      CFNumberRef v2 = a1;
      CFNumberType v3 = kCFNumberCharType;
LABEL_10:
      int Value = CFNumberGetValue(v2, v3, &valuePtr);
      v18.i8[0] = LOBYTE(valuePtr);
      float v19 = (float)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v18)).i32[0];
      goto LABEL_25;
    case kCFNumberShortType:
      LOWORD(valuePtr) = 0;
      CFNumberRef v7 = a1;
      CFNumberType v8 = kCFNumberShortType;
LABEL_12:
      int Value = CFNumberGetValue(v7, v8, &valuePtr);
      v20.i16[0] = LOWORD(valuePtr);
      float v19 = (float)vmovl_s16(v20).i32[0];
      goto LABEL_25;
    case kCFNumberIntType:
      LODWORD(valuePtr) = 0;
      CFNumberRef v9 = a1;
      CFNumberType v10 = kCFNumberIntType;
LABEL_14:
      int Value = CFNumberGetValue(v9, v10, &valuePtr);
      float v19 = (float)SLODWORD(valuePtr);
      goto LABEL_25;
    case kCFNumberLongType:
      double valuePtr = 0.0;
      CFNumberRef v11 = a1;
      CFNumberType v12 = kCFNumberLongType;
      goto LABEL_22;
    case kCFNumberLongLongType:
      double valuePtr = 0.0;
      CFNumberRef v11 = a1;
      CFNumberType v12 = kCFNumberLongLongType;
      goto LABEL_22;
    case kCFNumberFloatType:
      LODWORD(valuePtr) = 0;
      CFNumberRef v13 = a1;
      CFNumberType v14 = kCFNumberFloatType;
LABEL_18:
      int Value = CFNumberGetValue(v13, v14, &valuePtr);
      uint64_t v21 = LODWORD(valuePtr);
      goto LABEL_26;
    case kCFNumberDoubleType:
      double valuePtr = 0.0;
      CFNumberRef v15 = a1;
      CFNumberType v16 = kCFNumberDoubleType;
      goto LABEL_24;
    case kCFNumberCFIndexType:
      double valuePtr = 0.0;
      CFNumberRef v11 = a1;
      CFNumberType v12 = kCFNumberCFIndexType;
      goto LABEL_22;
    case kCFNumberNSIntegerType:
      double valuePtr = 0.0;
      CFNumberRef v11 = a1;
      CFNumberType v12 = kCFNumberNSIntegerType;
LABEL_22:
      int Value = CFNumberGetValue(v11, v12, &valuePtr);
      float v19 = (float)*(uint64_t *)&valuePtr;
      goto LABEL_25;
    case kCFNumberCGFloatType:
      double valuePtr = 0.0;
      CFNumberRef v15 = a1;
      CFNumberType v16 = kCFNumberCGFloatType;
LABEL_24:
      int Value = CFNumberGetValue(v15, v16, &valuePtr);
      float v19 = valuePtr;
LABEL_25:
      uint64_t v21 = LODWORD(v19);
LABEL_26:
      uint64_t v6 = v21 | 0x100000000;
      if (!Value) {
        uint64_t v6 = 0;
      }
      int v4 = v6 & 0xFFFFFF00;
      uint64_t v5 = v6 & 0x100000000;
      break;
    default:
      int v4 = 0;
      uint64_t v5 = 0;
      LOBYTE(v6) = 0;
      break;
  }
  return v5 | v4 & 0xFFFFFF00 | v6;
}

void *sub_1B4C72C24(void *a1)
{
  *a1 = &unk_1F0D552C8;
  sub_1B4BB2204((uint64_t)v3);
  sub_1B4BB34F0(v3, (uint64_t)"InvalidProbabilityError: expected ", 34);
  std::ostream::operator<<();
  sub_1B4BB34F0(v3, (uint64_t)"to be in the interval [0, 1].", 29);
  std::stringbuf::str();
  v3[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v3 + *(void *)(v3[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v3[1] = MEMORY[0x1E4FBA470] + 16;
  if (v4 < 0) {
    operator delete((void *)v3[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1BA992920](&v5);
  return a1;
}

void sub_1B4C72DB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1B4BC8450((uint64_t)va);
  std::exception::~exception(v2);
  _Unwind_Resume(a1);
}

void sub_1B4C72DE8(std::exception *this)
{
  CFNumberRef v1 = this;
  this->__vftable = (std::exception_vtbl *)&unk_1F0D552C8;
  if (SHIBYTE(this[3].__vftable) < 0)
  {
    operator delete(this[1].__vftable);
    this = v1;
  }
  else if (((vars8 ^ (2 * vars8)) & 0x4000000000000000) != 0)
  {
    __break(0xC471u);
  }
  std::exception::~exception(this);
}

void sub_1B4C72E68(std::exception *this)
{
  this->__vftable = (std::exception_vtbl *)&unk_1F0D552C8;
  if (SHIBYTE(this[3].__vftable) < 0) {
    operator delete(this[1].__vftable);
  }
  std::exception::~exception(this);
  JUMPOUT(0x1BA9929C0);
}

uint64_t sub_1B4C72EDC(uint64_t a1)
{
  uint64_t result = a1 + 8;
  if (*(char *)(a1 + 31) < 0) {
    return *(void *)result;
  }
  return result;
}

void **sub_1B4C72EF8(void **a1)
{
  CFNumberRef v2 = (char *)*a1;
  if (*a1)
  {
    CFNumberType v3 = (char *)a1[1];
    char v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        uint64_t v6 = (const void *)*((void *)v3 - 1);
        v3 -= 8;
        uint64_t v5 = v6;
        if (v6) {
          CFRelease(v5);
        }
      }
      while (v3 != v2);
      char v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_1B4C72F68(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != v3)
  {
    uint64_t v5 = *(const void **)(v2 - 8);
    v2 -= 8;
    char v4 = v5;
    *(void *)(a1 + 16) = v2;
    if (v5)
    {
      CFRelease(v4);
      uint64_t v2 = *(void *)(a1 + 16);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

CFStringRef sub_1B4C72FC0(CFStringRef result, const UInt8 *a2)
{
  uint64_t v2 = a2;
  p_isa = &result->isa;
  CFIndex v4 = a2[23];
  if ((v4 & 0x80u) != 0) {
    a2 = *(const UInt8 **)a2;
  }
  if (a2)
  {
    CFIndex v5 = *((void *)v2 + 1);
    if ((v4 & 0x80u) == 0) {
      CFIndex v6 = v4;
    }
    else {
      CFIndex v6 = v5;
    }
    uint64_t result = CFStringCreateWithBytes(0, a2, v6, 0x8000100u, 0);
    void *p_isa = result;
    if (!result)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
  }
  else
  {
    result->isa = 0;
  }
  return result;
}

void sub_1B4C73080(_Unwind_Exception *exception_object)
{
  if (*v1) {
    CFRelease(*v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1B4C730AC(void *a1)
{
  *a1 = &unk_1F0D54F90;
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (void *)a1[2];
    if (!v3) {
      return a1;
    }
    goto LABEL_4;
  }
  uint64_t v3 = (void *)a1[2];
  if (v3)
  {
LABEL_4:
    a1[3] = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_1B4C73150()
{
}

void sub_1B4C73250(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  MEMORY[0x1BA9929C0](v14, 0xA1C409BE6959DLL);
  _Unwind_Resume(a1);
}

uint64_t *sub_1B4C732A0(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = sub_1B4C32684(v2);
    MEMORY[0x1BA9929C0](v3, 0x10B0C409CF98BECLL);
  }
  return a1;
}

uint64_t **sub_1B4C732E8(uint64_t **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = sub_1B4C32450(v2);
    MEMORY[0x1BA9929C0](v3, 0x10B0C4005063E60);
  }
  return a1;
}

void sub_1B4C73330(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v160 = *MEMORY[0x1E4F143B8];
  if (*(char *)(a2 + 23) < 0)
  {
    sub_1B4BCA11C(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a2;
    __p[2] = *(void **)(a2 + 16);
  }
  sub_1B4BFB4EC(&v122, (uint64_t)__p, 1uLL);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v114 = a1;
  uint64_t v5 = *(void *)(a1 + 16);
  __n128 v138 = 0;
  uint64_t v139 = 0;
  uint64_t v137 = 0;
  sub_1B4BCA340((char *)&v137, (long long *)v122, v123, 0xAAAAAAAAAAAAAAABLL * (((char *)v123 - (unsigned char *)v122) >> 3));
  CFIndex v6 = (void **)v137;
  if (*(unsigned char *)(v5 + 12))
  {
    CFNumberRef v7 = v138;
    if (v137 != v138)
    {
      do
      {
        uint64_t v8 = *((unsigned __int8 *)v6 + 23);
        int v9 = (char)v8;
        CFNumberType v10 = (char *)v6 + v8;
        if (v9 >= 0) {
          CFNumberRef v11 = v10;
        }
        else {
          CFNumberRef v11 = (char *)v6[1] + (void)*v6;
        }
        if (v9 >= 0) {
          CFNumberType v12 = v6;
        }
        else {
          CFNumberType v12 = *v6;
        }
        for (; v12 != v11; ++v12)
          *CFNumberType v12 = __tolower((char)*v12);
        v6 += 3;
      }
      while (v6 != v7);
      CFIndex v6 = (void **)v137;
    }
  }
  CFNumberRef v13 = v138;
  uint64_t v14 = *(int *)(v5 + 8);
  CFNumberRef v15 = operator new(0x10uLL);
  *CFNumberRef v15 = 0xAAAAAAAAAAAAAAABLL * (v13 - v6);
  v15[1] = v14;
  __dst[1] = v15 + 2;
  v128[0] = v15 + 2;
  __dst[0] = v15;
  sub_1B4C097C4((int32x4_t **)__dst, (uint64_t)__p, 0);
  *(_DWORD *)(v5 + 24) = __p[1];
  if ((void **)(v5 + 16) != __p) {
    sub_1B4C0A420((void *)(v5 + 32), (char *)__p[2], v144, (v144 - (char *)__p[2]) >> 3);
  }
  unint64_t v17 = v146;
  CFNumberType v16 = v147;
  if (v147) {
    atomic_fetch_add_explicit(&v147->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int8x8_t v18 = *(std::__shared_weak_count **)(v5 + 64);
  *(void *)(v5 + 56) = v17;
  *(void *)(v5 + 64) = v16;
  if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  __p[0] = &unk_1F0D54F90;
  float v19 = v147;
  if (v147 && !atomic_fetch_add(&v147->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  if (__p[2])
  {
    uint64_t v144 = (char *)__p[2];
    operator delete(__p[2]);
  }
  if (__dst[0])
  {
    __dst[1] = __dst[0];
    operator delete(__dst[0]);
  }
  uint64_t v21 = v137;
  int16x4_t v20 = v138;
  uint64_t v22 = *(int *)(v5 + 8);
  long long v23 = operator new(8uLL);
  unint64_t v24 = 0xAAAAAAAAAAAAAAABLL * (((char *)v20 - v21) >> 3);
  *long long v23 = v24;
  __dst[0] = v23;
  v128[0] = v23 + 1;
  int v25 = operator new(0x10uLL);
  void *v25 = v24;
  v25[1] = v22;
  int64_t v26 = v25 + 2;
  __dst[0] = v25;
  __dst[1] = v25 + 2;
  v128[0] = v25 + 2;
  operator delete(v23);
  __dst[1] = v26;
  v27.i32[0] = 1.0;
  sub_1B4C097C4((int32x4_t **)__dst, (uint64_t)__p, v27);
  *(_DWORD *)(v5 + 80) = __p[1];
  if ((void **)(v5 + 72) != __p) {
    sub_1B4C0A420((void *)(v5 + 88), (char *)__p[2], v144, (v144 - (char *)__p[2]) >> 3);
  }
  uint64_t v29 = v146;
  CFArrayRef v28 = v147;
  if (v147) {
    atomic_fetch_add_explicit(&v147->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v30 = *(std::__shared_weak_count **)(v5 + 120);
  *(void *)(v5 + 112) = v29;
  *(void *)(v5 + 120) = v28;
  if (v30 && !atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
    std::__shared_weak_count::__release_weak(v30);
  }
  __p[0] = &unk_1F0D54F90;
  int v31 = v147;
  if (v147 && !atomic_fetch_add(&v147->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
    std::__shared_weak_count::__release_weak(v31);
  }
  if (__p[2])
  {
    uint64_t v144 = (char *)__p[2];
    operator delete(__p[2]);
  }
  if (__dst[0])
  {
    __dst[1] = __dst[0];
    operator delete(__dst[0]);
  }
  if (*(_DWORD *)(v5 + 24) != 1
    || (uint64_t v119 = *(int *)(v5 + 8),
        uint64_t v116 = (*(uint64_t (**)(void))(**(void **)(v5 + 56) + 24))(*(void *)(v5 + 56)),
        *(_DWORD *)(v5 + 80) != 1))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Incorrect data type requested.");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v118 = *(int *)(v5 + 8);
  uint64_t v115 = (*(uint64_t (**)(void))(**(void **)(v5 + 112) + 24))(*(void *)(v5 + 112));
  uint64_t v113 = a3;
  if (v138 != v137)
  {
    uint64_t v32 = 0;
    uint64_t v33 = 0;
    uint64_t v34 = 0;
    unint64_t v117 = 0xAAAAAAAAAAAAAAABLL * (((char *)v138 - (unsigned char *)v137) >> 3);
    uint64_t v120 = 4 * v119;
    uint64_t v121 = 4 * v118;
    uint64_t v35 = (float32x4_t *)(v116 + 16);
    unint64_t v36 = (_OWORD *)(v115 + 16);
    do
    {
      uint64_t v37 = (char *)v137 + 24 * v34;
      if (v37[23] < 0)
      {
        sub_1B4BCA11C(__dst, *(void **)v37, *((void *)v37 + 1));
      }
      else
      {
        long long v38 = *(_OWORD *)v37;
        v128[0] = *((void **)v37 + 2);
        *(_OWORD *)long long __dst = v38;
      }
      (*(void (**)(uint32x4_t **__return_ptr))(**(void **)v5 + 24))(&v134);
      char v39 = v134;
      if (((char *)v135 - (char *)v134) >> 2 >= (unint64_t)*(int *)(v5 + 8)) {
        uint64_t v40 = *(int *)(v5 + 8);
      }
      else {
        uint64_t v40 = ((char *)v135 - (char *)v134) >> 2;
      }
      memset(__p, 0, sizeof(__p));
      if (v40)
      {
        if (v40 < 0) {
          sub_1B4BB3244();
        }
        size_t v41 = 4 * v40;
        uint64_t v42 = (uint32x4_t *)operator new(4 * v40);
        uint64_t v40 = (uint64_t)v42->i64 + 4 * v40;
        memmove(v42, v39, v41);
        if (v39)
        {
LABEL_60:
          __n128 v135 = v39;
          operator delete(v39);
        }
      }
      else
      {
        uint64_t v42 = 0;
        if (v134) {
          goto LABEL_60;
        }
      }
      __n128 v134 = v42;
      __n128 v135 = (uint32x4_t *)v40;
      uint64_t v136 = v40;
      uint64_t v44 = *(void **)v5;
      if (*(char *)(*(void *)v5 + 55) < 0)
      {
        uint64_t v45 = (void *)v44[4];
        uint64_t v46 = v44[5];
      }
      else
      {
        uint64_t v45 = v44 + 4;
        uint64_t v46 = *(unsigned __int8 *)(*(void *)v5 + 55);
      }
      int v43 = *(_DWORD *)(v40 - 4);
      if (v43 != (*(unsigned int (**)(void *, void *, uint64_t))(*v44 + 40))(v44, v45, v46))
      {
        CFDictionaryRef v47 = *(void **)v5;
        if (*(char *)(*(void *)v5 + 55) < 0)
        {
          uint64_t v48 = (void *)v47[4];
          uint64_t v49 = v47[5];
        }
        else
        {
          uint64_t v48 = v47 + 4;
          uint64_t v49 = *(unsigned __int8 *)(*(void *)v5 + 55);
        }
        __int32 v50 = (*(uint64_t (**)(void *, void *, uint64_t))(*v47 + 40))(v47, v48, v49);
        v135[-1].i32[3] = v50;
      }
      if (qword_1E9D40AE0 != -1) {
        dispatch_once(&qword_1E9D40AE0, &unk_1F0D55F60);
      }
      CFIndex v51 = (id)qword_1E9D40AD0;
      if (os_log_type_enabled(v51, OS_LOG_TYPE_DEBUG))
      {
        int v52 = __dst;
        if (SHIBYTE(v128[0]) < 0) {
          int v52 = (void **)__dst[0];
        }
        LODWORD(__p[0]) = 136315394;
        *(void **)((char *)__p + 4) = v52;
        WORD2(__p[1]) = 2048;
        *(void **)((char *)&__p[1] + 6) = (void *)(((char *)v135 - (char *)v134) >> 2);
        _os_log_impl(&dword_1B4BAD000, v51, OS_LOG_TYPE_DEBUG, "Tokenized query=%s into %zu tokens.", (uint8_t *)__p, 0x16u);
      }

      uint64_t v53 = v134;
      uint64_t v54 = (char *)v135 - (char *)v134;
      if (v135 != v134)
      {
        unint64_t v55 = 0;
        uint64_t v56 = v54 >> 2;
        if ((unint64_t)v54 < 0x20) {
          goto LABEL_83;
        }
        if ((unint64_t)(v115 + v121 * v34 - (v116 + v120 * v34)) < 0x20) {
          goto LABEL_83;
        }
        unint64_t v55 = v56 & 0xFFFFFFFFFFFFFFF8;
        CFNumberRef v57 = v134 + 1;
        CFTypeID v58 = v36;
        int v59 = v35;
        unint64_t v60 = v56 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          float32x4_t v61 = vcvtq_f32_u32(*v57);
          v59[-1] = vcvtq_f32_u32(v57[-1]);
          *int v59 = v61;
          *(v58 - 1) = 0uLL;
          _OWORD *v58 = 0uLL;
          v57 += 2;
          v59 += 2;
          v58 += 2;
          v60 -= 8;
        }
        while (v60);
        if (v56 != v55)
        {
LABEL_83:
          unint64_t v62 = v56 - v55;
          uint64_t v63 = (_DWORD *)(v115 + 4 * (v55 + v33));
          int v64 = (float *)(v116 + 4 * (v55 + v32));
          int v65 = (unsigned int *)v53 + v55;
          do
          {
            unsigned int v66 = *v65++;
            *v64++ = (float)v66;
            *v63++ = 0;
            --v62;
          }
          while (v62);
        }
LABEL_87:
        __n128 v135 = v53;
        operator delete(v53);
        goto LABEL_88;
      }
      if (v135) {
        goto LABEL_87;
      }
LABEL_88:
      if (SHIBYTE(v128[0]) < 0) {
        operator delete(__dst[0]);
      }
      ++v34;
      uint64_t v35 = (float32x4_t *)((char *)v35 + v120);
      unint64_t v36 = (_OWORD *)((char *)v36 + v121);
      v33 += v118;
      v32 += v119;
    }
    while (v34 != v117);
  }
  HIBYTE(__p[2]) = 8;
  strcpy((char *)__p, "text_ids");
  uint64_t v144 = (char *)&unk_1F0D54F90;
  int v145 = *(_DWORD *)(v5 + 24);
  uint64_t v147 = 0;
  uint64_t v148 = 0;
  uint64_t v146 = 0;
  int v68 = *(unsigned char **)(v5 + 32);
  int v67 = *(unsigned char **)(v5 + 40);
  int64_t v69 = v67 - v68;
  if (v67 != v68)
  {
    if (v69 < 0) {
      sub_1B4BB3244();
    }
    uint64_t v146 = operator new(v67 - v68);
    uint64_t v147 = (std::__shared_weak_count *)v146;
    unint64_t v70 = (std::__shared_weak_count *)((char *)v146 + 8 * (v69 >> 3));
    uint64_t v148 = v70;
    memcpy(v146, v68, v69);
    uint64_t v147 = v70;
  }
  uint64_t v149 = *(void *)(v5 + 56);
  uint64_t v71 = *(std::__shared_weak_count **)(v5 + 64);
  int64_t v150 = v71;
  if (v71) {
    atomic_fetch_add_explicit(&v71->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  char v152 = 13;
  strcpy((char *)&v151, "text_ids_mask");
  uint64_t v153 = &unk_1F0D54F90;
  int v154 = *(_DWORD *)(v5 + 80);
  uint64_t v156 = 0;
  float v157 = 0;
  uint64_t v155 = 0;
  uint64_t v73 = *(unsigned char **)(v5 + 88);
  uint64_t v72 = *(unsigned char **)(v5 + 96);
  int64_t v74 = v72 - v73;
  if (v72 != v73)
  {
    if (v74 < 0) {
      sub_1B4BB3244();
    }
    uint64_t v155 = operator new(v72 - v73);
    uint64_t v156 = v155;
    long long v75 = (char *)v155 + 8 * (v74 >> 3);
    float v157 = v75;
    memcpy(v155, v73, v74);
    uint64_t v156 = v75;
  }
  uint64_t v158 = *(void *)(v5 + 112);
  long long v76 = *(std::__shared_weak_count **)(v5 + 120);
  uint64_t v159 = v76;
  if (v76) {
    atomic_fetch_add_explicit(&v76->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(v140, 0, sizeof(v140));
  int v141 = 1065353216;
  sub_1B4C0D430((uint64_t)v140, (uint64_t)__p, (long long *)__p);
  sub_1B4C0D430((uint64_t)v140, (uint64_t)&v151, &v151);
  uint64_t v153 = &unk_1F0D54F90;
  long long v77 = v159;
  if (v159 && !atomic_fetch_add(&v159->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
    std::__shared_weak_count::__release_weak(v77);
  }
  if (v155)
  {
    uint64_t v156 = v155;
    operator delete(v155);
  }
  if (v152 < 0) {
    operator delete((void *)v151);
  }
  uint64_t v144 = (char *)&unk_1F0D54F90;
  int64_t v78 = v150;
  if (v150 && !atomic_fetch_add(&v150->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
    std::__shared_weak_count::__release_weak(v78);
  }
  if (v146)
  {
    uint64_t v147 = (std::__shared_weak_count *)v146;
    operator delete(v146);
  }
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  unint64_t v79 = (void **)v137;
  if (v137)
  {
    unint64_t v80 = v138;
    uint64_t v81 = v137;
    if (v138 != v137)
    {
      do
      {
        if (*((char *)v80 - 1) < 0) {
          operator delete(*(v80 - 3));
        }
        v80 -= 3;
      }
      while (v80 != v79);
      uint64_t v81 = v137;
    }
    __n128 v138 = v79;
    operator delete(v81);
  }
  uint64_t v82 = *(void *)v114;
  BYTE7(v125) = 8;
  strcpy((char *)v124, "text_ids");
  v132[0] = (long long *)v124;
  unint64_t v83 = sub_1B4C78AEC((uint64_t)v140, (uint64_t)v124, v132);
  HIBYTE(__p[2]) = 8;
  strcpy((char *)__p, "text_ids");
  uint64_t v144 = (char *)&unk_1F0D54F90;
  int v145 = *((_DWORD *)v83 + 12);
  uint64_t v147 = 0;
  uint64_t v148 = 0;
  uint64_t v146 = 0;
  unint64_t v85 = (unsigned char *)*((void *)v83 + 7);
  int64_t v84 = (unsigned char *)*((void *)v83 + 8);
  int64_t v86 = v84 - v85;
  if (v84 != v85)
  {
    if (v86 < 0) {
      sub_1B4BB3244();
    }
    uint64_t v146 = operator new(v84 - v85);
    uint64_t v147 = (std::__shared_weak_count *)v146;
    uint64_t v87 = (std::__shared_weak_count *)((char *)v146 + 8 * (v86 >> 3));
    uint64_t v148 = v87;
    memcpy(v146, v85, v86);
    uint64_t v147 = v87;
  }
  uint64_t v88 = (std::__shared_weak_count *)*((void *)v83 + 11);
  uint64_t v149 = *((void *)v83 + 10);
  int64_t v150 = v88;
  if (v88) {
    atomic_fetch_add_explicit(&v88->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  char v133 = 13;
  strcpy((char *)v132, "text_ids_mask");
  uint64_t v142 = v132;
  unint64_t v89 = sub_1B4C78AEC((uint64_t)v140, (uint64_t)v132, (long long **)&v142);
  char v152 = 13;
  strcpy((char *)&v151, "text_ids_mask");
  uint64_t v153 = &unk_1F0D54F90;
  int v154 = *((_DWORD *)v89 + 12);
  uint64_t v156 = 0;
  float v157 = 0;
  uint64_t v155 = 0;
  id v91 = (unsigned char *)*((void *)v89 + 7);
  char v90 = (unsigned char *)*((void *)v89 + 8);
  int64_t v92 = v90 - v91;
  if (v90 != v91)
  {
    if (v92 < 0) {
      sub_1B4BB3244();
    }
    uint64_t v155 = operator new(v90 - v91);
    uint64_t v156 = v155;
    uint64_t v93 = (char *)v155 + 8 * (v92 >> 3);
    float v157 = v93;
    memcpy(v155, v91, v92);
    uint64_t v156 = v93;
  }
  uint64_t v158 = *((void *)v89 + 10);
  long long v94 = (std::__shared_weak_count *)*((void *)v89 + 11);
  uint64_t v159 = v94;
  if (v94) {
    atomic_fetch_add_explicit(&v94->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)long long __dst = 0u;
  *(_OWORD *)__n128 v128 = 0u;
  int v129 = 1065353216;
  sub_1B4C0D430((uint64_t)__dst, (uint64_t)__p, (long long *)__p);
  sub_1B4C0D430((uint64_t)__dst, (uint64_t)&v151, &v151);
  sub_1B4C74880((uint64_t)&v134, v82, (uint64_t)__dst);
  sub_1B4C0CAF4((uint64_t)__dst);
  uint64_t v153 = &unk_1F0D54F90;
  uint64_t v95 = v159;
  if (v159 && !atomic_fetch_add(&v159->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
    std::__shared_weak_count::__release_weak(v95);
  }
  if (v155)
  {
    uint64_t v156 = v155;
    operator delete(v155);
  }
  if (v152 < 0) {
    operator delete((void *)v151);
  }
  uint64_t v144 = (char *)&unk_1F0D54F90;
  char v96 = v150;
  if (v150 && !atomic_fetch_add(&v150->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
    std::__shared_weak_count::__release_weak(v96);
  }
  if (v146)
  {
    uint64_t v147 = (std::__shared_weak_count *)v146;
    operator delete(v146);
  }
  if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
  {
    if ((v133 & 0x80000000) == 0) {
      goto LABEL_146;
    }
LABEL_169:
    operator delete(v132[0]);
    if ((SBYTE7(v125) & 0x80000000) == 0) {
      goto LABEL_147;
    }
LABEL_170:
    operator delete(v124[0]);
    goto LABEL_147;
  }
  operator delete(__p[0]);
  if (v133 < 0) {
    goto LABEL_169;
  }
LABEL_146:
  if (SBYTE7(v125) < 0) {
    goto LABEL_170;
  }
LABEL_147:
  uint64_t v97 = *(void *)(v114 + 8);
  v132[0] = (long long *)(v114 + 96);
  uint64_t v98 = sub_1B4C0BB94((uint64_t)&v134, v114 + 96, (uint64_t)&unk_1B4C9AE0A, v132);
  sub_1B4C789BC(__p, (long long *)(v114 + 96), (uint64_t)(v98 + 5));
  v132[0] = (long long *)(v114 + 120);
  std::string v99 = sub_1B4C0BB94((uint64_t)&v134, v114 + 120, (uint64_t)&unk_1B4C9AE0A, v132);
  sub_1B4C789BC(&v151, (long long *)(v114 + 120), (uint64_t)(v99 + 5));
  *(_OWORD *)__n128 v124 = 0u;
  long long v125 = 0u;
  int v126 = 1065353216;
  sub_1B4C0D430((uint64_t)v124, (uint64_t)__p, (long long *)__p);
  sub_1B4C0D430((uint64_t)v124, (uint64_t)&v151, &v151);
  sub_1B4C74C80((uint64_t)__dst, v97, (uint64_t)v124);
  sub_1B4C0CAF4((uint64_t)v124);
  uint64_t v153 = &unk_1F0D54F90;
  unint64_t v100 = v159;
  if (v159 && !atomic_fetch_add(&v159->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
    std::__shared_weak_count::__release_weak(v100);
  }
  if (v155)
  {
    uint64_t v156 = v155;
    operator delete(v155);
  }
  if (v152 < 0) {
    operator delete((void *)v151);
  }
  uint64_t v144 = (char *)&unk_1F0D54F90;
  std::string v101 = v150;
  if (v150 && !atomic_fetch_add(&v150->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
    std::__shared_weak_count::__release_weak(v101);
  }
  if (v146)
  {
    uint64_t v147 = (std::__shared_weak_count *)v146;
    operator delete(v146);
  }
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(void *)uint64_t v113 = &unk_1F0D54F90;
  int v102 = (int)__dst[1];
  *(void *)(v113 + 16) = 0;
  *(_DWORD *)(v113 + 8) = v102;
  *(void *)(v113 + 24) = 0;
  *(void *)(v113 + 32) = 0;
  CFDictionaryRef v103 = v128[0];
  int64_t v104 = (char *)v128[1] - (char *)v128[0];
  if (v128[1] != v128[0])
  {
    if (v104 < 0) {
      sub_1B4BB3244();
    }
    char v105 = (char *)operator new((char *)v128[1] - (char *)v128[0]);
    *(void *)(v113 + 16) = v105;
    *(void *)(v113 + 24) = v105;
    uint64_t v106 = &v105[8 * (v104 >> 3)];
    *(void *)(v113 + 32) = v106;
    memcpy(v105, v103, v104);
    *(void *)(v113 + 24) = v106;
  }
  uint64_t v107 = v131;
  *(void *)(v113 + 40) = v130;
  *(void *)(v113 + 48) = v107;
  if (v107)
  {
    atomic_fetch_add_explicit(&v107->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v108 = v131;
    __dst[0] = &unk_1F0D54F90;
    if (v131 && !atomic_fetch_add(&v131->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
      std::__shared_weak_count::__release_weak(v108);
    }
  }
  else
  {
    __dst[0] = &unk_1F0D54F90;
  }
  if (v128[0])
  {
    v128[1] = v128[0];
    operator delete(v128[0]);
  }
  sub_1B4C0CAF4((uint64_t)&v134);
  sub_1B4C0CAF4((uint64_t)v140);
  uint64_t v109 = (long long *)v122;
  if (v122)
  {
    unint64_t v110 = v123;
    unint64_t v111 = v122;
    if (v123 != v122)
    {
      do
      {
        if (*((char *)v110 - 1) < 0) {
          operator delete(*((void **)v110 - 3));
        }
        unint64_t v110 = (long long *)((char *)v110 - 24);
      }
      while (v110 != v109);
      unint64_t v111 = v122;
    }
    __n128 v123 = v109;
    operator delete(v111);
  }
}

void sub_1B4C74524(_Unwind_Exception *a1)
{
}

void sub_1B4C74818(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if ((a34 & 0x80000000) == 0) {
    JUMPOUT(0x1B4C74868);
  }
  JUMPOUT(0x1B4C74844);
}

void sub_1B4C74880(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a2 + 8);
  CFIndex v6 = *(long long **)(v5 + 56);
  CFNumberRef v7 = *(long long **)(v5 + 64);
  uint64_t v36 = a2;
  uint64_t v37 = a3;
  if (v6 == v7)
  {
    uint64_t v11 = 0;
    std::string __p = 0;
    char v39 = 0;
    v40[0] = 0;
    while (1)
    {
      output_blob_name = (const char *)espresso_get_output_blob_name();
      CFNumberRef v15 = output_blob_name;
      if (!output_blob_name) {
        goto LABEL_3;
      }
      CFNumberType v16 = v39;
      if ((unint64_t)v39 < v40[0])
      {
        size_t v17 = strlen(output_blob_name);
        if (v17 > 0x7FFFFFFFFFFFFFF7) {
          sub_1B4BB33D8();
        }
        size_t v18 = v17;
        if (v17 < 0x17)
        {
          *((unsigned char *)v39 + 23) = v17;
          CFNumberType v12 = v16;
          if (v17) {
            goto LABEL_14;
          }
        }
        else
        {
          uint64_t v19 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v17 | 7) != 0x17) {
            uint64_t v19 = v17 | 7;
          }
          uint64_t v20 = v19 + 1;
          CFNumberType v12 = operator new(v19 + 1);
          v39[1] = (void *)v18;
          void v16[2] = (void *)(v20 | 0x8000000000000000);
          std::__shared_weak_count *v16 = v12;
LABEL_14:
          memmove(v12, v15, v18);
        }
        *((unsigned char *)v12 + v18) = 0;
        CFNumberRef v13 = v16 + 3;
        goto LABEL_16;
      }
      unint64_t v21 = 0xAAAAAAAAAAAAAAABLL * (((char *)v39 - (unsigned char *)__p) >> 3) + 1;
      if (v21 > 0xAAAAAAAAAAAAAAALL) {
        sub_1B4BB3244();
      }
      if (0x5555555555555556 * ((uint64_t)(v40[0] - (void)__p) >> 3) > v21) {
        unint64_t v21 = 0x5555555555555556 * ((uint64_t)(v40[0] - (void)__p) >> 3);
      }
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v40[0] - (void)__p) >> 3) >= 0x555555555555555) {
        unint64_t v22 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v22 = v21;
      }
      uint64_t v44 = v40;
      if (v22)
      {
        if (v22 > 0xAAAAAAAAAAAAAAALL) {
          sub_1B4BB2D38();
        }
        long long v23 = (char *)operator new(24 * v22);
      }
      else
      {
        long long v23 = 0;
      }
      unint64_t v24 = &v23[8 * (((char *)v39 - (unsigned char *)__p) >> 3)];
      v40[1] = v23;
      size_t v41 = v24;
      uint64_t v42 = v24;
      int v43 = &v23[24 * v22];
      size_t v25 = strlen(v15);
      if (v25 > 0x7FFFFFFFFFFFFFF7) {
        sub_1B4BB33D8();
      }
      size_t v26 = v25;
      if (v25 >= 0x17)
      {
        uint64_t v30 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v25 | 7) != 0x17) {
          uint64_t v30 = v25 | 7;
        }
        uint64_t v31 = v30 + 1;
        uint64_t v32 = (char *)operator new(v30 + 1);
        *((void *)v24 + 1) = v26;
        *((void *)v24 + 2) = v31 | 0x8000000000000000;
        *(void *)unint64_t v24 = v32;
        unint64_t v24 = v32;
      }
      else
      {
        v24[23] = v25;
        if (!v25)
        {
          char *v24 = 0;
          int32x2_t v27 = v41;
          CFNumberRef v13 = (void **)(v42 + 24);
          CFArrayRef v28 = (void **)__p;
          uint64_t v29 = v39;
          if (v39 != __p) {
            goto LABEL_43;
          }
          goto LABEL_49;
        }
      }
      memmove(v24, v15, v26);
      v24[v26] = 0;
      int32x2_t v27 = v41;
      CFNumberRef v13 = (void **)(v42 + 24);
      CFArrayRef v28 = (void **)__p;
      uint64_t v29 = v39;
      if (v39 != __p)
      {
        do
        {
LABEL_43:
          long long v33 = *(_OWORD *)(v29 - 3);
          *((void *)v27 - 1) = *(v29 - 1);
          *(_OWORD *)(v27 - 24) = v33;
          v27 -= 24;
          *(v29 - 2) = 0;
          *(v29 - 1) = 0;
          *(v29 - 3) = 0;
          v29 -= 3;
        }
        while (v29 != v28);
        uint64_t v29 = (void **)__p;
        uint64_t v34 = v39;
        std::string __p = v27;
        char v39 = v13;
        v40[0] = v43;
        while (v34 != v29)
        {
          if (*((char *)v34 - 1) < 0) {
            operator delete(*(v34 - 3));
          }
          v34 -= 3;
        }
        goto LABEL_50;
      }
LABEL_49:
      std::string __p = v27;
      char v39 = v13;
      v40[0] = v43;
LABEL_50:
      if (v29) {
        operator delete(v29);
      }
LABEL_16:
      char v39 = v13;
      ++v11;
    }
  }
  std::string __p = 0;
  char v39 = 0;
  v40[0] = 0;
  sub_1B4BCA340((char *)&__p, v6, v7, 0xAAAAAAAAAAAAAAABLL * (((char *)v7 - (char *)v6) >> 3));
LABEL_3:
  sub_1B4C0A928(v36, v37, (long long **)&__p, a1);
  uint64_t v8 = (void **)__p;
  if (__p)
  {
    int v9 = v39;
    CFNumberType v10 = __p;
    if (v39 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0) {
          operator delete(*(v9 - 3));
        }
        v9 -= 3;
      }
      while (v9 != v8);
      CFNumberType v10 = __p;
    }
    char v39 = v8;
    operator delete(v10);
  }
}

void sub_1B4C74BF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_1B4BF9508((void **)va);
  _Unwind_Resume(a1);
}

void sub_1B4C74C04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **__p, void **a14, uint64_t a15, char a16)
{
  sub_1B4BFA018((uint64_t)&a16);
  if (__p)
  {
    size_t v17 = a14;
    size_t v18 = __p;
    if (a14 != __p)
    {
      do
      {
        if (*((char *)v17 - 1) < 0) {
          operator delete(*(v17 - 3));
        }
        v17 -= 3;
      }
      while (v17 != __p);
      size_t v18 = __p;
    }
    operator delete(v18);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1B4C74C80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(*(void *)(a2 + 8) + 64) - *(void *)(*(void *)(a2 + 8) + 56) != 24)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1B4C78980(exception);
    __cxa_throw(exception, (struct type_info *)&unk_1F0D533B0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  sub_1B4C74880((uint64_t)v14, a2, a3);
  uint64_t v4 = v15;
  *(void *)a1 = &unk_1F0D54F90;
  int v5 = *(_DWORD *)(v4 + 48);
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 8) = v5;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  CFNumberRef v7 = *(unsigned char **)(v4 + 56);
  CFIndex v6 = *(unsigned char **)(v4 + 64);
  int64_t v8 = v6 - v7;
  if (v6 != v7)
  {
    if (v8 < 0) {
      sub_1B4BB3244();
    }
    int v9 = (char *)operator new(v6 - v7);
    *(void *)(a1 + 16) = v9;
    *(void *)(a1 + 24) = v9;
    CFNumberType v10 = &v9[8 * (v8 >> 3)];
    *(void *)(a1 + 32) = v10;
    memcpy(v9, v7, v8);
    *(void *)(a1 + 24) = v10;
  }
  *(void *)(a1 + 40) = *(void *)(v4 + 80);
  uint64_t v11 = *(void *)(v4 + 88);
  *(void *)(a1 + 48) = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)a1 = &unk_1F0D54E50;
  return sub_1B4C0CAF4((uint64_t)v14);
}

void sub_1B4C74DC0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1B4C74DD4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  int v5 = *v3;
  if (*v3)
  {
    *(void *)(v2 + 24) = v5;
    operator delete(v5);
  }
  sub_1B4C0CAF4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1B4C74DF8(uint64_t a1, uint64_t a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(void *)(a1 + 256) = 0;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(void *)(a1 + 80) = 0;
  char v5 = 15;
  strcpy((char *)__p, "model_spec.json");
  sub_1B4C03298(a2, (char *)__p, &v6);
  if (v5 < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v8) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((SHIBYTE(v8) & 0x80000000) == 0)
  {
LABEL_3:
    *(_OWORD *)long long __dst = v7;
    uint64_t v3 = v8;
    goto LABEL_6;
  }
  sub_1B4BCA11C(__dst, (void *)v7, *((unint64_t *)&v7 + 1));
LABEL_6:
  if (SHIBYTE(v3) < 0)
  {
    sub_1B4BCA11C(__src, __dst[0], (unint64_t)__dst[1]);
  }
  else
  {
    *(_OWORD *)__src = *(_OWORD *)__dst;
    uint64_t v10 = v3;
  }
  if (SHIBYTE(v10) < 0)
  {
    sub_1B4BCA11C(buf, __src[0], (unint64_t)__src[1]);
  }
  else
  {
    *(_OWORD *)long long buf = *(_OWORD *)__src;
    uint64_t v12 = v10;
  }
  sub_1B4C0E2E8((uint64_t)&v13, (uint64_t)buf);
}

void sub_1B4C761F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t **a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58,void *a59,void *a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  sub_1B4C244A8(v74);
  sub_1B4C732A0(v73);
  uint64_t v76 = *v72;
  *uint64_t v72 = 0;
  if (v76)
  {
    (*(void (**)(uint64_t))(*(void *)v76 + 8))(v76);
    if ((a71 & 0x80000000) == 0) {
      goto LABEL_7;
    }
  }
  else if ((a71 & 0x80000000) == 0)
  {
LABEL_7:
    MEMORY[0x1BA9929C0](v72, 0x1032C4025D38E4FLL);
    if (a58 < 0) {
      operator delete(a53);
    }
    sub_1B4C769C0(a11);
    sub_1B4C3236C(a10, 0);
    long long v77 = *v71;
    std::__shared_weak_count *v71 = 0;
    if (!v77) {
      _Unwind_Resume(a1);
    }
    sub_1B4C325AC((uint64_t)v71, v77);
    _Unwind_Resume(a1);
  }
  operator delete(__p);
  goto LABEL_7;
}

uint64_t sub_1B4C769C0(uint64_t a1)
{
  if ((*(char *)(a1 + 71) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 47) & 0x80000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    operator delete(*(void **)(a1 + 24));
    if ((*(char *)(a1 + 23) & 0x80000000) == 0) {
      return a1;
    }
    goto LABEL_7;
  }
  operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((*(char *)(a1 + 23) & 0x80000000) == 0) {
    return a1;
  }
LABEL_7:
  operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_1B4C76A3C@<X0>(uint64_t *a1@<X0>, __CVBuffer *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v64 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  sub_1B4C77D00((uint64_t)&v46, a2);
  *(_DWORD *)(v6 + 80) = CVPixelBufferGetPixelFormatType(a2);
  if (!*(void *)(v6 + 64) || !*(void *)(v6 + 72))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Invalid dimensions requested for CVPixelBuffer creation.");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  CVPixelBufferRef pixelBufferOut = 0;
  CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  uint64_t v53 = Mutable;
  if (*(unsigned char *)(v6 + 84))
  {
    CFMutableDictionaryRef v9 = CFDictionaryCreateMutable(v7, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    uint64_t v10 = (const void *)*MEMORY[0x1E4F24D20];
    v52.__r_.__value_.__r.__words[0] = (std::string::size_type)v9;
    CFDictionarySetValue(Mutable, v10, v9);
    if (v9) {
      CFRelease(v9);
    }
  }
  if (*(unsigned char *)(v6 + 96))
  {
    CFNumberRef v11 = CFNumberCreate(v7, kCFNumberSInt64Type, (const void *)(v6 + 88));
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F24C98], v11);
    CFRelease(v11);
  }
  CVReturn v12 = CVPixelBufferCreate(v7, *(void *)(v6 + 64), *(void *)(v6 + 72), *(_DWORD *)(v6 + 80), Mutable, &pixelBufferOut);
  if (v12)
  {
    uint64_t v35 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v51, v12);
    uint64_t v36 = std::string::insert(&v51, 0, "Failed to create CVPixelBuffer. Status = ");
    long long v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
    v52.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v37;
    v36->__r_.__value_.__l.__size_ = 0;
    v36->__r_.__value_.__r.__words[2] = 0;
    v36->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v35, &v52);
    __cxa_throw(v35, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  long long v13 = pixelBufferOut;
  if (Mutable) {
    CFRelease(Mutable);
  }
  sub_1B4C77D00((uint64_t)&v55, v13);
  CVPixelBufferRelease(v59[1]);
  *(_DWORD *)(v6 + 16) = DWORD2(v55);
  if ((long long *)(v6 + 8) != &v55) {
    sub_1B4C0A420((void *)(v6 + 24), v56, v57, (v57 - v56) >> 3);
  }
  uint64_t v15 = v59;
  uint64_t v14 = v60;
  if (v60) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)v60 + 1, 1uLL, memory_order_relaxed);
  }
  CFNumberType v16 = *(std::__shared_weak_count **)(v6 + 56);
  *(void *)(v6 + 48) = v15;
  *(void *)(v6 + 56) = v14;
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  *(void *)&long long v55 = &unk_1F0D54F90;
  size_t v17 = (std::__shared_weak_count *)v60;
  if (v60 && !atomic_fetch_add((atomic_ullong *volatile)v60 + 1, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  if (v56)
  {
    CFNumberRef v57 = v56;
    operator delete(v56);
  }
  uint64_t v18 = VTPixelTransferSessionTransferImage(**(VTPixelTransferSessionRef **)v6, *(CVPixelBufferRef *)(v49 + 8), *(CVPixelBufferRef *)(*(void *)(v6 + 48) + 8));
  sub_1B4C77A2C(v18, "Image Transfer");
  HIBYTE(v56) = 5;
  strcpy((char *)&v55, "image");
  CFNumberRef v57 = (char *)&unk_1F0D54F90;
  int v58 = *(_DWORD *)(v6 + 16);
  unint64_t v60 = 0;
  float32x4_t v61 = 0;
  int v59 = 0;
  uint64_t v20 = *(unsigned char **)(v6 + 24);
  uint64_t v19 = *(unsigned char **)(v6 + 32);
  int64_t v21 = v19 - v20;
  if (v19 != v20)
  {
    if (v21 < 0) {
      sub_1B4BB3244();
    }
    int v59 = (CVPixelBufferRef *)operator new(v19 - v20);
    unint64_t v60 = v59;
    unint64_t v22 = &v59[v21 >> 3];
    float32x4_t v61 = v22;
    memcpy(v59, v20, v21);
    unint64_t v60 = v22;
  }
  uint64_t v62 = *(void *)(v6 + 48);
  long long v23 = *(std::__shared_weak_count **)(v6 + 56);
  uint64_t v63 = v23;
  if (v23) {
    atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(v38, 0, sizeof(v38));
  int v39 = 1065353216;
  sub_1B4C0D430((uint64_t)v38, (uint64_t)&v55, &v55);
  CFNumberRef v57 = (char *)&unk_1F0D54F90;
  unint64_t v24 = v63;
  if (v63 && !atomic_fetch_add(&v63->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
  }
  if (v59)
  {
    unint64_t v60 = v59;
    operator delete(v59);
  }
  if (SHIBYTE(v56) < 0) {
    operator delete((void *)v55);
  }
  uint64_t v46 = &unk_1F0D54F90;
  size_t v25 = v50;
  if (v50 && !atomic_fetch_add(&v50->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
  }
  if (__p)
  {
    uint64_t v48 = __p;
    operator delete(__p);
  }
  sub_1B4C74C80((uint64_t)&v40, v5, (uint64_t)v38);
  *(void *)a3 = &unk_1F0D54F90;
  int v26 = v41;
  *(void *)(a3 + 16) = 0;
  *(_DWORD *)(a3 + 8) = v26;
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = 0;
  int32x2_t v27 = v42;
  int64_t v28 = v43 - (unsigned char *)v42;
  if (v43 != v42)
  {
    if (v28 < 0) {
      sub_1B4BB3244();
    }
    uint64_t v29 = (char *)operator new(v43 - (unsigned char *)v42);
    *(void *)(a3 + 16) = v29;
    *(void *)(a3 + 24) = v29;
    uint64_t v30 = &v29[8 * (v28 >> 3)];
    *(void *)(a3 + 32) = v30;
    memcpy(v29, v27, v28);
    *(void *)(a3 + 24) = v30;
  }
  uint64_t v31 = v45;
  *(void *)(a3 + 40) = v44;
  *(void *)(a3 + 48) = v31;
  if (v31)
  {
    atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v32 = v45;
    uint64_t v40 = &unk_1F0D54F90;
    if (v45 && !atomic_fetch_add(&v45->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  else
  {
    uint64_t v40 = &unk_1F0D54F90;
  }
  if (v42)
  {
    int v43 = v42;
    operator delete(v42);
  }
  return sub_1B4C0CAF4((uint64_t)v38);
}

void sub_1B4C770BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a39 < 0) {
    operator delete(__p);
  }
  if (a33 < 0)
  {
    operator delete(a28);
    if ((v40 & 1) == 0)
    {
LABEL_8:
      sub_1B4C7894C((const void **)(v41 - 168));
      sub_1B4C730AC(&a21);
      _Unwind_Resume(a1);
    }
  }
  else if (!v40)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v39);
  sub_1B4C7894C((const void **)(v41 - 168));
  sub_1B4C730AC(&a21);
  _Unwind_Resume(a1);
}

void sub_1B4C77280(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  sub_1B4C730AC((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1B4C77294(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  sub_1B4C730AC((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1B4C772A8(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *(int *)(a1 + 280);
  CFAllocatorRef v7 = operator new(8uLL);
  std::string __p = v7;
  void *v7 = v6;
  uint64_t v56 = v7 + 1;
  CFNumberRef v57 = v7 + 1;
  sub_1B4C097C4((int32x4_t **)&__p, (uint64_t)&v61, 0);
  if (__p)
  {
    uint64_t v56 = __p;
    operator delete(__p);
  }
  if (v62 != 1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Incorrect data type requested.");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v65 + 24))(v65);
  unint64_t v53 = v10;
  unint64_t v11 = v8;
  uint64_t v12 = a2[1] - *a2;
  if (v12)
  {
    uint64_t v13 = 0;
    unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * (v12 >> 3);
    uint64_t v54 = (float32x4_t *)(v8 + 16);
    do
    {
      sub_1B4C73330(*(void *)(a1 + 8), *a2 + 24 * v13, (uint64_t)&__p);
      if (v56 != 1)
      {
        std::string v51 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v51, "Incorrect data type requested.");
        __cxa_throw(v51, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      unint64_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)v59 + 24))(v59);
      uint64_t v16 = *(int *)(a1 + 280);
      if (v16)
      {
        if (v16 < 8 || (v15 + 4 * v16 > v11 ? (BOOL v17 = v11 + 4 * v16 > v15) : (BOOL v17 = 0), v17))
        {
          unint64_t v18 = 0;
LABEL_19:
          uint64_t v23 = v16 - v18;
          uint64_t v24 = 4 * v18;
          size_t v25 = (float *)(v11 + 4 * v18);
          int v26 = (float *)(v15 + v24);
          do
          {
            float v27 = *v26++;
            float *v25 = *v25 + v27;
            ++v25;
            --v23;
          }
          while (v23);
          goto LABEL_21;
        }
        unint64_t v18 = v16 & 0xFFFFFFFFFFFFFFF8;
        uint64_t v19 = (float32x4_t *)(v15 + 16);
        unint64_t v20 = v16 & 0xFFFFFFFFFFFFFFF8;
        int64_t v21 = v54;
        do
        {
          float32x4_t v9 = vaddq_f32(v21[-1], v19[-1]);
          float32x4_t v22 = vaddq_f32(*v21, *v19);
          v21[-1] = v9;
          *int64_t v21 = v22;
          v19 += 2;
          v21 += 2;
          v20 -= 8;
        }
        while (v20);
        if (v18 != v16) {
          goto LABEL_19;
        }
      }
LABEL_21:
      std::string __p = &unk_1F0D54F90;
      int64_t v28 = v60;
      if (v60 && !atomic_fetch_add(&v60->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
        uint64_t v29 = v57;
        if (!v57) {
          goto LABEL_6;
        }
LABEL_24:
        int v58 = v29;
        operator delete(v29);
        goto LABEL_6;
      }
      uint64_t v29 = v57;
      if (v57) {
        goto LABEL_24;
      }
LABEL_6:
      ++v13;
    }
    while (v13 != v14);
  }
  if (v53 >= 4)
  {
    unint64_t v30 = v53 >> 2;
    v9.f32[0] = (float)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 3));
    if (v53 < 0x20)
    {
      uint64_t v31 = 0;
LABEL_33:
      unint64_t v41 = v30 - v31;
      uint64_t v42 = (float *)(v11 + 4 * v31);
      float v43 = 1.0 / v9.f32[0];
      do
      {
        float *v42 = *v42 * v43;
        ++v42;
        --v41;
      }
      while (v41);
      goto LABEL_35;
    }
    uint64_t v31 = v30 & 0x3FFFFFFFFFFFFFF8;
    __asm { FMOV            V2.4S, #1.0 }
    float32x4_t v37 = vdivq_f32(_Q2, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v9.f32, 0));
    long long v38 = (float32x4_t *)(v11 + 16);
    uint64_t v39 = v30 & 0x3FFFFFFFFFFFFFF8;
    do
    {
      float32x4_t v40 = vmulq_f32(*v38, v37);
      v38[-1] = vmulq_f32(v38[-1], v37);
      *long long v38 = v40;
      v38 += 2;
      v39 -= 8;
    }
    while (v39);
    if (v30 != v31) {
      goto LABEL_33;
    }
  }
LABEL_35:
  *(void *)a3 = &unk_1F0D54F90;
  int v44 = v62;
  *(void *)(a3 + 16) = 0;
  *(_DWORD *)(a3 + 8) = v44;
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = 0;
  uint64_t v45 = v63;
  int64_t v46 = v64 - (unsigned char *)v63;
  if (v64 != v63)
  {
    if (v46 < 0) {
      sub_1B4BB3244();
    }
    CFDictionaryRef v47 = (char *)operator new(v64 - (unsigned char *)v63);
    *(void *)(a3 + 16) = v47;
    *(void *)(a3 + 24) = v47;
    uint64_t v48 = &v47[8 * (v46 >> 3)];
    *(void *)(a3 + 32) = v48;
    memcpy(v47, v45, v46);
    *(void *)(a3 + 24) = v48;
  }
  uint64_t v49 = v66;
  *(void *)(a3 + 40) = v65;
  *(void *)(a3 + 48) = v49;
  if (v49)
  {
    atomic_fetch_add_explicit(&v49->__shared_owners_, 1uLL, memory_order_relaxed);
    __int32 v50 = v66;
    float32x4_t v61 = &unk_1F0D54F90;
    if (v66 && !atomic_fetch_add(&v66->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  else
  {
    float32x4_t v61 = &unk_1F0D54F90;
  }
  if (v63)
  {
    uint64_t v64 = v63;
    operator delete(v63);
  }
}

void sub_1B4C77748(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  __cxa_free_exception(v18);
  sub_1B4BFF868(&a18);
  _Unwind_Resume(a1);
}

char *sub_1B4C777CC(char *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_1B4BCA11C(__dst, *(void **)a2, *((void *)a2 + 1));
    uint64_t v5 = __dst + 24;
    if ((*((char *)a2 + 47) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else
  {
    long long v4 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)long long __dst = v4;
    uint64_t v5 = __dst + 24;
    if ((*((char *)a2 + 47) & 0x80000000) == 0)
    {
LABEL_3:
      long long v6 = *(long long *)((char *)a2 + 24);
      *((void *)v5 + 2) = *((void *)a2 + 5);
      *(_OWORD *)uint64_t v5 = v6;
      goto LABEL_6;
    }
  }
  sub_1B4BCA11C(v5, *((void **)a2 + 3), *((void *)a2 + 4));
LABEL_6:
  *((void *)__dst + 6) = 0;
  *((void *)__dst + 7) = 0;
  *((void *)__dst + 8) = 0;
  sub_1B4BCA340(__dst + 48, *((long long **)a2 + 6), *((long long **)a2 + 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 7) - *((void *)a2 + 6)) >> 3));
  if (*((char *)a2 + 95) < 0)
  {
    sub_1B4BCA11C(__dst + 72, *((void **)a2 + 9), *((void *)a2 + 10));
  }
  else
  {
    long long v7 = *(long long *)((char *)a2 + 72);
    *((void *)__dst + 11) = *((void *)a2 + 11);
    *(_OWORD *)(__dst + 72) = v7;
  }
  if (*((char *)a2 + 119) < 0)
  {
    sub_1B4BCA11C(__dst + 96, *((void **)a2 + 12), *((void *)a2 + 13));
  }
  else
  {
    long long v8 = a2[6];
    *((void *)__dst + 14) = *((void *)a2 + 14);
    *((_OWORD *)__dst + 6) = v8;
  }
  if (*((char *)a2 + 143) < 0)
  {
    sub_1B4BCA11C(__dst + 120, *((void **)a2 + 15), *((void *)a2 + 16));
  }
  else
  {
    long long v9 = *(long long *)((char *)a2 + 120);
    *((void *)__dst + 17) = *((void *)a2 + 17);
    *(_OWORD *)(__dst + 120) = v9;
  }
  unint64_t v10 = __dst + 144;
  if (*((char *)a2 + 167) < 0)
  {
    sub_1B4BCA11C(v10, *((void **)a2 + 18), *((void *)a2 + 19));
  }
  else
  {
    long long v11 = a2[9];
    *((void *)__dst + 20) = *((void *)a2 + 20);
    *(_OWORD *)unint64_t v10 = v11;
  }
  uint64_t v12 = *((void *)a2 + 21);
  __dst[176] = *((unsigned char *)a2 + 176);
  *((void *)__dst + 21) = v12;
  return __dst;
}

void sub_1B4C77964(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 143) < 0)
  {
    operator delete(*v6);
    if ((*(char *)(v1 + 119) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v1 + 95) & 0x80000000) == 0)
      {
LABEL_8:
        sub_1B4BF9508(v3);
        if (*(char *)(v1 + 47) < 0)
        {
          operator delete(*v2);
          if ((*(char *)(v1 + 23) & 0x80000000) == 0) {
LABEL_10:
          }
            _Unwind_Resume(a1);
        }
        else if ((*(char *)(v1 + 23) & 0x80000000) == 0)
        {
          goto LABEL_10;
        }
        operator delete(*(void **)v1);
        _Unwind_Resume(a1);
      }
LABEL_7:
      operator delete(*v4);
      goto LABEL_8;
    }
  }
  else if ((*(char *)(v1 + 119) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*v5);
  if ((*(char *)(v1 + 95) & 0x80000000) == 0) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

uint64_t sub_1B4C77A2C(uint64_t result, char *a2)
{
  if (result)
  {
    int v2 = result;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1B4BB8DC0(&v14, a2);
    uint64_t v5 = std::string::insert(&v14, 0, "PixelBufferTransfer operation [");
    long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v15.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    long long v7 = std::string::append(&v15, "] failed. Status = ");
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v16.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v16.__r_.__value_.__l.__data_ = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v13, v2);
    if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v9 = &v13;
    }
    else {
      long long v9 = (std::string *)v13.__r_.__value_.__r.__words[0];
    }
    if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v13.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v13.__r_.__value_.__l.__size_;
    }
    long long v11 = std::string::append(&v16, (const std::string::value_type *)v9, size);
    long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v17);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  return result;
}

void sub_1B4C77B50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v35 - 41) < 0)
  {
    operator delete(*(void **)(v35 - 64));
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a33 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a9);
  if ((a33 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a26 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }
LABEL_10:
  operator delete(a28);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_5:
    if (a20 < 0) {
      goto LABEL_6;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a21);
  if (a20 < 0)
  {
LABEL_6:
    operator delete(__p);
    if ((v34 & 1) == 0) {
LABEL_14:
    }
      _Unwind_Resume(a1);
LABEL_13:
    __cxa_free_exception(v33);
    goto LABEL_14;
  }
LABEL_12:
  if (!v34) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

void sub_1B4C77C3C(void *a1)
{
  *a1 = &unk_1F0D54F90;
  int v2 = (std::__shared_weak_count *)a1[6];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (void *)a1[2];
    if (!v3)
    {
LABEL_5:
      JUMPOUT(0x1BA9929C0);
    }
  }
  else
  {
    uint64_t v3 = (void *)a1[2];
    if (!v3) {
      goto LABEL_5;
    }
  }
  a1[3] = v3;
  operator delete(v3);
  goto LABEL_5;
}

uint64_t sub_1B4C77D00(uint64_t a1, __CVBuffer *a2)
{
  long long v4 = (std::__shared_weak_count *)operator new(0x28uLL);
  v4->__shared_owners_ = 0;
  v4->__shared_weak_owners_ = 0;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0D55BA8;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0D54EF0;
  v4[1].__shared_owners_ = (uint64_t)a2;
  if (!a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Null CVPixelBuffer encountered.");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  CVPixelBufferRetain(a2);
  int v5 = sub_1B4C7800C(a2);
  size_t Height = CVPixelBufferGetHeight(a2);
  size_t Width = CVPixelBufferGetWidth(a2);
  uint64_t v8 = sub_1B4C785F4(a2);
  long long v9 = operator new(8uLL);
  void *v9 = Height;
  unint64_t v10 = operator new(0x10uLL);
  void *v10 = Height;
  v10[1] = Width;
  operator delete(v9);
  long long v11 = operator new(0x20uLL);
  void v11[2] = v8;
  *(_OWORD *)long long v11 = *(_OWORD *)v10;
  operator delete(v10);
  *(void *)a1 = &unk_1F0D54F90;
  *(_DWORD *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  long long v12 = operator new(0x18uLL);
  *(_OWORD *)long long v12 = *(_OWORD *)v11;
  v12[2] = v11[2];
  *(void *)(a1 + 16) = v12;
  *(void *)(a1 + 24) = v12 + 3;
  *(void *)(a1 + 32) = v12 + 3;
  *(void *)(a1 + 40) = v4 + 1;
  *(void *)(a1 + 48) = v4;
  atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  operator delete(v11);
  if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  *(void *)a1 = &unk_1F0D54E98;
  return a1;
}

void sub_1B4C77F70(_Unwind_Exception *a1)
{
  __cxa_free_exception(v2);
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v4);
  _Unwind_Resume(a1);
}

void sub_1B4C77F90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  std::string v15 = *v13;
  if (*v13)
  {
    *(void *)(v11 + 24) = v15;
    operator delete(v15);
  }
  operator delete(v12);
  sub_1B4C035DC((uint64_t)&a11);
  sub_1B4C035DC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1B4C7800C(__CVBuffer *a1)
{
  signed int PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  if (PixelFormatType <= 1278226533)
  {
    if (PixelFormatType <= 1111970368)
    {
      if (PixelFormatType != 32)
      {
        int v2 = 1094862674;
        goto LABEL_10;
      }
      return 0;
    }
    if (PixelFormatType == 1111970369) {
      return 0;
    }
    int v2 = 1278226488;
LABEL_10:
    if (PixelFormatType == v2) {
      return 0;
    }
LABEL_15:
    unsigned int v4 = PixelFormatType;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v8, v4);
    long long v6 = std::string::insert(&v8, 0, "Unsupported CVPixelBuffer type: ");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v9.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v9.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v9);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (PixelFormatType > 1717855599)
  {
    if (PixelFormatType != 1717856627 && PixelFormatType != 1717855600) {
      goto LABEL_15;
    }
  }
  else if (PixelFormatType != 1278226534)
  {
    int v2 = 1380401729;
    goto LABEL_10;
  }
  return 1;
}

void sub_1B4C78180(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

void sub_1B4C781E0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0D55BA8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1B4C78200(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0D55BA8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1BA9929C0);
}

void sub_1B4C78254(uint64_t a1)
{
}

uint64_t sub_1B4C78278(uint64_t a1)
{
  return a1;
}

void sub_1B4C782A8(uint64_t a1)
{
  CVPixelBufferRelease(*(CVPixelBufferRef *)(a1 + 8));
  JUMPOUT(0x1BA9929C0);
}

uint64_t sub_1B4C782F8(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 24))(a2, *(void *)(a1 + 8));
}

void *sub_1B4C78328(uint64_t a1)
{
  BaseAddress = CVPixelBufferGetBaseAddress(*(CVPixelBufferRef *)(a1 + 8));
  if (!BaseAddress)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Failed to get CVPixelBuffer's data. Ensure the buffer was locked.");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v3 = BaseAddress;
  CVPixelBufferGetDataSize(*(CVPixelBufferRef *)(a1 + 8));
  return v3;
}

void sub_1B4C783A0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *sub_1B4C783B4@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  int v4 = sub_1B4C7800C(*(__CVBuffer **)(a1 + 8));
  size_t BytesPerRow = CVPixelBufferGetBytesPerRow(*(CVPixelBufferRef *)(a1 + 8));
  uint64_t v6 = sub_1B4C785F4(*(__CVBuffer **)(a1 + 8));
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  uint64_t result = operator new(0x18uLL);
  a2[1] = result + 3;
  a2[2] = result + 3;
  void *result = BytesPerRow;
  result[1] = v6 << (2 * (v4 != 0));
  if (v4) {
    uint64_t v8 = 4;
  }
  else {
    uint64_t v8 = 1;
  }
  result[2] = v8;
  *a2 = result;
  return result;
}

void sub_1B4C78440(CVPixelBufferRef *a1)
{
  if (!CVPixelBufferLockBaseAddress(a1[1], 1uLL))
  {
    (*((void (**)(CVPixelBufferRef *))*a1 + 3))(a1);
    (*((void (**)(void **__return_ptr, CVPixelBufferRef *))*a1 + 4))(&__p, a1);
    sub_1B4C0A1FC();
  }
  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "Failed to lock pixel buffer.");
  __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
}

void sub_1B4C7859C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1B4C785B0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1B4C785C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  sub_1B4C787C8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1B4C785F4(__CVBuffer *a1)
{
  signed int PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  if (PixelFormatType <= 1278226533)
  {
    if (PixelFormatType <= 1111970368)
    {
      if (PixelFormatType == 32) {
        return 4;
      }
      int v2 = 1094862674;
      goto LABEL_8;
    }
    if (PixelFormatType == 1111970369) {
      return 4;
    }
    int v4 = 1278226488;
LABEL_14:
    if (PixelFormatType != v4) {
      goto LABEL_16;
    }
    return 1;
  }
  if (PixelFormatType > 1717855599)
  {
    if (PixelFormatType == 1717856627) {
      return 1;
    }
    int v4 = 1717855600;
    goto LABEL_14;
  }
  if (PixelFormatType != 1278226534)
  {
    int v2 = 1380401729;
LABEL_8:
    if (PixelFormatType == v2) {
      return 4;
    }
LABEL_16:
    unsigned int v5 = PixelFormatType;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v9, v5);
    long long v7 = std::string::insert(&v9, 0, "Unsupported CVPixelBuffer type: ");
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v10.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v10.__r_.__value_.__l.__data_ = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v10);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  return 1;
}

void sub_1B4C78768(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

uint64_t sub_1B4C787C8(uint64_t a1)
{
  *(void *)a1 = &unk_1F0D54F70;
  if (CVPixelBufferUnlockBaseAddress(*(CVPixelBufferRef *)(a1 + 8), *(void *)(a1 + 16)))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Failed to unlock pixel buffer.");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  return a1;
}

void sub_1B4C78850(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1B4C78864(uint64_t a1)
{
  *(void *)a1 = &unk_1F0D54F70;
  if (!CVPixelBufferUnlockBaseAddress(*(CVPixelBufferRef *)(a1 + 8), *(void *)(a1 + 16)))
  {
    JUMPOUT(0x1BA9929C0);
  }
  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "Failed to unlock pixel buffer.");
  __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
}

void sub_1B4C78918(_Unwind_Exception *a1)
{
  __cxa_free_exception(v2);
  MEMORY[0x1BA9929C0](v1, 0x10A1C40AFD1EA57);
  _Unwind_Resume(a1);
}

const void **sub_1B4C7894C(const void **a1)
{
  int v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

std::runtime_error *sub_1B4C78980(std::runtime_error *a1)
{
  uint64_t result = std::runtime_error::runtime_error(a1, "Model must have exactly one pre-declared output.");
  result->__vftable = (std::runtime_error_vtbl *)&unk_1F0D54E70;
  return result;
}

void *sub_1B4C789BC(void *__dst, long long *a2, uint64_t a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_1B4BCA11C(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)long long __dst = v5;
  }
  int v6 = *(_DWORD *)(a3 + 8);
  __dst[5] = 0;
  __dst[3] = &unk_1F0D54F90;
  *((_DWORD *)__dst + 8) = v6;
  __dst[6] = 0;
  __dst[7] = 0;
  long long v8 = *(unsigned char **)(a3 + 16);
  long long v7 = *(unsigned char **)(a3 + 24);
  int64_t v9 = v7 - v8;
  if (v7 != v8)
  {
    if (v9 < 0) {
      sub_1B4BB3244();
    }
    std::string v10 = (char *)operator new(v7 - v8);
    __dst[5] = v10;
    __dst[6] = v10;
    uint64_t v11 = &v10[8 * (v9 >> 3)];
    __dst[7] = v11;
    memcpy(v10, v8, v9);
    __dst[6] = v11;
  }
  uint64_t v12 = *(void *)(a3 + 48);
  __dst[8] = *(void *)(a3 + 40);
  __dst[9] = v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  return __dst;
}

void sub_1B4C78AB0(_Unwind_Exception *exception_object)
{
  int v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 48) = v4;
    operator delete(v4);
    if ((*(char *)(v1 + 23) & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((*(char *)(v1 + 23) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

unsigned __int8 *sub_1B4C78AEC(uint64_t a1, uint64_t a2, long long **a3)
{
  long long v5 = (unsigned char *)a2;
  unint64_t v7 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v8 = v7;
  }
  unint64_t v9 = sub_1B4BB2824((uint64_t)v43, (uint64_t *)a2, v8);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v3 = v9;
      if (v9 >= v11) {
        unint64_t v3 = v9 % v11;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v9;
    }
    std::string v13 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      std::string v14 = (unsigned __int8 *)*v13;
      if (*v13)
      {
        char v15 = v5[23];
        if (v15 >= 0) {
          uint64_t v16 = v5[23];
        }
        else {
          uint64_t v16 = *((void *)v5 + 1);
        }
        if (v15 < 0) {
          long long v5 = *(unsigned char **)v5;
        }
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v21 = *((void *)v14 + 1);
            if (v21 == v10)
            {
              uint64_t v22 = v14[39];
              if ((v22 & 0x80u) == 0) {
                uint64_t v23 = v14[39];
              }
              else {
                uint64_t v23 = *((void *)v14 + 3);
              }
              if (v23 == v16)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp(*((const void **)v14 + 2), v5, *((void *)v14 + 3))) {
                    return v14;
                  }
                }
                else
                {
                  if (!v14[39]) {
                    return v14;
                  }
                  uint64_t v24 = 0;
                  while (v14[v24 + 16] == v5[v24])
                  {
                    if (v22 == ++v24) {
                      return v14;
                    }
                  }
                }
              }
            }
            else if ((v21 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            std::string v14 = *(unsigned __int8 **)v14;
            if (!v14) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v17 = *((void *)v14 + 1);
          if (v17 == v10)
          {
            uint64_t v18 = v14[39];
            if ((v18 & 0x80u) == 0) {
              uint64_t v19 = v14[39];
            }
            else {
              uint64_t v19 = *((void *)v14 + 3);
            }
            if (v19 == v16)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp(*((const void **)v14 + 2), v5, *((void *)v14 + 3))) {
                  return v14;
                }
              }
              else
              {
                if (!v14[39]) {
                  return v14;
                }
                uint64_t v20 = 0;
                while (v14[v20 + 16] == v5[v20])
                {
                  if (v18 == ++v20) {
                    return v14;
                  }
                }
              }
            }
          }
          else
          {
            if (v17 >= v11) {
              v17 %= v11;
            }
            if (v17 != v3) {
              break;
            }
          }
          std::string v14 = *(unsigned __int8 **)v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  size_t v25 = (void *)(a1 + 16);
  std::string v14 = (unsigned __int8 *)operator new(0x60uLL);
  v43[0] = v14;
  v43[1] = a1 + 16;
  *(void *)std::string v14 = 0;
  *((void *)v14 + 1) = v10;
  int v26 = *a3;
  long long v27 = **a3;
  *((void *)v14 + 4) = *((void *)*a3 + 2);
  *((_OWORD *)v14 + 1) = v27;
  *((void *)v26 + 1) = 0;
  *((void *)v26 + 2) = 0;
  *(void *)int v26 = 0;
  *((void *)v14 + 5) = &unk_1F0D54F90;
  *((_DWORD *)v14 + 12) = 1;
  *((void *)v14 + 11) = 0;
  *(_OWORD *)(v14 + 72) = 0u;
  *(_OWORD *)(v14 + 56) = 0u;
  char v44 = 1;
  float v28 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v29 = *(float *)(a1 + 32);
  if (v11 && (float)(v29 * (float)v11) >= v28) {
    goto LABEL_79;
  }
  BOOL v30 = 1;
  if (v11 >= 3) {
    BOOL v30 = (v11 & (v11 - 1)) != 0;
  }
  unint64_t v31 = v30 | (2 * v11);
  unint64_t v32 = vcvtps_u32_f32(v28 / v29);
  if (v31 <= v32) {
    size_t prime = v32;
  }
  else {
    size_t prime = v31;
  }
  if (prime == 1)
  {
    size_t prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(prime);
  }
  int8x8_t v34 = *(int8x8_t *)(a1 + 8);
  if (prime > *(void *)&v34) {
    goto LABEL_63;
  }
  if (prime < *(void *)&v34)
  {
    unint64_t v35 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v34 < 3uLL || (uint8x8_t v36 = (uint8x8_t)vcnt_s8(v34), v36.i16[0] = vaddlv_u8(v36), v36.u32[0] > 1uLL))
    {
      unint64_t v35 = std::__next_prime(v35);
    }
    else
    {
      uint64_t v37 = 1 << -(char)__clz(v35 - 1);
      if (v35 >= 2) {
        unint64_t v35 = v37;
      }
    }
    if (prime <= v35) {
      size_t prime = v35;
    }
    if (prime < *(void *)&v34) {
LABEL_63:
    }
      sub_1B4C0C040(a1, prime);
  }
  unint64_t v11 = *(void *)(a1 + 8);
  unint64_t v38 = v11 - 1;
  if ((v11 & (v11 - 1)) != 0)
  {
    if (v10 >= v11)
    {
      unint64_t v3 = v10 % v11;
      uint64_t v39 = *(void *)a1;
      float32x4_t v40 = *(void **)(*(void *)a1 + 8 * (v10 % v11));
      if (!v40) {
        goto LABEL_82;
      }
LABEL_80:
      *(void *)std::string v14 = *v40;
LABEL_88:
      *float32x4_t v40 = v14;
      goto LABEL_89;
    }
    unint64_t v3 = v10;
LABEL_79:
    uint64_t v39 = *(void *)a1;
    float32x4_t v40 = *(void **)(*(void *)a1 + 8 * v3);
    if (!v40) {
      goto LABEL_82;
    }
    goto LABEL_80;
  }
  unint64_t v3 = v38 & v10;
  uint64_t v39 = *(void *)a1;
  float32x4_t v40 = *(void **)(*(void *)a1 + 8 * (v38 & v10));
  if (v40) {
    goto LABEL_80;
  }
LABEL_82:
  *(void *)std::string v14 = *v25;
  void *v25 = v14;
  *(void *)(v39 + 8 * v3) = v25;
  if (*(void *)v14)
  {
    unint64_t v41 = *(void *)(*(void *)v14 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v41 >= v11) {
        v41 %= v11;
      }
    }
    else
    {
      v41 &= v11 - 1;
    }
    float32x4_t v40 = (void *)(*(void *)a1 + 8 * v41);
    goto LABEL_88;
  }
LABEL_89:
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_1B4C78F18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1B4C0C1F0((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

void sub_1B4C79044(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C7905C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C79070(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C79080(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C79180(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C7919C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C791B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C791C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C791D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C792E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C79300(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C79318(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C7932C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C7933C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C79CD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *__p, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,void *a21,void *a22)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

__n128 sub_1B4C79F90(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void sub_1B4C79FB4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  if (v1)
  {
    uint64_t v3 = *(void *)(a1 + 56);
    int v4 = *(void **)(a1 + 48);
    if (v3 != v1)
    {
      do
      {
        long long v5 = *(void **)(v3 - 16);
        v3 -= 16;
      }
      while (v3 != v1);
      int v4 = *(void **)(a1 + 48);
    }
    *(void *)(a1 + 56) = v1;
    operator delete(v4);
  }
}

void **sub_1B4C7A02C(void **a1)
{
  int v2 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    int v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        long long v5 = (void *)*((void *)v3 - 2);
        v3 -= 16;
      }
      while (v3 != v2);
      int v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_1B4C7A08C(uint64_t a1, void *a2, long double a3)
{
  id v40 = a2;
  int v5 = *(unsigned __int8 *)(a1 + 40);
  double v6 = log(a3);
  if (v5) {
    a3 = v6;
  }
  unint64_t v7 = *(void **)(*(void *)(a1 + 32) + 8);
  unint64_t v9 = v7[7];
  unint64_t v8 = v7[8];
  if (v9 < v8)
  {
    *(void *)unint64_t v9 = v40;
    unint64_t v10 = v40;
    *(long double *)(v9 + 8) = a3;
    unint64_t v11 = (char *)(v9 + 16);
    goto LABEL_25;
  }
  uint64_t v12 = v7[6];
  uint64_t v13 = v9 - v12;
  uint64_t v14 = (uint64_t)(v9 - v12) >> 4;
  if ((unint64_t)(v14 + 1) >> 60) {
    sub_1B4BB3244();
  }
  uint64_t v15 = v8 - v12;
  uint64_t v16 = v15 >> 3;
  if (v15 >> 3 <= (unint64_t)(v14 + 1)) {
    uint64_t v16 = v14 + 1;
  }
  if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v17 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v17 = v16;
  }
  if (v17)
  {
    if (v17 >> 60) {
      sub_1B4BB2D38();
    }
    uint64_t v18 = (char *)operator new(16 * v17);
  }
  else
  {
    uint64_t v18 = 0;
  }
  uint64_t v19 = (long double *)&v18[16 * v14];
  uint64_t v20 = &v18[16 * v17];
  *(void *)uint64_t v19 = v40;
  v19[1] = a3;
  unint64_t v11 = (char *)(v19 + 2);
  uint64_t v22 = (char *)v7[6];
  uint64_t v21 = (char *)v7[7];
  uint64_t v23 = (char *)(v21 - v22);
  if (v21 == v22)
  {
    v7[6] = v19;
    v7[7] = v11;
    v7[8] = v20;
    if (!v21) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  uint64_t v24 = v23 - 16;
  if ((unint64_t)(v23 - 16) < 0x110)
  {
    size_t v25 = (char *)v7[7];
LABEL_18:
    int v26 = (char *)v19;
    do
    {
      uint64_t v27 = *((void *)v25 - 2);
      v25 -= 16;
      *(void *)size_t v25 = 0;
      *((void *)v26 - 2) = v27;
      v26 -= 16;
      *((void *)v26 + 1) = *((void *)v25 + 1);
    }
    while (v25 != v22);
    goto LABEL_20;
  }
  float v29 = &v21[-((unint64_t)v24 & 0xFFFFFFFFFFFFFFF0)];
  unint64_t v30 = (unint64_t)(v29 - 16);
  unint64_t v31 = v29 - 8;
  BOOL v33 = &v18[v13 - 8 - ((unint64_t)v24 & 0xFFFFFFFFFFFFFFF0)] < v21 && v31 < (char *)v19;
  size_t v25 = (char *)v7[7];
  if (&v18[v13 - ((unint64_t)v24 & 0xFFFFFFFFFFFFFFF0) - 16] < v21 - 8
    && v30 < (unint64_t)&v18[v13 - 8])
  {
    goto LABEL_18;
  }
  if (v33) {
    goto LABEL_18;
  }
  uint64_t v35 = ((unint64_t)v24 >> 4) + 1;
  uint64_t v36 = 16 * (v35 & 0x1FFFFFFFFFFFFFFELL);
  int v26 = (char *)&v19[v36 / 0xFFFFFFFFFFFFFFF8];
  size_t v25 = &v21[-v36];
  uint64_t v37 = v19 - 4;
  unint64_t v38 = (const double *)(v21 - 32);
  uint64_t v39 = v35 & 0x1FFFFFFFFFFFFFFELL;
  do
  {
    float64x2x2_t v42 = vld2q_f64(v38);
    _OWORD v38[2] = 0.0;
    *unint64_t v38 = 0.0;
    v38 -= 4;
    vst2q_f64(v37, v42);
    v37 -= 4;
    v39 -= 2;
  }
  while (v39);
  uint64_t v19 = (long double *)v26;
  if (v35 != (v35 & 0x1FFFFFFFFFFFFFFELL)) {
    goto LABEL_18;
  }
LABEL_20:
  v7[6] = v26;
  v7[7] = v11;
  v7[8] = v20;
  do
  {
    float v28 = (void *)*((void *)v21 - 2);
    v21 -= 16;
  }
  while (v21 != v22);
  uint64_t v21 = v22;
  if (!v22) {
    goto LABEL_24;
  }
LABEL_23:
  operator delete(v21);
LABEL_24:
  unint64_t v10 = v40;
LABEL_25:
  v7[7] = v11;
}

void sub_1B4C7A2D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B4C7A2E8(uint64_t a1, void *a2, void *a3)
{
  id v156 = a2;
  id v5 = a3;
  uint64_t v6 = *(void *)(a1 + 80);
  if (v6 == objc_msgSend_timestepCount(*(void **)(*(void *)(a1 + 32) + 16), v7, v8, v9) - 1)
  {
    uint64_t v13 = objc_msgSend_string(v5, v10, v11, v12);
    BOOL v17 = objc_msgSend_length(v13, v14, v15, v16) != 0;
  }
  else
  {
    BOOL v17 = 1;
  }
  objc_msgSend_modelLogProbability(v5, v10, v11, v12);
  *(float *)&double v18 = v18 + *(float *)(a1 + 88);
  size_t v25 = objc_msgSend_childPathWithBlankLogProb_(v5, v19, v20, v21, *(float *)&v18);
  if (v17)
  {
    objc_msgSend_addPath_(*(void **)(a1 + 40), v22, (uint64_t)v25, v24);
    int v26 = *(void **)(a1 + 40);
    unint64_t v30 = objc_msgSend_string(v25, v27, v28, v29);
    uint64_t v33 = objc_msgSend_pathForString_(v26, v31, (uint64_t)v30, v32);

    size_t v25 = (void *)v33;
  }
  uint64_t v155 = objc_msgSend_latestExpandedSymbolIncludingPseudospace(v5, v22, v23, v24);
  uint64_t v34 = *(void *)(*(void *)(a1 + 72) + 8);
  uint64_t v36 = *(void *)(v34 + 48);
  uint64_t v35 = *(void *)(v34 + 56);
  while (v36 != v35)
  {
    id v40 = *(id *)v36;
    double v41 = *(double *)(v36 + 8);
    float64x2x2_t v42 = *(void **)(a1 + 48);
    if (v42
      && (objc_msgSend_commitActionBlock(v42, v37, v38, v39),
          float v43 = objc_claimAutoreleasedReturnValue(),
          v43,
          v43))
    {
      objc_msgSend_commitActionBlock(*(void **)(a1 + 48), v37, v44, v39);
      uint64_t v45 = (uint64_t (**)(void, void, void))objc_claimAutoreleasedReturnValue();
      uint64_t v46 = ((uint64_t (**)(void, id, id))v45)[2](v45, v156, v40);
    }
    else
    {
      uint64_t v46 = 0;
    }
    CFDictionaryRef v47 = objc_msgSend_stringByAppendingString_(v156, v37, (uint64_t)v40, v39, v155);
    __int32 v50 = objc_msgSend_pathForString_(*(void **)(a1 + 40), v48, (uint64_t)v47, v49);
    if (objc_msgSend_length(v156, v51, v52, v53)
      && objc_msgSend_isEqualToString_(v40, v54, (uint64_t)v155, v56))
    {
      objc_msgSend_blankLogProbability(v5, v54, v55, v56);
      double v58 = v57;
      objc_msgSend_nonBlankLogProbability(v25, v59, v60, v61);
      double v63 = v62;
      objc_msgSend_nonBlankLogProbability(v5, v64, v65, v66);
      double v71 = v70 + v41;
      double v72 = fmax(v63, v71);
      double v73 = fmin(v63, v71);
      if (v73 >= -1021.0)
      {
        long double v74 = exp(v73 - v72);
        double v72 = log1p(v74) + v72;
      }
      objc_msgSend_setNonBlankLogProbability_(v25, v67, v68, v69, v72);
      double v77 = v58 + v41;
    }
    else
    {
      objc_msgSend_modelLogProbability(v5, v54, v55, v56);
      double v77 = v78 + v41;
    }
    double v79 = fmax(v77, -1022.0);
    unint64_t v80 = objc_msgSend_pathForString_(*(void **)(a1 + 56), v75, (uint64_t)v47, v76);

    if (v80)
    {
      double v84 = -1022.0;
      if (!v50) {
        goto LABEL_45;
      }
    }
    else
    {
      unint64_t v117 = objc_msgSend_pathForString_(*(void **)(a1 + 64), v81, (uint64_t)v47, v83);
      uint64_t v121 = v117;
      if (v117)
      {
        objc_msgSend_modelLogProbability(v117, v118, v119, v120);
        double v123 = v122;
        float v124 = *(float *)(a1 + 88);
        objc_msgSend_nonBlankLogProbability(v121, v125, v126, v127);
        double v132 = v131 + v41;
        double v133 = fmax(v79, v132);
        double v134 = fmin(v79, v132);
        if (v134 >= -1021.0)
        {
          long double v135 = exp(v134 - v133);
          double v79 = log1p(v135) + v133;
        }
        else
        {
          double v79 = v133;
        }
        int shouldOptimizeAlignment = objc_msgSend_shouldOptimizeAlignment(*(void **)(a1 + 48), v128, v129, v130);
        double v84 = fmax(v123 + v124, -1022.0);
        if (v50) {
          int v140 = shouldOptimizeAlignment;
        }
        else {
          int v140 = 0;
        }
        if (v140 == 1)
        {
          objc_msgSend_lastTokenBoundaryLogProbability(v50, v137, v138, v139);
          double v142 = v141;
          objc_msgSend_lastTokenBoundaryLogProbability(v121, v143, v144, v145);
          if (v142 <= v149) {
            objc_msgSend_lastTokenBoundaryLogProbability(v121, v146, v147, v148);
          }
          else {
            objc_msgSend_lastTokenBoundaryLogProbability(v50, v146, v147, v148);
          }
          objc_msgSend_setLastTokenBoundaryLogProbability_(v50, v150, v151, v152);
        }
      }
      else
      {
        double v84 = -1022.0;
      }

      if (!v50)
      {
LABEL_45:
        __int32 v50 = objc_msgSend_pathByExtendingWithString_extendedPathString_blankLogProb_nonBlankLogProb_timestep_commitAction_symbolLogProb_(v25, v81, (uint64_t)v40, (uint64_t)v47, *(void *)(a1 + 80), v46, v84, v79, v41);
        objc_msgSend_addPath_(*(void **)(a1 + 40), v153, (uint64_t)v50, v154);
        goto LABEL_7;
      }
    }
    objc_msgSend_blankLogProbability(v50, v81, v82, v83);
    double v89 = fmax(v88, v84);
    double v90 = fmin(v88, v84);
    if (v90 >= -1021.0)
    {
      long double v91 = exp(v90 - v89);
      double v89 = log1p(v91) + v89;
    }
    objc_msgSend_setBlankLogProbability_(v50, v85, v86, v87, v89);
    objc_msgSend_nonBlankLogProbability(v50, v92, v93, v94);
    double v99 = fmax(v98, v79);
    double v100 = fmin(v98, v79);
    if (v100 >= -1021.0)
    {
      long double v101 = exp(v100 - v99);
      double v99 = log1p(v101) + v99;
    }
    objc_msgSend_setNonBlankLogProbability_(v50, v95, v96, v97, v99);
    int v105 = objc_msgSend_shouldOptimizeAlignment(*(void **)(a1 + 48), v102, v103, v104);
    if (v46) {
      int v109 = v105;
    }
    else {
      int v109 = 0;
    }
    if (v109 == 1)
    {
      objc_msgSend_lastTokenBoundaryLogProbability(v50, v106, v107, v108);
      if (v41 > v113)
      {
        uint64_t v114 = *(void *)(a1 + 80);
        objc_msgSend_modelLogProbability(v50, v110, v111, v112);
        objc_msgSend_updateLastTokenWithMaxActivation_totalLogProbability_tokenBoundaryLogProbability_(v50, v115, v114 + 1, v116);
      }
    }
LABEL_7:

    v36 += 16;
  }
}

void sub_1B4C7A7A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B4C7A7C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B4C7A7E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B4C7A7FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B4C7A814(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B4C7A82C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B4C7AE64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_1B4C7B0D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C7B27C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C7B294(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C7B2A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C7B3BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C7B3DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C7B3F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C7B408(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C7B7CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C7B84C()
{
}

void sub_1B4C7B85C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C7B878(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C7B8DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C7BB54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B4C7BC34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)CVNLPCaptionDecoderTransformer;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_1B4C7BDA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1B4C7BDE0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1B4C7BDF0(uint64_t a1)
{
}

uint64_t sub_1B4C7BDF8(uint64_t a1, const char *a2)
{
  *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) = objc_msgSend_computeCaptionForImageWithInputsImpl_genderOption_(*(void **)(a1 + 32), a2, *(void *)(a1 + 40), *(unsigned int *)(a1 + 56));
  return MEMORY[0x1F41817F8]();
}

void sub_1B4C7C708(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
  _Unwind_Resume(a1);
}

void sub_1B4C7C9A0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v69 = *MEMORY[0x1E4F143B8];
  id v5 = *(void **)(a1 + 32);
  if (!v5) {
    goto LABEL_13;
  }
  objc_msgSend_decoderInputNames(v5, a2, a3, a4);
  uint64_t v6 = v67;
  unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * (((char *)v67 - (unsigned char *)__p) >> 3);
  if (!__p)
  {
    if (v7 < 5) {
      goto LABEL_13;
    }
LABEL_12:
    objc_msgSend_buildNetworkForSequenceLength_imageFeatures_(*(void **)(a1 + 32), a2, *(void *)(a1 + 72), *(void *)(a1 + 40));
    goto LABEL_13;
  }
  if (v67 == __p)
  {
    int v67 = (void **)__p;
    operator delete(__p);
    if (v7 <= 4) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  do
  {
    if (*((char *)v6 - 1) < 0) {
      operator delete(*(v6 - 3));
    }
    v6 -= 3;
  }
  while (v6 != __p);
  int v67 = (void **)__p;
  operator delete(__p);
  if (v7 > 4) {
    goto LABEL_12;
  }
LABEL_13:
  if ((unint64_t)objc_msgSend_decoderBatchSize(*(void **)(a1 + 48), a2, a3, a4) >= 2
    && (unint64_t v11 = objc_msgSend_count(*(void **)(*(void *)(*(void *)(a1 + 64) + 8) + 40), v8, v9, v10),
        v11 <= objc_msgSend_decoderBatchSize(*(void **)(a1 + 48), v12, v13, v14)))
  {
    v63[0] = MEMORY[0x1E4F143A8];
    v63[1] = 3321888768;
    uint64_t v29 = *(void *)(a1 + 64);
    uint64_t v30 = *(void *)(a1 + 48);
    v63[2] = sub_1B4C7CEB0;
    v63[3] = &unk_1F0D55EF8;
    v63[4] = v30;
    v63[5] = v29;
    unint64_t v31 = *(void **)(a1 + 88);
    v63[6] = *(void *)(a1 + 80);
    id v32 = v31;
    uint64_t v33 = *(void *)(a1 + 72);
    id v64 = v32;
    uint64_t v65 = v33;
    uint64_t v34 = (void *)MEMORY[0x1BA9931A0](v63);
    uint64_t v35 = dispatch_group_create();
    dispatch_group_enter(v35);
    v56[0] = MEMORY[0x1E4F143A8];
    v56[1] = 3221225472;
    v56[2] = sub_1B4C7D73C;
    v56[3] = &unk_1E60A3E90;
    uint64_t v36 = *(void *)(a1 + 72);
    uint64_t v59 = *(void *)(a1 + 64);
    uint64_t v60 = v36;
    v56[4] = *(void *)(a1 + 48);
    long long v61 = *(_OWORD *)(a1 + 96);
    uint64_t v62 = *(void *)(a1 + 112);
    id v57 = *(id *)(a1 + 56);
    uint64_t v37 = v35;
    double v58 = v37;
    uint64_t v38 = (void *)MEMORY[0x1BA9931A0](v56);
    objc_msgSend_runBlockWithCopyInputBlock_copyOutputBlock_(*(void **)(a1 + 32), v39, (uint64_t)v34, (uint64_t)v38);
    dispatch_group_wait(v37, 0xFFFFFFFFFFFFFFFFLL);
  }
  else
  {
    uint64_t v15 = dispatch_group_create();
    long long v52 = 0u;
    long long v53 = 0u;
    long long v54 = 0u;
    long long v55 = 0u;
    obuint64_t j = *(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40);
    uint64_t v17 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v16, (uint64_t)&v52, (uint64_t)v68, 16);
    if (v17)
    {
      uint64_t v41 = *(void *)v53;
      do
      {
        for (uint64_t i = 0; i != v17; ++i)
        {
          if (*(void *)v53 != v41) {
            objc_enumerationMutation(obj);
          }
          uint64_t v19 = *(void *)(*((void *)&v52 + 1) + 8 * i);
          v49[0] = MEMORY[0x1E4F143A8];
          v49[1] = 3321888768;
          v49[2] = sub_1B4C7DBA8;
          v49[3] = &unk_1F0D55EC0;
          uint64_t v20 = *(void **)(a1 + 88);
          v49[5] = *(void *)(a1 + 80);
          id v21 = v20;
          v49[4] = v19;
          uint64_t v22 = *(void *)(a1 + 72);
          id v50 = v21;
          uint64_t v51 = v22;
          uint64_t v23 = (void *)MEMORY[0x1BA9931A0](v49);
          dispatch_group_enter(v15);
          v42[0] = MEMORY[0x1E4F143A8];
          v42[1] = 3221225472;
          v42[2] = sub_1B4C7DBF8;
          v42[3] = &unk_1E60A3EB8;
          uint64_t v24 = *(void *)(a1 + 48);
          size_t v25 = *(void **)(a1 + 56);
          uint64_t v46 = *(void *)(a1 + 72);
          v42[4] = v24;
          long long v47 = *(_OWORD *)(a1 + 96);
          uint64_t v48 = *(void *)(a1 + 112);
          id v43 = v25;
          uint64_t v44 = v19;
          uint64_t v45 = v15;
          int v26 = (void *)MEMORY[0x1BA9931A0](v42);
          objc_msgSend_runBlockWithCopyInputBlock_copyOutputBlock_(*(void **)(a1 + 32), v27, (uint64_t)v23, (uint64_t)v26);
        }
        uint64_t v17 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v28, (uint64_t)&v52, (uint64_t)v68, 16);
      }
      while (v17);
    }

    dispatch_group_wait(v15, 0xFFFFFFFFFFFFFFFFLL);
  }
}

void sub_1B4C7CE34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,void *a60)
{
  _Unwind_Resume(a1);
}

unint64_t sub_1B4C7CEB0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  unint64_t result = objc_msgSend_count(*(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a2, a3, a4);
  if (result)
  {
    for (unint64_t i = 0; i < result; ++i)
    {
      uint64_t v9 = objc_msgSend_objectAtIndexedSubscript_(*(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40), v6, i, v7);
      uint64_t v13 = objc_msgSend_maxCaptionLen(*(void **)(a1 + 32), v10, v11, v12);
      sub_1B4C7CF5C(a1 + 48, v9, v13 * i, *(void *)(a1 + 64));

      unint64_t result = objc_msgSend_count(*(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40), v14, v15, v16);
    }
  }
  return result;
}

void sub_1B4C7CF4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C7CF5C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v10 = a2;
  uint64_t v11 = *(void **)(a1 + 8);
  if (!v11) {
    goto LABEL_12;
  }
  objc_msgSend_decoderInputNames(v11, v7, v8, v9);
  uint64_t v12 = v99;
  unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * (((char *)v99 - (unsigned char *)__p) >> 3);
  if (__p)
  {
    if (v99 == __p)
    {
      double v99 = (void **)__p;
      operator delete(__p);
      if (v13 > 4) {
        goto LABEL_5;
      }
LABEL_12:
      unint64_t v17 = objc_msgSend_maxCaptionLen(**(void ***)a1, v7, v8, v9);
      unint64_t v21 = v17;
      uint64_t v108 = 0;
      int v109 = 0;
      unint64_t v110 = 0;
      if (v17)
      {
        if (v17 >> 62) {
          sub_1B4BB3244();
        }
        uint64_t v22 = (float *)operator new(4 * v17);
        uint64_t v23 = &v22[v21];
        uint64_t v108 = v22;
        unint64_t v110 = v23;
        bzero(v22, 4 * v21);
        int v109 = v23;
      }
      else
      {
        uint64_t v23 = 0;
        uint64_t v22 = 0;
      }
      *uint64_t v22 = (float)(unint64_t)objc_msgSend_startID(**(void ***)a1, v18, v19, v20);
      uint64_t v26 = objc_msgSend_objectForKeyedSubscript_(v10, v24, (uint64_t)CVNLPBeamTokens, v25);
      uint64_t v27 = (void *)v26;
      uint64_t v28 = (void *)MEMORY[0x1E4F1CBF0];
      if (v26) {
        uint64_t v28 = (void *)v26;
      }
      id v29 = v28;

      id v30 = v29;
      CFRetain(v30);
      sub_1B4C4304C(&v107, v30);

      CFArrayRef v31 = v107;
      v96[0] = v107;
      v96[1] = 0;
      if (v107)
      {
        CFIndex Count = CFArrayGetCount(v107);
        CFArrayRef v31 = v107;
        CFIndex v97 = Count;
        CFArrayRef v93 = v107;
        CFArrayRef v94 = 0;
        if (v107) {
          CFArrayRef v31 = (CFArrayRef)CFArrayGetCount(v107);
        }
      }
      else
      {
        CFIndex v97 = 0;
        CFArrayRef v93 = 0;
        CFArrayRef v94 = 0;
      }
      CFArrayRef v94 = v31;
      CFArrayRef v95 = v31;
      sub_1B4C7E05C(&v105, (uint64_t)v96, (uint64_t)&v93);
      if (a4) {
        memmove(v22 + 1, v105, 4 * a4);
      }
      uint64_t v36 = *(void **)(a1 + 8);
      if (v36)
      {
        objc_msgSend_blockInput(v36, v33, v34, v35);
        uint64_t v37 = (char *)__p;
        size_t v38 = (char *)v23 - (char *)v22;
        if (v23 == v22)
        {
LABEL_27:
          if (v105)
          {
            uint64_t v106 = v105;
            operator delete(v105);
          }
          if (v107) {
            CFRelease(v107);
          }

          uint64_t v39 = v22;
          goto LABEL_62;
        }
      }
      else
      {
        uint64_t v37 = 0;
        size_t v38 = (char *)v23 - (char *)v22;
        if (v23 == v22) {
          goto LABEL_27;
        }
      }
      memmove(&v37[4 * a3], v22, v38);
      goto LABEL_27;
    }
    do
    {
      if (*((char *)v12 - 1) < 0) {
        operator delete(*(v12 - 3));
      }
      v12 -= 3;
    }
    while (v12 != __p);
    double v99 = (void **)__p;
    operator delete(__p);
    if (v13 <= 4) {
      goto LABEL_12;
    }
  }
  else if (v13 < 5)
  {
    goto LABEL_12;
  }
LABEL_5:
  uint64_t v14 = (a4 << 32) + 0x100000000;
  uint64_t v108 = 0;
  int v109 = 0;
  unint64_t v110 = 0;
  if (a4 << 32 == 0xFFFFFFFF00000000)
  {
    uint64_t v16 = 0;
    uint64_t v15 = 0;
  }
  else
  {
    if (v14 < 0) {
      sub_1B4BB3244();
    }
    uint64_t v15 = (float *)operator new((unint64_t)v14 >> 30);
    uint64_t v16 = &v15[v14 >> 32];
    uint64_t v108 = v15;
    unint64_t v110 = v16;
    bzero(v15, (unint64_t)v14 >> 30);
    int v109 = v16;
  }
  *uint64_t v15 = (float)(unint64_t)objc_msgSend_startID(**(void ***)a1, v7, v8, v9);
  uint64_t v42 = objc_msgSend_objectForKeyedSubscript_(v10, v40, (uint64_t)CVNLPBeamTokens, v41);
  id v43 = (void *)v42;
  uint64_t v44 = (void *)MEMORY[0x1E4F1CBF0];
  if (v42) {
    uint64_t v44 = (void *)v42;
  }
  id v45 = v44;

  id v46 = v45;
  CFRetain(v46);
  sub_1B4C4304C(&v107, v46);

  CFArrayRef v47 = v107;
  v103[0] = v107;
  v103[1] = 0;
  if (v107)
  {
    CFIndex v48 = CFArrayGetCount(v107);
    CFArrayRef v47 = v107;
    CFIndex v104 = v48;
    CFArrayRef v100 = v107;
    CFArrayRef v101 = 0;
    if (v107) {
      CFArrayRef v47 = (CFArrayRef)CFArrayGetCount(v107);
    }
  }
  else
  {
    CFIndex v104 = 0;
    CFArrayRef v100 = 0;
    CFArrayRef v101 = 0;
  }
  CFArrayRef v101 = v47;
  CFArrayRef v102 = v47;
  sub_1B4C7E05C(&v105, (uint64_t)v103, (uint64_t)&v100);
  if (a4) {
    memmove(v15 + 1, v105, 4 * a4);
  }
  long long v52 = *(void **)(a1 + 8);
  if (!v52)
  {
    id v57 = 0;
    goto LABEL_55;
  }
  objc_msgSend_blockInput(v52, v49, v50, v51);
  uint64_t v56 = *(void **)(a1 + 8);
  id v57 = (char *)__p;
  if (!v56) {
    goto LABEL_55;
  }
  objc_msgSend_decoderInputNames(v56, v53, v54, v55);
  long long v61 = v99;
  unint64_t v62 = 0xAAAAAAAAAAAAAAABLL * (((char *)v99 - (unsigned char *)__p) >> 3);
  if (__p)
  {
    if (v99 == __p)
    {
      double v99 = (void **)__p;
      operator delete(__p);
      if (v62 >= 5) {
        goto LABEL_67;
      }
    }
    else
    {
      do
      {
        if (*((char *)v61 - 1) < 0) {
          operator delete(*(v61 - 3));
        }
        v61 -= 3;
      }
      while (v61 != __p);
      double v99 = (void **)__p;
      operator delete(__p);
      if (v62 >= 5) {
        goto LABEL_67;
      }
    }
LABEL_55:
    if (v16 != v15) {
      memmove(&v57[4 * a3], v15, (char *)v16 - (char *)v15);
    }
    goto LABEL_57;
  }
  if (v62 <= 4) {
    goto LABEL_55;
  }
LABEL_67:
  double v63 = *(void **)(a1 + 8);
  if (!v63) {
    goto LABEL_57;
  }
  objc_msgSend_decoderInputNames(v63, v58, v59, v60);
  id v64 = v99;
  unint64_t v65 = 0xAAAAAAAAAAAAAAABLL * (((char *)v99 - (unsigned char *)__p) >> 3);
  if (!__p)
  {
    if (v65 < 5) {
      goto LABEL_57;
    }
    goto LABEL_78;
  }
  uint64_t v66 = __p;
  if (v99 != __p)
  {
    do
    {
      if (*((char *)v64 - 1) < 0) {
        operator delete(*(v64 - 3));
      }
      v64 -= 3;
    }
    while (v64 != __p);
    uint64_t v66 = __p;
  }
  double v99 = (void **)__p;
  operator delete(v66);
  if (v65 > 4)
  {
LABEL_78:
    *((float *)__p + a3) = *(v16 - 1);
    int v67 = (float *)operator new(4uLL);
    double v71 = v67;
    unint64_t v72 = (char *)v16 - (char *)v15;
    uint64_t v73 = v16 - v15 - 1;
    float v74 = v15[v73];
    if (v74 != 0.0) {
      float v74 = 1.0;
    }
    *int v67 = v74;
    objc_msgSend_maskInput(*(void **)(a1 + 8), v68, v69, v70);
    *(float *)std::string __p = *v71;
    long long v75 = (float *)operator new(4uLL);
    *long long v75 = (float)(unint64_t)v73;
    objc_msgSend_positionInput(*(void **)(a1 + 8), v76, v77, v78);
    *(float *)std::string __p = *v75;
    objc_msgSend_scaleInput(*(void **)(a1 + 8), v79, v80, v81);
    *(_DWORD *)std::string __p = 1102382323;
    double v84 = objc_msgSend_objectForKeyedSubscript_(v10, v82, (uint64_t)CVNLPBeamSearchNextTokenMetaData, v83);
    double v88 = v84;
    if (v84)
    {
      id v89 = v84;
    }
    else
    {
      objc_msgSend_dictionary(MEMORY[0x1E4F1CA60], v85, v86, v87);
      id v89 = (id)objc_claimAutoreleasedReturnValue();
    }
    double v90 = v89;

    if (v72 >= 5) {
      objc_msgSend_copyInputState_(*(void **)(a1 + 8), v91, (uint64_t)v90, v92);
    }

    operator delete(v75);
    operator delete(v71);
  }
LABEL_57:
  if (v105)
  {
    uint64_t v106 = v105;
    operator delete(v105);
  }
  if (v107) {
    CFRelease(v107);
  }

  uint64_t v39 = v108;
  if (v108) {
LABEL_62:
  }
    operator delete(v39);
}

void sub_1B4C7D548(_Unwind_Exception *a1)
{
  operator delete(v5);
  operator delete(v2);
  uint64_t v8 = *(void **)(v6 - 144);
  if (v8)
  {
    *(void *)(v6 - 136) = v8;
    operator delete(v8);
  }
  sub_1B4C2CCA0((const void **)(v6 - 120));

  if (v3)
  {
    *(void *)(v6 - 104) = v3;
    operator delete(v3);

    _Unwind_Resume(a1);
  }

  _Unwind_Resume(a1);
}

id sub_1B4C7D704(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  id result = v3;
  *(void *)(a1 + 56) = result;
  return result;
}

void sub_1B4C7D734(uint64_t a1)
{
}

void sub_1B4C7D73C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  if (objc_msgSend_count(*(void **)(*(void *)(*(void *)(a1 + 56) + 8) + 40), a2, a3, a4))
  {
    unint64_t v7 = 0;
    do
    {
      uint64_t v8 = objc_msgSend_objectAtIndexedSubscript_(*(void **)(*(void *)(*(void *)(a1 + 56) + 8) + 40), v5, v7, v6);
      uint64_t v9 = *(void *)(a1 + 64);
      uint64_t v13 = objc_msgSend_vocabSize(*(void **)(a1 + 32), v10, v11, v12);
      uint64_t v17 = objc_msgSend_vocabSize(*(void **)(a1 + 32), v14, v15, v16);
      uint64_t v21 = objc_msgSend_maxCaptionLen(*(void **)(a1 + 32), v18, v19, v20);
      sub_1B4C7D830(a1 + 72, *(void **)(a1 + 40), v8, v13 * v9 + v17 * v7 * v21);

      ++v7;
    }
    while (v7 < objc_msgSend_count(*(void **)(*(void *)(*(void *)(a1 + 56) + 8) + 40), v22, v23, v24));
  }
  uint64_t v25 = *(NSObject **)(a1 + 48);
  dispatch_group_leave(v25);
}

void sub_1B4C7D820(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C7D830(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  id v7 = a2;
  id v11 = a3;
  uint64_t v12 = **(void ***)(a1 + 8);
  if (v12)
  {
    objc_msgSend_blockOutput(v12, v8, v9, v10);
    uint64_t v13 = __p;
  }
  else
  {
    uint64_t v13 = 0;
  }
  uint64_t v14 = objc_msgSend_dictionary(MEMORY[0x1E4F1CA60], v8, v9, v10);
  uint64_t v17 = objc_msgSend_objectForKeyedSubscript_(v11, v15, (uint64_t)CVNLPBeamSearchBeamID, v16);
  objc_msgSend_setObject_forKeyedSubscript_(v14, v18, (uint64_t)v17, (uint64_t)CVNLPBeamSearchBeamID);

  uint64_t v21 = objc_msgSend_objectForKeyedSubscript_(v11, v19, (uint64_t)CVNLPBeamSearchNextTokenID, v20);
  objc_msgSend_setObject_forKeyedSubscript_(v14, v22, (uint64_t)v21, (uint64_t)CVNLPBeamSearchNextTokenID);

  uint64_t v26 = **(void ***)(a1 + 16);
  if (v26)
  {
    objc_msgSend_decoderInputNames(v26, v23, v24, v25);
    uint64_t v27 = v50;
    BOOL v28 = 0xAAAAAAAAAAAAAAABLL * (v50 - __p) > 5;
    if (__p)
    {
      id v29 = __p;
      if (v50 != __p)
      {
        do
        {
          if (*((char *)v27 - 1) < 0) {
            operator delete(*(v27 - 3));
          }
          v27 -= 3;
        }
        while (v27 != __p);
        id v29 = __p;
      }
      uint64_t v50 = __p;
      operator delete(v29);
    }
  }
  else
  {
    BOOL v28 = 0;
  }
  id v30 = (void *)MEMORY[0x1E4F1C9B8];
  uint64_t v31 = objc_msgSend_vocabSize(**(void ***)a1, v23, v24, v25);
  if (v28) {
    uint64_t v33 = 0;
  }
  else {
    uint64_t v33 = a4;
  }
  uint64_t v34 = objc_msgSend_dataWithBytes_length_(v30, v32, (uint64_t)v13 + 4 * v33, 4 * v31);
  objc_msgSend_setObject_forKeyedSubscript_(v14, v35, (uint64_t)v34, (uint64_t)CVNLPBeamSearchNextTokenSoftmaxValues);
  uint64_t v42 = objc_msgSend_dictionary(MEMORY[0x1E4F1CA60], v36, v37, v38);
  id v43 = **(void ***)(a1 + 8);
  if (!v43) {
    goto LABEL_29;
  }
  objc_msgSend_decoderInputNames(v43, v39, v40, v41);
  id v45 = v50;
  unint64_t v46 = 0xAAAAAAAAAAAAAAABLL * (v50 - __p);
  if (!__p)
  {
    if (v46 < 5) {
      goto LABEL_29;
    }
LABEL_28:
    objc_msgSend_copyOutputState_(**(void ***)(a1 + 8), v39, (uint64_t)v42, v44);
    goto LABEL_29;
  }
  if (v50 == __p)
  {
    operator delete(__p);
    if (v46 <= 4) {
      goto LABEL_29;
    }
    goto LABEL_28;
  }
  do
  {
    if (*((char *)v45 - 1) < 0) {
      operator delete(*(v45 - 3));
    }
    v45 -= 3;
  }
  while (v45 != __p);
  operator delete(__p);
  if (v46 > 4) {
    goto LABEL_28;
  }
LABEL_29:
  objc_msgSend_setObject_forKeyedSubscript_(v14, v39, (uint64_t)v42, (uint64_t)CVNLPBeamSearchNextTokenMetaData);
  objc_msgSend_addObject_(v7, v47, (uint64_t)v14, v48);
}

void sub_1B4C7DAD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C7DBA8(uint64_t a1)
{
}

id sub_1B4C7DBC0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  id result = v3;
  *(void *)(a1 + 48) = result;
  return result;
}

void sub_1B4C7DBF0(uint64_t a1)
{
}

void sub_1B4C7DBF8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a1 + 64);
  uint64_t v6 = objc_msgSend_vocabSize(*(void **)(a1 + 32), a2, a3, a4);
  sub_1B4C7D830(a1 + 72, *(void **)(a1 + 40), *(void **)(a1 + 48), v6 * v5);
  id v7 = *(NSObject **)(a1 + 56);
  dispatch_group_leave(v7);
}

id sub_1B4C7DC48(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  id result = v3;
  *(void *)(a1 + 88) = result;
  return result;
}

void sub_1B4C7DC78(uint64_t a1)
{
}

uint64_t sub_1B4C7DC80(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) = CVNLPBeamSearchOneStep(*(void *)(a1 + 48), *(CFArrayRef *)(a1 + 32));
  return MEMORY[0x1F41817F8]();
}

void sub_1B4C7DE50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

float **sub_1B4C7E05C(float **a1, uint64_t a2, uint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  unint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  CFArrayRef v6 = *(const __CFArray **)a3;
  uint64_t v7 = *(void *)(a3 + 8);
  BOOL v8 = *(void *)a3 == 0 || v7 == *(void *)(a3 + 16);
  if (v8) {
    uint64_t v9 = *(void *)(a2 + 16);
  }
  else {
    uint64_t v9 = *(void *)(a3 + 8);
  }
  unint64_t v10 = v9 - v4;
  if (v9 != v4)
  {
    if (v10 >> 62) {
      sub_1B4BB3244();
    }
    CFArrayRef v11 = *(const __CFArray **)a2;
    uint64_t v12 = (float *)operator new(4 * v10);
    *a1 = v12;
    a1[1] = v12;
    a1[2] = &v12[v10];
    if (v11)
    {
      if (v8)
      {
        if (v4 != v5)
        {
          uint64_t v13 = v12;
          if (v11 == v6)
          {
            do
            {
              if (v7 == v4) {
                break;
              }
              *v13++ = sub_1B4C7E338(v6, v4++);
            }
            while (v5 != v4);
          }
          else
          {
            do
              *v13++ = sub_1B4C7E338(v11, v4++);
            while (v5 != v4);
          }
          goto LABEL_22;
        }
        goto LABEL_21;
      }
      if (v11 == v6)
      {
        if (v4 != v7)
        {
          uint64_t v13 = v12;
          do
            *v13++ = sub_1B4C7E338(v6, v4++);
          while (v7 != v4);
          goto LABEL_22;
        }
LABEL_21:
        uint64_t v13 = v12;
LABEL_22:
        a1[1] = v13;
        return a1;
      }
      for (unint64_t i = v12; ; ++i)
      {
        if (CFArrayGetCount(v11) <= v4) {
          goto LABEL_18;
        }
        CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v11, v4);
        if (!ValueAtIndex) {
          goto LABEL_18;
        }
        CFTypeID TypeID = CFNumberGetTypeID();
        if (TypeID == CFGetTypeID(ValueAtIndex))
        {
          uint64_t v19 = sub_1B4C729C8(ValueAtIndex);
        }
        else
        {
          CFTypeID v20 = CFBooleanGetTypeID();
          if (v20 != CFGetTypeID(ValueAtIndex)) {
            break;
          }
          uint64_t v19 = COERCE_UNSIGNED_INT((float)CFBooleanGetValue(ValueAtIndex)) | 0x100000000;
        }
        if ((v19 & 0xFF00000000) == 0) {
          break;
        }
        *(_DWORD *)unint64_t i = v19;
        ++v4;
      }
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not convert");
    }
    else
    {
      if (v8 || !v6 && v4 == v7) {
        goto LABEL_21;
      }
LABEL_18:
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not find item");
    }
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  return a1;
}

void sub_1B4C7E2D8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v3);
  *(void *)(v1 + 8) = v2;
  uint64_t v5 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(a1);
}

float sub_1B4C7E338(const __CFArray *a1, unint64_t a2)
{
  if (!a1 || CFArrayGetCount(a1) <= a2 || (CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(a1, a2)) == 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1B4C4330C(exception);
    goto LABEL_8;
  }
  uint64_t v5 = sub_1B4C72934((uint64_t)ValueAtIndex);
  if ((v5 & 0xFF00000000) == 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1B4C31770(exception);
LABEL_8:
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  return *(float *)&v5;
}

void sub_1B4C7E3D8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1B4C7E3F4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1B4C7E484(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C7E4F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)CVNLPDecodingLexicon;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_1B4C7E5E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C7E6B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C7E6C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C7E770(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C7E784(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C7E828(_Unwind_Exception *a1)
{
  unint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1B4C7E854(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C7E8E0(_Unwind_Exception *a1)
{
  unint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1B4C7E8FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C7EA08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C7EA28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1B4C7EA48(uint64_t a1, void *a2, void *a3)
{
  id v4 = a2;
  id v5 = a3;
  unint64_t v9 = objc_msgSend_priority(v4, v6, v7, v8);
  if (v9 < objc_msgSend_priority(v5, v10, v11, v12)) {
    uint64_t v13 = -1;
  }
  else {
    uint64_t v13 = 1;
  }

  return v13;
}

void sub_1B4C7EAAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C7EBE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C7ECE8(_Unwind_Exception *a1)
{
  id v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1B4C7ED04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C7ED18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C7ED28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C7EE8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  _Block_object_dispose(&a16, 8);
  if (__p)
  {
    a23 = (uint64_t)__p;
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

__n128 sub_1B4C7EED0(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void sub_1B4C7EEF4(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void sub_1B4C7EF0C(void *a1, void *a2)
{
  id v37 = a2;
  CFArrayRef v6 = (void *)a1[4];
  if (v6 && objc_msgSend_length(v6, v3, v4, v5))
  {
    uint64_t v7 = (void *)a1[4];
    uint64_t v8 = *(void (**)(void *))(a1[5] + 48);
    if (v8)
    {
      v8(v7);
      id v9 = (id)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      id v9 = v7;
    }
    uint64_t v14 = v9;
    objc_msgSend__rootCursor(v37, v10, v11, v12);
    uint64_t v13 = LXCursorCreateByAdvancing();

    if (!v13) {
      goto LABEL_23;
    }
LABEL_9:
    uint64_t v15 = *(void **)(a1[6] + 8);
    uint64_t v17 = (uint64_t *)v15[7];
    unint64_t v16 = v15[8];
    if ((unint64_t)v17 < v16)
    {
      *uint64_t v17 = v13;
      uint64_t v18 = (uint64_t)(v17 + 1);
LABEL_22:
      v15[7] = v18;
      goto LABEL_23;
    }
    uint64_t v19 = (char *)v15[6];
    uint64_t v20 = ((char *)v17 - v19) >> 3;
    unint64_t v21 = v20 + 1;
    if ((unint64_t)(v20 + 1) >> 61) {
      sub_1B4BB3244();
    }
    uint64_t v22 = v16 - (void)v19;
    if (v22 >> 2 > v21) {
      unint64_t v21 = v22 >> 2;
    }
    if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v23 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v23 = v21;
    }
    if (v23)
    {
      if (v23 >> 61) {
        sub_1B4BB2D38();
      }
      uint64_t v24 = (char *)operator new(8 * v23);
      uint64_t v25 = (uint64_t *)&v24[8 * v20];
      uint64_t v26 = &v24[8 * v23];
      uint64_t *v25 = v13;
      uint64_t v18 = (uint64_t)(v25 + 1);
      uint64_t v27 = (char *)((char *)v17 - v19);
      if (v17 == (uint64_t *)v19)
      {
LABEL_20:
        v15[6] = v25;
        v15[7] = v18;
        v15[8] = v26;
        if (!v17) {
          goto LABEL_22;
        }
LABEL_21:
        operator delete(v17);
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v24 = 0;
      uint64_t v25 = (uint64_t *)(8 * v20);
      uint64_t v26 = 0;
      *(void *)(8 * v20) = v13;
      uint64_t v18 = 8 * v20 + 8;
      uint64_t v27 = (char *)((char *)v17 - v19);
      if (v17 == (uint64_t *)v19) {
        goto LABEL_20;
      }
    }
    unint64_t v28 = (unint64_t)(v27 - 8);
    if (v28 < 0x58) {
      goto LABEL_39;
    }
    if ((unint64_t)(v19 - v24) < 0x20) {
      goto LABEL_39;
    }
    uint64_t v29 = (v28 >> 3) + 1;
    uint64_t v30 = 8 * (v29 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v31 = &v17[v30 / 0xFFFFFFFFFFFFFFF8];
    uint64_t v25 = (uint64_t *)((char *)v25 - v30);
    id v32 = &v24[8 * v20 - 16];
    uint64_t v33 = v17 - 2;
    uint64_t v34 = v29 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v35 = *(_OWORD *)v33;
      *((_OWORD *)v32 - 1) = *((_OWORD *)v33 - 1);
      *(_OWORD *)id v32 = v35;
      v32 -= 32;
      v33 -= 4;
      v34 -= 4;
    }
    while (v34);
    uint64_t v17 = v31;
    if (v29 != (v29 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_39:
      do
      {
        uint64_t v36 = *--v17;
        *--uint64_t v25 = v36;
      }
      while (v17 != (uint64_t *)v19);
    }
    uint64_t v17 = (uint64_t *)v15[6];
    v15[6] = v25;
    v15[7] = v18;
    v15[8] = v26;
    if (!v17) {
      goto LABEL_22;
    }
    goto LABEL_21;
  }
  objc_msgSend__rootCursor(v37, v3, v4, v5);
  uint64_t v13 = LXCursorCreateByAdvancing();
  if (v13) {
    goto LABEL_9;
  }
LABEL_23:
}

void sub_1B4C7F138(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B4C7F14C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B4C7F164(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B4C7FB0C(_Unwind_Exception *a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6, void *a7, ...)
{
  va_start(va, a7);
  sub_1B4BF9508((void **)va);

  _Unwind_Resume(a1);
}

void sub_1B4C7FCF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)CVNLPCaptionDecoderLSTM;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_1B4C7FF58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C7FFCC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C7FFE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C7FFF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C801CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C80204(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C80214(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C80A2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

uint64_t CVNLPNormalizeCodepointForCharLM(uint64_t a1)
{
  return sub_1B4C454F8(a1);
}

uint64_t CVNLPCodepointToScriptCode(__int16 a1, int16x4_t a2)
{
  if ((unsigned __int16)(a1 - 48) < 0xAu) {
    return 1;
  }
  uint64_t v3 = 2;
  if (a1 == 32 || a1 == 45) {
    return v3;
  }
  if ((unsigned __int16)(a1 - 8208) < 6u) {
    return 2;
  }
  a2.i16[0] = a1 & 0xFFDF;
  a2.i16[1] = a1;
  if (vmaxv_u16(vcgt_u16((uint16x4_t)0x158001F0017001ALL, (uint16x4_t)vadd_s16(vzip1_s16(a2, vdup_lane_s16(a2, 1)), (int16x4_t)0xFF08FF28FF40FFBFLL))))return 3; {
  if ((unsigned __int16)(a1 - 1024) < 0x130u)
  }
    return 4;
  if ((unsigned __int16)(a1 - 880) < 0x90u) {
    return 5;
  }
  uint64_t v3 = 6;
  if ((unsigned __int16)((unsigned __int16)(a1 + 21504) >> 10) < 0xBu
    || (a1 & 0xFFE0) == 0xA960
    || (a1 & 0xFF00) == 0x1100
    || (unsigned __int16)(a1 - 12592) < 0x60u)
  {
    return v3;
  }
  if ((unsigned __int16)(a1 - 1632) >= 0xAu) {
    return 0;
  }
  else {
    return 7;
  }
}

BOOL CVNLPShouldIgnoreScriptForLatinCyrillic(int a1)
{
  return a1 == 1;
}

BOOL CVNLPIsLatinCyrillicMixedScript(int a1, int a2)
{
  if (a1 == 3 && a2 == 4) {
    return 1;
  }
  return a1 == 4 && a2 == 3;
}

BOOL CVNLPIsWhitespaceCharLMCodepoint(int a1)
{
  return a1 == 95;
}

BOOL CVNLPIsDigitCharLMCodepoint(int a1)
{
  return a1 == 57344;
}

void CVNLPWordTokenIDsForString(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  uint64_t v7 = objc_msgSend_stringByAppendingString_(a1, v5, @" ", v6);
  uint64_t v8 = sub_1B4C483E4(v7, 0);

  objc_msgSend_maximumLengthOfBytesUsingEncoding_(v8, v9, 4, v10);
  objc_msgSend_length(v8, v11, v12, v13);
  operator new[]();
}

void sub_1B4C80EDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

void sub_1B4C80EF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C80F0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C80F20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C80F34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C80F48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C80F60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C80F70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = [NSString alloc];
  uint64_t v8 = objc_msgSend_initWithBytes_length_encoding_(v6, v7, a2, a3, 4);
  uint64_t v12 = objc_msgSend_whitespaceAndNewlineCharacterSet(MEMORY[0x1E4F28B88], v9, v10, v11);
  objc_msgSend_stringByTrimmingCharactersInSet_(v8, v13, (uint64_t)v12, v14);
  id v18 = (id)objc_claimAutoreleasedReturnValue();

  if (objc_msgSend_length(v18, v15, v16, v17)) {
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
}

void sub_1B4C81038(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C8104C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

BOOL CVNLPShouldUseLexiconContextLogProb(void *a1)
{
  id v1 = a1;
  if (objc_msgSend_length(v1, v2, v3, v4) == 1)
  {
    int v7 = objc_msgSend_characterAtIndex_(v1, v5, 0, v6);

    if (v7 == 39)
    {
LABEL_3:

      return 0;
    }
  }
  else
  {
  }
  if (sub_1B4C47C6C(v1)) {
    goto LABEL_3;
  }
  BOOL v9 = !sub_1B4C47CFC(v1);

  return v9;
}

void sub_1B4C81108(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B4C81118(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id convertToCVNLPTextDecodingResult(double **a1, void *a2)
{
  v266[1] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a2;
  uint64_t v255 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v4, v5, v6);
  v258 = *a1;
  uint64_t v254 = (uint64_t)a1[1];
  if (*a1 == (double *)v254) {
    goto LABEL_77;
  }
  do
  {
    long long v265 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v7, v8, v9, v254);
    uint64_t v14 = *(void *)v258;
    uint64_t v13 = *((void *)v258 + 1);
    uint64_t v261 = v13;
    while (v14 != v13)
    {
      id v18 = objc_msgSend_string(MEMORY[0x1E4F28E78], v10, v11, v12);
      uint64_t v19 = *(void **)v14;
      uint64_t v20 = *(void **)(v14 + 8);
      if (*(void **)v14 != v20)
      {
        do
        {
          unint64_t v21 = v3[2](v3, *v19);
          objc_msgSend_appendString_(v18, v22, (uint64_t)v21, v23);

          ++v19;
        }
        while (v19 != v20);
      }
      for (unint64_t i = 0; i < objc_msgSend_length(v18, v15, v16, v17); ++i)
      {
        int v25 = objc_msgSend_characterAtIndex_(v18, v15, i, v17);
        if (v25 != 0x2000 && v25 != 32) {
          break;
        }
      }
      uint64_t v29 = objc_msgSend_length(v18, v15, v16, v17);
      unint64_t v30 = 0;
      uint64_t v31 = v29 - 1;
      if (v29 - 1 >= 0)
      {
        while (1)
        {
          int v32 = objc_msgSend_characterAtIndex_(v18, v26, v31, v28);
          if (v32 != 0x2000 && v32 != 32) {
            break;
          }
          ++v30;
          if (--v31 == -1)
          {
            unint64_t v30 = v29;
            if (!i) {
              goto LABEL_22;
            }
            goto LABEL_21;
          }
        }
      }
      if (i) {
LABEL_21:
      }
        objc_msgSend_deleteCharactersInRange_(v18, v26, 0, i);
LABEL_22:
      if (v30)
      {
        if (objc_msgSend_length(v18, v26, v27, v28))
        {
          if (objc_msgSend_length(v18, v26, v27, v28) < v30) {
            unint64_t v30 = objc_msgSend_length(v18, v33, v34, v35);
          }
          uint64_t v36 = objc_msgSend_length(v18, v33, v34, v35);
          objc_msgSend_deleteCharactersInRange_(v18, v37, v36 - v30, v30);
        }
        if (i) {
          BOOL v38 = objc_msgSend_length(v18, v26, v27, v28) == 0;
        }
        else {
          BOOL v38 = 0;
        }
        uint64_t v39 = @" ";
      }
      else
      {
        BOOL v38 = 0;
        uint64_t v39 = &stru_1F0D56340;
      }
      CFTypeRef v262 = v39;
      uint64_t v40 = objc_msgSend_lastObject(v265, v26, v27, v28);
      v264 = objc_msgSend_terminatingCharacter(v40, v41, v42, v43);

      if (i) {
        char v47 = v38;
      }
      else {
        char v47 = 1;
      }
      if ((v47 & 1) == 0)
      {
        if (objc_msgSend_count(v265, v44, v45, v46))
        {
          if (!objc_msgSend_length(v264, v44, v45, v46)
            || (int v48 = objc_msgSend_characterAtIndex_(v264, v44, 0, v46), v48 != 32) && v48 != 0x2000)
          {
            uint64_t v49 = objc_msgSend_lastObject(v265, v44, v45, v46);
            uint64_t v53 = objc_msgSend_count(v265, v50, v51, v52);
            uint64_t v54 = [CVNLPTextDecodingToken alloc];
            unint64_t v259 = objc_msgSend_string(v49, v55, v56, v57);
            long long v61 = objc_msgSend_score(v49, v58, v59, v60);
            unint64_t v65 = objc_msgSend_alignmentScore(v49, v62, v63, v64);
            uint64_t v69 = objc_msgSend_activationRange(v49, v66, v67, v68);
            double v71 = objc_msgSend_initWithString_score_alignmentScore_activationRange_terminatingCharacter_(v54, v70, (uint64_t)v259, (uint64_t)v61, v65, v69, v70, @" ");
            objc_msgSend_replaceObjectAtIndex_withObject_(v265, v72, v53 - 1, (uint64_t)v71);
          }
        }
      }
      if (!v38) {
        goto LABEL_48;
      }
      if (objc_msgSend_count(v265, v44, v45, v46))
      {
        uint64_t v76 = objc_msgSend_lastObject(v265, v73, v74, v75);
        objc_msgSend_fullString(v76, v77, v78, v79);
        id v80 = (id)objc_claimAutoreleasedReturnValue();
        if (objc_msgSend_length(v80, v81, v82, v83) == 1)
        {
          int v86 = objc_msgSend_characterAtIndex_(v80, v84, 0, v85);

          if (v86 == 0x2000 || v86 == 32)
          {
            uint64_t v87 = objc_msgSend_lastObject(v265, v44, v45, v46);
            uint64_t v260 = objc_msgSend_activationRange(v87, v88, v89, v90);
            uint64_t v91 = *(void *)(v14 + 48);
            uint64_t v95 = objc_msgSend_activationRange(v87, v92, v93, v94);
            uint64_t v256 = objc_msgSend_count(v265, v96, v97, v98);
            double v99 = [CVNLPTextDecodingToken alloc];
            v263 = objc_msgSend_string(v87, v100, v101, v102);
            uint64_t v257 = objc_msgSend_score(v87, v103, v104, v105);
            int v109 = objc_msgSend_alignmentScore(v87, v106, v107, v108);
            double v113 = objc_msgSend_terminatingCharacter(v87, v110, v111, v112);
            uint64_t v115 = objc_msgSend_initWithString_score_alignmentScore_activationRange_terminatingCharacter_(v99, v114, (uint64_t)v263, (uint64_t)v257, v109, v260, v91 - v95, v113);
            objc_msgSend_replaceObjectAtIndex_withObject_(v265, v116, v256 - 1, (uint64_t)v115);

LABEL_3:
            goto LABEL_4;
          }
        }
        else
        {
        }
LABEL_48:
        if (objc_msgSend_count(v265, v44, v45, v46)) {
          uint64_t v117 = *(void *)(v14 + 40);
        }
        else {
          uint64_t v117 = 0;
        }
        uint64_t v118 = [CVNLPTextDecodingToken alloc];
        uint64_t v119 = NSNumber;
        long double v120 = exp(*(double *)(v14 + 24) / (double)(unint64_t)(*(void *)(v14 + 56) + 1));
        float v124 = objc_msgSend_numberWithDouble_(v119, v121, v122, v123, (double)v120);
        long long v125 = NSNumber;
        long double v126 = exp(*(long double *)(v14 + 32));
        uint64_t v130 = objc_msgSend_numberWithDouble_(v125, v127, v128, v129, (double)v126);
        uint64_t v87 = objc_msgSend_initWithString_score_alignmentScore_activationRange_terminatingCharacter_(v118, v131, (uint64_t)v18, (uint64_t)v124, v130, v117, *(void *)(v14 + 48) - v117, v262);

        objc_msgSend_addObject_(v265, v132, (uint64_t)v87, v133);
        goto LABEL_3;
      }
LABEL_4:

      v14 += 64;
      uint64_t v13 = v261;
    }
    while (objc_msgSend_count(v265, v10, v11, v12))
    {
      uint64_t v137 = objc_msgSend_lastObject(v265, v134, v135, v136);
      objc_msgSend_terminatingCharacter(v137, v138, v139, v140);
      id v141 = (id)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend_length(v141, v142, v143, v144) != 1)
      {

        break;
      }
      int v147 = objc_msgSend_characterAtIndex_(v141, v145, 0, v146);

      if (v147 != 0x2000 && v147 != 32) {
        break;
      }
      uint64_t v151 = objc_msgSend_lastObject(v265, v148, v149, v150);
      objc_msgSend_fullString(v151, v152, v153, v154);
      id v155 = (id)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend_length(v155, v156, v157, v158) != 1)
      {

LABEL_63:
        uint64_t v178 = objc_msgSend_lastObject(v265, v162, v163, v164);
        uint64_t v205 = objc_msgSend_count(v265, v202, v203, v204);
        uint64_t v206 = [CVNLPTextDecodingToken alloc];
        uint64_t v187 = objc_msgSend_string(v178, v207, v208, v209);
        uint64_t v191 = objc_msgSend_score(v178, v210, v211, v212);
        unint64_t v195 = objc_msgSend_alignmentScore(v178, v213, v214, v215);
        uint64_t v219 = objc_msgSend_activationRange(v178, v216, v217, v218);
        unint64_t v200 = objc_msgSend_initWithString_score_alignmentScore_activationRange_terminatingCharacter_(v206, v220, (uint64_t)v187, (uint64_t)v191, v195, v219, v220, &stru_1F0D56340);
        objc_msgSend_replaceObjectAtIndex_withObject_(v265, v221, v205 - 1, (uint64_t)v200);
LABEL_52:

        continue;
      }
      int v161 = objc_msgSend_characterAtIndex_(v155, v159, 0, v160);

      if (v161 != 0x2000 && v161 != 32) {
        goto LABEL_63;
      }
      unint64_t v165 = objc_msgSend_lastObject(v265, v162, v163, v164);
      NSUInteger v169 = objc_msgSend_activationRange(v165, v166, v167, v168);
      NSUInteger v171 = v170;

      objc_msgSend_removeLastObject(v265, v172, v173, v174);
      if (objc_msgSend_count(v265, v175, v176, v177))
      {
        uint64_t v178 = objc_msgSend_lastObject(v265, v10, v11, v12);
        uint64_t v182 = objc_msgSend_count(v265, v179, v180, v181);
        long long v183 = [CVNLPTextDecodingToken alloc];
        uint64_t v187 = objc_msgSend_string(v178, v184, v185, v186);
        uint64_t v191 = objc_msgSend_score(v178, v188, v189, v190);
        unint64_t v195 = objc_msgSend_alignmentScore(v178, v192, v193, v194);
        v268.location = objc_msgSend_activationRange(v178, v196, v197, v198);
        v269.location = v169;
        v269.length = v171;
        NSRange v199 = NSUnionRange(v268, v269);
        unint64_t v200 = objc_msgSend_initWithString_score_alignmentScore_activationRange_terminatingCharacter_(v183, (const char *)v199.length, (uint64_t)v187, (uint64_t)v191, v195, v199.location, v199.length, &stru_1F0D56340);
        objc_msgSend_replaceObjectAtIndex_withObject_(v265, v201, v182 - 1, (uint64_t)v200);
        goto LABEL_52;
      }
    }
    uint64_t v223 = *(void *)v258;
    uint64_t v222 = *((void *)v258 + 1);
    if (*(void *)v258 == v222)
    {
      unint64_t v227 = 0;
    }
    else
    {
      unint64_t v224 = v222 - v223 - 64;
      if (v224 >= 0x200)
      {
        uint64_t v228 = (v224 >> 6) + 1;
        uint64_t v229 = v228 & 7;
        if ((v228 & 7) == 0) {
          uint64_t v229 = 8;
        }
        uint64_t v230 = v228 - v229;
        uint64_t v226 = v223 + (v230 << 6);
        uint64_t v231 = v223 + 312;
        int32x4_t v232 = 0uLL;
        int32x4_t v233 = 0uLL;
        do
        {
          v234.i64[0] = vzip1q_s32(*(int32x4_t *)(v231 - 256), *(int32x4_t *)(v231 - 192)).u64[0];
          v234.i64[1] = vextq_s8(*(int8x16_t *)(v231 - 128), (int8x16_t)vzip1q_s32(*(int32x4_t *)(v231 - 128), *(int32x4_t *)(v231 - 64)), 8uLL).i64[1];
          v235.i64[0] = vzip1q_s32(*(int32x4_t *)v231, *(int32x4_t *)(v231 + 64)).u64[0];
          v235.i64[1] = vextq_s8(*(int8x16_t *)(v231 + 128), (int8x16_t)vzip1q_s32(*(int32x4_t *)(v231 + 128), *(int32x4_t *)(v231 + 192)), 8uLL).i64[1];
          int32x4_t v232 = vaddq_s32(v232, v234);
          int32x4_t v233 = vaddq_s32(v233, v235);
          v231 += 512;
          v230 -= 8;
        }
        while (v230);
        int v225 = vaddvq_s32(vaddq_s32(v233, v232));
      }
      else
      {
        int v225 = 0;
        uint64_t v226 = *(void *)v258;
      }
      do
      {
        v225 += *(_DWORD *)(v226 + 56);
        v226 += 64;
      }
      while (v226 != v222);
      unint64_t v227 = v225;
    }
    v236 = [CVNLPTextDecodingResultCandidate alloc];
    double v237 = exp(v258[3] / (double)v227);
    long double v238 = exp(v258[4] / (double)v227);
    int64_t v241 = objc_msgSend_initWithTokens_score_activationScore_(v236, v239, (uint64_t)v265, v240, v237, (double)v238);
    objc_msgSend_addObject_(v255, v242, (uint64_t)v241, v243);

    v258 += 5;
  }
  while (v258 != (double *)v254);
LABEL_77:
  v244 = objc_msgSend_sortDescriptorWithKey_ascending_(MEMORY[0x1E4F29008], v7, @"score", 0, v254);
  v266[0] = v244;
  uint64_t v246 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v245, (uint64_t)v266, 1);
  objc_msgSend_sortUsingDescriptors_(v255, v247, (uint64_t)v246, v248);

  v249 = [CVNLPTextDecodingResult alloc];
  long long v252 = objc_msgSend_initWithCandidates_(v249, v250, (uint64_t)v255, v251);

  return v252;
}

void sub_1B4C81AF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void CVNLPLogGeneralFault(void *a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (qword_1E9D40AE0 != -1) {
    dispatch_once(&qword_1E9D40AE0, &unk_1F0D55F60);
  }
  uint64_t v2 = (id)qword_1E9D40AB0[0];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
  {
    int v3 = 138412290;
    id v4 = v1;
    _os_log_impl(&dword_1B4BAD000, v2, OS_LOG_TYPE_FAULT, "%@", (uint8_t *)&v3, 0xCu);
  }
}

void CFArrayAppendValue(CFMutableArrayRef theArray, const void *value)
{
}

CFArrayRef CFArrayCreate(CFAllocatorRef allocator, const void **values, CFIndex numValues, const CFArrayCallBacks *callBacks)
{
  return (CFArrayRef)MEMORY[0x1F40D7170](allocator, values, numValues, callBacks);
}

CFMutableArrayRef CFArrayCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFArrayCallBacks *callBacks)
{
  return (CFMutableArrayRef)MEMORY[0x1F40D7190](allocator, capacity, callBacks);
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return MEMORY[0x1F40D71B8](theArray);
}

CFTypeID CFArrayGetTypeID(void)
{
  return MEMORY[0x1F40D71D8]();
}

const void *__cdecl CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx)
{
  return (const void *)MEMORY[0x1F40D71F0](theArray, idx);
}

CFTypeID CFBooleanGetTypeID(void)
{
  return MEMORY[0x1F40D7420]();
}

Boolean CFBooleanGetValue(CFBooleanRef BOOLean)
{
  return MEMORY[0x1F40D7430](BOOLean);
}

Boolean CFDictionaryContainsKey(CFDictionaryRef theDict, const void *key)
{
  return MEMORY[0x1F40D7968](theDict, key);
}

CFDictionaryRef CFDictionaryCreate(CFAllocatorRef allocator, const void **keys, const void **values, CFIndex numValues, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFDictionaryRef)MEMORY[0x1F40D7978](allocator, keys, values, numValues, keyCallBacks, valueCallBacks);
}

CFDictionaryRef CFDictionaryCreateCopy(CFAllocatorRef allocator, CFDictionaryRef theDict)
{
  return (CFDictionaryRef)MEMORY[0x1F40D7990](allocator, theDict);
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFMutableDictionaryRef)MEMORY[0x1F40D7998](allocator, capacity, keyCallBacks, valueCallBacks);
}

CFIndex CFDictionaryGetCount(CFDictionaryRef theDict)
{
  return MEMORY[0x1F40D79C0](theDict);
}

void CFDictionaryGetKeysAndValues(CFDictionaryRef theDict, const void **keys, const void **values)
{
}

CFTypeID CFDictionaryGetTypeID(void)
{
  return MEMORY[0x1F40D7A00]();
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return (const void *)MEMORY[0x1F40D7A10](theDict, key);
}

void CFDictionarySetValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x1F40D7B80](cf);
}

CFLocaleIdentifier CFLocaleGetIdentifier(CFLocaleRef locale)
{
  return (CFLocaleIdentifier)MEMORY[0x1F40D7C20](locale);
}

CFTypeID CFLocaleGetTypeID(void)
{
  return MEMORY[0x1F40D7C40]();
}

CFNumberRef CFNumberCreate(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr)
{
  return (CFNumberRef)MEMORY[0x1F40D7D80](allocator, theType, valuePtr);
}

CFNumberType CFNumberGetType(CFNumberRef number)
{
  return MEMORY[0x1F40D7E08](number);
}

CFTypeID CFNumberGetTypeID(void)
{
  return MEMORY[0x1F40D7E10]();
}

Boolean CFNumberGetValue(CFNumberRef number, CFNumberType theType, void *valuePtr)
{
  return MEMORY[0x1F40D7E20](number, theType, valuePtr);
}

void CFRelease(CFTypeRef cf)
{
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x1F40D8048](cf);
}

CFComparisonResult CFStringCompare(CFStringRef theString1, CFStringRef theString2, CFStringCompareFlags compareOptions)
{
  return MEMORY[0x1F40D8388](theString1, theString2, compareOptions);
}

CFStringRef CFStringCreateWithBytes(CFAllocatorRef alloc, const UInt8 *bytes, CFIndex numBytes, CFStringEncoding encoding, Boolean isExternalRepresentation)
{
  return (CFStringRef)MEMORY[0x1F40D8438](alloc, bytes, numBytes, *(void *)&encoding, isExternalRepresentation);
}

CFIndex CFStringGetBytes(CFStringRef theString, CFRange range, CFStringEncoding encoding, UInt8 lossByte, Boolean isExternalRepresentation, UInt8 *buffer, CFIndex maxBufLen, CFIndex *usedBufLen)
{
  return MEMORY[0x1F40D8500](theString, range.location, range.length, *(void *)&encoding, lossByte, isExternalRepresentation, buffer, maxBufLen);
}

const char *__cdecl CFStringGetCStringPtr(CFStringRef theString, CFStringEncoding encoding)
{
  return (const char *)MEMORY[0x1F40D8520](theString, *(void *)&encoding);
}

CFIndex CFStringGetLength(CFStringRef theString)
{
  return MEMORY[0x1F40D8578](theString);
}

CFTypeID CFStringGetTypeID(void)
{
  return MEMORY[0x1F40D85F0]();
}

CFStringRef CFURLCopyFileSystemPath(CFURLRef anURL, CFURLPathStyle pathStyle)
{
  return (CFStringRef)MEMORY[0x1F40D8758](anURL, pathStyle);
}

CFURLRef CFURLCreateWithBytes(CFAllocatorRef allocator, const UInt8 *URLBytes, CFIndex length, CFStringEncoding encoding, CFURLRef baseURL)
{
  return (CFURLRef)MEMORY[0x1F40D8888](allocator, URLBytes, length, *(void *)&encoding, baseURL);
}

CFTypeID CFURLGetTypeID(void)
{
  return MEMORY[0x1F40D8928]();
}

CGContextRef CGBitmapContextCreate(void *data, size_t width, size_t height, size_t bitsPerComponent, size_t bytesPerRow, CGColorSpaceRef space, uint32_t bitmapInfo)
{
  return (CGContextRef)MEMORY[0x1F40D9808](data, width, height, bitsPerComponent, bytesPerRow, space, *(void *)&bitmapInfo);
}

CGImageRef CGBitmapContextCreateImage(CGContextRef context)
{
  return (CGImageRef)MEMORY[0x1F40D9818](context);
}

CGColorSpaceRef CGColorSpaceCreateDeviceRGB(void)
{
  return (CGColorSpaceRef)MEMORY[0x1F40D9AF8]();
}

void CGColorSpaceRelease(CGColorSpaceRef space)
{
}

void CGContextDrawImage(CGContextRef c, CGRect rect, CGImageRef image)
{
}

void CGContextRelease(CGContextRef c)
{
}

void CGContextSetInterpolationQuality(CGContextRef c, CGInterpolationQuality quality)
{
}

size_t CGImageGetHeight(CGImageRef image)
{
  return MEMORY[0x1F40DA948](image);
}

size_t CGImageGetWidth(CGImageRef image)
{
  return MEMORY[0x1F40DA9B8](image);
}

void CGImageRelease(CGImageRef image)
{
}

Float64 CMTimeGetSeconds(CMTime *time)
{
  MEMORY[0x1F40DC100](time);
  return result;
}

CMTime *__cdecl CMTimeMake(CMTime *__return_ptr retstr, int64_t value, int32_t timescale)
{
  return (CMTime *)MEMORY[0x1F40DC108](retstr, value, *(void *)&timescale);
}

CVReturn CVPixelBufferCreate(CFAllocatorRef allocator, size_t width, size_t height, OSType pixelFormatType, CFDictionaryRef pixelBufferAttributes, CVPixelBufferRef *pixelBufferOut)
{
  return MEMORY[0x1F40DFCE0](allocator, width, height, *(void *)&pixelFormatType, pixelBufferAttributes, pixelBufferOut);
}

CVReturn CVPixelBufferCreateWithBytes(CFAllocatorRef allocator, size_t width, size_t height, OSType pixelFormatType, void *baseAddress, size_t bytesPerRow, CVPixelBufferReleaseBytesCallback releaseCallback, void *releaseRefCon, CFDictionaryRef pixelBufferAttributes, CVPixelBufferRef *pixelBufferOut)
{
  return MEMORY[0x1F40DFD00](allocator, width, height, *(void *)&pixelFormatType, baseAddress, bytesPerRow, releaseCallback, releaseRefCon);
}

void *__cdecl CVPixelBufferGetBaseAddress(CVPixelBufferRef pixelBuffer)
{
  return (void *)MEMORY[0x1F40DFD28](pixelBuffer);
}

size_t CVPixelBufferGetBytesPerRow(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x1F40DFD40](pixelBuffer);
}

size_t CVPixelBufferGetDataSize(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x1F40DFD50](pixelBuffer);
}

size_t CVPixelBufferGetHeight(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x1F40DFD68](pixelBuffer);
}

OSType CVPixelBufferGetPixelFormatType(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x1F40DFD80](pixelBuffer);
}

size_t CVPixelBufferGetWidth(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x1F40DFD98](pixelBuffer);
}

CVReturn CVPixelBufferLockBaseAddress(CVPixelBufferRef pixelBuffer, CVPixelBufferLockFlags lockFlags)
{
  return MEMORY[0x1F40DFDB8](pixelBuffer, lockFlags);
}

void CVPixelBufferRelease(CVPixelBufferRef texture)
{
}

CVPixelBufferRef CVPixelBufferRetain(CVPixelBufferRef texture)
{
  return (CVPixelBufferRef)MEMORY[0x1F40DFE40](texture);
}

CVReturn CVPixelBufferUnlockBaseAddress(CVPixelBufferRef pixelBuffer, CVPixelBufferLockFlags unlockFlags)
{
  return MEMORY[0x1F40DFE48](pixelBuffer, unlockFlags);
}

uint64_t LDEnumerateAssetDataItems()
{
  return MEMORY[0x1F412A878]();
}

uint64_t LMLanguageModelConditionalProbability()
{
  return MEMORY[0x1F412A148]();
}

uint64_t LMLanguageModelCreate()
{
  return MEMORY[0x1F412A158]();
}

uint64_t LMLanguageModelGetTokenIDForString()
{
  return MEMORY[0x1F412A1A0]();
}

uint64_t LMLanguageModelRelease()
{
  return MEMORY[0x1F412A1E0]();
}

uint64_t LMStreamTokenizerCreate()
{
  return MEMORY[0x1F412A2D0]();
}

uint64_t LMStreamTokenizerPushBytes()
{
  return MEMORY[0x1F412A2E0]();
}

uint64_t LMStreamTokenizerRelease()
{
  return MEMORY[0x1F412A2E8]();
}

uint64_t LXCursorConditionalProbability()
{
  return MEMORY[0x1F412A608]();
}

uint64_t LXCursorCreateByAdvancing()
{
  return MEMORY[0x1F412A618]();
}

uint64_t LXLexiconCreate()
{
  return MEMORY[0x1F412A768]();
}

uint64_t LXLexiconCreateRootCursor()
{
  return MEMORY[0x1F412A778]();
}

uint64_t MGGetBoolAnswer()
{
  return MEMORY[0x1F417CE00]();
}

uint64_t MRLNeuralNetworkCopyStates()
{
  return MEMORY[0x1F41303D0]();
}

uint64_t MRLNeuralNetworkCreate()
{
  return MEMORY[0x1F41303D8]();
}

uint64_t MRLNeuralNetworkGetOutput()
{
  return MEMORY[0x1F41303E8]();
}

uint64_t MRLNeuralNetworkGetOutputDimension()
{
  return MEMORY[0x1F41303F8]();
}

uint64_t MRLNeuralNetworkPredict()
{
  return MEMORY[0x1F4130400]();
}

uint64_t MRLNeuralNetworkSetInputTensor()
{
  return MEMORY[0x1F4130420]();
}

uint64_t MRLNeuralNetworkTensorAppendData()
{
  return MEMORY[0x1F4130428]();
}

uint64_t MRLNeuralNetworkTensorCreate()
{
  return MEMORY[0x1F4130430]();
}

void NSLog(NSString *format, ...)
{
}

NSString *__cdecl NSStringFromClass(Class aClass)
{
  return (NSString *)MEMORY[0x1F40E7280](aClass);
}

NSString *__cdecl NSStringFromSelector(SEL aSelector)
{
  return (NSString *)MEMORY[0x1F40E72B0](aSelector);
}

NSRange NSUnionRange(NSRange range1, NSRange range2)
{
  NSUInteger v2 = MEMORY[0x1F40E72E0](range1.location, range1.length, range2.location, range2.length);
  result.length = v3;
  result.location = v2;
  return result;
}

OSStatus VTPixelTransferSessionCreate(CFAllocatorRef allocator, VTPixelTransferSessionRef *pixelTransferSessionOut)
{
  return MEMORY[0x1F41034D0](allocator, pixelTransferSessionOut);
}

OSStatus VTPixelTransferSessionTransferImage(VTPixelTransferSessionRef session, CVPixelBufferRef sourceBuffer, CVPixelBufferRef destinationBuffer)
{
  return MEMORY[0x1F41034F0](session, sourceBuffer, destinationBuffer);
}

void _Block_object_dispose(const void *a1, const int a2)
{
}

uint64_t _CFRuntimeCreateInstance()
{
  return MEMORY[0x1F40D90D0]();
}

uint64_t _CFRuntimeRegisterClass()
{
  return MEMORY[0x1F40D90E8]();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

const char *__cdecl std::runtime_error::what(const std::runtime_error *this)
{
  return (const char *)MEMORY[0x1F417E350](this);
}

int std::string::compare(const std::string *this, const std::string::value_type *__s)
{
  return MEMORY[0x1F417E390](this, __s);
}

uint64_t std::stringbuf::str()
{
  return MEMORY[0x1F417E3A8]();
}

std::__fs::filesystem::path::__string_view std::__fs::filesystem::path::__filename(const std::__fs::filesystem::path *this)
{
  id v1 = (const std::string_view::value_type *)MEMORY[0x1F417E3C0](this);
  result.__size_ = v2;
  result.__data_ = v1;
  return result;
}

std::__fs::filesystem::path::__string_view std::__fs::filesystem::path::__parent_path(const std::__fs::filesystem::path *this)
{
  id v1 = (const std::string_view::value_type *)MEMORY[0x1F417E3D0](this);
  result.__size_ = v2;
  result.__data_ = v1;
  return result;
}

std::__fs::filesystem::path::__string_view std::__fs::filesystem::path::__root_directory(const std::__fs::filesystem::path *this)
{
  id v1 = (const std::string_view::value_type *)MEMORY[0x1F417E3D8](this);
  result.__size_ = v2;
  result.__data_ = v1;
  return result;
}

std::string *__cdecl std::locale::name(std::string *__return_ptr retstr, const std::locale *this)
{
  return (std::string *)MEMORY[0x1F417E400](retstr, this);
}

const std::locale::facet *__cdecl std::locale::use_facet(const std::locale *this, std::locale::id *a2)
{
  return (const std::locale::facet *)MEMORY[0x1F417E408](this, a2);
}

std::locale std::ios_base::getloc(const std::ios_base *this)
{
  return (std::locale)MEMORY[0x1F417E418](this);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return (std::logic_error *)MEMORY[0x1F417E448](this, a2);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const std::string *a2)
{
  return (std::logic_error *)MEMORY[0x1F417E450](this, a2);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const std::logic_error *a2)
{
  return (std::logic_error *)MEMORY[0x1F417E458](this, a2);
}

void std::out_of_range::~out_of_range(std::out_of_range *this)
{
}

{
  MEMORY[0x1F417E498](this);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const char *a2)
{
  return (std::runtime_error *)MEMORY[0x1F417E4B8](this, a2);
}

{
  return (std::runtime_error *)MEMORY[0x1F417E4D0](this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const std::string *a2)
{
  return (std::runtime_error *)MEMORY[0x1F417E4C0](this, a2);
}

{
  return (std::runtime_error *)MEMORY[0x1F417E4D8](this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const std::runtime_error *a2)
{
  return (std::runtime_error *)MEMORY[0x1F417E4C8](this, a2);
}

void std::runtime_error::~runtime_error(std::runtime_error *this)
{
}

{
  MEMORY[0x1F417E4F0](this);
}

void std::invalid_argument::~invalid_argument(std::invalid_argument *this)
{
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return (std::bad_array_new_length *)MEMORY[0x1F417E530](this);
}

std::regex_error *__cdecl std::regex_error::regex_error(std::regex_error *this, std::regex_constants::error_type __ecode)
{
  return (std::regex_error *)MEMORY[0x1F417E550](this, *(void *)&__ecode);
}

size_t std::__next_prime(size_t __n)
{
  return MEMORY[0x1F417E588](__n);
}

std::string *__cdecl std::string::erase(std::string *this, std::string::size_type __pos, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1F417E5A0](this, __pos, __n);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x1F417E5B8](this, __s);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1F417E5C0](this, __s, __n);
}

std::string *__cdecl std::string::append(std::string *this, std::string::size_type __n, std::string::value_type __c)
{
  return (std::string *)MEMORY[0x1F417E5D0](this, __n, __c);
}

std::string *__cdecl std::string::assign(std::string *this, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x1F417E5D8](this, __s);
}

std::string *__cdecl std::string::assign(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1F417E5E0](this, __s, __n);
}

std::string *__cdecl std::string::insert(std::string *this, std::string::size_type __pos, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x1F417E600](this, __pos, __s);
}

std::string *__cdecl std::string::insert(std::string *this, std::string::size_type __pos, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1F417E608](this, __pos, __s, __n);
}

void std::string::resize(std::string *this, std::string::size_type __n, std::string::value_type __c)
{
}

void std::string::reserve(std::string *this, std::string::size_type __requested_capacity)
{
}

void std::string::__grow_by(std::string *this, std::string::size_type __old_cap, std::string::size_type __delta_cap, std::string::size_type __old_sz, std::string::size_type __n_copy, std::string::size_type __n_del, std::string::size_type __n_add)
{
}

void std::string::push_back(std::string *this, std::string::value_type __c)
{
}

std::string *__cdecl std::string::operator=(std::string *this, const std::string *__str)
{
  return (std::string *)MEMORY[0x1F417E670](this, __str);
}

std::string *__cdecl std::string::operator=(std::string *this, std::string::value_type __c)
{
  return (std::string *)MEMORY[0x1F417E678](this, __c);
}

uint64_t std::filebuf::open()
{
  return MEMORY[0x1F417E728]();
}

uint64_t std::filebuf::basic_filebuf()
{
  return MEMORY[0x1F417E740]();
}

uint64_t std::filebuf::~filebuf()
{
  return MEMORY[0x1F417E748]();
}

uint64_t std::istream::read()
{
  return MEMORY[0x1F417E768]();
}

uint64_t std::istream::sentry::sentry()
{
  return MEMORY[0x1F417E7A0]();
}

uint64_t std::istream::~istream()
{
  return MEMORY[0x1F417E7C0]();
}

uint64_t std::istream::operator>>()
{
  return MEMORY[0x1F417E7E0]();
}

uint64_t std::ostream::put()
{
  return MEMORY[0x1F417E830]();
}

uint64_t std::ostream::flush()
{
  return MEMORY[0x1F417E838]();
}

uint64_t std::ostream::sentry::sentry()
{
  return MEMORY[0x1F417E848]();
}

uint64_t std::ostream::sentry::~sentry()
{
  return MEMORY[0x1F417E850]();
}

uint64_t std::ostream::~ostream()
{
  return MEMORY[0x1F417E860]();
}

uint64_t std::ostream::operator<<()
{
  return MEMORY[0x1F417E878]();
}

{
  return MEMORY[0x1F417E880]();
}

{
  return MEMORY[0x1F417E890]();
}

{
  return MEMORY[0x1F417E898]();
}

{
  return MEMORY[0x1F417E8A0]();
}

{
  return MEMORY[0x1F417E8B0]();
}

std::random_device *__cdecl std::random_device::random_device(std::random_device *this, const std::string *__token)
{
  return (std::random_device *)MEMORY[0x1F417E908](this, __token);
}

void std::random_device::~random_device(std::random_device *this)
{
}

std::random_device::result_type std::random_device::operator()(std::random_device *this)
{
  return MEMORY[0x1F417E918](this);
}

uint64_t std::iostream::~basic_iostream()
{
  return MEMORY[0x1F417E940]();
}

std::regex_traits<char>::char_class_type std::__get_classname(const char *__s, BOOL __icase)
{
  return MEMORY[0x1F417E960](__s, __icase);
}

uint64_t std::streambuf::basic_streambuf()
{
  return MEMORY[0x1F417E978]();
}

uint64_t std::streambuf::~streambuf()
{
  return MEMORY[0x1F417E980]();
}

void std::__shared_weak_count::__release_weak(std::__shared_weak_count *this)
{
}

void std::__shared_weak_count::~__shared_weak_count(std::__shared_weak_count *this)
{
}

std::string *__cdecl std::__get_collation_name(std::string *__return_ptr retstr, const char *__s)
{
  return (std::string *)MEMORY[0x1F417EAA8](retstr, __s);
}

std::__fs::filesystem::path *__cdecl std::__fs::filesystem::__canonical(std::__fs::filesystem::path *__return_ptr retstr, const std::__fs::filesystem::path *a2, std::error_code *__ec)
{
  return (std::__fs::filesystem::path *)MEMORY[0x1F417EAF8](retstr, a2, __ec);
}

std::__fs::filesystem::file_status std::__fs::filesystem::__status(const std::__fs::filesystem::path *a1, std::error_code *__ec)
{
  return (std::__fs::filesystem::file_status)MEMORY[0x1F417EBC8](a1, __ec);
}

void std::mutex::lock(std::mutex *this)
{
}

void std::mutex::unlock(std::mutex *this)
{
}

void std::mutex::~mutex(std::mutex *this)
{
}

std::locale *__cdecl std::locale::locale(std::locale *this, const std::locale *a2)
{
  return (std::locale *)MEMORY[0x1F417ECE0](this, a2);
}

std::locale *__cdecl std::locale::locale(std::locale *this)
{
  return (std::locale *)MEMORY[0x1F417ECE8](this);
}

void std::locale::~locale(std::locale *this)
{
}

void std::ios_base::__set_badbit_and_consider_rethrow(std::ios_base *this)
{
}

void std::ios_base::init(std::ios_base *this, void *__sb)
{
}

void std::ios_base::clear(std::ios_base *this, std::ios_base::iostate __state)
{
}

uint64_t std::ios::~ios()
{
  return MEMORY[0x1F417EE40]();
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, int __val)
{
  return (std::string *)MEMORY[0x1F417EE70](retstr, *(void *)&__val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, unsigned int __val)
{
  return (std::string *)MEMORY[0x1F417EE78](retstr, *(void *)&__val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, unint64_t __val)
{
  return (std::string *)MEMORY[0x1F417EE88](retstr, __val);
}

uint64_t std::operator+<char>()
{
  return MEMORY[0x1F417EEA0]();
}

void std::exception::~exception(std::exception *this)
{
}

void std::terminate(void)
{
}

void operator delete[]()
{
  while (1)
    ;
}

void operator delete(void *__p)
{
  while (1)
    ;
}

void operator delete(void *__p, std::align_val_t a2)
{
  while (1)
    ;
}

void operator delete()
{
  while (1)
    ;
}

void *__cdecl operator new[](size_t __sz)
{
  while (1)
    ;
}

void operator new[]()
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz)
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz, std::align_val_t a2)
{
  while (1)
    ;
}

void operator new()
{
  while (1)
    ;
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x1F417EF30](thrown_size);
}

int __cxa_atexit(void (*lpfunc)(void *), void *obj, void *lpdso_handle)
{
  return MEMORY[0x1F40C9B60](lpfunc, obj, lpdso_handle);
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x1F417EF48](a1);
}

void __cxa_end_catch(void)
{
}

void __cxa_free_exception(void *a1)
{
}

void __cxa_guard_abort(__guard *a1)
{
}

int __cxa_guard_acquire(__guard *a1)
{
  return MEMORY[0x1F417EF80](a1);
}

void __cxa_guard_release(__guard *a1)
{
}

void __cxa_rethrow(void)
{
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
}

void *__dynamic_cast(const void *lpsrc, const struct __class_type_info *lpstype, const struct __class_type_info *lpdtype, ptrdiff_t s2d)
{
  return (void *)MEMORY[0x1F417EFA8](lpsrc, lpstype, lpdtype, s2d);
}

int *__error(void)
{
  return (int *)MEMORY[0x1F40C9B88]();
}

__darwin_ct_rune_t __tolower(__darwin_ct_rune_t a1)
{
  return MEMORY[0x1F40C9CF8](*(void *)&a1);
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _sl_dlopen()
{
  return MEMORY[0x1F415B160]();
}

uint64_t abort_report_np()
{
  return MEMORY[0x1F40CA1E8]();
}

void bzero(void *a1, size_t a2)
{
}

uint64_t c_network_get_input_names()
{
  return MEMORY[0x1F4117FD8]();
}

uint64_t c_network_get_output_names()
{
  return MEMORY[0x1F4117FF0]();
}

int close(int a1)
{
  return MEMORY[0x1F40CB3F8](*(void *)&a1);
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_group_async(dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_group_t dispatch_group_create(void)
{
  return (dispatch_group_t)MEMORY[0x1F40CBA88]();
}

void dispatch_group_enter(dispatch_group_t group)
{
}

void dispatch_group_leave(dispatch_group_t group)
{
}

intptr_t dispatch_group_wait(dispatch_group_t group, dispatch_time_t timeout)
{
  return MEMORY[0x1F40CBAC0](group, timeout);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_qos_class(dispatch_queue_attr_t attr, dispatch_qos_class_t qos_class, int relative_priority)
{
  return (dispatch_queue_attr_t)MEMORY[0x1F40CBBB8](attr, *(void *)&qos_class, *(void *)&relative_priority);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x1F40CBBC0](label, attr);
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
}

uint64_t espresso_buffer_get_rank()
{
  return MEMORY[0x1F4118618]();
}

uint64_t espresso_buffer_pack_tensor_shape()
{
  return MEMORY[0x1F4118628]();
}

uint64_t espresso_buffer_unpack_tensor_shape()
{
  return MEMORY[0x1F4118638]();
}

uint64_t espresso_context_destroy()
{
  return MEMORY[0x1F4118648]();
}

uint64_t espresso_create_context()
{
  return MEMORY[0x1F4118668]();
}

uint64_t espresso_create_plan()
{
  return MEMORY[0x1F4118678]();
}

uint64_t espresso_get_output_blob_name()
{
  return MEMORY[0x1F41186D0]();
}

uint64_t espresso_get_status_string()
{
  return MEMORY[0x1F41186D8]();
}

uint64_t espresso_network_bind_buffer()
{
  return MEMORY[0x1F41186E0]();
}

uint64_t espresso_network_bind_cvpixelbuffer()
{
  return MEMORY[0x1F41186F8]();
}

uint64_t espresso_network_bind_input_vimagebuffer_argb8()
{
  return MEMORY[0x1F4118710]();
}

uint64_t espresso_network_bind_input_vimagebuffer_bgra8()
{
  return MEMORY[0x1F4118718]();
}

uint64_t espresso_network_bind_input_vimagebuffer_planar8()
{
  return MEMORY[0x1F4118720]();
}

uint64_t espresso_network_bind_input_vimagebuffer_rgba8()
{
  return MEMORY[0x1F4118728]();
}

uint64_t espresso_network_change_input_blob_shapes_seq_rank()
{
  return MEMORY[0x1F4118748]();
}

uint64_t espresso_network_declare_output()
{
  return MEMORY[0x1F4118770]();
}

uint64_t espresso_network_query_blob_dimensions()
{
  return MEMORY[0x1F4118788]();
}

uint64_t espresso_network_query_blob_shape()
{
  return MEMORY[0x1F4118798]();
}

uint64_t espresso_plan_add_network()
{
  return MEMORY[0x1F41187D8]();
}

uint64_t espresso_plan_build()
{
  return MEMORY[0x1F41187F0]();
}

uint64_t espresso_plan_build_clean()
{
  return MEMORY[0x1F41187F8]();
}

uint64_t espresso_plan_destroy()
{
  return MEMORY[0x1F4118818]();
}

uint64_t espresso_plan_execute_sync()
{
  return MEMORY[0x1F4118828]();
}

uint64_t espresso_plan_get_error_info()
{
  return MEMORY[0x1F4118838]();
}

uint64_t espresso_plan_set_priority()
{
  return MEMORY[0x1F4118858]();
}

uint64_t espresso_plan_share_intermediate_buffer()
{
  return MEMORY[0x1F4118860]();
}

uint64_t espresso_set_image_preprocessing_params()
{
  return MEMORY[0x1F4118888]();
}

void exit(int a1)
{
}

long double exp(long double __x)
{
  MEMORY[0x1F40CBFE0](__x);
  return result;
}

long double exp2(long double __x)
{
  MEMORY[0x1F40CBFE8](__x);
  return result;
}

float expf(float a1)
{
  MEMORY[0x1F40CBFF8](a1);
  return result;
}

long double expm1(long double __x)
{
  MEMORY[0x1F40CC000](__x);
  return result;
}

int fflush(FILE *a1)
{
  return MEMORY[0x1F40CC0C8](a1);
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return MEMORY[0x1F40CC1D8](a1, a2);
}

void free(void *a1)
{
}

int fstat(int a1, stat *a2)
{
  return MEMORY[0x1F40CC2B8](*(void *)&a1, a2);
}

lconv *localeconv(void)
{
  return (lconv *)MEMORY[0x1F40CC858]();
}

long double log(long double __x)
{
  MEMORY[0x1F40CC878](__x);
  return result;
}

long double log1p(long double __x)
{
  MEMORY[0x1F40CC890](__x);
  return result;
}

float log1pf(float a1)
{
  MEMORY[0x1F40CC898](a1);
  return result;
}

float logf(float a1)
{
  MEMORY[0x1F40CC8C0](a1);
  return result;
}

int malloc_type_posix_memalign(void **memptr, size_t alignment, size_t size, malloc_type_id_t type_id)
{
  return MEMORY[0x1F40CCBA0](memptr, alignment, size, type_id);
}

void *__cdecl memchr(void *__s, int __c, size_t __n)
{
  return (void *)MEMORY[0x1F40CCCD8](__s, *(void *)&__c, __n);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x1F40CCCE8](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1F40CCCF0](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1F40CCD10](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x1F40CCD20](__b, *(void *)&__c, __len);
}

void memset_pattern16(void *__b, const void *__pattern16, size_t __len)
{
}

void *__cdecl mmap(void *a1, size_t a2, int a3, int a4, int a5, off_t a6)
{
  return (void *)MEMORY[0x1F40CCE40](a1, a2, *(void *)&a3, *(void *)&a4, *(void *)&a5, a6);
}

int munmap(void *a1, size_t a2)
{
  return MEMORY[0x1F40CCE88](a1, a2);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x1F4181638](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x1F4181648]();
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x1F4181660](a1);
}

{
  MEMORY[0x1F4181668](context);
}

{
  return (void *)MEMORY[0x1F4181670]();
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1F4181678](a1);
}

id objc_begin_catch(void *exc_buf)
{
  return (id)MEMORY[0x1F4181680](exc_buf);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x1F4181688]();
}

void objc_destroyWeak(id *location)
{
}

void objc_end_catch(void)
{
}

void objc_enumerationMutation(id obj)
{
}

void objc_exception_throw(id exception)
{
}

Class objc_getClass(const char *name)
{
  return (Class)MEMORY[0x1F4181728](name);
}

id objc_getProperty(id self, SEL _cmd, ptrdiff_t offset, BOOL atomic)
{
  return (id)MEMORY[0x1F4181748](self, _cmd, offset, atomic);
}

id objc_loadWeakRetained(id *location)
{
  return (id)MEMORY[0x1F4181780](location);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x1F41817A8](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x1F41817B0]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x1F41817B8]();
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x1F41818B0](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x1F41818B8](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1F41818C0](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1F41818C8](a1);
}

id objc_retainBlock(id a1)
{
  return (id)MEMORY[0x1F41818D0](a1);
}

void objc_storeStrong(id *location, id obj)
{
}

id objc_storeWeak(id *location, id obj)
{
  return (id)MEMORY[0x1F4181A18](location, obj);
}

int open(const char *a1, int a2, ...)
{
  return MEMORY[0x1F40CD0E0](a1, *(void *)&a2);
}

int openat_authenticated_np(int a1, const char *a2, int a3, int a4)
{
  return MEMORY[0x1F40CD108](*(void *)&a1, a2, *(void *)&a3, *(void *)&a4);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x1F40CD360](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x1F40CD3B8](oslog, type);
}

uint64_t pc_session_add_metric()
{
  return MEMORY[0x1F4181BA8]();
}

uint64_t pc_session_begin()
{
  return MEMORY[0x1F4181BC0]();
}

uint64_t pc_session_create()
{
  return MEMORY[0x1F4181BD0]();
}

uint64_t pc_session_destroy()
{
  return MEMORY[0x1F4181BD8]();
}

uint64_t pc_session_end()
{
  return MEMORY[0x1F4181BF0]();
}

uint64_t pc_session_get_value()
{
  return MEMORY[0x1F4181C08]();
}

uint64_t pc_session_set_procpid()
{
  return MEMORY[0x1F4181C18]();
}

long double pow(long double __x, long double __y)
{
  MEMORY[0x1F40CD818](__x, __y);
  return result;
}

float powf(float a1, float a2)
{
  MEMORY[0x1F40CD828](a1, a2);
  return result;
}

void *__cdecl pthread_getspecific(pthread_key_t a1)
{
  return (void *)MEMORY[0x1F40CDA20](a1);
}

int pthread_key_create(pthread_key_t *a1, void (__cdecl *a2)(void *))
{
  return MEMORY[0x1F40CDA40](a1, a2);
}

pthread_t pthread_self(void)
{
  return (pthread_t)MEMORY[0x1F40CDB30]();
}

int pthread_setspecific(pthread_key_t a1, const void *a2)
{
  return MEMORY[0x1F40CDB70](a1, a2);
}

int rand(void)
{
  return MEMORY[0x1F40CDC08]();
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x1F40CE080](__str, __size, __format);
}

void srand(unsigned int a1)
{
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x1F40CE158](__s1, __s2);
}

int strerror_r(int __errnum, char *__strerrbuf, size_t __buflen)
{
  return MEMORY[0x1F40CE190](*(void *)&__errnum, __strerrbuf, __buflen);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x1F40CE1C8](__s);
}

double strtod(const char *a1, char **a2)
{
  MEMORY[0x1F40CE260](a1, a2);
  return result;
}

uint64_t strtoll(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x1F40CE2C0](__str, __endptr, *(void *)&__base);
}

unint64_t strtoull(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x1F40CE2F0](__str, __endptr, *(void *)&__base);
}

int8_t u_charType(UChar32 c)
{
  return MEMORY[0x1F417F718](*(void *)&c);
}

UBool u_isWhitespace(UChar32 c)
{
  return MEMORY[0x1F417F7A8](*(void *)&c);
}

UChar32 u_tolower(UChar32 c)
{
  return MEMORY[0x1F417F8A8](*(void *)&c);
}

uint64_t uscript_getScript()
{
  return MEMORY[0x1F41805E0]();
}

vImage_Error vImagePermuteChannels_ARGB8888(const vImage_Buffer *src, const vImage_Buffer *dest, const uint8_t permuteMap[4], vImage_Flags flags)
{
  return MEMORY[0x1F40D2B60](src, dest, permuteMap, *(void *)&flags);
}

vImage_Error vImageScale_ARGB8888(const vImage_Buffer *src, const vImage_Buffer *dest, void *tempBuffer, vImage_Flags flags)
{
  return MEMORY[0x1F40D2CD8](src, dest, tempBuffer, *(void *)&flags);
}