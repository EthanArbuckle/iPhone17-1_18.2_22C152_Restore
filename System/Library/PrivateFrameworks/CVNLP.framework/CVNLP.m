void *sub_1B4BAEDC0(void *a1)
{
  uint64_t v2;

  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0D54FB0;
  v2 = a1[3];
  if (v2)
  {
    MEMORY[0x1BA992990](v2, 0x1000C8052888210);
    a1[3] = 0;
  }
  return a1;
}

uint64_t sub_1B4BAEE24(uint64_t a1, uint64_t a2, _DWORD *a3, unint64_t a4)
{
  *(void *)a1 = &unk_1F0D541C8;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = &unk_1F0D54FB0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  v7 = (uint64_t *)(a1 + 96);
  *(void *)(a1 + 56) = &unk_1F0D54FB0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  sub_1B4BE3D84((void *)(a1 + 96));
  sub_1B4BAEF64(a1, a3, a4, &v9);
  sub_1B4BE3FAC(v7, &v9);
  sub_1B4BE3D8C(&v9);
  return a1;
}

void sub_1B4BAEF14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1B4BE3D8C((uint64_t *)va);
  sub_1B4BE3D8C(v5);
  sub_1B4BAEDC0(v4);
  sub_1B4BAEDC0(v3);
  v7 = *v2;
  *v2 = 0;
  if (v7) {
    sub_1B4BB3474((uint64_t)v2, v7);
  }
  _Unwind_Resume(a1);
}

void *sub_1B4BAEF64@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  v8 = a2;
  unint64_t v9 = a3;
  result = sub_1B4BAF60C(a2, a3, (_DWORD *)(a1 + 88), a4);
  if (!*a4)
  {
    sub_1B4BE3D8C(a4);
    result = sub_1B4BE2088(&v8, 4uLL, a4);
    if (!*a4)
    {
      sub_1B4BE3D8C(a4);
      result = sub_1B4BAF60C(v8, v9, (_DWORD *)(a1 + 92), a4);
      if (!*a4)
      {
        sub_1B4BE3D8C(a4);
        result = sub_1B4BE2088(&v8, 4uLL, a4);
        if (!*a4)
        {
          sub_1B4BE3D8C(a4);
          int v7 = 0;
          result = sub_1B4BAF808(v8, v9, &v7, a4);
          if (!*a4)
          {
            sub_1B4BE3D8C(a4);
            result = sub_1B4BE2088(&v8, 4uLL, a4);
            if (!*a4)
            {
              sub_1B4BE3D8C(a4);
              sub_1B4BAFA04();
            }
          }
        }
      }
    }
  }
  return result;
}

void sub_1B4BAF5CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1B4BAFB0C((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_1B4BAF60C@<X0>(_DWORD *a1@<X0>, unint64_t a2@<X1>, _DWORD *a3@<X2>, void *a4@<X8>)
{
  if (a2 <= 3)
  {
    unsigned int v7 = 13;
    v6 = (void *)sub_1B4BB2204((uint64_t)v8);
    sub_1B4BB34F0(v6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/util.h", 62);
    sub_1B4BB34F0(v8, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_1B4BB34F0(v8, (uint64_t)") [", 3);
    sub_1B4BB34F0(v8, (uint64_t)"string.size() >= sizeof(T)", 26);
    sub_1B4BB34F0(v8, (uint64_t)"] ", 2);
    sub_1B4BAFA7C(&v7, (uint64_t)a4);
    v8[0] = *MEMORY[0x1E4FBA418];
    *(void *)((char *)v8 + *(void *)(v8[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
    v8[1] = MEMORY[0x1E4FBA470] + 16;
    if (v9 < 0) {
      operator delete((void *)v8[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return (void *)MEMORY[0x1BA992920](&v10);
  }
  else
  {
    *a3 = *a1;
    return sub_1B4BE3D84(a4);
  }
}

void sub_1B4BAF7F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_1B4BAF808@<X0>(_DWORD *a1@<X0>, unint64_t a2@<X1>, _DWORD *a3@<X2>, void *a4@<X8>)
{
  if (a2 <= 3)
  {
    unsigned int v7 = 13;
    v6 = (void *)sub_1B4BB2204((uint64_t)v8);
    sub_1B4BB34F0(v6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/util.h", 62);
    sub_1B4BB34F0(v8, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_1B4BB34F0(v8, (uint64_t)") [", 3);
    sub_1B4BB34F0(v8, (uint64_t)"string.size() >= sizeof(T)", 26);
    sub_1B4BB34F0(v8, (uint64_t)"] ", 2);
    sub_1B4BAFA7C(&v7, (uint64_t)a4);
    v8[0] = *MEMORY[0x1E4FBA418];
    *(void *)((char *)v8 + *(void *)(v8[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
    v8[1] = MEMORY[0x1E4FBA470] + 16;
    if (v9 < 0) {
      operator delete((void *)v8[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return (void *)MEMORY[0x1BA992920](&v10);
  }
  else
  {
    *a3 = *a1;
    return sub_1B4BE3D84(a4);
  }
}

void sub_1B4BAF9EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B4BAFA04()
{
}

void sub_1B4BAFA58(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9929C0](v1, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

void sub_1B4BAFA7C(unsigned int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  std::stringbuf::str();
  if ((v7 & 0x80u) == 0) {
    v4 = __p;
  }
  else {
    v4 = (void **)__p[0];
  }
  if ((v7 & 0x80u) == 0) {
    unint64_t v5 = v7;
  }
  else {
    unint64_t v5 = (unint64_t)__p[1];
  }
  sub_1B4BE3EF0(a2, v3, v4, v5);
  if ((char)v7 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1B4BAFAF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1B4BAFB0C(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA418];
  uint64_t v3 = *MEMORY[0x1E4FBA418];
  *(void *)(a1 + 8) = *MEMORY[0x1E4FBA418];
  *(void *)(a1 + 8 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 16) = MEMORY[0x1E4FBA470] + 16;
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*(void **)(a1 + 80));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1BA992920](a1 + 120);
  return a1;
}

void *sub_1B4BAFC14(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 8);
  if (!v1
    || (result = __dynamic_cast(v1, (const struct __class_type_info *)&unk_1F0D53198, (const struct __class_type_info *)&unk_1F0D530E8, 16)) == 0)
  {
    char v7 = 1;
    uint64_t v3 = sub_1B4BB34F0(MEMORY[0x1E4FBA240], (uint64_t)"model_interface.cc", 18);
    sub_1B4BB34F0(v3, (uint64_t)"(", 1);
    v4 = (void *)std::ostream::operator<<();
    unint64_t v5 = sub_1B4BB34F0(v4, (uint64_t)") [", 3);
    v6 = sub_1B4BB34F0(v5, (uint64_t)"(model_proto = dynamic_cast<const ModelProto *>(model_proto_))", 62);
    sub_1B4BB34F0(v6, (uint64_t)"] ", 2);
    sub_1B4BB239C(&v7);
    return 0;
  }
  return result;
}

void sub_1B4BAFCF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void *sub_1B4BAFD0C(void *a1)
{
  *a1 = &unk_1F0D541C8;
  sub_1B4BE3D8C(a1 + 12);
  a1[8] = 0;
  a1[9] = 0;
  a1[7] = &unk_1F0D54FB0;
  uint64_t v2 = a1[10];
  if (v2)
  {
    MEMORY[0x1BA992990](v2, 0x1000C8052888210);
    a1[10] = 0;
  }
  a1[4] = 0;
  a1[5] = 0;
  a1[3] = &unk_1F0D54FB0;
  uint64_t v3 = a1[6];
  if (v3)
  {
    MEMORY[0x1BA992990](v3, 0x1000C8052888210);
    a1[6] = 0;
  }
  v4 = (uint64_t *)a1[2];
  a1[2] = 0;
  if (v4) {
    sub_1B4BB3474((uint64_t)(a1 + 2), v4);
  }
  return a1;
}

const char *sub_1B4BAFDF4(uint64_t a1)
{
  (*(void (**)(void))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8));
  if (v2) {
    return (const char *)(*(uint64_t (**)(void))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8));
  }
  else {
    return "<unk>";
  }
}

const char *sub_1B4BAFE78(uint64_t a1)
{
  (*(void (**)(void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8));
  if (v2) {
    return (const char *)(*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8));
  }
  else {
    return "<s>";
  }
}

const char *sub_1B4BAFEFC(uint64_t a1)
{
  (*(void (**)(void))(**(void **)(a1 + 8) + 48))(*(void *)(a1 + 8));
  if (v2) {
    return (const char *)(*(uint64_t (**)(void))(**(void **)(a1 + 8) + 48))(*(void *)(a1 + 8));
  }
  else {
    return "</s>";
  }
}

const char *sub_1B4BAFF80(uint64_t a1)
{
  (*(void (**)(void))(**(void **)(a1 + 8) + 56))(*(void *)(a1 + 8));
  if (v2) {
    return (const char *)(*(uint64_t (**)(void))(**(void **)(a1 + 8) + 56))(*(void *)(a1 + 8));
  }
  else {
    return "<pad>";
  }
}

uint64_t sub_1B4BB0004(uint64_t a1, unsigned char *a2, uint64_t a3)
{
  unsigned int v7 = 0;
  sub_1B4BB0088(a1 + 56, a2, (int *)&v7, a3, 0);
  uint64_t result = v7;
  if (v7 == -1)
  {
    sub_1B4BB0088(a1 + 24, a2, (int *)&v7, a3, 0);
    uint64_t result = v7;
    if (v7 == -1) {
      return *(unsigned int *)(a1 + 88);
    }
  }
  return result;
}

uint64_t sub_1B4BB0088(uint64_t result, unsigned char *a2, int *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = *(void *)(result + 16);
  unsigned int v6 = *(_DWORD *)(v5 + 4 * a5);
  if (a4)
  {
    while (1)
    {
      int v7 = *a2++;
      a5 ^= (v6 >> 10 << ((v6 >> 6) & 8)) ^ v7;
      unsigned int v6 = *(_DWORD *)(v5 + 4 * a5);
      if ((v6 & 0x800000FF) != v7) {
        break;
      }
      if (!--a4) {
        goto LABEL_9;
      }
    }
  }
  else
  {
    int v8 = *a2;
    if (*a2)
    {
      char v9 = a2 + 1;
      while (1)
      {
        a5 ^= (v6 >> 10 << ((v6 >> 6) & 8)) ^ v8;
        unsigned int v6 = *(_DWORD *)(v5 + 4 * a5);
        if ((v6 & 0x800000FF) != v8) {
          break;
        }
        int v10 = *v9++;
        int v8 = v10;
        if (!v10) {
          goto LABEL_9;
        }
      }
    }
    else
    {
LABEL_9:
      if ((v6 & 0x100) != 0)
      {
        int v11 = *(_DWORD *)(v5 + 4 * (a5 ^ (v6 >> 10 << ((v6 >> 6) & 8)))) & 0x7FFFFFFF;
        goto LABEL_12;
      }
    }
  }
  int v11 = -1;
LABEL_12:
  *a3 = v11;
  return result;
}

uint64_t sub_1B4BB0138@<X0>(uint64_t a1@<X8>)
{
  if ((int)sub_1B4BE1C40() <= 2)
  {
    char v9 = 0;
    uint64_t v2 = sub_1B4BB34F0(MEMORY[0x1E4FBA240], (uint64_t)"model_interface.cc", 18);
    sub_1B4BB34F0(v2, (uint64_t)"(", 1);
    uint64_t v3 = (void *)std::ostream::operator<<();
    v4 = sub_1B4BB34F0(v3, (uint64_t)") ", 2);
    uint64_t v5 = sub_1B4BB34F0(v4, (uint64_t)"LOG(", 4);
    unsigned int v6 = sub_1B4BB34F0(v5, (uint64_t)"ERROR", 5);
    int v7 = sub_1B4BB34F0(v6, (uint64_t)") ", 2);
    sub_1B4BB34F0(v7, (uint64_t)"Not implemented.", 16);
    sub_1B4BB239C(&v9);
  }
  return sub_1B4BE3EF0(a1, 12, "Not implemented.", 16);
}

void sub_1B4BB0210(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

uint64_t sub_1B4BB0224@<X0>(uint64_t a1@<X8>)
{
  if ((int)sub_1B4BE1C40() <= 2)
  {
    char v9 = 0;
    uint64_t v2 = sub_1B4BB34F0(MEMORY[0x1E4FBA240], (uint64_t)"model_interface.cc", 18);
    sub_1B4BB34F0(v2, (uint64_t)"(", 1);
    uint64_t v3 = (void *)std::ostream::operator<<();
    v4 = sub_1B4BB34F0(v3, (uint64_t)") ", 2);
    uint64_t v5 = sub_1B4BB34F0(v4, (uint64_t)"LOG(", 4);
    unsigned int v6 = sub_1B4BB34F0(v5, (uint64_t)"ERROR", 5);
    int v7 = sub_1B4BB34F0(v6, (uint64_t)") ", 2);
    sub_1B4BB34F0(v7, (uint64_t)"Not implemented.", 16);
    sub_1B4BB239C(&v9);
  }
  return sub_1B4BE3EF0(a1, 12, "Not implemented.", 16);
}

void sub_1B4BB02FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void sub_1B4BB0310(uint64_t a1)
{
  v51 = 0;
  uint64_t v52 = 0;
  uint64_t v49 = 0;
  v50 = &v51;
  v47 = &v48;
  v48 = 0;
  *(_DWORD *)(a1 + 88) = -1;
  v46[0] = 0;
  v46[1] = 0;
  v45 = (uint64_t *)v46;
  LOBYTE(v53) = 0;
  sub_1B4BB391C(&__p, 0x100uLL, (unsigned __int8 *)&v53);
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    uint64_t v3 = v2 - 16;
  }
  else {
    uint64_t v3 = 0;
  }
  if (*(int *)(v3 + 64) < 1)
  {
LABEL_38:
    if (*(_DWORD *)(a1 + 88) == -1)
    {
      sub_1B4BE3EF0(&v53, 13, "unk is not defined.", 19);
      sub_1B4BE3FAC((uint64_t *)(a1 + 96), &v53);
    }
    else
    {
      v25 = *(unsigned char **)(v3 + 80);
      if (!v25) {
        v25 = &unk_1E9D40760;
      }
      if (!v25[248]
        || (*(void *)&long long v53 = __p,
            DWORD2(v53) = 0,
            sub_1B4BB4048((uint64_t)&v53, v44, (uint64_t)&v41),
            v41.__r_.__value_.__l.__data_ == (char *)__p + 8 * (v44 >> 6))
        && LODWORD(v41.__r_.__value_.__r.__words[1]) == (v44 & 0x3F))
      {
        if (!v52
          || (sub_1B4BB0BE0(a1 + 24, &v50, (uint64_t)&v53),
              sub_1B4BE3FAC((uint64_t *)(a1 + 96), &v53),
              sub_1B4BE3D8C((uint64_t *)&v53),
              (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)a1 + 16))(&v53, a1),
              uint64_t v26 = v53,
              sub_1B4BE3D8C((uint64_t *)&v53),
              !v26))
        {
          if (!v49
            || (sub_1B4BB0BE0(a1 + 56, &v47, (uint64_t)&v53),
                sub_1B4BE3FAC((uint64_t *)(a1 + 96), &v53),
                sub_1B4BE3D8C((uint64_t *)&v53),
                (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)a1 + 16))(&v53, a1),
                uint64_t v27 = v53,
                sub_1B4BE3D8C((uint64_t *)&v53),
                !v27))
          {
            sub_1B4BB10C4();
          }
        }
        goto LABEL_69;
      }
      sub_1B4BE3FAC((uint64_t *)(a1 + 96), &v53);
    }
LABEL_68:
    sub_1B4BE3D8C((uint64_t *)&v53);
    goto LABEL_69;
  }
  int v4 = 0;
  while (1)
  {
    uint64_t v5 = sub_1B4BB2478(v3 + 56, v4);
    uint64_t v6 = v5;
    unint64_t v7 = *(void *)(v5 + 48) & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v8 = *(unsigned __int8 *)(v7 + 23);
    if (*(char *)(v7 + 23) < 0)
    {
      if (!*(void *)(v7 + 8))
      {
LABEL_50:
        sub_1B4BE3EF0(&v53, 13, "piece must not be empty.", 24);
        sub_1B4BE3FAC((uint64_t *)(a1 + 96), &v53);
        goto LABEL_68;
      }
    }
    else if (!*(unsigned char *)(v7 + 23))
    {
      goto LABEL_50;
    }
    unsigned int v9 = *(_DWORD *)(v5 + 60);
    BOOL v10 = v9 > 5;
    int v11 = (1 << v9) & 0x32;
    BOOL v12 = v10 || v11 == 0;
    v13 = (uint64_t **)(v12 ? &v47 : &v50);
    if ((v8 & 0x80) != 0)
    {
      unint64_t v14 = *(void *)v7;
      uint64_t v8 = *(void *)(v7 + 8);
    }
    else
    {
      unint64_t v14 = v7;
    }
    *(void *)&long long v53 = v14;
    *((void *)&v53 + 1) = v8;
    LODWORD(v54) = v4;
    sub_1B4BB3BD4(v13, (uint64_t)&v53, (uint64_t)&v53);
    if ((v15 & 1) == 0) {
      break;
    }
    int v16 = *(_DWORD *)(v6 + 60);
    if (v16 == 4)
    {
      unint64_t v17 = *(void *)(v6 + 48) & 0xFFFFFFFFFFFFFFFELL;
      if (*(char *)(v17 + 23) < 0)
      {
        unint64_t v19 = *(void *)v17;
        uint64_t v18 = *(void *)(v17 + 8);
      }
      else
      {
        uint64_t v18 = *(unsigned __int8 *)(v17 + 23);
        unint64_t v19 = *(void *)(v6 + 48) & 0xFFFFFFFFFFFFFFFELL;
      }
      *(void *)&long long v53 = v19;
      *((void *)&v53 + 1) = v18;
      sub_1B4BB3FC4(&v45, (uint64_t)&v53, &v53);
      int v16 = *(_DWORD *)(v6 + 60);
    }
    if (v16 == 6)
    {
      v20 = *(unsigned char **)(v3 + 80);
      if (!v20) {
        v20 = &unk_1E9D40760;
      }
      if (!v20[248])
      {
        std::operator+<char>();
        long long v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
        int64_t v54 = v35->__r_.__value_.__r.__words[2];
        long long v53 = v36;
        v35->__r_.__value_.__l.__size_ = 0;
        v35->__r_.__value_.__r.__words[2] = 0;
        v35->__r_.__value_.__r.__words[0] = 0;
        if (v54 >= 0) {
          v37 = (const char *)&v53;
        }
        else {
          v37 = (const char *)v53;
        }
LABEL_78:
        size_t v40 = strlen(v37);
        sub_1B4BE3EF0(&v42, 13, v37, v40);
        sub_1B4BE3FAC((uint64_t *)(a1 + 96), &v42);
        sub_1B4BE3D8C(&v42);
        if (SHIBYTE(v54) < 0) {
          operator delete((void *)v53);
        }
        if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
        {
          v34 = (void *)v41.__r_.__value_.__r.__words[0];
          goto LABEL_82;
        }
        goto LABEL_69;
      }
      unint64_t v21 = *(void *)(v6 + 48) & 0xFFFFFFFFFFFFFFFELL;
      if (*(char *)(v21 + 23) < 0)
      {
        v23 = *(void **)v21;
        size_t v22 = *(void *)(v21 + 8);
      }
      else
      {
        size_t v22 = *(unsigned __int8 *)(v21 + 23);
        v23 = (void *)(*(void *)(v6 + 48) & 0xFFFFFFFFFFFFFFFELL);
      }
      unsigned int v24 = sub_1B4BB0A90(v23, v22);
      if ((v24 & 0x80000000) != 0)
      {
        std::operator+<char>();
        v38 = std::string::append(&v41, " is invalid.");
        long long v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
        int64_t v54 = v38->__r_.__value_.__r.__words[2];
        long long v53 = v39;
        v38->__r_.__value_.__l.__size_ = 0;
        v38->__r_.__value_.__r.__words[2] = 0;
        v38->__r_.__value_.__r.__words[0] = 0;
        if (v54 >= 0) {
          v37 = (const char *)&v53;
        }
        else {
          v37 = (const char *)v53;
        }
        goto LABEL_78;
      }
      *(void *)((char *)__p + (((unint64_t)v24 >> 3) & 0x1FFFFFF8)) |= 1 << v24;
    }
    else if (v16 == 2)
    {
      if ((*(_DWORD *)(a1 + 88) & 0x80000000) == 0)
      {
        sub_1B4BE3EF0(&v53, 13, "unk is already defined.", 23);
        sub_1B4BE3FAC((uint64_t *)(a1 + 96), &v53);
        goto LABEL_68;
      }
      *(_DWORD *)(a1 + 88) = v4;
    }
    if (++v4 >= *(_DWORD *)(v3 + 64)) {
      goto LABEL_38;
    }
  }
  unint64_t v28 = *(void *)(v6 + 48) & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v28 + 23) >= 0) {
    size_t v29 = *(unsigned __int8 *)(v28 + 23);
  }
  else {
    size_t v29 = *(void *)(v28 + 8);
  }
  v30 = &v53;
  sub_1B4BB3F3C((uint64_t)&v53, v29 + 20);
  if (v54 < 0) {
    v30 = (long long *)v53;
  }
  if (v29)
  {
    if (*(char *)(v28 + 23) >= 0) {
      v31 = (const void *)v28;
    }
    else {
      v31 = *(const void **)v28;
    }
    memmove(v30, v31, v29);
  }
  strcpy((char *)v30 + v29, " is already defined.");
  if (v54 >= 0) {
    v32 = (const char *)&v53;
  }
  else {
    v32 = (const char *)v53;
  }
  size_t v33 = strlen(v32);
  sub_1B4BE3EF0(&v41, 13, v32, v33);
  sub_1B4BE3FAC((uint64_t *)(a1 + 96), &v41);
  sub_1B4BE3D8C((uint64_t *)&v41);
  if (SHIBYTE(v54) < 0)
  {
    v34 = (void *)v53;
LABEL_82:
    operator delete(v34);
  }
LABEL_69:
  if (__p) {
    operator delete(__p);
  }
  sub_1B4BB38C8((uint64_t)&v45, v46[0]);
  sub_1B4BB38C8((uint64_t)&v47, v48);
  sub_1B4BB38C8((uint64_t)&v50, v51);
}

void sub_1B4BB0978(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, char a19, void *a20,uint64_t a21,char a22,void *a23,uint64_t a24,char a25,void *a26)
{
  sub_1B4BE3D8C(&a15);
  if (*(char *)(v26 - 89) < 0) {
    operator delete(*(void **)(v26 - 112));
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a16) {
    operator delete(a16);
  }
  sub_1B4BB38C8((uint64_t)&a19, a20);
  sub_1B4BB38C8((uint64_t)&a22, a23);
  sub_1B4BB38C8((uint64_t)&a25, a26);
  _Unwind_Resume(a1);
}

uint64_t sub_1B4BB0A90(void *__src, size_t __len)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1E9D40668, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1E9D40668))
  {
    sub_1B4BB19D8();
  }
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    sub_1B4BB33D8();
  }
  int v4 = (void *)qword_1E9D40660;
  if (__len >= 0x17)
  {
    size_t v6 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v6 = __len | 7;
    }
    size_t v7 = v6 + 1;
    uint64_t v5 = (void **)operator new(v6 + 1);
    __dst[1] = (void *)__len;
    unint64_t v12 = v7 | 0x8000000000000000;
    __dst[0] = v5;
    goto LABEL_9;
  }
  HIBYTE(v12) = __len;
  uint64_t v5 = __dst;
  if (__len) {
LABEL_9:
  }
    memmove(v5, __src, __len);
  *((unsigned char *)v5 + __len) = 0;
  uint64_t v8 = sub_1B4BB4178(v4, (unsigned __int8 *)__dst);
  unsigned int v9 = v8;
  if (SHIBYTE(v12) < 0)
  {
    operator delete(__dst[0]);
    if (v9) {
      return v9[40];
    }
  }
  else if (v8)
  {
    return v9[40];
  }
  return 0xFFFFFFFFLL;
}

void sub_1B4BB0BB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

uint64_t sub_1B4BB0BE0@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  if (a2[2])
  {
    v34 = 0;
    v35 = 0;
    long long v36 = 0;
    __p = 0;
    v32 = 0;
    size_t v33 = 0;
    int v4 = a2 + 1;
    uint64_t v3 = (void *)*a2;
    while (1)
    {
      uint64_t v5 = v3[4];
      size_t v6 = v35;
      if (v35 >= v36)
      {
        uint64_t v8 = (v35 - (unsigned char *)v34) >> 3;
        if ((unint64_t)(v8 + 1) >> 61) {
          sub_1B4BB3244();
        }
        unint64_t v9 = (v36 - (unsigned char *)v34) >> 2;
        if (v9 <= v8 + 1) {
          unint64_t v9 = v8 + 1;
        }
        if ((unint64_t)(v36 - (unsigned char *)v34) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v10 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v10 = v9;
        }
        if (v10) {
          int v11 = (char *)sub_1B4BB3A38((uint64_t)&v36, v10);
        }
        else {
          int v11 = 0;
        }
        unint64_t v12 = &v11[8 * v8];
        *(void *)unint64_t v12 = v5;
        size_t v7 = v12 + 8;
        unint64_t v14 = (char *)v34;
        v13 = v35;
        if (v35 != v34)
        {
          do
          {
            uint64_t v15 = *((void *)v13 - 1);
            v13 -= 8;
            *((void *)v12 - 1) = v15;
            v12 -= 8;
          }
          while (v13 != v14);
          v13 = (char *)v34;
        }
        v34 = v12;
        v35 = v7;
        long long v36 = &v11[8 * v10];
        if (v13) {
          operator delete(v13);
        }
      }
      else
      {
        *(void *)v35 = v5;
        size_t v7 = v6 + 8;
      }
      v35 = v7;
      int v16 = v32;
      if (v32 >= v33)
      {
        uint64_t v18 = __p;
        uint64_t v19 = (v32 - __p) >> 2;
        unint64_t v20 = v19 + 1;
        if ((unint64_t)(v19 + 1) >> 62) {
          sub_1B4BB3244();
        }
        uint64_t v21 = v33 - __p;
        if ((v33 - __p) >> 1 > v20) {
          unint64_t v20 = v21 >> 1;
        }
        if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v22 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v22 = v20;
        }
        if (v22)
        {
          v23 = (char *)sub_1B4BB427C((uint64_t)&v33, v22);
          uint64_t v18 = __p;
          int v16 = v32;
        }
        else
        {
          v23 = 0;
        }
        unsigned int v24 = &v23[4 * v19];
        *(_DWORD *)unsigned int v24 = *((_DWORD *)v3 + 12);
        unint64_t v17 = v24 + 4;
        while (v16 != v18)
        {
          int v25 = *((_DWORD *)v16 - 1);
          v16 -= 4;
          *((_DWORD *)v24 - 1) = v25;
          v24 -= 4;
        }
        __p = v24;
        size_t v33 = &v23[4 * v22];
        if (v18) {
          operator delete(v18);
        }
      }
      else
      {
        *(_DWORD *)v32 = *((_DWORD *)v3 + 12);
        unint64_t v17 = v32 + 4;
      }
      v32 = v17;
      uint64_t v26 = (void *)v3[1];
      if (v26)
      {
        do
        {
          uint64_t v27 = v26;
          uint64_t v26 = (void *)*v26;
        }
        while (v26);
      }
      else
      {
        do
        {
          uint64_t v27 = (void *)v3[2];
          BOOL v28 = *v27 == (void)v3;
          uint64_t v3 = v27;
        }
        while (!v28);
      }
      uint64_t v3 = v27;
      if (v27 == v4) {
        sub_1B4BB1AC0(a1, (v35 - (unsigned char *)v34) >> 3, (unint64_t)v34, 0, (unint64_t)__p, 0);
      }
    }
  }
  return sub_1B4BE3EF0(a3, 13, "no pieces are loaded.", 21);
}

void sub_1B4BB106C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21)
{
  if (__p) {
    operator delete(__p);
  }
  if (a17) {
    operator delete(a17);
  }
  if (a20) {
    operator delete(a20);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B4BB10C4()
{
}

void sub_1B4BB1118(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9929C0](v1, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

void sub_1B4BB113C(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  memset(&v32, 0, sizeof(v32));
  std::string::resize(&v32, 4uLL, 0);
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v4 = &v32;
  }
  else {
    int v4 = (std::string *)v32.__r_.__value_.__r.__words[0];
  }
  LODWORD(v4->__r_.__value_.__l.__data_) = *(_DWORD *)(a1 + 88);
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v5 = &v32;
  }
  else {
    uint64_t v5 = (std::string *)v32.__r_.__value_.__r.__words[0];
  }
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v32.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v32.__r_.__value_.__l.__size_;
  }
  std::string::append(a2, (const std::string::value_type *)v5, size);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v32.__r_.__value_.__l.__data_);
  }
  memset(&v32, 0, sizeof(v32));
  std::string::resize(&v32, 4uLL, 0);
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v7 = &v32;
  }
  else {
    size_t v7 = (std::string *)v32.__r_.__value_.__r.__words[0];
  }
  LODWORD(v7->__r_.__value_.__l.__data_) = *(_DWORD *)(a1 + 92);
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v8 = &v32;
  }
  else {
    uint64_t v8 = (std::string *)v32.__r_.__value_.__r.__words[0];
  }
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v9 = HIBYTE(v32.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v9 = v32.__r_.__value_.__l.__size_;
  }
  std::string::append(a2, (const std::string::value_type *)v8, v9);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v32.__r_.__value_.__l.__data_);
  }
  sub_1B4BB8CD8(*(void *)(a1 + 16), &v32);
  int v10 = HIBYTE(v32.__r_.__value_.__r.__words[2]);
  int v11 = v32.__r_.__value_.__r.__words[1];
  memset(&__p, 0, sizeof(__p));
  std::string::resize(&__p, 4uLL, 0);
  if ((v10 & 0x80u) == 0) {
    int v12 = v10;
  }
  else {
    int v12 = v11;
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  LODWORD(p_p->__r_.__value_.__l.__data_) = v12;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v14 = &__p;
  }
  else {
    unint64_t v14 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v15 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v15 = __p.__r_.__value_.__l.__size_;
  }
  std::string::append(a2, (const std::string::value_type *)v14, v15);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v16 = &v32;
  }
  else {
    int v16 = (std::string *)v32.__r_.__value_.__r.__words[0];
  }
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v17 = HIBYTE(v32.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v17 = v32.__r_.__value_.__l.__size_;
  }
  std::string::append(a2, (const std::string::value_type *)v16, v17);
  sub_1B4BE2024(a2);
  uint64_t v19 = *(void *)(a1 + 32);
  uint64_t v18 = *(const std::string::value_type **)(a1 + 40);
  memset(&__p, 0, sizeof(__p));
  std::string::resize(&__p, 4uLL, 0);
  std::string::size_type v20 = 4 * v19;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v21 = &__p;
  }
  else {
    uint64_t v21 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  LODWORD(v21->__r_.__value_.__l.__data_) = v20;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v22 = &__p;
  }
  else {
    unint64_t v22 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v23 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v23 = __p.__r_.__value_.__l.__size_;
  }
  std::string::append(a2, (const std::string::value_type *)v22, v23);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::append(a2, v18, v20);
  sub_1B4BE2024(a2);
  uint64_t v26 = a1 + 64;
  uint64_t v24 = *(void *)(a1 + 64);
  int v25 = *(const std::string::value_type **)(v26 + 8);
  memset(&__p, 0, sizeof(__p));
  std::string::resize(&__p, 4uLL, 0);
  std::string::size_type v27 = 4 * v24;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    BOOL v28 = &__p;
  }
  else {
    BOOL v28 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  LODWORD(v28->__r_.__value_.__l.__data_) = v27;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v29 = &__p;
  }
  else {
    size_t v29 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v30 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v30 = __p.__r_.__value_.__l.__size_;
  }
  std::string::append(a2, (const std::string::value_type *)v29, v30);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::append(a2, v25, v27);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v32.__r_.__value_.__l.__data_);
  }
}

void sub_1B4BB1404(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v20 + 23) < 0) {
    operator delete(*(void **)v20);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B4BB147C(unsigned __int8 *__s1@<X0>, uint64_t a2@<X1>, char a3@<W2>, int a4@<W3>, unsigned __int8 ***a5@<X8>)
{
  size_t v6 = __s1;
  uint64_t v8 = &__s1[a2];
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  if ((a3 & 1) == 0)
  {
    if (a2 < 1) {
      return;
    }
    size_t v40 = 0;
    int v41 = 0;
    uint64_t v42 = a5 + 2;
    v43 = __s1;
    while (1)
    {
      int v44 = asc_1B4C934DB[(unint64_t)*v43 >> 4];
      if ((int)v8 - (int)v43 < v44) {
        int v44 = v8 - v43;
      }
      uint64_t v45 = v44;
      if (v44 == 3)
      {
        int v46 = memcmp(v43, "▁", 3uLL);
        int v47 = v46 == 0;
        if (v43 == v6) {
          goto LABEL_62;
        }
        if ((v41 & a4 & 1) == 0 && !v46)
        {
          int v47 = 1;
LABEL_62:
          if ((unint64_t)v40 >= *v42)
          {
            uint64_t v48 = ((char *)v40 - (char *)*a5) >> 4;
            if ((unint64_t)(v48 + 1) >> 60) {
              sub_1B4BB3244();
            }
            uint64_t v49 = *v42 - (void)*a5;
            uint64_t v50 = v49 >> 3;
            if (v49 >> 3 <= (unint64_t)(v48 + 1)) {
              uint64_t v50 = v48 + 1;
            }
            if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v51 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v51 = v50;
            }
            uint64_t v52 = (char *)sub_1B4BB4140((uint64_t)(a5 + 2), v51);
            int64_t v54 = (unsigned __int8 **)&v52[16 * v48];
            *int64_t v54 = v43;
            v54[1] = 0;
            v56 = (char *)*a5;
            v55 = (char *)a5[1];
            v57 = v54;
            if (v55 != (char *)*a5)
            {
              do
              {
                *((_OWORD *)v57 - 1) = *((_OWORD *)v55 - 1);
                v57 -= 2;
                v55 -= 16;
              }
              while (v55 != v56);
              v55 = (char *)*a5;
            }
            size_t v40 = v54 + 2;
            *a5 = v57;
            a5[1] = v54 + 2;
            a5[2] = (unsigned __int8 **)&v52[16 * v53];
            if (v55) {
              operator delete(v55);
            }
          }
          else
          {
            *size_t v40 = v43;
            v40[1] = 0;
            v40 += 2;
          }
          a5[1] = v40;
          goto LABEL_76;
        }
        if (v41)
        {
          int v47 = v41 & (v46 == 0);
          goto LABEL_76;
        }
      }
      else if (v43 == v6)
      {
        int v47 = 0;
        goto LABEL_62;
      }
      int v47 = 0;
LABEL_76:
      *(v40 - 1) += v45;
      v43 += v45;
      int v41 = v47;
      if (v43 >= v8) {
        return;
      }
    }
  }
  if (a2 >= 1)
  {
    std::string::size_type v9 = a5 + 2;
    int v10 = sub_1B4BB4140((uint64_t)(a5 + 2), 1uLL);
    int v12 = (unsigned __int8 **)&v10[2 * v11];
    *int v10 = v6;
    v10[1] = 0;
    v13 = (unsigned __int8 **)(v10 + 2);
    std::string::size_type v15 = (char *)*a5;
    unint64_t v14 = (char *)a5[1];
    if (v14 != (char *)*a5)
    {
      do
      {
        *((_OWORD *)v10 - 1) = *((_OWORD *)v14 - 1);
        v10 -= 2;
        v14 -= 16;
      }
      while (v14 != v15);
      unint64_t v14 = (char *)*a5;
    }
    *a5 = (unsigned __int8 **)v10;
    a5[1] = v13;
    a5[2] = v12;
    if (v14) {
      operator delete(v14);
    }
    BOOL v16 = 0;
    a5[1] = v13;
    do
    {
      int v17 = asc_1B4C934DB[(unint64_t)*v6 >> 4];
      if ((int)v8 - (int)v6 < v17) {
        int v17 = v8 - v6;
      }
      uint64_t v18 = v17;
      if (v17 == 3)
      {
        BOOL v19 = memcmp(v6, "▁", 3uLL) == 0;
        if (v19) {
          goto LABEL_18;
        }
      }
      else
      {
        BOOL v19 = 0;
      }
      if ((v16 & a4) != 0)
      {
        if ((unint64_t)v13 >= *v9)
        {
          uint64_t v20 = ((char *)v13 - (char *)*a5) >> 4;
          if ((unint64_t)(v20 + 1) >> 60) {
            sub_1B4BB3244();
          }
          uint64_t v21 = *v9 - (void)*a5;
          uint64_t v22 = v21 >> 3;
          if (v21 >> 3 <= (unint64_t)(v20 + 1)) {
            uint64_t v22 = v20 + 1;
          }
          if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v23 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v23 = v22;
          }
          uint64_t v24 = (char *)sub_1B4BB4140((uint64_t)(a5 + 2), v23);
          uint64_t v26 = (unsigned __int8 **)&v24[16 * v20];
          *uint64_t v26 = v6;
          v26[1] = 0;
          BOOL v28 = (char *)*a5;
          std::string::size_type v27 = (char *)a5[1];
          size_t v29 = v26;
          if (v27 != (char *)*a5)
          {
            do
            {
              *((_OWORD *)v29 - 1) = *((_OWORD *)v27 - 1);
              v29 -= 2;
              v27 -= 16;
            }
            while (v27 != v28);
            std::string::size_type v27 = (char *)*a5;
          }
          v13 = v26 + 2;
          *a5 = v29;
          a5[1] = v26 + 2;
          a5[2] = (unsigned __int8 **)&v24[16 * v25];
          if (v27) {
            operator delete(v27);
          }
        }
        else
        {
          char *v13 = v6;
          v13[1] = 0;
          v13 += 2;
        }
        BOOL v16 = 0;
        a5[1] = v13;
        goto LABEL_31;
      }
LABEL_18:
      BOOL v16 = v19;
LABEL_31:
      *(v13 - 1) += v18;
      v6 += v18;
      if (v6 < v8 && v19 && (a4 & 1) == 0)
      {
        if ((unint64_t)v13 >= *v9)
        {
          uint64_t v30 = ((char *)v13 - (char *)*a5) >> 4;
          if ((unint64_t)(v30 + 1) >> 60) {
            sub_1B4BB3244();
          }
          uint64_t v31 = *v9 - (void)*a5;
          uint64_t v32 = v31 >> 3;
          if (v31 >> 3 <= (unint64_t)(v30 + 1)) {
            uint64_t v32 = v30 + 1;
          }
          if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v33 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v33 = v32;
          }
          v34 = (char *)sub_1B4BB4140((uint64_t)(a5 + 2), v33);
          long long v36 = (unsigned __int8 **)&v34[16 * v30];
          *long long v36 = v6;
          v36[1] = 0;
          v38 = (char *)*a5;
          v37 = (char *)a5[1];
          long long v39 = v36;
          if (v37 != (char *)*a5)
          {
            do
            {
              *((_OWORD *)v39 - 1) = *((_OWORD *)v37 - 1);
              v39 -= 2;
              v37 -= 16;
            }
            while (v37 != v38);
            v37 = (char *)*a5;
          }
          v13 = v36 + 2;
          *a5 = v39;
          a5[1] = v36 + 2;
          a5[2] = (unsigned __int8 **)&v34[16 * v35];
          if (v37) {
            operator delete(v37);
          }
        }
        else
        {
          char *v13 = v6;
          v13[1] = 0;
          v13 += 2;
        }
        a5[1] = v13;
      }
    }
    while (v6 < v8);
  }
}

void sub_1B4BB18C4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1B4BB18F8@<X0>(unsigned __int8 a1@<W0>, uint64_t a2@<X8>)
{
  unsigned __int8 v3 = a1;
  return sub_1B4BB1928("<0x%02X>", &v3, a2);
}

uint64_t sub_1B4BB1928@<X0>(char *__format@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  int v6 = snprintf(0, 0, __format, *a2);
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  std::string::resize((std::string *)a3, v6, 0);
  uint64_t v7 = *(unsigned __int8 *)(a3 + 23);
  if ((v7 & 0x80u) == 0) {
    uint64_t v8 = (char *)a3;
  }
  else {
    uint64_t v8 = *(char **)a3;
  }
  if ((v7 & 0x80u) != 0) {
    uint64_t v7 = *(void *)(a3 + 8);
  }
  return snprintf(v8, v7 + 1, __format, *a2);
}

void sub_1B4BB19BC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B4BB19D8()
{
}

void sub_1B4BB1AA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B4BB1AC0(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, void (*a6)(unint64_t, uint64_t))
{
  v12[0] = a2;
  v12[1] = a3;
  v12[2] = a4;
  v12[3] = a5;
  int v6 = a6;
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  int v11 = 0;
  sub_1B4BB42B4(&v6, v12);
}

void sub_1B4BB1BD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1B4BB1BEC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B4BE3FA8(a2, a1 + 96);
}

uint64_t sub_1B4BB1BF8(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t sub_1B4BB1C00@<X0>(void *a1@<X8>)
{
  uint64_t result = sub_1B4BE1C40();
  if ((int)result <= 2)
  {
    char v9 = 0;
    unsigned __int8 v3 = sub_1B4BB34F0(MEMORY[0x1E4FBA240], (uint64_t)"model_interface.h", 17);
    sub_1B4BB34F0(v3, (uint64_t)"(", 1);
    int v4 = (void *)std::ostream::operator<<();
    uint64_t v5 = sub_1B4BB34F0(v4, (uint64_t)") ", 2);
    int v6 = sub_1B4BB34F0(v5, (uint64_t)"LOG(", 4);
    long long v7 = sub_1B4BB34F0(v6, (uint64_t)"ERROR", 5);
    long long v8 = sub_1B4BB34F0(v7, (uint64_t)") ", 2);
    sub_1B4BB34F0(v8, (uint64_t)"Not implemented.", 16);
    uint64_t result = (uint64_t)sub_1B4BB239C(&v9);
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  return result;
}

void sub_1B4BB1CC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

uint64_t sub_1B4BB1CDC@<X0>(void *a1@<X8>)
{
  uint64_t result = sub_1B4BE1C40();
  if ((int)result <= 2)
  {
    char v9 = 0;
    unsigned __int8 v3 = sub_1B4BB34F0(MEMORY[0x1E4FBA240], (uint64_t)"model_interface.h", 17);
    sub_1B4BB34F0(v3, (uint64_t)"(", 1);
    int v4 = (void *)std::ostream::operator<<();
    uint64_t v5 = sub_1B4BB34F0(v4, (uint64_t)") ", 2);
    int v6 = sub_1B4BB34F0(v5, (uint64_t)"LOG(", 4);
    long long v7 = sub_1B4BB34F0(v6, (uint64_t)"ERROR", 5);
    long long v8 = sub_1B4BB34F0(v7, (uint64_t)") ", 2);
    sub_1B4BB34F0(v8, (uint64_t)"Not implemented.", 16);
    uint64_t result = (uint64_t)sub_1B4BB239C(&v9);
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  return result;
}

void sub_1B4BB1DA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void sub_1B4BB1DB8(void *a1@<X8>)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if ((int)sub_1B4BE1C40() <= 2)
  {
    LOBYTE(__p) = 0;
    uint64_t v2 = sub_1B4BB34F0(MEMORY[0x1E4FBA240], (uint64_t)"model_interface.h", 17);
    sub_1B4BB34F0(v2, (uint64_t)"(", 1);
    unsigned __int8 v3 = (void *)std::ostream::operator<<();
    int v4 = sub_1B4BB34F0(v3, (uint64_t)") ", 2);
    uint64_t v5 = sub_1B4BB34F0(v4, (uint64_t)"LOG(", 4);
    int v6 = sub_1B4BB34F0(v5, (uint64_t)"ERROR", 5);
    long long v7 = sub_1B4BB34F0(v6, (uint64_t)") ", 2);
    sub_1B4BB34F0(v7, (uint64_t)"Not implemented.", 16);
    sub_1B4BB239C(&__p);
  }
  std::string __p = 0;
  long long v10 = 0;
  int v12 = 0;
  uint64_t v11 = 0;
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  long long v8 = (char *)operator new(0x20uLL);
  *a1 = v8;
  a1[1] = v8;
  a1[2] = v8 + 32;
  a1[1] = sub_1B4BB30A8((uint64_t)(a1 + 2), (uint64_t)&__p, (uint64_t)&v13, (uint64_t)v8);
  if (__p)
  {
    long long v10 = __p;
    operator delete(__p);
  }
}

void sub_1B4BB1F04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, uint64_t a11, void *__p, uint64_t a13)
{
  uint64_t v15 = v14;
  *(void *)(v13 + 8) = v15;
  sub_1B4BB332C(&a10);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

double sub_1B4BB1F48()
{
  if ((int)sub_1B4BE1C40() <= 2)
  {
    char v7 = 0;
    v0 = sub_1B4BB34F0(MEMORY[0x1E4FBA240], (uint64_t)"model_interface.h", 17);
    sub_1B4BB34F0(v0, (uint64_t)"(", 1);
    uint64_t v1 = (void *)std::ostream::operator<<();
    uint64_t v2 = sub_1B4BB34F0(v1, (uint64_t)") ", 2);
    unsigned __int8 v3 = sub_1B4BB34F0(v2, (uint64_t)"LOG(", 4);
    int v4 = sub_1B4BB34F0(v3, (uint64_t)"ERROR", 5);
    uint64_t v5 = sub_1B4BB34F0(v4, (uint64_t)") ", 2);
    sub_1B4BB34F0(v5, (uint64_t)"Not implemented.", 16);
    sub_1B4BB239C(&v7);
  }
  return 0.0;
}

void sub_1B4BB2008(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

uint64_t sub_1B4BB201C()
{
  return 0;
}

uint64_t sub_1B4BB2024()
{
  return 0;
}

uint64_t sub_1B4BB202C()
{
  return 0;
}

uint64_t sub_1B4BB2034()
{
  return 0;
}

uint64_t sub_1B4BB203C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 88))();
}

uint64_t sub_1B4BB2064(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 8);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 16))();
  }
  return result;
}

uint64_t sub_1B4BB2094(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 96))();
}

uint64_t sub_1B4BB20BC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 112))();
}

uint64_t sub_1B4BB20E4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 120))();
}

uint64_t sub_1B4BB210C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 128))();
}

uint64_t sub_1B4BB2134(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 136))();
}

uint64_t sub_1B4BB215C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 144))();
}

uint64_t sub_1B4BB2184(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 8);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 64))();
  }
  return result;
}

BOOL sub_1B4BB21B4(int a1, void *__s1, size_t a3, void *__s2, uint64_t a5)
{
  return a3 == a5 && memcmp(__s1, __s2, a3) == 0;
}

void sub_1B4BB21F0(void *a1)
{
}

uint64_t sub_1B4BB2204(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA498] + 64;
  *(void *)(a1 + 112) = MEMORY[0x1E4FBA498] + 64;
  uint64_t v3 = *(void *)(MEMORY[0x1E4FBA418] + 16);
  uint64_t v4 = *(void *)(MEMORY[0x1E4FBA418] + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + *(void *)(v4 - 24)) = v3;
  uint64_t v5 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v5, (void *)(a1 + 8));
  uint64_t v6 = MEMORY[0x1E4FBA498] + 24;
  v5[1].__vftable = 0;
  v5[1].__fmtflags_ = -1;
  *(void *)a1 = v6;
  *(void *)(a1 + 112) = v2;
  std::streambuf::basic_streambuf();
  *(void *)(a1 + 8) = MEMORY[0x1E4FBA470] + 16;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 16;
  return a1;
}

void sub_1B4BB2374(_Unwind_Exception *a1)
{
  std::ostream::~ostream();
  MEMORY[0x1BA992920](v1);
  _Unwind_Resume(a1);
}

unsigned char *sub_1B4BB239C(unsigned char *a1)
{
  std::ios_base::getloc((const std::ios_base *)(MEMORY[0x1E4FBA240] + *(void *)(*MEMORY[0x1E4FBA240] - 24)));
  uint64_t v2 = std::locale::use_facet(&v4, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v2->__vftable[2].~facet_0)(v2, 10);
  std::locale::~locale(&v4);
  std::ostream::put();
  std::ostream::flush();
  if (*a1) {
    sub_1B4BE3C34();
  }
  return a1;
}

void sub_1B4BB245C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

uint64_t sub_1B4BB2478(uint64_t a1, int a2)
{
  if (a2 < 0)
  {
    sub_1B4BE6194((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1705);
    std::locale v4 = sub_1B4BE61AC(v8, "CHECK failed: (index) >= (0): ");
    sub_1B4BE62E8((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_1B4BE62F0((uint64_t)v8);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    sub_1B4BE6194((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1706);
    uint64_t v5 = sub_1B4BE61AC(v8, "CHECK failed: (index) < (current_size_): ");
    sub_1B4BE62E8((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_1B4BE62F0((uint64_t)v8);
  }
  return *(void *)(*(void *)(a1 + 16) + 8 * a2 + 8);
}

void sub_1B4BB2538(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1B4BE62F0((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_1B4BB2558(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  long long v8 = (void *)(a1 + 24);
  unint64_t v9 = sub_1B4BB27E4(a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    uint64_t v14 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(void **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (sub_1B4BB2C90(a1 + 32, (unsigned __int8 *)i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  int v17 = (void *)(a1 + 16);
  i = operator new(0x30uLL);
  *(void *)i = 0;
  *((void *)i + 1) = v10;
  uint64_t v18 = *a4;
  long long v19 = **a4;
  *((void *)i + 4) = *((void *)*a4 + 2);
  *((_OWORD *)i + 1) = v19;
  *((void *)v18 + 1) = 0;
  *((void *)v18 + 2) = 0;
  *(void *)uint64_t v18 = 0;
  *((unsigned char *)i + 40) = 0;
  float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v21 = *(float *)(a1 + 32);
  if (!v11 || (float)(v21 * (float)v11) < v20)
  {
    BOOL v22 = 1;
    if (v11 >= 3) {
      BOOL v22 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v23 = v22 | (2 * v11);
    unint64_t v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24) {
      size_t v25 = v24;
    }
    else {
      size_t v25 = v23;
    }
    sub_1B4BB2D6C(a1, v25);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  uint64_t v26 = *(void *)a1;
  std::string::size_type v27 = *(void **)(*(void *)a1 + 8 * v4);
  if (v27)
  {
    *(void *)i = *v27;
LABEL_38:
    *std::string::size_type v27 = i;
    goto LABEL_39;
  }
  *(void *)i = *v17;
  *int v17 = i;
  *(void *)(v26 + 8 * v4) = v17;
  if (*(void *)i)
  {
    unint64_t v28 = *(void *)(*(void *)i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v28 >= v11) {
        v28 %= v11;
      }
    }
    else
    {
      v28 &= v11 - 1;
    }
    std::string::size_type v27 = (void *)(*(void *)a1 + 8 * v28);
    goto LABEL_38;
  }
LABEL_39:
  ++*v8;
  return i;
}

void sub_1B4BB27C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  sub_1B4BB2FB8(v11, v10);
  _Unwind_Resume(a1);
}

unint64_t sub_1B4BB27E4(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v3 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v3 = v2;
  }
  return sub_1B4BB2824((uint64_t)&v5, (uint64_t *)a2, v3);
}

unint64_t sub_1B4BB2824(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  if (a3 > 0x20)
  {
    if (a3 > 0x40)
    {
      uint64_t v4 = *(uint64_t *)((char *)a2 + a3 - 48);
      uint64_t v5 = *(uint64_t *)((char *)a2 + a3 - 40);
      uint64_t v6 = *(uint64_t *)((char *)a2 + a3 - 24);
      uint64_t v8 = *(uint64_t *)((char *)a2 + a3 - 64);
      uint64_t v7 = *(uint64_t *)((char *)a2 + a3 - 56);
      uint64_t v9 = *(uint64_t *)((char *)a2 + a3 - 16);
      uint64_t v10 = *(uint64_t *)((char *)a2 + a3 - 8);
      unint64_t v11 = v7 + v9;
      unint64_t v12 = 0x9DDFEA08EB382D69
          * (v6 ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))) >> 47) ^ (0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))));
      unint64_t v13 = 0x9DDFEA08EB382D69 * (v12 ^ (v12 >> 47));
      unint64_t v14 = v8 + a3 + v7 + v4;
      uint64_t v15 = v14 + v5;
      unint64_t v16 = __ROR8__(v14, 44) + v8 + a3 + __ROR8__(v5 + v8 + a3 - 0x622015F714C7D297 * (v12 ^ (v12 >> 47)), 21);
      uint64_t v17 = v7 + v9 + *(uint64_t *)((char *)a2 + a3 - 32) - 0x4B6D499041670D8DLL;
      uint64_t v18 = v17 + v6 + v9;
      uint64_t v19 = __ROR8__(v18, 44);
      uint64_t v20 = v18 + v10;
      uint64_t v21 = v19 + v17 + __ROR8__(v17 + v5 + v10, 21);
      uint64_t v23 = *a2;
      BOOL v22 = a2 + 4;
      unint64_t v24 = v23 - 0x4B6D499041670D8DLL * v5;
      uint64_t v25 = -(uint64_t)((a3 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        uint64_t v26 = *(v22 - 3);
        uint64_t v27 = v24 + v15 + v11 + v26;
        uint64_t v28 = v22[2];
        uint64_t v29 = v22[3];
        uint64_t v30 = v22[1];
        unint64_t v11 = v30 + v15 - 0x4B6D499041670D8DLL * __ROR8__(v11 + v16 + v28, 42);
        uint64_t v31 = v13 + v20;
        uint64_t v32 = *(v22 - 2);
        uint64_t v33 = *(v22 - 1);
        uint64_t v34 = *(v22 - 4) - 0x4B6D499041670D8DLL * v16;
        uint64_t v35 = v34 + v20 + v33;
        uint64_t v36 = v34 + v26 + v32;
        uint64_t v15 = v36 + v33;
        uint64_t v37 = __ROR8__(v36, 44) + v34;
        unint64_t v38 = (0xB492B66FBE98F273 * __ROR8__(v27, 37)) ^ v21;
        unint64_t v24 = 0xB492B66FBE98F273 * __ROR8__(v31, 33);
        unint64_t v16 = v37 + __ROR8__(v35 + v38, 21);
        unint64_t v39 = v24 + v21 + *v22;
        uint64_t v20 = v39 + v30 + v28 + v29;
        uint64_t v21 = __ROR8__(v39 + v30 + v28, 44) + v39 + __ROR8__(v11 + v32 + v39 + v29, 21);
        v22 += 8;
        unint64_t v13 = v38;
        v25 += 64;
      }
      while (v25);
      unint64_t v40 = v24
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) ^ ((0x9DDFEA08EB382D69 * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) >> 47));
      unint64_t v41 = 0x9DDFEA08EB382D69
          * (v40 ^ (v38
                  - 0x4B6D499041670D8DLL * (v11 ^ (v11 >> 47))
                  - 0x622015F714C7D297
                  * ((0x9DDFEA08EB382D69
                    * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) ^ ((0x9DDFEA08EB382D69 * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) >> 47))));
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) ^ ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) >> 47));
    }
    else
    {
      return sub_1B4BB2BD0(a2, a3);
    }
  }
  else if (a3 > 0x10)
  {
    return sub_1B4BB2B24(a2, a3);
  }
  else
  {
    return sub_1B4BB2A2C(a2, a3);
  }
}

unint64_t sub_1B4BB2A2C(_DWORD *a1, unint64_t a2)
{
  if (a2 < 9)
  {
    if (a2 < 4)
    {
      unint64_t result = 0x9AE16A3B2F90404FLL;
      if (a2)
      {
        unint64_t v8 = (0xC949D7C7509E6557 * (a2 + 4 * *((unsigned __int8 *)a1 + a2 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                      * (*(unsigned __int8 *)a1 | ((unint64_t)*((unsigned __int8 *)a1 + (a2 >> 1)) << 8)));
        return 0x9AE16A3B2F90404FLL * (v8 ^ (v8 >> 47));
      }
    }
    else
    {
      uint64_t v6 = *(unsigned int *)((char *)a1 + a2 - 4);
      unint64_t v7 = 0x9DDFEA08EB382D69 * (((8 * *a1) + a2) ^ v6);
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
    }
  }
  else
  {
    uint64_t v3 = *(void *)((char *)a1 + a2 - 8);
    uint64_t v4 = __ROR8__(v3 + a2, a2);
    return (0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69
            * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)))) ^ ((0x9DDFEA08EB382D69 * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)))) >> 47))) ^ v3;
  }
  return result;
}

unint64_t sub_1B4BB2B24(void *a1, uint64_t a2)
{
  uint64_t v2 = a1[1];
  unint64_t v3 = 0xB492B66FBE98F273 * *a1;
  uint64_t v4 = __ROR8__(0x9AE16A3B2F90404FLL * *(void *)((char *)a1 + a2 - 8), 30) + __ROR8__(v3 - v2, 43);
  unint64_t v5 = v3 + a2 + __ROR8__(v2 ^ 0xC949D7C7509E6557, 20) - 0x9AE16A3B2F90404FLL * *(void *)((char *)a1 + a2 - 8);
  unint64_t v6 = 0x9DDFEA08EB382D69 * (v5 ^ (v4 - 0x3C5A37A36834CED9 * *(void *)((char *)a1 + a2 - 16)));
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) ^ ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) >> 47));
}

unint64_t sub_1B4BB2BD0(void *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)((char *)a1 + a2 - 16);
  uint64_t v3 = *a1 - 0x3C5A37A36834CED9 * (v2 + a2);
  uint64_t v5 = a1[2];
  uint64_t v4 = a1[3];
  uint64_t v6 = __ROR8__(v3 + v4, 52);
  uint64_t v7 = v3 + a1[1];
  uint64_t v8 = __ROR8__(v7, 7);
  uint64_t v9 = v7 + v5;
  uint64_t v10 = *(void *)((char *)a1 + a2 - 32) + v5;
  uint64_t v11 = v8 + __ROR8__(*a1 - 0x3C5A37A36834CED9 * (v2 + a2), 37) + v6 + __ROR8__(v9, 31);
  uint64_t v12 = *(void *)((char *)a1 + a2 - 24) + v10 + v2;
  unint64_t v13 = 0xC3A5C85C97CB3127 * (v12 + *(void *)((char *)a1 + a2 - 8) + v4 + v11)
      - 0x651E95C4D06FBFB1
      * (v9
       + v4
       + __ROR8__(v10, 37)
       + __ROR8__(*(void *)((char *)a1 + a2 - 24) + v10, 7)
       + __ROR8__(*(void *)((char *)a1 + a2 - 8) + v4 + v10, 52)
       + __ROR8__(v12, 31));
  return 0x9AE16A3B2F90404FLL
       * ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) ^ ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) >> 47));
}

uint64_t sub_1B4BB2C90(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = a2[23];
  if ((v4 & 0x80u) == 0) {
    uint64_t v5 = a2[23];
  }
  else {
    uint64_t v5 = *((void *)a2 + 1);
  }
  uint64_t v6 = a3[23];
  int v7 = (char)v6;
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *((void *)a3 + 1);
  }
  if (v5 != v6) {
    return 0;
  }
  if (v7 < 0) {
    uint64_t v3 = *(unsigned __int8 **)a3;
  }
  if ((v4 & 0x80) != 0) {
    return memcmp(*(const void **)a2, v3, *((void *)a2 + 1)) == 0;
  }
  if (!a2[23]) {
    return 1;
  }
  uint64_t v8 = v4 - 1;
  do
  {
    int v10 = *a2++;
    int v9 = v10;
    int v12 = *v3++;
    int v11 = v12;
    BOOL v14 = v8-- != 0;
    uint64_t result = v9 == v11;
  }
  while (v9 == v11 && v14);
  return result;
}

void sub_1B4BB2D38()
{
  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  uint64_t v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x1E4FBA350], MEMORY[0x1E4FBA1F8]);
}

void sub_1B4BB2D6C(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(void *)&v4) {
    goto LABEL_16;
  }
  if (prime < *(void *)&v4)
  {
    unint64_t v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      unint64_t v5 = std::__next_prime(v5);
    }
    else
    {
      uint64_t v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2) {
        unint64_t v5 = v7;
      }
    }
    if (prime <= v5) {
      size_t prime = v5;
    }
    if (prime < *(void *)&v4)
    {
LABEL_16:
      sub_1B4BB2E5C(a1, prime);
    }
  }
}

void sub_1B4BB2E5C(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      sub_1B4BB2D38();
    }
    int8x8_t v4 = operator new(8 * a2);
    unint64_t v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0;
    *(void *)(a1 + 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    uint64_t v7 = *(void **)(a1 + 16);
    if (v7)
    {
      unint64_t v8 = v7[1];
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2) {
          v8 %= a2;
        }
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v8) = a1 + 16;
      int v11 = (void *)*v7;
      if (*v7)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= a2) {
              v12 %= a2;
            }
          }
          else
          {
            v12 &= a2 - 1;
          }
          if (v12 != v8)
          {
            if (!*(void *)(*(void *)a1 + 8 * v12))
            {
              *(void *)(*(void *)a1 + 8 * v12) = v7;
              goto LABEL_24;
            }
            void *v7 = *v11;
            *int v11 = **(void **)(*(void *)a1 + 8 * v12);
            **(void **)(*(void *)a1 + 8 * v12) = v11;
            int v11 = v7;
          }
          unint64_t v12 = v8;
LABEL_24:
          uint64_t v7 = v11;
          int v11 = (void *)*v11;
          unint64_t v8 = v12;
        }
        while (v11);
      }
    }
  }
  else
  {
    int v10 = *(void **)a1;
    *(void *)a1 = 0;
    if (v10) {
      operator delete(v10);
    }
    *(void *)(a1 + 8) = 0;
  }
}

void sub_1B4BB2FB8(uint64_t a1, void **__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    if (*((char *)__p + 39) < 0) {
      operator delete(__p[2]);
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

void sub_1B4BB3018(const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_1B4BB3074(exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E60A34B8, MEMORY[0x1E4FBA1C8]);
}

void sub_1B4BB3060(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_1B4BB3074(std::logic_error *a1, const char *a2)
{
  uint64_t result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D0] + 16);
  return result;
}

uint64_t sub_1B4BB30A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  std::string v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *(void *)uint64_t v4 = 0;
      *(void *)(v4 + 8) = 0;
      *(void *)(v4 + 16) = 0;
      sub_1B4BB3170((char *)v4, *(long long **)v6, *(long long **)(v6 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v6 + 8) - *(void *)v6) >> 3));
      *(_DWORD *)(v4 + 24) = *(_DWORD *)(v6 + 24);
      uint64_t v4 = v11 + 32;
      v11 += 32;
      v6 += 32;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  sub_1B4BB32A4((uint64_t)v8);
  return v4;
}

void sub_1B4BB315C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

char *sub_1B4BB3170(char *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = sub_1B4BB31F0(result, a4);
    uint64_t v7 = *((void *)v6 + 1);
    while (a2 != a3)
    {
      long long v8 = *a2;
      *(void *)(v7 + 16) = *((void *)a2 + 2);
      *(_OWORD *)uint64_t v7 = v8;
      v7 += 24;
      a2 = (long long *)((char *)a2 + 24);
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_1B4BB31D4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_1B4BB31F0(void *a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    sub_1B4BB3244();
  }
  uint64_t result = (char *)sub_1B4BB325C((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

void sub_1B4BB3244()
{
}

void *sub_1B4BB325C(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    sub_1B4BB2D38();
  }
  return operator new(24 * a2);
}

uint64_t sub_1B4BB32A4(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_1B4BB32DC(a1);
  }
  return a1;
}

void sub_1B4BB32DC(uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  if (v1 != v2)
  {
    uint64_t v3 = **(void **)(a1 + 16);
    do
    {
      unint64_t v5 = *(void **)(v3 - 32);
      v3 -= 32;
      uint64_t v4 = v5;
      if (v5)
      {
        *(void *)(v1 - 24) = v4;
        operator delete(v4);
      }
      uint64_t v1 = v3;
    }
    while (v3 != v2);
  }
}

void sub_1B4BB332C(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_1B4BB3380((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void sub_1B4BB3380(uint64_t *a1)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  if (v2 != *a1)
  {
    uint64_t v4 = a1[1];
    do
    {
      uint64_t v6 = *(void **)(v4 - 32);
      v4 -= 32;
      unint64_t v5 = v6;
      if (v6)
      {
        *(void *)(v2 - 24) = v5;
        operator delete(v5);
      }
      uint64_t v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

void sub_1B4BB33D8()
{
}

void sub_1B4BB33F0(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0D54FB0;
  uint64_t v2 = a1[3];
  if (v2)
  {
    MEMORY[0x1BA992990](v2, 0x1000C8052888210);
    a1[3] = 0;
  }
  JUMPOUT(0x1BA9929C0);
}

void sub_1B4BB3474(uint64_t a1, uint64_t *a2)
{
  if (a2)
  {
    uint64_t v2 = *a2;
    *a2 = 0;
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
    JUMPOUT(0x1BA9929C0);
  }
}

void *sub_1B4BB34F0(void *a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x1BA992740](v13, a1);
  if (v13[0])
  {
    uint64_t v6 = (uint64_t)a1 + *(void *)(*a1 - 24);
    uint64_t v7 = *(void *)(v6 + 40);
    int v8 = *(_DWORD *)(v6 + 8);
    int v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
      uint64_t v10 = std::locale::use_facet(&v14, MEMORY[0x1E4FBA258]);
      int v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20) {
      uint64_t v11 = a2 + a3;
    }
    else {
      uint64_t v11 = a2;
    }
    if (!sub_1B4BB3694(v7, a2, v11, a2 + a3, v6, (char)v9)) {
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 5);
    }
  }
  MEMORY[0x1BA992750](v13);
  return a1;
}

void sub_1B4BB362C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  MEMORY[0x1BA992750](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(void *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x1B4BB360CLL);
}

void sub_1B4BB3680(_Unwind_Exception *a1)
{
}

uint64_t sub_1B4BB3694(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6 = a1;
  if (a1)
  {
    uint64_t v11 = *(void *)(a5 + 24);
    if (v11 <= a4 - a2) {
      int64_t v12 = 0;
    }
    else {
      int64_t v12 = v11 - (a4 - a2);
    }
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a1) != a3 - a2) {
      return 0;
    }
    if (v12 >= 1)
    {
      sub_1B4BB381C(__p, v12, __c);
      unint64_t v13 = v18 >= 0 ? __p : (void **)__p[0];
      uint64_t v14 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(void *)v6 + 96))(v6, v13, v12);
      if (v18 < 0) {
        operator delete(__p[0]);
      }
      if (v14 != v12) {
        return 0;
      }
    }
    uint64_t v15 = a4 - a3;
    if (v15 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6 + 96))(v6, a3, v15) == v15) {
      *(void *)(a5 + 24) = 0;
    }
    else {
      return 0;
    }
  }
  return v6;
}

void sub_1B4BB3800(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1B4BB381C(void *__b, size_t __len, int __c)
{
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    sub_1B4BB33D8();
  }
  if (__len >= 0x17)
  {
    size_t v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v7 = __len | 7;
    }
    size_t v8 = v7 + 1;
    uint64_t v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000;
    *__b = v6;
  }
  else
  {
    *((unsigned char *)__b + 23) = __len;
    uint64_t v6 = __b;
    if (!__len) {
      goto LABEL_9;
    }
  }
  memset(v6, __c, __len);
LABEL_9:
  *((unsigned char *)v6 + __len) = 0;
  return __b;
}

void sub_1B4BB38C8(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_1B4BB38C8(a1, *a2);
    sub_1B4BB38C8(a1, a2[1]);
    operator delete(a2);
  }
}

void *sub_1B4BB391C(void *a1, unint64_t a2, unsigned __int8 *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_1B4BB39F0(a1, a2);
    int v6 = *a3;
    unint64_t v7 = a1[1];
    unint64_t v8 = v7 + a2;
    a1[1] = v7 + a2;
    if (v7)
    {
      unint64_t v9 = v8 - 1;
      if (((v8 - 1) ^ (v7 - 1)) < 0x40)
      {
LABEL_10:
        uint64_t v13 = *a1 + 8 * (v7 >> 6);
        int v14 = v7 & 0x3F;
        if (v6) {
          sub_1B4BB3A70(&v13, a2);
        }
        else {
          sub_1B4BB3B24((uint64_t)&v13, a2);
        }
        return a1;
      }
    }
    else
    {
      unint64_t v9 = v8 - 1;
    }
    unint64_t v10 = v9 >> 6;
    if (v8 >= 0x41) {
      unint64_t v11 = v10;
    }
    else {
      unint64_t v11 = 0;
    }
    *(void *)(*a1 + 8 * v11) = 0;
    goto LABEL_10;
  }
  return a1;
}

void *sub_1B4BB39F0(void *a1, uint64_t a2)
{
  if (a2 < 0) {
    sub_1B4BB3244();
  }
  uint64_t result = sub_1B4BB3A38((uint64_t)(a1 + 2), ((unint64_t)(a2 - 1) >> 6) + 1);
  *a1 = result;
  a1[1] = 0;
  a1[2] = v4;
  return result;
}

void *sub_1B4BB3A38(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61) {
    sub_1B4BB2D38();
  }
  return operator new(8 * a2);
}

void *sub_1B4BB3A70(void *result, unint64_t a2)
{
  unint64_t v2 = a2;
  uint64_t v3 = result;
  int v4 = *((_DWORD *)result + 2);
  unint64_t v5 = (void *)*result;
  if (v4)
  {
    if ((64 - v4) >= a2) {
      unint64_t v6 = a2;
    }
    else {
      unint64_t v6 = (64 - v4);
    }
    *v5++ |= (0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4);
    unint64_t v2 = a2 - v6;
    void *result = v5;
  }
  unint64_t v7 = v2 >> 6;
  if (v2 >= 0x40) {
    uint64_t result = memset(v5, 255, 8 * v7);
  }
  if ((v2 & 0x3F) != 0)
  {
    unint64_t v8 = &v5[v7];
    void *v3 = v8;
    *v8 |= 0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F);
  }
  return result;
}

void sub_1B4BB3B24(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = a2;
  int v4 = *(_DWORD *)(a1 + 8);
  unint64_t v5 = *(void **)a1;
  if (v4)
  {
    if ((64 - v4) >= a2) {
      unint64_t v6 = a2;
    }
    else {
      unint64_t v6 = (64 - v4);
    }
    *v5++ &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4));
    unint64_t v2 = a2 - v6;
    *(void *)a1 = v5;
  }
  unint64_t v7 = v2 >> 6;
  if (v2 >= 0x40) {
    bzero(v5, 8 * v7);
  }
  if ((v2 & 0x3F) != 0)
  {
    unint64_t v8 = &v5[v7];
    *(void *)a1 = v8;
    *v8 &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F));
  }
}

_OWORD *sub_1B4BB3BD4(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5 = (void **)sub_1B4BB3C60((uint64_t)a1, &v9, a2);
  unint64_t v6 = *v5;
  if (!*v5)
  {
    unint64_t v7 = (uint64_t **)v5;
    unint64_t v6 = operator new(0x38uLL);
    v6[2] = *(_OWORD *)a3;
    *((void *)v6 + 6) = *(void *)(a3 + 16);
    sub_1B4BB3D00(a1, v9, v7, (uint64_t *)v6);
  }
  return v6;
}

void *sub_1B4BB3C60(uint64_t a1, void *a2, uint64_t a3)
{
  unint64_t v5 = (void *)(a1 + 8);
  int v4 = *(void **)(a1 + 8);
  if (v4)
  {
    uint64_t v7 = a1 + 16;
    do
    {
      while (1)
      {
        unint64_t v8 = v4;
        uint64_t v9 = (uint64_t)(v4 + 4);
        if (!sub_1B4BB3D58(v7, a3, (uint64_t)(v4 + 4))) {
          break;
        }
        int v4 = (void *)*v8;
        unint64_t v5 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (!sub_1B4BB3D58(v7, v9, a3)) {
        break;
      }
      unint64_t v5 = v8 + 1;
      int v4 = (void *)v8[1];
    }
    while (v4);
  }
  else
  {
    unint64_t v8 = (void *)(a1 + 8);
  }
LABEL_10:
  *a2 = v8;
  return v5;
}

uint64_t *sub_1B4BB3D00(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  unint64_t v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  uint64_t result = sub_1B4BB3DA4(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

uint64_t sub_1B4BB3D58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(const void **)a2;
  size_t v4 = *(void *)(a2 + 8);
  unint64_t v5 = *(const void **)a3;
  size_t v6 = *(void *)(a3 + 8);
  if (v6 >= v4) {
    size_t v7 = v4;
  }
  else {
    size_t v7 = *(void *)(a3 + 8);
  }
  int v8 = memcmp(v3, v5, v7);
  if (v4 < v6) {
    unsigned int v9 = -1;
  }
  else {
    unsigned int v9 = 1;
  }
  if (v4 == v6) {
    unsigned int v9 = 0;
  }
  if (v8) {
    unsigned int v9 = v8;
  }
  return v9 >> 31;
}

uint64_t *sub_1B4BB3DA4(uint64_t *result, uint64_t *a2)
{
  *((unsigned char *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      unint64_t v2 = (uint64_t *)a2[2];
      if (*((unsigned char *)v2 + 24)) {
        return result;
      }
      uint64_t v3 = (uint64_t *)v2[2];
      size_t v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        uint64_t v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), unint64_t v5 = (unsigned char *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            unsigned int v9 = (uint64_t **)a2[2];
          }
          else
          {
            unsigned int v9 = (uint64_t **)v2[1];
            unint64_t v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              uint64_t v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = v9;
            *unsigned int v9 = v2;
            v2[2] = (uint64_t)v9;
            uint64_t v3 = v9[2];
            unint64_t v2 = (uint64_t *)*v3;
          }
          *((unsigned char *)v9 + 24) = 1;
          *((unsigned char *)v3 + 24) = 0;
          uint64_t v13 = v2[1];
          uint64_t *v3 = v13;
          if (v13) {
            *(void *)(v13 + 16) = v3;
          }
          v2[2] = v3[2];
          *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), unint64_t v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          uint64_t v11 = a2[1];
          *unint64_t v2 = v11;
          if (v11)
          {
            *(void *)(v11 + 16) = v2;
            uint64_t v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          uint64_t v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((unsigned char *)a2 + 24) = 1;
        *((unsigned char *)v3 + 24) = 0;
        unint64_t v2 = (uint64_t *)v3[1];
        uint64_t v12 = *v2;
        v3[1] = *v2;
        if (v12) {
          *(void *)(v12 + 16) = v3;
        }
        v2[2] = v3[2];
        *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
        *unint64_t v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((unsigned char *)v2 + 24) = 1;
      a2 = v3;
      *((unsigned char *)v3 + 24) = v3 == result;
      unsigned char *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

uint64_t sub_1B4BB3F3C(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x7FFFFFFFFFFFFFF8) {
    sub_1B4BB33D8();
  }
  if (a2 > 0x16)
  {
    uint64_t v4 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17) {
      uint64_t v4 = a2 | 7;
    }
    uint64_t v5 = v4 + 1;
    int v6 = operator new(v4 + 1);
    *(void *)(a1 + 8) = a2;
    *(void *)(a1 + 16) = v5 | 0x8000000000000000;
    *(void *)a1 = v6;
  }
  else
  {
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    *(unsigned char *)(a1 + 23) = a2;
  }
  return a1;
}

uint64_t *sub_1B4BB3FC4(uint64_t **a1, uint64_t a2, _OWORD *a3)
{
  uint64_t v5 = (void **)sub_1B4BB3C60((uint64_t)a1, &v9, a2);
  int v6 = (uint64_t *)*v5;
  if (!*v5)
  {
    uint64_t v7 = (uint64_t **)v5;
    int v6 = (uint64_t *)operator new(0x30uLL);
    *((_OWORD *)v6 + 2) = *a3;
    sub_1B4BB3D00(a1, v9, v7, v6);
  }
  return v6;
}

uint64_t sub_1B4BB4048@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = *(unsigned int *)(result + 8);
  uint64_t v4 = *(void **)result;
  if (!v3) {
    goto LABEL_9;
  }
  unint64_t v5 = (64 - v3);
  if (v5 >= a2) {
    unint64_t v6 = a2;
  }
  else {
    unint64_t v6 = (64 - v3);
  }
  if (((0xFFFFFFFFFFFFFFFFLL >> (64 - v3 - v6)) & (-1 << v3) & ~*v4) != 0)
  {
    unint64_t v7 = __rbit64((0xFFFFFFFFFFFFFFFFLL >> (64 - v3 - v6)) & (-1 << v3) & ~*v4);
LABEL_22:
    *(void *)a3 = v4;
    *(_DWORD *)(a3 + 8) = __clz(v7);
    return result;
  }
  if (v5 < a2)
  {
    a2 -= v6;
    *(void *)uint64_t result = ++v4;
LABEL_9:
    if (a2 < 0x40)
    {
LABEL_12:
      if (!a2 || (unint64_t v8 = (0xFFFFFFFFFFFFFFFFLL >> -(char)a2) & ~*v4) == 0)
      {
        *(void *)a3 = v4;
        *(_DWORD *)(a3 + 8) = a2;
        return result;
      }
    }
    else
    {
      while (*v4 == -1)
      {
        *(void *)uint64_t result = ++v4;
        a2 -= 64;
        if (a2 <= 0x3F) {
          goto LABEL_12;
        }
      }
      unint64_t v8 = ~*v4;
    }
    unint64_t v7 = __rbit64(v8);
    goto LABEL_22;
  }
  uint64_t v9 = v3 + a2 - 63;
  if (v9 < 0) {
    uint64_t v9 = v3 + a2;
  }
  uint64_t v10 = v9 >> 6;
  unint64_t v11 = (v3 + a2) >> 6;
  if ((a2 & 0x8000000000000000) != 0) {
    unint64_t v11 = v10;
  }
  *(void *)a3 = &v4[v11];
  *(_DWORD *)(a3 + 8) = ((_BYTE)v3 + (_BYTE)a2) & 0x3F;
  return result;
}

void *sub_1B4BB4140(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60) {
    sub_1B4BB2D38();
  }
  return operator new(16 * a2);
}

unsigned __int8 *sub_1B4BB4178(void *a1, unsigned __int8 *a2)
{
  unint64_t v4 = sub_1B4BB27E4((uint64_t)(a1 + 3), (uint64_t)a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  uint64_t v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  unint64_t v11 = *v10;
  if (*v10)
  {
    uint64_t v12 = (uint64_t)(a1 + 4);
    do
    {
      unint64_t v13 = *((void *)v11 + 1);
      if (v6 == v13)
      {
        if (sub_1B4BB2C90(v12, v11 + 16, a2)) {
          return v11;
        }
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(void *)&v5) {
            v13 %= *(void *)&v5;
          }
        }
        else
        {
          v13 &= *(void *)&v5 - 1;
        }
        if (v13 != v9) {
          return 0;
        }
      }
      unint64_t v11 = *(unsigned __int8 **)v11;
    }
    while (v11);
  }
  return v11;
}

void *sub_1B4BB427C(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62) {
    sub_1B4BB2D38();
  }
  return operator new(4 * a2);
}

void sub_1B4BB42B4(void (**a1)(unint64_t, uint64_t), unint64_t *a2)
{
  if (a2[3])
  {
    uint64_t v3 = 0;
    memset(v2, 0, sizeof(v2));
    sub_1B4BB4874(a1, a2, (uint64_t *)v2);
  }
  sub_1B4BB4CBC((uint64_t)a1, a2);
}

void sub_1B4BB4394(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *sub_1B4BB43A8(uint64_t *a1)
{
  if (*a1)
  {
    MEMORY[0x1BA992990](*a1, 0x1000C8077774924);
    *a1 = 0;
  }
  return a1;
}

uint64_t sub_1B4BB43F4(uint64_t *a1)
{
  sub_1B4BB4440((uint64_t)a1, 0);
  uint64_t result = *a1;
  if (*a1)
  {
    uint64_t result = MEMORY[0x1BA992990](result, 0x1000C8077774924);
    *a1 = 0;
  }
  a1[1] = 0;
  a1[2] = 0;
  return result;
}

uint64_t sub_1B4BB4440(uint64_t result, unint64_t a2)
{
  unint64_t v2 = *(void *)(result + 8);
  if (v2 > a2)
  {
    *(void *)(result + 8) = a2;
    unint64_t v2 = a2;
  }
  if (*(void *)(result + 16) < a2) {
    sub_1B4BB44A0(result, a2);
  }
  if (v2 < a2) {
    *(void *)(result + 8) = a2;
  }
  return result;
}

void sub_1B4BB44A0(uint64_t a1, unint64_t a2)
{
  if (a2 < 2 * *(void *)(a1 + 16))
  {
    uint64_t v2 = 1;
    do
    {
      unint64_t v3 = v2;
      v2 *= 2;
    }
    while (v3 < a2);
  }
  operator new[]();
}

void sub_1B4BB45E0(std::exception *a1)
{
  std::exception::~exception(a1);
  JUMPOUT(0x1BA9929C0);
}

const char *sub_1B4BB4618(uint64_t a1)
{
  if (*(void *)(a1 + 8)) {
    return *(const char **)(a1 + 8);
  }
  else {
    return "";
  }
}

uint64_t *sub_1B4BB4630(uint64_t *a1)
{
  if (*a1)
  {
    MEMORY[0x1BA992990](*a1, 0x1000C8077774924);
    *a1 = 0;
  }
  return a1;
}

uint64_t sub_1B4BB467C(uint64_t *a1)
{
  sub_1B4BB46C8(a1, 0);
  uint64_t result = *a1;
  if (*a1)
  {
    uint64_t result = MEMORY[0x1BA992990](result, 0x1000C8077774924);
    *a1 = 0;
  }
  a1[1] = 0;
  a1[2] = 0;
  return result;
}

void sub_1B4BB46C8(void *a1, unint64_t a2)
{
  unint64_t v4 = a1[1];
  if (v4 > a2)
  {
    a1[1] = a2;
    unint64_t v4 = a2;
  }
  if (a1[2] < a2) {
    sub_1B4BB4738((uint64_t)a1, a2);
  }
  if (a2 > v4)
  {
    bzero((void *)(*a1 + 4 * v4), 4 * (a2 - v4));
    a1[1] = a2;
  }
}

void sub_1B4BB4738(uint64_t a1, unint64_t a2)
{
  if (a2 < 2 * *(void *)(a1 + 16))
  {
    uint64_t v2 = 1;
    do
    {
      unint64_t v3 = v2;
      v2 *= 2;
    }
    while (v3 < a2);
  }
  operator new[]();
}

void sub_1B4BB4874(void (**a1)(unint64_t, uint64_t), unint64_t *a2, uint64_t *a3)
{
  sub_1B4BB5724(a3);
  if (*a2)
  {
    unint64_t v6 = 0;
    do
    {
      unint64_t v7 = a2[2];
      uint64_t v8 = *(void *)(a2[1] + 8 * v6);
      if (v7)
      {
        unint64_t v9 = *(void *)(v7 + 8 * v6);
      }
      else
      {
        while (*(unsigned __int8 *)(v8 + v7++))
          ;
        unint64_t v9 = v7 - 1;
      }
      unint64_t v11 = a2[3];
      if (v11) {
        int v12 = *(_DWORD *)(v11 + 4 * v6);
      }
      else {
        int v12 = v6;
      }
      sub_1B4BB57F8(a3, v8, v9, v12);
      ++v6;
      if (*a1) {
        (*a1)(v6, *a2 + 1);
      }
    }
    while (v6 < *a2);
  }
  sub_1B4BB5C38((uint64_t)a3, 0);
  uint64_t v13 = *a3;
  char v14 = *(unsigned char *)(*a3 + 8);
  int v15 = *(_DWORD *)*a3;
  if (v14) {
    int v16 = (2 * *(unsigned __int8 *)(v13 + 9)) | (4 * v15);
  }
  else {
    int v16 = 2 * v15;
  }
  *(_DWORD *)a3[3] = v16 | *(unsigned __int8 *)(v13 + 10);
  *(unsigned char *)a3[6] = v14;
  sub_1B4BB5504(a3);
  sub_1B4BB4FA0(a3 + 15);
  sub_1B4BB4FA0(a3 + 18);
  sub_1B4BB4FA0(a3 + 21);
  sub_1B4BB6090();
}

void sub_1B4BB499C(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a2 + 32);
  uint64_t v3 = 1;
  do
  {
    unint64_t v4 = v3;
    v3 *= 2;
  }
  while (v4 < v2);
  if (*(void *)(a1 + 24) < v4) {
    sub_1B4BB4738(a1 + 8, v4);
  }
  operator new[]();
}

void sub_1B4BB4CBC(uint64_t a1, unint64_t *a2)
{
  unint64_t v2 = *a2;
  uint64_t v3 = 1;
  do
  {
    unint64_t v4 = v3;
    v3 *= 2;
  }
  while (v4 < v2);
  if (*(void *)(a1 + 24) < v4) {
    sub_1B4BB4738(a1 + 8, v4);
  }
  operator new[]();
}

uint64_t *sub_1B4BB4F64(uint64_t *a1)
{
  sub_1B4BB4FA0(a1);
  return sub_1B4BB5188(a1);
}

uint64_t sub_1B4BB4FA0(uint64_t *a1)
{
  sub_1B4BB4FEC((uint64_t)a1, 0);
  uint64_t result = *a1;
  if (*a1)
  {
    uint64_t result = MEMORY[0x1BA992990](result, 0x1000C8077774924);
    *a1 = 0;
  }
  a1[1] = 0;
  a1[2] = 0;
  return result;
}

uint64_t sub_1B4BB4FEC(uint64_t result, unint64_t a2)
{
  unint64_t v2 = *(void *)(result + 8);
  if (v2 > a2)
  {
    *(void *)(result + 8) = a2;
    unint64_t v2 = a2;
  }
  if (*(void *)(result + 16) < a2) {
    sub_1B4BB504C(result, a2);
  }
  if (v2 < a2) {
    *(void *)(result + 8) = a2;
  }
  return result;
}

void sub_1B4BB504C(uint64_t a1, unint64_t a2)
{
  if (a2 < 2 * *(void *)(a1 + 16))
  {
    uint64_t v2 = 1;
    do
    {
      unint64_t v3 = v2;
      v2 *= 2;
    }
    while (v3 < a2);
  }
  operator new[]();
}

uint64_t *sub_1B4BB5188(uint64_t *a1)
{
  if (*a1)
  {
    MEMORY[0x1BA992990](*a1, 0x1000C8077774924);
    *a1 = 0;
  }
  return a1;
}

uint64_t *sub_1B4BB51D4(uint64_t *a1)
{
  sub_1B4BB5230(a1);
  uint64_t v2 = a1[3];
  if (v2)
  {
    MEMORY[0x1BA992990](v2, 0x1000C8052888210);
    a1[3] = 0;
  }
  return sub_1B4BB5188(a1);
}

uint64_t sub_1B4BB5230(uint64_t *a1)
{
  sub_1B4BB4FA0(a1);
  uint64_t result = a1[3];
  if (result)
  {
    uint64_t result = MEMORY[0x1BA992990](result, 0x1000C8052888210);
    a1[3] = 0;
  }
  return result;
}

uint64_t *sub_1B4BB5274(uint64_t *a1)
{
  if (*a1)
  {
    MEMORY[0x1BA992990](*a1, 0x1000C8077774924);
    *a1 = 0;
  }
  return a1;
}

uint64_t sub_1B4BB52C0(uint64_t *a1)
{
  sub_1B4BB530C(a1, 0);
  uint64_t result = *a1;
  if (*a1)
  {
    uint64_t result = MEMORY[0x1BA992990](result, 0x1000C8077774924);
    *a1 = 0;
  }
  a1[1] = 0;
  a1[2] = 0;
  return result;
}

void sub_1B4BB530C(void *a1, unint64_t a2)
{
  unint64_t v4 = a1[1];
  if (v4 > a2)
  {
    a1[1] = a2;
    unint64_t v4 = a2;
  }
  if (a1[2] < a2) {
    sub_1B4BB537C((uint64_t)a1, a2);
  }
  if (a2 > v4)
  {
    bzero((void *)(*a1 + 4 * v4), 4 * (a2 - v4));
    a1[1] = a2;
  }
}

void sub_1B4BB537C(uint64_t a1, unint64_t a2)
{
  if (a2 < 2 * *(void *)(a1 + 16))
  {
    uint64_t v2 = 1;
    do
    {
      unint64_t v3 = v2;
      v2 *= 2;
    }
    while (v3 < a2);
  }
  operator new[]();
}

uint64_t *sub_1B4BB54B8(uint64_t *a1)
{
  if (*a1)
  {
    MEMORY[0x1BA992990](*a1, 0x1000C8077774924);
    *a1 = 0;
  }
  return a1;
}

uint64_t sub_1B4BB5504(uint64_t *a1)
{
  sub_1B4BB5550(a1, 0);
  uint64_t result = *a1;
  if (*a1)
  {
    uint64_t result = MEMORY[0x1BA992990](result, 0x1000C8077774924);
    *a1 = 0;
  }
  a1[1] = 0;
  a1[2] = 0;
  return result;
}

void *sub_1B4BB5550(void *result, unint64_t a2)
{
  unint64_t v2 = result[1];
  if (v2 > a2)
  {
    result[1] = a2;
    unint64_t v2 = a2;
  }
  if (result[2] < a2) {
    sub_1B4BB55D4((uint64_t)result, a2);
  }
  for (; v2 < a2; unint64_t v2 = result[1])
  {
    result[1] = v2 + 1;
    uint64_t v3 = *result + 12 * v2;
    *(_DWORD *)(v3 + 7) = 0;
    *(void *)uint64_t v3 = 0;
  }
  return result;
}

void sub_1B4BB55D4(uint64_t a1, unint64_t a2)
{
  if (a2 < 2 * *(void *)(a1 + 16))
  {
    uint64_t v2 = 1;
    do
    {
      unint64_t v3 = v2;
      v2 *= 2;
    }
    while (v3 < a2);
  }
  operator new[]();
}

void *sub_1B4BB5724(uint64_t *a1)
{
  int v7 = 0;
  sub_1B4BB5A68(a1 + 15, 0x400uLL, &v7);
  uint64_t v2 = a1[22];
  if (v2)
  {
    uint64_t v3 = *a1 + 12 * *(unsigned int *)(a1[21] + 4 * v2 - 4);
    *(_DWORD *)(v3 + 7) = 0;
    *(void *)uint64_t v3 = 0;
    --a1[22];
  }
  else
  {
    sub_1B4BB5AF0(a1);
  }
  sub_1B4BB5B48(a1 + 9);
  sub_1B4BB5B98(a1 + 3);
  uint64_t v4 = a1[7];
  if (v4 == a1[8]) {
    sub_1B4BB44A0((uint64_t)(a1 + 6), v4 + 1);
  }
  a1[7] = v4 + 1;
  a1[24] = 1;
  *(unsigned char *)(*a1 + 8) = -1;
  int v6 = 0;
  return sub_1B4BB5BE4(a1 + 18, &v6);
}

void *sub_1B4BB57F8(void *result, uint64_t a2, unint64_t a3, int a4)
{
  if (a4 < 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    uint64_t v23 = "/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/darts_clone/darts.h:1106: exception: failed to"
          " insert key: negative value";
    goto LABEL_27;
  }
  if (!a3)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    uint64_t v23 = "/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/darts_clone/darts.h:1108: exception: failed to"
          " insert key: zero-length key";
LABEL_27:
    void *exception = &unk_1F0D54FD0;
    exception[1] = v23;
    __cxa_throw(exception, (struct type_info *)&unk_1F0D53468, (void (*)(void *))std::exception::~exception);
  }
  int v5 = a4;
  int v7 = result;
  unint64_t v8 = 0;
  unsigned int v9 = 0;
  uint64_t v10 = *result;
  while (1)
  {
    unsigned int v11 = *(_DWORD *)(v10 + 12 * v9);
    if (!v11) {
      goto LABEL_12;
    }
    unsigned int v12 = *(unsigned __int8 *)(a2 + v8);
    if (v8 < a3 && !*(unsigned char *)(a2 + v8))
    {
      exception = __cxa_allocate_exception(0x10uLL);
      uint64_t v23 = "/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/darts_clone/darts.h:1122: exception: failed "
            "to insert key: invalid null character";
      goto LABEL_27;
    }
    unsigned int v13 = *(unsigned __int8 *)(v10 + 12 * v11 + 8);
    if (v12 < v13)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      uint64_t v23 = "/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/darts_clone/darts.h:1127: exception: failed "
            "to insert key: wrong key order";
      goto LABEL_27;
    }
    if (v12 > v13) {
      break;
    }
    ++v8;
    unsigned int v9 = *(_DWORD *)(v10 + 12 * v9);
    if (v8 > a3) {
      return result;
    }
  }
  *(unsigned char *)(v10 + 12 * v11 + 10) = 1;
  uint64_t result = (void *)sub_1B4BB5C38((uint64_t)result, v11);
LABEL_12:
  if (v8 <= a3)
  {
    int v24 = v5;
    do
    {
      if (v8 >= a3) {
        char v14 = 0;
      }
      else {
        char v14 = *(unsigned char *)(a2 + v8);
      }
      unsigned int v25 = 0;
      uint64_t v15 = v7[22];
      if (v15)
      {
        unsigned int v16 = *(_DWORD *)(v7[21] + 4 * v15 - 4);
        uint64_t v17 = *v7 + 12 * v16;
        *(_DWORD *)(v17 + 7) = 0;
        *(void *)uint64_t v17 = 0;
        --v7[22];
      }
      else
      {
        unsigned int v16 = *((_DWORD *)v7 + 2);
        sub_1B4BB5AF0(v7);
      }
      unsigned int v25 = v16;
      uint64_t v18 = *v7;
      uint64_t v19 = (int *)(*v7 + 12 * v9);
      int v20 = *v19;
      if (!*v19) {
        *(unsigned char *)(v18 + 12 * v16 + 9) = 1;
      }
      *(_DWORD *)(v18 + 12 * v16 + 4) = v20;
      unsigned int v21 = v25;
      *(unsigned char *)(v18 + 12 * v25 + 8) = v14;
      *uint64_t v19 = v21;
      uint64_t result = sub_1B4BB5BE4(v7 + 18, &v25);
      unsigned int v9 = v25;
      ++v8;
    }
    while (v8 <= a3);
    int v5 = v24;
  }
  *(_DWORD *)(*v7 + 12 * v9) = v5;
  return result;
}

uint64_t *sub_1B4BB5A68(uint64_t *result, unint64_t a2, _DWORD *a3)
{
  unint64_t v3 = result[1];
  if (v3 > a2)
  {
    result[1] = a2;
    unint64_t v3 = a2;
  }
  if (result[2] < a2) {
    sub_1B4BB504C((uint64_t)result, a2);
  }
  if (v3 < a2)
  {
    uint64_t v4 = *result;
    do
      *(_DWORD *)(v4 + 4 * v3++) = *a3;
    while (a2 != v3);
    result[1] = a2;
  }
  return result;
}

void *sub_1B4BB5AF0(void *result)
{
  uint64_t v1 = result[1];
  if (v1 == result[2]) {
    sub_1B4BB55D4((uint64_t)result, v1 + 1);
  }
  result[1] = v1 + 1;
  uint64_t v2 = *result + 12 * v1;
  *(_DWORD *)(v2 + 7) = 0;
  *(void *)uint64_t v2 = 0;
  return result;
}

void *sub_1B4BB5B48(void *result)
{
  uint64_t v1 = result;
  uint64_t v2 = result[5];
  if ((v2 & 0x1F) == 0)
  {
    int v3 = 0;
    uint64_t result = sub_1B4BB5BE4(result, &v3);
    uint64_t v2 = v1[5];
  }
  v1[5] = v2 + 1;
  return result;
}

void *sub_1B4BB5B98(void *result)
{
  uint64_t v1 = result[1];
  if (v1 == result[2]) {
    sub_1B4BB537C((uint64_t)result, v1 + 1);
  }
  result[1] = v1 + 1;
  *(_DWORD *)(*result + 4 * v1) = 0;
  return result;
}

void *sub_1B4BB5BE4(void *result, _DWORD *a2)
{
  uint64_t v2 = result[1];
  if (v2 == result[2]) {
    sub_1B4BB504C((uint64_t)result, v2 + 1);
  }
  result[1] = v2 + 1;
  *(_DWORD *)(*result + 4 * v2) = *a2;
  return result;
}

uint64_t sub_1B4BB5C38(uint64_t result, int a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *(void *)(result + 152) - 1;
  unsigned int v4 = *(_DWORD *)(*(void *)(result + 144) + 4 * v3);
  if (v4 != a2)
  {
    uint64_t v35 = (uint64_t *)(result + 120);
    int v5 = (void *)(result + 24);
    int v6 = (void *)(result + 72);
    while (1)
    {
      *(void *)(v2 + 152) = v3;
      unint64_t v7 = *(void *)(v2 + 128);
      if (*(void *)(v2 + 192) >= v7 - (v7 >> 2))
      {
        unint64_t v8 = 2 * v7;
        sub_1B4BB4FA0(v35);
        int v38 = 0;
        sub_1B4BB5A68(v35, v8, &v38);
        unint64_t v9 = *(void *)(v2 + 32);
        if (v9 >= 2)
        {
          uint64_t v10 = *(void *)(v2 + 48);
          for (uint64_t i = 1; i != v9; ++i)
          {
            if (!*(unsigned char *)(v10 + i) || (*(_DWORD *)(*v5 + 4 * i) & 2) != 0)
            {
              unsigned int v12 = 0;
              if (i)
              {
                unsigned int v13 = i;
                do
                {
                  int v14 = *(_DWORD *)(*v5 + 4 * v13);
                  unsigned int v15 = (v14 ^ ~(*(unsigned __int8 *)(v10 + v13) << 24)) + (v14 << 15);
                  unsigned int v16 = 2057 * ((5 * (v15 ^ (v15 >> 12))) ^ ((5 * (v15 ^ (v15 >> 12))) >> 4));
                  v12 ^= HIWORD(v16) ^ v16;
                  BOOL v17 = __CFADD__(v13++, 1);
                }
                while (!v17 && (v14 & 1) != 0);
              }
              uint64_t v18 = *(void *)(v2 + 120);
              do
              {
                unint64_t v19 = (unint64_t)v12 % *(void *)(v2 + 128);
                unsigned int v12 = v19 + 1;
              }
              while (*(_DWORD *)(v18 + 4 * v19));
              *(_DWORD *)(v18 + 4 * v19) = i;
            }
          }
        }
      }
      int v20 = 0;
      if (v4)
      {
        unsigned int v21 = v4;
        do
        {
          ++v20;
          unsigned int v21 = *(_DWORD *)(*(void *)v2 + 12 * v21 + 4);
        }
        while (v21);
      }
      unsigned int v37 = 0;
      uint64_t result = sub_1B4BB5F24((uint64_t *)v2, v4, &v37);
      if (result)
      {
        unsigned int v22 = result;
        *(_DWORD *)(*v6 + 4 * (result >> 5)) |= 1 << result;
        if (v4) {
          goto LABEL_22;
        }
        goto LABEL_23;
      }
      if (!v20) {
        break;
      }
      do
      {
        sub_1B4BB5B48((void *)(v2 + 72));
        uint64_t result = (uint64_t)sub_1B4BB5B98((void *)(v2 + 24));
        uint64_t v25 = *(void *)(v2 + 56);
        if (v25 == *(void *)(v2 + 64)) {
          sub_1B4BB44A0(v2 + 48, v25 + 1);
        }
        *(void *)(v2 + 56) = v25 + 1;
        --v20;
      }
      while (v20);
      unsigned int v26 = *(_DWORD *)(v2 + 112) - 1;
      if (v4) {
        goto LABEL_32;
      }
LABEL_37:
      unsigned int v22 = v26 + 1;
      *(_DWORD *)(*(void *)(v2 + 120) + 4 * v37) = v26 + 1;
      ++*(void *)(v2 + 192);
      if (v4)
      {
        do
        {
LABEL_22:
          unsigned int v23 = *(_DWORD *)(*(void *)v2 + 12 * v4 + 4);
          unsigned int v39 = v4;
          uint64_t result = (uint64_t)sub_1B4BB5BE4((void *)(v2 + 168), &v39);
          unsigned int v4 = v23;
        }
        while (v23);
      }
LABEL_23:
      uint64_t v24 = *(void *)(v2 + 144);
      uint64_t v3 = *(void *)(v2 + 152) - 1;
      *(_DWORD *)(*(void *)v2 + 12 * *(unsigned int *)(v24 + 4 * v3)) = v22;
      unsigned int v4 = *(_DWORD *)(v24 + 4 * v3);
      if (v4 == a2) {
        goto LABEL_2;
      }
    }
    unsigned int v26 = 0;
    if (!v4) {
      goto LABEL_37;
    }
LABEL_32:
    uint64_t v27 = *(void *)v2;
    unsigned int v28 = v4;
    do
    {
      uint64_t v29 = v28;
      uint64_t v30 = v27 + 12 * v28;
      int v31 = *(unsigned __int8 *)(v30 + 8);
      int v32 = *(_DWORD *)v30;
      if (v31) {
        int v33 = (2 * *(unsigned __int8 *)(v27 + 12 * v29 + 9)) | (4 * v32);
      }
      else {
        int v33 = 2 * v32;
      }
      uint64_t v34 = 3 * v29;
      *(_DWORD *)(*(void *)(v2 + 24) + 4 * v26) = v33 | *(unsigned __int8 *)(v27 + 4 * v34 + 10);
      *(unsigned char *)(*(void *)(v2 + 48) + v26--) = v31;
      uint64_t v27 = *(void *)v2;
      unsigned int v28 = *(_DWORD *)(*(void *)v2 + 4 * v34 + 4);
    }
    while (v28);
    goto LABEL_37;
  }
LABEL_2:
  *(void *)(v2 + 152) = v3;
  return result;
}

uint64_t sub_1B4BB5F24(uint64_t *a1, unsigned int a2, _DWORD *a3)
{
  uint64_t v3 = a2;
  if (a2)
  {
    LODWORD(v4) = 0;
    uint64_t v5 = *a1;
    uint64_t v6 = a2;
    do
    {
      unint64_t v7 = (int *)(v5 + 12 * v6);
      int v8 = *((unsigned __int8 *)v7 + 8);
      int v9 = *v7;
      if (v8) {
        int v10 = (2 * *(unsigned __int8 *)(v5 + 12 * v6 + 9)) | (4 * v9);
      }
      else {
        int v10 = 2 * v9;
      }
      uint64_t v11 = v5 + 12 * v6;
      unsigned int v12 = ((v10 | *(unsigned __int8 *)(v11 + 10)) ^ ~(v8 << 24)) + ((v10 | *(unsigned __int8 *)(v11 + 10)) << 15);
      unsigned int v13 = 2057 * ((5 * (v12 ^ (v12 >> 12))) ^ ((5 * (v12 ^ (v12 >> 12))) >> 4));
      unint64_t v4 = v4 ^ HIWORD(v13) ^ v13;
      uint64_t v6 = *(unsigned int *)(v11 + 4);
    }
    while (v6);
  }
  else
  {
    unint64_t v4 = 0;
  }
  uint64_t v15 = a1[15];
  unint64_t v14 = a1[16];
  unint64_t v16 = v4 % v14;
  *a3 = v4 % v14;
  uint64_t v17 = *(unsigned int *)(v15 + 4 * (v4 % v14));
  if (v17)
  {
    uint64_t v18 = *a1;
    unint64_t v19 = (unsigned int *)(*a1 + 12 * a2 + 4);
    uint64_t v20 = a1[3];
    do
    {
      uint64_t v21 = *v19;
      unsigned int v22 = v17;
      if (v21)
      {
        unsigned int v22 = v17;
        while ((*(_DWORD *)(v20 + 4 * v22) & 1) != 0)
        {
          ++v22;
          LODWORD(v21) = *(_DWORD *)(v18 + 12 * v21 + 4);
          if (!v21) {
            goto LABEL_15;
          }
        }
      }
      else
      {
LABEL_15:
        if ((*(_DWORD *)(v20 + 4 * v22) & 1) == 0)
        {
          if (!v3) {
            return v17;
          }
          uint64_t v23 = v3;
          while (1)
          {
            uint64_t v24 = (int *)(v18 + 12 * v23);
            int v25 = *((unsigned __int8 *)v24 + 8);
            int v26 = *v24;
            int v27 = v25 ? (2 * *(unsigned __int8 *)(v18 + 12 * v23 + 9)) | (4 * v26) : 2 * v26;
            if ((v27 | *(unsigned __int8 *)(v18 + 12 * v23 + 10)) != *(_DWORD *)(v20 + 4 * v22)
              || v25 != *(unsigned __int8 *)(a1[6] + v22))
            {
              break;
            }
            uint64_t v23 = *(unsigned int *)(v18 + 12 * v23 + 4);
            --v22;
            if (!v23) {
              return v17;
            }
          }
        }
      }
      unint64_t v16 = (v16 + 1) % v14;
      *a3 = v16;
      uint64_t v17 = *(unsigned int *)(v15 + 4 * v16);
    }
    while (v17);
  }
  return v17;
}

void sub_1B4BB6090()
{
}

unsigned int *sub_1B4BB61D4(unsigned int *result, unsigned int a2)
{
  if (a2 >> 29)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    void *exception = &unk_1F0D54FD0;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/darts_clone/darts.h:1339: exception: "
                   "failed to modify unit: too large offset";
    __cxa_throw(exception, (struct type_info *)&unk_1F0D53468, (void (*)(void *))std::exception::~exception);
  }
  int v2 = (4 * a2) | 0x200;
  if (a2 < 0x200000) {
    int v2 = a2 << 10;
  }
  uint64_t *result = *result & 0x800001FF | v2;
  return result;
}

unsigned int *sub_1B4BB625C(uint64_t a1, void *a2, unsigned int a3, unsigned int a4)
{
  int v8 = a2 + 9;
  unint64_t v9 = *(unsigned int *)(a2[3] + 4 * a3);
  unint64_t v10 = v9 >> 2;
  unint64_t v11 = v9 >> 7;
  int v12 = 1 << (v9 >> 2);
  if ((v12 & *(_DWORD *)(a2[9] + 4 * (v9 >> 7))) != 0
    && (int v13 = *(_DWORD *)(*(void *)(a1 + 64) + 4 * (sub_1B4BB6898(a2 + 9, v10) - 1))) != 0
    && ((unsigned int v14 = v13 ^ a4, ((v13 ^ a4) & 0x1FE00000) != 0) ? (v15 = (v13 ^ a4) == 0) : (v15 = 1), v15))
  {
    if (*(unsigned char *)(a2[6] + v10))
    {
      uint64_t v16 = *(void *)(a1 + 8);
      uint64_t v17 = a4;
    }
    else
    {
      uint64_t v17 = a4;
      uint64_t v16 = *(void *)(a1 + 8);
      *(_DWORD *)(v16 + 4 * a4) |= 0x100u;
    }
    return sub_1B4BB61D4((unsigned int *)(v16 + 4 * v17), v14);
  }
  else
  {
    uint64_t result = (unsigned int *)sub_1B4BB65E8(a1, (uint64_t)a2, a3, a4);
    int v19 = (int)result;
    if ((*(_DWORD *)(a2[9] + 4 * v11) & v12) != 0)
    {
      uint64_t result = (unsigned int *)sub_1B4BB6898(v8, v10);
      *(_DWORD *)(*(void *)(a1 + 64) + 4 * (result - 1)) = v19;
    }
    do
    {
      if (*(unsigned char *)(a2[6] + v10)) {
        uint64_t result = (unsigned int *)sub_1B4BB625C(a1, a2, v10, v19 ^ *(unsigned __int8 *)(a2[6] + v10));
      }
      if (v10 == -1) {
        break;
      }
      int v20 = *(_DWORD *)(a2[3] + 4 * v10);
      LODWORD(v10) = v10 + 1;
    }
    while ((v20 & 1) != 0);
  }
  return result;
}

void sub_1B4BB63D4(uint64_t a1)
{
  int v2 = (void *)(a1 + 8);
  unint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = (v3 + 256);
  unsigned int v5 = (v3 >> 8) - 16;
  if (v5 >= 0xFFFFFFEF)
  {
    sub_1B4BB46C8((void *)(a1 + 8), (v3 + 256));
  }
  else
  {
    int v6 = 0;
    unint64_t v7 = v5 << 8;
    uint64_t v8 = *(void *)(a1 + 32);
    while (1)
    {
      char v9 = v7 + v6;
      if (!*(unsigned char *)(v8 + 12 * ((v7 + v6) & 0xFFF) + 9)) {
        break;
      }
      if (++v6 == 256)
      {
        char v9 = 0;
        break;
      }
    }
    uint64_t v10 = 0;
    uint64_t v11 = 3072 * ((v3 >> 8) & 0xF);
    do
    {
      if (!*(unsigned char *)(v8 + v11 + v10 + 8))
      {
        if (*(void *)(a1 + 16) <= v7)
        {
          sub_1B4BB63D4(a1);
          uint64_t v8 = *(void *)(a1 + 32);
        }
        int v12 = (int *)(v8 + v11 + v10);
        uint64_t v13 = v12[1];
        if (v7 == *(_DWORD *)(a1 + 72))
        {
          *(_DWORD *)(a1 + 72) = v13;
          if (v7 == v13) {
            *(_DWORD *)(a1 + 72) = *(void *)(a1 + 16);
          }
        }
        int v14 = *v12;
        *(_DWORD *)(v8 + 12 * (*v12 & 0xFFF) + 4) = v13;
        *(_DWORD *)(v8 + 12 * (v12[1] & 0xFFF)) = v14;
        *((unsigned char *)v12 + 8) = 1;
        *(unsigned char *)(*v2 + 4 * v7) = v9 ^ v7;
      }
      ++v7;
      v10 += 12;
    }
    while (v10 != 3072);
    sub_1B4BB46C8(v2, (v3 + 256));
    uint64_t v15 = v3;
    if (v3 < (unint64_t)v4)
    {
      uint64_t v16 = *(void *)(a1 + 32);
      do
        *(_WORD *)(v16 + 12 * (v15++ & 0xFFF) + 8) = 0;
      while (v4 != v15);
    }
  }
  uint64_t v17 = *(void *)(a1 + 32);
  if ((int)v3 + 1 < v4)
  {
    for (int i = 0; i != 255; ++i)
    {
      int v19 = v3 + i;
      *(_DWORD *)(v17 + 12 * (v19 & 0xFFF) + 4) = v19 + 1;
      *(_DWORD *)(v17 + 12 * ((v19 + 1) & 0xFFF)) = v19;
    }
  }
  uint64_t v20 = 12 * (v3 & 0xFFF);
  *(_DWORD *)(v17 + v20) = v3 + 255;
  int v21 = *(_DWORD *)(a1 + 72);
  uint64_t v22 = 12 * (v21 & 0xFFF);
  *(_DWORD *)(v17 + v20) = *(_DWORD *)(v17 + v22);
  LOWORD(v20) = *(_DWORD *)(v17 + v22);
  *(_DWORD *)(v17 + 12 * ((v3 + 255) & 0xFFF) + 4) = v21;
  *(_DWORD *)(v17 + 12 * (v20 & 0xFFF) + 4) = v3;
  *(_DWORD *)(v17 + v22) = v3 + 255;
}

uint64_t sub_1B4BB65E8(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4)
{
  uint64_t v8 = (void *)(a1 + 40);
  sub_1B4BB4440(a1 + 40, 0);
  unsigned int v9 = *(_DWORD *)(*(void *)(a2 + 24) + 4 * a3);
  if (v9 >= 4)
  {
    unsigned int v10 = v9 >> 2;
    do
    {
      char v35 = *(unsigned char *)(*(void *)(a2 + 48) + v10);
      sub_1B4BB68FC(v8, &v35);
      int v11 = *(_DWORD *)(*(void *)(a2 + 24) + 4 * v10);
      BOOL v13 = __CFADD__(v10++, 1);
    }
    while ((v11 & 1) != 0 && !v13);
  }
  unint64_t v14 = *(unsigned int *)(a1 + 72);
  unint64_t v15 = *(void *)(a1 + 16);
  if (v15 <= v14)
  {
LABEL_20:
    uint64_t v19 = a4 | v15;
  }
  else
  {
    uint64_t v17 = *(void *)(a1 + 32);
    uint64_t v16 = *(unsigned __int8 **)(a1 + 40);
    int v18 = *(_DWORD *)(a1 + 72);
    while (1)
    {
      uint64_t v19 = v18 ^ *v16;
      int v20 = ((unsigned __int16)v18 ^ *v16) & 0xFFF;
      if (!*(unsigned char *)(v17 + 12 * (((unsigned __int16)v18 ^ *v16) & 0xFFF) + 9)
        && (!((v18 ^ *v16) ^ a4) || ((v19 ^ a4) & 0x1FE00000) == 0))
      {
        unint64_t v21 = *(void *)(a1 + 48);
        if (v21 < 2) {
          goto LABEL_21;
        }
        if (!*(unsigned char *)(v17 + 12 * (v20 ^ v16[1]) + 8)) {
          break;
        }
      }
LABEL_19:
      int v18 = *(_DWORD *)(v17 + 12 * (v18 & 0xFFF) + 4);
      if (v18 == v14) {
        goto LABEL_20;
      }
    }
    uint64_t v22 = 2;
    while (v21 != v22)
    {
      if (*(unsigned __int8 *)(v17 + 12 * (v20 ^ v16[v22++]) + 8))
      {
        if (v22 - 1 >= v21) {
          break;
        }
        goto LABEL_19;
      }
    }
  }
LABEL_21:
  sub_1B4BB61D4((unsigned int *)(*(void *)(a1 + 8) + 4 * a4), v19 ^ a4);
  if (*(void *)(a1 + 48))
  {
    unint64_t v24 = 0;
    unsigned int v25 = *(_DWORD *)(*(void *)(a2 + 24) + 4 * a3) >> 2;
    do
    {
      unint64_t v26 = v19 ^ *(unsigned __int8 *)(*(void *)(a1 + 40) + v24);
      if (*(void *)(a1 + 16) <= v26) {
        sub_1B4BB63D4(a1);
      }
      if (*(_DWORD *)(a1 + 72) == v26)
      {
        unsigned int v27 = v26 & 0xFFF;
        uint64_t v28 = *(void *)(a1 + 32);
        int v29 = *(_DWORD *)(v28 + 12 * (v26 & 0xFFF) + 4);
        *(_DWORD *)(a1 + 72) = v29;
        if (v29 == v26)
        {
          *(_DWORD *)(a1 + 72) = *(void *)(a1 + 16);
          int v29 = v26;
        }
      }
      else
      {
        uint64_t v28 = *(void *)(a1 + 32);
        unsigned int v27 = v26 & 0xFFF;
        int v29 = *(_DWORD *)(v28 + 12 * (v26 & 0xFFF) + 4);
      }
      uint64_t v30 = (int *)(v28 + 12 * v27);
      int v31 = *v30;
      *(_DWORD *)(v28 + 12 * (*v30 & 0xFFF) + 4) = v29;
      *(_DWORD *)(v28 + 12 * (v30[1] & 0xFFF)) = v31;
      *((unsigned char *)v30 + 8) = 1;
      uint64_t v32 = *(void *)(a1 + 8);
      if (*(unsigned char *)(*(void *)(a2 + 48) + v25))
      {
        *(unsigned char *)(v32 + 4 * v26) = *(unsigned char *)(*v8 + v24);
        unsigned int v33 = *(_DWORD *)(*(void *)(a2 + 24) + 4 * v25);
      }
      else
      {
        *(_DWORD *)(v32 + 4 * a4) |= 0x100u;
        unsigned int v33 = *(_DWORD *)(*(void *)(a2 + 24) + 4 * v25);
        *(_DWORD *)(v32 + 4 * v26) = (v33 >> 1) | 0x80000000;
      }
      unsigned int v25 = ((int)(v33 << 31) >> 31) & (v25 + 1);
      ++v24;
    }
    while (v24 < *(void *)(a1 + 48));
  }
  else
  {
    uint64_t v28 = *(void *)(a1 + 32);
  }
  *(unsigned char *)(v28 + 12 * (v19 & 0xFFF) + 9) = 1;
  return v19;
}

uint64_t sub_1B4BB6898(void *a1, unint64_t a2)
{
  uint64_t v2 = (a2 >> 3) & 0x1FFFFFFFFFFFFFFCLL;
  int v3 = *(_DWORD *)(a1[3] + v2);
  LODWORD(v2) = *(_DWORD *)(*a1 + v2) & (0xFFFFFFFF >> ~(_BYTE)a2);
  LODWORD(v2) = ((((unint64_t)(((v2 >> 1) & 0x55555555) + (v2 & 0x55555555)) >> 2) & 0x33333333)
               + ((((v2 >> 1) & 0x55555555) + (v2 & 0x55555555)) & 0x33333333)
               + (((((unint64_t)(((v2 >> 1) & 0x55555555) + (v2 & 0x55555555)) >> 2) & 0x33333333)
                 + ((((v2 >> 1) & 0x55555555) + (v2 & 0x55555555)) & 0x33333333)) >> 4)) & 0xF0F0F0F;
  return (((_BYTE)v2 + BYTE1(v2) + ((v2 + (v2 >> 8)) >> 16)) & 0x3Fu) + v3;
}

void *sub_1B4BB68FC(void *result, unsigned char *a2)
{
  uint64_t v2 = result[1];
  if (v2 == result[2]) {
    sub_1B4BB44A0((uint64_t)result, v2 + 1);
  }
  result[1] = v2 + 1;
  *(unsigned char *)(*result + v2) = *a2;
  return result;
}

uint64_t *sub_1B4BB6950(uint64_t *a1)
{
  sub_1B4BB5504(a1);
  sub_1B4BB52C0(a1 + 3);
  sub_1B4BB43F4(a1 + 6);
  sub_1B4BB5230(a1 + 9);
  sub_1B4BB4FA0(a1 + 15);
  sub_1B4BB4FA0(a1 + 18);
  sub_1B4BB4FA0(a1 + 21);
  a1[24] = 0;
  sub_1B4BB4F64(a1 + 21);
  sub_1B4BB4F64(a1 + 18);
  sub_1B4BB5188(a1 + 15);
  sub_1B4BB51D4(a1 + 9);
  sub_1B4BB43A8(a1 + 6);
  sub_1B4BB5274(a1 + 3);
  return sub_1B4BB54B8(a1);
}

uint64_t sub_1B4BB6A20(uint64_t a1, void *a2, unint64_t a3, unint64_t a4, unint64_t a5, unsigned int a6)
{
  while (1)
  {
    uint64_t result = sub_1B4BB6B88(a1, a2, a3, a4, a5, a6);
    int v12 = result;
    if (a3 < a4)
    {
      uint64_t v13 = a2[2];
      while (v13 && *(void *)(v13 + 8 * a3) <= a5 || !*(unsigned char *)(*(void *)(a2[1] + 8 * a3) + a5))
      {
        if (a4 == ++a3) {
          return result;
        }
      }
    }
    if (a3 == a4) {
      break;
    }
    uint64_t v14 = a2[2];
    if (v14 && *(void *)(v14 + 8 * a3) <= a5) {
      unsigned int v15 = 0;
    }
    else {
      unsigned int v15 = *(unsigned __int8 *)(*(void *)(a2[1] + 8 * a3) + a5);
    }
    unint64_t v16 = a3 + 1;
    if (a3 + 1 < a4)
    {
      do
      {
        if (v14 && *(void *)(v14 + 8 * v16) <= a5) {
          int v17 = 0;
        }
        else {
          int v17 = *(unsigned __int8 *)(*(void *)(a2[1] + 8 * v16) + a5);
        }
        if (v17 != v15)
        {
          sub_1B4BB6A20(a1, a2, a3, v16, a5 + 1, v12 ^ v15);
          uint64_t v14 = a2[2];
          if (v14 && *(void *)(v14 + 8 * v16) <= a5) {
            unsigned int v15 = 0;
          }
          else {
            unsigned int v15 = *(unsigned __int8 *)(*(void *)(a2[1] + 8 * v16) + a5);
          }
          a3 = v16;
        }
        ++v16;
      }
      while (a4 != v16);
    }
    a6 = v12 ^ v15;
    ++a5;
  }
  return result;
}

uint64_t sub_1B4BB6B88(uint64_t a1, void *a2, unint64_t a3, unint64_t a4, unint64_t a5, unsigned int a6)
{
  int v12 = (uint64_t *)(a1 + 40);
  sub_1B4BB4440(a1 + 40, 0);
  int v13 = -1;
  if (a3 < a4)
  {
    do
    {
      unsigned __int8 v41 = 0;
      uint64_t v14 = a2[2];
      if (v14)
      {
        if (*(void *)(v14 + 8 * a3) > a5)
        {
          unsigned __int8 v41 = *(unsigned char *)(*(void *)(a2[1] + 8 * a3) + a5);
          if (!v41)
          {
            exception = __cxa_allocate_exception(0x10uLL);
            unint64_t v40 = "/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/darts_clone/darts.h:1675: exception: f"
                  "ailed to build double-array: invalid null character";
            goto LABEL_52;
          }
          goto LABEL_17;
        }
      }
      else
      {
        unsigned __int8 v41 = *(unsigned char *)(*(void *)(a2[1] + 8 * a3) + a5);
        if (v41) {
          goto LABEL_17;
        }
      }
      uint64_t v15 = a2[3];
      if (v15)
      {
        if ((*(_DWORD *)(v15 + 4 * a3) & 0x80000000) != 0) {
          goto LABEL_51;
        }
      }
      else if ((a3 & 0x80000000) != 0)
      {
LABEL_51:
        exception = __cxa_allocate_exception(0x10uLL);
        unint64_t v40 = "/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/darts_clone/darts.h:1677: exception: faile"
              "d to build double-array: negative value";
LABEL_52:
        void *exception = &unk_1F0D54FD0;
        exception[1] = v40;
        __cxa_throw(exception, (struct type_info *)&unk_1F0D53468, (void (*)(void *))std::exception::~exception);
      }
      if (v13 == -1)
      {
        if (v15) {
          int v13 = *(_DWORD *)(v15 + 4 * a3);
        }
        else {
          int v13 = a3;
        }
      }
      if (*(void *)a1) {
        (*(void (**)(unint64_t, uint64_t))a1)(a3 + 1, *a2 + 1);
      }
LABEL_17:
      uint64_t v16 = *(void *)(a1 + 48);
      if (!v16) {
        goto LABEL_21;
      }
      unsigned int v17 = *(unsigned __int8 *)(v16 + *v12 - 1);
      if (v41 != v17)
      {
        if (v41 < v17)
        {
          exception = __cxa_allocate_exception(0x10uLL);
          unint64_t v40 = "/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/darts_clone/darts.h:1692: exception: fai"
                "led to build double-array: wrong key order";
          goto LABEL_52;
        }
LABEL_21:
        sub_1B4BB68FC(v12, &v41);
      }
      ++a3;
    }
    while (a4 != a3);
  }
  unint64_t v18 = *(unsigned int *)(a1 + 72);
  unint64_t v19 = *(void *)(a1 + 16);
  if (v19 <= v18)
  {
LABEL_35:
    uint64_t v23 = a6 | v19;
  }
  else
  {
    uint64_t v21 = *(void *)(a1 + 32);
    int v20 = *(unsigned __int8 **)(a1 + 40);
    int v22 = *(_DWORD *)(a1 + 72);
    while (1)
    {
      uint64_t v23 = v22 ^ *v20;
      int v24 = ((unsigned __int16)v22 ^ *v20) & 0xFFF;
      if (!*(unsigned char *)(v21 + 12 * (((unsigned __int16)v22 ^ *v20) & 0xFFF) + 9)
        && (!((v22 ^ *v20) ^ a6) || ((v23 ^ a6) & 0x1FE00000) == 0))
      {
        unint64_t v25 = *(void *)(a1 + 48);
        if (v25 < 2) {
          goto LABEL_36;
        }
        if (!*(unsigned char *)(v21 + 12 * (v24 ^ v20[1]) + 8)) {
          break;
        }
      }
LABEL_34:
      int v22 = *(_DWORD *)(v21 + 12 * (v22 & 0xFFF) + 4);
      if (v22 == v18) {
        goto LABEL_35;
      }
    }
    uint64_t v26 = 2;
    while (v25 != v26)
    {
      if (*(unsigned __int8 *)(v21 + 12 * (v24 ^ v20[v26++]) + 8))
      {
        if (v26 - 1 >= v25) {
          break;
        }
        goto LABEL_34;
      }
    }
  }
LABEL_36:
  sub_1B4BB61D4((unsigned int *)(*(void *)(a1 + 8) + 4 * a6), v23 ^ a6);
  if (*(void *)(a1 + 48))
  {
    unint64_t v28 = 0;
    unsigned int v29 = v13 | 0x80000000;
    uint64_t v30 = *v12;
    do
    {
      unint64_t v31 = v23 ^ *(unsigned __int8 *)(v30 + v28);
      if (*(void *)(a1 + 16) <= v31) {
        sub_1B4BB63D4(a1);
      }
      if (*(_DWORD *)(a1 + 72) == v31)
      {
        unsigned int v32 = v31 & 0xFFF;
        uint64_t v33 = *(void *)(a1 + 32);
        int v34 = *(_DWORD *)(v33 + 12 * (v31 & 0xFFF) + 4);
        *(_DWORD *)(a1 + 72) = v34;
        if (v34 == v31)
        {
          *(_DWORD *)(a1 + 72) = *(void *)(a1 + 16);
          int v34 = v31;
        }
      }
      else
      {
        uint64_t v33 = *(void *)(a1 + 32);
        unsigned int v32 = v31 & 0xFFF;
        int v34 = *(_DWORD *)(v33 + 12 * (v31 & 0xFFF) + 4);
      }
      char v35 = (int *)(v33 + 12 * v32);
      int v36 = *v35;
      *(_DWORD *)(v33 + 12 * (*v35 & 0xFFF) + 4) = v34;
      *(_DWORD *)(v33 + 12 * (v35[1] & 0xFFF)) = v36;
      *((unsigned char *)v35 + 8) = 1;
      uint64_t v30 = *(void *)(a1 + 40);
      uint64_t v37 = *(void *)(a1 + 8);
      if (*(unsigned char *)(v30 + v28))
      {
        *(unsigned char *)(v37 + 4 * v31) = *(unsigned char *)(v30 + v28);
      }
      else
      {
        *(_DWORD *)(v37 + 4 * a6) |= 0x100u;
        *(_DWORD *)(v37 + 4 * v31) = v29;
      }
      ++v28;
    }
    while (v28 < *(void *)(a1 + 48));
  }
  else
  {
    uint64_t v33 = *(void *)(a1 + 32);
  }
  *(unsigned char *)(v33 + 12 * (v23 & 0xFFF) + 9) = 1;
  return v23;
}

uint64_t sub_1B4BB6F30(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  sub_1B4BB467C((uint64_t *)(a1 + 8));
  uint64_t v3 = *(void *)(a1 + 32);
  if (v3)
  {
    MEMORY[0x1BA992990](v3, 0x1000C80CBA68D63);
    *(void *)(a1 + 32) = 0;
  }
  sub_1B4BB43F4((uint64_t *)(a1 + 40));
  uint64_t v4 = *(void *)(a1 + 64);
  if (v4)
  {
    MEMORY[0x1BA992990](v4, 0x1000C8052888210);
    *(void *)(a1 + 64) = 0;
  }
  *(_DWORD *)(a1 + 72) = 0;
  sub_1B4BB43A8((uint64_t *)(a1 + 40));
  uint64_t v5 = *(void *)(a1 + 32);
  if (v5)
  {
    MEMORY[0x1BA992990](v5, 0x1000C80CBA68D63);
    *(void *)(a1 + 32) = 0;
  }
  sub_1B4BB4630(v2);
  return a1;
}

void *sub_1B4BB6FEC(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_1B4BB7064(a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 16 * a2);
    a1[1] = &v4[16 * a2];
  }
  return a1;
}

void sub_1B4BB7048(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_1B4BB7064(void *a1, unint64_t a2)
{
  if (a2 >> 60) {
    sub_1B4BB3244();
  }
  uint64_t result = (char *)sub_1B4BB4140((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

uint64_t sub_1B4BB70A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = &unk_1F0D54080;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = a2 + 16;
  *(void *)(a1 + 40) = 0;
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a3 + 245);
  sub_1B4BE3D84((void *)(a1 + 56));
  unint64_t v5 = *(void *)(a2 + 64) & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v5 + 23) < 0)
  {
    unint64_t v5 = *(void *)v5;
    unint64_t v6 = *(void *)((*(void *)(a2 + 64) & 0xFFFFFFFFFFFFFFFELL) + 8);
  }
  else
  {
    unint64_t v6 = *(unsigned __int8 *)(v5 + 23);
  }
  sub_1B4BB718C((uint64_t *)a1, (unsigned int *)v5, v6);
  return a1;
}

void sub_1B4BB7140(_Unwind_Exception *a1)
{
  sub_1B4BE3D8C(v1);
  uint64_t v4 = *v2;
  *uint64_t v2 = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_1B4BB718C(uint64_t *result, unsigned int *a2, unint64_t a3)
{
  if (a3)
  {
    uint64_t v3 = result;
    v6[0] = 0;
    v6[1] = 0;
    long long v5 = 0uLL;
    sub_1B4BB760C(a2, a3, v6, &v5, &v4);
    sub_1B4BE3FAC(v3 + 7, &v4);
    uint64_t result = sub_1B4BE3D8C(&v4);
    if (!v3[7]) {
      operator new();
    }
  }
  return result;
}

void sub_1B4BB72EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1B4BE3D8C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B4BB7308(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F0D54080;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = a2 + 16;
  *(void *)(a1 + 40) = 0;
  *(unsigned char *)(a1 + 48) = 0;
  sub_1B4BE3D84((void *)(a1 + 56));
  unint64_t v4 = *(void *)(a2 + 64) & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v4 + 23) < 0)
  {
    unint64_t v4 = *(void *)v4;
    unint64_t v5 = *(void *)((*(void *)(a2 + 64) & 0xFFFFFFFFFFFFFFFELL) + 8);
  }
  else
  {
    unint64_t v5 = *(unsigned __int8 *)(v4 + 23);
  }
  sub_1B4BB718C((uint64_t *)a1, (unsigned int *)v4, v5);
  return a1;
}

void sub_1B4BB739C(_Unwind_Exception *a1)
{
  sub_1B4BE3D8C(v1);
  uint64_t v4 = *v2;
  *uint64_t v2 = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_1B4BB73EC(uint64_t *a1, uint64_t a2, _DWORD *a3, unint64_t a4)
{
  *a1 = (uint64_t)&unk_1F0D54080;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = a2;
  a1[5] = 0;
  *((unsigned char *)a1 + 48) = 0;
  unint64_t v7 = a1 + 7;
  sub_1B4BE3D84(a1 + 7);
  int v11 = 0;
  sub_1B4BAF808(a3, a4, &v11, &v10);
  sub_1B4BE3FAC(v7, &v10);
  sub_1B4BE3D8C(&v10);
  (*(void (**)(uint64_t *__return_ptr, uint64_t *))(*a1 + 24))(&v10, a1);
  uint64_t v8 = v10;
  sub_1B4BE3D8C(&v10);
  if (!v8)
  {
    *((unsigned char *)a1 + 48) = v11 != 0;
    sub_1B4BB718C(a1, a3 + 1, a4 - 4);
  }
  return a1;
}

void sub_1B4BB74F4(_Unwind_Exception *a1)
{
  sub_1B4BE3D8C(v1);
  uint64_t v4 = *v2;
  *uint64_t v2 = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  _Unwind_Resume(a1);
}

void *sub_1B4BB755C(void *a1)
{
  *a1 = &unk_1F0D54080;
  sub_1B4BE3D8C(a1 + 7);
  uint64_t v2 = a1[1];
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void sub_1B4BB75D4(void *a1)
{
  sub_1B4BB755C(a1);
  JUMPOUT(0x1BA9929C0);
}

void *sub_1B4BB760C@<X0>(unsigned int *a1@<X0>, unint64_t a2@<X1>, unsigned int **a3@<X2>, void *a4@<X3>, void *a5@<X8>)
{
  if (a2 < 5 || (unint64_t v7 = (unsigned int *)*a1, a2 <= (unint64_t)v7))
  {
    uint64_t v10 = "Blob for normalization rule is broken.";
    uint64_t v11 = 38;
  }
  else
  {
    if ((unint64_t)(v7 + 1) < a2)
    {
      uint64_t v8 = a1 + 1;
      *a3 = v8;
      a3[1] = v7;
      *a4 = (char *)v7 + (void)v8;
      a4[1] = a2 - (void)v7 - 4;
      return sub_1B4BE3D84(a5);
    }
    uint64_t v10 = "Trie data size exceeds the input blob size.";
    uint64_t v11 = 43;
  }
  return (void *)sub_1B4BE3EF0(a5, 13, v10, v11);
}

void *sub_1B4BB7674@<X0>(size_t a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  unint64_t v6 = a3;
  v84 = (void **)a5;
  v85 = (std::string *)a4;
  *(void *)(a5 + 8) = *(void *)a5;
  if (*(char *)(a4 + 23) < 0)
  {
    **(unsigned char **)a4 = 0;
    *(void *)(a4 + 8) = 0;
    if (a3) {
      goto LABEL_3;
    }
LABEL_10:
    return sub_1B4BE3D84(a6);
  }
  *(unsigned char *)a4 = 0;
  *(unsigned char *)(a4 + 23) = 0;
  if (!a3) {
    goto LABEL_10;
  }
LABEL_3:
  uint64_t result = (void *)(*(uint64_t (**)(size_t))(*(void *)a1 + 24))(a1);
  if (*a6) {
    return result;
  }
  sub_1B4BE3D8C(a6);
  int v83 = 0;
  if ((*(unsigned int (**)(void))(**(void **)(a1 + 32) + 24))(*(void *)(a1 + 32)))
  {
    do
    {
      sub_1B4BB7F8C(a1, a2, v6, (uint64_t)&v74);
      if (v75 != 1 || *v74 != 32) {
        goto LABEL_13;
      }
      a2 += (int)v76;
      v83 += v76;
      v6 -= (int)v76;
    }
    while (v6);
    uint64_t v11 = a6;
    return sub_1B4BE3D84(v11);
  }
LABEL_13:
  uint64_t v71 = (uint64_t)a6;
  std::string::reserve(v85, 3 * v6);
  sub_1B4BB8174(v84, 3 * v6);
  v81 = "▁";
  std::string::size_type v82 = 3;
  v80[0] = a1;
  v80[1] = &v83;
  v80[2] = &v85;
  v80[3] = &v84;
  v80[4] = &v81;
  if (!*(unsigned char *)(a1 + 48)
    && (*(unsigned int (**)(void))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32)))
  {
    sub_1B4BB821C((uint64_t)v80);
  }
  int v12 = (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 24))(*(void *)(a1 + 32));
  do
  {
    sub_1B4BB7F8C(a1, a2, v6, (uint64_t)&v74);
    int v13 = v74;
    uint64_t v14 = v75;
    if (v12)
    {
      if (!v75) {
        goto LABEL_66;
      }
      while (*v13 == 32)
      {
        ++v13;
        if (!--v14) {
          goto LABEL_66;
        }
      }
    }
    else if (!v75)
    {
      int v12 = 0;
      goto LABEL_66;
    }
    v72 = a2;
    unint64_t v73 = v6;
    uint64_t v15 = 0;
    do
    {
      int v16 = (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 32))(*(void *)(a1 + 32));
      int v17 = v13[v15];
      if (v16 && v17 == 32)
      {
        std::string::append(v85, v81, v82);
        if (v82)
        {
          for (std::string::size_type i = 0; i < v82; ++i)
          {
            unint64_t v19 = v84;
            uint64_t v20 = v83;
            uint64_t v21 = (char *)v84[1];
            int v22 = (char *)v84[2];
            if (v21 >= v22)
            {
              int v24 = (char *)*v84;
              uint64_t v25 = (v21 - (unsigned char *)*v84) >> 3;
              unint64_t v26 = v25 + 1;
              if ((unint64_t)(v25 + 1) >> 61) {
                goto LABEL_116;
              }
              uint64_t v27 = v22 - v24;
              if (v27 >> 2 > v26) {
                unint64_t v26 = v27 >> 2;
              }
              if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v28 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v28 = v26;
              }
              if (v28)
              {
                unsigned int v29 = (char *)sub_1B4BB3A38((uint64_t)(v84 + 2), v28);
                int v24 = (char *)*v19;
                uint64_t v21 = (char *)v19[1];
              }
              else
              {
                unsigned int v29 = 0;
              }
              uint64_t v30 = &v29[8 * v25];
              *(void *)uint64_t v30 = v20;
              uint64_t v23 = v30 + 8;
              while (v21 != v24)
              {
                uint64_t v31 = *((void *)v21 - 1);
                v21 -= 8;
                *((void *)v30 - 1) = v31;
                v30 -= 8;
              }
              *unint64_t v19 = v30;
              v19[1] = v23;
              v19[2] = &v29[8 * v28];
              if (v24) {
                operator delete(v24);
              }
            }
            else
            {
              *(void *)uint64_t v21 = v83;
              uint64_t v23 = v21 + 8;
            }
            v19[1] = v23;
          }
        }
      }
      else
      {
        std::string::push_back(v85, v17);
        unsigned int v32 = v84;
        uint64_t v33 = v83;
        int v34 = (char *)v84[1];
        char v35 = (char *)v84[2];
        if (v34 >= v35)
        {
          uint64_t v37 = (char *)*v84;
          uint64_t v38 = (v34 - (unsigned char *)*v84) >> 3;
          unint64_t v39 = v38 + 1;
          if ((unint64_t)(v38 + 1) >> 61) {
LABEL_116:
          }
            sub_1B4BB3244();
          uint64_t v40 = v35 - v37;
          if (v40 >> 2 > v39) {
            unint64_t v39 = v40 >> 2;
          }
          if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v41 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v41 = v39;
          }
          if (v41)
          {
            uint64_t v42 = (char *)sub_1B4BB3A38((uint64_t)(v84 + 2), v41);
            uint64_t v37 = (char *)*v32;
            int v34 = (char *)v32[1];
          }
          else
          {
            uint64_t v42 = 0;
          }
          v43 = &v42[8 * v38];
          *(void *)v43 = v33;
          int v36 = v43 + 8;
          while (v34 != v37)
          {
            uint64_t v44 = *((void *)v34 - 1);
            v34 -= 8;
            *((void *)v43 - 1) = v44;
            v43 -= 8;
          }
          char *v32 = v43;
          v32[1] = v36;
          v32[2] = &v42[8 * v41];
          if (v37) {
            operator delete(v37);
          }
        }
        else
        {
          *(void *)int v34 = v83;
          int v36 = v34 + 8;
        }
        v32[1] = v36;
      }
      ++v15;
    }
    while (v15 != v14);
    int v12 = v13[v14 - 1] == 32;
    a2 = v72;
    unint64_t v6 = v73;
LABEL_66:
    v83 += v76;
    a2 += (int)v76;
    v6 -= (int)v76;
    v12 &= (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 24))(*(void *)(a1 + 32));
  }
  while (v6);
  if ((*(unsigned int (**)(void))(**(void **)(a1 + 32) + 24))(*(void *)(a1 + 32)))
  {
    int v45 = (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 32))(*(void *)(a1 + 32));
    if (v45) {
      size_t v46 = v82;
    }
    else {
      size_t v46 = 1;
    }
    if (v45) {
      int v47 = v81;
    }
    else {
      int v47 = " ";
    }
    while (1)
    {
      uint64_t v48 = v85;
      LODWORD(v49) = HIBYTE(v85->__r_.__value_.__r.__words[2]);
      if (SHIBYTE(v85->__r_.__value_.__r.__words[2]) < 0)
      {
        uint64_t v50 = (std::string *)v85->__r_.__value_.__r.__words[0];
        std::string::size_type size = v85->__r_.__value_.__l.__size_;
        if (!v46) {
          goto LABEL_81;
        }
      }
      else
      {
        uint64_t v50 = v85;
        std::string::size_type size = HIBYTE(v85->__r_.__value_.__r.__words[2]);
        if (!v46) {
          goto LABEL_81;
        }
      }
      BOOL v52 = size >= v46;
      std::string::size_type v53 = size - v46;
      if (!v52 || memcmp((char *)v50 + v53, v47, v46)) {
        break;
      }
LABEL_81:
      if ((v49 & 0x80) != 0) {
        std::string::size_type v49 = v48->__r_.__value_.__l.__size_;
      }
      if (v49 - v46 < 0)
      {
        LODWORD(v74) = 13;
        v65 = (void *)sub_1B4BB2204((uint64_t)&v75);
        sub_1B4BB34F0(v65, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/normalizer.cc", 69);
        sub_1B4BB34F0(&v75, (uint64_t)"(", 1);
        std::ostream::operator<<();
        sub_1B4BB34F0(&v75, (uint64_t)") [", 3);
        sub_1B4BB34F0(&v75, (uint64_t)"(length) >= (0)", 15);
        sub_1B4BB34F0(&v75, (uint64_t)"] ", 2);
        sub_1B4BAFA7C((unsigned int *)&v74, v71);
        goto LABEL_112;
      }
      int v83 = *((void *)*v84 + (v49 - v46));
      std::string::resize(v48, (v49 - v46), 0);
      sub_1B4BB8450((uint64_t)v84, (v49 - v46));
    }
  }
  if (*(unsigned char *)(a1 + 48)
    && (*(unsigned int (**)(void))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32)))
  {
    sub_1B4BB821C((uint64_t)v80);
  }
  int64_t v54 = v84;
  uint64_t v55 = v83;
  v56 = (char *)v84[1];
  v57 = (char *)v84[2];
  if (v56 >= v57)
  {
    v59 = (char *)*v84;
    uint64_t v60 = (v56 - (unsigned char *)*v84) >> 3;
    unint64_t v61 = v60 + 1;
    if ((unint64_t)(v60 + 1) >> 61) {
      sub_1B4BB3244();
    }
    uint64_t v62 = v57 - v59;
    if (v62 >> 2 > v61) {
      unint64_t v61 = v62 >> 2;
    }
    if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v63 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v63 = v61;
    }
    if (v63)
    {
      v64 = (char *)sub_1B4BB3A38((uint64_t)(v84 + 2), v63);
      v59 = (char *)*v54;
      v56 = (char *)v54[1];
    }
    else
    {
      v64 = 0;
    }
    v66 = &v64[8 * v60];
    v67 = &v64[8 * v63];
    *(void *)v66 = v55;
    v58 = v66 + 8;
    while (v56 != v59)
    {
      uint64_t v68 = *((void *)v56 - 1);
      v56 -= 8;
      *((void *)v66 - 1) = v68;
      v66 -= 8;
    }
    *int64_t v54 = v66;
    v54[1] = v58;
    v54[2] = v67;
    if (v59) {
      operator delete(v59);
    }
  }
  else
  {
    *(void *)v56 = v83;
    v58 = v56 + 8;
  }
  v54[1] = v58;
  if (SHIBYTE(v85->__r_.__value_.__r.__words[2]) < 0) {
    std::string::size_type v69 = v85->__r_.__value_.__l.__size_;
  }
  else {
    std::string::size_type v69 = HIBYTE(v85->__r_.__value_.__r.__words[2]);
  }
  if (((unsigned char *)v84[1] - (unsigned char *)*v84) >> 3 == v69 + 1)
  {
    uint64_t v11 = (void *)v71;
    return sub_1B4BE3D84(v11);
  }
  LODWORD(v74) = 13;
  v70 = (void *)sub_1B4BB2204((uint64_t)&v75);
  sub_1B4BB34F0(v70, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/normalizer.cc", 69);
  sub_1B4BB34F0(&v75, (uint64_t)"(", 1);
  std::ostream::operator<<();
  sub_1B4BB34F0(&v75, (uint64_t)") [", 3);
  sub_1B4BB34F0(&v75, (uint64_t)"(norm_to_orig->size()) == (normalized->size() + 1)", 50);
  sub_1B4BB34F0(&v75, (uint64_t)"] ", 2);
  sub_1B4BAFA7C((unsigned int *)&v74, v71);
LABEL_112:
  uint64_t v75 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&v75 + *(void *)(v75 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  uint64_t v76 = MEMORY[0x1E4FBA470] + 16;
  if (v78 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return (void *)MEMORY[0x1BA992920](&v79);
}

void sub_1B4BB7F6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1B4BAFB0C((uint64_t)va);
  _Unwind_Resume(a1);
}

size_t sub_1B4BB7F8C@<X0>(size_t result@<X0>, char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  v27[63] = *MEMORY[0x1E4F143B8];
  if (a3)
  {
    unint64_t v6 = a2;
    size_t v7 = result;
    uint64_t v8 = *(void *)(result + 40);
    if (v8 && (LOBYTE(v26) = 0, uint64_t result = sub_1B4BB8544(v8, a2, a3, (BOOL *)&v26), (_BYTE)v26))
    {
      unint64_t v9 = (int)result;
      if (a3 < (int)result) {
        unint64_t v9 = a3;
      }
      *(void *)a4 = v6;
      *(void *)(a4 + 8) = v9;
      *(_DWORD *)(a4 + 16) = result;
    }
    else
    {
      uint64_t v10 = *(void *)(v7 + 8);
      if (!v10) {
        goto LABEL_24;
      }
      uint64_t v11 = 0;
      unint64_t v12 = 0;
      int v13 = *(_DWORD **)(v10 + 16);
      uint64_t v14 = (*v13 >> 10 << ((*v13 >> 6) & 8));
      do
      {
        uint64_t v15 = v6[v11];
        uint64_t v16 = v14 ^ v15;
        unsigned int v17 = v13[v16];
        if ((v17 & 0x800000FF) != v15) {
          break;
        }
        uint64_t v14 = v16 ^ (v17 >> 10 << ((v17 >> 6) & 8));
        if ((v17 & 0x100) != 0)
        {
          if (v12 <= 0x1F)
          {
            unint64_t v18 = &v27[2 * v12 - 1];
            *(_DWORD *)unint64_t v18 = v13[v14] & 0x7FFFFFFF;
            v18[1] = v11 + 1;
          }
          ++v12;
        }
        ++v11;
      }
      while (a3 != v11);
      if (!v12) {
        goto LABEL_24;
      }
      unint64_t v19 = 0;
      int v20 = 0;
      uint64_t v21 = v27;
      int v22 = v27;
      do
      {
        unint64_t v24 = *v22;
        v22 += 2;
        unint64_t v23 = v24;
        if (!v19 || v23 > v19)
        {
          int v20 = *((_DWORD *)v21 - 2);
          unint64_t v19 = v23;
        }
        uint64_t v21 = v22;
        --v12;
      }
      while (v12);
      if (v19)
      {
        unint64_t v6 = (char *)(*(void *)(v7 + 16) + v20);
        uint64_t result = strlen(v6);
      }
      else
      {
LABEL_24:
        uint64_t v26 = 0;
        BOOL v25 = sub_1B4BE1C50((unsigned __int8 *)v6, (uint64_t)&v6[a3], &v26) != 65533 || v26 == 3;
        if (v25) {
          LODWORD(v19) = v26;
        }
        else {
          LODWORD(v19) = 1;
        }
        if (v25) {
          uint64_t result = (int)v26;
        }
        else {
          uint64_t result = 3;
        }
        if (!v25) {
          unint64_t v6 = (char *)&unk_1B4C995F4;
        }
      }
      *(void *)a4 = v6;
      *(void *)(a4 + 8) = result;
      *(_DWORD *)(a4 + 16) = v19;
    }
  }
  else
  {
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
  }
  return result;
}

void sub_1B4BB8174(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 3)
  {
    if (a2 >> 61) {
      sub_1B4BB3244();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    unint64_t v6 = (char *)sub_1B4BB3A38(v3, a2);
    size_t v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    unint64_t v9 = &v6[8 * v8];
    uint64_t v10 = (char *)*a1;
    uint64_t v11 = (char *)a1[1];
    unint64_t v12 = v7;
    if (v11 != *a1)
    {
      unint64_t v12 = v7;
      do
      {
        uint64_t v13 = *((void *)v11 - 1);
        v11 -= 8;
        *((void *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void sub_1B4BB821C(uint64_t a1)
{
  int v2 = (*(uint64_t (**)(void))(**(void **)(*(void *)a1 + 32) + 32))(*(void *)(*(void *)a1 + 32));
  uint64_t v3 = **(std::string ***)(a1 + 16);
  if (v2)
  {
    std::string::append(v3, **(const std::string::value_type ***)(a1 + 32), *(void *)(*(void *)(a1 + 32) + 8));
    if (*(void *)(*(void *)(a1 + 32) + 8))
    {
      unint64_t v4 = 0;
      do
      {
        uint64_t v5 = **(void **)(a1 + 24);
        uint64_t v6 = **(int **)(a1 + 8);
        size_t v7 = *(void **)(v5 + 8);
        unint64_t v8 = *(void *)(v5 + 16);
        if ((unint64_t)v7 >= v8)
        {
          uint64_t v10 = *(void **)v5;
          uint64_t v11 = ((uint64_t)v7 - *(void *)v5) >> 3;
          unint64_t v12 = v11 + 1;
          if ((unint64_t)(v11 + 1) >> 61) {
            goto LABEL_40;
          }
          uint64_t v13 = v8 - (void)v10;
          if (v13 >> 2 > v12) {
            unint64_t v12 = v13 >> 2;
          }
          if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v14 = v12;
          }
          if (v14)
          {
            uint64_t v15 = (char *)sub_1B4BB3A38(v5 + 16, v14);
            uint64_t v10 = *(void **)v5;
            size_t v7 = *(void **)(v5 + 8);
          }
          else
          {
            uint64_t v15 = 0;
          }
          uint64_t v16 = &v15[8 * v11];
          *(void *)uint64_t v16 = v6;
          unint64_t v9 = v16 + 8;
          while (v7 != v10)
          {
            uint64_t v17 = *--v7;
            *((void *)v16 - 1) = v17;
            v16 -= 8;
          }
          *(void *)uint64_t v5 = v16;
          *(void *)(v5 + 8) = v9;
          *(void *)(v5 + 16) = &v15[8 * v14];
          if (v10) {
            operator delete(v10);
          }
        }
        else
        {
          void *v7 = v6;
          unint64_t v9 = v7 + 1;
        }
        *(void *)(v5 + 8) = v9;
        ++v4;
      }
      while (v4 < *(void *)(*(void *)(a1 + 32) + 8));
    }
  }
  else
  {
    std::string::append(v3, " ");
    uint64_t v18 = **(void **)(a1 + 24);
    uint64_t v19 = **(int **)(a1 + 8);
    int v20 = *(void **)(v18 + 8);
    unint64_t v21 = *(void *)(v18 + 16);
    if ((unint64_t)v20 >= v21)
    {
      unint64_t v23 = *(void **)v18;
      uint64_t v24 = ((uint64_t)v20 - *(void *)v18) >> 3;
      unint64_t v25 = v24 + 1;
      if ((unint64_t)(v24 + 1) >> 61) {
LABEL_40:
      }
        sub_1B4BB3244();
      uint64_t v26 = v21 - (void)v23;
      if (v26 >> 2 > v25) {
        unint64_t v25 = v26 >> 2;
      }
      if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v27 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v27 = v25;
      }
      if (v27)
      {
        unint64_t v28 = (char *)sub_1B4BB3A38(v18 + 16, v27);
        unint64_t v23 = *(void **)v18;
        int v20 = *(void **)(v18 + 8);
      }
      else
      {
        unint64_t v28 = 0;
      }
      unsigned int v29 = &v28[8 * v24];
      uint64_t v30 = &v28[8 * v27];
      *(void *)unsigned int v29 = v19;
      int v22 = v29 + 8;
      while (v20 != v23)
      {
        uint64_t v31 = *--v20;
        *((void *)v29 - 1) = v31;
        v29 -= 8;
      }
      *(void *)uint64_t v18 = v29;
      *(void *)(v18 + 8) = v22;
      *(void *)(v18 + 16) = v30;
      if (v23) {
        operator delete(v23);
      }
    }
    else
    {
      void *v20 = v19;
      int v22 = v20 + 1;
    }
    *(void *)(v18 + 8) = v22;
  }
}

void sub_1B4BB8450(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 8 * a2;
    }
  }
  else
  {
    sub_1B4BB8E74((char **)a1, a2 - v2);
  }
}

void sub_1B4BB8480(uint64_t a1@<X0>, void *a2@<X8>)
{
  std::string __p = 0;
  unint64_t v4 = 0;
  uint64_t v5 = 0;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 32))(&v2);
  nullsub_3(&v2);
  sub_1B4BE3D8C(&v2);
  if (__p)
  {
    unint64_t v4 = __p;
    operator delete(__p);
  }
}

void sub_1B4BB8508(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  sub_1B4BE3D8C(&a9);
  if (*(char *)(v11 + 23) < 0) {
    operator delete(*(void **)v11);
  }
  if (__p)
  {
    a11 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1B4BB8544(uint64_t a1, unsigned char *a2, uint64_t a3, BOOL *a4)
{
  v23[127] = *MEMORY[0x1E4F143B8];
  if (!*(void *)a1)
  {
    if (a4) {
      *a4 = 0;
    }
    goto LABEL_33;
  }
  unint64_t v4 = *(_DWORD **)(*(void *)a1 + 16);
  uint64_t v5 = (*v4 >> 10 << ((*v4 >> 6) & 8));
  if (a3)
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0;
    do
    {
      uint64_t v8 = a2[v6];
      uint64_t v9 = v5 ^ v8;
      unsigned int v10 = v4[v9];
      if ((v10 & 0x800000FF) != v8) {
        break;
      }
      uint64_t v5 = v9 ^ (v10 >> 10 << ((v10 >> 6) & 8));
      if ((v10 & 0x100) != 0)
      {
        if (v7 <= 0x3F)
        {
          uint64_t v11 = &v22[16 * v7];
          *(_DWORD *)uint64_t v11 = v4[v5] & 0x7FFFFFFF;
          *((void *)v11 + 1) = v6 + 1;
        }
        ++v7;
      }
      ++v6;
    }
    while (a3 != v6);
  }
  else
  {
    unsigned int v12 = *a2;
    if (*a2)
    {
      unint64_t v7 = 0;
      uint64_t v13 = 1;
      do
      {
        uint64_t v14 = v5 ^ v12;
        unsigned int v15 = v4[v14];
        if ((v15 & 0x800000FF) != v12) {
          break;
        }
        uint64_t v5 = v14 ^ (v15 >> 10 << ((v15 >> 6) & 8));
        if ((v15 & 0x100) != 0)
        {
          if (v7 <= 0x3F)
          {
            uint64_t v16 = &v22[16 * v7];
            *(_DWORD *)uint64_t v16 = v4[v5] & 0x7FFFFFFF;
            *((void *)v16 + 1) = v13;
          }
          ++v7;
        }
        unsigned int v12 = a2[v13++];
      }
      while (v12);
    }
    else
    {
      LODWORD(v7) = 0;
    }
  }
  if (a4) {
    *a4 = (int)v7 > 0;
  }
  if (!v7)
  {
LABEL_33:
    int v21 = asc_1B4C934DB[(unint64_t)*a2 >> 4];
    if (v21 >= (int)a3) {
      return a3;
    }
    else {
      return v21;
    }
  }
  if ((int)v7 < 1) {
    return 0;
  }
  LODWORD(result) = 0;
  unint64_t v7 = v7;
  uint64_t v18 = (int *)v23;
  do
  {
    int v20 = *v18;
    v18 += 4;
    unsigned int v19 = v20;
    if ((int)result <= v20) {
      uint64_t result = v19;
    }
    else {
      uint64_t result = result;
    }
    --v7;
  }
  while (v7);
  return result;
}

void sub_1B4BB8714(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v4 = *(unsigned __int8 *)(a1 + 48);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  std::string::resize((std::string *)a2, 4uLL, 0);
  if (*(char *)(a2 + 23) >= 0) {
    uint64_t v5 = (_DWORD *)a2;
  }
  else {
    uint64_t v5 = *(_DWORD **)a2;
  }
  _DWORD *v5 = v4;
  uint64_t v6 = *(void *)(a1 + 8);
  if (v6)
  {
    uint64_t v8 = *(void *)(v6 + 8);
    unint64_t v7 = *(const std::string::value_type **)(v6 + 16);
    memset(&v13, 0, sizeof(v13));
    std::string::resize(&v13, 4uLL, 0);
    std::string::size_type v9 = 4 * v8;
    if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unsigned int v10 = &v13;
    }
    else {
      unsigned int v10 = (std::string *)v13.__r_.__value_.__r.__words[0];
    }
    LODWORD(v10->__r_.__value_.__l.__data_) = v9;
    if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v11 = &v13;
    }
    else {
      uint64_t v11 = (std::string *)v13.__r_.__value_.__r.__words[0];
    }
    if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v13.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v13.__r_.__value_.__l.__size_;
    }
    std::string::append((std::string *)a2, (const std::string::value_type *)v11, size);
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v13.__r_.__value_.__l.__data_);
    }
    std::string::append((std::string *)a2, v7, v9);
    std::string::append((std::string *)a2, *(const std::string::value_type **)(a1 + 16), *(void *)(a1 + 24));
  }
}

void sub_1B4BB880C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v15 + 23) < 0) {
    operator delete(*(void **)v15);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1B4BB8848(void *result, void *a2)
{
  void *result = 0;
  unint64_t v3 = a2[2];
  if (v3)
  {
    std::string __p = 0;
    int v21 = 0;
    int v22 = 0;
    sub_1B4BB8B2C(&__p, v3);
    uint64_t v6 = (void *)*a2;
    int v4 = a2 + 1;
    uint64_t v5 = v6;
    if (v6 != v4)
    {
      unint64_t v7 = v21;
      do
      {
        uint64_t v8 = v5[4];
        if (v7 >= v22)
        {
          uint64_t v9 = (v7 - (unsigned char *)__p) >> 3;
          if ((unint64_t)(v9 + 1) >> 61) {
            sub_1B4BB3244();
          }
          unint64_t v10 = (v22 - (unsigned char *)__p) >> 2;
          if (v10 <= v9 + 1) {
            unint64_t v10 = v9 + 1;
          }
          if ((unint64_t)(v22 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v11 = v10;
          }
          if (v11) {
            unsigned int v12 = (char *)sub_1B4BB3A38((uint64_t)&v22, v11);
          }
          else {
            unsigned int v12 = 0;
          }
          std::string v13 = &v12[8 * v9];
          *(void *)std::string v13 = v8;
          unint64_t v7 = v13 + 8;
          uint64_t v15 = (char *)__p;
          uint64_t v14 = v21;
          if (v21 != __p)
          {
            do
            {
              uint64_t v16 = *((void *)v14 - 1);
              v14 -= 8;
              *((void *)v13 - 1) = v16;
              v13 -= 8;
            }
            while (v14 != v15);
            uint64_t v14 = (char *)__p;
          }
          std::string __p = v13;
          int v21 = v7;
          int v22 = &v12[8 * v11];
          if (v14) {
            operator delete(v14);
          }
        }
        else
        {
          *(void *)unint64_t v7 = v8;
          v7 += 8;
        }
        int v21 = v7;
        uint64_t v17 = (void *)v5[1];
        if (v17)
        {
          do
          {
            uint64_t v18 = v17;
            uint64_t v17 = (void *)*v17;
          }
          while (v17);
        }
        else
        {
          do
          {
            uint64_t v18 = (void *)v5[2];
            BOOL v19 = *v18 == (void)v5;
            uint64_t v5 = v18;
          }
          while (!v19);
        }
        uint64_t v5 = v18;
      }
      while (v18 != v4);
    }
    operator new();
  }
  return result;
}

void sub_1B4BB8AC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char a11, char a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  uint64_t v16 = *v14;
  *uint64_t v14 = 0;
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B4BB8B2C(void **a1, unint64_t a2)
{
  int v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 3)
  {
    if (a2 >> 61) {
      sub_1B4BB3244();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    uint64_t v6 = (char *)sub_1B4BB3A38(v3, a2);
    unint64_t v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    uint64_t v9 = &v6[8 * v8];
    unint64_t v11 = (char *)*a1;
    unint64_t v10 = (char *)a1[1];
    unsigned int v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        uint64_t v13 = *((void *)v10 - 1);
        v10 -= 8;
        *((void *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v10 != v11);
      unint64_t v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void *sub_1B4BB8BD8(void *result, uint64_t a2, uint64_t a3)
{
  void *result = 0;
  if (a3) {
    operator new();
  }
  return result;
}

void sub_1B4BB8CB8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *v1;
  *uint64_t v1 = 0;
  if (v3) {
    sub_1B4BB8F90(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1B4BB8CD8@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (*(void *)a1) {
    return sub_1B4BB8D14(a2, *(void **)(*(void *)a1 + 16), 4 * *(void *)(*(void *)a1 + 8));
  }
  else {
    return sub_1B4BB8DC0(a2, "");
  }
}

uint64_t sub_1B4BB8D00(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = a2;
  return result;
}

uint64_t sub_1B4BB8D08@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B4BE3FA8(a2, a1 + 56);
}

void *sub_1B4BB8D14(void *__dst, void *__src, size_t __len)
{
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    sub_1B4BB33D8();
  }
  if (__len >= 0x17)
  {
    size_t v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v7 = __len | 7;
    }
    size_t v8 = v7 + 1;
    uint64_t v6 = operator new(v7 + 1);
    __dst[1] = __len;
    __dst[2] = v8 | 0x8000000000000000;
    *__dst = v6;
  }
  else
  {
    *((unsigned char *)__dst + 23) = __len;
    uint64_t v6 = __dst;
    if (!__len) {
      goto LABEL_9;
    }
  }
  memmove(v6, __src, __len);
LABEL_9:
  *((unsigned char *)v6 + __len) = 0;
  return __dst;
}

void *sub_1B4BB8DC0(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    sub_1B4BB33D8();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    uint64_t v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((unsigned char *)a1 + 23) = v4;
    uint64_t v6 = a1;
    if (!v4) {
      goto LABEL_9;
    }
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((unsigned char *)v6 + v5) = 0;
  return a1;
}

void sub_1B4BB8E74(char **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  size_t v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = *a1;
    uint64_t v9 = v7 - *a1;
    unint64_t v10 = a2 + (v9 >> 3);
    if (v10 >> 61) {
      sub_1B4BB3244();
    }
    uint64_t v11 = v9 >> 3;
    uint64_t v12 = v5 - v8;
    if (v12 >> 2 > v10) {
      unint64_t v10 = v12 >> 2;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v10;
    }
    if (v13)
    {
      uint64_t v14 = (char *)sub_1B4BB3A38(v4, v13);
      uint64_t v8 = *a1;
      uint64_t v7 = a1[1];
    }
    else
    {
      uint64_t v14 = 0;
    }
    uint64_t v15 = &v14[8 * v11];
    uint64_t v16 = &v14[8 * v13];
    bzero(v15, 8 * a2);
    uint64_t v17 = &v15[8 * a2];
    while (v7 != v8)
    {
      uint64_t v18 = *((void *)v7 - 1);
      v7 -= 8;
      *((void *)v15 - 1) = v18;
      v15 -= 8;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

uint64_t sub_1B4BB8F90(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 8))();
}

uint64_t sub_1B4BB8FB4@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (*(void *)(a1 + 80)) {
    uint64_t v3 = *(_DWORD **)(a1 + 80);
  }
  else {
    uint64_t v3 = &unk_1E9D40760;
  }
  switch(v3[68])
  {
    case 1:
      sub_1B4BB9120();
    case 2:
      sub_1B4BB9198();
    case 3:
      sub_1B4BB9210();
    case 4:
      sub_1B4BB9288();
    default:
      uint64_t result = sub_1B4BE1C40();
      if ((int)result <= 2)
      {
        LOBYTE(v11) = 0;
        size_t v5 = sub_1B4BB34F0(MEMORY[0x1E4FBA240], (uint64_t)"model_factory.cc", 16);
        sub_1B4BB34F0(v5, (uint64_t)"(", 1);
        uint64_t v6 = (void *)std::ostream::operator<<();
        uint64_t v7 = sub_1B4BB34F0(v6, (uint64_t)") ", 2);
        uint64_t v8 = sub_1B4BB34F0(v7, (uint64_t)"LOG(", 4);
        uint64_t v9 = sub_1B4BB34F0(v8, (uint64_t)"ERROR", 5);
        unint64_t v10 = sub_1B4BB34F0(v9, (uint64_t)") ", 2);
        sub_1B4BB34F0(v10, (uint64_t)"Unknown model_type: ", 20);
        std::ostream::operator<<();
        uint64_t result = (uint64_t)sub_1B4BB239C(&v11);
      }
      *a2 = 0;
      return result;
  }
}

void sub_1B4BB90FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1B4BB239C(va);
  _Unwind_Resume(a1);
}

void sub_1B4BB9120()
{
}

void sub_1B4BB9174(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9929C0](v1, 0x10E1C404363080ALL);
  _Unwind_Resume(a1);
}

void sub_1B4BB9198()
{
}

void sub_1B4BB91EC(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9929C0](v1, 0x10E1C4039E95E28);
  _Unwind_Resume(a1);
}

void sub_1B4BB9210()
{
}

void sub_1B4BB9264(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9929C0](v1, 0x10E1C4039E95E28);
  _Unwind_Resume(a1);
}

void sub_1B4BB9288()
{
}

void sub_1B4BB92DC(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9929C0](v1, 0x10E1C4039E95E28);
  _Unwind_Resume(a1);
}

uint64_t sub_1B4BB9300@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  v14[1] = a2;
  v14[2] = a3;
  int v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 80))(a1);
  if (v6 == 1) {
    sub_1B4BB9504();
  }
  if (!v6) {
    sub_1B4BB9484();
  }
  uint64_t result = sub_1B4BE1C40();
  if ((int)result <= 2)
  {
    LOBYTE(v14[0]) = 0;
    uint64_t v8 = sub_1B4BB34F0(MEMORY[0x1E4FBA240], (uint64_t)"model_factory.cc", 16);
    sub_1B4BB34F0(v8, (uint64_t)"(", 1);
    uint64_t v9 = (void *)std::ostream::operator<<();
    unint64_t v10 = sub_1B4BB34F0(v9, (uint64_t)") ", 2);
    uint64_t v11 = sub_1B4BB34F0(v10, (uint64_t)"LOG(", 4);
    uint64_t v12 = sub_1B4BB34F0(v11, (uint64_t)"ERROR", 5);
    unint64_t v13 = sub_1B4BB34F0(v12, (uint64_t)") ", 2);
    sub_1B4BB34F0(v13, (uint64_t)"Unknown model_type: ", 20);
    (*(void (**)(uint64_t))(*(void *)a1 + 80))(a1);
    std::ostream::operator<<();
    uint64_t result = (uint64_t)sub_1B4BB239C(v14);
  }
  *a4 = 0;
  return result;
}

void sub_1B4BB946C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1B4BB239C(va);
  _Unwind_Resume(a1);
}

void sub_1B4BB9484()
{
}

void sub_1B4BB94E0(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9929C0](v1, 0x10E1C404363080ALL);
  _Unwind_Resume(a1);
}

void sub_1B4BB9504()
{
}

void sub_1B4BB9560(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9929C0](v1, 0x10E1C4039E95E28);
  _Unwind_Resume(a1);
}

void *sub_1B4BB9584(void *a1)
{
  *a1 = &unk_1F0D548D0;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    sub_1B4BC8F38(v2);
  }
  return a1;
}

void sub_1B4BB95D0(void *a1)
{
  *a1 = &unk_1F0D548D0;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    sub_1B4BC8F38(v1);
  }
  JUMPOUT(0x1BA9929C0);
}

uint64_t sub_1B4BB963C(void *a1)
{
  uint64_t result = a1[2];
  if (!result)
  {
    sub_1B4BC908C(&v5);
    long long v3 = v5;
    long long v5 = 0uLL;
    uint64_t v4 = (std::__shared_weak_count *)a1[3];
    *((_OWORD *)a1 + 1) = v3;
    if (v4)
    {
      sub_1B4BC8F38(v4);
      if (*((void *)&v5 + 1)) {
        sub_1B4BC8F38(*((std::__shared_weak_count **)&v5 + 1));
      }
    }
    uint64_t result = a1[2];
    a1[1] = result;
  }
  return result;
}

void *sub_1B4BB96A4(void *a1)
{
  *a1 = &unk_1F0D54930;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    sub_1B4BC8F38(v2);
  }
  return a1;
}

void sub_1B4BB96F0(void *a1)
{
  *a1 = &unk_1F0D54930;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    sub_1B4BC8F38(v1);
  }
  JUMPOUT(0x1BA9929C0);
}

uint64_t sub_1B4BB975C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 8);
  if (!result)
  {
    sub_1B4BC91B8(&v5);
    long long v3 = v5;
    long long v5 = 0uLL;
    uint64_t v4 = *(std::__shared_weak_count **)(a1 + 16);
    *(_OWORD *)(a1 + 8) = v3;
    if (v4)
    {
      sub_1B4BC8F38(v4);
      if (*((void *)&v5 + 1)) {
        sub_1B4BC8F38(*((std::__shared_weak_count **)&v5 + 1));
      }
    }
    return *(void *)(a1 + 8);
  }
  return result;
}

void *sub_1B4BB97C0@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    return (void *)sub_1B4BF2680(v2, (uint64_t)a2);
  }
  else {
    return sub_1B4BB8DC0(a2, "");
  }
}

double sub_1B4BB97DC(uint64_t a1)
{
  *(void *)a1 = &unk_1F0D545D0;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  return result;
}

uint64_t sub_1B4BB981C(uint64_t a1)
{
  *(void *)a1 = &unk_1F0D545D0;
  if (*(char *)(a1 + 119) < 0) {
    operator delete(*(void **)(a1 + 96));
  }
  uint64_t v2 = *(void *)(a1 + 88);
  *(void *)(a1 + 88) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  long long v3 = *(void **)(a1 + 64);
  if (v3)
  {
    *(void *)(a1 + 72) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)(a1 + 40);
  if (v4)
  {
    *(void *)(a1 + 48) = v4;
    operator delete(v4);
  }
  uint64_t v5 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  uint64_t v8 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  return a1;
}

void sub_1B4BB9980(uint64_t a1)
{
  sub_1B4BB981C(a1);
  JUMPOUT(0x1BA9929C0);
}

uint64_t sub_1B4BB99B8()
{
  v3[19] = *MEMORY[0x1E4F143B8];
  sub_1B4BB9B44(v1);
  if ((v2[*(void *)(v1[0] - 24) + 16] & 5) == 0) {
    std::istream::read();
  }
  v1[0] = *MEMORY[0x1E4FBA3F8];
  *(uint64_t *)((char *)v1 + *(void *)(v1[0] - 24)) = *(void *)(MEMORY[0x1E4FBA3F8] + 24);
  MEMORY[0x1BA9926B0](v2);
  std::istream::~istream();
  MEMORY[0x1BA992920](v3);
  return 0;
}

void sub_1B4BB9B28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1B4BB9D08((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_1B4BB9B44(uint64_t *a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA460] + 64;
  a1[53] = MEMORY[0x1E4FBA460] + 64;
  long long v3 = a1 + 2;
  uint64_t v4 = *(void *)(MEMORY[0x1E4FBA3F8] + 16);
  uint64_t v5 = *(void *)(MEMORY[0x1E4FBA3F8] + 8);
  *a1 = v5;
  *(uint64_t *)((char *)a1 + *(void *)(v5 - 24)) = v4;
  a1[1] = 0;
  uint64_t v6 = (std::ios_base *)((char *)a1 + *(void *)(*a1 - 24));
  std::ios_base::init(v6, a1 + 2);
  uint64_t v7 = MEMORY[0x1E4FBA460] + 24;
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  *a1 = v7;
  a1[53] = v2;
  MEMORY[0x1BA9926A0](v3);
  if (!std::filebuf::open()) {
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 4);
  }
  return a1;
}

void sub_1B4BB9CD0(_Unwind_Exception *a1)
{
  std::istream::~istream();
  MEMORY[0x1BA992920](v1);
  _Unwind_Resume(a1);
}

void *sub_1B4BB9D08(void *a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA3F8];
  uint64_t v3 = *MEMORY[0x1E4FBA3F8];
  *a1 = *MEMORY[0x1E4FBA3F8];
  *(void *)((char *)a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  MEMORY[0x1BA9926B0](a1 + 2);
  std::istream::~istream();
  MEMORY[0x1BA992920](a1 + 53);
  return a1;
}

uint64_t sub_1B4BB9DD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!sub_1B4BB99B8()) {
    sub_1B4BB9F4C();
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 64);
  return v6(a1, a2, a3);
}

void sub_1B4BB9F20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void sub_1B4BB9F4C()
{
}

void sub_1B4BB9F94(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9929C0](v1, 0x10A1C4047CE62CFLL);
  _Unwind_Resume(a1);
}

uint64_t sub_1B4BB9FB8@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  if (a1) {
    sub_1B4BE1074();
  }
  return sub_1B4BE3EF0(a2, 5, "model file path should not be empty.", 36);
}

void sub_1B4BBA33C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 57) < 0) {
    operator delete(*(void **)(v1 - 80));
  }
  uint64_t v3 = *(void *)(v1 - 56);
  *(void *)(v1 - 56) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_1B4BBA3B4(uint64_t a1)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 16))(&v11);
  if (v11)
  {
    char v10 = 1;
    uint64_t v1 = sub_1B4BB34F0(MEMORY[0x1E4FBA240], (uint64_t)"sentencepiece_processor.cc", 26);
    sub_1B4BB34F0(v1, (uint64_t)"(", 1);
    uint64_t v2 = (void *)std::ostream::operator<<();
    uint64_t v3 = sub_1B4BB34F0(v2, (uint64_t)") [", 3);
    uint64_t v4 = sub_1B4BB34F0(v3, (uint64_t)"_status.ok()", 12);
    uint64_t v5 = sub_1B4BB34F0(v4, (uint64_t)"] ", 2);
    sub_1B4BE40C0((uint64_t)&v11, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    sub_1B4BB34F0(v5, (uint64_t)p_p, size);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    sub_1B4BB239C(&v10);
  }
  return sub_1B4BE3D8C(&v11);
}

void sub_1B4BBA4C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_1B4BB239C((unsigned char *)(v15 - 25));
  sub_1B4BE3D8C((uint64_t *)(v15 - 24));
  _Unwind_Resume(a1);
}

void sub_1B4BBA4FC()
{
}

void sub_1B4BBA5C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void sub_1B4BBA5F4()
{
}

void sub_1B4BBA850(_Unwind_Exception *a1)
{
  sub_1B4BC92E4((uint64_t *)(v1 - 56), 0);
  _Unwind_Resume(a1);
}

void sub_1B4BBA894(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *(unsigned char **)(*a2 + 88);
  if (!v5) {
    uint64_t v5 = &unk_1E9D408F0;
  }
  if (v5[80])
  {
    if ((int)sub_1B4BE1C40() <= 0)
    {
      LOBYTE(v23) = 0;
      uint64_t v6 = sub_1B4BB34F0(MEMORY[0x1E4FBA240], (uint64_t)"sentencepiece_processor.cc", 26);
      sub_1B4BB34F0(v6, (uint64_t)"(", 1);
      uint64_t v7 = (void *)std::ostream::operator<<();
      uint64_t v8 = sub_1B4BB34F0(v7, (uint64_t)") ", 2);
      uint64_t v9 = sub_1B4BB34F0(v8, (uint64_t)"LOG(", 4);
      char v10 = sub_1B4BB34F0(v9, (uint64_t)"INFO", 4);
      uint64_t v11 = sub_1B4BB34F0(v10, (uint64_t)") ", 2);
      sub_1B4BB34F0(v11, (uint64_t)"Enable Apple addition for backward compatibility", 48);
      sub_1B4BB239C(&v23);
    }
    uint64_t v4 = *a2;
    *(_DWORD *)(v4 + 48) = *(_DWORD *)(*a2 + 48) | 1;
    uint64_t v12 = *(void *)(v4 + 80);
    if (!v12)
    {
      uint64_t v13 = *(void *)(v4 + 8);
      uint64_t v14 = (void *)(v13 & 0xFFFFFFFFFFFFFFFELL);
      if (v13) {
        uint64_t v14 = (void *)*v14;
      }
      uint64_t v12 = sub_1B4BDF7B4((uint64_t)v14);
      *(void *)(v4 + 8sub_1B4BC92E4(&a9, 0) = v12;
      uint64_t v4 = *a2;
    }
    *(_DWORD *)(v12 + 40) |= 0x4000u;
    *(unsigned char *)(v12 + 245) = 1;
    *(_DWORD *)(v4 + 48) |= 2u;
    uint64_t v15 = *(void *)(v4 + 88);
    if (!v15)
    {
      uint64_t v16 = *(void *)(v4 + 8);
      uint64_t v17 = (void *)(v16 & 0xFFFFFFFFFFFFFFFELL);
      if (v16) {
        uint64_t v17 = (void *)*v17;
      }
      uint64_t v15 = sub_1B4BDF884((uint64_t)v17);
      *(void *)(v4 + 88) = v15;
      uint64_t v4 = *a2;
    }
    *(_DWORD *)(v15 + 48) |= 0x10u;
    *(unsigned char *)(v15 + 81) = 1;
  }
  *a2 = 0;
  if (v4) {
    uint64_t v18 = v4 + 16;
  }
  else {
    uint64_t v18 = 0;
  }
  uint64_t v19 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = v18;
  if (v19)
  {
    (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
    uint64_t v18 = *(void *)(a1 + 32);
  }
  sub_1B4BB8FB4(v18 - 16, &v23);
  uint64_t v20 = v23;
  uint64_t v23 = 0;
  uint64_t v21 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v20;
  if (v21)
  {
    (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
    uint64_t v22 = v23;
    uint64_t v23 = 0;
    if (v22) {
      (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
    }
  }
  sub_1B4BBB2E0();
}

void sub_1B4BBB224(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,char a28)
{
}

void sub_1B4BBB2E0()
{
}

void sub_1B4BBB33C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9929C0](v1, 0x10F1C40C7D4252BLL);
  _Unwind_Resume(a1);
}

void sub_1B4BBB360()
{
}

void sub_1B4BBB3B4(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9929C0](v1, 0x10F1C40C7D4252BLL);
  _Unwind_Resume(a1);
}

void sub_1B4BBB3D8(void *__src@<X0>, size_t __len@<X1>, char *a3@<X2>, void **a4@<X3>, char *a5@<X4>, void **a6@<X5>, std::string *a7@<X8>)
{
  sub_1B4BB8D14(&__dst, __src, __len);
  size_t v12 = strlen(a3);
  sub_1B4BC9334(a3, v12, a4, a5, a6, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  uint64_t v15 = std::string::append(&__dst, (const std::string::value_type *)p_p, size);
  *a7 = *v15;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
}

void sub_1B4BBB4B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B4BBB4E4(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X8>)
{
}

void sub_1B4BBB4EC(uint64_t *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, char **a4@<X3>, uint64_t *a5@<X8>)
{
  v46[19] = *MEMORY[0x1E4F143B8];
  a4[1] = *a4;
  if (a3)
  {
    (*(void (**)(uint64_t *))(*a1 + 88))(a1);
    if (!*a5)
    {
      sub_1B4BE3D8C(a5);
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1E9D40638, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_1E9D40638))
      {
        long long v42 = xmmword_1E60A3690;
        *(_OWORD *)std::string __p = unk_1E60A36A0;
        long long v44 = xmmword_1E60A36B0;
        uint64_t v45 = 3;
        long long v38 = xmmword_1E60A3650;
        long long v39 = unk_1E60A3660;
        long long v40 = xmmword_1E60A3670;
        long long v41 = *(_OWORD *)&off_1E60A3680;
        sub_1B4BCBB50((uint64_t)&unk_1E9D40648, (uint64_t)&v38, 5);
        __cxa_atexit((void (*)(void *))sub_1B4BC55E0, &unk_1E9D40648, &dword_1B4BAD000);
        __cxa_guard_release(&qword_1E9D40638);
      }
      sub_1B4BC8634((char **)&v36, a2, a3, ":", 1, 0);
      char v10 = (uint64_t *)v36;
      uint64_t v11 = v37;
      if (v36 == v37)
      {
LABEL_29:
        if (v10)
        {
          uint64_t v37 = v10;
          operator delete(v10);
        }
        sub_1B4BE3D84(a5);
      }
      else
      {
        while (1)
        {
          size_t v12 = sub_1B4BC9AF8((uint64_t)&unk_1E9D40648, (uint64_t)v10);
          uint64_t v13 = v12;
          if (v12 == (void *)&unk_1E9D40650) {
            break;
          }
          uint64_t v15 = a4[1];
          unint64_t v14 = (unint64_t)a4[2];
          if ((unint64_t)v15 >= v14)
          {
            uint64_t v17 = *a4;
            uint64_t v18 = (v15 - *a4) >> 2;
            unint64_t v19 = v18 + 1;
            if ((unint64_t)(v18 + 1) >> 62) {
              sub_1B4BB3244();
            }
            uint64_t v20 = v14 - (void)v17;
            if (v20 >> 1 > v19) {
              unint64_t v19 = v20 >> 1;
            }
            if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v21 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v21 = v19;
            }
            if (v21)
            {
              uint64_t v22 = (char *)sub_1B4BB427C((uint64_t)(a4 + 2), v21);
              uint64_t v17 = *a4;
              uint64_t v15 = a4[1];
            }
            else
            {
              uint64_t v22 = 0;
            }
            uint64_t v23 = &v22[4 * v18];
            *(_DWORD *)uint64_t v23 = *((_DWORD *)v13 + 12);
            uint64_t v16 = v23 + 4;
            while (v15 != v17)
            {
              int v24 = *((_DWORD *)v15 - 1);
              v15 -= 4;
              *((_DWORD *)v23 - 1) = v24;
              v23 -= 4;
            }
            *a4 = v23;
            a4[1] = v16;
            a4[2] = &v22[4 * v21];
            if (v17) {
              operator delete(v17);
            }
          }
          else
          {
            *(_DWORD *)uint64_t v15 = *((_DWORD *)v12 + 12);
            uint64_t v16 = v15 + 4;
          }
          a4[1] = v16;
          int v25 = *((_DWORD *)v13 + 12);
          if (v25 == 1)
          {
            uint64_t v26 = sub_1B4BAFE78(a1[1]);
            size_t v27 = strlen(v26);
            uint64_t v28 = (*(uint64_t (**)(uint64_t *, const char *, size_t))(*a1 + 504))(a1, v26, v27);
            if ((*(uint64_t (**)(uint64_t *, uint64_t))(*a1 + 528))(a1, v28))
            {
              LODWORD(v38) = 13;
              sub_1B4BB2204((uint64_t)&v38 + 8);
              sub_1B4BB34F0((void *)&v38 + 1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
              sub_1B4BB34F0((void *)&v38 + 1, (uint64_t)"(", 1);
              std::ostream::operator<<();
              sub_1B4BB34F0((void *)&v38 + 1, (uint64_t)") [", 3);
              sub_1B4BB34F0((void *)&v38 + 1, (uint64_t)"!IsUnknown(PieceToId(absl::string_view(model_->bos_piece().data())))", 68);
              sub_1B4BB34F0((void *)&v38 + 1, (uint64_t)"] ", 2);
              unsigned int v32 = sub_1B4BAFE78(a1[1]);
              sub_1B4BB34F0((void *)&v38 + 1, (uint64_t)v32, v33);
              sub_1B4BAFA7C((unsigned int *)&v38, (uint64_t)a5);
              goto LABEL_40;
            }
            int v25 = *((_DWORD *)v13 + 12);
          }
          if (v25 == 2)
          {
            unsigned int v29 = sub_1B4BAFEFC(a1[1]);
            size_t v30 = strlen(v29);
            uint64_t v31 = (*(uint64_t (**)(uint64_t *, const char *, size_t))(*a1 + 504))(a1, v29, v30);
            if ((*(uint64_t (**)(uint64_t *, uint64_t))(*a1 + 528))(a1, v31))
            {
              LODWORD(v38) = 13;
              sub_1B4BB2204((uint64_t)&v38 + 8);
              sub_1B4BB34F0((void *)&v38 + 1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
              sub_1B4BB34F0((void *)&v38 + 1, (uint64_t)"(", 1);
              std::ostream::operator<<();
              sub_1B4BB34F0((void *)&v38 + 1, (uint64_t)") [", 3);
              sub_1B4BB34F0((void *)&v38 + 1, (uint64_t)"!IsUnknown(PieceToId(absl::string_view(model_->eos_piece().data())))", 68);
              sub_1B4BB34F0((void *)&v38 + 1, (uint64_t)"] ", 2);
              int v34 = sub_1B4BAFEFC(a1[1]);
              sub_1B4BB34F0((void *)&v38 + 1, (uint64_t)v34, v35);
              sub_1B4BAFA7C((unsigned int *)&v38, (uint64_t)a5);
LABEL_40:
              *((void *)&v38 + 1) = *MEMORY[0x1E4FBA418];
              *(void *)((char *)&v38 + *(void *)(*((void *)&v38 + 1) - 24) + 8) = *(void *)(MEMORY[0x1E4FBA418] + 24);
              *(void *)&long long v39 = MEMORY[0x1E4FBA470] + 16;
              if (SBYTE7(v44) < 0) {
                operator delete(__p[0]);
              }
              goto LABEL_42;
            }
          }
          v10 += 2;
          if (v10 == v11)
          {
            char v10 = (uint64_t *)v36;
            goto LABEL_29;
          }
        }
        LODWORD(v38) = 13;
        sub_1B4BB2204((uint64_t)&v38 + 8);
        sub_1B4BB34F0((void *)&v38 + 1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        sub_1B4BB34F0((void *)&v38 + 1, (uint64_t)"(", 1);
        std::ostream::operator<<();
        sub_1B4BB34F0((void *)&v38 + 1, (uint64_t)") [", 3);
        sub_1B4BB34F0((void *)&v38 + 1, (uint64_t)"it != extra_option_map.end()", 28);
        sub_1B4BB34F0((void *)&v38 + 1, (uint64_t)"] ", 2);
        sub_1B4BB34F0((void *)&v38 + 1, (uint64_t)"option \"", 8);
        sub_1B4BB34F0((void *)&v38 + 1, *v10, v10[1]);
        sub_1B4BB34F0((void *)&v38 + 1, (uint64_t)"\" is not available.", 19);
        sub_1B4BAFA7C((unsigned int *)&v38, (uint64_t)a5);
        *((void *)&v38 + 1) = *MEMORY[0x1E4FBA418];
        *(void *)((char *)&v38 + *(void *)(*((void *)&v38 + 1) - 24) + 8) = *(void *)(MEMORY[0x1E4FBA418]
                                                                                              + 24);
        *(void *)&long long v39 = MEMORY[0x1E4FBA470] + 16;
        if (SBYTE7(v44) < 0) {
          operator delete(__p[0]);
        }
LABEL_42:
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x1BA992920](v46);
        if (v36)
        {
          uint64_t v37 = (uint64_t *)v36;
          operator delete(v36);
        }
      }
    }
  }
  else
  {
    sub_1B4BE3D84(a5);
  }
}

void sub_1B4BBBD3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
}

void sub_1B4BBBDB8(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X8>)
{
}

void *sub_1B4BBBDC0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    if (*(void *)(a1 + 16))
    {
      double result = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 16))(v4);
      if (!*a2)
      {
        sub_1B4BE3D8C(a2);
        double result = (void *)(*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24))(*(void *)(a1 + 16));
        if (!*a2)
        {
          uint64_t v6 = sub_1B4BE3D8C(a2);
          return sub_1B4BE3D84(v6);
        }
      }
      return result;
    }
    unsigned int v9 = 13;
    uint64_t v8 = (void *)sub_1B4BB2204((uint64_t)v10);
    sub_1B4BB34F0(v8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    sub_1B4BB34F0(v10, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_1B4BB34F0(v10, (uint64_t)") [", 3);
    sub_1B4BB34F0(v10, (uint64_t)"normalizer_", 11);
    sub_1B4BB34F0(v10, (uint64_t)"] ", 2);
    sub_1B4BB34F0(v10, (uint64_t)"Normalizer is not initialized.", 30);
    sub_1B4BAFA7C(&v9, (uint64_t)a2);
  }
  else
  {
    unsigned int v9 = 13;
    uint64_t v7 = (void *)sub_1B4BB2204((uint64_t)v10);
    sub_1B4BB34F0(v7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    sub_1B4BB34F0(v10, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_1B4BB34F0(v10, (uint64_t)") [", 3);
    sub_1B4BB34F0(v10, (uint64_t)"model_", 6);
    sub_1B4BB34F0(v10, (uint64_t)"] ", 2);
    sub_1B4BB34F0(v10, (uint64_t)"Model is not initialized.", 25);
    sub_1B4BAFA7C(&v9, (uint64_t)a2);
  }
  v10[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v10 + *(void *)(v10[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v10[1] = MEMORY[0x1E4FBA470] + 16;
  if (v11 < 0) {
    operator delete((void *)v10[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return (void *)MEMORY[0x1BA992920](&v12);
}

void sub_1B4BBC0D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B4BBC0F8(void *a1@<X0>, _OWORD **a2@<X1>, uint64_t *a3@<X8>)
{
  (*(void (**)(void *))(*a1 + 88))(a1);
  if (*a3) {
    return;
  }
  sub_1B4BE3D8C(a3);
  uint64_t v6 = (const void *)a1[4];
  if (!v6
    || (uint64_t v7 = __dynamic_cast(v6, (const struct __class_type_info *)&unk_1F0D53198, (const struct __class_type_info *)&unk_1F0D530E8, 16)) == 0)
  {
    unsigned int v23 = 13;
    uint64_t v20 = (void *)sub_1B4BB2204((uint64_t)v24);
    sub_1B4BB34F0(v20, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    sub_1B4BB34F0(v24, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_1B4BB34F0(v24, (uint64_t)") [", 3);
    sub_1B4BB34F0(v24, (uint64_t)"(model_proto = dynamic_cast<ModelProto *>(model_proto_.get()))", 62);
    sub_1B4BB34F0(v24, (uint64_t)"] ", 2);
    sub_1B4BB34F0(v24, (uint64_t)"SetVocabulary is not supported when mmap-based model is loaded.", 63);
    sub_1B4BAFA7C(&v23, (uint64_t)a3);
LABEL_27:
    v24[0] = *(void **)MEMORY[0x1E4FBA418];
    *(void **)((char *)v24 + *(v24[0] - 3)) = *(void **)(MEMORY[0x1E4FBA418] + 24);
    v24[1] = (void *)(MEMORY[0x1E4FBA470] + 16);
    if (v25 < 0) {
      operator delete(v24[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x1BA992920](&v26);
    return;
  }
  uint64_t v8 = v7;
  unsigned int v9 = &unk_1E9D40760;
  if (v7[10]) {
    unsigned int v9 = (_DWORD *)v7[10];
  }
  if ((v9[68] - 1) >= 2)
  {
    unsigned int v23 = 13;
    unint64_t v21 = (void *)sub_1B4BB2204((uint64_t)v24);
    sub_1B4BB34F0(v21, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    sub_1B4BB34F0(v24, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_1B4BB34F0(v24, (uint64_t)") [", 3);
    sub_1B4BB34F0(v24, (uint64_t)"type == TrainerSpec::UNIGRAM || type == TrainerSpec::BPE", 56);
    sub_1B4BB34F0(v24, (uint64_t)"] ", 2);
    sub_1B4BB34F0(v24, (uint64_t)"Vocabulary constraint is only enabled in subword units.", 55);
    sub_1B4BAFA7C(&v23, (uint64_t)a3);
    goto LABEL_27;
  }
  sub_1B4BC9840((uint64_t)&v23, *a2, a2[1]);
  if (*((int *)v8 + 16) >= 1)
  {
    int v10 = 0;
    do
    {
      uint64_t v11 = sub_1B4BC8554((uint64_t)(v8 + 7), v10);
      uint64_t v12 = v11;
      if ((*(_DWORD *)(v11 + 60) - 2) >= 3)
      {
        unint64_t v13 = *(void *)(v11 + 48) & 0xFFFFFFFFFFFFFFFELL;
        if (*(char *)(v13 + 23) < 0)
        {
          unint64_t v15 = *(void *)v13;
          uint64_t v14 = *(void *)(v13 + 8);
        }
        else
        {
          uint64_t v14 = *(unsigned __int8 *)(v13 + 23);
          unint64_t v15 = *(void *)(v11 + 48) & 0xFFFFFFFFFFFFFFFELL;
        }
        v22[0] = v15;
        v22[1] = v14;
        if (v24 == sub_1B4BC9AF8((uint64_t)&v23, (uint64_t)v22)
          && ((unint64_t v16 = *(void *)(v12 + 48) & 0xFFFFFFFFFFFFFFFELL, *(char *)(v16 + 23) < 0)
            ? (unsigned __int8 *)(v18 = *(unsigned __int8 **)v16, uint64_t v17 = *(void *)(v16 + 8))
            : (uint64_t v17 = *(unsigned __int8 *)(v16 + 23),
               uint64_t v18 = (unsigned __int8 *)(*(void *)(v12 + 48) & 0xFFFFFFFFFFFFFFFELL)),
              v17 != asc_1B4C934DB[(unint64_t)*v18 >> 4]))
        {
          if (!sub_1B4BD7A54(5)) {
LABEL_32:
          }
            __assert_rtn("_internal_set_type", "sentencepiece_model.pb.h", 4686, "::sentencepiece::ModelProto_SentencePiece_Type_IsValid(value)");
          int v19 = 5;
        }
        else
        {
          if (!sub_1B4BD7A54(1)) {
            goto LABEL_32;
          }
          int v19 = 1;
        }
        *(_DWORD *)(v12 + 40) |= 4u;
        *(_DWORD *)(v12 + 6sub_1B4BC92E4(&a9, 0) = v19;
      }
      ++v10;
    }
    while (v10 < *((_DWORD *)v8 + 16));
  }
  sub_1B4BE3D84(a3);
  sub_1B4BB38C8((uint64_t)&v23, v24[0]);
}

void sub_1B4BBC55C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, void *a12)
{
}

void *sub_1B4BBC59C@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  double result = (void *)(*(uint64_t (**)(void *))(*a1 + 88))(a1);
  if (!*a2)
  {
    sub_1B4BE3D8C(a2);
    uint64_t v5 = (const void *)a1[4];
    if (v5
      && (uint64_t v6 = (int *)__dynamic_cast(v5, (const struct __class_type_info *)&unk_1F0D53198, (const struct __class_type_info *)&unk_1F0D530E8, 16)) != 0)
    {
      uint64_t v7 = *((void *)v6 + 9);
      if (v7) {
        uint64_t v8 = (uint64_t *)(v7 + 8);
      }
      else {
        uint64_t v8 = 0;
      }
      uint64_t v9 = v6[16];
      if (v9)
      {
        uint64_t v10 = 8 * v9;
        do
        {
          uint64_t v11 = *v8;
          if (*(_DWORD *)(*v8 + 60) == 5)
          {
            if (!sub_1B4BD7A54(1)) {
              sub_1B4BCC23C();
            }
            *(_DWORD *)(v11 + 40) |= 4u;
            *(_DWORD *)(v11 + 6sub_1B4BC92E4(&a9, 0) = 1;
          }
          ++v8;
          v10 -= 8;
        }
        while (v10);
      }
      return sub_1B4BE3D84(a2);
    }
    else
    {
      unsigned int v13 = 13;
      uint64_t v12 = (void *)sub_1B4BB2204((uint64_t)v14);
      sub_1B4BB34F0(v12, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      sub_1B4BB34F0(v14, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_1B4BB34F0(v14, (uint64_t)") [", 3);
      sub_1B4BB34F0(v14, (uint64_t)"(model_proto = dynamic_cast<ModelProto *>(model_proto_.get()))", 62);
      sub_1B4BB34F0(v14, (uint64_t)"] ", 2);
      sub_1B4BB34F0(v14, (uint64_t)"ResetVocabulary is not supported when mmap-based model is loaded.", 65);
      sub_1B4BAFA7C(&v13, (uint64_t)a2);
      v14[0] = *MEMORY[0x1E4FBA418];
      *(void *)((char *)v14 + *(void *)(v14[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
      v14[1] = MEMORY[0x1E4FBA470] + 16;
      if (v15 < 0) {
        operator delete((void *)v14[9]);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      return (void *)MEMORY[0x1BA992920](&v16);
    }
  }
  return result;
}

void sub_1B4BBC864(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B4BBC87C()
{
}

void sub_1B4BBCE60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  std::string __p = (void *)(v10 - 176);
  sub_1B4BC89A4((void ***)&__p);
  std::string __p = (void *)(v10 - 152);
  sub_1B4BC89A4((void ***)&__p);
  if (*(char *)(v10 - 105) < 0) {
    operator delete(*(void **)(v10 - 128));
  }
  uint64_t v12 = *(void *)(v10 - 104);
  *(void *)(v10 - 104) = 0;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  _Unwind_Resume(a1);
}

BOOL sub_1B4BBCF54(const char *a1, uint64_t a2, uint64_t a3)
{
  sub_1B4BC9B88((uint64_t)v11);
  size_t v5 = strlen(a1);
  uint64_t v6 = sub_1B4BB34F0(v12, (uint64_t)a1, v5);
  if ((*((unsigned char *)v6 + *(void *)(*v6 - 24) + 32) & 5) != 0)
  {
    BOOL v7 = 0;
  }
  else
  {
    uint64_t v8 = (void *)MEMORY[0x1BA992710](v11, a3);
    BOOL v7 = (*((unsigned char *)v8 + *(void *)(*v8 - 24) + 32) & 5) == 0;
  }
  v11[0] = *MEMORY[0x1E4FBA408];
  uint64_t v9 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v11 + *(void *)(v11[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v12[0] = v9;
  v12[1] = MEMORY[0x1E4FBA470] + 16;
  if (v13 < 0) {
    operator delete((void *)v12[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1BA992920](&v14);
  return v7;
}

void sub_1B4BBD12C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1B4BC9E60((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_1B4BBD140@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  double result = sub_1B4BC8A48(a2, 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3));
  uint64_t v4 = *a1;
  if (a1[1] != *a1)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    unint64_t v7 = 0;
    do
    {
      uint64_t v8 = (void *)(v4 + v5);
      LODWORD(v4) = *(char *)(v4 + v5 + 23);
      if ((v4 & 0x80000000) != 0)
      {
        uint64_t v9 = (void *)*v8;
        uint64_t v4 = v8[1];
      }
      else
      {
        uint64_t v4 = v4;
        uint64_t v9 = v8;
      }
      uint64_t v10 = (void *)(*result + v6);
      *uint64_t v10 = v9;
      v10[1] = v4;
      ++v7;
      uint64_t v4 = *a1;
      v6 += 16;
      v5 += 24;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3) > v7);
  }
  return result;
}

uint64_t sub_1B4BBD1E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1);
  if (!*a5)
  {
    sub_1B4BE3D8C(a5);
    if (a4)
    {
      sub_1B4BC89F8(a4);
      sub_1B4BD56EC(&v16, 0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, unsigned int *))(*(void *)a1 + 232))(a1, a2, a3, &v16);
      if (!*a5)
      {
        sub_1B4BE3D8C(a5);
        if (v19) {
          uint64_t v11 = v19 + 8;
        }
        else {
          uint64_t v11 = 0;
        }
        if (v18)
        {
          unint64_t v12 = a4[1];
          uint64_t v13 = 8 * v18;
          do
          {
            uint64_t v14 = (long long *)(*(void *)(*(void *)v11 + 48) & 0xFFFFFFFFFFFFFFFELL);
            if (v12 >= a4[2])
            {
              unint64_t v12 = sub_1B4BC9FF8(a4, v14);
            }
            else
            {
              sub_1B4BC9F98(a4, v14);
              v12 += 24;
            }
            a4[1] = v12;
            v11 += 8;
            v13 -= 8;
          }
          while (v13);
        }
        sub_1B4BE3D84(a5);
      }
      return sub_1B4BD5814(&v16);
    }
    else
    {
      unsigned int v16 = 13;
      char v15 = (void *)sub_1B4BB2204((uint64_t)v17);
      sub_1B4BB34F0(v15, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      sub_1B4BB34F0(v17, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_1B4BB34F0(v17, (uint64_t)") [", 3);
      sub_1B4BB34F0(v17, (uint64_t)"pieces", 6);
      sub_1B4BB34F0(v17, (uint64_t)"] ", 2);
      sub_1B4BB34F0(v17, (uint64_t)"output container is null", 24);
      sub_1B4BAFA7C(&v16, (uint64_t)a5);
      v17[0] = *MEMORY[0x1E4FBA418];
      *(void *)((char *)v17 + *(void *)(v17[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
      v17[1] = MEMORY[0x1E4FBA470] + 16;
      if (v21 < 0) {
        operator delete(__p);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      return MEMORY[0x1BA992920](&v22);
    }
  }
  return result;
}

void sub_1B4BBD4BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1B4BBD4E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char **a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1);
  if (!*a5)
  {
    sub_1B4BE3D8C(a5);
    if (a4)
    {
      a4[1] = *a4;
      sub_1B4BD56EC(&v26, 0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, unsigned int *))(*(void *)a1 + 232))(a1, a2, a3, &v26);
      if (!*a5)
      {
        sub_1B4BE3D8C(a5);
        if (v29) {
          uint64_t v11 = v29 + 8;
        }
        else {
          uint64_t v11 = 0;
        }
        if (v28)
        {
          unint64_t v12 = a4 + 2;
          uint64_t v13 = a4[1];
          uint64_t v14 = v11 + 8 * v28;
          do
          {
            int v15 = *(_DWORD *)(*(void *)v11 + 64);
            if ((unint64_t)v13 >= *v12)
            {
              uint64_t v17 = *a4;
              uint64_t v18 = (v13 - *a4) >> 2;
              unint64_t v19 = v18 + 1;
              if ((unint64_t)(v18 + 1) >> 62) {
                sub_1B4BB3244();
              }
              uint64_t v20 = *v12 - (void)v17;
              if (v20 >> 1 > v19) {
                unint64_t v19 = v20 >> 1;
              }
              if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v21 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v21 = v19;
              }
              if (v21)
              {
                uint64_t v22 = (char *)sub_1B4BB427C((uint64_t)(a4 + 2), v21);
                uint64_t v17 = *a4;
                uint64_t v13 = a4[1];
              }
              else
              {
                uint64_t v22 = 0;
              }
              unsigned int v23 = &v22[4 * v18];
              *(_DWORD *)unsigned int v23 = v15;
              unsigned int v16 = v23 + 4;
              while (v13 != v17)
              {
                int v24 = *((_DWORD *)v13 - 1);
                v13 -= 4;
                *((_DWORD *)v23 - 1) = v24;
                v23 -= 4;
              }
              *a4 = v23;
              a4[1] = v16;
              a4[2] = &v22[4 * v21];
              if (v17) {
                operator delete(v17);
              }
            }
            else
            {
              *(_DWORD *)uint64_t v13 = v15;
              unsigned int v16 = v13 + 4;
            }
            a4[1] = v16;
            v11 += 8;
            uint64_t v13 = v16;
          }
          while (v11 != v14);
        }
        sub_1B4BE3D84(a5);
      }
      return sub_1B4BD5814(&v26);
    }
    else
    {
      unsigned int v26 = 13;
      char v25 = (void *)sub_1B4BB2204((uint64_t)v27);
      sub_1B4BB34F0(v25, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      sub_1B4BB34F0(v27, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_1B4BB34F0(v27, (uint64_t)") [", 3);
      sub_1B4BB34F0(v27, (uint64_t)"ids", 3);
      sub_1B4BB34F0(v27, (uint64_t)"] ", 2);
      sub_1B4BB34F0(v27, (uint64_t)"output container is null", 24);
      sub_1B4BAFA7C(&v26, (uint64_t)a5);
      v27[0] = *MEMORY[0x1E4FBA418];
      *(void *)((char *)v27 + *(void *)(v27[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
      v27[1] = MEMORY[0x1E4FBA470] + 16;
      if (v31 < 0) {
        operator delete(__p);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      return MEMORY[0x1BA992920](&v32);
    }
  }
  return result;
}

void sub_1B4BBD858(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B4BBD888(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  sub_1B4BBD140(a2, __p);
  (*(void (**)(uint64_t, void **, uint64_t))(*(void *)a1 + 160))(a1, __p, a3);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_1B4BBD910(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1B4BBD92C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1);
  if (!*a4)
  {
    sub_1B4BE3D8C(a4);
    if (a3)
    {
      if (*(char *)(a3 + 23) < 0)
      {
        **(unsigned char **)a3 = 0;
        *(void *)(a3 + 8) = 0;
      }
      else
      {
        *(unsigned char *)a3 = 0;
        *(unsigned char *)(a3 + 23) = 0;
      }
      sub_1B4BD56EC(&v10, 0);
      (*(void (**)(uint64_t, uint64_t, unsigned int *))(*(void *)a1 + 272))(a1, a2, &v10);
      if (!*a4)
      {
        sub_1B4BE3D8C(a4);
        std::string::operator=((std::string *)a3, (const std::string *)(v11[8] & 0xFFFFFFFFFFFFFFFELL));
        sub_1B4BE3D84(a4);
      }
      return sub_1B4BD5814(&v10);
    }
    else
    {
      unsigned int v10 = 13;
      uint64_t v9 = (void *)sub_1B4BB2204((uint64_t)v11);
      sub_1B4BB34F0(v9, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      sub_1B4BB34F0(v11, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_1B4BB34F0(v11, (uint64_t)") [", 3);
      sub_1B4BB34F0(v11, (uint64_t)"detokenized", 11);
      sub_1B4BB34F0(v11, (uint64_t)"] ", 2);
      sub_1B4BB34F0(v11, (uint64_t)"output container is null", 24);
      sub_1B4BAFA7C(&v10, (uint64_t)a4);
      v11[0] = *MEMORY[0x1E4FBA418];
      *(void *)((char *)v11 + *(void *)(v11[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
      v11[1] = MEMORY[0x1E4FBA470] + 16;
      if (v12 < 0) {
        operator delete((void *)v11[9]);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      return MEMORY[0x1BA992920](&v13);
    }
  }
  return result;
}

void sub_1B4BBDBC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1B4BBDBF0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1);
  if (!*a4)
  {
    sub_1B4BE3D8C(a4);
    if (a3)
    {
      if (*(char *)(a3 + 23) < 0)
      {
        **(unsigned char **)a3 = 0;
        *(void *)(a3 + 8) = 0;
      }
      else
      {
        *(unsigned char *)a3 = 0;
        *(unsigned char *)(a3 + 23) = 0;
      }
      sub_1B4BD56EC(&v10, 0);
      (*(void (**)(uint64_t, uint64_t, unsigned int *))(*(void *)a1 + 280))(a1, a2, &v10);
      if (!*a4)
      {
        sub_1B4BE3D8C(a4);
        std::string::operator=((std::string *)a3, (const std::string *)(v11[8] & 0xFFFFFFFFFFFFFFFELL));
        sub_1B4BE3D84(a4);
      }
      return sub_1B4BD5814(&v10);
    }
    else
    {
      unsigned int v10 = 13;
      uint64_t v9 = (void *)sub_1B4BB2204((uint64_t)v11);
      sub_1B4BB34F0(v9, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      sub_1B4BB34F0(v11, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_1B4BB34F0(v11, (uint64_t)") [", 3);
      sub_1B4BB34F0(v11, (uint64_t)"detokenized", 11);
      sub_1B4BB34F0(v11, (uint64_t)"] ", 2);
      sub_1B4BB34F0(v11, (uint64_t)"output container is null", 24);
      sub_1B4BAFA7C(&v10, (uint64_t)a4);
      v11[0] = *MEMORY[0x1E4FBA418];
      *(void *)((char *)v11 + *(void *)(v11[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
      v11[1] = MEMORY[0x1E4FBA470] + 16;
      if (v12 < 0) {
        operator delete((void *)v11[9]);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      return MEMORY[0x1BA992920](&v13);
    }
  }
  return result;
}

void sub_1B4BBDE8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1B4BBDEB4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1);
  if (!*a6)
  {
    sub_1B4BE3D8C(a6);
    if (a5)
    {
      uint64_t v13 = *a5;
      uint64_t v14 = (void **)a5[1];
      while (v14 != (void **)v13)
      {
        v14 -= 3;
        char v31 = v14;
        sub_1B4BC89A4(&v31);
      }
      a5[1] = v13;
      sub_1B4BD62A8(&v31, 0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void ***))(*(void *)a1 + 240))(a1, a2, a3, a4, &v31);
      if (!*a6)
      {
        sub_1B4BE3D8C(a6);
        if (v34) {
          int v15 = (uint64_t *)(v34 + 8);
        }
        else {
          int v15 = 0;
        }
        if (v33)
        {
          unsigned int v16 = &v15[v33];
          do
          {
            uint64_t v17 = *v15;
            int v28 = 0;
            unint64_t v29 = 0;
            unint64_t v30 = 0;
            uint64_t v18 = *(void *)(v17 + 64);
            if (v18) {
              uint64_t v19 = v18 + 8;
            }
            else {
              uint64_t v19 = 0;
            }
            uint64_t v20 = *(int *)(v17 + 56);
            if (v20)
            {
              unint64_t v21 = 0;
              uint64_t v22 = 8 * v20;
              do
              {
                unint64_t v23 = *(void *)(*(void *)v19 + 48) & 0xFFFFFFFFFFFFFFFELL;
                if (v21 >= v30)
                {
                  unint64_t v21 = sub_1B4BC9FF8((uint64_t *)&v28, (long long *)v23);
                }
                else
                {
                  if (*(char *)(v23 + 23) < 0)
                  {
                    sub_1B4BCA11C((unsigned char *)v21, *(void **)v23, *(void *)(v23 + 8));
                  }
                  else
                  {
                    long long v24 = *(_OWORD *)v23;
                    *(void *)(v21 + 16) = *(void *)(v23 + 16);
                    *(_OWORD *)unint64_t v21 = v24;
                  }
                  v21 += 24;
                }
                unint64_t v29 = v21;
                v19 += 8;
                v22 -= 8;
              }
              while (v22);
            }
            unint64_t v25 = a5[1];
            if (v25 >= a5[2])
            {
              uint64_t v26 = sub_1B4BCA21C(a5, &v28);
            }
            else
            {
              sub_1B4BCA1BC((uint64_t)a5, &v28);
              uint64_t v26 = v25 + 24;
            }
            a5[1] = v26;
            long long v38 = &v28;
            sub_1B4BC89A4((void ***)&v38);
            ++v15;
          }
          while (v15 != v16);
        }
        sub_1B4BE3D84(a6);
      }
      return sub_1B4BD6364(&v31);
    }
    else
    {
      LODWORD(v31) = 13;
      size_t v27 = (void *)sub_1B4BB2204((uint64_t)v32);
      sub_1B4BB34F0(v27, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      sub_1B4BB34F0(v32, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_1B4BB34F0(v32, (uint64_t)") [", 3);
      sub_1B4BB34F0(v32, (uint64_t)"pieces", 6);
      sub_1B4BB34F0(v32, (uint64_t)"] ", 2);
      sub_1B4BB34F0(v32, (uint64_t)"output container is null", 24);
      sub_1B4BAFA7C((unsigned int *)&v31, (uint64_t)a6);
      v32[0] = *MEMORY[0x1E4FBA418];
      *(void *)((char *)v32 + *(void *)(v32[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
      v32[1] = MEMORY[0x1E4FBA470] + 16;
      if (v36 < 0) {
        operator delete(__p);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      return MEMORY[0x1BA992920](&v37);
    }
  }
  return result;
}

void sub_1B4BBE258(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1B4BAFB0C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B4BBE2A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1);
  if (!*a6)
  {
    sub_1B4BE3D8C(a6);
    if (a5)
    {
      sub_1B4BC8E6C(a5);
      sub_1B4BD62A8(&v37, 0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, unsigned int *))(*(void *)a1 + 240))(a1, a2, a3, a4, &v37);
      if (!*a6)
      {
        sub_1B4BE3D8C(a6);
        if (v40) {
          uint64_t v13 = (uint64_t *)(v40 + 8);
        }
        else {
          uint64_t v13 = 0;
        }
        if (v39)
        {
          int v33 = &v13[v39];
          do
          {
            uint64_t v14 = *v13;
            std::string __p = 0;
            uint64_t v35 = 0;
            char v36 = 0;
            uint64_t v15 = *(void *)(v14 + 64);
            if (v15) {
              uint64_t v16 = v15 + 8;
            }
            else {
              uint64_t v16 = 0;
            }
            uint64_t v17 = *(int *)(v14 + 56);
            if (v17)
            {
              uint64_t v18 = 0;
              uint64_t v19 = v16 + 8 * v17;
              do
              {
                int v20 = *(_DWORD *)(*(void *)v16 + 64);
                if (v18 >= v36)
                {
                  uint64_t v22 = (char *)__p;
                  uint64_t v23 = (v18 - (unsigned char *)__p) >> 2;
                  unint64_t v24 = v23 + 1;
                  if ((unint64_t)(v23 + 1) >> 62) {
                    sub_1B4BB3244();
                  }
                  uint64_t v25 = v36 - (unsigned char *)__p;
                  if ((v36 - (unsigned char *)__p) >> 1 > v24) {
                    unint64_t v24 = v25 >> 1;
                  }
                  if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v26 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v26 = v24;
                  }
                  if (v26)
                  {
                    size_t v27 = (char *)sub_1B4BB427C((uint64_t)&v36, v26);
                    uint64_t v22 = (char *)__p;
                    uint64_t v18 = v35;
                  }
                  else
                  {
                    size_t v27 = 0;
                  }
                  int v28 = &v27[4 * v23];
                  *(_DWORD *)int v28 = v20;
                  unint64_t v21 = v28 + 4;
                  while (v18 != v22)
                  {
                    int v29 = *((_DWORD *)v18 - 1);
                    v18 -= 4;
                    *((_DWORD *)v28 - 1) = v29;
                    v28 -= 4;
                  }
                  std::string __p = v28;
                  uint64_t v35 = v21;
                  char v36 = &v27[4 * v26];
                  if (v22) {
                    operator delete(v22);
                  }
                }
                else
                {
                  *(_DWORD *)uint64_t v18 = v20;
                  unint64_t v21 = v18 + 4;
                }
                uint64_t v35 = v21;
                v16 += 8;
                uint64_t v18 = v21;
              }
              while (v16 != v19);
            }
            unint64_t v30 = a5[1];
            if (v30 >= a5[2])
            {
              uint64_t v31 = sub_1B4BCA784(a5, (uint64_t)&__p);
            }
            else
            {
              sub_1B4BCA730((uint64_t)a5, (uint64_t)&__p);
              uint64_t v31 = v30 + 24;
            }
            a5[1] = v31;
            if (__p)
            {
              uint64_t v35 = (char *)__p;
              operator delete(__p);
            }
            ++v13;
          }
          while (v13 != v33);
        }
        sub_1B4BE3D84(a6);
      }
      return sub_1B4BD6364(&v37);
    }
    else
    {
      unsigned int v37 = 13;
      uint64_t v32 = (void *)sub_1B4BB2204((uint64_t)v38);
      sub_1B4BB34F0(v32, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      sub_1B4BB34F0(v38, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_1B4BB34F0(v38, (uint64_t)") [", 3);
      sub_1B4BB34F0(v38, (uint64_t)"ids", 3);
      sub_1B4BB34F0(v38, (uint64_t)"] ", 2);
      sub_1B4BB34F0(v38, (uint64_t)"output container is null", 24);
      sub_1B4BAFA7C(&v37, (uint64_t)a6);
      v38[0] = *MEMORY[0x1E4FBA418];
      *(void *)((char *)v38 + *(void *)(v38[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
      v38[1] = MEMORY[0x1E4FBA470] + 16;
      if (v42 < 0) {
        operator delete(v41);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      return MEMORY[0x1BA992920](&v43);
    }
  }
  return result;
}

void sub_1B4BBE6A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, char a14)
{
}

uint64_t sub_1B4BBE6E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X8>, float a7@<S0>)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1);
  if (!*a6)
  {
    sub_1B4BE3D8C(a6);
    if (a5)
    {
      sub_1B4BC89F8(a5);
      sub_1B4BD56EC(&v20, 0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, unsigned int *, float))(*(void *)a1 + 248))(a1, a2, a3, a4, &v20, a7);
      if (!*a6)
      {
        sub_1B4BE3D8C(a6);
        if (v23) {
          uint64_t v15 = v23 + 8;
        }
        else {
          uint64_t v15 = 0;
        }
        if (v22)
        {
          unint64_t v16 = a5[1];
          uint64_t v17 = 8 * v22;
          do
          {
            uint64_t v18 = (long long *)(*(void *)(*(void *)v15 + 48) & 0xFFFFFFFFFFFFFFFELL);
            if (v16 >= a5[2])
            {
              unint64_t v16 = sub_1B4BC9FF8(a5, v18);
            }
            else
            {
              sub_1B4BC9F98(a5, v18);
              v16 += 24;
            }
            a5[1] = v16;
            v15 += 8;
            v17 -= 8;
          }
          while (v17);
        }
        sub_1B4BE3D84(a6);
      }
      return sub_1B4BD5814(&v20);
    }
    else
    {
      unsigned int v20 = 13;
      uint64_t v19 = (void *)sub_1B4BB2204((uint64_t)v21);
      sub_1B4BB34F0(v19, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      sub_1B4BB34F0(v21, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_1B4BB34F0(v21, (uint64_t)") [", 3);
      sub_1B4BB34F0(v21, (uint64_t)"pieces", 6);
      sub_1B4BB34F0(v21, (uint64_t)"] ", 2);
      sub_1B4BB34F0(v21, (uint64_t)"output container is null", 24);
      sub_1B4BAFA7C(&v20, (uint64_t)a6);
      v21[0] = *MEMORY[0x1E4FBA418];
      *(void *)((char *)v21 + *(void *)(v21[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
      v21[1] = MEMORY[0x1E4FBA470] + 16;
      if (v25 < 0) {
        operator delete(__p);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      return MEMORY[0x1BA992920](&v26);
    }
  }
  return result;
}

void sub_1B4BBE9E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1B4BBEA0C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char **a5@<X4>, uint64_t *a6@<X8>, float a7@<S0>)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1);
  if (!*a6)
  {
    sub_1B4BE3D8C(a6);
    if (a5)
    {
      a5[1] = *a5;
      sub_1B4BD56EC(&v30, 0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, unsigned int *, float))(*(void *)a1 + 248))(a1, a2, a3, a4, &v30, a7);
      if (!*a6)
      {
        sub_1B4BE3D8C(a6);
        if (v33) {
          uint64_t v15 = v33 + 8;
        }
        else {
          uint64_t v15 = 0;
        }
        if (v32)
        {
          unint64_t v16 = a5 + 2;
          uint64_t v17 = a5[1];
          uint64_t v18 = v15 + 8 * v32;
          do
          {
            int v19 = *(_DWORD *)(*(void *)v15 + 64);
            if ((unint64_t)v17 >= *v16)
            {
              unint64_t v21 = *a5;
              uint64_t v22 = (v17 - *a5) >> 2;
              unint64_t v23 = v22 + 1;
              if ((unint64_t)(v22 + 1) >> 62) {
                sub_1B4BB3244();
              }
              uint64_t v24 = *v16 - (void)v21;
              if (v24 >> 1 > v23) {
                unint64_t v23 = v24 >> 1;
              }
              if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v25 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v25 = v23;
              }
              if (v25)
              {
                uint64_t v26 = (char *)sub_1B4BB427C((uint64_t)(a5 + 2), v25);
                unint64_t v21 = *a5;
                uint64_t v17 = a5[1];
              }
              else
              {
                uint64_t v26 = 0;
              }
              size_t v27 = &v26[4 * v22];
              *(_DWORD *)size_t v27 = v19;
              unsigned int v20 = v27 + 4;
              while (v17 != v21)
              {
                int v28 = *((_DWORD *)v17 - 1);
                v17 -= 4;
                *((_DWORD *)v27 - 1) = v28;
                v27 -= 4;
              }
              *a5 = v27;
              a5[1] = v20;
              a5[2] = &v26[4 * v25];
              if (v21) {
                operator delete(v21);
              }
            }
            else
            {
              *(_DWORD *)uint64_t v17 = v19;
              unsigned int v20 = v17 + 4;
            }
            a5[1] = v20;
            v15 += 8;
            uint64_t v17 = v20;
          }
          while (v15 != v18);
        }
        sub_1B4BE3D84(a6);
      }
      return sub_1B4BD5814(&v30);
    }
    else
    {
      unsigned int v30 = 13;
      int v29 = (void *)sub_1B4BB2204((uint64_t)v31);
      sub_1B4BB34F0(v29, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      sub_1B4BB34F0(v31, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_1B4BB34F0(v31, (uint64_t)") [", 3);
      sub_1B4BB34F0(v31, (uint64_t)"ids", 3);
      sub_1B4BB34F0(v31, (uint64_t)"] ", 2);
      sub_1B4BB34F0(v31, (uint64_t)"output container is null", 24);
      sub_1B4BAFA7C(&v30, (uint64_t)a6);
      v31[0] = *MEMORY[0x1E4FBA418];
      *(void *)((char *)v31 + *(void *)(v31[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
      v31[1] = MEMORY[0x1E4FBA470] + 16;
      if (v35 < 0) {
        operator delete(__p);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      return MEMORY[0x1BA992920](&v36);
    }
  }
  return result;
}

void sub_1B4BBED94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1B4BBEDC4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X6>, uint64_t *a8@<X8>, float a9@<S0>)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1);
  if (!*a8)
  {
    sub_1B4BE3D8C(a8);
    if (a7)
    {
      uint64_t v19 = *a7;
      unsigned int v20 = (void **)a7[1];
      while (v20 != (void **)v19)
      {
        v20 -= 4;
        int v39 = v20;
        sub_1B4BC89A4(&v39);
      }
      a7[1] = v19;
      sub_1B4BD62A8(&v39, 0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void ***, float))(*(void *)a1 + 256))(a1, a2, a3, a4, a5, a6, &v39, a9);
      if (!*a8)
      {
        sub_1B4BE3D8C(a8);
        unint64_t v21 = (long long *)*a7;
        uint64_t v22 = (long long *)a7[1];
        while (v22 != v21)
        {
          v22 -= 2;
          uint64_t v36 = v22;
          sub_1B4BC89A4((void ***)&v36);
        }
        a7[1] = (uint64_t)v21;
        sub_1B4BBF23C(a7, v41);
        if (v42) {
          uint64_t v24 = (uint64_t *)(v42 + 8);
        }
        else {
          uint64_t v24 = 0;
        }
        if (v41)
        {
          unint64_t v25 = &v24[v41];
          do
          {
            uint64_t v26 = *v24;
            uint64_t v36 = 0;
            std::string __dst = 0;
            unint64_t v38 = 0;
            sub_1B4BBF2D0((uint64_t *)&v36, *(int *)(v26 + 56));
            uint64_t v27 = *(void *)(v26 + 64);
            if (v27) {
              uint64_t v28 = v27 + 8;
            }
            else {
              uint64_t v28 = 0;
            }
            uint64_t v29 = *(int *)(v26 + 56);
            if (v29)
            {
              unint64_t v30 = (unint64_t)__dst;
              uint64_t v31 = 8 * v29;
              do
              {
                unint64_t v32 = *(void *)(*(void *)v28 + 48) & 0xFFFFFFFFFFFFFFFELL;
                if (v30 >= v38)
                {
                  unint64_t v30 = sub_1B4BC9FF8((uint64_t *)&v36, (long long *)v32);
                }
                else
                {
                  if (*(char *)(v32 + 23) < 0)
                  {
                    sub_1B4BCA11C((unsigned char *)v30, *(void **)v32, *(void *)(v32 + 8));
                  }
                  else
                  {
                    long long v33 = *(_OWORD *)v32;
                    *(void *)(v30 + 16) = *(void *)(v32 + 16);
                    *(_OWORD *)unint64_t v30 = v33;
                  }
                  v30 += 24;
                }
                std::string __dst = (void *)v30;
                v28 += 8;
                v31 -= 8;
              }
              while (v31);
            }
            LODWORD(v46[0]) = *(_DWORD *)(v26 + 80);
            unint64_t v34 = a7[1];
            if (v34 >= a7[2])
            {
              uint64_t v35 = sub_1B4BCAE24(a7, &v36, v46);
            }
            else
            {
              sub_1B4BCADB0((uint64_t)a7, &v36, (float *)v46);
              uint64_t v35 = v34 + 32;
            }
            a7[1] = v35;
            v46[0] = (void **)&v36;
            sub_1B4BC89A4(v46);
            ++v24;
          }
          while (v24 != v25);
        }
        sub_1B4BE3D84(a8);
      }
      return sub_1B4BD6364(&v39);
    }
    else
    {
      LODWORD(v39) = 13;
      unint64_t v23 = (void *)sub_1B4BB2204((uint64_t)v40);
      sub_1B4BB34F0(v23, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      sub_1B4BB34F0(v40, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_1B4BB34F0(v40, (uint64_t)") [", 3);
      sub_1B4BB34F0(v40, (uint64_t)"pieces", 6);
      sub_1B4BB34F0(v40, (uint64_t)"] ", 2);
      sub_1B4BB34F0(v40, (uint64_t)"output container is null", 24);
      sub_1B4BAFA7C((unsigned int *)&v39, (uint64_t)a8);
      v40[0] = *MEMORY[0x1E4FBA418];
      *(void *)((char *)v40 + *(void *)(v40[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
      v40[1] = MEMORY[0x1E4FBA470] + 16;
      if (v44 < 0) {
        operator delete(__p);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      return MEMORY[0x1BA992920](&v45);
    }
  }
  return result;
}

void sub_1B4BBF1E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_1B4BAFB0C((uint64_t)va);
  _Unwind_Resume(a1);
}

void **sub_1B4BBF23C(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  if (a2 > (v4 - *a1) >> 5)
  {
    if (a2 >> 59) {
      sub_1B4BB3244();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = sub_1B4BCABC0((uint64_t)result, a2);
    v7[1] = (char *)v7[0] + v5;
    v7[2] = (char *)v7[0] + v5;
    v7[3] = (char *)v7[0] + 32 * v6;
    sub_1B4BCAB48(a1, v7);
    return sub_1B4BCAD28(v7);
  }
  return result;
}

void sub_1B4BBF2BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1B4BCAD28((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B4BBF2D0(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL) {
      sub_1B4BB3244();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = sub_1B4BB325C(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 24 * v6;
    sub_1B4BC9618(a1, v7);
    return sub_1B4BC97B0((uint64_t)v7);
  }
  return result;
}

void sub_1B4BBF370(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1B4BC97B0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B4BBF384@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X6>, uint64_t *a8@<X8>, float a9@<S0>)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1);
  if (!*a8)
  {
    sub_1B4BE3D8C(a8);
    if (a7)
    {
      sub_1B4BB3380(a7);
      sub_1B4BD62A8(&v45, 0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unsigned int *, float))(*(void *)a1 + 256))(a1, a2, a3, a4, a5, a6, &v45, a9);
      if (!*a8)
      {
        int v39 = a8;
        sub_1B4BE3D8C(a8);
        sub_1B4BB3380(a7);
        sub_1B4BBF834(a7, v47);
        if (v48) {
          uint64_t v19 = (uint64_t *)(v48 + 8);
        }
        else {
          uint64_t v19 = 0;
        }
        if (v47)
        {
          uint64_t v40 = &v19[v47];
          do
          {
            uint64_t v20 = *v19;
            std::string __p = 0;
            uint64_t v43 = 0;
            char v44 = 0;
            sub_1B4BBF8C8(&__p, *(int *)(v20 + 56));
            uint64_t v21 = *(void *)(v20 + 64);
            if (v21) {
              uint64_t v22 = v21 + 8;
            }
            else {
              uint64_t v22 = 0;
            }
            uint64_t v23 = *(int *)(v20 + 56);
            if (v23)
            {
              uint64_t v24 = v22 + 8 * v23;
              unint64_t v25 = v43;
              do
              {
                int v26 = *(_DWORD *)(*(void *)v22 + 64);
                if (v25 >= v44)
                {
                  uint64_t v28 = (char *)__p;
                  uint64_t v29 = (v25 - (unsigned char *)__p) >> 2;
                  unint64_t v30 = v29 + 1;
                  if ((unint64_t)(v29 + 1) >> 62) {
                    sub_1B4BB3244();
                  }
                  uint64_t v31 = v44 - (unsigned char *)__p;
                  if ((v44 - (unsigned char *)__p) >> 1 > v30) {
                    unint64_t v30 = v31 >> 1;
                  }
                  if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v32 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v32 = v30;
                  }
                  if (v32)
                  {
                    long long v33 = (char *)sub_1B4BB427C((uint64_t)&v44, v32);
                    uint64_t v28 = (char *)__p;
                    unint64_t v25 = v43;
                  }
                  else
                  {
                    long long v33 = 0;
                  }
                  unint64_t v34 = &v33[4 * v29];
                  *(_DWORD *)unint64_t v34 = v26;
                  uint64_t v27 = v34 + 4;
                  while (v25 != v28)
                  {
                    int v35 = *((_DWORD *)v25 - 1);
                    v25 -= 4;
                    *((_DWORD *)v34 - 1) = v35;
                    v34 -= 4;
                  }
                  std::string __p = v34;
                  uint64_t v43 = v27;
                  char v44 = &v33[4 * v32];
                  if (v28) {
                    operator delete(v28);
                  }
                }
                else
                {
                  *(_DWORD *)unint64_t v25 = v26;
                  uint64_t v27 = v25 + 4;
                }
                uint64_t v43 = v27;
                v22 += 8;
                unint64_t v25 = v27;
              }
              while (v22 != v24);
            }
            int v41 = *(_DWORD *)(v20 + 80);
            unint64_t v36 = a7[1];
            if (v36 >= a7[2])
            {
              uint64_t v37 = sub_1B4BCB1D4(a7, (uint64_t)&__p, &v41);
            }
            else
            {
              sub_1B4BCB16C((uint64_t)a7, (uint64_t)&__p, (float *)&v41);
              uint64_t v37 = v36 + 32;
            }
            a7[1] = v37;
            if (__p)
            {
              uint64_t v43 = (char *)__p;
              operator delete(__p);
            }
            ++v19;
          }
          while (v19 != v40);
        }
        sub_1B4BE3D84(v39);
      }
      return sub_1B4BD6364(&v45);
    }
    else
    {
      unsigned int v45 = 13;
      unint64_t v38 = (void *)sub_1B4BB2204((uint64_t)v46);
      sub_1B4BB34F0(v38, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      sub_1B4BB34F0(v46, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_1B4BB34F0(v46, (uint64_t)") [", 3);
      sub_1B4BB34F0(v46, (uint64_t)"ids", 3);
      sub_1B4BB34F0(v46, (uint64_t)"] ", 2);
      sub_1B4BB34F0(v46, (uint64_t)"output container is null", 24);
      sub_1B4BAFA7C(&v45, (uint64_t)a8);
      v46[0] = *MEMORY[0x1E4FBA418];
      *(void *)((char *)v46 + *(void *)(v46[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
      v46[1] = MEMORY[0x1E4FBA470] + 16;
      if (v50 < 0) {
        operator delete(v49);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      return MEMORY[0x1BA992920](&v51);
    }
  }
  return result;
}

void sub_1B4BBF7E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, char a16)
{
}

uint64_t sub_1B4BBF834(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 5)
  {
    if (a2 >> 59) {
      sub_1B4BB3244();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = sub_1B4BCABC0(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 32 * v6;
    sub_1B4BCAF34(a1, v7);
    return sub_1B4BCB0D8((uint64_t)v7);
  }
  return result;
}

void sub_1B4BBF8B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1B4BCB0D8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1B4BBF8C8(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 2)
  {
    if (a2 >> 62) {
      sub_1B4BB3244();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    uint64_t v6 = (char *)sub_1B4BB427C(v3, a2);
    unint64_t v7 = &v6[v5 & 0xFFFFFFFFFFFFFFFCLL];
    uint64_t v9 = &v6[4 * v8];
    unsigned int v10 = (char *)*a1;
    uint64_t v11 = (char *)a1[1];
    char v12 = v7;
    if (v11 != *a1)
    {
      char v12 = v7;
      do
      {
        int v13 = *((_DWORD *)v11 - 1);
        v11 -= 4;
        *((_DWORD *)v12 - 1) = v13;
        v12 -= 4;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void *sub_1B4BBF970@<X0>(uint64_t *a1@<X0>, char *a2@<X1>, size_t a3@<X2>, uint64_t a4@<X4>, uint64_t *a5@<X5>, uint64_t *a6@<X6>, uint64_t a7@<X7>, uint64_t *a8@<X8>)
{
  uint64_t v10 = *a6;
  uint64_t v110 = a6[1];
  if (*a6 != v110)
  {
    uint64_t v11 = a5;
    unint64_t v12 = 0;
    char v13 = 0;
    uint64_t v112 = a7 + 48;
    while (1)
    {
      size_t v14 = *(void *)(v10 + 8);
      if (!v14)
      {
        LODWORD(__p[0]) = 13;
        v97 = (void *)sub_1B4BB2204((uint64_t)&__p[1]);
        sub_1B4BB34F0(v97, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        sub_1B4BB34F0(&__p[1], (uint64_t)"(", 1);
        std::ostream::operator<<();
        sub_1B4BB34F0(&__p[1], (uint64_t)") [", 3);
        sub_1B4BB34F0(&__p[1], (uint64_t)"!w.empty()", 10);
        sub_1B4BB34F0(&__p[1], (uint64_t)"] ", 2);
        sub_1B4BB34F0(&__p[1], (uint64_t)"Empty piece is not allowed.", 27);
        sub_1B4BAFA7C((unsigned int *)__p, (uint64_t)a8);
        goto LABEL_137;
      }
      uint64_t v15 = *(unsigned __int8 **)v10;
      uint64_t v16 = *(unsigned int *)(v10 + 16);
      int v111 = (*(uint64_t (**)(uint64_t *, uint64_t))(*a1 + 528))(a1, v16);
      if ((*(unsigned int (**)(uint64_t *, uint64_t))(*a1 + 536))(a1, v16))
      {
        uint64_t v17 = *(int **)(a7 + 64);
        if (v17)
        {
          uint64_t v18 = *(int *)(a7 + 56);
          int v19 = *v17;
          if ((int)v18 < *v17)
          {
            *(_DWORD *)(a7 + 56) = v18 + 1;
            uint64_t v20 = *(void *)&v17[2 * v18 + 2];
LABEL_58:
            *(_DWORD *)(v20 + 40) |= 1u;
            sub_1B4BB8D14(__p, v15, v14);
            uint64_t v53 = *(void *)(v20 + 8);
            int64_t v54 = (void *)(v53 & 0xFFFFFFFFFFFFFFFELL);
            if (v53) {
              int64_t v54 = (void *)*v54;
            }
            sub_1B4BE4FCC((uint64_t *)(v20 + 48), (long long *)__p, (uint64_t)v54);
            if (SHIBYTE(v117) < 0) {
              operator delete(__p[0]);
            }
            int v55 = *(_DWORD *)(v20 + 40);
            *(_DWORD *)(v20 + 64) = v16;
            uint64_t v56 = *(void *)(*v11 + 8 * v12);
            *(_DWORD *)(v20 + 68) = v56;
            *(_DWORD *)(v20 + 4sub_1B4BC92E4(&a9, 0) = v55 | 0x1C;
            goto LABEL_83;
          }
          if (v19 != *(_DWORD *)(a7 + 60))
          {
LABEL_57:
            *uint64_t v17 = v19 + 1;
            uint64_t v20 = sub_1B4BD6AB0(*(void *)(a7 + 48));
            uint64_t v51 = *(void *)(a7 + 64);
            uint64_t v52 = *(int *)(a7 + 56);
            *(_DWORD *)(a7 + 56) = v52 + 1;
            *(void *)(v51 + 8 * v52 + 8) = v20;
            goto LABEL_58;
          }
        }
        else
        {
          int v19 = *(_DWORD *)(a7 + 60);
        }
        sub_1B4BF8BEC(v112, v19 + 1);
        uint64_t v17 = *(int **)(a7 + 64);
        int v19 = *v17;
        goto LABEL_57;
      }
      uint64_t v21 = *v11;
      uint64_t v22 = v11[1] - *v11;
      if (v12 >= v22 >> 3)
      {
        LODWORD(__p[0]) = 13;
        v98 = (void *)sub_1B4BB2204((uint64_t)&__p[1]);
        sub_1B4BB34F0(v98, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        sub_1B4BB34F0(&__p[1], (uint64_t)"(", 1);
        std::ostream::operator<<();
        sub_1B4BB34F0(&__p[1], (uint64_t)") [", 3);
        sub_1B4BB34F0(&__p[1], (uint64_t)"(begin) < (norm_to_orig.size())", 31);
        sub_1B4BB34F0(&__p[1], (uint64_t)"] ", 2);
        sub_1B4BAFA7C((unsigned int *)__p, (uint64_t)a8);
        goto LABEL_137;
      }
      size_t v23 = v14 + v12;
      if (v14 + v12 >= v22 >> 3)
      {
        LODWORD(__p[0]) = 13;
        v99 = (void *)sub_1B4BB2204((uint64_t)&__p[1]);
        sub_1B4BB34F0(v99, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        sub_1B4BB34F0(&__p[1], (uint64_t)"(", 1);
        std::ostream::operator<<();
        sub_1B4BB34F0(&__p[1], (uint64_t)") [", 3);
        sub_1B4BB34F0(&__p[1], (uint64_t)"(end) < (norm_to_orig.size())", 29);
        sub_1B4BB34F0(&__p[1], (uint64_t)"] ", 2);
        sub_1B4BAFA7C((unsigned int *)__p, (uint64_t)a8);
        goto LABEL_137;
      }
      size_t v24 = *(void *)(v21 + 8 * v12);
      if (v24 > a3)
      {
        LODWORD(__p[0]) = 13;
        v100 = (void *)sub_1B4BB2204((uint64_t)&__p[1]);
        sub_1B4BB34F0(v100, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        sub_1B4BB34F0(&__p[1], (uint64_t)"(", 1);
        std::ostream::operator<<();
        sub_1B4BB34F0(&__p[1], (uint64_t)") [", 3);
        sub_1B4BB34F0(&__p[1], (uint64_t)"(orig_begin) <= (input.size())", 30);
        sub_1B4BB34F0(&__p[1], (uint64_t)"] ", 2);
        sub_1B4BAFA7C((unsigned int *)__p, (uint64_t)a8);
        goto LABEL_137;
      }
      size_t v25 = *(void *)(v21 + 8 * v23);
      if (v25 > a3)
      {
        LODWORD(__p[0]) = 13;
        v101 = (void *)sub_1B4BB2204((uint64_t)&__p[1]);
        sub_1B4BB34F0(v101, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        sub_1B4BB34F0(&__p[1], (uint64_t)"(", 1);
        std::ostream::operator<<();
        sub_1B4BB34F0(&__p[1], (uint64_t)") [", 3);
        sub_1B4BB34F0(&__p[1], (uint64_t)"(orig_end) <= (input.size())", 28);
        sub_1B4BB34F0(&__p[1], (uint64_t)"] ", 2);
        sub_1B4BAFA7C((unsigned int *)__p, (uint64_t)a8);
        goto LABEL_137;
      }
      size_t v26 = v25 - v24;
      if (v25 < v24)
      {
        LODWORD(__p[0]) = 13;
        v102 = (void *)sub_1B4BB2204((uint64_t)&__p[1]);
        sub_1B4BB34F0(v102, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        sub_1B4BB34F0(&__p[1], (uint64_t)"(", 1);
        std::ostream::operator<<();
        sub_1B4BB34F0(&__p[1], (uint64_t)") [", 3);
        sub_1B4BB34F0(&__p[1], (uint64_t)"(orig_begin) <= (orig_end)", 26);
        sub_1B4BB34F0(&__p[1], (uint64_t)"] ", 2);
        sub_1B4BAFA7C((unsigned int *)__p, (uint64_t)a8);
        goto LABEL_137;
      }
      if (a3 >= v24) {
        size_t v27 = v24;
      }
      else {
        size_t v27 = a3;
      }
      uint64_t v28 = &a2[v27];
      size_t v29 = a3 - v27;
      if (v29 < v26) {
        size_t v26 = v29;
      }
      __src = v28;
      size_t __len = v26;
      if (v111)
      {
        if ((*(unsigned int (**)(uint64_t))(*(void *)a1[1] + 184))(a1[1]))
        {
          while (1)
          {
            unsigned __int8 v31 = *v15++;
            unsigned __int8 v30 = v31;
            unint64_t v32 = *(int **)(a7 + 64);
            if (!v32) {
              break;
            }
            uint64_t v33 = *(int *)(a7 + 56);
            int v34 = *v32;
            if ((int)v33 >= *v32)
            {
              if (v34 == *(_DWORD *)(a7 + 60))
              {
LABEL_25:
                sub_1B4BF8BEC(v112, v34 + 1);
                unint64_t v32 = *(int **)(a7 + 64);
                int v34 = *v32;
              }
              int *v32 = v34 + 1;
              uint64_t v35 = sub_1B4BD6AB0(*(void *)(a7 + 48));
              uint64_t v36 = *(void *)(a7 + 64);
              uint64_t v37 = *(int *)(a7 + 56);
              *(_DWORD *)(a7 + 56) = v37 + 1;
              *(void *)(v36 + 8 * v37 + 8) = v35;
              goto LABEL_27;
            }
            *(_DWORD *)(a7 + 56) = v33 + 1;
            uint64_t v35 = *(void *)&v32[2 * v33 + 2];
LABEL_27:
            sub_1B4BB18F8(v30, (uint64_t)&__dst);
            if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              p_dst = &__dst;
            }
            else {
              p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
            }
            if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type size = __dst.__r_.__value_.__l.__size_;
            }
            int v40 = (*(uint64_t (**)(uint64_t, std::string *, std::string::size_type))(*(void *)a1[1] + 112))(a1[1], p_dst, size);
            if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              int v41 = &__dst;
            }
            else {
              int v41 = (std::string *)__dst.__r_.__value_.__r.__words[0];
            }
            if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v42 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v42 = __dst.__r_.__value_.__l.__size_;
            }
            *(_DWORD *)(v35 + 40) |= 1u;
            sub_1B4BB8D14(__p, v41, v42);
            uint64_t v43 = *(void *)(v35 + 8);
            char v44 = (void *)(v43 & 0xFFFFFFFFFFFFFFFELL);
            if (v43) {
              char v44 = (void *)*v44;
            }
            sub_1B4BE4FCC((uint64_t *)(v35 + 48), (long long *)__p, (uint64_t)v44);
            if (SHIBYTE(v117) < 0) {
              operator delete(__p[0]);
            }
            int v45 = *(_DWORD *)(v35 + 40);
            *(_DWORD *)(v35 + 4sub_1B4BC92E4(&a9, 0) = v45 | 4;
            *(_DWORD *)(v35 + 64) = v40;
            if (v14 == 1)
            {
              *(_DWORD *)(v35 + 4sub_1B4BC92E4(&a9, 0) = v45 | 6;
              sub_1B4BB8D14(__p, __src, __len);
              uint64_t v46 = *(void *)(v35 + 8);
              int v47 = (void *)(v46 & 0xFFFFFFFFFFFFFFFELL);
              if (v46) {
                int v47 = (void *)*v47;
              }
              sub_1B4BE4FCC((uint64_t *)(v35 + 56), (long long *)__p, (uint64_t)v47);
              if (SHIBYTE(v117) < 0) {
                operator delete(__p[0]);
              }
              int v48 = *(_DWORD *)(v35 + 40);
              *(_DWORD *)(v35 + 68) = v24;
              int v49 = v48 | 0x18;
              int v50 = v25;
            }
            else
            {
              *(_DWORD *)(v35 + 68) = v24;
              int v49 = v45 | 0x1C;
              int v50 = v24;
            }
            *(_DWORD *)(v35 + 4sub_1B4BC92E4(&a9, 0) = v49;
            *(_DWORD *)(v35 + 72) = v50;
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__dst.__r_.__value_.__l.__data_);
            }
            if (!--v14)
            {
              unint64_t v12 = v23;
              uint64_t v11 = a5;
              goto LABEL_84;
            }
          }
          int v34 = *(_DWORD *)(a7 + 60);
          goto LABEL_25;
        }
        if (v13)
        {
          uint64_t v57 = sub_1B4BC8FAC(v112, *(_DWORD *)(a7 + 56) - 1);
          if (v14 > 0x7FFFFFFFFFFFFFF7) {
            goto LABEL_141;
          }
          uint64_t v20 = v57;
          uint64_t v58 = *(void *)(v57 + 48);
          v104 = (uint64_t *)(v57 + 48);
          if (v14 >= 0x17)
          {
            uint64_t v71 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v14 | 7) != 0x17) {
              uint64_t v71 = v14 | 7;
            }
            uint64_t v103 = v71 + 1;
            v59 = (std::string *)operator new(v71 + 1);
            __dst.__r_.__value_.__l.__size_ = v14;
            __dst.__r_.__value_.__r.__words[2] = v103 | 0x8000000000000000;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v59;
          }
          else
          {
            *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v14;
            v59 = &__dst;
          }
          unint64_t v72 = v58 & 0xFFFFFFFFFFFFFFFELL;
          memmove(v59, v15, v14);
          v59->__r_.__value_.__s.__data_[v14] = 0;
          int v73 = *(char *)(v72 + 23);
          if (v73 >= 0) {
            v74 = (const std::string::value_type *)v72;
          }
          else {
            v74 = *(const std::string::value_type **)v72;
          }
          if (v73 >= 0) {
            std::string::size_type v75 = *(unsigned __int8 *)(v72 + 23);
          }
          else {
            std::string::size_type v75 = *(void *)(v72 + 8);
          }
          uint64_t v76 = std::string::insert(&__dst, 0, v74, v75);
          long long v77 = *(_OWORD *)&v76->__r_.__value_.__l.__data_;
          uint64_t v117 = v76->__r_.__value_.__r.__words[2];
          *(_OWORD *)std::string __p = v77;
          v76->__r_.__value_.__l.__size_ = 0;
          v76->__r_.__value_.__r.__words[2] = 0;
          v76->__r_.__value_.__r.__words[0] = 0;
          *(_DWORD *)(v20 + 40) |= 1u;
          uint64_t v78 = *(void *)(v20 + 8);
          uint64_t v79 = (void *)(v78 & 0xFFFFFFFFFFFFFFFELL);
          size_t v80 = __len;
          if (v78) {
            uint64_t v79 = (void *)*v79;
          }
          sub_1B4BE4FCC(v104, (long long *)__p, (uint64_t)v79);
          if (SHIBYTE(v117) < 0) {
            operator delete(__p[0]);
          }
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__dst.__r_.__value_.__l.__data_);
          }
          if (__len > 0x7FFFFFFFFFFFFFF7) {
LABEL_141:
          }
            sub_1B4BB33D8();
          uint64_t v81 = *(void *)(v20 + 56);
          if (__len >= 0x17)
          {
            uint64_t v83 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((__len | 7) != 0x17) {
              uint64_t v83 = __len | 7;
            }
            uint64_t v84 = v83 + 1;
            std::string::size_type v82 = (std::string *)operator new(v83 + 1);
            unint64_t v85 = v84 | 0x8000000000000000;
            size_t v80 = __len;
            __dst.__r_.__value_.__l.__size_ = __len;
            __dst.__r_.__value_.__r.__words[2] = v85;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v82;
          }
          else
          {
            *((unsigned char *)&__dst.__r_.__value_.__s + 23) = __len;
            std::string::size_type v82 = &__dst;
            if (!__len) {
              goto LABEL_109;
            }
          }
          memmove(v82, __src, v80);
LABEL_109:
          v82->__r_.__value_.__s.__data_[v80] = 0;
          int v86 = *(char *)((v81 & 0xFFFFFFFFFFFFFFFELL) + 23);
          if (v86 >= 0) {
            v87 = (const std::string::value_type *)(v81 & 0xFFFFFFFFFFFFFFFELL);
          }
          else {
            v87 = *(const std::string::value_type **)(v81 & 0xFFFFFFFFFFFFFFFELL);
          }
          if (v86 >= 0) {
            std::string::size_type v88 = *(unsigned __int8 *)((v81 & 0xFFFFFFFFFFFFFFFELL) + 23);
          }
          else {
            std::string::size_type v88 = *(void *)((v81 & 0xFFFFFFFFFFFFFFFELL) + 8);
          }
          v89 = std::string::insert(&__dst, 0, v87, v88);
          long long v90 = *(_OWORD *)&v89->__r_.__value_.__l.__data_;
          uint64_t v117 = v89->__r_.__value_.__r.__words[2];
          *(_OWORD *)std::string __p = v90;
          v89->__r_.__value_.__l.__size_ = 0;
          v89->__r_.__value_.__r.__words[2] = 0;
          v89->__r_.__value_.__r.__words[0] = 0;
          *(_DWORD *)(v20 + 40) |= 2u;
          uint64_t v91 = *(void *)(v20 + 8);
          v92 = (void *)(v91 & 0xFFFFFFFFFFFFFFFELL);
          uint64_t v11 = a5;
          if (v91) {
            v92 = (void *)*v92;
          }
          sub_1B4BE4FCC((uint64_t *)(v20 + 56), (long long *)__p, (uint64_t)v92);
          if (SHIBYTE(v117) < 0) {
            operator delete(__p[0]);
          }
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__dst.__r_.__value_.__l.__data_);
          }
          *(_DWORD *)(v20 + 40) |= 0x10u;
          LODWORD(v56) = v25;
          unint64_t v12 = v23;
          goto LABEL_83;
        }
      }
      uint64_t v60 = *(int **)(a7 + 64);
      if (!v60) {
        break;
      }
      uint64_t v61 = *(int *)(a7 + 56);
      int v62 = *v60;
      if ((int)v61 >= *v60)
      {
        if (v62 == *(_DWORD *)(a7 + 60))
        {
LABEL_72:
          sub_1B4BF8BEC(v112, v62 + 1);
          uint64_t v60 = *(int **)(a7 + 64);
          int v62 = *v60;
        }
        *uint64_t v60 = v62 + 1;
        uint64_t v20 = sub_1B4BD6AB0(*(void *)(a7 + 48));
        uint64_t v63 = *(void *)(a7 + 64);
        uint64_t v64 = *(int *)(a7 + 56);
        *(_DWORD *)(a7 + 56) = v64 + 1;
        *(void *)(v63 + 8 * v64 + 8) = v20;
        goto LABEL_74;
      }
      *(_DWORD *)(a7 + 56) = v61 + 1;
      uint64_t v20 = *(void *)&v60[2 * v61 + 2];
LABEL_74:
      *(_DWORD *)(v20 + 40) |= 1u;
      sub_1B4BB8D14(__p, v15, v14);
      uint64_t v65 = *(void *)(v20 + 8);
      v66 = (void *)(v65 & 0xFFFFFFFFFFFFFFFELL);
      if (v65) {
        v66 = (void *)*v66;
      }
      sub_1B4BE4FCC((uint64_t *)(v20 + 48), (long long *)__p, (uint64_t)v66);
      if (SHIBYTE(v117) < 0) {
        operator delete(__p[0]);
      }
      int v67 = *(_DWORD *)(v20 + 40);
      *(_DWORD *)(v20 + 64) = v16;
      *(_DWORD *)(v20 + 4sub_1B4BC92E4(&a9, 0) = v67 | 6;
      sub_1B4BB8D14(__p, __src, __len);
      uint64_t v68 = *(void *)(v20 + 8);
      std::string::size_type v69 = (void *)(v68 & 0xFFFFFFFFFFFFFFFELL);
      if (v68) {
        std::string::size_type v69 = (void *)*v69;
      }
      sub_1B4BE4FCC((uint64_t *)(v20 + 56), (long long *)__p, (uint64_t)v69);
      if (SHIBYTE(v117) < 0) {
        operator delete(__p[0]);
      }
      int v70 = *(_DWORD *)(v20 + 40);
      *(_DWORD *)(v20 + 68) = v24;
      *(_DWORD *)(v20 + 4sub_1B4BC92E4(&a9, 0) = v70 | 0x18;
      LODWORD(v56) = v25;
      unint64_t v12 = v23;
      uint64_t v11 = a5;
LABEL_83:
      *(_DWORD *)(v20 + 72) = v56;
      size_t v23 = v12;
LABEL_84:
      v10 += 24;
      char v13 = v111;
      if (v10 == v110) {
        goto LABEL_123;
      }
    }
    int v62 = *(_DWORD *)(a7 + 60);
    goto LABEL_72;
  }
  size_t v23 = 0;
LABEL_123:
  if (v23 == a4)
  {
    uint64_t result = sub_1B4BC07E4(a1, (uint64_t)(a1 + 5), a7, a8);
    if (!*a8)
    {
      sub_1B4BE3D8C(a8);
      *(_DWORD *)(a7 + 40) |= 1u;
      sub_1B4BB8D14(__p, a2, a3);
      uint64_t v94 = *(void *)(a7 + 8);
      v95 = (void *)(v94 & 0xFFFFFFFFFFFFFFFELL);
      if (v94) {
        v95 = (void *)*v95;
      }
      sub_1B4BE4FCC((uint64_t *)(a7 + 72), (long long *)__p, (uint64_t)v95);
      if (SHIBYTE(v117) < 0) {
        operator delete(__p[0]);
      }
      return sub_1B4BE3D84(a8);
    }
    return result;
  }
  LODWORD(__p[0]) = 13;
  v96 = (void *)sub_1B4BB2204((uint64_t)&__p[1]);
  sub_1B4BB34F0(v96, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
  sub_1B4BB34F0(&__p[1], (uint64_t)"(", 1);
  std::ostream::operator<<();
  sub_1B4BB34F0(&__p[1], (uint64_t)") [", 3);
  sub_1B4BB34F0(&__p[1], (uint64_t)"(consumed) == (normalized.size())", 33);
  sub_1B4BB34F0(&__p[1], (uint64_t)"] ", 2);
  sub_1B4BB34F0(&__p[1], (uint64_t)"all normalized characters are not consumed.", 43);
  sub_1B4BAFA7C((unsigned int *)__p, (uint64_t)a8);
LABEL_137:
  __p[1] = *(void **)MEMORY[0x1E4FBA418];
  *(void **)((char *)&__p[1] + *((void *)__p[1] - 3)) = *(void **)(MEMORY[0x1E4FBA418] + 24);
  uint64_t v117 = MEMORY[0x1E4FBA470] + 16;
  if (v119 < 0) {
    operator delete(v118);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return (void *)MEMORY[0x1BA992920](&v120);
}

void sub_1B4BC0738(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a33 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1B4BC07E4@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v6 = *(_DWORD **)a2;
  int64_t v5 = *(_DWORD **)(a2 + 8);
  if (*(_DWORD **)a2 != v5)
  {
    uint64_t v9 = a3 + 48;
    while (1)
    {
      switch(*v6)
      {
        case 0:
          uint64_t v10 = *(void *)(a3 + 64);
          if (v10) {
            unint64_t v11 = v10 + 8;
          }
          else {
            unint64_t v11 = 0;
          }
          uint64_t v12 = *(int *)(a3 + 56);
          char v13 = (uint64_t *)(v11 + 8 * v12 - 8);
          if (v12) {
            BOOL v14 = (unint64_t)v13 > v11;
          }
          else {
            BOOL v14 = 0;
          }
          if (v14)
          {
            unint64_t v15 = v11 + 8;
            do
            {
              uint64_t v16 = *v13--;
              sub_1B4BCBB0C(*(void *)(v15 - 8), v16);
              BOOL v17 = v15 >= (unint64_t)v13;
              v15 += 8;
            }
            while (!v17);
          }
          goto LABEL_52;
        case 1:
          uint64_t v18 = *(int **)(a3 + 64);
          if (!v18)
          {
            int v20 = *(_DWORD *)(a3 + 60);
LABEL_34:
            sub_1B4BF8BEC(v9, v20 + 1);
            uint64_t v18 = *(int **)(a3 + 64);
            int v20 = *v18;
            goto LABEL_35;
          }
          int v19 = *(_DWORD *)(a3 + 56);
          int v20 = *v18;
          if (v19 < *v18)
          {
            int v21 = v19 + 1;
            *(_DWORD *)(a3 + 56) = v19 + 1;
            goto LABEL_36;
          }
          if (v20 == *(_DWORD *)(a3 + 60)) {
            goto LABEL_34;
          }
LABEL_35:
          *uint64_t v18 = v20 + 1;
          uint64_t v32 = sub_1B4BD6AB0(*(void *)(a3 + 48));
          uint64_t v33 = *(void *)(a3 + 64);
          uint64_t v34 = *(int *)(a3 + 56);
          int v21 = v34 + 1;
          *(_DWORD *)(a3 + 56) = v34 + 1;
          *(void *)(v33 + 8 * v34 + 8) = v32;
LABEL_36:
          if (v21 > 1)
          {
            unint64_t v35 = v21;
            do
            {
              uint64_t v36 = *(void *)(a3 + 64) + 8;
              uint64_t v37 = *(void *)(v36 + 8 * (v35 - 2));
              *(void *)(v36 + 8 * (v35 - 2)) = *(void *)(v36 + 8 * (v35 - 1));
              *(void *)(v36 + 8 * (v35 - 1)) = v37;
              BOOL v14 = v35-- > 2;
            }
            while (v14);
          }
          if (v21 < 1)
          {
            sub_1B4BE6194((uint64_t)__p, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1728);
            unint64_t v38 = sub_1B4BE61AC(__p, "CHECK failed: (index) < (current_size_): ");
            sub_1B4BE62E8((uint64_t)&v57, (const char **)&v38->__r_.__value_.__l.__data_);
            sub_1B4BE62F0((uint64_t)__p);
          }
          uint64_t v39 = *(void *)(*(void *)(a3 + 64) + 8);
          int v40 = sub_1B4BAFE78(a1[1]);
          size_t v41 = strlen(v40);
          int v42 = (*(uint64_t (**)(uint64_t *, const char *, size_t))(*a1 + 504))(a1, v40, v41);
          *(_DWORD *)(v39 + 40) |= 4u;
          *(_DWORD *)(v39 + 64) = v42;
          uint64_t v43 = (char *)sub_1B4BAFE78(a1[1]);
          sub_1B4BAFE78(a1[1]);
          *(_DWORD *)(v39 + 40) |= 1u;
          sub_1B4BB8D14(__p, v43, v44);
          uint64_t v45 = *(void *)(v39 + 8);
          uint64_t v46 = (void *)(v45 & 0xFFFFFFFFFFFFFFFELL);
          if (v45) {
            uint64_t v46 = (void *)*v46;
          }
          sub_1B4BE4FCC((uint64_t *)(v39 + 48), (long long *)__p, (uint64_t)v46);
          goto LABEL_50;
        case 2:
          uint64_t v22 = *(int **)(a3 + 64);
          if (!v22)
          {
            int v24 = *(_DWORD *)(a3 + 60);
LABEL_45:
            sub_1B4BF8BEC(v9, v24 + 1);
            uint64_t v22 = *(int **)(a3 + 64);
            int v24 = *v22;
            goto LABEL_46;
          }
          uint64_t v23 = *(int *)(a3 + 56);
          int v24 = *v22;
          if ((int)v23 < *v22)
          {
            *(_DWORD *)(a3 + 56) = v23 + 1;
            uint64_t v25 = *(void *)&v22[2 * v23 + 2];
            goto LABEL_47;
          }
          if (v24 == *(_DWORD *)(a3 + 60)) {
            goto LABEL_45;
          }
LABEL_46:
          *uint64_t v22 = v24 + 1;
          uint64_t v25 = sub_1B4BD6AB0(*(void *)(a3 + 48));
          uint64_t v47 = *(void *)(a3 + 64);
          uint64_t v48 = *(int *)(a3 + 56);
          *(_DWORD *)(a3 + 56) = v48 + 1;
          *(void *)(v47 + 8 * v48 + 8) = v25;
LABEL_47:
          int v49 = sub_1B4BAFEFC(a1[1]);
          size_t v50 = strlen(v49);
          int v51 = (*(uint64_t (**)(uint64_t *, const char *, size_t))(*a1 + 504))(a1, v49, v50);
          *(_DWORD *)(v25 + 40) |= 4u;
          *(_DWORD *)(v25 + 64) = v51;
          uint64_t v52 = (char *)sub_1B4BAFEFC(a1[1]);
          sub_1B4BAFEFC(a1[1]);
          *(_DWORD *)(v25 + 40) |= 1u;
          sub_1B4BB8D14(__p, v52, v53);
          uint64_t v54 = *(void *)(v25 + 8);
          int v55 = (void *)(v54 & 0xFFFFFFFFFFFFFFFELL);
          if (v54) {
            int v55 = (void *)*v55;
          }
          sub_1B4BE4FCC((uint64_t *)(v25 + 48), (long long *)__p, (uint64_t)v55);
LABEL_50:
          if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p[0].__r_.__value_.__l.__data_);
          }
LABEL_52:
          if (++v6 == v5) {
            return sub_1B4BE3D84(a4);
          }
          break;
        case 3:
          if (*(int *)(a3 + 56) >= 1)
          {
            int v26 = 0;
            do
            {
              uint64_t v27 = sub_1B4BC8FAC(v9, v26);
              if ((*(unsigned int (**)(uint64_t *, void))(*a1 + 528))(a1, *(unsigned int *)(v27 + 64)))
              {
                uint64_t v28 = (char *)sub_1B4BAFDF4(a1[1]);
                sub_1B4BAFDF4(a1[1]);
                *(_DWORD *)(v27 + 40) |= 1u;
                sub_1B4BB8D14(__p, v28, v29);
                uint64_t v30 = *(void *)(v27 + 8);
                unsigned __int8 v31 = (void *)(v30 & 0xFFFFFFFFFFFFFFFELL);
                if (v30) {
                  unsigned __int8 v31 = (void *)*v31;
                }
                sub_1B4BE4FCC((uint64_t *)(v27 + 48), (long long *)__p, (uint64_t)v31);
                if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__p[0].__r_.__value_.__l.__data_);
                }
              }
              ++v26;
            }
            while (v26 < *(_DWORD *)(a3 + 56));
          }
          goto LABEL_52;
        default:
          return (void *)sub_1B4BE3EF0(a4, 13, "unknown extra_option type.", 26);
      }
    }
  }
  return sub_1B4BE3D84(a4);
}

void sub_1B4BC0CB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
}

void sub_1B4BC0CFC(uint64_t *a1@<X0>, char *a2@<X1>, size_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  (*(void (**)(uint64_t *))(*a1 + 88))(a1);
  if (!*a5)
  {
    sub_1B4BE3D8C(a5);
    if (a4)
    {
      sub_1B4BD588C(a4);
      BOOL v17 = 0;
      uint64_t v18 = 0;
      uint64_t v19 = 0;
      BOOL v14 = 0;
      unint64_t v15 = 0;
      uint64_t v16 = 0;
      (*(void (**)(uint64_t, char *, size_t, void **, void **))(*(void *)a1[2] + 32))(a1[2], a2, a3, &v17, &v14);
      if (!*a5)
      {
        sub_1B4BE3D8C(a5);
        (*(void (**)(void **__return_ptr))(*(void *)a1[1] + 40))(__p);
        if (v19 >= 0) {
          uint64_t v10 = HIBYTE(v19);
        }
        else {
          uint64_t v10 = v18;
        }
        sub_1B4BBF970(a1, a2, a3, v10, (uint64_t *)&v14, (uint64_t *)__p, a4, a5);
        if (!*a5)
        {
          unint64_t v11 = sub_1B4BE3D8C(a5);
          sub_1B4BE3D84(v11);
        }
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
      }
      if (v14)
      {
        unint64_t v15 = v14;
        operator delete(v14);
      }
      if (SHIBYTE(v19) < 0) {
        operator delete(v17);
      }
    }
    else
    {
      LODWORD(v17) = 13;
      uint64_t v12 = (void *)sub_1B4BB2204((uint64_t)&v18);
      sub_1B4BB34F0(v12, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      sub_1B4BB34F0(&v18, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_1B4BB34F0(&v18, (uint64_t)") [", 3);
      sub_1B4BB34F0(&v18, (uint64_t)"spt", 3);
      sub_1B4BB34F0(&v18, (uint64_t)"] ", 2);
      sub_1B4BB34F0(&v18, (uint64_t)"output proto is null", 20);
      sub_1B4BAFA7C((unsigned int *)&v17, (uint64_t)a5);
      uint64_t v18 = *MEMORY[0x1E4FBA418];
      *(uint64_t *)((char *)&v18 + *(void *)(v18 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
      uint64_t v19 = MEMORY[0x1E4FBA470] + 16;
      if (v21 < 0) {
        operator delete(v20);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x1BA992920](&v22);
    }
  }
}

void sub_1B4BC1038(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (__p) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B4BC1094(uint64_t *a1@<X0>, char *a2@<X1>, size_t a3@<X2>, uint64_t a4@<X4>, uint64_t *a5@<X8>)
{
  (*(void (**)(uint64_t *))(*a1 + 88))(a1);
  if (*a5) {
    return;
  }
  sub_1B4BE3D8C(a5);
  if (a4)
  {
    sub_1B4BD63A0(a4);
    int v26 = 0;
    uint64_t v27 = 0;
    uint64_t v28 = 0;
    uint64_t v23 = 0;
    int v24 = 0;
    uint64_t v25 = 0;
    (*(void (**)(uint64_t, char *, size_t, void **, void **))(*(void *)a1[2] + 32))(a1[2], a2, a3, &v26, &v23);
    if (!*a5)
    {
      sub_1B4BE3D8C(a5);
      if ((*(uint64_t (**)(uint64_t))(*(void *)a1[1] + 88))(a1[1]))
      {
        (*(void (**)(uint64_t *__return_ptr))(*(void *)a1[1] + 48))(&v21);
        uint64_t v10 = v21;
        uint64_t v11 = v22;
        if (v21 != v22)
        {
          while (1)
          {
            uint64_t v12 = *(int **)(a4 + 32);
            if (!v12) {
              break;
            }
            uint64_t v13 = *(int *)(a4 + 24);
            int v14 = *v12;
            if ((int)v13 >= *v12)
            {
              if (v14 == *(_DWORD *)(a4 + 28))
              {
LABEL_12:
                sub_1B4BF8BEC(a4 + 16, v14 + 1);
                uint64_t v12 = *(int **)(a4 + 32);
                int v14 = *v12;
              }
              *uint64_t v12 = v14 + 1;
              uint64_t v15 = sub_1B4BD6B80(*(void *)(a4 + 16));
              uint64_t v16 = *(void *)(a4 + 32);
              uint64_t v17 = *(int *)(a4 + 24);
              *(_DWORD *)(a4 + 24) = v17 + 1;
              *(void *)(v16 + 8 * v17 + 8) = v15;
              goto LABEL_14;
            }
            *(_DWORD *)(a4 + 24) = v13 + 1;
            uint64_t v15 = *(void *)&v12[2 * v13 + 2];
LABEL_14:
            int v18 = *(_DWORD *)(v10 + 24);
            *(_DWORD *)(v15 + 40) |= 2u;
            *(_DWORD *)(v15 + 8sub_1B4BC92E4(&a9, 0) = v18;
            if (v28 >= 0) {
              uint64_t v19 = HIBYTE(v28);
            }
            else {
              uint64_t v19 = v27;
            }
            sub_1B4BBF970(a1, a2, a3, v19, (uint64_t *)&v23, (uint64_t *)v10, v15, a5);
            if (*a5) {
              goto LABEL_29;
            }
            sub_1B4BE3D8C(a5);
            v10 += 32;
            if (v10 == v11)
            {
              sub_1B4BE3D84(a5);
              goto LABEL_29;
            }
          }
          int v14 = *(_DWORD *)(a4 + 28);
          goto LABEL_12;
        }
        LODWORD(v29) = 13;
        sub_1B4BB2204((uint64_t)&v30);
        sub_1B4BB34F0(&v30, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        sub_1B4BB34F0(&v30, (uint64_t)"(", 1);
        std::ostream::operator<<();
        sub_1B4BB34F0(&v30, (uint64_t)") [", 3);
        sub_1B4BB34F0(&v30, (uint64_t)"!nbests.empty()", 15);
        sub_1B4BB34F0(&v30, (uint64_t)"] ", 2);
        sub_1B4BB34F0(&v30, (uint64_t)"NBestEncode returns empty result.", 33);
        sub_1B4BAFA7C((unsigned int *)&v29, (uint64_t)a5);
        uint64_t v30 = *MEMORY[0x1E4FBA418];
        *(uint64_t *)((char *)&v30 + *(void *)(v30 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
        uint64_t v31 = MEMORY[0x1E4FBA470] + 16;
        if (v33 < 0) {
          operator delete(__p);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x1BA992920](v34);
LABEL_29:
        size_t v29 = (void **)&v21;
        sub_1B4BB332C(&v29);
      }
      else
      {
        LODWORD(v29) = 13;
        sub_1B4BB2204((uint64_t)&v30);
        sub_1B4BB34F0(&v30, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        sub_1B4BB34F0(&v30, (uint64_t)"(", 1);
        std::ostream::operator<<();
        sub_1B4BB34F0(&v30, (uint64_t)") [", 3);
        sub_1B4BB34F0(&v30, (uint64_t)"model_->IsNBestEncodeAvailable()", 32);
        sub_1B4BB34F0(&v30, (uint64_t)"] ", 2);
        sub_1B4BB34F0(&v30, (uint64_t)"NBestEncode is not available for the current model.", 51);
        sub_1B4BAFA7C((unsigned int *)&v29, (uint64_t)a5);
        uint64_t v30 = *MEMORY[0x1E4FBA418];
        *(uint64_t *)((char *)&v30 + *(void *)(v30 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
        uint64_t v31 = MEMORY[0x1E4FBA470] + 16;
        if (v33 < 0) {
          operator delete(__p);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x1BA992920](v34);
      }
    }
    if (v23)
    {
      int v24 = v23;
      operator delete(v23);
    }
    if (SHIBYTE(v28) < 0) {
      operator delete(v26);
    }
  }
  else
  {
    LODWORD(v29) = 13;
    int v20 = (void *)sub_1B4BB2204((uint64_t)&v30);
    sub_1B4BB34F0(v20, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    sub_1B4BB34F0(&v30, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_1B4BB34F0(&v30, (uint64_t)") [", 3);
    sub_1B4BB34F0(&v30, (uint64_t)"nbest_spt", 9);
    sub_1B4BB34F0(&v30, (uint64_t)"] ", 2);
    sub_1B4BB34F0(&v30, (uint64_t)"output proto is null", 20);
    sub_1B4BAFA7C((unsigned int *)&v29, (uint64_t)a5);
    uint64_t v30 = *MEMORY[0x1E4FBA418];
    *(uint64_t *)((char *)&v30 + *(void *)(v30 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
    uint64_t v31 = MEMORY[0x1E4FBA470] + 16;
    if (v33 < 0) {
      operator delete(__p);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x1BA992920](v34);
  }
}

void sub_1B4BC17D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char *a22)
{
  a22 = &a10;
  sub_1B4BB332C((void ***)&a22);
  if (__p)
  {
    a14 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(a1);
}

void sub_1B4BC1868(uint64_t *a1@<X0>, char *a2@<X1>, size_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t *a6@<X8>, float a7@<S0>)
{
  (*(void (**)(uint64_t *))(*a1 + 88))(a1);
  if (*a6) {
    return;
  }
  sub_1B4BE3D8C(a6);
  if (a5)
  {
    sub_1B4BD588C(a5);
    if (a4 < 513)
    {
      unint64_t v35 = 0;
      uint64_t v36 = 0;
      uint64_t v37 = 0;
      std::string __p = 0;
      char v33 = 0;
      uint64_t v34 = 0;
      (*(void (**)(uint64_t, char *, size_t, void **, void **))(*(void *)a1[2] + 32))(a1[2], a2, a3, &v35, &__p);
      if (*a6)
      {
LABEL_5:
        if (__p)
        {
          char v33 = __p;
          operator delete(__p);
        }
        if (SHIBYTE(v37) < 0) {
          operator delete(v35);
        }
        return;
      }
      sub_1B4BE3D8C(a6);
      char v16 = (*(uint64_t (**)(uint64_t))(*(void *)a1[1] + 88))(a1[1]);
      if (a4 >= 0) {
        char v17 = v16;
      }
      else {
        char v17 = 0;
      }
      if (v17)
      {
        if (a4 > 1)
        {
          (*(void (**)(uint64_t *__return_ptr))(*(void *)a1[1] + 48))(&v30);
          if (v30 == v31)
          {
            LODWORD(v38) = 13;
            sub_1B4BB2204((uint64_t)v39);
            sub_1B4BB34F0(v39, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
            sub_1B4BB34F0(v39, (uint64_t)"(", 1);
            std::ostream::operator<<();
            sub_1B4BB34F0(v39, (uint64_t)") [", 3);
            sub_1B4BB34F0(v39, (uint64_t)"!nbests.empty()", 15);
            sub_1B4BB34F0(v39, (uint64_t)"] ", 2);
            sub_1B4BB34F0(v39, (uint64_t)"NBestEncode returns empty result.", 33);
            sub_1B4BAFA7C((unsigned int *)&v38, (uint64_t)a6);
            sub_1B4BAFB0C((uint64_t)&v38);
            unint64_t v38 = &v30;
            sub_1B4BB332C((void ***)&v38);
            goto LABEL_5;
          }
          LODWORD(v29[0]) = 0;
          sub_1B4BCB2D8(&v38, (v31 - v30) >> 5, v29);
          if (v31 != v30)
          {
            uint64_t v19 = (float *)v38;
            if ((unint64_t)((v31 - v30) >> 5) <= 1) {
              uint64_t v20 = 1;
            }
            else {
              uint64_t v20 = (v31 - v30) >> 5;
            }
            uint64_t v21 = (float *)(v30 + 24);
            do
            {
              float v22 = *v21;
              v21 += 8;
              *v19++ = expf(v22 * a7);
              --v20;
            }
            while (v20);
          }
          uint64_t v23 = sub_1B4BE1D98();
          sub_1B4BCB35C((uint64_t)v29, (float *)v38, v39[0]);
          uint64_t v24 = HIBYTE(v37);
          uint64_t v25 = v36;
          int v26 = sub_1B4BCB6C0((uint64_t)v29, v23, (double **)v29);
          if ((v24 & 0x80u) == 0) {
            uint64_t v27 = v24;
          }
          else {
            uint64_t v27 = v25;
          }
          sub_1B4BBF970(a1, a2, a3, v27, (uint64_t *)&__p, (uint64_t *)(v30 + 32 * v26), a5, a6);
          uint64_t v28 = *a6;
          if (!*a6) {
            sub_1B4BE3D8C(a6);
          }
          if (v29[0])
          {
            v29[1] = v29[0];
            operator delete(v29[0]);
          }
          if (v38)
          {
            v39[0] = (float *)v38;
            operator delete(v38);
          }
          unint64_t v38 = &v30;
          sub_1B4BB332C((void ***)&v38);
          if (v28) {
            goto LABEL_5;
          }
          goto LABEL_51;
        }
        (*(void (**)(void **__return_ptr))(*(void *)a1[1] + 40))(&v38);
        if (v37 >= 0) {
          uint64_t v18 = HIBYTE(v37);
        }
        else {
          uint64_t v18 = v36;
        }
      }
      else
      {
        if (((*(uint64_t (**)(uint64_t))(*(void *)a1[1] + 80))(a1[1]) & 1) == 0)
        {
          LODWORD(v38) = 13;
          sub_1B4BB2204((uint64_t)v39);
          sub_1B4BB34F0(v39, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
          sub_1B4BB34F0(v39, (uint64_t)"(", 1);
          std::ostream::operator<<();
          sub_1B4BB34F0(v39, (uint64_t)") [", 3);
          sub_1B4BB34F0(v39, (uint64_t)"model_->IsSampleEncodeAvailable()", 33);
          sub_1B4BB34F0(v39, (uint64_t)"] ", 2);
          sub_1B4BB34F0(v39, (uint64_t)"SampleEncode is not available for the current model.", 52);
          sub_1B4BAFA7C((unsigned int *)&v38, (uint64_t)a6);
          sub_1B4BAFB0C((uint64_t)&v38);
          goto LABEL_5;
        }
        (*(void (**)(void **__return_ptr, float))(*(void *)a1[1] + 56))(&v38, a7);
        if (v37 >= 0) {
          uint64_t v18 = HIBYTE(v37);
        }
        else {
          uint64_t v18 = v36;
        }
      }
      sub_1B4BBF970(a1, a2, a3, v18, (uint64_t *)&__p, (uint64_t *)&v38, a5, a6);
      if (*a6)
      {
        if (v38)
        {
          v39[0] = (float *)v38;
          operator delete(v38);
        }
        goto LABEL_5;
      }
      sub_1B4BE3D8C(a6);
      if (v38)
      {
        v39[0] = (float *)v38;
        operator delete(v38);
      }
LABEL_51:
      sub_1B4BE3D84(a6);
      goto LABEL_5;
    }
    LODWORD(v38) = 13;
    uint64_t v15 = (void *)sub_1B4BB2204((uint64_t)v39);
    sub_1B4BB34F0(v15, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    sub_1B4BB34F0(v39, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_1B4BB34F0(v39, (uint64_t)") [", 3);
    sub_1B4BB34F0(v39, (uint64_t)"(nbest_size) <= (512)", 21);
    sub_1B4BB34F0(v39, (uint64_t)"] ", 2);
    sub_1B4BB34F0(v39, (uint64_t)"nbest_size must be nbest_size <= 512", 36);
    sub_1B4BAFA7C((unsigned int *)&v38, (uint64_t)a6);
  }
  else
  {
    LODWORD(v38) = 13;
    int v14 = (void *)sub_1B4BB2204((uint64_t)v39);
    sub_1B4BB34F0(v14, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    sub_1B4BB34F0(v39, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_1B4BB34F0(v39, (uint64_t)") [", 3);
    sub_1B4BB34F0(v39, (uint64_t)"spt", 3);
    sub_1B4BB34F0(v39, (uint64_t)"] ", 2);
    sub_1B4BB34F0(v39, (uint64_t)"output proto is null", 20);
    sub_1B4BAFA7C((unsigned int *)&v38, (uint64_t)a6);
  }
  v39[0] = *(float **)MEMORY[0x1E4FBA418];
  *(float **)((char *)v39 + *((void *)v39[0] - 3)) = *(float **)(MEMORY[0x1E4FBA418] + 24);
  v39[1] = (float *)(MEMORY[0x1E4FBA470] + 16);
  if (v40 < 0) {
    operator delete(v39[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1BA992920](&v41);
}

void sub_1B4BC2048(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char *a24,uint64_t a25)
{
  a24 = &a12;
  sub_1B4BB332C((void ***)&a24);
  if (__p)
  {
    a16 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(a1);
}

void sub_1B4BC2134(uint64_t a1@<X0>, char *a2@<X1>, size_t a3@<X2>, uint64_t a4@<X6>, uint64_t *a5@<X8>, float a6@<S0>)
{
  if ((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 96))(*(void *)(a1 + 8)))
  {
    uint64_t v28 = 0;
    uint64_t v29 = 0;
    uint64_t v30 = 0;
    uint64_t v25 = 0;
    int v26 = 0;
    uint64_t v27 = 0;
    (*(void (**)(void, char *, size_t, void **, void **))(**(void **)(a1 + 16) + 32))(*(void *)(a1 + 16), a2, a3, &v28, &v25);
    if (!*a5)
    {
      sub_1B4BE3D8C(a5);
      (*(void (**)(uint64_t *__return_ptr, float))(**(void **)(a1 + 8) + 64))(&v23, a6);
      uint64_t v12 = v23;
      uint64_t v13 = v24;
      if (v23 != v24)
      {
        while (1)
        {
          int v14 = *(int **)(a4 + 32);
          if (!v14) {
            break;
          }
          uint64_t v15 = *(int *)(a4 + 24);
          int v16 = *v14;
          if ((int)v15 >= *v14)
          {
            if (v16 == *(_DWORD *)(a4 + 28))
            {
LABEL_9:
              sub_1B4BF8BEC(a4 + 16, v16 + 1);
              int v14 = *(int **)(a4 + 32);
              int v16 = *v14;
            }
            *int v14 = v16 + 1;
            uint64_t v17 = sub_1B4BD6B80(*(void *)(a4 + 16));
            uint64_t v18 = *(void *)(a4 + 32);
            uint64_t v19 = *(int *)(a4 + 24);
            *(_DWORD *)(a4 + 24) = v19 + 1;
            *(void *)(v18 + 8 * v19 + 8) = v17;
            goto LABEL_11;
          }
          *(_DWORD *)(a4 + 24) = v15 + 1;
          uint64_t v17 = *(void *)&v14[2 * v15 + 2];
LABEL_11:
          int v20 = *(_DWORD *)(v12 + 24);
          *(_DWORD *)(v17 + 40) |= 2u;
          *(_DWORD *)(v17 + 8sub_1B4BC92E4(&a9, 0) = v20;
          if (v30 >= 0) {
            uint64_t v21 = HIBYTE(v30);
          }
          else {
            uint64_t v21 = v29;
          }
          sub_1B4BBF970((uint64_t *)a1, a2, a3, v21, (uint64_t *)&v25, (uint64_t *)v12, v17, a5);
          if (*a5) {
            goto LABEL_23;
          }
          sub_1B4BE3D8C(a5);
          v12 += 32;
          if (v12 == v13)
          {
            sub_1B4BE3D84(a5);
            goto LABEL_23;
          }
        }
        int v16 = *(_DWORD *)(a4 + 28);
        goto LABEL_9;
      }
      LODWORD(v31) = 13;
      sub_1B4BB2204((uint64_t)&v32);
      sub_1B4BB34F0(&v32, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      sub_1B4BB34F0(&v32, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_1B4BB34F0(&v32, (uint64_t)") [", 3);
      sub_1B4BB34F0(&v32, (uint64_t)"!results.empty()", 16);
      sub_1B4BB34F0(&v32, (uint64_t)"] ", 2);
      sub_1B4BB34F0(&v32, (uint64_t)"SampleEncodeAndScore returns empty result.", 42);
      sub_1B4BAFA7C((unsigned int *)&v31, (uint64_t)a5);
      uint64_t v32 = *MEMORY[0x1E4FBA418];
      *(uint64_t *)((char *)&v32 + *(void *)(v32 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
      uint64_t v33 = MEMORY[0x1E4FBA470] + 16;
      if (v35 < 0) {
        operator delete(__p);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x1BA992920](v36);
LABEL_23:
      uint64_t v31 = (void **)&v23;
      sub_1B4BB332C(&v31);
    }
    if (v25)
    {
      int v26 = v25;
      operator delete(v25);
    }
    if (SHIBYTE(v30) < 0) {
      operator delete(v28);
    }
  }
  else
  {
    LODWORD(v31) = 13;
    float v22 = (void *)sub_1B4BB2204((uint64_t)&v32);
    sub_1B4BB34F0(v22, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    sub_1B4BB34F0(&v32, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_1B4BB34F0(&v32, (uint64_t)") [", 3);
    sub_1B4BB34F0(&v32, (uint64_t)"model_->IsSampleEncodeAndScoreAvailable()", 41);
    sub_1B4BB34F0(&v32, (uint64_t)"] ", 2);
    sub_1B4BB34F0(&v32, (uint64_t)"SampleEncodeAndScore is not available for the current model.", 60);
    sub_1B4BAFA7C((unsigned int *)&v31, (uint64_t)a5);
    uint64_t v32 = *MEMORY[0x1E4FBA418];
    *(uint64_t *)((char *)&v32 + *(void *)(v32 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
    uint64_t v33 = MEMORY[0x1E4FBA470] + 16;
    if (v35 < 0) {
      operator delete(__p);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x1BA992920](v36);
  }
}

void sub_1B4BC26C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char *a22)
{
  a22 = &a10;
  sub_1B4BB332C((void ***)&a22);
  if (__p)
  {
    a14 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(a1);
}

void sub_1B4BC2740(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, float *a4@<X3>, uint64_t *a5@<X8>, float a6@<S0>)
{
  if ((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 104))(*(void *)(a1 + 8)))
  {
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    std::string __p = 0;
    int v16 = 0;
    uint64_t v17 = 0;
    (*(void (**)(void, uint64_t, uint64_t, void **, void **))(**(void **)(a1 + 16) + 32))(*(void *)(a1 + 16), a2, a3, &v18, &__p);
    if (!*a5)
    {
      sub_1B4BE3D8C(a5);
      if (v20 >= 0) {
        uint64_t v12 = &v18;
      }
      else {
        uint64_t v12 = v18;
      }
      if (v20 >= 0) {
        uint64_t v13 = HIBYTE(v20);
      }
      else {
        uint64_t v13 = v19;
      }
      *a4 = (*(float (**)(void, void *, uint64_t, float))(**(void **)(a1 + 8) + 72))(*(void *)(a1 + 8), v12, v13, a6);
      sub_1B4BE3D84(a5);
    }
    if (__p)
    {
      int v16 = __p;
      operator delete(__p);
    }
    if (SHIBYTE(v20) < 0) {
      operator delete(v18);
    }
  }
  else
  {
    LODWORD(v18) = 13;
    int v14 = (void *)sub_1B4BB2204((uint64_t)&v19);
    sub_1B4BB34F0(v14, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    sub_1B4BB34F0(&v19, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_1B4BB34F0(&v19, (uint64_t)") [", 3);
    sub_1B4BB34F0(&v19, (uint64_t)"model_->IsCalculateEntropyAvailable()", 37);
    sub_1B4BB34F0(&v19, (uint64_t)"] ", 2);
    sub_1B4BB34F0(&v19, (uint64_t)"CalculateEntropy is not available for the current model.", 56);
    sub_1B4BAFA7C((unsigned int *)&v18, (uint64_t)a5);
    uint64_t v19 = *MEMORY[0x1E4FBA418];
    *(uint64_t *)((char *)&v19 + *(void *)(v19 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
    uint64_t v20 = MEMORY[0x1E4FBA470] + 16;
    if (v22 < 0) {
      operator delete(v21);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x1BA992920](&v23);
  }
}

void sub_1B4BC2A18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (__p) {
    operator delete(__p);
  }
  if (a18 < 0) {
    operator delete(a13);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B4BC2A58(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  sub_1B4BBD140(a2, __p);
  (*(void (**)(uint64_t, void **, uint64_t))(*(void *)a1 + 272))(a1, __p, a3);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_1B4BC2AE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B4BC2B04(uint64_t *a1@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4 = a3;
  uint64_t v68 = a3;
  (*(void (**)(uint64_t *))(*a1 + 88))(a1);
  if (*a4) {
    return;
  }
  sub_1B4BE3D8C(a4);
  if (v4)
  {
    sub_1B4BD588C(v4);
    uint64_t v8 = a1[4];
    if (v8 && (*(unsigned int (**)(uint64_t))(*(void *)v8 + 72))(v8)) {
      uint64_t v9 = (char *)(*(uint64_t (**)(uint64_t))(*(void *)a1[4] + 24))(a1[4]);
    }
    else {
      uint64_t v9 = (char *)&unk_1B4C9965D;
    }
    uint64_t v10 = *a2;
    uint64_t v11 = a2[1];
    if (*a2 != v11)
    {
      while (1)
      {
        uint64_t v12 = *v10;
        uint64_t v13 = v10[1];
        uint64_t v14 = v68;
        uint64_t v15 = *(int **)(v68 + 64);
        if (!v15) {
          break;
        }
        uint64_t v16 = *(int *)(v68 + 56);
        int v17 = *v15;
        if ((int)v16 >= *v15)
        {
          if (v17 == *(_DWORD *)(v68 + 60))
          {
LABEL_14:
            sub_1B4BF8BEC(v68 + 48, v17 + 1);
            uint64_t v15 = *(int **)(v68 + 64);
            int v17 = *v15;
          }
          *uint64_t v15 = v17 + 1;
          uint64_t v18 = sub_1B4BD6AB0(*(void *)(v14 + 48));
          uint64_t v19 = *(void *)(v14 + 64);
          uint64_t v20 = *(int *)(v14 + 56);
          *(_DWORD *)(v14 + 56) = v20 + 1;
          *(void *)(v19 + 8 * v20 + 8) = v18;
          goto LABEL_16;
        }
        *(_DWORD *)(v68 + 56) = v16 + 1;
        uint64_t v18 = *(void *)&v15[2 * v16 + 2];
LABEL_16:
        *(_DWORD *)(v18 + 40) |= 1u;
        uint64_t v21 = *(void *)(v18 + 8);
        char v22 = (void *)(v21 & 0xFFFFFFFFFFFFFFFELL);
        if (v21) {
          char v22 = (void *)*v22;
        }
        uint64_t v23 = sub_1B4BE4FF0((uint64_t *)(v18 + 48), (uint64_t)v22);
        MEMORY[0x1BA992600](v23, v12, v13);
        int v24 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*a1 + 504))(a1, v12, v13);
        *(_DWORD *)(v18 + 40) |= 4u;
        *(_DWORD *)(v18 + 64) = v24;
        v10 += 2;
        if (v10 == v11)
        {
          uint64_t v4 = v68;
          goto LABEL_20;
        }
      }
      int v17 = *(_DWORD *)(v68 + 60);
      goto LABEL_14;
    }
LABEL_20:
    sub_1B4BC07E4(a1, (uint64_t)(a1 + 8), v4, a4);
    if (*a4) {
      return;
    }
    sub_1B4BE3D8C(a4);
    uint64_t v61 = 0;
    *(_DWORD *)(v4 + 40) |= 1u;
    uint64_t v25 = *(void *)(v4 + 8);
    int v26 = (void *)(v25 & 0xFFFFFFFFFFFFFFFELL);
    if (v25) {
      int v26 = (void *)*v26;
    }
    v60[1] = &v61;
    uint64_t v61 = sub_1B4BE4FF0((uint64_t *)(v4 + 72), (uint64_t)v26);
    uint64_t v58 = 0;
    v59[0] = &v68;
    v59[1] = v60;
    v60[0] = &v68;
    __p[0] = 0;
    __p[1] = 0;
    int v27 = *(_DWORD *)(v4 + 56);
    if (v27 >= 1)
    {
      BOOL v28 = 0;
      int v29 = 0;
      int v30 = 0;
      char v31 = 1;
      while (1)
      {
        uint64_t v32 = sub_1B4BC824C(v4 + 48, v30);
        if (!(*(unsigned int (**)(uint64_t *, void))(*a1 + 552))(a1, *(unsigned int *)(v32 + 64))) {
          break;
        }
        ++v30;
LABEL_68:
        uint64_t v4 = v68;
        int v27 = *(_DWORD *)(v68 + 56);
        if (v30 >= v27) {
          goto LABEL_89;
        }
      }
      sub_1B4BC34A4((uint64_t)v59, v29, v30, a4);
      if (*a4) {
        goto LABEL_95;
      }
      sub_1B4BE3D8C(a4);
      if (!v28)
      {
        if (*((char *)v61 + 23) < 0)
        {
          if (!v61[1])
          {
LABEL_32:
            unint64_t v33 = *(void *)(v32 + 48) & 0xFFFFFFFFFFFFFFFELL;
            if (*(char *)(v33 + 23) < 0)
            {
              char v35 = *(unsigned __int8 **)v33;
              size_t v34 = *(void *)(v33 + 8);
            }
            else
            {
              size_t v34 = *(unsigned __int8 *)(v33 + 23);
              char v35 = (unsigned __int8 *)(*(void *)(v32 + 48) & 0xFFFFFFFFFFFFFFFELL);
            }
            uint64_t v36 = *(unsigned int *)(v32 + 64);
            if ((*(unsigned int (**)(uint64_t *, uint64_t))(*a1 + 536))(a1, v36))
            {
              sub_1B4BB8DC0(&v62, "");
LABEL_58:
              BOOL v64 = 0;
LABEL_59:
              if (SHIBYTE(v58) < 0) {
                operator delete(__p[0]);
              }
              uint64_t v58 = v63;
              *(_OWORD *)std::string __p = v62;
              BOOL v28 = v64;
              if (v63 >= 0) {
                uint64_t v46 = __p;
              }
              else {
                uint64_t v46 = (void **)v62;
              }
              if (v63 >= 0) {
                size_t v47 = HIBYTE(v63);
              }
              else {
                size_t v47 = *((void *)&v62 + 1);
              }
              sub_1B4BC3A3C(v60, v30++, v46, v47);
              int v29 = v30;
              goto LABEL_68;
            }
            if (!(*(unsigned int (**)(uint64_t *, uint64_t))(*a1 + 528))(a1, v36))
            {
              if ((v31 & 1) != 0
                && ((uint64_t v40 = a1[4]) == 0
                 || (uint64_t v41 = (*(uint64_t (**)(uint64_t))(*(void *)v40 + 152))(v40),
                     ((*(uint64_t (**)(uint64_t))(*(void *)v41 + 16))(v41) & 1) != 0)
                 || (uint64_t v42 = (*(uint64_t (**)(uint64_t))(*(void *)a1[4] + 152))(a1[4]),
                     (*(unsigned int (**)(uint64_t))(*(void *)v42 + 24))(v42))))
              {
                if (v34 >= 3)
                {
                  BOOL v49 = *(unsigned __int16 *)v35 != 38626 || v35[2] != 129;
                  if (!v49)
                  {
                    v35 += 3;
                    v34 -= 3;
                  }
                  BOOL v43 = !v49;
                }
                else
                {
                  BOOL v43 = 0;
                }
                uint64_t v50 = a1[4];
                if (v50)
                {
                  uint64_t v51 = (*(uint64_t (**)(uint64_t))(*(void *)v50 + 152))(v50);
                  if ((*(unsigned int (**)(uint64_t))(*(void *)v51 + 24))(v51)) {
                    BOOL v43 = 0;
                  }
                }
              }
              else
              {
                BOOL v43 = 0;
              }
              uint64_t v52 = operator new(0x20uLL);
              int v70 = v52 + 4;
              uint64_t v71 = v52 + 4;
              *uint64_t v52 = &unk_1B4C996F2;
              v52[1] = 3;
              v52[2] = " ";
              v52[3] = 1;
              std::string::size_type v69 = v52;
              sub_1B4BC8AC0(v35, v34, (uint64_t *)&v69, (uint64_t)&__dst);
              long long v62 = __dst;
              uint64_t v63 = v73;
              unint64_t v73 = 0;
              long long __dst = 0uLL;
              BOOL v64 = v43;
              if (v69)
              {
                int v70 = v69;
                operator delete(v69);
              }
              goto LABEL_59;
            }
            uint64_t v37 = (const void *)(*(uint64_t (**)(uint64_t *, uint64_t))(*a1 + 512))(a1, v36);
            if (v38 == v34 && !memcmp(v37, v35, v34))
            {
              sub_1B4BB8DC0(&v62, v9);
              goto LABEL_58;
            }
            if (v34 >= 0x7FFFFFFFFFFFFFF8) {
              sub_1B4BB33D8();
            }
            if (v34 >= 0x17)
            {
              uint64_t v44 = (v34 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v34 | 7) != 0x17) {
                uint64_t v44 = v34 | 7;
              }
              uint64_t v45 = v44 + 1;
              p_dst = (long long *)operator new(v44 + 1);
              *((void *)&__dst + 1) = v34;
              unint64_t v73 = v45 | 0x8000000000000000;
              *(void *)&long long __dst = p_dst;
            }
            else
            {
              HIBYTE(v73) = v34;
              p_dst = &__dst;
              if (!v34) {
                goto LABEL_57;
              }
            }
            memmove(p_dst, v35, v34);
LABEL_57:
            *((unsigned char *)p_dst + v34) = 0;
            long long v62 = __dst;
            uint64_t v63 = v73;
            goto LABEL_58;
          }
        }
        else if (!*((unsigned char *)v61 + 23))
        {
          goto LABEL_32;
        }
      }
      char v31 = 0;
      goto LABEL_32;
    }
    int v29 = 0;
LABEL_89:
    sub_1B4BC34A4((uint64_t)v59, v29, v27, a4);
    if (!*a4)
    {
      sub_1B4BE3D8C(a4);
      uint64_t v54 = a1[3];
      if (v54)
      {
        (*(void (**)(long long *__return_ptr))(*(void *)v54 + 40))(&v62);
        int v55 = v61;
        if (*((char *)v61 + 23) < 0) {
          operator delete((void *)*v61);
        }
        long long v56 = v62;
        v55[2] = v63;
        *(_OWORD *)int v55 = v56;
      }
      sub_1B4BE3D84(a4);
    }
LABEL_95:
    if (SHIBYTE(v58) < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    LODWORD(v62) = 13;
    size_t v53 = (void *)sub_1B4BB2204((uint64_t)&v62 + 8);
    sub_1B4BB34F0(v53, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    sub_1B4BB34F0((void *)&v62 + 1, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_1B4BB34F0((void *)&v62 + 1, (uint64_t)") [", 3);
    sub_1B4BB34F0((void *)&v62 + 1, (uint64_t)"spt", 3);
    sub_1B4BB34F0((void *)&v62 + 1, (uint64_t)"] ", 2);
    sub_1B4BB34F0((void *)&v62 + 1, (uint64_t)"output proto is null", 20);
    sub_1B4BAFA7C((unsigned int *)&v62, (uint64_t)a4);
    *((void *)&v62 + 1) = *MEMORY[0x1E4FBA418];
    *(void *)((char *)&v62 + *(void *)(*((void *)&v62 + 1) - 24) + 8) = *(void *)(MEMORY[0x1E4FBA418] + 24);
    uint64_t v63 = MEMORY[0x1E4FBA470] + 16;
    if (v66 < 0) {
      operator delete(v65);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x1BA992920](&v67);
  }
}

void sub_1B4BC344C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B4BC34A4(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, void *a4@<X8>)
{
  if (a2 >= a3)
  {
    sub_1B4BE3D84(a4);
  }
  else
  {
    memset(&v37, 0, sizeof(v37));
    int v8 = a2;
    do
    {
      uint64_t v9 = sub_1B4BC824C(**(void **)a1 + 48, v8);
      unint64_t v10 = *(void *)(v9 + 48) & 0xFFFFFFFFFFFFFFFELL;
      if (*(char *)(v10 + 23) < 0)
      {
        uint64_t v12 = *(void **)v10;
        size_t v11 = *(void *)(v10 + 8);
      }
      else
      {
        size_t v11 = *(unsigned __int8 *)(v10 + 23);
        uint64_t v12 = (void *)(*(void *)(v9 + 48) & 0xFFFFFFFFFFFFFFFELL);
      }
      int v13 = sub_1B4BB0A90(v12, v11);
      if (v13 < 0)
      {
        unsigned int v33 = 13;
        sub_1B4BB2204((uint64_t)v34);
        sub_1B4BB34F0(v34, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        sub_1B4BB34F0(v34, (uint64_t)"(", 1);
        std::ostream::operator<<();
        sub_1B4BB34F0(v34, (uint64_t)") [", 3);
        sub_1B4BB34F0(v34, (uint64_t)"(0) <= (byte)", 13);
        sub_1B4BB34F0(v34, (uint64_t)"] ", 2);
        sub_1B4BAFA7C(&v33, (uint64_t)a4);
        goto LABEL_52;
      }
      std::string::append(&v37, 1uLL, v13);
      ++v8;
    }
    while (a3 != v8);
    char v31 = a4;
    if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v14 = HIBYTE(v37.__r_.__value_.__r.__words[2]);
    }
    else {
      int v14 = v37.__r_.__value_.__r.__words[1];
    }
    if (v14 >= 1)
    {
      int v15 = 0;
      while (1)
      {
        unint64_t v32 = 0;
        std::string::size_type size = HIBYTE(v37.__r_.__value_.__r.__words[2]);
        if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type size = v37.__r_.__value_.__l.__size_;
        }
        if (size < v15) {
          sub_1B4BC8D14("string_view::substr");
        }
        unint64_t v17 = v15;
        uint64_t v18 = (std::string *)v37.__r_.__value_.__r.__words[0];
        if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v18 = &v37;
        }
        if (sub_1B4BE1C50((unsigned __int8 *)v18 + v17, (uint64_t)v18 + size, (uint64_t *)&v32) != 65533) {
          break;
        }
        int v19 = v17 + a2;
        if (v32 != 1)
        {
          if (v32 != 3)
          {
            unsigned int v33 = 13;
            sub_1B4BB2204((uint64_t)v34);
            sub_1B4BB34F0(v34, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
            sub_1B4BB34F0(v34, (uint64_t)"(", 1);
            std::ostream::operator<<();
            sub_1B4BB34F0(v34, (uint64_t)") [", 3);
            sub_1B4BB34F0(v34, (uint64_t)"(consumed) == (1)", 17);
            sub_1B4BB34F0(v34, (uint64_t)"] ", 2);
            sub_1B4BAFA7C(&v33, (uint64_t)v31);
            goto LABEL_52;
          }
          goto LABEL_23;
        }
        sub_1B4BC3A3C(*(void ***)(a1 + 8), v19, &unk_1B4C996EE, 3uLL);
        LODWORD(v22) = v32;
LABEL_42:
        int v15 = v17 + v22;
        if (v15 >= v14) {
          goto LABEL_49;
        }
      }
      int v19 = v17 + a2;
LABEL_23:
      std::string::size_type v20 = HIBYTE(v37.__r_.__value_.__r.__words[2]);
      if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v20 = v37.__r_.__value_.__l.__size_;
      }
      unint64_t v21 = v20 - v17;
      if (v20 < v17) {
        sub_1B4BC8D14("string_view::substr");
      }
      unint64_t v22 = v32;
      uint64_t v23 = &v37;
      if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        uint64_t v23 = (std::string *)v37.__r_.__value_.__r.__words[0];
      }
      if (v21 >= v32) {
        unint64_t v24 = v32;
      }
      else {
        unint64_t v24 = v21;
      }
      if (v32)
      {
        unint64_t v25 = 0;
        int v26 = (char *)v23 + v17;
        int v27 = v19;
        do
        {
          unint64_t v28 = v22 - 1;
          if (v25 == v28) {
            int v29 = v26;
          }
          else {
            int v29 = "";
          }
          if (v25 == v28) {
            size_t v30 = v24;
          }
          else {
            size_t v30 = 0;
          }
          sub_1B4BC3A3C(*(void ***)(a1 + 8), v27 + v25++, v29, v30);
          unint64_t v22 = v32;
        }
        while (v32 > v25);
      }
      goto LABEL_42;
    }
    int v15 = 0;
LABEL_49:
    if (v15 + a2 == a3)
    {
      sub_1B4BE3D84(v31);
      goto LABEL_55;
    }
    unsigned int v33 = 13;
    sub_1B4BB2204((uint64_t)v34);
    sub_1B4BB34F0(v34, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    sub_1B4BB34F0(v34, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_1B4BB34F0(v34, (uint64_t)") [", 3);
    sub_1B4BB34F0(v34, (uint64_t)"(token_index_begin + offset) == (token_index_end)", 49);
    sub_1B4BB34F0(v34, (uint64_t)"] ", 2);
    sub_1B4BAFA7C(&v33, (uint64_t)v31);
LABEL_52:
    v34[0] = *MEMORY[0x1E4FBA418];
    *(void *)((char *)v34 + *(void *)(v34[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
    v34[1] = MEMORY[0x1E4FBA470] + 16;
    if (v35 < 0) {
      operator delete((void *)v34[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x1BA992920](&v36);
LABEL_55:
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v37.__r_.__value_.__l.__data_);
    }
  }
}

void sub_1B4BC39D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (*(char *)(v11 - 89) < 0) {
    operator delete(*(void **)(v11 - 112));
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_1B4BC3A3C(void **a1, int a2, const void *a3, size_t a4)
{
  uint64_t v7 = sub_1B4BC8FAC(**a1 + 48, a2);
  if (a4 >= 0x7FFFFFFFFFFFFFF8) {
    sub_1B4BB33D8();
  }
  uint64_t v8 = v7;
  if (a4 >= 0x17)
  {
    uint64_t v10 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a4 | 7) != 0x17) {
      uint64_t v10 = a4 | 7;
    }
    uint64_t v11 = v10 + 1;
    p_dst = (long long *)operator new(v10 + 1);
    *((void *)&__dst + 1) = a4;
    unint64_t v20 = v11 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v2sub_1B4BC92E4(&a9, 0) = a4;
  p_dst = &__dst;
  if (a4) {
LABEL_8:
  }
    memmove(p_dst, a3, a4);
  *((unsigned char *)p_dst + a4) = 0;
  *(_DWORD *)(v8 + 40) |= 2u;
  uint64_t v12 = *(void *)(v8 + 8);
  int v13 = (void *)(v12 & 0xFFFFFFFFFFFFFFFELL);
  if (v12) {
    int v13 = (void *)*v13;
  }
  sub_1B4BE4FCC((uint64_t *)(v8 + 56), &__dst, (uint64_t)v13);
  if (SHIBYTE(v20) < 0) {
    operator delete((void *)__dst);
  }
  uint64_t v14 = *a1[1];
  if (*(char *)(v14 + 23) < 0) {
    uint64_t v15 = *(void *)(v14 + 8);
  }
  else {
    LODWORD(v15) = *(unsigned __int8 *)(v14 + 23);
  }
  int v16 = *(_DWORD *)(v8 + 40);
  *(_DWORD *)(v8 + 4sub_1B4BC92E4(&a9, 0) = v16 | 8;
  *(_DWORD *)(v8 + 68) = v15;
  if (*(char *)(v14 + 23) < 0) {
    uint64_t v17 = *(void *)(v14 + 8);
  }
  else {
    LODWORD(v17) = *(unsigned __int8 *)(v14 + 23);
  }
  *(_DWORD *)(v8 + 4sub_1B4BC92E4(&a9, 0) = v16 | 0x18;
  *(_DWORD *)(v8 + 72) = v17 + a4;
  return std::string::append((std::string *)v14, (const std::string::value_type *)a3, a4);
}

void sub_1B4BC3B98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B4BC3BB4(uint64_t a1@<X0>, int **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v19 = 0;
  unint64_t v20 = 0;
  unint64_t v21 = 0;
  int v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 496))(a1);
  sub_1B4BBF2D0(&v19, a2[1] - *a2);
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  if (*a2 == v10)
  {
LABEL_8:
    (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a1 + 264))(a1, &v19, a3);
  }
  else
  {
    while (1)
    {
      int v11 = *v9;
      int v18 = v11;
      if (v11 < 0 || v11 >= v8) {
        break;
      }
      __p.__r_.__value_.__r.__words[0] = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 512))(a1);
      __p.__r_.__value_.__l.__size_ = v12;
      int v13 = v20;
      if ((unint64_t)v20 >= v21)
      {
        uint64_t v14 = (unsigned char *)sub_1B4BCB960(&v19, (uint64_t)&__p);
      }
      else
      {
        sub_1B4BCBA70((int)&v21, v20, (uint64_t)&__p);
        uint64_t v14 = v13 + 24;
      }
      unint64_t v20 = v14;
      if (++v9 == v10) {
        goto LABEL_8;
      }
    }
    sub_1B4BC3DD0("Invalid id: ", 0xCuLL, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    sub_1B4BE3EF0(a4, 11, p_p, size);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v19;
  sub_1B4BC89A4((void ***)&__p);
}

void sub_1B4BC3D88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17, uint64_t a18)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::string __p = &a17;
  sub_1B4BC89A4((void ***)&__p);
  _Unwind_Resume(a1);
}

void sub_1B4BC3DD0(void *__src@<X0>, size_t __len@<X1>, std::string *a3@<X8>)
{
  sub_1B4BB8D14(&__dst, __src, __len);
  sub_1B4BCB818();
  if ((v8 & 0x80u) == 0) {
    uint64_t v4 = __p;
  }
  else {
    uint64_t v4 = (void **)__p[0];
  }
  if ((v8 & 0x80u) == 0) {
    std::string::size_type v5 = v8;
  }
  else {
    std::string::size_type v5 = (std::string::size_type)__p[1];
  }
  uint64_t v6 = std::string::append(&__dst, (const std::string::value_type *)v4, v5);
  *a3 = *v6;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  if ((char)v8 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
}

void sub_1B4BC3E74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1B4BC3EA8(void **a1)
{
  ((void (*)(uint64_t *__return_ptr))(*a1)[11])(&v14);
  uint64_t v2 = v14;
  sub_1B4BE3D8C(&v14);
  if (!v2) {
    return (*(uint64_t (**)(void *))(*a1[1] + 128))(a1[1]);
  }
  if ((int)sub_1B4BE1C40() <= 2)
  {
    char v13 = 0;
    uint64_t v3 = sub_1B4BB34F0(MEMORY[0x1E4FBA240], (uint64_t)"sentencepiece_processor.cc", 26);
    sub_1B4BB34F0(v3, (uint64_t)"(", 1);
    uint64_t v4 = (void *)std::ostream::operator<<();
    std::string::size_type v5 = sub_1B4BB34F0(v4, (uint64_t)") ", 2);
    uint64_t v6 = sub_1B4BB34F0(v5, (uint64_t)"LOG(", 4);
    uint64_t v7 = sub_1B4BB34F0(v6, (uint64_t)"ERROR", 5);
    unsigned __int8 v8 = sub_1B4BB34F0(v7, (uint64_t)") ", 2);
    ((void (*)(uint64_t *__return_ptr, void **))(*a1)[11])(&v14, a1);
    uint64_t v9 = sub_1B4BE4094(&v14);
    size_t v10 = strlen(v9);
    int v11 = sub_1B4BB34F0(v8, (uint64_t)v9, v10);
    sub_1B4BB34F0(v11, (uint64_t)"\nReturns default value ", 23);
    std::ostream::operator<<();
    sub_1B4BE3D8C(&v14);
    sub_1B4BB239C(&v13);
  }
  return 0;
}

void sub_1B4BC4030(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
}

uint64_t sub_1B4BC4058(void **a1, uint64_t a2, uint64_t a3)
{
  ((void (*)(uint64_t *__return_ptr))(*a1)[11])(&v18);
  uint64_t v6 = v18;
  sub_1B4BE3D8C(&v18);
  if (!v6) {
    return (*(uint64_t (**)(void *, uint64_t, uint64_t))(*a1[1] + 112))(a1[1], a2, a3);
  }
  if ((int)sub_1B4BE1C40() <= 2)
  {
    char v17 = 0;
    uint64_t v7 = sub_1B4BB34F0(MEMORY[0x1E4FBA240], (uint64_t)"sentencepiece_processor.cc", 26);
    sub_1B4BB34F0(v7, (uint64_t)"(", 1);
    unsigned __int8 v8 = (void *)std::ostream::operator<<();
    uint64_t v9 = sub_1B4BB34F0(v8, (uint64_t)") ", 2);
    size_t v10 = sub_1B4BB34F0(v9, (uint64_t)"LOG(", 4);
    int v11 = sub_1B4BB34F0(v10, (uint64_t)"ERROR", 5);
    std::string::size_type v12 = sub_1B4BB34F0(v11, (uint64_t)") ", 2);
    ((void (*)(uint64_t *__return_ptr, void **))(*a1)[11])(&v18, a1);
    char v13 = sub_1B4BE4094(&v18);
    size_t v14 = strlen(v13);
    uint64_t v15 = sub_1B4BB34F0(v12, (uint64_t)v13, v14);
    sub_1B4BB34F0(v15, (uint64_t)"\nReturns default value ", 23);
    std::ostream::operator<<();
    sub_1B4BE3D8C(&v18);
    sub_1B4BB239C(&v17);
  }
  return 0;
}

void sub_1B4BC41F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
}

const char *sub_1B4BC4220(void **a1, uint64_t a2)
{
  ((void (*)(uint64_t *__return_ptr))(*a1)[11])(&v17);
  uint64_t v4 = v17;
  sub_1B4BE3D8C(&v17);
  if (!v4) {
    return (const char *)(*(uint64_t (**)(void *, uint64_t))(*a1[1] + 120))(a1[1], a2);
  }
  if ((int)sub_1B4BE1C40() <= 2)
  {
    char v16 = 0;
    std::string::size_type v5 = sub_1B4BB34F0(MEMORY[0x1E4FBA240], (uint64_t)"sentencepiece_processor.cc", 26);
    sub_1B4BB34F0(v5, (uint64_t)"(", 1);
    uint64_t v6 = (void *)std::ostream::operator<<();
    uint64_t v7 = sub_1B4BB34F0(v6, (uint64_t)") ", 2);
    unsigned __int8 v8 = sub_1B4BB34F0(v7, (uint64_t)"LOG(", 4);
    uint64_t v9 = sub_1B4BB34F0(v8, (uint64_t)"ERROR", 5);
    size_t v10 = sub_1B4BB34F0(v9, (uint64_t)") ", 2);
    ((void (*)(uint64_t *__return_ptr, void **))(*a1)[11])(&v17, a1);
    int v11 = sub_1B4BE4094(&v17);
    size_t v12 = strlen(v11);
    char v13 = sub_1B4BB34F0(v10, (uint64_t)v11, v12);
    size_t v14 = sub_1B4BB34F0(v13, (uint64_t)"\nReturns default value ", 23);
    sub_1B4BB34F0(v14, (uint64_t)"", 0);
    sub_1B4BE3D8C(&v17);
    sub_1B4BB239C(&v16);
  }
  return "";
}

void sub_1B4BC43C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
}

float sub_1B4BC43F0(void **a1, uint64_t a2)
{
  ((void (*)(uint64_t *__return_ptr))(*a1)[11])(&v17);
  uint64_t v4 = v17;
  sub_1B4BE3D8C(&v17);
  if (!v4) {
    return (*(float (**)(void *, uint64_t))(*a1[1] + 136))(a1[1], a2);
  }
  float v5 = 0.0;
  if ((int)sub_1B4BE1C40() <= 2)
  {
    char v16 = 0;
    uint64_t v6 = sub_1B4BB34F0(MEMORY[0x1E4FBA240], (uint64_t)"sentencepiece_processor.cc", 26);
    sub_1B4BB34F0(v6, (uint64_t)"(", 1);
    uint64_t v7 = (void *)std::ostream::operator<<();
    unsigned __int8 v8 = sub_1B4BB34F0(v7, (uint64_t)") ", 2);
    uint64_t v9 = sub_1B4BB34F0(v8, (uint64_t)"LOG(", 4);
    size_t v10 = sub_1B4BB34F0(v9, (uint64_t)"ERROR", 5);
    int v11 = sub_1B4BB34F0(v10, (uint64_t)") ", 2);
    ((void (*)(uint64_t *__return_ptr, void **))(*a1)[11])(&v17, a1);
    size_t v12 = sub_1B4BE4094(&v17);
    size_t v13 = strlen(v12);
    size_t v14 = sub_1B4BB34F0(v11, (uint64_t)v12, v13);
    sub_1B4BB34F0(v14, (uint64_t)"\nReturns default value ", 23);
    std::ostream::operator<<();
    sub_1B4BE3D8C(&v17);
    sub_1B4BB239C(&v16);
  }
  return v5;
}

void sub_1B4BC4598(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
}

uint64_t sub_1B4BC45C0(void **a1, uint64_t a2)
{
  ((void (*)(uint64_t *__return_ptr))(*a1)[11])(&v16);
  uint64_t v4 = v16;
  sub_1B4BE3D8C(&v16);
  if (!v4) {
    return (*(uint64_t (**)(void *, uint64_t))(*a1[1] + 152))(a1[1], a2);
  }
  if ((int)sub_1B4BE1C40() <= 2)
  {
    char v15 = 0;
    float v5 = sub_1B4BB34F0(MEMORY[0x1E4FBA240], (uint64_t)"sentencepiece_processor.cc", 26);
    sub_1B4BB34F0(v5, (uint64_t)"(", 1);
    uint64_t v6 = (void *)std::ostream::operator<<();
    uint64_t v7 = sub_1B4BB34F0(v6, (uint64_t)") ", 2);
    unsigned __int8 v8 = sub_1B4BB34F0(v7, (uint64_t)"LOG(", 4);
    uint64_t v9 = sub_1B4BB34F0(v8, (uint64_t)"ERROR", 5);
    size_t v10 = sub_1B4BB34F0(v9, (uint64_t)") ", 2);
    ((void (*)(uint64_t *__return_ptr, void **))(*a1)[11])(&v16, a1);
    int v11 = sub_1B4BE4094(&v16);
    size_t v12 = strlen(v11);
    size_t v13 = sub_1B4BB34F0(v10, (uint64_t)v11, v12);
    sub_1B4BB34F0(v13, (uint64_t)"\nReturns default value ", 23);
    std::ostream::operator<<();
    sub_1B4BE3D8C(&v16);
    sub_1B4BB239C(&v15);
  }
  return 0;
}

void sub_1B4BC4758(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
}

uint64_t sub_1B4BC4780(void **a1, uint64_t a2)
{
  ((void (*)(uint64_t *__return_ptr))(*a1)[11])(&v16);
  uint64_t v4 = v16;
  sub_1B4BE3D8C(&v16);
  if (!v4) {
    return (*(uint64_t (**)(void *, uint64_t))(*a1[1] + 144))(a1[1], a2);
  }
  if ((int)sub_1B4BE1C40() <= 2)
  {
    char v15 = 0;
    float v5 = sub_1B4BB34F0(MEMORY[0x1E4FBA240], (uint64_t)"sentencepiece_processor.cc", 26);
    sub_1B4BB34F0(v5, (uint64_t)"(", 1);
    uint64_t v6 = (void *)std::ostream::operator<<();
    uint64_t v7 = sub_1B4BB34F0(v6, (uint64_t)") ", 2);
    unsigned __int8 v8 = sub_1B4BB34F0(v7, (uint64_t)"LOG(", 4);
    uint64_t v9 = sub_1B4BB34F0(v8, (uint64_t)"ERROR", 5);
    size_t v10 = sub_1B4BB34F0(v9, (uint64_t)") ", 2);
    ((void (*)(uint64_t *__return_ptr, void **))(*a1)[11])(&v16, a1);
    int v11 = sub_1B4BE4094(&v16);
    size_t v12 = strlen(v11);
    size_t v13 = sub_1B4BB34F0(v10, (uint64_t)v11, v12);
    sub_1B4BB34F0(v13, (uint64_t)"\nReturns default value ", 23);
    std::ostream::operator<<();
    sub_1B4BE3D8C(&v16);
    sub_1B4BB239C(&v15);
  }
  return 0;
}

void sub_1B4BC4918(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
}

uint64_t sub_1B4BC4940(void **a1, uint64_t a2)
{
  ((void (*)(uint64_t *__return_ptr))(*a1)[11])(&v16);
  uint64_t v4 = v16;
  sub_1B4BE3D8C(&v16);
  if (!v4) {
    return (*(uint64_t (**)(void *, uint64_t))(*a1[1] + 160))(a1[1], a2);
  }
  if ((int)sub_1B4BE1C40() <= 2)
  {
    char v15 = 0;
    float v5 = sub_1B4BB34F0(MEMORY[0x1E4FBA240], (uint64_t)"sentencepiece_processor.cc", 26);
    sub_1B4BB34F0(v5, (uint64_t)"(", 1);
    uint64_t v6 = (void *)std::ostream::operator<<();
    uint64_t v7 = sub_1B4BB34F0(v6, (uint64_t)") ", 2);
    unsigned __int8 v8 = sub_1B4BB34F0(v7, (uint64_t)"LOG(", 4);
    uint64_t v9 = sub_1B4BB34F0(v8, (uint64_t)"ERROR", 5);
    size_t v10 = sub_1B4BB34F0(v9, (uint64_t)") ", 2);
    ((void (*)(uint64_t *__return_ptr, void **))(*a1)[11])(&v16, a1);
    int v11 = sub_1B4BE4094(&v16);
    size_t v12 = strlen(v11);
    size_t v13 = sub_1B4BB34F0(v10, (uint64_t)v11, v12);
    sub_1B4BB34F0(v13, (uint64_t)"\nReturns default value ", 23);
    std::ostream::operator<<();
    sub_1B4BE3D8C(&v16);
    sub_1B4BB239C(&v15);
  }
  return 0;
}

void sub_1B4BC4AD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
}

uint64_t sub_1B4BC4B00(void **a1, uint64_t a2)
{
  ((void (*)(uint64_t *__return_ptr))(*a1)[11])(&v16);
  uint64_t v4 = v16;
  sub_1B4BE3D8C(&v16);
  if (!v4) {
    return (*(uint64_t (**)(void *, uint64_t))(*a1[1] + 176))(a1[1], a2);
  }
  if ((int)sub_1B4BE1C40() <= 2)
  {
    char v15 = 0;
    float v5 = sub_1B4BB34F0(MEMORY[0x1E4FBA240], (uint64_t)"sentencepiece_processor.cc", 26);
    sub_1B4BB34F0(v5, (uint64_t)"(", 1);
    uint64_t v6 = (void *)std::ostream::operator<<();
    uint64_t v7 = sub_1B4BB34F0(v6, (uint64_t)") ", 2);
    unsigned __int8 v8 = sub_1B4BB34F0(v7, (uint64_t)"LOG(", 4);
    uint64_t v9 = sub_1B4BB34F0(v8, (uint64_t)"ERROR", 5);
    size_t v10 = sub_1B4BB34F0(v9, (uint64_t)") ", 2);
    ((void (*)(uint64_t *__return_ptr, void **))(*a1)[11])(&v16, a1);
    int v11 = sub_1B4BE4094(&v16);
    size_t v12 = strlen(v11);
    size_t v13 = sub_1B4BB34F0(v10, (uint64_t)v11, v12);
    sub_1B4BB34F0(v13, (uint64_t)"\nReturns default value ", 23);
    std::ostream::operator<<();
    sub_1B4BE3D8C(&v16);
    sub_1B4BB239C(&v15);
  }
  return 0;
}

void sub_1B4BC4C98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
}

uint64_t sub_1B4BC4CC0(uint64_t *a1)
{
  uint64_t v2 = sub_1B4BAFDF4(a1[1]);
  size_t v3 = strlen(v2);
  uint64_t v4 = (*(uint64_t (**)(uint64_t *, const char *, size_t))(*a1 + 504))(a1, v2, v3);
  if ((*(unsigned int (**)(uint64_t *, uint64_t))(*a1 + 528))(a1, v4)) {
    return v4;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t sub_1B4BC4D80(uint64_t *a1)
{
  uint64_t v2 = sub_1B4BAFE78(a1[1]);
  size_t v3 = strlen(v2);
  uint64_t v4 = (*(uint64_t (**)(uint64_t *, const char *, size_t))(*a1 + 504))(a1, v2, v3);
  if ((*(unsigned int (**)(uint64_t *, uint64_t))(*a1 + 536))(a1, v4)) {
    return v4;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t sub_1B4BC4E40(uint64_t *a1)
{
  uint64_t v2 = sub_1B4BAFEFC(a1[1]);
  size_t v3 = strlen(v2);
  uint64_t v4 = (*(uint64_t (**)(uint64_t *, const char *, size_t))(*a1 + 504))(a1, v2, v3);
  if ((*(unsigned int (**)(uint64_t *, uint64_t))(*a1 + 536))(a1, v4)) {
    return v4;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t sub_1B4BC4F00(uint64_t *a1)
{
  uint64_t v2 = sub_1B4BAFF80(a1[1]);
  size_t v3 = strlen(v2);
  uint64_t v4 = (*(uint64_t (**)(uint64_t *, const char *, size_t))(*a1 + 504))(a1, v2, v3);
  if ((*(unsigned int (**)(uint64_t *, uint64_t))(*a1 + 536))(a1, v4)) {
    return v4;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t sub_1B4BC4FC0@<X0>(void **a1@<X0>, uint64_t *a2@<X3>, uint64_t *a3@<X8>)
{
  uint64_t result = ((uint64_t (*)(void **))(*a1)[11])(a1);
  if (!*a3)
  {
    sub_1B4BE3D8C(a3);
    if (a2)
    {
      sub_1B4BC89F8(a2);
      uint64_t v7 = *(uint64_t (**)(void))(*a1[1] + 200);
      return v7();
    }
    else
    {
      unsigned int v9 = 13;
      unsigned __int8 v8 = (void *)sub_1B4BB2204((uint64_t)v10);
      sub_1B4BB34F0(v8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      sub_1B4BB34F0(v10, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_1B4BB34F0(v10, (uint64_t)") [", 3);
      sub_1B4BB34F0(v10, (uint64_t)"pieces", 6);
      sub_1B4BB34F0(v10, (uint64_t)"] ", 2);
      sub_1B4BB34F0(v10, (uint64_t)"output container is null", 24);
      sub_1B4BAFA7C(&v9, (uint64_t)a3);
      v10[0] = *MEMORY[0x1E4FBA418];
      *(void *)((char *)v10 + *(void *)(v10[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
      v10[1] = MEMORY[0x1E4FBA470] + 16;
      if (v11 < 0) {
        operator delete((void *)v10[9]);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      return MEMORY[0x1BA992920](&v12);
    }
  }
  return result;
}

void sub_1B4BC5240(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1B4BC5258@<X0>(void **a1@<X0>, void *a2@<X3>, uint64_t *a3@<X8>)
{
  uint64_t result = ((uint64_t (*)(void **))(*a1)[11])(a1);
  if (!*a3)
  {
    sub_1B4BE3D8C(a3);
    if (a2)
    {
      a2[1] = *a2;
      uint64_t v7 = *(uint64_t (**)(void))(*a1[1] + 208);
      return v7();
    }
    else
    {
      unsigned int v9 = 13;
      unsigned __int8 v8 = (void *)sub_1B4BB2204((uint64_t)v10);
      sub_1B4BB34F0(v8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      sub_1B4BB34F0(v10, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_1B4BB34F0(v10, (uint64_t)") [", 3);
      sub_1B4BB34F0(v10, (uint64_t)"ids", 3);
      sub_1B4BB34F0(v10, (uint64_t)"] ", 2);
      sub_1B4BB34F0(v10, (uint64_t)"output container is null", 24);
      sub_1B4BAFA7C(&v9, (uint64_t)a3);
      v10[0] = *MEMORY[0x1E4FBA418];
      *(void *)((char *)v10 + *(void *)(v10[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
      v10[1] = MEMORY[0x1E4FBA470] + 16;
      if (v11 < 0) {
        operator delete((void *)v10[9]);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      return MEMORY[0x1BA992920](&v12);
    }
  }
  return result;
}

void sub_1B4BC54D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1B4BC54F0(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result)
  {
    uint64_t v2 = *(uint64_t (**)(void))(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)result + 152))(result) + 16);
    return v2();
  }
  return result;
}

uint64_t sub_1B4BC5568(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result)
  {
    uint64_t v2 = *(uint64_t (**)(void))(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)result + 152))(result) + 24);
    return v2();
  }
  return result;
}

uint64_t sub_1B4BC55E0(uint64_t a1)
{
  return a1;
}

void *sub_1B4BC560C@<X0>(_DWORD *a1@<X1>, unint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  size_t v13 = a1;
  unint64_t v14 = a2;
  if (a2 <= 0x13)
  {
    LODWORD(v9) = 13;
    uint64_t v6 = (void *)sub_1B4BB2204((uint64_t)v10);
    sub_1B4BB34F0(v6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    sub_1B4BB34F0(v10, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_1B4BB34F0(v10, (uint64_t)") [", 3);
    sub_1B4BB34F0(v10, (uint64_t)"(size) >= (sizeof(MMapHeader))", 30);
    sub_1B4BB34F0(v10, (uint64_t)"] ", 2);
    sub_1B4BAFA7C((unsigned int *)&v9, (uint64_t)a3);
  }
  else if (*a1)
  {
    LODWORD(v9) = 13;
    float v5 = (void *)sub_1B4BB2204((uint64_t)v10);
    sub_1B4BB34F0(v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    sub_1B4BB34F0(v10, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_1B4BB34F0(v10, (uint64_t)") [", 3);
    sub_1B4BB34F0(v10, (uint64_t)"header->sentinel == 0", 21);
    sub_1B4BB34F0(v10, (uint64_t)"] ", 2);
    sub_1B4BB34F0(v10, (uint64_t)"This file format is not for mmap-based loading.", 47);
    sub_1B4BAFA7C((unsigned int *)&v9, (uint64_t)a3);
  }
  else
  {
    uint64_t result = sub_1B4BE2088(&v13, 0x14uLL, a3);
    if (*a3) {
      return result;
    }
    sub_1B4BE3D8C(a3);
    if (v14 >= a1[1]) {
      operator new();
    }
    LODWORD(v9) = 13;
    unsigned __int8 v8 = (void *)sub_1B4BB2204((uint64_t)v10);
    sub_1B4BB34F0(v8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    sub_1B4BB34F0(v10, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_1B4BB34F0(v10, (uint64_t)") [", 3);
    sub_1B4BB34F0(v10, (uint64_t)"(blob.size()) >= (header->model_proto_size)", 43);
    sub_1B4BB34F0(v10, (uint64_t)"] ", 2);
    sub_1B4BAFA7C((unsigned int *)&v9, (uint64_t)a3);
  }
  v10[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v10 + *(void *)(v10[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v10[1] = MEMORY[0x1E4FBA470] + 16;
  if (v11 < 0) {
    operator delete((void *)v10[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return (void *)MEMORY[0x1BA992920](&v12);
}

void sub_1B4BC6168(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1B4BAFB0C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1B4BC61E0()
{
}

void sub_1B4BC623C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9929C0](v1, 0x10F1C40C7D4252BLL);
  _Unwind_Resume(a1);
}

uint64_t sub_1B4BC6260(uint64_t a1)
{
  uint64_t v2 = a1 + 96;
  MEMORY[0x1BA992600](a1 + 96);
  if (*(char *)(a1 + 119) < 0)
  {
    uint64_t v2 = *(void *)(a1 + 96);
    uint64_t v3 = *(void *)(a1 + 104);
  }
  else
  {
    uint64_t v3 = *(unsigned __int8 *)(a1 + 119);
  }
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 48);
  return v4(a1, v2, v3);
}

void sub_1B4BC62E8()
{
}

void sub_1B4BC6410(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B4BC642C(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, void *a4@<X8>)
{
  sub_1B4BCBCE8(a1);
  if (!a3)
  {
    if (*(char *)(a2 + 23) < 0) {
      sub_1B4BCA11C(__p, *(void **)a2, *(void *)(a2 + 8));
    }
    else {
      __p[0] = *(std::__fs::filesystem::path *)a2;
    }
    if ((__p[0].__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unsigned __int8 v8 = __p;
    }
    else {
      unsigned __int8 v8 = (std::__fs::filesystem::path *)__p[0].__pn_.__r_.__value_.__r.__words[0];
    }
    int v9 = open((const char *)v8, 0, __p[0].__pn_.__r_.__value_.__r.__words[0], __p[0].__pn_.__r_.__value_.__l.__size_, __p[0].__pn_.__r_.__value_.__r.__words[2]);
    int v10 = v9;
    *(_DWORD *)(a1 + 24) = v9;
    if (SHIBYTE(__p[0].__pn_.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p[0].__pn_.__r_.__value_.__l.__data_);
      if ((v10 & 0x80000000) == 0) {
        goto LABEL_52;
      }
    }
    else if ((v9 & 0x80000000) == 0)
    {
      goto LABEL_52;
    }
    LODWORD(__p[0].__pn_.__r_.__value_.__l.__data_) = 13;
    char v11 = (void *)sub_1B4BB2204((uint64_t)&__p[0].__pn_.__r_.__value_.__l.__size_);
    sub_1B4BB34F0(v11, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/mmap.h", 62);
    sub_1B4BB34F0(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_1B4BB34F0(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)") [", 3);
    sub_1B4BB34F0(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"(fd = ::open(filename.string().data(), mode)) >= 0", 50);
    sub_1B4BB34F0(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"] ", 2);
    sub_1B4BB34F0(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"open failed: ", 13);
    uint64_t v12 = *(unsigned __int8 *)(a2 + 23);
    if ((v12 & 0x80u) == 0) {
      size_t v13 = (unsigned char *)a2;
    }
    else {
      size_t v13 = *(unsigned char **)a2;
    }
    if ((v12 & 0x80u) != 0) {
      uint64_t v12 = *(void *)(a2 + 8);
    }
LABEL_66:
    sub_1B4BCBEB8(&__p[0].__pn_.__r_.__value_.__l.__size_, v13, &v13[v12], 0x22u, 0x5Cu);
    sub_1B4BAFA7C((unsigned int *)__p, (uint64_t)a4);
    __p[0].__pn_.__r_.__value_.__l.__size_ = *MEMORY[0x1E4FBA418];
    *(std::string::size_type *)((char *)&__p[0].__pn_.__r_.__value_.__r.__words[1]
                              + *(void *)(__p[0].__pn_.__r_.__value_.__l.__size_ - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
    __p[0].__pn_.__r_.__value_.__r.__words[2] = MEMORY[0x1E4FBA470] + 16;
    if (v28 < 0) {
      operator delete(v27);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x1BA992920](v29);
    return;
  }
  sub_1B4BCBD30((const std::__fs::filesystem::path *)a2, (uint64_t)&v31);
  sub_1B4BCBDF4((const std::__fs::filesystem::path *)a2, (uint64_t)&v30);
  std::__fs::filesystem::__status(&v31, 0);
  if (__p[0].__pn_.__r_.__value_.__s.__data_[0] != 2) {
    goto LABEL_30;
  }
  if (SHIBYTE(v31.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    sub_1B4BCA11C(__p, v31.__pn_.__r_.__value_.__l.__data_, v31.__pn_.__r_.__value_.__l.__size_);
  }
  else {
    __p[0] = v31;
  }
  if ((__p[0].__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v14 = __p;
  }
  else {
    unint64_t v14 = (std::__fs::filesystem::path *)__p[0].__pn_.__r_.__value_.__r.__words[0];
  }
  int v15 = open((const char *)v14, 0, __p[0].__pn_.__r_.__value_.__r.__words[0], __p[0].__pn_.__r_.__value_.__l.__size_, __p[0].__pn_.__r_.__value_.__r.__words[2]);
  int v16 = v15;
  if (SHIBYTE(__p[0].__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p[0].__pn_.__r_.__value_.__l.__data_);
    if ((v16 & 0x80000000) == 0) {
      goto LABEL_27;
    }
LABEL_30:
    LODWORD(__p[0].__pn_.__r_.__value_.__l.__data_) = 13;
    sub_1B4BB2204((uint64_t)&__p[0].__pn_.__r_.__value_.__l.__size_);
    sub_1B4BB34F0(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/mmap.h", 62);
    sub_1B4BB34F0(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_1B4BB34F0(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)") [", 3);
    sub_1B4BB34F0(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"std::filesystem::is_directory(dir) && (dirfd = ::open(dir.string().data(), mode)) >= 0", 86);
    sub_1B4BB34F0(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"] ", 2);
    sub_1B4BB34F0(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"open failed: ", 13);
    std::string::size_type size = HIBYTE(v31.__pn_.__r_.__value_.__r.__words[2]);
    if ((v31.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v18 = &v31;
    }
    else {
      uint64_t v18 = (std::__fs::filesystem::path *)v31.__pn_.__r_.__value_.__r.__words[0];
    }
    if ((v31.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = v31.__pn_.__r_.__value_.__l.__size_;
    }
    sub_1B4BCBEB8(&__p[0].__pn_.__r_.__value_.__l.__size_, v18, (unsigned char *)v18 + size, 0x22u, 0x5Cu);
    sub_1B4BAFA7C((unsigned int *)__p, (uint64_t)a4);
    __p[0].__pn_.__r_.__value_.__l.__size_ = *MEMORY[0x1E4FBA418];
    *(std::string::size_type *)((char *)&__p[0].__pn_.__r_.__value_.__r.__words[1]
                              + *(void *)(__p[0].__pn_.__r_.__value_.__l.__size_ - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
    __p[0].__pn_.__r_.__value_.__r.__words[2] = MEMORY[0x1E4FBA470] + 16;
    if (v28 < 0) {
      operator delete(v27);
    }
    goto LABEL_37;
  }
  if (v15 < 0) {
    goto LABEL_30;
  }
LABEL_27:
  if (SHIBYTE(v30.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    sub_1B4BCA11C(__p, v30.__pn_.__r_.__value_.__l.__data_, v30.__pn_.__r_.__value_.__l.__size_);
  }
  else {
    __p[0] = v30;
  }
  if ((__p[0].__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v19 = __p;
  }
  else {
    uint64_t v19 = (std::__fs::filesystem::path *)__p[0].__pn_.__r_.__value_.__r.__words[0];
  }
  *(_DWORD *)(a1 + 24) = openat_authenticated_np(v16, (const char *)v19, 0, -1);
  if (SHIBYTE(__p[0].__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__pn_.__r_.__value_.__l.__data_);
  }
  close(v16);
  if ((*(_DWORD *)(a1 + 24) & 0x80000000) == 0)
  {
    if (SHIBYTE(v30.__pn_.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v30.__pn_.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v31.__pn_.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v31.__pn_.__r_.__value_.__l.__data_);
    }
LABEL_52:
    if (fstat(*(_DWORD *)(a1 + 24), &v32) < 0)
    {
      LODWORD(__p[0].__pn_.__r_.__value_.__l.__data_) = 13;
      unint64_t v22 = (void *)sub_1B4BB2204((uint64_t)&__p[0].__pn_.__r_.__value_.__l.__size_);
      sub_1B4BB34F0(v22, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/mmap.h", 62);
      sub_1B4BB34F0(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_1B4BB34F0(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)") [", 3);
      sub_1B4BB34F0(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"::fstat(fd, &st) >= 0", 21);
      sub_1B4BB34F0(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"] ", 2);
      sub_1B4BB34F0(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"failed to get file size: ", 25);
      uint64_t v12 = *(unsigned __int8 *)(a2 + 23);
      if ((v12 & 0x80u) == 0) {
        size_t v13 = (unsigned char *)a2;
      }
      else {
        size_t v13 = *(unsigned char **)a2;
      }
      if ((v12 & 0x80u) != 0) {
        uint64_t v12 = *(void *)(a2 + 8);
      }
    }
    else
    {
      st_std::string::size_type size = v32.st_size;
      *(void *)(a1 + 16) = v32.st_size;
      unint64_t v21 = mmap(0, st_size, 1, 1, *(_DWORD *)(a1 + 24), 0);
      if (v21 != (void *)-1)
      {
        *(void *)(a1 + 8) = v21;
        close(*(_DWORD *)(a1 + 24));
        *(_DWORD *)(a1 + 24) = -1;
        sub_1B4BE3D84(a4);
        return;
      }
      LODWORD(__p[0].__pn_.__r_.__value_.__l.__data_) = 13;
      uint64_t v23 = (void *)sub_1B4BB2204((uint64_t)&__p[0].__pn_.__r_.__value_.__l.__size_);
      sub_1B4BB34F0(v23, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/mmap.h", 62);
      sub_1B4BB34F0(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_1B4BB34F0(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)") [", 3);
      sub_1B4BB34F0(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"(p = reinterpret_cast<char*>( ::mmap(0, length, PROT_READ, MAP_SHARED, fd, 0))) != MAP_FAILED", 93);
      sub_1B4BB34F0(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"] ", 2);
      sub_1B4BB34F0(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"mmap() failed: ", 15);
      uint64_t v12 = *(unsigned __int8 *)(a2 + 23);
      if ((v12 & 0x80u) == 0) {
        size_t v13 = (unsigned char *)a2;
      }
      else {
        size_t v13 = *(unsigned char **)a2;
      }
      if ((v12 & 0x80u) != 0) {
        uint64_t v12 = *(void *)(a2 + 8);
      }
    }
    goto LABEL_66;
  }
  LODWORD(__p[0].__pn_.__r_.__value_.__l.__data_) = 13;
  sub_1B4BB2204((uint64_t)&__p[0].__pn_.__r_.__value_.__l.__size_);
  sub_1B4BB34F0(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/mmap.h", 62);
  sub_1B4BB34F0(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"(", 1);
  std::ostream::operator<<();
  sub_1B4BB34F0(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)") [", 3);
  sub_1B4BB34F0(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"fd >= 0", 7);
  sub_1B4BB34F0(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"] ", 2);
  sub_1B4BB34F0(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"open failed: ", 13);
  uint64_t v24 = *(unsigned __int8 *)(a2 + 23);
  if ((v24 & 0x80u) == 0) {
    unint64_t v25 = (unsigned char *)a2;
  }
  else {
    unint64_t v25 = *(unsigned char **)a2;
  }
  if ((v24 & 0x80u) != 0) {
    uint64_t v24 = *(void *)(a2 + 8);
  }
  sub_1B4BCBEB8(&__p[0].__pn_.__r_.__value_.__l.__size_, v25, &v25[v24], 0x22u, 0x5Cu);
  sub_1B4BAFA7C((unsigned int *)__p, (uint64_t)a4);
  __p[0].__pn_.__r_.__value_.__l.__size_ = *MEMORY[0x1E4FBA418];
  *(std::string::size_type *)((char *)&__p[0].__pn_.__r_.__value_.__r.__words[1]
                            + *(void *)(__p[0].__pn_.__r_.__value_.__l.__size_ - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  __p[0].__pn_.__r_.__value_.__r.__words[2] = MEMORY[0x1E4FBA470] + 16;
  if (v28 < 0) {
    operator delete(v27);
  }
LABEL_37:
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1BA992920](v29);
  if (SHIBYTE(v30.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v30.__pn_.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v31.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v31.__pn_.__r_.__value_.__l.__data_);
  }
}

void sub_1B4BC6D40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (*(char *)(v14 - 217) < 0) {
    operator delete(*(void **)(v14 - 240));
  }
  if (*(char *)(v14 - 193) < 0) {
    operator delete(*(void **)(v14 - 216));
  }
  _Unwind_Resume(exception_object);
}

void sub_1B4BC6DF4()
{
}

void sub_1B4BC6F1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_1B4BC6F38@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 136))(&v3);
  return sub_1B4BE3D8C(&v3);
}

void sub_1B4BC6F9C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1B4BC89A4((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_1B4BC6FB4@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 144))(&v3);
  return sub_1B4BE3D8C(&v3);
}

void sub_1B4BC7018(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_1B4BC7034@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 176))(&v3);
  return sub_1B4BE3D8C(&v3);
}

void sub_1B4BC7098(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1B4BC8DA4((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_1B4BC70B0@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 184))(&v3);
  return sub_1B4BE3D8C(&v3);
}

void sub_1B4BC7114(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1B4BC8E18((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_1B4BC712C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 192))(&v3);
  return sub_1B4BE3D8C(&v3);
}

void sub_1B4BC7190(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1B4BC89A4((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_1B4BC71A8@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 200))(&v3);
  return sub_1B4BE3D8C(&v3);
}

void sub_1B4BC720C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_1B4BC7228@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 208))(&v3);
  return sub_1B4BE3D8C(&v3);
}

void sub_1B4BC728C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1B4BC8EC4((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_1B4BC72A4@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 216))(&v3);
  return sub_1B4BE3D8C(&v3);
}

void sub_1B4BC7308(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1B4BB332C((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_1B4BC7320@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 152))(&v3);
  return sub_1B4BE3D8C(&v3);
}

void sub_1B4BC7384(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_1B4BC73A0@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 160))(&v3);
  return sub_1B4BE3D8C(&v3);
}

void sub_1B4BC7404(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_1B4BC7420@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 168))(&v3);
  return sub_1B4BE3D8C(&v3);
}

void sub_1B4BC7484(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

float sub_1B4BC74A0(uint64_t a1)
{
  float v4 = 0.0;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 224))(&v3);
  float v1 = v4;
  sub_1B4BE3D8C(&v3);
  return v1;
}

void sub_1B4BC7504(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int v10 = &unk_1F0D548D0;
  uint64_t v12 = 0;
  size_t v13 = 0;
  char v11 = sub_1B4BD5850();
  uint64_t v8 = sub_1B4BB963C(&v10);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 232))(&v9, a1, a2, a3, v8);
  sub_1B4BF2680((uint64_t)v11, a4);
  sub_1B4BE3D8C(&v9);
  int v10 = &unk_1F0D548D0;
  if (v13) {
    sub_1B4BC8F38(v13);
  }
}

void sub_1B4BC75DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_1B4BC8F38(a14);
  }
  _Unwind_Resume(a1);
}

void sub_1B4BC7608(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, float a6@<S0>)
{
  uint64_t v14 = &unk_1F0D548D0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  int v15 = sub_1B4BD5850();
  uint64_t v12 = sub_1B4BB963C(&v14);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float))(*(void *)a1 + 248))(&v13, a1, a2, a3, a4, v12, a6);
  sub_1B4BF2680((uint64_t)v15, a5);
  sub_1B4BE3D8C(&v13);
  uint64_t v14 = &unk_1F0D548D0;
  if (v17) {
    sub_1B4BC8F38(v17);
  }
}

void sub_1B4BC76F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_1B4BC8F38(a14);
  }
  _Unwind_Resume(a1);
}

void sub_1B4BC7724(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  v12[1] = 0;
  uint64_t v13 = 0;
  v12[0] = &unk_1F0D54930;
  uint64_t v10 = sub_1B4BB975C((uint64_t)v12);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 240))(&v11, a1, a2, a3, a4, v10);
  sub_1B4BB97C0((uint64_t)v12, a5);
  sub_1B4BE3D8C(&v11);
  v12[0] = &unk_1F0D54930;
  if (v13) {
    sub_1B4BC8F38(v13);
  }
}

void sub_1B4BC77FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_1B4BC8F38(a12);
  }
  _Unwind_Resume(a1);
}

void sub_1B4BC7828(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void *a7@<X8>, float a8@<S0>)
{
  v18[1] = 0;
  uint64_t v19 = 0;
  v18[0] = &unk_1F0D54930;
  uint64_t v16 = sub_1B4BB975C((uint64_t)v18);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float))(*(void *)a1 + 256))(&v17, a1, a2, a3, a4, a5, a6, v16, a8);
  sub_1B4BB97C0((uint64_t)v18, a7);
  sub_1B4BE3D8C(&v17);
  v18[0] = &unk_1F0D54930;
  if (v19) {
    sub_1B4BC8F38(v19);
  }
}

void sub_1B4BC7930(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_1B4BC8F38(a12);
  }
  _Unwind_Resume(a1);
}

void sub_1B4BC795C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v8 = &unk_1F0D548D0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v9 = sub_1B4BD5850();
  uint64_t v6 = sub_1B4BB963C(&v8);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 264))(&v7, a1, a2, v6);
  sub_1B4BF2680((uint64_t)v9, a3);
  sub_1B4BE3D8C(&v7);
  uint64_t v8 = &unk_1F0D548D0;
  if (v11) {
    sub_1B4BC8F38(v11);
  }
}

void sub_1B4BC7A2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_1B4BC8F38(a14);
  }
  _Unwind_Resume(a1);
}

void sub_1B4BC7A58(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v8 = &unk_1F0D548D0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v9 = sub_1B4BD5850();
  uint64_t v6 = sub_1B4BB963C(&v8);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 272))(&v7, a1, a2, v6);
  sub_1B4BF2680((uint64_t)v9, a3);
  sub_1B4BE3D8C(&v7);
  uint64_t v8 = &unk_1F0D548D0;
  if (v11) {
    sub_1B4BC8F38(v11);
  }
}

void sub_1B4BC7B28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_1B4BC8F38(a14);
  }
  _Unwind_Resume(a1);
}

void sub_1B4BC7B54(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v8 = &unk_1F0D548D0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v9 = sub_1B4BD5850();
  uint64_t v6 = sub_1B4BB963C(&v8);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 280))(&v7, a1, a2, v6);
  sub_1B4BF2680((uint64_t)v9, a3);
  sub_1B4BE3D8C(&v7);
  uint64_t v8 = &unk_1F0D548D0;
  if (v11) {
    sub_1B4BC8F38(v11);
  }
}

void sub_1B4BC7C24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_1B4BC8F38(a14);
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_1B4BC7C50@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  *a4 = &unk_1F0D548D0;
  uint64_t v8 = sub_1B4BD5850();
  a4[2] = 0;
  a4[3] = 0;
  a4[1] = v8;
  uint64_t v9 = sub_1B4BB963C(a4);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 232))(&v11, a1, a2, a3, v9);
  return sub_1B4BE3D8C(&v11);
}

void sub_1B4BC7D08(_Unwind_Exception *exception_object)
{
  *float v1 = v2;
  float v4 = (std::__shared_weak_count *)v1[3];
  if (v4) {
    sub_1B4BC8F38(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_1B4BC7D24@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>, float a6@<S0>)
{
  *a5 = &unk_1F0D548D0;
  uint64_t v12 = sub_1B4BD5850();
  a5[2] = 0;
  a5[3] = 0;
  a5[1] = v12;
  uint64_t v13 = sub_1B4BB963C(a5);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float))(*(void *)a1 + 248))(&v15, a1, a2, a3, a4, v13, a6);
  return sub_1B4BE3D8C(&v15);
}

void sub_1B4BC7DF4(_Unwind_Exception *exception_object)
{
  *float v1 = v2;
  float v4 = (std::__shared_weak_count *)v1[3];
  if (v4) {
    sub_1B4BC8F38(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_1B4BC7E10@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  a5[1] = 0;
  a5[2] = 0;
  *a5 = &unk_1F0D54930;
  uint64_t v9 = sub_1B4BB975C((uint64_t)a5);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 240))(&v11, a1, a2, a3, a4, v9);
  return sub_1B4BE3D8C(&v11);
}

void sub_1B4BC7EC8(_Unwind_Exception *exception_object)
{
  *float v1 = v2;
  float v4 = (std::__shared_weak_count *)v1[2];
  if (v4) {
    sub_1B4BC8F38(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_1B4BC7EE4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void *a7@<X8>, float a8@<S0>)
{
  a7[1] = 0;
  a7[2] = 0;
  *a7 = &unk_1F0D54930;
  uint64_t v15 = sub_1B4BB975C((uint64_t)a7);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float))(*(void *)a1 + 256))(&v17, a1, a2, a3, a4, a5, a6, v15, a8);
  return sub_1B4BE3D8C(&v17);
}

void sub_1B4BC7FCC(_Unwind_Exception *exception_object)
{
  *float v1 = v2;
  float v4 = (std::__shared_weak_count *)v1[2];
  if (v4) {
    sub_1B4BC8F38(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_1B4BC7FE8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = &unk_1F0D548D0;
  uint64_t v6 = sub_1B4BD5850();
  a3[2] = 0;
  a3[3] = 0;
  a3[1] = v6;
  uint64_t v7 = sub_1B4BB963C(a3);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 264))(&v9, a1, a2, v7);
  return sub_1B4BE3D8C(&v9);
}

void sub_1B4BC8098(_Unwind_Exception *exception_object)
{
  *float v1 = v2;
  float v4 = (std::__shared_weak_count *)v1[3];
  if (v4) {
    sub_1B4BC8F38(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_1B4BC80B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = &unk_1F0D548D0;
  uint64_t v6 = sub_1B4BD5850();
  a3[2] = 0;
  a3[3] = 0;
  a3[1] = v6;
  uint64_t v7 = sub_1B4BB963C(a3);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 272))(&v9, a1, a2, v7);
  return sub_1B4BE3D8C(&v9);
}

void sub_1B4BC8164(_Unwind_Exception *exception_object)
{
  *float v1 = v2;
  float v4 = (std::__shared_weak_count *)v1[3];
  if (v4) {
    sub_1B4BC8F38(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_1B4BC8180@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = &unk_1F0D548D0;
  uint64_t v6 = sub_1B4BD5850();
  a3[2] = 0;
  a3[3] = 0;
  a3[1] = v6;
  uint64_t v7 = sub_1B4BB963C(a3);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 280))(&v9, a1, a2, v7);
  return sub_1B4BE3D8C(&v9);
}

void sub_1B4BC8230(_Unwind_Exception *exception_object)
{
  *float v1 = v2;
  float v4 = (std::__shared_weak_count *)v1[3];
  if (v4) {
    sub_1B4BC8F38(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1B4BC824C(uint64_t a1, int a2)
{
  if (a2 < 0)
  {
    sub_1B4BE6194((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1705);
    float v4 = sub_1B4BE61AC(v8, "CHECK failed: (index) >= (0): ");
    sub_1B4BE62E8((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_1B4BE62F0((uint64_t)v8);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    sub_1B4BE6194((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1706);
    float v5 = sub_1B4BE61AC(v8, "CHECK failed: (index) < (current_size_): ");
    sub_1B4BE62E8((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_1B4BE62F0((uint64_t)v8);
  }
  return *(void *)(*(void *)(a1 + 16) + 8 * a2 + 8);
}

void sub_1B4BC830C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1B4BE62F0((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_1B4BC832C(void *a1, unint64_t a2)
{
  if (a2 >> 62) {
    sub_1B4BB3244();
  }
  uint64_t result = (char *)sub_1B4BB427C((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

uint64_t sub_1B4BC8370(uint64_t a1, int a2)
{
  if (a2 < 0)
  {
    sub_1B4BE6194((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1705);
    uint64_t v4 = sub_1B4BE61AC(v8, "CHECK failed: (index) >= (0): ");
    sub_1B4BE62E8((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_1B4BE62F0((uint64_t)v8);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    sub_1B4BE6194((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1706);
    float v5 = sub_1B4BE61AC(v8, "CHECK failed: (index) < (current_size_): ");
    sub_1B4BE62E8((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_1B4BE62F0((uint64_t)v8);
  }
  return *(void *)(*(void *)(a1 + 16) + 8 * a2 + 8);
}

void sub_1B4BC8430(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1B4BE62F0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B4BC8450(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA418];
  uint64_t v3 = *MEMORY[0x1E4FBA418];
  *(void *)a1 = *MEMORY[0x1E4FBA418];
  *(void *)(a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 8) = MEMORY[0x1E4FBA470] + 16;
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1BA992920](a1 + 112);
  return a1;
}

uint64_t sub_1B4BC8554(uint64_t a1, int a2)
{
  if (a2 < 0)
  {
    sub_1B4BE6194((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1727);
    uint64_t v4 = sub_1B4BE61AC(v8, "CHECK failed: (index) >= (0): ");
    sub_1B4BE62E8((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_1B4BE62F0((uint64_t)v8);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    sub_1B4BE6194((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1728);
    float v5 = sub_1B4BE61AC(v8, "CHECK failed: (index) < (current_size_): ");
    sub_1B4BE62E8((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_1B4BE62F0((uint64_t)v8);
  }
  return *(void *)(*(void *)(a1 + 16) + 8 * a2 + 8);
}

void sub_1B4BC8614(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1B4BE62F0((uint64_t)va);
  _Unwind_Resume(a1);
}

char **sub_1B4BC8634(char **a1, uint64_t a2, unint64_t a3, unsigned __int8 *a4, uint64_t a5, int a6)
{
  uint64_t v9 = 0;
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v10 = 0;
  if (a5)
  {
    int v11 = a6;
    if (a3)
    {
      uint64_t v9 = 0;
      uint64_t v10 = 0;
      uint64_t v14 = (unsigned __int8 *)(a2 + a3);
      uint64_t v15 = a1 + 2;
      while (2)
      {
        uint64_t v16 = &v10[a2];
        uint64_t v17 = &v10[a2];
LABEL_5:
        uint64_t v18 = a5;
        uint64_t v19 = a4;
        while (*v17 != *v19)
        {
          ++v19;
          if (!--v18)
          {
            if (++v17 != v14) {
              goto LABEL_5;
            }
            goto LABEL_37;
          }
        }
        if (v17 != v14)
        {
          unint64_t v20 = &v17[-a2];
          if (&v17[-a2] != (unsigned __int8 *)-1)
          {
            unint64_t v21 = (unsigned __int8 *)(v20 - v10);
            BOOL v22 = v20 >= v10;
            if (!v11) {
              BOOL v22 = v20 > v10;
            }
            if (v22)
            {
              uint64_t v23 = (unsigned __int8 *)(a3 - (void)v10);
              if (v23 >= v21) {
                uint64_t v24 = v21;
              }
              else {
                uint64_t v24 = v23;
              }
              if ((unint64_t)v9 >= *v15)
              {
                uint64_t v25 = ((char *)v9 - *a1) >> 4;
                if ((unint64_t)(v25 + 1) >> 60) {
                  sub_1B4BB3244();
                }
                uint64_t v26 = *v15 - (void)*a1;
                uint64_t v27 = v26 >> 3;
                if (v26 >> 3 <= (unint64_t)(v25 + 1)) {
                  uint64_t v27 = v25 + 1;
                }
                if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF0) {
                  unint64_t v28 = 0xFFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v28 = v27;
                }
                if (v28) {
                  int v29 = (char *)sub_1B4BB4140((uint64_t)v15, v28);
                }
                else {
                  int v29 = 0;
                }
                std::__fs::filesystem::path v30 = &v29[16 * v25];
                *(void *)std::__fs::filesystem::path v30 = v16;
                *((void *)v30 + 1) = v24;
                stat v32 = *a1;
                std::__fs::filesystem::path v31 = a1[1];
                unsigned int v33 = v30;
                if (v31 != *a1)
                {
                  do
                  {
                    *((_OWORD *)v33 - 1) = *((_OWORD *)v31 - 1);
                    v33 -= 16;
                    v31 -= 16;
                  }
                  while (v31 != v32);
                  std::__fs::filesystem::path v31 = *a1;
                }
                uint64_t v9 = (unsigned __int8 **)(v30 + 16);
                *a1 = v33;
                a1[1] = v30 + 16;
                a1[2] = &v29[16 * v28];
                if (v31) {
                  operator delete(v31);
                }
                int v11 = a6;
                uint64_t v15 = a1 + 2;
              }
              else
              {
                *uint64_t v9 = v16;
                v9[1] = v24;
                v9 += 2;
              }
              a1[1] = (char *)v9;
            }
            uint64_t v10 = v20 + 1;
            if (a3 > (unint64_t)(v20 + 1)) {
              continue;
            }
          }
        }
        break;
      }
    }
  }
LABEL_37:
  BOOL v34 = a3 > (unint64_t)v10;
  unint64_t v35 = a3 - (void)v10;
  if (v34)
  {
    uint64_t v36 = &v10[a2];
    unint64_t v37 = (unint64_t)a1[2];
    if ((unint64_t)v9 >= v37)
    {
      uint64_t v39 = ((char *)v9 - *a1) >> 4;
      if ((unint64_t)(v39 + 1) >> 60) {
        sub_1B4BB3244();
      }
      uint64_t v40 = v37 - (void)*a1;
      uint64_t v41 = v40 >> 3;
      if (v40 >> 3 <= (unint64_t)(v39 + 1)) {
        uint64_t v41 = v39 + 1;
      }
      if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v42 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v42 = v41;
      }
      if (v42) {
        BOOL v43 = (char *)sub_1B4BB4140((uint64_t)(a1 + 2), v42);
      }
      else {
        BOOL v43 = 0;
      }
      uint64_t v44 = &v43[16 * v39];
      uint64_t v45 = &v43[16 * v42];
      *(void *)uint64_t v44 = v36;
      *((void *)v44 + 1) = v35;
      uint64_t v38 = v44 + 16;
      size_t v47 = *a1;
      uint64_t v46 = a1[1];
      if (v46 != *a1)
      {
        do
        {
          *((_OWORD *)v44 - 1) = *((_OWORD *)v46 - 1);
          v44 -= 16;
          v46 -= 16;
        }
        while (v46 != v47);
        uint64_t v46 = *a1;
      }
      *a1 = v44;
      a1[1] = v38;
      a1[2] = v45;
      if (v46) {
        operator delete(v46);
      }
    }
    else
    {
      *uint64_t v9 = v36;
      v9[1] = (unsigned __int8 *)v35;
      uint64_t v38 = (char *)(v9 + 2);
    }
    a1[1] = v38;
  }
  return a1;
}

void sub_1B4BC88DC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1B4BC8900(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_1B4BB31F0(a1, a2);
    uint64_t v4 = (char *)a1[1];
    size_t v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_1B4BC8990(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_1B4BC89A4(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_1B4BC89F8((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void sub_1B4BC89F8(uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 24)
  {
    if (*(char *)(i - 1) < 0) {
      operator delete(*(void **)(i - 24));
    }
  }
  a1[1] = v2;
}

void *sub_1B4BC8A48(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_1B4BB7064(a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 16 * a2);
    a1[1] = &v4[16 * a2];
  }
  return a1;
}

void sub_1B4BC8AA4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B4BC8AC0(void *__src@<X0>, size_t __len@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  sub_1B4BB8D14(&__dst, __src, __len);
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  uint64_t v6 = *a3;
  uint64_t v7 = a3[1];
  while (v6 != v7)
  {
    if (*(char *)(a4 + 23) < 0)
    {
      **(unsigned char **)a4 = 0;
      *(void *)(a4 + 8) = 0;
    }
    else
    {
      *(unsigned char *)a4 = 0;
      *(unsigned char *)(a4 + 23) = 0;
    }
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_dst = &__dst;
    }
    else {
      p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
    }
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __dst.__r_.__value_.__l.__size_;
    }
    uint64_t v10 = *(char **)v6;
    int64_t v11 = *(void *)(v6 + 8);
    uint64_t v12 = *(const std::string::value_type **)(v6 + 16);
    std::string::size_type v13 = *(void *)(v6 + 24);
    uint64_t v18 = p_dst;
    std::string::size_type v19 = size;
    if (v11)
    {
      uint64_t v14 = sub_1B4BC8C58((uint64_t *)&v18, v10, v11, 0);
      if (v14 == -1)
      {
        uint64_t v16 = 0;
      }
      else
      {
        uint64_t v15 = v14;
        uint64_t v16 = 0;
        do
        {
          std::string::append((std::string *)a4, (const std::string::value_type *)v18 + v16, v15 - v16);
          std::string::append((std::string *)a4, v12, v13);
          uint64_t v16 = v15 + v11;
          uint64_t v15 = sub_1B4BC8C58((uint64_t *)&v18, v10, v11, v15 + v11);
        }
        while (v15 != -1);
      }
      p_dst = (std::string *)((char *)v18 + v16);
      std::string::size_type size = v19 - v16;
    }
    std::string::append((std::string *)a4, (const std::string::value_type *)p_dst, size);
    std::string::operator=(&__dst, (const std::string *)a4);
    v6 += 32;
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
}

void sub_1B4BC8C28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (*(char *)(v15 + 23) < 0) {
    operator delete(*(void **)v15);
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1B4BC8C58(uint64_t *a1, char *a2, int64_t a3, unint64_t a4)
{
  unint64_t v4 = a1[1];
  if (v4 < a4) {
    return -1;
  }
  if (a3)
  {
    uint64_t v6 = *a1;
    uint64_t v7 = (void *)(*a1 + a4);
    uint64_t v8 = (char *)(v6 + v4);
    uint64_t v9 = v6 + v4 - (void)v7;
    if (v9 >= a3)
    {
      int v13 = *a2;
      do
      {
        uint64_t v14 = v9 - a3;
        if (v14 == -1) {
          break;
        }
        uint64_t v15 = (char *)memchr(v7, v13, v14 + 1);
        if (!v15) {
          break;
        }
        uint64_t v10 = v15;
        if (!memcmp(v15, a2, a3)) {
          goto LABEL_6;
        }
        uint64_t v7 = v10 + 1;
        uint64_t v9 = v8 - (v10 + 1);
      }
      while (v9 >= a3);
    }
    uint64_t v10 = v8;
LABEL_6:
    if (v10 == v8) {
      return -1;
    }
    else {
      return (uint64_t)&v10[-v6];
    }
  }
  return a4;
}

void sub_1B4BC8D14(const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_1B4BC8D70(exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E60A34C0, MEMORY[0x1E4FBA1D0]);
}

void sub_1B4BC8D5C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_1B4BC8D70(std::logic_error *a1, const char *a2)
{
  uint64_t result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D8] + 16);
  return result;
}

void sub_1B4BC8DA4(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    unint64_t v4 = (void **)v1[1];
    size_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        uint64_t v6 = v4;
        sub_1B4BC89A4(&v6);
      }
      while (v4 != v2);
      size_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_1B4BC8E18(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_1B4BC8E6C((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void sub_1B4BC8E6C(uint64_t *a1)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  if (v2 != *a1)
  {
    uint64_t v4 = a1[1];
    do
    {
      uint64_t v6 = *(void **)(v4 - 24);
      v4 -= 24;
      size_t v5 = v6;
      if (v6)
      {
        *(void *)(v2 - 16) = v5;
        operator delete(v5);
      }
      uint64_t v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

void sub_1B4BC8EC4(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    uint64_t v4 = (void **)v1[1];
    size_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 4;
        uint64_t v6 = v4;
        sub_1B4BC89A4(&v6);
      }
      while (v4 != v2);
      size_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_1B4BC8F38(std::__shared_weak_count *a1)
{
  if (!atomic_fetch_add(&a1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a1->__on_zero_shared)(a1);
    std::__shared_weak_count::__release_weak(a1);
  }
}

uint64_t sub_1B4BC8FAC(uint64_t a1, int a2)
{
  if (a2 < 0)
  {
    sub_1B4BE6194((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1727);
    uint64_t v4 = sub_1B4BE61AC(v8, "CHECK failed: (index) >= (0): ");
    sub_1B4BE62E8((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_1B4BE62F0((uint64_t)v8);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    sub_1B4BE6194((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1728);
    size_t v5 = sub_1B4BE61AC(v8, "CHECK failed: (index) < (current_size_): ");
    sub_1B4BE62E8((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_1B4BE62F0((uint64_t)v8);
  }
  return *(void *)(*(void *)(a1 + 16) + 8 * a2 + 8);
}

void sub_1B4BC906C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1B4BE62F0((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_1B4BC908C@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x70uLL);
  uint64_t result = sub_1B4BC90D8(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1B4BC90C4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1B4BC90D8(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0D55B00;
  sub_1B4BD56EC(a1 + 3, 0);
  return a1;
}

void sub_1B4BC9124(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1B4BC9138(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0D55B00;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1B4BC9158(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0D55B00;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1BA9929C0);
}

uint64_t sub_1B4BC91AC(uint64_t a1)
{
  return sub_1B4BD5814(a1 + 24);
}

void *sub_1B4BC91B8@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x48uLL);
  uint64_t result = sub_1B4BC9204(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1B4BC91F0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1B4BC9204(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0D55B38;
  sub_1B4BD62A8(a1 + 3, 0);
  return a1;
}

void sub_1B4BC9250(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1B4BC9264(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0D55B38;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1B4BC9284(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0D55B38;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1BA9929C0);
}

uint64_t sub_1B4BC92D8(uint64_t a1)
{
  return sub_1B4BD6364(a1 + 24);
}

uint64_t sub_1B4BC92E4(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_1B4BDE3A4();
    JUMPOUT(0x1BA9929C0);
  }
  return result;
}

void sub_1B4BC9334(void *__src@<X0>, size_t __len@<X1>, void **a3@<X2>, char *a4@<X3>, void **a5@<X4>, std::string *a6@<X8>)
{
  sub_1B4BB8D14(&__dst, __src, __len);
  int v10 = *((char *)a3 + 23);
  if (v10 >= 0) {
    int64_t v11 = a3;
  }
  else {
    int64_t v11 = *a3;
  }
  if (v10 >= 0) {
    size_t v12 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    size_t v12 = (size_t)a3[1];
  }
  sub_1B4BC9438(v11, v12, a4, a5, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  uint64_t v15 = std::string::append(&__dst, (const std::string::value_type *)p_p, size);
  *a6 = *v15;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
}

void sub_1B4BC9404(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B4BC9438(void *__src@<X0>, size_t __len@<X1>, char *a3@<X2>, void **a4@<X3>, std::string *a5@<X8>)
{
  sub_1B4BB8D14(&__dst, __src, __len);
  size_t v8 = strlen(a3);
  sub_1B4BC952C(a3, v8, a4, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  int64_t v11 = std::string::append(&__dst, (const std::string::value_type *)p_p, size);
  *a5 = *v11;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
}

void sub_1B4BC94F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B4BC952C(void *__src@<X0>, size_t __len@<X1>, void **a3@<X2>, std::string *a4@<X8>)
{
  sub_1B4BB8D14(&__dst, __src, __len);
  int v6 = *((char *)a3 + 23);
  if (v6 >= 0) {
    char v7 = a3;
  }
  else {
    char v7 = *a3;
  }
  if (v6 >= 0) {
    size_t v8 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    size_t v8 = (size_t)a3[1];
  }
  sub_1B4BB8D14(__p, v7, v8);
  if ((v13 & 0x80u) == 0) {
    uint64_t v9 = __p;
  }
  else {
    uint64_t v9 = (void **)__p[0];
  }
  if ((v13 & 0x80u) == 0) {
    std::string::size_type v10 = v13;
  }
  else {
    std::string::size_type v10 = (std::string::size_type)__p[1];
  }
  int64_t v11 = std::string::append(&__dst, (const std::string::value_type *)v9, v10);
  *a4 = *v11;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if ((char)v13 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
}

void sub_1B4BC95E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1B4BC9618(uint64_t *a1, void *a2)
{
  uint64_t result = sub_1B4BC9690((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1B4BC9690(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  void v12[2] = &v15;
  if (a3 != a5)
  {
    uint64_t v9 = a7;
    do
    {
      long long v10 = *(_OWORD *)(a3 - 24);
      *(void *)(v9 - 8) = *(void *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v10;
      v9 -= 24;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 8) = 0;
      *(void *)(a3 - 24) = 0;
      v7 -= 24;
      a3 -= 24;
    }
    while (a3 != a5);
    *((void *)&v15 + 1) = v9;
  }
  char v13 = 1;
  sub_1B4BC9730((uint64_t)v12);
  return a6;
}

uint64_t sub_1B4BC9730(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_1B4BC9768(a1);
  }
  return a1;
}

void sub_1B4BC9768(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
    v1 += 24;
  }
}

uint64_t sub_1B4BC97B0(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_1B4BC97E8(uint64_t a1, void **a2)
{
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      uint64_t v5 = v2 - 3;
      *(void *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v5);
        uint64_t v5 = *(void ***)(a1 + 16);
      }
      uint64_t v2 = v5;
    }
    while (v5 != a2);
  }
}

uint64_t sub_1B4BC9840(uint64_t a1, _OWORD *a2, _OWORD *a3)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (void *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      sub_1B4BC98C4((uint64_t **)a1, v4, (uint64_t)v6, v6);
      ++v6;
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_1B4BC98AC(_Unwind_Exception *a1)
{
  sub_1B4BB38C8(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_1B4BC98C4(uint64_t **a1, void *a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v6 = sub_1B4BC994C(a1, a2, &v11, &v10, a3);
  uint64_t v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    uint64_t v7 = (uint64_t *)operator new(0x30uLL);
    *((_OWORD *)v7 + 2) = *a4;
    sub_1B4BB3D00(a1, v11, v8, v7);
  }
  return v7;
}

uint64_t *sub_1B4BC994C(void *a1, void *a2, void *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v9 = a1 + 1;
  if (a1 + 1 != a2 && !sub_1B4BB3D58((uint64_t)(a1 + 2), a5, (uint64_t)(a2 + 4)))
  {
    if (!sub_1B4BB3D58((uint64_t)(a1 + 2), (uint64_t)(a2 + 4), a5))
    {
      *a3 = a2;
      *a4 = (uint64_t)a2;
      return a4;
    }
    a4 = a2 + 1;
    uint64_t v13 = a2[1];
    if (v13)
    {
      long long v14 = (void *)a2[1];
      do
      {
        long long v15 = v14;
        long long v14 = (void *)*v14;
      }
      while (v14);
    }
    else
    {
      uint64_t v18 = a2;
      do
      {
        long long v15 = (void *)v18[2];
        BOOL v17 = *v15 == (void)v18;
        uint64_t v18 = v15;
      }
      while (!v17);
    }
    if (v15 != v9)
    {
      if (!sub_1B4BB3D58((uint64_t)(a1 + 2), a5, (uint64_t)(v15 + 4))) {
        goto LABEL_28;
      }
      uint64_t v13 = *a4;
    }
    if (v13)
    {
      *a3 = v15;
      return v15;
    }
    else
    {
      *a3 = a2;
    }
    return a4;
  }
  if ((void *)*a1 == a2)
  {
    size_t v12 = a2;
LABEL_16:
    if (*a2)
    {
      *a3 = v12;
      return v12 + 1;
    }
    else
    {
      *a3 = a2;
      return a2;
    }
  }
  uint64_t v11 = (void *)*a2;
  if (*a2)
  {
    do
    {
      size_t v12 = v11;
      uint64_t v11 = (void *)v11[1];
    }
    while (v11);
  }
  else
  {
    uint64_t v16 = a2;
    do
    {
      size_t v12 = (void *)v16[2];
      BOOL v17 = *v12 == (void)v16;
      uint64_t v16 = v12;
    }
    while (v17);
  }
  if (sub_1B4BB3D58((uint64_t)(a1 + 2), (uint64_t)(v12 + 4), a5)) {
    goto LABEL_16;
  }
LABEL_28:
  return sub_1B4BB3C60((uint64_t)a1, a3, a5);
}

void *sub_1B4BC9AF8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (void *)(a1 + 8);
  uint64_t v3 = *(void **)(a1 + 8);
  if (!v3) {
    return v2;
  }
  uint64_t v5 = a1 + 16;
  uint64_t v6 = (void *)(a1 + 8);
  do
  {
    int v7 = sub_1B4BB3D58(v5, (uint64_t)(v3 + 4), a2);
    uint64_t v8 = v3 + 1;
    if (!v7)
    {
      uint64_t v8 = v3;
      uint64_t v6 = v3;
    }
    uint64_t v3 = (void *)*v8;
  }
  while (*v8);
  if (v6 == v2 || sub_1B4BB3D58(v5, a2, (uint64_t)(v6 + 4))) {
    return v2;
  }
  return v6;
}

uint64_t sub_1B4BC9B88(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA488] + 104;
  *(void *)(a1 + 128) = MEMORY[0x1E4FBA488] + 104;
  uint64_t v3 = a1 + 16;
  uint64_t v4 = MEMORY[0x1E4FBA488] + 64;
  *(void *)(a1 + 16) = MEMORY[0x1E4FBA488] + 64;
  uint64_t v5 = (void *)MEMORY[0x1E4FBA408];
  uint64_t v6 = *(void *)(MEMORY[0x1E4FBA408] + 24);
  uint64_t v7 = *(void *)(MEMORY[0x1E4FBA408] + 16);
  *(void *)a1 = v7;
  *(void *)(a1 + *(void *)(v7 - 24)) = v6;
  *(void *)(a1 + 8) = 0;
  uint64_t v8 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v8, (void *)(a1 + 24));
  uint64_t v9 = MEMORY[0x1E4FBA488] + 24;
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  uint64_t v10 = v5[5];
  uint64_t v11 = v5[4];
  *(void *)(a1 + 16) = v11;
  *(void *)(v3 + *(void *)(v11 - 24)) = v10;
  uint64_t v12 = v5[1];
  *(void *)a1 = v12;
  *(void *)(a1 + *(void *)(v12 - 24)) = v5[6];
  *(void *)a1 = v9;
  *(void *)(a1 + 128) = v2;
  *(void *)(a1 + 16) = v4;
  std::streambuf::basic_streambuf();
  *(void *)(a1 + 24) = MEMORY[0x1E4FBA470] + 16;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 12sub_1B4BC92E4(&a9, 0) = 24;
  return a1;
}

void sub_1B4BC9E38(_Unwind_Exception *a1)
{
  std::iostream::~basic_iostream();
  MEMORY[0x1BA992920](v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1B4BC9E60(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA408];
  uint64_t v3 = *MEMORY[0x1E4FBA408];
  *(void *)a1 = *MEMORY[0x1E4FBA408];
  uint64_t v4 = *(void *)(v2 + 72);
  *(void *)(a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 64);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = MEMORY[0x1E4FBA470] + 16;
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1BA992920](a1 + 128);
  return a1;
}

void *sub_1B4BC9F98(void *result, long long *a2)
{
  uint64_t v2 = result;
  uint64_t v3 = result[1];
  if (*((char *)a2 + 23) < 0)
  {
    uint64_t result = sub_1B4BCA11C((unsigned char *)result[1], *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *(void *)(v3 + 16) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v3 = v4;
  }
  v2[1] = v3 + 24;
  return result;
}

void sub_1B4BC9FF0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_1B4BC9FF8(uint64_t *a1, long long *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_1B4BB3244();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v18 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)sub_1B4BB325C(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = &v10[24 * v4];
  v15[0] = v10;
  v15[1] = v11;
  uint64_t v16 = v11;
  BOOL v17 = &v10[24 * v9];
  if (*((char *)a2 + 23) < 0)
  {
    sub_1B4BCA11C(v11, *(void **)a2, *((void *)a2 + 1));
    uint64_t v11 = v16;
  }
  else
  {
    long long v12 = *a2;
    *((void *)v11 + 2) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v11 = v12;
  }
  uint64_t v16 = v11 + 24;
  sub_1B4BC9618(a1, v15);
  uint64_t v13 = a1[1];
  sub_1B4BC97B0((uint64_t)v15);
  return v13;
}

void sub_1B4BCA108(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1B4BC97B0((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_1B4BCA11C(unsigned char *__dst, void *__src, unint64_t a3)
{
  unint64_t v5 = __dst;
  if (a3 > 0x16)
  {
    if (a3 >= 0x7FFFFFFFFFFFFFF8) {
      sub_1B4BB33D8();
    }
    uint64_t v6 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17) {
      uint64_t v6 = a3 | 7;
    }
    uint64_t v7 = v6 + 1;
    unint64_t v8 = operator new(v6 + 1);
    v5[1] = a3;
    v5[2] = v7 | 0x8000000000000000;
    void *v5 = v8;
    unint64_t v5 = v8;
  }
  else
  {
    __dst[23] = a3;
  }
  return memmove(v5, __src, a3 + 1);
}

char *sub_1B4BCA1BC(uint64_t a1, long long **a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  *(void *)uint64_t v3 = 0;
  *(void *)(v3 + 8) = 0;
  *(void *)(v3 + 16) = 0;
  uint64_t result = sub_1B4BCA340((char *)v3, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  *(void *)(a1 + 8) = v3 + 24;
  return result;
}

void sub_1B4BCA214(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_1B4BCA21C(uint64_t *a1, long long **a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_1B4BB3244();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  BOOL v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)sub_1B4BB325C(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  long long v15 = v11;
  uint64_t v16 = &v10[24 * v9];
  *(void *)uint64_t v11 = 0;
  *((void *)v11 + 1) = 0;
  *((void *)v11 + 2) = 0;
  sub_1B4BCA340(v11, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  v15 += 24;
  sub_1B4BCA508(a1, v14);
  uint64_t v12 = a1[1];
  sub_1B4BCA6A8(v14);
  return v12;
}

void sub_1B4BCA32C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1B4BCA6A8((void **)va);
  _Unwind_Resume(a1);
}

char *sub_1B4BCA340(char *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    sub_1B4BB31F0(result, a4);
    uint64_t result = sub_1B4BCA3C8((uint64_t)(v6 + 16), a2, a3, *((char **)v6 + 1));
    *((void *)v6 + 1) = result;
  }
  return result;
}

void sub_1B4BCA3A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_1B4BC89A4(&a9);
  _Unwind_Resume(a1);
}

char *sub_1B4BCA3C8(uint64_t a1, long long *a2, long long *a3, char *__dst)
{
  unint64_t v4 = __dst;
  uint64_t v11 = __dst;
  uint64_t v12 = __dst;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        sub_1B4BCA11C(v4, *(void **)v6, *((void *)v6 + 1));
        unint64_t v4 = v12;
      }
      else
      {
        long long v7 = *v6;
        *((void *)v4 + 2) = *((void *)v6 + 2);
        *(_OWORD *)unint64_t v4 = v7;
      }
      uint64_t v6 = (long long *)((char *)v6 + 24);
      v4 += 24;
      uint64_t v12 = v4;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  sub_1B4BCA488((uint64_t)v9);
  return v4;
}

void sub_1B4BCA474(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1B4BCA488(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_1B4BCA4C0(a1);
  }
  return a1;
}

void sub_1B4BCA4C0(uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 - 1) < 0) {
      operator delete(*(void **)(v1 - 24));
    }
    v1 -= 24;
  }
}

uint64_t sub_1B4BCA508(uint64_t *a1, void *a2)
{
  uint64_t result = sub_1B4BCA580((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1B4BCA580(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  void v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  sub_1B4BCA624((uint64_t)v11);
  return v9;
}

uint64_t sub_1B4BCA624(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_1B4BCA65C(a1);
  }
  return a1;
}

void sub_1B4BCA65C(uint64_t a1)
{
  uint64_t v1 = *(void ***)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void ***)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = v1;
    sub_1B4BC89A4(&v3);
    v1 += 3;
  }
}

void **sub_1B4BCA6A8(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_1B4BCA6DC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    unint64_t v4 = (void **)(i - 24);
    *(void *)(a1 + 16) = v4;
    uint64_t v5 = v4;
    sub_1B4BC89A4(&v5);
  }
}

void *sub_1B4BCA730(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a1 + 8);
  void *v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  uint64_t result = sub_1B4BCA89C(v3, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  *(void *)(a1 + 8) = v3 + 3;
  return result;
}

void sub_1B4BCA77C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_1B4BCA784(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_1B4BB3244();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  BOOL v17 = a1 + 2;
  if (v9) {
    char v10 = (char *)sub_1B4BB325C(v7, v9);
  }
  else {
    char v10 = 0;
  }
  uint64_t v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  long long v15 = v11;
  uint64_t v16 = &v10[24 * v9];
  *(void *)uint64_t v11 = 0;
  *((void *)v11 + 1) = 0;
  *((void *)v11 + 2) = 0;
  sub_1B4BCA89C(v11, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  v15 += 24;
  sub_1B4BCA918(a1, v14);
  uint64_t v12 = a1[1];
  sub_1B4BCAAB4((uint64_t)v14);
  return v12;
}

void sub_1B4BCA888(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1B4BCAAB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_1B4BCA89C(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = sub_1B4BC832C(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1B4BCA8FC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1B4BCA918(uint64_t *a1, void *a2)
{
  uint64_t result = sub_1B4BCA990((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1B4BCA990(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  void v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  sub_1B4BCAA34((uint64_t)v11);
  return v9;
}

uint64_t sub_1B4BCAA34(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_1B4BCAA6C(a1);
  }
  return a1;
}

void sub_1B4BCAA6C(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(void **)v1;
    if (*(void *)v1)
    {
      *(void *)(v1 + 8) = v3;
      operator delete(v3);
    }
    v1 += 24;
  }
}

uint64_t sub_1B4BCAAB4(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_1B4BCAAEC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != a2)
  {
    uint64_t v5 = *(void **)(v2 - 24);
    *(void *)(a1 + 16) = v2 - 24;
    if (v5)
    {
      *(void *)(v2 - 16) = v5;
      operator delete(v5);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 24;
    }
  }
}

uint64_t sub_1B4BCAB48(uint64_t *a1, void *a2)
{
  uint64_t result = sub_1B4BCABF8((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_1B4BCABC0(uint64_t a1, unint64_t a2)
{
  if (a2 >> 59) {
    sub_1B4BB2D38();
  }
  return operator new(32 * a2);
}

uint64_t sub_1B4BCABF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  void v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 32) = 0;
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      long long v8 = *(_OWORD *)(a3 - 32);
      a3 -= 32;
      *(_OWORD *)(v7 - 32) = v8;
      *(void *)(v7 - 16) = *(void *)(a3 + 16);
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      *(void *)a3 = 0;
      *(_DWORD *)(v7 - 8) = *(_DWORD *)(a3 + 24);
      uint64_t v7 = *((void *)&v14 + 1) - 32;
      *((void *)&v14 + 1) -= 32;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  sub_1B4BCACA4((uint64_t)v11);
  return v9;
}

uint64_t sub_1B4BCACA4(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_1B4BCACDC(a1);
  }
  return a1;
}

void sub_1B4BCACDC(uint64_t a1)
{
  uint64_t v1 = *(void ***)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void ***)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = v1;
    sub_1B4BC89A4(&v3);
    v1 += 4;
  }
}

void **sub_1B4BCAD28(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_1B4BCAD5C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    unint64_t v4 = (void **)(i - 32);
    *(void *)(a1 + 16) = v4;
    uint64_t v5 = v4;
    sub_1B4BC89A4(&v5);
  }
}

float sub_1B4BCADB0(uint64_t a1, long long **a2, float *a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)uint64_t v5 = 0;
  *(void *)(v5 + 8) = 0;
  *(void *)(v5 + 16) = 0;
  sub_1B4BCA340((char *)v5, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  float result = *a3;
  *(float *)(v5 + 24) = *a3;
  *(void *)(a1 + 8) = v5 + 32;
  return result;
}

void sub_1B4BCAE1C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_1B4BCAE24(uint64_t *a1, long long **a2, _DWORD *a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = (a1[1] - *a1) >> 5;
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59) {
    sub_1B4BB3244();
  }
  uint64_t v9 = (uint64_t)(a1 + 2);
  uint64_t v10 = a1[2] - v4;
  if (v10 >> 4 > v6) {
    unint64_t v6 = v10 >> 4;
  }
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v11 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v11 = v6;
  }
  std::string::size_type v19 = a1 + 2;
  if (v11) {
    char v12 = (char *)sub_1B4BCABC0(v9, v11);
  }
  else {
    char v12 = 0;
  }
  long long v13 = &v12[32 * v5];
  v16[0] = v12;
  v16[1] = v13;
  BOOL v17 = v13;
  uint64_t v18 = &v12[32 * v11];
  *(void *)long long v13 = 0;
  *((void *)v13 + 1) = 0;
  *((void *)v13 + 2) = 0;
  sub_1B4BCA340(v13, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  *((_DWORD *)v13 + 6) = *a3;
  v17 += 32;
  sub_1B4BCAB48(a1, v16);
  uint64_t v14 = a1[1];
  sub_1B4BCAD28(v16);
  return v14;
}

void sub_1B4BCAF20(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1B4BCAD28((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B4BCAF34(uint64_t *a1, void *a2)
{
  uint64_t result = sub_1B4BCAFAC((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1B4BCAFAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  void v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 32) = 0;
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      long long v8 = *(_OWORD *)(a3 - 32);
      a3 -= 32;
      *(_OWORD *)(v7 - 32) = v8;
      *(void *)(v7 - 16) = *(void *)(a3 + 16);
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      *(void *)a3 = 0;
      *(_DWORD *)(v7 - 8) = *(_DWORD *)(a3 + 24);
      uint64_t v7 = *((void *)&v14 + 1) - 32;
      *((void *)&v14 + 1) -= 32;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  sub_1B4BCB058((uint64_t)v11);
  return v9;
}

uint64_t sub_1B4BCB058(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_1B4BCB090(a1);
  }
  return a1;
}

void sub_1B4BCB090(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(void **)v1;
    if (*(void *)v1)
    {
      *(void *)(v1 + 8) = v3;
      operator delete(v3);
    }
    v1 += 32;
  }
}

uint64_t sub_1B4BCB0D8(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_1B4BCB110(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != a2)
  {
    uint64_t v5 = *(void **)(v2 - 32);
    *(void *)(a1 + 16) = v2 - 32;
    if (v5)
    {
      *(void *)(v2 - 24) = v5;
      operator delete(v5);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 32;
    }
  }
}

float sub_1B4BCB16C(uint64_t a1, uint64_t a2, float *a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)uint64_t v5 = 0;
  *(void *)(v5 + 8) = 0;
  *(void *)(v5 + 16) = 0;
  sub_1B4BCA89C((void *)v5, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  float result = *a3;
  *(float *)(v5 + 24) = *a3;
  *(void *)(a1 + 8) = v5 + 32;
  return result;
}

void sub_1B4BCB1CC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_1B4BCB1D4(uint64_t *a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = (a1[1] - *a1) >> 5;
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59) {
    sub_1B4BB3244();
  }
  uint64_t v9 = (uint64_t)(a1 + 2);
  uint64_t v10 = a1[2] - v4;
  if (v10 >> 4 > v6) {
    unint64_t v6 = v10 >> 4;
  }
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v11 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v11 = v6;
  }
  std::string::size_type v19 = a1 + 2;
  if (v11) {
    char v12 = (char *)sub_1B4BCABC0(v9, v11);
  }
  else {
    char v12 = 0;
  }
  long long v13 = &v12[32 * v5];
  v16[0] = v12;
  v16[1] = v13;
  BOOL v17 = v13;
  uint64_t v18 = &v12[32 * v11];
  *(void *)long long v13 = 0;
  *((void *)v13 + 1) = 0;
  *((void *)v13 + 2) = 0;
  sub_1B4BCA89C(v13, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  *((_DWORD *)v13 + 6) = *a3;
  v17 += 32;
  sub_1B4BCAF34(a1, v16);
  uint64_t v14 = a1[1];
  sub_1B4BCB0D8((uint64_t)v16);
  return v14;
}

void sub_1B4BCB2C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1B4BCB0D8((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_1B4BCB2D8(void *a1, unint64_t a2, _DWORD *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_1B4BC832C(a1, a2);
    unint64_t v6 = (_DWORD *)a1[1];
    uint64_t v7 = &v6[a2];
    uint64_t v8 = 4 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 4;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_1B4BCB340(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1B4BCB35C(uint64_t a1, float *a2, float *a3)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  sub_1B4BCB4C4((char *)a1, a2, a3, a3 - a2);
  sub_1B4BCB3B8((double **)a1);
  return a1;
}

void sub_1B4BCB39C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B4BCB3B8(double **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (*a1 != v2)
  {
    if ((unint64_t)((char *)v2 - (char *)v1) < 9)
    {
      a1[1] = v1;
      sub_1B4BCB580((uint64_t)a1);
    }
    else
    {
      uint64_t v4 = v2 - v1;
      double v5 = 0.0;
      unint64_t v6 = *a1;
      do
      {
        double v7 = *v6++;
        double v5 = v5 + v7;
      }
      while (v6 != v2);
      while (v1 < v2)
      {
        *uint64_t v1 = *v1 / v5;
        ++v1;
      }
      sub_1B4BCB648(&v16, v4 - 1);
      uint64_t v8 = *a1;
      uint64_t v9 = (uint64_t)(a1[1] - 1);
      uint64_t v10 = v16;
      if (*a1 != (double *)v9)
      {
        unint64_t v11 = v8 + 1;
        double v12 = *v8;
        *uint64_t v16 = *v8;
        if (v8 + 1 != (double *)v9)
        {
          long long v13 = v10 + 1;
          do
          {
            double v14 = *v11++;
            double v12 = v12 + v14;
            *v13++ = v12;
          }
          while (v11 != (double *)v9);
        }
      }
      *a1 = v10;
      long long v15 = a1[2];
      *(_OWORD *)(a1 + 1) = v17;
      uint64_t v16 = v8;
      *((void *)&v17 + 1) = v15;
      if (v8)
      {
        *(void *)&long long v17 = v8;
        operator delete(v8);
      }
    }
  }
}

char *sub_1B4BCB4C4(char *result, float *a2, float *a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    float result = sub_1B4BCB53C(result, a4);
    double v7 = (double *)*((void *)v6 + 1);
    while (a2 != a3)
    {
      float v8 = *a2++;
      *v7++ = v8;
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_1B4BCB520(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_1B4BCB53C(void *a1, unint64_t a2)
{
  if (a2 >> 61) {
    sub_1B4BB3244();
  }
  float result = (char *)sub_1B4BB3A38((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

void sub_1B4BCB580(uint64_t a1)
{
  uint64_t v2 = a1 + 16;
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(char **)a1;
  double v5 = *(unsigned char **)(a1 + 8);
  unint64_t v6 = (v5 - v4) >> 3;
  if (v6 >= (v3 - (uint64_t)v4) >> 3) {
    return;
  }
  if (v5 == v4)
  {
    unint64_t v11 = 0;
    uint64_t v9 = 8 * v6;
    goto LABEL_8;
  }
  double v7 = (char *)sub_1B4BB3A38(v2, v6);
  uint64_t v4 = *(char **)a1;
  float v8 = *(char **)(a1 + 8);
  uint64_t v9 = (uint64_t)&v7[8 * v6];
  unint64_t v11 = &v7[8 * v10];
  if (v8 == *(char **)a1)
  {
LABEL_8:
    uint64_t v12 = v9;
    goto LABEL_9;
  }
  uint64_t v12 = v9;
  do
  {
    uint64_t v13 = *((void *)v8 - 1);
    v8 -= 8;
    *(void *)(v12 - 8) = v13;
    v12 -= 8;
  }
  while (v8 != v4);
LABEL_9:
  *(void *)a1 = v12;
  *(void *)(a1 + 8) = v9;
  *(void *)(a1 + 16) = v11;
  if (v4)
  {
    operator delete(v4);
  }
}

void *sub_1B4BCB648(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_1B4BCB53C(a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_1B4BCB6A4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_1B4BCB6C0(uint64_t a1, uint64_t a2, double **a3)
{
  double v5 = *a3;
  unint64_t v6 = a3[1];
  unsigned int v7 = sub_1B4BCB778(a2);
  unsigned int v8 = sub_1B4BCB778(a2);
  if (v6 != v5)
  {
    unint64_t v9 = v6 - v5;
    do
    {
      unint64_t v10 = v9 >> 1;
      unint64_t v11 = &v5[v9 >> 1];
      double v13 = *v11;
      uint64_t v12 = v11 + 1;
      v9 += ~(v9 >> 1);
      if (((double)v7 + (double)v8 * 4294967300.0) * 5.42101086e-20 + 0.0 < v13) {
        unint64_t v9 = v10;
      }
      else {
        double v5 = v12;
      }
    }
    while (v9);
    unint64_t v6 = v5;
  }
  return (unint64_t)((char *)v6 - (char *)*a3) >> 3;
}

uint64_t sub_1B4BCB778(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 2496);
  unint64_t v2 = (v1 + 1) % 0x270uLL;
  unsigned int v3 = *(_DWORD *)(a1 + 4 * ((v1 + 397) % 0x270uLL)) ^ ((*(_DWORD *)(a1 + 4 * v2) & 0x7FFFFFFE | *(_DWORD *)(a1 + 4 * v1) & 0x80000000) >> 1) ^ ((int)(*(_DWORD *)(a1 + 4 * v2) << 31) >> 31) & 0x9908B0DF;
  *(_DWORD *)(a1 + 4 * v1) = v3;
  *(void *)(a1 + 2496) = v2;
  LODWORD(v1) = ((v3 ^ (v3 >> 11)) << 7) & 0x9D2C5680 ^ v3 ^ (v3 >> 11);
  return (v1 << 15) & 0xEFC60000 ^ v1 ^ (((v1 << 15) & 0xEFC60000 ^ v1) >> 18);
}

uint64_t sub_1B4BCB818()
{
  sub_1B4BB2204((uint64_t)v1);
  std::ostream::operator<<();
  std::stringbuf::str();
  v1[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v1 + *(void *)(v1[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v1[1] = MEMORY[0x1E4FBA470] + 16;
  if (v2 < 0) {
    operator delete((void *)v1[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1BA992920](&v3);
}

void sub_1B4BCB94C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1B4BC8450((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B4BCB960(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_1B4BB3244();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0x5555555555555556 * ((a1[2] - *a1) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) >= 0x555555555555555) {
    unint64_t v6 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v6 = v4;
  }
  double v14 = a1 + 2;
  if (v6) {
    unsigned int v7 = (char *)sub_1B4BB325C((uint64_t)(a1 + 2), v6);
  }
  else {
    unsigned int v7 = 0;
  }
  unint64_t v10 = v7;
  unint64_t v11 = &v7[24 * v3];
  double v13 = &v7[24 * v6];
  sub_1B4BCBA70(a1 + 16, v11, a2);
  uint64_t v12 = v11 + 24;
  sub_1B4BC9618(a1, &v10);
  uint64_t v8 = a1[1];
  sub_1B4BC97B0((uint64_t)&v10);
  return v8;
}

void sub_1B4BCBA5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1B4BC97B0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1B4BCBA70(int a1, unsigned char *__dst, uint64_t a3)
{
  unint64_t v3 = __dst;
  size_t v4 = *(void *)(a3 + 8);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    sub_1B4BB33D8();
  }
  double v5 = *(const void **)a3;
  if (v4 >= 0x17)
  {
    uint64_t v6 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v6 = v4 | 7;
    }
    uint64_t v7 = v6 + 1;
    uint64_t v8 = operator new(v6 + 1);
    v3[1] = v4;
    v3[2] = v7 | 0x8000000000000000;
    void *v3 = v8;
    unint64_t v3 = v8;
  }
  else
  {
    __dst[23] = v4;
    if (!v4) {
      goto LABEL_9;
    }
  }
  memmove(v3, v5, v4);
LABEL_9:
  *((unsigned char *)v3 + v4) = 0;
}

uint64_t sub_1B4BCBB0C(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    uint64_t v2 = *(void *)(a1 + 8);
    unint64_t v3 = (void *)(v2 & 0xFFFFFFFFFFFFFFFELL);
    if (v2) {
      unint64_t v3 = (void *)*v3;
    }
    uint64_t v4 = *(void *)(a2 + 8);
    double v5 = (void *)(v4 & 0xFFFFFFFFFFFFFFFELL);
    if (v4) {
      double v5 = (void *)*v5;
    }
    if (v3 == v5) {
      return (uint64_t)sub_1B4BD5430(a1, a2);
    }
    else {
      return sub_1B4BF1BB8(a1, a2);
    }
  }
  return a1;
}

uint64_t sub_1B4BCBB50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (void *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v6 = 24 * a3;
    do
    {
      sub_1B4BCBBD4((uint64_t **)a1, v4, a2, a2);
      a2 += 24;
      v6 -= 24;
    }
    while (v6);
  }
  return a1;
}

void sub_1B4BCBBBC(_Unwind_Exception *a1)
{
  sub_1B4BB38C8(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

_OWORD *sub_1B4BCBBD4(uint64_t **a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = sub_1B4BC994C(a1, a2, &v11, &v10, a3);
  uint64_t v7 = (_OWORD *)*v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    uint64_t v7 = operator new(0x38uLL);
    v7[2] = *(_OWORD *)a4;
    *((void *)v7 + 6) = *(void *)(a4 + 16);
    sub_1B4BB3D00(a1, v11, v8, (uint64_t *)v7);
  }
  return v7;
}

void sub_1B4BCBC68(void *a1)
{
  sub_1B4BCBCA0(a1);
  JUMPOUT(0x1BA9929C0);
}

void *sub_1B4BCBCA0(void *a1)
{
  *a1 = &unk_1F0D54AC0;
  sub_1B4BCBCE8((uint64_t)a1);
  return a1;
}

void *sub_1B4BCBCE8(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 24);
  if ((v2 & 0x80000000) == 0)
  {
    close(v2);
    *(_DWORD *)(a1 + 24) = -1;
  }
  float result = *(void **)(a1 + 8);
  if (result) {
    float result = (void *)munmap(result, *(void *)(a1 + 16));
  }
  *(void *)(a1 + 8) = 0;
  return result;
}

double sub_1B4BCBD30@<D0>(const std::__fs::filesystem::path *a1@<X0>, uint64_t a2@<X8>)
{
  std::__fs::filesystem::path::__string_view v3 = std::__fs::filesystem::path::__parent_path(a1);
  if (v3.__size_ >= 0x7FFFFFFFFFFFFFF8) {
    sub_1B4BB33D8();
  }
  if (v3.__size_ >= 0x17)
  {
    std::basic_string_view<_CharT, _Traits>::size_type v5 = (v3.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3.__size_ | 7) != 0x17) {
      std::basic_string_view<_CharT, _Traits>::size_type v5 = v3.__size_ | 7;
    }
    std::basic_string_view<_CharT, _Traits>::size_type v6 = v5 + 1;
    p_dst = (long long *)operator new(v5 + 1);
    *((void *)&__dst + 1) = v3.__size_;
    unint64_t v9 = v6 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
  }
  else
  {
    HIBYTE(v9) = v3.__size_;
    p_dst = &__dst;
    if (!v3.__size_) {
      goto LABEL_9;
    }
  }
  memmove(p_dst, v3.__data_, v3.__size_);
LABEL_9:
  *((unsigned char *)p_dst + v3.__size_) = 0;
  double result = *(double *)&__dst;
  *(_OWORD *)a2 = __dst;
  *(void *)(a2 + 16) = v9;
  return result;
}

double sub_1B4BCBDF4@<D0>(const std::__fs::filesystem::path *a1@<X0>, uint64_t a2@<X8>)
{
  std::__fs::filesystem::path::__string_view v3 = std::__fs::filesystem::path::__filename(a1);
  if (v3.__size_ >= 0x7FFFFFFFFFFFFFF8) {
    sub_1B4BB33D8();
  }
  if (v3.__size_ >= 0x17)
  {
    std::basic_string_view<_CharT, _Traits>::size_type v5 = (v3.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3.__size_ | 7) != 0x17) {
      std::basic_string_view<_CharT, _Traits>::size_type v5 = v3.__size_ | 7;
    }
    std::basic_string_view<_CharT, _Traits>::size_type v6 = v5 + 1;
    p_dst = (long long *)operator new(v5 + 1);
    *((void *)&__dst + 1) = v3.__size_;
    unint64_t v9 = v6 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
  }
  else
  {
    HIBYTE(v9) = v3.__size_;
    p_dst = &__dst;
    if (!v3.__size_) {
      goto LABEL_9;
    }
  }
  memmove(p_dst, v3.__data_, v3.__size_);
LABEL_9:
  *((unsigned char *)p_dst + v3.__size_) = 0;
  double result = *(double *)&__dst;
  *(_OWORD *)a2 = __dst;
  *(void *)(a2 + 16) = v9;
  return result;
}

void *sub_1B4BCBEB8(void *a1, unsigned char *a2, unsigned char *a3, unsigned __int8 __c, unsigned __int8 a5)
{
  memset(&v15, 0, sizeof(v15));
  std::string::push_back(&v15, __c);
  while (a2 != a3)
  {
    int v10 = *a2;
    if (v10 == a5 || v10 == __c)
    {
      std::string::push_back(&v15, a5);
      LOBYTE(v1sub_1B4BC92E4(&a9, 0) = *a2;
    }
    std::string::push_back(&v15, v10);
    ++a2;
  }
  std::string::push_back(&v15, __c);
  if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v11 = &v15;
  }
  else {
    uint64_t v11 = (std::string *)v15.__r_.__value_.__r.__words[0];
  }
  if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v15.__r_.__value_.__l.__size_;
  }
  double v13 = sub_1B4BB34F0(a1, (uint64_t)v11, size);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v15.__r_.__value_.__l.__data_);
  }
  return v13;
}

void sub_1B4BCBF9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_1B4BCBFBC(std::string *this, char **a2)
{
  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  std::__fs::filesystem::path::__string_view v3 = *a2;
  uint64_t v4 = v3 - 1;
  while (*++v4)
    ;
  sub_1B4BCC01C(this, v3, v4);
  return this;
}

void sub_1B4BCC000(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_1B4BCC01C(std::string *this, char *a2, char *a3)
{
  uint64_t v4 = a2;
  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  unint64_t v7 = a3 - a2;
  if ((v6 & 0x80000000) != 0)
  {
    if (a3 == a2) {
      return this;
    }
    std::string::size_type size = this->__r_.__value_.__l.__size_;
    unint64_t v11 = this->__r_.__value_.__r.__words[2];
    std::string::size_type v9 = (v11 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    int v10 = (std::string *)this->__r_.__value_.__r.__words[0];
    unint64_t v6 = HIBYTE(v11);
  }
  else
  {
    if (a3 == a2) {
      return this;
    }
    std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    std::string::size_type v9 = 22;
    int v10 = this;
  }
  if (v10 > (std::string *)v4 || (char *)&v10->__r_.__value_.__l.__data_ + size + 1 <= v4)
  {
    if (v9 - size < v7)
    {
      std::string::__grow_by(this, v9, size - v9 + v7, size, size, 0, 0);
      this->__r_.__value_.__l.__size_ = size;
      LOBYTE(v6) = *((unsigned char *)&this->__r_.__value_.__s + 23);
    }
    double v14 = this;
    if ((v6 & 0x80) != 0) {
      double v14 = (std::string *)this->__r_.__value_.__r.__words[0];
    }
    for (uint64_t i = (char *)v14 + size; v4 != a3; ++i)
    {
      char v16 = *v4++;
      unsigned char *i = v16;
    }
    unsigned char *i = 0;
    std::string::size_type v17 = v7 + size;
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
      this->__r_.__value_.__l.__size_ = v17;
    }
    else {
      *((unsigned char *)&this->__r_.__value_.__s + 23) = v17 & 0x7F;
    }
  }
  else
  {
    sub_1B4BCC194(__p, v4, a3, v7);
    if ((v20 & 0x80u) == 0) {
      uint64_t v12 = __p;
    }
    else {
      uint64_t v12 = (void **)__p[0];
    }
    if ((v20 & 0x80u) == 0) {
      std::string::size_type v13 = v20;
    }
    else {
      std::string::size_type v13 = (std::string::size_type)__p[1];
    }
    std::string::append(this, (const std::string::value_type *)v12, v13);
    if ((char)v20 < 0) {
      operator delete(__p[0]);
    }
  }
  return this;
}

void sub_1B4BCC178(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1B4BCC194(void *result, char *a2, char *a3, unint64_t a4)
{
  uint64_t v4 = result;
  if (a4 >= 0x7FFFFFFFFFFFFFF8) {
    sub_1B4BB33D8();
  }
  if (a4 > 0x16)
  {
    uint64_t v8 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a4 | 7) != 0x17) {
      uint64_t v8 = a4 | 7;
    }
    uint64_t v9 = v8 + 1;
    double result = operator new(v8 + 1);
    v4[1] = a4;
    v4[2] = v9 | 0x8000000000000000;
    void *v4 = result;
    uint64_t v4 = result;
  }
  else
  {
    *((unsigned char *)result + 23) = a4;
  }
  while (a2 != a3)
  {
    char v10 = *a2++;
    *(unsigned char *)uint64_t v4 = v10;
    uint64_t v4 = (void *)((char *)v4 + 1);
  }
  *(unsigned char *)uint64_t v4 = 0;
  return result;
}

void sub_1B4BCC23C()
{
}

uint64_t sub_1B4BCC268(uint64_t a1)
{
  *(void *)a1 = &unk_1F0D54D20;
  sub_1B4BD2F30((void *)(a1 + 96));
  uint64_t v4 = (void **)(a1 + 72);
  sub_1B4BC8E18(&v4);
  uint64_t v4 = (void **)(a1 + 48);
  sub_1B4BC8E18(&v4);
  int v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_1B4BCC2EC(uint64_t a1)
{
  sub_1B4BCC268(a1);
  JUMPOUT(0x1BA9929C0);
}

uint64_t sub_1B4BCC324(void *a1)
{
  uint64_t v2 = a1[5];
  unint64_t v3 = a1[6];
  unint64_t v4 = a1[4];
  if (v4 >= v3)
  {
    unint64_t v4 = 0;
    ++v2;
    a1[4] = 0;
    a1[5] = v2;
  }
  uint64_t v5 = a1[1];
  if (v2 == (a1[2] - v5) >> 3)
  {
    is_mul_ok(v3, 0x30uLL);
    operator new[]();
  }
  uint64_t result = *(void *)(v5 + 8 * v2) + 48 * v4;
  a1[4] = v4 + 1;
  return result;
}

void sub_1B4BCC4A8(void *a1)
{
  sub_1B4BC8E6C(a1 + 6);
  sub_1B4BC8E6C(a1 + 9);
  a1[1] = "";
  a1[2] = 0;
  a1[4] = a1[3];
  sub_1B4BCC500((uint64_t)(a1 + 12));
}

void sub_1B4BCC500(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 40);
  if (v2 + 1 < (int)((*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 3)) {
    int v3 = v2 + 1;
  }
  else {
    int v3 = (*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 3;
  }
  if (v3 >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = 8 * v3;
    do
    {
      bzero(*(void **)(*(void *)(a1 + 8) + v4), 48 * *(void *)(a1 + 48));
      v4 += 8;
    }
    while (v5 != v4);
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 4sub_1B4BC92E4(&a9, 0) = 0;
}

void sub_1B4BCC57C(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  sub_1B4BCC4A8((void *)a1);
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = a3;
  unint64_t v6 = (char **)(a1 + 24);
  sub_1B4BB8B2C((void **)(a1 + 24), a3 + 1);
  if (a3)
  {
    unint64_t v7 = (void *)(a1 + 40);
    uint64_t v8 = *(void **)(a1 + 32);
    do
    {
      if ((int)a3 >= asc_1B4C934DB[(unint64_t)*a2 >> 4]) {
        int v9 = asc_1B4C934DB[(unint64_t)*a2 >> 4];
      }
      else {
        int v9 = a3;
      }
      if ((unint64_t)v8 >= *v7)
      {
        uint64_t v10 = ((char *)v8 - *v6) >> 3;
        if ((unint64_t)(v10 + 1) >> 61) {
          goto LABEL_76;
        }
        uint64_t v11 = *v7 - (void)*v6;
        uint64_t v12 = v11 >> 2;
        if (v11 >> 2 <= (unint64_t)(v10 + 1)) {
          uint64_t v12 = v10 + 1;
        }
        if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v13 = v12;
        }
        if (v13) {
          double v14 = (char *)sub_1B4BB3A38(a1 + 40, v13);
        }
        else {
          double v14 = 0;
        }
        std::string v15 = &v14[8 * v10];
        *(void *)std::string v15 = a2;
        uint64_t v8 = v15 + 8;
        std::string::size_type v17 = *(char **)(a1 + 24);
        char v16 = *(char **)(a1 + 32);
        if (v16 != v17)
        {
          do
          {
            uint64_t v18 = *((void *)v16 - 1);
            v16 -= 8;
            *((void *)v15 - 1) = v18;
            v15 -= 8;
          }
          while (v16 != v17);
          char v16 = *v6;
        }
        *(void *)(a1 + 24) = v15;
        *(void *)(a1 + 32) = v8;
        *(void *)(a1 + 4sub_1B4BC92E4(&a9, 0) = &v14[8 * v13];
        if (v16) {
          operator delete(v16);
        }
      }
      else
      {
        *v8++ = a2;
      }
      *(void *)(a1 + 32) = v8;
      a2 += v9;
      a3 -= v9;
    }
    while (a3);
  }
  else
  {
    uint64_t v8 = *(void **)(a1 + 32);
  }
  unint64_t v19 = *(void *)(a1 + 40);
  if ((unint64_t)v8 >= v19)
  {
    uint64_t v21 = ((char *)v8 - *v6) >> 3;
    if ((unint64_t)(v21 + 1) >> 61) {
LABEL_76:
    }
      sub_1B4BB3244();
    uint64_t v22 = v19 - (void)*v6;
    uint64_t v23 = v22 >> 2;
    if (v22 >> 2 <= (unint64_t)(v21 + 1)) {
      uint64_t v23 = v21 + 1;
    }
    if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v24 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v24 = v23;
    }
    if (v24) {
      uint64_t v25 = (char *)sub_1B4BB3A38(a1 + 40, v24);
    }
    else {
      uint64_t v25 = 0;
    }
    uint64_t v26 = &v25[8 * v21];
    uint64_t v27 = &v25[8 * v24];
    *(void *)uint64_t v26 = a2;
    unsigned __int8 v20 = v26 + 8;
    int v29 = *(char **)(a1 + 24);
    unint64_t v28 = *(char **)(a1 + 32);
    if (v28 != v29)
    {
      do
      {
        uint64_t v30 = *((void *)v28 - 1);
        v28 -= 8;
        *((void *)v26 - 1) = v30;
        v26 -= 8;
      }
      while (v28 != v29);
      unint64_t v28 = *v6;
    }
    *(void *)(a1 + 24) = v26;
    *(void *)(a1 + 32) = v20;
    *(void *)(a1 + 4sub_1B4BC92E4(&a9, 0) = v27;
    if (v28) {
      operator delete(v28);
    }
  }
  else
  {
    void *v8 = a2;
    unsigned __int8 v20 = v8 + 1;
  }
  *(void *)(a1 + 32) = v20;
  int v31 = (((unint64_t)v20 - *(void *)(a1 + 24)) >> 3) - 1;
  unsigned int v32 = v31 & ~(v31 >> 31);
  sub_1B4BCC9BC((uint64_t *)(a1 + 48), v32 + 1);
  sub_1B4BCC9BC((uint64_t *)(a1 + 72), v32 + 1);
  uint64_t v33 = 0;
  do
  {
    sub_1B4BB8B2C((void **)(*(void *)(a1 + 48) + v33), 0x10uLL);
    sub_1B4BB8B2C((void **)(*(void *)(a1 + 72) + v33), 0x10uLL);
    v33 += 24;
  }
  while (24 * v32 + 24 != v33);
  BOOL v34 = (_DWORD *)sub_1B4BCC324((void *)(a1 + 96));
  v34[6] = *(_DWORD *)(a1 + 128) + *(_DWORD *)(a1 + 136) * *(_DWORD *)(a1 + 144) - 1;
  v34[7] = -1;
  v34[4] = 0;
  unint64_t v35 = *(void ***)(a1 + 72);
  uint64_t v36 = v35[1];
  unint64_t v37 = (unint64_t)v35[2];
  if ((unint64_t)v36 >= v37)
  {
    uint64_t v39 = ((char *)v36 - (unsigned char *)*v35) >> 3;
    if ((unint64_t)(v39 + 1) >> 61) {
      sub_1B4BB3244();
    }
    uint64_t v40 = v37 - (void)*v35;
    uint64_t v41 = v40 >> 2;
    if (v40 >> 2 <= (unint64_t)(v39 + 1)) {
      uint64_t v41 = v39 + 1;
    }
    if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v42 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v42 = v41;
    }
    if (v42) {
      BOOL v43 = (char *)sub_1B4BB3A38((uint64_t)(v35 + 2), v42);
    }
    else {
      BOOL v43 = 0;
    }
    uint64_t v44 = &v43[8 * v39];
    uint64_t v45 = &v43[8 * v42];
    *(void *)uint64_t v44 = v34;
    uint64_t v38 = v44 + 8;
    size_t v47 = (char *)*v35;
    uint64_t v46 = (char *)v35[1];
    if (v46 != *v35)
    {
      do
      {
        uint64_t v48 = *((void *)v46 - 1);
        v46 -= 8;
        *((void *)v44 - 1) = v48;
        v44 -= 8;
      }
      while (v46 != v47);
      uint64_t v46 = (char *)*v35;
    }
    unsigned __int8 *v35 = v44;
    v35[1] = v38;
    v35[2] = v45;
    if (v46) {
      operator delete(v46);
    }
  }
  else
  {
    *uint64_t v36 = v34;
    uint64_t v38 = v36 + 1;
  }
  v35[1] = v38;
  BOOL v49 = (_DWORD *)sub_1B4BCC324((void *)(a1 + 96));
  uint64_t v50 = v49;
  v49[6] = *(_DWORD *)(a1 + 128) + *(_DWORD *)(a1 + 136) * *(_DWORD *)(a1 + 144) - 1;
  v49[7] = -1;
  v49[4] = v32;
  uint64_t v51 = (void **)(*(void *)(a1 + 48) + 24 * v32);
  uint64_t v52 = v51 + 1;
  size_t v53 = v51[1];
  unint64_t v54 = (unint64_t)v51[2];
  if ((unint64_t)v53 >= v54)
  {
    uint64_t v56 = ((char *)v53 - (unsigned char *)*v51) >> 3;
    if ((unint64_t)(v56 + 1) >> 61) {
      sub_1B4BB3244();
    }
    uint64_t v57 = v54 - (void)*v51;
    uint64_t v58 = v57 >> 2;
    if (v57 >> 2 <= (unint64_t)(v56 + 1)) {
      uint64_t v58 = v56 + 1;
    }
    if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v59 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v59 = v58;
    }
    if (v59) {
      uint64_t v60 = (char *)sub_1B4BB3A38((uint64_t)(v51 + 2), v59);
    }
    else {
      uint64_t v60 = 0;
    }
    uint64_t v61 = &v60[8 * v56];
    long long v62 = &v60[8 * v59];
    *(void *)uint64_t v61 = v50;
    int v55 = v61 + 8;
    uint64_t v63 = (char *)*v52;
    BOOL v64 = (char *)*v51;
    if (*v52 != *v51)
    {
      do
      {
        uint64_t v65 = *((void *)v63 - 1);
        v63 -= 8;
        *((void *)v61 - 1) = v65;
        v61 -= 8;
      }
      while (v63 != v64);
      uint64_t v63 = (char *)*v51;
    }
    void *v51 = v61;
    *uint64_t v52 = v55;
    v51[2] = v62;
    if (v63) {
      operator delete(v63);
    }
  }
  else
  {
    *size_t v53 = v49;
    int v55 = v53 + 1;
  }
  *uint64_t v52 = v55;
}

void sub_1B4BCC9BC(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    sub_1B4BD2FC0(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 24 * a2;
    if (v3 != v7)
    {
      uint64_t v8 = a1[1];
      do
      {
        uint64_t v10 = *(void **)(v8 - 24);
        v8 -= 24;
        int v9 = v10;
        if (v10)
        {
          *(void *)(v3 - 16) = v9;
          operator delete(v9);
        }
        uint64_t v3 = v8;
      }
      while (v8 != v7);
    }
    a1[1] = v7;
  }
}

uint64_t sub_1B4BCCA64(uint64_t a1, int a2, int a3)
{
  uint64_t v6 = sub_1B4BCC324((void *)(a1 + 96));
  uint64_t v7 = v6;
  int v8 = *(_DWORD *)(a1 + 128) + *(_DWORD *)(a1 + 136) * *(_DWORD *)(a1 + 144) - 1;
  *(_DWORD *)(v6 + 2sub_1B4BC92E4(&a9, 0) = a3;
  *(_DWORD *)(v6 + 24) = v8;
  *(_DWORD *)(v6 + 16) = a2;
  uint64_t v9 = *(void *)(a1 + 24);
  uint64_t v10 = *(void *)(v9 + 8 * (a3 + a2));
  uint64_t v11 = *(void *)(v9 + 8 * a2);
  *(void *)uint64_t v6 = v11;
  *(void *)(v6 + 8) = (int)v10 - (int)v11;
  uint64_t v12 = (uint64_t **)(*(void *)(a1 + 48) + 24 * a2);
  unint64_t v13 = (void **)(v12 + 1);
  double v14 = v12[1];
  char v16 = (char **)(v12 + 2);
  unint64_t v15 = (unint64_t)v12[2];
  if ((unint64_t)v14 >= v15)
  {
    uint64_t v18 = v14 - *v12;
    if ((unint64_t)(v18 + 1) >> 61) {
      sub_1B4BB3244();
    }
    uint64_t v19 = v15 - (void)*v12;
    uint64_t v20 = v19 >> 2;
    if (v19 >> 2 <= (unint64_t)(v18 + 1)) {
      uint64_t v20 = v18 + 1;
    }
    if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v21 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v21 = v20;
    }
    if (v21) {
      uint64_t v22 = (char *)sub_1B4BB3A38((uint64_t)v16, v21);
    }
    else {
      uint64_t v22 = 0;
    }
    uint64_t v23 = (uint64_t *)&v22[8 * v18];
    unint64_t v24 = &v22[8 * v21];
    uint64_t *v23 = v7;
    std::string::size_type v17 = v23 + 1;
    uint64_t v25 = (char *)*v13;
    uint64_t v26 = (char *)*v12;
    if (*v13 != *v12)
    {
      do
      {
        uint64_t v27 = *((void *)v25 - 1);
        v25 -= 8;
        *--uint64_t v23 = v27;
      }
      while (v25 != v26);
      uint64_t v25 = (char *)*v12;
    }
    *uint64_t v12 = v23;
    void *v13 = v17;
    *char v16 = v24;
    if (v25) {
      operator delete(v25);
    }
  }
  else
  {
    *double v14 = v6;
    std::string::size_type v17 = v14 + 1;
  }
  void *v13 = v17;
  unint64_t v28 = (void **)(*(void *)(a1 + 72) + 24 * (*(_DWORD *)(v7 + 20) + a2));
  int v29 = v28 + 1;
  uint64_t v30 = (uint64_t *)v28[1];
  unint64_t v31 = (unint64_t)v28[2];
  if ((unint64_t)v30 >= v31)
  {
    uint64_t v33 = ((char *)v30 - (unsigned char *)*v28) >> 3;
    if ((unint64_t)(v33 + 1) >> 61) {
      sub_1B4BB3244();
    }
    uint64_t v34 = v31 - (void)*v28;
    uint64_t v35 = v34 >> 2;
    if (v34 >> 2 <= (unint64_t)(v33 + 1)) {
      uint64_t v35 = v33 + 1;
    }
    if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v36 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v36 = v35;
    }
    if (v36) {
      unint64_t v37 = (char *)sub_1B4BB3A38((uint64_t)(v28 + 2), v36);
    }
    else {
      unint64_t v37 = 0;
    }
    uint64_t v38 = (uint64_t *)&v37[8 * v33];
    uint64_t v39 = &v37[8 * v36];
    uint64_t *v38 = v7;
    unsigned int v32 = v38 + 1;
    uint64_t v40 = (char *)*v29;
    uint64_t v41 = (char *)*v28;
    if (*v29 != *v28)
    {
      do
      {
        uint64_t v42 = *((void *)v40 - 1);
        v40 -= 8;
        *--uint64_t v38 = v42;
      }
      while (v40 != v41);
      uint64_t v40 = (char *)*v28;
    }
    *unint64_t v28 = v38;
    *int v29 = v32;
    v28[2] = v39;
    if (v40) {
      operator delete(v40);
    }
  }
  else
  {
    uint64_t *v30 = v7;
    unsigned int v32 = v30 + 1;
  }
  *int v29 = v32;
  return v7;
}

void sub_1B4BCCC8C(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = 0;
  int v4 = ((a1[4] - a1[3]) >> 3) - 1;
  unsigned int v5 = v4 & ~(v4 >> 31);
  uint64_t v6 = a1[6];
  while (1)
  {
    uint64_t v7 = (uint64_t **)(v6 + 24 * v3);
    int v8 = *v7;
    uint64_t v9 = v7[1];
    if (v8 != v9) {
      break;
    }
LABEL_14:
    if (++v3 == v5 + 1)
    {
      std::string __p = 0;
      uint64_t v46 = 0;
      size_t v47 = 0;
      uint64_t v21 = **(void **)(v6 + 24 * v5);
      int v22 = *(_DWORD *)(v21 + 36);
      uint64_t v23 = *(void *)(v21 + 40);
      if (*(void *)(v23 + 40))
      {
        unint64_t v24 = 0;
        do
        {
          if (v24 >= v47)
          {
            uint64_t v25 = (v24 - (unsigned char *)__p) >> 3;
            if ((unint64_t)(v25 + 1) >> 61) {
              sub_1B4BB3244();
            }
            unint64_t v26 = (v47 - (unsigned char *)__p) >> 2;
            if (v26 <= v25 + 1) {
              unint64_t v26 = v25 + 1;
            }
            if ((unint64_t)(v47 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v27 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v27 = v26;
            }
            if (v27) {
              unint64_t v28 = (char *)sub_1B4BB3A38((uint64_t)&v47, v27);
            }
            else {
              unint64_t v28 = 0;
            }
            int v29 = &v28[8 * v25];
            *(void *)int v29 = v23;
            unint64_t v24 = v29 + 8;
            unint64_t v31 = (char *)__p;
            uint64_t v30 = v46;
            if (v46 != __p)
            {
              do
              {
                uint64_t v32 = *((void *)v30 - 1);
                v30 -= 8;
                *((void *)v29 - 1) = v32;
                v29 -= 8;
              }
              while (v30 != v31);
              uint64_t v30 = (char *)__p;
            }
            std::string __p = v29;
            uint64_t v46 = v24;
            size_t v47 = &v28[8 * v27];
            if (v30) {
              operator delete(v30);
            }
          }
          else
          {
            *(void *)unint64_t v24 = v23;
            v24 += 8;
          }
          uint64_t v46 = v24;
          uint64_t v23 = *(void *)(v23 + 40);
        }
        while (*(void *)(v23 + 40));
        uint64_t v33 = __p;
        uint64_t v34 = v24 - 8;
        if (__p != v24 && v34 > __p)
        {
          unint64_t v36 = (char *)__p + 8;
          do
          {
            uint64_t v37 = *((void *)v36 - 1);
            *((void *)v36 - 1) = *(void *)v34;
            *(void *)uint64_t v34 = v37;
            v34 -= 8;
            BOOL v38 = v36 >= v34;
            v36 += 8;
          }
          while (!v38);
          uint64_t v33 = __p;
          unint64_t v24 = v46;
        }
      }
      else
      {
        unint64_t v24 = 0;
        uint64_t v33 = 0;
      }
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      *(void *)(a2 + 16) = 0;
      sub_1B4BD207C((void *)a2, v33, (uint64_t)v24, (v24 - (unsigned char *)v33) >> 3);
      *(_DWORD *)(a2 + 24) = v22;
      if (__p)
      {
        uint64_t v46 = (char *)__p;
        operator delete(__p);
      }
      return;
    }
  }
  uint64_t v10 = (uint64_t **)(a1[9] + 24 * v3);
  uint64_t v11 = *v10;
  uint64_t v12 = v10[1];
  while (1)
  {
    uint64_t v13 = *v8;
    *(void *)(*v8 + 4sub_1B4BC92E4(&a9, 0) = 0;
    if (v11 == v12) {
      break;
    }
    uint64_t v14 = 0;
    float v15 = 0.0;
    char v16 = v11;
    do
    {
      uint64_t v18 = *v16++;
      uint64_t v17 = v18;
      float v19 = *(float *)(v18 + 36) + *(float *)(v13 + 32);
      if (v19 > v15 || v14 == 0)
      {
        float v15 = v19;
        uint64_t v14 = v17;
      }
    }
    while (v16 != v12);
    if (!v14) {
      break;
    }
    *(void *)(v13 + 4sub_1B4BC92E4(&a9, 0) = v14;
    *(float *)(v13 + 36) = v15;
    if (++v8 == v9) {
      goto LABEL_14;
    }
  }
  if ((int)sub_1B4BE1C40() <= 2)
  {
    LOBYTE(__p) = 0;
    uint64_t v39 = sub_1B4BB34F0(MEMORY[0x1E4FBA240], (uint64_t)"unigram_model.cc", 16);
    sub_1B4BB34F0(v39, (uint64_t)"(", 1);
    uint64_t v40 = (void *)std::ostream::operator<<();
    uint64_t v41 = sub_1B4BB34F0(v40, (uint64_t)") ", 2);
    uint64_t v42 = sub_1B4BB34F0(v41, (uint64_t)"LOG(", 4);
    BOOL v43 = sub_1B4BB34F0(v42, (uint64_t)"ERROR", 5);
    uint64_t v44 = sub_1B4BB34F0(v43, (uint64_t)") ", 2);
    sub_1B4BB34F0(v44, (uint64_t)"Failed to find the best path in Viterbi.", 40);
    sub_1B4BB239C(&__p);
  }
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 24) = 0;
  *(void *)(a2 + 16) = 0;
}

void sub_1B4BCCF88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B4BCCFBC(void *a1@<X0>, uint64_t *a2@<X8>, float a3@<S0>)
{
  int v6 = ((a1[4] - a1[3]) >> 3) - 1;
  int v7 = v6 & ~(v6 >> 31);
  unint64_t v8 = a1[16] + a1[17] * a1[18];
  int v29 = 0;
  uint64_t v25 = a2;
  sub_1B4BCB2D8(a2, v8, &v29);
  uint64_t v9 = 0;
  uint64_t v28 = a1[6];
  unint64_t v26 = a1;
  uint64_t v27 = (v7 + 1);
  do
  {
    uint64_t v10 = (uint64_t *)(v28 + 24 * v9);
    uint64_t v11 = *v10;
    uint64_t v12 = v10[1];
    if (*v10 != v12)
    {
      uint64_t v13 = v26[9] + 24 * v9;
      float v15 = *(void **)v13;
      uint64_t v14 = *(void **)(v13 + 8);
      uint64_t v16 = *v25;
      do
      {
        if (v15 != v14)
        {
          uint64_t v17 = *(unsigned int *)(*(void *)v11 + 24);
          uint64_t v18 = *v15;
          float v19 = *(float *)(v16 + 4 * v17);
          uint64_t v20 = v15;
          do
          {
            float v21 = *(float *)(v16 + 4 * *(unsigned int *)(*v20 + 24)) + (float)(a3 * *(float *)(*v20 + 32));
            if (*v20 != v18)
            {
              if (v21 >= v19) {
                float v22 = v19;
              }
              else {
                float v22 = *(float *)(v16 + 4 * *(unsigned int *)(*v20 + 24)) + (float)(a3 * *(float *)(*v20 + 32));
              }
              if (v19 >= v21) {
                float v21 = v19;
              }
              if (v21 <= (float)(v22 + 50.0))
              {
                double v23 = v21;
                long double v24 = exp((float)(v22 - v21));
                float v21 = log(v24 + 1.0) + v23;
              }
            }
            *(float *)(v16 + 4 * v17) = v21;
            ++v20;
            float v19 = v21;
          }
          while (v20 != v14);
        }
        v11 += 8;
      }
      while (v11 != v12);
    }
    ++v9;
  }
  while (v9 != v27);
}

float sub_1B4BCD144(void *a1, float a2)
{
  uint64_t v5 = a1[3];
  uint64_t v4 = a1[4];
  unint64_t v6 = a1[16] + a1[17] * a1[18];
  LODWORD(__p[0]) = 0;
  sub_1B4BCB2D8(v29, v6, __p);
  sub_1B4BCCFBC(a1, (uint64_t *)__p, a2);
  uint64_t v7 = 0;
  uint64_t v27 = a1[6];
  unsigned int v25 = (((unint64_t)(v4 - v5) >> 3) - 1) & ~((int)(((unint64_t)(v4 - v5) >> 3) - 1) >> 31);
  unint64_t v26 = a1;
  do
  {
    unint64_t v8 = (uint64_t *)(v27 + 24 * v7);
    uint64_t v9 = *v8;
    uint64_t v10 = v8[1];
    if (*v8 != v10)
    {
      uint64_t v11 = (uint64_t **)(v26[9] + 24 * v7);
      uint64_t v12 = *v11;
      uint64_t v13 = v11[1];
      uint64_t v14 = (float *)__p[0];
      float v15 = (float *)v29[0];
      do
      {
        if (v12 != v13)
        {
          uint64_t v16 = *(unsigned int *)(*(void *)v9 + 24);
          float v17 = v15[v16];
          uint64_t v18 = v12;
          do
          {
            uint64_t v19 = *v18++;
            uint64_t v20 = *(unsigned int *)(v19 + 24);
            float v21 = (float)(v14[v20] + (float)(a2 * *(float *)(v19 + 32))) - v14[v16];
            float v17 = v17 + (float)(expf(v21) * (float)(v21 + v15[v20]));
            v15[v16] = v17;
          }
          while (v18 != v13);
        }
        v9 += 8;
      }
      while (v9 != v10);
    }
    ++v7;
  }
  while (v7 != v25 + 1);
  float v22 = v29[0];
  float v23 = *((float *)v29[0] + *(unsigned int *)(**(void **)(v27 + 24 * v25) + 24));
  if (!__p[0] || (__p[1] = __p[0], operator delete(__p[0]), (float v22 = v29[0]) != 0))
  {
    v29[1] = v22;
    operator delete(v22);
  }
  return -v23;
}

void sub_1B4BCD2E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B4BCD304(void *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t *a4@<X8>, float a5@<S0>)
{
  uint64_t v175 = *MEMORY[0x1E4F143B8];
  if (a2 == 1)
  {
    if ((a3 & 1) == 0)
    {
      sub_1B4BCCC8C(a1, (uint64_t)&v171);
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      *(void *)v157 = a4;
      v157[8] = 0;
      v145 = operator new(0x20uLL);
      *a4 = (uint64_t)v145;
      a4[1] = (uint64_t)v145;
      a4[2] = (uint64_t)v145 + 32;
      a4[1] = sub_1B4BD327C((uint64_t)(a4 + 2), (uint64_t)&v171, (uint64_t)&v173[1], (uint64_t)v145);
      if (v171)
      {
        *(void *)&long long v172 = v171;
        operator delete(v171);
      }
      return;
    }
  }
  else if (!a2)
  {
    if ((int)sub_1B4BE1C40() <= 1)
    {
      LOBYTE(v171) = 0;
      uint64_t v9 = sub_1B4BB34F0(MEMORY[0x1E4FBA240], (uint64_t)"unigram_model.cc", 16);
      sub_1B4BB34F0(v9, (uint64_t)"(", 1);
      uint64_t v10 = (void *)std::ostream::operator<<();
      uint64_t v11 = sub_1B4BB34F0(v10, (uint64_t)") ", 2);
      uint64_t v12 = sub_1B4BB34F0(v11, (uint64_t)"LOG(", 4);
      uint64_t v13 = sub_1B4BB34F0(v12, (uint64_t)"WARNING", 7);
      uint64_t v14 = sub_1B4BB34F0(v13, (uint64_t)") ", 2);
      sub_1B4BB34F0(v14, (uint64_t)"nbest_size >= 1. Returns empty result.", 38);
      sub_1B4BB239C(&v171);
    }
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    return;
  }
  long long v172 = 0u;
  memset(v173, 0, sizeof(v173));
  v171 = &unk_1F0D54BD0;
  uint64_t v174 = 512;
  long long v168 = 0uLL;
  uint64_t v169 = 0;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  uint64_t v15 = sub_1B4BCE4F0(&v171);
  uint64_t v167 = v15;
  int v16 = ((a1[4] - a1[3]) >> 3) - 1;
  *(void *)uint64_t v15 = **(void **)(a1[6] + 24 * (v16 & ~(v16 >> 31)));
  *(void *)(v15 + 8) = 0;
  *(_DWORD *)(v15 + 2sub_1B4BC92E4(&a9, 0) = 0;
  unint64_t v17 = a1[16] + a1[17] * a1[18];
  *(_DWORD *)v157 = 0;
  sub_1B4BCB2D8(__p, v17, v157);
  if (a3)
  {
    sub_1B4BCCFBC(a1, (uint64_t *)v157, a5);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    *(_OWORD *)std::string __p = *(_OWORD *)v157;
    std::string __p[2] = *(void **)&v157[16];
    uint64_t v18 = sub_1B4BE1D98();
    unsigned int v19 = sub_1B4BCB778(v18);
    float v20 = logf((float)((float)((float)v19 * 2.3283e-10) + 0.0) + 0.0000001);
    float v21 = -logf(-v20);
  }
  else
  {
    sub_1B4BCCC8C(a1, (uint64_t)v165);
    if (v165[0])
    {
      v165[1] = v165[0];
      operator delete(v165[0]);
    }
    float v21 = *(float *)(*(void *)v15 + 36);
  }
  *(float *)(v15 + 16) = v21;
  sub_1B4BCE660((uint64_t *)&v168, &v167);
  int v146 = 0;
  char v147 = 0;
  if (10 * (int)a2 >= 512) {
    int v22 = 512;
  }
  else {
    int v22 = 10 * a2;
  }
  if (v22 <= 1) {
    int v23 = 1;
  }
  else {
    int v23 = v22;
  }
  int v148 = v23;
  while (1)
  {
    long long v24 = v168;
    if ((void)v168 == *((void *)&v168 + 1)) {
      break;
    }
    unsigned int v25 = *(uint64_t **)v168;
    if ((uint64_t)(*((void *)&v168 + 1) - v168) >= 9)
    {
      uint64_t v26 = 0;
      uint64_t v27 = (uint64_t)(*((void *)&v168 + 1) - v168) >> 3;
      uint64_t v28 = (void *)v168;
      do
      {
        int v29 = v28;
        v28 += v26 + 1;
        uint64_t v30 = 2 * v26;
        uint64_t v26 = (2 * v26) | 1;
        uint64_t v31 = v30 + 2;
        if (v31 < v27 && *(float *)(*v28 + 16) < *(float *)(v28[1] + 16))
        {
          ++v28;
          uint64_t v26 = v31;
        }
        *int v29 = *v28;
      }
      while (v26 <= (uint64_t)((unint64_t)(v27 - 2) >> 1));
      if (v28 == (void *)(*((void *)&v24 + 1) - 8))
      {
        *uint64_t v28 = v25;
      }
      else
      {
        *uint64_t v28 = **((void **)&v24 + 1);
        **((void **)&v24 + 1) = v25;
        sub_1B4BD33A8(v24, (uint64_t)(v28 + 1), (uint64_t)((uint64_t)v28 - v24 + 8) >> 3);
      }
    }
    *((void *)&v168 + 1) -= 8;
    uint64_t v32 = *v25;
    uint64_t v33 = (void **)a1[9];
    if (*v25 == **v33)
    {
      sub_1B4BCE774(a4, ((a4[1] - *a4) >> 5) + 1);
      for (uint64_t i = (void *)v25[1]; i[1]; uint64_t i = (void *)i[1])
      {
        uint64_t v35 = a4[1];
        unint64_t v36 = *(void **)(v35 - 24);
        unint64_t v37 = *(void *)(v35 - 16);
        if ((unint64_t)v36 >= v37)
        {
          uint64_t v39 = *(void *)(v35 - 32);
          uint64_t v40 = ((uint64_t)v36 - v39) >> 3;
          if ((unint64_t)(v40 + 1) >> 61) {
            sub_1B4BB3244();
          }
          uint64_t v41 = v37 - v39;
          uint64_t v42 = v41 >> 2;
          if (v41 >> 2 <= (unint64_t)(v40 + 1)) {
            uint64_t v42 = v40 + 1;
          }
          if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v43 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v43 = v42;
          }
          if (v43) {
            uint64_t v44 = (char *)sub_1B4BB3A38(v35 - 16, v43);
          }
          else {
            uint64_t v44 = 0;
          }
          uint64_t v45 = &v44[8 * v40];
          *(void *)uint64_t v45 = *i;
          BOOL v38 = v45 + 8;
          size_t v47 = *(char **)(v35 - 32);
          uint64_t v46 = *(char **)(v35 - 24);
          if (v46 != v47)
          {
            do
            {
              uint64_t v48 = *((void *)v46 - 1);
              v46 -= 8;
              *((void *)v45 - 1) = v48;
              v45 -= 8;
            }
            while (v46 != v47);
            uint64_t v46 = *(char **)(v35 - 32);
          }
          *(void *)(v35 - 32) = v45;
          *(void *)(v35 - 24) = v38;
          *(void *)(v35 - 16) = &v44[8 * v43];
          if (v46) {
            operator delete(v46);
          }
        }
        else
        {
          *unint64_t v36 = *i;
          BOOL v38 = v36 + 1;
        }
        *(void *)(v35 - 24) = v38;
      }
      uint64_t v49 = a4[1];
      *(_DWORD *)(v49 - 8) = *((_DWORD *)v25 + 4);
      if (a2 == (v49 - *a4) >> 5) {
        break;
      }
    }
    else
    {
      unint64_t v50 = (int)(v33[3 * *(int *)(v32 + 16) + 1] - v33[3 * *(int *)(v32 + 16)]);
      *(_DWORD *)v157 = 0;
      sub_1B4BCB2D8(v164, v50, v157);
      *(_DWORD *)v157 = 0;
      sub_1B4BCB2D8(v163, v50, v157);
      *(void *)v157 = 0;
      sub_1B4BD3688(&v161, v50, v157);
      int v51 = *(_DWORD *)(v32 + 16);
      uint64_t v52 = a1[9];
      if (a3)
      {
        uint64_t v53 = *(void *)(v52 + 24 * v51);
        float v54 = -100000000.0;
        if (*(void *)(v52 + 24 * v51 + 8) != v53)
        {
          unint64_t v55 = 0;
          float v56 = *((float *)__p[0] + *(unsigned int *)(v32 + 24));
          float v54 = -100000000.0;
          do
          {
            float v57 = (float)((float)(*((float *)v25 + 5)
                                + *((float *)__p[0] + *(unsigned int *)(*(void *)(v53 + 8 * v55) + 24)))
                        + (float)(a5 * *(float *)(*(void *)(v53 + 8 * v55) + 32)))
                - v56;
            *((float *)v164[0] + v55) = v57;
            uint64_t v58 = sub_1B4BE1D98();
            unsigned int v59 = sub_1B4BCB778(v58);
            float v60 = logf((float)((float)((float)v59 * 2.3283e-10) + 0.0) + 0.0000001);
            float v61 = v57 - logf(-v60);
            *((float *)v163[0] + v55) = v61;
            if (v61 > v54) {
              float v54 = v61;
            }
            ++v55;
            int v62 = *(_DWORD *)(v32 + 16);
            uint64_t v52 = a1[9];
            uint64_t v53 = *(void *)(v52 + 24 * v62);
          }
          while (v55 < (*(void *)(v52 + 24 * v62 + 8) - v53) >> 3);
          int v51 = *(_DWORD *)(v32 + 16);
        }
        uint64_t v63 = (double *)v161;
        if (v162 != v161)
        {
          float v64 = *((float *)v25 + 4);
          uint64_t v65 = (float *)v163[0];
          if ((unint64_t)((v162 - (unsigned char *)v161) >> 3) <= 1) {
            uint64_t v5 = 1;
          }
          else {
            uint64_t v5 = (v162 - (unsigned char *)v161) >> 3;
          }
          do
          {
            float v66 = *v65++;
            float v67 = expf(v66 - v54);
            float v68 = (float)(v64 - v66) + log1pf(-v67);
            float v69 = v64 - fmaxf(v68, 0.0);
            float v70 = expf(-fabsf(v68));
            *v63++ = (float)(v69 - log1pf(v70));
            --v5;
          }
          while (v5);
        }
      }
      uint64_t v71 = *(void *)(v52 + 24 * v51);
      if (*(void *)(v52 + 24 * v51 + 8) != v71)
      {
        unint64_t v72 = 0;
        do
        {
          uint64_t v73 = *(void *)(v71 + 8 * v72);
          uint64_t v74 = sub_1B4BCE4F0(&v171);
          *(void *)v157 = v74;
          *(void *)uint64_t v74 = v73;
          if (a3)
          {
            *(_DWORD *)(v74 + 2sub_1B4BC92E4(&a9, 0) = *((_DWORD *)v164[0] + v72);
            float v75 = *((double *)v161 + v72);
          }
          else
          {
            *(float *)(v74 + 2sub_1B4BC92E4(&a9, 0) = *(float *)(v73 + 32) + *((float *)v25 + 5);
            float v75 = *(float *)(v73 + 36) + *((float *)v25 + 5);
          }
          *(float *)(v74 + 16) = v75;
          *(void *)(v74 + 8) = v25;
          sub_1B4BCE660((uint64_t *)&v168, v157);
          ++v72;
          uint64_t v71 = *(void *)(a1[9] + 24 * *(int *)(v32 + 16));
        }
        while (v72 < (*(void *)(a1[9] + 24 * *(int *)(v32 + 16) + 8) - v71) >> 3);
      }
      if (!(((unint64_t)(v173[1] + v173[2] * v174) < 0x3B9ACA00) | v147 & 1))
      {
        if ((int)sub_1B4BE1C40() <= 1)
        {
          v157[0] = 0;
          uint64_t v76 = sub_1B4BB34F0(MEMORY[0x1E4FBA240], (uint64_t)"unigram_model.cc", 16);
          sub_1B4BB34F0(v76, (uint64_t)"(", 1);
          long long v77 = (void *)std::ostream::operator<<();
          uint64_t v78 = sub_1B4BB34F0(v77, (uint64_t)") ", 2);
          uint64_t v79 = sub_1B4BB34F0(v78, (uint64_t)"LOG(", 4);
          size_t v80 = sub_1B4BB34F0(v79, (uint64_t)"WARNING", 7);
          uint64_t v81 = sub_1B4BB34F0(v80, (uint64_t)") ", 2);
          sub_1B4BB34F0(v81, (uint64_t)"Allocator size exceeds ", 23);
          std::string::size_type v82 = (void *)std::ostream::operator<<();
          sub_1B4BB34F0(v82, (uint64_t)" with an example of length ", 27);
          std::ostream::operator<<();
          sub_1B4BB239C(v157);
        }
        char v147 = 1;
      }
      uint64_t v83 = *((void *)&v168 + 1);
      uint64_t v84 = (void *)v168;
      if (*((void *)&v168 + 1) - (void)v168 >= 0x13879uLL)
      {
        long long v159 = 0uLL;
        uint64_t v160 = 0;
        memset(&v157[8], 0, 40);
        *(void *)v157 = &unk_1F0D54BD0;
        uint64_t v158 = 512;
        *(_OWORD *)v154 = 0u;
        long long v155 = 0u;
        float v156 = 1.0;
        ++v146;
        if ((int)sub_1B4BE1C40() <= 1)
        {
          LOBYTE(v17sub_1B4BC92E4(&a9, 0) = 0;
          unint64_t v85 = sub_1B4BB34F0(MEMORY[0x1E4FBA240], (uint64_t)"unigram_model.cc", 16);
          sub_1B4BB34F0(v85, (uint64_t)"(", 1);
          int v86 = (void *)std::ostream::operator<<();
          v87 = sub_1B4BB34F0(v86, (uint64_t)") ", 2);
          std::string::size_type v88 = sub_1B4BB34F0(v87, (uint64_t)"LOG(", 4);
          v89 = sub_1B4BB34F0(v88, (uint64_t)"WARNING", 7);
          long long v90 = sub_1B4BB34F0(v89, (uint64_t)") ", 2);
          sub_1B4BB34F0(v90, (uint64_t)"Too big agenda size ", 20);
          uint64_t v91 = (void *)std::ostream::operator<<();
          sub_1B4BB34F0(v91, (uint64_t)". Shrinking (round ", 19);
          v92 = (void *)std::ostream::operator<<();
          sub_1B4BB34F0(v92, (uint64_t)") down to ", 10);
          v93 = (void *)std::ostream::operator<<();
          sub_1B4BB34F0(v93, (uint64_t)".", 1);
          sub_1B4BB239C(&v170);
        }
        if (10 * (int)a2 >= 1)
        {
          int v94 = 0;
          while (1)
          {
            v149 = (void *)v168;
            uint64_t v150 = v83;
            unint64_t v95 = *(void *)v168;
            uint64_t v153 = 0;
            uint64_t v170 = 0;
            if (!v95) {
              goto LABEL_181;
            }
            v96 = &v170;
            unint64_t v97 = (unint64_t)v154[1];
            do
            {
              unint64_t v98 = 0x9DDFEA08EB382D69 * (((8 * v95) + 8) ^ HIDWORD(v95));
              unint64_t v99 = 0x9DDFEA08EB382D69 * (HIDWORD(v95) ^ (v98 >> 47) ^ v98);
              unint64_t v100 = 0x9DDFEA08EB382D69 * (v99 ^ (v99 >> 47));
              if (v97)
              {
                uint8x8_t v101 = (uint8x8_t)vcnt_s8((int8x8_t)v97);
                v101.i16[0] = vaddlv_u8(v101);
                if (v101.u32[0] > 1uLL)
                {
                  unint64_t v102 = 0x9DDFEA08EB382D69 * (v99 ^ (v99 >> 47));
                  if (v100 >= v97) {
                    unint64_t v102 = v100 % v97;
                  }
                }
                else
                {
                  unint64_t v102 = v100 & (v97 - 1);
                }
                uint64_t v103 = (void *)*((void *)v154[0] + v102);
                if (v103)
                {
                  for (j = (void *)*v103; j; j = (void *)*j)
                  {
                    unint64_t v105 = j[1];
                    if (v105 == v100)
                    {
                      if (j[2] == v95)
                      {
                        uint64_t *v96 = j[3];
                        goto LABEL_181;
                      }
                    }
                    else
                    {
                      if (v101.u32[0] > 1uLL)
                      {
                        if (v105 >= v97) {
                          v105 %= v97;
                        }
                      }
                      else
                      {
                        v105 &= v97 - 1;
                      }
                      if (v105 != v102) {
                        break;
                      }
                    }
                  }
                }
              }
              uint64_t v106 = sub_1B4BCE4F0(v157);
              long long v107 = *(_OWORD *)v95;
              *(void *)(v106 + 16) = *(void *)(v95 + 16);
              *(_OWORD *)uint64_t v106 = v107;
              uint64_t *v96 = v106;
              unint64_t v97 = (unint64_t)v154[1];
              if (v154[1])
              {
                uint8x8_t v108 = (uint8x8_t)vcnt_s8((int8x8_t)v154[1]);
                v108.i16[0] = vaddlv_u8(v108);
                if (v108.u32[0] > 1uLL)
                {
                  uint64_t v5 = v100;
                  if ((void *)v100 >= v154[1]) {
                    uint64_t v5 = v100 % (unint64_t)v154[1];
                  }
                }
                else
                {
                  uint64_t v5 = ((unint64_t)v154[1] - 1) & v100;
                }
                v109 = (void *)*((void *)v154[0] + v5);
                if (v109)
                {
                  for (k = (void *)*v109; k; k = (void *)*k)
                  {
                    unint64_t v111 = k[1];
                    if (v111 == v100)
                    {
                      if (k[2] == v95) {
                        goto LABEL_170;
                      }
                    }
                    else
                    {
                      if (v108.u32[0] > 1uLL)
                      {
                        if ((void *)v111 >= v154[1]) {
                          v111 %= (unint64_t)v154[1];
                        }
                      }
                      else
                      {
                        v111 &= (unint64_t)v154[1] - 1;
                      }
                      if (v111 != v5) {
                        break;
                      }
                    }
                  }
                }
              }
              uint64_t v112 = operator new(0x20uLL);
              *uint64_t v112 = 0;
              v112[1] = v100;
              v112[2] = v95;
              v112[3] = v106;
              float v113 = (float)(unint64_t)(*((void *)&v155 + 1) + 1);
              if (!v97 || (float)(v156 * (float)v97) < v113)
              {
                BOOL v114 = (v97 & (v97 - 1)) == 0;
                if (v97 < 3) {
                  BOOL v114 = 0;
                }
                unint64_t v115 = (2 * v97) | !v114;
                unint64_t v116 = vcvtps_u32_f32(v113 / v156);
                if (v115 <= v116) {
                  int8x8_t prime = (int8x8_t)v116;
                }
                else {
                  int8x8_t prime = (int8x8_t)v115;
                }
                if (*(void *)&prime == 1)
                {
                  int8x8_t prime = (int8x8_t)2;
                }
                else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
                {
                  int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
                  unint64_t v97 = (unint64_t)v154[1];
                }
                if (*(void *)&prime <= v97)
                {
                  if (*(void *)&prime < v97)
                  {
                    unint64_t v124 = vcvtps_u32_f32((float)*((unint64_t *)&v155 + 1) / v156);
                    if (v97 < 3
                      || (uint8x8_t v125 = (uint8x8_t)vcnt_s8((int8x8_t)v97), v125.i16[0] = vaddlv_u8(v125), v125.u32[0] > 1uLL))
                    {
                      unint64_t v124 = std::__next_prime(v124);
                    }
                    else
                    {
                      uint64_t v126 = 1 << -(char)__clz(v124 - 1);
                      if (v124 >= 2) {
                        unint64_t v124 = v126;
                      }
                    }
                    if (*(void *)&prime <= v124) {
                      int8x8_t prime = (int8x8_t)v124;
                    }
                    if (*(void *)&prime >= v97)
                    {
                      unint64_t v97 = (unint64_t)v154[1];
                    }
                    else
                    {
                      if (prime) {
                        goto LABEL_126;
                      }
                      v132 = v154[0];
                      v154[0] = 0;
                      if (v132) {
                        operator delete(v132);
                      }
                      unint64_t v97 = 0;
                      v154[1] = 0;
                    }
                  }
                }
                else
                {
LABEL_126:
                  if (*(void *)&prime >> 61) {
                    sub_1B4BB2D38();
                  }
                  v118 = operator new(8 * *(void *)&prime);
                  char v119 = v154[0];
                  v154[0] = v118;
                  if (v119) {
                    operator delete(v119);
                  }
                  uint64_t v120 = 0;
                  v154[1] = (void *)prime;
                  do
                    *((void *)v154[0] + v120++) = 0;
                  while (*(void *)&prime != v120);
                  v121 = (void **)v155;
                  if ((void)v155)
                  {
                    unint64_t v122 = *(void *)(v155 + 8);
                    uint8x8_t v123 = (uint8x8_t)vcnt_s8(prime);
                    v123.i16[0] = vaddlv_u8(v123);
                    if (v123.u32[0] > 1uLL)
                    {
                      if (v122 >= *(void *)&prime) {
                        v122 %= *(void *)&prime;
                      }
                    }
                    else
                    {
                      v122 &= *(void *)&prime - 1;
                    }
                    *((void *)v154[0] + v122) = &v155;
                    for (m = *v121; m; unint64_t v122 = v128)
                    {
                      unint64_t v128 = m[1];
                      if (v123.u32[0] > 1uLL)
                      {
                        if (v128 >= *(void *)&prime) {
                          v128 %= *(void *)&prime;
                        }
                      }
                      else
                      {
                        v128 &= *(void *)&prime - 1;
                      }
                      if (v128 != v122)
                      {
                        if (!*((void *)v154[0] + v128))
                        {
                          *((void *)v154[0] + v128) = v121;
                          goto LABEL_151;
                        }
                        *v121 = (void *)*m;
                        void *m = **((void **)v154[0] + v128);
                        **((void **)v154[0] + v128) = m;
                        m = v121;
                      }
                      unint64_t v128 = v122;
LABEL_151:
                      v121 = (void **)m;
                      m = (void *)*m;
                    }
                  }
                  unint64_t v97 = (unint64_t)prime;
                }
                if ((v97 & (v97 - 1)) != 0)
                {
                  if (v100 >= v97) {
                    uint64_t v5 = v100 % v97;
                  }
                  else {
                    uint64_t v5 = v100;
                  }
                }
                else
                {
                  uint64_t v5 = (v97 - 1) & v100;
                }
              }
              v129 = v154[0];
              v130 = (void *)*((void *)v154[0] + v5);
              if (v130)
              {
                *uint64_t v112 = *v130;
LABEL_168:
                void *v130 = v112;
                goto LABEL_169;
              }
              *uint64_t v112 = v155;
              *(void *)&long long v155 = v112;
              v129[v5] = &v155;
              if (*v112)
              {
                unint64_t v131 = *(void *)(*v112 + 8);
                if ((v97 & (v97 - 1)) != 0)
                {
                  if (v131 >= v97) {
                    v131 %= v97;
                  }
                }
                else
                {
                  v131 &= v97 - 1;
                }
                v130 = (char *)v154[0] + 8 * v131;
                goto LABEL_168;
              }
LABEL_169:
              ++*((void *)&v155 + 1);
LABEL_170:
              unint64_t v95 = *(void *)(v95 + 8);
              v96 = (uint64_t *)(v106 + 8);
            }
            while (v95);
LABEL_181:
            uint64_t v153 = v170;
            sub_1B4BCE660((uint64_t *)&v159, &v153);
            if (v150 - (uint64_t)v149 >= 9)
            {
              uint64_t v133 = 0;
              uint64_t v134 = (v150 - (uint64_t)v149) >> 3;
              uint64_t v135 = *v149;
              v136 = v149;
              do
              {
                v137 = v136;
                v136 += v133 + 1;
                uint64_t v138 = 2 * v133;
                uint64_t v133 = (2 * v133) | 1;
                uint64_t v139 = v138 + 2;
                if (v139 < v134 && *(float *)(*v136 + 16) < *(float *)(v136[1] + 16))
                {
                  ++v136;
                  uint64_t v133 = v139;
                }
                void *v137 = *v136;
              }
              while (v133 <= (uint64_t)((unint64_t)(v134 - 2) >> 1));
              v140 = (void *)(v150 - 8);
              if (v136 == (void *)(v150 - 8))
              {
                void *v136 = v135;
              }
              else
              {
                void *v136 = *v140;
                void *v140 = v135;
                sub_1B4BD33A8((uint64_t)v149, (uint64_t)(v136 + 1), v136 + 1 - v149);
              }
            }
            uint64_t v83 = *((void *)&v168 + 1) - 8;
            *((void *)&v168 + 1) -= 8;
            if (++v94 == v148)
            {
              uint64_t v84 = (void *)v168;
              break;
            }
          }
        }
        if (v84)
        {
          *((void *)&v168 + 1) = v84;
          operator delete(v84);
        }
        long long v168 = v159;
        uint64_t v169 = v160;
        long long v141 = v172;
        long long v172 = *(_OWORD *)&v157[8];
        *(_OWORD *)&v157[8] = v141;
        uint64_t v142 = *(void *)&v157[24];
        uint64_t v143 = v174;
        *(void *)&v157[24] = v173[0];
        long long v144 = *(_OWORD *)&v173[1];
        *(_OWORD *)&v173[1] = *(_OWORD *)&v157[32];
        *(_OWORD *)&v157[32] = v144;
        v173[0] = v142;
        uint64_t v174 = v158;
        uint64_t v158 = v143;
        sub_1B4BCE810((uint64_t)v154);
        sub_1B4BCE85C(v157);
      }
      if (v161)
      {
        v162 = v161;
        operator delete(v161);
      }
      if (v163[0])
      {
        v163[1] = v163[0];
        operator delete(v163[0]);
      }
      if (v164[0])
      {
        v164[1] = v164[0];
        operator delete(v164[0]);
      }
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if ((void)v168) {
    operator delete((void *)v168);
  }
  sub_1B4BCE85C(&v171);
}

void sub_1B4BCE380(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *__p,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57)
{
  sub_1B4BCE810((uint64_t)&a21);
  sub_1B4BCE85C(&a27);
  if (__p)
  {
    a41 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a43)
  {
    a44 = (uint64_t)a43;
    operator delete(a43);
  }
  if (a46)
  {
    a47 = (uint64_t)a46;
    operator delete(a46);
  }
  if (a53)
  {
    a54 = (uint64_t)a53;
    operator delete(a53);
  }
  unsigned int v59 = a57;
  sub_1B4BB332C((void ***)&a27);
  if (v59) {
    operator delete(v59);
  }
  sub_1B4BCE85C((void *)(v57 - 224));
  _Unwind_Resume(a1);
}

uint64_t sub_1B4BCE4F0(void *a1)
{
  uint64_t v2 = a1[5];
  unint64_t v3 = a1[6];
  unint64_t v4 = a1[4];
  if (v4 >= v3)
  {
    unint64_t v4 = 0;
    ++v2;
    a1[4] = 0;
    a1[5] = v2;
  }
  uint64_t v5 = a1[1];
  if (v2 == (a1[2] - v5) >> 3)
  {
    is_mul_ok(v3, 0x18uLL);
    operator new[]();
  }
  uint64_t result = *(void *)(v5 + 8 * v2) + 24 * v4;
  a1[4] = v4 + 1;
  return result;
}

uint64_t sub_1B4BCE660(uint64_t *a1, void *a2)
{
  uint64_t v5 = (void *)a1[1];
  unint64_t v4 = a1[2];
  if ((unint64_t)v5 >= v4)
  {
    uint64_t v7 = (void *)*a1;
    uint64_t v8 = ((uint64_t)v5 - *a1) >> 3;
    unint64_t v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 61) {
      sub_1B4BB3244();
    }
    uint64_t v10 = v4 - (void)v7;
    if (v10 >> 2 > v9) {
      unint64_t v9 = v10 >> 2;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11)
    {
      if (v11 >> 61) {
        sub_1B4BB2D38();
      }
      uint64_t v12 = (char *)operator new(8 * v11);
    }
    else
    {
      uint64_t v12 = 0;
    }
    uint64_t v13 = &v12[8 * v8];
    *(void *)uint64_t v13 = *a2;
    uint64_t v6 = (uint64_t)(v13 + 8);
    if (v5 != v7)
    {
      do
      {
        uint64_t v14 = *--v5;
        *((void *)v13 - 1) = v14;
        v13 -= 8;
      }
      while (v5 != v7);
      uint64_t v5 = (void *)*a1;
    }
    *a1 = (uint64_t)v13;
    a1[1] = v6;
    a1[2] = (uint64_t)&v12[8 * v11];
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    void *v5 = *a2;
    uint64_t v6 = (uint64_t)(v5 + 1);
  }
  a1[1] = v6;
  uint64_t v15 = *a1;
  uint64_t v16 = (v6 - *a1) >> 3;
  return sub_1B4BD33A8(v15, v6, v16);
}

void sub_1B4BCE774(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = (v3 - *a1) >> 5;
  if (a2 <= v4)
  {
    if (a2 < v4)
    {
      uint64_t v6 = *a1 + 32 * a2;
      if (v3 != v6)
      {
        uint64_t v7 = a1[1];
        do
        {
          unint64_t v9 = *(void **)(v7 - 32);
          v7 -= 32;
          uint64_t v8 = v9;
          if (v9)
          {
            *(void *)(v3 - 24) = v8;
            operator delete(v8);
          }
          uint64_t v3 = v7;
        }
        while (v7 != v6);
      }
      a1[1] = v6;
    }
  }
  else
  {
    unint64_t v5 = a2 - v4;
    sub_1B4BD3404(a1, v5);
  }
}

uint64_t sub_1B4BCE810(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  unint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void *sub_1B4BCE85C(void *a1)
{
  *a1 = &unk_1F0D54BD0;
  uint64_t v2 = (void *)a1[1];
  uint64_t v3 = (void *)a1[2];
  if (v2 != v3)
  {
    do
    {
      if (*v2) {
        MEMORY[0x1BA992990](*v2, 0x1020C8062D53EE8);
      }
      ++v2;
    }
    while (v2 != v3);
    uint64_t v2 = (void *)a1[1];
  }
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_1B4BCE8EC(void *a1@<X0>, void **a2@<X8>, float a3@<S0>)
{
  if ((int)(((a1[4] - a1[3]) >> 3) - 1) <= 0)
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  else
  {
    unint64_t v6 = a1[16] + a1[17] * a1[18];
    LODWORD(v48[0]) = 0;
    sub_1B4BCB2D8(__p, v6, v48);
    sub_1B4BCCFBC(a1, (uint64_t *)v48, a3);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    *(_OWORD *)std::string __p = *(_OWORD *)v48;
    int v51 = v49;
    uint64_t v46 = sub_1B4BE1D98();
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    v48[0] = 0;
    v48[1] = 0;
    uint64_t v49 = 0;
    int v7 = ((a1[4] - a1[3]) >> 3) - 1;
    uint64_t v8 = **(void **)(a1[6] + 24 * (v7 & ~(v7 >> 31)));
    float v9 = *((float *)__p[0] + *(unsigned int *)(v8 + 24));
    do
    {
      uint64_t v10 = (float *)v48[0];
      v48[1] = v48[0];
      unint64_t v11 = (uint64_t *)(a1[9] + 24 * *(unsigned int *)(v8 + 16));
      uint64_t v13 = *v11;
      uint64_t v12 = v11[1];
      uint64_t v14 = (float *)v48[0];
      if (*v11 != v12)
      {
        do
        {
          float v15 = exp((float)((float)(*((float *)__p[0] + *(unsigned int *)(*(void *)v13 + 24))
                                  + (float)(a3 * *(float *)(*(void *)v13 + 32)))
                          - v9));
          if (v10 >= v49)
          {
            uint64_t v16 = (float *)v48[0];
            uint64_t v17 = ((char *)v10 - (char *)v48[0]) >> 2;
            unint64_t v18 = v17 + 1;
            if ((unint64_t)(v17 + 1) >> 62) {
              sub_1B4BB3244();
            }
            uint64_t v19 = (char *)v49 - (char *)v48[0];
            if (((char *)v49 - (char *)v48[0]) >> 1 > v18) {
              unint64_t v18 = v19 >> 1;
            }
            if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v20 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v20 = v18;
            }
            if (v20)
            {
              float v21 = (char *)sub_1B4BB427C((uint64_t)&v49, v20);
              uint64_t v16 = (float *)v48[0];
              uint64_t v10 = (float *)v48[1];
            }
            else
            {
              float v21 = 0;
            }
            int v22 = (float *)&v21[4 * v17];
            *int v22 = v15;
            int v23 = v22 + 1;
            while (v10 != v16)
            {
              int v24 = *((_DWORD *)v10-- - 1);
              *((_DWORD *)v22-- - 1) = v24;
            }
            v48[0] = v22;
            v48[1] = v23;
            uint64_t v49 = (float *)&v21[4 * v20];
            if (v16) {
              operator delete(v16);
            }
            uint64_t v10 = (float *)v23;
          }
          else
          {
            *v10++ = v15;
          }
          v48[1] = v10;
          v13 += 8;
        }
        while (v13 != v12);
        uint64_t v14 = (float *)v48[0];
      }
      sub_1B4BCB35C((uint64_t)v47, v14, v10);
      unsigned int v25 = *(_DWORD *)(v8 + 16);
      uint64_t v26 = a1[9];
      uint64_t v8 = *(void *)(*(void *)(v26 + 24 * v25) + 8 * (int)sub_1B4BCB6C0((uint64_t)v47, v46, (double **)v47));
      uint64_t v27 = **(void **)a1[9];
      if (v8 != v27)
      {
        float v9 = *((float *)__p[0] + *(unsigned int *)(v8 + 24));
        int v29 = a2[1];
        unint64_t v28 = (unint64_t)a2[2];
        if ((unint64_t)v29 >= v28)
        {
          uint64_t v31 = ((char *)v29 - (unsigned char *)*a2) >> 3;
          if ((unint64_t)(v31 + 1) >> 61) {
            sub_1B4BB3244();
          }
          uint64_t v32 = v28 - (void)*a2;
          uint64_t v33 = v32 >> 2;
          if (v32 >> 2 <= (unint64_t)(v31 + 1)) {
            uint64_t v33 = v31 + 1;
          }
          if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v34 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v34 = v33;
          }
          if (v34) {
            uint64_t v35 = (char *)sub_1B4BB3A38((uint64_t)(a2 + 2), v34);
          }
          else {
            uint64_t v35 = 0;
          }
          unint64_t v36 = &v35[8 * v31];
          *(void *)unint64_t v36 = v8;
          uint64_t v30 = v36 + 8;
          BOOL v38 = (char *)*a2;
          unint64_t v37 = (char *)a2[1];
          if (v37 != *a2)
          {
            do
            {
              uint64_t v39 = *((void *)v37 - 1);
              v37 -= 8;
              *((void *)v36 - 1) = v39;
              v36 -= 8;
            }
            while (v37 != v38);
            unint64_t v37 = (char *)*a2;
          }
          *a2 = v36;
          a2[1] = v30;
          a2[2] = &v35[8 * v34];
          if (v37) {
            operator delete(v37);
          }
        }
        else
        {
          *int v29 = v8;
          uint64_t v30 = v29 + 1;
        }
        a2[1] = v30;
      }
      if (v47[0])
      {
        v47[1] = v47[0];
        operator delete(v47[0]);
      }
    }
    while (v8 != v27);
    unint64_t v41 = (unint64_t)*a2;
    uint64_t v40 = (char *)a2[1];
    if (*a2 != v40)
    {
      uint64_t v42 = v40 - 8;
      if ((unint64_t)v42 > v41)
      {
        unint64_t v43 = v41 + 8;
        do
        {
          uint64_t v44 = *(void *)(v43 - 8);
          *(void *)(v43 - 8) = *(void *)v42;
          *(void *)uint64_t v42 = v44;
          v42 -= 8;
          BOOL v45 = v43 >= (unint64_t)v42;
          v43 += 8;
        }
        while (!v45);
      }
    }
    if (v48[0])
    {
      v48[1] = v48[0];
      operator delete(v48[0]);
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
}

void sub_1B4BCECA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B4BCED10(uint64_t a1, void *a2)
{
  float v4 = *(float *)(a1 + 104);
  uint64_t v5 = ((a2[4] - a2[3]) >> 3) - 1;
  uint64_t v6 = a2[1];
  uint64_t v7 = a2[2];
  sub_1B4BB6FEC(&__p, *(int *)(a1 + 92) + 1);
  uint64_t v42 = v5;
  if ((int)v5 < 1) {
    goto LABEL_40;
  }
  uint64_t v43 = 0;
  uint64_t v8 = 0;
  float v9 = v4 + -10.0;
  uint64_t v41 = v6 + (int)v7;
  do
  {
    uint64_t v10 = *(unsigned char **)(a2[3] + 8 * v8);
    unint64_t v11 = (char *)__p;
    unint64_t v12 = (v46 - (unsigned char *)__p) >> 4;
    uint64_t v13 = *(_DWORD **)(a1 + 40);
    uint64_t v14 = (*v13 >> 10 << ((*v13 >> 6) & 8));
    if ((v41 - (void)v10) << 32)
    {
      uint64_t v15 = 0;
      unint64_t v16 = 0;
      do
      {
        uint64_t v17 = v10[v15];
        uint64_t v18 = v14 ^ v17;
        unsigned int v19 = v13[v18];
        if ((v19 & 0x800000FF) != v17) {
          break;
        }
        uint64_t v14 = v18 ^ (v19 >> 10 << ((v19 >> 6) & 8));
        if ((v19 & 0x100) != 0)
        {
          if (v16 < v12)
          {
            unint64_t v20 = &v11[16 * v16];
            *(_DWORD *)unint64_t v20 = v13[v14] & 0x7FFFFFFF;
            *((void *)v20 + 1) = v15 + 1;
          }
          ++v16;
        }
        ++v15;
      }
      while (v41 - v10 != v15);
    }
    else
    {
      unsigned int v21 = *v10;
      if (*v10)
      {
        unint64_t v16 = 0;
        uint64_t v22 = 1;
        do
        {
          uint64_t v23 = v14 ^ v21;
          unsigned int v24 = v13[v23];
          if ((v24 & 0x800000FF) != v21) {
            break;
          }
          uint64_t v14 = v23 ^ (v24 >> 10 << ((v24 >> 6) & 8));
          if ((v24 & 0x100) != 0)
          {
            if (v16 < v12)
            {
              unsigned int v25 = &v11[16 * v16];
              *(_DWORD *)unsigned int v25 = v13[v14] & 0x7FFFFFFF;
              *((void *)v25 + 1) = v22;
            }
            ++v16;
          }
          unsigned int v21 = v10[v22++];
        }
        while (v21);
      }
      else
      {
        unint64_t v16 = 0;
      }
    }
    if (v16 >= v12)
    {
      char v44 = 1;
      uint64_t v26 = sub_1B4BB34F0(MEMORY[0x1E4FBA240], (uint64_t)"unigram_model.cc", 16);
      sub_1B4BB34F0(v26, (uint64_t)"(", 1);
      uint64_t v27 = (void *)std::ostream::operator<<();
      unint64_t v28 = sub_1B4BB34F0(v27, (uint64_t)") [", 3);
      int v29 = sub_1B4BB34F0(v28, (uint64_t)"(num_nodes) < (trie_results.size())", 35);
      sub_1B4BB34F0(v29, (uint64_t)"] ", 2);
      sub_1B4BB239C(&v44);
    }
    if (!v16)
    {
LABEL_38:
      uint64_t v40 = sub_1B4BCCA64((uint64_t)a2, v8, 1);
      *(_DWORD *)(v40 + 28) = *(_DWORD *)(a1 + 88);
      *(float *)(v40 + 32) = v9;
      goto LABEL_39;
    }
    uint64_t v30 = 0;
    BOOL v31 = 0;
    do
    {
      while (1)
      {
        uint64_t v32 = (unint64_t *)(a2[3] + v43);
        int v33 = -1;
        do
        {
          unint64_t v34 = *v32++;
          ++v33;
        }
        while (v34 < (unint64_t)&v10[*((void *)__p + 2 * v30 + 1)]);
        uint64_t v35 = *((unsigned int *)__p + 4 * v30);
        if ((*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 128))(*(void *)(a1 + 8), v35)) {
          break;
        }
        uint64_t v36 = v8;
        uint64_t v37 = sub_1B4BCCA64((uint64_t)a2, v8, v33);
        *(_DWORD *)(v37 + 28) = v35;
        if ((*(unsigned int (**)(void, uint64_t))(**(void **)(a1 + 8) + 136))(*(void *)(a1 + 8), v35)) {
          double v38 = (float)(*(float *)(a1 + 108) * (float)v33) + -0.1;
        }
        else {
          double v38 = (*(float (**)(void, uint64_t))(**(void **)(a1 + 8) + 96))(*(void *)(a1 + 8), v35);
        }
        float v39 = v38;
        *(float *)(v37 + 32) = v39;
        if (!v31)
        {
          BOOL v31 = *(_DWORD *)(v37 + 20) == 1;
          uint64_t v8 = v36;
          break;
        }
        ++v30;
        BOOL v31 = 1;
        uint64_t v8 = v36;
        if (v30 == v16) {
          goto LABEL_39;
        }
      }
      ++v30;
    }
    while (v30 != v16);
    if (!v31) {
      goto LABEL_38;
    }
LABEL_39:
    ++v8;
    v43 += 8;
  }
  while (v8 != v42);
LABEL_40:
  if (__p)
  {
    uint64_t v46 = __p;
    operator delete(__p);
  }
}

void sub_1B4BCF0E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B4BCF118(uint64_t a1@<X0>, unsigned char *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t *a5@<X4>, uint64_t a6@<X8>)
{
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 16))(&__p);
  unint64_t v12 = __p;
  sub_1B4BE3D8C((uint64_t *)&__p);
  if (v12)
  {
    sub_1B4BE3FA8(a6, a1 + 96);
  }
  else
  {
    int v13 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 128))(a1);
    sub_1B4BCF330(a1 + 24, a2, a3, a4, v13, (uint64_t *)&__p);
    uint64_t v14 = (unsigned int *)__p;
    uint64_t v15 = v22;
    if (__p != v22)
    {
      do
      {
        uint64_t v16 = *v14;
        if (((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 144))(a1, v16) & 1) == 0
          && ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 152))(a1, v16) & 1) == 0)
        {
          v20[0] = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 120))(a1, v16);
          v20[1] = v17;
          unint64_t v18 = a5[1];
          if (v18 >= a5[2])
          {
            uint64_t v19 = sub_1B4BCB960(a5, (uint64_t)v20);
          }
          else
          {
            sub_1B4BCBA70(a5 + 16, (unsigned char *)a5[1], (uint64_t)v20);
            uint64_t v19 = v18 + 24;
            a5[1] = v18 + 24;
          }
          a5[1] = v19;
        }
        v14 += 4;
      }
      while (v14 != v15);
    }
    sub_1B4BE3FA8(a6, a1 + 96);
    if (__p)
    {
      uint64_t v22 = (unsigned int *)__p;
      operator delete(__p);
    }
  }
}

void sub_1B4BCF300(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B4BCF330(uint64_t a1@<X0>, unsigned char *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, int a5@<W4>, uint64_t *a6@<X8>)
{
  if (a4 != -1) {
    a5 = a4;
  }
  sub_1B4BB6FEC(a6, a5);
  unint64_t v12 = sub_1B4BD20F8(a1, a2, *a6, (a6[1] - *a6) >> 4, a3, a4);
  sub_1B4BD2400((uint64_t)a6, v12);
}

void sub_1B4BCF3B0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B4BCF3CC(uint64_t a1@<X0>, unsigned char *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 16))(&__p);
  unint64_t v12 = __p;
  sub_1B4BE3D8C((uint64_t *)&__p);
  if (v12)
  {
    sub_1B4BE3FA8(a6, a1 + 96);
  }
  else
  {
    int v13 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 128))(a1);
    sub_1B4BCF330(a1 + 24, a2, a3, a4, v13, (uint64_t *)&__p);
    uint64_t v14 = (unsigned int *)__p;
    uint64_t v15 = v29;
    if (__p != v29)
    {
      do
      {
        uint64_t v16 = *v14;
        if (((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 144))(a1, v16) & 1) == 0
          && ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 152))(a1, v16) & 1) == 0)
        {
          unint64_t v18 = *(_DWORD **)(a5 + 8);
          unint64_t v17 = *(void *)(a5 + 16);
          if ((unint64_t)v18 >= v17)
          {
            unint64_t v20 = *(_DWORD **)a5;
            uint64_t v21 = ((uint64_t)v18 - *(void *)a5) >> 2;
            unint64_t v22 = v21 + 1;
            if ((unint64_t)(v21 + 1) >> 62) {
              sub_1B4BB3244();
            }
            uint64_t v23 = v17 - (void)v20;
            if (v23 >> 1 > v22) {
              unint64_t v22 = v23 >> 1;
            }
            if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v24 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v24 = v22;
            }
            if (v24)
            {
              unsigned int v25 = (char *)sub_1B4BB427C(a5 + 16, v24);
              unint64_t v20 = *(_DWORD **)a5;
              unint64_t v18 = *(_DWORD **)(a5 + 8);
            }
            else
            {
              unsigned int v25 = 0;
            }
            uint64_t v26 = &v25[4 * v21];
            *(_DWORD *)uint64_t v26 = v16;
            uint64_t v19 = v26 + 4;
            while (v18 != v20)
            {
              int v27 = *--v18;
              *((_DWORD *)v26 - 1) = v27;
              v26 -= 4;
            }
            *(void *)a5 = v26;
            *(void *)(a5 + 8) = v19;
            *(void *)(a5 + 16) = &v25[4 * v24];
            if (v20) {
              operator delete(v20);
            }
          }
          else
          {
            *unint64_t v18 = v16;
            uint64_t v19 = v18 + 1;
          }
          *(void *)(a5 + 8) = v19;
        }
        v14 += 4;
      }
      while (v14 != v15);
    }
    sub_1B4BE3FA8(a6, a1 + 96);
    if (__p)
    {
      int v29 = (unsigned int *)__p;
      operator delete(__p);
    }
  }
}

void sub_1B4BCF604(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1B4BCF628(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1B4BCF790(a1);
  *(void *)(v4 + 104) = 0;
  *(_DWORD *)(v4 + 112) = 0;
  *(void *)uint64_t v4 = &unk_1F0D54C30;
  *(void *)(v4 + 8) = a2 + 16;
  sub_1B4BB0310(v4);
  unint64_t v5 = 0;
  *(void *)(a1 + 104) = 0x8000007F7FFFFFLL;
  while (v5 < (*(int (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8)))
  {
    if ((*(unsigned int (**)(void, unint64_t))(**(void **)(a1 + 8) + 104))(*(void *)(a1 + 8), v5))
    {
      float v6 = (*(float (**)(void, unint64_t))(**(void **)(a1 + 8) + 96))(*(void *)(a1 + 8), v5);
      if (v6 >= *(float *)(a1 + 104)) {
        float v6 = *(float *)(a1 + 104);
      }
      *(float *)(a1 + 104) = v6;
      float v7 = (*(float (**)(void, unint64_t))(**(void **)(a1 + 8) + 96))(*(void *)(a1 + 8), v5);
      if (*(float *)(a1 + 108) >= v7) {
        float v7 = *(float *)(a1 + 108);
      }
      *(float *)(a1 + 108) = v7;
    }
    ++v5;
  }
  return a1;
}

void sub_1B4BCF770(_Unwind_Exception *a1)
{
  sub_1B4BAFD0C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1B4BCF790(uint64_t a1)
{
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1F0D541C8;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 24) = &unk_1F0D54FB0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 4sub_1B4BC92E4(&a9, 0) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = &unk_1F0D54FB0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 8sub_1B4BC92E4(&a9, 0) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  sub_1B4BE3D84((void *)(a1 + 96));
  return a1;
}

void sub_1B4BCF834(_Unwind_Exception *a1)
{
  sub_1B4BAEDC0(v3);
  sub_1B4BAEDC0(v2);
  unint64_t v5 = *v1;
  *uint64_t v1 = 0;
  if (v5) {
    sub_1B4BB3474((uint64_t)v1, v5);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1B4BCF868(uint64_t a1, uint64_t a2, _DWORD *a3, unint64_t a4)
{
  BOOL v7 = a4 > 7;
  if (a4 <= 7) {
    unint64_t v8 = 0;
  }
  else {
    unint64_t v8 = a4 - 8;
  }
  if (v7) {
    float v9 = (char *)(a3 + 2);
  }
  else {
    float v9 = "";
  }
  uint64_t v10 = sub_1B4BAEE24(a1, a2, v9, v8);
  *(_DWORD *)(v10 + 104) = 0;
  unint64_t v11 = (_DWORD *)(v10 + 104);
  *(void *)uint64_t v10 = &unk_1F0D54C30;
  *(_DWORD *)(v10 + 108) = 0;
  unint64_t v12 = (_DWORD *)(v10 + 108);
  *(_DWORD *)(v10 + 112) = 0;
  int v13 = (uint64_t *)(v10 + 96);
  sub_1B4BE3FA8(&v17, v10 + 96);
  uint64_t v14 = v17;
  sub_1B4BE3D8C(&v17);
  if (!v14)
  {
    sub_1B4BCF9E4(a3, a4, v11, &v17);
    sub_1B4BE3FAC(v13, &v17);
    sub_1B4BE3D8C(&v17);
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 16))(&v17, a1);
    uint64_t v15 = v17;
    sub_1B4BE3D8C(&v17);
    if (!v15)
    {
      sub_1B4BCF9E4(a3 + 1, a4 - 4, v12, &v17);
      sub_1B4BE3FAC(v13, &v17);
      sub_1B4BE3D8C(&v17);
    }
  }
  return a1;
}

void sub_1B4BCF9B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1B4BE3D8C((uint64_t *)va);
  sub_1B4BAFD0C(v2);
  _Unwind_Resume(a1);
}

void *sub_1B4BCF9E4@<X0>(_DWORD *a1@<X0>, unint64_t a2@<X1>, _DWORD *a3@<X2>, void *a4@<X8>)
{
  if (a2 <= 3)
  {
    unsigned int v7 = 13;
    float v6 = (void *)sub_1B4BB2204((uint64_t)v8);
    sub_1B4BB34F0(v6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/util.h", 62);
    sub_1B4BB34F0(v8, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_1B4BB34F0(v8, (uint64_t)") [", 3);
    sub_1B4BB34F0(v8, (uint64_t)"string.size() >= sizeof(T)", 26);
    sub_1B4BB34F0(v8, (uint64_t)"] ", 2);
    sub_1B4BAFA7C(&v7, (uint64_t)a4);
    v8[0] = *MEMORY[0x1E4FBA418];
    *(void *)((char *)v8 + *(void *)(v8[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
    v8[1] = MEMORY[0x1E4FBA470] + 16;
    if (v9 < 0) {
      operator delete((void *)v8[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return (void *)MEMORY[0x1BA992920](&v10);
  }
  else
  {
    *a3 = *a1;
    return sub_1B4BE3D84(a4);
  }
}

void sub_1B4BCFBC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B4BCFBE8(void *a1)
{
  sub_1B4BAFD0C(a1);
  JUMPOUT(0x1BA9929C0);
}

void sub_1B4BCFC20(_DWORD *a1@<X0>, unsigned __int8 *a2@<X1>, unint64_t a3@<X2>, void *a4@<X8>)
{
  if (a1[28])
  {
    (*(void (**)(void **__return_ptr, _DWORD *))(*(void *)a1 + 16))(&v25, a1);
    if (v25)
    {
      sub_1B4BE3D8C((uint64_t *)&v25);
LABEL_4:
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      return;
    }
    sub_1B4BE3D8C((uint64_t *)&v25);
    if (!a3) {
      goto LABEL_4;
    }
    unsigned int v25 = &unk_1F0D54D20;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    uint64_t v31 = 0;
    uint64_t v32 = &unk_1F0D54BF0;
    long long v33 = 0u;
    long long v34 = 0u;
    uint64_t v35 = 0;
    uint64_t v36 = 1024;
    sub_1B4BCC57C((uint64_t)&v25, a2, a3);
    sub_1B4BCED10((uint64_t)a1, &v25);
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    sub_1B4BCCC8C(&v25, (uint64_t)&v23);
    unint64_t v8 = v23;
    char v9 = v24;
    if (v23 != v24)
    {
      uint64_t v10 = a4 + 2;
      unint64_t v11 = (char *)a4[1];
      do
      {
        uint64_t v12 = *v8;
        if ((unint64_t)v11 >= *v10)
        {
          unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v11[-*a4] >> 3);
          unint64_t v14 = v13 + 1;
          if (v13 + 1 > 0xAAAAAAAAAAAAAAALL) {
            sub_1B4BB3244();
          }
          if (0x5555555555555556 * ((uint64_t)(*v10 - *a4) >> 3) > v14) {
            unint64_t v14 = 0x5555555555555556 * ((uint64_t)(*v10 - *a4) >> 3);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v10 - *a4) >> 3) >= 0x555555555555555) {
            unint64_t v15 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v15 = v14;
          }
          uint64_t v16 = (char *)sub_1B4BB325C((uint64_t)(a4 + 2), v15);
          unint64_t v18 = &v16[24 * v13];
          *(_OWORD *)unint64_t v18 = *(_OWORD *)v12;
          *((_DWORD *)v18 + 4) = *(_DWORD *)(v12 + 28);
          unint64_t v20 = (char *)*a4;
          uint64_t v19 = (char *)a4[1];
          uint64_t v21 = v18;
          if (v19 != (char *)*a4)
          {
            do
            {
              long long v22 = *(_OWORD *)(v19 - 24);
              *((void *)v21 - 1) = *((void *)v19 - 1);
              *(_OWORD *)(v21 - 24) = v22;
              v21 -= 24;
              v19 -= 24;
            }
            while (v19 != v20);
            uint64_t v19 = (char *)*a4;
          }
          unint64_t v11 = v18 + 24;
          *a4 = v21;
          a4[1] = v18 + 24;
          a4[2] = &v16[24 * v17];
          if (v19) {
            operator delete(v19);
          }
        }
        else
        {
          *(_OWORD *)unint64_t v11 = *(_OWORD *)v12;
          *((_DWORD *)v11 + 4) = *(_DWORD *)(v12 + 28);
          v11 += 24;
        }
        a4[1] = v11;
        ++v8;
      }
      while (v8 != v9);
      unint64_t v8 = v23;
    }
    if (v8)
    {
      unint64_t v24 = v8;
      operator delete(v8);
    }
    sub_1B4BCC268((uint64_t)&v25);
  }
  else
  {
    sub_1B4BCFF30((uint64_t)a1, (uint64_t)a2, a3, a4);
  }
}

void sub_1B4BCFEE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  unint64_t v15 = *(void **)v13;
  if (*(void *)v13)
  {
    *(void *)(v13 + 8) = v15;
    operator delete(v15);
  }
  sub_1B4BCC268((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_1B4BCFF30(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, void *a4@<X8>)
{
  (*(void (**)(long long *__return_ptr))(*(void *)a1 + 16))(&v67);
  if ((void)v67)
  {
    sub_1B4BE3D8C((uint64_t *)&v67);
LABEL_3:
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    return;
  }
  sub_1B4BE3D8C((uint64_t *)&v67);
  if (!a3) {
    goto LABEL_3;
  }
  float v8 = *(float *)(a1 + 104);
  uint64_t v9 = (a3 << 32) + 0x100000000;
  uint64_t v66 = a2;
  if (a3 << 32 == 0xFFFFFFFF00000000)
  {
    uint64_t v12 = 0;
  }
  else
  {
    if (v9 < 0) {
      sub_1B4BB3244();
    }
    uint64_t v10 = v9 >> 32;
    uint64_t v11 = 3 * v10;
    uint64_t v12 = (float *)operator new(12 * v10);
    uint64_t v13 = v12;
    do
    {
      *(void *)uint64_t v13 = 0xFFFFFFFFLL;
      v13[2] = NAN;
      v13 += 3;
    }
    while (v13 != &v12[v11]);
    a2 = v66;
  }
  if ((int)a3 <= 0)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
  }
  else
  {
    uint64_t v65 = a4;
    int v14 = 0;
    float v15 = v8 + -10.0;
    unint64_t v16 = (int)a3;
    int v62 = (char *)(v12 + 5);
    unint64_t v63 = a3;
    float v64 = v12;
    unint64_t v61 = (int)a3;
    do
    {
      float v17 = v12[3 * v14 + 1];
      if ((int)a3 - v14 >= asc_1B4C934DB[(unint64_t)*(unsigned __int8 *)(a2 + v14) >> 4]) {
        int v18 = asc_1B4C934DB[(unint64_t)*(unsigned __int8 *)(a2 + v14) >> 4];
      }
      else {
        int v18 = a3 - v14;
      }
      if (v16 <= v14) {
        goto LABEL_31;
      }
      uint64_t v19 = 0;
      char v20 = 0;
      uint64_t v21 = 0;
      uint64_t v22 = a2 + v14;
      unint64_t v23 = v16 - v14;
      unint64_t v24 = (int *)&v62[12 * v14];
      do
      {
        uint64_t v25 = *(void *)(a1 + 40);
        int v26 = *(unsigned __int8 *)(v22 + v19);
        LODWORD(v21) = (*(_DWORD *)(v25 + 4 * v21) >> 10 << ((*(_DWORD *)(v25 + 4 * v21) >> 6) & 8)) ^ v21 ^ v26;
        unsigned int v27 = *(_DWORD *)(v25 + 4 * v21);
        if ((v27 & 0x800000FF) != v26) {
          break;
        }
        if ((v27 & 0x100) != 0)
        {
          uint64_t v28 = *(_DWORD *)(v25 + 4 * ((v27 >> 10 << ((v27 >> 6) & 8)) ^ v21)) & 0x7FFFFFFF;
          if (((*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 128))(*(void *)(a1 + 8), v28) & 1) == 0)
          {
            if ((*(unsigned int (**)(void, uint64_t))(**(void **)(a1 + 8) + 136))(*(void *)(a1 + 8), v28))
            {
              double v29 = (float)(*(float *)(a1 + 108) * (float)(unint64_t)(v19 + 1)) + -0.1;
            }
            else
            {
              double v29 = (*(float (**)(void, uint64_t))(**(void **)(a1 + 8) + 96))(*(void *)(a1 + 8), v28);
            }
            double v30 = v29 + v17;
            if (*v24 == -1 || v30 > *((float *)v24 - 1))
            {
              float v31 = v30;
              *((float *)v24 - 1) = v31;
              *unint64_t v24 = v14;
              *(v24 - 2) = v28;
            }
            v20 |= v18 - 1 == v19;
          }
        }
        ++v19;
        v24 += 3;
      }
      while (v23 != v19);
      LODWORD(a3) = v63;
      uint64_t v12 = v64;
      a2 = v66;
      unint64_t v16 = v61;
      if ((v20 & 1) == 0)
      {
LABEL_31:
        uint64_t v32 = &v12[3 * v18 + 3 * v14];
        int v34 = *((_DWORD *)v32 + 2);
        long long v33 = (int *)(v32 + 2);
        float v35 = v15 + v17;
        if (v34 == -1 || v35 > *((float *)v33 - 1))
        {
          *((float *)v33 - 1) = v35;
          *long long v33 = v14;
          v12[3 * v18 + 3 * v14] = *(float *)(a1 + 88);
        }
      }
      v14 += v18;
    }
    while (v14 < (int)a3);
    uint64_t v37 = 0;
    v65[2] = 0;
    double v38 = v65 + 2;
    void *v65 = 0;
    v65[1] = 0;
    unsigned int v39 = a3;
    do
    {
      uint64_t v40 = &v12[3 * v39];
      uint64_t v42 = (unsigned int *)(v40 + 2);
      unint64_t v41 = *((int *)v40 + 2);
      if (v63 < v41) {
        sub_1B4BC8D14("string_view::substr");
      }
      int v43 = v39 - v41;
      uint64_t v44 = v66 + v41;
      if (v63 - v41 >= v43) {
        unint64_t v45 = v43;
      }
      else {
        unint64_t v45 = v63 - v41;
      }
      if ((unint64_t)v37 >= *v38)
      {
        unint64_t v47 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v37[-*v65] >> 3);
        unint64_t v48 = v47 + 1;
        if (v47 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_1B4BB3244();
        }
        if (0x5555555555555556 * ((uint64_t)(*v38 - *v65) >> 3) > v48) {
          unint64_t v48 = 0x5555555555555556 * ((uint64_t)(*v38 - *v65) >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v38 - *v65) >> 3) >= 0x555555555555555) {
          unint64_t v49 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v49 = v48;
        }
        unint64_t v50 = (char *)sub_1B4BB325C((uint64_t)v38, v49);
        uint64_t v52 = &v50[24 * v47];
        *(void *)uint64_t v52 = v44;
        *((void *)v52 + 1) = v45;
        *((float *)v52 + 4) = *v40;
        uint64_t v46 = (char **)v65;
        float v54 = (char *)*v65;
        uint64_t v53 = (char *)v65[1];
        unint64_t v55 = v52;
        if (v53 == (char *)*v65)
        {
          uint64_t v12 = v64;
        }
        else
        {
          uint64_t v12 = v64;
          do
          {
            long long v56 = *(_OWORD *)(v53 - 24);
            *((void *)v55 - 1) = *((void *)v53 - 1);
            *(_OWORD *)(v55 - 24) = v56;
            v55 -= 24;
            v53 -= 24;
          }
          while (v53 != v54);
          uint64_t v53 = (char *)*v65;
        }
        uint64_t v37 = v52 + 24;
        void *v65 = v55;
        v65[1] = v52 + 24;
        v65[2] = &v50[24 * v51];
        if (v53) {
          operator delete(v53);
        }
      }
      else
      {
        *(void *)uint64_t v37 = v44;
        *((void *)v37 + 1) = v45;
        *((float *)v37 + 4) = *v40;
        v37 += 24;
        uint64_t v12 = v64;
        uint64_t v46 = (char **)v65;
      }
      v46[1] = v37;
      unsigned int v39 = *v42;
    }
    while ((int)*v42 > 0);
    uint64_t v57 = (long long *)*v46;
    if (*v46 != v37)
    {
      for (uint64_t i = v37 - 24; v57 < (long long *)i; i -= 24)
      {
        long long v67 = *v57;
        long long v59 = v67;
        long long *v57 = *(_OWORD *)i;
        *(_OWORD *)uint64_t i = v59;
        int v60 = *((_DWORD *)v57 + 4);
        *((_DWORD *)v57 + 4) = *((_DWORD *)i + 4);
        *((_DWORD *)i + 4) = v60;
        uint64_t v57 = (long long *)((char *)v57 + 24);
      }
    }
  }
  if (v12) {
    operator delete(v12);
  }
}

void sub_1B4BD046C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  float v15 = *(void **)a14;
  if (*(void *)a14)
  {
    *(void *)(a14 + 8) = v15;
    operator delete(v15);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B4BD04B0(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t *a5@<X8>)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 16))(__p);
  if (__p[0])
  {
    sub_1B4BE3D8C((uint64_t *)__p);
LABEL_3:
    memset(__p, 0, 24);
    sub_1B4BB3170((char *)__p, 0, 0, 0);
    LODWORD(__p[3]) = 0;
    a5[1] = 0;
    a5[2] = 0;
    *a5 = 0;
    *(void *)&long long v38 = a5;
    BYTE8(v38) = 0;
    uint64_t v10 = (char *)operator new(0x20uLL);
    *a5 = (uint64_t)v10;
    a5[1] = (uint64_t)v10;
    a5[2] = (uint64_t)(v10 + 32);
    a5[1] = sub_1B4BB30A8((uint64_t)(a5 + 2), (uint64_t)__p, (uint64_t)&__p[4], (uint64_t)v10);
    uint64_t v11 = __p[0];
    if (!__p[0]) {
      return;
    }
    __p[1] = __p[0];
    goto LABEL_5;
  }
  sub_1B4BE3D8C((uint64_t *)__p);
  if (!a3) {
    goto LABEL_3;
  }
  if (a4 >= 1024) {
    int v12 = 1024;
  }
  else {
    int v12 = a4;
  }
  if (v12 <= 1) {
    uint64_t v13 = 1;
  }
  else {
    uint64_t v13 = v12;
  }
  if (v13 > 1)
  {
    __p[0] = &unk_1F0D54D20;
    memset(&__p[1], 0, 88);
    __p[12] = &unk_1F0D54BF0;
    long long v41 = 0u;
    long long v42 = 0u;
    uint64_t v43 = 0;
    uint64_t v44 = 1024;
    sub_1B4BCC57C((uint64_t)__p, a2, a3);
    sub_1B4BCED10(a1, __p);
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
    int v34 = a5;
    sub_1B4BCD304(__p, v13, 0, (uint64_t *)&v38, 0.0);
    uint64_t v33 = *((void *)&v38 + 1);
    for (uint64_t i = v38; i != v33; i += 32)
    {
      float v35 = 0;
      uint64_t v36 = 0;
      uint64_t v37 = 0;
      unint64_t v16 = *(uint64_t **)i;
      float v17 = *(uint64_t **)(i + 8);
      if (*(uint64_t **)i != v17)
      {
        int v18 = 0;
        do
        {
          uint64_t v19 = *v16;
          if (v18 >= v37)
          {
            unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * ((v18 - (unsigned char *)v35) >> 3);
            unint64_t v21 = v20 + 1;
            if (v20 + 1 > 0xAAAAAAAAAAAAAAALL) {
              sub_1B4BB3244();
            }
            if (0x5555555555555556 * ((v37 - (unsigned char *)v35) >> 3) > v21) {
              unint64_t v21 = 0x5555555555555556 * ((v37 - (unsigned char *)v35) >> 3);
            }
            if (0xAAAAAAAAAAAAAAABLL * ((v37 - (unsigned char *)v35) >> 3) >= 0x555555555555555) {
              unint64_t v22 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v22 = v21;
            }
            unint64_t v23 = (char *)sub_1B4BB325C((uint64_t)&v37, v22);
            uint64_t v25 = &v23[24 * v20];
            *(_OWORD *)uint64_t v25 = *(_OWORD *)v19;
            *((_DWORD *)v25 + 4) = *(_DWORD *)(v19 + 28);
            unsigned int v27 = (char *)v35;
            int v26 = v36;
            uint64_t v28 = v25;
            if (v36 != v35)
            {
              do
              {
                long long v29 = *(_OWORD *)(v26 - 24);
                *((void *)v28 - 1) = *((void *)v26 - 1);
                *(_OWORD *)(v28 - 24) = v29;
                v28 -= 24;
                v26 -= 24;
              }
              while (v26 != v27);
              int v26 = (char *)v35;
            }
            int v18 = v25 + 24;
            float v35 = v28;
            uint64_t v36 = v25 + 24;
            uint64_t v37 = &v23[24 * v24];
            if (v26) {
              operator delete(v26);
            }
          }
          else
          {
            *(_OWORD *)int v18 = *(_OWORD *)v19;
            *((_DWORD *)v18 + 4) = *(_DWORD *)(v19 + 28);
            v18 += 24;
          }
          uint64_t v36 = v18;
          ++v16;
        }
        while (v16 != v17);
      }
      double v30 = (float *)(i + 24);
      unint64_t v31 = v34[1];
      if (v31 >= v34[2])
      {
        uint64_t v32 = sub_1B4BD3780(v34, (long long **)&v35, v30);
      }
      else
      {
        sub_1B4BD370C((uint64_t)v34, (long long **)&v35, v30);
        uint64_t v32 = v31 + 32;
      }
      v34[1] = v32;
      if (v35)
      {
        uint64_t v36 = (char *)v35;
        operator delete(v35);
      }
    }
    float v35 = &v38;
    sub_1B4BB332C((void ***)&v35);
    sub_1B4BCC268((uint64_t)__p);
  }
  else
  {
    (*(void (**)(long long *__return_ptr, uint64_t, unsigned __int8 *, uint64_t))(*(void *)a1 + 40))(&v38, a1, a2, a3);
    *(_OWORD *)std::string __p = v38;
    std::string __p[2] = v39;
    unsigned int v39 = 0;
    long long v38 = 0uLL;
    LODWORD(__p[3]) = 0;
    a5[1] = 0;
    a5[2] = 0;
    *a5 = 0;
    float v35 = a5;
    LOBYTE(v36) = 0;
    int v14 = (char *)operator new(0x20uLL);
    *a5 = (uint64_t)v14;
    a5[1] = (uint64_t)v14;
    a5[2] = (uint64_t)(v14 + 32);
    a5[1] = sub_1B4BB30A8((uint64_t)(a5 + 2), (uint64_t)__p, (uint64_t)&__p[4], (uint64_t)v14);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    uint64_t v11 = (void *)v38;
    if ((void)v38)
    {
      *((void *)&v38 + 1) = v38;
LABEL_5:
      operator delete(v11);
    }
  }
}

void sub_1B4BD0918(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  a12 = a11;
  sub_1B4BB332C((void ***)&a12);
  sub_1B4BCC268((uint64_t)&__p);
  _Unwind_Resume(a1);
}

uint64_t *sub_1B4BD09E8@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>, float a5@<S0>)
{
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 16))(&v28);
  if (v28)
  {
    uint64_t result = sub_1B4BE3D8C((uint64_t *)&v28);
LABEL_3:
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    return result;
  }
  uint64_t result = sub_1B4BE3D8C((uint64_t *)&v28);
  if (!a3) {
    goto LABEL_3;
  }
  uint64_t v28 = &unk_1F0D54D20;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  uint64_t v34 = 0;
  float v35 = &unk_1F0D54BF0;
  long long v36 = 0u;
  long long v37 = 0u;
  uint64_t v38 = 0;
  uint64_t v39 = 1024;
  sub_1B4BCC57C((uint64_t)&v28, a2, a3);
  sub_1B4BCED10(a1, &v28);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  sub_1B4BCE8EC(&v28, (void **)&v26, a5);
  uint64_t v11 = v26;
  int v12 = v27;
  if (v26 != v27)
  {
    uint64_t v13 = 0;
    int v14 = a4 + 2;
    do
    {
      uint64_t v15 = *v11;
      if ((unint64_t)v13 >= *v14)
      {
        unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v13[-*a4] >> 3);
        unint64_t v17 = v16 + 1;
        if (v16 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_1B4BB3244();
        }
        if (0x5555555555555556 * ((uint64_t)(*v14 - *a4) >> 3) > v17) {
          unint64_t v17 = 0x5555555555555556 * ((uint64_t)(*v14 - *a4) >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v14 - *a4) >> 3) >= 0x555555555555555) {
          unint64_t v18 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v18 = v17;
        }
        uint64_t v19 = (char *)sub_1B4BB325C((uint64_t)(a4 + 2), v18);
        unint64_t v21 = &v19[24 * v16];
        *(_OWORD *)unint64_t v21 = *(_OWORD *)v15;
        *((_DWORD *)v21 + 4) = *(_DWORD *)(v15 + 28);
        unint64_t v23 = (char *)*a4;
        unint64_t v22 = (char *)a4[1];
        uint64_t v24 = v21;
        if (v22 != (char *)*a4)
        {
          do
          {
            long long v25 = *(_OWORD *)(v22 - 24);
            *((void *)v24 - 1) = *((void *)v22 - 1);
            *(_OWORD *)(v24 - 24) = v25;
            v24 -= 24;
            v22 -= 24;
          }
          while (v22 != v23);
          unint64_t v22 = (char *)*a4;
        }
        uint64_t v13 = v21 + 24;
        *a4 = v24;
        a4[1] = v21 + 24;
        a4[2] = &v19[24 * v20];
        if (v22) {
          operator delete(v22);
        }
      }
      else
      {
        *(_OWORD *)uint64_t v13 = *(_OWORD *)v15;
        *((_DWORD *)v13 + 4) = *(_DWORD *)(v15 + 28);
        v13 += 24;
      }
      a4[1] = v13;
      ++v11;
    }
    while (v11 != v12);
    uint64_t v11 = v26;
  }
  if (v11)
  {
    unsigned int v27 = v11;
    operator delete(v11);
  }
  return (uint64_t *)sub_1B4BCC268((uint64_t)&v28);
}

void sub_1B4BD0C74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
}

void sub_1B4BD0CB8(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, char a5@<W4>, int a6@<W5>, uint64_t *a7@<X8>, float a8@<S0>)
{
  (*(void (**)(void ***__return_ptr))(*(void *)a1 + 16))(&v122);
  if (v122)
  {
    sub_1B4BE3D8C((uint64_t *)&v122);
LABEL_3:
    *a7 = 0;
    a7[1] = 0;
    a7[2] = 0;
    return;
  }
  sub_1B4BE3D8C((uint64_t *)&v122);
  if (!a3) {
    goto LABEL_3;
  }
  uint64_t v103 = a7;
  uint64_t v134 = 0;
  uint64_t v135 = 0;
  unint64_t v136 = 0;
  unint64_t v122 = (void **)&unk_1F0D54D20;
  long long v123 = 0u;
  long long v124 = 0u;
  long long v125 = 0u;
  long long v126 = 0u;
  long long v127 = 0u;
  uint64_t v128 = 0;
  v129 = &unk_1F0D54BF0;
  long long v130 = 0u;
  long long v131 = 0u;
  uint64_t v132 = 0;
  uint64_t v133 = 1024;
  sub_1B4BCC57C((uint64_t)&v122, a2, a3);
  sub_1B4BCED10(a1, &v122);
  sub_1B4BCCFBC(&v122, (uint64_t *)v121, a8);
  float v16 = *((float *)v121[0]
        + *(unsigned int *)(**(void **)(*((void *)&v125 + 1)
                                        + 24
                                        * ((((*((void *)&v124 + 1) - (void)v124) >> 3) - 1) & ~((int)(((*((void *)&v124 + 1) - (void)v124) >> 3) - 1) >> 31)))
                          + 24));
  if (a6)
  {
    if ((a5 & 1) == 0)
    {
      if ((int)sub_1B4BE1C40() <= 2)
      {
        LOBYTE(__p[0]) = 0;
        uint64_t v34 = sub_1B4BB34F0(MEMORY[0x1E4FBA240], (uint64_t)"unigram_model.cc", 16);
        sub_1B4BB34F0(v34, (uint64_t)"(", 1);
        float v35 = (void *)std::ostream::operator<<();
        long long v36 = sub_1B4BB34F0(v35, (uint64_t)") ", 2);
        long long v37 = sub_1B4BB34F0(v36, (uint64_t)"LOG(", 4);
        uint64_t v38 = sub_1B4BB34F0(v37, (uint64_t)"ERROR", 5);
        uint64_t v39 = sub_1B4BB34F0(v38, (uint64_t)") ", 2);
        sub_1B4BB34F0(v39, (uint64_t)"include_best not supported for wor false", 40);
        sub_1B4BB239C(__p);
      }
      uint64_t v40 = a7;
      goto LABEL_114;
    }
    int v104 = a6;
    uint64_t v107 = a3;
    unint64_t v105 = a2;
    v118 = 0;
    char v119 = 0;
    uint64_t v120 = 0;
    sub_1B4BCCC8C(&v122, (uint64_t)__p);
    unint64_t v17 = (uint64_t *)__p[0];
    unint64_t v18 = (uint64_t *)__p[1];
    if (__p[0] != __p[1])
    {
      uint64_t v19 = v119;
      do
      {
        uint64_t v20 = *v17;
        if (v19 >= (long long *)v120)
        {
          unint64_t v21 = 0xAAAAAAAAAAAAAAABLL * (((char *)v19 - (char *)v118) >> 3);
          unint64_t v22 = v21 + 1;
          if (v21 + 1 > 0xAAAAAAAAAAAAAAALL) {
            sub_1B4BB3244();
          }
          if (0x5555555555555556 * ((v120 - (char *)v118) >> 3) > v22) {
            unint64_t v22 = 0x5555555555555556 * ((v120 - (char *)v118) >> 3);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((v120 - (char *)v118) >> 3) >= 0x555555555555555) {
            unint64_t v23 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v23 = v22;
          }
          uint64_t v24 = (char *)sub_1B4BB325C((uint64_t)&v120, v23);
          int v26 = &v24[24 * v21];
          *(_OWORD *)int v26 = *(_OWORD *)v20;
          *((_DWORD *)v26 + 4) = *(_DWORD *)(v20 + 28);
          uint64_t v28 = v118;
          unsigned int v27 = v119;
          long long v29 = (long long *)v26;
          if (v119 != v118)
          {
            do
            {
              long long v30 = *(long long *)((char *)v27 - 24);
              *((void *)v29 - 1) = *((void *)v27 - 1);
              *(long long *)((char *)v29 - 24) = v30;
              long long v29 = (long long *)((char *)v29 - 24);
              unsigned int v27 = (long long *)((char *)v27 - 24);
            }
            while (v27 != v28);
            unsigned int v27 = v118;
          }
          uint64_t v19 = (long long *)(v26 + 24);
          v118 = v29;
          char v119 = (long long *)(v26 + 24);
          uint64_t v120 = &v24[24 * v25];
          if (v27) {
            operator delete(v27);
          }
        }
        else
        {
          *uint64_t v19 = *(_OWORD *)v20;
          *((_DWORD *)v19 + 4) = *(_DWORD *)(v20 + 28);
          uint64_t v19 = (long long *)((char *)v19 + 24);
        }
        char v119 = v19;
        ++v17;
      }
      while (v17 != v18);
    }
    double v116 = 0.0;
    long long v31 = v135;
    if ((unint64_t)v135 >= v136)
    {
      uint64_t v33 = sub_1B4BD39EC(&v134, &v118, &v116);
    }
    else
    {
      *(void *)uint64_t v135 = 0;
      *((void *)v31 + 1) = 0;
      *((void *)v31 + 2) = 0;
      sub_1B4BB3170(v31, v118, v119, 0xAAAAAAAAAAAAAAABLL * (((char *)v119 - (char *)v118) >> 3));
      float v32 = v116;
      *((float *)v31 + 6) = v32;
      uint64_t v33 = (uint64_t)(v31 + 32);
    }
    a2 = v105;
    a3 = v107;
    a6 = v104;
    uint64_t v135 = (char *)v33;
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (v118)
    {
      char v119 = v118;
      operator delete(v118);
    }
  }
  if (a5)
  {
    sub_1B4BCD304(&v122, a4 + 1, 1, (uint64_t *)&v118, a8);
    if (a6)
    {
      sub_1B4BD3B00(&v116, ((char *)v119 - (char *)v118) >> 5);
      long long v42 = v118;
      long long v41 = v119;
      if (v119 != v118)
      {
        uint64_t v43 = 0;
        uint64_t v44 = 0;
        unint64_t v45 = 0;
        do
        {
          if (&v42[v43] != (long long *)(*(void *)&v116 + v44))
          {
            sub_1B4BD3BA4((char *)(*(void *)&v116 + v44), *(char **)&v42[v43], *((void *)&v42[v43] + 1), (uint64_t)(*((void *)&v42[v43] + 1) - *(void *)&v42[v43]) >> 3);
            long long v42 = v118;
            long long v41 = v119;
          }
          ++v45;
          v44 += 24;
          v43 += 2;
        }
        while (v45 < ((char *)v41 - (char *)v42) >> 5);
      }
      sub_1B4BCCC8C(&v122, (uint64_t)__p);
      uint64_t v46 = sub_1B4BD3CB0(*(uint64_t *)&v116, *(uint64_t *)&v117, (uint64_t)__p);
      uint64_t v47 = (int)(-1431655765 * ((unint64_t)(v46 - *(void *)&v116) >> 3));
      if (v47 == ((char *)v119 - (char *)v118) >> 5)
      {
        unint64_t v49 = v119 - 2;
        unint64_t v48 = (void *)*((void *)v119 - 4);
        if (v48)
        {
          *((void *)v119 - 3) = v48;
          operator delete(v48);
        }
      }
      else
      {
        sub_1B4BD3D20((__n128 *)&v118[2 * v47 + 2], (__n128 *)v119, (uint64_t)&v118[2 * v47]);
        unint64_t v49 = v69;
        float v70 = v119;
        if (v119 != v69)
        {
          uint64_t v71 = v119;
          do
          {
            uint64_t v73 = (void *)*((void *)v71 - 4);
            v71 -= 2;
            unint64_t v72 = v73;
            if (v73)
            {
              *((void *)v70 - 3) = v72;
              operator delete(v72);
            }
            float v70 = v71;
          }
          while (v71 != v49);
        }
      }
      char v119 = v49;
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      __p[0] = &v116;
      sub_1B4BC8E18((void ***)__p);
    }
    uint64_t v74 = (void *)*((void *)v119 - 4);
    v109 = v119 - 2;
    float v75 = *((float *)v119 - 2);
    if (v74)
    {
      *((void *)v119 - 3) = v74;
      operator delete(v74);
    }
    char v119 = v109;
    for (uint64_t i = v118; i != v109; i += 2)
    {
      memset(__p, 0, 24);
      long long v77 = *(uint64_t **)i;
      uint64_t v78 = (uint64_t *)*((void *)i + 1);
      if (*(uint64_t **)i == v78)
      {
        float v80 = 0.0;
      }
      else
      {
        uint64_t v79 = 0;
        float v80 = 0.0;
        do
        {
          uint64_t v81 = *v77;
          float v82 = *(float *)(*v77 + 32);
          if (v79 >= __p[2])
          {
            unint64_t v83 = 0xAAAAAAAAAAAAAAABLL * ((v79 - (char *)__p[0]) >> 3);
            unint64_t v84 = v83 + 1;
            if (v83 + 1 > 0xAAAAAAAAAAAAAAALL) {
              sub_1B4BB3244();
            }
            if (0x5555555555555556 * (((char *)__p[2] - (char *)__p[0]) >> 3) > v84) {
              unint64_t v84 = 0x5555555555555556 * (((char *)__p[2] - (char *)__p[0]) >> 3);
            }
            if (0xAAAAAAAAAAAAAAABLL * (((char *)__p[2] - (char *)__p[0]) >> 3) >= 0x555555555555555) {
              unint64_t v85 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v85 = v84;
            }
            int v86 = (char *)sub_1B4BB325C((uint64_t)&__p[2], v85);
            std::string::size_type v88 = &v86[24 * v83];
            *(_OWORD *)std::string::size_type v88 = *(_OWORD *)v81;
            *((_DWORD *)v88 + 4) = *(_DWORD *)(v81 + 28);
            long long v90 = (char *)__p[0];
            v89 = (char *)__p[1];
            uint64_t v91 = v88;
            if (__p[1] != __p[0])
            {
              do
              {
                long long v92 = *(_OWORD *)(v89 - 24);
                *((void *)v91 - 1) = *((void *)v89 - 1);
                *(_OWORD *)(v91 - 24) = v92;
                v91 -= 24;
                v89 -= 24;
              }
              while (v89 != v90);
              v89 = (char *)__p[0];
            }
            uint64_t v79 = v88 + 24;
            __p[0] = v91;
            __p[1] = v88 + 24;
            std::string __p[2] = &v86[24 * v87];
            if (v89) {
              operator delete(v89);
            }
          }
          else
          {
            *(_OWORD *)uint64_t v79 = *(_OWORD *)v81;
            *((_DWORD *)v79 + 4) = *(_DWORD *)(v81 + 28);
            v79 += 24;
          }
          __p[1] = v79;
          float v80 = v80 + (float)(a8 * v82);
          ++v77;
        }
        while (v77 != v78);
      }
      *(float *)&double v116 = v80 - v16;
      v93 = v135;
      if ((unint64_t)v135 >= v136)
      {
        uint64_t v94 = sub_1B4BD3DE0(&v134, (long long **)__p, &v116);
      }
      else
      {
        *(void *)uint64_t v135 = 0;
        *((void *)v93 + 1) = 0;
        *((void *)v93 + 2) = 0;
        sub_1B4BB3170(v93, (long long *)__p[0], (long long *)__p[1], 0xAAAAAAAAAAAAAAABLL * (((char *)__p[1] - (char *)__p[0]) >> 3));
        *((_DWORD *)v93 + 6) = LODWORD(v116);
        uint64_t v94 = (uint64_t)(v93 + 32);
      }
      uint64_t v135 = (char *)v94;
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
    }
    uint64_t v95 = v134;
    for (j = v135; (char *)v95 != j; v95 += 32)
    {
      float v97 = *(float *)(v95 + 24);
      if (v97 != 0.0)
      {
        double v98 = v97 - v75;
        long double v99 = exp(v98);
        if (v98 <= -10.0)
        {
          double v101 = v98 + v99 * -0.5 + v99 * v99 / 24.0 + pow(v99, 4.0) / -2880.0;
        }
        else
        {
          long double v100 = expm1(-v99);
          double v101 = log(-v100);
        }
        float v102 = v101;
        *(float *)(v95 + 24) = v102;
      }
    }
    __p[0] = &v118;
    sub_1B4BB332C((void ***)__p);
    uint64_t v51 = v134;
    unint64_t v50 = v135;
  }
  else
  {
    uint64_t v51 = v134;
    unint64_t v50 = v135;
    if (a4 > (unint64_t)((uint64_t)&v135[-v134] >> 5))
    {
      uint64_t v108 = a3;
      uint64_t v106 = a2;
      do
      {
        memset(&__p[1], 0, 88);
        __p[0] = &unk_1F0D54D20;
        __p[12] = &unk_1F0D54BF0;
        long long v112 = 0u;
        long long v113 = 0u;
        uint64_t v114 = 0;
        uint64_t v115 = 1024;
        sub_1B4BCC57C((uint64_t)__p, a2, a3);
        sub_1B4BCED10(a1, __p);
        v118 = 0;
        char v119 = 0;
        uint64_t v120 = 0;
        sub_1B4BCE8EC(__p, (void **)&v116, a8);
        double v53 = v116;
        double v52 = v117;
        float v54 = 0.0;
        if (*(void *)&v116 != *(void *)&v117)
        {
          unint64_t v55 = v119;
          do
          {
            uint64_t v56 = **(void **)&v53;
            if (v55 >= (long long *)v120)
            {
              unint64_t v57 = 0xAAAAAAAAAAAAAAABLL * (((char *)v55 - (char *)v118) >> 3);
              unint64_t v58 = v57 + 1;
              if (v57 + 1 > 0xAAAAAAAAAAAAAAALL) {
                sub_1B4BB3244();
              }
              if (0x5555555555555556 * ((v120 - (char *)v118) >> 3) > v58) {
                unint64_t v58 = 0x5555555555555556 * ((v120 - (char *)v118) >> 3);
              }
              if (0xAAAAAAAAAAAAAAABLL * ((v120 - (char *)v118) >> 3) >= 0x555555555555555) {
                unint64_t v59 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v59 = v58;
              }
              int v60 = (char *)sub_1B4BB325C((uint64_t)&v120, v59);
              int v62 = &v60[24 * v57];
              *(_OWORD *)int v62 = *(_OWORD *)v56;
              *((_DWORD *)v62 + 4) = *(_DWORD *)(v56 + 28);
              float v64 = v118;
              unint64_t v63 = v119;
              uint64_t v65 = (long long *)v62;
              if (v119 != v118)
              {
                do
                {
                  long long v66 = *(long long *)((char *)v63 - 24);
                  *((void *)v65 - 1) = *((void *)v63 - 1);
                  *(long long *)((char *)v65 - 24) = v66;
                  uint64_t v65 = (long long *)((char *)v65 - 24);
                  unint64_t v63 = (long long *)((char *)v63 - 24);
                }
                while (v63 != v64);
                unint64_t v63 = v118;
              }
              unint64_t v55 = (long long *)(v62 + 24);
              v118 = v65;
              char v119 = (long long *)(v62 + 24);
              uint64_t v120 = &v60[24 * v61];
              if (v63) {
                operator delete(v63);
              }
            }
            else
            {
              long long *v55 = *(_OWORD *)v56;
              *((_DWORD *)v55 + 4) = *(_DWORD *)(v56 + 28);
              unint64_t v55 = (long long *)((char *)v55 + 24);
            }
            char v119 = v55;
            float v54 = v54 + (float)(a8 * *(float *)(v56 + 32));
            *(void *)&v53 += 8;
          }
          while (*(void *)&v53 != *(void *)&v52);
        }
        float v110 = v54 - v16;
        long long v67 = v135;
        if ((unint64_t)v135 >= v136)
        {
          uint64_t v68 = sub_1B4BD3DE0(&v134, &v118, &v110);
        }
        else
        {
          *(void *)uint64_t v135 = 0;
          *((void *)v67 + 1) = 0;
          *((void *)v67 + 2) = 0;
          sub_1B4BB3170(v67, v118, v119, 0xAAAAAAAAAAAAAAABLL * (((char *)v119 - (char *)v118) >> 3));
          *((float *)v67 + 6) = v110;
          uint64_t v68 = (uint64_t)(v67 + 32);
        }
        a2 = v106;
        a3 = v108;
        uint64_t v135 = (char *)v68;
        if (v116 != 0.0)
        {
          double v117 = v116;
          operator delete(*(void **)&v116);
        }
        if (v118)
        {
          char v119 = v118;
          operator delete(v118);
        }
        sub_1B4BCC268((uint64_t)__p);
        uint64_t v51 = v134;
        unint64_t v50 = v135;
      }
      while (a4 > (unint64_t)((uint64_t)&v135[-v134] >> 5));
    }
  }
  *uint64_t v103 = v51;
  v103[1] = (uint64_t)v50;
  v103[2] = v136;
  uint64_t v40 = &v134;
LABEL_114:
  *uint64_t v40 = 0;
  v40[1] = 0;
  void v40[2] = 0;
  if (v121[0])
  {
    v121[1] = v121[0];
    operator delete(v121[0]);
  }
  sub_1B4BCC268((uint64_t)&v122);
  unint64_t v122 = (void **)&v134;
  sub_1B4BB332C(&v122);
}

void sub_1B4BD17BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char *__p, char *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void **a46)
{
  if (__p)
  {
    a19 = __p;
    operator delete(__p);
  }
  std::string __p = &a37;
  sub_1B4BC8E18((void ***)&__p);
  std::string __p = &a40;
  sub_1B4BB332C((void ***)&__p);
  unint64_t v49 = *(void **)(v46 + 200);
  if (v49)
  {
    *(void *)(v46 + 208) = v49;
    operator delete(v49);
  }
  sub_1B4BCC268((uint64_t)&a46);
  a46 = (void **)(v47 - 160);
  sub_1B4BB332C(&a46);
  _Unwind_Resume(a1);
}

float sub_1B4BD192C(uint64_t a1, unsigned __int8 *a2, uint64_t a3, float a4)
{
  float v8 = &unk_1F0D54D20;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  uint64_t v14 = 0;
  uint64_t v15 = &unk_1F0D54BF0;
  long long v16 = 0u;
  long long v17 = 0u;
  uint64_t v18 = 0;
  uint64_t v19 = 1024;
  sub_1B4BCC57C((uint64_t)&v8, a2, a3);
  sub_1B4BCED10(a1, &v8);
  float v6 = sub_1B4BCD144(&v8, a4);
  sub_1B4BCC268((uint64_t)&v8);
  return v6;
}

void sub_1B4BD19EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1B4BCC268((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_1B4BD1A00(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  strcpy(__s, " ");
  size_t v10 = strlen(__s);
  sub_1B4BC8634((char **)&v43, a2, a3, (unsigned __int8 *)__s, v10, 0);
  uint64_t v46 = 0;
  uint64_t v47 = 0;
  std::string __p = 0;
  sub_1B4BD2E7C(&__p, v43, (uint64_t)v44, (v44 - (unsigned char *)v43) >> 4);
  long long v11 = __p;
  long long v12 = v46;
  if (__p == v46)
  {
    float v14 = 0.0;
    if (__p)
    {
LABEL_11:
      uint64_t v46 = v11;
      operator delete(v11);
    }
  }
  else
  {
    float v13 = *(float *)(a1 + 104) + -10.0;
    float v14 = 0.0;
    do
    {
      uint64_t v15 = v11[1];
      uint64_t v16 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)a1 + 112))(a1, *v11, v15);
      if (v16 == *(_DWORD *)(a1 + 88))
      {
        float v14 = v13 + v14;
      }
      else
      {
        if ((*(unsigned int (**)(void, uint64_t))(**(void **)(a1 + 8) + 136))(*(void *)(a1 + 8), v16)) {
          double v17 = (float)(*(float *)(a1 + 108) * (float)(int)v15) + -0.1;
        }
        else {
          double v17 = (*(float (**)(void, uint64_t))(**(void **)(a1 + 8) + 96))(*(void *)(a1 + 8), v16);
        }
        float v14 = v17 + v14;
      }
      v11 += 2;
    }
    while (v11 != v12);
    long long v11 = __p;
    if (__p) {
      goto LABEL_11;
    }
  }
  if (v43)
  {
    uint64_t v44 = v43;
    operator delete(v43);
  }
  strcpy(__s, " ");
  size_t v18 = strlen(__s);
  sub_1B4BC8634((char **)&v43, a4, a5, (unsigned __int8 *)__s, v18, 0);
  long long v41 = 0;
  uint64_t v42 = 0;
  uint64_t v40 = 0;
  sub_1B4BD2E7C(&v40, v43, (uint64_t)v44, (v44 - (unsigned char *)v43) >> 4);
  uint64_t v19 = v40;
  uint64_t v20 = v41;
  if (v40 != v41)
  {
    float v21 = *(float *)(a1 + 104) + -10.0;
    float v22 = 0.0;
    do
    {
      uint64_t v23 = v19[1];
      uint64_t v24 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)a1 + 112))(a1, *v19, v23);
      if (v24 == *(_DWORD *)(a1 + 88))
      {
        float v22 = v21 + v22;
      }
      else
      {
        if ((*(unsigned int (**)(void, uint64_t))(**(void **)(a1 + 8) + 136))(*(void *)(a1 + 8), v24)) {
          double v25 = (float)(*(float *)(a1 + 108) * (float)(int)v23) + -0.1;
        }
        else {
          double v25 = (*(float (**)(void, uint64_t))(**(void **)(a1 + 8) + 96))(*(void *)(a1 + 8), v24);
        }
        float v22 = v25 + v22;
      }
      v19 += 2;
    }
    while (v19 != v20);
    uint64_t v19 = v40;
    if (!v40) {
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  float v22 = 0.0;
  if (v40)
  {
LABEL_24:
    long long v41 = v19;
    operator delete(v19);
  }
LABEL_25:
  if (v43)
  {
    uint64_t v44 = v43;
    operator delete(v43);
  }
  float v26 = vabds_f32(v14, v22);
  if (v26 > 0.0000001 && (int)sub_1B4BE1C40() <= 1)
  {
    LOBYTE(v43) = 0;
    unsigned int v27 = sub_1B4BB34F0(MEMORY[0x1E4FBA240], (uint64_t)"unigram_model.cc", 16);
    sub_1B4BB34F0(v27, (uint64_t)"(", 1);
    uint64_t v28 = (void *)std::ostream::operator<<();
    long long v29 = sub_1B4BB34F0(v28, (uint64_t)") ", 2);
    long long v30 = sub_1B4BB34F0(v29, (uint64_t)"LOG(", 4);
    long long v31 = sub_1B4BB34F0(v30, (uint64_t)"WARNING", 7);
    float v32 = sub_1B4BB34F0(v31, (uint64_t)") ", 2);
    uint64_t v33 = sub_1B4BB34F0(v32, (uint64_t)"Two sentence piece sequences are not equivalent! Left: ", 55);
    uint64_t v34 = sub_1B4BB34F0(v33, a2, a3);
    sub_1B4BB34F0(v34, (uint64_t)", Score: ", 9);
    float v35 = (void *)std::ostream::operator<<();
    long long v36 = sub_1B4BB34F0(v35, (uint64_t)". Right: ", 9);
    long long v37 = sub_1B4BB34F0(v36, a4, a5);
    sub_1B4BB34F0(v37, (uint64_t)", Score: ", 9);
    uint64_t v38 = (void *)std::ostream::operator<<();
    sub_1B4BB34F0(v38, (uint64_t)".", 1);
    sub_1B4BB239C(&v43);
  }
  return v26 <= 0.0000001;
}

void sub_1B4BD1E68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B4BD1EC4(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  sub_1B4BB113C(a1, &v13);
  memset(&__p, 0, sizeof(__p));
  std::string::resize(&__p, 4uLL, 0);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  LODWORD(p_p->__r_.__value_.__l.__data_) = *(_DWORD *)(a1 + 104);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v5 = &__p;
  }
  else {
    unint64_t v5 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  std::string::append(a2, (const std::string::value_type *)v5, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  memset(&__p, 0, sizeof(__p));
  std::string::resize(&__p, 4uLL, 0);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unsigned int v7 = &__p;
  }
  else {
    unsigned int v7 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  LODWORD(v7->__r_.__value_.__l.__data_) = *(_DWORD *)(a1 + 108);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    float v8 = &__p;
  }
  else {
    float v8 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v9 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v9 = __p.__r_.__value_.__l.__size_;
  }
  std::string::append(a2, (const std::string::value_type *)v8, v9);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v10 = &v13;
  }
  else {
    size_t v10 = (std::string *)v13.__r_.__value_.__r.__words[0];
  }
  if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v11 = HIBYTE(v13.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v11 = v13.__r_.__value_.__l.__size_;
  }
  std::string::append(a2, (const std::string::value_type *)v10, v11);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
}

void sub_1B4BD2004(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v20 + 23) < 0) {
    operator delete(*(void **)v20);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1B4BD205C()
{
  return 1;
}

uint64_t sub_1B4BD2064()
{
  return 1;
}

uint64_t sub_1B4BD206C()
{
  return 1;
}

uint64_t sub_1B4BD2074()
{
  return 1;
}

void *sub_1B4BD207C(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    float v6 = result;
    uint64_t result = sub_1B4BCB53C(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1B4BD20DC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_1B4BD20F8(uint64_t a1, unsigned char *a2, uint64_t a3, unint64_t a4, uint64_t a5, int a6)
{
  std::string::size_type v9 = *(unsigned int **)(a1 + 16);
  unsigned int v10 = *v9;
  if (a5)
  {
    int v11 = *a2;
    unint64_t v12 = (v10 >> 10 << ((v10 >> 6) & 8)) ^ v11;
    unsigned int v10 = v9[v12];
    if ((v10 & 0x800000FF) == v11)
    {
      uint64_t v13 = a5 - 1;
      float v14 = a2 + 1;
      while (1)
      {
        unint64_t v15 = v12;
        if (!v13) {
          goto LABEL_16;
        }
        int v16 = *v14++;
        unint64_t v12 = (v10 >> 10 << ((v10 >> 6) & 8)) ^ v12 ^ v16;
        unsigned int v10 = v9[v12];
        --v13;
        if ((v10 & 0x800000FF) != v16) {
          goto LABEL_14;
        }
      }
    }
  }
  else
  {
    int v17 = *a2;
    if (!*a2)
    {
      unint64_t v15 = 0;
      LODWORD(v12) = 0;
LABEL_16:
      if ((v10 & 0x100) != 0) {
        int v22 = v9[(v10 >> 10 << ((v10 >> 6) & 8)) ^ v12] & 0x7FFFFFFF;
      }
      else {
        int v22 = -1;
      }
      goto LABEL_19;
    }
    unint64_t v18 = (v10 >> 10 << ((v10 >> 6) & 8)) ^ v17;
    unsigned int v10 = v9[v18];
    if ((v10 & 0x800000FF) == v17)
    {
      uint64_t v19 = a2 + 1;
      LODWORD(v12) = v18;
      while (1)
      {
        unint64_t v15 = v18;
        int v21 = *v19++;
        int v20 = v21;
        if (!v21) {
          goto LABEL_16;
        }
        unint64_t v18 = (v10 >> 10 << ((v10 >> 6) & 8)) ^ v12 ^ v20;
        unsigned int v10 = v9[v18];
        LODWORD(v12) = v18;
        if ((v10 & 0x800000FF) != v20) {
          goto LABEL_14;
        }
      }
    }
  }
  unint64_t v15 = 0;
LABEL_14:
  int v22 = -2;
LABEL_19:
  long long v44 = 0u;
  memset(v43, 0, sizeof(v43));
  v41.n128_u32[0] = 0;
  v41.n128_u64[1] = v15;
  int v42 = v22;
  sub_1B4BD2430(v43, &v41);
  uint64_t v23 = *((void *)&v44 + 1);
  if (*((void *)&v44 + 1))
  {
    unint64_t v24 = 0;
    do
    {
      double v25 = (int *)(*(void *)(*((void *)&v43[0] + 1) + 8 * ((unint64_t)v44 / 0xAA))
                  + 24 * ((unint64_t)v44 % 0xAA));
      int v26 = *v25;
      uint64_t v27 = v25[2];
      int v28 = v25[4];
      *(void *)&long long v44 = v44 + 1;
      *((void *)&v44 + 1) = v23 - 1;
      if ((unint64_t)v44 >= 0x154)
      {
        operator delete(**((void ***)&v43[0] + 1));
        *((void *)&v43[0] + 1) += 8;
        *(void *)&long long v44 = v44 - 170;
      }
      if ((v28 & 0x80000000) == 0)
      {
        uint64_t v29 = a3 + 16 * v24;
        *(_DWORD *)uint64_t v29 = v28;
        *(void *)(v29 + 8) = a5;
        ++v24;
      }
      BOOL v31 = a6 >= 0 && v26 > a6;
      if (v24 >= a4 || v31) {
        break;
      }
      if (v28 != -2)
      {
        unsigned __int32 v32 = v26 + 1;
        for (int i = 1; i != 256; ++i)
        {
          uint64_t v34 = *(void *)(a1 + 16);
          unint64_t v35 = (*(_DWORD *)(v34 + 4 * v27) >> 10 << ((*(_DWORD *)(v34 + 4 * v27) >> 6) & 8)) ^ v27 ^ i;
          unsigned int v36 = *(_DWORD *)(v34 + 4 * v35);
          if (i == (v36 & 0x800000FF))
          {
            if ((v36 & 0x100) != 0) {
              int v37 = *(_DWORD *)(v34 + 4 * ((v36 >> 10 << ((v36 >> 6) & 8)) ^ v35)) & 0x7FFFFFFF;
            }
            else {
              int v37 = -1;
            }
            v41.n128_u32[0] = v32;
            v41.n128_u64[1] = v35;
            int v42 = v37;
            sub_1B4BD2430(v43, &v41);
          }
        }
      }
      uint64_t v23 = *((void *)&v44 + 1);
    }
    while (*((void *)&v44 + 1));
  }
  else
  {
    unint64_t v24 = 0;
  }
  sub_1B4BD2C64(v43);
  return v24;
}

void sub_1B4BD23E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_1B4BD2C64((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1B4BD2400(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 4;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 16 * a2;
    }
  }
  else
  {
    sub_1B4BD2D5C((void **)a1, a2 - v2);
  }
}

__n128 sub_1B4BD2430(void *a1, __n128 *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 170 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_1B4BD24E0(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  size_t v8 = (__n128 *)(*(void *)(v5 + 8 * (v7 / 0xAA)) + 24 * (v7 % 0xAA));
  __n128 result = *a2;
  v8[1].n128_u64[0] = a2[1].n128_u64[0];
  __n128 *v8 = result;
  ++a1[5];
  return result;
}

void sub_1B4BD24E0(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0xAA;
  unint64_t v4 = v2 - 170;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    unint64_t v7 = (void *)a1[1];
    size_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    std::string::size_type v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)size_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_1B4BB3A38(v5, v33);
      unint64_t v35 = &v34[8 * (v33 >> 2)];
      int v37 = &v34[8 * v36];
      uint64_t v38 = (uint64_t *)a1[1];
      size_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        size_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        __n128 v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)__n128 v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    uint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      std::string::size_type v9 = (char *)a1[1];
    }
    size_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0xFF0uLL);
      sub_1B4BD27F8(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0xFF0uLL);
    sub_1B4BD2910((uint64_t)a1, &v54);
    long long v44 = (void *)a1[1];
    size_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    std::string::size_type v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_1B4BB3A38((uint64_t)(a1 + 3), v46);
      unint64_t v35 = &v34[8 * (v46 >> 2)];
      int v37 = &v34[8 * v47];
      unint64_t v48 = (uint64_t *)a1[1];
      size_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        size_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        uint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)uint64_t v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        size_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  uint64_t v56 = a1 + 3;
  *(void *)&long long v54 = sub_1B4BB3A38((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  double v53 = operator new(0xFF0uLL);
  sub_1B4BD2A30(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1B4BD2B48((uint64_t)&v54, v27);
  }
  uint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_1B4BD27AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B4BD27F8(void *a1, void *a2)
{
  uint64_t v5 = (char *)a1[3];
  uint64_t v4 = (uint64_t)(a1 + 3);
  uint64_t v6 = *(char **)(v4 - 8);
  if (v6 == v5)
  {
    unint64_t v7 = (char *)a1[1];
    uint64_t v8 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1) {
        unint64_t v18 = 1;
      }
      else {
        unint64_t v18 = (uint64_t)&v6[-*a1] >> 2;
      }
      uint64_t v19 = (char *)sub_1B4BB3A38(v4, v18);
      uint64_t v21 = &v19[8 * (v18 >> 2)];
      unint64_t v22 = (uint64_t *)a1[1];
      uint64_t v6 = v21;
      uint64_t v23 = a1[2] - (void)v22;
      if (v23)
      {
        uint64_t v6 = &v21[v23 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v24 = 8 * (v23 >> 3);
        unint64_t v25 = &v19[8 * (v18 >> 2)];
        do
        {
          uint64_t v26 = *v22++;
          *(void *)unint64_t v25 = v26;
          v25 += 8;
          v24 -= 8;
        }
        while (v24);
      }
      uint64_t v27 = (char *)*a1;
      *a1 = v19;
      a1[1] = v21;
      a1[2] = v6;
      a1[3] = &v19[8 * v20];
      if (v27)
      {
        operator delete(v27);
        uint64_t v6 = (char *)a1[2];
      }
    }
    else
    {
      uint64_t v9 = v8 >> 3;
      BOOL v10 = v8 >> 3 < -1;
      uint64_t v11 = (v8 >> 3) + 2;
      if (v10) {
        uint64_t v12 = v11;
      }
      else {
        uint64_t v12 = v9 + 1;
      }
      uint64_t v13 = -(v12 >> 1);
      uint64_t v14 = v12 >> 1;
      uint64_t v15 = &v7[-8 * v14];
      int64_t v16 = v6 - v7;
      if (v6 != v7)
      {
        memmove(&v7[-8 * v14], v7, v6 - v7);
        uint64_t v6 = (char *)a1[1];
      }
      uint64_t v17 = &v6[8 * v13];
      uint64_t v6 = &v15[v16];
      a1[1] = v17;
      a1[2] = &v15[v16];
    }
  }
  *(void *)uint64_t v6 = *a2;
  a1[2] += 8;
}

void sub_1B4BD2910(uint64_t a1, void *a2)
{
  uint64_t v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    uint64_t v6 = a1 + 24;
    unint64_t v7 = *(unsigned char **)(a1 + 24);
    uint64_t v8 = *(unsigned char **)(a1 + 16);
    if (v8 >= v7)
    {
      if (v7 == v4) {
        unint64_t v12 = 1;
      }
      else {
        unint64_t v12 = (v7 - v4) >> 2;
      }
      uint64_t v13 = 2 * v12;
      uint64_t v14 = (char *)sub_1B4BB3A38(v6, v12);
      uint64_t v5 = &v14[(v13 + 6) & 0xFFFFFFFFFFFFFFF8];
      int64_t v16 = *(uint64_t **)(a1 + 8);
      uint64_t v17 = v5;
      uint64_t v18 = *(void *)(a1 + 16) - (void)v16;
      if (v18)
      {
        uint64_t v17 = &v5[v18 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v19 = 8 * (v18 >> 3);
        uint64_t v20 = v5;
        do
        {
          uint64_t v21 = *v16++;
          *(void *)uint64_t v20 = v21;
          v20 += 8;
          v19 -= 8;
        }
        while (v19);
      }
      unint64_t v22 = *(char **)a1;
      *(void *)a1 = v14;
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = v17;
      *(void *)(a1 + 24) = &v14[8 * v15];
      if (v22)
      {
        operator delete(v22);
        uint64_t v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      uint64_t v9 = (v7 - v8) >> 3;
      if (v9 >= -1) {
        uint64_t v10 = v9 + 1;
      }
      else {
        uint64_t v10 = v9 + 2;
      }
      uint64_t v11 = v10 >> 1;
      uint64_t v5 = &v4[8 * (v10 >> 1)];
      if (v8 != v4)
      {
        memmove(&v4[8 * (v10 >> 1)], v4, v8 - v4);
        uint64_t v4 = *(char **)(a1 + 16);
      }
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = &v4[8 * v11];
    }
  }
  else
  {
    uint64_t v5 = *(char **)(a1 + 8);
  }
  *((void *)v5 - 1) = *a2;
  *(void *)(a1 + 8) -= 8;
}

void sub_1B4BD2A30(void *a1, void *a2)
{
  uint64_t v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    uint64_t v5 = (char *)a1[1];
    uint64_t v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1) {
        unint64_t v16 = 1;
      }
      else {
        unint64_t v16 = (uint64_t)&v4[-*a1] >> 2;
      }
      uint64_t v17 = (char *)sub_1B4BB3A38(a1[4], v16);
      uint64_t v19 = &v17[8 * (v16 >> 2)];
      uint64_t v20 = (uint64_t *)a1[1];
      uint64_t v4 = v19;
      uint64_t v21 = a1[2] - (void)v20;
      if (v21)
      {
        uint64_t v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v22 = 8 * (v21 >> 3);
        uint64_t v23 = &v17[8 * (v16 >> 2)];
        do
        {
          uint64_t v24 = *v20++;
          *(void *)uint64_t v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      unint64_t v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        uint64_t v4 = (char *)a1[2];
      }
    }
    else
    {
      uint64_t v7 = v6 >> 3;
      BOOL v8 = v6 >> 3 < -1;
      uint64_t v9 = (v6 >> 3) + 2;
      if (v8) {
        uint64_t v10 = v9;
      }
      else {
        uint64_t v10 = v7 + 1;
      }
      uint64_t v11 = -(v10 >> 1);
      uint64_t v12 = v10 >> 1;
      uint64_t v13 = &v5[-8 * v12];
      int64_t v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        uint64_t v4 = (char *)a1[1];
      }
      uint64_t v15 = &v4[8 * v11];
      uint64_t v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(void *)uint64_t v4 = *a2;
  a1[2] += 8;
}

void sub_1B4BD2B48(uint64_t a1, void *a2)
{
  uint64_t v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    uint64_t v6 = *(unsigned char **)(a1 + 16);
    uint64_t v7 = *(unsigned char **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4) {
        unint64_t v11 = 1;
      }
      else {
        unint64_t v11 = (v7 - v4) >> 2;
      }
      uint64_t v12 = 2 * v11;
      uint64_t v13 = (char *)sub_1B4BB3A38(*(void *)(a1 + 32), v11);
      uint64_t v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      uint64_t v15 = *(uint64_t **)(a1 + 8);
      unint64_t v16 = v5;
      uint64_t v17 = *(void *)(a1 + 16) - (void)v15;
      if (v17)
      {
        unint64_t v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v18 = 8 * (v17 >> 3);
        uint64_t v19 = v5;
        do
        {
          uint64_t v20 = *v15++;
          *(void *)uint64_t v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      uint64_t v21 = *(char **)a1;
      *(void *)a1 = v13;
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = v16;
      *(void *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        uint64_t v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      uint64_t v8 = (v7 - v6) >> 3;
      if (v8 >= -1) {
        uint64_t v9 = v8 + 1;
      }
      else {
        uint64_t v9 = v8 + 2;
      }
      uint64_t v10 = v9 >> 1;
      uint64_t v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        uint64_t v4 = *(char **)(a1 + 16);
      }
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    uint64_t v5 = *(char **)(a1 + 8);
  }
  *((void *)v5 - 1) = *a2;
  *(void *)(a1 + 8) -= 8;
}

uint64_t sub_1B4BD2C64(void *a1)
{
  unint64_t v2 = (void **)a1[1];
  BOOL v3 = (void **)a1[2];
  a1[5] = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      BOOL v3 = (void **)a1[2];
      unint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 85;
  }
  else
  {
    if (v5 != 2) {
      goto LABEL_9;
    }
    uint64_t v6 = 170;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    uint64_t v7 = *v2++;
    operator delete(v7);
  }
  return sub_1B4BD2D0C((uint64_t)a1);
}

uint64_t sub_1B4BD2D0C(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != v3) {
    *(void *)(a1 + 16) = v2 + ((v3 - v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  unint64_t v4 = *(void **)a1;
  if (*(void *)a1) {
    operator delete(v4);
  }
  return a1;
}

void sub_1B4BD2D5C(void **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 4)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 16 * a2);
      v7 += 16 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - (unsigned char *)*a1;
    unint64_t v9 = a2 + (v8 >> 4);
    if (v9 >> 60) {
      sub_1B4BB3244();
    }
    uint64_t v10 = v8 >> 4;
    uint64_t v11 = v5 - (unsigned char *)*a1;
    if (v11 >> 3 > v9) {
      unint64_t v9 = v11 >> 3;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    if (v12) {
      uint64_t v13 = (char *)sub_1B4BB4140(v4, v12);
    }
    else {
      uint64_t v13 = 0;
    }
    uint64_t v14 = &v13[16 * v10];
    uint64_t v15 = &v13[16 * v12];
    bzero(v14, 16 * a2);
    unint64_t v16 = &v14[16 * a2];
    uint64_t v18 = (char *)*a1;
    uint64_t v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        *((_OWORD *)v14 - 1) = *((_OWORD *)v17 - 1);
        v14 -= 16;
        v17 -= 16;
      }
      while (v17 != v18);
      uint64_t v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
    {
      operator delete(v17);
    }
  }
}

void *sub_1B4BD2E7C(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    __n128 result = sub_1B4BB7064(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      __n128 result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1B4BD2EDC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B4BD2EF8(void *a1)
{
  sub_1B4BD2F30(a1);
  JUMPOUT(0x1BA9929C0);
}

void *sub_1B4BD2F30(void *a1)
{
  *a1 = &unk_1F0D54BF0;
  uint64_t v2 = (void *)a1[1];
  uint64_t v3 = (void *)a1[2];
  if (v2 != v3)
  {
    do
    {
      if (*v2) {
        MEMORY[0x1BA992990](*v2, 0x1070C8005A2B047);
      }
      ++v2;
    }
    while (v2 != v3);
    uint64_t v2 = (void *)a1[1];
  }
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_1B4BD2FC0(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      size_t v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL) {
      sub_1B4BB3244();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v19 = v4;
    if (v11) {
      unint64_t v12 = (char *)sub_1B4BB325C(v4, v11);
    }
    else {
      unint64_t v12 = 0;
    }
    uint64_t v15 = v12;
    unint64_t v16 = &v12[24 * v8];
    uint64_t v18 = &v12[24 * v11];
    size_t v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    uint64_t v17 = &v16[v14];
    sub_1B4BD3128(a1, &v15);
    sub_1B4BCAAB4((uint64_t)&v15);
  }
}

void sub_1B4BD3114(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1B4BCAAB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B4BD3128(uint64_t *a1, void *a2)
{
  uint64_t result = sub_1B4BD31A0((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1B4BD31A0(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  void v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  sub_1B4BD3244((uint64_t)v11);
  return v9;
}

uint64_t sub_1B4BD3244(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_1B4BCAA6C(a1);
  }
  return a1;
}

uint64_t sub_1B4BD327C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  std::string v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *(void *)uint64_t v4 = 0;
      *(void *)(v4 + 8) = 0;
      *(void *)(v4 + 16) = 0;
      sub_1B4BD207C((void *)v4, *(const void **)v6, *(void *)(v6 + 8), (uint64_t)(*(void *)(v6 + 8) - *(void *)v6) >> 3);
      *(_DWORD *)(v4 + 24) = *(_DWORD *)(v6 + 24);
      uint64_t v4 = v11 + 32;
      v11 += 32;
      v6 += 32;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  sub_1B4BD3338((uint64_t)v8);
  return v4;
}

void sub_1B4BD3324(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1B4BD3338(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_1B4BB32DC(a1);
  }
  return a1;
}

void sub_1B4BD3370(void *a1)
{
  sub_1B4BCE85C(a1);
  JUMPOUT(0x1BA9929C0);
}

uint64_t sub_1B4BD33A8(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a3 >= 2)
  {
    unint64_t v3 = (unint64_t)(a3 - 2) >> 1;
    uint64_t v4 = (void *)(result + 8 * v3);
    uint64_t v5 = *v4;
    uint64_t v8 = *(void *)(a2 - 8);
    uint64_t v6 = (void *)(a2 - 8);
    uint64_t v7 = v8;
    float v9 = *(float *)(v8 + 16);
    if (*(float *)(*v4 + 16) < v9)
    {
      do
      {
        uint64_t v10 = v4;
        void *v6 = v5;
        if (!v3) {
          break;
        }
        unint64_t v3 = (v3 - 1) >> 1;
        uint64_t v4 = (void *)(result + 8 * v3);
        uint64_t v5 = *v4;
        uint64_t v6 = v10;
      }
      while (*(float *)(*v4 + 16) < v9);
      *uint64_t v10 = v7;
    }
  }
  return result;
}

uint64_t sub_1B4BD3404(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(result - 8);
  if (a2 <= (v6 - v7) >> 5)
  {
    if (a2)
    {
      uint64_t v14 = 32 * a2;
      uint64_t v15 = v7 + 32 * a2;
      do
      {
        *(void *)uint64_t v7 = 0;
        *(void *)(v7 + 8) = 0;
        *(_DWORD *)(v7 + 24) = 0;
        *(void *)(v7 + 16) = 0;
        v7 += 32;
        v14 -= 32;
      }
      while (v14);
      uint64_t v7 = v15;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - *a1;
    unint64_t v9 = a2 + (v8 >> 5);
    if (v9 >> 59) {
      sub_1B4BB3244();
    }
    uint64_t v10 = v8 >> 5;
    uint64_t v11 = v5 - *a1;
    if (v11 >> 4 > v9) {
      unint64_t v9 = v11 >> 4;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v12 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    v19[4] = result;
    if (v12) {
      long long v13 = (char *)sub_1B4BCABC0(result, v12);
    }
    else {
      long long v13 = 0;
    }
    unint64_t v16 = &v13[32 * v10];
    v19[0] = v13;
    v19[1] = v16;
    v19[3] = &v13[32 * v12];
    uint64_t v17 = 32 * a2;
    uint64_t v18 = &v16[32 * a2];
    do
    {
      *(void *)unint64_t v16 = 0;
      *((void *)v16 + 1) = 0;
      *((_DWORD *)v16 + 6) = 0;
      *((void *)v16 + 2) = 0;
      v16 += 32;
      v17 -= 32;
    }
    while (v17);
    v19[2] = v18;
    sub_1B4BD352C(a1, v19);
    return sub_1B4BCB0D8((uint64_t)v19);
  }
  return result;
}

void sub_1B4BD3518(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1B4BCB0D8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B4BD352C(uint64_t *a1, void *a2)
{
  uint64_t result = sub_1B4BD35A4((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1B4BD35A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  void v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 32) = 0;
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      long long v8 = *(_OWORD *)(a3 - 32);
      a3 -= 32;
      *(_OWORD *)(v7 - 32) = v8;
      *(void *)(v7 - 16) = *(void *)(a3 + 16);
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      *(void *)a3 = 0;
      *(_DWORD *)(v7 - 8) = *(_DWORD *)(a3 + 24);
      uint64_t v7 = *((void *)&v14 + 1) - 32;
      *((void *)&v14 + 1) -= 32;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  sub_1B4BD3650((uint64_t)v11);
  return v9;
}

uint64_t sub_1B4BD3650(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_1B4BCB090(a1);
  }
  return a1;
}

void *sub_1B4BD3688(void *a1, unint64_t a2, void *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_1B4BCB53C(a1, a2);
    uint64_t v6 = (void *)a1[1];
    uint64_t v7 = &v6[a2];
    uint64_t v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_1B4BD36F0(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

float sub_1B4BD370C(uint64_t a1, long long **a2, float *a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)uint64_t v5 = 0;
  *(void *)(v5 + 8) = 0;
  *(void *)(v5 + 16) = 0;
  sub_1B4BB3170((char *)v5, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  float result = *a3;
  *(float *)(v5 + 24) = *a3;
  *(void *)(a1 + 8) = v5 + 32;
  return result;
}

void sub_1B4BD3778(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_1B4BD3780(uint64_t *a1, long long **a2, _DWORD *a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = (a1[1] - *a1) >> 5;
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59) {
    sub_1B4BB3244();
  }
  uint64_t v9 = (uint64_t)(a1 + 2);
  uint64_t v10 = a1[2] - v4;
  if (v10 >> 4 > v6) {
    unint64_t v6 = v10 >> 4;
  }
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v11 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v11 = v6;
  }
  uint64_t v19 = a1 + 2;
  if (v11) {
    char v12 = (char *)sub_1B4BCABC0(v9, v11);
  }
  else {
    char v12 = 0;
  }
  long long v13 = &v12[32 * v5];
  v16[0] = v12;
  v16[1] = v13;
  uint64_t v17 = v13;
  uint64_t v18 = &v12[32 * v11];
  *(void *)long long v13 = 0;
  *((void *)v13 + 1) = 0;
  *((void *)v13 + 2) = 0;
  sub_1B4BB3170(v13, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  *((_DWORD *)v13 + 6) = *a3;
  v17 += 32;
  sub_1B4BD3890(a1, v16);
  uint64_t v14 = a1[1];
  sub_1B4BCB0D8((uint64_t)v16);
  return v14;
}

void sub_1B4BD387C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1B4BCB0D8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B4BD3890(uint64_t *a1, void *a2)
{
  uint64_t result = sub_1B4BD3908((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1B4BD3908(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  void v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 32) = 0;
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      long long v8 = *(_OWORD *)(a3 - 32);
      a3 -= 32;
      *(_OWORD *)(v7 - 32) = v8;
      *(void *)(v7 - 16) = *(void *)(a3 + 16);
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      *(void *)a3 = 0;
      *(_DWORD *)(v7 - 8) = *(_DWORD *)(a3 + 24);
      uint64_t v7 = *((void *)&v14 + 1) - 32;
      *((void *)&v14 + 1) -= 32;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  sub_1B4BD39B4((uint64_t)v11);
  return v9;
}

uint64_t sub_1B4BD39B4(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_1B4BCB090(a1);
  }
  return a1;
}

uint64_t sub_1B4BD39EC(uint64_t *a1, long long **a2, double *a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = (a1[1] - *a1) >> 5;
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59) {
    sub_1B4BB3244();
  }
  uint64_t v9 = (uint64_t)(a1 + 2);
  uint64_t v10 = a1[2] - v4;
  if (v10 >> 4 > v6) {
    unint64_t v6 = v10 >> 4;
  }
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v11 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v11 = v6;
  }
  uint64_t v20 = a1 + 2;
  if (v11) {
    char v12 = (char *)sub_1B4BCABC0(v9, v11);
  }
  else {
    char v12 = 0;
  }
  long long v13 = &v12[32 * v5];
  v17[0] = v12;
  v17[1] = v13;
  uint64_t v18 = v13;
  uint64_t v19 = &v12[32 * v11];
  *(void *)long long v13 = 0;
  *((void *)v13 + 1) = 0;
  *((void *)v13 + 2) = 0;
  sub_1B4BB3170(v13, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  float v14 = *a3;
  *((float *)v13 + 6) = v14;
  v18 += 32;
  sub_1B4BD3890(a1, v17);
  uint64_t v15 = a1[1];
  sub_1B4BCB0D8((uint64_t)v17);
  return v15;
}

void sub_1B4BD3AEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1B4BCB0D8((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_1B4BD3B00(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_1B4BB31F0(a1, a2);
    uint64_t v4 = (char *)a1[1];
    size_t v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_1B4BD3B90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

char *sub_1B4BD3BA4(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  uint64_t v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 3)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      void *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 61) {
      sub_1B4BB3244();
    }
    uint64_t v10 = v8 >> 2;
    if (v8 >> 2 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    uint64_t result = sub_1B4BCB53C(v7, v11);
    long long v13 = (char *)v7[1];
    char v12 = (void **)(v7 + 1);
    uint64_t v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      uint64_t v18 = v9;
      uint64_t v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  char v12 = (void **)(result + 8);
  float v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 3;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  unint64_t v16 = &__src[8 * v15];
  if (v14 != v9)
  {
    uint64_t result = (char *)memmove(*(void **)result, __src, v14 - v9);
    uint64_t v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    uint64_t v18 = v9;
    uint64_t v19 = v16;
LABEL_18:
    uint64_t result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *char v12 = &v9[v17];
  return result;
}

uint64_t sub_1B4BD3CB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a1;
  if (a1 != a2)
  {
    size_t v5 = *(const void **)a3;
    size_t v6 = *(void *)(a3 + 8) - *(void *)a3;
    while (*(void *)(v3 + 8) - *(void *)v3 != v6 || memcmp(*(const void **)v3, v5, v6))
    {
      v3 += 24;
      if (v3 == a2) {
        return a2;
      }
    }
  }
  return v3;
}

__n128 *sub_1B4BD3D20(__n128 *a1, __n128 *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  if (a1 == a2) {
    return a1;
  }
  size_t v5 = a2;
  do
  {
    sub_1B4BD3D8C(a3, v4);
    *(_DWORD *)(a3 + 24) = v4[1].n128_u32[2];
    a3 += 32;
    v4 += 2;
  }
  while (v4 != v5);
  return v5;
}

__n128 sub_1B4BD3D8C(uint64_t a1, __n128 *a2)
{
  uint64_t v4 = *(void **)a1;
  if (v4)
  {
    *(void *)(a1 + 8) = v4;
    operator delete(v4);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
  }
  __n128 result = *a2;
  *(__n128 *)a1 = *a2;
  *(void *)(a1 + 16) = a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  return result;
}

uint64_t sub_1B4BD3DE0(uint64_t *a1, long long **a2, _DWORD *a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = (a1[1] - *a1) >> 5;
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59) {
    sub_1B4BB3244();
  }
  uint64_t v9 = (uint64_t)(a1 + 2);
  uint64_t v10 = a1[2] - v4;
  if (v10 >> 4 > v6) {
    unint64_t v6 = v10 >> 4;
  }
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v11 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v11 = v6;
  }
  uint64_t v19 = a1 + 2;
  if (v11) {
    char v12 = (char *)sub_1B4BCABC0(v9, v11);
  }
  else {
    char v12 = 0;
  }
  long long v13 = &v12[32 * v5];
  v16[0] = v12;
  v16[1] = v13;
  size_t v17 = v13;
  uint64_t v18 = &v12[32 * v11];
  *(void *)long long v13 = 0;
  *((void *)v13 + 1) = 0;
  *((void *)v13 + 2) = 0;
  sub_1B4BB3170(v13, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  *((_DWORD *)v13 + 6) = *a3;
  v17 += 32;
  sub_1B4BD3890(a1, v16);
  uint64_t v14 = a1[1];
  sub_1B4BCB0D8((uint64_t)v16);
  return v14;
}

void sub_1B4BD3EDC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1B4BCB0D8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B4BD3EF0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)sub_1B4BCF790(a1);
  void *v4 = &unk_1F0D54D40;
  v4[1] = a2 + 16;
  sub_1B4BB0310((uint64_t)v4);
  return a1;
}

void sub_1B4BD3F40(_Unwind_Exception *a1)
{
  sub_1B4BAFD0C(v1);
  _Unwind_Resume(a1);
}

void sub_1B4BD3F5C(void *a1)
{
  sub_1B4BAFD0C(a1);
  JUMPOUT(0x1BA9929C0);
}

void sub_1B4BD3F94(uint64_t *a1@<X0>, unsigned char *a2@<X1>, uint64_t a3@<X2>, void **a4@<X8>)
{
  (*(void (**)(uint64_t *__return_ptr))(*a1 + 16))(&v25);
  if (v25)
  {
    sub_1B4BE3D8C(&v25);
LABEL_3:
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    return;
  }
  sub_1B4BE3D8C(&v25);
  if (!a3) {
    goto LABEL_3;
  }
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  do
  {
    uint64_t v8 = (int)sub_1B4BB8544(a1[2], a2, a3, 0);
    int v9 = (*(uint64_t (**)(uint64_t *, unsigned char *, uint64_t))(*a1 + 112))(a1, a2, v8);
    int v10 = v9;
    char v12 = (char *)a4[1];
    unint64_t v11 = (char *)a4[2];
    if (v12 >= v11)
    {
      unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((v12 - (unsigned char *)*a4) >> 3);
      unint64_t v15 = v14 + 1;
      if (v14 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_1B4BB3244();
      }
      unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((v11 - (unsigned char *)*a4) >> 3);
      if (2 * v16 > v15) {
        unint64_t v15 = 2 * v16;
      }
      if (v16 >= 0x555555555555555) {
        unint64_t v17 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v17 = v15;
      }
      uint64_t v18 = (char *)sub_1B4BB325C((uint64_t)(a4 + 2), v17);
      uint64_t v20 = &v18[24 * v14];
      *(void *)uint64_t v20 = a2;
      *((void *)v20 + 1) = v8;
      *((_DWORD *)v20 + 4) = v10;
      uint64_t v22 = (char *)*a4;
      uint64_t v21 = (char *)a4[1];
      uint64_t v23 = v20;
      if (v21 != *a4)
      {
        do
        {
          long long v24 = *(_OWORD *)(v21 - 24);
          *((void *)v23 - 1) = *((void *)v21 - 1);
          *(_OWORD *)(v23 - 24) = v24;
          v23 -= 24;
          v21 -= 24;
        }
        while (v21 != v22);
        uint64_t v21 = (char *)*a4;
      }
      long long v13 = v20 + 24;
      *a4 = v23;
      a4[1] = v20 + 24;
      a4[2] = &v18[24 * v19];
      if (v21) {
        operator delete(v21);
      }
    }
    else
    {
      *(void *)char v12 = a2;
      *((void *)v12 + 1) = v8;
      long long v13 = v12 + 24;
      *((_DWORD *)v12 + 4) = v9;
    }
    a4[1] = v13;
    a2 += v8;
    a3 -= v8;
  }
  while (a3);
}

void sub_1B4BD4188(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1B4BD41AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)sub_1B4BCF790(a1);
  void *v4 = &unk_1F0D54AE0;
  v4[1] = a2 + 16;
  sub_1B4BB0310((uint64_t)v4);
  return a1;
}

void sub_1B4BD41FC(_Unwind_Exception *a1)
{
  sub_1B4BAFD0C(v1);
  _Unwind_Resume(a1);
}

void sub_1B4BD4218(void *a1)
{
  sub_1B4BAFD0C(a1);
  JUMPOUT(0x1BA9929C0);
}

void sub_1B4BD4250(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, void **a4@<X8>)
{
  (*(void (**)(unsigned __int8 ***__return_ptr))(*(void *)a1 + 16))(&v26);
  if (v26)
  {
    sub_1B4BE3D8C((uint64_t *)&v26);
LABEL_3:
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    return;
  }
  sub_1B4BE3D8C((uint64_t *)&v26);
  if (!a3) {
    goto LABEL_3;
  }
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  sub_1B4BB147C(a2, a3, 0, 0, &v26);
  uint64_t v8 = v26;
  int v9 = v27;
  if (v26 != v27)
  {
    do
    {
      int v10 = (*(uint64_t (**)(uint64_t, unsigned __int8 *, unsigned __int8 *))(*(void *)a1 + 112))(a1, *v8, v8[1]);
      int v11 = v10;
      long long v13 = (char *)a4[1];
      char v12 = (char *)a4[2];
      if (v13 >= v12)
      {
        unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((v13 - (unsigned char *)*a4) >> 3);
        unint64_t v16 = v15 + 1;
        if (v15 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_1B4BB3244();
        }
        unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((v12 - (unsigned char *)*a4) >> 3);
        if (2 * v17 > v16) {
          unint64_t v16 = 2 * v17;
        }
        if (v17 >= 0x555555555555555) {
          unint64_t v18 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v18 = v16;
        }
        uint64_t v19 = (char *)sub_1B4BB325C((uint64_t)(a4 + 2), v18);
        uint64_t v21 = &v19[24 * v15];
        *(_OWORD *)uint64_t v21 = *(_OWORD *)v8;
        *((_DWORD *)v21 + 4) = v11;
        uint64_t v23 = (char *)*a4;
        uint64_t v22 = (char *)a4[1];
        long long v24 = v21;
        if (v22 != *a4)
        {
          do
          {
            long long v25 = *(_OWORD *)(v22 - 24);
            *((void *)v24 - 1) = *((void *)v22 - 1);
            *(_OWORD *)(v24 - 24) = v25;
            v24 -= 24;
            v22 -= 24;
          }
          while (v22 != v23);
          uint64_t v22 = (char *)*a4;
        }
        unint64_t v14 = v21 + 24;
        *a4 = v24;
        a4[1] = v21 + 24;
        a4[2] = &v19[24 * v20];
        if (v22) {
          operator delete(v22);
        }
      }
      else
      {
        *(_OWORD *)long long v13 = *(_OWORD *)v8;
        *((_DWORD *)v13 + 4) = v10;
        unint64_t v14 = v13 + 24;
      }
      a4[1] = v14;
      v8 += 2;
    }
    while (v8 != v9);
    uint64_t v8 = v26;
  }
  if (v8)
  {
    uint64_t v27 = v8;
    operator delete(v8);
  }
}

void sub_1B4BD4468(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  long long v13 = *(void **)v11;
  if (*(void *)v11)
  {
    *(void *)(v11 + 8) = v13;
    operator delete(v13);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B4BD4498()
{
  sub_1B4BE5E28(3014000, 3014000, "/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece.pb.cc");
  sub_1B4BD6224((uint64_t)&unk_1E9D40A60, 0);
  sub_1B4BF26F0((uint64_t)sub_1B4BF1AD4, (uint64_t)&unk_1E9D40A60);
}

void sub_1B4BD4508()
{
  sub_1B4BE5E28(3014000, 3014000, "/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece.pb.cc");
  sub_1B4BD5638((uint64_t)&unk_1E9D40948, 0);
  sub_1B4BF26F0((uint64_t)sub_1B4BF1AD4, (uint64_t)&unk_1E9D40948);
}

void sub_1B4BD4578()
{
  sub_1B4BE5E28(3014000, 3014000, "/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece.pb.cc");
  sub_1B4BD45E8((uint64_t)&unk_1E9D40A08, 0);
  sub_1B4BF26F0((uint64_t)sub_1B4BF1AD4, (uint64_t)&unk_1E9D40A08);
}

uint64_t sub_1B4BD45E8(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F0D54950;
  *(void *)(a1 + 8) = a2;
  sub_1B4BE67B4(a1 + 16, a2);
  *(void *)(a1 + 4sub_1B4BC92E4(&a9, 0) = 0;
  if (atomic_load_explicit(dword_1EC551170, memory_order_acquire)) {
    sub_1B4BF1D44(dword_1EC551170);
  }
  *(void *)(a1 + 48) = &qword_1E9D40A98;
  *(void *)(a1 + 56) = &qword_1E9D40A98;
  *(void *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_1B4BD466C(_Unwind_Exception *a1)
{
  sub_1B4BE6894(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1B4BD4680(uint64_t a1)
{
  return a1;
}

uint64_t *sub_1B4BD46BC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = (void *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  if ((v2 & 1) == 0)
  {
    if (!v3) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if (*v3)
  {
LABEL_3:
    sub_1B4BE6194((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece.pb.cc", 140);
    uint64_t v4 = sub_1B4BE61AC(v13, "CHECK failed: GetArena() == nullptr: ");
    sub_1B4BE62E8((uint64_t)&v12, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_1B4BE62F0((uint64_t)v13);
  }
LABEL_4:
  __n128 result = (uint64_t *)(a1 + 48);
  if (*(uint64_t **)(a1 + 48) != &qword_1E9D40A98)
  {
    uint64_t v6 = sub_1B4BD6D70(result);
    uint64_t v7 = v6;
    if (*(char *)(v6 + 23) < 0) {
      operator delete(*(void **)v6);
    }
    __n128 result = (uint64_t *)MEMORY[0x1BA9929C0](v7, 0x1012C40EC159624);
  }
  int v9 = *(uint64_t **)(a1 + 56);
  uint64_t v8 = (uint64_t *)(a1 + 56);
  if (v9 != &qword_1E9D40A98)
  {
    uint64_t v10 = sub_1B4BD6D70(v8);
    uint64_t v11 = v10;
    if (*(char *)(v10 + 23) < 0) {
      operator delete(*(void **)v10);
    }
    return (uint64_t *)MEMORY[0x1BA9929C0](v11, 0x1012C40EC159624);
  }
  return result;
}

void sub_1B4BD47CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1B4BE62F0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_1B4BD47E4(uint64_t *result)
{
  uint64_t v1 = *result;
  if (*result)
  {
    unint64_t v2 = v1 & 0xFFFFFFFFFFFFFFFELL;
    if (!*(void *)(v1 & 0xFFFFFFFFFFFFFFFELL) && v2 != 0)
    {
      if (*(char *)(v2 + 31) < 0) {
        operator delete(*(void **)(v2 + 8));
      }
      JUMPOUT(0x1BA9929C0);
    }
  }
  return result;
}

void sub_1B4BD4860(uint64_t a1)
{
  sub_1B4BD4680(a1);
  JUMPOUT(0x1BA9929C0);
}

unsigned __int8 *sub_1B4BD4898(uint64_t a1)
{
  __n128 result = sub_1B4BEA63C((unsigned __int8 *)(a1 + 16));
  int v3 = *(_DWORD *)(a1 + 40);
  if ((v3 & 3) != 0)
  {
    if (v3)
    {
      unint64_t v4 = *(void *)(a1 + 48) & 0xFFFFFFFFFFFFFFFELL;
      if (*(char *)(v4 + 23) < 0)
      {
        **(unsigned char **)unint64_t v4 = 0;
        *(void *)(v4 + 8) = 0;
        if ((v3 & 2) == 0) {
          goto LABEL_11;
        }
        goto LABEL_6;
      }
      *(unsigned char *)unint64_t v4 = 0;
      *(unsigned char *)(v4 + 23) = 0;
    }
    if ((v3 & 2) == 0) {
      goto LABEL_11;
    }
LABEL_6:
    unint64_t v5 = *(void *)(a1 + 56) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v5 + 23) < 0)
    {
      **(unsigned char **)unint64_t v5 = 0;
      *(void *)(v5 + 8) = 0;
    }
    else
    {
      *(unsigned char *)unint64_t v5 = 0;
      *(unsigned char *)(v5 + 23) = 0;
    }
  }
LABEL_11:
  if ((v3 & 0x1C) != 0)
  {
    *(_DWORD *)(a1 + 72) = 0;
    *(void *)(a1 + 64) = 0;
  }
  *(_DWORD *)(a1 + 4sub_1B4BC92E4(&a9, 0) = 0;
  uint64_t v6 = *(void *)(a1 + 8);
  if (v6)
  {
    unint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v7 + 31) < 0)
    {
      **(unsigned char **)(v7 + 8) = 0;
      *(void *)(v7 + 16) = 0;
    }
    else
    {
      *(unsigned char *)(v7 + 8) = 0;
      *(unsigned char *)(v7 + 31) = 0;
    }
  }
  return result;
}

uint64_t sub_1B4BD4968(uint64_t a1, uint64_t a2, int32x2_t *a3)
{
  *(void *)uint64_t v36 = a2;
  int v5 = 0;
  if ((sub_1B4BD6E44((uint64_t)a3, (char **)v36, a3[11].i32[1]) & 1) == 0)
  {
    unint64_t v7 = (void *)(a1 + 8);
    while (1)
    {
      uint64_t v8 = (char *)(*(void *)v36 + 1);
      unsigned int v9 = **(unsigned char **)v36;
      if ((char)**(unsigned char **)v36 < 0)
      {
        unsigned int v10 = v9 + (*v8 << 7);
        unsigned int v9 = v10 - 128;
        if (*v8 < 0)
        {
          uint64_t v27 = sub_1B4BF37FC(*(uint64_t *)v36, v10 - 128);
          *(void *)uint64_t v36 = v27;
          if (!v27) {
            goto LABEL_56;
          }
          uint64_t v8 = (char *)v27;
          unsigned int v9 = v28;
          goto LABEL_8;
        }
        uint64_t v8 = (char *)(*(void *)v36 + 2);
      }
      *(void *)uint64_t v36 = v8;
LABEL_8:
      switch(v9 >> 3)
      {
        case 1u:
          if (v9 != 10) {
            goto LABEL_37;
          }
          *(_DWORD *)(a1 + 40) |= 1u;
          uint64_t v11 = *(void *)(a1 + 8);
          char v12 = (void *)(v11 & 0xFFFFFFFFFFFFFFFELL);
          if (v11) {
            char v12 = (void *)*v12;
          }
          long long v13 = (uint64_t *)(a1 + 48);
          goto LABEL_22;
        case 2u:
          if (v9 != 16) {
            goto LABEL_37;
          }
          v5 |= 4u;
          unint64_t v14 = v8 + 1;
          int v15 = *v8;
          if ((*v8 & 0x80000000) == 0) {
            goto LABEL_17;
          }
          int v16 = *v14;
          int v15 = v15 + (v16 << 7) - 128;
          if (v16 < 0)
          {
            uint64_t v30 = sub_1B4BF374C((uint64_t)v8, v15);
            *(void *)uint64_t v36 = v30;
            *(_DWORD *)(a1 + 64) = v31;
            if (!v30) {
              goto LABEL_56;
            }
          }
          else
          {
            unint64_t v14 = v8 + 2;
LABEL_17:
            *(void *)uint64_t v36 = v14;
            *(_DWORD *)(a1 + 64) = v15;
          }
          goto LABEL_35;
        case 3u:
          if (v9 != 26) {
            goto LABEL_37;
          }
          *(_DWORD *)(a1 + 40) |= 2u;
          uint64_t v17 = *(void *)(a1 + 8);
          char v12 = (void *)(v17 & 0xFFFFFFFFFFFFFFFELL);
          if (v17) {
            char v12 = (void *)*v12;
          }
          long long v13 = (uint64_t *)(a1 + 56);
LABEL_22:
          unint64_t v18 = (std::string *)sub_1B4BE4FF0(v13, (uint64_t)v12);
          uint64_t v19 = (void *)sub_1B4BF38B0(v18, *(char **)v36, (uint64_t)a3);
          goto LABEL_23;
        case 4u:
          if (v9 != 32) {
            goto LABEL_37;
          }
          v5 |= 8u;
          uint64_t v20 = v8 + 1;
          int v21 = *v8;
          if ((*v8 & 0x80000000) == 0) {
            goto LABEL_29;
          }
          int v22 = *v20;
          int v21 = v21 + (v22 << 7) - 128;
          if (v22 < 0)
          {
            uint64_t v32 = sub_1B4BF374C((uint64_t)v8, v21);
            *(void *)uint64_t v36 = v32;
            *(_DWORD *)(a1 + 68) = v33;
            if (!v32) {
              goto LABEL_56;
            }
          }
          else
          {
            uint64_t v20 = v8 + 2;
LABEL_29:
            *(void *)uint64_t v36 = v20;
            *(_DWORD *)(a1 + 68) = v21;
          }
          goto LABEL_35;
        case 5u:
          if (v9 != 40) {
            goto LABEL_37;
          }
          v5 |= 0x10u;
          uint64_t v23 = v8 + 1;
          int v24 = *v8;
          if ((*v8 & 0x80000000) == 0) {
            goto LABEL_34;
          }
          int v25 = *v23;
          int v24 = v24 + (v25 << 7) - 128;
          if (v25 < 0)
          {
            uint64_t v34 = sub_1B4BF374C((uint64_t)v8, v24);
            *(void *)uint64_t v36 = v34;
            *(_DWORD *)(a1 + 72) = v35;
            if (!v34) {
              goto LABEL_56;
            }
          }
          else
          {
            uint64_t v23 = v8 + 2;
LABEL_34:
            *(void *)uint64_t v36 = v23;
            *(_DWORD *)(a1 + 72) = v24;
          }
          goto LABEL_35;
        default:
LABEL_37:
          if (v9) {
            BOOL v26 = (v9 & 7) == 4;
          }
          else {
            BOOL v26 = 1;
          }
          if (v26)
          {
            a3[10].i32[0] = v9 - 1;
            goto LABEL_2;
          }
          if (v9 < 0x640)
          {
            if (*v7)
            {
              uint64_t v29 = (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFELL) + 8);
            }
            else
            {
              uint64_t v29 = (std::string *)sub_1B4BD6F84((unint64_t *)(a1 + 8));
              uint64_t v8 = *(char **)v36;
            }
            uint64_t v19 = sub_1B4BF3D6C(v9, v29, v8, a3);
          }
          else
          {
            uint64_t v19 = sub_1B4BEBF0C((uint64_t *)(a1 + 16), v9, (unsigned __int8 *)v8, (uint64_t)&unk_1E9D40A08, (unint64_t *)(a1 + 8), a3);
          }
LABEL_23:
          *(void *)uint64_t v36 = v19;
          if (!v19)
          {
LABEL_56:
            *(void *)uint64_t v36 = 0;
            goto LABEL_2;
          }
LABEL_35:
          if (sub_1B4BD6E44((uint64_t)a3, (char **)v36, a3[11].i32[1])) {
            goto LABEL_2;
          }
          break;
      }
    }
  }
LABEL_2:
  *(_DWORD *)(a1 + 40) |= v5;
  return *(void *)v36;
}

char *sub_1B4BD4CAC(uint64_t a1, char *a2, unint64_t *a3)
{
  unint64_t v4 = a2;
  int v6 = *(_DWORD *)(a1 + 40);
  if ((v6 & 1) == 0)
  {
    if ((v6 & 4) == 0) {
      goto LABEL_3;
    }
LABEL_11:
    if (*a3 <= (unint64_t)v4) {
      unint64_t v4 = sub_1B4BE5708((uint64_t)a3, v4);
    }
    unsigned int v8 = *(_DWORD *)(a1 + 64);
    char *v4 = 16;
    if (v8 > 0x7F)
    {
      v4[1] = v8 | 0x80;
      unsigned int v10 = v8 >> 7;
      if (v8 >> 14)
      {
        v4 += 3;
        do
        {
          *(v4 - 1) = v10 | 0x80;
          unsigned int v13 = v10 >> 7;
          ++v4;
          unsigned int v14 = v10 >> 14;
          v10 >>= 7;
        }
        while (v14);
        *(v4 - 1) = v13;
        if ((v6 & 2) != 0) {
          goto LABEL_27;
        }
      }
      else
      {
        v4[2] = v10;
        v4 += 3;
        if ((v6 & 2) != 0) {
          goto LABEL_27;
        }
      }
    }
    else
    {
      v4[1] = v8;
      v4 += 2;
      if ((v6 & 2) != 0) {
        goto LABEL_27;
      }
    }
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_28;
  }
  unint64_t v4 = sub_1B4BD4F64(a3, 1, (const void **)(*(void *)(a1 + 48) & 0xFFFFFFFFFFFFFFFELL), a2);
  if ((v6 & 4) != 0) {
    goto LABEL_11;
  }
LABEL_3:
  if ((v6 & 2) == 0) {
    goto LABEL_4;
  }
LABEL_27:
  unint64_t v4 = sub_1B4BD4F64(a3, 3, (const void **)(*(void *)(a1 + 56) & 0xFFFFFFFFFFFFFFFELL), v4);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_39;
    }
    goto LABEL_6;
  }
LABEL_28:
  if (*a3 <= (unint64_t)v4) {
    unint64_t v4 = sub_1B4BE5708((uint64_t)a3, v4);
  }
  unsigned int v15 = *(_DWORD *)(a1 + 68);
  char *v4 = 32;
  if (v15 > 0x7F)
  {
    v4[1] = v15 | 0x80;
    unsigned int v16 = v15 >> 7;
    if (v15 >> 14)
    {
      v4 += 3;
      do
      {
        *(v4 - 1) = v16 | 0x80;
        unsigned int v17 = v16 >> 7;
        ++v4;
        unsigned int v18 = v16 >> 14;
        v16 >>= 7;
      }
      while (v18);
      *(v4 - 1) = v17;
      if ((v6 & 0x10) == 0) {
        goto LABEL_39;
      }
    }
    else
    {
      v4[2] = v16;
      v4 += 3;
      if ((v6 & 0x10) == 0) {
        goto LABEL_39;
      }
    }
  }
  else
  {
    v4[1] = v15;
    v4 += 2;
    if ((v6 & 0x10) == 0) {
      goto LABEL_39;
    }
  }
LABEL_6:
  if (*a3 <= (unint64_t)v4) {
    unint64_t v4 = sub_1B4BE5708((uint64_t)a3, v4);
  }
  unsigned int v7 = *(_DWORD *)(a1 + 72);
  char *v4 = 40;
  if (v7 > 0x7F)
  {
    v4[1] = v7 | 0x80;
    unsigned int v9 = v7 >> 7;
    if (v7 >> 14)
    {
      v4 += 3;
      do
      {
        *(v4 - 1) = v9 | 0x80;
        unsigned int v11 = v9 >> 7;
        ++v4;
        unsigned int v12 = v9 >> 14;
        v9 >>= 7;
      }
      while (v12);
      *(v4 - 1) = v11;
    }
    else
    {
      v4[2] = v9;
      v4 += 3;
    }
  }
  else
  {
    v4[1] = v7;
    v4 += 2;
  }
LABEL_39:
  uint64_t v19 = sub_1B4BECD04(a1 + 16, 200, 0x20000000, v4, (uint64_t *)a3);
  uint64_t v20 = v19;
  uint64_t v21 = *(void *)(a1 + 8);
  if ((v21 & 1) == 0) {
    return v20;
  }
  unint64_t v23 = v21 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v23 + 31) < 0)
  {
    int v24 = *(void **)(v23 + 8);
    uint64_t v25 = *(void *)(v23 + 16);
  }
  else
  {
    int v24 = (void *)(v23 + 8);
    LODWORD(v25) = *(unsigned __int8 *)(v23 + 31);
  }
  if ((uint64_t)(*a3 - (void)v19) >= (int)v25)
  {
    uint64_t v26 = (int)v25;
    memcpy(v19, v24, (int)v25);
    v20 += v26;
    return v20;
  }
  return sub_1B4BE581C((uint64_t *)a3, (char *)v24, v25, (unint64_t)v19);
}

char *sub_1B4BD4F64(unint64_t *a1, int a2, const void **a3, char *a4)
{
  if (*((char *)a3 + 23) < 0)
  {
    int64_t v4 = (int64_t)a3[1];
    if (v4 > 127) {
      goto LABEL_24;
    }
  }
  else
  {
    int64_t v4 = *((unsigned __int8 *)a3 + 23);
  }
  unsigned int v5 = 8 * a2;
  uint64_t v6 = 1;
  uint64_t v7 = 2;
  uint64_t v8 = 3;
  uint64_t v9 = 4;
  if ((8 * a2) >> 28) {
    uint64_t v9 = 5;
  }
  if (v5 >= 0x200000) {
    uint64_t v8 = v9;
  }
  if (v5 >= 0x4000) {
    uint64_t v7 = v8;
  }
  if (v5 >= 0x80) {
    uint64_t v6 = v7;
  }
  if ((uint64_t)(*a1 + ~(unint64_t)&a4[v6] + 16) >= v4)
  {
    unsigned int v10 = v5 | 2;
    if ((v5 | 2) > 0x7F)
    {
      *a4 = v5 | 0x82;
      unsigned int v12 = v5 >> 7;
      if (v10 >> 14)
      {
        unsigned int v11 = a4 + 2;
        do
        {
          *(v11 - 1) = v12 | 0x80;
          unsigned int v13 = v12 >> 7;
          ++v11;
          unsigned int v14 = v12 >> 14;
          v12 >>= 7;
        }
        while (v14);
        *(v11 - 1) = v13;
      }
      else
      {
        a4[1] = v12;
        unsigned int v11 = a4 + 2;
      }
    }
    else
    {
      *a4 = v10;
      unsigned int v11 = a4 + 1;
    }
    *unsigned int v11 = v4;
    unsigned int v15 = v11 + 1;
    if (*((char *)a3 + 23) >= 0) {
      unsigned int v16 = a3;
    }
    else {
      unsigned int v16 = *a3;
    }
    memcpy(v15, v16, v4);
    return &v15[v4];
  }
LABEL_24:
  return sub_1B4BE5A64(a1, a2, (void **)a3, a4);
}

uint64_t sub_1B4BD5090(uint64_t a1)
{
  uint64_t result = sub_1B4BEFA38(a1 + 16);
  int v3 = *(_DWORD *)(a1 + 40);
  if ((v3 & 0x1F) == 0) {
    goto LABEL_8;
  }
  if (v3)
  {
    unint64_t v5 = *(void *)(a1 + 48) & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v6 = *(unsigned __int8 *)(v5 + 23);
    uint64_t v7 = *(void *)(v5 + 8);
    if ((v6 & 0x80u) == 0) {
      uint64_t v7 = v6;
    }
    result += v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v3 & 2) == 0)
    {
LABEL_4:
      if ((v3 & 4) == 0) {
        goto LABEL_5;
      }
LABEL_16:
      result += ((9 * (__clz(*(_DWORD *)(a1 + 64) | 1) ^ 0x1F) + 73) >> 6) + 1;
      if ((v3 & 8) == 0)
      {
LABEL_6:
        if ((v3 & 0x10) == 0) {
          goto LABEL_8;
        }
        goto LABEL_7;
      }
      goto LABEL_17;
    }
  }
  else if ((v3 & 2) == 0)
  {
    goto LABEL_4;
  }
  unint64_t v8 = *(void *)(a1 + 56) & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v9 = *(unsigned __int8 *)(v8 + 23);
  uint64_t v10 = *(void *)(v8 + 8);
  if ((v9 & 0x80u) == 0) {
    uint64_t v10 = v9;
  }
  result += v10 + ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v3 & 4) != 0) {
    goto LABEL_16;
  }
LABEL_5:
  if ((v3 & 8) == 0) {
    goto LABEL_6;
  }
LABEL_17:
  result += ((9 * (__clz(*(_DWORD *)(a1 + 68) | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v3 & 0x10) != 0) {
LABEL_7:
  }
    result += ((9 * (__clz(*(_DWORD *)(a1 + 72) | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_8:
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    unint64_t v11 = v4 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v11 + 31) < 0) {
      uint64_t v12 = *(void *)(v11 + 16);
    }
    else {
      uint64_t v12 = *(unsigned __int8 *)(v11 + 31);
    }
    result += v12;
  }
  *(_DWORD *)(a1 + 44) = result;
  return result;
}

void sub_1B4BD5204(uint64_t a1, void *lpsrc)
{
  if (!__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1F0D537C8, (const struct __class_type_info *)&unk_1F0D532B0, 0))sub_1B4BD7788(); {
  sub_1B4BD528C(a1, (uint64_t)lpsrc);
  }
}

void sub_1B4BD528C(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    sub_1B4BE6194((uint64_t)v21, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece.pb.cc", 375);
    uint64_t v4 = sub_1B4BE61AC(v21, "CHECK failed: (&from) != (this): ");
    sub_1B4BE62E8((uint64_t)&v20, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_1B4BE62F0((uint64_t)v21);
  }
  sub_1B4BEA6DC(a1 + 16, a2 + 16);
  uint64_t v5 = *(void *)(a2 + 8);
  if (v5)
  {
    unint64_t v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v7 = (v5 & 0xFFFFFFFFFFFFFFFELL) + 8;
    uint64_t v8 = *(void *)(a1 + 8);
    if (v8) {
      uint64_t v9 = (std::string *)((v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
    }
    else {
      uint64_t v9 = (std::string *)sub_1B4BD6F84((unint64_t *)(a1 + 8));
    }
    int v10 = *(char *)(v6 + 31);
    if (v10 >= 0) {
      unint64_t v11 = (const std::string::value_type *)v7;
    }
    else {
      unint64_t v11 = *(const std::string::value_type **)(v6 + 8);
    }
    if (v10 >= 0) {
      std::string::size_type v12 = *(unsigned __int8 *)(v6 + 31);
    }
    else {
      std::string::size_type v12 = *(void *)(v6 + 16);
    }
    std::string::append(v9, v11, v12);
  }
  int v13 = *(_DWORD *)(a2 + 40);
  if ((v13 & 0x1F) != 0)
  {
    if (v13)
    {
      unsigned int v14 = (long long *)(*(void *)(a2 + 48) & 0xFFFFFFFFFFFFFFFELL);
      *(_DWORD *)(a1 + 40) |= 1u;
      uint64_t v15 = *(void *)(a1 + 8);
      unsigned int v16 = (void *)(v15 & 0xFFFFFFFFFFFFFFFELL);
      if (v15) {
        unsigned int v16 = (void *)*v16;
      }
      sub_1B4BE4FB8((uint64_t *)(a1 + 48), v14, (uint64_t)v16);
      if ((v13 & 2) == 0)
      {
LABEL_16:
        if ((v13 & 4) == 0) {
          goto LABEL_17;
        }
        goto LABEL_28;
      }
    }
    else if ((v13 & 2) == 0)
    {
      goto LABEL_16;
    }
    unsigned int v17 = (long long *)(*(void *)(a2 + 56) & 0xFFFFFFFFFFFFFFFELL);
    *(_DWORD *)(a1 + 40) |= 2u;
    uint64_t v18 = *(void *)(a1 + 8);
    uint64_t v19 = (void *)(v18 & 0xFFFFFFFFFFFFFFFELL);
    if (v18) {
      uint64_t v19 = (void *)*v19;
    }
    sub_1B4BE4FB8((uint64_t *)(a1 + 56), v17, (uint64_t)v19);
    if ((v13 & 4) == 0)
    {
LABEL_17:
      if ((v13 & 8) == 0) {
        goto LABEL_18;
      }
      goto LABEL_29;
    }
LABEL_28:
    *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
    if ((v13 & 8) == 0)
    {
LABEL_18:
      if ((v13 & 0x10) == 0)
      {
LABEL_20:
        *(_DWORD *)(a1 + 40) |= v13;
        return;
      }
LABEL_19:
      *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
      goto LABEL_20;
    }
LABEL_29:
    *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
    if ((v13 & 0x10) == 0) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
}

void sub_1B4BD5410(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1B4BE62F0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B4BD5428(uint64_t a1)
{
  return sub_1B4BEBB6C(a1 + 16);
}

uint64_t *sub_1B4BD5430(uint64_t a1, uint64_t a2)
{
  sub_1B4BEB954(a1 + 16, a2 + 16);
  uint64_t v5 = (uint64_t *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a2 + 8);
  if (v4)
  {
    if ((v6 & 1) == 0)
    {
      unint64_t v10 = sub_1B4BD6F84((unint64_t *)(a2 + 8));
      uint64_t v4 = *v5;
      if (*v5) {
        goto LABEL_6;
      }
LABEL_21:
      unint64_t v11 = sub_1B4BD6F84((unint64_t *)(a1 + 8));
      goto LABEL_7;
    }
  }
  else if ((v6 & 1) == 0)
  {
    uint64_t v7 = 0;
    int v8 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 4sub_1B4BC92E4(&a9, 0) = *(_DWORD *)(a2 + 40);
    *(_DWORD *)(a2 + 4sub_1B4BC92E4(&a9, 0) = v8;
    uint64_t v9 = (uint64_t *)(v4 & 0xFFFFFFFFFFFFFFFELL);
    goto LABEL_9;
  }
  unint64_t v10 = (v6 & 0xFFFFFFFFFFFFFFFELL) + 8;
  if ((v4 & 1) == 0) {
    goto LABEL_21;
  }
LABEL_6:
  unint64_t v11 = (v4 & 0xFFFFFFFFFFFFFFFELL) + 8;
LABEL_7:
  uint64_t v12 = *(void *)(v11 + 16);
  long long v13 = *(_OWORD *)v11;
  uint64_t v14 = *(void *)(v10 + 16);
  *(_OWORD *)unint64_t v11 = *(_OWORD *)v10;
  *(void *)(v11 + 16) = v14;
  *(_OWORD *)unint64_t v10 = v13;
  *(void *)(v10 + 16) = v12;
  uint64_t v15 = *(void *)(a1 + 8);
  LODWORD(v14) = *(_DWORD *)(a1 + 40);
  *(_DWORD *)(a1 + 4sub_1B4BC92E4(&a9, 0) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 4sub_1B4BC92E4(&a9, 0) = v14;
  uint64_t v9 = (uint64_t *)(v15 & 0xFFFFFFFFFFFFFFFELL);
  if (v15)
  {
    uint64_t v16 = *v9;
    uint64_t v7 = 1;
    goto LABEL_10;
  }
  uint64_t v7 = 0;
LABEL_9:
  uint64_t v16 = (uint64_t)v9;
LABEL_10:
  if (*(uint64_t **)(a1 + 48) != &qword_1E9D40A98 || *(uint64_t **)(a2 + 48) != &qword_1E9D40A98)
  {
    unsigned int v17 = sub_1B4BE4FF0((uint64_t *)(a1 + 48), v16);
    uint64_t v18 = sub_1B4BE4FF0((uint64_t *)(a2 + 48), v16);
    uint64_t v19 = v17[2];
    long long v20 = *(_OWORD *)v17;
    uint64_t v21 = v18[2];
    *(_OWORD *)unsigned int v17 = *(_OWORD *)v18;
    void v17[2] = v21;
    *(_OWORD *)uint64_t v18 = v20;
    void v18[2] = v19;
    uint64_t v7 = *v5 & 1;
    uint64_t v9 = (uint64_t *)(*v5 & 0xFFFFFFFFFFFFFFFELL);
  }
  uint64_t result = (uint64_t *)(a1 + 56);
  if (v7) {
    uint64_t v9 = (uint64_t *)*v9;
  }
  if ((uint64_t *)*result != &qword_1E9D40A98 || *(uint64_t **)(a2 + 56) != &qword_1E9D40A98)
  {
    unint64_t v23 = sub_1B4BE4FF0(result, (uint64_t)v9);
    uint64_t result = sub_1B4BE4FF0((uint64_t *)(a2 + 56), (uint64_t)v9);
    uint64_t v24 = v23[2];
    long long v25 = *(_OWORD *)v23;
    uint64_t v26 = result[2];
    *(_OWORD *)unint64_t v23 = *(_OWORD *)result;
    v23[2] = v26;
    *(_OWORD *)uint64_t result = v25;
    result[2] = v24;
  }
  uint64_t v27 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a2 + 64) = v27;
  LODWORD(v27) = *(_DWORD *)(a1 + 72);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a2 + 72) = v27;
  return result;
}

void *sub_1B4BD5628@<X0>(void *a1@<X8>)
{
  return sub_1B4BB8DC0(a1, "sentencepiece.SentencePieceText.SentencePiece");
}

uint64_t sub_1B4BD5638(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F0D54398;
  *(void *)(a1 + 8) = a2;
  sub_1B4BE67B4(a1 + 16, a2);
  *(void *)(a1 + 48) = a2;
  *(void *)(a1 + 4sub_1B4BC92E4(&a9, 0) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  if (atomic_load_explicit(dword_1EC551188, memory_order_acquire)) {
    sub_1B4BF1D44(dword_1EC551188);
  }
  *(void *)(a1 + 72) = &qword_1E9D40A98;
  *(_DWORD *)(a1 + 8sub_1B4BC92E4(&a9, 0) = 0;
  return a1;
}

void sub_1B4BD56D0(_Unwind_Exception *a1)
{
  sub_1B4BD71C0(v2);
  sub_1B4BE6894(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1B4BD56F0(uint64_t a1)
{
  return a1;
}

uint64_t sub_1B4BD5734(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(void *)(result + 8);
  int v3 = (void *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  if ((v2 & 1) == 0)
  {
    if (!v3) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if (*v3)
  {
LABEL_3:
    sub_1B4BE6194((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece.pb.cc", 486);
    uint64_t v4 = sub_1B4BE61AC(v10, "CHECK failed: GetArena() == nullptr: ");
    sub_1B4BE62E8((uint64_t)&v9, (const char **)&v4->__r_.__value_.__l.__data_);
    uint64_t result = sub_1B4BE62F0((uint64_t)v10);
  }
LABEL_4:
  uint64_t v6 = *(uint64_t **)(v1 + 72);
  uint64_t v5 = (uint64_t *)(v1 + 72);
  if (v6 != &qword_1E9D40A98)
  {
    uint64_t v7 = sub_1B4BD6D70(v5);
    uint64_t v8 = v7;
    if (*(char *)(v7 + 23) < 0) {
      operator delete(*(void **)v7);
    }
    return MEMORY[0x1BA9929C0](v8, 0x1012C40EC159624);
  }
  return result;
}

void sub_1B4BD57FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1B4BE62F0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1B4BD5818(uint64_t a1)
{
  sub_1B4BD56F0(a1);
  JUMPOUT(0x1BA9929C0);
}

void *sub_1B4BD5850()
{
  if (atomic_load_explicit(dword_1EC551188, memory_order_acquire)) {
    sub_1B4BF1D44(dword_1EC551188);
  }
  return &unk_1E9D40948;
}

unsigned __int8 *sub_1B4BD588C(uint64_t a1)
{
  sub_1B4BEA63C((unsigned __int8 *)(a1 + 16));
  uint64_t result = sub_1B4BD7060((unsigned __int8 *)(a1 + 48));
  if (*(unsigned char *)(a1 + 40))
  {
    unint64_t v3 = *(void *)(a1 + 72) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v3 + 23) < 0)
    {
      **(unsigned char **)unint64_t v3 = 0;
      *(void *)(v3 + 8) = 0;
    }
    else
    {
      *(unsigned char *)unint64_t v3 = 0;
      *(unsigned char *)(v3 + 23) = 0;
    }
  }
  *(_DWORD *)(a1 + 8sub_1B4BC92E4(&a9, 0) = 0;
  *(_DWORD *)(a1 + 4sub_1B4BC92E4(&a9, 0) = 0;
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    unint64_t v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v5 + 31) < 0)
    {
      **(unsigned char **)(v5 + 8) = 0;
      *(void *)(v5 + 16) = 0;
    }
    else
    {
      *(unsigned char *)(v5 + 8) = 0;
      *(unsigned char *)(v5 + 31) = 0;
    }
  }
  return result;
}

uint64_t sub_1B4BD5920(uint64_t a1, uint64_t a2, int32x2_t *a3)
{
  *(void *)uint64_t v29 = a2;
  int v5 = 0;
  if ((sub_1B4BD6E44((uint64_t)a3, (char **)v29, a3[11].i32[1]) & 1) == 0)
  {
    uint64_t v7 = (void *)(a1 + 8);
    while (1)
    {
      uint64_t v8 = (char *)(*(void *)v29 + 1);
      unsigned int v9 = **(unsigned char **)v29;
      if (((char)**(unsigned char **)v29 & 0x80000000) == 0) {
        goto LABEL_7;
      }
      unsigned int v10 = v9 + (*v8 << 7);
      unsigned int v9 = v10 - 128;
      if ((*v8 & 0x80000000) == 0) {
        break;
      }
      uint64_t v26 = sub_1B4BF37FC(*(uint64_t *)v29, v10 - 128);
      *(void *)uint64_t v29 = v26;
      if (!v26) {
        goto LABEL_48;
      }
      uint64_t v8 = (char *)v26;
      unsigned int v9 = v27;
LABEL_8:
      unsigned int v11 = v9 >> 3;
      if (v9 >> 3 == 3)
      {
        if (v9 == 29)
        {
          v5 |= 2u;
          *(_DWORD *)(a1 + 8sub_1B4BC92E4(&a9, 0) = *(_DWORD *)v8;
          *(void *)uint64_t v29 = v8 + 4;
          goto LABEL_44;
        }
        goto LABEL_14;
      }
      if (v11 == 2)
      {
        if (v9 == 18)
        {
          uint64_t v15 = v8 - 1;
          while (1)
          {
            uint64_t v16 = (unsigned __int8 *)(v15 + 1);
            *(void *)uint64_t v29 = v15 + 1;
            unsigned int v17 = *(int **)(a1 + 64);
            if (!v17) {
              break;
            }
            uint64_t v18 = *(int *)(a1 + 56);
            int v19 = *v17;
            if ((int)v18 >= *v17)
            {
              if (v19 == *(_DWORD *)(a1 + 60))
              {
LABEL_29:
                sub_1B4BF8BEC(a1 + 48, v19 + 1);
                unsigned int v17 = *(int **)(a1 + 64);
                int v19 = *v17;
              }
              *unsigned int v17 = v19 + 1;
              uint64_t v20 = sub_1B4BD6AB0(*(void *)(a1 + 48));
              uint64_t v21 = *(void *)(a1 + 64);
              uint64_t v22 = *(int *)(a1 + 56);
              *(_DWORD *)(a1 + 56) = v22 + 1;
              *(void *)(v21 + 8 * v22 + 8) = v20;
              uint64_t v16 = *(unsigned __int8 **)v29;
              goto LABEL_31;
            }
            *(_DWORD *)(a1 + 56) = v18 + 1;
            uint64_t v20 = *(void *)&v17[2 * v18 + 2];
LABEL_31:
            uint64_t v15 = (char *)sub_1B4BD5BD8(a3, v20, v16);
            *(void *)uint64_t v29 = v15;
            if (!v15) {
              goto LABEL_48;
            }
            if (*(void *)a3 <= (unint64_t)v15 || *v15 != 18) {
              goto LABEL_44;
            }
          }
          int v19 = *(_DWORD *)(a1 + 60);
          goto LABEL_29;
        }
LABEL_14:
        if (v9) {
          BOOL v13 = (v9 & 7) == 4;
        }
        else {
          BOOL v13 = 1;
        }
        if (v13)
        {
          a3[10].i32[0] = v9 - 1;
          goto LABEL_2;
        }
        if (v9 < 0x640)
        {
          if (*v7)
          {
            unsigned int v28 = (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFELL) + 8);
          }
          else
          {
            unsigned int v28 = (std::string *)sub_1B4BD6F84((unint64_t *)(a1 + 8));
            uint64_t v8 = *(char **)v29;
          }
          uint64_t v14 = sub_1B4BF3D6C(v9, v28, v8, a3);
        }
        else
        {
          uint64_t v14 = sub_1B4BEBF0C((uint64_t *)(a1 + 16), v9, (unsigned __int8 *)v8, (uint64_t)&unk_1E9D40948, (unint64_t *)(a1 + 8), a3);
        }
        goto LABEL_43;
      }
      if (v11 != 1 || v9 != 10) {
        goto LABEL_14;
      }
      *(_DWORD *)(a1 + 40) |= 1u;
      uint64_t v23 = *(void *)(a1 + 8);
      uint64_t v24 = (void *)(v23 & 0xFFFFFFFFFFFFFFFELL);
      if (v23) {
        uint64_t v24 = (void *)*v24;
      }
      long long v25 = (std::string *)sub_1B4BE4FF0((uint64_t *)(a1 + 72), (uint64_t)v24);
      uint64_t v14 = (void *)sub_1B4BF38B0(v25, *(char **)v29, (uint64_t)a3);
LABEL_43:
      *(void *)uint64_t v29 = v14;
      if (!v14)
      {
LABEL_48:
        *(void *)uint64_t v29 = 0;
        goto LABEL_2;
      }
LABEL_44:
      if (sub_1B4BD6E44((uint64_t)a3, (char **)v29, a3[11].i32[1])) {
        goto LABEL_2;
      }
    }
    uint64_t v8 = (char *)(*(void *)v29 + 2);
LABEL_7:
    *(void *)uint64_t v29 = v8;
    goto LABEL_8;
  }
LABEL_2:
  *(_DWORD *)(a1 + 40) |= v5;
  return *(void *)v29;
}

uint64_t sub_1B4BD5BD8(int32x2_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  int v6 = (char)*a3;
  unsigned int v7 = *a3;
  if (v6 < 0)
  {
    uint64_t result = sub_1B4BF3840((uint64_t)a3, v7);
    if (!result) {
      return result;
    }
    uint64_t v8 = result;
    unsigned int v7 = v10;
  }
  else
  {
    uint64_t v8 = (uint64_t)(a3 + 1);
  }
  int v11 = sub_1B4BD72B0((uint64_t)a1, v8, v7);
  int v12 = a1[11].i32[0];
  BOOL v13 = __OFSUB__(v12--, 1);
  a1[11].i32[0] = v12;
  if (v12 < 0 != v13) {
    return 0;
  }
  int v14 = v11;
  uint64_t result = sub_1B4BD4968(a2, v8, a1);
  if (!result) {
    return result;
  }
  ++a1[11].i32[0];
  if (a1[10].i32[0]) {
    return 0;
  }
  int v15 = a1[3].i32[1] + v14;
  a1[3].i32[1] = v15;
  *a1 = (int32x2_t)(*(void *)&a1[1] + (v15 & (v15 >> 31)));
  return result;
}

char *sub_1B4BD5CA0(uint64_t a1, char *a2, unint64_t *a3)
{
  uint64_t v4 = a2;
  int v6 = *(_DWORD *)(a1 + 40);
  if (v6) {
    uint64_t v4 = sub_1B4BD4F64(a3, 1, (const void **)(*(void *)(a1 + 72) & 0xFFFFFFFFFFFFFFFELL), a2);
  }
  int v7 = *(_DWORD *)(a1 + 56);
  if (v7)
  {
    for (int i = 0; i != v7; ++i)
    {
      if (*a3 <= (unint64_t)v4) {
        uint64_t v4 = sub_1B4BE5708((uint64_t)a3, v4);
      }
      uint64_t v9 = sub_1B4BC824C(a1 + 48, i);
      char *v4 = 18;
      unsigned int v10 = *(_DWORD *)(v9 + 44);
      if (v10 > 0x7F)
      {
        v4[1] = v10 | 0x80;
        unsigned int v12 = v10 >> 7;
        if (v10 >> 14)
        {
          int v11 = v4 + 3;
          do
          {
            *(v11 - 1) = v12 | 0x80;
            unsigned int v13 = v12 >> 7;
            ++v11;
            unsigned int v14 = v12 >> 14;
            v12 >>= 7;
          }
          while (v14);
          *(v11 - 1) = v13;
        }
        else
        {
          v4[2] = v12;
          int v11 = v4 + 3;
        }
      }
      else
      {
        v4[1] = v10;
        int v11 = v4 + 2;
      }
      uint64_t v4 = sub_1B4BD4CAC(v9, v11, a3);
    }
  }
  if ((v6 & 2) != 0)
  {
    if (*a3 <= (unint64_t)v4) {
      uint64_t v4 = sub_1B4BE5708((uint64_t)a3, v4);
    }
    int v15 = *(_DWORD *)(a1 + 80);
    char *v4 = 29;
    *(_DWORD *)(v4 + 1) = v15;
    v4 += 5;
  }
  uint64_t v16 = sub_1B4BECD04(a1 + 16, 200, 0x20000000, v4, (uint64_t *)a3);
  unsigned int v17 = v16;
  uint64_t v18 = *(void *)(a1 + 8);
  if ((v18 & 1) == 0) {
    return v17;
  }
  unint64_t v20 = v18 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v20 + 31) < 0)
  {
    uint64_t v21 = *(void **)(v20 + 8);
    uint64_t v22 = *(void *)(v20 + 16);
  }
  else
  {
    uint64_t v21 = (void *)(v20 + 8);
    LODWORD(v22) = *(unsigned __int8 *)(v20 + 31);
  }
  if ((uint64_t)(*a3 - (void)v16) >= (int)v22)
  {
    uint64_t v23 = (int)v22;
    memcpy(v16, v21, (int)v22);
    v17 += v23;
    return v17;
  }
  return sub_1B4BE581C((uint64_t *)a3, (char *)v21, v22, (unint64_t)v16);
}

uint64_t sub_1B4BD5E94(uint64_t a1)
{
  uint64_t v2 = sub_1B4BEFA38(a1 + 16);
  uint64_t v3 = *(int *)(a1 + 56);
  uint64_t v4 = v2 + v3;
  uint64_t v5 = *(void *)(a1 + 64);
  if (v5) {
    int v6 = (uint64_t *)(v5 + 8);
  }
  else {
    int v6 = 0;
  }
  if (v3)
  {
    uint64_t v7 = 8 * v3;
    do
    {
      uint64_t v8 = *v6++;
      uint64_t v9 = sub_1B4BD5090(v8);
      v4 += v9 + ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6);
      v7 -= 8;
    }
    while (v7);
  }
  int v10 = *(_DWORD *)(a1 + 40);
  if ((v10 & 3) != 0)
  {
    if (v10)
    {
      unint64_t v11 = *(void *)(a1 + 72) & 0xFFFFFFFFFFFFFFFELL;
      uint64_t v12 = *(unsigned __int8 *)(v11 + 23);
      uint64_t v13 = *(void *)(v11 + 8);
      if ((v12 & 0x80u) == 0) {
        uint64_t v13 = v12;
      }
      v4 += v13 + ((9 * (__clz(v13 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    if ((v10 & 2) != 0) {
      v4 += 5;
    }
  }
  uint64_t v14 = *(void *)(a1 + 8);
  if (v14)
  {
    unint64_t v16 = v14 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v16 + 31) < 0) {
      uint64_t v17 = *(void *)(v16 + 16);
    }
    else {
      uint64_t v17 = *(unsigned __int8 *)(v16 + 31);
    }
    v4 += v17;
  }
  *(_DWORD *)(a1 + 44) = v4;
  return v4;
}

void sub_1B4BD5FA0(uint64_t a1, void *lpsrc)
{
  if (!__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1F0D537C8, (const struct __class_type_info *)&unk_1F0D531E0, 0))sub_1B4BD7788(); {
  sub_1B4BD6028(a1, (uint64_t)lpsrc);
  }
}

void sub_1B4BD6028(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    sub_1B4BE6194((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece.pb.cc", 674);
    uint64_t v4 = sub_1B4BE61AC(v18, "CHECK failed: (&from) != (this): ");
    sub_1B4BE62E8((uint64_t)&v17, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_1B4BE62F0((uint64_t)v18);
  }
  sub_1B4BEA6DC(a1 + 16, a2 + 16);
  uint64_t v5 = *(void *)(a2 + 8);
  if (v5)
  {
    unint64_t v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v7 = (v5 & 0xFFFFFFFFFFFFFFFELL) + 8;
    uint64_t v8 = *(void *)(a1 + 8);
    if (v8) {
      uint64_t v9 = (std::string *)((v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
    }
    else {
      uint64_t v9 = (std::string *)sub_1B4BD6F84((unint64_t *)(a1 + 8));
    }
    int v10 = *(char *)(v6 + 31);
    if (v10 >= 0) {
      unint64_t v11 = (const std::string::value_type *)v7;
    }
    else {
      unint64_t v11 = *(const std::string::value_type **)(v6 + 8);
    }
    if (v10 >= 0) {
      std::string::size_type v12 = *(unsigned __int8 *)(v6 + 31);
    }
    else {
      std::string::size_type v12 = *(void *)(v6 + 16);
    }
    std::string::append(v9, v11, v12);
  }
  sub_1B4BD736C(a1 + 48, a2 + 48);
  int v13 = *(_DWORD *)(a2 + 40);
  if ((v13 & 3) != 0)
  {
    if (v13)
    {
      uint64_t v14 = (long long *)(*(void *)(a2 + 72) & 0xFFFFFFFFFFFFFFFELL);
      *(_DWORD *)(a1 + 40) |= 1u;
      uint64_t v15 = *(void *)(a1 + 8);
      unint64_t v16 = (void *)(v15 & 0xFFFFFFFFFFFFFFFELL);
      if (v15) {
        unint64_t v16 = (void *)*v16;
      }
      sub_1B4BE4FB8((uint64_t *)(a1 + 72), v14, (uint64_t)v16);
    }
    if ((v13 & 2) != 0) {
      *(_DWORD *)(a1 + 8sub_1B4BC92E4(&a9, 0) = *(_DWORD *)(a2 + 80);
    }
    *(_DWORD *)(a1 + 40) |= v13;
  }
}

void sub_1B4BD6158(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1B4BE62F0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B4BD6170(uint64_t a1)
{
  uint64_t result = sub_1B4BEBB6C(a1 + 16);
  if (result)
  {
    return sub_1B4BD61BC(a1 + 48);
  }
  return result;
}

BOOL sub_1B4BD61BC(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 8);
  do
  {
    int v3 = v2;
    BOOL v4 = __OFSUB__(v2--, 1);
    if (v2 < 0 != v4) {
      break;
    }
    uint64_t v5 = sub_1B4BC824C(a1, v2);
  }
  while ((sub_1B4BEBB6C(v5 + 16) & 1) != 0);
  return v3 < 1;
}

void *sub_1B4BD6214@<X0>(void *a1@<X8>)
{
  return sub_1B4BB8DC0(a1, "sentencepiece.SentencePieceText");
}

uint64_t sub_1B4BD6224(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F0D54550;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = a2;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 4sub_1B4BC92E4(&a9, 0) = 0;
  if (atomic_load_explicit(dword_1EC5510B0, memory_order_acquire)) {
    sub_1B4BF1D44(dword_1EC5510B0);
  }
  return a1;
}

void sub_1B4BD6294(_Unwind_Exception *a1)
{
  sub_1B4BD751C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1B4BD62AC(uint64_t a1)
{
  int v3 = (uint64_t *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 8);
  BOOL v4 = (void *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  if (v2)
  {
    if (!*v4) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if (v4)
  {
LABEL_3:
    sub_1B4BE6194((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece.pb.cc", 755);
    uint64_t v5 = sub_1B4BE61AC(v8, "CHECK failed: GetArena() == nullptr: ");
    sub_1B4BE62E8((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_1B4BE62F0((uint64_t)v8);
  }
LABEL_4:
  sub_1B4BD47E4(v3);
  sub_1B4BD751C((uint64_t *)(a1 + 16));
  return a1;
}

void sub_1B4BD6344(void *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1B4BE62F0((uint64_t)va);
  sub_1B4BB21F0(a1);
}

void sub_1B4BD6368(uint64_t a1)
{
  sub_1B4BD62AC(a1);
  JUMPOUT(0x1BA9929C0);
}

unsigned __int8 *sub_1B4BD63A0(uint64_t a1)
{
  uint64_t result = sub_1B4BD7110((unsigned __int8 *)(a1 + 16));
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3)
  {
    unint64_t v4 = v3 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v4 + 31) < 0)
    {
      **(unsigned char **)(v4 + 8) = 0;
      *(void *)(v4 + 16) = 0;
    }
    else
    {
      *(unsigned char *)(v4 + 8) = 0;
      *(unsigned char *)(v4 + 31) = 0;
    }
  }
  return result;
}

char *sub_1B4BD63F4(uint64_t a1, char *a2, int32x2_t *a3)
{
  uint64_t v22 = a2;
  if ((sub_1B4BD6E44((uint64_t)a3, &v22, a3[11].i32[1]) & 1) == 0)
  {
    uint64_t v5 = (void *)(a1 + 8);
    while (1)
    {
      unint64_t v6 = v22 + 1;
      unsigned int v7 = *v22;
      if ((*v22 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      unsigned int v8 = v7 + (*v6 << 7);
      unsigned int v7 = v8 - 128;
      if ((*v6 & 0x80000000) == 0) {
        break;
      }
      int v19 = (char *)sub_1B4BF37FC((uint64_t)v22, v8 - 128);
      uint64_t v22 = v19;
      if (!v19) {
        return 0;
      }
      unint64_t v6 = v19;
      unsigned int v7 = v20;
LABEL_7:
      if (v7 == 10)
      {
        unint64_t v11 = v6 - 1;
        while (1)
        {
          std::string::size_type v12 = (unsigned __int8 *)(v11 + 1);
          uint64_t v22 = v11 + 1;
          int v13 = *(int **)(a1 + 32);
          if (!v13) {
            break;
          }
          uint64_t v14 = *(int *)(a1 + 24);
          int v15 = *v13;
          if ((int)v14 >= *v13)
          {
            if (v15 == *(_DWORD *)(a1 + 28))
            {
LABEL_22:
              sub_1B4BF8BEC(a1 + 16, v15 + 1);
              int v13 = *(int **)(a1 + 32);
              int v15 = *v13;
            }
            int *v13 = v15 + 1;
            uint64_t v16 = sub_1B4BD6B80(*(void *)(a1 + 16));
            uint64_t v17 = *(void *)(a1 + 32);
            uint64_t v18 = *(int *)(a1 + 24);
            *(_DWORD *)(a1 + 24) = v18 + 1;
            *(void *)(v17 + 8 * v18 + 8) = v16;
            std::string::size_type v12 = (unsigned __int8 *)v22;
            goto LABEL_24;
          }
          *(_DWORD *)(a1 + 24) = v14 + 1;
          uint64_t v16 = *(void *)&v13[2 * v14 + 2];
LABEL_24:
          unint64_t v11 = (char *)sub_1B4BD65D4(a3, v16, v12);
          uint64_t v22 = v11;
          if (!v11) {
            return 0;
          }
          if (*(void *)a3 <= (unint64_t)v11 || *v11 != 10) {
            goto LABEL_27;
          }
        }
        int v15 = *(_DWORD *)(a1 + 28);
        goto LABEL_22;
      }
      if (v7) {
        BOOL v9 = (v7 & 7) == 4;
      }
      else {
        BOOL v9 = 1;
      }
      if (v9)
      {
        a3[10].i32[0] = v7 - 1;
        return v22;
      }
      if (*v5)
      {
        int v10 = (std::string *)((*v5 & 0xFFFFFFFFFFFFFFFELL) + 8);
      }
      else
      {
        int v10 = (std::string *)sub_1B4BD6F84((unint64_t *)(a1 + 8));
        unint64_t v6 = v22;
      }
      uint64_t v22 = (char *)sub_1B4BF3D6C(v7, v10, v6, a3);
      if (!v22) {
        return 0;
      }
LABEL_27:
      if (sub_1B4BD6E44((uint64_t)a3, &v22, a3[11].i32[1])) {
        return v22;
      }
    }
    unint64_t v6 = v22 + 2;
LABEL_6:
    uint64_t v22 = v6;
    goto LABEL_7;
  }
  return v22;
}

uint64_t sub_1B4BD65D4(int32x2_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  int v6 = (char)*a3;
  unsigned int v7 = *a3;
  if (v6 < 0)
  {
    uint64_t result = sub_1B4BF3840((uint64_t)a3, v7);
    if (!result) {
      return result;
    }
    uint64_t v8 = result;
    unsigned int v7 = v10;
  }
  else
  {
    uint64_t v8 = (uint64_t)(a3 + 1);
  }
  int v11 = sub_1B4BD72B0((uint64_t)a1, v8, v7);
  int v12 = a1[11].i32[0];
  BOOL v13 = __OFSUB__(v12--, 1);
  a1[11].i32[0] = v12;
  if (v12 < 0 != v13) {
    return 0;
  }
  int v14 = v11;
  uint64_t result = sub_1B4BD5920(a2, v8, a1);
  if (!result) {
    return result;
  }
  ++a1[11].i32[0];
  if (a1[10].i32[0]) {
    return 0;
  }
  int v15 = a1[3].i32[1] + v14;
  a1[3].i32[1] = v15;
  *a1 = (int32x2_t)(*(void *)&a1[1] + (v15 & (v15 >> 31)));
  return result;
}

char *sub_1B4BD669C(uint64_t a1, char *__dst, unint64_t *a3)
{
  int v6 = *(_DWORD *)(a1 + 24);
  if (v6)
  {
    for (int i = 0; i != v6; ++i)
    {
      if (*a3 <= (unint64_t)__dst) {
        long long __dst = sub_1B4BE5708((uint64_t)a3, __dst);
      }
      uint64_t v8 = sub_1B4BC8370(a1 + 16, i);
      *long long __dst = 10;
      unsigned int v9 = *(_DWORD *)(v8 + 44);
      if (v9 > 0x7F)
      {
        __dst[1] = v9 | 0x80;
        unsigned int v11 = v9 >> 7;
        if (v9 >> 14)
        {
          unsigned int v10 = __dst + 3;
          do
          {
            *(v10 - 1) = v11 | 0x80;
            unsigned int v12 = v11 >> 7;
            ++v10;
            unsigned int v13 = v11 >> 14;
            v11 >>= 7;
          }
          while (v13);
          *(v10 - 1) = v12;
        }
        else
        {
          __dst[2] = v11;
          unsigned int v10 = __dst + 3;
        }
      }
      else
      {
        __dst[1] = v9;
        unsigned int v10 = __dst + 2;
      }
      long long __dst = sub_1B4BD5CA0(v8, v10, a3);
    }
  }
  uint64_t v14 = *(void *)(a1 + 8);
  if ((v14 & 1) == 0) {
    return __dst;
  }
  unint64_t v16 = v14 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v16 + 31) < 0)
  {
    uint64_t v17 = *(void **)(v16 + 8);
    uint64_t v18 = *(void *)(v16 + 16);
  }
  else
  {
    uint64_t v17 = (void *)(v16 + 8);
    LODWORD(v18) = *(unsigned __int8 *)(v16 + 31);
  }
  if ((uint64_t)(*a3 - (void)__dst) >= (int)v18)
  {
    uint64_t v19 = (int)v18;
    memcpy(__dst, v17, (int)v18);
    __dst += v19;
    return __dst;
  }
  return sub_1B4BE581C((uint64_t *)a3, (char *)v17, v18, (unint64_t)__dst);
}

uint64_t sub_1B4BD6818(uint64_t a1)
{
  uint64_t v2 = *(int *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 32);
  if (v3) {
    unint64_t v4 = (uint64_t *)(v3 + 8);
  }
  else {
    unint64_t v4 = 0;
  }
  if (v2)
  {
    uint64_t v5 = 8 * v2;
    do
    {
      uint64_t v6 = *v4++;
      uint64_t v7 = sub_1B4BD5E94(v6);
      v2 += v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6);
      v5 -= 8;
    }
    while (v5);
  }
  else
  {
    uint64_t v2 = 0;
  }
  uint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    unint64_t v10 = v8 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v10 + 31) < 0) {
      uint64_t v11 = *(void *)(v10 + 16);
    }
    else {
      uint64_t v11 = *(unsigned __int8 *)(v10 + 31);
    }
    v2 += v11;
  }
  *(_DWORD *)(a1 + 4sub_1B4BC92E4(&a9, 0) = v2;
  return v2;
}

void sub_1B4BD68C4(uint64_t a1, void *lpsrc)
{
  if (!__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1F0D537C8, (const struct __class_type_info *)&unk_1F0D53238, 0))sub_1B4BD7788(); {
  sub_1B4BD694C(a1, (uint64_t)lpsrc);
  }
}

void sub_1B4BD694C(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    sub_1B4BE6194((uint64_t)v14, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece.pb.cc", 877);
    unint64_t v4 = sub_1B4BE61AC(v14, "CHECK failed: (&from) != (this): ");
    sub_1B4BE62E8((uint64_t)&v13, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_1B4BE62F0((uint64_t)v14);
  }
  uint64_t v5 = *(void *)(a2 + 8);
  if (v5)
  {
    unint64_t v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v7 = (v5 & 0xFFFFFFFFFFFFFFFELL) + 8;
    uint64_t v8 = *(void *)(a1 + 8);
    if (v8) {
      unsigned int v9 = (std::string *)((v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
    }
    else {
      unsigned int v9 = (std::string *)sub_1B4BD6F84((unint64_t *)(a1 + 8));
    }
    int v10 = *(char *)(v6 + 31);
    if (v10 >= 0) {
      uint64_t v11 = (const std::string::value_type *)v7;
    }
    else {
      uint64_t v11 = *(const std::string::value_type **)(v6 + 8);
    }
    if (v10 >= 0) {
      std::string::size_type v12 = *(unsigned __int8 *)(v6 + 31);
    }
    else {
      std::string::size_type v12 = *(void *)(v6 + 16);
    }
    std::string::append(v9, v11, v12);
  }
  sub_1B4BD75D8(a1 + 16, a2 + 16);
}

void sub_1B4BD6A18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1B4BE62F0((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_1B4BD6A30(uint64_t a1)
{
  return sub_1B4BD6A38(a1 + 16);
}

BOOL sub_1B4BD6A38(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 8);
  do
  {
    int v3 = v2;
    BOOL v4 = __OFSUB__(v2--, 1);
    if (v2 < 0 != v4) {
      break;
    }
    uint64_t v5 = sub_1B4BC8370(a1, v2);
    if (!sub_1B4BEBB6C(v5 + 16)) {
      break;
    }
  }
  while (sub_1B4BD61BC(v5 + 48));
  return v3 < 1;
}

void *sub_1B4BD6AA0@<X0>(void *a1@<X8>)
{
  return sub_1B4BB8DC0(a1, "sentencepiece.NBestSentencePieceText");
}

uint64_t sub_1B4BD6AB0(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  if (*(unsigned char *)(a1 + 24)) {
    (*(void (**)(void, void *, uint64_t))(**(void **)(*(void *)(a1 + 32) + 32) + 40))(*(void *)(*(void *)(a1 + 32) + 32), &unk_1F0D532B0, 80);
  }
  uint64_t v2 = sub_1B4BE4B00(a1, 80);
  sub_1B4BD45E8(v2, a1);
  return v2;
}

void sub_1B4BD6B5C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9929C0](v1, 0x10A1C40E4A317A1);
  _Unwind_Resume(a1);
}

uint64_t sub_1B4BD6B80(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  if (*(unsigned char *)(a1 + 24)) {
    (*(void (**)(void, void *, uint64_t))(**(void **)(*(void *)(a1 + 32) + 32) + 40))(*(void *)(*(void *)(a1 + 32) + 32), &unk_1F0D531E0, 88);
  }
  uint64_t v2 = sub_1B4BE4B00(a1, 88);
  sub_1B4BD5638(v2, a1);
  return v2;
}

void sub_1B4BD6C2C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9929C0](v1, 0x10A1C40431D3885);
  _Unwind_Resume(a1);
}

uint64_t sub_1B4BD6C50(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  if (*(unsigned char *)(a1 + 24)) {
    (*(void (**)(void, void *, uint64_t))(**(void **)(*(void *)(a1 + 32) + 32) + 40))(*(void *)(*(void *)(a1 + 32) + 32), &unk_1F0D53238, 48);
  }
  uint64_t v2 = sub_1B4BE4B00(a1, 48);
  sub_1B4BD6224(v2, a1);
  return v2;
}

void sub_1B4BD6CFC(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9929C0](v1, 0x10A1C40290C9B23);
  _Unwind_Resume(a1);
}

uint64_t sub_1B4BD6D20()
{
  return sub_1B4BD6AB0(0);
}

uint64_t sub_1B4BD6D28(uint64_t a1, uint64_t a2)
{
  return sub_1B4BD6AB0(a2);
}

uint64_t sub_1B4BD6D30(uint64_t a1)
{
  return *(unsigned int *)(a1 + 44);
}

uint64_t sub_1B4BD6D38()
{
  return 0;
}

uint64_t sub_1B4BD6D40()
{
  return sub_1B4BD6B80(0);
}

uint64_t sub_1B4BD6D48(uint64_t a1, uint64_t a2)
{
  return sub_1B4BD6B80(a2);
}

uint64_t sub_1B4BD6D50(uint64_t a1)
{
  return *(unsigned int *)(a1 + 44);
}

uint64_t sub_1B4BD6D58()
{
  return sub_1B4BD6C50(0);
}

uint64_t sub_1B4BD6D60(uint64_t a1, uint64_t a2)
{
  return sub_1B4BD6C50(a2);
}

uint64_t sub_1B4BD6D68(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

uint64_t sub_1B4BD6D70(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result)
  {
    sub_1B4BE6194((uint64_t)v6, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/arenastring.h", 363);
    int v3 = sub_1B4BE61AC(v6, "CHECK failed: !tagged_ptr_.IsTagged(): ");
    sub_1B4BE62E8((uint64_t)&v5, (const char **)&v3->__r_.__value_.__l.__data_);
    sub_1B4BE62F0((uint64_t)v6);
    uint64_t result = *a1;
  }
  if (!result)
  {
    sub_1B4BE6194((uint64_t)v6, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/arenastring.h", 364);
    BOOL v4 = sub_1B4BE61AC(v6, "CHECK failed: tagged_ptr_.UnsafeGet() != nullptr: ");
    sub_1B4BE62E8((uint64_t)&v5, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_1B4BE62F0((uint64_t)v6);
    return *a1;
  }
  return result;
}

void sub_1B4BD6E24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1B4BE62F0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B4BD6E44(uint64_t a1, char **a2, int a3)
{
  unint64_t v6 = *a2;
  if (!*a2)
  {
    sub_1B4BE6194((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 209);
    unint64_t v7 = sub_1B4BE61AC(v13, "CHECK failed: *ptr: ");
    sub_1B4BE62E8((uint64_t)&v12, (const char **)&v7->__r_.__value_.__l.__data_);
    sub_1B4BE62F0((uint64_t)v13);
    unint64_t v6 = *a2;
  }
  if ((unint64_t)v6 < *(void *)a1) {
    return 0;
  }
  signed int v9 = v6 - *(_DWORD *)(a1 + 8);
  if (v9 >= 17)
  {
    sub_1B4BE6194((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 212);
    int v10 = sub_1B4BE61AC(v13, "CHECK failed: (overrun) <= (kSlopBytes): ");
    sub_1B4BE62E8((uint64_t)&v12, (const char **)&v10->__r_.__value_.__l.__data_);
    sub_1B4BE62F0((uint64_t)v13);
  }
  if (*(_DWORD *)(a1 + 28) == v9)
  {
    if (v9 >= 1 && !*(void *)(a1 + 16)) {
      *a2 = 0;
    }
    return 1;
  }
  else
  {
    *a2 = sub_1B4BF2EE4(a1, v9, a3);
    return v11 & 1;
  }
}

void sub_1B4BD6F64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1B4BE62F0((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t sub_1B4BD6F84(unint64_t *a1)
{
  unint64_t v2 = *a1 & 0xFFFFFFFFFFFFFFFELL;
  if ((*a1 & 1) == 0)
  {
    if (v2) {
      goto LABEL_3;
    }
LABEL_7:
    operator new();
  }
  unint64_t v2 = *(void *)v2;
  if (!v2) {
    goto LABEL_7;
  }
LABEL_3:
  if (*(unsigned char *)(v2 + 24)) {
    (*(void (**)(void, void *, uint64_t))(**(void **)(*(void *)(v2 + 32) + 32) + 40))(*(void *)(*(void *)(v2 + 32) + 32), &unk_1F0D538E0, 32);
  }
  unint64_t v3 = sub_1B4BE4804((void *)v2, 0x20uLL, (uint64_t)sub_1B4BD704C);
  *(_OWORD *)unint64_t v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *a1 = v3 | 1;
  *(void *)unint64_t v3 = v2;
  return v3 + 8;
}

void sub_1B4BD704C(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

unsigned __int8 *sub_1B4BD7060(unsigned __int8 *result)
{
  uint64_t v1 = *((unsigned int *)result + 2);
  if ((v1 & 0x80000000) != 0)
  {
    sub_1B4BE6194((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1780);
    char v5 = sub_1B4BE61AC(v7, "CHECK failed: (n) >= (0): ");
    sub_1B4BE62E8((uint64_t)&v6, (const char **)&v5->__r_.__value_.__l.__data_);
    return (unsigned __int8 *)sub_1B4BE62F0((uint64_t)v7);
  }
  else if (v1)
  {
    unint64_t v2 = result;
    unint64_t v3 = (uint64_t *)(*((void *)result + 2) + 8);
    do
    {
      uint64_t v4 = *v3++;
      uint64_t result = sub_1B4BD4898(v4);
      --v1;
    }
    while (v1);
    *((_DWORD *)v2 + 2) = 0;
  }
  return result;
}

void sub_1B4BD70F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1B4BE62F0((uint64_t)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_1B4BD7110(unsigned __int8 *result)
{
  uint64_t v1 = *((unsigned int *)result + 2);
  if ((v1 & 0x80000000) != 0)
  {
    sub_1B4BE6194((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1780);
    char v5 = sub_1B4BE61AC(v7, "CHECK failed: (n) >= (0): ");
    sub_1B4BE62E8((uint64_t)&v6, (const char **)&v5->__r_.__value_.__l.__data_);
    return (unsigned __int8 *)sub_1B4BE62F0((uint64_t)v7);
  }
  else if (v1)
  {
    unint64_t v2 = result;
    unint64_t v3 = (uint64_t *)(*((void *)result + 2) + 8);
    do
    {
      uint64_t v4 = *v3++;
      uint64_t result = sub_1B4BD588C(v4);
      --v1;
    }
    while (v1);
    *((_DWORD *)v2 + 2) = 0;
  }
  return result;
}

void sub_1B4BD71A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1B4BE62F0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_1B4BD71C0(uint64_t *a1)
{
  sub_1B4BD71FC(a1);
  return sub_1B4BD727C(a1);
}

void sub_1B4BD71FC(void *a1)
{
  unint64_t v2 = (uint64_t *)a1[2];
  if (v2 && !*a1)
  {
    unint64_t v3 = v2 + 1;
    uint64_t v4 = *(unsigned int *)v2;
    if ((int)v4 >= 1)
    {
      do
      {
        if (*v3)
        {
          uint64_t v5 = sub_1B4BD4680(*v3);
          MEMORY[0x1BA9929C0](v5, 0x10A1C40E4A317A1);
        }
        ++v3;
        --v4;
      }
      while (v4);
      unint64_t v2 = (uint64_t *)a1[2];
    }
    operator delete(v2);
  }
  a1[2] = 0;
}

uint64_t *sub_1B4BD727C(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    sub_1B4BE44E8(v2);
  }
  return a1;
}

uint64_t sub_1B4BD72B0(uint64_t a1, int a2, unsigned int a3)
{
  if (a3 >= 0x7FFFFFF0)
  {
    sub_1B4BE6194((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 128);
    char v6 = sub_1B4BE61AC(v11, "CHECK failed: limit >= 0 && limit <= INT_MAX - kSlopBytes: ");
    sub_1B4BE62E8((uint64_t)&v10, (const char **)&v6->__r_.__value_.__l.__data_);
    sub_1B4BE62F0((uint64_t)v11);
  }
  uint64_t v7 = *(void *)(a1 + 8);
  int v8 = a2 - v7 + a3;
  *(void *)a1 = v7 + (v8 & (v8 >> 31));
  LODWORD(v7) = *(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 28) = v8;
  return (v7 - v8);
}

void sub_1B4BD7354(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1B4BE62F0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1B4BD736C(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    sub_1B4BE6194((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1799);
    uint64_t v4 = sub_1B4BE61AC(v11, "CHECK failed: (&other) != (this): ");
    sub_1B4BE62E8((uint64_t)&v10, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_1B4BE62F0((uint64_t)v11);
  }
  unsigned int v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    char v6 = (uint64_t *)(*(void *)(a2 + 16) + 8);
    uint64_t v7 = (uint64_t *)sub_1B4BF8C00((uint64_t *)a1, v5);
    sub_1B4BD745C((uint64_t *)a1, v7, v6, v5, **(_DWORD **)(a1 + 16) - *(_DWORD *)(a1 + 8));
    signed int v8 = *(_DWORD *)(a1 + 8) + v5;
    *(_DWORD *)(a1 + 8) = v8;
    signed int v9 = *(signed int **)(a1 + 16);
    if (*v9 < v8) {
      *signed int v9 = v8;
    }
  }
}

void sub_1B4BD7444(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1B4BE62F0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1B4BD745C(uint64_t *a1, uint64_t *a2, uint64_t *a3, unsigned int a4, unsigned int a5)
{
  if ((int)a5 >= (int)a4) {
    uint64_t v10 = a4;
  }
  else {
    uint64_t v10 = a5;
  }
  if ((int)v10 >= 1)
  {
    char v11 = a3;
    char v12 = a2;
    do
    {
      uint64_t v14 = *v11++;
      uint64_t v13 = v14;
      uint64_t v15 = *v12++;
      sub_1B4BD750C(v13, v15);
      --v10;
    }
    while (v10);
  }
  BOOL v16 = __OFSUB__(a4, a5);
  int v17 = a4 - a5;
  if (!((v17 < 0) ^ v16 | (v17 == 0)))
  {
    uint64_t v18 = *a1;
    uint64_t v19 = &a3[a5];
    unsigned int v20 = &a2[a5];
    do
    {
      uint64_t v21 = *v19++;
      uint64_t v22 = sub_1B4BD6AB0(v18);
      sub_1B4BD750C(v21, v22);
      *v20++ = v22;
      --v17;
    }
    while (v17);
  }
}

void sub_1B4BD750C(uint64_t a1, uint64_t a2)
{
}

uint64_t *sub_1B4BD751C(uint64_t *a1)
{
  sub_1B4BD7558(a1);
  return sub_1B4BD727C(a1);
}

void sub_1B4BD7558(void *a1)
{
  uint64_t v2 = (uint64_t *)a1[2];
  if (v2 && !*a1)
  {
    unint64_t v3 = v2 + 1;
    uint64_t v4 = *(unsigned int *)v2;
    if ((int)v4 >= 1)
    {
      do
      {
        if (*v3)
        {
          uint64_t v5 = sub_1B4BD56F0(*v3);
          MEMORY[0x1BA9929C0](v5, 0x10A1C40431D3885);
        }
        ++v3;
        --v4;
      }
      while (v4);
      uint64_t v2 = (uint64_t *)a1[2];
    }
    operator delete(v2);
  }
  a1[2] = 0;
}

void sub_1B4BD75D8(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    sub_1B4BE6194((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1799);
    uint64_t v4 = sub_1B4BE61AC(v11, "CHECK failed: (&other) != (this): ");
    sub_1B4BE62E8((uint64_t)&v10, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_1B4BE62F0((uint64_t)v11);
  }
  unsigned int v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    char v6 = (uint64_t *)(*(void *)(a2 + 16) + 8);
    uint64_t v7 = (uint64_t *)sub_1B4BF8C00((uint64_t *)a1, v5);
    sub_1B4BD76C8((uint64_t *)a1, v7, v6, v5, **(_DWORD **)(a1 + 16) - *(_DWORD *)(a1 + 8));
    signed int v8 = *(_DWORD *)(a1 + 8) + v5;
    *(_DWORD *)(a1 + 8) = v8;
    signed int v9 = *(signed int **)(a1 + 16);
    if (*v9 < v8) {
      *signed int v9 = v8;
    }
  }
}

void sub_1B4BD76B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1B4BE62F0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1B4BD76C8(uint64_t *a1, uint64_t *a2, uint64_t *a3, unsigned int a4, unsigned int a5)
{
  if ((int)a5 >= (int)a4) {
    uint64_t v10 = a4;
  }
  else {
    uint64_t v10 = a5;
  }
  if ((int)v10 >= 1)
  {
    char v11 = a3;
    char v12 = a2;
    do
    {
      uint64_t v14 = *v11++;
      uint64_t v13 = v14;
      uint64_t v15 = *v12++;
      sub_1B4BD7778(v13, v15);
      --v10;
    }
    while (v10);
  }
  BOOL v16 = __OFSUB__(a4, a5);
  int v17 = a4 - a5;
  if (!((v17 < 0) ^ v16 | (v17 == 0)))
  {
    uint64_t v18 = *a1;
    uint64_t v19 = &a3[a5];
    unsigned int v20 = &a2[a5];
    do
    {
      uint64_t v21 = *v19++;
      uint64_t v22 = sub_1B4BD6B80(v18);
      sub_1B4BD7778(v21, v22);
      *v20++ = v22;
      --v17;
    }
    while (v17);
  }
}

void sub_1B4BD7778(uint64_t a1, uint64_t a2)
{
}

void sub_1B4BD7788()
{
  __assert_rtn("down_cast", "casts.h", 94, "f == nullptr || dynamic_cast<To>(f) != nullptr");
}

void sub_1B4BD77B4()
{
  sub_1B4BE5E28(3014000, 3014000, "/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc");
  sub_1B4BDE168((uint64_t)&unk_1E9D406F0, 0);
  sub_1B4BF26F0((uint64_t)sub_1B4BF1AD4, (uint64_t)&unk_1E9D406F0);
}

void sub_1B4BD7824()
{
  sub_1B4BE5E28(3014000, 3014000, "/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc");
  sub_1B4BDD7D8(qword_1E9D409C8, 0);
  sub_1B4BF26F0((uint64_t)sub_1B4BF1AD4, (uint64_t)qword_1E9D409C8);
}

void sub_1B4BD7894()
{
  sub_1B4BE5E28(3014000, 3014000, "/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc");
  sub_1B4BDB90C((uint64_t)&unk_1E9D408F0, 0);
  sub_1B4BF26F0((uint64_t)sub_1B4BF1AD4, (uint64_t)&unk_1E9D408F0);
}

void sub_1B4BD7904()
{
  sub_1B4BE5E28(3014000, 3014000, "/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc");
  sub_1B4BDCF24((uint64_t)&unk_1E9D408A8, 0);
  sub_1B4BF26F0((uint64_t)sub_1B4BF1AD4, (uint64_t)&unk_1E9D408A8);
}

void sub_1B4BD7974()
{
  sub_1B4BE5E28(3014000, 3014000, "/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc");
  sub_1B4BDC724(qword_1E9D409A0, 0);
  sub_1B4BF26F0((uint64_t)sub_1B4BF1AD4, (uint64_t)qword_1E9D409A0);
}

void sub_1B4BD79E4()
{
  sub_1B4BE5E28(3014000, 3014000, "/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc");
  sub_1B4BD7A64((uint64_t)&unk_1E9D40760, 0);
  sub_1B4BF26F0((uint64_t)sub_1B4BF1AD4, (uint64_t)&unk_1E9D40760);
}

BOOL sub_1B4BD7A54(int a1)
{
  return (a1 - 1) < 6;
}

uint64_t sub_1B4BD7A64(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F0D540C8;
  *(void *)(a1 + 8) = a2;
  sub_1B4BE67B4(a1 + 16, a2);
  *(void *)(a1 + 128) = a2;
  *(void *)(a1 + 4sub_1B4BC92E4(&a9, 0) = 0;
  *(void *)(a1 + 56) = a2;
  *(_DWORD *)(a1 + 48) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 8sub_1B4BC92E4(&a9, 0) = a2;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = a2;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 12sub_1B4BC92E4(&a9, 0) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  if (atomic_load_explicit(dword_1EC5511A8, memory_order_acquire)) {
    sub_1B4BF1D44(dword_1EC5511A8);
  }
  *(void *)(a1 + 152) = &qword_1E9D40A98;
  *(void *)(a1 + 16sub_1B4BC92E4(&a9, 0) = &qword_1E9D40A98;
  *(void *)(a1 + 168) = &qword_1E9D40A98;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 216) = &qword_1E9D40A98;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 24sub_1B4BC92E4(&a9, 0) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(void *)(a1 + 272) = 0x1F4000000001;
  *(void *)(a1 + 28sub_1B4BC92E4(&a9, 0) = 0xF42403F7FDF3BLL;
  *(_DWORD *)(a1 + 288) = 1061158912;
  *(_OWORD *)(a1 + 292) = xmmword_1B4C99A40;
  *(_DWORD *)(a1 + 308) = 16843009;
  *(_WORD *)(a1 + 312) = 257;
  *(_DWORD *)(a1 + 316) = 1;
  *(void *)(a1 + 32sub_1B4BC92E4(&a9, 0) = 0xFFFFFFFF00000002;
  return a1;
}

void sub_1B4BD7BA0(_Unwind_Exception *a1)
{
  sub_1B4BF8BE8(v3);
  sub_1B4BF8BE8(v5);
  sub_1B4BF8BE8(v4);
  sub_1B4BF8BE8(v2);
  sub_1B4BE6894(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_1B4BD7BD4(uint64_t *a1)
{
  return a1;
}

uint64_t *sub_1B4BD7C30(uint64_t *a1)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = (void *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  if ((v2 & 1) == 0)
  {
    if (!v3) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if (*v3)
  {
LABEL_3:
    sub_1B4BE6194((uint64_t)v27, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 519);
    uint64_t v4 = sub_1B4BE61AC(v27, "CHECK failed: GetArena() == nullptr: ");
    sub_1B4BE62E8((uint64_t)&v26, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_1B4BE62F0((uint64_t)v27);
  }
LABEL_4:
  if ((uint64_t *)a1[19] != &qword_1E9D40A98)
  {
    uint64_t v5 = sub_1B4BD6D70(a1 + 19);
    uint64_t v6 = v5;
    if (*(char *)(v5 + 23) < 0) {
      operator delete(*(void **)v5);
    }
    MEMORY[0x1BA9929C0](v6, 0x1012C40EC159624);
  }
  if ((uint64_t *)a1[20] != &qword_1E9D40A98)
  {
    uint64_t v7 = sub_1B4BD6D70(a1 + 20);
    uint64_t v8 = v7;
    if (*(char *)(v7 + 23) < 0) {
      operator delete(*(void **)v7);
    }
    MEMORY[0x1BA9929C0](v8, 0x1012C40EC159624);
  }
  if ((uint64_t *)a1[21] != &qword_1E9D40A98)
  {
    uint64_t v9 = sub_1B4BD6D70(a1 + 21);
    uint64_t v10 = v9;
    if (*(char *)(v9 + 23) < 0) {
      operator delete(*(void **)v9);
    }
    MEMORY[0x1BA9929C0](v10, 0x1012C40EC159624);
  }
  if (a1[22])
  {
    uint64_t v11 = sub_1B4BD6D70(a1 + 22);
    uint64_t v12 = v11;
    if (*(char *)(v11 + 23) < 0) {
      operator delete(*(void **)v11);
    }
    MEMORY[0x1BA9929C0](v12, 0x1012C40EC159624);
  }
  if (a1[23])
  {
    uint64_t v13 = sub_1B4BD6D70(a1 + 23);
    uint64_t v14 = v13;
    if (*(char *)(v13 + 23) < 0) {
      operator delete(*(void **)v13);
    }
    MEMORY[0x1BA9929C0](v14, 0x1012C40EC159624);
  }
  if (a1[24])
  {
    uint64_t v15 = sub_1B4BD6D70(a1 + 24);
    uint64_t v16 = v15;
    if (*(char *)(v15 + 23) < 0) {
      operator delete(*(void **)v15);
    }
    MEMORY[0x1BA9929C0](v16, 0x1012C40EC159624);
  }
  if (a1[25])
  {
    uint64_t v17 = sub_1B4BD6D70(a1 + 25);
    uint64_t v18 = v17;
    if (*(char *)(v17 + 23) < 0) {
      operator delete(*(void **)v17);
    }
    MEMORY[0x1BA9929C0](v18, 0x1012C40EC159624);
  }
  uint64_t result = a1 + 26;
  if (a1[26])
  {
    uint64_t v20 = sub_1B4BD6D70(result);
    uint64_t v21 = v20;
    if (*(char *)(v20 + 23) < 0) {
      operator delete(*(void **)v20);
    }
    uint64_t result = (uint64_t *)MEMORY[0x1BA9929C0](v21, 0x1012C40EC159624);
  }
  uint64_t v23 = (uint64_t *)a1[27];
  uint64_t v22 = a1 + 27;
  if (v23 != &qword_1E9D40A98)
  {
    uint64_t v24 = sub_1B4BD6D70(v22);
    uint64_t v25 = v24;
    if (*(char *)(v24 + 23) < 0) {
      operator delete(*(void **)v24);
    }
    return (uint64_t *)MEMORY[0x1BA9929C0](v25, 0x1012C40EC159624);
  }
  return result;
}

void sub_1B4BD7EEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1B4BE62F0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1B4BD7F08(uint64_t *a1)
{
  sub_1B4BD7BD4(a1);
  JUMPOUT(0x1BA9929C0);
}

uint64_t sub_1B4BD7F40(uint64_t a1)
{
  sub_1B4BEA63C((unsigned __int8 *)(a1 + 16));
  sub_1B4BE0670(a1 + 56);
  sub_1B4BE0670(a1 + 80);
  sub_1B4BE0670(a1 + 104);
  uint64_t result = sub_1B4BE0670(a1 + 128);
  unsigned int v3 = *(_DWORD *)(a1 + 40);
  if (!(_BYTE)v3) {
    goto LABEL_10;
  }
  if (v3)
  {
    unint64_t v4 = *(void *)(a1 + 152) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v4 + 23) < 0)
    {
      **(unsigned char **)unint64_t v4 = 0;
      *(void *)(v4 + 8) = 0;
      if ((v3 & 2) != 0) {
        goto LABEL_16;
      }
    }
    else
    {
      *(unsigned char *)unint64_t v4 = 0;
      *(unsigned char *)(v4 + 23) = 0;
      if ((v3 & 2) != 0) {
        goto LABEL_16;
      }
    }
LABEL_4:
    if ((v3 & 4) == 0) {
      goto LABEL_5;
    }
LABEL_20:
    unint64_t v6 = *(void *)(a1 + 168) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v6 + 23) < 0)
    {
      **(unsigned char **)unint64_t v6 = 0;
      *(void *)(v6 + 8) = 0;
      if ((v3 & 8) != 0) {
        goto LABEL_24;
      }
    }
    else
    {
      *(unsigned char *)unint64_t v6 = 0;
      *(unsigned char *)(v6 + 23) = 0;
      if ((v3 & 8) != 0) {
        goto LABEL_24;
      }
    }
LABEL_6:
    if ((v3 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_25;
  }
  if ((v3 & 2) == 0) {
    goto LABEL_4;
  }
LABEL_16:
  unint64_t v5 = *(void *)(a1 + 160) & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v5 + 23) < 0)
  {
    **(unsigned char **)unint64_t v5 = 0;
    *(void *)(v5 + 8) = 0;
    if ((v3 & 4) != 0) {
      goto LABEL_20;
    }
  }
  else
  {
    *(unsigned char *)unint64_t v5 = 0;
    *(unsigned char *)(v5 + 23) = 0;
    if ((v3 & 4) != 0) {
      goto LABEL_20;
    }
  }
LABEL_5:
  if ((v3 & 8) == 0) {
    goto LABEL_6;
  }
LABEL_24:
  uint64_t result = (uint64_t)sub_1B4BE52E4((std::string *)(a1 + 176), &off_1E9D40358);
  if ((v3 & 0x10) == 0)
  {
LABEL_7:
    if ((v3 & 0x20) == 0) {
      goto LABEL_8;
    }
    goto LABEL_26;
  }
LABEL_25:
  uint64_t result = (uint64_t)sub_1B4BE52E4((std::string *)(a1 + 184), &off_1E9D40318);
  if ((v3 & 0x20) == 0)
  {
LABEL_8:
    if ((v3 & 0x40) == 0) {
      goto LABEL_9;
    }
    goto LABEL_27;
  }
LABEL_26:
  uint64_t result = (uint64_t)sub_1B4BE52E4((std::string *)(a1 + 192), &off_1E9D40250);
  if ((v3 & 0x40) != 0)
  {
LABEL_27:
    uint64_t result = (uint64_t)sub_1B4BE52E4((std::string *)(a1 + 200), &off_1E9D40270);
    if ((v3 & 0x80) != 0) {
      goto LABEL_28;
    }
LABEL_10:
    if ((v3 & 0x100) == 0) {
      goto LABEL_32;
    }
    goto LABEL_29;
  }
LABEL_9:
  if ((v3 & 0x80) == 0) {
    goto LABEL_10;
  }
LABEL_28:
  uint64_t result = (uint64_t)sub_1B4BE52E4((std::string *)(a1 + 208), &off_1E9D40338);
  if ((v3 & 0x100) == 0) {
    goto LABEL_32;
  }
LABEL_29:
  unint64_t v7 = *(void *)(a1 + 216) & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v7 + 23) < 0)
  {
    **(unsigned char **)unint64_t v7 = 0;
    *(void *)(v7 + 8) = 0;
  }
  else
  {
    *(unsigned char *)unint64_t v7 = 0;
    *(unsigned char *)(v7 + 23) = 0;
  }
LABEL_32:
  if ((v3 & 0xFE00) != 0)
  {
    *(void *)(a1 + 224) = 0;
    *(void *)(a1 + 232) = 0;
    *(void *)(a1 + 239) = 0;
  }
  if ((v3 & 0xFF0000) != 0)
  {
    *(void *)(a1 + 247) = 0;
    *(unsigned char *)(a1 + 271) = 0;
    *(void *)(a1 + 255) = 0;
    *(void *)(a1 + 263) = 0;
    *(_DWORD *)(a1 + 272) = 1;
  }
  if (HIBYTE(v3))
  {
    *(void *)(a1 + 276) = 0x3F7FDF3B00001F40;
    *(void *)(a1 + 284) = 0x3F400000000F4240;
    *(_OWORD *)(a1 + 292) = xmmword_1B4C99A40;
  }
  if (*(unsigned char *)(a1 + 44))
  {
    *(_WORD *)(a1 + 312) = 257;
    *(_DWORD *)(a1 + 308) = 16843009;
    *(void *)(a1 + 316) = 0x200000001;
  }
  *(_DWORD *)(a1 + 324) = -1;
  *(void *)(a1 + 4sub_1B4BC92E4(&a9, 0) = 0;
  uint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    unint64_t v9 = v8 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v9 + 31) < 0)
    {
      **(unsigned char **)(v9 + 8) = 0;
      *(void *)(v9 + 16) = 0;
    }
    else
    {
      *(unsigned char *)(v9 + 8) = 0;
      *(unsigned char *)(v9 + 31) = 0;
    }
  }
  return result;
}

char *sub_1B4BD8208(uint64_t a1, uint64_t a2, int32x2_t *a3)
{
  *(void *)v188 = a2;
  char v5 = sub_1B4BD6E44((uint64_t)a3, (char **)v188, a3[11].i32[1]);
  uint64_t result = *(char **)v188;
  if (v5) {
    return result;
  }
  v187 = (unint64_t *)(a1 + 8);
  unint64_t v7 = (uint64_t *)(a1 + 128);
  uint64_t v8 = (uint64_t *)(a1 + 104);
  unint64_t v9 = (uint64_t *)(a1 + 80);
  uint64_t v10 = (uint64_t *)(a1 + 56);
  while (2)
  {
    uint64_t v11 = result + 1;
    unsigned int v12 = *result;
    if ((*result & 0x80000000) == 0) {
      goto LABEL_7;
    }
    unsigned int v13 = v12 + (*v11 << 7);
    unsigned int v12 = v13 - 128;
    if ((*v11 & 0x80000000) == 0)
    {
      uint64_t v11 = result + 2;
LABEL_7:
      *(void *)v188 = v11;
      goto LABEL_8;
    }
    uint64_t result = (char *)sub_1B4BF37FC((uint64_t)result, v13 - 128);
    *(void *)v188 = result;
    if (!result) {
      return result;
    }
    uint64_t v11 = result;
    unsigned int v12 = v22;
LABEL_8:
    switch(v12 >> 3)
    {
      case 1u:
        if (v12 != 10) {
          goto LABEL_275;
        }
        uint64_t result = v11 - 1;
        while (2)
        {
          uint64_t v14 = result + 1;
          *(void *)v188 = result + 1;
          uint64_t v15 = *(int **)(a1 + 72);
          if (!v15)
          {
            int v17 = *(_DWORD *)(a1 + 68);
LABEL_16:
            sub_1B4BF8BEC(a1 + 56, v17 + 1);
            uint64_t v15 = *(int **)(a1 + 72);
            int v17 = *v15;
            goto LABEL_17;
          }
          uint64_t v16 = *(int *)(a1 + 64);
          int v17 = *v15;
          if ((int)v16 < *v15)
          {
            *(_DWORD *)(a1 + 64) = v16 + 1;
            uint64_t v18 = *(std::string **)&v15[2 * v16 + 2];
            goto LABEL_22;
          }
          if (v17 == *(_DWORD *)(a1 + 68)) {
            goto LABEL_16;
          }
LABEL_17:
          *uint64_t v15 = v17 + 1;
          uint64_t v19 = *v10;
          if (!*v10) {
            operator new();
          }
          if (*(unsigned char *)(v19 + 24)) {
            (*(void (**)(void, void *, uint64_t))(**(void **)(*(void *)(v19 + 32) + 32) + 40))(*(void *)(*(void *)(v19 + 32) + 32), &unk_1F0D53AB8, 24);
          }
          uint64_t v18 = (std::string *)sub_1B4BE4804((void *)v19, 0x18uLL, (uint64_t)sub_1B4BE057C);
          v18->__r_.__value_.__r.__words[0] = 0;
          v18->__r_.__value_.__l.__size_ = 0;
          v18->__r_.__value_.__r.__words[2] = 0;
          uint64_t v20 = *(void *)(a1 + 72);
          uint64_t v21 = *(int *)(a1 + 64);
          *(_DWORD *)(a1 + 64) = v21 + 1;
          *(void *)(v20 + 8 * v21 + 8) = v18;
          uint64_t v14 = *(char **)v188;
LABEL_22:
          uint64_t result = (char *)sub_1B4BF38B0(v18, v14, (uint64_t)a3);
          *(void *)v188 = result;
          if (result)
          {
            if (*(void *)a3 <= (unint64_t)result || *result != 10) {
              goto LABEL_273;
            }
            continue;
          }
          return result;
        }
      case 2u:
        if (v12 != 18) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 40) |= 1u;
        uint64_t v23 = *(void *)(a1 + 8);
        uint64_t v24 = (void *)(v23 & 0xFFFFFFFFFFFFFFFELL);
        if (v23) {
          uint64_t v24 = (void *)*v24;
        }
        uint64_t v25 = (uint64_t *)(a1 + 152);
        goto LABEL_265;
      case 3u:
        if (v12 != 24) {
          goto LABEL_275;
        }
        char v26 = v11 + 1;
        unint64_t v27 = *v11;
        if ((*v11 & 0x80000000) == 0) {
          goto LABEL_36;
        }
        int v28 = *v26;
        int v29 = v27 + (v28 << 7);
        unint64_t v27 = (v29 - 128);
        if (v28 < 0)
        {
          uint64_t result = (char *)sub_1B4BF37B4((uint64_t)v11, (v29 - 128));
          *(void *)v188 = result;
          if (!result) {
            return result;
          }
          unint64_t v27 = v157;
        }
        else
        {
          char v26 = v11 + 2;
LABEL_36:
          *(void *)v188 = v26;
        }
        if ((v27 - 1) > 3)
        {
          if (*v187) {
            v186 = (std::string *)((*v187 & 0xFFFFFFFFFFFFFFFELL) + 8);
          }
          else {
            v186 = (std::string *)sub_1B4BD6F84(v187);
          }
          sub_1B4BF36A0(3, v27, v186);
        }
        else
        {
          *(_DWORD *)(a1 + 40) |= 0x800000u;
          *(_DWORD *)(a1 + 272) = v27;
        }
        goto LABEL_273;
      case 4u:
        if (v12 != 32) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 40) |= 0x1000000u;
        int v31 = v11 + 1;
        LODWORD(v3sub_1B4BC92E4(&a9, 0) = *v11;
        if ((v30 & 0x80) == 0) {
          goto LABEL_43;
        }
        int v32 = *v31;
        uint64_t v30 = v30 + (v32 << 7) - 128;
        if (v32 < 0)
        {
          uint64_t result = (char *)sub_1B4BF37B4((uint64_t)v11, v30);
          *(void *)v188 = result;
          *(_DWORD *)(a1 + 276) = v158;
          if (!result) {
            return result;
          }
        }
        else
        {
          int v31 = v11 + 2;
LABEL_43:
          *(void *)v188 = v31;
          *(_DWORD *)(a1 + 276) = v30;
        }
        goto LABEL_273;
      case 5u:
        if (v12 != 42) {
          goto LABEL_275;
        }
        uint64_t result = v11 - 1;
        while (1)
        {
          int v33 = result + 1;
          *(void *)v188 = result + 1;
          uint64_t v34 = *(int **)(a1 + 96);
          if (!v34) {
            break;
          }
          uint64_t v35 = *(int *)(a1 + 88);
          int v36 = *v34;
          if ((int)v35 >= *v34)
          {
            if (v36 == *(_DWORD *)(a1 + 92))
            {
LABEL_51:
              sub_1B4BF8BEC(a1 + 80, v36 + 1);
              uint64_t v34 = *(int **)(a1 + 96);
              int v36 = *v34;
            }
            int *v34 = v36 + 1;
            uint64_t v38 = *v9;
            if (!*v9) {
              operator new();
            }
            if (*(unsigned char *)(v38 + 24)) {
              (*(void (**)(void, void *, uint64_t))(**(void **)(*(void *)(v38 + 32) + 32) + 40))(*(void *)(*(void *)(v38 + 32) + 32), &unk_1F0D53AB8, 24);
            }
            int v37 = (std::string *)sub_1B4BE4804((void *)v38, 0x18uLL, (uint64_t)sub_1B4BE057C);
            v37->__r_.__value_.__r.__words[0] = 0;
            v37->__r_.__value_.__l.__size_ = 0;
            v37->__r_.__value_.__r.__words[2] = 0;
            uint64_t v39 = *(void *)(a1 + 96);
            uint64_t v40 = *(int *)(a1 + 88);
            *(_DWORD *)(a1 + 88) = v40 + 1;
            *(void *)(v39 + 8 * v40 + 8) = v37;
            int v33 = *(char **)v188;
            goto LABEL_57;
          }
          *(_DWORD *)(a1 + 88) = v35 + 1;
          int v37 = *(std::string **)&v34[2 * v35 + 2];
LABEL_57:
          uint64_t result = (char *)sub_1B4BF38B0(v37, v33, (uint64_t)a3);
          *(void *)v188 = result;
          if (!result) {
            return result;
          }
          if (*(void *)a3 <= (unint64_t)result || *result != 42) {
            goto LABEL_273;
          }
        }
        int v36 = *(_DWORD *)(a1 + 92);
        goto LABEL_51;
      case 6u:
        if (v12 != 48) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 40) |= 0x200u;
        uint64_t v42 = v11 + 1;
        LODWORD(v41) = *v11;
        if ((v41 & 0x80) == 0) {
          goto LABEL_65;
        }
        int v43 = *v42;
        uint64_t v41 = v41 + (v43 << 7) - 128;
        if (v43 < 0)
        {
          uint64_t result = (char *)sub_1B4BF37B4((uint64_t)v11, v41);
          *(void *)v188 = result;
          *(_DWORD *)(a1 + 224) = v159;
          if (!result) {
            return result;
          }
        }
        else
        {
          uint64_t v42 = v11 + 2;
LABEL_65:
          *(void *)v188 = v42;
          *(_DWORD *)(a1 + 224) = v41;
        }
        goto LABEL_273;
      case 7u:
        if (v12 != 58) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 40) |= 2u;
        uint64_t v44 = *(void *)(a1 + 8);
        uint64_t v24 = (void *)(v44 & 0xFFFFFFFFFFFFFFFELL);
        if (v44) {
          uint64_t v24 = (void *)*v24;
        }
        uint64_t v25 = (uint64_t *)(a1 + 160);
        goto LABEL_265;
      case 0xAu:
        if (v12 != 85) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 40) |= 0x2000000u;
        int v46 = *(_DWORD *)v11;
        uint64_t v45 = v11 + 4;
        *(_DWORD *)(a1 + 28sub_1B4BC92E4(&a9, 0) = v46;
        goto LABEL_255;
      case 0xBu:
        if (v12 != 88) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 40) |= 0x800u;
        uint64_t v47 = v11 + 1;
        uint64_t v48 = *v11;
        if ((*v11 & 0x80000000) == 0) {
          goto LABEL_76;
        }
        int v49 = *v47;
        uint64_t v48 = v48 + (v49 << 7) - 128;
        if (v49 < 0)
        {
          uint64_t result = (char *)sub_1B4BF37B4((uint64_t)v11, v48);
          *(void *)v188 = result;
          *(void *)(a1 + 232) = v160;
          if (!result) {
            return result;
          }
        }
        else
        {
          uint64_t v47 = v11 + 2;
LABEL_76:
          *(void *)v188 = v47;
          *(void *)(a1 + 232) = v48;
        }
        goto LABEL_273;
      case 0xCu:
        if (v12 != 96) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 40) |= 0x400u;
        uint64_t v51 = v11 + 1;
        LODWORD(v5sub_1B4BC92E4(&a9, 0) = *v11;
        if ((v50 & 0x80) == 0) {
          goto LABEL_81;
        }
        int v52 = *v51;
        uint64_t v50 = v50 + (v52 << 7) - 128;
        if (v52 < 0)
        {
          uint64_t result = (char *)sub_1B4BF37B4((uint64_t)v11, v50);
          *(void *)v188 = result;
          *(_DWORD *)(a1 + 228) = v161;
          if (!result) {
            return result;
          }
        }
        else
        {
          uint64_t v51 = v11 + 2;
LABEL_81:
          *(void *)v188 = v51;
          *(_DWORD *)(a1 + 228) = v50;
        }
        goto LABEL_273;
      case 0xDu:
        if (v12 != 104) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 40) |= 0x1000u;
        long long v54 = v11 + 1;
        LODWORD(v53) = *v11;
        if ((v53 & 0x80) == 0) {
          goto LABEL_86;
        }
        int v55 = *v54;
        uint64_t v53 = v53 + (v55 << 7) - 128;
        if (v55 < 0)
        {
          uint64_t result = (char *)sub_1B4BF37B4((uint64_t)v11, v53);
          *(void *)v188 = result;
          *(_DWORD *)(a1 + 24sub_1B4BC92E4(&a9, 0) = v162;
          if (!result) {
            return result;
          }
        }
        else
        {
          long long v54 = v11 + 2;
LABEL_86:
          *(void *)v188 = v54;
          *(_DWORD *)(a1 + 24sub_1B4BC92E4(&a9, 0) = v53;
        }
        goto LABEL_273;
      case 0xEu:
        if (v12 != 112) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 40) |= 0x4000000u;
        unint64_t v57 = v11 + 1;
        LODWORD(v56) = *v11;
        if ((v56 & 0x80) == 0) {
          goto LABEL_91;
        }
        int v58 = *v57;
        uint64_t v56 = v56 + (v58 << 7) - 128;
        if (v58 < 0)
        {
          uint64_t result = (char *)sub_1B4BF37B4((uint64_t)v11, v56);
          *(void *)v188 = result;
          *(_DWORD *)(a1 + 284) = v163;
          if (!result) {
            return result;
          }
        }
        else
        {
          unint64_t v57 = v11 + 2;
LABEL_91:
          *(void *)v188 = v57;
          *(_DWORD *)(a1 + 284) = v56;
        }
        goto LABEL_273;
      case 0xFu:
        if (v12 != 125) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 40) |= 0x8000000u;
        int v59 = *(_DWORD *)v11;
        uint64_t v45 = v11 + 4;
        *(_DWORD *)(a1 + 288) = v59;
        goto LABEL_255;
      case 0x10u:
        if (v12 != 128) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 40) |= 0x10000000u;
        uint64_t v61 = v11 + 1;
        LODWORD(v6sub_1B4BC92E4(&a9, 0) = *v11;
        if ((v60 & 0x80) == 0) {
          goto LABEL_98;
        }
        int v62 = *v61;
        uint64_t v60 = v60 + (v62 << 7) - 128;
        if (v62 < 0)
        {
          uint64_t result = (char *)sub_1B4BF37B4((uint64_t)v11, v60);
          *(void *)v188 = result;
          *(_DWORD *)(a1 + 292) = v164;
          if (!result) {
            return result;
          }
        }
        else
        {
          uint64_t v61 = v11 + 2;
LABEL_98:
          *(void *)v188 = v61;
          *(_DWORD *)(a1 + 292) = v60;
        }
        goto LABEL_273;
      case 0x11u:
        if (v12 != 136) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 40) |= 0x20000000u;
        float v64 = v11 + 1;
        LODWORD(v63) = *v11;
        if ((v63 & 0x80) == 0) {
          goto LABEL_103;
        }
        int v65 = *v64;
        uint64_t v63 = v63 + (v65 << 7) - 128;
        if (v65 < 0)
        {
          uint64_t result = (char *)sub_1B4BF37B4((uint64_t)v11, v63);
          *(void *)v188 = result;
          *(_DWORD *)(a1 + 296) = v165;
          if (!result) {
            return result;
          }
        }
        else
        {
          float v64 = v11 + 2;
LABEL_103:
          *(void *)v188 = v64;
          *(_DWORD *)(a1 + 296) = v63;
        }
        goto LABEL_273;
      case 0x12u:
        if (v12 != 144) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 40) |= 0x40000000u;
        long long v67 = v11 + 1;
        LODWORD(v66) = *v11;
        if ((v66 & 0x80) == 0) {
          goto LABEL_108;
        }
        int v68 = *v67;
        uint64_t v66 = v66 + (v68 << 7) - 128;
        if (v68 < 0)
        {
          uint64_t result = (char *)sub_1B4BF37B4((uint64_t)v11, v66);
          *(void *)v188 = result;
          *(_DWORD *)(a1 + 30sub_1B4BC92E4(&a9, 0) = v166;
          if (!result) {
            return result;
          }
        }
        else
        {
          long long v67 = v11 + 2;
LABEL_108:
          *(void *)v188 = v67;
          *(_DWORD *)(a1 + 30sub_1B4BC92E4(&a9, 0) = v66;
        }
        goto LABEL_273;
      case 0x13u:
        if (v12 != 152) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 44) |= 1u;
        float v69 = v11 + 1;
        uint64_t v70 = *v11;
        if ((*v11 & 0x80000000) == 0) {
          goto LABEL_113;
        }
        int v71 = *v69;
        uint64_t v70 = v70 + (v71 << 7) - 128;
        if (v71 < 0)
        {
          uint64_t result = (char *)sub_1B4BF37B4((uint64_t)v11, v70);
          *(void *)v188 = result;
          *(unsigned char *)(a1 + 308) = v167 != 0;
          if (!result) {
            return result;
          }
        }
        else
        {
          float v69 = v11 + 2;
LABEL_113:
          *(void *)v188 = v69;
          *(unsigned char *)(a1 + 308) = v70 != 0;
        }
        goto LABEL_273;
      case 0x14u:
        if (v12 != 160) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 40) |= 0x80000000;
        uint64_t v73 = v11 + 1;
        LODWORD(v72) = *v11;
        if ((v72 & 0x80) == 0) {
          goto LABEL_118;
        }
        int v74 = *v73;
        uint64_t v72 = v72 + (v74 << 7) - 128;
        if (v74 < 0)
        {
          uint64_t result = (char *)sub_1B4BF37B4((uint64_t)v11, v72);
          *(void *)v188 = result;
          *(_DWORD *)(a1 + 304) = v168;
          if (!result) {
            return result;
          }
        }
        else
        {
          uint64_t v73 = v11 + 2;
LABEL_118:
          *(void *)v188 = v73;
          *(_DWORD *)(a1 + 304) = v72;
        }
        goto LABEL_273;
      case 0x15u:
        if (v12 != 168) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 44) |= 2u;
        float v75 = v11 + 1;
        uint64_t v76 = *v11;
        if ((*v11 & 0x80000000) == 0) {
          goto LABEL_123;
        }
        int v77 = *v75;
        uint64_t v76 = v76 + (v77 << 7) - 128;
        if (v77 < 0)
        {
          uint64_t result = (char *)sub_1B4BF37B4((uint64_t)v11, v76);
          *(void *)v188 = result;
          *(unsigned char *)(a1 + 309) = v169 != 0;
          if (!result) {
            return result;
          }
        }
        else
        {
          float v75 = v11 + 2;
LABEL_123:
          *(void *)v188 = v75;
          *(unsigned char *)(a1 + 309) = v76 != 0;
        }
        goto LABEL_273;
      case 0x16u:
        if (v12 != 176) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 44) |= 8u;
        uint64_t v78 = v11 + 1;
        uint64_t v79 = *v11;
        if ((*v11 & 0x80000000) == 0) {
          goto LABEL_128;
        }
        int v80 = *v78;
        uint64_t v79 = v79 + (v80 << 7) - 128;
        if (v80 < 0)
        {
          uint64_t result = (char *)sub_1B4BF37B4((uint64_t)v11, v79);
          *(void *)v188 = result;
          *(unsigned char *)(a1 + 311) = v170 != 0;
          if (!result) {
            return result;
          }
        }
        else
        {
          uint64_t v78 = v11 + 2;
LABEL_128:
          *(void *)v188 = v78;
          *(unsigned char *)(a1 + 311) = v79 != 0;
        }
        goto LABEL_273;
      case 0x17u:
        if (v12 != 184) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 44) |= 4u;
        uint64_t v81 = v11 + 1;
        uint64_t v82 = *v11;
        if ((*v11 & 0x80000000) == 0) {
          goto LABEL_133;
        }
        int v83 = *v81;
        uint64_t v82 = v82 + (v83 << 7) - 128;
        if (v83 < 0)
        {
          uint64_t result = (char *)sub_1B4BF37B4((uint64_t)v11, v82);
          *(void *)v188 = result;
          *(unsigned char *)(a1 + 31sub_1B4BC92E4(&a9, 0) = v171 != 0;
          if (!result) {
            return result;
          }
        }
        else
        {
          uint64_t v81 = v11 + 2;
LABEL_133:
          *(void *)v188 = v81;
          *(unsigned char *)(a1 + 31sub_1B4BC92E4(&a9, 0) = v82 != 0;
        }
        goto LABEL_273;
      case 0x18u:
        if (v12 != 192) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 40) |= 0x4000u;
        unint64_t v84 = v11 + 1;
        uint64_t v85 = *v11;
        if ((*v11 & 0x80000000) == 0) {
          goto LABEL_138;
        }
        int v86 = *v84;
        uint64_t v85 = v85 + (v86 << 7) - 128;
        if (v86 < 0)
        {
          uint64_t result = (char *)sub_1B4BF37B4((uint64_t)v11, v85);
          *(void *)v188 = result;
          *(unsigned char *)(a1 + 245) = v172 != 0;
          if (!result) {
            return result;
          }
        }
        else
        {
          unint64_t v84 = v11 + 2;
LABEL_138:
          *(void *)v188 = v84;
          *(unsigned char *)(a1 + 245) = v85 != 0;
        }
        goto LABEL_273;
      case 0x19u:
        if (v12 != 200) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 40) |= 0x10000u;
        uint64_t v87 = v11 + 1;
        uint64_t v88 = *v11;
        if ((*v11 & 0x80000000) == 0) {
          goto LABEL_143;
        }
        int v89 = *v87;
        uint64_t v88 = v88 + (v89 << 7) - 128;
        if (v89 < 0)
        {
          uint64_t result = (char *)sub_1B4BF37B4((uint64_t)v11, v88);
          *(void *)v188 = result;
          *(unsigned char *)(a1 + 247) = v173 != 0;
          if (!result) {
            return result;
          }
        }
        else
        {
          uint64_t v87 = v11 + 2;
LABEL_143:
          *(void *)v188 = v87;
          *(unsigned char *)(a1 + 247) = v88 != 0;
        }
        goto LABEL_273;
      case 0x1Au:
        if (v12 != 208) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 40) |= 0x8000u;
        long long v90 = v11 + 1;
        uint64_t v91 = *v11;
        if ((*v11 & 0x80000000) == 0) {
          goto LABEL_148;
        }
        int v92 = *v90;
        uint64_t v91 = v91 + (v92 << 7) - 128;
        if (v92 < 0)
        {
          uint64_t result = (char *)sub_1B4BF37B4((uint64_t)v11, v91);
          *(void *)v188 = result;
          *(unsigned char *)(a1 + 246) = v174 != 0;
          if (!result) {
            return result;
          }
        }
        else
        {
          long long v90 = v11 + 2;
LABEL_148:
          *(void *)v188 = v90;
          *(unsigned char *)(a1 + 246) = v91 != 0;
        }
        goto LABEL_273;
      case 0x1Eu:
        if (v12 != 242) {
          goto LABEL_275;
        }
        uint64_t result = v11 - 2;
        while (1)
        {
          v93 = result + 2;
          *(void *)v188 = result + 2;
          uint64_t v94 = *(int **)(a1 + 120);
          if (!v94) {
            break;
          }
          uint64_t v95 = *(int *)(a1 + 112);
          int v96 = *v94;
          if ((int)v95 >= *v94)
          {
            if (v96 == *(_DWORD *)(a1 + 116))
            {
LABEL_156:
              sub_1B4BF8BEC(a1 + 104, v96 + 1);
              uint64_t v94 = *(int **)(a1 + 120);
              int v96 = *v94;
            }
            *uint64_t v94 = v96 + 1;
            uint64_t v98 = *v8;
            if (!*v8) {
              operator new();
            }
            if (*(unsigned char *)(v98 + 24)) {
              (*(void (**)(void, void *, uint64_t))(**(void **)(*(void *)(v98 + 32) + 32) + 40))(*(void *)(*(void *)(v98 + 32) + 32), &unk_1F0D53AB8, 24);
            }
            float v97 = (std::string *)sub_1B4BE4804((void *)v98, 0x18uLL, (uint64_t)sub_1B4BE057C);
            v97->__r_.__value_.__r.__words[0] = 0;
            v97->__r_.__value_.__l.__size_ = 0;
            v97->__r_.__value_.__r.__words[2] = 0;
            uint64_t v99 = *(void *)(a1 + 120);
            uint64_t v100 = *(int *)(a1 + 112);
            *(_DWORD *)(a1 + 112) = v100 + 1;
            *(void *)(v99 + 8 * v100 + 8) = v97;
            v93 = *(char **)v188;
            goto LABEL_162;
          }
          *(_DWORD *)(a1 + 112) = v95 + 1;
          float v97 = *(std::string **)&v94[2 * v95 + 2];
LABEL_162:
          uint64_t result = (char *)sub_1B4BF38B0(v97, v93, (uint64_t)a3);
          *(void *)v188 = result;
          if (!result) {
            return result;
          }
          if (*(void *)a3 <= (unint64_t)result || *(_WORD *)result != 498) {
            goto LABEL_273;
          }
        }
        int v96 = *(_DWORD *)(a1 + 116);
        goto LABEL_156;
      case 0x1Fu:
        if (v12 != 250) {
          goto LABEL_275;
        }
        uint64_t result = v11 - 2;
        break;
      case 0x20u:
        if ((_BYTE)v12) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 44) |= 0x10u;
        v109 = v11 + 1;
        uint64_t v110 = *v11;
        if ((*v11 & 0x80000000) == 0) {
          goto LABEL_187;
        }
        int v111 = *v109;
        uint64_t v110 = v110 + (v111 << 7) - 128;
        if (v111 < 0)
        {
          uint64_t result = (char *)sub_1B4BF37B4((uint64_t)v11, v110);
          *(void *)v188 = result;
          *(unsigned char *)(a1 + 312) = v175 != 0;
          if (!result) {
            return result;
          }
        }
        else
        {
          v109 = v11 + 2;
LABEL_187:
          *(void *)v188 = v109;
          *(unsigned char *)(a1 + 312) = v110 != 0;
        }
        goto LABEL_273;
      case 0x21u:
        if (v12 != 8) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 44) |= 0x20u;
        long long v112 = v11 + 1;
        uint64_t v113 = *v11;
        if ((*v11 & 0x80000000) == 0) {
          goto LABEL_192;
        }
        int v114 = *v112;
        uint64_t v113 = v113 + (v114 << 7) - 128;
        if (v114 < 0)
        {
          uint64_t result = (char *)sub_1B4BF37B4((uint64_t)v11, v113);
          *(void *)v188 = result;
          *(unsigned char *)(a1 + 313) = v176 != 0;
          if (!result) {
            return result;
          }
        }
        else
        {
          long long v112 = v11 + 2;
LABEL_192:
          *(void *)v188 = v112;
          *(unsigned char *)(a1 + 313) = v113 != 0;
        }
        goto LABEL_273;
      case 0x22u:
        if (v12 != 16) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 40) |= 0x40000u;
        uint64_t v115 = v11 + 1;
        uint64_t v116 = *v11;
        if ((*v11 & 0x80000000) == 0) {
          goto LABEL_197;
        }
        int v117 = *v115;
        uint64_t v116 = v116 + (v117 << 7) - 128;
        if (v117 < 0)
        {
          uint64_t result = (char *)sub_1B4BF37B4((uint64_t)v11, v116);
          *(void *)v188 = result;
          *(unsigned char *)(a1 + 249) = v177 != 0;
          if (!result) {
            return result;
          }
        }
        else
        {
          uint64_t v115 = v11 + 2;
LABEL_197:
          *(void *)v188 = v115;
          *(unsigned char *)(a1 + 249) = v116 != 0;
        }
        goto LABEL_273;
      case 0x23u:
        if (v12 != 24) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 40) |= 0x20000u;
        v118 = v11 + 1;
        uint64_t v119 = *v11;
        if ((*v11 & 0x80000000) == 0) {
          goto LABEL_202;
        }
        int v120 = *v118;
        uint64_t v119 = v119 + (v120 << 7) - 128;
        if (v120 < 0)
        {
          uint64_t result = (char *)sub_1B4BF37B4((uint64_t)v11, v119);
          *(void *)v188 = result;
          *(unsigned char *)(a1 + 248) = v178 != 0;
          if (!result) {
            return result;
          }
        }
        else
        {
          v118 = v11 + 2;
LABEL_202:
          *(void *)v188 = v118;
          *(unsigned char *)(a1 + 248) = v119 != 0;
        }
        goto LABEL_273;
      case 0x24u:
        if (v12 != 34) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 40) |= 4u;
        uint64_t v121 = *(void *)(a1 + 8);
        uint64_t v24 = (void *)(v121 & 0xFFFFFFFFFFFFFFFELL);
        if (v121) {
          uint64_t v24 = (void *)*v24;
        }
        uint64_t v25 = (uint64_t *)(a1 + 168);
        goto LABEL_265;
      case 0x28u:
        if (v12 != 64) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 40) |= 0x100000u;
        long long v123 = v11 + 1;
        LODWORD(v122) = *v11;
        if ((v122 & 0x80) == 0) {
          goto LABEL_211;
        }
        int v124 = *v123;
        uint64_t v122 = v122 + (v124 << 7) - 128;
        if (v124 < 0)
        {
          uint64_t result = (char *)sub_1B4BF37B4((uint64_t)v11, v122);
          *(void *)v188 = result;
          *(_DWORD *)(a1 + 252) = v179;
          if (!result) {
            return result;
          }
        }
        else
        {
          long long v123 = v11 + 2;
LABEL_211:
          *(void *)v188 = v123;
          *(_DWORD *)(a1 + 252) = v122;
        }
        goto LABEL_273;
      case 0x29u:
        if (v12 != 72) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 44) |= 0x40u;
        long long v126 = v11 + 1;
        LODWORD(v125) = *v11;
        if ((v125 & 0x80) == 0) {
          goto LABEL_216;
        }
        int v127 = *v126;
        uint64_t v125 = v125 + (v127 << 7) - 128;
        if (v127 < 0)
        {
          uint64_t result = (char *)sub_1B4BF37B4((uint64_t)v11, v125);
          *(void *)v188 = result;
          *(_DWORD *)(a1 + 316) = v180;
          if (!result) {
            return result;
          }
        }
        else
        {
          long long v126 = v11 + 2;
LABEL_216:
          *(void *)v188 = v126;
          *(_DWORD *)(a1 + 316) = v125;
        }
        goto LABEL_273;
      case 0x2Au:
        if (v12 != 80) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 44) |= 0x80u;
        v129 = v11 + 1;
        LODWORD(v128) = *v11;
        if ((v128 & 0x80) == 0) {
          goto LABEL_221;
        }
        int v130 = *v129;
        uint64_t v128 = v128 + (v130 << 7) - 128;
        if (v130 < 0)
        {
          uint64_t result = (char *)sub_1B4BF37B4((uint64_t)v11, v128);
          *(void *)v188 = result;
          *(_DWORD *)(a1 + 32sub_1B4BC92E4(&a9, 0) = v181;
          if (!result) {
            return result;
          }
        }
        else
        {
          v129 = v11 + 2;
LABEL_221:
          *(void *)v188 = v129;
          *(_DWORD *)(a1 + 32sub_1B4BC92E4(&a9, 0) = v128;
        }
        goto LABEL_273;
      case 0x2Bu:
        if (v12 != 88) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 44) |= 0x100u;
        uint64_t v132 = v11 + 1;
        LODWORD(v131) = *v11;
        if ((v131 & 0x80) == 0) {
          goto LABEL_226;
        }
        int v133 = *v132;
        uint64_t v131 = v131 + (v133 << 7) - 128;
        if (v133 < 0)
        {
          uint64_t result = (char *)sub_1B4BF37B4((uint64_t)v11, v131);
          *(void *)v188 = result;
          *(_DWORD *)(a1 + 324) = v182;
          if (!result) {
            return result;
          }
        }
        else
        {
          uint64_t v132 = v11 + 2;
LABEL_226:
          *(void *)v188 = v132;
          *(_DWORD *)(a1 + 324) = v131;
        }
        goto LABEL_273;
      case 0x2Cu:
        if (v12 != 98) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 40) |= 8u;
        uint64_t v153 = *(void *)(a1 + 8);
        uint64_t v135 = (void *)(v153 & 0xFFFFFFFFFFFFFFFELL);
        if (v153) {
          uint64_t v135 = (void *)*v135;
        }
        unint64_t v136 = &off_1E9D40358;
        v137 = (uint64_t *)(a1 + 176);
        goto LABEL_270;
      case 0x2Du:
        if (v12 != 106) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 40) |= 0x10u;
        uint64_t v134 = *(void *)(a1 + 8);
        uint64_t v135 = (void *)(v134 & 0xFFFFFFFFFFFFFFFELL);
        if (v134) {
          uint64_t v135 = (void *)*v135;
        }
        unint64_t v136 = &off_1E9D40318;
        v137 = (uint64_t *)(a1 + 184);
        goto LABEL_270;
      case 0x2Eu:
        if (v12 != 114) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 40) |= 0x20u;
        uint64_t v138 = *(void *)(a1 + 8);
        uint64_t v135 = (void *)(v138 & 0xFFFFFFFFFFFFFFFELL);
        if (v138) {
          uint64_t v135 = (void *)*v135;
        }
        unint64_t v136 = &off_1E9D40250;
        v137 = (uint64_t *)(a1 + 192);
        goto LABEL_270;
      case 0x2Fu:
        if (v12 != 122) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 40) |= 0x40u;
        uint64_t v139 = *(void *)(a1 + 8);
        uint64_t v135 = (void *)(v139 & 0xFFFFFFFFFFFFFFFELL);
        if (v139) {
          uint64_t v135 = (void *)*v135;
        }
        unint64_t v136 = &off_1E9D40270;
        v137 = (uint64_t *)(a1 + 200);
        goto LABEL_270;
      case 0x30u:
        if (v12 != 130) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 40) |= 0x80u;
        uint64_t v140 = *(void *)(a1 + 8);
        uint64_t v135 = (void *)(v140 & 0xFFFFFFFFFFFFFFFELL);
        if (v140) {
          uint64_t v135 = (void *)*v135;
        }
        unint64_t v136 = &off_1E9D40338;
        v137 = (uint64_t *)(a1 + 208);
LABEL_270:
        v152 = (std::string *)sub_1B4BE512C(v137, v136, (uint64_t)v135);
        goto LABEL_271;
      case 0x31u:
        if (v12 != 136) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 40) |= 0x80000u;
        long long v141 = v11 + 1;
        uint64_t v142 = *v11;
        if ((*v11 & 0x80000000) == 0) {
          goto LABEL_247;
        }
        int v143 = *v141;
        uint64_t v142 = v142 + (v143 << 7) - 128;
        if (v143 < 0)
        {
          uint64_t result = (char *)sub_1B4BF37B4((uint64_t)v11, v142);
          *(void *)v188 = result;
          *(unsigned char *)(a1 + 25sub_1B4BC92E4(&a9, 0) = v183 != 0;
          if (!result) {
            return result;
          }
        }
        else
        {
          long long v141 = v11 + 2;
LABEL_247:
          *(void *)v188 = v141;
          *(unsigned char *)(a1 + 25sub_1B4BC92E4(&a9, 0) = v142 != 0;
        }
        goto LABEL_273;
      case 0x32u:
        if (v12 != 144) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 40) |= 0x2000u;
        long long v144 = v11 + 1;
        uint64_t v145 = *v11;
        if ((*v11 & 0x80000000) == 0) {
          goto LABEL_252;
        }
        int v146 = *v144;
        uint64_t v145 = v145 + (v146 << 7) - 128;
        if (v146 < 0)
        {
          uint64_t result = (char *)sub_1B4BF37B4((uint64_t)v11, v145);
          *(void *)v188 = result;
          *(unsigned char *)(a1 + 244) = v184 != 0;
          if (!result) {
            return result;
          }
        }
        else
        {
          long long v144 = v11 + 2;
LABEL_252:
          *(void *)v188 = v144;
          *(unsigned char *)(a1 + 244) = v145 != 0;
        }
        goto LABEL_273;
      case 0x33u:
        if (v12 != 157) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 40) |= 0x200000u;
        int v147 = *(_DWORD *)v11;
        uint64_t v45 = v11 + 4;
        *(_DWORD *)(a1 + 256) = v147;
LABEL_255:
        *(void *)v188 = v45;
        goto LABEL_273;
      case 0x34u:
        if (v12 != 160) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 40) |= 0x400000u;
        int v148 = v11 + 1;
        uint64_t v149 = *v11;
        if ((*v11 & 0x80000000) == 0) {
          goto LABEL_260;
        }
        int v150 = *v148;
        uint64_t v149 = v149 + (v150 << 7) - 128;
        if (v150 < 0)
        {
          uint64_t result = (char *)sub_1B4BF37B4((uint64_t)v11, v149);
          *(void *)v188 = result;
          *(void *)(a1 + 264) = v185;
          if (!result) {
            return result;
          }
        }
        else
        {
          int v148 = v11 + 2;
LABEL_260:
          *(void *)v188 = v148;
          *(void *)(a1 + 264) = v149;
        }
        goto LABEL_273;
      case 0x35u:
        if (v12 != 170) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 40) |= 0x100u;
        uint64_t v151 = *(void *)(a1 + 8);
        uint64_t v24 = (void *)(v151 & 0xFFFFFFFFFFFFFFFELL);
        if (v151) {
          uint64_t v24 = (void *)*v24;
        }
        uint64_t v25 = (uint64_t *)(a1 + 216);
LABEL_265:
        v152 = (std::string *)sub_1B4BE4FF0(v25, (uint64_t)v24);
LABEL_271:
        uint64_t result = (char *)sub_1B4BF38B0(v152, *(char **)v188, (uint64_t)a3);
        goto LABEL_272;
      default:
LABEL_275:
        if (v12) {
          BOOL v155 = (v12 & 7) == 4;
        }
        else {
          BOOL v155 = 1;
        }
        if (v155)
        {
          a3[10].i32[0] = v12 - 1;
          return v11;
        }
        if (v12 < 0x640)
        {
          if (*v187)
          {
            float v156 = (std::string *)((*v187 & 0xFFFFFFFFFFFFFFFELL) + 8);
          }
          else
          {
            float v156 = (std::string *)sub_1B4BD6F84(v187);
            uint64_t v11 = *(char **)v188;
          }
          uint64_t result = (char *)sub_1B4BF3D6C(v12, v156, v11, a3);
        }
        else
        {
          uint64_t result = (char *)sub_1B4BEBF0C((uint64_t *)(a1 + 16), v12, (unsigned __int8 *)v11, (uint64_t)&unk_1E9D40760, v187, a3);
        }
LABEL_272:
        *(void *)v188 = result;
        if (!result) {
          return result;
        }
LABEL_273:
        int v154 = sub_1B4BD6E44((uint64_t)a3, (char **)v188, a3[11].i32[1]);
        uint64_t result = *(char **)v188;
        if (v154) {
          return result;
        }
        continue;
    }
    break;
  }
  while (1)
  {
    double v101 = result + 2;
    *(void *)v188 = result + 2;
    float v102 = *(int **)(a1 + 144);
    if (!v102) {
      break;
    }
    uint64_t v103 = *(int *)(a1 + 136);
    int v104 = *v102;
    if ((int)v103 >= *v102)
    {
      if (v104 == *(_DWORD *)(a1 + 140))
      {
LABEL_173:
        sub_1B4BF8BEC(a1 + 128, v104 + 1);
        float v102 = *(int **)(a1 + 144);
        int v104 = *v102;
      }
      int *v102 = v104 + 1;
      uint64_t v106 = *v7;
      if (!*v7) {
        operator new();
      }
      if (*(unsigned char *)(v106 + 24)) {
        (*(void (**)(void, void *, uint64_t))(**(void **)(*(void *)(v106 + 32) + 32) + 40))(*(void *)(*(void *)(v106 + 32) + 32), &unk_1F0D53AB8, 24);
      }
      unint64_t v105 = (std::string *)sub_1B4BE4804((void *)v106, 0x18uLL, (uint64_t)sub_1B4BE057C);
      v105->__r_.__value_.__r.__words[0] = 0;
      v105->__r_.__value_.__l.__size_ = 0;
      v105->__r_.__value_.__r.__words[2] = 0;
      uint64_t v107 = *(void *)(a1 + 144);
      uint64_t v108 = *(int *)(a1 + 136);
      *(_DWORD *)(a1 + 136) = v108 + 1;
      *(void *)(v107 + 8 * v108 + 8) = v105;
      double v101 = *(char **)v188;
      goto LABEL_179;
    }
    *(_DWORD *)(a1 + 136) = v103 + 1;
    unint64_t v105 = *(std::string **)&v102[2 * v103 + 2];
LABEL_179:
    uint64_t result = (char *)sub_1B4BF38B0(v105, v101, (uint64_t)a3);
    *(void *)v188 = result;
    if (!result) {
      return result;
    }
    if (*(void *)a3 <= (unint64_t)result || *(_WORD *)result != 506) {
      goto LABEL_273;
    }
  }
  int v104 = *(_DWORD *)(a1 + 140);
  goto LABEL_173;
}

char *sub_1B4BD9880(uint64_t a1, char *a2, uint64_t *a3)
{
  int v6 = *(_DWORD *)(a1 + 64);
  if (v6 >= 1)
  {
    for (int i = 0; v6 != i; ++i)
    {
      uint64_t v8 = sub_1B4BE0734(a1 + 56, i);
      if (*(char *)(v8 + 23) < 0)
      {
        int64_t v9 = *(void *)(v8 + 8);
        if (v9 > 127) {
          goto LABEL_13;
        }
      }
      else
      {
        int64_t v9 = *(unsigned __int8 *)(v8 + 23);
      }
      if (*a3 - (uint64_t)a2 + 14 >= v9)
      {
        *a2 = 10;
        a2[1] = v9;
        if (*(char *)(v8 + 23) >= 0) {
          uint64_t v10 = (const void *)v8;
        }
        else {
          uint64_t v10 = *(const void **)v8;
        }
        memcpy(a2 + 2, v10, v9);
        a2 += v9 + 2;
        continue;
      }
LABEL_13:
      a2 = sub_1B4BE5C78(a3, 1, v8, a2);
    }
  }
  int v11 = *(_DWORD *)(a1 + 40);
  if (v11)
  {
    a2 = sub_1B4BD4F64((unint64_t *)a3, 2, (const void **)(*(void *)(a1 + 152) & 0xFFFFFFFFFFFFFFFELL), a2);
    if ((v11 & 0x800000) == 0)
    {
LABEL_16:
      if ((v11 & 0x1000000) == 0) {
        goto LABEL_38;
      }
      goto LABEL_17;
    }
  }
  else if ((v11 & 0x800000) == 0)
  {
    goto LABEL_16;
  }
  if (*a3 <= (unint64_t)a2) {
    a2 = sub_1B4BE5708((uint64_t)a3, a2);
  }
  unint64_t v13 = *(int *)(a1 + 272);
  *a2 = 24;
  if (v13 > 0x7F)
  {
    a2[1] = v13 | 0x80;
    unint64_t v15 = v13 >> 7;
    if (v13 >> 14)
    {
      a2 += 3;
      do
      {
        *(a2 - 1) = v15 | 0x80;
        unint64_t v18 = v15 >> 7;
        ++a2;
        unint64_t v19 = v15 >> 14;
        v15 >>= 7;
      }
      while (v19);
      *(a2 - 1) = v18;
      if ((v11 & 0x1000000) == 0) {
        goto LABEL_38;
      }
    }
    else
    {
      a2[2] = v15;
      a2 += 3;
      if ((v11 & 0x1000000) == 0) {
        goto LABEL_38;
      }
    }
  }
  else
  {
    a2[1] = v13;
    a2 += 2;
    if ((v11 & 0x1000000) == 0) {
      goto LABEL_38;
    }
  }
LABEL_17:
  if (*a3 <= (unint64_t)a2) {
    a2 = sub_1B4BE5708((uint64_t)a3, a2);
  }
  unint64_t v12 = *(int *)(a1 + 276);
  *a2 = 32;
  if (v12 > 0x7F)
  {
    a2[1] = v12 | 0x80;
    unint64_t v14 = v12 >> 7;
    if (v12 >> 14)
    {
      a2 += 3;
      do
      {
        *(a2 - 1) = v14 | 0x80;
        unint64_t v16 = v14 >> 7;
        ++a2;
        unint64_t v17 = v14 >> 14;
        v14 >>= 7;
      }
      while (v17);
      *(a2 - 1) = v16;
    }
    else
    {
      a2[2] = v14;
      a2 += 3;
    }
  }
  else
  {
    a2[1] = v12;
    a2 += 2;
  }
LABEL_38:
  int v20 = *(_DWORD *)(a1 + 88);
  if (v20 >= 1)
  {
    for (int j = 0; v20 != j; ++j)
    {
      uint64_t v22 = sub_1B4BE0734(a1 + 80, j);
      if (*(char *)(v22 + 23) < 0)
      {
        int64_t v23 = *(void *)(v22 + 8);
        if (v23 > 127) {
          goto LABEL_50;
        }
      }
      else
      {
        int64_t v23 = *(unsigned __int8 *)(v22 + 23);
      }
      if (*a3 - (uint64_t)a2 + 14 >= v23)
      {
        *a2 = 42;
        a2[1] = v23;
        if (*(char *)(v22 + 23) >= 0) {
          uint64_t v24 = (const void *)v22;
        }
        else {
          uint64_t v24 = *(const void **)v22;
        }
        memcpy(a2 + 2, v24, v23);
        a2 += v23 + 2;
        continue;
      }
LABEL_50:
      a2 = sub_1B4BE5C78(a3, 5, v22, a2);
    }
  }
  if ((v11 & 0x200) != 0)
  {
    if (*a3 <= (unint64_t)a2) {
      a2 = sub_1B4BE5708((uint64_t)a3, a2);
    }
    unint64_t v26 = *(int *)(a1 + 224);
    *a2 = 48;
    if (v26 > 0x7F)
    {
      a2[1] = v26 | 0x80;
      unint64_t v28 = v26 >> 7;
      if (v26 >> 14)
      {
        a2 += 3;
        do
        {
          *(a2 - 1) = v28 | 0x80;
          unint64_t v31 = v28 >> 7;
          ++a2;
          unint64_t v32 = v28 >> 14;
          v28 >>= 7;
        }
        while (v32);
        *(a2 - 1) = v31;
        if ((v11 & 2) != 0) {
          goto LABEL_82;
        }
      }
      else
      {
        a2[2] = v28;
        a2 += 3;
        if ((v11 & 2) != 0) {
          goto LABEL_82;
        }
      }
    }
    else
    {
      a2[1] = v26;
      a2 += 2;
      if ((v11 & 2) != 0) {
        goto LABEL_82;
      }
    }
LABEL_53:
    if ((v11 & 0x2000000) == 0) {
      goto LABEL_54;
    }
    goto LABEL_83;
  }
  if ((v11 & 2) == 0) {
    goto LABEL_53;
  }
LABEL_82:
  a2 = sub_1B4BD4F64((unint64_t *)a3, 7, (const void **)(*(void *)(a1 + 160) & 0xFFFFFFFFFFFFFFFELL), a2);
  if ((v11 & 0x2000000) == 0)
  {
LABEL_54:
    if ((v11 & 0x800) == 0) {
      goto LABEL_55;
    }
    goto LABEL_86;
  }
LABEL_83:
  if (*a3 <= (unint64_t)a2) {
    a2 = sub_1B4BE5708((uint64_t)a3, a2);
  }
  int v33 = *(_DWORD *)(a1 + 280);
  *a2 = 85;
  *(_DWORD *)(a2 + 1) = v33;
  a2 += 5;
  if ((v11 & 0x800) == 0)
  {
LABEL_55:
    if ((v11 & 0x400) == 0) {
      goto LABEL_56;
    }
LABEL_97:
    if (*a3 <= (unint64_t)a2) {
      a2 = sub_1B4BE5708((uint64_t)a3, a2);
    }
    unint64_t v38 = *(int *)(a1 + 228);
    *a2 = 96;
    if (v38 > 0x7F)
    {
      a2[1] = v38 | 0x80;
      unint64_t v39 = v38 >> 7;
      if (v38 >> 14)
      {
        a2 += 3;
        do
        {
          *(a2 - 1) = v39 | 0x80;
          unint64_t v40 = v39 >> 7;
          ++a2;
          unint64_t v41 = v39 >> 14;
          v39 >>= 7;
        }
        while (v41);
        *(a2 - 1) = v40;
        if ((v11 & 0x1000) != 0) {
          goto LABEL_108;
        }
      }
      else
      {
        a2[2] = v39;
        a2 += 3;
        if ((v11 & 0x1000) != 0) {
          goto LABEL_108;
        }
      }
    }
    else
    {
      a2[1] = v38;
      a2 += 2;
      if ((v11 & 0x1000) != 0) {
        goto LABEL_108;
      }
    }
LABEL_57:
    if ((v11 & 0x4000000) == 0) {
      goto LABEL_58;
    }
LABEL_119:
    if (*a3 <= (unint64_t)a2) {
      a2 = sub_1B4BE5708((uint64_t)a3, a2);
    }
    unint64_t v46 = *(int *)(a1 + 284);
    *a2 = 112;
    if (v46 > 0x7F)
    {
      a2[1] = v46 | 0x80;
      unint64_t v47 = v46 >> 7;
      if (v46 >> 14)
      {
        a2 += 3;
        do
        {
          *(a2 - 1) = v47 | 0x80;
          unint64_t v48 = v47 >> 7;
          ++a2;
          unint64_t v49 = v47 >> 14;
          v47 >>= 7;
        }
        while (v49);
        *(a2 - 1) = v48;
        if ((v11 & 0x8000000) != 0) {
          goto LABEL_130;
        }
      }
      else
      {
        a2[2] = v47;
        a2 += 3;
        if ((v11 & 0x8000000) != 0) {
          goto LABEL_130;
        }
      }
    }
    else
    {
      a2[1] = v46;
      a2 += 2;
      if ((v11 & 0x8000000) != 0) {
        goto LABEL_130;
      }
    }
LABEL_59:
    if ((v11 & 0x10000000) == 0) {
      goto LABEL_60;
    }
LABEL_133:
    if (*a3 <= (unint64_t)a2) {
      a2 = sub_1B4BE5708((uint64_t)a3, a2);
    }
    unint64_t v51 = *(int *)(a1 + 292);
    *(_WORD *)a2 = 384;
    if (v51 > 0x7F)
    {
      a2[2] = v51 | 0x80;
      unint64_t v52 = v51 >> 7;
      if (v51 >> 14)
      {
        a2 += 4;
        do
        {
          *(a2 - 1) = v52 | 0x80;
          unint64_t v53 = v52 >> 7;
          ++a2;
          unint64_t v54 = v52 >> 14;
          v52 >>= 7;
        }
        while (v54);
        *(a2 - 1) = v53;
        if ((v11 & 0x20000000) != 0) {
          goto LABEL_144;
        }
      }
      else
      {
        a2[3] = v52;
        a2 += 4;
        if ((v11 & 0x20000000) != 0) {
          goto LABEL_144;
        }
      }
    }
    else
    {
      a2[2] = v51;
      a2 += 3;
      if ((v11 & 0x20000000) != 0) {
        goto LABEL_144;
      }
    }
LABEL_61:
    if ((v11 & 0x40000000) == 0) {
      goto LABEL_155;
    }
    goto LABEL_62;
  }
LABEL_86:
  if (*a3 <= (unint64_t)a2) {
    a2 = sub_1B4BE5708((uint64_t)a3, a2);
  }
  unint64_t v34 = *(void *)(a1 + 232);
  *a2 = 88;
  if (v34 > 0x7F)
  {
    a2[1] = v34 | 0x80;
    unint64_t v35 = v34 >> 7;
    if (v34 >> 14)
    {
      a2 += 3;
      do
      {
        *(a2 - 1) = v35 | 0x80;
        unint64_t v36 = v35 >> 7;
        ++a2;
        unint64_t v37 = v35 >> 14;
        v35 >>= 7;
      }
      while (v37);
      *(a2 - 1) = v36;
      if ((v11 & 0x400) != 0) {
        goto LABEL_97;
      }
    }
    else
    {
      a2[2] = v35;
      a2 += 3;
      if ((v11 & 0x400) != 0) {
        goto LABEL_97;
      }
    }
  }
  else
  {
    a2[1] = v34;
    a2 += 2;
    if ((v11 & 0x400) != 0) {
      goto LABEL_97;
    }
  }
LABEL_56:
  if ((v11 & 0x1000) == 0) {
    goto LABEL_57;
  }
LABEL_108:
  if (*a3 <= (unint64_t)a2) {
    a2 = sub_1B4BE5708((uint64_t)a3, a2);
  }
  unint64_t v42 = *(int *)(a1 + 240);
  *a2 = 104;
  if (v42 > 0x7F)
  {
    a2[1] = v42 | 0x80;
    unint64_t v43 = v42 >> 7;
    if (v42 >> 14)
    {
      a2 += 3;
      do
      {
        *(a2 - 1) = v43 | 0x80;
        unint64_t v44 = v43 >> 7;
        ++a2;
        unint64_t v45 = v43 >> 14;
        v43 >>= 7;
      }
      while (v45);
      *(a2 - 1) = v44;
      if ((v11 & 0x4000000) != 0) {
        goto LABEL_119;
      }
    }
    else
    {
      a2[2] = v43;
      a2 += 3;
      if ((v11 & 0x4000000) != 0) {
        goto LABEL_119;
      }
    }
  }
  else
  {
    a2[1] = v42;
    a2 += 2;
    if ((v11 & 0x4000000) != 0) {
      goto LABEL_119;
    }
  }
LABEL_58:
  if ((v11 & 0x8000000) == 0) {
    goto LABEL_59;
  }
LABEL_130:
  if (*a3 <= (unint64_t)a2) {
    a2 = sub_1B4BE5708((uint64_t)a3, a2);
  }
  int v50 = *(_DWORD *)(a1 + 288);
  *a2 = 125;
  *(_DWORD *)(a2 + 1) = v50;
  a2 += 5;
  if ((v11 & 0x10000000) != 0) {
    goto LABEL_133;
  }
LABEL_60:
  if ((v11 & 0x20000000) == 0) {
    goto LABEL_61;
  }
LABEL_144:
  if (*a3 <= (unint64_t)a2) {
    a2 = sub_1B4BE5708((uint64_t)a3, a2);
  }
  unint64_t v55 = *(int *)(a1 + 296);
  *(_WORD *)a2 = 392;
  if (v55 > 0x7F)
  {
    a2[2] = v55 | 0x80;
    unint64_t v56 = v55 >> 7;
    if (v55 >> 14)
    {
      a2 += 4;
      do
      {
        *(a2 - 1) = v56 | 0x80;
        unint64_t v57 = v56 >> 7;
        ++a2;
        unint64_t v58 = v56 >> 14;
        v56 >>= 7;
      }
      while (v58);
      *(a2 - 1) = v57;
      if ((v11 & 0x40000000) == 0) {
        goto LABEL_155;
      }
    }
    else
    {
      a2[3] = v56;
      a2 += 4;
      if ((v11 & 0x40000000) == 0) {
        goto LABEL_155;
      }
    }
  }
  else
  {
    a2[2] = v55;
    a2 += 3;
    if ((v11 & 0x40000000) == 0) {
      goto LABEL_155;
    }
  }
LABEL_62:
  if (*a3 <= (unint64_t)a2) {
    a2 = sub_1B4BE5708((uint64_t)a3, a2);
  }
  unint64_t v25 = *(int *)(a1 + 300);
  *(_WORD *)a2 = 400;
  if (v25 > 0x7F)
  {
    a2[2] = v25 | 0x80;
    unint64_t v27 = v25 >> 7;
    if (v25 >> 14)
    {
      a2 += 4;
      do
      {
        *(a2 - 1) = v27 | 0x80;
        unint64_t v29 = v27 >> 7;
        ++a2;
        unint64_t v30 = v27 >> 14;
        v27 >>= 7;
      }
      while (v30);
      *(a2 - 1) = v29;
    }
    else
    {
      a2[3] = v27;
      a2 += 4;
    }
  }
  else
  {
    a2[2] = v25;
    a2 += 3;
  }
LABEL_155:
  if (*(unsigned char *)(a1 + 44))
  {
    if (*a3 <= (unint64_t)a2) {
      a2 = sub_1B4BE5708((uint64_t)a3, a2);
    }
    char v59 = *(unsigned char *)(a1 + 308);
    *(_WORD *)a2 = 408;
    a2[2] = v59;
    a2 += 3;
  }
  if ((*(_DWORD *)(a1 + 40) & 0x80000000) != 0)
  {
    if (*a3 <= (unint64_t)a2) {
      a2 = sub_1B4BE5708((uint64_t)a3, a2);
    }
    unint64_t v60 = *(int *)(a1 + 304);
    *(_WORD *)a2 = 416;
    if (v60 > 0x7F)
    {
      a2[2] = v60 | 0x80;
      unint64_t v61 = v60 >> 7;
      if (v60 >> 14)
      {
        a2 += 4;
        do
        {
          *(a2 - 1) = v61 | 0x80;
          unint64_t v62 = v61 >> 7;
          ++a2;
          unint64_t v63 = v61 >> 14;
          v61 >>= 7;
        }
        while (v63);
        *(a2 - 1) = v62;
      }
      else
      {
        a2[3] = v61;
        a2 += 4;
      }
    }
    else
    {
      a2[2] = v60;
      a2 += 3;
    }
  }
  int v64 = *(_DWORD *)(a1 + 44);
  if ((v64 & 2) != 0)
  {
    if (*a3 <= (unint64_t)a2) {
      a2 = sub_1B4BE5708((uint64_t)a3, a2);
    }
    char v65 = *(unsigned char *)(a1 + 309);
    *(_WORD *)a2 = 424;
    a2[2] = v65;
    a2 += 3;
    if ((v64 & 8) == 0)
    {
LABEL_171:
      if ((v64 & 4) == 0) {
        goto LABEL_182;
      }
      goto LABEL_179;
    }
  }
  else if ((v64 & 8) == 0)
  {
    goto LABEL_171;
  }
  if (*a3 <= (unint64_t)a2) {
    a2 = sub_1B4BE5708((uint64_t)a3, a2);
  }
  char v66 = *(unsigned char *)(a1 + 311);
  *(_WORD *)a2 = 432;
  a2[2] = v66;
  a2 += 3;
  if ((v64 & 4) != 0)
  {
LABEL_179:
    if (*a3 <= (unint64_t)a2) {
      a2 = sub_1B4BE5708((uint64_t)a3, a2);
    }
    char v67 = *(unsigned char *)(a1 + 310);
    *(_WORD *)a2 = 440;
    a2[2] = v67;
    a2 += 3;
  }
LABEL_182:
  int v68 = *(_DWORD *)(a1 + 40);
  if ((v68 & 0x4000) != 0)
  {
    if (*a3 <= (unint64_t)a2) {
      a2 = sub_1B4BE5708((uint64_t)a3, a2);
    }
    char v69 = *(unsigned char *)(a1 + 245);
    *(_WORD *)a2 = 448;
    a2[2] = v69;
    a2 += 3;
    if ((v68 & 0x10000) == 0)
    {
LABEL_184:
      if ((v68 & 0x8000) == 0) {
        goto LABEL_195;
      }
      goto LABEL_192;
    }
  }
  else if ((v68 & 0x10000) == 0)
  {
    goto LABEL_184;
  }
  if (*a3 <= (unint64_t)a2) {
    a2 = sub_1B4BE5708((uint64_t)a3, a2);
  }
  char v70 = *(unsigned char *)(a1 + 247);
  *(_WORD *)a2 = 456;
  a2[2] = v70;
  a2 += 3;
  if ((v68 & 0x8000) != 0)
  {
LABEL_192:
    if (*a3 <= (unint64_t)a2) {
      a2 = sub_1B4BE5708((uint64_t)a3, a2);
    }
    char v71 = *(unsigned char *)(a1 + 246);
    *(_WORD *)a2 = 464;
    a2[2] = v71;
    a2 += 3;
  }
LABEL_195:
  int v72 = *(_DWORD *)(a1 + 112);
  if (v72 >= 1)
  {
    for (int k = 0; v72 != k; ++k)
    {
      uint64_t v74 = sub_1B4BE0734(a1 + 104, k);
      if (*(char *)(v74 + 23) < 0)
      {
        int64_t v75 = *(void *)(v74 + 8);
        if (v75 > 127) {
          goto LABEL_207;
        }
      }
      else
      {
        int64_t v75 = *(unsigned __int8 *)(v74 + 23);
      }
      if (*a3 - (uint64_t)a2 + 13 >= v75)
      {
        *(_WORD *)a2 = 498;
        a2[2] = v75;
        if (*(char *)(v74 + 23) >= 0) {
          uint64_t v76 = (const void *)v74;
        }
        else {
          uint64_t v76 = *(const void **)v74;
        }
        memcpy(a2 + 3, v76, v75);
        a2 += v75 + 3;
        continue;
      }
LABEL_207:
      a2 = sub_1B4BE5C78(a3, 30, v74, a2);
    }
  }
  int v77 = *(_DWORD *)(a1 + 136);
  if (v77 >= 1)
  {
    for (int m = 0; v77 != m; ++m)
    {
      uint64_t v79 = sub_1B4BE0734(a1 + 128, m);
      if (*(char *)(v79 + 23) < 0)
      {
        int64_t v80 = *(void *)(v79 + 8);
        if (v80 > 127) {
          goto LABEL_220;
        }
      }
      else
      {
        int64_t v80 = *(unsigned __int8 *)(v79 + 23);
      }
      if (*a3 - (uint64_t)a2 + 13 >= v80)
      {
        *(_WORD *)a2 = 506;
        a2[2] = v80;
        if (*(char *)(v79 + 23) >= 0) {
          uint64_t v81 = (const void *)v79;
        }
        else {
          uint64_t v81 = *(const void **)v79;
        }
        memcpy(a2 + 3, v81, v80);
        a2 += v80 + 3;
        continue;
      }
LABEL_220:
      a2 = sub_1B4BE5C78(a3, 31, v79, a2);
    }
  }
  int v82 = *(_DWORD *)(a1 + 44);
  if ((v82 & 0x10) != 0)
  {
    if (*a3 <= (unint64_t)a2) {
      a2 = sub_1B4BE5708((uint64_t)a3, a2);
    }
    char v83 = *(unsigned char *)(a1 + 312);
    *(_WORD *)a2 = 640;
    a2[2] = v83;
    a2 += 3;
  }
  if ((v82 & 0x20) != 0)
  {
    if (*a3 <= (unint64_t)a2) {
      a2 = sub_1B4BE5708((uint64_t)a3, a2);
    }
    char v84 = *(unsigned char *)(a1 + 313);
    *(_WORD *)a2 = 648;
    a2[2] = v84;
    a2 += 3;
  }
  int v85 = *(_DWORD *)(a1 + 40);
  if ((v85 & 0x40000) != 0)
  {
    if (*a3 <= (unint64_t)a2) {
      a2 = sub_1B4BE5708((uint64_t)a3, a2);
    }
    char v86 = *(unsigned char *)(a1 + 249);
    *(_WORD *)a2 = 656;
    a2[2] = v86;
    a2 += 3;
    if ((v85 & 0x20000) == 0)
    {
LABEL_231:
      if ((v85 & 4) == 0) {
        goto LABEL_232;
      }
      goto LABEL_240;
    }
  }
  else if ((v85 & 0x20000) == 0)
  {
    goto LABEL_231;
  }
  if (*a3 <= (unint64_t)a2) {
    a2 = sub_1B4BE5708((uint64_t)a3, a2);
  }
  char v87 = *(unsigned char *)(a1 + 248);
  *(_WORD *)a2 = 664;
  a2[2] = v87;
  a2 += 3;
  if ((v85 & 4) == 0)
  {
LABEL_232:
    if ((v85 & 0x100000) == 0) {
      goto LABEL_250;
    }
    goto LABEL_241;
  }
LABEL_240:
  a2 = sub_1B4BD4F64((unint64_t *)a3, 36, (const void **)(*(void *)(a1 + 168) & 0xFFFFFFFFFFFFFFFELL), a2);
  if ((v85 & 0x100000) == 0) {
    goto LABEL_250;
  }
LABEL_241:
  if (*a3 <= (unint64_t)a2) {
    a2 = sub_1B4BE5708((uint64_t)a3, a2);
  }
  unint64_t v88 = *(int *)(a1 + 252);
  *(_WORD *)a2 = 704;
  if (v88 > 0x7F)
  {
    a2[2] = v88 | 0x80;
    unint64_t v89 = v88 >> 7;
    if (v88 >> 14)
    {
      a2 += 4;
      do
      {
        *(a2 - 1) = v89 | 0x80;
        unint64_t v90 = v89 >> 7;
        ++a2;
        unint64_t v91 = v89 >> 14;
        v89 >>= 7;
      }
      while (v91);
      *(a2 - 1) = v90;
    }
    else
    {
      a2[3] = v89;
      a2 += 4;
    }
  }
  else
  {
    a2[2] = v88;
    a2 += 3;
  }
LABEL_250:
  int v92 = *(_DWORD *)(a1 + 44);
  if ((v92 & 0x40) != 0)
  {
    if (*a3 <= (unint64_t)a2) {
      a2 = sub_1B4BE5708((uint64_t)a3, a2);
    }
    unint64_t v94 = *(int *)(a1 + 316);
    *(_WORD *)a2 = 712;
    if (v94 > 0x7F)
    {
      a2[2] = v94 | 0x80;
      unint64_t v96 = v94 >> 7;
      if (v94 >> 14)
      {
        a2 += 4;
        do
        {
          *(a2 - 1) = v96 | 0x80;
          unint64_t v99 = v96 >> 7;
          ++a2;
          unint64_t v100 = v96 >> 14;
          v96 >>= 7;
        }
        while (v100);
        *(a2 - 1) = v99;
        if ((v92 & 0x80) != 0) {
          goto LABEL_273;
        }
      }
      else
      {
        a2[3] = v96;
        a2 += 4;
        if ((v92 & 0x80) != 0) {
          goto LABEL_273;
        }
      }
    }
    else
    {
      a2[2] = v94;
      a2 += 3;
      if ((v92 & 0x80) != 0) {
        goto LABEL_273;
      }
    }
LABEL_252:
    if ((v92 & 0x100) == 0) {
      goto LABEL_284;
    }
    goto LABEL_253;
  }
  if ((v92 & 0x80) == 0) {
    goto LABEL_252;
  }
LABEL_273:
  if (*a3 <= (unint64_t)a2) {
    a2 = sub_1B4BE5708((uint64_t)a3, a2);
  }
  unint64_t v101 = *(int *)(a1 + 320);
  *(_WORD *)a2 = 720;
  if (v101 > 0x7F)
  {
    a2[2] = v101 | 0x80;
    unint64_t v102 = v101 >> 7;
    if (v101 >> 14)
    {
      a2 += 4;
      do
      {
        *(a2 - 1) = v102 | 0x80;
        unint64_t v103 = v102 >> 7;
        ++a2;
        unint64_t v104 = v102 >> 14;
        v102 >>= 7;
      }
      while (v104);
      *(a2 - 1) = v103;
      if ((v92 & 0x100) == 0) {
        goto LABEL_284;
      }
    }
    else
    {
      a2[3] = v102;
      a2 += 4;
      if ((v92 & 0x100) == 0) {
        goto LABEL_284;
      }
    }
  }
  else
  {
    a2[2] = v101;
    a2 += 3;
    if ((v92 & 0x100) == 0) {
      goto LABEL_284;
    }
  }
LABEL_253:
  if (*a3 <= (unint64_t)a2) {
    a2 = sub_1B4BE5708((uint64_t)a3, a2);
  }
  unint64_t v93 = *(int *)(a1 + 324);
  *(_WORD *)a2 = 728;
  if (v93 > 0x7F)
  {
    a2[2] = v93 | 0x80;
    unint64_t v95 = v93 >> 7;
    if (v93 >> 14)
    {
      a2 += 4;
      do
      {
        *(a2 - 1) = v95 | 0x80;
        unint64_t v97 = v95 >> 7;
        ++a2;
        unint64_t v98 = v95 >> 14;
        v95 >>= 7;
      }
      while (v98);
      *(a2 - 1) = v97;
    }
    else
    {
      a2[3] = v95;
      a2 += 4;
    }
  }
  else
  {
    a2[2] = v93;
    a2 += 3;
  }
LABEL_284:
  int v105 = *(_DWORD *)(a1 + 40);
  if ((v105 & 8) != 0)
  {
    a2 = sub_1B4BD4F64((unint64_t *)a3, 44, (const void **)(*(void *)(a1 + 176) & 0xFFFFFFFFFFFFFFFELL), a2);
    if ((v105 & 0x10) == 0)
    {
LABEL_286:
      if ((v105 & 0x20) == 0) {
        goto LABEL_287;
      }
      goto LABEL_299;
    }
  }
  else if ((v105 & 0x10) == 0)
  {
    goto LABEL_286;
  }
  a2 = sub_1B4BD4F64((unint64_t *)a3, 45, (const void **)(*(void *)(a1 + 184) & 0xFFFFFFFFFFFFFFFELL), a2);
  if ((v105 & 0x20) == 0)
  {
LABEL_287:
    if ((v105 & 0x40) == 0) {
      goto LABEL_288;
    }
    goto LABEL_300;
  }
LABEL_299:
  a2 = sub_1B4BD4F64((unint64_t *)a3, 46, (const void **)(*(void *)(a1 + 192) & 0xFFFFFFFFFFFFFFFELL), a2);
  if ((v105 & 0x40) == 0)
  {
LABEL_288:
    if ((v105 & 0x80) == 0) {
      goto LABEL_289;
    }
    goto LABEL_301;
  }
LABEL_300:
  a2 = sub_1B4BD4F64((unint64_t *)a3, 47, (const void **)(*(void *)(a1 + 200) & 0xFFFFFFFFFFFFFFFELL), a2);
  if ((v105 & 0x80) == 0)
  {
LABEL_289:
    if ((v105 & 0x80000) == 0) {
      goto LABEL_290;
    }
    goto LABEL_302;
  }
LABEL_301:
  a2 = sub_1B4BD4F64((unint64_t *)a3, 48, (const void **)(*(void *)(a1 + 208) & 0xFFFFFFFFFFFFFFFELL), a2);
  if ((v105 & 0x80000) == 0)
  {
LABEL_290:
    if ((v105 & 0x2000) == 0) {
      goto LABEL_291;
    }
    goto LABEL_305;
  }
LABEL_302:
  if (*a3 <= (unint64_t)a2) {
    a2 = sub_1B4BE5708((uint64_t)a3, a2);
  }
  char v110 = *(unsigned char *)(a1 + 250);
  *(_WORD *)a2 = 904;
  a2[2] = v110;
  a2 += 3;
  if ((v105 & 0x2000) == 0)
  {
LABEL_291:
    if ((v105 & 0x200000) == 0) {
      goto LABEL_292;
    }
    goto LABEL_308;
  }
LABEL_305:
  if (*a3 <= (unint64_t)a2) {
    a2 = sub_1B4BE5708((uint64_t)a3, a2);
  }
  char v111 = *(unsigned char *)(a1 + 244);
  *(_WORD *)a2 = 912;
  a2[2] = v111;
  a2 += 3;
  if ((v105 & 0x200000) == 0)
  {
LABEL_292:
    if ((v105 & 0x400000) == 0) {
      goto LABEL_293;
    }
    goto LABEL_311;
  }
LABEL_308:
  if (*a3 <= (unint64_t)a2) {
    a2 = sub_1B4BE5708((uint64_t)a3, a2);
  }
  int v112 = *(_DWORD *)(a1 + 256);
  *(_WORD *)a2 = 925;
  *(_DWORD *)(a2 + 2) = v112;
  a2 += 6;
  if ((v105 & 0x400000) == 0)
  {
LABEL_293:
    if ((v105 & 0x100) == 0) {
      goto LABEL_295;
    }
    goto LABEL_294;
  }
LABEL_311:
  if (*a3 <= (unint64_t)a2) {
    a2 = sub_1B4BE5708((uint64_t)a3, a2);
  }
  unint64_t v113 = *(void *)(a1 + 264);
  *(_WORD *)a2 = 928;
  if (v113 <= 0x7F)
  {
    a2[2] = v113;
    a2 += 3;
    if ((v105 & 0x100) == 0) {
      goto LABEL_295;
    }
LABEL_294:
    a2 = sub_1B4BD4F64((unint64_t *)a3, 53, (const void **)(*(void *)(a1 + 216) & 0xFFFFFFFFFFFFFFFELL), a2);
    goto LABEL_295;
  }
  a2[2] = v113 | 0x80;
  unint64_t v114 = v113 >> 7;
  if (v113 >> 14)
  {
    a2 += 4;
    do
    {
      *(a2 - 1) = v114 | 0x80;
      unint64_t v115 = v114 >> 7;
      ++a2;
      unint64_t v116 = v114 >> 14;
      v114 >>= 7;
    }
    while (v116);
    *(a2 - 1) = v115;
    if ((v105 & 0x100) != 0) {
      goto LABEL_294;
    }
  }
  else
  {
    a2[3] = v114;
    a2 += 4;
    if ((v105 & 0x100) != 0) {
      goto LABEL_294;
    }
  }
LABEL_295:
  uint64_t v106 = sub_1B4BECD04(a1 + 16, 200, 0x20000000, a2, a3);
  uint64_t v107 = v106;
  uint64_t v108 = *(void *)(a1 + 8);
  if ((v108 & 1) == 0) {
    return v107;
  }
  unint64_t v117 = v108 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v117 + 31) < 0)
  {
    v118 = *(void **)(v117 + 8);
    uint64_t v119 = *(void *)(v117 + 16);
  }
  else
  {
    v118 = (void *)(v117 + 8);
    LODWORD(v119) = *(unsigned __int8 *)(v117 + 31);
  }
  if (*a3 - (uint64_t)v106 >= (int)v119)
  {
    uint64_t v120 = (int)v119;
    memcpy(v106, v118, (int)v119);
    v107 += v120;
    return v107;
  }
  return sub_1B4BE581C(a3, (char *)v118, v119, (unint64_t)v106);
}

uint64_t sub_1B4BDAA48(uint64_t a1)
{
  uint64_t v2 = sub_1B4BEFA38(a1 + 16);
  uint64_t v3 = *(unsigned int *)(a1 + 64);
  uint64_t v4 = v2 + v3;
  if ((int)v3 >= 1)
  {
    int v5 = 0;
    do
    {
      uint64_t v6 = sub_1B4BE0734(a1 + 56, v5);
      uint64_t v7 = *(unsigned __int8 *)(v6 + 23);
      if ((v7 & 0x80u) != 0) {
        uint64_t v7 = *(void *)(v6 + 8);
      }
      v4 += v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6);
      ++v5;
    }
    while (v3 != v5);
  }
  uint64_t v8 = *(unsigned int *)(a1 + 88);
  uint64_t v9 = v4 + v8;
  if ((int)v8 >= 1)
  {
    int v10 = 0;
    do
    {
      uint64_t v11 = sub_1B4BE0734(a1 + 80, v10);
      uint64_t v12 = *(unsigned __int8 *)(v11 + 23);
      if ((v12 & 0x80u) != 0) {
        uint64_t v12 = *(void *)(v11 + 8);
      }
      v9 += v12 + ((9 * (__clz(v12 | 1) ^ 0x1F) + 73) >> 6);
      ++v10;
    }
    while (v8 != v10);
  }
  uint64_t v13 = *(unsigned int *)(a1 + 112);
  uint64_t v14 = v9 + 2 * v13;
  if ((int)v13 >= 1)
  {
    int v15 = 0;
    do
    {
      uint64_t v16 = sub_1B4BE0734(a1 + 104, v15);
      uint64_t v17 = *(unsigned __int8 *)(v16 + 23);
      if ((v17 & 0x80u) != 0) {
        uint64_t v17 = *(void *)(v16 + 8);
      }
      v14 += v17 + ((9 * (__clz(v17 | 1) ^ 0x1F) + 73) >> 6);
      ++v15;
    }
    while (v13 != v15);
  }
  uint64_t v18 = *(unsigned int *)(a1 + 136);
  uint64_t v19 = v14 + 2 * v18;
  if ((int)v18 >= 1)
  {
    int v20 = 0;
    do
    {
      uint64_t v21 = sub_1B4BE0734(a1 + 128, v20);
      uint64_t v22 = *(unsigned __int8 *)(v21 + 23);
      if ((v22 & 0x80u) != 0) {
        uint64_t v22 = *(void *)(v21 + 8);
      }
      v19 += v22 + ((9 * (__clz(v22 | 1) ^ 0x1F) + 73) >> 6);
      ++v20;
    }
    while (v18 != v20);
  }
  unsigned int v23 = *(_DWORD *)(a1 + 40);
  if (!(_BYTE)v23) {
    goto LABEL_33;
  }
  if (v23)
  {
    unint64_t v58 = *(void *)(a1 + 152) & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v59 = *(unsigned __int8 *)(v58 + 23);
    uint64_t v60 = *(void *)(v58 + 8);
    if ((v59 & 0x80u) == 0) {
      uint64_t v60 = v59;
    }
    v19 += v60 + ((9 * (__clz(v60 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v23 & 2) == 0)
    {
LABEL_24:
      if ((v23 & 4) == 0) {
        goto LABEL_25;
      }
      goto LABEL_131;
    }
  }
  else if ((v23 & 2) == 0)
  {
    goto LABEL_24;
  }
  unint64_t v61 = *(void *)(a1 + 160) & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v62 = *(unsigned __int8 *)(v61 + 23);
  uint64_t v63 = *(void *)(v61 + 8);
  if ((v62 & 0x80u) == 0) {
    uint64_t v63 = v62;
  }
  v19 += v63 + ((9 * (__clz(v63 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v23 & 4) == 0)
  {
LABEL_25:
    if ((v23 & 8) == 0) {
      goto LABEL_26;
    }
    goto LABEL_134;
  }
LABEL_131:
  unint64_t v64 = *(void *)(a1 + 168) & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v65 = *(unsigned __int8 *)(v64 + 23);
  uint64_t v66 = *(void *)(v64 + 8);
  if ((v65 & 0x80u) == 0) {
    uint64_t v66 = v65;
  }
  v19 += v66 + ((9 * (__clz(v66 | 1) ^ 0x1F) + 73) >> 6) + 2;
  if ((v23 & 8) == 0)
  {
LABEL_26:
    if ((v23 & 0x10) == 0) {
      goto LABEL_27;
    }
    goto LABEL_137;
  }
LABEL_134:
  unint64_t v67 = *(void *)(a1 + 176) & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v68 = *(unsigned __int8 *)(v67 + 23);
  uint64_t v69 = *(void *)(v67 + 8);
  if ((v68 & 0x80u) == 0) {
    uint64_t v69 = v68;
  }
  v19 += v69 + ((9 * (__clz(v69 | 1) ^ 0x1F) + 73) >> 6) + 2;
  if ((v23 & 0x10) == 0)
  {
LABEL_27:
    if ((v23 & 0x20) == 0) {
      goto LABEL_28;
    }
LABEL_140:
    unint64_t v73 = *(void *)(a1 + 192) & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v74 = *(unsigned __int8 *)(v73 + 23);
    uint64_t v75 = *(void *)(v73 + 8);
    if ((v74 & 0x80u) == 0) {
      uint64_t v75 = v74;
    }
    v19 += v75 + ((9 * (__clz(v75 | 1) ^ 0x1F) + 73) >> 6) + 2;
    if ((v23 & 0x40) == 0)
    {
LABEL_29:
      if ((v23 & 0x80) == 0) {
        goto LABEL_33;
      }
      goto LABEL_30;
    }
    goto LABEL_143;
  }
LABEL_137:
  unint64_t v70 = *(void *)(a1 + 184) & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v71 = *(unsigned __int8 *)(v70 + 23);
  uint64_t v72 = *(void *)(v70 + 8);
  if ((v71 & 0x80u) == 0) {
    uint64_t v72 = v71;
  }
  v19 += v72 + ((9 * (__clz(v72 | 1) ^ 0x1F) + 73) >> 6) + 2;
  if ((v23 & 0x20) != 0) {
    goto LABEL_140;
  }
LABEL_28:
  if ((v23 & 0x40) == 0) {
    goto LABEL_29;
  }
LABEL_143:
  unint64_t v76 = *(void *)(a1 + 200) & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v77 = *(unsigned __int8 *)(v76 + 23);
  uint64_t v78 = *(void *)(v76 + 8);
  if ((v77 & 0x80u) == 0) {
    uint64_t v78 = v77;
  }
  v19 += v78 + ((9 * (__clz(v78 | 1) ^ 0x1F) + 73) >> 6) + 2;
  if ((v23 & 0x80) != 0)
  {
LABEL_30:
    unint64_t v24 = *(void *)(a1 + 208) & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v25 = *(unsigned __int8 *)(v24 + 23);
    uint64_t v26 = *(void *)(v24 + 8);
    if ((v25 & 0x80u) == 0) {
      uint64_t v26 = v25;
    }
    v19 += v26 + ((9 * (__clz(v26 | 1) ^ 0x1F) + 73) >> 6) + 2;
  }
LABEL_33:
  if ((v23 & 0xFF00) == 0) {
    goto LABEL_50;
  }
  if ((v23 & 0x100) != 0)
  {
    unint64_t v79 = *(void *)(a1 + 216) & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v80 = *(unsigned __int8 *)(v79 + 23);
    uint64_t v81 = *(void *)(v79 + 8);
    if ((v80 & 0x80u) == 0) {
      uint64_t v81 = v80;
    }
    v19 += v81 + ((9 * (__clz(v81 | 1) ^ 0x1F) + 73) >> 6) + 2;
    if ((v23 & 0x200) == 0)
    {
LABEL_36:
      if ((v23 & 0x400) == 0) {
        goto LABEL_37;
      }
      goto LABEL_154;
    }
  }
  else if ((v23 & 0x200) == 0)
  {
    goto LABEL_36;
  }
  int v82 = *(_DWORD *)(a1 + 224);
  uint64_t v83 = (9 * (__clz(v82 | 1) ^ 0x1F) + 73) >> 6;
  if (v82 >= 0) {
    uint64_t v84 = v83;
  }
  else {
    uint64_t v84 = 10;
  }
  v19 += v84 + 1;
  if ((v23 & 0x400) == 0)
  {
LABEL_37:
    if ((v23 & 0x800) == 0) {
      goto LABEL_38;
    }
LABEL_158:
    v19 += ((9 * (__clz(*(void *)(a1 + 232) | 1) ^ 0x3F) + 73) >> 6) + 1;
    if ((v23 & 0x1000) != 0) {
      goto LABEL_39;
    }
    goto LABEL_43;
  }
LABEL_154:
  int v85 = *(_DWORD *)(a1 + 228);
  uint64_t v86 = (9 * (__clz(v85 | 1) ^ 0x1F) + 73) >> 6;
  if (v85 >= 0) {
    uint64_t v87 = v86;
  }
  else {
    uint64_t v87 = 10;
  }
  v19 += v87 + 1;
  if ((v23 & 0x800) != 0) {
    goto LABEL_158;
  }
LABEL_38:
  if ((v23 & 0x1000) != 0)
  {
LABEL_39:
    int v27 = *(_DWORD *)(a1 + 240);
    uint64_t v28 = (9 * (__clz(v27 | 1) ^ 0x1F) + 73) >> 6;
    if (v27 >= 0) {
      uint64_t v29 = v28;
    }
    else {
      uint64_t v29 = 10;
    }
    v19 += v29 + 1;
  }
LABEL_43:
  uint64_t v30 = v19 + 3;
  if ((v23 & 0x2000) == 0) {
    uint64_t v30 = v19;
  }
  if ((v23 & 0x4000) != 0) {
    v30 += 3;
  }
  if ((v23 & 0x8000) != 0) {
    uint64_t v19 = v30 + 3;
  }
  else {
    uint64_t v19 = v30;
  }
LABEL_50:
  if ((v23 & 0xFF0000) != 0)
  {
    uint64_t v31 = v19 + 3;
    if ((v23 & 0x10000) == 0) {
      uint64_t v31 = v19;
    }
    if ((v23 & 0x20000) != 0) {
      v31 += 3;
    }
    if ((v23 & 0x40000) != 0) {
      v31 += 3;
    }
    if ((v23 & 0x80000) != 0) {
      v31 += 3;
    }
    if ((v23 & 0x100000) != 0)
    {
      int v32 = *(_DWORD *)(a1 + 252);
      uint64_t v33 = (9 * (__clz(v32 | 1) ^ 0x1F) + 73) >> 6;
      if (v32 >= 0) {
        uint64_t v34 = v33;
      }
      else {
        uint64_t v34 = 10;
      }
      v31 += v34 + 2;
    }
    if ((v23 & 0x200000) != 0) {
      uint64_t v19 = v31 + 6;
    }
    else {
      uint64_t v19 = v31;
    }
    if ((v23 & 0x400000) != 0) {
      v19 += ((9 * (__clz(*(void *)(a1 + 264) | 1) ^ 0x3F) + 73) >> 6) + 2;
    }
    if ((v23 & 0x800000) != 0)
    {
      int v35 = *(_DWORD *)(a1 + 272);
      uint64_t v36 = (9 * (__clz(v35 | 1) ^ 0x1F) + 73) >> 6;
      if (v35 >= 0) {
        uint64_t v37 = v36;
      }
      else {
        uint64_t v37 = 10;
      }
      v19 += v37 + 1;
    }
  }
  if (!HIBYTE(v23)) {
    goto LABEL_94;
  }
  if ((v23 & 0x1000000) != 0)
  {
    int v38 = *(_DWORD *)(a1 + 276);
    uint64_t v39 = (9 * (__clz(v38 | 1) ^ 0x1F) + 73) >> 6;
    if (v38 >= 0) {
      uint64_t v40 = v39;
    }
    else {
      uint64_t v40 = 10;
    }
    v19 += v40 + 1;
  }
  uint64_t v41 = v19 + 5;
  if ((v23 & 0x2000000) == 0) {
    uint64_t v41 = v19;
  }
  if ((v23 & 0x4000000) != 0)
  {
    int v42 = *(_DWORD *)(a1 + 284);
    uint64_t v43 = (9 * (__clz(v42 | 1) ^ 0x1F) + 73) >> 6;
    if (v42 >= 0) {
      uint64_t v44 = v43;
    }
    else {
      uint64_t v44 = 10;
    }
    v41 += v44 + 1;
  }
  if ((v23 & 0x8000000) != 0) {
    uint64_t v19 = v41 + 5;
  }
  else {
    uint64_t v19 = v41;
  }
  if ((v23 & 0x10000000) == 0)
  {
    if ((v23 & 0x20000000) == 0) {
      goto LABEL_92;
    }
LABEL_164:
    int v91 = *(_DWORD *)(a1 + 296);
    uint64_t v92 = ((9 * (__clz(v91 | 1) ^ 0x1F) + 73) >> 6) + 2;
    if (v91 >= 0) {
      uint64_t v93 = v92;
    }
    else {
      uint64_t v93 = 12;
    }
    v19 += v93;
    if ((v23 & 0x40000000) == 0)
    {
LABEL_93:
      if ((v23 & 0x80000000) == 0) {
        goto LABEL_94;
      }
      goto LABEL_172;
    }
    goto LABEL_168;
  }
  int v88 = *(_DWORD *)(a1 + 292);
  uint64_t v89 = (9 * (__clz(v88 | 1) ^ 0x1F) + 73) >> 6;
  if (v88 >= 0) {
    uint64_t v90 = v89;
  }
  else {
    uint64_t v90 = 10;
  }
  v19 += v90 + 2;
  if ((v23 & 0x20000000) != 0) {
    goto LABEL_164;
  }
LABEL_92:
  if ((v23 & 0x40000000) == 0) {
    goto LABEL_93;
  }
LABEL_168:
  int v94 = *(_DWORD *)(a1 + 300);
  uint64_t v95 = ((9 * (__clz(v94 | 1) ^ 0x1F) + 73) >> 6) + 2;
  if (v94 >= 0) {
    uint64_t v96 = v95;
  }
  else {
    uint64_t v96 = 12;
  }
  v19 += v96;
  if ((v23 & 0x80000000) != 0)
  {
LABEL_172:
    int v97 = *(_DWORD *)(a1 + 304);
    uint64_t v98 = ((9 * (__clz(v97 | 1) ^ 0x1F) + 73) >> 6) + 2;
    if (v97 >= 0) {
      uint64_t v99 = v98;
    }
    else {
      uint64_t v99 = 12;
    }
    v19 += v99;
  }
LABEL_94:
  int v45 = *(_DWORD *)(a1 + 44);
  if ((_BYTE)v45)
  {
    uint64_t v46 = v19 + 3;
    if ((v45 & 1) == 0) {
      uint64_t v46 = v19;
    }
    if ((v45 & 2) != 0) {
      v46 += 3;
    }
    if ((v45 & 4) != 0) {
      v46 += 3;
    }
    if ((v45 & 8) != 0) {
      v46 += 3;
    }
    if ((v45 & 0x10) != 0) {
      v46 += 3;
    }
    if ((v45 & 0x20) != 0) {
      uint64_t v19 = v46 + 3;
    }
    else {
      uint64_t v19 = v46;
    }
    if ((v45 & 0x40) != 0)
    {
      int v47 = *(_DWORD *)(a1 + 316);
      uint64_t v48 = ((9 * (__clz(v47 | 1) ^ 0x1F) + 73) >> 6) + 2;
      if (v47 >= 0) {
        uint64_t v49 = v48;
      }
      else {
        uint64_t v49 = 12;
      }
      v19 += v49;
    }
    if ((v45 & 0x80) != 0)
    {
      int v50 = *(_DWORD *)(a1 + 320);
      uint64_t v51 = ((9 * (__clz(v50 | 1) ^ 0x1F) + 73) >> 6) + 2;
      if (v50 >= 0) {
        uint64_t v52 = v51;
      }
      else {
        uint64_t v52 = 12;
      }
      v19 += v52;
    }
  }
  if ((v45 & 0x100) != 0)
  {
    int v53 = *(_DWORD *)(a1 + 324);
    uint64_t v54 = ((9 * (__clz(v53 | 1) ^ 0x1F) + 73) >> 6) + 2;
    if (v53 >= 0) {
      uint64_t v55 = v54;
    }
    else {
      uint64_t v55 = 12;
    }
    v19 += v55;
  }
  uint64_t v56 = *(void *)(a1 + 8);
  if (v56)
  {
    unint64_t v100 = v56 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v100 + 31) < 0) {
      uint64_t v101 = *(void *)(v100 + 16);
    }
    else {
      uint64_t v101 = *(unsigned __int8 *)(v100 + 31);
    }
    v19 += v101;
  }
  *(_DWORD *)(a1 + 48) = v19;
  return v19;
}

unint64_t sub_1B4BDB2F8(uint64_t a1, void *lpsrc)
{
  if (!__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1F0D537C8, (const struct __class_type_info *)&unk_1F0D53158, 0))sub_1B4BD7788(); {
  return sub_1B4BDB380(a1, (uint64_t)lpsrc);
  }
}

unint64_t sub_1B4BDB380(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    sub_1B4BE6194((uint64_t)v45, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 1671);
    uint64_t v4 = sub_1B4BE61AC(v45, "CHECK failed: (&from) != (this): ");
    sub_1B4BE62E8((uint64_t)&v44, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_1B4BE62F0((uint64_t)v45);
  }
  sub_1B4BEA6DC(a1 + 16, a2 + 16);
  uint64_t v5 = *(void *)(a2 + 8);
  if (v5)
  {
    unint64_t v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v7 = (v5 & 0xFFFFFFFFFFFFFFFELL) + 8;
    uint64_t v8 = *(void *)(a1 + 8);
    if (v8) {
      uint64_t v9 = (std::string *)((v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
    }
    else {
      uint64_t v9 = (std::string *)sub_1B4BD6F84((unint64_t *)(a1 + 8));
    }
    int v10 = *(char *)(v6 + 31);
    if (v10 >= 0) {
      uint64_t v11 = (const std::string::value_type *)v7;
    }
    else {
      uint64_t v11 = *(const std::string::value_type **)(v6 + 8);
    }
    if (v10 >= 0) {
      std::string::size_type v12 = *(unsigned __int8 *)(v6 + 31);
    }
    else {
      std::string::size_type v12 = *(void *)(v6 + 16);
    }
    std::string::append(v9, v11, v12);
  }
  sub_1B4BE0974(a1 + 56, a2 + 56);
  sub_1B4BE0974(a1 + 80, a2 + 80);
  sub_1B4BE0974(a1 + 104, a2 + 104);
  unint64_t result = sub_1B4BE0974(a1 + 128, a2 + 128);
  unsigned int v14 = *(_DWORD *)(a2 + 40);
  if (!(_BYTE)v14) {
    goto LABEL_47;
  }
  if (v14)
  {
    int v15 = (long long *)(*(void *)(a2 + 152) & 0xFFFFFFFFFFFFFFFELL);
    *(_DWORD *)(a1 + 40) |= 1u;
    uint64_t v16 = *(void *)(a1 + 8);
    uint64_t v17 = (void *)(v16 & 0xFFFFFFFFFFFFFFFELL);
    if (v16) {
      uint64_t v17 = (void *)*v17;
    }
    unint64_t result = sub_1B4BE4FB8((uint64_t *)(a1 + 152), v15, (uint64_t)v17);
    if ((v14 & 2) == 0)
    {
LABEL_16:
      if ((v14 & 4) == 0) {
        goto LABEL_17;
      }
      goto LABEL_29;
    }
  }
  else if ((v14 & 2) == 0)
  {
    goto LABEL_16;
  }
  uint64_t v18 = (long long *)(*(void *)(a2 + 160) & 0xFFFFFFFFFFFFFFFELL);
  *(_DWORD *)(a1 + 40) |= 2u;
  uint64_t v19 = *(void *)(a1 + 8);
  int v20 = (void *)(v19 & 0xFFFFFFFFFFFFFFFELL);
  if (v19) {
    int v20 = (void *)*v20;
  }
  unint64_t result = sub_1B4BE4FB8((uint64_t *)(a1 + 160), v18, (uint64_t)v20);
  if ((v14 & 4) == 0)
  {
LABEL_17:
    if ((v14 & 8) == 0) {
      goto LABEL_18;
    }
    goto LABEL_32;
  }
LABEL_29:
  uint64_t v21 = (long long *)(*(void *)(a2 + 168) & 0xFFFFFFFFFFFFFFFELL);
  *(_DWORD *)(a1 + 40) |= 4u;
  uint64_t v22 = *(void *)(a1 + 8);
  unsigned int v23 = (void *)(v22 & 0xFFFFFFFFFFFFFFFELL);
  if (v22) {
    unsigned int v23 = (void *)*v23;
  }
  unint64_t result = sub_1B4BE4FB8((uint64_t *)(a1 + 168), v21, (uint64_t)v23);
  if ((v14 & 8) == 0)
  {
LABEL_18:
    if ((v14 & 0x10) == 0) {
      goto LABEL_19;
    }
    goto LABEL_35;
  }
LABEL_32:
  unint64_t v24 = (long long *)(*(void *)(a2 + 176) & 0xFFFFFFFFFFFFFFFELL);
  *(_DWORD *)(a1 + 40) |= 8u;
  uint64_t v25 = *(void *)(a1 + 8);
  uint64_t v26 = (void *)(v25 & 0xFFFFFFFFFFFFFFFELL);
  if (v25) {
    uint64_t v26 = (void *)*v26;
  }
  unint64_t result = sub_1B4BE4FE0((uint64_t *)(a1 + 176), v24, (uint64_t)v26);
  if ((v14 & 0x10) == 0)
  {
LABEL_19:
    if ((v14 & 0x20) == 0) {
      goto LABEL_20;
    }
LABEL_38:
    uint64_t v30 = (long long *)(*(void *)(a2 + 192) & 0xFFFFFFFFFFFFFFFELL);
    *(_DWORD *)(a1 + 40) |= 0x20u;
    uint64_t v31 = *(void *)(a1 + 8);
    int v32 = (void *)(v31 & 0xFFFFFFFFFFFFFFFELL);
    if (v31) {
      int v32 = (void *)*v32;
    }
    unint64_t result = sub_1B4BE4FE0((uint64_t *)(a1 + 192), v30, (uint64_t)v32);
    if ((v14 & 0x40) == 0)
    {
LABEL_21:
      if ((v14 & 0x80) == 0) {
        goto LABEL_47;
      }
      goto LABEL_44;
    }
    goto LABEL_41;
  }
LABEL_35:
  int v27 = (long long *)(*(void *)(a2 + 184) & 0xFFFFFFFFFFFFFFFELL);
  *(_DWORD *)(a1 + 40) |= 0x10u;
  uint64_t v28 = *(void *)(a1 + 8);
  uint64_t v29 = (void *)(v28 & 0xFFFFFFFFFFFFFFFELL);
  if (v28) {
    uint64_t v29 = (void *)*v29;
  }
  unint64_t result = sub_1B4BE4FE0((uint64_t *)(a1 + 184), v27, (uint64_t)v29);
  if ((v14 & 0x20) != 0) {
    goto LABEL_38;
  }
LABEL_20:
  if ((v14 & 0x40) == 0) {
    goto LABEL_21;
  }
LABEL_41:
  uint64_t v33 = (long long *)(*(void *)(a2 + 200) & 0xFFFFFFFFFFFFFFFELL);
  *(_DWORD *)(a1 + 40) |= 0x40u;
  uint64_t v34 = *(void *)(a1 + 8);
  int v35 = (void *)(v34 & 0xFFFFFFFFFFFFFFFELL);
  if (v34) {
    int v35 = (void *)*v35;
  }
  unint64_t result = sub_1B4BE4FE0((uint64_t *)(a1 + 200), v33, (uint64_t)v35);
  if ((v14 & 0x80) != 0)
  {
LABEL_44:
    uint64_t v36 = (long long *)(*(void *)(a2 + 208) & 0xFFFFFFFFFFFFFFFELL);
    *(_DWORD *)(a1 + 40) |= 0x80u;
    uint64_t v37 = *(void *)(a1 + 8);
    int v38 = (void *)(v37 & 0xFFFFFFFFFFFFFFFELL);
    if (v37) {
      int v38 = (void *)*v38;
    }
    unint64_t result = sub_1B4BE4FE0((uint64_t *)(a1 + 208), v36, (uint64_t)v38);
  }
LABEL_47:
  if ((v14 & 0xFF00) == 0) {
    goto LABEL_58;
  }
  if ((v14 & 0x100) != 0)
  {
    uint64_t v41 = (long long *)(*(void *)(a2 + 216) & 0xFFFFFFFFFFFFFFFELL);
    *(_DWORD *)(a1 + 40) |= 0x100u;
    uint64_t v42 = *(void *)(a1 + 8);
    uint64_t v43 = (void *)(v42 & 0xFFFFFFFFFFFFFFFELL);
    if (v42) {
      uint64_t v43 = (void *)*v43;
    }
    unint64_t result = sub_1B4BE4FB8((uint64_t *)(a1 + 216), v41, (uint64_t)v43);
    if ((v14 & 0x200) == 0)
    {
LABEL_50:
      if ((v14 & 0x400) == 0) {
        goto LABEL_51;
      }
      goto LABEL_97;
    }
  }
  else if ((v14 & 0x200) == 0)
  {
    goto LABEL_50;
  }
  *(_DWORD *)(a1 + 224) = *(_DWORD *)(a2 + 224);
  if ((v14 & 0x400) == 0)
  {
LABEL_51:
    if ((v14 & 0x800) == 0) {
      goto LABEL_52;
    }
    goto LABEL_98;
  }
LABEL_97:
  *(_DWORD *)(a1 + 228) = *(_DWORD *)(a2 + 228);
  if ((v14 & 0x800) == 0)
  {
LABEL_52:
    if ((v14 & 0x1000) == 0) {
      goto LABEL_53;
    }
    goto LABEL_99;
  }
LABEL_98:
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  if ((v14 & 0x1000) == 0)
  {
LABEL_53:
    if ((v14 & 0x2000) == 0) {
      goto LABEL_54;
    }
    goto LABEL_100;
  }
LABEL_99:
  *(_DWORD *)(a1 + 24sub_1B4BC92E4(&a9, 0) = *(_DWORD *)(a2 + 240);
  if ((v14 & 0x2000) == 0)
  {
LABEL_54:
    if ((v14 & 0x4000) == 0) {
      goto LABEL_55;
    }
LABEL_101:
    *(unsigned char *)(a1 + 245) = *(unsigned char *)(a2 + 245);
    if ((v14 & 0x8000) == 0) {
      goto LABEL_57;
    }
    goto LABEL_56;
  }
LABEL_100:
  *(unsigned char *)(a1 + 244) = *(unsigned char *)(a2 + 244);
  if ((v14 & 0x4000) != 0) {
    goto LABEL_101;
  }
LABEL_55:
  if ((v14 & 0x8000) != 0) {
LABEL_56:
  }
    *(unsigned char *)(a1 + 246) = *(unsigned char *)(a2 + 246);
LABEL_57:
  *(_DWORD *)(a1 + 40) |= v14;
LABEL_58:
  if ((v14 & 0xFF0000) == 0) {
    goto LABEL_69;
  }
  if ((v14 & 0x10000) != 0)
  {
    *(unsigned char *)(a1 + 247) = *(unsigned char *)(a2 + 247);
    if ((v14 & 0x20000) == 0)
    {
LABEL_61:
      if ((v14 & 0x40000) == 0) {
        goto LABEL_62;
      }
      goto LABEL_105;
    }
  }
  else if ((v14 & 0x20000) == 0)
  {
    goto LABEL_61;
  }
  *(unsigned char *)(a1 + 248) = *(unsigned char *)(a2 + 248);
  if ((v14 & 0x40000) == 0)
  {
LABEL_62:
    if ((v14 & 0x80000) == 0) {
      goto LABEL_63;
    }
    goto LABEL_106;
  }
LABEL_105:
  *(unsigned char *)(a1 + 249) = *(unsigned char *)(a2 + 249);
  if ((v14 & 0x80000) == 0)
  {
LABEL_63:
    if ((v14 & 0x100000) == 0) {
      goto LABEL_64;
    }
    goto LABEL_107;
  }
LABEL_106:
  *(unsigned char *)(a1 + 25sub_1B4BC92E4(&a9, 0) = *(unsigned char *)(a2 + 250);
  if ((v14 & 0x100000) == 0)
  {
LABEL_64:
    if ((v14 & 0x200000) == 0) {
      goto LABEL_65;
    }
    goto LABEL_108;
  }
LABEL_107:
  *(_DWORD *)(a1 + 252) = *(_DWORD *)(a2 + 252);
  if ((v14 & 0x200000) == 0)
  {
LABEL_65:
    if ((v14 & 0x400000) == 0) {
      goto LABEL_66;
    }
LABEL_109:
    *(void *)(a1 + 264) = *(void *)(a2 + 264);
    if ((v14 & 0x800000) == 0) {
      goto LABEL_68;
    }
    goto LABEL_67;
  }
LABEL_108:
  *(_DWORD *)(a1 + 256) = *(_DWORD *)(a2 + 256);
  if ((v14 & 0x400000) != 0) {
    goto LABEL_109;
  }
LABEL_66:
  if ((v14 & 0x800000) != 0) {
LABEL_67:
  }
    *(_DWORD *)(a1 + 272) = *(_DWORD *)(a2 + 272);
LABEL_68:
  *(_DWORD *)(a1 + 40) |= v14;
LABEL_69:
  if (!HIBYTE(v14)) {
    goto LABEL_79;
  }
  if ((v14 & 0x1000000) != 0)
  {
    *(_DWORD *)(a1 + 276) = *(_DWORD *)(a2 + 276);
    if ((v14 & 0x2000000) == 0)
    {
LABEL_72:
      if ((v14 & 0x4000000) == 0) {
        goto LABEL_73;
      }
      goto LABEL_121;
    }
  }
  else if ((v14 & 0x2000000) == 0)
  {
    goto LABEL_72;
  }
  *(_DWORD *)(a1 + 28sub_1B4BC92E4(&a9, 0) = *(_DWORD *)(a2 + 280);
  if ((v14 & 0x4000000) == 0)
  {
LABEL_73:
    if ((v14 & 0x8000000) == 0) {
      goto LABEL_74;
    }
    goto LABEL_122;
  }
LABEL_121:
  *(_DWORD *)(a1 + 284) = *(_DWORD *)(a2 + 284);
  if ((v14 & 0x8000000) == 0)
  {
LABEL_74:
    if ((v14 & 0x10000000) == 0) {
      goto LABEL_75;
    }
    goto LABEL_123;
  }
LABEL_122:
  *(_DWORD *)(a1 + 288) = *(_DWORD *)(a2 + 288);
  if ((v14 & 0x10000000) == 0)
  {
LABEL_75:
    if ((v14 & 0x20000000) == 0) {
      goto LABEL_76;
    }
    goto LABEL_124;
  }
LABEL_123:
  *(_DWORD *)(a1 + 292) = *(_DWORD *)(a2 + 292);
  if ((v14 & 0x20000000) == 0)
  {
LABEL_76:
    if ((v14 & 0x40000000) == 0) {
      goto LABEL_77;
    }
LABEL_125:
    *(_DWORD *)(a1 + 30sub_1B4BC92E4(&a9, 0) = *(_DWORD *)(a2 + 300);
    if ((v14 & 0x80000000) == 0) {
      goto LABEL_78;
    }
LABEL_126:
    *(_DWORD *)(a1 + 304) = *(_DWORD *)(a2 + 304);
    goto LABEL_78;
  }
LABEL_124:
  *(_DWORD *)(a1 + 296) = *(_DWORD *)(a2 + 296);
  if ((v14 & 0x40000000) != 0) {
    goto LABEL_125;
  }
LABEL_77:
  if ((v14 & 0x80000000) != 0) {
    goto LABEL_126;
  }
LABEL_78:
  *(_DWORD *)(a1 + 40) |= v14;
LABEL_79:
  int v39 = *(_DWORD *)(a2 + 44);
  if (!(_BYTE)v39) {
    goto LABEL_90;
  }
  if (v39)
  {
    *(unsigned char *)(a1 + 308) = *(unsigned char *)(a2 + 308);
    if ((v39 & 2) == 0)
    {
LABEL_82:
      if ((v39 & 4) == 0) {
        goto LABEL_83;
      }
      goto LABEL_113;
    }
  }
  else if ((v39 & 2) == 0)
  {
    goto LABEL_82;
  }
  *(unsigned char *)(a1 + 309) = *(unsigned char *)(a2 + 309);
  if ((v39 & 4) == 0)
  {
LABEL_83:
    if ((v39 & 8) == 0) {
      goto LABEL_84;
    }
    goto LABEL_114;
  }
LABEL_113:
  *(unsigned char *)(a1 + 31sub_1B4BC92E4(&a9, 0) = *(unsigned char *)(a2 + 310);
  if ((v39 & 8) == 0)
  {
LABEL_84:
    if ((v39 & 0x10) == 0) {
      goto LABEL_85;
    }
    goto LABEL_115;
  }
LABEL_114:
  *(unsigned char *)(a1 + 311) = *(unsigned char *)(a2 + 311);
  if ((v39 & 0x10) == 0)
  {
LABEL_85:
    if ((v39 & 0x20) == 0) {
      goto LABEL_86;
    }
    goto LABEL_116;
  }
LABEL_115:
  *(unsigned char *)(a1 + 312) = *(unsigned char *)(a2 + 312);
  if ((v39 & 0x20) == 0)
  {
LABEL_86:
    if ((v39 & 0x40) == 0) {
      goto LABEL_87;
    }
LABEL_117:
    *(_DWORD *)(a1 + 316) = *(_DWORD *)(a2 + 316);
    if ((v39 & 0x80) == 0) {
      goto LABEL_89;
    }
    goto LABEL_88;
  }
LABEL_116:
  *(unsigned char *)(a1 + 313) = *(unsigned char *)(a2 + 313);
  if ((v39 & 0x40) != 0) {
    goto LABEL_117;
  }
LABEL_87:
  if ((v39 & 0x80) != 0) {
LABEL_88:
  }
    *(_DWORD *)(a1 + 32sub_1B4BC92E4(&a9, 0) = *(_DWORD *)(a2 + 320);
LABEL_89:
  *(_DWORD *)(a1 + 44) |= v39;
LABEL_90:
  if ((v39 & 0x100) != 0)
  {
    int v40 = *(_DWORD *)(a2 + 324);
    *(_DWORD *)(a1 + 44) |= 0x100u;
    *(_DWORD *)(a1 + 324) = v40;
  }
  return result;
}

void sub_1B4BDB8DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1B4BE62F0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B4BDB8F4(uint64_t a1)
{
  return sub_1B4BEBB6C(a1 + 16);
}

void *sub_1B4BDB8FC@<X0>(void *a1@<X8>)
{
  return sub_1B4BB8DC0(a1, "sentencepiece.TrainerSpec");
}

uint64_t sub_1B4BDB90C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F0D542B8;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = &unk_1F0D54358;
  sub_1B4BE67B4(a1 + 24, a2);
  *(void *)(a1 + 48) = 0;
  if (atomic_load_explicit(dword_1EC551120, memory_order_acquire)) {
    sub_1B4BF1D44(dword_1EC551120);
  }
  *(void *)(a1 + 56) = &qword_1E9D40A98;
  *(void *)(a1 + 64) = &qword_1E9D40A98;
  *(void *)(a1 + 72) = &qword_1E9D40A98;
  *(_DWORD *)(a1 + 8sub_1B4BC92E4(&a9, 0) = 16843008;
  return a1;
}

void sub_1B4BDB9B8(_Unwind_Exception *a1)
{
  sub_1B4BE6894(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1B4BDB9CC(uint64_t a1)
{
  return a1;
}

uint64_t *sub_1B4BDBA08(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = (void *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  if ((v2 & 1) == 0)
  {
    if (!v3) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if (*v3)
  {
LABEL_3:
    sub_1B4BE6194((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 1972);
    uint64_t v4 = sub_1B4BE61AC(v15, "CHECK failed: GetArena() == nullptr: ");
    sub_1B4BE62E8((uint64_t)&v14, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_1B4BE62F0((uint64_t)v15);
  }
LABEL_4:
  if (*(uint64_t **)(a1 + 56) != &qword_1E9D40A98)
  {
    uint64_t v5 = sub_1B4BD6D70((uint64_t *)(a1 + 56));
    uint64_t v6 = v5;
    if (*(char *)(v5 + 23) < 0) {
      operator delete(*(void **)v5);
    }
    MEMORY[0x1BA9929C0](v6, 0x1012C40EC159624);
  }
  unint64_t result = (uint64_t *)(a1 + 64);
  if (*(uint64_t **)(a1 + 64) != &qword_1E9D40A98)
  {
    uint64_t v8 = sub_1B4BD6D70(result);
    uint64_t v9 = v8;
    if (*(char *)(v8 + 23) < 0) {
      operator delete(*(void **)v8);
    }
    unint64_t result = (uint64_t *)MEMORY[0x1BA9929C0](v9, 0x1012C40EC159624);
  }
  uint64_t v11 = *(uint64_t **)(a1 + 72);
  int v10 = (uint64_t *)(a1 + 72);
  if (v11 != &qword_1E9D40A98)
  {
    uint64_t v12 = sub_1B4BD6D70(v10);
    uint64_t v13 = v12;
    if (*(char *)(v12 + 23) < 0) {
      operator delete(*(void **)v12);
    }
    return (uint64_t *)MEMORY[0x1BA9929C0](v13, 0x1012C40EC159624);
  }
  return result;
}

void sub_1B4BDBB58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1B4BE62F0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B4BDBB74(uint64_t a1)
{
  return sub_1B4BDB9CC(a1 - 16);
}

void sub_1B4BDBB7C(uint64_t a1)
{
  sub_1B4BDB9CC(a1);
  JUMPOUT(0x1BA9929C0);
}

void sub_1B4BDBBB4(uint64_t a1)
{
  sub_1B4BDB9CC(a1 - 16);
  JUMPOUT(0x1BA9929C0);
}

unsigned __int8 *sub_1B4BDBBF0(uint64_t a1)
{
  unint64_t result = sub_1B4BEA63C((unsigned __int8 *)(a1 + 24));
  int v3 = *(_DWORD *)(a1 + 48);
  if ((v3 & 7) != 0)
  {
    if ((v3 & 1) == 0)
    {
      if ((v3 & 2) == 0) {
        goto LABEL_4;
      }
LABEL_10:
      unint64_t v5 = *(void *)(a1 + 64) & 0xFFFFFFFFFFFFFFFELL;
      if (*(char *)(v5 + 23) < 0)
      {
        **(unsigned char **)unint64_t v5 = 0;
        *(void *)(v5 + 8) = 0;
        if ((v3 & 4) == 0) {
          goto LABEL_17;
        }
      }
      else
      {
        *(unsigned char *)unint64_t v5 = 0;
        *(unsigned char *)(v5 + 23) = 0;
        if ((v3 & 4) == 0) {
          goto LABEL_17;
        }
      }
      goto LABEL_14;
    }
    unint64_t v4 = *(void *)(a1 + 56) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v4 + 23) < 0)
    {
      **(unsigned char **)unint64_t v4 = 0;
      *(void *)(v4 + 8) = 0;
      if ((v3 & 2) != 0) {
        goto LABEL_10;
      }
    }
    else
    {
      *(unsigned char *)unint64_t v4 = 0;
      *(unsigned char *)(v4 + 23) = 0;
      if ((v3 & 2) != 0) {
        goto LABEL_10;
      }
    }
LABEL_4:
    if ((v3 & 4) == 0) {
      goto LABEL_17;
    }
LABEL_14:
    unint64_t v6 = *(void *)(a1 + 72) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v6 + 23) < 0)
    {
      **(unsigned char **)unint64_t v6 = 0;
      *(void *)(v6 + 8) = 0;
    }
    else
    {
      *(unsigned char *)unint64_t v6 = 0;
      *(unsigned char *)(v6 + 23) = 0;
    }
  }
LABEL_17:
  if ((v3 & 0x78) != 0) {
    *(_DWORD *)(a1 + 8sub_1B4BC92E4(&a9, 0) = 16843008;
  }
  *(_DWORD *)(a1 + 48) = 0;
  uint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    unint64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v8 + 31) < 0)
    {
      **(unsigned char **)(v8 + 8) = 0;
      *(void *)(v8 + 16) = 0;
    }
    else
    {
      *(unsigned char *)(v8 + 8) = 0;
      *(unsigned char *)(v8 + 31) = 0;
    }
  }
  return result;
}

uint64_t sub_1B4BDBD00(uint64_t a1, uint64_t a2, int32x2_t *a3)
{
  *(void *)uint64_t v42 = a2;
  int v5 = 0;
  if ((sub_1B4BD6E44((uint64_t)a3, (char **)v42, a3[11].i32[1]) & 1) == 0)
  {
    uint64_t v7 = (void *)(a1 + 8);
    while (1)
    {
      unint64_t v8 = (char *)(*(void *)v42 + 1);
      unsigned int v9 = **(unsigned char **)v42;
      if ((char)**(unsigned char **)v42 < 0)
      {
        unsigned int v10 = v9 + (*v8 << 7);
        unsigned int v9 = v10 - 128;
        if (*v8 < 0)
        {
          uint64_t v17 = sub_1B4BF37FC(*(uint64_t *)v42, v10 - 128);
          *(void *)uint64_t v42 = v17;
          if (!v17) {
            goto LABEL_67;
          }
          unint64_t v8 = (char *)v17;
          unsigned int v9 = v18;
          goto LABEL_8;
        }
        unint64_t v8 = (char *)(*(void *)v42 + 2);
      }
      *(void *)uint64_t v42 = v8;
LABEL_8:
      switch(v9 >> 3)
      {
        case 1u:
          if (v9 != 10) {
            goto LABEL_48;
          }
          *(_DWORD *)(a1 + 48) |= 1u;
          uint64_t v11 = *(void *)(a1 + 8);
          uint64_t v12 = (void *)(v11 & 0xFFFFFFFFFFFFFFFELL);
          if (v11) {
            uint64_t v12 = (void *)*v12;
          }
          uint64_t v13 = (uint64_t *)(a1 + 56);
          goto LABEL_44;
        case 2u:
          if (v9 != 18) {
            goto LABEL_48;
          }
          *(_DWORD *)(a1 + 48) |= 2u;
          uint64_t v19 = *(void *)(a1 + 8);
          uint64_t v12 = (void *)(v19 & 0xFFFFFFFFFFFFFFFELL);
          if (v19) {
            uint64_t v12 = (void *)*v12;
          }
          uint64_t v13 = (uint64_t *)(a1 + 64);
          goto LABEL_44;
        case 3u:
          if (v9 != 24) {
            goto LABEL_48;
          }
          v5 |= 0x10u;
          int v20 = v8 + 1;
          uint64_t v21 = *v8;
          if ((*v8 & 0x80000000) == 0) {
            goto LABEL_29;
          }
          int v22 = *v20;
          uint64_t v21 = v21 + (v22 << 7) - 128;
          if (v22 < 0)
          {
            uint64_t v36 = sub_1B4BF37B4((uint64_t)v8, v21);
            *(void *)uint64_t v42 = v36;
            *(unsigned char *)(a1 + 81) = v37 != 0;
            if (!v36) {
              goto LABEL_67;
            }
          }
          else
          {
            int v20 = v8 + 2;
LABEL_29:
            *(void *)uint64_t v42 = v20;
            *(unsigned char *)(a1 + 81) = v21 != 0;
          }
          goto LABEL_46;
        case 4u:
          if (v9 != 32) {
            goto LABEL_48;
          }
          v5 |= 0x20u;
          unsigned int v23 = v8 + 1;
          uint64_t v24 = *v8;
          if ((*v8 & 0x80000000) == 0) {
            goto LABEL_34;
          }
          int v25 = *v23;
          uint64_t v24 = v24 + (v25 << 7) - 128;
          if (v25 < 0)
          {
            uint64_t v38 = sub_1B4BF37B4((uint64_t)v8, v24);
            *(void *)uint64_t v42 = v38;
            *(unsigned char *)(a1 + 82) = v39 != 0;
            if (!v38) {
              goto LABEL_67;
            }
          }
          else
          {
            unsigned int v23 = v8 + 2;
LABEL_34:
            *(void *)uint64_t v42 = v23;
            *(unsigned char *)(a1 + 82) = v24 != 0;
          }
          goto LABEL_46;
        case 5u:
          if (v9 != 40) {
            goto LABEL_48;
          }
          v5 |= 0x40u;
          uint64_t v26 = v8 + 1;
          uint64_t v27 = *v8;
          if ((*v8 & 0x80000000) == 0) {
            goto LABEL_39;
          }
          int v28 = *v26;
          uint64_t v27 = v27 + (v28 << 7) - 128;
          if (v28 < 0)
          {
            uint64_t v40 = sub_1B4BF37B4((uint64_t)v8, v27);
            *(void *)uint64_t v42 = v40;
            *(unsigned char *)(a1 + 83) = v41 != 0;
            if (!v40) {
              goto LABEL_67;
            }
          }
          else
          {
            uint64_t v26 = v8 + 2;
LABEL_39:
            *(void *)uint64_t v42 = v26;
            *(unsigned char *)(a1 + 83) = v27 != 0;
          }
          goto LABEL_46;
        case 6u:
          if (v9 != 50) {
            goto LABEL_48;
          }
          *(_DWORD *)(a1 + 48) |= 4u;
          uint64_t v29 = *(void *)(a1 + 8);
          uint64_t v12 = (void *)(v29 & 0xFFFFFFFFFFFFFFFELL);
          if (v29) {
            uint64_t v12 = (void *)*v12;
          }
          uint64_t v13 = (uint64_t *)(a1 + 72);
LABEL_44:
          uint64_t v30 = (std::string *)sub_1B4BE4FF0(v13, (uint64_t)v12);
          uint64_t v31 = (void *)sub_1B4BF38B0(v30, *(char **)v42, (uint64_t)a3);
          goto LABEL_45;
        default:
          if (v9 >> 3 == 200 && v9 == 64)
          {
            v5 |= 8u;
            char v14 = v8 + 1;
            uint64_t v15 = *v8;
            if ((*v8 & 0x80000000) == 0) {
              goto LABEL_18;
            }
            int v16 = *v14;
            uint64_t v15 = v15 + (v16 << 7) - 128;
            if ((v16 & 0x80000000) == 0)
            {
              char v14 = v8 + 2;
LABEL_18:
              *(void *)uint64_t v42 = v14;
              *(unsigned char *)(a1 + 8sub_1B4BC92E4(&a9, 0) = v15 != 0;
              goto LABEL_46;
            }
            uint64_t v34 = sub_1B4BF37B4((uint64_t)v8, v15);
            *(void *)uint64_t v42 = v34;
            *(unsigned char *)(a1 + 8sub_1B4BC92E4(&a9, 0) = v35 != 0;
            if (!v34) {
              goto LABEL_67;
            }
          }
          else
          {
LABEL_48:
            if (v9) {
              BOOL v32 = (v9 & 7) == 4;
            }
            else {
              BOOL v32 = 1;
            }
            if (v32)
            {
              a3[10].i32[0] = v9 - 1;
              goto LABEL_2;
            }
            if (v9 < 0x648)
            {
              if (*v7)
              {
                uint64_t v33 = (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFELL) + 8);
              }
              else
              {
                uint64_t v33 = (std::string *)sub_1B4BD6F84((unint64_t *)(a1 + 8));
                unint64_t v8 = *(char **)v42;
              }
              uint64_t v31 = sub_1B4BF3D6C(v9, v33, v8, a3);
            }
            else
            {
              uint64_t v31 = sub_1B4BEBF0C((uint64_t *)(a1 + 24), v9, (unsigned __int8 *)v8, (uint64_t)&unk_1E9D408F0, (unint64_t *)(a1 + 8), a3);
            }
LABEL_45:
            *(void *)uint64_t v42 = v31;
            if (!v31)
            {
LABEL_67:
              *(void *)uint64_t v42 = 0;
              goto LABEL_2;
            }
          }
LABEL_46:
          if (sub_1B4BD6E44((uint64_t)a3, (char **)v42, a3[11].i32[1])) {
            goto LABEL_2;
          }
          break;
      }
    }
  }
LABEL_2:
  *(_DWORD *)(a1 + 48) |= v5;
  return *(void *)v42;
}

char *sub_1B4BDC124(uint64_t a1, char *a2, unint64_t *a3)
{
  unint64_t v4 = a2;
  int v6 = *(_DWORD *)(a1 + 48);
  if (v6)
  {
    unint64_t v4 = sub_1B4BD4F64(a3, 1, (const void **)(*(void *)(a1 + 56) & 0xFFFFFFFFFFFFFFFELL), a2);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 0x10) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  unint64_t v4 = sub_1B4BD4F64(a3, 2, (const void **)(*(void *)(a1 + 64) & 0xFFFFFFFFFFFFFFFELL), v4);
  if ((v6 & 0x10) == 0)
  {
LABEL_4:
    if ((v6 & 0x20) == 0) {
      goto LABEL_5;
    }
    goto LABEL_14;
  }
LABEL_11:
  if (*a3 <= (unint64_t)v4) {
    unint64_t v4 = sub_1B4BE5708((uint64_t)a3, v4);
  }
  char v7 = *(unsigned char *)(a1 + 81);
  char *v4 = 24;
  v4[1] = v7;
  v4 += 2;
  if ((v6 & 0x20) == 0)
  {
LABEL_5:
    if ((v6 & 0x40) == 0) {
      goto LABEL_6;
    }
    goto LABEL_17;
  }
LABEL_14:
  if (*a3 <= (unint64_t)v4) {
    unint64_t v4 = sub_1B4BE5708((uint64_t)a3, v4);
  }
  char v8 = *(unsigned char *)(a1 + 82);
  char *v4 = 32;
  v4[1] = v8;
  v4 += 2;
  if ((v6 & 0x40) == 0)
  {
LABEL_6:
    if ((v6 & 4) == 0) {
      goto LABEL_7;
    }
    goto LABEL_20;
  }
LABEL_17:
  if (*a3 <= (unint64_t)v4) {
    unint64_t v4 = sub_1B4BE5708((uint64_t)a3, v4);
  }
  char v9 = *(unsigned char *)(a1 + 83);
  char *v4 = 40;
  v4[1] = v9;
  v4 += 2;
  if ((v6 & 4) == 0)
  {
LABEL_7:
    if ((v6 & 8) == 0) {
      goto LABEL_24;
    }
    goto LABEL_21;
  }
LABEL_20:
  unint64_t v4 = sub_1B4BD4F64(a3, 6, (const void **)(*(void *)(a1 + 72) & 0xFFFFFFFFFFFFFFFELL), v4);
  if ((v6 & 8) == 0) {
    goto LABEL_24;
  }
LABEL_21:
  if (*a3 <= (unint64_t)v4) {
    unint64_t v4 = sub_1B4BE5708((uint64_t)a3, v4);
  }
  char v10 = *(unsigned char *)(a1 + 80);
  *(_WORD *)unint64_t v4 = 3264;
  v4[2] = v10;
  v4 += 3;
LABEL_24:
  uint64_t v11 = sub_1B4BECD04(a1 + 24, 201, 0x20000000, v4, (uint64_t *)a3);
  uint64_t v12 = v11;
  uint64_t v13 = *(void *)(a1 + 8);
  if ((v13 & 1) == 0) {
    return v12;
  }
  unint64_t v15 = v13 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v15 + 31) < 0)
  {
    int v16 = *(void **)(v15 + 8);
    uint64_t v17 = *(void *)(v15 + 16);
  }
  else
  {
    int v16 = (void *)(v15 + 8);
    LODWORD(v17) = *(unsigned __int8 *)(v15 + 31);
  }
  if ((uint64_t)(*a3 - (void)v11) >= (int)v17)
  {
    uint64_t v18 = (int)v17;
    memcpy(v11, v16, (int)v17);
    v12 += v18;
    return v12;
  }
  return sub_1B4BE581C((uint64_t *)a3, (char *)v16, v17, (unint64_t)v11);
}

uint64_t sub_1B4BDC338(uint64_t a1)
{
  uint64_t result = sub_1B4BEFA38(a1 + 24);
  int v3 = *(_DWORD *)(a1 + 48);
  if ((v3 & 0x7F) == 0) {
    goto LABEL_17;
  }
  if ((v3 & 1) == 0)
  {
    if ((v3 & 2) == 0) {
      goto LABEL_4;
    }
LABEL_22:
    unint64_t v12 = *(void *)(a1 + 64) & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v13 = *(unsigned __int8 *)(v12 + 23);
    uint64_t v14 = *(void *)(v12 + 8);
    if ((v13 & 0x80u) == 0) {
      uint64_t v14 = v13;
    }
    result += v14 + ((9 * (__clz(v14 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v3 & 4) == 0) {
      goto LABEL_8;
    }
    goto LABEL_5;
  }
  unint64_t v9 = *(void *)(a1 + 56) & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v10 = *(unsigned __int8 *)(v9 + 23);
  uint64_t v11 = *(void *)(v9 + 8);
  if ((v10 & 0x80u) == 0) {
    uint64_t v11 = v10;
  }
  result += v11 + ((9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v3 & 2) != 0) {
    goto LABEL_22;
  }
LABEL_4:
  if ((v3 & 4) != 0)
  {
LABEL_5:
    unint64_t v4 = *(void *)(a1 + 72) & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v5 = *(unsigned __int8 *)(v4 + 23);
    uint64_t v6 = *(void *)(v4 + 8);
    if ((v5 & 0x80u) == 0) {
      uint64_t v6 = v5;
    }
    result += v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_8:
  uint64_t v7 = result + 3;
  if ((v3 & 8) == 0) {
    uint64_t v7 = result;
  }
  if ((v3 & 0x10) != 0) {
    v7 += 2;
  }
  if ((v3 & 0x20) != 0) {
    v7 += 2;
  }
  if ((v3 & 0x40) != 0) {
    uint64_t result = v7 + 2;
  }
  else {
    uint64_t result = v7;
  }
LABEL_17:
  uint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    unint64_t v15 = v8 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v15 + 31) < 0) {
      uint64_t v16 = *(void *)(v15 + 16);
    }
    else {
      uint64_t v16 = *(unsigned __int8 *)(v15 + 31);
    }
    result += v16;
  }
  *(_DWORD *)(a1 + 52) = result;
  return result;
}

void sub_1B4BDC4A0(uint64_t a1, void *lpsrc)
{
  if (!__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1F0D537C8, (const struct __class_type_info *)&unk_1F0D531A8, 0))sub_1B4BD7788(); {
  sub_1B4BDC528(a1, (uint64_t)lpsrc);
  }
}

void sub_1B4BDC528(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    sub_1B4BE6194((uint64_t)v24, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 2246);
    unint64_t v4 = sub_1B4BE61AC(v24, "CHECK failed: (&from) != (this): ");
    sub_1B4BE62E8((uint64_t)&v23, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_1B4BE62F0((uint64_t)v24);
  }
  sub_1B4BEA6DC(a1 + 24, a2 + 24);
  uint64_t v5 = *(void *)(a2 + 8);
  if (v5)
  {
    unint64_t v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v7 = (v5 & 0xFFFFFFFFFFFFFFFELL) + 8;
    uint64_t v8 = *(void *)(a1 + 8);
    if (v8) {
      unint64_t v9 = (std::string *)((v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
    }
    else {
      unint64_t v9 = (std::string *)sub_1B4BD6F84((unint64_t *)(a1 + 8));
    }
    int v10 = *(char *)(v6 + 31);
    if (v10 >= 0) {
      uint64_t v11 = (const std::string::value_type *)v7;
    }
    else {
      uint64_t v11 = *(const std::string::value_type **)(v6 + 8);
    }
    if (v10 >= 0) {
      std::string::size_type v12 = *(unsigned __int8 *)(v6 + 31);
    }
    else {
      std::string::size_type v12 = *(void *)(v6 + 16);
    }
    std::string::append(v9, v11, v12);
  }
  int v13 = *(_DWORD *)(a2 + 48);
  if ((v13 & 0x7F) != 0)
  {
    if (v13)
    {
      uint64_t v14 = (long long *)(*(void *)(a2 + 56) & 0xFFFFFFFFFFFFFFFELL);
      *(_DWORD *)(a1 + 48) |= 1u;
      uint64_t v15 = *(void *)(a1 + 8);
      uint64_t v16 = (void *)(v15 & 0xFFFFFFFFFFFFFFFELL);
      if (v15) {
        uint64_t v16 = (void *)*v16;
      }
      sub_1B4BE4FB8((uint64_t *)(a1 + 56), v14, (uint64_t)v16);
      if ((v13 & 2) == 0)
      {
LABEL_16:
        if ((v13 & 4) == 0) {
          goto LABEL_17;
        }
        goto LABEL_30;
      }
    }
    else if ((v13 & 2) == 0)
    {
      goto LABEL_16;
    }
    uint64_t v17 = (long long *)(*(void *)(a2 + 64) & 0xFFFFFFFFFFFFFFFELL);
    *(_DWORD *)(a1 + 48) |= 2u;
    uint64_t v18 = *(void *)(a1 + 8);
    uint64_t v19 = (void *)(v18 & 0xFFFFFFFFFFFFFFFELL);
    if (v18) {
      uint64_t v19 = (void *)*v19;
    }
    sub_1B4BE4FB8((uint64_t *)(a1 + 64), v17, (uint64_t)v19);
    if ((v13 & 4) == 0)
    {
LABEL_17:
      if ((v13 & 8) == 0) {
        goto LABEL_18;
      }
      goto LABEL_33;
    }
LABEL_30:
    int v20 = (long long *)(*(void *)(a2 + 72) & 0xFFFFFFFFFFFFFFFELL);
    *(_DWORD *)(a1 + 48) |= 4u;
    uint64_t v21 = *(void *)(a1 + 8);
    int v22 = (void *)(v21 & 0xFFFFFFFFFFFFFFFELL);
    if (v21) {
      int v22 = (void *)*v22;
    }
    sub_1B4BE4FB8((uint64_t *)(a1 + 72), v20, (uint64_t)v22);
    if ((v13 & 8) == 0)
    {
LABEL_18:
      if ((v13 & 0x10) == 0) {
        goto LABEL_19;
      }
      goto LABEL_34;
    }
LABEL_33:
    *(unsigned char *)(a1 + 8sub_1B4BC92E4(&a9, 0) = *(unsigned char *)(a2 + 80);
    if ((v13 & 0x10) == 0)
    {
LABEL_19:
      if ((v13 & 0x20) == 0) {
        goto LABEL_20;
      }
      goto LABEL_35;
    }
LABEL_34:
    *(unsigned char *)(a1 + 81) = *(unsigned char *)(a2 + 81);
    if ((v13 & 0x20) == 0)
    {
LABEL_20:
      if ((v13 & 0x40) == 0)
      {
LABEL_22:
        *(_DWORD *)(a1 + 48) |= v13;
        return;
      }
LABEL_21:
      *(unsigned char *)(a1 + 83) = *(unsigned char *)(a2 + 83);
      goto LABEL_22;
    }
LABEL_35:
    *(unsigned char *)(a1 + 82) = *(unsigned char *)(a2 + 82);
    if ((v13 & 0x40) == 0) {
      goto LABEL_22;
    }
    goto LABEL_21;
  }
}

void sub_1B4BDC6F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1B4BE62F0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B4BDC70C(uint64_t a1)
{
  return sub_1B4BEBB6C(a1 + 24);
}

void *sub_1B4BDC714@<X0>(void *a1@<X8>)
{
  return sub_1B4BB8DC0(a1, "sentencepiece.NormalizerSpec");
}

void *sub_1B4BDC724(void *a1, uint64_t a2)
{
  *a1 = &unk_1F0D54418;
  a1[1] = a2;
  a1[2] = 0;
  if (atomic_load_explicit(dword_1EC551138, memory_order_acquire)) {
    sub_1B4BF1D44(dword_1EC551138);
  }
  a1[3] = &qword_1E9D40A98;
  a1[4] = &qword_1E9D40A98;
  return a1;
}

uint64_t sub_1B4BDC794(uint64_t a1)
{
  return a1;
}

uint64_t *sub_1B4BDC7C8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = (void *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  if ((v2 & 1) == 0)
  {
    if (!v3) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if (*v3)
  {
LABEL_3:
    sub_1B4BE6194((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 2362);
    unint64_t v4 = sub_1B4BE61AC(v13, "CHECK failed: GetArena() == nullptr: ");
    sub_1B4BE62E8((uint64_t)&v12, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_1B4BE62F0((uint64_t)v13);
  }
LABEL_4:
  uint64_t result = (uint64_t *)(a1 + 24);
  if (*(uint64_t **)(a1 + 24) != &qword_1E9D40A98)
  {
    uint64_t v6 = sub_1B4BD6D70(result);
    uint64_t v7 = v6;
    if (*(char *)(v6 + 23) < 0) {
      operator delete(*(void **)v6);
    }
    uint64_t result = (uint64_t *)MEMORY[0x1BA9929C0](v7, 0x1012C40EC159624);
  }
  unint64_t v9 = *(uint64_t **)(a1 + 32);
  uint64_t v8 = (uint64_t *)(a1 + 32);
  if (v9 != &qword_1E9D40A98)
  {
    uint64_t v10 = sub_1B4BD6D70(v8);
    uint64_t v11 = v10;
    if (*(char *)(v10 + 23) < 0) {
      operator delete(*(void **)v10);
    }
    return (uint64_t *)MEMORY[0x1BA9929C0](v11, 0x1012C40EC159624);
  }
  return result;
}

void sub_1B4BDC8D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1B4BE62F0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1B4BDC8F4(uint64_t a1)
{
  sub_1B4BDC794(a1);
  JUMPOUT(0x1BA9929C0);
}

uint64_t sub_1B4BDC92C(uint64_t result)
{
  int v1 = *(_DWORD *)(result + 16);
  if ((v1 & 3) != 0)
  {
    if (v1)
    {
      unint64_t v2 = *(void *)(result + 24) & 0xFFFFFFFFFFFFFFFELL;
      if (*(char *)(v2 + 23) < 0)
      {
        **(unsigned char **)unint64_t v2 = 0;
        *(void *)(v2 + 8) = 0;
        if ((v1 & 2) == 0) {
          goto LABEL_11;
        }
        goto LABEL_6;
      }
      *(unsigned char *)unint64_t v2 = 0;
      *(unsigned char *)(v2 + 23) = 0;
    }
    if ((v1 & 2) == 0) {
      goto LABEL_11;
    }
LABEL_6:
    unint64_t v3 = *(void *)(result + 32) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v3 + 23) < 0)
    {
      **(unsigned char **)unint64_t v3 = 0;
      *(void *)(v3 + 8) = 0;
    }
    else
    {
      *(unsigned char *)unint64_t v3 = 0;
      *(unsigned char *)(v3 + 23) = 0;
    }
  }
LABEL_11:
  *(_DWORD *)(result + 16) = 0;
  uint64_t v4 = *(void *)(result + 8);
  if (v4)
  {
    unint64_t v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v5 + 31) < 0)
    {
      **(unsigned char **)(v5 + 8) = 0;
      *(void *)(v5 + 16) = 0;
    }
    else
    {
      *(unsigned char *)(v5 + 8) = 0;
      *(unsigned char *)(v5 + 31) = 0;
    }
  }
  return result;
}

uint64_t sub_1B4BDC9C8(uint64_t a1, uint64_t a2, int32x2_t *a3)
{
  *(void *)uint64_t v21 = a2;
  if ((sub_1B4BD6E44((uint64_t)a3, (char **)v21, a3[11].i32[1]) & 1) == 0)
  {
    uint64_t v6 = (void *)(a1 + 8);
    while (1)
    {
      uint64_t v7 = (char *)(*(void *)v21 + 1);
      unsigned int v8 = **(unsigned char **)v21;
      if (((char)**(unsigned char **)v21 & 0x80000000) == 0) {
        goto LABEL_7;
      }
      unsigned int v9 = v8 + (*v7 << 7);
      unsigned int v8 = v9 - 128;
      if ((*v7 & 0x80000000) == 0) {
        break;
      }
      uint64_t v19 = sub_1B4BF37FC(*(uint64_t *)v21, v9 - 128);
      *(void *)uint64_t v21 = v19;
      if (!v19)
      {
LABEL_35:
        *(void *)uint64_t v21 = 0;
        return *(void *)v21;
      }
      uint64_t v7 = (char *)v19;
      unsigned int v8 = v20;
LABEL_8:
      if (v8 >> 3 == 2)
      {
        if (v8 == 18)
        {
          *(_DWORD *)(a1 + 16) |= 2u;
          uint64_t v14 = *(void *)(a1 + 8);
          uint64_t v15 = (void *)(v14 & 0xFFFFFFFFFFFFFFFELL);
          if (v14) {
            uint64_t v15 = (void *)*v15;
          }
          uint64_t v16 = (uint64_t *)(a1 + 32);
          goto LABEL_27;
        }
      }
      else if (v8 >> 3 == 1 && v8 == 10)
      {
        *(_DWORD *)(a1 + 16) |= 1u;
        uint64_t v17 = *(void *)(a1 + 8);
        uint64_t v15 = (void *)(v17 & 0xFFFFFFFFFFFFFFFELL);
        if (v17) {
          uint64_t v15 = (void *)*v15;
        }
        uint64_t v16 = (uint64_t *)(a1 + 24);
LABEL_27:
        uint64_t v18 = (std::string *)sub_1B4BE4FF0(v16, (uint64_t)v15);
        int v13 = (void *)sub_1B4BF38B0(v18, *(char **)v21, (uint64_t)a3);
        goto LABEL_28;
      }
      if (v8) {
        BOOL v11 = (v8 & 7) == 4;
      }
      else {
        BOOL v11 = 1;
      }
      if (v11)
      {
        a3[10].i32[0] = v8 - 1;
        return *(void *)v21;
      }
      if (*v6)
      {
        char v12 = (std::string *)((*v6 & 0xFFFFFFFFFFFFFFFELL) + 8);
      }
      else
      {
        char v12 = (std::string *)sub_1B4BD6F84((unint64_t *)(a1 + 8));
        uint64_t v7 = *(char **)v21;
      }
      int v13 = sub_1B4BF3D6C(v8, v12, v7, a3);
LABEL_28:
      *(void *)uint64_t v21 = v13;
      if (!v13) {
        goto LABEL_35;
      }
      if (sub_1B4BD6E44((uint64_t)a3, (char **)v21, a3[11].i32[1])) {
        return *(void *)v21;
      }
    }
    uint64_t v7 = (char *)(*(void *)v21 + 2);
LABEL_7:
    *(void *)uint64_t v21 = v7;
    goto LABEL_8;
  }
  return *(void *)v21;
}

char *sub_1B4BDCB74(uint64_t a1, char *__dst, unint64_t *a3)
{
  uint64_t v4 = __dst;
  int v6 = *(_DWORD *)(a1 + 16);
  if (v6) {
    uint64_t v4 = sub_1B4BD4F64(a3, 1, (const void **)(*(void *)(a1 + 24) & 0xFFFFFFFFFFFFFFFELL), __dst);
  }
  if ((v6 & 2) != 0) {
    uint64_t v4 = sub_1B4BD4F64(a3, 2, (const void **)(*(void *)(a1 + 32) & 0xFFFFFFFFFFFFFFFELL), v4);
  }
  uint64_t v7 = *(void *)(a1 + 8);
  if ((v7 & 1) == 0) {
    return v4;
  }
  unint64_t v9 = v7 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v9 + 31) < 0)
  {
    uint64_t v10 = *(void **)(v9 + 8);
    uint64_t v11 = *(void *)(v9 + 16);
  }
  else
  {
    uint64_t v10 = (void *)(v9 + 8);
    LODWORD(v11) = *(unsigned __int8 *)(v9 + 31);
  }
  if ((uint64_t)(*a3 - (void)v4) >= (int)v11)
  {
    uint64_t v12 = (int)v11;
    memcpy(v4, v10, (int)v11);
    v4 += v12;
    return v4;
  }
  return sub_1B4BE581C((uint64_t *)a3, (char *)v10, v11, (unint64_t)v4);
}

uint64_t sub_1B4BDCC60(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 16);
  if ((v1 & 3) == 0)
  {
    uint64_t v2 = 0;
    goto LABEL_12;
  }
  if ((v1 & 1) == 0)
  {
    uint64_t v2 = 0;
    if ((v1 & 2) == 0) {
      goto LABEL_12;
    }
    goto LABEL_9;
  }
  unint64_t v3 = *(void *)(a1 + 24) & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v4 = *(unsigned __int8 *)(v3 + 23);
  uint64_t v5 = *(void *)(v3 + 8);
  if ((v4 & 0x80u) == 0) {
    uint64_t v5 = v4;
  }
  uint64_t v2 = v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v1 & 2) != 0)
  {
LABEL_9:
    unint64_t v6 = *(void *)(a1 + 32) & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v7 = *(unsigned __int8 *)(v6 + 23);
    uint64_t v8 = *(void *)(v6 + 8);
    if ((v7 & 0x80u) == 0) {
      uint64_t v8 = v7;
    }
    v2 += v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_12:
  uint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    unint64_t v11 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v11 + 31) < 0) {
      uint64_t v12 = *(void *)(v11 + 16);
    }
    else {
      uint64_t v12 = *(unsigned __int8 *)(v11 + 31);
    }
    v2 += v12;
  }
  *(_DWORD *)(a1 + 2sub_1B4BC92E4(&a9, 0) = v2;
  return v2;
}

unint64_t sub_1B4BDCD38(unint64_t a1, void *lpsrc)
{
  if (!__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1F0D537C8, (const struct __class_type_info *)&unk_1F0D53208, 0))sub_1B4BD7788(); {
  return sub_1B4BDCDC0(a1, (uint64_t)lpsrc);
  }
}

unint64_t sub_1B4BDCDC0(unint64_t result, uint64_t a2)
{
  unint64_t v3 = result;
  if (a2 == result)
  {
    sub_1B4BE6194((uint64_t)v21, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 2516);
    uint64_t v4 = sub_1B4BE61AC(v21, "CHECK failed: (&from) != (this): ");
    sub_1B4BE62E8((uint64_t)&v20, (const char **)&v4->__r_.__value_.__l.__data_);
    uint64_t result = sub_1B4BE62F0((uint64_t)v21);
  }
  uint64_t v5 = *(void *)(a2 + 8);
  if (v5)
  {
    unint64_t v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v7 = (v5 & 0xFFFFFFFFFFFFFFFELL) + 8;
    uint64_t v8 = *(void *)(v3 + 8);
    if (v8) {
      uint64_t v9 = (std::string *)((v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
    }
    else {
      uint64_t v9 = (std::string *)sub_1B4BD6F84((unint64_t *)(v3 + 8));
    }
    int v10 = *(char *)(v6 + 31);
    if (v10 >= 0) {
      unint64_t v11 = (const std::string::value_type *)v7;
    }
    else {
      unint64_t v11 = *(const std::string::value_type **)(v6 + 8);
    }
    if (v10 >= 0) {
      std::string::size_type v12 = *(unsigned __int8 *)(v6 + 31);
    }
    else {
      std::string::size_type v12 = *(void *)(v6 + 16);
    }
    uint64_t result = (unint64_t)std::string::append(v9, v11, v12);
  }
  int v13 = *(_DWORD *)(a2 + 16);
  if ((v13 & 3) != 0)
  {
    if (v13)
    {
      uint64_t v14 = (long long *)(*(void *)(a2 + 24) & 0xFFFFFFFFFFFFFFFELL);
      *(_DWORD *)(v3 + 16) |= 1u;
      uint64_t v15 = *(void *)(v3 + 8);
      uint64_t v16 = (void *)(v15 & 0xFFFFFFFFFFFFFFFELL);
      if (v15) {
        uint64_t v16 = (void *)*v16;
      }
      uint64_t result = sub_1B4BE4FB8((uint64_t *)(v3 + 24), v14, (uint64_t)v16);
    }
    if ((v13 & 2) != 0)
    {
      uint64_t v17 = (long long *)(*(void *)(a2 + 32) & 0xFFFFFFFFFFFFFFFELL);
      *(_DWORD *)(v3 + 16) |= 2u;
      uint64_t v18 = *(void *)(v3 + 8);
      uint64_t v19 = (void *)(v18 & 0xFFFFFFFFFFFFFFFELL);
      if (v18) {
        uint64_t v19 = (void *)*v19;
      }
      return sub_1B4BE4FB8((uint64_t *)(v3 + 32), v17, (uint64_t)v19);
    }
  }
  return result;
}

void sub_1B4BDCEF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1B4BE62F0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B4BDCF0C()
{
  return 1;
}

void *sub_1B4BDCF14@<X0>(void *a1@<X8>)
{
  return sub_1B4BB8DC0(a1, "sentencepiece.SelfTestData.Sample");
}

uint64_t sub_1B4BDCF24(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F0D54148;
  *(void *)(a1 + 8) = a2;
  sub_1B4BE67B4(a1 + 16, a2);
  *(void *)(a1 + 4sub_1B4BC92E4(&a9, 0) = a2;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  if (atomic_load_explicit(dword_1EC551150, memory_order_acquire)) {
    sub_1B4BF1D44(dword_1EC551150);
  }
  return a1;
}

void sub_1B4BDCFAC(_Unwind_Exception *a1)
{
  sub_1B4BE0B9C(v2);
  sub_1B4BE6894(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1B4BDCFC8(uint64_t a1)
{
  unint64_t v3 = (uint64_t *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v4 = (void *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  if (v2)
  {
    if (!*v4) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if (v4)
  {
LABEL_3:
    sub_1B4BE6194((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 2589);
    uint64_t v5 = sub_1B4BE61AC(v8, "CHECK failed: GetArena() == nullptr: ");
    sub_1B4BE62E8((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_1B4BE62F0((uint64_t)v8);
  }
LABEL_4:
  sub_1B4BD47E4(v3);
  sub_1B4BE0B9C((uint64_t *)(a1 + 40));
  sub_1B4BE6894(a1 + 16);
  return a1;
}

void sub_1B4BDD068(void *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1B4BE62F0((uint64_t)va);
  sub_1B4BB21F0(a1);
}

void sub_1B4BDD08C(uint64_t a1)
{
  sub_1B4BDCFC8(a1);
  JUMPOUT(0x1BA9929C0);
}

uint64_t sub_1B4BDD0C4(uint64_t a1)
{
  sub_1B4BEA63C((unsigned __int8 *)(a1 + 16));
  uint64_t result = sub_1B4BE0814(a1 + 40);
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3)
  {
    unint64_t v4 = v3 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v4 + 31) < 0)
    {
      **(unsigned char **)(v4 + 8) = 0;
      *(void *)(v4 + 16) = 0;
    }
    else
    {
      *(unsigned char *)(v4 + 8) = 0;
      *(unsigned char *)(v4 + 31) = 0;
    }
  }
  return result;
}

char *sub_1B4BDD120(uint64_t a1, char *a2, int32x2_t *a3)
{
  char v23 = a2;
  if ((sub_1B4BD6E44((uint64_t)a3, &v23, a3[11].i32[1]) & 1) == 0)
  {
    uint64_t v5 = (void *)(a1 + 8);
    while (1)
    {
      unint64_t v6 = v23 + 1;
      unsigned int v7 = *v23;
      if ((*v23 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      unsigned int v8 = v7 + (*v6 << 7);
      unsigned int v7 = v8 - 128;
      if ((*v6 & 0x80000000) == 0) {
        break;
      }
      char v20 = (char *)sub_1B4BF37FC((uint64_t)v23, v8 - 128);
      char v23 = v20;
      if (!v20) {
        return 0;
      }
      unint64_t v6 = v20;
      unsigned int v7 = v21;
LABEL_7:
      if (v7 == 10)
      {
        unint64_t v11 = v6 - 1;
        while (1)
        {
          std::string::size_type v12 = (unsigned __int8 *)(v11 + 1);
          char v23 = v11 + 1;
          int v13 = *(int **)(a1 + 56);
          if (!v13) {
            break;
          }
          uint64_t v14 = *(int *)(a1 + 48);
          int v15 = *v13;
          if ((int)v14 >= *v13)
          {
            if (v15 == *(_DWORD *)(a1 + 52))
            {
LABEL_20:
              sub_1B4BF8BEC(a1 + 40, v15 + 1);
              int v13 = *(int **)(a1 + 56);
              int v15 = *v13;
            }
            int *v13 = v15 + 1;
            uint64_t v16 = sub_1B4BDF954(*(void *)(a1 + 40));
            uint64_t v17 = *(void *)(a1 + 56);
            uint64_t v18 = *(int *)(a1 + 48);
            *(_DWORD *)(a1 + 48) = v18 + 1;
            *(void *)(v17 + 8 * v18 + 8) = v16;
            std::string::size_type v12 = (unsigned __int8 *)v23;
            goto LABEL_22;
          }
          *(_DWORD *)(a1 + 48) = v14 + 1;
          uint64_t v16 = *(void **)&v13[2 * v14 + 2];
LABEL_22:
          unint64_t v11 = (char *)sub_1B4BDD338(a3, (uint64_t)v16, v12);
          char v23 = v11;
          if (!v11) {
            return 0;
          }
          if (*(void *)a3 <= (unint64_t)v11 || *v11 != 10) {
            goto LABEL_30;
          }
        }
        int v15 = *(_DWORD *)(a1 + 52);
        goto LABEL_20;
      }
      if (v7) {
        BOOL v9 = (v7 & 7) == 4;
      }
      else {
        BOOL v9 = 1;
      }
      if (v9)
      {
        a3[10].i32[0] = v7 - 1;
        return v23;
      }
      if (v7 < 0x640)
      {
        if (*v5)
        {
          uint64_t v19 = (std::string *)((*v5 & 0xFFFFFFFFFFFFFFFELL) + 8);
        }
        else
        {
          uint64_t v19 = (std::string *)sub_1B4BD6F84((unint64_t *)(a1 + 8));
          unint64_t v6 = v23;
        }
        int v10 = sub_1B4BF3D6C(v7, v19, v6, a3);
      }
      else
      {
        int v10 = sub_1B4BEBF0C((uint64_t *)(a1 + 16), v7, (unsigned __int8 *)v6, (uint64_t)&unk_1E9D408A8, (unint64_t *)(a1 + 8), a3);
      }
      char v23 = (char *)v10;
      if (!v10) {
        return 0;
      }
LABEL_30:
      if (sub_1B4BD6E44((uint64_t)a3, &v23, a3[11].i32[1])) {
        return v23;
      }
    }
    unint64_t v6 = v23 + 2;
LABEL_6:
    char v23 = v6;
    goto LABEL_7;
  }
  return v23;
}

uint64_t sub_1B4BDD338(int32x2_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  int v6 = (char)*a3;
  unsigned int v7 = *a3;
  if (v6 < 0)
  {
    uint64_t result = sub_1B4BF3840((uint64_t)a3, v7);
    if (!result) {
      return result;
    }
    uint64_t v8 = result;
    unsigned int v7 = v10;
  }
  else
  {
    uint64_t v8 = (uint64_t)(a3 + 1);
  }
  int v11 = sub_1B4BD72B0((uint64_t)a1, v8, v7);
  int v12 = a1[11].i32[0];
  BOOL v13 = __OFSUB__(v12--, 1);
  a1[11].i32[0] = v12;
  if (v12 < 0 != v13) {
    return 0;
  }
  int v14 = v11;
  uint64_t result = sub_1B4BDC9C8(a2, v8, a1);
  if (!result) {
    return result;
  }
  ++a1[11].i32[0];
  if (a1[10].i32[0]) {
    return 0;
  }
  int v15 = a1[3].i32[1] + v14;
  a1[3].i32[1] = v15;
  *a1 = (int32x2_t)(*(void *)&a1[1] + (v15 & (v15 >> 31)));
  return result;
}

char *sub_1B4BDD400(uint64_t a1, char *a2, unint64_t *a3)
{
  int v6 = *(_DWORD *)(a1 + 48);
  if (v6)
  {
    for (int i = 0; i != v6; ++i)
    {
      if (*a3 <= (unint64_t)a2) {
        a2 = sub_1B4BE5708((uint64_t)a3, a2);
      }
      uint64_t v8 = sub_1B4BE0590(a1 + 40, i);
      *a2 = 10;
      unsigned int v9 = *(_DWORD *)(v8 + 20);
      if (v9 > 0x7F)
      {
        a2[1] = v9 | 0x80;
        unsigned int v11 = v9 >> 7;
        if (v9 >> 14)
        {
          unsigned int v10 = a2 + 3;
          do
          {
            *(v10 - 1) = v11 | 0x80;
            unsigned int v12 = v11 >> 7;
            ++v10;
            unsigned int v13 = v11 >> 14;
            v11 >>= 7;
          }
          while (v13);
          *(v10 - 1) = v12;
        }
        else
        {
          a2[2] = v11;
          unsigned int v10 = a2 + 3;
        }
      }
      else
      {
        a2[1] = v9;
        unsigned int v10 = a2 + 2;
      }
      a2 = sub_1B4BDCB74(v8, v10, a3);
    }
  }
  int v14 = sub_1B4BECD04(a1 + 16, 200, 0x20000000, a2, (uint64_t *)a3);
  int v15 = v14;
  uint64_t v16 = *(void *)(a1 + 8);
  if ((v16 & 1) == 0) {
    return v15;
  }
  unint64_t v18 = v16 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v18 + 31) < 0)
  {
    uint64_t v19 = *(void **)(v18 + 8);
    uint64_t v20 = *(void *)(v18 + 16);
  }
  else
  {
    uint64_t v19 = (void *)(v18 + 8);
    LODWORD(v2sub_1B4BC92E4(&a9, 0) = *(unsigned __int8 *)(v18 + 31);
  }
  if ((uint64_t)(*a3 - (void)v14) >= (int)v20)
  {
    uint64_t v21 = (int)v20;
    memcpy(v14, v19, (int)v20);
    v15 += v21;
    return v15;
  }
  return sub_1B4BE581C((uint64_t *)a3, (char *)v19, v20, (unint64_t)v14);
}

uint64_t sub_1B4BDD598(uint64_t a1)
{
  uint64_t v2 = sub_1B4BEFA38(a1 + 16);
  uint64_t v3 = *(int *)(a1 + 48);
  uint64_t v4 = v2 + v3;
  uint64_t v5 = *(void *)(a1 + 56);
  if (v5) {
    int v6 = (uint64_t *)(v5 + 8);
  }
  else {
    int v6 = 0;
  }
  if (v3)
  {
    uint64_t v7 = 8 * v3;
    do
    {
      uint64_t v8 = *v6++;
      uint64_t v9 = sub_1B4BDCC60(v8);
      v4 += v9 + ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6);
      v7 -= 8;
    }
    while (v7);
  }
  uint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    unint64_t v12 = v10 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v12 + 31) < 0) {
      uint64_t v13 = *(void *)(v12 + 16);
    }
    else {
      uint64_t v13 = *(unsigned __int8 *)(v12 + 31);
    }
    v4 += v13;
  }
  *(_DWORD *)(a1 + 64) = v4;
  return v4;
}

unint64_t sub_1B4BDD648(uint64_t a1, void *lpsrc)
{
  if (!__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1F0D537C8, (const struct __class_type_info *)&unk_1F0D53170, 0))sub_1B4BD7788(); {
  return sub_1B4BDD6D0(a1, (uint64_t)lpsrc);
  }
}

unint64_t sub_1B4BDD6D0(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    sub_1B4BE6194((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 2724);
    uint64_t v4 = sub_1B4BE61AC(v15, "CHECK failed: (&from) != (this): ");
    sub_1B4BE62E8((uint64_t)&v14, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_1B4BE62F0((uint64_t)v15);
  }
  sub_1B4BEA6DC(a1 + 16, a2 + 16);
  uint64_t v5 = *(void *)(a2 + 8);
  if (v5)
  {
    unint64_t v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v7 = (v5 & 0xFFFFFFFFFFFFFFFELL) + 8;
    uint64_t v8 = *(void *)(a1 + 8);
    if (v8) {
      uint64_t v9 = (std::string *)((v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
    }
    else {
      uint64_t v9 = (std::string *)sub_1B4BD6F84((unint64_t *)(a1 + 8));
    }
    int v10 = *(char *)(v6 + 31);
    if (v10 >= 0) {
      unsigned int v11 = (const std::string::value_type *)v7;
    }
    else {
      unsigned int v11 = *(const std::string::value_type **)(v6 + 8);
    }
    if (v10 >= 0) {
      std::string::size_type v12 = *(unsigned __int8 *)(v6 + 31);
    }
    else {
      std::string::size_type v12 = *(void *)(v6 + 16);
    }
    std::string::append(v9, v11, v12);
  }
  return sub_1B4BE0C58(a1 + 40, a2 + 40);
}

void sub_1B4BDD7A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1B4BE62F0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B4BDD7C0(uint64_t a1)
{
  return sub_1B4BEBB6C(a1 + 16);
}

void *sub_1B4BDD7C8@<X0>(void *a1@<X8>)
{
  return sub_1B4BB8DC0(a1, "sentencepiece.SelfTestData");
}

void *sub_1B4BDD7D8(void *a1, uint64_t a2)
{
  *a1 = &unk_1F0D54850;
  a1[1] = a2;
  sub_1B4BE67B4((uint64_t)(a1 + 2), a2);
  a1[5] = 0;
  if (atomic_load_explicit(dword_1EC5510D0, memory_order_acquire)) {
    sub_1B4BF1D44(dword_1EC5510D0);
  }
  a1[6] = &qword_1E9D40A98;
  a1[7] = 0x100000000;
  return a1;
}

void sub_1B4BDD858(_Unwind_Exception *a1)
{
  sub_1B4BE6894(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1B4BDD86C(uint64_t a1)
{
  return a1;
}

uint64_t sub_1B4BDD8A8(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(void *)(result + 8);
  uint64_t v3 = (void *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  if ((v2 & 1) == 0)
  {
    if (!v3) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if (*v3)
  {
LABEL_3:
    sub_1B4BE6194((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 2813);
    uint64_t v4 = sub_1B4BE61AC(v10, "CHECK failed: GetArena() == nullptr: ");
    sub_1B4BE62E8((uint64_t)&v9, (const char **)&v4->__r_.__value_.__l.__data_);
    uint64_t result = sub_1B4BE62F0((uint64_t)v10);
  }
LABEL_4:
  unint64_t v6 = *(uint64_t **)(v1 + 48);
  uint64_t v5 = (uint64_t *)(v1 + 48);
  if (v6 != &qword_1E9D40A98)
  {
    uint64_t v7 = sub_1B4BD6D70(v5);
    uint64_t v8 = v7;
    if (*(char *)(v7 + 23) < 0) {
      operator delete(*(void **)v7);
    }
    return MEMORY[0x1BA9929C0](v8, 0x1012C40EC159624);
  }
  return result;
}

void sub_1B4BDD970(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1B4BE62F0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1B4BDD98C(uint64_t a1)
{
  sub_1B4BDD86C(a1);
  JUMPOUT(0x1BA9929C0);
}

unsigned __int8 *sub_1B4BDD9C4(uint64_t a1)
{
  uint64_t result = sub_1B4BEA63C((unsigned __int8 *)(a1 + 16));
  int v3 = *(_DWORD *)(a1 + 40);
  if (v3)
  {
    unint64_t v4 = *(void *)(a1 + 48) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v4 + 23) < 0)
    {
      **(unsigned char **)unint64_t v4 = 0;
      *(void *)(v4 + 8) = 0;
    }
    else
    {
      *(unsigned char *)unint64_t v4 = 0;
      *(unsigned char *)(v4 + 23) = 0;
    }
  }
  if ((v3 & 6) != 0) {
    *(void *)(a1 + 56) = 0x100000000;
  }
  *(_DWORD *)(a1 + 4sub_1B4BC92E4(&a9, 0) = 0;
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5)
  {
    unint64_t v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v6 + 31) < 0)
    {
      **(unsigned char **)(v6 + 8) = 0;
      *(void *)(v6 + 16) = 0;
    }
    else
    {
      *(unsigned char *)(v6 + 8) = 0;
      *(unsigned char *)(v6 + 31) = 0;
    }
  }
  return result;
}

uint64_t sub_1B4BDDA5C(uint64_t a1, uint64_t a2, int32x2_t *a3)
{
  *(void *)uint64_t v27 = a2;
  int v5 = 0;
  if ((sub_1B4BD6E44((uint64_t)a3, (char **)v27, a3[11].i32[1]) & 1) == 0)
  {
    uint64_t v7 = (void *)(a1 + 8);
    while (1)
    {
      uint64_t v8 = (char *)(*(void *)v27 + 1);
      unsigned int v9 = **(unsigned char **)v27;
      if (((char)**(unsigned char **)v27 & 0x80000000) == 0) {
        goto LABEL_7;
      }
      unsigned int v10 = v9 + (*v8 << 7);
      unsigned int v9 = v10 - 128;
      if ((*v8 & 0x80000000) == 0) {
        break;
      }
      uint64_t v22 = sub_1B4BF37FC(*(uint64_t *)v27, v10 - 128);
      *(void *)uint64_t v27 = v22;
      if (!v22) {
        goto LABEL_48;
      }
      uint64_t v8 = (char *)v22;
      unsigned int v9 = v23;
LABEL_8:
      unsigned int v11 = v9 >> 3;
      if (v9 >> 3 == 3)
      {
        if (v9 == 24)
        {
          int v15 = v8 + 1;
          unint64_t v16 = *v8;
          if ((*v8 & 0x80000000) == 0) {
            goto LABEL_24;
          }
          int v17 = *v15;
          int v18 = v16 + (v17 << 7);
          unint64_t v16 = (v18 - 128);
          if (v17 < 0)
          {
            *(void *)uint64_t v27 = sub_1B4BF37B4((uint64_t)v8, (v18 - 128));
            if (!*(void *)v27)
            {
LABEL_48:
              *(void *)uint64_t v27 = 0;
              goto LABEL_2;
            }
            unint64_t v16 = v25;
          }
          else
          {
            int v15 = v8 + 2;
LABEL_24:
            *(void *)uint64_t v27 = v15;
          }
          if ((v16 - 1) > 5)
          {
            if (*v7) {
              uint64_t v26 = (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFELL) + 8);
            }
            else {
              uint64_t v26 = (std::string *)sub_1B4BD6F84((unint64_t *)(a1 + 8));
            }
            sub_1B4BF36A0(3, v16, v26);
          }
          else
          {
            *(_DWORD *)(a1 + 40) |= 4u;
            *(_DWORD *)(a1 + 6sub_1B4BC92E4(&a9, 0) = v16;
          }
          goto LABEL_38;
        }
      }
      else if (v11 == 2)
      {
        if (v9 == 21)
        {
          v5 |= 2u;
          *(_DWORD *)(a1 + 56) = *(_DWORD *)v8;
          *(void *)uint64_t v27 = v8 + 4;
          goto LABEL_38;
        }
      }
      else if (v11 == 1 && v9 == 10)
      {
        *(_DWORD *)(a1 + 40) |= 1u;
        uint64_t v19 = *(void *)(a1 + 8);
        uint64_t v20 = (void *)(v19 & 0xFFFFFFFFFFFFFFFELL);
        if (v19) {
          uint64_t v20 = (void *)*v20;
        }
        uint64_t v21 = (std::string *)sub_1B4BE4FF0((uint64_t *)(a1 + 48), (uint64_t)v20);
        char v14 = (void *)sub_1B4BF38B0(v21, *(char **)v27, (uint64_t)a3);
        goto LABEL_37;
      }
      if (v9) {
        BOOL v13 = (v9 & 7) == 4;
      }
      else {
        BOOL v13 = 1;
      }
      if (v13)
      {
        a3[10].i32[0] = v9 - 1;
        goto LABEL_2;
      }
      if (v9 < 0x640)
      {
        if (*v7)
        {
          uint64_t v24 = (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFELL) + 8);
        }
        else
        {
          uint64_t v24 = (std::string *)sub_1B4BD6F84((unint64_t *)(a1 + 8));
          uint64_t v8 = *(char **)v27;
        }
        char v14 = sub_1B4BF3D6C(v9, v24, v8, a3);
      }
      else
      {
        char v14 = sub_1B4BEBF0C((uint64_t *)(a1 + 16), v9, (unsigned __int8 *)v8, (uint64_t)qword_1E9D409C8, (unint64_t *)(a1 + 8), a3);
      }
LABEL_37:
      *(void *)uint64_t v27 = v14;
      if (!v14) {
        goto LABEL_48;
      }
LABEL_38:
      if (sub_1B4BD6E44((uint64_t)a3, (char **)v27, a3[11].i32[1])) {
        goto LABEL_2;
      }
    }
    uint64_t v8 = (char *)(*(void *)v27 + 2);
LABEL_7:
    *(void *)uint64_t v27 = v8;
    goto LABEL_8;
  }
LABEL_2:
  *(_DWORD *)(a1 + 40) |= v5;
  return *(void *)v27;
}

char *sub_1B4BDDCE4(uint64_t a1, char *a2, unint64_t *a3)
{
  unint64_t v4 = a2;
  int v6 = *(_DWORD *)(a1 + 40);
  if (v6)
  {
    unint64_t v4 = sub_1B4BD4F64(a3, 1, (const void **)(*(void *)(a1 + 48) & 0xFFFFFFFFFFFFFFFELL), a2);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_18;
      }
      goto LABEL_9;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  if (*a3 <= (unint64_t)v4) {
    unint64_t v4 = sub_1B4BE5708((uint64_t)a3, v4);
  }
  int v7 = *(_DWORD *)(a1 + 56);
  char *v4 = 21;
  *(_DWORD *)(v4 + 1) = v7;
  v4 += 5;
  if ((v6 & 4) != 0)
  {
LABEL_9:
    if (*a3 <= (unint64_t)v4) {
      unint64_t v4 = sub_1B4BE5708((uint64_t)a3, v4);
    }
    unint64_t v8 = *(int *)(a1 + 60);
    char *v4 = 24;
    if (v8 > 0x7F)
    {
      v4[1] = v8 | 0x80;
      unint64_t v9 = v8 >> 7;
      if (v8 >> 14)
      {
        v4 += 3;
        do
        {
          *(v4 - 1) = v9 | 0x80;
          unint64_t v10 = v9 >> 7;
          ++v4;
          unint64_t v11 = v9 >> 14;
          v9 >>= 7;
        }
        while (v11);
        *(v4 - 1) = v10;
      }
      else
      {
        v4[2] = v9;
        v4 += 3;
      }
    }
    else
    {
      v4[1] = v8;
      v4 += 2;
    }
  }
LABEL_18:
  std::string::size_type v12 = sub_1B4BECD04(a1 + 16, 200, 0x20000000, v4, (uint64_t *)a3);
  BOOL v13 = v12;
  uint64_t v14 = *(void *)(a1 + 8);
  if ((v14 & 1) == 0) {
    return v13;
  }
  unint64_t v16 = v14 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v16 + 31) < 0)
  {
    int v17 = *(void **)(v16 + 8);
    uint64_t v18 = *(void *)(v16 + 16);
  }
  else
  {
    int v17 = (void *)(v16 + 8);
    LODWORD(v18) = *(unsigned __int8 *)(v16 + 31);
  }
  if ((uint64_t)(*a3 - (void)v12) >= (int)v18)
  {
    uint64_t v19 = (int)v18;
    memcpy(v12, v17, (int)v18);
    v13 += v19;
    return v13;
  }
  return sub_1B4BE581C((uint64_t *)a3, (char *)v17, v18, (unint64_t)v12);
}

uint64_t sub_1B4BDDE90(uint64_t a1)
{
  uint64_t result = sub_1B4BEFA38(a1 + 16);
  int v3 = *(_DWORD *)(a1 + 40);
  if ((v3 & 7) != 0)
  {
    if (v3)
    {
      unint64_t v4 = *(void *)(a1 + 48) & 0xFFFFFFFFFFFFFFFELL;
      uint64_t v5 = *(unsigned __int8 *)(v4 + 23);
      uint64_t v6 = *(void *)(v4 + 8);
      if ((v5 & 0x80u) == 0) {
        uint64_t v6 = v5;
      }
      result += v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    if ((v3 & 2) != 0) {
      result += 5;
    }
    if ((v3 & 4) != 0)
    {
      int v7 = *(_DWORD *)(a1 + 60);
      if (v7 < 0) {
        uint64_t v8 = 11;
      }
      else {
        uint64_t v8 = ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6) + 1;
      }
      result += v8;
    }
  }
  uint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    unint64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v10 + 31) < 0) {
      uint64_t v11 = *(void *)(v10 + 16);
    }
    else {
      uint64_t v11 = *(unsigned __int8 *)(v10 + 31);
    }
    result += v11;
  }
  *(_DWORD *)(a1 + 44) = result;
  return result;
}

void sub_1B4BDDF74(uint64_t a1, void *lpsrc)
{
  if (!__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1F0D537C8, (const struct __class_type_info *)&unk_1F0D53260, 0))sub_1B4BD7788(); {
  sub_1B4BDDFFC(a1, (uint64_t)lpsrc);
  }
}

void sub_1B4BDDFFC(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    sub_1B4BE6194((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 3001);
    unint64_t v4 = sub_1B4BE61AC(v18, "CHECK failed: (&from) != (this): ");
    sub_1B4BE62E8((uint64_t)&v17, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_1B4BE62F0((uint64_t)v18);
  }
  sub_1B4BEA6DC(a1 + 16, a2 + 16);
  uint64_t v5 = *(void *)(a2 + 8);
  if (v5)
  {
    unint64_t v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v7 = (v5 & 0xFFFFFFFFFFFFFFFELL) + 8;
    uint64_t v8 = *(void *)(a1 + 8);
    if (v8) {
      uint64_t v9 = (std::string *)((v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
    }
    else {
      uint64_t v9 = (std::string *)sub_1B4BD6F84((unint64_t *)(a1 + 8));
    }
    int v10 = *(char *)(v6 + 31);
    if (v10 >= 0) {
      uint64_t v11 = (const std::string::value_type *)v7;
    }
    else {
      uint64_t v11 = *(const std::string::value_type **)(v6 + 8);
    }
    if (v10 >= 0) {
      std::string::size_type v12 = *(unsigned __int8 *)(v6 + 31);
    }
    else {
      std::string::size_type v12 = *(void *)(v6 + 16);
    }
    std::string::append(v9, v11, v12);
  }
  int v13 = *(_DWORD *)(a2 + 40);
  if ((v13 & 7) != 0)
  {
    if (v13)
    {
      uint64_t v14 = (long long *)(*(void *)(a2 + 48) & 0xFFFFFFFFFFFFFFFELL);
      *(_DWORD *)(a1 + 40) |= 1u;
      uint64_t v15 = *(void *)(a1 + 8);
      unint64_t v16 = (void *)(v15 & 0xFFFFFFFFFFFFFFFELL);
      if (v15) {
        unint64_t v16 = (void *)*v16;
      }
      sub_1B4BE4FB8((uint64_t *)(a1 + 48), v14, (uint64_t)v16);
      if ((v13 & 2) == 0)
      {
LABEL_16:
        if ((v13 & 4) == 0)
        {
LABEL_18:
          *(_DWORD *)(a1 + 40) |= v13;
          return;
        }
LABEL_17:
        *(_DWORD *)(a1 + 6sub_1B4BC92E4(&a9, 0) = *(_DWORD *)(a2 + 60);
        goto LABEL_18;
      }
    }
    else if ((v13 & 2) == 0)
    {
      goto LABEL_16;
    }
    *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
    if ((v13 & 4) == 0) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
}

void sub_1B4BDE138(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1B4BE62F0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B4BDE150(uint64_t a1)
{
  return sub_1B4BEBB6C(a1 + 16);
}

void *sub_1B4BDE158@<X0>(void *a1@<X8>)
{
  return sub_1B4BB8DC0(a1, "sentencepiece.ModelProto.SentencePiece");
}

uint64_t sub_1B4BDE168(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F0D53E78;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = &unk_1F0D53F90;
  sub_1B4BE67B4(a1 + 24, a2);
  *(void *)(a1 + 56) = a2;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  if (atomic_load_explicit(dword_1EC5510E8, memory_order_acquire)) {
    sub_1B4BF1D44(dword_1EC5510E8);
  }
  *(_OWORD *)(a1 + 8sub_1B4BC92E4(&a9, 0) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  return a1;
}

void sub_1B4BDE218(_Unwind_Exception *a1)
{
  sub_1B4BE0E08(v2);
  sub_1B4BE6894(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1B4BDE238(uint64_t a1)
{
  return a1;
}

uint64_t sub_1B4BDE27C(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(void *)(result + 8);
  int v3 = (void *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  if ((v2 & 1) == 0)
  {
    if (!v3) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if (*v3)
  {
LABEL_3:
    sub_1B4BE6194((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 3145);
    unint64_t v4 = sub_1B4BE61AC(v13, "CHECK failed: GetArena() == nullptr: ");
    sub_1B4BE62E8((uint64_t)&v12, (const char **)&v4->__r_.__value_.__l.__data_);
    uint64_t result = sub_1B4BE62F0((uint64_t)v13);
  }
LABEL_4:
  if ((_UNKNOWN *)v1 != &unk_1E9D406F0)
  {
    uint64_t v5 = *(uint64_t **)(v1 + 80);
    if (v5)
    {
      unint64_t v6 = sub_1B4BD7BD4(v5);
      MEMORY[0x1BA9929C0](v6, 0x10A1C4074230EEALL);
    }
    uint64_t v7 = *(void *)(v1 + 88);
    if (v7)
    {
      uint64_t v8 = sub_1B4BDB9CC(v7);
      MEMORY[0x1BA9929C0](v8, 0x10A1C402CDD3876);
    }
    uint64_t v9 = *(void *)(v1 + 96);
    if (v9)
    {
      uint64_t v10 = sub_1B4BDCFC8(v9);
      MEMORY[0x1BA9929C0](v10, 0x10A1C4075D007F8);
    }
    uint64_t result = *(void *)(v1 + 104);
    if (result)
    {
      uint64_t v11 = sub_1B4BDB9CC(result);
      return MEMORY[0x1BA9929C0](v11, 0x10A1C402CDD3876);
    }
  }
  return result;
}

void sub_1B4BDE38C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1B4BE62F0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B4BDE3A8(uint64_t a1)
{
  return sub_1B4BDE238(a1 - 16);
}

void sub_1B4BDE3B0(uint64_t a1)
{
  sub_1B4BDE238(a1);
  JUMPOUT(0x1BA9929C0);
}

void sub_1B4BDE3E8(uint64_t a1)
{
  sub_1B4BDE238(a1 - 16);
  JUMPOUT(0x1BA9929C0);
}

uint64_t sub_1B4BDE424(uint64_t a1)
{
  sub_1B4BEA63C((unsigned __int8 *)(a1 + 24));
  uint64_t result = (uint64_t)sub_1B4BE08C4((unsigned __int8 *)(a1 + 56));
  int v3 = *(_DWORD *)(a1 + 48);
  if ((v3 & 0xF) != 0)
  {
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 80);
      if (!v4)
      {
        sub_1B4BE6194((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 3178);
        uint64_t v5 = sub_1B4BE61AC(v15, "CHECK failed: trainer_spec_ != nullptr: ");
        sub_1B4BE62E8((uint64_t)&v14, (const char **)&v5->__r_.__value_.__l.__data_);
        sub_1B4BE62F0((uint64_t)v15);
        uint64_t v4 = *(void *)(a1 + 80);
      }
      uint64_t result = sub_1B4BD7F40(v4);
    }
    if ((v3 & 2) != 0)
    {
      uint64_t v6 = *(void *)(a1 + 88);
      if (!v6)
      {
        sub_1B4BE6194((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 3182);
        uint64_t v7 = sub_1B4BE61AC(v15, "CHECK failed: normalizer_spec_ != nullptr: ");
        sub_1B4BE62E8((uint64_t)&v14, (const char **)&v7->__r_.__value_.__l.__data_);
        sub_1B4BE62F0((uint64_t)v15);
        uint64_t v6 = *(void *)(a1 + 88);
      }
      uint64_t result = (uint64_t)sub_1B4BDBBF0(v6);
    }
    if ((v3 & 4) != 0)
    {
      uint64_t v8 = *(void *)(a1 + 96);
      if (!v8)
      {
        sub_1B4BE6194((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 3186);
        uint64_t v9 = sub_1B4BE61AC(v15, "CHECK failed: self_test_data_ != nullptr: ");
        sub_1B4BE62E8((uint64_t)&v14, (const char **)&v9->__r_.__value_.__l.__data_);
        sub_1B4BE62F0((uint64_t)v15);
        uint64_t v8 = *(void *)(a1 + 96);
      }
      uint64_t result = sub_1B4BDD0C4(v8);
    }
    if ((v3 & 8) != 0)
    {
      uint64_t v10 = *(void *)(a1 + 104);
      if (!v10)
      {
        sub_1B4BE6194((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 3190);
        uint64_t v11 = sub_1B4BE61AC(v15, "CHECK failed: denormalizer_spec_ != nullptr: ");
        sub_1B4BE62E8((uint64_t)&v14, (const char **)&v11->__r_.__value_.__l.__data_);
        sub_1B4BE62F0((uint64_t)v15);
        uint64_t v10 = *(void *)(a1 + 104);
      }
      uint64_t result = (uint64_t)sub_1B4BDBBF0(v10);
    }
  }
  *(_DWORD *)(a1 + 48) = 0;
  uint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    unint64_t v13 = v12 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v13 + 31) < 0)
    {
      **(unsigned char **)(v13 + 8) = 0;
      *(void *)(v13 + 16) = 0;
    }
    else
    {
      *(unsigned char *)(v13 + 8) = 0;
      *(unsigned char *)(v13 + 31) = 0;
    }
  }
  return result;
}

void sub_1B4BDE5D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1B4BE62F0((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_1B4BDE608(uint64_t a1, char *a2, int32x2_t *a3)
{
  uint64_t v30 = a2;
  if ((sub_1B4BD6E44((uint64_t)a3, &v30, a3[11].i32[1]) & 1) == 0)
  {
    uint64_t v6 = (void *)(a1 + 8);
    while (2)
    {
      uint64_t v7 = v30 + 1;
      unsigned int v8 = *v30;
      if (*v30 < 0)
      {
        unsigned int v9 = v8 + (*v7 << 7);
        unsigned int v8 = v9 - 128;
        if (*v7 < 0)
        {
          uint64_t v27 = (char *)sub_1B4BF37FC((uint64_t)v30, v9 - 128);
          uint64_t v30 = v27;
          if (!v27) {
            return 0;
          }
          uint64_t v7 = v27;
          unsigned int v8 = v28;
LABEL_8:
          switch(v8 >> 3)
          {
            case 1u:
              if (v8 != 10) {
                goto LABEL_49;
              }
              uint64_t v10 = v7 - 1;
              break;
            case 2u:
              if (v8 != 18) {
                goto LABEL_49;
              }
              *(_DWORD *)(a1 + 48) |= 1u;
              uint64_t v18 = *(void *)(a1 + 80);
              if (!v18)
              {
                uint64_t v19 = (void *)(*v6 & 0xFFFFFFFFFFFFFFFELL);
                if (*v6) {
                  uint64_t v19 = (void *)*v19;
                }
                uint64_t v18 = sub_1B4BDF7B4((uint64_t)v19);
                *(void *)(a1 + 8sub_1B4BC92E4(&a9, 0) = v18;
                uint64_t v7 = v30;
              }
              uint64_t v20 = (char *)sub_1B4BDEA68(a3, v18, (unsigned __int8 *)v7);
              goto LABEL_46;
            case 3u:
              if (v8 != 26) {
                goto LABEL_49;
              }
              *(_DWORD *)(a1 + 48) |= 2u;
              uint64_t v21 = *(void *)(a1 + 88);
              if (v21) {
                goto LABEL_45;
              }
              uint64_t v22 = (void *)(*v6 & 0xFFFFFFFFFFFFFFFELL);
              if (*v6) {
                uint64_t v22 = (void *)*v22;
              }
              uint64_t v21 = sub_1B4BDF884((uint64_t)v22);
              *(void *)(a1 + 88) = v21;
              goto LABEL_44;
            case 4u:
              if (v8 != 34) {
                goto LABEL_49;
              }
              *(_DWORD *)(a1 + 48) |= 4u;
              uint64_t v23 = *(void *)(a1 + 96);
              if (!v23)
              {
                uint64_t v24 = (void *)(*v6 & 0xFFFFFFFFFFFFFFFELL);
                if (*v6) {
                  uint64_t v24 = (void *)*v24;
                }
                uint64_t v23 = sub_1B4BDFA24((uint64_t)v24);
                *(void *)(a1 + 96) = v23;
                uint64_t v7 = v30;
              }
              uint64_t v20 = (char *)sub_1B4BDEBF8(a3, v23, v7);
              goto LABEL_46;
            case 5u:
              if (v8 != 42) {
                goto LABEL_49;
              }
              *(_DWORD *)(a1 + 48) |= 8u;
              uint64_t v21 = *(void *)(a1 + 104);
              if (v21) {
                goto LABEL_45;
              }
              unint64_t v25 = (void *)(*v6 & 0xFFFFFFFFFFFFFFFELL);
              if (*v6) {
                unint64_t v25 = (void *)*v25;
              }
              uint64_t v21 = sub_1B4BDF884((uint64_t)v25);
              *(void *)(a1 + 104) = v21;
LABEL_44:
              uint64_t v7 = v30;
LABEL_45:
              uint64_t v20 = (char *)sub_1B4BDEB30(a3, v21, (unsigned __int8 *)v7);
              goto LABEL_46;
            default:
LABEL_49:
              if (v8) {
                BOOL v26 = (v8 & 7) == 4;
              }
              else {
                BOOL v26 = 1;
              }
              if (v26)
              {
                a3[10].i32[0] = v8 - 1;
                return v30;
              }
              if (v8 < 0x640)
              {
                if (*v6)
                {
                  uint64_t v29 = (std::string *)((*v6 & 0xFFFFFFFFFFFFFFFELL) + 8);
                }
                else
                {
                  uint64_t v29 = (std::string *)sub_1B4BD6F84((unint64_t *)(a1 + 8));
                  uint64_t v7 = v30;
                }
                uint64_t v20 = (char *)sub_1B4BF3D6C(v8, v29, v7, a3);
              }
              else
              {
                uint64_t v20 = (char *)sub_1B4BEBF0C((uint64_t *)(a1 + 24), v8, (unsigned __int8 *)v7, (uint64_t)&unk_1E9D406F0, (unint64_t *)(a1 + 8), a3);
              }
LABEL_46:
              uint64_t v30 = v20;
              if (!v20) {
                return 0;
              }
LABEL_47:
              if (sub_1B4BD6E44((uint64_t)a3, &v30, a3[11].i32[1])) {
                return v30;
              }
              continue;
          }
          while (1)
          {
            uint64_t v11 = (unsigned __int8 *)(v10 + 1);
            uint64_t v30 = v10 + 1;
            uint64_t v12 = *(int **)(a1 + 72);
            if (!v12) {
              break;
            }
            uint64_t v13 = *(int *)(a1 + 64);
            int v14 = *v12;
            if ((int)v13 >= *v12)
            {
              if (v14 == *(_DWORD *)(a1 + 68))
              {
LABEL_16:
                sub_1B4BF8BEC(a1 + 56, v14 + 1);
                uint64_t v12 = *(int **)(a1 + 72);
                int v14 = *v12;
              }
              *uint64_t v12 = v14 + 1;
              uint64_t v15 = sub_1B4BDFAF4(*(void *)(a1 + 56));
              uint64_t v16 = *(void *)(a1 + 72);
              uint64_t v17 = *(int *)(a1 + 64);
              *(_DWORD *)(a1 + 64) = v17 + 1;
              *(void *)(v16 + 8 * v17 + 8) = v15;
              uint64_t v11 = (unsigned __int8 *)v30;
              goto LABEL_18;
            }
            *(_DWORD *)(a1 + 64) = v13 + 1;
            uint64_t v15 = *(void **)&v12[2 * v13 + 2];
LABEL_18:
            uint64_t v10 = (char *)sub_1B4BDE9A0(a3, (uint64_t)v15, v11);
            uint64_t v30 = v10;
            if (!v10) {
              return 0;
            }
            if (*(void *)a3 <= (unint64_t)v10 || *v10 != 10) {
              goto LABEL_47;
            }
          }
          int v14 = *(_DWORD *)(a1 + 68);
          goto LABEL_16;
        }
        uint64_t v7 = v30 + 2;
      }
      break;
    }
    uint64_t v30 = v7;
    goto LABEL_8;
  }
  return v30;
}

uint64_t sub_1B4BDE9A0(int32x2_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  int v6 = (char)*a3;
  unsigned int v7 = *a3;
  if (v6 < 0)
  {
    uint64_t result = sub_1B4BF3840((uint64_t)a3, v7);
    if (!result) {
      return result;
    }
    uint64_t v8 = result;
    unsigned int v7 = v10;
  }
  else
  {
    uint64_t v8 = (uint64_t)(a3 + 1);
  }
  int v11 = sub_1B4BD72B0((uint64_t)a1, v8, v7);
  int v12 = a1[11].i32[0];
  BOOL v13 = __OFSUB__(v12--, 1);
  a1[11].i32[0] = v12;
  if (v12 < 0 != v13) {
    return 0;
  }
  int v14 = v11;
  uint64_t result = sub_1B4BDDA5C(a2, v8, a1);
  if (!result) {
    return result;
  }
  ++a1[11].i32[0];
  if (a1[10].i32[0]) {
    return 0;
  }
  int v15 = a1[3].i32[1] + v14;
  a1[3].i32[1] = v15;
  *a1 = (int32x2_t)(*(void *)&a1[1] + (v15 & (v15 >> 31)));
  return result;
}

uint64_t sub_1B4BDEA68(int32x2_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  int v6 = (char)*a3;
  unsigned int v7 = *a3;
  if (v6 < 0)
  {
    uint64_t result = sub_1B4BF3840((uint64_t)a3, v7);
    if (!result) {
      return result;
    }
    uint64_t v8 = result;
    unsigned int v7 = v10;
  }
  else
  {
    uint64_t v8 = (uint64_t)(a3 + 1);
  }
  int v11 = sub_1B4BD72B0((uint64_t)a1, v8, v7);
  int v12 = a1[11].i32[0];
  BOOL v13 = __OFSUB__(v12--, 1);
  a1[11].i32[0] = v12;
  if (v12 < 0 != v13) {
    return 0;
  }
  int v14 = v11;
  uint64_t result = (uint64_t)sub_1B4BD8208(a2, v8, a1);
  if (!result) {
    return result;
  }
  ++a1[11].i32[0];
  if (a1[10].i32[0]) {
    return 0;
  }
  int v15 = a1[3].i32[1] + v14;
  a1[3].i32[1] = v15;
  *a1 = (int32x2_t)(*(void *)&a1[1] + (v15 & (v15 >> 31)));
  return result;
}

uint64_t sub_1B4BDEB30(int32x2_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  int v6 = (char)*a3;
  unsigned int v7 = *a3;
  if (v6 < 0)
  {
    uint64_t result = sub_1B4BF3840((uint64_t)a3, v7);
    if (!result) {
      return result;
    }
    uint64_t v8 = result;
    unsigned int v7 = v10;
  }
  else
  {
    uint64_t v8 = (uint64_t)(a3 + 1);
  }
  int v11 = sub_1B4BD72B0((uint64_t)a1, v8, v7);
  int v12 = a1[11].i32[0];
  BOOL v13 = __OFSUB__(v12--, 1);
  a1[11].i32[0] = v12;
  if (v12 < 0 != v13) {
    return 0;
  }
  int v14 = v11;
  uint64_t result = sub_1B4BDBD00(a2, v8, a1);
  if (!result) {
    return result;
  }
  ++a1[11].i32[0];
  if (a1[10].i32[0]) {
    return 0;
  }
  int v15 = a1[3].i32[1] + v14;
  a1[3].i32[1] = v15;
  *a1 = (int32x2_t)(*(void *)&a1[1] + (v15 & (v15 >> 31)));
  return result;
}

uint64_t sub_1B4BDEBF8(int32x2_t *a1, uint64_t a2, char *a3)
{
  int v6 = *a3;
  unsigned int v7 = *a3;
  if (v6 < 0)
  {
    uint64_t result = sub_1B4BF3840((uint64_t)a3, v7);
    if (!result) {
      return result;
    }
    uint64_t v8 = (char *)result;
    unsigned int v7 = v10;
  }
  else
  {
    uint64_t v8 = a3 + 1;
  }
  int v11 = sub_1B4BD72B0((uint64_t)a1, (int)v8, v7);
  int v12 = a1[11].i32[0];
  BOOL v13 = __OFSUB__(v12--, 1);
  a1[11].i32[0] = v12;
  if (v12 < 0 != v13) {
    return 0;
  }
  int v14 = v11;
  uint64_t result = (uint64_t)sub_1B4BDD120(a2, v8, a1);
  if (!result) {
    return result;
  }
  ++a1[11].i32[0];
  if (a1[10].i32[0]) {
    return 0;
  }
  int v15 = a1[3].i32[1] + v14;
  a1[3].i32[1] = v15;
  *a1 = (int32x2_t)(*(void *)&a1[1] + (v15 & (v15 >> 31)));
  return result;
}

char *sub_1B4BDECC0(uint64_t a1, char *a2, unint64_t *a3)
{
  int v6 = *(_DWORD *)(a1 + 64);
  if (v6)
  {
    for (int i = 0; i != v6; ++i)
    {
      if (*a3 <= (unint64_t)a2) {
        a2 = sub_1B4BE5708((uint64_t)a3, a2);
      }
      uint64_t v8 = sub_1B4BB2478(a1 + 56, i);
      *a2 = 10;
      unsigned int v9 = *(_DWORD *)(v8 + 44);
      if (v9 > 0x7F)
      {
        a2[1] = v9 | 0x80;
        unsigned int v11 = v9 >> 7;
        if (v9 >> 14)
        {
          unsigned int v10 = a2 + 3;
          do
          {
            *(v10 - 1) = v11 | 0x80;
            unsigned int v12 = v11 >> 7;
            ++v10;
            unsigned int v13 = v11 >> 14;
            v11 >>= 7;
          }
          while (v13);
          *(v10 - 1) = v12;
        }
        else
        {
          a2[2] = v11;
          unsigned int v10 = a2 + 3;
        }
      }
      else
      {
        a2[1] = v9;
        unsigned int v10 = a2 + 2;
      }
      a2 = sub_1B4BDDCE4(v8, v10, a3);
    }
  }
  int v14 = *(_DWORD *)(a1 + 48);
  if (v14)
  {
    if (*a3 <= (unint64_t)a2) {
      a2 = sub_1B4BE5708((uint64_t)a3, a2);
    }
    uint64_t v15 = *(void *)(a1 + 80);
    *a2 = 18;
    unsigned int v16 = *(_DWORD *)(v15 + 48);
    if (v16 > 0x7F)
    {
      a2[1] = v16 | 0x80;
      unsigned int v18 = v16 >> 7;
      if (v16 >> 14)
      {
        uint64_t v17 = a2 + 3;
        do
        {
          *(v17 - 1) = v18 | 0x80;
          unsigned int v19 = v18 >> 7;
          ++v17;
          unsigned int v20 = v18 >> 14;
          v18 >>= 7;
        }
        while (v20);
        *(v17 - 1) = v19;
      }
      else
      {
        a2[2] = v18;
        uint64_t v17 = a2 + 3;
      }
    }
    else
    {
      a2[1] = v16;
      uint64_t v17 = a2 + 2;
    }
    a2 = sub_1B4BD9880(v15, v17, (uint64_t *)a3);
    if ((v14 & 2) == 0)
    {
LABEL_15:
      if ((v14 & 4) == 0) {
        goto LABEL_16;
      }
      goto LABEL_38;
    }
  }
  else if ((v14 & 2) == 0)
  {
    goto LABEL_15;
  }
  if (*a3 <= (unint64_t)a2) {
    a2 = sub_1B4BE5708((uint64_t)a3, a2);
  }
  uint64_t v21 = *(void *)(a1 + 88);
  *a2 = 26;
  unsigned int v22 = *(_DWORD *)(v21 + 52);
  if (v22 > 0x7F)
  {
    a2[1] = v22 | 0x80;
    unsigned int v24 = v22 >> 7;
    if (v22 >> 14)
    {
      uint64_t v23 = a2 + 3;
      do
      {
        *(v23 - 1) = v24 | 0x80;
        unsigned int v25 = v24 >> 7;
        ++v23;
        unsigned int v26 = v24 >> 14;
        v24 >>= 7;
      }
      while (v26);
      *(v23 - 1) = v25;
    }
    else
    {
      a2[2] = v24;
      uint64_t v23 = a2 + 3;
    }
  }
  else
  {
    a2[1] = v22;
    uint64_t v23 = a2 + 2;
  }
  a2 = sub_1B4BDC124(v21, v23, a3);
  if ((v14 & 4) == 0)
  {
LABEL_16:
    if ((v14 & 8) == 0) {
      goto LABEL_58;
    }
    goto LABEL_48;
  }
LABEL_38:
  if (*a3 <= (unint64_t)a2) {
    a2 = sub_1B4BE5708((uint64_t)a3, a2);
  }
  uint64_t v27 = *(void *)(a1 + 96);
  *a2 = 34;
  unsigned int v28 = *(_DWORD *)(v27 + 64);
  if (v28 > 0x7F)
  {
    a2[1] = v28 | 0x80;
    unsigned int v30 = v28 >> 7;
    if (v28 >> 14)
    {
      uint64_t v29 = a2 + 3;
      do
      {
        *(v29 - 1) = v30 | 0x80;
        unsigned int v31 = v30 >> 7;
        ++v29;
        unsigned int v32 = v30 >> 14;
        v30 >>= 7;
      }
      while (v32);
      *(v29 - 1) = v31;
    }
    else
    {
      a2[2] = v30;
      uint64_t v29 = a2 + 3;
    }
  }
  else
  {
    a2[1] = v28;
    uint64_t v29 = a2 + 2;
  }
  a2 = sub_1B4BDD400(v27, v29, a3);
  if ((v14 & 8) != 0)
  {
LABEL_48:
    if (*a3 <= (unint64_t)a2) {
      a2 = sub_1B4BE5708((uint64_t)a3, a2);
    }
    uint64_t v33 = *(void *)(a1 + 104);
    *a2 = 42;
    unsigned int v34 = *(_DWORD *)(v33 + 52);
    if (v34 > 0x7F)
    {
      a2[1] = v34 | 0x80;
      unsigned int v36 = v34 >> 7;
      if (v34 >> 14)
      {
        uint64_t v35 = a2 + 3;
        do
        {
          *(v35 - 1) = v36 | 0x80;
          unsigned int v37 = v36 >> 7;
          ++v35;
          unsigned int v38 = v36 >> 14;
          v36 >>= 7;
        }
        while (v38);
        *(v35 - 1) = v37;
      }
      else
      {
        a2[2] = v36;
        uint64_t v35 = a2 + 3;
      }
    }
    else
    {
      a2[1] = v34;
      uint64_t v35 = a2 + 2;
    }
    a2 = sub_1B4BDC124(v33, v35, a3);
  }
LABEL_58:
  uint64_t v39 = sub_1B4BECD04(a1 + 24, 200, 0x20000000, a2, (uint64_t *)a3);
  uint64_t v40 = v39;
  uint64_t v41 = *(void *)(a1 + 8);
  if ((v41 & 1) == 0) {
    return v40;
  }
  unint64_t v43 = v41 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v43 + 31) < 0)
  {
    char v44 = *(void **)(v43 + 8);
    uint64_t v45 = *(void *)(v43 + 16);
  }
  else
  {
    char v44 = (void *)(v43 + 8);
    LODWORD(v45) = *(unsigned __int8 *)(v43 + 31);
  }
  if ((uint64_t)(*a3 - (void)v39) >= (int)v45)
  {
    uint64_t v46 = (int)v45;
    memcpy(v39, v44, (int)v45);
    v40 += v46;
    return v40;
  }
  return sub_1B4BE581C((uint64_t *)a3, (char *)v44, v45, (unint64_t)v39);
}

uint64_t sub_1B4BDF0CC(uint64_t a1)
{
  uint64_t v2 = sub_1B4BEFA38(a1 + 24);
  uint64_t v3 = *(int *)(a1 + 64);
  uint64_t v4 = v2 + v3;
  uint64_t v5 = *(void *)(a1 + 72);
  if (v5) {
    int v6 = (uint64_t *)(v5 + 8);
  }
  else {
    int v6 = 0;
  }
  if (v3)
  {
    uint64_t v7 = 8 * v3;
    do
    {
      uint64_t v8 = *v6++;
      uint64_t v9 = sub_1B4BDDE90(v8);
      v4 += v9 + ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6);
      v7 -= 8;
    }
    while (v7);
  }
  int v10 = *(_DWORD *)(a1 + 48);
  if ((v10 & 0xF) == 0) {
    goto LABEL_13;
  }
  if ((v10 & 1) == 0)
  {
    if ((v10 & 2) == 0) {
      goto LABEL_10;
    }
LABEL_16:
    uint64_t v15 = sub_1B4BDC338(*(void *)(a1 + 88));
    v4 += v15 + ((9 * (__clz(v15 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v10 & 4) == 0)
    {
LABEL_11:
      if ((v10 & 8) == 0) {
        goto LABEL_13;
      }
      goto LABEL_12;
    }
    goto LABEL_17;
  }
  uint64_t v14 = sub_1B4BDAA48(*(void *)(a1 + 80));
  v4 += v14 + ((9 * (__clz(v14 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v10 & 2) != 0) {
    goto LABEL_16;
  }
LABEL_10:
  if ((v10 & 4) == 0) {
    goto LABEL_11;
  }
LABEL_17:
  uint64_t v16 = sub_1B4BDD598(*(void *)(a1 + 96));
  v4 += v16 + ((9 * (__clz(v16 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v10 & 8) != 0)
  {
LABEL_12:
    uint64_t v11 = sub_1B4BDC338(*(void *)(a1 + 104));
    v4 += v11 + ((9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_13:
  uint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    unint64_t v17 = v12 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v17 + 31) < 0) {
      uint64_t v18 = *(void *)(v17 + 16);
    }
    else {
      uint64_t v18 = *(unsigned __int8 *)(v17 + 31);
    }
    v4 += v18;
  }
  *(_DWORD *)(a1 + 52) = v4;
  return v4;
}

void sub_1B4BDF258(uint64_t a1, void *lpsrc)
{
  if (!__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1F0D537C8, (const struct __class_type_info *)&unk_1F0D530E8, 0))sub_1B4BD7788(); {
  sub_1B4BDF2E0(a1, (uint64_t)lpsrc);
  }
}

void sub_1B4BDF2E0(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    sub_1B4BE6194((uint64_t)v27, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 3397);
    uint64_t v4 = sub_1B4BE61AC(v27, "CHECK failed: (&from) != (this): ");
    sub_1B4BE62E8((uint64_t)&v26, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_1B4BE62F0((uint64_t)v27);
  }
  sub_1B4BEA6DC(a1 + 24, a2 + 24);
  uint64_t v5 = (void *)(a1 + 8);
  uint64_t v6 = *(void *)(a2 + 8);
  if (v6)
  {
    unint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v8 = (v6 & 0xFFFFFFFFFFFFFFFELL) + 8;
    if (*v5) {
      uint64_t v9 = (std::string *)((*v5 & 0xFFFFFFFFFFFFFFFELL) + 8);
    }
    else {
      uint64_t v9 = (std::string *)sub_1B4BD6F84((unint64_t *)(a1 + 8));
    }
    int v10 = *(char *)(v7 + 31);
    if (v10 >= 0) {
      uint64_t v11 = (const std::string::value_type *)v8;
    }
    else {
      uint64_t v11 = *(const std::string::value_type **)(v7 + 8);
    }
    if (v10 >= 0) {
      std::string::size_type v12 = *(unsigned __int8 *)(v7 + 31);
    }
    else {
      std::string::size_type v12 = *(void *)(v7 + 16);
    }
    std::string::append(v9, v11, v12);
  }
  sub_1B4BE0EC4(a1 + 56, a2 + 56);
  int v13 = *(_DWORD *)(a2 + 48);
  if ((v13 & 0xF) != 0)
  {
    if (v13)
    {
      *(_DWORD *)(a1 + 48) |= 1u;
      uint64_t v14 = *(void *)(a1 + 80);
      if (!v14)
      {
        uint64_t v15 = (void *)(*v5 & 0xFFFFFFFFFFFFFFFELL);
        if (*v5) {
          uint64_t v15 = (void *)*v15;
        }
        uint64_t v14 = sub_1B4BDF7B4((uint64_t)v15);
        *(void *)(a1 + 8sub_1B4BC92E4(&a9, 0) = v14;
      }
      if (*(void *)(a2 + 80)) {
        uint64_t v16 = *(void **)(a2 + 80);
      }
      else {
        uint64_t v16 = &unk_1E9D40760;
      }
      sub_1B4BDB380(v14, (uint64_t)v16);
    }
    if ((v13 & 2) != 0)
    {
      *(_DWORD *)(a1 + 48) |= 2u;
      uint64_t v17 = *(void *)(a1 + 88);
      if (!v17)
      {
        uint64_t v18 = (void *)(*v5 & 0xFFFFFFFFFFFFFFFELL);
        if (*v5) {
          uint64_t v18 = (void *)*v18;
        }
        uint64_t v17 = sub_1B4BDF884((uint64_t)v18);
        *(void *)(a1 + 88) = v17;
      }
      if (*(void *)(a2 + 88)) {
        unsigned int v19 = *(void **)(a2 + 88);
      }
      else {
        unsigned int v19 = &unk_1E9D408F0;
      }
      sub_1B4BDC528(v17, (uint64_t)v19);
      if ((v13 & 4) == 0)
      {
LABEL_25:
        if ((v13 & 8) == 0) {
          return;
        }
        goto LABEL_43;
      }
    }
    else if ((v13 & 4) == 0)
    {
      goto LABEL_25;
    }
    *(_DWORD *)(a1 + 48) |= 4u;
    uint64_t v20 = *(void *)(a1 + 96);
    if (!v20)
    {
      uint64_t v21 = (void *)(*v5 & 0xFFFFFFFFFFFFFFFELL);
      if (*v5) {
        uint64_t v21 = (void *)*v21;
      }
      uint64_t v20 = sub_1B4BDFA24((uint64_t)v21);
      *(void *)(a1 + 96) = v20;
    }
    if (*(void *)(a2 + 96)) {
      unsigned int v22 = *(void **)(a2 + 96);
    }
    else {
      unsigned int v22 = &unk_1E9D408A8;
    }
    sub_1B4BDD6D0(v20, (uint64_t)v22);
    if ((v13 & 8) != 0)
    {
LABEL_43:
      *(_DWORD *)(a1 + 48) |= 8u;
      uint64_t v23 = *(void *)(a1 + 104);
      if (!v23)
      {
        unsigned int v24 = (void *)(*v5 & 0xFFFFFFFFFFFFFFFELL);
        if (*v5) {
          unsigned int v24 = (void *)*v24;
        }
        uint64_t v23 = sub_1B4BDF884((uint64_t)v24);
        *(void *)(a1 + 104) = v23;
      }
      if (*(void *)(a2 + 104)) {
        unsigned int v25 = *(void **)(a2 + 104);
      }
      else {
        unsigned int v25 = &unk_1E9D408F0;
      }
      sub_1B4BDC528(v23, (uint64_t)v25);
    }
  }
}

void sub_1B4BDF504(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1B4BE62F0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1B4BDF51C(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    sub_1B4BDE424(a1);
    sub_1B4BDF2E0(a1, a2);
  }
}

uint64_t sub_1B4BDF568(uint64_t a1)
{
  uint64_t result = sub_1B4BEBB6C(a1 + 24);
  if (!result) {
    return result;
  }
  uint64_t result = sub_1B4BDF74C(a1 + 56);
  if (!result) {
    return result;
  }
  int v3 = *(_DWORD *)(a1 + 48);
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 80);
    if (!v4)
    {
      sub_1B4BE6194((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.h", 4741);
      uint64_t v5 = sub_1B4BE61AC(v13, "CHECK failed: !value || trainer_spec_ != nullptr: ");
      sub_1B4BE62E8((uint64_t)&v12, (const char **)&v5->__r_.__value_.__l.__data_);
      sub_1B4BE62F0((uint64_t)v13);
      uint64_t v4 = *(void *)(a1 + 80);
    }
    uint64_t result = sub_1B4BEBB6C(v4 + 16);
    if (!result) {
      return result;
    }
    int v3 = *(_DWORD *)(a1 + 48);
  }
  if ((v3 & 2) != 0)
  {
    uint64_t v6 = *(void *)(a1 + 88);
    if (!v6)
    {
      sub_1B4BE6194((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.h", 4824);
      unint64_t v7 = sub_1B4BE61AC(v13, "CHECK failed: !value || normalizer_spec_ != nullptr: ");
      sub_1B4BE62E8((uint64_t)&v12, (const char **)&v7->__r_.__value_.__l.__data_);
      sub_1B4BE62F0((uint64_t)v13);
      uint64_t v6 = *(void *)(a1 + 88);
    }
    uint64_t result = sub_1B4BEBB6C(v6 + 24);
    if (!result) {
      return result;
    }
    int v3 = *(_DWORD *)(a1 + 48);
  }
  if ((v3 & 4) == 0)
  {
LABEL_18:
    if ((v3 & 8) == 0) {
      return 1;
    }
    uint64_t v10 = *(void *)(a1 + 104);
    if (!v10)
    {
      sub_1B4BE6194((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.h", 4990);
      uint64_t v11 = sub_1B4BE61AC(v13, "CHECK failed: !value || denormalizer_spec_ != nullptr: ");
      sub_1B4BE62E8((uint64_t)&v12, (const char **)&v11->__r_.__value_.__l.__data_);
      sub_1B4BE62F0((uint64_t)v13);
      uint64_t v10 = *(void *)(a1 + 104);
    }
    uint64_t result = sub_1B4BEBB6C(v10 + 24);
    if (result) {
      return 1;
    }
    return result;
  }
  uint64_t v8 = *(void *)(a1 + 96);
  if (!v8)
  {
    sub_1B4BE6194((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.h", 4907);
    uint64_t v9 = sub_1B4BE61AC(v13, "CHECK failed: !value || self_test_data_ != nullptr: ");
    sub_1B4BE62E8((uint64_t)&v12, (const char **)&v9->__r_.__value_.__l.__data_);
    sub_1B4BE62F0((uint64_t)v13);
    uint64_t v8 = *(void *)(a1 + 96);
  }
  uint64_t result = sub_1B4BEBB6C(v8 + 16);
  if (result)
  {
    int v3 = *(_DWORD *)(a1 + 48);
    goto LABEL_18;
  }
  return result;
}

void sub_1B4BDF71C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1B4BE62F0((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_1B4BDF74C(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 8);
  do
  {
    int v3 = v2;
    BOOL v4 = __OFSUB__(v2--, 1);
    if (v2 < 0 != v4) {
      break;
    }
    uint64_t v5 = sub_1B4BB2478(a1, v2);
  }
  while ((sub_1B4BEBB6C(v5 + 16) & 1) != 0);
  return v3 < 1;
}

void *sub_1B4BDF7A4@<X0>(void *a1@<X8>)
{
  return sub_1B4BB8DC0(a1, "sentencepiece.ModelProto");
}

uint64_t sub_1B4BDF7B4(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  if (*(unsigned char *)(a1 + 24)) {
    (*(void (**)(void, void *, uint64_t))(**(void **)(*(void *)(a1 + 32) + 32) + 40))(*(void *)(*(void *)(a1 + 32) + 32), &unk_1F0D53158, 328);
  }
  uint64_t v2 = sub_1B4BE4B00(a1, 328);
  sub_1B4BD7A64(v2, a1);
  return v2;
}

void sub_1B4BDF860(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9929C0](v1, 0x10A1C4074230EEALL);
  _Unwind_Resume(a1);
}

uint64_t sub_1B4BDF884(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  if (*(unsigned char *)(a1 + 24)) {
    (*(void (**)(void, void *, uint64_t))(**(void **)(*(void *)(a1 + 32) + 32) + 40))(*(void *)(*(void *)(a1 + 32) + 32), &unk_1F0D531A8, 88);
  }
  uint64_t v2 = sub_1B4BE4B00(a1, 88);
  sub_1B4BDB90C(v2, a1);
  return v2;
}

void sub_1B4BDF930(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9929C0](v1, 0x10A1C402CDD3876);
  _Unwind_Resume(a1);
}

void *sub_1B4BDF954(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  if (*(unsigned char *)(a1 + 24)) {
    (*(void (**)(void, void *, uint64_t))(**(void **)(*(void *)(a1 + 32) + 32) + 40))(*(void *)(*(void *)(a1 + 32) + 32), &unk_1F0D53208, 40);
  }
  uint64_t v2 = (void *)sub_1B4BE4B00(a1, 40);
  sub_1B4BDC724(v2, a1);
  return v2;
}

void sub_1B4BDFA00(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9929C0](v1, 0x1081C400F7E8713);
  _Unwind_Resume(a1);
}

uint64_t sub_1B4BDFA24(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  if (*(unsigned char *)(a1 + 24)) {
    (*(void (**)(void, void *, uint64_t))(**(void **)(*(void *)(a1 + 32) + 32) + 40))(*(void *)(*(void *)(a1 + 32) + 32), &unk_1F0D53170, 72);
  }
  uint64_t v2 = sub_1B4BE4B00(a1, 72);
  sub_1B4BDCF24(v2, a1);
  return v2;
}

void sub_1B4BDFAD0(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9929C0](v1, 0x10A1C4075D007F8);
  _Unwind_Resume(a1);
}

void *sub_1B4BDFAF4(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  if (*(unsigned char *)(a1 + 24)) {
    (*(void (**)(void, void *, uint64_t))(**(void **)(*(void *)(a1 + 32) + 32) + 40))(*(void *)(*(void *)(a1 + 32) + 32), &unk_1F0D53260, 64);
  }
  uint64_t v2 = (void *)sub_1B4BE4B00(a1, 64);
  sub_1B4BDD7D8(v2, a1);
  return v2;
}

void sub_1B4BDFBA0(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9929C0](v1, 0x10A1C40F497E4DALL);
  _Unwind_Resume(a1);
}

uint64_t sub_1B4BDFBC4(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  if (*(unsigned char *)(a1 + 24)) {
    (*(void (**)(void, void *, uint64_t))(**(void **)(*(void *)(a1 + 32) + 32) + 40))(*(void *)(*(void *)(a1 + 32) + 32), &unk_1F0D530E8, 112);
  }
  uint64_t v2 = sub_1B4BE4B00(a1, 112);
  sub_1B4BDE168(v2, a1);
  return v2;
}

void sub_1B4BDFC70(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9929C0](v1, 0x10A1C4047CE62CFLL);
  _Unwind_Resume(a1);
}

uint64_t sub_1B4BDFC94()
{
  return sub_1B4BDF7B4(0);
}

uint64_t sub_1B4BDFC9C(uint64_t a1, uint64_t a2)
{
  return sub_1B4BDF7B4(a2);
}

uint64_t sub_1B4BDFCA4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 48);
}

uint64_t sub_1B4BDFCAC()
{
  return sub_1B4BDF884(0);
}

uint64_t sub_1B4BDFCB4(uint64_t a1, uint64_t a2)
{
  return sub_1B4BDF884(a2);
}

uint64_t sub_1B4BDFCBC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 52);
}

uint64_t sub_1B4BDFCC4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 80);
}

uint64_t sub_1B4BDFCCC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 81);
}

uint64_t sub_1B4BDFCD4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 82);
}

uint64_t sub_1B4BDFCDC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 83);
}

uint64_t sub_1B4BDFCE4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 65);
}

uint64_t sub_1B4BDFCEC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 66);
}

uint64_t sub_1B4BDFCF4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 67);
}

uint64_t sub_1B4BDFCFC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 64);
}

void *sub_1B4BDFD04()
{
  return sub_1B4BDF954(0);
}

void *sub_1B4BDFD0C(uint64_t a1, uint64_t a2)
{
  return sub_1B4BDF954(a2);
}

uint64_t sub_1B4BDFD14(uint64_t a1)
{
  return *(unsigned int *)(a1 + 20);
}

uint64_t sub_1B4BDFD1C()
{
  return sub_1B4BDFA24(0);
}

uint64_t sub_1B4BDFD24(uint64_t a1, uint64_t a2)
{
  return sub_1B4BDFA24(a2);
}

uint64_t sub_1B4BDFD2C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 64);
}

void *sub_1B4BDFD34()
{
  return sub_1B4BDFAF4(0);
}

void *sub_1B4BDFD3C(uint64_t a1, uint64_t a2)
{
  return sub_1B4BDFAF4(a2);
}

uint64_t sub_1B4BDFD44(uint64_t a1)
{
  return *(unsigned int *)(a1 + 44);
}

uint64_t sub_1B4BDFD4C()
{
  return sub_1B4BDFBC4(0);
}

uint64_t sub_1B4BDFD54(uint64_t a1, uint64_t a2)
{
  return sub_1B4BDFBC4(a2);
}

uint64_t sub_1B4BDFD5C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 52);
}

uint64_t sub_1B4BDFD64(uint64_t a1)
{
  return *(unsigned int *)(a1 + 64);
}

char *sub_1B4BDFD6C(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 80);
  if (!v1) {
    uint64_t v1 = &unk_1E9D40760;
  }
  uint64_t v2 = v1[22];
  if (v2)
  {
    uint64_t result = (char *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    uint64_t result = (char *)atomic_load_explicit(&qword_1E9D40370, memory_order_acquire);
    if (!result) {
      uint64_t result = (char *)sub_1B4BE4C54(&off_1E9D40358);
    }
  }
  if (result[23] < 0) {
    return *(char **)result;
  }
  return result;
}

char *sub_1B4BDFDD8(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 80);
  if (!v1) {
    uint64_t v1 = &unk_1E9D40760;
  }
  uint64_t v2 = v1[23];
  if (v2)
  {
    uint64_t result = (char *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    uint64_t result = (char *)atomic_load_explicit(&qword_1E9D40330, memory_order_acquire);
    if (!result) {
      uint64_t result = (char *)sub_1B4BE4C54(&off_1E9D40318);
    }
  }
  if (result[23] < 0) {
    return *(char **)result;
  }
  return result;
}

char *sub_1B4BDFE44(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 80);
  if (!v1) {
    uint64_t v1 = &unk_1E9D40760;
  }
  uint64_t v2 = v1[24];
  if (v2)
  {
    uint64_t result = (char *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    uint64_t result = (char *)atomic_load_explicit(&qword_1E9D40268, memory_order_acquire);
    if (!result) {
      uint64_t result = (char *)sub_1B4BE4C54(&off_1E9D40250);
    }
  }
  if (result[23] < 0) {
    return *(char **)result;
  }
  return result;
}

char *sub_1B4BDFEB0(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 80);
  if (!v1) {
    uint64_t v1 = &unk_1E9D40760;
  }
  uint64_t v2 = v1[25];
  if (v2)
  {
    uint64_t result = (char *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    uint64_t result = (char *)atomic_load_explicit(&qword_1E9D40288, memory_order_acquire);
    if (!result) {
      uint64_t result = (char *)sub_1B4BE4C54(&off_1E9D40270);
    }
  }
  if (result[23] < 0) {
    return *(char **)result;
  }
  return result;
}

char *sub_1B4BDFF1C(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 80);
  if (!v1) {
    uint64_t v1 = &unk_1E9D40760;
  }
  uint64_t v2 = v1[26];
  if (v2)
  {
    uint64_t result = (char *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    uint64_t result = (char *)atomic_load_explicit(&qword_1E9D40350, memory_order_acquire);
    if (!result) {
      uint64_t result = (char *)sub_1B4BE4C54(&off_1E9D40338);
    }
  }
  if (result[23] < 0) {
    return *(char **)result;
  }
  return result;
}

uint64_t sub_1B4BDFF88(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int8 **)(a1 + 80);
  if (!v1) {
    uint64_t v1 = (unsigned __int8 *)&unk_1E9D40760;
  }
  return v1[248];
}

uint64_t sub_1B4BDFFA4(uint64_t a1)
{
  uint64_t v1 = (unsigned __int8 *)&unk_1E9D40760;
  if (*(void *)(a1 + 80)) {
    uint64_t v1 = *(unsigned __int8 **)(a1 + 80);
  }
  return (v1[40] >> 3) & 1;
}

char *sub_1B4BDFFC4(uint64_t a1, int a2)
{
  uint64_t result = (char *)(*(void *)(sub_1B4BB2478(a1 + 56, a2) + 48) & 0xFFFFFFFFFFFFFFFELL);
  if (result[23] < 0) {
    return *(char **)result;
  }
  return result;
}

float sub_1B4BDFFFC(uint64_t a1, int a2)
{
  return *(float *)(sub_1B4BB2478(a1 + 56, a2) + 56);
}

BOOL sub_1B4BE001C(uint64_t a1, int a2)
{
  return *(_DWORD *)(sub_1B4BB2478(a1 + 56, a2) + 60) == 1;
}

BOOL sub_1B4BE0044(uint64_t a1, int a2)
{
  return *(_DWORD *)(sub_1B4BB2478(a1 + 56, a2) + 60) == 2;
}

BOOL sub_1B4BE006C(uint64_t a1, int a2)
{
  return *(_DWORD *)(sub_1B4BB2478(a1 + 56, a2) + 60) == 3;
}

BOOL sub_1B4BE0094(uint64_t a1, int a2)
{
  return *(_DWORD *)(sub_1B4BB2478(a1 + 56, a2) + 60) == 5;
}

BOOL sub_1B4BE00BC(uint64_t a1, int a2)
{
  return *(_DWORD *)(sub_1B4BB2478(a1 + 56, a2) + 60) == 4;
}

BOOL sub_1B4BE00E4(uint64_t a1, int a2)
{
  return *(_DWORD *)(sub_1B4BB2478(a1 + 56, a2) + 60) == 6;
}

char *sub_1B4BE010C(uint64_t a1)
{
  uint64_t v1 = *(char **)(a1 + 88);
  if (!v1) {
    uint64_t v1 = (char *)&unk_1E9D408F0;
  }
  return v1 + 16;
}

char *sub_1B4BE0128(uint64_t a1)
{
  uint64_t v1 = *(char **)(a1 + 104);
  if (!v1) {
    uint64_t v1 = (char *)&unk_1E9D408F0;
  }
  return v1 + 16;
}

uint64_t sub_1B4BE0144(uint64_t a1)
{
  uint64_t v1 = *(_DWORD **)(a1 + 80);
  if (!v1) {
    uint64_t v1 = &unk_1E9D40760;
  }
  int v2 = v1[68];
  unsigned int v3 = v2 - 2;
  unsigned int v4 = v2 - 1;
  if (v3 >= 3) {
    return 0;
  }
  else {
    return v4;
  }
}

uint64_t sub_1B4BE0170(uint64_t a1)
{
  return *(unsigned int *)(a1 + 48);
}

char *sub_1B4BE0178(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 64);
  if (!v1) {
    uint64_t v1 = &unk_1E9D40760;
  }
  uint64_t v2 = v1[22];
  if (v2)
  {
    uint64_t result = (char *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    uint64_t result = (char *)atomic_load_explicit(&qword_1E9D40370, memory_order_acquire);
    if (!result) {
      uint64_t result = (char *)sub_1B4BE4C54(&off_1E9D40358);
    }
  }
  if (result[23] < 0) {
    return *(char **)result;
  }
  return result;
}

char *sub_1B4BE01E4(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 64);
  if (!v1) {
    uint64_t v1 = &unk_1E9D40760;
  }
  uint64_t v2 = v1[23];
  if (v2)
  {
    uint64_t result = (char *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    uint64_t result = (char *)atomic_load_explicit(&qword_1E9D40330, memory_order_acquire);
    if (!result) {
      uint64_t result = (char *)sub_1B4BE4C54(&off_1E9D40318);
    }
  }
  if (result[23] < 0) {
    return *(char **)result;
  }
  return result;
}

char *sub_1B4BE0250(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 64);
  if (!v1) {
    uint64_t v1 = &unk_1E9D40760;
  }
  uint64_t v2 = v1[24];
  if (v2)
  {
    uint64_t result = (char *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    uint64_t result = (char *)atomic_load_explicit(&qword_1E9D40268, memory_order_acquire);
    if (!result) {
      uint64_t result = (char *)sub_1B4BE4C54(&off_1E9D40250);
    }
  }
  if (result[23] < 0) {
    return *(char **)result;
  }
  return result;
}

char *sub_1B4BE02BC(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 64);
  if (!v1) {
    uint64_t v1 = &unk_1E9D40760;
  }
  uint64_t v2 = v1[25];
  if (v2)
  {
    uint64_t result = (char *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    uint64_t result = (char *)atomic_load_explicit(&qword_1E9D40288, memory_order_acquire);
    if (!result) {
      uint64_t result = (char *)sub_1B4BE4C54(&off_1E9D40270);
    }
  }
  if (result[23] < 0) {
    return *(char **)result;
  }
  return result;
}

char *sub_1B4BE0328(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 64);
  if (!v1) {
    uint64_t v1 = &unk_1E9D40760;
  }
  uint64_t v2 = v1[26];
  if (v2)
  {
    uint64_t result = (char *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    uint64_t result = (char *)atomic_load_explicit(&qword_1E9D40350, memory_order_acquire);
    if (!result) {
      uint64_t result = (char *)sub_1B4BE4C54(&off_1E9D40338);
    }
  }
  if (result[23] < 0) {
    return *(char **)result;
  }
  return result;
}

uint64_t sub_1B4BE0394(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int8 **)(a1 + 64);
  if (!v1) {
    uint64_t v1 = (unsigned __int8 *)&unk_1E9D40760;
  }
  return v1[248];
}

uint64_t sub_1B4BE03B0(uint64_t a1)
{
  uint64_t v1 = (unsigned __int8 *)&unk_1E9D40760;
  if (*(void *)(a1 + 64)) {
    uint64_t v1 = *(unsigned __int8 **)(a1 + 64);
  }
  return (v1[40] >> 3) & 1;
}

uint64_t sub_1B4BE03D0(uint64_t a1)
{
  uint64_t v1 = *(_DWORD **)(a1 + 64);
  if (!v1) {
    uint64_t v1 = &unk_1E9D40760;
  }
  int v2 = v1[68];
  unsigned int v3 = v2 - 2;
  unsigned int v4 = v2 - 1;
  if (v3 >= 3) {
    return 0;
  }
  else {
    return v4;
  }
}

char *sub_1B4BE03FC(uint64_t a1, int a2)
{
  uint64_t result = (char *)(*(void *)(sub_1B4BB2478(a1 + 40, a2) + 48) & 0xFFFFFFFFFFFFFFFELL);
  if (result[23] < 0) {
    return *(char **)result;
  }
  return result;
}

float sub_1B4BE0434(uint64_t a1, int a2)
{
  return *(float *)(sub_1B4BB2478(a1 + 40, a2) + 56);
}

BOOL sub_1B4BE0454(uint64_t a1, int a2)
{
  return *(_DWORD *)(sub_1B4BB2478(a1 + 40, a2) + 60) == 1;
}

BOOL sub_1B4BE047C(uint64_t a1, int a2)
{
  return *(_DWORD *)(sub_1B4BB2478(a1 + 40, a2) + 60) == 2;
}

BOOL sub_1B4BE04A4(uint64_t a1, int a2)
{
  return *(_DWORD *)(sub_1B4BB2478(a1 + 40, a2) + 60) == 3;
}

BOOL sub_1B4BE04CC(uint64_t a1, int a2)
{
  return *(_DWORD *)(sub_1B4BB2478(a1 + 40, a2) + 60) == 5;
}

BOOL sub_1B4BE04F4(uint64_t a1, int a2)
{
  return *(_DWORD *)(sub_1B4BB2478(a1 + 40, a2) + 60) == 4;
}

BOOL sub_1B4BE051C(uint64_t a1, int a2)
{
  return *(_DWORD *)(sub_1B4BB2478(a1 + 40, a2) + 60) == 6;
}

char *sub_1B4BE0544(uint64_t a1)
{
  uint64_t v1 = *(char **)(a1 + 72);
  if (!v1) {
    uint64_t v1 = (char *)&unk_1E9D408F0;
  }
  return v1 + 16;
}

char *sub_1B4BE0560(uint64_t a1)
{
  uint64_t v1 = *(char **)(a1 + 88);
  if (!v1) {
    uint64_t v1 = (char *)&unk_1E9D408F0;
  }
  return v1 + 16;
}

void sub_1B4BE057C(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
}

uint64_t sub_1B4BE0590(uint64_t a1, int a2)
{
  if (a2 < 0)
  {
    sub_1B4BE6194((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1705);
    unsigned int v4 = sub_1B4BE61AC(v8, "CHECK failed: (index) >= (0): ");
    sub_1B4BE62E8((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_1B4BE62F0((uint64_t)v8);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    sub_1B4BE6194((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1706);
    uint64_t v5 = sub_1B4BE61AC(v8, "CHECK failed: (index) < (current_size_): ");
    sub_1B4BE62E8((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_1B4BE62F0((uint64_t)v8);
  }
  return *(void *)(*(void *)(a1 + 16) + 8 * a2 + 8);
}

void sub_1B4BE0650(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1B4BE62F0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B4BE0670(uint64_t result)
{
  uint64_t v1 = *(unsigned int *)(result + 8);
  if ((v1 & 0x80000000) != 0)
  {
    sub_1B4BE6194((uint64_t)v6, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1780);
    unsigned int v4 = sub_1B4BE61AC(v6, "CHECK failed: (n) >= (0): ");
    sub_1B4BE62E8((uint64_t)&v5, (const char **)&v4->__r_.__value_.__l.__data_);
    return sub_1B4BE62F0((uint64_t)v6);
  }
  else if (v1)
  {
    uint64_t v2 = *(void *)(result + 16) + 8;
    do
    {
      uint64_t v3 = *(void *)v2;
      if (*(char *)(*(void *)v2 + 23) < 0)
      {
        **(unsigned char **)uint64_t v3 = 0;
        *(void *)(v3 + 8) = 0;
      }
      else
      {
        *(unsigned char *)uint64_t v3 = 0;
        *(unsigned char *)(v3 + 23) = 0;
      }
      v2 += 8;
      --v1;
    }
    while (v1);
    *(_DWORD *)(result + 8) = 0;
  }
  return result;
}

void sub_1B4BE071C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1B4BE62F0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B4BE0734(uint64_t a1, int a2)
{
  if (a2 < 0)
  {
    sub_1B4BE6194((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1705);
    unsigned int v4 = sub_1B4BE61AC(v8, "CHECK failed: (index) >= (0): ");
    sub_1B4BE62E8((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_1B4BE62F0((uint64_t)v8);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    sub_1B4BE6194((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1706);
    char v5 = sub_1B4BE61AC(v8, "CHECK failed: (index) < (current_size_): ");
    sub_1B4BE62E8((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_1B4BE62F0((uint64_t)v8);
  }
  return *(void *)(*(void *)(a1 + 16) + 8 * a2 + 8);
}

void sub_1B4BE07F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1B4BE62F0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B4BE0814(uint64_t result)
{
  uint64_t v1 = *(unsigned int *)(result + 8);
  if ((v1 & 0x80000000) != 0)
  {
    sub_1B4BE6194((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1780);
    char v5 = sub_1B4BE61AC(v7, "CHECK failed: (n) >= (0): ");
    sub_1B4BE62E8((uint64_t)&v6, (const char **)&v5->__r_.__value_.__l.__data_);
    return sub_1B4BE62F0((uint64_t)v7);
  }
  else if (v1)
  {
    uint64_t v2 = result;
    uint64_t v3 = (uint64_t *)(*(void *)(result + 16) + 8);
    do
    {
      uint64_t v4 = *v3++;
      uint64_t result = sub_1B4BDC92C(v4);
      --v1;
    }
    while (v1);
    *(_DWORD *)(v2 + 8) = 0;
  }
  return result;
}

void sub_1B4BE08AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1B4BE62F0((uint64_t)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_1B4BE08C4(unsigned __int8 *result)
{
  uint64_t v1 = *((unsigned int *)result + 2);
  if ((v1 & 0x80000000) != 0)
  {
    sub_1B4BE6194((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1780);
    char v5 = sub_1B4BE61AC(v7, "CHECK failed: (n) >= (0): ");
    sub_1B4BE62E8((uint64_t)&v6, (const char **)&v5->__r_.__value_.__l.__data_);
    return (unsigned __int8 *)sub_1B4BE62F0((uint64_t)v7);
  }
  else if (v1)
  {
    uint64_t v2 = result;
    uint64_t v3 = (uint64_t *)(*((void *)result + 2) + 8);
    do
    {
      uint64_t v4 = *v3++;
      uint64_t result = sub_1B4BDD9C4(v4);
      --v1;
    }
    while (v1);
    *((_DWORD *)v2 + 2) = 0;
  }
  return result;
}

void sub_1B4BE095C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1B4BE62F0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B4BE0974(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  if (a2 == result)
  {
    sub_1B4BE6194((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1799);
    uint64_t v4 = sub_1B4BE61AC(v11, "CHECK failed: (&other) != (this): ");
    sub_1B4BE62E8((uint64_t)&v10, (const char **)&v4->__r_.__value_.__l.__data_);
    uint64_t result = sub_1B4BE62F0((uint64_t)v11);
  }
  unsigned int v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    char v6 = (const std::string **)(*(void *)(a2 + 16) + 8);
    char v7 = (std::string **)sub_1B4BF8C00((uint64_t *)v3, v5);
    uint64_t result = (uint64_t)sub_1B4BE0A64((std::string *)v3, v7, v6, v5, **(_DWORD **)(v3 + 16) - *(_DWORD *)(v3 + 8));
    signed int v8 = *(_DWORD *)(v3 + 8) + v5;
    *(_DWORD *)(v3 + 8) = v8;
    uint64_t v9 = *(signed int **)(v3 + 16);
    if (*v9 < v8) {
      *uint64_t v9 = v8;
    }
  }
  return result;
}

void sub_1B4BE0A4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1B4BE62F0((uint64_t)va);
  _Unwind_Resume(a1);
}

std::string *sub_1B4BE0A64(std::string *result, std::string **a2, const std::string **a3, unsigned int a4, unsigned int a5)
{
  uint64_t v9 = (std::string::__raw *)result;
  if ((int)a5 >= (int)a4) {
    uint64_t v10 = a4;
  }
  else {
    uint64_t v10 = a5;
  }
  if ((int)v10 >= 1)
  {
    uint64_t v11 = a3;
    char v12 = a2;
    do
    {
      uint64_t v14 = *v11++;
      int v13 = v14;
      uint64_t v15 = *v12++;
      uint64_t result = std::string::operator=(v15, v13);
      --v10;
    }
    while (v10);
  }
  BOOL v16 = __OFSUB__(a4, a5);
  int v17 = a4 - a5;
  if (!((v17 < 0) ^ v16 | (v17 == 0)))
  {
    std::string::size_type v18 = v9->__words[0];
    unsigned int v19 = &a3[a5];
    uint64_t v20 = &a2[a5];
    do
    {
      uint64_t v21 = *v19;
      if (!v18) {
        operator new();
      }
      if (*(unsigned char *)(v18 + 24)) {
        (*(void (**)(void, void *, uint64_t))(**(void **)(*(void *)(v18 + 32) + 32) + 40))(*(void *)(*(void *)(v18 + 32) + 32), &unk_1F0D53AB8, 24);
      }
      unsigned int v22 = (std::string *)sub_1B4BE4804((void *)v18, 0x18uLL, (uint64_t)sub_1B4BE057C);
      v22->__r_.__value_.__r.__words[0] = 0;
      v22->__r_.__value_.__l.__size_ = 0;
      v22->__r_.__value_.__r.__words[2] = 0;
      uint64_t result = std::string::operator=(v22, v21);
      *v20++ = v22;
      ++v19;
      --v17;
    }
    while (v17);
  }
  return result;
}

uint64_t *sub_1B4BE0B9C(uint64_t *a1)
{
  sub_1B4BE0BD8(a1);
  return sub_1B4BD727C(a1);
}

void sub_1B4BE0BD8(void *a1)
{
  uint64_t v2 = (uint64_t *)a1[2];
  if (v2 && !*a1)
  {
    uint64_t v3 = v2 + 1;
    uint64_t v4 = *(unsigned int *)v2;
    if ((int)v4 >= 1)
    {
      do
      {
        if (*v3)
        {
          uint64_t v5 = sub_1B4BDC794(*v3);
          MEMORY[0x1BA9929C0](v5, 0x1081C400F7E8713);
        }
        ++v3;
        --v4;
      }
      while (v4);
      uint64_t v2 = (uint64_t *)a1[2];
    }
    operator delete(v2);
  }
  a1[2] = 0;
}

unint64_t sub_1B4BE0C58(unint64_t result, uint64_t a2)
{
  unint64_t v3 = result;
  if (a2 == result)
  {
    sub_1B4BE6194((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1799);
    uint64_t v4 = sub_1B4BE61AC(v11, "CHECK failed: (&other) != (this): ");
    sub_1B4BE62E8((uint64_t)&v10, (const char **)&v4->__r_.__value_.__l.__data_);
    uint64_t result = sub_1B4BE62F0((uint64_t)v11);
  }
  unsigned int v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    char v6 = (uint64_t *)(*(void *)(a2 + 16) + 8);
    char v7 = (unint64_t *)sub_1B4BF8C00((uint64_t *)v3, v5);
    uint64_t result = sub_1B4BE0D48(v3, v7, v6, v5, **(_DWORD **)(v3 + 16) - *(_DWORD *)(v3 + 8));
    signed int v8 = *(_DWORD *)(v3 + 8) + v5;
    *(_DWORD *)(v3 + 8) = v8;
    uint64_t v9 = *(signed int **)(v3 + 16);
    if (*v9 < v8) {
      *uint64_t v9 = v8;
    }
  }
  return result;
}

void sub_1B4BE0D30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1B4BE62F0((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t sub_1B4BE0D48(unint64_t result, unint64_t *a2, uint64_t *a3, unsigned int a4, unsigned int a5)
{
  uint64_t v9 = (uint64_t *)result;
  if ((int)a5 >= (int)a4) {
    uint64_t v10 = a4;
  }
  else {
    uint64_t v10 = a5;
  }
  if ((int)v10 >= 1)
  {
    uint64_t v11 = a3;
    char v12 = a2;
    do
    {
      uint64_t v14 = *v11++;
      uint64_t v13 = v14;
      unint64_t v15 = *v12++;
      uint64_t result = sub_1B4BE0DF8(v13, v15);
      --v10;
    }
    while (v10);
  }
  BOOL v16 = __OFSUB__(a4, a5);
  int v17 = a4 - a5;
  if (!((v17 < 0) ^ v16 | (v17 == 0)))
  {
    uint64_t v18 = *v9;
    unsigned int v19 = &a3[a5];
    uint64_t v20 = &a2[a5];
    do
    {
      uint64_t v21 = *v19++;
      unsigned int v22 = sub_1B4BDF954(v18);
      uint64_t result = sub_1B4BE0DF8(v21, (unint64_t)v22);
      *v20++ = (unint64_t)v22;
      --v17;
    }
    while (v17);
  }
  return result;
}

unint64_t sub_1B4BE0DF8(uint64_t a1, unint64_t a2)
{
  return sub_1B4BDCDC0(a2, a1);
}

uint64_t *sub_1B4BE0E08(uint64_t *a1)
{
  sub_1B4BE0E44(a1);
  return sub_1B4BD727C(a1);
}

void sub_1B4BE0E44(void *a1)
{
  uint64_t v2 = (uint64_t *)a1[2];
  if (v2 && !*a1)
  {
    unint64_t v3 = v2 + 1;
    uint64_t v4 = *(unsigned int *)v2;
    if ((int)v4 >= 1)
    {
      do
      {
        if (*v3)
        {
          uint64_t v5 = sub_1B4BDD86C(*v3);
          MEMORY[0x1BA9929C0](v5, 0x10A1C40F497E4DALL);
        }
        ++v3;
        --v4;
      }
      while (v4);
      uint64_t v2 = (uint64_t *)a1[2];
    }
    operator delete(v2);
  }
  a1[2] = 0;
}

void sub_1B4BE0EC4(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    sub_1B4BE6194((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1799);
    uint64_t v4 = sub_1B4BE61AC(v11, "CHECK failed: (&other) != (this): ");
    sub_1B4BE62E8((uint64_t)&v10, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_1B4BE62F0((uint64_t)v11);
  }
  unsigned int v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    char v6 = (uint64_t *)(*(void *)(a2 + 16) + 8);
    char v7 = (uint64_t *)sub_1B4BF8C00((uint64_t *)a1, v5);
    sub_1B4BE0FB4((uint64_t *)a1, v7, v6, v5, **(_DWORD **)(a1 + 16) - *(_DWORD *)(a1 + 8));
    signed int v8 = *(_DWORD *)(a1 + 8) + v5;
    *(_DWORD *)(a1 + 8) = v8;
    uint64_t v9 = *(signed int **)(a1 + 16);
    if (*v9 < v8) {
      *uint64_t v9 = v8;
    }
  }
}

void sub_1B4BE0F9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1B4BE62F0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1B4BE0FB4(uint64_t *a1, uint64_t *a2, uint64_t *a3, unsigned int a4, unsigned int a5)
{
  if ((int)a5 >= (int)a4) {
    uint64_t v10 = a4;
  }
  else {
    uint64_t v10 = a5;
  }
  if ((int)v10 >= 1)
  {
    uint64_t v11 = a3;
    char v12 = a2;
    do
    {
      uint64_t v14 = *v11++;
      uint64_t v13 = v14;
      uint64_t v15 = *v12++;
      sub_1B4BE1064(v13, v15);
      --v10;
    }
    while (v10);
  }
  BOOL v16 = __OFSUB__(a4, a5);
  int v17 = a4 - a5;
  if (!((v17 < 0) ^ v16 | (v17 == 0)))
  {
    uint64_t v18 = *a1;
    unsigned int v19 = &a3[a5];
    uint64_t v20 = &a2[a5];
    do
    {
      uint64_t v21 = *v19++;
      unsigned int v22 = sub_1B4BDFAF4(v18);
      sub_1B4BE1064(v21, (uint64_t)v22);
      *v20++ = (uint64_t)v22;
      --v17;
    }
    while (v17);
  }
}

void sub_1B4BE1064(uint64_t a1, uint64_t a2)
{
}

void sub_1B4BE1074()
{
}

void sub_1B4BE10BC()
{
}

void sub_1B4BE1118(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9929C0](v1, 0xA1C409BE6959DLL);
  _Unwind_Resume(a1);
}

void *sub_1B4BE113C(void *a1, const char *a2, uint64_t a3)
{
  *a1 = &unk_1F0D54048;
  char v6 = a1 + 1;
  sub_1B4BE3D84(a1 + 1);
  if (a3) {
    operator new();
  }
  char v7 = (void *)MEMORY[0x1E4FBA238];
  a1[2] = MEMORY[0x1E4FBA238];
  if ((*((unsigned char *)v7 + *(void *)(*v7 - 24) + 32) & 5) != 0)
  {
    unsigned int v15 = 5;
    sub_1B4BB2204((uint64_t)v16);
    sub_1B4BB34F0(v16, (uint64_t)"\"", 1);
    size_t v8 = strlen(a2);
    sub_1B4BB34F0(v16, (uint64_t)a2, v8);
    sub_1B4BB34F0(v16, (uint64_t)"\": ", 3);
    uint64_t v9 = __error();
    sub_1B4BE1E50(*v9);
    if ((v14 & 0x80u) == 0) {
      uint64_t v10 = __p;
    }
    else {
      uint64_t v10 = (void **)__p[0];
    }
    if ((v14 & 0x80u) == 0) {
      uint64_t v11 = v14;
    }
    else {
      uint64_t v11 = (uint64_t)__p[1];
    }
    sub_1B4BB34F0(v16, (uint64_t)v10, v11);
    sub_1B4BAFA7C(&v15, (uint64_t)&v19);
    sub_1B4BE3FAC(v6, &v19);
    sub_1B4BE3D8C(&v19);
    if ((char)v14 < 0) {
      operator delete(__p[0]);
    }
    v16[0] = *MEMORY[0x1E4FBA418];
    *(void *)((char *)v16 + *(void *)(v16[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
    v16[1] = MEMORY[0x1E4FBA470] + 16;
    if (v17 < 0) {
      operator delete((void *)v16[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x1BA992920](&v18);
  }
  return a1;
}

void sub_1B4BE13B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  sub_1B4BE3D8C((uint64_t *)(v16 - 56));
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_1B4BAFB0C((uint64_t)&a15);
  sub_1B4BE3D8C(v15);
  _Unwind_Resume(a1);
}

void sub_1B4BE142C(void *a1)
{
  sub_1B4BE1670(a1);
  JUMPOUT(0x1BA9929C0);
}

uint64_t sub_1B4BE1464@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B4BE3FA8(a2, a1 + 8);
}

BOOL sub_1B4BE1470(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void **)(a1 + 16);
  std::ios_base::getloc((const std::ios_base *)((char *)v3 + *(void *)(*v3 - 24)));
  uint64_t v4 = std::locale::use_facet(&v8, MEMORY[0x1E4FBA258]);
  unsigned __int8 v5 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v4->__vftable[2].~facet_0)(v4, 10);
  std::locale::~locale(&v8);
  char v6 = sub_1B4BE16F4(v3, a2, v5);
  return (*((unsigned char *)v6 + *(void *)(*v6 - 24) + 32) & 5) == 0;
}

void sub_1B4BE1540(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

BOOL sub_1B4BE1554(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(a1 + 16);
  unint64_t v3 = (void *)MEMORY[0x1E4FBA238];
  if (v2 == (void *)MEMORY[0x1E4FBA238])
  {
    if ((int)sub_1B4BE1C40() <= 2)
    {
      char v11 = 0;
      uint64_t v4 = sub_1B4BB34F0(MEMORY[0x1E4FBA240], (uint64_t)"filesystem.cc", 13);
      sub_1B4BB34F0(v4, (uint64_t)"(", 1);
      unsigned __int8 v5 = (void *)std::ostream::operator<<();
      char v6 = sub_1B4BB34F0(v5, (uint64_t)") ", 2);
      char v7 = sub_1B4BB34F0(v6, (uint64_t)"LOG(", 4);
      std::locale v8 = sub_1B4BB34F0(v7, (uint64_t)"ERROR", 5);
      uint64_t v9 = sub_1B4BB34F0(v8, (uint64_t)") ", 2);
      sub_1B4BB34F0(v9, (uint64_t)"ReadAll is not supported for stdin.", 35);
      sub_1B4BB239C(&v11);
    }
  }
  else
  {
    sub_1B4BE18E4(a2, *(void **)((char *)v2 + *(void *)(*v2 - 24) + 40), 0);
  }
  return v2 != v3;
}

void sub_1B4BE165C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void *sub_1B4BE1670(void *a1)
{
  *a1 = &unk_1F0D54048;
  uint64_t v2 = a1[2];
  if (v2 != MEMORY[0x1E4FBA238] && v2 != 0) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  sub_1B4BE3D8C(a1 + 1);
  return a1;
}

void *sub_1B4BE16F4(void *a1, uint64_t a2, unsigned __int8 a3)
{
  MEMORY[0x1BA9926F0](&v11, a1, 1);
  if (!v11) {
    return a1;
  }
  if (*(char *)(a2 + 23) < 0)
  {
    **(unsigned char **)a2 = 0;
    *(void *)(a2 + 8) = 0;
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 23) = 0;
  }
  uint64_t v6 = 0;
  while (1)
  {
    char v7 = *(void **)((char *)a1 + *(void *)(*a1 - 24) + 40);
    std::locale v8 = (unsigned char *)v7[3];
    if (v8 != (unsigned char *)v7[4])
    {
      v7[3] = v8 + 1;
      LOBYTE(v7) = *v8;
      goto LABEL_9;
    }
    LODWORD(v7) = (*(uint64_t (**)(void *))(*v7 + 80))(v7);
    if (v7 == -1) {
      break;
    }
LABEL_9:
    if (v7 == a3)
    {
      int v9 = 0;
      goto LABEL_17;
    }
    std::string::push_back((std::string *)a2, (std::string::value_type)v7);
    --v6;
    if (*(char *)(a2 + 23) < 0 && *(void *)(a2 + 8) == 0x7FFFFFFFFFFFFFF7)
    {
      int v9 = 4;
      goto LABEL_17;
    }
  }
  if (v6) {
    int v9 = 2;
  }
  else {
    int v9 = 6;
  }
LABEL_17:
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | v9);
  return a1;
}

void sub_1B4BE1854(void *a1)
{
  __cxa_begin_catch(a1);
  uint64_t v2 = *v1;
  *(_DWORD *)((char *)v1 + *(void *)(*v1 - 24) + 32) |= 1u;
  if ((*((unsigned char *)v1 + *(void *)(v2 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x1B4BE1814);
  }
  __cxa_rethrow();
}

void sub_1B4BE18D0(_Unwind_Exception *a1)
{
}

void sub_1B4BE18E4(uint64_t a1, void *a2, void *a3)
{
  sub_1B4BE1964(&__p, a2, a3);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  MEMORY[0x1BA992600](a1, p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1B4BE1948(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1B4BE1964(std::string *a1, void *a2, void *a3)
{
  char v11 = a3;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = 0;
  while (1)
  {
    if (a2)
    {
      if (a2[3] == a2[4])
      {
        int v6 = (*(uint64_t (**)(void *))(*a2 + 72))(a2);
        int v5 = v6 == -1;
        if (v6 == -1) {
          a2 = 0;
        }
      }
      else
      {
        int v5 = 0;
      }
    }
    else
    {
      int v5 = 1;
    }
    BOOL result = sub_1B4BE1AC4(&v11);
    if (v5 == result) {
      break;
    }
    std::locale v8 = (std::string::value_type *)a2[3];
    if (v8 == (std::string::value_type *)a2[4]) {
      std::string::value_type v9 = (*(uint64_t (**)(void *))(*a2 + 72))(a2);
    }
    else {
      std::string::value_type v9 = *v8;
    }
    std::string::push_back(a1, v9);
    uint64_t v10 = a2[3];
    if (v10 == a2[4]) {
      (*(void (**)(void *))(*a2 + 80))(a2);
    }
    else {
      a2[3] = v10 + 1;
    }
  }
  return result;
}

void sub_1B4BE1A94(void *a1)
{
  __cxa_begin_catch(a1);
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  __cxa_rethrow();
}

void sub_1B4BE1AB0(_Unwind_Exception *a1)
{
}

BOOL sub_1B4BE1AC4(void **a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    if (v2[3] != v2[4]) {
      return 0;
    }
    if ((*(unsigned int (**)(void *))(*v2 + 72))(v2) != -1) {
      return *a1 == 0;
    }
    *a1 = 0;
  }
  return 1;
}

uint64_t sub_1B4BE1B44()
{
  unsigned int v0 = atomic_load(&dword_1E9D40378);
  if (v0 != -1) {
    return atomic_load(&dword_1E9D40378);
  }
  sub_1B4BE1BCC(&v3);
  uint64_t v1 = MEMORY[0x1BA9927F0](&v3);
  std::random_device::~random_device(&v3);
  return v1;
}

void sub_1B4BE1BA4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, std::random_device a11, std::random_device a12)
{
  std::random_device::~random_device(&a11);
  __cxa_begin_catch(a1);
  atomic_load(v12);
  __cxa_end_catch();
  JUMPOUT(0x1B4BE1B90);
}

std::random_device *sub_1B4BE1BCC(std::random_device *a1)
{
  sub_1B4BB8DC0(&__token, "/dev/urandom");
  std::random_device::random_device(a1, &__token);
  if (SHIBYTE(__token.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__token.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1B4BE1C24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1B4BE1C40()
{
  return atomic_load((unsigned int *)&unk_1E9D40670);
}

uint64_t sub_1B4BE1C50(unsigned __int8 *a1, uint64_t a2, uint64_t *a3)
{
  int v3 = (char)*a1;
  if ((v3 & 0x80000000) == 0)
  {
    *a3 = 1;
    return *a1;
  }
  unint64_t v5 = a2 - (void)a1;
  if ((unint64_t)(a2 - (void)a1) >= 2)
  {
    if ((v3 & 0xE0) == 0xC0)
    {
      char v6 = a1[1];
      if (v6 <= -65)
      {
        uint64_t result = v6 & 0x3F | ((v3 & 0x1F) << 6);
        if (result >= 0x80)
        {
          uint64_t v7 = 2;
LABEL_8:
          *a3 = v7;
          return result;
        }
      }
    }
    else if (v5 >= 3)
    {
      if ((v3 & 0xF0) == 0xE0)
      {
        int v8 = (char)a1[1];
        if (v8 <= -65)
        {
          char v9 = a1[2];
          if (v9 <= -65)
          {
            uint64_t result = v9 & 0x3F | ((v8 & 0x3F) << 6) & 0xFFF | ((v3 & 0xF) << 12);
            if (result >= 0x800
              && (((v3 & 0xF) << 12) - 57344 < 0x102000u || result >> 11 <= 0x1A))
            {
              uint64_t v7 = 3;
              goto LABEL_8;
            }
          }
        }
      }
      else if (v5 >= 4 && (v3 & 0xF8) == 0xF0)
      {
        int v10 = (char)a1[1];
        if (v10 <= -65)
        {
          int v11 = (char)a1[2];
          if (v11 <= -65)
          {
            char v12 = a1[3];
            if (v12 <= -65)
            {
              int v13 = ((v3 & 7) << 18) | ((v10 & 0x3F) << 12);
              uint64_t result = v12 & 0x3F | ((v11 & 0x3F) << 6) | v13;
              if (result >= 0x10000 && (v13 - 57344) < 0x102000)
              {
                uint64_t v7 = 4;
                goto LABEL_8;
              }
            }
          }
        }
      }
    }
  }
  *a3 = 1;
  return 65533;
}

uint64_t sub_1B4BE1D98()
{
  unsigned int v0 = off_1EC5511D8;
  if ((*(unsigned char *)off_1EC5511D8(&off_1EC5511D8) & 1) == 0)
  {
    sub_1B4BE1B44();
    uint64_t v2 = (_DWORD *)off_1EC5511C0(&off_1EC5511C0);
    *uint64_t v2 = v4;
    do
    {
      uint64_t v5 = v3(&off_1EC5511C0);
      *(_DWORD *)(v5 + 4 * v7) = v6;
    }
    while (v7 != 623);
    *(void *)(v3(&off_1EC5511C0) + 2496) = 0;
    *(unsigned char *)v0(&off_1EC5511D8) = 1;
  }
  return off_1EC5511C0(&off_1EC5511C0);
}

uint64_t sub_1B4BE1E50(int a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  strerror_r(a1, __strerrbuf, 0x3FFuLL);
  sub_1B4BB2204((uint64_t)v4);
  size_t v1 = strlen(__strerrbuf);
  uint64_t v2 = sub_1B4BB34F0(v4, (uint64_t)__strerrbuf, v1);
  sub_1B4BB34F0(v2, (uint64_t)" Error #", 8);
  std::ostream::operator<<();
  std::stringbuf::str();
  v4[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v4 + *(void *)(v4[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v4[1] = MEMORY[0x1E4FBA470] + 16;
  if (v5 < 0) {
    operator delete((void *)v4[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1BA992920](&v6);
}

void sub_1B4BE1FE0(_Unwind_Exception *exception_object)
{
}

unint64_t sub_1B4BE1FFC(uint64_t a1, unint64_t a2)
{
  if (!a2) {
    sub_1B4BE228C();
  }
  return (a1 + a2 - 1) / a2 * a2;
}

void sub_1B4BE2024(std::string *this)
{
  LOBYTE(size) = *((unsigned char *)&this->__r_.__value_.__s + 23);
  if ((size & 0x80u) != 0) {
    std::string::size_type size = this->__r_.__value_.__l.__size_;
  }
  if ((size & 3) != 0)
  {
    do
    {
      std::string::push_back(this, 0);
      LOBYTE(v3) = *((unsigned char *)&this->__r_.__value_.__s + 23);
      if ((v3 & 0x80u) != 0) {
        std::string::size_type v3 = this->__r_.__value_.__l.__size_;
      }
    }
    while ((v3 & 3) != 0);
  }
}

void *sub_1B4BE2088@<X0>(void *a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  unint64_t v4 = a1[1];
  BOOL v5 = v4 >= a2;
  unint64_t v6 = v4 - a2;
  if (v5)
  {
    *a1 += a2;
    a1[1] = v6;
    return sub_1B4BE3D84(a3);
  }
  else
  {
    unsigned int v9 = 13;
    uint64_t v7 = (void *)sub_1B4BB2204((uint64_t)v10);
    sub_1B4BB34F0(v7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/util.cc", 63);
    sub_1B4BB34F0(v10, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_1B4BB34F0(v10, (uint64_t)") [", 3);
    sub_1B4BB34F0(v10, (uint64_t)"string.size() >= size", 21);
    sub_1B4BB34F0(v10, (uint64_t)"] ", 2);
    sub_1B4BAFA7C(&v9, (uint64_t)a3);
    v10[0] = *MEMORY[0x1E4FBA418];
    *(void *)((char *)v10 + *(void *)(v10[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
    v10[1] = MEMORY[0x1E4FBA470] + 16;
    if (v11 < 0) {
      operator delete((void *)v10[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return (void *)MEMORY[0x1BA992920](&v12);
  }
}

void sub_1B4BE2274(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B4BE228C()
{
}

uint64_t sub_1B4BE22B8(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = (void *)sub_1B4BCF790(a1);
  void *v4 = &unk_1F0D549D0;
  v4[1] = a2 + 16;
  sub_1B4BB0310((uint64_t)v4);
  return a1;
}

void sub_1B4BE2308(_Unwind_Exception *a1)
{
  sub_1B4BAFD0C(v1);
  _Unwind_Resume(a1);
}

void *sub_1B4BE2320(uint64_t a1, uint64_t a2, _DWORD *a3, unint64_t a4)
{
  uint64_t result = (void *)sub_1B4BAEE24(a1, a2, a3, a4);
  void *result = &unk_1F0D549D0;
  return result;
}

void sub_1B4BE2358(void *a1)
{
  sub_1B4BAFD0C(a1);
  JUMPOUT(0x1BA9929C0);
}

void sub_1B4BE2390(uint64_t *a1@<X0>, unsigned char *a2@<X1>, unint64_t a3@<X2>, void *a4@<X8>, float a5@<S0>)
{
  uint64_t v82 = *MEMORY[0x1E4F143B8];
  (*(void (**)(void **__return_ptr))(*a1 + 16))(&v66);
  if (v66)
  {
    sub_1B4BE3D8C((uint64_t *)&v66);
LABEL_3:
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    return;
  }
  sub_1B4BE3D8C((uint64_t *)&v66);
  if (!a3) {
    goto LABEL_3;
  }
  unint64_t v76 = 0;
  uint64_t v77 = 0;
  uint64_t v78 = 0;
  std::string __p = 0;
  uint64_t v74 = 0;
  uint64_t v75 = 0;
  if (a3 >> 59) {
    sub_1B4BB3244();
  }
  int v8 = 0;
  std::string __p = operator new(32 * a3);
  uint64_t v74 = (char *)__p;
  uint64_t v75 = (char *)__p + 32 * a3;
  memset(v71, 0, sizeof(v71));
  int v72 = 1065353216;
  long long v67 = 0u;
  long long v68 = 0u;
  uint64_t v69 = 0;
  uint64_t v70 = 256;
  v65[0] = (uint64_t)a1;
  v65[1] = (uint64_t)&v66;
  v65[2] = (uint64_t)&__p;
  v65[3] = (uint64_t)&v76;
  v65[4] = (uint64_t)v71;
  uint64_t v66 = &unk_1F0D54C10;
  do
  {
    long long v81 = 0uLL;
    int v9 = sub_1B4BB8544(a1[2], a2, a3, (BOOL *)&v80 + 8);
    *(void *)&long long v81 = a2;
    *((void *)&v81 + 1) = v9;
    a3 -= v9;
    if (a3) {
      int v10 = v8 + 1;
    }
    else {
      int v10 = -1;
    }
    LODWORD(v8sub_1B4BC92E4(&a9, 0) = v8 - 1;
    DWORD1(v8sub_1B4BC92E4(&a9, 0) = v10;
    char v11 = v74;
    if (v74 >= v75)
    {
      unsigned __int8 v14 = (char *)__p;
      uint64_t v15 = (v74 - (unsigned char *)__p) >> 5;
      unint64_t v16 = v15 + 1;
      if ((unint64_t)(v15 + 1) >> 59) {
        sub_1B4BB3244();
      }
      uint64_t v17 = v75 - (unsigned char *)__p;
      if ((v75 - (unsigned char *)__p) >> 4 > v16) {
        unint64_t v16 = v17 >> 4;
      }
      if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v18 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v18 = v16;
      }
      if (v18)
      {
        if (v18 >> 59) {
          sub_1B4BB2D38();
        }
        uint64_t v19 = (char *)operator new(32 * v18);
      }
      else
      {
        uint64_t v19 = 0;
      }
      long long v20 = v81;
      uint64_t v21 = &v19[32 * v15];
      *(_OWORD *)uint64_t v21 = v80;
      *((_OWORD *)v21 + 1) = v20;
      unsigned int v22 = v21;
      if (v11 != v14)
      {
        do
        {
          long long v23 = *((_OWORD *)v11 - 1);
          *((_OWORD *)v22 - 2) = *((_OWORD *)v11 - 2);
          *((_OWORD *)v22 - 1) = v23;
          v22 -= 32;
          v11 -= 32;
        }
        while (v11 != v14);
        char v11 = v14;
      }
      unsigned int v24 = &v19[32 * v18];
      int v13 = v21 + 32;
      std::string __p = v22;
      uint64_t v74 = v21 + 32;
      uint64_t v75 = v24;
      if (v11) {
        operator delete(v11);
      }
    }
    else
    {
      long long v12 = v81;
      *(_OWORD *)uint64_t v74 = v80;
      *((_OWORD *)v11 + 1) = v12;
      int v13 = v11 + 32;
    }
    a2 += v9;
    ++v8;
    uint64_t v74 = v13;
  }
  while (a3);
  if (__p == v13)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
  }
  else
  {
    if ((unint64_t)(v13 - (unsigned char *)__p) >= 0x21)
    {
      unint64_t v25 = 1;
      do
      {
        sub_1B4BE2AF4(v65, v25 - 1, v25);
        ++v25;
      }
      while (v25 < (v74 - (unsigned char *)__p) >> 5);
    }
    char v26 = (int **)v76;
    uint64_t v27 = v77;
    if (v76 != v77)
    {
      uint64_t v28 = 0;
      do
      {
        uint64_t v29 = *v26;
        if (v27 - (char *)v26 >= 9)
        {
          uint64_t v30 = 0;
          uint64_t v31 = (v27 - (char *)v26) >> 3;
          unsigned int v32 = v26;
          do
          {
            uint64_t v33 = v32;
            v32 += v30 + 1;
            uint64_t v34 = 2 * v30;
            uint64_t v30 = (2 * v30) | 1;
            uint64_t v35 = v34 + 2;
            if (v35 < v31)
            {
              unsigned int v36 = v32[1];
              float v37 = *((float *)*v32 + 2);
              float v38 = *((float *)v36 + 2);
              if (v37 < v38 || v37 == v38 && **v32 > *v36)
              {
                ++v32;
                uint64_t v30 = v35;
              }
            }
            *uint64_t v33 = *v32;
          }
          while (v30 <= (uint64_t)((unint64_t)(v31 - 2) >> 1));
          uint64_t v39 = (int **)(v27 - 8);
          if (v32 == v39)
          {
            void *v32 = v29;
          }
          else
          {
            void *v32 = *v39;
            *uint64_t v39 = v29;
            sub_1B4BE3068((uint64_t)v26, (uint64_t)(v32 + 1), v32 + 1 - v26);
          }
        }
        v77 -= 8;
        int v40 = *v29;
        uint64_t v41 = *v29;
        uint64_t v42 = __p;
        uint64_t v43 = *((void *)__p + 4 * v41 + 3);
        if (!v43) {
          goto LABEL_58;
        }
        uint64_t v44 = v29[1];
        uint64_t v45 = *((void *)__p + 4 * v44 + 3);
        if (!v45) {
          goto LABEL_58;
        }
        uint64_t v46 = v45 + v43;
        if (v46 != *((void *)v29 + 2)) {
          goto LABEL_58;
        }
        if (a5 > 0.0)
        {
          if (a5 >= 1.0) {
            goto LABEL_58;
          }
          if (!v28) {
            uint64_t v28 = sub_1B4BE1D98();
          }
          unsigned int v47 = sub_1B4BCB778(v28);
          if (((double)v47 + (double)sub_1B4BCB778(v28) * 4294967300.0) * 5.42101086e-20 + 0.0 < a5) {
            goto LABEL_58;
          }
          uint64_t v42 = __p;
          int v40 = *v29;
          uint64_t v44 = v29[1];
          uint64_t v41 = *v29;
          uint64_t v46 = *((void *)__p + 4 * v44 + 3) + *((void *)__p + 4 * v41 + 3);
        }
        uint64_t v48 = (char *)&v42[8 * v41];
        uint64_t v49 = (char *)&v42[8 * v44];
        *((void *)v48 + 3) = v46;
        *((_DWORD *)v48 + 1) = *((_DWORD *)v49 + 1);
        uint64_t v50 = *((unsigned int *)v49 + 1);
        if ((v50 & 0x80000000) == 0) {
          v42[8 * v50] = v40;
        }
        *((void *)v49 + 2) = "";
        *((void *)v49 + 3) = 0;
        sub_1B4BE2AF4(v65, *((_DWORD *)__p + 8 * v41), v40);
        sub_1B4BE2AF4(v65, *v29, *((_DWORD *)__p + 8 * *v29 + 1));
LABEL_58:
        char v26 = (int **)v76;
        uint64_t v27 = v77;
      }
      while (v76 != v77);
    }
    v79[3] = 0;
    uint64_t v51 = operator new(0x20uLL);
    void *v51 = &unk_1F0D556D8;
    v51[1] = a1;
    v51[2] = v79;
    v51[3] = v71;
    *((void *)&v81 + 1) = v51;
    sub_1B4BE39C8(&v80, v79);
    sub_1B4BE33D8(&v80);
    int v52 = 0;
    int v53 = (void *)MEMORY[0x1E4FBA240];
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    do
    {
      if (v52 < 0)
      {
        LOBYTE(v8sub_1B4BC92E4(&a9, 0) = 1;
        uint64_t v54 = sub_1B4BB34F0(v53, (uint64_t)"bpe_model.cc", 12);
        sub_1B4BB34F0(v54, (uint64_t)"(", 1);
        uint64_t v55 = (void *)std::ostream::operator<<();
        uint64_t v56 = sub_1B4BB34F0(v55, (uint64_t)") [", 3);
        unint64_t v57 = sub_1B4BB34F0(v56, (uint64_t)"(index) >= (0)", 14);
        sub_1B4BB34F0(v57, (uint64_t)"] ", 2);
        sub_1B4BB239C(&v80);
      }
      unint64_t v58 = __p;
      if (v52 >= (int)((unint64_t)(v74 - (unsigned char *)__p) >> 5))
      {
        LOBYTE(v8sub_1B4BC92E4(&a9, 0) = 1;
        uint64_t v59 = sub_1B4BB34F0(v53, (uint64_t)"bpe_model.cc", 12);
        sub_1B4BB34F0(v59, (uint64_t)"(", 1);
        uint64_t v60 = (void *)std::ostream::operator<<();
        unint64_t v61 = sub_1B4BB34F0(v60, (uint64_t)") [", 3);
        uint64_t v62 = sub_1B4BB34F0(v61, (uint64_t)"(index) < (static_cast<int>(symbols.size()))", 44);
        sub_1B4BB34F0(v62, (uint64_t)"] ", 2);
        sub_1B4BB239C(&v80);
        unint64_t v58 = __p;
      }
      sub_1B4BE2F44((uint64_t)v79, v58[4 * v52 + 2], v58[4 * v52 + 3], (uint64_t)a4);
      int v52 = *((_DWORD *)__p + 8 * v52 + 1);
    }
    while (v52 != -1);
    sub_1B4BE33D8(v79);
  }
  sub_1B4BE2FA0(&v66);
  sub_1B4BCE810((uint64_t)v71);
  if (__p)
  {
    uint64_t v74 = (char *)__p;
    operator delete(__p);
  }
  if (v76)
  {
    uint64_t v77 = (char *)v76;
    operator delete(v76);
  }
}

void sub_1B4BE2A58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,uint64_t a31,void *a32,uint64_t a33)
{
  sub_1B4BE33D8((void *)(v33 - 200));
  sub_1B4BE2FA0(&a16);
  sub_1B4BCE810((uint64_t)&a23);
  if (__p)
  {
    a30 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a32)
  {
    a33 = (uint64_t)a32;
    operator delete(a32);
  }
  _Unwind_Resume(a1);
}

__n128 sub_1B4BE2AF4(uint64_t *a1, int a2, int a3)
{
  if (a2 != -1 && a3 != -1)
  {
    uint64_t v4 = a2;
    uint64_t v5 = *(void *)a1[2];
    if (!*(unsigned char *)(v5 + 32 * a2 + 8))
    {
      uint64_t v6 = a3;
      uint64_t v7 = v5 + 32 * a3;
      if (!*(unsigned char *)(v7 + 8))
      {
        uint64_t v8 = *a1;
        uint64_t v9 = v5 + 32 * a2;
        int v10 = *(unsigned char **)(v9 + 16);
        uint64_t v11 = *(void *)(v7 + 24) + *(void *)(v9 + 24);
        v47[0] = v10;
        v47[1] = v11;
        long long v12 = *(unsigned int **)(v8 + 40);
        unsigned int v13 = *v12;
        if (v11)
        {
          uint64_t v14 = 0;
          uint64_t v15 = v11;
          while (1)
          {
            int v16 = *v10++;
            v14 ^= (v13 >> 10 << ((v13 >> 6) & 8)) ^ v16;
            unsigned int v13 = v12[v14];
            if ((v13 & 0x800000FF) != v16) {
              break;
            }
            if (!--v15) {
              goto LABEL_17;
            }
          }
        }
        else
        {
          int v17 = *v10;
          if (*v10)
          {
            uint64_t v14 = 0;
            unint64_t v18 = v10 + 1;
            while (1)
            {
              v14 ^= (v13 >> 10 << ((v13 >> 6) & 8)) ^ v17;
              unsigned int v13 = v12[v14];
              if ((v13 & 0x800000FF) != v17) {
                break;
              }
              int v19 = *v18++;
              int v17 = v19;
              if (!v19) {
                goto LABEL_17;
              }
            }
          }
          else
          {
            uint64_t v14 = 0;
LABEL_17:
            if ((v13 & 0x100) != 0)
            {
              unsigned int v20 = v12[v14 ^ (v13 >> 10 << ((v13 >> 6) & 8))];
              uint64_t v21 = (void *)a1[1];
              uint64_t v22 = v21[5];
              unint64_t v23 = v21[6];
              unint64_t v24 = v21[4];
              if (v24 >= v23)
              {
                unint64_t v24 = 0;
                ++v22;
                v21[4] = 0;
                v21[5] = v22;
              }
              uint64_t v25 = v21[1];
              if (v22 == (v21[2] - v25) >> 3)
              {
                is_mul_ok(v23, 0x18uLL);
                operator new[]();
              }
              uint64_t v26 = *(void *)(v25 + 8 * v22) + 24 * v24;
              v21[4] = v24 + 1;
              *(_DWORD *)uint64_t v26 = a2;
              *(_DWORD *)(v26 + 4) = a3;
              unsigned int v44 = v20 & 0x7FFFFFFF;
              *(float *)(v26 + 8) = (*(float (**)(uint64_t))(*(void *)v8 + 136))(v8);
              *(void *)(v26 + 16) = v11;
              uint64_t v27 = (uint64_t *)a1[3];
              uint64_t v29 = (void *)v27[1];
              unint64_t v28 = v27[2];
              if ((unint64_t)v29 >= v28)
              {
                uint64_t v32 = *v27;
                uint64_t v33 = ((uint64_t)v29 - *v27) >> 3;
                unint64_t v34 = v33 + 1;
                if ((unint64_t)(v33 + 1) >> 61) {
                  sub_1B4BB3244();
                }
                uint64_t v35 = v28 - v32;
                if (v35 >> 2 > v34) {
                  unint64_t v34 = v35 >> 2;
                }
                if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v36 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v36 = v34;
                }
                if (v36)
                {
                  if (v36 >> 61) {
                    sub_1B4BB2D38();
                  }
                  float v37 = (char *)operator new(8 * v36);
                }
                else
                {
                  float v37 = 0;
                }
                float v38 = (uint64_t *)&v37[8 * v33];
                uint64_t *v38 = v26;
                uint64_t v30 = (uint64_t)(v38 + 1);
                if (v29 == (void *)v32)
                {
                  uint64_t v31 = v44;
                }
                else
                {
                  uint64_t v31 = v44;
                  do
                  {
                    uint64_t v39 = *--v29;
                    *--float v38 = v39;
                  }
                  while (v29 != (void *)v32);
                  uint64_t v29 = (void *)*v27;
                }
                *uint64_t v27 = (uint64_t)v38;
                v27[1] = v30;
                std::string v27[2] = (uint64_t)&v37[8 * v36];
                if (v29) {
                  operator delete(v29);
                }
              }
              else
              {
                *uint64_t v29 = v26;
                uint64_t v30 = (uint64_t)(v29 + 1);
                uint64_t v31 = v44;
              }
              v27[1] = v30;
              sub_1B4BE3068(*v27, v30, (v30 - *v27) >> 3);
              if ((*(unsigned int (**)(void, uint64_t))(**(void **)(v8 + 8) + 128))(*(void *)(v8 + 8), v31))
              {
                uint64_t v41 = *(void *)a1[2];
                __n128 v45 = *(__n128 *)(v41 + 32 * v4 + 16);
                __n128 v46 = *(__n128 *)(v41 + 32 * v6 + 16);
                uint64_t v42 = a1[4];
                uint64_t v48 = v47;
                uint64_t v43 = (__n128 *)sub_1B4BE3100(v42, (uint64_t)v47, (uint64_t)&unk_1B4C9AE0A, &v48);
                __n128 result = v45;
                _OWORD v43[2] = v45;
                v43[3] = v46;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_1B4BE2F44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v7[0] = a2;
  v7[1] = a3;
  uint64_t v6 = a4;
  uint64_t v4 = *(void *)(a1 + 24);
  if (!v4) {
    sub_1B4BE345C();
  }
  return (*(uint64_t (**)(uint64_t, void *, uint64_t *))(*(void *)v4 + 48))(v4, v7, &v6);
}

void *sub_1B4BE2FA0(void *a1)
{
  *a1 = &unk_1F0D54C10;
  uint64_t v2 = (void *)a1[1];
  std::string::size_type v3 = (void *)a1[2];
  if (v2 != v3)
  {
    do
    {
      if (*v2) {
        MEMORY[0x1BA992990](*v2, 0x1000C801E56706BLL);
      }
      ++v2;
    }
    while (v2 != v3);
    uint64_t v2 = (void *)a1[1];
  }
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_1B4BE3030(uint64_t a1)
{
  return (*(uint64_t (**)(double))(*(void *)a1 + 56))(0.0);
}

uint64_t sub_1B4BE3058()
{
  return 1;
}

uint64_t sub_1B4BE3060()
{
  return 0;
}

uint64_t sub_1B4BE3068(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = a3 - 2;
  if (a3 >= 2)
  {
    unint64_t v4 = v3 >> 1;
    uint64_t v5 = result + 8 * (v3 >> 1);
    uint64_t v6 = *(_DWORD **)v5;
    uint64_t v7 = *(void *)(a2 - 8);
    float v8 = *(float *)(*(void *)v5 + 8);
    float v9 = *(float *)(v7 + 8);
    if (v8 < v9 || v8 == v9 && *v6 > *(_DWORD *)v7)
    {
      *(void *)(a2 - 8) = v6;
      if (v3 >= 2)
      {
        while (1)
        {
          unint64_t v11 = v4 - 1;
          unint64_t v4 = (v4 - 1) >> 1;
          uint64_t v10 = result + 8 * v4;
          long long v12 = *(_DWORD **)v10;
          float v13 = *(float *)(*(void *)v10 + 8);
          if (v13 >= v9 && (v13 != v9 || *v12 <= *(_DWORD *)v7)) {
            break;
          }
          *(void *)uint64_t v5 = v12;
          uint64_t v5 = result + 8 * v4;
          if (v11 <= 1) {
            goto LABEL_11;
          }
        }
      }
      uint64_t v10 = v5;
LABEL_11:
      *(void *)uint64_t v10 = v7;
    }
  }
  return result;
}

void *sub_1B4BE3100(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD **a4)
{
  float v8 = (void *)(a1 + 24);
  unint64_t v9 = sub_1B4BE3378(a1 + 24, *(uint64_t **)a2, *(void *)(a2 + 8));
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    uint64_t v14 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      uint64_t v15 = *v14;
      if (*v14)
      {
        uint64_t v18 = a2;
        int v16 = *(uint64_t **)a2;
        size_t v17 = *(void *)(v18 + 8);
        do
        {
          unint64_t v19 = *((void *)v15 + 1);
          if (v19 == v10)
          {
            if (*((void *)v15 + 3) == v17 && !memcmp(*((const void **)v15 + 2), v16, v17)) {
              return v15;
            }
          }
          else
          {
            if (v13 > 1)
            {
              if (v19 >= v11) {
                v19 %= v11;
              }
            }
            else
            {
              v19 &= v11 - 1;
            }
            if (v19 != v4) {
              break;
            }
          }
          uint64_t v15 = *(void **)v15;
        }
        while (v15);
      }
    }
  }
  uint64_t v15 = operator new(0x40uLL);
  *(void *)uint64_t v15 = 0;
  *((void *)v15 + 1) = v10;
  *((_OWORD *)v15 + 1) = **a4;
  *((_OWORD *)v15 + 2) = 0u;
  *((_OWORD *)v15 + 3) = 0u;
  float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v21 = *(float *)(a1 + 32);
  if (!v11 || (float)(v21 * (float)v11) < v20)
  {
    BOOL v22 = 1;
    if (v11 >= 3) {
      BOOL v22 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v23 = v22 | (2 * v11);
    unint64_t v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24) {
      size_t v25 = v24;
    }
    else {
      size_t v25 = v23;
    }
    sub_1B4BB2D6C(a1, v25);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  uint64_t v26 = *(void *)a1;
  uint64_t v27 = *(void **)(*(void *)a1 + 8 * v4);
  if (v27)
  {
    *(void *)uint64_t v15 = *v27;
LABEL_40:
    *uint64_t v27 = v15;
    goto LABEL_41;
  }
  *(void *)uint64_t v15 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v15;
  *(void *)(v26 + 8 * v4) = a1 + 16;
  if (*(void *)v15)
  {
    unint64_t v28 = *(void *)(*(void *)v15 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v28 >= v11) {
        v28 %= v11;
      }
    }
    else
    {
      v28 &= v11 - 1;
    }
    uint64_t v27 = (void *)(*(void *)a1 + 8 * v28);
    goto LABEL_40;
  }
LABEL_41:
  ++*v8;
  return v15;
}

void sub_1B4BE3364(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

unint64_t sub_1B4BE3378(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  return sub_1B4BB2824((uint64_t)&v4, a2, a3);
}

void sub_1B4BE33A0(void *a1)
{
  sub_1B4BE2FA0(a1);
  JUMPOUT(0x1BA9929C0);
}

void *sub_1B4BE33D8(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_1B4BE345C()
{
  exception = __cxa_allocate_exception(8uLL);
  void *exception = &unk_1F0D559B8;
  __cxa_throw(exception, (struct type_info *)&unk_1F0D53B88, (void (*)(void *))std::exception::~exception);
}

void sub_1B4BE34AC(std::exception *a1)
{
  std::exception::~exception(a1);
  JUMPOUT(0x1BA9929C0);
}

void sub_1B4BE34E8()
{
}

__n128 sub_1B4BE34FC(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1F0D556D8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_1B4BE3550(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F0D556D8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1B4BE3588(uint64_t a1, void *a2, void ***a3)
{
  uint64_t v4 = a2[1];
  uint64_t v5 = *a3;
  *(void *)&long long v33 = *a2;
  *((void *)&v33 + 1) = v4;
  uint64_t v6 = *(void ***)(a1 + 8);
  uint64_t v7 = ((uint64_t (*)(void **, void, uint64_t))(*v6)[14])(v6, v33, v4);
  if (v7 == -1 || ((*(uint64_t (**)(void *, uint64_t))(*v6[1] + 128))(v6[1], v7) & 1) == 0)
  {
    unint64_t v10 = (char *)v5[2];
    unint64_t v11 = (char *)v5[1];
    if (v11 >= v10)
    {
      unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((v11 - (unsigned char *)*v5) >> 3);
      unint64_t v14 = v13 + 1;
      if (v13 + 1 <= 0xAAAAAAAAAAAAAAALL)
      {
        unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((v10 - (unsigned char *)*v5) >> 3);
        if (2 * v15 > v14) {
          unint64_t v14 = 2 * v15;
        }
        if (v15 >= 0x555555555555555) {
          unint64_t v16 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v16 = v14;
        }
        size_t v17 = (char *)sub_1B4BB325C((uint64_t)(v5 + 2), v16);
        uint64_t v18 = &v17[24 * v13];
        float v20 = &v17[24 * v19];
        *(_OWORD *)uint64_t v18 = v33;
        *((_DWORD *)v18 + 4) = v7;
        uint8x8_t v12 = v18 + 24;
        BOOL v22 = (char *)*v5;
        float v21 = (char *)v5[1];
        if (v21 == *v5) {
          goto LABEL_16;
        }
        do
        {
          long long v23 = *(_OWORD *)(v21 - 24);
          *((void *)v18 - 1) = *((void *)v21 - 1);
          *(_OWORD *)(v18 - 24) = v23;
          v18 -= 24;
          v21 -= 24;
        }
        while (v21 != v22);
        goto LABEL_15;
      }
LABEL_30:
      sub_1B4BB3244();
    }
  }
  else
  {
    float v8 = sub_1B4BE3860(*(void **)(a1 + 24), (uint64_t)&v33);
    if (v8)
    {
      unint64_t v9 = (uint64_t *)v8;
      sub_1B4BE2F44(*(void *)(a1 + 16), v9[4], v9[5], (uint64_t)v5);
      sub_1B4BE2F44(*(void *)(a1 + 16), v9[6], v9[7], (uint64_t)v5);
      return;
    }
    unint64_t v24 = (char *)v5[2];
    unint64_t v11 = (char *)v5[1];
    if (v11 >= v24)
    {
      unint64_t v25 = 0xAAAAAAAAAAAAAAABLL * ((v11 - (unsigned char *)*v5) >> 3);
      unint64_t v26 = v25 + 1;
      if (v25 + 1 <= 0xAAAAAAAAAAAAAAALL)
      {
        unint64_t v27 = 0xAAAAAAAAAAAAAAABLL * ((v24 - (unsigned char *)*v5) >> 3);
        if (2 * v27 > v26) {
          unint64_t v26 = 2 * v27;
        }
        if (v27 >= 0x555555555555555) {
          unint64_t v28 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v28 = v26;
        }
        uint64_t v29 = (char *)sub_1B4BB325C((uint64_t)(v5 + 2), v28);
        uint64_t v18 = &v29[24 * v25];
        float v20 = &v29[24 * v30];
        *(_OWORD *)uint64_t v18 = v33;
        *((_DWORD *)v18 + 4) = v7;
        uint8x8_t v12 = v18 + 24;
        uint64_t v31 = (char *)*v5;
        float v21 = (char *)v5[1];
        if (v21 == *v5) {
          goto LABEL_16;
        }
        do
        {
          long long v32 = *(_OWORD *)(v21 - 24);
          *((void *)v18 - 1) = *((void *)v21 - 1);
          *(_OWORD *)(v18 - 24) = v32;
          v18 -= 24;
          v21 -= 24;
        }
        while (v21 != v31);
LABEL_15:
        float v21 = (char *)*v5;
LABEL_16:
        void *v5 = v18;
        v5[1] = v12;
        v5[2] = v20;
        if (v21) {
          operator delete(v21);
        }
        goto LABEL_18;
      }
      goto LABEL_30;
    }
  }
  *(_OWORD *)unint64_t v11 = v33;
  *((_DWORD *)v11 + 4) = v7;
  uint8x8_t v12 = v11 + 24;
LABEL_18:
  v5[1] = v12;
}

uint64_t sub_1B4BE3814(uint64_t a1, uint64_t a2)
{
  if (sub_1B4BE3978(a2, (uint64_t)&unk_1F0D53E08)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_1B4BE3854()
{
  return &unk_1F0D53E08;
}

uint64_t **sub_1B4BE3860(void *a1, uint64_t a2)
{
  unint64_t v4 = sub_1B4BE3378((uint64_t)(a1 + 3), *(uint64_t **)a2, *(void *)(a2 + 8));
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  unint64_t v10 = *(uint64_t ****)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  unint64_t v11 = *v10;
  if (*v10)
  {
    uint64_t v14 = a2;
    uint8x8_t v12 = *(uint64_t **)a2;
    size_t v13 = *(void *)(v14 + 8);
    do
    {
      unint64_t v15 = (unint64_t)v11[1];
      if (v15 == v6)
      {
        if (v11[3] == (uint64_t *)v13 && !memcmp(v11[2], v12, v13)) {
          return v11;
        }
      }
      else
      {
        if (v8 > 1)
        {
          if (v15 >= *(void *)&v5) {
            v15 %= *(void *)&v5;
          }
        }
        else
        {
          v15 &= *(void *)&v5 - 1;
        }
        if (v15 != v9) {
          return 0;
        }
      }
      unint64_t v11 = (uint64_t **)*v11;
    }
    while (v11);
  }
  return v11;
}

BOOL sub_1B4BE3978(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  if (v2 == v3) {
    return 1;
  }
  if ((v3 & v2) < 0 != __OFSUB__(v2, v3)) {
    return strcmp((const char *)(v2 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  }
  return 0;
}

void *sub_1B4BE39C8(void *result, void *a2)
{
  v6[3] = *MEMORY[0x1E4F143B8];
  if (a2 != result)
  {
    uint64_t v3 = result;
    unint64_t v4 = (void *)result[3];
    int8x8_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        __n128 result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_1B4BE3C28(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1B4BB21F0(a1);
}

void sub_1B4BE3C34()
{
  if (!dword_1E9D40A90)
  {
    unsigned int v0 = sub_1B4BE3C80(MEMORY[0x1E4FBA240], "Program terminated with an unrecoverable error.");
    size_t v1 = sub_1B4BE3CC8(v0);
    sub_1B4BE3D80(v1);
    exit(-1);
  }
  dword_1E9D40A90 = 2;
}

void *sub_1B4BE3C80(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  return sub_1B4BB34F0(a1, (uint64_t)__s, v4);
}

void *sub_1B4BE3CC8(void *a1)
{
  std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
  uint64_t v2 = std::locale::use_facet(&v4, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v2->__vftable[2].~facet_0)(v2, 10);
  std::locale::~locale(&v4);
  std::ostream::put();
  std::ostream::flush();
  return a1;
}

void sub_1B4BE3D6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

void *sub_1B4BE3D84(void *result)
{
  void *result = 0;
  return result;
}

uint64_t *sub_1B4BE3D8C(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2) {
    sub_1B4BE4198((uint64_t)a1, v2);
  }
  return a1;
}

void sub_1B4BE3DC4()
{
}

void sub_1B4BE3ED0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *v1;
  *size_t v1 = 0;
  if (v3) {
    sub_1B4BE4198((uint64_t)v1, v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1B4BE3EF4(void *result, void *a2)
{
  if (*a2) {
    operator new();
  }
  void *result = 0;
  return result;
}

void sub_1B4BE3F84(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9929C0](v1, 0x1012C40849EBCB1);
  _Unwind_Resume(a1);
}

void sub_1B4BE3FAC(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  if (*a1 != *a2)
  {
    if (*a2) {
      operator new();
    }
    *a1 = 0;
    if (v3)
    {
      sub_1B4BE4198((uint64_t)a1, v3);
    }
  }
}

void sub_1B4BE4070(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9929C0](v1, 0x1012C40849EBCB1);
  _Unwind_Resume(a1);
}

const char *sub_1B4BE4094(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (!*a1) {
    return "";
  }
  __n128 result = (const char *)(v1 + 8);
  if (*(char *)(v1 + 31) < 0) {
    return *(const char **)result;
  }
  return result;
}

std::string *sub_1B4BE40C0@<X0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v3 = *(_DWORD **)a1;
  if (*(void *)a1)
  {
    a2->__r_.__value_.__r.__words[0] = 0;
    a2->__r_.__value_.__l.__size_ = 0;
    a2->__r_.__value_.__r.__words[2] = 0;
    unsigned int v5 = *v3 - 1;
    if (v5 < 0x10) {
      MEMORY[0x1BA9925F0](a2, off_1E60A36C8[v5]);
    }
    std::string::append(a2, ": ");
    int v6 = *(char *)(*(void *)a1 + 31);
    if (v6 >= 0) {
      uint8x8_t v7 = (const std::string::value_type *)(*(void *)a1 + 8);
    }
    else {
      uint8x8_t v7 = *(const std::string::value_type **)(*(void *)a1 + 8);
    }
    if (v6 >= 0) {
      std::string::size_type v8 = *(unsigned __int8 *)(*(void *)a1 + 31);
    }
    else {
      std::string::size_type v8 = *(void *)(*(void *)a1 + 16);
    }
    return std::string::append(a2, v7, v8);
  }
  else
  {
    return (std::string *)sub_1B4BB8DC0(a2, "OK");
  }
}

void sub_1B4BE4178(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B4BE4198(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (*(char *)(a2 + 31) < 0) {
      operator delete(*(void **)(a2 + 8));
    }
    JUMPOUT(0x1BA9929C0);
  }
}

void *sub_1B4BE4200()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1E9D40680, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1E9D40680))
  {
    operator new();
  }
  unsigned int v0 = (pthread_key_t *)qword_1E9D40678;
  return sub_1B4BE42D0(v0);
}

void sub_1B4BE4298(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9929C0](v1, 0x1000C4000313F17);
  __cxa_guard_abort(&qword_1E9D40680);
  _Unwind_Resume(a1);
}

void *sub_1B4BE42D0(pthread_key_t *a1)
{
  uint64_t v2 = pthread_getspecific(*a1);
  if (!v2)
  {
    uint64_t v2 = operator new(0x40uLL, (std::align_val_t)0x40uLL);
    *(_OWORD *)uint64_t v2 = xmmword_1B4C99E30;
    v2[2] = 0;
    pthread_setspecific(*a1, v2);
  }
  return v2;
}

uint64_t sub_1B4BE433C(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 16) < a2)
  {
    sub_1B4BE6194((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/arena_impl.h", 111);
    std::locale v4 = sub_1B4BE61AC(v7, "CHECK failed: n <= size_: ");
    sub_1B4BE62E8((uint64_t)&v6, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_1B4BE62F0((uint64_t)v7);
  }
  return a1 + a2;
}

void sub_1B4BE43B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1B4BE62F0((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_1B4BE43E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = v6 + 72;
  if (v6 + 72 > *(void *)(a1 + 16))
  {
    sub_1B4BE6194((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/arena.cc", 398);
    std::string::size_type v8 = sub_1B4BE61AC(v13, "CHECK failed: (pos + ArenaImpl::kSerialArenaSize) <= (b->size()): ");
    sub_1B4BE62E8((uint64_t)&v12, (const char **)&v8->__r_.__value_.__l.__data_);
    sub_1B4BE62F0((uint64_t)v13);
  }
  unint64_t v9 = (void *)sub_1B4BE433C(a1, v6);
  *(void *)(a1 + 8) = v7;
  *unint64_t v9 = a3;
  v9[1] = a2;
  v9[2] = a1;
  v9[5] = sub_1B4BE433C(a1, v7);
  uint64_t v10 = sub_1B4BE433C(a1, *(void *)(a1 + 16));
  void v9[3] = 0;
  v9[7] = 0;
  v9[8] = 0;
  v9[6] = v10;
  return v9;
}

void sub_1B4BE44BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1B4BE62F0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B4BE44E8(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void *sub_1B4BE4504(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 32);
  if (a2 == -1)
  {
    if (v5) {
      unint64_t v7 = *(void *)v5;
    }
    else {
      unint64_t v7 = 256;
    }
  }
  else
  {
    if (v5) {
      unint64_t v6 = *(void *)(v5 + 8);
    }
    else {
      unint64_t v6 = 0x2000;
    }
    if (v6 >= 2 * a2) {
      unint64_t v7 = 2 * a2;
    }
    else {
      unint64_t v7 = v6;
    }
  }
  if (a3 >= 0xFFFFFFFFFFFFFFE8)
  {
    sub_1B4BE6194((uint64_t)v12, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/arena.cc", 245);
    std::string::size_type v8 = sub_1B4BE61AC(v12, "CHECK failed: (min_bytes) <= (std::numeric_limits<size_t>::max() - kBlockHeaderSize): ");
    sub_1B4BE62E8((uint64_t)&v11, (const char **)&v8->__r_.__value_.__l.__data_);
    sub_1B4BE62F0((uint64_t)v12);
    uint64_t v5 = *(void *)(a1 + 32);
  }
  if (v7 <= a3 + 24) {
    size_t v9 = a3 + 24;
  }
  else {
    size_t v9 = v7;
  }
  if (v5) {
    __n128 result = (void *)(*(uint64_t (**)(size_t))(v5 + 16))(v9);
  }
  else {
    __n128 result = operator new(v9);
  }
  atomic_fetch_add_explicit((atomic_ullong *volatile)(a1 + 16), v9, memory_order_relaxed);
  return result;
}

void sub_1B4BE45F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1B4BE62F0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_1B4BE4608(uint64_t a1, unint64_t a2, uint64_t a3)
{
  if (a1) {
    uint64_t v6 = *(void *)(a1 + 16);
  }
  else {
    uint64_t v6 = -1;
  }
  unint64_t v7 = (uint64_t *)sub_1B4BE4504(a3, v6, a2);
  return sub_1B4BE4B98(v7, v8, a1, 0, 0);
}

void *sub_1B4BE4664(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  __n128 result = (void *)a1[3];
  do
  {
    if (result)
    {
      if ((unint64_t)(2 * *result) >= 0x40) {
        uint64_t v7 = 64;
      }
      else {
        uint64_t v7 = 2 * *result;
      }
    }
    else
    {
      uint64_t v7 = 8;
    }
    __n128 result = (void *)sub_1B4BE46FC(a1, (16 * (_WORD)v7 + 23) & 0xFF0);
    uint64_t v8 = a1[3];
    void *result = v7;
    result[1] = v8;
    a1[3] = (uint64_t)result;
    a1[7] = (uint64_t)(result + 2);
    a1[8] = (uint64_t)&result[2 * v7 + 2];
  }
  while (!(16 * v7));
  result[2] = a2;
  result[3] = a3;
  a1[7] = (uint64_t)(result + 4);
  return result;
}

unint64_t sub_1B4BE46FC(uint64_t *a1, unint64_t a2)
{
  if (((a2 + 7) & 0xFFFFFFFFFFFFFFF8) != a2)
  {
    sub_1B4BE6194((uint64_t)v9, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/arena_impl.h", 159);
    std::locale v4 = sub_1B4BE61AC(v9, "CHECK failed: (internal::AlignUpTo8(n)) == (n): ");
    sub_1B4BE62E8((uint64_t)&v8, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_1B4BE62F0((uint64_t)v9);
  }
  unint64_t result = a1[5];
  unint64_t v6 = a1[6];
  if (v6 < result)
  {
    sub_1B4BE6194((uint64_t)v9, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/arena_impl.h", 160);
    uint64_t v7 = sub_1B4BE61AC(v9, "CHECK failed: (limit_) >= (ptr_): ");
    sub_1B4BE62E8((uint64_t)&v8, (const char **)&v7->__r_.__value_.__l.__data_);
    sub_1B4BE62F0((uint64_t)v9);
    unint64_t result = a1[5];
    unint64_t v6 = a1[6];
  }
  if (v6 - result < a2) {
    return sub_1B4BE4A84(a1, a2);
  }
  a1[5] = result + a2;
  return result;
}

void sub_1B4BE47E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1B4BE62F0((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t sub_1B4BE4804(void *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1B4BE4200();
  if (v6[1] == a1[3])
  {
    explicit = (uint64_t *)v6[2];
    goto LABEL_3;
  }
  size_t v9 = sub_1B4BE4200();
  explicit = (uint64_t *)atomic_load_explicit(a1 + 1, memory_order_acquire);
  if (explicit && (void *)explicit[1] == v9)
  {
LABEL_3:
    return sub_1B4BE48B0(explicit, a2, a3);
  }
  return sub_1B4BE4910(a1, a2, a3);
}

unint64_t sub_1B4BE48B0(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v5 = sub_1B4BE46FC(a1, a2);
  unint64_t v6 = v5;
  uint64_t v7 = (unint64_t *)a1[7];
  if (v7 == (unint64_t *)a1[8])
  {
    sub_1B4BE4664(a1, v5, a3);
  }
  else
  {
    unint64_t *v7 = v5;
    v7[1] = a3;
    a1[7] = (uint64_t)(v7 + 2);
  }
  return v6;
}

unint64_t sub_1B4BE4910(void *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1B4BE4200();
  uint64_t v7 = (uint64_t *)sub_1B4BE49BC(a1, (uint64_t)v6);
  return sub_1B4BE48B0(v7, a2, a3);
}

unint64_t sub_1B4BE4974(void *a1, unint64_t a2)
{
  std::locale v4 = sub_1B4BE4200();
  unint64_t v5 = (uint64_t *)sub_1B4BE49BC(a1, (uint64_t)v4);
  return sub_1B4BE46FC(v5, a2);
}

unint64_t sub_1B4BE49BC(void *a1, uint64_t a2)
{
  unint64_t explicit = atomic_load_explicit(a1, memory_order_acquire);
  if (explicit)
  {
    while (*(void *)(explicit + 8) != a2)
    {
      unint64_t explicit = *(void *)(explicit + 32);
      if (!explicit) {
        goto LABEL_4;
      }
    }
  }
  else
  {
LABEL_4:
    unint64_t v5 = sub_1B4BE4504((uint64_t)a1, -1, 0x48uLL);
    *(_OWORD *)unint64_t v5 = xmmword_1B4C99E40;
    v5[2] = v6;
    uint64_t v7 = sub_1B4BE43E8((uint64_t)v5, a2, (uint64_t)a1);
    unint64_t explicit = (unint64_t)v7;
    atomic_ullong v8 = *a1;
    v7[4] = *a1;
    atomic_ullong v9 = v8;
    atomic_compare_exchange_strong_explicit(a1, (unint64_t *)&v9, (unint64_t)v7, memory_order_release, memory_order_relaxed);
    if (v9 != v8)
    {
      atomic_ullong v10 = v9;
      do
      {
        v7[4] = v9;
        atomic_compare_exchange_strong_explicit(a1, (unint64_t *)&v10, (unint64_t)v7, memory_order_release, memory_order_relaxed);
        BOOL v11 = v10 == v9;
        atomic_ullong v9 = v10;
      }
      while (!v11);
    }
  }
  sub_1B4BE4200()[2] = explicit;
  uint64_t v12 = a1[3];
  sub_1B4BE4200()[1] = v12;
  atomic_store(explicit, a1 + 1);
  return explicit;
}

uint64_t sub_1B4BE4A84(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  *(void *)(v4 + 8) = *(void *)(v4 + 16) - a1[6] + a1[5];
  unint64_t v5 = sub_1B4BE4608(v4, a2, *a1);
  a1[2] = (uint64_t)v5;
  a1[5] = sub_1B4BE433C((uint64_t)v5, v5[1]);
  a1[6] = sub_1B4BE433C(a1[2], *(void *)(a1[2] + 16));
  return sub_1B4BE46FC(a1, a2);
}

unint64_t sub_1B4BE4B04(void *a1, unint64_t a2)
{
  uint64_t v4 = sub_1B4BE4200();
  if (v4[1] == a1[3])
  {
    unint64_t explicit = (uint64_t *)v4[2];
    goto LABEL_3;
  }
  uint64_t v7 = sub_1B4BE4200();
  unint64_t explicit = (uint64_t *)atomic_load_explicit(a1 + 1, memory_order_acquire);
  if (explicit && (void *)explicit[1] == v7)
  {
LABEL_3:
    return sub_1B4BE46FC(explicit, a2);
  }
  return sub_1B4BE4974(a1, a2);
}

uint64_t *sub_1B4BE4B98(uint64_t *a1, uint64_t a2, uint64_t a3, unsigned int a4, int a5)
{
  uint64_t v6 = 2;
  if (!a5) {
    uint64_t v6 = 0;
  }
  *a1 = v6 | a4 | a3;
  a1[1] = 24;
  a1[2] = a2;
  if ((a3 & 3) != 0)
  {
    sub_1B4BE6194((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/arena_impl.h", 107);
    uint64_t v7 = sub_1B4BE61AC(v10, "CHECK failed: (reinterpret_cast<uintptr_t>(next) & 3) == (0u): ");
    sub_1B4BE62E8((uint64_t)&v9, (const char **)&v7->__r_.__value_.__l.__data_);
    sub_1B4BE62F0((uint64_t)v10);
  }
  return a1;
}

void sub_1B4BE4C2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1B4BE62F0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B4BE4C44(uint64_t result)
{
  if (result) {
    JUMPOUT(0x1BA9929B0);
  }
  return result;
}

unint64_t sub_1B4BE4C54(void *a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1E9D40640, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1E9D40640))
  {
    __cxa_atexit((void (*)(void *))std::mutex::~mutex, &stru_1E9D402D8, &dword_1B4BAD000);
    __cxa_guard_release(&qword_1E9D40640);
  }
  std::mutex::lock(&stru_1E9D402D8);
  unint64_t explicit = atomic_load_explicit(a1 + 3, memory_order_acquire);
  if (!explicit)
  {
    sub_1B4BB8D14(a1, (void *)*a1, a1[1]);
    atomic_store((unint64_t)a1, a1 + 3);
    unint64_t explicit = (unint64_t)a1;
  }
  std::mutex::unlock(&stru_1E9D402D8);
  return explicit;
}

unint64_t sub_1B4BE4D10(uint64_t *a1, uint64_t a2, long long *a3, uint64_t a4)
{
  if (*a1 != a2)
  {
    sub_1B4BD6D70(a1);
    JUMPOUT(0x1BA992600);
  }
  if (!a4) {
    operator new();
  }
  if (*(unsigned char *)(a4 + 24)) {
    (*(void (**)(void, void *, uint64_t))(**(void **)(*(void *)(a4 + 32) + 32) + 40))(*(void *)(*(void *)(a4 + 32) + 32), &unk_1F0D53AB8, 24);
  }
  unint64_t result = sub_1B4BE4804((void *)a4, 0x18uLL, (uint64_t)sub_1B4BE057C);
  unint64_t v8 = result;
  if (*((char *)a3 + 23) < 0)
  {
    unint64_t result = (unint64_t)sub_1B4BCA11C((unsigned char *)result, *(void **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v9 = *a3;
    *(void *)(result + 16) = *((void *)a3 + 2);
    *(_OWORD *)unint64_t result = v9;
  }
  *a1 = v8;
  return result;
}

void sub_1B4BE4E68(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9929C0](v1, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

void sub_1B4BE4E8C(uint64_t *a1, uint64_t a2, long long *a3, uint64_t a4)
{
  if (*a1 == a2)
  {
    if (!a4) {
      operator new();
    }
    if (*(unsigned char *)(a4 + 24))
    {
      uint64_t v11 = a4;
      (*(void (**)(void, void *, uint64_t))(**(void **)(*(void *)(a4 + 32) + 32) + 40))(*(void *)(*(void *)(a4 + 32) + 32), &unk_1F0D53AB8, 24);
      a4 = v11;
    }
    unint64_t v9 = sub_1B4BE4804((void *)a4, 0x18uLL, (uint64_t)sub_1B4BE057C);
    uint64_t v10 = *((void *)a3 + 2);
    *(_OWORD *)unint64_t v9 = *a3;
    *(void *)(v9 + 16) = v10;
    *((void *)a3 + 1) = 0;
    *((void *)a3 + 2) = 0;
    *(void *)a3 = 0;
    *a1 = v9;
  }
  else
  {
    uint64_t v6 = sub_1B4BD6D70(a1);
    uint64_t v7 = v6;
    if (*(char *)(v6 + 23) < 0) {
      operator delete(*(void **)v6);
    }
    long long v8 = *a3;
    *(void *)(v7 + 16) = *((void *)a3 + 2);
    *(_OWORD *)uint64_t v7 = v8;
    *((unsigned char *)a3 + 23) = 0;
    *(unsigned char *)a3 = 0;
  }
}

unint64_t sub_1B4BE4FB8(uint64_t *a1, long long *a2, uint64_t a3)
{
  return sub_1B4BE4D10(a1, (uint64_t)&qword_1E9D40A98, a2, a3);
}

void sub_1B4BE4FCC(uint64_t *a1, long long *a2, uint64_t a3)
{
}

unint64_t sub_1B4BE4FE0(uint64_t *a1, long long *a2, uint64_t a3)
{
  return sub_1B4BE4D10(a1, 0, a2, a3);
}

uint64_t *sub_1B4BE4FF0(uint64_t *a1, uint64_t a2)
{
  if ((uint64_t *)*a1 == &qword_1E9D40A98) {
    return sub_1B4BE500C((uint64_t **)a1, a2);
  }
  else {
    return (uint64_t *)sub_1B4BD6D70(a1);
  }
}

uint64_t *sub_1B4BE500C(uint64_t **a1, uint64_t a2)
{
  if (*a1 != &qword_1E9D40A98)
  {
    sub_1B4BE6194((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/arenastring.cc", 147);
    uint64_t v4 = sub_1B4BE61AC(v7, "CHECK failed: IsDefault(default_value): ");
    sub_1B4BE62E8((uint64_t)&v6, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_1B4BE62F0((uint64_t)v7);
  }
  if (!a2) {
    operator new();
  }
  if (*(unsigned char *)(a2 + 24)) {
    (*(void (**)(void, void *, uint64_t))(**(void **)(*(void *)(a2 + 32) + 32) + 40))(*(void *)(*(void *)(a2 + 32) + 32), &unk_1F0D53AB8, 24);
  }
  unint64_t result = (uint64_t *)sub_1B4BE4804((void *)a2, 0x18uLL, (uint64_t)sub_1B4BE057C);
  uint64_t *result = 0;
  result[1] = 0;
  result[2] = 0;
  *a1 = result;
  return result;
}

void sub_1B4BE5114(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1B4BE62F0((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t sub_1B4BE512C(uint64_t *a1, void *a2, uint64_t a3)
{
  if (*a1) {
    return sub_1B4BD6D70(a1);
  }
  else {
    return sub_1B4BE5148((unint64_t *)a1, a3, a2);
  }
}

unint64_t sub_1B4BE5148(unint64_t *a1, uint64_t a2, void *a3)
{
  if (*a1)
  {
    sub_1B4BE6194((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/arenastring.cc", 147);
    char v6 = sub_1B4BE61AC(v13, "CHECK failed: IsDefault(default_value): ");
    sub_1B4BE62E8((uint64_t)&v12, (const char **)&v6->__r_.__value_.__l.__data_);
    sub_1B4BE62F0((uint64_t)v13);
  }
  unint64_t explicit = atomic_load_explicit(a3 + 3, memory_order_acquire);
  if (explicit)
  {
    if (a2) {
      goto LABEL_5;
    }
LABEL_10:
    operator new();
  }
  unint64_t explicit = sub_1B4BE4C54(a3);
  if (!a2) {
    goto LABEL_10;
  }
LABEL_5:
  if (*(unsigned char *)(a2 + 24)) {
    (*(void (**)(void, void *, uint64_t))(**(void **)(*(void *)(a2 + 32) + 32) + 40))(*(void *)(*(void *)(a2 + 32) + 32), &unk_1F0D53AB8, 24);
  }
  unint64_t v8 = sub_1B4BE4804((void *)a2, 0x18uLL, (uint64_t)sub_1B4BE057C);
  unint64_t v9 = v8;
  if (*(char *)(explicit + 23) < 0)
  {
    sub_1B4BCA11C((unsigned char *)v8, *(void **)explicit, *(void *)(explicit + 8));
  }
  else
  {
    long long v10 = *(_OWORD *)explicit;
    *(void *)(v8 + 16) = *(void *)(explicit + 16);
    *(_OWORD *)unint64_t v8 = v10;
  }
  *a1 = v9;
  return v9;
}

void sub_1B4BE52AC(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9929C0](v1, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

std::string *sub_1B4BE52E4(std::string *result, void *a2)
{
  if (result->__r_.__value_.__r.__words[0])
  {
    uint64_t v3 = (std::string *)sub_1B4BD6D70((uint64_t *)result);
    unint64_t explicit = (const std::string *)atomic_load_explicit(a2 + 3, memory_order_acquire);
    if (!explicit) {
      unint64_t explicit = (const std::string *)sub_1B4BE4C54(a2);
    }
    return std::string::operator=(v3, explicit);
  }
  return result;
}

int64_t sub_1B4BE5350(uint64_t a1, char *a2)
{
  while (1)
  {
    unint64_t v5 = *(char **)a1;
    uint64_t v4 = *(void **)(a1 + 8);
    if (!v4)
    {
      int64_t v10 = v5 - a2;
      int64_t v9 = v10 + 16;
      *(void *)(a1 + 8) = a2;
      if (((v10 + 16) & 0x80000000) == 0) {
        return v9;
      }
      goto LABEL_12;
    }
    int v6 = a2 - v5;
    if (a2 <= v5) {
      break;
    }
    if (*(unsigned char *)(a1 + 56))
    {
      sub_1B4BE6194((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/coded_stream.cc", 685);
      uint64_t v7 = sub_1B4BE61AC(v15, "CHECK failed: !had_error_: ");
      sub_1B4BE62E8((uint64_t)&v14, (const char **)&v7->__r_.__value_.__l.__data_);
      sub_1B4BE62F0((uint64_t)v15);
    }
    if (v6 >= 17)
    {
      sub_1B4BE6194((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/coded_stream.cc", 686);
      unint64_t v8 = sub_1B4BE61AC(v15, "CHECK failed: overrun <= kSlopBytes: ");
      sub_1B4BE62E8((uint64_t)&v14, (const char **)&v8->__r_.__value_.__l.__data_);
      sub_1B4BE62F0((uint64_t)v15);
    }
    a2 = &sub_1B4BE54E8((char **)a1)[v6];
    if (*(unsigned char *)(a1 + 56)) {
      return 0;
    }
  }
  memcpy(v4, (const void *)(a1 + 16), (size_t)&a2[-a1 - 16]);
  uint64_t v11 = *(char **)a1;
  *(void *)(a1 + 8) += &a2[-a1 - 16];
  int64_t v9 = v11 - a2;
  if (((v11 - a2) & 0x80000000) == 0) {
    return v9;
  }
LABEL_12:
  sub_1B4BE6194((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/coded_stream.cc", 700);
  char v12 = sub_1B4BE61AC(v15, "CHECK failed: s >= 0: ");
  sub_1B4BE62E8((uint64_t)&v14, (const char **)&v12->__r_.__value_.__l.__data_);
  sub_1B4BE62F0((uint64_t)v15);
  return v9;
}

void sub_1B4BE54C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1B4BE62F0((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_1B4BE54E8(char **a1)
{
  if (*((unsigned char *)a1 + 56))
  {
    sub_1B4BE6194((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/coded_stream.cc", 788);
    uint64_t v2 = sub_1B4BE61AC(v13, "CHECK failed: !had_error_: ");
    sub_1B4BE62E8((uint64_t)&v12, (const char **)&v2->__r_.__value_.__l.__data_);
    sub_1B4BE62F0((uint64_t)v13);
  }
  if (a1[6])
  {
    uint64_t v3 = (char *)(a1 + 2);
    unint64_t v5 = *a1;
    uint64_t v4 = a1[1];
    if (v4)
    {
      memcpy(v4, a1 + 2, v5 - v3);
      int v12 = 0;
      do
      {
        v13[0].__r_.__value_.__r.__words[0] = 0;
        if (((*(uint64_t (**)(char *, std::string *, int *))(*(void *)a1[6] + 16))(a1[6], v13, &v12) & 1) == 0)
        {
          *((unsigned char *)a1 + 56) = 1;
          goto LABEL_14;
        }
        uint64_t v6 = v12;
      }
      while (!v12);
      unint64_t v5 = (char *)v13[0].__r_.__value_.__r.__words[0];
      if (v12 >= 17)
      {
        *(_OWORD *)v13[0].__r_.__value_.__l.__data_ = *(_OWORD *)*a1;
        *a1 = &v5[v6 - 16];
        a1[1] = 0;
        return v5;
      }
      if (v12 <= 0)
      {
        std::string::size_type v10 = v13[0].__r_.__value_.__r.__words[0];
        sub_1B4BE6194((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/coded_stream.cc", 810);
        int64_t v9 = sub_1B4BE61AC(v13, "CHECK failed: size > 0: ");
        sub_1B4BE62E8((uint64_t)&v11, (const char **)&v9->__r_.__value_.__l.__data_);
        sub_1B4BE62F0((uint64_t)v13);
        LODWORD(v6) = v12;
        unint64_t v5 = (char *)v10;
      }
      *(_OWORD *)uint64_t v3 = *(_OWORD *)*a1;
      uint64_t v7 = &v3[(int)v6];
    }
    else
    {
      *(_OWORD *)uint64_t v3 = *(_OWORD *)v5;
      uint64_t v7 = (char *)(a1 + 4);
    }
    *a1 = v7;
    a1[1] = v5;
  }
  else
  {
    *((unsigned char *)a1 + 56) = 1;
    uint64_t v3 = (char *)(a1 + 2);
LABEL_14:
    *a1 = (char *)(a1 + 4);
  }
  return v3;
}

void sub_1B4BE5680(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1B4BE62F0((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_1B4BE56A0(uint64_t a1, char *a2)
{
  if (!*(unsigned char *)(a1 + 56))
  {
    int64_t v3 = sub_1B4BE5350(a1, a2);
    if (v3) {
      (*(void (**)(void, int64_t))(**(void **)(a1 + 48) + 24))(*(void *)(a1 + 48), v3);
    }
    a2 = (char *)(a1 + 16);
    *(void *)a1 = a1 + 16;
    *(void *)(a1 + 8) = a1 + 16;
  }
  return a2;
}

char *sub_1B4BE5708(uint64_t a1, char *a2)
{
  while (!*(unsigned char *)(a1 + 56))
  {
    int64_t v3 = &a2[-*(void *)a1];
    if ((v3 & 0x80000000) != 0)
    {
      sub_1B4BE6194((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/coded_stream.cc", 829);
      unint64_t v5 = sub_1B4BE61AC(v8, "CHECK failed: overrun >= 0: ");
      sub_1B4BE62E8((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
      goto LABEL_6;
    }
    if (v3 > 0x10)
    {
      sub_1B4BE6194((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/coded_stream.cc", 830);
      uint64_t v4 = sub_1B4BE61AC(v8, "CHECK failed: overrun <= kSlopBytes: ");
      sub_1B4BE62E8((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
LABEL_6:
      sub_1B4BE62F0((uint64_t)v8);
    }
    a2 = &sub_1B4BE54E8((char **)a1)[(int)v3];
    if ((unint64_t)a2 < *(void *)a1) {
      return a2;
    }
  }
  return (char *)(a1 + 16);
}

void sub_1B4BE57FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1B4BE62F0((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_1B4BE581C(uint64_t *a1, char *a2, int a3, unint64_t a4)
{
  uint64_t v4 = (char *)a4;
  for (int i = sub_1B4BE58C0(a1, a4); a3 > i; int i = sub_1B4BE58C0(a1, (unint64_t)v4))
  {
    memcpy(v4, a2, i);
    a3 -= i;
    a2 += i;
    uint64_t v4 = sub_1B4BE5708((uint64_t)a1, &v4[i]);
  }
  memcpy(v4, a2, a3);
  return &v4[a3];
}

uint64_t sub_1B4BE58C0(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = *a1;
  if (*a1 + 16 < a2)
  {
    sub_1B4BE6194((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/io/coded_stream.h", 838);
    unint64_t v5 = sub_1B4BE61AC(v8, "CHECK failed: ptr <= end_ + kSlopBytes: ");
    sub_1B4BE62E8((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_1B4BE62F0((uint64_t)v8);
    uint64_t v3 = *a1;
  }
  return v3 - a2 + 16;
}

void sub_1B4BE5944(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1B4BE62F0((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_1B4BE595C(uint64_t a1, void *a2, uint64_t a3, char *a4)
{
  if (sub_1B4BE58C0((uint64_t *)a1, (unint64_t)a4) <= (int)a3)
  {
    unint64_t v8 = sub_1B4BE56A0(a1, a4);
    if (((*(uint64_t (**)(void, void *, uint64_t))(**(void **)(a1 + 48) + 40))(*(void *)(a1 + 48), a2, a3) & 1) == 0)
    {
      *(unsigned char *)(a1 + 56) = 1;
      unint64_t v8 = (char *)(a1 + 16);
      *(void *)a1 = a1 + 32;
    }
    return v8;
  }
  if (*(void *)a1 - (void)a4 >= (int)a3)
  {
    memcpy(a4, a2, (int)a3);
    return &a4[(int)a3];
  }
  return sub_1B4BE581C((uint64_t *)a1, (char *)a2, a3, (unint64_t)a4);
}

char *sub_1B4BE5A64(unint64_t *a1, int a2, void **a3, char *a4)
{
  uint64_t v4 = a4;
  unint64_t v8 = *a1;
  if (*a1 <= (unint64_t)a4)
  {
    uint64_t v4 = sub_1B4BE5708((uint64_t)a1, a4);
    unint64_t v8 = *a1;
  }
  if (*((char *)a3 + 23) >= 0) {
    uint64_t v9 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    uint64_t v9 = *((unsigned int *)a3 + 2);
  }
  if (v8 <= (unint64_t)v4)
  {
    sub_1B4BE6194((uint64_t)v23, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/io/coded_stream.h", 858);
    std::string::size_type v10 = sub_1B4BE61AC(v23, "CHECK failed: ptr < end_: ");
    sub_1B4BE62E8((uint64_t)&v22, (const char **)&v10->__r_.__value_.__l.__data_);
    sub_1B4BE62F0((uint64_t)v23);
  }
  unsigned int v11 = (8 * a2) | 2;
  if (v11 > 0x7F)
  {
    char *v4 = (8 * a2) | 0x82;
    unsigned int v13 = (8 * a2) >> 7;
    if (v11 >> 14)
    {
      int v12 = v4 + 2;
      do
      {
        *(v12 - 1) = v13 | 0x80;
        unsigned int v14 = v13 >> 7;
        ++v12;
        unsigned int v15 = v13 >> 14;
        v13 >>= 7;
      }
      while (v15);
      *(v12 - 1) = v14;
    }
    else
    {
      v4[1] = v13;
      int v12 = v4 + 2;
    }
  }
  else
  {
    char *v4 = v11;
    int v12 = v4 + 1;
  }
  if (v9 >= 0x80)
  {
    unsigned int v20 = v9;
    do
    {
      *v12++ = v20 | 0x80;
      unsigned int v16 = v20 >> 7;
      unsigned int v21 = v20 >> 14;
      v20 >>= 7;
    }
    while (v21);
  }
  else
  {
    LOBYTE(v16) = v9;
  }
  *int v12 = v16;
  size_t v17 = v12 + 1;
  if (*((char *)a3 + 23) >= 0) {
    uint64_t v18 = a3;
  }
  else {
    uint64_t v18 = *a3;
  }
  return sub_1B4BE5BEC((uint64_t)a1, v18, v9, v17);
}

void sub_1B4BE5BD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1B4BE62F0((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_1B4BE5BEC(uint64_t a1, void *a2, uint64_t a3, char *__dst)
{
  if (*(unsigned char *)(a1 + 57))
  {
    return sub_1B4BE595C(a1, a2, a3, __dst);
  }
  else if (*(void *)a1 - (void)__dst < (int)a3)
  {
    return sub_1B4BE581C((uint64_t *)a1, (char *)a2, a3, (unint64_t)__dst);
  }
  else
  {
    uint64_t v6 = (int)a3;
    memcpy(__dst, a2, (int)a3);
    return &__dst[v6];
  }
}

char *sub_1B4BE5C78(uint64_t *a1, int a2, uint64_t a3, char *a4)
{
  uint64_t v4 = a4;
  unint64_t v8 = *a1;
  if (*a1 <= (unint64_t)a4)
  {
    uint64_t v4 = sub_1B4BE5708((uint64_t)a1, a4);
    unint64_t v8 = *a1;
  }
  if (*(char *)(a3 + 23) >= 0) {
    LODWORD(v9) = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    uint64_t v9 = *(void *)(a3 + 8);
  }
  if (v8 <= (unint64_t)v4)
  {
    sub_1B4BE6194((uint64_t)v23, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/io/coded_stream.h", 858);
    std::string::size_type v10 = sub_1B4BE61AC(v23, "CHECK failed: ptr < end_: ");
    sub_1B4BE62E8((uint64_t)&v22, (const char **)&v10->__r_.__value_.__l.__data_);
    sub_1B4BE62F0((uint64_t)v23);
  }
  unsigned int v11 = (8 * a2) | 2;
  if (v11 > 0x7F)
  {
    char *v4 = (8 * a2) | 0x82;
    unsigned int v13 = (8 * a2) >> 7;
    if (v11 >> 14)
    {
      int v12 = v4 + 2;
      do
      {
        *(v12 - 1) = v13 | 0x80;
        unsigned int v14 = v13 >> 7;
        ++v12;
        unsigned int v15 = v13 >> 14;
        v13 >>= 7;
      }
      while (v15);
      *(v12 - 1) = v14;
    }
    else
    {
      v4[1] = v13;
      int v12 = v4 + 2;
    }
  }
  else
  {
    char *v4 = v11;
    int v12 = v4 + 1;
  }
  if (v9 >= 0x80)
  {
    unsigned int v20 = v9;
    do
    {
      *v12++ = v20 | 0x80;
      unsigned int v16 = v20 >> 7;
      unsigned int v21 = v20 >> 14;
      v20 >>= 7;
    }
    while (v21);
  }
  else
  {
    LOBYTE(v16) = v9;
  }
  *int v12 = v16;
  size_t v17 = v12 + 1;
  if (*(char *)(a3 + 23) >= 0) {
    uint64_t v18 = (char *)a3;
  }
  else {
    uint64_t v18 = *(char **)a3;
  }
  if (*a1 - (uint64_t)v17 < (int)v9) {
    return sub_1B4BE581C(a1, v18, v9, (unint64_t)v17);
  }
  memcpy(v17, v18, (int)v9);
  return &v17[(int)v9];
}

void sub_1B4BE5E10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1B4BE62F0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1B4BE5E28(int a1, int a2, const std::string::value_type *a3)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if (a2 > 3014000)
  {
    LODWORD(v2sub_1B4BC92E4(&a9, 0) = 3;
    unsigned int v21 = "/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/common.cc";
    int v22 = 76;
    memset(&v23, 0, sizeof(v23));
    std::string::append(&v23, "This program requires version ");
    sub_1B4BE621C(a2, &v17);
    if ((v19 & 0x80u) == 0) {
      uint64_t v6 = (const std::string::value_type *)&v17;
    }
    else {
      uint64_t v6 = (const std::string::value_type *)v17;
    }
    if ((v19 & 0x80u) == 0) {
      std::string::size_type v7 = v19;
    }
    else {
      std::string::size_type v7 = v18;
    }
    std::string::append(&v23, v6, v7);
    std::string::append(&v23, " of the Protocol Buffer runtime library, but the installed version is ");
    snprintf(__str, 0x80uLL, "%d.%d.%d", 3, 14, 0);
    char v25 = 0;
    sub_1B4BB8DC0(&__p, __str);
    if ((v16 & 0x80u) == 0) {
      p_p = (const std::string::value_type *)&__p;
    }
    else {
      p_p = (const std::string::value_type *)__p;
    }
    if ((v16 & 0x80u) == 0) {
      std::string::size_type v9 = v16;
    }
    else {
      std::string::size_type v9 = v15;
    }
    std::string::append(&v23, p_p, v9);
    std::string::append(&v23, ".  Please update your library.  If you compiled the program yourself, make sure that your headers are from the same version of Protocol Buffers as your link-time library.  (Version verification failed in \"");
    std::string::append(&v23, a3);
    std::string::append(&v23, "\".)");
    sub_1B4BE64A4(&v20);
    if ((char)v16 < 0) {
      operator delete(__p);
    }
    if ((char)v19 < 0) {
      operator delete(v17);
    }
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v23.__r_.__value_.__l.__data_);
    }
  }
  if (a1 < 3014000)
  {
    LODWORD(v2sub_1B4BC92E4(&a9, 0) = 3;
    unsigned int v21 = "/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/common.cc";
    int v22 = 87;
    memset(&v23, 0, sizeof(v23));
    std::string::append(&v23, "This program was compiled against version ");
    sub_1B4BE621C(a1, &v17);
    if ((v19 & 0x80u) == 0) {
      std::string::size_type v10 = (const std::string::value_type *)&v17;
    }
    else {
      std::string::size_type v10 = (const std::string::value_type *)v17;
    }
    if ((v19 & 0x80u) == 0) {
      std::string::size_type v11 = v19;
    }
    else {
      std::string::size_type v11 = v18;
    }
    std::string::append(&v23, v10, v11);
    std::string::append(&v23, " of the Protocol Buffer runtime library, which is not compatible with the installed version (");
    snprintf(__str, 0x80uLL, "%d.%d.%d", 3, 14, 0);
    char v25 = 0;
    sub_1B4BB8DC0(&__p, __str);
    if ((v16 & 0x80u) == 0) {
      int v12 = (const std::string::value_type *)&__p;
    }
    else {
      int v12 = (const std::string::value_type *)__p;
    }
    if ((v16 & 0x80u) == 0) {
      std::string::size_type v13 = v16;
    }
    else {
      std::string::size_type v13 = v15;
    }
    std::string::append(&v23, v12, v13);
    std::string::append(&v23, ").  Contact the program author for an update.  If you compiled the program yourself, make sure that your headers are from the same version of Protocol Buffers as your link-time library.  (Version verification failed in \"");
    std::string::append(&v23, a3);
    std::string::append(&v23, "\".)");
    sub_1B4BE64A4(&v20);
    if ((char)v16 < 0) {
      operator delete(__p);
    }
    if ((char)v19 < 0) {
      operator delete(v17);
    }
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v23.__r_.__value_.__l.__data_);
    }
  }
}

void sub_1B4BE6124(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1B4BE6194(uint64_t result, int a2, uint64_t a3, int a4)
{
  *(_DWORD *)unint64_t result = a2;
  *(void *)(result + 8) = a3;
  *(_DWORD *)(result + 16) = a4;
  *(void *)(result + 32) = 0;
  *(void *)(result + 4sub_1B4BC92E4(&a9, 0) = 0;
  *(void *)(result + 24) = 0;
  return result;
}

std::string *sub_1B4BE61AC(std::string *a1, const std::string::value_type *a2)
{
  return a1;
}

std::string *sub_1B4BE61D8(std::string *a1, const std::string::value_type *a2)
{
  uint64_t v3 = a1 + 1;
  std::string::size_type v4 = *((void *)a2 + 1);
  if (a2[23] >= 0)
  {
    std::string::size_type v5 = *((unsigned __int8 *)a2 + 23);
  }
  else
  {
    a2 = *(const std::string::value_type **)a2;
    std::string::size_type v5 = v4;
  }
  std::string::append(v3, a2, v5);
  return a1;
}

void *sub_1B4BE621C@<X0>(int a1@<W0>, void *a2@<X8>)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  snprintf(__str, 0x80uLL, "%d.%d.%d", a1 / 1000000, a1 / 1000 % 1000, a1 % 1000);
  char __str[127] = 0;
  return sub_1B4BB8DC0(a2, __str);
}

const char **sub_1B4BE62E8(uint64_t a1, const char **a2)
{
  return sub_1B4BE64A4(a2);
}

uint64_t sub_1B4BE62F0(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  return a1;
}

uint64_t sub_1B4BE6324(uint64_t result, const char *a2, int a3, uint64_t a4)
{
  if ((result & 0x80000000) == 0)
  {
    std::string::size_type v4 = (FILE **)MEMORY[0x1E4F143C8];
    if (*(char *)(a4 + 23) >= 0) {
      uint64_t v5 = (const char *)a4;
    }
    else {
      uint64_t v5 = *(const char **)a4;
    }
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "[libprotobuf %s %s:%d] %s\n", off_1E60A3748[result], a2, a3, v5);
    uint64_t v6 = *v4;
    return fflush(v6);
  }
  return result;
}

std::string *sub_1B4BE63A4(std::string *a1, int a2)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  snprintf(__str, 0x80uLL, "%d", a2);
  char __str[127] = 0;
  std::string::append(a1 + 1, __str);
  return a1;
}

std::string *sub_1B4BE6424(std::string *a1, uint64_t a2)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  snprintf(__str, 0x80uLL, "%lu", a2);
  char __str[127] = 0;
  std::string::append(a1 + 1, __str);
  return a1;
}

const char **sub_1B4BE64A4(const char **result)
{
  uint64_t v1 = result;
  if (*(_DWORD *)result == 3)
  {
    uint64_t v2 = 3;
  }
  else
  {
    int v3 = atomic_load((unsigned int *)&unk_1E9D40688);
    if (v3 > 0) {
      goto LABEL_6;
    }
    uint64_t v2 = *(unsigned int *)result;
  }
  unint64_t result = (const char **)off_1EC5510A8(v2, v1[1], *((_DWORD *)v1 + 4), (uint64_t)(v1 + 3));
LABEL_6:
  if (*(_DWORD *)v1 == 3)
  {
    exception = __cxa_allocate_exception(0x30uLL);
    sub_1B4BE6564(exception, v1[1], *((unsigned int *)v1 + 4), v1 + 3);
    __cxa_throw(exception, (struct type_info *)&unk_1F0D53848, (void (*)(void *))sub_1B4BE6568);
  }
  return result;
}

void sub_1B4BE6550(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1B4BE656C(std::exception *this)
{
  this->__vftable = (std::exception_vtbl *)&unk_1F0D554E8;
  if (SHIBYTE(this[5].__vftable) < 0) {
    operator delete(this[3].__vftable);
  }
  std::exception::~exception(this);
}

void sub_1B4BE65CC(std::exception *a1)
{
  sub_1B4BE656C(a1);
  JUMPOUT(0x1BA9929C0);
}

uint64_t sub_1B4BE6604(uint64_t a1)
{
  uint64_t result = a1 + 24;
  if (*(char *)(a1 + 47) < 0) {
    return *(void *)result;
  }
  return result;
}

uint64_t sub_1B4BE6620(uint64_t a1, uint64_t a2, int a3, long long *a4)
{
  *(void *)a1 = &unk_1F0D554E8;
  *(void *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 16) = a3;
  uint64_t v5 = a1 + 24;
  if (*((char *)a4 + 23) < 0)
  {
    sub_1B4BCA11C((unsigned char *)v5, *(void **)a4, *((void *)a4 + 1));
  }
  else
  {
    long long v6 = *a4;
    *(void *)(v5 + 16) = *((void *)a4 + 2);
    *(_OWORD *)uint64_t v5 = v6;
  }
  return a1;
}

void sub_1B4BE668C(_Unwind_Exception *a1)
{
  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1B4BE66A0(uint64_t a1, int a2, _OWORD *a3)
{
  if (qword_1E9D40690)
  {
    int8x8_t v3 = *(int8x8_t *)(qword_1E9D40690 + 8);
    if (v3)
    {
      unint64_t v4 = *(void *)(a1 + 8);
      unint64_t v5 = 0x9DDFEA08EB382D69 * (((8 * v4) + 8) ^ HIDWORD(v4));
      unint64_t v6 = 0x9DDFEA08EB382D69 * (HIDWORD(v4) ^ (v5 >> 47) ^ v5);
      unint64_t v7 = (0x9DDFEA08EB382D69 * (v6 ^ (v6 >> 47))) ^ a2;
      uint8x8_t v8 = (uint8x8_t)vcnt_s8(v3);
      v8.i16[0] = vaddlv_u8(v8);
      if (v8.u32[0] > 1uLL)
      {
        unint64_t v9 = v7;
        if (v7 >= *(void *)&v3) {
          unint64_t v9 = v7 % *(void *)&v3;
        }
      }
      else
      {
        unint64_t v9 = (*(void *)&v3 - 1) & v7;
      }
      std::string::size_type v10 = *(uint64_t ***)(*(void *)qword_1E9D40690 + 8 * v9);
      if (v10)
      {
        for (int i = *v10; i; int i = (uint64_t *)*i)
        {
          unint64_t v12 = i[1];
          if (v7 == v12)
          {
            if (i[2] == v4 && *((_DWORD *)i + 6) == a2)
            {
              long long v14 = *((_OWORD *)i + 3);
              *a3 = *((_OWORD *)i + 2);
              a3[1] = v14;
              return 1;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v12 >= *(void *)&v3) {
                v12 %= *(void *)&v3;
              }
            }
            else
            {
              v12 &= *(void *)&v3 - 1;
            }
            if (v12 != v9) {
              return 0;
            }
          }
        }
      }
    }
  }
  return 0;
}

uint64_t sub_1B4BE67B4(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = a2;
  *(_DWORD *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  return result;
}

uint64_t sub_1B4BE67C4(uint64_t a1)
{
  if (!*(void *)a1)
  {
    uint64_t v2 = *(void *)(a1 + 16);
    if (*(unsigned __int16 *)(a1 + 8) >= 0x101u)
    {
      sub_1B4BF0ACC(*(unsigned __int8 **)v2, (unsigned __int8 *)(v2 + 8));
    }
    else if (*(_WORD *)(a1 + 10))
    {
      uint64_t v3 = 32 * *(unsigned __int16 *)(a1 + 10);
      unint64_t v4 = (unsigned __int8 *)(v2 + 8);
      do
      {
        sub_1B4BF0810(v4);
        v4 += 32;
        v3 -= 32;
      }
      while (v3);
    }
    uint64_t v5 = *(void *)(a1 + 16);
    if (*(unsigned __int16 *)(a1 + 8) >= 0x101u)
    {
      if (v5)
      {
        uint64_t v7 = *(void *)(a1 + 16);
        sub_1B4BB38C8(v5, *(void **)(v5 + 8));
        MEMORY[0x1BA9929C0](v7, 0x1020C4062D53EE8);
      }
    }
    else if (v5)
    {
      MEMORY[0x1BA992990](v5, 0x1062C802AB6010CLL);
    }
  }
  return a1;
}

unsigned __int8 *sub_1B4BE6898(unsigned __int8 *result)
{
  uint64_t v1 = result;
  if (result[9])
  {
    uint64_t v2 = result[8];
    if ((v2 - 19) <= 0xFFFFFFED)
    {
      sub_1B4BE6194((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      uint64_t v3 = sub_1B4BE61AC(v10, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_1B4BE62E8((uint64_t)&v9, (const char **)&v3->__r_.__value_.__l.__data_);
      uint64_t result = (unsigned __int8 *)sub_1B4BE62F0((uint64_t)v10);
    }
    switch(v2)
    {
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 13:
      case 14:
      case 15:
      case 16:
      case 17:
      case 18:
        **(_DWORD **)uint64_t v1 = 0;
        break;
      case 9:
      case 12:
        uint64_t result = (unsigned __int8 *)sub_1B4BE0670(*(void *)v1);
        break;
      case 10:
      case 11:
        uint64_t result = (unsigned __int8 *)sub_1B4BF12D4(*(void *)v1);
        break;
      default:
        return result;
    }
  }
  else if ((result[10] & 1) == 0)
  {
    uint64_t v4 = result[8];
    if ((v4 - 19) <= 0xFFFFFFED)
    {
      sub_1B4BE6194((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      uint64_t v5 = sub_1B4BE61AC(v10, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_1B4BE62E8((uint64_t)&v9, (const char **)&v5->__r_.__value_.__l.__data_);
      uint64_t result = (unsigned __int8 *)sub_1B4BE62F0((uint64_t)v10);
    }
    int v6 = dword_1B4C9A1C0[v4];
    if (v6 == 10)
    {
      uint64_t v8 = **(void **)v1;
      if ((v1[10] & 0x10) != 0) {
        uint64_t result = (unsigned __int8 *)(*(uint64_t (**)(void))(v8 + 112))();
      }
      else {
        uint64_t result = (unsigned __int8 *)(*(uint64_t (**)(void))(v8 + 40))();
      }
    }
    else if (v6 == 9)
    {
      uint64_t v7 = *(void *)v1;
      if (*(char *)(*(void *)v1 + 23) < 0)
      {
        **(unsigned char **)uint64_t v7 = 0;
        *(void *)(v7 + 8) = 0;
      }
      else
      {
        *(unsigned char *)uint64_t v7 = 0;
        *(unsigned char *)(v7 + 23) = 0;
      }
    }
    v1[10] = v1[10] & 0xF0 | 1;
  }
  return result;
}

void sub_1B4BE6A6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1B4BE62F0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B4BE6AB4(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5)
{
  uint64_t result = (uint64_t)sub_1B4BEBA20(a1, a2);
  uint64_t v9 = result;
  *(void *)(result + 16) = a5;
  if (v10)
  {
    *(unsigned char *)(result + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      sub_1B4BE6194((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      std::string::size_type v11 = sub_1B4BE61AC(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_1B4BE62E8((uint64_t)&v17, (const char **)&v11->__r_.__value_.__l.__data_);
      uint64_t result = sub_1B4BE62F0((uint64_t)v18);
    }
    if (dword_1B4C9A1C0[a3] != 1)
    {
      sub_1B4BE6194((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 348);
      unint64_t v12 = sub_1B4BE61AC(v18, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_INT32): ");
      sub_1B4BE62E8((uint64_t)&v17, (const char **)&v12->__r_.__value_.__l.__data_);
      uint64_t result = sub_1B4BE62F0((uint64_t)v18);
    }
    *(unsigned char *)(v9 + 9) = 0;
  }
  else
  {
    if (*(unsigned char *)(result + 9))
    {
      sub_1B4BE6194((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 348);
      std::string::size_type v13 = sub_1B4BE61AC(v18, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (OPTIONAL_FIELD): ");
      sub_1B4BE62E8((uint64_t)&v17, (const char **)&v13->__r_.__value_.__l.__data_);
      uint64_t result = sub_1B4BE62F0((uint64_t)v18);
    }
    uint64_t v14 = *(unsigned __int8 *)(v9 + 8);
    if ((v14 - 19) <= 0xFFFFFFED)
    {
      sub_1B4BE6194((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      std::string::size_type v15 = sub_1B4BE61AC(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_1B4BE62E8((uint64_t)&v17, (const char **)&v15->__r_.__value_.__l.__data_);
      uint64_t result = sub_1B4BE62F0((uint64_t)v18);
    }
    if (dword_1B4C9A1C0[v14] != 1)
    {
      sub_1B4BE6194((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 348);
      unsigned __int8 v16 = sub_1B4BE61AC(v18, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_INT32): ");
      sub_1B4BE62E8((uint64_t)&v17, (const char **)&v16->__r_.__value_.__l.__data_);
      uint64_t result = sub_1B4BE62F0((uint64_t)v18);
    }
  }
  *(unsigned char *)(v9 + 10) &= 0xF0u;
  *(_DWORD *)uint64_t v9 = a4;
  return result;
}

void sub_1B4BE6C94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1B4BE62F0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B4BE6CCC(uint64_t *a1, uint64_t a2, int a3, int a4, int a5, uint64_t *a6)
{
  std::string::size_type v11 = sub_1B4BEBA20((uint64_t)a1, a2);
  unint64_t v12 = v11;
  std::string v11[2] = a6;
  if (v13)
  {
    *((unsigned char *)v11 + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      sub_1B4BE6194((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      uint64_t v14 = sub_1B4BE61AC(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_1B4BE62E8((uint64_t)&v27, (const char **)&v14->__r_.__value_.__l.__data_);
      sub_1B4BE62F0((uint64_t)v28);
    }
    if (dword_1B4C9A1C0[a3] != 1)
    {
      sub_1B4BE6194((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 348);
      std::string::size_type v15 = sub_1B4BE61AC(v28, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_INT32): ");
      sub_1B4BE62E8((uint64_t)&v27, (const char **)&v15->__r_.__value_.__l.__data_);
      sub_1B4BE62F0((uint64_t)v28);
    }
    *((unsigned char *)v12 + 9) = 1;
    *((unsigned char *)v12 + 11) = a4;
    uint64_t v16 = *a1;
    if (!*a1) {
      operator new();
    }
    if (*(unsigned char *)(v16 + 24)) {
      (*(void (**)(void, void *, uint64_t))(**(void **)(*(void *)(v16 + 32) + 32) + 40))(*(void *)(*(void *)(v16 + 32) + 32), &unk_1F0D53808, 16);
    }
    char v17 = (uint64_t *)sub_1B4BE4804((void *)v16, 0x10uLL, (uint64_t)sub_1B4BF0B3C);
    *char v17 = 0;
    v17[1] = v16;
    *unint64_t v12 = v17;
  }
  else
  {
    if (!*((unsigned char *)v11 + 9))
    {
      sub_1B4BE6194((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 348);
      std::string::size_type v18 = sub_1B4BE61AC(v28, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (REPEATED_FIELD): ");
      sub_1B4BE62E8((uint64_t)&v27, (const char **)&v18->__r_.__value_.__l.__data_);
      sub_1B4BE62F0((uint64_t)v28);
    }
    uint64_t v19 = *((unsigned __int8 *)v12 + 8);
    if ((v19 - 19) <= 0xFFFFFFED)
    {
      sub_1B4BE6194((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      unsigned int v20 = sub_1B4BE61AC(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_1B4BE62E8((uint64_t)&v27, (const char **)&v20->__r_.__value_.__l.__data_);
      sub_1B4BE62F0((uint64_t)v28);
    }
    if (dword_1B4C9A1C0[v19] != 1)
    {
      sub_1B4BE6194((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 348);
      unsigned int v21 = sub_1B4BE61AC(v28, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_INT32): ");
      sub_1B4BE62E8((uint64_t)&v27, (const char **)&v21->__r_.__value_.__l.__data_);
      sub_1B4BE62F0((uint64_t)v28);
    }
    if (*((unsigned __int8 *)v12 + 11) != a4)
    {
      sub_1B4BE6194((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 348);
      int v22 = sub_1B4BE61AC(v28, "CHECK failed: (extension->is_packed) == (packed): ");
      sub_1B4BE62E8((uint64_t)&v27, (const char **)&v22->__r_.__value_.__l.__data_);
      sub_1B4BE62F0((uint64_t)v28);
    }
  }
  std::string v23 = (int *)*v12;
  uint64_t v24 = *v23;
  if (v24 == v23[1])
  {
    int v25 = v24 + 1;
    sub_1B4BF64F4(v23, v24 + 1);
    uint64_t result = sub_1B4BF6994((uint64_t)v23);
    *(_DWORD *)(result + 4 * v24) = a5;
  }
  else
  {
    uint64_t result = sub_1B4BF6994((uint64_t)v23);
    *(_DWORD *)(result + 4 * v24) = a5;
    int v25 = v24 + 1;
  }
  int *v23 = v25;
  return result;
}

void sub_1B4BE6FD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1B4BE62F0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B4BE7010(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = (uint64_t)sub_1B4BEBA20(a1, a2);
  uint64_t v9 = result;
  *(void *)(result + 16) = a5;
  if (v10)
  {
    *(unsigned char *)(result + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      sub_1B4BE6194((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      std::string::size_type v11 = sub_1B4BE61AC(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_1B4BE62E8((uint64_t)&v17, (const char **)&v11->__r_.__value_.__l.__data_);
      uint64_t result = sub_1B4BE62F0((uint64_t)v18);
    }
    if (dword_1B4C9A1C0[a3] != 2)
    {
      sub_1B4BE6194((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 349);
      unint64_t v12 = sub_1B4BE61AC(v18, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_INT64): ");
      sub_1B4BE62E8((uint64_t)&v17, (const char **)&v12->__r_.__value_.__l.__data_);
      uint64_t result = sub_1B4BE62F0((uint64_t)v18);
    }
    *(unsigned char *)(v9 + 9) = 0;
  }
  else
  {
    if (*(unsigned char *)(result + 9))
    {
      sub_1B4BE6194((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 349);
      char v13 = sub_1B4BE61AC(v18, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (OPTIONAL_FIELD): ");
      sub_1B4BE62E8((uint64_t)&v17, (const char **)&v13->__r_.__value_.__l.__data_);
      uint64_t result = sub_1B4BE62F0((uint64_t)v18);
    }
    uint64_t v14 = *(unsigned __int8 *)(v9 + 8);
    if ((v14 - 19) <= 0xFFFFFFED)
    {
      sub_1B4BE6194((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      std::string::size_type v15 = sub_1B4BE61AC(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_1B4BE62E8((uint64_t)&v17, (const char **)&v15->__r_.__value_.__l.__data_);
      uint64_t result = sub_1B4BE62F0((uint64_t)v18);
    }
    if (dword_1B4C9A1C0[v14] != 2)
    {
      sub_1B4BE6194((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 349);
      uint64_t v16 = sub_1B4BE61AC(v18, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_INT64): ");
      sub_1B4BE62E8((uint64_t)&v17, (const char **)&v16->__r_.__value_.__l.__data_);
      uint64_t result = sub_1B4BE62F0((uint64_t)v18);
    }
  }
  *(unsigned char *)(v9 + 10) &= 0xF0u;
  *(void *)uint64_t v9 = a4;
  return result;
}

void sub_1B4BE71F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1B4BE62F0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B4BE7228(uint64_t *a1, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t *a6)
{
  std::string::size_type v11 = sub_1B4BEBA20((uint64_t)a1, a2);
  unint64_t v12 = v11;
  std::string v11[2] = a6;
  if (v13)
  {
    *((unsigned char *)v11 + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      sub_1B4BE6194((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      uint64_t v14 = sub_1B4BE61AC(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_1B4BE62E8((uint64_t)&v27, (const char **)&v14->__r_.__value_.__l.__data_);
      sub_1B4BE62F0((uint64_t)v28);
    }
    if (dword_1B4C9A1C0[a3] != 2)
    {
      sub_1B4BE6194((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 349);
      std::string::size_type v15 = sub_1B4BE61AC(v28, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_INT64): ");
      sub_1B4BE62E8((uint64_t)&v27, (const char **)&v15->__r_.__value_.__l.__data_);
      sub_1B4BE62F0((uint64_t)v28);
    }
    *((unsigned char *)v12 + 9) = 1;
    *((unsigned char *)v12 + 11) = a4;
    uint64_t v16 = *a1;
    if (!*a1) {
      operator new();
    }
    if (*(unsigned char *)(v16 + 24)) {
      (*(void (**)(void, void *, uint64_t))(**(void **)(*(void *)(v16 + 32) + 32) + 40))(*(void *)(*(void *)(v16 + 32) + 32), &unk_1F0D53828, 16);
    }
    char v17 = (uint64_t *)sub_1B4BE4804((void *)v16, 0x10uLL, (uint64_t)sub_1B4BF0B40);
    *char v17 = 0;
    v17[1] = v16;
    *unint64_t v12 = v17;
  }
  else
  {
    if (!*((unsigned char *)v11 + 9))
    {
      sub_1B4BE6194((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 349);
      std::string::size_type v18 = sub_1B4BE61AC(v28, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (REPEATED_FIELD): ");
      sub_1B4BE62E8((uint64_t)&v27, (const char **)&v18->__r_.__value_.__l.__data_);
      sub_1B4BE62F0((uint64_t)v28);
    }
    uint64_t v19 = *((unsigned __int8 *)v12 + 8);
    if ((v19 - 19) <= 0xFFFFFFED)
    {
      sub_1B4BE6194((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      unsigned int v20 = sub_1B4BE61AC(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_1B4BE62E8((uint64_t)&v27, (const char **)&v20->__r_.__value_.__l.__data_);
      sub_1B4BE62F0((uint64_t)v28);
    }
    if (dword_1B4C9A1C0[v19] != 2)
    {
      sub_1B4BE6194((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 349);
      unsigned int v21 = sub_1B4BE61AC(v28, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_INT64): ");
      sub_1B4BE62E8((uint64_t)&v27, (const char **)&v21->__r_.__value_.__l.__data_);
      sub_1B4BE62F0((uint64_t)v28);
    }
    if (*((unsigned __int8 *)v12 + 11) != a4)
    {
      sub_1B4BE6194((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 349);
      int v22 = sub_1B4BE61AC(v28, "CHECK failed: (extension->is_packed) == (packed): ");
      sub_1B4BE62E8((uint64_t)&v27, (const char **)&v22->__r_.__value_.__l.__data_);
      sub_1B4BE62F0((uint64_t)v28);
    }
  }
  std::string v23 = (int *)*v12;
  uint64_t v24 = *v23;
  if (v24 == v23[1])
  {
    int v25 = v24 + 1;
    sub_1B4BF71AC(v23, v24 + 1);
    uint64_t result = sub_1B4BF764C((uint64_t)v23);
    *(void *)(result + 8 * v24) = a5;
  }
  else
  {
    uint64_t result = sub_1B4BF764C((uint64_t)v23);
    *(void *)(result + 8 * v24) = a5;
    int v25 = v24 + 1;
  }
  int *v23 = v25;
  return result;
}

void sub_1B4BE752C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1B4BE62F0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B4BE756C(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5)
{
  uint64_t result = (uint64_t)sub_1B4BEBA20(a1, a2);
  uint64_t v9 = result;
  *(void *)(result + 16) = a5;
  if (v10)
  {
    *(unsigned char *)(result + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      sub_1B4BE6194((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      std::string::size_type v11 = sub_1B4BE61AC(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_1B4BE62E8((uint64_t)&v17, (const char **)&v11->__r_.__value_.__l.__data_);
      uint64_t result = sub_1B4BE62F0((uint64_t)v18);
    }
    if (dword_1B4C9A1C0[a3] != 3)
    {
      sub_1B4BE6194((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 350);
      unint64_t v12 = sub_1B4BE61AC(v18, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_UINT32): ");
      sub_1B4BE62E8((uint64_t)&v17, (const char **)&v12->__r_.__value_.__l.__data_);
      uint64_t result = sub_1B4BE62F0((uint64_t)v18);
    }
    *(unsigned char *)(v9 + 9) = 0;
  }
  else
  {
    if (*(unsigned char *)(result + 9))
    {
      sub_1B4BE6194((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 350);
      char v13 = sub_1B4BE61AC(v18, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (OPTIONAL_FIELD): ");
      sub_1B4BE62E8((uint64_t)&v17, (const char **)&v13->__r_.__value_.__l.__data_);
      uint64_t result = sub_1B4BE62F0((uint64_t)v18);
    }
    uint64_t v14 = *(unsigned __int8 *)(v9 + 8);
    if ((v14 - 19) <= 0xFFFFFFED)
    {
      sub_1B4BE6194((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      std::string::size_type v15 = sub_1B4BE61AC(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_1B4BE62E8((uint64_t)&v17, (const char **)&v15->__r_.__value_.__l.__data_);
      uint64_t result = sub_1B4BE62F0((uint64_t)v18);
    }
    if (dword_1B4C9A1C0[v14] != 3)
    {
      sub_1B4BE6194((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 350);
      uint64_t v16 = sub_1B4BE61AC(v18, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_UINT32): ");
      sub_1B4BE62E8((uint64_t)&v17, (const char **)&v16->__r_.__value_.__l.__data_);
      uint64_t result = sub_1B4BE62F0((uint64_t)v18);
    }
  }
  *(unsigned char *)(v9 + 10) &= 0xF0u;
  *(_DWORD *)uint64_t v9 = a4;
  return result;
}

void sub_1B4BE774C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1B4BE62F0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B4BE7784(uint64_t *a1, uint64_t a2, int a3, int a4, int a5, uint64_t *a6)
{
  std::string::size_type v11 = sub_1B4BEBA20((uint64_t)a1, a2);
  unint64_t v12 = v11;
  std::string v11[2] = a6;
  if (v13)
  {
    *((unsigned char *)v11 + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      sub_1B4BE6194((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      uint64_t v14 = sub_1B4BE61AC(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_1B4BE62E8((uint64_t)&v27, (const char **)&v14->__r_.__value_.__l.__data_);
      sub_1B4BE62F0((uint64_t)v28);
    }
    if (dword_1B4C9A1C0[a3] != 3)
    {
      sub_1B4BE6194((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 350);
      std::string::size_type v15 = sub_1B4BE61AC(v28, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_UINT32): ");
      sub_1B4BE62E8((uint64_t)&v27, (const char **)&v15->__r_.__value_.__l.__data_);
      sub_1B4BE62F0((uint64_t)v28);
    }
    *((unsigned char *)v12 + 9) = 1;
    *((unsigned char *)v12 + 11) = a4;
    uint64_t v16 = *a1;
    if (!*a1) {
      operator new();
    }
    if (*(unsigned char *)(v16 + 24)) {
      (*(void (**)(void, void *, uint64_t))(**(void **)(*(void *)(v16 + 32) + 32) + 40))(*(void *)(*(void *)(v16 + 32) + 32), &unk_1F0D53818, 16);
    }
    char v17 = (uint64_t *)sub_1B4BE4804((void *)v16, 0x10uLL, (uint64_t)sub_1B4BF0B44);
    *char v17 = 0;
    v17[1] = v16;
    *unint64_t v12 = v17;
  }
  else
  {
    if (!*((unsigned char *)v11 + 9))
    {
      sub_1B4BE6194((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 350);
      std::string::size_type v18 = sub_1B4BE61AC(v28, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (REPEATED_FIELD): ");
      sub_1B4BE62E8((uint64_t)&v27, (const char **)&v18->__r_.__value_.__l.__data_);
      sub_1B4BE62F0((uint64_t)v28);
    }
    uint64_t v19 = *((unsigned __int8 *)v12 + 8);
    if ((v19 - 19) <= 0xFFFFFFED)
    {
      sub_1B4BE6194((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      unsigned int v20 = sub_1B4BE61AC(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_1B4BE62E8((uint64_t)&v27, (const char **)&v20->__r_.__value_.__l.__data_);
      sub_1B4BE62F0((uint64_t)v28);
    }
    if (dword_1B4C9A1C0[v19] != 3)
    {
      sub_1B4BE6194((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 350);
      unsigned int v21 = sub_1B4BE61AC(v28, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_UINT32): ");
      sub_1B4BE62E8((uint64_t)&v27, (const char **)&v21->__r_.__value_.__l.__data_);
      sub_1B4BE62F0((uint64_t)v28);
    }
    if (*((unsigned __int8 *)v12 + 11) != a4)
    {
      sub_1B4BE6194((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 350);
      int v22 = sub_1B4BE61AC(v28, "CHECK failed: (extension->is_packed) == (packed): ");
      sub_1B4BE62E8((uint64_t)&v27, (const char **)&v22->__r_.__value_.__l.__data_);
      sub_1B4BE62F0((uint64_t)v28);
    }
  }
  std::string v23 = (int *)*v12;
  uint64_t v24 = *v23;
  if (v24 == v23[1])
  {
    int v25 = v24 + 1;
    sub_1B4BF6B50(v23, v24 + 1);
    uint64_t result = sub_1B4BF6FF0((uint64_t)v23);
    *(_DWORD *)(result + 4 * v24) = a5;
  }
  else
  {
    uint64_t result = sub_1B4BF6FF0((uint64_t)v23);
    *(_DWORD *)(result + 4 * v24) = a5;
    int v25 = v24 + 1;
  }
  int *v23 = v25;
  return result;
}

void sub_1B4BE7A88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1B4BE62F0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B4BE7AC8(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = (uint64_t)sub_1B4BEBA20(a1, a2);
  uint64_t v9 = result;
  *(void *)(result + 16) = a5;
  if (v10)
  {
    *(unsigned char *)(result + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      sub_1B4BE6194((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      std::string::size_type v11 = sub_1B4BE61AC(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_1B4BE62E8((uint64_t)&v17, (const char **)&v11->__r_.__value_.__l.__data_);
      uint64_t result = sub_1B4BE62F0((uint64_t)v18);
    }
    if (dword_1B4C9A1C0[a3] != 4)
    {
      sub_1B4BE6194((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 351);
      unint64_t v12 = sub_1B4BE61AC(v18, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_UINT64): ");
      sub_1B4BE62E8((uint64_t)&v17, (const char **)&v12->__r_.__value_.__l.__data_);
      uint64_t result = sub_1B4BE62F0((uint64_t)v18);
    }
    *(unsigned char *)(v9 + 9) = 0;
  }
  else
  {
    if (*(unsigned char *)(result + 9))
    {
      sub_1B4BE6194((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 351);
      char v13 = sub_1B4BE61AC(v18, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (OPTIONAL_FIELD): ");
      sub_1B4BE62E8((uint64_t)&v17, (const char **)&v13->__r_.__value_.__l.__data_);
      uint64_t result = sub_1B4BE62F0((uint64_t)v18);
    }
    uint64_t v14 = *(unsigned __int8 *)(v9 + 8);
    if ((v14 - 19) <= 0xFFFFFFED)
    {
      sub_1B4BE6194((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      std::string::size_type v15 = sub_1B4BE61AC(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_1B4BE62E8((uint64_t)&v17, (const char **)&v15->__r_.__value_.__l.__data_);
      uint64_t result = sub_1B4BE62F0((uint64_t)v18);
    }
    if (dword_1B4C9A1C0[v14] != 4)
    {
      sub_1B4BE6194((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 351);
      uint64_t v16 = sub_1B4BE61AC(v18, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_UINT64): ");
      sub_1B4BE62E8((uint64_t)&v17, (const char **)&v16->__r_.__value_.__l.__data_);
      uint64_t result = sub_1B4BE62F0((uint64_t)v18);
    }
  }
  *(unsigned char *)(v9 + 10) &= 0xF0u;
  *(void *)uint64_t v9 = a4;
  return result;
}

void sub_1B4BE7CA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1B4BE62F0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B4BE7CE0(uint64_t *a1, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t *a6)
{
  std::string::size_type v11 = sub_1B4BEBA20((uint64_t)a1, a2);
  unint64_t v12 = v11;
  std::string v11[2] = a6;
  if (v13)
  {
    *((unsigned char *)v11 + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      sub_1B4BE6194((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      uint64_t v14 = sub_1B4BE61AC(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_1B4BE62E8((uint64_t)&v27, (const char **)&v14->__r_.__value_.__l.__data_);
      sub_1B4BE62F0((uint64_t)v28);
    }
    if (dword_1B4C9A1C0[a3] != 4)
    {
      sub_1B4BE6194((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 351);
      std::string::size_type v15 = sub_1B4BE61AC(v28, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_UINT64): ");
      sub_1B4BE62E8((uint64_t)&v27, (const char **)&v15->__r_.__value_.__l.__data_);
      sub_1B4BE62F0((uint64_t)v28);
    }
    *((unsigned char *)v12 + 9) = 1;
    *((unsigned char *)v12 + 11) = a4;
    uint64_t v16 = *a1;
    if (!*a1) {
      operator new();
    }
    if (*(unsigned char *)(v16 + 24)) {
      (*(void (**)(void, void *, uint64_t))(**(void **)(*(void *)(v16 + 32) + 32) + 40))(*(void *)(*(void *)(v16 + 32) + 32), &unk_1F0D53838, 16);
    }
    char v17 = (uint64_t *)sub_1B4BE4804((void *)v16, 0x10uLL, (uint64_t)sub_1B4BF0B48);
    *char v17 = 0;
    v17[1] = v16;
    *unint64_t v12 = v17;
  }
  else
  {
    if (!*((unsigned char *)v11 + 9))
    {
      sub_1B4BE6194((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 351);
      std::string::size_type v18 = sub_1B4BE61AC(v28, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (REPEATED_FIELD): ");
      sub_1B4BE62E8((uint64_t)&v27, (const char **)&v18->__r_.__value_.__l.__data_);
      sub_1B4BE62F0((uint64_t)v28);
    }
    uint64_t v19 = *((unsigned __int8 *)v12 + 8);
    if ((v19 - 19) <= 0xFFFFFFED)
    {
      sub_1B4BE6194((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      unsigned int v20 = sub_1B4BE61AC(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_1B4BE62E8((uint64_t)&v27, (const char **)&v20->__r_.__value_.__l.__data_);
      sub_1B4BE62F0((uint64_t)v28);
    }
    if (dword_1B4C9A1C0[v19] != 4)
    {
      sub_1B4BE6194((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 351);
      unsigned int v21 = sub_1B4BE61AC(v28, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_UINT64): ");
      sub_1B4BE62E8((uint64_t)&v27, (const char **)&v21->__r_.__value_.__l.__data_);
      sub_1B4BE62F0((uint64_t)v28);
    }
    if (*((unsigned __int8 *)v12 + 11) != a4)
    {
      sub_1B4BE6194((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 351);
      int v22 = sub_1B4BE61AC(v28, "CHECK failed: (extension->is_packed) == (packed): ");
      sub_1B4BE62E8((uint64_t)&v27, (const char **)&v22->__r_.__value_.__l.__data_);
      sub_1B4BE62F0((uint64_t)v28);
    }
  }
  std::string v23 = (int *)*v12;
  uint64_t v24 = *v23;
  if (v24 == v23[1])
  {
    int v25 = v24 + 1;
    sub_1B4BF7808(v23, v24 + 1);
    uint64_t result = sub_1B4BF7CA8((uint64_t)v23);
    *(void *)(result + 8 * v24) = a5;
  }
  else
  {
    uint64_t result = sub_1B4BF7CA8((uint64_t)v23);
    *(void *)(result + 8 * v24) = a5;
    int v25 = v24 + 1;
  }
  int *v23 = v25;
  return result;
}

void sub_1B4BE7FE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1B4BE62F0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B4BE8024(uint64_t a1, uint64_t a2, int a3, uint64_t a4, float a5)
{
  uint64_t result = (uint64_t)sub_1B4BEBA20(a1, a2);
  uint64_t v9 = result;
  *(void *)(result + 16) = a4;
  if (v10)
  {
    *(unsigned char *)(result + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      sub_1B4BE6194((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      std::string::size_type v11 = sub_1B4BE61AC(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_1B4BE62E8((uint64_t)&v17, (const char **)&v11->__r_.__value_.__l.__data_);
      uint64_t result = sub_1B4BE62F0((uint64_t)v18);
    }
    if (dword_1B4C9A1C0[a3] != 6)
    {
      sub_1B4BE6194((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 352);
      unint64_t v12 = sub_1B4BE61AC(v18, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_FLOAT): ");
      sub_1B4BE62E8((uint64_t)&v17, (const char **)&v12->__r_.__value_.__l.__data_);
      uint64_t result = sub_1B4BE62F0((uint64_t)v18);
    }
    *(unsigned char *)(v9 + 9) = 0;
  }
  else
  {
    if (*(unsigned char *)(result + 9))
    {
      sub_1B4BE6194((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 352);
      char v13 = sub_1B4BE61AC(v18, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (OPTIONAL_FIELD): ");
      sub_1B4BE62E8((uint64_t)&v17, (const char **)&v13->__r_.__value_.__l.__data_);
      uint64_t result = sub_1B4BE62F0((uint64_t)v18);
    }
    uint64_t v14 = *(unsigned __int8 *)(v9 + 8);
    if ((v14 - 19) <= 0xFFFFFFED)
    {
      sub_1B4BE6194((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      std::string::size_type v15 = sub_1B4BE61AC(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_1B4BE62E8((uint64_t)&v17, (const char **)&v15->__r_.__value_.__l.__data_);
      uint64_t result = sub_1B4BE62F0((uint64_t)v18);
    }
    if (dword_1B4C9A1C0[v14] != 6)
    {
      sub_1B4BE6194((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 352);
      uint64_t v16 = sub_1B4BE61AC(v18, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_FLOAT): ");
      sub_1B4BE62E8((uint64_t)&v17, (const char **)&v16->__r_.__value_.__l.__data_);
      uint64_t result = sub_1B4BE62F0((uint64_t)v18);
    }
  }
  *(unsigned char *)(v9 + 10) &= 0xF0u;
  *(float *)uint64_t v9 = a5;
  return result;
}

void sub_1B4BE820C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1B4BE62F0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B4BE8244(uint64_t *a1, uint64_t a2, int a3, int a4, uint64_t *a5, float a6)
{
  std::string::size_type v11 = sub_1B4BEBA20((uint64_t)a1, a2);
  unint64_t v12 = v11;
  std::string v11[2] = a5;
  if (v13)
  {
    *((unsigned char *)v11 + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      sub_1B4BE6194((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      uint64_t v14 = sub_1B4BE61AC(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_1B4BE62E8((uint64_t)&v27, (const char **)&v14->__r_.__value_.__l.__data_);
      sub_1B4BE62F0((uint64_t)v28);
    }
    if (dword_1B4C9A1C0[a3] != 6)
    {
      sub_1B4BE6194((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 352);
      std::string::size_type v15 = sub_1B4BE61AC(v28, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_FLOAT): ");
      sub_1B4BE62E8((uint64_t)&v27, (const char **)&v15->__r_.__value_.__l.__data_);
      sub_1B4BE62F0((uint64_t)v28);
    }
    *((unsigned char *)v12 + 9) = 1;
    *((unsigned char *)v12 + 11) = a4;
    uint64_t v16 = *a1;
    if (!*a1) {
      operator new();
    }
    if (*(unsigned char *)(v16 + 24)) {
      (*(void (**)(void, void *, uint64_t))(**(void **)(*(void *)(v16 + 32) + 32) + 40))(*(void *)(*(void *)(v16 + 32) + 32), &unk_1F0D537F8, 16);
    }
    char v17 = (uint64_t *)sub_1B4BE4804((void *)v16, 0x10uLL, (uint64_t)sub_1B4BF0B4C);
    *char v17 = 0;
    v17[1] = v16;
    *unint64_t v12 = v17;
  }
  else
  {
    if (!*((unsigned char *)v11 + 9))
    {
      sub_1B4BE6194((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 352);
      std::string::size_type v18 = sub_1B4BE61AC(v28, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (REPEATED_FIELD): ");
      sub_1B4BE62E8((uint64_t)&v27, (const char **)&v18->__r_.__value_.__l.__data_);
      sub_1B4BE62F0((uint64_t)v28);
    }
    uint64_t v19 = *((unsigned __int8 *)v12 + 8);
    if ((v19 - 19) <= 0xFFFFFFED)
    {
      sub_1B4BE6194((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      unsigned int v20 = sub_1B4BE61AC(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_1B4BE62E8((uint64_t)&v27, (const char **)&v20->__r_.__value_.__l.__data_);
      sub_1B4BE62F0((uint64_t)v28);
    }
    if (dword_1B4C9A1C0[v19] != 6)
    {
      sub_1B4BE6194((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 352);
      unsigned int v21 = sub_1B4BE61AC(v28, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_FLOAT): ");
      sub_1B4BE62E8((uint64_t)&v27, (const char **)&v21->__r_.__value_.__l.__data_);
      sub_1B4BE62F0((uint64_t)v28);
    }
    if (*((unsigned __int8 *)v12 + 11) != a4)
    {
      sub_1B4BE6194((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 352);
      int v22 = sub_1B4BE61AC(v28, "CHECK failed: (extension->is_packed) == (packed): ");
      sub_1B4BE62E8((uint64_t)&v27, (const char **)&v22->__r_.__value_.__l.__data_);
      sub_1B4BE62F0((uint64_t)v28);
    }
  }
  std::string v23 = (int *)*v12;
  uint64_t v24 = *v23;
  if (v24 == v23[1])
  {
    int v25 = v24 + 1;
    sub_1B4BF7E64(v23, v24 + 1);
    uint64_t result = sub_1B4BF8304((uint64_t)v23);
    *(float *)(result + 4 * v24) = a6;
  }
  else
  {
    uint64_t result = sub_1B4BF8304((uint64_t)v23);
    *(float *)(result + 4 * v24) = a6;
    int v25 = v24 + 1;
  }
  int *v23 = v25;
  return result;
}

void sub_1B4BE8550(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1B4BE62F0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B4BE8590(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5)
{
  uint64_t result = (uint64_t)sub_1B4BEBA20(a1, a2);
  uint64_t v9 = result;
  *(void *)(result + 16) = a4;
  if (v10)
  {
    *(unsigned char *)(result + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      sub_1B4BE6194((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      std::string::size_type v11 = sub_1B4BE61AC(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_1B4BE62E8((uint64_t)&v17, (const char **)&v11->__r_.__value_.__l.__data_);
      uint64_t result = sub_1B4BE62F0((uint64_t)v18);
    }
    if (dword_1B4C9A1C0[a3] != 5)
    {
      sub_1B4BE6194((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 353);
      unint64_t v12 = sub_1B4BE61AC(v18, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_DOUBLE): ");
      sub_1B4BE62E8((uint64_t)&v17, (const char **)&v12->__r_.__value_.__l.__data_);
      uint64_t result = sub_1B4BE62F0((uint64_t)v18);
    }
    *(unsigned char *)(v9 + 9) = 0;
  }
  else
  {
    if (*(unsigned char *)(result + 9))
    {
      sub_1B4BE6194((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 353);
      char v13 = sub_1B4BE61AC(v18, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (OPTIONAL_FIELD): ");
      sub_1B4BE62E8((uint64_t)&v17, (const char **)&v13->__r_.__value_.__l.__data_);
      uint64_t result = sub_1B4BE62F0((uint64_t)v18);
    }
    uint64_t v14 = *(unsigned __int8 *)(v9 + 8);
    if ((v14 - 19) <= 0xFFFFFFED)
    {
      sub_1B4BE6194((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      std::string::size_type v15 = sub_1B4BE61AC(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_1B4BE62E8((uint64_t)&v17, (const char **)&v15->__r_.__value_.__l.__data_);
      uint64_t result = sub_1B4BE62F0((uint64_t)v18);
    }
    if (dword_1B4C9A1C0[v14] != 5)
    {
      sub_1B4BE6194((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 353);
      uint64_t v16 = sub_1B4BE61AC(v18, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_DOUBLE): ");
      sub_1B4BE62E8((uint64_t)&v17, (const char **)&v16->__r_.__value_.__l.__data_);
      uint64_t result = sub_1B4BE62F0((uint64_t)v18);
    }
  }
  *(unsigned char *)(v9 + 10) &= 0xF0u;
  *(double *)uint64_t v9 = a5;
  return result;
}

void sub_1B4BE8778(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1B4BE62F0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B4BE87B0(uint64_t *a1, uint64_t a2, int a3, int a4, uint64_t *a5, double a6)
{
  std::string::size_type v11 = sub_1B4BEBA20((uint64_t)a1, a2);
  unint64_t v12 = v11;
  std::string v11[2] = a5;
  if (v13)
  {
    *((unsigned char *)v11 + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      sub_1B4BE6194((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      uint64_t v14 = sub_1B4BE61AC(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_1B4BE62E8((uint64_t)&v27, (const char **)&v14->__r_.__value_.__l.__data_);
      sub_1B4BE62F0((uint64_t)v28);
    }
    if (dword_1B4C9A1C0[a3] != 5)
    {
      sub_1B4BE6194((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 353);
      std::string::size_type v15 = sub_1B4BE61AC(v28, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_DOUBLE): ");
      sub_1B4BE62E8((uint64_t)&v27, (const char **)&v15->__r_.__value_.__l.__data_);
      sub_1B4BE62F0((uint64_t)v28);
    }
    *((unsigned char *)v12 + 9) = 1;
    *((unsigned char *)v12 + 11) = a4;
    uint64_t v16 = *a1;
    if (!*a1) {
      operator new();
    }
    if (*(unsigned char *)(v16 + 24)) {
      (*(void (**)(void, void *, uint64_t))(**(void **)(*(void *)(v16 + 32) + 32) + 40))(*(void *)(*(void *)(v16 + 32) + 32), &unk_1F0D537E8, 16);
    }
    char v17 = (uint64_t *)sub_1B4BE4804((void *)v16, 0x10uLL, (uint64_t)sub_1B4BF0B50);
    *char v17 = 0;
    v17[1] = v16;
    *unint64_t v12 = v17;
  }
  else
  {
    if (!*((unsigned char *)v11 + 9))
    {
      sub_1B4BE6194((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 353);
      std::string::size_type v18 = sub_1B4BE61AC(v28, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (REPEATED_FIELD): ");
      sub_1B4BE62E8((uint64_t)&v27, (const char **)&v18->__r_.__value_.__l.__data_);
      sub_1B4BE62F0((uint64_t)v28);
    }
    uint64_t v19 = *((unsigned __int8 *)v12 + 8);
    if ((v19 - 19) <= 0xFFFFFFED)
    {
      sub_1B4BE6194((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      unsigned int v20 = sub_1B4BE61AC(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_1B4BE62E8((uint64_t)&v27, (const char **)&v20->__r_.__value_.__l.__data_);
      sub_1B4BE62F0((uint64_t)v28);
    }
    if (dword_1B4C9A1C0[v19] != 5)
    {
      sub_1B4BE6194((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 353);
      unsigned int v21 = sub_1B4BE61AC(v28, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_DOUBLE): ");
      sub_1B4BE62E8((uint64_t)&v27, (const char **)&v21->__r_.__value_.__l.__data_);
      sub_1B4BE62F0((uint64_t)v28);
    }
    if (*((unsigned __int8 *)v12 + 11) != a4)
    {
      sub_1B4BE6194((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 353);
      int v22 = sub_1B4BE61AC(v28, "CHECK failed: (extension->is_packed) == (packed): ");
      sub_1B4BE62E8((uint64_t)&v27, (const char **)&v22->__r_.__value_.__l.__data_);
      sub_1B4BE62F0((uint64_t)v28);
    }
  }
  std::string v23 = (int *)*v12;
  uint64_t v24 = *v23;
  if (v24 == v23[1])
  {
    int v25 = v24 + 1;
    sub_1B4BF84C0(v23, v24 + 1);
    uint64_t result = sub_1B4BF8960((uint64_t)v23);
    *(double *)(result + 8 * v24) = a6;
  }
  else
  {
    uint64_t result = sub_1B4BF8960((uint64_t)v23);
    *(double *)(result + 8 * v24) = a6;
    int v25 = v24 + 1;
  }
  int *v23 = v25;
  return result;
}

void sub_1B4BE8ABC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1B4BE62F0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B4BE8AFC(uint64_t a1, uint64_t a2, int a3, char a4, uint64_t a5)
{
  uint64_t result = (uint64_t)sub_1B4BEBA20(a1, a2);
  uint64_t v9 = (unsigned char *)result;
  *(void *)(result + 16) = a5;
  if (v10)
  {
    *(unsigned char *)(result + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      sub_1B4BE6194((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      std::string::size_type v11 = sub_1B4BE61AC(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_1B4BE62E8((uint64_t)&v17, (const char **)&v11->__r_.__value_.__l.__data_);
      uint64_t result = sub_1B4BE62F0((uint64_t)v18);
    }
    if (dword_1B4C9A1C0[a3] != 7)
    {
      sub_1B4BE6194((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 354);
      unint64_t v12 = sub_1B4BE61AC(v18, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_BOOL): ");
      sub_1B4BE62E8((uint64_t)&v17, (const char **)&v12->__r_.__value_.__l.__data_);
      uint64_t result = sub_1B4BE62F0((uint64_t)v18);
    }
    v9[9] = 0;
  }
  else
  {
    if (*(unsigned char *)(result + 9))
    {
      sub_1B4BE6194((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 354);
      char v13 = sub_1B4BE61AC(v18, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (OPTIONAL_FIELD): ");
      sub_1B4BE62E8((uint64_t)&v17, (const char **)&v13->__r_.__value_.__l.__data_);
      uint64_t result = sub_1B4BE62F0((uint64_t)v18);
    }
    uint64_t v14 = v9[8];
    if ((v14 - 19) <= 0xFFFFFFED)
    {
      sub_1B4BE6194((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      std::string::size_type v15 = sub_1B4BE61AC(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_1B4BE62E8((uint64_t)&v17, (const char **)&v15->__r_.__value_.__l.__data_);
      uint64_t result = sub_1B4BE62F0((uint64_t)v18);
    }
    if (dword_1B4C9A1C0[v14] != 7)
    {
      sub_1B4BE6194((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 354);
      uint64_t v16 = sub_1B4BE61AC(v18, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_BOOL): ");
      sub_1B4BE62E8((uint64_t)&v17, (const char **)&v16->__r_.__value_.__l.__data_);
      uint64_t result = sub_1B4BE62F0((uint64_t)v18);
    }
  }
  v9[10] &= 0xF0u;
  *uint64_t v9 = a4;
  return result;
}

void sub_1B4BE8CDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1B4BE62F0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B4BE8D14(uint64_t *a1, uint64_t a2, int a3, int a4, char a5, uint64_t *a6)
{
  std::string::size_type v11 = sub_1B4BEBA20((uint64_t)a1, a2);
  unint64_t v12 = v11;
  std::string v11[2] = a6;
  if (v13)
  {
    *((unsigned char *)v11 + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      sub_1B4BE6194((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      uint64_t v14 = sub_1B4BE61AC(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_1B4BE62E8((uint64_t)&v27, (const char **)&v14->__r_.__value_.__l.__data_);
      sub_1B4BE62F0((uint64_t)v28);
    }
    if (dword_1B4C9A1C0[a3] != 7)
    {
      sub_1B4BE6194((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 354);
      std::string::size_type v15 = sub_1B4BE61AC(v28, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_BOOL): ");
      sub_1B4BE62E8((uint64_t)&v27, (const char **)&v15->__r_.__value_.__l.__data_);
      sub_1B4BE62F0((uint64_t)v28);
    }
    *((unsigned char *)v12 + 9) = 1;
    *((unsigned char *)v12 + 11) = a4;
    uint64_t v16 = *a1;
    if (!*a1) {
      operator new();
    }
    if (*(unsigned char *)(v16 + 24)) {
      (*(void (**)(void, void *, uint64_t))(**(void **)(*(void *)(v16 + 32) + 32) + 40))(*(void *)(*(void *)(v16 + 32) + 32), &unk_1F0D537D8, 16);
    }
    char v17 = (uint64_t *)sub_1B4BE4804((void *)v16, 0x10uLL, (uint64_t)sub_1B4BF0B54);
    *char v17 = 0;
    v17[1] = v16;
    *unint64_t v12 = v17;
  }
  else
  {
    if (!*((unsigned char *)v11 + 9))
    {
      sub_1B4BE6194((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 354);
      std::string::size_type v18 = sub_1B4BE61AC(v28, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (REPEATED_FIELD): ");
      sub_1B4BE62E8((uint64_t)&v27, (const char **)&v18->__r_.__value_.__l.__data_);
      sub_1B4BE62F0((uint64_t)v28);
    }
    uint64_t v19 = *((unsigned __int8 *)v12 + 8);
    if ((v19 - 19) <= 0xFFFFFFED)
    {
      sub_1B4BE6194((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      unsigned int v20 = sub_1B4BE61AC(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_1B4BE62E8((uint64_t)&v27, (const char **)&v20->__r_.__value_.__l.__data_);
      sub_1B4BE62F0((uint64_t)v28);
    }
    if (dword_1B4C9A1C0[v19] != 7)
    {
      sub_1B4BE6194((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 354);
      unsigned int v21 = sub_1B4BE61AC(v28, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_BOOL): ");
      sub_1B4BE62E8((uint64_t)&v27, (const char **)&v21->__r_.__value_.__l.__data_);
      sub_1B4BE62F0((uint64_t)v28);
    }
    if (*((unsigned __int8 *)v12 + 11) != a4)
    {
      sub_1B4BE6194((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 354);
      int v22 = sub_1B4BE61AC(v28, "CHECK failed: (extension->is_packed) == (packed): ");
      sub_1B4BE62E8((uint64_t)&v27, (const char **)&v22->__r_.__value_.__l.__data_);
      sub_1B4BE62F0((uint64_t)v28);
    }
  }
  std::string v23 = (int *)*v12;
  uint64_t v24 = *v23;
  if (v24 == v23[1])
  {
    int v25 = v24 + 1;
    sub_1B4BF5EA0(v23, v24 + 1);
    uint64_t result = sub_1B4BF633C((uint64_t)v23);
    *(unsigned char *)(result + v24) = a5;
  }
  else
  {
    uint64_t result = sub_1B4BF633C((uint64_t)v23);
    *(unsigned char *)(result + v24) = a5;
    int v25 = v24 + 1;
  }
  int *v23 = v25;
  return result;
}

void sub_1B4BE9018(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1B4BE62F0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_1B4BE9058(uint64_t *a1, uint64_t a2, int a3, char a4, uint64_t *a5)
{
  uint64_t v9 = sub_1B4BEBA20((uint64_t)a1, a2);
  char v10 = v9;
  std::string v9[2] = a5;
  if (v11)
  {
    *((unsigned char *)v9 + 9) = 1;
    *((unsigned char *)v9 + 8) = a3;
    *((unsigned char *)v9 + 11) = a4;
    switch(a3)
    {
      case 1:
        uint64_t v12 = *a1;
        if (!v12) {
          goto LABEL_32;
        }
        if (*(unsigned char *)(v12 + 24)) {
          (*(void (**)(void, void *, uint64_t))(**(void **)(*(void *)(v12 + 32) + 32) + 40))(*(void *)(*(void *)(v12 + 32) + 32), &unk_1F0D537E8, 16);
        }
        char v13 = sub_1B4BF0B50;
        goto LABEL_31;
      case 2:
        uint64_t v12 = *a1;
        if (!v12) {
          goto LABEL_32;
        }
        if (*(unsigned char *)(v12 + 24)) {
          (*(void (**)(void, void *, uint64_t))(**(void **)(*(void *)(v12 + 32) + 32) + 40))(*(void *)(*(void *)(v12 + 32) + 32), &unk_1F0D537F8, 16);
        }
        char v13 = sub_1B4BF0B4C;
        goto LABEL_31;
      case 3:
      case 16:
      case 18:
        uint64_t v12 = *a1;
        if (!v12) {
          goto LABEL_32;
        }
        if (*(unsigned char *)(v12 + 24)) {
          (*(void (**)(void, void *, uint64_t))(**(void **)(*(void *)(v12 + 32) + 32) + 40))(*(void *)(*(void *)(v12 + 32) + 32), &unk_1F0D53828, 16);
        }
        char v13 = sub_1B4BF0B40;
        goto LABEL_31;
      case 4:
      case 6:
        uint64_t v12 = *a1;
        if (!v12) {
          goto LABEL_32;
        }
        if (*(unsigned char *)(v12 + 24)) {
          (*(void (**)(void, void *, uint64_t))(**(void **)(*(void *)(v12 + 32) + 32) + 40))(*(void *)(*(void *)(v12 + 32) + 32), &unk_1F0D53838, 16);
        }
        char v13 = sub_1B4BF0B48;
        goto LABEL_31;
      case 5:
      case 14:
      case 15:
      case 17:
        uint64_t v12 = *a1;
        if (!v12) {
          goto LABEL_32;
        }
        if (*(unsigned char *)(v12 + 24)) {
          (*(void (**)(void, void *, uint64_t))(**(void **)(*(void *)(v12 + 32) + 32) + 40))(*(void *)(*(void *)(v12 + 32) + 32), &unk_1F0D53808, 16);
        }
        char v13 = sub_1B4BF0B3C;
        goto LABEL_31;
      case 7:
      case 13:
        uint64_t v12 = *a1;
        if (!v12) {
          goto LABEL_32;
        }
        if (*(unsigned char *)(v12 + 24)) {
          (*(void (**)(void, void *, uint64_t))(**(void **)(*(void *)(v12 + 32) + 32) + 40))(*(void *)(*(void *)(v12 + 32) + 32), &unk_1F0D53818, 16);
        }
        char v13 = sub_1B4BF0B44;
        goto LABEL_31;
      case 8:
        uint64_t v12 = *a1;
        if (!v12) {
LABEL_32:
        }
          operator new();
        if (*(unsigned char *)(v12 + 24)) {
          (*(void (**)(void, void *, uint64_t))(**(void **)(*(void *)(v12 + 32) + 32) + 40))(*(void *)(*(void *)(v12 + 32) + 32), &unk_1F0D537D8, 16);
        }
        char v13 = sub_1B4BF0B54;
LABEL_31:
        uint64_t v14 = (uint64_t *)sub_1B4BE4804((void *)v12, 0x10uLL, (uint64_t)v13);
        *uint64_t v14 = 0;
        v14[1] = v12;
        goto LABEL_43;
      case 9:
      case 12:
        uint64_t v15 = *a1;
        if (!v15) {
          goto LABEL_42;
        }
        if (*(unsigned char *)(v15 + 24)) {
          (*(void (**)(void, void *, uint64_t))(**(void **)(*(void *)(v15 + 32) + 32) + 40))(*(void *)(*(void *)(v15 + 32) + 32), &unk_1F0D53888, 24);
        }
        uint64_t v16 = (uint64_t *(*)(uint64_t *))sub_1B4BF0B58;
        goto LABEL_41;
      case 10:
      case 11:
        uint64_t v15 = *a1;
        if (!v15) {
LABEL_42:
        }
          operator new();
        if (*(unsigned char *)(v15 + 24)) {
          (*(void (**)(void, void *, uint64_t))(**(void **)(*(void *)(v15 + 32) + 32) + 40))(*(void *)(*(void *)(v15 + 32) + 32), &unk_1F0D53860, 24);
        }
        uint64_t v16 = sub_1B4BF0B5C;
LABEL_41:
        uint64_t v14 = (uint64_t *)sub_1B4BE4804((void *)v15, 0x18uLL, (uint64_t)v16);
        std::string v14[2] = 0;
        *uint64_t v14 = v15;
        v14[1] = 0;
LABEL_43:
        *char v10 = v14;
        break;
      default:
        return *v10;
    }
  }
  return *v10;
}

uint64_t sub_1B4BE94CC(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5)
{
  uint64_t result = (uint64_t)sub_1B4BEBA20(a1, a2);
  uint64_t v9 = result;
  *(void *)(result + 16) = a5;
  if (v10)
  {
    *(unsigned char *)(result + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      sub_1B4BE6194((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      char v11 = sub_1B4BE61AC(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_1B4BE62E8((uint64_t)&v17, (const char **)&v11->__r_.__value_.__l.__data_);
      uint64_t result = sub_1B4BE62F0((uint64_t)v18);
    }
    if (dword_1B4C9A1C0[a3] != 8)
    {
      sub_1B4BE6194((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 460);
      uint64_t v12 = sub_1B4BE61AC(v18, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_ENUM): ");
      sub_1B4BE62E8((uint64_t)&v17, (const char **)&v12->__r_.__value_.__l.__data_);
      uint64_t result = sub_1B4BE62F0((uint64_t)v18);
    }
    *(unsigned char *)(v9 + 9) = 0;
  }
  else
  {
    if (*(unsigned char *)(result + 9))
    {
      sub_1B4BE6194((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 463);
      char v13 = sub_1B4BE61AC(v18, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (OPTIONAL_FIELD): ");
      sub_1B4BE62E8((uint64_t)&v17, (const char **)&v13->__r_.__value_.__l.__data_);
      uint64_t result = sub_1B4BE62F0((uint64_t)v18);
    }
    uint64_t v14 = *(unsigned __int8 *)(v9 + 8);
    if ((v14 - 19) <= 0xFFFFFFED)
    {
      sub_1B4BE6194((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      uint64_t v15 = sub_1B4BE61AC(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_1B4BE62E8((uint64_t)&v17, (const char **)&v15->__r_.__value_.__l.__data_);
      uint64_t result = sub_1B4BE62F0((uint64_t)v18);
    }
    if (dword_1B4C9A1C0[v14] != 8)
    {
      sub_1B4BE6194((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 463);
      uint64_t v16 = sub_1B4BE61AC(v18, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_ENUM): ");
      sub_1B4BE62E8((uint64_t)&v17, (const char **)&v16->__r_.__value_.__l.__data_);
      uint64_t result = sub_1B4BE62F0((uint64_t)v18);
    }
  }
  *(unsigned char *)(v9 + 10) &= 0xF0u;
  *(_DWORD *)uint64_t v9 = a4;
  return result;
}

void sub_1B4BE96AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1B4BE62F0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B4BE96E4(uint64_t *a1, uint64_t a2, int a3, int a4, int a5, uint64_t *a6)
{
  char v11 = sub_1B4BEBA20((uint64_t)a1, a2);
  uint64_t v12 = v11;
  std::string v11[2] = a6;
  if (v13)
  {
    *((unsigned char *)v11 + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      sub_1B4BE6194((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      uint64_t v14 = sub_1B4BE61AC(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_1B4BE62E8((uint64_t)&v27, (const char **)&v14->__r_.__value_.__l.__data_);
      sub_1B4BE62F0((uint64_t)v28);
    }
    if (dword_1B4C9A1C0[a3] != 8)
    {
      sub_1B4BE6194((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 488);
      uint64_t v15 = sub_1B4BE61AC(v28, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_ENUM): ");
      sub_1B4BE62E8((uint64_t)&v27, (const char **)&v15->__r_.__value_.__l.__data_);
      sub_1B4BE62F0((uint64_t)v28);
    }
    *((unsigned char *)v12 + 9) = 1;
    *((unsigned char *)v12 + 11) = a4;
    uint64_t v16 = *a1;
    if (!*a1) {
      operator new();
    }
    if (*(unsigned char *)(v16 + 24)) {
      (*(void (**)(void, void *, uint64_t))(**(void **)(*(void *)(v16 + 32) + 32) + 40))(*(void *)(*(void *)(v16 + 32) + 32), &unk_1F0D53808, 16);
    }
    char v17 = (uint64_t *)sub_1B4BE4804((void *)v16, 0x10uLL, (uint64_t)sub_1B4BF0B3C);
    *char v17 = 0;
    v17[1] = v16;
    *uint64_t v12 = v17;
  }
  else
  {
    if (!*((unsigned char *)v11 + 9))
    {
      sub_1B4BE6194((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 494);
      std::string::size_type v18 = sub_1B4BE61AC(v28, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (REPEATED_FIELD): ");
      sub_1B4BE62E8((uint64_t)&v27, (const char **)&v18->__r_.__value_.__l.__data_);
      sub_1B4BE62F0((uint64_t)v28);
    }
    uint64_t v19 = *((unsigned __int8 *)v12 + 8);
    if ((v19 - 19) <= 0xFFFFFFED)
    {
      sub_1B4BE6194((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      unsigned int v20 = sub_1B4BE61AC(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_1B4BE62E8((uint64_t)&v27, (const char **)&v20->__r_.__value_.__l.__data_);
      sub_1B4BE62F0((uint64_t)v28);
    }
    if (dword_1B4C9A1C0[v19] != 8)
    {
      sub_1B4BE6194((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 494);
      unsigned int v21 = sub_1B4BE61AC(v28, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_ENUM): ");
      sub_1B4BE62E8((uint64_t)&v27, (const char **)&v21->__r_.__value_.__l.__data_);
      sub_1B4BE62F0((uint64_t)v28);
    }
    if (*((unsigned __int8 *)v12 + 11) != a4)
    {
      sub_1B4BE6194((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 495);
      int v22 = sub_1B4BE61AC(v28, "CHECK failed: (extension->is_packed) == (packed): ");
      sub_1B4BE62E8((uint64_t)&v27, (const char **)&v22->__r_.__value_.__l.__data_);
      sub_1B4BE62F0((uint64_t)v28);
    }
  }
  std::string v23 = (int *)*v12;
  uint64_t v24 = *v23;
  if (v24 == v23[1])
  {
    int v25 = v24 + 1;
    sub_1B4BF64F4(v23, v24 + 1);
    uint64_t result = sub_1B4BF6994((uint64_t)v23);
    *(_DWORD *)(result + 4 * v24) = a5;
  }
  else
  {
    uint64_t result = sub_1B4BF6994((uint64_t)v23);
    *(_DWORD *)(result + 4 * v24) = a5;
    int v25 = v24 + 1;
  }
  int *v23 = v25;
  return result;
}

void sub_1B4BE99E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1B4BE62F0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B4BE9A28(uint64_t *a1, uint64_t a2, int a3, uint64_t *a4)
{
  uint64_t v7 = sub_1B4BEBA20((uint64_t)a1, a2);
  uint64_t v8 = (unsigned __int8 *)v7;
  std::string v7[2] = a4;
  if (v9)
  {
    *((unsigned char *)v7 + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      sub_1B4BE6194((uint64_t)v20, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      char v10 = sub_1B4BE61AC(v20, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_1B4BE62E8((uint64_t)&v19, (const char **)&v10->__r_.__value_.__l.__data_);
      sub_1B4BE62F0((uint64_t)v20);
    }
    if (dword_1B4C9A1C0[a3] != 9)
    {
      sub_1B4BE6194((uint64_t)v20, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 520);
      char v11 = sub_1B4BE61AC(v20, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_STRING): ");
      sub_1B4BE62E8((uint64_t)&v19, (const char **)&v11->__r_.__value_.__l.__data_);
      sub_1B4BE62F0((uint64_t)v20);
    }
    v8[9] = 0;
    uint64_t v12 = *a1;
    if (!v12) {
      operator new();
    }
    if (*(unsigned char *)(v12 + 24)) {
      (*(void (**)(void, void *, uint64_t))(**(void **)(*(void *)(v12 + 32) + 32) + 40))(*(void *)(*(void *)(v12 + 32) + 32), &unk_1F0D53AB8, 24);
    }
    char v13 = (void *)sub_1B4BE4804((void *)v12, 0x18uLL, (uint64_t)sub_1B4BE057C);
    void *v13 = 0;
    v13[1] = 0;
    std::string v13[2] = 0;
    *(void *)uint64_t v8 = v13;
  }
  else
  {
    if (*((unsigned char *)v7 + 9))
    {
      sub_1B4BE6194((uint64_t)v20, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 524);
      uint64_t v14 = sub_1B4BE61AC(v20, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (OPTIONAL_FIELD): ");
      sub_1B4BE62E8((uint64_t)&v19, (const char **)&v14->__r_.__value_.__l.__data_);
      sub_1B4BE62F0((uint64_t)v20);
    }
    uint64_t v15 = v8[8];
    if ((v15 - 19) <= 0xFFFFFFED)
    {
      sub_1B4BE6194((uint64_t)v20, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      uint64_t v16 = sub_1B4BE61AC(v20, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_1B4BE62E8((uint64_t)&v19, (const char **)&v16->__r_.__value_.__l.__data_);
      sub_1B4BE62F0((uint64_t)v20);
    }
    if (dword_1B4C9A1C0[v15] != 9)
    {
      sub_1B4BE6194((uint64_t)v20, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 524);
      char v17 = sub_1B4BE61AC(v20, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_STRING): ");
      sub_1B4BE62E8((uint64_t)&v19, (const char **)&v17->__r_.__value_.__l.__data_);
      sub_1B4BE62F0((uint64_t)v20);
    }
  }
  v8[10] &= 0xF0u;
  return *(void *)v8;
}

void sub_1B4BE9C98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1B4BE62F0((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_1B4BE9CD0(uint64_t *a1, uint64_t a2, int a3, uint64_t *a4)
{
  uint64_t v7 = sub_1B4BEBA20((uint64_t)a1, a2);
  uint64_t v8 = v7;
  std::string v7[2] = a4;
  if (v9)
  {
    *((unsigned char *)v7 + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      sub_1B4BE6194((uint64_t)v27, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      char v10 = sub_1B4BE61AC(v27, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_1B4BE62E8((uint64_t)&v26, (const char **)&v10->__r_.__value_.__l.__data_);
      sub_1B4BE62F0((uint64_t)v27);
    }
    if (dword_1B4C9A1C0[a3] != 9)
    {
      sub_1B4BE6194((uint64_t)v27, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 550);
      char v11 = sub_1B4BE61AC(v27, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_STRING): ");
      sub_1B4BE62E8((uint64_t)&v26, (const char **)&v11->__r_.__value_.__l.__data_);
      sub_1B4BE62F0((uint64_t)v27);
    }
    *((unsigned char *)v8 + 9) = 1;
    *((unsigned char *)v8 + 11) = 0;
    uint64_t v12 = *a1;
    if (!v12) {
      operator new();
    }
    if (*(unsigned char *)(v12 + 24)) {
      (*(void (**)(void, void *, uint64_t))(**(void **)(*(void *)(v12 + 32) + 32) + 40))(*(void *)(*(void *)(v12 + 32) + 32), &unk_1F0D53888, 24);
    }
    char v13 = (uint64_t *)sub_1B4BE4804((void *)v12, 0x18uLL, (uint64_t)sub_1B4BF0B58);
    std::string v13[2] = 0;
    uint64_t *v13 = v12;
    v13[1] = 0;
    unsigned __int8 *v8 = v13;
  }
  else
  {
    if (!*((unsigned char *)v7 + 9))
    {
      sub_1B4BE6194((uint64_t)v27, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 556);
      uint64_t v14 = sub_1B4BE61AC(v27, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (REPEATED_FIELD): ");
      sub_1B4BE62E8((uint64_t)&v26, (const char **)&v14->__r_.__value_.__l.__data_);
      sub_1B4BE62F0((uint64_t)v27);
    }
    uint64_t v15 = *((unsigned __int8 *)v8 + 8);
    if ((v15 - 19) <= 0xFFFFFFED)
    {
      sub_1B4BE6194((uint64_t)v27, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      uint64_t v16 = sub_1B4BE61AC(v27, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_1B4BE62E8((uint64_t)&v26, (const char **)&v16->__r_.__value_.__l.__data_);
      sub_1B4BE62F0((uint64_t)v27);
    }
    if (dword_1B4C9A1C0[v15] != 9)
    {
      sub_1B4BE6194((uint64_t)v27, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 556);
      char v17 = sub_1B4BE61AC(v27, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_STRING): ");
      sub_1B4BE62E8((uint64_t)&v26, (const char **)&v17->__r_.__value_.__l.__data_);
      sub_1B4BE62F0((uint64_t)v27);
    }
  }
  uint64_t v18 = (uint64_t)*v8;
  char v19 = *(int **)(v18 + 16);
  if (!v19)
  {
    int v21 = *(_DWORD *)(v18 + 12);
LABEL_22:
    sub_1B4BF8BEC(v18, v21 + 1);
    char v19 = *(int **)(v18 + 16);
    int v21 = *v19;
    goto LABEL_23;
  }
  uint64_t v20 = *(int *)(v18 + 8);
  int v21 = *v19;
  if ((int)v20 < *v19)
  {
    *(_DWORD *)(v18 + 8) = v20 + 1;
    return *(void **)&v19[2 * v20 + 2];
  }
  if (v21 == *(_DWORD *)(v18 + 12)) {
    goto LABEL_22;
  }
LABEL_23:
  *char v19 = v21 + 1;
  uint64_t v23 = *(void *)v18;
  if (!*(void *)v18) {
    operator new();
  }
  if (*(unsigned char *)(v23 + 24)) {
    (*(void (**)(void, void *, uint64_t))(**(void **)(*(void *)(v23 + 32) + 32) + 40))(*(void *)(*(void *)(v23 + 32) + 32), &unk_1F0D53AB8, 24);
  }
  uint64_t result = (void *)sub_1B4BE4804((void *)v23, 0x18uLL, (uint64_t)sub_1B4BE057C);
  void *result = 0;
  result[1] = 0;
  result[2] = 0;
  uint64_t v24 = *(void *)(v18 + 16);
  uint64_t v25 = *(int *)(v18 + 8);
  *(_DWORD *)(v18 + 8) = v25 + 1;
  *(void *)(v24 + 8 * v25 + 8) = result;
  return result;
}

void sub_1B4BEA048(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1B4BE62F0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B4BEA080(void *a1, uint64_t a2, int a3, uint64_t a4, uint64_t *a5)
{
  char v9 = sub_1B4BEBA20((uint64_t)a1, a2);
  char v10 = v9;
  std::string v9[2] = a5;
  if (v11)
  {
    *((unsigned char *)v9 + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      sub_1B4BE6194((uint64_t)v21, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      uint64_t v12 = sub_1B4BE61AC(v21, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_1B4BE62E8((uint64_t)&v20, (const char **)&v12->__r_.__value_.__l.__data_);
      sub_1B4BE62F0((uint64_t)v21);
    }
    if (dword_1B4C9A1C0[a3] != 10)
    {
      sub_1B4BE6194((uint64_t)v21, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 591);
      char v13 = sub_1B4BE61AC(v21, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_MESSAGE): ");
      sub_1B4BE62E8((uint64_t)&v20, (const char **)&v13->__r_.__value_.__l.__data_);
      sub_1B4BE62F0((uint64_t)v21);
    }
    *((unsigned char *)v10 + 9) = 0;
    *((unsigned char *)v10 + 10) &= 0xFu;
    uint64_t result = (*(uint64_t (**)(uint64_t, void))(*(void *)a4 + 32))(a4, *a1);
    *char v10 = (uint64_t *)result;
    *((unsigned char *)v10 + 10) &= 0xF0u;
  }
  else
  {
    if (*((unsigned char *)v9 + 9))
    {
      sub_1B4BE6194((uint64_t)v21, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 598);
      uint64_t v15 = sub_1B4BE61AC(v21, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (OPTIONAL_FIELD): ");
      sub_1B4BE62E8((uint64_t)&v20, (const char **)&v15->__r_.__value_.__l.__data_);
      sub_1B4BE62F0((uint64_t)v21);
    }
    uint64_t v16 = *((unsigned __int8 *)v10 + 8);
    if ((v16 - 19) <= 0xFFFFFFED)
    {
      sub_1B4BE6194((uint64_t)v21, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      char v17 = sub_1B4BE61AC(v21, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_1B4BE62E8((uint64_t)&v20, (const char **)&v17->__r_.__value_.__l.__data_);
      sub_1B4BE62F0((uint64_t)v21);
    }
    if (dword_1B4C9A1C0[v16] != 10)
    {
      sub_1B4BE6194((uint64_t)v21, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 598);
      uint64_t v18 = sub_1B4BE61AC(v21, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_MESSAGE): ");
      sub_1B4BE62E8((uint64_t)&v20, (const char **)&v18->__r_.__value_.__l.__data_);
      sub_1B4BE62F0((uint64_t)v21);
    }
    char v19 = *((unsigned char *)v10 + 10);
    *((unsigned char *)v10 + 1sub_1B4BC92E4(&a9, 0) = v19 & 0xF0;
    uint64_t result = (uint64_t)*v10;
    if ((v19 & 0x10) != 0) {
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 32))(result, a4);
    }
  }
  return result;
}

void sub_1B4BEA2E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1B4BE62F0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B4BEA318(void *a1, uint64_t a2, int a3, uint64_t a4, uint64_t *a5)
{
  char v9 = sub_1B4BEBA20((uint64_t)a1, a2);
  char v10 = (unsigned __int8 *)v9;
  std::string v9[2] = a5;
  if (v11)
  {
    *((unsigned char *)v9 + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      sub_1B4BE6194((uint64_t)v26, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      uint64_t v12 = sub_1B4BE61AC(v26, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_1B4BE62E8((uint64_t)&v25, (const char **)&v12->__r_.__value_.__l.__data_);
      sub_1B4BE62F0((uint64_t)v26);
    }
    if (dword_1B4C9A1C0[a3] != 10)
    {
      sub_1B4BE6194((uint64_t)v26, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 762);
      char v13 = sub_1B4BE61AC(v26, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_MESSAGE): ");
      sub_1B4BE62E8((uint64_t)&v25, (const char **)&v13->__r_.__value_.__l.__data_);
      sub_1B4BE62F0((uint64_t)v26);
    }
    v10[9] = 1;
    uint64_t v14 = *a1;
    if (!*a1) {
      operator new();
    }
    if (*(unsigned char *)(v14 + 24)) {
      (*(void (**)(void, void *, uint64_t))(**(void **)(*(void *)(v14 + 32) + 32) + 40))(*(void *)(*(void *)(v14 + 32) + 32), &unk_1F0D53860, 24);
    }
    uint64_t v15 = (void *)sub_1B4BE4804((void *)v14, 0x18uLL, (uint64_t)sub_1B4BF0B5C);
    std::string v15[2] = 0;
    *uint64_t v15 = v14;
    v15[1] = 0;
    *(void *)char v10 = v15;
  }
  else
  {
    if (!*((unsigned char *)v9 + 9))
    {
      sub_1B4BE6194((uint64_t)v26, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 767);
      uint64_t v16 = sub_1B4BE61AC(v26, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (REPEATED_FIELD): ");
      sub_1B4BE62E8((uint64_t)&v25, (const char **)&v16->__r_.__value_.__l.__data_);
      sub_1B4BE62F0((uint64_t)v26);
    }
    uint64_t v17 = v10[8];
    if ((v17 - 19) <= 0xFFFFFFED)
    {
      sub_1B4BE6194((uint64_t)v26, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      uint64_t v18 = sub_1B4BE61AC(v26, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_1B4BE62E8((uint64_t)&v25, (const char **)&v18->__r_.__value_.__l.__data_);
      sub_1B4BE62F0((uint64_t)v26);
    }
    if (dword_1B4C9A1C0[v17] != 10)
    {
      sub_1B4BE6194((uint64_t)v26, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 767);
      char v19 = sub_1B4BE61AC(v26, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_MESSAGE): ");
      sub_1B4BE62E8((uint64_t)&v25, (const char **)&v19->__r_.__value_.__l.__data_);
      sub_1B4BE62F0((uint64_t)v26);
    }
  }
  uint64_t v20 = *(void *)v10;
  int v21 = *(_DWORD **)(*(void *)v10 + 16);
  if (!v21
    || (uint64_t v22 = *(int *)(v20 + 8), (int)v22 >= *v21)
    || (*(_DWORD *)(v20 + 8) = v22 + 1, (uint64_t v23 = *(void *)&v21[2 * v22 + 2]) == 0))
  {
    uint64_t v23 = (*(uint64_t (**)(uint64_t, void))(*(void *)a4 + 32))(a4, *a1);
    sub_1B4BF0C74(*(void *)v10, v23);
  }
  return v23;
}

void sub_1B4BEA604(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1B4BE62F0((uint64_t)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_1B4BEA63C(unsigned __int8 *result)
{
  uint64_t v1 = (void *)*((void *)result + 2);
  if (*((unsigned __int16 *)result + 4) >= 0x101u)
  {
    int v6 = (unsigned __int8 *)*v1;
    uint64_t v4 = (unsigned __int8 *)(v1 + 1);
    uint64_t v5 = v6;
    if (v6 != v4)
    {
      do
      {
        uint64_t result = sub_1B4BE6898(v5 + 40);
        uint64_t v7 = (unsigned __int8 *)*((void *)v5 + 1);
        if (v7)
        {
          do
          {
            uint64_t v8 = v7;
            uint64_t v7 = *(unsigned __int8 **)v7;
          }
          while (v7);
        }
        else
        {
          do
          {
            uint64_t v8 = (unsigned __int8 *)*((void *)v5 + 2);
            BOOL v9 = *(void *)v8 == (void)v5;
            uint64_t v5 = v8;
          }
          while (!v9);
        }
        uint64_t v5 = v8;
      }
      while (v8 != v4);
    }
  }
  else if (*((_WORD *)result + 5))
  {
    uint64_t v2 = 32 * *((unsigned __int16 *)result + 5);
    uint64_t v3 = (unsigned __int8 *)(v1 + 1);
    do
    {
      uint64_t result = sub_1B4BE6898(v3);
      v3 += 32;
      v2 -= 32;
    }
    while (v2);
  }
  return result;
}

void sub_1B4BEA6DC(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int16 *)(a1 + 8) <= 0x100u)
  {
    unsigned int v4 = *(unsigned __int16 *)(a2 + 8);
    uint64_t v5 = *(char **)(a1 + 16);
    uint64_t v6 = *(unsigned __int16 *)(a1 + 10);
    uint64_t v7 = &v5[32 * v6];
    uint64_t v8 = *(void *)(a2 + 16);
    if (v4 > 0x100)
    {
      unint64_t v14 = sub_1B4BEAA34(v5, v7, *(void **)v8, (void *)(v8 + 8));
    }
    else
    {
      uint64_t v9 = *(unsigned __int16 *)(a2 + 10);
      uint64_t v10 = v8 + 32 * v9;
      BOOL v12 = v6 == 0;
      uint64_t v11 = 0;
      BOOL v12 = v12 || v9 == 0;
      if (!v12)
      {
        do
        {
          if (*(_DWORD *)v5 == *(_DWORD *)v8) {
            char v13 = v5 + 32;
          }
          else {
            char v13 = v5;
          }
          if (*(_DWORD *)v5 < *(_DWORD *)v8)
          {
            v5 += 32;
          }
          else
          {
            v8 += 32;
            uint64_t v5 = v13;
          }
          ++v11;
        }
        while (v5 != v7 && v8 != v10);
      }
      unint64_t v14 = v11 + ((v10 - v8) >> 5) + ((v7 - v5) >> 5);
    }
    sub_1B4BEA80C((void *)a1, v14);
  }
  uint64_t v15 = *(int **)(a2 + 16);
  if (*(unsigned __int16 *)(a2 + 8) >= 0x101u)
  {
    char v19 = *(void **)v15;
    sub_1B4BF0DA8(v19, (void *)v15 + 1, (uint64_t *)a1);
  }
  else if (*(_WORD *)(a2 + 10))
  {
    uint64_t v16 = &v15[8 * *(unsigned __int16 *)(a2 + 10)];
    do
    {
      uint64_t v17 = v15 + 2;
      unsigned int v18 = *v15;
      v15 += 8;
      sub_1B4BEAB3C((uint64_t *)a1, v18, v17);
    }
    while (v15 != v16);
  }
}

void *sub_1B4BEA80C(void *result, unint64_t a2)
{
  unint64_t v2 = *((unsigned __int16 *)result + 4);
  if (v2 <= 0x100 && v2 < a2)
  {
    unsigned int v4 = result;
    do
    {
      if ((_WORD)v2) {
        LOWORD(v2) = 4 * v2;
      }
      else {
        LOWORD(v2) = 1;
      }
    }
    while ((unsigned __int16)v2 < a2);
    uint64_t v5 = (char *)result[2];
    uint64_t v6 = *((unsigned __int16 *)result + 5);
    uint64_t v7 = (uint64_t *)*result;
    if ((unsigned __int16)v2 < 0x101u)
    {
      size_t v8 = 32 * (unsigned __int16)v2;
      if (v7)
      {
        if (v7[3])
        {
          (*(void (**)(void, void *, size_t))(**(void **)(v7[4] + 32) + 40))(*(void *)(v7[4] + 32), &unk_1F0D538B0, v8);
          size_t v8 = 32 * (unsigned __int16)v2;
        }
        uint64_t result = (void *)sub_1B4BE4B00(v7, v8);
      }
      else
      {
        uint64_t result = operator new[](v8);
      }
      uint64_t v9 = (uint64_t **)result;
      if (v6) {
        uint64_t result = memmove(result, v5, 32 * v6);
      }
    }
    else
    {
      if (!v7) {
        operator new();
      }
      if (v7[3]) {
        (*(void (**)(void, void *, uint64_t))(**(void **)(v7[4] + 32) + 40))(*(void *)(v7[4] + 32), &unk_1F0D53DB0, 24);
      }
      uint64_t result = (void *)sub_1B4BE4804(v7, 0x18uLL, (uint64_t)sub_1B4BF14EC);
      uint64_t v9 = (uint64_t **)result;
      result[1] = 0;
      uint64_t v10 = result + 1;
      result[2] = 0;
      void *result = result + 1;
      if (v6)
      {
        uint64_t v11 = &v5[32 * v6];
        BOOL v12 = v5;
        do
        {
          int v15 = *(_DWORD *)v12;
          long long v13 = *(_OWORD *)(v12 + 8);
          uint64_t v17 = *((void *)v12 + 3);
          long long v16 = v13;
          uint64_t result = sub_1B4BF14F4(v9, v10, &v15, &v15);
          uint64_t v10 = result;
          v12 += 32;
        }
        while (v12 != v11);
      }
    }
    if (*v4) {
      BOOL v14 = 1;
    }
    else {
      BOOL v14 = v5 == 0;
    }
    if (!v14) {
      uint64_t result = (void *)MEMORY[0x1BA992990](v5, 0x1062C802AB6010CLL);
    }
    *((_WORD *)v4 + 4) = v2;
    v4[2] = v9;
    if ((unsigned __int16)v2 >= 0x101u) {
      *((_WORD *)v4 + 5) = 0;
    }
  }
  return result;
}

uint64_t sub_1B4BEAA34(char *a1, char *a2, void *a3, void *a4)
{
  uint64_t v4 = 0;
  if (a1 != a2 && a3 != a4)
  {
    uint64_t v4 = 0;
    do
    {
      int v5 = *((_DWORD *)a3 + 8);
      if (*(_DWORD *)a1 >= v5)
      {
        if (*(_DWORD *)a1 == v5)
        {
          a1 += 32;
          uint64_t v6 = (void *)a3[1];
          if (v6)
          {
            do
            {
              a3 = v6;
              uint64_t v6 = (void *)*v6;
            }
            while (v6);
          }
          else
          {
            do
            {
              uint64_t v7 = a3;
              a3 = (void *)a3[2];
            }
            while ((void *)*a3 != v7);
          }
        }
        else
        {
          size_t v8 = (void *)a3[1];
          if (v8)
          {
            do
            {
              a3 = v8;
              size_t v8 = (void *)*v8;
            }
            while (v8);
          }
          else
          {
            do
            {
              uint64_t v9 = a3;
              a3 = (void *)a3[2];
            }
            while ((void *)*a3 != v9);
          }
        }
      }
      else
      {
        a1 += 32;
      }
      ++v4;
    }
    while (a1 != a2 && a3 != a4);
  }
  if (a3 == a4)
  {
    uint64_t v10 = 0;
  }
  else
  {
    uint64_t v10 = 0;
    do
    {
      uint64_t v11 = (void *)a3[1];
      if (v11)
      {
        do
        {
          BOOL v12 = v11;
          uint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          BOOL v12 = (void *)a3[2];
          BOOL v13 = *v12 == (void)a3;
          a3 = v12;
        }
        while (!v13);
      }
      ++v10;
      a3 = v12;
    }
    while (v12 != a4);
  }
  return v4 + ((a2 - a1) >> 5) + v10;
}

void sub_1B4BEAB3C(uint64_t *a1, uint64_t a2, void *a3)
{
  if (!*((unsigned char *)a3 + 9))
  {
    if (*((unsigned char *)a3 + 10)) {
      return;
    }
    uint64_t v11 = *((unsigned __int8 *)a3 + 8);
    if ((v11 - 19) <= 0xFFFFFFED)
    {
      sub_1B4BE6194((uint64_t)v63, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      BOOL v12 = sub_1B4BE61AC(v63, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_1B4BE62E8((uint64_t)&v62, (const char **)&v12->__r_.__value_.__l.__data_);
      sub_1B4BE62F0((uint64_t)v63);
    }
    switch(v11)
    {
      case 1:
        sub_1B4BE8590((uint64_t)a1, a2, *((unsigned __int8 *)a3 + 8), a3[2], *(double *)a3);
        return;
      case 2:
        sub_1B4BE8024((uint64_t)a1, a2, *((unsigned __int8 *)a3 + 8), a3[2], *(float *)a3);
        return;
      case 3:
      case 16:
      case 18:
        sub_1B4BE7010((uint64_t)a1, a2, *((unsigned __int8 *)a3 + 8), *a3, a3[2]);
        return;
      case 4:
      case 6:
        sub_1B4BE7AC8((uint64_t)a1, a2, *((unsigned __int8 *)a3 + 8), *a3, a3[2]);
        return;
      case 5:
      case 15:
      case 17:
        sub_1B4BE6AB4((uint64_t)a1, a2, *((unsigned __int8 *)a3 + 8), *(_DWORD *)a3, a3[2]);
        return;
      case 7:
      case 13:
        sub_1B4BE756C((uint64_t)a1, a2, *((unsigned __int8 *)a3 + 8), *(_DWORD *)a3, a3[2]);
        return;
      case 8:
        sub_1B4BE8AFC((uint64_t)a1, a2, *((unsigned __int8 *)a3 + 8), *(unsigned char *)a3, a3[2]);
        return;
      case 9:
      case 12:
        int v36 = *((unsigned __int8 *)a3 + 8);
        double v37 = *(double *)a3;
        if (*(char *)(*a3 + 23) < 0)
        {
          sub_1B4BCA11C(__p, **(void ***)&v37, *(void *)(*(void *)&v37 + 8));
        }
        else
        {
          long long v38 = **(_OWORD **)&v37;
          uint64_t v61 = *(void *)(*(void *)&v37 + 16);
          *(_OWORD *)std::string __p = v38;
        }
        sub_1B4BEB900(a1, a2, v36, (__n128 *)__p, (uint64_t *)a3[2]);
        if (SHIBYTE(v61) < 0) {
          operator delete(__p[0]);
        }
        return;
      case 10:
      case 11:
        uint64_t v39 = (uint64_t *)a3[2];
        int v40 = sub_1B4BEBA20((uint64_t)a1, a2);
        uint64_t v41 = v40;
        void v40[2] = v39;
        if (v42)
        {
          *((unsigned char *)v40 + 8) = *((unsigned char *)a3 + 8);
          *((unsigned char *)v40 + 11) = *((unsigned char *)a3 + 11);
          *((unsigned char *)v40 + 9) = 0;
          char v43 = *((unsigned char *)v40 + 10) & 0xF;
          if ((*((unsigned char *)a3 + 10) & 0x10) == 0)
          {
            *((unsigned char *)v40 + 1sub_1B4BC92E4(&a9, 0) = v43;
            uint64_t v44 = (*(uint64_t (**)(void, uint64_t))(*(void *)*a3 + 32))(*a3, *a1);
            *uint64_t v41 = v44;
LABEL_120:
            (*(void (**)(uint64_t, void))(*(void *)v44 + 64))(v44, *a3);
            goto LABEL_126;
          }
          *((unsigned char *)v40 + 1sub_1B4BC92E4(&a9, 0) = v43 | 0x10;
          uint64_t v59 = (*(uint64_t (**)(void, uint64_t))(*(void *)*a3 + 16))(*a3, *a1);
          *uint64_t v41 = v59;
          (*(void (**)(uint64_t, void))(*(void *)v59 + 104))(v59, *a3);
        }
        else
        {
          if (*((unsigned __int8 *)v40 + 8) != *((unsigned __int8 *)a3 + 8))
          {
            sub_1B4BE6194((uint64_t)v63, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 1026);
            int v53 = sub_1B4BE61AC(v63, "CHECK failed: (extension->type) == (other_extension.type): ");
            sub_1B4BE62E8((uint64_t)&v62, (const char **)&v53->__r_.__value_.__l.__data_);
            sub_1B4BE62F0((uint64_t)v63);
          }
          if (*((unsigned __int8 *)v41 + 11) != *((unsigned __int8 *)a3 + 11))
          {
            sub_1B4BE6194((uint64_t)v63, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 1027);
            uint64_t v54 = sub_1B4BE61AC(v63, "CHECK failed: (extension->is_packed) == (other_extension.is_packed): ");
            sub_1B4BE62E8((uint64_t)&v62, (const char **)&v54->__r_.__value_.__l.__data_);
            sub_1B4BE62F0((uint64_t)v63);
          }
          if (*((unsigned char *)v41 + 9))
          {
            sub_1B4BE6194((uint64_t)v63, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 1028);
            uint64_t v55 = sub_1B4BE61AC(v63, "CHECK failed: !extension->is_repeated: ");
            sub_1B4BE62E8((uint64_t)&v62, (const char **)&v55->__r_.__value_.__l.__data_);
            sub_1B4BE62F0((uint64_t)v63);
          }
          uint64_t v56 = (uint64_t *)*v41;
          double v57 = *(double *)a3;
          if ((*((unsigned char *)a3 + 10) & 0x10) != 0)
          {
            if ((*((unsigned char *)v41 + 10) & 0x10) != 0)
            {
              (*(void (**)(void, double))(*v56 + 104))(*v41, COERCE_DOUBLE(*(void *)&v57));
              goto LABEL_126;
            }
            double v57 = COERCE_DOUBLE((*(uint64_t (**)(void, void))(**(void **)&v57 + 24))(*a3, *v41));
            uint64_t v58 = *v56;
          }
          else
          {
            uint64_t v58 = *v56;
            if ((*((unsigned char *)v41 + 10) & 0x10) != 0)
            {
              uint64_t v44 = (*(uint64_t (**)(void, double))(v58 + 32))(*v41, COERCE_DOUBLE(*(void *)&v57));
              goto LABEL_120;
            }
          }
          (*(void (**)(uint64_t *, double))(v58 + 64))(v56, COERCE_DOUBLE(*(void *)&v57));
        }
LABEL_126:
        *((unsigned char *)v41 + 10) &= 0xF0u;
        return;
      case 14:
        sub_1B4BE94CC((uint64_t)a1, a2, *((unsigned __int8 *)a3 + 8), *(_DWORD *)a3, a3[2]);
        return;
      default:
        return;
    }
  }
  uint64_t v6 = (uint64_t *)a3[2];
  uint64_t v7 = sub_1B4BEBA20((uint64_t)a1, a2);
  size_t v8 = (uint64_t *)v7;
  std::string v7[2] = v6;
  uint64_t v10 = v9;
  if (v9)
  {
    *((unsigned char *)v7 + 8) = *((unsigned char *)a3 + 8);
    *((unsigned char *)v7 + 11) = *((unsigned char *)a3 + 11);
    *((unsigned char *)v7 + 9) = 1;
  }
  else
  {
    if (*((unsigned __int8 *)v7 + 8) != *((unsigned __int8 *)a3 + 8))
    {
      sub_1B4BE6194((uint64_t)v63, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 931);
      BOOL v13 = sub_1B4BE61AC(v63, "CHECK failed: (extension->type) == (other_extension.type): ");
      sub_1B4BE62E8((uint64_t)&v62, (const char **)&v13->__r_.__value_.__l.__data_);
      sub_1B4BE62F0((uint64_t)v63);
    }
    if (*((unsigned __int8 *)v8 + 11) != *((unsigned __int8 *)a3 + 11))
    {
      sub_1B4BE6194((uint64_t)v63, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 932);
      BOOL v14 = sub_1B4BE61AC(v63, "CHECK failed: (extension->is_packed) == (other_extension.is_packed): ");
      sub_1B4BE62E8((uint64_t)&v62, (const char **)&v14->__r_.__value_.__l.__data_);
      sub_1B4BE62F0((uint64_t)v63);
    }
    if (!*((unsigned char *)v8 + 9))
    {
      sub_1B4BE6194((uint64_t)v63, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 933);
      int v15 = sub_1B4BE61AC(v63, "CHECK failed: extension->is_repeated: ");
      sub_1B4BE62E8((uint64_t)&v62, (const char **)&v15->__r_.__value_.__l.__data_);
      sub_1B4BE62F0((uint64_t)v63);
    }
  }
  uint64_t v16 = *((unsigned __int8 *)a3 + 8);
  if ((v16 - 19) <= 0xFFFFFFED)
  {
    sub_1B4BE6194((uint64_t)v63, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
    uint64_t v17 = sub_1B4BE61AC(v63, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
    sub_1B4BE62E8((uint64_t)&v62, (const char **)&v17->__r_.__value_.__l.__data_);
    sub_1B4BE62F0((uint64_t)v63);
  }
  switch(v16)
  {
    case 1:
      if (v10)
      {
        uint64_t v26 = *a1;
        if (!v26) {
          operator new();
        }
        if (*(unsigned char *)(v26 + 24)) {
          (*(void (**)(void, void *, uint64_t))(**(void **)(*(void *)(v26 + 32) + 32) + 40))(*(void *)(*(void *)(v26 + 32) + 32), &unk_1F0D537E8, 16);
        }
        unint64_t v27 = sub_1B4BE4804((void *)v26, 0x10uLL, (uint64_t)sub_1B4BF0B50);
        *(void *)unint64_t v27 = 0;
        *(void *)(v27 + 8) = v26;
        uint64_t *v8 = v27;
      }
      else
      {
        unint64_t v27 = *v8;
      }
      sub_1B4BF89EC((int *)v27, (int *)*a3);
      break;
    case 2:
      if (v10)
      {
        uint64_t v28 = *a1;
        if (!v28) {
          operator new();
        }
        if (*(unsigned char *)(v28 + 24)) {
          (*(void (**)(void, void *, uint64_t))(**(void **)(*(void *)(v28 + 32) + 32) + 40))(*(void *)(*(void *)(v28 + 32) + 32), &unk_1F0D537F8, 16);
        }
        unint64_t v29 = sub_1B4BE4804((void *)v28, 0x10uLL, (uint64_t)sub_1B4BF0B4C);
        *(void *)unint64_t v29 = 0;
        *(void *)(v29 + 8) = v28;
        uint64_t *v8 = v29;
      }
      else
      {
        unint64_t v29 = *v8;
      }
      sub_1B4BF8390((int *)v29, (int *)*a3);
      break;
    case 3:
    case 16:
    case 18:
      if (v10)
      {
        uint64_t v20 = *a1;
        if (!v20) {
          operator new();
        }
        if (*(unsigned char *)(v20 + 24)) {
          (*(void (**)(void, void *, uint64_t))(**(void **)(*(void *)(v20 + 32) + 32) + 40))(*(void *)(*(void *)(v20 + 32) + 32), &unk_1F0D53828, 16);
        }
        unint64_t v21 = sub_1B4BE4804((void *)v20, 0x10uLL, (uint64_t)sub_1B4BF0B40);
        *(void *)unint64_t v21 = 0;
        *(void *)(v21 + 8) = v20;
        uint64_t *v8 = v21;
      }
      else
      {
        unint64_t v21 = *v8;
      }
      sub_1B4BF76D8((int *)v21, (int *)*a3);
      break;
    case 4:
    case 6:
      if (v10)
      {
        uint64_t v24 = *a1;
        if (!v24) {
          operator new();
        }
        if (*(unsigned char *)(v24 + 24)) {
          (*(void (**)(void, void *, uint64_t))(**(void **)(*(void *)(v24 + 32) + 32) + 40))(*(void *)(*(void *)(v24 + 32) + 32), &unk_1F0D53838, 16);
        }
        unint64_t v25 = sub_1B4BE4804((void *)v24, 0x10uLL, (uint64_t)sub_1B4BF0B48);
        *(void *)unint64_t v25 = 0;
        *(void *)(v25 + 8) = v24;
        uint64_t *v8 = v25;
      }
      else
      {
        unint64_t v25 = *v8;
      }
      sub_1B4BF7D34((int *)v25, (int *)*a3);
      break;
    case 5:
    case 14:
    case 15:
    case 17:
      if (v10)
      {
        uint64_t v18 = *a1;
        if (!v18) {
          operator new();
        }
        if (*(unsigned char *)(v18 + 24)) {
          (*(void (**)(void, void *, uint64_t))(**(void **)(*(void *)(v18 + 32) + 32) + 40))(*(void *)(*(void *)(v18 + 32) + 32), &unk_1F0D53808, 16);
        }
        unint64_t v19 = sub_1B4BE4804((void *)v18, 0x10uLL, (uint64_t)sub_1B4BF0B3C);
        *(void *)unint64_t v19 = 0;
        *(void *)(v19 + 8) = v18;
        uint64_t *v8 = v19;
      }
      else
      {
        unint64_t v19 = *v8;
      }
      sub_1B4BF6A20((int *)v19, (int *)*a3);
      break;
    case 7:
    case 13:
      if (v10)
      {
        uint64_t v22 = *a1;
        if (!v22) {
          operator new();
        }
        if (*(unsigned char *)(v22 + 24)) {
          (*(void (**)(void, void *, uint64_t))(**(void **)(*(void *)(v22 + 32) + 32) + 40))(*(void *)(*(void *)(v22 + 32) + 32), &unk_1F0D53818, 16);
        }
        unint64_t v23 = sub_1B4BE4804((void *)v22, 0x10uLL, (uint64_t)sub_1B4BF0B44);
        *(void *)unint64_t v23 = 0;
        *(void *)(v23 + 8) = v22;
        uint64_t *v8 = v23;
      }
      else
      {
        unint64_t v23 = *v8;
      }
      sub_1B4BF707C((int *)v23, (int *)*a3);
      break;
    case 8:
      if (v10)
      {
        uint64_t v30 = *a1;
        if (!v30) {
          operator new();
        }
        if (*(unsigned char *)(v30 + 24)) {
          (*(void (**)(void, void *, uint64_t))(**(void **)(*(void *)(v30 + 32) + 32) + 40))(*(void *)(*(void *)(v30 + 32) + 32), &unk_1F0D537D8, 16);
        }
        unint64_t v31 = sub_1B4BE4804((void *)v30, 0x10uLL, (uint64_t)sub_1B4BF0B54);
        *(void *)unint64_t v31 = 0;
        *(void *)(v31 + 8) = v30;
        uint64_t *v8 = v31;
      }
      else
      {
        unint64_t v31 = *v8;
      }
      sub_1B4BF63C8((int *)v31, (int *)*a3);
      break;
    case 9:
    case 12:
      if (v10)
      {
        uint64_t v32 = *a1;
        if (!v32) {
          operator new();
        }
        if (*(unsigned char *)(v32 + 24)) {
          (*(void (**)(void, void *, uint64_t))(**(void **)(*(void *)(v32 + 32) + 32) + 40))(*(void *)(*(void *)(v32 + 32) + 32), &unk_1F0D53888, 24);
        }
        long long v33 = (void *)sub_1B4BE4804((void *)v32, 0x18uLL, (uint64_t)sub_1B4BF0B58);
        v33[2] = 0;
        *long long v33 = v32;
        v33[1] = 0;
        uint64_t *v8 = (uint64_t)v33;
      }
      else
      {
        long long v33 = (void *)*v8;
      }
      sub_1B4BE0974((uint64_t)v33, *a3);
      break;
    case 10:
    case 11:
      if (v10)
      {
        uint64_t v34 = *a1;
        if (!*a1) {
          operator new();
        }
        if (*(unsigned char *)(v34 + 24)) {
          (*(void (**)(void, void *, uint64_t))(**(void **)(*(void *)(v34 + 32) + 32) + 40))(*(void *)(*(void *)(v34 + 32) + 32), &unk_1F0D53860, 24);
        }
        uint64_t v35 = (void *)sub_1B4BE4804((void *)v34, 0x18uLL, (uint64_t)sub_1B4BF0B5C);
        v35[2] = 0;
        void *v35 = v34;
        v35[1] = 0;
        uint64_t *v8 = (uint64_t)v35;
      }
      double v45 = *(double *)a3;
      if (*(int *)(*(void *)&v45 + 8) >= 1)
      {
        int v46 = 0;
        do
        {
          uint64_t v47 = sub_1B4BF0B94(*(uint64_t *)&v45, v46);
          uint64_t v48 = v47;
          uint64_t v49 = *v8;
          uint64_t v50 = *(_DWORD **)(*v8 + 16);
          if (!v50
            || (uint64_t v51 = *(int *)(v49 + 8), (int)v51 >= *v50)
            || (*(_DWORD *)(v49 + 8) = v51 + 1, (uint64_t v52 = *(void *)&v50[2 * v51 + 2]) == 0))
          {
            uint64_t v52 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v47 + 32))(v47, *a1);
            sub_1B4BF0C74(*v8, v52);
          }
          (*(void (**)(uint64_t, uint64_t))(*(void *)v52 + 64))(v52, v48);
          ++v46;
        }
        while (v46 < *(_DWORD *)(*(void *)&v45 + 8));
      }
      break;
    default:
      return;
  }
}

void sub_1B4BEB848(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
}

__n128 sub_1B4BEB900(uint64_t *a1, uint64_t a2, int a3, __n128 *a4, uint64_t *a5)
{
  uint64_t v6 = sub_1B4BE9A28(a1, a2, a3, a5);
  uint64_t v7 = (__n128 *)v6;
  if (*(char *)(v6 + 23) < 0) {
    operator delete(*(void **)v6);
  }
  __n128 result = *a4;
  v7[1].n128_u64[0] = a4[1].n128_u64[0];
  __n128 *v7 = result;
  a4[1].n128_u8[7] = 0;
  a4->n128_u8[0] = 0;
  return result;
}

uint64_t sub_1B4BEB954(uint64_t result, uint64_t a2)
{
  uint64_t v3 = (unsigned __int8 *)result;
  if (*(void *)result == *(void *)a2)
  {
    __int16 v4 = *(_WORD *)(result + 8);
    *(_WORD *)(result + 8) = *(_WORD *)(a2 + 8);
    *(_WORD *)(a2 + 8) = v4;
    __int16 v5 = *(_WORD *)(result + 10);
    *(_WORD *)(result + 1sub_1B4BC92E4(&a9, 0) = *(_WORD *)(a2 + 10);
    *(_WORD *)(a2 + 1sub_1B4BC92E4(&a9, 0) = v5;
    uint64_t v6 = *(void *)(result + 16);
    *(void *)(result + 16) = *(void *)(a2 + 16);
    *(void *)(a2 + 16) = v6;
  }
  else
  {
    uint64_t v7 = 0;
    int v8 = 0;
    uint64_t v9 = 0;
    sub_1B4BEA6DC((uint64_t)&v7, a2);
    sub_1B4BEA63C((unsigned __int8 *)a2);
    sub_1B4BEA6DC(a2, (uint64_t)v3);
    sub_1B4BEA63C(v3);
    sub_1B4BEA6DC((uint64_t)v3, (uint64_t)&v7);
    return sub_1B4BE67C4((uint64_t)&v7);
  }
  return result;
}

void sub_1B4BEBA0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1B4BE67C4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t **sub_1B4BEBA20(uint64_t a1, uint64_t a2)
{
  unsigned int v3 = *(unsigned __int16 *)(a1 + 8);
  __int16 v4 = *(uint64_t ***)(a1 + 16);
  if (v3 >= 0x101)
  {
    *((void *)&v14 + 1) = 0;
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    LODWORD(v14) = a2;
    return sub_1B4BF1430(v4, (int *)&v14, &v14) + 5;
  }
  uint64_t v6 = *(unsigned __int16 *)(a1 + 10);
  uint64_t v7 = &v4[4 * v6];
  if (!*(_WORD *)(a1 + 10))
  {
    if (!*(_WORD *)(a1 + 8)) {
      goto LABEL_18;
    }
    LOWORD(v6) = 0;
LABEL_17:
    *(_WORD *)(a1 + 1sub_1B4BC92E4(&a9, 0) = v6 + 1;
    *(_DWORD *)uint64_t v7 = a2;
    v7[1] = 0;
    __n128 result = v7 + 1;
    std::string v7[2] = 0;
    v7[3] = 0;
    return result;
  }
  unint64_t v8 = *(unsigned __int16 *)(a1 + 10);
  do
  {
    unint64_t v9 = v8 >> 1;
    uint64_t v10 = (int *)&v4[4 * (v8 >> 1)];
    int v12 = *v10;
    uint64_t v11 = (uint64_t **)(v10 + 8);
    v8 += ~(v8 >> 1);
    if (v12 < (int)a2) {
      __int16 v4 = v11;
    }
    else {
      unint64_t v8 = v9;
    }
  }
  while (v8);
  if (v4 != v7)
  {
    if (*(_DWORD *)v4 == a2) {
      return v4 + 1;
    }
    if (v6 < v3)
    {
      memmove(v4 + 4, v4, (char *)v7 - (char *)v4);
      LOWORD(v6) = *(_WORD *)(a1 + 10);
      uint64_t v7 = v4;
      goto LABEL_17;
    }
    goto LABEL_18;
  }
  if (v6 < v3) {
    goto LABEL_17;
  }
LABEL_18:
  sub_1B4BEA80C((void *)a1, v6 + 1);
  return (uint64_t **)sub_1B4BEBA20(a1, a2);
}

uint64_t sub_1B4BEBB6C(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 16);
  if (*(unsigned __int16 *)(a1 + 8) >= 0x101u)
  {
    unint64_t v8 = (unsigned __int8 *)*v1;
    uint64_t v7 = (unsigned __int8 *)(v1 + 1);
    uint64_t v6 = v8;
    if (v8 == v7)
    {
      return 1;
    }
    else
    {
      do
      {
        uint64_t v4 = sub_1B4BEBC40(v6 + 40);
        if (!v4) {
          break;
        }
        unint64_t v9 = (unsigned __int8 *)*((void *)v6 + 1);
        if (v9)
        {
          do
          {
            uint64_t v10 = v9;
            unint64_t v9 = *(unsigned __int8 **)v9;
          }
          while (v9);
        }
        else
        {
          do
          {
            uint64_t v10 = (unsigned __int8 *)*((void *)v6 + 2);
            BOOL v11 = *(void *)v10 == (void)v6;
            uint64_t v6 = v10;
          }
          while (!v11);
        }
        uint64_t v6 = v10;
      }
      while (v10 != v7);
    }
  }
  else
  {
    while (1)
    {
      uint64_t v3 = *(void *)(a1 + 16) + 32 * *(unsigned __int16 *)(a1 + 10);
      uint64_t v4 = v1 == (void *)v3;
      if (v1 == (void *)v3) {
        break;
      }
      __int16 v5 = (unsigned __int8 *)(v1 + 1);
      if (!sub_1B4BEBC40(v5)) {
        break;
      }
      uint64_t v1 = v5 + 24;
      if (*(unsigned __int16 *)(a1 + 8) > 0x100u) {
        sub_1B4BF1AA8();
      }
    }
  }
  return v4;
}

uint64_t sub_1B4BEBC40(unsigned __int8 *a1)
{
  uint64_t v2 = a1[8];
  if ((v2 - 19) <= 0xFFFFFFED)
  {
    sub_1B4BE6194((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
    uint64_t v3 = sub_1B4BE61AC(v10, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
    sub_1B4BE62E8((uint64_t)&v9, (const char **)&v3->__r_.__value_.__l.__data_);
    sub_1B4BE62F0((uint64_t)v10);
  }
  if (dword_1B4C9A1C0[v2] != 10) {
    return 1;
  }
  if (a1[9])
  {
    uint64_t v4 = *(void *)a1;
    if (*(int *)(*(void *)a1 + 8) >= 1)
    {
      int v5 = 0;
      while (1)
      {
        uint64_t v6 = sub_1B4BF0B94(v4, v5);
        if (((*(uint64_t (**)(uint64_t))(*(void *)v6 + 48))(v6) & 1) == 0) {
          break;
        }
        ++v5;
        uint64_t v4 = *(void *)a1;
        if (v5 >= *(_DWORD *)(*(void *)a1 + 8)) {
          return 1;
        }
      }
      return 0;
    }
    return 1;
  }
  if (a1[10]) {
    return 1;
  }
  uint64_t v7 = **(void **)a1;
  if ((a1[10] & 0x10) != 0) {
    return ((*(uint64_t (**)(void))(v7 + 72))() & 1) != 0;
  }
  uint64_t result = (*(uint64_t (**)(void))(v7 + 48))();
  if (result) {
    return 1;
  }
  return result;
}

void sub_1B4BEBD98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1B4BE62F0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B4BEBDB0(uint64_t a1, int a2, uint64_t a3, uint64_t a4, unsigned __int8 *a5, unsigned char *a6)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *))(*(void *)a4 + 16))(a4, a3, a5);
  if (result)
  {
    uint64_t v10 = *a5;
    if ((v10 - 19) <= 0xFFFFFFED)
    {
      sub_1B4BE6194((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      BOOL v11 = sub_1B4BE61AC(v15, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_1B4BE62E8((uint64_t)&v14, (const char **)&v11->__r_.__value_.__l.__data_);
      sub_1B4BE62F0((uint64_t)v15);
    }
    unsigned int v12 = dword_1B4C9A20C[v10];
    *a6 = 0;
    if (a2 == 2 && a5[1])
    {
      if (v12 > 5)
      {
        sub_1B4BE6194((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 82);
        BOOL v13 = sub_1B4BE61AC(v15, "can't reach here.");
        sub_1B4BE62E8((uint64_t)&v14, (const char **)&v13->__r_.__value_.__l.__data_);
        sub_1B4BE62F0((uint64_t)v15);
      }
      else
      {
        uint64_t result = 1;
        if (((1 << v12) & 0x1C) == 0)
        {
          *a6 = 1;
          return result;
        }
      }
    }
    return v12 == a2;
  }
  return result;
}

void sub_1B4BEBEEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1B4BE62F0((uint64_t)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_1B4BEBF0C(uint64_t *a1, unint64_t a2, unsigned __int8 *a3, uint64_t a4, unint64_t *a5, int32x2_t *a6)
{
  unsigned int v9 = a2;
  v16[0] = &unk_1F0D55510;
  v16[1] = a4;
  uint64_t v11 = a2 >> 3;
  unsigned __int8 v15 = 0;
  if (sub_1B4BEBDB0((uint64_t)a1, a2 & 7, a2 >> 3, (uint64_t)v16, v14, &v15)) {
    return sub_1B4BEBFEC(a1, v11, v15, (uint64_t)v14, a5, a3, a6);
  }
  if (*a5) {
    BOOL v13 = (std::string *)((*a5 & 0xFFFFFFFFFFFFFFFELL) + 8);
  }
  else {
    BOOL v13 = (std::string *)sub_1B4BD6F84(a5);
  }
  return sub_1B4BF3D6C(v9, v13, (char *)a3, a6);
}

unsigned __int8 *sub_1B4BEBFEC(uint64_t *a1, uint64_t a2, int a3, uint64_t a4, unint64_t *a5, unsigned __int8 *a6, int32x2_t *a7)
{
  unint64_t v8 = a6;
  uint64_t v11 = a2;
  unsigned int v12 = a1;
  if (a3)
  {
    switch(*(unsigned char *)a4)
    {
      case 1:
        uint64_t v30 = sub_1B4BE9058(a1, a2, 1, *(unsigned char *)(a4 + 2), *(uint64_t **)(a4 + 24));
        uint64_t result = (unsigned __int8 *)sub_1B4BF3C04(v30, v8, a7);
        break;
      case 2:
        unint64_t v31 = sub_1B4BE9058(a1, a2, 2, *(unsigned char *)(a4 + 2), *(uint64_t **)(a4 + 24));
        uint64_t result = (unsigned __int8 *)sub_1B4BF3B88(v31, v8, a7);
        break;
      case 3:
        uint64_t v32 = sub_1B4BE9058(a1, a2, 3, *(unsigned char *)(a4 + 2), *(uint64_t **)(a4 + 24));
        uint64_t result = sub_1B4BF3948((int *)v32, v8, (uint64_t)a7);
        break;
      case 4:
        long long v33 = sub_1B4BE9058(a1, a2, 4, *(unsigned char *)(a4 + 2), *(uint64_t **)(a4 + 24));
        uint64_t result = sub_1B4BF3958((int *)v33, v8, (uint64_t)a7);
        break;
      case 5:
        uint64_t v16 = sub_1B4BE9058(a1, a2, 5, *(unsigned char *)(a4 + 2), *(uint64_t **)(a4 + 24));
        uint64_t result = sub_1B4BF3928((int *)v16, v8, (uint64_t)a7);
        break;
      case 6:
        uint64_t v34 = sub_1B4BE9058(a1, a2, 6, *(unsigned char *)(a4 + 2), *(uint64_t **)(a4 + 24));
        uint64_t result = (unsigned __int8 *)sub_1B4BF3A90(v34, v8, a7);
        break;
      case 7:
        uint64_t v35 = sub_1B4BE9058(a1, a2, 7, *(unsigned char *)(a4 + 2), *(uint64_t **)(a4 + 24));
        uint64_t result = (unsigned __int8 *)sub_1B4BF3998(v35, v8, a7);
        break;
      case 8:
        int v36 = sub_1B4BE9058(a1, a2, 8, *(unsigned char *)(a4 + 2), *(uint64_t **)(a4 + 24));
        uint64_t result = sub_1B4BF3988((int *)v36, v8, (uint64_t)a7);
        break;
      case 9:
      case 0xA:
      case 0xB:
      case 0xC:
        sub_1B4BE6194((uint64_t)&v89, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/extension_set_inl.h", 79);
        BOOL v13 = sub_1B4BE61AC(&v89, "Non-primitive types can't be packed.");
        sub_1B4BE62E8((uint64_t)&v88, (const char **)&v13->__r_.__value_.__l.__data_);
        sub_1B4BE62F0((uint64_t)&v89);
        goto LABEL_169;
      case 0xD:
        uint64_t v18 = sub_1B4BE9058(a1, a2, 13, *(unsigned char *)(a4 + 2), *(uint64_t **)(a4 + 24));
        uint64_t result = sub_1B4BF3938((int *)v18, v8, (uint64_t)a7);
        break;
      case 0xE:
        v89.__r_.__value_.__r.__words[0] = (std::string::size_type)sub_1B4BE9058(a1, a2, 14, *(unsigned char *)(a4 + 2), *(uint64_t **)(a4 + 24));
        *(_OWORD *)&v89.__r_.__value_.__r.__words[1] = *(_OWORD *)(a4 + 8);
        uint64_t v90 = a5;
        int v91 = v11;
        unint64_t v8 = (unsigned __int8 *)sub_1B4BF0E98((uint64_t)a7, (char *)v8, (uint64_t)&v89);
        goto LABEL_169;
      case 0xF:
        unint64_t v19 = sub_1B4BE9058(a1, a2, 15, *(unsigned char *)(a4 + 2), *(uint64_t **)(a4 + 24));
        uint64_t result = (unsigned __int8 *)sub_1B4BF3A14(v19, v8, a7);
        break;
      case 0x10:
        double v37 = sub_1B4BE9058(a1, a2, 16, *(unsigned char *)(a4 + 2), *(uint64_t **)(a4 + 24));
        uint64_t result = (unsigned __int8 *)sub_1B4BF3B0C(v37, v8, a7);
        break;
      case 0x11:
        uint64_t v20 = sub_1B4BE9058(a1, a2, 17, *(unsigned char *)(a4 + 2), *(uint64_t **)(a4 + 24));
        uint64_t result = sub_1B4BF3968((int *)v20, v8, (uint64_t)a7);
        break;
      case 0x12:
        long long v38 = sub_1B4BE9058(a1, a2, 18, *(unsigned char *)(a4 + 2), *(uint64_t **)(a4 + 24));
        uint64_t result = sub_1B4BF3978((int *)v38, v8, (uint64_t)a7);
        break;
      default:
        goto LABEL_169;
    }
  }
  else
  {
    switch(*(unsigned char *)a4)
    {
      case 1:
        unint64_t v8 = a6 + 8;
        double v39 = *(double *)a6;
        if (*(unsigned char *)(a4 + 1)) {
          sub_1B4BE87B0(a1, a2, 1, *(unsigned __int8 *)(a4 + 2), *(uint64_t **)(a4 + 24), v39);
        }
        else {
          sub_1B4BE8590((uint64_t)a1, a2, 1, *(void *)(a4 + 24), v39);
        }
        goto LABEL_169;
      case 2:
        unint64_t v8 = a6 + 4;
        float v40 = *(float *)a6;
        if (*(unsigned char *)(a4 + 1)) {
          sub_1B4BE8244(a1, a2, 2, *(unsigned __int8 *)(a4 + 2), *(uint64_t **)(a4 + 24), v40);
        }
        else {
          sub_1B4BE8024((uint64_t)a1, a2, 2, *(void *)(a4 + 24), v40);
        }
        goto LABEL_169;
      case 3:
        uint64_t v41 = *a6;
        if ((char)*a6 < 0)
        {
          int v67 = v41 + (a6[1] << 7);
          uint64_t v41 = (v67 - 128);
          if ((char)a6[1] < 0)
          {
            unint64_t v8 = (unsigned __int8 *)sub_1B4BF37B4((uint64_t)a6, (v67 - 128));
            if (!v8) {
              goto LABEL_169;
            }
            uint64_t v41 = v84;
          }
          else
          {
            unint64_t v8 = a6 + 2;
          }
        }
        else
        {
          unint64_t v8 = a6 + 1;
        }
        if (*(unsigned char *)(a4 + 1))
        {
          int v54 = *(unsigned __int8 *)(a4 + 2);
          uint64_t v55 = *(uint64_t **)(a4 + 24);
          a1 = v12;
          a2 = v11;
          int v56 = 3;
          goto LABEL_166;
        }
        uint64_t v79 = *(void *)(a4 + 24);
        a1 = v12;
        a2 = v11;
        int v80 = 3;
        goto LABEL_168;
      case 4:
        uint64_t v42 = *a6;
        if ((char)*a6 < 0)
        {
          int v68 = v42 + (a6[1] << 7);
          uint64_t v42 = (v68 - 128);
          if ((char)a6[1] < 0)
          {
            unint64_t v8 = (unsigned __int8 *)sub_1B4BF37B4((uint64_t)a6, (v68 - 128));
            if (!v8) {
              goto LABEL_169;
            }
            uint64_t v42 = v85;
          }
          else
          {
            unint64_t v8 = a6 + 2;
          }
        }
        else
        {
          unint64_t v8 = a6 + 1;
        }
        if (*(unsigned char *)(a4 + 1))
        {
          int v43 = *(unsigned __int8 *)(a4 + 2);
          uint64_t v44 = *(uint64_t **)(a4 + 24);
          a1 = v12;
          a2 = v11;
          int v45 = 4;
          goto LABEL_147;
        }
        uint64_t v69 = *(void *)(a4 + 24);
        a1 = v12;
        a2 = v11;
        int v70 = 4;
        goto LABEL_149;
      case 5:
        int v21 = *a6;
        if ((char)*a6 < 0)
        {
          int v63 = v21 + (a6[1] << 7);
          int v21 = v63 - 128;
          if ((char)a6[1] < 0)
          {
            unint64_t v8 = (unsigned __int8 *)sub_1B4BF37B4((uint64_t)a6, (v63 - 128));
            if (!v8) {
              goto LABEL_169;
            }
            int v21 = v81;
          }
          else
          {
            unint64_t v8 = a6 + 2;
          }
        }
        else
        {
          unint64_t v8 = a6 + 1;
        }
        if (*(unsigned char *)(a4 + 1))
        {
          int v26 = *(unsigned __int8 *)(a4 + 2);
          unint64_t v27 = *(uint64_t **)(a4 + 24);
          a1 = v12;
          a2 = v11;
          int v28 = 5;
          goto LABEL_134;
        }
        uint64_t v65 = *(void *)(a4 + 24);
        a1 = v12;
        a2 = v11;
        int v66 = 5;
        int v82 = v21;
        goto LABEL_137;
      case 6:
        unint64_t v8 = a6 + 8;
        uint64_t v42 = *(void *)a6;
        if (*(unsigned char *)(a4 + 1))
        {
          int v43 = *(unsigned __int8 *)(a4 + 2);
          uint64_t v44 = *(uint64_t **)(a4 + 24);
          int v45 = 6;
LABEL_147:
          sub_1B4BE7CE0(a1, a2, v45, v43, v42, v44);
        }
        else
        {
          uint64_t v69 = *(void *)(a4 + 24);
          int v70 = 6;
LABEL_149:
          sub_1B4BE7AC8((uint64_t)a1, a2, v70, v42, v69);
        }
        goto LABEL_169;
      case 7:
        unint64_t v8 = a6 + 4;
        int v25 = *(_DWORD *)a6;
        if (*(unsigned char *)(a4 + 1))
        {
          int v46 = *(unsigned __int8 *)(a4 + 2);
          uint64_t v47 = *(uint64_t **)(a4 + 24);
          int v48 = 7;
          goto LABEL_128;
        }
        uint64_t v71 = *(void *)(a4 + 24);
        int v72 = 7;
        int v73 = *(_DWORD *)a6;
        goto LABEL_130;
      case 8:
        uint64_t v49 = *a6;
        if ((char)*a6 < 0)
        {
          uint64_t v49 = v49 + (a6[1] << 7) - 128;
          if ((char)a6[1] < 0)
          {
            unint64_t v8 = (unsigned __int8 *)sub_1B4BF37B4((uint64_t)a6, v49);
            if (!v8) {
              goto LABEL_169;
            }
          }
          else
          {
            unint64_t v8 = a6 + 2;
          }
        }
        else
        {
          unint64_t v8 = a6 + 1;
        }
        if (*(unsigned char *)(a4 + 1)) {
          sub_1B4BE8D14(v12, v11, 8, *(unsigned __int8 *)(a4 + 2), v49 != 0, *(uint64_t **)(a4 + 24));
        }
        else {
          sub_1B4BE8AFC((uint64_t)v12, v11, 8, v49 != 0, *(void *)(a4 + 24));
        }
        goto LABEL_169;
      case 9:
      case 0xC:
        char v14 = *(uint64_t **)(a4 + 24);
        if (*(unsigned char *)(a4 + 1)) {
          uint64_t v15 = (uint64_t)sub_1B4BE9CD0(a1, a2, 9, v14);
        }
        else {
          uint64_t v15 = sub_1B4BE9A28(a1, a2, 9, v14);
        }
        uint64_t v58 = (std::string *)v15;
        int v59 = *v8;
        if ((char)*v8 < 0)
        {
          uint64_t v61 = sub_1B4BF3840((uint64_t)v8, *v8);
          if (!v61)
          {
LABEL_113:
            unint64_t v8 = 0;
            goto LABEL_169;
          }
          uint64_t v60 = (std::string::value_type *)v61;
          int v59 = v62;
        }
        else
        {
          uint64_t v60 = (std::string::value_type *)(v8 + 1);
        }
        return (unsigned __int8 *)sub_1B4BF0E2C((uint64_t)a7, v60, v59, v58);
      case 0xA:
        uint64_t v50 = *(void *)(a4 + 8);
        uint64_t v51 = *(uint64_t **)(a4 + 24);
        if (*(unsigned char *)(a4 + 1)) {
          uint64_t v52 = sub_1B4BEA318(a1, a2, 10, v50, v51);
        }
        else {
          uint64_t v52 = sub_1B4BEA080(a1, a2, 10, v50, v51);
        }
        int v74 = a7[11].i32[0];
        BOOL v75 = __OFSUB__(v74--, 1);
        a7[11].i32[0] = v74;
        if (v74 < 0 != v75) {
          goto LABEL_113;
        }
        ++a7[11].i32[1];
        uint64_t v76 = (*(uint64_t (**)(uint64_t, unsigned __int8 *, int32x2_t *))(*(void *)v52 + 88))(v52, v8, a7);
        a7[11] = vadd_s32(a7[11], (int32x2_t)0xFFFFFFFF00000001);
        __int32 v77 = a7[10].i32[0];
        a7[10].i32[0] = 0;
        if (v77 == ((8 * v11) | 3)) {
          unint64_t v8 = (unsigned __int8 *)v76;
        }
        else {
          unint64_t v8 = 0;
        }
        goto LABEL_169;
      case 0xB:
        uint64_t v22 = *(void *)(a4 + 8);
        unint64_t v23 = *(uint64_t **)(a4 + 24);
        if (*(unsigned char *)(a4 + 1)) {
          uint64_t v24 = sub_1B4BEA318(a1, a2, 11, v22, v23);
        }
        else {
          uint64_t v24 = sub_1B4BEA080(a1, a2, 11, v22, v23);
        }
        return (unsigned __int8 *)sub_1B4BF35B4(a7, v24, v8);
      case 0xD:
        int v25 = *a6;
        if ((char)*a6 < 0)
        {
          int v64 = v25 + (a6[1] << 7);
          int v25 = v64 - 128;
          if ((char)a6[1] < 0)
          {
            unint64_t v8 = (unsigned __int8 *)sub_1B4BF37B4((uint64_t)a6, (v64 - 128));
            if (!v8) {
              goto LABEL_169;
            }
            int v25 = v83;
          }
          else
          {
            unint64_t v8 = a6 + 2;
          }
        }
        else
        {
          unint64_t v8 = a6 + 1;
        }
        if (*(unsigned char *)(a4 + 1))
        {
          int v46 = *(unsigned __int8 *)(a4 + 2);
          uint64_t v47 = *(uint64_t **)(a4 + 24);
          a1 = v12;
          a2 = v11;
          int v48 = 13;
LABEL_128:
          sub_1B4BE7784(a1, a2, v48, v46, v25, v47);
        }
        else
        {
          uint64_t v71 = *(void *)(a4 + 24);
          a1 = v12;
          a2 = v11;
          int v72 = 13;
          int v73 = v25;
LABEL_130:
          sub_1B4BE756C((uint64_t)a1, a2, v72, v73, v71);
        }
        goto LABEL_169;
      case 0xE:
        unint64_t v53 = *a6;
        if ((char)*a6 < 0)
        {
          int v78 = v53 + (a6[1] << 7);
          unint64_t v53 = (v78 - 128);
          if ((char)a6[1] < 0)
          {
            unint64_t v8 = (unsigned __int8 *)sub_1B4BF37B4((uint64_t)a6, (v78 - 128));
            if (!v8) {
              goto LABEL_169;
            }
            unint64_t v53 = v86;
          }
          else
          {
            unint64_t v8 = a6 + 2;
          }
        }
        else
        {
          unint64_t v8 = a6 + 1;
        }
        if ((*(uint64_t (**)(void, unint64_t))(a4 + 8))(*(void *)(a4 + 16), v53))
        {
          if (*(unsigned char *)(a4 + 1)) {
            sub_1B4BE96E4(v12, v11, 14, *(unsigned __int8 *)(a4 + 2), v53, *(uint64_t **)(a4 + 24));
          }
          else {
            sub_1B4BE94CC((uint64_t)v12, v11, 14, v53, *(void *)(a4 + 24));
          }
        }
        else
        {
          if (*a5) {
            uint64_t v87 = (std::string *)((*a5 & 0xFFFFFFFFFFFFFFFELL) + 8);
          }
          else {
            uint64_t v87 = (std::string *)sub_1B4BD6F84(a5);
          }
          sub_1B4BF36A0(v11, v53, v87);
        }
        goto LABEL_169;
      case 0xF:
        unint64_t v8 = a6 + 4;
        int v21 = *(_DWORD *)a6;
        if (*(unsigned char *)(a4 + 1))
        {
          int v26 = *(unsigned __int8 *)(a4 + 2);
          unint64_t v27 = *(uint64_t **)(a4 + 24);
          int v28 = 15;
          goto LABEL_134;
        }
        uint64_t v65 = *(void *)(a4 + 24);
        int v66 = 15;
        goto LABEL_136;
      case 0x10:
        unint64_t v8 = a6 + 8;
        uint64_t v41 = *(void *)a6;
        if (*(unsigned char *)(a4 + 1))
        {
          int v54 = *(unsigned __int8 *)(a4 + 2);
          uint64_t v55 = *(uint64_t **)(a4 + 24);
          int v56 = 16;
          goto LABEL_166;
        }
        uint64_t v79 = *(void *)(a4 + 24);
        int v80 = 16;
        goto LABEL_168;
      case 0x11:
        LODWORD(v29) = *a6;
        if ((char)*a6 < 0)
        {
          uint64_t v29 = v29 + (a6[1] << 7) - 128;
          if ((char)a6[1] < 0)
          {
            unint64_t v8 = (unsigned __int8 *)sub_1B4BF37B4((uint64_t)a6, v29);
            if (!v8) {
              goto LABEL_169;
            }
          }
          else
          {
            unint64_t v8 = a6 + 2;
          }
        }
        else
        {
          unint64_t v8 = a6 + 1;
        }
        int v21 = -(v29 & 1) ^ (v29 >> 1);
        if (*(unsigned char *)(a4 + 1))
        {
          int v26 = *(unsigned __int8 *)(a4 + 2);
          unint64_t v27 = *(uint64_t **)(a4 + 24);
          a1 = v12;
          a2 = v11;
          int v28 = 17;
LABEL_134:
          sub_1B4BE6CCC(a1, a2, v28, v26, v21, v27);
        }
        else
        {
          uint64_t v65 = *(void *)(a4 + 24);
          a1 = v12;
          a2 = v11;
          int v66 = 17;
LABEL_136:
          int v82 = v21;
LABEL_137:
          sub_1B4BE6AB4((uint64_t)a1, a2, v66, v82, v65);
        }
        goto LABEL_169;
      case 0x12:
        unint64_t v57 = *a6;
        if ((char)*a6 < 0)
        {
          unint64_t v57 = v57 + (a6[1] << 7) - 128;
          if ((char)a6[1] < 0)
          {
            unint64_t v8 = (unsigned __int8 *)sub_1B4BF37B4((uint64_t)a6, v57);
            if (!v8) {
              goto LABEL_169;
            }
          }
          else
          {
            unint64_t v8 = a6 + 2;
          }
        }
        else
        {
          unint64_t v8 = a6 + 1;
        }
        uint64_t v41 = -(uint64_t)(v57 & 1) ^ (v57 >> 1);
        if (*(unsigned char *)(a4 + 1))
        {
          int v54 = *(unsigned __int8 *)(a4 + 2);
          uint64_t v55 = *(uint64_t **)(a4 + 24);
          a1 = v12;
          a2 = v11;
          int v56 = 18;
LABEL_166:
          sub_1B4BE7228(a1, a2, v56, v54, v41, v55);
        }
        else
        {
          uint64_t v79 = *(void *)(a4 + 24);
          a1 = v12;
          a2 = v11;
          int v80 = 18;
LABEL_168:
          sub_1B4BE7010((uint64_t)a1, a2, v80, v41, v79);
        }
LABEL_169:
        uint64_t result = v8;
        break;
      default:
        goto LABEL_169;
    }
  }
  return result;
}

void sub_1B4BECC58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1B4BE62F0((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_1B4BECD04(uint64_t a1, signed int a2, int a3, char *a4, uint64_t *a5)
{
  uint64_t v7 = *(unsigned int **)(a1 + 16);
  if (*(unsigned __int16 *)(a1 + 8) >= 0x101u)
  {
    uint64_t v18 = *((void *)v7 + 1);
    uint64_t v17 = v7 + 2;
    uint64_t v16 = v18;
    if (v18)
    {
      unint64_t v19 = v17;
      do
      {
        int v20 = *(_DWORD *)(v16 + 32);
        BOOL v21 = v20 < a2;
        if (v20 >= a2) {
          uint64_t v22 = (uint64_t *)v16;
        }
        else {
          uint64_t v22 = (uint64_t *)(v16 + 8);
        }
        if (!v21) {
          unint64_t v19 = (void *)v16;
        }
        uint64_t v16 = *v22;
      }
      while (*v22);
      if (v19 != (void *)v17)
      {
        do
        {
          uint64_t v23 = *((unsigned int *)v19 + 8);
          if ((int)v23 >= a3) {
            break;
          }
          a4 = sub_1B4BECE34((unsigned char *)v19 + 40, v23, a4, a5);
          uint64_t v24 = (unsigned int *)v19[1];
          if (v24)
          {
            do
            {
              int v25 = v24;
              uint64_t v24 = *(unsigned int **)v24;
            }
            while (v24);
          }
          else
          {
            do
            {
              int v25 = (unsigned int *)v19[2];
              BOOL v26 = *(void *)v25 == (void)v19;
              unint64_t v19 = v25;
            }
            while (!v26);
          }
          unint64_t v19 = v25;
        }
        while (v25 != v17);
      }
    }
  }
  else
  {
    unint64_t v8 = *(unsigned __int16 *)(a1 + 10);
    if (*(_WORD *)(a1 + 10))
    {
      unsigned int v9 = &v7[8 * v8];
      do
      {
        unint64_t v10 = v8 >> 1;
        uint64_t v11 = &v7[8 * (v8 >> 1)];
        signed int v13 = *v11;
        unsigned int v12 = v11 + 8;
        v8 += ~(v8 >> 1);
        if (v13 < a2) {
          uint64_t v7 = v12;
        }
        else {
          unint64_t v8 = v10;
        }
      }
      while (v8);
      while (v7 != v9)
      {
        uint64_t v14 = *v7;
        if ((int)v14 >= a3) {
          break;
        }
        a4 = sub_1B4BECE34((unsigned char *)v7 + 8, v14, a4, a5);
        v7 += 8;
      }
    }
  }
  return a4;
}

char *sub_1B4BECE34(unsigned char *a1, uint64_t a2, char *a3, uint64_t *a4)
{
  int v5 = a3;
  if (a1[9])
  {
    if (a1[11])
    {
      if (*((_DWORD *)a1 + 3))
      {
        if (*a4 <= (unint64_t)a3) {
          int v5 = sub_1B4BE5708((uint64_t)a4, a3);
        }
        unsigned int v8 = (8 * a2) | 2;
        if (v8 > 0x7F)
        {
          char *v5 = (8 * a2) | 0x82;
          unsigned int v32 = (8 * a2) >> 7;
          if (v8 >> 14)
          {
            unsigned int v9 = v5 + 2;
            do
            {
              *(v9 - 1) = v32 | 0x80;
              unsigned int v33 = v32 >> 7;
              ++v9;
              unsigned int v34 = v32 >> 14;
              v32 >>= 7;
            }
            while (v34);
            *(v9 - 1) = v33;
          }
          else
          {
            v5[1] = v32;
            unsigned int v9 = v5 + 2;
          }
        }
        else
        {
          char *v5 = v8;
          unsigned int v9 = v5 + 1;
        }
        unint64_t v35 = *((int *)a1 + 3);
        if (v35 > 0x7F)
        {
          *unsigned int v9 = v35 | 0x80;
          unint64_t v36 = v35 >> 7;
          if (v35 >> 14)
          {
            int v5 = v9 + 2;
            do
            {
              *(v5 - 1) = v36 | 0x80;
              unint64_t v37 = v36 >> 7;
              ++v5;
              unint64_t v38 = v36 >> 14;
              v36 >>= 7;
            }
            while (v38);
            *(v5 - 1) = v37;
          }
          else
          {
            v9[1] = v36;
            int v5 = v9 + 2;
          }
        }
        else
        {
          *unsigned int v9 = v35;
          int v5 = v9 + 1;
        }
        int v39 = a1[8];
        if ((v39 - 19) <= 0xFFFFFFED)
        {
          sub_1B4BE6194((uint64_t)v432, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
          float v40 = sub_1B4BE61AC(v432, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
          sub_1B4BE62E8((uint64_t)&v431, (const char **)&v40->__r_.__value_.__l.__data_);
          sub_1B4BE62F0((uint64_t)v432);
        }
        switch(v39)
        {
          case 1:
            int v63 = *(int **)a1;
            if (**(int **)a1 >= 1)
            {
              int v64 = 0;
              do
              {
                if (*a4 <= (unint64_t)v5)
                {
                  int v5 = sub_1B4BE5708((uint64_t)a4, v5);
                  int v63 = *(int **)a1;
                }
                *(void *)int v5 = *(void *)sub_1B4BF8834(v63, v64);
                v5 += 8;
                ++v64;
                int v63 = *(int **)a1;
              }
              while (v64 < **(_DWORD **)a1);
            }
            break;
          case 2:
            uint64_t v65 = *(_DWORD **)a1;
            if (**(int **)a1 >= 1)
            {
              int v66 = 0;
              do
              {
                if (*a4 <= (unint64_t)v5)
                {
                  int v5 = sub_1B4BE5708((uint64_t)a4, v5);
                  uint64_t v65 = *(_DWORD **)a1;
                }
                *(_DWORD *)int v5 = *(_DWORD *)sub_1B4BF81D8(v65, v66);
                v5 += 4;
                ++v66;
                uint64_t v65 = *(_DWORD **)a1;
              }
              while (v66 < **(_DWORD **)a1);
            }
            break;
          case 3:
            int v67 = *(_DWORD **)a1;
            if (**(int **)a1 >= 1)
            {
              int v68 = 0;
              do
              {
                if (*a4 <= (unint64_t)v5)
                {
                  int v5 = sub_1B4BE5708((uint64_t)a4, v5);
                  int v67 = *(_DWORD **)a1;
                }
                unint64_t v69 = *(void *)sub_1B4BF7520(v67, v68);
                if (v69 > 0x7F)
                {
                  char *v5 = v69 | 0x80;
                  unint64_t v70 = v69 >> 7;
                  if (v69 >> 14)
                  {
                    v5 += 2;
                    do
                    {
                      *(v5 - 1) = v70 | 0x80;
                      unint64_t v71 = v70 >> 7;
                      ++v5;
                      unint64_t v72 = v70 >> 14;
                      v70 >>= 7;
                    }
                    while (v72);
                    *(v5 - 1) = v71;
                  }
                  else
                  {
                    v5[1] = v70;
                    v5 += 2;
                  }
                }
                else
                {
                  *v5++ = v69;
                }
                ++v68;
                int v67 = *(_DWORD **)a1;
              }
              while (v68 < **(_DWORD **)a1);
            }
            break;
          case 4:
            int v73 = *(_DWORD **)a1;
            if (**(int **)a1 >= 1)
            {
              int v74 = 0;
              do
              {
                if (*a4 <= (unint64_t)v5)
                {
                  int v5 = sub_1B4BE5708((uint64_t)a4, v5);
                  int v73 = *(_DWORD **)a1;
                }
                unint64_t v75 = *(void *)sub_1B4BF7B7C(v73, v74);
                if (v75 > 0x7F)
                {
                  char *v5 = v75 | 0x80;
                  unint64_t v76 = v75 >> 7;
                  if (v75 >> 14)
                  {
                    v5 += 2;
                    do
                    {
                      *(v5 - 1) = v76 | 0x80;
                      unint64_t v77 = v76 >> 7;
                      ++v5;
                      unint64_t v78 = v76 >> 14;
                      v76 >>= 7;
                    }
                    while (v78);
                    *(v5 - 1) = v77;
                  }
                  else
                  {
                    v5[1] = v76;
                    v5 += 2;
                  }
                }
                else
                {
                  *v5++ = v75;
                }
                ++v74;
                int v73 = *(_DWORD **)a1;
              }
              while (v74 < **(_DWORD **)a1);
            }
            break;
          case 5:
            uint64_t v42 = *(_DWORD **)a1;
            if (**(int **)a1 >= 1)
            {
              int v43 = 0;
              do
              {
                if (*a4 <= (unint64_t)v5)
                {
                  int v5 = sub_1B4BE5708((uint64_t)a4, v5);
                  uint64_t v42 = *(_DWORD **)a1;
                }
                unint64_t v44 = *(int *)sub_1B4BF6868(v42, v43);
                if (v44 > 0x7F)
                {
                  char *v5 = v44 | 0x80;
                  unint64_t v45 = v44 >> 7;
                  if (v44 >> 14)
                  {
                    v5 += 2;
                    do
                    {
                      *(v5 - 1) = v45 | 0x80;
                      unint64_t v46 = v45 >> 7;
                      ++v5;
                      unint64_t v47 = v45 >> 14;
                      v45 >>= 7;
                    }
                    while (v47);
                    *(v5 - 1) = v46;
                  }
                  else
                  {
                    v5[1] = v45;
                    v5 += 2;
                  }
                }
                else
                {
                  *v5++ = v44;
                }
                ++v43;
                uint64_t v42 = *(_DWORD **)a1;
              }
              while (v43 < **(_DWORD **)a1);
            }
            break;
          case 6:
            uint64_t v79 = *(_DWORD **)a1;
            if (**(int **)a1 >= 1)
            {
              int v80 = 0;
              do
              {
                if (*a4 <= (unint64_t)v5)
                {
                  int v5 = sub_1B4BE5708((uint64_t)a4, v5);
                  uint64_t v79 = *(_DWORD **)a1;
                }
                *(void *)int v5 = *(void *)sub_1B4BF7B7C(v79, v80);
                v5 += 8;
                ++v80;
                uint64_t v79 = *(_DWORD **)a1;
              }
              while (v80 < **(_DWORD **)a1);
            }
            break;
          case 7:
            int v81 = *(_DWORD **)a1;
            if (**(int **)a1 >= 1)
            {
              int v82 = 0;
              do
              {
                if (*a4 <= (unint64_t)v5)
                {
                  int v5 = sub_1B4BE5708((uint64_t)a4, v5);
                  int v81 = *(_DWORD **)a1;
                }
                *(_DWORD *)int v5 = *(_DWORD *)sub_1B4BF6EC4(v81, v82);
                v5 += 4;
                ++v82;
                int v81 = *(_DWORD **)a1;
              }
              while (v82 < **(_DWORD **)a1);
            }
            break;
          case 8:
            int v83 = *(_DWORD **)a1;
            if (**(int **)a1 >= 1)
            {
              int v84 = 0;
              do
              {
                if (*a4 <= (unint64_t)v5)
                {
                  int v5 = sub_1B4BE5708((uint64_t)a4, v5);
                  int v83 = *(_DWORD **)a1;
                }
                *v5++ = *(unsigned char *)sub_1B4BF6210(v83, v84++);
                int v83 = *(_DWORD **)a1;
              }
              while (v84 < **(_DWORD **)a1);
            }
            break;
          case 9:
          case 10:
          case 11:
          case 12:
            sub_1B4BE6194((uint64_t)v432, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 1966);
            uint64_t v41 = sub_1B4BE61AC(v432, "Non-primitive types can't be packed.");
            sub_1B4BE62E8((uint64_t)&v431, (const char **)&v41->__r_.__value_.__l.__data_);
            sub_1B4BE62F0((uint64_t)v432);
            break;
          case 13:
            int v48 = *(_DWORD **)a1;
            if (**(int **)a1 >= 1)
            {
              int v49 = 0;
              do
              {
                if (*a4 <= (unint64_t)v5)
                {
                  int v5 = sub_1B4BE5708((uint64_t)a4, v5);
                  int v48 = *(_DWORD **)a1;
                }
                unsigned int v50 = *(_DWORD *)sub_1B4BF6EC4(v48, v49);
                if (v50 > 0x7F)
                {
                  char *v5 = v50 | 0x80;
                  unsigned int v51 = v50 >> 7;
                  if (v50 >> 14)
                  {
                    v5 += 2;
                    do
                    {
                      *(v5 - 1) = v51 | 0x80;
                      unsigned int v52 = v51 >> 7;
                      ++v5;
                      unsigned int v53 = v51 >> 14;
                      v51 >>= 7;
                    }
                    while (v53);
                    *(v5 - 1) = v52;
                  }
                  else
                  {
                    v5[1] = v51;
                    v5 += 2;
                  }
                }
                else
                {
                  *v5++ = v50;
                }
                ++v49;
                int v48 = *(_DWORD **)a1;
              }
              while (v49 < **(_DWORD **)a1);
            }
            break;
          case 14:
            uint64_t v85 = *(_DWORD **)a1;
            if (**(int **)a1 >= 1)
            {
              int v86 = 0;
              do
              {
                if (*a4 <= (unint64_t)v5)
                {
                  int v5 = sub_1B4BE5708((uint64_t)a4, v5);
                  uint64_t v85 = *(_DWORD **)a1;
                }
                unint64_t v87 = *(int *)sub_1B4BF6868(v85, v86);
                if (v87 > 0x7F)
                {
                  char *v5 = v87 | 0x80;
                  unint64_t v88 = v87 >> 7;
                  if (v87 >> 14)
                  {
                    v5 += 2;
                    do
                    {
                      *(v5 - 1) = v88 | 0x80;
                      unint64_t v89 = v88 >> 7;
                      ++v5;
                      unint64_t v90 = v88 >> 14;
                      v88 >>= 7;
                    }
                    while (v90);
                    *(v5 - 1) = v89;
                  }
                  else
                  {
                    v5[1] = v88;
                    v5 += 2;
                  }
                }
                else
                {
                  *v5++ = v87;
                }
                ++v86;
                uint64_t v85 = *(_DWORD **)a1;
              }
              while (v86 < **(_DWORD **)a1);
            }
            break;
          case 15:
            int v54 = *(_DWORD **)a1;
            if (**(int **)a1 >= 1)
            {
              int v55 = 0;
              do
              {
                if (*a4 <= (unint64_t)v5)
                {
                  int v5 = sub_1B4BE5708((uint64_t)a4, v5);
                  int v54 = *(_DWORD **)a1;
                }
                *(_DWORD *)int v5 = *(_DWORD *)sub_1B4BF6868(v54, v55);
                v5 += 4;
                ++v55;
                int v54 = *(_DWORD **)a1;
              }
              while (v55 < **(_DWORD **)a1);
            }
            break;
          case 16:
            int v91 = *(_DWORD **)a1;
            if (**(int **)a1 >= 1)
            {
              int v92 = 0;
              do
              {
                if (*a4 <= (unint64_t)v5)
                {
                  int v5 = sub_1B4BE5708((uint64_t)a4, v5);
                  int v91 = *(_DWORD **)a1;
                }
                *(void *)int v5 = *(void *)sub_1B4BF7520(v91, v92);
                v5 += 8;
                ++v92;
                int v91 = *(_DWORD **)a1;
              }
              while (v92 < **(_DWORD **)a1);
            }
            break;
          case 17:
            int v56 = *(_DWORD **)a1;
            if (**(int **)a1 >= 1)
            {
              int v57 = 0;
              do
              {
                if (*a4 <= (unint64_t)v5)
                {
                  int v5 = sub_1B4BE5708((uint64_t)a4, v5);
                  int v56 = *(_DWORD **)a1;
                }
                uint64_t v58 = (int *)sub_1B4BF6868(v56, v57);
                unsigned int v59 = (2 * *v58) ^ (*v58 >> 31);
                if (v59 > 0x7F)
                {
                  char *v5 = v59 | 0x80;
                  unsigned int v60 = v59 >> 7;
                  if (v59 >> 14)
                  {
                    v5 += 2;
                    do
                    {
                      *(v5 - 1) = v60 | 0x80;
                      unsigned int v61 = v60 >> 7;
                      ++v5;
                      unsigned int v62 = v60 >> 14;
                      v60 >>= 7;
                    }
                    while (v62);
                    *(v5 - 1) = v61;
                  }
                  else
                  {
                    v5[1] = v60;
                    v5 += 2;
                  }
                }
                else
                {
                  *v5++ = v59;
                }
                ++v57;
                int v56 = *(_DWORD **)a1;
              }
              while (v57 < **(_DWORD **)a1);
            }
            break;
          case 18:
            uint64_t v93 = *(_DWORD **)a1;
            if (**(int **)a1 >= 1)
            {
              int v94 = 0;
              do
              {
                if (*a4 <= (unint64_t)v5)
                {
                  int v5 = sub_1B4BE5708((uint64_t)a4, v5);
                  uint64_t v93 = *(_DWORD **)a1;
                }
                uint64_t v95 = (uint64_t *)sub_1B4BF7520(v93, v94);
                unint64_t v96 = (2 * *v95) ^ (*v95 >> 63);
                if (v96 > 0x7F)
                {
                  char *v5 = v96 | 0x80;
                  unint64_t v97 = v96 >> 7;
                  if (v96 >> 14)
                  {
                    v5 += 2;
                    do
                    {
                      *(v5 - 1) = v97 | 0x80;
                      unint64_t v98 = v97 >> 7;
                      ++v5;
                      unint64_t v99 = v97 >> 14;
                      v97 >>= 7;
                    }
                    while (v99);
                    *(v5 - 1) = v98;
                  }
                  else
                  {
                    v5[1] = v97;
                    v5 += 2;
                  }
                }
                else
                {
                  *v5++ = v96;
                }
                ++v94;
                uint64_t v93 = *(_DWORD **)a1;
              }
              while (v94 < **(_DWORD **)a1);
            }
            break;
          default:
            return v5;
        }
      }
      return v5;
    }
    int v18 = a1[8];
    if ((v18 - 19) <= 0xFFFFFFED)
    {
      sub_1B4BE6194((uint64_t)v432, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      unint64_t v19 = sub_1B4BE61AC(v432, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_1B4BE62E8((uint64_t)&v431, (const char **)&v19->__r_.__value_.__l.__data_);
      sub_1B4BE62F0((uint64_t)v432);
    }
    switch(v18)
    {
      case 1:
        int v20 = *(_DWORD **)a1;
        if (**(int **)a1 >= 1)
        {
          int v21 = 0;
          unsigned int v22 = 8 * a2;
          unsigned int v23 = (8 * a2) | 1;
          char v24 = (8 * a2) | 0x81;
          unsigned int v25 = (a2 >> 4) & 0x1FFFFFF;
          unsigned int v26 = v22 >> 7;
          do
          {
            if (*a4 <= (unint64_t)v5)
            {
              int v5 = sub_1B4BE5708((uint64_t)a4, v5);
              int v20 = *(_DWORD **)a1;
            }
            uint64_t v27 = *(void *)sub_1B4BF8834(v20, v21);
            if (v23 > 0x7F)
            {
              char *v5 = v24;
              if (v23 >= 0x4000)
              {
                int v28 = v5 + 2;
                unsigned int v29 = v25;
                do
                {
                  *((unsigned char *)v28 - 1) = v29 | 0x80;
                  unsigned int v30 = v29 >> 7;
                  int v28 = (void *)((char *)v28 + 1);
                  unsigned int v31 = v29 >> 14;
                  v29 >>= 7;
                }
                while (v31);
                *((unsigned char *)v28 - 1) = v30;
              }
              else
              {
                v5[1] = v26;
                int v28 = v5 + 2;
              }
            }
            else
            {
              char *v5 = v23;
              int v28 = v5 + 1;
            }
            *int v28 = v27;
            int v5 = (char *)(v28 + 1);
            ++v21;
            int v20 = *(_DWORD **)a1;
          }
          while (v21 < **(_DWORD **)a1);
        }
        return v5;
      case 2:
        unint64_t v100 = *(_DWORD **)a1;
        if (**(int **)a1 >= 1)
        {
          int v101 = 0;
          unsigned int v102 = (8 * a2) | 5;
          unsigned int v103 = (a2 >> 4) & 0x1FFFFFF;
          unsigned int v104 = (8 * a2) >> 7;
          char v105 = (8 * a2) | 0x85;
          do
          {
            if (*a4 <= (unint64_t)v5)
            {
              int v5 = sub_1B4BE5708((uint64_t)a4, v5);
              unint64_t v100 = *(_DWORD **)a1;
            }
            int v106 = *(_DWORD *)sub_1B4BF81D8(v100, v101);
            if (v102 > 0x7F)
            {
              char *v5 = v105;
              if (v102 >= 0x4000)
              {
                uint64_t v107 = v5 + 2;
                unsigned int v108 = v103;
                do
                {
                  *((unsigned char *)v107 - 1) = v108 | 0x80;
                  unsigned int v109 = v108 >> 7;
                  uint64_t v107 = (_DWORD *)((char *)v107 + 1);
                  unsigned int v110 = v108 >> 14;
                  v108 >>= 7;
                }
                while (v110);
                *((unsigned char *)v107 - 1) = v109;
              }
              else
              {
                v5[1] = v104;
                uint64_t v107 = v5 + 2;
              }
            }
            else
            {
              char *v5 = v102;
              uint64_t v107 = v5 + 1;
            }
            *uint64_t v107 = v106;
            int v5 = (char *)(v107 + 1);
            ++v101;
            unint64_t v100 = *(_DWORD **)a1;
          }
          while (v101 < **(_DWORD **)a1);
        }
        return v5;
      case 3:
        char v111 = *(_DWORD **)a1;
        if (**(int **)a1 >= 1)
        {
          int v112 = 0;
          unsigned int v113 = 8 * a2;
          char v114 = (8 * a2) | 0x80;
          unsigned int v115 = (a2 >> 4) & 0x1FFFFFF;
          do
          {
            if (*a4 <= (unint64_t)v5)
            {
              int v5 = sub_1B4BE5708((uint64_t)a4, v5);
              char v111 = *(_DWORD **)a1;
            }
            unint64_t v116 = *(void *)sub_1B4BF7520(v111, v112);
            if (v113 > 0x7F)
            {
              char *v5 = v114;
              if (v113 >= 0x4000)
              {
                unint64_t v117 = v5 + 2;
                unsigned int v118 = v115;
                do
                {
                  *(v117 - 1) = v118 | 0x80;
                  unsigned int v119 = v118 >> 7;
                  ++v117;
                  unsigned int v120 = v118 >> 14;
                  v118 >>= 7;
                }
                while (v120);
                *(v117 - 1) = v119;
              }
              else
              {
                v5[1] = v113 >> 7;
                unint64_t v117 = v5 + 2;
              }
            }
            else
            {
              unint64_t v117 = v5 + 1;
              char *v5 = v113;
            }
            if (v116 > 0x7F)
            {
              *unint64_t v117 = v116 | 0x80;
              unint64_t v121 = v116 >> 7;
              if (v116 >> 14)
              {
                int v5 = v117 + 2;
                do
                {
                  *(v5 - 1) = v121 | 0x80;
                  unint64_t v122 = v121 >> 7;
                  ++v5;
                  unint64_t v123 = v121 >> 14;
                  v121 >>= 7;
                }
                while (v123);
                *(v5 - 1) = v122;
              }
              else
              {
                v117[1] = v121;
                int v5 = v117 + 2;
              }
            }
            else
            {
              *unint64_t v117 = v116;
              int v5 = v117 + 1;
            }
            ++v112;
            char v111 = *(_DWORD **)a1;
          }
          while (v112 < **(_DWORD **)a1);
        }
        return v5;
      case 4:
        int v124 = *(_DWORD **)a1;
        if (**(int **)a1 >= 1)
        {
          int v125 = 0;
          unsigned int v126 = 8 * a2;
          char v127 = (8 * a2) | 0x80;
          unsigned int v128 = (a2 >> 4) & 0x1FFFFFF;
          do
          {
            if (*a4 <= (unint64_t)v5)
            {
              int v5 = sub_1B4BE5708((uint64_t)a4, v5);
              int v124 = *(_DWORD **)a1;
            }
            unint64_t v129 = *(void *)sub_1B4BF7B7C(v124, v125);
            if (v126 > 0x7F)
            {
              char *v5 = v127;
              if (v126 >= 0x4000)
              {
                int v130 = v5 + 2;
                unsigned int v131 = v128;
                do
                {
                  *(v130 - 1) = v131 | 0x80;
                  unsigned int v132 = v131 >> 7;
                  ++v130;
                  unsigned int v133 = v131 >> 14;
                  v131 >>= 7;
                }
                while (v133);
                *(v130 - 1) = v132;
              }
              else
              {
                v5[1] = v126 >> 7;
                int v130 = v5 + 2;
              }
            }
            else
            {
              int v130 = v5 + 1;
              char *v5 = v126;
            }
            if (v129 > 0x7F)
            {
              unsigned char *v130 = v129 | 0x80;
              unint64_t v134 = v129 >> 7;
              if (v129 >> 14)
              {
                int v5 = v130 + 2;
                do
                {
                  *(v5 - 1) = v134 | 0x80;
                  unint64_t v135 = v134 >> 7;
                  ++v5;
                  unint64_t v136 = v134 >> 14;
                  v134 >>= 7;
                }
                while (v136);
                *(v5 - 1) = v135;
              }
              else
              {
                v130[1] = v134;
                int v5 = v130 + 2;
              }
            }
            else
            {
              unsigned char *v130 = v129;
              int v5 = v130 + 1;
            }
            ++v125;
            int v124 = *(_DWORD **)a1;
          }
          while (v125 < **(_DWORD **)a1);
        }
        return v5;
      case 5:
        v137 = *(_DWORD **)a1;
        if (**(int **)a1 >= 1)
        {
          int v138 = 0;
          unsigned int v139 = 8 * a2;
          char v140 = (8 * a2) | 0x80;
          unsigned int v141 = (a2 >> 4) & 0x1FFFFFF;
          do
          {
            if (*a4 <= (unint64_t)v5)
            {
              int v5 = sub_1B4BE5708((uint64_t)a4, v5);
              v137 = *(_DWORD **)a1;
            }
            unint64_t v142 = *(int *)sub_1B4BF6868(v137, v138);
            if (v139 > 0x7F)
            {
              char *v5 = v140;
              if (v139 >= 0x4000)
              {
                int v143 = v5 + 2;
                unsigned int v144 = v141;
                do
                {
                  *(v143 - 1) = v144 | 0x80;
                  unsigned int v145 = v144 >> 7;
                  ++v143;
                  unsigned int v146 = v144 >> 14;
                  v144 >>= 7;
                }
                while (v146);
                *(v143 - 1) = v145;
              }
              else
              {
                v5[1] = v139 >> 7;
                int v143 = v5 + 2;
              }
            }
            else
            {
              int v143 = v5 + 1;
              char *v5 = v139;
            }
            if (v142 > 0x7F)
            {
              *int v143 = v142 | 0x80;
              unint64_t v147 = v142 >> 7;
              if (v142 >> 14)
              {
                int v5 = v143 + 2;
                do
                {
                  *(v5 - 1) = v147 | 0x80;
                  unint64_t v148 = v147 >> 7;
                  ++v5;
                  unint64_t v149 = v147 >> 14;
                  v147 >>= 7;
                }
                while (v149);
                *(v5 - 1) = v148;
              }
              else
              {
                v143[1] = v147;
                int v5 = v143 + 2;
              }
            }
            else
            {
              *int v143 = v142;
              int v5 = v143 + 1;
            }
            ++v138;
            v137 = *(_DWORD **)a1;
          }
          while (v138 < **(_DWORD **)a1);
        }
        return v5;
      case 6:
        int v150 = *(_DWORD **)a1;
        if (**(int **)a1 >= 1)
        {
          int v151 = 0;
          unsigned int v152 = 8 * a2;
          unsigned int v153 = (8 * a2) | 1;
          char v154 = (8 * a2) | 0x81;
          unsigned int v155 = (a2 >> 4) & 0x1FFFFFF;
          unsigned int v156 = v152 >> 7;
          do
          {
            if (*a4 <= (unint64_t)v5)
            {
              int v5 = sub_1B4BE5708((uint64_t)a4, v5);
              int v150 = *(_DWORD **)a1;
            }
            uint64_t v157 = *(void *)sub_1B4BF7B7C(v150, v151);
            if (v153 > 0x7F)
            {
              char *v5 = v154;
              if (v153 >= 0x4000)
              {
                int v158 = v5 + 2;
                unsigned int v159 = v155;
                do
                {
                  *((unsigned char *)v158 - 1) = v159 | 0x80;
                  unsigned int v160 = v159 >> 7;
                  int v158 = (void *)((char *)v158 + 1);
                  unsigned int v161 = v159 >> 14;
                  v159 >>= 7;
                }
                while (v161);
                *((unsigned char *)v158 - 1) = v160;
              }
              else
              {
                v5[1] = v156;
                int v158 = v5 + 2;
              }
            }
            else
            {
              char *v5 = v153;
              int v158 = v5 + 1;
            }
            *int v158 = v157;
            int v5 = (char *)(v158 + 1);
            ++v151;
            int v150 = *(_DWORD **)a1;
          }
          while (v151 < **(_DWORD **)a1);
        }
        return v5;
      case 7:
        int v162 = *(_DWORD **)a1;
        if (**(int **)a1 >= 1)
        {
          int v163 = 0;
          unsigned int v164 = (8 * a2) | 5;
          unsigned int v165 = (a2 >> 4) & 0x1FFFFFF;
          unsigned int v166 = (8 * a2) >> 7;
          char v167 = (8 * a2) | 0x85;
          do
          {
            if (*a4 <= (unint64_t)v5)
            {
              int v5 = sub_1B4BE5708((uint64_t)a4, v5);
              int v162 = *(_DWORD **)a1;
            }
            int v168 = *(_DWORD *)sub_1B4BF6EC4(v162, v163);
            if (v164 > 0x7F)
            {
              char *v5 = v167;
              if (v164 >= 0x4000)
              {
                uint64_t v169 = v5 + 2;
                unsigned int v170 = v165;
                do
                {
                  *((unsigned char *)v169 - 1) = v170 | 0x80;
                  unsigned int v171 = v170 >> 7;
                  uint64_t v169 = (_DWORD *)((char *)v169 + 1);
                  unsigned int v172 = v170 >> 14;
                  v170 >>= 7;
                }
                while (v172);
                *((unsigned char *)v169 - 1) = v171;
              }
              else
              {
                v5[1] = v166;
                uint64_t v169 = v5 + 2;
              }
            }
            else
            {
              char *v5 = v164;
              uint64_t v169 = v5 + 1;
            }
            *uint64_t v169 = v168;
            int v5 = (char *)(v169 + 1);
            ++v163;
            int v162 = *(_DWORD **)a1;
          }
          while (v163 < **(_DWORD **)a1);
        }
        return v5;
      case 8:
        uint64_t v173 = *(_DWORD **)a1;
        if (**(int **)a1 >= 1)
        {
          int v174 = 0;
          unsigned int v175 = 8 * a2;
          char v176 = (8 * a2) | 0x80;
          unsigned int v177 = (a2 >> 4) & 0x1FFFFFF;
          do
          {
            if (*a4 <= (unint64_t)v5)
            {
              int v5 = sub_1B4BE5708((uint64_t)a4, v5);
              uint64_t v173 = *(_DWORD **)a1;
            }
            char v178 = *(unsigned char *)sub_1B4BF6210(v173, v174);
            if (v175 > 0x7F)
            {
              char *v5 = v176;
              if (v175 >= 0x4000)
              {
                int v179 = v5 + 2;
                unsigned int v180 = v177;
                do
                {
                  *(v179 - 1) = v180 | 0x80;
                  unsigned int v181 = v180 >> 7;
                  ++v179;
                  unsigned int v182 = v180 >> 14;
                  v180 >>= 7;
                }
                while (v182);
                *(v179 - 1) = v181;
              }
              else
              {
                v5[1] = v175 >> 7;
                int v179 = v5 + 2;
              }
            }
            else
            {
              char *v5 = v175;
              int v179 = v5 + 1;
            }
            *int v179 = v178;
            int v5 = v179 + 1;
            ++v174;
            uint64_t v173 = *(_DWORD **)a1;
          }
          while (v174 < **(_DWORD **)a1);
        }
        return v5;
      case 9:
        uint64_t v183 = *(void *)a1;
        if (*(int *)(*(void *)a1 + 8) < 1) {
          return v5;
        }
        int v184 = 0;
        unsigned int v185 = 8 * a2;
        uint64_t v186 = 4;
        if (((a2 >> 25) & 0xF) != 0) {
          uint64_t v186 = 5;
        }
        unsigned int v187 = (8 * a2) | 2;
        uint64_t v188 = 1;
        if (v185 >= 0x80) {
          uint64_t v188 = 2;
        }
        if (v185 < 0x200000) {
          uint64_t v186 = 3;
        }
        if (v185 >= 0x4000) {
          uint64_t v189 = v186;
        }
        else {
          uint64_t v189 = v188;
        }
        unsigned int v429 = v185 >> 7;
        while (1)
        {
          if (*a4 <= (unint64_t)v5)
          {
            int v5 = sub_1B4BE5708((uint64_t)a4, v5);
            uint64_t v183 = *(void *)a1;
          }
          uint64_t v190 = sub_1B4BE0734(v183, v184);
          if (*(char *)(v190 + 23) < 0)
          {
            int64_t v191 = *(void *)(v190 + 8);
            if (v191 > 127) {
              goto LABEL_326;
            }
          }
          else
          {
            int64_t v191 = *(unsigned __int8 *)(v190 + 23);
          }
          if ((uint64_t)(*a4 + ~(unint64_t)&v5[v189] + 16) >= v191)
          {
            if (v187 > 0x7F)
            {
              char *v5 = (8 * a2) | 0x82;
              if (v187 >= 0x4000)
              {
                v192 = v5 + 2;
                unsigned int v193 = (a2 >> 4) & 0x1FFFFFF;
                do
                {
                  *(v192 - 1) = v193 | 0x80;
                  unsigned int v194 = v193 >> 7;
                  ++v192;
                  unsigned int v195 = v193 >> 14;
                  v193 >>= 7;
                }
                while (v195);
                *(v192 - 1) = v194;
              }
              else
              {
                v5[1] = v429;
                v192 = v5 + 2;
              }
            }
            else
            {
              v192 = v5 + 1;
              char *v5 = v187;
            }
            unsigned char *v192 = v191;
            v196 = v192 + 1;
            if (*(char *)(v190 + 23) >= 0) {
              v197 = (const void *)v190;
            }
            else {
              v197 = *(const void **)v190;
            }
            memcpy(v196, v197, v191);
            int v5 = &v196[v191];
            goto LABEL_324;
          }
LABEL_326:
          int v5 = sub_1B4BE5C78(a4, a2, v190, v5);
LABEL_324:
          ++v184;
          uint64_t v183 = *(void *)a1;
          if (v184 >= *(_DWORD *)(*(void *)a1 + 8)) {
            return v5;
          }
        }
      case 10:
        uint64_t v198 = *(void *)a1;
        if (*(int *)(*(void *)a1 + 8) >= 1)
        {
          int v199 = 0;
          unsigned int v200 = (8 * a2) | 3;
          char v201 = (8 * a2) | 0x83;
          unsigned int v202 = (a2 >> 4) & 0x1FFFFFF;
          unsigned int v203 = (8 * a2) | 4;
          unsigned int v204 = (8 * a2) >> 7;
          char v205 = (8 * a2) | 0x84;
          do
          {
            if (*a4 <= (unint64_t)v5)
            {
              int v5 = sub_1B4BE5708((uint64_t)a4, v5);
              uint64_t v198 = *(void *)a1;
            }
            uint64_t v206 = sub_1B4BF0B94(v198, v199);
            if (v200 > 0x7F)
            {
              char *v5 = v201;
              if (v200 >= 0x4000)
              {
                v207 = v5 + 2;
                unsigned int v208 = v202;
                do
                {
                  *(v207 - 1) = v208 | 0x80;
                  unsigned int v209 = v208 >> 7;
                  ++v207;
                  unsigned int v210 = v208 >> 14;
                  v208 >>= 7;
                }
                while (v210);
                *(v207 - 1) = v209;
              }
              else
              {
                v5[1] = v204;
                v207 = v5 + 2;
              }
            }
            else
            {
              v207 = v5 + 1;
              char *v5 = v200;
            }
            v211 = (char *)(*(uint64_t (**)(uint64_t, char *, uint64_t *))(*(void *)v206 + 96))(v206, v207, a4);
            if (*a4 <= (unint64_t)v211) {
              v211 = sub_1B4BE5708((uint64_t)a4, v211);
            }
            if (v203 > 0x7F)
            {
              char *v211 = v205;
              if (v203 >= 0x4000)
              {
                int v5 = v211 + 2;
                unsigned int v212 = v202;
                do
                {
                  *(v5 - 1) = v212 | 0x80;
                  unsigned int v213 = v212 >> 7;
                  ++v5;
                  unsigned int v214 = v212 >> 14;
                  v212 >>= 7;
                }
                while (v214);
                *(v5 - 1) = v213;
              }
              else
              {
                v211[1] = v204;
                int v5 = v211 + 2;
              }
            }
            else
            {
              int v5 = v211 + 1;
              char *v211 = v203;
            }
            ++v199;
            uint64_t v198 = *(void *)a1;
          }
          while (v199 < *(_DWORD *)(*(void *)a1 + 8));
        }
        return v5;
      case 11:
        uint64_t v215 = *(void *)a1;
        if (*(int *)(*(void *)a1 + 8) >= 1)
        {
          int v216 = 0;
          unsigned int v217 = (8 * a2) | 2;
          unsigned int v218 = (a2 >> 4) & 0x1FFFFFF;
          unsigned int v219 = (8 * a2) >> 7;
          char v220 = (8 * a2) | 0x82;
          do
          {
            if (*a4 <= (unint64_t)v5)
            {
              int v5 = sub_1B4BE5708((uint64_t)a4, v5);
              uint64_t v215 = *(void *)a1;
            }
            uint64_t v221 = sub_1B4BF0B94(v215, v216);
            uint64_t v222 = v221;
            if (v217 > 0x7F)
            {
              char *v5 = v220;
              if (v217 >= 0x4000)
              {
                v223 = v5 + 2;
                unsigned int v224 = v218;
                do
                {
                  *(v223 - 1) = v224 | 0x80;
                  unsigned int v225 = v224 >> 7;
                  ++v223;
                  unsigned int v226 = v224 >> 14;
                  v224 >>= 7;
                }
                while (v226);
                *(v223 - 1) = v225;
              }
              else
              {
                v5[1] = v219;
                v223 = v5 + 2;
              }
            }
            else
            {
              v223 = v5 + 1;
              char *v5 = v217;
            }
            unsigned int v227 = (*(uint64_t (**)(uint64_t))(*(void *)v221 + 80))(v221);
            if (v227 > 0x7F)
            {
              unsigned char *v223 = v227 | 0x80;
              unsigned int v229 = v227 >> 7;
              if (v227 >> 14)
              {
                v228 = v223 + 2;
                do
                {
                  *(v228 - 1) = v229 | 0x80;
                  unsigned int v230 = v229 >> 7;
                  ++v228;
                  unsigned int v231 = v229 >> 14;
                  v229 >>= 7;
                }
                while (v231);
                *(v228 - 1) = v230;
              }
              else
              {
                v223[1] = v229;
                v228 = v223 + 2;
              }
            }
            else
            {
              unsigned char *v223 = v227;
              v228 = v223 + 1;
            }
            int v5 = (char *)(*(uint64_t (**)(uint64_t, unsigned char *, uint64_t *))(*(void *)v222 + 96))(v222, v228, a4);
            ++v216;
            uint64_t v215 = *(void *)a1;
          }
          while (v216 < *(_DWORD *)(*(void *)a1 + 8));
        }
        return v5;
      case 12:
        uint64_t v232 = *(void *)a1;
        if (*(int *)(*(void *)a1 + 8) < 1) {
          return v5;
        }
        int v233 = 0;
        unsigned int v234 = 8 * a2;
        uint64_t v235 = 4;
        if (((a2 >> 25) & 0xF) != 0) {
          uint64_t v235 = 5;
        }
        unsigned int v236 = (8 * a2) | 2;
        uint64_t v237 = 1;
        if (v234 >= 0x80) {
          uint64_t v237 = 2;
        }
        if (v234 < 0x200000) {
          uint64_t v235 = 3;
        }
        if (v234 >= 0x4000) {
          uint64_t v238 = v235;
        }
        else {
          uint64_t v238 = v237;
        }
        unsigned int v430 = v234 >> 7;
        break;
      case 13:
        v247 = *(_DWORD **)a1;
        if (**(int **)a1 >= 1)
        {
          int v248 = 0;
          unsigned int v249 = 8 * a2;
          char v250 = (8 * a2) | 0x80;
          unsigned int v251 = (a2 >> 4) & 0x1FFFFFF;
          do
          {
            if (*a4 <= (unint64_t)v5)
            {
              int v5 = sub_1B4BE5708((uint64_t)a4, v5);
              v247 = *(_DWORD **)a1;
            }
            unsigned int v252 = *(_DWORD *)sub_1B4BF6EC4(v247, v248);
            if (v249 > 0x7F)
            {
              char *v5 = v250;
              if (v249 >= 0x4000)
              {
                v253 = v5 + 2;
                unsigned int v254 = v251;
                do
                {
                  *(v253 - 1) = v254 | 0x80;
                  unsigned int v255 = v254 >> 7;
                  ++v253;
                  unsigned int v256 = v254 >> 14;
                  v254 >>= 7;
                }
                while (v256);
                *(v253 - 1) = v255;
              }
              else
              {
                v5[1] = v249 >> 7;
                v253 = v5 + 2;
              }
            }
            else
            {
              v253 = v5 + 1;
              char *v5 = v249;
            }
            if (v252 > 0x7F)
            {
              unsigned char *v253 = v252 | 0x80;
              unsigned int v257 = v252 >> 7;
              if (v252 >> 14)
              {
                int v5 = v253 + 2;
                do
                {
                  *(v5 - 1) = v257 | 0x80;
                  unsigned int v258 = v257 >> 7;
                  ++v5;
                  unsigned int v259 = v257 >> 14;
                  v257 >>= 7;
                }
                while (v259);
                *(v5 - 1) = v258;
              }
              else
              {
                v253[1] = v257;
                int v5 = v253 + 2;
              }
            }
            else
            {
              unsigned char *v253 = v252;
              int v5 = v253 + 1;
            }
            ++v248;
            v247 = *(_DWORD **)a1;
          }
          while (v248 < **(_DWORD **)a1);
        }
        return v5;
      case 14:
        v260 = *(_DWORD **)a1;
        if (**(int **)a1 >= 1)
        {
          int v261 = 0;
          unsigned int v262 = 8 * a2;
          char v263 = (8 * a2) | 0x80;
          unsigned int v264 = (a2 >> 4) & 0x1FFFFFF;
          do
          {
            if (*a4 <= (unint64_t)v5)
            {
              int v5 = sub_1B4BE5708((uint64_t)a4, v5);
              v260 = *(_DWORD **)a1;
            }
            unint64_t v265 = *(int *)sub_1B4BF6868(v260, v261);
            if (v262 > 0x7F)
            {
              char *v5 = v263;
              if (v262 >= 0x4000)
              {
                v266 = v5 + 2;
                unsigned int v267 = v264;
                do
                {
                  *(v266 - 1) = v267 | 0x80;
                  unsigned int v268 = v267 >> 7;
                  ++v266;
                  unsigned int v269 = v267 >> 14;
                  v267 >>= 7;
                }
                while (v269);
                *(v266 - 1) = v268;
              }
              else
              {
                v5[1] = v262 >> 7;
                v266 = v5 + 2;
              }
            }
            else
            {
              v266 = v5 + 1;
              char *v5 = v262;
            }
            if (v265 > 0x7F)
            {
              unsigned char *v266 = v265 | 0x80;
              unint64_t v270 = v265 >> 7;
              if (v265 >> 14)
              {
                int v5 = v266 + 2;
                do
                {
                  *(v5 - 1) = v270 | 0x80;
                  unint64_t v271 = v270 >> 7;
                  ++v5;
                  unint64_t v272 = v270 >> 14;
                  v270 >>= 7;
                }
                while (v272);
                *(v5 - 1) = v271;
              }
              else
              {
                v266[1] = v270;
                int v5 = v266 + 2;
              }
            }
            else
            {
              unsigned char *v266 = v265;
              int v5 = v266 + 1;
            }
            ++v261;
            v260 = *(_DWORD **)a1;
          }
          while (v261 < **(_DWORD **)a1);
        }
        return v5;
      case 15:
        v273 = *(_DWORD **)a1;
        if (**(int **)a1 >= 1)
        {
          int v274 = 0;
          unsigned int v275 = (8 * a2) | 5;
          unsigned int v276 = (a2 >> 4) & 0x1FFFFFF;
          unsigned int v277 = (8 * a2) >> 7;
          char v278 = (8 * a2) | 0x85;
          do
          {
            if (*a4 <= (unint64_t)v5)
            {
              int v5 = sub_1B4BE5708((uint64_t)a4, v5);
              v273 = *(_DWORD **)a1;
            }
            int v279 = *(_DWORD *)sub_1B4BF6868(v273, v274);
            if (v275 > 0x7F)
            {
              char *v5 = v278;
              if (v275 >= 0x4000)
              {
                v280 = v5 + 2;
                unsigned int v281 = v276;
                do
                {
                  *((unsigned char *)v280 - 1) = v281 | 0x80;
                  unsigned int v282 = v281 >> 7;
                  v280 = (_DWORD *)((char *)v280 + 1);
                  unsigned int v283 = v281 >> 14;
                  v281 >>= 7;
                }
                while (v283);
                *((unsigned char *)v280 - 1) = v282;
              }
              else
              {
                v5[1] = v277;
                v280 = v5 + 2;
              }
            }
            else
            {
              char *v5 = v275;
              v280 = v5 + 1;
            }
            _DWORD *v280 = v279;
            int v5 = (char *)(v280 + 1);
            ++v274;
            v273 = *(_DWORD **)a1;
          }
          while (v274 < **(_DWORD **)a1);
        }
        return v5;
      case 16:
        v284 = *(_DWORD **)a1;
        if (**(int **)a1 >= 1)
        {
          int v285 = 0;
          unsigned int v286 = 8 * a2;
          unsigned int v287 = (8 * a2) | 1;
          char v288 = (8 * a2) | 0x81;
          unsigned int v289 = (a2 >> 4) & 0x1FFFFFF;
          unsigned int v290 = v286 >> 7;
          do
          {
            if (*a4 <= (unint64_t)v5)
            {
              int v5 = sub_1B4BE5708((uint64_t)a4, v5);
              v284 = *(_DWORD **)a1;
            }
            uint64_t v291 = *(void *)sub_1B4BF7520(v284, v285);
            if (v287 > 0x7F)
            {
              char *v5 = v288;
              if (v287 >= 0x4000)
              {
                v292 = v5 + 2;
                unsigned int v293 = v289;
                do
                {
                  *((unsigned char *)v292 - 1) = v293 | 0x80;
                  unsigned int v294 = v293 >> 7;
                  v292 = (void *)((char *)v292 + 1);
                  unsigned int v295 = v293 >> 14;
                  v293 >>= 7;
                }
                while (v295);
                *((unsigned char *)v292 - 1) = v294;
              }
              else
              {
                v5[1] = v290;
                v292 = v5 + 2;
              }
            }
            else
            {
              char *v5 = v287;
              v292 = v5 + 1;
            }
            void *v292 = v291;
            int v5 = (char *)(v292 + 1);
            ++v285;
            v284 = *(_DWORD **)a1;
          }
          while (v285 < **(_DWORD **)a1);
        }
        return v5;
      case 17:
        v296 = *(_DWORD **)a1;
        if (**(int **)a1 >= 1)
        {
          int v297 = 0;
          unsigned int v298 = 8 * a2;
          char v299 = (8 * a2) | 0x80;
          unsigned int v300 = (a2 >> 4) & 0x1FFFFFF;
          do
          {
            if (*a4 <= (unint64_t)v5)
            {
              int v5 = sub_1B4BE5708((uint64_t)a4, v5);
              v296 = *(_DWORD **)a1;
            }
            int v301 = *(_DWORD *)sub_1B4BF6868(v296, v297);
            if (v298 > 0x7F)
            {
              char *v5 = v299;
              if (v298 >= 0x4000)
              {
                v302 = v5 + 2;
                unsigned int v303 = v300;
                do
                {
                  *(v302 - 1) = v303 | 0x80;
                  unsigned int v304 = v303 >> 7;
                  ++v302;
                  unsigned int v305 = v303 >> 14;
                  v303 >>= 7;
                }
                while (v305);
                *(v302 - 1) = v304;
              }
              else
              {
                v5[1] = v298 >> 7;
                v302 = v5 + 2;
              }
            }
            else
            {
              v302 = v5 + 1;
              char *v5 = v298;
            }
            unsigned int v306 = (2 * v301) ^ (v301 >> 31);
            if (v306 > 0x7F)
            {
              unsigned char *v302 = v306 | 0x80;
              unsigned int v307 = v306 >> 7;
              if (v306 >> 14)
              {
                int v5 = v302 + 2;
                do
                {
                  *(v5 - 1) = v307 | 0x80;
                  unsigned int v308 = v307 >> 7;
                  ++v5;
                  unsigned int v309 = v307 >> 14;
                  v307 >>= 7;
                }
                while (v309);
                *(v5 - 1) = v308;
              }
              else
              {
                v302[1] = v307;
                int v5 = v302 + 2;
              }
            }
            else
            {
              unsigned char *v302 = v306;
              int v5 = v302 + 1;
            }
            ++v297;
            v296 = *(_DWORD **)a1;
          }
          while (v297 < **(_DWORD **)a1);
        }
        return v5;
      case 18:
        v310 = *(_DWORD **)a1;
        if (**(int **)a1 >= 1)
        {
          int v311 = 0;
          unsigned int v312 = 8 * a2;
          char v313 = (8 * a2) | 0x80;
          unsigned int v314 = (a2 >> 4) & 0x1FFFFFF;
          do
          {
            if (*a4 <= (unint64_t)v5)
            {
              int v5 = sub_1B4BE5708((uint64_t)a4, v5);
              v310 = *(_DWORD **)a1;
            }
            uint64_t v315 = *(void *)sub_1B4BF7520(v310, v311);
            if (v312 > 0x7F)
            {
              char *v5 = v313;
              if (v312 >= 0x4000)
              {
                v316 = v5 + 2;
                unsigned int v317 = v314;
                do
                {
                  *(v316 - 1) = v317 | 0x80;
                  unsigned int v318 = v317 >> 7;
                  ++v316;
                  unsigned int v319 = v317 >> 14;
                  v317 >>= 7;
                }
                while (v319);
                *(v316 - 1) = v318;
              }
              else
              {
                v5[1] = v312 >> 7;
                v316 = v5 + 2;
              }
            }
            else
            {
              v316 = v5 + 1;
              char *v5 = v312;
            }
            unint64_t v320 = (2 * v315) ^ (v315 >> 63);
            if (v320 > 0x7F)
            {
              unsigned char *v316 = v320 | 0x80;
              unint64_t v321 = v320 >> 7;
              if (v320 >> 14)
              {
                int v5 = v316 + 2;
                do
                {
                  *(v5 - 1) = v321 | 0x80;
                  unint64_t v322 = v321 >> 7;
                  ++v5;
                  unint64_t v323 = v321 >> 14;
                  v321 >>= 7;
                }
                while (v323);
                *(v5 - 1) = v322;
              }
              else
              {
                v316[1] = v321;
                int v5 = v316 + 2;
              }
            }
            else
            {
              unsigned char *v316 = v320;
              int v5 = v316 + 1;
            }
            ++v311;
            v310 = *(_DWORD **)a1;
          }
          while (v311 < **(_DWORD **)a1);
        }
        return v5;
      default:
        return v5;
    }
    while (1)
    {
      if (*a4 <= (unint64_t)v5)
      {
        int v5 = sub_1B4BE5708((uint64_t)a4, v5);
        uint64_t v232 = *(void *)a1;
      }
      uint64_t v239 = sub_1B4BE0734(v232, v233);
      if (*(char *)(v239 + 23) < 0)
      {
        int64_t v240 = *(void *)(v239 + 8);
        if (v240 > 127) {
          goto LABEL_399;
        }
      }
      else
      {
        int64_t v240 = *(unsigned __int8 *)(v239 + 23);
      }
      if ((uint64_t)(*a4 + ~(unint64_t)&v5[v238] + 16) >= v240)
      {
        if (v236 > 0x7F)
        {
          char *v5 = (8 * a2) | 0x82;
          if (v236 >= 0x4000)
          {
            v241 = v5 + 2;
            unsigned int v242 = (a2 >> 4) & 0x1FFFFFF;
            do
            {
              *(v241 - 1) = v242 | 0x80;
              unsigned int v243 = v242 >> 7;
              ++v241;
              unsigned int v244 = v242 >> 14;
              v242 >>= 7;
            }
            while (v244);
            *(v241 - 1) = v243;
          }
          else
          {
            v5[1] = v430;
            v241 = v5 + 2;
          }
        }
        else
        {
          v241 = v5 + 1;
          char *v5 = v236;
        }
        unsigned char *v241 = v240;
        v245 = v241 + 1;
        if (*(char *)(v239 + 23) >= 0) {
          v246 = (const void *)v239;
        }
        else {
          v246 = *(const void **)v239;
        }
        memcpy(v245, v246, v240);
        int v5 = &v245[v240];
        goto LABEL_397;
      }
LABEL_399:
      int v5 = sub_1B4BE5C78(a4, a2, v239, v5);
LABEL_397:
      ++v233;
      uint64_t v232 = *(void *)a1;
      if (v233 >= *(_DWORD *)(*(void *)a1 + 8)) {
        return v5;
      }
    }
  }
  if (a1[10]) {
    return v5;
  }
  int v10 = a1[8];
  if ((v10 - 19) <= 0xFFFFFFED)
  {
    sub_1B4BE6194((uint64_t)v432, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
    uint64_t v11 = sub_1B4BE61AC(v432, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
    sub_1B4BE62E8((uint64_t)&v431, (const char **)&v11->__r_.__value_.__l.__data_);
    sub_1B4BE62F0((uint64_t)v432);
  }
  switch(v10)
  {
    case 1:
      if (*a4 <= (unint64_t)v5) {
        int v5 = sub_1B4BE5708((uint64_t)a4, v5);
      }
      uint64_t v12 = *(void *)a1;
      unsigned int v13 = (8 * a2) | 1;
      if (v13 <= 0x7F) {
        goto LABEL_575;
      }
      char *v5 = (8 * a2) | 0x81;
      unsigned int v14 = (8 * a2) >> 7;
      if (!(v13 >> 14)) {
        goto LABEL_602;
      }
      uint64_t v15 = v5 + 2;
      do
      {
        *((unsigned char *)v15 - 1) = v14 | 0x80;
        unsigned int v16 = v14 >> 7;
        uint64_t v15 = (void *)((char *)v15 + 1);
        unsigned int v17 = v14 >> 14;
        v14 >>= 7;
      }
      while (v17);
      goto LABEL_693;
    case 2:
      if (*a4 <= (unint64_t)v5) {
        int v5 = sub_1B4BE5708((uint64_t)a4, v5);
      }
      int v324 = *(_DWORD *)a1;
      unsigned int v325 = (8 * a2) | 5;
      if (v325 <= 0x7F) {
        goto LABEL_571;
      }
      char *v5 = (8 * a2) | 0x85;
      unsigned int v326 = (8 * a2) >> 7;
      if (!(v325 >> 14)) {
        goto LABEL_600;
      }
      v327 = v5 + 2;
      do
      {
        *((unsigned char *)v327 - 1) = v326 | 0x80;
        unsigned int v328 = v326 >> 7;
        v327 = (_DWORD *)((char *)v327 + 1);
        unsigned int v329 = v326 >> 14;
        v326 >>= 7;
      }
      while (v329);
      goto LABEL_689;
    case 3:
      if (*a4 <= (unint64_t)v5) {
        int v5 = sub_1B4BE5708((uint64_t)a4, v5);
      }
      unint64_t v330 = *(void *)a1;
      unsigned int v331 = 8 * a2;
      if ((8 * a2) > 0x7F)
      {
        char *v5 = v331 | 0x80;
        unsigned int v355 = v331 >> 7;
        if (v331 >> 14)
        {
          v332 = v5 + 2;
          do
          {
            *(v332 - 1) = v355 | 0x80;
            unsigned int v380 = v355 >> 7;
            ++v332;
            unsigned int v381 = v355 >> 14;
            v355 >>= 7;
          }
          while (v381);
          *(v332 - 1) = v380;
        }
        else
        {
          v5[1] = v355;
          v332 = v5 + 2;
        }
      }
      else
      {
        char *v5 = v331;
        v332 = v5 + 1;
      }
      if (v330 <= 0x7F) {
        goto LABEL_684;
      }
      char *v332 = v330 | 0x80;
      unint64_t v382 = v330 >> 7;
      if (!(v330 >> 14)) {
        goto LABEL_686;
      }
      int v5 = v332 + 2;
      do
      {
        *(v5 - 1) = v382 | 0x80;
        unint64_t v383 = v382 >> 7;
        ++v5;
        unint64_t v384 = v382 >> 14;
        v382 >>= 7;
      }
      while (v384);
      goto LABEL_718;
    case 4:
      if (*a4 <= (unint64_t)v5) {
        int v5 = sub_1B4BE5708((uint64_t)a4, v5);
      }
      unint64_t v330 = *(void *)a1;
      unsigned int v333 = 8 * a2;
      if ((8 * a2) > 0x7F)
      {
        char *v5 = v333 | 0x80;
        unsigned int v356 = v333 >> 7;
        if (v333 >> 14)
        {
          v332 = v5 + 2;
          do
          {
            *(v332 - 1) = v356 | 0x80;
            unsigned int v385 = v356 >> 7;
            ++v332;
            unsigned int v386 = v356 >> 14;
            v356 >>= 7;
          }
          while (v386);
          *(v332 - 1) = v385;
        }
        else
        {
          v5[1] = v356;
          v332 = v5 + 2;
        }
      }
      else
      {
        char *v5 = v333;
        v332 = v5 + 1;
      }
      if (v330 <= 0x7F) {
        goto LABEL_684;
      }
      char *v332 = v330 | 0x80;
      unint64_t v382 = v330 >> 7;
      if (!(v330 >> 14)) {
        goto LABEL_686;
      }
      int v5 = v332 + 2;
      do
      {
        *(v5 - 1) = v382 | 0x80;
        unint64_t v383 = v382 >> 7;
        ++v5;
        unint64_t v387 = v382 >> 14;
        v382 >>= 7;
      }
      while (v387);
      goto LABEL_718;
    case 5:
      if (*a4 <= (unint64_t)v5) {
        int v5 = sub_1B4BE5708((uint64_t)a4, v5);
      }
      unint64_t v330 = *(int *)a1;
      unsigned int v334 = 8 * a2;
      if ((8 * a2) > 0x7F)
      {
        char *v5 = v334 | 0x80;
        unsigned int v357 = v334 >> 7;
        if (v334 >> 14)
        {
          v332 = v5 + 2;
          do
          {
            *(v332 - 1) = v357 | 0x80;
            unsigned int v388 = v357 >> 7;
            ++v332;
            unsigned int v389 = v357 >> 14;
            v357 >>= 7;
          }
          while (v389);
          *(v332 - 1) = v388;
        }
        else
        {
          v5[1] = v357;
          v332 = v5 + 2;
        }
      }
      else
      {
        char *v5 = v334;
        v332 = v5 + 1;
      }
      if (v330 <= 0x7F) {
        goto LABEL_684;
      }
      char *v332 = v330 | 0x80;
      unint64_t v382 = v330 >> 7;
      if (!(v330 >> 14)) {
        goto LABEL_686;
      }
      int v5 = v332 + 2;
      do
      {
        *(v5 - 1) = v382 | 0x80;
        unint64_t v383 = v382 >> 7;
        ++v5;
        unint64_t v390 = v382 >> 14;
        v382 >>= 7;
      }
      while (v390);
      goto LABEL_718;
    case 6:
      if (*a4 <= (unint64_t)v5) {
        int v5 = sub_1B4BE5708((uint64_t)a4, v5);
      }
      uint64_t v12 = *(void *)a1;
      unsigned int v13 = (8 * a2) | 1;
      if (v13 <= 0x7F) {
        goto LABEL_575;
      }
      char *v5 = (8 * a2) | 0x81;
      unsigned int v14 = (8 * a2) >> 7;
      if (!(v13 >> 14)) {
        goto LABEL_602;
      }
      uint64_t v15 = v5 + 2;
      do
      {
        *((unsigned char *)v15 - 1) = v14 | 0x80;
        unsigned int v16 = v14 >> 7;
        uint64_t v15 = (void *)((char *)v15 + 1);
        unsigned int v335 = v14 >> 14;
        v14 >>= 7;
      }
      while (v335);
      goto LABEL_693;
    case 7:
      if (*a4 <= (unint64_t)v5) {
        int v5 = sub_1B4BE5708((uint64_t)a4, v5);
      }
      int v324 = *(_DWORD *)a1;
      unsigned int v325 = (8 * a2) | 5;
      if (v325 <= 0x7F) {
        goto LABEL_571;
      }
      char *v5 = (8 * a2) | 0x85;
      unsigned int v326 = (8 * a2) >> 7;
      if (!(v325 >> 14)) {
        goto LABEL_600;
      }
      v327 = v5 + 2;
      do
      {
        *((unsigned char *)v327 - 1) = v326 | 0x80;
        unsigned int v328 = v326 >> 7;
        v327 = (_DWORD *)((char *)v327 + 1);
        unsigned int v336 = v326 >> 14;
        v326 >>= 7;
      }
      while (v336);
      goto LABEL_689;
    case 8:
      if (*a4 <= (unint64_t)v5) {
        int v5 = sub_1B4BE5708((uint64_t)a4, v5);
      }
      LOBYTE(v337) = *a1;
      unsigned int v338 = 8 * a2;
      if ((8 * a2) > 0x7F)
      {
        char *v5 = v338 | 0x80;
        unsigned int v358 = v338 >> 7;
        if (v338 >> 14)
        {
          v332 = v5 + 2;
          do
          {
            *(v332 - 1) = v358 | 0x80;
            unsigned int v391 = v358 >> 7;
            ++v332;
            unsigned int v392 = v358 >> 14;
            v358 >>= 7;
          }
          while (v392);
          *(v332 - 1) = v391;
        }
        else
        {
          v5[1] = v358;
          v332 = v5 + 2;
        }
      }
      else
      {
        char *v5 = v338;
        v332 = v5 + 1;
      }
      goto LABEL_677;
    case 9:
      if (*a4 <= (unint64_t)v5) {
        int v5 = sub_1B4BE5708((uint64_t)a4, v5);
      }
      v339 = *(void **)a1;
      if (*(char *)(*(void *)a1 + 23) < 0)
      {
        int64_t v340 = v339[1];
        if (v340 > 127) {
          return sub_1B4BE5C78(a4, a2, (uint64_t)v339, v5);
        }
      }
      else
      {
        int64_t v340 = *(unsigned __int8 *)(*(void *)a1 + 23);
      }
      unsigned int v364 = 8 * a2;
      uint64_t v365 = 1;
      uint64_t v366 = 2;
      uint64_t v367 = 3;
      uint64_t v368 = 4;
      if ((8 * a2) >> 28) {
        uint64_t v368 = 5;
      }
      if (v364 >= 0x200000) {
        uint64_t v367 = v368;
      }
      if (v364 >= 0x4000) {
        uint64_t v366 = v367;
      }
      if (v364 >= 0x80) {
        uint64_t v365 = v366;
      }
      if ((uint64_t)(*a4 + ~(unint64_t)&v5[v365] + 16) < v340) {
        return sub_1B4BE5C78(a4, a2, (uint64_t)v339, v5);
      }
      unsigned int v369 = v364 | 2;
      if ((v364 | 2) <= 0x7F) {
        goto LABEL_633;
      }
      char *v5 = v364 | 0x82;
      unsigned int v370 = v364 >> 7;
      if (!(v369 >> 14)) {
        goto LABEL_635;
      }
      v371 = v5 + 2;
      do
      {
        *(v371 - 1) = v370 | 0x80;
        unsigned int v372 = v370 >> 7;
        ++v371;
        unsigned int v373 = v370 >> 14;
        v370 >>= 7;
      }
      while (v373);
      goto LABEL_727;
    case 10:
      if (*a4 <= (unint64_t)v5) {
        int v5 = sub_1B4BE5708((uint64_t)a4, v5);
      }
      uint64_t v341 = *(void *)a1;
      unsigned int v342 = 8 * a2;
      unsigned int v343 = (8 * a2) | 3;
      unsigned int v344 = (8 * a2) >> 7;
      if (v343 > 0x7F)
      {
        char *v5 = (8 * a2) | 0x83;
        if (v343 >> 14)
        {
          v345 = v5 + 2;
          unsigned int v393 = v342 >> 7;
          do
          {
            *(v345 - 1) = v393 | 0x80;
            unsigned int v394 = v393 >> 7;
            ++v345;
            unsigned int v395 = v393 >> 14;
            v393 >>= 7;
          }
          while (v395);
          *(v345 - 1) = v394;
        }
        else
        {
          v5[1] = v344;
          v345 = v5 + 2;
        }
      }
      else
      {
        char *v5 = v343;
        v345 = v5 + 1;
      }
      v332 = (char *)(*(uint64_t (**)(uint64_t, char *, uint64_t *))(*(void *)v341 + 96))(v341, v345, a4);
      if (*a4 <= (unint64_t)v332) {
        v332 = sub_1B4BE5708((uint64_t)a4, v332);
      }
      unsigned int v337 = v342 | 4;
      if ((v342 | 4) <= 0x7F) {
        goto LABEL_677;
      }
      char *v332 = v342 | 0x84;
      if (!(v337 >> 14))
      {
        v332[1] = v344;
        return v332 + 2;
      }
      int v5 = v332 + 2;
      do
      {
        *(v5 - 1) = v344 | 0x80;
        unsigned int v411 = v344 >> 7;
        ++v5;
        unsigned int v412 = v344 >> 14;
        v344 >>= 7;
      }
      while (v412);
      goto LABEL_715;
    case 11:
      if ((a1[10] & 0x10) != 0) {
        return (char *)(*(uint64_t (**)(void, uint64_t, char *, uint64_t *))(**(void **)a1 + 136))(*(void *)a1, a2, v5, a4);
      }
      if (*a4 <= (unint64_t)v5) {
        int v5 = sub_1B4BE5708((uint64_t)a4, v5);
      }
      uint64_t v346 = *(void *)a1;
      unsigned int v347 = (8 * a2) | 2;
      if (v347 > 0x7F)
      {
        char *v5 = (8 * a2) | 0x82;
        unsigned int v379 = (8 * a2) >> 7;
        if (v347 >> 14)
        {
          v348 = v5 + 2;
          do
          {
            *(v348 - 1) = v379 | 0x80;
            unsigned int v421 = v379 >> 7;
            ++v348;
            unsigned int v422 = v379 >> 14;
            v379 >>= 7;
          }
          while (v422);
          *(v348 - 1) = v421;
        }
        else
        {
          v5[1] = v379;
          v348 = v5 + 2;
        }
      }
      else
      {
        char *v5 = v347;
        v348 = v5 + 1;
      }
      unsigned int v423 = (*(uint64_t (**)(uint64_t))(*(void *)v346 + 80))(v346);
      if (v423 > 0x7F)
      {
        unsigned char *v348 = v423 | 0x80;
        unsigned int v425 = v423 >> 7;
        if (v423 >> 14)
        {
          v424 = v348 + 2;
          do
          {
            *(v424 - 1) = v425 | 0x80;
            unsigned int v426 = v425 >> 7;
            ++v424;
            unsigned int v427 = v425 >> 14;
            v425 >>= 7;
          }
          while (v427);
          *(v424 - 1) = v426;
        }
        else
        {
          v348[1] = v425;
          v424 = v348 + 2;
        }
      }
      else
      {
        unsigned char *v348 = v423;
        v424 = v348 + 1;
      }
      return (char *)(*(uint64_t (**)(uint64_t, unsigned char *, uint64_t *))(*(void *)v346 + 96))(v346, v424, a4);
    case 12:
      if (*a4 <= (unint64_t)v5) {
        int v5 = sub_1B4BE5708((uint64_t)a4, v5);
      }
      v339 = *(void **)a1;
      if (*(char *)(*(void *)a1 + 23) < 0)
      {
        int64_t v340 = v339[1];
        if (v340 > 127) {
          return sub_1B4BE5C78(a4, a2, (uint64_t)v339, v5);
        }
      }
      else
      {
        int64_t v340 = *(unsigned __int8 *)(*(void *)a1 + 23);
      }
      unsigned int v374 = 8 * a2;
      uint64_t v375 = 1;
      uint64_t v376 = 2;
      uint64_t v377 = 3;
      uint64_t v378 = 4;
      if ((8 * a2) >> 28) {
        uint64_t v378 = 5;
      }
      if (v374 >= 0x200000) {
        uint64_t v377 = v378;
      }
      if (v374 >= 0x4000) {
        uint64_t v376 = v377;
      }
      if (v374 >= 0x80) {
        uint64_t v375 = v376;
      }
      if ((uint64_t)(*a4 + ~(unint64_t)&v5[v375] + 16) < v340) {
        return sub_1B4BE5C78(a4, a2, (uint64_t)v339, v5);
      }
      unsigned int v369 = v374 | 2;
      if ((v374 | 2) > 0x7F)
      {
        char *v5 = v374 | 0x82;
        unsigned int v370 = v374 >> 7;
        if (v369 >> 14)
        {
          v371 = v5 + 2;
          do
          {
            *(v371 - 1) = v370 | 0x80;
            unsigned int v372 = v370 >> 7;
            ++v371;
            unsigned int v419 = v370 >> 14;
            v370 >>= 7;
          }
          while (v419);
LABEL_727:
          *(v371 - 1) = v372;
        }
        else
        {
LABEL_635:
          v5[1] = v370;
          v371 = v5 + 2;
        }
      }
      else
      {
LABEL_633:
        char *v5 = v369;
        v371 = v5 + 1;
      }
      unsigned char *v371 = v340;
      v420 = v371 + 1;
      if (*((char *)v339 + 23) < 0) {
        v339 = (void *)*v339;
      }
      memcpy(v420, v339, v340);
      return &v420[v340];
    case 13:
      if (*a4 <= (unint64_t)v5) {
        int v5 = sub_1B4BE5708((uint64_t)a4, v5);
      }
      unsigned int v337 = *(_DWORD *)a1;
      unsigned int v349 = 8 * a2;
      if ((8 * a2) > 0x7F)
      {
        char *v5 = v349 | 0x80;
        unsigned int v360 = v349 >> 7;
        if (v349 >> 14)
        {
          v332 = v5 + 2;
          do
          {
            *(v332 - 1) = v360 | 0x80;
            unsigned int v396 = v360 >> 7;
            ++v332;
            unsigned int v397 = v360 >> 14;
            v360 >>= 7;
          }
          while (v397);
          *(v332 - 1) = v396;
        }
        else
        {
          v5[1] = v360;
          v332 = v5 + 2;
        }
      }
      else
      {
        char *v5 = v349;
        v332 = v5 + 1;
      }
      if (v337 <= 0x7F)
      {
LABEL_677:
        char *v332 = v337;
        return v332 + 1;
      }
      char *v332 = v337 | 0x80;
      unsigned int v398 = v337 >> 7;
      if (!(v337 >> 14))
      {
        v332[1] = v398;
        return v332 + 2;
      }
      int v5 = v332 + 2;
      do
      {
        *(v5 - 1) = v398 | 0x80;
        unsigned int v411 = v398 >> 7;
        ++v5;
        unsigned int v413 = v398 >> 14;
        v398 >>= 7;
      }
      while (v413);
LABEL_715:
      *(v5 - 1) = v411;
      return v5;
    case 14:
      if (*a4 <= (unint64_t)v5) {
        int v5 = sub_1B4BE5708((uint64_t)a4, v5);
      }
      unint64_t v330 = *(int *)a1;
      unsigned int v350 = 8 * a2;
      if ((8 * a2) > 0x7F)
      {
        char *v5 = v350 | 0x80;
        unsigned int v361 = v350 >> 7;
        if (v350 >> 14)
        {
          v332 = v5 + 2;
          do
          {
            *(v332 - 1) = v361 | 0x80;
            unsigned int v399 = v361 >> 7;
            ++v332;
            unsigned int v400 = v361 >> 14;
            v361 >>= 7;
          }
          while (v400);
          *(v332 - 1) = v399;
        }
        else
        {
          v5[1] = v361;
          v332 = v5 + 2;
        }
      }
      else
      {
        char *v5 = v350;
        v332 = v5 + 1;
      }
      if (v330 <= 0x7F)
      {
LABEL_684:
        char *v332 = v330;
        return v332 + 1;
      }
      char *v332 = v330 | 0x80;
      unint64_t v382 = v330 >> 7;
      if (!(v330 >> 14))
      {
LABEL_686:
        v332[1] = v382;
        return v332 + 2;
      }
      int v5 = v332 + 2;
      do
      {
        *(v5 - 1) = v382 | 0x80;
        unint64_t v383 = v382 >> 7;
        ++v5;
        unint64_t v414 = v382 >> 14;
        v382 >>= 7;
      }
      while (v414);
LABEL_718:
      *(v5 - 1) = v383;
      return v5;
    case 15:
      if (*a4 <= (unint64_t)v5) {
        int v5 = sub_1B4BE5708((uint64_t)a4, v5);
      }
      int v324 = *(_DWORD *)a1;
      unsigned int v325 = (8 * a2) | 5;
      if (v325 > 0x7F)
      {
        char *v5 = (8 * a2) | 0x85;
        unsigned int v326 = (8 * a2) >> 7;
        if (v325 >> 14)
        {
          v327 = v5 + 2;
          do
          {
            *((unsigned char *)v327 - 1) = v326 | 0x80;
            unsigned int v328 = v326 >> 7;
            v327 = (_DWORD *)((char *)v327 + 1);
            unsigned int v401 = v326 >> 14;
            v326 >>= 7;
          }
          while (v401);
LABEL_689:
          *((unsigned char *)v327 - 1) = v328;
        }
        else
        {
LABEL_600:
          v5[1] = v326;
          v327 = v5 + 2;
        }
      }
      else
      {
LABEL_571:
        char *v5 = v325;
        v327 = v5 + 1;
      }
      _DWORD *v327 = v324;
      return (char *)(v327 + 1);
    case 16:
      if (*a4 <= (unint64_t)v5) {
        int v5 = sub_1B4BE5708((uint64_t)a4, v5);
      }
      uint64_t v12 = *(void *)a1;
      unsigned int v13 = (8 * a2) | 1;
      if (v13 > 0x7F)
      {
        char *v5 = (8 * a2) | 0x81;
        unsigned int v14 = (8 * a2) >> 7;
        if (v13 >> 14)
        {
          uint64_t v15 = v5 + 2;
          do
          {
            *((unsigned char *)v15 - 1) = v14 | 0x80;
            unsigned int v16 = v14 >> 7;
            uint64_t v15 = (void *)((char *)v15 + 1);
            unsigned int v402 = v14 >> 14;
            v14 >>= 7;
          }
          while (v402);
LABEL_693:
          *((unsigned char *)v15 - 1) = v16;
        }
        else
        {
LABEL_602:
          v5[1] = v14;
          uint64_t v15 = v5 + 2;
        }
      }
      else
      {
LABEL_575:
        char *v5 = v13;
        uint64_t v15 = v5 + 1;
      }
      *uint64_t v15 = v12;
      return (char *)(v15 + 1);
    case 17:
      if (*a4 <= (unint64_t)v5) {
        int v5 = sub_1B4BE5708((uint64_t)a4, v5);
      }
      int v351 = *(_DWORD *)a1;
      unsigned int v352 = 8 * a2;
      if ((8 * a2) > 0x7F)
      {
        char *v5 = v352 | 0x80;
        unsigned int v362 = v352 >> 7;
        if (v352 >> 14)
        {
          v332 = v5 + 2;
          do
          {
            *(v332 - 1) = v362 | 0x80;
            unsigned int v403 = v362 >> 7;
            ++v332;
            unsigned int v404 = v362 >> 14;
            v362 >>= 7;
          }
          while (v404);
          *(v332 - 1) = v403;
        }
        else
        {
          v5[1] = v362;
          v332 = v5 + 2;
        }
      }
      else
      {
        char *v5 = v352;
        v332 = v5 + 1;
      }
      unsigned int v405 = (2 * v351) ^ (v351 >> 31);
      if (v405 <= 0x7F)
      {
        char *v332 = v405;
        return v332 + 1;
      }
      char *v332 = v405 | 0x80;
      unsigned int v406 = v405 >> 7;
      if (!(v405 >> 14))
      {
        v332[1] = v406;
        return v332 + 2;
      }
      int v5 = v332 + 2;
      do
      {
        *(v5 - 1) = v406 | 0x80;
        unsigned int v415 = v406 >> 7;
        ++v5;
        unsigned int v416 = v406 >> 14;
        v406 >>= 7;
      }
      while (v416);
      *(v5 - 1) = v415;
      return v5;
    case 18:
      if (*a4 <= (unint64_t)v5) {
        int v5 = sub_1B4BE5708((uint64_t)a4, v5);
      }
      uint64_t v353 = *(void *)a1;
      unsigned int v354 = 8 * a2;
      if ((8 * a2) > 0x7F)
      {
        char *v5 = v354 | 0x80;
        unsigned int v363 = v354 >> 7;
        if (v354 >> 14)
        {
          v332 = v5 + 2;
          do
          {
            *(v332 - 1) = v363 | 0x80;
            unsigned int v407 = v363 >> 7;
            ++v332;
            unsigned int v408 = v363 >> 14;
            v363 >>= 7;
          }
          while (v408);
          *(v332 - 1) = v407;
        }
        else
        {
          v5[1] = v363;
          v332 = v5 + 2;
        }
      }
      else
      {
        char *v5 = v354;
        v332 = v5 + 1;
      }
      unint64_t v409 = (2 * v353) ^ (v353 >> 63);
      if (v409 > 0x7F)
      {
        char *v332 = v409 | 0x80;
        unint64_t v410 = v409 >> 7;
        if (v409 >> 14)
        {
          int v5 = v332 + 2;
          do
          {
            *(v5 - 1) = v410 | 0x80;
            unint64_t v417 = v410 >> 7;
            ++v5;
            unint64_t v418 = v410 >> 14;
            v410 >>= 7;
          }
          while (v418);
          *(v5 - 1) = v417;
        }
        else
        {
          v332[1] = v410;
          return v332 + 2;
        }
      }
      else
      {
        char *v332 = v409;
        return v332 + 1;
      }
      return v5;
    default:
      return v5;
  }
}

void sub_1B4BEF930(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1B4BE62F0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B4BEFA38(uint64_t a1)
{
  uint64_t v1 = *(int **)(a1 + 16);
  if (*(unsigned __int16 *)(a1 + 8) < 0x101u)
  {
    if (*(_WORD *)(a1 + 10))
    {
      uint64_t v2 = 0;
      uint64_t v3 = &v1[8 * *(unsigned __int16 *)(a1 + 10)];
      do
      {
        uint64_t v4 = (_DWORD **)(v1 + 2);
        int v5 = *v1;
        v1 += 8;
        v2 += sub_1B4BEFAFC(v4, v5);
      }
      while (v1 != v3);
      return v2;
    }
    return 0;
  }
  unsigned int v8 = *(int **)v1;
  uint64_t v6 = v1 + 2;
  uint64_t v7 = v8;
  if (v8 == v6) {
    return 0;
  }
  uint64_t v2 = 0;
  do
  {
    unint64_t v9 = sub_1B4BEFAFC((_DWORD **)v7 + 5, v7[8]);
    int v10 = (int *)*((void *)v7 + 1);
    if (v10)
    {
      do
      {
        uint64_t v11 = v10;
        int v10 = *(int **)v10;
      }
      while (v10);
    }
    else
    {
      do
      {
        uint64_t v11 = (int *)*((void *)v7 + 2);
        BOOL v12 = *(void *)v11 == (void)v7;
        uint64_t v7 = v11;
      }
      while (!v12);
    }
    v2 += v9;
    uint64_t v7 = v11;
  }
  while (v11 != v6);
  return v2;
}

unint64_t sub_1B4BEFAFC(_DWORD **a1, int a2)
{
  if (*((unsigned char *)a1 + 9))
  {
    int v4 = *((unsigned __int8 *)a1 + 8);
    unsigned __int8 v5 = v4 - 19;
    if (*((unsigned char *)a1 + 11))
    {
      if ((v4 - 19) <= 0xEDu)
      {
        sub_1B4BE6194((uint64_t)v102, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
        uint64_t v6 = sub_1B4BE61AC(v102, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
        sub_1B4BE62E8((uint64_t)&v101, (const char **)&v6->__r_.__value_.__l.__data_);
        sub_1B4BE62F0((uint64_t)v102);
      }
      switch(v4)
      {
        case 1:
        case 6:
        case 16:
          uint64_t v21 = 8 * **a1;
          goto LABEL_63;
        case 2:
        case 7:
        case 15:
          uint64_t v21 = 4 * **a1;
          goto LABEL_63;
        case 3:
          uint64_t v27 = *a1;
          if ((int)**a1 < 1) {
            goto LABEL_7;
          }
          uint64_t v21 = 0;
          int v28 = 0;
          do
          {
            v21 += (9 * (__clz(*(void *)sub_1B4BF7520(v27, v28++) | 1) ^ 0x3F) + 73) >> 6;
            uint64_t v27 = *a1;
          }
          while (v28 < **a1);
          goto LABEL_63;
        case 4:
          unsigned int v29 = *a1;
          if ((int)**a1 < 1) {
            goto LABEL_7;
          }
          uint64_t v21 = 0;
          int v30 = 0;
          do
          {
            v21 += (9 * (__clz(*(void *)sub_1B4BF7B7C(v29, v30++) | 1) ^ 0x3F) + 73) >> 6;
            unsigned int v29 = *a1;
          }
          while (v30 < **a1);
          goto LABEL_63;
        case 5:
          unsigned int v31 = *a1;
          if ((int)**a1 < 1) {
            goto LABEL_7;
          }
          uint64_t v21 = 0;
          int v32 = 0;
          do
          {
            unsigned int v33 = (int *)sub_1B4BF6868(v31, v32);
            uint64_t v34 = (9 * (__clz(*v33 | 1) ^ 0x1F) + 73) >> 6;
            if (*v33 >= 0) {
              uint64_t v35 = v34;
            }
            else {
              uint64_t v35 = 10;
            }
            v21 += v35;
            ++v32;
            unsigned int v31 = *a1;
          }
          while (v32 < **a1);
          goto LABEL_63;
        case 8:
          uint64_t v21 = **a1;
          goto LABEL_63;
        case 9:
        case 10:
        case 11:
        case 12:
          sub_1B4BE6194((uint64_t)v102, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 1599);
          uint64_t v7 = sub_1B4BE61AC(v102, "Non-primitive types can't be packed.");
          sub_1B4BE62E8((uint64_t)&v101, (const char **)&v7->__r_.__value_.__l.__data_);
          sub_1B4BE62F0((uint64_t)v102);
          goto LABEL_7;
        case 13:
          unsigned int v22 = *a1;
          if ((int)**a1 < 1) {
            goto LABEL_7;
          }
          uint64_t v21 = 0;
          int v23 = 0;
          do
          {
            v21 += (9 * (__clz(*(_DWORD *)sub_1B4BF6EC4(v22, v23++) | 1) ^ 0x1F) + 73) >> 6;
            unsigned int v22 = *a1;
          }
          while (v23 < **a1);
          goto LABEL_63;
        case 14:
          unint64_t v36 = *a1;
          if ((int)**a1 < 1) {
            goto LABEL_7;
          }
          uint64_t v21 = 0;
          int v37 = 0;
          do
          {
            unint64_t v38 = (int *)sub_1B4BF6868(v36, v37);
            uint64_t v39 = (9 * (__clz(*v38 | 1) ^ 0x1F) + 73) >> 6;
            if (*v38 >= 0) {
              uint64_t v40 = v39;
            }
            else {
              uint64_t v40 = 10;
            }
            v21 += v40;
            ++v37;
            unint64_t v36 = *a1;
          }
          while (v37 < **a1);
          goto LABEL_63;
        case 17:
          char v24 = *a1;
          if ((int)**a1 < 1) {
            goto LABEL_7;
          }
          uint64_t v21 = 0;
          int v25 = 0;
          do
          {
            unsigned int v26 = (int *)sub_1B4BF6868(v24, v25);
            v21 += (9 * (__clz((2 * *v26) ^ (*v26 >> 31) | 1) ^ 0x1F) + 73) >> 6;
            ++v25;
            char v24 = *a1;
          }
          while (v25 < **a1);
          goto LABEL_63;
        case 18:
          uint64_t v41 = *a1;
          if ((int)**a1 < 1) {
            goto LABEL_7;
          }
          uint64_t v21 = 0;
          int v42 = 0;
          do
          {
            int v43 = (uint64_t *)sub_1B4BF7520(v41, v42);
            v21 += (9 * (__clz((2 * *v43) ^ (*v43 >> 63) | 1) ^ 0x3F) + 73) >> 6;
            ++v42;
            uint64_t v41 = *a1;
          }
          while (v42 < **a1);
LABEL_63:
          *((_DWORD *)a1 + 3) = v21;
          unint64_t v44 = v21 + ((9 * (__clz((8 * a2) | 3) ^ 0x1F) + 73) >> 6) + ((9 * (__clz(v21 | 1) ^ 0x1F) + 73) >> 6);
          if (v21) {
            unint64_t v8 = v44;
          }
          else {
            unint64_t v8 = 0;
          }
          break;
        default:
LABEL_7:
          unint64_t v8 = 0;
          *((_DWORD *)a1 + 3) = 0;
          break;
      }
    }
    else
    {
      if ((v4 - 19) > 0xEDu)
      {
        int v14 = *((unsigned __int8 *)a1 + 8);
      }
      else
      {
        sub_1B4BE6194((uint64_t)v102, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
        unsigned int v13 = sub_1B4BE61AC(v102, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
        sub_1B4BE62E8((uint64_t)&v101, (const char **)&v13->__r_.__value_.__l.__data_);
        sub_1B4BE62F0((uint64_t)v102);
        int v14 = *((unsigned __int8 *)a1 + 8);
        unsigned __int8 v5 = v14 - 19;
      }
      char v15 = v4 == 10;
      if (v5 <= 0xEDu)
      {
        sub_1B4BE6194((uint64_t)v102, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
        unsigned int v16 = sub_1B4BE61AC(v102, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
        sub_1B4BE62E8((uint64_t)&v101, (const char **)&v16->__r_.__value_.__l.__data_);
        sub_1B4BE62F0((uint64_t)v102);
      }
      unint64_t v17 = (unint64_t)((9 * (__clz((8 * a2) | 1) ^ 0x1F) + 73) >> 6) << v15;
      switch(v14)
      {
        case 1:
        case 6:
        case 16:
          unsigned int v18 = v17 + 8;
          goto LABEL_27;
        case 2:
        case 7:
        case 15:
          unsigned int v18 = v17 + 4;
LABEL_27:
          unint64_t v8 = v18 * (unint64_t)**a1;
          break;
        case 3:
          unsigned int v50 = *a1;
          int v51 = **a1;
          unint64_t v8 = v17 * (unint64_t)v51;
          if (v51 >= 1)
          {
            int v52 = 0;
            do
            {
              v8 += (9 * (__clz(*(void *)sub_1B4BF7520(v50, v52++) | 1) ^ 0x3F) + 73) >> 6;
              unsigned int v50 = *a1;
            }
            while (v52 < **a1);
          }
          break;
        case 4:
          unsigned int v53 = *a1;
          int v54 = **a1;
          unint64_t v8 = v17 * (unint64_t)v54;
          if (v54 >= 1)
          {
            int v55 = 0;
            do
            {
              v8 += (9 * (__clz(*(void *)sub_1B4BF7B7C(v53, v55++) | 1) ^ 0x3F) + 73) >> 6;
              unsigned int v53 = *a1;
            }
            while (v55 < **a1);
          }
          break;
        case 5:
          int v56 = *a1;
          int v57 = **a1;
          unint64_t v8 = v17 * (unint64_t)v57;
          if (v57 >= 1)
          {
            int v58 = 0;
            do
            {
              unsigned int v59 = (int *)sub_1B4BF6868(v56, v58);
              uint64_t v60 = (9 * (__clz(*v59 | 1) ^ 0x1F) + 73) >> 6;
              if (*v59 >= 0) {
                uint64_t v61 = v60;
              }
              else {
                uint64_t v61 = 10;
              }
              v8 += v61;
              ++v58;
              int v56 = *a1;
            }
            while (v58 < **a1);
          }
          break;
        case 8:
          unint64_t v8 = **a1 + **a1 * (unint64_t)v17;
          break;
        case 9:
          unsigned int v62 = *a1;
          int v63 = (*a1)[2];
          unint64_t v8 = v17 * (unint64_t)v63;
          if (v63 >= 1)
          {
            int v64 = 0;
            do
            {
              uint64_t v65 = sub_1B4BE0734((uint64_t)v62, v64);
              uint64_t v66 = *(unsigned __int8 *)(v65 + 23);
              if ((v66 & 0x80u) != 0) {
                uint64_t v66 = *(void *)(v65 + 8);
              }
              v8 += v66 + ((9 * (__clz(v66 | 1) ^ 0x1F) + 73) >> 6);
              ++v64;
              unsigned int v62 = *a1;
            }
            while (v64 < (*a1)[2]);
          }
          break;
        case 10:
          int v67 = *a1;
          int v68 = (*a1)[2];
          unint64_t v8 = v17 * (unint64_t)v68;
          if (v68 >= 1)
          {
            int v69 = 0;
            do
            {
              uint64_t v70 = sub_1B4BF0B94((uint64_t)v67, v69);
              v8 += (*(uint64_t (**)(uint64_t))(*(void *)v70 + 72))(v70);
              ++v69;
              int v67 = *a1;
            }
            while (v69 < (*a1)[2]);
          }
          break;
        case 11:
          unint64_t v71 = *a1;
          int v72 = (*a1)[2];
          unint64_t v8 = v17 * (unint64_t)v72;
          if (v72 >= 1)
          {
            int v73 = 0;
            do
            {
              uint64_t v74 = sub_1B4BF0B94((uint64_t)v71, v73);
              uint64_t v75 = (*(uint64_t (**)(uint64_t))(*(void *)v74 + 72))(v74);
              v8 += v75 + ((9 * (__clz(v75 | 1) ^ 0x1F) + 73) >> 6);
              ++v73;
              unint64_t v71 = *a1;
            }
            while (v73 < (*a1)[2]);
          }
          break;
        case 12:
          unint64_t v76 = *a1;
          int v77 = (*a1)[2];
          unint64_t v8 = v17 * (unint64_t)v77;
          if (v77 >= 1)
          {
            int v78 = 0;
            do
            {
              uint64_t v79 = sub_1B4BE0734((uint64_t)v76, v78);
              uint64_t v80 = *(unsigned __int8 *)(v79 + 23);
              if ((v80 & 0x80u) != 0) {
                uint64_t v80 = *(void *)(v79 + 8);
              }
              v8 += v80 + ((9 * (__clz(v80 | 1) ^ 0x1F) + 73) >> 6);
              ++v78;
              unint64_t v76 = *a1;
            }
            while (v78 < (*a1)[2]);
          }
          break;
        case 13:
          int v81 = *a1;
          int v82 = **a1;
          unint64_t v8 = v17 * (unint64_t)v82;
          if (v82 >= 1)
          {
            int v83 = 0;
            do
            {
              v8 += (9 * (__clz(*(_DWORD *)sub_1B4BF6EC4(v81, v83++) | 1) ^ 0x1F) + 73) >> 6;
              int v81 = *a1;
            }
            while (v83 < **a1);
          }
          break;
        case 14:
          int v84 = *a1;
          int v85 = **a1;
          unint64_t v8 = v17 * (unint64_t)v85;
          if (v85 >= 1)
          {
            int v86 = 0;
            do
            {
              unint64_t v87 = (int *)sub_1B4BF6868(v84, v86);
              uint64_t v88 = (9 * (__clz(*v87 | 1) ^ 0x1F) + 73) >> 6;
              if (*v87 >= 0) {
                uint64_t v89 = v88;
              }
              else {
                uint64_t v89 = 10;
              }
              v8 += v89;
              ++v86;
              int v84 = *a1;
            }
            while (v86 < **a1);
          }
          break;
        case 17:
          unint64_t v90 = *a1;
          int v91 = **a1;
          unint64_t v8 = v17 * (unint64_t)v91;
          if (v91 >= 1)
          {
            int v92 = 0;
            do
            {
              uint64_t v93 = (int *)sub_1B4BF6868(v90, v92);
              v8 += (9 * (__clz((2 * *v93) ^ (*v93 >> 31) | 1) ^ 0x1F) + 73) >> 6;
              ++v92;
              unint64_t v90 = *a1;
            }
            while (v92 < **a1);
          }
          break;
        case 18:
          int v94 = *a1;
          int v95 = **a1;
          unint64_t v8 = v17 * (unint64_t)v95;
          if (v95 >= 1)
          {
            int v96 = 0;
            do
            {
              unint64_t v97 = (uint64_t *)sub_1B4BF7520(v94, v96);
              v8 += (9 * (__clz((2 * *v97) ^ (*v97 >> 63) | 1) ^ 0x3F) + 73) >> 6;
              ++v96;
              int v94 = *a1;
            }
            while (v96 < **a1);
          }
          break;
        default:
          return 0;
      }
    }
  }
  else if (*((unsigned char *)a1 + 10))
  {
    return 0;
  }
  else
  {
    int v9 = *((unsigned __int8 *)a1 + 8);
    unsigned __int8 v10 = v9 - 19;
    if ((v9 - 19) > 0xEDu)
    {
      int v12 = *((unsigned __int8 *)a1 + 8);
    }
    else
    {
      sub_1B4BE6194((uint64_t)v102, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      uint64_t v11 = sub_1B4BE61AC(v102, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_1B4BE62E8((uint64_t)&v101, (const char **)&v11->__r_.__value_.__l.__data_);
      sub_1B4BE62F0((uint64_t)v102);
      int v12 = *((unsigned __int8 *)a1 + 8);
      unsigned __int8 v10 = v12 - 19;
    }
    char v19 = v9 == 10;
    if (v10 <= 0xEDu)
    {
      sub_1B4BE6194((uint64_t)v102, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      int v20 = sub_1B4BE61AC(v102, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_1B4BE62E8((uint64_t)&v101, (const char **)&v20->__r_.__value_.__l.__data_);
      sub_1B4BE62F0((uint64_t)v102);
    }
    unint64_t v8 = (unint64_t)((9 * (__clz((8 * a2) | 1) ^ 0x1F) + 73) >> 6) << v19;
    switch(v12)
    {
      case 1:
      case 6:
      case 16:
        v8 += 8;
        return v8;
      case 2:
      case 7:
      case 15:
        v8 += 4;
        return v8;
      case 3:
      case 4:
        unint64_t v46 = (unint64_t)*a1;
        goto LABEL_138;
      case 5:
      case 14:
        uint64_t v47 = (9 * (__clz(*(_DWORD *)a1 | 1) ^ 0x1F) + 73) >> 6;
        if (*(int *)a1 >= 0) {
          uint64_t v48 = v47;
        }
        else {
          uint64_t v48 = 10;
        }
        v8 += v48;
        return v8;
      case 8:
        return ++v8;
      case 9:
      case 12:
        uint64_t v49 = *((void *)*a1 + 1);
        if (*((char *)*a1 + 23) >= 0) {
          uint64_t v49 = *((unsigned __int8 *)*a1 + 23);
        }
        v8 += v49 + ((9 * (__clz(v49 | 1) ^ 0x1F) + 73) >> 6);
        return v8;
      case 10:
        v8 += (*(uint64_t (**)(void))(*(void *)*a1 + 72))();
        return v8;
      case 11:
        uint64_t v98 = *(void *)*a1;
        if ((*((unsigned char *)a1 + 10) & 0x10) != 0) {
          uint64_t v99 = (*(uint64_t (**)(void))(v98 + 88))();
        }
        else {
          uint64_t v99 = (*(uint64_t (**)(void))(v98 + 72))();
        }
        v8 += v99 + ((9 * (__clz(v99 | 1) ^ 0x1F) + 73) >> 6);
        return v8;
      case 13:
        int v100 = *(_DWORD *)a1;
        goto LABEL_136;
      case 17:
        int v100 = (2 * *(_DWORD *)a1) ^ (*(int *)a1 >> 31);
LABEL_136:
        v8 += (9 * (__clz(v100 | 1) ^ 0x1F) + 73) >> 6;
        break;
      case 18:
        unint64_t v46 = (2 * (void)*a1) ^ ((uint64_t)*a1 >> 63);
LABEL_138:
        v8 += (9 * (__clz(v46 | 1) ^ 0x3F) + 73) >> 6;
        break;
      default:
        return v8;
    }
  }
  return v8;
}

void sub_1B4BF06F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1B4BE62F0((uint64_t)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_1B4BF0810(unsigned __int8 *result)
{
  uint64_t v1 = result;
  uint64_t v2 = result[8];
  if (result[9])
  {
    if ((v2 - 19) <= 0xFFFFFFED)
    {
      sub_1B4BE6194((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      uint64_t v3 = sub_1B4BE61AC(v11, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_1B4BE62E8((uint64_t)&v10, (const char **)&v3->__r_.__value_.__l.__data_);
      uint64_t result = (unsigned __int8 *)sub_1B4BE62F0((uint64_t)v11);
    }
    switch(v2)
    {
      case 1:
        uint64_t result = *(unsigned __int8 **)v1;
        if (*(void *)v1)
        {
          int v4 = (uint64_t *)sub_1B4BF895C();
          goto LABEL_32;
        }
        break;
      case 2:
        uint64_t result = *(unsigned __int8 **)v1;
        if (*(void *)v1)
        {
          int v4 = (uint64_t *)sub_1B4BF8300();
          goto LABEL_32;
        }
        break;
      case 3:
      case 16:
      case 18:
        uint64_t result = *(unsigned __int8 **)v1;
        if (*(void *)v1)
        {
          int v4 = (uint64_t *)sub_1B4BF7648();
          goto LABEL_32;
        }
        break;
      case 4:
      case 6:
        uint64_t result = *(unsigned __int8 **)v1;
        if (*(void *)v1)
        {
          int v4 = (uint64_t *)sub_1B4BF7CA4();
          goto LABEL_32;
        }
        break;
      case 5:
      case 14:
      case 15:
      case 17:
        uint64_t result = *(unsigned __int8 **)v1;
        if (*(void *)v1)
        {
          int v4 = (uint64_t *)sub_1B4BF6990();
          goto LABEL_32;
        }
        break;
      case 7:
      case 13:
        uint64_t result = *(unsigned __int8 **)v1;
        if (*(void *)v1)
        {
          int v4 = (uint64_t *)sub_1B4BF6FEC();
          goto LABEL_32;
        }
        break;
      case 8:
        uint64_t result = *(unsigned __int8 **)v1;
        if (*(void *)v1)
        {
          int v4 = (uint64_t *)sub_1B4BF6338();
LABEL_32:
          uint64_t v8 = 0x1080C4057E67DB5;
          return (unsigned __int8 *)MEMORY[0x1BA9929C0](v4, v8);
        }
        break;
      case 9:
      case 12:
        uint64_t result = *(unsigned __int8 **)v1;
        if (*(void *)v1)
        {
          int v4 = (uint64_t *)sub_1B4BF8BE8();
          goto LABEL_37;
        }
        break;
      case 10:
      case 11:
        int v9 = *(unsigned __int8 **)v1;
        if (v9)
        {
          sub_1B4BF13A4(v9);
          int v4 = sub_1B4BD727C((uint64_t *)v9);
LABEL_37:
          uint64_t v8 = 0x1020C4014030ADELL;
          return (unsigned __int8 *)MEMORY[0x1BA9929C0](v4, v8);
        }
        break;
      default:
        return result;
    }
  }
  else
  {
    if ((v2 - 19) <= 0xFFFFFFED)
    {
      sub_1B4BE6194((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      unsigned __int8 v5 = sub_1B4BE61AC(v11, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_1B4BE62E8((uint64_t)&v10, (const char **)&v5->__r_.__value_.__l.__data_);
      uint64_t result = (unsigned __int8 *)sub_1B4BE62F0((uint64_t)v11);
    }
    int v6 = dword_1B4C9A1C0[v2];
    if (v6 == 10)
    {
      uint64_t result = *(unsigned __int8 **)v1;
      if ((v1[10] & 0x10) != 0)
      {
        if (!result) {
          return result;
        }
      }
      else if (!result)
      {
        return result;
      }
      return (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(void *)result + 8))(result);
    }
    if (v6 == 9)
    {
      uint64_t v7 = *(unsigned __int8 **)v1;
      if (v7)
      {
        if ((char)v7[23] < 0) {
          operator delete(*(void **)v7);
        }
        int v4 = (uint64_t *)v7;
        uint64_t v8 = 0x1012C40EC159624;
        return (unsigned __int8 *)MEMORY[0x1BA9929C0](v4, v8);
      }
    }
  }
  return result;
}

void sub_1B4BF0A70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1B4BE62F0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1B4BF0AB8()
{
}

unsigned __int8 *sub_1B4BF0ACC(unsigned __int8 *result, unsigned __int8 *a2)
{
  if (result != a2)
  {
    uint64_t v3 = result;
    do
    {
      uint64_t result = sub_1B4BF0810(v3 + 40);
      int v4 = (unsigned __int8 *)*((void *)v3 + 1);
      if (v4)
      {
        do
        {
          unsigned __int8 v5 = v4;
          int v4 = *(unsigned __int8 **)v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          unsigned __int8 v5 = (unsigned __int8 *)*((void *)v3 + 2);
          BOOL v6 = *(void *)v5 == (void)v3;
          uint64_t v3 = v5;
        }
        while (!v6);
      }
      uint64_t v3 = v5;
    }
    while (v5 != a2);
  }
  return result;
}

uint64_t *sub_1B4BF0B5C(uint64_t *a1)
{
  sub_1B4BF13A4(a1);
  return sub_1B4BD727C(a1);
}

uint64_t sub_1B4BF0B94(uint64_t a1, int a2)
{
  if (a2 < 0)
  {
    sub_1B4BE6194((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1705);
    int v4 = sub_1B4BE61AC(v8, "CHECK failed: (index) >= (0): ");
    sub_1B4BE62E8((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_1B4BE62F0((uint64_t)v8);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    sub_1B4BE6194((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1706);
    unsigned __int8 v5 = sub_1B4BE61AC(v8, "CHECK failed: (index) < (current_size_): ");
    sub_1B4BE62E8((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_1B4BE62F0((uint64_t)v8);
  }
  return *(void *)(*(void *)(a1 + 16) + 8 * a2 + 8);
}

void sub_1B4BF0C54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1B4BE62F0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B4BF0C74(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(int **)(result + 16);
  if (!v2) {
    return sub_1B4BF0CC8(result, a2);
  }
  uint64_t v3 = *v2;
  if ((int)v3 >= *(_DWORD *)(result + 12)) {
    return sub_1B4BF0CC8(result, a2);
  }
  int v4 = v2 + 2;
  uint64_t v5 = *(int *)(result + 8);
  if ((int)v5 < (int)v3) {
    *(void *)&v4[2 * v3] = *(void *)&v4[2 * v5];
  }
  *(void *)&v4[2 * v5] = a2;
  *(_DWORD *)(result + 8) = v5 + 1;
  ++**(_DWORD **)(result + 16);
  return result;
}

uint64_t sub_1B4BF0CC8(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  int v4 = *(int **)(result + 16);
  if (!v4)
  {
    int v5 = *(_DWORD *)(result + 12);
    goto LABEL_11;
  }
  int v5 = *(_DWORD *)(result + 8);
  int v6 = *(_DWORD *)(result + 12);
  if (v5 == v6)
  {
LABEL_11:
    uint64_t result = sub_1B4BF8BEC(result, v5 + 1);
    goto LABEL_12;
  }
  uint64_t v7 = *v4;
  if (v7 != v6)
  {
    if (v5 >= (int)v7)
    {
      int v9 = v7 + 1;
      goto LABEL_13;
    }
    *(void *)&v4[2 * v7 + 2] = *(void *)&v4[2 * v5 + 2];
LABEL_12:
    int v4 = *(int **)(v3 + 16);
    int v9 = *v4 + 1;
LABEL_13:
    int *v4 = v9;
    goto LABEL_14;
  }
  uint64_t result = *(void *)&v4[2 * v5 + 2];
  if (result) {
    BOOL v8 = *(void *)v3 == 0;
  }
  else {
    BOOL v8 = 0;
  }
  if (v8)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    int v4 = *(int **)(v3 + 16);
  }
LABEL_14:
  uint64_t v10 = *(int *)(v3 + 8);
  *(_DWORD *)(v3 + 8) = v10 + 1;
  *(void *)&v4[2 * v10 + 2] = a2;
  return result;
}

uint64_t *sub_1B4BF0DA8(void *a1, void *a2, uint64_t *a3)
{
  if (a1 != a2)
  {
    int v5 = a1;
    do
    {
      sub_1B4BEAB3C(a3, *((unsigned int *)v5 + 8), v5 + 5);
      int v6 = (void *)v5[1];
      if (v6)
      {
        do
        {
          uint64_t v7 = v6;
          int v6 = (void *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          uint64_t v7 = (void *)v5[2];
          BOOL v8 = *v7 == (void)v5;
          int v5 = v7;
        }
        while (!v8);
      }
      int v5 = v7;
    }
    while (v7 != a2);
  }
  return a3;
}

const std::string::value_type *sub_1B4BF0E2C(uint64_t a1, std::string::value_type *__s, int a3, std::string *a4)
{
  if (*(void *)(a1 + 8) - (void)__s + 16 >= a3)
  {
    uint64_t v6 = a3;
    MEMORY[0x1BA992600](a4, __s, a3);
    return &__s[v6];
  }
  else
  {
    return sub_1B4BF32C4(a1, __s, a3, a4);
  }
}

char *sub_1B4BF0E98(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  int v5 = *a2;
  if (*a2 < 0)
  {
    uint64_t result = (char *)sub_1B4BF3840((uint64_t)a2, *a2);
    if (!result) {
      return result;
    }
    int v5 = v7;
  }
  else
  {
    uint64_t result = a2 + 1;
  }
  unint64_t v8 = *(void *)(a1 + 8);
  int v9 = v8 - result;
  if (v5 <= (int)v8 - (int)result)
  {
LABEL_15:
    unint64_t v15 = (unint64_t)&result[v5];
    long long v16 = *(_OWORD *)(a3 + 16);
    v19[0] = *(_OWORD *)a3;
    v19[1] = v16;
    uint64_t v20 = *(void *)(a3 + 32);
    uint64_t result = sub_1B4BF10F4(result, v15, (unsigned int **)v19);
    if ((char *)v15 != result) {
      return 0;
    }
  }
  else
  {
    while (1)
    {
      long long v10 = *(_OWORD *)(a3 + 16);
      v24[0] = *(_OWORD *)a3;
      v24[1] = v10;
      uint64_t v25 = *(void *)(a3 + 32);
      uint64_t result = sub_1B4BF10F4(result, v8, (unsigned int **)v24);
      if (!result) {
        break;
      }
      signed int v11 = result - *(void *)(a1 + 8);
      if (v11 >= 0x11)
      {
        sub_1B4BE6194((uint64_t)&v26, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 674);
        int v12 = sub_1B4BE61AC(&v26, "CHECK failed: overrun >= 0 && overrun <= kSlopBytes: ");
        sub_1B4BE62E8((uint64_t)&v23, (const char **)&v12->__r_.__value_.__l.__data_);
        sub_1B4BE62F0((uint64_t)&v26);
      }
      int v13 = v5 - v9;
      if (v5 - v9 <= 16)
      {
        __int16 v27 = 0;
        v26.__r_.__value_.__r.__words[2] = 0;
        *(_OWORD *)&v26.__r_.__value_.__l.__data_ = *(_OWORD *)*(void *)(a1 + 8);
        uint64_t v22 = *(void *)(a3 + 32);
        long long v17 = *(_OWORD *)(a3 + 16);
        v21[0] = *(_OWORD *)a3;
        v21[1] = v17;
        unsigned int v18 = (std::string *)sub_1B4BF10F4((char *)&v26 + v11, (unint64_t)&v26 + v13, (unsigned int **)v21);
        uint64_t result = 0;
        if (v18 && v18 == (std::string *)((char *)&v26 + v13)) {
          return (char *)(*(void *)(a1 + 8) + v13);
        }
        return result;
      }
      int v5 = v5 - v9 - v11;
      if (v5 <= 0)
      {
        sub_1B4BE6194((uint64_t)&v26, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 688);
        int v14 = sub_1B4BE61AC(&v26, "CHECK failed: (size) > (0): ");
        sub_1B4BE62E8((uint64_t)&v23, (const char **)&v14->__r_.__value_.__l.__data_);
        sub_1B4BE62F0((uint64_t)&v26);
      }
      if (*(int *)(a1 + 28) < 17) {
        return 0;
      }
      uint64_t result = (char *)sub_1B4BF29F0(a1);
      if (!result) {
        return result;
      }
      result += v11;
      unint64_t v8 = *(void *)(a1 + 8);
      int v9 = v8 - result;
      if (v5 <= (int)v8 - (int)result) {
        goto LABEL_15;
      }
    }
  }
  return result;
}

void sub_1B4BF10CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

char *sub_1B4BF10F4(char *a1, unint64_t a2, unsigned int **a3)
{
  uint64_t v3 = a1;
  while ((unint64_t)v3 < a2)
  {
    unint64_t v6 = *v3;
    if (*v3 < 0)
    {
      int v7 = v6 + (v3[1] << 7);
      unint64_t v6 = (v7 - 128);
      if (v3[1] < 0)
      {
        uint64_t v3 = (char *)sub_1B4BF37B4((uint64_t)v3, (v7 - 128));
        if (!v3) {
          return v3;
        }
        unint64_t v6 = v8;
      }
      else
      {
        v3 += 2;
      }
    }
    else
    {
      ++v3;
    }
    if (((unsigned int (*)(unsigned int *, unint64_t))a3[1])(a3[2], v6))
    {
      int v9 = (int *)*a3;
      uint64_t v10 = **a3;
      if (v10 == (*a3)[1])
      {
        int v11 = v10 + 1;
        sub_1B4BF64F4((int *)*a3, v10 + 1);
        *(_DWORD *)(sub_1B4BF6994((uint64_t)v9) + 4 * v1sub_1B4BC92E4(&a9, 0) = v6;
      }
      else
      {
        *(_DWORD *)(sub_1B4BF6994((uint64_t)*a3) + 4 * v1sub_1B4BC92E4(&a9, 0) = v6;
        int v11 = v10 + 1;
      }
      *int v9 = v11;
    }
    else
    {
      int v12 = *((_DWORD *)a3 + 8);
      int v13 = (unint64_t *)a3[3];
      if (*v13) {
        int v14 = (std::string *)((*v13 & 0xFFFFFFFFFFFFFFFELL) + 8);
      }
      else {
        int v14 = (std::string *)sub_1B4BD6F84(v13);
      }
      sub_1B4BF36A0(v12, v6, v14);
    }
  }
  return v3;
}

char *sub_1B4BF1220(uint64_t a1, char *__src, int64_t __n)
{
  *(_DWORD *)(a1 + 84) = 0;
  if (__n >= 17)
  {
    *(_DWORD *)(a1 + 28) = 16;
    unint64_t v6 = &__src[__n - 16];
    *(void *)a1 = v6;
    *(void *)(a1 + 8) = v6;
    *(void *)(a1 + 16) = a1 + 40;
    if (*(void *)(a1 + 72) != 1) {
      return __src;
    }
    uint64_t v7 = 2;
    unint64_t v8 = __src;
    goto LABEL_6;
  }
  unint64_t v8 = (char *)(a1 + 40);
  memcpy((void *)(a1 + 40), __src, __n);
  *(_DWORD *)(a1 + 28) = 0;
  *(void *)a1 = &v8[__n];
  *(void *)(a1 + 8) = &v8[__n];
  *(void *)(a1 + 16) = 0;
  if (*(void *)(a1 + 72) == 1)
  {
    uint64_t v7 = __src - v8;
LABEL_6:
    *(void *)(a1 + 72) = v7;
  }
  return v8;
}

uint64_t sub_1B4BF12D4(uint64_t result)
{
  uint64_t v1 = *(unsigned int *)(result + 8);
  if ((v1 & 0x80000000) != 0)
  {
    sub_1B4BE6194((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1780);
    int v5 = sub_1B4BE61AC(v7, "CHECK failed: (n) >= (0): ");
    sub_1B4BE62E8((uint64_t)&v6, (const char **)&v5->__r_.__value_.__l.__data_);
    return sub_1B4BE62F0((uint64_t)v7);
  }
  else if (v1)
  {
    uint64_t v2 = result;
    uint64_t v3 = (uint64_t *)(*(void *)(result + 16) + 8);
    do
    {
      uint64_t v4 = *v3++;
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 40))(v4);
      --v1;
    }
    while (v1);
    *(_DWORD *)(v2 + 8) = 0;
  }
  return result;
}

void sub_1B4BF138C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1B4BE62F0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1B4BF13A4(void *a1)
{
  uint64_t v2 = (unsigned int *)a1[2];
  if (v2 && !*a1)
  {
    uint64_t v3 = v2 + 2;
    uint64_t v4 = *v2;
    if ((int)v4 >= 1)
    {
      do
      {
        if (*v3) {
          (*(void (**)(void))(*(void *)*v3 + 8))(*v3);
        }
        ++v3;
        --v4;
      }
      while (v4);
      uint64_t v2 = (unsigned int *)a1[2];
    }
    operator delete(v2);
  }
  a1[2] = 0;
}

uint64_t **sub_1B4BF1430(uint64_t **a1, int *a2, _OWORD *a3)
{
  char v6 = a1 + 1;
  int v5 = a1[1];
  if (v5)
  {
    int v7 = *a2;
    while (1)
    {
      while (1)
      {
        unint64_t v8 = (uint64_t **)v5;
        int v9 = *((_DWORD *)v5 + 8);
        if (v7 >= v9) {
          break;
        }
        int v5 = *v8;
        char v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      int v5 = v8[1];
      if (!v5)
      {
        char v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    unint64_t v8 = a1 + 1;
LABEL_10:
    uint64_t v10 = (uint64_t *)operator new(0x40uLL);
    long long v11 = a3[1];
    *((_OWORD *)v10 + 2) = *a3;
    *((_OWORD *)v10 + 3) = v11;
    sub_1B4BB3D00(a1, (uint64_t)v8, v6, v10);
    return (uint64_t **)v10;
  }
  return v8;
}

void sub_1B4BF14EC(uint64_t a1)
{
}

uint64_t *sub_1B4BF14F4(uint64_t **a1, uint64_t *a2, int *a3, _OWORD *a4)
{
  char v6 = sub_1B4BF157C(a1, a2, &v12, &v11, a3);
  int v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    unint64_t v8 = (uint64_t **)v6;
    int v7 = (uint64_t *)operator new(0x40uLL);
    long long v9 = a4[1];
    *((_OWORD *)v7 + 2) = *a4;
    *((_OWORD *)v7 + 3) = v9;
    sub_1B4BB3D00(a1, (uint64_t)v12, v8, v7);
  }
  return v7;
}

uint64_t *sub_1B4BF157C(void *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, int *a5)
{
  int v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, int v7 = *((_DWORD *)a2 + 8), *a5 < v7))
  {
    unint64_t v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      uint64_t v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      long long v9 = (uint64_t *)*a2;
      do
      {
        uint64_t v10 = v9;
        long long v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      int v13 = a2;
      do
      {
        uint64_t v10 = (uint64_t *)v13[2];
        BOOL v14 = *v10 == (void)v13;
        int v13 = v10;
      }
      while (v14);
    }
    int v15 = *a5;
    if (*((_DWORD *)v10 + 8) < *a5) {
      goto LABEL_17;
    }
    uint64_t v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          long long v17 = (uint64_t *)v16;
          int v18 = *(_DWORD *)(v16 + 32);
          if (v15 >= v18) {
            break;
          }
          uint64_t v16 = *v17;
          int v5 = v17;
          if (!*v17) {
            goto LABEL_29;
          }
        }
        if (v18 >= v15) {
          break;
        }
        int v5 = v17 + 1;
        uint64_t v16 = v17[1];
      }
      while (v16);
    }
    else
    {
      long long v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  uint64_t v11 = a2[1];
  if (v11)
  {
    int v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      int v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    char v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      BOOL v14 = *a4 == (void)v19;
      char v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *((_DWORD *)a4 + 8))
  {
    uint64_t v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          uint64_t v21 = (uint64_t *)v20;
          int v22 = *(_DWORD *)(v20 + 32);
          if (v6 >= v22) {
            break;
          }
          uint64_t v20 = *v21;
          int v5 = v21;
          if (!*v21) {
            goto LABEL_48;
          }
        }
        if (v22 >= v6) {
          break;
        }
        int v5 = v21 + 1;
        uint64_t v20 = v21[1];
      }
      while (v20);
    }
    else
    {
      uint64_t v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

uint64_t *sub_1B4BF1724(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2;
  if (*a2)
  {
    uint64_t v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      uint64_t v3 = a2;
      goto LABEL_7;
    }
    do
    {
      uint64_t v3 = v4;
      uint64_t v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  uint64_t v2 = v3[1];
  if (v2)
  {
LABEL_7:
    int v5 = 0;
    *(void *)(v2 + 16) = v3[2];
    goto LABEL_8;
  }
  int v5 = 1;
LABEL_8:
  int v6 = (uint64_t **)v3[2];
  int v7 = *v6;
  if (*v6 == v3)
  {
    uint64_t *v6 = (uint64_t *)v2;
    if (v3 == result)
    {
      int v7 = 0;
      uint64_t result = (uint64_t *)v2;
    }
    else
    {
      int v7 = v6[1];
    }
  }
  else
  {
    v6[1] = (uint64_t *)v2;
  }
  int v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
  {
    uint64_t v9 = a2[2];
    v3[2] = v9;
    *(void *)(v9 + 8 * (*(void *)a2[2] != (void)a2)) = v3;
    uint64_t v11 = *a2;
    uint64_t v10 = a2[1];
    *(void *)(v11 + 16) = v3;
    uint64_t *v3 = v11;
    v3[1] = v10;
    if (v10) {
      *(void *)(v10 + 16) = v3;
    }
    *((unsigned char *)v3 + 24) = *((unsigned char *)a2 + 24);
    if (result == a2) {
      uint64_t result = v3;
    }
  }
  if (!v8 || !result) {
    return result;
  }
  if (!v5)
  {
    *(unsigned char *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    uint64_t v12 = v7[2];
    if (*(uint64_t **)v12 == v7) {
      break;
    }
    if (!*((unsigned char *)v7 + 24))
    {
      *((unsigned char *)v7 + 24) = 1;
      *(unsigned char *)(v12 + 24) = 0;
      int v13 = *(uint64_t **)(v12 + 8);
      uint64_t v14 = *v13;
      *(void *)(v12 + 8) = *v13;
      if (v14) {
        *(void *)(v14 + 16) = v12;
      }
      std::string v13[2] = *(void *)(v12 + 16);
      *(void *)(*(void *)(v12 + 16) + 8 * (**(void **)(v12 + 16) != v12)) = v13;
      uint64_t *v13 = v12;
      *(void *)(v12 + 16) = v13;
      if (result == (uint64_t *)*v7) {
        uint64_t result = v7;
      }
      int v7 = *(uint64_t **)(*v7 + 8);
    }
    int v15 = (void *)*v7;
    if (*v7 && !*((unsigned char *)v15 + 24))
    {
      uint64_t v16 = (uint64_t *)v7[1];
      if (!v16) {
        goto LABEL_56;
      }
LABEL_55:
      if (*((unsigned char *)v16 + 24))
      {
LABEL_56:
        *((unsigned char *)v15 + 24) = 1;
        *((unsigned char *)v7 + 24) = 0;
        uint64_t v22 = v15[1];
        uint64_t *v7 = v22;
        if (v22) {
          *(void *)(v22 + 16) = v7;
        }
        std::string v15[2] = v7[2];
        *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v15;
        v15[1] = v7;
        std::string v7[2] = (uint64_t)v15;
        uint64_t v16 = v7;
      }
      else
      {
        int v15 = v7;
      }
      uint64_t v23 = v15[2];
      *((unsigned char *)v15 + 24) = *(unsigned char *)(v23 + 24);
      *(unsigned char *)(v23 + 24) = 1;
      *((unsigned char *)v16 + 24) = 1;
      char v24 = *(uint64_t **)(v23 + 8);
      uint64_t v25 = *v24;
      *(void *)(v23 + 8) = *v24;
      if (v25) {
        *(void *)(v25 + 16) = v23;
      }
      _OWORD v24[2] = *(void *)(v23 + 16);
      *(void *)(*(void *)(v23 + 16) + 8 * (**(void **)(v23 + 16) != v23)) = v24;
      *char v24 = v23;
      goto LABEL_72;
    }
    uint64_t v16 = (uint64_t *)v7[1];
    if (v16 && !*((unsigned char *)v16 + 24)) {
      goto LABEL_55;
    }
    *((unsigned char *)v7 + 24) = 0;
    long long v17 = (uint64_t *)v7[2];
    if (v17 == result)
    {
      long long v17 = result;
LABEL_53:
      *((unsigned char *)v17 + 24) = 1;
      return result;
    }
    if (!*((unsigned char *)v17 + 24)) {
      goto LABEL_53;
    }
LABEL_49:
    int v7 = *(uint64_t **)(v17[2] + 8 * (*(void *)v17[2] == (void)v17));
  }
  if (!*((unsigned char *)v7 + 24))
  {
    *((unsigned char *)v7 + 24) = 1;
    *(unsigned char *)(v12 + 24) = 0;
    uint64_t v18 = v7[1];
    *(void *)uint64_t v12 = v18;
    if (v18) {
      *(void *)(v18 + 16) = v12;
    }
    std::string v7[2] = *(void *)(v12 + 16);
    *(void *)(*(void *)(v12 + 16) + 8 * (**(void **)(v12 + 16) != v12)) = v7;
    v7[1] = v12;
    *(void *)(v12 + 16) = v7;
    if (result == (uint64_t *)v12) {
      uint64_t result = v7;
    }
    int v7 = *(uint64_t **)v12;
  }
  char v19 = (void *)*v7;
  if (*v7 && !*((unsigned char *)v19 + 24)) {
    goto LABEL_68;
  }
  uint64_t v20 = (uint64_t *)v7[1];
  if (!v20 || *((unsigned char *)v20 + 24))
  {
    *((unsigned char *)v7 + 24) = 0;
    long long v17 = (uint64_t *)v7[2];
    if (*((unsigned char *)v17 + 24)) {
      BOOL v21 = v17 == result;
    }
    else {
      BOOL v21 = 1;
    }
    if (v21) {
      goto LABEL_53;
    }
    goto LABEL_49;
  }
  if (v19 && !*((unsigned char *)v19 + 24))
  {
LABEL_68:
    uint64_t v20 = v7;
  }
  else
  {
    *((unsigned char *)v20 + 24) = 1;
    *((unsigned char *)v7 + 24) = 0;
    uint64_t v26 = *v20;
    v7[1] = *v20;
    if (v26) {
      *(void *)(v26 + 16) = v7;
    }
    std::string v20[2] = v7[2];
    *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v20;
    uint64_t *v20 = (uint64_t)v7;
    std::string v7[2] = (uint64_t)v20;
    char v19 = v7;
  }
  uint64_t v23 = v20[2];
  *((unsigned char *)v20 + 24) = *(unsigned char *)(v23 + 24);
  *(unsigned char *)(v23 + 24) = 1;
  *((unsigned char *)v19 + 24) = 1;
  char v24 = *(uint64_t **)v23;
  uint64_t v27 = *(void *)(*(void *)v23 + 8);
  *(void *)uint64_t v23 = v27;
  if (v27) {
    *(void *)(v27 + 16) = v23;
  }
  _OWORD v24[2] = *(void *)(v23 + 16);
  *(void *)(*(void *)(v23 + 16) + 8 * (**(void **)(v23 + 16) != v23)) = v24;
  v24[1] = v23;
LABEL_72:
  *(void *)(v23 + 16) = v24;
  return result;
}

void sub_1B4BF1AA8()
{
}

uint64_t sub_1B4BF1AD4(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

void sub_1B4BF1AF8(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
}

void sub_1B4BF1B0C()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1E9D40630, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1E9D40630))
  {
    qword_1E9D40A98 = 0;
    unk_1E9D40AA0 = 0;
    qword_1E9D40AA8 = 0;
    sub_1B4BF26F0((uint64_t)sub_1B4BF1AF8, (uint64_t)&qword_1E9D40A98);
    atomic_store(1u, byte_1E9D40A58);
    __cxa_guard_release(&qword_1E9D40630);
  }
}

void sub_1B4BF1BA0(_Unwind_Exception *a1)
{
}

uint64_t sub_1B4BF1BB8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 64))(v4, a1);
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 64))(a1, a2);
  (*(void (**)(uint64_t))(*(void *)a2 + 40))(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 64))(a2, v4);
  int v5 = *(uint64_t (**)(uint64_t))(*(void *)v4 + 8);
  return v5(v4);
}

void sub_1B4BF1D10(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_1B4BF1D44(_DWORD *a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1E9D40628, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1E9D40628))
  {
    __cxa_atexit((void (*)(void *))std::mutex::~mutex, &stru_1E9D40290, &dword_1B4BAD000);
    __cxa_guard_release(&qword_1E9D40628);
  }
  pthread_t v2 = pthread_self();
  uint64_t v3 = (uint64_t)v2;
  if (qword_1E9D40698)
  {
    if (v2 && v2 == (pthread_t)qword_1E9D40698) {
      goto LABEL_5;
    }
  }
  else if (!v2)
  {
LABEL_5:
    if (*a1 != 1)
    {
      sub_1B4BE6194((uint64_t)v6, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/generated_message_util.cc", 785);
      uint64_t v4 = sub_1B4BE61AC(v6, "CHECK failed: (scc->visit_status.load(std::memory_order_relaxed)) == (SCCInfoBase::kRunning): ");
      sub_1B4BE62E8((uint64_t)&v5, (const char **)&v4->__r_.__value_.__l.__data_);
      sub_1B4BE62F0((uint64_t)v6);
    }
    return;
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)byte_1E9D40A58, memory_order_acquire) & 1) == 0) {
    sub_1B4BF1B0C();
  }
  std::mutex::lock(&stru_1E9D40290);
  qword_1E9D40698 = v3;
  sub_1B4BF1EB0(a1);
  qword_1E9D40698 = 0;
  std::mutex::unlock(&stru_1E9D40290);
}

void sub_1B4BF1E94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1B4BE62F0((uint64_t)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_1B4BF1EB0(_DWORD *result)
{
  if (*result == -1)
  {
    uint64_t v1 = (uint64_t (**)(void))result;
    char *result = 1;
    pthread_t v2 = result + 6;
    int v3 = result[1];
    if (v3 >= 1)
    {
      for (uint64_t i = 0; i < v3; ++i)
      {
        if (*(void *)&v2[2 * i])
        {
          sub_1B4BF1EB0();
          int v3 = *((_DWORD *)v1 + 1);
        }
      }
    }
    uint64_t v5 = v3;
    int v6 = *((_DWORD *)v1 + 2);
    if (v6 >= 1)
    {
      uint64_t v7 = 0;
      int v8 = &v2[2 * v5];
      do
      {
        if (**(void **)&v8[2 * v7])
        {
          sub_1B4BF1EB0();
          int v6 = *((_DWORD *)v1 + 2);
        }
        ++v7;
      }
      while (v7 < v6);
    }
    uint64_t result = (_DWORD *)v1[2]();
    atomic_store(0, (unsigned int *)v1);
  }
  return result;
}

uint64_t sub_1B4BF1F60(char *__src, int64_t __n, uint64_t a3, char a4)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  uint64_t v13 = 0x7FFFFFFF00000000;
  int v14 = dword_1E9D4037C;
  unsigned int v15 = 0x80000000;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  int v6 = sub_1B4BF1220((uint64_t)v9, __src, __n);
  if ((*(uint64_t (**)(uint64_t, char *, unsigned char *))(*(void *)a3 + 88))(a3, v6, v9)) {
    BOOL v7 = v13 == 0;
  }
  else {
    BOOL v7 = 0;
  }
  if (v7)
  {
    if (a4 & 2) != 0 || ((*(uint64_t (**)(uint64_t))(*(void *)a3 + 48))(a3)) {
      return 1;
    }
    sub_1B4BF208C(a3);
  }
  return 0;
}

void *sub_1B4BF207C@<X0>(void *a1@<X8>)
{
  return sub_1B4BB8DC0(a1, "(cannot determine missing fields for lite message)");
}

uint64_t sub_1B4BF208C(uint64_t a1)
{
  sub_1B4BE6194((uint64_t)v6, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/message_lite.cc", 133);
  sub_1B4BF2140("parse", a1, &__p);
  pthread_t v2 = sub_1B4BE61D8(v6, (const std::string::value_type *)&__p);
  sub_1B4BE62E8((uint64_t)&v4, (const char **)&v2->__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return sub_1B4BE62F0((uint64_t)v6);
}

void sub_1B4BF2110(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_1B4BE62F0((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1B4BF2140(const std::string::value_type *a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  std::string::append(a3, "Can't ");
  std::string::append(a3, a1);
  std::string::append(a3, " message of type \"");
  (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a2 + 16))(&__p, a2);
  if ((v12 & 0x80u) == 0) {
    p_p = (const std::string::value_type *)&__p;
  }
  else {
    p_p = (const std::string::value_type *)__p;
  }
  if ((v12 & 0x80u) == 0) {
    std::string::size_type v7 = v12;
  }
  else {
    std::string::size_type v7 = v11;
  }
  std::string::append(a3, p_p, v7);
  if ((char)v12 < 0) {
    operator delete(__p);
  }
  std::string::append(a3, "\" because it is missing required fields: ");
  (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a2 + 56))(&__p, a2);
  if ((v12 & 0x80u) == 0) {
    int v8 = (const std::string::value_type *)&__p;
  }
  else {
    int v8 = (const std::string::value_type *)__p;
  }
  if ((v12 & 0x80u) == 0) {
    std::string::size_type v9 = v12;
  }
  else {
    std::string::size_type v9 = v11;
  }
  std::string::append(a3, v8, v9);
  if ((char)v12 < 0) {
    operator delete(__p);
  }
}

void sub_1B4BF227C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v15 + 23) < 0) {
    operator delete(*(void **)v15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1B4BF22BC(uint64_t a1, char *a2, unsigned int a3)
{
  if ((a3 & 0x80000000) != 0) {
    sub_1B4BF29C4();
  }
  int64_t v5 = a3;
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  return sub_1B4BF1F60(a2, v5, a1, 1);
}

BOOL sub_1B4BF2338(uint64_t a1, std::string *a2)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 48))(a1) & 1) == 0)
  {
    sub_1B4BE6194((uint64_t)v9, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/message_lite.cc", 449);
    char v4 = sub_1B4BE61AC(v9, "CHECK failed: IsInitialized(): ");
    sub_1B4BF2140("serialize", a1, &__p);
    int64_t v5 = sub_1B4BE61D8(v4, (const std::string::value_type *)&__p);
    sub_1B4BE62E8((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    sub_1B4BE62F0((uint64_t)v9);
  }
  return sub_1B4BF2444(a1, a2);
}

void sub_1B4BF2410(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_1B4BE62F0((uint64_t)&a16);
  _Unwind_Resume(a1);
}

BOOL sub_1B4BF2444(uint64_t a1, std::string *a2)
{
  pthread_t v2 = a2;
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0) {
    std::string::size_type size = a2->__r_.__value_.__l.__size_;
  }
  else {
    std::string::size_type size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  }
  unint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1);
  uint64_t v6 = v5;
  unint64_t v7 = v5 >> 31;
  if (v5 >> 31)
  {
    sub_1B4BE6194((uint64_t)v16, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/message_lite.cc", 457);
    (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)a1 + 16))(__p, a1);
    long long v10 = sub_1B4BE61D8(v16, (const std::string::value_type *)__p);
    std::string::size_type v11 = sub_1B4BE61AC(v10, " exceeded maximum protobuf size of 2GB: ");
    unsigned __int8 v12 = sub_1B4BE6424(v11, v6);
    sub_1B4BE62E8((uint64_t)&v14, (const char **)&v12->__r_.__value_.__l.__data_);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p[0].__r_.__value_.__l.__data_);
    }
    std::string::size_type v9 = v16;
    goto LABEL_12;
  }
  std::string::resize(v2, v5 + size, 0);
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0) {
    pthread_t v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
  }
  *(_OWORD *)&v16[0].__r_.__value_.__l.__data_ = (unint64_t)v2 + size + v6;
  uint64_t v17 = 0;
  __int16 v18 = 0;
  char v19 = byte_1E9D40A94 & 1;
  if (v16[0].__r_.__value_.__r.__words[0] != (*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a1))
  {
    sub_1B4BE6194((uint64_t)__p, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/message_lite.cc", 360);
    int v8 = sub_1B4BE61AC(__p, "CHECK failed: target + size == res: ");
    sub_1B4BE62E8((uint64_t)&v14, (const char **)&v8->__r_.__value_.__l.__data_);
    std::string::size_type v9 = __p;
LABEL_12:
    sub_1B4BE62F0((uint64_t)v9);
  }
  return v7 == 0;
}

void sub_1B4BF2638(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
}

BOOL sub_1B4BF2680@<W0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  BOOL result = sub_1B4BF2338(a1, (std::string *)a2);
  if (!result)
  {
    if (*(char *)(a2 + 23) < 0)
    {
      **(unsigned char **)a2 = 0;
      *(void *)(a2 + 8) = 0;
    }
    else
    {
      *(unsigned char *)a2 = 0;
      *(unsigned char *)(a2 + 23) = 0;
    }
  }
  return result;
}

void sub_1B4BF26D4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B4BF26F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1B4BF2824();
  std::mutex::lock((std::mutex *)(v4 + 24));
  unint64_t v5 = *(void **)(v4 + 8);
  unint64_t v6 = *(void *)(v4 + 16);
  if ((unint64_t)v5 >= v6)
  {
    uint64_t v8 = ((uint64_t)v5 - *(void *)v4) >> 4;
    unint64_t v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 60) {
      sub_1B4BB3244();
    }
    uint64_t v10 = v6 - *(void *)v4;
    if (v10 >> 3 > v9) {
      unint64_t v9 = v10 >> 3;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11) {
      unsigned __int8 v12 = (char *)sub_1B4BB4140(v4 + 16, v11);
    }
    else {
      unsigned __int8 v12 = 0;
    }
    uint64_t v13 = &v12[16 * v8];
    char v14 = &v12[16 * v11];
    *(void *)uint64_t v13 = a1;
    *((void *)v13 + 1) = a2;
    unint64_t v7 = v13 + 16;
    uint64_t v16 = *(char **)v4;
    uint64_t v15 = *(char **)(v4 + 8);
    if (v15 != *(char **)v4)
    {
      do
      {
        *((_OWORD *)v13 - 1) = *((_OWORD *)v15 - 1);
        v13 -= 16;
        v15 -= 16;
      }
      while (v15 != v16);
      uint64_t v15 = *(char **)v4;
    }
    *(void *)uint64_t v4 = v13;
    *(void *)(v4 + 8) = v7;
    *(void *)(v4 + 16) = v14;
    if (v15) {
      operator delete(v15);
    }
  }
  else
  {
    void *v5 = a1;
    v5[1] = a2;
    unint64_t v7 = v5 + 2;
  }
  *(void *)(v4 + 8) = v7;
  std::mutex::unlock((std::mutex *)(v4 + 24));
}

void sub_1B4BF2810(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1B4BF2824()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1E9D40248, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1E9D40248))
  {
    operator new();
  }
  return qword_1E9D402D0;
}

void sub_1B4BF28B4(_Unwind_Exception *a1)
{
}

void sub_1B4BF28CC()
{
  if ((byte_1E9D406A0 & 1) == 0)
  {
    uint64_t v0 = sub_1B4BF2824();
    if (v0)
    {
      uint64_t v1 = sub_1B4BF291C(v0);
      MEMORY[0x1BA9929C0](v1, 0x1020C40A0054943);
    }
    byte_1E9D406A0 = 1;
  }
}

uint64_t sub_1B4BF291C(uint64_t a1)
{
  pthread_t v2 = *(void **)a1;
  int v3 = *(void **)(a1 + 8);
  uint64_t v4 = v3 - 2;
  if (*(void **)a1 != v3 && v4 > v2)
  {
    do
    {
      unint64_t v6 = (void (*)(void))*v2;
      *pthread_t v2 = *v4;
      void *v4 = v6;
      uint64_t v7 = v2[1];
      v2[1] = v4[1];
      v4[1] = v7;
      v2 += 2;
      v4 -= 2;
    }
    while (v2 < v4);
    pthread_t v2 = *(void **)a1;
    int v3 = *(void **)(a1 + 8);
  }
  while (v2 != v3)
  {
    ((void (*)(void))*v2)(v2[1]);
    v2 += 2;
  }
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  uint64_t v8 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v8;
    operator delete(v8);
  }
  return a1;
}

void sub_1B4BF29C4()
{
  __assert_rtn("StringPiece", "stringpiece.h", 229, "len >= 0");
}

_OWORD *sub_1B4BF29F0(uint64_t a1)
{
  if (*(int *)(a1 + 28) <= 16)
  {
    sub_1B4BE6194((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/parse_context.cc", 158);
    pthread_t v2 = sub_1B4BE61AC(v7, "CHECK failed: limit_ > kSlopBytes: ");
    sub_1B4BE62E8((uint64_t)&v6, (const char **)&v2->__r_.__value_.__l.__data_);
    sub_1B4BE62F0((uint64_t)v7);
  }
  BOOL result = sub_1B4BF2AB8(a1, 0, -1);
  uint64_t v4 = *(void *)(a1 + 8);
  if (result)
  {
    int v5 = *(_DWORD *)(a1 + 28) + result - v4;
    *(_DWORD *)(a1 + 28) = v5;
    v4 += v5 & (v5 >> 31);
  }
  else
  {
    *(_DWORD *)(a1 + 8sub_1B4BC92E4(&a9, 0) = 1;
  }
  *(void *)a1 = v4;
  return result;
}

void sub_1B4BF2AA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1B4BE62F0((uint64_t)va);
  _Unwind_Resume(a1);
}

_OWORD *sub_1B4BF2AB8(uint64_t a1, unsigned int a2, int a3)
{
  int v3 = *(_OWORD **)(a1 + 16);
  if (!v3) {
    return v3;
  }
  uint64_t v5 = a1 + 40;
  if (v3 != (_OWORD *)(a1 + 40))
  {
    int v6 = *(_DWORD *)(a1 + 24);
    if (v6 <= 16)
    {
      sub_1B4BE6194((uint64_t)v33, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/parse_context.cc", 105);
      uint64_t v7 = sub_1B4BE61AC(v33, "CHECK failed: size_ > kSlopBytes: ");
      sub_1B4BE62E8((uint64_t)&__src, (const char **)&v7->__r_.__value_.__l.__data_);
      sub_1B4BE62F0((uint64_t)v33);
      int v3 = *(_OWORD **)(a1 + 16);
      int v6 = *(_DWORD *)(a1 + 24);
    }
    *(void *)(a1 + 8) = (char *)v3 + v6 - 16;
    *(void *)(a1 + 16) = v5;
    if (*(void *)(a1 + 72) == 1) {
      *(void *)(a1 + 72) = 2;
    }
    return v3;
  }
  _OWORD *v3 = *(_OWORD *)*(void *)(a1 + 8);
  if (*(int *)(a1 + 84) < 1) {
    goto LABEL_46;
  }
  int v8 = a3;
  if (a3 < 0) {
    goto LABEL_39;
  }
  if ((a2 & 0x80000000) != 0)
  {
    sub_1B4BE6194((uint64_t)v33, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/parse_context.cc", 53);
    unint64_t v11 = sub_1B4BE61AC(v33, "CHECK failed: overrun >= 0: ");
    sub_1B4BE62E8((uint64_t)&__src, (const char **)&v11->__r_.__value_.__l.__data_);
    sub_1B4BE62F0((uint64_t)v33);
LABEL_14:
    unint64_t v12 = a1 + 56;
    uint64_t v13 = (unsigned __int8 *)v3 + (int)a2;
    char v14 = v13;
    while (2)
    {
      int v15 = (char)*v14++;
      int v16 = v15;
      if (v15 < 0)
      {
        int v16 = v16 + (*v14 << 7) - 128;
        if ((char)*v14 < 0)
        {
          char v14 = v13 + 3;
          uint64_t v20 = -21;
          while (1)
          {
            v16 += (*(v14 - 1) - 1) << (v20 + 35);
            if (((char)*(v14 - 1) & 0x80000000) == 0) {
              break;
            }
            ++v14;
            v20 += 7;
            if (!v20) {
              goto LABEL_39;
            }
          }
        }
        else
        {
          char v14 = v13 + 2;
        }
      }
      if ((unint64_t)v14 <= v12)
      {
        if (!v16) {
          goto LABEL_46;
        }
        switch(v16 & 7)
        {
          case 0:
            v33[0].__r_.__value_.__r.__words[0] = 0;
            char v14 = sub_1B4BF3EF8((char *)v14, v33);
            if (!v14) {
              goto LABEL_39;
            }
            goto LABEL_38;
          case 1:
            v14 += 8;
            goto LABEL_38;
          case 2:
            int v18 = *v14;
            if ((char)*v14 < 0)
            {
              uint64_t v19 = sub_1B4BF3840((uint64_t)v14, v18);
              if (!v19) {
                goto LABEL_39;
              }
            }
            else
            {
              uint64_t v19 = (uint64_t)(v14 + 1);
            }
            if ((uint64_t)(v12 - v19) < v18) {
              goto LABEL_39;
            }
            char v14 = (unsigned __int8 *)(v19 + v18);
LABEL_38:
            uint64_t v13 = v14;
            if ((unint64_t)v14 >= v12) {
              goto LABEL_39;
            }
            continue;
          case 3:
            ++v8;
            goto LABEL_38;
          case 4:
            BOOL v17 = __OFSUB__(v8--, 1);
            if (v8 < 0 != v17) {
              goto LABEL_46;
            }
            goto LABEL_38;
          case 5:
            v14 += 4;
            goto LABEL_38;
          default:
            goto LABEL_39;
        }
      }
      goto LABEL_39;
    }
  }
  if (a2 >= 0x11)
  {
    sub_1B4BE6194((uint64_t)v33, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/parse_context.cc", 54);
    uint64_t v10 = sub_1B4BE61AC(v33, "CHECK failed: overrun <= kSlopBytes: ");
    sub_1B4BE62E8((uint64_t)&__src, (const char **)&v10->__r_.__value_.__l.__data_);
    sub_1B4BE62F0((uint64_t)v33);
    goto LABEL_39;
  }
  if (a2 != 16) {
    goto LABEL_14;
  }
LABEL_39:
  __src = 0;
  if (!(*(unsigned int (**)(void, void **, uint64_t))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32), &__src, a1 + 24))
  {
LABEL_45:
    *(_DWORD *)(a1 + 84) = 0;
LABEL_46:
    if (*(void *)(a1 + 72) == 2) {
      *(void *)(a1 + 72) = *(void *)(a1 + 8) - (void)v3;
    }
    *(void *)(a1 + 8) = a1 + 56;
    *(void *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 24) = 0;
    return v3;
  }
  while (1)
  {
    size_t v21 = *(unsigned int *)(a1 + 24);
    *(_DWORD *)(a1 + 84) -= v21;
    if ((int)v21 >= 17)
    {
      unint64_t v27 = *(void *)(a1 + 72);
      uint64_t v26 = (void *)(a1 + 72);
      unint64_t v25 = v27;
      uint64_t v28 = (char *)(v26 - 2);
      unsigned int v29 = __src;
      *((_OWORD *)v26 - 1) = *(_OWORD *)__src;
      *(v26 - 7) = v29;
      goto LABEL_52;
    }
    if ((int)v21 >= 1) {
      break;
    }
    if (v21)
    {
      sub_1B4BE6194((uint64_t)v33, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/parse_context.cc", 137);
      uint64_t v22 = sub_1B4BE61AC(v33, "CHECK failed: size_ == 0: ");
      uint64_t v23 = sub_1B4BE63A4(v22, *(_DWORD *)(a1 + 24));
      sub_1B4BE62E8((uint64_t)&v31, (const char **)&v23->__r_.__value_.__l.__data_);
      sub_1B4BE62F0((uint64_t)v33);
    }
    if (((*(uint64_t (**)(void, void **, uint64_t))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32), &__src, a1 + 24) & 1) == 0)goto LABEL_45; {
  }
    }
  memcpy((void *)(a1 + 56), __src, v21);
  unint64_t v30 = *(void *)(a1 + 72);
  uint64_t v26 = (void *)(a1 + 72);
  unint64_t v25 = v30;
  uint64_t v28 = (char *)v3 + v21;
  *(v26 - 7) = v3;
LABEL_52:
  *(v26 - 8) = v28;
  if (v25 > 1) {
    *uint64_t v26 = 1;
  }
  return v3;
}

void sub_1B4BF2E9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1B4BE62F0((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_1B4BF2EE4(uint64_t a1, signed int a2, int a3)
{
  int v3 = *(_DWORD *)(a1 + 28);
  if (v3 < a2) {
    return 0;
  }
  signed int v5 = a2;
  if (v3 == a2)
  {
    sub_1B4BE6194((uint64_t)v19, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/parse_context.cc", 175);
    uint64_t v7 = sub_1B4BE61AC(v19, "CHECK failed: overrun != limit_: ");
    sub_1B4BE62E8((uint64_t)&v18, (const char **)&v7->__r_.__value_.__l.__data_);
    sub_1B4BE62F0((uint64_t)v19);
    int v3 = *(_DWORD *)(a1 + 28);
  }
  if (v3 <= v5)
  {
    sub_1B4BE6194((uint64_t)v19, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/parse_context.cc", 176);
    int v8 = sub_1B4BE61AC(v19, "CHECK failed: overrun < limit_: ");
    sub_1B4BE62E8((uint64_t)&v18, (const char **)&v8->__r_.__value_.__l.__data_);
    sub_1B4BE62F0((uint64_t)v19);
    int v3 = *(_DWORD *)(a1 + 28);
  }
  if (*(void *)a1 != *(void *)(a1 + 8) + (v3 & (v3 >> 31)))
  {
    sub_1B4BE6194((uint64_t)v19, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/parse_context.cc", 181);
    unint64_t v9 = sub_1B4BE61AC(v19, "CHECK failed: limit_end_ == buffer_end_ + (std::min)(0, limit_): ");
    sub_1B4BE62E8((uint64_t)&v18, (const char **)&v9->__r_.__value_.__l.__data_);
    sub_1B4BE62F0((uint64_t)v19);
    int v3 = *(_DWORD *)(a1 + 28);
  }
  if (v3 <= 0)
  {
    sub_1B4BE6194((uint64_t)v19, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/parse_context.cc", 183);
    uint64_t v10 = sub_1B4BE61AC(v19, "CHECK failed: limit_ > 0: ");
    sub_1B4BE62E8((uint64_t)&v18, (const char **)&v10->__r_.__value_.__l.__data_);
    sub_1B4BE62F0((uint64_t)v19);
  }
  if (*(void *)a1 != *(void *)(a1 + 8))
  {
    sub_1B4BE6194((uint64_t)v19, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/parse_context.cc", 184);
    unint64_t v11 = sub_1B4BE61AC(v19, "CHECK failed: limit_end_ == buffer_end_: ");
    sub_1B4BE62E8((uint64_t)&v18, (const char **)&v11->__r_.__value_.__l.__data_);
    sub_1B4BE62F0((uint64_t)v19);
  }
  while (1)
  {
    if (v5 < 0)
    {
      sub_1B4BE6194((uint64_t)v19, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/parse_context.cc", 188);
      unint64_t v12 = sub_1B4BE61AC(v19, "CHECK failed: overrun >= 0: ");
      sub_1B4BE62E8((uint64_t)&v18, (const char **)&v12->__r_.__value_.__l.__data_);
      sub_1B4BE62F0((uint64_t)v19);
    }
    uint64_t v13 = sub_1B4BF2AB8(a1, v5, a3);
    if (!v13) {
      break;
    }
    uint64_t v14 = *(void *)(a1 + 8);
    int v15 = *(_DWORD *)(a1 + 28) + v13 - v14;
    *(_DWORD *)(a1 + 28) = v15;
    BOOL result = (char *)v13 + v5;
    signed int v5 = result - v14;
    if ((int)result - (int)v14 < 0)
    {
      *(void *)a1 = v14 + (v15 & (v15 >> 31));
      return result;
    }
  }
  if (v5) {
    return 0;
  }
  if (*(int *)(a1 + 28) <= 0)
  {
    sub_1B4BE6194((uint64_t)v19, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/parse_context.cc", 193);
    BOOL v17 = sub_1B4BE61AC(v19, "CHECK failed: limit_ > 0: ");
    sub_1B4BE62E8((uint64_t)&v18, (const char **)&v17->__r_.__value_.__l.__data_);
    sub_1B4BE62F0((uint64_t)v19);
  }
  BOOL result = *(char **)(a1 + 8);
  *(void *)a1 = result;
  *(_DWORD *)(a1 + 8sub_1B4BC92E4(&a9, 0) = 1;
  return result;
}

void sub_1B4BF3194(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1B4BE62F0((uint64_t)va);
  _Unwind_Resume(a1);
}

_OWORD *sub_1B4BF31DC(uint64_t a1, int a2, int a3)
{
  int v5 = *(_DWORD *)(a1 + 8) - a2 + 16;
  while (1)
  {
    BOOL v6 = __OFSUB__(a3, v5);
    a3 -= v5;
    if ((a3 < 0) ^ v6 | (a3 == 0))
    {
      sub_1B4BE6194((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 323);
      uint64_t v7 = sub_1B4BE61AC(v10, "CHECK failed: size > chunk_size: ");
      sub_1B4BE62E8((uint64_t)&v9, (const char **)&v7->__r_.__value_.__l.__data_);
      sub_1B4BE62F0((uint64_t)v10);
    }
    if (!*(void *)(a1 + 16) || *(int *)(a1 + 28) < 17) {
      break;
    }
    BOOL result = sub_1B4BF29F0(a1);
    if (!result) {
      return result;
    }
    int v5 = *(_DWORD *)(a1 + 8) - result;
    if (a3 <= v5) {
      return (_OWORD *)((char *)result + a3 + 16);
    }
  }
  return 0;
}

void sub_1B4BF32AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1B4BE62F0((uint64_t)va);
  _Unwind_Resume(a1);
}

const std::string::value_type *sub_1B4BF32C4(uint64_t a1, std::string::value_type *__s, int a3, std::string *this)
{
  int v5 = a3;
  BOOL v6 = __s;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    *this->__r_.__value_.__l.__data_ = 0;
    this->__r_.__value_.__l.__size_ = 0;
  }
  else
  {
    this->__r_.__value_.__s.__data_[0] = 0;
    *((unsigned char *)&this->__r_.__value_.__s + 23) = 0;
  }
  uint64_t v8 = *(void *)(a1 + 8);
  if (v8 - (uint64_t)__s + *(int *)(a1 + 28) >= a3)
  {
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
      std::string::size_type size = this->__r_.__value_.__l.__size_;
    }
    else {
      std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    }
    if (a3 >= 50000000) {
      int v10 = 50000000;
    }
    else {
      int v10 = a3;
    }
    std::string::reserve(this, size + v10);
    uint64_t v8 = *(void *)(a1 + 8);
  }
  int v11 = v8 - v6 + 16;
  while (1)
  {
    BOOL v12 = __OFSUB__(v5, v11);
    v5 -= v11;
    if ((v5 < 0) ^ v12 | (v5 == 0))
    {
      sub_1B4BE6194((uint64_t)v16, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 323);
      uint64_t v13 = sub_1B4BE61AC(v16, "CHECK failed: size > chunk_size: ");
      sub_1B4BE62E8((uint64_t)&v15, (const char **)&v13->__r_.__value_.__l.__data_);
      sub_1B4BE62F0((uint64_t)v16);
    }
    if (!*(void *)(a1 + 16)) {
      break;
    }
    std::string::append(this, v6, v11);
    if (*(int *)(a1 + 28) < 17) {
      break;
    }
    BOOL result = (const std::string::value_type *)sub_1B4BF29F0(a1);
    if (!result) {
      return result;
    }
    BOOL v6 = result + 16;
    int v11 = *(_DWORD *)(a1 + 8) - result;
    if (v5 <= v11)
    {
      std::string::append(this, v6, v5);
      return &v6[v5];
    }
  }
  return 0;
}

void sub_1B4BF3434(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1B4BE62F0((uint64_t)va);
  _Unwind_Resume(a1);
}

const std::string::value_type *sub_1B4BF344C(uint64_t a1, std::string::value_type *__s, int a3, std::string *this)
{
  int v5 = a3;
  BOOL v6 = __s;
  uint64_t v8 = *(void *)(a1 + 8);
  if (v8 - (uint64_t)__s + *(int *)(a1 + 28) >= a3)
  {
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
      std::string::size_type size = this->__r_.__value_.__l.__size_;
    }
    else {
      std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    }
    if (a3 >= 50000000) {
      int v10 = 50000000;
    }
    else {
      int v10 = a3;
    }
    std::string::reserve(this, size + v10);
    uint64_t v8 = *(void *)(a1 + 8);
  }
  int v11 = v8 - v6 + 16;
  while (1)
  {
    BOOL v12 = __OFSUB__(v5, v11);
    v5 -= v11;
    if ((v5 < 0) ^ v12 | (v5 == 0))
    {
      sub_1B4BE6194((uint64_t)v16, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 323);
      uint64_t v13 = sub_1B4BE61AC(v16, "CHECK failed: size > chunk_size: ");
      sub_1B4BE62E8((uint64_t)&v15, (const char **)&v13->__r_.__value_.__l.__data_);
      sub_1B4BE62F0((uint64_t)v16);
    }
    if (!*(void *)(a1 + 16)) {
      break;
    }
    std::string::append(this, v6, v11);
    if (*(int *)(a1 + 28) < 17) {
      break;
    }
    BOOL result = (const std::string::value_type *)sub_1B4BF29F0(a1);
    if (!result) {
      return result;
    }
    BOOL v6 = result + 16;
    int v11 = *(_DWORD *)(a1 + 8) - result;
    if (v5 <= v11)
    {
      std::string::append(this, v6, v5);
      return &v6[v5];
    }
  }
  return 0;
}

void sub_1B4BF359C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1B4BE62F0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B4BF35B8(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  int v6 = (char)*a3;
  unsigned int v7 = *a3;
  if (v6 < 0)
  {
    uint64_t result = sub_1B4BF3840((uint64_t)a3, v7);
    if (!result) {
      return result;
    }
    uint64_t v8 = (char *)result;
    unsigned int v7 = v10;
  }
  else
  {
    uint64_t v8 = (char *)(a3 + 1);
  }
  int v11 = sub_1B4BD72B0(a1, (int)v8, v7);
  int v12 = *(_DWORD *)(a1 + 88);
  BOOL v13 = __OFSUB__(v12--, 1);
  *(_DWORD *)(a1 + 88) = v12;
  if (v12 < 0 != v13) {
    return 0;
  }
  int v14 = v11;
  uint64_t result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)a2 + 88))(a2, v8, a1);
  if (!result) {
    return result;
  }
  ++*(_DWORD *)(a1 + 88);
  if (*(_DWORD *)(a1 + 80)) {
    return 0;
  }
  int v15 = *(_DWORD *)(a1 + 28) + v14;
  *(_DWORD *)(a1 + 28) = v15;
  *(void *)a1 = *(void *)(a1 + 8) + (v15 & (v15 >> 31));
  return result;
}

void sub_1B4BF36A0(int a1, unint64_t a2, std::string *this)
{
  unint64_t v5 = (8 * a1);
  if (v5 < 0x80)
  {
    LOBYTE(v6) = 8 * a1;
  }
  else
  {
    do
    {
      std::string::push_back(this, v5 | 0x80);
      unint64_t v6 = v5 >> 7;
      unint64_t v7 = v5 >> 14;
      v5 >>= 7;
    }
    while (v7);
  }
  std::string::push_back(this, v6);
  if (a2 < 0x80)
  {
    LOBYTE(v8) = a2;
  }
  else
  {
    do
    {
      std::string::push_back(this, a2 | 0x80);
      unint64_t v8 = a2 >> 7;
      unint64_t v9 = a2 >> 14;
      a2 >>= 7;
    }
    while (v9);
  }
  std::string::push_back(this, v8);
}

uint64_t sub_1B4BF374C(uint64_t a1, int a2)
{
  uint64_t result = a1 + 3;
  uint64_t v4 = -21;
  while (1)
  {
    a2 += (*(unsigned __int8 *)(result - 1) - 1) << (v4 + 35);
    if ((*(char *)(result - 1) & 0x80000000) == 0) {
      break;
    }
    ++result;
    v4 += 7;
    if (!v4)
    {
      while (*(char *)(a1 + v4 + 5) < 0)
      {
        uint64_t result = 0;
        if (++v4 == 5) {
          return result;
        }
      }
      return a1 + v4 + 6;
    }
  }
  return result;
}

uint64_t sub_1B4BF37B4(uint64_t a1, uint64_t a2)
{
  a2 = a2;
  uint64_t result = a1 + 3;
  uint64_t v4 = (char *)(a1 + 2);
  uint64_t v5 = 14;
  while (1)
  {
    int v6 = *v4++;
    a2 += (v6 - 1) << v5;
    if ((v6 & 0x80000000) == 0) {
      break;
    }
    ++result;
    v5 += 7;
    if (v5 == 70) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1B4BF37FC(uint64_t a1, int a2)
{
  uint64_t result = a1 + 3;
  uint64_t v4 = (char *)(a1 + 2);
  uint64_t v5 = -21;
  while (1)
  {
    int v6 = *v4++;
    a2 += (v6 - 1) << (v5 + 35);
    if ((v6 & 0x80000000) == 0) {
      break;
    }
    ++result;
    v5 += 7;
    if (!v5) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1B4BF3840(uint64_t a1, int a2)
{
  uint64_t result = a1 + 2;
  uint64_t v4 = -21;
  while (1)
  {
    a2 += (*(unsigned __int8 *)(result - 1) - 1) << (v4 + 28);
    if ((*(char *)(result - 1) & 0x80000000) == 0) {
      break;
    }
    ++result;
    v4 += 7;
    if (!v4)
    {
      unsigned int v5 = *(unsigned __int8 *)(a1 + 4);
      uint64_t v6 = a1 + 5;
      if (a2 + (v5 << 28) - 0x10000000 > 0x7FFFFFEF) {
        uint64_t v6 = 0;
      }
      if (v5 <= 7) {
        return v6;
      }
      else {
        return 0;
      }
    }
  }
  return result;
}

const std::string::value_type *sub_1B4BF38B0(std::string *a1, char *a2, uint64_t a3)
{
  int v5 = *a2;
  if (*a2 < 0)
  {
    uint64_t result = (const std::string::value_type *)sub_1B4BF3840((uint64_t)a2, *a2);
    if (!result) {
      return result;
    }
    uint64_t v6 = (std::string::value_type *)result;
    int v5 = v8;
  }
  else
  {
    uint64_t v6 = a2 + 1;
  }
  return sub_1B4BF0E2C(a3, v6, v5, a1);
}

unsigned __int8 *sub_1B4BF3928(int *a1, unsigned __int8 *a2, uint64_t a3)
{
  return sub_1B4BF3F6C(a3, a2, a1);
}

unsigned __int8 *sub_1B4BF3938(int *a1, unsigned __int8 *a2, uint64_t a3)
{
  return sub_1B4BF4240(a3, a2, a1);
}

unsigned __int8 *sub_1B4BF3948(int *a1, unsigned __int8 *a2, uint64_t a3)
{
  return sub_1B4BF4514(a3, a2, a1);
}

unsigned __int8 *sub_1B4BF3958(int *a1, unsigned __int8 *a2, uint64_t a3)
{
  return sub_1B4BF47E8(a3, a2, a1);
}

unsigned __int8 *sub_1B4BF3968(int *a1, unsigned __int8 *a2, uint64_t a3)
{
  return sub_1B4BF4ABC(a3, a2, a1);
}

unsigned __int8 *sub_1B4BF3978(int *a1, unsigned __int8 *a2, uint64_t a3)
{
  return sub_1B4BF4D9C(a3, a2, a1);
}

unsigned __int8 *sub_1B4BF3988(int *a1, unsigned __int8 *a2, uint64_t a3)
{
  return sub_1B4BF507C(a3, a2, a1);
}

char *sub_1B4BF399C(int *a1, char *a2, uint64_t a3)
{
  int v5 = *a2;
  if (*a2 < 0)
  {
    uint64_t result = (char *)sub_1B4BF3840((uint64_t)a2, *a2);
    if (!result) {
      return result;
    }
    uint64_t v6 = result;
    int v5 = v8;
  }
  else
  {
    uint64_t v6 = a2 + 1;
  }
  return sub_1B4BF5358(a3, v6, v5, a1);
}

char *sub_1B4BF3A18(int *a1, char *a2, uint64_t a3)
{
  int v5 = *a2;
  if (*a2 < 0)
  {
    uint64_t result = (char *)sub_1B4BF3840((uint64_t)a2, *a2);
    if (!result) {
      return result;
    }
    uint64_t v6 = result;
    int v5 = v8;
  }
  else
  {
    uint64_t v6 = a2 + 1;
  }
  return sub_1B4BF5460(a3, v6, v5, a1);
}

char *sub_1B4BF3A94(int *a1, char *a2, uint64_t a3)
{
  int v5 = *a2;
  if (*a2 < 0)
  {
    uint64_t result = (char *)sub_1B4BF3840((uint64_t)a2, *a2);
    if (!result) {
      return result;
    }
    uint64_t v6 = result;
    int v5 = v8;
  }
  else
  {
    uint64_t v6 = a2 + 1;
  }
  return sub_1B4BF5568(a3, v6, v5, a1);
}

char *sub_1B4BF3B10(int *a1, char *a2, uint64_t a3)
{
  int v5 = *a2;
  if (*a2 < 0)
  {
    uint64_t result = (char *)sub_1B4BF3840((uint64_t)a2, *a2);
    if (!result) {
      return result;
    }
    uint64_t v6 = result;
    int v5 = v8;
  }
  else
  {
    uint64_t v6 = a2 + 1;
  }
  return sub_1B4BF5670(a3, v6, v5, a1);
}

char *sub_1B4BF3B8C(int *a1, char *a2, uint64_t a3)
{
  int v5 = *a2;
  if (*a2 < 0)
  {
    uint64_t result = (char *)sub_1B4BF3840((uint64_t)a2, *a2);
    if (!result) {
      return result;
    }
    uint64_t v6 = result;
    int v5 = v8;
  }
  else
  {
    uint64_t v6 = a2 + 1;
  }
  return sub_1B4BF5778(a3, v6, v5, a1);
}

char *sub_1B4BF3C08(int *a1, char *a2, uint64_t a3)
{
  int v5 = *a2;
  if (*a2 < 0)
  {
    uint64_t result = (char *)sub_1B4BF3840((uint64_t)a2, *a2);
    if (!result) {
      return result;
    }
    uint64_t v6 = result;
    int v5 = v8;
  }
  else
  {
    uint64_t v6 = a2 + 1;
  }
  return sub_1B4BF5880(a3, v6, v5, a1);
}

char *sub_1B4BF3C80(uint64_t a1, char *a2, uint64_t a3)
{
  unsigned int v10 = a2;
  while (1)
  {
    if (sub_1B4BD6E44(a3, &v10, *(_DWORD *)(a3 + 92))) {
      return v10;
    }
    int v5 = v10 + 1;
    unsigned int v6 = *v10;
    if (*v10 < 0)
    {
      unsigned int v6 = v6 + (*v5 << 7) - 128;
      if (*v5 < 0)
      {
        int v5 = v10 + 3;
        uint64_t v8 = -21;
        while (1)
        {
          v6 += (*(v5 - 1) - 1) << (v8 + 35);
          if ((*(v5 - 1) & 0x80000000) == 0) {
            break;
          }
          ++v5;
          v8 += 7;
          if (!v8) {
            return 0;
          }
        }
      }
      else
      {
        int v5 = v10 + 2;
      }
    }
    unsigned int v10 = v5;
    if (!v6 || (v6 & 7) == 4) {
      break;
    }
    unsigned int v10 = (char *)sub_1B4BF3D98(v6, a1);
    if (!v10) {
      return 0;
    }
  }
  *(_DWORD *)(a3 + 8sub_1B4BC92E4(&a9, 0) = v6 - 1;
  return v5;
}

unsigned __int8 *sub_1B4BF3D6C(unsigned int a1, std::string *a2, char *a3, int32x2_t *a4)
{
  int v5 = a2;
  return sub_1B4BF3D98(a1, &v5, a3, a4);
}

unsigned __int8 *sub_1B4BF3D98(unint64_t a1, std::string **a2, char *a3, int32x2_t *a4)
{
  unint64_t v4 = a1 >> 3;
  if (!(a1 >> 3)) {
    return 0;
  }
  int v5 = (unsigned __int8 *)a3;
  switch(a1 & 7)
  {
    case 0uLL:
      v11[0].__r_.__value_.__r.__words[0] = 0;
      int v5 = sub_1B4BF3EF8(a3, v11);
      if (v5) {
        sub_1B4BF5988(a2, v4, v11[0].__r_.__value_.__r.__words[0]);
      }
      return v5;
    case 1uLL:
      int v5 = (unsigned __int8 *)(a3 + 8);
      sub_1B4BF5A50((std::string *)a2, v4, *(void *)a3);
      return v5;
    case 2uLL:
      uint64_t v8 = (unsigned __int8 *)sub_1B4BF5B0C(a2, v4, a3, (uint64_t)a4);
      goto LABEL_10;
    case 3uLL:
      uint64_t v8 = (unsigned __int8 *)sub_1B4BF5C78(a2, v4, a3, a4);
LABEL_10:
      int v5 = v8;
      break;
    case 4uLL:
      sub_1B4BE6194((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 758);
      unint64_t v7 = sub_1B4BE61AC(v11, "Can't happen");
      sub_1B4BE62E8((uint64_t)&v10, (const char **)&v7->__r_.__value_.__l.__data_);
      sub_1B4BE62F0((uint64_t)v11);
      break;
    case 5uLL:
      int v5 = (unsigned __int8 *)(a3 + 4);
      sub_1B4BF5DA4((std::string *)a2, v4, *(_DWORD *)a3);
      break;
    default:
      return 0;
  }
  return v5;
}

void sub_1B4BF3EC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1B4BE62F0((uint64_t)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_1B4BF3EF8(char *a1, void *a2)
{
  uint64_t v2 = *a1;
  if (*a1 < 0)
  {
    int v4 = a1[1];
    uint64_t v5 = (v2 + (v4 << 7) - 128);
    if ((v4 & 0x80) != 0)
    {
      uint64_t result = (unsigned __int8 *)(a1 + 3);
      uint64_t v6 = 14;
      while (1)
      {
        v5 += (*(result - 1) - 1) << v6;
        if (((char)*(result - 1) & 0x80000000) == 0) {
          break;
        }
        ++result;
        v6 += 7;
        if (v6 == 70)
        {
          uint64_t result = 0;
          uint64_t v5 = 0;
          break;
        }
      }
      *a2 = v5;
    }
    else
    {
      *a2 = v5;
      return (unsigned __int8 *)(a1 + 2);
    }
  }
  else
  {
    *a2 = v2;
    return (unsigned __int8 *)(a1 + 1);
  }
  return result;
}

unsigned __int8 *sub_1B4BF3F6C(uint64_t a1, unsigned __int8 *a2, int *a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  int v5 = *a2;
  if ((char)*a2 < 0)
  {
    uint64_t result = (unsigned __int8 *)sub_1B4BF3840((uint64_t)a2, *a2);
    if (!result) {
      return result;
    }
    int v5 = v7;
  }
  else
  {
    uint64_t result = a2 + 1;
  }
  unint64_t v8 = *(void *)(a1 + 8);
  int v9 = v8 - result;
  if (v5 <= (int)v8 - (int)result)
  {
LABEL_15:
    unint64_t v14 = (unint64_t)&result[v5];
    uint64_t result = sub_1B4BF4190(result, v14, a3);
    if ((unsigned __int8 *)v14 != result) {
      return 0;
    }
  }
  else
  {
    while (1)
    {
      uint64_t result = sub_1B4BF4190(result, v8, a3);
      if (!result) {
        break;
      }
      signed int v10 = result - *(void *)(a1 + 8);
      if (v10 >= 0x11)
      {
        sub_1B4BE6194((uint64_t)&v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 674);
        int v11 = sub_1B4BE61AC(&v18, "CHECK failed: overrun >= 0 && overrun <= kSlopBytes: ");
        sub_1B4BE62E8((uint64_t)&v17, (const char **)&v11->__r_.__value_.__l.__data_);
        sub_1B4BE62F0((uint64_t)&v18);
      }
      int v12 = v5 - v9;
      if (v5 - v9 <= 16)
      {
        __int16 v19 = 0;
        v18.__r_.__value_.__r.__words[2] = 0;
        *(_OWORD *)&v18.__r_.__value_.__l.__data_ = *(_OWORD *)*(void *)(a1 + 8);
        int v15 = sub_1B4BF4190((unsigned __int8 *)&v18 + v10, (unint64_t)&v18 + v12, a3);
        if (v15) {
          BOOL v16 = v15 == (unsigned __int8 *)((char *)&v18 + v12);
        }
        else {
          BOOL v16 = 0;
        }
        if (!v16) {
          return 0;
        }
        return (unsigned __int8 *)(*(void *)(a1 + 8) + v12);
      }
      int v5 = v5 - v9 - v10;
      if (v5 <= 0)
      {
        sub_1B4BE6194((uint64_t)&v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 688);
        BOOL v13 = sub_1B4BE61AC(&v18, "CHECK failed: (size) > (0): ");
        sub_1B4BE62E8((uint64_t)&v17, (const char **)&v13->__r_.__value_.__l.__data_);
        sub_1B4BE62F0((uint64_t)&v18);
      }
      if (*(int *)(a1 + 28) < 17) {
        return 0;
      }
      uint64_t result = (unsigned __int8 *)sub_1B4BF29F0(a1);
      if (!result) {
        return result;
      }
      result += v10;
      unint64_t v8 = *(void *)(a1 + 8);
      int v9 = v8 - result;
      if (v5 <= (int)v8 - (int)result) {
        goto LABEL_15;
      }
    }
  }
  return result;
}

void sub_1B4BF4168(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1B4BE62F0((uint64_t)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_1B4BF4190(unsigned __int8 *a1, unint64_t a2, int *a3)
{
  for (uint64_t i = a1; (unint64_t)i < a2; *a3 = v8)
  {
    uint64_t v10 = 0;
    uint64_t i = sub_1B4BF3EF8((char *)i, &v10);
    if (!i) {
      break;
    }
    int v6 = v10;
    uint64_t v7 = *a3;
    if (v7 == a3[1])
    {
      int v8 = v7 + 1;
      sub_1B4BF64F4(a3, v7 + 1);
      *(_DWORD *)(sub_1B4BF6994((uint64_t)a3) + 4 * v7) = v6;
    }
    else
    {
      *(_DWORD *)(sub_1B4BF6994((uint64_t)a3) + 4 * v7) = v6;
      int v8 = v7 + 1;
    }
  }
  return i;
}

unsigned __int8 *sub_1B4BF4240(uint64_t a1, unsigned __int8 *a2, int *a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  int v5 = *a2;
  if ((char)*a2 < 0)
  {
    uint64_t result = (unsigned __int8 *)sub_1B4BF3840((uint64_t)a2, *a2);
    if (!result) {
      return result;
    }
    int v5 = v7;
  }
  else
  {
    uint64_t result = a2 + 1;
  }
  unint64_t v8 = *(void *)(a1 + 8);
  int v9 = v8 - result;
  if (v5 <= (int)v8 - (int)result)
  {
LABEL_15:
    unint64_t v14 = (unint64_t)&result[v5];
    uint64_t result = sub_1B4BF4464(result, v14, a3);
    if ((unsigned __int8 *)v14 != result) {
      return 0;
    }
  }
  else
  {
    while (1)
    {
      uint64_t result = sub_1B4BF4464(result, v8, a3);
      if (!result) {
        break;
      }
      signed int v10 = result - *(void *)(a1 + 8);
      if (v10 >= 0x11)
      {
        sub_1B4BE6194((uint64_t)&v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 674);
        int v11 = sub_1B4BE61AC(&v18, "CHECK failed: overrun >= 0 && overrun <= kSlopBytes: ");
        sub_1B4BE62E8((uint64_t)&v17, (const char **)&v11->__r_.__value_.__l.__data_);
        sub_1B4BE62F0((uint64_t)&v18);
      }
      int v12 = v5 - v9;
      if (v5 - v9 <= 16)
      {
        __int16 v19 = 0;
        v18.__r_.__value_.__r.__words[2] = 0;
        *(_OWORD *)&v18.__r_.__value_.__l.__data_ = *(_OWORD *)*(void *)(a1 + 8);
        int v15 = sub_1B4BF4464((unsigned __int8 *)&v18 + v10, (unint64_t)&v18 + v12, a3);
        if (v15) {
          BOOL v16 = v15 == (unsigned __int8 *)((char *)&v18 + v12);
        }
        else {
          BOOL v16 = 0;
        }
        if (!v16) {
          return 0;
        }
        return (unsigned __int8 *)(*(void *)(a1 + 8) + v12);
      }
      int v5 = v5 - v9 - v10;
      if (v5 <= 0)
      {
        sub_1B4BE6194((uint64_t)&v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 688);
        BOOL v13 = sub_1B4BE61AC(&v18, "CHECK failed: (size) > (0): ");
        sub_1B4BE62E8((uint64_t)&v17, (const char **)&v13->__r_.__value_.__l.__data_);
        sub_1B4BE62F0((uint64_t)&v18);
      }
      if (*(int *)(a1 + 28) < 17) {
        return 0;
      }
      uint64_t result = (unsigned __int8 *)sub_1B4BF29F0(a1);
      if (!result) {
        return result;
      }
      result += v10;
      unint64_t v8 = *(void *)(a1 + 8);
      int v9 = v8 - result;
      if (v5 <= (int)v8 - (int)result) {
        goto LABEL_15;
      }
    }
  }
  return result;
}

void sub_1B4BF443C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1B4BE62F0((uint64_t)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_1B4BF4464(unsigned __int8 *a1, unint64_t a2, int *a3)
{
  for (uint64_t i = a1; (unint64_t)i < a2; *a3 = v8)
  {
    uint64_t v10 = 0;
    uint64_t i = sub_1B4BF3EF8((char *)i, &v10);
    if (!i) {
      break;
    }
    int v6 = v10;
    uint64_t v7 = *a3;
    if (v7 == a3[1])
    {
      int v8 = v7 + 1;
      sub_1B4BF6B50(a3, v7 + 1);
      *(_DWORD *)(sub_1B4BF6FF0((uint64_t)a3) + 4 * v7) = v6;
    }
    else
    {
      *(_DWORD *)(sub_1B4BF6FF0((uint64_t)a3) + 4 * v7) = v6;
      int v8 = v7 + 1;
    }
  }
  return i;
}

unsigned __int8 *sub_1B4BF4514(uint64_t a1, unsigned __int8 *a2, int *a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  int v5 = *a2;
  if ((char)*a2 < 0)
  {
    uint64_t result = (unsigned __int8 *)sub_1B4BF3840((uint64_t)a2, *a2);
    if (!result) {
      return result;
    }
    int v5 = v7;
  }
  else
  {
    uint64_t result = a2 + 1;
  }
  unint64_t v8 = *(void *)(a1 + 8);
  int v9 = v8 - result;
  if (v5 <= (int)v8 - (int)result)
  {
LABEL_15:
    unint64_t v14 = (unint64_t)&result[v5];
    uint64_t result = sub_1B4BF4738(result, v14, a3);
    if ((unsigned __int8 *)v14 != result) {
      return 0;
    }
  }
  else
  {
    while (1)
    {
      uint64_t result = sub_1B4BF4738(result, v8, a3);
      if (!result) {
        break;
      }
      signed int v10 = result - *(void *)(a1 + 8);
      if (v10 >= 0x11)
      {
        sub_1B4BE6194((uint64_t)&v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 674);
        int v11 = sub_1B4BE61AC(&v18, "CHECK failed: overrun >= 0 && overrun <= kSlopBytes: ");
        sub_1B4BE62E8((uint64_t)&v17, (const char **)&v11->__r_.__value_.__l.__data_);
        sub_1B4BE62F0((uint64_t)&v18);
      }
      int v12 = v5 - v9;
      if (v5 - v9 <= 16)
      {
        __int16 v19 = 0;
        v18.__r_.__value_.__r.__words[2] = 0;
        *(_OWORD *)&v18.__r_.__value_.__l.__data_ = *(_OWORD *)*(void *)(a1 + 8);
        int v15 = sub_1B4BF4738((unsigned __int8 *)&v18 + v10, (unint64_t)&v18 + v12, a3);
        if (v15) {
          BOOL v16 = v15 == (unsigned __int8 *)((char *)&v18 + v12);
        }
        else {
          BOOL v16 = 0;
        }
        if (!v16) {
          return 0;
        }
        return (unsigned __int8 *)(*(void *)(a1 + 8) + v12);
      }
      int v5 = v5 - v9 - v10;
      if (v5 <= 0)
      {
        sub_1B4BE6194((uint64_t)&v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 688);
        BOOL v13 = sub_1B4BE61AC(&v18, "CHECK failed: (size) > (0): ");
        sub_1B4BE62E8((uint64_t)&v17, (const char **)&v13->__r_.__value_.__l.__data_);
        sub_1B4BE62F0((uint64_t)&v18);
      }
      if (*(int *)(a1 + 28) < 17) {
        return 0;
      }
      uint64_t result = (unsigned __int8 *)sub_1B4BF29F0(a1);
      if (!result) {
        return result;
      }
      result += v10;
      unint64_t v8 = *(void *)(a1 + 8);
      int v9 = v8 - result;
      if (v5 <= (int)v8 - (int)result) {
        goto LABEL_15;
      }
    }
  }
  return result;
}

void sub_1B4BF4710(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1B4BE62F0((uint64_t)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_1B4BF4738(unsigned __int8 *a1, unint64_t a2, int *a3)
{
  for (uint64_t i = a1; (unint64_t)i < a2; *a3 = v8)
  {
    uint64_t v10 = 0;
    uint64_t i = sub_1B4BF3EF8((char *)i, &v10);
    if (!i) {
      break;
    }
    uint64_t v6 = v10;
    uint64_t v7 = *a3;
    if (v7 == a3[1])
    {
      int v8 = v7 + 1;
      sub_1B4BF71AC(a3, v7 + 1);
      *(void *)(sub_1B4BF764C((uint64_t)a3) + 8 * v7) = v6;
    }
    else
    {
      *(void *)(sub_1B4BF764C((uint64_t)a3) + 8 * v7) = v6;
      int v8 = v7 + 1;
    }
  }
  return i;
}

unsigned __int8 *sub_1B4BF47E8(uint64_t a1, unsigned __int8 *a2, int *a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  int v5 = *a2;
  if ((char)*a2 < 0)
  {
    uint64_t result = (unsigned __int8 *)sub_1B4BF3840((uint64_t)a2, *a2);
    if (!result) {
      return result;
    }
    int v5 = v7;
  }
  else
  {
    uint64_t result = a2 + 1;
  }
  unint64_t v8 = *(void *)(a1 + 8);
  int v9 = v8 - result;
  if (v5 <= (int)v8 - (int)result)
  {
LABEL_15:
    unint64_t v14 = (unint64_t)&result[v5];
    uint64_t result = sub_1B4BF4A0C(result, v14, a3);
    if ((unsigned __int8 *)v14 != result) {
      return 0;
    }
  }
  else
  {
    while (1)
    {
      uint64_t result = sub_1B4BF4A0C(result, v8, a3);
      if (!result) {
        break;
      }
      signed int v10 = result - *(void *)(a1 + 8);
      if (v10 >= 0x11)
      {
        sub_1B4BE6194((uint64_t)&v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 674);
        int v11 = sub_1B4BE61AC(&v18, "CHECK failed: overrun >= 0 && overrun <= kSlopBytes: ");
        sub_1B4BE62E8((uint64_t)&v17, (const char **)&v11->__r_.__value_.__l.__data_);
        sub_1B4BE62F0((uint64_t)&v18);
      }
      int v12 = v5 - v9;
      if (v5 - v9 <= 16)
      {
        __int16 v19 = 0;
        v18.__r_.__value_.__r.__words[2] = 0;
        *(_OWORD *)&v18.__r_.__value_.__l.__data_ = *(_OWORD *)*(void *)(a1 + 8);
        int v15 = sub_1B4BF4A0C((unsigned __int8 *)&v18 + v10, (unint64_t)&v18 + v12, a3);
        if (v15) {
          BOOL v16 = v15 == (unsigned __int8 *)((char *)&v18 + v12);
        }
        else {
          BOOL v16 = 0;
        }
        if (!v16) {
          return 0;
        }
        return (unsigned __int8 *)(*(void *)(a1 + 8) + v12);
      }
      int v5 = v5 - v9 - v10;
      if (v5 <= 0)
      {
        sub_1B4BE6194((uint64_t)&v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 688);
        BOOL v13 = sub_1B4BE61AC(&v18, "CHECK failed: (size) > (0): ");
        sub_1B4BE62E8((uint64_t)&v17, (const char **)&v13->__r_.__value_.__l.__data_);
        sub_1B4BE62F0((uint64_t)&v18);
      }
      if (*(int *)(a1 + 28) < 17) {
        return 0;
      }
      uint64_t result = (unsigned __int8 *)sub_1B4BF29F0(a1);
      if (!result) {
        return result;
      }
      result += v10;
      unint64_t v8 = *(void *)(a1 + 8);
      int v9 = v8 - result;
      if (v5 <= (int)v8 - (int)result) {
        goto LABEL_15;
      }
    }
  }
  return result;
}

void sub_1B4BF49E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1B4BE62F0((uint64_t)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_1B4BF4A0C(unsigned __int8 *a1, unint64_t a2, int *a3)
{
  for (uint64_t i = a1; (unint64_t)i < a2; *a3 = v8)
  {
    uint64_t v10 = 0;
    uint64_t i = sub_1B4BF3EF8((char *)i, &v10);
    if (!i) {
      break;
    }
    uint64_t v6 = v10;
    uint64_t v7 = *a3;
    if (v7 == a3[1])
    {
      int v8 = v7 + 1;
      sub_1B4BF7808(a3, v7 + 1);
      *(void *)(sub_1B4BF7CA8((uint64_t)a3) + 8 * v7) = v6;
    }
    else
    {
      *(void *)(sub_1B4BF7CA8((uint64_t)a3) + 8 * v7) = v6;
      int v8 = v7 + 1;
    }
  }
  return i;
}

unsigned __int8 *sub_1B4BF4ABC(uint64_t a1, unsigned __int8 *a2, int *a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  int v5 = *a2;
  if ((char)*a2 < 0)
  {
    uint64_t result = (unsigned __int8 *)sub_1B4BF3840((uint64_t)a2, *a2);
    if (!result) {
      return result;
    }
    int v5 = v7;
  }
  else
  {
    uint64_t result = a2 + 1;
  }
  unint64_t v8 = *(void *)(a1 + 8);
  int v9 = v8 - result;
  if (v5 <= (int)v8 - (int)result)
  {
LABEL_15:
    unint64_t v14 = (unint64_t)&result[v5];
    uint64_t result = sub_1B4BF4CE0(result, v14, a3);
    if ((unsigned __int8 *)v14 != result) {
      return 0;
    }
  }
  else
  {
    while (1)
    {
      uint64_t result = sub_1B4BF4CE0(result, v8, a3);
      if (!result) {
        break;
      }
      signed int v10 = result - *(void *)(a1 + 8);
      if (v10 >= 0x11)
      {
        sub_1B4BE6194((uint64_t)&v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 674);
        int v11 = sub_1B4BE61AC(&v18, "CHECK failed: overrun >= 0 && overrun <= kSlopBytes: ");
        sub_1B4BE62E8((uint64_t)&v17, (const char **)&v11->__r_.__value_.__l.__data_);
        sub_1B4BE62F0((uint64_t)&v18);
      }
      int v12 = v5 - v9;
      if (v5 - v9 <= 16)
      {
        __int16 v19 = 0;
        v18.__r_.__value_.__r.__words[2] = 0;
        *(_OWORD *)&v18.__r_.__value_.__l.__data_ = *(_OWORD *)*(void *)(a1 + 8);
        int v15 = sub_1B4BF4CE0((unsigned __int8 *)&v18 + v10, (unint64_t)&v18 + v12, a3);
        if (v15) {
          BOOL v16 = v15 == (unsigned __int8 *)((char *)&v18 + v12);
        }
        else {
          BOOL v16 = 0;
        }
        if (!v16) {
          return 0;
        }
        return (unsigned __int8 *)(*(void *)(a1 + 8) + v12);
      }
      int v5 = v5 - v9 - v10;
      if (v5 <= 0)
      {
        sub_1B4BE6194((uint64_t)&v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 688);
        BOOL v13 = sub_1B4BE61AC(&v18, "CHECK failed: (size) > (0): ");
        sub_1B4BE62E8((uint64_t)&v17, (const char **)&v13->__r_.__value_.__l.__data_);
        sub_1B4BE62F0((uint64_t)&v18);
      }
      if (*(int *)(a1 + 28) < 17) {
        return 0;
      }
      uint64_t result = (unsigned __int8 *)sub_1B4BF29F0(a1);
      if (!result) {
        return result;
      }
      result += v10;
      unint64_t v8 = *(void *)(a1 + 8);
      int v9 = v8 - result;
      if (v5 <= (int)v8 - (int)result) {
        goto LABEL_15;
      }
    }
  }
  return result;
}

void sub_1B4BF4CB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1B4BE62F0((uint64_t)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_1B4BF4CE0(unsigned __int8 *a1, unint64_t a2, int *a3)
{
  for (uint64_t i = a1; (unint64_t)i < a2; *a3 = v8)
  {
    uint64_t v10 = 0;
    uint64_t i = sub_1B4BF3EF8((char *)i, &v10);
    if (!i) {
      break;
    }
    int v6 = -(v10 & 1) ^ (v10 >> 1);
    uint64_t v7 = *a3;
    if (v7 == a3[1])
    {
      int v8 = v7 + 1;
      sub_1B4BF64F4(a3, v7 + 1);
      *(_DWORD *)(sub_1B4BF6994((uint64_t)a3) + 4 * v7) = v6;
    }
    else
    {
      *(_DWORD *)(sub_1B4BF6994((uint64_t)a3) + 4 * v7) = v6;
      int v8 = v7 + 1;
    }
  }
  return i;
}

unsigned __int8 *sub_1B4BF4D9C(uint64_t a1, unsigned __int8 *a2, int *a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  int v5 = *a2;
  if ((char)*a2 < 0)
  {
    uint64_t result = (unsigned __int8 *)sub_1B4BF3840((uint64_t)a2, *a2);
    if (!result) {
      return result;
    }
    int v5 = v7;
  }
  else
  {
    uint64_t result = a2 + 1;
  }
  unint64_t v8 = *(void *)(a1 + 8);
  int v9 = v8 - result;
  if (v5 <= (int)v8 - (int)result)
  {
LABEL_15:
    unint64_t v14 = (unint64_t)&result[v5];
    uint64_t result = sub_1B4BF4FC0(result, v14, a3);
    if ((unsigned __int8 *)v14 != result) {
      return 0;
    }
  }
  else
  {
    while (1)
    {
      uint64_t result = sub_1B4BF4FC0(result, v8, a3);
      if (!result) {
        break;
      }
      signed int v10 = result - *(void *)(a1 + 8);
      if (v10 >= 0x11)
      {
        sub_1B4BE6194((uint64_t)&v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 674);
        int v11 = sub_1B4BE61AC(&v18, "CHECK failed: overrun >= 0 && overrun <= kSlopBytes: ");
        sub_1B4BE62E8((uint64_t)&v17, (const char **)&v11->__r_.__value_.__l.__data_);
        sub_1B4BE62F0((uint64_t)&v18);
      }
      int v12 = v5 - v9;
      if (v5 - v9 <= 16)
      {
        __int16 v19 = 0;
        v18.__r_.__value_.__r.__words[2] = 0;
        *(_OWORD *)&v18.__r_.__value_.__l.__data_ = *(_OWORD *)*(void *)(a1 + 8);
        int v15 = sub_1B4BF4FC0((unsigned __int8 *)&v18 + v10, (unint64_t)&v18 + v12, a3);
        if (v15) {
          BOOL v16 = v15 == (unsigned __int8 *)((char *)&v18 + v12);
        }
        else {
          BOOL v16 = 0;
        }
        if (!v16) {
          return 0;
        }
        return (unsigned __int8 *)(*(void *)(a1 + 8) + v12);
      }
      int v5 = v5 - v9 - v10;
      if (v5 <= 0)
      {
        sub_1B4BE6194((uint64_t)&v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 688);
        BOOL v13 = sub_1B4BE61AC(&v18, "CHECK failed: (size) > (0): ");
        sub_1B4BE62E8((uint64_t)&v17, (const char **)&v13->__r_.__value_.__l.__data_);
        sub_1B4BE62F0((uint64_t)&v18);
      }
      if (*(int *)(a1 + 28) < 17) {
        return 0;
      }
      uint64_t result = (unsigned __int8 *)sub_1B4BF29F0(a1);
      if (!result) {
        return result;
      }
      result += v10;
      unint64_t v8 = *(void *)(a1 + 8);
      int v9 = v8 - result;
      if (v5 <= (int)v8 - (int)result) {
        goto LABEL_15;
      }
    }
  }
  return result;
}

void sub_1B4BF4F98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1B4BE62F0((uint64_t)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_1B4BF4FC0(unsigned __int8 *a1, unint64_t a2, int *a3)
{
  for (uint64_t i = a1; (unint64_t)i < a2; *a3 = v8)
  {
    unint64_t v10 = 0;
    uint64_t i = sub_1B4BF3EF8((char *)i, &v10);
    if (!i) {
      break;
    }
    unint64_t v6 = -(uint64_t)(v10 & 1) ^ (v10 >> 1);
    uint64_t v7 = *a3;
    if (v7 == a3[1])
    {
      int v8 = v7 + 1;
      sub_1B4BF71AC(a3, v7 + 1);
      *(void *)(sub_1B4BF764C((uint64_t)a3) + 8 * v7) = v6;
    }
    else
    {
      *(void *)(sub_1B4BF764C((uint64_t)a3) + 8 * v7) = v6;
      int v8 = v7 + 1;
    }
  }
  return i;
}

unsigned __int8 *sub_1B4BF507C(uint64_t a1, unsigned __int8 *a2, int *a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  int v5 = *a2;
  if ((char)*a2 < 0)
  {
    uint64_t result = (unsigned __int8 *)sub_1B4BF3840((uint64_t)a2, *a2);
    if (!result) {
      return result;
    }
    int v5 = v7;
  }
  else
  {
    uint64_t result = a2 + 1;
  }
  unint64_t v8 = *(void *)(a1 + 8);
  int v9 = v8 - result;
  if (v5 <= (int)v8 - (int)result)
  {
LABEL_15:
    unint64_t v14 = (unint64_t)&result[v5];
    uint64_t result = sub_1B4BF52A0(result, v14, a3);
    if ((unsigned __int8 *)v14 != result) {
      return 0;
    }
  }
  else
  {
    while (1)
    {
      uint64_t result = sub_1B4BF52A0(result, v8, a3);
      if (!result) {
        break;
      }
      signed int v10 = result - *(void *)(a1 + 8);
      if (v10 >= 0x11)
      {
        sub_1B4BE6194((uint64_t)&v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 674);
        int v11 = sub_1B4BE61AC(&v18, "CHECK failed: overrun >= 0 && overrun <= kSlopBytes: ");
        sub_1B4BE62E8((uint64_t)&v17, (const char **)&v11->__r_.__value_.__l.__data_);
        sub_1B4BE62F0((uint64_t)&v18);
      }
      int v12 = v5 - v9;
      if (v5 - v9 <= 16)
      {
        __int16 v19 = 0;
        v18.__r_.__value_.__r.__words[2] = 0;
        *(_OWORD *)&v18.__r_.__value_.__l.__data_ = *(_OWORD *)*(void *)(a1 + 8);
        int v15 = sub_1B4BF52A0((unsigned __int8 *)&v18 + v10, (unint64_t)&v18 + v12, a3);
        if (v15) {
          BOOL v16 = v15 == (unsigned __int8 *)((char *)&v18 + v12);
        }
        else {
          BOOL v16 = 0;
        }
        if (!v16) {
          return 0;
        }
        return (unsigned __int8 *)(*(void *)(a1 + 8) + v12);
      }
      int v5 = v5 - v9 - v10;
      if (v5 <= 0)
      {
        sub_1B4BE6194((uint64_t)&v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 688);
        BOOL v13 = sub_1B4BE61AC(&v18, "CHECK failed: (size) > (0): ");
        sub_1B4BE62E8((uint64_t)&v17, (const char **)&v13->__r_.__value_.__l.__data_);
        sub_1B4BE62F0((uint64_t)&v18);
      }
      if (*(int *)(a1 + 28) < 17) {
        return 0;
      }
      uint64_t result = (unsigned __int8 *)sub_1B4BF29F0(a1);
      if (!result) {
        return result;
      }
      result += v10;
      unint64_t v8 = *(void *)(a1 + 8);
      int v9 = v8 - result;
      if (v5 <= (int)v8 - (int)result) {
        goto LABEL_15;
      }
    }
  }
  return result;
}

void sub_1B4BF5278(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1B4BE62F0((uint64_t)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_1B4BF52A0(unsigned __int8 *a1, unint64_t a2, int *a3)
{
  for (uint64_t i = a1; (unint64_t)i < a2; *a3 = v8)
  {
    uint64_t v10 = 0;
    uint64_t i = sub_1B4BF3EF8((char *)i, &v10);
    if (!i) {
      break;
    }
    BOOL v6 = v10 != 0;
    uint64_t v7 = *a3;
    if (v7 == a3[1])
    {
      int v8 = v7 + 1;
      sub_1B4BF5EA0(a3, v7 + 1);
      *(unsigned char *)(sub_1B4BF633C((uint64_t)a3) + v7) = v6;
    }
    else
    {
      *(unsigned char *)(sub_1B4BF633C((uint64_t)a3) + v7) = v6;
      int v8 = v7 + 1;
    }
  }
  return i;
}

char *sub_1B4BF5358(uint64_t a1, char *a2, int a3, int *a4)
{
  int v5 = a3;
  BOOL v6 = a2;
  int v7 = *(_DWORD *)(a1 + 8) - a2 + 16;
  if (v7 >= a3)
  {
LABEL_5:
    sub_1B4BF6B50(a4, *a4 + (v5 >> 2));
    int v11 = (void *)sub_1B4BF6D24((uint64_t)a4, v5 >> 2);
    memcpy(v11, v6, (int)(v5 & 0xFFFFFFFC));
    if (v5 == (v5 & 0xFFFFFFFC)) {
      return &v6[v5 & 0xFFFFFFFC];
    }
    else {
      return 0;
    }
  }
  else
  {
    while (1)
    {
      sub_1B4BF6B50(a4, *a4 + (v7 >> 2));
      int v9 = (void *)sub_1B4BF6D24((uint64_t)a4, v7 >> 2);
      memcpy(v9, v6, (int)(v7 & 0xFFFFFFFC));
      if (*(int *)(a1 + 28) < 17) {
        return 0;
      }
      uint64_t result = (char *)sub_1B4BF29F0(a1);
      if (!result) {
        return result;
      }
      v5 -= v7 & 0xFFFFFFFC;
      BOOL v6 = &result[-(v7 & 3) + 16];
      int v7 = *(_DWORD *)(a1 + 8) - (result - (v7 & 3));
      if (v5 <= v7) {
        goto LABEL_5;
      }
    }
  }
}

char *sub_1B4BF5460(uint64_t a1, char *a2, int a3, int *a4)
{
  int v5 = a3;
  BOOL v6 = a2;
  int v7 = *(_DWORD *)(a1 + 8) - a2 + 16;
  if (v7 >= a3)
  {
LABEL_5:
    sub_1B4BF64F4(a4, *a4 + (v5 >> 2));
    int v11 = (void *)sub_1B4BF66C8((uint64_t)a4, v5 >> 2);
    memcpy(v11, v6, (int)(v5 & 0xFFFFFFFC));
    if (v5 == (v5 & 0xFFFFFFFC)) {
      return &v6[v5 & 0xFFFFFFFC];
    }
    else {
      return 0;
    }
  }
  else
  {
    while (1)
    {
      sub_1B4BF64F4(a4, *a4 + (v7 >> 2));
      int v9 = (void *)sub_1B4BF66C8((uint64_t)a4, v7 >> 2);
      memcpy(v9, v6, (int)(v7 & 0xFFFFFFFC));
      if (*(int *)(a1 + 28) < 17) {
        return 0;
      }
      uint64_t result = (char *)sub_1B4BF29F0(a1);
      if (!result) {
        return result;
      }
      v5 -= v7 & 0xFFFFFFFC;
      BOOL v6 = &result[-(v7 & 3) + 16];
      int v7 = *(_DWORD *)(a1 + 8) - (result - (v7 & 3));
      if (v5 <= v7) {
        goto LABEL_5;
      }
    }
  }
}

char *sub_1B4BF5568(uint64_t a1, char *a2, int a3, int *a4)
{
  int v5 = a3;
  BOOL v6 = a2;
  int v7 = *(_DWORD *)(a1 + 8) - a2 + 16;
  if (v7 >= a3)
  {
LABEL_5:
    sub_1B4BF7808(a4, *a4 + (v5 >> 3));
    int v11 = (void *)sub_1B4BF79DC((uint64_t)a4, v5 >> 3);
    memcpy(v11, v6, (int)(v5 & 0xFFFFFFF8));
    if (v5 == (v5 & 0xFFFFFFF8)) {
      return &v6[v5 & 0xFFFFFFF8];
    }
    else {
      return 0;
    }
  }
  else
  {
    while (1)
    {
      sub_1B4BF7808(a4, *a4 + (v7 >> 3));
      int v9 = (void *)sub_1B4BF79DC((uint64_t)a4, v7 >> 3);
      memcpy(v9, v6, (int)(v7 & 0xFFFFFFF8));
      if (*(int *)(a1 + 28) < 17) {
        return 0;
      }
      uint64_t result = (char *)sub_1B4BF29F0(a1);
      if (!result) {
        return result;
      }
      v5 -= v7 & 0xFFFFFFF8;
      BOOL v6 = &result[-(v7 & 7) + 16];
      int v7 = *(_DWORD *)(a1 + 8) - (result - (v7 & 7));
      if (v5 <= v7) {
        goto LABEL_5;
      }
    }
  }
}

char *sub_1B4BF5670(uint64_t a1, char *a2, int a3, int *a4)
{
  int v5 = a3;
  BOOL v6 = a2;
  int v7 = *(_DWORD *)(a1 + 8) - a2 + 16;
  if (v7 >= a3)
  {
LABEL_5:
    sub_1B4BF71AC(a4, *a4 + (v5 >> 3));
    int v11 = (void *)sub_1B4BF7380((uint64_t)a4, v5 >> 3);
    memcpy(v11, v6, (int)(v5 & 0xFFFFFFF8));
    if (v5 == (v5 & 0xFFFFFFF8)) {
      return &v6[v5 & 0xFFFFFFF8];
    }
    else {
      return 0;
    }
  }
  else
  {
    while (1)
    {
      sub_1B4BF71AC(a4, *a4 + (v7 >> 3));
      int v9 = (void *)sub_1B4BF7380((uint64_t)a4, v7 >> 3);
      memcpy(v9, v6, (int)(v7 & 0xFFFFFFF8));
      if (*(int *)(a1 + 28) < 17) {
        return 0;
      }
      uint64_t result = (char *)sub_1B4BF29F0(a1);
      if (!result) {
        return result;
      }
      v5 -= v7 & 0xFFFFFFF8;
      BOOL v6 = &result[-(v7 & 7) + 16];
      int v7 = *(_DWORD *)(a1 + 8) - (result - (v7 & 7));
      if (v5 <= v7) {
        goto LABEL_5;
      }
    }
  }
}

char *sub_1B4BF5778(uint64_t a1, char *a2, int a3, int *a4)
{
  int v5 = a3;
  BOOL v6 = a2;
  int v7 = *(_DWORD *)(a1 + 8) - a2 + 16;
  if (v7 >= a3)
  {
LABEL_5:
    sub_1B4BF7E64(a4, *a4 + (v5 >> 2));
    int v11 = (void *)sub_1B4BF8038((uint64_t)a4, v5 >> 2);
    memcpy(v11, v6, (int)(v5 & 0xFFFFFFFC));
    if (v5 == (v5 & 0xFFFFFFFC)) {
      return &v6[v5 & 0xFFFFFFFC];
    }
    else {
      return 0;
    }
  }
  else
  {
    while (1)
    {
      sub_1B4BF7E64(a4, *a4 + (v7 >> 2));
      int v9 = (void *)sub_1B4BF8038((uint64_t)a4, v7 >> 2);
      memcpy(v9, v6, (int)(v7 & 0xFFFFFFFC));
      if (*(int *)(a1 + 28) < 17) {
        return 0;
      }
      uint64_t result = (char *)sub_1B4BF29F0(a1);
      if (!result) {
        return result;
      }
      v5 -= v7 & 0xFFFFFFFC;
      BOOL v6 = &result[-(v7 & 3) + 16];
      int v7 = *(_DWORD *)(a1 + 8) - (result - (v7 & 3));
      if (v5 <= v7) {
        goto LABEL_5;
      }
    }
  }
}

char *sub_1B4BF5880(uint64_t a1, char *a2, int a3, int *a4)
{
  int v5 = a3;
  BOOL v6 = a2;
  int v7 = *(_DWORD *)(a1 + 8) - a2 + 16;
  if (v7 >= a3)
  {
LABEL_5:
    sub_1B4BF84C0(a4, *a4 + (v5 >> 3));
    int v11 = (void *)sub_1B4BF8694((uint64_t)a4, v5 >> 3);
    memcpy(v11, v6, (int)(v5 & 0xFFFFFFF8));
    if (v5 == (v5 & 0xFFFFFFF8)) {
      return &v6[v5 & 0xFFFFFFF8];
    }
    else {
      return 0;
    }
  }
  else
  {
    while (1)
    {
      sub_1B4BF84C0(a4, *a4 + (v7 >> 3));
      int v9 = (void *)sub_1B4BF8694((uint64_t)a4, v7 >> 3);
      memcpy(v9, v6, (int)(v7 & 0xFFFFFFF8));
      if (*(int *)(a1 + 28) < 17) {
        return 0;
      }
      uint64_t result = (char *)sub_1B4BF29F0(a1);
      if (!result) {
        return result;
      }
      v5 -= v7 & 0xFFFFFFF8;
      BOOL v6 = &result[-(v7 & 7) + 16];
      int v7 = *(_DWORD *)(a1 + 8) - (result - (v7 & 7));
      if (v5 <= v7) {
        goto LABEL_5;
      }
    }
  }
}

void sub_1B4BF5988(std::string **a1, int a2, unint64_t a3)
{
  int v3 = *a1;
  if (*a1)
  {
    unint64_t v6 = (8 * a2);
    if (v6 < 0x80)
    {
      LOBYTE(v7) = 8 * a2;
    }
    else
    {
      do
      {
        std::string::push_back(v3, v6 | 0x80);
        unint64_t v7 = v6 >> 7;
        unint64_t v8 = v6 >> 14;
        v6 >>= 7;
      }
      while (v8);
    }
    std::string::push_back(v3, v7);
    int v9 = *a1;
    if (a3 < 0x80)
    {
      LOBYTE(v1sub_1B4BC92E4(&a9, 0) = a3;
    }
    else
    {
      do
      {
        std::string::push_back(v9, a3 | 0x80);
        unint64_t v10 = a3 >> 7;
        unint64_t v11 = a3 >> 14;
        a3 >>= 7;
      }
      while (v11);
    }
    std::string::push_back(v9, v10);
  }
}

std::string *sub_1B4BF5A50(std::string *result, int a2, uint64_t a3)
{
  v9[1] = *MEMORY[0x1E4F143B8];
  int v3 = (std::string *)result->__r_.__value_.__r.__words[0];
  if (result->__r_.__value_.__r.__words[0])
  {
    int v5 = (std::string **)result;
    unint64_t v6 = (8 * a2) | 1u;
    if (v6 < 0x80)
    {
      LOBYTE(v7) = (8 * a2) | 1;
    }
    else
    {
      do
      {
        std::string::push_back(v3, v6 | 0x80);
        unint64_t v7 = v6 >> 7;
        unint64_t v8 = v6 >> 14;
        v6 >>= 7;
      }
      while (v8);
    }
    std::string::push_back(v3, v7);
    v9[0] = a3;
    return std::string::append(*v5, (const std::string::value_type *)v9, 8uLL);
  }
  return result;
}

const std::string::value_type *sub_1B4BF5B0C(std::string **a1, int a2, char *a3, uint64_t a4)
{
  int v7 = *a3;
  if (*a3 < 0)
  {
    uint64_t result = (const std::string::value_type *)sub_1B4BF3840((uint64_t)a3, *a3);
    if (!result) {
      return result;
    }
    unint64_t v8 = (std::string::value_type *)result;
    int v7 = v10;
  }
  else
  {
    unint64_t v8 = a3 + 1;
  }
  unint64_t v11 = *a1;
  if (*a1)
  {
    unint64_t v12 = (8 * a2) | 2u;
    if (v12 < 0x80)
    {
      LOBYTE(v13) = v12;
    }
    else
    {
      do
      {
        std::string::push_back(v11, v12 | 0x80);
        unint64_t v13 = v12 >> 7;
        unint64_t v14 = v12 >> 14;
        v12 >>= 7;
      }
      while (v14);
    }
    std::string::push_back(v11, v13);
    unint64_t v15 = v7;
    BOOL v16 = *a1;
    if (v7 < 0x80)
    {
      LOBYTE(v17) = v7;
    }
    else
    {
      do
      {
        std::string::push_back(v16, v15 | 0x80);
        unint64_t v17 = v15 >> 7;
        unint64_t v18 = v15 >> 14;
        v15 >>= 7;
      }
      while (v18);
    }
    std::string::push_back(v16, v17);
    __int16 v19 = *a1;
    return sub_1B4BF5E34(a4, v8, v7, v19);
  }
  else if (*(void *)(a4 + 8) - (void)v8 + 16 >= v7)
  {
    return &v8[v7];
  }
  else
  {
    return (const std::string::value_type *)sub_1B4BF31DC(a4, (int)v8, v7);
  }
}

char *sub_1B4BF5C78(std::string **a1, int a2, char *a3, int32x2_t *a4)
{
  int v7 = *a1;
  int v8 = 8 * a2;
  if (*a1)
  {
    unint64_t v9 = v8 | 3u;
    if (v9 < 0x80)
    {
      LOBYTE(v1sub_1B4BC92E4(&a9, 0) = v8 | 3;
    }
    else
    {
      do
      {
        std::string::push_back(v7, v9 | 0x80);
        unint64_t v10 = v9 >> 7;
        unint64_t v11 = v9 >> 14;
        v9 >>= 7;
      }
      while (v11);
    }
    std::string::push_back(v7, v10);
  }
  int v12 = a4[11].i32[0];
  BOOL v13 = __OFSUB__(v12--, 1);
  a4[11].i32[0] = v12;
  if (v12 < 0 != v13) {
    return 0;
  }
  ++a4[11].i32[1];
  unint64_t v14 = sub_1B4BF3C80((uint64_t)a1, a3, (uint64_t)a4);
  a4[11] = vadd_s32(a4[11], (int32x2_t)0xFFFFFFFF00000001);
  __int32 v15 = a4[10].i32[0];
  a4[10].i32[0] = 0;
  if (v15 != (v8 | 3) || v14 == 0) {
    return 0;
  }
  unint64_t v17 = v14;
  unint64_t v18 = *a1;
  if (v18)
  {
    unint64_t v19 = v8 | 4u;
    if (v19 < 0x80)
    {
      LOBYTE(v2sub_1B4BC92E4(&a9, 0) = v8 | 4;
    }
    else
    {
      do
      {
        std::string::push_back(v18, v19 | 0x80);
        unint64_t v20 = v19 >> 7;
        unint64_t v21 = v19 >> 14;
        v19 >>= 7;
      }
      while (v21);
    }
    std::string::push_back(v18, v20);
  }
  return v17;
}

std::string *sub_1B4BF5DA4(std::string *result, int a2, int a3)
{
  int v3 = (std::string *)result->__r_.__value_.__r.__words[0];
  if (result->__r_.__value_.__r.__words[0])
  {
    int v5 = (std::string **)result;
    unint64_t v6 = (8 * a2) | 5u;
    if (v6 < 0x80)
    {
      LOBYTE(v7) = (8 * a2) | 5;
    }
    else
    {
      do
      {
        std::string::push_back(v3, v6 | 0x80);
        unint64_t v7 = v6 >> 7;
        unint64_t v8 = v6 >> 14;
        v6 >>= 7;
      }
      while (v8);
    }
    std::string::push_back(v3, v7);
    *(_DWORD *)__s = a3;
    return std::string::append(*v5, __s, 4uLL);
  }
  return result;
}

const std::string::value_type *sub_1B4BF5E34(uint64_t a1, std::string::value_type *__s, int a3, std::string *this)
{
  if (*(void *)(a1 + 8) - (void)__s + 16 >= a3)
  {
    uint64_t v6 = a3;
    std::string::append(this, __s, a3);
    return &__s[v6];
  }
  else
  {
    return sub_1B4BF344C(a1, __s, a3, this);
  }
}

void sub_1B4BF5EA0(int *a1, int a2)
{
  int v2 = a1[1];
  if (v2 >= a2) {
    return;
  }
  if (v2 < 1)
  {
    int v5 = 0;
    if (v2)
    {
LABEL_4:
      uint64_t v6 = *(void *)(sub_1B4BF633C((uint64_t)a1) - 8);
      if (a2 >= 4)
      {
        int v7 = a1[1];
        if (v7 > 0x3FFFFFFF)
        {
          if (a2 <= 0x40000000)
          {
            sub_1B4BE6194((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1550);
            unint64_t v8 = sub_1B4BE61AC(v15, "CHECK failed: (new_size) > (kRepeatedFieldUpperClampLimit): ");
            sub_1B4BE62E8((uint64_t)&v14, (const char **)&v8->__r_.__value_.__l.__data_);
            sub_1B4BE62F0((uint64_t)v15);
          }
          unsigned int v9 = 0x7FFFFFFF;
          goto LABEL_16;
        }
        goto LABEL_13;
      }
      goto LABEL_11;
    }
  }
  else
  {
    int v5 = (void *)(sub_1B4BF633C((uint64_t)a1) - 8);
    if (a1[1]) {
      goto LABEL_4;
    }
  }
  uint64_t v6 = *((void *)a1 + 1);
  if (a2 >= 4)
  {
    int v7 = 0;
LABEL_13:
    int v10 = 2 * v7;
    if (v10 <= a2) {
      unsigned int v9 = a2;
    }
    else {
      unsigned int v9 = v10;
    }
    goto LABEL_16;
  }
LABEL_11:
  unsigned int v9 = 4;
LABEL_16:
  if (v6)
  {
    uint64_t v11 = (v9 + 15) & 0x1FFFFFFF8;
    if (*(unsigned char *)(v6 + 24)) {
      (*(void (**)(void, void, uint64_t))(**(void **)(*(void *)(v6 + 32) + 32) + 40))(*(void *)(*(void *)(v6 + 32) + 32), MEMORY[0x1E4FBA380], v11);
    }
    int v12 = (void *)sub_1B4BE4B00(v6, v11);
  }
  else
  {
    int v12 = operator new(v9 + 8);
  }
  *int v12 = v6;
  a1[1] = v9;
  *((void *)a1 + 1) = v12 + 1;
  sub_1B4BF633C((uint64_t)a1);
  if (*a1 >= 1)
  {
    BOOL v13 = (void *)sub_1B4BF633C((uint64_t)a1);
    memcpy(v13, v5 + 1, *a1);
  }
  if (v5)
  {
    if (!*v5) {
      operator delete(v5);
    }
  }
}

void sub_1B4BF6058(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1B4BE62F0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B4BF6070(uint64_t a1, int a2)
{
  int v4 = *(_DWORD *)a1;
  if (*(_DWORD *)(a1 + 4) - *(_DWORD *)a1 < a2)
  {
    sub_1B4BE6194((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1278);
    int v5 = sub_1B4BE61AC(v11, "CHECK failed: (total_size_ - current_size_) >= (n): ");
    uint64_t v6 = sub_1B4BE63A4(v5, *(_DWORD *)(a1 + 4));
    int v7 = sub_1B4BE61AC(v6, ", ");
    unint64_t v8 = sub_1B4BE63A4(v7, *(_DWORD *)a1);
    sub_1B4BE62E8((uint64_t)&v10, (const char **)&v8->__r_.__value_.__l.__data_);
    sub_1B4BE62F0((uint64_t)v11);
    int v4 = *(_DWORD *)a1;
  }
  uint64_t result = *(void *)(a1 + 8) + v4;
  *(_DWORD *)a1 = v4 + a2;
  return result;
}

void sub_1B4BF6118(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1B4BE62F0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B4BF6130(_DWORD *a1, int a2)
{
  if (a2 < 0)
  {
    sub_1B4BE6194((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1322);
    int v4 = sub_1B4BE61AC(v8, "CHECK failed: (index) >= (0): ");
    sub_1B4BE62E8((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_1B4BE62F0((uint64_t)v8);
  }
  if (*a1 <= a2)
  {
    sub_1B4BE6194((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1323);
    int v5 = sub_1B4BE61AC(v8, "CHECK failed: (index) < (current_size_): ");
    sub_1B4BE62E8((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_1B4BE62F0((uint64_t)v8);
  }
  return sub_1B4BF633C((uint64_t)a1) + a2;
}

void sub_1B4BF61F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1B4BE62F0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B4BF6210(_DWORD *a1, int a2)
{
  if (a2 < 0)
  {
    sub_1B4BE6194((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1301);
    int v4 = sub_1B4BE61AC(v8, "CHECK failed: (index) >= (0): ");
    sub_1B4BE62E8((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_1B4BE62F0((uint64_t)v8);
  }
  if (*a1 <= a2)
  {
    sub_1B4BE6194((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1302);
    int v5 = sub_1B4BE61AC(v8, "CHECK failed: (index) < (current_size_): ");
    sub_1B4BE62E8((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_1B4BE62F0((uint64_t)v8);
  }
  return sub_1B4BF633C((uint64_t)a1) + a2;
}

void sub_1B4BF62D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1B4BE62F0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B4BF62F0(uint64_t a1)
{
  if (*(int *)(a1 + 4) >= 1)
  {
    uint64_t v2 = sub_1B4BF633C(a1);
    uint64_t v4 = *(void *)(v2 - 8);
    int v3 = (void *)(v2 - 8);
    if (!v4) {
      operator delete(v3);
    }
  }
  return a1;
}

uint64_t sub_1B4BF633C(uint64_t a1)
{
  if (*(int *)(a1 + 4) <= 0)
  {
    sub_1B4BE6194((uint64_t)v5, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 352);
    uint64_t v2 = sub_1B4BE61AC(v5, "CHECK failed: (total_size_) > (0): ");
    sub_1B4BE62E8((uint64_t)&v4, (const char **)&v2->__r_.__value_.__l.__data_);
    sub_1B4BE62F0((uint64_t)v5);
  }
  return *(void *)(a1 + 8);
}

void sub_1B4BF63B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1B4BE62F0((uint64_t)va);
  _Unwind_Resume(a1);
}

int *sub_1B4BF63C8(int *result, int *a2)
{
  int v3 = result;
  if (a2 == result)
  {
    sub_1B4BE6194((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1415);
    char v4 = sub_1B4BE61AC(v10, "CHECK failed: (&other) != (this): ");
    sub_1B4BE62E8((uint64_t)&v9, (const char **)&v4->__r_.__value_.__l.__data_);
    uint64_t result = (int *)sub_1B4BE62F0((uint64_t)v10);
  }
  if (*a2)
  {
    int v5 = *v3;
    sub_1B4BF5EA0(v3, *v3 + *a2);
    sub_1B4BF6070((uint64_t)v3, *a2);
    uint64_t v6 = (void *)sub_1B4BF6130(v3, v5);
    if (*a2 <= 0)
    {
      sub_1B4BE6194((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1302);
      char v7 = sub_1B4BE61AC(v10, "CHECK failed: (index) < (current_size_): ");
      sub_1B4BE62E8((uint64_t)&v9, (const char **)&v7->__r_.__value_.__l.__data_);
      sub_1B4BE62F0((uint64_t)v10);
    }
    unint64_t v8 = (const void *)sub_1B4BF633C((uint64_t)a2);
    return (int *)memcpy(v6, v8, *a2);
  }
  return result;
}

void sub_1B4BF64D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1B4BE62F0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1B4BF64F4(int *a1, int a2)
{
  int v2 = a1[1];
  if (v2 >= a2) {
    return;
  }
  if (v2 < 1)
  {
    int v5 = 0;
    if (v2)
    {
LABEL_4:
      uint64_t v6 = *(void *)(sub_1B4BF6994((uint64_t)a1) - 8);
      if (a2 >= 4)
      {
        int v7 = a1[1];
        if (v7 > 0x3FFFFFFF)
        {
          if (a2 <= 0x40000000)
          {
            sub_1B4BE6194((uint64_t)v16, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1550);
            unint64_t v8 = sub_1B4BE61AC(v16, "CHECK failed: (new_size) > (kRepeatedFieldUpperClampLimit): ");
            sub_1B4BE62E8((uint64_t)&v15, (const char **)&v8->__r_.__value_.__l.__data_);
            sub_1B4BE62F0((uint64_t)v16);
          }
          unsigned int v9 = 0x7FFFFFFF;
          goto LABEL_16;
        }
        goto LABEL_13;
      }
      goto LABEL_11;
    }
  }
  else
  {
    int v5 = (void *)(sub_1B4BF6994((uint64_t)a1) - 8);
    if (a1[1]) {
      goto LABEL_4;
    }
  }
  uint64_t v6 = *((void *)a1 + 1);
  if (a2 >= 4)
  {
    int v7 = 0;
LABEL_13:
    int v10 = 2 * v7;
    if (v10 <= a2) {
      unsigned int v9 = a2;
    }
    else {
      unsigned int v9 = v10;
    }
    goto LABEL_16;
  }
LABEL_11:
  unsigned int v9 = 4;
LABEL_16:
  uint64_t v11 = 4 * v9;
  if (v6)
  {
    uint64_t v12 = (v11 + 15) & 0x7FFFFFFF8;
    if (*(unsigned char *)(v6 + 24)) {
      (*(void (**)(void, void, uint64_t))(**(void **)(*(void *)(v6 + 32) + 32) + 40))(*(void *)(*(void *)(v6 + 32) + 32), MEMORY[0x1E4FBA380], v12);
    }
    BOOL v13 = (void *)sub_1B4BE4B00(v6, v12);
  }
  else
  {
    BOOL v13 = operator new(v11 + 8);
  }
  void *v13 = v6;
  a1[1] = v9;
  *((void *)a1 + 1) = v13 + 1;
  sub_1B4BF6994((uint64_t)a1);
  if (*a1 >= 1)
  {
    char v14 = (void *)sub_1B4BF6994((uint64_t)a1);
    memcpy(v14, v5 + 1, 4 * *a1);
  }
  if (v5)
  {
    if (!*v5) {
      operator delete(v5);
    }
  }
}

void sub_1B4BF66B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1B4BE62F0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B4BF66C8(uint64_t a1, int a2)
{
  int v4 = *(_DWORD *)a1;
  if (*(_DWORD *)(a1 + 4) - *(_DWORD *)a1 < a2)
  {
    sub_1B4BE6194((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1278);
    int v5 = sub_1B4BE61AC(v11, "CHECK failed: (total_size_ - current_size_) >= (n): ");
    uint64_t v6 = sub_1B4BE63A4(v5, *(_DWORD *)(a1 + 4));
    int v7 = sub_1B4BE61AC(v6, ", ");
    unint64_t v8 = sub_1B4BE63A4(v7, *(_DWORD *)a1);
    sub_1B4BE62E8((uint64_t)&v10, (const char **)&v8->__r_.__value_.__l.__data_);
    sub_1B4BE62F0((uint64_t)v11);
    int v4 = *(_DWORD *)a1;
  }
  uint64_t result = *(void *)(a1 + 8) + 4 * v4;
  *(_DWORD *)a1 = v4 + a2;
  return result;
}

void sub_1B4BF6770(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1B4BE62F0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B4BF6788(_DWORD *a1, int a2)
{
  if (a2 < 0)
  {
    sub_1B4BE6194((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1322);
    int v4 = sub_1B4BE61AC(v8, "CHECK failed: (index) >= (0): ");
    sub_1B4BE62E8((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_1B4BE62F0((uint64_t)v8);
  }
  if (*a1 <= a2)
  {
    sub_1B4BE6194((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1323);
    int v5 = sub_1B4BE61AC(v8, "CHECK failed: (index) < (current_size_): ");
    sub_1B4BE62E8((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_1B4BE62F0((uint64_t)v8);
  }
  return sub_1B4BF6994((uint64_t)a1) + 4 * a2;
}

void sub_1B4BF6848(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1B4BE62F0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B4BF6868(_DWORD *a1, int a2)
{
  if (a2 < 0)
  {
    sub_1B4BE6194((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1301);
    int v4 = sub_1B4BE61AC(v8, "CHECK failed: (index) >= (0): ");
    sub_1B4BE62E8((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_1B4BE62F0((uint64_t)v8);
  }
  if (*a1 <= a2)
  {
    sub_1B4BE6194((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1302);
    int v5 = sub_1B4BE61AC(v8, "CHECK failed: (index) < (current_size_): ");
    sub_1B4BE62E8((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_1B4BE62F0((uint64_t)v8);
  }
  return sub_1B4BF6994((uint64_t)a1) + 4 * a2;
}

void sub_1B4BF6928(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1B4BE62F0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B4BF6948(uint64_t a1)
{
  if (*(int *)(a1 + 4) >= 1)
  {
    uint64_t v2 = sub_1B4BF6994(a1);
    uint64_t v4 = *(void *)(v2 - 8);
    int v3 = (void *)(v2 - 8);
    if (!v4) {
      operator delete(v3);
    }
  }
  return a1;
}

uint64_t sub_1B4BF6994(uint64_t a1)
{
  if (*(int *)(a1 + 4) <= 0)
  {
    sub_1B4BE6194((uint64_t)v5, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 352);
    uint64_t v2 = sub_1B4BE61AC(v5, "CHECK failed: (total_size_) > (0): ");
    sub_1B4BE62E8((uint64_t)&v4, (const char **)&v2->__r_.__value_.__l.__data_);
    sub_1B4BE62F0((uint64_t)v5);
  }
  return *(void *)(a1 + 8);
}

void sub_1B4BF6A08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1B4BE62F0((uint64_t)va);
  _Unwind_Resume(a1);
}

int *sub_1B4BF6A20(int *result, int *a2)
{
  int v3 = result;
  if (a2 == result)
  {
    sub_1B4BE6194((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1415);
    char v4 = sub_1B4BE61AC(v10, "CHECK failed: (&other) != (this): ");
    sub_1B4BE62E8((uint64_t)&v9, (const char **)&v4->__r_.__value_.__l.__data_);
    uint64_t result = (int *)sub_1B4BE62F0((uint64_t)v10);
  }
  if (*a2)
  {
    int v5 = *v3;
    sub_1B4BF64F4(v3, *v3 + *a2);
    sub_1B4BF66C8((uint64_t)v3, *a2);
    uint64_t v6 = (void *)sub_1B4BF6788(v3, v5);
    if (*a2 <= 0)
    {
      sub_1B4BE6194((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1302);
      char v7 = sub_1B4BE61AC(v10, "CHECK failed: (index) < (current_size_): ");
      sub_1B4BE62E8((uint64_t)&v9, (const char **)&v7->__r_.__value_.__l.__data_);
      sub_1B4BE62F0((uint64_t)v10);
    }
    unint64_t v8 = (const void *)sub_1B4BF6994((uint64_t)a2);
    return (int *)memcpy(v6, v8, 4 * *a2);
  }
  return result;
}

void sub_1B4BF6B30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1B4BE62F0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1B4BF6B50(int *a1, int a2)
{
  int v2 = a1[1];
  if (v2 >= a2) {
    return;
  }
  if (v2 < 1)
  {
    int v5 = 0;
    if (v2)
    {
LABEL_4:
      uint64_t v6 = *(void *)(sub_1B4BF6FF0((uint64_t)a1) - 8);
      if (a2 >= 4)
      {
        int v7 = a1[1];
        if (v7 > 0x3FFFFFFF)
        {
          if (a2 <= 0x40000000)
          {
            sub_1B4BE6194((uint64_t)v16, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1550);
            unint64_t v8 = sub_1B4BE61AC(v16, "CHECK failed: (new_size) > (kRepeatedFieldUpperClampLimit): ");
            sub_1B4BE62E8((uint64_t)&v15, (const char **)&v8->__r_.__value_.__l.__data_);
            sub_1B4BE62F0((uint64_t)v16);
          }
          unsigned int v9 = 0x7FFFFFFF;
          goto LABEL_16;
        }
        goto LABEL_13;
      }
      goto LABEL_11;
    }
  }
  else
  {
    int v5 = (void *)(sub_1B4BF6FF0((uint64_t)a1) - 8);
    if (a1[1]) {
      goto LABEL_4;
    }
  }
  uint64_t v6 = *((void *)a1 + 1);
  if (a2 >= 4)
  {
    int v7 = 0;
LABEL_13:
    int v10 = 2 * v7;
    if (v10 <= a2) {
      unsigned int v9 = a2;
    }
    else {
      unsigned int v9 = v10;
    }
    goto LABEL_16;
  }
LABEL_11:
  unsigned int v9 = 4;
LABEL_16:
  uint64_t v11 = 4 * v9;
  if (v6)
  {
    uint64_t v12 = (v11 + 15) & 0x7FFFFFFF8;
    if (*(unsigned char *)(v6 + 24)) {
      (*(void (**)(void, void, uint64_t))(**(void **)(*(void *)(v6 + 32) + 32) + 40))(*(void *)(*(void *)(v6 + 32) + 32), MEMORY[0x1E4FBA380], v12);
    }
    BOOL v13 = (void *)sub_1B4BE4B00(v6, v12);
  }
  else
  {
    BOOL v13 = operator new(v11 + 8);
  }
  void *v13 = v6;
  a1[1] = v9;
  *((void *)a1 + 1) = v13 + 1;
  sub_1B4BF6FF0((uint64_t)a1);
  if (*a1 >= 1)
  {
    char v14 = (void *)sub_1B4BF6FF0((uint64_t)a1);
    memcpy(v14, v5 + 1, 4 * *a1);
  }
  if (v5)
  {
    if (!*v5) {
      operator delete(v5);
    }
  }
}

void sub_1B4BF6D0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1B4BE62F0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B4BF6D24(uint64_t a1, int a2)
{
  int v4 = *(_DWORD *)a1;
  if (*(_DWORD *)(a1 + 4) - *(_DWORD *)a1 < a2)
  {
    sub_1B4BE6194((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1278);
    int v5 = sub_1B4BE61AC(v11, "CHECK failed: (total_size_ - current_size_) >= (n): ");
    uint64_t v6 = sub_1B4BE63A4(v5, *(_DWORD *)(a1 + 4));
    int v7 = sub_1B4BE61AC(v6, ", ");
    unint64_t v8 = sub_1B4BE63A4(v7, *(_DWORD *)a1);
    sub_1B4BE62E8((uint64_t)&v10, (const char **)&v8->__r_.__value_.__l.__data_);
    sub_1B4BE62F0((uint64_t)v11);
    int v4 = *(_DWORD *)a1;
  }
  uint64_t result = *(void *)(a1 + 8) + 4 * v4;
  *(_DWORD *)a1 = v4 + a2;
  return result;
}

void sub_1B4BF6DCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1B4BE62F0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B4BF6DE4(_DWORD *a1, int a2)
{
  if (a2 < 0)
  {
    sub_1B4BE6194((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1322);
    int v4 = sub_1B4BE61AC(v8, "CHECK failed: (index) >= (0): ");
    sub_1B4BE62E8((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_1B4BE62F0((uint64_t)v8);
  }
  if (*a1 <= a2)
  {
    sub_1B4BE6194((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1323);
    int v5 = sub_1B4BE61AC(v8, "CHECK failed: (index) < (current_size_): ");
    sub_1B4BE62E8((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_1B4BE62F0((uint64_t)v8);
  }
  return sub_1B4BF6FF0((uint64_t)a1) + 4 * a2;
}

void sub_1B4BF6EA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1B4BE62F0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B4BF6EC4(_DWORD *a1, int a2)
{
  if (a2 < 0)
  {
    sub_1B4BE6194((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1301);
    int v4 = sub_1B4BE61AC(v8, "CHECK failed: (index) >= (0): ");
    sub_1B4BE62E8((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_1B4BE62F0((uint64_t)v8);
  }
  if (*a1 <= a2)
  {
    sub_1B4BE6194((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1302);
    int v5 = sub_1B4BE61AC(v8, "CHECK failed: (index) < (current_size_): ");
    sub_1B4BE62E8((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_1B4BE62F0((uint64_t)v8);
  }
  return sub_1B4BF6FF0((uint64_t)a1) + 4 * a2;
}

void sub_1B4BF6F84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1B4BE62F0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B4BF6FA4(uint64_t a1)
{
  if (*(int *)(a1 + 4) >= 1)
  {
    uint64_t v2 = sub_1B4BF6FF0(a1);
    uint64_t v4 = *(void *)(v2 - 8);
    int v3 = (void *)(v2 - 8);
    if (!v4) {
      operator delete(v3);
    }
  }
  return a1;
}

uint64_t sub_1B4BF6FF0(uint64_t a1)
{
  if (*(int *)(a1 + 4) <= 0)
  {
    sub_1B4BE6194((uint64_t)v5, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 352);
    uint64_t v2 = sub_1B4BE61AC(v5, "CHECK failed: (total_size_) > (0): ");
    sub_1B4BE62E8((uint64_t)&v4, (const char **)&v2->__r_.__value_.__l.__data_);
    sub_1B4BE62F0((uint64_t)v5);
  }
  return *(void *)(a1 + 8);
}

void sub_1B4BF7064(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1B4BE62F0((uint64_t)va);
  _Unwind_Resume(a1);
}

int *sub_1B4BF707C(int *result, int *a2)
{
  int v3 = result;
  if (a2 == result)
  {
    sub_1B4BE6194((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1415);
    char v4 = sub_1B4BE61AC(v10, "CHECK failed: (&other) != (this): ");
    sub_1B4BE62E8((uint64_t)&v9, (const char **)&v4->__r_.__value_.__l.__data_);
    uint64_t result = (int *)sub_1B4BE62F0((uint64_t)v10);
  }
  if (*a2)
  {
    int v5 = *v3;
    sub_1B4BF6B50(v3, *v3 + *a2);
    sub_1B4BF6D24((uint64_t)v3, *a2);
    uint64_t v6 = (void *)sub_1B4BF6DE4(v3, v5);
    if (*a2 <= 0)
    {
      sub_1B4BE6194((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1302);
      char v7 = sub_1B4BE61AC(v10, "CHECK failed: (index) < (current_size_): ");
      sub_1B4BE62E8((uint64_t)&v9, (const char **)&v7->__r_.__value_.__l.__data_);
      sub_1B4BE62F0((uint64_t)v10);
    }
    unint64_t v8 = (const void *)sub_1B4BF6FF0((uint64_t)a2);
    return (int *)memcpy(v6, v8, 4 * *a2);
  }
  return result;
}

void sub_1B4BF718C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1B4BE62F0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1B4BF71AC(int *a1, int a2)
{
  int v2 = a1[1];
  if (v2 >= a2) {
    return;
  }
  if (v2 < 1)
  {
    int v5 = 0;
    if (v2)
    {
LABEL_4:
      uint64_t v6 = *(void *)(sub_1B4BF764C((uint64_t)a1) - 8);
      if (a2 >= 4)
      {
        int v7 = a1[1];
        if (v7 > 0x3FFFFFFF)
        {
          if (a2 <= 0x40000000)
          {
            sub_1B4BE6194((uint64_t)v16, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1550);
            unint64_t v8 = sub_1B4BE61AC(v16, "CHECK failed: (new_size) > (kRepeatedFieldUpperClampLimit): ");
            sub_1B4BE62E8((uint64_t)&v15, (const char **)&v8->__r_.__value_.__l.__data_);
            sub_1B4BE62F0((uint64_t)v16);
          }
          unsigned int v9 = 0x7FFFFFFF;
          goto LABEL_16;
        }
        goto LABEL_13;
      }
      goto LABEL_11;
    }
  }
  else
  {
    int v5 = (void *)(sub_1B4BF764C((uint64_t)a1) - 8);
    if (a1[1]) {
      goto LABEL_4;
    }
  }
  uint64_t v6 = *((void *)a1 + 1);
  if (a2 >= 4)
  {
    int v7 = 0;
LABEL_13:
    int v10 = 2 * v7;
    if (v10 <= a2) {
      unsigned int v9 = a2;
    }
    else {
      unsigned int v9 = v10;
    }
    goto LABEL_16;
  }
LABEL_11:
  unsigned int v9 = 4;
LABEL_16:
  uint64_t v11 = 8 * v9;
  if (v6)
  {
    uint64_t v12 = (v11 + 15) & 0xFFFFFFFF8;
    if (*(unsigned char *)(v6 + 24)) {
      (*(void (**)(void, void, uint64_t))(**(void **)(*(void *)(v6 + 32) + 32) + 40))(*(void *)(*(void *)(v6 + 32) + 32), MEMORY[0x1E4FBA380], v12);
    }
    BOOL v13 = (void *)sub_1B4BE4B00(v6, v12);
  }
  else
  {
    BOOL v13 = operator new(v11 + 8);
  }
  void *v13 = v6;
  a1[1] = v9;
  *((void *)a1 + 1) = v13 + 1;
  sub_1B4BF764C((uint64_t)a1);
  if (*a1 >= 1)
  {
    char v14 = (void *)sub_1B4BF764C((uint64_t)a1);
    memcpy(v14, v5 + 1, 8 * *a1);
  }
  if (v5)
  {
    if (!*v5) {
      operator delete(v5);
    }
  }
}

void sub_1B4BF7368(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1B4BE62F0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B4BF7380(uint64_t a1, int a2)
{
  int v4 = *(_DWORD *)a1;
  if (*(_DWORD *)(a1 + 4) - *(_DWORD *)a1 < a2)
  {
    sub_1B4BE6194((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1278);
    int v5 = sub_1B4BE61AC(v11, "CHECK failed: (total_size_ - current_size_) >= (n): ");
    uint64_t v6 = sub_1B4BE63A4(v5, *(_DWORD *)(a1 + 4));
    int v7 = sub_1B4BE61AC(v6, ", ");
    unint64_t v8 = sub_1B4BE63A4(v7, *(_DWORD *)a1);
    sub_1B4BE62E8((uint64_t)&v10, (const char **)&v8->__r_.__value_.__l.__data_);
    sub_1B4BE62F0((uint64_t)v11);
    int v4 = *(_DWORD *)a1;
  }
  uint64_t result = *(void *)(a1 + 8) + 8 * v4;
  *(_DWORD *)a1 = v4 + a2;
  return result;
}

void sub_1B4BF7428(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1B4BE62F0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B4BF7440(_DWORD *a1, int a2)
{
  if (a2 < 0)
  {
    sub_1B4BE6194((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1322);
    int v4 = sub_1B4BE61AC(v8, "CHECK failed: (index) >= (0): ");
    sub_1B4BE62E8((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_1B4BE62F0((uint64_t)v8);
  }
  if (*a1 <= a2)
  {
    sub_1B4BE6194((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1323);
    int v5 = sub_1B4BE61AC(v8, "CHECK failed: (index) < (current_size_): ");
    sub_1B4BE62E8((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_1B4BE62F0((uint64_t)v8);
  }
  return sub_1B4BF764C((uint64_t)a1) + 8 * a2;
}

void sub_1B4BF7500(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1B4BE62F0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B4BF7520(_DWORD *a1, int a2)
{
  if (a2 < 0)
  {
    sub_1B4BE6194((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1301);
    int v4 = sub_1B4BE61AC(v8, "CHECK failed: (index) >= (0): ");
    sub_1B4BE62E8((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_1B4BE62F0((uint64_t)v8);
  }
  if (*a1 <= a2)
  {
    sub_1B4BE6194((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1302);
    int v5 = sub_1B4BE61AC(v8, "CHECK failed: (index) < (current_size_): ");
    sub_1B4BE62E8((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_1B4BE62F0((uint64_t)v8);
  }
  return sub_1B4BF764C((uint64_t)a1) + 8 * a2;
}

void sub_1B4BF75E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1B4BE62F0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B4BF7600(uint64_t a1)
{
  if (*(int *)(a1 + 4) >= 1)
  {
    uint64_t v2 = sub_1B4BF764C(a1);
    uint64_t v4 = *(void *)(v2 - 8);
    int v3 = (void *)(v2 - 8);
    if (!v4) {
      operator delete(v3);
    }
  }
  return a1;
}

uint64_t sub_1B4BF764C(uint64_t a1)
{
  if (*(int *)(a1 + 4) <= 0)
  {
    sub_1B4BE6194((uint64_t)v5, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 352);
    uint64_t v2 = sub_1B4BE61AC(v5, "CHECK failed: (total_size_) > (0): ");
    sub_1B4BE62E8((uint64_t)&v4, (const char **)&v2->__r_.__value_.__l.__data_);
    sub_1B4BE62F0((uint64_t)v5);
  }
  return *(void *)(a1 + 8);
}

void sub_1B4BF76C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1B4BE62F0((uint64_t)va);
  _Unwind_Resume(a1);
}

int *sub_1B4BF76D8(int *result, int *a2)
{
  int v3 = result;
  if (a2 == result)
  {
    sub_1B4BE6194((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1415);
    char v4 = sub_1B4BE61AC(v10, "CHECK failed: (&other) != (this): ");
    sub_1B4BE62E8((uint64_t)&v9, (const char **)&v4->__r_.__value_.__l.__data_);
    uint64_t result = (int *)sub_1B4BE62F0((uint64_t)v10);
  }
  if (*a2)
  {
    int v5 = *v3;
    sub_1B4BF71AC(v3, *v3 + *a2);
    sub_1B4BF7380((uint64_t)v3, *a2);
    uint64_t v6 = (void *)sub_1B4BF7440(v3, v5);
    if (*a2 <= 0)
    {
      sub_1B4BE6194((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1302);
      char v7 = sub_1B4BE61AC(v10, "CHECK failed: (index) < (current_size_): ");
      sub_1B4BE62E8((uint64_t)&v9, (const char **)&v7->__r_.__value_.__l.__data_);
      sub_1B4BE62F0((uint64_t)v10);
    }
    unint64_t v8 = (const void *)sub_1B4BF764C((uint64_t)a2);
    return (int *)memcpy(v6, v8, 8 * *a2);
  }
  return result;
}

void sub_1B4BF77E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1B4BE62F0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1B4BF7808(int *a1, int a2)
{
  int v2 = a1[1];
  if (v2 >= a2) {
    return;
  }
  if (v2 < 1)
  {
    int v5 = 0;
    if (v2)
    {
LABEL_4:
      uint64_t v6 = *(void *)(sub_1B4BF7CA8((uint64_t)a1) - 8);
      if (a2 >= 4)
      {
        int v7 = a1[1];
        if (v7 > 0x3FFFFFFF)
        {
          if (a2 <= 0x40000000)
          {
            sub_1B4BE6194((uint64_t)v16, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1550);
            unint64_t v8 = sub_1B4BE61AC(v16, "CHECK failed: (new_size) > (kRepeatedFieldUpperClampLimit): ");
            sub_1B4BE62E8((uint64_t)&v15, (const char **)&v8->__r_.__value_.__l.__data_);
            sub_1B4BE62F0((uint64_t)v16);
          }
          unsigned int v9 = 0x7FFFFFFF;
          goto LABEL_16;
        }
        goto LABEL_13;
      }
      goto LABEL_11;
    }
  }
  else
  {
    int v5 = (void *)(sub_1B4BF7CA8((uint64_t)a1) - 8);
    if (a1[1]) {
      goto LABEL_4;
    }
  }
  uint64_t v6 = *((void *)a1 + 1);
  if (a2 >= 4)
  {
    int v7 = 0;
LABEL_13:
    int v10 = 2 * v7;
    if (v10 <= a2) {
      unsigned int v9 = a2;
    }
    else {
      unsigned int v9 = v10;
    }
    goto LABEL_16;
  }
LABEL_11:
  unsigned int v9 = 4;
LABEL_16:
  uint64_t v11 = 8 * v9;
  if (v6)
  {
    uint64_t v12 = (v11 + 15) & 0xFFFFFFFF8;
    if (*(unsigned char *)(v6 + 24)) {
      (*(void (**)(void, void, uint64_t))(**(void **)(*(void *)(v6 + 32) + 32) + 40))(*(void *)(*(void *)(v6 + 32) + 32), MEMORY[0x1E4FBA380], v12);
    }
    BOOL v13 = (void *)sub_1B4BE4B00(v6, v12);
  }
  else
  {
    BOOL v13 = operator new(v11 + 8);
  }
  void *v13 = v6;
  a1[1] = v9;
  *((void *)a1 + 1) = v13 + 1;
  sub_1B4BF7CA8((uint64_t)a1);
  if (*a1 >= 1)
  {
    char v14 = (void *)sub_1B4BF7CA8((uint64_t)a1);
    memcpy(v14, v5 + 1, 8 * *a1);
  }
  if (v5)
  {
    if (!*v5) {
      operator delete(v5);
    }
  }
}

void sub_1B4BF79C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1B4BE62F0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B4BF79DC(uint64_t a1, int a2)
{
  int v4 = *(_DWORD *)a1;
  if (*(_DWORD *)(a1 + 4) - *(_DWORD *)a1 < a2)
  {
    sub_1B4BE6194((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1278);
    int v5 = sub_1B4BE61AC(v11, "CHECK failed: (total_size_ - current_size_) >= (n): ");
    uint64_t v6 = sub_1B4BE63A4(v5, *(_DWORD *)(a1 + 4));
    int v7 = sub_1B4BE61AC(v6, ", ");
    unint64_t v8 = sub_1B4BE63A4(v7, *(_DWORD *)a1);
    sub_1B4BE62E8((uint64_t)&v10, (const char **)&v8->__r_.__value_.__l.__data_);
    sub_1B4BE62F0((uint64_t)v11);
    int v4 = *(_DWORD *)a1;
  }
  uint64_t result = *(void *)(a1 + 8) + 8 * v4;
  *(_DWORD *)a1 = v4 + a2;
  return result;
}

void sub_1B4BF7A84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1B4BE62F0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B4BF7A9C(_DWORD *a1, int a2)
{
  if (a2 < 0)
  {
    sub_1B4BE6194((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1322);
    int v4 = sub_1B4BE61AC(v8, "CHECK failed: (index) >= (0): ");
    sub_1B4BE62E8((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_1B4BE62F0((uint64_t)v8);
  }
  if (*a1 <= a2)
  {
    sub_1B4BE6194((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1323);
    int v5 = sub_1B4BE61AC(v8, "CHECK failed: (index) < (current_size_): ");
    sub_1B4BE62E8((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_1B4BE62F0((uint64_t)v8);
  }
  return sub_1B4BF7CA8((uint64_t)a1) + 8 * a2;
}

void sub_1B4BF7B5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1B4BE62F0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B4BF7B7C(_DWORD *a1, int a2)
{
  if (a2 < 0)
  {
    sub_1B4BE6194((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1301);
    int v4 = sub_1B4BE61AC(v8, "CHECK failed: (index) >= (0): ");
    sub_1B4BE62E8((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_1B4BE62F0((uint64_t)v8);
  }
  if (*a1 <= a2)
  {
    sub_1B4BE6194((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1302);
    int v5 = sub_1B4BE61AC(v8, "CHECK failed: (index) < (current_size_): ");
    sub_1B4BE62E8((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_1B4BE62F0((uint64_t)v8);
  }
  return sub_1B4BF7CA8((uint64_t)a1) + 8 * a2;
}

void sub_1B4BF7C3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1B4BE62F0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B4BF7C5C(uint64_t a1)
{
  if (*(int *)(a1 + 4) >= 1)
  {
    uint64_t v2 = sub_1B4BF7CA8(a1);
    uint64_t v4 = *(void *)(v2 - 8);
    int v3 = (void *)(v2 - 8);
    if (!v4) {
      operator delete(v3);
    }
  }
  return a1;
}

uint64_t sub_1B4BF7CA8(uint64_t a1)
{
  if (*(int *)(a1 + 4) <= 0)
  {
    sub_1B4BE6194((uint64_t)v5, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 352);
    uint64_t v2 = sub_1B4BE61AC(v5, "CHECK failed: (total_size_) > (0): ");
    sub_1B4BE62E8((uint64_t)&v4, (const char **)&v2->__r_.__value_.__l.__data_);
    sub_1B4BE62F0((uint64_t)v5);
  }
  return *(void *)(a1 + 8);
}

void sub_1B4BF7D1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1B4BE62F0((uint64_t)va);
  _Unwind_Resume(a1);
}

int *sub_1B4BF7D34(int *result, int *a2)
{
  int v3 = result;
  if (a2 == result)
  {
    sub_1B4BE6194((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1415);
    char v4 = sub_1B4BE61AC(v10, "CHECK failed: (&other) != (this): ");
    sub_1B4BE62E8((uint64_t)&v9, (const char **)&v4->__r_.__value_.__l.__data_);
    uint64_t result = (int *)sub_1B4BE62F0((uint64_t)v10);
  }
  if (*a2)
  {
    int v5 = *v3;
    sub_1B4BF7808(v3, *v3 + *a2);
    sub_1B4BF79DC((uint64_t)v3, *a2);
    uint64_t v6 = (void *)sub_1B4BF7A9C(v3, v5);
    if (*a2 <= 0)
    {
      sub_1B4BE6194((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1302);
      char v7 = sub_1B4BE61AC(v10, "CHECK failed: (index) < (current_size_): ");
      sub_1B4BE62E8((uint64_t)&v9, (const char **)&v7->__r_.__value_.__l.__data_);
      sub_1B4BE62F0((uint64_t)v10);
    }
    unint64_t v8 = (const void *)sub_1B4BF7CA8((uint64_t)a2);
    return (int *)memcpy(v6, v8, 8 * *a2);
  }
  return result;
}

void sub_1B4BF7E44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1B4BE62F0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1B4BF7E64(int *a1, int a2)
{
  int v2 = a1[1];
  if (v2 >= a2) {
    return;
  }
  if (v2 < 1)
  {
    int v5 = 0;
    if (v2)
    {
LABEL_4:
      uint64_t v6 = *(void *)(sub_1B4BF8304((uint64_t)a1) - 8);
      if (a2 >= 4)
      {
        int v7 = a1[1];
        if (v7 > 0x3FFFFFFF)
        {
          if (a2 <= 0x40000000)
          {
            sub_1B4BE6194((uint64_t)v16, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1550);
            unint64_t v8 = sub_1B4BE61AC(v16, "CHECK failed: (new_size) > (kRepeatedFieldUpperClampLimit): ");
            sub_1B4BE62E8((uint64_t)&v15, (const char **)&v8->__r_.__value_.__l.__data_);
            sub_1B4BE62F0((uint64_t)v16);
          }
          unsigned int v9 = 0x7FFFFFFF;
          goto LABEL_16;
        }
        goto LABEL_13;
      }
      goto LABEL_11;
    }
  }
  else
  {
    int v5 = (void *)(sub_1B4BF8304((uint64_t)a1) - 8);
    if (a1[1]) {
      goto LABEL_4;
    }
  }
  uint64_t v6 = *((void *)a1 + 1);
  if (a2 >= 4)
  {
    int v7 = 0;
LABEL_13:
    int v10 = 2 * v7;
    if (v10 <= a2) {
      unsigned int v9 = a2;
    }
    else {
      unsigned int v9 = v10;
    }
    goto LABEL_16;
  }
LABEL_11:
  unsigned int v9 = 4;
LABEL_16:
  uint64_t v11 = 4 * v9;
  if (v6)
  {
    uint64_t v12 = (v11 + 15) & 0x7FFFFFFF8;
    if (*(unsigned char *)(v6 + 24)) {
      (*(void (**)(void, void, uint64_t))(**(void **)(*(void *)(v6 + 32) + 32) + 40))(*(void *)(*(void *)(v6 + 32) + 32), MEMORY[0x1E4FBA380], v12);
    }
    BOOL v13 = (void *)sub_1B4BE4B00(v6, v12);
  }
  else
  {
    BOOL v13 = operator new(v11 + 8);
  }
  void *v13 = v6;
  a1[1] = v9;
  *((void *)a1 + 1) = v13 + 1;
  sub_1B4BF8304((uint64_t)a1);
  if (*a1 >= 1)
  {
    char v14 = (void *)sub_1B4BF8304((uint64_t)a1);
    memcpy(v14, v5 + 1, 4 * *a1);
  }
  if (v5)
  {
    if (!*v5) {
      operator delete(v5);
    }
  }
}

void sub_1B4BF8020(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1B4BE62F0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B4BF8038(uint64_t a1, int a2)
{
  int v4 = *(_DWORD *)a1;
  if (*(_DWORD *)(a1 + 4) - *(_DWORD *)a1 < a2)
  {
    sub_1B4BE6194((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1278);
    int v5 = sub_1B4BE61AC(v11, "CHECK failed: (total_size_ - current_size_) >= (n): ");
    uint64_t v6 = sub_1B4BE63A4(v5, *(_DWORD *)(a1 + 4));
    int v7 = sub_1B4BE61AC(v6, ", ");
    unint64_t v8 = sub_1B4BE63A4(v7, *(_DWORD *)a1);
    sub_1B4BE62E8((uint64_t)&v10, (const char **)&v8->__r_.__value_.__l.__data_);
    sub_1B4BE62F0((uint64_t)v11);
    int v4 = *(_DWORD *)a1;
  }
  uint64_t result = *(void *)(a1 + 8) + 4 * v4;
  *(_DWORD *)a1 = v4 + a2;
  return result;
}

void sub_1B4BF80E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1B4BE62F0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B4BF80F8(_DWORD *a1, int a2)
{
  if (a2 < 0)
  {
    sub_1B4BE6194((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1322);
    int v4 = sub_1B4BE61AC(v8, "CHECK failed: (index) >= (0): ");
    sub_1B4BE62E8((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_1B4BE62F0((uint64_t)v8);
  }
  if (*a1 <= a2)
  {
    sub_1B4BE6194((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1323);
    int v5 = sub_1B4BE61AC(v8, "CHECK failed: (index) < (current_size_): ");
    sub_1B4BE62E8((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_1B4BE62F0((uint64_t)v8);
  }
  return sub_1B4BF8304((uint64_t)a1) + 4 * a2;
}

void sub_1B4BF81B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1B4BE62F0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B4BF81D8(_DWORD *a1, int a2)
{
  if (a2 < 0)
  {
    sub_1B4BE6194((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1301);
    int v4 = sub_1B4BE61AC(v8, "CHECK failed: (index) >= (0): ");
    sub_1B4BE62E8((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_1B4BE62F0((uint64_t)v8);
  }
  if (*a1 <= a2)
  {
    sub_1B4BE6194((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1302);
    int v5 = sub_1B4BE61AC(v8, "CHECK failed: (index) < (current_size_): ");
    sub_1B4BE62E8((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_1B4BE62F0((uint64_t)v8);
  }
  return sub_1B4BF8304((uint64_t)a1) + 4 * a2;
}

void sub_1B4BF8298(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1B4BE62F0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B4BF82B8(uint64_t a1)
{
  if (*(int *)(a1 + 4) >= 1)
  {
    uint64_t v2 = sub_1B4BF8304(a1);
    uint64_t v4 = *(void *)(v2 - 8);
    int v3 = (void *)(v2 - 8);
    if (!v4) {
      operator delete(v3);
    }
  }
  return a1;
}

uint64_t sub_1B4BF8304(uint64_t a1)
{
  if (*(int *)(a1 + 4) <= 0)
  {
    sub_1B4BE6194((uint64_t)v5, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 352);
    uint64_t v2 = sub_1B4BE61AC(v5, "CHECK failed: (total_size_) > (0): ");
    sub_1B4BE62E8((uint64_t)&v4, (const char **)&v2->__r_.__value_.__l.__data_);
    sub_1B4BE62F0((uint64_t)v5);
  }
  return *(void *)(a1 + 8);
}

void sub_1B4BF8378(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1B4BE62F0((uint64_t)va);
  _Unwind_Resume(a1);
}

int *sub_1B4BF8390(int *result, int *a2)
{
  int v3 = result;
  if (a2 == result)
  {
    sub_1B4BE6194((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1415);
    char v4 = sub_1B4BE61AC(v10, "CHECK failed: (&other) != (this): ");
    sub_1B4BE62E8((uint64_t)&v9, (const char **)&v4->__r_.__value_.__l.__data_);
    uint64_t result = (int *)sub_1B4BE62F0((uint64_t)v10);
  }
  if (*a2)
  {
    int v5 = *v3;
    sub_1B4BF7E64(v3, *v3 + *a2);
    sub_1B4BF8038((uint64_t)v3, *a2);
    uint64_t v6 = (void *)sub_1B4BF80F8(v3, v5);
    if (*a2 <= 0)
    {
      sub_1B4BE6194((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1302);
      char v7 = sub_1B4BE61AC(v10, "CHECK failed: (index) < (current_size_): ");
      sub_1B4BE62E8((uint64_t)&v9, (const char **)&v7->__r_.__value_.__l.__data_);
      sub_1B4BE62F0((uint64_t)v10);
    }
    unint64_t v8 = (const void *)sub_1B4BF8304((uint64_t)a2);
    return (int *)memcpy(v6, v8, 4 * *a2);
  }
  return result;
}

void sub_1B4BF84A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1B4BE62F0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1B4BF84C0(int *a1, int a2)
{
  int v2 = a1[1];
  if (v2 >= a2) {
    return;
  }
  if (v2 < 1)
  {
    int v5 = 0;
    if (v2)
    {
LABEL_4:
      uint64_t v6 = *(void *)(sub_1B4BF8960((uint64_t)a1) - 8);
      if (a2 >= 4)
      {
        int v7 = a1[1];
        if (v7 > 0x3FFFFFFF)
        {
          if (a2 <= 0x40000000)
          {
            sub_1B4BE6194((uint64_t)v16, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1550);
            unint64_t v8 = sub_1B4BE61AC(v16, "CHECK failed: (new_size) > (kRepeatedFieldUpperClampLimit): ");
            sub_1B4BE62E8((uint64_t)&v15, (const char **)&v8->__r_.__value_.__l.__data_);
            sub_1B4BE62F0((uint64_t)v16);
          }
          unsigned int v9 = 0x7FFFFFFF;
          goto LABEL_16;
        }
        goto LABEL_13;
      }
      goto LABEL_11;
    }
  }
  else
  {
    int v5 = (void *)(sub_1B4BF8960((uint64_t)a1) - 8);
    if (a1[1]) {
      goto LABEL_4;
    }
  }
  uint64_t v6 = *((void *)a1 + 1);
  if (a2 >= 4)
  {
    int v7 = 0;
LABEL_13:
    int v10 = 2 * v7;
    if (v10 <= a2) {
      unsigned int v9 = a2;
    }
    else {
      unsigned int v9 = v10;
    }
    goto LABEL_16;
  }
LABEL_11:
  unsigned int v9 = 4;
LABEL_16:
  uint64_t v11 = 8 * v9;
  if (v6)
  {
    uint64_t v12 = (v11 + 15) & 0xFFFFFFFF8;
    if (*(unsigned char *)(v6 + 24)) {
      (*(void (**)(void, void, uint64_t))(**(void **)(*(void *)(v6 + 32) + 32) + 40))(*(void *)(*(void *)(v6 + 32) + 32), MEMORY[0x1E4FBA380], v12);
    }
    BOOL v13 = (void *)sub_1B4BE4B00(v6, v12);
  }
  else
  {
    BOOL v13 = operator new(v11 + 8);
  }
  void *v13 = v6;
  a1[1] = v9;
  *((void *)a1 + 1) = v13 + 1;
  sub_1B4BF8960((uint64_t)a1);
  if (*a1 >= 1)
  {
    char v14 = (void *)sub_1B4BF8960((uint64_t)a1);
    memcpy(v14, v5 + 1, 8 * *a1);
  }
  if (v5)
  {
    if (!*v5) {
      operator delete(v5);
    }
  }
}

void sub_1B4BF867C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1B4BE62F0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B4BF8694(uint64_t a1, int a2)
{
  int v4 = *(_DWORD *)a1;
  if (*(_DWORD *)(a1 + 4) - *(_DWORD *)a1 < a2)
  {
    sub_1B4BE6194((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1278);
    int v5 = sub_1B4BE61AC(v11, "CHECK failed: (total_size_ - current_size_) >= (n): ");
    uint64_t v6 = sub_1B4BE63A4(v5, *(_DWORD *)(a1 + 4));
    int v7 = sub_1B4BE61AC(v6, ", ");
    unint64_t v8 = sub_1B4BE63A4(v7, *(_DWORD *)a1);
    sub_1B4BE62E8((uint64_t)&v10, (const char **)&v8->__r_.__value_.__l.__data_);
    sub_1B4BE62F0((uint64_t)v11);
    int v4 = *(_DWORD *)a1;
  }
  uint64_t result = *(void *)(a1 + 8) + 8 * v4;
  *(_DWORD *)a1 = v4 + a2;
  return result;
}

void sub_1B4BF873C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1B4BE62F0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B4BF8754(_DWORD *a1, int a2)
{
  if (a2 < 0)
  {
    sub_1B4BE6194((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1322);
    int v4 = sub_1B4BE61AC(v8, "CHECK failed: (index) >= (0): ");
    sub_1B4BE62E8((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_1B4BE62F0((uint64_t)v8);
  }
  if (*a1 <= a2)
  {
    sub_1B4BE6194((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1323);
    int v5 = sub_1B4BE61AC(v8, "CHECK failed: (index) < (current_size_): ");
    sub_1B4BE62E8((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_1B4BE62F0((uint64_t)v8);
  }
  return sub_1B4BF8960((uint64_t)a1) + 8 * a2;
}

void sub_1B4BF8814(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1B4BE62F0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B4BF8834(_DWORD *a1, int a2)
{
  if (a2 < 0)
  {
    sub_1B4BE6194((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1301);
    int v4 = sub_1B4BE61AC(v8, "CHECK failed: (index) >= (0): ");
    sub_1B4BE62E8((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_1B4BE62F0((uint64_t)v8);
  }
  if (*a1 <= a2)
  {
    sub_1B4BE6194((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1302);
    int v5 = sub_1B4BE61AC(v8, "CHECK failed: (index) < (current_size_): ");
    sub_1B4BE62E8((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_1B4BE62F0((uint64_t)v8);
  }
  return sub_1B4BF8960((uint64_t)a1) + 8 * a2;
}

void sub_1B4BF88F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1B4BE62F0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B4BF8914(uint64_t a1)
{
  if (*(int *)(a1 + 4) >= 1)
  {
    uint64_t v2 = sub_1B4BF8960(a1);
    uint64_t v4 = *(void *)(v2 - 8);
    int v3 = (void *)(v2 - 8);
    if (!v4) {
      operator delete(v3);
    }
  }
  return a1;
}

uint64_t sub_1B4BF8960(uint64_t a1)
{
  if (*(int *)(a1 + 4) <= 0)
  {
    sub_1B4BE6194((uint64_t)v5, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 352);
    uint64_t v2 = sub_1B4BE61AC(v5, "CHECK failed: (total_size_) > (0): ");
    sub_1B4BE62E8((uint64_t)&v4, (const char **)&v2->__r_.__value_.__l.__data_);
    sub_1B4BE62F0((uint64_t)v5);
  }
  return *(void *)(a1 + 8);
}

void sub_1B4BF89D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1B4BE62F0((uint64_t)va);
  _Unwind_Resume(a1);
}

int *sub_1B4BF89EC(int *result, int *a2)
{
  int v3 = result;
  if (a2 == result)
  {
    sub_1B4BE6194((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1415);
    char v4 = sub_1B4BE61AC(v10, "CHECK failed: (&other) != (this): ");
    sub_1B4BE62E8((uint64_t)&v9, (const char **)&v4->__r_.__value_.__l.__data_);
    uint64_t result = (int *)sub_1B4BE62F0((uint64_t)v10);
  }
  if (*a2)
  {
    int v5 = *v3;
    sub_1B4BF84C0(v3, *v3 + *a2);
    sub_1B4BF8694((uint64_t)v3, *a2);
    uint64_t v6 = (void *)sub_1B4BF8754(v3, v5);
    if (*a2 <= 0)
    {
      sub_1B4BE6194((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1302);
      char v7 = sub_1B4BE61AC(v10, "CHECK failed: (index) < (current_size_): ");
      sub_1B4BE62E8((uint64_t)&v9, (const char **)&v7->__r_.__value_.__l.__data_);
      sub_1B4BE62F0((uint64_t)v10);
    }
    unint64_t v8 = (const void *)sub_1B4BF8960((uint64_t)a2);
    return (int *)memcpy(v6, v8, 8 * *a2);
  }
  return result;
}

void sub_1B4BF8AFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1B4BE62F0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_1B4BF8B1C(uint64_t *a1)
{
  sub_1B4BF8B58(a1);
  return sub_1B4BD727C(a1);
}

void sub_1B4BF8B58(void *a1)
{
  uint64_t v2 = (unsigned int *)a1[2];
  if (v2 && !*a1)
  {
    int v3 = (uint64_t *)(v2 + 2);
    uint64_t v4 = *v2;
    if ((int)v4 >= 1)
    {
      do
      {
        uint64_t v5 = *v3;
        if (*v3)
        {
          if (*(char *)(v5 + 23) < 0) {
            operator delete(*(void **)v5);
          }
          MEMORY[0x1BA9929C0](v5, 0x1012C40EC159624);
        }
        ++v3;
        --v4;
      }
      while (v4);
      uint64_t v2 = (unsigned int *)a1[2];
    }
    operator delete(v2);
  }
  a1[2] = 0;
}

uint64_t sub_1B4BF8BEC(uint64_t result, int a2)
{
  int v2 = *(_DWORD *)(result + 8);
  BOOL v3 = __OFSUB__(a2, v2);
  int v4 = a2 - v2;
  if (!((v4 < 0) ^ v3 | (v4 == 0))) {
    return sub_1B4BF8C00((uint64_t *)result, v4);
  }
  return result;
}

uint64_t sub_1B4BF8C00(uint64_t *a1, int a2)
{
  int v2 = *((_DWORD *)a1 + 2);
  int v3 = *((_DWORD *)a1 + 3);
  int v4 = v2 + a2;
  uint64_t v5 = (unsigned int *)a1[2];
  if (v3 < v2 + a2)
  {
    uint64_t v7 = *a1;
    int v8 = 2 * v3;
    if (2 * v3 <= v4) {
      int v8 = v4;
    }
    if (v8 <= 4) {
      unsigned int v9 = 4;
    }
    else {
      unsigned int v9 = v8;
    }
    uint64_t v10 = 8 * v9;
    if (v7)
    {
      uint64_t v11 = (v10 + 15) & 0x7FFFFFFF8;
      if (*(unsigned char *)(v7 + 24)) {
        (*(void (**)(void, void, uint64_t))(**(void **)(*(void *)(v7 + 32) + 32) + 40))(*(void *)(*(void *)(v7 + 32) + 32), MEMORY[0x1E4FBA380], v11);
      }
      uint64_t v12 = (unsigned int *)sub_1B4BE4B00(v7, v11);
    }
    else
    {
      uint64_t v12 = (unsigned int *)operator new(v10 + 8);
    }
    a1[2] = (uint64_t)v12;
    *((_DWORD *)a1 + 3) = v9;
    if (v5 && (uint64_t v13 = *v5, (int)v13 >= 1))
    {
      memcpy(v12 + 2, v5 + 2, 8 * v13);
      uint64_t v12 = (unsigned int *)a1[2];
      *uint64_t v12 = *v5;
      if (!v7) {
        goto LABEL_17;
      }
    }
    else
    {
      *uint64_t v12 = 0;
      if (!v7)
      {
LABEL_17:
        operator delete(v5);
        uint64_t v12 = (unsigned int *)a1[2];
      }
    }
    int v2 = *((_DWORD *)a1 + 2);
    uint64_t v5 = v12;
  }
  return (uint64_t)&v5[2 * v2 + 2];
}

uint64_t sub_1B4BF8D2C(uint64_t a1, _DWORD *a2, unint64_t a3)
{
  *(void *)a1 = &unk_1F0D54498;
  *(void *)(a1 + 16) = &unk_1F0D548F0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = &unk_1F0D548F0;
  *(_DWORD *)(a1 + 4sub_1B4BC92E4(&a9, 0) = 0;
  uint64_t v6 = (uint64_t *)(a1 + 88);
  sub_1B4BE3D84((void *)(a1 + 88));
  sub_1B4BF8E24(a1, a2, a3, &v8);
  sub_1B4BE3FAC(v6, &v8);
  sub_1B4BE3D8C(&v8);
  return a1;
}

void sub_1B4BF8E00(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1B4BE3D8C((uint64_t *)va);
  sub_1B4BE3D8C(v2);
  _Unwind_Resume(a1);
}

void *sub_1B4BF8E24@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v13 = a2;
  unint64_t v14 = a3;
  int v12 = 0;
  uint64_t result = sub_1B4BAF808(a2, a3, &v12, a4);
  if (!*a4)
  {
    sub_1B4BE3D8C(a4);
    uint64_t result = sub_1B4BE2088(&v13, 4uLL, a4);
    if (!*a4)
    {
      sub_1B4BE3D8C(a4);
      *(_DWORD *)(a1 + 8) = v12;
      int v11 = 0;
      uint64_t result = sub_1B4BAF808(v13, v14, &v11, a4);
      if (!*a4)
      {
        sub_1B4BE3D8C(a4);
        uint64_t result = sub_1B4BE2088(&v13, 4uLL, a4);
        if (!*a4)
        {
          sub_1B4BE3D8C(a4);
          *(_DWORD *)(a1 + 24) = v11;
          int v10 = 0;
          uint64_t result = sub_1B4BAF808(v13, v14, &v10, a4);
          if (!*a4)
          {
            sub_1B4BE3D8C(a4);
            uint64_t result = sub_1B4BE2088(&v13, 4uLL, a4);
            if (!*a4)
            {
              sub_1B4BE3D8C(a4);
              int v7 = v10;
              *(_DWORD *)(a1 + 48) = 0;
              *(_DWORD *)(a1 + 4sub_1B4BC92E4(&a9, 0) = v7;
              uint64_t result = sub_1B4BAF60C(v13, v14, (_DWORD *)(a1 + 48), a4);
              if (!*a4)
              {
                sub_1B4BE3D8C(a4);
                uint64_t result = sub_1B4BE2088(&v13, 4uLL, a4);
                if (!*a4)
                {
                  sub_1B4BE3D8C(a4);
                  *(void *)(a1 + 56) = v13;
                  unint64_t v8 = sub_1B4BE1FFC(*(int *)(a1 + 48), 4uLL);
                  uint64_t result = sub_1B4BE2088(&v13, v8, a4);
                  if (!*a4)
                  {
                    sub_1B4BE3D8C(a4);
                    *(void *)(a1 + 64) = v13;
                    uint64_t result = sub_1B4BE2088(&v13, 4 * *(int *)(a1 + 48), a4);
                    if (!*a4)
                    {
                      sub_1B4BE3D8C(a4);
                      *(void *)(a1 + 72) = v13;
                      uint64_t result = sub_1B4BE2088(&v13, 4 * *(int *)(a1 + 48) + 20, a4);
                      if (!*a4)
                      {
                        unsigned int v9 = sub_1B4BE3D8C(a4);
                        *(void *)(a1 + 8sub_1B4BC92E4(&a9, 0) = v13;
                        return sub_1B4BE3D84(v9);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

void sub_1B4BF9024()
{
}

uint64_t sub_1B4BF9038(uint64_t a1)
{
  return *(_DWORD *)(a1 + 8) & 1;
}

uint64_t sub_1B4BF9044(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 8) >> 1) & 1;
}

uint64_t sub_1B4BF9050(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 8) >> 2) & 1;
}

uint64_t sub_1B4BF905C(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 8) >> 3) & 1;
}

void *sub_1B4BF9068(void *a1)
{
  *a1 = &unk_1F0D54498;
  sub_1B4BE3D8C(a1 + 11);
  return a1;
}

void sub_1B4BF90AC(void *a1)
{
  *a1 = &unk_1F0D54498;
  sub_1B4BE3D8C(a1 + 11);
  JUMPOUT(0x1BA9929C0);
}

uint64_t sub_1B4BF9110(uint64_t a1)
{
  return *(unsigned int *)(a1 + 48);
}

const char *sub_1B4BF9118(uint64_t a1)
{
  uint64_t v1 = (const char *)(*(void *)(a1 + 80) + **(unsigned int **)(a1 + 72));
  strlen(v1);
  return v1;
}

const char *sub_1B4BF9150(uint64_t a1)
{
  uint64_t v1 = (const char *)(*(void *)(a1 + 80) + *(unsigned int *)(*(void *)(a1 + 72) + 4));
  strlen(v1);
  return v1;
}

const char *sub_1B4BF9188(uint64_t a1)
{
  uint64_t v1 = (const char *)(*(void *)(a1 + 80) + *(unsigned int *)(*(void *)(a1 + 72) + 8));
  strlen(v1);
  return v1;
}

const char *sub_1B4BF91C0(uint64_t a1)
{
  uint64_t v1 = (const char *)(*(void *)(a1 + 80) + *(unsigned int *)(*(void *)(a1 + 72) + 12));
  strlen(v1);
  return v1;
}

const char *sub_1B4BF91F8(uint64_t a1)
{
  uint64_t v1 = (const char *)(*(void *)(a1 + 80) + *(unsigned int *)(*(void *)(a1 + 72) + 16));
  strlen(v1);
  return v1;
}

uint64_t sub_1B4BF9230(uint64_t a1)
{
  return *(_DWORD *)(a1 + 8) & 1;
}

uint64_t sub_1B4BF923C(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 8) >> 1) & 1;
}

uint64_t sub_1B4BF9248(uint64_t a1)
{
  return *(_DWORD *)(a1 + 8) >> 30;
}

const char *sub_1B4BF9254(uint64_t a1, int a2)
{
  int v2 = (const char *)(*(void *)(a1 + 80) + *(unsigned int *)(*(void *)(a1 + 72) + 4 * (a2 + 5)));
  strlen(v2);
  return v2;
}

float sub_1B4BF9290(uint64_t a1, int a2)
{
  return *(float *)(*(void *)(a1 + 64) + 4 * a2);
}

BOOL sub_1B4BF929C(uint64_t a1, int a2)
{
  return *(unsigned char *)(*(void *)(a1 + 56) + a2) == 1;
}

BOOL sub_1B4BF92B0(uint64_t a1, int a2)
{
  return *(unsigned char *)(*(void *)(a1 + 56) + a2) == 2;
}

BOOL sub_1B4BF92C4(uint64_t a1, int a2)
{
  return *(unsigned char *)(*(void *)(a1 + 56) + a2) == 3;
}

BOOL sub_1B4BF92D8(uint64_t a1, int a2)
{
  return *(unsigned char *)(*(void *)(a1 + 56) + a2) == 4;
}

BOOL sub_1B4BF92EC(uint64_t a1, int a2)
{
  return *(unsigned char *)(*(void *)(a1 + 56) + a2) == 5;
}

BOOL sub_1B4BF9300(uint64_t a1, int a2)
{
  return *(unsigned char *)(*(void *)(a1 + 56) + a2) == 6;
}

uint64_t sub_1B4BF9314(uint64_t a1)
{
  return a1 + 16;
}

uint64_t sub_1B4BF931C(uint64_t a1)
{
  return a1 + 32;
}

BOOL sub_1B4BF9324(uint64_t a1, uint64_t a2)
{
  int v3 = *(void **)(a1 + 32);
  std::ios_base::getloc((const std::ios_base *)((char *)v3 + *(void *)(*v3 - 24)));
  int v4 = std::locale::use_facet(&v8, MEMORY[0x1E4FBA258]);
  unsigned __int8 v5 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v4->__vftable[2].~facet_0)(v4, 10);
  std::locale::~locale(&v8);
  uint64_t v6 = sub_1B4BE16F4(v3, a2, v5);
  return (*((unsigned char *)v6 + *(void *)(*v6 - 24) + 32) & 5) == 0;
}

void sub_1B4BF93F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

void sub_1B4BF9408(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v7 = 0;
  while (sub_1B4BF9324(a1, (uint64_t)__p))
  {
    unint64_t v5 = *(void *)(a2 + 8);
    if (v5 < *(void *)(a2 + 16))
    {
      if (SHIBYTE(v7) < 0)
      {
        sub_1B4BCA11C(*(unsigned char **)(a2 + 8), __p[0], (unint64_t)__p[1]);
      }
      else
      {
        long long v4 = *(_OWORD *)__p;
        *(void *)(v5 + 16) = v7;
        *(_OWORD *)unint64_t v5 = v4;
      }
      *(void *)(a2 + 8) = v5 + 24;
      *(void *)(a2 + 8) = v5 + 24;
    }
    else
    {
      *(void *)(a2 + 8) = sub_1B4BF9E40((char **)a2, (uint64_t)__p);
    }
  }
  if (SHIBYTE(v7) < 0) {
    operator delete(__p[0]);
  }
}

void sub_1B4BF94D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  *(void *)(v15 + 8) = v16;
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_1B4BF9508((void **)v15);
  _Unwind_Resume(a1);
}

void **sub_1B4BF9508(void **a1)
{
  int v2 = (void **)*a1;
  if (*a1)
  {
    int v3 = (void **)a1[1];
    long long v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        if (*((char *)v3 - 1) < 0) {
          operator delete(*(v3 - 3));
        }
        v3 -= 3;
      }
      while (v3 != v2);
      long long v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_1B4BF957C(uint64_t a1)
{
  std::ios_base::clear((std::ios_base *)(*(void *)(a1 + 32) + *(void *)(**(void **)(a1 + 32) - 24)), 0);
  uint64_t v2 = *(void *)(a1 + 32);
  return MEMORY[0x1F417E780](v2, 0, 0);
}

uint64_t sub_1B4BF95DC(uint64_t result)
{
  uint64_t v1 = result;
  if (*(char *)(result + 31) < 0)
  {
    operator delete(*(void **)(result + 8));
    return v1;
  }
  return result;
}

uint64_t sub_1B4BF9620(uint64_t result)
{
  uint64_t v1 = result;
  if (*(char *)(result + 31) < 0)
  {
    operator delete(*(void **)(result + 8));
    return v1;
  }
  return result;
}

uint64_t sub_1B4BF9664(uint64_t a1)
{
  *(void *)a1 = &unk_1F0D553D8;
  uint64_t v2 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void sub_1B4BF96F4(uint64_t a1)
{
  *(void *)a1 = &unk_1F0D553D8;
  uint64_t v2 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x1BA9929C0);
}

BOOL sub_1B4BF9794(uint64_t a1)
{
  uint64_t v2 = (_OWORD *)(a1 + 8);
  if (*(char *)(a1 + 31) < 0)
  {
    sub_1B4BCA11C(&__p, *(void **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&__p.__pn_.__r_.__value_.__l.__data_ = *v2;
    __p.__pn_.__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
  }
  std::__fs::filesystem::path v8 = __p;
  memset(&__p, 0, sizeof(__p));
  std::__fs::filesystem::__status(&v8, 0);
  if ((SHIBYTE(v8.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_6;
    }
LABEL_9:
    operator delete(__p.__pn_.__r_.__value_.__l.__data_);
    BOOL v3 = 0;
    int v4 = v6.__pn_.__r_.__value_.__s.__data_[0];
    if (!v6.__pn_.__r_.__value_.__s.__data_[0]) {
      return v3;
    }
    goto LABEL_10;
  }
  operator delete(v8.__pn_.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_9;
  }
LABEL_6:
  BOOL v3 = 0;
  int v4 = v6.__pn_.__r_.__value_.__s.__data_[0];
  if (!v6.__pn_.__r_.__value_.__s.__data_[0]) {
    return v3;
  }
LABEL_10:
  if (v4 == 255) {
    return v3;
  }
  if (*(char *)(a1 + 31) < 0) {
    sub_1B4BCA11C(&v6, *(void **)(a1 + 8), *(void *)(a1 + 16));
  }
  else {
    std::__fs::filesystem::path v6 = *(std::__fs::filesystem::path *)v2;
  }
  std::__fs::filesystem::path __p = v6;
  memset(&v6, 0, sizeof(v6));
  std::__fs::filesystem::__canonical(&v8, &__p, 0);
  if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__pn_.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v6.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_16;
    }
  }
  else if ((SHIBYTE(v6.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_16;
  }
  operator delete(v6.__pn_.__r_.__value_.__l.__data_);
LABEL_16:
  std::__fs::filesystem::__status(&v8, 0);
  BOOL v3 = __p.__pn_.__r_.__value_.__s.__data_[0] == 1;
  if ((SHIBYTE(v8.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    return v3;
  }
  operator delete(v8.__pn_.__r_.__value_.__l.__data_);
  return v3;
}

void sub_1B4BF9928(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1B4BF998C(uint64_t a1)
{
  return MEMORY[0x1F417E788](*(void *)(a1 + 32));
}

void sub_1B4BF999C(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x1BA9929C0);
}

BOOL sub_1B4BF99F0(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    sub_1B4BCA11C(&__p, *(void **)(a1 + 8), *(void *)(a1 + 16));
  }
  else {
    std::__fs::filesystem::path __p = *(std::__fs::filesystem::path *)(a1 + 8);
  }
  std::__fs::filesystem::path v5 = __p;
  memset(&__p, 0, sizeof(__p));
  std::__fs::filesystem::__status(&v5, 0);
  uint64_t v1 = v6;
  if (SHIBYTE(v5.__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v5.__pn_.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_6;
    }
  }
  else if ((SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_6;
  }
  operator delete(__p.__pn_.__r_.__value_.__l.__data_);
LABEL_6:
  if (v1) {
    BOOL v2 = v1 == 255;
  }
  else {
    BOOL v2 = 1;
  }
  return !v2;
}

void sub_1B4BF9AA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
  {
    operator delete(__p);
    if ((a14 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a9);
  _Unwind_Resume(exception_object);
}

void *sub_1B4BF9AE4(void *a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
  {
    sub_1B4BCA11C(__p, *(void **)a2, *(void *)(a2 + 8));
    BOOL v3 = a1 + 1;
    if ((SHIBYTE(v7) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else
  {
    *(_OWORD *)std::__fs::filesystem::path __p = *(_OWORD *)a2;
    uint64_t v7 = *(void *)(a2 + 16);
    BOOL v3 = a1 + 1;
    if ((SHIBYTE(v7) & 0x80000000) == 0)
    {
LABEL_3:
      *(_OWORD *)BOOL v3 = *(_OWORD *)__p;
      v3[2] = v7;
      *a1 = &unk_1F0D55410;
      goto LABEL_7;
    }
  }
  sub_1B4BCA11C(v3, __p[0], (unint64_t)__p[1]);
  int v4 = SHIBYTE(v7);
  *a1 = &unk_1F0D55410;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
LABEL_7:
  *a1 = &unk_1F0D55498;
  return a1;
}

void sub_1B4BF9BD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B4BF9BF4(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x1BA9929C0);
}

BOOL sub_1B4BF9C48(uint64_t a1)
{
  BOOL v2 = (_OWORD *)(a1 + 8);
  if (*(char *)(a1 + 31) < 0)
  {
    sub_1B4BCA11C(&__p, *(void **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&__p.__pn_.__r_.__value_.__l.__data_ = *v2;
    __p.__pn_.__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
  }
  std::__fs::filesystem::path v8 = __p;
  memset(&__p, 0, sizeof(__p));
  std::__fs::filesystem::__status(&v8, 0);
  if ((SHIBYTE(v8.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_6;
    }
LABEL_9:
    operator delete(__p.__pn_.__r_.__value_.__l.__data_);
    BOOL v3 = 0;
    int v4 = v6.__pn_.__r_.__value_.__s.__data_[0];
    if (!v6.__pn_.__r_.__value_.__s.__data_[0]) {
      return v3;
    }
    goto LABEL_10;
  }
  operator delete(v8.__pn_.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_9;
  }
LABEL_6:
  BOOL v3 = 0;
  int v4 = v6.__pn_.__r_.__value_.__s.__data_[0];
  if (!v6.__pn_.__r_.__value_.__s.__data_[0]) {
    return v3;
  }
LABEL_10:
  if (v4 == 255) {
    return v3;
  }
  if (*(char *)(a1 + 31) < 0) {
    sub_1B4BCA11C(&v6, *(void **)(a1 + 8), *(void *)(a1 + 16));
  }
  else {
    std::__fs::filesystem::path v6 = *(std::__fs::filesystem::path *)v2;
  }
  std::__fs::filesystem::path __p = v6;
  memset(&v6, 0, sizeof(v6));
  std::__fs::filesystem::__canonical(&v8, &__p, 0);
  if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__pn_.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v6.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_16;
    }
  }
  else if ((SHIBYTE(v6.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_16;
  }
  operator delete(v6.__pn_.__r_.__value_.__l.__data_);
LABEL_16:
  std::__fs::filesystem::__status(&v8, 0);
  BOOL v3 = __p.__pn_.__r_.__value_.__s.__data_[0] == 2;
  if ((SHIBYTE(v8.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    return v3;
  }
  operator delete(v8.__pn_.__r_.__value_.__l.__data_);
  return v3;
}

void sub_1B4BF9DDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *sub_1B4BF9E40(char **a1, uint64_t a2)
{
  BOOL v3 = *a1;
  int v4 = a1[1];
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_1B4BB3244();
  }
  if (0x5555555555555556 * ((a1[2] - v3) >> 3) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - v3) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3) >= 0x555555555555555) {
    unint64_t v8 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v8 = v6;
  }
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL) {
      sub_1B4BB2D38();
    }
    unsigned int v9 = (char *)operator new(24 * v8);
  }
  else
  {
    unsigned int v9 = 0;
  }
  int v10 = &v9[24 * v5];
  uint64_t v16 = v10;
  unint64_t v17 = v10;
  unint64_t v18 = &v9[24 * v8];
  if (*(char *)(a2 + 23) < 0)
  {
    sub_1B4BCA11C(v10, *(void **)a2, *(void *)(a2 + 8));
    BOOL v3 = *a1;
    int v4 = a1[1];
    int v10 = v16;
    int v11 = v17 + 24;
    if (v4 == *a1)
    {
LABEL_17:
      uint64_t v13 = v3;
      goto LABEL_18;
    }
  }
  else
  {
    *(_OWORD *)int v10 = *(_OWORD *)a2;
    *((void *)v10 + 2) = *(void *)(a2 + 16);
    int v11 = v10 + 24;
    if (v4 == v3) {
      goto LABEL_17;
    }
  }
  do
  {
    long long v12 = *(_OWORD *)(v4 - 24);
    *((void *)v10 - 1) = *((void *)v4 - 1);
    *(_OWORD *)(v10 - 24) = v12;
    v10 -= 24;
    *((void *)v4 - 2) = 0;
    *((void *)v4 - 1) = 0;
    *((void *)v4 - 3) = 0;
    v4 -= 24;
  }
  while (v4 != v3);
  uint64_t v13 = *a1;
  BOOL v3 = a1[1];
LABEL_18:
  *a1 = v10;
  a1[1] = v11;
  a1[2] = v18;
  if (v3 != v13)
  {
    unint64_t v14 = (void **)(v3 - 24);
    do
    {
      if (*((char *)v14 + 23) < 0) {
        operator delete(*v14);
      }
      v14 -= 3;
    }
    while (v14 + 3 != (void **)v13);
    BOOL v3 = v13;
  }
  if (v3) {
    operator delete(v3);
  }
  return v11;
}

void sub_1B4BFA004(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1B4BFA018((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B4BFA018(uint64_t a1)
{
  BOOL v3 = *(void ***)(a1 + 8);
  BOOL v2 = *(void ***)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      unint64_t v5 = v2 - 3;
      *(void *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v5);
        unint64_t v5 = *(void ***)(a1 + 16);
      }
      BOOL v2 = v5;
    }
    while (v5 != v3);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_1B4BFA080(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 31) < 0)
  {
    sub_1B4BCA11C(__p, *(void **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    *(_OWORD *)std::__fs::filesystem::path __p = *(_OWORD *)(a2 + 8);
    uint64_t v7 = *(void *)(a2 + 24);
  }
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  BOOL v3 = (char *)HIBYTE(v7);
  if (v7 >= 0) {
    int v4 = (char *)__p;
  }
  else {
    int v4 = (char *)__p[0];
  }
  if (v7 < 0) {
    BOOL v3 = (char *)__p[1];
  }
  sub_1B4BCC01C((std::string *)(a1 + 8), v4, &v3[(void)v4]);
  *(void *)a1 = &unk_1F0D55410;
  if (SHIBYTE(v7) < 0) {
    operator delete(__p[0]);
  }
  *(void *)a1 = &unk_1F0D55498;
  return a1;
}

void sub_1B4BFA160(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (*(char *)(v14 + 31) < 0)
  {
    operator delete(*v15);
    if ((a14 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

id sub_1B4BFA19C(int a1)
{
  if (qword_1E9D40AE0 != -1) {
    dispatch_once(&qword_1E9D40AE0, &unk_1F0D55F60);
  }
  BOOL v2 = (void *)qword_1E9D40AB0[a1];
  return v2;
}

uint64_t sub_1B4BFA200()
{
  os_log_t v0 = os_log_create("com.apple.cvnlp", "General");
  uint64_t v1 = (void *)qword_1E9D40AB0;
  qword_1E9D40AB0 = (uint64_t)v0;

  os_log_t v2 = os_log_create("com.apple.cvnlp", "TextDecoder");
  BOOL v3 = (void *)qword_1E9D40AB8;
  qword_1E9D40AB8 = (uint64_t)v2;

  os_log_t v4 = os_log_create("com.apple.cvnlp", "CTCTextDecoder");
  unint64_t v5 = (void *)qword_1E9D40AC0;
  qword_1E9D40AC0 = (uint64_t)v4;

  os_log_t v6 = os_log_create("com.apple.cvnlp", "CVNLPLanguageModel");
  uint64_t v7 = (void *)qword_1E9D40AC8;
  qword_1E9D40AC8 = (uint64_t)v6;

  os_log_t v8 = os_log_create("com.apple.cvnlp", "CVNLPCLIPModel");
  unsigned int v9 = (void *)qword_1E9D40AD0;
  qword_1E9D40AD0 = (uint64_t)v8;

  qword_1E9D40AD8 = (uint64_t)os_log_create("com.apple.cvnlp", "CVNLPVideoCaptioningModel");
  return MEMORY[0x1F41817F8]();
}

void *sub_1B4BFA2E0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *a1 = a4;
  unsigned int v9 = a1 + 1;
  uint64_t v10 = *(void *)(a5 + 24);
  if (v10)
  {
    if (v10 == a5)
    {
      a1[4] = v9;
      (*(void (**)(void, void *))(**(void **)(a5 + 24) + 24))(*(void *)(a5 + 24), v9);
      a1[5] = a2;
      a1[6] = a3;
      uint64_t v13 = a3;
      uint64_t v14 = a2;
      uint64_t v11 = *(void *)(a5 + 24);
      if (!v11) {
        goto LABEL_8;
      }
    }
    else
    {
      a1[4] = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 16))(v10);
      a1[5] = a2;
      a1[6] = a3;
      uint64_t v13 = a3;
      uint64_t v14 = a2;
      uint64_t v11 = *(void *)(a5 + 24);
      if (!v11) {
LABEL_8:
      }
        sub_1B4BE345C();
    }
  }
  else
  {
    a1[4] = 0;
    a1[5] = a2;
    a1[6] = a3;
    uint64_t v13 = a3;
    uint64_t v14 = a2;
    uint64_t v11 = *(void *)(a5 + 24);
    if (!v11) {
      goto LABEL_8;
    }
  }
  a1[7] = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v11 + 48))(v11, &v14, &v13);
  return a1;
}

void sub_1B4BFA408(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *(void *)(v2 + 32);
  if (v4 == v1)
  {
    (*(void (**)(uint64_t))(*(void *)v1 + 32))(v1);
    _Unwind_Resume(exception_object);
  }
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 40))(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1B4BFA478(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = *(void *)(a1 + 32);
  if (v3 == v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 32))(v2);
    return a1;
  }
  else
  {
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
    }
    return a1;
  }
}

void sub_1B4BFA510()
{
}

void *sub_1B4BFA524(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1F0D55680;
  result[1] = v3;
  return result;
}

uint64_t sub_1B4BFA56C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F0D55680;
  a2[1] = v2;
  return result;
}

uint64_t sub_1B4BFA598(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *(_DWORD **)(a1 + 8);
  uint64_t v5 = 2;
  if (*v4)
  {
    uint64_t v6 = *a3;
  }
  else
  {
    uint64_t v5 = 4;
    uint64_t v6 = *a2;
  }
  if (!*v4) {
    uint64_t v3 = *a3;
  }
  return v3 + v6 * *(void *)&v4[v5];
}

uint64_t sub_1B4BFA5CC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x80000001B4C9A39FLL) {
    return a1 + 8;
  }
  if (((v3 & 0x80000001B4C9A39FLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001B4C9A39FLL)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001B4C9A39FLL & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 8;
  }
  return 0;
}

void *sub_1B4BFA64C()
{
  return &unk_1F0D53DF8;
}

uint64_t sub_1B4BFA658@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  uint64_t v26 = *(void *)a1;
  uint64_t v7 = (void *)(a1 + 32);
  uint64_t v6 = *(void **)(a1 + 32);
  if (v6)
  {
    if (v6 == (void *)(a1 + 8))
    {
      uint64_t v28 = v27;
      (*(void (**)(void *, void *))(*v6 + 24))(v6, v27);
    }
    else
    {
      uint64_t v28 = v6;
      void *v7 = 0;
    }
  }
  else
  {
    uint64_t v28 = 0;
  }
  long long v29 = *(_OWORD *)(a1 + 40);
  uint64_t v30 = *(void *)(a1 + 56);
  sub_1B4BFADD0(&v26, (uint64_t)&v31);
  uint64_t v16 = *(void *)a2;
  uint64_t v8 = *(void *)(a2 + 32);
  if (v8)
  {
    if (v8 == a2 + 8)
    {
      unint64_t v18 = v17;
      (*(void (**)(uint64_t, void *))(*(void *)v8 + 24))(v8, v17);
    }
    else
    {
      unint64_t v18 = *(void **)(a2 + 32);
      *(void *)(a2 + 32) = 0;
    }
  }
  else
  {
    unint64_t v18 = 0;
  }
  long long v19 = *(_OWORD *)(a2 + 40);
  uint64_t v20 = *(void *)(a2 + 56);
  sub_1B4BFADD0(&v16, (uint64_t)&v21);
  unsigned int v9 = v33;
  *(void *)a3 = v31;
  uint64_t v10 = a3 + 8;
  if (v9)
  {
    if (v9 == v32)
    {
      *(void *)(a3 + 32) = v10;
      (*(void (**)(void *))(*v9 + 24))(v9);
    }
    else
    {
      *(void *)(a3 + 32) = v9;
      unsigned int v33 = 0;
    }
  }
  else
  {
    *(void *)(a3 + 32) = 0;
  }
  *(_OWORD *)(a3 + 4sub_1B4BC92E4(&a9, 0) = v34;
  uint64_t v11 = v21;
  long long v12 = v23;
  *(void *)(a3 + 56) = v35;
  *(void *)(a3 + 64) = v11;
  if (v12)
  {
    if (v12 == v22)
    {
      *(void *)(a3 + 96) = a3 + 72;
      (*(void (**)(void *))(*v12 + 24))(v12);
    }
    else
    {
      *(void *)(a3 + 96) = v12;
      uint64_t v23 = 0;
    }
  }
  else
  {
    *(void *)(a3 + 96) = 0;
  }
  *(_OWORD *)(a3 + 104) = v24;
  *(void *)(a3 + 12sub_1B4BC92E4(&a9, 0) = v25;
  if (v23 == v22)
  {
    (*(void (**)(void *, uint64_t))(v22[0] + 32))(v22, v10);
    uint64_t v13 = v18;
    if (v18 != v17) {
      goto LABEL_25;
    }
LABEL_34:
    (*(void (**)(void *, uint64_t))(v17[0] + 32))(v17, v10);
    uint64_t v14 = v33;
    if (v33 != v32) {
      goto LABEL_28;
    }
    goto LABEL_35;
  }
  if (v23) {
    (*(void (**)(void))(*v23 + 40))();
  }
  uint64_t v13 = v18;
  if (v18 == v17) {
    goto LABEL_34;
  }
LABEL_25:
  if (v13) {
    (*(void (**)(void *, uint64_t))(*v13 + 40))(v13, v10);
  }
  uint64_t v14 = v33;
  if (v33 != v32)
  {
LABEL_28:
    if (v14) {
      (*(void (**)(void *, uint64_t))(*v14 + 40))(v14, v10);
    }
    uint64_t result = (uint64_t)v28;
    if (v28 != v27) {
      goto LABEL_31;
    }
    return (*(uint64_t (**)(void *, uint64_t))(v27[0] + 32))(v27, v10);
  }
LABEL_35:
  (*(void (**)(void *, uint64_t))(v32[0] + 32))(v32, v10);
  uint64_t result = (uint64_t)v28;
  if (v28 == v27) {
    return (*(uint64_t (**)(void *, uint64_t))(v27[0] + 32))(v27, v10);
  }
LABEL_31:
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 40))(result, v10);
  }
  return result;
}

void sub_1B4BFAA68(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_1B4BB21F0(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1B4BFAA88@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v15 = *(void *)a1;
  uint64_t v7 = (void *)(a1 + 32);
  uint64_t v6 = *(void **)(a1 + 32);
  if (v6)
  {
    if (v6 == (void *)(a1 + 8))
    {
      unint64_t v17 = v16;
      (*(void (**)(void *, void *))(*v6 + 24))(v6, v16);
    }
    else
    {
      unint64_t v17 = v6;
      void *v7 = 0;
    }
  }
  else
  {
    unint64_t v17 = 0;
  }
  long long v18 = *(_OWORD *)(a1 + 40);
  uint64_t v19 = *(void *)(a1 + 56);
  uint64_t v10 = *(void *)a2;
  uint64_t v8 = *(void *)(a2 + 32);
  if (v8)
  {
    if (v8 == a2 + 8)
    {
      long long v12 = v11;
      (*(void (**)(uint64_t, void *))(*(void *)v8 + 24))(v8, v11);
    }
    else
    {
      long long v12 = *(void **)(a2 + 32);
      *(void *)(a2 + 32) = 0;
    }
  }
  else
  {
    long long v12 = 0;
  }
  long long v13 = *(_OWORD *)(a2 + 40);
  uint64_t v14 = *(void *)(a2 + 56);
  sub_1B4BFAFCC(&v15, &v10, a3);
  if (v12 != v11)
  {
    if (v12) {
      (*(void (**)(void))(*v12 + 40))();
    }
    uint64_t result = (uint64_t)v17;
    if (v17 != v16) {
      goto LABEL_15;
    }
    return (*(uint64_t (**)(void *))(v16[0] + 32))(v16);
  }
  (*(void (**)(void *))(v11[0] + 32))(v11);
  uint64_t result = (uint64_t)v17;
  if (v17 == v16) {
    return (*(uint64_t (**)(void *))(v16[0] + 32))(v16);
  }
LABEL_15:
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 40))(result);
  }
  return result;
}

void sub_1B4BFACBC(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_1B4BB21F0(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1B4BFACCC(uint64_t a1)
{
  uint64_t v2 = a1 + 72;
  uint64_t v3 = *(void *)(a1 + 96);
  if (v3 != v2)
  {
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
    }
    uint64_t v4 = a1 + 8;
    uint64_t v5 = *(void *)(a1 + 32);
    if (v5 != a1 + 8) {
      goto LABEL_5;
    }
LABEL_9:
    (*(void (**)(uint64_t))(*(void *)v4 + 32))(v4);
    return a1;
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 32))(v2);
  uint64_t v4 = a1 + 8;
  uint64_t v5 = *(void *)(a1 + 32);
  if (v5 == a1 + 8) {
    goto LABEL_9;
  }
LABEL_5:
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 40))(v5);
  }
  return a1;
}

uint64_t sub_1B4BFADD0@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *a1;
  uint64_t v9 = *a1;
  uint64_t v5 = (uint64_t *)a1[4];
  if (v5)
  {
    if (v5 == a1 + 1)
    {
      uint64_t v11 = v10;
      (*(void (**)(uint64_t *, void *))(*v5 + 24))(v5, v10);
      uint64_t v6 = v11;
    }
    else
    {
      uint64_t v6 = (void *)(*(uint64_t (**)(uint64_t *))(*v5 + 16))(v5);
      uint64_t v11 = v6;
    }
    long long v12 = *(_OWORD *)(a1 + 5);
    uint64_t v13 = a1[7];
    *(void *)a2 = v9;
    if (v6)
    {
      if (v6 == v10)
      {
        *(void *)(a2 + 32) = a2 + 8;
        (*(void (**)(void *))(v10[0] + 24))(v10);
      }
      else
      {
        *(void *)(a2 + 32) = v6;
        uint64_t v11 = 0;
      }
    }
    else
    {
      *(void *)(a2 + 32) = 0;
    }
  }
  else
  {
    uint64_t v11 = 0;
    long long v12 = *(_OWORD *)(a1 + 5);
    uint64_t v13 = a1[7];
    *(void *)a2 = v4;
    *(void *)(a2 + 32) = 0;
  }
  long long v7 = v12;
  *(void *)(a2 + 56) = v13;
  *(_OWORD *)(a2 + 4sub_1B4BC92E4(&a9, 0) = v7;
  uint64_t result = (uint64_t)v11;
  if (v11 == v10) {
    return (*(uint64_t (**)(void *))(v10[0] + 32))(v10);
  }
  if (v11) {
    return (*(uint64_t (**)(void))(*v11 + 40))();
  }
  return result;
}

void sub_1B4BFAFBC(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_1B4BB21F0(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1B4BFAFCC@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v17 = *a1;
  long long v7 = a1 + 4;
  uint64_t v6 = (uint64_t *)a1[4];
  if (v6)
  {
    if (v6 == a1 + 1)
    {
      uint64_t v19 = v18;
      (*(void (**)(uint64_t *, void *))(*v6 + 24))(v6, v18);
    }
    else
    {
      uint64_t v19 = v6;
      void *v7 = 0;
    }
  }
  else
  {
    uint64_t v19 = 0;
  }
  long long v20 = *(_OWORD *)(a1 + 5);
  uint64_t v21 = a1[7];
  uint64_t v8 = *a2;
  uint64_t v12 = *a2;
  uint64_t v9 = (uint64_t *)a2[4];
  if (v9)
  {
    if (v9 == a2 + 1)
    {
      uint64_t v14 = v13;
      (*(void (**)(uint64_t *, void *))(*v9 + 24))(v9, v13);
      uint64_t v8 = v12;
    }
    else
    {
      uint64_t v14 = (void *)a2[4];
      a2[4] = 0;
    }
  }
  else
  {
    uint64_t v14 = 0;
  }
  long long v15 = *(_OWORD *)(a2 + 5);
  uint64_t v16 = a2[7];
  *(void *)a3 = v8;
  uint64_t v10 = a3 + 8;
  if (v14)
  {
    if (v14 == v13)
    {
      *(void *)(a3 + 32) = v10;
      (*(void (**)(void *))(v13[0] + 24))(v13);
    }
    else
    {
      *(void *)(a3 + 32) = v14;
      uint64_t v14 = 0;
    }
  }
  else
  {
    *(void *)(a3 + 32) = 0;
  }
  *(_OWORD *)(a3 + 4sub_1B4BC92E4(&a9, 0) = v15;
  *(void *)(a3 + 56) = v16;
  if (v14 != v13)
  {
    if (v14) {
      (*(void (**)(void))(*v14 + 40))();
    }
    uint64_t result = (uint64_t)v19;
    if (v19 != v18) {
      goto LABEL_20;
    }
    return (*(uint64_t (**)(void *, uint64_t))(v18[0] + 32))(v18, v10);
  }
  (*(void (**)(void *, uint64_t))(v13[0] + 32))(v13, v10);
  uint64_t result = (uint64_t)v19;
  if (v19 == v18) {
    return (*(uint64_t (**)(void *, uint64_t))(v18[0] + 32))(v18, v10);
  }
LABEL_20:
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 40))(result, v10);
  }
  return result;
}

void sub_1B4BFB274(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_1B4BB21F0(a1);
  }
  _Unwind_Resume(a1);
}

void sub_1B4BFB28C(uint64_t a1@<X0>, unint64_t a2@<X1>, char *a3@<X2>, int64_t a4@<X3>, uint64_t a5@<X8>)
{
  *(void *)a5 = 0;
  *(void *)(a5 + 8) = 0;
  *(void *)(a5 + 16) = 0;
  if (a4)
  {
    unint64_t v9 = 0;
    uint64_t v10 = (char *)(a1 + a2);
    do
    {
      unint64_t v12 = a2 - v9;
      if (a2 <= v9) {
        break;
      }
      uint64_t v13 = (std::string::value_type *)(a1 + v9);
      int64_t v14 = (int64_t)&v10[-a1 - v9];
      long long v15 = v10;
      if (v14 >= a4)
      {
        int v16 = *a3;
        uint64_t v17 = (void *)(a1 + v9);
        do
        {
          uint64_t v18 = v14 - a4;
          if (v18 == -1) {
            break;
          }
          uint64_t v19 = (char *)memchr(v17, v16, v18 + 1);
          if (!v19) {
            break;
          }
          long long v15 = v19;
          if (!memcmp(v19, a3, a4)) {
            goto LABEL_13;
          }
          uint64_t v17 = v15 + 1;
          int64_t v14 = v10 - (v15 + 1);
        }
        while (v14 >= a4);
        long long v15 = v10;
      }
LABEL_13:
      if (v15 == v10) {
        uint64_t v20 = -1;
      }
      else {
        uint64_t v20 = (uint64_t)&v15[-a1];
      }
      if (v20 != v9)
      {
        if (v12 >= v20 - v9) {
          unint64_t v12 = v20 - v9;
        }
        memset(&v25, 0, sizeof(v25));
        for (; v12; --v12)
          std::string::push_back(&v25, *v13++);
        unint64_t v21 = *(void *)(a5 + 8);
        if (v21 < *(void *)(a5 + 16))
        {
          long long v11 = *(_OWORD *)&v25.__r_.__value_.__l.__data_;
          *(void *)(v21 + 16) = *((void *)&v25.__r_.__value_.__l + 2);
          *(_OWORD *)unint64_t v21 = v11;
          *(void *)(a5 + 8) = v21 + 24;
        }
        else
        {
          uint64_t v22 = sub_1B4BFB6B0((void **)a5, (uint64_t)&v25);
          int v23 = SHIBYTE(v25.__r_.__value_.__r.__words[2]);
          *(void *)(a5 + 8) = v22;
          if (v23 < 0) {
            operator delete(v25.__r_.__value_.__l.__data_);
          }
        }
      }
      unint64_t v9 = v20 + 1;
    }
    while (v20 != -1);
  }
}

void sub_1B4BFB3F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_1B4BF9508(v15);
  _Unwind_Resume(a1);
}

void sub_1B4BFB41C(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  MEMORY[0x1BA9928D0](&v11);
  LODWORD(v12.__locale_) = 0x4000;
  std::locale::locale(&v13, &v11);
  sub_1B4BFB808((std::string *)a1, &v12);
  std::locale::~locale(&v13);
  std::locale::~locale(&v11);
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v9 = a1;
    a1 = *(void *)a1;
    unint64_t v6 = *(void *)(v9 + 8);
    int v7 = a2[23];
    if ((v7 & 0x80000000) == 0) {
      goto LABEL_3;
    }
LABEL_5:
    uint64_t v10 = a2;
    a2 = *(char **)a2;
    int64_t v8 = *((void *)v10 + 1);
    goto LABEL_6;
  }
  unint64_t v6 = *(unsigned __int8 *)(a1 + 23);
  int v7 = a2[23];
  if (v7 < 0) {
    goto LABEL_5;
  }
LABEL_3:
  int64_t v8 = v7;
LABEL_6:
  sub_1B4BFB28C(a1, v6, a2, v8, a3);
}

void sub_1B4BFB4D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(v10);
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

void *sub_1B4BFB4EC(void *a1, uint64_t a2, unint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    if (a3 >= 0xAAAAAAAAAAAAAABLL) {
      sub_1B4BB3244();
    }
    uint64_t v5 = 24 * a3;
    unint64_t v6 = (char *)operator new(24 * a3);
    uint64_t v7 = 0;
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[v5];
    do
    {
      uint64_t v9 = &v6[v7];
      uint64_t v10 = (long long *)(a2 + v7);
      if (*(char *)(a2 + v7 + 23) < 0)
      {
        sub_1B4BCA11C(v9, *(void **)v10, *((void *)v10 + 1));
      }
      else
      {
        long long v8 = *v10;
        *((void *)v9 + 2) = *((void *)v10 + 2);
        *(_OWORD *)uint64_t v9 = v8;
      }
      v7 += 24;
    }
    while (v5 != v7);
    a1[1] = &v6[v7];
  }
  return a1;
}

void sub_1B4BFB5C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_1B4BFB5DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  for (; v11; v11 -= 24)
  {
    if (*(char *)(v10 + v11 - 1) < 0) {
      operator delete(*(void **)(v10 + v11 - 24));
    }
  }
  *(void *)(v9 + 8) = v10;
  sub_1B4BFB618(&a9);
  _Unwind_Resume(a1);
}

void ***sub_1B4BFB618(void ***result)
{
  uint64_t v1 = result;
  if (!*((unsigned char *)result + 8))
  {
    uint64_t v2 = *result;
    uint64_t v3 = (void **)**result;
    if (v3)
    {
      uint64_t v4 = (void **)v2[1];
      uint64_t v5 = **result;
      if (v4 != v3)
      {
        do
        {
          if (*((char *)v4 - 1) < 0) {
            operator delete(*(v4 - 3));
          }
          v4 -= 3;
        }
        while (v4 != v3);
        uint64_t v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

char *sub_1B4BFB6B0(void **a1, uint64_t a2)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_1B4BB3244();
  }
  if (0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) > v4) {
    unint64_t v4 = 0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) >= 0x555555555555555) {
    unint64_t v6 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL) {
      sub_1B4BB2D38();
    }
    uint64_t v7 = (char *)operator new(24 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  long long v8 = &v7[24 * v3];
  uint64_t v9 = &v7[24 * v6];
  *(_OWORD *)long long v8 = *(_OWORD *)a2;
  *((void *)v8 + 2) = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  uint64_t v10 = v8 + 24;
  uint64_t v11 = (void **)*a1;
  std::locale v12 = (void **)a1[1];
  if (v12 == *a1)
  {
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
  }
  else
  {
    do
    {
      long long v13 = *(_OWORD *)(v12 - 3);
      *((void *)v8 - 1) = *(v12 - 1);
      *(_OWORD *)(v8 - 24) = v13;
      v8 -= 24;
      *(v12 - 2) = 0;
      *(v12 - 1) = 0;
      *(v12 - 3) = 0;
      v12 -= 3;
    }
    while (v12 != v11);
    std::locale v12 = (void **)*a1;
    int64_t v14 = (void **)a1[1];
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
    while (v14 != v12)
    {
      if (*((char *)v14 - 1) < 0) {
        operator delete(*(v14 - 3));
      }
      v14 -= 3;
    }
  }
  if (v12) {
    operator delete(v12);
  }
  return v10;
}

void sub_1B4BFB808(std::string *a1, std::locale *a2)
{
  unint64_t v3 = a2 + 1;
  int locale = (int)a2->__locale_;
  std::locale::locale(&v28, a2 + 1);
  int v4 = SHIBYTE(a1->__r_.__value_.__r.__words[2]);
  if (v4 >= 0) {
    uint64_t v5 = a1;
  }
  else {
    uint64_t v5 = (std::string *)a1->__r_.__value_.__r.__words[0];
  }
  if (v4 >= 0) {
    std::string::size_type size = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = a1->__r_.__value_.__l.__size_;
  }
  uint64_t v7 = (std::string *)((char *)v5 + size);
  int v29 = locale;
  std::locale::locale(&v30, &v28);
  int v31 = v29;
  std::locale::locale(&v32, &v30);
  long long v8 = (std::locale::id *)MEMORY[0x1E4FBA258];
  while (size)
  {
    std::string::size_type v9 = size;
    uint64_t v10 = v5->__r_.__value_.__s.__data_[size - 1];
    uint64_t v11 = std::locale::use_facet(&v32, v8);
    if ((v10 & 0x80) != 0)
    {
      uint64_t v5 = v7;
      break;
    }
    uint64_t v7 = (std::string *)((char *)v7 - 1);
    int v12 = *((_DWORD *)&v11[1].~facet + v10);
    std::string::size_type size = v9 - 1;
    if ((v12 & v31) == 0)
    {
      uint64_t v5 = (std::string *)((char *)v5 + v9);
      break;
    }
  }
  std::locale::~locale(&v32);
  std::string::size_type v13 = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  if ((v13 & 0x80u) == 0) {
    int64_t v14 = a1;
  }
  else {
    int64_t v14 = (std::string *)a1->__r_.__value_.__r.__words[0];
  }
  if ((v13 & 0x80u) != 0) {
    std::string::size_type v13 = a1->__r_.__value_.__l.__size_;
  }
  std::string::erase(a1, (char *)v5 - (char *)v14, (char *)v14 + v13 - (char *)v5);
  std::locale::~locale(&v30);
  std::locale::~locale(&v28);
  int v25 = (int)a2->__locale_;
  std::locale::locale(&v26, v3);
  int v15 = SHIBYTE(a1->__r_.__value_.__r.__words[2]);
  if (v15 >= 0) {
    int v16 = a1;
  }
  else {
    int v16 = (std::string *)a1->__r_.__value_.__r.__words[0];
  }
  if (v15 >= 0) {
    std::string::size_type v17 = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v17 = a1->__r_.__value_.__l.__size_;
  }
  int v31 = v25;
  std::locale::locale(&v32, &v26);
  if (v17)
  {
    uint64_t v18 = (unsigned __int8 *)v16 + v17;
    uint64_t v19 = (std::locale::id *)MEMORY[0x1E4FBA258];
    uint64_t v20 = v16;
    while (1)
    {
      uint64_t v21 = v20->__r_.__value_.__s.__data_[0];
      uint64_t v22 = std::locale::use_facet(&v32, v19);
      if ((v21 & 0x80) != 0 || (*((_DWORD *)&v22[1].~facet + v21) & v31) == 0) {
        break;
      }
      uint64_t v20 = (std::string *)((char *)v20 + 1);
      if (!--v17)
      {
        uint64_t v20 = (std::string *)v18;
        break;
      }
    }
  }
  else
  {
    uint64_t v20 = v16;
  }
  if ((a1->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v23 = (std::string::size_type)a1;
  }
  else {
    std::string::size_type v23 = a1->__r_.__value_.__r.__words[0];
  }
  std::string::erase(a1, (std::string::size_type)v16 - v23, (char *)v20 - (char *)v16);
  std::locale::~locale(&v32);
  std::locale::~locale(&v26);
}

void sub_1B4BFBA34(_Unwind_Exception *a1)
{
  std::locale::~locale(v2);
  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

void sub_1B4BFBA58(_Unwind_Exception *a1)
{
  std::locale::~locale(v3);
  std::locale::~locale(v2);
  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

void sub_1B4BFBA7C(std::string *a1, uint64_t *a2, char *a3, char *a4, std::string *a5, unsigned char *a6, char *a7, char *a8)
{
  long long v8 = a1;
  long long v459 = 0u;
  int64x2_t v460 = 0u;
  *(_OWORD *)__src = 0u;
  std::string::size_type size = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) == 0) {
    uint64_t v10 = a1;
  }
  else {
    uint64_t v10 = (std::string *)a1->__r_.__value_.__r.__words[0];
  }
  if (a5 != a6)
  {
    int v12 = a6;
    std::string::size_type v13 = v10;
    int64_t v14 = v10;
    while (1)
    {
      v456 = a8;
      v454 = (std::string *)sub_1B4BFDC2C((uint64_t)__src, v13, v14, (std::string *)a5);
      uint64_t v15 = v460.i64[1];
      LOWORD(v16) = v460.i16[0];
      uint64_t v17 = v460.i64[0] + v460.i64[1];
      unint64_t v18 = (unint64_t)(v460.i64[0] + v460.i64[1]) >> 12;
      uint64_t v20 = (char *)__src[1];
      uint64_t v19 = (char *)v459;
      uint64_t v21 = (char *)__src[1] + 8 * v18;
      uint64_t v22 = v459 - (unint64_t)__src[1];
      if ((void *)v459 == __src[1]) {
        break;
      }
      uint64_t v23 = *(void *)v21 + (v17 & 0xFFF);
      unint64_t v24 = (unint64_t)v460.i64[0] >> 12;
      int v25 = (char *)__src[1] + 8 * ((unint64_t)v460.i64[0] >> 12);
      uint64_t v26 = *(void *)v25 + (v460.i16[0] & 0xFFF);
      if (v23 == v26) {
        goto LABEL_10;
      }
      unint64_t v27 = v23 + ((v21 - v25) << 9) - (v26 + *(void *)v21) + *(void *)v25;
LABEL_11:
      unint64_t v28 = v456 - a7;
      unint64_t v455 = v27;
      v457 = a7;
      unint64_t v452 = v456 - a7;
      v453 = (std::string *)v12;
      if (v27 < v460.i64[1] - v27)
      {
        unint64_t v29 = v28 - v460.i64[0];
        if (v28 > v460.i64[0])
        {
          uint64_t v446 = v460.i64[0];
          uint64_t v30 = (v22 << 9) - 1;
          if ((void *)v459 == __src[1])
          {
            uint64_t v30 = 0;
            ++v29;
          }
          if ((v29 & 0xFFF) != 0) {
            unint64_t v31 = (v29 >> 12) + 1;
          }
          else {
            unint64_t v31 = v29 >> 12;
          }
          unint64_t v32 = (unint64_t)(v30 - v17) >> 12;
          if (v31 >= v32) {
            unint64_t v33 = (unint64_t)(v30 - v17) >> 12;
          }
          else {
            unint64_t v33 = v31;
          }
          if (v31 <= v32)
          {
            unint64_t v16 = v460.i64[0] + (v33 << 12);
            for (v460.i64[0] = v16; v33; --v33)
            {
              while (1)
              {
                int v54 = (char *)(v459 - 8);
                uint64_t v53 = *(void *)(v459 - 8);
                *(void *)&long long v459 = v459 - 8;
                if (v20 == __src[0]) {
                  break;
                }
                *((void *)v20 - 1) = v53;
                uint64_t v20 = (char *)__src[1] - 8;
                __src[1] = (char *)__src[1] - 8;
                if (!--v33) {
                  goto LABEL_149;
                }
              }
              if ((unint64_t)v54 >= *((void *)&v459 + 1))
              {
                if (*((char **)&v459 + 1) == v20) {
                  unint64_t v60 = 1;
                }
                else {
                  unint64_t v60 = (uint64_t)(*((void *)&v459 + 1) - (void)v20) >> 2;
                }
                if (v60 >> 61) {
                  goto LABEL_613;
                }
                uint64_t v61 = (char *)operator new(8 * v60);
                unint64_t v62 = (v60 + 3) >> 2;
                unsigned int v59 = &v61[8 * v62];
                int v63 = v59;
                int64_t v64 = v54 - v20;
                if (v54 != v20)
                {
                  int v63 = &v59[v64 & 0xFFFFFFFFFFFFFFF8];
                  unint64_t v65 = v64 - 8;
                  uint64_t v66 = &v61[8 * v62];
                  int v67 = v20;
                  if (v65 < 0x38) {
                    goto LABEL_622;
                  }
                  uint64_t v68 = 8 * v62;
                  uint64_t v66 = &v61[8 * v62];
                  int v67 = v20;
                  if ((unint64_t)(v66 - v20) < 0x20) {
                    goto LABEL_622;
                  }
                  uint64_t v69 = (v65 >> 3) + 1;
                  uint64_t v70 = 8 * (v69 & 0x3FFFFFFFFFFFFFFCLL);
                  uint64_t v66 = &v59[v70];
                  int v67 = &v20[v70];
                  unint64_t v71 = (long long *)(v20 + 16);
                  int v72 = &v61[v68 + 16];
                  uint64_t v73 = v69 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    long long v74 = *v71;
                    *((_OWORD *)v72 - 1) = *(v71 - 1);
                    *(_OWORD *)int v72 = v74;
                    v71 += 2;
                    v72 += 32;
                    v73 -= 4;
                  }
                  while (v73);
                  if (v69 != (v69 & 0x3FFFFFFFFFFFFFFCLL))
                  {
LABEL_622:
                    do
                    {
                      uint64_t v75 = *(void *)v67;
                      v67 += 8;
                      *(void *)uint64_t v66 = v75;
                      v66 += 8;
                    }
                    while (v66 != v63);
                  }
                }
                __src[0] = v61;
                __src[1] = v59;
                *(void *)&long long v459 = v63;
                *((void *)&v459 + 1) = &v61[8 * v60];
                if (v20) {
                  operator delete(v20);
                }
              }
              else
              {
                uint64_t v55 = (uint64_t)(*((void *)&v459 + 1) - (void)v54) >> 3;
                if (v55 >= -1) {
                  uint64_t v56 = v55 + 1;
                }
                else {
                  uint64_t v56 = v55 + 2;
                }
                uint64_t v57 = v56 >> 1;
                int v58 = &v54[8 * (v56 >> 1)];
                unsigned int v59 = &v58[-(v54 - v20)];
                if (v54 != v20)
                {
                  memmove(&v58[-(v54 - v20)], v20, v54 - v20);
                  uint64_t v20 = v54;
                }
                __src[1] = v59;
                *(void *)&long long v459 = &v20[8 * v57];
              }
              a7 = v457;
              *((void *)v59 - 1) = v53;
              uint64_t v20 = (char *)__src[1] - 8;
              __src[1] = (char *)__src[1] - 8;
            }
          }
          else
          {
            unint64_t v34 = v31 - v33;
            int64_t v35 = *((void *)&v459 + 1) - (unint64_t)__src[0];
            uint64_t v36 = (uint64_t)(v459 - (unint64_t)__src[1]) >> 3;
            if (v31 - v33 > ((uint64_t)(*((void *)&v459 + 1) - (unint64_t)__src[0]) >> 3) - v36)
            {
              BOOL v37 = (void *)v459 == __src[1];
              unint64_t v38 = v34 + v36;
              if (v35 >> 2 <= v38) {
                unint64_t v39 = v38;
              }
              else {
                unint64_t v39 = v35 >> 2;
              }
              if (v39)
              {
                if (v39 >> 61) {
                  goto LABEL_613;
                }
                uint64_t v40 = (char *)operator new(8 * v39);
              }
              else
              {
                uint64_t v40 = 0;
              }
              unint64_t v444 = (v31 << 12) - v37;
              uint64_t v107 = &v40[8 * v39];
              uint64_t v20 = v40;
              unsigned int v108 = v40;
              while (1)
              {
                unsigned int v109 = operator new(0x1000uLL);
                if (v108 == v107)
                {
                  if (v20 <= v40)
                  {
                    if (v107 == v40) {
                      unint64_t v115 = 1;
                    }
                    else {
                      unint64_t v115 = (v107 - v40) >> 2;
                    }
                    if (v115 >> 61) {
                      sub_1B4BB2D38();
                    }
                    unint64_t v116 = (char *)operator new(8 * v115);
                    unint64_t v117 = v116;
                    unint64_t v118 = v115 >> 2;
                    unsigned int v119 = &v116[8 * (v115 >> 2)];
                    unsigned int v108 = v119;
                    int64_t v120 = v107 - v20;
                    if (v107 != v20)
                    {
                      unsigned int v108 = &v119[v120 & 0xFFFFFFFFFFFFFFF8];
                      unint64_t v121 = v120 - 8;
                      if (v121 < 0x38 || (uint64_t v122 = 8 * v118, (unint64_t)(&v116[8 * v118] - v20) < 0x20))
                      {
                        unint64_t v123 = &v116[8 * (v115 >> 2)];
                        int v124 = v20;
                        goto LABEL_136;
                      }
                      uint64_t v126 = (v121 >> 3) + 1;
                      uint64_t v127 = 8 * (v126 & 0x3FFFFFFFFFFFFFFCLL);
                      unint64_t v123 = &v119[v127];
                      int v124 = &v20[v127];
                      unsigned int v128 = (long long *)(v20 + 16);
                      unint64_t v129 = &v116[v122 + 16];
                      uint64_t v130 = v126 & 0x3FFFFFFFFFFFFFFCLL;
                      do
                      {
                        long long v131 = *v128;
                        *((_OWORD *)v129 - 1) = *(v128 - 1);
                        *(_OWORD *)unint64_t v129 = v131;
                        v128 += 2;
                        v129 += 32;
                        v130 -= 4;
                      }
                      while (v130);
                      if (v126 != (v126 & 0x3FFFFFFFFFFFFFFCLL))
                      {
                        do
                        {
LABEL_136:
                          uint64_t v125 = *(void *)v124;
                          v124 += 8;
                          *(void *)unint64_t v123 = v125;
                          v123 += 8;
                        }
                        while (v123 != v108);
                      }
                    }
                    uint64_t v107 = &v116[8 * v115];
                    if (v40) {
                      operator delete(v40);
                    }
                    uint64_t v20 = v119;
                    uint64_t v40 = v117;
                    goto LABEL_120;
                  }
                  uint64_t v110 = (v20 - v40) >> 3;
                  if (v110 >= -1) {
                    uint64_t v111 = v110 + 1;
                  }
                  else {
                    uint64_t v111 = v110 + 2;
                  }
                  uint64_t v112 = v111 >> 1;
                  unsigned int v113 = &v20[-8 * (v111 >> 1)];
                  char v114 = v107;
                  if (v107 != v20)
                  {
                    memmove(v113, v20, v107 - v20);
                    char v114 = v20;
                  }
                  unsigned int v108 = &v113[v107 - v20];
                  uint64_t v20 = &v114[-8 * v112];
                }
LABEL_120:
                *(void *)unsigned int v108 = v109;
                v108 += 8;
                if (!--v34)
                {
                  unsigned int v132 = (void *)v459;
                  if (!v33)
                  {
LABEL_145:
                    unsigned int v133 = (uint64_t *)__src[1];
                    if (__src[1] == v132)
                    {
LABEL_146:
                      unint64_t v134 = __src[0];
                      __src[0] = v40;
                      __src[1] = v20;
                      *(void *)&long long v459 = v108;
                      *((void *)&v459 + 1) = v107;
                      unint64_t v16 = v444 + v446;
                      v460.i64[0] = v444 + v446;
                      if (v134) {
                        operator delete(v134);
                      }
                      a7 = v457;
                      goto LABEL_149;
                    }
                    while (2)
                    {
                      if (v108 != v107)
                      {
                        unsigned int v170 = v20;
                        goto LABEL_187;
                      }
                      if (v20 > v40)
                      {
                        uint64_t v172 = (v20 - v40) >> 3;
                        if (v172 >= -1) {
                          uint64_t v173 = v172 + 1;
                        }
                        else {
                          uint64_t v173 = v172 + 2;
                        }
                        uint64_t v174 = v173 >> 1;
                        unsigned int v175 = &v20[-8 * (v173 >> 1)];
                        char v176 = v107;
                        if (v107 != v20)
                        {
                          memmove(v175, v20, v107 - v20);
                          char v176 = v20;
                        }
                        unsigned int v108 = &v175[v107 - v20];
                        unsigned int v170 = &v176[-8 * v174];
                        goto LABEL_187;
                      }
                      if (v107 == v40) {
                        unint64_t v177 = 1;
                      }
                      else {
                        unint64_t v177 = (v107 - v40) >> 2;
                      }
                      if (v177 >> 61) {
                        sub_1B4BB2D38();
                      }
                      char v178 = (char *)operator new(8 * v177);
                      int v179 = v178;
                      unint64_t v180 = v177 >> 2;
                      unsigned int v170 = &v178[8 * (v177 >> 2)];
                      unsigned int v108 = v170;
                      int64_t v181 = v107 - v20;
                      if (v107 != v20)
                      {
                        unsigned int v108 = &v170[v181 & 0xFFFFFFFFFFFFFFF8];
                        unint64_t v182 = v181 - 8;
                        if (v182 < 0x38 || (uint64_t v183 = 8 * v180, (unint64_t)(&v178[8 * v180] - v20) < 0x20))
                        {
                          int v184 = &v178[8 * (v177 >> 2)];
                          unsigned int v185 = v20;
                          goto LABEL_204;
                        }
                        uint64_t v187 = (v182 >> 3) + 1;
                        uint64_t v188 = 8 * (v187 & 0x3FFFFFFFFFFFFFFCLL);
                        int v184 = &v170[v188];
                        unsigned int v185 = &v20[v188];
                        uint64_t v189 = (long long *)(v20 + 16);
                        uint64_t v190 = &v178[v183 + 16];
                        uint64_t v191 = v187 & 0x3FFFFFFFFFFFFFFCLL;
                        do
                        {
                          long long v192 = *v189;
                          *((_OWORD *)v190 - 1) = *(v189 - 1);
                          *(_OWORD *)uint64_t v190 = v192;
                          v189 += 2;
                          v190 += 32;
                          v191 -= 4;
                        }
                        while (v191);
                        if (v187 != (v187 & 0x3FFFFFFFFFFFFFFCLL))
                        {
                          do
                          {
LABEL_204:
                            uint64_t v186 = *(void *)v185;
                            v185 += 8;
                            *(void *)int v184 = v186;
                            v184 += 8;
                          }
                          while (v184 != v108);
                        }
                      }
                      uint64_t v107 = &v178[8 * v177];
                      if (v40) {
                        operator delete(v40);
                      }
                      uint64_t v40 = v179;
LABEL_187:
                      uint64_t v171 = *v133++;
                      *(void *)unsigned int v108 = v171;
                      v108 += 8;
                      uint64_t v20 = v170;
                      if (v133 == (uint64_t *)v459) {
                        goto LABEL_146;
                      }
                      continue;
                    }
                  }
                  while (2)
                  {
                    if (v108 != v107)
                    {
                      unint64_t v148 = v20;
                      goto LABEL_161;
                    }
                    if (v20 > v40)
                    {
                      uint64_t v149 = (v20 - v40) >> 3;
                      if (v149 >= -1) {
                        uint64_t v150 = v149 + 1;
                      }
                      else {
                        uint64_t v150 = v149 + 2;
                      }
                      uint64_t v151 = v150 >> 1;
                      unsigned int v152 = &v20[-8 * (v150 >> 1)];
                      unsigned int v153 = v107;
                      if (v107 != v20)
                      {
                        memmove(v152, v20, v107 - v20);
                        unsigned int v153 = v20;
                      }
                      unsigned int v108 = &v152[v107 - v20];
                      unint64_t v148 = &v153[-8 * v151];
                      goto LABEL_161;
                    }
                    if (v107 == v40) {
                      unint64_t v154 = 1;
                    }
                    else {
                      unint64_t v154 = (v107 - v40) >> 2;
                    }
                    if (v154 >> 61) {
                      sub_1B4BB2D38();
                    }
                    unsigned int v155 = (char *)operator new(8 * v154);
                    unsigned int v156 = v155;
                    unint64_t v157 = v154 >> 2;
                    unint64_t v148 = &v155[8 * (v154 >> 2)];
                    unsigned int v108 = v148;
                    int64_t v158 = v107 - v20;
                    if (v107 != v20)
                    {
                      unsigned int v108 = &v148[v158 & 0xFFFFFFFFFFFFFFF8];
                      unint64_t v159 = v158 - 8;
                      if (v159 < 0x38 || (uint64_t v160 = 8 * v157, (unint64_t)(&v155[8 * v157] - v20) < 0x20))
                      {
                        unsigned int v161 = &v155[8 * (v154 >> 2)];
                        int v162 = v20;
                        goto LABEL_178;
                      }
                      uint64_t v164 = (v159 >> 3) + 1;
                      uint64_t v165 = 8 * (v164 & 0x3FFFFFFFFFFFFFFCLL);
                      unsigned int v161 = &v148[v165];
                      int v162 = &v20[v165];
                      unsigned int v166 = (long long *)(v20 + 16);
                      char v167 = &v155[v160 + 16];
                      uint64_t v168 = v164 & 0x3FFFFFFFFFFFFFFCLL;
                      do
                      {
                        long long v169 = *v166;
                        *((_OWORD *)v167 - 1) = *(v166 - 1);
                        *(_OWORD *)char v167 = v169;
                        v166 += 2;
                        v167 += 32;
                        v168 -= 4;
                      }
                      while (v168);
                      if (v164 != (v164 & 0x3FFFFFFFFFFFFFFCLL))
                      {
                        do
                        {
LABEL_178:
                          uint64_t v163 = *(void *)v162;
                          v162 += 8;
                          *(void *)unsigned int v161 = v163;
                          v161 += 8;
                        }
                        while (v161 != v108);
                      }
                    }
                    uint64_t v107 = &v155[8 * v154];
                    if (v40) {
                      operator delete(v40);
                    }
                    uint64_t v40 = v156;
LABEL_161:
                    *(void *)unsigned int v108 = *(v132 - 1);
                    v108 += 8;
                    unsigned int v132 = (void *)(v459 - 8);
                    *(void *)&long long v459 = v459 - 8;
                    uint64_t v20 = v148;
                    if (!--v33) {
                      goto LABEL_145;
                    }
                    continue;
                  }
                }
              }
            }
            if (v34)
            {
              if (__src[1] == __src[0])
              {
LABEL_108:
                unint64_t v106 = v34;
                do
                {
                  v461.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x1000uLL);
                  sub_1B4BFE3B4((char **)__src, &v461);
                  --v106;
                }
                while (v106);
                v33 += v34;
                uint64_t v105 = v460.i64[0];
                uint64_t v20 = (char *)__src[1];
              }
              else
              {
                while (1)
                {
                  v461.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x1000uLL);
                  sub_1B4BFE544(__src, &v461);
                  uint64_t v20 = (char *)__src[1];
                  uint64_t v104 = 4095;
                  if ((void)v459 - (unint64_t)__src[1] != 8) {
                    uint64_t v104 = 4096;
                  }
                  uint64_t v105 = v104 + v460.i64[0];
                  v460.i64[0] += v104;
                  if (!--v34) {
                    break;
                  }
                  if (__src[1] == __src[0]) {
                    goto LABEL_108;
                  }
                }
              }
              unint64_t v16 = v105 + (v33 << 12);
              v460.i64[0] = v16;
              if (!v33) {
                goto LABEL_149;
              }
            }
            else
            {
              unint64_t v16 = v460.i64[0] + (v33 << 12);
              v460.i64[0] = v16;
              if (!v33) {
                goto LABEL_149;
              }
            }
            do
            {
              while (1)
              {
                uint64_t v291 = (char *)(v459 - 8);
                uint64_t v290 = *(void *)(v459 - 8);
                *(void *)&long long v459 = v459 - 8;
                if (v20 == __src[0]) {
                  break;
                }
                *((void *)v20 - 1) = v290;
                uint64_t v20 = (char *)__src[1] - 8;
                __src[1] = (char *)__src[1] - 8;
                if (!--v33) {
                  goto LABEL_149;
                }
              }
              if ((unint64_t)v291 >= *((void *)&v459 + 1))
              {
                if (*((char **)&v459 + 1) == v20) {
                  unint64_t v297 = 1;
                }
                else {
                  unint64_t v297 = (uint64_t)(*((void *)&v459 + 1) - (void)v20) >> 2;
                }
                if (v297 >> 61) {
                  goto LABEL_613;
                }
                unsigned int v298 = (char *)operator new(8 * v297);
                unint64_t v299 = (v297 + 3) >> 2;
                v296 = &v298[8 * v299];
                unsigned int v300 = v296;
                int64_t v301 = v291 - v20;
                if (v291 != v20)
                {
                  unsigned int v300 = &v296[v301 & 0xFFFFFFFFFFFFFFF8];
                  unint64_t v302 = v301 - 8;
                  unsigned int v303 = &v298[8 * v299];
                  unsigned int v304 = v20;
                  if (v302 < 0x38) {
                    goto LABEL_623;
                  }
                  uint64_t v305 = 8 * v299;
                  unsigned int v303 = &v298[8 * v299];
                  unsigned int v304 = v20;
                  if ((unint64_t)(v303 - v20) < 0x20) {
                    goto LABEL_623;
                  }
                  uint64_t v306 = (v302 >> 3) + 1;
                  uint64_t v307 = 8 * (v306 & 0x3FFFFFFFFFFFFFFCLL);
                  unsigned int v303 = &v296[v307];
                  unsigned int v304 = &v20[v307];
                  unsigned int v308 = (long long *)(v20 + 16);
                  unsigned int v309 = &v298[v305 + 16];
                  uint64_t v310 = v306 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    long long v311 = *v308;
                    *((_OWORD *)v309 - 1) = *(v308 - 1);
                    *(_OWORD *)unsigned int v309 = v311;
                    v308 += 2;
                    v309 += 32;
                    v310 -= 4;
                  }
                  while (v310);
                  if (v306 != (v306 & 0x3FFFFFFFFFFFFFFCLL))
                  {
LABEL_623:
                    do
                    {
                      uint64_t v312 = *(void *)v304;
                      v304 += 8;
                      *(void *)unsigned int v303 = v312;
                      v303 += 8;
                    }
                    while (v303 != v300);
                  }
                }
                __src[0] = v298;
                __src[1] = v296;
                *(void *)&long long v459 = v300;
                *((void *)&v459 + 1) = &v298[8 * v297];
                if (v20) {
                  operator delete(v20);
                }
              }
              else
              {
                uint64_t v292 = (uint64_t)(*((void *)&v459 + 1) - (void)v291) >> 3;
                if (v292 >= -1) {
                  uint64_t v293 = v292 + 1;
                }
                else {
                  uint64_t v293 = v292 + 2;
                }
                uint64_t v294 = v293 >> 1;
                unsigned int v295 = &v291[8 * (v293 >> 1)];
                v296 = &v295[-(v291 - v20)];
                if (v291 != v20)
                {
                  memmove(&v295[-(v291 - v20)], v20, v291 - v20);
                  uint64_t v20 = v291;
                }
                __src[1] = v296;
                *(void *)&long long v459 = &v20[8 * v294];
              }
              a7 = v457;
              *((void *)v296 - 1) = v290;
              uint64_t v20 = (char *)__src[1] - 8;
              __src[1] = (char *)__src[1] - 8;
              --v33;
            }
            while (v33);
          }
LABEL_149:
          uint64_t v19 = (char *)v459;
          unint64_t v24 = v16 >> 12;
        }
        unint64_t v135 = &v20[8 * v24];
        if (v19 == v20)
        {
          unint64_t v136 = 0;
          unint64_t v137 = v455;
          int v138 = v456;
          unint64_t v139 = v452;
          unint64_t v140 = v452 - v455;
          if (v452 > v455)
          {
LABEL_152:
            unsigned int v141 = &a7[v140];
            if (v137 >= v139 >> 1) {
              unint64_t v142 = v141;
            }
            else {
              unint64_t v142 = &v138[-v137];
            }
            if (v142 == a7)
            {
              unsigned int v145 = v136;
              unsigned int v144 = &v20[8 * v24];
              unint64_t v142 = a7;
              unint64_t v139 = v137;
              if (!v137) {
                goto LABEL_527;
              }
            }
            else
            {
              int v143 = v142;
              unsigned int v144 = &v20[8 * v24];
              unsigned int v145 = v136;
              do
              {
                if (v145 == *(char **)v144)
                {
                  uint64_t v147 = *((void *)v144 - 1);
                  v144 -= 8;
                  unsigned int v145 = (char *)(v147 + 4096);
                }
                char v146 = *--v143;
                *--unsigned int v145 = v146;
                int64x2_t v460 = vaddq_s64(v460, (int64x2_t)xmmword_1B4C9A3D0);
              }
              while (v143 != a7);
              unint64_t v137 = v455;
              unint64_t v139 = v455;
              if (!v455) {
                goto LABEL_527;
              }
            }
            goto LABEL_218;
          }
        }
        else
        {
          unint64_t v136 = (char *)(*(void *)v135 + (v16 & 0xFFF));
          unint64_t v137 = v455;
          int v138 = v456;
          unint64_t v139 = v452;
          unint64_t v140 = v452 - v455;
          if (v452 > v455) {
            goto LABEL_152;
          }
        }
        unsigned int v145 = v136;
        unsigned int v144 = &v20[8 * v24];
        unint64_t v142 = a7;
        if (!v139) {
          goto LABEL_527;
        }
LABEL_218:
        unint64_t v193 = v139;
        uint64_t v194 = (uint64_t)&v136[v139 - *(void *)v135];
        if (v194 >= 1)
        {
          unsigned int v195 = &v135[8 * ((unint64_t)v194 >> 12)];
          v196 = (char *)(*(void *)v195 + (v194 & 0xFFF));
          v197 = (void **)v195;
          uint64_t v198 = v196;
          if (v196 != v136) {
            goto LABEL_233;
          }
LABEL_222:
          if (v193 >= v137) {
            goto LABEL_259;
          }
          unsigned int v200 = *(char **)v135;
          uint64_t v201 = (uint64_t)&v136[v137 - *(void *)v135];
          if (v201 < 1)
          {
            unint64_t v210 = 4095 - v201;
            unsigned int v202 = &v135[-8 * (v210 >> 12)];
            unsigned int v203 = (char *)(*(void *)v202 + (~(_WORD)v210 & 0xFFF));
            if (v195 != v202)
            {
LABEL_225:
              uint64_t v204 = *(void *)v195 + 4096;
              if ((char *)v204 != v196)
              {
                unint64_t v135 = &v20[8 * v24 + 8];
                if (v204 - (uint64_t)v196 >= v200 - v136 + 4096) {
                  size_t v205 = v200 - v136 + 4096;
                }
                else {
                  size_t v205 = v204 - (void)v196;
                }
                if (v205) {
                  goto LABEL_240;
                }
                while (1)
                {
                  v196 += v205;
                  if (v196 == (char *)v204) {
                    break;
                  }
                  unsigned int v209 = *(char **)v135;
                  v135 += 8;
                  unint64_t v136 = v209;
                  if (v204 - (uint64_t)v196 >= 4096) {
                    size_t v205 = 4096;
                  }
                  else {
                    size_t v205 = v204 - (void)v196;
                  }
                  if (v205) {
LABEL_240:
                  }
                    memmove(v136, v196, v205);
                }
                v136 += v205;
                unsigned int v200 = (char *)*((void *)v135 - 1);
                if (v200 + 4096 == v136)
                {
                  unsigned int v200 = *(char **)v135;
                  unint64_t v136 = *(char **)v135;
                }
                else
                {
                  v135 -= 8;
                }
              }
              char v313 = (uint64_t *)(v195 + 8);
              if (v195 + 8 == v202)
              {
LABEL_397:
                unsigned int v318 = *(char **)v202;
                if (*(char **)v202 != v203)
                {
                  unsigned int v319 = *(char **)v135;
                  v135 += 8;
                  int v138 = v456;
                  uint64_t v320 = v319 - v136 + 4096;
                  if (v203 - v318 >= v320) {
                    size_t v321 = v320;
                  }
                  else {
                    size_t v321 = v203 - v318;
                  }
                  if (v321) {
                    goto LABEL_407;
                  }
                  while (1)
                  {
                    v318 += v321;
                    if (v318 == v203) {
                      break;
                    }
                    unint64_t v322 = *(char **)v135;
                    v135 += 8;
                    unint64_t v136 = v322;
                    if (v203 - v318 >= 4096) {
                      size_t v321 = 4096;
                    }
                    else {
                      size_t v321 = v203 - v318;
                    }
                    if (v321) {
LABEL_407:
                    }
                      memmove(v136, v318, v321);
                  }
                  v136 += v321;
                  unsigned int v213 = v135 - 8;
                  if ((char *)(*((void *)v135 - 1) + 4096) != v136)
                  {
LABEL_410:
                    unint64_t v135 = v213;
                    if (v142 == v138) {
                      goto LABEL_527;
                    }
                    goto LABEL_260;
                  }
                  goto LABEL_258;
                }
                goto LABEL_412;
              }
              while (1)
              {
                uint64_t v314 = 0;
                uint64_t v315 = *v313;
                v135 += 8;
                if (v200 - v136 + 4096 <= 4096) {
                  size_t v316 = v200 - v136 + 4096;
                }
                else {
                  size_t v316 = 4096;
                }
                if (v316) {
LABEL_393:
                }
                  memmove(v136, (const void *)(v315 + v314), v316);
                while (1)
                {
                  v314 += v316;
                  if (v314 == 4096) {
                    break;
                  }
                  unsigned int v317 = *(char **)v135;
                  v135 += 8;
                  unint64_t v136 = v317;
                  if (4096 - v314 >= 4096) {
                    size_t v316 = 4096;
                  }
                  else {
                    size_t v316 = 4096 - v314;
                  }
                  if (v316) {
                    goto LABEL_393;
                  }
                }
                v136 += v316;
                unsigned int v200 = (char *)*((void *)v135 - 1);
                if (v200 + 4096 == v136)
                {
                  unsigned int v200 = *(char **)v135;
                  unint64_t v136 = *(char **)v135;
                  if (++v313 == (uint64_t *)v202) {
                    goto LABEL_397;
                  }
                }
                else
                {
                  v135 -= 8;
                  if (++v313 == (uint64_t *)v202) {
                    goto LABEL_397;
                  }
                }
              }
            }
          }
          else
          {
            unsigned int v202 = &v135[8 * ((unint64_t)v201 >> 12)];
            unsigned int v203 = (char *)(*(void *)v202 + (v201 & 0xFFF));
            if (v195 != v202) {
              goto LABEL_225;
            }
          }
          if (v196 != v203)
          {
            unint64_t v135 = &v20[8 * v24 + 8];
            int v138 = v456;
            if (v203 - v196 >= v200 - v136 + 4096) {
              size_t v211 = v200 - v136 + 4096;
            }
            else {
              size_t v211 = v203 - v196;
            }
            if (v211) {
              goto LABEL_255;
            }
            while (1)
            {
              v196 += v211;
              if (v196 == v203) {
                break;
              }
              unsigned int v212 = *(char **)v135;
              v135 += 8;
              unint64_t v136 = v212;
              if (v203 - v196 >= 4096) {
                size_t v211 = 4096;
              }
              else {
                size_t v211 = v203 - v196;
              }
              if (v211) {
LABEL_255:
              }
                memmove(v136, v196, v211);
            }
            v136 += v211;
            unsigned int v213 = v135 - 8;
            if ((char *)(*((void *)v135 - 1) + 4096) != v136) {
              goto LABEL_410;
            }
LABEL_258:
            unint64_t v136 = *(char **)v135;
LABEL_259:
            if (v142 == v138) {
              goto LABEL_527;
            }
            goto LABEL_260;
          }
LABEL_412:
          int v138 = v456;
          if (v142 == v456) {
            goto LABEL_527;
          }
LABEL_260:
          uint64_t v215 = *(char **)v135;
          unsigned int v214 = (void **)(v135 + 8);
          uint64_t v216 = v215 - v136 + 4096;
          if (v138 - v142 >= v216) {
            size_t v217 = v216;
          }
          else {
            size_t v217 = v138 - v142;
          }
          if (v217) {
            goto LABEL_269;
          }
          while (1)
          {
            do
            {
              v142 += v217;
              if (v142 == v138) {
                goto LABEL_527;
              }
              unsigned int v218 = (char *)*v214++;
              unint64_t v136 = v218;
              if (v138 - v142 >= 4096) {
                size_t v217 = 4096;
              }
              else {
                size_t v217 = v138 - v142;
              }
            }
            while (!v217);
LABEL_269:
            memmove(v136, v142, v217);
          }
        }
        unint64_t v199 = 4095 - v194;
        unsigned int v195 = &v135[-8 * (v199 >> 12)];
        v196 = (char *)(*(void *)v195 + (~(_WORD)v199 & 0xFFF));
        v197 = (void **)v195;
        uint64_t v198 = v196;
        if (v196 == v136) {
          goto LABEL_222;
        }
        while (1)
        {
LABEL_233:
          if (v145 == *(char **)v144)
          {
            uint64_t v206 = *((void *)v144 - 1);
            v144 -= 8;
            unsigned int v145 = (char *)(v206 + 4096);
            if (v198 == *v197) {
              goto LABEL_235;
            }
          }
          else if (v198 == *v197)
          {
LABEL_235:
            uint64_t v208 = (uint64_t)*--v197;
            uint64_t v198 = (char *)(v208 + 4096);
          }
          char v207 = *--v198;
          *--unsigned int v145 = v207;
          int64x2_t v460 = vaddq_s64(v460, (int64x2_t)xmmword_1B4C9A3D0);
          if (v198 == v136) {
            goto LABEL_222;
          }
        }
      }
      uint64_t v41 = (v22 << 9) - 1;
      uint64_t v42 = v459 - (unint64_t)__src[1];
      if ((void *)v459 == __src[1]) {
        uint64_t v41 = 0;
      }
      unint64_t v43 = v41 - v17;
      BOOL v44 = v28 >= v43;
      unint64_t v45 = v28 - v43;
      if (v45 == 0 || !v44) {
        goto LABEL_422;
      }
      uint64_t v447 = v460.i64[0];
      if ((void *)v459 == __src[1]) {
        unint64_t v46 = v45 + 1;
      }
      else {
        unint64_t v46 = v45;
      }
      if ((v46 & 0xFFF) != 0) {
        unint64_t v47 = (v46 >> 12) + 1;
      }
      else {
        unint64_t v47 = v46 >> 12;
      }
      if (v47 >= v24) {
        unint64_t v48 = v24;
      }
      else {
        unint64_t v48 = v47;
      }
      if (v47 <= v24)
      {
        uint64_t v76 = v460.i64[0] - (v48 << 12);
        v460.i64[0] = v76;
        if (!v48) {
          goto LABEL_421;
        }
        while (2)
        {
          int v78 = (char *)__src[1];
          uint64_t v79 = (char *)__src[1] + 8;
          uint64_t v80 = *(void *)__src[1];
          __src[1] = (char *)__src[1] + 8;
          if (v19 == *((char **)&v459 + 1))
          {
            int v81 = __src[0];
            if (v79 > __src[0])
            {
              uint64_t v82 = (v79 - (char *)__src[0]) >> 3;
              if (v82 >= -1) {
                uint64_t v83 = v82 + 1;
              }
              else {
                uint64_t v83 = v82 + 2;
              }
              uint64_t v84 = v83 >> 1;
              int v85 = &v79[-8 * (v83 >> 1)];
              int64_t v86 = v19 - v79;
              if (v19 != v79)
              {
                memmove(&v79[-8 * (v83 >> 1)], v79, v19 - v79);
                uint64_t v19 = v79;
              }
              int v77 = &v19[-8 * v84];
              uint64_t v19 = &v85[v86];
              __src[1] = v77;
              *(void *)&long long v459 = &v85[v86];
              goto LABEL_79;
            }
            if (v19 == __src[0]) {
              unint64_t v87 = 1;
            }
            else {
              unint64_t v87 = (v19 - (char *)__src[0]) >> 2;
            }
            if (v87 >> 61) {
LABEL_613:
            }
              sub_1B4BB2D38();
            uint64_t v88 = operator new(8 * v87);
            unint64_t v89 = v87 >> 2;
            unint64_t v90 = &v88[8 * (v87 >> 2)];
            int64_t v92 = v19 - v79;
            BOOL v91 = v19 == v79;
            uint64_t v19 = v90;
            if (!v91)
            {
              uint64_t v19 = &v90[v92 & 0xFFFFFFFFFFFFFFF8];
              unint64_t v93 = v92 - 8;
              if (v93 < 0x38)
              {
                int v94 = &v88[8 * (v87 >> 2)];
                goto LABEL_99;
              }
              uint64_t v95 = 8 * v89;
              unint64_t v96 = &v88[8 * v89] - v79;
              int v94 = &v88[8 * (v87 >> 2)];
              if (v96 < 0x20) {
                goto LABEL_624;
              }
              uint64_t v97 = (v93 >> 3) + 1;
              uint64_t v98 = 8 * (v97 & 0x3FFFFFFFFFFFFFFCLL);
              int v94 = &v90[v98];
              v79 += v98;
              uint64_t v99 = (long long *)(v78 + 24);
              int v100 = &v88[v95 + 16];
              uint64_t v101 = v97 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v102 = *v99;
                *(v100 - 1) = *(v99 - 1);
                _OWORD *v100 = v102;
                v99 += 2;
                v100 += 2;
                v101 -= 4;
              }
              while (v101);
              if (v97 != (v97 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_624:
                do
                {
LABEL_99:
                  uint64_t v103 = *(void *)v79;
                  v79 += 8;
                  *(void *)int v94 = v103;
                  v94 += 8;
                }
                while (v94 != v19);
              }
            }
            __src[0] = v88;
            __src[1] = &v88[8 * (v87 >> 2)];
            *(void *)&long long v459 = v19;
            *((void *)&v459 + 1) = &v88[8 * v87];
            if (v81) {
              operator delete(v81);
            }
LABEL_79:
            a7 = v457;
          }
          *(void *)uint64_t v19 = v80;
          uint64_t v19 = (char *)(v459 + 8);
          *(void *)&long long v459 = v459 + 8;
          if (!--v48) {
            goto LABEL_421;
          }
          continue;
        }
      }
      unint64_t v49 = v47 - v48;
      uint64_t v50 = v42 >> 3;
      if (v47 - v48 <= ((uint64_t)(*((void *)&v459 + 1) - (unint64_t)__src[0]) >> 3) - (v42 >> 3))
      {
        if (!v49) {
          goto LABEL_419;
        }
        do
        {
          if (*((void *)&v459 + 1) == (void)v459)
          {
            for (uint64_t i = 0; i != v49; ++i)
            {
              v461.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x1000uLL);
              sub_1B4BFE544(__src, &v461);
              uint64_t v19 = (char *)v459;
              uint64_t v324 = 4095;
              if ((void)v459 - (unint64_t)__src[1] != 8) {
                uint64_t v324 = 4096;
              }
              uint64_t v325 = v324 + v460.i64[0];
              v460.i64[0] = v325;
            }
            unint64_t v48 = v47;
            goto LABEL_420;
          }
          v461.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x1000uLL);
          sub_1B4BFE3B4((char **)__src, &v461);
          --v47;
          --v49;
        }
        while (v49);
        uint64_t v19 = (char *)v459;
LABEL_419:
        uint64_t v325 = v460.i64[0];
LABEL_420:
        uint64_t v76 = v325 - (v48 << 12);
        v460.i64[0] = v76;
        if (!v48) {
          goto LABEL_421;
        }
        while (2)
        {
          v339 = (char *)__src[1];
          int64_t v340 = (char *)__src[1] + 8;
          uint64_t v341 = *(void *)__src[1];
          __src[1] = (char *)__src[1] + 8;
          if (v19 == *((char **)&v459 + 1))
          {
            unsigned int v342 = __src[0];
            if (v340 > __src[0])
            {
              uint64_t v343 = (v340 - (char *)__src[0]) >> 3;
              if (v343 >= -1) {
                uint64_t v344 = v343 + 1;
              }
              else {
                uint64_t v344 = v343 + 2;
              }
              uint64_t v345 = v344 >> 1;
              uint64_t v346 = &v340[-8 * (v344 >> 1)];
              int64_t v347 = v19 - v340;
              if (v19 != v340)
              {
                memmove(&v340[-8 * (v344 >> 1)], v340, v19 - v340);
                uint64_t v19 = v340;
              }
              unsigned int v338 = &v19[-8 * v345];
              uint64_t v19 = &v346[v347];
              __src[1] = v338;
              *(void *)&long long v459 = &v346[v347];
              goto LABEL_433;
            }
            if (v19 == __src[0]) {
              unint64_t v348 = 1;
            }
            else {
              unint64_t v348 = (v19 - (char *)__src[0]) >> 2;
            }
            if (v348 >> 61) {
              goto LABEL_613;
            }
            unsigned int v349 = operator new(8 * v348);
            unint64_t v350 = v348 >> 2;
            int v351 = &v349[8 * (v348 >> 2)];
            int64_t v352 = v19 - v340;
            BOOL v91 = v19 == v340;
            uint64_t v19 = v351;
            if (!v91)
            {
              uint64_t v19 = &v351[v352 & 0xFFFFFFFFFFFFFFF8];
              unint64_t v353 = v352 - 8;
              if (v353 < 0x38)
              {
                unsigned int v354 = &v349[8 * (v348 >> 2)];
                goto LABEL_453;
              }
              uint64_t v355 = 8 * v350;
              unint64_t v356 = &v349[8 * v350] - v340;
              unsigned int v354 = &v349[8 * (v348 >> 2)];
              if (v356 < 0x20) {
                goto LABEL_625;
              }
              uint64_t v357 = (v353 >> 3) + 1;
              uint64_t v358 = 8 * (v357 & 0x3FFFFFFFFFFFFFFCLL);
              unsigned int v354 = &v351[v358];
              v340 += v358;
              v359 = (long long *)(v339 + 24);
              unsigned int v360 = &v349[v355 + 16];
              uint64_t v361 = v357 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v362 = *v359;
                *(v360 - 1) = *(v359 - 1);
                *unsigned int v360 = v362;
                v359 += 2;
                v360 += 2;
                v361 -= 4;
              }
              while (v361);
              if (v357 != (v357 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_625:
                do
                {
LABEL_453:
                  uint64_t v363 = *(void *)v340;
                  v340 += 8;
                  *(void *)unsigned int v354 = v363;
                  v354 += 8;
                }
                while (v354 != v19);
              }
            }
            __src[0] = v349;
            __src[1] = &v349[8 * (v348 >> 2)];
            *(void *)&long long v459 = v19;
            *((void *)&v459 + 1) = &v349[8 * v348];
            if (v342) {
              operator delete(v342);
            }
LABEL_433:
            a7 = v457;
          }
          *(void *)uint64_t v19 = v341;
          uint64_t v19 = (char *)(v459 + 8);
          *(void *)&long long v459 = v459 + 8;
          if (!--v48) {
            goto LABEL_421;
          }
          continue;
        }
      }
      if ((uint64_t)(*((void *)&v459 + 1) - (unint64_t)__src[0]) >> 2 <= v49 + v50) {
        unint64_t v51 = v49 + v50;
      }
      else {
        unint64_t v51 = (uint64_t)(*((void *)&v459 + 1) - (unint64_t)__src[0]) >> 2;
      }
      if (v51)
      {
        if (v51 >> 61) {
          goto LABEL_613;
        }
        int v52 = (char *)operator new(8 * v51);
      }
      else
      {
        int v52 = 0;
      }
      unint64_t v445 = v48 << 12;
      unsigned int v219 = &v52[8 * (v50 - v48)];
      char v220 = &v52[8 * v51];
      uint64_t v19 = v219;
      do
      {
        uint64_t v221 = operator new(0x1000uLL);
        if (v19 != v220) {
          goto LABEL_276;
        }
        if (v219 > v52)
        {
          uint64_t v222 = (v219 - v52) >> 3;
          if (v222 >= -1) {
            uint64_t v223 = v222 + 1;
          }
          else {
            uint64_t v223 = v222 + 2;
          }
          uint64_t v224 = v223 >> 1;
          unsigned int v225 = &v219[-8 * (v223 >> 1)];
          unsigned int v226 = v220;
          if (v220 != v219)
          {
            memmove(v225, v219, v220 - v219);
            unsigned int v226 = v219;
          }
          uint64_t v19 = &v225[v220 - v219];
          unsigned int v219 = &v226[-8 * v224];
          goto LABEL_276;
        }
        if (v220 == v52) {
          unint64_t v227 = 1;
        }
        else {
          unint64_t v227 = (v220 - v52) >> 2;
        }
        if (v227 >> 61) {
          sub_1B4BB2D38();
        }
        v228 = (char *)operator new(8 * v227);
        unsigned int v229 = v228;
        unint64_t v230 = v227 >> 2;
        unsigned int v231 = &v228[8 * (v227 >> 2)];
        uint64_t v19 = v231;
        int64_t v232 = v220 - v219;
        if (v220 != v219)
        {
          uint64_t v19 = &v231[v232 & 0xFFFFFFFFFFFFFFF8];
          unint64_t v233 = v232 - 8;
          if (v233 >= 0x38 && (uint64_t v234 = 8 * v230, (unint64_t)(&v228[8 * v230] - v219) >= 0x20))
          {
            uint64_t v238 = (v233 >> 3) + 1;
            uint64_t v239 = 8 * (v238 & 0x3FFFFFFFFFFFFFFCLL);
            uint64_t v235 = &v231[v239];
            unsigned int v236 = &v219[v239];
            int64_t v240 = (long long *)(v219 + 16);
            v241 = &v228[v234 + 16];
            uint64_t v242 = v238 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v243 = *v240;
              *((_OWORD *)v241 - 1) = *(v240 - 1);
              *(_OWORD *)v241 = v243;
              v240 += 2;
              v241 += 32;
              v242 -= 4;
            }
            while (v242);
            if (v238 == (v238 & 0x3FFFFFFFFFFFFFFCLL)) {
              goto LABEL_293;
            }
          }
          else
          {
            uint64_t v235 = &v228[8 * (v227 >> 2)];
            unsigned int v236 = v219;
          }
          do
          {
            uint64_t v237 = *(void *)v236;
            v236 += 8;
            *(void *)uint64_t v235 = v237;
            v235 += 8;
          }
          while (v235 != v19);
        }
LABEL_293:
        char v220 = &v228[8 * v227];
        if (v52) {
          operator delete(v52);
        }
        unsigned int v219 = v231;
        int v52 = v229;
LABEL_276:
        *(void *)uint64_t v19 = v221;
        v19 += 8;
        --v49;
      }
      while (v49);
      for (int j = __src[1]; v48; --v48)
      {
        if (v19 == v220)
        {
          if (v219 <= v52)
          {
            if (v220 == v52) {
              unint64_t v253 = 1;
            }
            else {
              unint64_t v253 = (v220 - v52) >> 2;
            }
            if (v253 >> 61) {
              sub_1B4BB2D38();
            }
            unsigned int v254 = (char *)operator new(8 * v253);
            unsigned int v255 = v254;
            unint64_t v256 = v253 >> 2;
            v247 = &v254[8 * (v253 >> 2)];
            uint64_t v19 = v247;
            int64_t v257 = v220 - v219;
            if (v220 != v219)
            {
              uint64_t v19 = &v247[v257 & 0xFFFFFFFFFFFFFFF8];
              unint64_t v258 = v257 - 8;
              if (v258 < 0x38 || (uint64_t v259 = 8 * v256, (unint64_t)(&v254[8 * v256] - v219) < 0x20))
              {
                v260 = &v254[8 * (v253 >> 2)];
                int v261 = v219;
                goto LABEL_323;
              }
              uint64_t v263 = (v258 >> 3) + 1;
              uint64_t v264 = 8 * (v263 & 0x3FFFFFFFFFFFFFFCLL);
              v260 = &v247[v264];
              int v261 = &v219[v264];
              unint64_t v265 = (long long *)(v219 + 16);
              v266 = &v254[v259 + 16];
              uint64_t v267 = v263 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v268 = *v265;
                *((_OWORD *)v266 - 1) = *(v265 - 1);
                *(_OWORD *)v266 = v268;
                v265 += 2;
                v266 += 32;
                v267 -= 4;
              }
              while (v267);
              if (v263 != (v263 & 0x3FFFFFFFFFFFFFFCLL))
              {
                do
                {
LABEL_323:
                  uint64_t v262 = *(void *)v261;
                  v261 += 8;
                  *(void *)v260 = v262;
                  v260 += 8;
                }
                while (v260 != v19);
              }
            }
            char v220 = &v254[8 * v253];
            if (v52) {
              operator delete(v52);
            }
            int v52 = v255;
            goto LABEL_306;
          }
          uint64_t v248 = (v219 - v52) >> 3;
          if (v248 >= -1) {
            uint64_t v249 = v248 + 1;
          }
          else {
            uint64_t v249 = v248 + 2;
          }
          uint64_t v250 = v249 >> 1;
          unsigned int v251 = &v219[-8 * (v249 >> 1)];
          unsigned int v252 = v220;
          if (v220 != v219)
          {
            memmove(v251, v219, v220 - v219);
            unsigned int v252 = v219;
          }
          uint64_t v19 = &v251[v220 - v219];
          v247 = &v252[-8 * v250];
        }
        else
        {
          v247 = v219;
        }
LABEL_306:
        *(void *)uint64_t v19 = *j;
        v19 += 8;
        int j = (char *)__src[1] + 8;
        __src[1] = (char *)__src[1] + 8;
        unsigned int v219 = v247;
      }
      v245 = (char *)v459;
      if ((void *)v459 != j)
      {
        do
        {
          if (v219 == v52)
          {
            if (v19 >= v220)
            {
              if (v220 == v52) {
                unint64_t v274 = 1;
              }
              else {
                unint64_t v274 = (v220 - v52) >> 2;
              }
              if (v274 >> 61) {
                sub_1B4BB2D38();
              }
              unsigned int v275 = (char *)operator new(8 * v274);
              unsigned int v276 = v275;
              unint64_t v277 = (v274 + 3) >> 2;
              unsigned int v219 = &v275[8 * v277];
              int64_t v278 = v19 - v52;
              BOOL v91 = v19 == v52;
              uint64_t v19 = v219;
              if (!v91)
              {
                uint64_t v19 = &v219[v278 & 0xFFFFFFFFFFFFFFF8];
                unint64_t v279 = v278 - 8;
                v280 = &v275[8 * v277];
                unsigned int v281 = v52;
                if (v279 < 0x38) {
                  goto LABEL_626;
                }
                uint64_t v282 = 8 * v277;
                v280 = &v275[8 * v277];
                unsigned int v281 = v52;
                if ((unint64_t)(v280 - v52) < 0x20) {
                  goto LABEL_626;
                }
                uint64_t v283 = (v279 >> 3) + 1;
                uint64_t v284 = 8 * (v283 & 0x3FFFFFFFFFFFFFFCLL);
                v280 = &v219[v284];
                unsigned int v281 = &v52[v284];
                int v285 = (long long *)(v52 + 16);
                unsigned int v286 = &v275[v282 + 16];
                uint64_t v287 = v283 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  long long v288 = *v285;
                  *((_OWORD *)v286 - 1) = *(v285 - 1);
                  *(_OWORD *)unsigned int v286 = v288;
                  v285 += 2;
                  v286 += 32;
                  v287 -= 4;
                }
                while (v287);
                if (v283 != (v283 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_626:
                  do
                  {
                    uint64_t v289 = *(void *)v281;
                    v281 += 8;
                    *(void *)v280 = v289;
                    v280 += 8;
                  }
                  while (v280 != v19);
                }
              }
              char v220 = &v275[8 * v274];
              if (v52) {
                operator delete(v52);
              }
              int v52 = v276;
            }
            else
            {
              uint64_t v270 = (v220 - v19) >> 3;
              if (v270 >= -1) {
                uint64_t v271 = v270 + 1;
              }
              else {
                uint64_t v271 = v270 + 2;
              }
              uint64_t v272 = v271 >> 1;
              unsigned int v219 = &v52[8 * (v271 >> 1)];
              v273 = v52;
              if (v19 != v52)
              {
                memmove(v219, v52, v19 - v52);
                v273 = v19;
              }
              uint64_t v19 = &v273[8 * v272];
            }
          }
          uint64_t v269 = *((void *)v245 - 1);
          v245 -= 8;
          *((void *)v219 - 1) = v269;
          v219 -= 8;
        }
        while (v245 != __src[1]);
      }
      v246 = __src[0];
      __src[0] = v52;
      __src[1] = v219;
      *(void *)&long long v459 = v19;
      *((void *)&v459 + 1) = v220;
      uint64_t v76 = v447 - v445;
      v460.i64[0] = v447 - v445;
      if (v246) {
        operator delete(v246);
      }
      a7 = v457;
LABEL_421:
      uint64_t v15 = v460.i64[1];
      uint64_t v20 = (char *)__src[1];
      LOWORD(v17) = v76 + v460.i16[4];
      unint64_t v18 = (unint64_t)(v76 + v460.i64[1]) >> 12;
LABEL_422:
      unsigned int v326 = &v20[8 * v18];
      if (v19 != v20)
      {
        v327 = (char *)(*(void *)v326 + (v17 & 0xFFF));
        unsigned int v328 = v456;
        unint64_t v329 = v452;
        unint64_t v330 = v15 - v455;
        unint64_t v331 = v330 - v452;
        if (v330 < v452) {
          goto LABEL_424;
        }
LABEL_457:
        unsigned int v336 = v327;
        unsigned int v335 = v326;
        unsigned int v333 = v328;
        if (!v329) {
          goto LABEL_527;
        }
LABEL_461:
        unint64_t v364 = v329;
        uint64_t v365 = (uint64_t)&v327[-v329 - *(void *)v326];
        if (v365 >= 1)
        {
          uint64_t v366 = &v326[8 * ((unint64_t)v365 >> 12)];
          uint64_t v367 = (char *)(*(void *)v366 + (v365 & 0xFFF));
          uint64_t v368 = v366;
          unsigned int v369 = v367;
          if (v367 != v327) {
            goto LABEL_477;
          }
LABEL_465:
          if (v364 >= v330) {
            goto LABEL_515;
          }
          v371 = *(unsigned char **)v326;
          uint64_t v372 = (uint64_t)&v327[-v330 - *(void *)v326];
          if (v372 < 1)
          {
            unint64_t v381 = 4095 - v372;
            unsigned int v373 = &v326[-8 * (v381 >> 12)];
            unsigned int v374 = (char *)(*(void *)v373 + (~(_WORD)v381 & 0xFFF));
            if (v373 == v366) {
              goto LABEL_483;
            }
LABEL_468:
            uint64_t v375 = *(unsigned char **)v366;
            if (*(char **)v366 != v367)
            {
              while (1)
              {
                uint64_t v376 = (char *)(v327 - v371);
                if (v367 - v375 >= (uint64_t)v376) {
                  size_t v377 = (size_t)v376;
                }
                else {
                  size_t v377 = v367 - v375;
                }
                v367 -= v377;
                v327 -= v377;
                if (v377) {
                  memmove(v327, v367, v377);
                }
                if (v367 == v375) {
                  break;
                }
                uint64_t v378 = (unsigned char *)*((void *)v326 - 1);
                v326 -= 8;
                v371 = v378;
                v327 = v378 + 4096;
              }
              goto LABEL_492;
            }
            while (1)
            {
              v366 -= 8;
              if (v366 == v373) {
                break;
              }
              unsigned int v386 = *(unsigned char **)v366;
              unint64_t v387 = (char *)(*(void *)v366 + 4096);
              while (1)
              {
                unsigned int v388 = (char *)(v327 - v371);
                if (v387 - v386 >= (uint64_t)v388) {
                  size_t v389 = (size_t)v388;
                }
                else {
                  size_t v389 = v387 - v386;
                }
                v387 -= v389;
                v327 -= v389;
                if (v389) {
                  memmove(v327, v387, v389);
                }
                if (v387 == v386) {
                  break;
                }
                unint64_t v390 = (unsigned char *)*((void *)v326 - 1);
                v326 -= 8;
                v371 = v390;
                v327 = v390 + 4096;
              }
LABEL_492:
              v371 = *(unsigned char **)v326;
              if ((char *)(*(void *)v326 + 4096) == v327)
              {
                unsigned int v385 = (unsigned char *)*((void *)v326 + 1);
                v326 += 8;
                v371 = v385;
                v327 = v385;
              }
            }
            unsigned int v391 = (char *)(*(void *)v373 + 4096);
            if (v391 != v374)
            {
              uint64_t v392 = *(void *)v326;
              a7 = v457;
              while (1)
              {
                unsigned int v393 = &v327[-v392];
                if (v391 - v374 >= (uint64_t)v393) {
                  size_t v394 = (size_t)v393;
                }
                else {
                  size_t v394 = v391 - v374;
                }
                v391 -= v394;
                v327 -= v394;
                if (v394) {
                  memmove(v327, v391, v394);
                }
                if (v391 == v374) {
                  break;
                }
                uint64_t v395 = *((void *)v326 - 1);
                v326 -= 8;
                uint64_t v392 = v395;
                v327 = (char *)(v395 + 4096);
              }
              goto LABEL_512;
            }
          }
          else
          {
            unsigned int v373 = &v326[8 * ((unint64_t)v372 >> 12)];
            unsigned int v374 = (char *)(*(void *)v373 + (v372 & 0xFFF));
            if (v373 != v366) {
              goto LABEL_468;
            }
LABEL_483:
            if (v374 != v367)
            {
              a7 = v457;
              while (1)
              {
                unint64_t v382 = (char *)(v327 - v371);
                if (v367 - v374 >= (uint64_t)v382) {
                  size_t v383 = (size_t)v382;
                }
                else {
                  size_t v383 = v367 - v374;
                }
                v367 -= v383;
                v327 -= v383;
                if (v383) {
                  memmove(v327, v367, v383);
                }
                if (v367 == v374) {
                  break;
                }
                unint64_t v384 = (unsigned char *)*((void *)v326 - 1);
                v326 -= 8;
                v371 = v384;
                v327 = v384 + 4096;
              }
LABEL_512:
              if ((char *)(*(void *)v326 + 4096) == v327)
              {
                unsigned int v396 = (char *)*((void *)v326 + 1);
                v326 += 8;
                v327 = v396;
              }
LABEL_515:
              if (v333 == a7) {
                goto LABEL_527;
              }
              uint64_t v398 = *(void *)v326;
              unsigned int v397 = v326 - 8;
              unsigned int v399 = &v327[-v398];
              if (v333 - a7 >= (uint64_t)&v327[-v398]) {
                size_t v400 = (size_t)v399;
              }
              else {
                size_t v400 = v333 - a7;
              }
              unsigned int v401 = &v333[-v400];
              if (v400) {
                goto LABEL_525;
              }
              while (1)
              {
                do
                {
                  if (v401 == a7) {
                    goto LABEL_527;
                  }
                  uint64_t v402 = *(void *)v397;
                  v397 -= 8;
                  v327 = (char *)(v402 + 4096);
                  if (v401 - a7 >= 4096) {
                    size_t v400 = 4096;
                  }
                  else {
                    size_t v400 = v401 - a7;
                  }
                  v401 -= v400;
                }
                while (!v400);
LABEL_525:
                memmove(&v327[-v400], v401, v400);
              }
            }
          }
          a7 = v457;
          goto LABEL_515;
        }
        unint64_t v370 = 4095 - v365;
        uint64_t v366 = &v326[-8 * (v370 >> 12)];
        uint64_t v367 = (char *)(*(void *)v366 + (~(_WORD)v370 & 0xFFF));
        uint64_t v368 = v366;
        unsigned int v369 = v367;
        if (v367 == v327) {
          goto LABEL_465;
        }
LABEL_477:
        while (2)
        {
          *v336++ = *v369;
          if (&v336[-*(void *)v335] == (char *)4096)
          {
            unsigned int v379 = (char *)*((void *)v335 + 1);
            v335 += 8;
            unsigned int v336 = v379;
            if (&(++v369)[-*(void *)v368] == (char *)4096)
            {
LABEL_481:
              unsigned int v380 = (char *)*((void *)v368 + 1);
              v368 += 8;
              unsigned int v369 = v380;
            }
          }
          else if (&(++v369)[-*(void *)v368] == (char *)4096)
          {
            goto LABEL_481;
          }
          ++v460.i64[1];
          if (v369 == v327) {
            goto LABEL_465;
          }
          continue;
        }
      }
      v327 = 0;
      unsigned int v328 = v456;
      unint64_t v329 = v452;
      unint64_t v330 = v15 - v455;
      unint64_t v331 = v330 - v452;
      if (v330 >= v452) {
        goto LABEL_457;
      }
LABEL_424:
      v332 = &v328[v331];
      if (v330 >= v329 >> 1) {
        unsigned int v333 = v332;
      }
      else {
        unsigned int v333 = &a7[v330];
      }
      if (v333 == v328)
      {
        unsigned int v336 = v327;
        unsigned int v335 = v326;
        unsigned int v333 = v328;
      }
      else
      {
        unsigned int v334 = v333;
        unsigned int v335 = v326;
        unsigned int v336 = v327;
        do
        {
          *v336++ = *v334;
          if (&v336[-*(void *)v335] == (char *)4096)
          {
            unsigned int v337 = (char *)*((void *)v335 + 1);
            v335 += 8;
            unsigned int v336 = v337;
          }
          ++v334;
          ++v460.i64[1];
        }
        while (v334 != v328);
      }
      unint64_t v329 = v330;
      if (v330) {
        goto LABEL_461;
      }
LABEL_527:
      long long v8 = a1;
      std::string::size_type size = HIBYTE(a1->__r_.__value_.__r.__words[2]);
      if ((size & 0x80u) == 0) {
        uint64_t v10 = a1;
      }
      else {
        uint64_t v10 = (std::string *)a1->__r_.__value_.__r.__words[0];
      }
      if ((size & 0x80u) != 0) {
        std::string::size_type size = a1->__r_.__value_.__l.__size_;
      }
      unsigned int v403 = (char *)v10 + size;
      int64_t v14 = v453;
      if (v453 == (std::string *)((char *)v10 + size) || (uint64_t v404 = *a2, v405 = a2[1], *a2 == v405))
      {
LABEL_544:
        std::string::size_type v13 = v454;
        goto LABEL_548;
      }
      a5 = v453;
      while (1)
      {
        uint64_t v406 = 0;
        do
        {
          if (a5[v406] != *(unsigned char *)(v404 + v406)) {
            break;
          }
          if (&a5[++v406] == v403) {
            break;
          }
        }
        while (v406 + v404 != v405);
        uint64_t v407 = v404 + v406;
        unsigned int v408 = &a5[v406];
        if (v407 == v405) {
          break;
        }
        if (++a5 == v403) {
          goto LABEL_544;
        }
      }
      int v12 = v408;
      a7 = a3;
      a8 = a4;
      std::string::size_type v13 = v454;
      if (a5 == v408) {
        goto LABEL_548;
      }
    }
    unint64_t v24 = (unint64_t)v460.i64[0] >> 12;
LABEL_10:
    unint64_t v27 = 0;
    goto LABEL_11;
  }
  if ((size & 0x80u) != 0) {
    std::string::size_type size = a1->__r_.__value_.__l.__size_;
  }
  int64_t v14 = v10;
  std::string::size_type v13 = v10;
LABEL_548:
  unint64_t v409 = sub_1B4BFDC2C((uint64_t)__src, v13, v14, (unsigned char *)v10 + size);
  int v410 = SHIBYTE(v8->__r_.__value_.__r.__words[2]);
  if (v410 >= 0) {
    std::string::size_type v411 = HIBYTE(v8->__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v411 = v8->__r_.__value_.__l.__size_;
  }
  if (v460.i64[1])
  {
    unsigned int v412 = (char *)__src[1] + 8 * ((unint64_t)v460.i64[0] >> 12);
    if ((void *)v459 == __src[1]) {
      goto LABEL_599;
    }
    unsigned int v413 = (std::string::value_type *)(*(void *)v412 + (v460.i16[0] & 0xFFF));
    unint64_t v414 = (char *)__src[1] + 8 * ((unint64_t)(v460.i64[0] + v460.i64[1]) >> 12);
    uint64_t v415 = *(void *)v414 + ((v460.i64[0] + v460.i64[1]) & 0xFFF);
    if ((std::string::value_type *)v415 == v413) {
      goto LABEL_599;
    }
    std::string::size_type v417 = v415 + ((v414 - v412) << 9) - (void)&v413[*(void *)v414] + *(void *)v412;
    if (!v417) {
      goto LABEL_599;
    }
    memset(&v461, 0, sizeof(v461));
    do
    {
      std::string::push_back(&v461, *v413++);
      if (&v413[-*(void *)v412] == (std::string::value_type *)4096)
      {
        unint64_t v418 = (std::string::value_type *)*((void *)v412 + 1);
        v412 += 8;
        unsigned int v413 = v418;
      }
    }
    while (v413 != (std::string::value_type *)v415);
    if ((v461.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unsigned int v419 = &v461;
    }
    else {
      unsigned int v419 = (std::string *)v461.__r_.__value_.__r.__words[0];
    }
    if ((v461.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v420 = HIBYTE(v461.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v420 = v461.__r_.__value_.__l.__size_;
    }
    if (SHIBYTE(v8->__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::size_type v421 = v8->__r_.__value_.__l.__size_;
      std::string::size_type v422 = (v8->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
      if (v422 - v421 >= v417)
      {
        unsigned int v423 = (std::string *)v8->__r_.__value_.__r.__words[0];
        size_t v424 = v421 - v411;
        if (v421 == v411)
        {
LABEL_573:
          std::string::size_type v425 = v411 + v417;
          if (SHIBYTE(v8->__r_.__value_.__r.__words[2]) < 0)
          {
LABEL_581:
            v8->__r_.__value_.__l.__size_ = v425;
            v423->__r_.__value_.__s.__data_[v425] = 0;
            if (!v420) {
              goto LABEL_597;
            }
            goto LABEL_582;
          }
LABEL_577:
          *((unsigned char *)&v8->__r_.__value_.__s + 23) = v425 & 0x7F;
          v423->__r_.__value_.__s.__data_[v425] = 0;
          if (!v420) {
            goto LABEL_597;
          }
LABEL_582:
          unsigned int v426 = (char *)v423 + v411;
          if (v420 < 8)
          {
            unsigned int v427 = v419;
            goto LABEL_596;
          }
          unsigned int v427 = v419;
          if ((unint64_t)((char *)v423 + v411 - (char *)v419) >= 0x20)
          {
            if (v420 < 0x20)
            {
              unint64_t v428 = 0;
              goto LABEL_591;
            }
            unint64_t v428 = v420 & 0xFFFFFFFFFFFFFFE0;
            unsigned int v429 = &v419->__r_.__value_.__r.__words[2];
            unsigned int v430 = (_OWORD *)((char *)&v423->__r_.__value_.__r.__words[2] + v411);
            unint64_t v431 = v420 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              long long v432 = *(_OWORD *)v429;
              *(v430 - 1) = *((_OWORD *)v429 - 1);
              *unsigned int v430 = v432;
              v429 += 4;
              v430 += 2;
              v431 -= 32;
            }
            while (v431);
            if (v420 == v428) {
              goto LABEL_597;
            }
            if ((v420 & 0x18) != 0)
            {
LABEL_591:
              v426 += v420 & 0xFFFFFFFFFFFFFFF8;
              unsigned int v427 = (std::string *)((char *)v419 + (v420 & 0xFFFFFFFFFFFFFFF8));
              v433 = (uint64_t *)((char *)v419 + v428);
              v434 = (std::string::size_type *)((char *)v423->__r_.__value_.__r.__words + v411 + v428);
              unint64_t v435 = v428 - (v420 & 0xFFFFFFFFFFFFFFF8);
              do
              {
                uint64_t v436 = *v433++;
                *v434++ = v436;
                v435 += 8;
              }
              while (v435);
              if (v420 != (v420 & 0xFFFFFFFFFFFFFFF8)) {
                goto LABEL_596;
              }
LABEL_597:
              if (SHIBYTE(v461.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v461.__r_.__value_.__l.__data_);
              }
              goto LABEL_599;
            }
            unsigned int v427 = (std::string *)((char *)v419 + v428);
            v426 += v428;
          }
          do
          {
LABEL_596:
            std::string::value_type v437 = v427->__r_.__value_.__s.__data_[0];
            unsigned int v427 = (std::string *)((char *)v427 + 1);
            *v426++ = v437;
          }
          while (v427 != (std::string *)((char *)v419 + v420));
          goto LABEL_597;
        }
LABEL_580:
        memmove((char *)v423 + v411 + v417, (char *)v423 + v411, v424);
        std::string::size_type v425 = v421 + v417;
        if (SHIBYTE(v8->__r_.__value_.__r.__words[2]) < 0) {
          goto LABEL_581;
        }
        goto LABEL_577;
      }
    }
    else
    {
      std::string::size_type v421 = HIBYTE(v8->__r_.__value_.__r.__words[2]);
      std::string::size_type v422 = 22;
      unsigned int v423 = v8;
      if (22 - v421 >= v417)
      {
        size_t v424 = v421 - v411;
        if (v421 == v411) {
          goto LABEL_573;
        }
        goto LABEL_580;
      }
    }
    std::string::__grow_by(v8, v422, v421 + v417 - v422, v421, v411, 0, v417);
    v8->__r_.__value_.__l.__size_ = v421 + v417;
    unsigned int v423 = (std::string *)v8->__r_.__value_.__r.__words[0];
    std::string::size_type v425 = v421 + v417;
    if (SHIBYTE(v8->__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_581;
    }
    goto LABEL_577;
  }
  std::string::size_type v416 = v8->__r_.__value_.__r.__words[0];
  if (v410 >= 0) {
    std::string::size_type v416 = (std::string::size_type)v8;
  }
  std::string::erase(v8, (std::string::size_type)&v409[-v416], v416 + v411 - (void)v409);
LABEL_599:
  v438 = (void **)__src[1];
  v439 = (void **)v459;
  v460.i64[1] = 0;
  unint64_t v440 = v459 - (unint64_t)__src[1];
  if ((unint64_t)v459 - (unint64_t)__src[1] >= 0x11)
  {
    do
    {
      operator delete(*v438);
      v439 = (void **)v459;
      v438 = (void **)((char *)__src[1] + 8);
      __src[1] = v438;
      unint64_t v440 = v459 - (void)v438;
    }
    while ((void)v459 - (void)v438 > 0x10uLL);
  }
  unint64_t v441 = v440 >> 3;
  if (v441 == 1)
  {
    uint64_t v442 = 2048;
    goto LABEL_605;
  }
  if (v441 == 2)
  {
    uint64_t v442 = 4096;
LABEL_605:
    v460.i64[0] = v442;
  }
  if (v438 != v439)
  {
    do
    {
      v443 = *v438++;
      operator delete(v443);
    }
    while (v438 != v439);
    if ((void *)v459 != __src[1]) {
      *(void *)&long long v459 = v459 + (((unint64_t)__src[1] - v459 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (__src[0]) {
    operator delete(__src[0]);
  }
}

void sub_1B4BFDA00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  sub_1B4BFE6E0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1B4BFDA14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  if (*(char *)(v15 - 89) < 0)
  {
    operator delete(*(void **)(v15 - 112));
    sub_1B4BFE6E0((uint64_t)va);
    _Unwind_Resume(a1);
  }
  sub_1B4BFE6E0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1B4BFDA38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  if (v23)
  {
    operator delete(v23);
    sub_1B4BFE6E0((uint64_t)&a23);
    _Unwind_Resume(a1);
  }
  sub_1B4BFE6E0((uint64_t)&a23);
  _Unwind_Resume(a1);
}

void sub_1B4BFDBF4(void *a1)
{
  __cxa_begin_catch(a1);
  if (*(char *)(v1 - 89) < 0) {
    operator delete(*(void **)(v1 - 112));
  }
  __cxa_rethrow();
}

void sub_1B4BFDC10()
{
}

unsigned char *sub_1B4BFDC2C(uint64_t a1, unsigned char *__dst, unsigned char *__src, unsigned char *a4)
{
  unint64_t v6 = __dst;
  uint64_t v8 = *(void *)(a1 + 40);
  if (v8) {
    BOOL v9 = __dst == __src;
  }
  else {
    BOOL v9 = 1;
  }
  if (!v9)
  {
    uint64_t v97 = *(void ***)(a1 + 8);
    unint64_t v98 = *(void *)(a1 + 32);
    do
    {
      unsigned char *v6 = (*(unsigned char **)((char *)v97 + ((v98 >> 9) & 0x7FFFFFFFFFFFF8)))[v98 & 0xFFF];
      uint64_t v97 = *(void ***)(a1 + 8);
      uint64_t v8 = *(void *)(a1 + 40) - 1;
      unint64_t v98 = *(void *)(a1 + 32) + 1;
      *(void *)(a1 + 32) = v98;
      *(void *)(a1 + 4sub_1B4BC92E4(&a9, 0) = v8;
      if (v98 >= 0x2000)
      {
        operator delete(*v97);
        uint64_t v97 = (void **)(*(void *)(a1 + 8) + 8);
        *(void *)(a1 + 8) = v97;
        uint64_t v8 = *(void *)(a1 + 40);
        unint64_t v98 = *(void *)(a1 + 32) - 4096;
        *(void *)(a1 + 32) = v98;
      }
      ++v6;
      if (v8) {
        BOOL v99 = v6 == __src;
      }
      else {
        BOOL v99 = 1;
      }
    }
    while (!v99);
  }
  if (v8)
  {
    if (v6 != a4)
    {
      uint64_t v10 = *(void ***)(a1 + 8);
      unint64_t v11 = *(void *)(a1 + 32);
      long long v102 = a4;
      while (1)
      {
        int v12 = *(char **)(a1 + 16);
        uint64_t v13 = v12 - (char *)v10;
        uint64_t v14 = v12 == (char *)v10 ? 0 : ((v12 - (char *)v10) << 9) - 1;
        unint64_t v15 = *(void *)(a1 + 40) + v11;
        if (v14 == v15) {
          break;
        }
LABEL_92:
        (*(unsigned char **)((char *)v10 + ((v15 >> 9) & 0x7FFFFFFFFFFFF8)))[v15 & 0xFFF] = *v6;
        unint64_t v83 = *(void *)(a1 + 32);
        ++*(void *)(a1 + 40);
        unsigned char *v6 = *(unsigned char *)(*(void *)(*(void *)(a1 + 8) + ((v83 >> 9) & 0x7FFFFFFFFFFFF8)) + (v83 & 0xFFF));
        uint64_t v10 = *(void ***)(a1 + 8);
        int64x2_t v84 = vaddq_s64(*(int64x2_t *)(a1 + 32), (int64x2_t)xmmword_1B4C9A3E0);
        *(int64x2_t *)(a1 + 32) = v84;
        unint64_t v11 = v84.i64[0];
        if (v84.i64[0] >= 0x2000uLL)
        {
          operator delete(*v10);
          uint64_t v10 = (void **)(*(void *)(a1 + 8) + 8);
          *(void *)(a1 + 8) = v10;
          unint64_t v11 = *(void *)(a1 + 32) - 4096;
          *(void *)(a1 + 32) = v11;
        }
        if (++v6 == a4) {
          return a4;
        }
      }
      BOOL v16 = v11 >= 0x1000;
      unint64_t v17 = v11 - 4096;
      if (v16)
      {
        *(void *)(a1 + 32) = v17;
        unint64_t v18 = (char *)(v10 + 1);
        uint64_t v19 = *v10;
        *(void *)(a1 + 8) = v10 + 1;
        if (v12 == *(char **)(a1 + 24))
        {
          uint64_t v20 = *(char **)a1;
          if ((unint64_t)v18 > *(void *)a1)
          {
            uint64_t v21 = (uint64_t)&v18[-*(void *)a1] >> 3;
            if (v21 >= -1) {
              uint64_t v22 = v21 + 1;
            }
            else {
              uint64_t v22 = v21 + 2;
            }
            uint64_t v23 = v22 >> 1;
            unint64_t v24 = &v18[-8 * (v22 >> 1)];
            int64_t v25 = v12 - v18;
            if (v12 != v18)
            {
              memmove(&v18[-8 * (v22 >> 1)], v10 + 1, v12 - v18);
              int v12 = *(char **)(a1 + 8);
            }
            uint64_t v26 = &v12[-8 * v23];
            int v12 = &v24[v25];
            goto LABEL_24;
          }
          unint64_t v39 = (v12 - v20) >> 2;
          if (v12 == v20) {
            unint64_t v39 = 1;
          }
          if (v39 >> 61) {
LABEL_118:
          }
            sub_1B4BB2D38();
          unint64_t v40 = v39 >> 2;
          uint64_t v41 = 8 * v39;
          uint64_t v42 = (char *)operator new(8 * v39);
          unint64_t v43 = &v42[8 * v40];
          int64_t v44 = v12 - v18;
          BOOL v9 = v12 == v18;
          int v12 = v43;
          if (!v9)
          {
            int v12 = &v43[v44 & 0xFFFFFFFFFFFFFFF8];
            unint64_t v45 = v44 - 8;
            if ((unint64_t)(v44 - 8) >= 0x38)
            {
              unint64_t v46 = &v42[8 * v40];
              if ((unint64_t)(v46 - v18) >= 0x20)
              {
                uint64_t v76 = (v45 >> 3) + 1;
                uint64_t v77 = 8 * (v76 & 0x3FFFFFFFFFFFFFFCLL);
                unint64_t v46 = &v43[v77];
                v18 += v77;
                int v78 = (long long *)(v10 + 3);
                uint64_t v79 = &v42[8 * v40 + 16];
                uint64_t v80 = v76 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  long long v81 = *v78;
                  *((_OWORD *)v79 - 1) = *(v78 - 1);
                  *(_OWORD *)uint64_t v79 = v81;
                  v78 += 2;
                  v79 += 32;
                  v80 -= 4;
                }
                while (v80);
                if (v76 == (v76 & 0x3FFFFFFFFFFFFFFCLL)) {
                  goto LABEL_88;
                }
              }
            }
            else
            {
              unint64_t v46 = &v42[8 * v40];
            }
            do
            {
              uint64_t v82 = *(void *)v18;
              v18 += 8;
              *(void *)unint64_t v46 = v82;
              v46 += 8;
            }
            while (v46 != v12);
          }
LABEL_88:
          *(void *)a1 = v42;
          *(void *)(a1 + 8) = v43;
          *(void *)(a1 + 16) = v12;
          *(void *)(a1 + 24) = &v42[v41];
          a4 = v102;
          if (v20)
          {
            operator delete(v20);
            int v12 = *(char **)(a1 + 16);
          }
        }
LABEL_90:
        *(void *)int v12 = v19;
        *(void *)(a1 + 16) += 8;
        goto LABEL_91;
      }
      uint64_t v27 = v13 >> 3;
      unint64_t v28 = *(char **)(a1 + 24);
      uint64_t v29 = (uint64_t)&v28[-*(void *)a1];
      if (v13 >> 3 < (unint64_t)(v29 >> 3))
      {
        if (v28 != v12)
        {
          uint64_t v103 = operator new(0x1000uLL);
          sub_1B4BFE3B4((char **)a1, &v103);
          a4 = v102;
LABEL_91:
          uint64_t v10 = *(void ***)(a1 + 8);
          unint64_t v15 = *(void *)(a1 + 40) + *(void *)(a1 + 32);
          goto LABEL_92;
        }
        uint64_t v103 = operator new(0x1000uLL);
        sub_1B4BFE544((void **)a1, &v103);
        unint64_t v47 = *(void **)(a1 + 8);
        int v12 = *(char **)(a1 + 16);
        unint64_t v48 = (char *)(v47 + 1);
        uint64_t v19 = (void *)*v47;
        *(void *)(a1 + 8) = v47 + 1;
        a4 = v102;
        if (v12 == *(char **)(a1 + 24))
        {
          uint64_t v20 = *(char **)a1;
          if ((unint64_t)v48 > *(void *)a1)
          {
            uint64_t v49 = (uint64_t)&v48[-*(void *)a1] >> 3;
            if (v49 >= -1) {
              uint64_t v50 = v49 + 1;
            }
            else {
              uint64_t v50 = v49 + 2;
            }
            uint64_t v51 = v50 >> 1;
            int v52 = &v48[-8 * (v50 >> 1)];
            int64_t v53 = v12 - v48;
            if (v12 != v48)
            {
              memmove(&v48[-8 * (v50 >> 1)], v48, v12 - v48);
              unint64_t v48 = *(char **)(a1 + 8);
            }
            int v12 = &v52[v53];
            uint64_t v26 = &v48[-8 * v51];
LABEL_24:
            *(void *)(a1 + 8) = v26;
            *(void *)(a1 + 16) = v12;
            a4 = v102;
            goto LABEL_90;
          }
          unint64_t v85 = (v12 - v20) >> 2;
          if (v12 == v20) {
            unint64_t v85 = 1;
          }
          if (v85 >> 61) {
            goto LABEL_118;
          }
          unint64_t v86 = v85 >> 2;
          uint64_t v41 = 8 * v85;
          uint64_t v42 = (char *)operator new(8 * v85);
          unint64_t v43 = &v42[8 * v86];
          int64_t v87 = v12 - v48;
          BOOL v9 = v12 == v48;
          int v12 = v43;
          if (!v9)
          {
            int v12 = &v43[v87 & 0xFFFFFFFFFFFFFFF8];
            unint64_t v88 = v87 - 8;
            if ((unint64_t)(v87 - 8) < 0x38)
            {
              unint64_t v89 = &v42[8 * v86];
              do
              {
LABEL_104:
                uint64_t v96 = *(void *)v48;
                v48 += 8;
                *(void *)unint64_t v89 = v96;
                v89 += 8;
              }
              while (v89 != v12);
              goto LABEL_88;
            }
            unint64_t v89 = &v42[8 * v86];
            if ((unint64_t)(v89 - v48) < 0x20) {
              goto LABEL_104;
            }
            uint64_t v90 = (v88 >> 3) + 1;
            uint64_t v91 = 8 * (v90 & 0x3FFFFFFFFFFFFFFCLL);
            unint64_t v89 = &v43[v91];
            v48 += v91;
            int64_t v92 = (long long *)(v47 + 3);
            unint64_t v93 = &v42[8 * v86 + 16];
            uint64_t v94 = v90 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v95 = *v92;
              *((_OWORD *)v93 - 1) = *(v92 - 1);
              *(_OWORD *)unint64_t v93 = v95;
              v92 += 2;
              v93 += 32;
              v94 -= 4;
            }
            while (v94);
            if (v90 != (v90 & 0x3FFFFFFFFFFFFFFCLL)) {
              goto LABEL_104;
            }
          }
          goto LABEL_88;
        }
        goto LABEL_90;
      }
      uint64_t v30 = v29 >> 2;
      if (v28 == *(char **)a1) {
        unint64_t v31 = 1;
      }
      else {
        unint64_t v31 = v30;
      }
      if (v31 >> 61) {
        goto LABEL_118;
      }
      unint64_t v32 = (char *)operator new(8 * v31);
      unint64_t v33 = operator new(0x1000uLL);
      unint64_t v34 = &v32[8 * v27];
      int64_t v35 = &v32[8 * v31];
      if (v27 == v31)
      {
        BOOL v37 = v33;
        if (v13 < 1)
        {
          if (v12 == (char *)v10) {
            unint64_t v54 = 1;
          }
          else {
            unint64_t v54 = v13 >> 2;
          }
          if (v54 >> 61) {
            sub_1B4BB2D38();
          }
          unint64_t v34 = (char *)operator new(8 * v54);
          int64_t v35 = &v34[8 * v54];
          operator delete(v32);
          uint64_t v10 = *(void ***)(a1 + 8);
          int v12 = *(char **)(a1 + 16);
          unint64_t v32 = v34;
        }
        else
        {
          unint64_t v38 = v27 + 2;
          if (v27 >= -1) {
            unint64_t v38 = v27 + 1;
          }
          v34 -= 8 * (v38 >> 1);
        }
        *(void *)unint64_t v34 = v37;
        uint64_t v36 = v34 + 8;
        a4 = v102;
        if (v12 == (char *)v10) {
          goto LABEL_59;
        }
      }
      else
      {
        *(void *)unint64_t v34 = v33;
        uint64_t v36 = v34 + 8;
        a4 = v102;
        if (v12 == (char *)v10)
        {
LABEL_59:
          uint64_t v55 = *(char **)a1;
          *(void *)a1 = v32;
          *(void *)(a1 + 8) = v34;
          *(void *)(a1 + 16) = v36;
          *(void *)(a1 + 24) = v35;
          if (v55) {
            operator delete(v55);
          }
          goto LABEL_91;
        }
      }
      do
      {
        if (v34 == v32)
        {
          if (v36 >= v35)
          {
            if (v35 == v34) {
              unint64_t v61 = 1;
            }
            else {
              unint64_t v61 = (v35 - v34) >> 2;
            }
            if (v61 >> 61) {
              sub_1B4BB2D38();
            }
            unint64_t v62 = (char *)operator new(8 * v61);
            unint64_t v32 = v62;
            unint64_t v63 = (v61 + 3) >> 2;
            uint64_t v56 = &v62[8 * v63];
            uint64_t v57 = v56;
            int64_t v64 = v36 - v34;
            if (v36 != v34)
            {
              uint64_t v57 = &v56[v64 & 0xFFFFFFFFFFFFFFF8];
              unint64_t v65 = v64 - 8;
              uint64_t v66 = &v62[8 * v63];
              int v67 = v34;
              if (v65 < 0x38) {
                goto LABEL_122;
              }
              uint64_t v68 = 8 * v63;
              uint64_t v66 = &v62[8 * v63];
              int v67 = v34;
              if ((unint64_t)(v66 - v34) < 0x20) {
                goto LABEL_122;
              }
              uint64_t v69 = (v65 >> 3) + 1;
              uint64_t v70 = 8 * (v69 & 0x3FFFFFFFFFFFFFFCLL);
              uint64_t v66 = &v56[v70];
              int v67 = &v34[v70];
              unint64_t v71 = (long long *)(v34 + 16);
              int v72 = &v62[v68 + 16];
              uint64_t v73 = v69 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v74 = *v71;
                *((_OWORD *)v72 - 1) = *(v71 - 1);
                *(_OWORD *)int v72 = v74;
                v71 += 2;
                v72 += 32;
                v73 -= 4;
              }
              while (v73);
              if (v69 != (v69 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_122:
                do
                {
                  uint64_t v75 = *(void *)v67;
                  v67 += 8;
                  *(void *)uint64_t v66 = v75;
                  v66 += 8;
                }
                while (v66 != v57);
              }
            }
            int64_t v35 = &v62[8 * v61];
            operator delete(v34);
          }
          else
          {
            uint64_t v59 = (v35 - v36) >> 3;
            if (v59 >= -1) {
              unint64_t v60 = v59 + 1;
            }
            else {
              unint64_t v60 = v59 + 2;
            }
            uint64_t v57 = &v36[8 * (v60 >> 1)];
            uint64_t v56 = &v34[8 * (v60 >> 1)];
            if (v36 == v34)
            {
              unint64_t v32 = v36;
            }
            else
            {
              memmove(&v34[8 * (v60 >> 1)], v34, v36 - v34);
              unint64_t v32 = v34;
            }
          }
        }
        else
        {
          uint64_t v56 = v34;
          uint64_t v57 = v36;
        }
        uint64_t v58 = *((void *)v12 - 1);
        v12 -= 8;
        *((void *)v56 - 1) = v58;
        unint64_t v34 = v56 - 8;
        uint64_t v36 = v57;
      }
      while (v12 != *(char **)(a1 + 8));
      goto LABEL_59;
    }
  }
  else if (v6 != __src)
  {
    size_t v100 = a4 - __src;
    if (v100) {
      memmove(v6, __src, v100);
    }
    return &v6[v100];
  }
  return a4;
}

void sub_1B4BFE350(_Unwind_Exception *a1)
{
  operator delete(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B4BFE370(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B4BFE384(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B4BFE39C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B4BFE3B4(char **a1, void *a2)
{
  int v4 = a1[2];
  if (v4 != a1[3]) {
    goto LABEL_22;
  }
  uint64_t v5 = *a1;
  unint64_t v6 = a1[1];
  if (v6 > *a1)
  {
    uint64_t v7 = (v6 - *a1) >> 3;
    if (v7 >= -1) {
      uint64_t v8 = v7 + 1;
    }
    else {
      uint64_t v8 = v7 + 2;
    }
    uint64_t v9 = v8 >> 1;
    uint64_t v10 = -v9;
    unint64_t v11 = &v6[-8 * v9];
    int64_t v12 = v4 - v6;
    if (v4 != v6)
    {
      memmove(&v6[-8 * v9], a1[1], v4 - v6);
      int v4 = a1[1];
    }
    uint64_t v13 = &v4[8 * v10];
    int v4 = &v11[v12];
    a1[1] = v13;
    a1[2] = &v11[v12];
    goto LABEL_22;
  }
  unint64_t v14 = (v4 - v5) >> 2;
  if (v4 == v5) {
    unint64_t v14 = 1;
  }
  if (v14 >> 61) {
    sub_1B4BB2D38();
  }
  unint64_t v15 = v14 >> 2;
  uint64_t v16 = 8 * v14;
  unint64_t v17 = (char *)operator new(8 * v14);
  unint64_t v18 = &v17[8 * v15];
  int64_t v20 = v4 - v6;
  BOOL v19 = v4 == v6;
  int v4 = v18;
  if (!v19)
  {
    int v4 = &v18[v20 & 0xFFFFFFFFFFFFFFF8];
    unint64_t v21 = v20 - 8;
    if ((unint64_t)(v20 - 8) < 0x38)
    {
      uint64_t v22 = &v17[8 * v15];
      do
      {
LABEL_19:
        uint64_t v31 = *(void *)v6;
        v6 += 8;
        *(void *)uint64_t v22 = v31;
        v22 += 8;
      }
      while (v22 != v4);
      goto LABEL_20;
    }
    uint64_t v23 = &v17[8 * v15];
    uint64_t v22 = v23;
    if ((unint64_t)(v23 - v6) < 0x20) {
      goto LABEL_19;
    }
    uint64_t v24 = (v21 >> 3) + 1;
    uint64_t v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v22 = &v18[v25];
    uint64_t v26 = &v6[v25];
    uint64_t v27 = (long long *)(v6 + 16);
    unint64_t v28 = v23 + 16;
    uint64_t v29 = v24 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v30 = *v27;
      *(v28 - 1) = *(v27 - 1);
      *unint64_t v28 = v30;
      v27 += 2;
      v28 += 2;
      v29 -= 4;
    }
    while (v29);
    unint64_t v6 = v26;
    if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL)) {
      goto LABEL_19;
    }
  }
LABEL_20:
  *a1 = v17;
  a1[1] = v18;
  a1[2] = v4;
  a1[3] = &v17[v16];
  if (v5)
  {
    operator delete(v5);
    int v4 = a1[2];
  }
LABEL_22:
  *(void *)int v4 = *a2;
  a1[2] += 8;
}

void sub_1B4BFE544(void **a1, void *a2)
{
  int v4 = (char *)a1[1];
  if (v4 == *a1)
  {
    uint64_t v7 = a1[2];
    unint64_t v6 = a1[3];
    if (v7 >= v6)
    {
      uint64_t v13 = v6 - v4;
      BOOL v12 = v13 == 0;
      unint64_t v14 = v13 >> 2;
      if (v12) {
        unint64_t v14 = 1;
      }
      if (v14 >> 61) {
        sub_1B4BB2D38();
      }
      unint64_t v15 = (v14 + 3) >> 2;
      uint64_t v16 = 8 * v14;
      unint64_t v17 = (char *)operator new(8 * v14);
      uint64_t v5 = &v17[8 * v15];
      unint64_t v18 = v5;
      uint64_t v19 = v7 - v4;
      if (v7 != v4)
      {
        unint64_t v18 = &v5[v19 & 0xFFFFFFFFFFFFFFF8];
        unint64_t v20 = v19 - 8;
        unint64_t v21 = &v17[8 * v15];
        uint64_t v22 = v4;
        if (v20 < 0x38) {
          goto LABEL_27;
        }
        uint64_t v23 = &v17[8 * v15];
        unint64_t v21 = v23;
        uint64_t v22 = v4;
        if ((unint64_t)(v23 - v4) < 0x20) {
          goto LABEL_27;
        }
        uint64_t v24 = (v20 >> 3) + 1;
        uint64_t v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        unint64_t v21 = &v5[v25];
        uint64_t v22 = &v4[v25];
        uint64_t v26 = (long long *)(v4 + 16);
        uint64_t v27 = v23 + 16;
        uint64_t v28 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v29 = *v26;
          *(v27 - 1) = *(v26 - 1);
          *uint64_t v27 = v29;
          v26 += 2;
          v27 += 2;
          v28 -= 4;
        }
        while (v28);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_27:
          do
          {
            uint64_t v30 = *(void *)v22;
            v22 += 8;
            *(void *)unint64_t v21 = v30;
            v21 += 8;
          }
          while (v21 != v18);
        }
      }
      *a1 = v17;
      a1[1] = v5;
      a1[2] = v18;
      a1[3] = &v17[v16];
      if (v4)
      {
        operator delete(v4);
        uint64_t v5 = (char *)a1[1];
      }
    }
    else
    {
      uint64_t v8 = (v6 - v7) >> 3;
      if (v8 >= -1) {
        uint64_t v9 = v8 + 1;
      }
      else {
        uint64_t v9 = v8 + 2;
      }
      uint64_t v10 = v9 >> 1;
      unint64_t v11 = &v7[8 * (v9 >> 1)];
      uint64_t v5 = &v11[-(v7 - v4)];
      if (v7 != v4)
      {
        memmove(&v11[-(v7 - v4)], v4, v7 - v4);
        int v4 = (char *)a1[2];
      }
      a1[1] = v5;
      a1[2] = &v4[8 * v10];
    }
  }
  else
  {
    uint64_t v5 = (char *)a1[1];
  }
  *((void *)v5 - 1) = *a2;
  a1[1] = (char *)a1[1] - 8;
}

uint64_t sub_1B4BFE6E0(uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 8);
  unint64_t v3 = *(void ***)(a1 + 16);
  *(void *)(a1 + 4sub_1B4BC92E4(&a9, 0) = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      unint64_t v3 = *(void ***)(a1 + 16);
      uint64_t v2 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 2048;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    uint64_t v6 = 4096;
LABEL_7:
    *(void *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      uint64_t v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    uint64_t v9 = *(void *)(a1 + 8);
    uint64_t v8 = *(void *)(a1 + 16);
    if (v8 != v9) {
      *(void *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *sub_1B4BFE7A8(void *a1, unsigned __int8 *a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  unint64_t v4 = (std::__shared_weak_count *)operator new(0x30uLL);
  v4->__shared_owners_ = 0;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0D55CC0;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0D55600;
  v4[1].__shared_owners_ = (uint64_t)a1;
  v4[1].__shared_weak_owners_ = *(void *)((char *)a1 + *(void *)(*a1 - 24) + 40);
  uint64_t v10 = v4;
  unint64_t v11 = &v4[1].__vftable;
  BOOL v12 = v4;
  atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  unint64_t v14 = 0;
  sub_1B4C0F8C4((uint64_t)v15, (uint64_t)&v11, (uint64_t)v13, 1);
  sub_1B4C0EE38((uint64_t)v15, 0, a2);
  if (v21 < 0) {
    operator delete(__p);
  }
  if (v18)
  {
    uint64_t v19 = v18;
    operator delete(v18);
  }
  unint64_t v5 = v17;
  if (!v17 || atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v6 = v16;
    if (v16 != v15) {
      goto LABEL_8;
    }
LABEL_16:
    (*(void (**)(void *))(v15[0] + 32))(v15);
    uint64_t v7 = v14;
    if (v14 != v13) {
      goto LABEL_11;
    }
LABEL_17:
    (*(void (**)(void *))(v13[0] + 32))(v13);
    uint64_t v8 = v12;
    if (!v12) {
      goto LABEL_20;
    }
    goto LABEL_18;
  }
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  uint64_t v6 = v16;
  if (v16 == v15) {
    goto LABEL_16;
  }
LABEL_8:
  if (v6) {
    (*(void (**)(void *))(*v6 + 40))(v6);
  }
  uint64_t v7 = v14;
  if (v14 == v13) {
    goto LABEL_17;
  }
LABEL_11:
  if (v7) {
    (*(void (**)(void *))(*v7 + 40))(v7);
  }
  uint64_t v8 = v12;
  if (v12)
  {
LABEL_18:
    if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
LABEL_20:
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  return a1;
}

void sub_1B4BFEA98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
}

BOOL sub_1B4BFEACC(char a1, uint64_t a2, uint64_t a3)
{
  if (a1 != 1) {
    return 0;
  }
  uint64_t v3 = a2 + 8;
  uint64_t v4 = *(void *)(a2 + 8);
  if (!v4) {
    goto LABEL_41;
  }
  int v5 = *(char *)(a3 + 23);
  size_t v6 = v5 >= 0 ? *(unsigned __int8 *)(a3 + 23) : *(void *)(a3 + 8);
  uint64_t v7 = v5 >= 0 ? (const void *)a3 : *(const void **)a3;
  uint64_t v8 = a2 + 8;
  do
  {
    int v9 = *(char *)(v4 + 55);
    if (v9 >= 0) {
      size_t v10 = *(unsigned __int8 *)(v4 + 55);
    }
    else {
      size_t v10 = *(void *)(v4 + 40);
    }
    if (v9 >= 0) {
      unint64_t v11 = (const void *)(v4 + 32);
    }
    else {
      unint64_t v11 = *(const void **)(v4 + 32);
    }
    if (v6 >= v10) {
      size_t v12 = v10;
    }
    else {
      size_t v12 = v6;
    }
    int v13 = memcmp(v11, v7, v12);
    BOOL v14 = v10 < v6;
    if (v13) {
      BOOL v14 = v13 < 0;
    }
    BOOL v15 = !v14;
    if (v14) {
      uint64_t v16 = (uint64_t *)(v4 + 8);
    }
    else {
      uint64_t v16 = (uint64_t *)v4;
    }
    if (v15) {
      uint64_t v8 = v4;
    }
    uint64_t v4 = *v16;
  }
  while (*v16);
  if (v8 == v3) {
    goto LABEL_41;
  }
  int v17 = *(char *)(v8 + 55);
  size_t v18 = v17 >= 0 ? *(unsigned __int8 *)(v8 + 55) : *(void *)(v8 + 40);
  uint64_t v19 = v17 >= 0 ? (const void *)(v8 + 32) : *(const void **)(v8 + 32);
  size_t v20 = v18 >= v6 ? v6 : v18;
  int v21 = memcmp(v7, v19, v20);
  BOOL v22 = v6 < v18;
  if (v21) {
    BOOL v22 = v21 < 0;
  }
  if (v22) {
LABEL_41:
  }
    uint64_t v8 = v3;
  return v8 != v3;
}

uint64_t sub_1B4BFEBF4(uint64_t a1, uint64_t a2)
{
  sub_1B4BB2204((uint64_t)v9);
  sub_1B4BB34F0(v9, (uint64_t)"[KeyError] ", 11);
  sub_1B4BB34F0(v9, (uint64_t)"Expected bridge_model_spec.json to contain key: ", 48);
  int v4 = *(char *)(a2 + 23);
  if (v4 >= 0) {
    uint64_t v5 = a2;
  }
  else {
    uint64_t v5 = *(void *)a2;
  }
  if (v4 >= 0) {
    uint64_t v6 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v6 = *(void *)(a2 + 8);
  }
  sub_1B4BB34F0(v9, v5, v6);
  std::stringbuf::str();
  v9[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v9 + *(void *)(v9[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v9[1] = MEMORY[0x1E4FBA470] + 16;
  if (v10 < 0) {
    operator delete((void *)v9[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1BA992920](&v11);
  *(void *)a1 = &unk_1F0D55470;
  uint64_t v7 = (const char *)(a1 + 16);
  if (*(char *)(a1 + 39) < 0) {
    uint64_t v7 = *(const char **)(a1 + 16);
  }
  std::runtime_error::runtime_error((std::runtime_error *)a1, v7);
  *(void *)a1 = &unk_1F0D55470;
  return a1;
}

void sub_1B4BFEDB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (*(char *)(v10 + 39) < 0)
  {
    operator delete(*v11);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

std::runtime_error *sub_1B4BFEDE4(std::runtime_error *a1)
{
  std::runtime_error::~runtime_error(a1);
  if (*(char *)(v2 + 39) < 0) {
    operator delete(a1[1].__vftable);
  }
  return a1;
}

uint64_t **sub_1B4BFEE2C(char *a1, const char *a2)
{
  if (*a1)
  {
    if (*a1 != 1)
    {
      exception = __cxa_allocate_exception(0x20uLL);
      unint64_t v13 = *a1;
      if (v13 > 8) {
        BOOL v14 = "number";
      }
      else {
        BOOL v14 = off_1E60A3890[v13];
      }
      sub_1B4BB8DC0(&v17, v14);
      BOOL v15 = std::string::insert(&v17, 0, "cannot use operator[] with a string argument with ");
      long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
      unint64_t v19 = v15->__r_.__value_.__r.__words[2];
      long long __dst = v16;
      v15->__r_.__value_.__l.__size_ = 0;
      v15->__r_.__value_.__r.__words[2] = 0;
      v15->__r_.__value_.__r.__words[0] = 0;
      sub_1B4C15DFC(305, (uint64_t)&__dst, (uint64_t)exception);
      __cxa_throw(exception, (struct type_info *)&unk_1F0D53920, (void (*)(void *))sub_1B4C15F98);
    }
    int v4 = (uint64_t **)*((void *)a1 + 1);
  }
  else
  {
    *a1 = 1;
    int v4 = (uint64_t **)operator new(0x18uLL);
    v4[2] = 0;
    v4[1] = 0;
    std::__shared_weak_count *v4 = (uint64_t *)(v4 + 1);
    *((void *)a1 + 1) = v4;
  }
  size_t v5 = strlen(a2);
  if (v5 >= 0x7FFFFFFFFFFFFFF8) {
    sub_1B4BB33D8();
  }
  size_t v6 = v5;
  if (v5 >= 0x17)
  {
    uint64_t v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v8 = v5 | 7;
    }
    uint64_t v9 = v8 + 1;
    p_dst = (long long *)operator new(v8 + 1);
    *((void *)&__dst + 1) = v6;
    unint64_t v19 = v9 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
    goto LABEL_12;
  }
  HIBYTE(v19) = v5;
  p_dst = &__dst;
  if (v5) {
LABEL_12:
  }
    memcpy(p_dst, a2, v6);
  *((unsigned char *)p_dst + v6) = 0;
  v17.__r_.__value_.__r.__words[0] = (std::string::size_type)&__dst;
  uint64_t v10 = sub_1B4C18ED0(v4, (const void **)&__dst, (uint64_t)&unk_1B4C9AE0A, &v17);
  if (SHIBYTE(v19) < 0) {
    operator delete((void *)__dst);
  }
  return v10 + 7;
}

void sub_1B4BFF000(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1B4BFF07C(uint64_t a1, uint64_t a2)
{
  sub_1B4BB2204((uint64_t)v9);
  sub_1B4BB34F0(v9, (uint64_t)"[KeyError] ", 11);
  sub_1B4BB34F0(v9, (uint64_t)"Expected model_spec.json to contain key: ", 41);
  int v4 = *(char *)(a2 + 23);
  if (v4 >= 0) {
    uint64_t v5 = a2;
  }
  else {
    uint64_t v5 = *(void *)a2;
  }
  if (v4 >= 0) {
    uint64_t v6 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v6 = *(void *)(a2 + 8);
  }
  sub_1B4BB34F0(v9, v5, v6);
  std::stringbuf::str();
  v9[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v9 + *(void *)(v9[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v9[1] = MEMORY[0x1E4FBA470] + 16;
  if (v10 < 0) {
    operator delete((void *)v9[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1BA992920](&v11);
  *(void *)a1 = &unk_1F0D55470;
  uint64_t v7 = (const char *)(a1 + 16);
  if (*(char *)(a1 + 39) < 0) {
    uint64_t v7 = *(const char **)(a1 + 16);
  }
  std::runtime_error::runtime_error((std::runtime_error *)a1, v7);
  *(void *)a1 = &unk_1F0D55470;
  return a1;
}

void sub_1B4BFF238(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (*(char *)(v10 + 39) < 0)
  {
    operator delete(*v11);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1B4BFF26C(uint64_t a1, uint64_t a2)
{
  sub_1B4BB2204((uint64_t)v9);
  sub_1B4BB34F0(v9, (uint64_t)"[KeyError] ", 11);
  sub_1B4BB34F0(v9, (uint64_t)"runtime_parameters.json file exists but does not contain filterTokens: ", 71);
  int v4 = *(char *)(a2 + 23);
  if (v4 >= 0) {
    uint64_t v5 = a2;
  }
  else {
    uint64_t v5 = *(void *)a2;
  }
  if (v4 >= 0) {
    uint64_t v6 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v6 = *(void *)(a2 + 8);
  }
  sub_1B4BB34F0(v9, v5, v6);
  std::stringbuf::str();
  v9[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v9 + *(void *)(v9[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v9[1] = MEMORY[0x1E4FBA470] + 16;
  if (v10 < 0) {
    operator delete((void *)v9[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1BA992920](&v11);
  *(void *)a1 = &unk_1F0D55470;
  uint64_t v7 = (const char *)(a1 + 16);
  if (*(char *)(a1 + 39) < 0) {
    uint64_t v7 = *(const char **)(a1 + 16);
  }
  std::runtime_error::runtime_error((std::runtime_error *)a1, v7);
  *(void *)a1 = &unk_1F0D55470;
  return a1;
}

void sub_1B4BFF428(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (*(char *)(v10 + 39) < 0)
  {
    operator delete(*v11);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1B4BFF45C(uint64_t a1)
{
  if (*(char *)(a1 + 95) < 0)
  {
    operator delete(*(void **)(a1 + 72));
    if ((*(char *)(a1 + 71) & 0x80000000) == 0) {
      return a1;
    }
  }
  else if ((*(char *)(a1 + 71) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)(a1 + 48));
  return a1;
}

uint64_t sub_1B4BFF4B8(uint64_t a1)
{
  *(void *)(a1 + 24) = &unk_1F0D54F90;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v2 || atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v3 = *(void **)(a1 + 40);
    if (!v3) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  uint64_t v3 = *(void **)(a1 + 40);
  if (v3)
  {
LABEL_4:
    *(void *)(a1 + 48) = v3;
    operator delete(v3);
  }
LABEL_5:
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_1B4BFF580(uint64_t a1)
{
  uint64_t v2 = *(int *)(a1 + 4);
  uint64_t v3 = operator new(0x10uLL);
  void *v3 = 1;
  v3[1] = v2;
  BOOL v15 = v3 + 2;
  long long v16 = v3 + 2;
  BOOL v14 = v3;
  sub_1B4C097C4((int32x4_t **)&v14, (uint64_t)&v17, 0);
  *(_DWORD *)(a1 + 16) = v18;
  if ((void **)(a1 + 8) != &v17) {
    sub_1B4C0A420((void *)(a1 + 24), (char *)__p, v20, (v20 - (unsigned char *)__p) >> 3);
  }
  uint64_t v5 = v21;
  int v4 = v22;
  if (v22) {
    atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 56);
  *(void *)(a1 + 48) = v5;
  *(void *)(a1 + 56) = v4;
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  std::string v17 = &unk_1F0D54F90;
  uint64_t v7 = v22;
  if (v22 && !atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  if (__p)
  {
    size_t v20 = (char *)__p;
    operator delete(__p);
  }
  if (v14)
  {
    BOOL v15 = v14;
    operator delete(v14);
  }
  uint64_t v8 = *(int *)(a1 + 4);
  uint64_t v9 = operator new(0x10uLL);
  *uint64_t v9 = 1;
  v9[1] = v8;
  BOOL v15 = v9 + 2;
  long long v16 = v9 + 2;
  BOOL v14 = v9;
  sub_1B4C097C4((int32x4_t **)&v14, (uint64_t)&v17, 0);
  *(_DWORD *)(a1 + 72) = v18;
  if ((void **)(a1 + 64) != &v17) {
    sub_1B4C0A420((void *)(a1 + 80), (char *)__p, v20, (v20 - (unsigned char *)__p) >> 3);
  }
  uint64_t v11 = v21;
  uint64_t v10 = v22;
  if (v22) {
    atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  size_t v12 = *(std::__shared_weak_count **)(a1 + 112);
  *(void *)(a1 + 104) = v11;
  *(void *)(a1 + 112) = v10;
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  std::string v17 = &unk_1F0D54F90;
  unint64_t v13 = v22;
  if (v22 && !atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  if (__p)
  {
    size_t v20 = (char *)__p;
    operator delete(__p);
  }
  if (v14)
  {
    BOOL v15 = v14;
    operator delete(v14);
  }
  *(_DWORD *)a1 = 0;
}

void sub_1B4BFF834(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *sub_1B4BFF868(void *a1)
{
  *a1 = &unk_1F0D54F90;
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (void *)a1[2];
    if (!v3) {
      return a1;
    }
    goto LABEL_4;
  }
  uint64_t v3 = (void *)a1[2];
  if (v3)
  {
LABEL_4:
    a1[3] = v3;
    operator delete(v3);
  }
  return a1;
}

uint64_t sub_1B4BFF90C(int *a1, unsigned int a2)
{
  if (a1[4] != 1
    || (*(float *)((*(uint64_t (**)(void))(**((void **)a1 + 6) + 24))(*((void *)a1 + 6)) + 4 * *a1) = (float)a2,
        a1[18] != 1))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Incorrect data type requested.");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t result = (*(uint64_t (**)(void))(**((void **)a1 + 13) + 24))(*((void *)a1 + 13));
  uint64_t v4 = *a1;
  *(_DWORD *)(result + 4 * v4) = 1065353216;
  *a1 = v4 + 1;
  return result;
}

void sub_1B4BFFA10(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1B4BFFA24(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1B4BFFA38(uint64_t a1, uint64_t a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 12sub_1B4BC92E4(&a9, 0) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(void *)(a1 + 20sub_1B4BC92E4(&a9, 0) = 0;
  *(_DWORD *)(a1 + 232) = 1;
  *(_OWORD *)(a1 + 24sub_1B4BC92E4(&a9, 0) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 224) = &unk_1F0D54E50;
  *(_DWORD *)(a1 + 296) = 1;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 32sub_1B4BC92E4(&a9, 0) = 0u;
  *(void *)(a1 + 288) = &unk_1F0D54E50;
  *(_DWORD *)(a1 + 352) = 1;
  *(_OWORD *)(a1 + 36sub_1B4BC92E4(&a9, 0) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(void *)(a1 + 336) = 0;
  *(void *)(a1 + 344) = &unk_1F0D54E50;
  *(_DWORD *)(a1 + 408) = 1;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(void *)(a1 + 392) = 0;
  *(void *)(a1 + 40sub_1B4BC92E4(&a9, 0) = &unk_1F0D54E50;
  *(_DWORD *)(a1 + 464) = 1;
  *(_OWORD *)(a1 + 472) = 0u;
  *(void *)(a1 + 504) = 0;
  *(_OWORD *)(a1 + 488) = 0u;
  *(void *)(a1 + 448) = 0;
  *(void *)(a1 + 456) = &unk_1F0D54E50;
  *(unsigned char *)(a1 + 512) = 0;
  *(unsigned char *)(a1 + 536) = 0;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 56sub_1B4BC92E4(&a9, 0) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  strcpy(__p, "bridge_model_spec.json");
  __p[23] = 22;
  sub_1B4C03298(a2, __p, &v6);
  if ((__p[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__p);
    if ((SHIBYTE(v8) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((SHIBYTE(v8) & 0x80000000) == 0)
  {
LABEL_3:
    *(_OWORD *)long long __dst = v7;
    uint64_t v5 = v8;
    goto LABEL_6;
  }
  sub_1B4BCA11C(__dst, (void *)v7, *((unint64_t *)&v7 + 1));
LABEL_6:
  if (qword_1E9D40AE0 != -1) {
    dispatch_once(&qword_1E9D40AE0, &unk_1F0D55F60);
  }
  uint64_t v2 = (id)qword_1E9D40AD8;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v3 = __dst;
    if (v5 < 0) {
      uint64_t v3 = (void **)__dst[0];
    }
    *(_DWORD *)std::__fs::filesystem::path __p = 136315138;
    *(void *)&__p[4] = v3;
    _os_log_impl(&dword_1B4BAD000, v2, OS_LOG_TYPE_DEBUG, "Attempting to parse ModelSpec from JSON path: %s", __p, 0xCu);
  }

  if (SHIBYTE(v5) < 0)
  {
    sub_1B4BCA11C(v9, __dst[0], (unint64_t)__dst[1]);
  }
  else
  {
    *(_OWORD *)uint64_t v9 = *(_OWORD *)__dst;
    uint64_t v10 = v5;
  }
  if (SHIBYTE(v10) < 0)
  {
    sub_1B4BCA11C(__p, *(void **)v9, *(unint64_t *)&v9[8]);
  }
  else
  {
    *(_OWORD *)std::__fs::filesystem::path __p = *(_OWORD *)v9;
    *(void *)&__p[16] = v10;
  }
  sub_1B4C0E2E8((uint64_t)buf, (uint64_t)__p);
}

void sub_1B4C02820(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t *a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,void *a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,void *a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,uint64_t a63)
{
  if (SLOBYTE(STACK[0x257]) < 0) {
    operator delete((void *)STACK[0x240]);
  }
  if (a38 < 0)
  {
    operator delete(a33);
    if ((a50 & 0x80000000) == 0) {
      goto LABEL_5;
    }
  }
  else if ((a50 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a57 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  operator delete(a45);
  if ((a57 & 0x80000000) == 0)
  {
LABEL_7:
    sub_1B4C0A858((uint64_t)&a58);
    if (a73 < 0) {
      operator delete(a72);
    }
    sub_1B4C035DC(a30 + 576);
    sub_1B4C035DC(a30 + 560);
    uint64_t v74 = *(void *)(a30 + 552);
    *(void *)(a30 + 552) = 0;
    if (v74) {
      (*(void (**)(uint64_t))(*(void *)v74 + 8))(v74);
    }
    uint64_t v75 = *a19;
    *a19 = 0;
    if (v75) {
      (*(void (**)(uint64_t))(*(void *)v75 + 8))(v75);
    }
    sub_1B4C036F8(a21);
    sub_1B4C0A624(a18);
    sub_1B4C0344C(a20);
    sub_1B4C03538(a22);
    sub_1B4C033D8(a30);
    _Unwind_Resume(a1);
  }
LABEL_6:
  operator delete(a52);
  goto LABEL_7;
}

void sub_1B4C03298(uint64_t a1@<X0>, char *a2@<X1>, void *a3@<X8>)
{
  memset(&v9, 0, sizeof(v9));
  uint64_t v5 = a2[23];
  uint64_t v6 = *((void *)a2 + 1);
  if ((v5 & 0x80u) != 0)
  {
    a2 = *(char **)a2;
    uint64_t v5 = v6;
  }
  sub_1B4BCC01C(&v9, a2, &a2[v5]);
  sub_1B4C0A568((std::__fs::filesystem::path *)&v9, a1 + 8, &__p);
  long long v7 = a3 + 1;
  if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    sub_1B4BCA11C(v7, __p.__pn_.__r_.__value_.__l.__data_, __p.__pn_.__r_.__value_.__l.__size_);
    int v8 = SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]);
    *a3 = &unk_1F0D55410;
    if (v8 < 0)
    {
      operator delete(__p.__pn_.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v9.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        return;
      }
    }
    else if ((SHIBYTE(v9.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      return;
    }
LABEL_10:
    operator delete(v9.__r_.__value_.__l.__data_);
    return;
  }
  *(_OWORD *)long long v7 = *(_OWORD *)&__p.__pn_.__r_.__value_.__l.__data_;
  a3[3] = *((void *)&__p.__pn_.__r_.__value_.__l + 2);
  *a3 = &unk_1F0D55410;
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_10;
  }
}

void sub_1B4C033A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1B4C033D8(uint64_t a1)
{
  if ((*(char *)(a1 + 71) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 47) & 0x80000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    operator delete(*(void **)(a1 + 24));
    if ((*(char *)(a1 + 23) & 0x80000000) == 0) {
      return a1;
    }
    goto LABEL_7;
  }
  operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((*(char *)(a1 + 23) & 0x80000000) == 0) {
    return a1;
  }
LABEL_7:
  operator delete(*(void **)a1);
  return a1;
}

void *sub_1B4C0344C(void *a1)
{
  *a1 = &unk_1F0D54F90;
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (void *)a1[2];
    if (!v3) {
      return a1;
    }
    goto LABEL_4;
  }
  uint64_t v3 = (void *)a1[2];
  if (v3)
  {
LABEL_4:
    a1[3] = v3;
    operator delete(v3);
  }
  return a1;
}

std::exception *sub_1B4C034F0(std::exception *a1)
{
  std::exception::~exception(a1);
  if (*(char *)(v2 + 31) < 0) {
    operator delete(a1[1].__vftable);
  }
  return a1;
}

uint64_t sub_1B4C03538(uint64_t a1)
{
  if (*(char *)(a1 + 119) < 0)
  {
    operator delete(*(void **)(a1 + 96));
    if ((*(char *)(a1 + 95) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(a1 + 71) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((*(char *)(a1 + 95) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 72));
  if ((*(char *)(a1 + 71) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(a1 + 47) & 0x80000000) == 0) {
      goto LABEL_5;
    }
LABEL_10:
    operator delete(*(void **)(a1 + 24));
    if ((*(char *)(a1 + 23) & 0x80000000) == 0) {
      return a1;
    }
    goto LABEL_11;
  }
LABEL_9:
  operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0) {
    goto LABEL_10;
  }
LABEL_5:
  if ((*(char *)(a1 + 23) & 0x80000000) == 0) {
    return a1;
  }
LABEL_11:
  operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_1B4C035DC(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(std::__shared_weak_count **)(result + 8);
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t *sub_1B4C03658(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*(unsigned char *)(v2 + 40))
    {
      uint64_t v3 = *(void *)(v2 + 16);
      if (v3)
      {
        uint64_t v4 = *(void *)(v2 + 24);
        uint64_t v5 = *(void **)(v2 + 16);
        if (v4 != v3)
        {
          do
          {
            if (*(char *)(v4 - 1) < 0) {
              operator delete(*(void **)(v4 - 24));
            }
            v4 -= 24;
          }
          while (v4 != v3);
          uint64_t v5 = *(void **)(v2 + 16);
        }
        *(void *)(v2 + 24) = v3;
        operator delete(v5);
      }
    }
    MEMORY[0x1BA9929C0](v2, 0x1022C409BF09FA6);
  }
  return a1;
}

uint64_t sub_1B4C036F8(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 24))
  {
    uint64_t v2 = *(void ***)a1;
    if (*(void *)a1)
    {
      uint64_t v3 = *(void ***)(a1 + 8);
      uint64_t v4 = *(void ***)a1;
      if (v3 != v2)
      {
        do
        {
          if (*((char *)v3 - 1) < 0) {
            operator delete(*(v3 - 3));
          }
          v3 -= 3;
        }
        while (v3 != v2);
        uint64_t v4 = *(void ***)a1;
      }
      *(void *)(a1 + 8) = v2;
      operator delete(v4);
    }
  }
  return a1;
}

void sub_1B4C03774(uint64_t a1, uint64_t a2)
{
  sub_1B4C038BC(a1, a2, &v17);
  BOOL v15 = 0;
  long long v16 = 0;
  std::__fs::filesystem::path __p = 0;
  uint64_t v4 = *(const void **)v17;
  uint64_t v3 = *((void *)v17 + 1);
  int64_t v5 = v3 - *(void *)v17;
  if (v3 != *(void *)v17)
  {
    if (v5 < 0) {
      sub_1B4BB3244();
    }
    uint64_t v6 = (char *)operator new(v3 - *(void *)v17);
    long long v7 = &v6[4 * (v5 >> 2)];
    std::__fs::filesystem::path __p = v6;
    long long v16 = v7;
    memcpy(v6, v4, v5);
    BOOL v15 = v7;
  }
  (*(void (**)(void, void **))(**(void **)(a1 + 560) + 32))(*(void *)(a1 + 560), &__p);
  if (__p)
  {
    BOOL v15 = __p;
    operator delete(__p);
  }
  int v8 = (char *)v17;
  if (v17)
  {
    std::string v9 = v18;
    uint64_t v10 = v17;
    if (v18 != v17)
    {
      uint64_t v11 = v18;
      do
      {
        uint64_t v13 = (void *)*((void *)v11 - 3);
        v11 -= 24;
        size_t v12 = v13;
        if (v13)
        {
          *((void *)v9 - 2) = v12;
          operator delete(v12);
        }
        std::string v9 = v11;
      }
      while (v11 != v8);
      uint64_t v10 = v17;
    }
    int v18 = v8;
    operator delete(v10);
  }
}

void sub_1B4C03894(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12)
{
  if (__p) {
    operator delete(__p);
  }
  sub_1B4C07820(&a12);
  _Unwind_Resume(a1);
}

void sub_1B4C038BC(uint64_t a1@<X0>, uint64_t a2@<X1>, void **a3@<X8>)
{
  v583[19] = *MEMORY[0x1E4F143B8];
  *(_DWORD *)(a1 + 232) = *(_DWORD *)(a2 + 8);
  if (a1 + 224 != a2) {
    sub_1B4C0A420((void *)(a1 + 240), *(char **)(a2 + 16), *(char **)(a2 + 24), (uint64_t)(*(void *)(a2 + 24) - *(void *)(a2 + 16)) >> 3);
  }
  uint64_t v5 = *(void *)(a2 + 40);
  uint64_t v6 = *(void *)(a2 + 48);
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  long long v7 = *(std::__shared_weak_count **)(a1 + 272);
  *(void *)(a1 + 264) = v5;
  *(void *)(a1 + 272) = v6;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  uint64_t v8 = *(void *)(a1 + 544);
  HIBYTE(v573) = 13;
  strcpy((char *)buf, "encoder_embed");
  v574 = (std::__shared_weak_count *)&unk_1F0D54F90;
  LODWORD(v575) = *(_DWORD *)(a1 + 232);
  v578 = 0;
  std::__fs::filesystem::path __p = 0;
  v577 = 0;
  uint64_t v10 = *(unsigned char **)(a1 + 240);
  std::string v9 = *(unsigned char **)(a1 + 248);
  int64_t v11 = v9 - v10;
  if (v9 != v10)
  {
    if (v11 < 0) {
      sub_1B4BB3244();
    }
    std::__fs::filesystem::path __p = operator new(v9 - v10);
    v578 = (char *)__p + 8 * (v11 >> 3);
    memcpy(__p, v10, v11);
    v577 = v578;
  }
  uint64_t v12 = *(void *)(a1 + 272);
  uint64_t v579 = *(void *)(a1 + 264);
  *(void *)&long long v580 = v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  long long v513 = 0u;
  long long v514 = 0u;
  LODWORD(v515) = 1065353216;
  sub_1B4C0D430((uint64_t)&v513, (uint64_t)buf, (long long *)buf);
  v574 = (std::__shared_weak_count *)&unk_1F0D54F90;
  uint64_t v13 = (std::__shared_weak_count *)v580;
  if ((void)v580 && !atomic_fetch_add((atomic_ullong *volatile)(v580 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  if (__p)
  {
    v577 = __p;
    operator delete(__p);
  }
  if (SHIBYTE(v573) < 0) {
    operator delete(*(void **)buf);
  }
  sub_1B4C092CC((uint64_t)&v534, v8, (uint64_t)&v513, a1 + 48);
  sub_1B4C0CAF4((uint64_t)&v513);
  sub_1B4BFF580(a1 + 280);
  uint64_t v14 = *(void *)(a1 + 560);
  if (*(char *)(v14 + 31) < 0)
  {
    uint64_t v15 = *(void *)(v14 + 8);
    uint64_t v16 = *(void *)(v14 + 16);
  }
  else
  {
    uint64_t v15 = v14 + 8;
    uint64_t v16 = *(unsigned __int8 *)(v14 + 31);
  }
  unsigned int v17 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v14 + 40))(v14, v15, v16);
  sub_1B4BFF90C((int *)(a1 + 280), v17);
  *(_DWORD *)(a1 + 464) = v535;
  if ((void **)(a1 + 456) != &v534) {
    sub_1B4C0A420((void *)(a1 + 472), (char *)v536, *(char **)v537, (uint64_t)(*(void *)v537 - (void)v536) >> 3);
  }
  uint64_t v18 = v538;
  unint64_t v19 = v539;
  if (v539) {
    atomic_fetch_add_explicit(&v539->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  size_t v20 = *(std::__shared_weak_count **)(a1 + 504);
  *(void *)(a1 + 496) = v18;
  *(void *)(a1 + 504) = v19;
  if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  long long v513 = 0uLL;
  *(void *)&long long v514 = 0;
  if (*(_DWORD *)(a1 + 296) != 1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Incorrect data type requested.");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v21 = (*(uint64_t (**)(void))(**(void **)(a1 + 328) + 24))(*(void *)(a1 + 328));
  *(void *)v570 = &v513;
  if (v22 < 4)
  {
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    v573 = 0;
    memset(buf, 0, sizeof(buf));
    goto LABEL_44;
  }
  uint64_t v25 = (float *)v21;
  uint64_t v26 = 4 * (v22 >> 2);
  do
  {
    sub_1B4C1AA14((uint64_t *)v570, *v25++);
    v26 -= 4;
  }
  while (v26);
  long long v27 = v513;
  v573 = 0;
  memset(buf, 0, sizeof(buf));
  int64_t v28 = *((void *)&v513 + 1) - v513;
  if (*((void *)&v513 + 1) == (void)v513)
  {
    uint64_t v24 = 0;
    uint64_t v23 = 0;
    if ((void)v513)
    {
LABEL_43:
      *((void *)&v513 + 1) = v27;
      operator delete((void *)v27);
    }
  }
  else
  {
    if (v28 < 0) {
      sub_1B4BB3244();
    }
    uint64_t v23 = (uint32x4_t *)operator new(*((void *)&v513 + 1) - v513);
    *(void *)buf = v23;
    v573 = &v23->i8[4 * (v28 >> 2)];
    bzero(v23, v28);
    uint64_t v24 = &v23->i8[v28];
    *(void *)&buf[8] = (char *)v23 + v28;
    long long v29 = v23;
    uint64_t v30 = (float *)v27;
    if ((unint64_t)(v28 - 4) < 0x1C) {
      goto LABEL_667;
    }
    unint64_t v31 = ((unint64_t)(v28 - 4) >> 2) + 1;
    uint64_t v32 = 4 * (v31 & 0x7FFFFFFFFFFFFFF8);
    long long v29 = (uint32x4_t *)((char *)v23 + v32);
    uint64_t v30 = (float *)(v27 + v32);
    unint64_t v33 = (float32x4_t *)(v27 + 16);
    unint64_t v34 = v23 + 1;
    uint64_t v35 = v31 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      uint32x4_t v36 = vcvtq_u32_f32(*v33);
      v34[-1] = vcvtq_u32_f32(v33[-1]);
      uint32x4_t *v34 = v36;
      v33 += 2;
      v34 += 2;
      v35 -= 8;
    }
    while (v35);
    if (v31 != (v31 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_667:
      do
      {
        float v37 = *v30++;
        v29->i32[0] = v37;
        long long v29 = (uint32x4_t *)((char *)v29 + 4);
      }
      while (v30 != *((float **)&v27 + 1));
    }
    if ((void)v27) {
      goto LABEL_43;
    }
  }
LABEL_44:
  unint64_t v38 = *(int *)(a1 + 280);
  v533 = 0;
  if ((v24 - (char *)v23) >> 2 >= v38) {
    uint64_t v39 = v38;
  }
  else {
    uint64_t v39 = (v24 - (char *)v23) >> 2;
  }
  v531 = 0;
  v532 = 0;
  if (v39)
  {
    if (v39 < 0) {
      sub_1B4BB3244();
    }
    size_t v40 = 4 * v39;
    uint64_t v41 = (char *)operator new(4 * v39);
    uint64_t v42 = &v41[4 * v39];
    v531 = v41;
    v533 = v42;
    memmove(v41, v23, v40);
    v532 = v42;
  }
  if (v23)
  {
    *(void *)&buf[8] = v23;
    operator delete(v23);
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  unint64_t v43 = *(uint64_t **)(a1 + 576);
  uint64_t v474 = a1;
  if (*((_DWORD *)v43 + 13) == 1)
  {
    if (qword_1E9D40AE0 != -1) {
      dispatch_once(&qword_1E9D40AE0, &unk_1F0D55F60);
    }
    int64_t v44 = (id)qword_1E9D40AD8;
    if (os_log_type_enabled(v44, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1B4BAD000, v44, OS_LOG_TYPE_DEBUG, "Performing greedy search, since requested topKPerStep is 1.", buf, 2u);
    }

    unint64_t v45 = *(uint64_t **)(a1 + 576);
    unint64_t v46 = *(void **)(a1 + 560);
    unint64_t v47 = *(std::__shared_weak_count **)(a1 + 568);
    v529 = v46;
    v530 = v47;
    if (v47)
    {
      atomic_fetch_add_explicit(&v47->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v47->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v48 = *v45;
    *(void *)((char *)&v513 + 5) = *(uint64_t *)((char *)v45 + 5);
    *(void *)&long long v513 = v48;
    LOBYTE(v514) = 0;
    char v516 = 0;
    if (*((unsigned char *)v45 + 40))
    {
      long long v514 = 0uLL;
      uint64_t v515 = 0;
      sub_1B4BCA340((char *)&v514, (long long *)v45[2], (long long *)v45[3], 0xAAAAAAAAAAAAAAABLL * ((v45[3] - v45[2]) >> 3));
      char v516 = 1;
    }
    v519 = 0;
    v520 = 0;
    v517 = &unk_1F0D554C0;
    v518 = &v519;
    v521 = (char *)v46;
    v522 = v47;
    if (v47) {
      atomic_fetch_add_explicit(&v47->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    *(void *)&long long v571 = 0;
    *(void *)&v570[8] = 0;
    *(void *)v570 = &v570[8];
    if (*((unsigned char *)v45 + 40))
    {
      uint64_t v50 = (long long *)v45[2];
      for (i = (long long *)v45[3]; v50 != i; uint64_t v50 = (long long *)((char *)v50 + 24))
      {
        while (1)
        {
          if (*((char *)v50 + 23) < 0)
          {
            sub_1B4BCA11C(buf, *(void **)v50, *((void *)v50 + 1));
          }
          else
          {
            long long v51 = *v50;
            v573 = (char *)*((void *)v50 + 2);
            *(_OWORD *)buf = v51;
          }
          int v52 = v521;
          if (SHIBYTE(v573) >= 0) {
            int64_t v53 = buf;
          }
          else {
            int64_t v53 = *(uint8_t **)buf;
          }
          if (SHIBYTE(v573) >= 0) {
            uint64_t v54 = HIBYTE(v573);
          }
          else {
            uint64_t v54 = *(void *)&buf[8];
          }
          int v55 = sub_1B4BC4058((void **)v521 + 10, (uint64_t)v53, v54);
          if (v52[79] < 0)
          {
            uint64_t v56 = (void *)*((void *)v52 + 7);
            uint64_t v57 = *((void *)v52 + 8);
          }
          else
          {
            uint64_t v56 = v52 + 56;
            uint64_t v57 = v52[79];
          }
          if (v55 != (*(unsigned int (**)(char *, void *, uint64_t))(*(void *)v52 + 40))(v52, v56, v57))
          {
            unsigned int v58 = (*(uint64_t (**)(void))(*(void *)v521 + 40))();
            unsigned int v59 = v58;
            uint64_t v60 = *(void *)&v570[8];
            unint64_t v61 = &v570[8];
            unint64_t v62 = &v570[8];
            if (*(void *)&v570[8])
            {
              do
              {
                while (1)
                {
                  unint64_t v62 = (uint8_t *)v60;
                  unsigned int v63 = *(_DWORD *)(v60 + 28);
                  if (v58 >= v63) {
                    break;
                  }
                  uint64_t v60 = *(void *)v62;
                  unint64_t v61 = v62;
                  if (!*(void *)v62) {
                    goto LABEL_89;
                  }
                }
                if (v63 >= v58) {
                  goto LABEL_67;
                }
                uint64_t v60 = *((void *)v62 + 1);
              }
              while (v60);
              unint64_t v61 = v62 + 8;
            }
LABEL_89:
            int64_t v64 = operator new(0x20uLL);
            v64[7] = v59;
            *(void *)int64_t v64 = 0;
            *((void *)v64 + 1) = 0;
            *((void *)v64 + 2) = v62;
            *(void *)unint64_t v61 = v64;
            if (**(void **)v570)
            {
              *(void *)v570 = **(void **)v570;
              int64_t v64 = *(_DWORD **)v61;
            }
            sub_1B4BB3DA4(*(uint64_t **)&v570[8], (uint64_t *)v64);
            *(void *)&long long v571 = v571 + 1;
          }
LABEL_67:
          if (SHIBYTE(v573) < 0) {
            break;
          }
          uint64_t v50 = (long long *)((char *)v50 + 24);
          if (v50 == i) {
            goto LABEL_143;
          }
        }
        operator delete(*(void **)buf);
      }
    }
LABEL_143:
    unsigned int v93 = (*(uint64_t (**)(void))(*(void *)v521 + 40))();
    unsigned int v94 = v93;
    uint64_t v95 = *(void *)&v570[8];
    uint64_t v96 = &v570[8];
    uint64_t v97 = &v570[8];
    if (*(void *)&v570[8])
    {
      do
      {
        while (1)
        {
          uint64_t v97 = (uint8_t *)v95;
          unsigned int v98 = *(_DWORD *)(v95 + 28);
          if (v93 >= v98) {
            break;
          }
          uint64_t v95 = *(void *)v97;
          uint64_t v96 = v97;
          if (!*(void *)v97) {
            goto LABEL_150;
          }
        }
        if (v98 >= v93) {
          goto LABEL_153;
        }
        uint64_t v95 = *((void *)v97 + 1);
      }
      while (v95);
      uint64_t v96 = v97 + 8;
    }
LABEL_150:
    BOOL v99 = operator new(0x20uLL);
    v99[7] = v94;
    *(void *)BOOL v99 = 0;
    *((void *)v99 + 1) = 0;
    *((void *)v99 + 2) = v97;
    *(void *)uint64_t v96 = v99;
    if (**(void **)v570)
    {
      *(void *)v570 = **(void **)v570;
      BOOL v99 = *(_DWORD **)v96;
    }
    sub_1B4BB3DA4(*(uint64_t **)&v570[8], (uint64_t *)v99);
    *(void *)&long long v571 = v571 + 1;
LABEL_153:
    int64_t v568 = 0;
    int locale = 0;
    __dst.__locale_ = (std::locale::__imp *)&locale;
    sub_1B4C0CFB0((uint64_t *)&__dst, *(void **)v570, &v570[8]);
    *(void *)buf = &unk_1F0D554C0;
    *(std::locale *)&buf[8] = __dst;
    v573 = locale;
    v574 = (std::__shared_weak_count *)v568;
    if (v568)
    {
      *((void *)locale + 2) = &v573;
      __dst.__locale_ = (std::locale::__imp *)&locale;
      int locale = 0;
      int64_t v568 = 0;
    }
    else
    {
      *(void *)&buf[8] = &v573;
    }
    sub_1B4C0D12C(v519);
    unint64_t v106 = v573;
    v518 = *(char ***)&buf[8];
    v519 = v573;
    v520 = v574;
    if (v574)
    {
      *((void *)v573 + 2) = &v519;
      *(void *)&buf[8] = &v573;
      v573 = 0;
      v574 = 0;
      unint64_t v106 = 0;
    }
    else
    {
      v518 = &v519;
    }
    *(void *)buf = &unk_1F0D554C0;
    sub_1B4C0D12C(v106);
    sub_1B4C0D12C(locale);
    sub_1B4C0D12C(*(void **)&v570[8]);
    uint64_t v107 = a1;
    if (v47 && !atomic_fetch_add(&v47->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
    unsigned int v108 = v530;
    if (v530 && !atomic_fetch_add(&v530->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
      std::__shared_weak_count::__release_weak(v108);
    }
    unsigned int v109 = v532;
    uint64_t v110 = (char *)v531;
    *(void *)buf = v513;
    *(void *)&buf[5] = *(void *)((char *)&v513 + 5);
    LOBYTE(__p) = 0;
    if (v516)
    {
      v573 = 0;
      v574 = 0;
      uint64_t v575 = 0;
      sub_1B4BCA340((char *)&v573, (long long *)v514, *((long long **)&v514 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v514 + 1) - v514) >> 3));
      LOBYTE(__p) = 1;
      int v111 = buf[12];
      int v112 = *(_DWORD *)buf;
      int v113 = *(_DWORD *)&buf[8];
      char v114 = (std::__shared_weak_count *)v573;
      if (v573)
      {
        unint64_t v115 = v574;
        unint64_t v116 = v573;
        if (v574 != (std::__shared_weak_count *)v573)
        {
          do
          {
            if (SHIBYTE(v115[-1].__shared_weak_owners_) < 0) {
              operator delete(v115[-1].__vftable);
            }
            --v115;
          }
          while (v115 != v114);
          unint64_t v116 = v573;
        }
        v574 = v114;
        operator delete(v116);
      }
    }
    else
    {
      int v111 = buf[12];
      int v112 = *(_DWORD *)buf;
      int v113 = *(_DWORD *)&buf[8];
    }
    size_t v176 = v109 - v110;
    uint64_t v177 = (v109 - v110) >> 2;
    unint64_t v178 = v113;
    if (v113 >= (unint64_t)(v112 - v177)) {
      unint64_t v178 = v112 - v177;
    }
    if (v111) {
      unint64_t v179 = v178;
    }
    else {
      unint64_t v179 = v112 - v177;
    }
    if (qword_1E9D40AE0 != -1) {
      dispatch_once(&qword_1E9D40AE0, &unk_1F0D55F60);
    }
    unint64_t v180 = (id)qword_1E9D40AD8;
    if (!os_log_type_enabled(v180, OS_LOG_TYPE_DEBUG))
    {
LABEL_537:

      memset(buf, 0, sizeof(buf));
      v573 = 0;
      if (v109 == v110)
      {
        memset(v570, 0, sizeof(v570));
        *(void *)&long long v571 = 0;
      }
      else
      {
        if ((v176 & 0x8000000000000000) != 0) {
          sub_1B4BB3244();
        }
        *(void *)buf = operator new(v176);
        *(void *)&buf[8] = *(void *)buf;
        uint64_t v377 = *(void *)buf + 4 * v177;
        v573 = (char *)v377;
        memcpy(*(void **)buf, v110, v176);
        *(void *)&buf[8] = v377;
        *(void *)v570 = operator new(v176);
        *(void *)&v570[8] = *(void *)v570;
        uint64_t v378 = *(void *)v570 + 4 * v177;
        *(void *)&long long v571 = v378;
        memcpy(*(void **)v570, v110, v176);
        *(void *)&v570[8] = v378;
      }
      int v379 = sub_1B4C1C5C8((uint64_t)&v513, (unsigned int **)buf, v474);
      int v380 = v379;
      unint64_t v381 = *(unsigned char **)&v570[8];
      if (*(void *)&v570[8] < (unint64_t)v571)
      {
        **(_DWORD **)&v570[8] = v379;
        uint64_t v382 = (uint64_t)(v381 + 4);
LABEL_562:
        *(void *)&v570[8] = v382;
        if (v179 <= 1) {
          uint64_t v402 = 1;
        }
        else {
          uint64_t v402 = v179;
        }
        uint64_t v403 = 1;
        while (1)
        {
          if (v403 == v402)
          {
LABEL_616:
            int locale = 0;
            __dst.__locale_ = 0;
            int64_t v568 = 0;
            v451 = *(const void **)v570;
            int64_t v452 = *(void *)&v570[8] - *(void *)v570;
            if (*(void *)&v570[8] != *(void *)v570)
            {
              if (v452 < 0) {
                sub_1B4BB3244();
              }
              __dst.__locale_ = (std::locale::__imp *)operator new(*(void *)&v570[8] - *(void *)v570);
              int locale = (char *)__dst.__locale_;
              v453 = (char *)__dst.__locale_ + 4 * (v452 >> 2);
              int64_t v568 = (int64_t)v453;
              memcpy(__dst.__locale_, v451, v452);
              int locale = v453;
            }
            v561[1] = 0;
            v561[0] = 0;
            v562 = 0;
            v561[0] = operator new(0x18uLL);
            v561[1] = v561[0];
            v562 = (char *)v561[0] + 24;
            v561[1] = sub_1B4C2A1CC((uint64_t)&v562, (uint64_t)&__dst, (uint64_t)v569, (void *)v561[0]);
            if (__dst.__locale_)
            {
              int locale = (char *)__dst.__locale_;
              operator delete(__dst.__locale_);
            }
            if (*(void *)v570)
            {
              *(void *)&v570[8] = *(void *)v570;
              operator delete(*(void **)v570);
            }
            if (*(void *)buf)
            {
              *(void *)&buf[8] = *(void *)buf;
              operator delete(*(void **)buf);
            }
            v454 = a3;
            unint64_t v455 = (char *)*a3;
            if (*a3)
            {
              v456 = (char *)a3[1];
              if (v456 != v455)
              {
                v457 = (char *)a3[1];
                do
                {
                  long long v459 = (void *)*((void *)v457 - 3);
                  v457 -= 24;
                  v458 = v459;
                  if (v459)
                  {
                    *((void *)v456 - 2) = v458;
                    operator delete(v458);
                  }
                  v456 = v457;
                }
                while (v457 != v455);
              }
              operator delete(v455);
              v454 = a3;
              *a3 = 0;
              a3[1] = 0;
              a3[2] = 0;
            }
            *(_OWORD *)v454 = *(_OWORD *)v561;
            v454[2] = v562;
            sub_1B4C0D178((uint64_t)&v513);
            if (v110) {
              goto LABEL_633;
            }
            goto LABEL_634;
          }
          uint64_t v404 = *(void *)&v570[8];
          uint64_t v405 = *(unsigned char **)&buf[8];
          if (*(void *)&buf[8] < (unint64_t)v573)
          {
            **(_DWORD **)&buf[8] = *(_DWORD *)(*(void *)&v570[8] - 4);
            uint64_t v406 = (uint64_t)(v405 + 4);
            goto LABEL_588;
          }
          uint64_t v407 = *(unsigned char **)buf;
          uint64_t v408 = *(void *)&buf[8] - *(void *)buf;
          uint64_t v409 = (uint64_t)(*(void *)&buf[8] - *(void *)buf) >> 2;
          unint64_t v410 = v409 + 1;
          if ((unint64_t)(v409 + 1) >> 62) {
            sub_1B4BB3244();
          }
          uint64_t v411 = (uint64_t)&v573[-*(void *)buf];
          if ((uint64_t)&v573[-*(void *)buf] >> 1 > v410) {
            unint64_t v410 = v411 >> 1;
          }
          unint64_t v412 = (unint64_t)v411 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v410;
          if (v412) {
            break;
          }
          unsigned int v413 = 0;
          unint64_t v414 = (char *)(4 * v409);
          *(_DWORD *)(4 * v409) = *(_DWORD *)(*(void *)&v570[8] - 4);
          uint64_t v406 = 4 * v409 + 4;
          int64_t v415 = v405 - v407;
          if (v405 != v407) {
            goto LABEL_580;
          }
LABEL_586:
          *(void *)buf = v414;
          *(void *)&buf[8] = v406;
          v573 = &v413[4 * v412];
          if (v407) {
            operator delete(v407);
          }
LABEL_588:
          *(void *)&buf[8] = v406;
          int v425 = sub_1B4C1C5C8((uint64_t)&v513, (unsigned int **)buf, v107);
          int v426 = v425;
          unsigned int v427 = *(unsigned char **)&v570[8];
          if (*(void *)&v570[8] >= (unint64_t)v571)
          {
            unsigned int v429 = *(unsigned char **)v570;
            uint64_t v430 = *(void *)&v570[8] - *(void *)v570;
            uint64_t v431 = (uint64_t)(*(void *)&v570[8] - *(void *)v570) >> 2;
            unint64_t v432 = v431 + 1;
            if ((unint64_t)(v431 + 1) >> 62) {
              sub_1B4BB3244();
            }
            uint64_t v433 = v571 - *(void *)v570;
            if ((uint64_t)(v571 - *(void *)v570) >> 1 > v432) {
              unint64_t v432 = v433 >> 1;
            }
            if ((unint64_t)v433 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v434 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v434 = v432;
            }
            if (v434)
            {
              if (v434 >> 62) {
                sub_1B4BB2D38();
              }
              unint64_t v435 = (char *)operator new(4 * v434);
              uint64_t v436 = &v435[4 * v431];
              *(_DWORD *)uint64_t v436 = v426;
              uint64_t v428 = (uint64_t)(v436 + 4);
              int64_t v437 = v427 - v429;
              if (v427 == v429) {
                goto LABEL_607;
              }
LABEL_601:
              unint64_t v438 = v437 - 4;
              if (v438 < 0x2C) {
                goto LABEL_668;
              }
              if ((unint64_t)(v427 - &v435[v430]) < 0x20) {
                goto LABEL_668;
              }
              uint64_t v439 = (v438 >> 2) + 1;
              uint64_t v440 = 4 * (v439 & 0x7FFFFFFFFFFFFFF8);
              unint64_t v441 = &v427[-v440];
              v436 -= v440;
              uint64_t v442 = &v435[4 * v431 - 16];
              v443 = (long long *)(v427 - 16);
              uint64_t v444 = v439 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                long long v445 = *v443;
                *((_OWORD *)v442 - 1) = *(v443 - 1);
                *(_OWORD *)uint64_t v442 = v445;
                v442 -= 32;
                v443 -= 2;
                v444 -= 8;
              }
              while (v444);
              unsigned int v427 = v441;
              if (v439 != (v439 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_668:
                do
                {
                  int v446 = *((_DWORD *)v427 - 1);
                  v427 -= 4;
                  *((_DWORD *)v436 - 1) = v446;
                  v436 -= 4;
                }
                while (v427 != v429);
              }
            }
            else
            {
              unint64_t v435 = 0;
              uint64_t v436 = (char *)(4 * v431);
              *(_DWORD *)(4 * v431) = v426;
              uint64_t v428 = 4 * v431 + 4;
              int64_t v437 = v427 - v429;
              if (v427 != v429) {
                goto LABEL_601;
              }
            }
LABEL_607:
            *(void *)v570 = v436;
            *(void *)&v570[8] = v428;
            *(void *)&long long v571 = &v435[4 * v434];
            if (v429) {
              operator delete(v429);
            }
            goto LABEL_609;
          }
          **(_DWORD **)&v570[8] = v425;
          uint64_t v428 = (uint64_t)(v427 + 4);
LABEL_609:
          *(void *)&v570[8] = v428;
          int v447 = BYTE4(v513);
          int v448 = *(_DWORD *)(v428 - 4);
          uint64_t v107 = v474;
          int v449 = (*(uint64_t (**)(void))(*(void *)v521 + 40))();
          ++v403;
          if (v447 && v448 == v449)
          {
            if (qword_1E9D40AE0 != -1) {
              dispatch_once(&qword_1E9D40AE0, &unk_1F0D55F60);
            }
            v450 = (id)qword_1E9D40AD8;
            if (os_log_type_enabled(v450, OS_LOG_TYPE_DEBUG))
            {
              LOWORD(__dst.__locale_) = 0;
              _os_log_impl(&dword_1B4BAD000, v450, OS_LOG_TYPE_DEBUG, "EOS encountered in greedySample. Terminating early.", (uint8_t *)&__dst, 2u);
            }

            goto LABEL_616;
          }
        }
        if (v412 >> 62) {
          sub_1B4BB2D38();
        }
        unsigned int v413 = (char *)operator new(4 * v412);
        unint64_t v414 = &v413[4 * v409];
        *(_DWORD *)unint64_t v414 = *(_DWORD *)(v404 - 4);
        uint64_t v406 = (uint64_t)(v414 + 4);
        int64_t v415 = v405 - v407;
        if (v405 == v407) {
          goto LABEL_586;
        }
LABEL_580:
        unint64_t v416 = v415 - 4;
        if (v416 < 0x2C) {
          goto LABEL_669;
        }
        if ((unint64_t)(v405 - v413 - v408) < 0x20) {
          goto LABEL_669;
        }
        uint64_t v417 = (v416 >> 2) + 1;
        uint64_t v418 = 4 * (v417 & 0x7FFFFFFFFFFFFFF8);
        unsigned int v419 = &v405[-v418];
        v414 -= v418;
        std::string::size_type v420 = &v413[4 * v409 - 16];
        std::string::size_type v421 = (long long *)(v405 - 16);
        uint64_t v422 = v417 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v423 = *v421;
          *((_OWORD *)v420 - 1) = *(v421 - 1);
          *(_OWORD *)std::string::size_type v420 = v423;
          v420 -= 32;
          v421 -= 2;
          v422 -= 8;
        }
        while (v422);
        uint64_t v405 = v419;
        if (v417 != (v417 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_669:
          do
          {
            int v424 = *((_DWORD *)v405 - 1);
            v405 -= 4;
            *((_DWORD *)v414 - 1) = v424;
            v414 -= 4;
          }
          while (v405 != v407);
        }
        goto LABEL_586;
      }
      size_t v383 = *(unsigned char **)v570;
      uint64_t v384 = *(void *)&v570[8] - *(void *)v570;
      uint64_t v385 = (uint64_t)(*(void *)&v570[8] - *(void *)v570) >> 2;
      unint64_t v386 = v385 + 1;
      if ((unint64_t)(v385 + 1) >> 62) {
        sub_1B4BB3244();
      }
      uint64_t v387 = v571 - *(void *)v570;
      if ((uint64_t)(v571 - *(void *)v570) >> 1 > v386) {
        unint64_t v386 = v387 >> 1;
      }
      if ((unint64_t)v387 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v388 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v388 = v386;
      }
      if (v388)
      {
        if (v388 >> 62) {
          sub_1B4BB2D38();
        }
        size_t v389 = (char *)operator new(4 * v388);
        unint64_t v390 = &v389[4 * v385];
        unsigned int v391 = &v389[4 * v388];
        *(_DWORD *)unint64_t v390 = v380;
        uint64_t v382 = (uint64_t)(v390 + 4);
        int64_t v392 = v381 - v383;
        if (v381 == v383) {
          goto LABEL_560;
        }
      }
      else
      {
        size_t v389 = 0;
        unint64_t v390 = (char *)(4 * v385);
        unsigned int v391 = 0;
        *(_DWORD *)(4 * v385) = v380;
        uint64_t v382 = 4 * v385 + 4;
        int64_t v392 = v381 - v383;
        if (v381 == v383)
        {
LABEL_560:
          *(void *)v570 = v390;
          *(void *)&v570[8] = v382;
          *(void *)&long long v571 = v391;
          if (v383) {
            operator delete(v383);
          }
          goto LABEL_562;
        }
      }
      unint64_t v393 = v392 - 4;
      if (v393 < 0x2C) {
        goto LABEL_670;
      }
      if ((unint64_t)(v381 - v389 - v384) < 0x20) {
        goto LABEL_670;
      }
      uint64_t v394 = (v393 >> 2) + 1;
      uint64_t v395 = 4 * (v394 & 0x7FFFFFFFFFFFFFF8);
      unsigned int v396 = &v381[-v395];
      v390 -= v395;
      unsigned int v397 = &v389[4 * v385 - 16];
      uint64_t v398 = (long long *)(v381 - 16);
      uint64_t v399 = v394 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v400 = *v398;
        *((_OWORD *)v397 - 1) = *(v398 - 1);
        *(_OWORD *)unsigned int v397 = v400;
        v397 -= 32;
        v398 -= 2;
        v399 -= 8;
      }
      while (v399);
      unint64_t v381 = v396;
      if (v394 != (v394 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_670:
        do
        {
          int v401 = *((_DWORD *)v381 - 1);
          v381 -= 4;
          *((_DWORD *)v390 - 1) = v401;
          v390 -= 4;
        }
        while (v381 != v383);
      }
      goto LABEL_560;
    }
    char v564 = 1;
    LOWORD(v563[0]) = 32;
    sub_1B4BB2204((uint64_t)buf);
    if (v177 == 1)
    {
      std::ostream::operator<<();
      std::stringbuf::str();
      goto LABEL_530;
    }
    if (!v177)
    {
      int locale = 0;
      __dst.__locale_ = 0;
      int64_t v568 = 0;
      goto LABEL_530;
    }
    if (v564 >= 0) {
      int64_t v181 = v563;
    }
    else {
      int64_t v181 = (void **)v563[0];
    }
    if (v110 != v109)
    {
      if (v181)
      {
        do
        {
          std::ostream::operator<<();
          size_t v182 = strlen((const char *)v181);
          sub_1B4BB34F0(buf, (uint64_t)v181, v182);
          v110 += 4;
        }
        while (v110 != v109);
      }
      else
      {
        do
        {
          std::ostream::operator<<();
          v110 += 4;
        }
        while (v110 != v109);
      }
    }
    std::stringbuf::str();
    size_t v183 = BYTE7(v571);
    unint64_t v184 = v564;
    if (v564 < 0) {
      unint64_t v184 = (unint64_t)v563[1];
    }
    if ((SBYTE7(v571) & 0x80u) == 0)
    {
      unsigned int v185 = v570;
    }
    else
    {
      size_t v183 = *(void *)&v570[8];
      unsigned int v185 = *(uint8_t **)v570;
    }
    if (v183 >= v183 - v184) {
      size_t v186 = v183 - v184;
    }
    else {
      size_t v186 = v183;
    }
    if (v186 >= 0x7FFFFFFFFFFFFFF8) {
      sub_1B4BB33D8();
    }
    if (v186 >= 0x17)
    {
      uint64_t v374 = (v186 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v186 | 7) != 0x17) {
        uint64_t v374 = v186 | 7;
      }
      uint64_t v375 = v374 + 1;
      p_dst = (std::locale::__imp *)operator new(v374 + 1);
      int64_t v568 = v375 | 0x8000000000000000;
      __dst.__locale_ = p_dst;
      int locale = (char *)v186;
    }
    else
    {
      HIBYTE(v568) = v186;
      p_dst = (std::locale::__imp *)&__dst;
      if (!v186)
      {
LABEL_528:
        *((unsigned char *)p_dst + v186) = 0;
        if (SBYTE7(v571) < 0) {
          operator delete(*(void **)v570);
        }
LABEL_530:
        *(void *)buf = *MEMORY[0x1E4FBA418];
        *(void *)&buf[*(void *)(*(void *)buf - 24)] = *(void *)(MEMORY[0x1E4FBA418] + 24);
        *(void *)&buf[8] = MEMORY[0x1E4FBA470] + 16;
        if (SBYTE7(v581) < 0) {
          operator delete((void *)v580);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x1BA992920](v583);
        uint64_t v376 = &__dst;
        if (v568 < 0) {
          uint64_t v376 = __dst.__locale_;
        }
        *(_DWORD *)v565 = 136315394;
        *(void *)&v565[4] = v376;
        *(_WORD *)&v565[12] = 2048;
        *(void *)&v565[14] = v179;
        _os_log_impl(&dword_1B4BAD000, v180, OS_LOG_TYPE_DEBUG, "sampleTokenIDs(%s, %zu)", v565, 0x16u);
        if (SHIBYTE(v568) < 0)
        {
          operator delete(__dst.__locale_);
          if ((v564 & 0x80000000) == 0) {
            goto LABEL_536;
          }
        }
        else if ((v564 & 0x80000000) == 0)
        {
LABEL_536:
          uint64_t v110 = (char *)v531;
          unsigned int v109 = v532;
          size_t v176 = v532 - (unsigned char *)v531;
          uint64_t v177 = (v532 - (unsigned char *)v531) >> 2;
          goto LABEL_537;
        }
        operator delete(v563[0]);
        goto LABEL_536;
      }
    }
    memmove(p_dst, v185, v186);
    goto LABEL_528;
  }
  unint64_t v65 = *(void ***)(a1 + 560);
  uint64_t v66 = *(std::__shared_weak_count **)(a1 + 568);
  v511 = v65;
  v512 = v66;
  if (v66)
  {
    atomic_fetch_add_explicit(&v66->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v66->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v67 = *v43;
  *(void *)((char *)&v513 + 5) = *(uint64_t *)((char *)v43 + 5);
  *(void *)&long long v513 = v67;
  LOBYTE(v514) = 0;
  char v516 = 0;
  if (*((unsigned char *)v43 + 40))
  {
    long long v514 = 0uLL;
    uint64_t v515 = 0;
    sub_1B4BCA340((char *)&v514, (long long *)v43[2], (long long *)v43[3], 0xAAAAAAAAAAAAAAABLL * ((v43[3] - v43[2]) >> 3));
    char v516 = 1;
  }
  uint64_t v68 = (void *)v43[6];
  LODWORD(v518) = *((_DWORD *)v43 + 14);
  v517 = v68;
  v522 = 0;
  v520 = (std::__shared_weak_count *)&v521;
  v521 = 0;
  v519 = (char *)&unk_1F0D554C0;
  v523 = v65;
  v524 = v66;
  if (v66) {
    atomic_fetch_add_explicit(&v66->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)&long long v571 = 0;
  *(void *)&v570[8] = 0;
  *(void *)v570 = &v570[8];
  if (*((unsigned char *)v43 + 40))
  {
    uint64_t v69 = (long long *)v43[2];
    for (j = (long long *)v43[3]; v69 != j; uint64_t v69 = (long long *)((char *)v69 + 24))
    {
      while (1)
      {
        if (*((char *)v69 + 23) < 0)
        {
          sub_1B4BCA11C(buf, *(void **)v69, *((void *)v69 + 1));
        }
        else
        {
          long long v71 = *v69;
          v573 = (char *)*((void *)v69 + 2);
          *(_OWORD *)buf = v71;
        }
        int v72 = v523;
        if (SHIBYTE(v573) >= 0) {
          uint64_t v73 = buf;
        }
        else {
          uint64_t v73 = *(uint8_t **)buf;
        }
        if (SHIBYTE(v573) >= 0) {
          uint64_t v74 = HIBYTE(v573);
        }
        else {
          uint64_t v74 = *(void *)&buf[8];
        }
        int v75 = sub_1B4BC4058(v523 + 10, (uint64_t)v73, v74);
        if (*((char *)v72 + 79) < 0)
        {
          uint64_t v76 = (void **)v72[7];
          uint64_t v77 = v72[8];
        }
        else
        {
          uint64_t v76 = v72 + 7;
          uint64_t v77 = (void *)*((unsigned __int8 *)v72 + 79);
        }
        if (v75 != ((unsigned int (*)(void **, void **, void *))(*v72)[5])(v72, v76, v77))
        {
          unsigned int v78 = ((uint64_t (*)(void))(*v523)[5])();
          unsigned int v79 = v78;
          uint64_t v80 = *(void *)&v570[8];
          long long v81 = &v570[8];
          uint64_t v82 = &v570[8];
          if (*(void *)&v570[8])
          {
            while (1)
            {
              while (1)
              {
                uint64_t v82 = (uint8_t *)v80;
                unsigned int v83 = *(_DWORD *)(v80 + 28);
                if (v78 >= v83) {
                  break;
                }
                uint64_t v80 = *(void *)v82;
                long long v81 = v82;
                if (!*(void *)v82) {
                  goto LABEL_125;
                }
              }
              if (v83 >= v78) {
                break;
              }
              uint64_t v80 = *((void *)v82 + 1);
              if (!v80)
              {
                long long v81 = v82 + 8;
                goto LABEL_125;
              }
            }
          }
          else
          {
LABEL_125:
            int64x2_t v84 = operator new(0x20uLL);
            v84[7] = v79;
            *(void *)int64x2_t v84 = 0;
            *((void *)v84 + 1) = 0;
            *((void *)v84 + 2) = v82;
            *(void *)long long v81 = v84;
            if (**(void **)v570)
            {
              *(void *)v570 = **(void **)v570;
              int64x2_t v84 = *(_DWORD **)v81;
            }
            sub_1B4BB3DA4(*(uint64_t **)&v570[8], (uint64_t *)v84);
            *(void *)&long long v571 = v571 + 1;
          }
        }
        if (SHIBYTE(v573) < 0) {
          break;
        }
        uint64_t v69 = (long long *)((char *)v69 + 24);
        if (v69 == j) {
          goto LABEL_131;
        }
      }
      operator delete(*(void **)buf);
    }
  }
LABEL_131:
  unsigned int v85 = ((uint64_t (*)(void))(*v523)[5])();
  uint64_t v86 = v474;
  unsigned int v87 = v85;
  uint64_t v88 = *(void *)&v570[8];
  unint64_t v89 = &v570[8];
  uint64_t v90 = &v570[8];
  if (*(void *)&v570[8])
  {
    while (1)
    {
      while (1)
      {
        uint64_t v90 = (uint8_t *)v88;
        unsigned int v91 = *(_DWORD *)(v88 + 28);
        if (v85 >= v91) {
          break;
        }
        uint64_t v88 = *(void *)v90;
        unint64_t v89 = v90;
        if (!*(void *)v90) {
          goto LABEL_138;
        }
      }
      if (v91 >= v85) {
        break;
      }
      uint64_t v88 = *((void *)v90 + 1);
      if (!v88)
      {
        unint64_t v89 = v90 + 8;
        goto LABEL_138;
      }
    }
  }
  else
  {
LABEL_138:
    int64_t v92 = operator new(0x20uLL);
    v92[7] = v87;
    *(void *)int64_t v92 = 0;
    *((void *)v92 + 1) = 0;
    *((void *)v92 + 2) = v90;
    *(void *)unint64_t v89 = v92;
    if (**(void **)v570)
    {
      *(void *)v570 = **(void **)v570;
      int64_t v92 = *(_DWORD **)v89;
    }
    sub_1B4BB3DA4(*(uint64_t **)&v570[8], (uint64_t *)v92);
    *(void *)&long long v571 = v571 + 1;
  }
  int64_t v568 = 0;
  int locale = 0;
  __dst.__locale_ = (std::locale::__imp *)&locale;
  sub_1B4C0CFB0((uint64_t *)&__dst, *(void **)v570, &v570[8]);
  *(void *)buf = &unk_1F0D554C0;
  *(std::locale *)&buf[8] = __dst;
  v573 = locale;
  v574 = (std::__shared_weak_count *)v568;
  if (v568)
  {
    *((void *)locale + 2) = &v573;
    __dst.__locale_ = (std::locale::__imp *)&locale;
    int locale = 0;
    int64_t v568 = 0;
  }
  else
  {
    *(void *)&buf[8] = &v573;
  }
  sub_1B4C0D12C(v521);
  size_t v100 = v573;
  v520 = *(std::__shared_weak_count **)&buf[8];
  v521 = v573;
  v522 = v574;
  if (v574)
  {
    *((void *)v573 + 2) = &v521;
    *(void *)&buf[8] = &v573;
    v573 = 0;
    v574 = 0;
    size_t v100 = 0;
  }
  else
  {
    v520 = (std::__shared_weak_count *)&v521;
  }
  *(void *)buf = &unk_1F0D554C0;
  sub_1B4C0D12C(v100);
  sub_1B4C0D12C(locale);
  sub_1B4C0D12C(*(void **)&v570[8]);
  if (v66 && !atomic_fetch_add(&v66->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
    std::__shared_weak_count::__release_weak(v66);
  }
  int v101 = *((_DWORD *)v43 + 14);
  v525[0] = *((_DWORD *)v43 + 12);
  v525[1] = v101;
  uint64_t v528 = 0;
  v526 = 0;
  v527 = 0;
  if (v512)
  {
    if (!atomic_fetch_add(&v512->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v512->__on_zero_shared)(v512);
      std::__shared_weak_count::__release_weak(v512);
    }
    long long v102 = (char *)v526;
    if (v526)
    {
      uint64_t v103 = v527;
      uint64_t v104 = v526;
      if (v527 != v526)
      {
        do
        {
          uint64_t v105 = (void *)*((void *)v103 - 3);
          if (v105)
          {
            *((void *)v103 - 2) = v105;
            operator delete(v105);
          }
          v103 -= 32;
        }
        while (v103 != v102);
        uint64_t v104 = v526;
      }
      v527 = v102;
      operator delete(v104);
    }
  }
  v526 = 0;
  v527 = 0;
  uint64_t v528 = 0;
  unint64_t v117 = v531;
  if (v531 == v532)
  {
    if (qword_1E9D40AE0 != -1) {
      dispatch_once(&qword_1E9D40AE0, &unk_1F0D55F60);
    }
    unint64_t v121 = (id)qword_1E9D40AD8;
    if (os_log_type_enabled(v121, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1B4BAD000, v121, OS_LOG_TYPE_DEBUG, "No context provided. Pushing bosID as first tokenID for beam search.", buf, 2u);
    }

    int v188 = ((uint64_t (*)(void))(*v523)[5])();
    int64_t v120 = operator new(4uLL);
    *int64_t v120 = v188;
    v554 = v120 + 1;
    v552 = v120;
    v553 = v120 + 1;
    sub_1B4C2A340(v525, (uint64_t)&v552, -3.4028e38);
    v553 = v120;
  }
  else
  {
    size_t v118 = v532 - (unsigned char *)v531;
    unint64_t v119 = (v532 - (unsigned char *)v531) >> 2;
    if (v532 - (unsigned char *)v531 == 4)
    {
      int64_t v120 = operator new(4uLL);
      v551 = &v120[v119];
      *int64_t v120 = *v117;
      v549 = v120;
      v550 = &v120[v119];
      sub_1B4C2A340(v525, (uint64_t)&v549, -3.4028e38);
      v550 = v120;
      goto LABEL_279;
    }
    unint64_t v491 = v119 - 1;
    if (v119 != 1)
    {
      size_t __sz = v532 - (unsigned char *)v531;
      unint64_t v122 = 0;
      float v123 = 0.0;
      v481 = v531;
      uint64_t v475 = (v532 - (unsigned char *)v531) >> 2;
      while (1)
      {
        if (v119 >= v122) {
          unint64_t v124 = v122;
        }
        else {
          unint64_t v124 = v119;
        }
        int locale = 0;
        __dst.__locale_ = 0;
        int64_t v568 = 0;
        if (v124)
        {
          if ((v124 & 0x8000000000000000) != 0) {
            sub_1B4BB3244();
          }
          size_t v125 = 4 * v124;
          uint64_t v126 = (std::locale::__imp *)operator new(4 * v124);
          uint64_t v127 = (char *)v126 + 4 * v124;
          __dst.__locale_ = v126;
          int64_t v568 = (int64_t)v127;
          memmove(v126, v117, v125);
          int locale = v127;
        }
        else
        {
          uint64_t v126 = 0;
        }
        sub_1B4C07898(v570, v474, (unsigned int **)&__dst);
        unsigned int v128 = (char *)v520;
        if (v520 != (std::__shared_weak_count *)&v521)
        {
          uint64_t v129 = *(void *)v570;
          do
          {
            *(_DWORD *)(v129 + 4 * *((unsigned int *)v128 + 7)) = -8388609;
            uint64_t v130 = (char *)*((void *)v128 + 1);
            if (v130)
            {
              do
              {
                long long v131 = (char **)v130;
                uint64_t v130 = *(char **)v130;
              }
              while (v130);
            }
            else
            {
              do
              {
                long long v131 = (char **)*((void *)v128 + 2);
                BOOL v211 = *v131 == v128;
                unsigned int v128 = (char *)v131;
              }
              while (!v211);
            }
            unsigned int v128 = (char *)v131;
          }
          while (v131 != &v521);
        }
        memset(buf, 0, sizeof(buf));
        v573 = 0;
        unsigned int v132 = *(const void **)v570;
        int64_t v133 = *(void *)&v570[8] - *(void *)v570;
        if ((uint64_t)(*(void *)&v570[8] - *(void *)v570) < 0) {
          sub_1B4BB3244();
        }
        unint64_t v134 = (float *)operator new(*(void *)&v570[8] - *(void *)v570);
        v492 = v126;
        memcpy(v134, v132, v133);
        unint64_t v136 = v134;
        if ((v133 & 0xFFFFFFFFFFFFFFFBLL) != 0)
        {
          unint64_t v137 = v134 + 1;
          float v138 = *v134;
          uint64_t v139 = 4 * (v133 >> 2) - 4;
          unint64_t v136 = v134;
          unint64_t v140 = v134 + 1;
          do
          {
            float v141 = *v140++;
            BOOL v142 = v138 < v141;
            float v138 = fmaxf(v138, v141);
            if (v142) {
              unint64_t v136 = v137;
            }
            unint64_t v137 = v140;
            v139 -= 4;
          }
          while (v139);
        }
        v135.i32[0] = *(__int32 *)v136;
        int32x2_t v494 = v135;
        operator delete(v134);
        int v143 = *(float **)&v570[8];
        unsigned int v144 = *(float **)v570;
        unint64_t v145 = *(void *)&v570[8] - *(void *)v570;
        if ((int)((*(void *)&v570[8] - *(void *)v570) >> 2) < 1)
        {
          float v163 = 0.0;
        }
        else
        {
          uint64_t v146 = (v145 >> 2);
          if ((unint64_t)(v146 - 8) >= 0x7FFFFFF9)
          {
            uint64_t v165 = 0;
            float v163 = 0.0;
            float v164 = *(float *)v494.i32;
          }
          else
          {
            uint64_t v147 = 0;
            uint64_t __src = (v145 >> 2) & 7;
            uint64_t v148 = v146 - __src;
            float32x4_t v493 = (float32x4_t)vdupq_lane_s32(v494, 0);
            float32x4_t v149 = 0uLL;
            float32x4_t v150 = 0uLL;
            do
            {
              float32x4_t v495 = v150;
              float32x4_t v497 = v149;
              uint64_t v151 = (float32x4_t *)((char *)v144 + (v147 >> 30));
              float32x4_t v499 = vsubq_f32(*v151, v493);
              float32x4_t v503 = vsubq_f32(v151[1], v493);
              float v505 = expf(v499.f32[1]);
              v152.f32[0] = expf(v499.f32[0]);
              v152.f32[1] = v505;
              float32x4_t v506 = v152;
              float v153 = expf(v499.f32[2]);
              float32x4_t v154 = v506;
              v154.f32[2] = v153;
              float32x4_t v507 = v154;
              float v155 = expf(v499.f32[3]);
              float32x4_t v156 = v507;
              v156.f32[3] = v155;
              float32x4_t v508 = v156;
              v499.i32[0] = expf(v503.f32[1]);
              v157.f32[0] = expf(v503.f32[0]);
              v157.i32[1] = v499.i32[0];
              float32x4_t v500 = v157;
              float v158 = expf(v503.f32[2]);
              float32x4_t v159 = v500;
              v159.f32[2] = v158;
              float32x4_t v501 = v159;
              float v160 = expf(v503.f32[3]);
              float32x4_t v161 = v501;
              v161.f32[3] = v160;
              float32x4_t v149 = vaddq_f32(v508, v497);
              float32x4_t v150 = vaddq_f32(v161, v495);
              v147 += 0x800000000;
              v148 -= 8;
            }
            while (v148);
            float32x4_t v162 = vaddq_f32(v150, v149);
            float v163 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v162, v162));
            unint64_t v117 = v481;
            unint64_t v119 = v475;
            float v164 = *(float *)v494.i32;
            uint64_t v165 = v146 - __src;
            if (!__src) {
              goto LABEL_235;
            }
          }
          uint64_t v166 = v165 - v146;
          uint64_t v167 = v165 << 32;
          do
          {
            float v168 = expf(*(float *)((char *)v144 + (v167 >> 30)) - v164);
            float v164 = *(float *)v494.i32;
            float v163 = v168 + v163;
            v167 += 0x100000000;
            BOOL v169 = __CFADD__(v166++, 1);
          }
          while (!v169);
        }
LABEL_235:
        if (v144 != v143)
        {
          *(float *)v170.i32 = *(float *)v494.i32 + logf(v163);
          if (v145 - 4 < 0x1C) {
            goto LABEL_671;
          }
          unint64_t v171 = ((v145 - 4) >> 2) + 1;
          float32x4_t v172 = (float32x4_t)vdupq_lane_s32(v170, 0);
          uint64_t v173 = (float32x4_t *)(v144 + 4);
          uint64_t v174 = v171 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            float32x4_t v175 = vsubq_f32(*v173, v172);
            v173[-1] = vsubq_f32(v173[-1], v172);
            *uint64_t v173 = v175;
            v173 += 2;
            v174 -= 8;
          }
          while (v174);
          v144 += v171 & 0x7FFFFFFFFFFFFFF8;
          if (v171 != (v171 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_671:
            do
            {
              *unsigned int v144 = *v144 - *(float *)v170.i32;
              ++v144;
            }
            while (v144 != v143);
          }
        }
        if (v492) {
          operator delete(v492);
        }
        float v123 = *(float *)(*(void *)v570 + 4 * v117[++v122]) + v123;
        *(void *)&v570[8] = *(void *)v570;
        operator delete(*(void **)v570);
        if (v122 == v491)
        {
          uint64_t v86 = v474;
          size_t v118 = __sz;
          v547 = 0;
          v546 = 0;
          v548 = 0;
          if ((__sz & 0x8000000000000000) == 0) {
            goto LABEL_257;
          }
LABEL_523:
          sub_1B4BB3244();
        }
      }
    }
    float v123 = 0.0;
    v547 = 0;
    v546 = 0;
    v548 = 0;
    if ((v118 & 0x8000000000000000) != 0) {
      goto LABEL_523;
    }
LABEL_257:
    int64_t v120 = operator new(v118);
    v546 = v120;
    v548 = &v120[v119];
    memcpy(v120, v117, v118);
    v547 = &v120[v119];
    sub_1B4C2A340(v525, (uint64_t)&v546, v123);
    v547 = v120;
  }
LABEL_279:
  operator delete(v120);
  uint64_t v189 = v532;
  uint64_t v190 = v531;
  *(void *)buf = v513;
  *(void *)&buf[5] = *(void *)((char *)&v513 + 5);
  LOBYTE(__p) = 0;
  if (v516)
  {
    v573 = 0;
    v574 = 0;
    uint64_t v575 = 0;
    sub_1B4BCA340((char *)&v573, (long long *)v514, *((long long **)&v514 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v514 + 1) - v514) >> 3));
    LOBYTE(__p) = 1;
    v577 = v517;
    LODWORD(v578) = v518;
    int v191 = buf[12];
    int v192 = *(_DWORD *)buf;
    int v193 = *(_DWORD *)&buf[8];
    uint64_t v194 = (std::__shared_weak_count *)v573;
    if (v573)
    {
      unsigned int v195 = v574;
      v196 = v573;
      if (v574 != (std::__shared_weak_count *)v573)
      {
        do
        {
          if (SHIBYTE(v195[-1].__shared_weak_owners_) < 0) {
            operator delete(v195[-1].__vftable);
          }
          --v195;
        }
        while (v195 != v194);
        v196 = v573;
      }
      v574 = v194;
      operator delete(v196);
    }
  }
  else
  {
    int v191 = buf[12];
    int v192 = *(_DWORD *)buf;
    int v193 = *(_DWORD *)&buf[8];
  }
  uint64_t v197 = v193;
  if (v193 >= (unint64_t)(v192 - ((v189 - v190) >> 2))) {
    uint64_t v197 = v192 - ((v189 - v190) >> 2);
  }
  if (v191) {
    uint64_t v198 = v197;
  }
  else {
    uint64_t v198 = v192 - ((v189 - v190) >> 2);
  }
  sub_1B4C2A4D8(v544, (uint64_t)v526, (uint64_t)v527);
  if (v198)
  {
    uint64_t v199 = 0;
    unsigned int v200 = &buf[8];
    uint64_t v201 = v583;
    uint64_t v496 = *MEMORY[0x1E4FBA418];
    uint64_t v504 = *(void *)(MEMORY[0x1E4FBA418] + 8);
    uint64_t v498 = *(void *)(MEMORY[0x1E4FBA418] + 24);
    uint64_t v502 = *(void *)(MEMORY[0x1E4FBA418] + 16);
    uint64_t v462 = v198;
LABEL_298:
    uint64_t v464 = v199;
    unsigned int v202 = (char *)v526;
    if (v526)
    {
      unsigned int v203 = v527;
      uint64_t v204 = v526;
      if (v527 != v526)
      {
        do
        {
          size_t v205 = (void *)*((void *)v203 - 3);
          if (v205)
          {
            *((void *)v203 - 2) = v205;
            operator delete(v205);
          }
          v203 -= 32;
        }
        while (v203 != v202);
        uint64_t v204 = v526;
      }
      v527 = v202;
      operator delete(v204);
    }
    v526 = 0;
    v527 = 0;
    uint64_t v528 = 0;
    uint64_t v206 = v544[0];
    v465 = v544[1];
    if (v544[0] == v544[1])
    {
LABEL_476:
      if (qword_1E9D40AE0 != -1) {
        dispatch_once(&qword_1E9D40AE0, &unk_1F0D55F60);
      }
      unint64_t v350 = (id)qword_1E9D40AD8;
      if (os_log_type_enabled(v350, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134217984;
        *(void *)&buf[4] = v464;
        _os_log_impl(&dword_1B4BAD000, v350, OS_LOG_TYPE_DEBUG, "All beams contain finished sequences. Exiting beam search loop early after %lu steps", buf, 0xCu);
      }

      goto LABEL_481;
    }
    uint64_t v207 = 0;
LABEL_310:
    uint64_t v466 = v207;
    int v208 = BYTE4(v513);
    int v209 = *(_DWORD *)(*((void *)v206 + 2) - 4);
    int v210 = ((uint64_t (*)(void))(*v523)[5])();
    if (v208) {
      BOOL v211 = v209 == v210;
    }
    else {
      BOOL v211 = 0;
    }
    v490 = (float *)v206;
    if (v211)
    {
      float v216 = *(float *)v206;
      v543 = 0;
      v542 = 0;
      v541 = 0;
      size_t v217 = v206;
      unsigned int v218 = (unsigned char *)*((void *)v206 + 1);
      unsigned int v219 = (unsigned char *)v217[2];
      int64_t v220 = v219 - v218;
      if (v219 == v218)
      {
        uint64_t v221 = 0;
      }
      else
      {
        if (v220 < 0) {
          sub_1B4BB3244();
        }
        uint64_t v221 = (char *)operator new(v219 - v218);
        v541 = v221;
        v543 = &v221[4 * (v220 >> 2)];
        memcpy(v221, v218, v220);
        v542 = &v221[4 * (v220 >> 2)];
      }
      sub_1B4C2A340(v525, (uint64_t)&v541, v216);
      unsigned int v255 = v490;
      if (v221)
      {
        v542 = v221;
        operator delete(v221);
      }
      if (qword_1E9D40AE0 != -1) {
        dispatch_once(&qword_1E9D40AE0, &unk_1F0D55F60);
      }
      unint64_t v256 = (id)qword_1E9D40AD8;
      if (os_log_type_enabled(v256, OS_LOG_TYPE_DEBUG))
      {
        ((void (*)(uint8_t *__return_ptr))(*v523)[4])(buf);
        int64_t v257 = SHIBYTE(v573) >= 0 ? buf : *(uint8_t **)buf;
        *(_DWORD *)v570 = 136315138;
        *(void *)&v570[4] = v257;
        _os_log_impl(&dword_1B4BAD000, v256, OS_LOG_TYPE_DEBUG, "Skipping generation on sample that ends with EOS: %s", v570, 0xCu);
        if (SHIBYTE(v573) < 0) {
          operator delete(*(void **)buf);
        }
      }

      uint64_t v207 = (v207 + 1);
      goto LABEL_309;
    }
    sub_1B4C07898(v540, v86, (unsigned int **)v206 + 1);
    unsigned int v212 = (char *)v520;
    if (v520 != (std::__shared_weak_count *)&v521)
    {
      unsigned int v213 = v540[0];
      do
      {
        v213[*((unsigned int *)v212 + 7)] = -8388609;
        unsigned int v214 = (char *)*((void *)v212 + 1);
        if (v214)
        {
          do
          {
            uint64_t v215 = (char **)v214;
            unsigned int v214 = *(char **)v214;
          }
          while (v214);
        }
        else
        {
          do
          {
            uint64_t v215 = (char **)*((void *)v212 + 2);
            BOOL v211 = *v215 == v212;
            unsigned int v212 = (char *)v215;
          }
          while (!v211);
        }
        unsigned int v212 = (char *)v215;
      }
      while (v215 != &v521);
    }
    memset(buf, 0, sizeof(buf));
    v573 = 0;
    uint64_t v222 = v540[0];
    int64_t v223 = (char *)v540[1] - (char *)v540[0];
    if ((char *)v540[1] - (char *)v540[0] < 0) {
      sub_1B4BB3244();
    }
    uint64_t v224 = (float *)operator new((char *)v540[1] - (char *)v540[0]);
    memcpy(v224, v222, v223);
    unsigned int v226 = v224;
    if ((v223 & 0xFFFFFFFFFFFFFFFBLL) != 0)
    {
      unint64_t v227 = v224 + 1;
      float v228 = *v224;
      uint64_t v229 = 4 * (v223 >> 2) - 4;
      unsigned int v226 = v224;
      unint64_t v230 = v224 + 1;
      do
      {
        float v231 = *v230++;
        BOOL v142 = v228 < v231;
        float v228 = fmaxf(v228, v231);
        if (v142) {
          unsigned int v226 = v227;
        }
        unint64_t v227 = v230;
        v229 -= 4;
      }
      while (v229);
    }
    v225.i32[0] = *(__int32 *)v226;
    int32x2_t v468 = v225;
    operator delete(v224);
    int64_t v232 = (float *)v540[1];
    unint64_t v233 = (float *)v540[0];
    unint64_t v234 = (char *)v540[1] - (char *)v540[0];
    if ((int)((unint64_t)((char *)v540[1] - (char *)v540[0]) >> 2) < 1)
    {
      float v252 = 0.0;
    }
    else
    {
      uint64_t v235 = (v234 >> 2);
      if ((unint64_t)(v235 - 8) >= 0x7FFFFFF9)
      {
        uint64_t v254 = 0;
        float v252 = 0.0;
        float v253 = *(float *)v468.i32;
      }
      else
      {
        uint64_t v236 = 0;
        uint64_t v237 = v235 - ((v234 >> 2) & 7);
        float32x4_t v467 = (float32x4_t)vdupq_lane_s32(v468, 0);
        float32x4_t v238 = 0uLL;
        float32x4_t v239 = 0uLL;
        do
        {
          float32x4_t v469 = v239;
          float32x4_t __szb = v238;
          int64_t v240 = (float32x4_t *)((char *)v233 + (v236 >> 30));
          float32x4_t v476 = vsubq_f32(*v240, v467);
          float32x4_t v482 = vsubq_f32(v240[1], v467);
          float __srcb = expf(v476.f32[1]);
          *(float *)&long long v241 = expf(v476.f32[0]);
          *((float *)&v241 + 1) = __srcb;
          *(_OWORD *)__srcc = v241;
          float v242 = expf(v476.f32[2]);
          long long v243 = *(_OWORD *)__srcc;
          *((float *)&v243 + 2) = v242;
          *(_OWORD *)__srcd = v243;
          float v244 = expf(v476.f32[3]);
          long long v245 = *(_OWORD *)__srcd;
          *((float *)&v245 + 3) = v244;
          *(_OWORD *)__srce = v245;
          v476.i32[0] = expf(v482.f32[1]);
          v246.f32[0] = expf(v482.f32[0]);
          v246.i32[1] = v476.i32[0];
          float32x4_t v477 = v246;
          float v247 = expf(v482.f32[2]);
          float32x4_t v248 = v477;
          v248.f32[2] = v247;
          float32x4_t v478 = v248;
          float v249 = expf(v482.f32[3]);
          float32x4_t v250 = v478;
          v250.f32[3] = v249;
          float32x4_t v238 = vaddq_f32(*(float32x4_t *)__srce, __szb);
          float32x4_t v239 = vaddq_f32(v250, v469);
          v236 += 0x800000000;
          v237 -= 8;
        }
        while (v237);
        float32x4_t v251 = vaddq_f32(v239, v238);
        float v252 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v251, v251));
        uint64_t v86 = v474;
        float v253 = *(float *)v468.i32;
        uint64_t v254 = v235 - ((v234 >> 2) & 7);
        if (((v234 >> 2) & 7) == 0) {
          goto LABEL_354;
        }
      }
      uint64_t v258 = v254 - v235;
      uint64_t v259 = v254 << 32;
      do
      {
        float v260 = expf(*(float *)((char *)v233 + (v259 >> 30)) - v253);
        float v253 = *(float *)v468.i32;
        float v252 = v260 + v252;
        v259 += 0x100000000;
        BOOL v169 = __CFADD__(v258++, 1);
      }
      while (!v169);
    }
LABEL_354:
    unsigned int v255 = v490;
    if (v233 != v232)
    {
      *(float *)v261.i32 = *(float *)v468.i32 + logf(v252);
      if (v234 - 4 < 0x1C) {
        goto LABEL_672;
      }
      unint64_t v262 = ((v234 - 4) >> 2) + 1;
      float32x4_t v263 = (float32x4_t)vdupq_lane_s32(v261, 0);
      uint64_t v264 = (float32x4_t *)(v233 + 4);
      uint64_t v265 = v262 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        float32x4_t v266 = vsubq_f32(*v264, v263);
        v264[-1] = vsubq_f32(v264[-1], v263);
        *uint64_t v264 = v266;
        v264 += 2;
        v265 -= 8;
      }
      while (v265);
      v233 += v262 & 0x7FFFFFFFFFFFFFF8;
      if (v262 != (v262 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_672:
        do
        {
          *unint64_t v233 = *v233 - *(float *)v261.i32;
          ++v233;
        }
        while (v233 != v232);
      }
    }
    float v267 = *v490;
    sub_1B4C2B20C((uint64_t *)v540, SHIDWORD(v517), v565);
    long long v268 = *(float **)v565;
    __sza = *(float **)&v565[8];
    if (*(void *)v565 == *(void *)&v565[8])
    {
      if (*(void *)v565) {
        goto LABEL_362;
      }
      goto LABEL_363;
    }
LABEL_366:
    int v269 = *((_DWORD *)v268 + 1);
    v483 = v268;
    __srca = (char *)operator new(4uLL);
    *(_DWORD *)__srca = v269;
    v560 = 0;
    v558 = 0;
    v559 = 0;
    uint64_t v270 = (int *)*((void *)v255 + 1);
    uint64_t v271 = (int *)*((void *)v255 + 2);
    v479 = __srca + 4;
    uint64_t v272 = 0;
    if (v270 == v271)
    {
      v273 = 0;
      unint64_t v274 = 0;
      unsigned int v275 = 0;
      goto LABEL_397;
    }
    while (1)
    {
      while (v272 < v560)
      {
        int v276 = *v270++;
        *(_DWORD *)uint64_t v272 = v276;
        v272 += 4;
        v559 = v272;
        if (v270 == v271) {
          goto LABEL_396;
        }
      }
      unint64_t v277 = v200;
      int64_t v278 = v201;
      unint64_t v279 = (char *)v558;
      int64_t v280 = v272 - (unsigned char *)v558;
      uint64_t v281 = (v272 - (unsigned char *)v558) >> 2;
      unint64_t v282 = v281 + 1;
      if ((unint64_t)(v281 + 1) >> 62) {
        sub_1B4BB3244();
      }
      uint64_t v283 = v560 - (unsigned char *)v558;
      if ((v560 - (unsigned char *)v558) >> 1 > v282) {
        unint64_t v282 = v283 >> 1;
      }
      unint64_t v284 = (unint64_t)v283 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v282;
      if (v284)
      {
        if (v284 >> 62) {
          sub_1B4BB2D38();
        }
        int v285 = operator new(4 * v284);
        unsigned int v286 = (int *)&v285[4 * v281];
        *unsigned int v286 = *v270;
        uint64_t v287 = (uint64_t)(v286 + 1);
        int64_t v288 = v272 - v279;
        if (v272 == v279)
        {
LABEL_387:
          uint64_t v201 = v278;
          v558 = v286;
          v559 = (char *)v287;
          v560 = &v285[4 * v284];
          unsigned int v200 = v277;
          if (!v279) {
            goto LABEL_384;
          }
LABEL_383:
          operator delete(v279);
          goto LABEL_384;
        }
      }
      else
      {
        int v285 = 0;
        unsigned int v286 = (int *)(4 * v281);
        *(_DWORD *)(4 * v281) = *v270;
        uint64_t v287 = 4 * v281 + 4;
        int64_t v288 = v272 - v279;
        if (v272 == v279) {
          goto LABEL_387;
        }
      }
      unint64_t v289 = v288 - 4;
      if (v289 < 0xBC) {
        break;
      }
      unint64_t v292 = (v272 - 4 - v279) & 0xFFFFFFFFFFFFFFFCLL;
      if (&v285[v280 - 4 - v292] > &v285[v280 - 4]
        || &v272[-v292 - 4] > v272 - 4
        || (unint64_t)(v272 - v285 - v280) < 0x20)
      {
        break;
      }
      uint64_t v293 = (v289 >> 2) + 1;
      uint64_t v294 = 4 * (v293 & 0x7FFFFFFFFFFFFFF8);
      uint64_t v290 = &v272[-v294];
      unsigned int v286 = (int *)((char *)v286 - v294);
      unsigned int v295 = &v285[4 * v281 - 16];
      v296 = (long long *)(v272 - 16);
      uint64_t v297 = v293 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v298 = *v296;
        *(v295 - 1) = *(v296 - 1);
        *unsigned int v295 = v298;
        v295 -= 2;
        v296 -= 2;
        v297 -= 8;
      }
      while (v297);
      uint64_t v201 = v278;
      if (v293 != (v293 & 0x7FFFFFFFFFFFFFF8)) {
        goto LABEL_381;
      }
LABEL_382:
      v558 = v286;
      v559 = (char *)v287;
      v560 = &v285[4 * v284];
      unsigned int v200 = v277;
      if (v279) {
        goto LABEL_383;
      }
LABEL_384:
      uint64_t v272 = (char *)v287;
      unsigned int v255 = v490;
      v559 = (char *)v287;
      if (++v270 == v271)
      {
LABEL_396:
        unint64_t v274 = (unint64_t)v558;
        v273 = v560;
        unsigned int v275 = v272;
LABEL_397:
        unint64_t v299 = (unint64_t)&v275[-v274];
        uint64_t v300 = (uint64_t)&v275[-v274] >> 2;
        int64_t v301 = (unsigned char *)(v274 + ((unint64_t)&v275[-v274] & 0xFFFFFFFFFFFFFFFCLL));
        if (v273 - v272 >= 4)
        {
          uint64_t v305 = v272 - v301;
          if (v272 - v301 > 3)
          {
            uint64_t v307 = v272;
          }
          else
          {
            uint64_t v470 = v300;
            uint64_t v306 = v301;
            v479 = &__srca[v305];
            memmove(v272, &__srca[v305], 4 - v305);
            uint64_t v307 = &v272[4 - v305];
            v559 = v307;
            uint64_t v86 = v474;
            if (v305 < 1) {
              goto LABEL_437;
            }
            int64_t v301 = v306;
            uint64_t v300 = v470;
          }
          int64_t v308 = v307 - (v301 + 4);
          uint64_t v309 = v308 >> 2;
          uint64_t v310 = v307 - 4;
          long long v311 = v307;
          if (v307 - 4 < v272)
          {
            unint64_t v312 = (v299 & 0xFFFFFFFFFFFFFFFCLL) + v308;
            unint64_t v313 = v274 + v312 + 4;
            if ((unint64_t)v272 > v313) {
              unint64_t v313 = (unint64_t)v272;
            }
            unint64_t v314 = v313 + ~v274 - v312;
            if (v314 < 0x2C)
            {
              long long v311 = v307;
              goto LABEL_432;
            }
            long long v311 = v307;
            if ((unint64_t)&v301[-(v299 & 0xFFFFFFFFFFFFFFFCLL) + 4 - v274] < 0x20) {
              goto LABEL_673;
            }
            uint64_t v327 = (v314 >> 2) + 1;
            uint64_t v328 = 4 * (v327 & 0x7FFFFFFFFFFFFFF8);
            v310 += v328;
            long long v311 = &v307[v328];
            unint64_t v329 = v307 + 16;
            unint64_t v330 = (long long *)(v274 + 4 * v309 + 4 * v300 + 16);
            uint64_t v331 = v327 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              long long v332 = *v330;
              *(v329 - 1) = *(v330 - 1);
              *unint64_t v329 = v332;
              v329 += 2;
              v330 += 2;
              v331 -= 8;
            }
            while (v331);
            if (v327 != (v327 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_673:
              do
              {
LABEL_432:
                int v333 = *(_DWORD *)v310;
                v310 += 4;
                *(_DWORD *)long long v311 = v333;
                v311 += 4;
              }
              while (v310 < v272);
            }
          }
          v559 = v311;
          uint64_t v86 = v474;
          if (v307 != v301 + 4)
          {
            unsigned int v334 = v301;
            memmove(&v307[-4 * v309], v301, v308);
            int64_t v301 = v334;
          }
          if (v479 != __srca) {
            memmove(v301, __srca, v479 - __srca);
          }
          goto LABEL_437;
        }
        unint64_t v302 = ((uint64_t)&v272[-v274] >> 2) + 1;
        if (v302 >> 62) {
          sub_1B4BB3244();
        }
        uint64_t v303 = (uint64_t)&v273[-v274];
        if (v303 >> 1 > v302) {
          unint64_t v302 = v303 >> 1;
        }
        if ((unint64_t)v303 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v302 = 0x3FFFFFFFFFFFFFFFLL;
        }
        unint64_t v480 = v302;
        if (v302)
        {
          if (v302 >> 62) {
            sub_1B4BB2D38();
          }
          unsigned int v304 = operator new(4 * v302);
          int64_t v301 = (unsigned char *)(v274 + ((unint64_t)&v275[-v274] & 0xFFFFFFFFFFFFFFFCLL));
        }
        else
        {
          unsigned int v304 = 0;
        }
        uint64_t v315 = &v304[4 * v300];
        *(_DWORD *)uint64_t v315 = *(_DWORD *)__srca;
        size_t v316 = v315 + 4;
        if (v275 != (char *)v274)
        {
          if (v299 - 4 < 0x3C)
          {
            unsigned int v317 = v301;
            goto LABEL_423;
          }
          unsigned int v317 = v301;
          if (v274 + (v299 & 0xFFFFFFFFFFFFFFFCLL) - (unint64_t)&v304[v299 & 0xFFFFFFFFFFFFFFFCLL] < 0x20) {
            goto LABEL_674;
          }
          unint64_t v318 = ((v299 - 4) >> 2) + 1;
          uint64_t v319 = 4 * (v318 & 0x7FFFFFFFFFFFFFF8);
          unsigned int v317 = &v301[-v319];
          v315 -= v319;
          uint64_t v320 = 4 * ((uint64_t)&v275[-v274] >> 2);
          size_t v321 = &v304[v320 - 16];
          unint64_t v322 = (long long *)(v274 + v320 - 16);
          uint64_t v323 = v318 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v324 = *v322;
            *(v321 - 1) = *(v322 - 1);
            *size_t v321 = v324;
            v321 -= 2;
            v322 -= 2;
            v323 -= 8;
          }
          while (v323);
          if (v318 != (v318 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_674:
            do
            {
LABEL_423:
              int v325 = *((_DWORD *)v317 - 1);
              v317 -= 4;
              *((_DWORD *)v315 - 1) = v325;
              v315 -= 4;
            }
            while (v317 != (char *)v274);
          }
        }
        size_t v326 = v272 - v301;
        if (v326) {
          memmove(v316, v301, v326);
        }
        v558 = v315;
        v559 = &v316[v326];
        v560 = &v304[4 * v480];
        uint64_t v86 = v474;
        unsigned int v255 = v490;
        if (v274) {
          operator delete((void *)v274);
        }
LABEL_437:
        operator delete(__srca);
        if (v516)
        {
          ((void (*)(void **__return_ptr))(*v523)[4])(v563);
          if ((void)v514 != *((void *)&v514 + 1))
          {
            if (*(char *)(v514 + 23) < 0)
            {
              sub_1B4BCA11C(v561, *(void **)v514, *(void *)(v514 + 8));
            }
            else
            {
              long long v335 = *(_OWORD *)v514;
              v562 = *(char **)(v514 + 16);
              *(_OWORD *)v561 = v335;
            }
            uint64_t v336 = MEMORY[0x1E4FBA498] + 64;
            v583[0] = MEMORY[0x1E4FBA498] + 64;
            *(void *)buf = v504;
            *(void *)&buf[*(void *)(v504 - 24)] = v502;
            unsigned int v337 = (std::ios_base *)&buf[*(void *)(*(void *)buf - 24)];
            std::ios_base::init(v337, v200);
            uint64_t v338 = MEMORY[0x1E4FBA498] + 24;
            v337[1].__vftable = 0;
            v337[1].__fmtflags_ = -1;
            *(void *)buf = v338;
            v583[0] = v336;
            std::streambuf::basic_streambuf();
            uint64_t v339 = MEMORY[0x1E4FBA470] + 16;
            *(void *)&buf[8] = MEMORY[0x1E4FBA470] + 16;
            long long v580 = 0u;
            long long v581 = 0u;
            LODWORD(v582) = 16;
            sub_1B4BB34F0(buf, (uint64_t)"\b", 1);
            if (SHIBYTE(v562) >= 0) {
              int64_t v340 = v561;
            }
            else {
              int64_t v340 = (void **)v561[0];
            }
            if (SHIBYTE(v562) >= 0) {
              uint64_t v341 = HIBYTE(v562);
            }
            else {
              uint64_t v341 = (uint64_t)v561[1];
            }
            sub_1B4BB34F0(buf, (uint64_t)v340, v341);
            sub_1B4BB34F0(buf, (uint64_t)"\b", 1);
            std::stringbuf::str();
            *(void *)buf = v496;
            *(void *)&buf[*(void *)(v496 - 24)] = v498;
            *(void *)&buf[8] = v339;
            if (SBYTE7(v581) < 0) {
              operator delete((void *)v580);
            }
            std::streambuf::~streambuf();
            std::ostream::~ostream();
            MEMORY[0x1BA992920](v201);
            MEMORY[0x1BA9928D0](&__dst);
            int locale = (char *)std::locale::use_facet(&__dst, MEMORY[0x1E4FBA258]);
            int64_t v568 = (int64_t)std::locale::use_facet(&__dst, MEMORY[0x1E4FBA280]);
            memset(v569, 0, sizeof(v569));
            sub_1B4C1D17C();
          }
          unsigned int v255 = v490;
          if (v564 < 0) {
            operator delete(v563[0]);
          }
        }
        unsigned int v342 = v558;
        if ((unint64_t)(v559 - (unsigned char *)v558) <= 8) {
          float v343 = 0.0;
        }
        else {
          float v343 = v267;
        }
        float v344 = *v483;
        v557 = 0;
        v555 = 0;
        v556 = 0;
        int64_t v345 = v559 - (unsigned char *)v558;
        if (v559 == v558)
        {
          uint64_t v346 = 0;
        }
        else
        {
          if (v345 < 0) {
            sub_1B4BB3244();
          }
          uint64_t v346 = (char *)operator new(v559 - (unsigned char *)v558);
          v555 = v346;
          v557 = &v346[4 * (v345 >> 2)];
          memcpy(v346, v342, v345);
          v556 = &v346[4 * (v345 >> 2)];
        }
        sub_1B4C2A340(v525, (uint64_t)&v555, v343 + v344);
        if (v346)
        {
          v556 = v346;
          operator delete(v346);
        }
        if (v558)
        {
          v559 = (char *)v558;
          operator delete(v558);
        }
        long long v268 = v483 + 2;
        if (v483 + 2 != __sza) {
          goto LABEL_366;
        }
        long long v268 = *(float **)v565;
        if (!*(void *)v565) {
          goto LABEL_363;
        }
LABEL_362:
        *(void *)&v565[8] = v268;
        operator delete(v268);
LABEL_363:
        uint64_t v207 = v466;
        if (v540[0])
        {
          v540[1] = v540[0];
          operator delete(v540[0]);
        }
LABEL_309:
        uint64_t v206 = v255 + 8;
        if (v206 != v465) {
          goto LABEL_310;
        }
        if ((int)v207 == (v527 - (unsigned char *)v526) >> 5) {
          goto LABEL_476;
        }
        sub_1B4C2A4D8(buf, (uint64_t)v526, (uint64_t)v527);
        int64_t v347 = (char *)v544[0];
        if (v544[0])
        {
          for (int k = (char *)v544[1]; k != v347; k -= 32)
          {
            unsigned int v349 = (void *)*((void *)k - 3);
            if (v349)
            {
              *((void *)k - 2) = v349;
              operator delete(v349);
            }
          }
          operator delete(v347);
        }
        *(_OWORD *)v544 = *(_OWORD *)buf;
        v545 = v573;
        uint64_t v199 = v464 + 1;
        if (v464 + 1 == v462) {
          goto LABEL_481;
        }
        goto LABEL_298;
      }
    }
    uint64_t v290 = v272;
    uint64_t v201 = v278;
    do
    {
LABEL_381:
      int v291 = *((_DWORD *)v290 - 1);
      v290 -= 4;
      *--unsigned int v286 = v291;
    }
    while (v290 != v279);
    goto LABEL_382;
  }
LABEL_481:
  sub_1B4C2A4D8(v570, (uint64_t)v526, (uint64_t)v527);
  long long v509 = 0uLL;
  v510 = 0;
  int v351 = *(char **)v570;
  int64_t v352 = *(char **)&v570[8];
  if (*(void *)v570 == *(void *)&v570[8])
  {
    unsigned int v360 = a3;
    if (!*(void *)v570) {
      goto LABEL_498;
    }
    goto LABEL_497;
  }
  unint64_t v353 = *(char **)v570;
  do
  {
    memset(buf, 0, sizeof(buf));
    v573 = 0;
    uint64_t v355 = (unsigned char *)*((void *)v353 + 1);
    unsigned int v354 = (unsigned char *)*((void *)v353 + 2);
    int64_t v356 = v354 - v355;
    if (v354 != v355)
    {
      if (v356 < 0) {
        sub_1B4BB3244();
      }
      uint64_t v357 = (char *)operator new(v354 - v355);
      uint64_t v358 = &v357[4 * (v356 >> 2)];
      *(void *)buf = v357;
      v573 = v358;
      memcpy(v357, v355, v356);
      *(void *)&buf[8] = v358;
    }
    uint64_t v359 = *((void *)&v509 + 1);
    if (*((void *)&v509 + 1) < (unint64_t)v510)
    {
      **((void **)&v509 + 1) = 0;
      *(void *)(v359 + 8) = 0;
      *(void *)(v359 + 16) = 0;
      *(_OWORD *)uint64_t v359 = *(_OWORD *)buf;
      *(void *)(v359 + 16) = v573;
      *((void *)&v509 + 1) = v359 + 24;
    }
    else
    {
      *((void *)&v509 + 1) = sub_1B4C2B938((char **)&v509, (uint64_t)buf);
      if (*(void *)buf)
      {
        *(void *)&buf[8] = *(void *)buf;
        operator delete(*(void **)buf);
      }
    }
    v353 += 32;
  }
  while (v353 != v352);
  unsigned int v360 = a3;
  if (v351)
  {
    do
    {
      uint64_t v361 = (void *)*((void *)v352 - 3);
      if (v361)
      {
        *((void *)v352 - 2) = v361;
        operator delete(v361);
      }
      v352 -= 32;
    }
    while (v352 != v351);
LABEL_497:
    operator delete(v351);
    unsigned int v360 = a3;
  }
LABEL_498:
  long long v362 = (char *)v544[0];
  if (v544[0])
  {
    for (int m = (char *)v544[1]; m != v362; m -= 32)
    {
      unint64_t v364 = (void *)*((void *)m - 3);
      if (v364)
      {
        *((void *)m - 2) = v364;
        operator delete(v364);
      }
    }
    operator delete(v362);
    unsigned int v360 = a3;
  }
  uint64_t v365 = (char *)*v360;
  if (*v360)
  {
    uint64_t v366 = (char *)v360[1];
    if (v366 != v365)
    {
      uint64_t v367 = v366;
      do
      {
        unsigned int v369 = (void *)*((void *)v367 - 3);
        v367 -= 24;
        uint64_t v368 = v369;
        if (v369)
        {
          *((void *)v366 - 2) = v368;
          operator delete(v368);
        }
        uint64_t v366 = v367;
      }
      while (v367 != v365);
    }
    operator delete(v365);
    unsigned int v360 = a3;
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  *(_OWORD *)unsigned int v360 = v509;
  v360[2] = v510;
  unint64_t v370 = (char *)v526;
  if (v526)
  {
    v371 = v527;
    uint64_t v372 = v526;
    if (v527 != v526)
    {
      do
      {
        unsigned int v373 = (void *)*((void *)v371 - 3);
        if (v373)
        {
          *((void *)v371 - 2) = v373;
          operator delete(v373);
        }
        v371 -= 32;
      }
      while (v371 != v370);
      uint64_t v372 = v526;
    }
    v527 = v370;
    operator delete(v372);
  }
  sub_1B4C0D264((uint64_t)&v513);
  uint64_t v110 = (char *)v531;
  if (v531)
  {
LABEL_633:
    v532 = v110;
    operator delete(v110);
  }
LABEL_634:
  v534 = &unk_1F0D54F90;
  int64x2_t v460 = v539;
  if (v539 && !atomic_fetch_add(&v539->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v460->__on_zero_shared)(v460);
    std::__shared_weak_count::__release_weak(v460);
  }
  if (v536)
  {
    *(void *)v537 = v536;
    operator delete(v536);
  }
}

void sub_1B4C06F30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *a63)
{
  sub_1B4BC8450((uint64_t)&STACK[0x470]);
  if (SLOBYTE(STACK[0x39F]) < 0) {
    operator delete((void *)STACK[0x388]);
  }

  sub_1B4C0D178((uint64_t)&a63);
  sub_1B4C07820(a10);
  if (STACK[0x260]) {
    operator delete((void *)STACK[0x260]);
  }
  sub_1B4BFF868(&STACK[0x278]);
  _Unwind_Resume(a1);
}

void **sub_1B4C07820(void **a1)
{
  uint64_t v2 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v2)
    {
      uint64_t v5 = (char *)a1[1];
      do
      {
        long long v7 = (void *)*((void *)v5 - 3);
        v5 -= 24;
        uint64_t v6 = v7;
        if (v7)
        {
          *((void *)v3 - 2) = v6;
          operator delete(v6);
        }
        uint64_t v3 = v5;
      }
      while (v5 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_1B4C07898(void *a1, uint64_t a2, unsigned int **a3)
{
  uint64_t v203 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = (int *)(a2 + 280);
  sub_1B4BFF580(a2 + 280);
  long long v7 = *a3;
  uint64_t v6 = a3[1];
  while (v7 != v6)
  {
    unsigned int v8 = *v7++;
    sub_1B4BFF90C(v5, v8);
  }
  uint64_t v9 = *(void *)(a2 + 552);
  char v86 = 12;
  strcpy((char *)&v85, "bridge_embed");
  unsigned int v87 = &unk_1F0D54F90;
  LODWORD(v88) = *(_DWORD *)(a2 + 464);
  uint64_t v90 = 0;
  long long v89 = 0uLL;
  int64_t v11 = *(unsigned char **)(a2 + 472);
  uint64_t v10 = *(unsigned char **)(a2 + 480);
  int64_t v12 = v10 - v11;
  if (v10 != v11)
  {
    if (v12 < 0) {
      sub_1B4BB3244();
    }
    *(void *)&long long v89 = operator new(v10 - v11);
    uint64_t v90 = v89 + 8 * (v12 >> 3);
    memcpy((void *)v89, v11, v12);
    *((void *)&v89 + 1) = v90;
  }
  uint64_t v13 = *(void *)(a2 + 504);
  uint64_t v91 = *(void *)(a2 + 496);
  uint64_t v92 = v13;
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
  }
  HIBYTE(v94) = 11;
  strcpy((char *)&v93, "caption_ids");
  *(void *)&long long v95 = &unk_1F0D54F90;
  DWORD2(v95) = *(_DWORD *)(a2 + 296);
  uint64_t v97 = 0;
  unsigned int v98 = 0;
  uint64_t v96 = 0;
  uint64_t v15 = *(unsigned char **)(a2 + 304);
  uint64_t v14 = *(unsigned char **)(a2 + 312);
  int64_t v16 = v14 - v15;
  if (v14 != v15)
  {
    if (v16 < 0) {
      sub_1B4BB3244();
    }
    uint64_t v96 = operator new(v14 - v15);
    unsigned int v98 = (char *)v96 + 8 * (v16 >> 3);
    memcpy(v96, v15, v16);
    uint64_t v97 = v98;
  }
  unsigned int v17 = *(std::__shared_weak_count **)(a2 + 336);
  uint64_t v99 = *(void *)(a2 + 328);
  size_t v100 = v17;
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v101[23] = 16;
  strcpy(v101, "caption_ids_mask");
  long long v102 = &unk_1F0D54F90;
  int v103 = *(_DWORD *)(a2 + 352);
  uint64_t v105 = 0;
  unint64_t v106 = 0;
  uint64_t v104 = 0;
  unint64_t v19 = *(unsigned char **)(a2 + 360);
  uint64_t v18 = *(unsigned char **)(a2 + 368);
  int64_t v20 = v18 - v19;
  if (v18 != v19)
  {
    if (v20 < 0) {
      sub_1B4BB3244();
    }
    uint64_t v104 = operator new(v18 - v19);
    unint64_t v106 = (char *)v104 + 8 * (v20 >> 3);
    memcpy(v104, v19, v20);
    uint64_t v105 = v106;
  }
  uint64_t v21 = *(std::__shared_weak_count **)(a2 + 392);
  uint64_t v107 = *(void *)(a2 + 384);
  unsigned int v108 = v21;
  if (v21) {
    atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v109[23] = 19;
  strcpy(v109, "caption_causal_mask");
  uint64_t v110 = &unk_1F0D54F90;
  int v111 = *(_DWORD *)(a2 + 408);
  int v113 = 0;
  char v114 = 0;
  std::__fs::filesystem::path __p = 0;
  uint64_t v23 = *(unsigned char **)(a2 + 416);
  unint64_t v22 = *(unsigned char **)(a2 + 424);
  int64_t v24 = v22 - v23;
  if (v22 != v23)
  {
    if (v24 < 0) {
      sub_1B4BB3244();
    }
    std::__fs::filesystem::path __p = operator new(v22 - v23);
    char v114 = (char *)__p + 8 * (v24 >> 3);
    memcpy(__p, v23, v24);
    int v113 = v114;
  }
  uint64_t v25 = *(std::__shared_weak_count **)(a2 + 448);
  uint64_t v115 = *(void *)(a2 + 440);
  unint64_t v116 = v25;
  if (v25) {
    atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(v188, 0, sizeof(v188));
  LODWORD(v189) = 1065353216;
  sub_1B4C0D430((uint64_t)v188, (uint64_t)&v85, &v85);
  sub_1B4C0D430((uint64_t)v188, (uint64_t)&v93, &v93);
  sub_1B4C0D430((uint64_t)v188, (uint64_t)v101, (long long *)v101);
  sub_1B4C0D430((uint64_t)v188, (uint64_t)v109, (long long *)v109);
  uint64_t v110 = &unk_1F0D54F90;
  uint64_t v26 = v116;
  if (v116 && !atomic_fetch_add(&v116->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
  }
  if (__p)
  {
    int v113 = __p;
    operator delete(__p);
  }
  if ((v109[23] & 0x80000000) != 0) {
    operator delete(*(void **)v109);
  }
  long long v102 = &unk_1F0D54F90;
  long long v27 = v108;
  if (v108 && !atomic_fetch_add(&v108->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
  }
  if (v104)
  {
    uint64_t v105 = v104;
    operator delete(v104);
  }
  if ((v101[23] & 0x80000000) != 0) {
    operator delete(*(void **)v101);
  }
  *(void *)&long long v95 = &unk_1F0D54F90;
  int64_t v28 = v100;
  if (v100 && !atomic_fetch_add(&v100->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
  }
  if (v96)
  {
    uint64_t v97 = v96;
    operator delete(v96);
  }
  if (SHIBYTE(v94) < 0) {
    operator delete((void *)v93);
  }
  unsigned int v87 = &unk_1F0D54F90;
  long long v29 = (std::__shared_weak_count *)v92;
  if (v92 && !atomic_fetch_add((atomic_ullong *volatile)(v92 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
    std::__shared_weak_count::__release_weak(v29);
  }
  if ((void)v89)
  {
    *((void *)&v89 + 1) = v89;
    operator delete((void *)v89);
  }
  if (v86 < 0) {
    operator delete((void *)v85);
  }
  sub_1B4C092CC((uint64_t)&v74, v9, (uint64_t)v188, a2 + 184);
  sub_1B4C0CAF4((uint64_t)v188);
  uint64_t v30 = *(int *)(a2 + 220);
  uint64_t v31 = (*(uint64_t (**)(void))(**(void **)(a2 + 560) + 88))(*(void *)(a2 + 560));
  if (v75 != 1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Incorrect data type requested.");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v32 = v31;
  uint64_t v33 = (*(uint64_t (**)(uint64_t))(*(void *)v78 + 24))(v78);
  int v70 = 0;
  uint64_t v71 = v30;
  uint64_t v72 = v32;
  uint64_t v73 = v33;
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  uint64_t v34 = *v5 - 1;
  uint64_t v82 = v81;
  uint64_t v83 = v34;
  uint64_t v80 = v33;
  v81[0] = &unk_1F0D55680;
  v81[1] = &v70;
  uint64_t v84 = v32;
  sub_1B4BFA2E0(&v122, v34, 0, v33, (uint64_t)v81);
  sub_1B4BFA2E0(&v117, v83, v84, v80, (uint64_t)v81);
  uint64_t v35 = (uint64_t)v124;
  uint64_t v132 = v122;
  if (!v124) {
    goto LABEL_55;
  }
  if (v124 != v123)
  {
    uint64_t v35 = (*(uint64_t (**)(void))(*v124 + 16))();
LABEL_55:
    unint64_t v134 = (void *)v35;
    goto LABEL_57;
  }
  unint64_t v134 = v133;
  (*(void (**)(void))(*v124 + 24))();
LABEL_57:
  long long v135 = v125;
  uint64_t v136 = v126;
  uint64_t v36 = (uint64_t)v119;
  uint64_t v127 = v117;
  if (!v119)
  {
LABEL_60:
    uint64_t v129 = (void *)v36;
    goto LABEL_62;
  }
  if (v119 != v118)
  {
    uint64_t v36 = (*(uint64_t (**)(void))(*v119 + 16))();
    goto LABEL_60;
  }
  uint64_t v129 = v128;
  (*(void (**)(void))(*v119 + 24))();
LABEL_62:
  long long v130 = v120;
  uint64_t v131 = v121;
  uint64_t v148 = v132;
  float v37 = &v148;
  if (!v134)
  {
LABEL_65:
    v37[4] = 0;
    goto LABEL_67;
  }
  if (v134 != v133)
  {
    float v37 = &v132;
    float32x4_t v150 = v134;
    goto LABEL_65;
  }
  float32x4_t v150 = v149;
  (*(void (**)(void *, void *))(v133[0] + 24))(v133, v149);
LABEL_67:
  long long v151 = v135;
  uint64_t v152 = v136;
  uint64_t v143 = v127;
  if (!v129)
  {
    unint64_t v38 = &v145;
    goto LABEL_71;
  }
  if (v129 != v128)
  {
    unint64_t v38 = &v129;
    unint64_t v145 = v129;
LABEL_71:
    void *v38 = 0;
    goto LABEL_73;
  }
  unint64_t v145 = v144;
  (*(void (**)(void *, void *))(v128[0] + 24))(v128, v144);
LABEL_73:
  long long v146 = v130;
  uint64_t v147 = v131;
  uint64_t v158 = v148;
  uint64_t v39 = &v158;
  if (!v150)
  {
LABEL_76:
    v39[4] = 0;
    goto LABEL_78;
  }
  if (v150 != v149)
  {
    uint64_t v39 = &v148;
    float v160 = v150;
    goto LABEL_76;
  }
  float v160 = v159;
  (*(void (**)(void *, void *))(v149[0] + 24))(v149, v159);
LABEL_78:
  long long v161 = v151;
  uint64_t v162 = v152;
  uint64_t v153 = v143;
  size_t v40 = &v153;
  if (!v145)
  {
LABEL_81:
    v40[4] = 0;
    goto LABEL_83;
  }
  if (v145 != v144)
  {
    size_t v40 = &v143;
    float v155 = v145;
    goto LABEL_81;
  }
  float v155 = v154;
  (*(void (**)(void *, void *))(v144[0] + 24))(v144, v154);
LABEL_83:
  long long v156 = v146;
  uint64_t v157 = v147;
  uint64_t v41 = (uint64_t)v160;
  uint64_t v198 = v158;
  if (!v160)
  {
LABEL_86:
    unsigned int v200 = (void *)v41;
    goto LABEL_88;
  }
  if (v160 != v159)
  {
    uint64_t v41 = (*(uint64_t (**)(void *))(*v160 + 16))(v160);
    goto LABEL_86;
  }
  unsigned int v200 = v199;
  (*(void (**)(void *, void *))(v159[0] + 24))(v159, v199);
LABEL_88:
  long long v201 = v161;
  uint64_t v202 = v162;
  uint64_t v193 = v153;
  uint64_t v42 = &v193;
  if (!v155)
  {
LABEL_91:
    v42[4] = 0;
    goto LABEL_93;
  }
  if (v155 != v154)
  {
    uint64_t v42 = &v153;
    unsigned int v195 = v155;
    goto LABEL_91;
  }
  unsigned int v195 = v194;
  (*(void (**)(void *, void *))(v154[0] + 24))(v154, v194);
LABEL_93:
  long long v196 = v156;
  uint64_t v197 = v157;
  sub_1B4BFA658((uint64_t)&v198, (uint64_t)&v193, (uint64_t)&v85);
  if (v195 != v194)
  {
    if (v195) {
      (*(void (**)(void *))(*v195 + 40))(v195);
    }
    unint64_t v43 = v200;
    if (v200 != v199) {
      goto LABEL_97;
    }
LABEL_100:
    (*(void (**)(void *))(v199[0] + 32))(v199);
    goto LABEL_101;
  }
  (*(void (**)(void *))(v194[0] + 32))(v194);
  unint64_t v43 = v200;
  if (v200 == v199) {
    goto LABEL_100;
  }
LABEL_97:
  if (v43) {
    (*(void (**)(void *))(*v43 + 40))(v43);
  }
LABEL_101:
  uint64_t v183 = v85;
  int64_t v44 = (long long *)&v183;
  if (!v88)
  {
LABEL_104:
    *((void *)v44 + 4) = 0;
    goto LABEL_106;
  }
  int64_t v44 = &v85;
  if (v88 != (long long *)((char *)&v85 + 8))
  {
    unsigned int v185 = v88;
    goto LABEL_104;
  }
  unsigned int v185 = (long long *)v184;
  (*(void (**)(void))(*(void *)v88 + 24))();
LABEL_106:
  long long v186 = v89;
  uint64_t v45 = v91;
  uint64_t v187 = v90;
  uint64_t v178 = v91;
  if (v94)
  {
    if (v94 == &v92)
    {
      unint64_t v180 = v179;
      (*(void (**)(void))(*v94 + 24))();
      uint64_t v45 = v178;
    }
    else
    {
      unint64_t v180 = v94;
      unsigned int v94 = 0;
    }
  }
  else
  {
    unint64_t v180 = 0;
  }
  long long v181 = v95;
  size_t v182 = v96;
  float v163 = a1;
  if (v183 != v45 || v186 != v181)
  {
    uint64_t v46 = v187;
    uint64_t v45 = v183;
    do
    {
      sub_1B4C1AA14((uint64_t *)&v163, *(float *)(v45 + 4 * v46));
      uint64_t v168 = ++*((void *)&v186 + 1);
      uint64_t v173 = v186;
      if (!v185) {
        sub_1B4BE345C();
      }
      uint64_t v46 = (*(uint64_t (**)(long long *, uint64_t *, uint64_t *))(*(void *)v185 + 48))(v185, &v173, &v168);
      uint64_t v187 = v46;
      uint64_t v45 = v183;
    }
    while (v183 != v178 || v186 != v181);
  }
  v188[0] = v45;
  unint64_t v47 = v188;
  if (!v185) {
    goto LABEL_120;
  }
  if (v185 != (long long *)v184)
  {
    unint64_t v47 = &v183;
    uint64_t v189 = v185;
LABEL_120:
    v47[4] = 0;
    goto LABEL_122;
  }
  uint64_t v189 = (long long *)&v188[1];
  (*(void (**)(void *, void *))(v184[0] + 24))(v184, &v188[1]);
LABEL_122:
  long long v190 = v186;
  uint64_t v191 = v187;
  uint64_t v192 = (uint64_t)v163;
  if (v180 == v179)
  {
    (*(void (**)(void *))(v179[0] + 32))(v179);
    uint64_t v48 = v185;
    if (v185 != (long long *)v184) {
      goto LABEL_126;
    }
  }
  else
  {
    if (v180) {
      (*(void (**)(void))(*v180 + 40))();
    }
    uint64_t v48 = v185;
    if (v185 != (long long *)v184)
    {
LABEL_126:
      if (v48) {
        (*(void (**)(long long *))(*(void *)v48 + 40))(v48);
      }
      uint64_t v49 = v160;
      uint64_t v168 = v158;
      if (v160) {
        goto LABEL_129;
      }
LABEL_133:
      int32x2_t v170 = 0;
      goto LABEL_135;
    }
  }
  (*(void (**)(void *))(v184[0] + 32))(v184);
  uint64_t v49 = v160;
  uint64_t v168 = v158;
  if (!v160) {
    goto LABEL_133;
  }
LABEL_129:
  if (v49 == v159)
  {
    int32x2_t v170 = v169;
    (*(void (**)(void *, void *))(v159[0] + 24))(v159, v169);
  }
  else
  {
    int32x2_t v170 = v49;
    float v160 = 0;
  }
LABEL_135:
  long long v171 = v161;
  uint64_t v172 = v162;
  float v163 = (void *)v188[0];
  if (!v189)
  {
    uint64_t v50 = &v165;
    goto LABEL_139;
  }
  if (v189 != (long long *)&v188[1])
  {
    uint64_t v50 = &v189;
    uint64_t v165 = v189;
LABEL_139:
    *uint64_t v50 = 0;
    goto LABEL_141;
  }
  uint64_t v165 = (long long *)v164;
  (*(void (**)(void *, void *))(v188[1] + 24))(&v188[1], v164);
LABEL_141:
  long long v166 = v190;
  uint64_t v167 = v191;
  sub_1B4BFAA88((uint64_t)&v168, (uint64_t)&v163, (uint64_t)&v173);
  uint64_t v51 = v192;
  uint64_t v137 = v173;
  if (v175)
  {
    if (v175 == v174)
    {
      uint64_t v139 = v138;
      (*(void (**)(void))(*v175 + 24))();
    }
    else
    {
      uint64_t v139 = v175;
      float32x4_t v175 = 0;
    }
  }
  else
  {
    uint64_t v139 = 0;
  }
  long long v140 = v176;
  uint64_t v141 = v177;
  uint64_t v142 = v51;
  if (v175 == v174)
  {
    (*(void (**)(void *))(v174[0] + 32))(v174);
    int v52 = v165;
    if (v165 != (long long *)v164) {
      goto LABEL_150;
    }
LABEL_197:
    (*(void (**)(void *))(v164[0] + 32))(v164);
    int64_t v53 = v170;
    if (v170 != v169) {
      goto LABEL_153;
    }
LABEL_198:
    (*(void (**)(void *))(v169[0] + 32))(v169);
    uint64_t v54 = v189;
    if (v189 != (long long *)&v188[1]) {
      goto LABEL_156;
    }
LABEL_199:
    (*(void (**)(void *))(v188[1] + 32))(&v188[1]);
    int v55 = v94;
    if (v94 != &v92) {
      goto LABEL_159;
    }
LABEL_200:
    (*(void (**)(uint64_t *))(v92 + 32))(&v92);
    uint64_t v56 = v88;
    if (v88 != (long long *)((char *)&v85 + 8)) {
      goto LABEL_162;
    }
LABEL_201:
    (*(void (**)(char *))(*((void *)&v85 + 1) + 32))((char *)&v85 + 8);
    uint64_t v57 = v155;
    if (v155 != v154) {
      goto LABEL_165;
    }
LABEL_202:
    (*(void (**)(void *))(v154[0] + 32))(v154);
    unsigned int v58 = v160;
    if (v160 != v159) {
      goto LABEL_168;
    }
LABEL_203:
    (*(void (**)(void *))(v159[0] + 32))(v159);
    unsigned int v59 = v145;
    if (v145 != v144) {
      goto LABEL_171;
    }
LABEL_204:
    (*(void (**)(void *))(v144[0] + 32))(v144);
    uint64_t v60 = v150;
    if (v150 != v149) {
      goto LABEL_174;
    }
LABEL_205:
    (*(void (**)(void *))(v149[0] + 32))(v149);
    unint64_t v61 = v139;
    if (v139 != v138) {
      goto LABEL_177;
    }
LABEL_206:
    (*(void (**)(void *))(v138[0] + 32))(v138);
    unint64_t v62 = v129;
    if (v129 != v128) {
      goto LABEL_180;
    }
LABEL_207:
    (*(void (**)(void *))(v128[0] + 32))(v128);
    unsigned int v63 = v134;
    if (v134 != v133) {
      goto LABEL_183;
    }
LABEL_208:
    (*(void (**)(void *))(v133[0] + 32))(v133);
    int64_t v64 = v119;
    if (v119 != v118) {
      goto LABEL_186;
    }
LABEL_209:
    (*(void (**)(void *))(v118[0] + 32))(v118);
    unint64_t v65 = v124;
    if (v124 != v123) {
      goto LABEL_189;
    }
LABEL_210:
    (*(void (**)(void *))(v123[0] + 32))(v123);
    uint64_t v66 = v82;
    if (v82 != v81) {
      goto LABEL_192;
    }
LABEL_211:
    (*(void (**)(void *))(v81[0] + 32))(v81);
    uint64_t v74 = &unk_1F0D54F90;
    uint64_t v67 = v79;
    if (!v79) {
      goto LABEL_214;
    }
    goto LABEL_212;
  }
  if (v175) {
    (*(void (**)(void))(*v175 + 40))();
  }
  int v52 = v165;
  if (v165 == (long long *)v164) {
    goto LABEL_197;
  }
LABEL_150:
  if (v52) {
    (*(void (**)(long long *))(*(void *)v52 + 40))(v52);
  }
  int64_t v53 = v170;
  if (v170 == v169) {
    goto LABEL_198;
  }
LABEL_153:
  if (v53) {
    (*(void (**)(void *))(*v53 + 40))(v53);
  }
  uint64_t v54 = v189;
  if (v189 == (long long *)&v188[1]) {
    goto LABEL_199;
  }
LABEL_156:
  if (v54) {
    (*(void (**)(long long *))(*(void *)v54 + 40))(v54);
  }
  int v55 = v94;
  if (v94 == &v92) {
    goto LABEL_200;
  }
LABEL_159:
  if (v55) {
    (*(void (**)(uint64_t *))(*v55 + 40))(v55);
  }
  uint64_t v56 = v88;
  if (v88 == (long long *)((char *)&v85 + 8)) {
    goto LABEL_201;
  }
LABEL_162:
  if (v56) {
    (*(void (**)(long long *))(*(void *)v56 + 40))(v56);
  }
  uint64_t v57 = v155;
  if (v155 == v154) {
    goto LABEL_202;
  }
LABEL_165:
  if (v57) {
    (*(void (**)(void *))(*v57 + 40))(v57);
  }
  unsigned int v58 = v160;
  if (v160 == v159) {
    goto LABEL_203;
  }
LABEL_168:
  if (v58) {
    (*(void (**)(void *))(*v58 + 40))(v58);
  }
  unsigned int v59 = v145;
  if (v145 == v144) {
    goto LABEL_204;
  }
LABEL_171:
  if (v59) {
    (*(void (**)(void *))(*v59 + 40))(v59);
  }
  uint64_t v60 = v150;
  if (v150 == v149) {
    goto LABEL_205;
  }
LABEL_174:
  if (v60) {
    (*(void (**)(void *))(*v60 + 40))(v60);
  }
  unint64_t v61 = v139;
  if (v139 == v138) {
    goto LABEL_206;
  }
LABEL_177:
  if (v61) {
    (*(void (**)(void *))(*v61 + 40))(v61);
  }
  unint64_t v62 = v129;
  if (v129 == v128) {
    goto LABEL_207;
  }
LABEL_180:
  if (v62) {
    (*(void (**)(void *))(*v62 + 40))(v62);
  }
  unsigned int v63 = v134;
  if (v134 == v133) {
    goto LABEL_208;
  }
LABEL_183:
  if (v63) {
    (*(void (**)(void *))(*v63 + 40))(v63);
  }
  int64_t v64 = v119;
  if (v119 == v118) {
    goto LABEL_209;
  }
LABEL_186:
  if (v64) {
    (*(void (**)(void *))(*v64 + 40))(v64);
  }
  unint64_t v65 = v124;
  if (v124 == v123) {
    goto LABEL_210;
  }
LABEL_189:
  if (v65) {
    (*(void (**)(void *))(*v65 + 40))(v65);
  }
  uint64_t v66 = v82;
  if (v82 == v81) {
    goto LABEL_211;
  }
LABEL_192:
  if (v66) {
    (*(void (**)(void *))(*v66 + 40))(v66);
  }
  uint64_t v74 = &unk_1F0D54F90;
  uint64_t v67 = v79;
  if (v79)
  {
LABEL_212:
    if (!atomic_fetch_add(&v67->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
LABEL_214:
  if (v76)
  {
    uint64_t v77 = v76;
    operator delete(v76);
  }
}

void sub_1B4C090B0(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_1B4BB21F0(a1);
  }
  _Unwind_Resume(a1);
}

void sub_1B4C092CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  if (*(char *)(a4 + 23) < 0)
  {
    sub_1B4BCA11C(__dst, *(void **)a4, *(void *)(a4 + 8));
  }
  else
  {
    *(_OWORD *)std::locale __dst = *(_OWORD *)a4;
    uint64_t v24 = *(void *)(a4 + 16);
  }
  sub_1B4BFB4EC(&__p, (uint64_t)__dst, 1uLL);
  sub_1B4C0A928(a2, a3, (long long **)&__p, (uint64_t)v22);
  unsigned int v8 = sub_1B4C0CBF0(v22, a4);
  uint64_t v9 = v8;
  if (!v8) {
    sub_1B4BC8D14("unordered_map::at: key not found");
  }
  *(void *)a1 = &unk_1F0D54F90;
  int v10 = *((_DWORD *)v8 + 12);
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 8) = v10;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  int64_t v12 = (unsigned char *)v8[7];
  int64_t v11 = (unsigned char *)v8[8];
  int64_t v13 = v11 - v12;
  if (v11 != v12)
  {
    if (v13 < 0) {
      sub_1B4BB3244();
    }
    uint64_t v14 = (char *)operator new(v11 - v12);
    *(void *)(a1 + 16) = v14;
    *(void *)(a1 + 24) = v14;
    uint64_t v15 = &v14[8 * (v13 >> 3)];
    *(void *)(a1 + 32) = v15;
    memcpy(v14, v12, v13);
    *(void *)(a1 + 24) = v15;
  }
  *(void *)(a1 + 4sub_1B4BC92E4(&a9, 0) = v9[10];
  uint64_t v16 = v9[11];
  *(void *)(a1 + 48) = v16;
  if (v16) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)a1 = &unk_1F0D54E50;
  sub_1B4C0CAF4((uint64_t)v22);
  unsigned int v17 = (void **)__p;
  if (__p)
  {
    uint64_t v18 = v21;
    unint64_t v19 = __p;
    if (v21 != __p)
    {
      do
      {
        if (*((char *)v18 - 1) < 0) {
          operator delete(*(v18 - 3));
        }
        v18 -= 3;
      }
      while (v18 != v17);
      unint64_t v19 = __p;
    }
    uint64_t v21 = v17;
    operator delete(v19);
  }
  if (SHIBYTE(v24) < 0) {
    operator delete(__dst[0]);
  }
}

void sub_1B4C094C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1B4C09514(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 120);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 128);
    uint64_t v4 = *(void **)(a1 + 120);
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = *(void **)(v3 - 24);
        if (v5)
        {
          *(void *)(v3 - 16) = v5;
          operator delete(v5);
        }
        v3 -= 32;
      }
      while (v3 != v2);
      uint64_t v4 = *(void **)(a1 + 120);
    }
    *(void *)(a1 + 128) = v2;
    operator delete(v4);
  }
  return sub_1B4C0D264(a1);
}

void *sub_1B4C09598(void *a1)
{
  *a1 = &unk_1F0D54F90;
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (void *)a1[2];
    if (!v3) {
      return a1;
    }
    goto LABEL_4;
  }
  uint64_t v3 = (void *)a1[2];
  if (v3)
  {
LABEL_4:
    a1[3] = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_1B4C0963C(void *a1)
{
  *a1 = &unk_1F0D54F90;
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (void *)a1[2];
    if (!v3)
    {
LABEL_5:
      JUMPOUT(0x1BA9929C0);
    }
  }
  else
  {
    uint64_t v3 = (void *)a1[2];
    if (!v3) {
      goto LABEL_5;
    }
  }
  a1[3] = v3;
  operator delete(v3);
  goto LABEL_5;
}

void sub_1B4C09700(void *a1)
{
  *a1 = &unk_1F0D54F90;
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (void *)a1[2];
    if (!v3)
    {
LABEL_5:
      JUMPOUT(0x1BA9929C0);
    }
  }
  else
  {
    uint64_t v3 = (void *)a1[2];
    if (!v3) {
      goto LABEL_5;
    }
  }
  a1[3] = v3;
  operator delete(v3);
  goto LABEL_5;
}

uint64_t sub_1B4C097C4@<X0>(int32x4_t **a1@<X0>, uint64_t a2@<X8>, int32x2_t a3@<D0>)
{
  int v30 = 1;
  sub_1B4C099A4(a2, &v30, (uint64_t)a1);
  if (*(_DWORD *)(a2 + 8) != 1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Incorrect data type requested.");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a2 + 40) + 24))(*(void *)(a2 + 40));
  long long v7 = *a1;
  uint64_t v6 = (char *)a1[1];
  if (*a1 == (int32x4_t *)v6) {
    return result;
  }
  unint64_t v8 = v6 - (char *)v7 - 8;
  if (v8 >= 0x38)
  {
    uint64_t v11 = (v8 >> 3) + 1;
    int v10 = (int32x4_t *)((char *)v7 + 8 * (v11 & 0x3FFFFFFFFFFFFFF8));
    int64_t v12 = v7 + 2;
    v13.i64[0] = 0x100000001;
    v13.i64[1] = 0x100000001;
    uint64_t v14 = v11 & 0x3FFFFFFFFFFFFFF8;
    v15.i64[0] = 0x100000001;
    v15.i64[1] = 0x100000001;
    do
    {
      int32x4_t v17 = v12[-2];
      int32x4_t v16 = v12[-1];
      int32x4_t v19 = *v12;
      int32x4_t v18 = v12[1];
      v12 += 4;
      int32x4_t v13 = vmulq_s32(v13, vuzp1q_s32(v17, v16));
      int32x4_t v15 = vmulq_s32(v15, vuzp1q_s32(v19, v18));
      v14 -= 8;
    }
    while (v14);
    int8x16_t v20 = (int8x16_t)vmulq_s32(v15, v13);
    *(int32x2_t *)v20.i8 = vmul_s32(*(int32x2_t *)v20.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v20, v20, 8uLL));
    signed int v9 = v20.i32[0] * v20.i32[1];
    if (v11 == (v11 & 0x3FFFFFFFFFFFFFF8)) {
      goto LABEL_9;
    }
  }
  else
  {
    signed int v9 = 1;
    int v10 = *a1;
  }
  do
  {
    __int32 v21 = v10->i32[0];
    int v10 = (int32x4_t *)((char *)v10 + 8);
    v9 *= v21;
  }
  while (v10 != (int32x4_t *)v6);
LABEL_9:
  if (!v9) {
    return result;
  }
  if (v9 < 8)
  {
    unint64_t v22 = 0;
LABEL_15:
    unint64_t v26 = v9 - v22;
    long long v27 = (_DWORD *)(result + 4 * v22);
    do
    {
      *v27++ = a3.i32[0];
      --v26;
    }
    while (v26);
    return result;
  }
  unint64_t v22 = v9 & 0xFFFFFFFFFFFFFFF8;
  int32x4_t v23 = vdupq_lane_s32(a3, 0);
  uint64_t v24 = (int32x4_t *)(result + 16);
  unint64_t v25 = v22;
  do
  {
    v24[-1] = v23;
    *uint64_t v24 = v23;
    v24 += 2;
    v25 -= 8;
  }
  while (v25);
  if (v22 != v9) {
    goto LABEL_15;
  }
  return result;
}

void sub_1B4C09974(_Unwind_Exception *a1)
{
  __cxa_free_exception(v2);
  sub_1B4BFF868(v1);
  _Unwind_Resume(a1);
}

void sub_1B4C09990(_Unwind_Exception *a1)
{
  sub_1B4BFF868(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1B4C099A4(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t v6 = (std::__shared_weak_count *)operator new(0xD0uLL);
  v6->__shared_owners_ = 0;
  v6->__shared_weak_owners_ = 0;
  v6->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0D55BE0;
  sub_1B4C09C24((uint64_t)&v6[1], a2, (int32x4_t **)a3);
  *(void *)a1 = &unk_1F0D54F90;
  int v7 = *a2;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 8) = v7;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  unint64_t v8 = *(int32x4_t **)a3;
  int64_t v9 = *(void *)(a3 + 8) - *(void *)a3;
  if (v9)
  {
    if (v9 < 0) {
      sub_1B4BB3244();
    }
    int v10 = (char *)operator new(v9);
    *(void *)(a1 + 16) = v10;
    *(void *)(a1 + 24) = v10;
    uint64_t v11 = &v10[8 * (v9 >> 3)];
    *(void *)(a1 + 32) = v11;
    memcpy(v10, v8, v9);
    *(void *)(a1 + 24) = v11;
  }
  *(void *)(a1 + 4sub_1B4BC92E4(&a9, 0) = v6 + 1;
  *(void *)(a1 + 48) = v6;
  atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  *(void *)a1 = &unk_1F0D54E50;
  return a1;
}

void sub_1B4C09B54(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_1B4C09B6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v14 = *v12;
  if (*v12)
  {
    *(void *)(v11 + 24) = v14;
    operator delete(v14);
  }
  sub_1B4C035DC((uint64_t)&a11);
  sub_1B4C035DC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1B4C09B98(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0D55BE0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1B4C09BB8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0D55BE0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1BA9929C0);
}

void sub_1B4C09C0C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 201)) {
    free(*(void **)(a1 + 32));
  }
}

uint64_t sub_1B4C09C24(uint64_t a1, _DWORD *a2, int32x4_t **a3)
{
  long long v27 = 0u;
  espresso_buffer_pack_tensor_shape();
  if (!*a2)
  {
    int v6 = 1;
    unint64_t v8 = *a3;
    int v7 = a3[1];
    if (*a3 != v7) {
      goto LABEL_4;
    }
LABEL_7:
    int v12 = 0;
    goto LABEL_13;
  }
  if (*a2 != 1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Unknown data type");
    goto LABEL_22;
  }
  int v6 = 4;
  unint64_t v8 = *a3;
  int v7 = a3[1];
  if (*a3 == v7) {
    goto LABEL_7;
  }
LABEL_4:
  unint64_t v9 = (char *)v7 - (char *)v8 - 8;
  if (v9 >= 0x38)
  {
    uint64_t v13 = (v9 >> 3) + 1;
    uint64_t v11 = (int32x4_t *)((char *)v8 + 8 * (v13 & 0x3FFFFFFFFFFFFFF8));
    uint64_t v14 = v8 + 2;
    v15.i64[0] = 0x100000001;
    v15.i64[1] = 0x100000001;
    uint64_t v16 = v13 & 0x3FFFFFFFFFFFFFF8;
    v17.i64[0] = 0x100000001;
    v17.i64[1] = 0x100000001;
    do
    {
      int32x4_t v19 = v14[-2];
      int32x4_t v18 = v14[-1];
      int32x4_t v21 = *v14;
      int32x4_t v20 = v14[1];
      v14 += 4;
      int32x4_t v15 = vmulq_s32(v15, vuzp1q_s32(v19, v18));
      int32x4_t v17 = vmulq_s32(v17, vuzp1q_s32(v21, v20));
      v16 -= 8;
    }
    while (v16);
    int8x16_t v22 = (int8x16_t)vmulq_s32(v17, v15);
    *(int32x2_t *)v22.i8 = vmul_s32(*(int32x2_t *)v22.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v22, v22, 8uLL));
    int v10 = v22.i32[0] * v22.i32[1];
    if (v13 == (v13 & 0x3FFFFFFFFFFFFFF8)) {
      goto LABEL_12;
    }
  }
  else
  {
    int v10 = 1;
    uint64_t v11 = v8;
  }
  do
  {
    int v23 = v11->i32[0];
    uint64_t v11 = (int32x4_t *)((char *)v11 + 8);
    v10 *= v23;
  }
  while (v11 != v7);
LABEL_12:
  int v12 = v10;
LABEL_13:
  memptr = 0;
  if (malloc_type_posix_memalign(&memptr, 0x1000uLL, (v12 * (uint64_t)v6 + 4095) & 0xFFFFFFFFFFFFF000, 0x7AADF4F3uLL))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Failed to allocate aligned memory.");
    goto LABEL_22;
  }
  *(void *)&long long v27 = memptr;
  if (!*a2)
  {
    unsigned int v24 = 262152;
    goto LABEL_18;
  }
  if (*a2 != 1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Unknown data type.");
LABEL_22:
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  unsigned int v24 = 65568;
LABEL_18:
  *(_OWORD *)(a1 + 12sub_1B4BC92E4(&a9, 0) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 8) = v27;
  *(_OWORD *)(a1 + 24) = 0u;
  *(void *)a1 = &unk_1F0D54F30;
  *(_OWORD *)(a1 + 4sub_1B4BC92E4(&a9, 0) = 0u;
  *(void *)(a1 + 168) = v24;
  *(_WORD *)(a1 + 176) = 257;
  return a1;
}

void sub_1B4C09E88(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1B4C09E9C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1B4C09EB0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1B4C09EC4(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 177)) {
    free(*(void **)(a1 + 8));
  }
  return a1;
}

void sub_1B4C09EF8(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 177)) {
    free(*(void **)(a1 + 8));
  }
  JUMPOUT(0x1BA9929C0);
}

uint64_t sub_1B4C09F4C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 32))(a2, a1 + 8);
}

uint64_t sub_1B4C09F7C(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

unint64_t sub_1B4C09F98@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  unint64_t result = espresso_buffer_get_rank();
  unint64_t v5 = result;
  if (result >= 6)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v19, v5);
    uint64_t v14 = std::string::insert(&v19, 0, "Unsupported tensor rank: ");
    int8x16_t v15 = *(int8x16_t *)&v14->__r_.__value_.__l.__data_;
    v17.i64[0] = v14->__r_.__value_.__r.__words[2];
    int8x16_t v16 = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, (const std::string *)&v16);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  int8x16_t v6 = (int8x16_t)vshlq_n_s64(*(int64x2_t *)(a1 + 152), 2uLL);
  int8x16_t v7 = (int8x16_t)vshlq_n_s64(*(int64x2_t *)(a1 + 136), 2uLL);
  int8x16_t v16 = vextq_s8(v6, v6, 8uLL);
  int8x16_t v17 = vextq_s8(v7, v7, 8uLL);
  uint64_t v18 = 4 * *(void *)(a1 + 128);
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  if (result)
  {
    uint64_t v8 = 8 * (5 - result);
    size_t v9 = 40 - v8;
    int v10 = &v16.i8[v8];
    uint64_t v11 = (char *)operator new(40 - v8);
    *a2 = v11;
    int v12 = &v11[v9];
    a2[2] = &v11[v9];
    unint64_t result = (unint64_t)memcpy(v11, v10, v9);
    a2[1] = v12;
  }
  return result;
}

void sub_1B4C0A0D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

void sub_1B4C0A130(uint64_t a1)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 24))(a1);
  (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 32))(&__p, a1);
  sub_1B4C0A1FC();
}

void sub_1B4C0A1E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B4C0A1FC()
{
}

void sub_1B4C0A2F8(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9929C0](v1, 0x1000C4077774924);
  _Unwind_Resume(a1);
}

void sub_1B4C0A31C(_Unwind_Exception *a1)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 32) = v4;
    operator delete(v4);
  }
  sub_1B4C035DC(v1);
  _Unwind_Resume(a1);
}

void sub_1B4C0A344(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1BA9929C0);
}

uint64_t sub_1B4C0A37C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    JUMPOUT(0x1BA992990);
  }
  return result;
}

uint64_t sub_1B4C0A39C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x80000001B4C9A5E7) {
    return a1 + 24;
  }
  if (((v3 & 0x80000001B4C9A5E7 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001B4C9A5E7)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001B4C9A5E7 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

void *sub_1B4C0A420(void *result, char *__src, char *a3, size_t __sz)
{
  int8x16_t v6 = __src;
  int8x16_t v7 = result;
  uint64_t v8 = result[2];
  size_t v9 = (char *)*result;
  if (__sz > (v8 - *result) >> 3)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      void *v7 = 0;
      v7[1] = 0;
      std::string v7[2] = 0;
    }
    if (__sz >> 61) {
      goto LABEL_22;
    }
    uint64_t v10 = v8 >> 2;
    if (v8 >> 2 <= __sz) {
      uint64_t v10 = __sz;
    }
    BOOL v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8;
    unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v11) {
      unint64_t v12 = v10;
    }
    if (v12 >> 61) {
LABEL_22:
    }
      sub_1B4BB3244();
    uint64_t v13 = v12;
    uint64_t result = operator new(8 * v12);
    size_t v9 = (char *)result;
    void *v7 = result;
    v7[1] = result;
    std::string v7[2] = &result[v13];
    size_t v14 = a3 - v6;
    if (v14) {
      uint64_t result = memcpy(result, v6, v14);
    }
    int8x16_t v15 = (void **)(v7 + 1);
    goto LABEL_21;
  }
  int8x16_t v15 = (void **)(result + 1);
  int8x16_t v16 = (unsigned char *)result[1];
  unint64_t v17 = (v16 - v9) >> 3;
  if (v17 >= __sz)
  {
    size_t v14 = a3 - __src;
    if (a3 == __src) {
      goto LABEL_21;
    }
    std::string v19 = (void *)*result;
LABEL_20:
    uint64_t result = memmove(v19, __src, v14);
    goto LABEL_21;
  }
  uint64_t v18 = &__src[8 * v17];
  if (v16 != v9)
  {
    uint64_t result = memmove((void *)*result, __src, v16 - v9);
    size_t v9 = (char *)*v15;
  }
  size_t v14 = a3 - v18;
  if (v14)
  {
    std::string v19 = v9;
    uint64_t __src = v18;
    goto LABEL_20;
  }
LABEL_21:
  *int8x16_t v15 = &v9[v14];
  return result;
}

std::string *sub_1B4C0A568@<X0>(std::__fs::filesystem::path *this@<X1>, uint64_t a2@<X0>, std::__fs::filesystem::path *a3@<X8>)
{
  if (*(char *)(a2 + 23) < 0)
  {
    sub_1B4BCA11C(a3, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&a3->__pn_.__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    a3->__pn_.__r_.__value_.__r.__words[2] = *(void *)(a2 + 16);
  }
  if (std::__fs::filesystem::path::__root_directory(this).__size_) {
    return std::string::operator=(&a3->__pn_, &this->__pn_);
  }
  if (std::__fs::filesystem::path::__filename(a3).__size_) {
    std::string::push_back(&a3->__pn_, 47);
  }
  int v6 = SHIBYTE(this->__pn_.__r_.__value_.__r.__words[2]);
  if (v6 >= 0) {
    int8x16_t v7 = this;
  }
  else {
    int8x16_t v7 = (std::__fs::filesystem::path *)this->__pn_.__r_.__value_.__r.__words[0];
  }
  if (v6 >= 0) {
    std::string::size_type size = HIBYTE(this->__pn_.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = this->__pn_.__r_.__value_.__l.__size_;
  }
  return std::string::append(&a3->__pn_, (const std::string::value_type *)v7, size);
}

void sub_1B4C0A608(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1B4C0A624(void *a1)
{
  a1[22] = &unk_1F0D54F90;
  uint64_t v2 = (std::__shared_weak_count *)a1[28];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (void *)a1[24];
    if (!v3) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  uint64_t v3 = (void *)a1[24];
  if (v3)
  {
LABEL_4:
    a1[25] = v3;
    operator delete(v3);
  }
LABEL_5:
  a1[15] = &unk_1F0D54F90;
  uint64_t v4 = (std::__shared_weak_count *)a1[21];
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    unint64_t v5 = (void *)a1[17];
    if (!v5) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  unint64_t v5 = (void *)a1[17];
  if (v5)
  {
LABEL_8:
    a1[18] = v5;
    operator delete(v5);
  }
LABEL_9:
  a1[8] = &unk_1F0D54F90;
  int v6 = (std::__shared_weak_count *)a1[14];
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    int8x16_t v7 = (void *)a1[10];
    if (!v7) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  int8x16_t v7 = (void *)a1[10];
  if (v7)
  {
LABEL_12:
    a1[11] = v7;
    operator delete(v7);
  }
LABEL_13:
  a1[1] = &unk_1F0D54F90;
  uint64_t v8 = (std::__shared_weak_count *)a1[7];
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    size_t v9 = (void *)a1[3];
    if (!v9) {
      return a1;
    }
    goto LABEL_16;
  }
  size_t v9 = (void *)a1[3];
  if (v9)
  {
LABEL_16:
    a1[4] = v9;
    operator delete(v9);
  }
  return a1;
}

uint64_t sub_1B4C0A858(uint64_t a1)
{
  if (*(char *)(a1 + 135) < 0)
  {
    operator delete(*(void **)(a1 + 112));
    uint64_t v2 = *(void ***)(a1 + 88);
    if (!v2) {
      goto LABEL_5;
    }
  }
  else
  {
    uint64_t v2 = *(void ***)(a1 + 88);
    if (!v2) {
      goto LABEL_5;
    }
  }
  do
  {
    int8x16_t v7 = (void **)*v2;
    if (*((char *)v2 + 39) < 0) {
      operator delete(v2[2]);
    }
    operator delete(v2);
    uint64_t v2 = v7;
  }
  while (v7);
LABEL_5:
  uint64_t v3 = *(void **)(a1 + 72);
  *(void *)(a1 + 72) = 0;
  if (v3) {
    operator delete(v3);
  }
  uint64_t v4 = *(void ***)a1;
  if (*(void *)a1)
  {
    unint64_t v5 = *(void ***)(a1 + 8);
    int v6 = *(void ***)a1;
    if (v5 != v4)
    {
      do
      {
        if (*((char *)v5 - 1) < 0) {
          operator delete(*(v5 - 3));
        }
        v5 -= 3;
      }
      while (v5 != v4);
      int v6 = *(void ***)a1;
    }
    *(void *)(a1 + 8) = v4;
    operator delete(v6);
  }
  return a1;
}

uint64_t sub_1B4C0A928@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long **a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v5 = *(long long **)(a1 + 8);
  for (uint64_t i = *(uint64_t **)(a2 + 16); i; uint64_t i = (uint64_t *)*i)
  {
    *(void *)uint64_t v34 = &unk_1F0D54EB8;
    if (*((char *)i + 39) < 0)
    {
      sub_1B4BCA11C(&v34[8], (void *)i[2], i[3]);
    }
    else
    {
      long long v7 = *((_OWORD *)i + 1);
      uint64_t v35 = i[4];
      *(_OWORD *)&v34[8] = v7;
    }
    long long v36 = *v5;
    (*(void (**)(uint64_t, unsigned char *))(*(void *)i[10] + 16))(i[10], v34);
    if (SHIBYTE(v35) < 0) {
      operator delete(*(void **)&v34[8]);
    }
  }
  size_t v9 = *a3;
  uint64_t v8 = a3[1];
  if (*a3 != v8)
  {
    do
    {
      if (sub_1B4C0B514((void *)v5 + 24, (uint64_t)v9))
      {
        uint64_t v10 = sub_1B4C0CBF0((void *)v5 + 24, (uint64_t)v9);
        if (!v10) {
          sub_1B4BC8D14("unordered_map::at: key not found");
        }
        BOOL v11 = v10;
        unint64_t v25 = &unk_1F0D54F90;
        int v26 = *((_DWORD *)v10 + 12);
        int64_t v28 = 0;
        long long v29 = 0;
        long long v27 = 0;
        uint64_t v13 = (unsigned char *)v10[7];
        unint64_t v12 = (unsigned char *)v10[8];
        int64_t v14 = v12 - v13;
        if (v12 != v13)
        {
          if (v14 < 0) {
            sub_1B4BB3244();
          }
          long long v27 = operator new(v12 - v13);
          int64_t v28 = (char *)v27;
          int8x16_t v15 = (char *)v27 + 8 * (v14 >> 3);
          long long v29 = v15;
          memcpy(v27, v13, v14);
          int64_t v28 = v15;
        }
        int8x16_t v16 = (std::__shared_weak_count *)v11[11];
        uint64_t v30 = v11[10];
        uint64_t v31 = v16;
        if (v16)
        {
          atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
          unint64_t v17 = v31;
          unint64_t v25 = &unk_1F0D54F90;
          if (v31) {
            goto LABEL_29;
          }
        }
        else
        {
          unint64_t v25 = &unk_1F0D54F90;
        }
      }
      else
      {
        int v33 = espresso_network_bind_buffer();
        HIBYTE(v32[2]) = 21;
        strcpy((char *)v32, "Binding output buffer");
        sub_1B4C0AE64(&v33, (uint64_t *)v32);
        if (SHIBYTE(v32[2]) < 0) {
          operator delete(v32[0]);
        }
        LOWORD(v32[0]) = 0;
        sub_1B4C0B744((uint64_t)&v25, (uint64_t)v34, v32);
        v32[0] = v9;
        uint64_t v18 = sub_1B4C0BB94((uint64_t)(v5 + 12), (uint64_t)v9, (uint64_t)&unk_1B4C9AE0A, v32);
        std::string v19 = v18;
        *((_DWORD *)v18 + 12) = v26;
        if (v18 + 5 != (uint64_t *)&v25) {
          sub_1B4C0A420(v18 + 7, (char *)v27, v28, (v28 - (unsigned char *)v27) >> 3);
        }
        uint64_t v21 = v30;
        int32x4_t v20 = v31;
        if (v31) {
          atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        int8x16_t v22 = (std::__shared_weak_count *)v19[11];
        v19[10] = v21;
        v19[11] = (uint64_t)v20;
        if (v22 && !atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
          unint64_t v17 = v31;
          unint64_t v25 = &unk_1F0D54F90;
          if (v31)
          {
LABEL_29:
            if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
              std::__shared_weak_count::__release_weak(v17);
            }
          }
        }
        else
        {
          unint64_t v17 = v31;
          unint64_t v25 = &unk_1F0D54F90;
          if (v31) {
            goto LABEL_29;
          }
        }
      }
      if (v27)
      {
        int64_t v28 = (char *)v27;
        operator delete(v27);
      }
      size_t v9 = (long long *)((char *)v9 + 24);
    }
    while (v9 != v8);
  }
  LODWORD(v32[0]) = espresso_plan_execute_sync();
  v34[23] = 14;
  strcpy(v34, "Executing plan");
  sub_1B4C0AE64((int *)v32, (uint64_t *)v34);
  if ((v34[23] & 0x80000000) != 0) {
    operator delete(*(void **)v34);
  }
  return sub_1B4C0C40C(a4, (uint64_t)(v5 + 12));
}

void sub_1B4C0AD58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,int a30,__int16 a31,char a32,char a33)
{
  if (a29 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1B4C0AE20(uint64_t result)
{
  uint64_t v1 = result;
  if (*(char *)(result + 31) < 0)
  {
    operator delete(*(void **)(result + 8));
    return v1;
  }
  return result;
}

uint64_t sub_1B4C0AE64(int *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (result)
  {
    sub_1B4C0C2E8(result, a2);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    unint64_t v5 = std::string::append(&v14, " [espresso error: ");
    long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v15.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v13, *a1);
    if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v7 = &v13;
    }
    else {
      long long v7 = (std::string *)v13.__r_.__value_.__r.__words[0];
    }
    if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v13.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v13.__r_.__value_.__l.__size_;
    }
    size_t v9 = std::string::append(&v15, (const std::string::value_type *)v7, size);
    long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v16.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v16.__r_.__value_.__l.__data_ = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    BOOL v11 = std::string::append(&v16, "]");
    long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v17);
    exception->__vftable = (std::runtime_error_vtbl *)&unk_1F0D54E70;
    __cxa_throw(exception, (struct type_info *)&unk_1F0D533B0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  return result;
}

void sub_1B4C0AFB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v35 - 41) < 0)
  {
    operator delete(*(void **)(v35 - 64));
    if ((a33 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a14 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  else if ((a33 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a28);
  if ((a14 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a26 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }
LABEL_10:
  operator delete(a9);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_5:
    if (a20 < 0) {
      goto LABEL_6;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a21);
  if (a20 < 0)
  {
LABEL_6:
    operator delete(__p);
    if ((v34 & 1) == 0) {
LABEL_14:
    }
      _Unwind_Resume(a1);
LABEL_13:
    __cxa_free_exception(v33);
    goto LABEL_14;
  }
LABEL_12:
  if (!v34) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

void sub_1B4C0B09C(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x1BA9929C0);
}

void sub_1B4C0B0F0(uint64_t a1, long long *a2, _DWORD *a3)
{
  switch(*a3)
  {
    case 0:
      long long v3 = a2[1];
      long long v10 = *a2;
      long long v11 = v3;
      int v12 = espresso_network_bind_input_vimagebuffer_bgra8();
      char v9 = 21;
      strcpy(__p, "Binding vImage_Buffer");
      sub_1B4C0AE64(&v12, (uint64_t *)__p);
      break;
    case 1:
      long long v5 = a2[1];
      long long v10 = *a2;
      long long v11 = v5;
      int v12 = espresso_network_bind_input_vimagebuffer_rgba8();
      char v9 = 21;
      strcpy(__p, "Binding vImage_Buffer");
      sub_1B4C0AE64(&v12, (uint64_t *)__p);
      break;
    case 2:
      long long v4 = a2[1];
      long long v10 = *a2;
      long long v11 = v4;
      int v12 = espresso_network_bind_input_vimagebuffer_argb8();
      char v9 = 21;
      strcpy(__p, "Binding vImage_Buffer");
      sub_1B4C0AE64(&v12, (uint64_t *)__p);
      break;
    case 3:
      long long v6 = a2[1];
      long long v10 = *a2;
      long long v11 = v6;
      int v12 = espresso_network_bind_input_vimagebuffer_planar8();
      char v9 = 21;
      strcpy(__p, "Binding vImage_Buffer");
      sub_1B4C0AE64(&v12, (uint64_t *)__p);
      break;
    default:
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Unsupported image buffer type");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (v9 < 0) {
    operator delete(*(void **)__p);
  }
}

void sub_1B4C0B338(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1B4C0B34C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B4C0B384()
{
  int v2 = espresso_network_bind_cvpixelbuffer();
  char v1 = 21;
  strcpy(__p, "Binding CVPixelBuffer");
  sub_1B4C0AE64(&v2, (uint64_t *)__p);
  if (v1 < 0) {
    operator delete(*(void **)__p);
  }
}

void sub_1B4C0B424(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B4C0B440()
{
  int v2 = espresso_network_bind_buffer();
  std::__fs::filesystem::path __p = operator new(0x20uLL);
  long long v1 = xmmword_1B4C9A420;
  strcpy((char *)__p, "Binding espresso_buffer_t");
  sub_1B4C0AE64(&v2, (uint64_t *)&__p);
  if (SHIBYTE(v1) < 0) {
    operator delete(__p);
  }
}

void sub_1B4C0B4F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_1B4C0B514(void *a1, uint64_t a2)
{
  int v2 = (unsigned char *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v5 = v4;
  }
  unint64_t v6 = sub_1B4BB2824((uint64_t)&v25, (uint64_t *)a2, v5);
  int8x8_t v7 = (int8x8_t)a1[1];
  if (!*(void *)&v7) {
    return 0;
  }
  unint64_t v8 = v6;
  uint8x8_t v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    unint64_t v10 = v6;
    if (v6 >= *(void *)&v7) {
      unint64_t v10 = v6 % *(void *)&v7;
    }
  }
  else
  {
    unint64_t v10 = (*(void *)&v7 - 1) & v6;
  }
  int v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    std::string v13 = *v12;
    if (*v12)
    {
      char v14 = v2[23];
      if (v14 >= 0) {
        uint64_t v15 = v2[23];
      }
      else {
        uint64_t v15 = *((void *)v2 + 1);
      }
      if (v14 < 0) {
        int v2 = *(unsigned char **)v2;
      }
      if (v9.u32[0] < 2uLL)
      {
        uint64_t v16 = *(void *)&v7 - 1;
        while (1)
        {
          uint64_t v21 = v13[1];
          if (v8 == v21)
          {
            uint64_t v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0) {
              uint64_t v23 = *((unsigned __int8 *)v13 + 39);
            }
            else {
              uint64_t v23 = v13[3];
            }
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3])) {
                  return v13;
                }
              }
              else
              {
                if (!*((unsigned char *)v13 + 39)) {
                  return v13;
                }
                uint64_t v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24) {
                    return v13;
                  }
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          uint64_t result = 0;
          std::string v13 = (uint64_t *)*v13;
          if (!v13) {
            return result;
          }
        }
      }
      while (1)
      {
        unint64_t v17 = v13[1];
        if (v8 == v17)
        {
          uint64_t v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0) {
            uint64_t v19 = *((unsigned __int8 *)v13 + 39);
          }
          else {
            uint64_t v19 = v13[3];
          }
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3])) {
                return v13;
              }
            }
            else
            {
              if (!*((unsigned char *)v13 + 39)) {
                return v13;
              }
              uint64_t v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20) {
                  return v13;
                }
              }
            }
          }
        }
        else
        {
          if (v17 >= *(void *)&v7) {
            v17 %= *(void *)&v7;
          }
          if (v17 != v10) {
            return 0;
          }
        }
        uint64_t result = 0;
        std::string v13 = (uint64_t *)*v13;
        if (!v13) {
          return result;
        }
      }
    }
  }
  return 0;
}

uint64_t sub_1B4C0B744(uint64_t a1, uint64_t a2, _WORD *a3)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  unint64_t v6 = (std::__shared_weak_count *)operator new(0xD0uLL);
  v6->__shared_owners_ = 0;
  v6->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0D55BE0;
  v6->__shared_weak_owners_ = 0;
  v6[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0D54F30;
  long long v7 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)&v6[6].__shared_weak_owners_ = *(_OWORD *)(a2 + 128);
  *(_OWORD *)&v6[7].__shared_owners_ = v7;
  v6[8].__vftable = *(std::__shared_weak_count_vtbl **)(a2 + 160);
  long long v8 = *(_OWORD *)(a2 + 80);
  v6[4].std::__shared_count = *(std::__shared_count *)(a2 + 64);
  *(_OWORD *)&v6[4].__shared_weak_owners_ = v8;
  std::__shared_count v9 = *(std::__shared_count *)(a2 + 112);
  *(_OWORD *)&v6[5].__shared_owners_ = *(_OWORD *)(a2 + 96);
  v6[6].std::__shared_count = v9;
  std::__shared_count v10 = *(std::__shared_count *)(a2 + 16);
  *(_OWORD *)&v6[1].__shared_owners_ = *(_OWORD *)a2;
  v6[2].std::__shared_count = v10;
  long long v11 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v6[2].__shared_weak_owners_ = *(_OWORD *)(a2 + 32);
  *(_OWORD *)&v6[3].__shared_owners_ = v11;
  LOWORD(v6[8].__shared_owners_) = *a3;
  int v12 = *(_DWORD *)(a2 + 160);
  if (v12 == 262152)
  {
    int v13 = 0;
  }
  else
  {
    if (v12 != 65568)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Unsupported espresso type encountered.");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    int v13 = 1;
  }
  *(_DWORD *)&v23[8] = 0;
  *(void *)uint64_t v23 = espresso_buffer_unpack_tensor_shape();
  strcpy((char *)__p, "Unpacking tensor shape");
  HIBYTE(__p[2]) = 22;
  sub_1B4C0AE64((int *)v23, (uint64_t *)__p);
  if (SHIBYTE(__p[2]) < 0)
  {
    operator delete(__p[0]);
    unint64_t v14 = *(void *)&v23[4];
    memset(__p, 0, sizeof(__p));
    if (*(void *)&v23[4]) {
      goto LABEL_7;
    }
LABEL_11:
    uint64_t v16 = 0;
    goto LABEL_12;
  }
  unint64_t v14 = *(void *)&v23[4];
  memset(__p, 0, sizeof(__p));
  if (!*(void *)&v23[4]) {
    goto LABEL_11;
  }
LABEL_7:
  if (v14 >> 61) {
    sub_1B4BB3244();
  }
  size_t v15 = 8 * v14;
  if (((8 * v14) & 0x8000000000000000) != 0) {
    sub_1B4BB3244();
  }
  uint64_t v16 = (char *)operator new(8 * v14);
  unint64_t v14 = (unint64_t)&v16[8 * ((uint64_t)(8 * v14) >> 3)];
  memcpy(v16, __src, v15);
LABEL_12:
  *(void *)a1 = &unk_1F0D54F90;
  *(_DWORD *)(a1 + 8) = v13;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  uint64_t v17 = v14 - (void)v16;
  if ((char *)v14 != v16)
  {
    if (v17 < 0) {
      sub_1B4BB3244();
    }
    uint64_t v18 = (char *)operator new(v14 - (void)v16);
    *(void *)(a1 + 16) = v18;
    uint64_t v19 = &v18[8 * (v17 >> 3)];
    *(void *)(a1 + 32) = v19;
    memcpy(v18, v16, v14 - (void)v16);
    *(void *)(a1 + 24) = v19;
  }
  *(void *)(a1 + 4sub_1B4BC92E4(&a9, 0) = v6 + 1;
  *(void *)(a1 + 48) = v6;
  atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  if (v16) {
    operator delete(v16);
  }
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  *(void *)a1 = &unk_1F0D54E50;
  return a1;
}

void sub_1B4C0BAC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
}

void sub_1B4C0BB30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  std::__shared_count v9 = *v7;
  if (*v7)
  {
    *(void *)(v5 + 24) = v9;
    operator delete(v9);
  }
  if (v6) {
    JUMPOUT(0x1B4C0BB4CLL);
  }
  sub_1B4C035DC((uint64_t)va1);
  sub_1B4C035DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1B4C0BB68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  sub_1B4C035DC((uint64_t)&a15);
  sub_1B4C035DC((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t *sub_1B4C0BB94(uint64_t a1, uint64_t a2, uint64_t a3, long long **a4)
{
  uint64_t v6 = (unsigned char *)a2;
  unint64_t v8 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v9 = v8;
  }
  unint64_t v10 = sub_1B4BB2824((uint64_t)v45, (uint64_t *)a2, v9);
  unint64_t v11 = v10;
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v4 = v10;
      if (v10 >= v12) {
        unint64_t v4 = v10 % v12;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v10;
    }
    unint64_t v14 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      size_t v15 = *v14;
      if (*v14)
      {
        char v16 = v6[23];
        if (v16 >= 0) {
          uint64_t v17 = v6[23];
        }
        else {
          uint64_t v17 = *((void *)v6 + 1);
        }
        if (v16 < 0) {
          uint64_t v6 = *(unsigned char **)v6;
        }
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v22 = v15[1];
            if (v22 == v11)
            {
              uint64_t v23 = *((unsigned __int8 *)v15 + 39);
              if ((v23 & 0x80u) == 0) {
                uint64_t v24 = *((unsigned __int8 *)v15 + 39);
              }
              else {
                uint64_t v24 = v15[3];
              }
              if (v24 == v17)
              {
                if ((v23 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v15[2], v6, v15[3])) {
                    return v15;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v15 + 39)) {
                    return v15;
                  }
                  uint64_t v25 = 0;
                  while (*((unsigned __int8 *)v15 + v25 + 16) == v6[v25])
                  {
                    if (v23 == ++v25) {
                      return v15;
                    }
                  }
                }
              }
            }
            else if ((v22 & (v12 - 1)) != v4)
            {
              goto LABEL_51;
            }
            size_t v15 = (uint64_t *)*v15;
            if (!v15) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v18 = v15[1];
          if (v18 == v11)
          {
            uint64_t v19 = *((unsigned __int8 *)v15 + 39);
            if ((v19 & 0x80u) == 0) {
              uint64_t v20 = *((unsigned __int8 *)v15 + 39);
            }
            else {
              uint64_t v20 = v15[3];
            }
            if (v20 == v17)
            {
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp((const void *)v15[2], v6, v15[3])) {
                  return v15;
                }
              }
              else
              {
                if (!*((unsigned char *)v15 + 39)) {
                  return v15;
                }
                uint64_t v21 = 0;
                while (*((unsigned __int8 *)v15 + v21 + 16) == v6[v21])
                {
                  if (v19 == ++v21) {
                    return v15;
                  }
                }
              }
            }
          }
          else
          {
            if (v18 >= v12) {
              v18 %= v12;
            }
            if (v18 != v4) {
              break;
            }
          }
          size_t v15 = (uint64_t *)*v15;
        }
        while (v15);
      }
    }
  }
LABEL_51:
  int v26 = (char *)operator new(0x60uLL);
  v45[0] = v26;
  v45[1] = a1 + 16;
  char v46 = 0;
  *(void *)int v26 = 0;
  *((void *)v26 + 1) = v11;
  long long v27 = v26 + 16;
  int64_t v28 = *a4;
  if (*((char *)*a4 + 23) < 0)
  {
    sub_1B4BCA11C(v27, *(void **)v28, *((void *)v28 + 1));
  }
  else
  {
    long long v29 = *v28;
    *((void *)v26 + 4) = *((void *)v28 + 2);
    *(_OWORD *)long long v27 = v29;
  }
  *((_DWORD *)v26 + 12) = 1;
  *(_OWORD *)(v26 + 56) = 0u;
  *(_OWORD *)(v26 + 72) = 0u;
  *((void *)v26 + 11) = 0;
  *((void *)v26 + 5) = &unk_1F0D54E50;
  char v46 = 1;
  float v30 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v31 = *(float *)(a1 + 32);
  if (!v12 || (float)(v31 * (float)v12) < v30)
  {
    BOOL v34 = 1;
    if (v12 >= 3) {
      BOOL v34 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v35 = v34 | (2 * v12);
    unint64_t v36 = vcvtps_u32_f32(v30 / v31);
    if (v35 <= v36) {
      size_t prime = v36;
    }
    else {
      size_t prime = v35;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v38 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v38) {
      goto LABEL_68;
    }
    if (prime < *(void *)&v38)
    {
      unint64_t v39 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v38 < 3uLL || (uint8x8_t v40 = (uint8x8_t)vcnt_s8(v38), v40.i16[0] = vaddlv_u8(v40), v40.u32[0] > 1uLL))
      {
        unint64_t v39 = std::__next_prime(v39);
      }
      else
      {
        uint64_t v41 = 1 << -(char)__clz(v39 - 1);
        if (v39 >= 2) {
          unint64_t v39 = v41;
        }
      }
      if (prime <= v39) {
        size_t prime = v39;
      }
      if (prime < *(void *)&v38) {
LABEL_68:
      }
        sub_1B4C0C040(a1, prime);
    }
    unint64_t v12 = *(void *)(a1 + 8);
    unint64_t v42 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        unint64_t v4 = v11 % v12;
        uint64_t v32 = *(void **)(*(void *)a1 + 8 * (v11 % v12));
        int v33 = (void *)v45[0];
        if (v32) {
          goto LABEL_57;
        }
      }
      else
      {
        unint64_t v4 = v11;
        uint64_t v32 = *(void **)(*(void *)a1 + 8 * v11);
        int v33 = (void *)v45[0];
        if (v32) {
          goto LABEL_57;
        }
      }
    }
    else
    {
      unint64_t v4 = v42 & v11;
      uint64_t v32 = *(void **)(*(void *)a1 + 8 * (v42 & v11));
      int v33 = (void *)v45[0];
      if (v32) {
        goto LABEL_57;
      }
    }
LABEL_81:
    *int v33 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v45[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v45[0])
    {
      unint64_t v43 = *(void *)(*(void *)v45[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v43 >= v12) {
          v43 %= v12;
        }
      }
      else
      {
        v43 &= v12 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v43) = v45[0];
    }
    goto LABEL_92;
  }
  uint64_t v32 = *(void **)(*(void *)a1 + 8 * v4);
  int v33 = (void *)v45[0];
  if (!v32) {
    goto LABEL_81;
  }
LABEL_57:
  *int v33 = *v32;
  void *v32 = v45[0];
LABEL_92:
  size_t v15 = (uint64_t *)v45[0];
  ++*(void *)(a1 + 24);
  return v15;
}

void sub_1B4C0C00C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1B4C0C1F0((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

void sub_1B4C0C024(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1B4C0C1F0((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

void sub_1B4C0C040(uint64_t a1, unint64_t a2)
{
  if (!a2)
  {
    size_t v15 = *(void **)a1;
    *(void *)a1 = 0;
    if (v15) {
      operator delete(v15);
    }
    *(void *)(a1 + 8) = 0;
    return;
  }
  if (a2 >> 61) {
    sub_1B4BB2D38();
  }
  unint64_t v4 = operator new(8 * a2);
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = v4;
  if (v5) {
    operator delete(v5);
  }
  uint64_t v6 = 0;
  *(void *)(a1 + 8) = a2;
  do
    *(void *)(*(void *)a1 + 8 * v6++) = 0;
  while (a2 != v6);
  uint64_t v8 = a1 + 16;
  long long v7 = *(void **)(a1 + 16);
  if (v7)
  {
    unint64_t v9 = v7[1];
    unint64_t v10 = a2 - 1;
    if ((a2 & (a2 - 1)) == 0)
    {
      uint64_t v11 = v9 & v10;
      *(void *)(*(void *)a1 + 8 * v11) = v8;
      while (1)
      {
        unint64_t v12 = (void *)*v7;
        if (!*v7) {
          break;
        }
        uint64_t v13 = v12[1] & v10;
        if (v13 == v11)
        {
          long long v7 = (void *)*v7;
        }
        else if (*(void *)(*(void *)a1 + 8 * v13))
        {
          void *v7 = *v12;
          uint64_t v14 = 8 * v13;
          *unint64_t v12 = **(void **)(*(void *)a1 + v14);
          **(void **)(*(void *)a1 + v14) = v12;
        }
        else
        {
          *(void *)(*(void *)a1 + 8 * v13) = v7;
          long long v7 = v12;
          uint64_t v11 = v13;
        }
      }
      return;
    }
    if (v9 >= a2) {
      v9 %= a2;
    }
    *(void *)(*(void *)a1 + 8 * v9) = v8;
    char v16 = (void *)*v7;
    if (*v7)
    {
      while (1)
      {
        unint64_t v18 = v16[1];
        if (v18 >= a2) {
          v18 %= a2;
        }
        if (v18 == v9) {
          goto LABEL_25;
        }
        if (*(void *)(*(void *)a1 + 8 * v18))
        {
          void *v7 = *v16;
          uint64_t v17 = 8 * v18;
          *char v16 = **(void **)(*(void *)a1 + v17);
          **(void **)(*(void *)a1 + v17) = v16;
          char v16 = v7;
LABEL_25:
          long long v7 = v16;
          char v16 = (void *)*v16;
          if (!v16) {
            return;
          }
        }
        else
        {
          *(void *)(*(void *)a1 + 8 * v18) = v7;
          long long v7 = v16;
          char v16 = (void *)*v16;
          unint64_t v9 = v18;
          if (!v16) {
            return;
          }
        }
      }
    }
  }
}

void sub_1B4C0C1F0(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    if (!*((unsigned char *)a1 + 16)) {
      goto LABEL_9;
    }
    *(void *)(v2 + 4sub_1B4BC92E4(&a9, 0) = &unk_1F0D54F90;
    long long v3 = *(std::__shared_weak_count **)(v2 + 88);
    if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    unint64_t v4 = *(void **)(v2 + 56);
    if (v4)
    {
      *(void *)(v2 + 64) = v4;
      operator delete(v4);
    }
    if (*(char *)(v2 + 39) < 0)
    {
      operator delete(*(void **)(v2 + 16));
      uint64_t v5 = (void *)v2;
    }
    else
    {
LABEL_9:
      uint64_t v5 = (void *)v2;
    }
    operator delete(v5);
  }
}

void sub_1B4C0C2E8(uint64_t a1, uint64_t *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    int v3 = *((char *)a2 + 23);
    unint64_t v4 = (uint64_t *)*a2;
    uint64_t status_string = espresso_get_status_string();
    if (v3 >= 0) {
      uint64_t v6 = a2;
    }
    else {
      uint64_t v6 = v4;
    }
    int v7 = 136315394;
    uint64_t v8 = v6;
    __int16 v9 = 2080;
    uint64_t v10 = status_string;
    _os_log_error_impl(&dword_1B4BAD000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Encountered an error during: %s\n -> Espresso Error: %s", (uint8_t *)&v7, 0x16u);
  }
}

void sub_1B4C0C3D4(std::runtime_error *a1)
{
  std::runtime_error::~runtime_error(a1);
  JUMPOUT(0x1BA9929C0);
}

uint64_t sub_1B4C0C40C(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  size_t prime = *(void *)(a2 + 8);
  if (prime == 1)
  {
    size_t prime = 2;
LABEL_17:
    sub_1B4C0C040(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(*(void *)(a2 + 8));
    int8x8_t v5 = *(int8x8_t *)(a1 + 8);
    BOOL v6 = prime >= *(void *)&v5;
    if (prime > *(void *)&v5) {
      goto LABEL_17;
    }
  }
  else
  {
    int8x8_t v5 = 0;
    BOOL v6 = 1;
    if (prime) {
      goto LABEL_17;
    }
  }
  if (!v6)
  {
    unint64_t v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v5 < 3uLL || (uint8x8_t v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      unint64_t v7 = std::__next_prime(v7);
    }
    else
    {
      uint64_t v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2) {
        unint64_t v7 = v9;
      }
    }
    if (prime <= v7) {
      size_t prime = v7;
    }
    if (prime < *(void *)&v5) {
      goto LABEL_17;
    }
  }
LABEL_18:
  for (uint64_t i = *(long long **)(a2 + 16); i; uint64_t i = *(long long **)i)
    sub_1B4C0C550(a1, (uint64_t)(i + 1), i + 1);
  return a1;
}

void sub_1B4C0C528(_Unwind_Exception *a1)
{
  sub_1B4C0CAF4(v1);
  _Unwind_Resume(a1);
}

void sub_1B4C0C53C(_Unwind_Exception *a1)
{
  sub_1B4C0CAF4(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_1B4C0C550(uint64_t a1, uint64_t a2, long long *a3)
{
  int8x8_t v5 = (unsigned char *)a2;
  unint64_t v7 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v8 = v7;
  }
  unint64_t v9 = sub_1B4BB2824((uint64_t)v41, (uint64_t *)a2, v8);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v3 = v9;
      if (v9 >= v11) {
        unint64_t v3 = v9 % v11;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v9;
    }
    uint64_t v13 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      uint64_t v14 = *v13;
      if (*v13)
      {
        char v15 = v5[23];
        if (v15 >= 0) {
          uint64_t v16 = v5[23];
        }
        else {
          uint64_t v16 = *((void *)v5 + 1);
        }
        if (v15 < 0) {
          int8x8_t v5 = *(unsigned char **)v5;
        }
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v21 = v14[1];
            if (v21 == v10)
            {
              uint64_t v22 = *((unsigned __int8 *)v14 + 39);
              if ((v22 & 0x80u) == 0) {
                uint64_t v23 = *((unsigned __int8 *)v14 + 39);
              }
              else {
                uint64_t v23 = v14[3];
              }
              if (v23 == v16)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v14[2], v5, v14[3])) {
                    return v14;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v14 + 39)) {
                    return v14;
                  }
                  uint64_t v24 = 0;
                  while (*((unsigned __int8 *)v14 + v24 + 16) == v5[v24])
                  {
                    if (v22 == ++v24) {
                      return v14;
                    }
                  }
                }
              }
            }
            else if ((v21 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            uint64_t v14 = (uint64_t *)*v14;
            if (!v14) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v17 = v14[1];
          if (v17 == v10)
          {
            uint64_t v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0) {
              uint64_t v19 = *((unsigned __int8 *)v14 + 39);
            }
            else {
              uint64_t v19 = v14[3];
            }
            if (v19 == v16)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp((const void *)v14[2], v5, v14[3])) {
                  return v14;
                }
              }
              else
              {
                if (!*((unsigned char *)v14 + 39)) {
                  return v14;
                }
                uint64_t v20 = 0;
                while (*((unsigned __int8 *)v14 + v20 + 16) == v5[v20])
                {
                  if (v18 == ++v20) {
                    return v14;
                  }
                }
              }
            }
          }
          else
          {
            if (v17 >= v11) {
              v17 %= v11;
            }
            if (v17 != v3) {
              break;
            }
          }
          uint64_t v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  uint64_t v25 = operator new(0x60uLL);
  v41[0] = v25;
  v41[1] = a1 + 16;
  char v42 = 0;
  void *v25 = 0;
  v25[1] = v10;
  sub_1B4C0C9AC(v25 + 2, a3);
  char v42 = 1;
  float v26 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v27 = *(float *)(a1 + 32);
  if (!v11 || (float)(v27 * (float)v11) < v26)
  {
    BOOL v30 = 1;
    if (v11 >= 3) {
      BOOL v30 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v31 = v30 | (2 * v11);
    unint64_t v32 = vcvtps_u32_f32(v26 / v27);
    if (v31 <= v32) {
      size_t prime = v32;
    }
    else {
      size_t prime = v31;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v34 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v34) {
      goto LABEL_65;
    }
    if (prime < *(void *)&v34)
    {
      unint64_t v35 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v34 < 3uLL || (uint8x8_t v36 = (uint8x8_t)vcnt_s8(v34), v36.i16[0] = vaddlv_u8(v36), v36.u32[0] > 1uLL))
      {
        unint64_t v35 = std::__next_prime(v35);
      }
      else
      {
        uint64_t v37 = 1 << -(char)__clz(v35 - 1);
        if (v35 >= 2) {
          unint64_t v35 = v37;
        }
      }
      if (prime <= v35) {
        size_t prime = v35;
      }
      if (prime < *(void *)&v34) {
LABEL_65:
      }
        sub_1B4C0C040(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    unint64_t v38 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        unint64_t v3 = v10 % v11;
        int64_t v28 = *(void **)(*(void *)a1 + 8 * (v10 % v11));
        long long v29 = (void *)v41[0];
        if (v28) {
          goto LABEL_54;
        }
      }
      else
      {
        unint64_t v3 = v10;
        int64_t v28 = *(void **)(*(void *)a1 + 8 * v10);
        long long v29 = (void *)v41[0];
        if (v28) {
          goto LABEL_54;
        }
      }
    }
    else
    {
      unint64_t v3 = v38 & v10;
      int64_t v28 = *(void **)(*(void *)a1 + 8 * (v38 & v10));
      long long v29 = (void *)v41[0];
      if (v28) {
        goto LABEL_54;
      }
    }
LABEL_78:
    *long long v29 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v41[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v41[0])
    {
      unint64_t v39 = *(void *)(*(void *)v41[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v39 >= v11) {
          v39 %= v11;
        }
      }
      else
      {
        v39 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v39) = v41[0];
    }
    goto LABEL_89;
  }
  int64_t v28 = *(void **)(*(void *)a1 + 8 * v3);
  long long v29 = (void *)v41[0];
  if (!v28) {
    goto LABEL_78;
  }
LABEL_54:
  *long long v29 = *v28;
  *int64_t v28 = v41[0];
LABEL_89:
  uint64_t v14 = (uint64_t *)v41[0];
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_1B4C0C978(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1B4C0C1F0((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

void sub_1B4C0C990(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1B4C0C1F0((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

void *sub_1B4C0C9AC(void *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_1B4BCA11C(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)std::locale __dst = v4;
  }
  int v5 = *((_DWORD *)a2 + 8);
  __dst[5] = 0;
  __dst[3] = &unk_1F0D54F90;
  *((_DWORD *)__dst + 8) = v5;
  __dst[6] = 0;
  __dst[7] = 0;
  unint64_t v7 = (unsigned char *)*((void *)a2 + 5);
  BOOL v6 = (unsigned char *)*((void *)a2 + 6);
  int64_t v8 = v6 - v7;
  if (v6 != v7)
  {
    if (v8 < 0) {
      sub_1B4BB3244();
    }
    unint64_t v9 = (char *)operator new(v6 - v7);
    __dst[5] = v9;
    __dst[6] = v9;
    unint64_t v10 = &v9[8 * (v8 >> 3)];
    __dst[7] = v10;
    memcpy(v9, v7, v8);
    __dst[6] = v10;
  }
  uint64_t v11 = *((void *)a2 + 9);
  __dst[8] = *((void *)a2 + 8);
  __dst[9] = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  __dst[3] = &unk_1F0D54E50;
  return __dst;
}

void sub_1B4C0CAB8(_Unwind_Exception *exception_object)
{
  long long v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 48) = v4;
    operator delete(v4);
    if ((*(char *)(v1 + 23) & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((*(char *)(v1 + 23) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1B4C0CAF4(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    while (1)
    {
      unint64_t v3 = (void *)*v2;
      v2[5] = &unk_1F0D54F90;
      long long v4 = (std::__shared_weak_count *)v2[11];
      if (v4)
      {
        if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
          break;
        }
      }
      int v5 = (void *)v2[7];
      if (v5) {
        goto LABEL_7;
      }
LABEL_8:
      if (*((char *)v2 + 39) < 0) {
        operator delete((void *)v2[2]);
      }
      operator delete(v2);
      uint64_t v2 = v3;
      if (!v3) {
        goto LABEL_12;
      }
    }
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    int v5 = (void *)v2[7];
    if (!v5) {
      goto LABEL_8;
    }
LABEL_7:
    v2[8] = v5;
    operator delete(v5);
    goto LABEL_8;
  }
LABEL_12:
  BOOL v6 = *(void **)a1;
  *(void *)a1 = 0;
  if (v6) {
    operator delete(v6);
  }
  return a1;
}

uint64_t *sub_1B4C0CBF0(void *a1, uint64_t a2)
{
  uint64_t v2 = (unsigned char *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v5 = v4;
  }
  unint64_t v6 = sub_1B4BB2824((uint64_t)&v25, (uint64_t *)a2, v5);
  int8x8_t v7 = (int8x8_t)a1[1];
  if (!*(void *)&v7) {
    return 0;
  }
  unint64_t v8 = v6;
  uint8x8_t v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    unint64_t v10 = v6;
    if (v6 >= *(void *)&v7) {
      unint64_t v10 = v6 % *(void *)&v7;
    }
  }
  else
  {
    unint64_t v10 = (*(void *)&v7 - 1) & v6;
  }
  uint8x8_t v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    uint64_t v13 = *v12;
    if (*v12)
    {
      char v14 = v2[23];
      if (v14 >= 0) {
        uint64_t v15 = v2[23];
      }
      else {
        uint64_t v15 = *((void *)v2 + 1);
      }
      if (v14 < 0) {
        uint64_t v2 = *(unsigned char **)v2;
      }
      if (v9.u32[0] < 2uLL)
      {
        uint64_t v16 = *(void *)&v7 - 1;
        while (1)
        {
          uint64_t v21 = v13[1];
          if (v21 == v8)
          {
            uint64_t v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0) {
              uint64_t v23 = *((unsigned __int8 *)v13 + 39);
            }
            else {
              uint64_t v23 = v13[3];
            }
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3])) {
                  return v13;
                }
              }
              else
              {
                if (!*((unsigned char *)v13 + 39)) {
                  return v13;
                }
                uint64_t v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24) {
                    return v13;
                  }
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          uint64_t result = 0;
          uint64_t v13 = (uint64_t *)*v13;
          if (!v13) {
            return result;
          }
        }
      }
      while (1)
      {
        unint64_t v17 = v13[1];
        if (v17 == v8)
        {
          uint64_t v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0) {
            uint64_t v19 = *((unsigned __int8 *)v13 + 39);
          }
          else {
            uint64_t v19 = v13[3];
          }
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3])) {
                return v13;
              }
            }
            else
            {
              if (!*((unsigned char *)v13 + 39)) {
                return v13;
              }
              uint64_t v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20) {
                  return v13;
                }
              }
            }
          }
        }
        else
        {
          if (v17 >= *(void *)&v7) {
            v17 %= *(void *)&v7;
          }
          if (v17 != v10) {
            return 0;
          }
        }
        uint64_t result = 0;
        uint64_t v13 = (uint64_t *)*v13;
        if (!v13) {
          return result;
        }
      }
    }
  }
  return 0;
}

uint64_t sub_1B4C0CE20(uint64_t a1)
{
  *(void *)a1 = &unk_1F0D554C0;
  sub_1B4C0D12C(*(void **)(a1 + 16));
  return a1;
}

uint64_t sub_1B4C0CE68(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 40))
  {
    uint64_t v2 = *(void *)(a1 + 16);
    if (v2)
    {
      uint64_t v3 = *(void *)(a1 + 24);
      unint64_t v4 = *(void **)(a1 + 16);
      if (v3 != v2)
      {
        do
        {
          if (*(char *)(v3 - 1) < 0) {
            operator delete(*(void **)(v3 - 24));
          }
          v3 -= 24;
        }
        while (v3 != v2);
        unint64_t v4 = *(void **)(a1 + 16);
      }
      *(void *)(a1 + 24) = v2;
      operator delete(v4);
    }
  }
  return a1;
}

uint64_t sub_1B4C0CEE4(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *(void **)(result + 8);
  if (v2 != (void *)(result + 16))
  {
    uint64_t v3 = *a2;
    do
    {
      *(_DWORD *)(v3 + 4 * *((unsigned int *)v2 + 7)) = -8388609;
      unint64_t v4 = (void *)v2[1];
      if (v4)
      {
        do
        {
          unint64_t v5 = v4;
          unint64_t v4 = (void *)*v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          unint64_t v5 = (void *)v2[2];
          BOOL v6 = *v5 == (void)v2;
          uint64_t v2 = v5;
        }
        while (!v6);
      }
      uint64_t v2 = v5;
    }
    while (v5 != (void *)(result + 16));
  }
  return result;
}

void sub_1B4C0CF48(uint64_t a1)
{
  *(void *)a1 = &unk_1F0D554C0;
  sub_1B4C0D12C(*(void **)(a1 + 16));
  JUMPOUT(0x1BA9929C0);
}

uint64_t *sub_1B4C0CFB0(uint64_t *result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    unint64_t v4 = a2;
    unint64_t v5 = result;
    BOOL v6 = result + 1;
    do
    {
      int8x8_t v7 = (uint64_t *)v5[1];
      unint64_t v8 = v6;
      if ((uint64_t *)*v5 == v6) {
        goto LABEL_10;
      }
      uint64_t v9 = v5[1];
      unint64_t v10 = v6;
      if (v7)
      {
        do
        {
          unint64_t v8 = (uint64_t *)v9;
          uint64_t v9 = *(void *)(v9 + 8);
        }
        while (v9);
      }
      else
      {
        do
        {
          unint64_t v8 = (uint64_t *)v10[2];
          BOOL v11 = *v8 == (void)v10;
          unint64_t v10 = v8;
        }
        while (v11);
      }
      unsigned int v12 = *((_DWORD *)v4 + 7);
      if (*((_DWORD *)v8 + 7) < v12)
      {
LABEL_10:
        if (v7) {
          uint64_t v13 = (uint64_t **)v8;
        }
        else {
          uint64_t v13 = (uint64_t **)v6;
        }
        if (v7) {
          char v14 = (uint64_t **)(v8 + 1);
        }
        else {
          char v14 = (uint64_t **)v6;
        }
        if (*v14) {
          goto LABEL_29;
        }
      }
      else
      {
        char v14 = (uint64_t **)v6;
        uint64_t v13 = (uint64_t **)v6;
        if (v7)
        {
          while (1)
          {
            while (1)
            {
              uint64_t v13 = (uint64_t **)v7;
              unsigned int v15 = *((_DWORD *)v7 + 7);
              if (v15 <= v12) {
                break;
              }
              int8x8_t v7 = *v13;
              char v14 = v13;
              if (!*v13) {
                goto LABEL_25;
              }
            }
            if (v15 >= v12) {
              goto LABEL_29;
            }
            int8x8_t v7 = v13[1];
            if (!v7)
            {
              char v14 = v13 + 1;
              break;
            }
          }
        }
      }
LABEL_25:
      uint64_t v16 = operator new(0x20uLL);
      v16[7] = *((_DWORD *)v4 + 7);
      *(void *)uint64_t v16 = 0;
      *((void *)v16 + 1) = 0;
      *((void *)v16 + 2) = v13;
      *char v14 = (uint64_t *)v16;
      uint64_t v17 = *(void *)*v5;
      if (v17)
      {
        uint64_t *v5 = v17;
        uint64_t v18 = *v14;
      }
      else
      {
        uint64_t v18 = (uint64_t *)v16;
      }
      uint64_t result = sub_1B4BB3DA4((uint64_t *)v5[1], v18);
      ++v5[2];
LABEL_29:
      uint64_t v19 = (void *)v4[1];
      if (v19)
      {
        do
        {
          uint64_t v20 = v19;
          uint64_t v19 = (void *)*v19;
        }
        while (v19);
      }
      else
      {
        do
        {
          uint64_t v20 = (void *)v4[2];
          BOOL v11 = *v20 == (void)v4;
          unint64_t v4 = v20;
        }
        while (!v11);
      }
      unint64_t v4 = v20;
    }
    while (v20 != a3);
  }
  return result;
}

void sub_1B4C0D12C(void *a1)
{
  if (a1)
  {
    sub_1B4C0D12C(*a1);
    sub_1B4C0D12C(a1[1]);
    operator delete(a1);
  }
}

uint64_t sub_1B4C0D178(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 88);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)(a1 + 48) = &unk_1F0D554C0;
  sub_1B4C0D12C(*(void **)(a1 + 64));
  if (*(unsigned char *)(a1 + 40))
  {
    uint64_t v3 = *(void *)(a1 + 16);
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 24);
      unint64_t v5 = *(void **)(a1 + 16);
      if (v4 != v3)
      {
        do
        {
          if (*(char *)(v4 - 1) < 0) {
            operator delete(*(void **)(v4 - 24));
          }
          v4 -= 24;
        }
        while (v4 != v3);
        unint64_t v5 = *(void **)(a1 + 16);
      }
      *(void *)(a1 + 24) = v3;
      operator delete(v5);
    }
  }
  return a1;
}

uint64_t sub_1B4C0D264(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 104);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)(a1 + 64) = &unk_1F0D554C0;
  sub_1B4C0D12C(*(void **)(a1 + 80));
  if (*(unsigned char *)(a1 + 40))
  {
    uint64_t v3 = *(void *)(a1 + 16);
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 24);
      unint64_t v5 = *(void **)(a1 + 16);
      if (v4 != v3)
      {
        do
        {
          if (*(char *)(v4 - 1) < 0) {
            operator delete(*(void **)(v4 - 24));
          }
          v4 -= 24;
        }
        while (v4 != v3);
        unint64_t v5 = *(void **)(a1 + 16);
      }
      *(void *)(a1 + 24) = v3;
      operator delete(v5);
    }
  }
  return a1;
}

void **sub_1B4C0D350(void **a1)
{
  uint64_t v2 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        unint64_t v5 = (void *)*((void *)v3 - 3);
        if (v5)
        {
          *((void *)v3 - 2) = v5;
          operator delete(v5);
        }
        v3 -= 32;
      }
      while (v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_1B4C0D3C4(uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      unint64_t v5 = (void **)*v2;
      if (*((char *)v2 + 39) < 0) {
        operator delete(v2[2]);
      }
      operator delete(v2);
      uint64_t v2 = v5;
    }
    while (v5);
  }
  uint64_t v3 = *(void **)a1;
  *(void *)a1 = 0;
  if (v3) {
    operator delete(v3);
  }
  return a1;
}

uint64_t *sub_1B4C0D430(uint64_t a1, uint64_t a2, long long *a3)
{
  unint64_t v5 = (unsigned char *)a2;
  unint64_t v7 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v8 = v7;
  }
  unint64_t v9 = sub_1B4BB2824((uint64_t)v41, (uint64_t *)a2, v8);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v3 = v9;
      if (v9 >= v11) {
        unint64_t v3 = v9 % v11;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v9;
    }
    uint64_t v13 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      char v14 = *v13;
      if (*v13)
      {
        char v15 = v5[23];
        if (v15 >= 0) {
          uint64_t v16 = v5[23];
        }
        else {
          uint64_t v16 = *((void *)v5 + 1);
        }
        if (v15 < 0) {
          unint64_t v5 = *(unsigned char **)v5;
        }
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v21 = v14[1];
            if (v21 == v10)
            {
              uint64_t v22 = *((unsigned __int8 *)v14 + 39);
              if ((v22 & 0x80u) == 0) {
                uint64_t v23 = *((unsigned __int8 *)v14 + 39);
              }
              else {
                uint64_t v23 = v14[3];
              }
              if (v23 == v16)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v14[2], v5, v14[3])) {
                    return v14;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v14 + 39)) {
                    return v14;
                  }
                  uint64_t v24 = 0;
                  while (*((unsigned __int8 *)v14 + v24 + 16) == v5[v24])
                  {
                    if (v22 == ++v24) {
                      return v14;
                    }
                  }
                }
              }
            }
            else if ((v21 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            char v14 = (uint64_t *)*v14;
            if (!v14) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v17 = v14[1];
          if (v17 == v10)
          {
            uint64_t v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0) {
              uint64_t v19 = *((unsigned __int8 *)v14 + 39);
            }
            else {
              uint64_t v19 = v14[3];
            }
            if (v19 == v16)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp((const void *)v14[2], v5, v14[3])) {
                  return v14;
                }
              }
              else
              {
                if (!*((unsigned char *)v14 + 39)) {
                  return v14;
                }
                uint64_t v20 = 0;
                while (*((unsigned __int8 *)v14 + v20 + 16) == v5[v20])
                {
                  if (v18 == ++v20) {
                    return v14;
                  }
                }
              }
            }
          }
          else
          {
            if (v17 >= v11) {
              v17 %= v11;
            }
            if (v17 != v3) {
              break;
            }
          }
          char v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  char v25 = operator new(0x60uLL);
  v41[0] = v25;
  v41[1] = a1 + 16;
  char v42 = 0;
  void *v25 = 0;
  v25[1] = v10;
  sub_1B4C0D88C(v25 + 2, a3);
  char v42 = 1;
  float v26 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v27 = *(float *)(a1 + 32);
  if (!v11 || (float)(v27 * (float)v11) < v26)
  {
    BOOL v30 = 1;
    if (v11 >= 3) {
      BOOL v30 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v31 = v30 | (2 * v11);
    unint64_t v32 = vcvtps_u32_f32(v26 / v27);
    if (v31 <= v32) {
      size_t prime = v32;
    }
    else {
      size_t prime = v31;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v34 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v34) {
      goto LABEL_65;
    }
    if (prime < *(void *)&v34)
    {
      unint64_t v35 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v34 < 3uLL || (uint8x8_t v36 = (uint8x8_t)vcnt_s8(v34), v36.i16[0] = vaddlv_u8(v36), v36.u32[0] > 1uLL))
      {
        unint64_t v35 = std::__next_prime(v35);
      }
      else
      {
        uint64_t v37 = 1 << -(char)__clz(v35 - 1);
        if (v35 >= 2) {
          unint64_t v35 = v37;
        }
      }
      if (prime <= v35) {
        size_t prime = v35;
      }
      if (prime < *(void *)&v34) {
LABEL_65:
      }
        sub_1B4C0C040(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    unint64_t v38 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        unint64_t v3 = v10 % v11;
        int64_t v28 = *(void **)(*(void *)a1 + 8 * (v10 % v11));
        long long v29 = (void *)v41[0];
        if (v28) {
          goto LABEL_54;
        }
      }
      else
      {
        unint64_t v3 = v10;
        int64_t v28 = *(void **)(*(void *)a1 + 8 * v10);
        long long v29 = (void *)v41[0];
        if (v28) {
          goto LABEL_54;
        }
      }
    }
    else
    {
      unint64_t v3 = v38 & v10;
      int64_t v28 = *(void **)(*(void *)a1 + 8 * (v38 & v10));
      long long v29 = (void *)v41[0];
      if (v28) {
        goto LABEL_54;
      }
    }
LABEL_78:
    *long long v29 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v41[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v41[0])
    {
      unint64_t v39 = *(void *)(*(void *)v41[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v39 >= v11) {
          v39 %= v11;
        }
      }
      else
      {
        v39 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v39) = v41[0];
    }
    goto LABEL_89;
  }
  int64_t v28 = *(void **)(*(void *)a1 + 8 * v3);
  long long v29 = (void *)v41[0];
  if (!v28) {
    goto LABEL_78;
  }
LABEL_54:
  *long long v29 = *v28;
  *int64_t v28 = v41[0];
LABEL_89:
  char v14 = (uint64_t *)v41[0];
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_1B4C0D858(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1B4C0C1F0((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

void sub_1B4C0D870(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1B4C0C1F0((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

void *sub_1B4C0D88C(void *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_1B4BCA11C(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)std::locale __dst = v4;
  }
  int v5 = *((_DWORD *)a2 + 8);
  __dst[5] = 0;
  __dst[3] = &unk_1F0D54F90;
  *((_DWORD *)__dst + 8) = v5;
  __dst[6] = 0;
  __dst[7] = 0;
  unint64_t v7 = (unsigned char *)*((void *)a2 + 5);
  BOOL v6 = (unsigned char *)*((void *)a2 + 6);
  int64_t v8 = v6 - v7;
  if (v6 != v7)
  {
    if (v8 < 0) {
      sub_1B4BB3244();
    }
    unint64_t v9 = (char *)operator new(v6 - v7);
    __dst[5] = v9;
    __dst[6] = v9;
    unint64_t v10 = &v9[8 * (v8 >> 3)];
    __dst[7] = v10;
    memcpy(v9, v7, v8);
    __dst[6] = v10;
  }
  uint64_t v11 = *((void *)a2 + 9);
  __dst[8] = *((void *)a2 + 8);
  __dst[9] = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  return __dst;
}

void sub_1B4C0D97C(_Unwind_Exception *exception_object)
{
  long long v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 48) = v4;
    operator delete(v4);
    if ((*(char *)(v1 + 23) & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((*(char *)(v1 + 23) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_1B4C0D9B8(uint64_t *a1, int a2)
{
  unint64_t v3 = a1;
  std::__fs::filesystem::path __p = 0;
  uint64_t v66 = 0;
  uint64_t v67 = 0;
  if (a2 == 1)
  {
    sub_1B4C0DFC4((uint64_t)&__p, *(void *)(*a1 + 16));
    uint64_t v7 = *v3 + 8;
    int64_t v8 = *(char **)*v3;
    if (v8 != (char *)v7)
    {
      unint64_t v9 = v66;
      do
      {
        if (v9 >= v67)
        {
          unint64_t v9 = sub_1B4C0E12C(&__p, v8 + 56);
        }
        else
        {
          *unint64_t v9 = v8[56];
          *((void *)v9 + 1) = *((void *)v8 + 8);
          v8[56] = 0;
          *((void *)v8 + 8) = 0;
          v9 += 16;
        }
        uint64_t v66 = v9;
        unint64_t v10 = (char *)*((void *)v8 + 1);
        if (v10)
        {
          do
          {
            uint64_t v11 = v10;
            unint64_t v10 = *(char **)v10;
          }
          while (v10);
        }
        else
        {
          do
          {
            uint64_t v11 = (char *)*((void *)v8 + 2);
            BOOL v12 = *(void *)v11 == (void)v8;
            int64_t v8 = v11;
          }
          while (!v12);
        }
        int64_t v8 = v11;
      }
      while (v11 != (char *)v7);
    }
  }
  else if (a2 == 2)
  {
    sub_1B4C0DFC4((uint64_t)&__p, (uint64_t)(*(void *)(*a1 + 8) - *(void *)*a1) >> 4);
    uint64_t v4 = *(void *)*v3;
    uint64_t v5 = *(void *)(*v3 + 8);
    if (v4 != v5)
    {
      BOOL v6 = v66;
      do
      {
        if (v6 < v67)
        {
          char *v6 = *(unsigned char *)v4;
          *((void *)v6 + 1) = *(void *)(v4 + 8);
          *(unsigned char *)uint64_t v4 = 0;
          *(void *)(v4 + 8) = 0;
          v6 += 16;
        }
        else
        {
          BOOL v6 = sub_1B4C0E12C(&__p, (char *)v4);
        }
        uint64_t v66 = v6;
        v4 += 16;
      }
      while (v4 != v5);
    }
  }
  char v14 = (char *)__p;
  uint64_t v13 = v66;
  if (__p != v66)
  {
    unint64_t v62 = v3;
    while (1)
    {
      unsigned __int8 v63 = *(v13 - 16);
      int64_t v64 = (void *)*((void *)v13 - 1);
      *(v13 - 16) = 0;
      *((void *)v13 - 1) = 0;
      char v15 = v66 - 16;
      sub_1B4C0D9B8(v66 - 8, *(v66 - 16));
      uint64_t v66 = v15;
      if (v63 == 1) {
        break;
      }
      if (v63 == 2)
      {
        uint64_t v16 = (void *)*v64;
        unint64_t v17 = v64 + 1;
        uint64_t v18 = (void *)v64[1];
        if ((void *)*v64 != v18)
        {
          do
          {
            if (v15 < v67)
            {
              *char v15 = *(unsigned char *)v16;
              *((void *)v15 + 1) = v16[1];
              *(unsigned char *)uint64_t v16 = 0;
              v16[1] = 0;
              v15 += 16;
            }
            else
            {
              uint64_t v19 = (char *)__p;
              uint64_t v20 = (v15 - (unsigned char *)__p) >> 4;
              unint64_t v21 = v20 + 1;
              if ((unint64_t)(v20 + 1) >> 60) {
                goto LABEL_105;
              }
              uint64_t v22 = v67 - (unsigned char *)__p;
              if ((v67 - (unsigned char *)__p) >> 3 > v21) {
                unint64_t v21 = v22 >> 3;
              }
              if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF0) {
                unint64_t v23 = 0xFFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v23 = v21;
              }
              if (v23 >> 60) {
                goto LABEL_106;
              }
              uint64_t v24 = (char *)operator new(16 * v23);
              char v25 = &v24[16 * v20];
              char *v25 = *(unsigned char *)v16;
              *((void *)v25 + 1) = v16[1];
              *(unsigned char *)uint64_t v16 = 0;
              v16[1] = 0;
              float v26 = v66;
              float v27 = v25;
              if (v66 != v19)
              {
                do
                {
                  char v28 = *(v26 - 16);
                  v26 -= 16;
                  *(v27 - 16) = v28;
                  v27 -= 16;
                  *((void *)v27 + 1) = *((void *)v26 + 1);
                  *float v26 = 0;
                  *((void *)v26 + 1) = 0;
                }
                while (v26 != v19);
                uint64_t v19 = v66;
              }
              long long v29 = &v24[16 * v23];
              BOOL v30 = (char *)__p;
              char v15 = v25 + 16;
              std::__fs::filesystem::path __p = v27;
              uint64_t v66 = v25 + 16;
              uint64_t v67 = v29;
              if (v19 != v30)
              {
                unint64_t v31 = v19 - 8;
                do
                {
                  unint64_t v32 = v31 - 8;
                  sub_1B4C0D9B8(v31, *(v31 - 8));
                  v31 -= 16;
                }
                while (v32 != v30);
              }
              if (v30) {
                operator delete(v30);
              }
            }
            uint64_t v66 = v15;
            v16 += 2;
          }
          while (v16 != v18);
          uint64_t v16 = (void *)*v64;
          unint64_t v17 = v64 + 1;
          uint64_t v50 = v64[1];
          if (v50 == *v64)
          {
            *unint64_t v17 = v50;
            goto LABEL_24;
          }
          uint64_t v51 = v50 - 8;
          do
          {
            int v52 = (void *)(v51 - 8);
            sub_1B4C0D9B8(v51, *(unsigned __int8 *)(v51 - 8));
            v51 -= 16;
          }
          while (v52 != v16);
        }
        *unint64_t v17 = v16;
      }
LABEL_24:
      sub_1B4C0D9B8(&v64, v63);
      char v14 = (char *)__p;
      uint64_t v13 = v66;
      if (__p == v66)
      {
        unint64_t v3 = v62;
        goto LABEL_83;
      }
    }
    uint64_t v33 = (uint64_t)v64;
    int8x8_t v34 = v64 + 1;
    unint64_t v35 = (void *)*v64;
    if ((void *)*v64 == v64 + 1)
    {
LABEL_80:
      sub_1B4C0E258(v33, *(char **)(v33 + 8));
      *(void *)uint64_t v33 = v33 + 8;
      *(void *)(v33 + 16) = 0;
      *(void *)(v33 + 8) = 0;
      goto LABEL_24;
    }
    while (1)
    {
      if (v15 < v67)
      {
        *char v15 = *((unsigned char *)v35 + 56);
        *((void *)v15 + 1) = v35[8];
        *((unsigned char *)v35 + 56) = 0;
        v35[8] = 0;
        v15 += 16;
        uint64_t v66 = v15;
        uint8x8_t v36 = (void *)v35[1];
        if (v36) {
          goto LABEL_70;
        }
        goto LABEL_72;
      }
      uint64_t v37 = (char *)__p;
      uint64_t v38 = (v15 - (unsigned char *)__p) >> 4;
      unint64_t v39 = v38 + 1;
      if ((unint64_t)(v38 + 1) >> 60) {
LABEL_105:
      }
        sub_1B4C0E0BC();
      uint64_t v40 = v67 - (unsigned char *)__p;
      if ((v67 - (unsigned char *)__p) >> 3 > v39) {
        unint64_t v39 = v40 >> 3;
      }
      if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v41 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v41 = v39;
      }
      if (v41 >> 60) {
LABEL_106:
      }
        sub_1B4BB2D38();
      char v42 = (char *)operator new(16 * v41);
      unint64_t v43 = &v42[16 * v38];
      char *v43 = *((unsigned char *)v35 + 56);
      *((void *)v43 + 1) = v35[8];
      *((unsigned char *)v35 + 56) = 0;
      v35[8] = 0;
      int64_t v44 = v43 + 16;
      if (v15 == v37)
      {
        std::__fs::filesystem::path __p = v43;
        uint64_t v66 = v43 + 16;
        uint64_t v67 = &v42[16 * v41];
      }
      else
      {
        do
        {
          char v45 = *(v15 - 16);
          v15 -= 16;
          *(v43 - 16) = v45;
          v43 -= 16;
          *((void *)v43 + 1) = *((void *)v15 + 1);
          *char v15 = 0;
          *((void *)v15 + 1) = 0;
        }
        while (v15 != v37);
        char v15 = (char *)__p;
        char v46 = v66;
        std::__fs::filesystem::path __p = v43;
        uint64_t v66 = v44;
        uint64_t v67 = &v42[16 * v41];
        if (v46 != v15)
        {
          unint64_t v47 = v46 - 8;
          do
          {
            uint64_t v48 = v47 - 8;
            sub_1B4C0D9B8(v47, *(v47 - 8));
            v47 -= 16;
          }
          while (v48 != v15);
        }
        if (!v15)
        {
          char v15 = v44;
          uint64_t v66 = v44;
          uint8x8_t v36 = (void *)v35[1];
          if (v36) {
            goto LABEL_70;
          }
          goto LABEL_72;
        }
      }
      operator delete(v15);
      char v15 = v44;
      uint64_t v66 = v44;
      uint8x8_t v36 = (void *)v35[1];
      if (v36)
      {
        do
        {
LABEL_70:
          uint64_t v49 = v36;
          uint8x8_t v36 = (void *)*v36;
        }
        while (v36);
        goto LABEL_49;
      }
      do
      {
LABEL_72:
        uint64_t v49 = (void *)v35[2];
        BOOL v12 = *v49 == (void)v35;
        unint64_t v35 = v49;
      }
      while (!v12);
LABEL_49:
      unint64_t v35 = v49;
      if (v49 == v34)
      {
        uint64_t v33 = (uint64_t)v64;
        goto LABEL_80;
      }
    }
  }
LABEL_83:
  switch(a2)
  {
    case 3:
      int64_t v53 = (void **)*v3;
      if (*(char *)(*v3 + 23) < 0)
      {
        uint64_t v56 = *v53;
LABEL_95:
        operator delete(v56);
LABEL_96:
        int64_t v53 = (void **)*v3;
      }
      break;
    case 2:
      int64_t v53 = (void **)*v3;
      uint64_t v54 = *(void **)*v3;
      if (v54)
      {
        int v55 = v53[1];
        uint64_t v56 = *(void **)*v3;
        if (v55 != v54)
        {
          uint64_t v57 = (uint64_t)v55 - 8;
          do
          {
            unsigned int v58 = (void *)(v57 - 8);
            sub_1B4C0D9B8(v57, *(unsigned __int8 *)(v57 - 8));
            v57 -= 16;
          }
          while (v58 != v54);
          uint64_t v56 = *v53;
        }
        v53[1] = v54;
        goto LABEL_95;
      }
      break;
    case 1:
      sub_1B4C0E258(*v3, *(char **)(*v3 + 8));
      goto LABEL_96;
    default:
      goto LABEL_98;
  }
  operator delete(v53);
  char v14 = (char *)__p;
LABEL_98:
  if (v14)
  {
    unsigned int v59 = v14;
    if (v66 != v14)
    {
      uint64_t v60 = v66 - 8;
      do
      {
        unint64_t v61 = v60 - 8;
        sub_1B4C0D9B8(v60, *(v60 - 8));
        v60 -= 16;
      }
      while (v61 != v14);
      unsigned int v59 = __p;
    }
    uint64_t v66 = v14;
    operator delete(v59);
  }
}

void sub_1B4C0DFC4(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = *(char **)a1;
  if (a2 <= (uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4) {
    return;
  }
  if (a2 >> 60) {
    sub_1B4C0E0BC();
  }
  uint64_t v4 = *(char **)(a1 + 8);
  uint64_t v5 = 16 * a2;
  BOOL v6 = (char *)operator new(16 * a2);
  uint64_t v7 = &v6[v5];
  int64_t v8 = &v6[v4 - v2];
  if (v4 == v2)
  {
    *(void *)a1 = v8;
    *(void *)(a1 + 8) = v8;
    *(void *)(a1 + 16) = v7;
    if (!v2) {
      return;
    }
    goto LABEL_10;
  }
  unint64_t v9 = &v6[v4 - v2];
  do
  {
    char v10 = *(v4 - 16);
    v4 -= 16;
    *(v9 - 16) = v10;
    v9 -= 16;
    *((void *)v9 + 1) = *((void *)v4 + 1);
    char *v4 = 0;
    *((void *)v4 + 1) = 0;
  }
  while (v4 != v2);
  uint64_t v2 = *(char **)a1;
  uint64_t v11 = *(char **)(a1 + 8);
  *(void *)a1 = v9;
  *(void *)(a1 + 8) = v8;
  *(void *)(a1 + 16) = v7;
  if (v11 != v2)
  {
    BOOL v12 = v11 - 8;
    do
    {
      uint64_t v13 = v12 - 8;
      sub_1B4C0D9B8(v12, *(v12 - 8));
      v12 -= 16;
    }
    while (v13 != v2);
  }
  if (v2)
  {
LABEL_10:
    operator delete(v2);
  }
}

void sub_1B4C0E0BC()
{
}

uint64_t sub_1B4C0E0D4(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    int v5 = *(unsigned __int8 *)(i - 16);
    uint64_t v4 = i - 16;
    *(void *)(a1 + 16) = v4;
    sub_1B4C0D9B8((uint64_t *)(v4 + 8), v5);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

char *sub_1B4C0E12C(void **a1, char *a2)
{
  uint64_t v3 = ((unsigned char *)a1[1] - (unsigned char *)*a1) >> 4;
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 60) {
    sub_1B4C0E0BC();
  }
  uint64_t v5 = (unsigned char *)a1[2] - (unsigned char *)*a1;
  if (v5 >> 3 > v4) {
    unint64_t v4 = v5 >> 3;
  }
  BOOL v6 = (unint64_t)v5 >= 0x7FFFFFFFFFFFFFF0;
  unint64_t v7 = 0xFFFFFFFFFFFFFFFLL;
  if (!v6) {
    unint64_t v7 = v4;
  }
  if (v7 >> 60) {
    sub_1B4BB2D38();
  }
  uint64_t v9 = 16 * v7;
  char v10 = (char *)operator new(16 * v7);
  uint64_t v11 = &v10[16 * v3];
  BOOL v12 = &v10[v9];
  *uint64_t v11 = *a2;
  *((void *)v11 + 1) = *((void *)a2 + 1);
  *a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t v13 = v11 + 16;
  char v14 = (char *)*a1;
  char v15 = (char *)a1[1];
  if (v15 == *a1)
  {
    *a1 = v11;
    a1[1] = v13;
    a1[2] = v12;
    if (!v15) {
      return v13;
    }
    goto LABEL_13;
  }
  do
  {
    char v16 = *(v15 - 16);
    v15 -= 16;
    *(v11 - 16) = v16;
    v11 -= 16;
    *((void *)v11 + 1) = *((void *)v15 + 1);
    *char v15 = 0;
    *((void *)v15 + 1) = 0;
  }
  while (v15 != v14);
  char v15 = (char *)*a1;
  unint64_t v17 = (char *)a1[1];
  *a1 = v11;
  a1[1] = v13;
  a1[2] = v12;
  if (v17 != v15)
  {
    uint64_t v18 = v17 - 8;
    do
    {
      uint64_t v19 = v18 - 8;
      sub_1B4C0D9B8(v18, *(v18 - 8));
      v18 -= 16;
    }
    while (v19 != v15);
  }
  if (v15) {
LABEL_13:
  }
    operator delete(v15);
  return v13;
}

void sub_1B4C0E258(uint64_t a1, char *a2)
{
  if (a2)
  {
    sub_1B4C0E258(a1, *(void *)a2);
    sub_1B4C0E258(a1, *((void *)a2 + 1));
    sub_1B4C0D9B8(a2 + 64, a2[56]);
    if (a2[55] < 0)
    {
      operator delete(*((void **)a2 + 4));
      unint64_t v4 = a2;
    }
    else
    {
      unint64_t v4 = a2;
    }
    operator delete(v4);
  }
}

void sub_1B4C0E2E8(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
  {
    sub_1B4BCA11C(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)std::__fs::filesystem::path __p = *(_OWORD *)a2;
    uint64_t v9 = *(void *)(a2 + 16);
  }
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  unint64_t v4 = (char *)HIBYTE(v9);
  if (v9 >= 0) {
    uint64_t v5 = (char *)__p;
  }
  else {
    uint64_t v5 = (char *)__p[0];
  }
  if (v9 < 0) {
    unint64_t v4 = (char *)__p[1];
  }
  sub_1B4BCC01C((std::string *)(a1 + 8), v5, &v4[(void)v5]);
  *(void *)a1 = &unk_1F0D55410;
  if (SHIBYTE(v9) < 0)
  {
    operator delete(__p[0]);
    *(void *)a1 = &unk_1F0D553D8;
    if ((*(char *)(a2 + 23) & 0x80000000) == 0) {
      goto LABEL_11;
    }
  }
  else
  {
    *(void *)a1 = &unk_1F0D553D8;
    if ((*(char *)(a2 + 23) & 0x80000000) == 0)
    {
LABEL_11:
      *(_OWORD *)BOOL v6 = *(_OWORD *)a2;
      uint64_t v7 = *(void *)(a2 + 16);
      goto LABEL_14;
    }
  }
  sub_1B4BCA11C(v6, *(void **)a2, *(void *)(a2 + 8));
LABEL_14:
  operator new();
}

void sub_1B4C0E468(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (*(char *)(v21 + 31) < 0) {
    operator delete(*v22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1B4C0E4E0(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = off_1F0D55880;
  uint64_t v2 = a1 + 24;
  *(void *)a1 = &unk_1F0D52FE8;
  *(void *)(a1 + 432) = &unk_1F0D53010;
  std::ios_base::init((std::ios_base *)(a1 + 432), (void *)(a1 + 24));
  *(void *)(a1 + 568) = 0;
  *(_DWORD *)(a1 + 576) = -1;
  *(void *)a1 = off_1F0D55858;
  *(void *)(a1 + 432) = off_1F0D558A8;
  *(void *)(a1 + 16) = off_1F0D55880;
  MEMORY[0x1BA9926A0](v2);
  if (!std::filebuf::open()) {
    std::ios_base::clear((std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24)), *(_DWORD *)(a1 + *(void *)(*(void *)a1 - 24) + 32) | 4);
  }
  return a1;
}

void sub_1B4C0E624(_Unwind_Exception *a1)
{
  std::iostream::~basic_iostream();
  MEMORY[0x1BA992920](v1);
  _Unwind_Resume(a1);
}

void *sub_1B4C0E670(void *a1)
{
  *a1 = off_1F0D55858;
  uint64_t v2 = a1 + 54;
  a1[54] = off_1F0D558A8;
  a1[2] = off_1F0D55880;
  MEMORY[0x1BA9926B0](a1 + 3);
  std::iostream::~basic_iostream();
  MEMORY[0x1BA992920](v2);
  return a1;
}

void sub_1B4C0E714(void *a1)
{
  *a1 = off_1F0D55858;
  uint64_t v1 = a1 + 54;
  a1[54] = off_1F0D558A8;
  a1[2] = off_1F0D55880;
  MEMORY[0x1BA9926B0](a1 + 3);
  std::iostream::~basic_iostream();
  MEMORY[0x1BA992920](v1);
  JUMPOUT(0x1BA9929C0);
}

void sub_1B4C0E7D8(void *a1)
{
  *(a1 - 2) = off_1F0D55858;
  a1[52] = off_1F0D558A8;
  *a1 = off_1F0D55880;
  MEMORY[0x1BA9926B0](a1 + 1);
  std::iostream::~basic_iostream();
  JUMPOUT(0x1BA992920);
}

void sub_1B4C0E87C(void *a1)
{
  *(a1 - 2) = off_1F0D55858;
  uint64_t v1 = a1 + 52;
  a1[52] = off_1F0D558A8;
  *a1 = off_1F0D55880;
  MEMORY[0x1BA9926B0](a1 + 1);
  std::iostream::~basic_iostream();
  MEMORY[0x1BA992920](v1);
  JUMPOUT(0x1BA9929C0);
}

void sub_1B4C0E938(void *a1)
{
  uint64_t v1 = (void *)((char *)a1 + *(void *)(*a1 - 24));
  *uint64_t v1 = off_1F0D55858;
  v1[54] = off_1F0D558A8;
  uint64_t v1[2] = off_1F0D55880;
  MEMORY[0x1BA9926B0](v1 + 3);
  std::iostream::~basic_iostream();
  JUMPOUT(0x1BA992920);
}

void sub_1B4C0E9F8(void *a1)
{
  uint64_t v1 = (void *)((char *)a1 + *(void *)(*a1 - 24));
  *uint64_t v1 = off_1F0D55858;
  v1[54] = off_1F0D558A8;
  uint64_t v1[2] = off_1F0D55880;
  MEMORY[0x1BA9926B0](v1 + 3);
  std::iostream::~basic_iostream();
  MEMORY[0x1BA992920](v1 + 54);
  JUMPOUT(0x1BA9929C0);
}

void sub_1B4C0EAD0(std::runtime_error *a1)
{
  a1->__vftable = (std::runtime_error_vtbl *)&unk_1F0D55628;
  std::runtime_error::~runtime_error(a1 + 1);
  std::exception::~exception(a1);
}

void sub_1B4C0EB24(int a1@<W1>, std::string *a2@<X8>)
{
  std::operator+<char>();
  unint64_t v4 = std::string::append(&v12, ".");
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v13.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v13.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&__p, a1);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  int64_t v8 = std::string::append(&v13, (const std::string::value_type *)p_p, size);
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v14.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  char v10 = std::string::append(&v14, "] ");
  *a2 = *v10;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v14.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_9:
      if ((SHIBYTE(v13.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_10;
      }
      goto LABEL_14;
    }
  }
  else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_9;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v13.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_10:
    if ((SHIBYTE(v12.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_15:
    operator delete(v12.__r_.__value_.__l.__data_);
    return;
  }
LABEL_14:
  operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_15;
  }
}

void sub_1B4C0EC70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (*(char *)(v26 - 41) < 0)
  {
    operator delete(*(void **)(v26 - 64));
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a26 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a20 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_9;
  }
LABEL_8:
  operator delete(a21);
  if ((a20 & 0x80000000) == 0) {
LABEL_5:
  }
    _Unwind_Resume(exception_object);
LABEL_9:
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

void sub_1B4C0ED0C(std::runtime_error *a1)
{
  a1->__vftable = (std::runtime_error_vtbl *)&unk_1F0D55628;
  std::runtime_error::~runtime_error(a1 + 1);
  std::exception::~exception(a1);
  JUMPOUT(0x1BA9929C0);
}

const char *sub_1B4C0ED74(const std::runtime_error *a1)
{
  return std::runtime_error::what(a1 + 1);
}

void sub_1B4C0ED7C(std::runtime_error *a1)
{
  a1->__vftable = (std::runtime_error_vtbl *)&unk_1F0D55628;
  std::runtime_error::~runtime_error(a1 + 1);
  std::exception::~exception(a1);
}

void sub_1B4C0EDD0(std::runtime_error *a1)
{
  a1->__vftable = (std::runtime_error_vtbl *)&unk_1F0D55628;
  std::runtime_error::~runtime_error(a1 + 1);
  std::exception::~exception(a1);
  JUMPOUT(0x1BA9929C0);
}

void sub_1B4C0EE38(uint64_t a1, int a2, unsigned __int8 *a3)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void *)(a1 + 24);
  if (v6)
  {
    if (v6 == a1)
    {
      uint64_t v40 = v39;
      (*(void (**)(uint64_t, void *))(*(void *)a1 + 24))(a1, v39);
    }
    else
    {
      uint64_t v40 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v6 + 16))(v6);
    }
    sub_1B4C140F0((uint64_t)&v41, (uint64_t)a3, (uint64_t)v39, *(unsigned char *)(a1 + 176));
    if (v40 == v39)
    {
      (*(void (**)(void *))(v39[0] + 32))(v39);
    }
    else if (v40)
    {
      (*(void (**)(void))(*v40 + 40))();
    }
    sub_1B4C11BA0(a1, &v41);
    if (a2)
    {
      int v13 = sub_1B4C0FAA8(a1 + 40);
      *(_DWORD *)(a1 + 32) = v13;
      if (v13 != 15)
      {
        uint64_t v14 = *(void *)(a1 + 64);
        memset(&v35, 0, sizeof(v35));
        char v15 = *(unsigned __int8 **)(a1 + 88);
        for (uint64_t i = *(unsigned __int8 **)(a1 + 96); v15 != i; ++v15)
        {
          unsigned int v17 = *v15;
          if (v17 > 0x1F)
          {
            std::string::push_back(&v35, v17);
          }
          else
          {
            char v37 = 0;
            *(void *)__str = 0;
            snprintf(__str, 9uLL, "<U+%.4X>", v17);
            std::string::append(&v35, __str);
          }
        }
        long long v33 = *(_OWORD *)(a1 + 64);
        uint64_t v34 = *(void *)(a1 + 80);
        char v30 = 5;
        strcpy((char *)v29, "value");
        sub_1B4C12CB4(a1, 0xFu, (uint64_t)v29, (uint64_t)__p);
        sub_1B4C1294C(101, (uint64_t *)&v33, (uint64_t)__p, (uint64_t)__str);
        sub_1B4C126DC((uint64_t)&v41, v14, (uint64_t)&v35, (uint64_t)__str);
        *(void *)__str = &unk_1F0D55628;
        std::runtime_error::~runtime_error(&v38);
        std::exception::~exception((std::exception *)__str);
        if (v32 < 0)
        {
          operator delete(__p[0]);
          if ((v30 & 0x80000000) == 0)
          {
LABEL_27:
            if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_28;
            }
LABEL_39:
            operator delete(v35.__r_.__value_.__l.__data_);
            if (v46) {
              goto LABEL_29;
            }
            goto LABEL_40;
          }
        }
        else if ((v30 & 0x80000000) == 0)
        {
          goto LABEL_27;
        }
        operator delete(v29[0]);
        if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
          goto LABEL_39;
        }
      }
    }
LABEL_28:
    if (v46)
    {
LABEL_29:
      uint64_t v18 = &v28;
      int v19 = *a3;
      *a3 = 8;
      char v27 = v19;
      uint64_t v20 = *((void *)a3 + 1);
      *((void *)a3 + 1) = 0;
      uint64_t v28 = v20;
      goto LABEL_42;
    }
LABEL_40:
    if (*a3 != 8)
    {
LABEL_43:
      sub_1B4C1743C((uint64_t)&v41);
      return;
    }
    uint64_t v18 = &v26;
    *a3 = 0;
    char v25 = 8;
    uint64_t v23 = *((void *)a3 + 1);
    *((void *)a3 + 1) = 0;
    uint64_t v26 = v23;
    int v19 = 8;
LABEL_42:
    sub_1B4C0D9B8(v18, v19);
    goto LABEL_43;
  }
  char v7 = *(unsigned char *)(a1 + 176);
  unint64_t v41 = a3;
  long long v42 = 0u;
  long long v43 = 0u;
  char v44 = 0;
  char v45 = v7;
  sub_1B4C13418(a1, (uint64_t)&v41);
  if (!a2) {
    goto LABEL_33;
  }
  int v8 = sub_1B4C0FAA8(a1 + 40);
  *(_DWORD *)(a1 + 32) = v8;
  if (v8 == 15) {
    goto LABEL_33;
  }
  uint64_t v9 = *(void *)(a1 + 64);
  memset(&v35, 0, sizeof(v35));
  char v10 = *(unsigned __int8 **)(a1 + 88);
  for (int j = *(unsigned __int8 **)(a1 + 96); v10 != j; ++v10)
  {
    unsigned int v12 = *v10;
    if (v12 > 0x1F)
    {
      std::string::push_back(&v35, v12);
    }
    else
    {
      char v37 = 0;
      *(void *)__str = 0;
      snprintf(__str, 9uLL, "<U+%.4X>", v12);
      std::string::append(&v35, __str);
    }
  }
  long long v33 = *(_OWORD *)(a1 + 64);
  uint64_t v34 = *(void *)(a1 + 80);
  char v30 = 5;
  strcpy((char *)v29, "value");
  sub_1B4C12CB4(a1, 0xFu, (uint64_t)v29, (uint64_t)__p);
  sub_1B4C1294C(101, (uint64_t *)&v33, (uint64_t)__p, (uint64_t)__str);
  sub_1B4C13F68((uint64_t)&v41, v9, (uint64_t)&v35, (uint64_t)__str);
  *(void *)__str = &unk_1F0D55628;
  std::runtime_error::~runtime_error(&v38);
  std::exception::~exception((std::exception *)__str);
  if ((v32 & 0x80000000) == 0)
  {
    if ((v30 & 0x80000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_46;
  }
  operator delete(__p[0]);
  if (v30 < 0)
  {
LABEL_46:
    operator delete(v29[0]);
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_47;
    }
LABEL_33:
    if (!v44) {
      goto LABEL_35;
    }
    goto LABEL_34;
  }
LABEL_32:
  if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_33;
  }
LABEL_47:
  operator delete(v35.__r_.__value_.__l.__data_);
  if (v44)
  {
LABEL_34:
    int v21 = *a3;
    *a3 = 8;
    uint64_t v22 = *((void *)a3 + 1);
    *((void *)a3 + 1) = 0;
    uint64_t v24 = v22;
    sub_1B4C0D9B8(&v24, v21);
  }
LABEL_35:
  if ((void)v42)
  {
    *((void *)&v42 + 1) = v42;
    operator delete((void *)v42);
  }
}

void sub_1B4C0F364(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,std::runtime_error a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  sub_1B4C133C4(&a39);
  if (a28 < 0)
  {
    operator delete(__p);
    if ((a22 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a38 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  else if ((a22 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a17);
  if ((a38 & 0x80000000) == 0)
  {
LABEL_4:
    char v45 = *(void **)(v43 - 216);
    if (!v45) {
LABEL_11:
    }
      _Unwind_Resume(a1);
LABEL_9:
    *(void *)(v43 - 208) = v45;
    operator delete(v45);
    _Unwind_Resume(a1);
  }
LABEL_10:
  operator delete(a33);
  char v45 = *(void **)(v43 - 216);
  if (!v45) {
    goto LABEL_11;
  }
  goto LABEL_9;
}

void sub_1B4C0F4BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0)
  {
    operator delete(a27);
    sub_1B4C1743C(v32 - 224);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B4C0F3FCLL);
}

void sub_1B4C0F4CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0) {
    JUMPOUT(0x1B4C0F4D8);
  }
  JUMPOUT(0x1B4C0F3FCLL);
}

uint64_t sub_1B4C0F4F0(uint64_t a1)
{
  if (*(char *)(a1 + 135) < 0)
  {
    operator delete(*(void **)(a1 + 112));
    uint64_t v2 = *(void **)(a1 + 88);
    if (!v2) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  uint64_t v2 = *(void **)(a1 + 88);
  if (v2)
  {
LABEL_3:
    *(void *)(a1 + 96) = v2;
    operator delete(v2);
  }
LABEL_4:
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    uint64_t v4 = *(void *)(a1 + 24);
    if (v4 != a1) {
      goto LABEL_7;
    }
LABEL_13:
    (*(void (**)(uint64_t))(*(void *)a1 + 32))(a1);
    return a1;
  }
  uint64_t v4 = *(void *)(a1 + 24);
  if (v4 == a1) {
    goto LABEL_13;
  }
LABEL_7:
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 40))(v4);
  }
  return a1;
}

void *sub_1B4C0F600(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

void sub_1B4C0F690(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0D55CC0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1B4C0F6B0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0D55CC0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1BA9929C0);
}

uint64_t sub_1B4C0F704(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 8))();
}

uint64_t sub_1B4C0F72C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  uint64_t v3 = (unsigned __int8 *)v2[3];
  if (v3 == (unsigned __int8 *)v2[4])
  {
    uint64_t result = (*(uint64_t (**)(void *))(*v2 + 80))(v2);
    if (result == -1)
    {
      long long v5 = (std::ios_base *)(*(void *)(a1 + 8) + *(void *)(**(void **)(a1 + 8) - 24));
      std::ios_base::clear(v5, v5->__rdstate_ | 2);
      return 0xFFFFFFFFLL;
    }
  }
  else
  {
    v2[3] = v3 + 1;
    return *v3;
  }
  return result;
}

void *sub_1B4C0F7CC(void *a1)
{
  *a1 = &unk_1F0D55600;
  uint64_t v2 = (std::ios_base *)(a1[1] + *(void *)(*(void *)a1[1] - 24));
  std::ios_base::clear(v2, v2->__rdstate_ & 2);
  return a1;
}

void sub_1B4C0F838(void *a1)
{
  *a1 = &unk_1F0D55600;
  uint64_t v1 = (std::ios_base *)(a1[1] + *(void *)(*(void *)a1[1] - 24));
  std::ios_base::clear(v1, v1->__rdstate_ & 2);
  JUMPOUT(0x1BA9929C0);
}

uint64_t sub_1B4C0F8C4(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7 = *(void *)(a3 + 24);
  if (v7)
  {
    if (v7 == a3)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a3 + 24) + 24))(*(void *)(a3 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 16))(v7);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  *(_OWORD *)(a1 + 4sub_1B4BC92E4(&a9, 0) = *(_OWORD *)a2;
  *(_DWORD *)(a1 + 32) = 0;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(_DWORD *)(a1 + 56) = -1;
  *(unsigned char *)(a1 + 6sub_1B4BC92E4(&a9, 0) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 8sub_1B4BC92E4(&a9, 0) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = "";
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 16sub_1B4BC92E4(&a9, 0) = 0;
  *(void *)(a1 + 144) = 0;
  int v8 = localeconv();
  if (v8->decimal_point) {
    char v9 = *v8->decimal_point;
  }
  else {
    char v9 = 46;
  }
  *(unsigned char *)(a1 + 168) = v9;
  *(unsigned char *)(a1 + 176) = a4;
  *(_DWORD *)(a1 + 32) = sub_1B4C0FAA8(a1 + 40);
  return a1;
}

void sub_1B4C0F9E0(_Unwind_Exception *a1)
{
  sub_1B4C0FA00(v2);
  sub_1B4C0F600(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1B4C0FA00(uint64_t a1)
{
  if (*(char *)(a1 + 95) < 0)
  {
    operator delete(*(void **)(a1 + 72));
    uint64_t v2 = *(void **)(a1 + 48);
    if (!v2) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
LABEL_3:
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
LABEL_4:
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v3 || atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return a1;
}

uint64_t sub_1B4C0FAA8(uint64_t a1)
{
  if (!*(void *)(a1 + 24))
  {
    if (sub_1B4C0FF2C(a1) == 239)
    {
      if (sub_1B4C0FF2C(a1) != 187 || sub_1B4C0FF2C(a1) != 191)
      {
        *(void *)(a1 + 96) = "invalid BOM; must be 0xEF 0xBB 0xBF if given";
        return 14;
      }
    }
    else
    {
      uint64_t v3 = (void *)(a1 + 32);
      uint64_t v4 = *(void *)(a1 + 32);
      *(unsigned char *)(a1 + 2sub_1B4BC92E4(&a9, 0) = 1;
      --*(void *)(a1 + 24);
      if (v4 || (uint64_t v3 = (void *)(a1 + 40), (v4 = *(void *)(a1 + 40)) != 0)) {
        void *v3 = v4 - 1;
      }
      if (*(_DWORD *)(a1 + 16) != -1) {
        --*(void *)(a1 + 56);
      }
    }
  }
  while (2)
  {
    sub_1B4C0FF2C(a1);
    switch(*(_DWORD *)(a1 + 16))
    {
      case 0xFFFFFFFF:
      case 0:
        return 15;
      case 9:
      case 0xA:
      case 0xD:
      case 0x20:
        continue;
      case 0x22:
        return sub_1B4C10184(a1);
      case 0x2C:
        return 13;
      case 0x2D:
      case 0x30:
      case 0x31:
      case 0x32:
      case 0x33:
      case 0x34:
      case 0x35:
      case 0x36:
      case 0x37:
      case 0x38:
      case 0x39:
        return sub_1B4C11408(a1);
      case 0x3A:
        return 12;
      case 0x5B:
        return 8;
      case 0x5D:
        return 10;
      case 0x66:
        if (sub_1B4C0FF2C(a1) != 97
          || sub_1B4C0FF2C(a1) != 108
          || sub_1B4C0FF2C(a1) != 115
          || sub_1B4C0FF2C(a1) != 101)
        {
          goto LABEL_38;
        }
        uint64_t result = 2;
        break;
      case 0x6E:
        if (sub_1B4C0FF2C(a1) != 117
          || sub_1B4C0FF2C(a1) != 108
          || sub_1B4C0FF2C(a1) != 108)
        {
          goto LABEL_38;
        }
        uint64_t result = 3;
        break;
      case 0x74:
        if (sub_1B4C0FF2C(a1) != 114
          || sub_1B4C0FF2C(a1) != 117
          || sub_1B4C0FF2C(a1) != 101)
        {
          goto LABEL_38;
        }
        uint64_t result = 1;
        break;
      case 0x7B:
        return 9;
      case 0x7D:
        return 11;
      default:
LABEL_38:
        *(void *)(a1 + 96) = "invalid literal";
        uint64_t result = 14;
        break;
    }
    return result;
  }
}

uint64_t sub_1B4C0FF2C(uint64_t a1)
{
  *(int64x2_t *)(a1 + 24) = vaddq_s64(*(int64x2_t *)(a1 + 24), vdupq_n_s64(1uLL));
  if (*(unsigned char *)(a1 + 20))
  {
    *(unsigned char *)(a1 + 2sub_1B4BC92E4(&a9, 0) = 0;
    int v2 = *(_DWORD *)(a1 + 16);
    if (v2 != -1) {
      goto LABEL_3;
    }
    return 0xFFFFFFFFLL;
  }
  int v15 = (***(uint64_t (****)(void))a1)();
  LOBYTE(v2) = v15;
  *(_DWORD *)(a1 + 16) = v15;
  if (v15 == -1) {
    return 0xFFFFFFFFLL;
  }
LABEL_3:
  uint64_t v4 = *(unsigned char **)(a1 + 56);
  unint64_t v3 = *(void *)(a1 + 64);
  if ((unint64_t)v4 < v3)
  {
    unsigned char *v4 = v2;
    uint64_t v5 = (uint64_t)(v4 + 1);
    goto LABEL_35;
  }
  uint64_t v6 = *(unsigned char **)(a1 + 48);
  unint64_t v7 = v4 - v6;
  uint64_t v8 = v4 - v6 + 1;
  if (v8 < 0) {
    sub_1B4C0E0BC();
  }
  unint64_t v9 = v3 - (void)v6;
  if (2 * v9 > v8) {
    uint64_t v8 = 2 * v9;
  }
  if (v9 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v10 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v10 = v8;
  }
  if (v10)
  {
    uint64_t v11 = operator new(v10);
    unsigned int v12 = &v11[v7];
    int v13 = &v11[v10];
    v11[v7] = v2;
    uint64_t v5 = (uint64_t)&v11[v7 + 1];
    if (v4 != v6)
    {
LABEL_13:
      if (v7 < 8 || (unint64_t)(v6 - v11) < 0x20) {
        goto LABEL_31;
      }
      if (v7 >= 0x20)
      {
        unint64_t v14 = v7 & 0xFFFFFFFFFFFFFFE0;
        unsigned int v17 = (long long *)(v4 - 16);
        uint64_t v18 = &v11[v4 - 16 - v6];
        unint64_t v19 = v7 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v20 = *v17;
          *(v18 - 1) = *(v17 - 1);
          *uint64_t v18 = v20;
          v18 -= 2;
          v17 -= 2;
          v19 -= 32;
        }
        while (v19);
        if (v7 == v14)
        {
LABEL_33:
          uint64_t v4 = *(unsigned char **)(a1 + 48);
          *(void *)(a1 + 48) = v11;
          *(void *)(a1 + 56) = v5;
          *(void *)(a1 + 64) = v13;
          if (!v4) {
            goto LABEL_35;
          }
          goto LABEL_34;
        }
        if ((v7 & 0x18) == 0)
        {
          v12 -= v14;
          v4 -= v14;
          goto LABEL_31;
        }
      }
      else
      {
        unint64_t v14 = 0;
      }
      v12 -= v7 & 0xFFFFFFFFFFFFFFF8;
      int v21 = &v4[-v14 - 8];
      uint64_t v22 = &v11[v21 - v6];
      unint64_t v23 = v14 - (v7 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        uint64_t v24 = *(void *)v21;
        v21 -= 8;
        *v22-- = v24;
        v23 += 8;
      }
      while (v23);
      v4 -= v7 & 0xFFFFFFFFFFFFFFF8;
      if (v7 == (v7 & 0xFFFFFFFFFFFFFFF8)) {
        goto LABEL_33;
      }
LABEL_31:
      char v25 = v12 - 1;
      do
      {
        char v26 = *--v4;
        *v25-- = v26;
      }
      while (v4 != v6);
      goto LABEL_33;
    }
  }
  else
  {
    uint64_t v11 = 0;
    unsigned int v12 = (char *)(v4 - v6);
    int v13 = 0;
    *(unsigned char *)unint64_t v7 = v2;
    uint64_t v5 = v7 + 1;
    if (v4 != v6) {
      goto LABEL_13;
    }
  }
  *(void *)(a1 + 48) = v12;
  *(void *)(a1 + 56) = v5;
  *(void *)(a1 + 64) = v13;
  if (v4) {
LABEL_34:
  }
    operator delete(v4);
LABEL_35:
  *(void *)(a1 + 56) = v5;
  uint64_t result = *(unsigned int *)(a1 + 16);
  if (result == 10)
  {
    uint64_t v27 = *(void *)(a1 + 40) + 1;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 4sub_1B4BC92E4(&a9, 0) = v27;
  }
  return result;
}

uint64_t sub_1B4C10184(uint64_t a1)
{
  if (*(char *)(a1 + 95) < 0)
  {
    **(unsigned char **)(a1 + 72) = 0;
    *(void *)(a1 + 8sub_1B4BC92E4(&a9, 0) = 0;
  }
  else
  {
    *(unsigned char *)(a1 + 72) = 0;
    *(unsigned char *)(a1 + 95) = 0;
  }
  int v2 = (void *)(a1 + 48);
  unint64_t v3 = *(unsigned char **)(a1 + 48);
  *(void *)(a1 + 56) = v3;
  int v4 = *(_DWORD *)(a1 + 16);
  unint64_t v5 = *(void *)(a1 + 64);
  if ((unint64_t)v3 >= v5)
  {
    unint64_t v7 = v5 - (void)v3;
    uint64_t v8 = 2 * v7;
    if (2 * v7 <= 1) {
      uint64_t v8 = 1;
    }
    if (v7 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v9 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v9 = v8;
    }
    size_t v10 = operator new(v9);
    *size_t v10 = v4;
    uint64_t v6 = v10 + 1;
    *(void *)(a1 + 48) = v10;
    *(void *)(a1 + 56) = v10 + 1;
    *(void *)(a1 + 64) = &v10[v9];
    if (v3) {
      operator delete(v3);
    }
  }
  else
  {
    unsigned char *v3 = v4;
    uint64_t v6 = v3 + 1;
  }
  *(void *)(a1 + 56) = v6;
  int64x2_t v115 = vdupq_n_s64(1uLL);
  while (2)
  {
    *(int64x2_t *)(a1 + 24) = vaddq_s64(*(int64x2_t *)(a1 + 24), v115);
    if (*(unsigned char *)(a1 + 20))
    {
      *(unsigned char *)(a1 + 2sub_1B4BC92E4(&a9, 0) = 0;
      int v13 = *(_DWORD *)(a1 + 16);
      if (v13 == -1) {
        goto LABEL_200;
      }
    }
    else
    {
      int v14 = (***(uint64_t (****)(void))a1)();
      LOBYTE(v13) = v14;
      *(_DWORD *)(a1 + 16) = v14;
      if (v14 == -1)
      {
LABEL_200:
        uint8x8_t v36 = "invalid string: missing closing quote";
        goto LABEL_198;
      }
    }
    char v16 = *(unsigned char **)(a1 + 56);
    unint64_t v15 = *(void *)(a1 + 64);
    if ((unint64_t)v16 >= v15)
    {
      uint64_t v18 = (unsigned char *)*v2;
      unint64_t v19 = (unint64_t)&v16[-*v2];
      unint64_t v20 = v19 + 1;
      if ((uint64_t)(v19 + 1) < 0) {
        goto LABEL_233;
      }
      unint64_t v21 = v15 - (void)v18;
      if (2 * v21 > v20) {
        unint64_t v20 = 2 * v21;
      }
      if (v21 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v22 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v22 = v20;
      }
      if (v22)
      {
        unint64_t v23 = (char *)operator new(v22);
        uint64_t v24 = &v23[v19];
        v23[v19] = v13;
        uint64_t v17 = (uint64_t)&v23[v19 + 1];
        if (v16 == v18)
        {
LABEL_50:
          *(void *)(a1 + 48) = v24;
          *(void *)(a1 + 56) = v17;
          *(void *)(a1 + 64) = &v23[v22];
          if (v16) {
            operator delete(v16);
          }
          goto LABEL_52;
        }
      }
      else
      {
        unint64_t v23 = 0;
        uint64_t v24 = &v16[-*v2];
        *(unsigned char *)unint64_t v19 = v13;
        uint64_t v17 = v19 + 1;
        if (v16 == v18) {
          goto LABEL_50;
        }
      }
      if (v19 >= 8 && (unint64_t)(v18 - v23) >= 0x20)
      {
        if (v19 < 0x20)
        {
          unint64_t v25 = 0;
          goto LABEL_42;
        }
        unint64_t v25 = v19 & 0xFFFFFFFFFFFFFFE0;
        char v26 = &v23[v19 - 16];
        uint64_t v27 = (long long *)(v16 - 16);
        unint64_t v28 = v19 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v29 = *v27;
          *((_OWORD *)v26 - 1) = *(v27 - 1);
          *(_OWORD *)char v26 = v29;
          v26 -= 32;
          v27 -= 2;
          v28 -= 32;
        }
        while (v28);
        if (v19 == v25) {
          goto LABEL_49;
        }
        if ((v19 & 0x18) != 0)
        {
LABEL_42:
          v24 -= v19 & 0xFFFFFFFFFFFFFFF8;
          char v30 = &v23[&v16[-v25] - v18 - 8];
          unint64_t v31 = (uint64_t *)&v16[-v25 - 8];
          unint64_t v32 = v25 - (v19 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            uint64_t v33 = *v31--;
            *(void *)char v30 = v33;
            v30 -= 8;
            v32 += 8;
          }
          while (v32);
          v16 -= v19 & 0xFFFFFFFFFFFFFFF8;
          if (v19 == (v19 & 0xFFFFFFFFFFFFFFF8)) {
            goto LABEL_49;
          }
          goto LABEL_47;
        }
        v24 -= v25;
        v16 -= v25;
      }
LABEL_47:
      uint64_t v34 = v24 - 1;
      do
      {
        char v35 = *--v16;
        *v34-- = v35;
      }
      while (v16 != v18);
LABEL_49:
      char v16 = (unsigned char *)*v2;
      uint64_t v24 = v23;
      goto LABEL_50;
    }
    *char v16 = v13;
    uint64_t v17 = (uint64_t)(v16 + 1);
LABEL_52:
    *(void *)(a1 + 56) = v17;
    int v12 = *(_DWORD *)(a1 + 16);
    if (v12 == 10)
    {
      uint64_t v112 = *(void *)(a1 + 40) + 1;
      *(void *)(a1 + 32) = 0;
      *(void *)(a1 + 4sub_1B4BC92E4(&a9, 0) = v112;
      uint8x8_t v36 = "invalid string: control character U+000A (LF) must be escaped to \\u000A or \\n";
      goto LABEL_198;
    }
    uint8x8_t v36 = "invalid string: missing closing quote";
    switch(v12)
    {
      case -1:
        goto LABEL_198;
      case 0:
        uint8x8_t v36 = "invalid string: control character U+0000 (NUL) must be escaped to \\u0000";
        goto LABEL_198;
      case 1:
        uint8x8_t v36 = "invalid string: control character U+0001 (SOH) must be escaped to \\u0001";
        goto LABEL_198;
      case 2:
        uint8x8_t v36 = "invalid string: control character U+0002 (STX) must be escaped to \\u0002";
        goto LABEL_198;
      case 3:
        uint8x8_t v36 = "invalid string: control character U+0003 (ETX) must be escaped to \\u0003";
        goto LABEL_198;
      case 4:
        uint8x8_t v36 = "invalid string: control character U+0004 (EOT) must be escaped to \\u0004";
        goto LABEL_198;
      case 5:
        uint8x8_t v36 = "invalid string: control character U+0005 (ENQ) must be escaped to \\u0005";
        goto LABEL_198;
      case 6:
        uint8x8_t v36 = "invalid string: control character U+0006 (ACK) must be escaped to \\u0006";
        goto LABEL_198;
      case 7:
        uint8x8_t v36 = "invalid string: control character U+0007 (BEL) must be escaped to \\u0007";
        goto LABEL_198;
      case 8:
        uint8x8_t v36 = "invalid string: control character U+0008 (BS) must be escaped to \\u0008 or \\b";
        goto LABEL_198;
      case 9:
        uint8x8_t v36 = "invalid string: control character U+0009 (HT) must be escaped to \\u0009 or \\t";
        goto LABEL_198;
      case 11:
        uint8x8_t v36 = "invalid string: control character U+000B (VT) must be escaped to \\u000B";
        goto LABEL_198;
      case 12:
        uint8x8_t v36 = "invalid string: control character U+000C (FF) must be escaped to \\u000C or \\f";
        goto LABEL_198;
      case 13:
        uint8x8_t v36 = "invalid string: control character U+000D (CR) must be escaped to \\u000D or \\r";
        goto LABEL_198;
      case 14:
        uint8x8_t v36 = "invalid string: control character U+000E (SO) must be escaped to \\u000E";
        goto LABEL_198;
      case 15:
        uint8x8_t v36 = "invalid string: control character U+000F (SI) must be escaped to \\u000F";
        goto LABEL_198;
      case 16:
        uint8x8_t v36 = "invalid string: control character U+0010 (DLE) must be escaped to \\u0010";
        goto LABEL_198;
      case 17:
        uint8x8_t v36 = "invalid string: control character U+0011 (DC1) must be escaped to \\u0011";
        goto LABEL_198;
      case 18:
        uint8x8_t v36 = "invalid string: control character U+0012 (DC2) must be escaped to \\u0012";
        goto LABEL_198;
      case 19:
        uint8x8_t v36 = "invalid string: control character U+0013 (DC3) must be escaped to \\u0013";
        goto LABEL_198;
      case 20:
        uint8x8_t v36 = "invalid string: control character U+0014 (DC4) must be escaped to \\u0014";
        goto LABEL_198;
      case 21:
        uint8x8_t v36 = "invalid string: control character U+0015 (NAK) must be escaped to \\u0015";
        goto LABEL_198;
      case 22:
        uint8x8_t v36 = "invalid string: control character U+0016 (SYN) must be escaped to \\u0016";
        goto LABEL_198;
      case 23:
        uint8x8_t v36 = "invalid string: control character U+0017 (ETB) must be escaped to \\u0017";
        goto LABEL_198;
      case 24:
        uint8x8_t v36 = "invalid string: control character U+0018 (CAN) must be escaped to \\u0018";
        goto LABEL_198;
      case 25:
        uint8x8_t v36 = "invalid string: control character U+0019 (EM) must be escaped to \\u0019";
        goto LABEL_198;
      case 26:
        uint8x8_t v36 = "invalid string: control character U+001A (SUB) must be escaped to \\u001A";
        goto LABEL_198;
      case 27:
        uint8x8_t v36 = "invalid string: control character U+001B (ESC) must be escaped to \\u001B";
        goto LABEL_198;
      case 28:
        uint8x8_t v36 = "invalid string: control character U+001C (FS) must be escaped to \\u001C";
        goto LABEL_198;
      case 29:
        uint8x8_t v36 = "invalid string: control character U+001D (GS) must be escaped to \\u001D";
        goto LABEL_198;
      case 30:
        uint8x8_t v36 = "invalid string: control character U+001E (RS) must be escaped to \\u001E";
        goto LABEL_198;
      case 31:
        uint8x8_t v36 = "invalid string: control character U+001F (US) must be escaped to \\u001F";
        goto LABEL_198;
      case 32:
      case 33:
      case 35:
      case 36:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
      case 45:
      case 46:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
      case 58:
      case 59:
      case 60:
      case 61:
      case 62:
      case 63:
      case 64:
      case 65:
      case 66:
      case 67:
      case 68:
      case 69:
      case 70:
      case 71:
      case 72:
      case 73:
      case 74:
      case 75:
      case 76:
      case 77:
      case 78:
      case 79:
      case 80:
      case 81:
      case 82:
      case 83:
      case 84:
      case 85:
      case 86:
      case 87:
      case 88:
      case 89:
      case 90:
      case 91:
      case 93:
      case 94:
      case 95:
      case 96:
      case 97:
      case 98:
      case 99:
      case 100:
      case 101:
      case 102:
      case 103:
      case 104:
      case 105:
      case 106:
      case 107:
      case 108:
      case 109:
      case 110:
      case 111:
      case 112:
      case 113:
      case 114:
      case 115:
      case 116:
      case 117:
      case 118:
      case 119:
      case 120:
      case 121:
      case 122:
      case 123:
      case 124:
      case 125:
      case 126:
      case 127:
        goto LABEL_17;
      case 34:
        return 4;
      case 92:
        int v72 = sub_1B4C0FF2C(a1);
        uint8x8_t v36 = "invalid string: forbidden character after backslash";
        LOBYTE(v12) = 34;
        switch(v72)
        {
          case '""':
            goto LABEL_17;
          case '/':
            LOBYTE(v12) = 47;
            goto LABEL_17;
          case '\\':
            LOBYTE(v12) = 92;
            goto LABEL_17;
          case 'b':
            LOBYTE(v12) = 8;
            goto LABEL_17;
          case 'f':
            LOBYTE(v12) = 12;
            goto LABEL_17;
          case 'n':
            LOBYTE(v12) = 10;
            goto LABEL_17;
          case 'r':
            LOBYTE(v12) = 13;
            goto LABEL_17;
          case 't':
            LOBYTE(v12) = 9;
            goto LABEL_17;
          case 'u':
            unsigned int v83 = sub_1B4C119F0(a1);
            if (v83 == -1) {
              goto LABEL_234;
            }
            unsigned int v84 = v83;
            if ((v83 & 0xFFFFFC00) == 0xD800)
            {
              if (sub_1B4C0FF2C(a1) != 92 || sub_1B4C0FF2C(a1) != 117)
              {
LABEL_235:
                uint8x8_t v36 = "invalid string: surrogate U+DC00..U+DFFF must be followed by U+DC00..U+DFFF";
                goto LABEL_198;
              }
              unsigned int v85 = sub_1B4C119F0(a1);
              if (v85 == -1)
              {
LABEL_234:
                uint8x8_t v36 = "invalid string: '\\u' must be followed by 4 hex digits";
                goto LABEL_198;
              }
              if (v85 >> 10 != 55) {
                goto LABEL_235;
              }
              unsigned int v84 = v85 + (v84 << 10) - 56613888;
              goto LABEL_141;
            }
            if ((v83 & 0xFFFFFC00) == 0xDC00)
            {
              uint8x8_t v36 = "invalid string: surrogate U+DC00..U+DFFF must follow U+D800..U+DBFF";
              goto LABEL_198;
            }
            if ((int)v83 > 127)
            {
              if (v83 > 0x7FF)
              {
                if (!HIWORD(v83))
                {
                  std::string::push_back((std::string *)(a1 + 72), (v83 >> 12) | 0xE0);
                  goto LABEL_142;
                }
LABEL_141:
                std::string::push_back((std::string *)(a1 + 72), (v84 >> 18) | 0xF0);
                std::string::push_back((std::string *)(a1 + 72), (v84 >> 12) & 0x3F | 0x80);
LABEL_142:
                std::string::push_back((std::string *)(a1 + 72), (v84 >> 6) & 0x3F | 0x80);
                LOBYTE(v12) = v84 & 0x3F | 0x80;
                goto LABEL_17;
              }
              std::string::push_back((std::string *)(a1 + 72), (v83 >> 6) | 0xC0);
              LOBYTE(v12) = v84 & 0x3F | 0x80;
            }
            else
            {
              LOBYTE(v12) = v83;
            }
            break;
          default:
            goto LABEL_198;
        }
        goto LABEL_17;
      case 194:
      case 195:
      case 196:
      case 197:
      case 198:
      case 199:
      case 200:
      case 201:
      case 202:
      case 203:
      case 204:
      case 205:
      case 206:
      case 207:
      case 208:
      case 209:
      case 210:
      case 211:
      case 212:
      case 213:
      case 214:
      case 215:
      case 216:
      case 217:
      case 218:
      case 219:
      case 220:
      case 221:
      case 222:
      case 223:
        std::string::push_back((std::string *)(a1 + 72), v12);
        *(int64x2_t *)(a1 + 24) = vaddq_s64(*(int64x2_t *)(a1 + 24), vdupq_n_s64(1uLL));
        if (*(unsigned char *)(a1 + 20))
        {
          *(unsigned char *)(a1 + 2sub_1B4BC92E4(&a9, 0) = 0;
          int v37 = *(_DWORD *)(a1 + 16);
          if (v37 == -1) {
            goto LABEL_197;
          }
        }
        else
        {
          int v39 = (***(uint64_t (****)(void))a1)();
          LOBYTE(v37) = v39;
          *(_DWORD *)(a1 + 16) = v39;
          if (v39 == -1) {
            goto LABEL_197;
          }
        }
        unint64_t v41 = *(unsigned char **)(a1 + 56);
        unint64_t v40 = *(void *)(a1 + 64);
        if ((unint64_t)v41 < v40)
        {
          *unint64_t v41 = v37;
          uint64_t v11 = (uint64_t)(v41 + 1);
          goto LABEL_15;
        }
        long long v42 = (unsigned char *)*v2;
        unint64_t v43 = (unint64_t)&v41[-*v2];
        unint64_t v44 = v43 + 1;
        if ((uint64_t)(v43 + 1) < 0) {
          goto LABEL_233;
        }
        unint64_t v45 = v40 - (void)v42;
        if (2 * v45 > v44) {
          unint64_t v44 = 2 * v45;
        }
        if (v45 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v46 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v46 = v44;
        }
        if (v46)
        {
          uint64_t v47 = (char *)operator new(v46);
          uint64_t v48 = &v47[v43];
          v47[v43] = v37;
          uint64_t v11 = (uint64_t)&v47[v43 + 1];
          if (v41 == v42) {
            goto LABEL_127;
          }
        }
        else
        {
          uint64_t v47 = 0;
          uint64_t v48 = &v41[-*v2];
          *(unsigned char *)unint64_t v43 = v37;
          uint64_t v11 = v43 + 1;
          if (v41 == v42) {
            goto LABEL_127;
          }
        }
        if (v43 < 8 || (unint64_t)(v42 - v47) < 0x20) {
          goto LABEL_124;
        }
        if (v43 >= 0x20)
        {
          unint64_t v49 = v43 & 0xFFFFFFFFFFFFFFE0;
          unsigned __int8 v63 = &v47[v43 - 16];
          int64_t v64 = (long long *)(v41 - 16);
          unint64_t v65 = v43 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            long long v66 = *v64;
            *((_OWORD *)v63 - 1) = *(v64 - 1);
            *(_OWORD *)unsigned __int8 v63 = v66;
            v63 -= 32;
            v64 -= 2;
            v65 -= 32;
          }
          while (v65);
          if (v43 == v49) {
            goto LABEL_126;
          }
          if ((v43 & 0x18) == 0)
          {
            v48 -= v49;
            v41 -= v49;
LABEL_124:
            long long v81 = v48 - 1;
            do
            {
              char v82 = *--v41;
              *v81-- = v82;
            }
            while (v41 != v42);
            goto LABEL_126;
          }
        }
        else
        {
          unint64_t v49 = 0;
        }
        v48 -= v43 & 0xFFFFFFFFFFFFFFF8;
        uint64_t v67 = &v47[&v41[-v49] - v42 - 8];
        uint64_t v68 = (uint64_t *)&v41[-v49 - 8];
        unint64_t v69 = v49 - (v43 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          uint64_t v70 = *v68--;
          *(void *)uint64_t v67 = v70;
          v67 -= 8;
          v69 += 8;
        }
        while (v69);
        v41 -= v43 & 0xFFFFFFFFFFFFFFF8;
        if (v43 != (v43 & 0xFFFFFFFFFFFFFFF8)) {
          goto LABEL_124;
        }
LABEL_126:
        unint64_t v41 = (unsigned char *)*v2;
        uint64_t v48 = v47;
LABEL_127:
        *(void *)(a1 + 48) = v48;
        *(void *)(a1 + 56) = v11;
        *(void *)(a1 + 64) = &v47[v46];
        if (v41) {
          operator delete(v41);
        }
LABEL_15:
        *(void *)(a1 + 56) = v11;
        int v12 = *(_DWORD *)(a1 + 16);
        if (v12 == 10) {
          goto LABEL_196;
        }
        goto LABEL_16;
      case 224:
        std::string::push_back((std::string *)(a1 + 72), -32);
        sub_1B4C0FF2C(a1);
        int v71 = *(_DWORD *)(a1 + 16);
        if ((v71 - 192) < 0xFFFFFFE0) {
          goto LABEL_197;
        }
        goto LABEL_107;
      case 225:
      case 226:
      case 227:
      case 228:
      case 229:
      case 230:
      case 231:
      case 232:
      case 233:
      case 234:
      case 235:
      case 236:
      case 238:
      case 239:
        std::string::push_back((std::string *)(a1 + 72), v12);
        *(int64x2_t *)(a1 + 24) = vaddq_s64(*(int64x2_t *)(a1 + 24), vdupq_n_s64(1uLL));
        if (*(unsigned char *)(a1 + 20))
        {
          *(unsigned char *)(a1 + 2sub_1B4BC92E4(&a9, 0) = 0;
          int v38 = *(_DWORD *)(a1 + 16);
          if (v38 == -1) {
            goto LABEL_197;
          }
        }
        else
        {
          int v50 = (***(uint64_t (****)(void))a1)();
          LOBYTE(v38) = v50;
          *(_DWORD *)(a1 + 16) = v50;
          if (v50 == -1) {
            goto LABEL_197;
          }
        }
        int v52 = *(unsigned char **)(a1 + 56);
        unint64_t v51 = *(void *)(a1 + 64);
        if ((unint64_t)v52 < v51)
        {
          *int v52 = v38;
          uint64_t v53 = (uint64_t)(v52 + 1);
          goto LABEL_150;
        }
        uint64_t v54 = (unsigned char *)*v2;
        unint64_t v55 = (unint64_t)&v52[-*v2];
        unint64_t v56 = v55 + 1;
        if ((uint64_t)(v55 + 1) < 0) {
          goto LABEL_233;
        }
        unint64_t v57 = v51 - (void)v54;
        if (2 * v57 > v56) {
          unint64_t v56 = 2 * v57;
        }
        if (v57 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v58 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v58 = v56;
        }
        if (v58)
        {
          unsigned int v59 = (char *)operator new(v58);
          uint64_t v60 = &v59[v55];
          v59[v55] = v38;
          uint64_t v53 = (uint64_t)&v59[v55 + 1];
          if (v52 == v54) {
            goto LABEL_148;
          }
        }
        else
        {
          unsigned int v59 = 0;
          uint64_t v60 = &v52[-*v2];
          *(unsigned char *)unint64_t v55 = v38;
          uint64_t v53 = v55 + 1;
          if (v52 == v54) {
            goto LABEL_148;
          }
        }
        if (v55 < 8 || (unint64_t)(v54 - v59) < 0x20) {
          goto LABEL_145;
        }
        if (v55 >= 0x20)
        {
          unint64_t v62 = v55 & 0xFFFFFFFFFFFFFFE0;
          uint64_t v73 = &v59[v55 - 16];
          uint64_t v74 = (long long *)(v52 - 16);
          unint64_t v75 = v55 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            long long v76 = *v74;
            *((_OWORD *)v73 - 1) = *(v74 - 1);
            *(_OWORD *)uint64_t v73 = v76;
            v73 -= 32;
            v74 -= 2;
            v75 -= 32;
          }
          while (v75);
          if (v55 == v62) {
            goto LABEL_147;
          }
          if ((v55 & 0x18) == 0)
          {
            v60 -= v62;
            v52 -= v62;
LABEL_145:
            char v86 = v60 - 1;
            do
            {
              char v87 = *--v52;
              *v86-- = v87;
            }
            while (v52 != v54);
            goto LABEL_147;
          }
        }
        else
        {
          unint64_t v62 = 0;
        }
        v60 -= v55 & 0xFFFFFFFFFFFFFFF8;
        uint64_t v77 = &v59[&v52[-v62] - v54 - 8];
        uint64_t v78 = (uint64_t *)&v52[-v62 - 8];
        unint64_t v79 = v62 - (v55 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          uint64_t v80 = *v78--;
          *(void *)uint64_t v77 = v80;
          v77 -= 8;
          v79 += 8;
        }
        while (v79);
        v52 -= v55 & 0xFFFFFFFFFFFFFFF8;
        if (v55 != (v55 & 0xFFFFFFFFFFFFFFF8)) {
          goto LABEL_145;
        }
LABEL_147:
        int v52 = (unsigned char *)*v2;
        uint64_t v60 = v59;
LABEL_148:
        *(void *)(a1 + 48) = v60;
        *(void *)(a1 + 56) = v53;
        *(void *)(a1 + 64) = &v59[v58];
        if (v52) {
          operator delete(v52);
        }
LABEL_150:
        *(void *)(a1 + 56) = v53;
        int v88 = *(_DWORD *)(a1 + 16);
        if (v88 != 10)
        {
          if ((v88 - 192) < 0xFFFFFFC0) {
            goto LABEL_197;
          }
          std::string::push_back((std::string *)(a1 + 72), v88);
          *(int64x2_t *)(a1 + 24) = vaddq_s64(*(int64x2_t *)(a1 + 24), vdupq_n_s64(1uLL));
          if (*(unsigned char *)(a1 + 20))
          {
            *(unsigned char *)(a1 + 2sub_1B4BC92E4(&a9, 0) = 0;
            int v89 = *(_DWORD *)(a1 + 16);
            if (v89 == -1) {
              goto LABEL_197;
            }
          }
          else
          {
            int v90 = (***(uint64_t (****)(void))a1)();
            LOBYTE(v89) = v90;
            *(_DWORD *)(a1 + 16) = v90;
            if (v90 == -1) {
              goto LABEL_197;
            }
          }
          uint64_t v92 = *(unsigned char **)(a1 + 56);
          unint64_t v91 = *(void *)(a1 + 64);
          if ((unint64_t)v92 >= v91)
          {
            unsigned int v94 = (unsigned char *)*v2;
            unint64_t v95 = (unint64_t)&v92[-*v2];
            unint64_t v96 = v95 + 1;
            if ((uint64_t)(v95 + 1) < 0) {
LABEL_233:
            }
              sub_1B4C0E0BC();
            unint64_t v97 = v91 - (void)v94;
            if (2 * v97 > v96) {
              unint64_t v96 = 2 * v97;
            }
            if (v97 >= 0x3FFFFFFFFFFFFFFFLL) {
              size_t v98 = 0x7FFFFFFFFFFFFFFFLL;
            }
            else {
              size_t v98 = v96;
            }
            if (v98)
            {
              uint64_t v99 = (char *)operator new(v98);
              size_t v100 = &v99[v95];
              v99[v95] = v89;
              uint64_t v93 = (uint64_t)&v99[v95 + 1];
              if (v92 == v94)
              {
LABEL_184:
                *(void *)(a1 + 48) = v100;
                *(void *)(a1 + 56) = v93;
                *(void *)(a1 + 64) = &v99[v98];
                if (v92) {
                  operator delete(v92);
                }
                goto LABEL_186;
              }
            }
            else
            {
              uint64_t v99 = 0;
              size_t v100 = &v92[-*v2];
              *(unsigned char *)unint64_t v95 = v89;
              uint64_t v93 = v95 + 1;
              if (v92 == v94) {
                goto LABEL_184;
              }
            }
            if (v95 >= 8 && (unint64_t)(v94 - v99) >= 0x20)
            {
              if (v95 < 0x20)
              {
                unint64_t v101 = 0;
                goto LABEL_176;
              }
              unint64_t v101 = v95 & 0xFFFFFFFFFFFFFFE0;
              long long v102 = &v99[v95 - 16];
              int v103 = (long long *)(v92 - 16);
              unint64_t v104 = v95 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                long long v105 = *v103;
                *((_OWORD *)v102 - 1) = *(v103 - 1);
                *(_OWORD *)long long v102 = v105;
                v102 -= 32;
                v103 -= 2;
                v104 -= 32;
              }
              while (v104);
              if (v95 == v101) {
                goto LABEL_183;
              }
              if ((v95 & 0x18) != 0)
              {
LABEL_176:
                v100 -= v95 & 0xFFFFFFFFFFFFFFF8;
                unint64_t v106 = &v99[&v92[-v101] - v94 - 8];
                uint64_t v107 = (uint64_t *)&v92[-v101 - 8];
                unint64_t v108 = v101 - (v95 & 0xFFFFFFFFFFFFFFF8);
                do
                {
                  uint64_t v109 = *v107--;
                  *(void *)unint64_t v106 = v109;
                  v106 -= 8;
                  v108 += 8;
                }
                while (v108);
                v92 -= v95 & 0xFFFFFFFFFFFFFFF8;
                if (v95 == (v95 & 0xFFFFFFFFFFFFFFF8)) {
                  goto LABEL_183;
                }
                goto LABEL_181;
              }
              v100 -= v101;
              v92 -= v101;
            }
LABEL_181:
            uint64_t v110 = v100 - 1;
            do
            {
              char v111 = *--v92;
              *v110-- = v111;
            }
            while (v92 != v94);
LABEL_183:
            uint64_t v92 = (unsigned char *)*v2;
            size_t v100 = v99;
            goto LABEL_184;
          }
          unsigned char *v92 = v89;
          uint64_t v93 = (uint64_t)(v92 + 1);
LABEL_186:
          *(void *)(a1 + 56) = v93;
          int v12 = *(_DWORD *)(a1 + 16);
          if (v12 == 10) {
            goto LABEL_196;
          }
LABEL_16:
          if ((v12 - 192) < 0xFFFFFFC0) {
            goto LABEL_197;
          }
LABEL_17:
          std::string::push_back((std::string *)(a1 + 72), v12);
          continue;
        }
LABEL_196:
        uint64_t v113 = *(void *)(a1 + 40) + 1;
        *(void *)(a1 + 32) = 0;
        *(void *)(a1 + 4sub_1B4BC92E4(&a9, 0) = v113;
LABEL_197:
        uint8x8_t v36 = "invalid string: ill-formed UTF-8 byte";
LABEL_198:
        *(void *)(a1 + 96) = v36;
        return 14;
      case 237:
        std::string::push_back((std::string *)(a1 + 72), -19);
        sub_1B4C0FF2C(a1);
        int v71 = *(_DWORD *)(a1 + 16);
        if ((v71 - 160) < 0xFFFFFFE0) {
          goto LABEL_197;
        }
        goto LABEL_107;
      case 240:
        std::string::push_back((std::string *)(a1 + 72), -16);
        sub_1B4C0FF2C(a1);
        int v61 = *(_DWORD *)(a1 + 16);
        if ((v61 - 192) < 0xFFFFFFD0) {
          goto LABEL_197;
        }
        goto LABEL_106;
      case 241:
      case 242:
      case 243:
        std::string::push_back((std::string *)(a1 + 72), v12);
        sub_1B4C0FF2C(a1);
        int v61 = *(_DWORD *)(a1 + 16);
        if ((v61 - 192) < 0xFFFFFFC0) {
          goto LABEL_197;
        }
        goto LABEL_106;
      case 244:
        std::string::push_back((std::string *)(a1 + 72), -12);
        sub_1B4C0FF2C(a1);
        int v61 = *(_DWORD *)(a1 + 16);
        if ((v61 - 144) < 0xFFFFFFF0) {
          goto LABEL_197;
        }
LABEL_106:
        std::string::push_back((std::string *)(a1 + 72), v61);
        sub_1B4C0FF2C(a1);
        int v71 = *(_DWORD *)(a1 + 16);
        if ((v71 - 192) < 0xFFFFFFC0) {
          goto LABEL_197;
        }
LABEL_107:
        std::string::push_back((std::string *)(a1 + 72), v71);
        sub_1B4C0FF2C(a1);
        int v12 = *(_DWORD *)(a1 + 16);
        if ((v12 - 192) < 0xFFFFFFC0) {
          goto LABEL_197;
        }
        goto LABEL_17;
      default:
        goto LABEL_197;
    }
  }
}

uint64_t sub_1B4C11408(uint64_t a1)
{
  if (*(char *)(a1 + 95) < 0)
  {
    **(unsigned char **)(a1 + 72) = 0;
    *(void *)(a1 + 8sub_1B4BC92E4(&a9, 0) = 0;
  }
  else
  {
    *(unsigned char *)(a1 + 72) = 0;
    *(unsigned char *)(a1 + 95) = 0;
  }
  unint64_t v3 = (void *)(a1 + 48);
  int v2 = *(unsigned char **)(a1 + 48);
  *(void *)(a1 + 56) = v2;
  int v4 = *(_DWORD *)(a1 + 16);
  unint64_t v5 = *(void *)(a1 + 64);
  if ((unint64_t)v2 >= v5)
  {
    unint64_t v7 = v5 - (void)v2;
    uint64_t v8 = 2 * v7;
    if (2 * v7 <= 1) {
      uint64_t v8 = 1;
    }
    if (v7 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v9 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v9 = v8;
    }
    size_t v10 = operator new(v9);
    *size_t v10 = v4;
    uint64_t v6 = v10 + 1;
    *(void *)(a1 + 48) = v10;
    *(void *)(a1 + 56) = v10 + 1;
    *(void *)(a1 + 64) = &v10[v9];
    if (v2) {
      operator delete(v2);
    }
  }
  else
  {
    *int v2 = v4;
    uint64_t v6 = v2 + 1;
  }
  uint64_t v11 = (const char *)(a1 + 72);
  *(void *)(a1 + 56) = v6;
  int v12 = *(_DWORD *)(a1 + 16);
  int v13 = 5;
  if ((v12 - 49) < 9)
  {
    int v14 = 5;
    goto LABEL_15;
  }
  if (v12 == 48)
  {
LABEL_72:
    std::string::push_back((std::string *)(a1 + 72), v12);
    int v43 = sub_1B4C0FF2C(a1);
    if (v43 == 46)
    {
LABEL_55:
      std::string::push_back((std::string *)(a1 + 72), *(unsigned char *)(a1 + 128));
      if (sub_1B4C0FF2C(a1) - 48 > 9)
      {
        long long v42 = "invalid number; expected digit after '.'";
        goto LABEL_104;
      }
      do
      {
        std::string::push_back((std::string *)(a1 + 72), *(unsigned char *)(a1 + 16));
        int v39 = sub_1B4C0FF2C(a1);
      }
      while ((v39 - 48) < 0xA);
      if (v39 != 101 && v39 != 69) {
        goto LABEL_78;
      }
    }
    else if (v43 != 69 && v43 != 101)
    {
      goto LABEL_79;
    }
    int v38 = *(_DWORD *)(a1 + 16);
LABEL_76:
    std::string::push_back((std::string *)(a1 + 72), v38);
    int v44 = sub_1B4C0FF2C(a1);
    if ((v44 - 48) < 0xA) {
      goto LABEL_77;
    }
    if (v44 == 43 || v44 == 45)
    {
      std::string::push_back((std::string *)(a1 + 72), *(unsigned char *)(a1 + 16));
      if (sub_1B4C0FF2C(a1) - 48 < 0xA)
      {
        do
LABEL_77:
          std::string::push_back((std::string *)(a1 + 72), *(unsigned char *)(a1 + 16));
        while (sub_1B4C0FF2C(a1) - 48 < 0xA);
LABEL_78:
        int v13 = 7;
        goto LABEL_79;
      }
      long long v42 = "invalid number; expected digit after exponent sign";
    }
    else
    {
      long long v42 = "invalid number; expected '+', '-', or digit after exponent";
    }
LABEL_104:
    *(void *)(a1 + 96) = v42;
    return 14;
  }
  if (v12 == 45) {
    std::string::push_back((std::string *)(a1 + 72), 45);
  }
  int v40 = sub_1B4C0FF2C(a1);
  if ((v40 - 49) >= 9)
  {
    if (v40 != 48)
    {
      long long v42 = "invalid number; expected digit after '-'";
      goto LABEL_104;
    }
    int v12 = *(_DWORD *)(a1 + 16);
    int v13 = 6;
    goto LABEL_72;
  }
  int v12 = *(_DWORD *)(a1 + 16);
  int v14 = 6;
LABEL_15:
  int v52 = v14;
  std::string::push_back((std::string *)(a1 + 72), v12);
  int64x2_t v53 = vdupq_n_s64(1uLL);
  *(int64x2_t *)(a1 + 24) = vaddq_s64(*(int64x2_t *)(a1 + 24), v53);
  if (!*(unsigned char *)(a1 + 20)) {
    goto LABEL_18;
  }
LABEL_16:
  *(unsigned char *)(a1 + 2sub_1B4BC92E4(&a9, 0) = 0;
  int v15 = *(_DWORD *)(a1 + 16);
  if (v15 == -1)
  {
LABEL_102:
    int v13 = v52;
    goto LABEL_79;
  }
  while (1)
  {
    uint64_t v18 = *(unsigned char **)(a1 + 56);
    unint64_t v17 = *(void *)(a1 + 64);
    if ((unint64_t)v18 < v17)
    {
      *uint64_t v18 = v15;
      uint64_t v19 = (uint64_t)(v18 + 1);
      goto LABEL_49;
    }
    unint64_t v20 = (unsigned char *)*v3;
    unint64_t v21 = (unint64_t)&v18[-*v3];
    unint64_t v22 = v21 + 1;
    if ((uint64_t)(v21 + 1) < 0) {
      sub_1B4C0E0BC();
    }
    unint64_t v23 = v17 - (void)v20;
    if (2 * v23 > v22) {
      unint64_t v22 = 2 * v23;
    }
    if (v23 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v24 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v24 = v22;
    }
    if (!v24)
    {
      unint64_t v25 = 0;
      char v26 = &v18[-*v3];
      *(unsigned char *)unint64_t v21 = v15;
      uint64_t v19 = v21 + 1;
      if (v18 == v20) {
        goto LABEL_47;
      }
LABEL_31:
      if (v21 >= 8 && (unint64_t)(v20 - v25) >= 0x20)
      {
        if (v21 < 0x20)
        {
          unint64_t v27 = 0;
          goto LABEL_39;
        }
        unint64_t v27 = v21 & 0xFFFFFFFFFFFFFFE0;
        unint64_t v28 = &v25[v21 - 16];
        long long v29 = (long long *)(v18 - 16);
        unint64_t v30 = v21 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v31 = *v29;
          *((_OWORD *)v28 - 1) = *(v29 - 1);
          *(_OWORD *)unint64_t v28 = v31;
          v28 -= 32;
          v29 -= 2;
          v30 -= 32;
        }
        while (v30);
        if (v21 == v27) {
          goto LABEL_46;
        }
        if ((v21 & 0x18) != 0)
        {
LABEL_39:
          v26 -= v21 & 0xFFFFFFFFFFFFFFF8;
          unint64_t v32 = &v25[&v18[-v27] - v20 - 8];
          uint64_t v33 = (uint64_t *)&v18[-v27 - 8];
          unint64_t v34 = v27 - (v21 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            uint64_t v35 = *v33--;
            *(void *)unint64_t v32 = v35;
            v32 -= 8;
            v34 += 8;
          }
          while (v34);
          v18 -= v21 & 0xFFFFFFFFFFFFFFF8;
          if (v21 == (v21 & 0xFFFFFFFFFFFFFFF8)) {
            goto LABEL_46;
          }
          goto LABEL_44;
        }
        v26 -= v27;
        v18 -= v27;
      }
LABEL_44:
      uint8x8_t v36 = v26 - 1;
      do
      {
        char v37 = *--v18;
        *v36-- = v37;
      }
      while (v18 != v20);
LABEL_46:
      uint64_t v18 = (unsigned char *)*v3;
      char v26 = v25;
      goto LABEL_47;
    }
    unint64_t v25 = (char *)operator new(v24);
    char v26 = &v25[v21];
    v25[v21] = v15;
    uint64_t v19 = (uint64_t)&v25[v21 + 1];
    if (v18 != v20) {
      goto LABEL_31;
    }
LABEL_47:
    *(void *)(a1 + 48) = v26;
    *(void *)(a1 + 56) = v19;
    *(void *)(a1 + 64) = &v25[v24];
    if (v18) {
      operator delete(v18);
    }
LABEL_49:
    *(void *)(a1 + 56) = v19;
    int v38 = *(_DWORD *)(a1 + 16);
    if ((v38 - 48) >= 0xA) {
      break;
    }
    std::string::push_back((std::string *)(a1 + 72), v38);
    *(int64x2_t *)(a1 + 24) = vaddq_s64(*(int64x2_t *)(a1 + 24), v53);
    if (*(unsigned char *)(a1 + 20)) {
      goto LABEL_16;
    }
LABEL_18:
    int v16 = (***(uint64_t (****)(void))a1)();
    LOBYTE(v15) = v16;
    *(_DWORD *)(a1 + 16) = v16;
    if (v16 == -1) {
      goto LABEL_102;
    }
  }
  if (v38 > 68)
  {
    int v13 = v52;
    if (v38 != 69 && v38 != 101) {
      goto LABEL_79;
    }
    goto LABEL_76;
  }
  int v13 = v52;
  if (v38 == 10)
  {
    uint64_t v41 = *(void *)(a1 + 40) + 1;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 4sub_1B4BC92E4(&a9, 0) = v41;
  }
  else if (v38 == 46)
  {
    goto LABEL_55;
  }
LABEL_79:
  unint64_t v45 = (void *)(a1 + 32);
  uint64_t v46 = *(void *)(a1 + 32);
  *(unsigned char *)(a1 + 2sub_1B4BC92E4(&a9, 0) = 1;
  --*(void *)(a1 + 24);
  if (v46 || (unint64_t v45 = (void *)(a1 + 40), (v46 = *(void *)(a1 + 40)) != 0)) {
    void *v45 = v46 - 1;
  }
  if (*(_DWORD *)(a1 + 16) != -1) {
    --*(void *)(a1 + 56);
  }
  __endptr = 0;
  *__error() = 0;
  if (v13 == 6)
  {
    int v50 = (const char *)(a1 + 72);
    if (*(char *)(a1 + 95) < 0) {
      int v50 = *(const char **)v11;
    }
    uint64_t v51 = strtoll(v50, &__endptr, 10);
    if (*__error()) {
      goto LABEL_93;
    }
    *(void *)(a1 + 104) = v51;
    return 6;
  }
  else
  {
    if (v13 == 5)
    {
      uint64_t v47 = (const char *)(a1 + 72);
      if (*(char *)(a1 + 95) < 0) {
        uint64_t v47 = *(const char **)v11;
      }
      unint64_t v48 = strtoull(v47, &__endptr, 10);
      if (!*__error())
      {
        *(void *)(a1 + 112) = v48;
        return 5;
      }
    }
LABEL_93:
    if (*(char *)(a1 + 95) < 0) {
      uint64_t v11 = *(const char **)v11;
    }
    *(double *)(a1 + 12sub_1B4BC92E4(&a9, 0) = strtod(v11, &__endptr);
    return 7;
  }
}

uint64_t sub_1B4C119F0(uint64_t a1)
{
  sub_1B4C0FF2C(a1);
  int v2 = *(_DWORD *)(a1 + 16);
  int v3 = v2 - 48;
  if ((v2 - 48) < 0xA)
  {
LABEL_4:
    sub_1B4C0FF2C(a1);
    int v4 = *(_DWORD *)(a1 + 16);
    int v5 = v4 - 48;
    if ((v4 - 48) < 0xA) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  if ((v2 - 65) <= 5)
  {
    int v3 = v2 - 55;
    goto LABEL_4;
  }
  if ((v2 - 97) > 5) {
    return 0xFFFFFFFFLL;
  }
  int v3 = v2 - 87;
  sub_1B4C0FF2C(a1);
  int v4 = *(_DWORD *)(a1 + 16);
  int v5 = v4 - 48;
  if ((v4 - 48) < 0xA)
  {
LABEL_5:
    sub_1B4C0FF2C(a1);
    int v6 = *(_DWORD *)(a1 + 16);
    int v7 = v6 - 48;
    if ((v6 - 48) < 0xA) {
      goto LABEL_6;
    }
LABEL_12:
    if ((v6 - 65) < 6)
    {
      int v7 = v6 - 55;
      sub_1B4C0FF2C(a1);
      int v8 = *(_DWORD *)(a1 + 16);
      int v9 = v8 - 48;
      if ((v8 - 48) < 0xA) {
        return ((v3 << 12) + (v5 << 8) + 16 * v7 + v9);
      }
      goto LABEL_20;
    }
    if ((v6 - 97) > 5) {
      return 0xFFFFFFFFLL;
    }
    int v7 = v6 - 87;
    sub_1B4C0FF2C(a1);
    int v8 = *(_DWORD *)(a1 + 16);
    int v9 = v8 - 48;
    if ((v8 - 48) >= 0xA) {
      goto LABEL_20;
    }
    return ((v3 << 12) + (v5 << 8) + 16 * v7 + v9);
  }
LABEL_10:
  if ((v4 - 65) >= 6)
  {
    if ((v4 - 97) > 5) {
      return 0xFFFFFFFFLL;
    }
    int v5 = v4 - 87;
    sub_1B4C0FF2C(a1);
    int v6 = *(_DWORD *)(a1 + 16);
    int v7 = v6 - 48;
    if ((v6 - 48) >= 0xA) {
      goto LABEL_12;
    }
  }
  else
  {
    int v5 = v4 - 55;
    sub_1B4C0FF2C(a1);
    int v6 = *(_DWORD *)(a1 + 16);
    int v7 = v6 - 48;
    if ((v6 - 48) >= 0xA) {
      goto LABEL_12;
    }
  }
LABEL_6:
  sub_1B4C0FF2C(a1);
  int v8 = *(_DWORD *)(a1 + 16);
  int v9 = v8 - 48;
  if ((v8 - 48) < 0xA) {
    return ((v3 << 12) + (v5 << 8) + 16 * v7 + v9);
  }
LABEL_20:
  if ((v8 - 65) < 6)
  {
    int v9 = v8 - 55;
    return ((v3 << 12) + (v5 << 8) + 16 * v7 + v9);
  }
  if ((v8 - 97) <= 5)
  {
    int v9 = v8 - 87;
    return ((v3 << 12) + (v5 << 8) + 16 * v7 + v9);
  }
  return 0xFFFFFFFFLL;
}

uint64_t sub_1B4C11BA0(uint64_t a1, unsigned __int8 **a2)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = a1 + 112;
  std::string __p = 0;
  unint64_t v44 = 0;
  uint64_t v45 = 0;
  uint64_t v5 = a1 + 40;
  while (2)
  {
    switch(*(_DWORD *)(a1 + 32))
    {
      case 1:
        LOBYTE(__str.__vftable) = 1;
        sub_1B4C164DC(a2, (unsigned __int8 *)&__str, 0);
        goto LABEL_18;
      case 2:
        LOBYTE(__str.__vftable) = 0;
        sub_1B4C164DC(a2, (unsigned __int8 *)&__str, 0);
        goto LABEL_18;
      case 3:
        __str.__vftable = 0;
        sub_1B4C166FC(a2, (uint64_t)&__str, 0);
        goto LABEL_18;
      case 4:
        sub_1B4C16B30(a2, v4, 0);
        goto LABEL_18;
      case 5:
        __str.__vftable = *(std::runtime_error_vtbl **)(a1 + 152);
        sub_1B4C16D9C(a2, (uint64_t *)&__str, 0);
        goto LABEL_18;
      case 6:
        __str.__vftable = *(std::runtime_error_vtbl **)(a1 + 144);
        sub_1B4C16914(a2, (uint64_t *)&__str, 0);
        goto LABEL_18;
      case 7:
        __str.__vftable = *(std::runtime_error_vtbl **)(a1 + 160);
        sub_1B4C162BC(a2, (uint64_t *)&__str, 0);
        goto LABEL_18;
      case 8:
        if (!sub_1B4C14C10((uint64_t)a2, 0xFFFFFFFFFFFFFFFFLL)) {
          goto LABEL_80;
        }
        int v6 = sub_1B4C0FAA8(v5);
        *(_DWORD *)(a1 + 32) = v6;
        if (v6 == 10)
        {
          char v7 = sub_1B4C14FA8((uint64_t)a2);
          goto LABEL_13;
        }
        unint64_t v14 = v44;
        if (v44 == v45 << 6)
        {
          if ((uint64_t)(v44 + 1) < 0) {
            sub_1B4BB3244();
          }
          unint64_t v15 = v45 << 7;
          if (v45 << 7 <= (v44 & 0xFFFFFFFFFFFFFFC0) + 64) {
            unint64_t v15 = (v44 & 0xFFFFFFFFFFFFFFC0) + 64;
          }
          if (v44 <= 0x3FFFFFFFFFFFFFFELL) {
            unint64_t v16 = v15;
          }
          else {
            unint64_t v16 = 0x7FFFFFFFFFFFFFFFLL;
          }
          sub_1B4C142B4((uint64_t)&__p, v16);
          unint64_t v14 = v44;
        }
        unint64_t v44 = v14 + 1;
        *(void *)((char *)__p + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
        continue;
      case 9:
        if ((sub_1B4C143C8((uint64_t)a2, 0xFFFFFFFFFFFFFFFFLL) & 1) == 0) {
          goto LABEL_80;
        }
        int v8 = sub_1B4C0FAA8(v5);
        *(_DWORD *)(a1 + 32) = v8;
        if (v8 != 11)
        {
          if (v8 != 4) {
            goto LABEL_83;
          }
          if (!sub_1B4C149D8((uint64_t)a2, v4)) {
            goto LABEL_80;
          }
          int v17 = sub_1B4C0FAA8(v5);
          *(_DWORD *)(a1 + 32) = v17;
          if (v17 != 12) {
            goto LABEL_84;
          }
          unint64_t v18 = v44;
          if (v44 == v45 << 6)
          {
            if ((uint64_t)(v44 + 1) < 0) {
              sub_1B4BB3244();
            }
            if (v44 > 0x3FFFFFFFFFFFFFFELL)
            {
              unint64_t v19 = 0x7FFFFFFFFFFFFFFFLL;
            }
            else if (v45 << 7 <= (v44 & 0xFFFFFFFFFFFFFFC0) + 64)
            {
              unint64_t v19 = (v44 & 0xFFFFFFFFFFFFFFC0) + 64;
            }
            else
            {
              unint64_t v19 = v45 << 7;
            }
            sub_1B4C142B4((uint64_t)&__p, v19);
            unint64_t v18 = v44;
          }
          unint64_t v44 = v18 + 1;
          *(void *)((char *)__p + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v18);
          *(_DWORD *)(a1 + 32) = sub_1B4C0FAA8(v5);
          continue;
        }
        char v7 = sub_1B4C1475C((uint64_t)a2);
LABEL_13:
        if ((v7 & 1) == 0)
        {
LABEL_80:
          uint64_t v20 = 0;
          goto LABEL_56;
        }
LABEL_18:
        unint64_t v9 = v44;
        if (!v44)
        {
LABEL_55:
          uint64_t v20 = 1;
          goto LABEL_56;
        }
        while (2)
        {
          if ((*(void *)((char *)__p + (((v9 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v9 - 1)))
          {
            int v10 = sub_1B4C0FAA8(v5);
            *(_DWORD *)(a1 + 32) = v10;
            if (v10 == 13) {
              goto LABEL_33;
            }
            if (v10 != 10)
            {
              uint64_t v31 = *(void *)(a1 + 64);
              sub_1B4C12864(v5, &v42);
              long long v40 = *(_OWORD *)(a1 + 64);
              uint64_t v41 = *(void *)(a1 + 80);
              sub_1B4BB8DC0(v36, "array");
              sub_1B4C12CB4(a1, 0xAu, (uint64_t)v36, (uint64_t)v38);
              sub_1B4C1294C(101, (uint64_t *)&v40, (uint64_t)v38, (uint64_t)&__str);
              uint64_t v32 = sub_1B4C126DC((uint64_t)a2, v31, (uint64_t)&v42, (uint64_t)&__str);
              goto LABEL_85;
            }
            if ((sub_1B4C14FA8((uint64_t)a2) & 1) == 0) {
              goto LABEL_80;
            }
LABEL_27:
            unint64_t v9 = --v44;
            if (!v44) {
              goto LABEL_55;
            }
            continue;
          }
          break;
        }
        int v11 = sub_1B4C0FAA8(v5);
        *(_DWORD *)(a1 + 32) = v11;
        if (v11 != 13)
        {
          if (v11 != 11)
          {
            uint64_t v33 = *(void *)(a1 + 64);
            sub_1B4C12864(v5, &v42);
            long long v40 = *(_OWORD *)(a1 + 64);
            uint64_t v41 = *(void *)(a1 + 80);
            sub_1B4BB8DC0(v36, "object");
            sub_1B4C12CB4(a1, 0xBu, (uint64_t)v36, (uint64_t)v38);
            sub_1B4C1294C(101, (uint64_t *)&v40, (uint64_t)v38, (uint64_t)&__str);
            uint64_t v32 = sub_1B4C126DC((uint64_t)a2, v33, (uint64_t)&v42, (uint64_t)&__str);
            goto LABEL_85;
          }
          if ((sub_1B4C1475C((uint64_t)a2) & 1) == 0) {
            goto LABEL_80;
          }
          goto LABEL_27;
        }
        int v12 = sub_1B4C0FAA8(v5);
        *(_DWORD *)(a1 + 32) = v12;
        if (v12 != 4)
        {
LABEL_83:
          uint64_t v34 = *(void *)(a1 + 64);
          sub_1B4C12864(v5, &v42);
          long long v40 = *(_OWORD *)(a1 + 64);
          uint64_t v41 = *(void *)(a1 + 80);
          sub_1B4BB8DC0(v36, "object key");
          sub_1B4C12CB4(a1, 4u, (uint64_t)v36, (uint64_t)v38);
          sub_1B4C1294C(101, (uint64_t *)&v40, (uint64_t)v38, (uint64_t)&__str);
          uint64_t v32 = sub_1B4C126DC((uint64_t)a2, v34, (uint64_t)&v42, (uint64_t)&__str);
          goto LABEL_85;
        }
        if (!sub_1B4C149D8((uint64_t)a2, v4)) {
          goto LABEL_80;
        }
        int v13 = sub_1B4C0FAA8(v5);
        *(_DWORD *)(a1 + 32) = v13;
        if (v13 == 12)
        {
LABEL_33:
          *(_DWORD *)(a1 + 32) = sub_1B4C0FAA8(v5);
          continue;
        }
LABEL_84:
        uint64_t v35 = *(void *)(a1 + 64);
        sub_1B4C12864(v5, &v42);
        long long v40 = *(_OWORD *)(a1 + 64);
        uint64_t v41 = *(void *)(a1 + 80);
        sub_1B4BB8DC0(v36, "object separator");
        sub_1B4C12CB4(a1, 0xCu, (uint64_t)v36, (uint64_t)v38);
        sub_1B4C1294C(101, (uint64_t *)&v40, (uint64_t)v38, (uint64_t)&__str);
        uint64_t v32 = sub_1B4C126DC((uint64_t)a2, v35, (uint64_t)&v42, (uint64_t)&__str);
LABEL_85:
        uint64_t v20 = v32;
        sub_1B4C133C4(&__str);
        if (v39 < 0) {
LABEL_74:
        }
          operator delete(v38[0]);
LABEL_75:
        if (v37 < 0)
        {
          operator delete(v36[0]);
          if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
            goto LABEL_79;
          }
        }
        else if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
        {
LABEL_79:
          operator delete(v42.__r_.__value_.__l.__data_);
        }
LABEL_56:
        if (__p) {
          operator delete(__p);
        }
        return v20;
      case 0xE:
        uint64_t v22 = *(void *)(a1 + 64);
        memset(&v42, 0, sizeof(v42));
        unint64_t v23 = *(unsigned __int8 **)(a1 + 88);
        for (uint64_t i = *(unsigned __int8 **)(a1 + 96); v23 != i; ++v23)
        {
          unsigned int v25 = *v23;
          if (v25 > 0x1F)
          {
            std::string::push_back(&v42, v25);
          }
          else
          {
            LOBYTE(__str.__imp_.__imp_) = 0;
            __str.__vftable = 0;
            snprintf((char *)&__str, 9uLL, "<U+%.4X>", v25);
            std::string::append(&v42, (const std::string::value_type *)&__str);
          }
        }
        long long v40 = *(_OWORD *)(a1 + 64);
        uint64_t v41 = *(void *)(a1 + 80);
        char v37 = 5;
        strcpy((char *)v36, "value");
        sub_1B4C12CB4(a1, 0, (uint64_t)v36, (uint64_t)v38);
        sub_1B4C1294C(101, (uint64_t *)&v40, (uint64_t)v38, (uint64_t)&__str);
        uint64_t v30 = sub_1B4C126DC((uint64_t)a2, v22, (uint64_t)&v42, (uint64_t)&__str);
        goto LABEL_73;
      default:
        uint64_t v26 = *(void *)(a1 + 64);
        memset(&v42, 0, sizeof(v42));
        unint64_t v27 = *(unsigned __int8 **)(a1 + 88);
        for (int j = *(unsigned __int8 **)(a1 + 96); v27 != j; ++v27)
        {
          unsigned int v29 = *v27;
          if (v29 > 0x1F)
          {
            std::string::push_back(&v42, v29);
          }
          else
          {
            LOBYTE(__str.__imp_.__imp_) = 0;
            __str.__vftable = 0;
            snprintf((char *)&__str, 9uLL, "<U+%.4X>", v29);
            std::string::append(&v42, (const std::string::value_type *)&__str);
          }
        }
        long long v40 = *(_OWORD *)(a1 + 64);
        uint64_t v41 = *(void *)(a1 + 80);
        char v37 = 5;
        strcpy((char *)v36, "value");
        sub_1B4C12CB4(a1, 0x10u, (uint64_t)v36, (uint64_t)v38);
        sub_1B4C1294C(101, (uint64_t *)&v40, (uint64_t)v38, (uint64_t)&__str);
        uint64_t v30 = sub_1B4C126DC((uint64_t)a2, v26, (uint64_t)&v42, (uint64_t)&__str);
LABEL_73:
        uint64_t v20 = v30;
        __str.__vftable = (std::runtime_error_vtbl *)&unk_1F0D55628;
        std::runtime_error::~runtime_error(&v47);
        std::exception::~exception(&__str);
        if (v39 < 0) {
          goto LABEL_74;
        }
        goto LABEL_75;
    }
  }
}

void sub_1B4C12494(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33)
{
  sub_1B4C133C4((std::runtime_error *)(v33 - 112));
  if (a22 < 0)
  {
    operator delete(__p);
    if ((a16 & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((a16 & 0x80000000) == 0)
  {
LABEL_3:
    if (a32 < 0) {
      goto LABEL_4;
    }
    goto LABEL_8;
  }
  operator delete(a11);
  if (a32 < 0)
  {
LABEL_4:
    operator delete(a27);
    uint64_t v35 = a33;
    if (a33)
    {
LABEL_10:
      operator delete(v35);
      _Unwind_Resume(a1);
    }
LABEL_9:
    _Unwind_Resume(a1);
  }
LABEL_8:
  uint64_t v35 = a33;
  if (a33) {
    goto LABEL_10;
  }
  goto LABEL_9;
}

uint64_t sub_1B4C126DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(unsigned char *)(a1 + 88) = 1;
  if (*(unsigned char *)(a1 + 128) && !(!v5 & v4))
  {
    switch(~(100 * (*(_DWORD *)(a4 + 8) / 100 / 100)) + *(_DWORD *)(a4 + 8) / 100)
    {
      case 0:
        exception = __cxa_allocate_exception(0x28uLL);
        int v8 = (void *)sub_1B4C16FBC((uint64_t)exception, a4);
        __cxa_throw(v8, (struct type_info *)&unk_1F0D53950, (void (*)(void *))sub_1B4C133C4);
      case 1:
        unint64_t v9 = __cxa_allocate_exception(0x20uLL);
        int v10 = (void *)sub_1B4C170A8((uint64_t)v9, a4);
        __cxa_throw(v10, (struct type_info *)&unk_1F0D53980, (void (*)(void *))sub_1B4C15D40);
      case 2:
        int v11 = __cxa_allocate_exception(0x20uLL);
        int v12 = (void *)sub_1B4C17118((uint64_t)v11, a4);
        __cxa_throw(v12, (struct type_info *)&unk_1F0D53920, (void (*)(void *))sub_1B4C15F98);
      case 3:
        int v13 = __cxa_allocate_exception(0x20uLL);
        unint64_t v14 = (void *)sub_1B4C17038((uint64_t)v13, a4);
        __cxa_throw(v14, (struct type_info *)&unk_1F0D53968, (void (*)(void *))sub_1B4C15298);
      case 4:
        unint64_t v15 = __cxa_allocate_exception(0x20uLL);
        unint64_t v16 = (void *)sub_1B4C17188((uint64_t)v15, a4);
        __cxa_throw(v16, (struct type_info *)&unk_1F0D53938, (void (*)(void *))sub_1B4C0EAD0);
      default:
        JUMPOUT(0);
    }
  }
  return 0;
}

void sub_1B4C12864(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  int v3 = *(unsigned __int8 **)(a1 + 48);
  for (uint64_t i = *(unsigned __int8 **)(a1 + 56); v3 != i; ++v3)
  {
    unsigned int v5 = *v3;
    if (v5 > 0x1F)
    {
      std::string::push_back(a2, v5);
    }
    else
    {
      char v7 = 0;
      *(void *)std::runtime_error __str = 0;
      snprintf(__str, 9uLL, "<U+%.4X>", v5);
      std::string::append(a2, __str);
    }
  }
}

void sub_1B4C1292C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B4C1294C(int a1@<W0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  char v25 = 11;
  strcpy((char *)v24, "parse_error");
  sub_1B4C0EB24(a1, &v26);
  uint64_t v8 = std::string::append(&v26, "parse error");
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v27.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  sub_1B4C17260((uint64_t)a2, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  int v12 = std::string::append(&v27, (const std::string::value_type *)p_p, size);
  long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v28.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  unint64_t v14 = std::string::append(&v28, ": ");
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v29.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  int v16 = *(char *)(a3 + 23);
  if (v16 >= 0) {
    int v17 = (const std::string::value_type *)a3;
  }
  else {
    int v17 = *(const std::string::value_type **)a3;
  }
  if (v16 >= 0) {
    std::string::size_type v18 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    std::string::size_type v18 = *(void *)(a3 + 8);
  }
  unint64_t v19 = std::string::append(&v29, v17, v18);
  long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  int64_t v31 = v19->__r_.__value_.__r.__words[2];
  long long v30 = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v29.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v28.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_15:
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_16;
      }
      goto LABEL_26;
    }
  }
  else if ((SHIBYTE(v28.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_15;
  }
  operator delete(v28.__r_.__value_.__l.__data_);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_16:
    if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_27;
  }
LABEL_26:
  operator delete(__p.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_17:
    if ((SHIBYTE(v26.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_18;
    }
LABEL_28:
    operator delete(v26.__r_.__value_.__l.__data_);
    if ((v25 & 0x80000000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_29;
  }
LABEL_27:
  operator delete(v27.__r_.__value_.__l.__data_);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_28;
  }
LABEL_18:
  if ((v25 & 0x80000000) == 0) {
    goto LABEL_19;
  }
LABEL_29:
  operator delete(v24[0]);
LABEL_19:
  uint64_t v21 = *a2;
  if (v31 >= 0) {
    uint64_t v22 = (const char *)&v30;
  }
  else {
    uint64_t v22 = (const char *)v30;
  }
  *(void *)a4 = &unk_1F0D55628;
  *(_DWORD *)(a4 + 8) = a1;
  std::runtime_error::runtime_error((std::runtime_error *)(a4 + 16), v22);
  *(void *)a4 = &unk_1F0D55588;
  *(void *)(a4 + 32) = v21;
  if (SHIBYTE(v31) < 0) {
    operator delete((void *)v30);
  }
}

void sub_1B4C12BB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  std::exception::~exception(v40);
  if (*(char *)(v41 - 57) < 0) {
    operator delete(*(void **)(v41 - 80));
  }
  _Unwind_Resume(a1);
}

void sub_1B4C12CB4(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v64 = *MEMORY[0x1E4F143B8];
  *(unsigned char *)(a4 + 23) = 13;
  strcpy((char *)a4, "syntax error ");
  uint64_t v7 = *(unsigned __int8 *)(a3 + 23);
  if ((v7 & 0x80u) != 0) {
    uint64_t v7 = *(void *)(a3 + 8);
  }
  if (v7)
  {
    std::operator+<char>();
    uint64_t v8 = std::string::append(&v59, " ");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    int64_t v61 = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    if (v61 >= 0) {
      int v10 = __p;
    }
    else {
      int v10 = (void **)__p[0];
    }
    if (v61 >= 0) {
      std::string::size_type v11 = HIBYTE(v61);
    }
    else {
      std::string::size_type v11 = (std::string::size_type)__p[1];
    }
    std::string::append((std::string *)a4, (const std::string::value_type *)v10, v11);
    if (SHIBYTE(v61) < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v59.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_12;
      }
    }
    else if ((SHIBYTE(v59.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_12;
    }
    operator delete(v59.__r_.__value_.__l.__data_);
  }
LABEL_12:
  std::string::append((std::string *)a4, "- ");
  uint64_t v12 = *(int *)(a1 + 32);
  if (v12 != 14)
  {
    if (v12 > 0x10) {
      int v17 = "unknown token";
    }
    else {
      int v17 = off_1E60A3788[v12];
    }
    size_t v18 = strlen(v17);
    if (v18 > 0x7FFFFFFFFFFFFFF7) {
      sub_1B4BB33D8();
    }
    std::string::size_type v19 = v18;
    if (v18 >= 0x17)
    {
      uint64_t v31 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v18 | 7) != 0x17) {
        uint64_t v31 = v18 | 7;
      }
      uint64_t v32 = v31 + 1;
      long long v20 = operator new(v31 + 1);
      v59.__r_.__value_.__l.__size_ = v19;
      v59.__r_.__value_.__r.__words[2] = v32 | 0x8000000000000000;
      v59.__r_.__value_.__r.__words[0] = (std::string::size_type)v20;
    }
    else
    {
      *((unsigned char *)&v59.__r_.__value_.__s + 23) = v18;
      long long v20 = &v59;
      if (!v18) {
        goto LABEL_39;
      }
    }
    memcpy(v20, v17, v19);
LABEL_39:
    *((unsigned char *)v20 + v19) = 0;
    uint64_t v33 = std::string::insert(&v59, 0, "unexpected ");
    long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
    int64_t v61 = v33->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v34;
    v33->__r_.__value_.__l.__size_ = 0;
    v33->__r_.__value_.__r.__words[2] = 0;
    v33->__r_.__value_.__r.__words[0] = 0;
    if (v61 >= 0) {
      uint64_t v35 = __p;
    }
    else {
      uint64_t v35 = (void **)__p[0];
    }
    if (v61 >= 0) {
      std::string::size_type v36 = HIBYTE(v61);
    }
    else {
      std::string::size_type v36 = (std::string::size_type)__p[1];
    }
    std::string::append((std::string *)a4, (const std::string::value_type *)v35, v36);
    if (SHIBYTE(v61) < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v59.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_77;
      }
    }
    else if ((SHIBYTE(v59.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_77;
    }
    uint64_t v45 = (void *)v59.__r_.__value_.__r.__words[0];
    goto LABEL_76;
  }
  long long v13 = *(const char **)(a1 + 136);
  size_t v14 = strlen(v13);
  if (v14 > 0x7FFFFFFFFFFFFFF7) {
    sub_1B4BB33D8();
  }
  std::string::size_type v15 = v14;
  if (v14 >= 0x17)
  {
    uint64_t v21 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17) {
      uint64_t v21 = v14 | 7;
    }
    uint64_t v22 = v21 + 1;
    p_dst = (std::string *)operator new(v21 + 1);
    __dst.__r_.__value_.__l.__size_ = v15;
    __dst.__r_.__value_.__r.__words[2] = v22 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_27;
  }
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v14;
  p_dst = &__dst;
  if (v14) {
LABEL_27:
  }
    memmove(p_dst, v13, v15);
  p_dst->__r_.__value_.__s.__data_[v15] = 0;
  unint64_t v23 = std::string::append(&__dst, "; last read: '");
  long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  v58.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v24;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  memset(&v56, 0, sizeof(v56));
  char v25 = *(unsigned __int8 **)(a1 + 88);
  std::string v26 = *(unsigned __int8 **)(a1 + 96);
  if (v25 == v26)
  {
    std::string::size_type size = 0;
    std::string::size_type v30 = 0;
    unsigned int v28 = 0;
  }
  else
  {
    do
    {
      unsigned int v27 = *v25;
      if (v27 > 0x1F)
      {
        std::string::push_back(&v56, v27);
      }
      else
      {
        char v63 = 0;
        *(void *)std::runtime_error __str = 0;
        snprintf(__str, 9uLL, "<U+%.4X>", v27);
        std::string::append(&v56, __str);
      }
      ++v25;
    }
    while (v25 != v26);
    unsigned int v28 = HIBYTE(v56.__r_.__value_.__r.__words[2]);
    std::string::size_type size = v56.__r_.__value_.__l.__size_;
    std::string::size_type v30 = v56.__r_.__value_.__r.__words[0];
  }
  if ((v28 & 0x80u) == 0) {
    char v37 = &v56;
  }
  else {
    char v37 = (std::string *)v30;
  }
  if ((v28 & 0x80u) == 0) {
    std::string::size_type v38 = v28;
  }
  else {
    std::string::size_type v38 = size;
  }
  char v39 = std::string::append(&v58, (const std::string::value_type *)v37, v38);
  long long v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
  v59.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v40;
  v39->__r_.__value_.__l.__size_ = 0;
  v39->__r_.__value_.__r.__words[2] = 0;
  v39->__r_.__value_.__r.__words[0] = 0;
  uint64_t v41 = std::string::append(&v59, "'");
  long long v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
  int64_t v61 = v41->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v42;
  v41->__r_.__value_.__l.__size_ = 0;
  v41->__r_.__value_.__r.__words[2] = 0;
  v41->__r_.__value_.__r.__words[0] = 0;
  if (v61 >= 0) {
    int v43 = __p;
  }
  else {
    int v43 = (void **)__p[0];
  }
  if (v61 >= 0) {
    std::string::size_type v44 = HIBYTE(v61);
  }
  else {
    std::string::size_type v44 = (std::string::size_type)__p[1];
  }
  std::string::append((std::string *)a4, (const std::string::value_type *)v43, v44);
  if (SHIBYTE(v61) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v59.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_65:
      if ((SHIBYTE(v56.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_66;
      }
      goto LABEL_73;
    }
  }
  else if ((SHIBYTE(v59.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_65;
  }
  operator delete(v59.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v56.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_66:
    if ((SHIBYTE(v58.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_67;
    }
LABEL_74:
    operator delete(v58.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_77;
    }
    goto LABEL_75;
  }
LABEL_73:
  operator delete(v56.__r_.__value_.__l.__data_);
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_74;
  }
LABEL_67:
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_77;
  }
LABEL_75:
  uint64_t v45 = (void *)__dst.__r_.__value_.__r.__words[0];
LABEL_76:
  operator delete(v45);
LABEL_77:
  if (!a2) {
    return;
  }
  if (a2 > 0x10) {
    uint64_t v46 = "unknown token";
  }
  else {
    uint64_t v46 = off_1E60A3810[a2 - 1];
  }
  size_t v47 = strlen(v46);
  if (v47 > 0x7FFFFFFFFFFFFFF7) {
    sub_1B4BB33D8();
  }
  std::string::size_type v48 = v47;
  if (v47 >= 0x17)
  {
    uint64_t v50 = (v47 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v47 | 7) != 0x17) {
      uint64_t v50 = v47 | 7;
    }
    uint64_t v51 = v50 + 1;
    unint64_t v49 = operator new(v50 + 1);
    v59.__r_.__value_.__l.__size_ = v48;
    v59.__r_.__value_.__r.__words[2] = v51 | 0x8000000000000000;
    v59.__r_.__value_.__r.__words[0] = (std::string::size_type)v49;
    goto LABEL_88;
  }
  *((unsigned char *)&v59.__r_.__value_.__s + 23) = v47;
  unint64_t v49 = &v59;
  if (v47) {
LABEL_88:
  }
    memcpy(v49, v46, v48);
  *((unsigned char *)v49 + v48) = 0;
  int v52 = std::string::insert(&v59, 0, "; expected ");
  long long v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
  int64_t v61 = v52->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v53;
  v52->__r_.__value_.__l.__size_ = 0;
  v52->__r_.__value_.__r.__words[2] = 0;
  v52->__r_.__value_.__r.__words[0] = 0;
  if (v61 >= 0) {
    uint64_t v54 = __p;
  }
  else {
    uint64_t v54 = (void **)__p[0];
  }
  if (v61 >= 0) {
    std::string::size_type v55 = HIBYTE(v61);
  }
  else {
    std::string::size_type v55 = (std::string::size_type)__p[1];
  }
  std::string::append((std::string *)a4, (const std::string::value_type *)v54, v55);
  if ((SHIBYTE(v61) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v59.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_99:
    operator delete(v59.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_99;
  }
}

void sub_1B4C13290(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (a42 < 0)
  {
    operator delete(__p);
    if (a35 < 0)
    {
LABEL_5:
      operator delete(a30);
      if (a16 < 0)
      {
LABEL_8:
        operator delete(a11);
        if ((a28 & 0x80000000) == 0) {
          goto LABEL_9;
        }
        goto LABEL_12;
      }
LABEL_11:
      if ((a28 & 0x80000000) == 0)
      {
LABEL_9:
        if ((a22 & 0x80000000) == 0)
        {
LABEL_14:
          if (*(char *)(v42 + 23) < 0) {
            operator delete(*(void **)v42);
          }
          _Unwind_Resume(a1);
        }
LABEL_13:
        operator delete(a17);
        goto LABEL_14;
      }
LABEL_12:
      operator delete(a23);
      if ((a22 & 0x80000000) == 0) {
        goto LABEL_14;
      }
      goto LABEL_13;
    }
  }
  else if (a35 < 0)
  {
    goto LABEL_5;
  }
  if (a16 < 0) {
    goto LABEL_8;
  }
  goto LABEL_11;
}

void sub_1B4C133C4(std::runtime_error *a1)
{
  a1->__vftable = (std::runtime_error_vtbl *)&unk_1F0D55628;
  std::runtime_error::~runtime_error(a1 + 1);
  std::exception::~exception(a1);
}

uint64_t sub_1B4C13418(uint64_t a1, uint64_t a2)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  std::string __p = 0;
  unint64_t v45 = 0;
  uint64_t v46 = 0;
  char v4 = (std::runtime_error_vtbl *)(a1 + 112);
  uint64_t v5 = a1 + 40;
  while (2)
  {
    switch(*(_DWORD *)(a1 + 32))
    {
      case 1:
        LOBYTE(__str.__vftable) = 1;
        sub_1B4C181A8((unsigned __int8 **)a2, (unsigned __int8 *)&__str);
        goto LABEL_24;
      case 2:
        LOBYTE(__str.__vftable) = 0;
        sub_1B4C181A8((unsigned __int8 **)a2, (unsigned __int8 *)&__str);
        goto LABEL_24;
      case 3:
        __str.__vftable = 0;
        sub_1B4C183E8((unsigned __int8 **)a2);
        goto LABEL_24;
      case 4:
        sub_1B4C18840((unsigned __int8 **)a2, (uint64_t)v4);
        goto LABEL_24;
      case 5:
        __str.__vftable = *(std::runtime_error_vtbl **)(a1 + 152);
        sub_1B4C18C38((unsigned __int8 **)a2, (uint64_t *)&__str);
        goto LABEL_24;
      case 6:
        __str.__vftable = *(std::runtime_error_vtbl **)(a1 + 144);
        sub_1B4C18600((unsigned __int8 **)a2, (uint64_t *)&__str);
        goto LABEL_24;
      case 7:
        __str.__vftable = *(std::runtime_error_vtbl **)(a1 + 160);
        sub_1B4C17F68((unsigned __int8 **)a2, (uint64_t *)&__str);
        goto LABEL_24;
      case 8:
        if (!sub_1B4C177B8(a2, 0xFFFFFFFFFFFFFFFFLL)) {
          goto LABEL_78;
        }
        int v6 = sub_1B4C0FAA8(v5);
        *(_DWORD *)(a1 + 32) = v6;
        if (v6 == 10) {
          goto LABEL_20;
        }
        unint64_t v7 = v45;
        if (v45 == v46 << 6)
        {
          if ((uint64_t)(v45 + 1) < 0) {
            sub_1B4BB3244();
          }
          unint64_t v8 = v46 << 7;
          if (v46 << 7 <= (v45 & 0xFFFFFFFFFFFFFFC0) + 64) {
            unint64_t v8 = (v45 & 0xFFFFFFFFFFFFFFC0) + 64;
          }
          if (v45 <= 0x3FFFFFFFFFFFFFFELL) {
            unint64_t v9 = v8;
          }
          else {
            unint64_t v9 = 0x7FFFFFFFFFFFFFFFLL;
          }
          sub_1B4C142B4((uint64_t)&__p, v9);
          unint64_t v7 = v45;
        }
        unint64_t v45 = v7 + 1;
        *(void *)((char *)__p + ((v7 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v7;
        continue;
      case 9:
        if ((sub_1B4C17500(a2, 0xFFFFFFFFFFFFFFFFLL) & 1) == 0)
        {
LABEL_78:
          uint64_t v21 = 0;
          goto LABEL_49;
        }
        int v10 = sub_1B4C0FAA8(v5);
        *(_DWORD *)(a1 + 32) = v10;
        if (v10 != 11)
        {
          if (v10 != 4) {
            goto LABEL_74;
          }
          int v17 = *(uint64_t ***)(*(void *)(*(void *)(a2 + 16) - 8) + 8);
          __str.__vftable = v4;
          *(void *)(a2 + 32) = sub_1B4C16054(v17, (const void **)&v4->~runtime_error, (uint64_t)&unk_1B4C9AE0A, (long long **)&__str)+ 7;
          int v18 = sub_1B4C0FAA8(v5);
          *(_DWORD *)(a1 + 32) = v18;
          if (v18 != 12) {
            goto LABEL_75;
          }
          unint64_t v19 = v45;
          if (v45 == v46 << 6)
          {
            if ((uint64_t)(v45 + 1) < 0) {
              sub_1B4BB3244();
            }
            if (v45 > 0x3FFFFFFFFFFFFFFELL)
            {
              unint64_t v20 = 0x7FFFFFFFFFFFFFFFLL;
            }
            else if (v46 << 7 <= (v45 & 0xFFFFFFFFFFFFFFC0) + 64)
            {
              unint64_t v20 = (v45 & 0xFFFFFFFFFFFFFFC0) + 64;
            }
            else
            {
              unint64_t v20 = v46 << 7;
            }
            sub_1B4C142B4((uint64_t)&__p, v20);
            unint64_t v19 = v45;
          }
          unint64_t v45 = v19 + 1;
          *(void *)((char *)__p + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v19);
          *(_DWORD *)(a1 + 32) = sub_1B4C0FAA8(v5);
          continue;
        }
LABEL_20:
        *(void *)(a2 + 16) -= 8;
LABEL_24:
        unint64_t v11 = v45;
        if (!v45)
        {
LABEL_48:
          uint64_t v21 = 1;
          goto LABEL_49;
        }
        while (2)
        {
          if ((*(void *)((char *)__p + (((v11 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v11 - 1)))
          {
            int v12 = sub_1B4C0FAA8(v5);
            *(_DWORD *)(a1 + 32) = v12;
            if (v12 == 13) {
              goto LABEL_36;
            }
            if (v12 != 10)
            {
              uint64_t v32 = *(void *)(a1 + 64);
              sub_1B4C12864(v5, &v43);
              long long v41 = *(_OWORD *)(a1 + 64);
              uint64_t v42 = *(void *)(a1 + 80);
              sub_1B4BB8DC0(v37, "array");
              sub_1B4C12CB4(a1, 0xAu, (uint64_t)v37, (uint64_t)v39);
              sub_1B4C1294C(101, (uint64_t *)&v41, (uint64_t)v39, (uint64_t)&__str);
              uint64_t v33 = sub_1B4C13F68(a2, v32, (uint64_t)&v43, (uint64_t)&__str);
              goto LABEL_76;
            }
LABEL_31:
            *(void *)(a2 + 16) -= 8;
            unint64_t v11 = --v45;
            if (!v45) {
              goto LABEL_48;
            }
            continue;
          }
          break;
        }
        int v13 = sub_1B4C0FAA8(v5);
        *(_DWORD *)(a1 + 32) = v13;
        if (v13 != 13)
        {
          if (v13 != 11)
          {
            uint64_t v34 = *(void *)(a1 + 64);
            sub_1B4C12864(v5, &v43);
            long long v41 = *(_OWORD *)(a1 + 64);
            uint64_t v42 = *(void *)(a1 + 80);
            sub_1B4BB8DC0(v37, "object");
            sub_1B4C12CB4(a1, 0xBu, (uint64_t)v37, (uint64_t)v39);
            sub_1B4C1294C(101, (uint64_t *)&v41, (uint64_t)v39, (uint64_t)&__str);
            uint64_t v33 = sub_1B4C13F68(a2, v34, (uint64_t)&v43, (uint64_t)&__str);
            goto LABEL_76;
          }
          goto LABEL_31;
        }
        int v14 = sub_1B4C0FAA8(v5);
        *(_DWORD *)(a1 + 32) = v14;
        if (v14 != 4)
        {
LABEL_74:
          uint64_t v35 = *(void *)(a1 + 64);
          sub_1B4C12864(v5, &v43);
          long long v41 = *(_OWORD *)(a1 + 64);
          uint64_t v42 = *(void *)(a1 + 80);
          sub_1B4BB8DC0(v37, "object key");
          sub_1B4C12CB4(a1, 4u, (uint64_t)v37, (uint64_t)v39);
          sub_1B4C1294C(101, (uint64_t *)&v41, (uint64_t)v39, (uint64_t)&__str);
          uint64_t v33 = sub_1B4C13F68(a2, v35, (uint64_t)&v43, (uint64_t)&__str);
          goto LABEL_76;
        }
        std::string::size_type v15 = *(uint64_t ***)(*(void *)(*(void *)(a2 + 16) - 8) + 8);
        __str.__vftable = v4;
        *(void *)(a2 + 32) = sub_1B4C16054(v15, (const void **)&v4->~runtime_error, (uint64_t)&unk_1B4C9AE0A, (long long **)&__str)+ 7;
        int v16 = sub_1B4C0FAA8(v5);
        *(_DWORD *)(a1 + 32) = v16;
        if (v16 == 12)
        {
LABEL_36:
          *(_DWORD *)(a1 + 32) = sub_1B4C0FAA8(v5);
          continue;
        }
LABEL_75:
        uint64_t v36 = *(void *)(a1 + 64);
        sub_1B4C12864(v5, &v43);
        long long v41 = *(_OWORD *)(a1 + 64);
        uint64_t v42 = *(void *)(a1 + 80);
        sub_1B4BB8DC0(v37, "object separator");
        sub_1B4C12CB4(a1, 0xCu, (uint64_t)v37, (uint64_t)v39);
        sub_1B4C1294C(101, (uint64_t *)&v41, (uint64_t)v39, (uint64_t)&__str);
        uint64_t v33 = sub_1B4C13F68(a2, v36, (uint64_t)&v43, (uint64_t)&__str);
LABEL_76:
        uint64_t v21 = v33;
        sub_1B4C133C4(&__str);
        if (v40 < 0) {
LABEL_67:
        }
          operator delete(v39[0]);
LABEL_68:
        if (v38 < 0)
        {
          operator delete(v37[0]);
          if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
            goto LABEL_72;
          }
        }
        else if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
        {
LABEL_72:
          operator delete(v43.__r_.__value_.__l.__data_);
        }
LABEL_49:
        if (__p) {
          operator delete(__p);
        }
        return v21;
      case 0xE:
        uint64_t v23 = *(void *)(a1 + 64);
        memset(&v43, 0, sizeof(v43));
        long long v24 = *(unsigned __int8 **)(a1 + 88);
        for (uint64_t i = *(unsigned __int8 **)(a1 + 96); v24 != i; ++v24)
        {
          unsigned int v26 = *v24;
          if (v26 > 0x1F)
          {
            std::string::push_back(&v43, v26);
          }
          else
          {
            LOBYTE(__str.__imp_.__imp_) = 0;
            __str.__vftable = 0;
            snprintf((char *)&__str, 9uLL, "<U+%.4X>", v26);
            std::string::append(&v43, (const std::string::value_type *)&__str);
          }
        }
        long long v41 = *(_OWORD *)(a1 + 64);
        uint64_t v42 = *(void *)(a1 + 80);
        char v38 = 5;
        strcpy((char *)v37, "value");
        sub_1B4C12CB4(a1, 0, (uint64_t)v37, (uint64_t)v39);
        sub_1B4C1294C(101, (uint64_t *)&v41, (uint64_t)v39, (uint64_t)&__str);
        uint64_t v31 = sub_1B4C13F68(a2, v23, (uint64_t)&v43, (uint64_t)&__str);
        goto LABEL_66;
      default:
        uint64_t v27 = *(void *)(a1 + 64);
        memset(&v43, 0, sizeof(v43));
        unsigned int v28 = *(unsigned __int8 **)(a1 + 88);
        for (int j = *(unsigned __int8 **)(a1 + 96); v28 != j; ++v28)
        {
          unsigned int v30 = *v28;
          if (v30 > 0x1F)
          {
            std::string::push_back(&v43, v30);
          }
          else
          {
            LOBYTE(__str.__imp_.__imp_) = 0;
            __str.__vftable = 0;
            snprintf((char *)&__str, 9uLL, "<U+%.4X>", v30);
            std::string::append(&v43, (const std::string::value_type *)&__str);
          }
        }
        long long v41 = *(_OWORD *)(a1 + 64);
        uint64_t v42 = *(void *)(a1 + 80);
        char v38 = 5;
        strcpy((char *)v37, "value");
        sub_1B4C12CB4(a1, 0x10u, (uint64_t)v37, (uint64_t)v39);
        sub_1B4C1294C(101, (uint64_t *)&v41, (uint64_t)v39, (uint64_t)&__str);
        uint64_t v31 = sub_1B4C13F68(a2, v27, (uint64_t)&v43, (uint64_t)&__str);
LABEL_66:
        uint64_t v21 = v31;
        __str.__vftable = (std::runtime_error_vtbl *)&unk_1F0D55628;
        std::runtime_error::~runtime_error(&v48);
        std::exception::~exception(&__str);
        if (v40 < 0) {
          goto LABEL_67;
        }
        goto LABEL_68;
    }
  }
}

void sub_1B4C13D20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33)
{
  sub_1B4C133C4((std::runtime_error *)(v33 - 128));
  if (a22 < 0)
  {
    operator delete(__p);
    if ((a16 & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((a16 & 0x80000000) == 0)
  {
LABEL_3:
    if (a32 < 0) {
      goto LABEL_4;
    }
    goto LABEL_8;
  }
  operator delete(a11);
  if (a32 < 0)
  {
LABEL_4:
    operator delete(a27);
    uint64_t v35 = a33;
    if (a33)
    {
LABEL_10:
      operator delete(v35);
      _Unwind_Resume(a1);
    }
LABEL_9:
    _Unwind_Resume(a1);
  }
LABEL_8:
  uint64_t v35 = a33;
  if (a33) {
    goto LABEL_10;
  }
  goto LABEL_9;
}

uint64_t sub_1B4C13F68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(unsigned char *)(a1 + 4sub_1B4BC92E4(&a9, 0) = 1;
  if (*(unsigned char *)(a1 + 41) && !(!v5 & v4))
  {
    switch(~(100 * (*(_DWORD *)(a4 + 8) / 100 / 100)) + *(_DWORD *)(a4 + 8) / 100)
    {
      case 0:
        exception = __cxa_allocate_exception(0x28uLL);
        unint64_t v8 = (void *)sub_1B4C16FBC((uint64_t)exception, a4);
        __cxa_throw(v8, (struct type_info *)&unk_1F0D53950, (void (*)(void *))sub_1B4C133C4);
      case 1:
        unint64_t v9 = __cxa_allocate_exception(0x20uLL);
        int v10 = (void *)sub_1B4C170A8((uint64_t)v9, a4);
        __cxa_throw(v10, (struct type_info *)&unk_1F0D53980, (void (*)(void *))sub_1B4C15D40);
      case 2:
        unint64_t v11 = __cxa_allocate_exception(0x20uLL);
        int v12 = (void *)sub_1B4C17118((uint64_t)v11, a4);
        __cxa_throw(v12, (struct type_info *)&unk_1F0D53920, (void (*)(void *))sub_1B4C15F98);
      case 3:
        int v13 = __cxa_allocate_exception(0x20uLL);
        int v14 = (void *)sub_1B4C17038((uint64_t)v13, a4);
        __cxa_throw(v14, (struct type_info *)&unk_1F0D53968, (void (*)(void *))sub_1B4C15298);
      case 4:
        std::string::size_type v15 = __cxa_allocate_exception(0x20uLL);
        int v16 = (void *)sub_1B4C17188((uint64_t)v15, a4);
        __cxa_throw(v16, (struct type_info *)&unk_1F0D53938, (void (*)(void *))sub_1B4C0EAD0);
      default:
        JUMPOUT(0);
    }
  }
  return 0;
}

uint64_t sub_1B4C140F0(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  *(void *)a1 = a2;
  *(_OWORD *)(a1 + 8) = 0u;
  uint64_t v6 = a1 + 32;
  uint64_t v7 = a1 + 96;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 4sub_1B4BC92E4(&a9, 0) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(unsigned char *)(a1 + 88) = 0;
  uint64_t v8 = *(void *)(a3 + 24);
  if (!v8) {
    goto LABEL_4;
  }
  if (v8 != a3)
  {
    uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 16))(v8);
LABEL_4:
    *(void *)(a1 + 12sub_1B4BC92E4(&a9, 0) = v8;
    goto LABEL_6;
  }
  *(void *)(a1 + 12sub_1B4BC92E4(&a9, 0) = v7;
  (*(void (**)(void, uint64_t))(**(void **)(a3 + 24) + 24))(*(void *)(a3 + 24), v7);
LABEL_6:
  *(void *)(a1 + 144) = 0;
  *(unsigned char *)(a1 + 128) = a4;
  *(unsigned char *)(a1 + 136) = 8;
  unint64_t v9 = *(void *)(a1 + 40);
  uint64_t v10 = *(void *)(a1 + 48);
  if (v9 == v10 << 6)
  {
    if ((uint64_t)(v9 + 1) < 0) {
      sub_1B4BB3244();
    }
    unint64_t v11 = v10 << 7;
    if (v11 <= (v9 & 0xFFFFFFFFFFFFFFC0) + 64) {
      unint64_t v11 = (v9 & 0xFFFFFFFFFFFFFFC0) + 64;
    }
    if (v9 <= 0x3FFFFFFFFFFFFFFELL) {
      unint64_t v12 = v11;
    }
    else {
      unint64_t v12 = 0x7FFFFFFFFFFFFFFFLL;
    }
    sub_1B4C142B4(v6, v12);
    unint64_t v9 = *(void *)(a1 + 40);
  }
  *(void *)(a1 + 4sub_1B4BC92E4(&a9, 0) = v9 + 1;
  *(void *)(*(void *)(a1 + 32) + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v9;
  return a1;
}

void sub_1B4C1424C(_Unwind_Exception *exception_object)
{
  char v5 = *(void **)(v1 + 56);
  if (v5)
  {
    operator delete(v5);
    uint64_t v6 = *v2;
    if (!*v2)
    {
LABEL_3:
      uint64_t v7 = *v3;
      if (!*v3) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v6 = *v2;
    if (!*v2) {
      goto LABEL_3;
    }
  }
  operator delete(v6);
  uint64_t v7 = *v3;
  if (!*v3) {
LABEL_4:
  }
    _Unwind_Resume(exception_object);
LABEL_7:
  *(void *)(v1 + 16) = v7;
  operator delete(v7);
  _Unwind_Resume(exception_object);
}

void sub_1B4C142B4(uint64_t a1, unint64_t a2)
{
  if (a2 > *(void *)(a1 + 16) << 6)
  {
    if ((a2 & 0x8000000000000000) != 0) {
      sub_1B4BB3244();
    }
    unint64_t v3 = ((a2 - 1) >> 6) + 1;
    char v4 = (uint64_t *)operator new(8 * v3);
    char v5 = *(void **)a1;
    unint64_t v6 = *(void *)(a1 + 8);
    int v7 = v6 & 0x3F;
    unint64_t v8 = (v6 - 1) >> 6;
    if (v6 < 0x41) {
      unint64_t v8 = 0;
    }
    v4[v8] = 0;
    if (v6 > 0x3F || (v6 & 0x3F) != 0)
    {
      int v9 = 0;
      int v10 = 0;
      unint64_t v11 = &v5[v6 >> 6];
      unint64_t v12 = v4;
      int v13 = v5;
      do
      {
        uint64_t v14 = 1 << v9;
        if ((*v13 >> v10)) {
          uint64_t v15 = *v12 | v14;
        }
        else {
          uint64_t v15 = *v12 & ~v14;
        }
        *unint64_t v12 = v15;
        v13 += v10 == 63;
        if (v10 == 63) {
          int v10 = 0;
        }
        else {
          ++v10;
        }
        v12 += v9 == 63;
        if (v9 == 63) {
          int v9 = 0;
        }
        else {
          ++v9;
        }
      }
      while (v10 != v7 || v13 != v11);
    }
    *(void *)a1 = v4;
    *(void *)(a1 + 16) = v3;
    if (v5)
    {
      operator delete(v5);
    }
  }
}

uint64_t sub_1B4C143C8(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = (char **)(a1 + 8);
  LODWORD(v47) = (*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 3;
  v46.__r_.__value_.__s.__data_[0] = 0;
  uint64_t v4 = *(void *)(a1 + 120);
  if (!v4) {
    sub_1B4BE345C();
  }
  int v6 = (*(uint64_t (**)(uint64_t, long long *, std::string *, uint64_t))(*(void *)v4 + 48))(v4, &v47, &v46, a1 + 136);
  unint64_t v7 = *(void *)(a1 + 40);
  uint64_t v8 = *(void *)(a1 + 48);
  if (v7 == v8 << 6)
  {
    if ((uint64_t)(v7 + 1) < 0) {
      sub_1B4BB3244();
    }
    unint64_t v9 = v8 << 7;
    if (v9 <= (v7 & 0xFFFFFFFFFFFFFFC0) + 64) {
      unint64_t v9 = (v7 & 0xFFFFFFFFFFFFFFC0) + 64;
    }
    if (v7 <= 0x3FFFFFFFFFFFFFFELL) {
      unint64_t v10 = v9;
    }
    else {
      unint64_t v10 = 0x7FFFFFFFFFFFFFFFLL;
    }
    sub_1B4C142B4(a1 + 32, v10);
    unint64_t v7 = *(void *)(a1 + 40);
  }
  *(void *)(a1 + 4sub_1B4BC92E4(&a9, 0) = v7 + 1;
  uint64_t v11 = *(void *)(a1 + 32);
  unint64_t v12 = v7 >> 6;
  uint64_t v13 = 1 << v7;
  if (v6) {
    uint64_t v14 = *(void *)(v11 + 8 * v12) | v13;
  }
  else {
    uint64_t v14 = *(void *)(v11 + 8 * v12) & ~v13;
  }
  *(void *)(v11 + 8 * v12) = v14;
  LOBYTE(v47) = 1;
  sub_1B4C152EC((unsigned __int8 **)a1, (char *)&v47, 1);
  uint64_t v16 = v15;
  int v18 = *(char **)(a1 + 16);
  unint64_t v17 = *(void *)(a1 + 24);
  if ((unint64_t)v18 < v17)
  {
    *(void *)int v18 = v15;
    uint64_t v19 = (uint64_t)(v18 + 8);
    goto LABEL_35;
  }
  unint64_t v20 = *v3;
  uint64_t v21 = v18 - *v3;
  uint64_t v22 = v21 >> 3;
  unint64_t v23 = (v21 >> 3) + 1;
  if (v23 >> 61) {
    sub_1B4C0E0BC();
  }
  uint64_t v24 = v17 - (void)v20;
  if (v24 >> 2 > v23) {
    unint64_t v23 = v24 >> 2;
  }
  if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v25 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v25 = v23;
  }
  if (v25)
  {
    if (v25 >> 61) {
      sub_1B4BB2D38();
    }
    unsigned int v26 = operator new(8 * v25);
    uint64_t v27 = &v26[8 * v22];
    unsigned int v28 = &v26[8 * v25];
    *uint64_t v27 = v16;
    uint64_t v19 = (uint64_t)(v27 + 1);
    std::string v29 = (char *)(v18 - v20);
    if (v18 == v20) {
      goto LABEL_33;
    }
    goto LABEL_26;
  }
  unsigned int v26 = 0;
  uint64_t v27 = (void *)(8 * v22);
  unsigned int v28 = 0;
  *(void *)(8 * v22) = v15;
  uint64_t v19 = 8 * v22 + 8;
  std::string v29 = (char *)(v18 - v20);
  if (v18 != v20)
  {
LABEL_26:
    unint64_t v30 = (unint64_t)(v29 - 8);
    if (v30 < 0x58) {
      goto LABEL_49;
    }
    if ((unint64_t)(v18 - v26 - v21) < 0x20) {
      goto LABEL_49;
    }
    uint64_t v31 = (v30 >> 3) + 1;
    uint64_t v32 = 8 * (v31 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v33 = &v18[-v32];
    uint64_t v27 = (void *)((char *)v27 - v32);
    uint64_t v34 = &v26[8 * v22 - 16];
    uint64_t v35 = v18 - 16;
    uint64_t v36 = v31 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v37 = *(_OWORD *)v35;
      *(v34 - 1) = *((_OWORD *)v35 - 1);
      _OWORD *v34 = v37;
      v34 -= 2;
      v35 -= 32;
      v36 -= 4;
    }
    while (v36);
    int v18 = v33;
    if (v31 != (v31 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_49:
      do
      {
        uint64_t v38 = *((void *)v18 - 1);
        v18 -= 8;
        *--uint64_t v27 = v38;
      }
      while (v18 != v20);
    }
    int v18 = *v3;
  }
LABEL_33:
  *(void *)(a1 + 8) = v27;
  *(void *)(a1 + 16) = v19;
  *(void *)(a1 + 24) = v28;
  if (v18) {
    operator delete(v18);
  }
LABEL_35:
  *(void *)(a1 + 16) = v19;
  if (a2 != -1)
  {
    char v39 = *(char **)(v19 - 8);
    if (v39)
    {
      unint64_t v40 = *v39;
      if (v40 > 2) {
        unint64_t v41 = 1;
      }
      else {
        unint64_t v41 = qword_1B4C9AE10[v40];
      }
      if (v41 < a2)
      {
        exception = __cxa_allocate_exception(0x20uLL);
        std::to_string(&v46, a2);
        std::string::size_type v44 = std::string::insert(&v46, 0, "excessive object size: ");
        long long v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
        std::string::size_type v48 = v44->__r_.__value_.__r.__words[2];
        long long v47 = v45;
        v44->__r_.__value_.__l.__size_ = 0;
        v44->__r_.__value_.__r.__words[2] = 0;
        v44->__r_.__value_.__r.__words[0] = 0;
        sub_1B4C150F8(408, (uint64_t)&v47, (uint64_t)exception);
        __cxa_throw(exception, (struct type_info *)&unk_1F0D53968, (void (*)(void *))sub_1B4C15298);
      }
    }
  }
  return 1;
}

void sub_1B4C146FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

uint64_t sub_1B4C1475C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (*(void *)(v2 - 8))
  {
    LODWORD(v27) = ((unint64_t)(v2 - *(void *)(a1 + 8)) >> 3) - 1;
    LOBYTE(v23) = 1;
    uint64_t v3 = *(void *)(a1 + 120);
    if (!v3) {
      sub_1B4BE345C();
    }
    if (((*(uint64_t (**)(uint64_t, unsigned __int8 **, unsigned __int8 **))(*(void *)v3 + 48))(v3, &v27, &v23) & 1) == 0)
    {
      sub_1B4C19050((uint64_t)v29, (unsigned __int8 *)(a1 + 136));
      uint64_t v4 = *(unsigned __int8 **)(*(void *)(a1 + 16) - 8);
      int v5 = *v4;
      unsigned __int8 *v4 = v29[0];
      v29[0] = v5;
      uint64_t v6 = *((void *)v4 + 1);
      *((void *)v4 + 1) = v30;
      uint64_t v30 = v6;
      sub_1B4C0D9B8(&v30, v5);
    }
  }
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v9 = v7 - 8;
  *(void *)(a1 + 16) = v7 - 8;
  --*(void *)(a1 + 40);
  if (v8 != v7 - 8)
  {
    uint64_t v10 = *(void *)(v7 - 16);
    if (v10)
    {
      if (*(unsigned char *)v10 == 1)
      {
        uint64_t v27 = (unsigned __int8 *)v10;
        *(_OWORD *)&v28[8] = xmmword_1B4C9A430;
        *(void *)unsigned int v28 = **(void **)(v10 + 8);
        while (1)
        {
          uint64_t v11 = *(unsigned __int8 **)(v9 - 8);
          uint64_t v24 = 0;
          uint64_t v25 = 0;
          unint64_t v23 = v11;
          unint64_t v26 = 0x8000000000000000;
          int v12 = *v11;
          if (v12 == 2)
          {
            uint64_t v25 = *(void *)(*((void *)v11 + 1) + 8);
            if (sub_1B4C15AA0(&v27, &v23)) {
              return 1;
            }
          }
          else if (v12 == 1)
          {
            uint64_t v24 = *((void *)v11 + 1) + 8;
            if (sub_1B4C15AA0(&v27, &v23)) {
              return 1;
            }
          }
          else
          {
            unint64_t v26 = 1;
            if (sub_1B4C15AA0(&v27, &v23)) {
              return 1;
            }
          }
          if (*sub_1B4C155AC(&v27) == 8) {
            break;
          }
          int v13 = *v27;
          if (v13 == 2)
          {
            *(void *)&v28[8] += 16;
            uint64_t v9 = *(void *)(a1 + 16);
          }
          else if (v13 == 1)
          {
            uint64_t v14 = *(void **)v28;
            uint64_t v15 = *(void **)(*(void *)v28 + 8);
            if (v15)
            {
              do
              {
                uint64_t v16 = v15;
                uint64_t v15 = (void *)*v15;
              }
              while (v15);
            }
            else
            {
              do
              {
                uint64_t v16 = (void *)v14[2];
                BOOL v17 = *v16 == (void)v14;
                uint64_t v14 = v16;
              }
              while (!v17);
            }
            *(void *)unsigned int v28 = v16;
            uint64_t v9 = *(void *)(a1 + 16);
          }
          else
          {
            ++*(void *)&v28[16];
            uint64_t v9 = *(void *)(a1 + 16);
          }
        }
        int v18 = *(unsigned __int8 **)(*(void *)(a1 + 16) - 8);
        unint64_t v20 = v27;
        long long v21 = *(_OWORD *)v28;
        uint64_t v22 = *(void *)&v28[16];
        sub_1B4C156B0(v18, &v20, &v23);
      }
    }
  }
  return 1;
}

uint64_t sub_1B4C149D8(uint64_t a1, uint64_t a2)
{
  v23[0] = 3;
  uint64_t v4 = operator new(0x18uLL);
  uint64_t v5 = (uint64_t)v4;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_1B4BCA11C(v4, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)uint64_t v4 = *(_OWORD *)a2;
    v4[2] = *(void *)(a2 + 16);
  }
  uint64_t v24 = v5;
  LODWORD(v26) = (*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 3;
  char v25 = 4;
  uint64_t v6 = *(void *)(a1 + 120);
  if (!v6) {
    sub_1B4BE345C();
  }
  char v7 = (*(uint64_t (**)(uint64_t, long long **, char *, unsigned __int8 *))(*(void *)v6 + 48))(v6, &v26, &v25, v23);
  unint64_t v8 = *(void *)(a1 + 64);
  uint64_t v9 = *(void *)(a1 + 72);
  if (v8 == v9 << 6)
  {
    if ((uint64_t)(v8 + 1) < 0) {
      sub_1B4BB3244();
    }
    unint64_t v10 = v9 << 7;
    if (v10 <= (v8 & 0xFFFFFFFFFFFFFFC0) + 64) {
      unint64_t v10 = (v8 & 0xFFFFFFFFFFFFFFC0) + 64;
    }
    if (v8 <= 0x3FFFFFFFFFFFFFFELL) {
      unint64_t v11 = v10;
    }
    else {
      unint64_t v11 = 0x7FFFFFFFFFFFFFFFLL;
    }
    sub_1B4C142B4(a1 + 56, v11);
    unint64_t v8 = *(void *)(a1 + 64);
  }
  *(void *)(a1 + 64) = v8 + 1;
  uint64_t v12 = *(void *)(a1 + 56);
  unint64_t v13 = v8 >> 6;
  uint64_t v14 = 1 << v8;
  uint64_t v15 = 8 * v13;
  if (v7)
  {
    *(void *)(v12 + v15) |= v14;
    if (*(void *)(*(void *)(a1 + 16) - 8))
    {
      sub_1B4C19050((uint64_t)v21, (unsigned __int8 *)(a1 + 136));
      uint64_t v16 = *(uint64_t ***)(*(void *)(*(void *)(a1 + 16) - 8) + 8);
      unint64_t v26 = (long long *)a2;
      BOOL v17 = sub_1B4C16054(v16, (const void **)a2, (uint64_t)&unk_1B4C9AE0A, &v26);
      int v18 = *((unsigned __int8 *)v17 + 56);
      v17 += 7;
      *(unsigned char *)BOOL v17 = v21[0];
      v21[0] = v18;
      uint64_t v19 = (uint64_t)v17[1];
      v17[1] = v22;
      uint64_t v22 = (uint64_t *)v19;
      *(void *)(a1 + 8sub_1B4BC92E4(&a9, 0) = v17;
      sub_1B4C0D9B8((uint64_t *)&v22, v18);
    }
  }
  else
  {
    *(void *)(v12 + v15) &= ~v14;
  }
  sub_1B4C0D9B8(&v24, v23[0]);
  return 1;
}

void sub_1B4C14BBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9, uint64_t a10, unsigned __int8 a11)
{
  sub_1B4C0D9B8(&a10, a9);
  sub_1B4C0D9B8(v11, a11);
  _Unwind_Resume(a1);
}

void sub_1B4C14BE4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B4C14BF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned __int8 a11)
{
  sub_1B4C0D9B8(v11, a11);
  _Unwind_Resume(a1);
}

uint64_t sub_1B4C14C10(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = (char **)(a1 + 8);
  LODWORD(v47) = (*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 3;
  v46.__r_.__value_.__s.__data_[0] = 2;
  uint64_t v4 = *(void *)(a1 + 120);
  if (!v4) {
    sub_1B4BE345C();
  }
  int v6 = (*(uint64_t (**)(uint64_t, long long *, std::string *, uint64_t))(*(void *)v4 + 48))(v4, &v47, &v46, a1 + 136);
  unint64_t v7 = *(void *)(a1 + 40);
  uint64_t v8 = *(void *)(a1 + 48);
  if (v7 == v8 << 6)
  {
    if ((uint64_t)(v7 + 1) < 0) {
      sub_1B4BB3244();
    }
    unint64_t v9 = v8 << 7;
    if (v9 <= (v7 & 0xFFFFFFFFFFFFFFC0) + 64) {
      unint64_t v9 = (v7 & 0xFFFFFFFFFFFFFFC0) + 64;
    }
    if (v7 <= 0x3FFFFFFFFFFFFFFELL) {
      unint64_t v10 = v9;
    }
    else {
      unint64_t v10 = 0x7FFFFFFFFFFFFFFFLL;
    }
    sub_1B4C142B4(a1 + 32, v10);
    unint64_t v7 = *(void *)(a1 + 40);
  }
  *(void *)(a1 + 4sub_1B4BC92E4(&a9, 0) = v7 + 1;
  uint64_t v11 = *(void *)(a1 + 32);
  unint64_t v12 = v7 >> 6;
  uint64_t v13 = 1 << v7;
  if (v6) {
    uint64_t v14 = *(void *)(v11 + 8 * v12) | v13;
  }
  else {
    uint64_t v14 = *(void *)(v11 + 8 * v12) & ~v13;
  }
  *(void *)(v11 + 8 * v12) = v14;
  LOBYTE(v47) = 2;
  sub_1B4C152EC((unsigned __int8 **)a1, (char *)&v47, 1);
  uint64_t v16 = v15;
  int v18 = *(char **)(a1 + 16);
  unint64_t v17 = *(void *)(a1 + 24);
  if ((unint64_t)v18 < v17)
  {
    *(void *)int v18 = v15;
    uint64_t v19 = (uint64_t)(v18 + 8);
    goto LABEL_35;
  }
  unint64_t v20 = *v3;
  uint64_t v21 = v18 - *v3;
  uint64_t v22 = v21 >> 3;
  unint64_t v23 = (v21 >> 3) + 1;
  if (v23 >> 61) {
    sub_1B4C0E0BC();
  }
  uint64_t v24 = v17 - (void)v20;
  if (v24 >> 2 > v23) {
    unint64_t v23 = v24 >> 2;
  }
  if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v25 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v25 = v23;
  }
  if (v25)
  {
    if (v25 >> 61) {
      sub_1B4BB2D38();
    }
    unint64_t v26 = operator new(8 * v25);
    uint64_t v27 = &v26[8 * v22];
    unsigned int v28 = &v26[8 * v25];
    *uint64_t v27 = v16;
    uint64_t v19 = (uint64_t)(v27 + 1);
    std::string v29 = (char *)(v18 - v20);
    if (v18 == v20) {
      goto LABEL_33;
    }
    goto LABEL_26;
  }
  unint64_t v26 = 0;
  uint64_t v27 = (void *)(8 * v22);
  unsigned int v28 = 0;
  *(void *)(8 * v22) = v15;
  uint64_t v19 = 8 * v22 + 8;
  std::string v29 = (char *)(v18 - v20);
  if (v18 != v20)
  {
LABEL_26:
    unint64_t v30 = (unint64_t)(v29 - 8);
    if (v30 < 0x58) {
      goto LABEL_49;
    }
    if ((unint64_t)(v18 - &v26[v21]) < 0x20) {
      goto LABEL_49;
    }
    uint64_t v31 = (v30 >> 3) + 1;
    uint64_t v32 = 8 * (v31 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v33 = &v18[-v32];
    uint64_t v27 = (void *)((char *)v27 - v32);
    uint64_t v34 = &v26[8 * v22 - 16];
    uint64_t v35 = v18 - 16;
    uint64_t v36 = v31 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v37 = *(_OWORD *)v35;
      *(v34 - 1) = *((_OWORD *)v35 - 1);
      _OWORD *v34 = v37;
      v34 -= 2;
      v35 -= 32;
      v36 -= 4;
    }
    while (v36);
    int v18 = v33;
    if (v31 != (v31 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_49:
      do
      {
        uint64_t v38 = *((void *)v18 - 1);
        v18 -= 8;
        *--uint64_t v27 = v38;
      }
      while (v18 != v20);
    }
    int v18 = *v3;
  }
LABEL_33:
  *(void *)(a1 + 8) = v27;
  *(void *)(a1 + 16) = v19;
  *(void *)(a1 + 24) = v28;
  if (v18) {
    operator delete(v18);
  }
LABEL_35:
  *(void *)(a1 + 16) = v19;
  if (a2 != -1)
  {
    char v39 = *(char **)(v19 - 8);
    if (v39)
    {
      unint64_t v40 = *v39;
      if (v40 > 2) {
        unint64_t v41 = 1;
      }
      else {
        unint64_t v41 = qword_1B4C9AE10[v40];
      }
      if (v41 < a2)
      {
        exception = __cxa_allocate_exception(0x20uLL);
        std::to_string(&v46, a2);
        std::string::size_type v44 = std::string::insert(&v46, 0, "excessive array size: ");
        long long v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
        std::string::size_type v48 = v44->__r_.__value_.__r.__words[2];
        long long v47 = v45;
        v44->__r_.__value_.__l.__size_ = 0;
        v44->__r_.__value_.__r.__words[2] = 0;
        v44->__r_.__value_.__r.__words[0] = 0;
        sub_1B4C150F8(408, (uint64_t)&v47, (uint64_t)exception);
        __cxa_throw(exception, (struct type_info *)&unk_1F0D53968, (void (*)(void *))sub_1B4C15298);
      }
    }
  }
  return 1;
}

void sub_1B4C14F48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

uint64_t sub_1B4C14FA8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(v2 - 8);
  uint64_t v3 = v2 - 8;
  if (!v4)
  {
    *(void *)(a1 + 16) = v3;
    goto LABEL_6;
  }
  int v19 = ((*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 3) - 1;
  char v18 = 3;
  uint64_t v5 = *(void *)(a1 + 120);
  if (!v5) {
    sub_1B4BE345C();
  }
  if ((*(uint64_t (**)(uint64_t, int *, char *))(*(void *)v5 + 48))(v5, &v19, &v18))
  {
    *(void *)(a1 + 16) -= 8;
LABEL_6:
    --*(void *)(a1 + 40);
    return 1;
  }
  sub_1B4C19050((uint64_t)v16, (unsigned __int8 *)(a1 + 136));
  unint64_t v7 = *(unsigned __int8 **)(*(void *)(a1 + 16) - 8);
  int v8 = *v7;
  unsigned __int8 *v7 = v16[0];
  v16[0] = v8;
  uint64_t v9 = *((void *)v7 + 1);
  *((void *)v7 + 1) = v17;
  uint64_t v17 = v9;
  sub_1B4C0D9B8(&v17, v8);
  uint64_t v11 = *(void *)(a1 + 8);
  uint64_t v10 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v10 - 8;
  --*(void *)(a1 + 40);
  if (v11 == v10 - 8) {
    return 1;
  }
  uint64_t v12 = *(void *)(v10 - 16);
  if (*(unsigned char *)v12 != 2) {
    return 1;
  }
  uint64_t v13 = *(void *)(v12 + 8);
  uint64_t v14 = *(void *)(v13 + 8);
  int v15 = *(unsigned __int8 *)(v14 - 16);
  v14 -= 16;
  sub_1B4C0D9B8((uint64_t *)(v14 + 8), v15);
  *(void *)(v13 + 8) = v14;
  return 1;
}

void sub_1B4C150F8(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char v13 = 12;
  strcpy((char *)__p, "out_of_range");
  sub_1B4C0EB24(a1, &v14);
  int v6 = *(char *)(a2 + 23);
  if (v6 >= 0) {
    unint64_t v7 = (const std::string::value_type *)a2;
  }
  else {
    unint64_t v7 = *(const std::string::value_type **)a2;
  }
  if (v6 >= 0) {
    std::string::size_type v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v8 = *(void *)(a2 + 8);
  }
  uint64_t v9 = std::string::append(&v14, v7, v8);
  long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  int64_t v16 = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)int v15 = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v14.__r_.__value_.__l.__data_);
    if ((v13 & 0x80000000) == 0) {
      goto LABEL_9;
    }
  }
  else if ((v13 & 0x80000000) == 0)
  {
    goto LABEL_9;
  }
  operator delete(__p[0]);
LABEL_9:
  if (v16 >= 0) {
    uint64_t v11 = v15;
  }
  else {
    uint64_t v11 = (void **)v15[0];
  }
  *(void *)a3 = &unk_1F0D55628;
  *(_DWORD *)(a3 + 8) = a1;
  std::runtime_error::runtime_error((std::runtime_error *)(a3 + 16), (const char *)v11);
  *(void *)a3 = &unk_1F0D555B0;
  if (SHIBYTE(v16) < 0) {
    operator delete(v15[0]);
  }
}

void sub_1B4C15248(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  std::exception::~exception(v26);
  if (a26 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B4C15298(std::runtime_error *a1)
{
  a1->__vftable = (std::runtime_error_vtbl *)&unk_1F0D55628;
  std::runtime_error::~runtime_error(a1 + 1);
  std::exception::~exception(a1);
}

uint64_t sub_1B4C152EC(unsigned __int8 **a1, char *a2, char a3)
{
  if ((*(void *)&a1[4][((unint64_t)(a1[5] - 1) >> 3) & 0x1FFFFFFFFFFFFFF8] >> (*((unsigned char *)a1 + 40) - 1)))
  {
    v31[0] = *a2;
    switch(v31[0])
    {
      case 1:
        uint64_t v24 = operator new(0x18uLL);
        _OWORD v24[2] = 0;
        v24[1] = 0;
        *uint64_t v24 = v24 + 1;
        uint64_t v32 = v24;
        break;
      case 2:
        unint64_t v25 = operator new(0x18uLL);
        v25[1] = 0;
        v25[2] = 0;
        void *v25 = 0;
        uint64_t v32 = v25;
        break;
      case 3:
        unint64_t v26 = operator new(0x18uLL);
        v26[23] = 0;
        *unint64_t v26 = 0;
        uint64_t v32 = v26;
        break;
      case 4:
        LOBYTE(v32) = 0;
        break;
      default:
        uint64_t v32 = 0;
        break;
    }
    if (a3) {
      goto LABEL_7;
    }
    int v34 = (unint64_t)(a1[2] - a1[1]) >> 3;
    char v33 = 5;
    uint64_t v5 = a1[15];
    if (!v5) {
      sub_1B4BE345C();
    }
    if ((*(uint64_t (**)(unsigned __int8 *, int *, char *, char *))(*(void *)v5 + 48))(v5, &v34, &v33, v31))
    {
LABEL_7:
      int v6 = a1[2];
      if (a1[1] == v6)
      {
        unsigned __int8 v12 = v31[0];
        uint64_t v13 = (uint64_t)v32;
        v31[0] = 0;
        uint64_t v32 = 0;
        uint64_t v14 = (uint64_t)*a1;
        int v15 = **a1;
        *(unsigned char *)uint64_t v14 = v12;
        char v29 = v15;
        uint64_t v16 = *(void *)(v14 + 8);
        *(void *)(v14 + 8) = v13;
        uint64_t v30 = v16;
        sub_1B4C0D9B8(&v30, v15);
LABEL_23:
        uint64_t v11 = 1;
        goto LABEL_24;
      }
      uint64_t v7 = *((void *)v6 - 1);
      if (v7)
      {
        if (*(unsigned char *)v7 == 2)
        {
          uint64_t v8 = *(void *)(v7 + 8);
          unint64_t v9 = *(void *)(v8 + 8);
          if (v9 >= *(void *)(v8 + 16))
          {
            long long v10 = sub_1B4C0E12C((void **)v8, v31);
          }
          else
          {
            *(unsigned char *)unint64_t v9 = v31[0];
            *(void *)(v9 + 8) = v32;
            v31[0] = 0;
            uint64_t v32 = 0;
            long long v10 = (char *)(v9 + 16);
          }
          *(void *)(v8 + 8) = v10;
          goto LABEL_23;
        }
        unint64_t v17 = (unint64_t)(a1[8] - 1);
        unint64_t v18 = *(void *)&a1[7][(v17 >> 3) & 0x1FFFFFFFFFFFFFF8];
        a1[8] = (unsigned __int8 *)v17;
        if ((v18 >> v17))
        {
          unsigned __int8 v19 = v31[0];
          uint64_t v20 = (uint64_t)v32;
          v31[0] = 0;
          uint64_t v32 = 0;
          uint64_t v21 = a1[10];
          int v22 = *v21;
          *uint64_t v21 = v19;
          uint64_t v23 = *((void *)v21 + 1);
          *((void *)v21 + 1) = v20;
          uint64_t v28 = v23;
          sub_1B4C0D9B8(&v28, v22);
          goto LABEL_23;
        }
      }
    }
    uint64_t v11 = 0;
LABEL_24:
    sub_1B4C0D9B8((uint64_t *)&v32, v31[0]);
    return v11;
  }
  return 0;
}

void sub_1B4C15574(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unsigned __int8 a14)
{
  sub_1B4C0D9B8(v14, a14);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_1B4C155AC(unsigned __int8 **a1)
{
  uint64_t result = *a1;
  int v3 = *result;
  if (v3 == 2) {
    return a1[2];
  }
  if (v3 == 1) {
    return a1[1] + 56;
  }
  if (a1[3])
  {
    exception = __cxa_allocate_exception(0x20uLL);
    sub_1B4BB8DC0(v5, "cannot get value");
    sub_1B4C15BAC(214, (uint64_t)v5, (uint64_t)exception);
    __cxa_throw(exception, (struct type_info *)&unk_1F0D53980, (void (*)(void *))sub_1B4C15D40);
  }
  return result;
}

void sub_1B4C15674(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if (v16)
    {
LABEL_6:
      __cxa_free_exception(v15);
      _Unwind_Resume(a1);
    }
  }
  else if (v16)
  {
    goto LABEL_6;
  }
  _Unwind_Resume(a1);
}

void sub_1B4C156B0(unsigned __int8 *a1@<X0>, unsigned __int8 **a2@<X1>, unsigned __int8 **a3@<X8>)
{
  if (*a2 != a1)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    sub_1B4BB8DC0(&v34, "iterator does not fit current value");
    sub_1B4C15BAC(202, (uint64_t)&v34, (uint64_t)exception);
    __cxa_throw(exception, (struct type_info *)&unk_1F0D53980, (void (*)(void *))sub_1B4C15D40);
  }
  a3[1] = 0;
  uint64_t v5 = a3 + 1;
  *a3 = a1;
  a3[2] = 0;
  a3[3] = (unsigned __int8 *)0x8000000000000000;
  int v6 = *a1;
  if (v6 == 2)
  {
    uint64_t v11 = *((void *)a1 + 1);
    unsigned __int8 v12 = *(unsigned __int8 **)(v11 + 8);
    a3[2] = v12;
    uint64_t v13 = a2[2];
    uint64_t v14 = v13 + 16;
    if (v13 + 16 == v12)
    {
      unsigned __int8 v19 = (uint64_t *)a2[2];
      if (v12 == v13)
      {
LABEL_29:
        *(void *)(v11 + 8) = v19;
        a3[2] = v13;
        return;
      }
    }
    else
    {
      do
      {
        unsigned __int8 v15 = *v14;
        uint64_t v16 = *((void *)v14 + 1);
        *uint64_t v14 = 0;
        *((void *)v14 + 1) = 0;
        int v17 = *(v14 - 16);
        *(v14 - 16) = v15;
        LOBYTE(v34) = v17;
        uint64_t v18 = *((void *)v14 - 1);
        *((void *)v14 - 1) = v16;
        *((void *)&v34 + 1) = v18;
        sub_1B4C0D9B8((uint64_t *)&v34 + 1, v17);
        v14 += 16;
      }
      while (v14 != v12);
      unsigned __int8 v12 = *(unsigned __int8 **)(v11 + 8);
      unsigned __int8 v19 = (uint64_t *)(v14 - 16);
      if (v12 == (unsigned __int8 *)v19) {
        goto LABEL_29;
      }
    }
    uint64_t v24 = (uint64_t *)(v12 - 8);
    do
    {
      unint64_t v25 = v24 - 1;
      sub_1B4C0D9B8(v24, *((unsigned __int8 *)v24 - 8));
      v24 -= 2;
    }
    while (v25 != v19);
    goto LABEL_29;
  }
  if (v6 == 1)
  {
    uint64_t v7 = (unsigned __int8 **)*((void *)a1 + 1);
    unsigned __int8 *v5 = (unsigned __int8 *)(v7 + 1);
    uint64_t v8 = a2[1];
    unint64_t v9 = (unsigned __int8 *)*((void *)v8 + 1);
    if (v9)
    {
      do
      {
        long long v10 = v9;
        unint64_t v9 = *(unsigned __int8 **)v9;
      }
      while (v9);
    }
    else
    {
      uint64_t v21 = a2[1];
      do
      {
        long long v10 = (unsigned __int8 *)*((void *)v21 + 2);
        BOOL v22 = *(void *)v10 == (void)v21;
        uint64_t v21 = v10;
      }
      while (!v22);
    }
    if (*v7 == v8) {
      const std::string::value_type *v7 = v10;
    }
    uint64_t v23 = (uint64_t *)v7[1];
    --v7[2];
    sub_1B4BF1724(v23, (uint64_t *)v8);
    sub_1B4C0D9B8((uint64_t *)v8 + 8, v8[56]);
    if ((char)v8[55] < 0) {
      operator delete(*((void **)v8 + 4));
    }
    operator delete(v8);
    unsigned __int8 *v5 = v10;
  }
  else
  {
    a3[3] = (unsigned __int8 *)1;
    if ((v6 - 3) > 4)
    {
      uint64_t v28 = __cxa_allocate_exception(0x20uLL);
      unint64_t v29 = (char)*a1;
      if (v29 > 8) {
        uint64_t v30 = "number";
      }
      else {
        uint64_t v30 = off_1E60A3890[v29];
      }
      sub_1B4BB8DC0(&v33, v30);
      uint64_t v31 = std::string::insert(&v33, 0, "cannot use erase() with ");
      long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
      std::string::size_type v35 = v31->__r_.__value_.__r.__words[2];
      long long v34 = v32;
      v31->__r_.__value_.__l.__size_ = 0;
      v31->__r_.__value_.__r.__words[2] = 0;
      v31->__r_.__value_.__r.__words[0] = 0;
      sub_1B4C15DFC(307, (uint64_t)&v34, (uint64_t)v28);
      __cxa_throw(v28, (struct type_info *)&unk_1F0D53920, (void (*)(void *))sub_1B4C15F98);
    }
    if (a2[3])
    {
      uint64_t v27 = __cxa_allocate_exception(0x20uLL);
      sub_1B4BB8DC0(&v34, "iterator out of range");
      sub_1B4C15BAC(205, (uint64_t)&v34, (uint64_t)v27);
      __cxa_throw(v27, (struct type_info *)&unk_1F0D53980, (void (*)(void *))sub_1B4C15D40);
    }
    if (v6 == 3)
    {
      uint64_t v20 = *((void *)a1 + 1);
      if (*(char *)(v20 + 23) < 0)
      {
        operator delete(*(void **)v20);
        uint64_t v20 = *((void *)a1 + 1);
      }
      operator delete((void *)v20);
      *((void *)a1 + 1) = 0;
    }
    *a1 = 0;
  }
}

void sub_1B4C15A1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if (v22) {
    __cxa_free_exception(v21);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1B4C15AA0(unsigned __int8 **a1, unsigned __int8 **a2)
{
  if (*a1 != *a2)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    sub_1B4BB8DC0(v7, "cannot compare iterators of different containers");
    sub_1B4C15BAC(212, (uint64_t)v7, (uint64_t)exception);
    __cxa_throw(exception, (struct type_info *)&unk_1F0D53980, (void (*)(void *))sub_1B4C15D40);
  }
  int v2 = **a1;
  if (v2 == 2)
  {
    int v3 = a1[2];
    uint64_t v4 = a2[2];
  }
  else if (v2 == 1)
  {
    int v3 = a1[1];
    uint64_t v4 = a2[1];
  }
  else
  {
    int v3 = a1[3];
    uint64_t v4 = a2[3];
  }
  return v3 == v4;
}

void sub_1B4C15B70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if (v16)
    {
LABEL_6:
      __cxa_free_exception(v15);
      _Unwind_Resume(a1);
    }
  }
  else if (v16)
  {
    goto LABEL_6;
  }
  _Unwind_Resume(a1);
}

void sub_1B4C15BAC(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char v13 = 16;
  strcpy(__p, "invalid_iterator");
  sub_1B4C0EB24(a1, &v14);
  int v6 = *(char *)(a2 + 23);
  if (v6 >= 0) {
    uint64_t v7 = (const std::string::value_type *)a2;
  }
  else {
    uint64_t v7 = *(const std::string::value_type **)a2;
  }
  if (v6 >= 0) {
    std::string::size_type v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v8 = *(void *)(a2 + 8);
  }
  unint64_t v9 = std::string::append(&v14, v7, v8);
  long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  int64_t v16 = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)unsigned __int8 v15 = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v14.__r_.__value_.__l.__data_);
    if ((v13 & 0x80000000) == 0) {
      goto LABEL_9;
    }
  }
  else if ((v13 & 0x80000000) == 0)
  {
    goto LABEL_9;
  }
  operator delete(*(void **)__p);
LABEL_9:
  if (v16 >= 0) {
    uint64_t v11 = v15;
  }
  else {
    uint64_t v11 = (void **)v15[0];
  }
  *(void *)a3 = &unk_1F0D55628;
  *(_DWORD *)(a3 + 8) = a1;
  std::runtime_error::runtime_error((std::runtime_error *)(a3 + 16), (const char *)v11);
  *(void *)a3 = &unk_1F0D555D8;
  if (SHIBYTE(v16) < 0) {
    operator delete(v15[0]);
  }
}

void sub_1B4C15CF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  std::exception::~exception(v26);
  if (a26 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B4C15D40(std::runtime_error *a1)
{
  a1->__vftable = (std::runtime_error_vtbl *)&unk_1F0D55628;
  std::runtime_error::~runtime_error(a1 + 1);
  std::exception::~exception(a1);
}

void sub_1B4C15D94(std::runtime_error *a1)
{
  a1->__vftable = (std::runtime_error_vtbl *)&unk_1F0D55628;
  std::runtime_error::~runtime_error(a1 + 1);
  std::exception::~exception(a1);
  JUMPOUT(0x1BA9929C0);
}

void sub_1B4C15DFC(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char v13 = 10;
  strcpy((char *)__p, "type_error");
  sub_1B4C0EB24(a1, &v14);
  int v6 = *(char *)(a2 + 23);
  if (v6 >= 0) {
    uint64_t v7 = (const std::string::value_type *)a2;
  }
  else {
    uint64_t v7 = *(const std::string::value_type **)a2;
  }
  if (v6 >= 0) {
    std::string::size_type v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v8 = *(void *)(a2 + 8);
  }
  unint64_t v9 = std::string::append(&v14, v7, v8);
  long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  int64_t v16 = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)unsigned __int8 v15 = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v14.__r_.__value_.__l.__data_);
    if ((v13 & 0x80000000) == 0) {
      goto LABEL_9;
    }
  }
  else if ((v13 & 0x80000000) == 0)
  {
    goto LABEL_9;
  }
  operator delete(__p[0]);
LABEL_9:
  if (v16 >= 0) {
    uint64_t v11 = v15;
  }
  else {
    uint64_t v11 = (void **)v15[0];
  }
  *(void *)a3 = &unk_1F0D55628;
  *(_DWORD *)(a3 + 8) = a1;
  std::runtime_error::runtime_error((std::runtime_error *)(a3 + 16), (const char *)v11);
  *(void *)a3 = &unk_1F0D55538;
  if (SHIBYTE(v16) < 0) {
    operator delete(v15[0]);
  }
}

void sub_1B4C15F48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  std::exception::~exception(v26);
  if (a26 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B4C15F98(std::runtime_error *a1)
{
  a1->__vftable = (std::runtime_error_vtbl *)&unk_1F0D55628;
  std::runtime_error::~runtime_error(a1 + 1);
  std::exception::~exception(a1);
}

void sub_1B4C15FEC(std::runtime_error *a1)
{
  a1->__vftable = (std::runtime_error_vtbl *)&unk_1F0D55628;
  std::runtime_error::~runtime_error(a1 + 1);
  std::exception::~exception(a1);
  JUMPOUT(0x1BA9929C0);
}

uint64_t **sub_1B4C16054(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  uint64_t v7 = a1 + 1;
  int v6 = a1[1];
  if (v6)
  {
    int v8 = *((char *)a2 + 23);
    if (v8 >= 0) {
      size_t v9 = *((unsigned __int8 *)a2 + 23);
    }
    else {
      size_t v9 = (size_t)a2[1];
    }
    if (v8 >= 0) {
      long long v10 = a2;
    }
    else {
      long long v10 = *a2;
    }
    while (1)
    {
      while (1)
      {
        uint64_t v11 = (uint64_t **)v6;
        std::string v14 = (const void *)v6[4];
        unsigned __int8 v12 = v6 + 4;
        char v13 = v14;
        int v15 = *((char *)v12 + 23);
        if (v15 >= 0) {
          size_t v16 = *((unsigned __int8 *)v12 + 23);
        }
        else {
          size_t v16 = v12[1];
        }
        if (v15 >= 0) {
          int v17 = v12;
        }
        else {
          int v17 = v13;
        }
        if (v16 >= v9) {
          size_t v18 = v9;
        }
        else {
          size_t v18 = v16;
        }
        int v19 = memcmp(v10, v17, v18);
        BOOL v20 = v9 < v16;
        if (v19) {
          BOOL v20 = v19 < 0;
        }
        if (!v20) {
          break;
        }
        int v6 = *v11;
        uint64_t v7 = v11;
        if (!*v11) {
          goto LABEL_27;
        }
      }
      int v21 = memcmp(v17, v10, v18);
      BOOL v22 = v16 < v9;
      if (v21) {
        BOOL v22 = v21 < 0;
      }
      if (!v22) {
        return v11;
      }
      int v6 = v11[1];
      if (!v6)
      {
        uint64_t v7 = v11 + 1;
        goto LABEL_27;
      }
    }
  }
  else
  {
    uint64_t v11 = a1 + 1;
LABEL_27:
    uint64_t v23 = (char *)operator new(0x48uLL);
    uint64_t v24 = v23 + 32;
    unint64_t v25 = *a4;
    if (*((char *)*a4 + 23) < 0)
    {
      sub_1B4BCA11C(v24, *(void **)v25, *((void *)v25 + 1));
    }
    else
    {
      long long v26 = *v25;
      *((void *)v23 + 6) = *((void *)v25 + 2);
      *(_OWORD *)uint64_t v24 = v26;
    }
    v23[56] = 0;
    *((void *)v23 + 8) = 0;
    *(void *)uint64_t v23 = 0;
    *((void *)v23 + 1) = 0;
    *((void *)v23 + 2) = v11;
    const std::string::value_type *v7 = (uint64_t *)v23;
    uint64_t v27 = (uint64_t *)**a1;
    uint64_t v28 = (uint64_t *)v23;
    if (v27)
    {
      *a1 = v27;
      uint64_t v28 = *v7;
    }
    sub_1B4BB3DA4(a1[1], v28);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return (uint64_t **)v23;
}

void sub_1B4C161E4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_1B4C161F8(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((unsigned char *)a1 + 16))
    {
      sub_1B4C0D9B8((uint64_t *)(v2 + 64), *(unsigned __int8 *)(v2 + 56));
      if (*(char *)(v2 + 55) < 0) {
        operator delete(*(void **)(v2 + 32));
      }
    }
    operator delete((void *)v2);
  }
  return a1;
}

void sub_1B4C16254(std::runtime_error *a1)
{
  a1->__vftable = (std::runtime_error_vtbl *)&unk_1F0D55628;
  std::runtime_error::~runtime_error(a1 + 1);
  std::exception::~exception(a1);
  JUMPOUT(0x1BA9929C0);
}

uint64_t sub_1B4C162BC(unsigned __int8 **a1, uint64_t *a2, char a3)
{
  if ((*(void *)&a1[4][((unint64_t)(a1[5] - 1) >> 3) & 0x1FFFFFFFFFFFFFF8] >> (*((unsigned char *)a1 + 40) - 1)))
  {
    uint64_t v4 = *a2;
    v28[0] = 7;
    uint64_t v29 = v4;
    if (a3) {
      goto LABEL_5;
    }
    int v31 = (unint64_t)(a1[2] - a1[1]) >> 3;
    char v30 = 5;
    uint64_t v5 = a1[15];
    if (!v5) {
      sub_1B4BE345C();
    }
    if ((*(uint64_t (**)(unsigned __int8 *, int *, char *, char *))(*(void *)v5 + 48))(v5, &v31, &v30, v28))
    {
LABEL_5:
      int v6 = a1[2];
      if (a1[1] == v6)
      {
        unsigned __int8 v12 = v28[0];
        uint64_t v13 = v29;
        v28[0] = 0;
        uint64_t v29 = 0;
        uint64_t v14 = (uint64_t)*a1;
        int v15 = **a1;
        *(unsigned char *)uint64_t v14 = v12;
        char v26 = v15;
        uint64_t v16 = *(void *)(v14 + 8);
        *(void *)(v14 + 8) = v13;
        uint64_t v27 = v16;
        sub_1B4C0D9B8(&v27, v15);
LABEL_17:
        uint64_t v11 = 1;
        goto LABEL_18;
      }
      uint64_t v7 = *((void *)v6 - 1);
      if (v7)
      {
        if (*(unsigned char *)v7 == 2)
        {
          uint64_t v8 = *(void *)(v7 + 8);
          unint64_t v9 = *(void *)(v8 + 8);
          if (v9 >= *(void *)(v8 + 16))
          {
            long long v10 = sub_1B4C0E12C((void **)v8, v28);
          }
          else
          {
            *(unsigned char *)unint64_t v9 = v28[0];
            *(void *)(v9 + 8) = v29;
            v28[0] = 0;
            uint64_t v29 = 0;
            long long v10 = (char *)(v9 + 16);
          }
          *(void *)(v8 + 8) = v10;
          goto LABEL_17;
        }
        unint64_t v17 = (unint64_t)(a1[8] - 1);
        unint64_t v18 = *(void *)&a1[7][(v17 >> 3) & 0x1FFFFFFFFFFFFFF8];
        a1[8] = (unsigned __int8 *)v17;
        if ((v18 >> v17))
        {
          unsigned __int8 v19 = v28[0];
          uint64_t v20 = v29;
          v28[0] = 0;
          uint64_t v29 = 0;
          int v21 = a1[10];
          int v22 = *v21;
          *int v21 = v19;
          uint64_t v23 = *((void *)v21 + 1);
          *((void *)v21 + 1) = v20;
          uint64_t v25 = v23;
          sub_1B4C0D9B8(&v25, v22);
          goto LABEL_17;
        }
      }
    }
    uint64_t v11 = 0;
LABEL_18:
    sub_1B4C0D9B8(&v29, v28[0]);
    return v11;
  }
  return 0;
}

void sub_1B4C164C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unsigned __int8 a14)
{
  sub_1B4C0D9B8(v14, a14);
  _Unwind_Resume(a1);
}

uint64_t sub_1B4C164DC(unsigned __int8 **a1, unsigned __int8 *a2, char a3)
{
  if ((*(void *)&a1[4][((unint64_t)(a1[5] - 1) >> 3) & 0x1FFFFFFFFFFFFFF8] >> (*((unsigned char *)a1 + 40) - 1)))
  {
    uint64_t v4 = *a2;
    v28[0] = 4;
    uint64_t v29 = v4;
    if (a3) {
      goto LABEL_5;
    }
    int v31 = (unint64_t)(a1[2] - a1[1]) >> 3;
    char v30 = 5;
    uint64_t v5 = a1[15];
    if (!v5) {
      sub_1B4BE345C();
    }
    if ((*(uint64_t (**)(unsigned __int8 *, int *, char *, char *))(*(void *)v5 + 48))(v5, &v31, &v30, v28))
    {
LABEL_5:
      int v6 = a1[2];
      if (a1[1] == v6)
      {
        unsigned __int8 v12 = v28[0];
        uint64_t v13 = v29;
        v28[0] = 0;
        uint64_t v29 = 0;
        uint64_t v14 = (uint64_t)*a1;
        int v15 = **a1;
        *(unsigned char *)uint64_t v14 = v12;
        char v26 = v15;
        uint64_t v16 = *(void *)(v14 + 8);
        *(void *)(v14 + 8) = v13;
        uint64_t v27 = v16;
        sub_1B4C0D9B8(&v27, v15);
LABEL_17:
        uint64_t v11 = 1;
        goto LABEL_18;
      }
      uint64_t v7 = *((void *)v6 - 1);
      if (v7)
      {
        if (*(unsigned char *)v7 == 2)
        {
          uint64_t v8 = *(void *)(v7 + 8);
          unint64_t v9 = *(void *)(v8 + 8);
          if (v9 >= *(void *)(v8 + 16))
          {
            long long v10 = sub_1B4C0E12C((void **)v8, v28);
          }
          else
          {
            *(unsigned char *)unint64_t v9 = v28[0];
            *(void *)(v9 + 8) = v29;
            v28[0] = 0;
            uint64_t v29 = 0;
            long long v10 = (char *)(v9 + 16);
          }
          *(void *)(v8 + 8) = v10;
          goto LABEL_17;
        }
        unint64_t v17 = (unint64_t)(a1[8] - 1);
        unint64_t v18 = *(void *)&a1[7][(v17 >> 3) & 0x1FFFFFFFFFFFFFF8];
        a1[8] = (unsigned __int8 *)v17;
        if ((v18 >> v17))
        {
          unsigned __int8 v19 = v28[0];
          uint64_t v20 = v29;
          v28[0] = 0;
          uint64_t v29 = 0;
          int v21 = a1[10];
          int v22 = *v21;
          *int v21 = v19;
          uint64_t v23 = *((void *)v21 + 1);
          *((void *)v21 + 1) = v20;
          uint64_t v25 = v23;
          sub_1B4C0D9B8(&v25, v22);
          goto LABEL_17;
        }
      }
    }
    uint64_t v11 = 0;
LABEL_18:
    sub_1B4C0D9B8(&v29, v28[0]);
    return v11;
  }
  return 0;
}

void sub_1B4C166E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unsigned __int8 a14)
{
  sub_1B4C0D9B8(v14, a14);
  _Unwind_Resume(a1);
}

uint64_t sub_1B4C166FC(unsigned __int8 **a1, uint64_t a2, char a3)
{
  if ((*(void *)&a1[4][((unint64_t)(a1[5] - 1) >> 3) & 0x1FFFFFFFFFFFFFF8] >> (*((unsigned char *)a1 + 40) - 1)))
  {
    v27[0] = 0;
    uint64_t v28 = 0;
    if (a3) {
      goto LABEL_5;
    }
    int v30 = (unint64_t)(a1[2] - a1[1]) >> 3;
    char v29 = 5;
    uint64_t v4 = a1[15];
    if (!v4) {
      sub_1B4BE345C();
    }
    if ((*(uint64_t (**)(unsigned __int8 *, int *, char *, char *))(*(void *)v4 + 48))(v4, &v30, &v29, v27))
    {
LABEL_5:
      uint64_t v5 = a1[2];
      if (a1[1] == v5)
      {
        unsigned __int8 v11 = v27[0];
        uint64_t v12 = v28;
        v27[0] = 0;
        uint64_t v28 = 0;
        uint64_t v13 = (uint64_t)*a1;
        int v14 = **a1;
        *(unsigned char *)uint64_t v13 = v11;
        char v25 = v14;
        uint64_t v15 = *(void *)(v13 + 8);
        *(void *)(v13 + 8) = v12;
        uint64_t v26 = v15;
        sub_1B4C0D9B8(&v26, v14);
LABEL_17:
        uint64_t v10 = 1;
        goto LABEL_18;
      }
      uint64_t v6 = *((void *)v5 - 1);
      if (v6)
      {
        if (*(unsigned char *)v6 == 2)
        {
          uint64_t v7 = *(void *)(v6 + 8);
          unint64_t v8 = *(void *)(v7 + 8);
          if (v8 >= *(void *)(v7 + 16))
          {
            unint64_t v9 = sub_1B4C0E12C((void **)v7, v27);
          }
          else
          {
            *(unsigned char *)unint64_t v8 = v27[0];
            *(void *)(v8 + 8) = v28;
            v27[0] = 0;
            uint64_t v28 = 0;
            unint64_t v9 = (char *)(v8 + 16);
          }
          *(void *)(v7 + 8) = v9;
          goto LABEL_17;
        }
        unint64_t v16 = (unint64_t)(a1[8] - 1);
        unint64_t v17 = *(void *)&a1[7][(v16 >> 3) & 0x1FFFFFFFFFFFFFF8];
        a1[8] = (unsigned __int8 *)v16;
        if ((v17 >> v16))
        {
          unsigned __int8 v18 = v27[0];
          uint64_t v19 = v28;
          v27[0] = 0;
          uint64_t v28 = 0;
          uint64_t v20 = a1[10];
          int v21 = *v20;
          unsigned __int8 *v20 = v18;
          uint64_t v22 = *((void *)v20 + 1);
          *((void *)v20 + 1) = v19;
          uint64_t v24 = v22;
          sub_1B4C0D9B8(&v24, v21);
          goto LABEL_17;
        }
      }
    }
    uint64_t v10 = 0;
LABEL_18:
    sub_1B4C0D9B8(&v28, v27[0]);
    return v10;
  }
  return 0;
}

void sub_1B4C168FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unsigned __int8 a14)
{
  sub_1B4C0D9B8(v14, a14);
  _Unwind_Resume(a1);
}

uint64_t sub_1B4C16914(unsigned __int8 **a1, uint64_t *a2, char a3)
{
  if ((*(void *)&a1[4][((unint64_t)(a1[5] - 1) >> 3) & 0x1FFFFFFFFFFFFFF8] >> (*((unsigned char *)a1 + 40) - 1)))
  {
    uint64_t v4 = *a2;
    v28[0] = 5;
    uint64_t v29 = v4;
    if (a3) {
      goto LABEL_5;
    }
    int v31 = (unint64_t)(a1[2] - a1[1]) >> 3;
    char v30 = 5;
    uint64_t v5 = a1[15];
    if (!v5) {
      sub_1B4BE345C();
    }
    if ((*(uint64_t (**)(unsigned __int8 *, int *, char *, char *))(*(void *)v5 + 48))(v5, &v31, &v30, v28))
    {
LABEL_5:
      uint64_t v6 = a1[2];
      if (a1[1] == v6)
      {
        unsigned __int8 v12 = v28[0];
        uint64_t v13 = v29;
        v28[0] = 0;
        uint64_t v29 = 0;
        uint64_t v14 = (uint64_t)*a1;
        int v15 = **a1;
        *(unsigned char *)uint64_t v14 = v12;
        char v26 = v15;
        uint64_t v16 = *(void *)(v14 + 8);
        *(void *)(v14 + 8) = v13;
        uint64_t v27 = v16;
        sub_1B4C0D9B8(&v27, v15);
LABEL_17:
        uint64_t v11 = 1;
        goto LABEL_18;
      }
      uint64_t v7 = *((void *)v6 - 1);
      if (v7)
      {
        if (*(unsigned char *)v7 == 2)
        {
          uint64_t v8 = *(void *)(v7 + 8);
          unint64_t v9 = *(void *)(v8 + 8);
          if (v9 >= *(void *)(v8 + 16))
          {
            uint64_t v10 = sub_1B4C0E12C((void **)v8, v28);
          }
          else
          {
            *(unsigned char *)unint64_t v9 = v28[0];
            *(void *)(v9 + 8) = v29;
            v28[0] = 0;
            uint64_t v29 = 0;
            uint64_t v10 = (char *)(v9 + 16);
          }
          *(void *)(v8 + 8) = v10;
          goto LABEL_17;
        }
        unint64_t v17 = (unint64_t)(a1[8] - 1);
        unint64_t v18 = *(void *)&a1[7][(v17 >> 3) & 0x1FFFFFFFFFFFFFF8];
        a1[8] = (unsigned __int8 *)v17;
        if ((v18 >> v17))
        {
          unsigned __int8 v19 = v28[0];
          uint64_t v20 = v29;
          v28[0] = 0;
          uint64_t v29 = 0;
          int v21 = a1[10];
          int v22 = *v21;
          *int v21 = v19;
          uint64_t v23 = *((void *)v21 + 1);
          *((void *)v21 + 1) = v20;
          uint64_t v25 = v23;
          sub_1B4C0D9B8(&v25, v22);
          goto LABEL_17;
        }
      }
    }
    uint64_t v11 = 0;
LABEL_18:
    sub_1B4C0D9B8(&v29, v28[0]);
    return v11;
  }
  return 0;
}

void sub_1B4C16B18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unsigned __int8 a14)
{
  sub_1B4C0D9B8(v14, a14);
  _Unwind_Resume(a1);
}

uint64_t sub_1B4C16B30(unsigned __int8 **a1, uint64_t a2, char a3)
{
  if ((*(void *)&a1[4][((unint64_t)(a1[5] - 1) >> 3) & 0x1FFFFFFFFFFFFFF8] >> (*((unsigned char *)a1 + 40) - 1)))
  {
    v31[0] = 3;
    uint64_t v6 = operator new(0x18uLL);
    uint64_t v7 = (uint64_t)v6;
    if (*(char *)(a2 + 23) < 0)
    {
      sub_1B4BCA11C(v6, *(void **)a2, *(void *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)uint64_t v6 = *(_OWORD *)a2;
      std::string v6[2] = *(void *)(a2 + 16);
    }
    uint64_t v32 = v7;
    if (a3) {
      goto LABEL_9;
    }
    int v34 = (unint64_t)(a1[2] - a1[1]) >> 3;
    char v33 = 5;
    unint64_t v9 = a1[15];
    if (!v9) {
      sub_1B4BE345C();
    }
    if ((*(uint64_t (**)(unsigned __int8 *, int *, char *, char *))(*(void *)v9 + 48))(v9, &v34, &v33, v31))
    {
LABEL_9:
      uint64_t v10 = a1[2];
      if (a1[1] == v10)
      {
        unsigned __int8 v15 = v31[0];
        uint64_t v16 = v32;
        v31[0] = 0;
        uint64_t v32 = 0;
        uint64_t v17 = (uint64_t)*a1;
        int v18 = **a1;
        *(unsigned char *)uint64_t v17 = v15;
        char v29 = v18;
        uint64_t v19 = *(void *)(v17 + 8);
        *(void *)(v17 + 8) = v16;
        uint64_t v30 = v19;
        sub_1B4C0D9B8(&v30, v18);
LABEL_20:
        uint64_t v8 = 1;
        goto LABEL_21;
      }
      uint64_t v11 = *((void *)v10 - 1);
      if (v11)
      {
        if (*(unsigned char *)v11 == 2)
        {
          uint64_t v12 = *(void *)(v11 + 8);
          unint64_t v13 = *(void *)(v12 + 8);
          if (v13 >= *(void *)(v12 + 16))
          {
            uint64_t v14 = sub_1B4C0E12C((void **)v12, v31);
          }
          else
          {
            *(unsigned char *)unint64_t v13 = v31[0];
            *(void *)(v13 + 8) = v32;
            v31[0] = 0;
            uint64_t v32 = 0;
            uint64_t v14 = (char *)(v13 + 16);
          }
          *(void *)(v12 + 8) = v14;
          goto LABEL_20;
        }
        unint64_t v20 = (unint64_t)(a1[8] - 1);
        unint64_t v21 = *(void *)&a1[7][(v20 >> 3) & 0x1FFFFFFFFFFFFFF8];
        a1[8] = (unsigned __int8 *)v20;
        if ((v21 >> v20))
        {
          unsigned __int8 v22 = v31[0];
          uint64_t v23 = v32;
          v31[0] = 0;
          uint64_t v32 = 0;
          uint64_t v24 = a1[10];
          int v25 = *v24;
          *uint64_t v24 = v22;
          uint64_t v26 = *((void *)v24 + 1);
          *((void *)v24 + 1) = v23;
          uint64_t v28 = v26;
          sub_1B4C0D9B8(&v28, v25);
          goto LABEL_20;
        }
      }
    }
    uint64_t v8 = 0;
LABEL_21:
    sub_1B4C0D9B8(&v32, v31[0]);
    return v8;
  }
  return 0;
}

void sub_1B4C16D70(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B4C16D84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unsigned __int8 a14)
{
  sub_1B4C0D9B8(v14, a14);
  _Unwind_Resume(a1);
}

uint64_t sub_1B4C16D9C(unsigned __int8 **a1, uint64_t *a2, char a3)
{
  if ((*(void *)&a1[4][((unint64_t)(a1[5] - 1) >> 3) & 0x1FFFFFFFFFFFFFF8] >> (*((unsigned char *)a1 + 40) - 1)))
  {
    uint64_t v4 = *a2;
    v28[0] = 6;
    uint64_t v29 = v4;
    if (a3) {
      goto LABEL_5;
    }
    int v31 = (unint64_t)(a1[2] - a1[1]) >> 3;
    char v30 = 5;
    uint64_t v5 = a1[15];
    if (!v5) {
      sub_1B4BE345C();
    }
    if ((*(uint64_t (**)(unsigned __int8 *, int *, char *, char *))(*(void *)v5 + 48))(v5, &v31, &v30, v28))
    {
LABEL_5:
      uint64_t v6 = a1[2];
      if (a1[1] == v6)
      {
        unsigned __int8 v12 = v28[0];
        uint64_t v13 = v29;
        v28[0] = 0;
        uint64_t v29 = 0;
        uint64_t v14 = (uint64_t)*a1;
        int v15 = **a1;
        *(unsigned char *)uint64_t v14 = v12;
        char v26 = v15;
        uint64_t v16 = *(void *)(v14 + 8);
        *(void *)(v14 + 8) = v13;
        uint64_t v27 = v16;
        sub_1B4C0D9B8(&v27, v15);
LABEL_17:
        uint64_t v11 = 1;
        goto LABEL_18;
      }
      uint64_t v7 = *((void *)v6 - 1);
      if (v7)
      {
        if (*(unsigned char *)v7 == 2)
        {
          uint64_t v8 = *(void *)(v7 + 8);
          unint64_t v9 = *(void *)(v8 + 8);
          if (v9 >= *(void *)(v8 + 16))
          {
            uint64_t v10 = sub_1B4C0E12C((void **)v8, v28);
          }
          else
          {
            *(unsigned char *)unint64_t v9 = v28[0];
            *(void *)(v9 + 8) = v29;
            v28[0] = 0;
            uint64_t v29 = 0;
            uint64_t v10 = (char *)(v9 + 16);
          }
          *(void *)(v8 + 8) = v10;
          goto LABEL_17;
        }
        unint64_t v17 = (unint64_t)(a1[8] - 1);
        unint64_t v18 = *(void *)&a1[7][(v17 >> 3) & 0x1FFFFFFFFFFFFFF8];
        a1[8] = (unsigned __int8 *)v17;
        if ((v18 >> v17))
        {
          unsigned __int8 v19 = v28[0];
          uint64_t v20 = v29;
          v28[0] = 0;
          uint64_t v29 = 0;
          unint64_t v21 = a1[10];
          int v22 = *v21;
          *unint64_t v21 = v19;
          uint64_t v23 = *((void *)v21 + 1);
          *((void *)v21 + 1) = v20;
          uint64_t v25 = v23;
          sub_1B4C0D9B8(&v25, v22);
          goto LABEL_17;
        }
      }
    }
    uint64_t v11 = 0;
LABEL_18:
    sub_1B4C0D9B8(&v29, v28[0]);
    return v11;
  }
  return 0;
}

void sub_1B4C16FA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unsigned __int8 a14)
{
  sub_1B4C0D9B8(v14, a14);
  _Unwind_Resume(a1);
}

uint64_t sub_1B4C16FBC(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F0D55628;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  MEMORY[0x1BA992520](a1 + 16, a2 + 16);
  *(void *)a1 = &unk_1F0D55588;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  return a1;
}

uint64_t sub_1B4C17038(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F0D55628;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  MEMORY[0x1BA992520](a1 + 16, a2 + 16);
  *(void *)a1 = &unk_1F0D555B0;
  return a1;
}

uint64_t sub_1B4C170A8(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F0D55628;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  MEMORY[0x1BA992520](a1 + 16, a2 + 16);
  *(void *)a1 = &unk_1F0D555D8;
  return a1;
}

uint64_t sub_1B4C17118(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F0D55628;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  MEMORY[0x1BA992520](a1 + 16, a2 + 16);
  *(void *)a1 = &unk_1F0D55538;
  return a1;
}

uint64_t sub_1B4C17188(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F0D55628;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  MEMORY[0x1BA992520](a1 + 16, a2 + 16);
  *(void *)a1 = &unk_1F0D55560;
  return a1;
}

void sub_1B4C171F8(std::runtime_error *a1)
{
  a1->__vftable = (std::runtime_error_vtbl *)&unk_1F0D55628;
  std::runtime_error::~runtime_error(a1 + 1);
  std::exception::~exception(a1);
  JUMPOUT(0x1BA9929C0);
}

void sub_1B4C17260(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::to_string(&v12, *(void *)(a1 + 16) + 1);
  uint64_t v4 = std::string::insert(&v12, 0, " at line ");
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v13.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v13.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  uint64_t v6 = std::string::append(&v13, ", column ");
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v14.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&__p, *(void *)(a1 + 8));
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  uint64_t v10 = std::string::append(&v14, (const std::string::value_type *)p_p, size);
  *a2 = *v10;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v14.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_9:
      if ((SHIBYTE(v13.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_10;
      }
      goto LABEL_14;
    }
  }
  else if ((SHIBYTE(v14.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_9;
  }
  operator delete(v14.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v13.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_10:
    if ((SHIBYTE(v12.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_15:
    operator delete(v12.__r_.__value_.__l.__data_);
    return;
  }
LABEL_14:
  operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_15;
  }
}

void sub_1B4C173A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((*(char *)(v26 - 25) & 0x80000000) == 0)
    {
LABEL_3:
      if ((a26 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else if ((*(char *)(v26 - 25) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v26 - 48));
  if ((a26 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a20 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_9;
  }
LABEL_8:
  operator delete(a21);
  if ((a20 & 0x80000000) == 0) {
LABEL_5:
  }
    _Unwind_Resume(exception_object);
LABEL_9:
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1B4C1743C(uint64_t a1)
{
  sub_1B4C0D9B8((uint64_t *)(a1 + 144), *(unsigned __int8 *)(a1 + 136));
  uint64_t v2 = *(void *)(a1 + 120);
  if (v2 == a1 + 96)
  {
    (*(void (**)(uint64_t))(*(void *)(a1 + 96) + 32))(a1 + 96);
    int v3 = *(void **)(a1 + 56);
    if (v3) {
LABEL_5:
    }
      operator delete(v3);
  }
  else
  {
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 40))(v2);
    }
    int v3 = *(void **)(a1 + 56);
    if (v3) {
      goto LABEL_5;
    }
  }
  uint64_t v4 = *(void **)(a1 + 32);
  if (v4) {
    operator delete(v4);
  }
  long long v5 = *(void **)(a1 + 8);
  if (v5)
  {
    *(void *)(a1 + 16) = v5;
    operator delete(v5);
  }
  return a1;
}

uint64_t sub_1B4C17500(uint64_t a1, unint64_t a2)
{
  LOBYTE(v34) = 1;
  uint64_t v4 = sub_1B4C17A70((unsigned __int8 **)a1, (unsigned __int8 *)&v34);
  uint64_t v5 = v4;
  long long v7 = *(uint64_t **)(a1 + 16);
  unint64_t v6 = *(void *)(a1 + 24);
  uint64_t v8 = v7;
  if ((unint64_t)v7 < v6)
  {
    uint64_t *v7 = v4;
    uint64_t v9 = (uint64_t)(v7 + 1);
    goto LABEL_23;
  }
  uint64_t v10 = *(char **)(a1 + 8);
  uint64_t v11 = ((char *)v7 - v10) >> 3;
  unint64_t v12 = v11 + 1;
  if ((unint64_t)(v11 + 1) >> 61) {
    sub_1B4C0E0BC();
  }
  uint64_t v13 = v6 - (void)v10;
  if (v13 >> 2 > v12) {
    unint64_t v12 = v13 >> 2;
  }
  if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v14 = v12;
  }
  if (v14)
  {
    if (v14 >> 61) {
      sub_1B4BB2D38();
    }
    int v15 = (char *)operator new(8 * v14);
    uint64_t v16 = (uint64_t *)&v15[8 * v11];
    unint64_t v17 = &v15[8 * v14];
    *uint64_t v16 = v5;
    uint64_t v9 = (uint64_t)(v16 + 1);
    unint64_t v18 = (char *)((char *)v7 - v10);
    if (v7 == (uint64_t *)v10) {
      goto LABEL_21;
    }
    goto LABEL_14;
  }
  int v15 = 0;
  uint64_t v16 = (uint64_t *)(8 * v11);
  unint64_t v17 = 0;
  *(void *)(8 * v11) = v5;
  uint64_t v9 = 8 * v11 + 8;
  unint64_t v18 = (char *)((char *)v7 - v10);
  if (v7 != (uint64_t *)v10)
  {
LABEL_14:
    unint64_t v19 = (unint64_t)(v18 - 8);
    if (v19 < 0x58) {
      goto LABEL_34;
    }
    if ((unint64_t)(v10 - v15) < 0x20) {
      goto LABEL_34;
    }
    uint64_t v20 = (v19 >> 3) + 1;
    uint64_t v21 = 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v8 = &v7[v21 / 0xFFFFFFFFFFFFFFF8];
    uint64_t v16 = (uint64_t *)((char *)v16 - v21);
    int v22 = &v15[8 * v11 - 16];
    uint64_t v23 = v7 - 2;
    uint64_t v24 = v20 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v25 = *(_OWORD *)v23;
      *((_OWORD *)v22 - 1) = *((_OWORD *)v23 - 1);
      *(_OWORD *)int v22 = v25;
      v22 -= 32;
      v23 -= 4;
      v24 -= 4;
    }
    while (v24);
    if (v20 != (v20 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_34:
      do
      {
        uint64_t v26 = *--v8;
        *--uint64_t v16 = v26;
      }
      while (v8 != (uint64_t *)v10);
    }
    uint64_t v8 = *(uint64_t **)(a1 + 8);
  }
LABEL_21:
  *(void *)(a1 + 8) = v16;
  *(void *)(a1 + 16) = v9;
  *(void *)(a1 + 24) = v17;
  if (v8) {
    operator delete(v8);
  }
LABEL_23:
  *(void *)(a1 + 16) = v9;
  if (a2 != -1)
  {
    unint64_t v27 = **(char **)(v9 - 8);
    if (v27 > 2) {
      unint64_t v28 = 1;
    }
    else {
      unint64_t v28 = qword_1B4C9AE10[v27];
    }
    if (v28 < a2)
    {
      exception = __cxa_allocate_exception(0x20uLL);
      std::to_string(&v33, a2);
      int v31 = std::string::insert(&v33, 0, "excessive object size: ");
      long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
      std::string::size_type v35 = v31->__r_.__value_.__r.__words[2];
      long long v34 = v32;
      v31->__r_.__value_.__l.__size_ = 0;
      v31->__r_.__value_.__r.__words[2] = 0;
      v31->__r_.__value_.__r.__words[0] = 0;
      sub_1B4C150F8(408, (uint64_t)&v34, (uint64_t)exception);
      __cxa_throw(exception, (struct type_info *)&unk_1F0D53968, (void (*)(void *))sub_1B4C15298);
    }
  }
  return 1;
}

void sub_1B4C17758(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

uint64_t sub_1B4C177B8(uint64_t a1, unint64_t a2)
{
  LOBYTE(v34) = 2;
  uint64_t v4 = sub_1B4C17A70((unsigned __int8 **)a1, (unsigned __int8 *)&v34);
  uint64_t v5 = v4;
  long long v7 = *(uint64_t **)(a1 + 16);
  unint64_t v6 = *(void *)(a1 + 24);
  uint64_t v8 = v7;
  if ((unint64_t)v7 < v6)
  {
    uint64_t *v7 = v4;
    uint64_t v9 = (uint64_t)(v7 + 1);
    goto LABEL_23;
  }
  uint64_t v10 = *(char **)(a1 + 8);
  uint64_t v11 = ((char *)v7 - v10) >> 3;
  unint64_t v12 = v11 + 1;
  if ((unint64_t)(v11 + 1) >> 61) {
    sub_1B4C0E0BC();
  }
  uint64_t v13 = v6 - (void)v10;
  if (v13 >> 2 > v12) {
    unint64_t v12 = v13 >> 2;
  }
  if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v14 = v12;
  }
  if (v14)
  {
    if (v14 >> 61) {
      sub_1B4BB2D38();
    }
    int v15 = (char *)operator new(8 * v14);
    uint64_t v16 = (uint64_t *)&v15[8 * v11];
    unint64_t v17 = &v15[8 * v14];
    *uint64_t v16 = v5;
    uint64_t v9 = (uint64_t)(v16 + 1);
    unint64_t v18 = (char *)((char *)v7 - v10);
    if (v7 == (uint64_t *)v10) {
      goto LABEL_21;
    }
    goto LABEL_14;
  }
  int v15 = 0;
  uint64_t v16 = (uint64_t *)(8 * v11);
  unint64_t v17 = 0;
  *(void *)(8 * v11) = v5;
  uint64_t v9 = 8 * v11 + 8;
  unint64_t v18 = (char *)((char *)v7 - v10);
  if (v7 != (uint64_t *)v10)
  {
LABEL_14:
    unint64_t v19 = (unint64_t)(v18 - 8);
    if (v19 < 0x58) {
      goto LABEL_34;
    }
    if ((unint64_t)(v10 - v15) < 0x20) {
      goto LABEL_34;
    }
    uint64_t v20 = (v19 >> 3) + 1;
    uint64_t v21 = 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v8 = &v7[v21 / 0xFFFFFFFFFFFFFFF8];
    uint64_t v16 = (uint64_t *)((char *)v16 - v21);
    int v22 = &v15[8 * v11 - 16];
    uint64_t v23 = v7 - 2;
    uint64_t v24 = v20 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v25 = *(_OWORD *)v23;
      *((_OWORD *)v22 - 1) = *((_OWORD *)v23 - 1);
      *(_OWORD *)int v22 = v25;
      v22 -= 32;
      v23 -= 4;
      v24 -= 4;
    }
    while (v24);
    if (v20 != (v20 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_34:
      do
      {
        uint64_t v26 = *--v8;
        *--uint64_t v16 = v26;
      }
      while (v8 != (uint64_t *)v10);
    }
    uint64_t v8 = *(uint64_t **)(a1 + 8);
  }
LABEL_21:
  *(void *)(a1 + 8) = v16;
  *(void *)(a1 + 16) = v9;
  *(void *)(a1 + 24) = v17;
  if (v8) {
    operator delete(v8);
  }
LABEL_23:
  *(void *)(a1 + 16) = v9;
  if (a2 != -1)
  {
    unint64_t v27 = **(char **)(v9 - 8);
    if (v27 > 2) {
      unint64_t v28 = 1;
    }
    else {
      unint64_t v28 = qword_1B4C9AE10[v27];
    }
    if (v28 < a2)
    {
      exception = __cxa_allocate_exception(0x20uLL);
      std::to_string(&v33, a2);
      int v31 = std::string::insert(&v33, 0, "excessive array size: ");
      long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
      std::string::size_type v35 = v31->__r_.__value_.__r.__words[2];
      long long v34 = v32;
      v31->__r_.__value_.__l.__size_ = 0;
      v31->__r_.__value_.__r.__words[2] = 0;
      v31->__r_.__value_.__r.__words[0] = 0;
      sub_1B4C150F8(408, (uint64_t)&v34, (uint64_t)exception);
      __cxa_throw(exception, (struct type_info *)&unk_1F0D53968, (void (*)(void *))sub_1B4C15298);
    }
  }
  return 1;
}

void sub_1B4C17A10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

uint64_t sub_1B4C17A70(unsigned __int8 **a1, unsigned __int8 *a2)
{
  int v3 = a1[2];
  if (a1[1] == v3)
  {
    unsigned __int8 v9 = *a2;
    switch(*a2)
    {
      case 1u:
        uint64_t v10 = operator new(0x18uLL);
        std::string v10[2] = 0;
        v10[1] = 0;
        *uint64_t v10 = v10 + 1;
        break;
      case 2u:
        uint64_t v10 = operator new(0x18uLL);
        v10[1] = 0;
        std::string v10[2] = 0;
        *uint64_t v10 = 0;
        break;
      case 3u:
        uint64_t v10 = operator new(0x18uLL);
        *((unsigned char *)v10 + 23) = 0;
        *(unsigned char *)uint64_t v10 = 0;
        break;
      case 4u:
        LOBYTE(v25) = 0;
        uint64_t v10 = v25;
        break;
      default:
        uint64_t v10 = 0;
        break;
    }
    uint64_t v14 = (uint64_t)*a1;
    int v15 = **a1;
    *(unsigned char *)uint64_t v14 = v9;
    char v24 = v15;
    uint64_t v16 = *(void *)(v14 + 8);
    *(void *)(v14 + 8) = v10;
    long long v25 = (void *)v16;
    sub_1B4C0D9B8((uint64_t *)&v25, v15);
    return (uint64_t)*a1;
  }
  else
  {
    uint64_t v4 = *((void *)v3 - 1);
    if (*(unsigned char *)v4 == 2)
    {
      uint64_t v5 = *(void *)(v4 + 8);
      unint64_t v6 = *(void *)(v5 + 8);
      if (v6 >= *(void *)(v5 + 16))
      {
        uint64_t v8 = sub_1B4C17D60((char **)v5, a2);
      }
      else
      {
        int v7 = *a2;
        *(unsigned char *)unint64_t v6 = v7;
        switch(v7)
        {
          case 1:
            uint64_t v20 = operator new(0x18uLL);
            std::string v20[2] = 0;
            v20[1] = 0;
            void *v20 = v20 + 1;
            *(void *)(v6 + 8) = v20;
            uint64_t v8 = (char *)(v6 + 16);
            break;
          case 2:
            uint64_t v21 = operator new(0x18uLL);
            v21[1] = 0;
            _OWORD v21[2] = 0;
            *uint64_t v21 = 0;
            *(void *)(v6 + 8) = v21;
            uint64_t v8 = (char *)(v6 + 16);
            break;
          case 3:
            int v22 = operator new(0x18uLL);
            v22[23] = 0;
            *int v22 = 0;
            *(void *)(v6 + 8) = v22;
            uint64_t v8 = (char *)(v6 + 16);
            break;
          case 4:
            *(unsigned char *)(v6 + 8) = 0;
            uint64_t v8 = (char *)(v6 + 16);
            break;
          default:
            *(void *)(v6 + 8) = 0;
            uint64_t v8 = (char *)(v6 + 16);
            break;
        }
      }
      *(void *)(v5 + 8) = v8;
      return *(void *)(*(void *)(*((void *)a1[2] - 1) + 8) + 8) - 16;
    }
    else
    {
      unsigned __int8 v11 = *a2;
      switch(*a2)
      {
        case 1u:
          unint64_t v12 = operator new(0x18uLL);
          std::string v12[2] = 0;
          v12[1] = 0;
          *unint64_t v12 = v12 + 1;
          break;
        case 2u:
          unint64_t v12 = operator new(0x18uLL);
          v12[1] = 0;
          std::string v12[2] = 0;
          *unint64_t v12 = 0;
          break;
        case 3u:
          unint64_t v12 = operator new(0x18uLL);
          *((unsigned char *)v12 + 23) = 0;
          *(unsigned char *)unint64_t v12 = 0;
          break;
        case 4u:
          LOBYTE(v23) = 0;
          unint64_t v12 = v23;
          break;
        default:
          unint64_t v12 = 0;
          break;
      }
      unint64_t v17 = a1[4];
      int v18 = *v17;
      *unint64_t v17 = v11;
      uint64_t v19 = *((void *)v17 + 1);
      *((void *)v17 + 1) = v12;
      uint64_t v23 = (void *)v19;
      sub_1B4C0D9B8((uint64_t *)&v23, v18);
      return (uint64_t)a1[4];
    }
  }
}

char *sub_1B4C17D60(char **a1, unsigned __int8 *a2)
{
  uint64_t v4 = (uint64_t *)*a1;
  int v3 = (uint64_t *)a1[1];
  uint64_t v5 = ((char *)v3 - *a1) >> 4;
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 60) {
    sub_1B4C0E0BC();
  }
  uint64_t v8 = a1[2] - (char *)v4;
  if (v8 >> 3 > v6) {
    unint64_t v6 = v8 >> 3;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v9 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v6;
  }
  if (v9)
  {
    if (v9 >> 60) {
      sub_1B4BB2D38();
    }
    uint64_t v10 = (char *)operator new(16 * v9);
  }
  else
  {
    uint64_t v10 = 0;
  }
  unsigned __int8 v11 = &v10[16 * v5];
  unint64_t v12 = &v10[16 * v9];
  *((void *)&v24 + 1) = v12;
  int v13 = *a2;
  *unsigned __int8 v11 = v13;
  uint64_t v14 = v11 + 8;
  switch(v13)
  {
    case 1:
      uint64_t v21 = operator new(0x18uLL);
      _OWORD v21[2] = 0;
      v21[1] = 0;
      *uint64_t v21 = v21 + 1;
      *uint64_t v14 = v21;
      break;
    case 2:
      int v22 = operator new(0x18uLL);
      *int v22 = 0;
      v22[1] = 0;
      void v22[2] = 0;
      *uint64_t v14 = v22;
      break;
    case 3:
      uint64_t v23 = operator new(0x18uLL);
      v23[23] = 0;
      unsigned char *v23 = 0;
      *uint64_t v14 = v23;
      break;
    case 4:
      *(unsigned char *)uint64_t v14 = 0;
      break;
    default:
      *uint64_t v14 = 0;
      break;
  }
  int v15 = v11 + 16;
  *(void *)&long long v24 = v11 + 16;
  if (v3 == v4)
  {
    *a1 = v11;
    a1[1] = v15;
    a1[2] = v12;
    if (!v3) {
      return v15;
    }
    goto LABEL_19;
  }
  do
  {
    char v16 = *((unsigned char *)v3 - 16);
    v3 -= 2;
    *(v11 - 16) = v16;
    v11 -= 16;
    *((void *)v11 + 1) = v3[1];
    *(unsigned char *)int v3 = 0;
    v3[1] = 0;
  }
  while (v3 != v4);
  int v3 = (uint64_t *)*a1;
  unint64_t v17 = (uint64_t *)a1[1];
  *a1 = v11;
  *(_OWORD *)(a1 + 1) = v24;
  int v15 = (char *)v24;
  if (v17 != v3)
  {
    int v18 = v17 - 1;
    do
    {
      uint64_t v19 = v18 - 1;
      sub_1B4C0D9B8(v18, *((unsigned __int8 *)v18 - 8));
      v18 -= 2;
    }
    while (v19 != v3);
  }
  if (v3) {
LABEL_19:
  }
    operator delete(v3);
  return v15;
}

void sub_1B4C17F34(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1B4C0E0D4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B4C17F68(unsigned __int8 **a1, uint64_t *a2)
{
  int v3 = a1[2];
  if (a1[1] == v3)
  {
    uint64_t v9 = *a2;
    uint64_t v10 = (uint64_t)*a1;
    int v11 = **a1;
    *(unsigned char *)uint64_t v10 = 7;
    char v19 = v11;
    uint64_t v12 = *(void *)(v10 + 8);
    *(void *)(v10 + 8) = v9;
    uint64_t v20 = v12;
    sub_1B4C0D9B8(&v20, v11);
    return (uint64_t)*a1;
  }
  else
  {
    uint64_t v4 = *((void *)v3 - 1);
    if (*(unsigned char *)v4 == 2)
    {
      uint64_t v5 = *(void *)(v4 + 8);
      unint64_t v6 = *(void *)(v5 + 8);
      if (v6 >= *(void *)(v5 + 16))
      {
        uint64_t v8 = sub_1B4C18080((void **)v5, a2);
      }
      else
      {
        *(void *)(v6 + 8) = 0;
        uint64_t v7 = *a2;
        *(unsigned char *)unint64_t v6 = 7;
        *(void *)(v6 + 8) = v7;
        uint64_t v8 = (char *)(v6 + 16);
      }
      *(void *)(v5 + 8) = v8;
      return *(void *)(*(void *)(*((void *)a1[2] - 1) + 8) + 8) - 16;
    }
    else
    {
      uint64_t v14 = *a2;
      int v15 = a1[4];
      int v16 = *v15;
      *int v15 = 7;
      uint64_t v17 = *((void *)v15 + 1);
      *((void *)v15 + 1) = v14;
      uint64_t v18 = v17;
      sub_1B4C0D9B8(&v18, v16);
      return (uint64_t)a1[4];
    }
  }
}

char *sub_1B4C18080(void **a1, uint64_t *a2)
{
  uint64_t v4 = (uint64_t *)*a1;
  int v3 = (uint64_t *)a1[1];
  uint64_t v5 = ((char *)v3 - (unsigned char *)*a1) >> 4;
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 60) {
    sub_1B4C0E0BC();
  }
  uint64_t v7 = (unsigned char *)a1[2] - (unsigned char *)v4;
  if (v7 >> 3 > v6) {
    unint64_t v6 = v7 >> 3;
  }
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v6 = 0xFFFFFFFFFFFFFFFLL;
  }
  if (v6 >> 60) {
    sub_1B4BB2D38();
  }
  uint64_t v9 = 16 * v6;
  uint64_t v10 = (char *)operator new(16 * v6);
  int v11 = &v10[16 * v5];
  uint64_t v12 = &v10[v9];
  uint64_t v13 = *a2;
  *int v11 = 7;
  *((void *)v11 + 1) = v13;
  uint64_t v14 = v11 + 16;
  if (v3 == v4)
  {
    *a1 = v11;
    a1[1] = v14;
    a1[2] = v12;
    if (!v3) {
      return v14;
    }
    goto LABEL_13;
  }
  do
  {
    char v15 = *((unsigned char *)v3 - 16);
    v3 -= 2;
    *(v11 - 16) = v15;
    v11 -= 16;
    *((void *)v11 + 1) = v3[1];
    *(unsigned char *)int v3 = 0;
    v3[1] = 0;
  }
  while (v3 != v4);
  int v3 = (uint64_t *)*a1;
  int v16 = (uint64_t *)a1[1];
  *a1 = v11;
  a1[1] = v14;
  a1[2] = v12;
  if (v16 != v3)
  {
    uint64_t v17 = v16 - 1;
    do
    {
      uint64_t v18 = v17 - 1;
      sub_1B4C0D9B8(v17, *((unsigned __int8 *)v17 - 8));
      v17 -= 2;
    }
    while (v18 != v3);
  }
  if (v3) {
LABEL_13:
  }
    operator delete(v3);
  return v14;
}

uint64_t sub_1B4C181A8(unsigned __int8 **a1, unsigned __int8 *a2)
{
  int v3 = a1[2];
  if (a1[1] == v3)
  {
    uint64_t v9 = *a2;
    uint64_t v10 = (uint64_t)*a1;
    int v11 = **a1;
    *(unsigned char *)uint64_t v10 = 4;
    char v19 = v11;
    uint64_t v12 = *(void *)(v10 + 8);
    *(void *)(v10 + 8) = v9;
    uint64_t v20 = v12;
    sub_1B4C0D9B8(&v20, v11);
    return (uint64_t)*a1;
  }
  else
  {
    uint64_t v4 = *((void *)v3 - 1);
    if (*(unsigned char *)v4 == 2)
    {
      uint64_t v5 = *(void *)(v4 + 8);
      unint64_t v6 = *(void *)(v5 + 8);
      if (v6 >= *(void *)(v5 + 16))
      {
        uint64_t v8 = sub_1B4C182C0((void **)v5, a2);
      }
      else
      {
        *(void *)(v6 + 8) = 0;
        uint64_t v7 = *a2;
        *(unsigned char *)unint64_t v6 = 4;
        *(void *)(v6 + 8) = v7;
        uint64_t v8 = (char *)(v6 + 16);
      }
      *(void *)(v5 + 8) = v8;
      return *(void *)(*(void *)(*((void *)a1[2] - 1) + 8) + 8) - 16;
    }
    else
    {
      uint64_t v14 = *a2;
      char v15 = a1[4];
      int v16 = *v15;
      *char v15 = 4;
      uint64_t v17 = *((void *)v15 + 1);
      *((void *)v15 + 1) = v14;
      uint64_t v18 = v17;
      sub_1B4C0D9B8(&v18, v16);
      return (uint64_t)a1[4];
    }
  }
}

char *sub_1B4C182C0(void **a1, unsigned __int8 *a2)
{
  uint64_t v4 = (uint64_t *)*a1;
  int v3 = (uint64_t *)a1[1];
  uint64_t v5 = ((char *)v3 - (unsigned char *)*a1) >> 4;
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 60) {
    sub_1B4C0E0BC();
  }
  uint64_t v7 = (unsigned char *)a1[2] - (unsigned char *)v4;
  if (v7 >> 3 > v6) {
    unint64_t v6 = v7 >> 3;
  }
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v6 = 0xFFFFFFFFFFFFFFFLL;
  }
  if (v6 >> 60) {
    sub_1B4BB2D38();
  }
  uint64_t v9 = 16 * v6;
  uint64_t v10 = (char *)operator new(16 * v6);
  int v11 = &v10[16 * v5];
  uint64_t v12 = &v10[v9];
  uint64_t v13 = *a2;
  *int v11 = 4;
  *((void *)v11 + 1) = v13;
  uint64_t v14 = v11 + 16;
  if (v3 == v4)
  {
    *a1 = v11;
    a1[1] = v14;
    a1[2] = v12;
    if (!v3) {
      return v14;
    }
    goto LABEL_13;
  }
  do
  {
    char v15 = *((unsigned char *)v3 - 16);
    v3 -= 2;
    *(v11 - 16) = v15;
    v11 -= 16;
    *((void *)v11 + 1) = v3[1];
    *(unsigned char *)int v3 = 0;
    v3[1] = 0;
  }
  while (v3 != v4);
  int v3 = (uint64_t *)*a1;
  int v16 = (uint64_t *)a1[1];
  *a1 = v11;
  a1[1] = v14;
  a1[2] = v12;
  if (v16 != v3)
  {
    uint64_t v17 = v16 - 1;
    do
    {
      uint64_t v18 = v17 - 1;
      sub_1B4C0D9B8(v17, *((unsigned __int8 *)v17 - 8));
      v17 -= 2;
    }
    while (v18 != v3);
  }
  if (v3) {
LABEL_13:
  }
    operator delete(v3);
  return v14;
}

uint64_t sub_1B4C183E8(unsigned __int8 **a1)
{
  uint64_t v2 = a1[2];
  if (a1[1] == v2)
  {
    uint64_t v7 = (uint64_t)*a1;
    int v8 = **a1;
    *(unsigned char *)uint64_t v7 = 0;
    char v15 = v8;
    uint64_t v9 = *(void *)(v7 + 8);
    *(void *)(v7 + 8) = 0;
    uint64_t v16 = v9;
    sub_1B4C0D9B8(&v16, v8);
    return (uint64_t)*a1;
  }
  else
  {
    uint64_t v3 = *((void *)v2 - 1);
    if (*(unsigned char *)v3 == 2)
    {
      uint64_t v4 = *(void *)(v3 + 8);
      unint64_t v5 = *(void *)(v4 + 8);
      if (v5 >= *(void *)(v4 + 16))
      {
        unint64_t v6 = sub_1B4C184E4((void **)v4);
      }
      else
      {
        *(unsigned char *)unint64_t v5 = 0;
        *(void *)(v5 + 8) = 0;
        unint64_t v6 = (char *)(v5 + 16);
      }
      *(void *)(v4 + 8) = v6;
      return *(void *)(*(void *)(*((void *)a1[2] - 1) + 8) + 8) - 16;
    }
    else
    {
      int v11 = a1[4];
      int v12 = *v11;
      *int v11 = 0;
      uint64_t v13 = *((void *)v11 + 1);
      *((void *)v11 + 1) = 0;
      uint64_t v14 = v13;
      sub_1B4C0D9B8(&v14, v12);
      return (uint64_t)a1[4];
    }
  }
}

char *sub_1B4C184E4(void **a1)
{
  uint64_t v3 = (uint64_t *)*a1;
  uint64_t v2 = (uint64_t *)a1[1];
  uint64_t v4 = ((char *)v2 - (unsigned char *)*a1) >> 4;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 60) {
    sub_1B4C0E0BC();
  }
  uint64_t v6 = (unsigned char *)a1[2] - (unsigned char *)v3;
  if (v6 >> 3 > v5) {
    unint64_t v5 = v6 >> 3;
  }
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v5 = 0xFFFFFFFFFFFFFFFLL;
  }
  if (v5 >> 60) {
    sub_1B4BB2D38();
  }
  uint64_t v7 = 16 * v5;
  int v8 = (char *)operator new(16 * v5);
  uint64_t v9 = &v8[16 * v4];
  uint64_t v10 = &v8[v7];
  *uint64_t v9 = 0;
  *((void *)v9 + 1) = 0;
  int v11 = v9 + 16;
  if (v2 == v3)
  {
    *a1 = v9;
    a1[1] = v11;
    a1[2] = v10;
    if (!v2) {
      return v11;
    }
    goto LABEL_13;
  }
  do
  {
    char v12 = *((unsigned char *)v2 - 16);
    v2 -= 2;
    *(v9 - 16) = v12;
    v9 -= 16;
    *((void *)v9 + 1) = v2[1];
    *(unsigned char *)uint64_t v2 = 0;
    v2[1] = 0;
  }
  while (v2 != v3);
  uint64_t v2 = (uint64_t *)*a1;
  uint64_t v13 = (uint64_t *)a1[1];
  *a1 = v9;
  a1[1] = v11;
  a1[2] = v10;
  if (v13 != v2)
  {
    uint64_t v14 = v13 - 1;
    do
    {
      char v15 = v14 - 1;
      sub_1B4C0D9B8(v14, *((unsigned __int8 *)v14 - 8));
      v14 -= 2;
    }
    while (v15 != v2);
  }
  if (v2) {
LABEL_13:
  }
    operator delete(v2);
  return v11;
}

uint64_t sub_1B4C18600(unsigned __int8 **a1, uint64_t *a2)
{
  uint64_t v3 = a1[2];
  if (a1[1] == v3)
  {
    uint64_t v9 = *a2;
    uint64_t v10 = (uint64_t)*a1;
    int v11 = **a1;
    *(unsigned char *)uint64_t v10 = 5;
    char v19 = v11;
    uint64_t v12 = *(void *)(v10 + 8);
    *(void *)(v10 + 8) = v9;
    uint64_t v20 = v12;
    sub_1B4C0D9B8(&v20, v11);
    return (uint64_t)*a1;
  }
  else
  {
    uint64_t v4 = *((void *)v3 - 1);
    if (*(unsigned char *)v4 == 2)
    {
      uint64_t v5 = *(void *)(v4 + 8);
      unint64_t v6 = *(void *)(v5 + 8);
      if (v6 >= *(void *)(v5 + 16))
      {
        int v8 = sub_1B4C18718((void **)v5, a2);
      }
      else
      {
        *(void *)(v6 + 8) = 0;
        uint64_t v7 = *a2;
        *(unsigned char *)unint64_t v6 = 5;
        *(void *)(v6 + 8) = v7;
        int v8 = (char *)(v6 + 16);
      }
      *(void *)(v5 + 8) = v8;
      return *(void *)(*(void *)(*((void *)a1[2] - 1) + 8) + 8) - 16;
    }
    else
    {
      uint64_t v14 = *a2;
      char v15 = a1[4];
      int v16 = *v15;
      *char v15 = 5;
      uint64_t v17 = *((void *)v15 + 1);
      *((void *)v15 + 1) = v14;
      uint64_t v18 = v17;
      sub_1B4C0D9B8(&v18, v16);
      return (uint64_t)a1[4];
    }
  }
}

char *sub_1B4C18718(void **a1, uint64_t *a2)
{
  uint64_t v4 = (uint64_t *)*a1;
  uint64_t v3 = (uint64_t *)a1[1];
  uint64_t v5 = ((char *)v3 - (unsigned char *)*a1) >> 4;
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 60) {
    sub_1B4C0E0BC();
  }
  uint64_t v7 = (unsigned char *)a1[2] - (unsigned char *)v4;
  if (v7 >> 3 > v6) {
    unint64_t v6 = v7 >> 3;
  }
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v6 = 0xFFFFFFFFFFFFFFFLL;
  }
  if (v6 >> 60) {
    sub_1B4BB2D38();
  }
  uint64_t v9 = 16 * v6;
  uint64_t v10 = (char *)operator new(16 * v6);
  int v11 = &v10[16 * v5];
  uint64_t v12 = &v10[v9];
  uint64_t v13 = *a2;
  *int v11 = 5;
  *((void *)v11 + 1) = v13;
  uint64_t v14 = v11 + 16;
  if (v3 == v4)
  {
    *a1 = v11;
    a1[1] = v14;
    a1[2] = v12;
    if (!v3) {
      return v14;
    }
    goto LABEL_13;
  }
  do
  {
    char v15 = *((unsigned char *)v3 - 16);
    v3 -= 2;
    *(v11 - 16) = v15;
    v11 -= 16;
    *((void *)v11 + 1) = v3[1];
    *(unsigned char *)uint64_t v3 = 0;
    v3[1] = 0;
  }
  while (v3 != v4);
  uint64_t v3 = (uint64_t *)*a1;
  int v16 = (uint64_t *)a1[1];
  *a1 = v11;
  a1[1] = v14;
  a1[2] = v12;
  if (v16 != v3)
  {
    uint64_t v17 = v16 - 1;
    do
    {
      uint64_t v18 = v17 - 1;
      sub_1B4C0D9B8(v17, *((unsigned __int8 *)v17 - 8));
      v17 -= 2;
    }
    while (v18 != v3);
  }
  if (v3) {
LABEL_13:
  }
    operator delete(v3);
  return v14;
}

uint64_t sub_1B4C18840(unsigned __int8 **a1, uint64_t a2)
{
  uint64_t v4 = a1[2];
  if (a1[1] == v4)
  {
    uint64_t v10 = operator new(0x18uLL);
    int v11 = v10;
    if (*(char *)(a2 + 23) < 0)
    {
      sub_1B4BCA11C(v10, *(void **)a2, *(void *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)uint64_t v10 = *(_OWORD *)a2;
      std::string v10[2] = *(void *)(a2 + 16);
    }
    uint64_t v15 = (uint64_t)*a1;
    int v16 = **a1;
    *(unsigned char *)uint64_t v15 = 3;
    char v23 = v16;
    uint64_t v17 = *(void *)(v15 + 8);
    *(void *)(v15 + 8) = v11;
    uint64_t v24 = v17;
    sub_1B4C0D9B8(&v24, v16);
    return (uint64_t)*a1;
  }
  else
  {
    uint64_t v5 = *((void *)v4 - 1);
    if (*(unsigned char *)v5 == 2)
    {
      uint64_t v6 = *(void *)(v5 + 8);
      unint64_t v7 = *(void *)(v6 + 8);
      if (v7 >= *(void *)(v6 + 16))
      {
        uint64_t v14 = sub_1B4C18A5C(v6, a2);
      }
      else
      {
        *(void *)(v7 + 8) = 0;
        *(unsigned char *)unint64_t v7 = 3;
        int v8 = operator new(0x18uLL);
        uint64_t v9 = v8;
        if (*(char *)(a2 + 23) < 0)
        {
          sub_1B4BCA11C(v8, *(void **)a2, *(void *)(a2 + 8));
        }
        else
        {
          *(_OWORD *)int v8 = *(_OWORD *)a2;
          std::string v8[2] = *(void *)(a2 + 16);
        }
        *(void *)(v7 + 8) = v9;
        uint64_t v14 = (char *)(v7 + 16);
        *(void *)(v6 + 8) = v7 + 16;
      }
      *(void *)(v6 + 8) = v14;
      return *(void *)(*(void *)(*((void *)a1[2] - 1) + 8) + 8) - 16;
    }
    else
    {
      uint64_t v12 = operator new(0x18uLL);
      uint64_t v13 = v12;
      if (*(char *)(a2 + 23) < 0)
      {
        sub_1B4BCA11C(v12, *(void **)a2, *(void *)(a2 + 8));
      }
      else
      {
        *(_OWORD *)uint64_t v12 = *(_OWORD *)a2;
        std::string v12[2] = *(void *)(a2 + 16);
      }
      char v19 = a1[4];
      int v20 = *v19;
      *char v19 = 3;
      uint64_t v21 = *((void *)v19 + 1);
      *((void *)v19 + 1) = v13;
      uint64_t v22 = v21;
      sub_1B4C0D9B8(&v22, v20);
      return (uint64_t)a1[4];
    }
  }
}

void sub_1B4C18A14(_Unwind_Exception *a1)
{
  operator delete(v2);
  *(void *)(v1 + 8) = v3;
  _Unwind_Resume(a1);
}

void sub_1B4C18A2C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B4C18A40(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B4C18A54(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_1B4C18A5C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(uint64_t **)a1;
  uint64_t v4 = *(uint64_t **)(a1 + 8);
  uint64_t v5 = ((uint64_t)v4 - *(void *)a1) >> 4;
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 60) {
    sub_1B4C0E0BC();
  }
  uint64_t v8 = *(void *)(a1 + 16) - (void)v3;
  if (v8 >> 3 > v6) {
    unint64_t v6 = v8 >> 3;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v9 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v6;
  }
  if (v9)
  {
    if (v9 >> 60) {
      sub_1B4BB2D38();
    }
    uint64_t v10 = (char *)operator new(16 * v9);
  }
  else
  {
    uint64_t v10 = 0;
  }
  int v11 = &v10[16 * v5];
  uint64_t v12 = &v10[16 * v9];
  *((void *)&v22 + 1) = v12;
  *((void *)v11 + 1) = 0;
  uint64_t v13 = v11 + 8;
  *int v11 = 3;
  uint64_t v14 = operator new(0x18uLL);
  uint64_t v15 = v14;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_1B4BCA11C(v14, *(void **)a2, *(void *)(a2 + 8));
    uint64_t v3 = *(uint64_t **)a1;
    uint64_t v4 = *(uint64_t **)(a1 + 8);
    void *v13 = v15;
    int v16 = v11 + 16;
    *(void *)&long long v22 = v11 + 16;
    if (v4 == v3) {
      goto LABEL_22;
    }
  }
  else
  {
    *(_OWORD *)uint64_t v14 = *(_OWORD *)a2;
    std::string v14[2] = *(void *)(a2 + 16);
    void *v13 = v14;
    int v16 = v11 + 16;
    *(void *)&long long v22 = v11 + 16;
    if (v4 == v3)
    {
LABEL_22:
      *(void *)a1 = v11;
      *(void *)(a1 + 8) = v16;
      *(void *)(a1 + 16) = v12;
      if (!v3) {
        return v16;
      }
      goto LABEL_20;
    }
  }
  do
  {
    char v17 = *((unsigned char *)v4 - 16);
    v4 -= 2;
    *(v11 - 16) = v17;
    v11 -= 16;
    *((void *)v11 + 1) = v4[1];
    *(unsigned char *)uint64_t v4 = 0;
    v4[1] = 0;
  }
  while (v4 != v3);
  uint64_t v3 = *(uint64_t **)a1;
  uint64_t v18 = *(uint64_t **)(a1 + 8);
  *(void *)a1 = v11;
  *(_OWORD *)(a1 + 8) = v22;
  int v16 = (char *)v22;
  if (v18 != v3)
  {
    char v19 = v18 - 1;
    do
    {
      int v20 = v19 - 1;
      sub_1B4C0D9B8(v19, *((unsigned __int8 *)v19 - 8));
      v19 -= 2;
    }
    while (v20 != v3);
  }
  if (v3) {
LABEL_20:
  }
    operator delete(v3);
  return v16;
}

void sub_1B4C18C08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  operator delete(v10);
  sub_1B4C0E0D4((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void sub_1B4C18C24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1B4C0E0D4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B4C18C38(unsigned __int8 **a1, uint64_t *a2)
{
  uint64_t v3 = a1[2];
  if (a1[1] == v3)
  {
    uint64_t v9 = *a2;
    uint64_t v10 = (uint64_t)*a1;
    int v11 = **a1;
    *(unsigned char *)uint64_t v10 = 6;
    char v19 = v11;
    uint64_t v12 = *(void *)(v10 + 8);
    *(void *)(v10 + 8) = v9;
    uint64_t v20 = v12;
    sub_1B4C0D9B8(&v20, v11);
    return (uint64_t)*a1;
  }
  else
  {
    uint64_t v4 = *((void *)v3 - 1);
    if (*(unsigned char *)v4 == 2)
    {
      uint64_t v5 = *(void *)(v4 + 8);
      unint64_t v6 = *(void *)(v5 + 8);
      if (v6 >= *(void *)(v5 + 16))
      {
        uint64_t v8 = sub_1B4C18D50((void **)v5, a2);
      }
      else
      {
        *(void *)(v6 + 8) = 0;
        uint64_t v7 = *a2;
        *(unsigned char *)unint64_t v6 = 6;
        *(void *)(v6 + 8) = v7;
        uint64_t v8 = (char *)(v6 + 16);
      }
      *(void *)(v5 + 8) = v8;
      return *(void *)(*(void *)(*((void *)a1[2] - 1) + 8) + 8) - 16;
    }
    else
    {
      uint64_t v14 = *a2;
      uint64_t v15 = a1[4];
      int v16 = *v15;
      *uint64_t v15 = 6;
      uint64_t v17 = *((void *)v15 + 1);
      *((void *)v15 + 1) = v14;
      uint64_t v18 = v17;
      sub_1B4C0D9B8(&v18, v16);
      return (uint64_t)a1[4];
    }
  }
}

char *sub_1B4C18D50(void **a1, uint64_t *a2)
{
  uint64_t v4 = (uint64_t *)*a1;
  uint64_t v3 = (uint64_t *)a1[1];
  uint64_t v5 = ((char *)v3 - (unsigned char *)*a1) >> 4;
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 60) {
    sub_1B4C0E0BC();
  }
  uint64_t v7 = (unsigned char *)a1[2] - (unsigned char *)v4;
  if (v7 >> 3 > v6) {
    unint64_t v6 = v7 >> 3;
  }
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v6 = 0xFFFFFFFFFFFFFFFLL;
  }
  if (v6 >> 60) {
    sub_1B4BB2D38();
  }
  uint64_t v9 = 16 * v6;
  uint64_t v10 = (char *)operator new(16 * v6);
  int v11 = &v10[16 * v5];
  uint64_t v12 = &v10[v9];
  uint64_t v13 = *a2;
  *int v11 = 6;
  *((void *)v11 + 1) = v13;
  uint64_t v14 = v11 + 16;
  if (v3 == v4)
  {
    *a1 = v11;
    a1[1] = v14;
    a1[2] = v12;
    if (!v3) {
      return v14;
    }
    goto LABEL_13;
  }
  do
  {
    char v15 = *((unsigned char *)v3 - 16);
    v3 -= 2;
    *(v11 - 16) = v15;
    v11 -= 16;
    *((void *)v11 + 1) = v3[1];
    *(unsigned char *)uint64_t v3 = 0;
    v3[1] = 0;
  }
  while (v3 != v4);
  uint64_t v3 = (uint64_t *)*a1;
  int v16 = (uint64_t *)a1[1];
  *a1 = v11;
  a1[1] = v14;
  a1[2] = v12;
  if (v16 != v3)
  {
    uint64_t v17 = v16 - 1;
    do
    {
      uint64_t v18 = v17 - 1;
      sub_1B4C0D9B8(v17, *((unsigned __int8 *)v17 - 8));
      v17 -= 2;
    }
    while (v18 != v3);
  }
  if (v3) {
LABEL_13:
  }
    operator delete(v3);
  return v14;
}

void sub_1B4C18E78(std::runtime_error *a1)
{
  std::runtime_error::~runtime_error(a1);
  if (*(char *)(v2 + 39) < 0) {
    operator delete(a1[1].__vftable);
  }
  JUMPOUT(0x1BA9929C0);
}

uint64_t **sub_1B4C18ED0(uint64_t **a1, const void **a2, uint64_t a3, _OWORD **a4)
{
  uint64_t v7 = a1 + 1;
  unint64_t v6 = a1[1];
  if (v6)
  {
    int v8 = *((char *)a2 + 23);
    if (v8 >= 0) {
      size_t v9 = *((unsigned __int8 *)a2 + 23);
    }
    else {
      size_t v9 = (size_t)a2[1];
    }
    if (v8 >= 0) {
      uint64_t v10 = a2;
    }
    else {
      uint64_t v10 = *a2;
    }
    while (1)
    {
      while (1)
      {
        int v11 = (uint64_t **)v6;
        uint64_t v14 = (const void *)v6[4];
        uint64_t v12 = v6 + 4;
        uint64_t v13 = v14;
        int v15 = *((char *)v12 + 23);
        if (v15 >= 0) {
          size_t v16 = *((unsigned __int8 *)v12 + 23);
        }
        else {
          size_t v16 = v12[1];
        }
        if (v15 >= 0) {
          uint64_t v17 = v12;
        }
        else {
          uint64_t v17 = v13;
        }
        if (v16 >= v9) {
          size_t v18 = v9;
        }
        else {
          size_t v18 = v16;
        }
        int v19 = memcmp(v10, v17, v18);
        BOOL v20 = v9 < v16;
        if (v19) {
          BOOL v20 = v19 < 0;
        }
        if (!v20) {
          break;
        }
        unint64_t v6 = *v11;
        uint64_t v7 = v11;
        if (!*v11) {
          goto LABEL_27;
        }
      }
      int v21 = memcmp(v17, v10, v18);
      BOOL v22 = v16 < v9;
      if (v21) {
        BOOL v22 = v21 < 0;
      }
      if (!v22) {
        break;
      }
      unint64_t v6 = v11[1];
      if (!v6)
      {
        uint64_t v7 = v11 + 1;
        goto LABEL_27;
      }
    }
  }
  else
  {
    int v11 = a1 + 1;
LABEL_27:
    char v23 = (uint64_t *)v11;
    int v11 = (uint64_t **)operator new(0x48uLL);
    uint64_t v24 = *a4;
    long long v25 = (uint64_t *)*((void *)*a4 + 2);
    *((_OWORD *)v11 + 2) = **a4;
    v11[6] = v25;
    *uint64_t v24 = 0;
    v24[1] = 0;
    _OWORD v24[2] = 0;
    *((unsigned char *)v11 + 56) = 0;
    v11[8] = 0;
    *int v11 = 0;
    v11[1] = 0;
    std::string v11[2] = v23;
    uint64_t *v7 = (uint64_t *)v11;
    uint64_t v26 = (uint64_t *)**a1;
    unint64_t v27 = (uint64_t *)v11;
    if (v26)
    {
      *a1 = v26;
      unint64_t v27 = *v7;
    }
    sub_1B4BB3DA4(a1[1], v27);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v11;
}

uint64_t sub_1B4C19050(uint64_t a1, unsigned __int8 *a2)
{
  int v3 = *a2;
  *(unsigned char *)a1 = v3;
  *(void *)(a1 + 8) = 0;
  switch(v3)
  {
    case 1:
      uint64_t v5 = (const void ***)*((void *)a2 + 1);
      uint64_t v4 = operator new(0x18uLL);
      v4[1] = 0;
      v4[2] = 0;
      void *v4 = v4 + 1;
      int v8 = *v5;
      unint64_t v6 = v5 + 1;
      uint64_t v7 = v8;
      if (v8 != (const void **)v6)
      {
        do
        {
          sub_1B4C19218((uint64_t **)v4, v4 + 1, v7 + 4, (uint64_t)(v7 + 4));
          size_t v9 = (const void **)v7[1];
          if (v9)
          {
            do
            {
              uint64_t v10 = (const void ***)v9;
              size_t v9 = (const void **)*v9;
            }
            while (v9);
          }
          else
          {
            do
            {
              uint64_t v10 = (const void ***)v7[2];
              BOOL v11 = *v10 == v7;
              uint64_t v7 = (const void **)v10;
            }
            while (!v11);
          }
          uint64_t v7 = (const void **)v10;
        }
        while (v10 != v6);
      }
      goto LABEL_17;
    case 2:
      uint64_t v12 = (uint64_t *)*((void *)a2 + 1);
      uint64_t v4 = operator new(0x18uLL);
      v4[1] = 0;
      v4[2] = 0;
      void *v4 = 0;
      sub_1B4C19740(v4, *v12, v12[1], (v12[1] - *v12) >> 4);
      goto LABEL_17;
    case 3:
      uint64_t v13 = (long long *)*((void *)a2 + 1);
      uint64_t v14 = operator new(0x18uLL);
      uint64_t v4 = v14;
      if (*((char *)v13 + 23) < 0)
      {
        sub_1B4BCA11C(v14, *(void **)v13, *((void *)v13 + 1));
      }
      else
      {
        long long v15 = *v13;
        *((void *)v14 + 2) = *((void *)v13 + 2);
        *uint64_t v14 = v15;
      }
      goto LABEL_17;
    case 4:
      uint64_t v4 = (void *)a2[8];
      goto LABEL_17;
    case 5:
    case 6:
    case 7:
      uint64_t v4 = (void *)*((void *)a2 + 1);
LABEL_17:
      *(void *)(a1 + 8) = v4;
      break;
    default:
      return a1;
  }
  return a1;
}

void sub_1B4C191B4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B4C191C8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B4C191DC(_Unwind_Exception *a1)
{
  sub_1B4C0E258((uint64_t)v1, v1[1]);
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_1B4C19218(uint64_t **a1, uint64_t *a2, const void **a3, uint64_t a4)
{
  unint64_t v6 = sub_1B4C19344(a1, a2, &v15, &v14, a3);
  uint64_t v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    int v8 = v6;
    size_t v9 = (uint64_t *)operator new(0x48uLL);
    uint64_t v7 = v9;
    if (*(char *)(a4 + 23) < 0)
    {
      sub_1B4BCA11C((unsigned char *)v9 + 32, *(void **)a4, *(void *)(a4 + 8));
    }
    else
    {
      *((_OWORD *)v9 + 2) = *(_OWORD *)a4;
      v9[6] = *(void *)(a4 + 16);
    }
    sub_1B4C19050(v7 + 7, a4 + 24);
    uint64_t v10 = v15;
    uint64_t *v7 = 0;
    v7[1] = 0;
    std::string v7[2] = (uint64_t)v10;
    uint64_t *v8 = (uint64_t)v7;
    BOOL v11 = (uint64_t *)**a1;
    uint64_t v12 = v7;
    if (v11)
    {
      *a1 = v11;
      uint64_t v12 = (uint64_t *)*v8;
    }
    sub_1B4BB3DA4(a1[1], v12);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

void sub_1B4C1930C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1B4C161F8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1B4C19320(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (*(char *)(v2 + 55) < 0) {
    operator delete(*v3);
  }
  sub_1B4C161F8((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_1B4C19344(uint64_t **a1, uint64_t *a2, uint64_t **a3, uint64_t **a4, const void **a5)
{
  int v8 = a1 + 1;
  if (a1 + 1 == (uint64_t **)a2) {
    goto LABEL_20;
  }
  int v10 = *((char *)a2 + 55);
  int v11 = *((char *)a5 + 23);
  if (v11 >= 0) {
    size_t v12 = *((unsigned __int8 *)a5 + 23);
  }
  else {
    size_t v12 = (size_t)a5[1];
  }
  if (v11 >= 0) {
    uint64_t v13 = a5;
  }
  else {
    uint64_t v13 = *a5;
  }
  if (v10 >= 0) {
    size_t v14 = *((unsigned __int8 *)a2 + 55);
  }
  else {
    size_t v14 = a2[5];
  }
  if (v10 >= 0) {
    long long v15 = a2 + 4;
  }
  else {
    long long v15 = (const void *)a2[4];
  }
  if (v14 >= v12) {
    size_t v16 = v12;
  }
  else {
    size_t v16 = v14;
  }
  int v17 = memcmp(v13, v15, v16);
  BOOL v18 = v12 < v14;
  if (v17) {
    BOOL v18 = v17 < 0;
  }
  if (v18)
  {
LABEL_20:
    int v19 = (uint64_t *)*a2;
    if (*a1 == a2)
    {
      int v21 = a2;
LABEL_53:
      if (v19)
      {
        *a3 = v21;
        return v21 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v19)
    {
      BOOL v20 = (uint64_t *)*a2;
      do
      {
        int v21 = v20;
        BOOL v20 = (uint64_t *)v20[1];
      }
      while (v20);
    }
    else
    {
      uint64_t v26 = a2;
      do
      {
        int v21 = (uint64_t *)v26[2];
        BOOL v27 = *v21 == (void)v26;
        uint64_t v26 = v21;
      }
      while (v27);
    }
    int v28 = *((char *)a5 + 23);
    int v29 = *((char *)v21 + 55);
    if (v29 >= 0) {
      size_t v30 = *((unsigned __int8 *)v21 + 55);
    }
    else {
      size_t v30 = v21[5];
    }
    if (v29 >= 0) {
      int v31 = v21 + 4;
    }
    else {
      int v31 = (const void *)v21[4];
    }
    if (v28 >= 0) {
      size_t v32 = *((unsigned __int8 *)a5 + 23);
    }
    else {
      size_t v32 = (size_t)a5[1];
    }
    if (v28 >= 0) {
      std::string v33 = a5;
    }
    else {
      std::string v33 = *a5;
    }
    if (v32 >= v30) {
      size_t v34 = v30;
    }
    else {
      size_t v34 = v32;
    }
    int v35 = memcmp(v31, v33, v34);
    BOOL v36 = v30 < v32;
    if (v35) {
      BOOL v36 = v35 < 0;
    }
    if (v36) {
      goto LABEL_53;
    }
    long long v37 = *v8;
    if (*v8)
    {
      do
      {
        while (1)
        {
          uint64_t v38 = (uint64_t **)v37;
          unint64_t v41 = (const void *)v37[4];
          char v39 = v37 + 4;
          unint64_t v40 = v41;
          int v42 = *((char *)v39 + 23);
          if (v42 >= 0) {
            size_t v43 = *((unsigned __int8 *)v39 + 23);
          }
          else {
            size_t v43 = v39[1];
          }
          if (v42 >= 0) {
            std::string::size_type v44 = v39;
          }
          else {
            std::string::size_type v44 = v40;
          }
          if (v43 >= v32) {
            size_t v45 = v32;
          }
          else {
            size_t v45 = v43;
          }
          int v46 = memcmp(v33, v44, v45);
          BOOL v47 = v32 < v43;
          if (v46) {
            BOOL v47 = v46 < 0;
          }
          if (!v47) {
            break;
          }
          long long v37 = *v38;
          int v8 = v38;
          if (!*v38) {
            goto LABEL_74;
          }
        }
        int v48 = memcmp(v44, v33, v45);
        BOOL v49 = v43 < v32;
        if (v48) {
          BOOL v49 = v48 < 0;
        }
        if (!v49) {
          break;
        }
        int v8 = v38 + 1;
        long long v37 = v38[1];
      }
      while (v37);
    }
    else
    {
      uint64_t v38 = v8;
    }
LABEL_74:
    *a3 = (uint64_t *)v38;
    return (uint64_t *)v8;
  }
  int v22 = memcmp(v15, v13, v16);
  BOOL v23 = v14 < v12;
  if (v22) {
    BOOL v23 = v22 < 0;
  }
  if (!v23)
  {
    *a3 = a2;
    *a4 = a2;
    return (uint64_t *)a4;
  }
  uint64_t v24 = a2[1];
  if (v24)
  {
    long long v25 = (uint64_t *)a2[1];
    do
    {
      a4 = (uint64_t **)v25;
      long long v25 = (uint64_t *)*v25;
    }
    while (v25);
  }
  else
  {
    uint64_t v50 = a2;
    do
    {
      a4 = (uint64_t **)v50[2];
      BOOL v27 = *a4 == v50;
      uint64_t v50 = (uint64_t *)a4;
    }
    while (!v27);
  }
  if (a4 != v8)
  {
    int v51 = *((char *)a4 + 55);
    if (v51 >= 0) {
      size_t v52 = *((unsigned __int8 *)a4 + 55);
    }
    else {
      size_t v52 = (size_t)a4[5];
    }
    if (v51 >= 0) {
      long long v53 = (uint64_t *)(a4 + 4);
    }
    else {
      long long v53 = a4[4];
    }
    if (v52 >= v12) {
      size_t v54 = v12;
    }
    else {
      size_t v54 = v52;
    }
    int v55 = memcmp(v13, v53, v54);
    BOOL v56 = v12 < v52;
    if (v55) {
      BOOL v56 = v55 < 0;
    }
    if (!v56)
    {
      unint64_t v57 = *v8;
      if (*v8)
      {
        std::string v58 = a3;
        do
        {
          while (1)
          {
            std::string v59 = (uint64_t **)v57;
            unint64_t v62 = (const void *)v57[4];
            uint64_t v60 = v57 + 4;
            int64_t v61 = v62;
            int v63 = *((char *)v60 + 23);
            if (v63 >= 0) {
              size_t v64 = *((unsigned __int8 *)v60 + 23);
            }
            else {
              size_t v64 = v60[1];
            }
            if (v63 >= 0) {
              unint64_t v65 = v60;
            }
            else {
              unint64_t v65 = v61;
            }
            if (v64 >= v12) {
              size_t v66 = v12;
            }
            else {
              size_t v66 = v64;
            }
            int v67 = memcmp(v13, v65, v66);
            BOOL v68 = v12 < v64;
            if (v67) {
              BOOL v68 = v67 < 0;
            }
            if (!v68) {
              break;
            }
            unint64_t v57 = *v59;
            int v8 = v59;
            if (!*v59) {
              goto LABEL_119;
            }
          }
          int v69 = memcmp(v65, v13, v66);
          BOOL v70 = v64 < v12;
          if (v69) {
            BOOL v70 = v69 < 0;
          }
          if (!v70) {
            break;
          }
          int v8 = v59 + 1;
          unint64_t v57 = v59[1];
        }
        while (v57);
      }
      else
      {
        std::string v59 = v8;
        std::string v58 = a3;
      }
LABEL_119:
      void *v58 = (uint64_t *)v59;
      return (uint64_t *)v8;
    }
  }
  if (v24)
  {
    *a3 = (uint64_t *)a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return (uint64_t *)a4;
}

void *sub_1B4C19740(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v5 = result;
    if (a4 >> 60) {
      sub_1B4C0E0BC();
    }
    uint64_t result = operator new(16 * a4);
    void *v5 = result;
    v5[1] = result;
    std::string v5[2] = &result[2 * a4];
    for (uint64_t i = result; a2 != a3; i += 2)
    {
      sub_1B4C19050(result, a2);
      a2 += 16;
      uint64_t result = i + 2;
    }
    v5[1] = result;
  }
  return result;
}

void sub_1B4C19810(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_1B4C19824(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  sub_1B4C198E4((uint64_t)&a11);
  *(void *)(v11 + 8) = v12;
  sub_1B4C19844(&a9);
  _Unwind_Resume(a1);
}

void ***sub_1B4C19844(void ***result)
{
  uint64_t v1 = result;
  if (!*((unsigned char *)result + 8))
  {
    uint64_t v2 = *result;
    int v3 = (uint64_t *)**result;
    if (v3)
    {
      uint64_t v4 = (uint64_t *)v2[1];
      uint64_t v5 = **result;
      if (v4 != v3)
      {
        unint64_t v6 = v4 - 1;
        do
        {
          uint64_t v7 = v6 - 1;
          sub_1B4C0D9B8(v6, *((unsigned __int8 *)v6 - 8));
          v6 -= 2;
        }
        while (v7 != v3);
        uint64_t v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

uint64_t sub_1B4C198E4(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v2 = **(uint64_t ***)(a1 + 16);
    int v3 = **(uint64_t ***)(a1 + 8);
    if (v2 != v3)
    {
      uint64_t v4 = v2 - 1;
      do
      {
        uint64_t v5 = v4 - 1;
        sub_1B4C0D9B8(v4, *((unsigned __int8 *)v4 - 8));
        v4 -= 2;
      }
      while (v5 != v3);
    }
  }
  return a1;
}

std::string *sub_1B4C1994C(char *a1, std::string *this)
{
  if (*a1 != 3)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    unint64_t v7 = *a1;
    if (v7 > 8) {
      int v8 = "number";
    }
    else {
      int v8 = off_1E60A3890[v7];
    }
    sub_1B4BB8DC0(&v11, v8);
    size_t v9 = std::string::insert(&v11, 0, "type must be string, but is ");
    long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    std::string::size_type v13 = v9->__r_.__value_.__r.__words[2];
    long long v12 = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    sub_1B4C15DFC(302, (uint64_t)&v12, (uint64_t)exception);
    __cxa_throw(exception, (struct type_info *)&unk_1F0D53920, (void (*)(void *))sub_1B4C15F98);
  }
  uint64_t v4 = (const std::string *)*((void *)a1 + 1);
  return std::string::operator=(this, v4);
}

void sub_1B4C19A44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

double sub_1B4C19AA4(char *a1, _DWORD *a2)
{
  switch(*a1)
  {
    case 4:
      *a2 = a1[8];
      break;
    case 5:
    case 6:
      *a2 = *((_DWORD *)a1 + 2);
      break;
    case 7:
      double result = *((double *)a1 + 1);
      *a2 = (int)result;
      break;
    default:
      exception = __cxa_allocate_exception(0x20uLL);
      unint64_t v5 = *a1;
      if (v5 > 8) {
        unint64_t v6 = "number";
      }
      else {
        unint64_t v6 = off_1E60A3890[v5];
      }
      sub_1B4BB8DC0(&v9, v6);
      unint64_t v7 = std::string::insert(&v9, 0, "type must be number, but is ");
      long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
      std::string::size_type v11 = v7->__r_.__value_.__r.__words[2];
      long long v10 = v8;
      v7->__r_.__value_.__l.__size_ = 0;
      v7->__r_.__value_.__r.__words[2] = 0;
      v7->__r_.__value_.__r.__words[0] = 0;
      sub_1B4C15DFC(302, (uint64_t)&v10, (uint64_t)exception);
      __cxa_throw(exception, (struct type_info *)&unk_1F0D53920, (void (*)(void *))sub_1B4C15F98);
  }
  return result;
}

void sub_1B4C19BE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if (v22)
    {
LABEL_8:
      __cxa_free_exception(v21);
      _Unwind_Resume(a1);
    }
  }
  else if (v22)
  {
    goto LABEL_8;
  }
  _Unwind_Resume(a1);
}

double sub_1B4C19C68(unsigned __int8 *a1, void **a2)
{
  if (*a1 != 2)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    unint64_t v5 = (char)*a1;
    if (v5 > 8) {
      unint64_t v6 = "number";
    }
    else {
      unint64_t v6 = off_1E60A3890[v5];
    }
    sub_1B4BB8DC0(&v9, v6);
    unint64_t v7 = std::string::insert(&v9, 0, "type must be array, but is ");
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    std::string::size_type v11 = v7->__r_.__value_.__r.__words[2];
    long long v10 = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    sub_1B4C15DFC(302, (uint64_t)&v10, (uint64_t)exception);
    __cxa_throw(exception, (struct type_info *)&unk_1F0D53920, (void (*)(void *))sub_1B4C15F98);
  }
  return sub_1B4C19DB8(a1, a2);
}

void sub_1B4C19D58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

double sub_1B4C19DB8(unsigned __int8 *a1, void **a2)
{
  long long v19 = 0uLL;
  BOOL v20 = 0;
  unint64_t v4 = *a1;
  if (*a1)
  {
    if (v4 == 1)
    {
      unint64_t v4 = *(void *)(*((void *)a1 + 1) + 16);
    }
    else if (v4 == 2)
    {
      unint64_t v4 = (uint64_t)(*(void *)(*((void *)a1 + 1) + 8) - **((void **)a1 + 1)) >> 4;
    }
    else
    {
      unint64_t v4 = 1;
    }
  }
  sub_1B4BBF2D0((uint64_t *)&v19, v4);
  long long v15 = a1;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  unint64_t v18 = 0x8000000000000000;
  int v5 = *a1;
  if (*a1)
  {
    if (v5 == 2)
    {
      unint64_t v7 = (uint64_t *)*((void *)a1 + 1);
      uint64_t v17 = *v7;
      long long v12 = a1;
      std::string::size_type v13 = 0;
      *((void *)&v14 + 1) = 0x8000000000000000;
      *(void *)&long long v14 = v7[1];
      goto LABEL_15;
    }
    if (v5 == 1)
    {
      unint64_t v6 = (uint64_t *)*((void *)a1 + 1);
      uint64_t v16 = *v6;
      long long v14 = xmmword_1B4C9A430;
      long long v12 = a1;
      std::string::size_type v13 = v6 + 1;
      goto LABEL_15;
    }
    unint64_t v18 = 0;
  }
  else
  {
    unint64_t v18 = 1;
  }
  long long v12 = a1;
  std::string::size_type v13 = 0;
  *(void *)&long long v14 = 0;
  *((void *)&v14 + 1) = 1;
LABEL_15:
  sub_1B4C19F44(&v15, &v12, (void ***)&v19, *((uint64_t *)&v19 + 1));
  long long v8 = (void **)*a2;
  if (*a2)
  {
    std::string v9 = (void **)a2[1];
    long long v10 = *a2;
    if (v9 != v8)
    {
      do
      {
        if (*((char *)v9 - 1) < 0) {
          operator delete(*(v9 - 3));
        }
        v9 -= 3;
      }
      while (v9 != v8);
      long long v10 = *a2;
    }
    a2[1] = v8;
    operator delete(v10);
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  double result = *(double *)&v19;
  *(_OWORD *)a2 = v19;
  a2[2] = v20;
  return result;
}

void sub_1B4C19F30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_1B4BF9508((void **)va);
  _Unwind_Resume(a1);
}

void ***sub_1B4C19F44(unsigned __int8 **a1, unsigned __int8 **a2, void ***a3, uint64_t a4)
{
  unint64_t v6 = a2;
  unint64_t v7 = a1;
  while (!sub_1B4C1A1F4(a1, a2))
  {
    long long v8 = sub_1B4C1A078((uint64_t)v7);
    memset(&__p, 0, sizeof(__p));
    sub_1B4C1994C(v8, &__p);
    uint64_t v9 = sub_1B4C1A300(a3, a4, (__n128 *)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      int v10 = **v7;
      if (v10 == 2)
      {
LABEL_15:
        v7[2] += 16;
        goto LABEL_3;
      }
    }
    else
    {
      int v10 = **v7;
      if (v10 == 2) {
        goto LABEL_15;
      }
    }
    if (v10 == 1)
    {
      std::string::size_type v11 = v7[1];
      long long v12 = (unsigned __int8 *)*((void *)v11 + 1);
      if (v12)
      {
        do
        {
          std::string::size_type v13 = v12;
          long long v12 = *(unsigned __int8 **)v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          std::string::size_type v13 = (unsigned __int8 *)*((void *)v11 + 2);
          BOOL v14 = *(void *)v13 == (void)v11;
          std::string::size_type v11 = v13;
        }
        while (!v14);
      }
      v7[1] = v13;
    }
    else
    {
      ++v7[3];
    }
LABEL_3:
    a4 = v9 + 24;
    a1 = v7;
    a2 = v6;
  }
  return a3;
}

void sub_1B4C1A058(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unsigned char *sub_1B4C1A078(uint64_t a1)
{
  double result = *(unsigned char **)a1;
  int v3 = *result;
  if (v3 == 1) {
    return (unsigned char *)(*(void *)(a1 + 8) + 56);
  }
  if (v3 == 2) {
    return *(unsigned char **)(a1 + 16);
  }
  if (!*result)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    sub_1B4BB8DC0(v6, "cannot get value");
    sub_1B4C15BAC(214, (uint64_t)v6, (uint64_t)exception);
    __cxa_throw(exception, (struct type_info *)&unk_1F0D53980, (void (*)(void *))sub_1B4C15D40);
  }
  if (*(void *)(a1 + 24))
  {
    unint64_t v4 = __cxa_allocate_exception(0x20uLL);
    sub_1B4BB8DC0(v6, "cannot get value");
    sub_1B4C15BAC(214, (uint64_t)v6, (uint64_t)v4);
    __cxa_throw(v4, (struct type_info *)&unk_1F0D53980, (void (*)(void *))sub_1B4C15D40);
  }
  return result;
}

void sub_1B4C1A1B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (v16) {
    __cxa_free_exception(v15);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1B4C1A1F4(unsigned __int8 **a1, unsigned __int8 **a2)
{
  if (*a1 != *a2)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    sub_1B4BB8DC0(v7, "cannot compare iterators of different containers");
    sub_1B4C15BAC(212, (uint64_t)v7, (uint64_t)exception);
    __cxa_throw(exception, (struct type_info *)&unk_1F0D53980, (void (*)(void *))sub_1B4C15D40);
  }
  int v2 = **a1;
  if (v2 == 2)
  {
    int v3 = a1[2];
    unint64_t v4 = a2[2];
  }
  else if (v2 == 1)
  {
    int v3 = a1[1];
    unint64_t v4 = a2[1];
  }
  else
  {
    int v3 = a1[3];
    unint64_t v4 = a2[3];
  }
  return v3 == v4;
}

void sub_1B4C1A2C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if (v16)
    {
LABEL_6:
      __cxa_free_exception(v15);
      _Unwind_Resume(a1);
    }
  }
  else if (v16)
  {
    goto LABEL_6;
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1B4C1A300(void ***a1, uint64_t a2, __n128 *a3)
{
  unint64_t v6 = *a1;
  unint64_t v5 = (unint64_t)a1[1];
  uint64_t v7 = (a2 - (uint64_t)*a1) / 24;
  uint64_t v8 = (uint64_t)&(*a1)[3 * v7];
  unint64_t v9 = (unint64_t)a1[2];
  if (v5 >= v9)
  {
    unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - (void)v6) >> 3) + 1;
    if (v15 > 0xAAAAAAAAAAAAAAALL) {
      sub_1B4BB3244();
    }
    unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - (void)v6) >> 3);
    if (2 * v16 > v15) {
      unint64_t v15 = 2 * v16;
    }
    if (v16 >= 0x555555555555555) {
      unint64_t v17 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v17 = v15;
    }
    unint64_t v41 = a1 + 2;
    if (v17)
    {
      if (v17 > 0xAAAAAAAAAAAAAAALL) {
        sub_1B4BB2D38();
      }
      unint64_t v18 = (void **)operator new(24 * v17);
    }
    else
    {
      unint64_t v18 = 0;
    }
    long long v37 = v18;
    uint64_t v38 = &v18[3 * v7];
    char v39 = v38;
    unint64_t v40 = (char *)&v18[3 * v17];
    sub_1B4C1A62C((uint64_t)&v37, a3);
    BOOL v20 = v38;
    int v21 = *a1;
    int v22 = v38;
    if (*a1 != (void **)v8)
    {
      BOOL v23 = v38;
      uint64_t v24 = v8;
      do
      {
        int v22 = v23 - 3;
        long long v25 = *(_OWORD *)(v24 - 24);
        *(v23 - 1) = *(void **)(v24 - 8);
        *(_OWORD *)(v23 - 3) = v25;
        *(void *)(v24 - 16) = 0;
        *(void *)(v24 - 8) = 0;
        *(void *)(v24 - 24) = 0;
        v23 -= 3;
        v24 -= 24;
      }
      while ((void **)v24 != v21);
    }
    uint64_t v38 = v22;
    uint64_t v26 = a1[1];
    BOOL v27 = v39;
    if (v26 != (void **)v8)
    {
      do
      {
        long long v28 = *(_OWORD *)v8;
        std::string v27[2] = *(void **)(v8 + 16);
        *(_OWORD *)BOOL v27 = v28;
        v27 += 3;
        *(void *)(v8 + 8) = 0;
        *(void *)(v8 + 16) = 0;
        *(void *)uint64_t v8 = 0;
        v8 += 24;
      }
      while ((void **)v8 != v26);
      int v22 = v38;
      uint64_t v8 = (uint64_t)a1[1];
    }
    int v29 = *a1;
    *a1 = v22;
    a1[1] = v27;
    size_t v30 = (char *)a1[2];
    a1[2] = (void **)v40;
    char v39 = (void **)v8;
    unint64_t v40 = v30;
    long long v37 = v29;
    uint64_t v38 = v29;
    if ((void **)v8 == v29)
    {
      if (!v8) {
        return (uint64_t)v20;
      }
    }
    else
    {
      do
      {
        int v31 = (void **)(v8 - 24);
        char v39 = (void **)(v8 - 24);
        if (*(char *)(v8 - 1) < 0)
        {
          operator delete(*v31);
          int v31 = v39;
        }
        uint64_t v8 = (uint64_t)v31;
      }
      while (v31 != v29);
      uint64_t v8 = (uint64_t)v37;
      if (!v37) {
        return (uint64_t)v20;
      }
    }
    operator delete((void *)v8);
    return (uint64_t)v20;
  }
  if (v8 == v5)
  {
    __n128 v19 = *a3;
    *(void *)(v8 + 16) = a3[1].n128_u64[0];
    *(__n128 *)uint64_t v8 = v19;
    a3->n128_u64[1] = 0;
    a3[1].n128_u64[0] = 0;
    a3->n128_u64[0] = 0;
    a1[1] = (void **)(v8 + 24);
    return v8;
  }
  uint64_t v10 = v8 + 24;
  unint64_t v11 = v5 - 24;
  if (v5 >= 0x18)
  {
    unint64_t v12 = v5 - 24;
    std::string::size_type v13 = a1[1];
    do
    {
      long long v14 = *(_OWORD *)v12;
      std::string v13[2] = *(void **)(v12 + 16);
      *(_OWORD *)std::string::size_type v13 = v14;
      v13 += 3;
      *(void *)(v12 + 8) = 0;
      *(void *)(v12 + 16) = 0;
      *(void *)unint64_t v12 = 0;
      v12 += 24;
    }
    while (v12 < v5);
    a1[1] = v13;
    if (v5 == v10) {
      goto LABEL_39;
    }
LABEL_35:
    uint64_t v32 = 8 * ((uint64_t)(v5 - v10) >> 3);
    do
    {
      if (*(char *)(v11 + 23) < 0) {
        operator delete(*(void **)v11);
      }
      std::string v33 = (long long *)(v8 + v32 - 24);
      long long v34 = *v33;
      *(void *)(v11 + 16) = *(void *)(v8 + v32 - 8);
      *(_OWORD *)unint64_t v11 = v34;
      v11 -= 24;
      *(unsigned char *)(v8 + v32 - 1) = 0;
      *(unsigned char *)std::string v33 = 0;
      v32 -= 24;
    }
    while (v32);
    goto LABEL_39;
  }
  a1[1] = (void **)v5;
  if (v5 != v10) {
    goto LABEL_35;
  }
LABEL_39:
  if (*(char *)(v8 + 23) < 0) {
    operator delete(*(void **)v8);
  }
  __n128 v35 = *a3;
  *(void *)(v8 + 16) = a3[1].n128_u64[0];
  *(__n128 *)uint64_t v8 = v35;
  a3[1].n128_u8[7] = 0;
  a3->n128_u8[0] = 0;
  return v8;
}

void sub_1B4C1A618(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1B4BFA018((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_1B4C1A62C(uint64_t a1, __n128 *a2)
{
  unint64_t v4 = *(__n128 **)(a1 + 16);
  if (v4 == *(__n128 **)(a1 + 24))
  {
    unint64_t v5 = *(__n128 **)a1;
    unint64_t v6 = *(__n128 **)(a1 + 8);
    if ((unint64_t)v6 <= *(void *)a1)
    {
      unint64_t v14 = 0x5555555555555556 * (((char *)v4 - (char *)v5) >> 3);
      if (v4 == v5) {
        unint64_t v14 = 1;
      }
      if (v14 >= 0xAAAAAAAAAAAAAABLL) {
        sub_1B4BB2D38();
      }
      unint64_t v15 = v14 >> 2;
      uint64_t v16 = 24 * v14;
      unint64_t v17 = (char *)operator new(24 * v14);
      unint64_t v18 = &v17[24 * v15];
      __n128 v19 = &v17[v16];
      if (v4 == v6)
      {
        *(void *)a1 = v17;
        *(void *)(a1 + 8) = v18;
        *(void *)(a1 + 16) = v18;
        *(void *)(a1 + 24) = v19;
      }
      else
      {
        uint64_t v20 = ((char *)v4 - (char *)v6) / 24;
        int v21 = &v18[24 * v20];
        uint64_t v22 = 24 * v20;
        uint64_t v23 = 24 * v15;
        do
        {
          uint64_t v24 = &v17[v23];
          __n128 v25 = *v6;
          *((void *)v24 + 2) = v6[1].n128_u64[0];
          *(__n128 *)uint64_t v24 = v25;
          v6->n128_u64[1] = 0;
          v6[1].n128_u64[0] = 0;
          v6->n128_u64[0] = 0;
          unint64_t v6 = (__n128 *)((char *)v6 + 24);
          v23 += 24;
          v22 -= 24;
        }
        while (v22);
        unint64_t v5 = *(__n128 **)a1;
        uint64_t v26 = *(void *)(a1 + 8);
        uint64_t v27 = *(void *)(a1 + 16);
        *(void *)a1 = v17;
        *(void *)(a1 + 8) = v18;
        *(void *)(a1 + 16) = v21;
        *(void *)(a1 + 24) = v19;
        while (v27 != v26)
        {
          if (*(char *)(v27 - 1) < 0) {
            operator delete(*(void **)(v27 - 24));
          }
          v27 -= 24;
        }
      }
      if (v5) {
        operator delete(v5);
      }
      unint64_t v4 = *(__n128 **)(a1 + 16);
    }
    else
    {
      int64_t v7 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v6 - *(void *)a1) >> 3);
      if (v7 >= -1) {
        uint64_t v8 = v7 + 1;
      }
      else {
        uint64_t v8 = v7 + 2;
      }
      uint64_t v9 = v8 >> 1;
      uint64_t v10 = -v9;
      if (v6 == v4)
      {
        long long v28 = (__n128 *)((char *)v6 - 24 * v9);
      }
      else
      {
        uint64_t v11 = -24 * v9;
        do
        {
          std::string::size_type v13 = (char *)v6 + v11;
          if (v6[1].n128_i8[v11 + 7] < 0) {
            operator delete(*(void **)v13);
          }
          __n128 v12 = *v6;
          *((void *)v13 + 2) = v6[1].n128_u64[0];
          *(__n128 *)std::string::size_type v13 = v12;
          v6[1].n128_u8[7] = 0;
          v6->n128_u8[0] = 0;
          unint64_t v6 = (__n128 *)((char *)v6 + 24);
        }
        while (v6 != v4);
        unint64_t v4 = *(__n128 **)(a1 + 8);
        long long v28 = (__n128 *)((char *)v6 + 24 * v10);
      }
      *(void *)(a1 + 8) = (char *)v4 + 24 * v10;
      *(void *)(a1 + 16) = v28;
      unint64_t v4 = v28;
    }
  }
  __n128 result = *a2;
  v4[1].n128_u64[0] = a2[1].n128_u64[0];
  __n128 *v4 = result;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  a2->n128_u64[0] = 0;
  *(void *)(a1 + 16) += 24;
  return result;
}

char *sub_1B4C1A83C(char **a1, uint64_t a2)
{
  int v3 = *a1;
  unint64_t v4 = a1[1];
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_1B4BB3244();
  }
  if (0x5555555555555556 * ((a1[2] - v3) >> 3) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - v3) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3) >= 0x555555555555555) {
    unint64_t v8 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v8 = v6;
  }
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL) {
      sub_1B4BB2D38();
    }
    uint64_t v9 = (char *)operator new(24 * v8);
  }
  else
  {
    uint64_t v9 = 0;
  }
  uint64_t v10 = &v9[24 * v5];
  uint64_t v16 = v10;
  unint64_t v17 = v10;
  unint64_t v18 = &v9[24 * v8];
  if (*(char *)(a2 + 23) < 0)
  {
    sub_1B4BCA11C(v10, *(void **)a2, *(void *)(a2 + 8));
    int v3 = *a1;
    unint64_t v4 = a1[1];
    uint64_t v10 = v16;
    uint64_t v11 = v17 + 24;
    if (v4 == *a1)
    {
LABEL_17:
      std::string::size_type v13 = v3;
      goto LABEL_18;
    }
  }
  else
  {
    *(_OWORD *)uint64_t v10 = *(_OWORD *)a2;
    *((void *)v10 + 2) = *(void *)(a2 + 16);
    uint64_t v11 = v10 + 24;
    if (v4 == v3) {
      goto LABEL_17;
    }
  }
  do
  {
    long long v12 = *(_OWORD *)(v4 - 24);
    *((void *)v10 - 1) = *((void *)v4 - 1);
    *(_OWORD *)(v10 - 24) = v12;
    v10 -= 24;
    *((void *)v4 - 2) = 0;
    *((void *)v4 - 1) = 0;
    *((void *)v4 - 3) = 0;
    v4 -= 24;
  }
  while (v4 != v3);
  std::string::size_type v13 = *a1;
  int v3 = a1[1];
LABEL_18:
  *a1 = v10;
  a1[1] = v11;
  a1[2] = v18;
  if (v3 != v13)
  {
    unint64_t v14 = (void **)(v3 - 24);
    do
    {
      if (*((char *)v14 + 23) < 0) {
        operator delete(*v14);
      }
      v14 -= 3;
    }
    while (v14 + 3 != (void **)v13);
    int v3 = v13;
  }
  if (v3) {
    operator delete(v3);
  }
  return v11;
}

void sub_1B4C1AA00(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1B4BFA018((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_1B4C1AA14(uint64_t *a1, float a2)
{
  uint64_t v4 = *a1;
  unint64_t v6 = *(float **)(*a1 + 8);
  unint64_t v5 = *(void *)(*a1 + 16);
  int64_t v7 = v6;
  if ((unint64_t)v6 < v5)
  {
    float *v6 = a2;
    uint64_t v8 = (uint64_t)(v6 + 1);
    goto LABEL_22;
  }
  uint64_t v9 = *(float **)v4;
  uint64_t v10 = (uint64_t)v6 - *(void *)v4;
  uint64_t v11 = v10 >> 2;
  unint64_t v12 = (v10 >> 2) + 1;
  if (v12 >> 62) {
    sub_1B4BB3244();
  }
  uint64_t v13 = v5 - (void)v9;
  if (v13 >> 1 > v12) {
    unint64_t v12 = v13 >> 1;
  }
  if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v14 = v12;
  }
  if (v14)
  {
    if (v14 >> 62) {
      sub_1B4BB2D38();
    }
    unint64_t v15 = operator new(4 * v14);
    uint64_t v16 = (float *)&v15[4 * v11];
    unint64_t v17 = &v15[4 * v14];
    *uint64_t v16 = a2;
    uint64_t v8 = (uint64_t)(v16 + 1);
    int64_t v18 = (char *)v6 - (char *)v9;
    if (v6 == v9) {
      goto LABEL_20;
    }
    goto LABEL_14;
  }
  unint64_t v15 = 0;
  uint64_t v16 = (float *)(4 * v11);
  unint64_t v17 = 0;
  *(float *)(4 * v11) = a2;
  uint64_t v8 = 4 * v11 + 4;
  int64_t v18 = (char *)v6 - (char *)v9;
  if (v6 != v9)
  {
LABEL_14:
    unint64_t v19 = v18 - 4;
    if (v19 < 0x2C) {
      goto LABEL_27;
    }
    if ((unint64_t)((char *)v6 - v15 - v10) < 0x20) {
      goto LABEL_27;
    }
    uint64_t v20 = (v19 >> 2) + 1;
    uint64_t v21 = 4 * (v20 & 0x7FFFFFFFFFFFFFF8);
    int64_t v7 = &v6[v21 / 0xFFFFFFFFFFFFFFFCLL];
    uint64_t v16 = (float *)((char *)v16 - v21);
    uint64_t v22 = &v15[4 * v11 - 16];
    uint64_t v23 = v6 - 4;
    uint64_t v24 = v20 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v25 = *(_OWORD *)v23;
      *(v22 - 1) = *((_OWORD *)v23 - 1);
      *uint64_t v22 = v25;
      v22 -= 2;
      v23 -= 8;
      v24 -= 8;
    }
    while (v24);
    if (v20 != (v20 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_27:
      do
      {
        int v26 = *((_DWORD *)v7-- - 1);
        *((_DWORD *)v16-- - 1) = v26;
      }
      while (v7 != v9);
    }
  }
LABEL_20:
  *(void *)uint64_t v4 = v16;
  *(void *)(v4 + 8) = v8;
  *(void *)(v4 + 16) = v17;
  if (v9) {
    operator delete(v9);
  }
LABEL_22:
  *(void *)(v4 + 8) = v8;
  return a1;
}

void sub_1B4C1AB98(std::exception *a1)
{
  std::exception::~exception(a1);
  if (*(char *)(v2 + 31) < 0) {
    operator delete(a1[1].__vftable);
  }
  JUMPOUT(0x1BA9929C0);
}

uint64_t sub_1B4C1ABF0(uint64_t a1)
{
  uint64_t result = a1 + 8;
  if (*(char *)(a1 + 31) < 0) {
    return *(void *)result;
  }
  return result;
}

uint64_t sub_1B4C1AC0C(uint64_t a1, uint64_t a2)
{
  sub_1B4BB2204((uint64_t)v10);
  sub_1B4BB34F0(v10, (uint64_t)"[FileNotFoundError] ", 20);
  sub_1B4BB34F0(v10, (uint64_t)"Filename specified by brdige_model_spec.json for video captioning espresso bridge network not found: ", 101);
  unint64_t v5 = *(unsigned char **)(a2 + 8);
  uint64_t v4 = a2 + 8;
  int v3 = v5;
  int v6 = *(char *)(v4 + 23);
  if (v6 >= 0) {
    int64_t v7 = (unsigned char *)v4;
  }
  else {
    int64_t v7 = v3;
  }
  if (v6 >= 0) {
    uint64_t v8 = *(unsigned __int8 *)(v4 + 23);
  }
  else {
    uint64_t v8 = *(void *)(v4 + 8);
  }
  sub_1B4BCBEB8(v10, v7, &v7[v8], 0x22u, 0x5Cu);
  std::stringbuf::str();
  v10[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v10 + *(void *)(v10[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v10[1] = MEMORY[0x1E4FBA470] + 16;
  if (v11 < 0) {
    operator delete((void *)v10[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1BA992920](&v12);
}

void sub_1B4C1AD8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1B4BC8450((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1B4C1ADA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1B4BC8450((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_1B4C1ADB4(void *result)
{
  uint64_t v1 = result;
  unsigned char *result = &unk_1F0D54E30;
  uint64_t v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_1B4C1AE4C(void *a1)
{
  *a1 = &unk_1F0D54E30;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x1BA9929C0);
}

void sub_1B4C1AEF4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0D55B70;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1B4C1AF14(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0D55B70;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1BA9929C0);
}

uint64_t sub_1B4C1AF68(uint64_t a1)
{
  return sub_1B4C1BE94(a1 + 24);
}

uint64_t sub_1B4C1AF74(uint64_t a1, long long *a2, uint64_t a3)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  int v6 = (uint64_t *)(a1 + 16);
  *(void *)(a1 + 24) = 0;
  if (*((char *)a2 + 23) < 0)
  {
    sub_1B4BCA11C((unsigned char *)(a1 + 32), *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v7 = *a2;
    *(void *)(a1 + 48) = *((void *)a2 + 2);
    *(_OWORD *)(a1 + 32) = v7;
  }
  sub_1B4C1B6E0(a1 + 56, a3);
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_DWORD *)(a1 + 224) = 1065353216;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_DWORD *)(a1 + 264) = 1065353216;
  if (!*(unsigned char *)(a3 + 28) && qword_1EB9FE2A8 != -1) {
    dispatch_once(&qword_1EB9FE2A8, &unk_1F0D55F80);
  }
  uint64_t context = espresso_create_context();
  uint64_t *v6 = context;
  if (!context)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Failed to create espresso context.");
    goto LABEL_63;
  }
  uint64_t plan = espresso_create_plan();
  *(void *)(a1 + 24) = plan;
  if (!plan)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Failed to create espresso plan.");
LABEL_63:
    exception->__vftable = (std::runtime_error_vtbl *)&unk_1F0D54E70;
    __cxa_throw(exception, (struct type_info *)&unk_1F0D533B0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (*(unsigned char *)(a3 + 52)
    && (LODWORD(__dst.__r_.__value_.__l.__data_) = espresso_plan_set_priority(),
        HIBYTE(__p[2]) = 20,
        strcpy((char *)__p, "Setting plan priorty"),
        sub_1B4C0AE64((int *)&__dst, (uint64_t *)__p),
        SHIBYTE(__p[2]) < 0))
  {
    operator delete(__p[0]);
    if ((*((char *)a2 + 23) & 0x80000000) == 0) {
      goto LABEL_12;
    }
  }
  else if ((*((char *)a2 + 23) & 0x80000000) == 0)
  {
LABEL_12:
    *(_OWORD *)std::string __p = *a2;
    std::string __p[2] = *((void **)a2 + 2);
    goto LABEL_15;
  }
  sub_1B4BCA11C(__p, *(void **)a2, *((void *)a2 + 1));
LABEL_15:
  int v10 = *(char *)(a3 + 135);
  if (v10 >= 0) {
    std::string::size_type v11 = *(unsigned __int8 *)(a3 + 135);
  }
  else {
    std::string::size_type v11 = *(void *)(a3 + 120);
  }
  if (!v11) {
    goto LABEL_40;
  }
  int v12 = SHIBYTE(__p[2]);
  if (SHIBYTE(__p[2]) >= 0) {
    size_t v13 = HIBYTE(__p[2]);
  }
  else {
    size_t v13 = (size_t)__p[1];
  }
  unint64_t v14 = v13 + 1;
  if (v13 + 1 >= 0x7FFFFFFFFFFFFFF8) {
    sub_1B4BB33D8();
  }
  if (v14 >= 0x17)
  {
    uint64_t v16 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17) {
      uint64_t v16 = v14 | 7;
    }
    uint64_t v17 = v16 + 1;
    p_dst = (std::string *)operator new(v16 + 1);
    __dst.__r_.__value_.__l.__size_ = v13 + 1;
    __dst.__r_.__value_.__r.__words[2] = v17 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_29;
  }
  memset(&__dst, 0, sizeof(__dst));
  p_dst = &__dst;
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v13 + 1;
  if (v13)
  {
LABEL_29:
    if (v12 >= 0) {
      int64_t v18 = __p;
    }
    else {
      int64_t v18 = (void **)__p[0];
    }
    memmove(p_dst, v18, v13);
  }
  *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + v13) = 58;
  if (v10 >= 0) {
    unint64_t v19 = (const std::string::value_type *)(a3 + 112);
  }
  else {
    unint64_t v19 = *(const std::string::value_type **)(a3 + 112);
  }
  uint64_t v20 = std::string::append(&__dst, v19, v11);
  uint64_t v21 = (void *)v20->__r_.__value_.__r.__words[0];
  *(void *)&long long v31 = v20->__r_.__value_.__l.__size_;
  *(void *)((char *)&v31 + 7) = *(std::string::size_type *)((char *)&v20->__r_.__value_.__r.__words[1] + 7);
  char v22 = HIBYTE(v20->__r_.__value_.__r.__words[2]);
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = v21;
  __p[1] = (void *)v31;
  *(void **)((char *)&__p[1] + 7) = *(void **)((char *)&v31 + 7);
  HIBYTE(__p[2]) = v22;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
LABEL_40:
  LODWORD(v31) = espresso_plan_add_network();
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
  *(_OWORD *)&__dst.__r_.__value_.__r.__words[1] = xmmword_1B4C9A440;
  strcpy(__dst.__r_.__value_.__l.__data_, "Loading espresso Network");
  sub_1B4C0AE64((int *)&v31, (uint64_t *)&__dst);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if (!*(unsigned char *)(a3 + 64)) {
      goto LABEL_45;
    }
  }
  else if (!*(unsigned char *)(a3 + 64))
  {
    goto LABEL_45;
  }
  LODWORD(v31) = espresso_plan_share_intermediate_buffer();
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
  *(_OWORD *)&__dst.__r_.__value_.__r.__words[1] = xmmword_1B4C9A450;
  strcpy(__dst.__r_.__value_.__l.__data_, "Sharing intermediate buffer");
  sub_1B4C0AE64((int *)&v31, (uint64_t *)&__dst);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    uint64_t v24 = *(void *)a3;
    uint64_t v23 = *(void *)(a3 + 8);
    if (*(void *)a3 == v23) {
      goto LABEL_51;
    }
    goto LABEL_48;
  }
LABEL_45:
  uint64_t v24 = *(void *)a3;
  uint64_t v23 = *(void *)(a3 + 8);
  if (*(void *)a3 == v23) {
    goto LABEL_51;
  }
  do
  {
LABEL_48:
    LODWORD(v31) = espresso_network_declare_output();
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
    *(_OWORD *)&__dst.__r_.__value_.__r.__words[1] = xmmword_1B4C9A440;
    strcpy(__dst.__r_.__value_.__l.__data_, "Declaring network output");
    sub_1B4C0AE64((int *)&v31, (uint64_t *)&__dst);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__dst.__r_.__value_.__l.__data_);
    }
    v24 += 24;
  }
  while (v24 != v23);
LABEL_51:
  for (uint64_t i = *(uint64_t **)(a3 + 88); i; uint64_t i = (uint64_t *)*i)
  {
    long long v31 = *(_OWORD *)(i + 5);
    int v32 = *((_DWORD *)i + 14);
    int v28 = espresso_set_image_preprocessing_params();
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
    *(_OWORD *)&__dst.__r_.__value_.__r.__words[1] = xmmword_1B4C9A460;
    strcpy(__dst.__r_.__value_.__l.__data_, "Setting preprocessing params");
    sub_1B4C0AE64(&v28, (uint64_t *)&__dst);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__dst.__r_.__value_.__l.__data_);
    }
  }
  LODWORD(v31) = espresso_plan_build();
  strcpy((char *)&__dst, "Building espresso plan");
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 22;
  sub_1B4C0AE64((int *)&v31, (uint64_t *)&__dst);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
      return a1;
    }
LABEL_60:
    operator delete(__p[0]);
    return a1;
  }
  if (SHIBYTE(__p[2]) < 0) {
    goto LABEL_60;
  }
  return a1;
}

void sub_1B4C1B5D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  sub_1B4C0CAF4(a10);
  sub_1B4C0CAF4(a11);
  sub_1B4C0A858(a12);
  if (*(char *)(v29 + 55) < 0) {
    operator delete(*a9);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1B4C1B6E0(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  sub_1B4BCA340((char *)a1, *(long long **)a2, *(long long **)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
  long long v4 = *(_OWORD *)(a2 + 24);
  long long v5 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 49) = *(_OWORD *)(a2 + 49);
  *(_OWORD *)(a1 + 4sub_1B4BC92E4(&a9, 0) = v5;
  *(_OWORD *)(a1 + 24) = v4;
  sub_1B4C1B85C(a1 + 72, a2 + 72);
  int v6 = (unsigned char *)(a1 + 112);
  if (*(char *)(a2 + 135) < 0)
  {
    sub_1B4BCA11C(v6, *(void **)(a2 + 112), *(void *)(a2 + 120));
  }
  else
  {
    long long v7 = *(_OWORD *)(a2 + 112);
    *(void *)(a1 + 128) = *(void *)(a2 + 128);
    *(_OWORD *)int v6 = v7;
  }
  return a1;
}

void sub_1B4C1B7A8(_Unwind_Exception *exception_object)
{
  long long v4 = (void **)v1[11];
  if (v4)
  {
    do
    {
      long long v7 = (void **)*v4;
      if (*((char *)v4 + 39) < 0) {
        operator delete(v4[2]);
      }
      operator delete(v4);
      long long v4 = v7;
    }
    while (v7);
  }
  long long v5 = *v2;
  *uint64_t v2 = 0;
  if (v5)
  {
    operator delete(v5);
    int v6 = (void **)*v1;
    if (!*v1) {
LABEL_4:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    int v6 = (void **)*v1;
    if (!*v1) {
      goto LABEL_4;
    }
  }
  uint64_t v8 = (void **)v1[1];
  uint64_t v9 = v6;
  if (v8 != v6)
  {
    do
    {
      if (*((char *)v8 - 1) < 0) {
        operator delete(*(v8 - 3));
      }
      v8 -= 3;
    }
    while (v8 != v6);
    uint64_t v9 = *v1;
  }
  v1[1] = v6;
  operator delete(v9);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1B4C1B85C(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  size_t prime = *(void *)(a2 + 8);
  if (prime == 1)
  {
    size_t prime = 2;
LABEL_17:
    sub_1B4C0C040(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(*(void *)(a2 + 8));
    int8x8_t v5 = *(int8x8_t *)(a1 + 8);
    BOOL v6 = prime >= *(void *)&v5;
    if (prime > *(void *)&v5) {
      goto LABEL_17;
    }
  }
  else
  {
    int8x8_t v5 = 0;
    BOOL v6 = 1;
    if (prime) {
      goto LABEL_17;
    }
  }
  if (!v6)
  {
    unint64_t v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v5 < 3uLL || (uint8x8_t v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      unint64_t v7 = std::__next_prime(v7);
    }
    else
    {
      uint64_t v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2) {
        unint64_t v7 = v9;
      }
    }
    if (prime <= v7) {
      size_t prime = v7;
    }
    if (prime < *(void *)&v5) {
      goto LABEL_17;
    }
  }
LABEL_18:
  for (uint64_t i = *(void **)(a2 + 16); i; uint64_t i = (void *)*i)
    sub_1B4C1B9A0(a1, (uint64_t)(i + 2), (uint64_t)(i + 2));
  return a1;
}

void sub_1B4C1B978(_Unwind_Exception *a1)
{
  sub_1B4C0D3C4(v1);
  _Unwind_Resume(a1);
}

void sub_1B4C1B98C(_Unwind_Exception *a1)
{
  sub_1B4C0D3C4(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_1B4C1B9A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int8x8_t v5 = (unsigned char *)a2;
  unint64_t v7 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v8 = v7;
  }
  unint64_t v9 = sub_1B4BB2824((uint64_t)v42, (uint64_t *)a2, v8);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v3 = v9;
      if (v9 >= v11) {
        unint64_t v3 = v9 % v11;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v9;
    }
    size_t v13 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      unint64_t v14 = *v13;
      if (*v13)
      {
        char v15 = v5[23];
        if (v15 >= 0) {
          uint64_t v16 = v5[23];
        }
        else {
          uint64_t v16 = *((void *)v5 + 1);
        }
        if (v15 < 0) {
          int8x8_t v5 = *(unsigned char **)v5;
        }
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v21 = v14[1];
            if (v21 == v10)
            {
              uint64_t v22 = *((unsigned __int8 *)v14 + 39);
              if ((v22 & 0x80u) == 0) {
                uint64_t v23 = *((unsigned __int8 *)v14 + 39);
              }
              else {
                uint64_t v23 = v14[3];
              }
              if (v23 == v16)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v14[2], v5, v14[3])) {
                    return v14;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v14 + 39)) {
                    return v14;
                  }
                  uint64_t v24 = 0;
                  while (*((unsigned __int8 *)v14 + v24 + 16) == v5[v24])
                  {
                    if (v22 == ++v24) {
                      return v14;
                    }
                  }
                }
              }
            }
            else if ((v21 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            unint64_t v14 = (uint64_t *)*v14;
            if (!v14) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v17 = v14[1];
          if (v17 == v10)
          {
            uint64_t v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0) {
              uint64_t v19 = *((unsigned __int8 *)v14 + 39);
            }
            else {
              uint64_t v19 = v14[3];
            }
            if (v19 == v16)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp((const void *)v14[2], v5, v14[3])) {
                  return v14;
                }
              }
              else
              {
                if (!*((unsigned char *)v14 + 39)) {
                  return v14;
                }
                uint64_t v20 = 0;
                while (*((unsigned __int8 *)v14 + v20 + 16) == v5[v20])
                {
                  if (v18 == ++v20) {
                    return v14;
                  }
                }
              }
            }
          }
          else
          {
            if (v17 >= v11) {
              v17 %= v11;
            }
            if (v17 != v3) {
              break;
            }
          }
          unint64_t v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  long long v25 = (char *)operator new(0x40uLL);
  v42[0] = v25;
  v42[1] = a1 + 16;
  char v43 = 0;
  *(void *)long long v25 = 0;
  *((void *)v25 + 1) = v10;
  int v26 = v25 + 16;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_1B4BCA11C(v26, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)int v26 = *(_OWORD *)a3;
    *((void *)v25 + 4) = *(void *)(a3 + 16);
  }
  *(_OWORD *)(v25 + 4sub_1B4BC92E4(&a9, 0) = *(_OWORD *)(a3 + 24);
  *((_DWORD *)v25 + 14) = *(_DWORD *)(a3 + 40);
  char v43 = 1;
  float v27 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v28 = *(float *)(a1 + 32);
  if (!v11 || (float)(v28 * (float)v11) < v27)
  {
    BOOL v31 = 1;
    if (v11 >= 3) {
      BOOL v31 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v32 = v31 | (2 * v11);
    unint64_t v33 = vcvtps_u32_f32(v27 / v28);
    if (v32 <= v33) {
      size_t prime = v33;
    }
    else {
      size_t prime = v32;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v35 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v35) {
      goto LABEL_68;
    }
    if (prime < *(void *)&v35)
    {
      unint64_t v36 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v35 < 3uLL || (uint8x8_t v37 = (uint8x8_t)vcnt_s8(v35), v37.i16[0] = vaddlv_u8(v37), v37.u32[0] > 1uLL))
      {
        unint64_t v36 = std::__next_prime(v36);
      }
      else
      {
        uint64_t v38 = 1 << -(char)__clz(v36 - 1);
        if (v36 >= 2) {
          unint64_t v36 = v38;
        }
      }
      if (prime <= v36) {
        size_t prime = v36;
      }
      if (prime < *(void *)&v35) {
LABEL_68:
      }
        sub_1B4C0C040(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    unint64_t v39 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        unint64_t v3 = v10 % v11;
        uint64_t v29 = *(void **)(*(void *)a1 + 8 * (v10 % v11));
        size_t v30 = (void *)v42[0];
        if (v29) {
          goto LABEL_57;
        }
      }
      else
      {
        unint64_t v3 = v10;
        uint64_t v29 = *(void **)(*(void *)a1 + 8 * v10);
        size_t v30 = (void *)v42[0];
        if (v29) {
          goto LABEL_57;
        }
      }
    }
    else
    {
      unint64_t v3 = v39 & v10;
      uint64_t v29 = *(void **)(*(void *)a1 + 8 * (v39 & v10));
      size_t v30 = (void *)v42[0];
      if (v29) {
        goto LABEL_57;
      }
    }
LABEL_81:
    void *v30 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v42[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v42[0])
    {
      unint64_t v40 = *(void *)(*(void *)v42[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v40 >= v11) {
          v40 %= v11;
        }
      }
      else
      {
        v40 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v4sub_1B4BC92E4(&a9, 0) = v42[0];
    }
    goto LABEL_92;
  }
  uint64_t v29 = *(void **)(*(void *)a1 + 8 * v3);
  size_t v30 = (void *)v42[0];
  if (!v29) {
    goto LABEL_81;
  }
LABEL_57:
  void *v30 = *v29;
  *uint64_t v29 = v42[0];
LABEL_92:
  unint64_t v14 = (uint64_t *)v42[0];
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_1B4C1BDF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1B4C1BE1C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1B4C1BE04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1B4C1BE1C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_1B4C1BE1C(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((unsigned char *)a1 + 16) && *(char *)(v2 + 39) < 0) {
      operator delete(*(void **)(v2 + 16));
    }
    operator delete((void *)v2);
  }
  return a1;
}

uint64_t sub_1B4C1BE6C()
{
  uint64_t result = MGGetBoolAnswer();
  byte_1EB9FE2A0 = result;
  return result;
}

uint64_t sub_1B4C1BE94(uint64_t a1)
{
  if (*(void *)(a1 + 24)) {
    espresso_plan_destroy();
  }
  if (*(void *)(a1 + 16)) {
    espresso_context_destroy();
  }
  sub_1B4C0CAF4(a1 + 232);
  sub_1B4C0CAF4(a1 + 192);
  sub_1B4C0A858(a1 + 56);
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  return a1;
}

uint64_t sub_1B4C1BF0C(uint64_t a1, uint64_t a2)
{
  sub_1B4BB2204((uint64_t)v10);
  sub_1B4BB34F0(v10, (uint64_t)"[FileNotFoundError] ", 20);
  sub_1B4BB34F0(v10, (uint64_t)"Filename specified by model_spec.json for video captioning espresso decoder network not found: ", 95);
  int8x8_t v5 = *(unsigned char **)(a2 + 8);
  uint64_t v4 = a2 + 8;
  unint64_t v3 = v5;
  int v6 = *(char *)(v4 + 23);
  if (v6 >= 0) {
    unint64_t v7 = (unsigned char *)v4;
  }
  else {
    unint64_t v7 = v3;
  }
  if (v6 >= 0) {
    uint64_t v8 = *(unsigned __int8 *)(v4 + 23);
  }
  else {
    uint64_t v8 = *(void *)(v4 + 8);
  }
  sub_1B4BCBEB8(v10, v7, &v7[v8], 0x22u, 0x5Cu);
  std::stringbuf::str();
  v10[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v10 + *(void *)(v10[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v10[1] = MEMORY[0x1E4FBA470] + 16;
  if (v11 < 0) {
    operator delete((void *)v10[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1BA992920](&v12);
}

void sub_1B4C1C08C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1B4BC8450((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1B4C1C0A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1B4BC8450((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1B4C1C0B4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0D55C18;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1B4C1C0D4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0D55C18;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1BA9929C0);
}

uint64_t sub_1B4C1C128(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_1B4C1C154(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1BA9929C0);
}

uint64_t sub_1B4C1C18C(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 24);
  if (v1)
  {
    if (*(unsigned char *)(v1 + 40))
    {
      uint64_t v2 = *(void *)(v1 + 16);
      if (v2)
      {
        uint64_t v3 = *(void *)(v1 + 24);
        uint64_t v4 = *(void **)(v1 + 16);
        if (v3 != v2)
        {
          do
          {
            if (*(char *)(v3 - 1) < 0) {
              operator delete(*(void **)(v3 - 24));
            }
            v3 -= 24;
          }
          while (v3 != v2);
          uint64_t v4 = *(void **)(v1 + 16);
        }
        *(void *)(v1 + 24) = v2;
        operator delete(v4);
      }
    }
    JUMPOUT(0x1BA9929C0);
  }
  return result;
}

uint64_t sub_1B4C1C23C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x80000001B4C9A947) {
    return a1 + 24;
  }
  if (((v3 & 0x80000001B4C9A947 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001B4C9A947)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001B4C9A947 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

void sub_1B4C1C2C0(uint64_t a1, std::string *__str, std::string *a3, size_t __sz)
{
  int v6 = __str;
  uint64_t v8 = *(void *)(a1 + 16);
  unint64_t v9 = *(std::string **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *(void *)a1) >> 3) >= __sz)
  {
    uint64_t v12 = *(std::string **)(a1 + 8);
    if (0xAAAAAAAAAAAAAAABLL * (((char *)v12 - (char *)v9) >> 3) >= __sz)
    {
      if (__str == a3)
      {
        uint64_t v20 = *(std::string **)a1;
      }
      else
      {
        uint64_t v20 = *(std::string **)a1;
        do
        {
          std::string::operator=(v9++, v6++);
          ++v20;
        }
        while (v6 != a3);
        uint64_t v12 = *(std::string **)(a1 + 8);
      }
      while (v12 != v20)
      {
        if (SHIBYTE(v12[-1].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v12[-1].__r_.__value_.__l.__data_);
        }
        --v12;
      }
      *(void *)(a1 + 8) = v20;
    }
    else
    {
      size_t v13 = (std::string *)((char *)__str + 8 * (((char *)v12 - (char *)v9) >> 3));
      if (v12 != v9)
      {
        uint64_t v14 = 8 * (((char *)v12 - (char *)v9) >> 3);
        do
        {
          std::string::operator=(v9++, v6++);
          v14 -= 24;
        }
        while (v14);
        unint64_t v9 = *(std::string **)(a1 + 8);
      }
      char v15 = v9;
      if (v13 != a3)
      {
        uint64_t v16 = 0;
        do
        {
          uint64_t v18 = &v9[v16];
          uint64_t v19 = (char *)&v13[v16];
          if (SHIBYTE(v13[v16].__r_.__value_.__r.__words[2]) < 0)
          {
            sub_1B4BCA11C(v18, *(void **)v19, *((void *)v19 + 1));
          }
          else
          {
            long long v17 = *(_OWORD *)v19;
            v18->__r_.__value_.__r.__words[2] = *((void *)v19 + 2);
            *(_OWORD *)&v18->__r_.__value_.__l.__data_ = v17;
          }
          ++v16;
        }
        while (&v13[v16] != a3);
        char v15 = &v9[v16];
      }
      *(void *)(a1 + 8) = v15;
    }
  }
  else
  {
    if (v9)
    {
      unint64_t v10 = *(std::string **)(a1 + 8);
      char v11 = *(std::string **)a1;
      if (v10 != v9)
      {
        do
        {
          if (SHIBYTE(v10[-1].__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v10[-1].__r_.__value_.__l.__data_);
          }
          --v10;
        }
        while (v10 != v9);
        char v11 = *(std::string **)a1;
      }
      *(void *)(a1 + 8) = v9;
      operator delete(v11);
      uint64_t v8 = 0;
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
    }
    if (__sz > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_48;
    }
    unint64_t v21 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    uint64_t v22 = 2 * v21;
    if (2 * v21 <= __sz) {
      uint64_t v22 = __sz;
    }
    unint64_t v23 = v21 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v22;
    if (v23 > 0xAAAAAAAAAAAAAAALL) {
LABEL_48:
    }
      sub_1B4BB3244();
    uint64_t v24 = 24 * v23;
    long long v25 = (char *)operator new(24 * v23);
    *(void *)a1 = v25;
    *(void *)(a1 + 8) = v25;
    *(void *)(a1 + 16) = &v25[v24];
    if (v6 != a3)
    {
      uint64_t v26 = 0;
      do
      {
        float v27 = &v25[v26 * 24];
        float v28 = &v6[v26];
        if (SHIBYTE(v6[v26].__r_.__value_.__r.__words[2]) < 0)
        {
          sub_1B4BCA11C(v27, v28->__r_.__value_.__l.__data_, v28->__r_.__value_.__l.__size_);
        }
        else
        {
          *(_OWORD *)float v27 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
          *((void *)v27 + 2) = *((void *)&v28->__r_.__value_.__l + 2);
        }
        ++v26;
      }
      while (&v6[v26] != a3);
      v25 += v26 * 24;
    }
    *(void *)(a1 + 8) = v25;
  }
}

unint64_t sub_1B4C1C5C8(uint64_t a1, unsigned int **a2, uint64_t a3)
{
  sub_1B4C07898(&v74, a3, a2);
  uint64_t v4 = *(void **)(a1 + 56);
  int8x8_t v5 = v74;
  if (v4 != (void *)(a1 + 64))
  {
    do
    {
      v5[*((unsigned int *)v4 + 7)] = -8388609;
      int v6 = (void *)v4[1];
      if (v6)
      {
        do
        {
          unint64_t v7 = v6;
          int v6 = (void *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          unint64_t v7 = (void *)v4[2];
          BOOL v8 = *v7 == (void)v4;
          uint64_t v4 = v7;
        }
        while (!v8);
      }
      uint64_t v4 = v7;
    }
    while (v7 != (void *)(a1 + 64));
  }
  int v71 = 0;
  int v72 = 0;
  uint64_t v73 = 0;
  int64_t v9 = v75 - (unsigned char *)v5;
  if (v75 == (unsigned char *)v5)
  {
    unint64_t v62 = 0;
  }
  else
  {
    if (v9 < 0) {
      sub_1B4BB3244();
    }
    unint64_t v10 = (float *)operator new(v75 - (unsigned char *)v5);
    int v71 = v10;
    uint64_t v73 = &v10[v9 >> 2];
    memcpy(v10, v5, v9);
    char v11 = v10;
    if (v9 != 4)
    {
      uint64_t v12 = v10 + 1;
      float v13 = *v10;
      uint64_t v14 = 4 * (v9 >> 2) - 4;
      char v11 = v10;
      char v15 = v10 + 1;
      do
      {
        float v16 = *v15++;
        BOOL v17 = v13 < v16;
        float v13 = fmaxf(v13, v16);
        if (v17) {
          char v11 = v12;
        }
        uint64_t v12 = v15;
        v14 -= 4;
      }
      while (v14);
    }
    unint64_t v62 = (char *)v11 - (char *)v10;
    int v72 = v10;
    operator delete(v10);
  }
  p_p = &__p;
  uint64_t v19 = &v90;
  uint64_t v20 = &v86[1];
  size_t v66 = *(void **)(MEMORY[0x1E4FBA418] + 16);
  int v67 = *(void **)(MEMORY[0x1E4FBA418] + 8);
  size_t v64 = *(void **)(MEMORY[0x1E4FBA418] + 24);
  unint64_t v65 = (void *)*MEMORY[0x1E4FBA418];
  uint64_t v58 = a1;
  unint64_t v21 = (char *)operator new(4uLL);
  *(_DWORD *)unint64_t v21 = v62 >> 2;
  uint64_t v60 = v21 + 4;
  int64_t v61 = v21;
  uint64_t v69 = 0;
  BOOL v70 = 0;
  BOOL v68 = 0;
  unint64_t v23 = *a2;
  uint64_t v22 = a2[1];
  uint64_t v24 = 0;
  if (*a2 != v22)
  {
    int v63 = a2[1];
    while (1)
    {
      while (v24 < v70)
      {
        int v25 = *v23++;
        *(_DWORD *)uint64_t v24 = v25;
        v24 += 4;
        uint64_t v69 = (uint64_t)v24;
        if (v23 == v22) {
          goto LABEL_49;
        }
      }
      uint64_t v26 = (char *)v68;
      int64_t v27 = v24 - (unsigned char *)v68;
      uint64_t v28 = (v24 - (unsigned char *)v68) >> 2;
      unint64_t v29 = v28 + 1;
      if ((unint64_t)(v28 + 1) >> 62) {
        sub_1B4BB3244();
      }
      size_t v30 = v20;
      BOOL v31 = p_p;
      unint64_t v32 = v19;
      uint64_t v33 = v70 - (unsigned char *)v68;
      if ((v70 - (unsigned char *)v68) >> 1 > v29) {
        unint64_t v29 = v33 >> 1;
      }
      unint64_t v34 = (unint64_t)v33 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v29;
      if (v34)
      {
        if (v34 >> 62) {
          sub_1B4BB2D38();
        }
        int8x8_t v35 = operator new(4 * v34);
        unint64_t v36 = (unsigned int *)&v35[4 * v28];
        *unint64_t v36 = *v23;
        uint64_t v37 = (uint64_t)(v36 + 1);
        int64_t v38 = v24 - v26;
        if (v24 == v26)
        {
LABEL_40:
          BOOL v68 = v36;
          uint64_t v69 = v37;
          BOOL v70 = &v35[4 * v34];
          if (!v26) {
            goto LABEL_37;
          }
LABEL_36:
          operator delete(v26);
          goto LABEL_37;
        }
      }
      else
      {
        int8x8_t v35 = 0;
        unint64_t v36 = (unsigned int *)(4 * v28);
        *(_DWORD *)(4 * v28) = *v23;
        uint64_t v37 = 4 * v28 + 4;
        int64_t v38 = v24 - v26;
        if (v24 == v26) {
          goto LABEL_40;
        }
      }
      unint64_t v39 = v38 - 4;
      if (v39 < 0xBC) {
        break;
      }
      unint64_t v42 = (v24 - 4 - v26) & 0xFFFFFFFFFFFFFFFCLL;
      if (&v35[v27 - 4 - v42] > &v35[v27 - 4] || &v24[-v42 - 4] > v24 - 4 || (unint64_t)(v24 - v35 - v27) < 0x20) {
        break;
      }
      uint64_t v43 = (v39 >> 2) + 1;
      uint64_t v44 = 4 * (v43 & 0x7FFFFFFFFFFFFFF8);
      unint64_t v40 = &v24[-v44];
      unint64_t v36 = (unsigned int *)((char *)v36 - v44);
      size_t v45 = &v35[4 * v28 - 16];
      int v46 = v24 - 16;
      uint64_t v47 = v43 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v48 = *(_OWORD *)v46;
        *(v45 - 1) = *((_OWORD *)v46 - 1);
        _OWORD *v45 = v48;
        v45 -= 2;
        v46 -= 32;
        v47 -= 8;
      }
      while (v47);
      if (v43 != (v43 & 0x7FFFFFFFFFFFFFF8)) {
        goto LABEL_34;
      }
LABEL_35:
      BOOL v68 = v36;
      uint64_t v69 = v37;
      BOOL v70 = &v35[4 * v34];
      if (v26) {
        goto LABEL_36;
      }
LABEL_37:
      uint64_t v24 = (char *)v37;
      uint64_t v19 = v32;
      p_p = v31;
      uint64_t v20 = v30;
      uint64_t v22 = v63;
      uint64_t v69 = v37;
      if (++v23 == v63) {
        goto LABEL_49;
      }
    }
    unint64_t v40 = v24;
    do
    {
LABEL_34:
      unsigned int v41 = *((_DWORD *)v40 - 1);
      v40 -= 4;
      *--unint64_t v36 = v41;
    }
    while (v40 != v26);
    goto LABEL_35;
  }
LABEL_49:
  sub_1B4C29E8C((unint64_t *)&v68, v24, v61, v60);
  if (*(unsigned char *)(v58 + 40))
  {
    (*(void (**)(void **__return_ptr))(**(void **)(v58 + 80) + 32))(&v84);
    BOOL v49 = *(long long **)(v58 + 16);
    if (v49 != *(long long **)(v58 + 24))
    {
      if (*((char *)v49 + 23) < 0)
      {
        sub_1B4BCA11C(__dst, *(void **)v49, *((void *)v49 + 1));
      }
      else
      {
        long long v50 = *v49;
        uint64_t v83 = *((void *)v49 + 2);
        *(_OWORD *)std::string __dst = v50;
      }
      uint64_t v51 = MEMORY[0x1E4FBA498] + 64;
      uint64_t v90 = MEMORY[0x1E4FBA498] + 64;
      v86[0] = v67;
      *(void **)((char *)v86 + *((void *)v67 - 3)) = v66;
      size_t v52 = (std::ios_base *)((char *)v86 + *((void *)v86[0] - 3));
      std::ios_base::init(v52, v20);
      long long v53 = (void *)(MEMORY[0x1E4FBA498] + 24);
      v52[1].__vftable = 0;
      v52[1].__fmtflags_ = -1;
      v86[0] = v53;
      uint64_t v90 = v51;
      std::streambuf::basic_streambuf();
      size_t v54 = (void *)(MEMORY[0x1E4FBA470] + 16);
      v86[1] = (void *)(MEMORY[0x1E4FBA470] + 16);
      *(_OWORD *)p_p = 0u;
      *((_OWORD *)p_p + 1) = 0u;
      LODWORD(v89) = 16;
      sub_1B4BB34F0(v86, (uint64_t)"\b", 1);
      if (v83 >= 0) {
        int v55 = __dst;
      }
      else {
        int v55 = (void **)__dst[0];
      }
      if (v83 >= 0) {
        uint64_t v56 = HIBYTE(v83);
      }
      else {
        uint64_t v56 = (uint64_t)__dst[1];
      }
      sub_1B4BB34F0(v86, (uint64_t)v55, v56);
      sub_1B4BB34F0(v86, (uint64_t)"\b", 1);
      std::stringbuf::str();
      v86[0] = v65;
      *(void **)((char *)v86 + *((void *)v65 - 3)) = v64;
      v86[1] = v54;
      if (v88 < 0) {
        operator delete(__p);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x1BA992920](v19);
      MEMORY[0x1BA9928D0](&v76);
      uint64_t v77 = std::locale::use_facet(&v76, MEMORY[0x1E4FBA258]);
      uint64_t v78 = std::locale::use_facet(&v76, MEMORY[0x1E4FBA280]);
      long long v79 = 0u;
      long long v80 = 0u;
      uint64_t v81 = 0;
      sub_1B4C1D17C();
    }
    if (v85 < 0) {
      operator delete(v84);
    }
  }
  if (v68)
  {
    uint64_t v69 = (uint64_t)v68;
    operator delete(v68);
  }
  operator delete(v61);
  if (v74)
  {
    unint64_t v75 = v74;
    operator delete(v74);
  }
  return v62 >> 2;
}

void sub_1B4C1CF60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,uint64_t a33,void *a34)
{
  if (__p) {
    operator delete(__p);
  }
  if (a34) {
    operator delete(a34);
  }
  _Unwind_Resume(a1);
}

void sub_1B4C1D0E0(std::locale *this)
{
  uint64_t v1 = this;
  int locale = (std::__shared_weak_count *)this[6].__locale_;
  if (locale && !atomic_fetch_add(&locale->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))locale->__on_zero_shared)(locale);
    std::__shared_weak_count::__release_weak(locale);
    this = v1;
  }
  else if (((vars8 ^ (2 * vars8)) & 0x4000000000000000) != 0)
  {
    __break(0xC471u);
  }
  std::locale::~locale(this);
}

void sub_1B4C1D17C()
{
}

void sub_1B4C1D7C0(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_1B4C1D824()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1BA992590](exception, 17);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1B4C1D868(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_1B4C1D87C(uint64_t a1, char *a2, char *a3)
{
  int v6 = a2;
  while (1)
  {
    unint64_t v7 = (unsigned __int8 *)v6;
    int v6 = sub_1B4C1E220(a1, v6, a3);
    if (v7 == (unsigned __int8 *)v6) {
      break;
    }
LABEL_2:
    if (v6 == (char *)v7) {
      goto LABEL_6;
    }
  }
  BOOL v8 = sub_1B4C1E5C4(a1, v7, (unsigned __int8 *)a3);
  if (v7 != v8)
  {
    int v6 = sub_1B4C1EE08(a1, (char *)v8, a3);
    goto LABEL_2;
  }
LABEL_6:
  if (v7 == (unsigned __int8 *)a2) {
    operator new();
  }
  if (v7 == (unsigned __int8 *)a3) {
    return (unsigned __int8 *)a3;
  }
  if (*v7 == 124)
  {
    int64_t v9 = v7 + 1;
    unint64_t v10 = (char *)(v7 + 1);
    while (1)
    {
      char v11 = (unsigned __int8 *)v10;
      unint64_t v10 = sub_1B4C1E220(a1, v10, a3);
      if (v11 == (unsigned __int8 *)v10)
      {
        uint64_t v12 = sub_1B4C1E5C4(a1, v11, (unsigned __int8 *)a3);
        if (v11 == v12)
        {
LABEL_15:
          if (v11 == v9) {
            operator new();
          }
          operator new();
        }
        unint64_t v10 = sub_1B4C1EE08(a1, (char *)v12, a3);
      }
      if (v10 == (char *)v11) {
        goto LABEL_15;
      }
    }
  }
  return v7;
}

unsigned __int8 *sub_1B4C1DB44(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t v3 = a2;
  if (a2 == a3) {
    return a2;
  }
  if (*a2 == 94) {
    operator new();
  }
  if (a2 != a3)
  {
    while (v3 != a3)
    {
      int v6 = v3;
      unint64_t v7 = sub_1B4C26ABC(a1, v3, a3);
      if (v3 != v7)
      {
        uint64_t v3 = sub_1B4C26DE8(a1, v7, a3);
        if (v6 != v3) {
          continue;
        }
      }
      if (v6 + 1 == a3 && *v6 == 36) {
        operator new();
      }
      sub_1B4C26A64();
    }
  }
  return a3;
}

char *sub_1B4C1DCF8(uint64_t a1, char *a2, char *a3)
{
  int v6 = sub_1B4C27234(a1, a2, a3);
  if (v6 == a2) {
    goto LABEL_12;
  }
  do
  {
    unint64_t v7 = v6;
    int v6 = sub_1B4C27234(a1, v6, a3);
  }
  while (v7 != v6);
  if (v7 == a2) {
    goto LABEL_12;
  }
  if (v7 == a3) {
    return a3;
  }
  if (*v7 == 124)
  {
    BOOL v8 = v7 + 1;
    int64_t v9 = sub_1B4C27234(a1, v7 + 1, a3);
    if (v7 + 1 != v9)
    {
      do
      {
        unint64_t v10 = v9;
        int64_t v9 = sub_1B4C27234(a1, v9, a3);
      }
      while (v10 != v9);
      if (v10 != v8) {
        operator new();
      }
    }
LABEL_12:
    sub_1B4C26A64();
  }
  return v7;
}

void sub_1B4C1DEA8()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1BA992590](exception, 14);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1B4C1DEEC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1B4C1DF04()
{
}

void sub_1B4C1DF18(uint64_t a1, _DWORD *a2)
{
  *a2 = -1000;
}

void sub_1B4C1DF30(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1BA9929C0);
}

uint64_t sub_1B4C1DF68(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_1B4C1DF98(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x80000001B4C9AA35) {
    return a1 + 24;
  }
  if (((v3 & 0x80000001B4C9AA35 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001B4C9AA35)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001B4C9AA35 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

void *sub_1B4C1E01C(void *a1)
{
  *a1 = &unk_1F0D55928;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void sub_1B4C1E088(void *a1)
{
  *a1 = &unk_1F0D55928;
  uint64_t v1 = a1[1];
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  JUMPOUT(0x1BA9929C0);
}

uint64_t sub_1B4C1E114(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(void *)(a2 + 8sub_1B4BC92E4(&a9, 0) = *(void *)(result + 8);
  return result;
}

void *sub_1B4C1E128(void *a1)
{
  *a1 = &unk_1F0D55928;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void sub_1B4C1E194(void *a1)
{
  *a1 = &unk_1F0D55928;
  uint64_t v1 = a1[1];
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  JUMPOUT(0x1BA9929C0);
}

char *sub_1B4C1E220(uint64_t a1, char *a2, char *a3)
{
  if (a2 != a3)
  {
    int v6 = *a2;
    if (v6 > 91)
    {
      if (v6 == 92)
      {
        if (a2 + 1 != a3)
        {
          int v9 = a2[1];
          if (v9 == 66) {
            operator new();
          }
          if (v9 == 98) {
            operator new();
          }
        }
      }
      else if (v6 == 94)
      {
        operator new();
      }
    }
    else
    {
      if (v6 == 36) {
        operator new();
      }
      if (v6 == 40 && a2 + 1 != a3 && a2[1] == 63 && a2 + 2 != a3)
      {
        int v7 = a2[2];
        if (v7 == 33)
        {
          sub_1B4C1F208((uint64_t)v10);
          int v11 = *(_DWORD *)(a1 + 24);
          sub_1B4C1D17C(v10, a2 + 3, a3);
          sub_1B4C1F278();
        }
        if (v7 == 61)
        {
          sub_1B4C1F208((uint64_t)v10);
          int v11 = *(_DWORD *)(a1 + 24);
          sub_1B4C1D17C(v10, a2 + 3, a3);
          sub_1B4C1F278();
        }
      }
    }
  }
  return a2;
}

void sub_1B4C1E574(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
}

void sub_1B4C1E588(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
}

void sub_1B4C1E59C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
}

void sub_1B4C1E5B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
}

unsigned __int8 *sub_1B4C1E5C4(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  if (a2 == a3) {
    return a2;
  }
  int v6 = a2;
  switch(*a2)
  {
    case '$':
    case ')':
    case ']':
    case '^':
    case '|':
    case '}':
      return v6;
    case '(':
      if (a2 + 1 == a3) {
        goto LABEL_45;
      }
      if (a2 + 2 != a3 && a2[1] == 63 && a2[2] == 58)
      {
        ++*(_DWORD *)(a1 + 36);
        BOOL v8 = (unsigned __int8 *)sub_1B4C1D87C(a1, a2 + 3, a3);
        if (v8 != a3 && *v8 == 41)
        {
          --*(_DWORD *)(a1 + 36);
          return v8 + 1;
        }
LABEL_45:
        sub_1B4C1F348();
      }
      if ((*(unsigned char *)(a1 + 24) & 2) == 0) {
        operator new();
      }
      ++*(_DWORD *)(a1 + 36);
      uint64_t v12 = (unsigned __int8 *)sub_1B4C1D87C(a1, a2 + 1, a3);
      if (v12 == a3 || *v12 != 41) {
        goto LABEL_45;
      }
      if ((*(unsigned char *)(a1 + 24) & 2) == 0) {
        operator new();
      }
      --*(_DWORD *)(a1 + 36);
      return v12 + 1;
    case '*':
    case '+':
    case '?':
    case '{':
      sub_1B4C21C24();
    case '.':
      operator new();
    case '[':
      return sub_1B4C20AB0(a1, a2, a3);
    case '\\':
      int v6 = a2;
      if (*a2 != 92) {
        return v6;
      }
      int v9 = a2 + 1;
      if (a2 + 1 == a3) {
        sub_1B4C21D74();
      }
      int v10 = *v9;
      unsigned int v11 = v10 - 48;
      if (v10 == 48) {
        sub_1B4C222B8(a1);
      }
      if ((v10 - 49) <= 8)
      {
        float v13 = a2 + 2;
        if (a2 + 2 == a3) {
          goto LABEL_32;
        }
        do
        {
          int v14 = *v13;
          if ((v14 - 48) > 9) {
            break;
          }
          if (v11 >= 0x19999999) {
            goto LABEL_46;
          }
          ++v13;
          unsigned int v11 = v14 + 10 * v11 - 48;
        }
        while (v13 != a3);
        if (v11)
        {
LABEL_32:
          if (v11 <= *(_DWORD *)(a1 + 28)) {
            sub_1B4C224FC(a1);
          }
        }
LABEL_46:
        sub_1B4C224A4();
      }
      switch((char)v10)
      {
        case 'D':
          operator new();
        case 'S':
          operator new();
        case 'W':
          operator new();
        case 'd':
          operator new();
        case 's':
          operator new();
        case 'w':
          operator new();
        default:
          char v15 = sub_1B4C21DCC(a1, a2 + 1, a3, 0);
          if (v9 == v15) {
            int v6 = a2;
          }
          else {
            int v6 = v15;
          }
          break;
      }
      return v6;
    default:
      sub_1B4C222B8(a1);
  }
}

void sub_1B4C1EB98(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9929C0](v1, 0x10F1C4061CF1F02);
  _Unwind_Resume(a1);
}

char *sub_1B4C1EE08(uint64_t a1, char *a2, char *a3)
{
  if (a2 == a3) {
    return a2;
  }
  int v3 = *(_DWORD *)(a1 + 24) & 0x1F0;
  int v4 = *a2;
  if (v4 > 62)
  {
    if (v4 == 63)
    {
      BOOL v17 = a2 + 1;
      if (v3) {
        BOOL v18 = 1;
      }
      else {
        BOOL v18 = v17 == a3;
      }
      if (!v18 && *v17 == 63) {
        sub_1B4C26058();
      }
      sub_1B4C26058();
    }
    int8x8_t v5 = a2;
    if (v4 != 123) {
      return v5;
    }
    BOOL v8 = a2 + 1;
    if (a2 + 1 != a3)
    {
      int v9 = *v8;
      if ((v9 & 0xF8) == 0x30 || (v9 & 0xFE) == 0x38)
      {
        int v10 = v9 - 48;
        unsigned int v11 = a2 + 2;
        if (a2 + 2 == a3)
        {
LABEL_21:
          unsigned int v11 = a3;
        }
        else
        {
          while (1)
          {
            int v12 = *v11;
            if ((v12 & 0xF8) != 0x30 && (v12 & 0xFE) != 0x38) {
              break;
            }
            if (v10 >= 214748364) {
              goto LABEL_69;
            }
            int v10 = v12 + 10 * v10 - 48;
            if (++v11 == a3) {
              goto LABEL_21;
            }
          }
        }
        if (v11 != v8)
        {
          if (v11 == a3) {
            goto LABEL_70;
          }
          int v13 = *v11;
          if (v13 != 44)
          {
            if (v13 == 125)
            {
              int v14 = v11 + 1;
              if (!v3 && v14 != a3 && *v14 == 63) {
                sub_1B4C26058();
              }
              sub_1B4C26058();
            }
            goto LABEL_69;
          }
          uint64_t v19 = v11 + 1;
          if (v11 + 1 == a3) {
            goto LABEL_69;
          }
          int v20 = *v19;
          if (v20 == 125)
          {
            unint64_t v21 = v11 + 2;
            if (v3 || v21 == a3 || *v21 != 63) {
              goto LABEL_42;
            }
            goto LABEL_35;
          }
          if ((v20 & 0xF8) != 0x30 && (v20 & 0xFE) != 0x38) {
            goto LABEL_70;
          }
          int v22 = v20 - 48;
          unint64_t v23 = v11 + 2;
          if (v23 == a3)
          {
LABEL_58:
            unint64_t v23 = a3;
          }
          else
          {
            while (1)
            {
              int v24 = *v23;
              if ((v24 & 0xF8) != 0x30 && (v24 & 0xFE) != 0x38) {
                break;
              }
              if (v22 >= 214748364) {
                goto LABEL_69;
              }
              int v22 = v24 + 10 * v22 - 48;
              if (++v23 == a3) {
                goto LABEL_58;
              }
            }
          }
          if (v23 == v19 || v23 == a3 || *v23 != 125) {
LABEL_70:
          }
            sub_1B4C26240();
          if (v22 >= v10)
          {
            int v25 = v23 + 1;
            if (!v3 && v25 != a3 && *v25 == 63) {
              sub_1B4C26058();
            }
            sub_1B4C26058();
          }
        }
      }
    }
LABEL_69:
    sub_1B4C261E8();
  }
  if (v4 == 42)
  {
    char v15 = a2 + 1;
    if (v3) {
      BOOL v16 = 1;
    }
    else {
      BOOL v16 = v15 == a3;
    }
    if (v16 || *v15 != 63) {
      goto LABEL_42;
    }
LABEL_35:
    sub_1B4C26058();
  }
  int8x8_t v5 = a2;
  if (v4 == 43)
  {
    int v6 = a2 + 1;
    if (!v3 && v6 != a3 && *v6 == 63) {
      goto LABEL_35;
    }
LABEL_42:
    sub_1B4C26058();
  }
  return v5;
}

uint64_t sub_1B4C1F208(uint64_t a1)
{
  uint64_t v2 = (const std::locale *)MEMORY[0x1BA9928D0]();
  *(void *)(a1 + 8) = std::locale::use_facet(v2, MEMORY[0x1E4FBA258]);
  *(void *)(a1 + 16) = std::locale::use_facet((const std::locale *)a1, MEMORY[0x1E4FBA280]);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 4sub_1B4BC92E4(&a9, 0) = 0u;
  *(void *)(a1 + 56) = 0;
  return a1;
}

void sub_1B4C1F264(_Unwind_Exception *a1)
{
  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

void sub_1B4C1F278()
{
}

void sub_1B4C1F348()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1BA992590](exception, 6);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1B4C1F38C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *sub_1B4C1F3A0(void *a1)
{
  *a1 = &unk_1F0D55928;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void sub_1B4C1F40C(void *a1)
{
  *a1 = &unk_1F0D55928;
  uint64_t v1 = a1[1];
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  JUMPOUT(0x1BA9929C0);
}

uint64_t sub_1B4C1F498(uint64_t result, uint64_t a2)
{
  if (!*(unsigned char *)(a2 + 92))
  {
    if (!*(unsigned char *)(result + 16)) {
      goto LABEL_12;
    }
    int v2 = *(unsigned __int8 *)(*(void *)(a2 + 16) - 1);
    if (v2 != 13 && v2 != 10) {
      goto LABEL_12;
    }
LABEL_11:
    *(_DWORD *)a2 = -994;
    *(void *)(a2 + 8sub_1B4BC92E4(&a9, 0) = *(void *)(result + 8);
    return result;
  }
  if (*(void *)(a2 + 16) == *(void *)(a2 + 8) && (*(unsigned char *)(a2 + 88) & 1) == 0) {
    goto LABEL_11;
  }
LABEL_12:
  *(_DWORD *)a2 = -993;
  *(void *)(a2 + 8sub_1B4BC92E4(&a9, 0) = 0;
  return result;
}

void *sub_1B4C1F4F8(void *a1)
{
  *a1 = &unk_1F0D55928;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void sub_1B4C1F564(void *a1)
{
  *a1 = &unk_1F0D55928;
  uint64_t v1 = a1[1];
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  JUMPOUT(0x1BA9929C0);
}

uint64_t sub_1B4C1F5F0(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) && (*(unsigned char *)(a2 + 88) & 2) == 0
    || *(unsigned char *)(result + 16) && ((int v3 = *v2, v3 != 13) ? (v4 = v3 == 10) : (v4 = 1), v4))
  {
    *(_DWORD *)a2 = -994;
    *(void *)(a2 + 8sub_1B4BC92E4(&a9, 0) = *(void *)(result + 8);
  }
  else
  {
    *(_DWORD *)a2 = -993;
    *(void *)(a2 + 8sub_1B4BC92E4(&a9, 0) = 0;
  }
  return result;
}

std::locale *sub_1B4C1F640(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1F0D558C8;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&unk_1F0D55928;
  int locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

void sub_1B4C1F6CC(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1F0D558C8;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&unk_1F0D55928;
  int locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  JUMPOUT(0x1BA9929C0);
}

uint64_t sub_1B4C1F778(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 **)(a2 + 8);
  int v3 = *(unsigned __int8 **)(a2 + 24);
  if (v2 == v3) {
    goto LABEL_19;
  }
  BOOL v4 = *(unsigned __int8 **)(a2 + 16);
  if (v4 != v3)
  {
    if (v4 == v2)
    {
      int v5 = *(_DWORD *)(a2 + 88);
      if ((v5 & 0x80) == 0)
      {
        if ((v5 & 4) == 0)
        {
          uint64_t v6 = *v2;
          if (v6 == 95) {
            goto LABEL_17;
          }
          goto LABEL_15;
        }
        goto LABEL_19;
      }
    }
    uint64_t v7 = *(v4 - 1);
    uint64_t v8 = *v4;
    if (v7 == 95
      || (v7 & 0x80) == 0 && (*(_DWORD *)(*(void *)(*(void *)(result + 24) + 16) + 4 * v7) & 0x500) != 0)
    {
      int v9 = 1;
      if (v8 == 95) {
        goto LABEL_24;
      }
    }
    else
    {
      int v9 = 0;
      if (v8 == 95) {
        goto LABEL_24;
      }
    }
    if ((v8 & 0x80) != 0 || (*(_DWORD *)(*(void *)(*(void *)(result + 24) + 16) + 4 * v8) & 0x500) == 0)
    {
      if (*(unsigned char *)(result + 40) == (v9 != 0)) {
        goto LABEL_20;
      }
      goto LABEL_27;
    }
LABEL_24:
    if (*(unsigned char *)(result + 40) != (v9 != 1)) {
      goto LABEL_27;
    }
    goto LABEL_20;
  }
  if ((*(unsigned char *)(a2 + 88) & 8) == 0)
  {
    uint64_t v6 = *(v3 - 1);
    if (v6 == 95) {
      goto LABEL_17;
    }
LABEL_15:
    if ((v6 & 0x80) == 0 && (*(_DWORD *)(*(void *)(*(void *)(result + 24) + 16) + 4 * v6) & 0x500) != 0)
    {
LABEL_17:
      if (*(unsigned char *)(result + 40) != 1) {
        goto LABEL_27;
      }
LABEL_20:
      *(_DWORD *)a2 = -993;
      *(void *)(a2 + 8sub_1B4BC92E4(&a9, 0) = 0;
      return result;
    }
  }
LABEL_19:
  if (!*(unsigned char *)(result + 40)) {
    goto LABEL_20;
  }
LABEL_27:
  uint64_t v10 = *(void *)(result + 8);
  *(_DWORD *)a2 = -994;
  *(void *)(a2 + 8sub_1B4BC92E4(&a9, 0) = v10;
  return result;
}

std::locale *sub_1B4C1F8CC(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1F0D55790;
  uint64_t v2 = a1 + 2;
  int locale = (std::__shared_weak_count *)a1[8].__locale_;
  if (locale && !atomic_fetch_add(&locale->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))locale->__on_zero_shared)(locale);
    std::__shared_weak_count::__release_weak(locale);
    std::locale::~locale(v2);
    a1->__locale_ = (std::locale::__imp *)&unk_1F0D55928;
    BOOL v4 = a1[1].__locale_;
    if (!v4) {
      return a1;
    }
    goto LABEL_4;
  }
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&unk_1F0D55928;
  BOOL v4 = a1[1].__locale_;
  if (v4) {
LABEL_4:
  }
    (*(void (**)(std::locale::__imp *))(*(void *)v4 + 8))(v4);
  return a1;
}

void sub_1B4C1F9E0(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1F0D55790;
  uint64_t v2 = a1 + 2;
  int locale = (std::__shared_weak_count *)a1[8].__locale_;
  if (locale && !atomic_fetch_add(&locale->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))locale->__on_zero_shared)(locale);
    std::__shared_weak_count::__release_weak(locale);
    std::locale::~locale(v2);
    a1->__locale_ = (std::locale::__imp *)&unk_1F0D55928;
    BOOL v4 = a1[1].__locale_;
    if (!v4)
    {
LABEL_5:
      JUMPOUT(0x1BA9929C0);
    }
  }
  else
  {
    std::locale::~locale(a1 + 2);
    a1->__locale_ = (std::locale::__imp *)&unk_1F0D55928;
    BOOL v4 = a1[1].__locale_;
    if (!v4) {
      goto LABEL_5;
    }
  }
  (*(void (**)(std::locale::__imp *))(*(void *)v4 + 8))(v4);
  goto LABEL_5;
}

void sub_1B4C1FB14(uint64_t a1, uint64_t a2)
{
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  char v25 = 0;
  long long v26 = 0uLL;
  char v27 = 0;
  char v28 = 0;
  uint64_t v29 = 0;
  std::string __p = 0;
  uint64_t v19 = 0;
  unint64_t v4 = (*(_DWORD *)(a1 + 44) + 1);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 24);
  uint64_t v20 = 0;
  *(void *)&long long v21 = v5;
  *((void *)&v21 + 1) = v5;
  char v22 = 0;
  sub_1B4C2017C((uint64_t)&__p, v4, &v21);
  uint64_t v23 = v6;
  uint64_t v24 = v6;
  char v25 = 0;
  long long v26 = v21;
  char v27 = v22;
  uint64_t v29 = v6;
  char v28 = 1;
  uint64_t v7 = *(void *)(a2 + 16);
  if (*(unsigned char *)(a2 + 92)) {
    BOOL v8 = v7 == *(void *)(a2 + 8);
  }
  else {
    BOOL v8 = 0;
  }
  char v9 = v8;
  if (*(unsigned __int8 *)(a1 + 84) == sub_1B4C1FCB8(a1 + 16, v7, *(void *)(a2 + 24), (uint64_t *)&__p, *(_DWORD *)(a2 + 88) & 0xFBF | 0x40u, v9))
  {
    *(_DWORD *)a2 = -993;
    *(void *)(a2 + 8sub_1B4BC92E4(&a9, 0) = 0;
    uint64_t v10 = (char *)__p;
    goto LABEL_13;
  }
  *(_DWORD *)a2 = -994;
  *(void *)(a2 + 8sub_1B4BC92E4(&a9, 0) = *(void *)(a1 + 8);
  uint64_t v10 = (char *)__p;
  unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((v19 - (uint64_t)__p) >> 3);
  if (v11 < 2)
  {
LABEL_13:
    if (!v10) {
      return;
    }
    goto LABEL_14;
  }
  int v12 = 0;
  int v13 = *(_DWORD *)(a1 + 80);
  uint64_t v14 = *(void *)(a2 + 32);
  unint64_t v15 = 1;
  do
  {
    BOOL v16 = &v10[24 * v15];
    uint64_t v17 = v14 + 24 * (v13 + v12);
    *(_OWORD *)uint64_t v17 = *(_OWORD *)v16;
    *(unsigned char *)(v17 + 16) = v16[16];
    unint64_t v15 = (v12 + 2);
    ++v12;
  }
  while (v11 > v15);
LABEL_14:
  operator delete(v10);
}

void sub_1B4C1FC9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1B4C1FCB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, int a5, char a6)
{
  long long v48 = 0;
  BOOL v49 = 0;
  unint64_t v50 = 0;
  uint64_t v6 = *(void *)(a1 + 40);
  if (v6)
  {
    *(void *)&long long v46 = a3;
    *((void *)&v46 + 1) = a3;
    char v47 = 0;
    *(_DWORD *)uint64_t v43 = 0;
    memset(&v43[8], 0, 48);
    *(_OWORD *)std::string __p = 0u;
    memset(v45, 0, 21);
    int v13 = sub_1B4C20484((void **)&v48, (uint64_t)v43);
    BOOL v49 = v13;
    if (__p[0]) {
      operator delete(__p[0]);
    }
    if (*(void *)&v43[32]) {
      operator delete(*(void **)&v43[32]);
    }
    uint64_t v14 = *((void *)v13 - 8);
    *((_DWORD *)v13 - 24) = 0;
    *((void *)v13 - 11) = a2;
    *((void *)v13 - 1sub_1B4BC92E4(&a9, 0) = a2;
    *((void *)v13 - 9) = a3;
    unint64_t v15 = *(unsigned int *)(a1 + 28);
    unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((*((void *)v13 - 7) - v14) >> 3);
    if (v15 <= v16)
    {
      if (v15 < v16) {
        *((void *)v13 - 7) = v14 + 24 * v15;
      }
    }
    else
    {
      sub_1B4C20654((void **)v13 - 8, v15 - v16, &v46);
    }
    uint64_t v17 = *((void *)v13 - 5);
    unint64_t v18 = *(unsigned int *)(a1 + 32);
    unint64_t v19 = (*((void *)v13 - 4) - v17) >> 4;
    if (v18 <= v19)
    {
      if (v18 < v19) {
        *((void *)v13 - 4) = v17 + 16 * v18;
      }
    }
    else
    {
      sub_1B4C20804((char **)v13 - 5, v18 - v19);
    }
    *((void *)v13 - 2) = v6;
    *((_DWORD *)v13 - 2) = a5;
    *(v13 - 4) = a6;
    unsigned int v20 = 1;
    while (2)
    {
      if ((v20 & 0xFFF) == 0 && (int)(v20 >> 12) >= (int)a3 - (int)a2) {
        sub_1B4C20350();
      }
      uint64_t v22 = *((void *)v13 - 2);
      if (v22) {
        (*(void (**)(uint64_t, char *))(*(void *)v22 + 16))(v22, v13 - 96);
      }
      switch(*((_DWORD *)v13 - 24))
      {
        case 0xFFFFFC18:
          uint64_t v23 = *((void *)v13 - 10);
          if ((a5 & 0x20) != 0 && v23 == a2 || (a5 & 0x1000) != 0 && v23 != a3) {
            goto LABEL_26;
          }
          uint64_t v34 = *a4;
          *(void *)uint64_t v34 = a2;
          *(void *)(v34 + 8) = v23;
          *(unsigned char *)(v34 + 16) = 1;
          uint64_t v35 = *((void *)v13 - 8);
          uint64_t v36 = *((void *)v13 - 7) - v35;
          if (v36)
          {
            unint64_t v37 = 0xAAAAAAAAAAAAAAABLL * (v36 >> 3);
            int64_t v38 = (unsigned char *)(v35 + 16);
            unsigned int v39 = 1;
            do
            {
              uint64_t v40 = v34 + 24 * v39;
              *(_OWORD *)uint64_t v40 = *((_OWORD *)v38 - 1);
              char v41 = *v38;
              v38 += 24;
              *(unsigned char *)(v40 + 16) = v41;
            }
            while (v37 > v39++);
          }
          uint64_t v6 = 1;
          long long v21 = v48;
          if (!v48) {
            return v6;
          }
          goto LABEL_37;
        case 0xFFFFFC1D:
        case 0xFFFFFC1E:
        case 0xFFFFFC21:
          goto LABEL_16;
        case 0xFFFFFC1F:
LABEL_26:
          uint64_t v24 = v49;
          char v25 = (void *)*((void *)v49 - 5);
          if (v25)
          {
            *((void *)v49 - 4) = v25;
            operator delete(v25);
          }
          long long v26 = (void *)*((void *)v24 - 8);
          if (v26)
          {
            *((void *)v24 - 7) = v26;
            operator delete(v26);
          }
          BOOL v49 = v24 - 96;
          goto LABEL_16;
        case 0xFFFFFC20:
          sub_1B4C2093C((uint64_t)v43, (long long *)v13 - 6);
          (*(void (**)(void, uint64_t, char *))(**((void **)v13 - 2) + 24))(*((void *)v13 - 2), 1, v13 - 96);
          (*(void (**)(void, void, unsigned char *))(*(void *)v45[1] + 24))(v45[1], 0, v43);
          char v27 = v49;
          if ((unint64_t)v49 >= v50)
          {
            BOOL v49 = sub_1B4C20484((void **)&v48, (uint64_t)v43);
            if (__p[0])
            {
              __p[1] = __p[0];
              operator delete(__p[0]);
            }
          }
          else
          {
            long long v28 = *(_OWORD *)&v43[16];
            *(_OWORD *)BOOL v49 = *(_OWORD *)v43;
            *((_OWORD *)v27 + 1) = v28;
            *((void *)v27 + 4) = 0;
            *((void *)v27 + 5) = 0;
            *((void *)v27 + 6) = 0;
            *((void *)v27 + 7) = 0;
            *((_OWORD *)v27 + 2) = *(_OWORD *)&v43[32];
            *((void *)v27 + 6) = *(void *)&v43[48];
            memset(&v43[32], 0, 24);
            *((void *)v27 + 8) = 0;
            *((void *)v27 + 9) = 0;
            *(_OWORD *)(v27 + 56) = *(_OWORD *)__p;
            *((void *)v27 + 9) = v45[0];
            __p[0] = 0;
            __p[1] = 0;
            v45[0] = 0;
            uint64_t v29 = v45[1];
            *(void *)(v27 + 85) = *(void *)((char *)&v45[1] + 5);
            *((void *)v27 + 1sub_1B4BC92E4(&a9, 0) = v29;
            BOOL v49 = v27 + 96;
          }
          if (*(void *)&v43[32])
          {
            *(void *)&v43[40] = *(void *)&v43[32];
            operator delete(*(void **)&v43[32]);
          }
LABEL_16:
          long long v21 = v48;
          int v13 = v49;
          ++v20;
          if (v48 != v49) {
            continue;
          }
          uint64_t v6 = 0;
          if (v48)
          {
LABEL_37:
            for (uint64_t i = v49; i != v21; i -= 96)
            {
              BOOL v31 = (void *)*((void *)i - 5);
              if (v31)
              {
                *((void *)i - 4) = v31;
                operator delete(v31);
              }
              unint64_t v32 = (void *)*((void *)i - 8);
              if (v32)
              {
                *((void *)i - 7) = v32;
                operator delete(v32);
              }
            }
            operator delete(v21);
          }
          break;
        default:
          sub_1B4C203A8();
      }
      break;
    }
  }
  return v6;
}

void sub_1B4C200D0(_Unwind_Exception *a1)
{
  sub_1B4C20400((void **)(v1 - 112));
  _Unwind_Resume(a1);
}

void sub_1B4C200E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1B4C2030C((uint64_t *)va);
  sub_1B4C20400((void **)(v2 - 112));
  _Unwind_Resume(a1);
}

void sub_1B4C2012C(_Unwind_Exception *a1)
{
  sub_1B4C20400((void **)(v1 - 112));
  _Unwind_Resume(a1);
}

void sub_1B4C20140(_Unwind_Exception *a1)
{
  sub_1B4C20400((void **)(v1 - 112));
  _Unwind_Resume(a1);
}

void *sub_1B4C2017C(uint64_t a1, unint64_t a2, long long *a3)
{
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t result = *(void **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - (uint64_t)result) >> 3) < a2)
  {
    if (result)
    {
      *(void *)(a1 + 8) = result;
      operator delete(result);
      uint64_t v6 = 0;
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
    }
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 3);
    uint64_t v9 = 2 * v8;
    if (2 * v8 <= a2) {
      uint64_t v9 = a2;
    }
    if (v8 >= 0x555555555555555) {
      unint64_t v10 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v10 = v9;
    }
    if (v10 > 0xAAAAAAAAAAAAAAALL) {
      sub_1B4C0E0BC();
    }
    uint64_t v11 = 3 * v10;
    uint64_t result = operator new(24 * v10);
    *(void *)a1 = result;
    *(void *)(a1 + 8) = result;
    *(void *)(a1 + 16) = &result[v11];
    uint64_t v12 = 24 * a2;
    int v13 = &result[3 * a2];
    do
    {
      *(_OWORD *)uint64_t result = *a3;
      result[2] = *((void *)a3 + 2);
      result += 3;
      v12 -= 24;
    }
    while (v12);
    goto LABEL_24;
  }
  uint64_t v14 = *(void *)(a1 + 8);
  unint64_t v15 = (v14 - (uint64_t)result) / 24;
  if (v15 >= a2) {
    uint64_t v16 = a2;
  }
  else {
    uint64_t v16 = (v14 - (uint64_t)result) / 24;
  }
  if (v16)
  {
    uint64_t v17 = result;
    do
    {
      *(_OWORD *)uint64_t v17 = *a3;
      *((unsigned char *)v17 + 16) = *((unsigned char *)a3 + 16);
      v17 += 3;
      --v16;
    }
    while (v16);
  }
  if (a2 <= v15)
  {
    int v13 = &result[3 * a2];
LABEL_24:
    *(void *)(a1 + 8) = v13;
    return result;
  }
  uint64_t v18 = v14 + 24 * (a2 - v15);
  uint64_t v19 = 24 * a2 - 24 * v15;
  do
  {
    long long v20 = *a3;
    *(void *)(v14 + 16) = *((void *)a3 + 2);
    *(_OWORD *)uint64_t v14 = v20;
    v14 += 24;
    v19 -= 24;
  }
  while (v19);
  *(void *)(a1 + 8) = v18;
  return result;
}

void *sub_1B4C2030C(void *a1)
{
  uint64_t v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  int v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_1B4C20350()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1BA992590](exception, 12);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1B4C20394(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1B4C203A8()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1BA992590](exception, 16);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1B4C203EC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void **sub_1B4C20400(void **a1)
{
  uint64_t v2 = (char *)*a1;
  if (*a1)
  {
    int v3 = (char *)a1[1];
    unint64_t v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = (void *)*((void *)v3 - 5);
        if (v5)
        {
          *((void *)v3 - 4) = v5;
          operator delete(v5);
        }
        uint64_t v6 = (void *)*((void *)v3 - 8);
        if (v6)
        {
          *((void *)v3 - 7) = v6;
          operator delete(v6);
        }
        v3 -= 96;
      }
      while (v3 != v2);
      unint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

char *sub_1B4C20484(void **a1, uint64_t a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 5);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 > 0x2AAAAAAAAAAAAAALL) {
    sub_1B4C0E0BC();
  }
  if (0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 5) > v3) {
    unint64_t v3 = 0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 5);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 5) >= 0x155555555555555) {
    unint64_t v6 = 0x2AAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v6 = v3;
  }
  if (v6)
  {
    if (v6 > 0x2AAAAAAAAAAAAAALL) {
      sub_1B4BB2D38();
    }
    uint64_t v7 = (char *)operator new(96 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  long long v8 = *(_OWORD *)(a2 + 16);
  uint64_t v9 = &v7[96 * v2];
  *(_OWORD *)uint64_t v9 = *(_OWORD *)a2;
  *((_OWORD *)v9 + 1) = v8;
  unint64_t v10 = &v7[96 * v6];
  *((_OWORD *)v9 + 2) = *(_OWORD *)(a2 + 32);
  *((void *)v9 + 6) = *(void *)(a2 + 48);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 4sub_1B4BC92E4(&a9, 0) = 0;
  *(void *)(v9 + 85) = *(void *)(a2 + 85);
  uint64_t v11 = *(void *)(a2 + 72);
  uint64_t v12 = *(void *)(a2 + 80);
  *((void *)v9 + 9) = 0;
  *((void *)v9 + 1sub_1B4BC92E4(&a9, 0) = v12;
  *(_OWORD *)(v9 + 56) = *(_OWORD *)(a2 + 56);
  *((void *)v9 + 9) = v11;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  int v13 = v9 + 96;
  uint64_t v14 = (char *)*a1;
  unint64_t v15 = (char *)a1[1];
  if (v15 == *a1)
  {
    *a1 = v9;
    a1[1] = v13;
    a1[2] = v10;
  }
  else
  {
    uint64_t v16 = 0;
    do
    {
      uint64_t v17 = &v9[v16];
      uint64_t v18 = &v15[v16];
      long long v19 = *(_OWORD *)&v15[v16 - 80];
      *((_OWORD *)v17 - 6) = *(_OWORD *)&v15[v16 - 96];
      *((_OWORD *)v17 - 5) = v19;
      *((void *)v17 - 7) = 0;
      *((void *)v17 - 6) = 0;
      *((_OWORD *)v17 - 4) = *(_OWORD *)&v15[v16 - 64];
      *((void *)v17 - 6) = *(void *)&v15[v16 - 48];
      *((void *)v18 - 8) = 0;
      *((void *)v18 - 7) = 0;
      *((void *)v18 - 6) = 0;
      *((void *)v17 - 4) = 0;
      *((void *)v17 - 3) = 0;
      *(_OWORD *)(v17 - 4sub_1B4BC92E4(&a9, 0) = *(_OWORD *)&v15[v16 - 40];
      *((void *)v17 - 3) = *(void *)&v15[v16 - 24];
      *((void *)v18 - 5) = 0;
      *((void *)v18 - 4) = 0;
      *((void *)v18 - 3) = 0;
      uint64_t v20 = *(void *)&v15[v16 - 16];
      *(void *)(v17 - 11) = *(void *)&v15[v16 - 11];
      *((void *)v17 - 2) = v20;
      v16 -= 96;
    }
    while (&v15[v16] != v14);
    unint64_t v15 = (char *)*a1;
    long long v21 = (char *)a1[1];
    *a1 = &v9[v16];
    a1[1] = v13;
    a1[2] = v10;
    while (v21 != v15)
    {
      uint64_t v22 = (void *)*((void *)v21 - 5);
      if (v22)
      {
        *((void *)v21 - 4) = v22;
        operator delete(v22);
      }
      uint64_t v23 = (void *)*((void *)v21 - 8);
      if (v23)
      {
        *((void *)v21 - 7) = v23;
        operator delete(v23);
      }
      v21 -= 96;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v13;
}

void sub_1B4C20654(void **a1, unint64_t a2, long long *a3)
{
  uint64_t v7 = (char *)a1[1];
  unint64_t v6 = a1[2];
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      int v13 = &v7[24 * a2];
      uint64_t v14 = 24 * a2;
      do
      {
        long long v15 = *a3;
        *((void *)v7 + 2) = *((void *)a3 + 2);
        *(_OWORD *)uint64_t v7 = v15;
        v7 += 24;
        v14 -= 24;
      }
      while (v14);
      uint64_t v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (unsigned char *)*a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL) {
      sub_1B4C0E0BC();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v6 - (unsigned char *)*a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11)
    {
      if (v11 > 0xAAAAAAAAAAAAAAALL) {
        sub_1B4BB2D38();
      }
      uint64_t v12 = (char *)operator new(24 * v11);
    }
    else
    {
      uint64_t v12 = 0;
    }
    uint64_t v16 = &v12[24 * v8];
    uint64_t v17 = 24 * a2;
    uint64_t v18 = &v16[24 * a2];
    long long v19 = v16;
    do
    {
      long long v20 = *a3;
      *((void *)v19 + 2) = *((void *)a3 + 2);
      *(_OWORD *)long long v19 = v20;
      v19 += 24;
      v17 -= 24;
    }
    while (v17);
    long long v21 = (char *)*a1;
    if (v7 != *a1)
    {
      do
      {
        long long v22 = *(_OWORD *)(v7 - 24);
        *((void *)v16 - 1) = *((void *)v7 - 1);
        *(_OWORD *)(v16 - 24) = v22;
        v16 -= 24;
        v7 -= 24;
      }
      while (v7 != v21);
      uint64_t v7 = (char *)*a1;
    }
    *a1 = v16;
    a1[1] = v18;
    a1[2] = &v12[24 * v11];
    if (v7)
    {
      operator delete(v7);
    }
  }
}

void sub_1B4C20804(char **a1, unint64_t a2)
{
  uint64_t v5 = a1[1];
  unint64_t v4 = a1[2];
  if (a2 <= (v4 - v5) >> 4)
  {
    if (a2)
    {
      uint64_t v12 = 16 * a2;
      bzero(a1[1], 16 * a2);
      v5 += v12;
    }
    a1[1] = v5;
  }
  else
  {
    unint64_t v6 = *a1;
    uint64_t v7 = (v5 - *a1) >> 4;
    unint64_t v8 = v7 + a2;
    if ((v7 + a2) >> 60) {
      sub_1B4C0E0BC();
    }
    uint64_t v9 = v4 - v6;
    if (v9 >> 3 > v8) {
      unint64_t v8 = v9 >> 3;
    }
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v10 = v8;
    }
    if (v10)
    {
      if (v10 >> 60) {
        sub_1B4BB2D38();
      }
      unint64_t v11 = (char *)operator new(16 * v10);
    }
    else
    {
      unint64_t v11 = 0;
    }
    int v13 = &v11[16 * v7];
    size_t v14 = 16 * a2;
    long long v15 = &v11[16 * v10];
    bzero(v13, v14);
    uint64_t v16 = &v13[v14];
    if (v5 != v6)
    {
      do
      {
        *((_OWORD *)v13 - 1) = *((_OWORD *)v5 - 1);
        v13 -= 16;
        v5 -= 16;
      }
      while (v5 != v6);
      uint64_t v5 = *a1;
    }
    *a1 = v13;
    a1[1] = v16;
    a1[2] = v15;
    if (v5)
    {
      operator delete(v5);
    }
  }
}

uint64_t sub_1B4C2093C(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  long long v5 = a2[1];
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v5;
  *(void *)(a1 + 4sub_1B4BC92E4(&a9, 0) = 0;
  *(void *)(a1 + 48) = 0;
  uint64_t v7 = (unsigned char *)*((void *)a2 + 4);
  unint64_t v6 = (unsigned char *)*((void *)a2 + 5);
  int64_t v8 = v6 - v7;
  if (v6 != v7)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v8 >> 3) >= 0xAAAAAAAAAAAAAABLL) {
      sub_1B4C0E0BC();
    }
    uint64_t v9 = (char *)operator new(v8);
    *(void *)(a1 + 32) = v9;
    *(void *)(a1 + 4sub_1B4BC92E4(&a9, 0) = v9;
    *(void *)(a1 + 48) = &v9[8 * (v8 >> 3)];
    size_t v10 = 24 * ((v8 - 24) / 0x18uLL) + 24;
    memcpy(v9, v7, v10);
    *(void *)(a1 + 4sub_1B4BC92E4(&a9, 0) = &v9[v10];
  }
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  uint64_t v12 = (unsigned char *)*((void *)a2 + 7);
  unint64_t v11 = (unsigned char *)*((void *)a2 + 8);
  uint64_t v13 = v11 - v12;
  if (v11 != v12)
  {
    if (v13 < 0) {
      sub_1B4C0E0BC();
    }
    size_t v14 = (char *)operator new(v11 - v12);
    *(void *)(a1 + 56) = v14;
    *(void *)(a1 + 64) = v14;
    *(void *)(a1 + 72) = &v14[16 * (v13 >> 4)];
    size_t v15 = v13 & 0xFFFFFFFFFFFFFFF0;
    memcpy(v14, v12, v15);
    *(void *)(a1 + 64) = &v14[v15];
  }
  uint64_t v16 = *((void *)a2 + 10);
  *(void *)(a1 + 85) = *(void *)((char *)a2 + 85);
  *(void *)(a1 + 8sub_1B4BC92E4(&a9, 0) = v16;
  return a1;
}

void sub_1B4C20A7C(_Unwind_Exception *exception_object)
{
  long long v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 64) = v5;
    operator delete(v5);
  }
  unint64_t v6 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 4sub_1B4BC92E4(&a9, 0) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

unsigned char *sub_1B4C20AB0(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  if (a2 != a3 && *a2 == 91)
  {
    if (a2 + 1 != a3) {
      operator new();
    }
    sub_1B4C24828();
  }
  return a2;
}

void sub_1B4C21A40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (a36 < 0) {
    operator delete(__p);
  }
  if (a43 < 0) {
    operator delete(a38);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B4C21C24()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1BA992590](exception, 11);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1B4C21C68(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *sub_1B4C21C7C(void *a1)
{
  *a1 = &unk_1F0D55928;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void sub_1B4C21CE8(void *a1)
{
  *a1 = &unk_1F0D55928;
  uint64_t v1 = a1[1];
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  JUMPOUT(0x1BA9929C0);
}

void sub_1B4C21D74()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1BA992590](exception, 3);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1B4C21DB8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_1B4C21DCC(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, std::string *this)
{
  long long v4 = a2;
  if (a2 == a3) {
    return v4;
  }
  switch(*a2)
  {
    case '0':
      if (!this) {
        goto LABEL_50;
      }
      std::string::operator=(this, 0);
      return v4 + 1;
    case 'c':
      if (a2 + 1 == a3 || (char)a2[1] < 65) {
        goto LABEL_57;
      }
      unsigned int v7 = a2[1];
      if (v7 >= 0x5B && (v7 - 97) > 0x19u) {
        goto LABEL_57;
      }
      if (!this) {
        sub_1B4C222B8(a1);
      }
      std::string::operator=(this, v7 & 0x1F);
      v4 += 2;
      return v4;
    case 'f':
      if (!this) {
        sub_1B4C222B8(a1);
      }
      std::string::operator=(this, 12);
      return v4 + 1;
    case 'n':
      if (!this) {
        sub_1B4C222B8(a1);
      }
      std::string::operator=(this, 10);
      return v4 + 1;
    case 'r':
      if (!this) {
        sub_1B4C222B8(a1);
      }
      std::string::operator=(this, 13);
      return v4 + 1;
    case 't':
      if (!this) {
        sub_1B4C222B8(a1);
      }
      std::string::operator=(this, 9);
      return v4 + 1;
    case 'u':
      if (a2 + 1 != a3)
      {
        int v9 = a2[1];
        if ((v9 & 0xF8) == 0x30 || (v9 & 0xFE) == 0x38 || (v9 | 0x20u) - 97 < 6)
        {
          long long v4 = a2 + 2;
          if (a2 + 2 != a3)
          {
            int v10 = *v4;
            if ((v10 & 0xF8) == 0x30 || (v10 & 0xFE) == 0x38 || (v10 | 0x20u) - 97 < 6) {
              goto LABEL_35;
            }
          }
        }
      }
      goto LABEL_57;
    case 'v':
      if (!this) {
        sub_1B4C222B8(a1);
      }
      std::string::operator=(this, 11);
      return v4 + 1;
    case 'x':
LABEL_35:
      if (v4 + 1 == a3) {
        goto LABEL_57;
      }
      unsigned __int8 v11 = v4[1];
      char v12 = -48;
      if ((v11 & 0xF8) == 0x30 || (v11 & 0xFE) == 0x38) {
        goto LABEL_40;
      }
      v11 |= 0x20u;
      if ((v11 - 97) >= 6u) {
        goto LABEL_57;
      }
      char v12 = -87;
LABEL_40:
      if (v4 + 2 == a3) {
        goto LABEL_57;
      }
      unsigned __int8 v13 = v4[2];
      char v14 = -48;
      if ((v13 & 0xF8) != 0x30 && (v13 & 0xFE) != 0x38)
      {
        v13 |= 0x20u;
        if ((v13 - 97) >= 6u) {
LABEL_57:
        }
          sub_1B4C21D74();
        char v14 = -87;
      }
      if (!this) {
        sub_1B4C222B8(a1);
      }
      std::string::operator=(this, v13 + 16 * (v11 + v12) + v14);
      uint64_t result = v4 + 3;
      break;
    default:
      uint64_t v6 = *a2;
      if (v6 == 95
        || (v6 & 0x80) == 0 && (*(_DWORD *)(*(void *)(*(void *)(a1 + 8) + 16) + 4 * v6) & 0x500) != 0)
      {
        goto LABEL_57;
      }
      if (!this) {
LABEL_50:
      }
        sub_1B4C222B8(a1);
      std::string::operator=(this, v6);
      return v4 + 1;
  }
  return result;
}

void sub_1B4C222B8(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 24);
  if ((v1 & 1) == 0)
  {
    if ((v1 & 8) == 0) {
      operator new();
    }
    operator new();
  }
  operator new();
}

void sub_1B4C2242C(_Unwind_Exception *a1)
{
  std::locale::~locale(v2);
  *int v1 = &unk_1F0D55928;
  uint64_t v4 = v1[1];
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  MEMORY[0x1BA9929C0](v1, 0x10E1C4010F5D982);
  _Unwind_Resume(a1);
}

void sub_1B4C224A4()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1BA992590](exception, 4);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1B4C224E8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1B4C224FC(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 24);
  if ((v1 & 1) == 0)
  {
    if ((v1 & 8) == 0) {
      operator new();
    }
    operator new();
  }
  operator new();
}

std::locale *sub_1B4C2262C(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1F0D55A10;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&unk_1F0D55928;
  int locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

void sub_1B4C226B8(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1F0D55A10;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&unk_1F0D55928;
  int locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  JUMPOUT(0x1BA9929C0);
}

uint64_t sub_1B4C22764(uint64_t result, uint64_t a2)
{
  unint64_t v3 = *(char **)(a2 + 16);
  if (v3 == *(char **)(a2 + 24)
    || (uint64_t v4 = result,
        uint64_t result = (*(uint64_t (**)(void, void))(**(void **)(result + 24) + 40))(*(void *)(result + 24), *v3), *(unsigned __int8 *)(v4 + 40) != result))
  {
    *(_DWORD *)a2 = -993;
    *(void *)(a2 + 8sub_1B4BC92E4(&a9, 0) = 0;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    ++*(void *)(a2 + 16);
    *(void *)(a2 + 8sub_1B4BC92E4(&a9, 0) = *(void *)(v4 + 8);
  }
  return result;
}

std::locale *sub_1B4C22804(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1F0D55AA0;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&unk_1F0D55928;
  int locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

void sub_1B4C22890(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1F0D55AA0;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&unk_1F0D55928;
  int locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  JUMPOUT(0x1BA9929C0);
}

uint64_t sub_1B4C2293C(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) || *v2 != *(unsigned __int8 *)(result + 40))
  {
    *(_DWORD *)a2 = -993;
    *(void *)(a2 + 8sub_1B4BC92E4(&a9, 0) = 0;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(void *)(a2 + 16) = v2 + 1;
    *(void *)(a2 + 8sub_1B4BC92E4(&a9, 0) = *(void *)(result + 8);
  }
  return result;
}

void *sub_1B4C22984(void *a1)
{
  *a1 = &unk_1F0D55928;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void sub_1B4C229F0(void *a1)
{
  *a1 = &unk_1F0D55928;
  uint64_t v1 = a1[1];
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  JUMPOUT(0x1BA9929C0);
}

uint64_t sub_1B4C22A7C(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) || *v2 != *(unsigned __int8 *)(result + 16))
  {
    *(_DWORD *)a2 = -993;
    *(void *)(a2 + 8sub_1B4BC92E4(&a9, 0) = 0;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(void *)(a2 + 16) = v2 + 1;
    *(void *)(a2 + 8sub_1B4BC92E4(&a9, 0) = *(void *)(result + 8);
  }
  return result;
}

std::locale *sub_1B4C22AC4(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1F0D558F8;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&unk_1F0D55928;
  int locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

void sub_1B4C22B50(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1F0D558F8;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&unk_1F0D55928;
  int locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  JUMPOUT(0x1BA9929C0);
}

uint64_t sub_1B4C22BFC(uint64_t result, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 32) + 24 * (*(_DWORD *)(result + 40) - 1);
  if (!*(unsigned char *)(v3 + 16)
    || (v4 = *(void *)(v3 + 8) - *(void *)v3, uint64_t v5 = *(void *)(a2 + 16), *(void *)(a2 + 24) - v5 < v4))
  {
LABEL_3:
    *(_DWORD *)a2 = -993;
    *(void *)(a2 + 8sub_1B4BC92E4(&a9, 0) = 0;
    return result;
  }
  uint64_t v6 = result;
  if (v4 >= 1)
  {
    uint64_t v7 = 0;
    while (1)
    {
      int v8 = (*(uint64_t (**)(void, void))(**(void **)(v6 + 24) + 40))(*(void *)(v6 + 24), *(char *)(*(void *)v3 + v7));
      uint64_t result = (*(uint64_t (**)(void, void))(**(void **)(v6 + 24) + 40))(*(void *)(v6 + 24), *(char *)(*(void *)(a2 + 16) + v7));
      if (v8 != result) {
        goto LABEL_3;
      }
      if (v4 == ++v7)
      {
        uint64_t v5 = *(void *)(a2 + 16);
        break;
      }
    }
  }
  *(_DWORD *)a2 = -994;
  *(void *)(a2 + 16) = v5 + v4;
  *(void *)(a2 + 8sub_1B4BC92E4(&a9, 0) = *(void *)(v6 + 8);
  return result;
}

std::locale *sub_1B4C22D28(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1F0D559E0;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&unk_1F0D55928;
  int locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

void sub_1B4C22DB4(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1F0D559E0;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&unk_1F0D55928;
  int locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  JUMPOUT(0x1BA9929C0);
}

uint64_t sub_1B4C22E60(uint64_t result, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(result + 40) - 1;
  uint64_t v3 = *(void *)(a2 + 32);
  if (!*(unsigned char *)(v3 + 24 * v2 + 16)
    || (uint64_t v4 = (unsigned __int8 **)(v3 + 24 * v2),
        uint64_t v5 = *v4,
        uint64_t v6 = v4[1] - *v4,
        uint64_t v7 = *(void *)(a2 + 16),
        *(void *)(a2 + 24) - v7 < v6))
  {
LABEL_3:
    *(_DWORD *)a2 = -993;
    *(void *)(a2 + 8sub_1B4BC92E4(&a9, 0) = 0;
    return result;
  }
  if (v6 >= 1)
  {
    uint64_t v8 = v6;
    int v9 = *(unsigned __int8 **)(a2 + 16);
    do
    {
      int v11 = *v5++;
      int v10 = v11;
      int v12 = *v9++;
      if (v10 != v12) {
        goto LABEL_3;
      }
    }
    while (--v8);
  }
  *(_DWORD *)a2 = -994;
  *(void *)(a2 + 16) = v7 + v6;
  *(void *)(a2 + 8sub_1B4BC92E4(&a9, 0) = *(void *)(result + 8);
  return result;
}

void *sub_1B4C22EF0(void *a1)
{
  *a1 = &unk_1F0D55928;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void sub_1B4C22F5C(void *a1)
{
  *a1 = &unk_1F0D55928;
  uint64_t v1 = a1[1];
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  JUMPOUT(0x1BA9929C0);
}

unsigned int *sub_1B4C22FE8(unsigned int *result, uint64_t a2)
{
  unint64_t v2 = result[4];
  uint64_t v3 = *(void *)(a2 + 32);
  if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(a2 + 40) - v3) >> 3) < v2) {
    sub_1B4C224A4();
  }
  unsigned int v5 = v2 - 1;
  if (*(unsigned char *)(v3 + 24 * v5 + 16)
    && (uint64_t v6 = result,
        uint64_t v7 = v3 + 24 * v5,
        uint64_t result = *(unsigned int **)v7,
        int64_t v8 = *(void *)(v7 + 8) - *(void *)v7,
        uint64_t v9 = *(void *)(a2 + 16),
        *(void *)(a2 + 24) - v9 >= v8)
    && (uint64_t result = (unsigned int *)memcmp(result, *(const void **)(a2 + 16), v8), !result))
  {
    *(_DWORD *)a2 = -994;
    *(void *)(a2 + 16) = v9 + v8;
    *(void *)(a2 + 8sub_1B4BC92E4(&a9, 0) = *((void *)v6 + 1);
  }
  else
  {
    *(_DWORD *)a2 = -993;
    *(void *)(a2 + 8sub_1B4BC92E4(&a9, 0) = 0;
  }
  return result;
}

void sub_1B4C230B8(uint64_t a1, uint64_t a2)
{
  char v2 = a2;
  if (!*(unsigned char *)(a1 + 169))
  {
    uint64_t v6 = (void *)(a1 + 40);
    unsigned int v5 = *(unsigned char **)(a1 + 48);
    unint64_t v16 = *(void *)(a1 + 56);
    if (*(unsigned char *)(a1 + 170))
    {
      if ((unint64_t)v5 < v16) {
        goto LABEL_24;
      }
      uint64_t v17 = (unsigned char *)*v6;
      unint64_t v18 = (unint64_t)&v5[-*v6];
      unint64_t v19 = v18 + 1;
      if ((uint64_t)(v18 + 1) >= 0)
      {
        unint64_t v20 = v16 - (void)v17;
        if (2 * v20 > v19) {
          unint64_t v19 = 2 * v20;
        }
        if (v20 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v21 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v21 = v19;
        }
        if (v21)
        {
          int v12 = operator new(v21);
          unsigned __int8 v13 = &v12[v18];
          char v14 = &v12[v21];
          v12[v18] = v2;
          uint64_t v15 = (uint64_t)&v12[v18 + 1];
          if (v5 == v17) {
            goto LABEL_49;
          }
        }
        else
        {
          int v12 = 0;
          unsigned __int8 v13 = &v5[-*v6];
          char v14 = 0;
          *(unsigned char *)unint64_t v18 = a2;
          uint64_t v15 = v18 + 1;
          if (v5 == v17) {
            goto LABEL_49;
          }
        }
        if (v18 >= 8 && (unint64_t)(v17 - v12) >= 0x20)
        {
          if (v18 >= 0x20)
          {
            unint64_t v28 = v18 & 0xFFFFFFFFFFFFFFE0;
            int64_t v38 = (long long *)(v5 - 16);
            unsigned int v39 = &v12[v5 - 16 - v17];
            unint64_t v40 = v18 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              long long v41 = *v38;
              *(v39 - 1) = *(v38 - 1);
              *unsigned int v39 = v41;
              v39 -= 2;
              v38 -= 2;
              v40 -= 32;
            }
            while (v40);
            if (v18 == v28) {
              goto LABEL_86;
            }
            if ((v18 & 0x18) == 0)
            {
              v13 -= v28;
              v5 -= v28;
              goto LABEL_80;
            }
          }
          else
          {
            unint64_t v28 = 0;
          }
          v13 -= v18 & 0xFFFFFFFFFFFFFFF8;
          unint64_t v42 = &v5[-v28 - 8];
          uint64_t v43 = &v12[v42 - v17];
          unint64_t v44 = v28 - (v18 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            uint64_t v45 = *(void *)v42;
            v42 -= 8;
            *v43-- = v45;
            v44 += 8;
          }
          while (v44);
          v5 -= v18 & 0xFFFFFFFFFFFFFFF8;
          if (v18 == (v18 & 0xFFFFFFFFFFFFFFF8)) {
            goto LABEL_86;
          }
        }
LABEL_80:
        uint64_t v56 = v13 - 1;
        do
        {
          char v57 = *--v5;
          *v56-- = v57;
        }
        while (v5 != v17);
        goto LABEL_86;
      }
LABEL_89:
      sub_1B4C0E0BC();
    }
    if ((unint64_t)v5 < v16) {
      goto LABEL_24;
    }
    uint64_t v23 = (unsigned char *)*v6;
    unint64_t v24 = (unint64_t)&v5[-*v6];
    unint64_t v25 = v24 + 1;
    if ((uint64_t)(v24 + 1) < 0) {
      goto LABEL_89;
    }
    unint64_t v26 = v16 - (void)v23;
    if (2 * v26 > v25) {
      unint64_t v25 = 2 * v26;
    }
    if (v26 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v27 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v27 = v25;
    }
    if (v27)
    {
      int v12 = operator new(v27);
      unsigned __int8 v13 = &v12[v24];
      char v14 = &v12[v27];
      v12[v24] = v2;
      uint64_t v15 = (uint64_t)&v12[v24 + 1];
      if (v5 == v23)
      {
LABEL_49:
        *(void *)(a1 + 4sub_1B4BC92E4(&a9, 0) = v13;
        *(void *)(a1 + 48) = v15;
        *(void *)(a1 + 56) = v14;
        if (!v5) {
          goto LABEL_88;
        }
        goto LABEL_87;
      }
    }
    else
    {
      int v12 = 0;
      unsigned __int8 v13 = &v5[-*v6];
      char v14 = 0;
      *(unsigned char *)unint64_t v24 = a2;
      uint64_t v15 = v24 + 1;
      if (v5 == v23) {
        goto LABEL_49;
      }
    }
    if (v24 >= 8 && (unint64_t)(v23 - v12) >= 0x20)
    {
      if (v24 >= 0x20)
      {
        unint64_t v29 = v24 & 0xFFFFFFFFFFFFFFE0;
        long long v46 = (long long *)(v5 - 16);
        char v47 = &v12[v5 - 16 - v23];
        unint64_t v48 = v24 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v49 = *v46;
          *(v47 - 1) = *(v46 - 1);
          *char v47 = v49;
          v47 -= 2;
          v46 -= 2;
          v48 -= 32;
        }
        while (v48);
        if (v24 == v29) {
          goto LABEL_86;
        }
        if ((v24 & 0x18) == 0)
        {
          v13 -= v29;
          v5 -= v29;
          goto LABEL_84;
        }
      }
      else
      {
        unint64_t v29 = 0;
      }
      v13 -= v24 & 0xFFFFFFFFFFFFFFF8;
      unint64_t v50 = &v5[-v29 - 8];
      uint64_t v51 = &v12[v50 - v23];
      unint64_t v52 = v29 - (v24 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        uint64_t v53 = *(void *)v50;
        v50 -= 8;
        *v51-- = v53;
        v52 += 8;
      }
      while (v52);
      v5 -= v24 & 0xFFFFFFFFFFFFFFF8;
      if (v24 == (v24 & 0xFFFFFFFFFFFFFFF8)) {
        goto LABEL_86;
      }
    }
LABEL_84:
    uint64_t v58 = v13 - 1;
    do
    {
      char v59 = *--v5;
      *v58-- = v59;
    }
    while (v5 != v23);
    goto LABEL_86;
  }
  char v2 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a2);
  unsigned int v5 = *(unsigned char **)(a1 + 48);
  unint64_t v4 = *(void *)(a1 + 56);
  if ((unint64_t)v5 < v4)
  {
LABEL_24:
    unsigned char *v5 = v2;
    uint64_t v15 = (uint64_t)(v5 + 1);
    goto LABEL_88;
  }
  uint64_t v6 = (void *)(a1 + 40);
  uint64_t v7 = *(unsigned char **)(a1 + 40);
  unint64_t v8 = v5 - v7;
  uint64_t v9 = v5 - v7 + 1;
  if (v9 < 0) {
    goto LABEL_89;
  }
  unint64_t v10 = v4 - (void)v7;
  if (2 * v10 > v9) {
    uint64_t v9 = 2 * v10;
  }
  if (v10 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v11 = v9;
  }
  if (v11)
  {
    int v12 = operator new(v11);
    unsigned __int8 v13 = &v12[v8];
    char v14 = &v12[v11];
    v12[v8] = v2;
    uint64_t v15 = (uint64_t)&v12[v8 + 1];
    if (v5 == v7) {
      goto LABEL_49;
    }
  }
  else
  {
    int v12 = 0;
    unsigned __int8 v13 = (char *)(v5 - v7);
    char v14 = 0;
    *(unsigned char *)unint64_t v8 = v2;
    uint64_t v15 = v8 + 1;
    if (v5 == v7) {
      goto LABEL_49;
    }
  }
  if (v8 < 8 || (unint64_t)(v7 - v12) < 0x20) {
    goto LABEL_76;
  }
  if (v8 < 0x20)
  {
    unint64_t v22 = 0;
    goto LABEL_55;
  }
  unint64_t v22 = v8 & 0xFFFFFFFFFFFFFFE0;
  size_t v30 = (long long *)(v5 - 16);
  BOOL v31 = &v12[v5 - 16 - v7];
  unint64_t v32 = v8 & 0xFFFFFFFFFFFFFFE0;
  do
  {
    long long v33 = *v30;
    *(v31 - 1) = *(v30 - 1);
    _OWORD *v31 = v33;
    v31 -= 2;
    v30 -= 2;
    v32 -= 32;
  }
  while (v32);
  if (v8 != v22)
  {
    if ((v8 & 0x18) == 0)
    {
      v13 -= v22;
      v5 -= v22;
      goto LABEL_76;
    }
LABEL_55:
    v13 -= v8 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v34 = &v5[-v22 - 8];
    uint64_t v35 = &v12[v34 - v7];
    unint64_t v36 = v22 - (v8 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      uint64_t v37 = *(void *)v34;
      v34 -= 8;
      *v35-- = v37;
      v36 += 8;
    }
    while (v36);
    v5 -= v8 & 0xFFFFFFFFFFFFFFF8;
    if (v8 == (v8 & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_86;
    }
LABEL_76:
    size_t v54 = v13 - 1;
    do
    {
      char v55 = *--v5;
      *v54-- = v55;
    }
    while (v5 != v7);
  }
LABEL_86:
  unsigned int v5 = (unsigned char *)*v6;
  *(void *)(a1 + 4sub_1B4BC92E4(&a9, 0) = v12;
  *(void *)(a1 + 48) = v15;
  *(void *)(a1 + 56) = v14;
  if (v5) {
LABEL_87:
  }
    operator delete(v5);
LABEL_88:
  *(void *)(a1 + 48) = v15;
}

uint64_t sub_1B4C2354C(uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5, char a6)
{
  *(void *)a1 = &unk_1F0D55A40;
  *(void *)(a1 + 8) = a3;
  size_t v11 = (const std::locale *)(a1 + 16);
  std::locale::locale((std::locale *)(a1 + 16), (const std::locale *)a2);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 4sub_1B4BC92E4(&a9, 0) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 12sub_1B4BC92E4(&a9, 0) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(unsigned char *)(a1 + 168) = a4;
  *(unsigned char *)(a1 + 169) = a5;
  *(unsigned char *)(a1 + 17sub_1B4BC92E4(&a9, 0) = a6;
  std::locale::locale(&v14, v11);
  std::locale::name(&v15, &v14);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
  {
    BOOL v12 = v15.__r_.__value_.__l.__size_ != 1 || *v15.__r_.__value_.__l.__data_ != 67;
    operator delete(v15.__r_.__value_.__l.__data_);
  }
  else
  {
    BOOL v12 = SHIBYTE(v15.__r_.__value_.__r.__words[2]) != 1 || v15.__r_.__value_.__s.__data_[0] != 67;
  }
  std::locale::~locale(&v14);
  *(unsigned char *)(a1 + 171) = v12;
  return a1;
}

void sub_1B4C23694(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  std::locale::~locale(&a9);
  sub_1B4BF9508((void **)(v9 + 136));
  std::string v15 = *(void **)(v9 + 112);
  if (v15)
  {
    *(void *)(v9 + 12sub_1B4BC92E4(&a9, 0) = v15;
    operator delete(v15);
    sub_1B4C23758(v12);
    unint64_t v16 = *(void **)(v9 + 64);
    if (!v16)
    {
LABEL_3:
      uint64_t v17 = *v13;
      if (!*v13) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else
  {
    sub_1B4C23758(v12);
    unint64_t v16 = *(void **)(v9 + 64);
    if (!v16) {
      goto LABEL_3;
    }
  }
  *(void *)(v9 + 72) = v16;
  operator delete(v16);
  uint64_t v17 = *v13;
  if (!*v13)
  {
LABEL_4:
    std::locale::~locale(v11);
    *(void *)uint64_t v9 = v10;
    uint64_t v18 = *(void *)(v9 + 8);
    if (!v18) {
      goto LABEL_5;
    }
    goto LABEL_9;
  }
LABEL_8:
  *(void *)(v9 + 48) = v17;
  operator delete(v17);
  std::locale::~locale(v11);
  *(void *)uint64_t v9 = v10;
  uint64_t v18 = *(void *)(v9 + 8);
  if (!v18) {
LABEL_5:
  }
    _Unwind_Resume(a1);
LABEL_9:
  (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  _Unwind_Resume(a1);
}

void **sub_1B4C23758(void **a1)
{
  char v2 = (void **)*a1;
  if (*a1)
  {
    uint64_t v3 = (void **)a1[1];
    unint64_t v4 = *a1;
    if (v3 == v2)
    {
LABEL_11:
      a1[1] = v2;
      operator delete(v4);
      return a1;
    }
    while (1)
    {
      if (*((char *)v3 - 1) < 0)
      {
        operator delete(*(v3 - 3));
        if (*((char *)v3 - 25) < 0) {
LABEL_9:
        }
          operator delete(*(v3 - 6));
      }
      else if (*((char *)v3 - 25) < 0)
      {
        goto LABEL_9;
      }
      v3 -= 6;
      if (v3 == v2)
      {
        unint64_t v4 = *a1;
        goto LABEL_11;
      }
    }
  }
  return a1;
}

void sub_1B4C237EC(std::locale *a1)
{
  sub_1B4C24504(a1);
  JUMPOUT(0x1BA9929C0);
}

void sub_1B4C23824(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  unint64_t v4 = *(char **)(a2 + 16);
  unsigned int v5 = *(char **)(a2 + 24);
  if (v4 == v5)
  {
    uint64_t v10 = 0;
    int v11 = *(unsigned __int8 *)(a1 + 168);
    goto LABEL_262;
  }
  if (!*(unsigned char *)(a1 + 171) || v4 + 1 == v5) {
    goto LABEL_67;
  }
  char v6 = *v4;
  LOBYTE(__src) = *v4;
  char v7 = v4[1];
  HIBYTE(__src) = v7;
  if (*(unsigned char *)(a1 + 169))
  {
    LOBYTE(__src) = (*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), v6);
    HIBYTE(__src) = (*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), v7);
  }
  *((unsigned char *)&__s.__r_.__value_.__s + 23) = 2;
  LOWORD(__s.__r_.__value_.__l.__data_) = __src;
  __s.__r_.__value_.__s.__data_[2] = 0;
  std::__get_collation_name(&v140, (const char *)&__s);
  std::string __p = v140;
  std::string::size_type size = HIBYTE(v140.__r_.__value_.__r.__words[2]);
  int v9 = SHIBYTE(v140.__r_.__value_.__r.__words[2]);
  if ((v140.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v140.__r_.__value_.__l.__size_;
  }
  if (size) {
    goto LABEL_9;
  }
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    if (__s.__r_.__value_.__l.__size_ >= 3) {
      goto LABEL_9;
    }
  }
  else if (HIBYTE(__s.__r_.__value_.__r.__words[2]) >= 3u)
  {
    goto LABEL_14;
  }
  (*(void (**)(std::string *__return_ptr))(**(void **)(a1 + 32) + 32))(&v140);
  if (v9 < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string __p = v140;
  if ((SHIBYTE(v140.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (HIBYTE(v140.__r_.__value_.__r.__words[2]) != 12 && HIBYTE(v140.__r_.__value_.__r.__words[2]) != 1)
    {
      __p.__r_.__value_.__s.__data_[0] = 0;
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 0;
      goto LABEL_9;
    }
    goto LABEL_175;
  }
  if (__p.__r_.__value_.__l.__size_ == 1 || __p.__r_.__value_.__l.__size_ == 12)
  {
LABEL_175:
    std::string::operator=(&__p, &__s);
    goto LABEL_9;
  }
  *__p.__r_.__value_.__l.__data_ = 0;
  __p.__r_.__value_.__l.__size_ = 0;
LABEL_9:
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__s.__r_.__value_.__l.__data_);
  }
LABEL_14:
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (*((unsigned char *)&__p.__r_.__value_.__s + 23)) {
      goto LABEL_16;
    }
LABEL_67:
    int v11 = 0;
    uint64_t v10 = 1;
    unsigned __int8 v41 = **(unsigned char **)(v2 + 16);
    __p.__r_.__value_.__s.__data_[0] = v41;
    if (!*(unsigned char *)(a1 + 169)) {
      goto LABEL_69;
    }
    goto LABEL_68;
  }
  std::string::size_type v40 = __p.__r_.__value_.__l.__size_;
  operator delete(__p.__r_.__value_.__l.__data_);
  if (!v40) {
    goto LABEL_67;
  }
LABEL_16:
  uint64_t v12 = *(void *)(a1 + 112);
  uint64_t v13 = *(void *)(a1 + 120) - v12;
  if (v13)
  {
    uint64_t v14 = v13 >> 1;
    if ((unint64_t)(v13 >> 1) <= 1) {
      uint64_t v14 = 1;
    }
    std::string v15 = (unsigned __int8 *)(v12 + 1);
    do
    {
      BOOL v16 = __src == *(v15 - 1) && HIBYTE(__src) == *v15;
      if (v16) {
        goto LABEL_227;
      }
      v15 += 2;
    }
    while (--v14);
  }
  if (!*(unsigned char *)(a1 + 170) || *(void *)(a1 + 88) == *(void *)(a1 + 96))
  {
    int v11 = 0;
    goto LABEL_182;
  }
  *((unsigned char *)&__s.__r_.__value_.__s + 23) = 2;
  LOWORD(__s.__r_.__value_.__l.__data_) = __src;
  __s.__r_.__value_.__s.__data_[2] = 0;
  (*(void (**)(std::string *__return_ptr))(**(void **)(a1 + 32) + 32))(&v140);
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__s.__r_.__value_.__l.__data_);
  }
  uint64_t v17 = *(void *)(a1 + 88);
  char v18 = HIBYTE(v140.__r_.__value_.__r.__words[2]);
  uint64_t v19 = *(void *)(a1 + 96) - v17;
  if (v19)
  {
    uint64_t v20 = 0;
    unint64_t v21 = v19 / 48;
    char v134 = HIBYTE(v140.__r_.__value_.__r.__words[2]);
    if ((v140.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v22 = HIBYTE(v140.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v22 = v140.__r_.__value_.__l.__size_;
    }
    if ((v140.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v23 = &v140;
    }
    else {
      uint64_t v23 = (std::string *)v140.__r_.__value_.__r.__words[0];
    }
    if (v21 <= 1) {
      uint64_t v24 = 1;
    }
    else {
      uint64_t v24 = v19 / 48;
    }
    unint64_t v25 = (unsigned __int8 *)(v17 + 47);
    BOOL v26 = 1;
    do
    {
      int v27 = (char)*(v25 - 24);
      if (v27 >= 0) {
        size_t v28 = *(v25 - 24);
      }
      else {
        size_t v28 = *(void *)(v25 - 39);
      }
      if (v27 >= 0) {
        unint64_t v29 = (char *)(v25 - 47);
      }
      else {
        unint64_t v29 = *(char **)(v25 - 47);
      }
      if (v28 >= v22) {
        size_t v30 = v22;
      }
      else {
        size_t v30 = v28;
      }
      int v31 = memcmp(v23, v29, v30);
      BOOL v32 = v22 >= v28;
      if (v31) {
        BOOL v32 = v31 >= 0;
      }
      if (v32)
      {
        int v33 = (char)*v25;
        if (v33 >= 0) {
          size_t v34 = *v25;
        }
        else {
          size_t v34 = *(void *)(v25 - 15);
        }
        if (v33 >= 0) {
          uint64_t v35 = (char *)(v25 - 23);
        }
        else {
          uint64_t v35 = *(char **)(v25 - 23);
        }
        if (v22 >= v34) {
          size_t v36 = v34;
        }
        else {
          size_t v36 = v22;
        }
        int v37 = memcmp(v35, v23, v36);
        BOOL v38 = v34 >= v22;
        if (v37) {
          BOOL v38 = v37 >= 0;
        }
        if (v38)
        {
          int v11 = 1;
          int v39 = 5;
          goto LABEL_177;
        }
      }
      BOOL v26 = ++v20 < v21;
      v25 += 48;
    }
    while (v24 != v20);
    int v39 = 0;
    int v11 = 0;
LABEL_177:
    char v18 = v134;
  }
  else
  {
    BOOL v26 = 0;
    int v39 = 0;
    int v11 = 0;
  }
  if (v18 < 0) {
    operator delete(v140.__r_.__value_.__l.__data_);
  }
  if (!v26)
  {
LABEL_182:
    if (*(void *)(a1 + 136) == *(void *)(a1 + 144)) {
      goto LABEL_209;
    }
    int v137 = v11;
    sub_1B4C24678((uint64_t)&__s, a1 + 16, &__src, &v140);
    uint64_t v92 = *(void *)(a1 + 136);
    uint64_t v93 = *(void *)(a1 + 144) - v92;
    if (v93)
    {
      unint64_t v94 = v93 / 24;
      std::string::size_type v95 = __s.__r_.__value_.__l.__size_;
      if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v96 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v96 = __s.__r_.__value_.__l.__size_;
      }
      if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
      {
        int v133 = SHIBYTE(__s.__r_.__value_.__r.__words[2]);
        uint64_t v110 = 0;
        char v111 = (const void *)__s.__r_.__value_.__r.__words[0];
        if (v94 <= 1) {
          uint64_t v112 = 1;
        }
        else {
          uint64_t v112 = v93 / 24;
        }
        BOOL v99 = 1;
        do
        {
          uint64_t v113 = *(unsigned __int8 *)(v92 + 23);
          int v114 = (char)v113;
          if ((v113 & 0x80u) != 0) {
            uint64_t v113 = *(void *)(v92 + 8);
          }
          if (v96 == v113)
          {
            int64x2_t v115 = v114 >= 0 ? (const void *)v92 : *(const void **)v92;
            if (!memcmp(v111, v115, v95))
            {
              int v11 = 1;
              int v39 = 5;
              if ((v133 & 0x80000000) == 0) {
                goto LABEL_206;
              }
              goto LABEL_205;
            }
          }
          BOOL v99 = ++v110 < v94;
          v92 += 24;
        }
        while (v112 != v110);
        int v39 = 0;
        int v11 = v137;
        if ((v133 & 0x80000000) == 0) {
          goto LABEL_206;
        }
LABEL_205:
        operator delete(__s.__r_.__value_.__l.__data_);
        goto LABEL_206;
      }
      if (!*((unsigned char *)&__s.__r_.__value_.__s + 23))
      {
        uint64_t v116 = *(unsigned __int8 *)(v92 + 23);
        if ((v116 & 0x80u) != 0) {
          uint64_t v116 = *(void *)(v92 + 8);
        }
        if (v116 == HIBYTE(__s.__r_.__value_.__r.__words[2]))
        {
          int v11 = 1;
          goto LABEL_208;
        }
        unint64_t v121 = 0;
        if (v94 <= 1) {
          uint64_t v122 = 1;
        }
        else {
          uint64_t v122 = v94;
        }
        uint64_t v123 = v122 - 1;
        unint64_t v124 = (uint64_t *)(v92 + 32);
        int v11 = v137;
        while (v123 != v121)
        {
          ++v121;
          uint64_t v125 = *((unsigned __int8 *)v124 + 15);
          uint64_t v127 = *v124;
          v124 += 3;
          uint64_t v126 = v127;
          if ((v125 & 0x80u) != 0) {
            uint64_t v125 = v126;
          }
          if (v96 == v125)
          {
            BOOL v99 = v121 < v94;
            int v11 = 1;
            int v39 = 5;
            goto LABEL_206;
          }
        }
        BOOL v99 = 0;
        int v39 = 0;
LABEL_206:
        if (v99) {
          goto LABEL_207;
        }
LABEL_209:
        if ((char)__src < 0)
        {
          int v108 = *(_DWORD *)(a1 + 164);
        }
        else
        {
          int v105 = *(_DWORD *)(a1 + 160);
          uint64_t v106 = *(void *)(*(void *)(a1 + 24) + 16);
          int v107 = *(_DWORD *)(v106 + 4 * __src);
          if (((v107 & v105) != 0 || __src == 95 && (v105 & 0x80) != 0)
            && (SHIBYTE(__src) & 0x80000000) == 0
            && ((*(_DWORD *)(v106 + 4 * HIBYTE(__src)) & v105) != 0 || (v105 & 0x80) != 0 && HIBYTE(__src) == 95))
          {
            goto LABEL_227;
          }
          int v108 = *(_DWORD *)(a1 + 164);
          if ((v108 & v107) != 0 || __src == 95 && (v108 & 0x80) != 0)
          {
LABEL_226:
            int v109 = v11;
LABEL_228:
            int v11 = v109;
            uint64_t v10 = 2;
            goto LABEL_262;
          }
        }
        if ((SHIBYTE(__src) & 0x80000000) == 0)
        {
          if ((*(_DWORD *)(*(void *)(*(void *)(a1 + 24) + 16) + 4 * HIBYTE(__src)) & v108) == 0)
          {
            int v109 = 1;
            if (HIBYTE(__src) != 95 || (v108 & 0x80) == 0) {
              goto LABEL_228;
            }
          }
          goto LABEL_226;
        }
LABEL_227:
        int v109 = 1;
        goto LABEL_228;
      }
      uint64_t v97 = 0;
      if (v94 <= 1) {
        uint64_t v98 = 1;
      }
      else {
        uint64_t v98 = v93 / 24;
      }
      BOOL v99 = 1;
      do
      {
        size_t v100 = (unsigned __int8 *)(v92 + 24 * v97);
        uint64_t v101 = v100[23];
        int v102 = (char)v101;
        if ((v101 & 0x80u) != 0) {
          uint64_t v101 = *((void *)v100 + 1);
        }
        if (v96 == v101)
        {
          if (v102 < 0) {
            size_t v100 = *(unsigned __int8 **)v100;
          }
          p_s = &__s;
          uint64_t v104 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
          while (p_s->__r_.__value_.__s.__data_[0] == *v100)
          {
            p_s = (std::string *)((char *)p_s + 1);
            ++v100;
            if (!--v104)
            {
              int v11 = 1;
              int v39 = 5;
              if ((SHIBYTE(__s.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                goto LABEL_206;
              }
              goto LABEL_205;
            }
          }
        }
        BOOL v99 = ++v97 < v94;
      }
      while (v97 != v98);
    }
    BOOL v99 = 0;
    int v39 = 0;
    int v11 = v137;
    if ((SHIBYTE(__s.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_206;
    }
    goto LABEL_205;
  }
LABEL_207:
  if (v39)
  {
LABEL_208:
    uint64_t v10 = 2;
    goto LABEL_262;
  }
  uint64_t v10 = 2;
  unsigned __int8 v41 = **(unsigned char **)(v2 + 16);
  __p.__r_.__value_.__s.__data_[0] = v41;
  if (*(unsigned char *)(a1 + 169))
  {
LABEL_68:
    unsigned __int8 v41 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), (char)v41);
    __p.__r_.__value_.__s.__data_[0] = v41;
  }
LABEL_69:
  unint64_t v42 = *(unsigned __int8 **)(a1 + 40);
  unint64_t v43 = *(void *)(a1 + 48) - (void)v42;
  if (v43)
  {
    if (v43 <= 1) {
      unint64_t v43 = 1;
    }
    while (1)
    {
      int v44 = *v42++;
      if (v44 == v41) {
        break;
      }
      if (!--v43) {
        goto LABEL_74;
      }
    }
LABEL_261:
    int v11 = 1;
    goto LABEL_262;
  }
LABEL_74:
  unsigned int v45 = *(_DWORD *)(a1 + 164);
  if (v45 || *(void *)(a1 + 64) != *(void *)(a1 + 72))
  {
    if ((v41 & 0x80) != 0 || (*(_DWORD *)(*(void *)(*(void *)(a1 + 24) + 16) + 4 * v41) & v45) == 0)
    {
      int v47 = (v45 >> 7) & 1;
      char v46 = v41 == 95 ? v47 : 0;
    }
    else
    {
      char v46 = 1;
    }
    unint64_t v48 = *(void **)(a1 + 72);
    long long v49 = memchr(*(void **)(a1 + 64), (char)v41, (size_t)v48 - *(void *)(a1 + 64));
    unint64_t v50 = v49 ? v49 : v48;
    if ((v46 & 1) == 0 && v50 == v48) {
      goto LABEL_261;
    }
  }
  uint64_t v51 = *(void *)(a1 + 88);
  uint64_t v52 = *(void *)(a1 + 96);
  if (v51 != v52)
  {
    int v135 = v11;
    if (*(unsigned char *)(a1 + 170))
    {
      *((unsigned char *)&__s.__r_.__value_.__s + 23) = 1;
      LOWORD(__s.__r_.__value_.__l.__data_) = v41;
      (*(void (**)(std::string *__return_ptr))(**(void **)(a1 + 32) + 32))(&v140);
      if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__s.__r_.__value_.__l.__data_);
      }
      uint64_t v51 = *(void *)(a1 + 88);
      unsigned int v53 = HIBYTE(v140.__r_.__value_.__r.__words[2]);
      uint64_t v54 = *(void *)(a1 + 96) - v51;
      if (v54)
      {
LABEL_92:
        uint64_t v130 = v2;
        uint64_t v132 = v10;
        uint64_t v55 = 0;
        unint64_t v56 = v54 / 48;
        char v128 = v53;
        if ((v53 & 0x80u) == 0) {
          std::string::size_type v57 = v53;
        }
        else {
          std::string::size_type v57 = v140.__r_.__value_.__l.__size_;
        }
        if ((v53 & 0x80u) == 0) {
          uint64_t v58 = &v140;
        }
        else {
          uint64_t v58 = (std::string *)v140.__r_.__value_.__r.__words[0];
        }
        if (v56 <= 1) {
          uint64_t v59 = 1;
        }
        else {
          uint64_t v59 = v54 / 48;
        }
        uint64_t v60 = (unsigned __int8 *)(v51 + 47);
        BOOL v61 = 1;
        do
        {
          int v62 = (char)*(v60 - 24);
          if (v62 >= 0) {
            size_t v63 = *(v60 - 24);
          }
          else {
            size_t v63 = *(void *)(v60 - 39);
          }
          if (v62 >= 0) {
            size_t v64 = (char *)(v60 - 47);
          }
          else {
            size_t v64 = *(char **)(v60 - 47);
          }
          if (v63 >= v57) {
            size_t v65 = v57;
          }
          else {
            size_t v65 = v63;
          }
          int v66 = memcmp(v58, v64, v65);
          BOOL v67 = v57 >= v63;
          if (v66) {
            BOOL v67 = v66 >= 0;
          }
          if (v67)
          {
            int v68 = (char)*v60;
            if (v68 >= 0) {
              size_t v69 = *v60;
            }
            else {
              size_t v69 = *(void *)(v60 - 15);
            }
            if (v68 >= 0) {
              BOOL v70 = (char *)(v60 - 23);
            }
            else {
              BOOL v70 = *(char **)(v60 - 23);
            }
            if (v57 >= v69) {
              size_t v71 = v69;
            }
            else {
              size_t v71 = v57;
            }
            int v72 = memcmp(v70, v58, v71);
            BOOL v73 = v69 >= v57;
            if (v72) {
              BOOL v73 = v72 >= 0;
            }
            if (v73)
            {
              int v11 = 1;
              uint64_t v2 = v130;
              uint64_t v10 = v132;
              if ((v128 & 0x80) == 0) {
                goto LABEL_132;
              }
              goto LABEL_131;
            }
          }
          BOOL v61 = ++v55 < v56;
          v60 += 48;
        }
        while (v59 != v55);
        uint64_t v2 = v130;
        uint64_t v10 = v132;
        int v11 = v135;
        if ((v128 & 0x80) == 0) {
          goto LABEL_132;
        }
        goto LABEL_131;
      }
    }
    else
    {
      unsigned int v53 = 1;
      *((unsigned char *)&v140.__r_.__value_.__s + 23) = 1;
      LOWORD(v140.__r_.__value_.__l.__data_) = v41;
      uint64_t v54 = v52 - v51;
      if (v54) {
        goto LABEL_92;
      }
    }
    BOOL v61 = 0;
    if ((v53 & 0x80) == 0)
    {
LABEL_132:
      if (v61) {
        goto LABEL_262;
      }
      goto LABEL_133;
    }
LABEL_131:
    operator delete(v140.__r_.__value_.__l.__data_);
    goto LABEL_132;
  }
LABEL_133:
  if (*(void *)(a1 + 136) == *(void *)(a1 + 144)) {
    goto LABEL_256;
  }
  sub_1B4C24678((uint64_t)&__s, a1 + 16, &__p, &__p.__r_.__value_.__s.__data_[1]);
  uint64_t v74 = *(void *)(a1 + 136);
  uint64_t v75 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
  uint64_t v76 = *(void *)(a1 + 144) - v74;
  if (!v76)
  {
    if ((*((unsigned char *)&__s.__r_.__value_.__s + 23) & 0x80) != 0) {
      operator delete(__s.__r_.__value_.__l.__data_);
    }
LABEL_255:
    unsigned __int8 v41 = __p.__r_.__value_.__s.__data_[0];
LABEL_256:
    if ((v41 & 0x80) != 0) {
      goto LABEL_262;
    }
    unsigned int v117 = *(_DWORD *)(a1 + 160);
    if ((*(_DWORD *)(*(void *)(*(void *)(a1 + 24) + 16) + 4 * v41) & v117) == 0)
    {
      int v118 = (v117 >> 7) & 1;
      if (v41 != 95) {
        int v118 = 0;
      }
      if (v118 != 1) {
        goto LABEL_262;
      }
    }
    goto LABEL_261;
  }
  int v136 = v11;
  unint64_t v77 = 0;
  unint64_t v78 = v76 / 24;
  std::string::size_type v80 = __s.__r_.__value_.__l.__size_;
  long long v79 = (const void *)__s.__r_.__value_.__r.__words[0];
  if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v81 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v81 = __s.__r_.__value_.__l.__size_;
  }
  if (v78 <= 1) {
    uint64_t v82 = 1;
  }
  else {
    uint64_t v82 = v76 / 24;
  }
  for (BOOL i = 1; ; BOOL i = v77 < v78)
  {
    unsigned int v84 = (unsigned __int8 **)(v74 + 24 * v77);
    char v85 = (unsigned __int8 *)*((unsigned __int8 *)v84 + 23);
    int v86 = (char)v85;
    if ((char)v85 < 0) {
      char v85 = v84[1];
    }
    if ((unsigned __int8 *)v81 == v85) {
      break;
    }
LABEL_154:
    if (++v77 == v82)
    {
      if ((v75 & 0x80) != 0) {
LABEL_253:
      }
        operator delete(__s.__r_.__value_.__l.__data_);
      int v11 = v136;
      goto LABEL_255;
    }
LABEL_158:
    ;
  }
  if (v86 >= 0) {
    char v87 = (unsigned __int8 *)(v74 + 24 * v77);
  }
  else {
    char v87 = *v84;
  }
  if ((v75 & 0x80) == 0)
  {
    if (!v75)
    {
LABEL_162:
      int v11 = 1;
      if (!i) {
        goto LABEL_255;
      }
      goto LABEL_262;
    }
    uint64_t v88 = 0;
    while (__s.__r_.__value_.__s.__data_[v88] == v87[v88])
    {
      if (v75 == ++v88) {
        goto LABEL_162;
      }
    }
    goto LABEL_154;
  }
  uint64_t v131 = v2;
  uint64_t v89 = v82;
  BOOL v129 = i;
  uint64_t v90 = v79;
  std::string::size_type v91 = v80;
  if (memcmp(v79, v87, v80))
  {
    ++v77;
    uint64_t v82 = v89;
    BOOL v16 = v77 == v89;
    std::string::size_type v80 = v91;
    long long v79 = v90;
    uint64_t v2 = v131;
    if (v16) {
      goto LABEL_253;
    }
    goto LABEL_158;
  }
  operator delete(__s.__r_.__value_.__l.__data_);
  int v11 = 1;
  uint64_t v2 = v131;
  if (!v129) {
    goto LABEL_255;
  }
LABEL_262:
  if (v11 == *(unsigned __int8 *)(a1 + 168))
  {
    uint64_t v119 = 0;
    int v120 = -993;
  }
  else
  {
    *(void *)(v2 + 16) += v10;
    uint64_t v119 = *(void *)(a1 + 8);
    int v120 = -995;
  }
  *(_DWORD *)uint64_t v2 = v120;
  *(void *)(v2 + 8sub_1B4BC92E4(&a9, 0) = v119;
}