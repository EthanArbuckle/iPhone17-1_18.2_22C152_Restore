void VoiceConfigDirectory::~VoiceConfigDirectory(void **this)
{
  uint64_t vars8;

  *this = off_26C202D58;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
  JUMPOUT(0x2105595E0);
}

{
  *this = off_26C202D58;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

void VoiceConfigImpl::get_json(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  v7 = *(void **)(a1 + 8);
  v8 = *(void **)(a1 + 16);
  if (v7 == v8)
  {
LABEL_4:
    std::string::basic_string[abi:ne180100]<0>(__p, &byte_20D5A22AE);
    VoiceConfig::report_error(a2, a3, (uint64_t)__p);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    *(unsigned char *)a4 = 0;
    *(void *)(a4 + 8) = 0;
  }
  else
  {
    while (1)
    {
      (*(void (**)(void, uint64_t, uint64_t))(*(void *)*v7 + 72))(*v7, a2, 2);
      if (*(unsigned char *)a4) {
        break;
      }
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)(a4 + 8), 0);
      if (++v7 == v8) {
        goto LABEL_4;
      }
    }
  }
}

void sub_20D3F5120(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void VoiceConfigImpl::get_subconfig(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, void *a4@<X8>)
{
  v7 = *(void **)(a1 + 8);
  v8 = *(void **)(a1 + 16);
  while (v7 != v8)
  {
    (*(void (**)(void, uint64_t, uint64_t))(*(void *)*v7 + 64))(*v7, a2, 2);
    if (*a4) {
      return;
    }
    v9 = (std::__shared_weak_count *)a4[1];
    if (v9) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    }
    ++v7;
  }
  VoiceConfig::get_subconfig(a2, a3, a4);
}

void VoiceConfigImpl::get_locale_prefix_path(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  v11 = *(void **)(a1 + 8);
  v12 = *(void **)(a1 + 16);
  while (v11 != v12)
  {
    (*(void (**)(void, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)*v11 + 56))(*v11, a2, a3, a4, 2);
    if (*(char *)(a6 + 23) < 0)
    {
      if (*(void *)(a6 + 8)) {
        return;
      }
      operator delete(*(void **)a6);
    }
    else if (*(unsigned char *)(a6 + 23))
    {
      return;
    }
    ++v11;
  }
  if (*(char *)(a3 + 23) >= 0) {
    v13 = (const char *)a3;
  }
  else {
    v13 = *(const char **)a3;
  }
  if (*(char *)(a4 + 23) >= 0) {
    v14 = (const char *)a4;
  }
  else {
    v14 = *(const char **)a4;
  }
  StringFormatter::StringFormatter((StringFormatter *)__p, "%s][%s", v13, v14);
  VoiceConfig::report_error(a2, a5, (uint64_t)__p);
  if (v16 < 0) {
    operator delete(__p[0]);
  }
  *(void *)a6 = 0;
  *(void *)(a6 + 8) = 0;
  *(void *)(a6 + 16) = 0;
}

void sub_20D3F531C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void VoiceConfigImpl::get_locale_path(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  v9 = *(void **)(a1 + 8);
  char v10 = *(void **)(a1 + 16);
  while (v9 != v10)
  {
    (*(void (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)*v9 + 48))(*v9, a2, a3, 2);
    if (*(char *)(a5 + 23) < 0)
    {
      if (*(void *)(a5 + 8)) {
        return;
      }
      operator delete(*(void **)a5);
    }
    else if (*(unsigned char *)(a5 + 23))
    {
      return;
    }
    ++v9;
  }
  VoiceConfig::report_error(a2, a4, a3);
  *(void *)a5 = 0;
  *(void *)(a5 + 8) = 0;
  *(void *)(a5 + 16) = 0;
}

void VoiceConfigImpl::get_prefix_path(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  v9 = *(void **)(a1 + 8);
  char v10 = *(void **)(a1 + 16);
  while (v9 != v10)
  {
    (*(void (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)*v9 + 40))(*v9, a2, a3, 2);
    if (*(char *)(a5 + 23) < 0)
    {
      if (*(void *)(a5 + 8)) {
        return;
      }
      operator delete(*(void **)a5);
    }
    else if (*(unsigned char *)(a5 + 23))
    {
      return;
    }
    ++v9;
  }
  VoiceConfig::report_error(a2, a4, a3);
  *(void *)a5 = 0;
  *(void *)(a5 + 8) = 0;
  *(void *)(a5 + 16) = 0;
}

void VoiceConfigImpl::get_path(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  v7 = *(void **)(a1 + 8);
  v8 = *(void **)(a1 + 16);
  while (v7 != v8)
  {
    (*(void (**)(void, uint64_t, uint64_t))(*(void *)*v7 + 32))(*v7, a2, 2);
    if (*(char *)(a4 + 23) < 0)
    {
      if (*(void *)(a4 + 8)) {
        return;
      }
      operator delete(*(void **)a4);
    }
    else if (*(unsigned char *)(a4 + 23))
    {
      return;
    }
    ++v7;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, &byte_20D5A22AE);
  VoiceConfig::report_error(a2, a3, (uint64_t)__p);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
}

void sub_20D3F5598(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double VoiceConfigImpl::get_broker_data@<D0>(VoiceConfigImpl *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *((void *)this + 1);
  uint64_t v4 = *((void *)this + 2);
  while (v3 != v4)
  {
    (*(void (**)(void))(**(void **)v3 + 24))();
    if (*(void *)a2) {
      return result;
    }
    v6 = *(std::__shared_weak_count **)(a2 + 8);
    if (v6) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
    v3 += 8;
  }
  double result = 0.0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  return result;
}

void VoiceConfigImpl::get_resource(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  v7 = *(void **)(a1 + 8);
  v8 = *(void **)(a1 + 16);
  while (v7 != v8)
  {
    (*(void (**)(void, uint64_t, uint64_t))(*(void *)*v7 + 16))(*v7, a2, 2);
    v9 = *(std::__shared_weak_count **)(a4 + 8);
    if (*(void *)a4)
    {
      if (v9) {
        atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      size_t v10 = *(void *)(a4 + 24);
      if (v10 - 160 >= 0xFFFFFFFFFFFFFFC0)
      {
        v11 = *(void **)(a4 + 16);
        if (*v11 == 0x206E6F6973726576)
        {
          v12 = memchr(v11, 10, v10);
          if (v12)
          {
            if (*(_DWORD *)v12 == 1684631306 && v12[4] == 32)
            {
              std::string::basic_string[abi:ne180100]<0>(__p, "LFS pointer provided instead of actual file. Check your git-lfs install.");
              VoiceConfig::report_error(a2, 0, (uint64_t)__p);
              if (v15 < 0) {
                operator delete(__p[0]);
              }
            }
          }
        }
      }
      if (v9) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v9);
      }
      return;
    }
    if (v9) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)(a4 + 8));
    }
    ++v7;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, &byte_20D5A22AE);
  VoiceConfig::report_error(a2, a3, (uint64_t)__p);
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
}

void sub_20D3F57BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  v18 = *(std::__shared_weak_count **)(v15 + 8);
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  _Unwind_Resume(exception_object);
}

void VoiceConfigImpl::~VoiceConfigImpl(VoiceConfigImpl *this)
{
  VoiceConfigImpl::~VoiceConfigImpl(this);
  JUMPOUT(0x2105595E0);
}

{
  void *v2;
  void *v3;

  *(void *)this = off_26C201700;
  v2 = (void *)*((void *)this + 1);
  uint64_t v3 = (void *)*((void *)this + 2);
  if (v2 != v3)
  {
    do
    {
      if (*v2) {
        (*(void (**)(void))(*(void *)*v2 + 8))(*v2);
      }
      ++v2;
    }
    while (v2 != v3);
    v2 = (void *)*((void *)this + 1);
  }
  if (v2)
  {
    *((void *)this + 2) = v2;
    operator delete(v2);
  }
}

void FSTGrammarImpl::~FSTGrammarImpl(FSTGrammarImpl *this)
{
  *(void *)this = off_26C200A38;
  std::__tree<std::__value_type<std::string,fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::destroy(*((void **)this + 2));
  JUMPOUT(0x2105595E0);
}

{
  *(void *)this = off_26C200A38;
  std::__tree<std::__value_type<std::string,fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::destroy(*((void **)this + 2));
}

void std::__tree<std::__value_type<std::string,fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,0>(uint64_t a1)
{
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~ImplToFst((void *)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
  {
    v2 = *(void **)a1;
    operator delete(v2);
  }
}

void sub_20D3F6078(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, long long a11)
{
  operator delete(v11);
  if ((void)a11) {
    operator delete((void *)a11);
  }
  _Unwind_Resume(a1);
}

void std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::__maybe_remove_back_spare[abi:ne180100](void *a1)
{
  uint64_t v2 = a1[1];
  uint64_t v1 = a1[2];
  if (v1 == v2) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = ((v1 - v2) << 6) - 1;
  }
  if ((unint64_t)(v3 - (a1[5] + a1[4])) >= 0x400)
  {
    operator delete(*(void **)(v1 - 8));
    a1[2] -= 8;
  }
}

uint64_t std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 8);
  uint64_t v3 = *(void ***)(a1 + 16);
  *(void *)(a1 + 40) = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = *(void ***)(a1 + 16);
      uint64_t v2 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 256;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    uint64_t v6 = 512;
LABEL_7:
    *(void *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    uint64_t v9 = *(void *)(a1 + 8);
    uint64_t v8 = *(void *)(a1 + 16);
    if (v8 != v9) {
      *(void *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void FSTGrammarImpl::apply_rule(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, std::string *a4@<X8>)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  uint64_t v6 = a1 + 16;
  uint64_t v7 = *(void *)(a1 + 16);
  if (v7)
  {
    uint64_t v8 = a1 + 24;
    uint64_t v9 = a1 + 16;
    do
    {
      BOOL v10 = std::less<std::string>::operator()[abi:ne180100](v8, (const void **)(v7 + 32), (const void **)a2);
      v11 = (uint64_t *)(v7 + 8);
      if (!v10)
      {
        v11 = (uint64_t *)v7;
        uint64_t v9 = v7;
      }
      uint64_t v7 = *v11;
    }
    while (*v11);
    if (v9 != v6 && !std::less<std::string>::operator()[abi:ne180100](v8, (const void **)a2, (const void **)(v9 + 32))) {
      fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::VectorFst();
    }
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  v12 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
  {
    if (*(char *)(a2 + 23) >= 0) {
      v14 = (const void *)a2;
    }
    else {
      v14 = *(const void **)a2;
    }
    int buf = 136315138;
    *(void *)buf_4 = v14;
    _os_log_impl(&dword_20CD80000, v12, OS_LOG_TYPE_ERROR, "Ignore unknown rule '%s'", (uint8_t *)&buf, 0xCu);
  }
  if (*(char *)(a2 + 23) >= 0) {
    uint64_t v15 = (const void *)a2;
  }
  else {
    uint64_t v15 = *(const void **)a2;
  }
  Diagnostics::log(3, "Ignore unknown rule '%s'", v13, v15);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a4, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&a4->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    a4->__r_.__value_.__r.__words[2] = *(void *)(a3 + 16);
  }
}

void sub_20D3F9ECC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56)
{
  if (a38 < 0) {
    operator delete(__p);
  }
  if (a55)
  {
    a56 = (uint64_t)a55;
    operator delete(a55);
  }
  if (a49)
  {
    a50 = (uint64_t)a49;
    operator delete(a49);
  }
  if (a46)
  {
    a47 = (uint64_t)a46;
    operator delete(a46);
  }
  if (a52)
  {
    a53 = (uint64_t)a52;
    operator delete(a52);
  }
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~ImplToFst(&a19);
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~ImplToFst(&a21);
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~ImplToFst(&a24);
  _Unwind_Resume(a1);
}

uint64_t fst::Compose<fst::ArcTpl<fst::TropicalWeightTpl<float>>>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  switch(*(_DWORD *)(a4 + 4))
  {
    case 0:
      char v5 = FLAGS_fst_default_cache_gc;
      fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::LookAheadMatcher((uint64_t)&v7, result, 1);
      fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::LookAheadMatcher((uint64_t)&v12, a2, 0);
      int v6 = fst::LookAheadMatchType<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(&v7, &v12);
      if (v12) {
        (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
      }
      if (v7) {
        (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
      }
      if (v6)
      {
        if (v6 == 1)
        {
          LOBYTE(v7) = v5;
          long long v8 = 0u;
          long long v9 = 0u;
          long long v10 = 0u;
          char v11 = 0;
          operator new();
        }
        LOBYTE(v7) = v5;
        long long v8 = 0u;
        long long v9 = 0u;
        long long v10 = 0u;
        char v11 = 0;
        fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::CreateBase2<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>();
      }
      LOBYTE(v7) = v5;
      long long v8 = 0u;
      long long v9 = 0u;
      long long v10 = 0u;
      char v11 = 0;
      operator new();
    case 1:
      LOBYTE(v7) = FLAGS_fst_default_cache_gc;
      long long v8 = 0u;
      long long v9 = 0u;
      long long v10 = 0u;
      char v11 = 0;
      operator new();
    case 2:
      LOBYTE(v7) = FLAGS_fst_default_cache_gc;
      long long v8 = 0u;
      long long v9 = 0u;
      long long v10 = 0u;
      char v11 = 0;
      fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::CreateBase2<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>();
    case 3:
      LOBYTE(v7) = FLAGS_fst_default_cache_gc;
      long long v8 = 0u;
      long long v9 = 0u;
      long long v10 = 0u;
      char v11 = 0;
      operator new();
    case 4:
      LOBYTE(v7) = FLAGS_fst_default_cache_gc;
      long long v8 = 0u;
      long long v9 = 0u;
      long long v10 = 0u;
      char v11 = 0;
      operator new();
    default:
      if (*(unsigned char *)a4) {
        fst::Connect<fst::ArcTpl<fst::TropicalWeightTpl<float>>>(a3);
      }
      return result;
  }
}

void sub_20D3FCD10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)(v26 - 105));
  if (*(char *)(v26 - 81) < 0) {
    operator delete(*(void **)(v26 - 104));
  }
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~CacheBaseImpl(v25);
  MEMORY[0x2105595E0](v25, 0x10F3C405A371F01);
  _Unwind_Resume(a1);
}

void fst::RmEpsilon<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::AutoQueue<int>>(void *a1, void *a2, uint64_t a3)
{
  char v5 = a1;
  if ((*(unsigned int (**)(void *))(*(void *)a1 + 24))(a1) == -1) {
    return;
  }
  int v6 = (*(uint64_t (**)(void *))(*(void *)v5 + 152))(v5);
  LOBYTE(p_p) = 0;
  std::vector<BOOL>::vector(&v286, v6, (unsigned __int8 *)&p_p);
  int v7 = (*(uint64_t (**)(void *))(*(void *)v5 + 24))(v5);
  uint64_t v8 = 0;
  *(void *)((char *)v286 + (((unint64_t)v7 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v7;
LABEL_3:
  if ((int)v8 < (*(int (**)(void *))(*(void *)v5 + 152))(v5))
  {
    unint64_t v266 = 0;
    (*(void (**)(void *, uint64_t, void **))(*(void *)v5 + 136))(v5, v8, &p_p);
    while (p_p)
    {
      if ((*(unsigned int (**)(void *))(*(void *)p_p + 24))(p_p))
      {
        if (p_p)
        {
          (*(void (**)(void))(*(void *)p_p + 8))();
          goto LABEL_30;
        }
LABEL_28:
        if (v265) {
          --*(_DWORD *)v265;
        }
LABEL_30:
        uint64_t v8 = (v8 + 1);
        goto LABEL_3;
      }
      if (!p_p)
      {
        unint64_t v12 = v266;
        goto LABEL_14;
      }
      long long v9 = (_DWORD *)(*(uint64_t (**)(void))(*(void *)p_p + 32))();
      long long v10 = p_p;
      if (*v9) {
        goto LABEL_17;
      }
      if (p_p)
      {
        uint64_t v11 = (*(uint64_t (**)(void))(*(void *)p_p + 32))();
        long long v10 = p_p;
        goto LABEL_16;
      }
      v13 = v263;
      unint64_t v12 = v266;
LABEL_15:
      long long v10 = 0;
      uint64_t v11 = (uint64_t)&v13[2 * v12];
LABEL_16:
      if (*(_DWORD *)(v11 + 4))
      {
LABEL_17:
        if (v10)
        {
          uint64_t v14 = (*(uint64_t (**)(void *))(*(void *)v10 + 32))(v10);
          long long v10 = p_p;
        }
        else
        {
          v13 = v263;
          unint64_t v12 = v266;
LABEL_20:
          long long v10 = 0;
          uint64_t v14 = (uint64_t)&v13[2 * v12];
        }
        *(void *)((char *)v286 + (((unint64_t)*(int *)(v14 + 12) >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << *(_DWORD *)(v14 + 12);
      }
      if (v10) {
        (*(void (**)(void *))(*(void *)v10 + 40))(v10);
      }
      else {
        ++v266;
      }
    }
    unint64_t v12 = v266;
    if (v266 >= (unint64_t)v264) {
      goto LABEL_28;
    }
LABEL_14:
    v13 = v263;
    if (LODWORD(v263[2 * v12])) {
      goto LABEL_20;
    }
    goto LABEL_15;
  }
  memset(&v285, 0, sizeof(v285));
  int v15 = (*(uint64_t (**)(void *))(*(void *)v5 + 152))(v5);
  std::vector<int>::reserve(&v285, v15);
  if (((*(uint64_t (**)(void *, uint64_t, void))(*(void *)v5 + 64))(v5, 0x4000000000, 0) & 0x4000000000) == 0)
  {
    if (((*(uint64_t (**)(void *, uint64_t, void))(*(void *)v5 + 64))(v5, 0x800000000, 0) & 0x800000000) == 0)
    {
      v287 = 0;
      v289 = 0;
      __p = 0;
      unint64_t v290 = 0;
      p_p = &__p;
      v263 = 0;
      v264 = 0;
      v265 = &v287;
      fst::DfsVisit<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::EpsilonArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>((uint64_t)v5, (uint64_t)&p_p);
    }
    p_p = 0;
    v263 = 0;
    v264 = 0;
    LOBYTE(v294.__begin_) = 0;
    __p = &p_p;
    v289 = &v294;
    fst::DfsVisit<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::TopOrderVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::EpsilonArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>();
  }
  for (int i = 0; i < (*(int (**)(void *))(*(void *)v5 + 152))(v5); ++i)
  {
    std::vector<int>::pointer end = v285.__end_;
    if (v285.__end_ >= v285.__end_cap_.__value_)
    {
      std::vector<int>::pointer begin = v285.__begin_;
      int64_t v20 = v285.__end_ - v285.__begin_;
      unint64_t v21 = v20 + 1;
      if ((unint64_t)(v20 + 1) >> 62) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      int64_t v22 = (char *)v285.__end_cap_.__value_ - (char *)v285.__begin_;
      if (((char *)v285.__end_cap_.__value_ - (char *)v285.__begin_) >> 1 > v21) {
        unint64_t v21 = v22 >> 1;
      }
      if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v23 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v23 = v21;
      }
      if (v23)
      {
        v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v285.__end_cap_, v23);
        std::vector<int>::pointer begin = v285.__begin_;
        std::vector<int>::pointer end = v285.__end_;
      }
      else
      {
        v24 = 0;
      }
      v25 = (int *)&v24[4 * v20];
      int *v25 = i;
      v18 = v25 + 1;
      while (end != begin)
      {
        int v26 = *--end;
        *--v25 = v26;
      }
      v285.__begin_ = v25;
      v285.__end_ = v18;
      v285.__end_cap_.__value_ = (int *)&v24[4 * v23];
      if (begin) {
        operator delete(begin);
      }
    }
    else
    {
      *v285.__end_ = i;
      v18 = end + 1;
    }
    v285.__end_ = v18;
  }
  p_p = v5;
  v263 = a2;
  v264 = v5;
  v265 = (void **)a2;
  unint64_t v266 = *(void *)a3;
  float v267 = *(float *)(a3 + 16);
  char v268 = *(unsigned char *)(a3 + 20);
  char v269 = 1;
  long long v270 = 0u;
  long long v271 = 0u;
  long long v272 = 0u;
  memset(v273, 0, 29);
  a2[1] = *a2;
  long long v274 = 0u;
  long long v275 = 0u;
  float v276 = 1.0;
  int v284 = 0;
  long long v281 = 0u;
  memset(v277, 0, sizeof(v277));
  long long v278 = 0u;
  long long v279 = 0u;
  long long v280 = 0u;
  unint64_t v282 = 0;
  std::vector<int>::pointer v27 = v285.__end_;
  v255 = v5;
  if (v285.__begin_ == v285.__end_) {
    goto LABEL_492;
  }
  uint64_t v28 = 0;
  while (2)
  {
    unsigned int v30 = *(v27 - 1);
    uint64_t v29 = v30;
    v285.__end_ = v27 - 1;
    unint64_t v31 = (int)v30;
    if (((*(void *)((char *)v286 + (((unint64_t)(int)v30 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v30) & 1) != 0
      || !*(unsigned char *)(a3 + 21)
      && ((LODWORD(__p) = 0,
           LODWORD(__p) = *(_DWORD *)(a3 + 24),
           LODWORD(v294.__begin_) = 2139095040,
           *(float *)&__p == INFINITY)
        ? (BOOL v152 = *(_DWORD *)(a3 + 28) == -1)
        : (BOOL v152 = 0),
          v152))
    {
      uint64_t v257 = v29;
      LODWORD(v293.__begin_) = v29;
      float v283 = INFINITY;
      *((void *)&v281 + 1) = v28;
      if ((*(unsigned int (**)(void *))(*(void *)v264 + 24))(v264) == -1)
      {
        uint64_t v153 = (*(uint64_t (**)(void *, uint64_t, void))(*(void *)v264 + 64))(v264, 4, 0);
        goto LABEL_284;
      }
      (*(void (**)(void))(**(void **)(v266 + 16) + 56))(*(void *)(v266 + 16));
      if (!v269)
      {
        v265[1] = *v265;
        *((void *)&v270 + 1) = v270;
        *(void *)&long long v272 = 0;
      }
      uint64_t v32 = v257;
      if (v257 == -1)
      {
        uint64_t v32 = (*(uint64_t (**)(void *))(*(void *)v264 + 24))(v264);
        unint64_t v31 = (int)v32;
      }
      while (1)
      {
        v33 = v265;
        v34 = v265 + 1;
        v35 = (char *)v265[1];
        v36 = *v265;
        unint64_t v37 = (v35 - (unsigned char *)*v265) >> 2;
        if (v37 > v31) {
          break;
        }
        v38 = (char *)v265[2];
        if (v35 >= v38)
        {
          if ((v37 + 1) >> 62) {
            goto LABEL_534;
          }
          uint64_t v40 = v38 - v36;
          uint64_t v41 = v40 >> 1;
          if (v40 >> 1 <= v37 + 1) {
            uint64_t v41 = v37 + 1;
          }
          if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v42 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v42 = v41;
          }
          if (v42) {
            unint64_t v42 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::TropicalWeightTpl<float>>>(v42);
          }
          else {
            uint64_t v43 = 0;
          }
          v44 = (_DWORD *)(v42 + 4 * v37);
          _DWORD *v44 = 2139095040;
          v39 = v44 + 1;
          v45 = (char *)*v34;
          v46 = (char *)*v33;
          if (*v34 != *v33)
          {
            do
            {
              int v47 = *((_DWORD *)v45 - 1);
              v45 -= 4;
              *--v44 = v47;
            }
            while (v45 != v46);
            v45 = (char *)*v33;
          }
          *v33 = v44;
          *v34 = v39;
          v33[2] = (void *)(v42 + 4 * v43);
          if (v45) {
            operator delete(v45);
          }
        }
        else
        {
          *(_DWORD *)v35 = 2139095040;
          v39 = v35 + 4;
        }
        *v34 = v39;
        uint64_t v48 = *((void *)&v270 + 1);
        if (*((void *)&v270 + 1) >= (unint64_t)v271)
        {
          uint64_t v50 = (uint64_t)(*((void *)&v270 + 1) - v270) >> 2;
          if ((unint64_t)(v50 + 1) >> 62) {
LABEL_534:
          }
            std::vector<int>::__throw_length_error[abi:ne180100]();
          unint64_t v51 = (uint64_t)(v271 - v270) >> 1;
          if (v51 <= v50 + 1) {
            unint64_t v51 = v50 + 1;
          }
          if ((void)v271 - (void)v270 >= 0x7FFFFFFFFFFFFFFCuLL) {
            unint64_t v52 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v52 = v51;
          }
          if (v52) {
            unint64_t v52 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::TropicalWeightTpl<float>>>(v52);
          }
          else {
            uint64_t v53 = 0;
          }
          v54 = (_DWORD *)(v52 + 4 * v50);
          _DWORD *v54 = 2139095040;
          v49 = v54 + 1;
          v55 = (char *)*((void *)&v270 + 1);
          v56 = (char *)v270;
          if (*((void *)&v270 + 1) != (void)v270)
          {
            do
            {
              int v57 = *((_DWORD *)v55 - 1);
              v55 -= 4;
              *--v54 = v57;
            }
            while (v55 != v56);
            v55 = (char *)v270;
          }
          *(void *)&long long v270 = v54;
          *((void *)&v270 + 1) = v49;
          *(void *)&long long v271 = v52 + 4 * v53;
          if (v55) {
            operator delete(v55);
          }
        }
        else
        {
          **((_DWORD **)&v270 + 1) = 2139095040;
          v49 = (_DWORD *)(v48 + 4);
        }
        *((void *)&v270 + 1) = v49;
        LOBYTE(__p) = 0;
        std::vector<BOOL>::push_back((uint64_t)&v271 + 8, &__p);
      }
      if (v269)
      {
        v59 = (char *)*((void *)&v273[0] + 1);
        v58 = *(char **)&v273[0];
        unint64_t v60 = (uint64_t)(*((void *)&v273[0] + 1) - *(void *)&v273[0]) >> 2;
        if (v60 <= v31)
        {
          do
          {
            if ((unint64_t)v59 >= *(void *)&v273[1])
            {
              unint64_t v62 = v60 + 1;
              if ((v60 + 1) >> 62) {
                std::vector<int>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v63 = *(void *)&v273[1] - (void)v58;
              if ((uint64_t)(*(void *)&v273[1] - (void)v58) >> 1 > v62) {
                unint64_t v62 = v63 >> 1;
              }
              if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v64 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v64 = v62;
              }
              if (v64)
              {
                v65 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v273[1], v64);
                v59 = (char *)*((void *)&v273[0] + 1);
                v58 = *(char **)&v273[0];
              }
              else
              {
                v65 = 0;
              }
              v66 = &v65[4 * v60];
              *(_DWORD *)v66 = -1;
              v61 = v66 + 4;
              while (v59 != v58)
              {
                int v67 = *((_DWORD *)v59 - 1);
                v59 -= 4;
                *((_DWORD *)v66 - 1) = v67;
                v66 -= 4;
              }
              *(void *)&v273[0] = v66;
              *((void *)&v273[0] + 1) = v61;
              *(void *)&v273[1] = &v65[4 * v64];
              if (v58)
              {
                operator delete(v58);
                v58 = *(char **)&v273[0];
              }
              else
              {
                v58 = v66;
              }
            }
            else
            {
              *(_DWORD *)v59 = -1;
              v61 = v59 + 4;
            }
            *((void *)&v273[0] + 1) = v61;
            unint64_t v60 = (v61 - v58) >> 2;
            v59 = v61;
          }
          while (v60 <= v31);
          v36 = *v265;
        }
        *(_DWORD *)&v58[4 * v31] = DWORD2(v273[1]);
      }
      *(_DWORD *)&v36[4 * v31] = 0;
      *(_DWORD *)(v270 + 4 * v31) = 0;
      *(void *)(*((void *)&v271 + 1) + ((v31 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v31;
      (*(void (**)(void, uint64_t))(**(void **)(v266 + 16) + 24))(*(void *)(v266 + 16), v32);
LABEL_119:
      if ((*(uint64_t (**)(void))(**(void **)(v266 + 16) + 48))(*(void *)(v266 + 16))) {
        goto LABEL_282;
      }
      uint64_t v68 = (*(uint64_t (**)(void))(**(void **)(v266 + 16) + 16))(*(void *)(v266 + 16));
      (*(void (**)(void))(**(void **)(v266 + 16) + 32))(*(void *)(v266 + 16));
      v69 = v265;
      v70 = v265 + 1;
      v71 = (char *)v265[1];
      v72 = *v265;
      for (unint64_t j = (v71 - (unsigned char *)*v265) >> 2; j <= (int)v68; unint64_t j = (v71 - (unsigned char *)*v265) >> 2)
      {
        unint64_t v74 = (unint64_t)v69[2];
        if ((unint64_t)v71 >= v74)
        {
          if ((j + 1) >> 62) {
            goto LABEL_534;
          }
          uint64_t v76 = v74 - (void)v72;
          uint64_t v77 = v76 >> 1;
          if (v76 >> 1 <= j + 1) {
            uint64_t v77 = j + 1;
          }
          if ((unint64_t)v76 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v78 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v78 = v77;
          }
          if (v78) {
            unint64_t v78 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::TropicalWeightTpl<float>>>(v78);
          }
          else {
            uint64_t v79 = 0;
          }
          v80 = (_DWORD *)(v78 + 4 * j);
          _DWORD *v80 = 2139095040;
          v75 = v80 + 1;
          v81 = (char *)*v70;
          v82 = (char *)*v69;
          if (*v70 != *v69)
          {
            do
            {
              int v83 = *((_DWORD *)v81 - 1);
              v81 -= 4;
              *--v80 = v83;
            }
            while (v81 != v82);
            v81 = (char *)*v69;
          }
          *v69 = v80;
          *v70 = v75;
          v69[2] = (void *)(v78 + 4 * v79);
          if (v81) {
            operator delete(v81);
          }
        }
        else
        {
          *(_DWORD *)v71 = 2139095040;
          v75 = v71 + 4;
        }
        *v70 = v75;
        uint64_t v84 = *((void *)&v270 + 1);
        if (*((void *)&v270 + 1) >= (unint64_t)v271)
        {
          uint64_t v86 = (uint64_t)(*((void *)&v270 + 1) - v270) >> 2;
          if ((unint64_t)(v86 + 1) >> 62) {
            goto LABEL_534;
          }
          unint64_t v87 = (uint64_t)(v271 - v270) >> 1;
          if (v87 <= v86 + 1) {
            unint64_t v87 = v86 + 1;
          }
          if ((void)v271 - (void)v270 >= 0x7FFFFFFFFFFFFFFCuLL) {
            unint64_t v88 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v88 = v87;
          }
          if (v88) {
            unint64_t v88 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::TropicalWeightTpl<float>>>(v88);
          }
          else {
            uint64_t v89 = 0;
          }
          v90 = (_DWORD *)(v88 + 4 * v86);
          _DWORD *v90 = 2139095040;
          v85 = v90 + 1;
          v91 = (char *)*((void *)&v270 + 1);
          v92 = (char *)v270;
          if (*((void *)&v270 + 1) != (void)v270)
          {
            do
            {
              int v93 = *((_DWORD *)v91 - 1);
              v91 -= 4;
              *--v90 = v93;
            }
            while (v91 != v92);
            v91 = (char *)v270;
          }
          *(void *)&long long v270 = v90;
          *((void *)&v270 + 1) = v85;
          *(void *)&long long v271 = v88 + 4 * v89;
          if (v91) {
            operator delete(v91);
          }
        }
        else
        {
          **((_DWORD **)&v270 + 1) = 2139095040;
          v85 = (_DWORD *)(v84 + 4);
        }
        *((void *)&v270 + 1) = v85;
        LOBYTE(__p) = 0;
        std::vector<BOOL>::push_back((uint64_t)&v271 + 8, &__p);
        v69 = v265;
        v70 = v265 + 1;
        v71 = (char *)v265[1];
        v72 = *v265;
      }
      if (v268)
      {
        LODWORD(__p) = (*(float (**)(void *, uint64_t))(*(void *)v264 + 32))(v264, v68);
        LODWORD(v294.__begin_) = 2139095040;
        if (*(float *)&__p != INFINITY)
        {
LABEL_282:
          ++DWORD2(v273[1]);
          uint64_t v153 = (*(uint64_t (**)(void *, uint64_t, void))(*(void *)v264 + 64))(v264, 4, 0);
LABEL_284:
          if (!v153) {
            goto LABEL_286;
          }
          BYTE12(v273[1]) = 1;
          goto LABEL_488;
        }
      }
      *(void *)(*((void *)&v271 + 1) + (((unint64_t)(int)v68 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v68);
      float v94 = *(float *)(v270 + 4 * (int)v68);
      *(_DWORD *)(v270 + 4 * (int)v68) = 2139095040;
      unint64_t v292 = 0;
      (*(void (**)(void *, uint64_t, void **))(*(void *)v264 + 136))(v264, v68, &__p);
      while (__p)
      {
        if ((*(uint64_t (**)(void *))(*(void *)__p + 24))(__p)) {
          goto LABEL_268;
        }
        if (!__p)
        {
          unint64_t v96 = v292;
LABEL_164:
          uint64_t v95 = (uint64_t)v289 + 16 * v96;
          goto LABEL_165;
        }
        uint64_t v95 = (*(uint64_t (**)(void *))(*(void *)__p + 32))(__p);
LABEL_165:
        if (!*(void *)v95)
        {
          v97 = v265;
          v98 = v265 + 1;
          v99 = (char *)v265[1];
          v100 = *v265;
          unint64_t v101 = (v99 - (unsigned char *)*v265) >> 2;
          if (v101 <= *(int *)(v95 + 12))
          {
            do
            {
              unint64_t v103 = (unint64_t)v97[2];
              if ((unint64_t)v99 >= v103)
              {
                if ((v101 + 1) >> 62) {
                  std::vector<int>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v105 = v103 - (void)v100;
                uint64_t v106 = v105 >> 1;
                if (v105 >> 1 <= v101 + 1) {
                  uint64_t v106 = v101 + 1;
                }
                if ((unint64_t)v105 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v107 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v107 = v106;
                }
                if (v107) {
                  unint64_t v107 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::TropicalWeightTpl<float>>>(v107);
                }
                else {
                  uint64_t v108 = 0;
                }
                v109 = (_DWORD *)(v107 + 4 * v101);
                _DWORD *v109 = 2139095040;
                v104 = v109 + 1;
                v110 = (char *)*v98;
                v111 = (char *)*v97;
                if (*v98 != *v97)
                {
                  do
                  {
                    int v112 = *((_DWORD *)v110 - 1);
                    v110 -= 4;
                    *--v109 = v112;
                  }
                  while (v110 != v111);
                  v110 = (char *)*v97;
                }
                *v97 = v109;
                *v98 = v104;
                v97[2] = (void *)(v107 + 4 * v108);
                if (v110) {
                  operator delete(v110);
                }
              }
              else
              {
                *(_DWORD *)v99 = 2139095040;
                v104 = v99 + 4;
              }
              *v98 = v104;
              uint64_t v113 = *((void *)&v270 + 1);
              if (*((void *)&v270 + 1) >= (unint64_t)v271)
              {
                uint64_t v115 = (uint64_t)(*((void *)&v270 + 1) - v270) >> 2;
                if ((unint64_t)(v115 + 1) >> 62) {
                  std::vector<int>::__throw_length_error[abi:ne180100]();
                }
                unint64_t v116 = (uint64_t)(v271 - v270) >> 1;
                if (v116 <= v115 + 1) {
                  unint64_t v116 = v115 + 1;
                }
                if ((void)v271 - (void)v270 >= 0x7FFFFFFFFFFFFFFCuLL) {
                  unint64_t v117 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v117 = v116;
                }
                if (v117) {
                  unint64_t v117 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::TropicalWeightTpl<float>>>(v117);
                }
                else {
                  uint64_t v118 = 0;
                }
                v119 = (_DWORD *)(v117 + 4 * v115);
                _DWORD *v119 = 2139095040;
                v114 = v119 + 1;
                v120 = (char *)*((void *)&v270 + 1);
                v121 = (char *)v270;
                if (*((void *)&v270 + 1) != (void)v270)
                {
                  do
                  {
                    int v122 = *((_DWORD *)v120 - 1);
                    v120 -= 4;
                    *--v119 = v122;
                  }
                  while (v120 != v121);
                  v120 = (char *)v270;
                }
                *(void *)&long long v270 = v119;
                *((void *)&v270 + 1) = v114;
                *(void *)&long long v271 = v117 + 4 * v118;
                if (v120) {
                  operator delete(v120);
                }
              }
              else
              {
                **((_DWORD **)&v270 + 1) = 2139095040;
                v114 = (_DWORD *)(v113 + 4);
              }
              *((void *)&v270 + 1) = v114;
              LOBYTE(v294.__begin_) = 0;
              std::vector<BOOL>::push_back((uint64_t)&v271 + 8, &v294);
              v97 = v265;
              v98 = v265 + 1;
              v99 = (char *)v265[1];
              v100 = *v265;
              unint64_t v101 = (v99 - (unsigned char *)*v265) >> 2;
              unint64_t v102 = *(int *)(v95 + 12);
            }
            while (v101 <= v102);
          }
          else
          {
            LODWORD(v102) = *(_DWORD *)(v95 + 12);
          }
          if (v269)
          {
            v124 = (char *)*((void *)&v273[0] + 1);
            v123 = *(char **)&v273[0];
            unint64_t v125 = (uint64_t)(*((void *)&v273[0] + 1) - *(void *)&v273[0]) >> 2;
            if (v125 <= (int)v102)
            {
              do
              {
                if ((unint64_t)v124 >= *(void *)&v273[1])
                {
                  unint64_t v128 = v125 + 1;
                  if ((v125 + 1) >> 62) {
                    std::vector<int>::__throw_length_error[abi:ne180100]();
                  }
                  uint64_t v129 = *(void *)&v273[1] - (void)v123;
                  if ((uint64_t)(*(void *)&v273[1] - (void)v123) >> 1 > v128) {
                    unint64_t v128 = v129 >> 1;
                  }
                  if ((unint64_t)v129 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v130 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v130 = v128;
                  }
                  if (v130)
                  {
                    v131 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v273[1], v130);
                    v124 = (char *)*((void *)&v273[0] + 1);
                    v123 = *(char **)&v273[0];
                  }
                  else
                  {
                    v131 = 0;
                  }
                  v132 = &v131[4 * v125];
                  *(_DWORD *)v132 = -1;
                  v127 = v132 + 4;
                  while (v124 != v123)
                  {
                    int v133 = *((_DWORD *)v124 - 1);
                    v124 -= 4;
                    *((_DWORD *)v132 - 1) = v133;
                    v132 -= 4;
                  }
                  *(void *)&v273[0] = v132;
                  *((void *)&v273[0] + 1) = v127;
                  *(void *)&v273[1] = &v131[4 * v130];
                  if (v123)
                  {
                    operator delete(v123);
                    v123 = *(char **)&v273[0];
                  }
                  else
                  {
                    v123 = v132;
                  }
                }
                else
                {
                  *(_DWORD *)v124 = -1;
                  v127 = v124 + 4;
                }
                *((void *)&v273[0] + 1) = v127;
                unint64_t v125 = (v127 - v123) >> 2;
                LODWORD(v102) = *(_DWORD *)(v95 + 12);
                v124 = v127;
              }
              while (v125 <= (int)v102);
              uint64_t v126 = (int)v102;
              v97 = v265;
            }
            else
            {
              uint64_t v126 = (int)v102;
            }
            if (*(_DWORD *)&v123[4 * v126] != DWORD2(v273[1]))
            {
              *((_DWORD *)*v97 + v126) = 2139095040;
              *(_DWORD *)(v270 + 4 * *(int *)(v95 + 12)) = 2139095040;
              unint64_t v102 = *(int *)(v95 + 12);
              *(void *)(*((void *)&v271 + 1) + ((v102 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v102);
              *(_DWORD *)(*(void *)&v273[0] + 4 * v102) = DWORD2(v273[1]);
              v97 = v265;
              LODWORD(v102) = *(_DWORD *)(v95 + 12);
            }
          }
          v134 = (float *)*v97;
          uint64_t v135 = v270;
          float v136 = NAN;
          if (v94 != -INFINITY)
          {
            float v137 = *(float *)(v95 + 8);
            float v136 = NAN;
            if (v137 != -INFINITY)
            {
              float v136 = INFINITY;
              BOOL v138 = v137 == INFINITY || v94 == INFINITY;
              float v139 = v94 + v137;
              if (!v138) {
                float v136 = v139;
              }
            }
          }
          float v140 = v134[(int)v102];
          if (v140 >= v136) {
            float v141 = v136;
          }
          else {
            float v141 = v134[(int)v102];
          }
          if (v136 == -INFINITY || v140 == -INFINITY) {
            float v141 = NAN;
          }
          if (v141 > (float)(v140 + v267) || v140 > (float)(v267 + v141))
          {
            v134[(int)v102] = v141;
            float v145 = *(float *)(v135 + 4 * (int)v102);
            if (v145 >= v136) {
              float v146 = v136;
            }
            else {
              float v146 = *(float *)(v135 + 4 * (int)v102);
            }
            BOOL v148 = v136 == -INFINITY || v145 == -INFINITY;
            float v149 = NAN;
            if (!v148) {
              float v149 = v146;
            }
            *(float *)(v135 + 4 * (int)v102) = v149;
            if (v134[(int)v102] != -INFINITY && (v149 < -INFINITY || v149 > -INFINITY))
            {
              uint64_t v150 = **(void **)(v266 + 16);
              if (((*(void *)(*((void *)&v271 + 1)
                               + (((unint64_t)*(int *)(v95 + 12) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> *(_DWORD *)(v95 + 12)) & 1) != 0)
              {
                (*(void (**)(void))(v150 + 40))();
              }
              else
              {
                (*(void (**)(void))(v150 + 24))();
                *(void *)(*((void *)&v271 + 1) + (((unint64_t)*(int *)(v95 + 12) >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << *(_DWORD *)(v95 + 12);
              }
              goto LABEL_265;
            }
            char v151 = 0;
            BYTE12(v273[1]) = 1;
LABEL_269:
            if (__p)
            {
              (*(void (**)(void *))(*(void *)__p + 8))(__p);
            }
            else if (v291)
            {
              --*v291;
            }
            if ((v151 & 1) == 0)
            {
LABEL_286:
              if (!BYTE12(v273[1]))
              {
                std::deque<int>::push_back(v277, &v293);
                uint64_t v154 = *((void *)&v278 + 1);
                uint64_t v155 = (uint64_t)&v279;
                if (*((void *)&v278 + 1))
                {
                  while (1)
                  {
                    uint64_t v156 = v154 - 1;
                    uint64_t v157 = *(unsigned int *)(*(void *)(v277[1]
                                                       + (((unint64_t)(v278 + v156) >> 7) & 0x1FFFFFFFFFFFFF8))
                                           + 4 * ((v278 + v156) & 0x3FF));
                    *((void *)&v278 + 1) = v156;
                    std::deque<int>::__maybe_remove_back_spare[abi:ne180100](v277);
                    uint64_t v158 = (int)v157;
                    while (*((void *)&v279 + 1) <= (unint64_t)(int)v157)
                    {
                      LOBYTE(__p) = 0;
                      std::vector<BOOL>::push_back((uint64_t)&v279, &__p);
                    }
                    uint64_t v159 = *(void *)(v279 + 8 * ((unint64_t)(int)v157 >> 6));
                    if ((v159 & (1 << v157)) == 0) {
                      break;
                    }
LABEL_483:
                    uint64_t v154 = *((void *)&v278 + 1);
                    if (!*((void *)&v278 + 1)) {
                      goto LABEL_486;
                    }
                  }
                  uint64_t v256 = v157;
                  *(void *)(v279 + 8 * ((unint64_t)(int)v157 >> 6)) = v159 | (1 << v157);
                  uint64_t v160 = *((void *)&v280 + 1);
                  v161 = operator new(0x10uLL);
                  *(void *)v161 = v160;
                  v161[2] = v256;
                  *((void *)&v280 + 1) = v161;
                  unint64_t v292 = 0;
                  (*(void (**)(void *))(*(void *)p_p + 136))(p_p);
                  uint64_t v258 = v158;
                  while (2)
                  {
                    if (__p)
                    {
                      if ((*(unsigned int (**)(void *))(*(void *)__p + 24))(__p))
                      {
                        if (__p)
                        {
                          (*(void (**)(void))(*(void *)__p + 8))();
                        }
                        else
                        {
LABEL_462:
                          if (v291) {
                            --*v291;
                          }
                        }
                        uint64_t v225 = *v263;
                        (*(void (**)(void *, uint64_t))(*(void *)p_p + 32))(p_p, v256);
                        float v227 = *(float *)(v225 + 4 * v158);
                        float v228 = NAN;
                        if (v227 != -INFINITY && v226 != -INFINITY)
                        {
                          float v228 = INFINITY;
                          BOOL v229 = v226 == INFINITY || v227 == INFINITY;
                          float v230 = v227 + v226;
                          if (!v229) {
                            float v228 = v230;
                          }
                        }
                        if (v283 >= v228) {
                          float v231 = v228;
                        }
                        else {
                          float v231 = v283;
                        }
                        BOOL v233 = v228 == -INFINITY || v283 == -INFINITY;
                        float v234 = NAN;
                        if (!v233) {
                          float v234 = v231;
                        }
                        float v283 = v234;
                        goto LABEL_483;
                      }
                      if (__p)
                      {
                        v162 = (_OWORD *)(*(uint64_t (**)(void))(*(void *)__p + 32))();
                        goto LABEL_300;
                      }
                      unint64_t v163 = v292;
                    }
                    else
                    {
                      unint64_t v163 = v292;
                      if (v292 >= v290) {
                        goto LABEL_462;
                      }
                    }
                    v162 = (_OWORD *)((char *)v289 + 16 * v163);
LABEL_300:
                    *(_OWORD *)&v294.__begin_ = *v162;
                    float v164 = *(float *)(*v263 + 4 * v158);
                    float v165 = NAN;
                    if (v164 != -INFINITY)
                    {
                      float v165 = NAN;
                      if (*(float *)&v294.__end_ != -INFINITY)
                      {
                        float v165 = INFINITY;
                        BOOL v166 = *(float *)&v294.__end_ == INFINITY || v164 == INFINITY;
                        float v167 = v164 + *(float *)&v294.__end_;
                        if (!v166) {
                          float v165 = v167;
                        }
                      }
                    }
                    *(float *)&v294.__end_ = v165;
                    int v168 = (int)v294.__begin_;
                    int begin_high = HIDWORD(v294.__begin_);
                    if (!v294.__begin_)
                    {
                      unint64_t end_high = SHIDWORD(v294.__end_);
                      while (*((void *)&v279 + 1) <= end_high)
                      {
                        LOBYTE(v287) = 0;
                        std::vector<BOOL>::push_back((uint64_t)&v279, &v287);
                      }
                      if (((*(void *)(v279 + ((end_high >> 3) & 0x1FFFFFFFFFFFFFF8)) >> end_high) & 1) == 0) {
                        std::deque<int>::push_back(v277, (_DWORD *)&v294.__end_ + 1);
                      }
                      goto LABEL_421;
                    }
                    int v261 = HIDWORD(v294.__end_);
                    unint64_t v171 = SHIDWORD(v294.__end_) + 7853 * SLODWORD(v294.__begin_) + 7867 * SHIDWORD(v294.__begin_);
                    unint64_t v172 = *((void *)&v274 + 1);
                    if (!*((void *)&v274 + 1))
                    {
                      uint64_t v260 = (uint64_t)(*((void *)&v281 + 1) - v281) >> 4;
                      int v259 = v284;
                      goto LABEL_348;
                    }
                    uint8x8_t v173 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v274 + 8));
                    v173.i16[0] = vaddlv_u8(v173);
                    if (v173.u32[0] > 1uLL)
                    {
                      uint64_t v174 = SHIDWORD(v294.__end_) + 7853 * SLODWORD(v294.__begin_) + 7867 * SHIDWORD(v294.__begin_);
                      if (v171 >= *((void *)&v274 + 1)) {
                        uint64_t v174 = v171 % *((void *)&v274 + 1);
                      }
                    }
                    else
                    {
                      uint64_t v174 = v171 & (*((void *)&v274 + 1) - 1);
                    }
                    v175 = *(uint64_t ***)(v274 + 8 * v174);
                    if (!v175 || (v176 = *v175) == 0)
                    {
                      v178 = (_OWORD *)*((void *)&v281 + 1);
                      uint64_t v260 = (uint64_t)(*((void *)&v281 + 1) - v281) >> 4;
                      int v259 = v284;
                      goto LABEL_332;
                    }
                    while (1)
                    {
                      unint64_t v177 = v176[1];
                      if (v177 != v171)
                      {
                        if (v173.u32[0] > 1uLL)
                        {
                          if (v177 >= *((void *)&v274 + 1)) {
                            v177 %= *((void *)&v274 + 1);
                          }
                        }
                        else
                        {
                          v177 &= *((void *)&v274 + 1) - 1;
                        }
                        if (v177 == v174) {
                          goto LABEL_329;
                        }
LABEL_330:
                        v178 = (_OWORD *)*((void *)&v281 + 1);
                        uint64_t v260 = (uint64_t)(*((void *)&v281 + 1) - v281) >> 4;
                        int v259 = v284;
LABEL_332:
                        uint8x8_t v179 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v274 + 8));
                        v179.i16[0] = vaddlv_u8(v179);
                        if (v179.u32[0] > 1uLL)
                        {
                          uint64_t v155 = SHIDWORD(v294.__end_)
                               + 7853 * SLODWORD(v294.__begin_)
                               + 7867 * SHIDWORD(v294.__begin_);
                          if (v171 >= *((void *)&v274 + 1)) {
                            uint64_t v155 = v171 % *((void *)&v274 + 1);
                          }
                        }
                        else
                        {
                          uint64_t v155 = v171 & (*((void *)&v274 + 1) - 1);
                        }
                        v180 = *(uint64_t ***)(v274 + 8 * v155);
                        if (v180)
                        {
                          for (k = *v180; k; k = (uint64_t *)*k)
                          {
                            unint64_t v182 = k[1];
                            if (v182 == v171)
                            {
                              if ((std::vector<int>::pointer)k[2] == v294.__begin_
                                && *((_DWORD *)k + 6) == HIDWORD(v294.__end_))
                              {
                                goto LABEL_404;
                              }
                            }
                            else
                            {
                              if (v179.u32[0] > 1uLL)
                              {
                                if (v182 >= *((void *)&v274 + 1)) {
                                  v182 %= *((void *)&v274 + 1);
                                }
                              }
                              else
                              {
                                v182 &= *((void *)&v274 + 1) - 1;
                              }
                              if (v182 != v155) {
                                break;
                              }
                            }
                          }
                        }
LABEL_348:
                        v183 = operator new(0x30uLL);
                        void *v183 = 0;
                        v183[1] = v171;
                        *((_DWORD *)v183 + 4) = v168;
                        *((_DWORD *)v183 + 5) = begin_high;
                        *((_DWORD *)v183 + 6) = v261;
                        *((_DWORD *)v183 + 8) = v259;
                        v183[5] = v260;
                        float v184 = (float)(unint64_t)(*((void *)&v275 + 1) + 1);
                        if (!v172 || (float)(v276 * (float)v172) < v184)
                        {
                          BOOL v185 = (v172 & (v172 - 1)) != 0;
                          if (v172 < 3) {
                            BOOL v185 = 1;
                          }
                          unint64_t v186 = v185 | (2 * v172);
                          unint64_t v187 = vcvtps_u32_f32(v184 / v276);
                          if (v186 <= v187) {
                            int8x8_t prime = (int8x8_t)v187;
                          }
                          else {
                            int8x8_t prime = (int8x8_t)v186;
                          }
                          if (*(void *)&prime == 1)
                          {
                            int8x8_t prime = (int8x8_t)2;
                          }
                          else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
                          {
                            int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
                            unint64_t v172 = *((void *)&v274 + 1);
                          }
                          if (*(void *)&prime <= v172)
                          {
                            if (*(void *)&prime < v172)
                            {
                              unint64_t v195 = vcvtps_u32_f32((float)*((unint64_t *)&v275 + 1) / v276);
                              if (v172 < 3
                                || (uint8x8_t v196 = (uint8x8_t)vcnt_s8((int8x8_t)v172),
                                    v196.i16[0] = vaddlv_u8(v196),
                                    v196.u32[0] > 1uLL))
                              {
                                unint64_t v195 = std::__next_prime(v195);
                              }
                              else
                              {
                                uint64_t v197 = 1 << -(char)__clz(v195 - 1);
                                if (v195 >= 2) {
                                  unint64_t v195 = v197;
                                }
                              }
                              if (*(void *)&prime <= v195) {
                                int8x8_t prime = (int8x8_t)v195;
                              }
                              if (*(void *)&prime >= v172)
                              {
                                unint64_t v172 = *((void *)&v274 + 1);
                              }
                              else
                              {
                                if (prime) {
                                  goto LABEL_360;
                                }
                                v213 = (void *)v274;
                                *(void *)&long long v274 = 0;
                                if (v213) {
                                  operator delete(v213);
                                }
                                unint64_t v172 = 0;
                                *((void *)&v274 + 1) = 0;
                              }
                            }
                          }
                          else
                          {
LABEL_360:
                            if (*(void *)&prime >> 61) {
                              std::__throw_bad_array_new_length[abi:ne180100]();
                            }
                            v189 = operator new(8 * *(void *)&prime);
                            v190 = (void *)v274;
                            *(void *)&long long v274 = v189;
                            if (v190) {
                              operator delete(v190);
                            }
                            uint64_t v191 = 0;
                            *((int8x8_t *)&v274 + 1) = prime;
                            do
                              *(void *)(v274 + 8 * v191++) = 0;
                            while (*(void *)&prime != v191);
                            v192 = (void **)v275;
                            if ((void)v275)
                            {
                              unint64_t v193 = *(void *)(v275 + 8);
                              uint8x8_t v194 = (uint8x8_t)vcnt_s8(prime);
                              v194.i16[0] = vaddlv_u8(v194);
                              if (v194.u32[0] > 1uLL)
                              {
                                if (v193 >= *(void *)&prime) {
                                  v193 %= *(void *)&prime;
                                }
                              }
                              else
                              {
                                v193 &= *(void *)&prime - 1;
                              }
                              *(void *)(v274 + 8 * v193) = &v275;
                              for (m = *v192; m; unint64_t v193 = v199)
                              {
                                unint64_t v199 = m[1];
                                if (v194.u32[0] > 1uLL)
                                {
                                  if (v199 >= *(void *)&prime) {
                                    v199 %= *(void *)&prime;
                                  }
                                }
                                else
                                {
                                  v199 &= *(void *)&prime - 1;
                                }
                                if (v199 != v193)
                                {
                                  if (!*(void *)(v274 + 8 * v199))
                                  {
                                    *(void *)(v274 + 8 * v199) = v192;
                                    goto LABEL_385;
                                  }
                                  *v192 = (void *)*m;
                                  void *m = **(void **)(v274 + 8 * v199);
                                  **(void **)(v274 + 8 * v199) = m;
                                  m = v192;
                                }
                                unint64_t v199 = v193;
LABEL_385:
                                v192 = (void **)m;
                                m = (void *)*m;
                              }
                            }
                            unint64_t v172 = (unint64_t)prime;
                          }
                          if ((v172 & (v172 - 1)) != 0)
                          {
                            if (v171 >= v172) {
                              uint64_t v155 = v171 % v172;
                            }
                            else {
                              uint64_t v155 = v171;
                            }
                          }
                          else
                          {
                            uint64_t v155 = (v172 - 1) & v171;
                          }
                        }
                        uint64_t v200 = v274;
                        v201 = *(void **)(v274 + 8 * v155);
                        if (v201)
                        {
                          void *v183 = *v201;
                          goto LABEL_402;
                        }
                        void *v183 = v275;
                        *(void *)&long long v275 = v183;
                        *(void *)(v200 + 8 * v155) = &v275;
                        if (*v183)
                        {
                          unint64_t v202 = *(void *)(*v183 + 8);
                          if ((v172 & (v172 - 1)) != 0)
                          {
                            if (v202 >= v172) {
                              v202 %= v172;
                            }
                          }
                          else
                          {
                            v202 &= v172 - 1;
                          }
                          v201 = (void *)(v274 + 8 * v202);
LABEL_402:
                          void *v201 = v183;
                        }
                        v178 = (_OWORD *)*((void *)&v281 + 1);
                        ++*((void *)&v275 + 1);
LABEL_404:
                        uint64_t v155 = (uint64_t)&v279;
                        uint64_t v158 = v258;
                        if ((unint64_t)v178 < v282)
                        {
                          _OWORD *v178 = *(_OWORD *)&v294.__begin_;
                          uint64_t v203 = (uint64_t)(v178 + 1);
LABEL_420:
                          *((void *)&v281 + 1) = v203;
                          goto LABEL_421;
                        }
                        uint64_t v204 = (uint64_t)((uint64_t)v178 - v281) >> 4;
                        unint64_t v205 = v204 + 1;
                        if ((unint64_t)(v204 + 1) >> 60) {
                          goto LABEL_535;
                        }
                        uint64_t v206 = v282 - v281;
                        if ((uint64_t)(v282 - v281) >> 3 > v205) {
                          unint64_t v205 = v206 >> 3;
                        }
                        if ((unint64_t)v206 >= 0x7FFFFFFFFFFFFFF0) {
                          unint64_t v207 = 0xFFFFFFFFFFFFFFFLL;
                        }
                        else {
                          unint64_t v207 = v205;
                        }
                        if (v207) {
                          unint64_t v207 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Agglomerate>>>(v207);
                        }
                        else {
                          uint64_t v208 = 0;
                        }
                        v209 = (_OWORD *)(v207 + 16 * v204);
                        _OWORD *v209 = *(_OWORD *)&v294.__begin_;
                        v210 = (char *)*((void *)&v281 + 1);
                        v211 = (char *)v281;
                        v212 = v209;
                        if (*((void *)&v281 + 1) != (void)v281)
                        {
                          do
                          {
                            *--v212 = *((_OWORD *)v210 - 1);
                            v210 -= 16;
                          }
                          while (v210 != v211);
                          goto LABEL_417;
                        }
LABEL_418:
                        uint64_t v203 = (uint64_t)(v209 + 1);
                        *(void *)&long long v281 = v212;
                        *((void *)&v281 + 1) = v209 + 1;
                        unint64_t v282 = v207 + 16 * v208;
                        if (v210) {
                          operator delete(v210);
                        }
                        goto LABEL_420;
                      }
                      if ((std::vector<int>::pointer)v176[2] == v294.__begin_
                        && *((_DWORD *)v176 + 6) == HIDWORD(v294.__end_))
                      {
                        break;
                      }
LABEL_329:
                      v176 = (uint64_t *)*v176;
                      if (!v176) {
                        goto LABEL_330;
                      }
                    }
                    if (*((_DWORD *)v176 + 8) != v284)
                    {
                      *((_DWORD *)v176 + 8) = v284;
                      long long v220 = v281;
                      uint64_t v221 = (uint64_t)(*((void *)&v281 + 1) - v281) >> 4;
                      v176[5] = v221;
                      uint64_t v155 = (uint64_t)&v279;
                      uint64_t v158 = v258;
                      if (*((void *)&v220 + 1) < v282)
                      {
                        **((_OWORD **)&v220 + 1) = *(_OWORD *)&v294.__begin_;
                        uint64_t v203 = *((void *)&v220 + 1) + 16;
                        goto LABEL_420;
                      }
                      uint64_t v222 = v221 + 1;
                      if ((unint64_t)(v221 + 1) >> 60) {
LABEL_535:
                      }
                        std::vector<int>::__throw_length_error[abi:ne180100]();
                      uint64_t v223 = v282 - v220;
                      if ((unint64_t)((uint64_t)(v282 - v220) >> 3) > *((void *)&v220 + 1)) {
                        uint64_t v222 = v223 >> 3;
                      }
                      if ((unint64_t)v223 >= 0x7FFFFFFFFFFFFFF0) {
                        unint64_t v207 = 0xFFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v207 = v222;
                      }
                      if (v207) {
                        unint64_t v207 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Agglomerate>>>(v207);
                      }
                      else {
                        uint64_t v208 = 0;
                      }
                      v209 = (_OWORD *)(v207 + 16 * v221);
                      _OWORD *v209 = *(_OWORD *)&v294.__begin_;
                      v210 = (char *)*((void *)&v281 + 1);
                      v224 = (char *)v281;
                      v212 = v209;
                      if (*((void *)&v281 + 1) != (void)v281)
                      {
                        do
                        {
                          *--v212 = *((_OWORD *)v210 - 1);
                          v210 -= 16;
                        }
                        while (v210 != v224);
LABEL_417:
                        v210 = (char *)v281;
                        goto LABEL_418;
                      }
                      goto LABEL_418;
                    }
                    uint64_t v214 = v281 + 16 * v176[5];
                    float v215 = *(float *)(v214 + 8);
                    if (v215 >= v165) {
                      float v216 = v165;
                    }
                    else {
                      float v216 = *(float *)(v214 + 8);
                    }
                    BOOL v218 = v165 == -INFINITY || v215 == -INFINITY;
                    float v219 = NAN;
                    if (!v218) {
                      float v219 = v216;
                    }
                    *(float *)(v214 + 8) = v219;
                    uint64_t v155 = (uint64_t)&v279;
                    uint64_t v158 = v258;
LABEL_421:
                    if (__p) {
                      (*(void (**)(void *))(*(void *)__p + 40))(__p);
                    }
                    else {
                      ++v292;
                    }
                    continue;
                  }
                }
LABEL_486:
                while (1)
                {
                  v235 = (void *)*((void *)&v280 + 1);
                  if (!*((void *)&v280 + 1)) {
                    break;
                  }
                  *(void *)(v279
                            + (((unint64_t)*(int *)(*((void *)&v280 + 1) + 8) >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << *(_DWORD *)(*((void *)&v280 + 1) + 8));
                  *((void *)&v280 + 1) = *v235;
                  operator delete(v235);
                }
                ++v284;
              }
LABEL_488:
              (*(void (**)(void *, uint64_t, float))(*(void *)v255 + 176))(v255, v257, v283);
              (*(void (**)(void *, uint64_t))(*(void *)v255 + 232))(v255, v257);
              char v5 = v255;
              (*(void (**)(void *, uint64_t, uint64_t))(*(void *)v255 + 248))(v255, v257, (uint64_t)(*((void *)&v281 + 1) - v281) >> 4);
              uint64_t v28 = v281;
              if ((void)v281 != *((void *)&v281 + 1))
              {
                uint64_t v28 = *((void *)&v281 + 1);
                do
                {
                  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)v255 + 200))(v255, v257, v28 - 16);
                  uint64_t v28 = *((void *)&v281 + 1) - 16;
                  *((void *)&v281 + 1) = v28;
                }
                while ((void)v281 != v28);
              }
              goto LABEL_491;
            }
            goto LABEL_119;
          }
        }
LABEL_265:
        if (__p) {
          (*(void (**)(void *))(*(void *)__p + 40))(__p);
        }
        else {
          ++v292;
        }
      }
      unint64_t v96 = v292;
      if (v292 >= v290)
      {
LABEL_268:
        char v151 = 1;
        goto LABEL_269;
      }
      goto LABEL_164;
    }
LABEL_491:
    std::vector<int>::pointer v27 = v285.__end_;
    if (v285.__begin_ != v285.__end_) {
      continue;
    }
    break;
  }
LABEL_492:
  if (*(unsigned char *)(a3 + 21)
    || (LODWORD(__p) = 0,
        LODWORD(__p) = *(_DWORD *)(a3 + 24),
        LODWORD(v294.__begin_) = 2139095040,
        *(float *)&__p != INFINITY)
    || *(_DWORD *)(a3 + 28) != -1)
  {
    for (unint64_t n = 0; (uint64_t)n < (*(int (**)(void *))(*(void *)v5 + 152))(v5); ++n)
    {
      if (((*(void *)((char *)v286 + ((n >> 3) & 0x1FFFFFFFFFFFFFF8)) >> n) & 1) == 0) {
        (*(void (**)(void *, unint64_t))(*(void *)v5 + 232))(v5, n);
      }
    }
  }
  if (BYTE12(v273[1])) {
    (*(void (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 184))(v5, 4, 4);
  }
  unint64_t v237 = (*(uint64_t (**)(void *, uint64_t, void))(*(void *)v5 + 64))(v5, 0x3FFFFFFF0007, 0);
  unint64_t v238 = fst::RmEpsilonProperties(v237, 0);
  (*(void (**)(void *, unint64_t, uint64_t))(*(void *)v5 + 184))(v5, v238, 0x3FFFFFFF0007);
  LODWORD(__p) = 0;
  LODWORD(__p) = *(_DWORD *)(a3 + 24);
  LODWORD(v294.__begin_) = 2139095040;
  v239.n128_u32[0] = __p;
  if (*(float *)&__p != INFINITY || *(_DWORD *)(a3 + 28) != -1)
  {
    int v241 = (*(uint64_t (**)(void *, __n128))(*(void *)v5 + 152))(v5, v239);
    if (v241)
    {
      memset(&v294, 0, sizeof(v294));
      if ((v241 & 0x80000000) == 0)
      {
        unint64_t v242 = v241;
        v243 = (int *)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::TropicalWeightTpl<float>>>(v241);
        v294.__begin_ = v243;
        v294.__end_cap_.__value_ = &v243[v244];
        v245 = &v243[v242];
        uint64_t v246 = 4 * v242;
        do
        {
          *v243++ = 2139095040;
          v246 -= 4;
        }
        while (v246);
        v294.__end_ = v245;
        memset(&v293, 0, sizeof(v293));
        v247 = (int *)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::TropicalWeightTpl<float>>>(v242);
        std::vector<int>::pointer v250 = v293.__begin_;
        std::vector<int>::pointer v249 = v293.__end_;
        v251 = v247;
        if (v293.__end_ != v293.__begin_)
        {
          do
          {
            int v252 = *--v249;
            *--v251 = v252;
          }
          while (v249 != v250);
          std::vector<int>::pointer v249 = v293.__begin_;
        }
        v293.__begin_ = v251;
        v293.__end_ = v247;
        v293.__end_cap_.__value_ = &v247[v248];
        if (v249) {
          operator delete(v249);
        }
        fst::ShortestDistance<fst::ArcTpl<fst::TropicalWeightTpl<float>>>();
      }
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
  }
  if (*(unsigned char *)(a3 + 21))
  {
    LODWORD(__p) = 0;
    LODWORD(__p) = *(_DWORD *)(a3 + 24);
    LODWORD(v294.__begin_) = 2139095040;
    if (*(float *)&__p == INFINITY && *(_DWORD *)(a3 + 28) == -1) {
      fst::Connect<fst::ArcTpl<fst::TropicalWeightTpl<float>>>((uint64_t)v5);
    }
  }
  if ((void)v281)
  {
    *((void *)&v281 + 1) = v281;
    operator delete((void *)v281);
  }
  v253 = (void *)*((void *)&v280 + 1);
  if (*((void *)&v280 + 1))
  {
    do
    {
      v254 = (void *)*v253;
      operator delete(v253);
      v253 = v254;
    }
    while (v254);
  }
  *((void *)&v280 + 1) = 0;
  if ((void)v279) {
    operator delete((void *)v279);
  }
  std::deque<int>::~deque[abi:ne180100]((uint64_t)v277);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&v274);
  fst::ShortestDistanceState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::AutoQueue<int>,fst::EpsilonArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~ShortestDistanceState(&v264);
  if (v285.__begin_)
  {
    v285.__end_ = v285.__begin_;
    operator delete(v285.__begin_);
  }
  if (v286) {
    operator delete(v286);
  }
}

void sub_20D3FFF80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,uint64_t a63)
{
  v70 = (void *)STACK[0x218];
  if (STACK[0x218])
  {
    STACK[0x220] = (unint64_t)v70;
    operator delete(v70);
  }
  v71 = (void *)STACK[0x230];
  if (STACK[0x230])
  {
    STACK[0x238] = (unint64_t)v71;
    operator delete(v71);
  }
  if (STACK[0x248]) {
    operator delete((void *)STACK[0x248]);
  }
  fst::Heap<int,fst::PruneCompare<int,fst::TropicalWeightTpl<float>>,false>::~Heap(&STACK[0x260]);
  v72 = *(void **)(v68 - 184);
  if (v72)
  {
    *(void *)(v68 - 176) = v72;
    operator delete(v72);
  }
  v73 = *(void **)(v68 - 160);
  if (v73)
  {
    *(void *)(v68 - 152) = v73;
    operator delete(v73);
  }
  fst::RmEpsilonState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::AutoQueue<int>>::~RmEpsilonState(&a24);
  if (a65)
  {
    a66 = (uint64_t)a65;
    operator delete(a65);
  }
  if (a68) {
    operator delete(a68);
  }
  _Unwind_Resume(a1);
}

void *fst::AutoQueue<int>::~AutoQueue(void *a1)
{
  *a1 = off_26C208988;
  uint64_t v3 = a1[3];
  uint64_t v2 = a1[4];
  if (v2 != v3)
  {
    unint64_t v4 = 0;
    do
    {
      uint64_t v5 = *(void *)(v3 + 8 * v4);
      if (v5)
      {
        (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
        uint64_t v3 = a1[3];
        uint64_t v2 = a1[4];
      }
      ++v4;
    }
    while (v4 < (v2 - v3) >> 3);
  }
  uint64_t v6 = a1[2];
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  int v7 = (void *)a1[6];
  if (v7)
  {
    a1[7] = v7;
    operator delete(v7);
  }
  uint64_t v8 = (void *)a1[3];
  if (v8)
  {
    a1[4] = v8;
    operator delete(v8);
  }
  return a1;
}

uint64_t fst::AutoQueue<int>::Clear_(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 56))();
}

uint64_t fst::AutoQueue<int>::Empty_(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 48))();
}

uint64_t fst::AutoQueue<int>::Update_(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 40))();
}

uint64_t fst::AutoQueue<int>::Dequeue_(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 32))();
}

uint64_t fst::AutoQueue<int>::Enqueue_(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24))();
}

uint64_t fst::AutoQueue<int>::Head_(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 16))();
}

void fst::AutoQueue<int>::~AutoQueue(void *a1)
{
  fst::AutoQueue<int>::~AutoQueue(a1);
  JUMPOUT(0x2105595E0);
}

void fst::DfsVisit<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::TopOrderVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::EpsilonArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>()
{
}

void sub_20D400CE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  uint64_t v19 = va_arg(va1, void);
  uint64_t v20 = va_arg(va1, void);
  fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~MemoryPool((uint64_t *)va);
  std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((uint64_t)va1);
  uint64_t v11 = *(void **)(v9 - 112);
  if (v11)
  {
    *(void *)(v9 - 104) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

void fst::DfsVisit<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::EpsilonArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>(uint64_t a1, uint64_t a2)
{
}

void sub_20D401610(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  uint64_t v19 = va_arg(va1, void);
  uint64_t v20 = va_arg(va1, void);
  fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~MemoryPool((uint64_t *)va);
  std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((uint64_t)va1);
  uint64_t v11 = *(void **)(v9 - 112);
  if (v11)
  {
    *(void *)(v9 - 104) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

void fst::Connect<fst::ArcTpl<fst::TropicalWeightTpl<float>>>(uint64_t a1)
{
  memset(v4, 0, sizeof(v4));
  memset(v3, 0, sizeof(v3));
  uint64_t v2 = 0;
  v1[0] = 0;
  v1[1] = v4;
  v1[2] = v3;
  v1[3] = &v2;
  fst::DfsVisit<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>(a1, (uint64_t)v1);
}

void sub_20D4018B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  v13 = *(void **)(v11 - 112);
  if (v13) {
    operator delete(v13);
  }
  uint64_t v14 = *(void **)(v11 - 88);
  if (v14) {
    operator delete(v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::deque<int>::~deque[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 8);
  uint64_t v3 = *(void ***)(a1 + 16);
  *(void *)(a1 + 40) = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = *(void ***)(a1 + 16);
      uint64_t v2 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 512;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    uint64_t v6 = 1024;
LABEL_7:
    *(void *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      int v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    uint64_t v9 = *(void *)(a1 + 8);
    uint64_t v8 = *(void *)(a1 + 16);
    if (v8 != v9) {
      *(void *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *fst::ShortestDistanceState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::AutoQueue<int>,fst::EpsilonArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~ShortestDistanceState(void *a1)
{
  uint64_t v2 = (void *)a1[11];
  if (v2)
  {
    a1[12] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[8];
  if (v3) {
    operator delete(v3);
  }
  unint64_t v4 = (void *)a1[5];
  if (v4)
  {
    a1[6] = v4;
    operator delete(v4);
  }
  return a1;
}

void *fst::RmEpsilonState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::AutoQueue<int>>::~RmEpsilonState(void *a1)
{
  uint64_t v2 = (void *)a1[33];
  if (v2)
  {
    a1[34] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[32];
  if (v3)
  {
    do
    {
      unint64_t v4 = (void *)*v3;
      operator delete(v3);
      uint64_t v3 = v4;
    }
    while (v4);
  }
  a1[32] = 0;
  unint64_t v5 = (void *)a1[29];
  if (v5) {
    operator delete(v5);
  }
  std::deque<int>::~deque[abi:ne180100]((uint64_t)(a1 + 23));
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)(a1 + 17));
  fst::ShortestDistanceState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::AutoQueue<int>,fst::EpsilonArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~ShortestDistanceState(a1 + 2);
  return a1;
}

void fst::ShortestDistance<fst::ArcTpl<fst::TropicalWeightTpl<float>>>()
{
}

void sub_20D403DDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,void *a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (a40 < 0) {
    operator delete(__p);
  }
  if (a32)
  {
    a33 = (uint64_t)a32;
    operator delete(a32);
  }
  if (a20) {
    operator delete(a20);
  }
  if (a17) {
    operator delete(a17);
  }
  if (a23) {
    operator delete(a23);
  }
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::~ImplToFst(&a26);
  _Unwind_Resume(a1);
}

BOOL fst::NaturalLess<fst::TropicalWeightTpl<float>>::operator()(float a1, float a2)
{
  if (a1 >= a2) {
    float v2 = a2;
  }
  else {
    float v2 = a1;
  }
  if (a2 == -INFINITY || a1 == -INFINITY) {
    float v2 = NAN;
  }
  return v2 == a1 && a1 != a2;
}

uint64_t fst::Heap<int,fst::PruneCompare<int,fst::TropicalWeightTpl<float>>,false>::Insert(uint64_t a1, int *a2)
{
  uint64_t v5 = a1 + 72;
  unint64_t v4 = *(int **)(a1 + 72);
  unint64_t v6 = *(int *)(v5 + 24);
  int v7 = *(int **)(v5 + 8);
  unint64_t v8 = v7 - v4;
  if (v8 > v6)
  {
    v4[v6] = *a2;
    *(_DWORD *)(*(void *)(a1 + 24) + 4 * *(int *)(*(void *)(a1 + 48) + 4 * *(int *)(a1 + 96))) = *(_DWORD *)(a1 + 96);
    goto LABEL_52;
  }
  unint64_t v9 = *(void *)(a1 + 88);
  if ((unint64_t)v7 >= v9)
  {
    if ((v8 + 1) >> 62) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v11 = v9 - (void)v4;
    unint64_t v12 = (uint64_t)(v9 - (void)v4) >> 1;
    if (v12 <= v8 + 1) {
      unint64_t v12 = v8 + 1;
    }
    if (v11 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v12;
    }
    if (v13)
    {
      uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 88, v13);
      unint64_t v4 = *(int **)(a1 + 72);
      int v7 = *(int **)(a1 + 80);
    }
    else
    {
      uint64_t v14 = 0;
    }
    uint64_t v15 = (int *)&v14[4 * v8];
    uint64_t v16 = &v14[4 * v13];
    *uint64_t v15 = *a2;
    long long v10 = v15 + 1;
    while (v7 != v4)
    {
      int v17 = *--v7;
      *--uint64_t v15 = v17;
    }
    *(void *)(a1 + 72) = v15;
    *(void *)(a1 + 80) = v10;
    *(void *)(a1 + 88) = v16;
    if (v4) {
      operator delete(v4);
    }
  }
  else
  {
    int *v7 = *a2;
    long long v10 = v7 + 1;
  }
  unint64_t v18 = *(void *)(a1 + 40);
  *(void *)(a1 + 80) = v10;
  uint64_t v19 = *(char **)(a1 + 32);
  if ((unint64_t)v19 >= v18)
  {
    unint64_t v21 = *(char **)(a1 + 24);
    uint64_t v22 = (v19 - v21) >> 2;
    if ((unint64_t)(v22 + 1) >> 62) {
      goto LABEL_55;
    }
    unint64_t v23 = v18 - (void)v21;
    unint64_t v24 = (uint64_t)(v18 - (void)v21) >> 1;
    if (v24 <= v22 + 1) {
      unint64_t v24 = v22 + 1;
    }
    if (v23 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v25 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v25 = v24;
    }
    if (v25)
    {
      int v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 40, v25);
      unint64_t v21 = *(char **)(a1 + 24);
      uint64_t v19 = *(char **)(a1 + 32);
    }
    else
    {
      int v26 = 0;
    }
    std::vector<int>::pointer v27 = &v26[4 * v22];
    uint64_t v28 = &v26[4 * v25];
    *(_DWORD *)std::vector<int>::pointer v27 = *(_DWORD *)(a1 + 96);
    uint64_t v20 = v27 + 4;
    while (v19 != v21)
    {
      int v29 = *((_DWORD *)v19 - 1);
      v19 -= 4;
      *((_DWORD *)v27 - 1) = v29;
      v27 -= 4;
    }
    *(void *)(a1 + 24) = v27;
    *(void *)(a1 + 32) = v20;
    *(void *)(a1 + 40) = v28;
    if (v21) {
      operator delete(v21);
    }
  }
  else
  {
    *(_DWORD *)uint64_t v19 = *(_DWORD *)(a1 + 96);
    uint64_t v20 = v19 + 4;
  }
  unint64_t v30 = *(void *)(a1 + 64);
  *(void *)(a1 + 32) = v20;
  unint64_t v31 = *(char **)(a1 + 56);
  if ((unint64_t)v31 >= v30)
  {
    v33 = *(char **)(a1 + 48);
    uint64_t v34 = (v31 - v33) >> 2;
    if (!((unint64_t)(v34 + 1) >> 62))
    {
      unint64_t v35 = v30 - (void)v33;
      unint64_t v36 = (uint64_t)(v30 - (void)v33) >> 1;
      if (v36 <= v34 + 1) {
        unint64_t v36 = v34 + 1;
      }
      if (v35 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v37 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v37 = v36;
      }
      if (v37)
      {
        v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 64, v37);
        v33 = *(char **)(a1 + 48);
        unint64_t v31 = *(char **)(a1 + 56);
      }
      else
      {
        v38 = 0;
      }
      v39 = &v38[4 * v34];
      uint64_t v40 = &v38[4 * v37];
      *(_DWORD *)v39 = *(_DWORD *)(a1 + 96);
      uint64_t v32 = v39 + 4;
      while (v31 != v33)
      {
        int v41 = *((_DWORD *)v31 - 1);
        v31 -= 4;
        *((_DWORD *)v39 - 1) = v41;
        v39 -= 4;
      }
      *(void *)(a1 + 48) = v39;
      *(void *)(a1 + 56) = v32;
      *(void *)(a1 + 64) = v40;
      if (v33) {
        operator delete(v33);
      }
      goto LABEL_51;
    }
LABEL_55:
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  *(_DWORD *)unint64_t v31 = *(_DWORD *)(a1 + 96);
  uint64_t v32 = v31 + 4;
LABEL_51:
  *(void *)(a1 + 56) = v32;
LABEL_52:
  int v42 = *(_DWORD *)(a1 + 96);
  *(_DWORD *)(a1 + 96) = v42 + 1;
  return fst::Heap<int,fst::PruneCompare<int,fst::TropicalWeightTpl<float>>,false>::Insert(a1, a2, v42);
}

void *fst::Heap<int,fst::PruneCompare<int,fst::TropicalWeightTpl<float>>,false>::~Heap(void *a1)
{
  float v2 = (void *)a1[9];
  if (v2)
  {
    a1[10] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[6];
  if (v3)
  {
    a1[7] = v3;
    operator delete(v3);
  }
  unint64_t v4 = (void *)a1[3];
  if (v4)
  {
    a1[4] = v4;
    operator delete(v4);
  }
  return a1;
}

BOOL fst::PruneCompare<int,fst::TropicalWeightTpl<float>>::operator()(uint64_t **a1, int a2, int a3)
{
  uint64_t v3 = **a1;
  unint64_t v4 = ((*a1)[1] - v3) >> 2;
  if (v4 <= a2) {
    float v5 = INFINITY;
  }
  else {
    float v5 = *(float *)(v3 + 4 * a2);
  }
  uint64_t v6 = *a1[1];
  unint64_t v7 = (a1[1][1] - v6) >> 2;
  if (v7 <= a2) {
    float v8 = INFINITY;
  }
  else {
    float v8 = *(float *)(v6 + 4 * a2);
  }
  float v9 = NAN;
  if (v5 != -INFINITY && v8 != -INFINITY)
  {
    float v9 = INFINITY;
    BOOL v10 = v8 == INFINITY || v5 == INFINITY;
    float v11 = v5 + v8;
    if (!v10) {
      float v9 = v11;
    }
  }
  if (v4 <= a3) {
    float v12 = INFINITY;
  }
  else {
    float v12 = *(float *)(v3 + 4 * a3);
  }
  if (v7 <= a3) {
    float v13 = INFINITY;
  }
  else {
    float v13 = *(float *)(v6 + 4 * a3);
  }
  float v14 = NAN;
  if (v12 != -INFINITY && v13 != -INFINITY)
  {
    float v14 = INFINITY;
    BOOL v15 = v13 == INFINITY || v12 == INFINITY;
    float v16 = v12 + v13;
    if (!v15) {
      float v14 = v16;
    }
  }
  return fst::NaturalLess<fst::TropicalWeightTpl<float>>::operator()(v9, v14);
}

uint64_t fst::Heap<int,fst::PruneCompare<int,fst::TropicalWeightTpl<float>>,false>::Insert(uint64_t a1, int *a2, int a3)
{
  unsigned int v3 = a3;
  if (a3 >= 1)
  {
    uint64_t v6 = *(void *)(a1 + 72);
    while (1)
    {
      unsigned int v7 = v3 - 1;
      uint64_t v8 = (v3 - 1) >> 1;
      if (fst::PruneCompare<int,fst::TropicalWeightTpl<float>>::operator()((uint64_t **)a1, *(_DWORD *)(v6 + 4 * v8), *a2))
      {
        break;
      }
      uint64_t v9 = *(void *)(a1 + 48);
      uint64_t v10 = *(int *)(v9 + 4 * v3);
      uint64_t v11 = *(int *)(v9 + 4 * v8);
      *(_DWORD *)(v9 + 4 * v3) = v11;
      uint64_t v12 = *(void *)(a1 + 24);
      *(_DWORD *)(v12 + 4 * v11) = v3;
      *(_DWORD *)(v9 + 4 * v8) = v10;
      *(_DWORD *)(v12 + 4 * v10) = v8;
      LODWORD(v9) = *(_DWORD *)(v6 + 4 * v3);
      *(_DWORD *)(v6 + 4 * v3) = *(_DWORD *)(v6 + 4 * v8);
      *(_DWORD *)(v6 + 4 * v8) = v9;
      unsigned int v3 = v7 >> 1;
      if (v7 <= 1) {
        return *(unsigned int *)(*(void *)(a1 + 48) + 4 * (int)v8);
      }
    }
  }
  LODWORD(v8) = v3;
  return *(unsigned int *)(*(void *)(a1 + 48) + 4 * (int)v8);
}

BOOL fst::Heap<int,fst::PruneCompare<int,fst::TropicalWeightTpl<float>>,false>::Heapify(BOOL result, uint64_t a2)
{
  uint64_t v3 = result;
  while (1)
  {
    uint64_t v4 = (2 * a2) | 1u;
    int v5 = *(_DWORD *)(v3 + 96);
    if ((int)v4 >= v5
      || !(double result = fst::PruneCompare<int,fst::TropicalWeightTpl<float>>::operator()((uint64_t **)v3, *(_DWORD *)(*(void *)(v3 + 72) + 4 * (int)v4), *(_DWORD *)(*(void *)(v3 + 72) + 4 * (int)a2))))
    {
      uint64_t v4 = a2;
    }
    int v6 = 2 * a2 + 2;
    if (v6 < v5)
    {
      double result = fst::PruneCompare<int,fst::TropicalWeightTpl<float>>::operator()((uint64_t **)v3, *(_DWORD *)(*(void *)(v3 + 72) + 4 * v6), *(_DWORD *)(*(void *)(v3 + 72) + 4 * (int)v4));
      if (result) {
        uint64_t v4 = v6;
      }
      else {
        uint64_t v4 = v4;
      }
    }
    if (v4 == a2) {
      break;
    }
    uint64_t v7 = *(void *)(v3 + 48);
    uint64_t v8 = *(int *)(v7 + 4 * (int)a2);
    uint64_t v9 = *(int *)(v7 + 4 * (int)v4);
    *(_DWORD *)(v7 + 4 * (int)a2) = v9;
    uint64_t v10 = *(void *)(v3 + 24);
    *(_DWORD *)(v10 + 4 * v9) = a2;
    *(_DWORD *)(v7 + 4 * (int)v4) = v8;
    *(_DWORD *)(v10 + 4 * v8) = v4;
    uint64_t v11 = *(void *)(v3 + 72);
    LODWORD(v8) = *(_DWORD *)(v11 + 4 * (int)a2);
    *(_DWORD *)(v11 + 4 * (int)a2) = *(_DWORD *)(v11 + 4 * (int)v4);
    *(_DWORD *)(v11 + 4 * (int)v4) = v8;
    a2 = v4;
  }
  return result;
}

void fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::VectorFst()
{
}

void sub_20D4048C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::~VectorFstBaseImpl(v15);
  MEMORY[0x2105595E0](v15, 0x10B3C40637D23BDLL);
  _Unwind_Resume(a1);
}

uint64_t fst::Reverse<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>(uint64_t a1, uint64_t *a2)
{
  (*(void (**)(uint64_t *))(*a2 + 216))(a2);
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
  (*(void (**)(uint64_t *, uint64_t))(*a2 + 272))(a2, v4);
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
  (*(void (**)(uint64_t *, uint64_t))(*a2 + 280))(a2, v5);
  if ((*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 1, 0))
  {
    int v6 = fst::CountStates<fst::ArcTpl<fst::TropicalWeightTpl<float>>>(a1);
    (*(void (**)(uint64_t *, void))(*a2 + 240))(a2, (v6 + 1));
  }
  int v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  uint64_t v8 = (*(uint64_t (**)(uint64_t *))(*a2 + 192))(a2);
  unsigned int v35 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 128))(a1, &v33);
  while (1)
  {
    if (!v33)
    {
      uint64_t v10 = v35;
      if ((int)v35 >= v34) {
        goto LABEL_42;
      }
      goto LABEL_11;
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)v33 + 16))(v33)) {
      break;
    }
    if (v33) {
      uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v33 + 24))(v33, v9);
    }
    else {
      uint64_t v10 = v35;
    }
LABEL_11:
    int v11 = v10 + 1;
    while ((*(int (**)(uint64_t *))(*a2 + 152))(a2) <= v11)
      (*(void (**)(uint64_t *))(*a2 + 192))(a2);
    if (v10 == v7) {
      (*(void (**)(uint64_t *, void, double))(*a2 + 176))(a2, (v10 + 1), 0.0);
    }
    v12.n128_f32[0] = (*(float (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, v10);
    LODWORD(v28) = v12.n128_u32[0];
    LODWORD(v25) = 2139095040;
    v13.n128_u32[0] = v12.n128_u32[0];
    if (v12.n128_f32[0] != INFINITY)
    {
      uint64_t v28 = 0;
      LODWORD(v29) = v12.n128_u32[0];
      HIDWORD(v29) = v10 + 1;
      v12.n128_f64[0] = (*(double (**)(uint64_t *, void, uint64_t *, float, float))(*a2 + 200))(a2, 0, &v28, v12.n128_f32[0], v12.n128_f32[0]);
    }
    unint64_t v32 = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t *, __n128, __n128))(*(void *)a1 + 136))(a1, v10, &v28, v12, v13);
    while (1)
    {
      if (!v28)
      {
        unint64_t v16 = v32;
        if (v32 >= v30) {
          goto LABEL_35;
        }
        goto LABEL_26;
      }
      if ((*(unsigned int (**)(uint64_t))(*(void *)v28 + 24))(v28)) {
        break;
      }
      if (!v28)
      {
        unint64_t v16 = v32;
LABEL_26:
        uint64_t v15 = v29 + 16 * v16;
        goto LABEL_27;
      }
      uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v28 + 32))(v28, v14);
LABEL_27:
      uint64_t v17 = (*(_DWORD *)(v15 + 12) + 1);
      int v18 = *(_DWORD *)(v15 + 8);
      uint64_t v25 = *(void *)v15;
      int v26 = v18;
      int v27 = v11;
      while (1)
      {
        int v19 = (*(uint64_t (**)(uint64_t *))(*a2 + 152))(a2);
        uint64_t v20 = *a2;
        if (v19 > (int)v17) {
          break;
        }
        (*(void (**)(uint64_t *))(v20 + 192))(a2);
      }
      (*(void (**)(uint64_t *, uint64_t, uint64_t *))(v20 + 200))(a2, v17, &v25);
      if (v28) {
        (*(void (**)(uint64_t))(*(void *)v28 + 40))(v28);
      }
      else {
        ++v32;
      }
    }
    if (v28)
    {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v28 + 8))(v28, v14);
      goto LABEL_37;
    }
LABEL_35:
    if (v31) {
      --*v31;
    }
LABEL_37:
    if (v33) {
      (*(void (**)(uint64_t))(*(void *)v33 + 32))(v33);
    }
    else {
      ++v35;
    }
  }
  if (v33) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v33 + 8))(v33, v9);
  }
LABEL_42:
  (*(void (**)(uint64_t *, uint64_t))(*a2 + 168))(a2, v8);
  unint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 0x3FFFFFFF0004, 0);
  uint64_t v22 = (*(uint64_t (**)(uint64_t *, uint64_t, void))(*a2 + 64))(a2, 0x3FFFFFFF0007, 0);
  unint64_t v23 = fst::ReverseProperties(v21, 1);
  return (*(uint64_t (**)(uint64_t *, unint64_t, uint64_t))(*a2 + 184))(a2, v22 | v23, 0x3FFFFFFF0007);
}

void sub_20D40500C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (a16) {
    (*(void (**)(uint64_t))(*(void *)a16 + 8))(a16);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<fst::TropicalWeightTpl<float>>::resize(void *a1, _DWORD *a2)
{
  uint64_t v3 = (_DWORD *)a1[1];
  if (v3 != (_DWORD *)*a1)
  {
    if ((unint64_t)v3 - *a1 < 5) {
      return;
    }
    uint64_t v4 = *a1 + 4;
    goto LABEL_6;
  }
  if (a1[2] != (void)v3)
  {
    *uint64_t v3 = *a2;
    uint64_t v4 = (uint64_t)(v3 + 1);
LABEL_6:
    a1[1] = v4;
    return;
  }
  int v6 = std::__allocate_at_least[abi:ne180100]<std::allocator<fst::TropicalWeightTpl<float>>>(1uLL);
  _DWORD *v6 = *a2;
  int v7 = v6 + 1;
  uint64_t v9 = &v6[v8];
  int v11 = (_DWORD *)*a1;
  uint64_t v10 = (_DWORD *)a1[1];
  if (v10 != (_DWORD *)*a1)
  {
    do
    {
      int v12 = *--v10;
      *--int v6 = v12;
    }
    while (v10 != v11);
    uint64_t v10 = (_DWORD *)*a1;
  }
  *a1 = v6;
  a1[1] = v7;
  a1[2] = v9;
  if (v10)
  {
    operator delete(v10);
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<fst::TropicalWeightTpl<float>>>(unint64_t a1)
{
  if (a1 >> 62) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(4 * a1);
}

void *fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::~ImplToFst(void *a1)
{
  *a1 = off_26C208A28;
  float v2 = (_DWORD *)a1[1];
  if (v2)
  {
    int v3 = v2[14] - 1;
    v2[14] = v3;
    if (!v3) {
      (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
    }
  }
  return a1;
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::operator=(uint64_t a1)
{
  if (FLAGS_fst_error_fatal) {
    std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
  }
  else {
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  }
  float v2 = fst::LogMessage::LogMessage((fst *)&v7, (uint64_t)__p);
  int v3 = (void *)fst::cerr(v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"ImplToFst: Assignment operator disallowed", 41);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v7);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  *(void *)(*(void *)(a1 + 8) + 8) |= 4uLL;
  return a1;
}

void sub_20D4052FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)(v14 - 17));
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::InitMatcher()
{
  return 0;
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::OutputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 48);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::InputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 40);
}

uint64_t fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Write(uint64_t a1)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  float v2 = fst::LogMessage::LogMessage((fst *)&v13, (uint64_t)__p);
  int v3 = (void *)fst::cerr(v2);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Fst::Write: No write filename method for ", 41);
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1);
  int v6 = *(char *)(v5 + 23);
  if (v6 >= 0) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = *(void *)v5;
  }
  if (v6 >= 0) {
    uint64_t v8 = *(unsigned __int8 *)(v5 + 23);
  }
  else {
    uint64_t v8 = *(void *)(v5 + 8);
  }
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v7, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" Fst type", 9);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v13);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  return 0;
}

{
  fst *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *__p[2];
  char v12;
  char v13;

  std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  float v2 = fst::LogMessage::LogMessage((fst *)&v13, (uint64_t)__p);
  int v3 = (void *)fst::cerr(v2);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Fst::Write: No write stream method for ", 39);
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1);
  int v6 = *(char *)(v5 + 23);
  if (v6 >= 0) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = *(void *)v5;
  }
  if (v6 >= 0) {
    uint64_t v8 = *(unsigned __int8 *)(v5 + 23);
  }
  else {
    uint64_t v8 = *(void *)(v5 + 8);
  }
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v7, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" Fst type", 9);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v13);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  return 0;
}

void sub_20D405424(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_20D405520(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::GetArcs(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t **))(*(void *)a1 + 136))(a1, a2, &v22);
  if (v22 || (a4 & 1) != 0)
  {
    uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 40))(a1, a2);
    uint64_t v10 = 2;
    if (!a4) {
      uint64_t v10 = 0;
    }
    unint64_t v11 = v9 + v10;
    if (*(void *)(a3 + 8) < (unint64_t)(v9 + v10))
    {
      if (*(void *)a3) {
        free(*(void **)a3);
      }
      uint64_t v21 = 0x4000;
      if (v11 > 0x4000) {
        uint64_t v21 = v11;
      }
      *(void *)(a3 + 8) = v21;
      char v13 = malloc_type_malloc(16 * v21, 0x1000040451B5BE8uLL);
      *(void *)a3 = v13;
      *(void *)(a3 + 16) = v13;
      char v12 = v13;
    }
    else
    {
      char v12 = *(_OWORD **)(a3 + 16);
      char v13 = *(_OWORD **)a3;
    }
    *(void *)(a3 + 24) = &v12[v11];
    uint64_t v14 = v22;
    uint64_t v15 = v23;
    unint64_t v17 = v24;
    unint64_t v16 = v25;
    if (v25) {
      ++*v25;
    }
    unint64_t v18 = 0;
    if (!v14) {
      goto LABEL_15;
    }
    while (1)
    {
      int v19 = (*(uint64_t (**)(uint64_t *))(*v14 + 24))(v14);
      uint64_t v20 = *v14;
      if (v19) {
        break;
      }
      _OWORD *v13 = *(_OWORD *)(*(uint64_t (**)(uint64_t *))(v20 + 32))(v14);
      (*(void (**)(uint64_t *))(*v14 + 40))(v14);
      while (1)
      {
        ++v13;
        if (v14) {
          break;
        }
LABEL_15:
        if (v18 >= v17)
        {
          if (v16) {
            --*v16;
          }
          return;
        }
        _OWORD *v13 = *(_OWORD *)(v15 + 16 * v18++);
      }
    }
    (*(void (**)(uint64_t *))(v20 + 8))(v14);
  }
  else
  {
    uint64_t v8 = v23 + 16 * v24;
    *(void *)(a3 + 16) = v23;
    *(void *)(a3 + 24) = v8;
    if (*(void *)a3)
    {
      free(*(void **)a3);
      *(void *)a3 = 0;
    }
    *(void *)(a3 + 8) = 0;
  }
}

void sub_20D40578C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Type(uint64_t a1)
{
  return *(void *)(a1 + 8) + 16;
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Properties(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    uint64_t v8 = 0;
    unint64_t v5 = fst::TestProperties<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>(a1, a2, &v8);
    *(void *)(*(void *)(a1 + 8) + 8) = *(void *)(*(void *)(a1 + 8) + 8) & (~v8 | 4) | v8 & v5;
    return v5 & a2;
  }
  else
  {
    uint64_t v7 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 32);
    return v7();
  }
}

unint64_t fst::TestProperties<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (FLAGS_fst_verify_properties)
  {
    unint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
    unint64_t v7 = fst::ComputeProperties<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>(a1, a2, a3, 0);
    if (!fst::CompatProperties(v6, v7))
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
      uint64_t v8 = fst::LogMessage::LogMessage((fst *)&v14, (uint64_t)__p);
      uint64_t v9 = (void *)fst::cerr(v8);
      uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"TestProperties: stored Fst properties incorrect", 47);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" (stored: props1, computed: props2)", 35);
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v14);
      if (v13 < 0) {
        operator delete(__p[0]);
      }
    }
    return v7;
  }
  else
  {
    return fst::ComputeProperties<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>(a1, a2, a3, 1);
  }
}

void sub_20D4059B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t fst::ComputeProperties<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>(uint64_t a1, uint64_t a2, uint64_t *a3, int a4)
{
  unint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
  unint64_t v8 = v7;
  if (!a4
    || (uint64_t v9 = v7 & 0x3FFFFFFF0000 | (2 * v7) & 0x2AAAAAAA0000 | (v7 >> 1) & 0x155555550000 | 7, (a2 & ~v9) != 0))
  {
    unint64_t v8 = v7 & 7;
    unint64_t v74 = v8;
    int v10 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
    if ((a2 & 0xF3C00000000) != 0 && v10)
    {
      uint64_t v69 = 0;
      uint64_t v70 = 0;
      unint64_t v71 = 0;
      v72 = &v74;
      fst::DfsVisit<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SccVisitor<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::AnyArcFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(a1, (uint64_t)&v69);
    }
    if ((a2 & 0xFFFFF0C3FFFFFFF8) != 0)
    {
      unint64_t v62 = a3;
      uint64_t v11 = a2 & 0xC0000;
      uint64_t v12 = 0x10425A810000;
      if ((a2 & 0xC0000) != 0) {
        uint64_t v12 = 0x10425A850000;
      }
      unint64_t v13 = v8 | v12;
      uint64_t v14 = a2 & 0x300000;
      if ((a2 & 0x300000) != 0) {
        v13 |= 0x100000uLL;
      }
      unint64_t v74 = v13;
      memset(&v68, 0, sizeof(v68));
      memset(&v67, 0, sizeof(v67));
      unsigned int v66 = 0;
      uint64_t v15 = a1;
      (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 128))(a1, &v64);
      int v16 = 0;
LABEL_12:
      if (v64)
      {
        if (!(*(unsigned int (**)(uint64_t))(*(void *)v64 + 16))(v64))
        {
          if (v64) {
            uint64_t v17 = (*(uint64_t (**)(void))(*(void *)v64 + 24))();
          }
          else {
            uint64_t v17 = v66;
          }
          goto LABEL_19;
        }
        if (v64) {
          (*(void (**)(void))(*(void *)v64 + 8))();
        }
      }
      else
      {
        uint64_t v17 = v66;
        if ((int)v66 < v65)
        {
LABEL_19:
          std::vector<int>::size_type v18 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v15 + 40))(v15, v17);
          v68.__end_ = v68.__begin_;
          v67.__end_ = v67.__begin_;
          if (v11) {
            std::vector<int>::reserve(&v68, v18);
          }
          if (v14) {
            std::vector<int>::reserve(&v67, v18);
          }
          unint64_t v73 = 0;
          (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)v15 + 136))(v15, v17, &v69);
          char v19 = 1;
          while (1)
          {
            if (v69)
            {
              if ((*(unsigned int (**)(uint64_t))(*(void *)v69 + 24))(v69))
              {
                if (v69)
                {
                  (*(void (**)(void))(*(void *)v69 + 8))();
                }
                else
                {
LABEL_95:
                  if (v72) {
                    --*(_DWORD *)v72;
                  }
                }
                uint64_t v15 = a1;
                if (v11
                  && (std::__sort<std::__less<int,int> &,int *>(),
                      (std::vector<int>::pointer)((char *)v68.__end_ - (char *)v68.__begin_) >= (std::vector<int>::pointer)5))
                {
                  unint64_t v47 = v68.__end_ - v68.__begin_;
                  if (v47 <= 2) {
                    unint64_t v47 = 2;
                  }
                  std::vector<int>::pointer v48 = v68.__begin_ + 1;
                  int v49 = *v68.__begin_;
                  unint64_t v50 = v47 - 1;
                  while (1)
                  {
                    int v52 = *v48++;
                    int v51 = v52;
                    if (v52 == v49) {
                      break;
                    }
                    int v49 = v51;
                    if (!--v50) {
                      goto LABEL_104;
                    }
                  }
                  unint64_t v74 = v74 & 0xFFFFFFFFFFF3FFFFLL | 0x80000;
                  if (!v14)
                  {
LABEL_115:
                    if (v16 >= 1) {
                      unint64_t v74 = v74 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
                    }
                    float v59 = (*(float (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, v17);
                    *(float *)&uint64_t v69 = v59;
                    int v76 = 2139095040;
                    if (v59 == INFINITY)
                    {
                      if ((*(uint64_t (**)(uint64_t, uint64_t, float, float))(*(void *)a1 + 40))(a1, v17, INFINITY, v59) != 1)unint64_t v74 = v74 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000; {
                    }
                      }
                    else
                    {
                      *(float *)&uint64_t v69 = v59;
                      int v76 = 0;
                      if (v59 != 0.0) {
                        unint64_t v74 = v74 & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
                      }
                      ++v16;
                    }
                    if (v64) {
                      (*(void (**)(uint64_t))(*(void *)v64 + 32))(v64);
                    }
                    else {
                      ++v66;
                    }
                    goto LABEL_12;
                  }
                }
                else
                {
LABEL_104:
                  if (!v14) {
                    goto LABEL_115;
                  }
                }
                std::__sort<std::__less<int,int> &,int *>();
                if ((std::vector<int>::pointer)((char *)v67.__end_ - (char *)v67.__begin_) >= (std::vector<int>::pointer)5)
                {
                  unint64_t v53 = v67.__end_ - v67.__begin_;
                  if (v53 <= 2) {
                    unint64_t v53 = 2;
                  }
                  std::vector<int>::pointer v54 = v67.__begin_ + 1;
                  int v55 = *v67.__begin_;
                  unint64_t v56 = v53 - 1;
                  while (1)
                  {
                    int v58 = *v54++;
                    int v57 = v58;
                    if (v58 == v55) {
                      break;
                    }
                    int v55 = v57;
                    if (!--v56) {
                      goto LABEL_115;
                    }
                  }
                  unint64_t v74 = v74 & 0xFFFFFFFFFFCFFFFFLL | 0x200000;
                }
                goto LABEL_115;
              }
              if (v69)
              {
                uint64_t v20 = (*(uint64_t (**)(void))(*(void *)v69 + 32))();
                goto LABEL_32;
              }
              unint64_t v21 = v73;
            }
            else
            {
              unint64_t v21 = v73;
              if (v73 >= v71) {
                goto LABEL_95;
              }
            }
            uint64_t v20 = v70 + 16 * v21;
LABEL_32:
            int v22 = *(_DWORD *)v20;
            int v23 = *(_DWORD *)v20;
            if (*(_DWORD *)v20 != *(_DWORD *)(v20 + 4))
            {
              unint64_t v74 = v74 & 0xFFFFFFFFFFFCFFFFLL | 0x20000;
              int v23 = *(_DWORD *)(v20 + 4);
            }
            if (v22 | v23)
            {
              if (v22)
              {
                if (!v23) {
                  goto LABEL_42;
                }
                goto LABEL_38;
              }
              unint64_t v24 = v74;
            }
            else
            {
              unint64_t v24 = v74 & 0xFFFFFFFFFF3FFFFFLL | 0x400000;
            }
            unint64_t v74 = v24 & 0xFFFFFFFFFCFFFFFFLL | 0x1000000;
            if (!v23)
            {
LABEL_42:
              unint64_t v74 = v74 & 0xFFFFFFFFF3FFFFFFLL | 0x4000000;
              if (v19) {
                goto LABEL_47;
              }
              goto LABEL_43;
            }
LABEL_38:
            if (v19) {
              goto LABEL_47;
            }
LABEL_43:
            if (v22 < (int)v8) {
              unint64_t v74 = v74 & 0xFFFFFFFFCFFFFFFFLL | 0x20000000;
            }
            if (v23 < (int)a2) {
              unint64_t v74 = v74 & 0xFFFFFFFF3FFFFFFFLL | 0x80000000;
            }
LABEL_47:
            int v76 = 0;
            float v25 = *(float *)(v20 + 8);
            int v76 = LODWORD(v25);
            int v75 = 0;
            if (v25 != 0.0)
            {
              int v76 = LODWORD(v25);
              int v75 = 2139095040;
              if (v25 != INFINITY) {
                unint64_t v74 = v74 & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
              }
            }
            int v26 = *(_DWORD *)(v20 + 12);
            if (v26 <= (int)v17) {
              unint64_t v74 = v74 & 0xFFFFFF3FFFFFFFFFLL | 0x8000000000;
            }
            if (v26 != v17 + 1) {
              unint64_t v74 = v74 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
            }
            LODWORD(v8) = *(_DWORD *)v20;
            LODWORD(a2) = *(_DWORD *)(v20 + 4);
            if (v11)
            {
              std::vector<int>::pointer end = v68.__end_;
              if (v68.__end_ >= v68.__end_cap_.__value_)
              {
                std::vector<int>::pointer begin = v68.__begin_;
                int64_t v30 = v68.__end_ - v68.__begin_;
                unint64_t v31 = v30 + 1;
                if ((unint64_t)(v30 + 1) >> 62) {
                  goto LABEL_138;
                }
                int64_t v32 = (char *)v68.__end_cap_.__value_ - (char *)v68.__begin_;
                if (((char *)v68.__end_cap_.__value_ - (char *)v68.__begin_) >> 1 > v31) {
                  unint64_t v31 = v32 >> 1;
                }
                if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v33 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v33 = v31;
                }
                if (v33)
                {
                  int v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v68.__end_cap_, v33);
                  std::vector<int>::pointer begin = v68.__begin_;
                  std::vector<int>::pointer end = v68.__end_;
                }
                else
                {
                  int v34 = 0;
                }
                unsigned int v35 = (int *)&v34[4 * v30];
                int *v35 = *(_DWORD *)v20;
                uint64_t v28 = v35 + 1;
                while (end != begin)
                {
                  int v36 = *--end;
                  *--unsigned int v35 = v36;
                }
                v68.__begin_ = v35;
                v68.__end_ = v28;
                v68.__end_cap_.__value_ = (int *)&v34[4 * v33];
                if (begin) {
                  operator delete(begin);
                }
              }
              else
              {
                *v68.__end_ = v8;
                uint64_t v28 = end + 1;
              }
              v68.__end_ = v28;
            }
            if (v14)
            {
              std::vector<int>::pointer v37 = v67.__end_;
              if (v67.__end_ >= v67.__end_cap_.__value_)
              {
                std::vector<int>::pointer v39 = v67.__begin_;
                int64_t v40 = v67.__end_ - v67.__begin_;
                unint64_t v41 = v40 + 1;
                if ((unint64_t)(v40 + 1) >> 62) {
LABEL_138:
                }
                  std::vector<int>::__throw_length_error[abi:ne180100]();
                int64_t v42 = (char *)v67.__end_cap_.__value_ - (char *)v67.__begin_;
                if (((char *)v67.__end_cap_.__value_ - (char *)v67.__begin_) >> 1 > v41) {
                  unint64_t v41 = v42 >> 1;
                }
                if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v43 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v43 = v41;
                }
                if (v43)
                {
                  v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v67.__end_cap_, v43);
                  std::vector<int>::pointer v39 = v67.__begin_;
                  std::vector<int>::pointer v37 = v67.__end_;
                }
                else
                {
                  v44 = 0;
                }
                v45 = (int *)&v44[4 * v40];
                int *v45 = *(_DWORD *)(v20 + 4);
                v38 = v45 + 1;
                while (v37 != v39)
                {
                  int v46 = *--v37;
                  *--v45 = v46;
                }
                v67.__begin_ = v45;
                v67.__end_ = v38;
                v67.__end_cap_.__value_ = (int *)&v44[4 * v43];
                if (v39) {
                  operator delete(v39);
                }
              }
              else
              {
                *v67.__end_ = *(_DWORD *)(v20 + 4);
                v38 = v37 + 1;
              }
              v67.__end_ = v38;
            }
            if (v69)
            {
              (*(void (**)(uint64_t))(*(void *)v69 + 40))(v69);
              char v19 = 0;
            }
            else
            {
              char v19 = 0;
              ++v73;
            }
          }
        }
      }
      int v60 = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 24))(v15);
      a3 = v62;
      if (v60 != -1 && (*(unsigned int (**)(uint64_t))(*(void *)a1 + 24))(a1)) {
        unint64_t v74 = v74 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
      }
      if (v67.__begin_)
      {
        v67.__end_ = v67.__begin_;
        operator delete(v67.__begin_);
      }
      if (v68.__begin_)
      {
        v68.__end_ = v68.__begin_;
        operator delete(v68.__begin_);
      }
      unint64_t v8 = v74;
    }
    uint64_t v9 = v8 & 0x3FFFFFFF0000 | (2 * v8) & 0x2AAAAAAA0000 | (v8 >> 1) & 0x155555550000 | 7;
  }
  *a3 = v9;
  return v8;
}

void sub_20D406348(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  if (__p) {
    operator delete(__p);
  }
  if (a20) {
    operator delete(a20);
  }
  _Unwind_Resume(exception_object);
}

void fst::DfsVisit<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SccVisitor<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::AnyArcFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(uint64_t a1, uint64_t a2)
{
  if (*(void *)a2) {
    *(void *)(*(void *)a2 + 8) = **(void **)a2;
  }
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3) {
    *(void *)(v3 + 8) = 0;
  }
  uint64_t v4 = *(void *)(a2 + 16);
  if (v4)
  {
    *(void *)(v4 + 8) = 0;
    *(unsigned char *)(a2 + 52) = 0;
    **(void **)(a2 + 24) = **(void **)(a2 + 24) & 0xFFFFF0C3FFFFFFFFLL | 0x52800000000;
    *(void *)(a2 + 32) = a1;
    int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
    *(_DWORD *)(a2 + 44) = 0;
    *(_DWORD *)(a2 + 48) = 0;
    *(_DWORD *)(a2 + 40) = v5;
    operator new();
  }
  operator new();
}

void sub_20D406E20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  uint64_t v19 = va_arg(va1, void);
  uint64_t v20 = va_arg(va1, void);
  fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::~MemoryPool((uint64_t *)va);
  std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((uint64_t)va1);
  uint64_t v11 = *(void **)(v9 - 112);
  if (v11)
  {
    *(void *)(v9 - 104) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

void fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::MemoryPool(uint64_t a1)
{
  *(void *)a1 = off_26C2071A0;
  *(void *)(a1 + 8) = off_26C2077C8;
  *(_OWORD *)(a1 + 16) = xmmword_20D6B4AC0;
  *(void *)(a1 + 32) = a1 + 32;
  *(void *)(a1 + 40) = a1 + 32;
  *(void *)(a1 + 48) = 0;
  operator new[]();
}

void sub_20D406F7C(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v3);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v2);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::CountStates<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>(uint64_t a1)
{
  if ((*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 1, 0))
  {
    uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)a1 + 152);
    return v2(a1);
  }
  int v8 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 128))(a1, &v6);
  uint64_t v4 = 0;
  while (1)
  {
    while (!v6)
    {
      int v5 = v8;
      if (v8 >= v7) {
        return v4;
      }
      uint64_t v4 = (v4 + 1);
LABEL_13:
      int v8 = v5 + 1;
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)v6 + 16))(v6)) {
      break;
    }
    uint64_t v4 = (v4 + 1);
    if (!v6)
    {
      int v5 = v8;
      goto LABEL_13;
    }
    (*(void (**)(void))(*(void *)v6 + 32))();
  }
  if (v6) {
    (*(void (**)(void))(*(void *)v6 + 8))();
  }
  return v4;
}

void sub_20D40712C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Link>::Allocate(void *a1)
{
  unint64_t v2 = a1[1];
  if (v2 <= 0xDF) {
    operator new[]();
  }
  uint64_t v3 = a1[2];
  if (v3 + 56 > v2) {
    operator new[]();
  }
  uint64_t v4 = *(void *)(a1[4] + 16) + v3;
  a1[2] = v3 + 56;
  return v4;
}

void std::deque<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::push_back(void *a1, void *a2)
{
  uint64_t v4 = (char *)a1[2];
  int v5 = (char *)a1[1];
  uint64_t v6 = v4 - v5;
  if (v4 == v5) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = ((v4 - v5) << 6) - 1;
  }
  unint64_t v9 = a1[4];
  uint64_t v8 = a1[5];
  unint64_t v10 = v8 + v9;
  if (v7 == v8 + v9)
  {
    if (v9 >= 0x200)
    {
      a1[4] = v9 - 512;
      uint64_t v13 = *(void *)v5;
      uint64_t v11 = v5 + 8;
      uint64_t v12 = v13;
      a1[1] = v11;
      if ((char *)a1[3] == v4)
      {
        uint64_t v14 = (uint64_t)&v11[-*a1];
        if ((unint64_t)v11 <= *a1)
        {
          if (v4 == (char *)*a1) {
            unint64_t v42 = 1;
          }
          else {
            unint64_t v42 = (uint64_t)&v4[-*a1] >> 2;
          }
          unint64_t v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<RateMarker>>(v42);
          v45 = &v43[8 * (v42 >> 2)];
          int v46 = (uint64_t *)a1[1];
          uint64_t v4 = v45;
          uint64_t v47 = a1[2] - (void)v46;
          if (v47)
          {
            uint64_t v4 = &v45[v47 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v48 = 8 * (v47 >> 3);
            int v49 = &v43[8 * (v42 >> 2)];
            do
            {
              uint64_t v50 = *v46++;
              *(void *)int v49 = v50;
              v49 += 8;
              v48 -= 8;
            }
            while (v48);
          }
          int v51 = (char *)*a1;
          *a1 = v43;
          a1[1] = v45;
          a1[2] = v4;
          a1[3] = &v43[8 * v44];
          if (v51)
          {
            operator delete(v51);
            uint64_t v4 = (char *)a1[2];
          }
        }
        else
        {
          uint64_t v15 = v14 >> 3;
          BOOL v16 = v14 >> 3 < -1;
          uint64_t v17 = (v14 >> 3) + 2;
          if (v16) {
            uint64_t v18 = v17;
          }
          else {
            uint64_t v18 = v15 + 1;
          }
          uint64_t v19 = -(v18 >> 1);
          uint64_t v20 = v18 >> 1;
          unint64_t v21 = &v11[-8 * v20];
          int64_t v22 = v4 - v11;
          if (v4 == v11)
          {
            int v23 = v4;
          }
          else
          {
            memmove(&v11[-8 * v20], v11, v4 - v11);
            int v23 = (char *)a1[1];
          }
          uint64_t v4 = &v21[v22];
          a1[1] = &v23[8 * v19];
          a1[2] = &v21[v22];
        }
      }
      *(void *)uint64_t v4 = v12;
LABEL_82:
      a1[2] += 8;
LABEL_83:
      int v5 = (char *)a1[1];
      uint64_t v8 = a1[5];
      unint64_t v10 = a1[4] + v8;
      goto LABEL_84;
    }
    uint64_t v24 = v6 >> 3;
    float v25 = (char *)a1[3];
    int v26 = (char *)*a1;
    uint64_t v27 = (uint64_t)&v25[-*a1];
    if (v6 >> 3 < (unint64_t)(v27 >> 3))
    {
      uint64_t v28 = operator new(0x1000uLL);
      uint64_t v29 = v28;
      if (v25 == v4)
      {
        if (v26 == v5)
        {
          if (v4 == v5) {
            unint64_t v52 = 1;
          }
          else {
            unint64_t v52 = v27 >> 2;
          }
          uint64_t v53 = 2 * v52;
          std::vector<int>::pointer v54 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<RateMarker>>(v52);
          int v5 = &v54[(v53 + 6) & 0xFFFFFFFFFFFFFFF8];
          unint64_t v56 = (uint64_t *)a1[1];
          int v57 = v5;
          uint64_t v58 = a1[2] - (void)v56;
          if (v58)
          {
            int v57 = &v5[v58 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v59 = 8 * (v58 >> 3);
            int v60 = v5;
            do
            {
              uint64_t v61 = *v56++;
              *(void *)int v60 = v61;
              v60 += 8;
              v59 -= 8;
            }
            while (v59);
          }
          unint64_t v62 = (char *)*a1;
          *a1 = v54;
          a1[1] = v5;
          a1[2] = v57;
          a1[3] = &v54[8 * v55];
          if (v62)
          {
            operator delete(v62);
            int v5 = (char *)a1[1];
          }
        }
        *((void *)v5 - 1) = v29;
        uint64_t v63 = (char *)a1[1];
        uint64_t v64 = (char *)a1[2];
        a1[1] = v63 - 8;
        uint64_t v65 = *((void *)v63 - 1);
        a1[1] = v63;
        if (v64 == (char *)a1[3])
        {
          uint64_t v66 = (uint64_t)&v63[-*a1];
          if ((unint64_t)v63 <= *a1)
          {
            if (v64 == (char *)*a1) {
              unint64_t v97 = 1;
            }
            else {
              unint64_t v97 = (uint64_t)&v64[-*a1] >> 2;
            }
            v98 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<RateMarker>>(v97);
            v100 = &v98[8 * (v97 >> 2)];
            unint64_t v101 = (uint64_t *)a1[1];
            uint64_t v64 = v100;
            uint64_t v102 = a1[2] - (void)v101;
            if (v102)
            {
              uint64_t v64 = &v100[v102 & 0xFFFFFFFFFFFFFFF8];
              uint64_t v103 = 8 * (v102 >> 3);
              v104 = &v98[8 * (v97 >> 2)];
              do
              {
                uint64_t v105 = *v101++;
                *(void *)v104 = v105;
                v104 += 8;
                v103 -= 8;
              }
              while (v103);
            }
            uint64_t v106 = (char *)*a1;
            *a1 = v98;
            a1[1] = v100;
            a1[2] = v64;
            a1[3] = &v98[8 * v99];
            if (v106)
            {
              operator delete(v106);
              uint64_t v64 = (char *)a1[2];
            }
          }
          else
          {
            uint64_t v67 = v66 >> 3;
            BOOL v16 = v66 >> 3 < -1;
            uint64_t v68 = (v66 >> 3) + 2;
            if (v16) {
              uint64_t v69 = v68;
            }
            else {
              uint64_t v69 = v67 + 1;
            }
            uint64_t v70 = -(v69 >> 1);
            uint64_t v71 = v69 >> 1;
            v72 = &v63[-8 * v71];
            int64_t v73 = v64 - v63;
            if (v64 != v63)
            {
              memmove(&v63[-8 * v71], v63, v64 - v63);
              uint64_t v63 = (char *)a1[1];
            }
            uint64_t v64 = &v72[v73];
            a1[1] = &v63[8 * v70];
            a1[2] = &v72[v73];
          }
        }
        *(void *)uint64_t v64 = v65;
      }
      else
      {
        *(void *)uint64_t v4 = v28;
      }
      goto LABEL_82;
    }
    if (v25 == v26) {
      unint64_t v30 = 1;
    }
    else {
      unint64_t v30 = v27 >> 2;
    }
    unint64_t v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<RateMarker>>(v30);
    uint64_t v33 = v32;
    int v34 = &v31[8 * v24];
    *(void *)&long long v35 = v31;
    *((void *)&v35 + 1) = v34;
    long long v110 = v35;
    int v36 = operator new(0x1000uLL);
    *(void *)&long long v37 = v34;
    *((void *)&v37 + 1) = &v31[8 * v33];
    if (v24 == v33)
    {
      uint64_t v38 = 8 * v24;
      *(void *)&long long v39 = v110;
      if (v6 >= 1)
      {
        uint64_t v40 = v38 >> 3;
        if (v40 >= -1) {
          unint64_t v41 = v40 + 1;
        }
        else {
          unint64_t v41 = v40 + 2;
        }
        v34 -= 8 * (v41 >> 1);
        *(void *)&long long v37 = v34;
        *((void *)&v39 + 1) = v34;
        goto LABEL_56;
      }
      uint64_t v74 = v38 >> 2;
      if (v4 == v5) {
        unint64_t v75 = 1;
      }
      else {
        unint64_t v75 = v74;
      }
      int v76 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<RateMarker>>(v75);
      int v34 = &v76[8 * (v75 >> 2)];
      *(void *)&long long v39 = v76;
      *((void *)&v39 + 1) = v34;
      *(void *)&long long v37 = v34;
      *((void *)&v37 + 1) = &v76[8 * v77];
      if (!v31) {
        goto LABEL_56;
      }
      long long v107 = v37;
      long long v110 = v39;
      operator delete(v31);
      long long v37 = v107;
    }
    long long v39 = v110;
LABEL_56:
    *(void *)int v34 = v36;
    *(void *)&long long v37 = v37 + 8;
    for (uint64_t i = a1[2]; i != a1[1]; i -= 8)
    {
      uint64_t v79 = (void *)*((void *)&v39 + 1);
      if (*((void *)&v39 + 1) == (void)v39)
      {
        v81 = (unsigned char *)v37;
        if ((unint64_t)v37 >= *((void *)&v37 + 1))
        {
          if (*((void *)&v37 + 1) == *((void *)&v39 + 1)) {
            unint64_t v86 = 1;
          }
          else {
            unint64_t v86 = (uint64_t)(*((void *)&v37 + 1) - *((void *)&v39 + 1)) >> 2;
          }
          unint64_t v87 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<RateMarker>>(v86);
          v80 = &v87[(2 * v86 + 6) & 0xFFFFFFFFFFFFFFF8];
          uint64_t v89 = v80;
          uint64_t v90 = v81 - (unsigned char *)v79;
          if (v81 != (unsigned char *)v79)
          {
            uint64_t v89 = &v80[v90 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v91 = 8 * (v90 >> 3);
            v92 = v80;
            int v93 = v79;
            do
            {
              uint64_t v94 = *v93++;
              *(void *)v92 = v94;
              v92 += 8;
              v91 -= 8;
            }
            while (v91);
          }
          *(void *)&long long v39 = v87;
          *((void *)&v39 + 1) = v80;
          *(void *)&long long v37 = v89;
          *((void *)&v37 + 1) = &v87[8 * v88];
          if (v79)
          {
            long long v108 = v37;
            long long v112 = v39;
            operator delete(v79);
            long long v37 = v108;
            long long v39 = v112;
          }
        }
        else
        {
          uint64_t v82 = (uint64_t)(*((void *)&v37 + 1) - v37) >> 3;
          if (v82 >= -1) {
            uint64_t v83 = v82 + 1;
          }
          else {
            uint64_t v83 = v82 + 2;
          }
          uint64_t v84 = v83 >> 1;
          uint64_t v85 = v37 + 8 * (v83 >> 1);
          v80 = (char *)(v85 - (v37 - *((void *)&v39 + 1)));
          if ((void)v37 == *((void *)&v39 + 1))
          {
            v81 = (unsigned char *)*((void *)&v39 + 1);
          }
          else
          {
            uint64_t v109 = *((void *)&v37 + 1);
            uint64_t v111 = v39;
            memmove((void *)(v85 - (v37 - *((void *)&v39 + 1))), *((const void **)&v39 + 1), v37 - *((void *)&v39 + 1));
            *((void *)&v37 + 1) = v109;
            *(void *)&long long v39 = v111;
          }
          *((void *)&v39 + 1) = v80;
          *(void *)&long long v37 = &v81[8 * v84];
        }
      }
      else
      {
        v80 = (char *)*((void *)&v39 + 1);
      }
      uint64_t v95 = *(void *)(i - 8);
      *((void *)v80 - 1) = v95;
      *((void *)&v39 + 1) -= 8;
    }
    unint64_t v96 = (char *)*a1;
    *(_OWORD *)a1 = v39;
    *((_OWORD *)a1 + 1) = v37;
    if (v96) {
      operator delete(v96);
    }
    goto LABEL_83;
  }
LABEL_84:
  *(void *)(*(void *)&v5[(v10 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v10 & 0x1FF)) = *a2;
  a1[5] = v8 + 1;
}

void sub_20D4077A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, long long a11)
{
  operator delete(v11);
  if ((void)a11) {
    operator delete((void *)a11);
  }
  _Unwind_Resume(a1);
}

void fst::SccVisitor<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::InitState(uint64_t *a1, int a2, int a3)
{
  uint64_t v6 = a1[10];
  uint64_t v7 = *(_DWORD **)(v6 + 8);
  unint64_t v8 = *(void *)(v6 + 16);
  if ((unint64_t)v7 >= v8)
  {
    unint64_t v10 = *(_DWORD **)v6;
    uint64_t v11 = ((uint64_t)v7 - *(void *)v6) >> 2;
    unint64_t v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 62) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v13 = v8 - (void)v10;
    if (v13 >> 1 > v12) {
      unint64_t v12 = v13 >> 1;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v12;
    }
    if (v14)
    {
      uint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v6 + 16, v14);
      unint64_t v10 = *(_DWORD **)v6;
      uint64_t v7 = *(_DWORD **)(v6 + 8);
    }
    else
    {
      uint64_t v15 = 0;
    }
    BOOL v16 = &v15[4 * v11];
    uint64_t v17 = &v15[4 * v14];
    *(_DWORD *)BOOL v16 = a2;
    unint64_t v9 = v16 + 4;
    while (v7 != v10)
    {
      int v18 = *--v7;
      *((_DWORD *)v16 - 1) = v18;
      v16 -= 4;
    }
    *(void *)uint64_t v6 = v16;
    *(void *)(v6 + 8) = v9;
    *(void *)(v6 + 16) = v17;
    if (v10) {
      operator delete(v10);
    }
  }
  else
  {
    _DWORD *v7 = a2;
    unint64_t v9 = v7 + 1;
  }
  *(void *)(v6 + 8) = v9;
  unint64_t v19 = a2;
  uint64_t v20 = *(void *)a1[7];
  if (a2 >= (unint64_t)((*(void *)(a1[7] + 8) - v20) >> 2))
  {
    do
    {
      uint64_t v21 = *a1;
      if (*a1)
      {
        unint64_t v22 = *(void *)(v21 + 16);
        int v23 = *(_DWORD **)(v21 + 8);
        if ((unint64_t)v23 >= v22)
        {
          float v25 = *(_DWORD **)v21;
          uint64_t v26 = ((uint64_t)v23 - *(void *)v21) >> 2;
          unint64_t v27 = v26 + 1;
          if ((unint64_t)(v26 + 1) >> 62) {
            goto LABEL_78;
          }
          uint64_t v28 = v22 - (void)v25;
          if (v28 >> 1 > v27) {
            unint64_t v27 = v28 >> 1;
          }
          if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v29 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v29 = v27;
          }
          if (v29)
          {
            unint64_t v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v21 + 16, v29);
            float v25 = *(_DWORD **)v21;
            int v23 = *(_DWORD **)(v21 + 8);
          }
          else
          {
            unint64_t v30 = 0;
          }
          unint64_t v31 = &v30[4 * v26];
          *(_DWORD *)unint64_t v31 = -1;
          uint64_t v24 = v31 + 4;
          while (v23 != v25)
          {
            int v32 = *--v23;
            *((_DWORD *)v31 - 1) = v32;
            v31 -= 4;
          }
          *(void *)uint64_t v21 = v31;
          *(void *)(v21 + 8) = v24;
          *(void *)(v21 + 16) = &v30[4 * v29];
          if (v25) {
            operator delete(v25);
          }
        }
        else
        {
          *int v23 = -1;
          uint64_t v24 = v23 + 1;
        }
        *(void *)(v21 + 8) = v24;
      }
      uint64_t v33 = a1[1];
      if (v33)
      {
        char v66 = 0;
        std::vector<BOOL>::push_back(v33, &v66);
      }
      uint64_t v34 = a1[2];
      char v65 = 0;
      std::vector<BOOL>::push_back(v34, &v65);
      uint64_t v35 = a1[7];
      int v36 = *(_DWORD **)(v35 + 8);
      unint64_t v37 = *(void *)(v35 + 16);
      if ((unint64_t)v36 >= v37)
      {
        long long v39 = *(_DWORD **)v35;
        uint64_t v40 = ((uint64_t)v36 - *(void *)v35) >> 2;
        unint64_t v41 = v40 + 1;
        if ((unint64_t)(v40 + 1) >> 62) {
          goto LABEL_78;
        }
        uint64_t v42 = v37 - (void)v39;
        if (v42 >> 1 > v41) {
          unint64_t v41 = v42 >> 1;
        }
        if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v43 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v43 = v41;
        }
        if (v43)
        {
          uint64_t v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v35 + 16, v43);
          long long v39 = *(_DWORD **)v35;
          int v36 = *(_DWORD **)(v35 + 8);
        }
        else
        {
          uint64_t v44 = 0;
        }
        v45 = &v44[4 * v40];
        *(_DWORD *)v45 = -1;
        uint64_t v38 = v45 + 4;
        while (v36 != v39)
        {
          int v46 = *--v36;
          *((_DWORD *)v45 - 1) = v46;
          v45 -= 4;
        }
        *(void *)uint64_t v35 = v45;
        *(void *)(v35 + 8) = v38;
        *(void *)(v35 + 16) = &v44[4 * v43];
        if (v39) {
          operator delete(v39);
        }
      }
      else
      {
        _DWORD *v36 = -1;
        uint64_t v38 = v36 + 1;
      }
      *(void *)(v35 + 8) = v38;
      uint64_t v47 = a1[8];
      uint64_t v48 = *(_DWORD **)(v47 + 8);
      unint64_t v49 = *(void *)(v47 + 16);
      if ((unint64_t)v48 >= v49)
      {
        int v51 = *(_DWORD **)v47;
        uint64_t v52 = ((uint64_t)v48 - *(void *)v47) >> 2;
        unint64_t v53 = v52 + 1;
        if ((unint64_t)(v52 + 1) >> 62) {
LABEL_78:
        }
          std::vector<int>::__throw_length_error[abi:ne180100]();
        uint64_t v54 = v49 - (void)v51;
        if (v54 >> 1 > v53) {
          unint64_t v53 = v54 >> 1;
        }
        if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v55 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v55 = v53;
        }
        if (v55)
        {
          unint64_t v56 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v47 + 16, v55);
          int v51 = *(_DWORD **)v47;
          uint64_t v48 = *(_DWORD **)(v47 + 8);
        }
        else
        {
          unint64_t v56 = 0;
        }
        int v57 = &v56[4 * v52];
        *(_DWORD *)int v57 = -1;
        uint64_t v50 = v57 + 4;
        while (v48 != v51)
        {
          int v58 = *--v48;
          *((_DWORD *)v57 - 1) = v58;
          v57 -= 4;
        }
        *(void *)uint64_t v47 = v57;
        *(void *)(v47 + 8) = v50;
        *(void *)(v47 + 16) = &v56[4 * v55];
        if (v51) {
          operator delete(v51);
        }
      }
      else
      {
        *uint64_t v48 = -1;
        uint64_t v50 = v48 + 1;
      }
      *(void *)(v47 + 8) = v50;
      uint64_t v59 = a1[9];
      char v64 = 0;
      std::vector<BOOL>::push_back(v59, &v64);
      uint64_t v20 = *(void *)a1[7];
    }
    while (v19 >= (*(void *)(a1[7] + 8) - v20) >> 2);
  }
  *(_DWORD *)(v20 + 4 * v19) = *((_DWORD *)a1 + 11);
  int v60 = (void *)a1[9];
  *(_DWORD *)(*(void *)a1[8] + 4 * v19) = *((_DWORD *)a1 + 11);
  unint64_t v61 = v19 >> 6;
  uint64_t v62 = 1 << v19;
  *(void *)(*v60 + 8 * (v19 >> 6)) |= 1 << v19;
  uint64_t v63 = (void *)a1[1];
  if (*((_DWORD *)a1 + 10) == a3)
  {
    if (v63) {
      *(void *)(*v63 + 8 * v61) |= v62;
    }
  }
  else
  {
    if (v63) {
      *(void *)(*v63 + 8 * v61) &= ~v62;
    }
    *(void *)a1[3] = *(void *)a1[3] & 0xFFFFFCFFFFFFFFFFLL | 0x20000000000;
  }
  ++*((_DWORD *)a1 + 11);
}

void fst::SccVisitor<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::FinishState(uint64_t a1, int a2, int a3)
{
  if ((*(float (**)(void))(**(void **)(a1 + 32) + 32))(*(void *)(a1 + 32)) == INFINITY)
  {
    unint64_t v6 = a2;
  }
  else
  {
    unint64_t v6 = a2;
    *(void *)(**(void **)(a1 + 16) + (((unint64_t)a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a2;
  }
  uint64_t v7 = **(void **)(a1 + 64);
  if (*(_DWORD *)(**(void **)(a1 + 56) + 4 * v6) != *(_DWORD *)(v7 + 4 * v6)) {
    goto LABEL_17;
  }
  char v8 = 0;
  unint64_t v9 = *(void **)(a1 + 80);
  uint64_t v10 = v9[1];
  uint64_t v11 = **(void **)(a1 + 16);
  unint64_t v12 = (int *)(((v10 - *v9) & 0xFFFFFFFFFFFFFFFCLL) + *v9 - 4);
  do
  {
    unint64_t v13 = *v12--;
    v8 |= *(void *)(v11 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v13;
  }
  while (v13 != a2);
  unint64_t v14 = *(void **)a1;
  uint64_t v15 = **(void **)(a1 + 72);
  for (uint64_t i = (int *)(v10 - 4); ; --i)
  {
    unint64_t v17 = *i;
    if (v14) {
      *(_DWORD *)(*v14 + 4 * v17) = *(_DWORD *)(a1 + 48);
    }
    unint64_t v18 = v17 >> 6;
    uint64_t v19 = 1 << v17;
    if ((v8 & 1) == 0) {
      break;
    }
    *(void *)(v11 + 8 * v18) |= v19;
    *(void *)(v15 + 8 * v18) &= ~v19;
    if (v17 == a2)
    {
      v9[1] = i;
      goto LABEL_16;
    }
LABEL_14:
    ;
  }
  *(void *)(v15 + 8 * v18) &= ~v19;
  if (v17 != a2) {
    goto LABEL_14;
  }
  v9[1] = i;
  **(void **)(a1 + 24) = **(void **)(a1 + 24) & 0xFFFFF3FFFFFFFFFFLL | 0x80000000000;
LABEL_16:
  ++*(_DWORD *)(a1 + 48);
LABEL_17:
  if (a3 != -1)
  {
    uint64_t v20 = **(void **)(a1 + 16);
    if ((*(void *)(v20 + ((v6 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v6)) {
      *(void *)(v20 + (((unint64_t)a3 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a3;
    }
    int v21 = *(_DWORD *)(v7 + 4 * v6);
    if (v21 < *(_DWORD *)(v7 + 4 * a3)) {
      *(_DWORD *)(v7 + 4 * a3) = v21;
    }
  }
}

double fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Link>::~MemoryArena(void *a1)
{
  *a1 = off_26C2077C8;
  unint64_t v2 = a1 + 3;
  for (uint64_t i = (void *)a1[4]; i != v2; uint64_t i = (void *)i[1])
  {
    uint64_t v4 = i[2];
    if (v4) {
      MEMORY[0x2105595C0](v4, 0x1000C8077774924);
    }
  }
  std::__list_imp<char *>::clear(v2);
  *(void *)&double result = kaldi::CuMatrixBase<float>::~CuMatrixBase(a1).n128_u64[0];
  return result;
}

double fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::~MemoryPool(void *a1)
{
  *a1 = off_26C2071A0;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Link>::~MemoryArena(a1 + 1);
  *(void *)&double result = kaldi::CuMatrixBase<float>::~CuMatrixBase(a1).n128_u64[0];
  return result;
}

uint64_t fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Link>::Size()
{
  return 56;
}

void fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Link>::~MemoryArena(void *a1)
{
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Link>::~MemoryArena(a1);
  JUMPOUT(0x2105595E0);
}

uint64_t fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Size()
{
  return 48;
}

void fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::~MemoryPool(void *a1)
{
  *a1 = off_26C2071A0;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Link>::~MemoryArena(a1 + 1);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(a1);
  JUMPOUT(0x2105595E0);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::NumOutputEpsilons(uint64_t a1, int a2)
{
  return *(void *)(*(void *)(*(void *)(*(void *)(a1 + 8) + 64) + 8 * a2) + 16);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::NumInputEpsilons(uint64_t a1, int a2)
{
  return *(void *)(*(void *)(*(void *)(*(void *)(a1 + 8) + 64) + 8 * a2) + 8);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::NumArcs(uint64_t a1, int a2)
{
  return (uint64_t)(*(void *)(*(void *)(*(void *)(*(void *)(a1 + 8) + 64) + 8 * a2) + 32)
                 - *(void *)(*(void *)(*(void *)(*(void *)(a1 + 8) + 64) + 8 * a2) + 24)) >> 4;
}

float fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Final(uint64_t a1, int a2)
{
  return **(float **)(*(void *)(*(void *)(a1 + 8) + 64) + 8 * a2);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Start(uint64_t a1)
{
  return *(unsigned int *)(*(void *)(a1 + 8) + 88);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::HasSequentialStates(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 16))();
}

void *std::vector<fst::QueueType>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >> 62) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v4 = 4 * a2;
    int v5 = (char *)operator new(4 * a2);
    *a1 = v5;
    a1[2] = &v5[4 * a2];
    bzero(v5, 4 * a2);
    a1[1] = &v5[v4];
  }
  return a1;
}

void sub_20D408088(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::TopOrderQueue<int>::TopOrderQueue(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 8) = 4;
  *(unsigned char *)(a1 + 12) = 0;
  *(void *)a1 = off_26C207AF0;
  *(void *)(a1 + 16) = 0xFFFFFFFF00000000;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 24), *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  std::vector<int>::vector((std::vector<int> *)(a1 + 48), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2, &fst::kNoStateId);
  return a1;
}

void sub_20D408144(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 32) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<fst::QueueBase<int> *,std::allocator<fst::QueueBase<int> *>>::resize(char **a1, unint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  unint64_t v5 = (v3 - *a1) >> 3;
  if (a2 <= v5)
  {
    if (a2 >= v5) {
      return;
    }
    BOOL v16 = &v4[8 * a2];
    goto LABEL_20;
  }
  unint64_t v6 = a2 - v5;
  uint64_t v7 = a1[2];
  if (a2 - v5 <= (v7 - v3) >> 3)
  {
    bzero(a1[1], 8 * v6);
    BOOL v16 = &v3[8 * v6];
LABEL_20:
    a1[1] = v16;
    return;
  }
  if (a2 >> 61) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v8 = v7 - v4;
  uint64_t v9 = v8 >> 2;
  if (v8 >> 2 <= a2) {
    uint64_t v9 = a2;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v10 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v10 = v9;
  }
  if (v10 >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  uint64_t v11 = (char *)operator new(8 * v10);
  unint64_t v12 = &v11[8 * v5];
  unint64_t v13 = &v11[8 * v10];
  bzero(v12, 8 * v6);
  unint64_t v14 = &v12[8 * v6];
  if (v3 != v4)
  {
    do
    {
      uint64_t v15 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v12 - 1) = v15;
      v12 -= 8;
    }
    while (v3 != v4);
    uint64_t v3 = *a1;
  }
  *a1 = v12;
  a1[1] = v14;
  a1[2] = v13;
  if (v3)
  {
    operator delete(v3);
  }
}

double fst::SccQueue<int,fst::QueueBase<int>>::Clear_(uint64_t a1)
{
  unint64_t v2 = *(int *)(a1 + 32);
  if ((int)v2 <= *(_DWORD *)(a1 + 36))
  {
    do
    {
      uint64_t v3 = *(void *)(**(void **)(a1 + 16) + 8 * v2);
      if (v3)
      {
        (*(void (**)(uint64_t))(*(void *)v3 + 56))(v3);
      }
      else
      {
        uint64_t v4 = *(void *)(a1 + 40);
        if (v2 < (*(void *)(a1 + 48) - v4) >> 2) {
          *(_DWORD *)(v4 + 4 * v2) = -1;
        }
      }
    }
    while ((uint64_t)v2++ < *(int *)(a1 + 36));
  }
  double result = NAN;
  *(void *)(a1 + 32) = 0xFFFFFFFF00000000;
  return result;
}

uint64_t fst::SccQueue<int,fst::QueueBase<int>>::Empty_(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 36);
  unint64_t v2 = *(int *)(a1 + 32);
  if ((int)v2 < v1) {
    return 0;
  }
  if ((int)v2 > v1) {
    return 1;
  }
  uint64_t v4 = *(void *)(**(void **)(a1 + 16) + 8 * v2);
  if (v4) {
    return (*(uint64_t (**)(void))(*(void *)v4 + 48))(*(void *)(**(void **)(a1 + 16) + 8 * v2));
  }
  uint64_t v5 = *(void *)(a1 + 40);
  if (v2 >= (*(void *)(a1 + 48) - v5) >> 2) {
    return 1;
  }
  return *(_DWORD *)(v5 + 4 * v2) == -1;
}

uint64_t fst::SccQueue<int,fst::QueueBase<int>>::Update_(uint64_t a1, int a2)
{
  uint64_t result = *(void *)(**(void **)(a1 + 16) + 8 * *(int *)(**(void **)(a1 + 24) + 4 * a2));
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 40))();
  }
  return result;
}

uint64_t fst::SccQueue<int,fst::QueueBase<int>>::Dequeue_(uint64_t a1)
{
  unint64_t v2 = *(int *)(a1 + 32);
  uint64_t result = *(void *)(**(void **)(a1 + 16) + 8 * v2);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 32))();
  }
  uint64_t v5 = a1 + 40;
  uint64_t v4 = *(void *)(a1 + 40);
  if (v2 < (*(void *)(v5 + 8) - v4) >> 2) {
    *(_DWORD *)(v4 + 4 * v2) = -1;
  }
  return result;
}

char *fst::SccQueue<int,fst::QueueBase<int>>::Enqueue_(uint64_t a1, int a2)
{
  int v4 = *(_DWORD *)(a1 + 32);
  int v5 = *(_DWORD *)(a1 + 36);
  uint64_t v6 = a2;
  uint64_t v7 = **(void **)(a1 + 24);
  int v8 = *(_DWORD *)(v7 + 4 * a2);
  if (v4 > v5)
  {
    *(_DWORD *)(a1 + 36) = v8;
LABEL_3:
    *(_DWORD *)(a1 + 32) = v8;
    goto LABEL_7;
  }
  if (v8 <= v5)
  {
    if (v8 < v4) {
      goto LABEL_3;
    }
  }
  else
  {
    *(_DWORD *)(a1 + 36) = v8;
  }
LABEL_7:
  unint64_t v9 = *(int *)(v7 + 4 * a2);
  uint64_t v10 = *(void *)(**(void **)(a1 + 16) + 8 * v9);
  if (v10)
  {
    uint64_t v11 = *(uint64_t (**)(void))(*(void *)v10 + 24);
    return (char *)v11();
  }
  else
  {
    uint64_t result = *(char **)(a1 + 40);
    unint64_t v13 = *(char **)(a1 + 48);
    unint64_t v14 = (v13 - result) >> 2;
    if (v14 <= v9)
    {
      uint64_t v15 = (void *)(a1 + 56);
      do
      {
        if ((unint64_t)v13 >= *v15)
        {
          unint64_t v17 = v14 + 1;
          if ((v14 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v18 = *v15 - (void)result;
          if (v18 >> 1 > v17) {
            unint64_t v17 = v18 >> 1;
          }
          if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v19 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v19 = v17;
          }
          if (v19)
          {
            uint64_t v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 56, v19);
            uint64_t result = *(char **)(a1 + 40);
            unint64_t v13 = *(char **)(a1 + 48);
          }
          else
          {
            uint64_t v20 = 0;
          }
          int v21 = &v20[4 * v14];
          *(_DWORD *)int v21 = -1;
          BOOL v16 = v21 + 4;
          while (v13 != result)
          {
            int v22 = *((_DWORD *)v13 - 1);
            v13 -= 4;
            *((_DWORD *)v21 - 1) = v22;
            v21 -= 4;
          }
          *(void *)(a1 + 40) = v21;
          *(void *)(a1 + 48) = v16;
          *(void *)(a1 + 56) = &v20[4 * v19];
          if (result)
          {
            operator delete(result);
            uint64_t result = *(char **)(a1 + 40);
          }
          else
          {
            uint64_t result = v21;
          }
        }
        else
        {
          *(_DWORD *)unint64_t v13 = -1;
          BOOL v16 = v13 + 4;
        }
        *(void *)(a1 + 48) = v16;
        unint64_t v14 = (v16 - result) >> 2;
        unint64_t v9 = *(int *)(**(void **)(a1 + 24) + 4 * v6);
        unint64_t v13 = v16;
      }
      while (v14 <= v9);
    }
    *(_DWORD *)&result[4 * v9] = a2;
  }
  return result;
}

uint64_t fst::SccQueue<int,fst::QueueBase<int>>::Head_(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 32);
  if (v2 <= *(_DWORD *)(a1 + 36))
  {
    while (1)
    {
      uint64_t v4 = *(void *)(**(void **)(a1 + 16) + 8 * v2);
      if (v4)
      {
        char v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 48))(v4);
        int v3 = *(_DWORD *)(a1 + 32);
        if (v5) {
          goto LABEL_10;
        }
        unint64_t v6 = v3;
        if (*(void *)(**(void **)(a1 + 16) + 8 * v3)) {
          goto LABEL_11;
        }
      }
      else
      {
        unint64_t v6 = v2;
        int v3 = v2;
      }
      uint64_t v7 = *(void *)(a1 + 40);
      if (v6 < (*(void *)(a1 + 48) - v7) >> 2 && *(_DWORD *)(v7 + 4 * v6) != -1) {
        goto LABEL_11;
      }
LABEL_10:
      int v2 = v3 + 1;
      *(_DWORD *)(a1 + 32) = v3 + 1;
      if (v3++ >= *(_DWORD *)(a1 + 36)) {
        goto LABEL_11;
      }
    }
  }
  int v3 = *(_DWORD *)(a1 + 32);
LABEL_11:
  uint64_t v9 = *(void *)(**(void **)(a1 + 16) + 8 * v3);
  if (!v9) {
    return *(unsigned int *)(*(void *)(a1 + 40) + 4 * v3);
  }
  uint64_t v10 = *(uint64_t (**)(void))(*(void *)v9 + 16);
  return v10();
}

void fst::SccQueue<int,fst::QueueBase<int>>::~SccQueue(void *a1)
{
  *a1 = off_26C208938;
  int v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x2105595E0);
}

void *fst::SccQueue<int,fst::QueueBase<int>>::~SccQueue(void *a1)
{
  *a1 = off_26C208938;
  int v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  return a1;
}

void fst::FifoQueue<int>::Clear_(void *a1)
{
  int v2 = (void **)a1[3];
  uint64_t v3 = a1[4];
  a1[7] = 0;
  unint64_t v4 = v3 - (void)v2;
  if (v4 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v5 = a1[4];
      int v2 = (void **)(a1[3] + 8);
      a1[3] = v2;
      unint64_t v4 = v5 - (void)v2;
    }
    while (v4 > 0x10);
  }
  if (v4 >> 3 == 1)
  {
    uint64_t v6 = 512;
  }
  else
  {
    if (v4 >> 3 != 2) {
      return;
    }
    uint64_t v6 = 1024;
  }
  a1[6] = v6;
}

BOOL fst::FifoQueue<int>::Empty_(uint64_t a1)
{
  return *(void *)(a1 + 56) == 0;
}

void fst::FifoQueue<int>::Dequeue_(uint64_t a1)
{
}

void std::deque<int>::__maybe_remove_back_spare[abi:ne180100](void *a1)
{
  uint64_t v2 = a1[1];
  uint64_t v1 = a1[2];
  if (v1 == v2) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = ((v1 - v2) << 7) - 1;
  }
  if ((unint64_t)(v3 - (a1[5] + a1[4])) >= 0x800)
  {
    operator delete(*(void **)(v1 - 8));
    a1[2] -= 8;
  }
}

void fst::FifoQueue<int>::Enqueue_(uint64_t a1, int a2)
{
  int v2 = a2;
  std::deque<int>::push_front((char **)(a1 + 16), &v2);
}

void std::deque<int>::push_front(char **a1, _DWORD *a2)
{
  unint64_t v4 = (unint64_t)a1[4];
  if (!v4)
  {
    uint64_t v5 = a1[1];
    uint64_t v6 = a1[2];
    uint64_t v7 = ((v6 - v5) << 7) - 1;
    if (v6 == v5) {
      uint64_t v7 = 0;
    }
    if ((unint64_t)(v7 - (void)a1[5]) < 0x400)
    {
      int v8 = a1[3];
      uint64_t v9 = *a1;
      uint64_t v10 = v8 - *a1;
      if (v6 - v5 >= (unint64_t)v10)
      {
        if (v8 == v9) {
          unint64_t v11 = 1;
        }
        else {
          unint64_t v11 = v10 >> 2;
        }
        uint64_t v47 = a1 + 3;
        unint64_t v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<RateMarker>>(v11);
        uint64_t v44 = v43;
        v45 = v43;
        int v46 = &v43[8 * v12];
        uint64_t v42 = operator new(0x1000uLL);
        std::__split_buffer<std::shared_ptr<Agglomerate> *,std::allocator<std::shared_ptr<Agglomerate> *>>::push_back(&v43, &v42);
        unint64_t v14 = (uint64_t *)a1[1];
        unint64_t v13 = a1[2];
        uint64_t v15 = v45;
        while (v14 != (uint64_t *)v13)
        {
          if (v15 == v46)
          {
            unint64_t v17 = v43;
            BOOL v16 = v44;
            if (v44 <= v43)
            {
              if (v15 == v43) {
                unint64_t v23 = 1;
              }
              else {
                unint64_t v23 = (v15 - v43) >> 2;
              }
              uint64_t v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<RateMarker>>(v23);
              uint64_t v27 = v15 - v16;
              BOOL v26 = v15 == v16;
              uint64_t v15 = &v24[8 * (v23 >> 2)];
              if (!v26)
              {
                uint64_t v15 = &v24[8 * (v23 >> 2) + (v27 & 0xFFFFFFFFFFFFFFF8)];
                uint64_t v28 = 8 * (v27 >> 3);
                unint64_t v29 = &v24[8 * (v23 >> 2)];
                do
                {
                  uint64_t v30 = *(void *)v16;
                  v16 += 8;
                  *(void *)unint64_t v29 = v30;
                  v29 += 8;
                  v28 -= 8;
                }
                while (v28);
              }
              unint64_t v43 = v24;
              uint64_t v44 = &v24[8 * (v23 >> 2)];
              v45 = v15;
              int v46 = &v24[8 * v25];
              if (v17) {
                operator delete(v17);
              }
            }
            else
            {
              uint64_t v18 = (v44 - v43) >> 3;
              if (v18 >= -1) {
                uint64_t v19 = v18 + 1;
              }
              else {
                uint64_t v19 = v18 + 2;
              }
              uint64_t v20 = &v44[-8 * (v19 >> 1)];
              int64_t v21 = v15 - v44;
              if (v15 != v44)
              {
                memmove(&v44[-8 * (v19 >> 1)], v44, v15 - v44);
                uint64_t v15 = v16;
              }
              int v22 = &v15[-8 * (v19 >> 1)];
              uint64_t v15 = &v20[v21];
              uint64_t v44 = v22;
              v45 = &v20[v21];
            }
          }
          uint64_t v31 = *v14++;
          *(void *)uint64_t v15 = v31;
          uint64_t v15 = v45 + 8;
          v45 += 8;
          unint64_t v13 = a1[2];
        }
        int v32 = *a1;
        uint64_t v33 = v44;
        *a1 = v43;
        a1[1] = v33;
        uint64_t v34 = v46;
        a1[2] = v15;
        a1[3] = v34;
        if (v15 - v33 == 8) {
          uint64_t v35 = 512;
        }
        else {
          uint64_t v35 = (uint64_t)(a1[4] + 1024);
        }
        a1[4] = (char *)v35;
        if (v32) {
          operator delete(v32);
        }
      }
      else
      {
        if (v5 == v9)
        {
          unint64_t v43 = (char *)operator new(0x1000uLL);
          std::__split_buffer<std::shared_ptr<Agglomerate> *,std::allocator<std::shared_ptr<Agglomerate> *>>::push_back(a1, &v43);
          int v36 = a1[2];
          unint64_t v43 = (char *)*((void *)v36 - 1);
          a1[2] = v36 - 8;
        }
        else
        {
          unint64_t v43 = (char *)operator new(0x1000uLL);
        }
        std::__split_buffer<std::shared_ptr<Agglomerate> *,std::allocator<std::shared_ptr<Agglomerate> *>>::push_front((uint64_t)a1, &v43);
        if (a1[2] - a1[1] == 8) {
          uint64_t v37 = 512;
        }
        else {
          uint64_t v37 = (uint64_t)(a1[4] + 1024);
        }
        a1[4] = (char *)v37;
      }
    }
    else
    {
      a1[4] = (char *)1024;
      unint64_t v43 = (char *)*((void *)v6 - 1);
      a1[2] = v6 - 8;
      std::__split_buffer<std::shared_ptr<Agglomerate> *,std::allocator<std::shared_ptr<Agglomerate> *>>::push_front((uint64_t)a1, &v43);
    }
    unint64_t v4 = (unint64_t)a1[4];
  }
  uint64_t v38 = a1[1];
  long long v39 = &v38[8 * (v4 >> 10)];
  if (a1[2] == v38) {
    uint64_t v40 = 0;
  }
  else {
    uint64_t v40 = *(void *)v39 + 4 * (v4 & 0x3FF);
  }
  if (v40 == *(void *)v39) {
    uint64_t v40 = *((void *)v39 - 1) + 4096;
  }
  *(_DWORD *)(v40 - 4) = *a2;
  uint64_t v41 = (uint64_t)(a1[5] + 1);
  a1[4] = (char *)(v4 - 1);
  a1[5] = (char *)v41;
}

void sub_20D408C04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  operator delete(v10);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::FifoQueue<int>::Head_(void *a1)
{
  unint64_t v1 = a1[7] + a1[6] - 1;
  return *(unsigned int *)(*(void *)(a1[3] + ((v1 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v1 & 0x3FF));
}

void fst::FifoQueue<int>::~FifoQueue(uint64_t a1)
{
  std::deque<int>::~deque[abi:ne180100](a1 + 16);
  JUMPOUT(0x2105595E0);
}

uint64_t fst::FifoQueue<int>::~FifoQueue(uint64_t a1)
{
  return a1;
}

uint64_t fst::ShortestFirstQueue<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::TropicalWeightTpl<float>>>,false>::Clear_(uint64_t result)
{
  *(_DWORD *)(result + 104) = 0;
  return result;
}

BOOL fst::ShortestFirstQueue<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::TropicalWeightTpl<float>>>,false>::Empty_(uint64_t a1)
{
  return *(_DWORD *)(a1 + 104) == 0;
}

uint64_t fst::ShortestFirstQueue<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::TropicalWeightTpl<float>>>,false>::Dequeue_(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = 0;
  uint64_t v3 = *(int *)(result + 104) - 1;
  unint64_t v4 = *(int **)(result + 56);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[v3];
  *unint64_t v4 = v6;
  uint64_t v7 = *(void *)(result + 32);
  *(_DWORD *)(v7 + 4 * v6) = 0;
  v4[v3] = v5;
  int v8 = *(_DWORD **)(result + 80);
  *(_DWORD *)(v7 + 4 * v5) = v3;
  LODWORD(v5) = *v8;
  _DWORD *v8 = v8[v3];
  v8[v3] = v5;
  int v9 = *(_DWORD *)(result + 104) - 1;
  *(_DWORD *)(result + 104) = v9;
  while (1)
  {
    uint64_t v10 = (2 * v2) | 1u;
    if ((int)v10 >= v9
      || (uint64_t result = fst::NaturalLess<fst::TropicalWeightTpl<float>>::operator()(*(float *)(**(void **)(v1 + 16) + 4 * (int)v8[(int)v10]), *(float *)(**(void **)(v1 + 16) + 4 * (int)v8[(int)v2])), (result & 1) == 0))
    {
      uint64_t v10 = v2;
    }
    int v11 = 2 * v2 + 2;
    if (v11 < v9)
    {
      uint64_t result = fst::NaturalLess<fst::TropicalWeightTpl<float>>::operator()(*(float *)(**(void **)(v1 + 16) + 4 * (int)v8[v11]), *(float *)(**(void **)(v1 + 16) + 4 * (int)v8[(int)v10]));
      if (result) {
        uint64_t v10 = v11;
      }
      else {
        uint64_t v10 = v10;
      }
    }
    if (v10 == v2) {
      break;
    }
    uint64_t v12 = v4[(int)v2];
    uint64_t v13 = v4[(int)v10];
    v4[(int)v2] = v13;
    *(_DWORD *)(v7 + 4 * v13) = v2;
    v4[(int)v10] = v12;
    *(_DWORD *)(v7 + 4 * v12) = v10;
    LODWORD(v12) = v8[(int)v2];
    v8[(int)v2] = v8[(int)v10];
    v8[(int)v10] = v12;
    int v9 = *(_DWORD *)(v1 + 104);
    uint64_t v2 = v10;
  }
  return result;
}

void fst::ShortestFirstQueue<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::TropicalWeightTpl<float>>>,false>::Enqueue_(uint64_t a1, int a2)
{
  uint64_t v5 = a1 + 80;
  unint64_t v4 = *(char **)(a1 + 80);
  unint64_t v6 = *(int *)(v5 + 24);
  uint64_t v7 = *(char **)(v5 + 8);
  unint64_t v8 = (v7 - v4) >> 2;
  if (v8 > v6)
  {
    *(_DWORD *)&v4[4 * v6] = a2;
    *(_DWORD *)(*(void *)(a1 + 32) + 4 * *(int *)(*(void *)(a1 + 56) + 4 * *(int *)(a1 + 104))) = *(_DWORD *)(a1 + 104);
    goto LABEL_52;
  }
  unint64_t v9 = *(void *)(a1 + 96);
  if ((unint64_t)v7 >= v9)
  {
    if ((v8 + 1) >> 62) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v11 = v9 - (void)v4;
    unint64_t v12 = (uint64_t)(v9 - (void)v4) >> 1;
    if (v12 <= v8 + 1) {
      unint64_t v12 = v8 + 1;
    }
    if (v11 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v12;
    }
    if (v13)
    {
      unint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 96, v13);
      unint64_t v4 = *(char **)(a1 + 80);
      uint64_t v7 = *(char **)(a1 + 88);
    }
    else
    {
      unint64_t v14 = 0;
    }
    uint64_t v15 = &v14[4 * v8];
    BOOL v16 = &v14[4 * v13];
    *(_DWORD *)uint64_t v15 = a2;
    uint64_t v10 = v15 + 4;
    while (v7 != v4)
    {
      int v17 = *((_DWORD *)v7 - 1);
      v7 -= 4;
      *((_DWORD *)v15 - 1) = v17;
      v15 -= 4;
    }
    *(void *)(a1 + 80) = v15;
    *(void *)(a1 + 88) = v10;
    *(void *)(a1 + 96) = v16;
    if (v4) {
      operator delete(v4);
    }
  }
  else
  {
    *(_DWORD *)uint64_t v7 = a2;
    uint64_t v10 = v7 + 4;
  }
  unint64_t v18 = *(void *)(a1 + 48);
  *(void *)(a1 + 88) = v10;
  uint64_t v19 = *(char **)(a1 + 40);
  if ((unint64_t)v19 >= v18)
  {
    int64_t v21 = *(char **)(a1 + 32);
    uint64_t v22 = (v19 - v21) >> 2;
    if ((unint64_t)(v22 + 1) >> 62) {
      goto LABEL_57;
    }
    unint64_t v23 = v18 - (void)v21;
    unint64_t v24 = (uint64_t)(v18 - (void)v21) >> 1;
    if (v24 <= v22 + 1) {
      unint64_t v24 = v22 + 1;
    }
    if (v23 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v25 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v25 = v24;
    }
    if (v25)
    {
      BOOL v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 48, v25);
      int64_t v21 = *(char **)(a1 + 32);
      uint64_t v19 = *(char **)(a1 + 40);
    }
    else
    {
      BOOL v26 = 0;
    }
    uint64_t v27 = &v26[4 * v22];
    uint64_t v28 = &v26[4 * v25];
    *(_DWORD *)uint64_t v27 = *(_DWORD *)(a1 + 104);
    uint64_t v20 = v27 + 4;
    while (v19 != v21)
    {
      int v29 = *((_DWORD *)v19 - 1);
      v19 -= 4;
      *((_DWORD *)v27 - 1) = v29;
      v27 -= 4;
    }
    *(void *)(a1 + 32) = v27;
    *(void *)(a1 + 40) = v20;
    *(void *)(a1 + 48) = v28;
    if (v21) {
      operator delete(v21);
    }
  }
  else
  {
    *(_DWORD *)uint64_t v19 = *(_DWORD *)(a1 + 104);
    uint64_t v20 = v19 + 4;
  }
  unint64_t v30 = *(void *)(a1 + 72);
  *(void *)(a1 + 40) = v20;
  uint64_t v31 = *(char **)(a1 + 64);
  if ((unint64_t)v31 >= v30)
  {
    uint64_t v33 = *(char **)(a1 + 56);
    uint64_t v34 = (v31 - v33) >> 2;
    if (!((unint64_t)(v34 + 1) >> 62))
    {
      unint64_t v35 = v30 - (void)v33;
      unint64_t v36 = (uint64_t)(v30 - (void)v33) >> 1;
      if (v36 <= v34 + 1) {
        unint64_t v36 = v34 + 1;
      }
      if (v35 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v37 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v37 = v36;
      }
      if (v37)
      {
        uint64_t v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 72, v37);
        uint64_t v33 = *(char **)(a1 + 56);
        uint64_t v31 = *(char **)(a1 + 64);
      }
      else
      {
        uint64_t v38 = 0;
      }
      long long v39 = &v38[4 * v34];
      uint64_t v40 = &v38[4 * v37];
      *(_DWORD *)long long v39 = *(_DWORD *)(a1 + 104);
      int v32 = v39 + 4;
      while (v31 != v33)
      {
        int v41 = *((_DWORD *)v31 - 1);
        v31 -= 4;
        *((_DWORD *)v39 - 1) = v41;
        v39 -= 4;
      }
      *(void *)(a1 + 56) = v39;
      *(void *)(a1 + 64) = v32;
      *(void *)(a1 + 72) = v40;
      if (v33) {
        operator delete(v33);
      }
      goto LABEL_51;
    }
LABEL_57:
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  *(_DWORD *)uint64_t v31 = *(_DWORD *)(a1 + 104);
  int v32 = v31 + 4;
LABEL_51:
  *(void *)(a1 + 64) = v32;
LABEL_52:
  unsigned int v42 = *(_DWORD *)(a1 + 104);
  *(_DWORD *)(a1 + 104) = v42 + 1;
  if ((int)v42 >= 1)
  {
    uint64_t v43 = *(void *)(a1 + 80);
    uint64_t v44 = **(void **)(a1 + 16);
    do
    {
      unsigned int v45 = v42 - 1;
      uint64_t v46 = (v42 - 1) >> 1;
      if (fst::NaturalLess<fst::TropicalWeightTpl<float>>::operator()(*(float *)(v44 + 4 * *(int *)(v43 + 4 * v46)), *(float *)(v44 + 4 * a2)))
      {
        break;
      }
      uint64_t v47 = *(void *)(a1 + 56);
      uint64_t v48 = *(int *)(v47 + 4 * v42);
      uint64_t v49 = *(int *)(v47 + 4 * v46);
      *(_DWORD *)(v47 + 4 * v42) = v49;
      uint64_t v50 = *(void *)(a1 + 32);
      *(_DWORD *)(v50 + 4 * v49) = v42;
      *(_DWORD *)(v47 + 4 * v46) = v48;
      *(_DWORD *)(v50 + 4 * v48) = v46;
      LODWORD(v47) = *(_DWORD *)(v43 + 4 * v42);
      *(_DWORD *)(v43 + 4 * v42) = *(_DWORD *)(v43 + 4 * v46);
      *(_DWORD *)(v43 + 4 * v46) = v47;
      unsigned int v42 = v45 >> 1;
    }
    while (v45 > 1);
  }
}

uint64_t fst::ShortestFirstQueue<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::TropicalWeightTpl<float>>>,false>::Head_(uint64_t a1)
{
  return **(unsigned int **)(a1 + 80);
}

void fst::ShortestFirstQueue<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::TropicalWeightTpl<float>>>,false>::~ShortestFirstQueue(void *a1)
{
  *a1 = off_26C208708;
  uint64_t v2 = (void *)a1[14];
  if (v2)
  {
    a1[15] = v2;
    operator delete(v2);
  }
  fst::Heap<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::TropicalWeightTpl<float>>>,false>::~Heap(a1 + 2);
  JUMPOUT(0x2105595E0);
}

void *fst::Heap<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::TropicalWeightTpl<float>>>,false>::~Heap(void *a1)
{
  uint64_t v2 = (void *)a1[8];
  if (v2)
  {
    a1[9] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[5];
  if (v3)
  {
    a1[6] = v3;
    operator delete(v3);
  }
  unint64_t v4 = (void *)a1[2];
  if (v4)
  {
    a1[3] = v4;
    operator delete(v4);
  }
  return a1;
}

void *fst::ShortestFirstQueue<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::TropicalWeightTpl<float>>>,false>::~ShortestFirstQueue(void *a1)
{
  *a1 = off_26C208708;
  uint64_t v2 = (void *)a1[14];
  if (v2)
  {
    a1[15] = v2;
    operator delete(v2);
  }
  fst::Heap<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::TropicalWeightTpl<float>>>,false>::~Heap(a1 + 2);
  return a1;
}

double fst::TopOrderQueue<int>::Clear_(uint64_t a1)
{
  uint64_t v1 = *(int *)(a1 + 16);
  if ((int)v1 <= *(_DWORD *)(a1 + 20))
  {
    uint64_t v2 = *(void *)(a1 + 48);
    do
      *(_DWORD *)(v2 + 4 * v1) = -1;
    while (v1++ < *(int *)(a1 + 20));
  }
  double result = NAN;
  *(void *)(a1 + 16) = 0xFFFFFFFF00000000;
  return result;
}

BOOL fst::TopOrderQueue<int>::Empty_(uint64_t a1)
{
  return *(_DWORD *)(a1 + 16) > *(_DWORD *)(a1 + 20);
}

uint64_t fst::TopOrderQueue<int>::Dequeue_(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 48);
  *(_DWORD *)(v1 + 4 * *(int *)(result + 16)) = -1;
  int v2 = *(_DWORD *)(result + 20);
  uint64_t v3 = *(int *)(result + 16);
  if ((int)v3 <= v2)
  {
    int v4 = v3 - 1;
    uint64_t v5 = (int *)(v1 + 4 * v3);
    do
    {
      int v6 = *v5++;
      if (v6 != -1) {
        break;
      }
      *(_DWORD *)(result + 16) = v4 + 2;
      ++v4;
    }
    while (v2 != v4);
  }
  return result;
}

uint64_t fst::TopOrderQueue<int>::Enqueue_(uint64_t result, int a2)
{
  int v2 = *(_DWORD *)(result + 16);
  int v3 = *(_DWORD *)(result + 20);
  uint64_t v4 = *(void *)(result + 24);
  int v5 = *(_DWORD *)(v4 + 4 * a2);
  if (v2 > v3)
  {
    *(_DWORD *)(result + 20) = v5;
LABEL_6:
    *(_DWORD *)(result + 16) = v5;
    goto LABEL_7;
  }
  if (v5 <= v3)
  {
    if (v5 < v2) {
      goto LABEL_6;
    }
  }
  else
  {
    *(_DWORD *)(result + 20) = v5;
  }
LABEL_7:
  *(_DWORD *)(*(void *)(result + 48) + 4 * *(int *)(v4 + 4 * a2)) = a2;
  return result;
}

uint64_t fst::TopOrderQueue<int>::Head_(uint64_t a1)
{
  return *(unsigned int *)(*(void *)(a1 + 48) + 4 * *(int *)(a1 + 16));
}

void fst::TopOrderQueue<int>::~TopOrderQueue(void *a1)
{
  *a1 = off_26C207AF0;
  int v2 = (void *)a1[6];
  if (v2)
  {
    a1[7] = v2;
    operator delete(v2);
  }
  int v3 = (void *)a1[3];
  if (v3)
  {
    a1[4] = v3;
    operator delete(v3);
  }
  JUMPOUT(0x2105595E0);
}

void *fst::TopOrderQueue<int>::~TopOrderQueue(void *a1)
{
  *a1 = off_26C207AF0;
  int v2 = (void *)a1[6];
  if (v2)
  {
    a1[7] = v2;
    operator delete(v2);
  }
  int v3 = (void *)a1[3];
  if (v3)
  {
    a1[4] = v3;
    operator delete(v3);
  }
  return a1;
}

void fst::LifoQueue<int>::Clear_(void *a1)
{
  int v2 = (void **)a1[3];
  uint64_t v3 = a1[4];
  a1[7] = 0;
  unint64_t v4 = v3 - (void)v2;
  if (v4 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v5 = a1[4];
      int v2 = (void **)(a1[3] + 8);
      a1[3] = v2;
      unint64_t v4 = v5 - (void)v2;
    }
    while (v4 > 0x10);
  }
  if (v4 >> 3 == 1)
  {
    uint64_t v6 = 512;
  }
  else
  {
    if (v4 >> 3 != 2) {
      return;
    }
    uint64_t v6 = 1024;
  }
  a1[6] = v6;
}

BOOL fst::LifoQueue<int>::Empty_(uint64_t a1)
{
  return *(void *)(a1 + 56) == 0;
}

void fst::LifoQueue<int>::Dequeue_(uint64_t a1)
{
  int64x2_t v1 = vaddq_s64(*(int64x2_t *)(a1 + 48), (int64x2_t)xmmword_20D6B4A10);
  *(int64x2_t *)(a1 + 48) = v1;
  if (v1.i64[0] >= 0x800uLL)
  {
    operator delete(**(void ***)(a1 + 24));
    *(void *)(a1 + 24) += 8;
    *(void *)(a1 + 48) -= 1024;
  }
}

void fst::LifoQueue<int>::Enqueue_(uint64_t a1, int a2)
{
  int v2 = a2;
  std::deque<int>::push_front((char **)(a1 + 16), &v2);
}

uint64_t fst::LifoQueue<int>::Head_(uint64_t a1)
{
  return *(unsigned int *)(*(void *)(*(void *)(a1 + 24) + ((*(void *)(a1 + 48) >> 7) & 0x1FFFFFFFFFFFFF8))
                         + 4 * (*(void *)(a1 + 48) & 0x3FFLL));
}

void fst::LifoQueue<int>::~LifoQueue(uint64_t a1)
{
  std::deque<int>::~deque[abi:ne180100](a1 + 16);
  JUMPOUT(0x2105595E0);
}

uint64_t fst::LifoQueue<int>::~LifoQueue(uint64_t a1)
{
  return a1;
}

char ***fst::TopOrderVisitor<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::FinishVisit(char ***result)
{
  int64x2_t v1 = result;
  if (*(unsigned char *)result[1])
  {
    (*result)[1] = **result;
    int v2 = (char ****)result[2];
    double result = v2[1];
    if (result == *v2)
    {
      unint64_t v16 = ((char *)result - (char *)*v2) >> 2;
      if (!v16) {
        goto LABEL_22;
      }
    }
    else
    {
      unint64_t v3 = 0;
      do
      {
        unint64_t v4 = *v1;
        uint64_t v5 = (*v1)[1];
        unint64_t v6 = (unint64_t)(*v1)[2];
        if ((unint64_t)v5 >= v6)
        {
          unint64_t v8 = *v4;
          uint64_t v9 = (v5 - *v4) >> 2;
          unint64_t v10 = v9 + 1;
          if ((unint64_t)(v9 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v11 = v6 - (void)v8;
          if (v11 >> 1 > v10) {
            unint64_t v10 = v11 >> 1;
          }
          if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v12 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v12 = v10;
          }
          if (v12)
          {
            unint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(*v1 + 2), v12);
            unint64_t v8 = *v4;
            uint64_t v5 = v4[1];
          }
          else
          {
            unint64_t v13 = 0;
          }
          unint64_t v14 = &v13[4 * v9];
          *(_DWORD *)unint64_t v14 = -1;
          uint64_t v7 = v14 + 4;
          while (v5 != v8)
          {
            int v15 = *((_DWORD *)v5 - 1);
            v5 -= 4;
            *((_DWORD *)v14 - 1) = v15;
            v14 -= 4;
          }
          *unint64_t v4 = v14;
          v4[1] = v7;
          v4[2] = &v13[4 * v12];
          if (v8) {
            operator delete(v8);
          }
        }
        else
        {
          *(_DWORD *)uint64_t v5 = -1;
          uint64_t v7 = v5 + 4;
        }
        v4[1] = v7;
        ++v3;
        int v2 = (char ****)v1[2];
        double result = *v2;
        unint64_t v16 = ((char *)v2[1] - (char *)*v2) >> 2;
      }
      while (v16 > v3);
      if (!v16)
      {
LABEL_22:
        if (!result) {
          goto LABEL_24;
        }
        goto LABEL_23;
      }
    }
    uint64_t v17 = 0;
    unint64_t v18 = **v1;
    uint64_t v19 = (int *)result + v16 - 1;
    do
    {
      uint64_t v20 = *v19--;
      *(_DWORD *)&v18[4 * v20] = v17++;
    }
    while (v16 != v17);
  }
  else
  {
    int v2 = (char ****)result[2];
  }
  if (v2)
  {
    double result = *v2;
    if (!*v2)
    {
LABEL_24:
      JUMPOUT(0x2105595E0);
    }
LABEL_23:
    v2[1] = result;
    operator delete(result);
    goto LABEL_24;
  }
  return result;
}

void fst::TopOrderVisitor<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::FinishState(uint64_t a1, int a2)
{
  uint64_t v4 = a1 + 16;
  unint64_t v5 = *(void *)(a1 + 16);
  unint64_t v6 = *(_DWORD **)(a1 + 8);
  if ((unint64_t)v6 >= v5)
  {
    unint64_t v8 = *(_DWORD **)a1;
    uint64_t v9 = ((uint64_t)v6 - *(void *)a1) >> 2;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 62) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v5 - (void)v8;
    if (v11 >> 1 > v10) {
      unint64_t v10 = v11 >> 1;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v12 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      unint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v4, v12);
      unint64_t v8 = *(_DWORD **)a1;
      unint64_t v6 = *(_DWORD **)(a1 + 8);
    }
    else
    {
      unint64_t v13 = 0;
    }
    unint64_t v14 = &v13[4 * v9];
    int v15 = &v13[4 * v12];
    *(_DWORD *)unint64_t v14 = a2;
    uint64_t v7 = v14 + 4;
    while (v6 != v8)
    {
      int v16 = *--v6;
      *((_DWORD *)v14 - 1) = v16;
      v14 -= 4;
    }
    *(void *)a1 = v14;
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = v15;
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    _DWORD *v6 = a2;
    uint64_t v7 = v6 + 1;
  }
  *(void *)(a1 + 8) = v7;
}

double fst::StateOrderQueue<int>::Clear_(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 20);
  unint64_t v2 = *(int *)(a1 + 16);
  if ((int)v2 <= v1)
  {
    uint64_t v3 = *(void *)(a1 + 24);
    int v4 = v1 - v2 + 1;
    do
    {
      *(void *)(v3 + ((v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v2);
      ++v2;
      --v4;
    }
    while (v4);
  }
  double result = NAN;
  *(void *)(a1 + 16) = 0xFFFFFFFF00000000;
  return result;
}

BOOL fst::StateOrderQueue<int>::Empty_(uint64_t a1)
{
  return *(_DWORD *)(a1 + 16) > *(_DWORD *)(a1 + 20);
}

uint64_t fst::StateOrderQueue<int>::Dequeue_(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 24);
  int v2 = *(_DWORD *)(result + 20);
  unint64_t v3 = *(int *)(result + 16);
  *(void *)(v1 + ((v3 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v3);
  if ((int)v3 <= v2)
  {
    int v4 = v3 - 1;
    do
    {
      if ((*(void *)(v1 + ((v3 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v3)) {
        break;
      }
      ++v3;
      *(_DWORD *)(result + 16) = v4 + 2;
      ++v4;
    }
    while (v2 != v4);
  }
  return result;
}

void fst::StateOrderQueue<int>::Enqueue_(uint64_t a1, int a2)
{
  int v3 = *(_DWORD *)(a1 + 16);
  int v4 = *(_DWORD *)(a1 + 20);
  if (v3 > v4)
  {
    *(_DWORD *)(a1 + 20) = a2;
LABEL_6:
    *(_DWORD *)(a1 + 16) = a2;
    goto LABEL_7;
  }
  if (v4 < a2)
  {
    *(_DWORD *)(a1 + 20) = a2;
    goto LABEL_7;
  }
  if (v3 > a2) {
    goto LABEL_6;
  }
LABEL_7:
  unint64_t v5 = (void *)(a1 + 24);
  unint64_t v6 = a2;
  while (*(void *)(a1 + 32) <= v6)
  {
    char v7 = 0;
    std::vector<BOOL>::push_back(a1 + 24, &v7);
  }
  *(void *)(*v5 + ((v6 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v6;
}

uint64_t fst::StateOrderQueue<int>::Head_(uint64_t a1)
{
  return *(unsigned int *)(a1 + 16);
}

void fst::StateOrderQueue<int>::~StateOrderQueue(void *a1)
{
  *a1 = off_26C207FE8;
  uint64_t v1 = (void *)a1[3];
  if (v1) {
    operator delete(v1);
  }
  JUMPOUT(0x2105595E0);
}

void *fst::StateOrderQueue<int>::~StateOrderQueue(void *a1)
{
  *a1 = off_26C207FE8;
  int v2 = (void *)a1[3];
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::InitMutableArcIterator()
{
}

void sub_20D409B54(_Unwind_Exception *a1)
{
  MEMORY[0x2105595E0](v1, 0x10B1C402DF695F1);
  _Unwind_Resume(a1);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::MutateCheck(uint64_t result)
{
  if (*(int *)(*(void *)(result + 8) + 56) >= 2) {
    operator new();
  }
  return result;
}

void sub_20D409C0C(_Unwind_Exception *a1)
{
  MEMORY[0x2105595E0](v1, 0x10B3C40637D23BDLL);
  _Unwind_Resume(a1);
}

uint64_t fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::VectorFstImpl(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_26C208858;
  *(void *)(a1 + 8) = 0;
  int v4 = (std::string *)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 16), "null");
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(void *)(a1 + 64) = 0;
  unint64_t v5 = (void *)(a1 + 64);
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = -1;
  *(void *)a1 = off_26C207B40;
  std::string::basic_string[abi:ne180100]<0>(&__p, "vector");
  std::string::operator=(v4, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 112))(a2);
  fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::SetInputSymbols(a1, v6);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 120))(a2);
  fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::SetOutputSymbols(a1, v7);
  *(_DWORD *)(a1 + 88) = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
  if ((*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a2 + 64))(a2, 1, 0))
  {
    int v8 = fst::CountStates<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>(a2);
    std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>> *>>::reserve((void **)(a1 + 64), v8);
  }
  unsigned int v19 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a2 + 128))(a2, &v17);
  while (1)
  {
    if (!v17)
    {
      uint64_t v9 = v19;
      if ((int)v19 >= v18) {
        goto LABEL_34;
      }
      goto LABEL_13;
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)v17 + 16))(v17)) {
      break;
    }
    if (v17) {
      uint64_t v9 = (*(uint64_t (**)(void))(*(void *)v17 + 24))();
    }
    else {
      uint64_t v9 = v19;
    }
LABEL_13:
    fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::AddState((void *)a1);
    **(float **)(*v5 + 8 * (int)v9) = (*(float (**)(uint64_t, uint64_t))(*(void *)a2 + 32))(a2, v9);
    unint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, v9);
    std::vector<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::reserve((void **)(*(void *)(*v5 + 8 * (int)v9) + 24), v10);
    std::string::size_type v16 = 0;
    (*(void (**)(uint64_t, uint64_t, std::string *))(*(void *)a2 + 136))(a2, v9, &__p);
    while (1)
    {
      if (!__p.__r_.__value_.__r.__words[0])
      {
        std::string::size_type v12 = v16;
        if (v16 >= __p.__r_.__value_.__r.__words[2]) {
          goto LABEL_27;
        }
        goto LABEL_21;
      }
      if ((*(unsigned int (**)(std::string::size_type))(*(void *)__p.__r_.__value_.__l.__data_ + 24))(__p.__r_.__value_.__r.__words[0])) {
        break;
      }
      if (!__p.__r_.__value_.__r.__words[0])
      {
        std::string::size_type v12 = v16;
LABEL_21:
        uint64_t v11 = (_DWORD *)(__p.__r_.__value_.__l.__size_ + 16 * v12);
        goto LABEL_22;
      }
      uint64_t v11 = (_DWORD *)(*(uint64_t (**)(void))(*(void *)__p.__r_.__value_.__l.__data_ + 32))();
LABEL_22:
      fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::AddArc(*(void **)(*v5 + 8 * (int)v9), v11);
      if (__p.__r_.__value_.__r.__words[0]) {
        (*(void (**)(std::string::size_type))(*(void *)__p.__r_.__value_.__l.__data_ + 40))(__p.__r_.__value_.__r.__words[0]);
      }
      else {
        ++v16;
      }
    }
    if (__p.__r_.__value_.__r.__words[0])
    {
      (*(void (**)(void))(*(void *)__p.__r_.__value_.__l.__data_ + 8))();
      goto LABEL_29;
    }
LABEL_27:
    if (v15) {
      --*v15;
    }
LABEL_29:
    if (v17) {
      (*(void (**)(uint64_t))(*(void *)v17 + 32))(v17);
    }
    else {
      ++v19;
    }
  }
  if (v17) {
    (*(void (**)(void))(*(void *)v17 + 8))();
  }
LABEL_34:
  *(void *)(a1 + 8) = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a2 + 64))(a2, 0x3FFFFFFF0004, 0) | *(void *)(a1 + 8) & 4 | 3;
  return a1;
}

void sub_20D40A110(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::~VectorFstBaseImpl(v17);
  _Unwind_Resume(a1);
}

void std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>> *>>::reserve(void **a1, unint64_t a2)
{
  if (a2 > ((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3)
  {
    if (a2 >> 61) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    int64_t v3 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    int v4 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<RateMarker>>(a2);
    unint64_t v5 = &v4[v3 & 0xFFFFFFFFFFFFFFF8];
    uint64_t v7 = &v4[8 * v6];
    uint64_t v9 = (char *)*a1;
    int v8 = (char *)a1[1];
    unint64_t v10 = v5;
    if (v8 != *a1)
    {
      do
      {
        uint64_t v11 = *((void *)v8 - 1);
        v8 -= 8;
        *((void *)v10 - 1) = v11;
        v10 -= 8;
      }
      while (v8 != v9);
      int v8 = (char *)*a1;
    }
    *a1 = v10;
    a1[1] = v5;
    a1[2] = v7;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

uint64_t fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::AddState(void *a1)
{
  int v2 = (char *)operator new(0x30uLL);
  int64_t v3 = v2;
  *(_DWORD *)int v2 = 2139095040;
  *(_OWORD *)(v2 + 8) = 0u;
  *(_OWORD *)(v2 + 24) = 0u;
  *((void *)v2 + 5) = 0;
  unint64_t v5 = (void *)a1[9];
  unint64_t v4 = a1[10];
  if ((unint64_t)v5 >= v4)
  {
    uint64_t v7 = a1[8];
    uint64_t v8 = ((uint64_t)v5 - v7) >> 3;
    if ((unint64_t)(v8 + 1) >> 61) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v9 = v4 - v7;
    uint64_t v10 = v9 >> 2;
    if (v9 >> 2 <= (unint64_t)(v8 + 1)) {
      uint64_t v10 = v8 + 1;
    }
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    if (v11) {
      unint64_t v11 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<RateMarker>>(v11);
    }
    else {
      uint64_t v12 = 0;
    }
    unint64_t v13 = (void *)(v11 + 8 * v8);
    unint64_t v14 = v11 + 8 * v12;
    void *v13 = v3;
    uint64_t v6 = v13 + 1;
    std::string::size_type v16 = (char *)a1[8];
    int v15 = (char *)a1[9];
    if (v15 != v16)
    {
      do
      {
        uint64_t v17 = *((void *)v15 - 1);
        v15 -= 8;
        *--unint64_t v13 = v17;
      }
      while (v15 != v16);
      int v15 = (char *)a1[8];
    }
    a1[8] = v13;
    a1[9] = v6;
    a1[10] = v14;
    if (v15) {
      operator delete(v15);
    }
  }
  else
  {
    *unint64_t v5 = v2;
    uint64_t v6 = v5 + 1;
  }
  a1[9] = v6;
  return (((unint64_t)v6 - a1[8]) >> 3) - 1;
}

void std::vector<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::reserve(void **a1, unint64_t a2)
{
  if (a2 > ((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4)
  {
    if (a2 >> 60) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    int64_t v3 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    unint64_t v4 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Agglomerate>>>(a2);
    unint64_t v5 = &v4[v3 & 0xFFFFFFFFFFFFFFF0];
    uint64_t v7 = &v4[16 * v6];
    uint64_t v9 = (char *)*a1;
    uint64_t v8 = (char *)a1[1];
    uint64_t v10 = v5;
    if (v8 != *a1)
    {
      do
      {
        *((_OWORD *)v10 - 1) = *((_OWORD *)v8 - 1);
        v10 -= 16;
        v8 -= 16;
      }
      while (v8 != v9);
      uint64_t v8 = (char *)*a1;
    }
    *a1 = v10;
    a1[1] = v5;
    a1[2] = v7;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

void fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::AddArc(void *a1, _DWORD *a2)
{
  if (!*a2) {
    ++a1[1];
  }
  if (!a2[1]) {
    ++a1[2];
  }
  unint64_t v5 = (_OWORD *)a1[4];
  unint64_t v4 = a1[5];
  if ((unint64_t)v5 >= v4)
  {
    uint64_t v7 = a1[3];
    uint64_t v8 = ((uint64_t)v5 - v7) >> 4;
    unint64_t v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 60) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v4 - v7;
    if (v10 >> 3 > v9) {
      unint64_t v9 = v10 >> 3;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11) {
      unint64_t v11 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Agglomerate>>>(v11);
    }
    else {
      uint64_t v12 = 0;
    }
    unint64_t v13 = (_OWORD *)(v11 + 16 * v8);
    unint64_t v14 = v11 + 16 * v12;
    _OWORD *v13 = *(_OWORD *)a2;
    uint64_t v6 = v13 + 1;
    std::string::size_type v16 = (char *)a1[3];
    int v15 = (char *)a1[4];
    if (v15 != v16)
    {
      do
      {
        *--unint64_t v13 = *((_OWORD *)v15 - 1);
        v15 -= 16;
      }
      while (v15 != v16);
      int v15 = (char *)a1[3];
    }
    a1[3] = v13;
    a1[4] = v6;
    a1[5] = v14;
    if (v15) {
      operator delete(v15);
    }
  }
  else
  {
    *unint64_t v5 = *(_OWORD *)a2;
    uint64_t v6 = v5 + 1;
  }
  a1[4] = v6;
}

uint64_t fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::~VectorFstBaseImpl(void *a1)
{
  *a1 = off_26C208298;
  int v2 = (void **)a1[9];
  if (v2 != (void **)a1[8])
  {
    unint64_t v3 = 0;
    int v2 = (void **)a1[8];
    do
    {
      fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Destroy(v2[v3++]);
      int v2 = (void **)a1[8];
    }
    while (v3 < (uint64_t)(a1[9] - (void)v2) >> 3);
  }
  if (v2)
  {
    a1[9] = v2;
    operator delete(v2);
  }
  return fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~FstImpl((uint64_t)a1);
}

uint64_t fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~FstImpl(uint64_t a1)
{
  *(void *)a1 = off_26C208858;
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 48);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

uint64_t fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Properties(uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + 8) & a2;
}

uint64_t fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Properties(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::HasSequentialStates()
{
  return 1;
}

void fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::~VectorFstBaseImpl(void *a1)
{
  fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::~VectorFstBaseImpl(a1);
  JUMPOUT(0x2105595E0);
}

void fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::~VectorFstImpl(void *a1)
{
  fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::~VectorFstBaseImpl(a1);
  JUMPOUT(0x2105595E0);
}

void fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~FstImpl(uint64_t a1)
{
  fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~FstImpl(a1);
  JUMPOUT(0x2105595E0);
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::SetValue_(uint64_t result, float *a2)
{
  uint64_t v2 = *(void **)(result + 8);
  uint64_t v3 = *(void *)(result + 24);
  uint64_t v4 = v2[3];
  unint64_t v5 = (int *)(v4 + 16 * v3);
  int v7 = *v5;
  int v6 = v5[1];
  if (*v5 != v6) {
    **(void **)(result + 16) &= ~0x20000uLL;
  }
  if (v7)
  {
    if (!v6)
    {
      uint64_t v8 = *(unint64_t **)(result + 16);
      unint64_t v9 = *v8;
LABEL_8:
      unint64_t *v8 = v9 & 0xFFFFFFFFFBFFFFFFLL;
    }
  }
  else
  {
    uint64_t v8 = *(unint64_t **)(result + 16);
    unint64_t v10 = *v8;
    *v8 &= ~0x1000000uLL;
    if (!v6)
    {
      unint64_t v9 = v10 & 0xFFFFFFFFFEBFFFFFLL;
      unint64_t *v8 = v9;
      goto LABEL_8;
    }
  }
  if (*(float *)(v4 + 16 * v3 + 8) != INFINITY && *(float *)(v4 + 16 * v3 + 8) != 0.0) {
    **(void **)(result + 16) &= ~0x100000000uLL;
  }
  uint64_t v11 = 0x30FC30007;
  float v13 = *a2;
  int v12 = *((_DWORD *)a2 + 1);
  if (*(_DWORD *)a2 == v7 && v12 == v6)
  {
    if (*((_DWORD *)a2 + 3) == *(_DWORD *)(v4 + 16 * v3 + 12)) {
      uint64_t v11 = 0x3FFFFFFF0007;
    }
    if (v7)
    {
LABEL_17:
      if (v6) {
        goto LABEL_18;
      }
      goto LABEL_30;
    }
  }
  else if (v7)
  {
    goto LABEL_17;
  }
  --v2[1];
  if (v6)
  {
LABEL_18:
    if (v13 != 0.0) {
      goto LABEL_19;
    }
    goto LABEL_31;
  }
LABEL_30:
  --v2[2];
  if (v13 != 0.0)
  {
LABEL_19:
    if (v12) {
      goto LABEL_21;
    }
    goto LABEL_20;
  }
LABEL_31:
  ++v2[1];
  if (!v12) {
LABEL_20:
  }
    ++v2[2];
LABEL_21:
  *(_OWORD *)unint64_t v5 = *(_OWORD *)a2;
  int v15 = *(_DWORD *)a2;
  int v16 = *((_DWORD *)a2 + 1);
  if (*(_DWORD *)a2 != v16) {
    **(void **)(result + 16) = **(void **)(result + 16) & 0xFFFFFFFFFFFCFFFFLL | 0x20000;
  }
  if (v15)
  {
    if (!v16)
    {
      uint64_t v17 = *(unint64_t **)(result + 16);
      unint64_t v18 = *v17;
LABEL_35:
      *uint64_t v17 = v18 & 0xFFFFFFFFF3FFFFFFLL | 0x4000000;
    }
  }
  else
  {
    uint64_t v17 = *(unint64_t **)(result + 16);
    unint64_t v19 = *v17 & 0xFFFFFFFFFCFFFFFFLL | 0x1000000;
    *uint64_t v17 = v19;
    if (!v16)
    {
      unint64_t v18 = v19 & 0xFFFFFFFFFD3FFFFFLL | 0x400000;
      *uint64_t v17 = v18;
      goto LABEL_35;
    }
  }
  if (a2[2] != INFINITY && a2[2] != 0.0) {
    **(void **)(result + 16) = **(void **)(result + 16) & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
  }
  **(void **)(result + 16) &= v11;
  return result;
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::Flags_()
{
  return 15;
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::Seek_(uint64_t result, uint64_t a2)
{
  *(void *)(result + 24) = a2;
  return result;
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::Reset_(uint64_t result)
{
  *(void *)(result + 24) = 0;
  return result;
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::Position_(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::Next_(uint64_t result)
{
  return result;
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::Value_(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 24) + 16 * *(void *)(a1 + 24);
}

BOOL fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::Done_(uint64_t a1)
{
  return *(void *)(a1 + 24) >= (unint64_t)((uint64_t)(*(void *)(*(void *)(a1 + 8) + 32)
                                                            - *(void *)(*(void *)(a1 + 8) + 24)) >> 4);
}

uint64_t fst::ArcIteratorBase<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Reinit()
{
  return 0;
}

void fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::~MutableArcIterator()
{
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::SetOutputSymbols(uint64_t a1, uint64_t a2)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::MutateCheck(a1);
  uint64_t v4 = *(void *)(a1 + 8);
  return fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::SetOutputSymbols(v4, a2);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::SetInputSymbols(uint64_t a1, uint64_t a2)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::MutateCheck(a1);
  uint64_t v4 = *(void *)(a1 + 8);
  return fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::SetInputSymbols(v4, a2);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::MutableOutputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 48);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::MutableInputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 40);
}

void fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::ReserveArcs(uint64_t a1, int a2, unint64_t a3)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::MutateCheck(a1);
  int v6 = (void **)(*(void *)(*(void *)(*(void *)(a1 + 8) + 64) + 8 * a2) + 24);
  std::vector<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::reserve(v6, a3);
}

void fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::ReserveStates(uint64_t a1, int a2)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::MutateCheck(a1);
  uint64_t v4 = (void **)(*(void *)(a1 + 8) + 64);
  std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>> *>>::reserve(v4, a2);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::DeleteArcs(uint64_t a1, int a2)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::MutateCheck(a1);
  uint64_t v4 = *(void **)(a1 + 8);
  unint64_t v5 = *(void **)(v4[8] + 8 * a2);
  v5[1] = 0;
  v5[2] = 0;
  v5[4] = v5[3];
  uint64_t result = (*(uint64_t (**)(void *))(*v4 + 24))(v4);
  v4[1] = v4[1] & 4 | result & 0xA6A5A950007;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::DeleteArcs(uint64_t a1, int a2, uint64_t a3)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::MutateCheck(a1);
  int v6 = *(void **)(a1 + 8);
  fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::DeleteArcs(*(void **)(v6[8] + 8 * a2), a3);
  uint64_t result = (*(uint64_t (**)(void *))(*v6 + 24))(v6);
  v6[1] = v6[1] & 4 | result & 0xA6A5A950007;
  return result;
}

void *fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::DeleteArcs(void *result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = result[4];
    uint64_t v3 = (_DWORD *)(v2 - 16);
    uint64_t v4 = a2;
    do
    {
      if (!*v3) {
        --result[1];
      }
      if (!v3[1]) {
        --result[2];
      }
      v3 -= 4;
      --v4;
    }
    while (v4);
    result[4] = v2 - 16 * a2;
  }
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::DeleteStates(uint64_t a1)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::MutateCheck(a1);
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(v2 + 72);
  if (v3 != *(void *)(v2 + 64))
  {
    unint64_t v4 = 0;
    uint64_t v3 = *(void *)(v2 + 64);
    do
    {
      fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Destroy(*(void **)(v3 + 8 * v4++));
      uint64_t v3 = *(void *)(v2 + 64);
    }
    while (v4 < (*(void *)(v2 + 72) - v3) >> 3);
  }
  *(void *)(v2 + 72) = v3;
  *(_DWORD *)(v2 + 88) = -1;
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 24))(v2);
  *(void *)(v2 + 8) = (*(_DWORD *)(v2 + 8) | result) & 4 | 0x156A5A950003;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::DeleteStates(uint64_t a1, char **a2)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::MutateCheck(a1);
  uint64_t v4 = *(void *)(a1 + 8);
  std::vector<int>::size_type v5 = (uint64_t)(*(void *)(v4 + 72) - *(void *)(v4 + 64)) >> 3;
  std::vector<int>::value_type __x = 0;
  std::vector<int>::vector(&v48, v5, &__x);
  int v6 = *a2;
  uint64_t v7 = a2[1] - *a2;
  if (v7)
  {
    unint64_t v8 = v7 >> 2;
    std::vector<int>::pointer begin = v48.__begin_;
    if (v8 <= 1) {
      unint64_t v8 = 1;
    }
    do
    {
      uint64_t v10 = *(int *)v6;
      v6 += 4;
      begin[v10] = -1;
      --v8;
    }
    while (v8);
  }
  uint64_t v11 = *(char **)(v4 + 64);
  int v12 = *(char **)(v4 + 72);
  if (v12 == v11)
  {
    unint64_t v16 = 0;
    int v14 = 0;
    int v15 = *(char **)(v4 + 72);
    uint64_t v11 = v15;
  }
  else
  {
    unint64_t v13 = 0;
    int v14 = 0;
    do
    {
      if (v48.__begin_[v13] == -1)
      {
        fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Destroy(*(void **)&v11[8 * v13]);
      }
      else
      {
        v48.__begin_[v13] = v14;
        if (v13 != v14) {
          *(void *)&v11[8 * v14] = *(void *)&v11[8 * v13];
        }
        ++v14;
      }
      ++v13;
      uint64_t v11 = *(char **)(v4 + 64);
      int v15 = *(char **)(v4 + 72);
      unint64_t v16 = (v15 - v11) >> 3;
    }
    while (v16 > v13);
    int v12 = *(char **)(v4 + 64);
  }
  unint64_t v17 = v14 - v16;
  if (v14 <= v16)
  {
    if (v14 >= v16) {
      goto LABEL_32;
    }
    int v15 = &v11[8 * v14];
    goto LABEL_31;
  }
  uint64_t v18 = *(void *)(v4 + 80);
  if (v17 <= (v18 - (uint64_t)v15) >> 3)
  {
    bzero(v15, 8 * v17);
    v15 += 8 * v17;
LABEL_31:
    *(void *)(v4 + 72) = v15;
    goto LABEL_32;
  }
  if (v14 < 0) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v19 = v18 - (void)v12;
  uint64_t v20 = v19 >> 2;
  if (v19 >> 2 <= (unint64_t)v14) {
    uint64_t v20 = v14;
  }
  if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v21 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v21 = v20;
  }
  uint64_t v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<RateMarker>>(v21);
  unint64_t v23 = &v22[8 * v16];
  unint64_t v25 = &v22[8 * v24];
  bzero(v23, 8 * v17);
  int v15 = &v23[8 * v17];
  uint64_t v27 = *(char **)(v4 + 64);
  BOOL v26 = *(char **)(v4 + 72);
  if (v26 != v27)
  {
    do
    {
      uint64_t v28 = *((void *)v26 - 1);
      v26 -= 8;
      *((void *)v23 - 1) = v28;
      v23 -= 8;
    }
    while (v26 != v27);
    BOOL v26 = *(char **)(v4 + 64);
  }
  *(void *)(v4 + 64) = v23;
  *(void *)(v4 + 72) = v15;
  *(void *)(v4 + 80) = v25;
  if (v26)
  {
    operator delete(v26);
    int v15 = *(char **)(v4 + 72);
  }
LABEL_32:
  int v29 = *(char **)(v4 + 64);
  if (v15 != v29)
  {
    unint64_t v30 = 0;
    do
    {
      uint64_t v31 = *(void *)&v29[8 * v30];
      uint64_t v33 = *(void *)(v31 + 24);
      uint64_t v32 = *(void *)(v31 + 32);
      int64x2_t v34 = *(int64x2_t *)(v31 + 8);
      uint64_t v35 = v32 - v33;
      if (v32 == v33)
      {
        int64x2_t v46 = *(int64x2_t *)(v31 + 8);
        uint64_t v41 = 0;
        uint64_t v42 = v35 >> 4;
      }
      else
      {
        unint64_t v36 = 0;
        uint64_t v41 = 0;
        uint64_t v37 = *(void *)(v31 + 24);
        do
        {
          int v38 = v48.__begin_[*(int *)(v37 + 12)];
          if (v38 == -1)
          {
            v39.i64[0] = *(void *)v37;
            v39.i64[1] = HIDWORD(*(void *)v37);
            int64x2_t v34 = vaddq_s64(v34, vceqzq_s64(v39));
          }
          else
          {
            *(_DWORD *)(v37 + 12) = v38;
            if (v36 != v41)
            {
              *(_OWORD *)(v33 + 16 * v41) = *(_OWORD *)v37;
              int v29 = *(char **)(v4 + 64);
            }
            ++v41;
          }
          uint64_t v31 = *(void *)&v29[8 * v30];
          ++v36;
          uint64_t v40 = *(void *)(v31 + 32) - *(void *)(v31 + 24);
          v37 += 16;
        }
        while (v36 < v40 >> 4);
        int64x2_t v46 = v34;
        uint64_t v42 = v40 >> 4;
      }
      fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::DeleteArcs((void *)v31, v42 - v41);
      int v29 = *(char **)(v4 + 64);
      *(int64x2_t *)(*(void *)&v29[8 * v30++] + 8) = v46;
    }
    while (v30 < (uint64_t)(*(void *)(v4 + 72) - (void)v29) >> 3);
  }
  uint64_t v43 = *(int *)(v4 + 88);
  if (v43 != -1)
  {
    uint64_t v44 = v48.__begin_;
    *(_DWORD *)(v4 + 88) = v48.__begin_[v43];
LABEL_48:
    v48.__end_ = v44;
    operator delete(v44);
    goto LABEL_49;
  }
  uint64_t v44 = v48.__begin_;
  if (v48.__begin_) {
    goto LABEL_48;
  }
LABEL_49:
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 24))(v4);
  *(void *)(v4 + 8) = *(void *)(v4 + 8) & 4 | result & 0x6A5A950007;
  return result;
}

void sub_20D40B09C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::AddArc(uint64_t a1, int a2, float *a3)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::MutateCheck(a1);
  int v6 = *(void **)(a1 + 8);
  uint64_t v7 = *(void *)(*(void *)(v6[8] + 8 * a2) + 32);
  if (v7 == *(void *)(*(void *)(v6[8] + 8 * a2) + 24)) {
    unint64_t v8 = 0;
  }
  else {
    unint64_t v8 = (_DWORD *)(v7 - 16);
  }
  uint64_t v9 = (*(uint64_t (**)(void *))(*v6 + 24))(v6);
  float v10 = *a3;
  int v11 = *((_DWORD *)a3 + 1);
  unint64_t v12 = v9 & 0xFFFFFFFFFFFCFFFFLL | 0x20000;
  if (*(_DWORD *)a3 == v11) {
    unint64_t v12 = v9;
  }
  unint64_t v13 = v12 & 0xFFFFFFFFFCFFFFFFLL | 0x1000000;
  if (!v11) {
    unint64_t v13 = v12 & 0xFFFFFFFFFC3FFFFFLL | 0x1400000;
  }
  if (v10 == 0.0) {
    unint64_t v12 = v13;
  }
  if (!v11) {
    unint64_t v12 = v12 & 0xFFFFFFFFF3FFFFFFLL | 0x4000000;
  }
  if (v8)
  {
    if (*v8 > SLODWORD(v10)) {
      unint64_t v12 = v12 & 0xFFFFFFFFCFFFFFFFLL | 0x20000000;
    }
    if (v8[1] > v11) {
      unint64_t v12 = v12 & 0xFFFFFFFF3FFFFFFFLL | 0x80000000;
    }
  }
  if (a3[2] != INFINITY && a3[2] != 0.0) {
    unint64_t v12 = v12 & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
  }
  if (*((_DWORD *)a3 + 3) <= a2) {
    unint64_t v12 = v12 & 0xFFFFFF3FFFFFFFFFLL | 0x8000000000;
  }
  if ((v12 & 0x4000000000) != 0) {
    uint64_t v14 = v12 & 0x5D7FFEB0007 | 0x2800000000;
  }
  else {
    uint64_t v14 = v12 & 0x5D7FFEB0007;
  }
  v6[1] = v6[1] & 4 | v14;
  int v15 = *(void **)(v6[8] + 8 * a2);
  fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::AddArc(v15, a3);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::AddState(uint64_t a1)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::MutateCheck(a1);
  uint64_t v2 = *(void **)(a1 + 8);
  uint64_t v3 = fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::AddState(v2);
  v2[1] = v2[1] & 4 | (*(uint64_t (**)(void *))(*v2 + 24))(v2) & 0x2AFFFFFF0007;
  return v3;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::SetProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a3 & 4;
  uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), v6);
  if (result != (v6 & a2)) {
    uint64_t result = fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::MutateCheck(a1);
  }
  *(void *)(*(void *)(a1 + 8) + 8) = *(void *)(*(void *)(a1 + 8) + 8) & (~a3 | 4) | a3 & a2;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::SetFinal(uint64_t a1, int a2, float a3)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::MutateCheck(a1);
  uint64_t v6 = *(void **)(a1 + 8);
  uint64_t v7 = *(float **)(v6[8] + 8 * a2);
  float v8 = *v7;
  float *v7 = a3;
  unint64_t v9 = (*(uint64_t (**)(void *))(*v6 + 24))(v6);
  uint64_t result = fst::SetFinalProperties<fst::TropicalWeightTpl<float>>(v9, v8, a3);
  v6[1] = v6[1] & 4 | result;
  return result;
}

unint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::SetStart(uint64_t a1, int a2)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::MutateCheck(a1);
  uint64_t v4 = *(void *)(a1 + 8);
  *(_DWORD *)(v4 + 88) = a2;
  unint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 24))(v4);
  *(void *)(v4 + 8) = result & 0xCCFFFFF0007 | (((result >> 35) & 1) << 37) | *(void *)(v4 + 8) & 4;
  return result;
}

uint64_t fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::operator=(uint64_t result, uint64_t a2)
{
  if (result != a2) {
    operator new();
  }
  return result;
}

void sub_20D40B518(_Unwind_Exception *a1)
{
  MEMORY[0x2105595E0](v1, 0x10B3C40637D23BDLL);
  _Unwind_Resume(a1);
}

uint64_t fst::ImplToExpandedFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::NumStates(uint64_t a1)
{
  return (*(void *)(*(void *)(a1 + 8) + 72) - *(void *)(*(void *)(a1 + 8) + 64)) >> 3;
}

uint64_t fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::InitArcIterator(uint64_t result, int a2, void *a3)
{
  uint64_t v3 = *(void *)(result + 8);
  *a3 = 0;
  std::vector<int>::size_type v5 = (uint64_t *)(*(void *)(*(void *)(v3 + 64) + 8 * a2) + 24);
  uint64_t v4 = *v5;
  uint64_t v6 = (v5[1] - *v5) >> 4;
  if (v5[1] == *v5) {
    uint64_t v4 = 0;
  }
  a3[1] = v4;
  a3[2] = v6;
  a3[3] = 0;
  return result;
}

uint64_t fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::InitStateIterator(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 8) = (*(void *)(v2 + 72) - *(void *)(v2 + 64)) >> 3;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::OutputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 48);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::InputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 40);
}

uint64_t fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::Write(fst *a1, uint64_t a2)
{
  v25[19] = *MEMORY[0x263EF8340];
  if (*(char *)(a2 + 23) < 0)
  {
    if (*(void *)(a2 + 8))
    {
LABEL_5:
      std::ofstream::basic_ofstream((uint64_t *)&v20);
      if ((v24[*(void *)(v20.__r_.__value_.__r.__words[0] - 24)] & 5) != 0)
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
        uint64_t v4 = fst::LogMessage::LogMessage((fst *)&v19, (uint64_t)&__p);
        std::vector<int>::size_type v5 = (void *)fst::cerr(v4);
        uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Fst::Write: Can't open file: ", 29);
        int v7 = *(char *)(a2 + 23);
        if (v7 >= 0) {
          float v8 = (const std::string::value_type *)a2;
        }
        else {
          float v8 = *(const std::string::value_type **)a2;
        }
        if (v7 >= 0) {
          uint64_t v9 = *(unsigned __int8 *)(a2 + 23);
        }
        else {
          uint64_t v9 = *(void *)(a2 + 8);
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v8, v9);
        fst::LogMessage::~LogMessage((fst::LogMessage *)&v19);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        uint64_t v10 = 0;
      }
      else
      {
        char v13 = FLAGS_fst_align;
        if (*(char *)(a2 + 23) < 0) {
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
        }
        else {
          std::string __p = *(std::string *)a2;
        }
        __int16 v16 = 257;
        char v17 = 1;
        char v18 = v13;
        uint64_t v10 = (*(uint64_t (**)(fst *, std::string *, std::string *))(*(void *)a1 + 96))(a1, &v20, &__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      v20.__r_.__value_.__r.__words[0] = *MEMORY[0x263F8C2B0];
      *(std::string::size_type *)((char *)v20.__r_.__value_.__r.__words
                                + *(void *)(v20.__r_.__value_.__r.__words[0] - 24)) = *(void *)(MEMORY[0x263F8C2B0]
                                                                                                  + 24);
      MEMORY[0x210558FE0](&v20.__r_.__value_.__r.__words[1]);
      std::ostream::~ostream();
      MEMORY[0x210559500](v25);
      return v10;
    }
  }
  else if (*(unsigned char *)(a2 + 23))
  {
    goto LABEL_5;
  }
  uint64_t v11 = fst::cout(a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "standard output");
  char v12 = FLAGS_fst_align;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v20, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string v20 = __p;
  }
  __int16 v21 = 257;
  char v22 = 1;
  char v23 = v12;
  uint64_t v10 = (*(uint64_t (**)(fst *, uint64_t, std::string *))(*(void *)a1 + 96))(a1, v11, &v20);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v10;
}

void sub_20D40B8C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  a21 = (void *)*MEMORY[0x263F8C2B0];
  *(void **)((char *)&a21 + *(a21 - 3)) = *(void **)(MEMORY[0x263F8C2B0] + 24);
  MEMORY[0x210558FE0](&a22);
  std::ostream::~ostream();
  MEMORY[0x210559500](&a72);
  _Unwind_Resume(a1);
}

void sub_20D40BB68(_Unwind_Exception *a1)
{
  std::ostream::~ostream();
  MEMORY[0x210559500](v1);
  _Unwind_Resume(a1);
}

uint64_t fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::Write(void *a1, void *a2, uint64_t a3)
{
  uint64_t v65 = *MEMORY[0x263EF8340];
  long long v50 = 0u;
  long long v51 = 0u;
  *(_OWORD *)std::vector<int> v48 = 0u;
  *(_OWORD *)std::string __p = 0u;
  uint64_t v53 = 0;
  uint64_t v54 = 0;
  uint64_t v52 = -1;
  uint64_t v52 = (*(int (**)(void *))(*a1 + 24))(a1);
  uint64_t v53 = -1;
  if ((*(uint64_t (**)(void *, uint64_t, void))(*a1 + 64))(a1, 1, 0))
  {
    uint64_t v6 = 0;
LABEL_3:
    uint64_t v45 = v6;
    int v7 = 0;
    uint64_t v53 = (int)fst::CountStates<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>((uint64_t)a1);
    goto LABEL_6;
  }
  float v8 = (char *)a2 + *(void *)(*a2 - 24);
  if ((v8[32] & 5) == 0)
  {
    (*(void (**)(unsigned char *__return_ptr))(**((void **)v8 + 5) + 32))(__str);
    uint64_t v6 = v64;
    if (v64 != -1) {
      goto LABEL_3;
    }
  }
  uint64_t v45 = -1;
  int v7 = 1;
LABEL_6:
  uint64_t v9 = (*(uint64_t (**)(void *, uint64_t, void))(*a1 + 64))(a1, 0x3FFFFFFF0004, 0);
  std::string::basic_string[abi:ne180100]<0>(__str, "vector");
  uint64_t v10 = v9 | 3;
  fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::WriteFstHeader((uint64_t)a1, (uint64_t)a2, (unsigned char *)a3, (std::string *)__str, v10, (uint64_t)v47);
  if ((__str[23] & 0x80000000) != 0) {
    operator delete(*(void **)__str);
  }
  unint64_t v11 = *(void *)(a1[1] + 72) - *(void *)(a1[1] + 64);
  unint64_t v12 = v11 >> 3;
  if ((int)(v11 >> 3) < 1)
  {
    LODWORD(v12) = 0;
  }
  else
  {
    uint64_t v13 = 0;
    uint64_t v14 = (v11 >> 3);
    do
    {
      *(_DWORD *)__str = (*(float (**)(void *, uint64_t))(*a1 + 32))(a1, v13);
      std::ostream::write();
      *(void *)__str = (*(uint64_t (**)(void *, uint64_t))(*a1 + 40))(a1, v13);
      std::ostream::write();
      uint64_t v15 = *(void *)(*(void *)(*(void *)(a1[1] + 64) + 8 * v13) + 24);
      uint64_t v16 = *(void *)(*(void *)(*(void *)(a1[1] + 64) + 8 * v13) + 32) - v15;
      if (v16)
      {
        unint64_t v17 = v16 >> 4;
        if (v17 <= 1) {
          uint64_t v18 = 1;
        }
        else {
          uint64_t v18 = v17;
        }
        char v19 = (_DWORD *)(v15 + 8);
        do
        {
          *(_DWORD *)__str = *(v19 - 2);
          std::ostream::write();
          *(_DWORD *)__str = *(v19 - 1);
          std::ostream::write();
          *(_DWORD *)__str = *v19;
          std::ostream::write();
          *(_DWORD *)__str = v19[1];
          std::ostream::write();
          v19 += 4;
          --v18;
        }
        while (v18);
      }
      ++v13;
    }
    while (v13 != v14);
  }
  std::ostream::flush();
  if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 5) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(__str, "ERROR");
    std::string v20 = fst::LogMessage::LogMessage((fst *)v56, (uint64_t)__str);
    __int16 v21 = (void *)fst::cerr(v20);
    char v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"VectorFst::Write: write failed: ", 32);
    int v23 = *(char *)(a3 + 23);
    if (v23 >= 0) {
      uint64_t v24 = a3;
    }
    else {
      uint64_t v24 = *(void *)a3;
    }
    if (v23 >= 0) {
      uint64_t v25 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      uint64_t v25 = *(void *)(a3 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, v24, v25);
LABEL_27:
    fst::LogMessage::~LogMessage((fst::LogMessage *)v56);
    if ((__str[23] & 0x80000000) != 0) {
      operator delete(*(void **)__str);
    }
    uint64_t v26 = 0;
    goto LABEL_30;
  }
  if (!v7)
  {
    if (v53 == v12)
    {
      uint64_t v26 = 1;
      goto LABEL_30;
    }
    std::string::basic_string[abi:ne180100]<0>(__str, "ERROR");
    unint64_t v36 = fst::LogMessage::LogMessage((fst *)v56, (uint64_t)__str);
    uint64_t v37 = (void *)fst::cerr(v36);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"Inconsistent number of states observed during write", 51);
    goto LABEL_27;
  }
  uint64_t v53 = v12;
  std::string::basic_string[abi:ne180100]<0>(&v46, "vector");
  MEMORY[0x210559100](v55, a2);
  uint64_t v28 = (char *)a2 + *(void *)(*a2 - 24);
  if ((v28[32] & 5) == 0)
  {
    uint64_t v29 = *((void *)v28 + 5);
    long long v62 = 0u;
    long long v63 = 0u;
    long long v60 = 0u;
    long long v61 = 0u;
    long long v58 = 0u;
    long long v59 = 0u;
    memset(__str, 0, sizeof(__str));
    uint64_t v64 = v45;
    (*(void (**)(void *__return_ptr))(*(void *)v29 + 40))(v56);
    if (v56[16] == -1) {
      std::ios_base::clear((std::ios_base *)((char *)a2 + *(void *)(*a2 - 24)), *(_DWORD *)((char *)a2 + *(void *)(*a2 - 24) + 32) | 4);
    }
  }
  MEMORY[0x210559110](v55);
  if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 5) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(__str, "ERROR");
    unint64_t v30 = fst::LogMessage::LogMessage((fst *)v56, (uint64_t)__str);
    uint64_t v31 = (void *)fst::cerr(v30);
    uint64_t v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"Fst::UpdateFstHeader: write failed: ", 36);
    int v33 = *(char *)(a3 + 23);
    if (v33 >= 0) {
      uint64_t v34 = a3;
    }
    else {
      uint64_t v34 = *(void *)a3;
    }
    if (v33 >= 0) {
      uint64_t v35 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      uint64_t v35 = *(void *)(a3 + 8);
    }
LABEL_68:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, v34, v35);
    fst::LogMessage::~LogMessage((fst::LogMessage *)v56);
    if ((__str[23] & 0x80000000) != 0) {
      operator delete(*(void **)__str);
    }
    uint64_t v26 = 0;
    goto LABEL_71;
  }
  fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::WriteFstHeader((uint64_t)a1, (uint64_t)a2, (unsigned char *)a3, &v46, v10, (uint64_t)v47);
  if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 5) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(__str, "ERROR");
    int v38 = fst::LogMessage::LogMessage((fst *)v56, (uint64_t)__str);
    int64x2_t v39 = (void *)fst::cerr(v38);
    uint64_t v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)"Fst::UpdateFstHeader: write failed: ", 36);
    int v40 = *(char *)(a3 + 23);
    if (v40 >= 0) {
      uint64_t v34 = a3;
    }
    else {
      uint64_t v34 = *(void *)a3;
    }
    if (v40 >= 0) {
      uint64_t v35 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      uint64_t v35 = *(void *)(a3 + 8);
    }
    goto LABEL_68;
  }
  MEMORY[0x210559100](v56, a2);
  uint64_t v41 = (char *)a2 + *(void *)(*a2 - 24);
  if ((v41[32] & 5) == 0)
  {
    (*(void (**)(unsigned char *__return_ptr))(**((void **)v41 + 5) + 32))(__str);
    if (v64 == -1) {
      std::ios_base::clear((std::ios_base *)((char *)a2 + *(void *)(*a2 - 24)), *(_DWORD *)((char *)a2 + *(void *)(*a2 - 24) + 32) | 4);
    }
  }
  MEMORY[0x210559110](v56);
  if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 5) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(__str, "ERROR");
    uint64_t v42 = fst::LogMessage::LogMessage((fst *)v56, (uint64_t)__str);
    uint64_t v43 = (void *)fst::cerr(v42);
    uint64_t v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"Fst::UpdateFstHeader: write failed: ", 36);
    int v44 = *(char *)(a3 + 23);
    if (v44 >= 0) {
      uint64_t v34 = a3;
    }
    else {
      uint64_t v34 = *(void *)a3;
    }
    if (v44 >= 0) {
      uint64_t v35 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      uint64_t v35 = *(void *)(a3 + 8);
    }
    goto LABEL_68;
  }
  uint64_t v26 = 1;
LABEL_71:
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v46.__r_.__value_.__l.__data_);
  }
LABEL_30:
  if (SHIBYTE(v50) < 0) {
    operator delete(__p[1]);
  }
  if (SHIBYTE(__p[0]) < 0) {
    operator delete(v48[0]);
  }
  return v26;
}

void sub_20D40C324(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,char a37)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::WriteFstHeader(uint64_t a1, uint64_t a2, unsigned char *a3, std::string *__str, uint64_t a5, uint64_t a6)
{
  if (a3[24])
  {
    std::string::operator=((std::string *)(a6 + 8), __str);
    {
      operator new();
    }
    std::string::operator=((std::string *)(a6 + 32), (const std::string *)fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::Type(void)::type);
    *(_DWORD *)(a6 + 56) = 2;
    *(void *)(a6 + 64) = a5;
    if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1)) {
      BOOL v11 = a3[25] == 0;
    }
    else {
      BOOL v11 = 1;
    }
    int v12 = !v11;
    uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
    if (a3[26]) {
      BOOL v14 = v13 == 0;
    }
    else {
      BOOL v14 = 1;
    }
    int v15 = v12 | 2;
    if (v14) {
      int v15 = v12;
    }
    if (a3[27]) {
      v15 |= 4u;
    }
    *(_DWORD *)(a6 + 60) = v15;
    fst::FstHeader::Write();
  }
  if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1)) {
    BOOL v16 = a3[25] == 0;
  }
  else {
    BOOL v16 = 1;
  }
  if (!v16)
  {
    uint64_t v17 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v17 + 72))(v17, a2);
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
  if (result) {
    BOOL v19 = a3[26] == 0;
  }
  else {
    BOOL v19 = 1;
  }
  if (!v19)
  {
    std::string v20 = *(uint64_t (**)(void))(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1) + 72);
    return v20();
  }
  return result;
}

void sub_20D40C6C0(_Unwind_Exception *a1)
{
}

void fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::Copy()
{
}

void fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::~VectorFst(void *a1)
{
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::~ImplToFst(a1);
  JUMPOUT(0x2105595E0);
}

void std::deque<int>::push_back(void *a1, _DWORD *a2)
{
  uint64_t v4 = (char *)a1[2];
  std::vector<int>::size_type v5 = (char *)a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 7) - 1;
  }
  unint64_t v8 = a1[4];
  uint64_t v7 = a1[5];
  unint64_t v9 = v7 + v8;
  if (v6 == v7 + v8)
  {
    if (v8 < 0x400)
    {
      unint64_t v23 = (v4 - v5) >> 3;
      uint64_t v24 = (char *)a1[3];
      uint64_t v25 = (uint64_t)&v24[-*a1];
      if (v23 >= v25 >> 3)
      {
        if (v24 == (char *)*a1) {
          unint64_t v26 = 1;
        }
        else {
          unint64_t v26 = v25 >> 2;
        }
        uint64_t v84 = a1 + 3;
        *(void *)&long long v82 = std::__allocate_at_least[abi:ne180100]<std::allocator<RateMarker>>(v26);
        *((void *)&v82 + 1) = v82 + 8 * v23;
        *(void *)&long long v83 = *((void *)&v82 + 1);
        *((void *)&v83 + 1) = v82 + 8 * v27;
        v81 = operator new(0x1000uLL);
        std::__split_buffer<std::shared_ptr<Agglomerate> *,std::allocator<std::shared_ptr<Agglomerate> *>>::push_back(&v82, &v81);
        uint64_t v28 = a1[2];
        unint64_t v30 = (char *)*((void *)&v82 + 1);
        uint64_t v29 = (char *)v82;
        uint64_t v32 = (char *)*((void *)&v83 + 1);
        uint64_t v31 = (char *)v83;
        while (v28 != a1[1])
        {
          if (v30 == v29)
          {
            if (v31 >= v32)
            {
              if (v32 == v29) {
                unint64_t v38 = 1;
              }
              else {
                unint64_t v38 = (v32 - v29) >> 2;
              }
              int64x2_t v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<RateMarker>>(v38);
              uint64_t v41 = v39;
              unint64_t v30 = &v39[(2 * v38 + 6) & 0xFFFFFFFFFFFFFFF8];
              uint64_t v42 = v31 - v29;
              BOOL v36 = v31 == v29;
              uint64_t v31 = v30;
              if (!v36)
              {
                uint64_t v31 = &v30[v42 & 0xFFFFFFFFFFFFFFF8];
                uint64_t v43 = 8 * (v42 >> 3);
                int v44 = v30;
                uint64_t v45 = v29;
                do
                {
                  uint64_t v46 = *(void *)v45;
                  v45 += 8;
                  *(void *)int v44 = v46;
                  v44 += 8;
                  v43 -= 8;
                }
                while (v43);
              }
              uint64_t v32 = &v39[8 * v40];
              if (v29) {
                operator delete(v29);
              }
              uint64_t v29 = v41;
            }
            else
            {
              uint64_t v33 = (v32 - v31) >> 3;
              if (v33 >= -1) {
                unint64_t v34 = v33 + 1;
              }
              else {
                unint64_t v34 = v33 + 2;
              }
              uint64_t v35 = &v31[8 * (v34 >> 1)];
              unint64_t v30 = &v35[-(v31 - v29)];
              size_t v37 = v31 - v29;
              BOOL v36 = v31 == v29;
              uint64_t v31 = v35;
              if (!v36) {
                memmove(v30, v29, v37);
              }
            }
          }
          uint64_t v47 = *(void *)(v28 - 8);
          v28 -= 8;
          *((void *)v30 - 1) = v47;
          v30 -= 8;
        }
        *(void *)&long long v82 = v29;
        *((void *)&v82 + 1) = v30;
        *(void *)&long long v83 = v31;
        *((void *)&v83 + 1) = v32;
        long long v49 = v82;
        long long v50 = v83;
        *(void *)&long long v82 = *a1;
        std::vector<int> v48 = (void *)v82;
        *((void *)&v82 + 1) = v28;
        *(_OWORD *)a1 = v49;
        *((_OWORD *)a1 + 1) = v50;
        if (v48) {
          operator delete(v48);
        }
        goto LABEL_60;
      }
      if (v24 != v4)
      {
        *(void *)&long long v82 = operator new(0x1000uLL);
        std::__split_buffer<std::shared_ptr<Agglomerate> *,std::allocator<std::shared_ptr<Agglomerate> *>>::push_back(a1, &v82);
LABEL_60:
        std::vector<int>::size_type v5 = (char *)a1[1];
        uint64_t v7 = a1[5];
        unint64_t v9 = a1[4] + v7;
        goto LABEL_61;
      }
      *(void *)&long long v82 = operator new(0x1000uLL);
      std::__split_buffer<std::shared_ptr<Agglomerate> *,std::allocator<std::shared_ptr<Agglomerate> *>>::push_front((uint64_t)a1, &v82);
      long long v62 = (void *)a1[1];
      uint64_t v4 = (char *)a1[2];
      uint64_t v64 = *v62;
      long long v63 = (char *)(v62 + 1);
      uint64_t v11 = v64;
      a1[1] = v63;
      if (v4 == (char *)a1[3])
      {
        uint64_t v65 = (uint64_t)&v63[-*a1];
        if ((unint64_t)v63 > *a1)
        {
          uint64_t v66 = v65 >> 3;
          BOOL v15 = v65 >> 3 < -1;
          uint64_t v67 = (v65 >> 3) + 2;
          if (v15) {
            uint64_t v68 = v67;
          }
          else {
            uint64_t v68 = v66 + 1;
          }
          uint64_t v69 = -(v68 >> 1);
          uint64_t v70 = v68 >> 1;
          uint64_t v71 = &v63[-8 * v70];
          int64_t v72 = v4 - v63;
          if (v4 != v63)
          {
            memmove(&v63[-8 * v70], v63, v4 - v63);
            long long v63 = (char *)a1[1];
          }
          uint64_t v4 = &v71[v72];
          int64_t v73 = &v63[8 * v69];
          goto LABEL_58;
        }
        if (v4 == (char *)*a1) {
          unint64_t v74 = 1;
        }
        else {
          unint64_t v74 = (uint64_t)&v4[-*a1] >> 2;
        }
        uint64_t v52 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<RateMarker>>(v74);
        uint64_t v53 = &v52[8 * (v74 >> 2)];
        unint64_t v55 = &v52[8 * v75];
        int v76 = (uint64_t *)a1[1];
        uint64_t v4 = v53;
        uint64_t v77 = a1[2] - (void)v76;
        if (v77)
        {
          uint64_t v4 = &v53[v77 & 0xFFFFFFFFFFFFFFF8];
          uint64_t v78 = 8 * (v77 >> 3);
          uint64_t v79 = &v52[8 * (v74 >> 2)];
          do
          {
            uint64_t v80 = *v76++;
            *(void *)uint64_t v79 = v80;
            v79 += 8;
            v78 -= 8;
          }
          while (v78);
        }
LABEL_46:
        long long v61 = (void *)*a1;
        *a1 = v52;
        a1[1] = v53;
        a1[2] = v4;
        a1[3] = v55;
        if (v61)
        {
          operator delete(v61);
          uint64_t v4 = (char *)a1[2];
        }
      }
    }
    else
    {
      a1[4] = v8 - 1024;
      uint64_t v12 = *(void *)v5;
      uint64_t v10 = v5 + 8;
      uint64_t v11 = v12;
      a1[1] = v10;
      if ((char *)a1[3] == v4)
      {
        uint64_t v13 = (uint64_t)&v10[-*a1];
        if ((unint64_t)v10 > *a1)
        {
          uint64_t v14 = v13 >> 3;
          BOOL v15 = v13 >> 3 < -1;
          uint64_t v16 = (v13 >> 3) + 2;
          if (v15) {
            uint64_t v17 = v16;
          }
          else {
            uint64_t v17 = v14 + 1;
          }
          uint64_t v18 = -(v17 >> 1);
          uint64_t v19 = v17 >> 1;
          std::string v20 = &v10[-8 * v19];
          int64_t v21 = v4 - v10;
          if (v4 == v10)
          {
            char v22 = v4;
          }
          else
          {
            memmove(&v10[-8 * v19], v10, v4 - v10);
            char v22 = (char *)a1[1];
          }
          uint64_t v4 = &v20[v21];
          int64_t v73 = &v22[8 * v18];
LABEL_58:
          a1[1] = v73;
          a1[2] = v4;
          goto LABEL_59;
        }
        if (v4 == (char *)*a1) {
          unint64_t v51 = 1;
        }
        else {
          unint64_t v51 = (uint64_t)&v4[-*a1] >> 2;
        }
        uint64_t v52 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<RateMarker>>(v51);
        uint64_t v53 = &v52[8 * (v51 >> 2)];
        unint64_t v55 = &v52[8 * v54];
        unint64_t v56 = (uint64_t *)a1[1];
        uint64_t v4 = v53;
        uint64_t v57 = a1[2] - (void)v56;
        if (v57)
        {
          uint64_t v4 = &v53[v57 & 0xFFFFFFFFFFFFFFF8];
          uint64_t v58 = 8 * (v57 >> 3);
          long long v59 = &v52[8 * (v51 >> 2)];
          do
          {
            uint64_t v60 = *v56++;
            *(void *)long long v59 = v60;
            v59 += 8;
            v58 -= 8;
          }
          while (v58);
        }
        goto LABEL_46;
      }
    }
LABEL_59:
    *(void *)uint64_t v4 = v11;
    a1[2] += 8;
    goto LABEL_60;
  }
LABEL_61:
  *(_DWORD *)(*(void *)&v5[(v9 >> 7) & 0x1FFFFFFFFFFFFF8] + 4 * (v9 & 0x3FF)) = *a2;
  a1[5] = v7 + 1;
}

void sub_20D40CB8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p)
{
  operator delete(v11);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void fst::ShortestPath<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>(std::string::size_type a1, uint64_t a2, float **a3, uint64_t a4)
{
  std::string::size_type v6 = a1;
  uint64_t v7 = *(void *)(a4 + 24);
  if (v7 == 1 && *(unsigned char *)(a4 + 35) == 0)
  {
    if ((*(unsigned int (**)(std::string::size_type))(*(void *)a1 + 24))(a1) == -1)
    {
      BOOL v138 = 0;
      uint64_t v157 = 0xFFFFFFFFLL;
    }
    else
    {
      unint64_t v266 = 0;
      unint64_t v267 = 0;
      unint64_t v268 = 0;
      std::string::size_type v131 = *(void *)a4;
      uint64_t v132 = *(unsigned int *)(a4 + 12);
      if (v132 == -1) {
        uint64_t v132 = (*(uint64_t (**)(std::string::size_type))(*(void *)v6 + 24))(v6);
      }
      a3[1] = *a3;
      (*(void (**)(void))(**(void **)(v131 + 16) + 56))(*(void *)(v131 + 16));
      if (*(void *)(a4 + 24) == 1)
      {
        LODWORD(__str.__r_.__value_.__l.__data_) = 0;
        LODWORD(__str.__r_.__value_.__l.__data_) = *(_DWORD *)(a4 + 36);
        LODWORD(__p) = 2139095040;
        if (*(float *)&__str.__r_.__value_.__l.__data_ == INFINITY && *(_DWORD *)(a4 + 40) == -1)
        {
          uint64_t v249 = a4;
          int v133 = *a3;
          v134 = a3[1];
          unint64_t v135 = v134 - *a3;
          uint64_t v254 = v132;
          unint64_t v136 = 0;
          if (v135 >= (int)v132)
          {
            uint64_t v150 = 0;
            BOOL v138 = 0;
          }
          else
          {
            float v137 = 0;
            BOOL v138 = 0;
            unint64_t v139 = (int)v132;
            do
            {
              unint64_t v140 = (unint64_t)a3[2];
              if ((unint64_t)v134 >= v140)
              {
                if ((v135 + 1) >> 62) {
                  std::vector<int>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v142 = v140 - (void)v133;
                uint64_t v143 = v142 >> 1;
                if (v142 >> 1 <= v135 + 1) {
                  uint64_t v143 = v135 + 1;
                }
                if ((unint64_t)v142 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v144 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v144 = v143;
                }
                if (v144) {
                  unint64_t v144 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::TropicalWeightTpl<float>>>(v144);
                }
                else {
                  uint64_t v145 = 0;
                }
                float v146 = (float *)(v144 + 4 * v135);
                *float v146 = INFINITY;
                float v141 = v146 + 1;
                BOOL v148 = *a3;
                v147 = a3[1];
                if (v147 != *a3)
                {
                  do
                  {
                    int v149 = *((_DWORD *)v147-- - 1);
                    *((_DWORD *)v146-- - 1) = v149;
                  }
                  while (v147 != v148);
                  v147 = *a3;
                }
                *a3 = v146;
                a3[1] = v141;
                a3[2] = (float *)(v144 + 4 * v145);
                if (v147) {
                  operator delete(v147);
                }
              }
              else
              {
                float *v134 = INFINITY;
                float v141 = v134 + 1;
              }
              a3[1] = v141;
              __str.__r_.__value_.__s.__data_[0] = 0;
              std::vector<BOOL>::push_back((uint64_t)&v266, &__str);
              if ((unint64_t)v137 >= v136)
              {
                uint64_t v151 = (v137 - v138) >> 4;
                unint64_t v152 = v151 + 1;
                if ((unint64_t)(v151 + 1) >> 60) {
                  std::vector<int>::__throw_length_error[abi:ne180100]();
                }
                if ((uint64_t)(v136 - (void)v138) >> 3 > v152) {
                  unint64_t v152 = (uint64_t)(v136 - (void)v138) >> 3;
                }
                if (v136 - (unint64_t)v138 >= 0x7FFFFFFFFFFFFFF0) {
                  unint64_t v153 = 0xFFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v153 = v152;
                }
                if (v153) {
                  unint64_t v153 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Agglomerate>>>(v153);
                }
                else {
                  uint64_t v154 = 0;
                }
                unint64_t v155 = v153 + 16 * v151;
                *(_DWORD *)unint64_t v155 = -1;
                *(void *)(v155 + 8) = -1;
                if (v137 == v138)
                {
                  BOOL v138 = (char *)(v153 + 16 * v151);
                }
                else
                {
                  uint64_t v156 = (char *)(v153 + 16 * v151);
                  do
                  {
                    *((_OWORD *)v156 - 1) = *((_OWORD *)v137 - 1);
                    v156 -= 16;
                    v137 -= 16;
                  }
                  while (v137 != v138);
                  float v137 = v138;
                  BOOL v138 = v156;
                }
                unint64_t v136 = v153 + 16 * v154;
                uint64_t v150 = (char *)(v155 + 16);
                if (v137) {
                  operator delete(v137);
                }
              }
              else
              {
                *(_DWORD *)float v137 = -1;
                *((void *)v137 + 1) = -1;
                uint64_t v150 = v137 + 16;
              }
              int v133 = *a3;
              v134 = a3[1];
              unint64_t v135 = v134 - *a3;
              float v137 = v150;
            }
            while (v135 < v139);
          }
          unint64_t v165 = (unint64_t)a3[2];
          if ((unint64_t)v134 >= v165)
          {
            if ((v135 + 1) >> 62) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v167 = v165 - (void)v133;
            uint64_t v168 = v167 >> 1;
            if (v167 >> 1 <= v135 + 1) {
              uint64_t v168 = v135 + 1;
            }
            if ((unint64_t)v167 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v169 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v169 = v168;
            }
            if (v169) {
              unint64_t v169 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::TropicalWeightTpl<float>>>(v169);
            }
            else {
              uint64_t v170 = 0;
            }
            float v184 = (float *)(v169 + 4 * v135);
            unint64_t v185 = v169 + 4 * v170;
            *float v184 = 0.0;
            BOOL v166 = v184 + 1;
            unint64_t v187 = *a3;
            unint64_t v186 = a3[1];
            if (v186 != *a3)
            {
              do
              {
                int v188 = *((_DWORD *)v186-- - 1);
                *((_DWORD *)v184-- - 1) = v188;
              }
              while (v186 != v187);
              unint64_t v186 = *a3;
            }
            *a3 = v184;
            a3[1] = v166;
            a3[2] = (float *)v185;
            if (v186) {
              operator delete(v186);
            }
          }
          else
          {
            float *v134 = 0.0;
            BOOL v166 = v134 + 1;
          }
          a3[1] = v166;
          if ((unint64_t)v150 >= v136)
          {
            uint64_t v190 = (v150 - v138) >> 4;
            unint64_t v191 = v190 + 1;
            if ((unint64_t)(v190 + 1) >> 60) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            if ((uint64_t)(v136 - (void)v138) >> 3 > v191) {
              unint64_t v191 = (uint64_t)(v136 - (void)v138) >> 3;
            }
            if (v136 - (unint64_t)v138 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v192 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v192 = v191;
            }
            if (v192) {
              unint64_t v192 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Agglomerate>>>(v192);
            }
            else {
              uint64_t v193 = 0;
            }
            uint8x8_t v194 = (void *)(v192 + 16 * v190);
            unint64_t v136 = v192 + 16 * v193;
            *(_DWORD *)uint8x8_t v194 = -1;
            v194[1] = -1;
            v189 = (char *)(v194 + 2);
            if (v150 != v138)
            {
              do
              {
                *((_OWORD *)v194 - 1) = *((_OWORD *)v150 - 1);
                v194 -= 2;
                v150 -= 16;
              }
              while (v150 != v138);
              uint64_t v150 = v138;
            }
            BOOL v138 = (char *)v194;
            if (v150) {
              operator delete(v150);
            }
          }
          else
          {
            *(_DWORD *)uint64_t v150 = -1;
            *((void *)v150 + 1) = -1;
            v189 = v150 + 16;
          }
          (*(void (**)(void, uint64_t))(**(void **)(v131 + 16) + 24))(*(void *)(v131 + 16), v254);
          __str.__r_.__value_.__s.__data_[0] = 1;
          std::vector<BOOL>::push_back((uint64_t)&v266, &__str);
          float v195 = INFINITY;
          unsigned int v250 = -1;
          while (1)
          {
            if ((*(uint64_t (**)(void))(**(void **)(v131 + 16) + 48))(*(void *)(v131 + 16)))
            {
LABEL_472:
              int v171 = 1;
              goto LABEL_302;
            }
            uint64_t v255 = (*(uint64_t (**)(void))(**(void **)(v131 + 16) + 16))(*(void *)(v131 + 16));
            (*(void (**)(void))(**(void **)(v131 + 16) + 32))(*(void *)(v131 + 16));
            *(void *)&v266[((unint64_t)(int)v255 >> 3) & 0x1FFFFFFFFFFFFFF8] &= ~(1 << v255);
            float v196 = (*a3)[(int)v255];
            LODWORD(__str.__r_.__value_.__l.__data_) = (*(float (**)(std::string::size_type))(*(void *)a1 + 32))(a1);
            LODWORD(__p) = 2139095040;
            if (*(float *)&__str.__r_.__value_.__l.__data_ != INFINITY)
            {
              (*(void (**)(std::string::size_type, uint64_t))(*(void *)a1 + 32))(a1, v255);
              float v198 = NAN;
              if (v196 != -INFINITY && v197 != -INFINITY)
              {
                float v198 = INFINITY;
                BOOL v199 = v197 == INFINITY || v196 == INFINITY;
                float v200 = v196 + v197;
                if (!v199) {
                  float v198 = v200;
                }
              }
              int v171 = 0;
              if (v195 >= v198) {
                float v201 = v198;
              }
              else {
                float v201 = v195;
              }
              if (v198 == -INFINITY || v195 == -INFINITY) {
                float v201 = NAN;
              }
              *(float *)&__str.__r_.__value_.__l.__data_ = v195;
              *(float *)&std::string __p = v201;
              unsigned int v204 = v250;
              if (v195 != v201) {
                unsigned int v204 = v255;
              }
              unsigned int v250 = v204;
              if (v195 != v201) {
                float v195 = v201;
              }
              if (v195 == -INFINITY) {
                goto LABEL_302;
              }
              if (*(unsigned char *)(v249 + 34)) {
                goto LABEL_472;
              }
            }
            std::string::size_type v261 = 0;
            (*(void (**)(std::string::size_type, uint64_t, std::string *))(*(void *)a1 + 136))(a1, v255, &__str);
            while (1)
            {
              if (!__str.__r_.__value_.__r.__words[0])
              {
                std::string::size_type v208 = v261;
                if (v261 >= __str.__r_.__value_.__r.__words[2])
                {
                  int v248 = 0;
                  goto LABEL_468;
                }
                goto LABEL_389;
              }
              char v205 = (*(uint64_t (**)(std::string::size_type))(*(void *)__str.__r_.__value_.__l.__data_
                                                                       + 24))(__str.__r_.__value_.__r.__words[0]);
              std::string::size_type v206 = __str.__r_.__value_.__r.__words[0];
              if (v205) {
                break;
              }
              if (__str.__r_.__value_.__r.__words[0])
              {
                std::string::size_type v207 = (*(uint64_t (**)(void))(*(void *)__str.__r_.__value_.__l.__data_ + 32))();
                goto LABEL_424;
              }
              std::string::size_type v208 = v261;
LABEL_389:
              std::string::size_type v207 = __str.__r_.__value_.__l.__size_ + 16 * v208;
LABEL_424:
              while (1)
              {
                float v226 = *a3;
                float v227 = a3[1];
                unint64_t v228 = v227 - *a3;
                unint64_t v229 = *(int *)(v207 + 12);
                if (v228 > v229) {
                  break;
                }
                unint64_t v209 = (unint64_t)a3[2];
                if ((unint64_t)v227 >= v209)
                {
                  if ((v228 + 1) >> 62) {
                    std::vector<int>::__throw_length_error[abi:ne180100]();
                  }
                  uint64_t v211 = v209 - (void)v226;
                  uint64_t v212 = v211 >> 1;
                  if (v211 >> 1 <= v228 + 1) {
                    uint64_t v212 = v228 + 1;
                  }
                  if ((unint64_t)v211 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v213 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v213 = v212;
                  }
                  if (v213) {
                    unint64_t v213 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::TropicalWeightTpl<float>>>(v213);
                  }
                  else {
                    uint64_t v214 = 0;
                  }
                  float v215 = (float *)(v213 + 4 * v228);
                  *float v215 = INFINITY;
                  v210 = v215 + 1;
                  v217 = *a3;
                  float v216 = a3[1];
                  if (v216 != *a3)
                  {
                    do
                    {
                      int v218 = *((_DWORD *)v216-- - 1);
                      *((_DWORD *)v215-- - 1) = v218;
                    }
                    while (v216 != v217);
                    float v216 = *a3;
                  }
                  *a3 = v215;
                  a3[1] = v210;
                  a3[2] = (float *)(v213 + 4 * v214);
                  if (v216) {
                    operator delete(v216);
                  }
                }
                else
                {
                  *float v227 = INFINITY;
                  v210 = v227 + 1;
                }
                a3[1] = v210;
                LOBYTE(__p) = 0;
                std::vector<BOOL>::push_back((uint64_t)&v266, &__p);
                if ((unint64_t)v189 >= v136)
                {
                  uint64_t v219 = (v189 - v138) >> 4;
                  unint64_t v220 = v219 + 1;
                  if ((unint64_t)(v219 + 1) >> 60) {
                    std::vector<int>::__throw_length_error[abi:ne180100]();
                  }
                  if ((uint64_t)(v136 - (void)v138) >> 3 > v220) {
                    unint64_t v220 = (uint64_t)(v136 - (void)v138) >> 3;
                  }
                  if (v136 - (unint64_t)v138 >= 0x7FFFFFFFFFFFFFF0) {
                    unint64_t v221 = 0xFFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v221 = v220;
                  }
                  if (v221) {
                    unint64_t v221 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Agglomerate>>>(v221);
                  }
                  else {
                    uint64_t v222 = 0;
                  }
                  unint64_t v223 = v221 + 16 * v219;
                  *(_DWORD *)unint64_t v223 = -1;
                  *(void *)(v223 + 8) = -1;
                  if (v189 == v138)
                  {
                    uint64_t v225 = v189;
                    BOOL v138 = (char *)(v221 + 16 * v219);
                  }
                  else
                  {
                    v224 = (char *)(v221 + 16 * v219);
                    do
                    {
                      *((_OWORD *)v224 - 1) = *((_OWORD *)v189 - 1);
                      v224 -= 16;
                      v189 -= 16;
                    }
                    while (v189 != v138);
                    uint64_t v225 = v138;
                    BOOL v138 = v224;
                  }
                  unint64_t v136 = v221 + 16 * v222;
                  v189 = (char *)(v223 + 16);
                  if (v225) {
                    operator delete(v225);
                  }
                }
                else
                {
                  *(_DWORD *)v189 = -1;
                  *((void *)v189 + 1) = -1;
                  v189 += 16;
                }
              }
              float v230 = NAN;
              if (v196 != -INFINITY)
              {
                float v231 = *(float *)(v207 + 8);
                float v230 = NAN;
                if (v231 != -INFINITY)
                {
                  float v230 = INFINITY;
                  BOOL v232 = v231 == INFINITY || v196 == INFINITY;
                  float v233 = v196 + v231;
                  if (!v232) {
                    float v230 = v233;
                  }
                }
              }
              float v234 = v226[v229];
              if (v234 >= v230) {
                float v235 = v230;
              }
              else {
                float v235 = v226[v229];
              }
              BOOL v237 = v230 == -INFINITY || v234 == -INFINITY;
              float v238 = NAN;
              if (!v237) {
                float v238 = v235;
              }
              LODWORD(__p) = 0;
              *(float *)&std::string __p = v226[v229];
              *(float *)&uint64_t v256 = v238;
              if (*(float *)&__p != v238)
              {
                float v239 = v226[v229];
                if (v239 >= v230) {
                  float v240 = v230;
                }
                else {
                  float v240 = v226[v229];
                }
                BOOL v242 = v230 == -INFINITY || v239 == -INFINITY;
                float v243 = NAN;
                if (!v242) {
                  float v243 = v240;
                }
                v226[v229] = v243;
                int v248 = 1;
                std::string::size_type v206 = __str.__r_.__value_.__r.__words[0];
                if (v243 == -INFINITY) {
                  goto LABEL_466;
                }
                if (__str.__r_.__value_.__r.__words[0]) {
                  uint64_t v244 = (*(uint64_t (**)(void))(*(void *)__str.__r_.__value_.__l.__data_ + 48))();
                }
                else {
                  uint64_t v244 = v261;
                }
                unint64_t v245 = *(int *)(v207 + 12);
                uint64_t v246 = &v138[16 * v245];
                *(_DWORD *)uint64_t v246 = v255;
                *((void *)v246 + 1) = v244;
                uint64_t v247 = **(void **)(v131 + 16);
                if ((*(void *)&v266[(v245 >> 3) & 0x1FFFFFFFFFFFFFF8] >> v245))
                {
                  (*(void (**)(void))(v247 + 40))();
                }
                else
                {
                  (*(void (**)(void))(v247 + 24))();
                  *(void *)&v266[((unint64_t)*(int *)(v207 + 12) >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << *(_DWORD *)(v207 + 12);
                }
              }
              if (__str.__r_.__value_.__r.__words[0]) {
                (*(void (**)(std::string::size_type))(*(void *)__str.__r_.__value_.__l.__data_ + 40))(__str.__r_.__value_.__r.__words[0]);
              }
              else {
                ++v261;
              }
            }
            int v248 = 0;
LABEL_466:
            if (v206)
            {
              (*(void (**)(std::string::size_type))(*(void *)v206 + 8))(v206);
            }
            else
            {
LABEL_468:
              if (v260) {
                --*v260;
              }
            }
            if (v248)
            {
              int v171 = 0;
              goto LABEL_302;
            }
          }
        }
        if (FLAGS_fst_error_fatal) {
          std::string::basic_string[abi:ne180100]<0>(&__p, "FATAL");
        }
        else {
          std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
        }
        uint64_t v160 = fst::LogMessage::LogMessage((fst *)&v256, (uint64_t)&__p);
        v161 = (void *)fst::cerr(v160);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v161, (uint64_t)"SingleShortestPath: weight and state thresholds not applicable", 62);
      }
      else
      {
        if (FLAGS_fst_error_fatal) {
          std::string::basic_string[abi:ne180100]<0>(&__p, "FATAL");
        }
        else {
          std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
        }
        uint64_t v158 = fst::LogMessage::LogMessage((fst *)&v256, (uint64_t)&__p);
        uint64_t v159 = (void *)fst::cerr(v158);
        v162 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v159, (uint64_t)"SingleShortestPath: for nshortest > 1, use ShortestPath", 55);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v162, (uint64_t)" instead", 8);
      }
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v256);
      if (SHIBYTE(v258) < 0) {
        operator delete(__p);
      }
      BOOL v138 = 0;
      int v171 = 0;
      unsigned int v250 = -1;
LABEL_302:
      if (v266) {
        operator delete(v266);
      }
      std::string::size_type v6 = a1;
      uint64_t v157 = v250;
      if (!v171)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 184))(a2, 4, 4);
        goto LABEL_326;
      }
    }
    (*(void (**)(uint64_t))(*(void *)a2 + 216))(a2);
    uint64_t v172 = (*(uint64_t (**)(std::string::size_type))(*(void *)v6 + 112))(v6);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 272))(a2, v172);
    uint64_t v173 = (*(uint64_t (**)(std::string::size_type))(*(void *)v6 + 120))(v6);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 280))(a2, v173);
    if (v157 != -1)
    {
      int v174 = -1;
      int v175 = -1;
      uint64_t v176 = v157;
      while (1)
      {
        uint64_t v177 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 192))(a2);
        if (v175 != -1) {
          break;
        }
        (*(void (**)(std::string::size_type, uint64_t))(*(void *)a1 + 32))(a1, v157);
        (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 176))(a2, v177);
LABEL_319:
        int v175 = v176;
        int v174 = v177;
        uint64_t v176 = *(unsigned int *)&v138[16 * (int)v176];
        if (v176 == -1) {
          goto LABEL_323;
        }
      }
      std::string::size_type v261 = 0;
      (*(void (**)(std::string::size_type, uint64_t, std::string *))(*(void *)a1 + 136))(a1, v176, &__str);
      std::string::size_type v178 = *(void *)&v138[16 * v175 + 8];
      if (__str.__r_.__value_.__r.__words[0])
      {
        (*(void (**)(std::string::size_type, std::string::size_type))(*(void *)__str.__r_.__value_.__l.__data_
                                                                               + 64))(__str.__r_.__value_.__r.__words[0], v178);
        if (__str.__r_.__value_.__r.__words[0])
        {
          std::string::size_type v179 = (*(uint64_t (**)(std::string::size_type))(*(void *)__str.__r_.__value_.__l.__data_ + 32))(__str.__r_.__value_.__r.__words[0]);
          goto LABEL_315;
        }
        std::string::size_type v178 = v261;
      }
      else
      {
        std::string::size_type v261 = *(void *)&v138[16 * v175 + 8];
      }
      std::string::size_type v179 = __str.__r_.__value_.__l.__size_ + 16 * v178;
LABEL_315:
      unsigned int v180 = *(_DWORD *)(v179 + 8);
      unint64_t v266 = *(char **)v179;
      unint64_t v267 = __PAIR64__(v174, v180);
      (*(void (**)(uint64_t, uint64_t, char **))(*(void *)a2 + 200))(a2, v177, &v266);
      if (__str.__r_.__value_.__r.__words[0])
      {
        (*(void (**)(std::string::size_type))(*(void *)__str.__r_.__value_.__l.__data_ + 8))(__str.__r_.__value_.__r.__words[0]);
      }
      else if (v260)
      {
        --*v260;
      }
      goto LABEL_319;
    }
    uint64_t v177 = 0xFFFFFFFFLL;
LABEL_323:
    (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 168))(a2, v177);
    if ((*(uint64_t (**)(std::string::size_type, uint64_t, void))(*(void *)a1 + 64))(a1, 4, 0)) {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 184))(a2, 4, 4);
    }
    unint64_t v181 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a2 + 64))(a2, 0x3FFFFFFF0007, 0);
    unint64_t v182 = fst::ShortestPathProperties(v181, 0);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(*(void *)a2 + 184))(a2, v182, 0x3FFFFFFF0007);
LABEL_326:
    if (v138) {
      operator delete(v138);
    }
    return;
  }
  if (!v7) {
    return;
  }
  if (*(unsigned char *)(a4 + 33)) {
    goto LABEL_285;
  }
  __str.__r_.__value_.__r.__words[0] = a1;
  __str.__r_.__value_.__l.__size_ = (std::string::size_type)a3;
  __str.__r_.__value_.__r.__words[2] = *(void *)a4;
  HIDWORD(v260) = *(_DWORD *)(a4 + 16);
  LOWORD(v261) = *(unsigned __int8 *)(a4 + 20);
  long long v262 = 0u;
  long long v263 = 0u;
  long long v264 = 0u;
  memset(v265, 0, 29);
  a3[1] = *a3;
  int v9 = *(_DWORD *)(a4 + 12);
  if ((*(unsigned int (**)(std::string::size_type))(*(void *)a1 + 24))(a1) == -1)
  {
    uint64_t v163 = (*(uint64_t (**)(std::string::size_type, uint64_t, void))(*(void *)__str.__r_.__value_.__l.__data_
                                                                              + 64))(__str.__r_.__value_.__r.__words[0], 4, 0);
LABEL_278:
    if (v163) {
      BYTE4(v265[3]) = 1;
    }
    goto LABEL_280;
  }
  (*(void (**)(void))(**(void **)(__str.__r_.__value_.__r.__words[2] + 16) + 56))(*(void *)(__str.__r_.__value_.__r.__words[2] + 16));
  if (!BYTE1(v261))
  {
    *(void *)(__str.__r_.__value_.__l.__size_ + 8) = *(void *)__str.__r_.__value_.__l.__size_;
    *((void *)&v262 + 1) = v262;
    *(void *)&long long v264 = 0;
  }
  if (v9 == -1) {
    int v9 = (*(uint64_t (**)(std::string::size_type))(*(void *)__str.__r_.__value_.__l.__data_ + 24))(__str.__r_.__value_.__r.__words[0]);
  }
  size = (void **)__str.__r_.__value_.__l.__size_;
  uint64_t v11 = (void **)(__str.__r_.__value_.__l.__size_ + 8);
  uint64_t v12 = *(_DWORD **)(__str.__r_.__value_.__l.__size_ + 8);
  uint64_t v13 = *(void *)__str.__r_.__value_.__l.__size_;
  for (unint64_t i = ((uint64_t)v12 - *(void *)__str.__r_.__value_.__l.__size_) >> 2;
        i <= v9;
        unint64_t i = ((uint64_t)v12 - *(void *)__str.__r_.__value_.__l.__size_) >> 2)
  {
    unint64_t v15 = (unint64_t)size[2];
    if ((unint64_t)v12 >= v15)
    {
      if ((i + 1) >> 62) {
        goto LABEL_478;
      }
      uint64_t v17 = v15 - v13;
      uint64_t v18 = v17 >> 1;
      if (v17 >> 1 <= i + 1) {
        uint64_t v18 = i + 1;
      }
      if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v19 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v19 = v18;
      }
      if (v19) {
        unint64_t v19 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::TropicalWeightTpl<float>>>(v19);
      }
      else {
        uint64_t v20 = 0;
      }
      int64_t v21 = (_DWORD *)(v19 + 4 * i);
      *int64_t v21 = 2139095040;
      uint64_t v16 = v21 + 1;
      char v22 = (char *)*v11;
      unint64_t v23 = (char *)*size;
      if (*v11 != *size)
      {
        do
        {
          int v24 = *((_DWORD *)v22 - 1);
          v22 -= 4;
          *--int64_t v21 = v24;
        }
        while (v22 != v23);
        char v22 = (char *)*size;
      }
      *size = v21;
      void *v11 = v16;
      size[2] = (void *)(v19 + 4 * v20);
      if (v22) {
        operator delete(v22);
      }
    }
    else
    {
      _DWORD *v12 = 2139095040;
      uint64_t v16 = v12 + 1;
    }
    void *v11 = v16;
    uint64_t v25 = *((void *)&v262 + 1);
    if (*((void *)&v262 + 1) >= (unint64_t)v263)
    {
      uint64_t v27 = (uint64_t)(*((void *)&v262 + 1) - v262) >> 2;
      if ((unint64_t)(v27 + 1) >> 62) {
LABEL_478:
      }
        std::vector<int>::__throw_length_error[abi:ne180100]();
      unint64_t v28 = (uint64_t)(v263 - v262) >> 1;
      if (v28 <= v27 + 1) {
        unint64_t v28 = v27 + 1;
      }
      if ((void)v263 - (void)v262 >= 0x7FFFFFFFFFFFFFFCuLL) {
        unint64_t v29 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v29 = v28;
      }
      if (v29) {
        unint64_t v29 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::TropicalWeightTpl<float>>>(v29);
      }
      else {
        uint64_t v30 = 0;
      }
      uint64_t v31 = (_DWORD *)(v29 + 4 * v27);
      *uint64_t v31 = 2139095040;
      unint64_t v26 = v31 + 1;
      uint64_t v32 = (char *)*((void *)&v262 + 1);
      uint64_t v33 = (char *)v262;
      if (*((void *)&v262 + 1) != (void)v262)
      {
        do
        {
          int v34 = *((_DWORD *)v32 - 1);
          v32 -= 4;
          *--uint64_t v31 = v34;
        }
        while (v32 != v33);
        uint64_t v32 = (char *)v262;
      }
      *(void *)&long long v262 = v31;
      *((void *)&v262 + 1) = v26;
      *(void *)&long long v263 = v29 + 4 * v30;
      if (v32) {
        operator delete(v32);
      }
    }
    else
    {
      **((_DWORD **)&v262 + 1) = 2139095040;
      unint64_t v26 = (_DWORD *)(v25 + 4);
    }
    *((void *)&v262 + 1) = v26;
    LOBYTE(v266) = 0;
    std::vector<BOOL>::push_back((uint64_t)&v263 + 8, &v266);
    size = (void **)__str.__r_.__value_.__l.__size_;
    uint64_t v11 = (void **)(__str.__r_.__value_.__l.__size_ + 8);
    uint64_t v12 = *(_DWORD **)(__str.__r_.__value_.__l.__size_ + 8);
    uint64_t v13 = *(void *)__str.__r_.__value_.__l.__size_;
  }
  if (BYTE1(v261))
  {
    uint64_t v35 = (char *)v265[0];
    BOOL v36 = (char *)v265[1];
    unint64_t v37 = (uint64_t)(v265[1] - v265[0]) >> 2;
    if (v37 <= v9)
    {
      do
      {
        if ((unint64_t)v36 >= v265[2])
        {
          unint64_t v39 = v37 + 1;
          if ((v37 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v40 = v265[2] - (void)v35;
          if ((uint64_t)(v265[2] - (void)v35) >> 1 > v39) {
            unint64_t v39 = v40 >> 1;
          }
          if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v41 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v41 = v39;
          }
          if (v41)
          {
            uint64_t v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v265[2], v41);
            uint64_t v35 = (char *)v265[0];
            BOOL v36 = (char *)v265[1];
          }
          else
          {
            uint64_t v42 = 0;
          }
          uint64_t v43 = &v42[4 * v37];
          *(_DWORD *)uint64_t v43 = -1;
          unint64_t v38 = v43 + 4;
          while (v36 != v35)
          {
            int v44 = *((_DWORD *)v36 - 1);
            v36 -= 4;
            *((_DWORD *)v43 - 1) = v44;
            v43 -= 4;
          }
          v265[0] = v43;
          v265[1] = v38;
          v265[2] = &v42[4 * v41];
          if (v35)
          {
            operator delete(v35);
            uint64_t v35 = (char *)v265[0];
          }
          else
          {
            uint64_t v35 = v43;
          }
        }
        else
        {
          *(_DWORD *)BOOL v36 = -1;
          unint64_t v38 = v36 + 4;
        }
        v265[1] = v38;
        unint64_t v37 = (v38 - v35) >> 2;
        BOOL v36 = v38;
      }
      while (v37 <= v9);
      uint64_t v13 = *(void *)__str.__r_.__value_.__l.__size_;
    }
    *(_DWORD *)&v35[4 * v9] = v265[3];
  }
  *(_DWORD *)(v13 + 4 * v9) = 0;
  *(_DWORD *)(v262 + 4 * v9) = 0;
  *(void *)(*((void *)&v263 + 1) + (((unint64_t)v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v9;
  (*(void (**)(void, void))(**(void **)(__str.__r_.__value_.__r.__words[2] + 16) + 24))(*(void *)(__str.__r_.__value_.__r.__words[2] + 16), v9);
  do
  {
    if ((*(uint64_t (**)(void))(**(void **)(__str.__r_.__value_.__r.__words[2] + 16) + 48))(*(void *)(__str.__r_.__value_.__r.__words[2] + 16))) {
      goto LABEL_276;
    }
    uint64_t v45 = (*(uint64_t (**)(void))(**(void **)(__str.__r_.__value_.__r.__words[2] + 16) + 16))(*(void *)(__str.__r_.__value_.__r.__words[2] + 16));
    (*(void (**)(void))(**(void **)(__str.__r_.__value_.__r.__words[2] + 16) + 32))(*(void *)(__str.__r_.__value_.__r.__words[2] + 16));
    unint64_t v46 = (int)v45;
    uint64_t v47 = (void **)__str.__r_.__value_.__l.__size_;
    uint64_t v48 = v45;
    long long v49 = (void **)(__str.__r_.__value_.__l.__size_ + 8);
    long long v50 = *(_DWORD **)(__str.__r_.__value_.__l.__size_ + 8);
    uint64_t v51 = *(void *)__str.__r_.__value_.__l.__size_;
    unint64_t v52 = ((uint64_t)v50 - *(void *)__str.__r_.__value_.__l.__size_) >> 2;
    uint64_t v251 = v48;
    if (v52 <= (int)v48)
    {
      do
      {
        unint64_t v53 = (unint64_t)v47[2];
        if ((unint64_t)v50 >= v53)
        {
          if ((v52 + 1) >> 62) {
            goto LABEL_478;
          }
          uint64_t v55 = v53 - v51;
          uint64_t v56 = v55 >> 1;
          if (v55 >> 1 <= v52 + 1) {
            uint64_t v56 = v52 + 1;
          }
          if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v57 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v57 = v56;
          }
          if (v57) {
            unint64_t v57 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::TropicalWeightTpl<float>>>(v57);
          }
          else {
            uint64_t v58 = 0;
          }
          long long v59 = (_DWORD *)(v57 + 4 * v52);
          _DWORD *v59 = 2139095040;
          uint64_t v54 = v59 + 1;
          uint64_t v60 = (char *)*v49;
          long long v61 = (char *)*v47;
          if (*v49 != *v47)
          {
            do
            {
              int v62 = *((_DWORD *)v60 - 1);
              v60 -= 4;
              *--long long v59 = v62;
            }
            while (v60 != v61);
            uint64_t v60 = (char *)*v47;
          }
          *uint64_t v47 = v59;
          char *v49 = v54;
          v47[2] = (void *)(v57 + 4 * v58);
          if (v60) {
            operator delete(v60);
          }
        }
        else
        {
          *long long v50 = 2139095040;
          uint64_t v54 = v50 + 1;
        }
        char *v49 = v54;
        uint64_t v63 = *((void *)&v262 + 1);
        if (*((void *)&v262 + 1) >= (unint64_t)v263)
        {
          uint64_t v65 = (uint64_t)(*((void *)&v262 + 1) - v262) >> 2;
          if ((unint64_t)(v65 + 1) >> 62) {
            goto LABEL_478;
          }
          unint64_t v66 = (uint64_t)(v263 - v262) >> 1;
          if (v66 <= v65 + 1) {
            unint64_t v66 = v65 + 1;
          }
          if ((void)v263 - (void)v262 >= 0x7FFFFFFFFFFFFFFCuLL) {
            unint64_t v67 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v67 = v66;
          }
          if (v67) {
            unint64_t v67 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::TropicalWeightTpl<float>>>(v67);
          }
          else {
            uint64_t v68 = 0;
          }
          uint64_t v69 = (_DWORD *)(v67 + 4 * v65);
          *uint64_t v69 = 2139095040;
          uint64_t v64 = v69 + 1;
          uint64_t v70 = (char *)*((void *)&v262 + 1);
          uint64_t v71 = (char *)v262;
          if (*((void *)&v262 + 1) != (void)v262)
          {
            do
            {
              int v72 = *((_DWORD *)v70 - 1);
              v70 -= 4;
              *--uint64_t v69 = v72;
            }
            while (v70 != v71);
            uint64_t v70 = (char *)v262;
          }
          *(void *)&long long v262 = v69;
          *((void *)&v262 + 1) = v64;
          *(void *)&long long v263 = v67 + 4 * v68;
          if (v70) {
            operator delete(v70);
          }
        }
        else
        {
          **((_DWORD **)&v262 + 1) = 2139095040;
          uint64_t v64 = (_DWORD *)(v63 + 4);
        }
        *((void *)&v262 + 1) = v64;
        LOBYTE(v266) = 0;
        std::vector<BOOL>::push_back((uint64_t)&v263 + 8, &v266);
        uint64_t v47 = (void **)__str.__r_.__value_.__l.__size_;
        long long v49 = (void **)(__str.__r_.__value_.__l.__size_ + 8);
        long long v50 = *(_DWORD **)(__str.__r_.__value_.__l.__size_ + 8);
        uint64_t v51 = *(void *)__str.__r_.__value_.__l.__size_;
        unint64_t v52 = ((uint64_t)v50 - *(void *)__str.__r_.__value_.__l.__size_) >> 2;
      }
      while (v52 <= v46);
    }
    if ((_BYTE)v261)
    {
      LODWORD(v266) = (*(float (**)(std::string::size_type, uint64_t))(*(void *)__str.__r_.__value_.__l.__data_
                                                                               + 32))(__str.__r_.__value_.__r.__words[0], v251);
      LODWORD(__p) = 2139095040;
      if (*(float *)&v266 != INFINITY)
      {
LABEL_276:
        ++LODWORD(v265[3]);
        uint64_t v163 = (*(uint64_t (**)(std::string::size_type, uint64_t, void))(*(void *)__str.__r_.__value_.__l.__data_
                                                                                  + 64))(__str.__r_.__value_.__r.__words[0], 4, 0);
        goto LABEL_278;
      }
    }
    *(void *)(*((void *)&v263 + 1) + ((v46 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v46);
    float v73 = *(float *)(v262 + 4 * v46);
    *(_DWORD *)(v262 + 4 * v46) = 2139095040;
    unint64_t v270 = 0;
    (*(void (**)(std::string::size_type, uint64_t, char **))(*(void *)__str.__r_.__value_.__l.__data_ + 136))(__str.__r_.__value_.__r.__words[0], v251, &v266);
    while (1)
    {
      if (v266)
      {
        if ((*(uint64_t (**)(char *))(*(void *)v266 + 24))(v266)) {
          goto LABEL_217;
        }
        if (v266)
        {
          uint64_t v74 = (*(uint64_t (**)(char *))(*(void *)v266 + 32))(v266);
          goto LABEL_115;
        }
        unint64_t v75 = v270;
      }
      else
      {
        unint64_t v75 = v270;
        if (v270 >= v268)
        {
LABEL_217:
          char v130 = 1;
          goto LABEL_219;
        }
      }
      uint64_t v74 = v267 + 16 * v75;
LABEL_115:
      int v76 = (void **)__str.__r_.__value_.__l.__size_;
      uint64_t v77 = (void **)(__str.__r_.__value_.__l.__size_ + 8);
      uint64_t v78 = *(_DWORD **)(__str.__r_.__value_.__l.__size_ + 8);
      uint64_t v79 = *(void *)__str.__r_.__value_.__l.__size_;
      unint64_t v80 = ((uint64_t)v78 - *(void *)__str.__r_.__value_.__l.__size_) >> 2;
      if (v80 <= *(int *)(v74 + 12))
      {
        do
        {
          unint64_t v82 = (unint64_t)v76[2];
          if ((unint64_t)v78 >= v82)
          {
            if ((v80 + 1) >> 62) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v84 = v82 - v79;
            uint64_t v85 = v84 >> 1;
            if (v84 >> 1 <= v80 + 1) {
              uint64_t v85 = v80 + 1;
            }
            if ((unint64_t)v84 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v86 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v86 = v85;
            }
            if (v86) {
              unint64_t v86 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::TropicalWeightTpl<float>>>(v86);
            }
            else {
              uint64_t v87 = 0;
            }
            uint64_t v88 = (_DWORD *)(v86 + 4 * v80);
            *uint64_t v88 = 2139095040;
            long long v83 = v88 + 1;
            uint64_t v89 = (char *)*v77;
            uint64_t v90 = (char *)*v76;
            if (*v77 != *v76)
            {
              do
              {
                int v91 = *((_DWORD *)v89 - 1);
                v89 -= 4;
                *--uint64_t v88 = v91;
              }
              while (v89 != v90);
              uint64_t v89 = (char *)*v76;
            }
            *int v76 = v88;
            *uint64_t v77 = v83;
            v76[2] = (void *)(v86 + 4 * v87);
            if (v89) {
              operator delete(v89);
            }
          }
          else
          {
            *uint64_t v78 = 2139095040;
            long long v83 = v78 + 1;
          }
          *uint64_t v77 = v83;
          uint64_t v92 = *((void *)&v262 + 1);
          if (*((void *)&v262 + 1) >= (unint64_t)v263)
          {
            uint64_t v94 = (uint64_t)(*((void *)&v262 + 1) - v262) >> 2;
            if ((unint64_t)(v94 + 1) >> 62) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v95 = (uint64_t)(v263 - v262) >> 1;
            if (v95 <= v94 + 1) {
              unint64_t v95 = v94 + 1;
            }
            if ((void)v263 - (void)v262 >= 0x7FFFFFFFFFFFFFFCuLL) {
              unint64_t v96 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v96 = v95;
            }
            if (v96) {
              unint64_t v96 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::TropicalWeightTpl<float>>>(v96);
            }
            else {
              uint64_t v97 = 0;
            }
            v98 = (_DWORD *)(v96 + 4 * v94);
            _DWORD *v98 = 2139095040;
            int v93 = v98 + 1;
            uint64_t v99 = (char *)*((void *)&v262 + 1);
            v100 = (char *)v262;
            if (*((void *)&v262 + 1) != (void)v262)
            {
              do
              {
                int v101 = *((_DWORD *)v99 - 1);
                v99 -= 4;
                *--v98 = v101;
              }
              while (v99 != v100);
              uint64_t v99 = (char *)v262;
            }
            *(void *)&long long v262 = v98;
            *((void *)&v262 + 1) = v93;
            *(void *)&long long v263 = v96 + 4 * v97;
            if (v99) {
              operator delete(v99);
            }
          }
          else
          {
            **((_DWORD **)&v262 + 1) = 2139095040;
            int v93 = (_DWORD *)(v92 + 4);
          }
          *((void *)&v262 + 1) = v93;
          LOBYTE(__p) = 0;
          std::vector<BOOL>::push_back((uint64_t)&v263 + 8, &__p);
          int v76 = (void **)__str.__r_.__value_.__l.__size_;
          uint64_t v77 = (void **)(__str.__r_.__value_.__l.__size_ + 8);
          uint64_t v78 = *(_DWORD **)(__str.__r_.__value_.__l.__size_ + 8);
          uint64_t v79 = *(void *)__str.__r_.__value_.__l.__size_;
          unint64_t v80 = ((uint64_t)v78 - *(void *)__str.__r_.__value_.__l.__size_) >> 2;
          unint64_t v81 = *(int *)(v74 + 12);
        }
        while (v80 <= v81);
      }
      else
      {
        LODWORD(v81) = *(_DWORD *)(v74 + 12);
      }
      if (BYTE1(v261))
      {
        uint64_t v102 = (char *)v265[0];
        uint64_t v103 = (char *)v265[1];
        unint64_t v104 = (uint64_t)(v265[1] - v265[0]) >> 2;
        if (v104 <= (int)v81)
        {
          do
          {
            if ((unint64_t)v103 >= v265[2])
            {
              unint64_t v107 = v104 + 1;
              if ((v104 + 1) >> 62) {
                std::vector<int>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v108 = v265[2] - (void)v102;
              if ((uint64_t)(v265[2] - (void)v102) >> 1 > v107) {
                unint64_t v107 = v108 >> 1;
              }
              if ((unint64_t)v108 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v109 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v109 = v107;
              }
              if (v109)
              {
                long long v110 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v265[2], v109);
                uint64_t v102 = (char *)v265[0];
                uint64_t v103 = (char *)v265[1];
              }
              else
              {
                long long v110 = 0;
              }
              uint64_t v111 = &v110[4 * v104];
              *(_DWORD *)uint64_t v111 = -1;
              uint64_t v106 = v111 + 4;
              while (v103 != v102)
              {
                int v112 = *((_DWORD *)v103 - 1);
                v103 -= 4;
                *((_DWORD *)v111 - 1) = v112;
                v111 -= 4;
              }
              v265[0] = v111;
              v265[1] = v106;
              v265[2] = &v110[4 * v109];
              if (v102)
              {
                operator delete(v102);
                uint64_t v102 = (char *)v265[0];
              }
              else
              {
                uint64_t v102 = v111;
              }
            }
            else
            {
              *(_DWORD *)uint64_t v103 = -1;
              uint64_t v106 = v103 + 4;
            }
            v265[1] = v106;
            unint64_t v104 = (v106 - v102) >> 2;
            LODWORD(v81) = *(_DWORD *)(v74 + 12);
            uint64_t v103 = v106;
          }
          while (v104 <= (int)v81);
          uint64_t v105 = (int)v81;
          int v76 = (void **)__str.__r_.__value_.__l.__size_;
        }
        else
        {
          uint64_t v105 = (int)v81;
        }
        if (*(_DWORD *)&v102[4 * v105] != LODWORD(v265[3]))
        {
          *((_DWORD *)*v76 + v105) = 2139095040;
          *(_DWORD *)(v262 + 4 * *(int *)(v74 + 12)) = 2139095040;
          unint64_t v81 = *(int *)(v74 + 12);
          *(void *)(*((void *)&v263 + 1) + ((v81 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v81);
          *(_DWORD *)(v265[0] + 4 * v81) = v265[3];
          int v76 = (void **)__str.__r_.__value_.__l.__size_;
          LODWORD(v81) = *(_DWORD *)(v74 + 12);
        }
      }
      uint64_t v113 = (float *)*v76;
      uint64_t v114 = v262;
      float v115 = NAN;
      if (v73 != -INFINITY)
      {
        float v116 = *(float *)(v74 + 8);
        float v115 = NAN;
        if (v116 != -INFINITY)
        {
          float v115 = INFINITY;
          BOOL v117 = v116 == INFINITY || v73 == INFINITY;
          float v118 = v73 + v116;
          if (!v117) {
            float v115 = v118;
          }
        }
      }
      float v119 = v113[(int)v81];
      if (v119 >= v115) {
        float v120 = v115;
      }
      else {
        float v120 = v113[(int)v81];
      }
      if (v115 == -INFINITY || v119 == -INFINITY) {
        float v120 = NAN;
      }
      if (v120 > (float)(v119 + *((float *)&v260 + 1)) || v119 > (float)(*((float *)&v260 + 1) + v120)) {
        break;
      }
LABEL_214:
      if (v266) {
        (*(void (**)(char *))(*(void *)v266 + 40))(v266);
      }
      else {
        ++v270;
      }
    }
    v113[(int)v81] = v120;
    float v124 = *(float *)(v114 + 4 * (int)v81);
    if (v124 >= v115) {
      float v125 = v115;
    }
    else {
      float v125 = *(float *)(v114 + 4 * (int)v81);
    }
    BOOL v127 = v115 == -INFINITY || v124 == -INFINITY;
    float v128 = NAN;
    if (!v127) {
      float v128 = v125;
    }
    *(float *)(v114 + 4 * (int)v81) = v128;
    if (v113[(int)v81] != -INFINITY && (v128 < -INFINITY || v128 > -INFINITY))
    {
      uint64_t v129 = **(void **)(__str.__r_.__value_.__r.__words[2] + 16);
      if ((*(void *)(*((void *)&v263 + 1) + (((unint64_t)*(int *)(v74 + 12) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> *(_DWORD *)(v74 + 12)))
      {
        (*(void (**)(void))(v129 + 40))();
      }
      else
      {
        (*(void (**)(void))(v129 + 24))();
        *(void *)(*((void *)&v263 + 1) + (((unint64_t)*(int *)(v74 + 12) >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << *(_DWORD *)(v74 + 12);
      }
      goto LABEL_214;
    }
    char v130 = 0;
    BYTE4(v265[3]) = 1;
LABEL_219:
    if (v266)
    {
      (*(void (**)(char *))(*(void *)v266 + 8))(v266);
    }
    else if (v269)
    {
      --*v269;
    }
  }
  while ((v130 & 1) != 0);
LABEL_280:
  if (BYTE4(v265[3]))
  {
    a3[1] = *a3;
    LODWORD(v266) = 2143289344;
    std::vector<fst::TropicalWeightTpl<float>>::resize(a3, &v266);
  }
  fst::ShortestDistanceState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::AutoQueue<int>,fst::EpsilonArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~ShortestDistanceState(&__str);
  float v164 = *a3;
  if ((char *)a3[1] - (char *)*a3 != 4 || *v164 < -INFINITY || *v164 > -INFINITY) {
LABEL_285:
  }
    fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::VectorFst();
  v183 = *(void (**)(void))(*(void *)a2 + 184);
  v183();
}

void sub_20D40F280(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)(v35 - 105));
  if (a33 < 0) {
    operator delete(__p);
  }
  fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~DeterminizeFstImplBase(v34);
  MEMORY[0x2105595E0](v34, 0x10F3C405CF36722);
  fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::~ImplToFst(&a17);
  if (a22)
  {
    a23 = (uint64_t)a22;
    operator delete(a22);
  }
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::~ImplToFst(&a20);
  _Unwind_Resume(a1);
}

void fst::NShortestPath<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4, int a5, int a6, float a7, float a8)
{
  if ((a6 & 1) != 0
    && (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 64))(a1, 0x400000000, 1))
  {
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(&__p, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
    }
    uint64_t v16 = fst::LogMessage::LogMessage((fst *)&v202, (uint64_t)&__p);
    uint64_t v17 = (void *)fst::cerr(v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"NShortestPath: FST has a cycle and include_final_ties was set to true. This is not currently supported.", 103);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v202);
    if (SHIBYTE(v190) < 0) {
      operator delete(__p);
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 184))(a2, 4, 4);
    return;
  }
  (*(void (**)(uint64_t))(*(void *)a2 + 216))(a2);
  uint64_t v18 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 272))(a2, v18);
  uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 280))(a2, v19);
  unint64_t v202 = 0;
  uint64_t v203 = 0;
  unint64_t v204 = 0;
  BOOL v199 = 0;
  float v200 = 0;
  float v201 = 0;
  float v196 = 0;
  float v197 = 0;
  float v198 = 0;
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 24))(a1) != -1)
  {
    uint64_t v21 = *a3;
    uint64_t v20 = a3[1];
    if ((*(int (**)(uint64_t))(*(void *)a1 + 24))(a1) < (unint64_t)((v20 - v21) >> 2))
    {
      int v22 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
      uint64_t v23 = *a3;
      LODWORD(__p) = 0;
      LODWORD(__p) = *(_DWORD *)(v23 + 4 * v22);
      v187.n128_u32[0] = 2139095040;
      if (*(float *)&__p != INFINITY && !fst::NaturalLess<fst::TropicalWeightTpl<float>>::operator()(a8, 0.0) && a5)
      {
        uint64_t v24 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 192))(a2);
        (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 168))(a2, v24);
        uint64_t v25 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 192))(a2);
        (*(void (**)(uint64_t, uint64_t, double))(*(void *)a2 + 176))(a2, v25, 0.0);
        unint64_t v169 = a4;
        int v173 = a5;
        int v170 = a6;
        uint64_t v171 = a1;
        unint64_t v26 = v202;
        uint64_t v27 = v203;
        for (unint64_t i = v203 - v202; i <= (int)v25; unint64_t i = v27 - v26)
        {
          if ((unint64_t)v27 >= v204)
          {
            unint64_t v29 = i + 1;
            if ((i + 1) >> 61) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v30 = v204 - (void)v26;
            if ((uint64_t)(v204 - (void)v26) >> 2 > v29) {
              unint64_t v29 = v30 >> 2;
            }
            if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v31 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v31 = v29;
            }
            if (v31) {
              unint64_t v31 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<RateMarker>>(v31);
            }
            else {
              uint64_t v32 = 0;
            }
            unint64_t v26 = (uint64_t *)(v31 + 8 * i);
            *unint64_t v26 = 0x7F800000FFFFFFFFLL;
            uint64_t v27 = v26 + 1;
            int v34 = v202;
            uint64_t v33 = v203;
            if (v203 != v202)
            {
              do
              {
                uint64_t v35 = *--v33;
                *--unint64_t v26 = v35;
              }
              while (v33 != v34);
              uint64_t v33 = v202;
            }
            unint64_t v202 = v26;
            unint64_t v204 = v31 + 8 * v32;
            if (v33) {
              operator delete(v33);
            }
          }
          else
          {
            *v27++ = 0x7F800000FFFFFFFFLL;
            unint64_t v26 = v202;
          }
          uint64_t v203 = v27;
        }
        v202[(int)v25] = (*(unsigned int (**)(uint64_t))(*(void *)a1 + 24))(a1);
        BOOL v36 = v200;
        if (v200 >= v201)
        {
          unint64_t v39 = v199;
          uint64_t v40 = (v200 - v199) >> 2;
          unint64_t v41 = v40 + 1;
          int v38 = v173;
          if ((unint64_t)(v40 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v42 = v201 - v199;
          if ((v201 - v199) >> 1 > v41) {
            unint64_t v41 = v42 >> 1;
          }
          if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v43 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v43 = v41;
          }
          if (v43)
          {
            int v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v201, v43);
            int v45 = v25;
            unint64_t v39 = v199;
            BOOL v36 = v200;
          }
          else
          {
            int v45 = v25;
            int v44 = 0;
          }
          unint64_t v46 = &v44[4 * v40];
          uint64_t v47 = &v44[4 * v43];
          *(_DWORD *)unint64_t v46 = v45;
          unint64_t v37 = v46 + 4;
          while (v36 != v39)
          {
            int v48 = *((_DWORD *)v36 - 1);
            v36 -= 4;
            *((_DWORD *)v46 - 1) = v48;
            v46 -= 4;
          }
          BOOL v199 = v46;
          float v200 = v37;
          float v201 = v47;
          if (v39) {
            operator delete(v39);
          }
        }
        else
        {
          *(_DWORD *)float v200 = v25;
          unint64_t v37 = v36 + 4;
          int v38 = v173;
        }
        float v200 = v37;
        float v49 = *(float *)(*a3 + 4 * (*(int (**)(uint64_t))(*(void *)a1 + 24))(a1));
        float v50 = NAN;
        if (v49 != -INFINITY && a8 != -INFINITY)
        {
          BOOL v51 = a8 == INFINITY || v49 == INFINITY;
          float v52 = v49 + a8;
          if (v51) {
            float v50 = INFINITY;
          }
          else {
            float v50 = v52;
          }
        }
        uint64_t v54 = (int *)v199;
        unint64_t v53 = v200;
        if (v199 == v200) {
LABEL_261:
        }
          fst::Connect<fst::ArcTpl<fst::TropicalWeightTpl<float>>>(a2);
        uint64_t v55 = 0;
        unint64_t v167 = 0;
        uint64_t v56 = 0;
        BOOL v168 = 0;
        uint64_t v172 = a2;
        while (1)
        {
          v193[0] = (uint64_t *)&v202;
          v193[1] = a3;
          int v194 = -1;
          float v195 = a7;
          unint64_t v57 = v53 - (char *)v54;
          std::string::size_type v179 = v56;
          if (v53 - (char *)v54 >= 5)
          {
            uint64_t v177 = v53;
            uint64_t v58 = 0;
            uint64_t v59 = v57 >> 2;
            int v175 = *v54;
            BOOL v116 = __OFSUB__(v57 >> 2, 2);
            uint64_t v60 = (v57 >> 2) - 2;
            if (v60 < 0 != v116) {
              uint64_t v60 = v59 - 1;
            }
            uint64_t v61 = v60 >> 1;
            uint64_t v174 = (uint64_t)v54;
            do
            {
              int v62 = &v54[v58];
              int v65 = v62[1];
              uint64_t v63 = v62 + 1;
              int v64 = v65;
              uint64_t v66 = (2 * v58) | 1;
              uint64_t v67 = 2 * v58 + 2;
              if (v67 < v59)
              {
                int v68 = v63[1];
                int v69 = fst::ShortestPathCompare<int,fst::TropicalWeightTpl<float>>::operator()(v193, v64, v68);
                if (v69)
                {
                  int v64 = v68;
                  ++v63;
                }
                uint64_t v56 = v179;
                if (v69) {
                  uint64_t v66 = v67;
                }
              }
              int *v54 = v64;
              uint64_t v54 = v63;
              uint64_t v58 = v66;
            }
            while (v66 <= v61);
            unint64_t v53 = v177;
            uint64_t v70 = (int *)(v177 - 4);
            if (v177 - 4 == (char *)v63)
            {
              *uint64_t v63 = v175;
            }
            else
            {
              *uint64_t v63 = *v70;
              int *v70 = v175;
              std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,fst::ShortestPathCompare<int,fst::TropicalWeightTpl<float>> &,std::__wrap_iter<int *>>(v174, (uint64_t)(v63 + 1), v193, ((uint64_t)v63 - v174 + 4) >> 2);
              unint64_t v53 = v200;
            }
            a2 = v172;
            int v38 = v173;
          }
          uint64_t v71 = *((int *)v53 - 1);
          int v72 = (float *)&v202[v71];
          float v73 = v72[1];
          unint64_t v74 = *(int *)v72;
          float v75 = v73;
          float v200 = v53 - 4;
          if (v74 == -1)
          {
            float v76 = 0.0;
          }
          else if (v74 >= (a3[1] - *a3) >> 2)
          {
            float v76 = INFINITY;
          }
          else
          {
            float v76 = *(float *)(*a3 + 4 * v74);
            float v77 = NAN;
            if (v76 == -INFINITY) {
              goto LABEL_84;
            }
          }
          float v77 = NAN;
          if (v73 != -INFINITY)
          {
            float v77 = INFINITY;
            BOOL v78 = v76 == INFINITY || v73 == INFINITY;
            float v79 = v76 + v73;
            if (!v78) {
              float v77 = v79;
            }
          }
LABEL_84:
          if (fst::NaturalLess<fst::TropicalWeightTpl<float>>::operator()(v50, v77)
            || v38 != -1 && (*(int (**)(uint64_t))(*(void *)a2 + 152))(a2) >= v38)
          {
            goto LABEL_260;
          }
          unint64_t v80 = v74 + 1;
          unint64_t v81 = v196;
          unint64_t v82 = v197;
          unint64_t v83 = (v197 - v196) >> 2;
          while (v83 <= v80)
          {
            if (v82 >= v198)
            {
              unint64_t v85 = v83 + 1;
              if ((v83 + 1) >> 62) {
                std::vector<int>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v86 = v198 - v81;
              if ((v198 - v81) >> 1 > v85) {
                unint64_t v85 = v86 >> 1;
              }
              if ((unint64_t)v86 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v87 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v87 = v85;
              }
              if (v87)
              {
                uint64_t v88 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v198, v87);
                unint64_t v81 = v196;
                unint64_t v82 = v197;
              }
              else
              {
                uint64_t v88 = 0;
              }
              uint64_t v89 = &v88[4 * v83];
              *(_DWORD *)uint64_t v89 = 0;
              uint64_t v84 = v89 + 4;
              while (v82 != v81)
              {
                int v90 = *((_DWORD *)v82 - 1);
                v82 -= 4;
                *((_DWORD *)v89 - 1) = v90;
                v89 -= 4;
              }
              float v196 = v89;
              float v197 = v84;
              float v198 = &v88[4 * v87];
              if (v81)
              {
                operator delete(v81);
                unint64_t v81 = v196;
              }
              else
              {
                unint64_t v81 = v89;
              }
            }
            else
            {
              *(_DWORD *)unint64_t v82 = 0;
              uint64_t v84 = v82 + 4;
            }
            float v197 = v84;
            unint64_t v83 = (v84 - v81) >> 2;
            unint64_t v82 = v84;
          }
          if (v170)
          {
            unint64_t v91 = v55 - v179;
            if (v91 <= v80)
            {
              unint64_t v92 = v167;
              do
              {
                if ((unint64_t)v55 >= v92)
                {
                  unint64_t v94 = v92;
                  unint64_t v95 = v91 + 1;
                  if ((v91 + 1) >> 62) {
                    std::vector<int>::__throw_length_error[abi:ne180100]();
                  }
                  unint64_t v96 = v92 - (void)v179;
                  unint64_t v97 = (uint64_t)(v94 - (void)v179) >> 1;
                  if (v97 > v95) {
                    unint64_t v95 = v97;
                  }
                  if (v96 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v98 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v98 = v95;
                  }
                  if (v98) {
                    unint64_t v98 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::TropicalWeightTpl<float>>>(v98);
                  }
                  else {
                    uint64_t v99 = 0;
                  }
                  v100 = (_DWORD *)(v98 + 4 * v91);
                  _DWORD *v100 = 2139095040;
                  int v101 = v100 + 1;
                  if (v55 != v179)
                  {
                    do
                    {
                      int v102 = *--v55;
                      *--v100 = v102;
                    }
                    while (v55 != v179);
                    uint64_t v55 = v179;
                  }
                  int v93 = v100;
                  unint64_t v92 = v98 + 4 * v99;
                  if (v55)
                  {
                    unint64_t v103 = v98 + 4 * v99;
                    operator delete(v55);
                    unint64_t v92 = v103;
                  }
                  uint64_t v55 = v101;
                }
                else
                {
                  *v55++ = 2139095040;
                  int v93 = v179;
                }
                std::string::size_type v179 = v93;
                unint64_t v91 = v55 - v93;
              }
              while (v91 <= v80);
              unint64_t v167 = v92;
              ++*(_DWORD *)&v196[4 * v80];
            }
            else
            {
              ++*(_DWORD *)&v81[4 * v80];
            }
            uint64_t v56 = v179;
            if (v74 != -1)
            {
              unint64_t v104 = *(int *)&v196[4 * v80];
              if (v104 == v169)
              {
                *(float *)&v179[v80] = v73;
              }
              else if (v104 > v169)
              {
                float v107 = *(float *)&v179[v80];
                if (v107 > (float)(v73 + 0.00097656) || (float)(v107 + 0.00097656) < v73) {
                  goto LABEL_260;
                }
              }
LABEL_153:
              unint64_t v192 = 0;
              unsigned int v180 = v56;
              (*(void (**)(uint64_t, unint64_t, void **))(*(void *)v171 + 136))(v171, v74, &__p);
              while (2)
              {
                if (__p)
                {
                  if ((*(unsigned int (**)(void *))(*(void *)__p + 24))(__p))
                  {
                    if (__p)
                    {
                      (*(void (**)(void))(*(void *)__p + 8))();
                    }
                    else
                    {
LABEL_213:
                      if (v191) {
                        --*v191;
                      }
                    }
                    float v139 = (*(float (**)(uint64_t, unint64_t))(*(void *)v171 + 32))(v171, v74);
                    *(float *)&std::string __p = v139;
                    v187.n128_u32[0] = 2139095040;
                    if (v139 != INFINITY)
                    {
                      uint64_t v140 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 192))(a2);
                      v141.n128_u32[0] = 2139095040;
                      if (v75 != INFINITY) {
                        v141.n128_f32[0] = v139 + v75;
                      }
                      if (v139 == -INFINITY || v75 == -INFINITY) {
                        float v144 = NAN;
                      }
                      else {
                        float v144 = v141.n128_f32[0];
                      }
                      uint64_t v145 = v203;
                      if ((unint64_t)v203 >= v204)
                      {
                        uint64_t v147 = v203 - v202;
                        unint64_t v148 = v147 + 1;
                        if ((unint64_t)(v147 + 1) >> 61) {
                          std::vector<int>::__throw_length_error[abi:ne180100]();
                        }
                        uint64_t v149 = v204 - (void)v202;
                        if ((uint64_t)(v204 - (void)v202) >> 2 > v148) {
                          unint64_t v148 = v149 >> 2;
                        }
                        if ((unint64_t)v149 >= 0x7FFFFFFFFFFFFFF8) {
                          unint64_t v150 = 0x1FFFFFFFFFFFFFFFLL;
                        }
                        else {
                          unint64_t v150 = v148;
                        }
                        if (v150) {
                          unint64_t v150 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<RateMarker>>(v150);
                        }
                        else {
                          uint64_t v151 = 0;
                        }
                        unint64_t v152 = v150 + 8 * v147;
                        *(_DWORD *)unint64_t v152 = -1;
                        *(float *)(v152 + 4) = v144;
                        uint64_t v154 = v202;
                        unint64_t v153 = v203;
                        unint64_t v155 = (uint64_t *)v152;
                        if (v203 != v202)
                        {
                          do
                          {
                            uint64_t v156 = *--v153;
                            *--unint64_t v155 = v156;
                          }
                          while (v153 != v154);
                          unint64_t v153 = v202;
                        }
                        float v146 = (uint64_t *)(v152 + 8);
                        unint64_t v202 = v155;
                        uint64_t v203 = (uint64_t *)(v152 + 8);
                        unint64_t v204 = v150 + 8 * v151;
                        if (v153) {
                          operator delete(v153);
                        }
                      }
                      else
                      {
                        *(_DWORD *)uint64_t v203 = -1;
                        *((float *)v145 + 1) = v144;
                        float v146 = v145 + 1;
                      }
                      uint64_t v203 = v146;
                      std::string __p = 0;
                      unint64_t v189 = __PAIR64__(v71, LODWORD(v139));
                      (*(void (**)(uint64_t, uint64_t, void **, __n128))(*(void *)a2 + 200))(a2, v140, &__p, v141);
                      uint64_t v157 = v200;
                      if (v200 >= v201)
                      {
                        uint64_t v159 = v199;
                        uint64_t v160 = (v200 - v199) >> 2;
                        unint64_t v161 = v160 + 1;
                        if ((unint64_t)(v160 + 1) >> 62) {
                          std::vector<int>::__throw_length_error[abi:ne180100]();
                        }
                        uint64_t v162 = v201 - v199;
                        if ((v201 - v199) >> 1 > v161) {
                          unint64_t v161 = v162 >> 1;
                        }
                        if ((unint64_t)v162 >= 0x7FFFFFFFFFFFFFFCLL) {
                          unint64_t v163 = 0x3FFFFFFFFFFFFFFFLL;
                        }
                        else {
                          unint64_t v163 = v161;
                        }
                        if (v163)
                        {
                          float v164 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v201, v163);
                          uint64_t v159 = v199;
                          uint64_t v157 = v200;
                        }
                        else
                        {
                          float v164 = 0;
                        }
                        unint64_t v165 = &v164[4 * v160];
                        *(_DWORD *)unint64_t v165 = v140;
                        uint64_t v158 = (uint64_t)(v165 + 4);
                        while (v157 != v159)
                        {
                          int v166 = *((_DWORD *)v157 - 1);
                          v157 -= 4;
                          *((_DWORD *)v165 - 1) = v166;
                          v165 -= 4;
                        }
                        BOOL v199 = v165;
                        float v200 = (char *)v158;
                        float v201 = &v164[4 * v163];
                        if (v159) {
                          operator delete(v159);
                        }
                      }
                      else
                      {
                        *(_DWORD *)float v200 = v140;
                        uint64_t v158 = (uint64_t)(v157 + 4);
                      }
                      float v200 = (char *)v158;
                      v181[0] = (uint64_t *)&v202;
                      v181[1] = a3;
                      int v182 = -1;
                      float v183 = a7;
                      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,fst::ShortestPathCompare<int,fst::TropicalWeightTpl<float>> &,std::__wrap_iter<int *>>((uint64_t)v199, v158, v181, (v158 - (uint64_t)v199) >> 2);
                    }
                    goto LABEL_260;
                  }
                  if (__p)
                  {
                    unint64_t v109 = (__n128 *)(*(uint64_t (**)(void))(*(void *)__p + 32))();
LABEL_162:
                    __n128 v187 = *v109;
                    __n128 v178 = v187;
                    uint64_t v111 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 192))(a2);
                    __n128 v112 = v178;
                    v112.n128_u32[0] = v178.n128_u32[2];
                    BOOL v113 = v178.n128_f32[2] == INFINITY || v75 == INFINITY;
                    float v114 = v178.n128_f32[2] + v75;
                    if (v113) {
                      float v114 = INFINITY;
                    }
                    BOOL v116 = v178.n128_f32[2] == -INFINITY || v75 == -INFINITY;
                    uint64_t v117 = v187.n128_u32[3];
                    if (v116) {
                      uint64_t v118 = 2143289344;
                    }
                    else {
                      uint64_t v118 = LODWORD(v114);
                    }
                    float v119 = v203;
                    if ((unint64_t)v203 >= v204)
                    {
                      uint64_t v121 = v203 - v202;
                      if ((unint64_t)(v121 + 1) >> 61) {
                        std::vector<int>::__throw_length_error[abi:ne180100]();
                      }
                      unint64_t v122 = (uint64_t)(v204 - (void)v202) >> 2;
                      if (v122 <= v121 + 1) {
                        unint64_t v122 = v121 + 1;
                      }
                      if (v204 - (unint64_t)v202 >= 0x7FFFFFFFFFFFFFF8) {
                        unint64_t v123 = 0x1FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v123 = v122;
                      }
                      if (v123) {
                        unint64_t v123 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<RateMarker>>(v123);
                      }
                      else {
                        uint64_t v124 = 0;
                      }
                      float v125 = (uint64_t *)(v123 + 8 * v121);
                      *float v125 = v117 | (v118 << 32);
                      float v120 = v125 + 1;
                      BOOL v127 = v202;
                      uint64_t v126 = v203;
                      if (v203 != v202)
                      {
                        do
                        {
                          uint64_t v128 = *--v126;
                          *--float v125 = v128;
                        }
                        while (v126 != v127);
                        uint64_t v126 = v202;
                      }
                      unint64_t v202 = v125;
                      uint64_t v203 = v120;
                      unint64_t v204 = v123 + 8 * v124;
                      if (v126) {
                        operator delete(v126);
                      }
                    }
                    else
                    {
                      *uint64_t v203 = v187.n128_u32[3] | (unint64_t)(v118 << 32);
                      float v120 = v119 + 1;
                    }
                    uint64_t v203 = v120;
                    v187.n128_u32[3] = v71;
                    uint64_t v56 = v180;
                    (*(void (**)(uint64_t, uint64_t, __n128 *, __n128))(*(void *)a2 + 200))(a2, v111, &v187, v112);
                    uint64_t v129 = v200;
                    if (v200 >= v201)
                    {
                      std::string::size_type v131 = v199;
                      uint64_t v132 = (v200 - v199) >> 2;
                      unint64_t v133 = v132 + 1;
                      if ((unint64_t)(v132 + 1) >> 62) {
                        std::vector<int>::__throw_length_error[abi:ne180100]();
                      }
                      uint64_t v134 = v201 - v199;
                      if ((v201 - v199) >> 1 > v133) {
                        unint64_t v133 = v134 >> 1;
                      }
                      if ((unint64_t)v134 >= 0x7FFFFFFFFFFFFFFCLL) {
                        unint64_t v135 = 0x3FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v135 = v133;
                      }
                      if (v135)
                      {
                        unint64_t v136 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v201, v135);
                        std::string::size_type v131 = v199;
                        uint64_t v129 = v200;
                      }
                      else
                      {
                        unint64_t v136 = 0;
                      }
                      float v137 = &v136[4 * v132];
                      *(_DWORD *)float v137 = v111;
                      uint64_t v130 = (uint64_t)(v137 + 4);
                      while (v129 != v131)
                      {
                        int v138 = *((_DWORD *)v129 - 1);
                        v129 -= 4;
                        *((_DWORD *)v137 - 1) = v138;
                        v137 -= 4;
                      }
                      BOOL v199 = v137;
                      float v200 = (char *)v130;
                      float v201 = &v136[4 * v135];
                      if (v131) {
                        operator delete(v131);
                      }
                    }
                    else
                    {
                      *(_DWORD *)float v200 = v111;
                      uint64_t v130 = (uint64_t)(v129 + 4);
                    }
                    float v200 = (char *)v130;
                    v184[0] = (uint64_t *)&v202;
                    v184[1] = a3;
                    int v185 = -1;
                    float v186 = a7;
                    std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,fst::ShortestPathCompare<int,fst::TropicalWeightTpl<float>> &,std::__wrap_iter<int *>>((uint64_t)v199, v130, v184, (v130 - (uint64_t)v199) >> 2);
                    if (__p) {
                      (*(void (**)(void *))(*(void *)__p + 40))(__p);
                    }
                    else {
                      ++v192;
                    }
                    continue;
                  }
                  unint64_t v110 = v192;
                }
                else
                {
                  unint64_t v110 = v192;
                  if (v192 >= v190) {
                    goto LABEL_213;
                  }
                }
                break;
              }
              unint64_t v109 = (__n128 *)(v189 + 16 * v110);
              goto LABEL_162;
            }
          }
          else
          {
            ++*(_DWORD *)&v81[4 * v80];
            uint64_t v56 = v179;
            if (v74 != -1)
            {
              if (*(int *)&v196[4 * v80] > v169) {
                goto LABEL_260;
              }
              goto LABEL_153;
            }
          }
          if (v168 && ((float)(v8 + 0.00097656) < v73 || v8 > (float)(v73 + 0.00097656))) {
            goto LABEL_261;
          }
          uint64_t v106 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
          std::string __p = 0;
          LODWORD(v189) = 0;
          HIDWORD(v189) = v71;
          (*(void (**)(uint64_t, uint64_t, void **))(*(void *)a2 + 200))(a2, v106, &__p);
          if (v168)
          {
            BOOL v168 = 1;
            goto LABEL_260;
          }
          BOOL v168 = *(int *)&v196[4 * v80] == v169;
          if (*(_DWORD *)&v196[4 * v80] == v169)
          {
            float v8 = v73;
            if ((v170 & 1) == 0) {
              goto LABEL_261;
            }
          }
LABEL_260:
          uint64_t v54 = (int *)v199;
          unint64_t v53 = v200;
          if (v199 == v200) {
            goto LABEL_261;
          }
        }
      }
    }
  }
  if ((*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 4, 0)) {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 184))(a2, 4, 4);
  }
}

void sub_20D41098C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42)
{
  if (__p) {
    operator delete(__p);
  }
  int v44 = *(void **)(v42 - 208);
  if (v44)
  {
    *(void *)(v42 - 200) = v44;
    operator delete(v44);
  }
  int v45 = *(void **)(v42 - 184);
  if (v45)
  {
    *(void *)(v42 - 176) = v45;
    operator delete(v45);
  }
  unint64_t v46 = *(void **)(v42 - 160);
  if (v46)
  {
    *(void *)(v42 - 152) = v46;
    operator delete(v46);
  }
  _Unwind_Resume(exception_object);
}

void *fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::~ImplToFst(void *a1)
{
  *a1 = off_26C208FB0;
  uint64_t v2 = (_DWORD *)a1[1];
  if (v2)
  {
    int v3 = v2[14] - 1;
    v2[14] = v3;
    if (!v3) {
      (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
    }
  }
  return a1;
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::OutputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 48);
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::InputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 40);
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Type(uint64_t a1)
{
  return *(void *)(a1 + 8) + 16;
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Properties(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    uint64_t v8 = 0;
    unint64_t v5 = fst::TestProperties<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>(a1, a2, &v8);
    *(void *)(*(void *)(a1 + 8) + 8) = *(void *)(*(void *)(a1 + 8) + 8) & (~v8 | 4) | v8 & v5;
    return v5 & a2;
  }
  else
  {
    uint64_t v7 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 32);
    return v7();
  }
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::NumOutputEpsilons(uint64_t a1, uint64_t a2)
{
  int v3 = *(uint64_t **)(a1 + 8);
  if ((fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::HasArcs(v3[15], a2) & 1) == 0)(*(void (**)(uint64_t *, uint64_t))(*v3 + 48))(v3, a2); {
  uint64_t v4 = v3[15];
  }
  if (*(_DWORD *)(v4 + 92) == a2) {
    uint64_t v5 = v4 + 96;
  }
  else {
    uint64_t v5 = *(void *)(v4 + 8) + 8 * ((int)a2 + 1);
  }
  return *(void *)(*(void *)v5 + 16);
}

uint64_t fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::HasArcs(uint64_t a1, int a2)
{
  if (*(_DWORD *)(a1 + 92) == a2)
  {
    uint64_t v2 = (uint64_t *)(a1 + 96);
  }
  else
  {
    unint64_t v3 = a2 + 1;
    uint64_t v4 = *(void *)(a1 + 8);
    if (v3 >= (*(void *)(a1 + 16) - v4) >> 3) {
      return 0;
    }
    uint64_t v2 = (uint64_t *)(v4 + 8 * v3);
  }
  uint64_t v5 = *v2;
  if (!v5) {
    return 0;
  }
  int v6 = *(_DWORD *)(v5 + 56);
  if ((v6 & 2) == 0) {
    return 0;
  }
  *(_DWORD *)(v5 + 56) = v6 | 8;
  return 1;
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::NumInputEpsilons(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(uint64_t **)(a1 + 8);
  if ((fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::HasArcs(v3[15], a2) & 1) == 0)(*(void (**)(uint64_t *, uint64_t))(*v3 + 48))(v3, a2); {
  uint64_t v4 = v3[15];
  }
  if (*(_DWORD *)(v4 + 92) == a2) {
    uint64_t v5 = v4 + 96;
  }
  else {
    uint64_t v5 = *(void *)(v4 + 8) + 8 * ((int)a2 + 1);
  }
  return *(void *)(*(void *)v5 + 8);
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::NumArcs(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(uint64_t **)(a1 + 8);
  if ((fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::HasArcs(v3[15], a2) & 1) == 0)(*(void (**)(uint64_t *, uint64_t))(*v3 + 48))(v3, a2); {
  uint64_t v4 = v3[15];
  }
  if (*(_DWORD *)(v4 + 92) == a2) {
    uint64_t v5 = v4 + 96;
  }
  else {
    uint64_t v5 = *(void *)(v4 + 8) + 8 * ((int)a2 + 1);
  }
  return (uint64_t)(*(void *)(*(void *)v5 + 32) - *(void *)(*(void *)v5 + 24)) >> 4;
}

float fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Final(uint64_t a1, uint64_t a2)
{
  int v2 = a2;
  unint64_t v3 = *(uint64_t **)(a1 + 8);
  uint64_t v4 = v3[15];
  int v5 = *(_DWORD *)(v4 + 92);
  if (v5 == a2)
  {
    int v6 = (uint64_t *)(v4 + 96);
  }
  else
  {
    unint64_t v7 = (int)a2 + 1;
    uint64_t v8 = *(void *)(v4 + 8);
    if (v7 >= (*(void *)(v4 + 16) - v8) >> 3)
    {
LABEL_7:
      float v11 = (*(float (**)(void, uint64_t))(*v3 + 64))(*(void *)(a1 + 8), a2);
      MutableState = (float *)fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::GetMutableState(v3[15], v2);
      float *MutableState = v11;
      *((_DWORD *)MutableState + 14) |= 9u;
      uint64_t v4 = v3[15];
      int v5 = *(_DWORD *)(v4 + 92);
      goto LABEL_9;
    }
    int v6 = (uint64_t *)(v8 + 8 * v7);
  }
  uint64_t v9 = *v6;
  if (!v9) {
    goto LABEL_7;
  }
  int v10 = *(_DWORD *)(v9 + 56);
  if ((v10 & 1) == 0) {
    goto LABEL_7;
  }
  *(_DWORD *)(v9 + 56) = v10 | 8;
LABEL_9:
  if (v5 == v2) {
    uint64_t v13 = v4 + 96;
  }
  else {
    uint64_t v13 = *(void *)(v4 + 8) + 8 * v2 + 8;
  }
  return **(float **)v13;
}

uint64_t fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::GetMutableState(uint64_t a1, int a2)
{
  uint64_t MutableState = fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::GetMutableState(a1, a2);
  uint64_t v4 = MutableState;
  if (*(unsigned char *)(a1 + 104))
  {
    int v5 = *(_DWORD *)(MutableState + 56);
    if ((v5 & 4) == 0)
    {
      *(_DWORD *)(MutableState + 56) = v5 | 4;
      unint64_t v6 = *(void *)(MutableState + 32) - *(void *)(MutableState + 24) + *(void *)(a1 + 128) + 64;
      *(void *)(a1 + 128) = v6;
      *(unsigned char *)(a1 + 120) = 1;
      if (v6 > *(void *)(a1 + 112)) {
        fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::GC(a1, MutableState, 0);
      }
    }
  }
  return v4;
}

uint64_t fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::GetMutableState(uint64_t a1, int a2)
{
  int v3 = *(_DWORD *)(a1 + 92);
  if (v3 == a2) {
    return *(void *)(a1 + 96);
  }
  if (*(unsigned char *)(a1 + 88))
  {
    if (v3 == -1)
    {
      *(_DWORD *)(a1 + 92) = a2;
      uint64_t MutableState = fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::GetMutableState(a1, 0);
      uint64_t v4 = MutableState;
      *(void *)(a1 + 96) = MutableState;
      *(_DWORD *)(MutableState + 56) |= 4u;
      uint64_t v9 = *(void *)(MutableState + 40);
      uint64_t v10 = *(void *)(MutableState + 24);
      if ((unint64_t)(v9 - v10) > 0x7FF) {
        return v4;
      }
      unint64_t v11 = *(void *)(MutableState + 32);
      uint64_t v19 = MutableState + 48;
      uint64_t v12 = (char *)operator new(0x800uLL);
      uint64_t v13 = &v12[(v11 - v10) & 0xFFFFFFFFFFFFFFF0];
      if (v11 == v10)
      {
        int64x2_t v15 = vdupq_n_s64(v11);
        uint64_t v14 = &v12[(v11 - v10) & 0xFFFFFFFFFFFFFFF0];
      }
      else
      {
        uint64_t v14 = &v12[(v11 - v10) & 0xFFFFFFFFFFFFFFF0];
        do
        {
          *((_OWORD *)v14 - 1) = *(_OWORD *)(v11 - 16);
          v14 -= 16;
          v11 -= 16;
        }
        while (v11 != v10);
        int64x2_t v15 = *(int64x2_t *)(v4 + 24);
      }
      *(void *)(v4 + ++*(void *)(result + 24) = v14;
      *(void *)(v4 + 32) = v13;
      int64x2_t v17 = v15;
      *(void *)(v4 + 40) = v12 + 2048;
      uint64_t v18 = v9;
      uint64_t v16 = v15.i64[0];
      std::__split_buffer<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> &>::~__split_buffer((uint64_t)&v16);
      return *(void *)(a1 + 96);
    }
    uint64_t v6 = *(void *)(a1 + 96);
    if (!*(_DWORD *)(v6 + 60))
    {
      *(_DWORD *)(a1 + 92) = a2;
      *(_DWORD *)uint64_t v6 = 2139095040;
      *(void *)(v6 + 56) = 0;
      *(void *)(v6 + 8) = 0;
      *(void *)(v6 + 16) = 0;
      *(void *)(v6 + 32) = *(void *)(v6 + 24);
      uint64_t v4 = *(void *)(a1 + 96);
      *(_DWORD *)(v4 + 56) |= 4u;
      return v4;
    }
    *(_DWORD *)(v6 + 56) &= ~4u;
    *(unsigned char *)(a1 + 88) = 0;
  }
  int v7 = a2 + 1;
  return fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::GetMutableState(a1, v7);
}

void fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::GC(uint64_t a1, uint64_t a2, char a3)
{
  if (*(unsigned char *)(a1 + 120))
  {
    if (FLAGS_v >= 2)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
      uint64_t v6 = fst::LogMessage::LogMessage((fst *)v41, (uint64_t)__p);
      int v7 = (void *)fst::cerr(v6);
      uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"GCCacheStore: Enter GC: object = ", 33);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"(", 1);
      uint64_t v9 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"), free recently cached = ", 26);
      uint64_t v10 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)", cache size = ", 15);
      unint64_t v11 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)", cache frac = ", 15);
      uint64_t v12 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)", cache limit = ", 16);
      uint64_t v13 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"\n", 1);
      fst::LogMessage::~LogMessage((fst::LogMessage *)v41);
      if (v46 < 0) {
        operator delete(__p[0]);
      }
    }
    unint64_t v14 = (unint64_t)(float)((float)*(unint64_t *)(a1 + 112) * 0.666);
    uint64_t v15 = *(void *)(a1 + 40);
    *(void *)(a1 + 64) = v15;
    while (v15 != a1 + 32)
    {
      int v16 = *(_DWORD *)(v15 + 16);
      if (v16) {
        int v17 = v16 - 1;
      }
      else {
        int v17 = *(_DWORD *)(a1 + 92);
      }
      uint64_t MutableState = fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::GetMutableState(a1, v17);
      unint64_t v19 = *(void *)(a1 + 128);
      if (v19 > v14 && !*(_DWORD *)(MutableState + 60))
      {
        if (a3)
        {
          if (MutableState != a2)
          {
            int v20 = *(_DWORD *)(MutableState + 56);
LABEL_19:
            if ((v20 & 4) != 0)
            {
              unint64_t v21 = *(void *)(MutableState + 32) - *(void *)(MutableState + 24) + 64;
              FstCheck(v21 <= v19, "(size) <= (cache_size_)", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/tools/openfst/src/include/fst/cache.h");
              *(void *)(a1 + 128) -= v21;
            }
            uint64_t v22 = *(void *)(a1 + 64);
            int v23 = *(_DWORD *)(v22 + 16);
            if (!v23 || v23 - 1 == *(_DWORD *)(a1 + 92))
            {
              *(_DWORD *)(a1 + 92) = -1;
              *(void *)(a1 + 96) = 0;
              int v23 = *(_DWORD *)(v22 + 16);
            }
            fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Destroy(*(void **)(*(void *)(a1 + 8) + 8 * v23), (uint64_t *)(a1 + 72));
            *(void *)(*(void *)(a1 + 8) + 8 * *(int *)(*(void *)(a1 + 64) + 16)) = 0;
            uint64_t v24 = *(uint64_t **)(a1 + 64);
            uint64_t v25 = v24[1];
            *(void *)(a1 + 64) = v25;
            uint64_t v26 = *v24;
            *(void *)(v26 + 8) = v25;
            *(void *)v24[1] = v26;
            uint64_t v27 = *(void *)(a1 + 56);
            --*(void *)(a1 + 48);
            std::__list_imp<int,fst::PoolAllocator<int>>::__delete_node[abi:ne180100]<>(v27, (uint64_t)v24);
            uint64_t v15 = *(void *)(a1 + 64);
            continue;
          }
        }
        else
        {
          int v20 = *(_DWORD *)(MutableState + 56);
          if ((v20 & 8) == 0 && MutableState != a2) {
            goto LABEL_19;
          }
        }
      }
      *(_DWORD *)(MutableState + 56) &= ~8u;
      uint64_t v15 = *(void *)(*(void *)(a1 + 64) + 8);
      *(void *)(a1 + 64) = v15;
    }
    unint64_t v28 = *(void *)(a1 + 128);
    if ((a3 & 1) != 0 || v28 <= v14)
    {
      if (v14)
      {
        if (v28 > v14)
        {
          uint64_t v29 = *(void *)(a1 + 112);
          do
          {
            v29 *= 2;
            BOOL v30 = v28 > 2 * v14;
            v14 *= 2;
          }
          while (v30);
          *(void *)(a1 + 112) = v29;
        }
      }
      else if (v28)
      {
        if (FLAGS_fst_error_fatal) {
          std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
        }
        else {
          std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
        }
        unint64_t v31 = fst::LogMessage::LogMessage((fst *)&v44, (uint64_t)__p);
        uint64_t v32 = (void *)fst::cerr(v31);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"GCCacheStore:GC: Unable to free all cached states", 49);
        fst::LogMessage::~LogMessage((fst::LogMessage *)&v44);
        if (v46 < 0) {
          operator delete(__p[0]);
        }
      }
    }
    else
    {
      fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::GC(a1, a2, 1);
    }
    if (FLAGS_v >= 2)
    {
      std::string::basic_string[abi:ne180100]<0>(v41, "INFO");
      uint64_t v33 = fst::LogMessage::LogMessage((fst *)&v43, (uint64_t)v41);
      int v34 = (void *)fst::cerr(v33);
      uint64_t v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"GCCacheStore: Exit GC: object = ", 32);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"(", 1);
      BOOL v36 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"), free recently cached = ", 26);
      unint64_t v37 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)", cache size = ", 15);
      int v38 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)", cache frac = ", 15);
      unint64_t v39 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)", cache limit = ", 16);
      uint64_t v40 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"\n", 1);
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v43);
      if (v42 < 0) {
        operator delete(v41[0]);
      }
    }
  }
}

void sub_20D41156C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void FstCheck(char a1, const char *a2, const char *a3)
{
  if ((a1 & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    int v5 = fst::LogMessage::LogMessage((fst *)&v15, (uint64_t)__p);
    uint64_t v6 = (void *)fst::cerr(v5);
    int v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Check failed: \"", 15);
    size_t v8 = strlen(a2);
    uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)a2, v8);
    uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"\" file: ", 8);
    size_t v11 = strlen(a3);
    uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)a3, v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" line: ", 7);
    std::ostream::operator<<();
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v15);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_20D4116BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Destroy(void *result, uint64_t *a2)
{
  if (result)
  {
    int v3 = (fst::MemoryPoolCollection **)result;
    uint64_t v4 = (void *)result[3];
    if (v4)
    {
      result[4] = v4;
      fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::deallocate(result + 6, v4, (uint64_t)(result[5] - (void)v4) >> 4);
    }
    fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~PoolAllocator(v3 + 6);
    uint64_t result = (void *)fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::TN<1>>(*a2);
    v3[8] = (fst::MemoryPoolCollection *)result[7];
    result[7] = v3;
  }
  return result;
}

uint64_t std::__list_imp<int,fst::PoolAllocator<int>>::__delete_node[abi:ne180100]<>(uint64_t a1, uint64_t a2)
{
  uint64_t result = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__list_node<int,void *>>::TN<1>>(a1);
  if (a2)
  {
    *(void *)(a2 + ++*(void *)(result + 24) = *(void *)(result + 56);
    *(void *)(result + 56) = a2;
  }
  return result;
}

uint64_t fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__list_node<int,void *>>::TN<1>>(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  int v2 = (uint64_t *)(a1 + 16);
  if ((unint64_t)(*(void *)(a1 + 24) - v1) <= 0xC7)
  {
    uint64_t v4 = 0;
    std::vector<fst::MemoryPoolBase *>::resize((char **)(a1 + 16), 0x19uLL, &v4);
    uint64_t v1 = *v2;
  }
  if (!*(void *)(v1 + 192)) {
    operator new();
  }
  return *(void *)(v1 + 192);
}

void sub_20D4118A8(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v3);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v2);
  __n128 v5 = kaldi::CuMatrixBase<float>::~CuMatrixBase(v1);
  MEMORY[0x2105595E0](v5);
  _Unwind_Resume(a1);
}

void std::vector<fst::MemoryPoolBase *>::resize(char **a1, unint64_t a2, void *a3)
{
  __n128 v5 = *a1;
  uint64_t v6 = a1[1];
  unint64_t v7 = (v6 - *a1) >> 3;
  if (a2 <= v7)
  {
    if (a2 >= v7) {
      return;
    }
    int v20 = &v5[8 * a2];
    goto LABEL_23;
  }
  uint64_t v9 = a1[2];
  if (a2 - v7 <= (v9 - v6) >> 3)
  {
    int v20 = &v6[8 * (a2 - v7)];
    uint64_t v21 = 8 * a2 - 8 * v7;
    do
    {
      *(void *)uint64_t v6 = *a3;
      v6 += 8;
      v21 -= 8;
    }
    while (v21);
LABEL_23:
    a1[1] = v20;
    return;
  }
  if (a2 >> 61) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v10 = v9 - v5;
  uint64_t v11 = v10 >> 2;
  if (v10 >> 2 <= a2) {
    uint64_t v11 = a2;
  }
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v12 = v11;
  }
  if (v12 >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  uint64_t v13 = (char *)operator new(8 * v12);
  char v14 = &v13[8 * v7];
  uint64_t v15 = *a3;
  uint64_t v16 = 8 * a2 - 8 * v7;
  int v17 = v14;
  do
  {
    *(void *)int v17 = v15;
    v17 += 8;
    v16 -= 8;
  }
  while (v16);
  uint64_t v18 = *a1;
  if (v6 != *a1)
  {
    do
    {
      uint64_t v19 = *((void *)v6 - 1);
      v6 -= 8;
      *((void *)v14 - 1) = v19;
      v14 -= 8;
    }
    while (v6 != v18);
    uint64_t v6 = *a1;
  }
  *a1 = v14;
  a1[1] = &v13[8 * a2];
  a1[2] = &v13[8 * v12];
  if (v6)
  {
    operator delete(v6);
  }
}

uint64_t fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<std::__list_node<int,void *>>::TN<1>>::Link>::Size()
{
  return 32;
}

void fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<std::__list_node<int,void *>>::TN<1>>::Link>::~MemoryArena(void *a1)
{
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<std::__list_node<int,void *>>::TN<1>>::Link>::~MemoryArena(a1);
  JUMPOUT(0x2105595E0);
}

double fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<std::__list_node<int,void *>>::TN<1>>::Link>::~MemoryArena(void *a1)
{
  *a1 = off_26C207688;
  uint64_t v2 = a1 + 3;
  for (unint64_t i = (void *)a1[4]; i != v2; unint64_t i = (void *)i[1])
  {
    uint64_t v4 = i[2];
    if (v4) {
      MEMORY[0x2105595C0](v4, 0x1000C8077774924);
    }
  }
  std::__list_imp<char *>::clear(v2);
  *(void *)&double result = kaldi::CuMatrixBase<float>::~CuMatrixBase(a1).n128_u64[0];
  return result;
}

uint64_t fst::MemoryPool<fst::PoolAllocator<std::__list_node<int,void *>>::TN<1>>::Size()
{
  return 24;
}

void fst::MemoryPool<fst::PoolAllocator<std::__list_node<int,void *>>::TN<1>>::~MemoryPool(void *a1)
{
  *a1 = off_26C207060;
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<std::__list_node<int,void *>>::TN<1>>::Link>::~MemoryArena(a1 + 1);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(a1);
  JUMPOUT(0x2105595E0);
}

double fst::MemoryPool<fst::PoolAllocator<std::__list_node<int,void *>>::TN<1>>::~MemoryPool(void *a1)
{
  *a1 = off_26C207060;
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<std::__list_node<int,void *>>::TN<1>>::Link>::~MemoryArena(a1 + 1);
  *(void *)&double result = kaldi::CuMatrixBase<float>::~CuMatrixBase(a1).n128_u64[0];
  return result;
}

fst::MemoryPoolCollection **fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~PoolAllocator(fst::MemoryPoolCollection **a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *((void *)v2 + 1) - 1;
  *((void *)v2 + 1) = v3;
  if (!v3)
  {
    fst::MemoryPoolCollection::~MemoryPoolCollection(v2);
    MEMORY[0x2105595E0]();
  }
  return a1;
}

uint64_t fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::TN<1>>(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = (uint64_t *)(a1 + 16);
  if ((unint64_t)(*(void *)(a1 + 24) - v1) <= 0x207)
  {
    uint64_t v4 = 0;
    std::vector<fst::MemoryPoolBase *>::resize((char **)(a1 + 16), 0x41uLL, &v4);
    uint64_t v1 = *v2;
  }
  if (!*(void *)(v1 + 512)) {
    operator new();
  }
  return *(void *)(v1 + 512);
}

void sub_20D411D3C(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v3);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v2);
  __n128 v5 = kaldi::CuMatrixBase<float>::~CuMatrixBase(v1);
  MEMORY[0x2105595E0](v5);
  _Unwind_Resume(a1);
}

uint64_t fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::TN<1>>::Link>::Size()
{
  return 72;
}

void fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::TN<1>>::Link>::~MemoryArena(void *a1)
{
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::TN<1>>::Link>::~MemoryArena(a1);
  JUMPOUT(0x2105595E0);
}

double fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::TN<1>>::Link>::~MemoryArena(void *a1)
{
  *a1 = off_26C2072A0;
  uint64_t v2 = a1 + 3;
  for (unint64_t i = (void *)a1[4]; i != v2; unint64_t i = (void *)i[1])
  {
    uint64_t v4 = i[2];
    if (v4) {
      MEMORY[0x2105595C0](v4, 0x1000C8077774924);
    }
  }
  std::__list_imp<char *>::clear(v2);
  *(void *)&double result = kaldi::CuMatrixBase<float>::~CuMatrixBase(a1).n128_u64[0];
  return result;
}

uint64_t fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::TN<1>>::Size()
{
  return 64;
}

void fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::TN<1>>::~MemoryPool(void *a1)
{
  *a1 = off_26C206C78;
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::TN<1>>::Link>::~MemoryArena(a1 + 1);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(a1);
  JUMPOUT(0x2105595E0);
}

double fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::TN<1>>::~MemoryPool(void *a1)
{
  *a1 = off_26C206C78;
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::TN<1>>::Link>::~MemoryArena(a1 + 1);
  *(void *)&double result = kaldi::CuMatrixBase<float>::~CuMatrixBase(a1).n128_u64[0];
  return result;
}

void fst::MemoryPoolCollection::~MemoryPoolCollection(fst::MemoryPoolCollection *this)
{
  uint64_t v4 = (char *)this + 16;
  uint64_t v2 = (void *)*((void *)this + 2);
  uint64_t v3 = (void *)*((void *)v4 + 1);
  if (v3 == v2)
  {
    uint64_t v2 = v3;
    if (!v3) {
      return;
    }
    goto LABEL_7;
  }
  unint64_t v5 = 0;
  do
  {
    uint64_t v6 = v2[v5];
    if (v6)
    {
      (*(void (**)(void))(*(void *)v6 + 8))(v2[v5]);
      uint64_t v2 = (void *)*((void *)this + 2);
      uint64_t v3 = (void *)*((void *)this + 3);
    }
    ++v5;
  }
  while (v5 < v3 - v2);
  if (v2)
  {
LABEL_7:
    *((void *)this + 3) = v2;
    operator delete(v2);
  }
}

void fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::deallocate(uint64_t *a1, void *__p, unint64_t a3)
{
  if (a3 == 2)
  {
    uint64_t v4 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<2>>(*a1);
    __p[4] = *(void *)(v4 + 56);
    goto LABEL_15;
  }
  if (a3 == 1)
  {
    uint64_t v4 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<1>>(*a1);
    __p[2] = *(void *)(v4 + 56);
LABEL_15:
    *(void *)(v4 + 56) = __p;
    return;
  }
  if (a3 <= 4)
  {
    uint64_t v4 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<4>>(*a1);
    __p[8] = *(void *)(v4 + 56);
    goto LABEL_15;
  }
  if (a3 <= 8)
  {
    uint64_t v4 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<8>>(*a1);
    __p[16] = *(void *)(v4 + 56);
    goto LABEL_15;
  }
  if (a3 <= 0x10)
  {
    uint64_t v4 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<16>>(*a1);
    __p[32] = *(void *)(v4 + 56);
    goto LABEL_15;
  }
  if (a3 <= 0x20)
  {
    uint64_t v4 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<32>>(*a1);
    __p[64] = *(void *)(v4 + 56);
    goto LABEL_15;
  }
  if (a3 <= 0x40)
  {
    uint64_t v4 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<64>>(*a1);
    __p[128] = *(void *)(v4 + 56);
    goto LABEL_15;
  }
  operator delete(__p);
}

uint64_t fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<1>>(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = (uint64_t *)(a1 + 16);
  if ((unint64_t)(*(void *)(a1 + 24) - v1) <= 0x87)
  {
    uint64_t v4 = 0;
    std::vector<fst::MemoryPoolBase *>::resize((char **)(a1 + 16), 0x11uLL, &v4);
    uint64_t v1 = *v2;
  }
  if (!*(void *)(v1 + 128)) {
    operator new();
  }
  return *(void *)(v1 + 128);
}

void sub_20D4121C8(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v3);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v2);
  __n128 v5 = kaldi::CuMatrixBase<float>::~CuMatrixBase(v1);
  MEMORY[0x2105595E0](v5);
  _Unwind_Resume(a1);
}

uint64_t fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<2>>(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = (uint64_t *)(a1 + 16);
  if ((unint64_t)(*(void *)(a1 + 24) - v1) <= 0x107)
  {
    uint64_t v4 = 0;
    std::vector<fst::MemoryPoolBase *>::resize((char **)(a1 + 16), 0x21uLL, &v4);
    uint64_t v1 = *v2;
  }
  if (!*(void *)(v1 + 256)) {
    operator new();
  }
  return *(void *)(v1 + 256);
}

void sub_20D412324(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v3);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v2);
  __n128 v5 = kaldi::CuMatrixBase<float>::~CuMatrixBase(v1);
  MEMORY[0x2105595E0](v5);
  _Unwind_Resume(a1);
}

uint64_t fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<4>>(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = (uint64_t *)(a1 + 16);
  if ((unint64_t)(*(void *)(a1 + 24) - v1) <= 0x207)
  {
    uint64_t v4 = 0;
    std::vector<fst::MemoryPoolBase *>::resize((char **)(a1 + 16), 0x41uLL, &v4);
    uint64_t v1 = *v2;
  }
  if (!*(void *)(v1 + 512)) {
    operator new();
  }
  return *(void *)(v1 + 512);
}

void sub_20D412480(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v3);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v2);
  __n128 v5 = kaldi::CuMatrixBase<float>::~CuMatrixBase(v1);
  MEMORY[0x2105595E0](v5);
  _Unwind_Resume(a1);
}

uint64_t fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<8>>(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = (uint64_t *)(a1 + 16);
  if ((unint64_t)(*(void *)(a1 + 24) - v1) <= 0x407)
  {
    uint64_t v4 = 0;
    std::vector<fst::MemoryPoolBase *>::resize((char **)(a1 + 16), 0x81uLL, &v4);
    uint64_t v1 = *v2;
  }
  if (!*(void *)(v1 + 1024)) {
    operator new();
  }
  return *(void *)(v1 + 1024);
}

void sub_20D4125DC(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v3);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v2);
  __n128 v5 = kaldi::CuMatrixBase<float>::~CuMatrixBase(v1);
  MEMORY[0x2105595E0](v5);
  _Unwind_Resume(a1);
}

uint64_t fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<16>>(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = (uint64_t *)(a1 + 16);
  if ((unint64_t)(*(void *)(a1 + 24) - v1) <= 0x807)
  {
    uint64_t v4 = 0;
    std::vector<fst::MemoryPoolBase *>::resize((char **)(a1 + 16), 0x101uLL, &v4);
    uint64_t v1 = *v2;
  }
  if (!*(void *)(v1 + 2048)) {
    operator new();
  }
  return *(void *)(v1 + 2048);
}

void sub_20D412738(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v3);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v2);
  __n128 v5 = kaldi::CuMatrixBase<float>::~CuMatrixBase(v1);
  MEMORY[0x2105595E0](v5);
  _Unwind_Resume(a1);
}

uint64_t fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<32>>(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = (uint64_t *)(a1 + 16);
  if ((unint64_t)(*(void *)(a1 + 24) - v1) >> 3 <= 0x200)
  {
    uint64_t v4 = 0;
    std::vector<fst::MemoryPoolBase *>::resize((char **)(a1 + 16), 0x201uLL, &v4);
    uint64_t v1 = *v2;
  }
  if (!*(void *)(v1 + 4096)) {
    operator new();
  }
  return *(void *)(v1 + 4096);
}

void sub_20D412898(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v3);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v2);
  __n128 v5 = kaldi::CuMatrixBase<float>::~CuMatrixBase(v1);
  MEMORY[0x2105595E0](v5);
  _Unwind_Resume(a1);
}

uint64_t fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<64>>(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = (uint64_t *)(a1 + 16);
  if ((unint64_t)(*(void *)(a1 + 24) - v1) >> 3 <= 0x400)
  {
    uint64_t v4 = 0;
    std::vector<fst::MemoryPoolBase *>::resize((char **)(a1 + 16), 0x401uLL, &v4);
    uint64_t v1 = *v2;
  }
  if (!*(void *)(v1 + 0x2000)) {
    operator new();
  }
  return *(void *)(v1 + 0x2000);
}

void sub_20D4129F8(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v3);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v2);
  __n128 v5 = kaldi::CuMatrixBase<float>::~CuMatrixBase(v1);
  MEMORY[0x2105595E0](v5);
  _Unwind_Resume(a1);
}

uint64_t fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<64>>::Link>::Size()
{
  return 1032;
}

void fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<64>>::Link>::~MemoryArena(void *a1)
{
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<64>>::Link>::~MemoryArena(a1);
  JUMPOUT(0x2105595E0);
}

double fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<64>>::Link>::~MemoryArena(void *a1)
{
  *a1 = off_26C2073E0;
  uint64_t v2 = a1 + 3;
  for (unint64_t i = (void *)a1[4]; i != v2; unint64_t i = (void *)i[1])
  {
    uint64_t v4 = i[2];
    if (v4) {
      MEMORY[0x2105595C0](v4, 0x1000C8077774924);
    }
  }
  std::__list_imp<char *>::clear(v2);
  *(void *)&double result = kaldi::CuMatrixBase<float>::~CuMatrixBase(a1).n128_u64[0];
  return result;
}

uint64_t fst::MemoryPool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<64>>::Size()
{
  return 1024;
}

void fst::MemoryPool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<64>>::~MemoryPool(void *a1)
{
  *a1 = off_26C206DB8;
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<64>>::Link>::~MemoryArena(a1 + 1);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(a1);
  JUMPOUT(0x2105595E0);
}

double fst::MemoryPool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<64>>::~MemoryPool(void *a1)
{
  *a1 = off_26C206DB8;
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<64>>::Link>::~MemoryArena(a1 + 1);
  *(void *)&double result = kaldi::CuMatrixBase<float>::~CuMatrixBase(a1).n128_u64[0];
  return result;
}

uint64_t fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<32>>::Link>::Size()
{
  return 520;
}

void fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<32>>::Link>::~MemoryArena(void *a1)
{
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<32>>::Link>::~MemoryArena(a1);
  JUMPOUT(0x2105595E0);
}

double fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<32>>::Link>::~MemoryArena(void *a1)
{
  *a1 = off_26C207390;
  uint64_t v2 = a1 + 3;
  for (unint64_t i = (void *)a1[4]; i != v2; unint64_t i = (void *)i[1])
  {
    uint64_t v4 = i[2];
    if (v4) {
      MEMORY[0x2105595C0](v4, 0x1000C8077774924);
    }
  }
  std::__list_imp<char *>::clear(v2);
  *(void *)&double result = kaldi::CuMatrixBase<float>::~CuMatrixBase(a1).n128_u64[0];
  return result;
}

uint64_t fst::MemoryPool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<32>>::Size()
{
  return 512;
}

void fst::MemoryPool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<32>>::~MemoryPool(void *a1)
{
  *a1 = off_26C206D68;
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<32>>::Link>::~MemoryArena(a1 + 1);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(a1);
  JUMPOUT(0x2105595E0);
}

double fst::MemoryPool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<32>>::~MemoryPool(void *a1)
{
  *a1 = off_26C206D68;
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<32>>::Link>::~MemoryArena(a1 + 1);
  *(void *)&double result = kaldi::CuMatrixBase<float>::~CuMatrixBase(a1).n128_u64[0];
  return result;
}

uint64_t fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<16>>::Link>::Size()
{
  return 264;
}

void fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<16>>::Link>::~MemoryArena(void *a1)
{
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<16>>::Link>::~MemoryArena(a1);
  JUMPOUT(0x2105595E0);
}

double fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<16>>::Link>::~MemoryArena(void *a1)
{
  *a1 = off_26C207318;
  uint64_t v2 = a1 + 3;
  for (unint64_t i = (void *)a1[4]; i != v2; unint64_t i = (void *)i[1])
  {
    uint64_t v4 = i[2];
    if (v4) {
      MEMORY[0x2105595C0](v4, 0x1000C8077774924);
    }
  }
  std::__list_imp<char *>::clear(v2);
  *(void *)&double result = kaldi::CuMatrixBase<float>::~CuMatrixBase(a1).n128_u64[0];
  return result;
}

uint64_t fst::MemoryPool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<16>>::Size()
{
  return 256;
}

void fst::MemoryPool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<16>>::~MemoryPool(void *a1)
{
  *a1 = off_26C206CF0;
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<16>>::Link>::~MemoryArena(a1 + 1);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(a1);
  JUMPOUT(0x2105595E0);
}

double fst::MemoryPool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<16>>::~MemoryPool(void *a1)
{
  *a1 = off_26C206CF0;
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<16>>::Link>::~MemoryArena(a1 + 1);
  *(void *)&double result = kaldi::CuMatrixBase<float>::~CuMatrixBase(a1).n128_u64[0];
  return result;
}

uint64_t fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<8>>::Link>::Size()
{
  return 136;
}

void fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<8>>::Link>::~MemoryArena(void *a1)
{
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<8>>::Link>::~MemoryArena(a1);
  JUMPOUT(0x2105595E0);
}

double fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<8>>::Link>::~MemoryArena(void *a1)
{
  *a1 = off_26C207408;
  uint64_t v2 = a1 + 3;
  for (unint64_t i = (void *)a1[4]; i != v2; unint64_t i = (void *)i[1])
  {
    uint64_t v4 = i[2];
    if (v4) {
      MEMORY[0x2105595C0](v4, 0x1000C8077774924);
    }
  }
  std::__list_imp<char *>::clear(v2);
  *(void *)&double result = kaldi::CuMatrixBase<float>::~CuMatrixBase(a1).n128_u64[0];
  return result;
}

uint64_t fst::MemoryPool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<8>>::Size()
{
  return 128;
}

void fst::MemoryPool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<8>>::~MemoryPool(void *a1)
{
  *a1 = off_26C206DE0;
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<8>>::Link>::~MemoryArena(a1 + 1);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(a1);
  JUMPOUT(0x2105595E0);
}

double fst::MemoryPool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<8>>::~MemoryPool(void *a1)
{
  *a1 = off_26C206DE0;
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<8>>::Link>::~MemoryArena(a1 + 1);
  *(void *)&double result = kaldi::CuMatrixBase<float>::~CuMatrixBase(a1).n128_u64[0];
  return result;
}

uint64_t fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<4>>::Link>::Size()
{
  return 72;
}

void fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<4>>::Link>::~MemoryArena(void *a1)
{
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<4>>::Link>::~MemoryArena(a1);
  JUMPOUT(0x2105595E0);
}

double fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<4>>::Link>::~MemoryArena(void *a1)
{
  *a1 = off_26C2073B8;
  uint64_t v2 = a1 + 3;
  for (unint64_t i = (void *)a1[4]; i != v2; unint64_t i = (void *)i[1])
  {
    uint64_t v4 = i[2];
    if (v4) {
      MEMORY[0x2105595C0](v4, 0x1000C8077774924);
    }
  }
  std::__list_imp<char *>::clear(v2);
  *(void *)&double result = kaldi::CuMatrixBase<float>::~CuMatrixBase(a1).n128_u64[0];
  return result;
}

uint64_t fst::MemoryPool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<4>>::Size()
{
  return 64;
}

void fst::MemoryPool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<4>>::~MemoryPool(void *a1)
{
  *a1 = off_26C206D90;
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<4>>::Link>::~MemoryArena(a1 + 1);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(a1);
  JUMPOUT(0x2105595E0);
}

double fst::MemoryPool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<4>>::~MemoryPool(void *a1)
{
  *a1 = off_26C206D90;
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<4>>::Link>::~MemoryArena(a1 + 1);
  *(void *)&double result = kaldi::CuMatrixBase<float>::~CuMatrixBase(a1).n128_u64[0];
  return result;
}

uint64_t fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<2>>::Link>::Size()
{
  return 40;
}

void fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<2>>::Link>::~MemoryArena(void *a1)
{
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<2>>::Link>::~MemoryArena(a1);
  JUMPOUT(0x2105595E0);
}

double fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<2>>::Link>::~MemoryArena(void *a1)
{
  *a1 = off_26C207368;
  uint64_t v2 = a1 + 3;
  for (unint64_t i = (void *)a1[4]; i != v2; unint64_t i = (void *)i[1])
  {
    uint64_t v4 = i[2];
    if (v4) {
      MEMORY[0x2105595C0](v4, 0x1000C8077774924);
    }
  }
  std::__list_imp<char *>::clear(v2);
  *(void *)&double result = kaldi::CuMatrixBase<float>::~CuMatrixBase(a1).n128_u64[0];
  return result;
}

uint64_t fst::MemoryPool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<2>>::Size()
{
  return 32;
}

void fst::MemoryPool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<2>>::~MemoryPool(void *a1)
{
  *a1 = off_26C206D40;
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<2>>::Link>::~MemoryArena(a1 + 1);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(a1);
  JUMPOUT(0x2105595E0);
}

double fst::MemoryPool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<2>>::~MemoryPool(void *a1)
{
  *a1 = off_26C206D40;
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<2>>::Link>::~MemoryArena(a1 + 1);
  *(void *)&double result = kaldi::CuMatrixBase<float>::~CuMatrixBase(a1).n128_u64[0];
  return result;
}

uint64_t fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<1>>::Link>::Size()
{
  return 24;
}

void fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<1>>::Link>::~MemoryArena(void *a1)
{
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<1>>::Link>::~MemoryArena(a1);
  JUMPOUT(0x2105595E0);
}

double fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<1>>::Link>::~MemoryArena(void *a1)
{
  *a1 = off_26C207340;
  uint64_t v2 = a1 + 3;
  for (unint64_t i = (void *)a1[4]; i != v2; unint64_t i = (void *)i[1])
  {
    uint64_t v4 = i[2];
    if (v4) {
      MEMORY[0x2105595C0](v4, 0x1000C8077774924);
    }
  }
  std::__list_imp<char *>::clear(v2);
  *(void *)&double result = kaldi::CuMatrixBase<float>::~CuMatrixBase(a1).n128_u64[0];
  return result;
}

uint64_t fst::MemoryPool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<1>>::Size()
{
  return 16;
}

void fst::MemoryPool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<1>>::~MemoryPool(void *a1)
{
  *a1 = off_26C206D18;
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<1>>::Link>::~MemoryArena(a1 + 1);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(a1);
  JUMPOUT(0x2105595E0);
}

double fst::MemoryPool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<1>>::~MemoryPool(void *a1)
{
  *a1 = off_26C206D18;
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<1>>::Link>::~MemoryArena(a1 + 1);
  *(void *)&double result = kaldi::CuMatrixBase<float>::~CuMatrixBase(a1).n128_u64[0];
  return result;
}

uint64_t fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::GetMutableState(uint64_t a1, int a2)
{
  int v30 = a2;
  uint64_t v3 = a2;
  __n128 v5 = *(void **)(a1 + 8);
  uint64_t v4 = *(void **)(a1 + 16);
  unint64_t v6 = v4 - v5;
  if (v6 > a2)
  {
    uint64_t v7 = v5[a2];
    if (v7) {
      return v7;
    }
    goto LABEL_25;
  }
  unint64_t v8 = a2 + 1;
  unint64_t v9 = v8 - v6;
  if (v8 > v6)
  {
    uint64_t v10 = *(void *)(a1 + 24);
    if (v9 > (v10 - (uint64_t)v4) >> 3)
    {
      if (a2 <= -2) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v11 = v10 - (void)v5;
      unint64_t v12 = (v10 - (uint64_t)v5) >> 2;
      if (v12 <= v8) {
        unint64_t v12 = a2 + 1;
      }
      if (v11 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v13 = v12;
      }
      if (v13 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      char v14 = (char *)operator new(8 * v13);
      uint64_t v15 = &v14[8 * v6];
      uint64_t v16 = 8 * v8 - 8 * v6;
      int v17 = v15;
      do
      {
        *(void *)int v17 = 0;
        v17 += 8;
        v16 -= 8;
      }
      while (v16);
      if (v4 != v5)
      {
        do
        {
          uint64_t v18 = *--v4;
          *((void *)v15 - 1) = v18;
          v15 -= 8;
        }
        while (v4 != v5);
        uint64_t v4 = *(void **)(a1 + 8);
      }
      *(void *)(a1 + 8) = v15;
      *(void *)(a1 + 16) = &v14[8 * v8];
      *(void *)(a1 + ++*(void *)(result + 24) = &v14[8 * v13];
      if (v4) {
        operator delete(v4);
      }
      goto LABEL_25;
    }
    uint64_t v19 = &v4[v9];
    uint64_t v20 = 8 * v8 - 8 * v6;
    do
    {
      *v4++ = 0;
      v20 -= 8;
    }
    while (v20);
    goto LABEL_24;
  }
  if (a2 + 1 < v6)
  {
    uint64_t v19 = &v5[v8];
LABEL_24:
    *(void *)(a1 + 16) = v19;
  }
LABEL_25:
  uint64_t v21 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::TN<1>>(*(void *)(a1 + 72));
  uint64_t v22 = v21;
  uint64_t v7 = *(void *)(v21 + 56);
  if (v7)
  {
    *(void *)(v21 + 56) = *(void *)(v7 + 64);
  }
  else
  {
    unint64_t v23 = *(void *)(v21 + 16);
    if (v23 <= 0x11F) {
      operator new[]();
    }
    uint64_t v24 = *(void *)(v22 + 24);
    if (v24 + 72 > v23) {
      operator new[]();
    }
    uint64_t v7 = *(void *)(*(void *)(v22 + 40) + 16) + v24;
    *(void *)(v22 + ++*(void *)(result + 24) = v24 + 72;
    *(void *)(v7 + 64) = 0;
  }
  *(_DWORD *)uint64_t v7 = 2139095040;
  *(_OWORD *)(v7 + 8) = 0u;
  *(_OWORD *)(v7 + ++*(void *)(result + 24) = 0u;
  *(void *)(v7 + 40) = 0;
  uint64_t v25 = *(void *)(a1 + 80);
  *(void *)(v7 + 48) = v25;
  ++*(void *)(v25 + 8);
  *(void *)(v7 + 56) = 0;
  *(void *)(*(void *)(a1 + 8) + 8 * v3) = v7;
  if (*(unsigned char *)a1)
  {
    uint64_t v26 = std::__list_imp<int,fst::PoolAllocator<int>>::__create_node[abi:ne180100]<int const&>(*(fst::MemoryPoolCollection **)(a1 + 56), &v30);
    uint64_t v28 = *(void *)(a1 + 32);
    uint64_t v27 = (void *)(a1 + 32);
    *uint64_t v26 = v28;
    v26[1] = v27;
    *(void *)(v28 + 8) = v26;
    *uint64_t v27 = v26;
    ++v27[2];
  }
  return v7;
}

uint64_t std::__split_buffer<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> &>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != v3) {
    *(void *)(a1 + 16) = v2 + ((v3 - v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  }
  if (*(void *)a1) {
    fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::deallocate(*(uint64_t **)(a1 + 32), *(void **)a1, (uint64_t)(*(void *)(a1 + 24) - *(void *)a1) >> 4);
  }
  return a1;
}

void *std::__list_imp<int,fst::PoolAllocator<int>>::__create_node[abi:ne180100]<int const&>(fst::MemoryPoolCollection *a1, _DWORD *a2)
{
  uint64_t v10 = a1;
  v11[0] = a1;
  *((void *)a1 + 1) += 2;
  v11[1] = (fst::MemoryPoolCollection *)1;
  uint64_t v3 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__list_node<int,void *>>::TN<1>>((uint64_t)a1);
  uint64_t v4 = v3;
  __n128 v5 = *(void **)(v3 + 56);
  if (v5)
  {
    *(void *)(v3 + 56) = v5[3];
  }
  else
  {
    unint64_t v6 = *(void *)(v3 + 16);
    if (v6 <= 0x7F) {
      operator new[]();
    }
    uint64_t v7 = *(void *)(v4 + 24);
    if (v7 + 32 > v6) {
      operator new[]();
    }
    __n128 v5 = (void *)(*(void *)(*(void *)(v4 + 40) + 16) + v7);
    *(void *)(v4 + ++*(void *)(result + 24) = v7 + 32;
    v5[3] = 0;
  }
  unint64_t v12 = v5;
  fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~PoolAllocator(&v10);
  unint64_t v8 = v12;
  void *v12 = 0;
  v8[1] = 0;
  *((_DWORD *)v8 + 4) = *a2;
  unint64_t v12 = 0;
  fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~PoolAllocator(v11);
  return v8;
}

void sub_20D4139C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, fst::MemoryPoolCollection *a9, fst::MemoryPoolCollection *a10)
{
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Start(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (!*(unsigned char *)(v1 + 60))
  {
    if ((*(uint64_t (**)(void, uint64_t))(*(void *)v1 + 32))(*(void *)(a1 + 8), 4))
    {
      *(unsigned char *)(v1 + 60) = 1;
    }
    else if (!*(unsigned char *)(v1 + 60))
    {
      int v3 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 56))(v1);
      if (v3 != -1)
      {
        *(_DWORD *)(v1 + 64) = v3;
        *(unsigned char *)(v1 + 60) = 1;
        if (*(_DWORD *)(v1 + 68) <= v3) {
          *(_DWORD *)(v1 + 68) = v3 + 1;
        }
      }
    }
  }
  return *(unsigned int *)(v1 + 64);
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::HasSequentialStates(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 16))();
}

void std::unordered_set<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,fst::PoolAllocator<int>>::unordered_set()
{
}

void sub_20D413BBC(_Unwind_Exception *a1)
{
  std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,fst::PoolAllocator<int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~DeterminizeFstImplBase(void *a1)
{
  *a1 = off_26C2087A8;
  uint64_t v2 = a1[17];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::~CacheBaseImpl(a1);
}

uint64_t fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::~CacheBaseImpl(void *a1)
{
  *a1 = off_26C207908;
  uint64_t v2 = a1[15];
  if (v2)
  {
    fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::Clear((void *)a1[15]);
    fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~PoolAllocator((fst::MemoryPoolCollection **)(v2 + 80));
    fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~PoolAllocator((fst::MemoryPoolCollection **)(v2 + 72));
    std::__list_imp<int,fst::PoolAllocator<int>>::clear((uint64_t *)(v2 + 32));
    fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~PoolAllocator((fst::MemoryPoolCollection **)(v2 + 56));
    int v3 = *(void **)(v2 + 8);
    if (v3)
    {
      *(void *)(v2 + 16) = v3;
      operator delete(v3);
    }
    MEMORY[0x2105595E0](v2, 0x10A0C40690396FALL);
  }
  uint64_t v4 = (void *)a1[9];
  if (v4) {
    operator delete(v4);
  }
  return fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~FstImpl((uint64_t)a1);
}

uint64_t *fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::Clear(void *a1)
{
  uint64_t v2 = a1[2];
  if (v2 != a1[1])
  {
    unint64_t v3 = 0;
    uint64_t v2 = a1[1];
    do
    {
      fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Destroy(*(void **)(v2 + 8 * v3++), a1 + 9);
      uint64_t v2 = a1[1];
    }
    while (v3 < (a1[2] - v2) >> 3);
  }
  a1[2] = v2;
  return std::__list_imp<int,fst::PoolAllocator<int>>::clear(a1 + 4);
}

uint64_t *std::__list_imp<int,fst::PoolAllocator<int>>::clear(uint64_t *result)
{
  if (result[2])
  {
    uint64_t v1 = result;
    uint64_t v3 = *result;
    uint64_t v2 = (uint64_t *)result[1];
    uint64_t v4 = *v2;
    *(void *)(v4 + 8) = *(void *)(*result + 8);
    **(void **)(v3 + 8) = v4;
    result[2] = 0;
    while (v2 != v1)
    {
      __n128 v5 = (uint64_t *)v2[1];
      double result = (uint64_t *)std::__list_imp<int,fst::PoolAllocator<int>>::__delete_node[abi:ne180100]<>(v1[3], (uint64_t)v2);
      uint64_t v2 = v5;
    }
  }
  return result;
}

void fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::~CacheBaseImpl(void *a1)
{
  fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::~CacheBaseImpl(a1);
  JUMPOUT(0x2105595E0);
}

uint64_t std::unique_ptr<std::__hash_node_base<std::__hash_node<int,void *> *> *[],std::__bucket_list_deallocator<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>>>::~unique_ptr[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    std::__bucket_list_deallocator<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>>::operator()[abi:ne180100]((unint64_t *)(a1 + 8), v2);
  }
  fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~PoolAllocator((fst::MemoryPoolCollection **)(a1 + 16));
  return a1;
}

void std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,fst::PoolAllocator<int>>::__rehash<true>(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  uint64_t v4 = (size_t *)(a1 + 8);
  int8x8_t v5 = *(int8x8_t *)(a1 + 8);
  if (prime <= *(void *)&v5)
  {
    if (prime >= *(void *)&v5) {
      return;
    }
    unint64_t v12 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 40) / *(float *)(a1 + 56));
    if (*(void *)&v5 < 3uLL || (uint8x8_t v13 = (uint8x8_t)vcnt_s8(v5), v13.i16[0] = vaddlv_u8(v13), v13.u32[0] > 1uLL))
    {
      unint64_t v12 = std::__next_prime(v12);
    }
    else
    {
      uint64_t v14 = 1 << -(char)__clz(v12 - 1);
      if (v12 >= 2) {
        unint64_t v12 = v14;
      }
    }
    if (prime <= v12) {
      size_t prime = v12;
    }
    if (prime >= *(void *)&v5) {
      return;
    }
    if (!prime)
    {
      int v17 = *(void **)a1;
      *(void *)a1 = 0;
      if (v17) {
        std::__bucket_list_deallocator<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>>::operator()[abi:ne180100]((unint64_t *)(a1 + 8), v17);
      }
      *uint64_t v4 = 0;
      return;
    }
  }
  unint64_t v6 = fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::allocate((uint64_t *)(a1 + 16), prime);
  uint64_t v7 = *(void **)a1;
  *(void *)a1 = v6;
  if (v7) {
    std::__bucket_list_deallocator<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>>::operator()[abi:ne180100]((unint64_t *)(a1 + 8), v7);
  }
  uint64_t v8 = 0;
  *uint64_t v4 = prime;
  do
    *(void *)(*(void *)a1 + 8 * v8++) = 0;
  while (prime != v8);
  unint64_t v9 = *(void **)(a1 + 24);
  if (v9)
  {
    size_t v10 = v9[1];
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)prime);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      if (v10 >= prime) {
        v10 %= prime;
      }
    }
    else
    {
      v10 &= prime - 1;
    }
    *(void *)(*(void *)a1 + 8 * v10) = a1 + 24;
    uint64_t v15 = (void *)*v9;
    if (*v9)
    {
      do
      {
        size_t v16 = v15[1];
        if (v11.u32[0] > 1uLL)
        {
          if (v16 >= prime) {
            v16 %= prime;
          }
        }
        else
        {
          v16 &= prime - 1;
        }
        if (v16 != v10)
        {
          if (!*(void *)(*(void *)a1 + 8 * v16))
          {
            *(void *)(*(void *)a1 + 8 * v16) = v9;
            goto LABEL_30;
          }
          void *v9 = *v15;
          *uint64_t v15 = **(void **)(*(void *)a1 + 8 * v16);
          **(void **)(*(void *)a1 + 8 * v16) = v15;
          uint64_t v15 = v9;
        }
        size_t v16 = v10;
LABEL_30:
        unint64_t v9 = v15;
        uint64_t v15 = (void *)*v15;
        size_t v10 = v16;
      }
      while (v15);
    }
  }
}

uint64_t std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,fst::PoolAllocator<int>>::~__hash_table(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
  uint64_t v3 = (uint64_t *)(a1 + 32);
  if (v2)
  {
    do
    {
      uint64_t v4 = (void *)*v2;
      uint64_t v5 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node<int,void *>>::TN<1>>(*v3);
      v2[3] = *(void *)(v5 + 56);
      *(void *)(v5 + 56) = v2;
      uint64_t v2 = v4;
    }
    while (v4);
  }
  fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~PoolAllocator((fst::MemoryPoolCollection **)v3);
  return std::unique_ptr<std::__hash_node_base<std::__hash_node<int,void *> *> *[],std::__bucket_list_deallocator<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>>>::~unique_ptr[abi:ne180100](a1);
}

uint64_t fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node<int,void *>>::TN<1>>(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = (uint64_t *)(a1 + 16);
  if ((unint64_t)(*(void *)(a1 + 24) - v1) <= 0xC7)
  {
    uint64_t v4 = 0;
    std::vector<fst::MemoryPoolBase *>::resize((char **)(a1 + 16), 0x19uLL, &v4);
    uint64_t v1 = *v2;
  }
  if (!*(void *)(v1 + 192)) {
    operator new();
  }
  return *(void *)(v1 + 192);
}

void sub_20D414200(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v3);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v2);
  __n128 v5 = kaldi::CuMatrixBase<float>::~CuMatrixBase(v1);
  MEMORY[0x2105595E0](v5);
  _Unwind_Resume(a1);
}

uint64_t fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<std::__hash_node<int,void *>>::TN<1>>::Link>::Size()
{
  return 32;
}

void fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<std::__hash_node<int,void *>>::TN<1>>::Link>::~MemoryArena(void *a1)
{
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<std::__hash_node<int,void *>>::TN<1>>::Link>::~MemoryArena(a1);
  JUMPOUT(0x2105595E0);
}

double fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<std::__hash_node<int,void *>>::TN<1>>::Link>::~MemoryArena(void *a1)
{
  *a1 = off_26C207660;
  uint64_t v2 = a1 + 3;
  for (unint64_t i = (void *)a1[4]; i != v2; unint64_t i = (void *)i[1])
  {
    uint64_t v4 = i[2];
    if (v4) {
      MEMORY[0x2105595C0](v4, 0x1000C8077774924);
    }
  }
  std::__list_imp<char *>::clear(v2);
  *(void *)&double result = kaldi::CuMatrixBase<float>::~CuMatrixBase(a1).n128_u64[0];
  return result;
}

uint64_t fst::MemoryPool<fst::PoolAllocator<std::__hash_node<int,void *>>::TN<1>>::Size()
{
  return 24;
}

void fst::MemoryPool<fst::PoolAllocator<std::__hash_node<int,void *>>::TN<1>>::~MemoryPool(void *a1)
{
  *a1 = off_26C207038;
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<std::__hash_node<int,void *>>::TN<1>>::Link>::~MemoryArena(a1 + 1);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(a1);
  JUMPOUT(0x2105595E0);
}

double fst::MemoryPool<fst::PoolAllocator<std::__hash_node<int,void *>>::TN<1>>::~MemoryPool(void *a1)
{
  *a1 = off_26C207038;
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<std::__hash_node<int,void *>>::TN<1>>::Link>::~MemoryArena(a1 + 1);
  *(void *)&double result = kaldi::CuMatrixBase<float>::~CuMatrixBase(a1).n128_u64[0];
  return result;
}

void *fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::allocate(uint64_t *a1, unint64_t a2)
{
  if (a2 == 2)
  {
    uint64_t v6 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<2>>(*a1);
    uint64_t v3 = (void *)v6;
    uint64_t v4 = *(void **)(v6 + 56);
    if (!v4)
    {
      unint64_t v11 = *(void *)(v6 + 16);
      if (v11 <= 0x5F) {
        operator new[]();
      }
      uint64_t v15 = v3[3];
      if (v15 + 24 > v11) {
        operator new[]();
      }
      uint64_t v4 = (void *)(*(void *)(v3[5] + 16) + v15);
      void v3[3] = v15 + 24;
      v4[2] = 0;
      return v4;
    }
    uint64_t v5 = v4[2];
LABEL_13:
    v3[7] = v5;
    return v4;
  }
  if (a2 == 1)
  {
    uint64_t v2 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<1>>(*a1);
    uint64_t v3 = (void *)v2;
    uint64_t v4 = *(void **)(v2 + 56);
    if (!v4)
    {
      unint64_t v10 = *(void *)(v2 + 16);
      if (v10 <= 0x3F) {
        operator new[]();
      }
      uint64_t v14 = v3[3];
      if (v14 + 16 > v10) {
        operator new[]();
      }
      uint64_t v4 = (void *)(*(void *)(v3[5] + 16) + v14);
      void v3[3] = v14 + 16;
      v4[1] = 0;
      return v4;
    }
    uint64_t v5 = v4[1];
    goto LABEL_13;
  }
  if (a2 <= 4)
  {
    uint64_t v7 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<4>>(*a1);
    uint64_t v3 = (void *)v7;
    uint64_t v4 = *(void **)(v7 + 56);
    if (!v4)
    {
      unint64_t v16 = *(void *)(v7 + 16);
      if (v16 <= 0x9F) {
        operator new[]();
      }
      uint64_t v18 = v3[3];
      if (v18 + 40 > v16) {
        operator new[]();
      }
      uint64_t v4 = (void *)(*(void *)(v3[5] + 16) + v18);
      void v3[3] = v18 + 40;
      v4[4] = 0;
      return v4;
    }
    uint64_t v5 = v4[4];
    goto LABEL_13;
  }
  if (a2 <= 8)
  {
    uint64_t v8 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<8>>(*a1);
    uint64_t v3 = (void *)v8;
    uint64_t v4 = *(void **)(v8 + 56);
    if (!v4)
    {
      unint64_t v17 = *(void *)(v8 + 16);
      if (v17 <= 0x11F) {
        operator new[]();
      }
      uint64_t v19 = v3[3];
      if (v19 + 72 > v17) {
        operator new[]();
      }
      uint64_t v4 = (void *)(*(void *)(v3[5] + 16) + v19);
      void v3[3] = v19 + 72;
      v4[8] = 0;
      return v4;
    }
    uint64_t v5 = v4[8];
    goto LABEL_13;
  }
  if (a2 <= 0x10)
  {
    uint64_t v12 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<16>>(*a1);
    uint64_t v4 = *(void **)(v12 + 56);
    if (!v4)
    {
      uint64_t v4 = (void *)fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<16>>::Link>::Allocate((void *)(v12 + 8));
      v4[16] = 0;
      return v4;
    }
    uint64_t v13 = v4[16];
    goto LABEL_40;
  }
  if (a2 <= 0x20)
  {
    uint64_t v12 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<32>>(*a1);
    uint64_t v4 = *(void **)(v12 + 56);
    if (!v4)
    {
      uint64_t v4 = (void *)fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<32>>::Link>::Allocate((void *)(v12 + 8));
      v4[32] = 0;
      return v4;
    }
    uint64_t v13 = v4[32];
    goto LABEL_40;
  }
  if (a2 <= 0x40)
  {
    uint64_t v12 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<64>>(*a1);
    uint64_t v4 = *(void **)(v12 + 56);
    if (!v4)
    {
      uint64_t v4 = (void *)fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<64>>::Link>::Allocate((void *)(v12 + 8));
      v4[64] = 0;
      return v4;
    }
    uint64_t v13 = v4[64];
LABEL_40:
    *(void *)(v12 + 56) = v13;
    return v4;
  }
  if (a2 >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(8 * a2);
}

void std::__bucket_list_deallocator<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>>::operator()[abi:ne180100](unint64_t *a1, void *__p)
{
  unint64_t v3 = *a1;
  if (*a1 == 2)
  {
    uint64_t v4 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<2>>(a1[1]);
    __p[2] = *(void *)(v4 + 56);
    goto LABEL_15;
  }
  if (v3 == 1)
  {
    uint64_t v4 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<1>>(a1[1]);
    __p[1] = *(void *)(v4 + 56);
LABEL_15:
    *(void *)(v4 + 56) = __p;
    return;
  }
  if (v3 <= 4)
  {
    uint64_t v4 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<4>>(a1[1]);
    __p[4] = *(void *)(v4 + 56);
    goto LABEL_15;
  }
  if (v3 <= 8)
  {
    uint64_t v4 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<8>>(a1[1]);
    __p[8] = *(void *)(v4 + 56);
    goto LABEL_15;
  }
  if (v3 <= 0x10)
  {
    uint64_t v4 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<16>>(a1[1]);
    __p[16] = *(void *)(v4 + 56);
    goto LABEL_15;
  }
  if (v3 <= 0x20)
  {
    uint64_t v4 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<32>>(a1[1]);
    __p[32] = *(void *)(v4 + 56);
    goto LABEL_15;
  }
  if (v3 <= 0x40)
  {
    uint64_t v4 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<64>>(a1[1]);
    __p[64] = *(void *)(v4 + 56);
    goto LABEL_15;
  }
  operator delete(__p);
}

uint64_t fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<1>>(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = (uint64_t *)(a1 + 16);
  if ((unint64_t)(*(void *)(a1 + 24) - v1) <= 0x47)
  {
    uint64_t v4 = 0;
    std::vector<fst::MemoryPoolBase *>::resize((char **)(a1 + 16), 9uLL, &v4);
    uint64_t v1 = *v2;
  }
  if (!*(void *)(v1 + 64)) {
    operator new();
  }
  return *(void *)(v1 + 64);
}

void sub_20D414AA8(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v3);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v2);
  __n128 v5 = kaldi::CuMatrixBase<float>::~CuMatrixBase(v1);
  MEMORY[0x2105595E0](v5);
  _Unwind_Resume(a1);
}

uint64_t fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<2>>(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = (uint64_t *)(a1 + 16);
  if ((unint64_t)(*(void *)(a1 + 24) - v1) <= 0x87)
  {
    uint64_t v4 = 0;
    std::vector<fst::MemoryPoolBase *>::resize((char **)(a1 + 16), 0x11uLL, &v4);
    uint64_t v1 = *v2;
  }
  if (!*(void *)(v1 + 128)) {
    operator new();
  }
  return *(void *)(v1 + 128);
}

void sub_20D414C04(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v3);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v2);
  __n128 v5 = kaldi::CuMatrixBase<float>::~CuMatrixBase(v1);
  MEMORY[0x2105595E0](v5);
  _Unwind_Resume(a1);
}

uint64_t fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<4>>(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = (uint64_t *)(a1 + 16);
  if ((unint64_t)(*(void *)(a1 + 24) - v1) <= 0x107)
  {
    uint64_t v4 = 0;
    std::vector<fst::MemoryPoolBase *>::resize((char **)(a1 + 16), 0x21uLL, &v4);
    uint64_t v1 = *v2;
  }
  if (!*(void *)(v1 + 256)) {
    operator new();
  }
  return *(void *)(v1 + 256);
}

void sub_20D414D60(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v3);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v2);
  __n128 v5 = kaldi::CuMatrixBase<float>::~CuMatrixBase(v1);
  MEMORY[0x2105595E0](v5);
  _Unwind_Resume(a1);
}

uint64_t fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<8>>(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = (uint64_t *)(a1 + 16);
  if ((unint64_t)(*(void *)(a1 + 24) - v1) <= 0x207)
  {
    uint64_t v4 = 0;
    std::vector<fst::MemoryPoolBase *>::resize((char **)(a1 + 16), 0x41uLL, &v4);
    uint64_t v1 = *v2;
  }
  if (!*(void *)(v1 + 512)) {
    operator new();
  }
  return *(void *)(v1 + 512);
}

void sub_20D414EBC(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v3);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v2);
  __n128 v5 = kaldi::CuMatrixBase<float>::~CuMatrixBase(v1);
  MEMORY[0x2105595E0](v5);
  _Unwind_Resume(a1);
}

uint64_t fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<16>>(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = (uint64_t *)(a1 + 16);
  if ((unint64_t)(*(void *)(a1 + 24) - v1) <= 0x407)
  {
    uint64_t v4 = 0;
    std::vector<fst::MemoryPoolBase *>::resize((char **)(a1 + 16), 0x81uLL, &v4);
    uint64_t v1 = *v2;
  }
  if (!*(void *)(v1 + 1024)) {
    operator new();
  }
  return *(void *)(v1 + 1024);
}

void sub_20D415018(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v3);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v2);
  __n128 v5 = kaldi::CuMatrixBase<float>::~CuMatrixBase(v1);
  MEMORY[0x2105595E0](v5);
  _Unwind_Resume(a1);
}

uint64_t fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<32>>(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = (uint64_t *)(a1 + 16);
  if ((unint64_t)(*(void *)(a1 + 24) - v1) <= 0x807)
  {
    uint64_t v4 = 0;
    std::vector<fst::MemoryPoolBase *>::resize((char **)(a1 + 16), 0x101uLL, &v4);
    uint64_t v1 = *v2;
  }
  if (!*(void *)(v1 + 2048)) {
    operator new();
  }
  return *(void *)(v1 + 2048);
}

void sub_20D415174(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v3);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v2);
  __n128 v5 = kaldi::CuMatrixBase<float>::~CuMatrixBase(v1);
  MEMORY[0x2105595E0](v5);
  _Unwind_Resume(a1);
}

uint64_t fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<64>>(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = (uint64_t *)(a1 + 16);
  if ((unint64_t)(*(void *)(a1 + 24) - v1) >> 3 <= 0x200)
  {
    uint64_t v4 = 0;
    std::vector<fst::MemoryPoolBase *>::resize((char **)(a1 + 16), 0x201uLL, &v4);
    uint64_t v1 = *v2;
  }
  if (!*(void *)(v1 + 4096)) {
    operator new();
  }
  return *(void *)(v1 + 4096);
}

void sub_20D4152D4(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v3);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v2);
  __n128 v5 = kaldi::CuMatrixBase<float>::~CuMatrixBase(v1);
  MEMORY[0x2105595E0](v5);
  _Unwind_Resume(a1);
}

uint64_t fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<64>>::Link>::Size()
{
  return 520;
}

void fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<64>>::Link>::~MemoryArena(void *a1)
{
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<64>>::Link>::~MemoryArena(a1);
  JUMPOUT(0x2105595E0);
}

double fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<64>>::Link>::~MemoryArena(void *a1)
{
  *a1 = off_26C207778;
  uint64_t v2 = a1 + 3;
  for (unint64_t i = (void *)a1[4]; i != v2; unint64_t i = (void *)i[1])
  {
    uint64_t v4 = i[2];
    if (v4) {
      MEMORY[0x2105595C0](v4, 0x1000C8077774924);
    }
  }
  std::__list_imp<char *>::clear(v2);
  *(void *)&double result = kaldi::CuMatrixBase<float>::~CuMatrixBase(a1).n128_u64[0];
  return result;
}

uint64_t fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<64>>::Size()
{
  return 512;
}

void fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<64>>::~MemoryPool(void *a1)
{
  *a1 = off_26C207150;
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<64>>::Link>::~MemoryArena(a1 + 1);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(a1);
  JUMPOUT(0x2105595E0);
}

double fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<64>>::~MemoryPool(void *a1)
{
  *a1 = off_26C207150;
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<64>>::Link>::~MemoryArena(a1 + 1);
  *(void *)&double result = kaldi::CuMatrixBase<float>::~CuMatrixBase(a1).n128_u64[0];
  return result;
}

uint64_t fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<32>>::Link>::Size()
{
  return 264;
}

void fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<32>>::Link>::~MemoryArena(void *a1)
{
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<32>>::Link>::~MemoryArena(a1);
  JUMPOUT(0x2105595E0);
}

double fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<32>>::Link>::~MemoryArena(void *a1)
{
  *a1 = off_26C207728;
  uint64_t v2 = a1 + 3;
  for (unint64_t i = (void *)a1[4]; i != v2; unint64_t i = (void *)i[1])
  {
    uint64_t v4 = i[2];
    if (v4) {
      MEMORY[0x2105595C0](v4, 0x1000C8077774924);
    }
  }
  std::__list_imp<char *>::clear(v2);
  *(void *)&double result = kaldi::CuMatrixBase<float>::~CuMatrixBase(a1).n128_u64[0];
  return result;
}

uint64_t fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<32>>::Size()
{
  return 256;
}

void fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<32>>::~MemoryPool(void *a1)
{
  *a1 = off_26C207100;
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<32>>::Link>::~MemoryArena(a1 + 1);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(a1);
  JUMPOUT(0x2105595E0);
}

double fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<32>>::~MemoryPool(void *a1)
{
  *a1 = off_26C207100;
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<32>>::Link>::~MemoryArena(a1 + 1);
  *(void *)&double result = kaldi::CuMatrixBase<float>::~CuMatrixBase(a1).n128_u64[0];
  return result;
}

uint64_t fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<16>>::Link>::Size()
{
  return 136;
}

void fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<16>>::Link>::~MemoryArena(void *a1)
{
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<16>>::Link>::~MemoryArena(a1);
  JUMPOUT(0x2105595E0);
}

double fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<16>>::Link>::~MemoryArena(void *a1)
{
  *a1 = off_26C2076B0;
  uint64_t v2 = a1 + 3;
  for (unint64_t i = (void *)a1[4]; i != v2; unint64_t i = (void *)i[1])
  {
    uint64_t v4 = i[2];
    if (v4) {
      MEMORY[0x2105595C0](v4, 0x1000C8077774924);
    }
  }
  std::__list_imp<char *>::clear(v2);
  *(void *)&double result = kaldi::CuMatrixBase<float>::~CuMatrixBase(a1).n128_u64[0];
  return result;
}

uint64_t fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<16>>::Size()
{
  return 128;
}

void fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<16>>::~MemoryPool(void *a1)
{
  *a1 = off_26C207088;
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<16>>::Link>::~MemoryArena(a1 + 1);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(a1);
  JUMPOUT(0x2105595E0);
}

double fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<16>>::~MemoryPool(void *a1)
{
  *a1 = off_26C207088;
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<16>>::Link>::~MemoryArena(a1 + 1);
  *(void *)&double result = kaldi::CuMatrixBase<float>::~CuMatrixBase(a1).n128_u64[0];
  return result;
}

uint64_t fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<8>>::Link>::Size()
{
  return 72;
}

void fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<8>>::Link>::~MemoryArena(void *a1)
{
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<8>>::Link>::~MemoryArena(a1);
  JUMPOUT(0x2105595E0);
}

double fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<8>>::Link>::~MemoryArena(void *a1)
{
  *a1 = off_26C2077A0;
  uint64_t v2 = a1 + 3;
  for (unint64_t i = (void *)a1[4]; i != v2; unint64_t i = (void *)i[1])
  {
    uint64_t v4 = i[2];
    if (v4) {
      MEMORY[0x2105595C0](v4, 0x1000C8077774924);
    }
  }
  std::__list_imp<char *>::clear(v2);
  *(void *)&double result = kaldi::CuMatrixBase<float>::~CuMatrixBase(a1).n128_u64[0];
  return result;
}

uint64_t fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<8>>::Size()
{
  return 64;
}

void fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<8>>::~MemoryPool(void *a1)
{
  *a1 = off_26C207178;
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<8>>::Link>::~MemoryArena(a1 + 1);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(a1);
  JUMPOUT(0x2105595E0);
}

double fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<8>>::~MemoryPool(void *a1)
{
  *a1 = off_26C207178;
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<8>>::Link>::~MemoryArena(a1 + 1);
  *(void *)&double result = kaldi::CuMatrixBase<float>::~CuMatrixBase(a1).n128_u64[0];
  return result;
}

uint64_t fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<4>>::Link>::Size()
{
  return 40;
}

void fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<4>>::Link>::~MemoryArena(void *a1)
{
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<4>>::Link>::~MemoryArena(a1);
  JUMPOUT(0x2105595E0);
}

double fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<4>>::Link>::~MemoryArena(void *a1)
{
  *a1 = off_26C207750;
  uint64_t v2 = a1 + 3;
  for (unint64_t i = (void *)a1[4]; i != v2; unint64_t i = (void *)i[1])
  {
    uint64_t v4 = i[2];
    if (v4) {
      MEMORY[0x2105595C0](v4, 0x1000C8077774924);
    }
  }
  std::__list_imp<char *>::clear(v2);
  *(void *)&double result = kaldi::CuMatrixBase<float>::~CuMatrixBase(a1).n128_u64[0];
  return result;
}

uint64_t fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<4>>::Size()
{
  return 32;
}

void fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<4>>::~MemoryPool(void *a1)
{
  *a1 = off_26C207128;
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<4>>::Link>::~MemoryArena(a1 + 1);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(a1);
  JUMPOUT(0x2105595E0);
}

double fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<4>>::~MemoryPool(void *a1)
{
  *a1 = off_26C207128;
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<4>>::Link>::~MemoryArena(a1 + 1);
  *(void *)&double result = kaldi::CuMatrixBase<float>::~CuMatrixBase(a1).n128_u64[0];
  return result;
}

uint64_t fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<2>>::Link>::Size()
{
  return 24;
}

void fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<2>>::Link>::~MemoryArena(void *a1)
{
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<2>>::Link>::~MemoryArena(a1);
  JUMPOUT(0x2105595E0);
}

double fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<2>>::Link>::~MemoryArena(void *a1)
{
  *a1 = off_26C207700;
  uint64_t v2 = a1 + 3;
  for (unint64_t i = (void *)a1[4]; i != v2; unint64_t i = (void *)i[1])
  {
    uint64_t v4 = i[2];
    if (v4) {
      MEMORY[0x2105595C0](v4, 0x1000C8077774924);
    }
  }
  std::__list_imp<char *>::clear(v2);
  *(void *)&double result = kaldi::CuMatrixBase<float>::~CuMatrixBase(a1).n128_u64[0];
  return result;
}

uint64_t fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<2>>::Size()
{
  return 16;
}

void fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<2>>::~MemoryPool(void *a1)
{
  *a1 = off_26C2070D8;
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<2>>::Link>::~MemoryArena(a1 + 1);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(a1);
  JUMPOUT(0x2105595E0);
}

double fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<2>>::~MemoryPool(void *a1)
{
  *a1 = off_26C2070D8;
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<2>>::Link>::~MemoryArena(a1 + 1);
  *(void *)&double result = kaldi::CuMatrixBase<float>::~CuMatrixBase(a1).n128_u64[0];
  return result;
}

uint64_t fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<1>>::Link>::Size()
{
  return 16;
}

void fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<1>>::Link>::~MemoryArena(void *a1)
{
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<1>>::Link>::~MemoryArena(a1);
  JUMPOUT(0x2105595E0);
}

double fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<1>>::Link>::~MemoryArena(void *a1)
{
  *a1 = off_26C2076D8;
  uint64_t v2 = a1 + 3;
  for (unint64_t i = (void *)a1[4]; i != v2; unint64_t i = (void *)i[1])
  {
    uint64_t v4 = i[2];
    if (v4) {
      MEMORY[0x2105595C0](v4, 0x1000C8077774924);
    }
  }
  std::__list_imp<char *>::clear(v2);
  *(void *)&double result = kaldi::CuMatrixBase<float>::~CuMatrixBase(a1).n128_u64[0];
  return result;
}

uint64_t fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<1>>::Size()
{
  return 8;
}

void fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<1>>::~MemoryPool(void *a1)
{
  *a1 = off_26C2070B0;
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<1>>::Link>::~MemoryArena(a1 + 1);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(a1);
  JUMPOUT(0x2105595E0);
}

double fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<1>>::~MemoryPool(void *a1)
{
  *a1 = off_26C2070B0;
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<1>>::Link>::~MemoryArena(a1 + 1);
  *(void *)&double result = kaldi::CuMatrixBase<float>::~CuMatrixBase(a1).n128_u64[0];
  return result;
}

uint64_t fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<16>>::Link>::Allocate(void *a1)
{
  unint64_t v2 = a1[1];
  if (v2 <= 0x21F) {
    operator new[]();
  }
  uint64_t v3 = a1[2];
  if (v3 + 136 > v2) {
    operator new[]();
  }
  uint64_t v4 = *(void *)(a1[4] + 16) + v3;
  a1[2] = v3 + 136;
  return v4;
}

uint64_t fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<32>>::Link>::Allocate(void *a1)
{
  unint64_t v2 = a1[1];
  if (v2 <= 0x41F) {
    operator new[]();
  }
  uint64_t v3 = a1[2];
  if (v3 + 264 > v2) {
    operator new[]();
  }
  uint64_t v4 = *(void *)(a1[4] + 16) + v3;
  a1[2] = v3 + 264;
  return v4;
}

uint64_t fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<64>>::Link>::Allocate(void *a1)
{
  unint64_t v2 = a1[1];
  if (v2 <= 0x81F) {
    operator new[]();
  }
  uint64_t v3 = a1[2];
  if (v3 + 520 > v2) {
    operator new[]();
  }
  uint64_t v4 = *(void *)(a1[4] + 16) + v3;
  a1[2] = v3 + 520;
  return v4;
}

float fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>>::ComputeFinal(uint64_t a1, int a2)
{
  unint64_t v2 = **(float ***)(*(void *)(*(void *)(a1 + 184) + 104) + 8 * a2);
  if (!v2) {
    return INFINITY;
  }
  float v4 = INFINITY;
  do
  {
    (*(void (**)(void, void))(**(void **)(a1 + 136) + 32))(*(void *)(a1 + 136), *((unsigned int *)v2 + 2));
    float v6 = v2[3];
    float v7 = NAN;
    if (v6 != -INFINITY && v5 != -INFINITY)
    {
      float v7 = INFINITY;
      BOOL v8 = v5 == INFINITY || v6 == INFINITY;
      float v9 = v6 + v5;
      if (!v8) {
        float v7 = v9;
      }
    }
    if (v4 >= v7) {
      float v10 = v7;
    }
    else {
      float v10 = v4;
    }
    if (v7 == -INFINITY || v4 == -INFINITY) {
      float v4 = NAN;
    }
    else {
      float v4 = v10;
    }
    if (v4 >= -INFINITY && v4 <= -INFINITY) {
      *(void *)(a1 + 8) |= 4uLL;
    }
    unint64_t v2 = *(float **)v2;
  }
  while (v2);
  return v4;
}

uint64_t fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>>::ComputeStart(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 136) + 24))(*(void *)(a1 + 136));
  if (result != -1) {
    operator new();
  }
  return result;
}

uint64_t fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>>::FindState(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 184);
  unint64_t v3 = *(void *)(v2 + 104);
  float v4 = *(void **)(v2 + 112);
  *(void *)(v2 + 128) = &v82;
  unint64_t v82 = (void **)a2;
  unint64_t v5 = fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc::operator()((uint64_t *)(v2 + 80), -1);
  int8x8_t v6 = *(int8x8_t *)(v2 + 40);
  if (!*(void *)&v6) {
    goto LABEL_17;
  }
  unint64_t v7 = v5;
  uint8x8_t v8 = (uint8x8_t)vcnt_s8(v6);
  v8.i16[0] = vaddlv_u8(v8);
  unint64_t v9 = v8.u32[0];
  if (v8.u32[0] > 1uLL)
  {
    unint64_t v10 = v5;
    if (v5 >= *(void *)&v6) {
      unint64_t v10 = v5 % *(void *)&v6;
    }
  }
  else
  {
    unint64_t v10 = (*(void *)&v6 - 1) & v5;
  }
  unint64_t v11 = *(uint64_t ***)(*(void *)(v2 + 32) + 8 * v10);
  if (!v11 || (uint64_t v12 = *v11) == 0)
  {
LABEL_17:
    unint64_t v73 = (unint64_t)v4 - v3;
    uint64_t v14 = (uint64_t)((uint64_t)v4 - v3) >> 3;
    unint64_t v15 = *(void *)(v2 + 120);
    if ((unint64_t)v4 >= v15)
    {
      unint64_t v18 = v14 + 1;
      unint64_t v17 = (void *)(v2 + 32);
      if ((unint64_t)(v14 + 1) >> 61) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v19 = v15 - v3;
      if (v19 >> 2 > v18) {
        unint64_t v18 = v19 >> 2;
      }
      if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v20 = v18;
      }
      if (v20)
      {
        unint64_t v20 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<RateMarker>>(v20);
        uint64_t v22 = v82;
      }
      else
      {
        uint64_t v21 = 0;
        uint64_t v22 = a2;
      }
      unint64_t v23 = (void *)(v20 + 8 * v14);
      unint64_t v24 = v20 + 8 * v21;
      *unint64_t v23 = v22;
      unint64_t v16 = v23 + 1;
      uint64_t v26 = *(char **)(v2 + 104);
      uint64_t v25 = *(char **)(v2 + 112);
      if (v25 != v26)
      {
        do
        {
          uint64_t v27 = *((void *)v25 - 1);
          v25 -= 8;
          *--unint64_t v23 = v27;
        }
        while (v25 != v26);
        uint64_t v25 = *(char **)(v2 + 104);
      }
      *(void *)(v2 + 104) = v23;
      *(void *)(v2 + 112) = v16;
      *(void *)(v2 + 120) = v24;
      if (v25) {
        operator delete(v25);
      }
    }
    else
    {
      *float v4 = a2;
      unint64_t v16 = v4 + 1;
      unint64_t v17 = (void *)(v2 + 32);
    }
    *(void *)(v2 + 112) = v16;
    unint64_t v28 = fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc::operator()((uint64_t *)(v2 + 80), v14);
    unint64_t v29 = v28;
    unint64_t v30 = *(void *)(v2 + 40);
    if (v30)
    {
      uint8x8_t v31 = (uint8x8_t)vcnt_s8((int8x8_t)v30);
      v31.i16[0] = vaddlv_u8(v31);
      unint64_t v32 = v31.u32[0];
      if (v31.u32[0] > 1uLL)
      {
        unint64_t v3 = v28;
        if (v28 >= v30) {
          unint64_t v3 = v28 % v30;
        }
      }
      else
      {
        unint64_t v3 = (v30 - 1) & v28;
      }
      uint64_t v33 = *(uint64_t ***)(*v17 + 8 * v3);
      if (v33)
      {
        for (unint64_t i = *v33; i; unint64_t i = (uint64_t *)*i)
        {
          unint64_t v35 = i[1];
          if (v35 == v29)
          {
            if (fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual::operator()((uint64_t *)(v2 + 96), *((_DWORD *)i + 4), v14))
            {
              uint64_t v72 = a1;
              goto LABEL_73;
            }
          }
          else
          {
            if (v32 > 1)
            {
              if (v35 >= v30) {
                v35 %= v30;
              }
            }
            else
            {
              v35 &= v30 - 1;
            }
            if (v35 != v3) {
              break;
            }
          }
        }
        unint64_t v17 = (void *)(v2 + 32);
      }
    }
    uint64_t v36 = fst::PoolAllocator<std::__hash_node<int,void *>>::allocate((uint64_t *)(v2 + 64));
    *(void *)uint64_t v36 = 0;
    *(void *)(v36 + 8) = v29;
    *(_DWORD *)(v36 + 16) = v14;
    float v37 = (float)(unint64_t)(*(void *)(v2 + 72) + 1);
    float v38 = *(float *)(v2 + 88);
    if (!v30 || (float)(v38 * (float)v30) < v37)
    {
      BOOL v39 = 1;
      if (v30 >= 3) {
        BOOL v39 = (v30 & (v30 - 1)) != 0;
      }
      unint64_t v40 = v39 | (2 * v30);
      unint64_t v41 = vcvtps_u32_f32(v37 / v38);
      if (v40 <= v41) {
        size_t v42 = v41;
      }
      else {
        size_t v42 = v40;
      }
      std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,fst::PoolAllocator<int>>::__rehash<true>((uint64_t)v17, v42);
      unint64_t v30 = *(void *)(v2 + 40);
      if ((v30 & (v30 - 1)) != 0)
      {
        if (v29 >= v30) {
          unint64_t v3 = v29 % v30;
        }
        else {
          unint64_t v3 = v29;
        }
      }
      else
      {
        unint64_t v3 = (v30 - 1) & v29;
      }
    }
    char v43 = *(uint64_t **)(*v17 + 8 * v3);
    if (v43)
    {
      *(void *)uint64_t v36 = *v43;
      uint64_t v72 = a1;
    }
    else
    {
      *(void *)uint64_t v36 = *(void *)(v2 + 56);
      *(void *)(v2 + 56) = v36;
      *(void *)(*(void *)(v2 + 32) + 8 * v3) = v2 + 56;
      uint64_t v72 = a1;
      if (!*(void *)v36)
      {
LABEL_72:
        ++*(void *)(v2 + 72);
        goto LABEL_73;
      }
      unint64_t v44 = *(void *)(*(void *)v36 + 8);
      if ((v30 & (v30 - 1)) != 0)
      {
        if (v44 >= v30) {
          v44 %= v30;
        }
      }
      else
      {
        v44 &= v30 - 1;
      }
      char v43 = (uint64_t *)(*v17 + 8 * v44);
    }
    *char v43 = v36;
    goto LABEL_72;
  }
  while (1)
  {
    unint64_t v13 = v12[1];
    if (v13 == v7) {
      break;
    }
    if (v9 > 1)
    {
      if (v13 >= *(void *)&v6) {
        v13 %= *(void *)&v6;
      }
    }
    else
    {
      v13 &= *(void *)&v6 - 1;
    }
    if (v13 != v10) {
      goto LABEL_17;
    }
LABEL_16:
    uint64_t v12 = (uint64_t *)*v12;
    if (!v12) {
      goto LABEL_17;
    }
  }
  uint64_t v14 = *((unsigned int *)v12 + 4);
  if (!fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual::operator()((uint64_t *)(v2 + 96), *((_DWORD *)v12 + 4), -1))goto LABEL_16; {
  uint64_t v72 = a1;
  }
  unint64_t v73 = (unint64_t)v4 - v3;
LABEL_73:
  if (v14 != (v73 >> 3))
  {
    int v45 = v82;
    if (v82)
    {
      char v46 = *v82;
      if (*v82)
      {
        do
        {
          uint64_t v47 = (void *)*v46;
          operator delete(v46);
          char v46 = v47;
        }
        while (v47);
      }
      void *v45 = 0;
      MEMORY[0x2105595E0](v45, 0x1020C405F07FB98);
    }
  }
  int v48 = *(void **)(v72 + 152);
  if (v48)
  {
    float v49 = *(float ***)(v72 + 160);
    float v50 = v49[1];
    unint64_t v51 = v50 - *v49;
    if (v51 <= (int)v14)
    {
      float v52 = (float *)*a2;
      if (*a2)
      {
        uint64_t v54 = v48;
        uint64_t v53 = *v48;
        unint64_t v55 = (v54[1] - v53) >> 2;
        float v56 = INFINITY;
        do
        {
          unint64_t v57 = *((int *)v52 + 2);
          if (v55 <= v57) {
            float v58 = INFINITY;
          }
          else {
            float v58 = *(float *)(v53 + 4 * v57);
          }
          float v59 = v52[3];
          float v60 = NAN;
          if (v59 != -INFINITY && v58 != -INFINITY)
          {
            float v60 = INFINITY;
            BOOL v61 = v59 == INFINITY || v58 == INFINITY;
            float v62 = v58 + v59;
            if (!v61) {
              float v60 = v62;
            }
          }
          if (v56 >= v60) {
            float v63 = v60;
          }
          else {
            float v63 = v56;
          }
          if (v60 == -INFINITY || v56 == -INFINITY) {
            float v56 = NAN;
          }
          else {
            float v56 = v63;
          }
          float v52 = *(float **)v52;
        }
        while (v52);
      }
      else
      {
        float v56 = INFINITY;
      }
      unint64_t v66 = (unint64_t)v49[2];
      if ((unint64_t)v50 >= v66)
      {
        if ((v51 + 1) >> 62) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v68 = v66 - (void)*v49;
        uint64_t v69 = v68 >> 1;
        if (v68 >> 1 <= v51 + 1) {
          uint64_t v69 = v51 + 1;
        }
        if ((unint64_t)v68 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v70 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v70 = v69;
        }
        if (v70) {
          unint64_t v70 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::TropicalWeightTpl<float>>>(v70);
        }
        else {
          uint64_t v71 = 0;
        }
        unint64_t v74 = (float *)(v70 + 4 * v51);
        unint64_t v75 = v70 + 4 * v71;
        *unint64_t v74 = v56;
        uint64_t v67 = v74 + 1;
        float v77 = *v49;
        float v76 = v49[1];
        if (v76 != *v49)
        {
          do
          {
            int v78 = *((_DWORD *)v76-- - 1);
            *((_DWORD *)v74-- - 1) = v78;
          }
          while (v76 != v77);
          float v76 = *v49;
        }
        char *v49 = v74;
        v49[1] = v67;
        v49[2] = (float *)v75;
        if (v76) {
          operator delete(v76);
        }
      }
      else
      {
        *float v50 = v56;
        uint64_t v67 = v50 + 1;
      }
      v49[1] = v67;
    }
  }
  return v14;
}

void sub_20D41689C(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<fst::PoolAllocator<std::__hash_node<int,void *>>>::operator()[abi:ne180100](v2, v1);
  _Unwind_Resume(a1);
}

unint64_t fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc::operator()(uint64_t *a1, int a2)
{
  if (a2 < -1) {
    return 0;
  }
  uint64_t v2 = *a1;
  if (a2 == -1) {
    unint64_t v3 = *(uint64_t ****)(v2 + 120);
  }
  else {
    unint64_t v3 = (uint64_t ***)(*(void *)(v2 + 96) + 8 * a2);
  }
  unint64_t v5 = *v3;
  for (unint64_t result = *((char *)v5 + 8);
        ;
        result ^= (2 * result) ^ (32 * *((int *)v5 + 2)) ^ ((unint64_t)*((int *)v5 + 2) >> 59) ^ *((unsigned int *)v5 + 3))
  {
    unint64_t v5 = (uint64_t **)*v5;
    if (!v5) {
      break;
    }
  }
  return result;
}

BOOL fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual::operator()(uint64_t *a1, int a2, int a3)
{
  if (a2 < -1 || a3 < -1) {
    return a2 == a3;
  }
  uint64_t v3 = *a1;
  if (a2 == -1) {
    float v4 = *(uint64_t ***)(v3 + 120);
  }
  else {
    float v4 = (uint64_t **)(*(void *)(v3 + 96) + 8 * a2);
  }
  int8x8_t v6 = *v4;
  if (a3 == -1) {
    unint64_t v7 = *(uint64_t ***)(v3 + 120);
  }
  else {
    unint64_t v7 = (uint64_t **)(*(void *)(v3 + 96) + 8 * a3);
  }
  uint8x8_t v8 = *v7;
  if (*((unsigned __int8 *)v8 + 8) != *((unsigned __int8 *)v6 + 8)) {
    return 0;
  }
  while (1)
  {
    uint8x8_t v8 = (uint64_t *)*v8;
    int8x8_t v6 = (uint64_t *)*v6;
    if (!v8 || v6 == 0) {
      break;
    }
    if (*((_DWORD *)v8 + 2) != *((_DWORD *)v6 + 2) || *((float *)v8 + 3) != *((float *)v6 + 3)) {
      return 0;
    }
  }
  return (v8 != 0) ^ (v6 == 0);
}

uint64_t fst::PoolAllocator<std::__hash_node<int,void *>>::allocate(uint64_t *a1)
{
  uint64_t v1 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node<int,void *>>::TN<1>>(*a1);
  uint64_t v2 = v1;
  uint64_t v3 = *(void *)(v1 + 56);
  if (v3)
  {
    *(void *)(v1 + 56) = *(void *)(v3 + 24);
  }
  else
  {
    unint64_t v4 = *(void *)(v1 + 16);
    if (v4 <= 0x7F) {
      operator new[]();
    }
    uint64_t v5 = *(void *)(v2 + 24);
    if (v5 + 32 > v4) {
      operator new[]();
    }
    uint64_t v3 = *(void *)(*(void *)(v2 + 40) + 16) + v5;
    *(void *)(v2 + ++*(void *)(result + 24) = v5 + 32;
    *(void *)(v3 + ++*(void *)(result + 24) = 0;
  }
  return v3;
}

uint64_t *std::__hash_node_destructor<fst::PoolAllocator<std::__hash_node<int,void *>>>::operator()[abi:ne180100](uint64_t *result, uint64_t a2)
{
  if (a2)
  {
    unint64_t result = (uint64_t *)fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node<int,void *>>::TN<1>>(*result);
    *(void *)(a2 + ++*(void *)(result + 24) = result[7];
    result[7] = a2;
  }
  return result;
}

void fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>>::Expand(uint64_t a1, int a2)
{
  uint64_t v105 = 0;
  uint64_t v106 = 0;
  unint64_t v104 = &v105;
  uint64_t v2 = **(float ***)(*(void *)(*(void *)(a1 + 184) + 104) + 8 * a2);
  if (!v2) {
    goto LABEL_166;
  }
  do
  {
    uint64_t v3 = *(void *)(a1 + 136);
    uint64_t v4 = *((unsigned int *)v2 + 2);
    unint64_t v110 = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)v3 + 136))(v3, v4, &v107);
    while (1)
    {
      if (!v107)
      {
        unint64_t v7 = v110;
        if ((unint64_t)v110 >= v108.i64[1]) {
          goto LABEL_39;
        }
        goto LABEL_10;
      }
      if ((*(unsigned int (**)(uint64_t))(*(void *)v107 + 24))(v107)) {
        break;
      }
      if (!v107)
      {
        unint64_t v7 = v110;
LABEL_10:
        uint64_t v6 = v108.i64[0] + 16 * (void)v7;
        goto LABEL_11;
      }
      uint64_t v6 = (*(uint64_t (**)(void))(*(void *)v107 + 32))();
LABEL_11:
      float v8 = v2[3];
      float v9 = NAN;
      if (v8 != -INFINITY)
      {
        float v10 = *(float *)(v6 + 8);
        float v9 = NAN;
        if (v10 != -INFINITY)
        {
          BOOL v11 = v10 == INFINITY || v8 == INFINITY;
          float v12 = v8 + v10;
          if (v11) {
            float v9 = INFINITY;
          }
          else {
            float v9 = v12;
          }
        }
      }
      int v13 = *(_DWORD *)(v6 + 12);
      uint64_t v14 = v105;
      unint64_t v15 = &v105;
      unint64_t v16 = &v105;
      if (v105)
      {
        int v17 = *(_DWORD *)v6;
        while (1)
        {
          while (1)
          {
            unint64_t v16 = (uint64_t **)v14;
            int v18 = *((_DWORD *)v14 + 8);
            if (v17 >= v18) {
              break;
            }
            uint64_t v14 = *v16;
            unint64_t v15 = v16;
            if (!*v16) {
              goto LABEL_27;
            }
          }
          if (v18 >= v17) {
            break;
          }
          uint64_t v14 = v16[1];
          if (!v14)
          {
            unint64_t v15 = v16 + 1;
            goto LABEL_27;
          }
        }
        uint64_t v19 = v16;
      }
      else
      {
LABEL_27:
        uint64_t v19 = operator new(0x38uLL);
        v19[8] = *(_DWORD *)v6;
        *((void *)v19 + 5) = 0x7F800000FFFFFFFFLL;
        *((void *)v19 + 6) = 0;
        *(void *)uint64_t v19 = 0;
        *((void *)v19 + 1) = 0;
        *((void *)v19 + 2) = v16;
        *unint64_t v15 = (uint64_t *)v19;
        unint64_t v20 = (uint64_t *)v19;
        if (*v104)
        {
          unint64_t v104 = (uint64_t **)*v104;
          unint64_t v20 = *v15;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v105, v20);
        ++v106;
      }
      if (v19[10] == -1) {
        operator new();
      }
      uint64_t v21 = (float **)*((void *)v19 + 6);
      uint64_t v22 = *v21;
      unint64_t v23 = (float *)operator new(0x10uLL);
      *(void *)unint64_t v23 = v22;
      *((_DWORD *)v23 + 2) = v13;
      v23[3] = v9;
      *uint64_t v21 = v23;
      if (v107) {
        (*(void (**)(uint64_t))(*(void *)v107 + 40))(v107);
      }
      else {
        unint64_t v110 = (void *)((char *)v110 + 1);
      }
    }
    if (v107)
    {
      (*(void (**)(void))(*(void *)v107 + 8))();
      goto LABEL_41;
    }
LABEL_39:
    if (v109) {
      --*v109;
    }
LABEL_41:
    uint64_t v2 = *(float **)v2;
  }
  while (v2);
  unint64_t v24 = v104;
  if (v104 == &v105) {
    goto LABEL_166;
  }
  do
  {
    uint64_t v25 = v24[6];
    if (!*v25)
    {
      uint64_t *v25 = 0;
      goto LABEL_77;
    }
    uint64_t v26 = 0;
    uint64_t v27 = (void *)*v25;
    do
    {
      ++v26;
      uint64_t v27 = (void *)*v27;
    }
    while (v27);
    unint64_t v28 = (float *)std::forward_list<fst::DeterminizeElement<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::__sort<std::__less<void,void>>((_DWORD *)*v25, v26);
    uint64_t *v25 = (uint64_t)v28;
    unint64_t v29 = v28;
    if (!v28) {
      goto LABEL_77;
    }
    do
    {
      float v30 = *((float *)v24 + 11);
      int v31 = 2143289344;
      if (v30 != -INFINITY)
      {
        float v32 = v29[3];
        int v31 = 2143289344;
        if (v32 != -INFINITY)
        {
          if (v30 >= v32) {
            int v31 = *((_DWORD *)v29 + 3);
          }
          else {
            int v31 = *((_DWORD *)v24 + 11);
          }
        }
      }
      *((_DWORD *)v24 + 11) = v31;
      if (v28 == v29 || *((_DWORD *)v29 + 2) != *((_DWORD *)v28 + 2))
      {
        unint64_t v35 = *(float **)v29;
        unint64_t v28 = v29;
        goto LABEL_65;
      }
      float v33 = v28[3];
      if (v33 == -INFINITY || (float v34 = v29[3], v34 >= -INFINITY) && v34 <= -INFINITY)
      {
        v28[3] = NAN;
      }
      else
      {
        if (v33 >= v34) {
          float v33 = v29[3];
        }
        v28[3] = v33;
        if (v33 < -INFINITY || v33 > -INFINITY) {
          goto LABEL_64;
        }
      }
      *(void *)(a1 + 8) |= 4uLL;
LABEL_64:
      unint64_t v35 = *(float **)v29;
      uint64_t v36 = *(void **)v28;
      *(void *)unint64_t v28 = **(void **)v28;
      operator delete(v36);
LABEL_65:
      unint64_t v29 = v35;
    }
    while (v35);
    float v37 = (float *)*v25;
    if (*v25)
    {
      do
      {
        float v38 = v37[3];
        float v39 = NAN;
        if (v38 != -INFINITY)
        {
          if ((*((_DWORD *)v24 + 11) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
          {
            float v39 = INFINITY;
            if (v38 != INFINITY) {
              float v39 = v38 - *((float *)v24 + 11);
            }
          }
          else
          {
            float v39 = NAN;
          }
        }
        v37[3] = v39;
        if ((LODWORD(v39) & 0x7FFFFFFFu) <= 0x7F7FFFFF) {
          float v39 = *(float *)(a1 + 144) * floorf((float)(v39 / *(float *)(a1 + 144)) + 0.5);
        }
        v37[3] = v39;
        float v37 = *(float **)v37;
      }
      while (v37);
    }
LABEL_77:
    unint64_t v40 = v24[1];
    if (v40)
    {
      do
      {
        unint64_t v41 = (uint64_t **)v40;
        unint64_t v40 = (uint64_t *)*v40;
      }
      while (v40);
    }
    else
    {
      do
      {
        unint64_t v41 = (uint64_t **)v24[2];
        BOOL v11 = *v41 == (uint64_t *)v24;
        unint64_t v24 = v41;
      }
      while (!v11);
    }
    unint64_t v24 = v41;
  }
  while (v41 != &v105);
  size_t v42 = v104;
  if (v104 != &v105)
  {
    while (1)
    {
      *(void *)&long long v5 = v42[5];
      long long v102 = v5;
      int State = fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>>::FindState(a1, v42[6]);
      uint64_t MutableState = (void *)fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::GetMutableState(*(void *)(a1 + 120), a2);
      int v45 = MutableState;
      *((void *)&v5 + 1) = *((void *)&v102 + 1);
      unint64_t v46 = MutableState[4];
      unint64_t v47 = MutableState[5];
      if (v46 >= v47) {
        break;
      }
      *(_DWORD *)unint64_t v46 = v102;
      *(void *)(v46 + 4) = v102;
      int v48 = (void *)(v46 + 16);
      *(_DWORD *)(v46 + 12) = State;
LABEL_138:
      v45[4] = v48;
      int v78 = v42[1];
      if (v78)
      {
        do
        {
          float v79 = (uint64_t **)v78;
          int v78 = (uint64_t *)*v78;
        }
        while (v78);
      }
      else
      {
        do
        {
          float v79 = (uint64_t **)v42[2];
          BOOL v11 = *v79 == (uint64_t *)v42;
          size_t v42 = v79;
        }
        while (!v11);
      }
      size_t v42 = v79;
      if (v79 == &v105) {
        goto LABEL_166;
      }
    }
    uint64_t v49 = MutableState[3];
    uint64_t v50 = (uint64_t)(v46 - v49) >> 4;
    if ((unint64_t)(v50 + 1) >> 60) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v51 = MutableState + 6;
    uint64_t v52 = v47 - v49;
    uint64_t v53 = v52 >> 3;
    if (v52 >> 3 <= (unint64_t)(v50 + 1)) {
      uint64_t v53 = v50 + 1;
    }
    if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v54 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v54 = v53;
    }
    unint64_t v110 = MutableState + 6;
    if (v54)
    {
      if (v54 == 2)
      {
        uint64_t v59 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<2>>(*v51);
        float v56 = (void *)v59;
        unint64_t v57 = *(void **)(v59 + 56);
        if (!v57)
        {
          unint64_t v62 = *(void *)(v59 + 16);
          if (v62 <= 0x9F) {
            operator new[]();
          }
          uint64_t v65 = v56[3];
          if (v65 + 40 > v62) {
            operator new[]();
          }
          unint64_t v57 = (void *)(*(void *)(v56[5] + 16) + v65);
          v56[3] = v65 + 40;
          v57[4] = 0;
          goto LABEL_132;
        }
        uint64_t v58 = v57[4];
      }
      else
      {
        if (v54 == 1)
        {
          uint64_t v55 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<1>>(*v51);
          float v56 = (void *)v55;
          unint64_t v57 = *(void **)(v55 + 56);
          if (v57)
          {
            uint64_t v58 = v57[2];
            goto LABEL_131;
          }
          unint64_t v63 = *(void *)(v55 + 16);
          if (v63 <= 0x5F) {
            operator new[]();
          }
          uint64_t v67 = v56[3];
          if (v67 + 24 > v63) {
            operator new[]();
          }
          unint64_t v57 = (void *)(*(void *)(v56[5] + 16) + v67);
          v56[3] = v67 + 24;
          v57[2] = 0;
LABEL_132:
          uint64_t v72 = &v57[2 * v50];
          *(_DWORD *)uint64_t v72 = v102;
          *(void *)((char *)v72 + 4) = v102;
          *((_DWORD *)v72 + 3) = State;
          uint64_t v73 = v45[3];
          unint64_t v74 = v45[4];
          if (v74 == v73)
          {
            int64x2_t v76 = vdupq_n_s64(v74);
            unint64_t v75 = &v57[2 * v50];
          }
          else
          {
            unint64_t v75 = &v57[2 * v50];
            do
            {
              *((_OWORD *)v75 - 1) = *(_OWORD *)(v74 - 16);
              v75 -= 2;
              v74 -= 16;
            }
            while (v74 != v73);
            int64x2_t v76 = *(int64x2_t *)(v45 + 3);
          }
          int v48 = v72 + 2;
          v45[3] = v75;
          v45[4] = v72 + 2;
          int64x2_t v108 = v76;
          float v77 = (_DWORD *)v45[5];
          v45[5] = &v57[2 * v54];
          unint64_t v109 = v77;
          uint64_t v107 = v76.i64[0];
          std::__split_buffer<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> &>::~__split_buffer((uint64_t)&v107);
          goto LABEL_138;
        }
        if (v54 > 4)
        {
          if (v54 > 8)
          {
            if (v54 > 0x10)
            {
              if (v54 > 0x20)
              {
                if (v54 > 0x40)
                {
                  if (v54 >> 60) {
                    std::__throw_bad_array_new_length[abi:ne180100]();
                  }
                  unint64_t v57 = operator new(16 * v54);
                  goto LABEL_132;
                }
                uint64_t v71 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<64>>(*v51);
                float v56 = (void *)v71;
                unint64_t v57 = *(void **)(v71 + 56);
                if (!v57)
                {
                  unint64_t v84 = *(void *)(v71 + 16);
                  if (v84 >> 5 <= 0x80) {
                    operator new[]();
                  }
                  uint64_t v86 = v56[3];
                  if (v86 + 1032 > v84) {
                    operator new[]();
                  }
                  unint64_t v57 = (void *)(*(void *)(v56[5] + 16) + v86);
                  v56[3] = v86 + 1032;
                  v57[128] = 0;
                  goto LABEL_132;
                }
                uint64_t v58 = v57[128];
              }
              else
              {
                uint64_t v68 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<32>>(*v51);
                float v56 = (void *)v68;
                unint64_t v57 = *(void **)(v68 + 56);
                if (!v57)
                {
                  unint64_t v82 = *(void *)(v68 + 16);
                  if (v82 <= 0x81F) {
                    operator new[]();
                  }
                  uint64_t v85 = v56[3];
                  if (v85 + 520 > v82) {
                    operator new[]();
                  }
                  unint64_t v57 = (void *)(*(void *)(v56[5] + 16) + v85);
                  v56[3] = v85 + 520;
                  v57[64] = 0;
                  goto LABEL_132;
                }
                uint64_t v58 = v57[64];
              }
            }
            else
            {
              uint64_t v64 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<16>>(*v51);
              float v56 = (void *)v64;
              unint64_t v57 = *(void **)(v64 + 56);
              if (!v57)
              {
                unint64_t v80 = *(void *)(v64 + 16);
                if (v80 <= 0x41F) {
                  operator new[]();
                }
                uint64_t v83 = v56[3];
                if (v83 + 264 > v80) {
                  operator new[]();
                }
                unint64_t v57 = (void *)(*(void *)(v56[5] + 16) + v83);
                v56[3] = v83 + 264;
                v57[32] = 0;
                goto LABEL_132;
              }
              uint64_t v58 = v57[32];
            }
          }
          else
          {
            uint64_t v61 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<8>>(*v51);
            float v56 = (void *)v61;
            unint64_t v57 = *(void **)(v61 + 56);
            if (!v57)
            {
              unint64_t v69 = *(void *)(v61 + 16);
              if (v69 <= 0x21F) {
                operator new[]();
              }
              uint64_t v81 = v56[3];
              if (v81 + 136 > v69) {
                operator new[]();
              }
              unint64_t v57 = (void *)(*(void *)(v56[5] + 16) + v81);
              v56[3] = v81 + 136;
              v57[16] = 0;
              goto LABEL_132;
            }
            uint64_t v58 = v57[16];
          }
        }
        else
        {
          uint64_t v60 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<4>>(*v51);
          float v56 = (void *)v60;
          unint64_t v57 = *(void **)(v60 + 56);
          if (!v57)
          {
            unint64_t v66 = *(void *)(v60 + 16);
            if (v66 <= 0x11F) {
              operator new[]();
            }
            uint64_t v70 = v56[3];
            if (v70 + 72 > v66) {
              operator new[]();
            }
            unint64_t v57 = (void *)(*(void *)(v56[5] + 16) + v70);
            v56[3] = v70 + 72;
            v57[8] = 0;
            goto LABEL_132;
          }
          uint64_t v58 = v57[8];
        }
      }
LABEL_131:
      v56[7] = v58;
      goto LABEL_132;
    }
    unint64_t v57 = 0;
    goto LABEL_132;
  }
LABEL_166:
  uint64_t v87 = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::GetMutableState(*(void *)(a1 + 120), a2);
  uint64_t v88 = *(void *)(a1 + 120);
  uint64_t v89 = *(void *)(v87 + 24);
  uint64_t v90 = *(void *)(v87 + 32);
  uint64_t v91 = v90 - v89;
  if (v90 != v89)
  {
    uint64_t v92 = v91 >> 4;
    if ((unint64_t)(v91 >> 4) <= 1) {
      uint64_t v92 = 1;
    }
    int v93 = (_DWORD *)(v89 + 4);
    do
    {
      if (!*(v93 - 1)) {
        ++*(void *)(v87 + 8);
      }
      if (!*v93) {
        ++*(void *)(v87 + 16);
      }
      v93 += 4;
      --v92;
    }
    while (v92);
  }
  if (*(unsigned char *)(v88 + 120))
  {
    if ((*(unsigned char *)(v87 + 56) & 4) != 0)
    {
      unint64_t v94 = v91 + *(void *)(v88 + 128);
      *(void *)(v88 + 128) = v94;
      if (v94 > *(void *)(v88 + 112))
      {
        fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::GC(v88, v87, 0);
        uint64_t v89 = *(void *)(v87 + 24);
        uint64_t v90 = *(void *)(v87 + 32);
      }
    }
  }
  uint64_t v95 = v90 - v89;
  if (v95)
  {
    unint64_t v96 = v95 >> 4;
    int v97 = *(_DWORD *)(a1 + 68);
    if (v96 <= 1) {
      unint64_t v96 = 1;
    }
    unint64_t v98 = (int *)(v89 + 12);
    do
    {
      int v100 = *v98;
      v98 += 4;
      int v99 = v100;
      if (v100 >= v97)
      {
        int v97 = v99 + 1;
        *(_DWORD *)(a1 + 68) = v99 + 1;
      }
      --v96;
    }
    while (v96);
  }
  fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::SetExpandedState(a1, a2);
  *(_DWORD *)(v87 + 56) |= 0xAu;
  std::__tree<std::__value_type<unsigned long,std::pair<unsigned long,unsigned long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::pair<unsigned long,unsigned long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::pair<unsigned long,unsigned long>>>>::destroy(v105);
}

void sub_20D417980(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
}

void fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::SetExpandedState(uint64_t a1, int a2)
{
  if (*(_DWORD *)(a1 + 100) < a2) {
    *(_DWORD *)(a1 + 100) = a2;
  }
  int v3 = *(_DWORD *)(a1 + 96);
  if (v3 <= a2)
  {
    if (v3 == a2) {
      *(_DWORD *)(a1 + 96) = a2 + 1;
    }
    if (*(unsigned char *)(a1 + 104) || !*(void *)(a1 + 112))
    {
      uint64_t v4 = (void *)(a1 + 72);
      unint64_t v5 = a2;
      while (*(void *)(a1 + 80) <= v5)
      {
        char v6 = 0;
        std::vector<BOOL>::push_back(a1 + 72, &v6);
      }
      *(void *)(*v4 + ((v5 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v5;
    }
  }
}

_DWORD *std::forward_list<fst::DeterminizeElement<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::__sort<std::__less<void,void>>(_DWORD *result, uint64_t a2)
{
  if ((unint64_t)a2 >= 2)
  {
    if (a2 == 2)
    {
      uint64_t v2 = *(void **)result;
      if (*(_DWORD *)(*(void *)result + 8) < result[2])
      {
        void *v2 = result;
        *(void *)unint64_t result = 0;
        return v2;
      }
    }
    else
    {
      if (a2 >= 0) {
        uint64_t v4 = a2;
      }
      else {
        uint64_t v4 = a2 + 1;
      }
      uint64_t v5 = v4 >> 1;
      uint64_t v6 = a2 - (v4 >> 1);
      unint64_t v7 = result;
      if (a2 >= 4)
      {
        unint64_t v8 = v5;
        unint64_t v7 = result;
        do
        {
          --v8;
          unint64_t v7 = (void *)*v7;
        }
        while (v8 > 1);
      }
      float v9 = (void *)*v7;
      void *v7 = 0;
      uint64_t v10 = std::forward_list<fst::DeterminizeElement<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::__sort<std::__less<void,void>>(result, v5);
      unint64_t result = (_DWORD *)std::forward_list<fst::DeterminizeElement<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::__sort<std::__less<void,void>>(v9, v6);
      if (v10)
      {
        if (result)
        {
          int v11 = *(_DWORD *)(v10 + 8);
          if (result[2] >= v11)
          {
            float v12 = (uint64_t *)result;
            unint64_t result = (_DWORD *)v10;
          }
          else
          {
            float v12 = (uint64_t *)result;
            do
            {
              int v13 = v12;
              float v12 = (uint64_t *)*v12;
            }
            while (v12 && *((_DWORD *)v12 + 2) < v11);
            uint64_t *v13 = v10;
          }
          uint64_t v14 = *(void *)v10;
          BOOL v15 = v12 != 0;
          if (*(void *)v10) {
            BOOL v16 = v12 == 0;
          }
          else {
            BOOL v16 = 1;
          }
          if (!v16)
          {
            do
            {
              int v17 = (uint64_t *)v14;
              int v18 = *(_DWORD *)(v14 + 8);
              if (*((_DWORD *)v12 + 2) < v18)
              {
                uint64_t v19 = v12;
                do
                {
                  unint64_t v20 = (uint64_t **)v19;
                  uint64_t v19 = (uint64_t *)*v19;
                }
                while (v19 && *((_DWORD *)v19 + 2) < v18);
                *(void *)uint64_t v10 = v12;
                float v12 = *v20;
                *unint64_t v20 = v17;
              }
              uint64_t v14 = *v17;
              BOOL v15 = v12 != 0;
              if (*v17) {
                BOOL v21 = v12 == 0;
              }
              else {
                BOOL v21 = 1;
              }
              uint64_t v10 = (uint64_t)v17;
            }
            while (!v21);
            uint64_t v10 = (uint64_t)v17;
          }
          if (v15) {
            *(void *)uint64_t v10 = v12;
          }
        }
        else
        {
          return (_DWORD *)v10;
        }
      }
    }
  }
  return result;
}

void fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>>::Copy()
{
}

void sub_20D418004(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char a11, char a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a12);
  if (a18 < 0) {
    operator delete(__p);
  }
  fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~DeterminizeFstImplBase(v18);
  MEMORY[0x2105595E0](v18, 0x10F3C405CF36722);
  _Unwind_Resume(a1);
}

void fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::VectorCacheStore(uint64_t a1, char a2)
{
  *(unsigned char *)a1 = a2;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + ++*(void *)(result + 24) = 0;
  *(void *)(a1 + 32) = a1 + 32;
  *(void *)(a1 + 40) = a1 + 32;
  *(void *)(a1 + 48) = 0;
  operator new();
}

void sub_20D418230(_Unwind_Exception *a1)
{
  fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~PoolAllocator(v4);
  fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~PoolAllocator((fst::MemoryPoolCollection **)(v1 + 72));
  std::__list_imp<int,fst::PoolAllocator<int>>::clear(v2);
  fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~PoolAllocator((fst::MemoryPoolCollection **)(v1 + 56));
  uint64_t v6 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 16) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>>::Properties(uint64_t a1, uint64_t a2)
{
  if ((a2 & 4) != 0
    && (*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 136) + 64))(*(void *)(a1 + 136), 4, 0))
  {
    *(void *)(a1 + 8) |= 4uLL;
  }
  return *(void *)(a1 + 8) & a2;
}

uint64_t fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>>::Properties(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 0x3FFFFFFF0007);
}

void fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>>::~DeterminizeFsaImpl(void *a1)
{
  fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>>::~DeterminizeFsaImpl(a1);
  JUMPOUT(0x2105595E0);
}

uint64_t fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>>::~DeterminizeFsaImpl(void *a1)
{
  *a1 = off_26C208498;
  uint64_t v2 = (void *)a1[22];
  if (v2)
  {
    if (*v2) {
      (*(void (**)(void))(*(void *)*v2 + 8))(*v2);
    }
    MEMORY[0x2105595E0](v2, 0x20C4093837F09);
  }
  uint64_t v3 = a1[23];
  if (v3)
  {
    uint64_t v4 = *(void **)(v3 + 104);
    uint64_t v5 = *(void *)(v3 + 112);
    if ((int)((unint64_t)(v5 - (void)v4) >> 3) >= 1)
    {
      uint64_t v6 = 0;
      do
      {
        unint64_t v7 = (void **)v4[v6];
        if (v7)
        {
          unint64_t v8 = *v7;
          if (*v7)
          {
            do
            {
              float v9 = (void *)*v8;
              operator delete(v8);
              unint64_t v8 = v9;
            }
            while (v9);
          }
          void *v7 = 0;
          MEMORY[0x2105595E0](v7, 0x1020C405F07FB98);
          uint64_t v4 = *(void **)(v3 + 104);
          uint64_t v5 = *(void *)(v3 + 112);
        }
        ++v6;
      }
      while (v6 < (int)((unint64_t)(v5 - (void)v4) >> 3));
    }
    if (v4)
    {
      *(void *)(v3 + 112) = v4;
      operator delete(v4);
    }
    std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,fst::PoolAllocator<int>>::~__hash_table(v3 + 32);
    MEMORY[0x2105595E0](v3, 0x10E0C40FE6675DCLL);
  }
  return fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~DeterminizeFstImplBase(a1);
}

uint64_t fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::InitArcIterator(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = *(uint64_t **)(a1 + 8);
  uint64_t result = fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::HasArcs(v5[15], a2);
  if ((result & 1) == 0) {
    uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t))(*v5 + 48))(v5, a2);
  }
  uint64_t v7 = v5[15];
  if (*(_DWORD *)(v7 + 92) == a2) {
    unint64_t v8 = (uint64_t *)(v7 + 96);
  }
  else {
    unint64_t v8 = (uint64_t *)(*(void *)(v7 + 8) + 8 * ((int)a2 + 1));
  }
  uint64_t v9 = *v8;
  int v12 = *(_DWORD *)(v9 + 60);
  uint64_t v10 = (_DWORD *)(v9 + 60);
  int v11 = v12;
  uint64_t v13 = *(void *)(v10 - 9);
  uint64_t v14 = (*(void *)(v10 - 7) - v13) >> 4;
  if (*(void *)(v10 - 7) == v13) {
    uint64_t v13 = 0;
  }
  *a3 = 0;
  a3[1] = v13;
  a3[2] = v14;
  a3[3] = v10;
  *uint64_t v10 = v11 + 1;
  return result;
}

void fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::InitStateIterator()
{
}

void sub_20D41861C(_Unwind_Exception *a1)
{
  MEMORY[0x2105595E0](v1, 0x10E1C408BA93049);
  _Unwind_Resume(a1);
}

uint64_t fst::CacheStateIterator<fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Reset_(uint64_t result)
{
  *(_DWORD *)(result + ++*(void *)(result + 24) = 0;
  return result;
}

uint64_t fst::CacheStateIterator<fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Next_(uint64_t result)
{
  return result;
}

uint64_t fst::CacheStateIterator<fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Value_(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

BOOL fst::CacheStateIterator<fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Done_(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 16);
  if (v2 < *(_DWORD *)(v3 + 68)) {
    return 0;
  }
  unint64_t v5 = fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::MinUnexpandedState(v3);
  if ((int)v5 >= *(_DWORD *)(*(void *)(a1 + 16) + 68)) {
    return 1;
  }
  unint64_t v6 = v5;
  while (1)
  {
    uint64_t v7 = *(void *)(a1 + 8);
    uint64_t MutableState = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::GetMutableState(*(void *)(*(void *)(v7 + 8) + 120), v6);
    ++*(_DWORD *)(MutableState + 60);
    if ((fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::HasArcs(*(void *)(*(void *)(v7 + 8) + 120), v6) & 1) == 0)(*(void (**)(void, unint64_t))(**(void **)(v7 + 8) + 48))(*(void *)(v7 + 8), v6); {
    uint64_t v9 = *(void *)(MutableState + 24);
    }
    uint64_t v10 = *(void *)(a1 + 16);
    uint64_t v11 = *(void *)(MutableState + 32) - v9;
    if (v11)
    {
      uint64_t v12 = v11 >> 4;
      int v13 = *(_DWORD *)(v10 + 68);
      uint64_t v14 = (int *)(v9 + 12);
      do
      {
        int v16 = *v14;
        v14 += 4;
        int v15 = v16;
        if (v13 <= v16)
        {
          int v13 = v15 + 1;
          *(_DWORD *)(v10 + 68) = v15 + 1;
        }
        --v12;
      }
      while (v12);
    }
    fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::SetExpandedState(v10, v6);
    int v17 = *(_DWORD *)(a1 + 24);
    uint64_t v18 = *(void *)(a1 + 16);
    int v19 = *(_DWORD *)(v18 + 68);
    --*(_DWORD *)(MutableState + 60);
    BOOL result = v17 >= v19;
    if (v17 < v19) {
      break;
    }
    unint64_t v6 = fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::MinUnexpandedState(v18);
    if ((int)v6 >= *(_DWORD *)(*(void *)(a1 + 16) + 68)) {
      return 1;
    }
  }
  return result;
}

void sub_20D4187A4(_Unwind_Exception *a1)
{
  --*(_DWORD *)(v1 + 60);
  _Unwind_Resume(a1);
}

unint64_t fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::MinUnexpandedState(uint64_t a1)
{
  unint64_t v2 = *(unsigned int *)(a1 + 96);
  int v3 = *(_DWORD *)(a1 + 100);
  unint64_t result = v2;
  if ((int)v2 <= v3)
  {
    unint64_t result = (int)v2;
    int v5 = *(unsigned __int8 *)(a1 + 104);
    uint64_t v6 = (v3 + 1);
    uint64_t v7 = 8 * result + 8;
    do
    {
      if (v5 || !*(void *)(a1 + 112))
      {
        if (((*(void *)(*(void *)(a1 + 72) + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) >> result) & 1) == 0) {
          return result;
        }
      }
      else
      {
        if (!*(unsigned char *)(a1 + 128)) {
          return result;
        }
        uint64_t v8 = *(void *)(a1 + 120);
        if (result == *(_DWORD *)(v8 + 92))
        {
          uint64_t v9 = (void *)(v8 + 96);
        }
        else
        {
          uint64_t v11 = v8 + 8;
          uint64_t v10 = *(void *)(v8 + 8);
          if (result + 1 >= (*(void *)(v11 + 8) - v10) >> 3) {
            return result;
          }
          uint64_t v9 = (void *)(v10 + v7);
        }
        if (!*v9) {
          return result;
        }
      }
      *(_DWORD *)(a1 + 96) = result + 1;
      v7 += 8;
      ++result;
    }
    while (v6 != result);
    return v6;
  }
  return result;
}

void fst::StateIterator<fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::~StateIterator()
{
}

void fst::CacheStateIterator<fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::~CacheStateIterator()
{
}

void fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Copy()
{
}

void sub_20D418988(_Unwind_Exception *a1)
{
  int v3 = fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::~ImplToFst(v1);
  MEMORY[0x2105595E0](v3, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

void fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~DeterminizeFst(void *a1)
{
  fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::~ImplToFst(a1);
  JUMPOUT(0x2105595E0);
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,fst::ShortestPathCompare<int,fst::TropicalWeightTpl<float>> &,std::__wrap_iter<int *>>(uint64_t result, uint64_t a2, uint64_t **a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    uint64_t v6 = result;
    unint64_t v7 = v4 >> 1;
    uint64_t v8 = (int *)(result + 4 * (v4 >> 1));
    int v9 = *v8;
    uint64_t v11 = (int *)(a2 - 4);
    int v10 = *(_DWORD *)(a2 - 4);
    unint64_t result = fst::ShortestPathCompare<int,fst::TropicalWeightTpl<float>>::operator()(a3, *v8, v10);
    if (result)
    {
      do
      {
        uint64_t v12 = v8;
        int *v11 = v9;
        if (!v7) {
          break;
        }
        unint64_t v7 = (v7 - 1) >> 1;
        uint64_t v8 = (int *)(v6 + 4 * v7);
        int v9 = *v8;
        unint64_t result = fst::ShortestPathCompare<int,fst::TropicalWeightTpl<float>>::operator()(a3, *v8, v10);
        uint64_t v11 = v12;
      }
      while ((result & 1) != 0);
      int *v12 = v10;
    }
  }
  return result;
}

uint64_t fst::ShortestPathCompare<int,fst::TropicalWeightTpl<float>>::operator()(uint64_t **a1, int a2, int a3)
{
  uint64_t v4 = **a1;
  unint64_t v5 = *(int *)(v4 + 8 * a2);
  int v6 = *((_DWORD *)a1 + 4);
  float v7 = 0.0;
  float v8 = 0.0;
  if (v5 != v6)
  {
    uint64_t v9 = *a1[1];
    if (v5 >= (a1[1][1] - v9) >> 2) {
      float v8 = INFINITY;
    }
    else {
      float v8 = *(float *)(v9 + 4 * v5);
    }
  }
  unint64_t v10 = *(int *)(v4 + 8 * a3);
  if (v10 != v6)
  {
    uint64_t v11 = *a1[1];
    if (v10 >= (a1[1][1] - v11) >> 2) {
      float v7 = INFINITY;
    }
    else {
      float v7 = *(float *)(v11 + 4 * v10);
    }
  }
  float v12 = NAN;
  if (v8 != -INFINITY)
  {
    float v13 = *(float *)(v4 + 8 * a2 + 4);
    float v12 = NAN;
    if (v13 != -INFINITY)
    {
      BOOL v14 = v13 == INFINITY || v8 == INFINITY;
      float v15 = v8 + v13;
      if (v14) {
        float v12 = INFINITY;
      }
      else {
        float v12 = v15;
      }
    }
  }
  float v16 = NAN;
  if (v7 != -INFINITY)
  {
    float v17 = *(float *)(v4 + 8 * a3 + 4);
    float v16 = NAN;
    if (v17 != -INFINITY)
    {
      BOOL v18 = v17 == INFINITY || v7 == INFINITY;
      float v19 = v7 + v17;
      if (v18) {
        float v16 = INFINITY;
      }
      else {
        float v16 = v19;
      }
    }
  }
  if (v5 != v6 || v10 == v6)
  {
    LODWORD(result) = fst::NaturalLess<fst::TropicalWeightTpl<float>>::operator()(v16, v12);
    int v22 = result;
    BOOL v23 = v5 != v6 && v10 == v6;
    if (v23) {
      uint64_t result = 0;
    }
    else {
      uint64_t result = result;
    }
    if (v23 && v22)
    {
      float v24 = *((float *)a1 + 5);
      return v12 > (float)(v24 + v16) || v16 > (float)(v24 + v12);
    }
  }
  else if (fst::NaturalLess<fst::TropicalWeightTpl<float>>::operator()(v16, v12))
  {
    return 1;
  }
  else
  {
    float v25 = *((float *)a1 + 5);
    return v12 <= (float)(v25 + v16) && v16 <= (float)(v25 + v12);
  }
  return result;
}

void *fst::ImplToFst<fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~ImplToFst(void *a1)
{
  *a1 = off_26C208F08;
  unint64_t v2 = (_DWORD *)a1[1];
  if (v2)
  {
    int v3 = v2[14] - 1;
    v2[14] = v3;
    if (!v3) {
      (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
    }
  }
  return a1;
}

void fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::CreateBase2<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>()
{
}

void sub_20D419330(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0) {
    operator delete(__p);
  }
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~CacheBaseImpl(v18);
  MEMORY[0x2105595E0](v18, 0x10F3C405A371F01);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::ComposeFstImplBase(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = off_26C2088C8;
  *(void *)(a1 + 8) = 0;
  float v8 = (std::string *)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 16), "null");
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(void *)a1 = off_26C207978;
  *(unsigned char *)(a1 + 60) = 0;
  *(_DWORD *)(a1 + 64) = -1;
  *(_OWORD *)(a1 + 68) = 0u;
  *(_OWORD *)(a1 + 84) = 0u;
  *(_DWORD *)(a1 + 100) = -1;
  *(unsigned char *)(a1 + 104) = *(unsigned char *)a4;
  *(void *)(a1 + 112) = *(void *)(a4 + 8);
  uint64_t v9 = *(void *)(a4 + 16);
  if (!v9) {
    operator new();
  }
  *(void *)(a1 + 120) = v9;
  *(unsigned char *)(a1 + 128) = v9 == 0;
  *(void *)a1 = off_26C208438;
  std::string::basic_string[abi:ne180100]<0>(&__str, "compose");
  std::string::operator=(v8, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 112))(a3);
  uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 120))(a2);
  if (FLAGS_fst_compat_symbols)
  {
    if (v10)
    {
      uint64_t v12 = v11;
      if (v11)
      {
        (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)v10 + 64))(&__str, v10);
        (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v12 + 64))(__p, v12);
        char v13 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = __str.__r_.__value_.__l.__size_;
        }
        unint64_t v15 = v36;
        int v16 = (char)v36;
        if ((v36 & 0x80u) != 0) {
          unint64_t v15 = (unint64_t)__p[1];
        }
        if (size != v15)
        {
          BOOL v23 = 1;
          if (((char)v36 & 0x80000000) == 0) {
            goto LABEL_30;
          }
          goto LABEL_34;
        }
        if ((v36 & 0x80u) == 0) {
          float v17 = __p;
        }
        else {
          float v17 = (void **)__p[0];
        }
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        {
          BOOL v23 = memcmp(__str.__r_.__value_.__l.__data_, v17, __str.__r_.__value_.__l.__size_) != 0;
        }
        else
        {
          if (!*((unsigned char *)&__str.__r_.__value_.__s + 23))
          {
            BOOL v23 = 0;
            if (((char)v36 & 0x80000000) == 0)
            {
LABEL_30:
              if ((v13 & 0x80) == 0) {
                goto LABEL_31;
              }
              goto LABEL_35;
            }
LABEL_34:
            operator delete(__p[0]);
            if ((*((unsigned char *)&__str.__r_.__value_.__s + 23) & 0x80) == 0)
            {
LABEL_31:
              if (!v23) {
                goto LABEL_44;
              }
LABEL_36:
              std::string::basic_string[abi:ne180100]<0>(&__str, "WARNING");
              float v25 = fst::LogMessage::LogMessage((fst *)__p, (uint64_t)&__str);
              uint64_t v26 = (void *)fst::cerr(v25);
              uint64_t v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"CompatSymbols: Symbol table check sums do not match. ", 53);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"Table sizes are ", 16);
              (*(void (**)(uint64_t))(*(void *)v10 + 120))(v10);
              unint64_t v28 = (void *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)" and ", 5);
              (*(void (**)(uint64_t))(*(void *)v12 + 120))(v12);
              std::ostream::operator<<();
              fst::LogMessage::~LogMessage((fst::LogMessage *)__p);
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__str.__r_.__value_.__l.__data_);
              }
              if (FLAGS_fst_error_fatal) {
                std::string::basic_string[abi:ne180100]<0>(&__str, "FATAL");
              }
              else {
                std::string::basic_string[abi:ne180100]<0>(&__str, "ERROR");
              }
              unint64_t v29 = fst::LogMessage::LogMessage((fst *)__p, (uint64_t)&__str);
              float v30 = (void *)fst::cerr(v29);
              int v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"ComposeFst: output symbol table of 1st argument ", 48);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"does not match input symbol table of 2nd argument", 49);
              fst::LogMessage::~LogMessage((fst::LogMessage *)__p);
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__str.__r_.__value_.__l.__data_);
              }
              *(void *)(a1 + 8) |= 4uLL;
              goto LABEL_44;
            }
LABEL_35:
            operator delete(__str.__r_.__value_.__l.__data_);
            if (!v23) {
              goto LABEL_44;
            }
            goto LABEL_36;
          }
          uint64_t v18 = HIBYTE(__str.__r_.__value_.__r.__words[2]) - 1;
          p_str = &__str;
          do
          {
            int v21 = p_str->__r_.__value_.__s.__data_[0];
            p_str = (std::string *)((char *)p_str + 1);
            int v20 = v21;
            int v22 = *(unsigned __int8 *)v17;
            float v17 = (void **)((char *)v17 + 1);
            BOOL v23 = v20 != v22;
          }
          while (v20 == v22 && v18-- != 0);
        }
        if ((v16 & 0x80000000) == 0) {
          goto LABEL_30;
        }
        goto LABEL_34;
      }
    }
  }
LABEL_44:
  uint64_t v32 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 112))(a2);
  fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::SetInputSymbols(a1, v32);
  uint64_t v33 = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 120))(a3);
  fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::SetOutputSymbols(a1, v33);
  return a1;
}

void sub_20D419938(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a9);
  if (a17 < 0) {
    operator delete(__p);
  }
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~CacheBaseImpl(v17);
  _Unwind_Resume(a1);
}

void std::unordered_set<int,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::HashFunc,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::HashEqual,fst::PoolAllocator<int>>::unordered_set()
{
}

void sub_20D419AB4(_Unwind_Exception *a1)
{
  std::__hash_table<int,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::HashFunc,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::HashEqual,fst::PoolAllocator<int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~CacheBaseImpl(void *a1)
{
  *a1 = off_26C207978;
  uint64_t v2 = a1[15];
  if (v2)
  {
    fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Clear((void *)a1[15]);
    fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~PoolAllocator((fst::MemoryPoolCollection **)(v2 + 80));
    fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~PoolAllocator((fst::MemoryPoolCollection **)(v2 + 72));
    std::__list_imp<int,fst::PoolAllocator<int>>::clear((uint64_t *)(v2 + 32));
    fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~PoolAllocator((fst::MemoryPoolCollection **)(v2 + 56));
    int v3 = *(void **)(v2 + 8);
    if (v3)
    {
      *(void *)(v2 + 16) = v3;
      operator delete(v3);
    }
    MEMORY[0x2105595E0](v2, 0x10A0C40690396FALL);
  }
  uint64_t v4 = (void *)a1[9];
  if (v4) {
    operator delete(v4);
  }
  return fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::~FstImpl((uint64_t)a1);
}

uint64_t *fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Clear(void *a1)
{
  uint64_t v2 = a1[2];
  if (v2 != a1[1])
  {
    unint64_t v3 = 0;
    uint64_t v2 = a1[1];
    do
    {
      fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Destroy(*(void *)(v2 + 8 * v3++), a1 + 9);
      uint64_t v2 = a1[1];
    }
    while (v3 < (a1[2] - v2) >> 3);
  }
  a1[2] = v2;
  return std::__list_imp<int,fst::PoolAllocator<int>>::clear(a1 + 4);
}

uint64_t fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Destroy(uint64_t result, uint64_t *a2)
{
  if (result)
  {
    uint64_t v3 = result;
    std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::__destroy_vector::operator()[abi:ne180100](result + 24);
    fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~PoolAllocator((fst::MemoryPoolCollection **)(v3 + 48));
    uint64_t result = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<1>>(*a2);
    *(void *)(v3 + 64) = *(void *)(result + 56);
    *(void *)(result + 56) = v3;
  }
  return result;
}

void std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::__destroy_vector::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v1;
    fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::deallocate((uint64_t *)(a1 + 24), v1, (uint64_t)(*(void *)(a1 + 16) - (void)v1) >> 4);
  }
}

uint64_t fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<1>>(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = (uint64_t *)(a1 + 16);
  if ((unint64_t)(*(void *)(a1 + 24) - v1) <= 0x207)
  {
    uint64_t v4 = 0;
    std::vector<fst::MemoryPoolBase *>::resize((char **)(a1 + 16), 0x41uLL, &v4);
    uint64_t v1 = *v2;
  }
  if (!*(void *)(v1 + 512)) {
    operator new();
  }
  return *(void *)(v1 + 512);
}

void sub_20D419DB8(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v3);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v2);
  __n128 v5 = kaldi::CuMatrixBase<float>::~CuMatrixBase(v1);
  MEMORY[0x2105595E0](v5);
  _Unwind_Resume(a1);
}

uint64_t fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<1>>::Link>::Size()
{
  return 72;
}

void fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<1>>::Link>::~MemoryArena(void *a1)
{
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<1>>::Link>::~MemoryArena(a1);
  JUMPOUT(0x2105595E0);
}

double fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<1>>::Link>::~MemoryArena(void *a1)
{
  *a1 = off_26C2072F0;
  uint64_t v2 = a1 + 3;
  for (unint64_t i = (void *)a1[4]; i != v2; unint64_t i = (void *)i[1])
  {
    uint64_t v4 = i[2];
    if (v4) {
      MEMORY[0x2105595C0](v4, 0x1000C8077774924);
    }
  }
  std::__list_imp<char *>::clear(v2);
  *(void *)&double result = kaldi::CuMatrixBase<float>::~CuMatrixBase(a1).n128_u64[0];
  return result;
}

uint64_t fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<1>>::Size()
{
  return 64;
}

void fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<1>>::~MemoryPool(void *a1)
{
  *a1 = off_26C206CC8;
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<1>>::Link>::~MemoryArena(a1 + 1);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(a1);
  JUMPOUT(0x2105595E0);
}

double fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<1>>::~MemoryPool(void *a1)
{
  *a1 = off_26C206CC8;
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<1>>::Link>::~MemoryArena(a1 + 1);
  *(void *)&double result = kaldi::CuMatrixBase<float>::~CuMatrixBase(a1).n128_u64[0];
  return result;
}

void fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::deallocate(uint64_t *a1, void *__p, unint64_t a3)
{
  if (a3 == 2)
  {
    uint64_t v4 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<2>>(*a1);
    __p[4] = *(void *)(v4 + 56);
    goto LABEL_15;
  }
  if (a3 == 1)
  {
    uint64_t v4 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<1>>(*a1);
    __p[2] = *(void *)(v4 + 56);
LABEL_15:
    *(void *)(v4 + 56) = __p;
    return;
  }
  if (a3 <= 4)
  {
    uint64_t v4 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<4>>(*a1);
    __p[8] = *(void *)(v4 + 56);
    goto LABEL_15;
  }
  if (a3 <= 8)
  {
    uint64_t v4 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<8>>(*a1);
    __p[16] = *(void *)(v4 + 56);
    goto LABEL_15;
  }
  if (a3 <= 0x10)
  {
    uint64_t v4 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<16>>(*a1);
    __p[32] = *(void *)(v4 + 56);
    goto LABEL_15;
  }
  if (a3 <= 0x20)
  {
    uint64_t v4 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<32>>(*a1);
    __p[64] = *(void *)(v4 + 56);
    goto LABEL_15;
  }
  if (a3 <= 0x40)
  {
    uint64_t v4 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<64>>(*a1);
    __p[128] = *(void *)(v4 + 56);
    goto LABEL_15;
  }
  operator delete(__p);
}

uint64_t fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<1>>(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = (uint64_t *)(a1 + 16);
  if ((unint64_t)(*(void *)(a1 + 24) - v1) <= 0x87)
  {
    uint64_t v4 = 0;
    std::vector<fst::MemoryPoolBase *>::resize((char **)(a1 + 16), 0x11uLL, &v4);
    uint64_t v1 = *v2;
  }
  if (!*(void *)(v1 + 128)) {
    operator new();
  }
  return *(void *)(v1 + 128);
}

void sub_20D41A1B4(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v3);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v2);
  __n128 v5 = kaldi::CuMatrixBase<float>::~CuMatrixBase(v1);
  MEMORY[0x2105595E0](v5);
  _Unwind_Resume(a1);
}

uint64_t fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<2>>(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = (uint64_t *)(a1 + 16);
  if ((unint64_t)(*(void *)(a1 + 24) - v1) <= 0x107)
  {
    uint64_t v4 = 0;
    std::vector<fst::MemoryPoolBase *>::resize((char **)(a1 + 16), 0x21uLL, &v4);
    uint64_t v1 = *v2;
  }
  if (!*(void *)(v1 + 256)) {
    operator new();
  }
  return *(void *)(v1 + 256);
}

void sub_20D41A310(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v3);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v2);
  __n128 v5 = kaldi::CuMatrixBase<float>::~CuMatrixBase(v1);
  MEMORY[0x2105595E0](v5);
  _Unwind_Resume(a1);
}

uint64_t fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<4>>(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = (uint64_t *)(a1 + 16);
  if ((unint64_t)(*(void *)(a1 + 24) - v1) <= 0x207)
  {
    uint64_t v4 = 0;
    std::vector<fst::MemoryPoolBase *>::resize((char **)(a1 + 16), 0x41uLL, &v4);
    uint64_t v1 = *v2;
  }
  if (!*(void *)(v1 + 512)) {
    operator new();
  }
  return *(void *)(v1 + 512);
}

void sub_20D41A46C(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v3);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v2);
  __n128 v5 = kaldi::CuMatrixBase<float>::~CuMatrixBase(v1);
  MEMORY[0x2105595E0](v5);
  _Unwind_Resume(a1);
}

uint64_t fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<8>>(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = (uint64_t *)(a1 + 16);
  if ((unint64_t)(*(void *)(a1 + 24) - v1) <= 0x407)
  {
    uint64_t v4 = 0;
    std::vector<fst::MemoryPoolBase *>::resize((char **)(a1 + 16), 0x81uLL, &v4);
    uint64_t v1 = *v2;
  }
  if (!*(void *)(v1 + 1024)) {
    operator new();
  }
  return *(void *)(v1 + 1024);
}

void sub_20D41A5C8(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v3);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v2);
  __n128 v5 = kaldi::CuMatrixBase<float>::~CuMatrixBase(v1);
  MEMORY[0x2105595E0](v5);
  _Unwind_Resume(a1);
}

uint64_t fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<16>>(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = (uint64_t *)(a1 + 16);
  if ((unint64_t)(*(void *)(a1 + 24) - v1) <= 0x807)
  {
    uint64_t v4 = 0;
    std::vector<fst::MemoryPoolBase *>::resize((char **)(a1 + 16), 0x101uLL, &v4);
    uint64_t v1 = *v2;
  }
  if (!*(void *)(v1 + 2048)) {
    operator new();
  }
  return *(void *)(v1 + 2048);
}

void sub_20D41A724(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v3);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v2);
  __n128 v5 = kaldi::CuMatrixBase<float>::~CuMatrixBase(v1);
  MEMORY[0x2105595E0](v5);
  _Unwind_Resume(a1);
}

uint64_t fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<32>>(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = (uint64_t *)(a1 + 16);
  if ((unint64_t)(*(void *)(a1 + 24) - v1) >> 3 <= 0x200)
  {
    uint64_t v4 = 0;
    std::vector<fst::MemoryPoolBase *>::resize((char **)(a1 + 16), 0x201uLL, &v4);
    uint64_t v1 = *v2;
  }
  if (!*(void *)(v1 + 4096)) {
    operator new();
  }
  return *(void *)(v1 + 4096);
}

void sub_20D41A884(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v3);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v2);
  __n128 v5 = kaldi::CuMatrixBase<float>::~CuMatrixBase(v1);
  MEMORY[0x2105595E0](v5);
  _Unwind_Resume(a1);
}

uint64_t fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<64>>(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = (uint64_t *)(a1 + 16);
  if ((unint64_t)(*(void *)(a1 + 24) - v1) >> 3 <= 0x400)
  {
    uint64_t v4 = 0;
    std::vector<fst::MemoryPoolBase *>::resize((char **)(a1 + 16), 0x401uLL, &v4);
    uint64_t v1 = *v2;
  }
  if (!*(void *)(v1 + 0x2000)) {
    operator new();
  }
  return *(void *)(v1 + 0x2000);
}

void sub_20D41A9E4(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v3);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v2);
  __n128 v5 = kaldi::CuMatrixBase<float>::~CuMatrixBase(v1);
  MEMORY[0x2105595E0](v5);
  _Unwind_Resume(a1);
}

uint64_t fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<64>>::Link>::Size()
{
  return 1032;
}

void fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<64>>::Link>::~MemoryArena(void *a1)
{
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<64>>::Link>::~MemoryArena(a1);
  JUMPOUT(0x2105595E0);
}

double fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<64>>::Link>::~MemoryArena(void *a1)
{
  *a1 = off_26C207610;
  uint64_t v2 = a1 + 3;
  for (unint64_t i = (void *)a1[4]; i != v2; unint64_t i = (void *)i[1])
  {
    uint64_t v4 = i[2];
    if (v4) {
      MEMORY[0x2105595C0](v4, 0x1000C8077774924);
    }
  }
  std::__list_imp<char *>::clear(v2);
  *(void *)&double result = kaldi::CuMatrixBase<float>::~CuMatrixBase(a1).n128_u64[0];
  return result;
}

uint64_t fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<64>>::Size()
{
  return 1024;
}

void fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<64>>::~MemoryPool(void *a1)
{
  *a1 = off_26C206FE8;
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<64>>::Link>::~MemoryArena(a1 + 1);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(a1);
  JUMPOUT(0x2105595E0);
}

double fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<64>>::~MemoryPool(void *a1)
{
  *a1 = off_26C206FE8;
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<64>>::Link>::~MemoryArena(a1 + 1);
  *(void *)&double result = kaldi::CuMatrixBase<float>::~CuMatrixBase(a1).n128_u64[0];
  return result;
}

uint64_t fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<32>>::Link>::Size()
{
  return 520;
}

void fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<32>>::Link>::~MemoryArena(void *a1)
{
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<32>>::Link>::~MemoryArena(a1);
  JUMPOUT(0x2105595E0);
}

double fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<32>>::Link>::~MemoryArena(void *a1)
{
  *a1 = off_26C2075C0;
  uint64_t v2 = a1 + 3;
  for (unint64_t i = (void *)a1[4]; i != v2; unint64_t i = (void *)i[1])
  {
    uint64_t v4 = i[2];
    if (v4) {
      MEMORY[0x2105595C0](v4, 0x1000C8077774924);
    }
  }
  std::__list_imp<char *>::clear(v2);
  *(void *)&double result = kaldi::CuMatrixBase<float>::~CuMatrixBase(a1).n128_u64[0];
  return result;
}

uint64_t fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<32>>::Size()
{
  return 512;
}

void fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<32>>::~MemoryPool(void *a1)
{
  *a1 = off_26C206F98;
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<32>>::Link>::~MemoryArena(a1 + 1);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(a1);
  JUMPOUT(0x2105595E0);
}

double fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<32>>::~MemoryPool(void *a1)
{
  *a1 = off_26C206F98;
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<32>>::Link>::~MemoryArena(a1 + 1);
  *(void *)&double result = kaldi::CuMatrixBase<float>::~CuMatrixBase(a1).n128_u64[0];
  return result;
}

uint64_t fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<16>>::Link>::Size()
{
  return 264;
}

void fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<16>>::Link>::~MemoryArena(void *a1)
{
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<16>>::Link>::~MemoryArena(a1);
  JUMPOUT(0x2105595E0);
}

double fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<16>>::Link>::~MemoryArena(void *a1)
{
  *a1 = off_26C207548;
  uint64_t v2 = a1 + 3;
  for (unint64_t i = (void *)a1[4]; i != v2; unint64_t i = (void *)i[1])
  {
    uint64_t v4 = i[2];
    if (v4) {
      MEMORY[0x2105595C0](v4, 0x1000C8077774924);
    }
  }
  std::__list_imp<char *>::clear(v2);
  *(void *)&double result = kaldi::CuMatrixBase<float>::~CuMatrixBase(a1).n128_u64[0];
  return result;
}

uint64_t fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<16>>::Size()
{
  return 256;
}

void fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<16>>::~MemoryPool(void *a1)
{
  *a1 = off_26C206F20;
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<16>>::Link>::~MemoryArena(a1 + 1);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(a1);
  JUMPOUT(0x2105595E0);
}

double fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<16>>::~MemoryPool(void *a1)
{
  *a1 = off_26C206F20;
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<16>>::Link>::~MemoryArena(a1 + 1);
  *(void *)&double result = kaldi::CuMatrixBase<float>::~CuMatrixBase(a1).n128_u64[0];
  return result;
}

uint64_t fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<8>>::Link>::Size()
{
  return 136;
}

void fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<8>>::Link>::~MemoryArena(void *a1)
{
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<8>>::Link>::~MemoryArena(a1);
  JUMPOUT(0x2105595E0);
}

double fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<8>>::Link>::~MemoryArena(void *a1)
{
  *a1 = off_26C207638;
  uint64_t v2 = a1 + 3;
  for (unint64_t i = (void *)a1[4]; i != v2; unint64_t i = (void *)i[1])
  {
    uint64_t v4 = i[2];
    if (v4) {
      MEMORY[0x2105595C0](v4, 0x1000C8077774924);
    }
  }
  std::__list_imp<char *>::clear(v2);
  *(void *)&double result = kaldi::CuMatrixBase<float>::~CuMatrixBase(a1).n128_u64[0];
  return result;
}

uint64_t fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<8>>::Size()
{
  return 128;
}

void fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<8>>::~MemoryPool(void *a1)
{
  *a1 = off_26C207010;
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<8>>::Link>::~MemoryArena(a1 + 1);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(a1);
  JUMPOUT(0x2105595E0);
}

double fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<8>>::~MemoryPool(void *a1)
{
  *a1 = off_26C207010;
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<8>>::Link>::~MemoryArena(a1 + 1);
  *(void *)&double result = kaldi::CuMatrixBase<float>::~CuMatrixBase(a1).n128_u64[0];
  return result;
}

uint64_t fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<4>>::Link>::Size()
{
  return 72;
}

void fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<4>>::Link>::~MemoryArena(void *a1)
{
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<4>>::Link>::~MemoryArena(a1);
  JUMPOUT(0x2105595E0);
}

double fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<4>>::Link>::~MemoryArena(void *a1)
{
  *a1 = off_26C2075E8;
  uint64_t v2 = a1 + 3;
  for (unint64_t i = (void *)a1[4]; i != v2; unint64_t i = (void *)i[1])
  {
    uint64_t v4 = i[2];
    if (v4) {
      MEMORY[0x2105595C0](v4, 0x1000C8077774924);
    }
  }
  std::__list_imp<char *>::clear(v2);
  *(void *)&double result = kaldi::CuMatrixBase<float>::~CuMatrixBase(a1).n128_u64[0];
  return result;
}

uint64_t fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<4>>::Size()
{
  return 64;
}

void fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<4>>::~MemoryPool(void *a1)
{
  *a1 = off_26C206FC0;
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<4>>::Link>::~MemoryArena(a1 + 1);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(a1);
  JUMPOUT(0x2105595E0);
}

double fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<4>>::~MemoryPool(void *a1)
{
  *a1 = off_26C206FC0;
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<4>>::Link>::~MemoryArena(a1 + 1);
  *(void *)&double result = kaldi::CuMatrixBase<float>::~CuMatrixBase(a1).n128_u64[0];
  return result;
}

uint64_t fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<2>>::Link>::Size()
{
  return 40;
}

void fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<2>>::Link>::~MemoryArena(void *a1)
{
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<2>>::Link>::~MemoryArena(a1);
  JUMPOUT(0x2105595E0);
}

double fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<2>>::Link>::~MemoryArena(void *a1)
{
  *a1 = off_26C207598;
  uint64_t v2 = a1 + 3;
  for (unint64_t i = (void *)a1[4]; i != v2; unint64_t i = (void *)i[1])
  {
    uint64_t v4 = i[2];
    if (v4) {
      MEMORY[0x2105595C0](v4, 0x1000C8077774924);
    }
  }
  std::__list_imp<char *>::clear(v2);
  *(void *)&double result = kaldi::CuMatrixBase<float>::~CuMatrixBase(a1).n128_u64[0];
  return result;
}

uint64_t fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<2>>::Size()
{
  return 32;
}

void fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<2>>::~MemoryPool(void *a1)
{
  *a1 = off_26C206F70;
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<2>>::Link>::~MemoryArena(a1 + 1);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(a1);
  JUMPOUT(0x2105595E0);
}

double fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<2>>::~MemoryPool(void *a1)
{
  *a1 = off_26C206F70;
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<2>>::Link>::~MemoryArena(a1 + 1);
  *(void *)&double result = kaldi::CuMatrixBase<float>::~CuMatrixBase(a1).n128_u64[0];
  return result;
}

uint64_t fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<1>>::Link>::Size()
{
  return 24;
}

void fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<1>>::Link>::~MemoryArena(void *a1)
{
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<1>>::Link>::~MemoryArena(a1);
  JUMPOUT(0x2105595E0);
}

double fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<1>>::Link>::~MemoryArena(void *a1)
{
  *a1 = off_26C207570;
  uint64_t v2 = a1 + 3;
  for (unint64_t i = (void *)a1[4]; i != v2; unint64_t i = (void *)i[1])
  {
    uint64_t v4 = i[2];
    if (v4) {
      MEMORY[0x2105595C0](v4, 0x1000C8077774924);
    }
  }
  std::__list_imp<char *>::clear(v2);
  *(void *)&double result = kaldi::CuMatrixBase<float>::~CuMatrixBase(a1).n128_u64[0];
  return result;
}

uint64_t fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<1>>::Size()
{
  return 16;
}

void fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<1>>::~MemoryPool(void *a1)
{
  *a1 = off_26C206F48;
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<1>>::Link>::~MemoryArena(a1 + 1);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(a1);
  JUMPOUT(0x2105595E0);
}

double fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<1>>::~MemoryPool(void *a1)
{
  *a1 = off_26C206F48;
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<1>>::Link>::~MemoryArena(a1 + 1);
  *(void *)&double result = kaldi::CuMatrixBase<float>::~CuMatrixBase(a1).n128_u64[0];
  return result;
}

void fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~CacheBaseImpl(void *a1)
{
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~CacheBaseImpl(a1);
  JUMPOUT(0x2105595E0);
}

uint64_t std::__hash_table<int,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::HashFunc,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::HashEqual,fst::PoolAllocator<int>>::~__hash_table(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
  uint64_t v3 = (uint64_t *)(a1 + 32);
  if (v2)
  {
    do
    {
      uint64_t v4 = (void *)*v2;
      uint64_t v5 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node<int,void *>>::TN<1>>(*v3);
      v2[3] = *(void *)(v5 + 56);
      *(void *)(v5 + 56) = v2;
      uint64_t v2 = v4;
    }
    while (v4);
  }
  fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~PoolAllocator((fst::MemoryPoolCollection **)v3);
  return std::unique_ptr<std::__hash_node_base<std::__hash_node<int,void *> *> *[],std::__bucket_list_deallocator<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>>>::~unique_ptr[abi:ne180100](a1);
}

uint64_t *fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Matcher(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 144))(a2, a3);
  *a1 = v4;
  if (!v4) {
    operator new();
  }
  return a1;
}

void sub_20D41B6A4(_Unwind_Exception *a1)
{
  MEMORY[0x2105595E0](v1, 0x10E1C4003B7394BLL);
  _Unwind_Resume(a1);
}

void fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::SortedMatcher(uint64_t a1, uint64_t a2, int a3)
{
  *(void *)a1 = off_26C2079B0;
  *(void *)(a1 + 8) = (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 88))(a2, 0);
  *(_DWORD *)(a1 + 16) = -1;
  *(void *)(a1 + ++*(_DWORD *)(result + 24) = 0;
  *(_DWORD *)(a1 + 32) = a3;
  *(void *)(a1 + 36) = 0xFFFFFFFF00000001;
  *(void *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 56) = xmmword_20D6B4AF0;
  *(unsigned char *)(a1 + 74) = 0;
  fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::MemoryPool(a1 + 80);
}

void sub_20D41B83C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0) {
    operator delete(__p);
  }
  fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::~MemoryPool(v18);
  _Unwind_Resume(a1);
}

void fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::MemoryPool(uint64_t a1)
{
  *(void *)a1 = off_26C206C50;
  *(void *)(a1 + 8) = off_26C207278;
  *(_OWORD *)(a1 + 16) = xmmword_20D6B4B00;
  *(void *)(a1 + 32) = a1 + 32;
  *(void *)(a1 + 40) = a1 + 32;
  *(void *)(a1 + 48) = 0;
  operator new[]();
}

void sub_20D41B948(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v3);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v2);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v1);
  _Unwind_Resume(a1);
}

double fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::~MemoryPool(void *a1)
{
  *a1 = off_26C206C50;
  fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Link>::~MemoryArena(a1 + 1);
  *(void *)&double result = kaldi::CuMatrixBase<float>::~CuMatrixBase(a1).n128_u64[0];
  return result;
}

double fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Link>::~MemoryArena(void *a1)
{
  *a1 = off_26C207278;
  uint64_t v2 = a1 + 3;
  for (unint64_t i = (void *)a1[4]; i != v2; unint64_t i = (void *)i[1])
  {
    uint64_t v4 = i[2];
    if (v4) {
      MEMORY[0x2105595C0](v4, 0x1000C8077774924);
    }
  }
  std::__list_imp<char *>::clear(v2);
  *(void *)&double result = kaldi::CuMatrixBase<float>::~CuMatrixBase(a1).n128_u64[0];
  return result;
}

uint64_t fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Link>::Size()
{
  return 48;
}

void fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Link>::~MemoryArena(void *a1)
{
  fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Link>::~MemoryArena(a1);
  JUMPOUT(0x2105595E0);
}

uint64_t fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Size()
{
  return 40;
}

void fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::~MemoryPool(void *a1)
{
  *a1 = off_26C206C50;
  fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Link>::~MemoryArena(a1 + 1);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(a1);
  JUMPOUT(0x2105595E0);
}

uint64_t fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Priority_(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))();
}

uint64_t fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Final_(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 32))();
}

uint64_t fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Next_(uint64_t result)
{
  if (*(unsigned char *)(result + 72))
  {
    *(unsigned char *)(result + 72) = 0;
  }
  else
  {
    uint64_t v1 = *(uint64_t **)(result + 24);
    double result = *v1;
    if (*v1) {
      return (*(uint64_t (**)(void))(*(void *)result + 40))();
    }
    else {
      ++v1[4];
    }
  }
  return result;
}

uint64_t fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Value_(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 72)) {
    return a1 + 56;
  }
  uint64_t v3 = *(void **)(a1 + 24);
  if (!*v3) {
    return v3[1] + 16 * v3[4];
  }
  (*(void (**)(void, uint64_t, uint64_t))(*(void *)*v3 + 80))(*v3, 15, 15);
  uint64_t v3 = *(void **)(a1 + 24);
  if (!*v3) {
    return v3[1] + 16 * v3[4];
  }
  uint64_t v4 = *(uint64_t (**)(void))(*(void *)*v3 + 32);
  return v4();
}

BOOL fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Done_(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 72)) {
    return 0;
  }
  uint64_t v3 = *(void **)(a1 + 24);
  if (*v3)
  {
    if ((*(uint64_t (**)(void))(*(void *)*v3 + 24))(*v3)) {
      return 1;
    }
  }
  else if (v3[4] >= v3[2])
  {
    return 1;
  }
  if (!*(unsigned char *)(a1 + 73)) {
    return 0;
  }
  uint64_t v4 = *(uint64_t **)(a1 + 24);
  int v5 = *(_DWORD *)(a1 + 32);
  uint64_t v6 = *v4;
  if (*v4)
  {
    if (v5) {
      uint64_t v7 = 2;
    }
    else {
      uint64_t v7 = 1;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6 + 80))(v6, v7, 15);
    int v5 = *(_DWORD *)(a1 + 32);
    uint64_t v4 = *(uint64_t **)(a1 + 24);
    uint64_t v6 = *v4;
  }
  if (v5)
  {
    if (v6) {
      uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 32))(v6);
    }
    else {
      uint64_t v8 = v4[1] + 16 * v4[4];
    }
    uint64_t v9 = (_DWORD *)(v8 + 4);
  }
  else if (v6)
  {
    uint64_t v9 = (_DWORD *)(*(uint64_t (**)(uint64_t))(*(void *)v6 + 32))(v6);
  }
  else
  {
    uint64_t v9 = (_DWORD *)(v4[1] + 16 * v4[4]);
  }
  return *v9 != *(_DWORD *)(a1 + 40);
}

uint64_t fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Find_(uint64_t a1, int a2)
{
  *(unsigned char *)(a1 + 73) = 1;
  if (*(unsigned char *)(a1 + 74))
  {
    uint64_t result = 0;
    *(unsigned char *)(a1 + 72) = 0;
    *(_DWORD *)(a1 + 40) = -1;
    return result;
  }
  *(unsigned char *)(a1 + 72) = a2 == 0;
  if (a2 == -1) {
    int v4 = 0;
  }
  else {
    int v4 = a2;
  }
  *(_DWORD *)(a1 + 40) = v4;
  uint64_t v5 = **(void **)(a1 + 24);
  if (v5)
  {
    if (*(_DWORD *)(a1 + 32)) {
      uint64_t v6 = 2;
    }
    else {
      uint64_t v6 = 1;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5 + 80))(v5, v6, 15);
    int v4 = *(_DWORD *)(a1 + 40);
  }
  if (v4 < *(_DWORD *)(a1 + 36))
  {
    uint64_t v7 = *(void **)(a1 + 24);
    if (*v7) {
      (*(void (**)(void))(*(void *)*v7 + 56))(*v7);
    }
    else {
      v7[4] = 0;
    }
    while (1)
    {
      int v20 = *(void **)(a1 + 24);
      if (*v20)
      {
        if ((*(uint64_t (**)(void))(*(void *)*v20 + 24))(*v20)) {
          return *(unsigned char *)(a1 + 72) != 0;
        }
        int v20 = *(void **)(a1 + 24);
        uint64_t v21 = *v20;
      }
      else
      {
        if (v20[4] >= v20[2]) {
          return *(unsigned char *)(a1 + 72) != 0;
        }
        uint64_t v21 = 0;
      }
      if (*(_DWORD *)(a1 + 32))
      {
        uint64_t v22 = v21 ? (*(uint64_t (**)(uint64_t))(*(void *)v21 + 32))(v21) : v20[1] + 16 * v20[4];
        BOOL v23 = (_DWORD *)(v22 + 4);
      }
      else
      {
        BOOL v23 = (_DWORD *)(v21 ? (*(uint64_t (**)(uint64_t))(*(void *)v21 + 32))(v21) : v20[1]
                                                                                                 + 16 * v20[4]);
      }
      int v24 = *(_DWORD *)(a1 + 40);
      int v25 = *v23 <= v24 ? 0 : 7;
      if (*v23 == v24) {
        int v25 = 1;
      }
      if (v25) {
        break;
      }
      uint64_t v26 = *(void **)(a1 + 24);
      if (*v26) {
        (*(void (**)(void))(*(void *)*v26 + 40))(*v26);
      }
      else {
        ++v26[4];
      }
    }
    if (v25 == 1) {
      return 1;
    }
    return *(unsigned char *)(a1 + 72) != 0;
  }
  unint64_t v8 = *(void *)(a1 + 48);
  if (!v8)
  {
    unint64_t v9 = 0;
LABEL_74:
    uint64_t v27 = *(void **)(a1 + 24);
    if (*v27) {
      (*(void (**)(void, unint64_t))(*(void *)*v27 + 64))(*v27, v9);
    }
    else {
      v27[4] = v9;
    }
    return *(unsigned char *)(a1 + 72) != 0;
  }
  unint64_t v9 = 0;
  while (1)
  {
    unint64_t v10 = (v8 + v9) >> 1;
    uint64_t v11 = *(uint64_t **)(a1 + 24);
    uint64_t v12 = *v11;
    if (*v11)
    {
      (*(void (**)(uint64_t, unint64_t))(*(void *)v12 + 64))(v12, (v8 + v9) >> 1);
      uint64_t v11 = *(uint64_t **)(a1 + 24);
      uint64_t v12 = *v11;
    }
    else
    {
      v11[4] = v10;
    }
    if (*(_DWORD *)(a1 + 32))
    {
      uint64_t v13 = v12 ? (*(uint64_t (**)(uint64_t))(*(void *)v12 + 32))(v12) : v11[1] + 16 * v11[4];
      BOOL v14 = (_DWORD *)(v13 + 4);
    }
    else
    {
      BOOL v14 = (_DWORD *)(v12 ? (*(uint64_t (**)(uint64_t))(*(void *)v12 + 32))(v12) : v11[1] + 16 * v11[4]);
    }
    int v15 = *(_DWORD *)(a1 + 40);
    if (*v14 <= v15) {
      break;
    }
    unint64_t v8 = (v8 + v9) >> 1;
LABEL_30:
    if (v9 >= v8) {
      goto LABEL_74;
    }
  }
  if (*v14 < v15)
  {
    unint64_t v9 = v10 + 1;
    goto LABEL_30;
  }
  while (v10 > v9)
  {
    int v16 = *(uint64_t **)(a1 + 24);
    --v10;
    uint64_t v17 = *v16;
    if (*v16)
    {
      (*(void (**)(uint64_t, unint64_t))(*(void *)v17 + 64))(v17, v10);
      int v16 = *(uint64_t **)(a1 + 24);
      uint64_t v17 = *v16;
    }
    else
    {
      v16[4] = v10;
    }
    if (*(_DWORD *)(a1 + 32))
    {
      if (v17) {
        uint64_t v18 = (*(uint64_t (**)(uint64_t))(*(void *)v17 + 32))(v17);
      }
      else {
        uint64_t v18 = v16[1] + 16 * v16[4];
      }
      float v19 = (_DWORD *)(v18 + 4);
    }
    else if (v17)
    {
      float v19 = (_DWORD *)(*(uint64_t (**)(uint64_t))(*(void *)v17 + 32))(v17);
    }
    else
    {
      float v19 = (_DWORD *)(v16[1] + 16 * v16[4]);
    }
    if (*v19 != *(_DWORD *)(a1 + 40))
    {
      unint64_t v28 = v10 + 1;
      unint64_t v29 = *(void **)(a1 + 24);
      if (*v29) {
        (*(void (**)(void, unint64_t))(*(void *)*v29 + 64))(*v29, v28);
      }
      else {
        v29[4] = v28;
      }
      return 1;
    }
  }
  return 1;
}

uint64_t fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::SetState_(uint64_t result, uint64_t a2)
{
  if (*(_DWORD *)(result + 16) == a2) {
    return result;
  }
  uint64_t v3 = result;
  *(_DWORD *)(result + 16) = a2;
  if (*(_DWORD *)(result + 32) == 3)
  {
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    }
    int v4 = fst::LogMessage::LogMessage((fst *)&v15, (uint64_t)__p);
    uint64_t v5 = (void *)fst::cerr(v4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"SortedMatcher: bad match type", 29);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v15);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
    *(unsigned char *)(v3 + 74) = 1;
  }
  uint64_t v6 = *(void **)(v3 + 24);
  if (!v6)
  {
    unint64_t v8 = *(void **)(v3 + 136);
    if (v8)
    {
      *(void *)(v3 + 136) = v8[5];
    }
    else
    {
      unint64_t v10 = *(void *)(v3 + 96);
      if (v10 <= 0xBF) {
        operator new[]();
      }
      uint64_t v11 = *(void *)(v3 + 104);
      if (v11 + 48 > v10) {
        operator new[]();
      }
      unint64_t v8 = (void *)(*(void *)(*(void *)(v3 + 120) + 16) + v11);
      *(void *)(v3 + 104) = v11 + 48;
      v8[5] = 0;
    }
    uint64_t v12 = *(void *)(v3 + 8);
    v8[4] = 0;
    (*(void (**)(uint64_t, uint64_t, void *))(*(void *)v12 + 136))(v12, a2, v8);
    *(void *)(v3 + ++*(_DWORD *)(result + 24) = v8;
    goto LABEL_26;
  }
  uint64_t v7 = *(void *)(v3 + 8);
  if (!*v6) {
    goto LABEL_16;
  }
  if (((*(uint64_t (**)(void, uint64_t))(*(void *)*v6 + 16))(*v6, a2) & 1) == 0)
  {
    if (*v6)
    {
      (*(void (**)(void))(*(void *)*v6 + 8))(*v6);
LABEL_18:
      v6[4] = 0;
      (*(void (**)(uint64_t, uint64_t, void *))(*(void *)v7 + 136))(v7, a2, v6);
      goto LABEL_19;
    }
LABEL_16:
    unint64_t v9 = (_DWORD *)v6[3];
    if (v9) {
      --*v9;
    }
    goto LABEL_18;
  }
LABEL_19:
  unint64_t v8 = *(void **)(v3 + 24);
LABEL_26:
  if (*v8) {
    (*(void (**)(void, uint64_t, uint64_t))(*(void *)*v8 + 80))(*v8, 16, 16);
  }
  uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(v3 + 8) + 40))(*(void *)(v3 + 8), a2);
  *(void *)(v3 + 48) = result;
  *(_DWORD *)(v3 + 68) = a2;
  return result;
}

void sub_20D41C584(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::MatcherBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::Flags()
{
  return 0;
}

uint64_t fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Properties(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 74)) {
    return a2 | 4;
  }
  else {
    return a2;
  }
}

uint64_t fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::GetFst(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Type(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 32);
  if (v2 == 3) {
    return 3;
  }
  if (v2) {
    uint64_t v6 = 0x40000000;
  }
  else {
    uint64_t v6 = 0x10000000;
  }
  uint64_t v7 = *(void *)(a1 + 8);
  if (v2) {
    uint64_t v8 = 3221225472;
  }
  else {
    uint64_t v8 = 805306368;
  }
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7 + 64))(v7, v8, a2);
  if ((v9 & v6) != 0) {
    return *(unsigned int *)(a1 + 32);
  }
  uint64_t v10 = 0x80000000;
  if (!v2) {
    uint64_t v10 = 0x20000000;
  }
  if ((v9 & v10) != 0) {
    return 3;
  }
  else {
    return 4;
  }
}

void fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Copy()
{
}

void sub_20D41C75C(_Unwind_Exception *a1)
{
  MEMORY[0x2105595E0](v1, 0x10E1C4003B7394BLL);
  _Unwind_Resume(a1);
}

void fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~SortedMatcher(void *a1)
{
  fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~SortedMatcher(a1);
  JUMPOUT(0x2105595E0);
}

void *fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~SortedMatcher(void *a1)
{
  *a1 = off_26C2079B0;
  int v2 = (void *)a1[3];
  if (v2)
  {
    if (*v2)
    {
      (*(void (**)(void))(*(void *)*v2 + 8))(*v2);
    }
    else
    {
      uint64_t v3 = (_DWORD *)v2[3];
      if (v3) {
        --*v3;
      }
    }
    v2[5] = a1[17];
    a1[17] = v2;
  }
  uint64_t v4 = a1[1];
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  a1[10] = off_26C206C50;
  fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Link>::~MemoryArena(a1 + 11);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(a1 + 10);
  return a1;
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComputeFinal(uint64_t a1, int a2)
{
  uint64_t v4 = *(void *)(*(void *)(a1 + 176) + 96);
  uint64_t v5 = (unsigned int *)(v4 + 12 * a2);
  uint64_t v6 = *v5;
  float v10 = (*(float (**)(void, uint64_t))(***(void ***)(a1 + 144) + 96))(**(void **)(a1 + 144), v6);
  if (v10 != INFINITY)
  {
    uint64_t v7 = v5[1];
    float v8 = (*(float (**)(void, uint64_t))(***(void ***)(a1 + 152) + 96))(**(void **)(a1 + 152), v7);
    float v10 = v8;
    if (v8 != INFINITY)
    {
      uint64_t v9 = *(void *)(a1 + 136);
      LOBYTE(v10) = *(unsigned char *)(v4 + 12 * a2 + 8);
      fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::SetState(v9, v6, v7, &v10);
    }
  }
}

void fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::SetState(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  if (*(_DWORD *)(a1 + 32) != a2 || *(_DWORD *)(a1 + 36) != a3 || *a4 != *(unsigned char *)(a1 + 40))
  {
    *(_DWORD *)(a1 + 32) = a2;
    *(_DWORD *)(a1 + 36) = a3;
    *(unsigned char *)(a1 + 40) = *a4;
    uint64_t v7 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 40))(*(void *)(a1 + 16), a2);
    uint64_t v8 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 56))(*(void *)(a1 + 16), a2);
    BOOL v10 = (*(float (**)(void, uint64_t))(**(void **)(a1 + 16) + 32))(*(void *)(a1 + 16), a2) == INFINITY
       && v7 == v8;
    *(unsigned char *)(a1 + 41) = v10;
    *(unsigned char *)(a1 + 43) = v8 == 0;
    uint64_t v11 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a3);
    uint64_t v12 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 48))(*(void *)(a1 + 24), a3);
    BOOL v14 = (*(float (**)(void, uint64_t))(**(void **)(a1 + 24) + 32))(*(void *)(a1 + 24), a3) == INFINITY
       && v11 == v12;
    *(unsigned char *)(a1 + 42) = v14;
    *(unsigned char *)(a1 + 44) = v12 == 0;
  }
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComputeStart(void **a1)
{
  uint64_t result = (*(uint64_t (**)(void *))(*a1[20] + 24))(a1[20]);
  if (result != -1)
  {
    unsigned int v3 = result;
    uint64_t result = (*(uint64_t (**)(void *))(*a1[21] + 24))(a1[21]);
    if (result != -1)
    {
      unint64_t v4 = __PAIR64__(result, v3);
      char v5 = 0;
      return fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::FindId(a1[22], (uint64_t *)&v4);
    }
  }
  return result;
}

uint64_t fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::FindId(void *a1, uint64_t *a2)
{
  a1[15] = a2;
  float v30 = a1 + 3;
  int8x8_t v4 = (int8x8_t)a1[4];
  if (v4)
  {
    unint64_t v5 = **(int **)(a1[9] + 120)
       + 7853 * *(int *)(*(void *)(a1[9] + 120) + 4)
       + 7867 * *(char *)(*(void *)(a1[9] + 120) + 8);
    uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4);
    v6.i16[0] = vaddlv_u8(v6);
    unint64_t v7 = v6.u32[0];
    if (v6.u32[0] > 1uLL)
    {
      uint64_t v8 = **(int **)(a1[9] + 120)
         + 7853 * *(int *)(*(void *)(a1[9] + 120) + 4)
         + 7867 * *(char *)(*(void *)(a1[9] + 120) + 8);
      if (v5 >= *(void *)&v4) {
        uint64_t v8 = v5 % *(void *)&v4;
      }
    }
    else
    {
      uint64_t v8 = (*(void *)&v4 - 1) & v5;
    }
    uint64_t v9 = *(uint64_t ***)(*v30 + 8 * v8);
    if (v9)
    {
      for (unint64_t i = *v9; i; unint64_t i = (uint64_t *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == v5)
        {
          uint64_t v12 = *((unsigned int *)i + 4);
          if (fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::HashEqual::operator()(a1 + 11, *((_DWORD *)i + 4), -1))
          {
            return v12;
          }
        }
        else
        {
          if (v7 > 1)
          {
            if (v11 >= *(void *)&v4) {
              v11 %= *(void *)&v4;
            }
          }
          else
          {
            v11 &= *(void *)&v4 - 1;
          }
          if (v11 != v8) {
            break;
          }
        }
      }
    }
  }
  uint64_t v14 = a1[12];
  unint64_t v13 = a1[13];
  uint64_t v12 = (uint64_t)(v13 - v14) / 12;
  int v31 = v12;
  unint64_t v15 = a1[14];
  if (v13 >= v15)
  {
    if ((unint64_t)(v12 + 1) > 0x1555555555555555) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15 - v14) >> 2);
    uint64_t v19 = 2 * v18;
    if (2 * v18 <= v12 + 1) {
      uint64_t v19 = v12 + 1;
    }
    if (v18 >= 0xAAAAAAAAAAAAAAALL) {
      unint64_t v20 = 0x1555555555555555;
    }
    else {
      unint64_t v20 = v19;
    }
    if (v20) {
      unint64_t v20 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<FRCode::Op>>(v20);
    }
    else {
      uint64_t v21 = 0;
    }
    unint64_t v22 = v20 + 12 * v12;
    unint64_t v23 = v20 + 12 * v21;
    uint64_t v24 = *a2;
    *(_DWORD *)(v22 + 8) = *((_DWORD *)a2 + 2);
    *(void *)unint64_t v22 = v24;
    unint64_t v17 = v22 + 12;
    uint64_t v26 = (_DWORD *)a1[12];
    int v25 = (_DWORD *)a1[13];
    if (v25 != v26)
    {
      do
      {
        uint64_t v27 = *(void *)(v25 - 3);
        v25 -= 3;
        int v28 = v25[2];
        *(void *)(v22 - 12) = v27;
        v22 -= 12;
        *(_DWORD *)(v22 + 8) = v28;
      }
      while (v25 != v26);
      int v25 = (_DWORD *)a1[12];
    }
    a1[12] = v22;
    a1[13] = v17;
    a1[14] = v23;
    if (v25) {
      operator delete(v25);
    }
  }
  else
  {
    uint64_t v16 = *a2;
    *(_DWORD *)(v13 + 8) = *((_DWORD *)a2 + 2);
    *(void *)unint64_t v13 = v16;
    unint64_t v17 = v13 + 12;
  }
  a1[13] = v17;
  std::__hash_table<int,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::HashFunc,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::HashEqual,fst::PoolAllocator<int>>::__emplace_unique_key_args<int,int const&>((uint64_t)v30, v12, &v31);
  return v12;
}

void std::__hash_table<int,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::HashFunc,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::HashEqual,fst::PoolAllocator<int>>::__emplace_unique_key_args<int,int const&>(uint64_t a1, int a2, _DWORD *a3)
{
  if (a2 < -1)
  {
    unint64_t v9 = 0;
  }
  else
  {
    uint64_t v7 = *(void *)(a1 + 48);
    if (a2 == -1) {
      uint64_t v8 = *(int **)(v7 + 120);
    }
    else {
      uint64_t v8 = (int *)(*(void *)(v7 + 96) + 12 * a2);
    }
    unint64_t v9 = *v8 + 7853 * v8[1] + 7867 * *((char *)v8 + 8);
  }
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v9;
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
    unint64_t v13 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (unint64_t i = *v13; i; unint64_t i = (uint64_t *)*i)
      {
        unint64_t v15 = i[1];
        if (v15 == v9)
        {
          if (fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::HashEqual::operator()((uint64_t *)(a1 + 64), *((_DWORD *)i + 4), a2))
          {
            return;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t v16 = fst::PoolAllocator<std::__hash_node<int,void *>>::allocate((uint64_t *)(a1 + 32));
  *(void *)uint64_t v16 = 0;
  *(void *)(v16 + 8) = v9;
  *(_DWORD *)(v16 + 16) = *a3;
  float v17 = (float)(unint64_t)(*(void *)(a1 + 40) + 1);
  float v18 = *(float *)(a1 + 56);
  if (!v10 || (float)(v18 * (float)v10) < v17)
  {
    BOOL v19 = 1;
    if (v10 >= 3) {
      BOOL v19 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v10);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,fst::PoolAllocator<int>>::__rehash<true>(a1, v22);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  unint64_t v23 = *(uint64_t **)(*(void *)a1 + 8 * v3);
  if (v23)
  {
    *(void *)uint64_t v16 = *v23;
LABEL_44:
    *unint64_t v23 = v16;
    goto LABEL_45;
  }
  *(void *)uint64_t v16 = *(void *)(a1 + 24);
  *(void *)(a1 + ++*(_DWORD *)(result + 24) = v16;
  *(void *)(*(void *)a1 + 8 * v3) = a1 + 24;
  if (*(void *)v16)
  {
    unint64_t v24 = *(void *)(*(void *)v16 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v24 >= v10) {
        v24 %= v10;
      }
    }
    else
    {
      v24 &= v10 - 1;
    }
    unint64_t v23 = (uint64_t *)(*(void *)a1 + 8 * v24);
    goto LABEL_44;
  }
LABEL_45:
  ++*(void *)(a1 + 40);
}

void sub_20D41D164(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<fst::PoolAllocator<std::__hash_node<int,void *>>>::operator()[abi:ne180100](v2, v1);
  _Unwind_Resume(a1);
}

BOOL fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::HashEqual::operator()(uint64_t *a1, int a2, int a3)
{
  if (a2 < -1 || a3 < -1)
  {
    return a2 == a3;
  }
  else
  {
    uint64_t v3 = *a1;
    if (a2 == -1) {
      uint64_t v4 = *(void *)(v3 + 120);
    }
    else {
      uint64_t v4 = *(void *)(v3 + 96) + 12 * a2;
    }
    if (a3 == -1) {
      uint64_t v6 = *(void *)(v3 + 120);
    }
    else {
      uint64_t v6 = *(void *)(v3 + 96) + 12 * a3;
    }
    if (v4 == v6) {
      return 1;
    }
    if (*(_DWORD *)v4 != *(_DWORD *)v6 || *(_DWORD *)(v4 + 4) != *(_DWORD *)(v6 + 4)) {
      return 0;
    }
    return *(unsigned __int8 *)(v4 + 8) == *(unsigned __int8 *)(v6 + 8);
  }
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::InitMatcher(uint64_t a1, uint64_t a2, int a3)
{
  if ((*(unsigned int (**)(void, void))(***(void ***)(a1 + 144) + 24))(**(void **)(a1 + 144), 0) == a3
    && (*(unsigned int (**)(void, void))(***(void ***)(a1 + 152) + 24))(**(void **)(a1 + 152), 0) == a3)
  {
    operator new();
  }
  return 0;
}

void sub_20D41D344(_Unwind_Exception *a1)
{
  MEMORY[0x2105595E0](v1, 0x10E1C40868C5753);
  _Unwind_Resume(a1);
}

void fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Copy()
{
}

void sub_20D41D3E4(_Unwind_Exception *a1)
{
  MEMORY[0x2105595E0](v1, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Priority_(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))();
}

uint64_t fst::MatcherBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::Final_(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1) + 32);
  return v1();
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Next_(uint64_t result)
{
  if (*(unsigned char *)(result + 48))
  {
    *(unsigned char *)(result + 48) = 0;
  }
  else
  {
    if (*(_DWORD *)(result + 28))
    {
      int v2 = *(void **)(result + 32);
      uint64_t v1 = *(void *)(result + 40);
    }
    else
    {
      uint64_t v1 = *(void *)(result + 32);
      int v2 = *(void **)(result + 40);
    }
    return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindNext<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(result, v1, v2);
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindNext<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(uint64_t a1, uint64_t a2, void *a3)
{
  while (!(*(unsigned int (**)(void))(**(void **)a2 + 72))()
       || ((*(uint64_t (**)(void))(*(void *)*a3 + 72))() & 1) == 0)
  {
    if ((*(unsigned int (**)(void))(*(void *)*a3 + 72))())
    {
      (*(void (**)(void))(**(void **)a2 + 88))();
      if (((*(uint64_t (**)(void))(**(void **)a2 + 72))() & 1) == 0)
      {
        do
        {
          int v6 = *(_DWORD *)(a1 + 28);
          uint64_t v7 = (*(uint64_t (**)(void))(**(void **)a2 + 80))();
          uint64_t v8 = (unsigned int *)(v7 + 4);
          if (v6) {
            uint64_t v8 = (unsigned int *)v7;
          }
          if ((*(uint64_t (**)(void, void))(*(void *)*a3 + 64))(*a3, *v8)) {
            break;
          }
          (*(void (**)(void))(**(void **)a2 + 88))();
        }
        while (!(*(unsigned int (**)(void))(**(void **)a2 + 72))());
      }
    }
    while (((*(uint64_t (**)(void))(*(void *)*a3 + 72))() & 1) == 0)
    {
      uint64_t v9 = (*(uint64_t (**)(void))(**(void **)a2 + 80))();
      uint64_t v10 = (*(uint64_t (**)(void))(*(void *)*a3 + 80))();
      (*(void (**)(void))(*(void *)*a3 + 88))();
      int v11 = *(_DWORD *)(a1 + 28);
      if (v11) {
        uint64_t v12 = v10;
      }
      else {
        uint64_t v12 = v9;
      }
      uint64_t v13 = *(void *)v12;
      if (v11) {
        uint64_t v14 = v9;
      }
      else {
        uint64_t v14 = v10;
      }
      uint64_t v15 = *(void *)v14;
      uint64_t v16 = *(void *)(a1 + 16);
      char v17 = fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::FilterArc(*(unsigned __int8 **)(v16 + 136), SHIDWORD(v13), *(void *)v14);
      if (v17 != -1)
      {
        int v18 = *(_DWORD *)(v14 + 12);
        float v19 = *(float *)(v14 + 8);
        float v20 = *(float *)(v12 + 8);
        LODWORD(v25) = *(_DWORD *)(v12 + 12);
        HIDWORD(v25) = v18;
        char v26 = v17;
        *(_DWORD *)(a1 + 68) = v13;
        *(_DWORD *)(a1 + 72) = HIDWORD(v15);
        float v21 = NAN;
        if (v20 != -INFINITY && v19 != -INFINITY)
        {
          float v21 = INFINITY;
          BOOL v22 = v19 == INFINITY || v20 == INFINITY;
          float v23 = v20 + v19;
          if (!v22) {
            float v21 = v23;
          }
        }
        *(float *)(a1 + 76) = v21;
        *(_DWORD *)(a1 + 80) = fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::FindId(*(void **)(v16 + 176), &v25);
        return 1;
      }
    }
  }
  return 0;
}

uint64_t fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::FilterArc(unsigned __int8 *a1, int a2, int a3)
{
  if (a3 == -1)
  {
    uint64_t result = a1[40];
    if (result == 1) {
      return result;
    }
    if (result) {
      return 255;
    }
    if (a1[44]) {
      return 0;
    }
    if (a1[42]) {
      return 0xFFFFFFFFLL;
    }
    else {
      return 1;
    }
  }
  else
  {
    if (a2)
    {
      if (a2 != -1) {
        return 0;
      }
      uint64_t result = a1[40];
      if (result == 2) {
        return result;
      }
      if (!result)
      {
        if (!a1[43])
        {
          if (a1[41]) {
            return 0xFFFFFFFFLL;
          }
          else {
            return 2;
          }
        }
        return 0;
      }
      return 255;
    }
    if (a1[40]) {
      return 0xFFFFFFFFLL;
    }
    else {
      return 0;
    }
  }
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Value_(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48)) {
    return a1 + 52;
  }
  else {
    return a1 + 68;
  }
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Done_(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48)
    || !(*(unsigned int (**)(void))(***(void ***)(a1 + 32) + 72))(**(void **)(a1 + 32)))
  {
    return 0;
  }
  int v2 = *(uint64_t (**)(void))(***(void ***)(a1 + 40) + 72);
  return v2();
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Find_(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a1 + 48) = a2 == 0;
  if (*(_DWORD *)(a1 + 28))
  {
    if (a2)
    {
      int v2 = (void **)(a1 + 32);
      uint64_t v3 = (uint64_t *)(a1 + 40);
      return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindLabel<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(a1, a2, *v3, *v2);
    }
  }
  else if (a2)
  {
    int v2 = (void **)(a1 + 40);
    uint64_t v3 = (uint64_t *)(a1 + 32);
    return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindLabel<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(a1, a2, *v3, *v2);
  }
  return 1;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindLabel<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a3 + 64))();
  if (result)
  {
    int v8 = *(_DWORD *)(a1 + 28);
    uint64_t v9 = (*(uint64_t (**)(void))(**(void **)a3 + 80))();
    uint64_t v10 = (unsigned int *)(v9 + 4);
    if (v8) {
      uint64_t v10 = (unsigned int *)v9;
    }
    (*(void (**)(void, void))(*(void *)*a4 + 64))(*a4, *v10);
    return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindNext<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(a1, a3, a4);
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::SetState_(uint64_t result, int a2)
{
  if (*(_DWORD *)(result + 24) != a2)
  {
    uint64_t v2 = result;
    *(_DWORD *)(result + ++*(_DWORD *)(result + 24) = a2;
    uint64_t v3 = (unsigned int *)(*(void *)(*(void *)(*(void *)(result + 16) + 176) + 96) + 12 * a2);
    uint64_t v4 = v3[1];
    (*(void (**)(void, void))(***(void ***)(result + 32) + 56))(**(void **)(result + 32), *v3);
    uint64_t result = (*(uint64_t (**)(void, uint64_t))(***(void ***)(v2 + 40) + 56))(**(void **)(v2 + 40), v4);
    *(_DWORD *)(v2 + 64) = *(_DWORD *)(v2 + 24);
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Properties(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 84)) {
    return a2 | 4;
  }
  else {
    return a2;
  }
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::GetFst(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Type(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(void))(***(void ***)(a1 + 32) + 24))(**(void **)(a1 + 32));
  if (result != 3)
  {
    uint64_t result = (*(uint64_t (**)(void, uint64_t))(***(void ***)(a1 + 40) + 24))(**(void **)(a1 + 40), a2);
    if (result != 3)
    {
      if ((*(unsigned int (**)(void, uint64_t))(***(void ***)(a1 + 32) + 24))(**(void **)(a1 + 32), a2) != 4|| (uint64_t result = (*(uint64_t (**)(void, uint64_t))(***(void ***)(a1 + 40) + 24))(**(void **)(a1 + 40), a2), result != 4))
      {
        if ((*(unsigned int (**)(void, uint64_t))(***(void ***)(a1 + 32) + 24))(**(void **)(a1 + 32), a2) == 4&& (*(unsigned int (**)(void, uint64_t))(***(void ***)(a1 + 40) + 24))(**(void **)(a1 + 40), a2) == *(_DWORD *)(a1 + 28))
        {
          return 4;
        }
        else if ((*(unsigned int (**)(void, uint64_t))(***(void ***)(a1 + 32) + 24))(**(void **)(a1 + 32), a2) != *(_DWORD *)(a1 + 28)|| (uint64_t result = (*(uint64_t (**)(void, uint64_t))(***(void ***)(a1 + 40) + 24))(**(void **)(a1 + 40), a2), result != 4))
        {
          if ((*(unsigned int (**)(void, uint64_t))(***(void ***)(a1 + 32) + 24))(**(void **)(a1 + 32), a2) != *(_DWORD *)(a1 + 28))return 3; {
          uint64_t result = (*(uint64_t (**)(void, uint64_t))(***(void ***)(a1 + 40) + 24))(**(void **)(a1 + 40), a2);
          }
          if (result != *(_DWORD *)(a1 + 28)) {
            return 3;
          }
        }
      }
    }
  }
  return result;
}

void fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Copy()
{
}

void sub_20D41DF24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0) {
    operator delete(__p);
  }
  MEMORY[0x2105595E0](v18, 0x10E1C40868C5753);
  _Unwind_Resume(a1);
}

void fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstMatcher(void *a1)
{
  fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstMatcher(a1);
  JUMPOUT(0x2105595E0);
}

void *fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstMatcher(void *a1)
{
  *a1 = off_26C208118;
  uint64_t v2 = (void *)a1[4];
  if (v2)
  {
    if (*v2) {
      (*(void (**)(void))(*(void *)*v2 + 8))(*v2);
    }
    MEMORY[0x2105595E0](v2, 0x20C4093837F09);
  }
  uint64_t v3 = (void *)a1[5];
  if (v3)
  {
    if (*v3) {
      (*(void (**)(void))(*(void *)*v3 + 8))(*v3);
    }
    MEMORY[0x2105595E0](v3, 0x20C4093837F09);
  }
  return a1;
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Expand(uint64_t a1, int a2)
{
  uint64_t v4 = (unsigned int *)(*(void *)(*(void *)(a1 + 176) + 96) + 12 * a2);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  uint64_t v7 = *(void *)(a1 + 136);
  LOBYTE(__p[0]) = *((unsigned char *)v4 + 8);
  fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::SetState(v7, v5, v6, __p);
  int v8 = *(_DWORD *)(a1 + 184);
  if (!v8) {
    goto LABEL_28;
  }
  if (v8 != 1)
  {
    uint64_t v11 = (*(uint64_t (**)(void, uint64_t))(***(void ***)(a1 + 144) + 104))(**(void **)(a1 + 144), v5);
    uint64_t v12 = (*(uint64_t (**)(void, uint64_t))(***(void ***)(a1 + 152) + 104))(**(void **)(a1 + 152), v6);
    if (v11 == -1 && v12 == -1)
    {
      if (FLAGS_fst_error_fatal) {
        std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
      }
      else {
        std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
      }
      char v17 = fst::LogMessage::LogMessage((fst *)&v21, (uint64_t)__p);
      uint64_t v18 = (void *)fst::cerr(v17);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"ComposeFst: both sides can't require match", 42);
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v21);
      if (v20 < 0) {
        operator delete(__p[0]);
      }
      *(void *)(a1 + 8) |= 4uLL;
    }
    else
    {
      BOOL v15 = v12 == -1 || v11 <= v12;
      if (v11 == -1 || !v15) {
        goto LABEL_3;
      }
    }
LABEL_28:
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(a1, a2, v6, *(void *)(a1 + 160), v5, *(void **)(a1 + 152), 1);
    return;
  }
LABEL_3:
  uint64_t v9 = *(void *)(a1 + 168);
  uint64_t v10 = *(void **)(a1 + 144);
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(a1, a2, v5, v9, v6, v10, 0);
}

void sub_20D41E284(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, int a7)
{
  (*(void (**)(void, uint64_t))(*(void *)*a6 + 56))(*a6, a3);
  v18[0] = a7 - 1;
  v18[1] = a7 << 31 >> 31;
  v18[2] = 0;
  v18[3] = a5;
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(a1, a2, a6, v18, a7);
  unint64_t v17 = 0;
  (*(void (**)(uint64_t, uint64_t, void *))(*(void *)a4 + 136))(a4, a5, v15);
  while (1)
  {
    if (!v15[0])
    {
      unint64_t v14 = v17;
      if (v17 >= v15[2]) {
        goto LABEL_15;
      }
      goto LABEL_9;
    }
    if ((*(unsigned int (**)(void))(*(void *)v15[0] + 24))(v15[0])) {
      break;
    }
    if (!v15[0])
    {
      unint64_t v14 = v17;
LABEL_9:
      uint64_t v13 = (unsigned int *)(v15[1] + 16 * v14);
      goto LABEL_10;
    }
    uint64_t v13 = (unsigned int *)(*(uint64_t (**)(void))(*(void *)v15[0] + 32))();
LABEL_10:
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(a1, a2, a6, v13, a7);
    if (v15[0]) {
      (*(void (**)(void))(*(void *)v15[0] + 40))(v15[0]);
    }
    else {
      ++v17;
    }
  }
  if (v15[0])
  {
    (*(void (**)(void))(*(void *)v15[0] + 8))();
    goto LABEL_17;
  }
LABEL_15:
  if (v16) {
    --*v16;
  }
LABEL_17:
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::SetArcs(a1, a2);
}

void sub_20D41E4B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _DWORD *a13)
{
  if (a10)
  {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  else if (a13)
  {
    --*a13;
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(uint64_t a1, int a2, void *a3, unsigned int *a4, int a5)
{
  uint64_t v10 = a4 + 1;
  if (!a5) {
    uint64_t v10 = a4;
  }
  uint64_t result = (*(uint64_t (**)(void, void))(*(void *)*a3 + 64))(*a3, *v10);
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(void))(*(void *)*a3 + 72))();
    if ((result & 1) == 0)
    {
      do
      {
        long long v12 = *(_OWORD *)(*(uint64_t (**)(void))(*(void *)*a3 + 80))();
        long long v19 = *(_OWORD *)a4;
        long long v20 = v12;
        uint64_t v13 = *(unsigned __int8 **)(a1 + 136);
        if (a5)
        {
          char v14 = fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::FilterArc(v13, SDWORD1(v19), v20);
          if (v14 != -1)
          {
            char v15 = v14;
            uint64_t v16 = (unsigned int *)&v19;
            unint64_t v17 = &v20;
LABEL_10:
            fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::AddArc(a1, a2, v16, (uint64_t)v17, v15);
          }
        }
        else
        {
          char v18 = fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::FilterArc(v13, SDWORD1(v20), v19);
          if (v18 != -1)
          {
            char v15 = v18;
            uint64_t v16 = (unsigned int *)&v20;
            unint64_t v17 = &v19;
            goto LABEL_10;
          }
        }
        (*(void (**)(void))(*(void *)*a3 + 88))();
        uint64_t result = (*(uint64_t (**)(void))(*(void *)*a3 + 72))();
      }
      while (!result);
    }
  }
  return result;
}

void fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::SetArcs(uint64_t a1, int a2)
{
  uint64_t MutableState = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::GetMutableState(*(void *)(a1 + 120), a2);
  uint64_t v5 = *(void *)(a1 + 120);
  uint64_t v6 = *(void *)(MutableState + 24);
  uint64_t v7 = *(void *)(MutableState + 32);
  uint64_t v8 = v7 - v6;
  if (v7 != v6)
  {
    uint64_t v9 = v8 >> 4;
    if ((unint64_t)(v8 >> 4) <= 1) {
      uint64_t v9 = 1;
    }
    uint64_t v10 = (_DWORD *)(v6 + 4);
    do
    {
      if (!*(v10 - 1)) {
        ++*(void *)(MutableState + 8);
      }
      if (!*v10) {
        ++*(void *)(MutableState + 16);
      }
      v10 += 4;
      --v9;
    }
    while (v9);
  }
  if (*(unsigned char *)(v5 + 120))
  {
    if ((*(unsigned char *)(MutableState + 56) & 4) != 0)
    {
      unint64_t v11 = v8 + *(void *)(v5 + 128);
      *(void *)(v5 + 128) = v11;
      if (v11 > *(void *)(v5 + 112))
      {
        fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::GC(v5, MutableState, 0);
        uint64_t v6 = *(void *)(MutableState + 24);
        uint64_t v7 = *(void *)(MutableState + 32);
      }
    }
  }
  uint64_t v12 = v7 - v6;
  if (v12)
  {
    unint64_t v13 = v12 >> 4;
    int v14 = *(_DWORD *)(a1 + 68);
    if (v13 <= 1) {
      unint64_t v13 = 1;
    }
    char v15 = (int *)(v6 + 12);
    do
    {
      int v17 = *v15;
      v15 += 4;
      int v16 = v17;
      if (v17 >= v14)
      {
        int v14 = v16 + 1;
        *(_DWORD *)(a1 + 68) = v16 + 1;
      }
      --v13;
    }
    while (v13);
  }
  fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::SetExpandedState(a1, a2);
  *(_DWORD *)(MutableState + 56) |= 0xAu;
}

uint64_t fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::GetMutableState(uint64_t a1, int a2)
{
  uint64_t MutableState = fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::GetMutableState(a1, a2);
  uint64_t v4 = MutableState;
  if (*(unsigned char *)(a1 + 104))
  {
    int v5 = *(_DWORD *)(MutableState + 56);
    if ((v5 & 4) == 0)
    {
      *(_DWORD *)(MutableState + 56) = v5 | 4;
      unint64_t v6 = *(void *)(MutableState + 32) - *(void *)(MutableState + 24) + *(void *)(a1 + 128) + 64;
      *(void *)(a1 + 128) = v6;
      *(unsigned char *)(a1 + 120) = 1;
      if (v6 > *(void *)(a1 + 112)) {
        fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::GC(a1, MutableState, 0);
      }
    }
  }
  return v4;
}

void fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::GC(uint64_t a1, uint64_t a2, char a3)
{
  if (*(unsigned char *)(a1 + 120))
  {
    if (FLAGS_v >= 2)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
      unint64_t v6 = fst::LogMessage::LogMessage((fst *)v41, (uint64_t)__p);
      uint64_t v7 = (void *)fst::cerr(v6);
      uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"GCCacheStore: Enter GC: object = ", 33);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"(", 1);
      uint64_t v9 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"), free recently cached = ", 26);
      uint64_t v10 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)", cache std::string::size_type size = ", 15);
      unint64_t v11 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)", cache frac = ", 15);
      uint64_t v12 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)", cache limit = ", 16);
      unint64_t v13 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"\n", 1);
      fst::LogMessage::~LogMessage((fst::LogMessage *)v41);
      if (v46 < 0) {
        operator delete(__p[0]);
      }
    }
    unint64_t v14 = (unint64_t)(float)((float)*(unint64_t *)(a1 + 112) * 0.666);
    uint64_t v15 = *(void *)(a1 + 40);
    *(void *)(a1 + 64) = v15;
    while (v15 != a1 + 32)
    {
      int v16 = *(_DWORD *)(v15 + 16);
      if (v16) {
        int v17 = v16 - 1;
      }
      else {
        int v17 = *(_DWORD *)(a1 + 92);
      }
      uint64_t MutableState = fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::GetMutableState(a1, v17);
      unint64_t v19 = *(void *)(a1 + 128);
      if (v19 > v14 && !*(_DWORD *)(MutableState + 60))
      {
        if (a3)
        {
          if (MutableState != a2)
          {
            int v20 = *(_DWORD *)(MutableState + 56);
LABEL_19:
            if ((v20 & 4) != 0)
            {
              unint64_t v21 = *(void *)(MutableState + 32) - *(void *)(MutableState + 24) + 64;
              FstCheck(v21 <= v19, "(size) <= (cache_size_)", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/tools/openfst/src/include/fst/cache.h");
              *(void *)(a1 + 128) -= v21;
            }
            uint64_t v22 = *(void *)(a1 + 64);
            int v23 = *(_DWORD *)(v22 + 16);
            if (!v23 || v23 - 1 == *(_DWORD *)(a1 + 92))
            {
              *(_DWORD *)(a1 + 92) = -1;
              *(void *)(a1 + 96) = 0;
              int v23 = *(_DWORD *)(v22 + 16);
            }
            fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Destroy(*(void *)(*(void *)(a1 + 8) + 8 * v23), (uint64_t *)(a1 + 72));
            *(void *)(*(void *)(a1 + 8) + 8 * *(int *)(*(void *)(a1 + 64) + 16)) = 0;
            unint64_t v24 = *(uint64_t **)(a1 + 64);
            uint64_t v25 = v24[1];
            *(void *)(a1 + 64) = v25;
            uint64_t v26 = *v24;
            *(void *)(v26 + 8) = v25;
            *(void *)v24[1] = v26;
            uint64_t v27 = *(void *)(a1 + 56);
            --*(void *)(a1 + 48);
            std::__list_imp<int,fst::PoolAllocator<int>>::__delete_node[abi:ne180100]<>(v27, (uint64_t)v24);
            uint64_t v15 = *(void *)(a1 + 64);
            continue;
          }
        }
        else
        {
          int v20 = *(_DWORD *)(MutableState + 56);
          if ((v20 & 8) == 0 && MutableState != a2) {
            goto LABEL_19;
          }
        }
      }
      *(_DWORD *)(MutableState + 56) &= ~8u;
      uint64_t v15 = *(void *)(*(void *)(a1 + 64) + 8);
      *(void *)(a1 + 64) = v15;
    }
    unint64_t v28 = *(void *)(a1 + 128);
    if ((a3 & 1) != 0 || v28 <= v14)
    {
      if (v14)
      {
        if (v28 > v14)
        {
          uint64_t v29 = *(void *)(a1 + 112);
          do
          {
            v29 *= 2;
            BOOL v30 = v28 > 2 * v14;
            v14 *= 2;
          }
          while (v30);
          *(void *)(a1 + 112) = v29;
        }
      }
      else if (v28)
      {
        if (FLAGS_fst_error_fatal) {
          std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
        }
        else {
          std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
        }
        int v31 = fst::LogMessage::LogMessage((fst *)&v44, (uint64_t)__p);
        uint64_t v32 = (void *)fst::cerr(v31);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"GCCacheStore:GC: Unable to free all cached states", 49);
        fst::LogMessage::~LogMessage((fst::LogMessage *)&v44);
        if (v46 < 0) {
          operator delete(__p[0]);
        }
      }
    }
    else
    {
      fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::GC(a1, a2, 1);
    }
    if (FLAGS_v >= 2)
    {
      std::string::basic_string[abi:ne180100]<0>(v41, "INFO");
      uint64_t v33 = fst::LogMessage::LogMessage((fst *)&v43, (uint64_t)v41);
      float v34 = (void *)fst::cerr(v33);
      unint64_t v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"GCCacheStore: Exit GC: object = ", 32);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"(", 1);
      unsigned __int8 v36 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"), free recently cached = ", 26);
      float v37 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)", cache std::string::size_type size = ", 15);
      float v38 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)", cache frac = ", 15);
      float v39 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)", cache limit = ", 16);
      unint64_t v40 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"\n", 1);
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v43);
      if (v42 < 0) {
        operator delete(v41[0]);
      }
    }
  }
}

void sub_20D41EC94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::GetMutableState(uint64_t a1, int a2)
{
  int v3 = *(_DWORD *)(a1 + 92);
  if (v3 == a2) {
    return *(void *)(a1 + 96);
  }
  if (*(unsigned char *)(a1 + 88))
  {
    if (v3 == -1)
    {
      *(_DWORD *)(a1 + 92) = a2;
      uint64_t MutableState = fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::GetMutableState(a1, 0);
      uint64_t v4 = MutableState;
      *(void *)(a1 + 96) = MutableState;
      *(_DWORD *)(MutableState + 56) |= 4u;
      uint64_t v9 = *(void *)(MutableState + 40);
      uint64_t v10 = *(void *)(MutableState + 24);
      if ((unint64_t)(v9 - v10) > 0x7FF) {
        return v4;
      }
      unint64_t v11 = *(void *)(MutableState + 32);
      uint64_t v19 = MutableState + 48;
      uint64_t v12 = (char *)operator new(0x800uLL);
      unint64_t v13 = &v12[(v11 - v10) & 0xFFFFFFFFFFFFFFF0];
      if (v11 == v10)
      {
        int64x2_t v15 = vdupq_n_s64(v11);
        unint64_t v14 = &v12[(v11 - v10) & 0xFFFFFFFFFFFFFFF0];
      }
      else
      {
        unint64_t v14 = &v12[(v11 - v10) & 0xFFFFFFFFFFFFFFF0];
        do
        {
          *((_OWORD *)v14 - 1) = *(_OWORD *)(v11 - 16);
          v14 -= 16;
          v11 -= 16;
        }
        while (v11 != v10);
        int64x2_t v15 = *(int64x2_t *)(v4 + 24);
      }
      *(void *)(v4 + ++*(_DWORD *)(result + 24) = v14;
      *(void *)(v4 + 32) = v13;
      int64x2_t v17 = v15;
      *(void *)(v4 + 40) = v12 + 2048;
      uint64_t v18 = v9;
      uint64_t v16 = v15.i64[0];
      std::__split_buffer<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &>::~__split_buffer((uint64_t)&v16);
      return *(void *)(a1 + 96);
    }
    uint64_t v6 = *(void *)(a1 + 96);
    if (!*(_DWORD *)(v6 + 60))
    {
      *(_DWORD *)(a1 + 92) = a2;
      *(_DWORD *)uint64_t v6 = 2139095040;
      *(void *)(v6 + 56) = 0;
      *(void *)(v6 + 8) = 0;
      *(void *)(v6 + 16) = 0;
      *(void *)(v6 + 32) = *(void *)(v6 + 24);
      uint64_t v4 = *(void *)(a1 + 96);
      *(_DWORD *)(v4 + 56) |= 4u;
      return v4;
    }
    *(_DWORD *)(v6 + 56) &= ~4u;
    *(unsigned char *)(a1 + 88) = 0;
  }
  int v7 = a2 + 1;
  return fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::GetMutableState(a1, v7);
}

uint64_t fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::GetMutableState(uint64_t a1, int a2)
{
  int v31 = a2;
  uint64_t v3 = a2;
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v4 = *(void **)(a1 + 16);
  unint64_t v6 = ((uint64_t)v4 - v5) >> 3;
  if (v6 <= a2)
  {
    unint64_t v8 = a2 + 1;
    unint64_t v9 = v8 - v6;
    if (v8 <= v6)
    {
      if (a2 + 1 < v6) {
        *(void *)(a1 + 16) = v5 + 8 * v8;
      }
    }
    else
    {
      uint64_t v10 = *(void *)(a1 + 24);
      if (v9 <= (v10 - (uint64_t)v4) >> 3)
      {
        unint64_t v24 = &v4[v9];
        uint64_t v25 = 8 * v8 - 8 * v6;
        do
        {
          *v4++ = 0;
          v25 -= 8;
        }
        while (v25);
        *(void *)(a1 + 16) = v24;
      }
      else
      {
        if (a2 <= -2) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v11 = v10 - v5;
        unint64_t v12 = (v10 - v5) >> 2;
        if (v12 <= v8) {
          unint64_t v12 = a2 + 1;
        }
        if (v11 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v13 = v12;
        }
        unint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<RateMarker>>(v13);
        uint64_t v16 = &v14[8 * v6];
        int64x2_t v17 = &v14[8 * v8];
        uint64_t v18 = 8 * v8 - 8 * v6;
        uint64_t v19 = v16;
        do
        {
          *(void *)uint64_t v19 = 0;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
        int v20 = &v14[8 * v15];
        uint64_t v22 = *(char **)(a1 + 8);
        unint64_t v21 = *(char **)(a1 + 16);
        if (v21 != v22)
        {
          do
          {
            uint64_t v23 = *((void *)v21 - 1);
            v21 -= 8;
            *((void *)v16 - 1) = v23;
            v16 -= 8;
          }
          while (v21 != v22);
          unint64_t v21 = *(char **)(a1 + 8);
        }
        *(void *)(a1 + 8) = v16;
        *(void *)(a1 + 16) = v17;
        *(void *)(a1 + ++*(_DWORD *)(result + 24) = v20;
        if (v21) {
          operator delete(v21);
        }
      }
    }
  }
  else
  {
    uint64_t v7 = *(void *)(v5 + 8 * a2);
    if (v7) {
      return v7;
    }
  }
  uint64_t v7 = fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::allocate((uint64_t *)(a1 + 72));
  *(_DWORD *)uint64_t v7 = 2139095040;
  *(_OWORD *)(v7 + 8) = 0u;
  *(_OWORD *)(v7 + ++*(_DWORD *)(result + 24) = 0u;
  *(void *)(v7 + 40) = 0;
  uint64_t v26 = *(void *)(a1 + 80);
  *(void *)(v7 + 48) = v26;
  ++*(void *)(v26 + 8);
  *(void *)(v7 + 56) = 0;
  *(void *)(*(void *)(a1 + 8) + 8 * v3) = v7;
  if (*(unsigned char *)a1)
  {
    uint64_t v27 = std::__list_imp<int,fst::PoolAllocator<int>>::__create_node[abi:ne180100]<int const&>(*(fst::MemoryPoolCollection **)(a1 + 56), &v31);
    uint64_t v29 = *(void *)(a1 + 32);
    unint64_t v28 = (void *)(a1 + 32);
    *uint64_t v27 = v29;
    v27[1] = v28;
    *(void *)(v29 + 8) = v27;
    *unint64_t v28 = v27;
    ++v28[2];
  }
  return v7;
}

void *fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::allocate(uint64_t *a1, unint64_t a2)
{
  if (a2 == 2)
  {
    uint64_t v6 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<2>>(*a1);
    uint64_t v3 = (void *)v6;
    uint64_t v4 = *(void **)(v6 + 56);
    if (!v4)
    {
      unint64_t v11 = *(void *)(v6 + 16);
      if (v11 <= 0x9F) {
        operator new[]();
      }
      uint64_t v15 = v3[3];
      if (v15 + 40 > v11) {
        operator new[]();
      }
      uint64_t v4 = (void *)(*(void *)(v3[5] + 16) + v15);
      void v3[3] = v15 + 40;
      v4[4] = 0;
      return v4;
    }
    uint64_t v5 = v4[4];
LABEL_13:
    v3[7] = v5;
    return v4;
  }
  if (a2 == 1)
  {
    uint64_t v2 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<1>>(*a1);
    uint64_t v3 = (void *)v2;
    uint64_t v4 = *(void **)(v2 + 56);
    if (!v4)
    {
      unint64_t v10 = *(void *)(v2 + 16);
      if (v10 <= 0x5F) {
        operator new[]();
      }
      uint64_t v14 = v3[3];
      if (v14 + 24 > v10) {
        operator new[]();
      }
      uint64_t v4 = (void *)(*(void *)(v3[5] + 16) + v14);
      void v3[3] = v14 + 24;
      v4[2] = 0;
      return v4;
    }
    uint64_t v5 = v4[2];
    goto LABEL_13;
  }
  if (a2 <= 4)
  {
    uint64_t v7 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<4>>(*a1);
    uint64_t v3 = (void *)v7;
    uint64_t v4 = *(void **)(v7 + 56);
    if (!v4)
    {
      unint64_t v16 = *(void *)(v7 + 16);
      if (v16 <= 0x11F) {
        operator new[]();
      }
      uint64_t v18 = v3[3];
      if (v18 + 72 > v16) {
        operator new[]();
      }
      uint64_t v4 = (void *)(*(void *)(v3[5] + 16) + v18);
      void v3[3] = v18 + 72;
      v4[8] = 0;
      return v4;
    }
    uint64_t v5 = v4[8];
    goto LABEL_13;
  }
  if (a2 <= 8)
  {
    uint64_t v8 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<8>>(*a1);
    uint64_t v3 = (void *)v8;
    uint64_t v4 = *(void **)(v8 + 56);
    if (!v4)
    {
      unint64_t v17 = *(void *)(v8 + 16);
      if (v17 <= 0x21F) {
        operator new[]();
      }
      uint64_t v19 = v3[3];
      if (v19 + 136 > v17) {
        operator new[]();
      }
      uint64_t v4 = (void *)(*(void *)(v3[5] + 16) + v19);
      void v3[3] = v19 + 136;
      v4[16] = 0;
      return v4;
    }
    uint64_t v5 = v4[16];
    goto LABEL_13;
  }
  if (a2 <= 0x10)
  {
    uint64_t v12 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<16>>(*a1);
    uint64_t v4 = *(void **)(v12 + 56);
    if (!v4)
    {
      uint64_t v4 = (void *)fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<32>>::Link>::Allocate((void *)(v12 + 8));
      v4[32] = 0;
      return v4;
    }
    uint64_t v13 = v4[32];
    goto LABEL_40;
  }
  if (a2 <= 0x20)
  {
    uint64_t v12 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<32>>(*a1);
    uint64_t v4 = *(void **)(v12 + 56);
    if (!v4)
    {
      uint64_t v4 = (void *)fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<64>>::Link>::Allocate((void *)(v12 + 8));
      v4[64] = 0;
      return v4;
    }
    uint64_t v13 = v4[64];
    goto LABEL_40;
  }
  if (a2 <= 0x40)
  {
    uint64_t v12 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<64>>(*a1);
    uint64_t v4 = *(void **)(v12 + 56);
    if (!v4)
    {
      uint64_t v4 = (void *)fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<64>>::Link>::Allocate((void *)(v12 + 8));
      v4[128] = 0;
      return v4;
    }
    uint64_t v13 = v4[128];
LABEL_40:
    *(void *)(v12 + 56) = v13;
    return v4;
  }
  if (a2 >> 60) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(16 * a2);
}

uint64_t std::__split_buffer<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != v3) {
    *(void *)(a1 + 16) = v2 + ((v3 - v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  }
  if (*(void *)a1) {
    fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::deallocate(*(uint64_t **)(a1 + 32), *(void **)a1, (uint64_t)(*(void *)(a1 + 24) - *(void *)a1) >> 4);
  }
  return a1;
}

uint64_t fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<64>>::Link>::Allocate(void *a1)
{
  unint64_t v2 = a1[1];
  if (v2 >> 5 <= 0x80) {
    operator new[]();
  }
  uint64_t v3 = a1[2];
  if (v3 + 1032 > v2) {
    operator new[]();
  }
  uint64_t v4 = *(void *)(a1[4] + 16) + v3;
  a1[2] = v3 + 1032;
  return v4;
}

uint64_t fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::allocate(uint64_t *a1)
{
  uint64_t v1 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<1>>(*a1);
  uint64_t v2 = v1;
  uint64_t v3 = *(void *)(v1 + 56);
  if (v3)
  {
    *(void *)(v1 + 56) = *(void *)(v3 + 64);
  }
  else
  {
    unint64_t v4 = *(void *)(v1 + 16);
    if (v4 <= 0x11F) {
      operator new[]();
    }
    uint64_t v5 = *(void *)(v2 + 24);
    if (v5 + 72 > v4) {
      operator new[]();
    }
    uint64_t v3 = *(void *)(*(void *)(v2 + 40) + 16) + v5;
    *(void *)(v2 + ++*(_DWORD *)(result + 24) = v5 + 72;
    *(void *)(v3 + 64) = 0;
  }
  return v3;
}

void *fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::AddArc(uint64_t a1, int a2, unsigned int *a3, uint64_t a4, char a5)
{
  int v7 = *(_DWORD *)(a4 + 12);
  LODWORD(v18) = a3[3];
  HIDWORD(v18) = v7;
  char v19 = a5;
  unsigned int v8 = *a3;
  unsigned int v9 = *(_DWORD *)(a4 + 4);
  float v10 = *((float *)a3 + 2);
  float v11 = NAN;
  if (v10 != -INFINITY)
  {
    float v12 = *(float *)(a4 + 8);
    if (v12 != -INFINITY)
    {
      if (v12 == INFINITY || v10 == INFINITY) {
        float v11 = INFINITY;
      }
      else {
        float v11 = v10 + v12;
      }
    }
  }
  unsigned int Id = fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::FindId(*(void **)(a1 + 176), &v18);
  *(void *)&long long v17 = __PAIR64__(v9, v8);
  *((void *)&v17 + 1) = __PAIR64__(Id, LODWORD(v11));
  uint64_t MutableState = (void *)fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::GetMutableState(*(void *)(a1 + 120), a2);
  return fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::PushArc(MutableState, &v17);
}

void *fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::PushArc(void *result, _OWORD *a2)
{
  uint64_t v3 = result;
  uint64_t v5 = (_OWORD *)result[4];
  unint64_t v4 = result[5];
  if ((unint64_t)v5 >= v4)
  {
    uint64_t v7 = result[3];
    uint64_t v8 = ((uint64_t)v5 - v7) >> 4;
    unint64_t v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 60) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    float v10 = result + 6;
    uint64_t v11 = v4 - v7;
    if (v11 >> 3 > v9) {
      unint64_t v9 = v11 >> 3;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    uint64_t v23 = v3 + 6;
    if (v12) {
      uint64_t v13 = fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::allocate(v10, v12);
    }
    else {
      uint64_t v13 = 0;
    }
    uint64_t v14 = &v13[2 * v8];
    _OWORD *v14 = *a2;
    uint64_t v15 = v3[3];
    unint64_t v16 = v3[4];
    if (v16 == v15)
    {
      int64x2_t v18 = vdupq_n_s64(v16);
      long long v17 = &v13[2 * v8];
    }
    else
    {
      long long v17 = &v13[2 * v8];
      do
      {
        *((_OWORD *)v17 - 1) = *(_OWORD *)(v16 - 16);
        v17 -= 2;
        v16 -= 16;
      }
      while (v16 != v15);
      int64x2_t v18 = *(int64x2_t *)(v3 + 3);
    }
    uint64_t v6 = v14 + 1;
    void v3[3] = v17;
    v3[4] = v14 + 1;
    int64x2_t v21 = v18;
    uint64_t v19 = v3[5];
    v3[5] = &v13[2 * v12];
    uint64_t v22 = v19;
    uint64_t v20 = v18.i64[0];
    uint64_t result = (void *)std::__split_buffer<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &>::~__split_buffer((uint64_t)&v20);
  }
  else
  {
    *uint64_t v5 = *a2;
    uint64_t v6 = v5 + 1;
  }
  v3[4] = v6;
  return result;
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Copy()
{
}

void sub_20D41FABC(_Unwind_Exception *a1)
{
  MEMORY[0x2105595E0](v2, 0x10E0C40EB25B5FDLL);
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~CacheBaseImpl(v1);
  MEMORY[0x2105595E0](v1, 0x10F3C405A371F01);
  _Unwind_Resume(a1);
}

void fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::ComposeFstImplBase(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_26C2088C8;
  *(void *)(a1 + 8) = 0;
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 16), "null");
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(void *)a1 = off_26C207978;
  *(unsigned char *)(a1 + 60) = 0;
  *(_DWORD *)(a1 + 64) = -1;
  *(_OWORD *)(a1 + 68) = 0u;
  *(_OWORD *)(a1 + 84) = 0u;
  *(_DWORD *)(a1 + 100) = -1;
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  operator new();
}

void sub_20D41FFB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13)
{
  MEMORY[0x2105595E0](v14, 0x10A0C40690396FALL);
  if (*a13) {
    operator delete(*a13);
  }
  fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::~FstImpl(v13);
  _Unwind_Resume(a1);
}

void fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::CompactHashBiTable(uint64_t a1)
{
  *(void *)(a1 + 8) = a1;
  *(void *)(a1 + 16) = a1;
  std::unordered_set<int,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::HashFunc,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::HashEqual,fst::PoolAllocator<int>>::unordered_set();
}

void sub_20D420120(_Unwind_Exception *a1)
{
  uint64_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v2 + 104) = v5;
    operator delete(v5);
  }
  std::__hash_table<int,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::HashFunc,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::HashEqual,fst::PoolAllocator<int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::InitMatcher()
{
  return 0;
}

void fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::VectorCacheStore(uint64_t a1, char a2)
{
  *(unsigned char *)a1 = a2;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + ++*(_DWORD *)(result + 24) = 0;
  *(void *)(a1 + 32) = a1 + 32;
  *(void *)(a1 + 40) = a1 + 32;
  *(void *)(a1 + 48) = 0;
  operator new();
}

void sub_20D420250(_Unwind_Exception *a1)
{
  fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~PoolAllocator(v4);
  fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~PoolAllocator((fst::MemoryPoolCollection **)(v1 + 72));
  std::__list_imp<int,fst::PoolAllocator<int>>::clear(v2);
  fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~PoolAllocator((fst::MemoryPoolCollection **)(v1 + 56));
  uint64_t v6 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 16) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Properties(uint64_t a1, uint64_t a2)
{
  if ((a2 & 4) != 0
    && ((*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 160) + 64))(*(void *)(a1 + 160), 4, 0)|| (*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 168) + 64))(*(void *)(a1 + 168), 4, 0)|| ((*(uint64_t (**)(void, void))(***(void ***)(a1 + 144) + 40))(**(void **)(a1 + 144), 0) & 4) != 0|| ((*(uint64_t (**)(void, void))(***(void ***)(a1 + 152) + 40))(**(void **)(a1 + 152), 0) & 4) != 0))
  {
    *(void *)(a1 + 8) |= 4uLL;
  }
  return *(void *)(a1 + 8) & a2;
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Properties(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 0x3FFFFFFF0007);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(void *a1)
{
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(a1);
  JUMPOUT(0x2105595E0);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(void *a1)
{
  *a1 = off_26C207C80;
  uint64_t v2 = a1[17];
  if (v2)
  {
    uint64_t v3 = *(void **)v2;
    if (*(void *)v2)
    {
      if (*v3) {
        (*(void (**)(void))(*(void *)*v3 + 8))(*v3);
      }
      MEMORY[0x2105595E0](v3, 0x20C4093837F09);
    }
    unint64_t v4 = *(void **)(v2 + 8);
    if (v4)
    {
      if (*v4) {
        (*(void (**)(void))(*(void *)*v4 + 8))(*v4);
      }
      MEMORY[0x2105595E0](v4, 0x20C4093837F09);
    }
    MEMORY[0x2105595E0](v2, 0x1060C4035244DBALL);
  }
  uint64_t v5 = a1[22];
  if (v5)
  {
    uint64_t v6 = *(void **)(v5 + 96);
    if (v6)
    {
      *(void *)(v5 + 104) = v6;
      operator delete(v6);
    }
    std::__hash_table<int,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::HashFunc,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::HashEqual,fst::PoolAllocator<int>>::~__hash_table(v5 + 24);
    MEMORY[0x2105595E0](v5, 0x10E0C40EB25B5FDLL);
  }
  return fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~CacheBaseImpl(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComputeFinal(uint64_t a1, int a2)
{
  uint64_t v4 = *(void *)(*(void *)(a1 + 176) + 96);
  uint64_t v5 = (int *)(v4 + 12 * a2);
  int v6 = *v5;
  float v7 = (*(float (**)(void, void))(***(void ***)(a1 + 144) + 96))(**(void **)(a1 + 144), *v5);
  float v11 = v7;
  if (v7 != INFINITY)
  {
    uint64_t v8 = v5[1];
    float v9 = (*(float (**)(void, uint64_t))(***(void ***)(a1 + 152) + 96))(**(void **)(a1 + 152), v8);
    float v11 = v9;
    if (v9 != INFINITY)
    {
      uint64_t v10 = *(void *)(a1 + 136);
      LOBYTE(v11) = *(unsigned char *)(v4 + 12 * a2 + 8);
      fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::SetState(v10, v6, v8, &v11);
    }
  }
}

void fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::SetState(uint64_t a1, int a2, uint64_t a3, unsigned char *a4)
{
  if (*(_DWORD *)(a1 + 24) != a2 || *(_DWORD *)(a1 + 28) != a3 || *a4 != *(unsigned char *)(a1 + 32))
  {
    *(_DWORD *)(a1 + ++*(_DWORD *)(result + 24) = a2;
    *(_DWORD *)(a1 + 28) = a3;
    *(unsigned char *)(a1 + 32) = *a4;
    uint64_t v6 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 40))(*(void *)(a1 + 16), a3);
    uint64_t v7 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 48))(*(void *)(a1 + 16), a3);
    BOOL v9 = (*(float (**)(void, uint64_t))(**(void **)(a1 + 16) + 32))(*(void *)(a1 + 16), a3) == INFINITY
      && v6 == v7;
    *(unsigned char *)(a1 + 33) = v9;
    *(unsigned char *)(a1 + 34) = v7 == 0;
  }
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComputeStart(void **a1)
{
  uint64_t result = (*(uint64_t (**)(void *))(*a1[20] + 24))(a1[20]);
  if (result != -1)
  {
    unsigned int v3 = result;
    uint64_t result = (*(uint64_t (**)(void *))(*a1[21] + 24))(a1[21]);
    if (result != -1)
    {
      unint64_t v4 = __PAIR64__(result, v3);
      char v5 = 0;
      return fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::FindId(a1[22], (uint64_t *)&v4);
    }
  }
  return result;
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::InitMatcher(uint64_t a1, uint64_t a2, int a3)
{
  if ((*(unsigned int (**)(void, void))(***(void ***)(a1 + 144) + 24))(**(void **)(a1 + 144), 0) == a3
    && (*(unsigned int (**)(void, void))(***(void ***)(a1 + 152) + 24))(**(void **)(a1 + 152), 0) == a3)
  {
    operator new();
  }
  return 0;
}

void sub_20D4209E0(_Unwind_Exception *a1)
{
  MEMORY[0x2105595E0](v1, 0x10E1C40868C5753);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Priority_(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))();
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Next_(uint64_t result)
{
  if (*(unsigned char *)(result + 48))
  {
    *(unsigned char *)(result + 48) = 0;
  }
  else
  {
    if (*(_DWORD *)(result + 28))
    {
      uint64_t v2 = *(void **)(result + 32);
      uint64_t v1 = *(void *)(result + 40);
    }
    else
    {
      uint64_t v1 = *(void *)(result + 32);
      uint64_t v2 = *(void **)(result + 40);
    }
    return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindNext<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(result, v1, v2);
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindNext<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(uint64_t a1, uint64_t a2, void *a3)
{
uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Value_(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48)) {
    return a1 + 52;
  }
  else {
    return a1 + 68;
  }
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Done_(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48)
    || !(*(unsigned int (**)(void))(***(void ***)(a1 + 32) + 72))(**(void **)(a1 + 32)))
  {
    return 0;
  }
  uint64_t v2 = *(uint64_t (**)(void))(***(void ***)(a1 + 40) + 72);
  return v2();
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Find_(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a1 + 48) = a2 == 0;
  if (*(_DWORD *)(a1 + 28))
  {
    if (a2)
    {
      uint64_t v2 = (void **)(a1 + 32);
      unsigned int v3 = (uint64_t *)(a1 + 40);
      return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindLabel<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(a1, a2, *v3, *v2);
    }
  }
  else if (a2)
  {
    uint64_t v2 = (void **)(a1 + 40);
    unsigned int v3 = (uint64_t *)(a1 + 32);
    return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindLabel<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(a1, a2, *v3, *v2);
  }
  return 1;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindLabel<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a3 + 64))();
  if (result)
  {
    int v8 = *(_DWORD *)(a1 + 28);
    uint64_t v9 = (*(uint64_t (**)(void))(**(void **)a3 + 80))();
    uint64_t v10 = (unsigned int *)(v9 + 4);
    if (v8) {
      uint64_t v10 = (unsigned int *)v9;
    }
    (*(void (**)(void, void))(*(void *)*a4 + 64))(*a4, *v10);
    return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindNext<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(a1, a3, a4);
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::SetState_(uint64_t result, int a2)
{
  if (*(_DWORD *)(result + 24) != a2)
  {
    uint64_t v2 = result;
    *(_DWORD *)(result + ++*(_DWORD *)(result + 24) = a2;
    unsigned int v3 = (unsigned int *)(*(void *)(*(void *)(*(void *)(result + 16) + 176) + 96) + 12 * a2);
    uint64_t v4 = v3[1];
    (*(void (**)(void, void))(***(void ***)(result + 32) + 56))(**(void **)(result + 32), *v3);
    uint64_t result = (*(uint64_t (**)(void, uint64_t))(***(void ***)(v2 + 40) + 56))(**(void **)(v2 + 40), v4);
    *(_DWORD *)(v2 + 64) = *(_DWORD *)(v2 + 24);
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Properties(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 84)) {
    return a2 | 4;
  }
  else {
    return a2;
  }
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::GetFst(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Type(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(void))(***(void ***)(a1 + 32) + 24))(**(void **)(a1 + 32));
  if (result != 3)
  {
    uint64_t result = (*(uint64_t (**)(void, uint64_t))(***(void ***)(a1 + 40) + 24))(**(void **)(a1 + 40), a2);
    if (result != 3)
    {
      if ((*(unsigned int (**)(void, uint64_t))(***(void ***)(a1 + 32) + 24))(**(void **)(a1 + 32), a2) != 4|| (uint64_t result = (*(uint64_t (**)(void, uint64_t))(***(void ***)(a1 + 40) + 24))(**(void **)(a1 + 40), a2), result != 4))
      {
        if ((*(unsigned int (**)(void, uint64_t))(***(void ***)(a1 + 32) + 24))(**(void **)(a1 + 32), a2) == 4&& (*(unsigned int (**)(void, uint64_t))(***(void ***)(a1 + 40) + 24))(**(void **)(a1 + 40), a2) == *(_DWORD *)(a1 + 28))
        {
          return 4;
        }
        else if ((*(unsigned int (**)(void, uint64_t))(***(void ***)(a1 + 32) + 24))(**(void **)(a1 + 32), a2) != *(_DWORD *)(a1 + 28)|| (uint64_t result = (*(uint64_t (**)(void, uint64_t))(***(void ***)(a1 + 40) + 24))(**(void **)(a1 + 40), a2), result != 4))
        {
          if ((*(unsigned int (**)(void, uint64_t))(***(void ***)(a1 + 32) + 24))(**(void **)(a1 + 32), a2) != *(_DWORD *)(a1 + 28))return 3; {
          uint64_t result = (*(uint64_t (**)(void, uint64_t))(***(void ***)(a1 + 40) + 24))(**(void **)(a1 + 40), a2);
          }
          if (result != *(_DWORD *)(a1 + 28)) {
            return 3;
          }
        }
      }
    }
  }
  return result;
}

void fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Copy()
{
}

void sub_20D421434(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0) {
    operator delete(__p);
  }
  MEMORY[0x2105595E0](v18, 0x10E1C40868C5753);
  _Unwind_Resume(a1);
}

void fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstMatcher(void *a1)
{
  fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstMatcher(a1);
  JUMPOUT(0x2105595E0);
}

void *fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstMatcher(void *a1)
{
  *a1 = off_26C208218;
  uint64_t v2 = (void *)a1[4];
  if (v2)
  {
    if (*v2) {
      (*(void (**)(void))(*(void *)*v2 + 8))(*v2);
    }
    MEMORY[0x2105595E0](v2, 0x20C4093837F09);
  }
  unsigned int v3 = (void *)a1[5];
  if (v3)
  {
    if (*v3) {
      (*(void (**)(void))(*(void *)*v3 + 8))(*v3);
    }
    MEMORY[0x2105595E0](v3, 0x20C4093837F09);
  }
  return a1;
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Expand(uint64_t a1, int a2)
{
  uint64_t v4 = (unsigned int *)(*(void *)(*(void *)(a1 + 176) + 96) + 12 * a2);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  uint64_t v7 = *(void *)(a1 + 136);
  LOBYTE(__p[0]) = *((unsigned char *)v4 + 8);
  fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::SetState(v7, v5, v6, __p);
  int v8 = *(_DWORD *)(a1 + 184);
  if (!v8) {
    goto LABEL_28;
  }
  if (v8 != 1)
  {
    uint64_t v11 = (*(uint64_t (**)(void, uint64_t))(***(void ***)(a1 + 144) + 104))(**(void **)(a1 + 144), v5);
    uint64_t v12 = (*(uint64_t (**)(void, uint64_t))(***(void ***)(a1 + 152) + 104))(**(void **)(a1 + 152), v6);
    if (v11 == -1 && v12 == -1)
    {
      if (FLAGS_fst_error_fatal) {
        std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
      }
      else {
        std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
      }
      uint64_t v17 = fst::LogMessage::LogMessage((fst *)&v21, (uint64_t)__p);
      uint64_t v18 = (void *)fst::cerr(v17);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"ComposeFst: both sides can't require match", 42);
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v21);
      if (v20 < 0) {
        operator delete(__p[0]);
      }
      *(void *)(a1 + 8) |= 4uLL;
    }
    else
    {
      BOOL v15 = v12 == -1 || v11 <= v12;
      if (v11 == -1 || !v15) {
        goto LABEL_3;
      }
    }
LABEL_28:
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(a1, a2, v6, *(void *)(a1 + 160), v5, *(void **)(a1 + 152), 1);
    return;
  }
LABEL_3:
  uint64_t v9 = *(void *)(a1 + 168);
  uint64_t v10 = *(void **)(a1 + 144);
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(a1, a2, v5, v9, v6, v10, 0);
}

void sub_20D421794(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, int a7)
{
  (*(void (**)(void, uint64_t))(*(void *)*a6 + 56))(*a6, a3);
  v18[0] = a7 - 1;
  v18[1] = a7 << 31 >> 31;
  v18[2] = 0;
  v18[3] = a5;
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(a1, a2, a6, v18, a7);
  unint64_t v17 = 0;
  (*(void (**)(uint64_t, uint64_t, void *))(*(void *)a4 + 136))(a4, a5, v15);
  while (1)
  {
    if (!v15[0])
    {
      unint64_t v14 = v17;
      if (v17 >= v15[2]) {
        goto LABEL_15;
      }
      goto LABEL_9;
    }
    if ((*(unsigned int (**)(void))(*(void *)v15[0] + 24))(v15[0])) {
      break;
    }
    if (!v15[0])
    {
      unint64_t v14 = v17;
LABEL_9:
      uint64_t v13 = (unsigned int *)(v15[1] + 16 * v14);
      goto LABEL_10;
    }
    uint64_t v13 = (unsigned int *)(*(uint64_t (**)(void))(*(void *)v15[0] + 32))();
LABEL_10:
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(a1, a2, a6, v13, a7);
    if (v15[0]) {
      (*(void (**)(void))(*(void *)v15[0] + 40))(v15[0]);
    }
    else {
      ++v17;
    }
  }
  if (v15[0])
  {
    (*(void (**)(void))(*(void *)v15[0] + 8))();
    goto LABEL_17;
  }
LABEL_15:
  if (v16) {
    --*v16;
  }
LABEL_17:
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::SetArcs(a1, a2);
}

void sub_20D4219C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _DWORD *a13)
{
  if (a10)
  {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  else if (a13)
  {
    --*a13;
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(uint64_t a1, int a2, void *a3, unsigned int *a4, int a5)
{
  uint64_t v10 = a4 + 1;
  if (!a5) {
    uint64_t v10 = a4;
  }
  uint64_t result = (*(uint64_t (**)(void, void))(*(void *)*a3 + 64))(*a3, *v10);
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(void))(*(void *)*a3 + 72))();
    if ((result & 1) == 0)
    {
      do
      {
        long long v12 = *(_OWORD *)(*(uint64_t (**)(void))(*(void *)*a3 + 80))();
        long long v19 = *(_OWORD *)a4;
        long long v20 = v12;
        uint64_t v13 = *(unsigned __int8 **)(a1 + 136);
        if (a5)
        {
          if (v20 == -1)
          {
            if (!v13[33])
            {
              char v15 = v13[34] ^ 1;
              goto LABEL_27;
            }
          }
          else if (DWORD1(v19))
          {
            if (DWORD1(v19) == -1)
            {
              int v14 = v13[32];
              if (v14 == 1) {
                char v15 = -1;
              }
              else {
                char v15 = 0;
              }
              if (v14 == 1) {
                goto LABEL_31;
              }
            }
            else
            {
              char v15 = 0;
            }
LABEL_27:
            unint64_t v17 = (unsigned int *)&v19;
            uint64_t v18 = &v20;
LABEL_30:
            fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::AddArc(a1, a2, v17, (uint64_t)v18, v15);
          }
        }
        else if (v19 == -1)
        {
          if (!v13[33])
          {
            char v15 = v13[34] ^ 1;
            goto LABEL_29;
          }
        }
        else if (DWORD1(v20))
        {
          if (DWORD1(v20) == -1)
          {
            int v16 = v13[32];
            if (v16 == 1) {
              char v15 = -1;
            }
            else {
              char v15 = 0;
            }
            if (v16 == 1) {
              goto LABEL_31;
            }
          }
          else
          {
            char v15 = 0;
          }
LABEL_29:
          unint64_t v17 = (unsigned int *)&v20;
          uint64_t v18 = &v19;
          goto LABEL_30;
        }
LABEL_31:
        (*(void (**)(void))(*(void *)*a3 + 88))();
        uint64_t result = (*(uint64_t (**)(void))(*(void *)*a3 + 72))();
      }
      while (!result);
    }
  }
  return result;
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Copy()
{
}

void sub_20D421D84(_Unwind_Exception *a1)
{
  MEMORY[0x2105595E0](v2, 0x10E0C40EB25B5FDLL);
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~CacheBaseImpl(v1);
  MEMORY[0x2105595E0](v1, 0x10F3C405A371F01);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Properties(uint64_t a1, uint64_t a2)
{
  if ((a2 & 4) != 0
    && ((*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 160) + 64))(*(void *)(a1 + 160), 4, 0)|| (*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 168) + 64))(*(void *)(a1 + 168), 4, 0)|| ((*(uint64_t (**)(void, void))(***(void ***)(a1 + 144) + 40))(**(void **)(a1 + 144), 0) & 4) != 0|| ((*(uint64_t (**)(void, void))(***(void ***)(a1 + 152) + 40))(**(void **)(a1 + 152), 0) & 4) != 0))
  {
    *(void *)(a1 + 8) |= 4uLL;
  }
  return *(void *)(a1 + 8) & a2;
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Properties(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 0x3FFFFFFF0007);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(void *a1)
{
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(a1);
  JUMPOUT(0x2105595E0);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(void *a1)
{
  *a1 = off_26C207E00;
  uint64_t v2 = a1[17];
  if (v2)
  {
    unsigned int v3 = *(void **)v2;
    if (*(void *)v2)
    {
      if (*v3) {
        (*(void (**)(void))(*(void *)*v3 + 8))(*v3);
      }
      MEMORY[0x2105595E0](v3, 0x20C4093837F09);
    }
    uint64_t v4 = *(void **)(v2 + 8);
    if (v4)
    {
      if (*v4) {
        (*(void (**)(void))(*(void *)*v4 + 8))(*v4);
      }
      MEMORY[0x2105595E0](v4, 0x20C4093837F09);
    }
    MEMORY[0x2105595E0](v2, 0x1060C40AD892F49);
  }
  uint64_t v5 = a1[22];
  if (v5)
  {
    uint64_t v6 = *(void **)(v5 + 96);
    if (v6)
    {
      *(void *)(v5 + 104) = v6;
      operator delete(v6);
    }
    std::__hash_table<int,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::HashFunc,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::HashEqual,fst::PoolAllocator<int>>::~__hash_table(v5 + 24);
    MEMORY[0x2105595E0](v5, 0x10E0C40EB25B5FDLL);
  }
  return fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~CacheBaseImpl(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComputeFinal(uint64_t a1, int a2)
{
  uint64_t v4 = *(void *)(*(void *)(a1 + 176) + 96);
  uint64_t v5 = (unsigned int *)(v4 + 12 * a2);
  uint64_t v6 = *v5;
  float v10 = (*(float (**)(void, uint64_t))(***(void ***)(a1 + 144) + 96))(**(void **)(a1 + 144), v6);
  if (v10 != INFINITY)
  {
    uint64_t v7 = v5[1];
    float v8 = (*(float (**)(void, uint64_t))(***(void ***)(a1 + 152) + 96))(**(void **)(a1 + 152), v7);
    float v10 = v8;
    if (v8 != INFINITY)
    {
      uint64_t v9 = *(void *)(a1 + 136);
      LOBYTE(v10) = *(unsigned char *)(v4 + 12 * a2 + 8);
      fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::SetState(v9, v6, v7, &v10);
    }
  }
}

void fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::SetState(uint64_t a1, uint64_t a2, int a3, unsigned char *a4)
{
  if (*(_DWORD *)(a1 + 24) != a2 || *(_DWORD *)(a1 + 28) != a3 || *a4 != *(unsigned char *)(a1 + 32))
  {
    *(_DWORD *)(a1 + ++*(_DWORD *)(result + 24) = a2;
    *(_DWORD *)(a1 + 28) = a3;
    *(unsigned char *)(a1 + 32) = *a4;
    uint64_t v6 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 40))(*(void *)(a1 + 16), a2);
    uint64_t v7 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 56))(*(void *)(a1 + 16), a2);
    BOOL v9 = (*(float (**)(void, uint64_t))(**(void **)(a1 + 16) + 32))(*(void *)(a1 + 16), a2) == INFINITY
      && v6 == v7;
    *(unsigned char *)(a1 + 33) = v9;
    *(unsigned char *)(a1 + 34) = v7 == 0;
  }
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComputeStart(void **a1)
{
  uint64_t result = (*(uint64_t (**)(void *))(*a1[20] + 24))(a1[20]);
  if (result != -1)
  {
    unsigned int v3 = result;
    uint64_t result = (*(uint64_t (**)(void *))(*a1[21] + 24))(a1[21]);
    if (result != -1)
    {
      unint64_t v4 = __PAIR64__(result, v3);
      char v5 = 0;
      return fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::FindId(a1[22], (uint64_t *)&v4);
    }
  }
  return result;
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::InitMatcher(uint64_t a1, uint64_t a2, int a3)
{
  if ((*(unsigned int (**)(void, void))(***(void ***)(a1 + 144) + 24))(**(void **)(a1 + 144), 0) == a3
    && (*(unsigned int (**)(void, void))(***(void ***)(a1 + 152) + 24))(**(void **)(a1 + 152), 0) == a3)
  {
    operator new();
  }
  return 0;
}

void sub_20D42252C(_Unwind_Exception *a1)
{
  MEMORY[0x2105595E0](v1, 0x10E1C40868C5753);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Priority_(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))();
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Next_(uint64_t result)
{
  if (*(unsigned char *)(result + 48))
  {
    *(unsigned char *)(result + 48) = 0;
  }
  else
  {
    if (*(_DWORD *)(result + 28))
    {
      uint64_t v2 = *(void **)(result + 32);
      uint64_t v1 = *(void *)(result + 40);
    }
    else
    {
      uint64_t v1 = *(void *)(result + 32);
      uint64_t v2 = *(void **)(result + 40);
    }
    return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindNext<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(result, v1, v2);
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindNext<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(uint64_t a1, uint64_t a2, void *a3)
{
uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Value_(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48)) {
    return a1 + 52;
  }
  else {
    return a1 + 68;
  }
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Done_(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48)
    || !(*(unsigned int (**)(void))(***(void ***)(a1 + 32) + 72))(**(void **)(a1 + 32)))
  {
    return 0;
  }
  uint64_t v2 = *(uint64_t (**)(void))(***(void ***)(a1 + 40) + 72);
  return v2();
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Find_(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a1 + 48) = a2 == 0;
  if (*(_DWORD *)(a1 + 28))
  {
    if (a2)
    {
      uint64_t v2 = (void **)(a1 + 32);
      unsigned int v3 = (uint64_t *)(a1 + 40);
      return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindLabel<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(a1, a2, *v3, *v2);
    }
  }
  else if (a2)
  {
    uint64_t v2 = (void **)(a1 + 40);
    unsigned int v3 = (uint64_t *)(a1 + 32);
    return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindLabel<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(a1, a2, *v3, *v2);
  }
  return 1;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindLabel<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a3 + 64))();
  if (result)
  {
    int v8 = *(_DWORD *)(a1 + 28);
    uint64_t v9 = (*(uint64_t (**)(void))(**(void **)a3 + 80))();
    uint64_t v10 = (unsigned int *)(v9 + 4);
    if (v8) {
      uint64_t v10 = (unsigned int *)v9;
    }
    (*(void (**)(void, void))(*(void *)*a4 + 64))(*a4, *v10);
    return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindNext<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(a1, a3, a4);
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::SetState_(uint64_t result, int a2)
{
  if (*(_DWORD *)(result + 24) != a2)
  {
    uint64_t v2 = result;
    *(_DWORD *)(result + ++*(_DWORD *)(result + 24) = a2;
    unsigned int v3 = (unsigned int *)(*(void *)(*(void *)(*(void *)(result + 16) + 176) + 96) + 12 * a2);
    uint64_t v4 = v3[1];
    (*(void (**)(void, void))(***(void ***)(result + 32) + 56))(**(void **)(result + 32), *v3);
    uint64_t result = (*(uint64_t (**)(void, uint64_t))(***(void ***)(v2 + 40) + 56))(**(void **)(v2 + 40), v4);
    *(_DWORD *)(v2 + 64) = *(_DWORD *)(v2 + 24);
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Properties(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 84)) {
    return a2 | 4;
  }
  else {
    return a2;
  }
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::GetFst(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Type(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(void))(***(void ***)(a1 + 32) + 24))(**(void **)(a1 + 32));
  if (result != 3)
  {
    uint64_t result = (*(uint64_t (**)(void, uint64_t))(***(void ***)(a1 + 40) + 24))(**(void **)(a1 + 40), a2);
    if (result != 3)
    {
      if ((*(unsigned int (**)(void, uint64_t))(***(void ***)(a1 + 32) + 24))(**(void **)(a1 + 32), a2) != 4|| (uint64_t result = (*(uint64_t (**)(void, uint64_t))(***(void ***)(a1 + 40) + 24))(**(void **)(a1 + 40), a2), result != 4))
      {
        if ((*(unsigned int (**)(void, uint64_t))(***(void ***)(a1 + 32) + 24))(**(void **)(a1 + 32), a2) == 4&& (*(unsigned int (**)(void, uint64_t))(***(void ***)(a1 + 40) + 24))(**(void **)(a1 + 40), a2) == *(_DWORD *)(a1 + 28))
        {
          return 4;
        }
        else if ((*(unsigned int (**)(void, uint64_t))(***(void ***)(a1 + 32) + 24))(**(void **)(a1 + 32), a2) != *(_DWORD *)(a1 + 28)|| (uint64_t result = (*(uint64_t (**)(void, uint64_t))(***(void ***)(a1 + 40) + 24))(**(void **)(a1 + 40), a2), result != 4))
        {
          if ((*(unsigned int (**)(void, uint64_t))(***(void ***)(a1 + 32) + 24))(**(void **)(a1 + 32), a2) != *(_DWORD *)(a1 + 28))return 3; {
          uint64_t result = (*(uint64_t (**)(void, uint64_t))(***(void ***)(a1 + 40) + 24))(**(void **)(a1 + 40), a2);
          }
          if (result != *(_DWORD *)(a1 + 28)) {
            return 3;
          }
        }
      }
    }
  }
  return result;
}

void fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Copy()
{
}

void sub_20D422F80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0) {
    operator delete(__p);
  }
  MEMORY[0x2105595E0](v18, 0x10E1C40868C5753);
  _Unwind_Resume(a1);
}

void fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstMatcher(void *a1)
{
  fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstMatcher(a1);
  JUMPOUT(0x2105595E0);
}

void *fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstMatcher(void *a1)
{
  *a1 = off_26C208198;
  uint64_t v2 = (void *)a1[4];
  if (v2)
  {
    if (*v2) {
      (*(void (**)(void))(*(void *)*v2 + 8))(*v2);
    }
    MEMORY[0x2105595E0](v2, 0x20C4093837F09);
  }
  unsigned int v3 = (void *)a1[5];
  if (v3)
  {
    if (*v3) {
      (*(void (**)(void))(*(void *)*v3 + 8))(*v3);
    }
    MEMORY[0x2105595E0](v3, 0x20C4093837F09);
  }
  return a1;
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Expand(uint64_t a1, int a2)
{
  uint64_t v4 = (unsigned int *)(*(void *)(*(void *)(a1 + 176) + 96) + 12 * a2);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  uint64_t v7 = *(void *)(a1 + 136);
  LOBYTE(__p[0]) = *((unsigned char *)v4 + 8);
  fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::SetState(v7, v5, v6, __p);
  int v8 = *(_DWORD *)(a1 + 184);
  if (!v8) {
    goto LABEL_28;
  }
  if (v8 != 1)
  {
    uint64_t v11 = (*(uint64_t (**)(void, uint64_t))(***(void ***)(a1 + 144) + 104))(**(void **)(a1 + 144), v5);
    uint64_t v12 = (*(uint64_t (**)(void, uint64_t))(***(void ***)(a1 + 152) + 104))(**(void **)(a1 + 152), v6);
    if (v11 == -1 && v12 == -1)
    {
      if (FLAGS_fst_error_fatal) {
        std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
      }
      else {
        std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
      }
      uint64_t v17 = fst::LogMessage::LogMessage((fst *)&v21, (uint64_t)__p);
      uint64_t v18 = (void *)fst::cerr(v17);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"ComposeFst: both sides can't require match", 42);
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v21);
      if (v20 < 0) {
        operator delete(__p[0]);
      }
      *(void *)(a1 + 8) |= 4uLL;
    }
    else
    {
      BOOL v15 = v12 == -1 || v11 <= v12;
      if (v11 == -1 || !v15) {
        goto LABEL_3;
      }
    }
LABEL_28:
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(a1, a2, v6, *(void *)(a1 + 160), v5, *(void **)(a1 + 152), 1);
    return;
  }
LABEL_3:
  uint64_t v9 = *(void *)(a1 + 168);
  uint64_t v10 = *(void **)(a1 + 144);
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(a1, a2, v5, v9, v6, v10, 0);
}

void sub_20D4232E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, int a7)
{
  (*(void (**)(void, uint64_t))(*(void *)*a6 + 56))(*a6, a3);
  v18[0] = a7 - 1;
  v18[1] = a7 << 31 >> 31;
  v18[2] = 0;
  v18[3] = a5;
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(a1, a2, a6, v18, a7);
  unint64_t v17 = 0;
  (*(void (**)(uint64_t, uint64_t, void *))(*(void *)a4 + 136))(a4, a5, v15);
  while (1)
  {
    if (!v15[0])
    {
      unint64_t v14 = v17;
      if (v17 >= v15[2]) {
        goto LABEL_15;
      }
      goto LABEL_9;
    }
    if ((*(unsigned int (**)(void))(*(void *)v15[0] + 24))(v15[0])) {
      break;
    }
    if (!v15[0])
    {
      unint64_t v14 = v17;
LABEL_9:
      uint64_t v13 = (unsigned int *)(v15[1] + 16 * v14);
      goto LABEL_10;
    }
    uint64_t v13 = (unsigned int *)(*(uint64_t (**)(void))(*(void *)v15[0] + 32))();
LABEL_10:
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(a1, a2, a6, v13, a7);
    if (v15[0]) {
      (*(void (**)(void))(*(void *)v15[0] + 40))(v15[0]);
    }
    else {
      ++v17;
    }
  }
  if (v15[0])
  {
    (*(void (**)(void))(*(void *)v15[0] + 8))();
    goto LABEL_17;
  }
LABEL_15:
  if (v16) {
    --*v16;
  }
LABEL_17:
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::SetArcs(a1, a2);
}

void sub_20D423514(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _DWORD *a13)
{
  if (a10)
  {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  else if (a13)
  {
    --*a13;
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(uint64_t a1, int a2, void *a3, unsigned int *a4, int a5)
{
  uint64_t v10 = a4 + 1;
  if (!a5) {
    uint64_t v10 = a4;
  }
  uint64_t result = (*(uint64_t (**)(void, void))(*(void *)*a3 + 64))(*a3, *v10);
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(void))(*(void *)*a3 + 72))();
    if ((result & 1) == 0)
    {
      do
      {
        long long v12 = *(_OWORD *)(*(uint64_t (**)(void))(*(void *)*a3 + 80))();
        long long v19 = *(_OWORD *)a4;
        long long v20 = v12;
        uint64_t v13 = *(unsigned __int8 **)(a1 + 136);
        if (a5)
        {
          if (DWORD1(v19) != -1)
          {
            if (v20 == -1)
            {
              int v15 = v13[32];
              if (v15) {
                char v14 = -1;
              }
              else {
                char v14 = 0;
              }
              if (v15) {
                goto LABEL_35;
              }
            }
            else
            {
              if (DWORD1(v19)) {
                char v14 = 0;
              }
              else {
                char v14 = -1;
              }
              if (!DWORD1(v19)) {
                goto LABEL_35;
              }
            }
LABEL_28:
            int v16 = (unsigned int *)&v19;
            unint64_t v17 = &v20;
LABEL_34:
            fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::AddArc(a1, a2, v16, (uint64_t)v17, v14);
            goto LABEL_35;
          }
          if (!v13[33])
          {
            char v14 = v13[34] ^ 1;
            goto LABEL_28;
          }
        }
        else
        {
          if (DWORD1(v20) != -1)
          {
            if (v19 == -1)
            {
              int v18 = v13[32];
              if (v18) {
                char v14 = -1;
              }
              else {
                char v14 = 0;
              }
              if (v18) {
                goto LABEL_35;
              }
            }
            else
            {
              if (DWORD1(v20)) {
                char v14 = 0;
              }
              else {
                char v14 = -1;
              }
              if (!DWORD1(v20)) {
                goto LABEL_35;
              }
            }
LABEL_33:
            int v16 = (unsigned int *)&v20;
            unint64_t v17 = &v19;
            goto LABEL_34;
          }
          if (!v13[33])
          {
            char v14 = v13[34] ^ 1;
            goto LABEL_33;
          }
        }
LABEL_35:
        (*(void (**)(void))(*(void *)*a3 + 88))();
        uint64_t result = (*(uint64_t (**)(void))(*(void *)*a3 + 72))();
      }
      while (!result);
    }
  }
  return result;
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Copy()
{
}

void sub_20D4238DC(_Unwind_Exception *a1)
{
  MEMORY[0x2105595E0](v2, 0x10E0C40EB25B5FDLL);
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~CacheBaseImpl(v1);
  MEMORY[0x2105595E0](v1, 0x10F3C405A371F01);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Properties(uint64_t a1, uint64_t a2)
{
  if ((a2 & 4) != 0
    && ((*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 160) + 64))(*(void *)(a1 + 160), 4, 0)|| (*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 168) + 64))(*(void *)(a1 + 168), 4, 0)|| ((*(uint64_t (**)(void, void))(***(void ***)(a1 + 144) + 40))(**(void **)(a1 + 144), 0) & 4) != 0|| ((*(uint64_t (**)(void, void))(***(void ***)(a1 + 152) + 40))(**(void **)(a1 + 152), 0) & 4) != 0))
  {
    *(void *)(a1 + 8) |= 4uLL;
  }
  return *(void *)(a1 + 8) & a2;
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Properties(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 0x3FFFFFFF0007);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(void *a1)
{
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(a1);
  JUMPOUT(0x2105595E0);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(void *a1)
{
  *a1 = off_26C207CE0;
  uint64_t v2 = a1[17];
  if (v2)
  {
    unsigned int v3 = *(void **)v2;
    if (*(void *)v2)
    {
      if (*v3) {
        (*(void (**)(void))(*(void *)*v3 + 8))(*v3);
      }
      MEMORY[0x2105595E0](v3, 0x20C4093837F09);
    }
    uint64_t v4 = *(void **)(v2 + 8);
    if (v4)
    {
      if (*v4) {
        (*(void (**)(void))(*(void *)*v4 + 8))(*v4);
      }
      MEMORY[0x2105595E0](v4, 0x20C4093837F09);
    }
    MEMORY[0x2105595E0](v2, 0x1060C40AD892F49);
  }
  uint64_t v5 = a1[22];
  if (v5)
  {
    uint64_t v6 = *(void **)(v5 + 96);
    if (v6)
    {
      *(void *)(v5 + 104) = v6;
      operator delete(v6);
    }
    std::__hash_table<int,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::HashFunc,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::HashEqual,fst::PoolAllocator<int>>::~__hash_table(v5 + 24);
    MEMORY[0x2105595E0](v5, 0x10E0C40EB25B5FDLL);
  }
  return fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~CacheBaseImpl(a1);
}

float fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComputeFinal(uint64_t a1, int a2)
{
  unsigned int v3 = (unsigned int *)(*(void *)(*(void *)(a1 + 176) + 96) + 12 * a2);
  float v4 = (*(float (**)(void, void))(***(void ***)(a1 + 144) + 96))(**(void **)(a1 + 144), *v3);
  float v5 = v4;
  float v6 = v4;
  if (v4 != INFINITY)
  {
    float v7 = (*(float (**)(void, void, float, float))(***(void ***)(a1 + 152) + 96))(**(void **)(a1 + 152), v3[1], v4, v4);
    float v6 = v7;
    if (v7 != INFINITY)
    {
      float v6 = NAN;
      if (v5 != -INFINITY && v7 != -INFINITY)
      {
        float v6 = INFINITY;
        BOOL v8 = v7 == INFINITY || v5 == INFINITY;
        float v9 = v5 + v7;
        if (!v8) {
          return v9;
        }
      }
    }
  }
  return v6;
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComputeStart(void **a1)
{
  uint64_t result = (*(uint64_t (**)(void *))(*a1[20] + 24))(a1[20]);
  if (result != -1)
  {
    unsigned int v3 = result;
    uint64_t result = (*(uint64_t (**)(void *))(*a1[21] + 24))(a1[21]);
    if (result != -1)
    {
      unint64_t v4 = __PAIR64__(result, v3);
      char v5 = 0;
      return fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::FindId(a1[22], (uint64_t *)&v4);
    }
  }
  return result;
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::InitMatcher(uint64_t a1, uint64_t a2, int a3)
{
  if ((*(unsigned int (**)(void, void))(***(void ***)(a1 + 144) + 24))(**(void **)(a1 + 144), 0) == a3
    && (*(unsigned int (**)(void, void))(***(void ***)(a1 + 152) + 24))(**(void **)(a1 + 152), 0) == a3)
  {
    operator new();
  }
  return 0;
}

void sub_20D423F1C(_Unwind_Exception *a1)
{
  MEMORY[0x2105595E0](v1, 0x10E1C40868C5753);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Priority_(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))();
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Next_(uint64_t result)
{
  if (*(unsigned char *)(result + 48))
  {
    *(unsigned char *)(result + 48) = 0;
  }
  else
  {
    if (*(_DWORD *)(result + 28))
    {
      uint64_t v2 = *(void **)(result + 32);
      uint64_t v1 = *(void *)(result + 40);
    }
    else
    {
      uint64_t v1 = *(void *)(result + 32);
      uint64_t v2 = *(void **)(result + 40);
    }
    return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindNext<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(result, v1, v2);
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindNext<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(uint64_t a1, uint64_t a2, void *a3)
{
  while (!(*(unsigned int (**)(void))(**(void **)a2 + 72))()
       || ((*(uint64_t (**)(void))(*(void *)*a3 + 72))() & 1) == 0)
  {
    if ((*(unsigned int (**)(void))(*(void *)*a3 + 72))())
    {
      (*(void (**)(void))(**(void **)a2 + 88))();
      if (((*(uint64_t (**)(void))(**(void **)a2 + 72))() & 1) == 0)
      {
        do
        {
          int v6 = *(_DWORD *)(a1 + 28);
          uint64_t v7 = (*(uint64_t (**)(void))(**(void **)a2 + 80))();
          BOOL v8 = (unsigned int *)(v7 + 4);
          if (v6) {
            BOOL v8 = (unsigned int *)v7;
          }
          if ((*(uint64_t (**)(void, void))(*(void *)*a3 + 64))(*a3, *v8)) {
            break;
          }
          (*(void (**)(void))(**(void **)a2 + 88))();
        }
        while (!(*(unsigned int (**)(void))(**(void **)a2 + 72))());
      }
    }
    while (((*(uint64_t (**)(void))(*(void *)*a3 + 72))() & 1) == 0)
    {
      uint64_t v9 = (*(uint64_t (**)(void))(**(void **)a2 + 80))();
      uint64_t v10 = (*(uint64_t (**)(void))(*(void *)*a3 + 80))();
      (*(void (**)(void))(*(void *)*a3 + 88))();
      int v11 = *(_DWORD *)(a1 + 28);
      if (v11) {
        long long v12 = (unint64_t *)v10;
      }
      else {
        long long v12 = (unint64_t *)v9;
      }
      unint64_t v13 = *v12;
      if (v11) {
        char v14 = (uint64_t *)v9;
      }
      else {
        char v14 = (uint64_t *)v10;
      }
      uint64_t v15 = *v14;
      if (v13 <= 0xFFFFFFFEFFFFFFFFLL && *v14 != 0xFFFFFFFFLL)
      {
        uint64_t v17 = *(void *)(a1 + 16);
        uint64_t v18 = v14[1];
        unint64_t v19 = v12[1];
        unint64_t v23 = __PAIR64__(HIDWORD(v18), HIDWORD(v19));
        char v24 = 0;
        *(_DWORD *)(a1 + 68) = v13;
        *(_DWORD *)(a1 + 72) = HIDWORD(v15);
        float v20 = NAN;
        if (*(float *)&v19 != -INFINITY && *(float *)&v18 != -INFINITY)
        {
          float v20 = INFINITY;
          if (*(float *)&v18 != INFINITY && *(float *)&v19 != INFINITY) {
            float v20 = *(float *)&v19 + *(float *)&v18;
          }
        }
        *(float *)(a1 + 76) = v20;
        *(_DWORD *)(a1 + 80) = fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::FindId(*(void **)(v17 + 176), (uint64_t *)&v23);
        return 1;
      }
    }
  }
  return 0;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Value_(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48)) {
    return a1 + 52;
  }
  else {
    return a1 + 68;
  }
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Done_(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48)
    || !(*(unsigned int (**)(void))(***(void ***)(a1 + 32) + 72))(**(void **)(a1 + 32)))
  {
    return 0;
  }
  uint64_t v2 = *(uint64_t (**)(void))(***(void ***)(a1 + 40) + 72);
  return v2();
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Find_(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a1 + 48) = a2 == 0;
  if (*(_DWORD *)(a1 + 28))
  {
    if (a2)
    {
      uint64_t v2 = (void **)(a1 + 32);
      unsigned int v3 = (uint64_t *)(a1 + 40);
      return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindLabel<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(a1, a2, *v3, *v2);
    }
  }
  else if (a2)
  {
    uint64_t v2 = (void **)(a1 + 40);
    unsigned int v3 = (uint64_t *)(a1 + 32);
    return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindLabel<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(a1, a2, *v3, *v2);
  }
  return 1;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindLabel<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a3 + 64))();
  if (result)
  {
    int v8 = *(_DWORD *)(a1 + 28);
    uint64_t v9 = (*(uint64_t (**)(void))(**(void **)a3 + 80))();
    uint64_t v10 = (unsigned int *)(v9 + 4);
    if (v8) {
      uint64_t v10 = (unsigned int *)v9;
    }
    (*(void (**)(void, void))(*(void *)*a4 + 64))(*a4, *v10);
    return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindNext<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(a1, a3, a4);
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::SetState_(uint64_t result, int a2)
{
  if (*(_DWORD *)(result + 24) != a2)
  {
    uint64_t v2 = result;
    *(_DWORD *)(result + ++*(_DWORD *)(result + 24) = a2;
    unsigned int v3 = (unsigned int *)(*(void *)(*(void *)(*(void *)(result + 16) + 176) + 96) + 12 * a2);
    uint64_t v4 = v3[1];
    (*(void (**)(void, void))(***(void ***)(result + 32) + 56))(**(void **)(result + 32), *v3);
    uint64_t result = (*(uint64_t (**)(void, uint64_t))(***(void ***)(v2 + 40) + 56))(**(void **)(v2 + 40), v4);
    *(_DWORD *)(v2 + 64) = *(_DWORD *)(v2 + 24);
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Properties(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 84)) {
    return a2 | 4;
  }
  else {
    return a2;
  }
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::GetFst(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Type(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(void))(***(void ***)(a1 + 32) + 24))(**(void **)(a1 + 32));
  if (result != 3)
  {
    uint64_t result = (*(uint64_t (**)(void, uint64_t))(***(void ***)(a1 + 40) + 24))(**(void **)(a1 + 40), a2);
    if (result != 3)
    {
      if ((*(unsigned int (**)(void, uint64_t))(***(void ***)(a1 + 32) + 24))(**(void **)(a1 + 32), a2) != 4|| (uint64_t result = (*(uint64_t (**)(void, uint64_t))(***(void ***)(a1 + 40) + 24))(**(void **)(a1 + 40), a2), result != 4))
      {
        if ((*(unsigned int (**)(void, uint64_t))(***(void ***)(a1 + 32) + 24))(**(void **)(a1 + 32), a2) == 4&& (*(unsigned int (**)(void, uint64_t))(***(void ***)(a1 + 40) + 24))(**(void **)(a1 + 40), a2) == *(_DWORD *)(a1 + 28))
        {
          return 4;
        }
        else if ((*(unsigned int (**)(void, uint64_t))(***(void ***)(a1 + 32) + 24))(**(void **)(a1 + 32), a2) != *(_DWORD *)(a1 + 28)|| (uint64_t result = (*(uint64_t (**)(void, uint64_t))(***(void ***)(a1 + 40) + 24))(**(void **)(a1 + 40), a2), result != 4))
        {
          if ((*(unsigned int (**)(void, uint64_t))(***(void ***)(a1 + 32) + 24))(**(void **)(a1 + 32), a2) != *(_DWORD *)(a1 + 28))return 3; {
          uint64_t result = (*(uint64_t (**)(void, uint64_t))(***(void ***)(a1 + 40) + 24))(**(void **)(a1 + 40), a2);
          }
          if (result != *(_DWORD *)(a1 + 28)) {
            return 3;
          }
        }
      }
    }
  }
  return result;
}

void fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Copy()
{
}

void sub_20D424954(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0) {
    operator delete(__p);
  }
  MEMORY[0x2105595E0](v18, 0x10E1C40868C5753);
  _Unwind_Resume(a1);
}

void fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstMatcher(void *a1)
{
  fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstMatcher(a1);
  JUMPOUT(0x2105595E0);
}

void *fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstMatcher(void *a1)
{
  *a1 = off_26C208098;
  uint64_t v2 = (void *)a1[4];
  if (v2)
  {
    if (*v2) {
      (*(void (**)(void))(*(void *)*v2 + 8))(*v2);
    }
    MEMORY[0x2105595E0](v2, 0x20C4093837F09);
  }
  unsigned int v3 = (void *)a1[5];
  if (v3)
  {
    if (*v3) {
      (*(void (**)(void))(*(void *)*v3 + 8))(*v3);
    }
    MEMORY[0x2105595E0](v3, 0x20C4093837F09);
  }
  return a1;
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Expand(uint64_t a1, int a2)
{
  uint64_t v4 = (unsigned int *)(*(void *)(*(void *)(a1 + 176) + 96) + 12 * a2);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  int v7 = *(_DWORD *)(a1 + 184);
  if (v7)
  {
    if (v7 == 1)
    {
LABEL_3:
      uint64_t v8 = *(void *)(a1 + 168);
      uint64_t v9 = *(void **)(a1 + 144);
      uint64_t v10 = a1;
      int v11 = a2;
      uint64_t v12 = v5;
      uint64_t v13 = v6;
      int v14 = 0;
      goto LABEL_26;
    }
    uint64_t v15 = (*(uint64_t (**)(void, uint64_t))(***(void ***)(a1 + 144) + 104))(**(void **)(a1 + 144), v5);
    uint64_t v16 = (*(uint64_t (**)(void, uint64_t))(***(void ***)(a1 + 152) + 104))(**(void **)(a1 + 152), v6);
    if (v15 == -1 && v16 == -1)
    {
      if (FLAGS_fst_error_fatal) {
        std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
      }
      else {
        std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
      }
      char v21 = fst::LogMessage::LogMessage((fst *)&v25, (uint64_t)__p);
      float v22 = (void *)fst::cerr(v21);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"ComposeFst: both sides can't require match", 42);
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v25);
      if (v24 < 0) {
        operator delete(__p[0]);
      }
      *(void *)(a1 + 8) |= 4uLL;
    }
    else
    {
      BOOL v19 = v16 == -1 || v15 <= v16;
      if (v15 == -1 || !v19) {
        goto LABEL_3;
      }
    }
  }
  uint64_t v9 = *(void **)(a1 + 152);
  uint64_t v8 = *(void *)(a1 + 160);
  uint64_t v10 = a1;
  int v11 = a2;
  uint64_t v12 = v6;
  uint64_t v13 = v5;
  int v14 = 1;
LABEL_26:
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(v10, v11, v12, v8, v13, v9, v14);
}

void sub_20D424C80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, int a7)
{
  (*(void (**)(void, uint64_t))(*(void *)*a6 + 56))(*a6, a3);
  v18[0] = a7 - 1;
  v18[1] = a7 << 31 >> 31;
  v18[2] = 0;
  v18[3] = a5;
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(a1, a2, a6, v18, a7);
  unint64_t v17 = 0;
  (*(void (**)(uint64_t, uint64_t, void *))(*(void *)a4 + 136))(a4, a5, v15);
  while (1)
  {
    if (!v15[0])
    {
      unint64_t v14 = v17;
      if (v17 >= v15[2]) {
        goto LABEL_15;
      }
      goto LABEL_9;
    }
    if ((*(unsigned int (**)(void))(*(void *)v15[0] + 24))(v15[0])) {
      break;
    }
    if (!v15[0])
    {
      unint64_t v14 = v17;
LABEL_9:
      uint64_t v13 = (unsigned int *)(v15[1] + 16 * v14);
      goto LABEL_10;
    }
    uint64_t v13 = (unsigned int *)(*(uint64_t (**)(void))(*(void *)v15[0] + 32))();
LABEL_10:
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(a1, a2, a6, v13, a7);
    if (v15[0]) {
      (*(void (**)(void))(*(void *)v15[0] + 40))(v15[0]);
    }
    else {
      ++v17;
    }
  }
  if (v15[0])
  {
    (*(void (**)(void))(*(void *)v15[0] + 8))();
    goto LABEL_17;
  }
LABEL_15:
  if (v16) {
    --*v16;
  }
LABEL_17:
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::SetArcs(a1, a2);
}

void sub_20D424EB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _DWORD *a13)
{
  if (a10)
  {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  else if (a13)
  {
    --*a13;
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(uint64_t a1, int a2, void *a3, unsigned int *a4, int a5)
{
  uint64_t v10 = a4 + 1;
  if (!a5) {
    uint64_t v10 = a4;
  }
  uint64_t result = (*(uint64_t (**)(void, void))(*(void *)*a3 + 64))(*a3, *v10);
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(void))(*(void *)*a3 + 72))();
    if ((result & 1) == 0)
    {
      do
      {
        long long v12 = *(_OWORD *)(*(uint64_t (**)(void))(*(void *)*a3 + 80))();
        long long v17 = *(_OWORD *)a4;
        long long v18 = v12;
        if (a5)
        {
          if (DWORD1(v17) == -1 || v18 == -1) {
            goto LABEL_17;
          }
          unint64_t v14 = (unsigned int *)&v17;
          uint64_t v15 = &v18;
        }
        else
        {
          if (DWORD1(v18) == -1 || v17 == -1) {
            goto LABEL_17;
          }
          unint64_t v14 = (unsigned int *)&v18;
          uint64_t v15 = &v17;
        }
        fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::AddArc(a1, a2, v14, (uint64_t)v15, 0);
LABEL_17:
        (*(void (**)(void))(*(void *)*a3 + 88))();
        uint64_t result = (*(uint64_t (**)(void))(*(void *)*a3 + 72))();
      }
      while (!result);
    }
  }
  return result;
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Copy()
{
}

void sub_20D425234(_Unwind_Exception *a1)
{
  MEMORY[0x2105595E0](v2, 0x10E0C40EB25B5FDLL);
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~CacheBaseImpl(v1);
  MEMORY[0x2105595E0](v1, 0x10F3C405A371F01);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Properties(uint64_t a1, uint64_t a2)
{
  if ((a2 & 4) != 0
    && ((*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 160) + 64))(*(void *)(a1 + 160), 4, 0)|| (*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 168) + 64))(*(void *)(a1 + 168), 4, 0)|| ((*(uint64_t (**)(void, void))(***(void ***)(a1 + 144) + 40))(**(void **)(a1 + 144), 0) & 4) != 0|| ((*(uint64_t (**)(void, void))(***(void ***)(a1 + 152) + 40))(**(void **)(a1 + 152), 0) & 4) != 0))
  {
    *(void *)(a1 + 8) |= 4uLL;
  }
  return *(void *)(a1 + 8) & a2;
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Properties(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 0x3FFFFFFF0007);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(void *a1)
{
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(a1);
  JUMPOUT(0x2105595E0);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(void *a1)
{
  *a1 = off_26C207C20;
  uint64_t v2 = a1[17];
  if (v2)
  {
    unsigned int v3 = *(void **)v2;
    if (*(void *)v2)
    {
      if (*v3) {
        (*(void (**)(void))(*(void *)*v3 + 8))(*v3);
      }
      MEMORY[0x2105595E0](v3, 0x20C4093837F09);
    }
    uint64_t v4 = *(void **)(v2 + 8);
    if (v4)
    {
      if (*v4) {
        (*(void (**)(void))(*(void *)*v4 + 8))(*v4);
      }
      MEMORY[0x2105595E0](v4, 0x20C4093837F09);
    }
    MEMORY[0x2105595E0](v2, 0x60C40FFD3A10ELL);
  }
  uint64_t v5 = a1[22];
  if (v5)
  {
    uint64_t v6 = *(void **)(v5 + 96);
    if (v6)
    {
      *(void *)(v5 + 104) = v6;
      operator delete(v6);
    }
    std::__hash_table<int,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::HashFunc,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::HashEqual,fst::PoolAllocator<int>>::~__hash_table(v5 + 24);
    MEMORY[0x2105595E0](v5, 0x10E0C40EB25B5FDLL);
  }
  return fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~CacheBaseImpl(a1);
}

uint64_t fst::ImplToFst<fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::OutputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 48);
}

uint64_t fst::ImplToFst<fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::InputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 40);
}

uint64_t fst::ImplToFst<fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Type(uint64_t a1)
{
  return *(void *)(a1 + 8) + 16;
}

uint64_t fst::ImplToFst<fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Properties(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    uint64_t v8 = 0;
    unint64_t v5 = fst::TestProperties<fst::ArcTpl<fst::TropicalWeightTpl<float>>>(a1, a2, &v8);
    *(void *)(*(void *)(a1 + 8) + 8) = *(void *)(*(void *)(a1 + 8) + 8) & (~v8 | 4) | v8 & v5;
    return v5 & a2;
  }
  else
  {
    int v7 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 32);
    return v7();
  }
}

uint64_t fst::ImplToFst<fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::NumOutputEpsilons(uint64_t a1, uint64_t a2)
{
  unsigned int v3 = *(uint64_t **)(a1 + 8);
  if ((fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::HasArcs(v3[15], a2) & 1) == 0)(*(void (**)(uint64_t *, uint64_t))(*v3 + 48))(v3, a2); {
  uint64_t v4 = v3[15];
  }
  if (*(_DWORD *)(v4 + 92) == a2) {
    uint64_t v5 = v4 + 96;
  }
  else {
    uint64_t v5 = *(void *)(v4 + 8) + 8 * ((int)a2 + 1);
  }
  return *(void *)(*(void *)v5 + 16);
}

uint64_t fst::ImplToFst<fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::NumInputEpsilons(uint64_t a1, uint64_t a2)
{
  unsigned int v3 = *(uint64_t **)(a1 + 8);
  if ((fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::HasArcs(v3[15], a2) & 1) == 0)(*(void (**)(uint64_t *, uint64_t))(*v3 + 48))(v3, a2); {
  uint64_t v4 = v3[15];
  }
  if (*(_DWORD *)(v4 + 92) == a2) {
    uint64_t v5 = v4 + 96;
  }
  else {
    uint64_t v5 = *(void *)(v4 + 8) + 8 * ((int)a2 + 1);
  }
  return *(void *)(*(void *)v5 + 8);
}

uint64_t fst::ImplToFst<fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::NumArcs(uint64_t a1, uint64_t a2)
{
  unsigned int v3 = *(uint64_t **)(a1 + 8);
  if ((fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::HasArcs(v3[15], a2) & 1) == 0)(*(void (**)(uint64_t *, uint64_t))(*v3 + 48))(v3, a2); {
  uint64_t v4 = v3[15];
  }
  if (*(_DWORD *)(v4 + 92) == a2) {
    uint64_t v5 = v4 + 96;
  }
  else {
    uint64_t v5 = *(void *)(v4 + 8) + 8 * ((int)a2 + 1);
  }
  return (uint64_t)(*(void *)(*(void *)v5 + 32) - *(void *)(*(void *)v5 + 24)) >> 4;
}

float fst::ImplToFst<fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Final(uint64_t a1, uint64_t a2)
{
  int v2 = a2;
  unsigned int v3 = *(uint64_t **)(a1 + 8);
  uint64_t v4 = v3[15];
  int v5 = *(_DWORD *)(v4 + 92);
  if (v5 == a2)
  {
    uint64_t v6 = (uint64_t *)(v4 + 96);
  }
  else
  {
    unint64_t v7 = (int)a2 + 1;
    uint64_t v8 = *(void *)(v4 + 8);
    if (v7 >= (*(void *)(v4 + 16) - v8) >> 3)
    {
LABEL_7:
      float v11 = (*(float (**)(void, uint64_t))(*v3 + 72))(*(void *)(a1 + 8), a2);
      uint64_t MutableState = (float *)fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::GetMutableState(v3[15], v2);
      float *MutableState = v11;
      *((_DWORD *)MutableState + 14) |= 9u;
      uint64_t v4 = v3[15];
      int v5 = *(_DWORD *)(v4 + 92);
      goto LABEL_9;
    }
    uint64_t v6 = (uint64_t *)(v8 + 8 * v7);
  }
  uint64_t v9 = *v6;
  if (!v9) {
    goto LABEL_7;
  }
  int v10 = *(_DWORD *)(v9 + 56);
  if ((v10 & 1) == 0) {
    goto LABEL_7;
  }
  *(_DWORD *)(v9 + 56) = v10 | 8;
LABEL_9:
  if (v5 == v2) {
    uint64_t v13 = v4 + 96;
  }
  else {
    uint64_t v13 = *(void *)(v4 + 8) + 8 * v2 + 8;
  }
  return **(float **)v13;
}

uint64_t fst::ImplToFst<fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Start(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (!*(unsigned char *)(v1 + 60))
  {
    if ((*(uint64_t (**)(void, uint64_t))(*(void *)v1 + 32))(*(void *)(a1 + 8), 4))
    {
      *(unsigned char *)(v1 + 60) = 1;
    }
    else if (!*(unsigned char *)(v1 + 60))
    {
      int v3 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 64))(v1);
      if (v3 != -1)
      {
        *(_DWORD *)(v1 + 64) = v3;
        *(unsigned char *)(v1 + 60) = 1;
        if (*(_DWORD *)(v1 + 68) <= v3) {
          *(_DWORD *)(v1 + 68) = v3 + 1;
        }
      }
    }
  }
  return *(unsigned int *)(v1 + 64);
}

uint64_t fst::ImplToFst<fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::HasSequentialStates(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 16))();
}

uint64_t fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::InitMatcher(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 8) + 56))(*(void *)(a1 + 8), a1, a2);
}

uint64_t fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::InitArcIterator(uint64_t a1, uint64_t a2, void *a3)
{
  int v5 = *(uint64_t **)(a1 + 8);
  uint64_t result = fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::HasArcs(v5[15], a2);
  if ((result & 1) == 0) {
    uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t))(*v5 + 48))(v5, a2);
  }
  uint64_t v7 = v5[15];
  if (*(_DWORD *)(v7 + 92) == a2) {
    uint64_t v8 = (uint64_t *)(v7 + 96);
  }
  else {
    uint64_t v8 = (uint64_t *)(*(void *)(v7 + 8) + 8 * ((int)a2 + 1));
  }
  uint64_t v9 = *v8;
  int v12 = *(_DWORD *)(v9 + 60);
  int v10 = (_DWORD *)(v9 + 60);
  int v11 = v12;
  uint64_t v13 = *(void *)(v10 - 9);
  uint64_t v14 = (*(void *)(v10 - 7) - v13) >> 4;
  if (*(void *)(v10 - 7) == v13) {
    uint64_t v13 = 0;
  }
  *a3 = 0;
  a3[1] = v13;
  a3[2] = v14;
  a3[3] = v10;
  *int v10 = v11 + 1;
  return result;
}

void fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::InitStateIterator()
{
}

void sub_20D425B64(_Unwind_Exception *a1)
{
  MEMORY[0x2105595E0](v1, 0x10E1C408BA93049);
  _Unwind_Resume(a1);
}

uint64_t fst::CacheStateIterator<fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Reset_(uint64_t result)
{
  *(_DWORD *)(result + ++*(_DWORD *)(result + 24) = 0;
  return result;
}

uint64_t fst::CacheStateIterator<fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Next_(uint64_t result)
{
  return result;
}

uint64_t fst::CacheStateIterator<fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Value_(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

BOOL fst::CacheStateIterator<fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Done_(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 16);
  if (v2 < *(_DWORD *)(v3 + 68)) {
    return 0;
  }
  unint64_t v5 = fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::MinUnexpandedState(v3);
  if ((int)v5 >= *(_DWORD *)(*(void *)(a1 + 16) + 68)) {
    return 1;
  }
  unint64_t v6 = v5;
  while (1)
  {
    uint64_t v7 = *(void *)(a1 + 8);
    uint64_t MutableState = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::GetMutableState(*(void *)(*(void *)(v7 + 8) + 120), v6);
    ++*(_DWORD *)(MutableState + 60);
    if ((fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::HasArcs(*(void *)(*(void *)(v7 + 8) + 120), v6) & 1) == 0)(*(void (**)(void, unint64_t))(**(void **)(v7 + 8) + 48))(*(void *)(v7 + 8), v6); {
    uint64_t v9 = *(void *)(MutableState + 24);
    }
    uint64_t v10 = *(void *)(a1 + 16);
    uint64_t v11 = *(void *)(MutableState + 32) - v9;
    if (v11)
    {
      uint64_t v12 = v11 >> 4;
      int v13 = *(_DWORD *)(v10 + 68);
      uint64_t v14 = (int *)(v9 + 12);
      do
      {
        int v16 = *v14;
        v14 += 4;
        int v15 = v16;
        if (v13 <= v16)
        {
          int v13 = v15 + 1;
          *(_DWORD *)(v10 + 68) = v15 + 1;
        }
        --v12;
      }
      while (v12);
    }
    fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::SetExpandedState(v10, v6);
    int v17 = *(_DWORD *)(a1 + 24);
    uint64_t v18 = *(void *)(a1 + 16);
    int v19 = *(_DWORD *)(v18 + 68);
    --*(_DWORD *)(MutableState + 60);
    BOOL result = v17 >= v19;
    if (v17 < v19) {
      break;
    }
    unint64_t v6 = fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::MinUnexpandedState(v18);
    if ((int)v6 >= *(_DWORD *)(*(void *)(a1 + 16) + 68)) {
      return 1;
    }
  }
  return result;
}

void sub_20D425CEC(_Unwind_Exception *a1)
{
  --*(_DWORD *)(v1 + 60);
  _Unwind_Resume(a1);
}

void fst::StateIterator<fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::~StateIterator()
{
}

void fst::CacheStateIterator<fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::~CacheStateIterator()
{
}

void fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Copy()
{
}

void sub_20D425E1C(_Unwind_Exception *a1)
{
  uint64_t v3 = fst::ImplToFst<fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~ImplToFst(v1);
  MEMORY[0x2105595E0](v3, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

void fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~ComposeFst(void *a1)
{
  fst::ImplToFst<fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~ImplToFst(a1);
  JUMPOUT(0x2105595E0);
}

void std::unordered_set<int,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,(fst::HSType)1>::HashFunc,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,(fst::HSType)1>::HashEqual,fst::PoolAllocator<int>>::unordered_set()
{
}

void sub_20D425F68(_Unwind_Exception *a1)
{
  std::__hash_table<int,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,(fst::HSType)1>::HashFunc,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,(fst::HSType)1>::HashEqual,fst::PoolAllocator<int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<int,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,(fst::HSType)1>::HashFunc,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,(fst::HSType)1>::HashEqual,fst::PoolAllocator<int>>::~__hash_table(uint64_t a1)
{
  int v2 = *(void **)(a1 + 24);
  uint64_t v3 = (uint64_t *)(a1 + 32);
  if (v2)
  {
    do
    {
      uint64_t v4 = (void *)*v2;
      uint64_t v5 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node<int,void *>>::TN<1>>(*v3);
      v2[3] = *(void *)(v5 + 56);
      *(void *)(v5 + 56) = v2;
      int v2 = v4;
    }
    while (v4);
  }
  fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~PoolAllocator((fst::MemoryPoolCollection **)v3);
  return std::unique_ptr<std::__hash_node_base<std::__hash_node<int,void *> *> *[],std::__bucket_list_deallocator<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>>>::~unique_ptr[abi:ne180100](a1);
}

uint64_t fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::MultiEpsMatcher(uint64_t result, uint64_t a2, int a3, int a4, uint64_t a5)
{
  if (!a5) {
    operator new();
  }
  *(void *)BOOL result = a5;
  *(_DWORD *)(result + 8) = a4;
  *(unsigned char *)(result + 12) = a5 == 0;
  *(void *)(result + 32) = 0;
  *(void *)(result + ++*(_DWORD *)(result + 24) = 0;
  *(void *)(result + 16) = result + 24;
  *(void *)(result + 40) = -1;
  *(void *)(result + 48) = 0;
  if (a3) {
    int v5 = 0;
  }
  else {
    int v5 = -1;
  }
  if (a3) {
    int v6 = -1;
  }
  else {
    int v6 = 0;
  }
  *(_DWORD *)(result + 60) = v5;
  *(_DWORD *)(result + 64) = v6;
  *(void *)(result + 68) = 0xFFFFFFFF00000000;
  return result;
}

void sub_20D4260BC(_Unwind_Exception *a1)
{
  MEMORY[0x2105595E0](v1, 0x1020C405F07FB98);
  _Unwind_Resume(a1);
}

uint64_t fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::~MultiEpsMatcher(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 12))
  {
    int v2 = *(void **)a1;
    if (*(void *)a1)
    {
      if (*v2) {
        (*(void (**)(void))(*(void *)*v2 + 8))(*v2);
      }
      MEMORY[0x2105595E0](v2, 0x1020C405F07FB98);
    }
  }
  std::__tree<std::__value_type<int,std::pair<int,int>>,std::__map_value_compare<int,std::__value_type<int,std::pair<int,int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::pair<int,int>>>>::destroy(a1 + 16, *(void **)(a1 + 24));
  return a1;
}

uint64_t fst::LookAheadSelector<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>::~LookAheadSelector(uint64_t a1)
{
  int v2 = *(void **)a1;
  if (*(void *)a1)
  {
    if (*v2) {
      (*(void (**)(void))(*(void *)*v2 + 8))(*v2);
    }
    MEMORY[0x2105595E0](v2, 0x1020C405F07FB98);
  }
  uint64_t v3 = *(void **)(a1 + 8);
  if (v3)
  {
    if (*v3) {
      (*(void (**)(void))(*(void *)*v3 + 8))(*v3);
    }
    MEMORY[0x2105595E0](v3, 0x1020C405F07FB98);
  }
  return a1;
}

uint64_t fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::LookAheadMatcher(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 144))(a2, a3);
  *(void *)a1 = v4;
  if (!v4) {
    operator new();
  }
  *(unsigned char *)(a1 + 8) = 0;
  return a1;
}

void sub_20D4262B8(_Unwind_Exception *a1)
{
  MEMORY[0x2105595E0](v1, 0x10E1C4003B7394BLL);
  _Unwind_Resume(a1);
}

uint64_t fst::LookAheadMatchType<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(void *a1, void *a2)
{
  int v4 = (*(uint64_t (**)(void, void))(*(void *)*a1 + 24))(*a1, 0);
  int v5 = (*(uint64_t (**)(void, void))(*(void *)*a2 + 24))(*a2, 0);
  if (v4 == 1 && ((*(uint64_t (**)(void))(*(void *)*a1 + 48))() & 0x20) != 0) {
    return 1;
  }
  if (!v5 && ((*(uint64_t (**)(void))(*(void *)*a2 + 48))() & 0x10) != 0) {
    return 0;
  }
  if (((*(uint64_t (**)(void))(*(void *)*a1 + 48))() & 0x20) == 0
    || (uint64_t v6 = *a1,
        uint64_t v7 = *(unsigned int (**)(uint64_t, uint64_t))(*(void *)*a1 + 24),
        uint64_t v8 = 1,
        v7(v6, 1) != 1))
  {
    if (((*(uint64_t (**)(void))(*(void *)*a2 + 48))() & 0x10) == 0
      || (*(unsigned int (**)(void, uint64_t))(*(void *)*a2 + 24))(*a2, 1))
    {
      return 3;
    }
    return 0;
  }
  return v8;
}

void fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Copy()
{
}

void sub_20D426528(_Unwind_Exception *a1)
{
  MEMORY[0x2105595E0](v1, 0x1020C405F07FB98);
  _Unwind_Resume(a1);
}

uint64_t fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::LookAheadCheck(unsigned char *a1)
{
  if (!a1[8])
  {
    int v2 = (*(uint64_t (**)(void))(**(void **)a1 + 48))() & 0x30;
    a1[8] = v2 != 0;
    if (!v2)
    {
      if (FLAGS_fst_error_fatal) {
        std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
      }
      else {
        std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
      }
      uint64_t v3 = fst::LogMessage::LogMessage((fst *)&v8, (uint64_t)__p);
      int v4 = (void *)fst::cerr(v3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"LookAheadMatcher: No look-ahead matcher defined", 47);
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v8);
      if (v7 < 0) {
        operator delete(__p[0]);
      }
    }
  }
  return a1[8];
}

void sub_20D426634(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)(v14 - 17));
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::ComputeFinal(uint64_t a1, int a2)
{
  uint64_t v4 = *(void *)(*(void *)(a1 + 176) + 96);
  int v5 = (unsigned int *)(v4 + 20 * a2);
  uint64_t v6 = *v5;
  float v7 = (*(float (**)(void, uint64_t))(****(void ****)(a1 + 144) + 96))(***(void ***)(a1 + 144), v6);
  float v8 = v7;
  *(float *)&uint64_t v16 = v7;
  int v18 = 2139095040;
  if (v7 != INFINITY)
  {
    uint64_t v9 = v5[1];
    float v10 = (*(float (**)(void, uint64_t))(****(void ****)(a1 + 152) + 96))(***(void ***)(a1 + 152), v9);
    *(float *)&uint64_t v16 = v10;
    int v18 = 2139095040;
    if (v10 != INFINITY)
    {
      uint64_t v11 = *(void *)(a1 + 136);
      uint64_t v12 = v4 + 20 * a2;
      uint64_t v13 = *(void *)(v12 + 8);
      LODWORD(v12) = *(_DWORD *)(v12 + 16);
      uint64_t v16 = v13;
      int v17 = v12;
      fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>::SetState(v11, v6, v9, (unsigned __int8 *)&v16);
      uint64_t v14 = *(void *)(a1 + 136);
      int v15 = *(_DWORD *)(v14 + 72);
      if ((v15 & 0x40) != 0)
      {
        *(float *)&uint64_t v16 = v7;
        int v18 = 2139095040;
        if (v7 != INFINITY)
        {
          float v8 = NAN;
          if (v7 != -INFINITY)
          {
            if ((*(_DWORD *)(v14 + 84) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
            {
              float v8 = INFINITY;
              if (v7 != INFINITY) {
                float v8 = v7 - *(float *)(v14 + 84);
              }
            }
            else
            {
              float v8 = NAN;
            }
          }
        }
      }
      if ((v15 & 0x80) != 0)
      {
        *(float *)&uint64_t v16 = v8;
        int v18 = 2139095040;
      }
    }
  }
}

void fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>::SetState(uint64_t a1, uint64_t a2, int a3, unsigned __int8 *a4)
{
  uint64_t v6 = *(void *)a4;
  *(_DWORD *)(a1 + 96) = *((_DWORD *)a4 + 2);
  *(void *)(a1 + 88) = v6;
  *(void *)(a1 + 80) = *(void *)a4;
  if (*(_DWORD *)(a1 + 24) != a2 || *(_DWORD *)(a1 + 28) != a3 || *a4 != *(unsigned __int8 *)(a1 + 32))
  {
    *(_DWORD *)(a1 + ++*(_DWORD *)(result + 24) = a2;
    *(_DWORD *)(a1 + 28) = a3;
    *(unsigned char *)(a1 + 32) = *a4;
    uint64_t v7 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 40))(*(void *)(a1 + 16), a2);
    uint64_t v8 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 56))(*(void *)(a1 + 16), a2);
    BOOL v10 = (*(float (**)(void, uint64_t))(**(void **)(a1 + 16) + 32))(*(void *)(a1 + 16), a2) == INFINITY
       && v7 == v8;
    *(unsigned char *)(a1 + 33) = v10;
    *(unsigned char *)(a1 + 34) = v8 == 0;
  }
  if ((*(unsigned char *)(a1 + 72) & 0x80) != 0)
  {
    uint64_t v11 = *(_DWORD *)(a1 + 40) == 1
        ? *(uint64_t (**)(void))(**(void **)(a1 + 104) + 40)
        : *(uint64_t (**)(void))(**(void **)(a1 + 112) + 40);
    *(void *)(a1 + 280) = v11();
    int v12 = *(_DWORD *)(a1 + 96);
    std::__tree<std::__value_type<int,std::pair<int,int>>,std::__map_value_compare<int,std::__value_type<int,std::pair<int,int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::pair<int,int>>>>::destroy(a1 + 136, *(void **)(a1 + 144));
    *(void *)(a1 + 136) = a1 + 144;
    *(void *)(a1 + 144) = 0;
    uint64_t v13 = *(void **)(a1 + 224);
    *(void *)(a1 + 152) = 0;
    *(void *)(a1 + 160) = -1;
    std::__tree<std::__value_type<int,std::pair<int,int>>,std::__map_value_compare<int,std::__value_type<int,std::pair<int,int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::pair<int,int>>>>::destroy(a1 + 216, v13);
    *(void *)(a1 + 216) = a1 + 224;
    *(void *)(a1 + 2++*(_DWORD *)(result + 24) = 0;
    *(void *)(a1 + 232) = 0;
    *(void *)(a1 + 240) = -1;
    if (v12 != -1)
    {
      fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::AddMultiEpsLabel(a1 + 120, v12);
      fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::AddMultiEpsLabel(a1 + 200, v12);
    }
  }
}

void fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::AddMultiEpsLabel(uint64_t a1, int a2)
{
  if (a2)
  {
    LODWORD(__p[0]) = a2;
    std::__tree<int>::__emplace_unique_key_args<int,int const&>((uint64_t **)(a1 + 16), (int *)__p, __p);
    int v3 = *(_DWORD *)(a1 + 40);
    int v4 = (int)__p[0];
    if (v3 == -1 || SLODWORD(__p[0]) < v3) {
      *(_DWORD *)(a1 + 40) = __p[0];
    }
    int v6 = *(_DWORD *)(a1 + 44);
    if (v6 == -1 || v6 < v4) {
      *(_DWORD *)(a1 + 44) = v4;
    }
  }
  else
  {
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    }
    uint64_t v8 = fst::LogMessage::LogMessage((fst *)&v12, (uint64_t)__p);
    uint64_t v9 = (void *)fst::cerr(v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"MultiEpsMatcher: Bad multi-eps label: 0", 39);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v12);
    if (v11 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_20D426C10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)(v14 - 17));
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::ComputeStart(void **a1)
{
  uint64_t result = (*(uint64_t (**)(void *))(*a1[20] + 24))(a1[20]);
  if (result != -1)
  {
    unsigned int v3 = result;
    unsigned int v4 = (*(uint64_t (**)(void *))(*a1[21] + 24))(a1[21]);
    uint64_t result = 0xFFFFFFFFLL;
    if (v4 != -1)
    {
      long long v5 = __PAIR64__(v4, v3);
      int v6 = -1;
      return fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,(fst::HSType)1>::FindId(a1[22], &v5);
    }
  }
  return result;
}

uint64_t fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,(fst::HSType)1>::FindId(void *a1, long long *a2)
{
  a1[15] = a2;
  BOOL v30 = a1 + 3;
  int8x8_t v4 = (int8x8_t)a1[4];
  if (v4)
  {
    long long v5 = *(int **)(a1[9] + 120);
    unint64_t v6 = *v5
       + 7853 * v5[1]
       + 7867 * (v5[4] ^ __ROR8__(__ROR8__((char)*((void *)v5 + 1), 59) ^ HIDWORD(*((void *)v5 + 1)), 59));
    uint8x8_t v7 = (uint8x8_t)vcnt_s8(v4);
    v7.i16[0] = vaddlv_u8(v7);
    unint64_t v8 = v7.u32[0];
    if (v7.u32[0] > 1uLL)
    {
      unint64_t v9 = v6;
      if (v6 >= *(void *)&v4) {
        unint64_t v9 = v6 % *(void *)&v4;
      }
    }
    else
    {
      unint64_t v9 = (*(void *)&v4 - 1) & v6;
    }
    BOOL v10 = *(uint64_t ***)(*v30 + 8 * v9);
    if (v10)
    {
      for (unint64_t i = *v10; i; unint64_t i = (uint64_t *)*i)
      {
        unint64_t v12 = i[1];
        if (v12 == v6)
        {
          uint64_t v13 = *((unsigned int *)i + 4);
          if (fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,(fst::HSType)1>::HashEqual::operator()(a1 + 11, *((_DWORD *)i + 4), -1))
          {
            return v13;
          }
        }
        else
        {
          if (v8 > 1)
          {
            if (v12 >= *(void *)&v4) {
              v12 %= *(void *)&v4;
            }
          }
          else
          {
            v12 &= *(void *)&v4 - 1;
          }
          if (v12 != v9) {
            break;
          }
        }
      }
    }
  }
  uint64_t v15 = a1[12];
  unint64_t v14 = a1[13];
  uint64_t v13 = (uint64_t)(v14 - v15) / 20;
  int v31 = v13;
  unint64_t v16 = a1[14];
  if (v14 >= v16)
  {
    if ((unint64_t)(v13 + 1) > 0xCCCCCCCCCCCCCCCLL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v19 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v16 - v15) >> 2);
    uint64_t v20 = 2 * v19;
    if (2 * v19 <= v13 + 1) {
      uint64_t v20 = v13 + 1;
    }
    if (v19 >= 0x666666666666666) {
      unint64_t v21 = 0xCCCCCCCCCCCCCCCLL;
    }
    else {
      unint64_t v21 = v20;
    }
    if (v21) {
      unint64_t v21 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::array<int,5ul>>>(v21);
    }
    else {
      uint64_t v22 = 0;
    }
    unint64_t v23 = v21 + 20 * v13;
    unint64_t v24 = v21 + 20 * v22;
    long long v25 = *a2;
    *(_DWORD *)(v23 + 16) = *((_DWORD *)a2 + 4);
    *(_OWORD *)unint64_t v23 = v25;
    unint64_t v18 = v23 + 20;
    uint64_t v27 = (char *)a1[12];
    char v26 = (char *)a1[13];
    if (v26 != v27)
    {
      do
      {
        long long v28 = *(_OWORD *)(v26 - 20);
        *(_DWORD *)(v23 - 4) = *((_DWORD *)v26 - 1);
        *(_OWORD *)(v23 - 20) = v28;
        v23 -= 20;
        v26 -= 20;
      }
      while (v26 != v27);
      char v26 = (char *)a1[12];
    }
    a1[12] = v23;
    a1[13] = v18;
    a1[14] = v24;
    if (v26) {
      operator delete(v26);
    }
  }
  else
  {
    long long v17 = *a2;
    *(_DWORD *)(v14 + 16) = *((_DWORD *)a2 + 4);
    *(_OWORD *)unint64_t v14 = v17;
    unint64_t v18 = v14 + 20;
  }
  a1[13] = v18;
  std::__hash_table<int,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,(fst::HSType)1>::HashFunc,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,(fst::HSType)1>::HashEqual,fst::PoolAllocator<int>>::__emplace_unique_key_args<int,int const&>((uint64_t)v30, v13, &v31);
  return v13;
}

void std::__hash_table<int,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,(fst::HSType)1>::HashFunc,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,(fst::HSType)1>::HashEqual,fst::PoolAllocator<int>>::__emplace_unique_key_args<int,int const&>(uint64_t a1, int a2, _DWORD *a3)
{
  if (a2 < -1)
  {
    unint64_t v9 = 0;
  }
  else
  {
    uint64_t v7 = *(void *)(a1 + 48);
    if (a2 == -1) {
      unint64_t v8 = *(int **)(v7 + 120);
    }
    else {
      unint64_t v8 = (int *)(*(void *)(v7 + 96) + 20 * a2);
    }
    unint64_t v9 = *v8
       + 7853 * v8[1]
       + 7867 * (v8[4] ^ __ROR8__(__ROR8__((char)*((void *)v8 + 1), 59) ^ HIDWORD(*((void *)v8 + 1)), 59));
  }
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v9;
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
    uint64_t v13 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (unint64_t i = *v13; i; unint64_t i = (uint64_t *)*i)
      {
        unint64_t v15 = i[1];
        if (v15 == v9)
        {
          if (fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,(fst::HSType)1>::HashEqual::operator()((uint64_t *)(a1 + 64), *((_DWORD *)i + 4), a2))
          {
            return;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t v16 = fst::PoolAllocator<std::__hash_node<int,void *>>::allocate((uint64_t *)(a1 + 32));
  *(void *)uint64_t v16 = 0;
  *(void *)(v16 + 8) = v9;
  *(_DWORD *)(v16 + 16) = *a3;
  float v17 = (float)(unint64_t)(*(void *)(a1 + 40) + 1);
  float v18 = *(float *)(a1 + 56);
  if (!v10 || (float)(v18 * (float)v10) < v17)
  {
    BOOL v19 = 1;
    if (v10 >= 3) {
      BOOL v19 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v10);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,fst::PoolAllocator<int>>::__rehash<true>(a1, v22);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  unint64_t v23 = *(uint64_t **)(*(void *)a1 + 8 * v3);
  if (v23)
  {
    *(void *)uint64_t v16 = *v23;
LABEL_44:
    *unint64_t v23 = v16;
    goto LABEL_45;
  }
  *(void *)uint64_t v16 = *(void *)(a1 + 24);
  *(void *)(a1 + ++*(_DWORD *)(result + 24) = v16;
  *(void *)(*(void *)a1 + 8 * v3) = a1 + 24;
  if (*(void *)v16)
  {
    unint64_t v24 = *(void *)(*(void *)v16 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v24 >= v10) {
        v24 %= v10;
      }
    }
    else
    {
      v24 &= v10 - 1;
    }
    unint64_t v23 = (uint64_t *)(*(void *)a1 + 8 * v24);
    goto LABEL_44;
  }
LABEL_45:
  ++*(void *)(a1 + 40);
}

void sub_20D4271C8(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<fst::PoolAllocator<std::__hash_node<int,void *>>>::operator()[abi:ne180100](v2, v1);
  _Unwind_Resume(a1);
}

BOOL fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,(fst::HSType)1>::HashEqual::operator()(uint64_t *a1, int a2, int a3)
{
  if (a2 < -1 || a3 < -1) {
    return a2 == a3;
  }
  uint64_t v3 = *a1;
  if (a2 == -1) {
    uint64_t v4 = *(void *)(v3 + 120);
  }
  else {
    uint64_t v4 = *(void *)(v3 + 96) + 20 * a2;
  }
  if (a3 == -1) {
    uint64_t v6 = *(void *)(v3 + 120);
  }
  else {
    uint64_t v6 = *(void *)(v3 + 96) + 20 * a3;
  }
  if (v4 == v6) {
    return 1;
  }
  BOOL v7 = *(_DWORD *)v4 == *(_DWORD *)v6 && *(_DWORD *)(v4 + 4) == *(_DWORD *)(v6 + 4);
  return v7
      && *(unsigned __int8 *)(v4 + 8) == *(unsigned __int8 *)(v6 + 8)
      && *(float *)(v4 + 12) == *(float *)(v6 + 12)
      && *(_DWORD *)(v4 + 16) == *(_DWORD *)(v6 + 16);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::InitMatcher(uint64_t a1, uint64_t a2, int a3)
{
  if ((*(unsigned int (**)(void, void))(****(void ****)(a1 + 144) + 24))(***(void ***)(a1 + 144), 0) == a3)(*(void (**)(void, void))(****(void ****)(a1 + 152) + 24))(***(void ***)(a1 + 152), 0); {
  return 0;
  }
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::Expand(uint64_t a1, int a2)
{
  uint64_t v4 = (unsigned int *)(*(void *)(*(void *)(a1 + 176) + 96) + 20 * a2);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  uint64_t v7 = *(void *)(a1 + 136);
  unint64_t v8 = (void *)*((void *)v4 + 1);
  LODWORD(v4) = v4[4];
  std::string __p = v8;
  int v21 = (int)v4;
  fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>::SetState(v7, v5, v6, (unsigned __int8 *)&__p);
  int v9 = *(_DWORD *)(a1 + 184);
  if (!v9) {
    goto LABEL_28;
  }
  if (v9 != 1)
  {
    uint64_t v12 = (*(uint64_t (**)(void, uint64_t))(****(void ****)(a1 + 144) + 104))(***(void ***)(a1 + 144), v5);
    uint64_t v13 = (*(uint64_t (**)(void, uint64_t))(****(void ****)(a1 + 152) + 104))(***(void ***)(a1 + 152), v6);
    if (v12 == -1 && v13 == -1)
    {
      if (FLAGS_fst_error_fatal) {
        std::string::basic_string[abi:ne180100]<0>(&__p, "FATAL");
      }
      else {
        std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
      }
      float v18 = fst::LogMessage::LogMessage((fst *)&v23, (uint64_t)&__p);
      BOOL v19 = (void *)fst::cerr(v18);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"ComposeFst: both sides can't require match", 42);
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v23);
      if (v22 < 0) {
        operator delete(__p);
      }
      *(void *)(a1 + 8) |= 4uLL;
    }
    else
    {
      BOOL v16 = v13 == -1 || v12 <= v13;
      if (v12 == -1 || !v16) {
        goto LABEL_3;
      }
    }
LABEL_28:
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>(a1, a2, v6, *(void *)(a1 + 160), v5, *(void ***)(a1 + 152), 1);
    return;
  }
LABEL_3:
  uint64_t v10 = *(void *)(a1 + 168);
  uint8x8_t v11 = *(void ***)(a1 + 144);
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>(a1, a2, v5, v10, v6, v11, 0);
}

void sub_20D427550(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, void **a6, int a7)
{
  int v11 = a3;
  (*(void (**)(void, uint64_t))(*(void *)**a6 + 56))(**a6, a3);
  *((_DWORD *)a6 + 18) = v11;
  v19[0] = a7 - 1;
  v19[1] = a7 << 31 >> 31;
  v19[2] = 0;
  v19[3] = a5;
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::MatchArc<fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>(a1, a2, a6, v19, a7);
  unint64_t v18 = 0;
  (*(void (**)(uint64_t, uint64_t, void *))(*(void *)a4 + 136))(a4, a5, v16);
  while (1)
  {
    if (!v16[0])
    {
      unint64_t v15 = v18;
      if (v18 >= v16[2]) {
        goto LABEL_15;
      }
      goto LABEL_9;
    }
    if ((*(unsigned int (**)(void))(*(void *)v16[0] + 24))(v16[0])) {
      break;
    }
    if (!v16[0])
    {
      unint64_t v15 = v18;
LABEL_9:
      unint64_t v14 = (int *)(v16[1] + 16 * v15);
      goto LABEL_10;
    }
    unint64_t v14 = (int *)(*(uint64_t (**)(void))(*(void *)v16[0] + 32))();
LABEL_10:
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::MatchArc<fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>(a1, a2, a6, v14, a7);
    if (v16[0]) {
      (*(void (**)(void))(*(void *)v16[0] + 40))(v16[0]);
    }
    else {
      ++v18;
    }
  }
  if (v16[0])
  {
    (*(void (**)(void))(*(void *)v16[0] + 8))();
    goto LABEL_17;
  }
LABEL_15:
  if (v17) {
    --*v17;
  }
LABEL_17:
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::SetArcs(a1, a2);
}

void sub_20D427798(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _DWORD *a13)
{
  if (a10)
  {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  else if (a13)
  {
    --*a13;
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::MatchArc<fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>(uint64_t a1, int a2, void **a3, int *a4, int a5)
{
  uint64_t v10 = a4 + 1;
  if (!a5) {
    uint64_t v10 = a4;
  }
  uint64_t result = fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Find(a3, *v10);
  if (result && !*((unsigned char *)a3 + 76))
  {
    do
    {
      uint64_t v12 = (long long *)((char *)a3 + 60);
      if (!*((unsigned char *)a3 + 56)) {
        uint64_t v12 = (long long *)(*(uint64_t (**)(void))(*(void *)**a3 + 80))(**a3);
      }
      long long v13 = *v12;
      long long v24 = *(_OWORD *)a4;
      long long v25 = v13;
      if (a5)
      {
        uint64_t v14 = fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>::FilterArc(*(void *)(a1 + 136), (uint64_t)&v24, (uint64_t)&v25);
        uint64_t v22 = v14;
        int v23 = v15;
        if ((_BYTE)v14 == 0xFF)
        {
          int v27 = HIDWORD(v14);
          int v26 = 2139095040;
          if (*((float *)&v14 + 1) == INFINITY && v15 == -1) {
            goto LABEL_21;
          }
        }
        float v17 = (unsigned int *)&v24;
        unint64_t v18 = &v25;
      }
      else
      {
        uint64_t v19 = fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>::FilterArc(*(void *)(a1 + 136), (uint64_t)&v25, (uint64_t)&v24);
        uint64_t v22 = v19;
        int v23 = v20;
        if ((_BYTE)v19 == 0xFF)
        {
          int v27 = HIDWORD(v19);
          int v26 = 2139095040;
          if (*((float *)&v19 + 1) == INFINITY && v20 == -1) {
            goto LABEL_21;
          }
        }
        float v17 = (unsigned int *)&v25;
        unint64_t v18 = &v24;
      }
      fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::AddArc(a1, a2, v17, (uint64_t)v18, (uint64_t)&v22);
LABEL_21:
      uint64_t result = fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Next((uint64_t)a3);
    }
    while (!*((unsigned char *)a3 + 76));
  }
  return result;
}

uint64_t fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Find(void **a1, int a2)
{
  uint64_t v3 = (uint64_t *)(a1 + 3);
  a1[6] = a1 + 3;
  *((unsigned char *)a1 + 56) = 0;
  if (a2 == -1)
  {
    if ((_BYTE)a1[1])
    {
      long long v13 = a1[2];
      while (1)
      {
        a1[6] = v13;
        if (v13 == v3) {
          break;
        }
        char v14 = (*(uint64_t (**)(void, void))(*(void *)**a1 + 64))(**a1, *((unsigned int *)v13 + 7));
        int v15 = a1[6];
        if (v14)
        {
          if (v15 == v3) {
            break;
          }
          uint64_t result = 1;
          goto LABEL_24;
        }
        BOOL v16 = (void *)v15[1];
        if (v16)
        {
          do
          {
            long long v13 = v16;
            BOOL v16 = (void *)*v16;
          }
          while (v16);
        }
        else
        {
          do
          {
            long long v13 = (void *)v15[2];
            BOOL v17 = *v13 == (void)v15;
            int v15 = v13;
          }
          while (!v17);
        }
      }
    }
    int v11 = *(uint64_t (**)(void))(*(void *)**a1 + 64);
  }
  else
  {
    if (a2 && ((_BYTE)a1[1] & 2) != 0)
    {
      int v4 = *((_DWORD *)a1 + 10);
      if (v4 != -1 && v4 <= a2 && *((_DWORD *)a1 + 11) >= a2)
      {
        uint64_t v6 = *v3;
        if (*v3)
        {
          uint64_t v7 = (uint64_t *)(a1 + 3);
          do
          {
            int v8 = *(_DWORD *)(v6 + 28);
            BOOL v9 = v8 < a2;
            if (v8 >= a2) {
              uint64_t v10 = (uint64_t *)v6;
            }
            else {
              uint64_t v10 = (uint64_t *)(v6 + 8);
            }
            if (!v9) {
              uint64_t v7 = (uint64_t *)v6;
            }
            uint64_t v6 = *v10;
          }
          while (*v10);
          if (v7 != v3 && *((_DWORD *)v7 + 7) <= a2)
          {
            uint64_t result = 1;
            *((unsigned char *)a1 + 56) = 1;
            goto LABEL_24;
          }
        }
      }
    }
    int v11 = *(uint64_t (**)(void))(*(void *)**a1 + 64);
  }
  uint64_t result = v11();
LABEL_24:
  *((unsigned char *)a1 + 76) = result ^ 1;
  return result;
}

uint64_t fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>::FilterArc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = a2;
  if ((*(unsigned char *)(a1 + 72) & 0x80) == 0) {
    return fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>::FilterArc(a1, a2, a3);
  }
  uint64_t v7 = *(unsigned int *)(a1 + 96);
  if (v7 == -1)
  {
    uint64_t result = fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>::FilterArc(a1, a2, a3);
    uint64_t v10 = result;
    if ((_BYTE)result == 0xFF && (v12 = HIDWORD(result), int v11 = 2139095040, *((float *)&result + 1) == INFINITY))
    {
      return 0x7F800000000000FFLL;
    }
    else if (*(unsigned char *)(a1 + 76))
    {
      if (*(_DWORD *)(a1 + 40) == 1)
      {
        uint64_t v8 = v4;
        uint64_t v9 = v3;
      }
      else
      {
        uint64_t v8 = v3;
        uint64_t v9 = v4;
      }
      return fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>::PushLabelFilterArc(a1, v8, v9, (uint64_t)&v10);
    }
  }
  else
  {
    if (*(_DWORD *)(a1 + 40) != 1)
    {
      a2 = a3;
      a3 = v4;
    }
    return fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>::PushedLabelFilterArc(a1, a2, a3, v7);
  }
  return result;
}

void *fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::AddArc(uint64_t a1, int a2, unsigned int *a3, uint64_t a4, uint64_t a5)
{
  int v7 = *(_DWORD *)(a4 + 12);
  LODWORD(v18) = a3[3];
  DWORD1(v18) = v7;
  *((void *)&v18 + 1) = *(void *)a5;
  int v19 = *(_DWORD *)(a5 + 8);
  unsigned int v8 = *a3;
  unsigned int v9 = *(_DWORD *)(a4 + 4);
  float v10 = *((float *)a3 + 2);
  float v11 = NAN;
  if (v10 != -INFINITY)
  {
    float v12 = *(float *)(a4 + 8);
    if (v12 != -INFINITY)
    {
      if (v12 == INFINITY || v10 == INFINITY) {
        float v11 = INFINITY;
      }
      else {
        float v11 = v10 + v12;
      }
    }
  }
  unsigned int Id = fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,(fst::HSType)1>::FindId(*(void **)(a1 + 176), &v18);
  *(void *)&long long v17 = __PAIR64__(v9, v8);
  *((void *)&v17 + 1) = __PAIR64__(Id, LODWORD(v11));
  uint64_t MutableState = (void *)fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::GetMutableState(*(void *)(a1 + 120), a2);
  return fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::PushArc(MutableState, &v17);
}

uint64_t fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Next(uint64_t result)
{
  uint64_t v1 = (void **)result;
  if (*(unsigned char *)(result + 56))
  {
    char v2 = 1;
LABEL_3:
    *((unsigned char *)v1 + 76) = v2;
  }
  else
  {
    (*(void (**)(void))(***(void ***)result + 88))(**(void **)result);
    uint64_t result = (*(uint64_t (**)(void))(*(void *)**v1 + 72))(**v1);
    *((unsigned char *)v1 + 76) = result;
    if (result)
    {
      uint64_t v3 = v1 + 3;
      uint64_t v4 = v1[6];
      if (v4 != v1 + 3)
      {
        uint64_t v5 = (void *)v4[1];
        if (v5)
        {
          do
          {
            uint64_t v6 = v5;
            uint64_t v5 = (void *)*v5;
          }
          while (v5);
        }
        else
        {
          do
          {
            uint64_t v6 = (void *)v4[2];
            BOOL v7 = *v6 == (void)v4;
            uint64_t v4 = v6;
          }
          while (!v7);
        }
        while (1)
        {
          v1[6] = v6;
          if (v6 == v3) {
            goto LABEL_19;
          }
          uint64_t result = (*(uint64_t (**)(void, void))(*(void *)**v1 + 64))(**v1, *((unsigned int *)v6 + 7));
          unsigned int v8 = v1[6];
          if (result) {
            break;
          }
          unsigned int v9 = (void *)v8[1];
          if (v9)
          {
            do
            {
              uint64_t v6 = v9;
              unsigned int v9 = (void *)*v9;
            }
            while (v9);
          }
          else
          {
            do
            {
              uint64_t v6 = (void *)v8[2];
              BOOL v7 = *v6 == (void)v8;
              unsigned int v8 = v6;
            }
            while (!v7);
          }
        }
        if (v8 == v3)
        {
LABEL_19:
          uint64_t result = (*(uint64_t (**)(void, uint64_t))(*(void *)**v1 + 64))(**v1, 0xFFFFFFFFLL);
          char v2 = result ^ 1;
          goto LABEL_3;
        }
        *((unsigned char *)v1 + 76) = 0;
      }
    }
  }
  return result;
}

unint64_t fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>::FilterArc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  *(unsigned char *)(a1 + 76) = 0;
  int v6 = *(_DWORD *)(a2 + 4);
  if (v6 == -1)
  {
    if (*(unsigned char *)(a1 + 33))
    {
LABEL_26:
      unint64_t v11 = 0x7F80000000000000;
      unsigned __int8 v10 = -1;
      return v11 | v10;
    }
    unsigned __int8 v23 = *(unsigned char *)(a1 + 34) ^ 1;
  }
  else if (*(_DWORD *)a3 == -1)
  {
    int v8 = *(unsigned __int8 *)(a1 + 32);
    if (*(unsigned char *)(a1 + 32)) {
      unsigned __int8 v9 = -1;
    }
    else {
      unsigned __int8 v9 = 0;
    }
    unsigned __int8 v23 = v9;
    if (v8) {
      goto LABEL_26;
    }
  }
  else
  {
    if (v6) {
      unsigned __int8 v7 = 0;
    }
    else {
      unsigned __int8 v7 = -1;
    }
    unsigned __int8 v23 = v7;
    if (!v6) {
      goto LABEL_26;
    }
  }
  if (*(_DWORD *)(a1 + 40) == 1) {
    uint64_t v4 = a3;
  }
  else {
    a2 = a3;
  }
  unsigned __int8 v10 = fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>::LookAheadFilterArc(a1, a2, v4, &v23);
  if (v10 == 0xFF) {
    goto LABEL_26;
  }
  if ((*(unsigned char *)(a1 + 72) & 0x40) != 0)
  {
    float v12 = 0.0;
    if (*(unsigned char *)(a1 + 76))
    {
      uint64_t v13 = 56;
      if (*(_DWORD *)(a1 + 64) == 1) {
        uint64_t v13 = 48;
      }
      char v14 = *(unsigned char **)(a1 + v13);
      if (fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::LookAheadCheck(v14)) {
        float v12 = *(float *)(*(void *)v14 + 8);
      }
    }
    float v15 = *(float *)(a1 + 84);
    if (v12 == INFINITY) {
      goto LABEL_26;
    }
    float v17 = *(float *)(a3 + 8);
    float v18 = NAN;
    if (v17 != -INFINITY && v12 != -INFINITY)
    {
      if (v12 == INFINITY || v17 == INFINITY)
      {
        float v18 = INFINITY;
        if ((LODWORD(v15) & 0x7FFFFFFFu) >= 0x7F800000) {
          float v18 = NAN;
        }
      }
      else
      {
        float v19 = v12 + v17;
        float v18 = NAN;
        if (v19 != -INFINITY)
        {
          int v20 = LODWORD(v15) & 0x7FFFFFFF;
          float v18 = NAN;
          float v21 = v19 - v15;
          if (v19 == INFINITY) {
            float v21 = INFINITY;
          }
          if (v20 <= 2139095039) {
            float v18 = v21;
          }
        }
      }
    }
    *(float *)(a3 + 8) = v18;
    float v22 = floorf((float)(v12 * 1024.0) + 0.5) * 0.00097656;
    if ((LODWORD(v12) & 0x7FFFFFFFu) >= 0x7F800000) {
      float v22 = v12;
    }
    unint64_t v11 = (unint64_t)LODWORD(v22) << 32;
  }
  else
  {
    unint64_t v11 = 0;
  }
  return v11 | v10;
}

uint64_t fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>::PushedLabelFilterArc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = 0x7F800000000000FFLL;
  int v5 = *(_DWORD *)(a1 + 40);
  BOOL v6 = v5 != 1;
  BOOL v7 = v5 == 1;
  if (*(_DWORD *)(a3 + 4 * v6) == -1)
  {
    uint64_t v9 = 4 * v7;
    int v10 = *(_DWORD *)(a2 + v9);
    if (v10 == a4)
    {
      uint64_t v4 = 0;
      *(_DWORD *)(a2 + v9) = 0;
    }
    else if (!v10)
    {
      if (*(void *)(a1 + 280) == 1) {
        return *(void *)(a1 + 88);
      }
      uint64_t v13 = *(_DWORD *)(a1 + 64) == 1 ? 48 : 56;
      (*(void (**)(void, void))(***(void ***)(a1 + v13) + 56))(**(void **)(a1 + v13), *(unsigned int *)(a2 + 12));
      uint64_t v14 = *(_DWORD *)(a1 + 64) == 1 ? 48 : 56;
      float v15 = *(unsigned char **)(a1 + v14);
      if (!fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::LookAheadCheck(v15)
        || (*(unsigned int (**)(void, uint64_t))(**(void **)v15 + 120))(*(void *)v15, a4))
      {
        return *(void *)(a1 + 88);
      }
    }
  }
  return v4;
}

uint64_t fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>::PushLabelFilterArc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!*(_DWORD *)(a3 + 4 * (*(_DWORD *)(a1 + 40) == 1)))
  {
    uint64_t v9 = 4 * (*(_DWORD *)(a1 + 40) == 1);
    if (!*(_DWORD *)(a2 + v9) || (*(unsigned char *)(a1 + 73) & 4) == 0)
    {
      uint64_t v10 = 56;
      if (*(_DWORD *)(a1 + 64) == 1) {
        uint64_t v10 = 48;
      }
      unint64_t v11 = *(unsigned char **)(a1 + v10);
      if (fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::LookAheadCheck(v11))
      {
        uint64_t v12 = *(void *)v11;
        int v13 = *(_DWORD *)(*(void *)v11 + 24);
        if (v13 != -1)
        {
          int v14 = *(_DWORD *)(v12 + 12);
          int v15 = *(_DWORD *)(v12 + 16);
          float v16 = *(float *)(v12 + 20);
          if (*(_DWORD *)(a1 + 40) == 1) {
            int v17 = *(_DWORD *)(v12 + 12);
          }
          else {
            int v17 = *(_DWORD *)(v12 + 16);
          }
          *(_DWORD *)(a2 + v9) = v17;
          *(_DWORD *)a3 = v14;
          *(_DWORD *)(a3 + 4) = v15;
          float v18 = *(float *)(a3 + 8);
          float v19 = NAN;
          if (v18 != -INFINITY && v16 != -INFINITY)
          {
            float v19 = INFINITY;
            BOOL v20 = v18 == INFINITY || v16 == INFINITY;
            float v21 = v16 + v18;
            if (!v20) {
              float v19 = v21;
            }
          }
          *(float *)(a3 + 8) = v19;
          *(_DWORD *)(a3 + 12) = v13;
        }
      }
    }
  }
  return *(void *)a4;
}

uint64_t fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>::LookAheadFilterArc(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4)
{
  int v7 = *(_DWORD *)(a1 + 72);
  if (*(_DWORD *)(a2 + 4 * (*(_DWORD *)(a1 + 40) == 1)))
  {
    if ((v7 & 0x100) == 0) {
      return *a4;
    }
  }
  else if ((v7 & 0x200) == 0)
  {
    return *a4;
  }
  *(unsigned char *)(a1 + 76) = 1;
  if (*(_DWORD *)(a1 + 64) == 1) {
    uint64_t v8 = 48;
  }
  else {
    uint64_t v8 = 56;
  }
  (*(void (**)(void, void))(***(void ***)(a1 + v8) + 56))(**(void **)(a1 + v8), *(unsigned int *)(a2 + 12));
  int v9 = *(_DWORD *)(a1 + 64);
  BOOL v10 = v9 == 1;
  if (v9 == 1) {
    uint64_t v11 = 48;
  }
  else {
    uint64_t v11 = 56;
  }
  uint64_t v12 = *(unsigned char **)(a1 + v11);
  if (v10) {
    uint64_t v13 = 56;
  }
  else {
    uint64_t v13 = 48;
  }
  uint64_t v14 = (*(uint64_t (**)(void))(***(void ***)(a1 + v13) + 32))(**(void **)(a1 + v13));
  uint64_t v15 = *(unsigned int *)(a3 + 12);
  if (!fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::LookAheadCheck(v12)
    || (*(unsigned int (**)(void, uint64_t, uint64_t))(**(void **)v12 + 128))(*(void *)v12, v14, v15))
  {
    return *a4;
  }
  return 255;
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::Copy()
{
}

void sub_20D428764(_Unwind_Exception *a1)
{
  MEMORY[0x2105595E0](v2, 0x10E0C40EB25B5FDLL);
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~CacheBaseImpl(v1);
  MEMORY[0x2105595E0](v1, 0x10F3C405A371F01);
  _Unwind_Resume(a1);
}

void fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,(fst::HSType)1>::CompactHashBiTable(uint64_t a1)
{
  *(void *)(a1 + 8) = a1;
  *(void *)(a1 + 16) = a1;
  std::unordered_set<int,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,(fst::HSType)1>::HashFunc,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,(fst::HSType)1>::HashEqual,fst::PoolAllocator<int>>::unordered_set();
}

void sub_20D4288F4(_Unwind_Exception *a1)
{
  int v5 = *v3;
  if (*v3)
  {
    *(void *)(v2 + 104) = v5;
    operator delete(v5);
  }
  std::__hash_table<int,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,(fst::HSType)1>::HashFunc,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,(fst::HSType)1>::HashEqual,fst::PoolAllocator<int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::Properties(uint64_t a1, uint64_t a2)
{
  if ((a2 & 4) != 0)
  {
    if ((*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 160) + 64))(*(void *)(a1 + 160), 4, 0)|| (*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 168) + 64))(*(void *)(a1 + 168), 4, 0)|| ((*(uint64_t (**)(void, void))(****(void ****)(a1 + 144) + 40))(***(void ***)(a1 + 144), 0) & 4) != 0|| (char v4 = (*(uint64_t (**)(void, void))(****(void ****)(a1 + 152) + 40))(***(void ***)(a1 + 152), 0), *(_DWORD *)(*(void *)(a1 + 136) + 40) == 3)|| (v4 & 4) != 0)
    {
      *(void *)(a1 + 8) |= 4uLL;
    }
  }
  return *(void *)(a1 + 8) & a2;
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::Properties(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 0x3FFFFFFF0007);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::~ComposeFstImpl(void *a1)
{
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::~ComposeFstImpl(a1);
  JUMPOUT(0x2105595E0);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::~ComposeFstImpl(void *a1)
{
  *a1 = off_26C207D40;
  uint64_t v2 = a1[17];
  if (v2)
  {
    fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::~MultiEpsMatcher(v2 + 200);
    fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::~MultiEpsMatcher(v2 + 120);
    fst::LookAheadSelector<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>::~LookAheadSelector(v2 + 48);
    uint64_t v3 = fst::LookAheadSelector<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>::~LookAheadSelector(v2);
    MEMORY[0x2105595E0](v3, 0x1060C409DA32DC3);
  }
  uint64_t v4 = a1[22];
  if (v4)
  {
    int v5 = *(void **)(v4 + 96);
    if (v5)
    {
      *(void *)(v4 + 104) = v5;
      operator delete(v5);
    }
    std::__hash_table<int,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,(fst::HSType)1>::HashFunc,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,(fst::HSType)1>::HashEqual,fst::PoolAllocator<int>>::~__hash_table(v4 + 24);
    MEMORY[0x2105595E0](v4, 0x10E0C40EB25B5FDLL);
  }
  return fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~CacheBaseImpl(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::ComputeFinal(uint64_t a1, int a2)
{
  uint64_t v4 = *(void *)(*(void *)(a1 + 176) + 96);
  int v5 = (int *)(v4 + 20 * a2);
  int v6 = *v5;
  float v7 = (*(float (**)(void, void))(****(void ****)(a1 + 144) + 96))(***(void ***)(a1 + 144), *v5);
  float v8 = v7;
  *(float *)&uint64_t v16 = v7;
  int v18 = 2139095040;
  if (v7 != INFINITY)
  {
    uint64_t v9 = v5[1];
    float v10 = (*(float (**)(void, uint64_t))(****(void ****)(a1 + 152) + 96))(***(void ***)(a1 + 152), v9);
    *(float *)&uint64_t v16 = v10;
    int v18 = 2139095040;
    if (v10 != INFINITY)
    {
      uint64_t v11 = *(void *)(a1 + 136);
      uint64_t v12 = v4 + 20 * a2;
      uint64_t v13 = *(void *)(v12 + 8);
      LODWORD(v12) = *(_DWORD *)(v12 + 16);
      uint64_t v16 = v13;
      int v17 = v12;
      fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>::SetState(v11, v6, v9, (unsigned __int8 *)&v16);
      uint64_t v14 = *(void *)(a1 + 136);
      int v15 = *(_DWORD *)(v14 + 72);
      if ((v15 & 0x40) != 0)
      {
        *(float *)&uint64_t v16 = v7;
        int v18 = 2139095040;
        if (v7 != INFINITY)
        {
          float v8 = NAN;
          if (v7 != -INFINITY)
          {
            if ((*(_DWORD *)(v14 + 84) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
            {
              float v8 = INFINITY;
              if (v7 != INFINITY) {
                float v8 = v7 - *(float *)(v14 + 84);
              }
            }
            else
            {
              float v8 = NAN;
            }
          }
        }
      }
      if ((v15 & 0x80) != 0)
      {
        *(float *)&uint64_t v16 = v8;
        int v18 = 2139095040;
      }
    }
  }
}

void fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>::SetState(uint64_t a1, int a2, uint64_t a3, unsigned __int8 *a4)
{
  uint64_t v6 = *(void *)a4;
  *(_DWORD *)(a1 + 96) = *((_DWORD *)a4 + 2);
  *(void *)(a1 + 88) = v6;
  *(void *)(a1 + 80) = *(void *)a4;
  if (*(_DWORD *)(a1 + 24) != a2 || *(_DWORD *)(a1 + 28) != a3 || *a4 != *(unsigned __int8 *)(a1 + 32))
  {
    *(_DWORD *)(a1 + ++*(_DWORD *)(result + 24) = a2;
    *(_DWORD *)(a1 + 28) = a3;
    *(unsigned char *)(a1 + 32) = *a4;
    uint64_t v7 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 40))(*(void *)(a1 + 16), a3);
    uint64_t v8 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 48))(*(void *)(a1 + 16), a3);
    BOOL v10 = (*(float (**)(void, uint64_t))(**(void **)(a1 + 16) + 32))(*(void *)(a1 + 16), a3) == INFINITY
       && v7 == v8;
    *(unsigned char *)(a1 + 33) = v10;
    *(unsigned char *)(a1 + 34) = v8 == 0;
  }
  if ((*(unsigned char *)(a1 + 72) & 0x80) != 0)
  {
    uint64_t v11 = *(_DWORD *)(a1 + 40) == 1
        ? *(uint64_t (**)(void))(**(void **)(a1 + 104) + 40)
        : *(uint64_t (**)(void))(**(void **)(a1 + 112) + 40);
    *(void *)(a1 + 280) = v11();
    int v12 = *(_DWORD *)(a1 + 96);
    std::__tree<std::__value_type<int,std::pair<int,int>>,std::__map_value_compare<int,std::__value_type<int,std::pair<int,int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::pair<int,int>>>>::destroy(a1 + 136, *(void **)(a1 + 144));
    *(void *)(a1 + 136) = a1 + 144;
    *(void *)(a1 + 144) = 0;
    uint64_t v13 = *(void **)(a1 + 224);
    *(void *)(a1 + 152) = 0;
    *(void *)(a1 + 160) = -1;
    std::__tree<std::__value_type<int,std::pair<int,int>>,std::__map_value_compare<int,std::__value_type<int,std::pair<int,int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::pair<int,int>>>>::destroy(a1 + 216, v13);
    *(void *)(a1 + 216) = a1 + 224;
    *(void *)(a1 + 2++*(_DWORD *)(result + 24) = 0;
    *(void *)(a1 + 232) = 0;
    *(void *)(a1 + 240) = -1;
    if (v12 != -1)
    {
      fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::AddMultiEpsLabel(a1 + 120, v12);
      fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::AddMultiEpsLabel(a1 + 200, v12);
    }
  }
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::ComputeStart(void **a1)
{
  uint64_t result = (*(uint64_t (**)(void *))(*a1[20] + 24))(a1[20]);
  if (result != -1)
  {
    unsigned int v3 = result;
    unsigned int v4 = (*(uint64_t (**)(void *))(*a1[21] + 24))(a1[21]);
    uint64_t result = 0xFFFFFFFFLL;
    if (v4 != -1)
    {
      long long v5 = __PAIR64__(v4, v3);
      int v6 = -1;
      return fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,(fst::HSType)1>::FindId(a1[22], &v5);
    }
  }
  return result;
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::InitMatcher(uint64_t a1, uint64_t a2, int a3)
{
  if ((*(unsigned int (**)(void, void))(****(void ****)(a1 + 144) + 24))(***(void ***)(a1 + 144), 0) == a3)(*(void (**)(void, void))(****(void ****)(a1 + 152) + 24))(***(void ***)(a1 + 152), 0); {
  return 0;
  }
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::Expand(uint64_t a1, int a2)
{
  unsigned int v4 = (unsigned int *)(*(void *)(*(void *)(a1 + 176) + 96) + 20 * a2);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  uint64_t v7 = *(void *)(a1 + 136);
  uint64_t v8 = (void *)*((void *)v4 + 1);
  LODWORD(v4) = v4[4];
  std::string __p = v8;
  int v21 = (int)v4;
  fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>::SetState(v7, v5, v6, (unsigned __int8 *)&__p);
  int v9 = *(_DWORD *)(a1 + 184);
  if (!v9) {
    goto LABEL_28;
  }
  if (v9 != 1)
  {
    uint64_t v12 = (*(uint64_t (**)(void, uint64_t))(****(void ****)(a1 + 144) + 104))(***(void ***)(a1 + 144), v5);
    uint64_t v13 = (*(uint64_t (**)(void, uint64_t))(****(void ****)(a1 + 152) + 104))(***(void ***)(a1 + 152), v6);
    if (v12 == -1 && v13 == -1)
    {
      if (FLAGS_fst_error_fatal) {
        std::string::basic_string[abi:ne180100]<0>(&__p, "FATAL");
      }
      else {
        std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
      }
      int v18 = fst::LogMessage::LogMessage((fst *)&v23, (uint64_t)&__p);
      float v19 = (void *)fst::cerr(v18);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"ComposeFst: both sides can't require match", 42);
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v23);
      if (v22 < 0) {
        operator delete(__p);
      }
      *(void *)(a1 + 8) |= 4uLL;
    }
    else
    {
      BOOL v16 = v13 == -1 || v12 <= v13;
      if (v12 == -1 || !v16) {
        goto LABEL_3;
      }
    }
LABEL_28:
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>(a1, a2, v6, *(void *)(a1 + 160), v5, *(void ***)(a1 + 152), 1);
    return;
  }
LABEL_3:
  uint64_t v10 = *(void *)(a1 + 168);
  uint64_t v11 = *(void ***)(a1 + 144);
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>(a1, a2, v5, v10, v6, v11, 0);
}

void sub_20D429368(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, void **a6, int a7)
{
  int v11 = a3;
  (*(void (**)(void, uint64_t))(*(void *)**a6 + 56))(**a6, a3);
  *((_DWORD *)a6 + 18) = v11;
  v19[0] = a7 - 1;
  v19[1] = a7 << 31 >> 31;
  v19[2] = 0;
  v19[3] = a5;
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::MatchArc<fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>(a1, a2, a6, v19, a7);
  unint64_t v18 = 0;
  (*(void (**)(uint64_t, uint64_t, void *))(*(void *)a4 + 136))(a4, a5, v16);
  while (1)
  {
    if (!v16[0])
    {
      unint64_t v15 = v18;
      if (v18 >= v16[2]) {
        goto LABEL_15;
      }
      goto LABEL_9;
    }
    if ((*(unsigned int (**)(void))(*(void *)v16[0] + 24))(v16[0])) {
      break;
    }
    if (!v16[0])
    {
      unint64_t v15 = v18;
LABEL_9:
      uint64_t v14 = (int *)(v16[1] + 16 * v15);
      goto LABEL_10;
    }
    uint64_t v14 = (int *)(*(uint64_t (**)(void))(*(void *)v16[0] + 32))();
LABEL_10:
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::MatchArc<fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>(a1, a2, a6, v14, a7);
    if (v16[0]) {
      (*(void (**)(void))(*(void *)v16[0] + 40))(v16[0]);
    }
    else {
      ++v18;
    }
  }
  if (v16[0])
  {
    (*(void (**)(void))(*(void *)v16[0] + 8))();
    goto LABEL_17;
  }
LABEL_15:
  if (v17) {
    --*v17;
  }
LABEL_17:
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::SetArcs(a1, a2);
}

void sub_20D4295B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _DWORD *a13)
{
  if (a10)
  {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  else if (a13)
  {
    --*a13;
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::MatchArc<fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>(uint64_t a1, int a2, void **a3, int *a4, int a5)
{
  uint64_t v10 = a4 + 1;
  if (!a5) {
    uint64_t v10 = a4;
  }
  uint64_t result = fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Find(a3, *v10);
  if (result && !*((unsigned char *)a3 + 76))
  {
    do
    {
      uint64_t v12 = (long long *)((char *)a3 + 60);
      if (!*((unsigned char *)a3 + 56)) {
        uint64_t v12 = (long long *)(*(uint64_t (**)(void))(*(void *)**a3 + 80))(**a3);
      }
      long long v13 = *v12;
      long long v24 = *(_OWORD *)a4;
      long long v25 = v13;
      if (a5)
      {
        uint64_t v14 = fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>::FilterArc(*(void *)(a1 + 136), (uint64_t)&v24, (uint64_t)&v25);
        uint64_t v22 = v14;
        int v23 = v15;
        if ((_BYTE)v14 == 0xFF)
        {
          int v27 = HIDWORD(v14);
          int v26 = 2139095040;
          if (*((float *)&v14 + 1) == INFINITY && v15 == -1) {
            goto LABEL_21;
          }
        }
        int v17 = (unsigned int *)&v24;
        unint64_t v18 = &v25;
      }
      else
      {
        uint64_t v19 = fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>::FilterArc(*(void *)(a1 + 136), (uint64_t)&v25, (uint64_t)&v24);
        uint64_t v22 = v19;
        int v23 = v20;
        if ((_BYTE)v19 == 0xFF)
        {
          int v27 = HIDWORD(v19);
          int v26 = 2139095040;
          if (*((float *)&v19 + 1) == INFINITY && v20 == -1) {
            goto LABEL_21;
          }
        }
        int v17 = (unsigned int *)&v25;
        unint64_t v18 = &v24;
      }
      fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::AddArc(a1, a2, v17, (uint64_t)v18, (uint64_t)&v22);
LABEL_21:
      uint64_t result = fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Next((uint64_t)a3);
    }
    while (!*((unsigned char *)a3 + 76));
  }
  return result;
}

uint64_t fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>::FilterArc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = a2;
  if ((*(unsigned char *)(a1 + 72) & 0x80) == 0) {
    return fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>::FilterArc(a1, a2, a3);
  }
  uint64_t v7 = *(unsigned int *)(a1 + 96);
  if (v7 == -1)
  {
    uint64_t result = fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>::FilterArc(a1, a2, a3);
    uint64_t v10 = result;
    if ((_BYTE)result == 0xFF && (v12 = HIDWORD(result), int v11 = 2139095040, *((float *)&result + 1) == INFINITY))
    {
      return 0x7F800000000000FFLL;
    }
    else if (*(unsigned char *)(a1 + 76))
    {
      if (*(_DWORD *)(a1 + 40) == 1)
      {
        uint64_t v8 = v4;
        uint64_t v9 = v3;
      }
      else
      {
        uint64_t v8 = v3;
        uint64_t v9 = v4;
      }
      return fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>::PushLabelFilterArc(a1, v8, v9, (uint64_t)&v10);
    }
  }
  else
  {
    if (*(_DWORD *)(a1 + 40) != 1)
    {
      a2 = a3;
      a3 = v4;
    }
    return fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>::PushedLabelFilterArc(a1, a2, a3, v7);
  }
  return result;
}

unint64_t fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>::FilterArc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  *(unsigned char *)(a1 + 76) = 0;
  if (*(_DWORD *)a3 == -1)
  {
    if (*(unsigned char *)(a1 + 33)) {
      goto LABEL_24;
    }
    unsigned __int8 v7 = *(unsigned char *)(a1 + 34) ^ 1;
LABEL_7:
    unsigned __int8 v24 = v7;
    goto LABEL_12;
  }
  int v6 = *(_DWORD *)(a2 + 4);
  if (v6 != -1)
  {
    if (!v6) {
      goto LABEL_24;
    }
    unsigned __int8 v7 = 0;
    goto LABEL_7;
  }
  int v8 = *(unsigned __int8 *)(a1 + 32);
  BOOL v9 = v8 == 1;
  if (v8 == 1) {
    unsigned __int8 v10 = -1;
  }
  else {
    unsigned __int8 v10 = 0;
  }
  unsigned __int8 v24 = v10;
  if (v9) {
    goto LABEL_24;
  }
LABEL_12:
  if (*(_DWORD *)(a1 + 40) == 1) {
    uint64_t v4 = a3;
  }
  else {
    a2 = a3;
  }
  unsigned __int8 v11 = fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>::LookAheadFilterArc(a1, a2, v4, &v24);
  if (v11 == 0xFF) {
    goto LABEL_24;
  }
  if ((*(unsigned char *)(a1 + 72) & 0x40) == 0)
  {
    unint64_t v12 = 0;
    return v12 | v11;
  }
  float v13 = 0.0;
  if (*(unsigned char *)(a1 + 76))
  {
    uint64_t v14 = 56;
    if (*(_DWORD *)(a1 + 64) == 1) {
      uint64_t v14 = 48;
    }
    int v15 = *(unsigned char **)(a1 + v14);
    if (fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::LookAheadCheck(v15)) {
      float v13 = *(float *)(*(void *)v15 + 8);
    }
  }
  float v16 = *(float *)(a1 + 84);
  if (v13 == INFINITY)
  {
LABEL_24:
    unint64_t v12 = 0x7F80000000000000;
    unsigned __int8 v11 = -1;
    return v12 | v11;
  }
  float v18 = *(float *)(a3 + 8);
  float v19 = NAN;
  if (v18 != -INFINITY && v13 != -INFINITY)
  {
    if (v13 == INFINITY || v18 == INFINITY)
    {
      float v19 = INFINITY;
      if ((LODWORD(v16) & 0x7FFFFFFFu) >= 0x7F800000) {
        float v19 = NAN;
      }
    }
    else
    {
      float v20 = v13 + v18;
      float v19 = NAN;
      if (v20 != -INFINITY)
      {
        int v21 = LODWORD(v16) & 0x7FFFFFFF;
        float v19 = NAN;
        float v22 = v20 - v16;
        if (v20 == INFINITY) {
          float v22 = INFINITY;
        }
        if (v21 <= 2139095039) {
          float v19 = v22;
        }
      }
    }
  }
  *(float *)(a3 + 8) = v19;
  float v23 = floorf((float)(v13 * 1024.0) + 0.5) * 0.00097656;
  if ((LODWORD(v13) & 0x7FFFFFFFu) >= 0x7F800000) {
    float v23 = v13;
  }
  unint64_t v12 = (unint64_t)LODWORD(v23) << 32;
  return v12 | v11;
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::Copy()
{
}

void sub_20D429E08(_Unwind_Exception *a1)
{
  MEMORY[0x2105595E0](v2, 0x10E0C40EB25B5FDLL);
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~CacheBaseImpl(v1);
  MEMORY[0x2105595E0](v1, 0x10F3C405A371F01);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::Properties(uint64_t a1, uint64_t a2)
{
  if ((a2 & 4) != 0)
  {
    if ((*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 160) + 64))(*(void *)(a1 + 160), 4, 0)|| (*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 168) + 64))(*(void *)(a1 + 168), 4, 0)|| ((*(uint64_t (**)(void, void))(****(void ****)(a1 + 144) + 40))(***(void ***)(a1 + 144), 0) & 4) != 0|| (char v4 = (*(uint64_t (**)(void, void))(****(void ****)(a1 + 152) + 40))(***(void ***)(a1 + 152), 0), *(_DWORD *)(*(void *)(a1 + 136) + 40) == 3)|| (v4 & 4) != 0)
    {
      *(void *)(a1 + 8) |= 4uLL;
    }
  }
  return *(void *)(a1 + 8) & a2;
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::Properties(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 0x3FFFFFFF0007);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::~ComposeFstImpl(void *a1)
{
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::~ComposeFstImpl(a1);
  JUMPOUT(0x2105595E0);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::~ComposeFstImpl(void *a1)
{
  *a1 = off_26C207DA0;
  uint64_t v2 = a1[17];
  if (v2)
  {
    fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::~MultiEpsMatcher(v2 + 200);
    fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::~MultiEpsMatcher(v2 + 120);
    fst::LookAheadSelector<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>::~LookAheadSelector(v2 + 48);
    uint64_t v3 = fst::LookAheadSelector<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>::~LookAheadSelector(v2);
    MEMORY[0x2105595E0](v3, 0x1060C409DA32DC3);
  }
  uint64_t v4 = a1[22];
  if (v4)
  {
    uint64_t v5 = *(void **)(v4 + 96);
    if (v5)
    {
      *(void *)(v4 + 104) = v5;
      operator delete(v5);
    }
    std::__hash_table<int,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,(fst::HSType)1>::HashFunc,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,(fst::HSType)1>::HashEqual,fst::PoolAllocator<int>>::~__hash_table(v4 + 24);
    MEMORY[0x2105595E0](v4, 0x10E0C40EB25B5FDLL);
  }
  return fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~CacheBaseImpl(a1);
}

uint64_t FSTGrammarImpl::has_rule(uint64_t a1, const void **a2)
{
  uint64_t v2 = *(const void ***)(a1 + 16);
  if (!v2) {
    return 0;
  }
  uint64_t v4 = a1 + 24;
  while (std::less<std::string>::operator()[abi:ne180100](v4, a2, v2 + 4))
  {
LABEL_6:
    uint64_t v2 = (const void **)*v2;
    if (!v2) {
      return 0;
    }
  }
  if (std::less<std::string>::operator()[abi:ne180100](v4, v2 + 4, a2))
  {
    ++v2;
    goto LABEL_6;
  }
  return 1;
}

void FSTGrammarJSON::~FSTGrammarJSON(FSTGrammarJSON *this)
{
  *(void *)this = off_26C200A68;
  std::__tree<std::__value_type<std::string,std::vector<FSTGrammarJSON::Rule>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<FSTGrammarJSON::Rule>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<FSTGrammarJSON::Rule>>>>::destroy(*((void **)this + 2));
  JUMPOUT(0x2105595E0);
}

{
  *(void *)this = off_26C200A68;
  std::__tree<std::__value_type<std::string,std::vector<FSTGrammarJSON::Rule>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<FSTGrammarJSON::Rule>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<FSTGrammarJSON::Rule>>>>::destroy(*((void **)this + 2));
}

void std::__tree<std::__value_type<std::string,std::vector<FSTGrammarJSON::Rule>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<FSTGrammarJSON::Rule>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<FSTGrammarJSON::Rule>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::vector<FSTGrammarJSON::Rule>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<FSTGrammarJSON::Rule>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<FSTGrammarJSON::Rule>>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,std::vector<FSTGrammarJSON::Rule>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<FSTGrammarJSON::Rule>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<FSTGrammarJSON::Rule>>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<FSTGrammarJSON::Rule>>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<FSTGrammarJSON::Rule>>,0>(uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 24);
  std::vector<FSTGrammarJSON::Rule>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void std::vector<FSTGrammarJSON::Rule>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    uint64_t v4 = (void **)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 6;
        std::allocator<FSTGrammarJSON::Rule>::destroy[abi:ne180100](v4);
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<FSTGrammarJSON::Rule>::destroy[abi:ne180100](void **this)
{
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
  UTFRegex::~UTFRegex((UTFRegex *)this);
}

void FSTGrammarJSON::apply_rule(uint64_t a1@<X0>, uint64_t a2@<X1>, const char *a3@<X2>, std::string *a4@<X8>)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  uint64_t v7 = a1 + 16;
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8) {
    goto LABEL_8;
  }
  uint64_t v10 = a1 + 24;
  uint64_t v11 = a1 + 16;
  do
  {
    BOOL v12 = std::less<std::string>::operator()[abi:ne180100](v10, (const void **)(v8 + 32), (const void **)a2);
    float v13 = (uint64_t *)(v8 + 8);
    if (!v12)
    {
      float v13 = (uint64_t *)v8;
      uint64_t v11 = v8;
    }
    uint64_t v8 = *v13;
  }
  while (*v13);
  if (v11 == v7 || std::less<std::string>::operator()[abi:ne180100](v10, (const void **)a2, (const void **)(v11 + 32)))
  {
LABEL_8:
    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    uint64_t v14 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
    {
      if (*(char *)(a2 + 23) >= 0) {
        float v16 = (const void *)a2;
      }
      else {
        float v16 = *(const void **)a2;
      }
      *(_DWORD *)int buf = 136315138;
      uint64_t v32 = v16;
      _os_log_impl(&dword_20CD80000, v14, OS_LOG_TYPE_ERROR, "Ignore unknown rule '%s'", buf, 0xCu);
    }
    if (*(char *)(a2 + 23) >= 0) {
      int v17 = (const void *)a2;
    }
    else {
      int v17 = *(const void **)a2;
    }
    Diagnostics::log(3, "Ignore unknown rule '%s'", v15, v17);
  }
  else
  {
    float v18 = *(UTFRegex **)(v11 + 56);
    float v19 = *(UTFRegex **)(v11 + 64);
    while (v18 != v19)
    {
      *(_DWORD *)int buf = 0;
      int v20 = a3[23];
      if (v20 >= 0) {
        int v21 = a3;
      }
      else {
        int v21 = *(const char **)a3;
      }
      if (v20 >= 0) {
        int64_t v22 = *((unsigned __int8 *)a3 + 23);
      }
      else {
        int64_t v22 = *((void *)a3 + 1);
      }
      float v23 = utext_openUTF8(0, v21, v22, (UErrorCode *)buf);
      if (*(int *)buf <= 0) {
        unsigned __int8 v24 = v23;
      }
      else {
        unsigned __int8 v24 = 0;
      }
      UTFRegex::set_text(v18, v24, 1);
      *(_DWORD *)int buf = 0;
      if (uregex_matches(*(URegularExpression **)v18, -1, (UErrorCode *)buf))
      {
        UTFString::replace<std::string>(a4, a3, v18, (uint64_t)v18 + 24);
        return;
      }
      float v18 = (UTFRegex *)((char *)v18 + 48);
    }
    if (*(unsigned char *)(a1 + 32))
    {
      std::string::basic_string[abi:ne180100]<0>(a4, &byte_20D5A22AE);
      return;
    }
    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    long long v25 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
    {
      if (*(char *)(a2 + 23) >= 0) {
        int v27 = (const void *)a2;
      }
      else {
        int v27 = *(const void **)a2;
      }
      if (a3[23] >= 0) {
        long long v28 = a3;
      }
      else {
        long long v28 = *(const char **)a3;
      }
      *(_DWORD *)int buf = 136315394;
      uint64_t v32 = v27;
      __int16 v33 = 2080;
      float v34 = v28;
      _os_log_impl(&dword_20CD80000, v25, OS_LOG_TYPE_ERROR, "FSTGrammarJSON unable to apply rule %s(%s).", buf, 0x16u);
    }
    if (*(char *)(a2 + 23) >= 0) {
      uint64_t v29 = (const void *)a2;
    }
    else {
      uint64_t v29 = *(const void **)a2;
    }
    if (a3[23] >= 0) {
      BOOL v30 = (uint64_t *)a3;
    }
    else {
      BOOL v30 = *(uint64_t **)a3;
    }
    Diagnostics::log(3, "FSTGrammarJSON unable to apply rule %s(%s).", v26, v29, v30);
  }
  if (a3[23] < 0)
  {
    std::string::__init_copy_ctor_external(a4, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    *(_OWORD *)&a4->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    a4->__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
  }
}

uint64_t FSTGrammarJSON::has_rule(uint64_t a1, const void **a2)
{
  uint64_t v2 = *(const void ***)(a1 + 16);
  if (!v2) {
    return 0;
  }
  uint64_t v4 = a1 + 24;
  while (std::less<std::string>::operator()[abi:ne180100](v4, a2, v2 + 4))
  {
LABEL_6:
    uint64_t v2 = (const void **)*v2;
    if (!v2) {
      return 0;
    }
  }
  if (std::less<std::string>::operator()[abi:ne180100](v4, v2 + 4, a2))
  {
    ++v2;
    goto LABEL_6;
  }
  return 1;
}

void FSTGrammar::create(const char *a1)
{
  v7[73] = *(void **)MEMORY[0x263EF8340];
  if (a1[23] < 0) {
    a1 = *(const char **)a1;
  }
  int v1 = open(a1, 0);
  if ((v1 & 0x80000000) == 0)
  {
    int v2 = v1;
    LOBYTE(v7[0]) = 0;
    BOOL v3 = read(v1, v7, 1uLL) == 1 && LOBYTE(v7[0]) == 123;
    BOOL v4 = v3;
    close(v2);
    if (v4) {
      operator new();
    }
  }
  if (atomic_load_explicit((atomic_ullong *volatile)&FSTGrammar::create(std::string const&,BOOL)::register_fst_types, memory_order_acquire) != -1)
  {
    v7[0] = &v6;
    uint64_t v5 = v7;
    std::__call_once(&FSTGrammar::create(std::string const&,BOOL)::register_fst_types, &v5, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<FSTGrammar::create(std::string const&,BOOL)::$_0 &&>>);
  }
  operator new();
}

void sub_20D42BA98(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, void **a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t p_buf,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,long long buf)
{
  if (a2)
  {
    fst::LogMessage::~LogMessage((fst::LogMessage *)&a47);
    if (a36 < 0) {
      operator delete(__p);
    }
    uint64_t v55 = (void *)a14[13];
    if (v55)
    {
      a14[14] = v55;
      operator delete(v55);
    }
    p_int buf = a11;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_buf);
    p_int buf = a15;
    std::vector<std::vector<long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_buf);
    p_int buf = a10;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_buf);
    float v56 = *a16;
    if (*a16)
    {
      a14[2] = v56;
      operator delete(v56);
    }
    MEMORY[0x2105595E0](a14, 0x10B0C40F71FB6DELL);
    p_int buf = (uint64_t)&buf;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_buf);
    std::__tree<std::__value_type<std::string,fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::destroy(*(void **)(a12 + 16));
    MEMORY[0x2105595E0](a12, 0x10A1C40CEA811D0);
    __cxa_begin_catch(a1);
    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    unint64_t v57 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
    {
      if (*(char *)(a17 + 23) >= 0) {
        uint64_t v59 = a17;
      }
      else {
        uint64_t v59 = *(void *)a17;
      }
      LODWORD(buf) = 136315138;
      *(void *)((char *)&buf + 4) = v59;
      _os_log_impl(&dword_20CD80000, v57, OS_LOG_TYPE_ERROR, "Failed to load FST rules from %s.", (uint8_t *)&buf, 0xCu);
    }
    Diagnostics::log(3, "Failed to load FST rules from %s.", v58);
    __cxa_end_catch();
    JUMPOUT(0x20D42BA1CLL);
  }
  _Unwind_Resume(a1);
}

void fst::STTableReader<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::FstReader<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Reset(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 152))
  {
    if (*(void *)(a1 + 16) != *(void *)(a1 + 8))
    {
      uint64_t v2 = 0;
      unint64_t v3 = 0;
      do
      {
        std::istream::seekg();
        ++v3;
        v2 += 24;
      }
      while (v3 < (uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 3);
    }
    fst::STTableReader<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::FstReader<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::MakeHeap(a1);
  }
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  int v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,0>((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }
}

void fst::STTableReader<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::FstReader<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::MakeHeap(uint64_t a1)
{
  uint64_t v1 = a1;
  unint64_t v3 = (void **)(a1 + 104);
  uint64_t v2 = *(void **)(a1 + 104);
  *(void *)(a1 + 112) = v2;
  if (*(void *)(a1 + 16) == *(void *)(a1 + 8))
  {
    float v18 = v2;
LABEL_26:
    uint64_t v19 = (char *)v2 - v18;
    if ((char *)v2 - v18 >= 9)
    {
      int v20 = v18;
      int v45 = **(uint64_t ***)(v1 + 136);
      uint64_t v46 = v19;
      uint64_t v21 = v19 >> 3;
      int64_t v22 = (unint64_t)((v19 >> 3) - 2) >> 1;
      int64_t v23 = v22;
      int64_t v49 = v22;
      do
      {
        int64_t v24 = v23;
        if (v19 >= 16 && v22 >= v23)
        {
          uint64_t v25 = (2 * v23) | 1;
          int v26 = (uint64_t *)&v20[8 * v25];
          uint64_t v27 = 2 * v23 + 2;
          uint64_t v28 = *v26;
          int64_t v47 = v23;
          if (v27 >= v21)
          {
            uint64_t v30 = *v45;
          }
          else
          {
            uint64_t v29 = v26[1];
            uint64_t v30 = *v45;
            BOOL v31 = fst::STTableReader<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::FstReader<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Compare::operator()(*v45, v28, v29);
            if (v31) {
              uint64_t v28 = v29;
            }
            int64_t v22 = v49;
            if (v31) {
              ++v26;
            }
            uint64_t v19 = v46;
            int64_t v24 = v47;
            if (v31) {
              uint64_t v25 = v27;
            }
          }
          uint64_t v32 = (uint64_t *)&v20[8 * v24];
          uint64_t v50 = *v32;
          BOOL v33 = fst::STTableReader<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::FstReader<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Compare::operator()(v30, v28, *v32);
          int64_t v24 = v47;
          uint64_t v1 = a1;
          if (!v33)
          {
            do
            {
              *uint64_t v32 = v28;
              uint64_t v32 = v26;
              if (v22 < v25) {
                break;
              }
              uint64_t v34 = (2 * v25) | 1;
              int v26 = (uint64_t *)&v20[8 * v34];
              uint64_t v35 = 2 * v25 + 2;
              uint64_t v28 = *v26;
              if (v35 < v21)
              {
                uint64_t v36 = v26[1];
                BOOL v37 = fst::STTableReader<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::FstReader<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Compare::operator()(v30, *v26, v36);
                if (v37)
                {
                  uint64_t v28 = v36;
                  ++v26;
                }
                int64_t v22 = v49;
                if (v37) {
                  uint64_t v34 = v35;
                }
              }
              uint64_t v25 = v34;
            }
            while (!fst::STTableReader<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::FstReader<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Compare::operator()(v30, v28, v50));
            *uint64_t v32 = v50;
            int64_t v24 = v47;
            uint64_t v1 = a1;
            uint64_t v19 = v46;
          }
        }
        int64_t v23 = v24 - 1;
      }
      while (v24);
    }
    fst::STTableReader<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::FstReader<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::PopHeap(v1);
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v5 = a1 + 120;
    while (1)
    {
      uint64_t v6 = *(void *)(v1 + 80) + 24 * v4;
      if (*(char *)(v6 + 23) < 0)
      {
        **(unsigned char **)uint64_t v6 = 0;
        *(void *)(v6 + 8) = 0;
      }
      else
      {
        *(unsigned char *)uint64_t v6 = 0;
        *(unsigned char *)(v6 + 23) = 0;
      }
      LODWORD(__p[0]) = 0;
      std::istream::read();
      uint64_t v1 = a1;
      uint64_t v7 = *(void **)(*(void *)(a1 + 8) + 8 * v4);
      if ((*((unsigned char *)v7 + *(void *)(*v7 - 24) + 32) & 5) != 0) {
        break;
      }
      BOOL v9 = *(char **)(a1 + 112);
      unint64_t v8 = *(void *)(a1 + 120);
      if ((unint64_t)v9 >= v8)
      {
        uint64_t v10 = (char *)*v3;
        uint64_t v11 = (v9 - (unsigned char *)*v3) >> 3;
        unint64_t v12 = v11 + 1;
        if ((unint64_t)(v11 + 1) >> 61) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v13 = v8 - (void)v10;
        if (v13 >> 2 > v12) {
          unint64_t v12 = v13 >> 2;
        }
        if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v14 = v12;
        }
        if (v14)
        {
          int v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v5, v14);
          uint64_t v10 = *(char **)(a1 + 104);
          BOOL v9 = *(char **)(a1 + 112);
        }
        else
        {
          int v15 = 0;
        }
        float v16 = &v15[8 * v11];
        *(void *)float v16 = v4;
        uint64_t v2 = v16 + 8;
        while (v9 != v10)
        {
          uint64_t v17 = *((void *)v9 - 1);
          v9 -= 8;
          *((void *)v16 - 1) = v17;
          v16 -= 8;
        }
        *(void *)(a1 + 104) = v16;
        *(void *)(a1 + 112) = v2;
        *(void *)(a1 + 120) = &v15[8 * v14];
        if (v10) {
          operator delete(v10);
        }
      }
      else
      {
        *(void *)BOOL v9 = v4;
        uint64_t v2 = v9 + 8;
      }
      *(void *)(a1 + 112) = v2;
      if (++v4 >= (unint64_t)((uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 3))
      {
        float v18 = *v3;
        goto LABEL_26;
      }
    }
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    }
    float v38 = fst::LogMessage::LogMessage((fst *)&__c, (uint64_t)__p);
    float v39 = (void *)fst::cerr(v38);
    unint64_t v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)"STTableReader: error reading file: ", 35);
    uint64_t v41 = *(void *)(a1 + 32) + 24 * v4;
    int v42 = *(char *)(v41 + 23);
    if (v42 >= 0) {
      uint64_t v43 = *(void *)(a1 + 32) + 24 * v4;
    }
    else {
      uint64_t v43 = *(void *)v41;
    }
    if (v42 >= 0) {
      uint64_t v44 = *(unsigned __int8 *)(v41 + 23);
    }
    else {
      uint64_t v44 = *(void *)(v41 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, v43, v44);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&__c);
    if (v52 < 0) {
      operator delete(__p[0]);
    }
    *(unsigned char *)(a1 + 152) = 1;
  }
}

void sub_20D42C4F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,int a21,__int16 a22,char a23,char a24)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void fst::STTableReader<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::FstReader<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::PopHeap(uint64_t a1)
{
  uint64_t v1 = a1;
  unint64_t v3 = *(uint64_t **)(a1 + 104);
  uint64_t v2 = *(void *)(a1 + 112);
  if (v2 - (uint64_t)v3 >= 9)
  {
    uint64_t v58 = *(void *)(a1 + 112);
    uint64_t v4 = 0;
    uint64_t v5 = **(uint64_t ***)(a1 + 136);
    unint64_t v6 = (unint64_t)(v2 - (void)v3) >> 3;
    uint64_t v56 = *(void *)(a1 + 104);
    uint64_t v57 = *v3;
    uint64_t v7 = v6 - 2;
    if (v6 < 2) {
      uint64_t v7 = v6 - 1;
    }
    uint64_t v8 = v7 >> 1;
    do
    {
      BOOL v9 = &v3[v4];
      uint64_t v12 = v9[1];
      uint64_t v11 = v9 + 1;
      uint64_t v10 = v12;
      uint64_t v13 = (2 * v4) | 1;
      uint64_t v14 = 2 * v4 + 2;
      if (v14 < (uint64_t)v6)
      {
        uint64_t v15 = v11[1];
        if (fst::STTableReader<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::FstReader<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Compare::operator()(*v5, v10, v15))
        {
          uint64_t v10 = v15;
          ++v11;
          uint64_t v13 = v14;
        }
      }
      *unint64_t v3 = v10;
      unint64_t v3 = v11;
      uint64_t v4 = v13;
    }
    while (v13 <= v8);
    uint64_t v2 = v58;
    float v16 = (uint64_t *)(v58 - 8);
    if ((uint64_t *)(v58 - 8) == v11)
    {
      uint64_t *v11 = v57;
      uint64_t v1 = a1;
    }
    else
    {
      uint64_t *v11 = *v16;
      *float v16 = v57;
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,fst::STTableReader<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::FstReader<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Compare &,std::__wrap_iter<long long *>>(v56, (uint64_t)(v11 + 1), v5, ((uint64_t)v11 - v56 + 8) >> 3);
      uint64_t v1 = a1;
      uint64_t v2 = *(void *)(a1 + 112);
    }
  }
  uint64_t v17 = *(void *)(v2 - 8);
  *(void *)(v1 + 128) = v17;
  uint64_t v18 = *(void *)(v1 + 144);
  if (v18)
  {
    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    uint64_t v17 = *(void *)(v1 + 128);
  }
  uint64_t v19 = *(void *)(*(void *)(v1 + 8) + 8 * v17);
  std::string::basic_string[abi:ne180100]<0>(v60, "<unspecified>");
  fst::FstReadOptions::FstReadOptions(&v62, v60, 0, 0, 0);
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v74, v62.__r_.__value_.__l.__data_, v62.__r_.__value_.__l.__size_);
  }
  else {
    std::string v74 = v62;
  }
  v75[0] = v63[0];
  *(_OWORD *)((char *)v75 + 14) = *(_OWORD *)((char *)v63 + 14);
  long long v71 = 0u;
  long long v70 = 0u;
  long long v69 = 0u;
  *(_OWORD *)uint64_t v68 = 0u;
  uint64_t v73 = 0;
  long long v72 = 0xFFFFFFFFFFFFFFFFLL;
  if (*(void *)&v63[0])
  {
    uint64_t v20 = *(void *)&v63[0];
    LODWORD(v67) = **(_DWORD **)&v63[0];
    std::string::operator=((std::string *)v68, (const std::string *)(*(void *)&v63[0] + 8));
    std::string::operator=((std::string *)((char *)&v69 + 8), (const std::string *)(v20 + 32));
    long long v21 = *(_OWORD *)(v20 + 56);
    long long v22 = *(_OWORD *)(v20 + 72);
    uint64_t v73 = *(void *)(v20 + 88);
    long long v72 = v22;
    long long v71 = v21;
  }
  else
  {
    if (!fst::FstHeader::Read((uint64_t)&v67, v19, (uint64_t)&v62, 0)) {
      goto LABEL_47;
    }
    *(void *)&v75[0] = &v67;
  }
  if ((fst::GenericRegister<std::string,fst::FstRegisterEntry<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::FstRegister<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::register_init_ & 1) == 0) {
    fst::GenericRegister<std::string,fst::FstRegisterEntry<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::FstRegister<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Init();
  }
  fst::GenericRegister<std::string,fst::FstRegisterEntry<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::FstRegister<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::register_init_ = 1;
  uint64_t v23 = fst::GenericRegister<std::string,fst::FstRegisterEntry<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::FstRegister<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::register_;
  int64_t v24 = (uint64_t (**)(void, void))(*(uint64_t (**)(uint64_t, void **))(*(void *)fst::GenericRegister<std::string,fst::FstRegisterEntry<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::FstRegister<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::register_
                                                                                             + 32))(fst::GenericRegister<std::string,fst::FstRegisterEntry<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::FstRegister<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::register_, v68);
  if (v24)
  {
    uint64_t v25 = *v24;
    if (*v24)
    {
LABEL_25:
      uint64_t v26 = v25(v19, &v74);
      goto LABEL_48;
    }
  }
  else
  {
    uint64_t v25 = (uint64_t (*)(void, void))(*(uint64_t (**)(uint64_t, void **))(*(void *)v23 + 16))(v23, v68);
    if (v25) {
      goto LABEL_25;
    }
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  uint64_t v27 = fst::LogMessage::LogMessage((fst *)&v66, (uint64_t)__p);
  uint64_t v28 = (void *)fst::cerr(v27);
  uint64_t v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"Fst::Read: Unknown FST type \"", 29);
  if ((SBYTE7(v69) & 0x80u) == 0) {
    uint64_t v30 = v68;
  }
  else {
    uint64_t v30 = (void **)v68[0];
  }
  if ((SBYTE7(v69) & 0x80u) == 0) {
    uint64_t v31 = BYTE7(v69);
  }
  else {
    uint64_t v31 = (uint64_t)v68[1];
  }
  uint64_t v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)v30, v31);
  BOOL v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"\" (arc type = \"", 15);
  uint64_t v34 = fst::ArcTpl<fst::TropicalWeightTpl<float>>::Type();
  int v35 = *(char *)(v34 + 23);
  if (v35 >= 0) {
    uint64_t v36 = v34;
  }
  else {
    uint64_t v36 = *(void *)v34;
  }
  if (v35 >= 0) {
    uint64_t v37 = *(unsigned __int8 *)(v34 + 23);
  }
  else {
    uint64_t v37 = *(void *)(v34 + 8);
  }
  float v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, v36, v37);
  float v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)"\"): ", 4);
  if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v40 = &v74;
  }
  else {
    unint64_t v40 = (std::string *)v74.__r_.__value_.__r.__words[0];
  }
  if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v74.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v74.__r_.__value_.__l.__size_;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)v40, size);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v66);
  if (v65 < 0) {
    operator delete(__p[0]);
  }
LABEL_47:
  uint64_t v26 = 0;
LABEL_48:
  if (SHIBYTE(v70) < 0) {
    operator delete(*((void **)&v69 + 1));
  }
  if (SBYTE7(v69) < 0) {
    operator delete(v68[0]);
  }
  if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v74.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v62.__r_.__value_.__l.__data_);
  }
  if (v61 < 0) {
    operator delete(v60[0]);
  }
  *(void *)(v1 + 144) = v26;
  if (!v26) {
    *(unsigned char *)(v1 + 152) = 1;
  }
  int v42 = *(void **)(*(void *)(v1 + 8) + 8 * *(void *)(v1 + 128));
  if ((*((unsigned char *)v42 + *(void *)(*v42 - 24) + 32) & 5) != 0)
  {
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(&v67, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(&v67, "ERROR");
    }
    uint64_t v43 = fst::LogMessage::LogMessage((fst *)&v74, (uint64_t)&v67);
    uint64_t v44 = (void *)fst::cerr(v43);
    int v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)"STTableReader: error reading entry for key: ", 44);
    uint64_t v46 = *(void *)(v1 + 80) + 24 * *(void *)(v1 + 128);
    int v47 = *(char *)(v46 + 23);
    if (v47 >= 0) {
      uint64_t v48 = *(void *)(v1 + 80) + 24 * *(void *)(v1 + 128);
    }
    else {
      uint64_t v48 = *(void *)v46;
    }
    if (v47 >= 0) {
      uint64_t v49 = *(unsigned __int8 *)(v46 + 23);
    }
    else {
      uint64_t v49 = *(void *)(v46 + 8);
    }
    uint64_t v50 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, v48, v49);
    unint64_t v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)", file: ", 8);
    uint64_t v52 = *(void *)(v1 + 32) + 24 * *(void *)(v1 + 128);
    int v53 = *(char *)(v52 + 23);
    if (v53 >= 0) {
      uint64_t v54 = *(void *)(v1 + 32) + 24 * *(void *)(v1 + 128);
    }
    else {
      uint64_t v54 = *(void *)v52;
    }
    if (v53 >= 0) {
      uint64_t v55 = *(unsigned __int8 *)(v52 + 23);
    }
    else {
      uint64_t v55 = *(void *)(v52 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, v54, v55);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v74);
    if (SHIBYTE(v68[1]) < 0) {
      operator delete(v67);
    }
    *(unsigned char *)(v1 + 152) = 1;
  }
}

void sub_20D42CA80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,int a35,__int16 a36,char a37,char a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)(v44 - 160));
  if (a44 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

BOOL std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,fst::STTableReader<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::FstReader<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Compare &,std::__wrap_iter<long long *>>(BOOL result, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    BOOL v5 = result;
    unint64_t v6 = v4 >> 1;
    uint64_t v7 = (uint64_t *)(result + 8 * (v4 >> 1));
    uint64_t v8 = *v7;
    uint64_t v10 = (uint64_t *)(a2 - 8);
    uint64_t v9 = *(void *)(a2 - 8);
    uint64_t v11 = *a3;
    uint64_t result = fst::STTableReader<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::FstReader<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Compare::operator()(*a3, *v7, v9);
    if (result)
    {
      do
      {
        uint64_t v12 = v7;
        *uint64_t v10 = v8;
        if (!v6) {
          break;
        }
        unint64_t v6 = (v6 - 1) >> 1;
        uint64_t v7 = (uint64_t *)(v5 + 8 * v6);
        uint64_t v8 = *v7;
        uint64_t result = fst::STTableReader<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::FstReader<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Compare::operator()(v11, *v7, v9);
        uint64_t v10 = v12;
      }
      while (result);
      uint64_t *v12 = v9;
    }
  }
  return result;
}

void fst::GenericRegister<std::string,fst::FstRegisterEntry<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::FstRegister<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Init()
{
}

uint64_t fst::GenericRegister<std::string,fst::FstRegisterEntry<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::FstRegister<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::LookupEntry(uint64_t a1, const void **a2)
{
  uint64_t v2 = a1 + 16;
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3) {
    goto LABEL_8;
  }
  uint64_t v5 = a1 + 24;
  uint64_t v6 = a1 + 16;
  do
  {
    BOOL v7 = std::less<std::string>::operator()[abi:ne180100](v5, (const void **)(v3 + 32), a2);
    uint64_t v8 = (uint64_t *)(v3 + 8);
    if (!v7)
    {
      uint64_t v8 = (uint64_t *)v3;
      uint64_t v6 = v3;
    }
    uint64_t v3 = *v8;
  }
  while (*v8);
  if (v6 == v2 || std::less<std::string>::operator()[abi:ne180100](v5, a2, (const void **)(v6 + 32))) {
LABEL_8:
  }
    uint64_t v6 = v2;
  if (v2 == v6) {
    return 0;
  }
  else {
    return v6 + 56;
  }
}

void fst::FstRegister<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ConvertKeyToSoFilename(uint64_t a1@<X1>, void **a2@<X8>)
{
  if (*(char *)(a1 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else {
    std::string __p = *(std::string *)a1;
  }
  fst::ConvertToLegalCSymbol((unint64_t)&__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t size = __p.__r_.__value_.__l.__size_;
  }
  std::string::basic_string[abi:ne180100]((uint64_t)a2, size + 7);
  if (*((char *)a2 + 23) < 0) {
    a2 = (void **)*a2;
  }
  if (size)
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    memmove(a2, p_p, size);
  }
  strcpy((char *)a2 + size, "-fst.so");
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_20D42CDD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::GenericRegister<std::string,fst::FstRegisterEntry<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::FstRegister<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::LoadEntryFromSharedObject(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 24))(v22);
  if ((v23 & 0x80u) == 0) {
    unint64_t v4 = v22;
  }
  else {
    unint64_t v4 = (void **)v22[0];
  }
  if (dlopen((const char *)v4, 1))
  {
    uint64_t v5 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, a2);
    if (v5)
    {
      uint64_t v6 = *v5;
      goto LABEL_18;
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    uint64_t v12 = fst::LogMessage::LogMessage((fst *)&v21, (uint64_t)__p);
    uint64_t v13 = (void *)fst::cerr(v12);
    uint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"GenericRegister::GetEntry : ", 28);
    uint64_t v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"lookup failed in shared object: ", 32);
    if ((v23 & 0x80u) == 0) {
      float v16 = v22;
    }
    else {
      float v16 = (void **)v22[0];
    }
    if ((v23 & 0x80u) == 0) {
      uint64_t v17 = v23;
    }
    else {
      uint64_t v17 = (uint64_t)v22[1];
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v16, v17);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    BOOL v7 = fst::LogMessage::LogMessage((fst *)&v21, (uint64_t)__p);
    uint64_t v8 = (void *)fst::cerr(v7);
    uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"GenericRegister::GetEntry : ", 28);
    uint64_t v10 = dlerror();
    size_t v11 = strlen(v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
  }
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v21);
  if (v20 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v6 = 0;
LABEL_18:
  if ((char)v23 < 0) {
    operator delete(v22[0]);
  }
  return v6;
}

void sub_20D42CF90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  _Unwind_Resume(exception_object);
}

void fst::FstRegister<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::~FstRegister(uint64_t a1)
{
  *(void *)a1 = off_26C207FB0;
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy(*(char **)(a1 + 16));
  JUMPOUT(0x2105595E0);
}

uint64_t fst::FstRegister<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::~FstRegister(uint64_t a1)
{
  *(void *)a1 = off_26C207FB0;
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy(*(char **)(a1 + 16));
  return a1;
}

BOOL fst::STTableReader<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::FstReader<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Compare::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = (const void **)(a1 + 24 * a2);
  uint64_t v4 = a1 + 24 * a3;
  int v5 = *((char *)v3 + 23);
  int v6 = *(char *)(v4 + 23);
  if (v6 >= 0) {
    size_t v7 = *(unsigned __int8 *)(v4 + 23);
  }
  else {
    size_t v7 = *(void *)(v4 + 8);
  }
  if (v6 >= 0) {
    uint64_t v8 = (const void *)(a1 + 24 * a3);
  }
  else {
    uint64_t v8 = *(const void **)v4;
  }
  if (v5 >= 0) {
    size_t v9 = *((unsigned __int8 *)v3 + 23);
  }
  else {
    size_t v9 = (size_t)v3[1];
  }
  if (v5 >= 0) {
    uint64_t v10 = v3;
  }
  else {
    uint64_t v10 = *v3;
  }
  if (v9 >= v7) {
    size_t v11 = v7;
  }
  else {
    size_t v11 = v9;
  }
  int v12 = memcmp(v8, v10, v11);
  if (v12) {
    return v12 < 0;
  }
  else {
    return v7 < v9;
  }
}

void fst::STTableFarReader<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::~STTableFarReader(void *a1)
{
  fst::STTableFarReader<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::~STTableFarReader(a1);
  JUMPOUT(0x2105595E0);
}

void *fst::STTableFarReader<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::~STTableFarReader(void *a1)
{
  *a1 = off_26C208038;
  uint64_t v2 = a1[1];
  if (v2)
  {
    uint64_t v4 = *(void *)(v2 + 8);
    uint64_t v3 = *(void *)(v2 + 16);
    if (v3 != v4)
    {
      unint64_t v5 = 0;
      do
      {
        uint64_t v6 = *(void *)(v4 + 8 * v5);
        if (v6)
        {
          (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
          uint64_t v4 = *(void *)(v2 + 8);
          uint64_t v3 = *(void *)(v2 + 16);
        }
        ++v5;
      }
      while (v5 < (v3 - v4) >> 3);
    }
    uint64_t v7 = *(void *)(v2 + 136);
    if (v7) {
      MEMORY[0x2105595E0](v7, 0x60C4044C4A2DFLL);
    }
    uint64_t v8 = *(void *)(v2 + 144);
    if (v8) {
      (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
    }
    size_t v9 = *(void **)(v2 + 104);
    if (v9)
    {
      *(void *)(v2 + 112) = v9;
      operator delete(v9);
    }
    int v12 = (void **)(v2 + 80);
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v12);
    int v12 = (void **)(v2 + 56);
    std::vector<std::vector<long long>>::__destroy_vector::operator()[abi:ne180100](&v12);
    int v12 = (void **)(v2 + 32);
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v12);
    uint64_t v10 = *(void **)(v2 + 8);
    if (v10)
    {
      *(void *)(v2 + 16) = v10;
      operator delete(v10);
    }
    MEMORY[0x2105595E0](v2, 0x10B0C40F71FB6DELL);
  }
  return a1;
}

void std::vector<std::vector<long long>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    unint64_t v5 = **a1;
    if (v4 != v2)
    {
      uint64_t v6 = (char *)v1[1];
      do
      {
        uint64_t v8 = (void *)*((void *)v6 - 3);
        v6 -= 24;
        uint64_t v7 = v8;
        if (v8)
        {
          *((void *)v4 - 2) = v7;
          operator delete(v7);
        }
        uint64_t v4 = v6;
      }
      while (v6 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t fst::STTableFarReader<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::Error(uint64_t a1)
{
  return *(unsigned __int8 *)(*(void *)(a1 + 8) + 152);
}

uint64_t fst::STTableFarReader<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::Type()
{
  return 1;
}

uint64_t fst::STTableFarReader<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::GetFst(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 144);
}

uint64_t fst::STTableFarReader<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::GetKey(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 80) + 24 * *(void *)(*(void *)(a1 + 8) + 128);
}

void fst::STTableFarReader<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::Next(uint64_t a1)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  uint64_t v1 = *(void *)(a1 + 8);
  if (!*(unsigned char *)(v1 + 152))
  {
    std::istream::tellg();
    if (v15 > *(void *)(*(void *)(*(void *)(v1 + 56) + 24 * *(void *)(v1 + 128) + 8) - 8))
    {
      uint64_t v2 = *(void *)(v1 + 112) - 8;
      *(void *)(v1 + 112) = v2;
      goto LABEL_11;
    }
    uint64_t v3 = *(void *)(v1 + 80) + 24 * *(void *)(v1 + 128);
    if (*(char *)(v3 + 23) < 0)
    {
      **(unsigned char **)uint64_t v3 = 0;
      *(void *)(v3 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v3 = 0;
      *(unsigned char *)(v3 + 23) = 0;
    }
    LODWORD(__p[0]) = 0;
    std::istream::read();
    uint64_t v4 = *(void **)(*(void *)(v1 + 8) + 8 * *(void *)(v1 + 128));
    if ((*((unsigned char *)v4 + *(void *)(*v4 - 24) + 32) & 5) == 0)
    {
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,fst::STTableReader<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::FstReader<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Compare &,std::__wrap_iter<long long *>>(*(void *)(v1 + 104), *(void *)(v1 + 112), **(uint64_t ***)(v1 + 136), (uint64_t)(*(void *)(v1 + 112) - *(void *)(v1 + 104)) >> 3);
      uint64_t v2 = *(void *)(v1 + 112);
LABEL_11:
      if (*(void *)(v1 + 104) != v2) {
        fst::STTableReader<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::FstReader<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::PopHeap(v1);
      }
      return;
    }
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    }
    unint64_t v5 = fst::LogMessage::LogMessage((fst *)&__c, (uint64_t)__p);
    uint64_t v6 = (void *)fst::cerr(v5);
    uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"STTableReader: error reading file: ", 35);
    uint64_t v8 = *(void *)(v1 + 32) + 24 * *(void *)(v1 + 128);
    int v9 = *(char *)(v8 + 23);
    if (v9 >= 0) {
      uint64_t v10 = *(void *)(v1 + 32) + 24 * *(void *)(v1 + 128);
    }
    else {
      uint64_t v10 = *(void *)v8;
    }
    if (v9 >= 0) {
      uint64_t v11 = *(unsigned __int8 *)(v8 + 23);
    }
    else {
      uint64_t v11 = *(void *)(v8 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, v10, v11);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&__c);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
    *(unsigned char *)(v1 + 152) = 1;
  }
}

void sub_20D42D5C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

BOOL fst::STTableFarReader<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::Done(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  return *(unsigned char *)(v1 + 152) || *(void *)(v1 + 104) == *(void *)(v1 + 112);
}

uint64_t fst::STTableFarReader<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::Find(uint64_t a1, const void **a2)
{
  uint64_t v87 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 8);
  if (*(unsigned char *)(v2 + 152)) {
    return 0;
  }
  if (*(void *)(v2 + 16) == *(void *)(v2 + 8)) {
    goto LABEL_60;
  }
  uint64_t v4 = 0;
  uint64_t v46 = *(void *)(a1 + 8);
  do
  {
    unint64_t v5 = 0;
    uint64_t v47 = v4;
    uint64_t v48 = (void *)(*(void *)(v2 + 56) + 24 * v4);
    unint64_t v6 = ((uint64_t)(v48[1] - *v48) >> 3) - 1;
    while (v5 < v6)
    {
      unint64_t v7 = (v6 + v5) >> 1;
      uint64_t v8 = *(void *)(*v48 + 8 * v7);
      long long v84 = 0u;
      long long v85 = 0u;
      long long v82 = 0u;
      long long v83 = 0u;
      long long v80 = 0u;
      long long v81 = 0u;
      long long v78 = 0u;
      long long v79 = 0u;
      uint64_t v86 = v8;
      std::istream::seekg();
      memset(v49, 0, 24);
      std::istream::read();
      int v9 = *((char *)a2 + 23);
      if (v9 >= 0) {
        size_t v10 = *((unsigned __int8 *)a2 + 23);
      }
      else {
        size_t v10 = (size_t)a2[1];
      }
      uint64_t v11 = a2;
      if (v9 >= 0) {
        int v12 = a2;
      }
      else {
        int v12 = *a2;
      }
      if ((SBYTE7(v49[1]) & 0x80u) == 0) {
        size_t v13 = BYTE7(v49[1]);
      }
      else {
        size_t v13 = *((void *)&v49[0] + 1);
      }
      if ((SBYTE7(v49[1]) & 0x80u) == 0) {
        char v14 = v49;
      }
      else {
        char v14 = *(_OWORD **)&v49[0];
      }
      if (v13 >= v10) {
        size_t v15 = v10;
      }
      else {
        size_t v15 = v13;
      }
      int v16 = memcmp(v12, v14, v15);
      BOOL v17 = v10 < v13;
      if (v16) {
        BOOL v17 = v16 < 0;
      }
      if (v17)
      {
        char v18 = 1;
        unint64_t v6 = (v6 + v5) >> 1;
      }
      else
      {
        int v19 = memcmp(v14, v12, v15);
        BOOL v20 = v13 < v10;
        if (v19) {
          BOOL v20 = v19 < 0;
        }
        if (!v20)
        {
          a2 = v11;
          if (v7 <= v5)
          {
LABEL_51:
            uint64_t v29 = *(void *)(*v48 + 8 * v5);
            long long v57 = 0u;
            long long v58 = 0u;
            long long v55 = 0u;
            long long v56 = 0u;
            long long v53 = 0u;
            long long v54 = 0u;
            long long v51 = 0u;
            long long v52 = 0u;
            uint64_t v59 = v29;
            std::istream::seekg();
          }
          else
          {
            while (1)
            {
              unint64_t v21 = v7 - 1;
              uint64_t v22 = *(void *)(*v48 + 8 * (v7 - 1));
              long long v75 = 0u;
              long long v76 = 0u;
              long long v73 = 0u;
              long long v74 = 0u;
              long long v71 = 0u;
              long long v72 = 0u;
              long long v69 = 0u;
              long long v70 = 0u;
              uint64_t v77 = v22;
              std::istream::seekg();
              if (SBYTE7(v49[1]) < 0)
              {
                **(unsigned char **)&v49[0] = 0;
                *((void *)&v49[0] + 1) = 0;
              }
              else
              {
                LOBYTE(v49[0]) = 0;
                BYTE7(v49[1]) = 0;
              }
              std::istream::read();
              uint64_t v23 = BYTE7(v49[1]);
              if ((SBYTE7(v49[1]) & 0x80u) == 0) {
                int64_t v24 = (const void *)BYTE7(v49[1]);
              }
              else {
                int64_t v24 = (const void *)*((void *)&v49[0] + 1);
              }
              uint64_t v25 = (const void *)*((unsigned __int8 *)v11 + 23);
              int v26 = (char)v25;
              if ((char)v25 < 0) {
                uint64_t v25 = v11[1];
              }
              if (v24 != v25) {
                break;
              }
              if (v26 >= 0) {
                uint64_t v27 = (unsigned __int8 *)v11;
              }
              else {
                uint64_t v27 = (unsigned __int8 *)*v11;
              }
              if ((BYTE7(v49[1]) & 0x80) != 0)
              {
                if (memcmp(*(const void **)&v49[0], v27, *((size_t *)&v49[0] + 1))) {
                  break;
                }
              }
              else if (BYTE7(v49[1]))
              {
                uint64_t v28 = (unsigned __int8 *)v49;
                while (*v28 == *v27)
                {
                  ++v28;
                  ++v27;
                  if (!--v23) {
                    goto LABEL_50;
                  }
                }
                break;
              }
LABEL_50:
              --v7;
              if (v21 <= v5) {
                goto LABEL_51;
              }
            }
            uint64_t v30 = *(void *)(*v48 + 8 * v7);
            long long v66 = 0u;
            long long v67 = 0u;
            long long v64 = 0u;
            long long v65 = 0u;
            long long v62 = 0u;
            long long v63 = 0u;
            long long v60 = 0u;
            long long v61 = 0u;
            uint64_t v68 = v30;
            std::istream::seekg();
          }
          char v18 = 0;
          goto LABEL_54;
        }
        unint64_t v5 = v7 + 1;
        char v18 = 1;
      }
      a2 = v11;
LABEL_54:
      if (SBYTE7(v49[1]) < 0) {
        operator delete(*(void **)&v49[0]);
      }
      if ((v18 & 1) == 0) {
        goto LABEL_59;
      }
    }
    uint64_t v31 = *(void *)(*v48 + 8 * v5);
    memset(v49, 0, sizeof(v49));
    uint64_t v50 = v31;
    std::istream::seekg();
LABEL_59:
    uint64_t v2 = v46;
    uint64_t v4 = v47 + 1;
  }
  while (v47 + 1 < (unint64_t)((uint64_t)(*(void *)(v46 + 16) - *(void *)(v46 + 8)) >> 3));
LABEL_60:
  fst::STTableReader<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::FstReader<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::MakeHeap(v2);
  uint64_t v32 = (unsigned __int8 *)(*(void *)(v2 + 80) + 24 * *(void *)(v2 + 128));
  uint64_t v33 = v32[23];
  if ((v33 & 0x80u) == 0) {
    uint64_t v34 = (const void *)v32[23];
  }
  else {
    uint64_t v34 = (const void *)*((void *)v32 + 1);
  }
  int v35 = (const void *)*((unsigned __int8 *)a2 + 23);
  int v36 = (char)v35;
  if ((char)v35 < 0) {
    int v35 = a2[1];
  }
  if (v34 != v35) {
    return 0;
  }
  if (v36 >= 0) {
    uint64_t v37 = (unsigned __int8 *)a2;
  }
  else {
    uint64_t v37 = (unsigned __int8 *)*a2;
  }
  if ((v33 & 0x80) != 0) {
    return memcmp(*(const void **)v32, v37, *((void *)v32 + 1)) == 0;
  }
  if (!v32[23]) {
    return 1;
  }
  uint64_t v38 = v33 - 1;
  do
  {
    int v40 = *v32++;
    int v39 = v40;
    int v42 = *v37++;
    int v41 = v42;
    BOOL v44 = v38-- != 0;
    uint64_t result = v39 == v41;
  }
  while (v39 == v41 && v44);
  return result;
}

void sub_20D42DAE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void fst::STTableFarReader<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::Reset(uint64_t a1)
{
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<FSTGrammar::create(std::string const&,BOOL)::$_0 &&>>()
{
  {
      fst::FstRegisterer<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::FstRegisterer();
  }
}

void sub_20D42DB88(_Unwind_Exception *a1)
{
}

void fst::FstRegisterer<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::FstRegisterer()
{
}

void sub_20D42DD6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
}

void fst::FstRegisterer<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::Convert()
{
}

void sub_20D42DDF8(_Unwind_Exception *a1)
{
  MEMORY[0x2105595E0](v1, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

void std::allocator<FSTGrammarJSON::Rule>::construct[abi:ne180100]<FSTGrammarJSON::Rule,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &>(std::string *a1, uint64_t a2, uint64_t a3)
{
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(a2, &v8);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(a3, &__p);
  if ((v8.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v5 = &v8;
  }
  else {
    unint64_t v5 = (std::string *)v8.__r_.__value_.__r.__words[0];
  }
  UTFRegex::UTFRegex((UTFRegex *)a1, (const char *)v5);
  unint64_t v6 = a1 + 1;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v6, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    a1[1].__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
  }
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8.__r_.__value_.__l.__data_);
  }
}

void sub_20D42DECC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  UTFRegex::~UTFRegex(v20);
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<FSTGrammarJSON::Rule>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<FSTGrammarJSON::Rule>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<FSTGrammarJSON::Rule>>,0>((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }
}

uint64_t std::__split_buffer<FSTGrammarJSON::Rule>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 48;
    std::allocator<FSTGrammarJSON::Rule>::destroy[abi:ne180100]((void **)(i - 48));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void UnitSelectionFeatureStream::process_data(uint64_t a1)
{
  v330 = (uint64_t *)MEMORY[0x270FA5388](a1);
  uint64_t v506 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(std::__shared_weak_count **)(*(void *)v2 + 16);
  v322 = *(const PhoneFeature ***)(*(void *)v2 + 8);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v321 = v3;
  uint64_t v4 = (const PhoneFeature **)operator new(0x48uLL);
  v4[1] = 0;
  v4[2] = 0;
  *uint64_t v4 = (const PhoneFeature *)off_26C216FD8;
  *(_OWORD *)(v4 + 3) = 0u;
  v357 = (int64x2_t *)(v4 + 3);
  *(_OWORD *)(v4 + 5) = 0u;
  *(_OWORD *)(v4 + 7) = 0u;
  std::string::size_type v349 = (std::string::size_type)v4;
  if (v4 != v322) {
    std::vector<Prompt>::__assign_with_size[abi:ne180100]<Prompt*,Prompt*>((uint64_t)(v4 + 6), (uint64_t *)v322[6], (uint64_t *)v322[7], 0x8E38E38E38E38E39 * ((v322[7] - v322[6]) >> 3));
  }
  unint64_t v5 = *v322;
  v352 = v322[1];
  if (*v322 != v352)
  {
    *(int32x4_t *)v345 = vdupq_n_s32(0x7F7FFFFFu);
    do
    {
      PhoneFeature::PhoneFeature(&v365, v5);
      HIDWORD(v373.__r_.__value_.__r.__words[2]) = 0x7FFFFFFF;
      memset(&v374, 0, sizeof(v374));
      std::string::basic_string[abi:ne180100]<0>(&v375, "*");
      std::string::basic_string[abi:ne180100]<0>(&v376, "*");
      std::string::basic_string[abi:ne180100]<0>(&v377, "*");
      memset(v380, 0, sizeof(v380));
      memset(v379, 0, sizeof(v379));
      memset(v378, 0, sizeof(v378));
      long long v381 = *(_OWORD *)v345;
      v382[0] = *(_OWORD *)v345;
      v382[1] = 0u;
      memset(v383, 0, sizeof(v383));
      long long v384 = 0u;
      v385[0] = 0u;
      v385[1] = *(_OWORD *)v345;
      LODWORD(v386.__r_.__value_.__l.__data_) = 0x7FFFFFFF;
      int v6 = SHIDWORD(v366.__r_.__value_.__r.__words[0]) / 2;
      if (SHIDWORD(v366.__r_.__value_.__r.__words[0]) / 2 <= 5) {
        int v6 = 5;
      }
      HIDWORD(v373.__r_.__value_.__r.__words[2]) = 1;
      HIDWORD(v366.__r_.__value_.__r.__words[0]) = v6;
      unint64_t v7 = *(void *)(v349 + 32);
      if (v7 >= *(void *)(v349 + 40))
      {
        std::string v8 = (UnitFeature *)std::vector<UnitFeature>::__push_back_slow_path<UnitFeature const&>(v357, (const UnitFeature *)&v365);
        std::string::size_type v9 = v349;
      }
      else
      {
        UnitFeature::UnitFeature(*(UnitFeature **)(v349 + 32), (const UnitFeature *)&v365);
        std::string v8 = (UnitFeature *)(v7 + 608);
        std::string::size_type v9 = v349;
        *(void *)(v349 + 32) = v8;
      }
      *(void *)(v9 + 32) = v8;
      HIDWORD(v373.__r_.__value_.__r.__words[2]) = 2;
      std::string::size_type size = v368.__r_.__value_.__l.__size_;
      std::string::size_type v10 = v368.__r_.__value_.__r.__words[0];
      if (v368.__r_.__value_.__l.__size_ != v368.__r_.__value_.__r.__words[0])
      {
        do
        {
          if (*(char *)(size - 25) < 0) {
            operator delete(*(void **)(size - 48));
          }
          size -= 56;
        }
        while (size != v10);
        std::string::size_type v9 = v349;
        std::string v8 = *(UnitFeature **)(v349 + 32);
      }
      v368.__r_.__value_.__l.__size_ = v10;
      if ((unint64_t)v8 >= *(void *)(v9 + 40))
      {
        uint64_t v12 = std::vector<UnitFeature>::__push_back_slow_path<UnitFeature const&>(v357, (const UnitFeature *)&v365);
        std::string::size_type v13 = v349;
      }
      else
      {
        UnitFeature::UnitFeature(v8, (const UnitFeature *)&v365);
        uint64_t v12 = (uint64_t)v8 + 608;
        std::string::size_type v13 = v349;
        *(void *)(v349 + 32) = (char *)v8 + 608;
      }
      *(void *)(v13 + 32) = v12;
      UnitFeature::~UnitFeature((UnitFeature *)&v365);
      unint64_t v5 = (const PhoneFeature *)((char *)v5 + 216);
    }
    while (v5 != v352);
  }
  char v14 = (int *)v322[3];
  for (uint64_t i = (int *)v322[4]; v14 != i; v14 += 34)
  {
    uint64_t v15 = *v14;
    unint64_t v16 = 2 * v15;
    int v17 = v14[1] + v15;
    if (v16 < 2 * v17)
    {
      unint64_t v18 = 2 * v17;
      uint64_t v19 = 608 * v16 + 336;
      do
      {
        if (*(unsigned char *)(v357->i64[0] + v19 - 312))
        {
          std::string::basic_string[abi:ne180100]<0>(&v365, "*");
        }
        else if (*((char *)v14 + 87) < 0)
        {
          std::string::__init_copy_ctor_external(&v365, *((const std::string::value_type **)v14 + 8), *((void *)v14 + 9));
        }
        else
        {
          std::string v365 = *(std::string *)(v14 + 16);
        }
        uint64_t v20 = v357->i64[0] + v19;
        uint64_t v21 = v20 - 96;
        if (*(char *)(v20 - 73) < 0) {
          operator delete(*(void **)v21);
        }
        long long v22 = *(_OWORD *)&v365.__r_.__value_.__l.__data_;
        *(void *)(v21 + 16) = *((void *)&v365.__r_.__value_.__l + 2);
        *(_OWORD *)uint64_t v21 = v22;
        std::string::operator=((std::string *)(v357->i64[0] + v19 - 24), (const std::string *)(v14 + 22));
        std::string::operator=((std::string *)(v357->i64[0] + v19), (const std::string *)(v14 + 28));
        ++v16;
        v19 += 608;
      }
      while (v16 < v18);
    }
  }
  uint64_t v24 = *(void *)(v349 + 24);
  uint64_t v23 = *(void *)(v349 + 32);
  unint64_t v25 = 0x86BCA1AF286BCA1BLL * ((v23 - v24) >> 5);
  if (v23 != v24)
  {
    unint64_t v26 = 0;
    int v27 = 0;
    int v28 = 0;
    int v29 = 0;
    int v30 = -1;
    uint64_t v23 = *(void *)(v349 + 24);
    do
    {
      int v31 = *(_DWORD *)(v23 + 608 * v26 + 148);
      if (v30 == v31) {
        goto LABEL_41;
      }
      int v32 = v26;
      while (v25 > ++v32)
      {
        if (*(_DWORD *)(v23 + 608 * v32 + 148) != v31)
        {
          int v29 = v28;
          int v28 = v27;
          int v27 = v32;
          goto LABEL_41;
        }
      }
      int v29 = v28;
      int v28 = v27;
LABEL_41:
      std::string::operator=((std::string *)(v23 + 608 * v26 + 264), (const std::string *)(v23 + 608 * v29 + 240));
      std::string::operator=((std::string *)(v357->i64[0] + 608 * v26 + 288), (const std::string *)(v357->i64[0] + 608 * v27 + 240));
      uint64_t v23 = *(void *)(v349 + 24);
      uint64_t v33 = *(void *)(v349 + 32);
      int v30 = *(_DWORD *)(v23 + 608 * v26++ + 148);
      unint64_t v25 = 0x86BCA1AF286BCA1BLL * ((v33 - v23) >> 5);
    }
    while (v26 < v25);
    if (!v25) {
      goto LABEL_77;
    }
    goto LABEL_45;
  }
  uint64_t v33 = *(void *)(v349 + 32);
  if (v25)
  {
LABEL_45:
    unint64_t v34 = 0;
    while (1)
    {
      std::to_string(&v365, *(_DWORD *)(v357->i64[0] + 608 * v34 + 212));
      std::operator+<char>();
      memset(&v505, 0, sizeof(v505));
      __p[0] = &v505;
      LOBYTE(__p[1]) = 0;
      int v35 = (char *)operator new(0x78uLL);
      uint64_t v36 = 0;
      v505.__r_.__value_.__r.__words[0] = (std::string::size_type)v35;
      v505.__r_.__value_.__l.__size_ = (std::string::size_type)v35;
      v505.__r_.__value_.__r.__words[2] = (std::string::size_type)(v35 + 120);
      do
      {
        uint64_t v37 = &v35[v36];
        if (SHIBYTE(v364) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&v35[v36], (const std::string::value_type *)__sz[0], __sz[1]);
        }
        else
        {
          *(_OWORD *)uint64_t v37 = *(_OWORD *)__sz;
          *((void *)v37 + 2) = v364;
        }
        v36 += 24;
      }
      while (v36 != 120);
      v505.__r_.__value_.__l.__size_ = (std::string::size_type)(v35 + 120);
      if (SHIBYTE(v364) < 0) {
        operator delete((void *)__sz[0]);
      }
      if (v34 >= 4) {
        break;
      }
      if (v34 >= 2) {
        goto LABEL_58;
      }
LABEL_61:
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)(v357->i64[0] + 608 * v34), (const void **)&v365.__r_.__value_.__l.__data_, (uint64_t)__sz);
      std::string::size_type v41 = v505.__r_.__value_.__r.__words[0] + 48;
      if (*(char *)(v505.__r_.__value_.__r.__words[0] + 71) < 0) {
        operator delete(*(void **)v41);
      }
      *(_OWORD *)std::string::size_type v41 = *(_OWORD *)__sz;
      *(void *)(v41 + 16) = v364;
      if (v34 + 2 < v25)
      {
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)(v357->i64[0] + 608 * (v34 + 2)), (const void **)&v365.__r_.__value_.__l.__data_, (uint64_t)__sz);
        std::string::size_type v42 = v505.__r_.__value_.__r.__words[0] + 72;
        if (*(char *)(v505.__r_.__value_.__r.__words[0] + 95) < 0) {
          operator delete(*(void **)v42);
        }
        *(_OWORD *)std::string::size_type v42 = *(_OWORD *)__sz;
        *(void *)(v42 + 16) = v364;
      }
      if (v34 + 4 < v25)
      {
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)(v357->i64[0] + 608 * (v34 + 4)), (const void **)&v365.__r_.__value_.__l.__data_, (uint64_t)__sz);
        std::string::size_type v43 = v505.__r_.__value_.__r.__words[0] + 96;
        if (*(char *)(v505.__r_.__value_.__r.__words[0] + 119) < 0) {
          operator delete(*(void **)v43);
        }
        *(_OWORD *)std::string::size_type v43 = *(_OWORD *)__sz;
        *(void *)(v43 + 16) = v364;
      }
      BOOL v44 = (std::vector<std::string> *)(v357->i64[0] + 608 * v34 + 216);
      if (v44 != (std::vector<std::string> *)&v505) {
        std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(v44, (std::string *)v505.__r_.__value_.__l.__data_, (long long *)v505.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v505.__r_.__value_.__l.__size_ - v505.__r_.__value_.__r.__words[0]) >> 3));
      }
      __sz[0] = (std::string::size_type)&v505;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__sz);
      if (SHIBYTE(v365.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v365.__r_.__value_.__l.__data_);
      }
      if (++v34 == v25)
      {
        uint64_t v23 = *(void *)(v349 + 24);
        uint64_t v33 = *(void *)(v349 + 32);
        goto LABEL_77;
      }
    }
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)(v357->i64[0] + 608 * v34 - 2432), (const void **)&v365.__r_.__value_.__l.__data_, (uint64_t)__sz);
    std::string::size_type v38 = v505.__r_.__value_.__r.__words[0];
    if (*(char *)(v505.__r_.__value_.__r.__words[0] + 23) < 0) {
      operator delete(*(void **)v505.__r_.__value_.__l.__data_);
    }
    long long v39 = *(_OWORD *)__sz;
    *(void *)(v38 + 16) = v364;
    *(_OWORD *)std::string::size_type v38 = v39;
LABEL_58:
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)(v357->i64[0] + 608 * v34 - 1216), (const void **)&v365.__r_.__value_.__l.__data_, (uint64_t)__sz);
    std::string::size_type v40 = v505.__r_.__value_.__r.__words[0] + 24;
    if (*(char *)(v505.__r_.__value_.__r.__words[0] + 47) < 0) {
      operator delete(*(void **)v40);
    }
    *(_OWORD *)std::string::size_type v40 = *(_OWORD *)__sz;
    *(void *)(v40 + 16) = v364;
    goto LABEL_61;
  }
LABEL_77:
  int v45 = std::vector<std::vector<float>>::vector(__sz, 0x86BCA1AF286BCA1BLL * ((v33 - v23) >> 5));
  uint64_t v46 = v330[34];
  if (v46 || v330[36])
  {
    uint64_t v47 = *(void *)(v349 + 24);
    if (*(void *)(v349 + 32) != v47)
    {
      uint64_t v48 = 0;
      while (1)
      {
        v337 = v48;
        uint64_t v49 = (uint64_t *)v330[38];
        v362[0] = 0;
        __p[1] = 0;
        __p[0] = 0;
        uint64_t v50 = *(_DWORD **)*v49;
        v354 = *(_DWORD **)(*v49 + 8);
        if (v50 != v354) {
          break;
        }
LABEL_313:
        std::string::size_type v143 = __sz[0];
        std::string::size_type v144 = __sz[0] + 24 * (void)v337;
        int v45 = *(void **)v144;
        if (*(void *)v144)
        {
          *(void *)(__sz[0] + 24 * (void)v337 + 8) = v45;
          operator delete(v45);
          *(void *)std::string::size_type v144 = 0;
          *(void *)(v144 + 8) = 0;
          *(void *)(v144 + 16) = 0;
        }
        *(_OWORD *)std::string::size_type v144 = *(_OWORD *)__p;
        *(void *)(v143 + 24 * (void)v337 + 16) = v362[0];
        uint64_t v48 = (std::string *)((char *)&v337->__r_.__value_.__l.__data_ + 1);
        uint64_t v47 = *(void *)(v349 + 24);
        if ((unint64_t)v337->__r_.__value_.__r.__words + 1 >= 0x86BCA1AF286BCA1BLL
                                                                    * ((*(void *)(v349 + 32) - v47) >> 5))
        {
          uint64_t v46 = v330[34];
          goto LABEL_317;
        }
      }
      uint64_t v51 = v47 + 608 * (void)v48;
      v339 = (std::string *)(v51 + 264);
      v338 = (std::string *)(v51 + 288);
      v329 = (std::string *)(v51 + 240);
      v323 = (std::string *)(v51 + 64);
      v336 = (std::string *)(v51 + 60);
      v334 = (std::string *)(v51 + 56);
      v340 = (std::string *)(v51 + 52);
      v328 = (std::string *)(v51 + 192);
      v335 = (std::string *)(v51 + 188);
      v347 = (std::string *)(v51 + 184);
      v346 = (int *)(v51 + 180);
      v324 = (std::string *)(v51 + 172);
      v327 = (std::string *)(v51 + 168);
      v333 = (std::string *)(v51 + 164);
      v331 = (std::string *)(v51 + 160);
      v344 = (std::string *)(v51 + 156);
      v343 = (std::string *)(v51 + 176);
      v342 = (std::string *)(v51 + 48);
      v341 = (std::string *)(v51 + 152);
      v332 = (std::string *)(v51 + 212);
      v326 = (std::string *)(v51 + 216);
      v325 = (std::string *)(v51 + 224);
      while (1)
      {
        int v52 = *((unsigned __int8 *)v50 + 23);
        if ((*((char *)v50 + 23) & 0x80000000) == 0)
        {
          long long v53 = v50;
          switch(*((unsigned char *)v50 + 23))
          {
            case 2:
              long long v54 = (int *)v343;
              if (*(_WORD *)v50 == 30563) {
                goto LABEL_223;
              }
              long long v54 = (int *)v333;
              if (*(_WORD *)v50 == 26995) {
                goto LABEL_223;
              }
              long long v54 = (int *)v327;
              if (*(_WORD *)v50 == 28019) {
                goto LABEL_223;
              }
              int v55 = *(unsigned __int16 *)v50;
              long long v54 = (int *)v324;
              int v56 = 26227;
              goto LABEL_118;
            case 3:
              BOOL v62 = *(_WORD *)v50 == 25207 && *((unsigned char *)v50 + 2) == 105;
              long long v54 = (int *)v344;
              if (!v62)
              {
                BOOL v63 = *(_WORD *)v50 == 25207 && *((unsigned char *)v50 + 2) == 102;
                long long v54 = (int *)v331;
                if (!v63) {
                  goto LABEL_111;
                }
              }
              goto LABEL_223;
            case 4:
              long long v54 = (int *)v342;
              if (*v50 != 1836020336) {
                goto LABEL_117;
              }
              goto LABEL_223;
            case 5:
              BOOL v67 = *v50 == 1953391987 && *((unsigned char *)v50 + 4) == 105;
              long long v54 = v346;
              if (!v67) {
                goto LABEL_129;
              }
              goto LABEL_223;
            case 6:
              BOOL v66 = *v50 == 1701999731 && *((_WORD *)v50 + 2) == 29555;
              long long v54 = (int *)v341;
              if (!v66) {
                goto LABEL_555;
              }
              goto LABEL_223;
            case 7:
              if (*v50 == 1953394531 && *(_DWORD *)((char *)v50 + 3) == 1954047348) {
                goto LABEL_244;
              }
              BOOL v61 = *v50 == 1952543859 && *(_DWORD *)((char *)v50 + 3) == 1684628852;
              long long v54 = (int *)v332;
              if (!v61) {
                goto LABEL_555;
              }
              goto LABEL_223;
            case 8:
              goto LABEL_201;
            case 0xC:
              goto LABEL_304;
            case 0xD:
              goto LABEL_218;
            default:
              goto LABEL_555;
          }
        }
        switch(*((void *)v50 + 1))
        {
          case 2:
            long long v54 = (int *)v343;
            if (**(_WORD **)v50 == 30563) {
              goto LABEL_223;
            }
            long long v57 = *(_WORD **)v50;
            long long v54 = (int *)v333;
            if (**(_WORD **)v50 == 26995) {
              goto LABEL_223;
            }
            long long v54 = (int *)v327;
            if (*v57 == 28019) {
              goto LABEL_223;
            }
            int v58 = (unsigned __int16)*v57;
            long long v54 = (int *)v324;
            int v59 = 26227;
LABEL_148:
            if (v58 == v59) {
              goto LABEL_223;
            }
            goto LABEL_174;
          case 3:
            long long v72 = *(unsigned __int16 **)v50;
            BOOL v73 = **(_WORD **)v50 == 25207 && *(unsigned char *)(*(void *)v50 + 2) == 105;
            long long v54 = (int *)v344;
            if (!v73)
            {
              int v74 = *v72;
              int v75 = *((unsigned __int8 *)v72 + 2);
              BOOL v76 = v74 == 25207 && v75 == 102;
              long long v54 = (int *)v331;
              if (!v76) {
                goto LABEL_174;
              }
            }
            goto LABEL_223;
          case 4:
            int v58 = **(_DWORD **)v50;
            long long v54 = (int *)v342;
            int v59 = 1836020336;
            goto LABEL_148;
          case 5:
            BOOL v71 = **(_DWORD **)v50 == 1953391987 && *(unsigned char *)(*(void *)v50 + 4) == 105;
            long long v54 = v346;
            if (v71) {
              goto LABEL_223;
            }
            if ((v52 & 0x80) != 0) {
              goto LABEL_174;
            }
            long long v53 = v50;
            switch(*((unsigned char *)v50 + 23))
            {
              case 3:
                goto LABEL_111;
              case 4:
LABEL_117:
                int v55 = *v50;
                long long v54 = (int *)v336;
                int v56 = 1701736308;
LABEL_118:
                if (v55 != v56) {
                  goto LABEL_555;
                }
                goto LABEL_223;
              case 5:
LABEL_129:
                BOOL v68 = *v50 == 1953391987 && *((unsigned char *)v50 + 4) == 102;
                long long v54 = (int *)v347;
                if (v68) {
                  goto LABEL_223;
                }
                if ((v52 & 0x80) == 0)
                {
                  long long v53 = v50;
                  switch(*((unsigned char *)v50 + 23))
                  {
                    case 3:
                      goto LABEL_111;
                    case 4:
                      goto LABEL_117;
                    case 5:
                      BOOL v69 = *v50 == 1936877680 && *((unsigned char *)v50 + 4) == 105;
                      long long v54 = (int *)v335;
                      if (!v69) {
                        goto LABEL_186;
                      }
                      goto LABEL_223;
                    case 8:
                      goto LABEL_201;
                    case 0xC:
                      goto LABEL_304;
                    case 0xD:
                      goto LABEL_218;
                    default:
                      goto LABEL_555;
                  }
                }
                goto LABEL_179;
              case 8:
LABEL_201:
                long long v54 = (int *)v340;
                if (*(void *)v50 == 0x65707974746E6573) {
                  goto LABEL_223;
                }
LABEL_202:
                long long v54 = (int *)v334;
                if (*(void *)v50 == 0x656E6F7476657270) {
                  goto LABEL_223;
                }
                if ((v52 & 0x80) == 0)
                {
LABEL_204:
                  long long v53 = v50;
                  switch(*((unsigned char *)v50 + 23))
                  {
                    case 3:
                      goto LABEL_111;
                    case 4:
                      goto LABEL_117;
                    case 8:
                      long long v54 = (int *)v323;
                      if (*(void *)v50 != 0x656E6F747478656ELL) {
                        goto LABEL_555;
                      }
                      goto LABEL_223;
                    case 0xC:
                      goto LABEL_304;
                    case 0xD:
                      goto LABEL_218;
                    default:
                      goto LABEL_555;
                  }
                }
                break;
              case 0xC:
                goto LABEL_304;
              case 0xD:
                goto LABEL_218;
              default:
                goto LABEL_555;
            }
            goto LABEL_209;
          case 6:
            BOOL v70 = **(_DWORD **)v50 == 1701999731 && *(_WORD *)(*(void *)v50 + 4) == 29555;
            long long v54 = (int *)v341;
            if (!v70) {
              goto LABEL_174;
            }
            goto LABEL_223;
          case 7:
            uint64_t v77 = *(int **)v50;
            if (**(_DWORD **)v50 == 1953394531 && *(_DWORD *)(*(void *)v50 + 3) == 1954047348)
            {
LABEL_244:
              std::string::size_type v101 = v326->__r_.__value_.__r.__words[0];
              long long v102 = (std::string *)v325->__r_.__value_.__r.__words[0];
              v350 = (std::string *)v325->__r_.__value_.__r.__words[0];
              while ((std::string *)v101 != v102)
              {
                if (*(char *)(v101 + 23) < 0) {
                  uint64_t v103 = *(void *)(v101 + 8);
                }
                else {
                  uint64_t v103 = *(unsigned __int8 *)(v101 + 23);
                }
                unint64_t v104 = (void *)*v49;
                std::string::basic_string(&v505, (const std::string *)v101, 0, v103 - 1, (std::allocator<char> *)&v365);
                std::string::basic_string[abi:ne180100]<0>(&v365, "name");
                feature_encoding = (int **)FeatureBook::get_feature_encoding((uint64_t)v104, (uint64_t)&v365, (uint64_t)&v505);
                if (SHIBYTE(v365.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v365.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v505.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v505.__r_.__value_.__l.__data_);
                }
                uint64_t v107 = *feature_encoding;
                uint64_t v106 = feature_encoding[1];
                uint64_t v108 = (char *)v106 - (char *)*feature_encoding;
                if (v108 >= 1)
                {
                  uint64_t v109 = v108 >> 2;
                  unint64_t v110 = (float *)__p[1];
                  if (v108 >> 2 <= (uint64_t)(v362[0] - (unint64_t)__p[1]) >> 2)
                  {
                    if (v109 <= 0)
                    {
                      float v120 = &v107[v109];
                      uint64_t v121 = (float *)__p[1];
                      uint64_t v132 = (float *)((char *)__p[1] - 4 * v109);
                      unint64_t v133 = __p[1];
                      while (v132 < v110)
                      {
                        int v134 = *(_DWORD *)v132++;
                        *v133++ = v134;
                      }
                      unint64_t v135 = &v110[v109];
                      __p[1] = v133;
                      if (v121 != v135) {
                        memmove(&v121[-(v121 - v135)], v110, (char *)v121 - (char *)v135);
                      }
                      for (; v107 != v120; ++v110)
                      {
                        int v136 = *v107++;
                        float *v110 = (float)v136;
                      }
                    }
                    else
                    {
                      if (*feature_encoding == v106)
                      {
                        uint64_t v118 = (float *)__p[1];
                      }
                      else
                      {
                        uint64_t v117 = *feature_encoding;
                        uint64_t v118 = (float *)__p[1];
                        do
                        {
                          int v119 = *v117++;
                          *v118++ = (float)v119;
                        }
                        while (v117 != v106);
                      }
                      __p[1] = v118;
                    }
                  }
                  else
                  {
                    int64_t v111 = ((char *)__p[1] - (char *)__p[0]) >> 2;
                    if ((unint64_t)(v111 + v109) >> 62) {
                      std::vector<int>::__throw_length_error[abi:ne180100]();
                    }
                    unint64_t v112 = (uint64_t)(v362[0] - (unint64_t)__p[0]) >> 1;
                    if (v112 <= v111 + v109) {
                      unint64_t v112 = v111 + v109;
                    }
                    if (v362[0] - (unint64_t)__p[0] >= 0x7FFFFFFFFFFFFFFCLL) {
                      unint64_t v113 = 0x3FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v113 = v112;
                    }
                    if (v113)
                    {
                      float v114 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v362, v113);
                      uint64_t v116 = v115;
                    }
                    else
                    {
                      float v114 = 0;
                      uint64_t v116 = 0;
                    }
                    unint64_t v122 = (float *)&v114[4 * v111];
                    unint64_t v123 = &v122[v109];
                    uint64_t v124 = 4 * v109;
                    float v125 = v122;
                    do
                    {
                      int v126 = *v107++;
                      *v125++ = (float)v126;
                      v124 -= 4;
                    }
                    while (v124);
                    BOOL v127 = (float *)__p[0];
                    if (__p[0] != v110)
                    {
                      uint64_t v128 = v110;
                      do
                      {
                        int v129 = *((_DWORD *)v128-- - 1);
                        *((_DWORD *)v122-- - 1) = v129;
                      }
                      while (v128 != v127);
                    }
                    uint64_t v130 = (char *)((char *)__p[1] - (char *)v110);
                    if (__p[1] != v110) {
                      memmove(v123, v110, (char *)__p[1] - (char *)v110);
                    }
                    std::string::size_type v131 = __p[0];
                    __p[0] = v122;
                    __p[1] = &v130[(void)v123];
                    v362[0] = &v114[4 * v116];
                    if (v131) {
                      operator delete(v131);
                    }
                  }
                }
                v101 += 24;
                long long v102 = v350;
              }
              goto LABEL_312;
            }
            int v79 = *v77;
            int v80 = *(int *)((char *)v77 + 3);
            BOOL v81 = v79 == 1952543859 && v80 == 1684628852;
            long long v54 = (int *)v332;
            if (v81) {
              goto LABEL_223;
            }
LABEL_174:
            if (*((void *)v50 + 1) == 5)
            {
              BOOL v82 = **(_DWORD **)v50 == 1953391987 && *(unsigned char *)(*(void *)v50 + 4) == 102;
              long long v54 = (int *)v347;
              if (v82) {
                goto LABEL_223;
              }
            }
LABEL_179:
            if (*((void *)v50 + 1) != 5) {
              goto LABEL_192;
            }
            BOOL v83 = **(_DWORD **)v50 == 1936877680 && *(unsigned char *)(*(void *)v50 + 4) == 105;
            long long v54 = (int *)v335;
            if (v83) {
              goto LABEL_223;
            }
            if ((v52 & 0x80) == 0)
            {
              long long v53 = v50;
              switch(*((unsigned char *)v50 + 23))
              {
                case 3:
                  goto LABEL_111;
                case 4:
                  goto LABEL_117;
                case 5:
LABEL_186:
                  BOOL v84 = *v50 == 1936877680 && *((unsigned char *)v50 + 4) == 102;
                  long long v54 = (int *)v328;
                  if (v84) {
                    goto LABEL_223;
                  }
                  if ((v52 & 0x80) != 0) {
                    goto LABEL_197;
                  }
                  goto LABEL_204;
                case 8:
                  goto LABEL_201;
                case 0xC:
                  goto LABEL_304;
                case 0xD:
                  goto LABEL_218;
                default:
                  goto LABEL_555;
              }
            }
LABEL_192:
            if (*((void *)v50 + 1) == 5)
            {
              BOOL v85 = **(_DWORD **)v50 == 1936877680 && *(unsigned char *)(*(void *)v50 + 4) == 102;
              long long v54 = (int *)v328;
              if (v85) {
                goto LABEL_223;
              }
            }
LABEL_197:
            if (*((void *)v50 + 1) != 8) {
              goto LABEL_207;
            }
            long long v54 = (int *)v340;
            if (**(void **)v50 == 0x65707974746E6573) {
              goto LABEL_223;
            }
            if ((v52 & 0x80) == 0)
            {
              long long v53 = v50;
              switch(*((unsigned char *)v50 + 23))
              {
                case 3:
                  goto LABEL_111;
                case 4:
                  goto LABEL_117;
                case 8:
                  goto LABEL_202;
                case 0xC:
                  goto LABEL_304;
                case 0xD:
                  goto LABEL_218;
                default:
                  goto LABEL_555;
              }
            }
LABEL_207:
            if (*((void *)v50 + 1) == 8)
            {
              long long v54 = (int *)v334;
              if (**(void **)v50 == 0x656E6F7476657270) {
                goto LABEL_223;
              }
            }
LABEL_209:
            if (*((void *)v50 + 1) != 4) {
              goto LABEL_212;
            }
            long long v54 = (int *)v336;
            if (**(_DWORD **)v50 == 1701736308) {
              goto LABEL_223;
            }
            if ((v52 & 0x80) == 0) {
              goto LABEL_215;
            }
LABEL_212:
            if (*((void *)v50 + 1) != 8) {
              goto LABEL_288;
            }
            long long v54 = (int *)v323;
            if (**(void **)v50 != 0x656E6F747478656ELL)
            {
              if ((v52 & 0x80) == 0)
              {
LABEL_215:
                if (v52 == 3)
                {
LABEL_111:
                  BOOL v64 = *(_WORD *)v50 == 28528 && *((unsigned char *)v50 + 2) == 115;
                  uint64_t v65 = (uint64_t)v329;
                  if (!v64) {
                    goto LABEL_555;
                  }
                }
                else
                {
                  long long v53 = v50;
                  if (v52 != 12)
                  {
                    if (v52 != 13) {
                      goto LABEL_555;
                    }
LABEL_218:
                    BOOL v86 = *(void *)v50 == 0x72775F7468676972 && *(void *)((char *)v50 + 5) == 0x736F705F6472775FLL;
                    uint64_t v65 = (uint64_t)v338;
                    if (!v86)
                    {
LABEL_555:
                      exceptiounint64_t n = __cxa_allocate_exception(0x10uLL);
                      if (*((char *)v50 + 23) < 0) {
                        uint64_t v50 = *(_DWORD **)v50;
                      }
                      StringFormatter::StringFormatter((StringFormatter *)&v365, "Feature '%s' is not supported.", (const char *)v50);
                      MEMORY[0x210558D40](exception, &v365);
                      __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
                    }
                    goto LABEL_309;
                  }
LABEL_304:
                  uint64_t v139 = *(void *)v53;
                  int v140 = v53[2];
                  BOOL v141 = v139 == 0x6472775F7466656CLL && v140 == 1936683103;
                  uint64_t v65 = (uint64_t)v339;
                  if (!v141) {
                    goto LABEL_555;
                  }
                }
LABEL_309:
                uint64_t v142 = FeatureBook::get_feature_encoding(*v49, (uint64_t)v50, v65);
                memset(&v365, 0, sizeof(v365));
                std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v365, *(const void **)v142, *(void *)(v142 + 8), (uint64_t)(*(void *)(v142 + 8) - *(void *)v142) >> 2);
                std::vector<float>::__insert_with_size[abi:ne180100]<std::__wrap_iter<int *>,std::__wrap_iter<int *>>((uint64_t)__p, (char *)__p[1], (int *)v365.__r_.__value_.__l.__data_, (int *)v365.__r_.__value_.__l.__size_, (uint64_t)(v365.__r_.__value_.__l.__size_ - v365.__r_.__value_.__r.__words[0]) >> 2);
                goto LABEL_310;
              }
LABEL_288:
              if (*((void *)v50 + 1) == 3)
              {
                BOOL v137 = **(_WORD **)v50 == 28528 && *(unsigned char *)(*(void *)v50 + 2) == 115;
                uint64_t v65 = (uint64_t)v329;
                if (v137) {
                  goto LABEL_309;
                }
                if ((v52 & 0x80) == 0) {
                  goto LABEL_555;
                }
              }
              if (*((void *)v50 + 1) == 13)
              {
                BOOL v138 = **(void **)v50 == 0x72775F7468676972
                    && *(void *)(*(void *)v50 + 5) == 0x736F705F6472775FLL;
                uint64_t v65 = (uint64_t)v338;
                if (v138) {
                  goto LABEL_309;
                }
                if ((v52 & 0x80) == 0)
                {
                  long long v53 = v50;
                  if (v52 != 12) {
                    goto LABEL_555;
                  }
                  goto LABEL_304;
                }
              }
              if (*((void *)v50 + 1) != 12) {
                goto LABEL_555;
              }
              long long v53 = *(_DWORD **)v50;
              goto LABEL_304;
            }
LABEL_223:
            int v87 = *v54;
            uint64_t v88 = *v49;
            if (v88 + 32 == std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>(*v49 + 24, (const void **)v50))
            {
              float v90 = (float)v87;
              uint64_t v91 = (char *)__p[1];
              if (__p[1] >= (void *)v362[0])
              {
                int v93 = (char *)__p[0];
                int64_t v94 = ((char *)__p[1] - (char *)__p[0]) >> 2;
                unint64_t v95 = v94 + 1;
                if ((unint64_t)(v94 + 1) >> 62) {
                  std::vector<int>::__throw_length_error[abi:ne180100]();
                }
                int64_t v96 = v362[0] - (unint64_t)__p[0];
                if ((uint64_t)(v362[0] - (unint64_t)__p[0]) >> 1 > v95) {
                  unint64_t v95 = v96 >> 1;
                }
                if ((unint64_t)v96 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v97 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v97 = v95;
                }
                if (v97)
                {
                  unint64_t v98 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v362, v97);
                  uint64_t v91 = (char *)__p[1];
                  int v93 = (char *)__p[0];
                }
                else
                {
                  unint64_t v98 = 0;
                }
                int v99 = (float *)&v98[4 * v94];
                float *v99 = v90;
                uint64_t v92 = v99 + 1;
                while (v91 != v93)
                {
                  int v100 = *((_DWORD *)v91 - 1);
                  v91 -= 4;
                  *((_DWORD *)v99-- - 1) = v100;
                }
                __p[0] = v99;
                __p[1] = v92;
                v362[0] = &v98[4 * v97];
                if (v93) {
                  operator delete(v93);
                }
              }
              else
              {
                *(float *)__p[1] = v90;
                uint64_t v92 = v91 + 4;
              }
              __p[1] = v92;
              goto LABEL_312;
            }
            std::to_string(&v505, v87);
            uint64_t v89 = FeatureBook::get_feature_encoding(v88, (uint64_t)v50, (uint64_t)&v505);
            memset(&v365, 0, sizeof(v365));
            std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v365, *(const void **)v89, *(void *)(v89 + 8), (uint64_t)(*(void *)(v89 + 8) - *(void *)v89) >> 2);
            if (SHIBYTE(v505.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v505.__r_.__value_.__l.__data_);
            }
            std::vector<float>::__insert_with_size[abi:ne180100]<std::__wrap_iter<int *>,std::__wrap_iter<int *>>((uint64_t)__p, (char *)__p[1], (int *)v365.__r_.__value_.__l.__data_, (int *)v365.__r_.__value_.__l.__size_, (uint64_t)(v365.__r_.__value_.__l.__size_ - v365.__r_.__value_.__r.__words[0]) >> 2);
LABEL_310:
            if (v365.__r_.__value_.__r.__words[0])
            {
              v365.__r_.__value_.__l.__size_ = v365.__r_.__value_.__r.__words[0];
              operator delete(v365.__r_.__value_.__l.__data_);
            }
LABEL_312:
            v50 += 6;
            if (v50 == v354) {
              goto LABEL_313;
            }
            break;
          default:
            goto LABEL_174;
        }
      }
    }
LABEL_317:
    if (v46)
    {
      memset(&v365, 0, sizeof(v365));
      std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(&v365, __sz[0], __sz[1], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(__sz[1] - __sz[0]) >> 3));
      NNetExtractor::compute_output(v330[34], (uint8_t *)&v365);
      std::string::size_type v145 = v365.__r_.__value_.__r.__words[0];
      if (v365.__r_.__value_.__l.__size_ != v365.__r_.__value_.__r.__words[0])
      {
        unint64_t v146 = 0;
        do
        {
          uint64_t v147 = (int *)v330[40];
          uint64_t v148 = v357->i64[0];
          unint64_t v149 = v147[2];
          v355 = (uint64_t *)(v357->i64[0] + 608 * v146 + 360);
          std::vector<float>::resize((uint64_t)v355, v149);
          v351 = (std::string *)(v148 + 608 * v146 + 408);
          std::vector<float>::resize((uint64_t)v351, v149);
          v348 = (std::string *)(v148 + 608 * v146 + 488);
          std::vector<float>::resize((uint64_t)v348, v149);
          std::vector<float>::resize(v148 + 608 * v146 + 536, v149);
          std::vector<float>::resize(v148 + 608 * v146 + 384, v149);
          std::vector<float>::resize(v148 + 608 * v146 + 432, v149);
          std::vector<float>::resize(v148 + 608 * v146 + 512, v149);
          std::vector<float>::resize(v148 + 608 * v146 + 560, v149);
          uint64_t v150 = *(void *)(v145 + 24 * v146);
          unint64_t v151 = (unint64_t)(*(void *)(v145 + 24 * v146 + 8) - v150) >> 3;
          if ((int)v149 >= 1)
          {
            uint64_t v152 = 0;
            uint64_t v154 = v147[3];
            uint64_t v153 = v147[4];
            uint64_t v155 = v150 + 4 * ((int)v153 + (int)v149 + (int)v151);
            uint64_t v156 = v150 + 4 * ((int)v153 + (int)v149);
            uint64_t v157 = *v355;
            uint64_t v158 = v150 + 4 * ((int)v153 + (int)v151);
            uint64_t v159 = *(void *)(v148 + 608 * v146 + 384);
            std::string::size_type v160 = v351->__r_.__value_.__r.__words[0];
            uint64_t v161 = *(void *)(v148 + 608 * v146 + 432);
            std::string::size_type v162 = v348->__r_.__value_.__r.__words[0];
            uint64_t v163 = *(void *)(v148 + 608 * v146 + 512);
            uint64_t v164 = *(void *)(v148 + 608 * v146 + 536);
            uint64_t v165 = v150 + 4 * v153;
            uint64_t v166 = *(void *)(v148 + 608 * v146 + 560);
            do
            {
              *(_DWORD *)(v157 + v152) = *(_DWORD *)(v150 + 4 * v154 + v152);
              *(_DWORD *)(v159 + v152) = *(_DWORD *)(v150 + 4 * ((int)v154 + (int)v151) + v152);
              *(_DWORD *)(v160 + v152) = *(_DWORD *)(v150 + 4 * ((int)v154 + (int)v149) + v152);
              *(_DWORD *)(v161 + v152) = *(_DWORD *)(v150 + 4 * ((int)v154 + (int)v149 + (int)v151) + v152);
              *(_DWORD *)(v162 + v152) = *(_DWORD *)(v165 + v152);
              *(_DWORD *)(v163 + v152) = *(_DWORD *)(v158 + v152);
              *(_DWORD *)(v164 + v152) = *(_DWORD *)(v156 + v152);
              *(_DWORD *)(v166 + v152) = *(_DWORD *)(v155 + v152);
              v152 += 4;
            }
            while (4 * v149 != v152);
          }
          uint64_t v167 = v147[5];
          uint64_t v168 = v147[6];
          int v169 = v167 + 1;
          int v170 = *(_DWORD *)(v150 + 4 * ((int)v167 + (int)v151));
          uint64_t v171 = v147[7];
          uint64_t v172 = (_DWORD *)(v148 + 608 * v146);
          v172[114] = *(_DWORD *)(v150 + 4 * v167);
          v172[115] = v170;
          int v173 = *(_DWORD *)(v150 + 4 * ((int)v167 + 1));
          LODWORD(v167) = v167 + 2;
          int v174 = *(_DWORD *)(v150 + 4 * (v169 + (int)v151));
          v172[116] = v173;
          v172[117] = v174;
          int v175 = *(_DWORD *)(v150 + 4 * ((int)v167 + (int)v151));
          v172[118] = *(_DWORD *)(v150 + 4 * (int)v167);
          v172[119] = v175;
          int v176 = *(_DWORD *)(v150 + 4 * ((int)v168 + (int)v151));
          v172[146] = *(_DWORD *)(v150 + 4 * v168);
          v172[147] = v176;
          int v177 = *(_DWORD *)(v150 + 4 * ((int)v168 + 1 + (int)v151));
          v172[148] = *(_DWORD *)(v150 + 4 * ((int)v168 + 1));
          v172[149] = v177;
          int v178 = *(_DWORD *)(v150 + 4 * ((int)v171 + (int)v151));
          v172[120] = *(_DWORD *)(v150 + 4 * v171);
          v172[121] = v178;
          ++v146;
          std::string::size_type v145 = v365.__r_.__value_.__r.__words[0];
        }
        while (v146 < 0xAAAAAAAAAAAAAAABLL
                     * ((uint64_t)(v365.__r_.__value_.__l.__size_ - v365.__r_.__value_.__r.__words[0]) >> 3));
      }
      v505.__r_.__value_.__r.__words[0] = (std::string::size_type)&v365;
      std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v505);
    }
  }
  if (v330[36])
  {
    memset(&v365, 0, sizeof(v365));
    std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(&v365, __sz[0], __sz[1], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(__sz[1] - __sz[0]) >> 3));
    NNetExtractor::compute_output(v330[36], (uint8_t *)&v365);
    if (v365.__r_.__value_.__l.__size_ != v365.__r_.__value_.__r.__words[0])
    {
      uint64_t v179 = v330[42];
      uint64_t v180 = *(int *)(v179 + 20);
      uint64_t v181 = *(int *)(v179 + 24);
      uint64_t v182 = v181 + 1;
      uint64_t v183 = (int)v180 + 1;
      uint64_t v184 = (int)v180 + 2;
      unint64_t v185 = (int64_t)(v365.__r_.__value_.__l.__size_ - v365.__r_.__value_.__r.__words[0]) / 24;
      if (v185 <= 1) {
        unint64_t v185 = 1;
      }
      float v186 = (void *)(v365.__r_.__value_.__r.__words[0] + 8);
      __n128 v187 = (_DWORD *)(v357->i64[0] + 456);
      do
      {
        uint64_t v188 = *(v186 - 1);
        unint64_t v189 = (unint64_t)(*v186 - v188) >> 3;
        int v190 = *(_DWORD *)(v188 + 4 * ((int)v180 + (int)v189));
        *__n128 v187 = *(_DWORD *)(v188 + 4 * v180);
        v187[1] = v190;
        int v191 = *(_DWORD *)(v188 + 4 * ((int)v183 + (int)v189));
        v187[2] = *(_DWORD *)(v188 + 4 * v183);
        v187[3] = v191;
        int v192 = *(_DWORD *)(v188 + 4 * ((int)v184 + (int)v189));
        v187[4] = *(_DWORD *)(v188 + 4 * v184);
        v187[5] = v192;
        int v193 = *(_DWORD *)(v188 + 4 * ((int)v181 + (int)v189));
        v187[32] = *(_DWORD *)(v188 + 4 * v181);
        v187[33] = v193;
        int v194 = *(_DWORD *)(v188 + 4 * ((int)v182 + (int)v189));
        v187[34] = *(_DWORD *)(v188 + 4 * v182);
        v187[35] = v194;
        v186 += 3;
        v187 += 152;
        --v185;
      }
      while (v185);
    }
    v505.__r_.__value_.__r.__words[0] = (std::string::size_type)&v365;
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v505);
  }
  copycat_overrides = (uint64_t *)GryphonDebugging::get_copycat_overrides((GryphonDebugging *)v45);
  memset(&v365, 0, sizeof(v365));
  float v196 = (GryphonDebugging *)std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(&v365, *copycat_overrides, copycat_overrides[1], 0xAAAAAAAAAAAAAAABLL * ((copycat_overrides[1] - *copycat_overrides) >> 3));
  if (v365.__r_.__value_.__r.__words[0] != v365.__r_.__value_.__l.__size_)
  {
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v365.__r_.__value_.__l.__size_ - v365.__r_.__value_.__r.__words[0]) >> 3) == 0x86BCA1AF286BCA1BLL * ((uint64_t)(*(void *)(v349 + 32) - *(void *)(v349 + 24)) >> 5))
    {
      uint64_t v197 = GryphonDebugging::get_copycat_overrides(v196);
      memset(&v505, 0, sizeof(v505));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v505, *(long long **)(v197 + 24), *(long long **)(v197 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v197 + 32) - *(void *)(v197 + 24)) >> 3));
      std::string::size_type v198 = v505.__r_.__value_.__r.__words[0];
      if (v505.__r_.__value_.__l.__size_ != v505.__r_.__value_.__r.__words[0])
      {
        uint64_t v199 = 0;
        unint64_t v200 = (int64_t)(v505.__r_.__value_.__l.__size_ - v505.__r_.__value_.__r.__words[0]) / 24;
        uint64_t v202 = *(void *)(v349 + 24);
        uint64_t v201 = *(void *)(v349 + 32);
        unint64_t v203 = (v201 - v202) / 608;
        if (v203 <= 1) {
          unint64_t v203 = 1;
        }
        if (v200 <= 1) {
          unint64_t v200 = 1;
        }
        while (v201 == v202)
        {
LABEL_430:
          if (++v199 == v200) {
            goto LABEL_431;
          }
        }
        std::string::size_type v204 = v198 + 24 * v199;
        char v205 = (void *)v365.__r_.__value_.__r.__words[0];
        std::string::size_type v206 = (_DWORD *)(v202 + 484);
        unint64_t v207 = v203;
        while (1)
        {
          int v208 = *(unsigned __int8 *)(v204 + 23);
          if (*(char *)(v204 + 23) < 0)
          {
            uint64_t v210 = *(void *)(v204 + 8);
            if (v210 != 13) {
              goto LABEL_355;
            }
            unint64_t v209 = *(uint64_t **)v204;
          }
          else
          {
            unint64_t v209 = (uint64_t *)(v198 + 24 * v199);
            if (v208 != 13) {
              goto LABEL_351;
            }
          }
          uint64_t v211 = *v209;
          uint64_t v212 = *(uint64_t *)((char *)v209 + 5);
          if (v211 == 0x6E6F697461727564 && v212 == 0x6E61656D5F6E6F69)
          {
            *(v206 - 1) = *(_DWORD *)(*v205 + 4 * v199);
            int v208 = *(unsigned __int8 *)(v204 + 23);
            if ((v208 & 0x80) == 0)
            {
LABEL_351:
              if (v208 != 12) {
                goto LABEL_362;
              }
              uint64_t v214 = (uint64_t *)(v198 + 24 * v199);
              goto LABEL_357;
            }
          }
          else if ((v208 & 0x80) == 0)
          {
            goto LABEL_351;
          }
          uint64_t v210 = *(void *)(v204 + 8);
LABEL_355:
          if (v210 != 12) {
            goto LABEL_366;
          }
          uint64_t v214 = *(uint64_t **)v204;
LABEL_357:
          uint64_t v215 = *v214;
          uint64_t v216 = *((unsigned int *)v214 + 2);
          if (v215 == 0x6E6F697461727564 && v216 == 1918989919)
          {
            *std::string::size_type v206 = *(_DWORD *)(*v205 + 4 * v199);
            int v208 = *(unsigned __int8 *)(v204 + 23);
            if ((v208 & 0x80) == 0)
            {
LABEL_362:
              if (v208 != 13) {
                goto LABEL_373;
              }
              int v218 = (uint64_t *)(v198 + 24 * v199);
              goto LABEL_368;
            }
          }
          else if ((v208 & 0x80) == 0)
          {
            goto LABEL_362;
          }
          uint64_t v210 = *(void *)(v204 + 8);
LABEL_366:
          if (v210 != 13) {
            goto LABEL_377;
          }
          int v218 = *(uint64_t **)v204;
LABEL_368:
          uint64_t v219 = *v218;
          uint64_t v220 = *(uint64_t *)((char *)v218 + 5);
          if (v219 == 0x6E696765625F3066 && v220 == 0x6E61656D5F6E6967)
          {
            *(v206 - 7) = *(_DWORD *)(*v205 + 4 * v199);
            int v208 = *(unsigned __int8 *)(v204 + 23);
            if ((v208 & 0x80) == 0)
            {
LABEL_373:
              if (v208 != 12) {
                goto LABEL_384;
              }
              uint64_t v222 = (uint64_t *)(v198 + 24 * v199);
              goto LABEL_379;
            }
          }
          else if ((v208 & 0x80) == 0)
          {
            goto LABEL_373;
          }
          uint64_t v210 = *(void *)(v204 + 8);
LABEL_377:
          if (v210 != 12) {
            goto LABEL_388;
          }
          uint64_t v222 = *(uint64_t **)v204;
LABEL_379:
          uint64_t v223 = *v222;
          uint64_t v224 = *((unsigned int *)v222 + 2);
          if (v223 == 0x6E696765625F3066 && v224 == 1918989919)
          {
            *(v206 - 6) = *(_DWORD *)(*v205 + 4 * v199);
            int v208 = *(unsigned __int8 *)(v204 + 23);
            if ((v208 & 0x80) == 0)
            {
LABEL_384:
              if (v208 != 14) {
                goto LABEL_395;
              }
              float v226 = (uint64_t *)(v198 + 24 * v199);
              goto LABEL_390;
            }
          }
          else if ((v208 & 0x80) == 0)
          {
            goto LABEL_384;
          }
          uint64_t v210 = *(void *)(v204 + 8);
LABEL_388:
          if (v210 != 14) {
            goto LABEL_399;
          }
          float v226 = *(uint64_t **)v204;
LABEL_390:
          uint64_t v227 = *v226;
          uint64_t v228 = *(uint64_t *)((char *)v226 + 6);
          if (v227 == 0x6C6464696D5F3066 && v228 == 0x6E61656D5F656C64)
          {
            *(v206 - 5) = *(_DWORD *)(*v205 + 4 * v199);
            int v208 = *(unsigned __int8 *)(v204 + 23);
            if ((v208 & 0x80) == 0)
            {
LABEL_395:
              if (v208 != 13) {
                goto LABEL_406;
              }
              float v230 = (uint64_t *)(v198 + 24 * v199);
              goto LABEL_401;
            }
          }
          else if ((v208 & 0x80) == 0)
          {
            goto LABEL_395;
          }
          uint64_t v210 = *(void *)(v204 + 8);
LABEL_399:
          if (v210 != 13) {
            goto LABEL_410;
          }
          float v230 = *(uint64_t **)v204;
LABEL_401:
          uint64_t v231 = *v230;
          uint64_t v232 = *(uint64_t *)((char *)v230 + 5);
          if (v231 == 0x6C6464696D5F3066 && v232 == 0x7261765F656C6464)
          {
            *(v206 - 4) = *(_DWORD *)(*v205 + 4 * v199);
            int v208 = *(unsigned __int8 *)(v204 + 23);
            if ((v208 & 0x80) == 0)
            {
LABEL_406:
              if (v208 != 11) {
                goto LABEL_417;
              }
              float v234 = (uint64_t *)(v198 + 24 * v199);
              goto LABEL_412;
            }
          }
          else if ((v208 & 0x80) == 0)
          {
            goto LABEL_406;
          }
          uint64_t v210 = *(void *)(v204 + 8);
LABEL_410:
          if (v210 != 11) {
            goto LABEL_421;
          }
          float v234 = *(uint64_t **)v204;
LABEL_412:
          uint64_t v235 = *v234;
          uint64_t v236 = *(uint64_t *)((char *)v234 + 3);
          if (v235 == 0x6D5F646E655F3066 && v236 == 0x6E61656D5F646E65)
          {
            *(v206 - 3) = *(_DWORD *)(*v205 + 4 * v199);
            int v208 = *(unsigned __int8 *)(v204 + 23);
            if ((v208 & 0x80) == 0)
            {
LABEL_417:
              float v238 = (uint64_t *)(v198 + 24 * v199);
              if (v208 == 10) {
                goto LABEL_423;
              }
              goto LABEL_429;
            }
          }
          else if ((v208 & 0x80) == 0)
          {
            goto LABEL_417;
          }
          uint64_t v210 = *(void *)(v204 + 8);
LABEL_421:
          if (v210 == 10)
          {
            float v238 = *(uint64_t **)v204;
LABEL_423:
            uint64_t v239 = *v238;
            int v240 = *((unsigned __int16 *)v238 + 4);
            if (v239 == 0x765F646E655F3066 && v240 == 29281) {
              *(v206 - 2) = *(_DWORD *)(*v205 + 4 * v199);
            }
          }
LABEL_429:
          v206 += 152;
          v205 += 3;
          if (!--v207) {
            goto LABEL_430;
          }
        }
      }
LABEL_431:
      if (Diagnostics_GetLogObject(void)::onceToken != -1) {
        dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
      }
      BOOL v242 = Diagnostics_GetLogObject(void)::__profile_log_default;
      if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(__p[0]) = 0;
        _os_log_impl(&dword_20CD80000, v242, OS_LOG_TYPE_DEFAULT, "Copycat override completed.", (uint8_t *)__p, 2u);
      }
      Diagnostics::log(5, "Copycat override completed.", v243);
      __p[0] = &v505;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    }
    else
    {
      if (Diagnostics_GetLogObject(void)::onceToken != -1) {
        dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
      }
      uint64_t v244 = Diagnostics_GetLogObject(void)::__profile_log_default;
      if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
      {
        unint64_t v246 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(*(void *)(v349 + 32) - *(void *)(v349 + 24)) >> 5);
        LODWORD(v505.__r_.__value_.__l.__data_) = 134218240;
        *(std::string::size_type *)((char *)v505.__r_.__value_.__r.__words + 4) = 0xAAAAAAAAAAAAAAABLL
                                                                                * ((uint64_t)(v365.__r_.__value_.__l.__size_
                                                                                           - v365.__r_.__value_.__r.__words[0]) >> 3);
        WORD2(v505.__r_.__value_.__r.__words[1]) = 2048;
        *(std::string::size_type *)((char *)&v505.__r_.__value_.__r.__words[1] + 6) = v246;
        _os_log_impl(&dword_20CD80000, v244, OS_LOG_TYPE_ERROR, "Copycat length mismatch\n   units read from file: %ld units to replace: %ld", (uint8_t *)&v505, 0x16u);
      }
      Diagnostics::log(3, "Copycat length mismatch\n   units read from file: %ld units to replace: %ld", v245, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v365.__r_.__value_.__l.__size_ - v365.__r_.__value_.__r.__words[0]) >> 3), 0x86BCA1AF286BCA1BLL * ((uint64_t)(*(void *)(v349 + 32) - *(void *)(v349 + 24)) >> 5));
    }
  }
  v505.__r_.__value_.__r.__words[0] = (std::string::size_type)&v365;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v505);
  int v248 = (GryphonAnalysis *)GryphonAnalysis::Storage(v247);
  if (*(unsigned char *)v248)
  {
    uint64_t v249 = *(const void ***)(v349 + 24);
    for (unint64_t j = *(const void ***)(v349 + 32); v249 != j; v249 += 76)
    {
      uint64_t v250 = GryphonAnalysis::Storage(v248);
      uint64_t v252 = *(void *)(v250 + 120);
      uint64_t v251 = *(void *)(v250 + 128);
      if (*((char *)v249 + 23) >= 0) {
        size_t v253 = *((unsigned __int8 *)v249 + 23);
      }
      else {
        size_t v253 = (size_t)v249[1];
      }
      std::string::basic_string[abi:ne180100]((uint64_t)&v365, v253 + 1);
      if ((v365.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v254 = &v365;
      }
      else {
        uint64_t v254 = (std::string *)v365.__r_.__value_.__r.__words[0];
      }
      if (v253)
      {
        if (*((char *)v249 + 23) >= 0) {
          uint64_t v255 = v249;
        }
        else {
          uint64_t v255 = *v249;
        }
        memmove(v254, v255, v253);
      }
      uint64_t v256 = (char *)v254 + v253;
      if ((-85 * ((v251 - v252) >> 3))) {
        char v257 = 50;
      }
      else {
        char v257 = 49;
      }
      *uint64_t v256 = v257;
      v256[1] = 0;
      std::to_string(&v366, *((_DWORD *)v249 + 7));
      std::to_string(&v367, *((_DWORD *)v249 + 8));
      std::to_string(&v368, *((_DWORD *)v249 + 38));
      std::to_string(&v369, *((_DWORD *)v249 + 36));
      std::to_string(&v370, *((_DWORD *)v249 + 37));
      std::to_string(&v371, *((_DWORD *)v249 + 12));
      std::to_string(&v372, *((_DWORD *)v249 + 10));
      std::to_string(&v373, *((_DWORD *)v249 + 11));
      std::to_string(&v374, *((_DWORD *)v249 + 13));
      std::to_string(&v375, *((_DWORD *)v249 + 14));
      std::to_string(&v376, *((_DWORD *)v249 + 15));
      std::to_string(&v377, *((_DWORD *)v249 + 16));
      std::to_string(v378, *((_DWORD *)v249 + 39));
      std::to_string(&v378[1], *((_DWORD *)v249 + 40));
      std::to_string(v379, *((_DWORD *)v249 + 41));
      std::to_string(&v379[1], *((_DWORD *)v249 + 42));
      std::to_string(v380, *((_DWORD *)v249 + 43));
      std::to_string(&v380[1], *((_DWORD *)v249 + 44));
      std::to_string((std::string *)&v381, *((_DWORD *)v249 + 45));
      std::to_string((std::string *)((char *)v382 + 8), *((_DWORD *)v249 + 46));
      std::to_string(v383, *((_DWORD *)v249 + 47));
      std::to_string(&v383[1], *((_DWORD *)v249 + 48));
      std::to_string((std::string *)&v384, *((_DWORD *)v249 + 50));
      if (*((char *)v249 + 263) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)((char *)v385 + 8), (const std::string::value_type *)v249[30], (std::string::size_type)v249[31]);
      }
      else
      {
        long long v258 = *((_OWORD *)v249 + 15);
        *((void *)&v385[1] + 1) = v249[32];
        *(_OWORD *)((char *)v385 + 8) = v258;
      }
      if (*((char *)v249 + 287) < 0)
      {
        std::string::__init_copy_ctor_external(&v386, (const std::string::value_type *)v249[33], (std::string::size_type)v249[34]);
      }
      else
      {
        long long v259 = *(_OWORD *)(v249 + 33);
        v386.__r_.__value_.__r.__words[2] = (std::string::size_type)v249[35];
        *(_OWORD *)&v386.__r_.__value_.__l.__data_ = v259;
      }
      if (*((char *)v249 + 311) < 0)
      {
        std::string::__init_copy_ctor_external(&v387, (const std::string::value_type *)v249[36], (std::string::size_type)v249[37]);
      }
      else
      {
        long long v260 = *((_OWORD *)v249 + 18);
        v387.__r_.__value_.__r.__words[2] = (std::string::size_type)v249[38];
        *(_OWORD *)&v387.__r_.__value_.__l.__data_ = v260;
      }
      std::to_string(&v388, *(float *)v249[45]);
      std::to_string(&v389, *((float *)v249[45] + 1));
      std::to_string(&v390, *((float *)v249[45] + 2));
      std::to_string(&v391, *((float *)v249[45] + 3));
      std::to_string(&v392, *((float *)v249[45] + 4));
      std::to_string(&v393, *((float *)v249[45] + 5));
      std::to_string(&v394, *((float *)v249[45] + 6));
      std::to_string(&v395, *((float *)v249[45] + 7));
      std::to_string(&v396, *((float *)v249[45] + 8));
      std::to_string(&v397, *((float *)v249[45] + 9));
      std::to_string(&v398, *((float *)v249[45] + 10));
      std::to_string(&v399, *((float *)v249[45] + 11));
      std::to_string(&v400, *((float *)v249[45] + 12));
      std::to_string(&v401, *(float *)v249[51]);
      std::to_string(&v402, *((float *)v249[51] + 1));
      std::to_string(&v403, *((float *)v249[51] + 2));
      std::to_string(&v404, *((float *)v249[51] + 3));
      std::to_string(&v405, *((float *)v249[51] + 4));
      std::to_string(&v406, *((float *)v249[51] + 5));
      std::to_string(&v407, *((float *)v249[51] + 6));
      std::to_string(&v408, *((float *)v249[51] + 7));
      std::to_string(&v409, *((float *)v249[51] + 8));
      std::to_string(&v410, *((float *)v249[51] + 9));
      std::to_string(&v411, *((float *)v249[51] + 10));
      std::to_string(&v412, *((float *)v249[51] + 11));
      std::to_string(&v413, *((float *)v249[51] + 12));
      std::to_string(&v414, *(float *)v249[61]);
      std::to_string(&v415, *((float *)v249[61] + 1));
      std::to_string(&v416, *((float *)v249[61] + 2));
      std::to_string(&v417, *((float *)v249[61] + 3));
      std::to_string(&v418, *((float *)v249[61] + 4));
      std::to_string(&v419, *((float *)v249[61] + 5));
      std::to_string(&v420, *((float *)v249[61] + 6));
      std::to_string(&v421, *((float *)v249[61] + 7));
      std::to_string(&v422, *((float *)v249[61] + 8));
      std::to_string(&v423, *((float *)v249[61] + 9));
      std::to_string(&v424, *((float *)v249[61] + 10));
      std::to_string(&v425, *((float *)v249[61] + 11));
      std::to_string(&v426, *((float *)v249[61] + 12));
      std::to_string(&v427, *(float *)v249[67]);
      std::to_string(&v428, *((float *)v249[67] + 1));
      std::to_string(&v429, *((float *)v249[67] + 2));
      std::to_string(&v430, *((float *)v249[67] + 3));
      std::to_string(&v431, *((float *)v249[67] + 4));
      std::to_string(&v432, *((float *)v249[67] + 5));
      std::to_string(&v433, *((float *)v249[67] + 6));
      std::to_string(&v434, *((float *)v249[67] + 7));
      std::to_string(&v435, *((float *)v249[67] + 8));
      std::to_string(&v436, *((float *)v249[67] + 9));
      std::to_string(&v437, *((float *)v249[67] + 10));
      std::to_string(&v438, *((float *)v249[67] + 11));
      std::to_string(&v439, *((float *)v249[67] + 12));
      float v261 = expf(*((float *)v249 + 114));
      std::to_string(&v440, v261);
      float v262 = expf(*((float *)v249 + 116));
      std::to_string(&v441, v262);
      float v263 = expf(*((float *)v249 + 118));
      std::to_string(&v442, v263);
      std::to_string(&v443, *((float *)v249 + 146));
      std::to_string(&v444, *((float *)v249 + 148));
      float v264 = expf(*((float *)v249 + 120));
      std::to_string(&v445, v264);
      std::to_string(&v446, *(float *)v249[48]);
      std::to_string(&v447, *((float *)v249[48] + 1));
      std::to_string(&v448, *((float *)v249[48] + 2));
      std::to_string(&v449, *((float *)v249[48] + 3));
      std::to_string(&v450, *((float *)v249[48] + 4));
      std::to_string(&v451, *((float *)v249[48] + 5));
      std::to_string(&v452, *((float *)v249[48] + 6));
      std::to_string(&v453, *((float *)v249[48] + 7));
      std::to_string(&v454, *((float *)v249[48] + 8));
      std::to_string(&v455, *((float *)v249[48] + 9));
      std::to_string(&v456, *((float *)v249[48] + 10));
      std::to_string(&v457, *((float *)v249[48] + 11));
      std::to_string(&v458, *((float *)v249[48] + 12));
      std::to_string(&v459, *(float *)v249[54]);
      std::to_string(&v460, *((float *)v249[54] + 1));
      std::to_string(&v461, *((float *)v249[54] + 2));
      std::to_string(&v462, *((float *)v249[54] + 3));
      std::to_string(&v463, *((float *)v249[54] + 4));
      std::to_string(&v464, *((float *)v249[54] + 5));
      std::to_string(&v465, *((float *)v249[54] + 6));
      std::to_string(&v466, *((float *)v249[54] + 7));
      std::to_string(&v467, *((float *)v249[54] + 8));
      std::to_string(&v468, *((float *)v249[54] + 9));
      std::to_string(&v469, *((float *)v249[54] + 10));
      std::to_string(&v470, *((float *)v249[54] + 11));
      std::to_string(&v471, *((float *)v249[54] + 12));
      std::to_string(&v472, *(float *)v249[64]);
      std::to_string(&v473, *((float *)v249[64] + 1));
      std::to_string(&v474, *((float *)v249[64] + 2));
      std::to_string(&v475, *((float *)v249[64] + 3));
      std::to_string(&v476, *((float *)v249[64] + 4));
      std::to_string(&v477, *((float *)v249[64] + 5));
      std::to_string(&v478, *((float *)v249[64] + 6));
      std::to_string(&v479, *((float *)v249[64] + 7));
      std::to_string(&v480, *((float *)v249[64] + 8));
      std::to_string(&v481, *((float *)v249[64] + 9));
      std::to_string(&v482, *((float *)v249[64] + 10));
      std::to_string(&v483, *((float *)v249[64] + 11));
      std::to_string(&v484, *((float *)v249[64] + 12));
      std::to_string(&v485, *(float *)v249[70]);
      std::to_string(&v486, *((float *)v249[70] + 1));
      std::to_string(&v487, *((float *)v249[70] + 2));
      std::to_string(&v488, *((float *)v249[70] + 3));
      std::to_string(&v489, *((float *)v249[70] + 4));
      std::to_string(&v490, *((float *)v249[70] + 5));
      std::to_string(&v491, *((float *)v249[70] + 6));
      std::to_string(&v492, *((float *)v249[70] + 7));
      std::to_string(&v493, *((float *)v249[70] + 8));
      std::to_string(&v494, *((float *)v249[70] + 9));
      std::to_string(&v495, *((float *)v249[70] + 10));
      std::to_string(&v496, *((float *)v249[70] + 11));
      std::to_string(&v497, *((float *)v249[70] + 12));
      std::to_string(&v498, *((float *)v249 + 115));
      std::to_string(&v499, *((float *)v249 + 117));
      std::to_string(&v500, *((float *)v249 + 119));
      std::to_string(&v501, *((float *)v249 + 147));
      std::to_string(&v502, *((float *)v249 + 149));
      float v265 = expf(*((float *)v249 + 121));
      std::to_string(&v503, v265);
      memset(&v505, 0, sizeof(v505));
      __p[0] = &v505;
      LOBYTE(__p[1]) = 0;
      v505.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0xD68uLL);
      v505.__r_.__value_.__l.__size_ = v505.__r_.__value_.__r.__words[0];
      v505.__r_.__value_.__r.__words[2] = v505.__r_.__value_.__r.__words[0] + 3432;
      unint64_t v266 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v505.__r_.__value_.__r.__words[2], (long long *)&v365, (long long *)&v504, (std::string *)v505.__r_.__value_.__l.__data_);
      v505.__r_.__value_.__l.__size_ = (std::string::size_type)v266;
      uint64_t v267 = 429;
      do
      {
        if (v365.__r_.__value_.__s.__data_[v267 * 8 - 1] < 0) {
          operator delete((void *)__sz[v267 + 1]);
        }
        v267 -= 3;
      }
      while (v267 * 8);
      uint64_t v268 = GryphonAnalysis::Storage((GryphonAnalysis *)v266);
      char v269 = (uint64_t *)(v268 + 120);
      unint64_t v270 = *(void *)(v268 + 128);
      if (v270 >= *(void *)(v268 + 136))
      {
        uint64_t v271 = std::vector<std::vector<std::string>>::__push_back_slow_path<std::vector<std::string> const&>(v269, (long long **)&v505);
      }
      else
      {
        std::vector<std::vector<std::string>>::__construct_one_at_end[abi:ne180100]<std::vector<std::string> const&>((uint64_t)v269, (long long **)&v505);
        uint64_t v271 = v270 + 24;
      }
      *(void *)(v268 + 128) = v271;
      v365.__r_.__value_.__r.__words[0] = (std::string::size_type)&v505;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v365);
    }
    long long v272 = v322[3];
    v273 = v322[4];
    if (v272 != v273)
    {
      while (1)
      {
        if (*((char *)v272 + 63) < 0) {
          std::string::__init_copy_ctor_external(&v360, *((const std::string::value_type **)v272 + 5), *((void *)v272 + 6));
        }
        else {
          std::string v360 = *(std::string *)((char *)v272 + 40);
        }
        int v274 = *(_DWORD *)v272;
        int v275 = *((_DWORD *)v272 + 1);
        int v248 = (GryphonAnalysis *)GryphonAnalysis::Storage(v248);
        float v276 = v248;
        if (SHIBYTE(v360.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v365, v360.__r_.__value_.__l.__data_, v360.__r_.__value_.__l.__size_);
        }
        else {
          std::string v365 = v360;
        }
        int v277 = 2 * v274;
        int v278 = 2 * v275;
        v366.__r_.__value_.__r.__words[0] = __PAIR64__(v278, v277);
        unint64_t v279 = *((void *)v276 + 13);
        unint64_t v280 = *((void *)v276 + 14);
        if (v279 >= v280) {
          break;
        }
        long long v281 = *(_OWORD *)&v365.__r_.__value_.__l.__data_;
        *(void *)(v279 + 16) = *((void *)&v365.__r_.__value_.__l + 2);
        *(_OWORD *)unint64_t v279 = v281;
        memset(&v365, 0, sizeof(v365));
        *(void *)(v279 + ++*(_DWORD *)(result + 24) = v366.__r_.__value_.__r.__words[0];
        *((void *)v276 + 13) = v279 + 32;
LABEL_504:
        if (SHIBYTE(v360.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v360.__r_.__value_.__l.__data_);
        }
        long long v272 = (const PhoneFeature *)((char *)v272 + 136);
        if (v272 == v273) {
          goto LABEL_510;
        }
      }
      uint64_t v282 = *((void *)v276 + 12);
      uint64_t v283 = (uint64_t)(v279 - v282) >> 5;
      unint64_t v284 = v283 + 1;
      if ((unint64_t)(v283 + 1) >> 59) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v285 = v280 - v282;
      if (v285 >> 4 > v284) {
        unint64_t v284 = v285 >> 4;
      }
      if ((unint64_t)v285 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v286 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v286 = v284;
      }
      if (v286)
      {
        if (v286 >> 59) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        int v248 = (GryphonAnalysis *)operator new(32 * v286);
      }
      else
      {
        int v248 = 0;
      }
      v287 = (char *)v248 + 32 * v283;
      v288 = (char *)v248 + 32 * v286;
      *(std::string *)v287 = v365;
      memset(&v365, 0, sizeof(v365));
      *((_DWORD *)v287 + 6) = v277;
      *((_DWORD *)v287 + 7) = v278;
      v289 = v287 + 32;
      unint64_t v290 = (char *)*((void *)v276 + 12);
      v291 = (char *)*((void *)v276 + 13);
      if (v291 == v290)
      {
        *((void *)v276 + 12) = v287;
        *((void *)v276 + 13) = v289;
        *((void *)v276 + 14) = v288;
        if (!v291)
        {
LABEL_502:
          int v294 = SHIBYTE(v365.__r_.__value_.__r.__words[2]);
          *((void *)v276 + 13) = v289;
          if (v294 < 0) {
            operator delete(v365.__r_.__value_.__l.__data_);
          }
          goto LABEL_504;
        }
      }
      else
      {
        do
        {
          long long v292 = *((_OWORD *)v291 - 2);
          *((void *)v287 - 2) = *((void *)v291 - 2);
          *((_OWORD *)v287 - 2) = v292;
          *((void *)v291 - 3) = 0;
          *((void *)v291 - 2) = 0;
          *((void *)v291 - 4) = 0;
          *((_DWORD *)v287 - 2) = *((_DWORD *)v291 - 2);
          *((_DWORD *)v287 - 1) = *((_DWORD *)v291 - 1);
          v287 -= 32;
          v291 -= 32;
        }
        while (v291 != v290);
        std::vector<int> v293 = (char *)*((void *)v276 + 12);
        v291 = (char *)*((void *)v276 + 13);
        *((void *)v276 + 12) = v287;
        *((void *)v276 + 13) = v289;
        *((void *)v276 + 14) = v288;
        if (v291 != v293)
        {
          do
          {
            if (*(v291 - 9) < 0) {
              operator delete(*((void **)v291 - 4));
            }
            v291 -= 32;
          }
          while (v291 != v293);
          v291 = v293;
        }
        if (!v291) {
          goto LABEL_502;
        }
      }
      operator delete(v291);
      goto LABEL_502;
    }
  }
LABEL_510:
  v295 = (void *)v330[47];
  if (v295)
  {
    v296 = (void **)(v295 + 56);
    if (v295 + 56 == (void *)v357)
    {
LABEL_540:
      if (Diagnostics_GetLogObject(void)::onceToken != -1) {
        dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
      }
      v314 = Diagnostics_GetLogObject(void)::__profile_log_default;
      if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
      {
        LOWORD(v365.__r_.__value_.__l.__data_) = 0;
        _os_log_impl(&dword_20CD80000, v314, OS_LOG_TYPE_INFO, "Force Prosody is enabled. Use PSOLA to match predicted f0 and duration.", (uint8_t *)&v365, 2u);
      }
      Diagnostics::log(6, "Force Prosody is enabled. Use PSOLA to match predicted f0 and duration.", v315);
      goto LABEL_545;
    }
    uint64_t v298 = *(void *)(v349 + 24);
    uint64_t v297 = *(void *)(v349 + 32);
    unint64_t v299 = 0x86BCA1AF286BCA1BLL * ((v297 - v298) >> 5);
    uint64_t v300 = v295[58];
    uint64_t v301 = v295[56];
    if (0x86BCA1AF286BCA1BLL * ((v300 - v301) >> 5) >= v299)
    {
      uint64_t v310 = v295[57];
      uint64_t v311 = v310 - v301;
      unint64_t v312 = 0x86BCA1AF286BCA1BLL * ((v310 - v301) >> 5);
      if (v312 >= v299)
      {
        if (v298 != v297)
        {
          do
          {
            UnitFeature::operator=(v301, v298);
            v298 += 608;
            v301 += 608;
          }
          while (v298 != v297);
          uint64_t v310 = v295[57];
        }
        while (v310 != v301)
          UnitFeature::~UnitFeature((UnitFeature *)(v310 - 608));
        v295[57] = v301;
        goto LABEL_539;
      }
      if (v310 != v301)
      {
        uint64_t v313 = *(void *)(v349 + 24);
        do
        {
          UnitFeature::operator=(v301, v313);
          v313 += 608;
          v301 += 608;
          v311 -= 608;
        }
        while (v311);
        uint64_t v301 = v295[57];
      }
      uint64_t v309 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<UnitFeature>,UnitFeature*,UnitFeature*,UnitFeature*>(v298 + 608 * v312, v297, v301);
    }
    else
    {
      if (v301)
      {
        uint64_t v302 = v295[57];
        v303 = (void *)v295[56];
        if (v302 != v301)
        {
          do
            UnitFeature::~UnitFeature((UnitFeature *)(v302 - 608));
          while (v302 != v301);
          v303 = *v296;
        }
        v295[57] = v301;
        operator delete(v303);
        uint64_t v300 = 0;
        *v296 = 0;
        v295[57] = 0;
        v295[58] = 0;
      }
      if (v299 > 0x6BCA1AF286BCA1) {
        goto LABEL_562;
      }
      unint64_t v304 = 0x86BCA1AF286BCA1BLL * (v300 >> 5);
      uint64_t v305 = 2 * v304;
      if (2 * v304 <= v299) {
        uint64_t v305 = 0x86BCA1AF286BCA1BLL * ((v297 - v298) >> 5);
      }
      unint64_t v306 = v304 >= 0x35E50D79435E50 ? 0x6BCA1AF286BCA1 : v305;
      if (v306 > 0x6BCA1AF286BCA1) {
LABEL_562:
      }
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v307 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<UnitFeature>>(v306);
      v295[56] = v307;
      v295[57] = v307;
      v295[58] = &v307[608 * v308];
      uint64_t v309 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<UnitFeature>,UnitFeature*,UnitFeature*,UnitFeature*>(v298, v297, (uint64_t)v307);
    }
    v295[57] = v309;
LABEL_539:
    std::vector<Prompt>::__assign_with_size[abi:ne180100]<Prompt*,Prompt*>((uint64_t)(v295 + 59), *(uint64_t **)(v349 + 48), *(uint64_t **)(v349 + 56), 0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(v349 + 56) - *(void *)(v349 + 48)) >> 3));
    goto LABEL_540;
  }
LABEL_545:
  v316 = (char *)operator new(0x30uLL);
  *(_OWORD *)(v316 + 8) = 0u;
  *((_OWORD *)v316 + 2) = 0u;
  *((void *)v316 + 3) = v316 + 32;
  *(void *)v316 = off_26C215330;
  v365.__r_.__value_.__r.__words[0] = (std::string::size_type)&v505;
  if (!v317) {
    operator new();
  }
  v365.__r_.__value_.__r.__words[0] = (std::string::size_type)off_26C2065F8;
  v365.__r_.__value_.__l.__size_ = (std::string::size_type)v357;
  v365.__r_.__value_.__r.__words[2] = v349;
  atomic_fetch_add_explicit((atomic_ullong *volatile)(v349 + 8), 1uLL, memory_order_relaxed);
  long long v318 = *(_OWORD *)&v365.__r_.__value_.__r.__words[1];
  *(_OWORD *)&v365.__r_.__value_.__r.__words[1] = 0uLL;
  v319 = *(std::__shared_weak_count **)(v317 + 16);
  *(_OWORD *)(v317 + 8) = v318;
  if (v319)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v319);
    v365.__r_.__value_.__r.__words[0] = (std::string::size_type)off_26C2065F8;
    if (v365.__r_.__value_.__r.__words[2]) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v365.__r_.__value_.__r.__words[2]);
    }
  }
  v358 = v316 + 24;
  v359 = (std::__shared_weak_count *)v316;
  atomic_fetch_add_explicit((atomic_ullong *volatile)v316 + 1, 1uLL, memory_order_relaxed);
  (*(void (**)(uint64_t *, char **))(*v330 + 72))(v330, &v358);
  if (v359) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v359);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v316);
  v365.__r_.__value_.__r.__words[0] = (std::string::size_type)__sz;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v365);
  std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v349);
  if (v321) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v321);
  }
}

void sub_20D431604(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  *(void *)(v12 + 456) = v13;
  STACK[0x4E0] = (unint64_t)&STACK[0x500];
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x4E0]);
  std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x490]);
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(a1);
}

uint64_t std::vector<UnitFeature>::__push_back_slow_path<UnitFeature const&>(int64x2_t *a1, const UnitFeature *a2)
{
  unint64_t v2 = 0x86BCA1AF286BCA1BLL * ((a1->i64[1] - a1->i64[0]) >> 5);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 > 0x6BCA1AF286BCA1) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  int v6 = a1 + 1;
  if (0xD79435E50D79436 * ((a1[1].i64[0] - a1->i64[0]) >> 5) > v3) {
    unint64_t v3 = 0xD79435E50D79436 * ((a1[1].i64[0] - a1->i64[0]) >> 5);
  }
  if (0x86BCA1AF286BCA1BLL * ((a1[1].i64[0] - a1->i64[0]) >> 5) >= 0x35E50D79435E50) {
    unint64_t v7 = 0x6BCA1AF286BCA1;
  }
  else {
    unint64_t v7 = v3;
  }
  int v59 = (uint64_t *)v6;
  if (v7) {
    unint64_t v7 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<UnitFeature>>(v7);
  }
  else {
    uint64_t v8 = 0;
  }
  unint64_t v56 = v7;
  v57.i64[0] = v7 + 608 * v2;
  unint64_t v58 = v7 + 608 * v8;
  UnitFeature::UnitFeature((UnitFeature *)v57.i64[0], a2);
  uint64_t v9 = v57.i64[0];
  uint64_t v10 = v57.i64[0] + 608;
  v57.i64[1] = v57.i64[0] + 608;
  uint64_t v12 = a1->i64[0];
  unint64_t v11 = a1->u64[1];
  if (v11 == a1->i64[0])
  {
    int64x2_t v53 = vdupq_n_s64(v11);
  }
  else
  {
    uint64_t v13 = 0;
    do
    {
      uint64_t v14 = v9 + v13;
      uint64_t v15 = v9 + v13 - 608;
      uint64_t v16 = v11 + v13;
      int v17 = (long long *)(v11 + v13 - 608);
      long long v18 = *v17;
      *(void *)(v15 + 16) = *(void *)(v11 + v13 - 592);
      *(_OWORD *)uint64_t v15 = v18;
      *(long long *)((char *)v17 + 8) = 0uLL;
      *(void *)int v17 = 0;
      uint64_t v19 = (_OWORD *)(v9 + v13 - 584);
      long long v20 = *(_OWORD *)(v11 + v13 - 584);
      long long v21 = *(_OWORD *)(v11 + v13 - 568);
      *(_OWORD *)((char *)v19 + 28) = *(_OWORD *)(v11 + v13 - 556);
      uint64_t v22 = v9 + v13 - 536;
      uint64_t v23 = v11 + v13 - 536;
      *uint64_t v19 = v20;
      v19[1] = v21;
      *(void *)uint64_t v22 = 0;
      *(_OWORD *)(v22 + 8) = 0uLL;
      *(_OWORD *)uint64_t v22 = *(_OWORD *)v23;
      *(void *)(v9 + v13 - 520) = *(void *)(v11 + v13 - 520);
      *(void *)(v23 + 16) = 0;
      uint64_t v24 = v9 + v13 - 512;
      uint64_t v25 = v11 + v13 - 512;
      *(_OWORD *)uint64_t v23 = 0uLL;
      long long v26 = *(_OWORD *)v25;
      *(void *)(v24 + 16) = *(void *)(v11 + v13 - 496);
      *(_OWORD *)uint64_t v24 = v26;
      *(void *)(v25 + 8) = 0;
      *(void *)(v25 + 16) = 0;
      *(void *)uint64_t v25 = 0;
      uint64_t v27 = v9 + v13 - 488;
      uint64_t v28 = v11 + v13 - 488;
      long long v29 = *(_OWORD *)v28;
      *(void *)(v27 + 16) = *(void *)(v11 + v13 - 472);
      *(_OWORD *)uint64_t v27 = v29;
      *(void *)(v28 + 8) = 0;
      *(void *)(v28 + 16) = 0;
      uint64_t v30 = v9 + v13 - 464;
      *(void *)uint64_t v28 = 0;
      *(_OWORD *)uint64_t v30 = *(_OWORD *)(v11 + v13 - 464);
      long long v32 = *(_OWORD *)(v11 + v13 - 432);
      long long v31 = *(_OWORD *)(v11 + v13 - 416);
      long long v33 = *(_OWORD *)(v11 + v13 - 448);
      *(_DWORD *)(v30 + 64) = *(_DWORD *)(v11 + v13 - 400);
      *(_OWORD *)(v30 + 32) = v32;
      *(_OWORD *)(v30 + 48) = v31;
      *(_OWORD *)(v30 + 16) = v33;
      LODWORD(v30) = *(_DWORD *)(v11 + v13 - 396);
      unint64_t v34 = (void *)(v9 + v13 - 392);
      uint64_t v35 = v11 + v13 - 392;
      v34[1] = 0;
      v34[2] = 0;
      *unint64_t v34 = 0;
      *(_DWORD *)(v9 + v13 - 396) = v30;
      *(_OWORD *)unint64_t v34 = *(_OWORD *)v35;
      *(void *)(v9 + v13 - 376) = *(void *)(v11 + v13 - 376);
      *(void *)(v11 + v13 - 384) = 0;
      *(void *)uint64_t v35 = 0;
      uint64_t v36 = v9 + v13 - 368;
      *(void *)(v35 + 16) = 0;
      uint64_t v37 = v11 + v13 - 368;
      long long v38 = *(_OWORD *)v37;
      *(void *)(v36 + 16) = *(void *)(v11 + v13 - 352);
      *(_OWORD *)uint64_t v36 = v38;
      *(void *)(v37 + 8) = 0;
      *(void *)(v37 + 16) = 0;
      uint64_t v39 = v9 + v13 - 344;
      uint64_t v40 = v11 + v13 - 344;
      long long v41 = *(_OWORD *)v40;
      uint64_t v42 = *(void *)(v11 + v13 - 328);
      *(void *)uint64_t v37 = 0;
      *(void *)(v39 + 16) = v42;
      *(_OWORD *)uint64_t v39 = v41;
      *(void *)(v40 + 8) = 0;
      *(void *)(v40 + 16) = 0;
      uint64_t v43 = v9 + v13 - 320;
      *(void *)uint64_t v40 = 0;
      uint64_t v44 = v11 + v13 - 320;
      long long v45 = *(_OWORD *)v44;
      *(void *)(v43 + 16) = *(void *)(v11 + v13 - 304);
      *(_OWORD *)uint64_t v43 = v45;
      *(void *)(v11 + v13 - 312) = 0;
      *(void *)uint64_t v44 = 0;
      *(void *)(v44 + 16) = 0;
      uint64_t v46 = v9 + v13 - 296;
      uint64_t v47 = v11 + v13 - 296;
      long long v48 = *(_OWORD *)v47;
      *(void *)(v46 + 16) = *(void *)(v11 + v13 - 280);
      *(_OWORD *)uint64_t v46 = v48;
      *(void *)(v11 + v13 - 288) = 0;
      *(void *)uint64_t v47 = 0;
      *(void *)(v47 + 16) = 0;
      uint64_t v49 = (long long *)(v11 + v13 - 272);
      long long v50 = *v49;
      *(void *)(v14 - 256) = *(void *)(v11 + v13 - 256);
      *(_OWORD *)(v9 + v13 - 272) = v50;
      *(void *)(v11 + v13 - 264) = 0;
      *(void *)uint64_t v49 = 0;
      *(void *)(v16 - 256) = 0;
      *(void *)(v14 - 248) = 0;
      *(void *)(v14 - 240) = 0;
      *(void *)(v14 - 232) = 0;
      *(_OWORD *)(v14 - 248) = *(_OWORD *)(v11 + v13 - 248);
      *(void *)(v14 - 232) = *(void *)(v11 + v13 - 232);
      *(void *)(v16 - 248) = 0;
      *(void *)(v16 - 240) = 0;
      *(void *)(v16 - 232) = 0;
      *(void *)(v14 - 2++*(_DWORD *)(result + 24) = 0;
      *(void *)(v14 - 216) = 0;
      *(void *)(v14 - 208) = 0;
      *(_OWORD *)(v14 - 2++*(_DWORD *)(result + 24) = *(_OWORD *)(v11 + v13 - 224);
      *(void *)(v14 - 208) = *(void *)(v11 + v13 - 208);
      *(void *)(v16 - 2++*(_DWORD *)(result + 24) = 0;
      *(void *)(v16 - 216) = 0;
      *(void *)(v16 - 208) = 0;
      *(void *)(v14 - 200) = 0;
      *(void *)(v14 - 192) = 0;
      *(void *)(v14 - 184) = 0;
      *(_OWORD *)(v14 - 200) = *(_OWORD *)(v11 + v13 - 200);
      *(void *)(v14 - 184) = *(void *)(v11 + v13 - 184);
      *(void *)(v16 - 200) = 0;
      *(void *)(v16 - 192) = 0;
      *(void *)(v16 - 184) = 0;
      *(void *)(v14 - 176) = 0;
      *(void *)(v14 - 168) = 0;
      *(void *)(v14 - 160) = 0;
      *(_OWORD *)(v14 - 176) = *(_OWORD *)(v11 + v13 - 176);
      *(void *)(v14 - 160) = *(void *)(v11 + v13 - 160);
      *(void *)(v16 - 176) = 0;
      *(void *)(v16 - 168) = 0;
      *(void *)(v16 - 160) = 0;
      long long v51 = *(_OWORD *)(v11 + v13 - 152);
      *(_OWORD *)(v14 - 136) = *(_OWORD *)(v11 + v13 - 136);
      *(_OWORD *)(v14 - 152) = v51;
      *(void *)(v14 - 112) = 0;
      *(void *)(v14 - 104) = 0;
      *(void *)(v14 - 120) = 0;
      *(_OWORD *)(v14 - 120) = *(_OWORD *)(v11 + v13 - 120);
      *(void *)(v14 - 104) = *(void *)(v11 + v13 - 104);
      *(void *)(v16 - 120) = 0;
      *(void *)(v16 - 112) = 0;
      *(void *)(v16 - 104) = 0;
      *(void *)(v14 - 96) = 0;
      *(void *)(v14 - 88) = 0;
      *(void *)(v14 - 80) = 0;
      *(_OWORD *)(v14 - 96) = *(_OWORD *)(v11 + v13 - 96);
      *(void *)(v14 - 80) = *(void *)(v11 + v13 - 80);
      *(void *)(v16 - 96) = 0;
      *(void *)(v16 - 88) = 0;
      *(void *)(v16 - 80) = 0;
      *(void *)(v14 - 72) = 0;
      *(void *)(v14 - 64) = 0;
      *(void *)(v14 - 56) = 0;
      *(_OWORD *)(v14 - 72) = *(_OWORD *)(v11 + v13 - 72);
      *(void *)(v14 - 56) = *(void *)(v11 + v13 - 56);
      *(void *)(v16 - 72) = 0;
      *(void *)(v16 - 64) = 0;
      *(void *)(v16 - 56) = 0;
      *(void *)(v14 - 48) = 0;
      *(void *)(v14 - 40) = 0;
      *(void *)(v14 - 32) = 0;
      *(_OWORD *)(v14 - 48) = *(_OWORD *)(v11 + v13 - 48);
      *(void *)(v14 - 32) = *(void *)(v11 + v13 - 32);
      *(void *)(v16 - 48) = 0;
      *(void *)(v16 - 40) = 0;
      *(void *)(v16 - 32) = 0;
      long long v52 = *(_OWORD *)(v11 + v13 - 24);
      *(_DWORD *)(v14 - 8) = *(_DWORD *)(v11 + v13 - 8);
      *(_OWORD *)(v14 - ++*(_DWORD *)(result + 24) = v52;
      v13 -= 608;
    }
    while (v11 + v13 != v12);
    v9 += v13;
    int64x2_t v53 = *a1;
    uint64_t v10 = v57.i64[1];
  }
  a1->i64[0] = v9;
  a1->i64[1] = v10;
  int64x2_t v57 = v53;
  unint64_t v54 = a1[1].u64[0];
  a1[1].i64[0] = v58;
  unint64_t v58 = v54;
  unint64_t v56 = v53.i64[0];
  std::__split_buffer<UnitFeature>::~__split_buffer((uint64_t)&v56);
  return v10;
}

void sub_20D431EA8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<UnitFeature>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void Agglomerate::ItemHolder<std::shared_ptr<UnitSelectionFeature>>::~ItemHolder(void *a1)
{
  *a1 = off_26C2065F8;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  JUMPOUT(0x2105595E0);
}

void *Agglomerate::ItemHolder<std::shared_ptr<UnitSelectionFeature>>::~ItemHolder(void *a1)
{
  *a1 = off_26C2065F8;
  unint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

uint64_t std::__split_buffer<UnitFeature>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 608;
    UnitFeature::~UnitFeature((UnitFeature *)(i - 608));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__shared_ptr_emplace<UnitSelectionFeature>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 24);
  unint64_t v2 = (void **)(a1 + 48);
  std::vector<Prompt>::__destroy_vector::operator()[abi:ne180100](&v2);
  unint64_t v2 = v1;
  std::vector<UnitFeature>::__destroy_vector::operator()[abi:ne180100](&v2);
}

void std::__shared_ptr_emplace<UnitSelectionFeature>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C216FD8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<UnitSelectionFeature>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C216FD8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void UnitSelectionFeatureStream::~UnitSelectionFeatureStream(UnitSelectionFeatureStream *this)
{
  UnitSelectionFeatureStream::~UnitSelectionFeatureStream(this);
  JUMPOUT(0x2105595E0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t vars8;

  *(void *)this = off_26C2044E0;
  unint64_t v2 = (std::__shared_weak_count *)*((void *)this + 48);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*((char *)this + 375) < 0) {
    operator delete(*((void **)this + 44));
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 43);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 41);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  unint64_t v5 = (std::__shared_weak_count *)*((void *)this + 39);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  int v6 = (std::__shared_weak_count *)*((void *)this + 37);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  unint64_t v7 = (std::__shared_weak_count *)*((void *)this + 35);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  Module::~Module(this);
}

void Agglomerate::ItemHolder<std::shared_ptr<RNNOutputDecoder>>::~ItemHolder(void *a1)
{
  *a1 = off_26C2064F8;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  JUMPOUT(0x2105595E0);
}

void *Agglomerate::ItemHolder<std::shared_ptr<RNNOutputDecoder>>::~ItemHolder(void *a1)
{
  *a1 = off_26C2064F8;
  unint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void Agglomerate::ItemHolder<std::shared_ptr<MDNOutputDecoder>>::~ItemHolder(void *a1)
{
  *a1 = off_26C2064D8;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  JUMPOUT(0x2105595E0);
}

void *Agglomerate::ItemHolder<std::shared_ptr<MDNOutputDecoder>>::~ItemHolder(void *a1)
{
  *a1 = off_26C2064D8;
  unint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void Agglomerate::ItemHolder<std::shared_ptr<NNInputEncoder>>::~ItemHolder(void *a1)
{
  *a1 = off_26C206418;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  JUMPOUT(0x2105595E0);
}

void *Agglomerate::ItemHolder<std::shared_ptr<NNInputEncoder>>::~ItemHolder(void *a1)
{
  *a1 = off_26C206418;
  unint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void UnitSelectionFeatureStreamPersistentModule::~UnitSelectionFeatureStreamPersistentModule(void **this)
{
  *this = off_26C205708;
  if (*((char *)this + 399) < 0) {
    operator delete(this[47]);
  }
  unint64_t v2 = (std::__shared_weak_count *)this[46];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)this[44];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)this[42];
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  unint64_t v5 = (std::__shared_weak_count *)this[40];
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  int v6 = (std::__shared_weak_count *)this[38];
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  PersistentModule::~PersistentModule(this);
  JUMPOUT(0x2105595E0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t vars8;

  *this = off_26C205708;
  if (*((char *)this + 399) < 0) {
    operator delete(this[47]);
  }
  unint64_t v2 = (std::__shared_weak_count *)this[46];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)this[44];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)this[42];
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  unint64_t v5 = (std::__shared_weak_count *)this[40];
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  int v6 = (std::__shared_weak_count *)this[38];
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  PersistentModule::~PersistentModule(this);
}

void UnitSelectionFeatureStream::set_mdn(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(a3 + 8), 1uLL, memory_order_relaxed);
  }
  int v6 = (std::__shared_weak_count *)a1[35];
  a1[34] = a2;
  a1[35] = a3;
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  uint64_t v8 = *a4;
  uint64_t v7 = a4[1];
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = (std::__shared_weak_count *)a1[41];
  a1[40] = v8;
  a1[41] = v7;
  if (v9)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
}

void UnitSelectionFeatureStream::set_rnn(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(a3 + 8), 1uLL, memory_order_relaxed);
  }
  int v6 = (std::__shared_weak_count *)a1[37];
  a1[36] = a2;
  a1[37] = a3;
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  uint64_t v8 = *a4;
  uint64_t v7 = a4[1];
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = (std::__shared_weak_count *)a1[43];
  a1[42] = v8;
  a1[43] = v7;
  if (v9)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
}

void PLSDummyHandler::~PLSDummyHandler(PLSDummyHandler *this)
{
}

uint64_t PLSDummyHandler::add_pls_dictionary()
{
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  v0 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl(&dword_20CD80000, v0, OS_LOG_TYPE_ERROR, "Frontend has no PLS handler", v3, 2u);
  }
  return Diagnostics::log(3, "Frontend has no PLS handler", v1);
}

uint64_t std::__shared_ptr_emplace<PLSDummyHandler>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 8))();
}

void std::__shared_ptr_emplace<PLSDummyHandler>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C2160C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<PLSDummyHandler>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C2160C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t MergeAlignment::requires_two_operands(MergeAlignment *this)
{
  return 1;
}

void DiagRefineMergeAlignment::apply(uint64_t a1@<X0>, uint32x2_t *a2@<X1>, uint32x2_t *a3@<X2>, void ***a4@<X8>)
{
  *(void *)(a1 + ++*(_DWORD *)(result + 24) = 0;
  *(void *)(a1 + 8) = 0;
  int32x2_t v53 = (int32x2_t)vmax_u32(*a2, *a3);
  std::vector<BOOL>::resize(a1 + 16, vmul_lane_s32(v53, v53, 1).u32[0], 0);
  *(int32x2_t *)(a1 + 8) = v53;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 136) = 0;
  int32x2_t v54 = (int32x2_t)vmax_u32(*a2, *a3);
  std::vector<BOOL>::resize(a1 + 48, vmul_lane_s32(v54, v54, 1).u32[0], 0);
  *(int32x2_t *)(a1 + 40) = v54;
  int32x2_t v55 = (int32x2_t)vmax_u32(*a2, *a3);
  std::vector<BOOL>::resize(a1 + 80, vmul_lane_s32(v55, v55, 1).u32[0], 0);
  *(int32x2_t *)(a1 + 72) = v55;
  std::vector<BOOL>::resize(a1 + 104, *(unsigned int *)(a1 + 8), 0);
  std::vector<BOOL>::resize(a1 + 128, *(unsigned int *)(a1 + 12), 0);
  unsigned int v8 = *(_DWORD *)(a1 + 40);
  if (v8)
  {
    unsigned int v9 = 0;
    unsigned int v10 = *(_DWORD *)(a1 + 44);
    unsigned int v11 = v10;
    do
    {
      if (v11)
      {
        unsigned int v12 = 0;
        do
        {
          if (MergeAlignment::safe((unsigned int *)a2, v9, v12)) {
            int v13 = 1;
          }
          else {
            int v13 = MergeAlignment::safe((unsigned int *)a3, v9, v12);
          }
          unsigned int v14 = *(_DWORD *)(a1 + 72);
          unsigned int v15 = *(_DWORD *)(a1 + 76);
          unsigned int v16 = v14 - 1;
          if (v14 > v9) {
            unsigned int v16 = v9;
          }
          if (v15 <= v12) {
            unsigned int v17 = v15 - 1;
          }
          else {
            unsigned int v17 = v12;
          }
          unint64_t v18 = v16 + v17 * v14;
          uint64_t v19 = *(void *)(a1 + 80);
          unint64_t v20 = v18 >> 6;
          uint64_t v21 = 1 << v18;
          if (v13) {
            uint64_t v22 = *(void *)(v19 + 8 * v20) | v21;
          }
          else {
            uint64_t v22 = *(void *)(v19 + 8 * v20) & ~v21;
          }
          *(void *)(v19 + 8 * v20) = v22;
          int v23 = MergeAlignment::safe((unsigned int *)a2, v9, v12);
          if (v23) {
            int v23 = MergeAlignment::safe((unsigned int *)a3, v9, v12);
          }
          unsigned int v24 = *(_DWORD *)(a1 + 40);
          unsigned int v25 = v24 - 1;
          if (v24 > v9) {
            unsigned int v25 = v9;
          }
          unsigned int v26 = v10 - 1;
          if (v10 > v12) {
            unsigned int v26 = v12;
          }
          unint64_t v27 = v25 + v26 * v24;
          uint64_t v28 = *(void *)(a1 + 48);
          unint64_t v29 = v27 >> 6;
          uint64_t v30 = 1 << v27;
          if (v23) {
            uint64_t v31 = *(void *)(v28 + 8 * v29) | v30;
          }
          else {
            uint64_t v31 = *(void *)(v28 + 8 * v29) & ~v30;
          }
          *(void *)(v28 + 8 * v29) = v31;
          if ((v31 & v30) != 0)
          {
            DiagRefineMergeAlignment::align(a1, v9, v12);
            unsigned int v10 = *(_DWORD *)(a1 + 44);
          }
          ++v12;
        }
        while (v12 < v10);
        unsigned int v8 = *(_DWORD *)(a1 + 40);
        unsigned int v11 = v10;
      }
      ++v9;
    }
    while (v9 < v8);
  }
  DiagRefineMergeAlignment::grow(a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t))DiagRefineMergeAlignment::koehn_aligned, 0, 0, (unsigned int *)(a1 + 72));
  DiagRefineMergeAlignment::grow(a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t))DiagRefineMergeAlignment::is_one_or_both_unaligned, 0, 1, (unsigned int *)a2);
  DiagRefineMergeAlignment::grow(a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t))DiagRefineMergeAlignment::is_one_or_both_unaligned, 0, 1, (unsigned int *)a3);
  long long v32 = (void **)operator new(0x30uLL);
  v32[1] = 0;
  v32[2] = 0;
  *long long v32 = off_26C219AB8;
  v32[4] = 0;
  v32[5] = 0;
  a4[1] = v32;
  v32[3] = 0;
  *a4 = v32 + 3;
  unint64_t v33 = *(unsigned int *)(a1 + 8);
  if (v33)
  {
    unint64_t v34 = 0;
    unint64_t v35 = *(unsigned int *)(a1 + 12);
    unint64_t v36 = v35;
    do
    {
      if (v36)
      {
        unint64_t v37 = 0;
        do
        {
          unint64_t v38 = *(unsigned int *)(a1 + 8);
          int v39 = v38 - 1;
          if (v34 < v38) {
            int v39 = v34;
          }
          if (((*(void *)(*(void *)(a1 + 16)
                           + (((unint64_t)(v39 + v38 * v37) >> 3) & 0x1FFFFFF8)) >> (v39 + v38 * v37)) & 1) != 0)
          {
            uint64_t v40 = *a4;
            long long v41 = (uint64_t *)(*a4)[1];
            unint64_t v42 = (unint64_t)(*a4)[2];
            if ((unint64_t)v41 >= v42)
            {
              uint64_t v44 = ((char *)v41 - (unsigned char *)*v40) >> 3;
              if ((unint64_t)(v44 + 1) >> 61) {
                std::vector<int>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v45 = v42 - (void)*v40;
              uint64_t v46 = v45 >> 2;
              if (v45 >> 2 <= (unint64_t)(v44 + 1)) {
                uint64_t v46 = v44 + 1;
              }
              if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v47 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v47 = v46;
              }
              if (v47) {
                long long v48 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(*a4 + 2), v47);
              }
              else {
                long long v48 = 0;
              }
              uint64_t v49 = &v48[8 * v44];
              *(void *)uint64_t v49 = v34 | (v37 << 32);
              uint64_t v43 = v49 + 8;
              long long v51 = (char *)*v40;
              long long v50 = (char *)v40[1];
              if (v50 != *v40)
              {
                do
                {
                  uint64_t v52 = *((void *)v50 - 1);
                  v50 -= 8;
                  *((void *)v49 - 1) = v52;
                  v49 -= 8;
                }
                while (v50 != v51);
                long long v50 = (char *)*v40;
              }
              *uint64_t v40 = v49;
              v40[1] = v43;
              v40[2] = &v48[8 * v47];
              if (v50) {
                operator delete(v50);
              }
            }
            else
            {
              *long long v41 = v34 | (v37 << 32);
              uint64_t v43 = v41 + 1;
            }
            v40[1] = v43;
            unint64_t v35 = *(unsigned int *)(a1 + 12);
          }
          ++v37;
        }
        while (v37 < v35);
        unint64_t v33 = *(unsigned int *)(a1 + 8);
        unint64_t v36 = v35;
      }
      ++v34;
    }
    while (v34 < v33);
  }
}

void sub_20D432B70(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

void DiagRefineMergeAlignment::grow(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t), uint64_t a3, int a4, unsigned int *a5)
{
  if (a4)
  {
    unsigned int v9 = *a5;
    if (*a5)
    {
      uint64_t v10 = 0;
      unsigned int v11 = (void *)(a1 + (a3 >> 1));
      unsigned int v12 = a5[1];
      do
      {
        if (v12)
        {
          uint64_t v13 = 0;
          do
          {
            int v14 = *a5 - 1;
            if (*a5 > v10) {
              int v14 = v10;
            }
            if (((*(void *)(*((void *)a5 + 1)
                             + (((unint64_t)(v14 + *a5 * v13) >> 3) & 0x1FFFFFF8)) >> (v14 + *a5 * v13)) & 1) != 0)
            {
              unsigned int v15 = *(_DWORD *)(a1 + 8);
              unsigned int v16 = *(_DWORD *)(a1 + 12);
              unsigned int v17 = v15 - 1;
              if (v15 > v10) {
                unsigned int v17 = v10;
              }
              if (v16 <= v13) {
                unsigned int v18 = v16 - 1;
              }
              else {
                unsigned int v18 = v13;
              }
              if (((*(void *)(*(void *)(a1 + 16) + (((unint64_t)(v17 + v18 * v15) >> 3) & 0x1FFFFFF8)) >> (v17 + v18 * v15)) & 1) == 0)
              {
                if (a3) {
                  int v19 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*v11 + a2))(a1 + (a3 >> 1), v10, v13);
                }
                else {
                  int v19 = a2(a1 + (a3 >> 1), v10, v13);
                }
                if (v19) {
                  DiagRefineMergeAlignment::align(a1, v10, v13);
                }
              }
            }
            uint64_t v13 = (v13 + 1);
            unsigned int v12 = a5[1];
          }
          while (v13 < v12);
          unsigned int v9 = *a5;
        }
        uint64_t v10 = (v10 + 1);
      }
      while (v10 < v9);
    }
  }
  else
  {
    int32x2_t v53 = 0;
    uint64_t v54 = 0;
    uint64_t v52 = &v53;
    unint64_t v20 = *a5;
    if (v20)
    {
      unint64_t v21 = 0;
      unint64_t v22 = a5[1];
      unint64_t v23 = v22;
      do
      {
        if (v23)
        {
          uint64_t v24 = 0;
          unint64_t v25 = 0;
          do
          {
            unint64_t v26 = *a5;
            int v27 = v26 - 1;
            if (v21 < v26) {
              int v27 = v21;
            }
            if (((*(void *)(*((void *)a5 + 1)
                             + (((unint64_t)(v27 + v26 * v25) >> 3) & 0x1FFFFFF8)) >> (v27 + v26 * v25)) & 1) != 0)
            {
              unint64_t v28 = *(unsigned int *)(a1 + 8);
              unint64_t v29 = *(unsigned int *)(a1 + 12);
              int v30 = v28 - 1;
              if (v21 < v28) {
                int v30 = v21;
              }
              if (v25 >= v29) {
                int v31 = v29 - 1;
              }
              else {
                int v31 = v25;
              }
              if (((*(void *)(*(void *)(a1 + 16)
                               + (((unint64_t)(v30 + v31 * v28) >> 3) & 0x1FFFFFF8)) >> (v30 + v31 * v28)) & 1) == 0)
              {
                std::__tree<std::pair<int,int>>::__emplace_unique_key_args<std::pair<int,int>,std::pair<int,int>>((uint64_t *)&v52, v21, v25, v24 | v21);
                unint64_t v22 = a5[1];
              }
            }
            ++v25;
            v24 += 0x100000000;
          }
          while (v25 < v22);
          unint64_t v20 = *a5;
          unint64_t v23 = v22;
        }
        ++v21;
      }
      while (v21 < v20);
      if (v54)
      {
        do
        {
          v51[0] = 0;
          v51[1] = 0;
          long long v50 = v51;
          uint64_t v32 = (uint64_t)v52;
          if (v52 == &v53)
          {
            char v33 = 0;
          }
          else
          {
            char v33 = 0;
            do
            {
              if (a3) {
                int v34 = (*(uint64_t (**)(uint64_t, void, void))(*(void *)(a1 + (a3 >> 1)) + a2))(a1 + (a3 >> 1), *(unsigned int *)(v32 + 28), *(unsigned int *)(v32 + 32));
              }
              else {
                int v34 = a2(a1 + (a3 >> 1), *(unsigned int *)(v32 + 28), *(unsigned int *)(v32 + 32));
              }
              if (v34)
              {
                DiagRefineMergeAlignment::align(a1, *(_DWORD *)(v32 + 28), *(_DWORD *)(v32 + 32));
                std::__tree<std::pair<int,int>>::__emplace_unique_key_args<std::pair<int,int>,std::pair<int,int>>((uint64_t *)&v50, *(void *)(v32 + 28), HIDWORD(*(void *)(v32 + 28)), *(void *)(v32 + 28));
                char v33 = 1;
              }
              unint64_t v35 = *(uint64_t **)(v32 + 8);
              if (v35)
              {
                do
                {
                  unint64_t v36 = (uint64_t **)v35;
                  unint64_t v35 = (uint64_t *)*v35;
                }
                while (v35);
              }
              else
              {
                do
                {
                  unint64_t v36 = *(uint64_t ***)(v32 + 16);
                  BOOL v37 = *v36 == (uint64_t *)v32;
                  uint64_t v32 = (uint64_t)v36;
                }
                while (!v37);
              }
              uint64_t v32 = (uint64_t)v36;
            }
            while (v36 != &v53);
            uint64_t v38 = (uint64_t)v50;
            if (v50 != v51)
            {
              do
              {
                if (v53)
                {
                  int v40 = *(_DWORD *)(v38 + 28);
                  int v39 = *(_DWORD *)(v38 + 32);
                  long long v41 = &v53;
                  unint64_t v42 = v53;
                  do
                  {
                    int v43 = *((_DWORD *)v42 + 7);
                    if (v43 >= v40)
                    {
                      if (v40 >= v43)
                      {
                        if (*((_DWORD *)v42 + 8) < v39) {
                          ++v42;
                        }
                        else {
                          long long v41 = (uint64_t **)v42;
                        }
                      }
                      else
                      {
                        long long v41 = (uint64_t **)v42;
                      }
                    }
                    else
                    {
                      ++v42;
                    }
                    unint64_t v42 = (uint64_t *)*v42;
                  }
                  while (v42);
                  if (v41 != &v53)
                  {
                    int v44 = *((_DWORD *)v41 + 7);
                    if (v40 >= v44 && (v44 < v40 || v39 >= *((_DWORD *)v41 + 8)))
                    {
                      uint64_t v45 = v41[1];
                      uint64_t v46 = v41;
                      if (v45)
                      {
                        do
                        {
                          unint64_t v47 = (uint64_t **)v45;
                          uint64_t v45 = (uint64_t *)*v45;
                        }
                        while (v45);
                      }
                      else
                      {
                        do
                        {
                          unint64_t v47 = (uint64_t **)v46[2];
                          BOOL v37 = *v47 == (uint64_t *)v46;
                          uint64_t v46 = v47;
                        }
                        while (!v37);
                      }
                      if (v52 == v41) {
                        uint64_t v52 = v47;
                      }
                      --v54;
                      std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v53, (uint64_t *)v41);
                      operator delete(v41);
                    }
                  }
                }
                long long v48 = *(void **)(v38 + 8);
                if (v48)
                {
                  do
                  {
                    uint64_t v49 = (void **)v48;
                    long long v48 = (void *)*v48;
                  }
                  while (v48);
                }
                else
                {
                  do
                  {
                    uint64_t v49 = *(void ***)(v38 + 16);
                    BOOL v37 = *v49 == (void *)v38;
                    uint64_t v38 = (uint64_t)v49;
                  }
                  while (!v37);
                }
                uint64_t v38 = (uint64_t)v49;
              }
              while (v49 != v51);
            }
          }
          std::__tree<std::__value_type<unsigned long,std::pair<unsigned long,unsigned long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::pair<unsigned long,unsigned long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::pair<unsigned long,unsigned long>>>>::destroy(v51[0]);
        }
        while ((v33 & 1) != 0);
      }
    }
    std::__tree<std::__value_type<unsigned long,std::pair<unsigned long,unsigned long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::pair<unsigned long,unsigned long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::pair<unsigned long,unsigned long>>>>::destroy(v53);
  }
}

void sub_20D432FD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13)
{
}

void std::__shared_ptr_emplace<std::vector<std::pair<int,int>>>::__on_zero_shared(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
}

void std::__shared_ptr_emplace<std::vector<std::pair<int,int>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C219AB8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<std::vector<std::pair<int,int>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C219AB8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

BOOL DiagRefineMergeAlignment::is_one_or_both_unaligned(DiagRefineMergeAlignment *this, int a2, int a3)
{
  return ((*(void *)(*((void *)this + 13) + (((unint64_t)a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> a2) & 1) == 0
      || ((*(void *)(*((void *)this + 16) + (((unint64_t)a3 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> a3) & 1) == 0;
}

uint64_t DiagRefineMergeAlignment::align(uint64_t this, unsigned int a2, unsigned int a3)
{
  unsigned int v3 = *(_DWORD *)(this + 8);
  unsigned int v4 = *(_DWORD *)(this + 12);
  unsigned int v5 = v3 - 1;
  if (v3 > a2) {
    unsigned int v5 = a2;
  }
  if (v4 <= a3) {
    unsigned int v6 = v4 - 1;
  }
  else {
    unsigned int v6 = a3;
  }
  *(void *)(*(void *)(this + 16) + (((unint64_t)(v5 + v6 * v3) >> 3) & 0x1FFFFFF8)) |= 1 << (v5 + v6 * v3);
  *(void *)(*(void *)(this + 104) + (((unint64_t)a2 >> 3) & 0x1FFFFFF8)) |= 1 << a2;
  *(void *)(*(void *)(this + 128) + (((unint64_t)a3 >> 3) & 0x1FFFFFF8)) |= 1 << a3;
  return this;
}

uint64_t *std::__tree<std::pair<int,int>>::__emplace_unique_key_args<std::pair<int,int>,std::pair<int,int>>(uint64_t *result, int a2, int a3, uint64_t a4)
{
  unsigned int v5 = result;
  uint64_t v7 = result + 1;
  uint64_t v6 = result[1];
  if (v6)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v7 = (uint64_t *)v6;
        int v8 = *(_DWORD *)(v6 + 28);
        if (v8 <= a2) {
          break;
        }
LABEL_5:
        uint64_t v6 = *v7;
        uint64_t v10 = (uint64_t **)v7;
        if (!*v7) {
          goto LABEL_11;
        }
      }
      if (v8 >= a2)
      {
        int v9 = *((_DWORD *)v7 + 8);
        if (v9 > a3) {
          goto LABEL_5;
        }
        if (v9 >= a3) {
          return result;
        }
      }
      uint64_t v10 = (uint64_t **)(v7 + 1);
      uint64_t v6 = v7[1];
      if (!v6) {
        goto LABEL_11;
      }
    }
  }
  uint64_t v10 = (uint64_t **)(result + 1);
LABEL_11:
  unsigned int v11 = (uint64_t *)operator new(0x28uLL);
  *(uint64_t *)((char *)v11 + 28) = a4;
  uint64_t *v11 = 0;
  v11[1] = 0;
  v11[2] = (uint64_t)v7;
  *uint64_t v10 = v11;
  uint64_t v12 = *(void *)*v5;
  if (v12)
  {
    *unsigned int v5 = v12;
    uint64_t v13 = *v10;
  }
  else
  {
    uint64_t v13 = v11;
  }
  uint64_t result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v5[1], v13);
  ++v5[2];
  return result;
}

uint64_t DiagRefineMergeAlignment::koehn_aligned(DiagRefineMergeAlignment *this, int a2, int a3)
{
  if (((*(void *)(*((void *)this + 13) + (((unint64_t)a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> a2) & 1) != 0
    && ((*(void *)(*((void *)this + 16) + (((unint64_t)a3 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
  {
    return 0;
  }
  uint64_t v6 = *((void *)this + 19);
  uint64_t v5 = *((void *)this + 20);
  uint64_t v7 = v5 - v6;
  if (v5 == v6) {
    return 0;
  }
  unint64_t v8 = 0;
  int v9 = (unsigned int *)((char *)this + 8);
  unint64_t v10 = v7 >> 3;
  unsigned int v11 = 1;
  do
  {
    uint64_t result = MergeAlignment::safe(v9, *(_DWORD *)(v6 + 8 * v8) + a2, *(_DWORD *)(v6 + 8 * v8 + 4) + a3);
    unint64_t v8 = v11++;
    if (result) {
      BOOL v13 = 0;
    }
    else {
      BOOL v13 = v10 > v8;
    }
  }
  while (v13);
  return result;
}

uint64_t MergeAlignment::safe(unsigned int *a1, unsigned int a2, unsigned int a3)
{
  if (((a3 | a2) & 0x80000000) != 0) {
    return 0;
  }
  unsigned int v3 = *a1;
  if ((int)*a1 <= (int)a2) {
    return 0;
  }
  unsigned int v4 = a1[1];
  if ((int)v4 <= (int)a3) {
    return 0;
  }
  unsigned int v5 = v3 - 1;
  if (v3 > a2) {
    unsigned int v5 = a2;
  }
  if (v4 <= a3) {
    unsigned int v6 = v4 - 1;
  }
  else {
    unsigned int v6 = a3;
  }
  return (*(void *)(*((void *)a1 + 1) + (((unint64_t)(v5 + v6 * v3) >> 3) & 0x1FFFFFF8)) >> (v5 + v6 * v3)) & 1;
}

uint64_t FastAlignment::report_error(FastAlignment *this, uint64_t a2, const char *a3)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  if (a2 && a2 != 101)
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    unsigned int v6 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
    {
      uint64_t v7 = (sqlite3 *)*((void *)this + 4);
      if (v7) {
        unint64_t v8 = sqlite3_errmsg(v7);
      }
      else {
        unint64_t v8 = sqlite3_errstr(a2);
      }
      *(_DWORD *)int buf = 136315394;
      int v14 = a3;
      __int16 v15 = 2080;
      unsigned int v16 = v8;
      _os_log_impl(&dword_20CD80000, v6, OS_LOG_TYPE_ERROR, "FastAlignment: Failed to %s: %s", buf, 0x16u);
    }
    int v9 = (sqlite3 *)*((void *)this + 4);
    if (v9) {
      unint64_t v10 = sqlite3_errmsg(v9);
    }
    else {
      unint64_t v10 = sqlite3_errstr(a2);
    }
    Diagnostics::log(3, "FastAlignment: Failed to %s: %s", v11, a3, v10);
  }
  return a2;
}

double FastAlignment::get_prob(FastAlignment *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v7 = 40;
  if (a4) {
    uint64_t v7 = 48;
  }
  unint64_t v8 = *(sqlite3_stmt **)((char *)a1 + v7);
  if (a4) {
    int v9 = 2;
  }
  else {
    int v9 = 1;
  }
  if (a4) {
    int v10 = 1;
  }
  else {
    int v10 = 2;
  }
  sqlite3_clear_bindings(v8);
  char v11 = *(unsigned char *)(a2 + 23);
  if (v11 >= 0) {
    uint64_t v12 = (const char *)a2;
  }
  else {
    uint64_t v12 = *(const char **)a2;
  }
  if (v11 >= 0) {
    int v13 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    int v13 = *(_DWORD *)(a2 + 8);
  }
  uint64_t v14 = sqlite3_bind_text(v8, v9, v12, v13, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
  FastAlignment::report_error(a1, v14, "bind src");
  char v15 = *(unsigned char *)(a3 + 23);
  if (v15 >= 0) {
    unsigned int v16 = (const char *)a3;
  }
  else {
    unsigned int v16 = *(const char **)a3;
  }
  if (v15 >= 0) {
    int v17 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    int v17 = *(_DWORD *)(a3 + 8);
  }
  uint64_t v18 = sqlite3_bind_text(v8, v10, v16, v17, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
  FastAlignment::report_error(a1, v18, "bind tgt");
  if (sqlite3_step(v8) == 100) {
    double v19 = sqlite3_column_double(v8, 0);
  }
  else {
    double v19 = 0.000000001;
  }
  sqlite3_reset(v8);
  return v19;
}

uint64_t FastAlignment::shift_spaces(uint64_t result, int *a2, int a3, int *a4, uint64_t *a5)
{
  uint64_t v5 = *((unsigned __int8 *)a5 + 23);
  if ((v5 & 0x80u) != 0) {
    uint64_t v5 = a5[1];
  }
  if (v5)
  {
    int v9 = result;
    if ((int)result >= 1)
    {
      int v11 = *a2 + result;
      if (v11 < a3)
      {
        uint64_t v12 = MEMORY[0x263EF8318];
        do
        {
          if (*((char *)a5 + 23) >= 0) {
            int v13 = a5;
          }
          else {
            int v13 = (uint64_t *)*a5;
          }
          unsigned int v14 = *((char *)v13 + v11);
          if ((v14 & 0x80000000) != 0)
          {
            uint64_t result = __maskrune(v14, 0x4000uLL);
            if (!result) {
              break;
            }
          }
          else
          {
            uint64_t result = *(_DWORD *)(v12 + 4 * v14 + 60) & 0x4000;
            if (!result) {
              break;
            }
          }
          int v15 = *a2 + 1;
          *a2 = v15;
          int v11 = v15 + v9;
        }
        while (v11 < a3);
      }
    }
    int v16 = v9 & ~(v9 >> 31);
    int v17 = a3 - *a4;
    if (v17 > v16)
    {
      uint64_t v18 = MEMORY[0x263EF8318];
      do
      {
        unsigned int v19 = v17 - 1;
        if (*((char *)a5 + 23) >= 0) {
          unint64_t v20 = a5;
        }
        else {
          unint64_t v20 = (uint64_t *)*a5;
        }
        unsigned int v21 = *((char *)v20 + v19);
        if ((v21 & 0x80000000) != 0)
        {
          uint64_t result = __maskrune(v21, 0x4000uLL);
          if (!result) {
            return result;
          }
        }
        else
        {
          uint64_t result = *(_DWORD *)(v18 + 4 * v21 + 60) & 0x4000;
          if (!result) {
            return result;
          }
        }
        int v22 = *a4 + 1;
        *a4 = v22;
        int v17 = a3 - v22;
      }
      while (v17 > v16);
    }
  }
  return result;
}

void std::vector<std::tuple<std::string,unsigned long,unsigned long>>::__construct_one_at_end[abi:ne180100]<std::string const&,int,int>(uint64_t a1, long long *a2, int *a3, int *a4)
{
  uint64_t v7 = *(void *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(*(std::string **)(a1 + 8), *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v8 = *a2;
    *(void *)(v7 + 16) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v7 = v8;
  }
  uint64_t v9 = *a4;
  *(void *)(v7 + ++*(_DWORD *)(result + 24) = *a3;
  *(void *)(v7 + 32) = v9;
  *(void *)(a1 + 8) = v7 + 40;
}

void sub_20D433744(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::tuple<std::string,unsigned long,unsigned long>>::__emplace_back_slow_path<std::string const&,int,int>(uint64_t *a1, long long *a2, int *a3, int *a4)
{
  unint64_t v4 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x666666666666666) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  int v10 = a1 + 2;
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 3) > v5) {
    unint64_t v5 = 0x999999999999999ALL * ((a1[2] - *a1) >> 3);
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 3) >= 0x333333333333333) {
    unint64_t v11 = 0x666666666666666;
  }
  else {
    unint64_t v11 = v5;
  }
  unsigned int v21 = v10;
  if (v11) {
    unint64_t v11 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<std::string,unsigned long,unsigned long>>>(v11);
  }
  else {
    uint64_t v12 = 0;
  }
  int v13 = (std::string *)(v11 + 40 * v4);
  v18[0] = v11;
  v18[1] = v13;
  unsigned int v19 = v13;
  unint64_t v20 = v11 + 40 * v12;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v13, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    int v15 = v19;
  }
  else
  {
    long long v14 = *a2;
    v13->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v14;
    int v15 = v13;
  }
  v13[1].__r_.__value_.__r.__words[0] = *a3;
  v13[1].__r_.__value_.__l.__size_ = *a4;
  unsigned int v19 = (std::string *)((char *)v15 + 40);
  std::vector<std::tuple<std::string,unsigned long,unsigned long>>::__swap_out_circular_buffer(a1, v18);
  uint64_t v16 = a1[1];
  std::__split_buffer<std::tuple<std::string,unsigned long,unsigned long>>::~__split_buffer((uint64_t)v18);
  return v16;
}

void sub_20D43387C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::tuple<std::string,unsigned long,unsigned long>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::tuple<std::string,unsigned long,unsigned long>>::__emplace_back_slow_path<std::string&,int &,int &>(uint64_t *a1, long long *a2, int *a3, int *a4)
{
  unint64_t v4 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x666666666666666) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  int v10 = a1 + 2;
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 3) > v5) {
    unint64_t v5 = 0x999999999999999ALL * ((a1[2] - *a1) >> 3);
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 3) >= 0x333333333333333) {
    unint64_t v11 = 0x666666666666666;
  }
  else {
    unint64_t v11 = v5;
  }
  unsigned int v21 = v10;
  if (v11) {
    unint64_t v11 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<std::string,unsigned long,unsigned long>>>(v11);
  }
  else {
    uint64_t v12 = 0;
  }
  int v13 = (std::string *)(v11 + 40 * v4);
  v18[0] = v11;
  v18[1] = v13;
  unsigned int v19 = v13;
  unint64_t v20 = v11 + 40 * v12;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v13, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    int v15 = v19;
  }
  else
  {
    long long v14 = *a2;
    v13->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v14;
    int v15 = v13;
  }
  v13[1].__r_.__value_.__r.__words[0] = *a3;
  v13[1].__r_.__value_.__l.__size_ = *a4;
  unsigned int v19 = (std::string *)((char *)v15 + 40);
  std::vector<std::tuple<std::string,unsigned long,unsigned long>>::__swap_out_circular_buffer(a1, v18);
  uint64_t v16 = a1[1];
  std::__split_buffer<std::tuple<std::string,unsigned long,unsigned long>>::~__split_buffer((uint64_t)v18);
  return v16;
}

void sub_20D4339C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::tuple<std::string,unsigned long,unsigned long>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

double DiagonalAlignment::ComputeZ(DiagonalAlignment *this, unsigned int a2, unsigned int a3, double a4)
{
  double v6 = (double)this;
  double v7 = (double)a3;
  double v8 = (double)a2;
  unsigned int v9 = ((double)this * (double)a3 / (double)a2);
  long double v10 = exp(-a4 / (double)a3);
  double v11 = 0.0;
  double v12 = 0.0;
  unsigned int v13 = a3 - v9;
  if (v13)
  {
    double v14 = exp(-(vabdd_f64((double)(v9 + 1) / v7, v6 / v8) * a4));
    double v12 = (1.0 - pow(v10, (double)v13)) * v14 / (1.0 - v10);
  }
  if (v9)
  {
    double v15 = exp(-(vabdd_f64((double)v9 / v7, v6 / v8) * a4));
    double v11 = (1.0 - pow(v10, (double)v9)) * v15 / (1.0 - v10);
  }
  return v12 + v11;
}

void *std::allocate_shared[abi:ne180100]<Array2D<BOOL>,std::allocator<Array2D<BOOL>>,int,int,void>(void *a1, int a2, int a3)
{
  double v6 = operator new(0x38uLL);
  v6[1] = 0;
  v6[2] = 0;
  void *v6 = off_26C218DD0;
  *((_DWORD *)v6 + 6) = a2;
  unsigned __int8 v8 = 0;
  *((_DWORD *)v6 + 7) = a3;
  uint64_t result = std::vector<BOOL>::vector(v6 + 4, (a3 * a2), &v8);
  *a1 = v6 + 3;
  a1[1] = v6;
  return result;
}

void sub_20D433B64(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void DiagRefineMergeAlignment::~DiagRefineMergeAlignment(DiagRefineMergeAlignment *this)
{
  *(void *)this = &off_26C203B70;
  uint64_t v2 = (void *)*((void *)this + 19);
  if (v2)
  {
    *((void *)this + 20) = v2;
    operator delete(v2);
  }
  unsigned int v3 = (void *)*((void *)this + 16);
  if (v3) {
    operator delete(v3);
  }
  unint64_t v4 = (void *)*((void *)this + 13);
  if (v4) {
    operator delete(v4);
  }
  unint64_t v5 = (void *)*((void *)this + 10);
  if (v5) {
    operator delete(v5);
  }
  double v6 = (void *)*((void *)this + 6);
  if (v6) {
    operator delete(v6);
  }
  double v7 = (void *)*((void *)this + 2);
  if (v7) {
    operator delete(v7);
  }
}

void std::__shared_ptr_emplace<Array2D<BOOL>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  if (v1) {
    operator delete(v1);
  }
}

void std::__shared_ptr_emplace<Array2D<BOOL>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C218DD0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<Array2D<BOOL>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C218DD0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

BOOL GeneratedPromptDB::has_voice_specific_prompts(GeneratedPromptDB *this)
{
  return *((void *)this + 2) != 0;
}

BOOL GeneratedPromptDB::operator BOOL(uint64_t a1)
{
  return *(void *)(a1 + 16) || *(void *)(a1 + 24) != 0;
}

uint64_t GeneratedPromptDB::has_spell_prompts(GeneratedPromptDB *this)
{
  uint64_t result = *((void *)this + 2);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 64))();
  }
  return result;
}

uint64_t GeneratedPromptDB::has_phatic_responses(GeneratedPromptDB *this)
{
  uint64_t result = *((void *)this + 2);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 56))();
  }
  return result;
}

uint64_t GeneratedPromptDB::pitchmark_sample_rate(GeneratedPromptDB *this, uint64_t a2)
{
  int v2 = *((_DWORD *)this + 2);
  if ((v2 & a2) != 0) {
    return (*(uint64_t (**)(void, void))(**((void **)this + 3) + 48))(*((void *)this + 3), a2 & ~v2);
  }
  else {
    return (*(uint64_t (**)(void, uint64_t))(**((void **)this + 2) + 48))(*((void *)this + 2), a2);
  }
}

uint64_t GeneratedPromptDB::pitchmark_compression_factor(GeneratedPromptDB *this, uint64_t a2)
{
  int v2 = *((_DWORD *)this + 2);
  if ((v2 & a2) != 0) {
    return (*(uint64_t (**)(void, void))(**((void **)this + 3) + 40))(*((void *)this + 3), a2 & ~v2);
  }
  else {
    return (*(uint64_t (**)(void, uint64_t))(**((void **)this + 2) + 40))(*((void *)this + 2), a2);
  }
}

uint64_t GeneratedPromptDB::get_prompt_pitchmarks(GeneratedPromptDB *this, uint64_t a2)
{
  int v2 = *((_DWORD *)this + 2);
  if ((v2 & a2) != 0) {
    return (*(uint64_t (**)(void, void))(**((void **)this + 3) + 32))(*((void *)this + 3), a2 & ~v2);
  }
  else {
    return (*(uint64_t (**)(void, uint64_t))(**((void **)this + 2) + 32))(*((void *)this + 2), a2);
  }
}

uint64_t GeneratedPromptDB::decompress_prompt_audio_data(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 8);
  if ((v2 & a2) != 0) {
    return (*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 24))(*(void *)(a1 + 24), a2 & ~v2);
  }
  else {
    return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 24))(*(void *)(a1 + 16), a2);
  }
}

uint64_t GeneratedPromptDB::find_prompt_by_text(uint64_t a1, std::string *__str, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 24);
  if (!v6) {
    goto LABEL_20;
  }
  if (SHIBYTE(__str->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::size_type size = __str->__r_.__value_.__l.__size_;
    if (size != 4)
    {
      if (size != 8) {
        goto LABEL_20;
      }
      double v7 = (std::string *)__str->__r_.__value_.__r.__words[0];
      goto LABEL_9;
    }
    int data = *(_DWORD *)__str->__r_.__value_.__l.__data_;
  }
  else
  {
    if (*((unsigned char *)&__str->__r_.__value_.__s + 23) != 4)
    {
      double v7 = __str;
      if (*((unsigned char *)&__str->__r_.__value_.__s + 23) != 8) {
        goto LABEL_20;
      }
LABEL_9:
      if (v7->__r_.__value_.__r.__words[0] != 0x7661772E70656562) {
        goto LABEL_20;
      }
      goto LABEL_14;
    }
    int data = (int)__str->__r_.__value_.__l.__data_;
  }
  if (data != 1885693282) {
    goto LABEL_20;
  }
LABEL_14:
  int v10 = *(char *)(a3 + 23);
  if (v10 < 0)
  {
    if (*(void *)(a3 + 8) != 4) {
      goto LABEL_20;
    }
    double v11 = *(_DWORD **)a3;
  }
  else
  {
    double v11 = (_DWORD *)a3;
    if (v10 != 4) {
      goto LABEL_20;
    }
  }
  if (*v11 == -1415208976)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "beep");
    unsigned int v16 = (*(uint64_t (**)(uint64_t, std::string *, uint64_t))(*(void *)v6 + 16))(v6, &__p, a3);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v16 != -1) {
      return *(_DWORD *)(a1 + 8) | v16;
    }
  }
LABEL_20:
  uint64_t v12 = *(void *)(a1 + 16);
  if (!v12
    || (uint64_t result = (*(uint64_t (**)(uint64_t, std::string *, uint64_t))(*(void *)v12 + 16))(v12, __str, a3),
        result == -1))
  {
    uint64_t v14 = *(void *)(a1 + 24);
    if (v14)
    {
      if ((SHIBYTE(__str->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        double v15 = __str;
        if (!*((unsigned char *)&__str->__r_.__value_.__s + 23)) {
          return 0xFFFFFFFFLL;
        }
        goto LABEL_28;
      }
      if (__str->__r_.__value_.__l.__size_)
      {
        double v15 = (std::string *)__str->__r_.__value_.__r.__words[0];
LABEL_28:
        if (v15->__r_.__value_.__s.__data_[0] != 47) {
          return 0xFFFFFFFFLL;
        }
        std::string::basic_string(&__p, __str, 1uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v18);
        unsigned int v16 = (*(uint64_t (**)(uint64_t, std::string *, uint64_t))(*(void *)v14 + 16))(v14, &__p, a3);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (v16 == -1) {
          return 0xFFFFFFFFLL;
        }
        return *(_DWORD *)(a1 + 8) | v16;
      }
    }
    return 0xFFFFFFFFLL;
  }
  return result;
}

void sub_20D434058(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void GeneratedPromptDB::~GeneratedPromptDB(GeneratedPromptDB *this)
{
  GeneratedPromptDB::~GeneratedPromptDB(this);
  JUMPOUT(0x2105595E0);
}

{
  uint64_t v2;
  uint64_t v3;

  *(void *)this = off_26C201E18;
  int v2 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  unsigned int v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
}

BOOL GeneratedPromptDBImpl::operator BOOL(uint64_t a1)
{
  return *(void *)(a1 + 8) != 0;
}

BOOL GeneratedPromptDBImpl::has_spell_prompts(GeneratedPromptDBImpl *this)
{
  if (!*((void *)this + 6)) {
    return 1;
  }
  sqlite3_reset(*((sqlite3_stmt **)this + 10));
  sqlite3_clear_bindings(*((sqlite3_stmt **)this + 10));
  uint64_t v2 = sqlite3_step(*((sqlite3_stmt **)this + 10));
  if (v2 == 100) {
    return sqlite3_column_int(*((sqlite3_stmt **)this + 10), 0) > 20;
  }
  GeneratedPromptDBImpl::report_error((sqlite3 **)this, v2, "execute spell count query");
  return 0;
}

uint64_t GeneratedPromptDBImpl::report_error(sqlite3 **this, uint64_t a2, const char *a3)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (a2)
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    uint64_t v6 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
    {
      double v7 = sqlite3_errmsg(this[6]);
      *(_DWORD *)int buf = 136315394;
      uint64_t v12 = a3;
      __int16 v13 = 2080;
      uint64_t v14 = v7;
      _os_log_impl(&dword_20CD80000, v6, OS_LOG_TYPE_ERROR, "GeneratedPromptDB: Failed to %s: %s", buf, 0x16u);
    }
    unsigned __int8 v8 = sqlite3_errmsg(this[6]);
    Diagnostics::log(3, "GeneratedPromptDB: Failed to %s: %s", v9, a3, v8);
  }
  return a2;
}

BOOL GeneratedPromptDBImpl::has_phatic_responses(GeneratedPromptDBImpl *this)
{
  std::string::basic_string[abi:ne180100]<0>(v6, "phat");
  std::string::basic_string[abi:ne180100]<0>(__p, "🥫");
  int v2 = (*(uint64_t (**)(GeneratedPromptDBImpl *, void **, void **))(*(void *)this + 16))(this, v6, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  return v2 != -1;
}

void sub_20D434398(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t GeneratedPromptDBImpl::pitchmark_sample_rate(GeneratedPromptDBImpl *this)
{
  if (*((void *)this + 1)) {
    return (int)*(double *)(*((void *)this + 3) + *(unsigned int *)(*((void *)this + 5) + 12));
  }
  else {
    return 0;
  }
}

uint64_t GeneratedPromptDBImpl::pitchmark_compression_factor(GeneratedPromptDBImpl *this)
{
  if (*((void *)this + 6) && (uint64_t v1 = (unsigned __int16 *)*((void *)this + 5), *v1 >= 2u)) {
    return *((unsigned __int8 *)v1 + 28);
  }
  else {
    return 1;
  }
}

double GeneratedPromptDBImpl::get_prompt_pitchmarks@<D0>(GeneratedPromptDBImpl *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  if (*((void *)this + 6)
    && **((unsigned __int16 **)this + 5) > 1u
    && (sqlite3_reset(*((sqlite3_stmt **)this + 9)),
        sqlite3_clear_bindings(*((sqlite3_stmt **)this + 9)),
        uint64_t v6 = sqlite3_bind_int(*((sqlite3_stmt **)this + 9), 1, a2),
        int v7 = v6,
        GeneratedPromptDBImpl::report_error((sqlite3 **)this, v6, "bind argument"),
        !v7)
    && sqlite3_step(*((sqlite3_stmt **)this + 9)) == 100)
  {
    int v8 = *(_DWORD *)(*((void *)this + 5) + 24);
    unint64_t v9 = (sqlite3_column_int(*((sqlite3_stmt **)this + 9), 0) + v8);
    uint64_t v10 = sqlite3_column_int(*((sqlite3_stmt **)this + 9), 1);
    MemoryMap::subrange((void *)a3, (void *)this + 1, v9, v10);
  }
  else
  {
    double result = 0.0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }
  return result;
}

void GeneratedPromptDBImpl::decompress_prompt_audio_data(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v6 = (std::once_flag::_State_type *)(a1 + 96);
  uint64_t v14 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)v6, memory_order_acquire) != -1)
  {
    *(void *)&v13[0] = &v14;
    uint64_t v15 = v13;
    std::__call_once(v6, &v15, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<GeneratedPromptDBImpl::decompress_prompt_audio_data(int,std::vector<float> &)::$_0 &&>>);
  }
  std::mutex::lock((std::mutex *)(a1 + 104));
  int v7 = *(void (****)(void, _OWORD *, uint64_t))(a1 + 168);
  if (*(void *)(a1 + 48)
    && (sqlite3_reset(*(sqlite3_stmt **)(a1 + 64)),
        sqlite3_clear_bindings(*(sqlite3_stmt **)(a1 + 64)),
        uint64_t v8 = sqlite3_bind_int(*(sqlite3_stmt **)(a1 + 64), 1, a2),
        int v9 = v8,
        GeneratedPromptDBImpl::report_error((sqlite3 **)a1, v8, "bind argument"),
        !v9)
    && sqlite3_step(*(sqlite3_stmt **)(a1 + 64)) == 100)
  {
    int v10 = *(_DWORD *)(*(void *)(a1 + 40) + 20);
    int v11 = sqlite3_column_int(*(sqlite3_stmt **)(a1 + 64), 0);
    int v12 = sqlite3_column_int(*(sqlite3_stmt **)(a1 + 64), 1);
    MemoryMap::subrange(v13, (void *)(a1 + 8), (v11 + v10), v12);
  }
  else
  {
    memset(v13, 0, sizeof(v13));
  }
  (**v7)(v7, v13, a3);
  if (*((void *)&v13[0] + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v13[0] + 1));
  }
  std::mutex::unlock((std::mutex *)(a1 + 104));
}

void sub_20D434678(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  std::mutex::unlock(v10);
  _Unwind_Resume(a1);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<GeneratedPromptDBImpl::decompress_prompt_audio_data(int,std::vector<float> &)::$_0 &&>>(void ***a1)
{
  uint64_t v1 = (void *)***a1;
  if (v1[1])
  {
    MemoryMap::subrange(v8, v1 + 1, *(unsigned int *)(v1[5] + 12) + 40, *(unsigned int *)(v1[5] + 16) - 40);
    if (v1[1])
    {
      int v2 = (long long *)(v1[3] + *(unsigned int *)(v1[5] + 12));
      uint64_t v3 = *((void *)v2 + 4);
      long long v4 = v2[1];
      long long v5 = *v2;
      long long v6 = v4;
      uint64_t v7 = v3;
      goto LABEL_6;
    }
  }
  else
  {
    memset(v8, 0, sizeof(v8));
  }
  uint64_t v7 = 0;
  long long v5 = 0u;
  long long v6 = 0u;
LABEL_6:
  operator new();
}

void sub_20D43478C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  MEMORY[0x2105595E0](v16, 0x10F1C40DC8C0051);
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  _Unwind_Resume(a1);
}

void std::default_delete<DecompressAudio>::operator()[abi:ne180100](void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &off_26C200F70;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 16))(v2);
  }
  JUMPOUT(0x2105595E0);
}

uint64_t GeneratedPromptDBImpl::find_prompt_by_text(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(void *)(a1 + 48)) {
    return 0xFFFFFFFFLL;
  }
  sqlite3_reset(*(sqlite3_stmt **)(a1 + 56));
  sqlite3_clear_bindings(*(sqlite3_stmt **)(a1 + 56));
  char v6 = *(unsigned char *)(a2 + 23);
  uint64_t v7 = v6 >= 0 ? (const char *)a2 : *(const char **)a2;
  int v8 = v6 >= 0 ? *(unsigned __int8 *)(a2 + 23) : *(_DWORD *)(a2 + 8);
  uint64_t v9 = sqlite3_bind_text(*(sqlite3_stmt **)(a1 + 56), 1, v7, v8, 0);
  int v10 = v9;
  GeneratedPromptDBImpl::report_error((sqlite3 **)a1, v9, "bind argument");
  if (v10) {
    return 0xFFFFFFFFLL;
  }
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string __p = *(std::string *)a3;
  }
  int v13 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  char v14 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  int v15 = __p.__r_.__value_.__r.__words[1];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  if (size)
  {
    std::string::push_back(&__p, 42);
    int v13 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    int v15 = __p.__r_.__value_.__r.__words[1];
    char v14 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  if (v14 >= 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (v14 >= 0) {
    int v18 = v13;
  }
  else {
    int v18 = v15;
  }
  uint64_t v19 = sqlite3_bind_text(*(sqlite3_stmt **)(a1 + 56), 2, (const char *)p_p, v18, 0);
  int v20 = v19;
  GeneratedPromptDBImpl::report_error((sqlite3 **)a1, v19, "bind argument");
  if (v20)
  {
    uint64_t v11 = 0xFFFFFFFFLL;
    goto LABEL_39;
  }
  unsigned int v21 = 0;
  uint64_t v11 = 0xFFFFFFFFLL;
  while (1)
  {
    uint64_t v22 = sqlite3_step(*(sqlite3_stmt **)(a1 + 56));
    if (v22 != 100) {
      break;
    }
    if (!v21)
    {
      unsigned int v21 = 1;
      goto LABEL_36;
    }
    ++v21;
    unsigned int v23 = *(_DWORD *)(a1 + 88);
    unsigned int v24 = v23 / 0xADC8;
    unsigned int v25 = 48271 * (v23 % 0xADC8);
    v24 *= 3399;
    BOOL v26 = v25 >= v24;
    unsigned int v27 = v25 - v24;
    if (v26) {
      int v28 = 0;
    }
    else {
      int v28 = 0x7FFFFFFF;
    }
    unsigned int v29 = v28 + v27;
    *(_DWORD *)(a1 + 88) = v29;
    if (!(v29 % v21)) {
LABEL_36:
    }
      uint64_t v11 = sqlite3_column_int(*(sqlite3_stmt **)(a1 + 56), 0);
  }
  if (v22 != 101) {
    GeneratedPromptDBImpl::report_error((sqlite3 **)a1, v22, "execute prompt query");
  }
LABEL_39:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v11;
}

void sub_20D434A5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void GeneratedPromptDBImpl::~GeneratedPromptDBImpl(GeneratedPromptDBImpl *this)
{
  GeneratedPromptDBImpl::~GeneratedPromptDBImpl(this);
  JUMPOUT(0x2105595E0);
}

{
  sqlite3_stmt *v2;
  sqlite3_stmt *v3;
  sqlite3_stmt *v4;
  sqlite3_stmt *v5;
  sqlite3 *v6;
  void *v7;
  std::__shared_weak_count *v8;

  *(void *)this = off_26C202F70;
  uint64_t v2 = (sqlite3_stmt *)*((void *)this + 7);
  if (v2) {
    sqlite3_finalize(v2);
  }
  uint64_t v3 = (sqlite3_stmt *)*((void *)this + 8);
  if (v3) {
    sqlite3_finalize(v3);
  }
  long long v4 = (sqlite3_stmt *)*((void *)this + 10);
  if (v4) {
    sqlite3_finalize(v4);
  }
  long long v5 = (sqlite3_stmt *)*((void *)this + 9);
  if (v5) {
    sqlite3_finalize(v5);
  }
  char v6 = (sqlite3 *)*((void *)this + 6);
  if (v6) {
    sqlite3_close(v6);
  }
  uint64_t v7 = (void *)*((void *)this + 21);
  *((void *)this + 21) = 0;
  if (v7) {
    std::default_delete<DecompressAudio>::operator()[abi:ne180100](v7);
  }
  std::mutex::~mutex((std::mutex *)((char *)this + 104));
  int v8 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
}

void GeneratedPromptDB::GeneratedPromptDB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = off_26C201E18;
  *(_DWORD *)(a1 + 8) = 0x40000000;
  NeuralTTSUtils::is_personal_voice(a3);
  operator new();
}

void sub_20D434D3C(_Unwind_Exception *a1)
{
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  MEMORY[0x2105595E0](v2, 0x10F1C40D9C4C820);
  uint64_t v5 = *(void *)(v1 + 16);
  *(void *)(v1 + 16) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  _Unwind_Resume(a1);
}

uint64_t GeneratedPromptDBImpl::GeneratedPromptDBImpl(uint64_t a1, uint64_t a2, int a3, char a4)
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  *(_OWORD *)(a1 + 8) = 0u;
  int v8 = (void *)(a1 + 8);
  *(_OWORD *)(a1 + 56) = 0u;
  uint64_t v9 = (sqlite3_stmt **)(a1 + 56);
  *(void *)a1 = off_26C202F70;
  *(_OWORD *)(a1 + 72) = 0u;
  int v10 = (sqlite3_stmt **)(a1 + 72);
  *(_OWORD *)(a1 + ++*(_DWORD *)(result + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  std::random_device::random_device[abi:ne180100](v36);
  unsigned int v11 = MEMORY[0x2105591F0](v36);
  unsigned int v12 = v11 + ((v11 / 0x7FFFFFFF) | ((v11 / 0x7FFFFFFF) << 31));
  if (v12 <= 1) {
    unsigned int v12 = 1;
  }
  *(_DWORD *)(a1 + 88) = v12;
  std::random_device::~random_device(v36);
  *(_OWORD *)(a1 + 96) = xmmword_20D6B4B10;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  if (a3)
  {
    SiriTTS::package_path((SiriTTS *)v32);
    *(_OWORD *)&v36[0].__padding_ = *(_OWORD *)v32;
    *(void *)&long long v37 = v33;
    v32[1] = 0;
    uint64_t v33 = 0;
    v32[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(&__p, "SonicResponse");
    boost::filesystem::path::append_v3((std::string *)v36, &__p);
    *(_OWORD *)int v34 = *(_OWORD *)&v36[0].__padding_;
    uint64_t v35 = v37;
    *(void *)&long long v37 = 0;
    memset(v36, 0, sizeof(v36));
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if (SBYTE7(v37) < 0) {
        operator delete(*(void **)&v36[0].__padding_);
      }
    }
    if (SHIBYTE(v33) < 0) {
      operator delete(v32[0]);
    }
    if (v35 >= 0) {
      int v13 = (char *)v34;
    }
    else {
      int v13 = (char *)v34[0];
    }
    std::string::basic_string[abi:ne180100]<0>(v32, v13);
    MemoryMap::MemoryMap((std::__shared_weak_count **)v36, (uint64_t)v32);
    uint64_t v15 = *(void *)&v36[0].__padding_;
    uint64_t v14 = *(void *)&v36[2].__padding_;
    if (*(void *)&v36[2].__padding_) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&v36[2].__padding_ + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v16 = *(std::__shared_weak_count **)(a1 + 16);
    *(void *)(a1 + 8) = v15;
    *(void *)(a1 + 16) = v14;
    if (v16) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v16);
    }
    *(_OWORD *)(a1 + ++*(_DWORD *)(result + 24) = v37;
    if (*(void *)&v36[2].__padding_) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v36[2].__padding_);
    }
    if (SHIBYTE(v33) < 0) {
      operator delete(v32[0]);
    }
    if (SHIBYTE(v35) < 0) {
      operator delete(v34[0]);
    }
  }
  else if (a4)
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    int v17 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
    {
      LOWORD(v36[0].__padding_) = 0;
      _os_log_impl(&dword_20CD80000, v17, OS_LOG_TYPE_INFO, "Ignoring prompts for personal voice", (uint8_t *)v36, 2u);
    }
    Diagnostics::log(6, "Ignoring prompts for personal voice", v18);
  }
  else
  {
    (*(void (**)(std::random_device *__return_ptr))(**(void **)a2 + 16))(v36);
    uint64_t v20 = *(void *)&v36[0].__padding_;
    uint64_t v19 = *(void *)&v36[2].__padding_;
    if (*(void *)&v36[2].__padding_) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&v36[2].__padding_ + 8), 1uLL, memory_order_relaxed);
    }
    unsigned int v21 = *(std::__shared_weak_count **)(a1 + 16);
    *(void *)(a1 + 8) = v20;
    *(void *)(a1 + 16) = v19;
    if (v21) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v21);
    }
    *(_OWORD *)(a1 + ++*(_DWORD *)(result + 24) = v37;
    if (*(void *)&v36[2].__padding_) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v36[2].__padding_);
    }
  }
  if (*v8)
  {
    uint64_t v22 = *(void *)(a1 + 24);
    *(void *)(a1 + 40) = v22;
    MemoryMap::subrange(v36, v8, *(unsigned int *)(v22 + 4), *(unsigned int *)(v22 + 8));
    unsigned int v23 = (sqlite3 **)(a1 + 48);
    uint64_t v24 = sqlite3_open_MemoryMap((const void **)v36, (sqlite3 **)(a1 + 48));
    int v25 = v24;
    GeneratedPromptDBImpl::report_error((sqlite3 **)a1, v24, "open dictionary");
    if (*(void *)&v36[2].__padding_) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v36[2].__padding_);
    }
    if (!v25)
    {
      uint64_t v26 = sqlite3_prepare_v2(*v23, "SELECT rowid FROM Prompts WHERE text=? AND context GLOB ?;", -1, v9, 0);
      GeneratedPromptDBImpl::report_error((sqlite3 **)a1, v26, "compile lookup query");
      uint64_t v27 = sqlite3_prepare_v2(*v23, "SELECT offset, length FROM Prompts WHERE rowid=?;",
              -1,
              (sqlite3_stmt **)(a1 + 64),
              0);
      GeneratedPromptDBImpl::report_error((sqlite3 **)a1, v27, "compile data retrieval query");
      uint64_t v28 = sqlite3_prepare_v2(*v23, "SELECT count() FROM prompts WHERE context='🔠';",
              -1,
              (sqlite3_stmt **)(a1 + 80),
              0);
      GeneratedPromptDBImpl::report_error((sqlite3 **)a1, v28, "compile spell prompt query");
      if (**(unsigned __int16 **)(a1 + 40) >= 2u)
      {
        uint64_t v29 = sqlite3_prepare_v2(*v23, "SELECT pm_off, pm_length FROM Prompts WHERE rowid=?;", -1, v10, 0);
        GeneratedPromptDBImpl::report_error((sqlite3 **)a1, v29, "compile data retrieval query");
      }
    }
  }
  return a1;
}

void sub_20D435244(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t buf,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  long long v37 = *(void **)(v35 + 168);
  *(void *)(v35 + 168) = 0;
  if (v37) {
    std::default_delete<DecompressAudio>::operator()[abi:ne180100](v37);
  }
  std::mutex::~mutex((std::mutex *)(v35 + 104));
  uint64_t v38 = *(std::__shared_weak_count **)(v35 + 16);
  if (v38) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v38);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<GeneratedPromptDB>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<GeneratedPromptDB>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C2167C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<GeneratedPromptDB>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C2167C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void NNetExtractor::NNetExtractor(uint64_t a1, uint64_t *a2, std::string *__str)
{
  *(_OWORD *)(a1 + 64) = 0u;
  uint64_t v5 = a1 + 64;
  *(_OWORD *)(a1 + 208) = 0u;
  uint64_t v41 = a1 + 208;
  *(void *)(a1 + 2++*(_DWORD *)(result + 24) = 0;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  uint64_t v6 = a1 + 440;
  uint64_t v7 = a1 + 464;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  std::string::operator=((std::string *)(a1 + 464), __str);
  *(void *)(a1 + 4++*(_DWORD *)(result + 24) = 0;
  uint64_t v9 = *a2;
  uint64_t v8 = a2[1];
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  int v10 = *(std::__shared_weak_count **)(a1 + 400);
  *(void *)(a1 + 392) = v9;
  *(void *)(a1 + 400) = v8;
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  *(_OWORD *)(a1 + 408) = *((_OWORD *)a2 + 1);
  uint64_t v11 = *(void *)(a1 + 424);
  uint64_t v12 = *(void *)(a1 + 408);
  unsigned int v13 = *(unsigned __int16 *)(v12 + v11 + 16);
  *(_WORD *)a1 = v13;
  uint64_t v14 = 28;
  if (v13 < 3) {
    uint64_t v14 = 26;
  }
  uint64_t v15 = v14 + v11;
  uint64_t v16 = v15 + 12;
  *(void *)(a1 + 4++*(_DWORD *)(result + 24) = v15 + 12;
  uint64_t v17 = *(void *)(v12 + v15 + 4);
  *(void *)(a1 + 336) = v17;
  if ((v13 & 0xFFFE) == 2)
  {
    *(void *)(a1 + 360) = *(void *)(v12 + v16 + 4);
    uint64_t v16 = v15 + 24;
    *(void *)(a1 + 4++*(_DWORD *)(result + 24) = v15 + 24;
  }
  unsigned int v18 = 0;
  uint64_t v19 = (void *)(v12 + v16);
  uint64_t v20 = *(void *)(v12 + v16 + 4);
  *(void *)(a1 + 344) = v20;
  uint64_t v21 = *(void *)(v12 + v16 + 16);
  *(void *)(a1 + 352) = v21;
  *(void *)(a1 + 368) = *(void *)((char *)v19 + 28);
  *(void *)(a1 + 376) = v19[5];
  *(void *)(a1 + 384) = *(void *)((char *)v19 + 52);
  *(void *)(a1 + 4++*(_DWORD *)(result + 24) = v17;
  while (1)
  {
    uint64_t v22 = v12 + v17;
    uint64_t v23 = v17 + 8;
    int v24 = *(_DWORD *)(v12 + v17);
    if (v24 <= 1835427179)
    {
      switch(v24)
      {
        case 1667524211:
          *(_DWORD *)(a1 + 52) = *(_DWORD *)(v12 + v23);
          break;
        case 1667526003:
          *(_DWORD *)(a1 + 48) = *(_DWORD *)(v12 + v23);
          break;
        case 1667526007:
          uint64_t v25 = *(unsigned int *)(v22 + 4);
          *(_DWORD *)(a1 + 32) = v25;
          *(void *)(a1 + 40) = v12 + v23;
          goto LABEL_27;
        default:
          goto LABEL_39;
      }
    }
    else if (v24 > 1952543586)
    {
      if (v24 == 1952544613)
      {
        uint64_t v25 = *(unsigned int *)(v22 + 4);
        *(_DWORD *)(a1 + 16) = v25;
        *(void *)(a1 + ++*(_DWORD *)(result + 24) = v12 + v23;
LABEL_27:
        uint64_t v17 = v23 + 4 * v25;
        goto LABEL_28;
      }
      if (v24 != 1952543587)
      {
LABEL_39:
        uint64_t v39 = v5;
        *(void *)(a1 + 4++*(_DWORD *)(result + 24) = v23;
        exceptiounint64_t n = __cxa_allocate_exception(0x10uLL);
        StringFormatter::StringFormatter((StringFormatter *)v42, "Neural net file is unable to read configuration settings, the mdnf file is not valid\n", v7, v6, v39, v41);
        MEMORY[0x210558D40](exception, v42);
        __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
      }
      *(_DWORD *)(a1 + 4) = *(_DWORD *)(v12 + v23);
    }
    else if (v24 == 1835427180)
    {
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(v12 + v23);
    }
    else
    {
      if (v24 != 1835886191) {
        goto LABEL_39;
      }
      *(_DWORD *)(a1 + 12) = *(_DWORD *)(v12 + v23);
    }
    v17 += 12;
LABEL_28:
    if (v18++ >= 6)
    {
      *(_DWORD *)(a1 + 232) = *(_DWORD *)(v12 + v20 + 4);
      *(void *)(a1 + 272) = v12 + v20 + 8;
      uint64_t v27 = v21 + 20;
      *(void *)(a1 + 4++*(_DWORD *)(result + 24) = v21 + 20;
      int v28 = *(_DWORD *)(v12 + v21 + 8);
      *(_DWORD *)(a1 + 432) = v28;
      int v29 = *(_DWORD *)(v12 + v21 + 4);
      *(_DWORD *)(a1 + 436) = v29;
      uint64_t v30 = *(void *)(v12 + v21 + 12);
      uint64_t v31 = (v29 * v28);
      *(void *)(a1 + 256) = v31;
      int v32 = 1;
      if (v30)
      {
        do
        {
          uint64_t v33 = v27 + v30;
          uint64_t v34 = v12 + v33;
          uint64_t v27 = v33 + 20;
          int v36 = *(_DWORD *)(v34 + 4);
          int v35 = *(_DWORD *)(v34 + 8);
          v31 += (v36 * v35);
          uint64_t v30 = *(void *)(v34 + 12);
          ++v32;
        }
        while (v30);
        *(void *)(a1 + 4++*(_DWORD *)(result + 24) = v27;
        *(_DWORD *)(a1 + 432) = v35;
        *(_DWORD *)(a1 + 436) = v36;
        *(void *)(a1 + 256) = v31;
      }
      if (v13 - 2 >= 2)
      {
        if (v13)
        {
          if (v13 == 1) {
            operator new[]();
          }
          uint64_t v40 = v5;
          uint64_t v38 = __cxa_allocate_exception(0x10uLL);
          StringFormatter::StringFormatter((StringFormatter *)v42, "Undefined version of nnet_meta_info file", v7, v6, v40, v41);
          MEMORY[0x210558D40](v38, v42);
          __cxa_throw(v38, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
        }
        operator new[]();
      }
      *(void *)(a1 + 4++*(_DWORD *)(result + 24) = v21;
      RnnComponent::RnnComponent((RnnComponent *)v42);
    }
  }
}

void sub_20D435DBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, void **a10, void *a11, void *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
  {
    operator delete(__p);
    if ((v19 & 1) == 0)
    {
LABEL_6:
      if (*(char *)(v18 + 487) < 0) {
        operator delete(*a9);
      }
      uint64_t v22 = *a10;
      if (*a10)
      {
        *(void *)(v18 + 448) = v22;
        operator delete(v22);
      }
      uint64_t v23 = *(std::__shared_weak_count **)(v18 + 400);
      if (v23) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v23);
      }
      std::string __p = a12;
      std::vector<RnnComponent>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      int v24 = *(void **)(v18 + 184);
      if (v24)
      {
        *(void *)(v18 + 192) = v24;
        operator delete(v24);
      }
      uint64_t v25 = *(void **)(v18 + 160);
      if (v25)
      {
        *(void *)(v18 + 168) = v25;
        operator delete(v25);
      }
      std::string __p = (void *)(v18 + 136);
      std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      std::string __p = (void *)(v18 + 112);
      std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      std::string __p = (void *)(v18 + 88);
      std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      std::string __p = a11;
      std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      _Unwind_Resume(a1);
    }
  }
  else if (!v19)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v20);
  goto LABEL_6;
}

void RnnComponent::RnnComponent(RnnComponent *this)
{
  *(unsigned char *)this = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  roost::matrix<float>::resize_storage((uint64_t)this, 0, 0);
}

void sub_20D435F80(_Unwind_Exception *exception_object)
{
  uint64_t v3 = (std::__shared_weak_count *)v1[28];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  long long v4 = (std::__shared_weak_count *)v1[21];
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)v1[12];
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  uint64_t v6 = (std::__shared_weak_count *)v1[5];
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  _Unwind_Resume(exception_object);
}

void RnnComponent::~RnnComponent(RnnComponent *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 28);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 21);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  long long v4 = (std::__shared_weak_count *)*((void *)this + 12);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void RnnComponent::clear(RnnComponent *this)
{
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  roost::matrix<float>::resize_storage((uint64_t)this, 0, 0);
}

uint64_t std::allocator<RnnComponent>::construct[abi:ne180100]<RnnComponent,RnnComponent>(uint64_t result, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)double result = *(_OWORD *)a2;
  *(_OWORD *)(result + 16) = v2;
  uint64_t v3 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(result + 48) = *(void *)(a2 + 48);
  long long v4 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(result + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(result + 56) = v4;
  uint64_t v5 = *(void *)(a2 + 96);
  *(void *)(result + 88) = *(void *)(a2 + 88);
  *(void *)(result + 96) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(result + 104) = *(void *)(a2 + 104);
  *(_OWORD *)(result + 112) = *(_OWORD *)(a2 + 112);
  long long v6 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(result + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(result + 144) = v6;
  uint64_t v7 = *(void *)(a2 + 168);
  *(void *)(result + 160) = *(void *)(a2 + 160);
  *(void *)(result + 168) = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(result + 176) = *(void *)(a2 + 176);
  long long v8 = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(result + 200) = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(result + 184) = v8;
  uint64_t v9 = *(void *)(a2 + 224);
  *(void *)(result + 216) = *(void *)(a2 + 216);
  *(void *)(result + 2++*(_DWORD *)(result + 24) = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v10 = *(void *)(a2 + 240);
  *(void *)(result + 232) = *(void *)(a2 + 232);
  *(void *)(result + 240) = v10;
  return result;
}

uint64_t std::vector<RnnComponent>::__push_back_slow_path<RnnComponent>(uint64_t *a1, uint64_t a2)
{
  unint64_t v2 = 0xEF7BDEF7BDEF7BDFLL * ((a1[1] - *a1) >> 3);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 > 0x108421084210842) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  if (0xDEF7BDEF7BDEF7BELL * ((a1[2] - *a1) >> 3) > v3) {
    unint64_t v3 = 0xDEF7BDEF7BDEF7BELL * ((a1[2] - *a1) >> 3);
  }
  if (0xEF7BDEF7BDEF7BDFLL * ((a1[2] - *a1) >> 3) >= 0x84210842108421) {
    unint64_t v6 = 0x108421084210842;
  }
  else {
    unint64_t v6 = v3;
  }
  if (v6)
  {
    if (v6 > 0x108421084210842) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v7 = (char *)operator new(248 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v8 = (uint64_t)&v7[248 * v2];
  uint64_t v9 = &v7[248 * v6];
  std::allocator<RnnComponent>::construct[abi:ne180100]<RnnComponent,RnnComponent>(v8, a2);
  uint64_t v10 = v8 + 248;
  uint64_t v12 = (char *)*a1;
  uint64_t v11 = (char *)a1[1];
  if (v11 == (char *)*a1)
  {
    *a1 = v8;
    a1[1] = v10;
    a1[2] = (uint64_t)v9;
  }
  else
  {
    do
    {
      v8 -= 248;
      v11 -= 248;
      std::allocator<RnnComponent>::construct[abi:ne180100]<RnnComponent,RnnComponent>(v8, (uint64_t)v11);
    }
    while (v11 != v12);
    uint64_t v11 = (char *)*a1;
    unsigned int v13 = (char *)a1[1];
    *a1 = v8;
    a1[1] = v10;
    a1[2] = (uint64_t)v9;
    while (v13 != v11)
      RnnComponent::~RnnComponent((RnnComponent *)(v13 - 248));
  }
  if (v11) {
    operator delete(v11);
  }
  return v10;
}

void std::vector<RnnComponent>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = (char *)**a1;
  if (v2)
  {
    long long v4 = (char *)v1[1];
    uint64_t v5 = v2;
    if (v4 != v2)
    {
      do
        RnnComponent::~RnnComponent((RnnComponent *)(v4 - 248));
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void roost::raw_storage<float>::~raw_storage(void *a1)
{
  a1[3] = 0;
  *a1 = off_26C211230;
  JUMPOUT(0x2105595E0);
}

void roost::storage<float>::~storage(void *a1)
{
  *a1 = off_26C211230;
  uint64_t v1 = a1[3];
  if (v1) {
    MEMORY[0x2105595C0](v1, 0x1000C8052888210);
  }
  JUMPOUT(0x2105595E0);
}

void *roost::storage<float>::~storage(void *a1)
{
  *a1 = off_26C211230;
  uint64_t v2 = a1[3];
  if (v2) {
    MEMORY[0x2105595C0](v2, 0x1000C8052888210);
  }
  return a1;
}

void *roost::raw_storage<float>::~raw_storage(void *result)
{
  result[3] = 0;
  *double result = off_26C211230;
  return result;
}

uint64_t std::__shared_ptr_emplace<roost::raw_storage<float>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<roost::raw_storage<float>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C2193B8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<roost::raw_storage<float>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C2193B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void roost::matrix<float>::resize_storage(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v5 = operator new(0x38uLL);
  v5[1] = 0;
  v5[2] = 0;
  *uint64_t v5 = off_26C219428;
  unint64_t v6 = (a3 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  if (a2 <= 1) {
    unint64_t v6 = a3;
  }
  v5[4] = a2;
  v5[5] = v6;
  v5[3] = off_26C211230;
  operator new[]();
}

void sub_20D436664(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<roost::storage<float>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<roost::storage<float>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C219428;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<roost::storage<float>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C219428;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<MDN>::__on_zero_shared(uint64_t a1)
{
}

void NNetExtractor::~NNetExtractor(NNetExtractor *this)
{
  if (!*(_WORD *)this)
  {
    uint64_t v2 = *((void *)this + 38);
    if (v2) {
      MEMORY[0x2105595C0](v2, 0x1000C8052888210);
    }
    uint64_t v3 = *((void *)this + 40);
    if (v3) {
      MEMORY[0x2105595C0](v3, 0x1000C8052888210);
    }
  }
  if (*((char *)this + 487) < 0) {
    operator delete(*((void **)this + 58));
  }
  long long v4 = (void *)*((void *)this + 55);
  if (v4)
  {
    *((void *)this + 56) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 50);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  uint64_t v8 = (void **)((char *)this + 208);
  std::vector<RnnComponent>::__destroy_vector::operator()[abi:ne180100](&v8);
  unint64_t v6 = (void *)*((void *)this + 23);
  if (v6)
  {
    *((void *)this + ++*(_DWORD *)(result + 24) = v6;
    operator delete(v6);
  }
  uint64_t v7 = (void *)*((void *)this + 20);
  if (v7)
  {
    *((void *)this + 21) = v7;
    operator delete(v7);
  }
  uint64_t v8 = (void **)((char *)this + 136);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v8);
  uint64_t v8 = (void **)((char *)this + 112);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v8);
  uint64_t v8 = (void **)((char *)this + 88);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v8);
  uint64_t v8 = (void **)((char *)this + 64);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v8);
}

void std::__shared_ptr_emplace<MDN>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C218A50;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<MDN>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C218A50;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<RNN>::__on_zero_shared(uint64_t a1)
{
}

void std::__shared_ptr_emplace<RNN>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C218A88;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<RNN>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C218A88;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void RnnComponent::activation_func(RnnComponent *this)
{
  v1[0] = 0;
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  uint64_t v3 = 0;
  long long v2 = 0uLL;
  roost::matrix<float>::resize_storage((uint64_t)v1, 0, 0);
}

void sub_20D437974(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19)
{
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  roost::_layer_base_data::~_layer_base_data((void **)(v21 - 200));
  if (a19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a19);
  }
  uint64_t v23 = *(std::__shared_weak_count **)(v21 - 104);
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  _Unwind_Resume(a1);
}

void roost::_layer_base_data::~_layer_base_data(void **this)
{
  uint64_t v1 = *this;
  if (v1) {
    BNNSFilterDestroy(v1);
  }
}

void roost::_matrix_enumerator<float>::operator roost::matrix<float>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = a2[6];
  if (v4 == 1)
  {
    uint64_t v5 = *a2;
    uint64_t v7 = *(void *)(*a2 + 32);
    unint64_t v6 = *(std::__shared_weak_count **)(*a2 + 40);
    if (v6)
    {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v5 = *a2;
    }
    uint64_t v8 = a2[1];
    uint64_t v9 = *(void *)(v5 + 24);
    *(unsigned char *)a1 = *((unsigned char *)a2 + 16);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 3);
    *(void *)(a1 + ++*(_DWORD *)(result + 24) = v9;
    *(void *)(a1 + 32) = v7;
    *(void *)(a1 + 40) = v6;
    if (!v6)
    {
      *(void *)(a1 + 48) = v8;
      return;
    }
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    *(void *)(a1 + 48) = v8;
  }
  else
  {
    if (a2[5] != 1)
    {
      unint64_t v12 = a2[3];
      unint64_t v13 = a2[4];
      *(unsigned char *)a1 = 0;
      *(void *)(a1 + 8) = v12;
      *(void *)(a1 + 16) = v13;
      *(void *)(a1 + 40) = 0;
      *(void *)(a1 + 48) = 0;
      *(void *)(a1 + 32) = 0;
      roost::matrix<float>::resize_storage(a1, v12, v13);
    }
    uint64_t v10 = *(void *)(*a2 + 32);
    unint64_t v6 = *(std::__shared_weak_count **)(*a2 + 40);
    if (v6)
    {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v4 = a2[6];
    }
    uint64_t v11 = a2[1];
    *(unsigned char *)a1 = *((unsigned char *)a2 + 16);
    *(int8x16_t *)(a1 + 8) = vextq_s8(*(int8x16_t *)(a2 + 3), *(int8x16_t *)(a2 + 3), 8uLL);
    *(void *)(a1 + ++*(_DWORD *)(result + 24) = v4;
    *(void *)(a1 + 32) = v10;
    *(void *)(a1 + 40) = v6;
    if (!v6)
    {
      *(void *)(a1 + 48) = v11;
      return;
    }
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    *(void *)(a1 + 48) = v11;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v6);
}

void sub_20D438384(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  uint64_t v22 = *(std::__shared_weak_count **)(v20 + 40);
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  _Unwind_Resume(exception_object);
}

void roost::multiply_mm<float>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a2 + 16) == *(void *)(a3 + 8))
  {
    unint64_t v3 = *(void *)(a2 + 8);
    unint64_t v4 = *(void *)(a3 + 16);
    *(unsigned char *)a1 = 0;
    *(void *)(a1 + 8) = v3;
    *(void *)(a1 + 16) = v4;
    *(void *)(a1 + 40) = 0;
    *(void *)(a1 + 48) = 0;
    *(void *)(a1 + 32) = 0;
    roost::matrix<float>::resize_storage(a1, v3, v4);
  }
  exceptiounint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::range_error::range_error[abi:ne180100](exception, "Size mismatch");
  __cxa_throw(exception, (struct type_info *)&aPreparewithcon[8], MEMORY[0x263F8C050]);
}

void sub_20D4385A8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void roost::vector<float>::resize_storage(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = operator new(0x38uLL);
  v3[1] = 0;
  v3[2] = 0;
  *unint64_t v3 = off_26C219428;
  void v3[3] = off_26C211230;
  v3[4] = 1;
  v3[5] = a2;
  operator new[]();
}

void sub_20D4386E0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t roost::vector_activation_layer<float>::vector_activation_layer(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + ++*(_DWORD *)(result + 24) = 0;
  *(void *)(a1 + 16) = 0;
  roost::_layer_base_data::create_filter(a1, 0, 0, a2, a2, a3, a4);
  return a1;
}

void sub_20D438754(_Unwind_Exception *a1)
{
  roost::_layer_base_data::~_layer_base_data(v1);
  _Unwind_Resume(a1);
}

void roost::multiply_accumulate_vm<float>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4 != *(void *)(a1 + 8) || (uint64_t v5 = *(void *)(a2 + 16), v5 != *(void *)(a3 + 8)))
  {
    exceptiounint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::range_error::range_error[abi:ne180100](exception, "Size mismatch");
    __cxa_throw(exception, (struct type_info *)&aPreparewithcon[8], MEMORY[0x263F8C050]);
  }
  cblas_sgemv(CblasRowMajor, CblasTrans, v4, v5, 1.0, *(const float **)(a2 + 48), *(_DWORD *)(a2 + 24), *(const float **)(a1 + 40), *(_DWORD *)(a1 + 16), 1.0, *(float **)(a3 + 40), *(void *)(a3 + 16));
}

void sub_20D438838(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t roost::_layer_base<float>::apply(void *a1, const void *a2, void *a3)
{
  if (!a1)
  {
    exceptiounint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::domain_error::domain_error[abi:ne180100](exception);
    __cxa_throw(exception, (struct type_info *)&aPredictionfrom_0[32], MEMORY[0x263F8C058]);
  }
  return BNNSFilterApply(a1, a2, a3);
}

void sub_20D4388B0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::domain_error::domain_error[abi:ne180100](std::logic_error *a1)
{
  double result = std::logic_error::logic_error(a1, "Cannot emulate this activation function");
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C380] + 16);
  return result;
}

uint64_t roost::_layer_base_data::create_filter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  *(void *)(a1 + 8) = a5;
  *(void *)(a1 + 16) = a6;
  *(_DWORD *)(a1 + ++*(_DWORD *)(result + 24) = a7;
  v16[2] = 0;
  v17[0] = a4;
  v17[1] = 0x3F80000000010020;
  v17[2] = 0;
  v16[0] = a5;
  v16[1] = 0x3F80000000010020;
  v15[0] = xmmword_20D6CABA8;
  v15[1] = unk_20D6CABB8;
  if (a2)
  {
    v11[5] = 0;
    *(_OWORD *)&v11[1] = 0u;
    uint64_t v9 = a4;
    *(void *)&long long v10 = a5;
    *((void *)&v10 + 1) = a2;
    v11[0] = 0x3F80000000010020;
    v11[3] = a3;
    v11[4] = 0x3F80000000010020;
    v11[6] = 0;
    long long v12 = 0u;
    long long v13 = 0u;
    uint64_t v14 = 0;
    v11[7] = a6;
    LODWORD(v12) = a7;
    uint64_t result = MEMORY[0x210558A00](v17, v16, &v9, v15);
  }
  else
  {
    long long v10 = 0u;
    memset(v11, 0, 24);
    uint64_t v9 = a6;
    LODWORD(v10) = a7;
    uint64_t result = MEMORY[0x210558A10](v17, v16, &v9, v15);
  }
  *(void *)a1 = result;
  return result;
}

uint64_t std::pair<roost::_matrix_iterator<float const>,roost::_matrix_iterator<float const>>::~pair(uint64_t a1)
{
  long long v2 = *(std::__shared_weak_count **)(a1 + 88);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  unint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return a1;
}

void std::allocate_shared[abi:ne180100]<roost::contiguous_storage<float>,std::allocator<roost::contiguous_storage<float>>,unsigned long,unsigned long,void>()
{
  v0 = operator new(0x38uLL);
  v0[1] = 0;
  v0[2] = 0;
  void *v0 = off_26C2193F0;
  operator new[]();
}

void sub_20D438ADC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void roost::contiguous_storage<float>::~contiguous_storage(void *a1)
{
  *a1 = off_26C211230;
  uint64_t v1 = a1[3];
  if (v1) {
    MEMORY[0x2105595C0](v1, 0x1000C8052888210);
  }
  JUMPOUT(0x2105595E0);
}

void *roost::contiguous_storage<float>::~contiguous_storage(void *a1)
{
  *a1 = off_26C211230;
  uint64_t v2 = a1[3];
  if (v2) {
    MEMORY[0x2105595C0](v2, 0x1000C8052888210);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<roost::contiguous_storage<float>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<roost::contiguous_storage<float>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C2193F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<roost::contiguous_storage<float>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C2193F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void to_roost<float,float>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a2;
  uint64_t v3 = *(void *)(a2 + 8) - *(void *)a2;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * (v3 >> 3);
  if (v3) {
    unint64_t v5 = (uint64_t)(v2[1] - *v2) >> 2;
  }
  else {
    unint64_t v5 = 0;
  }
  *(unsigned char *)a1 = 0;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 32) = 0;
  roost::matrix<float>::resize_storage(a1, v4, v5);
}

void sub_20D438E68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v11 = *(std::__shared_weak_count **)(a10 + 40);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  _Unwind_Resume(exception_object);
}

void to_std<float,float>(uint64_t *a1, unint64_t *a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  std::vector<std::vector<float>>::reserve(a1, a2[1]);
  unint64_t v4 = a2[1];
  unint64_t v5 = a2[2];
  unint64_t v6 = a2[3];
  uint64_t v7 = (std::__shared_weak_count *)a2[5];
  unint64_t v8 = a2[6];
  if (v7
    && (atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed),
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed),
        std::__shared_weak_count::__release_shared[abi:ne180100](v7),
        (uint64_t v9 = (std::__shared_weak_count *)a2[5]) != 0))
  {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v21 = v9;
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    char v22 = 0;
  }
  else
  {
    uint64_t v21 = 0;
    char v22 = 1;
  }
  unint64_t v10 = v6 * v4;
  if (v6 * v4)
  {
    uint64_t v11 = 0;
    long long v12 = a1 + 2;
    long long v13 = (void *)a1[1];
    uint64_t v14 = 4 * v10;
    uint64_t v15 = 4 * v6;
    unint64_t v16 = v8 + 4 * v5;
    do
    {
      if ((unint64_t)v13 >= *v12)
      {
        unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v13 - *a1) >> 3);
        unint64_t v18 = v17 + 1;
        if (v17 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        if (0x5555555555555556 * ((*v12 - *a1) >> 3) > v18) {
          unint64_t v18 = 0x5555555555555556 * ((*v12 - *a1) >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((*v12 - *a1) >> 3) >= 0x555555555555555) {
          unint64_t v19 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v19 = v18;
        }
        uint64_t v27 = a1 + 2;
        if (v19) {
          uint64_t v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)(a1 + 2), v19);
        }
        else {
          uint64_t v20 = 0;
        }
        uint64_t v23 = v20;
        int v24 = &v20[24 * v17];
        uint64_t v25 = v24;
        uint64_t v26 = &v20[24 * v19];
        std::vector<float>::vector<roost::_vector_iterator<float>,0>(v24, (_DWORD *)(v8 + v11), 1, (_DWORD *)(v16 + v11), 1);
        v25 += 24;
        std::vector<std::vector<float>>::__swap_out_circular_buffer(a1, &v23);
        long long v13 = (void *)a1[1];
        std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)&v23);
      }
      else
      {
        std::vector<float>::vector<roost::_vector_iterator<float>,0>(v13, (_DWORD *)(v8 + v11), 1, (_DWORD *)(v16 + v11), 1);
        v13 += 3;
        a1[1] = (uint64_t)v13;
      }
      a1[1] = (uint64_t)v13;
      v11 += v15;
    }
    while (v14 != v11);
  }
  if ((v22 & 1) == 0) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
}

void sub_20D4390C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<float>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 24 * v6;
    std::vector<std::vector<float>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_20D4391C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::vector<float>::vector<roost::_vector_iterator<float>,0>(void *a1, _DWORD *a2, uint64_t a3, _DWORD *a4, uint64_t a5)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a5 != a3)
  {
    exceptiounint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::range_error::range_error[abi:ne180100](exception, "Stride mismatch");
    __cxa_throw(exception, (struct type_info *)&aPreparewithcon[8], MEMORY[0x263F8C050]);
  }
  uint64_t v7 = a2;
  unint64_t v9 = (a4 - a2) / a3;
  if (v9)
  {
    std::vector<int>::__vallocate[abi:ne180100](a1, v9);
    for (uint64_t i = (_DWORD *)a1[1]; v7 != a4; v7 += a3)
      *i++ = *v7;
    a1[1] = i;
  }
  return a1;
}

void sub_20D439294(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void NNetExtractor::compute_output(uint64_t a1, uint8_t *a2)
{
  uint64_t v4 = *(void **)a2;
  uint64_t v5 = (void *)*((void *)a2 + 1);
  if (v5 == *(void **)a2)
  {
    uint64_t v4 = (void *)*((void *)a2 + 1);
  }
  else
  {
    unint64_t v6 = 0;
    do
    {
      if (((*(_WORD *)(a1 + 232) - 1) & 0x8000) == 0)
      {
        uint64_t v7 = (unsigned __int16)(*(_WORD *)(a1 + 232) - 1);
        do
        {
          unint64_t v8 = (void *)(*(void *)a2 + 24 * v6);
          uint64_t v9 = *v8 + 4 * *(unsigned int *)(*(void *)(a1 + 272) + 4 * v7);
          uint64_t v11 = v8[1];
          unint64_t v10 = v8 + 1;
          size_t v12 = v11 - (v9 + 4);
          if (v11 != v9 + 4) {
            memmove((void *)(*(void *)(*(void *)a2 + 24 * v6) + 4 * *(unsigned int *)(*(void *)(a1 + 272) + 4 * v7)), (const void *)(v9 + 4), v12);
          }
          *unint64_t v10 = v9 + v12;
        }
        while (v7-- > 0);
        uint64_t v4 = *(void **)a2;
        uint64_t v5 = (void *)*((void *)a2 + 1);
      }
      ++v6;
    }
    while (v6 < 0xAAAAAAAAAAAAAAABLL * (v5 - v4));
  }
  unint64_t v14 = v4[1] - *v4;
  if ((v14 >> 2) != *(_DWORD *)(a1 + 240) >> 1)
  {
    exceptiounint64_t n = __cxa_allocate_exception(0x10uLL);
    StringFormatter::StringFormatter((StringFormatter *)buf, "Dimensions of data entering compute output is incorrect, computing mdn output will fail stopping datadim, in_norms_size_ follow.");
    MEMORY[0x210558D40](exception, buf);
    __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (v5 == v4)
  {
    unint64_t v18 = 0;
  }
  else
  {
    uint64_t v15 = 0;
    unint64_t v16 = 0;
    vDSP_Length __N = (v14 >> 2);
    do
    {
      vDSP_vma((const float *)v4[v15], 1, *(const float **)(a1 + 304), 1, (const float *)(*(void *)(a1 + 304) + 4 * __N), 1, (float *)v4[v15], 1, __N);
      ++v16;
      uint64_t v4 = *(void **)a2;
      unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 1) - *(void *)a2) >> 3);
      v15 += 3;
    }
    while (v16 < v18);
  }
  uint64_t v19 = v18 << 32;
  if ((*(_WORD *)a1 & 0xFFFE) == 2) {
    to_roost<float,float>((uint64_t)buf, (uint64_t)a2);
  }
  global_queue = dispatch_get_global_queue(2, 0);
  *(void *)int buf = 0;
  unint64_t v58 = buf;
  uint64_t v59 = 0x4002000000;
  long long v60 = __Block_byref_object_copy__4800;
  BOOL v61 = __Block_byref_object_dispose__4801;
  size_t v21 = (int)v18;
  LODWORD(v64) = 0;
  std::vector<float>::vector(__B, 1uLL, &v64);
  std::vector<std::vector<float>>::vector(v62, (int)v18, (uint64_t)__B);
  if (__B[0])
  {
    __B[1] = __B[0];
    operator delete(__B[0]);
  }
  if (*(_DWORD *)(a1 + 236))
  {
    unint64_t v22 = 0;
    int v23 = 0;
    if ((unint64_t)(int)v18 <= 1) {
      uint64_t v24 = 1;
    }
    else {
      uint64_t v24 = (int)v18;
    }
    uint64_t v54 = v24;
    do
    {
      uint64_t v25 = *(void *)(a1 + 296);
      unsigned int v26 = *(_DWORD *)(v25 + 4 * v22);
      if (v26 >= 2)
      {
        block[0] = MEMORY[0x263EF8330];
        block[1] = 0x40000000;
        block[2] = ___ZN13NNetExtractor14compute_outputERNSt3__16vectorINS1_IfNS0_9allocatorIfEEEENS2_IS4_EEEE_block_invoke;
        block[3] = &unk_264114800;
        block[4] = buf;
        block[5] = a1;
        block[6] = v22;
        block[7] = a2;
        int v56 = v23;
        dispatch_apply(v21, global_queue, block);
        uint64_t v25 = *(void *)(a1 + 296);
        unsigned int v26 = *(_DWORD *)(v25 + 4 * v22);
        uint64_t v27 = (void *)*((void *)v58 + 5);
        v23 += ((v27[1] - *v27) >> 2) + ((*(void *)(*(void *)a2 + 8) - **(void **)a2) >> 2) * v26;
        if (v58 + 40 != a2)
        {
          std::vector<std::vector<float>>::__assign_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>((uint64_t)a2, (uint64_t)v27, *((void *)v58 + 6), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v58 + 6) - (void)v27) >> 3));
          uint64_t v25 = *(void *)(a1 + 296);
          unsigned int v26 = *(_DWORD *)(v25 + 4 * v22);
        }
      }
      unsigned int v28 = *(_DWORD *)(a1 + 236);
      if (v26 != 1) {
        goto LABEL_46;
      }
      unint64_t v29 = v28 - 1;
      if (v22 < v29)
      {
        LODWORD(__B[0]) = 0;
        if (v19)
        {
          uint64_t v30 = 0;
          uint64_t v31 = v54;
          do
          {
            vDSP_vthr(*(const float **)(*(void *)a2 + v30), 1, (const float *)__B, *(float **)(*(void *)a2 + v30), 1, (uint64_t)(*(void *)(*(void *)a2 + v30 + 8) - *(void *)(*(void *)a2 + v30)) >> 2);
            v30 += 24;
            --v31;
          }
          while (v31);
          uint64_t v25 = *(void *)(a1 + 296);
          unsigned int v28 = *(_DWORD *)(a1 + 236);
        }
        if (*(_DWORD *)(v25 + 4 * v22) != 1) {
          goto LABEL_46;
        }
        unint64_t v29 = v28 - 1;
      }
      if (v22 == v29 && v19 != 0)
      {
        uint64_t v33 = 0;
        uint64_t v34 = v54;
        do
        {
          uint64_t v35 = *(void *)(*(void *)a2 + v33);
          unint64_t v36 = (unint64_t)(*(void *)(*(void *)a2 + v33 + 8) - v35) >> 3;
          LODWORD(__B[0]) = v36;
          vvexpf((float *)(v35 + 4 * (int)v36), (const float *)(v35 + 4 * (int)v36), (const int *)__B);
          v33 += 24;
          --v34;
        }
        while (v34);
        unsigned int v28 = *(_DWORD *)(a1 + 236);
      }
LABEL_46:
      ++v22;
    }
    while (v22 < v28);
  }
  _Block_object_dispose(buf, 8);
  __B[0] = (void **)v62;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](__B);
  unint64_t v37 = *(void *)(*(void *)a2 + 8) - **(void **)a2;
  unint64_t v38 = v37 >> 2;
  *(_DWORD *)(a1 + 248) = v37 >> 2;
  if ((*(unsigned char *)(a1 + 320) & 3) != 0)
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    uint64_t v39 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl(&dword_20CD80000, v39, OS_LOG_TYPE_ERROR, "Will crash on ARM32 in neural net need 4 byte alignments ", buf, 2u);
    }
    Diagnostics::log(3, "Will crash on ARM32 in neural net need 4 byte alignments ", v40);
  }
  if (v19)
  {
    uint64_t v41 = 0;
    if ((v38 & 0x80000000) == 0) {
      int v42 = v37 >> 2;
    }
    else {
      int v42 = v38 + 1;
    }
    int v43 = v42 >> 1;
    vDSP_Length v44 = (uint64_t)v42 >> 1;
    vDSP_Length v45 = (int)((uint64_t)v37 >> 2);
    if ((unint64_t)(v19 >> 32) <= 1) {
      uint64_t v46 = 1;
    }
    else {
      uint64_t v46 = v19 >> 32;
    }
    vDSP_Length v47 = v45 - v43;
    uint64_t v48 = 4 * v43;
    do
    {
      vDSP_vma(*(const float **)(*(void *)a2 + 24 * v41), 1, *(const float **)(a1 + 320), 1, (const float *)(*(void *)(a1 + 320) + 4 * v44), 1, *(float **)(*(void *)a2 + 24 * v41), 1, v44);
      if (v45 > v44)
      {
        uint64_t v49 = *(float **)(a1 + 320);
        long long v50 = (float *)(*(void *)(*(void *)a2 + 24 * v41) + v48);
        vDSP_Length v51 = v47;
        do
        {
          float v52 = *v49++;
          *long long v50 = (float)(v52 * v52) * *v50;
          ++v50;
          --v51;
        }
        while (v51);
      }
      ++v41;
    }
    while (v41 != v46);
  }
}

void sub_20D439A3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  uint64_t v34 = *(void **)(v32 - 144);
  if (v34)
  {
    *(void *)(v32 - 136) = v34;
    operator delete(v34);
  }
  _Unwind_Resume(exception_object);
}

__n128 __Block_byref_object_copy__4800(void *a1, uint64_t a2)
{
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(void *)(a2 + 56);
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__4801(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 40);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

char *___ZN13NNetExtractor14compute_outputERNSt3__16vectorINS1_IfNS0_9allocatorIfEEEENS2_IS4_EEEE_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v5 = 3 * a2;
  std::vector<float>::resize(*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) + 24 * a2, *(unsigned int *)(*(void *)(v4 + 296) + 4 * *(void *)(a1 + 48)));
  uint64_t v6 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) + 8 * v5;
  __n128 result = *(char **)v6;
  unint64_t v8 = *(unsigned char **)(v6 + 8);
  if (v8 - result >= 1)
  {
    bzero(result, 4 * (((unint64_t)(v8 - result) >> 2) - ((unint64_t)(v8 - result) > 3)) + 4);
    uint64_t v9 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) + 24 * a2;
    __n128 result = *(char **)v9;
    unint64_t v8 = *(unsigned char **)(v9 + 8);
  }
  if (v8 != result)
  {
    uint64_t v10 = 0;
    unint64_t v11 = 0;
    uint64_t v12 = **(void **)(a1 + 56) + 24 * a2;
    uint64_t v13 = *(void *)(v4 + 280);
    LODWORD(v14) = *(_DWORD *)(a1 + 64);
    uint64_t v15 = *(const float **)v12;
    uint64_t v16 = *(void *)(v12 + 8);
    do
    {
      vDSP_dotpr(v15, 1, (const float *)(v13 + 4 * (((v16 - (uint64_t)v15) >> 2) * v11 + (int)v14)), 1, (float *)&result[v10], (v16 - (uint64_t)v15) >> 2);
      uint64_t v13 = *(void *)(v4 + 280);
      uint64_t v14 = *(int *)(a1 + 64);
      uint64_t v15 = *(const float **)(**(void **)(a1 + 56) + 24 * a2);
      uint64_t v16 = *(void *)(**(void **)(a1 + 56) + 24 * a2 + 8);
      uint64_t v17 = *(void *)(*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) + 24 * a2);
      *(float *)(v17 + 4 * v11) = *(float *)(v13
                                           + 4
                                           * (v11
                                            + v14
                                            + ((unint64_t)(v16 - (void)v15) >> 2)
                                            * *(unsigned int *)(*(void *)(v4 + 296) + 4 * *(void *)(a1 + 48))))
                                + *(float *)(v17 + 4 * v11);
      ++v11;
      uint64_t v18 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) + 24 * a2;
      __n128 result = *(char **)v18;
      v10 += 4;
    }
    while (v11 < (uint64_t)(*(void *)(v18 + 8) - *(void *)v18) >> 2);
  }
  return result;
}

void WhisperModule::process_data(uint64_t a1, uint64_t *a2)
{
  if (*(unsigned char *)v5)
  {
    *(void *)(a1 + 288) = *(void *)(a1 + 280);
    v97[0] = 0;
    std::vector<float>::assign((char **)(a1 + 304), 0x14uLL, v97);
  }
  uint64_t v85 = v5;
  if (*(unsigned char *)(a1 + 273) || *(_DWORD *)(v5 + 80) == 1)
  {
    long long v102 = 0;
    uint64_t v103 = 0;
    uint64_t v104 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v102, *(const void **)(a1 + 280), *(void *)(a1 + 288), (uint64_t)(*(void *)(a1 + 288) - *(void *)(a1 + 280)) >> 2);
    float v52 = *(char **)(v5 + 56);
    int32x2_t v53 = *(char **)(v5 + 64);
    uint64_t v54 = (char *)(v5 + 56);
    std::vector<float>::__insert_with_size[abi:ne180100]<std::__wrap_iter<float const*>,std::__wrap_iter<float const*>>((uint64_t)&v102, v103, v52, v53, (v53 - v52) >> 2);
    Whisper::Whisper((Whisper *)v97, *(_DWORD *)(a1 + 276));
    Whisper::whisper(&v95, (uint64_t)v97, &v102);
    uint64_t v56 = *(void *)(a1 + 280);
    uint64_t v55 = *(void *)(a1 + 288);
    int64x2_t v57 = *(char **)(v85 + 56);
    uint64_t v58 = *(void *)(v85 + 64);
    unint64_t v59 = (v58 - (uint64_t)v57) >> 2;
    if ((char *)(a1 + 280) != v54) {
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 280), v57, v58, (v58 - (uint64_t)v57) >> 2);
    }
    unint64_t v60 = (v55 - v56) >> 2;
    BOOL v61 = (char *)v95 + 4 * v60 + 4 * (v59 >> 1);
    int v93 = 0;
    uint64_t v94 = 0;
    uint64_t v92 = 0;
    std::vector<float>::__init_with_size[abi:ne180100]<std::__wrap_iter<float *>,std::__wrap_iter<float *>>(&v92, (char *)v95 + 4 * (v60 >> 1), (uint64_t)v61, (v61 - ((unsigned char *)v95 + 4 * (v60 >> 1))) >> 2);
    uint64_t v62 = *(void *)(a1 + 304);
    uint64_t v63 = *(void *)(a1 + 312) - v62;
    uint64_t v64 = (char *)v92;
    uint64_t v65 = v93;
    if ((v93 - (unsigned char *)v92) >> 2 >= (unint64_t)(v63 >> 2)) {
      unint64_t v66 = v63 >> 2;
    }
    else {
      unint64_t v66 = (v93 - (unsigned char *)v92) >> 2;
    }
    if (v66 >= 0x14) {
      unint64_t v67 = 20;
    }
    else {
      unint64_t v67 = v66;
    }
    if (v67)
    {
      for (unint64_t i = 0; i != v67; ++i)
        *(float *)&v64[4 * i] = (float)((float)(1.0 - (float)((float)i / (float)(v67 - 1))) * *(float *)(v62 + 4 * i))
                              + (float)((float)((float)i / (float)(v67 - 1)) * *(float *)&v64[4 * i]);
    }
    std::vector<float>::__assign_with_size[abi:ne180100]<std::__wrap_iter<float *>,std::__wrap_iter<float *>>(v54, v64, (uint64_t)&v65[-4 * v67], (&v65[-4 * v67] - v64) >> 2);
    std::vector<float>::__assign_with_size[abi:ne180100]<std::__wrap_iter<float *>,std::__wrap_iter<float *>>((char *)(a1 + 304), &v93[-4 * v67], (uint64_t)v93, v67);
    BOOL v69 = (std::__shared_weak_count *)a2[1];
    uint64_t v90 = *a2;
    uint64_t v91 = v69;
    if (v69) {
      atomic_fetch_add_explicit(&v69->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 72))(a1, &v90);
    if (v91) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v91);
    }
    if (v92)
    {
      int v93 = (char *)v92;
      operator delete(v92);
    }
    if (v95)
    {
      int64_t v96 = v95;
      operator delete(v95);
    }
    if (v100)
    {
      std::string::size_type v101 = v100;
      operator delete(v100);
    }
    if (v98)
    {
      int v99 = v98;
      operator delete(v98);
    }
    BOOL v70 = v102;
    if (v102)
    {
      uint64_t v103 = (uint64_t)v102;
LABEL_128:
      operator delete(v70);
    }
  }
  else
  {
    uint64_t v7 = *(void *)(v5 + 8);
    uint64_t v6 = *(void *)(v5 + 16);
    if (v6 != v7)
    {
      unint64_t v8 = 0;
      uint64_t v9 = 0;
      uint64_t v10 = 0;
      uint64_t v11 = 0;
      unint64_t v12 = 0;
      uint64_t v84 = a1;
      while (1)
      {
        uint64_t v13 = v7 + 184 * v12;
        uint64_t v16 = *(void *)(v13 + 160);
        uint64_t v14 = (void *)(v13 + 160);
        uint64_t v15 = v16;
        uint64_t v4 = v14 + 1;
        uint64_t v17 = v14[1];
        if (v17 == v16) {
          goto LABEL_59;
        }
        unint64_t v18 = 0;
        do
        {
          int v19 = *(_DWORD *)(v15 + 56 * v18);
          if (v19 == 1)
          {
            char v23 = 0;
LABEL_16:
            *(unsigned char *)(a1 + 272) = v23;
            goto LABEL_17;
          }
          if (v19 != 8) {
            goto LABEL_17;
          }
          uint64_t v20 = v15 + 56 * v18;
          size_t v21 = (uint64_t *)(v20 + 8);
          int v22 = *(char *)(v20 + 31);
          if (v22 < 0)
          {
            uint64_t v24 = v21[1];
            if (v24 == 6)
            {
              size_t v21 = (uint64_t *)*v21;
LABEL_32:
              int v28 = *(_DWORD *)v21;
              int v29 = *((unsigned __int16 *)v21 + 2);
              if (v28 == 1836216174 && v29 == 27745)
              {
                char v23 = *(unsigned char *)(a1 + 272);
                if (v23)
                {
                  uint64_t v31 = (v12 - v11);
                  if (v10 >= v9)
                  {
                    uint64_t v33 = (unint64_t *)v8;
                    uint64_t v34 = ((char *)v10 - (char *)v8) >> 3;
                    unint64_t v35 = v34 + 1;
                    std::string __p = v33;
                    if ((unint64_t)(v34 + 1) >> 61) {
                      std::vector<int>::__throw_length_error[abi:ne180100]();
                    }
                    unint64_t v36 = (char *)v9 - (char *)v33;
                    unint64_t v37 = ((char *)v9 - (char *)v33) >> 2;
                    if (v37 > v35) {
                      unint64_t v35 = v37;
                    }
                    if (v36 >= 0x7FFFFFFFFFFFFFF8) {
                      unint64_t v38 = 0x1FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v38 = v35;
                    }
                    if (v38)
                    {
                      if (v38 >> 61) {
                        std::__throw_bad_array_new_length[abi:ne180100]();
                      }
                      uint64_t v39 = v4;
                      uint64_t v40 = v14;
                      unint64_t v41 = v38;
                      int v42 = (char *)operator new(8 * v38);
                      uint64_t v14 = v40;
                      uint64_t v31 = (v12 - v11);
                      a1 = v84;
                      uint64_t v4 = v39;
                      unint64_t v38 = v41;
                    }
                    else
                    {
                      int v42 = 0;
                    }
                    unint64_t v8 = (int *)&v42[8 * v34];
                    *(void *)unint64_t v8 = v11 | (unint64_t)(v31 << 32);
                    uint64_t v32 = (unint64_t *)(v8 + 2);
                    if (v10 == __p)
                    {
                      int v43 = __p;
                    }
                    else
                    {
                      int v43 = __p;
                      do
                      {
                        uint64_t v44 = *--v10;
                        *((void *)v8 - 1) = v44;
                        v8 -= 2;
                      }
                      while (v10 != __p);
                    }
                    uint64_t v9 = (unint64_t *)&v42[8 * v38];
                    if (v43)
                    {
                      vDSP_Length v45 = v9;
                      uint64_t v46 = v11;
                      vDSP_Length v47 = v14;
                      uint64_t v48 = v4;
                      operator delete(v43);
                      uint64_t v4 = v48;
                      uint64_t v14 = v47;
                      a1 = v84;
                      uint64_t v9 = v45;
                      uint64_t v11 = v46;
                    }
                    uint64_t v5 = v85;
                  }
                  else
                  {
                    *uint64_t v10 = v11 | (unint64_t)(v31 << 32);
                    uint64_t v32 = v10 + 1;
                  }
                  char v23 = 0;
                  uint64_t v17 = *v4;
                  uint64_t v15 = *v14;
                  uint64_t v10 = v32;
                }
                goto LABEL_16;
              }
              goto LABEL_17;
            }
            if (v24 != 7) {
              goto LABEL_17;
            }
            size_t v21 = (uint64_t *)*v21;
          }
          else
          {
            if (v22 == 6) {
              goto LABEL_32;
            }
            if (v22 != 7) {
              goto LABEL_17;
            }
          }
          int v25 = *(_DWORD *)v21;
          int v26 = *(_DWORD *)((char *)v21 + 3);
          if (v25 == 1936287863 && v26 == 1919250547)
          {
            if (*(unsigned char *)(a1 + 272)) {
              uint64_t v11 = v11;
            }
            else {
              uint64_t v11 = v12;
            }
            char v23 = 1;
            goto LABEL_16;
          }
LABEL_17:
          ++v18;
        }
        while (v18 < 0x6DB6DB6DB6DB6DB7 * ((v17 - v15) >> 3));
        uint64_t v7 = *(void *)(v5 + 8);
        uint64_t v6 = *(void *)(v5 + 16);
LABEL_59:
        ++v12;
        unint64_t v49 = 0xD37A6F4DE9BD37A7 * ((v6 - v7) >> 3);
        if (v12 >= v49)
        {
          if (!*(unsigned char *)(a1 + 272))
          {
            vDSP_Length v51 = (int *)v10;
            goto LABEL_106;
          }
          unint64_t v50 = (v49 - v11);
          if (v10 < v9)
          {
            *uint64_t v10 = v11 | (v50 << 32);
            vDSP_Length v51 = (int *)(v10 + 1);
            goto LABEL_106;
          }
LABEL_90:
          uint64_t v71 = ((char *)v10 - (char *)v8) >> 3;
          unint64_t v72 = v71 + 1;
          if ((unint64_t)(v71 + 1) >> 61) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          if (((char *)v9 - (char *)v8) >> 2 > v72) {
            unint64_t v72 = ((char *)v9 - (char *)v8) >> 2;
          }
          if ((unint64_t)((char *)v9 - (char *)v8) >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v72 = 0x1FFFFFFFFFFFFFFFLL;
          }
          if (v72)
          {
            if (v72 >> 61) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            BOOL v73 = (char *)operator new(8 * v72);
          }
          else
          {
            BOOL v73 = 0;
          }
          int v74 = (unint64_t *)&v73[8 * v71];
          *int v74 = v11 | (v50 << 32);
          vDSP_Length v51 = (int *)(v74 + 1);
          while (v10 != (unint64_t *)v8)
          {
            unint64_t v75 = *--v10;
            *--int v74 = v75;
          }
          if (v8) {
            operator delete(v8);
          }
          unint64_t v8 = (int *)v74;
          uint64_t v5 = v85;
LABEL_106:
          if (v8 != v51)
          {
            __pa = v8;
            BOOL v76 = v8;
            do
            {
              uint64_t v77 = *(void *)(v5 + 32);
              uint64_t v78 = *v76;
              uint64_t v79 = *(int *)(v77 + 4 * v78);
              uint64_t v80 = *(int *)(v77 + 4 * ((int)v78 + v76[1] - 1));
              if ((double)*(int *)(a1 + 276) / 1000.0 * 25.0 <= (double)((int)v80 - (int)v79))
              {
                uint64_t v81 = *(void *)(v5 + 56);
                uint64_t v103 = 0;
                uint64_t v104 = 0;
                long long v102 = 0;
                std::vector<float>::__init_with_size[abi:ne180100]<std::__wrap_iter<float *>,std::__wrap_iter<float *>>(&v102, (const void *)(v81 + 4 * v79), v81 + 4 * v80, v80 - v79);
                Whisper::Whisper((Whisper *)v97, *(_DWORD *)(a1 + 276));
                Whisper::whisper(&v95, (uint64_t)v97, &v102);
                BOOL v82 = v95;
                uint64_t v4 = (void *)(v96 - (unsigned char *)v95);
                if (v96 != v95)
                {
                  memmove((void *)(*(void *)(v5 + 56) + 4 * v79), v95, (size_t)v4);
                  BOOL v82 = v95;
                }
                if (v82)
                {
                  int64_t v96 = v82;
                  operator delete(v82);
                }
                if (v100)
                {
                  std::string::size_type v101 = v100;
                  operator delete(v100);
                }
                if (v98)
                {
                  int v99 = v98;
                  operator delete(v98);
                }
                if (v102)
                {
                  uint64_t v103 = (uint64_t)v102;
                  operator delete(v102);
                }
              }
              v76 += 2;
            }
            while (v76 != v51);
            unint64_t v8 = __pa;
          }
          goto LABEL_122;
        }
      }
    }
    if (*(unsigned char *)(a1 + 272))
    {
      unint64_t v8 = 0;
      uint64_t v9 = 0;
      uint64_t v10 = 0;
      LODWORD(v11) = 0;
      unint64_t v50 = 0xD37A6F4DE9BD37A7 * ((v6 - v7) >> 3);
      goto LABEL_90;
    }
    unint64_t v8 = 0;
LABEL_122:
    BOOL v83 = (std::__shared_weak_count *)a2[1];
    uint64_t v88 = *a2;
    uint64_t v89 = v83;
    if (v83) {
      atomic_fetch_add_explicit(&v83->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)a1 + 72))(a1, &v88, v4);
    if (v89) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v89);
    }
    if (v8)
    {
      BOOL v70 = v8;
      goto LABEL_128;
    }
  }
}

void sub_20D43A460(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,char a24)
{
  if (__p) {
    operator delete(__p);
  }
  Whisper::~Whisper((Whisper *)&a24);
  int v26 = *(void **)(v24 - 128);
  if (v26)
  {
    *(void *)(v24 - 120) = v26;
    operator delete(v26);
  }
  _Unwind_Resume(a1);
}

void Whisper::~Whisper(Whisper *this)
{
  uint64_t v2 = (void *)*((void *)this + 10);
  if (v2)
  {
    *((void *)this + 11) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 7);
  if (v3)
  {
    *((void *)this + 8) = v3;
    operator delete(v3);
  }
}

void WhisperModule::~WhisperModule(WhisperModule *this)
{
  *(void *)this = off_26C2009A0;
  uint64_t v2 = (void *)*((void *)this + 38);
  if (v2)
  {
    *((void *)this + 39) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 35);
  if (v3)
  {
    *((void *)this + 36) = v3;
    operator delete(v3);
  }
  Module::~Module(this);
  JUMPOUT(0x2105595E0);
}

{
  void *v2;
  void *v3;
  uint64_t vars8;

  *(void *)this = off_26C2009A0;
  uint64_t v2 = (void *)*((void *)this + 38);
  if (v2)
  {
    *((void *)this + 39) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 35);
  if (v3)
  {
    *((void *)this + 36) = v3;
    operator delete(v3);
  }
  Module::~Module(this);
}

uint64_t DebuggableAlias::debug_command(DebuggableAlias *this, CommandHandler *a2)
{
  if (!Debuggable_aliases) {
    operator new();
  }
  CommandHandler::next_word((CommandHandler *)__p, (uint64_t *)a2);
  std::string::__init_with_sentinel[abi:ne180100]<std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>(&v6, *(void **)((char *)a2 + *(void *)(*(void *)a2 - 24) + 40));
  uint64_t v9 = __p;
  uint64_t v3 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)Debuggable_aliases, (const void **)__p, (uint64_t)&std::piecewise_construct, (long long **)&v9);
  uint64_t v4 = (void **)(v3 + 7);
  if (*((char *)v3 + 79) < 0) {
    operator delete(*v4);
  }
  *(std::string *)uint64_t v4 = v6;
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  return 0;
}

void sub_20D43A76C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *CommandHandler::next_word(CommandHandler *this, uint64_t *a2)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  return std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (uint64_t)this);
}

void sub_20D43A7D4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void DebuggableAlias::~DebuggableAlias(DebuggableAlias *this)
{
}

void Debuggable::register_debuggable(long long *a1, uint64_t a2)
{
  uint64_t v3 = Debuggable_commands;
  if (!Debuggable_commands) {
    operator new();
  }
  unint64_t v4 = *(void *)(Debuggable_commands + 8);
  if (v4 >= *(void *)(Debuggable_commands + 16))
  {
    uint64_t v5 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)Debuggable_commands, a1);
  }
  else
  {
    std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>(Debuggable_commands, a1);
    uint64_t v5 = v4 + 24;
  }
  *(void *)(v3 + 8) = v5;
  uint64_t v6 = Debuggables;
  char v8 = *(void **)(Debuggables + 8);
  unint64_t v7 = *(void *)(Debuggables + 16);
  if ((unint64_t)v8 >= v7)
  {
    uint64_t v10 = *(void **)Debuggables;
    uint64_t v11 = ((uint64_t)v8 - *(void *)Debuggables) >> 3;
    unint64_t v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 61) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v13 = v7 - (void)v10;
    if (v13 >> 2 > v12) {
      unint64_t v12 = v13 >> 2;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v12;
    }
    if (v14)
    {
      if (v14 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v15 = (char *)operator new(8 * v14);
    }
    else
    {
      uint64_t v15 = 0;
    }
    uint64_t v16 = &v15[8 * v11];
    *(void *)uint64_t v16 = a2;
    uint64_t v9 = v16 + 8;
    if (v8 != v10)
    {
      do
      {
        uint64_t v17 = *--v8;
        *((void *)v16 - 1) = v17;
        v16 -= 8;
      }
      while (v8 != v10);
      char v8 = *(void **)v6;
    }
    *(void *)uint64_t v6 = v16;
    *(void *)(v6 + 8) = v9;
    *(void *)(v6 + 16) = &v15[8 * v14];
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    void *v8 = a2;
    uint64_t v9 = v8 + 1;
  }
  *(void *)(v6 + 8) = v9;
}

void sub_20D43AA3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Debuggable::command_match(unsigned __int8 *a1, const std::string **a2, uint64_t a3)
{
  if ((a1[23] & 0x80u) == 0) {
    std::string::size_type v6 = a1[23];
  }
  else {
    std::string::size_type v6 = *((void *)a1 + 1);
  }
  unint64_t v7 = *a2;
  char v8 = (unsigned __int8 *)a2[1];
  if (*a2 != (const std::string *)v8)
  {
    uint64_t v9 = 0xFFFFFFFFLL;
    while (1)
    {
      std::string::basic_string(&__p, v7, 0, v6, (std::allocator<char> *)&v51);
      uint64_t v10 = a1[23];
      if ((v10 & 0x80u) == 0) {
        uint64_t v11 = a1[23];
      }
      else {
        uint64_t v11 = *((void *)a1 + 1);
      }
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      int v13 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
      }
      if (v11 != size)
      {
        BOOL v23 = 0;
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_28;
        }
        goto LABEL_31;
      }
      unint64_t v14 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &__p
          : (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((v10 & 0x80) != 0) {
        break;
      }
      if (a1[23])
      {
        uint64_t v15 = v10 - 1;
        uint64_t v16 = a1;
        do
        {
          int v18 = *v16++;
          int v17 = v18;
          int v20 = v14->__r_.__value_.__s.__data_[0];
          unint64_t v14 = (std::string *)((char *)v14 + 1);
          int v19 = v20;
          BOOL v22 = v15-- != 0;
          BOOL v23 = v17 == v19;
        }
        while (v17 == v19 && v22);
LABEL_27:
        if ((v13 & 0x80000000) == 0) {
          goto LABEL_28;
        }
LABEL_31:
        operator delete(__p.__r_.__value_.__l.__data_);
        if (v23) {
          goto LABEL_32;
        }
LABEL_51:
        if (++v7 == (const std::string *)v8)
        {
          if (v9 != -1) {
            return v9;
          }
          goto LABEL_79;
        }
      }
      else
      {
        BOOL v23 = 1;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          goto LABEL_31;
        }
LABEL_28:
        if (!v23) {
          goto LABEL_51;
        }
LABEL_32:
        uint64_t v24 = a1[23];
        if ((v24 & 0x80u) == 0) {
          uint64_t v25 = a1[23];
        }
        else {
          uint64_t v25 = *((void *)a1 + 1);
        }
        std::string::size_type v26 = HIBYTE(v7->__r_.__value_.__r.__words[2]);
        int v27 = (char)v26;
        if ((v26 & 0x80u) != 0) {
          std::string::size_type v26 = v7->__r_.__value_.__l.__size_;
        }
        if (v25 == v26)
        {
          if (v27 >= 0) {
            int v28 = v7;
          }
          else {
            int v28 = (const std::string *)v7->__r_.__value_.__r.__words[0];
          }
          if ((v24 & 0x80) != 0)
          {
            if (!memcmp(*(const void **)a1, v28, *((void *)a1 + 1)))
            {
LABEL_74:
              if (*(char *)(a3 + 23) < 0)
              {
                **(unsigned char **)a3 = 0;
                *(void *)(a3 + 8) = 0;
              }
              else
              {
                *(unsigned char *)a3 = 0;
                *(unsigned char *)(a3 + 23) = 0;
              }
              return -1431655765 * ((unint64_t)((char *)v7 - (char *)*a2) >> 3);
            }
          }
          else
          {
            if (!a1[23]) {
              goto LABEL_74;
            }
            int v29 = a1;
            while (*v29 == v28->__r_.__value_.__s.__data_[0])
            {
              ++v29;
              int v28 = (const std::string *)((char *)v28 + 1);
              if (!--v24) {
                goto LABEL_74;
              }
            }
          }
        }
        if (v9 != -2)
        {
          if (v9 == -1)
          {
            uint64_t v9 = -1431655765 * ((unint64_t)((char *)v7 - (char *)*a2) >> 3);
            goto LABEL_51;
          }
          int v30 = (char)a1[23];
          if (v30 >= 0) {
            uint64_t v31 = (const std::string::value_type *)a1;
          }
          else {
            uint64_t v31 = *(const std::string::value_type **)a1;
          }
          if (v30 >= 0) {
            std::string::size_type v32 = a1[23];
          }
          else {
            std::string::size_type v32 = *((void *)a1 + 1);
          }
          std::string::append((std::string *)a3, v31, v32);
          std::string::append((std::string *)a3, "', could be: ");
          uint64_t v33 = (uint64_t)&(*a2)[(int)v9];
          int v34 = *(char *)(v33 + 23);
          if (v34 >= 0) {
            unint64_t v35 = (const std::string::value_type *)&(*a2)[(int)v9];
          }
          else {
            unint64_t v35 = *(const std::string::value_type **)v33;
          }
          if (v34 >= 0) {
            std::string::size_type v36 = *(unsigned __int8 *)(v33 + 23);
          }
          else {
            std::string::size_type v36 = *(void *)(v33 + 8);
          }
          std::string::append((std::string *)a3, v35, v36);
        }
        std::string::append((std::string *)a3, ", ");
        int v37 = SHIBYTE(v7->__r_.__value_.__r.__words[2]);
        if (v37 >= 0) {
          unint64_t v38 = (const std::string::value_type *)v7;
        }
        else {
          unint64_t v38 = (const std::string::value_type *)v7->__r_.__value_.__r.__words[0];
        }
        if (v37 >= 0) {
          std::string::size_type v39 = HIBYTE(v7->__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v39 = v7->__r_.__value_.__l.__size_;
        }
        std::string::append((std::string *)a3, v38, v39);
        ++v7;
        uint64_t v9 = 4294967294;
        if (v7 == (const std::string *)v8) {
          return v9;
        }
      }
    }
    BOOL v23 = memcmp(*(const void **)a1, v14, *((void *)a1 + 1)) == 0;
    goto LABEL_27;
  }
LABEL_79:
  int v40 = (char)a1[23];
  if (v40 >= 0) {
    unint64_t v41 = (const std::string::value_type *)a1;
  }
  else {
    unint64_t v41 = *(const std::string::value_type **)a1;
  }
  if (v40 >= 0) {
    std::string::size_type v42 = a1[23];
  }
  else {
    std::string::size_type v42 = *((void *)a1 + 1);
  }
  std::string::append((std::string *)a3, v41, v42);
  std::string::append((std::string *)a3, "', want one of: ");
  int v43 = *a2;
  uint64_t v44 = a2[1];
  if (*a2 != v44)
  {
    char v45 = 0;
    do
    {
      if (v45) {
        std::string::append((std::string *)a3, ", ");
      }
      int v46 = SHIBYTE(v43->__r_.__value_.__r.__words[2]);
      if (v46 >= 0) {
        vDSP_Length v47 = (const std::string::value_type *)v43;
      }
      else {
        vDSP_Length v47 = (const std::string::value_type *)v43->__r_.__value_.__r.__words[0];
      }
      if (v46 >= 0) {
        std::string::size_type v48 = HIBYTE(v43->__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v48 = v43->__r_.__value_.__l.__size_;
      }
      std::string::append((std::string *)a3, v47, v48);
      ++v43;
      char v45 = 1;
    }
    while (v43 != v44);
  }
  return 0xFFFFFFFFLL;
}

void CommandHandler::~CommandHandler(CommandHandler *this)
{
  uint64_t v2 = *((void *)this + 70);
  *((void *)this + 70) = 0;
  if (v2) {
    MEMORY[0x2105595C0](v2, 0x10C80436913F5);
  }
  unint64_t v7 = (void **)((char *)this + 536);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v7);
  uint64_t v3 = MEMORY[0x263F8C2C8];
  uint64_t v4 = *MEMORY[0x263F8C2C8];
  *((void *)this + 34) = *MEMORY[0x263F8C2C8];
  *(void *)((char *)this + *(void *)(v4 - 24) + 272) = *(void *)(v3 + 24);
  *((void *)this + 35) = MEMORY[0x263F8C318] + 16;
  if (*((char *)this + 367) < 0) {
    operator delete(*((void **)this + 43));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x210559500]((char *)this + 384);
  uint64_t v5 = MEMORY[0x263F8C2C0];
  uint64_t v6 = *MEMORY[0x263F8C2C0];
  *(void *)this = *MEMORY[0x263F8C2C0];
  *(void *)((char *)this + *(void *)(v6 - 24)) = *(void *)(v5 + 24);
  *((void *)this + 2) = MEMORY[0x263F8C318] + 16;
  if (*((char *)this + 103) < 0) {
    operator delete(*((void **)this + 10));
  }
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x210559500]((char *)this + 120);
}

void FastSpeech2EncoderProsodyTransInference::prepare_inputs(uint64_t a1, void *a2)
{
  uint64_t v4 = (std::__shared_weak_count *)a2[1];
  v12[0] = *a2;
  v12[1] = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  FastSpeech2EncoderFeaturesInference::prepare_inputs(a1, v12);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "graph_encoder_input_style_name");
  InferenceEngine::DataTensor::build_from_1d_array<float>(*a2 + 416, &v10);
  if (v9 < 0) {
    operator delete(__p);
  }
  uint64_t v5 = *(void (****)(void, uint64_t *))(a1 + 16);
  uint64_t v6 = v10;
  unint64_t v7 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (**v5)(v5, &v6);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
}

void sub_20D43B0EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, std::__shared_weak_count *a19)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  if (a19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a19);
  }
  _Unwind_Resume(exception_object);
}

void ModuleFactory::create(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(uint64_t ***)(a1 + 8);
  char v8 = *(long long **)a4;
  unint64_t v7 = *(std::__shared_weak_count **)(a4 + 8);
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v6 + 1 == (uint64_t **)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>((uint64_t)v6, (const void **)a2))
  {
    exceptiounint64_t n = __cxa_allocate_exception(0x10uLL);
    if (*(char *)(a2 + 23) >= 0) {
      unint64_t v12 = (const char *)a2;
    }
    else {
      unint64_t v12 = *(const char **)a2;
    }
    StringFormatter::StringFormatter((StringFormatter *)&v13, "Unknown module '%s'", v12);
    MEMORY[0x210558D40](exception, &v13);
    __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  int v13 = (long long *)a2;
  char v9 = std::__tree<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v6, (const void **)a2, &v13);
  int v13 = v8;
  unint64_t v14 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v10 = v9[10];
  if (!v10) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t, uint64_t, long long **))(*(void *)v10 + 48))(v10, a3, &v13);
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  if (v7)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
}

void sub_20D43B2B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v17 & 1) == 0)
    {
LABEL_6:
      if (v15) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v15);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v17)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v16);
  goto LABEL_6;
}

uint64_t *std::__tree<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, long long **a3)
{
  uint64_t v6 = a1 + 1;
  uint64_t v5 = a1[1];
  unint64_t v7 = a1 + 1;
  char v8 = a1 + 1;
  if (!v5) {
    goto LABEL_10;
  }
  unint64_t v7 = a1 + 1;
  while (1)
  {
    while (1)
    {
      char v8 = (uint64_t **)v5;
      uint64_t v10 = (const void **)(v5 + 4);
      if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), a2, (const void **)v5 + 4)) {
        break;
      }
      uint64_t v5 = *v8;
      unint64_t v7 = v8;
      if (!*v8) {
        goto LABEL_10;
      }
    }
    if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), v10, a2)) {
      break;
    }
    unint64_t v7 = v8 + 1;
    uint64_t v5 = v8[1];
    if (!v5) {
      goto LABEL_10;
    }
  }
  uint64_t v11 = *v7;
  if (!*v7)
  {
LABEL_10:
    uint64_t v11 = (uint64_t *)operator new(0x58uLL);
    v18[0] = v11;
    v18[1] = v6;
    char v19 = 0;
    unint64_t v12 = (std::string *)(v11 + 4);
    int v13 = *a3;
    if (*((char *)*a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v12, *(const std::string::value_type **)v13, *((void *)v13 + 1));
    }
    else
    {
      long long v14 = *v13;
      v11[6] = *((void *)v13 + 2);
      *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v14;
    }
    v11[10] = 0;
    char v19 = 1;
    uint64_t *v11 = 0;
    v11[1] = 0;
    v11[2] = (uint64_t)v8;
    std::__shared_weak_count *v7 = v11;
    uint64_t v15 = (uint64_t *)**a1;
    uint64_t v16 = v11;
    if (v15)
    {
      *a1 = v15;
      uint64_t v16 = *v7;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v16);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    v18[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,void *>>>>::reset[abi:ne180100]((uint64_t)v18);
  }
  return v11;
}

void sub_20D43B464(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,0>((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,0>(uint64_t a1)
{
  std::__function::__value_func<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__value_func[abi:ne180100]((void *)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void *std::__function::__value_func<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

ModuleFactory::ModuleFactoryImpl *ModuleFactory::ModuleFactoryImpl::ModuleFactoryImpl(ModuleFactory::ModuleFactoryImpl *this)
{
  uint64_t v240 = *MEMORY[0x263EF8340];
  *((void *)this + 1) = 0;
  uint64_t v2 = (char *)this + 8;
  *((void *)this + 2) = 0;
  *(void *)this = (char *)this + 8;
  *((void *)this + 4) = 0;
  *((void *)this + 3) = (char *)this + 32;
  uint64_t v3 = (uint64_t **)((char *)this + 24);
  *((void *)this + 5) = 0;
  std::string::basic_string[abi:ne180100]<0>(v237, "nashville_adapter");
  std::string::basic_string[abi:ne180100]<0>(&__p, "Run legacy FE");
  ModuleFactory::ModuleFactoryImpl::register_module<NashvilleFEModule>((uint64_t **)this, (uint64_t)v237, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v238 < 0) {
    operator delete(v237[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v237, "nashville_fe");
  std::string::basic_string[abi:ne180100]<0>(&__p, "Run legacy FE");
  ModuleFactory::ModuleFactoryImpl::register_module<NashvilleFEModule>((uint64_t **)this, (uint64_t)v237, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v238 < 0) {
    operator delete(v237[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(&v234, "gryphon_fe_adapter");
  std::string::basic_string[abi:ne180100]<0>(&__str, "Placeholder module for fallback list to link from");
  if (v2 != (char *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>((uint64_t)this, (const void **)&v234.__r_.__value_.__l.__data_))
  {
    exceptiounint64_t n = __cxa_allocate_exception(0x10uLL);
    if ((v234.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v158 = &v234;
    }
    else {
      uint64_t v158 = (std::string *)v234.__r_.__value_.__r.__words[0];
    }
    StringFormatter::StringFormatter((StringFormatter *)v237, "Module name '%s' is registered already.", (const char *)v158);
    MEMORY[0x210558D40](exception, v237);
    __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v235, v234.__r_.__value_.__l.__data_, v234.__r_.__value_.__l.__size_);
  }
  else {
    std::string v235 = v234;
  }
  v237[0] = (long long *)&v234;
  uint64_t v4 = std::__tree<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this, (const void **)&v234.__r_.__value_.__l.__data_, v237);
  if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v235.__r_.__value_.__l.__data_, v235.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v235;
  }
  uint64_t v239 = 0;
  uint64_t v5 = operator new(0x20uLL);
  *uint64_t v5 = off_26C2120D0;
  uint64_t v6 = (std::string *)(v5 + 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v6, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    v5[3] = *((void *)&__p.__r_.__value_.__l + 2);
  }
  uint64_t v239 = v5;
  std::__function::__value_func<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v237, v4 + 7);
  std::__function::__value_func<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__value_func[abi:ne180100](v237);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v235.__r_.__value_.__l.__data_);
  }
  v237[0] = (long long *)&v234;
  unint64_t v7 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, (const void **)&v234.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v237);
  std::string::operator=((std::string *)(v7 + 7), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v234.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v234, "prompt_be");
  std::string::basic_string[abi:ne180100]<0>(&__str, "Process prompt information");
  if (v2 != (char *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>((uint64_t)this, (const void **)&v234.__r_.__value_.__l.__data_))
  {
    uint64_t v159 = __cxa_allocate_exception(0x10uLL);
    if ((v234.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v160 = &v234;
    }
    else {
      std::string::size_type v160 = (std::string *)v234.__r_.__value_.__r.__words[0];
    }
    StringFormatter::StringFormatter((StringFormatter *)v237, "Module name '%s' is registered already.", (const char *)v160);
    MEMORY[0x210558D40](v159, v237);
    __cxa_throw(v159, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v235, v234.__r_.__value_.__l.__data_, v234.__r_.__value_.__l.__size_);
  }
  else {
    std::string v235 = v234;
  }
  v237[0] = (long long *)&v234;
  char v8 = std::__tree<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this, (const void **)&v234.__r_.__value_.__l.__data_, v237);
  if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v235.__r_.__value_.__l.__data_, v235.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v235;
  }
  uint64_t v239 = 0;
  char v9 = operator new(0x20uLL);
  void *v9 = off_26C211730;
  uint64_t v10 = (std::string *)(v9 + 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v10, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    v9[3] = *((void *)&__p.__r_.__value_.__l + 2);
  }
  uint64_t v239 = v9;
  std::__function::__value_func<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v237, v8 + 7);
  std::__function::__value_func<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__value_func[abi:ne180100](v237);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v235.__r_.__value_.__l.__data_);
  }
  v237[0] = (long long *)&v234;
  uint64_t v11 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, (const void **)&v234.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v237);
  std::string::operator=((std::string *)(v11 + 7), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v234.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v234, "unit_feature_predict");
  std::string::basic_string[abi:ne180100]<0>(&__str, "Predict unit features");
  if (v2 != (char *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>((uint64_t)this, (const void **)&v234.__r_.__value_.__l.__data_))
  {
    uint64_t v161 = __cxa_allocate_exception(0x10uLL);
    if ((v234.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v162 = &v234;
    }
    else {
      std::string::size_type v162 = (std::string *)v234.__r_.__value_.__r.__words[0];
    }
    StringFormatter::StringFormatter((StringFormatter *)v237, "Module name '%s' is registered already.", (const char *)v162);
    MEMORY[0x210558D40](v161, v237);
    __cxa_throw(v161, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v235, v234.__r_.__value_.__l.__data_, v234.__r_.__value_.__l.__size_);
  }
  else {
    std::string v235 = v234;
  }
  v237[0] = (long long *)&v234;
  unint64_t v12 = std::__tree<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this, (const void **)&v234.__r_.__value_.__l.__data_, v237);
  if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v235.__r_.__value_.__l.__data_, v235.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v235;
  }
  uint64_t v239 = 0;
  int v13 = operator new(0x20uLL);
  void *v13 = off_26C2123E8;
  long long v14 = (std::string *)(v13 + 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v14, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v14->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    v13[3] = *((void *)&__p.__r_.__value_.__l + 2);
  }
  uint64_t v239 = v13;
  std::__function::__value_func<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v237, v12 + 7);
  std::__function::__value_func<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__value_func[abi:ne180100](v237);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v235.__r_.__value_.__l.__data_);
  }
  v237[0] = (long long *)&v234;
  uint64_t v15 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, (const void **)&v234.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v237);
  std::string::operator=((std::string *)(v15 + 7), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v234.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v234, "unit_preselect");
  std::string::basic_string[abi:ne180100]<0>(&__str, "Unit selection preselection");
  if (v2 != (char *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>((uint64_t)this, (const void **)&v234.__r_.__value_.__l.__data_))
  {
    uint64_t v163 = __cxa_allocate_exception(0x10uLL);
    if ((v234.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v164 = &v234;
    }
    else {
      uint64_t v164 = (std::string *)v234.__r_.__value_.__r.__words[0];
    }
    StringFormatter::StringFormatter((StringFormatter *)v237, "Module name '%s' is registered already.", (const char *)v164);
    MEMORY[0x210558D40](v163, v237);
    __cxa_throw(v163, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v235, v234.__r_.__value_.__l.__data_, v234.__r_.__value_.__l.__size_);
  }
  else {
    std::string v235 = v234;
  }
  v237[0] = (long long *)&v234;
  uint64_t v16 = std::__tree<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this, (const void **)&v234.__r_.__value_.__l.__data_, v237);
  if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v235.__r_.__value_.__l.__data_, v235.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v235;
  }
  uint64_t v239 = 0;
  int v17 = operator new(0x20uLL);
  *int v17 = off_26C2118E8;
  int v18 = (std::string *)(v17 + 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v18, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v18->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    void v17[3] = *((void *)&__p.__r_.__value_.__l + 2);
  }
  uint64_t v239 = v17;
  std::__function::__value_func<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v237, v16 + 7);
  std::__function::__value_func<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__value_func[abi:ne180100](v237);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v235.__r_.__value_.__l.__data_);
  }
  v237[0] = (long long *)&v234;
  char v19 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, (const void **)&v234.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v237);
  std::string::operator=((std::string *)(v19 + 7), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v234.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v234, "viterbi");
  std::string::basic_string[abi:ne180100]<0>(&__str, "Perform viterbi algorithm with given unit candidates");
  if (v2 != (char *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>((uint64_t)this, (const void **)&v234.__r_.__value_.__l.__data_))
  {
    uint64_t v165 = __cxa_allocate_exception(0x10uLL);
    if ((v234.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v166 = &v234;
    }
    else {
      uint64_t v166 = (std::string *)v234.__r_.__value_.__r.__words[0];
    }
    StringFormatter::StringFormatter((StringFormatter *)v237, "Module name '%s' is registered already.", (const char *)v166);
    MEMORY[0x210558D40](v165, v237);
    __cxa_throw(v165, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v235, v234.__r_.__value_.__l.__data_, v234.__r_.__value_.__l.__size_);
  }
  else {
    std::string v235 = v234;
  }
  v237[0] = (long long *)&v234;
  int v20 = std::__tree<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this, (const void **)&v234.__r_.__value_.__l.__data_, v237);
  if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v235.__r_.__value_.__l.__data_, v235.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v235;
  }
  uint64_t v239 = 0;
  size_t v21 = operator new(0x20uLL);
  *size_t v21 = off_26C211788;
  BOOL v22 = (std::string *)(v21 + 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v22, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v22->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    v21[3] = *((void *)&__p.__r_.__value_.__l + 2);
  }
  uint64_t v239 = v21;
  std::__function::__value_func<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v237, v20 + 7);
  std::__function::__value_func<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__value_func[abi:ne180100](v237);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v235.__r_.__value_.__l.__data_);
  }
  v237[0] = (long long *)&v234;
  BOOL v23 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, (const void **)&v234.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v237);
  std::string::operator=((std::string *)(v23 + 7), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v234.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v234, "unit_segment");
  std::string::basic_string[abi:ne180100]<0>(&__str, "Group units with audio segment");
  if (v2 != (char *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>((uint64_t)this, (const void **)&v234.__r_.__value_.__l.__data_))
  {
    uint64_t v167 = __cxa_allocate_exception(0x10uLL);
    if ((v234.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v168 = &v234;
    }
    else {
      uint64_t v168 = (std::string *)v234.__r_.__value_.__r.__words[0];
    }
    StringFormatter::StringFormatter((StringFormatter *)v237, "Module name '%s' is registered already.", (const char *)v168);
    MEMORY[0x210558D40](v167, v237);
    __cxa_throw(v167, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v235, v234.__r_.__value_.__l.__data_, v234.__r_.__value_.__l.__size_);
  }
  else {
    std::string v235 = v234;
  }
  v237[0] = (long long *)&v234;
  uint64_t v24 = std::__tree<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this, (const void **)&v234.__r_.__value_.__l.__data_, v237);
  if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v235.__r_.__value_.__l.__data_, v235.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v235;
  }
  uint64_t v239 = 0;
  uint64_t v25 = operator new(0x20uLL);
  void *v25 = off_26C211B50;
  std::string::size_type v26 = (std::string *)(v25 + 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v26, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v26->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    v25[3] = *((void *)&__p.__r_.__value_.__l + 2);
  }
  uint64_t v239 = v25;
  std::__function::__value_func<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v237, v24 + 7);
  std::__function::__value_func<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__value_func[abi:ne180100](v237);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v235.__r_.__value_.__l.__data_);
  }
  v237[0] = (long long *)&v234;
  int v27 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, (const void **)&v234.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v237);
  std::string::operator=((std::string *)(v27 + 7), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v234.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v234, "psola");
  std::string::basic_string[abi:ne180100]<0>(&__str, "PSOLA for changing pitch/rate/volume");
  if (v2 != (char *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>((uint64_t)this, (const void **)&v234.__r_.__value_.__l.__data_))
  {
    int v169 = __cxa_allocate_exception(0x10uLL);
    if ((v234.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v170 = &v234;
    }
    else {
      int v170 = (std::string *)v234.__r_.__value_.__r.__words[0];
    }
    StringFormatter::StringFormatter((StringFormatter *)v237, "Module name '%s' is registered already.", (const char *)v170);
    MEMORY[0x210558D40](v169, v237);
    __cxa_throw(v169, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v235, v234.__r_.__value_.__l.__data_, v234.__r_.__value_.__l.__size_);
  }
  else {
    std::string v235 = v234;
  }
  v237[0] = (long long *)&v234;
  int v28 = std::__tree<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this, (const void **)&v234.__r_.__value_.__l.__data_, v237);
  if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v235.__r_.__value_.__l.__data_, v235.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v235;
  }
  uint64_t v239 = 0;
  int v29 = operator new(0x20uLL);
  *int v29 = off_26C211680;
  int v30 = (std::string *)(v29 + 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v30, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v30->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    v29[3] = *((void *)&__p.__r_.__value_.__l + 2);
  }
  uint64_t v239 = v29;
  std::__function::__value_func<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v237, v28 + 7);
  std::__function::__value_func<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__value_func[abi:ne180100](v237);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v235.__r_.__value_.__l.__data_);
  }
  v237[0] = (long long *)&v234;
  uint64_t v31 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, (const void **)&v234.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v237);
  std::string::operator=((std::string *)(v31 + 7), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v234.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v234, "wsola");
  std::string::basic_string[abi:ne180100]<0>(&__str, "WSOLA for concatenating audio segments");
  if (v2 != (char *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>((uint64_t)this, (const void **)&v234.__r_.__value_.__l.__data_))
  {
    uint64_t v171 = __cxa_allocate_exception(0x10uLL);
    if ((v234.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v172 = &v234;
    }
    else {
      uint64_t v172 = (std::string *)v234.__r_.__value_.__r.__words[0];
    }
    StringFormatter::StringFormatter((StringFormatter *)v237, "Module name '%s' is registered already.", (const char *)v172);
    MEMORY[0x210558D40](v171, v237);
    __cxa_throw(v171, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v235, v234.__r_.__value_.__l.__data_, v234.__r_.__value_.__l.__size_);
  }
  else {
    std::string v235 = v234;
  }
  v237[0] = (long long *)&v234;
  std::string::size_type v32 = std::__tree<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this, (const void **)&v234.__r_.__value_.__l.__data_, v237);
  if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v235.__r_.__value_.__l.__data_, v235.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v235;
  }
  uint64_t v239 = 0;
  uint64_t v33 = operator new(0x20uLL);
  void *v33 = off_26C2116D8;
  int v34 = (std::string *)(v33 + 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v34, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v34->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    v33[3] = *((void *)&__p.__r_.__value_.__l + 2);
  }
  uint64_t v239 = v33;
  std::__function::__value_func<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v237, v32 + 7);
  std::__function::__value_func<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__value_func[abi:ne180100](v237);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v235.__r_.__value_.__l.__data_);
  }
  v237[0] = (long long *)&v234;
  unint64_t v35 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, (const void **)&v234.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v237);
  std::string::operator=((std::string *)(v35 + 7), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v234.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v234, "silence_trimming");
  std::string::basic_string[abi:ne180100]<0>(&__str, "Trim silence at the beginning and ending");
  if (v2 != (char *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>((uint64_t)this, (const void **)&v234.__r_.__value_.__l.__data_))
  {
    int v173 = __cxa_allocate_exception(0x10uLL);
    if ((v234.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v174 = &v234;
    }
    else {
      int v174 = (std::string *)v234.__r_.__value_.__r.__words[0];
    }
    StringFormatter::StringFormatter((StringFormatter *)v237, "Module name '%s' is registered already.", (const char *)v174);
    MEMORY[0x210558D40](v173, v237);
    __cxa_throw(v173, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v235, v234.__r_.__value_.__l.__data_, v234.__r_.__value_.__l.__size_);
  }
  else {
    std::string v235 = v234;
  }
  v237[0] = (long long *)&v234;
  std::string::size_type v36 = std::__tree<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this, (const void **)&v234.__r_.__value_.__l.__data_, v237);
  if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v235.__r_.__value_.__l.__data_, v235.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v235;
  }
  uint64_t v239 = 0;
  int v37 = operator new(0x20uLL);
  *int v37 = off_26C212020;
  unint64_t v38 = (std::string *)(v37 + 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v38, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v38->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    v37[3] = *((void *)&__p.__r_.__value_.__l + 2);
  }
  uint64_t v239 = v37;
  std::__function::__value_func<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v237, v36 + 7);
  std::__function::__value_func<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__value_func[abi:ne180100](v237);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v235.__r_.__value_.__l.__data_);
  }
  v237[0] = (long long *)&v234;
  std::string::size_type v39 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, (const void **)&v234.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v237);
  std::string::operator=((std::string *)(v39 + 7), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v234.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v234, "whisper");
  std::string::basic_string[abi:ne180100]<0>(&__str, "Modify audio samples for whisper effect if set");
  if (v2 != (char *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>((uint64_t)this, (const void **)&v234.__r_.__value_.__l.__data_))
  {
    int v175 = __cxa_allocate_exception(0x10uLL);
    if ((v234.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v176 = &v234;
    }
    else {
      int v176 = (std::string *)v234.__r_.__value_.__r.__words[0];
    }
    StringFormatter::StringFormatter((StringFormatter *)v237, "Module name '%s' is registered already.", (const char *)v176);
    MEMORY[0x210558D40](v175, v237);
    __cxa_throw(v175, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v235, v234.__r_.__value_.__l.__data_, v234.__r_.__value_.__l.__size_);
  }
  else {
    std::string v235 = v234;
  }
  v237[0] = (long long *)&v234;
  int v40 = std::__tree<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this, (const void **)&v234.__r_.__value_.__l.__data_, v237);
  if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v235.__r_.__value_.__l.__data_, v235.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v235;
  }
  uint64_t v239 = 0;
  unint64_t v41 = operator new(0x20uLL);
  *unint64_t v41 = off_26C2117E0;
  std::string::size_type v42 = (std::string *)(v41 + 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v42, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v42->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    v41[3] = *((void *)&__p.__r_.__value_.__l + 2);
  }
  uint64_t v239 = v41;
  std::__function::__value_func<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v237, v40 + 7);
  std::__function::__value_func<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__value_func[abi:ne180100](v237);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v235.__r_.__value_.__l.__data_);
  }
  v237[0] = (long long *)&v234;
  int v43 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, (const void **)&v234.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v237);
  std::string::operator=((std::string *)(v43 + 7), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v234.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v234, "audio_marker");
  std::string::basic_string[abi:ne180100]<0>(&__str, "Attach markers like WordMarker to audio");
  if (v2 != (char *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>((uint64_t)this, (const void **)&v234.__r_.__value_.__l.__data_))
  {
    int v177 = __cxa_allocate_exception(0x10uLL);
    if ((v234.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v178 = &v234;
    }
    else {
      int v178 = (std::string *)v234.__r_.__value_.__r.__words[0];
    }
    StringFormatter::StringFormatter((StringFormatter *)v237, "Module name '%s' is registered already.", (const char *)v178);
    MEMORY[0x210558D40](v177, v237);
    __cxa_throw(v177, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v235, v234.__r_.__value_.__l.__data_, v234.__r_.__value_.__l.__size_);
  }
  else {
    std::string v235 = v234;
  }
  v237[0] = (long long *)&v234;
  uint64_t v44 = std::__tree<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this, (const void **)&v234.__r_.__value_.__l.__data_, v237);
  if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v235.__r_.__value_.__l.__data_, v235.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v235;
  }
  uint64_t v239 = 0;
  char v45 = operator new(0x20uLL);
  void *v45 = off_26C211A48;
  int v46 = (std::string *)(v45 + 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v46, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v46->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    v45[3] = *((void *)&__p.__r_.__value_.__l + 2);
  }
  uint64_t v239 = v45;
  std::__function::__value_func<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v237, v44 + 7);
  std::__function::__value_func<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__value_func[abi:ne180100](v237);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v235.__r_.__value_.__l.__data_);
  }
  v237[0] = (long long *)&v234;
  vDSP_Length v47 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, (const void **)&v234.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v237);
  std::string::operator=((std::string *)(v47 + 7), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v234.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v234, "hydra_adapter");
  std::string::basic_string[abi:ne180100]<0>(&__str, "Adapt Hydra frontend feature to neural FE feature");
  if (v2 != (char *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>((uint64_t)this, (const void **)&v234.__r_.__value_.__l.__data_))
  {
    uint64_t v179 = __cxa_allocate_exception(0x10uLL);
    if ((v234.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v180 = &v234;
    }
    else {
      uint64_t v180 = (std::string *)v234.__r_.__value_.__r.__words[0];
    }
    StringFormatter::StringFormatter((StringFormatter *)v237, "Module name '%s' is registered already.", (const char *)v180);
    MEMORY[0x210558D40](v179, v237);
    __cxa_throw(v179, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v235, v234.__r_.__value_.__l.__data_, v234.__r_.__value_.__l.__size_);
  }
  else {
    std::string v235 = v234;
  }
  v237[0] = (long long *)&v234;
  std::string::size_type v48 = std::__tree<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this, (const void **)&v234.__r_.__value_.__l.__data_, v237);
  if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v235.__r_.__value_.__l.__data_, v235.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v235;
  }
  uint64_t v239 = 0;
  unint64_t v49 = operator new(0x20uLL);
  void *v49 = off_26C211C58;
  unint64_t v50 = (std::string *)(v49 + 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v50, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v50->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    v49[3] = *((void *)&__p.__r_.__value_.__l + 2);
  }
  uint64_t v239 = v49;
  std::__function::__value_func<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v237, v48 + 7);
  std::__function::__value_func<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__value_func[abi:ne180100](v237);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v235.__r_.__value_.__l.__data_);
  }
  v237[0] = (long long *)&v234;
  char v51 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, (const void **)&v234.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v237);
  std::string::operator=((std::string *)(v51 + 7), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v234.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v234, "neural_adapter");
  std::string::basic_string[abi:ne180100]<0>(&__str, "Adapt frontend feature to neural FE feature");
  if (v2 != (char *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>((uint64_t)this, (const void **)&v234.__r_.__value_.__l.__data_))
  {
    uint64_t v181 = __cxa_allocate_exception(0x10uLL);
    if ((v234.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v182 = &v234;
    }
    else {
      uint64_t v182 = (std::string *)v234.__r_.__value_.__r.__words[0];
    }
    StringFormatter::StringFormatter((StringFormatter *)v237, "Module name '%s' is registered already.", (const char *)v182);
    MEMORY[0x210558D40](v181, v237);
    __cxa_throw(v181, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v235, v234.__r_.__value_.__l.__data_, v234.__r_.__value_.__l.__size_);
  }
  else {
    std::string v235 = v234;
  }
  v237[0] = (long long *)&v234;
  float v52 = std::__tree<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this, (const void **)&v234.__r_.__value_.__l.__data_, v237);
  if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v235.__r_.__value_.__l.__data_, v235.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v235;
  }
  uint64_t v239 = 0;
  int32x2_t v53 = operator new(0x20uLL);
  *int32x2_t v53 = off_26C211DB8;
  uint64_t v54 = (std::string *)(v53 + 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v54, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v54->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    v53[3] = *((void *)&__p.__r_.__value_.__l + 2);
  }
  uint64_t v239 = v53;
  std::__function::__value_func<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v237, v52 + 7);
  std::__function::__value_func<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__value_func[abi:ne180100](v237);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v235.__r_.__value_.__l.__data_);
  }
  v237[0] = (long long *)&v234;
  uint64_t v55 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, (const void **)&v234.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v237);
  std::string::operator=((std::string *)(v55 + 7), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v234.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v234, "neural_fe");
  std::string::basic_string[abi:ne180100]<0>(&__str, "Use neural frontend");
  if (v2 != (char *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>((uint64_t)this, (const void **)&v234.__r_.__value_.__l.__data_))
  {
    uint64_t v183 = __cxa_allocate_exception(0x10uLL);
    if ((v234.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v184 = &v234;
    }
    else {
      uint64_t v184 = (std::string *)v234.__r_.__value_.__r.__words[0];
    }
    StringFormatter::StringFormatter((StringFormatter *)v237, "Module name '%s' is registered already.", (const char *)v184);
    MEMORY[0x210558D40](v183, v237);
    __cxa_throw(v183, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v235, v234.__r_.__value_.__l.__data_, v234.__r_.__value_.__l.__size_);
  }
  else {
    std::string v235 = v234;
  }
  v237[0] = (long long *)&v234;
  uint64_t v56 = std::__tree<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this, (const void **)&v234.__r_.__value_.__l.__data_, v237);
  if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v235.__r_.__value_.__l.__data_, v235.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v235;
  }
  uint64_t v239 = 0;
  int64x2_t v57 = operator new(0x20uLL);
  *int64x2_t v57 = off_26C211838;
  uint64_t v58 = (std::string *)(v57 + 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v58, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v58->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    v57[3] = *((void *)&__p.__r_.__value_.__l + 2);
  }
  uint64_t v239 = v57;
  std::__function::__value_func<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v237, v56 + 7);
  std::__function::__value_func<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__value_func[abi:ne180100](v237);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v235.__r_.__value_.__l.__data_);
  }
  v237[0] = (long long *)&v234;
  unint64_t v59 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, (const void **)&v234.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v237);
  std::string::operator=((std::string *)(v59 + 7), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v234.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v234, "frontend_feature_log");
  std::string::basic_string[abi:ne180100]<0>(&__str, "Log frontend features");
  if (v2 != (char *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>((uint64_t)this, (const void **)&v234.__r_.__value_.__l.__data_))
  {
    unint64_t v185 = __cxa_allocate_exception(0x10uLL);
    if ((v234.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      float v186 = &v234;
    }
    else {
      float v186 = (std::string *)v234.__r_.__value_.__r.__words[0];
    }
    StringFormatter::StringFormatter((StringFormatter *)v237, "Module name '%s' is registered already.", (const char *)v186);
    MEMORY[0x210558D40](v185, v237);
    __cxa_throw(v185, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v235, v234.__r_.__value_.__l.__data_, v234.__r_.__value_.__l.__size_);
  }
  else {
    std::string v235 = v234;
  }
  v237[0] = (long long *)&v234;
  unint64_t v60 = std::__tree<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this, (const void **)&v234.__r_.__value_.__l.__data_, v237);
  if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v235.__r_.__value_.__l.__data_, v235.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v235;
  }
  uint64_t v239 = 0;
  BOOL v61 = operator new(0x20uLL);
  void *v61 = off_26C212288;
  uint64_t v62 = (std::string *)(v61 + 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v62, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v62->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    v61[3] = *((void *)&__p.__r_.__value_.__l + 2);
  }
  uint64_t v239 = v61;
  std::__function::__value_func<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v237, v60 + 7);
  std::__function::__value_func<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__value_func[abi:ne180100](v237);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v235.__r_.__value_.__l.__data_);
  }
  v237[0] = (long long *)&v234;
  uint64_t v63 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, (const void **)&v234.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v237);
  std::string::operator=((std::string *)(v63 + 7), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v234.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(v237, "audio_resampling");
  std::string::basic_string[abi:ne180100]<0>(&__p, "Audio linear resampling module, either upsampling or downsampling");
  ModuleFactory::ModuleFactoryImpl::register_module<AudioResamplingModule>((uint64_t **)this, (uint64_t)v237, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v238 < 0) {
    operator delete(v237[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v237, "audio_resampling_fallback");
  std::string::basic_string[abi:ne180100]<0>(&__p, "Audio linear resampling module, either upsampling or downsampling for fallback");
  ModuleFactory::ModuleFactoryImpl::register_module<AudioResamplingModule>((uint64_t **)this, (uint64_t)v237, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v238 < 0) {
    operator delete(v237[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(&v234, "prompt_partition");
  std::string::basic_string[abi:ne180100]<0>(&__str, "Partition frontend features with regard to prompts");
  if (v2 != (char *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>((uint64_t)this, (const void **)&v234.__r_.__value_.__l.__data_))
  {
    __n128 v187 = __cxa_allocate_exception(0x10uLL);
    if ((v234.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v188 = &v234;
    }
    else {
      uint64_t v188 = (std::string *)v234.__r_.__value_.__r.__words[0];
    }
    StringFormatter::StringFormatter((StringFormatter *)v237, "Module name '%s' is registered already.", (const char *)v188);
    MEMORY[0x210558D40](v187, v237);
    __cxa_throw(v187, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v235, v234.__r_.__value_.__l.__data_, v234.__r_.__value_.__l.__size_);
  }
  else {
    std::string v235 = v234;
  }
  v237[0] = (long long *)&v234;
  uint64_t v64 = std::__tree<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this, (const void **)&v234.__r_.__value_.__l.__data_, v237);
  if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v235.__r_.__value_.__l.__data_, v235.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v235;
  }
  uint64_t v239 = 0;
  uint64_t v65 = operator new(0x20uLL);
  void *v65 = off_26C211FC8;
  unint64_t v66 = (std::string *)(v65 + 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v66, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v66->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    v65[3] = *((void *)&__p.__r_.__value_.__l + 2);
  }
  uint64_t v239 = v65;
  std::__function::__value_func<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v237, v64 + 7);
  std::__function::__value_func<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__value_func[abi:ne180100](v237);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v235.__r_.__value_.__l.__data_);
  }
  v237[0] = (long long *)&v234;
  unint64_t v67 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, (const void **)&v234.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v237);
  std::string::operator=((std::string *)(v67 + 7), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v234.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v234, "neural_rate_change");
  std::string::basic_string[abi:ne180100]<0>(&__str, "Neural speech rate changer");
  if (v2 != (char *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>((uint64_t)this, (const void **)&v234.__r_.__value_.__l.__data_))
  {
    unint64_t v189 = __cxa_allocate_exception(0x10uLL);
    if ((v234.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v190 = &v234;
    }
    else {
      int v190 = (std::string *)v234.__r_.__value_.__r.__words[0];
    }
    StringFormatter::StringFormatter((StringFormatter *)v237, "Module name '%s' is registered already.", (const char *)v190);
    MEMORY[0x210558D40](v189, v237);
    __cxa_throw(v189, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v235, v234.__r_.__value_.__l.__data_, v234.__r_.__value_.__l.__size_);
  }
  else {
    std::string v235 = v234;
  }
  v237[0] = (long long *)&v234;
  BOOL v68 = std::__tree<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this, (const void **)&v234.__r_.__value_.__l.__data_, v237);
  if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v235.__r_.__value_.__l.__data_, v235.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v235;
  }
  uint64_t v239 = 0;
  BOOL v69 = operator new(0x20uLL);
  *BOOL v69 = off_26C212128;
  BOOL v70 = (std::string *)(v69 + 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v70, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v70->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    v69[3] = *((void *)&__p.__r_.__value_.__l + 2);
  }
  uint64_t v239 = v69;
  std::__function::__value_func<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v237, v68 + 7);
  std::__function::__value_func<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__value_func[abi:ne180100](v237);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v235.__r_.__value_.__l.__data_);
  }
  v237[0] = (long long *)&v234;
  uint64_t v71 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, (const void **)&v234.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v237);
  std::string::operator=((std::string *)(v71 + 7), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v234.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(v237, "waveform_rate_change");
  std::string::basic_string[abi:ne180100]<0>(&__p, "Waveform speech rate changer");
  ModuleFactory::ModuleFactoryImpl::register_module<WaveformRateChangeModule>((uint64_t **)this, (uint64_t)v237, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v238 < 0) {
    operator delete(v237[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(&v234, "waveform_volume_change");
  std::string::basic_string[abi:ne180100]<0>(&__str, "Waveform volume changer");
  if (v2 != (char *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>((uint64_t)this, (const void **)&v234.__r_.__value_.__l.__data_))
  {
    int v191 = __cxa_allocate_exception(0x10uLL);
    if ((v234.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v192 = &v234;
    }
    else {
      int v192 = (std::string *)v234.__r_.__value_.__r.__words[0];
    }
    StringFormatter::StringFormatter((StringFormatter *)v237, "Module name '%s' is registered already.", (const char *)v192);
    MEMORY[0x210558D40](v191, v237);
    __cxa_throw(v191, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v235, v234.__r_.__value_.__l.__data_, v234.__r_.__value_.__l.__size_);
  }
  else {
    std::string v235 = v234;
  }
  v237[0] = (long long *)&v234;
  unint64_t v72 = std::__tree<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this, (const void **)&v234.__r_.__value_.__l.__data_, v237);
  if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v235.__r_.__value_.__l.__data_, v235.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v235;
  }
  uint64_t v239 = 0;
  BOOL v73 = operator new(0x20uLL);
  void *v73 = off_26C211EC0;
  int v74 = (std::string *)(v73 + 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v74, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v74->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    v73[3] = *((void *)&__p.__r_.__value_.__l + 2);
  }
  uint64_t v239 = v73;
  std::__function::__value_func<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v237, v72 + 7);
  std::__function::__value_func<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__value_func[abi:ne180100](v237);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v235.__r_.__value_.__l.__data_);
  }
  v237[0] = (long long *)&v234;
  unint64_t v75 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, (const void **)&v234.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v237);
  std::string::operator=((std::string *)(v75 + 7), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v234.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(v237, "waveform_rate_change_fallback");
  std::string::basic_string[abi:ne180100]<0>(&__p, "Waveform speech rate changer for fallback");
  ModuleFactory::ModuleFactoryImpl::register_module<WaveformRateChangeModule>((uint64_t **)this, (uint64_t)v237, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v238 < 0) {
    operator delete(v237[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(&v234, "parallel_neural_acoustic");
  std::string::basic_string[abi:ne180100]<0>(&__str, "Parallel neural acoustic module");
  if (v2 != (char *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>((uint64_t)this, (const void **)&v234.__r_.__value_.__l.__data_))
  {
    int v193 = __cxa_allocate_exception(0x10uLL);
    if ((v234.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v194 = &v234;
    }
    else {
      int v194 = (std::string *)v234.__r_.__value_.__r.__words[0];
    }
    StringFormatter::StringFormatter((StringFormatter *)v237, "Module name '%s' is registered already.", (const char *)v194);
    MEMORY[0x210558D40](v193, v237);
    __cxa_throw(v193, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v235, v234.__r_.__value_.__l.__data_, v234.__r_.__value_.__l.__size_);
  }
  else {
    std::string v235 = v234;
  }
  v237[0] = (long long *)&v234;
  BOOL v76 = std::__tree<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this, (const void **)&v234.__r_.__value_.__l.__data_, v237);
  if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v235.__r_.__value_.__l.__data_, v235.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v235;
  }
  uint64_t v239 = 0;
  uint64_t v77 = operator new(0x20uLL);
  *uint64_t v77 = off_26C212440;
  uint64_t v78 = (std::string *)(v77 + 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v78, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v78->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    v77[3] = *((void *)&__p.__r_.__value_.__l + 2);
  }
  uint64_t v239 = v77;
  std::__function::__value_func<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v237, v76 + 7);
  std::__function::__value_func<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__value_func[abi:ne180100](v237);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v235.__r_.__value_.__l.__data_);
  }
  v237[0] = (long long *)&v234;
  uint64_t v79 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, (const void **)&v234.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v237);
  std::string::operator=((std::string *)(v79 + 7), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v234.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v234, "click_detector");
  std::string::basic_string[abi:ne180100]<0>(&__str, "Click detection module");
  if (v2 != (char *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>((uint64_t)this, (const void **)&v234.__r_.__value_.__l.__data_))
  {
    float v195 = __cxa_allocate_exception(0x10uLL);
    if ((v234.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      float v196 = &v234;
    }
    else {
      float v196 = (std::string *)v234.__r_.__value_.__r.__words[0];
    }
    StringFormatter::StringFormatter((StringFormatter *)v237, "Module name '%s' is registered already.", (const char *)v196);
    MEMORY[0x210558D40](v195, v237);
    __cxa_throw(v195, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v235, v234.__r_.__value_.__l.__data_, v234.__r_.__value_.__l.__size_);
  }
  else {
    std::string v235 = v234;
  }
  v237[0] = (long long *)&v234;
  uint64_t v80 = std::__tree<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this, (const void **)&v234.__r_.__value_.__l.__data_, v237);
  if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v235.__r_.__value_.__l.__data_, v235.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v235;
  }
  uint64_t v239 = 0;
  uint64_t v81 = operator new(0x20uLL);
  void *v81 = off_26C211D60;
  BOOL v82 = (std::string *)(v81 + 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v82, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v82->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    v81[3] = *((void *)&__p.__r_.__value_.__l + 2);
  }
  uint64_t v239 = v81;
  std::__function::__value_func<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v237, v80 + 7);
  std::__function::__value_func<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__value_func[abi:ne180100](v237);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v235.__r_.__value_.__l.__data_);
  }
  v237[0] = (long long *)&v234;
  BOOL v83 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, (const void **)&v234.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v237);
  std::string::operator=((std::string *)(v83 + 7), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v234.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v234, "phone_transform");
  std::string::basic_string[abi:ne180100]<0>(&__str, "Transform phones");
  if (v2 != (char *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>((uint64_t)this, (const void **)&v234.__r_.__value_.__l.__data_))
  {
    uint64_t v197 = __cxa_allocate_exception(0x10uLL);
    if ((v234.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v198 = &v234;
    }
    else {
      std::string::size_type v198 = (std::string *)v234.__r_.__value_.__r.__words[0];
    }
    StringFormatter::StringFormatter((StringFormatter *)v237, "Module name '%s' is registered already.", (const char *)v198);
    MEMORY[0x210558D40](v197, v237);
    __cxa_throw(v197, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v235, v234.__r_.__value_.__l.__data_, v234.__r_.__value_.__l.__size_);
  }
  else {
    std::string v235 = v234;
  }
  v237[0] = (long long *)&v234;
  uint64_t v84 = std::__tree<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this, (const void **)&v234.__r_.__value_.__l.__data_, v237);
  if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v235.__r_.__value_.__l.__data_, v235.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v235;
  }
  uint64_t v239 = 0;
  uint64_t v85 = operator new(0x20uLL);
  void *v85 = off_26C211E68;
  BOOL v86 = (std::string *)(v85 + 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v86, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v86->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    v85[3] = *((void *)&__p.__r_.__value_.__l + 2);
  }
  uint64_t v239 = v85;
  std::__function::__value_func<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v237, v84 + 7);
  std::__function::__value_func<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__value_func[abi:ne180100](v237);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v235.__r_.__value_.__l.__data_);
  }
  v237[0] = (long long *)&v234;
  int v87 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, (const void **)&v234.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v237);
  std::string::operator=((std::string *)(v87 + 7), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v234.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v234, "neural_prompt");
  std::string::basic_string[abi:ne180100]<0>(&__str, "Handling prompts for pure neural voices");
  if (v2 != (char *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>((uint64_t)this, (const void **)&v234.__r_.__value_.__l.__data_))
  {
    uint64_t v199 = __cxa_allocate_exception(0x10uLL);
    if ((v234.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v200 = &v234;
    }
    else {
      unint64_t v200 = (std::string *)v234.__r_.__value_.__r.__words[0];
    }
    StringFormatter::StringFormatter((StringFormatter *)v237, "Module name '%s' is registered already.", (const char *)v200);
    MEMORY[0x210558D40](v199, v237);
    __cxa_throw(v199, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v235, v234.__r_.__value_.__l.__data_, v234.__r_.__value_.__l.__size_);
  }
  else {
    std::string v235 = v234;
  }
  v237[0] = (long long *)&v234;
  uint64_t v88 = std::__tree<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this, (const void **)&v234.__r_.__value_.__l.__data_, v237);
  if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v235.__r_.__value_.__l.__data_, v235.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v235;
  }
  uint64_t v239 = 0;
  uint64_t v89 = operator new(0x20uLL);
  *uint64_t v89 = off_26C211CB0;
  uint64_t v90 = (std::string *)(v89 + 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v90, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v90->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    v89[3] = *((void *)&__p.__r_.__value_.__l + 2);
  }
  uint64_t v239 = v89;
  std::__function::__value_func<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v237, v88 + 7);
  std::__function::__value_func<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__value_func[abi:ne180100](v237);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v235.__r_.__value_.__l.__data_);
  }
  v237[0] = (long long *)&v234;
  uint64_t v91 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, (const void **)&v234.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v237);
  std::string::operator=((std::string *)(v91 + 7), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v234.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v234, "word_embedding");
  std::string::basic_string[abi:ne180100]<0>(&__str, "Word embedding");
  if (v2 != (char *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>((uint64_t)this, (const void **)&v234.__r_.__value_.__l.__data_))
  {
    uint64_t v201 = __cxa_allocate_exception(0x10uLL);
    if ((v234.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v202 = &v234;
    }
    else {
      uint64_t v202 = (std::string *)v234.__r_.__value_.__r.__words[0];
    }
    StringFormatter::StringFormatter((StringFormatter *)v237, "Module name '%s' is registered already.", (const char *)v202);
    MEMORY[0x210558D40](v201, v237);
    __cxa_throw(v201, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v235, v234.__r_.__value_.__l.__data_, v234.__r_.__value_.__l.__size_);
  }
  else {
    std::string v235 = v234;
  }
  v237[0] = (long long *)&v234;
  uint64_t v92 = std::__tree<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this, (const void **)&v234.__r_.__value_.__l.__data_, v237);
  if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v235.__r_.__value_.__l.__data_, v235.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v235;
  }
  uint64_t v239 = 0;
  int v93 = operator new(0x20uLL);
  *int v93 = off_26C211E10;
  uint64_t v94 = (std::string *)(v93 + 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v94, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v94->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    v93[3] = *((void *)&__p.__r_.__value_.__l + 2);
  }
  uint64_t v239 = v93;
  std::__function::__value_func<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v237, v92 + 7);
  std::__function::__value_func<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__value_func[abi:ne180100](v237);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v235.__r_.__value_.__l.__data_);
  }
  v237[0] = (long long *)&v234;
  unint64_t v95 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, (const void **)&v234.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v237);
  std::string::operator=((std::string *)(v95 + 7), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v234.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v234, "merge_frontend_feature");
  std::string::basic_string[abi:ne180100]<0>(&__str, "Merge frontend features");
  if (v2 != (char *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>((uint64_t)this, (const void **)&v234.__r_.__value_.__l.__data_))
  {
    unint64_t v203 = __cxa_allocate_exception(0x10uLL);
    if ((v234.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v204 = &v234;
    }
    else {
      std::string::size_type v204 = (std::string *)v234.__r_.__value_.__r.__words[0];
    }
    StringFormatter::StringFormatter((StringFormatter *)v237, "Module name '%s' is registered already.", (const char *)v204);
    MEMORY[0x210558D40](v203, v237);
    __cxa_throw(v203, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v235, v234.__r_.__value_.__l.__data_, v234.__r_.__value_.__l.__size_);
  }
  else {
    std::string v235 = v234;
  }
  v237[0] = (long long *)&v234;
  int64_t v96 = std::__tree<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this, (const void **)&v234.__r_.__value_.__l.__data_, v237);
  if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v235.__r_.__value_.__l.__data_, v235.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v235;
  }
  uint64_t v239 = 0;
  unint64_t v97 = operator new(0x20uLL);
  *unint64_t v97 = off_26C212390;
  unint64_t v98 = (std::string *)(v97 + 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v98, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v98->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    v97[3] = *((void *)&__p.__r_.__value_.__l + 2);
  }
  uint64_t v239 = v97;
  std::__function::__value_func<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v237, v96 + 7);
  std::__function::__value_func<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__value_func[abi:ne180100](v237);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v235.__r_.__value_.__l.__data_);
  }
  v237[0] = (long long *)&v234;
  int v99 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, (const void **)&v234.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v237);
  std::string::operator=((std::string *)(v99 + 7), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v234.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v234, "phonewise_feature");
  std::string::basic_string[abi:ne180100]<0>(&__str, "Phonewise acoustic feature inference for prosody transfer");
  if (v2 != (char *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>((uint64_t)this, (const void **)&v234.__r_.__value_.__l.__data_))
  {
    char v205 = __cxa_allocate_exception(0x10uLL);
    if ((v234.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v206 = &v234;
    }
    else {
      std::string::size_type v206 = (std::string *)v234.__r_.__value_.__r.__words[0];
    }
    StringFormatter::StringFormatter((StringFormatter *)v237, "Module name '%s' is registered already.", (const char *)v206);
    MEMORY[0x210558D40](v205, v237);
    __cxa_throw(v205, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v235, v234.__r_.__value_.__l.__data_, v234.__r_.__value_.__l.__size_);
  }
  else {
    std::string v235 = v234;
  }
  v237[0] = (long long *)&v234;
  int v100 = std::__tree<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this, (const void **)&v234.__r_.__value_.__l.__data_, v237);
  if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v235.__r_.__value_.__l.__data_, v235.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v235;
  }
  uint64_t v239 = 0;
  std::string::size_type v101 = operator new(0x20uLL);
  *std::string::size_type v101 = off_26C212180;
  long long v102 = (std::string *)(v101 + 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v102, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v102->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    v101[3] = *((void *)&__p.__r_.__value_.__l + 2);
  }
  uint64_t v239 = v101;
  std::__function::__value_func<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v237, v100 + 7);
  std::__function::__value_func<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__value_func[abi:ne180100](v237);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v235.__r_.__value_.__l.__data_);
  }
  v237[0] = (long long *)&v234;
  uint64_t v103 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, (const void **)&v234.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v237);
  std::string::operator=((std::string *)(v103 + 7), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v234.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v234, "text_split");
  std::string::basic_string[abi:ne180100]<0>(&__str, "Original text split module");
  if (v2 != (char *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>((uint64_t)this, (const void **)&v234.__r_.__value_.__l.__data_))
  {
    unint64_t v207 = __cxa_allocate_exception(0x10uLL);
    if ((v234.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v208 = &v234;
    }
    else {
      int v208 = (std::string *)v234.__r_.__value_.__r.__words[0];
    }
    StringFormatter::StringFormatter((StringFormatter *)v237, "Module name '%s' is registered already.", (const char *)v208);
    MEMORY[0x210558D40](v207, v237);
    __cxa_throw(v207, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v235, v234.__r_.__value_.__l.__data_, v234.__r_.__value_.__l.__size_);
  }
  else {
    std::string v235 = v234;
  }
  v237[0] = (long long *)&v234;
  uint64_t v104 = std::__tree<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this, (const void **)&v234.__r_.__value_.__l.__data_, v237);
  if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v235.__r_.__value_.__l.__data_, v235.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v235;
  }
  uint64_t v239 = 0;
  uint64_t v105 = operator new(0x20uLL);
  *uint64_t v105 = off_26C211940;
  uint64_t v106 = (std::string *)(v105 + 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v106, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v106->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    v105[3] = *((void *)&__p.__r_.__value_.__l + 2);
  }
  uint64_t v239 = v105;
  std::__function::__value_func<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v237, v104 + 7);
  std::__function::__value_func<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__value_func[abi:ne180100](v237);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v235.__r_.__value_.__l.__data_);
  }
  v237[0] = (long long *)&v234;
  uint64_t v107 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, (const void **)&v234.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v237);
  std::string::operator=((std::string *)(v107 + 7), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v234.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v234, "text_preprocess");
  std::string::basic_string[abi:ne180100]<0>(&__str, "Text preprocessing module");
  if (v2 != (char *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>((uint64_t)this, (const void **)&v234.__r_.__value_.__l.__data_))
  {
    unint64_t v209 = __cxa_allocate_exception(0x10uLL);
    if ((v234.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v210 = &v234;
    }
    else {
      uint64_t v210 = (std::string *)v234.__r_.__value_.__r.__words[0];
    }
    StringFormatter::StringFormatter((StringFormatter *)v237, "Module name '%s' is registered already.", (const char *)v210);
    MEMORY[0x210558D40](v209, v237);
    __cxa_throw(v209, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v235, v234.__r_.__value_.__l.__data_, v234.__r_.__value_.__l.__size_);
  }
  else {
    std::string v235 = v234;
  }
  v237[0] = (long long *)&v234;
  uint64_t v108 = std::__tree<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this, (const void **)&v234.__r_.__value_.__l.__data_, v237);
  if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v235.__r_.__value_.__l.__data_, v235.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v235;
  }
  uint64_t v239 = 0;
  uint64_t v109 = operator new(0x20uLL);
  void *v109 = off_26C211AF8;
  unint64_t v110 = (std::string *)(v109 + 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v110, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v110->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    v109[3] = *((void *)&__p.__r_.__value_.__l + 2);
  }
  uint64_t v239 = v109;
  std::__function::__value_func<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v237, v108 + 7);
  std::__function::__value_func<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__value_func[abi:ne180100](v237);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v235.__r_.__value_.__l.__data_);
  }
  v237[0] = (long long *)&v234;
  int64_t v111 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, (const void **)&v234.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v237);
  std::string::operator=((std::string *)(v111 + 7), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v234.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v234, "lpc_filter");
  std::string::basic_string[abi:ne180100]<0>(&__str, "Linear Prediction Coefficient filter module");
  if (v2 != (char *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>((uint64_t)this, (const void **)&v234.__r_.__value_.__l.__data_))
  {
    uint64_t v211 = __cxa_allocate_exception(0x10uLL);
    if ((v234.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v212 = &v234;
    }
    else {
      uint64_t v212 = (std::string *)v234.__r_.__value_.__r.__words[0];
    }
    StringFormatter::StringFormatter((StringFormatter *)v237, "Module name '%s' is registered already.", (const char *)v212);
    MEMORY[0x210558D40](v211, v237);
    __cxa_throw(v211, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v235, v234.__r_.__value_.__l.__data_, v234.__r_.__value_.__l.__size_);
  }
  else {
    std::string v235 = v234;
  }
  v237[0] = (long long *)&v234;
  unint64_t v112 = std::__tree<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this, (const void **)&v234.__r_.__value_.__l.__data_, v237);
  if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v235.__r_.__value_.__l.__data_, v235.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v235;
  }
  uint64_t v239 = 0;
  unint64_t v113 = operator new(0x20uLL);
  *unint64_t v113 = off_26C211890;
  float v114 = (std::string *)(v113 + 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v114, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v114->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    v113[3] = *((void *)&__p.__r_.__value_.__l + 2);
  }
  uint64_t v239 = v113;
  std::__function::__value_func<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v237, v112 + 7);
  std::__function::__value_func<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__value_func[abi:ne180100](v237);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v235.__r_.__value_.__l.__data_);
  }
  v237[0] = (long long *)&v234;
  uint64_t v115 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, (const void **)&v234.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v237);
  std::string::operator=((std::string *)(v115 + 7), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v234.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v234, "espresso_tacotron");
  std::string::basic_string[abi:ne180100]<0>(&__str, "Espresso tacotron module");
  if (v2 != (char *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>((uint64_t)this, (const void **)&v234.__r_.__value_.__l.__data_))
  {
    unint64_t v213 = __cxa_allocate_exception(0x10uLL);
    if ((v234.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v214 = &v234;
    }
    else {
      uint64_t v214 = (std::string *)v234.__r_.__value_.__r.__words[0];
    }
    StringFormatter::StringFormatter((StringFormatter *)v237, "Module name '%s' is registered already.", (const char *)v214);
    MEMORY[0x210558D40](v213, v237);
    __cxa_throw(v213, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v235, v234.__r_.__value_.__l.__data_, v234.__r_.__value_.__l.__size_);
  }
  else {
    std::string v235 = v234;
  }
  v237[0] = (long long *)&v234;
  uint64_t v116 = std::__tree<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this, (const void **)&v234.__r_.__value_.__l.__data_, v237);
  if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v235.__r_.__value_.__l.__data_, v235.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v235;
  }
  uint64_t v239 = 0;
  uint64_t v117 = operator new(0x20uLL);
  *uint64_t v117 = off_26C212078;
  uint64_t v118 = (std::string *)(v117 + 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v118, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v118->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    v117[3] = *((void *)&__p.__r_.__value_.__l + 2);
  }
  uint64_t v239 = v117;
  std::__function::__value_func<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v237, v116 + 7);
  std::__function::__value_func<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__value_func[abi:ne180100](v237);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v235.__r_.__value_.__l.__data_);
  }
  v237[0] = (long long *)&v234;
  int v119 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, (const void **)&v234.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v237);
  std::string::operator=((std::string *)(v119 + 7), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v234.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(v237, "espresso_wavernn");
  std::string::basic_string[abi:ne180100]<0>(&__p, "Espresso wavernn module");
  ModuleFactory::ModuleFactoryImpl::register_module<EspressoWaveRNNModule>((uint64_t **)this, (uint64_t)v237, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v238 < 0) {
    operator delete(v237[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v237, "espresso_wavernn_fallback");
  std::string::basic_string[abi:ne180100]<0>(&__p, "Espresso wavernn module for fallback");
  ModuleFactory::ModuleFactoryImpl::register_module<EspressoWaveRNNModule>((uint64_t **)this, (uint64_t)v237, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v238 < 0) {
    operator delete(v237[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v237, "mil_wavernn");
  std::string::basic_string[abi:ne180100]<0>(&__p, "MIL wavernn module");
  ModuleFactory::ModuleFactoryImpl::register_module<MilWaveRNNModule>((uint64_t **)this, (uint64_t)v237, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v238 < 0) {
    operator delete(v237[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v237, "mil_wavernn_fallback");
  std::string::basic_string[abi:ne180100]<0>(&__p, "MIL wavernn module for fallback");
  ModuleFactory::ModuleFactoryImpl::register_module<MilWaveRNNModule>((uint64_t **)this, (uint64_t)v237, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v238 < 0) {
    operator delete(v237[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(&v234, "fastspeech2_encoder");
  std::string::basic_string[abi:ne180100]<0>(&__str, "FastSpeech2 encoder module");
  if (v2 != (char *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>((uint64_t)this, (const void **)&v234.__r_.__value_.__l.__data_))
  {
    uint64_t v215 = __cxa_allocate_exception(0x10uLL);
    if ((v234.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v216 = &v234;
    }
    else {
      uint64_t v216 = (std::string *)v234.__r_.__value_.__r.__words[0];
    }
    StringFormatter::StringFormatter((StringFormatter *)v237, "Module name '%s' is registered already.", (const char *)v216);
    MEMORY[0x210558D40](v215, v237);
    __cxa_throw(v215, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v235, v234.__r_.__value_.__l.__data_, v234.__r_.__value_.__l.__size_);
  }
  else {
    std::string v235 = v234;
  }
  v237[0] = (long long *)&v234;
  float v120 = std::__tree<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this, (const void **)&v234.__r_.__value_.__l.__data_, v237);
  if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v235.__r_.__value_.__l.__data_, v235.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v235;
  }
  uint64_t v239 = 0;
  uint64_t v121 = operator new(0x20uLL);
  void *v121 = off_26C212230;
  unint64_t v122 = (std::string *)(v121 + 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v122, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v122->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    v121[3] = *((void *)&__p.__r_.__value_.__l + 2);
  }
  uint64_t v239 = v121;
  std::__function::__value_func<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v237, v120 + 7);
  std::__function::__value_func<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__value_func[abi:ne180100](v237);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v235.__r_.__value_.__l.__data_);
  }
  v237[0] = (long long *)&v234;
  unint64_t v123 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, (const void **)&v234.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v237);
  std::string::operator=((std::string *)(v123 + 7), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v234.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v234, "fastspeech2_decoder");
  std::string::basic_string[abi:ne180100]<0>(&__str, "FastSpeech2 decoder module");
  if (v2 != (char *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>((uint64_t)this, (const void **)&v234.__r_.__value_.__l.__data_))
  {
    v217 = __cxa_allocate_exception(0x10uLL);
    if ((v234.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v218 = &v234;
    }
    else {
      int v218 = (std::string *)v234.__r_.__value_.__r.__words[0];
    }
    StringFormatter::StringFormatter((StringFormatter *)v237, "Module name '%s' is registered already.", (const char *)v218);
    MEMORY[0x210558D40](v217, v237);
    __cxa_throw(v217, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v235, v234.__r_.__value_.__l.__data_, v234.__r_.__value_.__l.__size_);
  }
  else {
    std::string v235 = v234;
  }
  v237[0] = (long long *)&v234;
  uint64_t v124 = std::__tree<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this, (const void **)&v234.__r_.__value_.__l.__data_, v237);
  if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v235.__r_.__value_.__l.__data_, v235.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v235;
  }
  uint64_t v239 = 0;
  float v125 = operator new(0x20uLL);
  *float v125 = off_26C2121D8;
  int v126 = (std::string *)(v125 + 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v126, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v126->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    v125[3] = *((void *)&__p.__r_.__value_.__l + 2);
  }
  uint64_t v239 = v125;
  std::__function::__value_func<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v237, v124 + 7);
  std::__function::__value_func<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__value_func[abi:ne180100](v237);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v235.__r_.__value_.__l.__data_);
  }
  v237[0] = (long long *)&v234;
  BOOL v127 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, (const void **)&v234.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v237);
  std::string::operator=((std::string *)(v127 + 7), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v234.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(v237, "soundstream_decoder");
  std::string::basic_string[abi:ne180100]<0>(&__p, "ANETEC decoder module");
  ModuleFactory::ModuleFactoryImpl::register_module<AnetecDecoderModule>((uint64_t **)this, (uint64_t)v237, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v238 < 0) {
    operator delete(v237[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v237, "anetec_decoder");
  std::string::basic_string[abi:ne180100]<0>(&__p, "ANETEC decoder module");
  ModuleFactory::ModuleFactoryImpl::register_module<AnetecDecoderModule>((uint64_t **)this, (uint64_t)v237, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v238 < 0) {
    operator delete(v237[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v237, "soundstream_streaming_decoder");
  std::string::basic_string[abi:ne180100]<0>(&__p, "ANETEC streaming decoder module");
  ModuleFactory::ModuleFactoryImpl::register_module<AnetecStreamingDecoderModule>((uint64_t **)this, (uint64_t)v237, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v238 < 0) {
    operator delete(v237[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v237, "anetec_streaming_decoder");
  std::string::basic_string[abi:ne180100]<0>(&__p, "ANETEC streaming decoder module");
  ModuleFactory::ModuleFactoryImpl::register_module<AnetecStreamingDecoderModule>((uint64_t **)this, (uint64_t)v237, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v238 < 0) {
    operator delete(v237[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(&v234, "soundstorm");
  std::string::basic_string[abi:ne180100]<0>(&__str, "SoundStorm module");
  if (v2 != (char *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>((uint64_t)this, (const void **)&v234.__r_.__value_.__l.__data_))
  {
    uint64_t v219 = __cxa_allocate_exception(0x10uLL);
    if ((v234.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v220 = &v234;
    }
    else {
      uint64_t v220 = (std::string *)v234.__r_.__value_.__r.__words[0];
    }
    StringFormatter::StringFormatter((StringFormatter *)v237, "Module name '%s' is registered already.", (const char *)v220);
    MEMORY[0x210558D40](v219, v237);
    __cxa_throw(v219, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v235, v234.__r_.__value_.__l.__data_, v234.__r_.__value_.__l.__size_);
  }
  else {
    std::string v235 = v234;
  }
  v237[0] = (long long *)&v234;
  uint64_t v128 = std::__tree<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this, (const void **)&v234.__r_.__value_.__l.__data_, v237);
  if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v235.__r_.__value_.__l.__data_, v235.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v235;
  }
  uint64_t v239 = 0;
  int v129 = operator new(0x20uLL);
  *int v129 = off_26C2119F0;
  uint64_t v130 = (std::string *)(v129 + 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v130, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v130->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    v129[3] = *((void *)&__p.__r_.__value_.__l + 2);
  }
  uint64_t v239 = v129;
  std::__function::__value_func<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v237, v128 + 7);
  std::__function::__value_func<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__value_func[abi:ne180100](v237);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v235.__r_.__value_.__l.__data_);
  }
  v237[0] = (long long *)&v234;
  std::string::size_type v131 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, (const void **)&v234.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v237);
  std::string::operator=((std::string *)(v131 + 7), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v234.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v234, "soundstorm_streaming");
  std::string::basic_string[abi:ne180100]<0>(&__str, "SoundStorm streaming module");
  if (v2 != (char *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>((uint64_t)this, (const void **)&v234.__r_.__value_.__l.__data_))
  {
    unint64_t v221 = __cxa_allocate_exception(0x10uLL);
    if ((v234.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v222 = &v234;
    }
    else {
      uint64_t v222 = (std::string *)v234.__r_.__value_.__r.__words[0];
    }
    StringFormatter::StringFormatter((StringFormatter *)v237, "Module name '%s' is registered already.", (const char *)v222);
    MEMORY[0x210558D40](v221, v237);
    __cxa_throw(v221, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v235, v234.__r_.__value_.__l.__data_, v234.__r_.__value_.__l.__size_);
  }
  else {
    std::string v235 = v234;
  }
  v237[0] = (long long *)&v234;
  uint64_t v132 = std::__tree<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this, (const void **)&v234.__r_.__value_.__l.__data_, v237);
  if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v235.__r_.__value_.__l.__data_, v235.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v235;
  }
  uint64_t v239 = 0;
  unint64_t v133 = operator new(0x20uLL);
  *unint64_t v133 = off_26C1EDE08;
  int v134 = (std::string *)(v133 + 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v134, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v134->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    v133[3] = *((void *)&__p.__r_.__value_.__l + 2);
  }
  uint64_t v239 = v133;
  std::__function::__value_func<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v237, v132 + 7);
  std::__function::__value_func<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__value_func[abi:ne180100](v237);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v235.__r_.__value_.__l.__data_);
  }
  v237[0] = (long long *)&v234;
  unint64_t v135 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, (const void **)&v234.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v237);
  std::string::operator=((std::string *)(v135 + 7), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v234.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v234, "fastspeech2s1_decoder");
  std::string::basic_string[abi:ne180100]<0>(&__str, "FastSpeech2 S1 decoder module");
  if (v2 != (char *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>((uint64_t)this, (const void **)&v234.__r_.__value_.__l.__data_))
  {
    uint64_t v223 = __cxa_allocate_exception(0x10uLL);
    if ((v234.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v224 = &v234;
    }
    else {
      uint64_t v224 = (std::string *)v234.__r_.__value_.__r.__words[0];
    }
    StringFormatter::StringFormatter((StringFormatter *)v237, "Module name '%s' is registered already.", (const char *)v224);
    MEMORY[0x210558D40](v223, v237);
    __cxa_throw(v223, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v235, v234.__r_.__value_.__l.__data_, v234.__r_.__value_.__l.__size_);
  }
  else {
    std::string v235 = v234;
  }
  v237[0] = (long long *)&v234;
  int v136 = std::__tree<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this, (const void **)&v234.__r_.__value_.__l.__data_, v237);
  if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v235.__r_.__value_.__l.__data_, v235.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v235;
  }
  uint64_t v239 = 0;
  BOOL v137 = operator new(0x20uLL);
  *BOOL v137 = off_26C212338;
  BOOL v138 = (std::string *)(v137 + 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v138, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v138->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    v137[3] = *((void *)&__p.__r_.__value_.__l + 2);
  }
  uint64_t v239 = v137;
  std::__function::__value_func<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v237, v136 + 7);
  std::__function::__value_func<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__value_func[abi:ne180100](v237);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v235.__r_.__value_.__l.__data_);
  }
  v237[0] = (long long *)&v234;
  uint64_t v139 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, (const void **)&v234.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v237);
  std::string::operator=((std::string *)(v139 + 7), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v234.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v234, "s1nar_decoder");
  std::string::basic_string[abi:ne180100]<0>(&__str, "S1NAR decoder module");
  if (v2 != (char *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>((uint64_t)this, (const void **)&v234.__r_.__value_.__l.__data_))
  {
    uint64_t v225 = __cxa_allocate_exception(0x10uLL);
    if ((v234.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      float v226 = &v234;
    }
    else {
      float v226 = (std::string *)v234.__r_.__value_.__r.__words[0];
    }
    StringFormatter::StringFormatter((StringFormatter *)v237, "Module name '%s' is registered already.", (const char *)v226);
    MEMORY[0x210558D40](v225, v237);
    __cxa_throw(v225, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v235, v234.__r_.__value_.__l.__data_, v234.__r_.__value_.__l.__size_);
  }
  else {
    std::string v235 = v234;
  }
  v237[0] = (long long *)&v234;
  int v140 = std::__tree<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this, (const void **)&v234.__r_.__value_.__l.__data_, v237);
  if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v235.__r_.__value_.__l.__data_, v235.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v235;
  }
  uint64_t v239 = 0;
  BOOL v141 = operator new(0x20uLL);
  *BOOL v141 = off_26C211D08;
  uint64_t v142 = (std::string *)(v141 + 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v142, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v142->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    v141[3] = *((void *)&__p.__r_.__value_.__l + 2);
  }
  uint64_t v239 = v141;
  std::__function::__value_func<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v237, v140 + 7);
  std::__function::__value_func<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__value_func[abi:ne180100](v237);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v235.__r_.__value_.__l.__data_);
  }
  v237[0] = (long long *)&v234;
  std::string::size_type v143 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, (const void **)&v234.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v237);
  std::string::operator=((std::string *)(v143 + 7), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v234.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v234, "fs2s1_encoder");
  std::string::basic_string[abi:ne180100]<0>(&__str, "FS2S1 encoder module");
  if (v2 != (char *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>((uint64_t)this, (const void **)&v234.__r_.__value_.__l.__data_))
  {
    uint64_t v227 = __cxa_allocate_exception(0x10uLL);
    if ((v234.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v228 = &v234;
    }
    else {
      uint64_t v228 = (std::string *)v234.__r_.__value_.__r.__words[0];
    }
    StringFormatter::StringFormatter((StringFormatter *)v237, "Module name '%s' is registered already.", (const char *)v228);
    MEMORY[0x210558D40](v227, v237);
    __cxa_throw(v227, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v235, v234.__r_.__value_.__l.__data_, v234.__r_.__value_.__l.__size_);
  }
  else {
    std::string v235 = v234;
  }
  v237[0] = (long long *)&v234;
  std::string::size_type v144 = std::__tree<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this, (const void **)&v234.__r_.__value_.__l.__data_, v237);
  if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v235.__r_.__value_.__l.__data_, v235.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v235;
  }
  uint64_t v239 = 0;
  std::string::size_type v145 = operator new(0x20uLL);
  *std::string::size_type v145 = off_26C211C00;
  unint64_t v146 = (std::string *)(v145 + 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v146, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v146->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    v145[3] = *((void *)&__p.__r_.__value_.__l + 2);
  }
  uint64_t v239 = v145;
  std::__function::__value_func<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v237, v144 + 7);
  std::__function::__value_func<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__value_func[abi:ne180100](v237);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v235.__r_.__value_.__l.__data_);
  }
  v237[0] = (long long *)&v234;
  uint64_t v147 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, (const void **)&v234.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v237);
  std::string::operator=((std::string *)(v147 + 7), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v234.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v234, "fs2s1_decoder");
  std::string::basic_string[abi:ne180100]<0>(&__str, "FS2S1 decoder module");
  if (v2 != (char *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>((uint64_t)this, (const void **)&v234.__r_.__value_.__l.__data_))
  {
    unint64_t v229 = __cxa_allocate_exception(0x10uLL);
    if ((v234.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      float v230 = &v234;
    }
    else {
      float v230 = (std::string *)v234.__r_.__value_.__r.__words[0];
    }
    StringFormatter::StringFormatter((StringFormatter *)v237, "Module name '%s' is registered already.", (const char *)v230);
    MEMORY[0x210558D40](v229, v237);
    __cxa_throw(v229, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v235, v234.__r_.__value_.__l.__data_, v234.__r_.__value_.__l.__size_);
  }
  else {
    std::string v235 = v234;
  }
  v237[0] = (long long *)&v234;
  uint64_t v148 = std::__tree<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this, (const void **)&v234.__r_.__value_.__l.__data_, v237);
  if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v235.__r_.__value_.__l.__data_, v235.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v235;
  }
  uint64_t v239 = 0;
  unint64_t v149 = operator new(0x20uLL);
  *unint64_t v149 = off_26C211BA8;
  uint64_t v150 = (std::string *)(v149 + 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v150, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v150->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    v149[3] = *((void *)&__p.__r_.__value_.__l + 2);
  }
  uint64_t v239 = v149;
  std::__function::__value_func<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v237, v148 + 7);
  std::__function::__value_func<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__value_func[abi:ne180100](v237);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v235.__r_.__value_.__l.__data_);
  }
  v237[0] = (long long *)&v234;
  unint64_t v151 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, (const void **)&v234.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v237);
  std::string::operator=((std::string *)(v151 + 7), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v234.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v234, "roberta_word_embedding");
  std::string::basic_string[abi:ne180100]<0>(&__str, "Roberta word embedding module");
  if (v2 != (char *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>((uint64_t)this, (const void **)&v234.__r_.__value_.__l.__data_))
  {
    uint64_t v231 = __cxa_allocate_exception(0x10uLL);
    if ((v234.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v232 = &v234;
    }
    else {
      uint64_t v232 = (std::string *)v234.__r_.__value_.__r.__words[0];
    }
    StringFormatter::StringFormatter((StringFormatter *)v237, "Module name '%s' is registered already.", (const char *)v232);
    MEMORY[0x210558D40](v231, v237);
    __cxa_throw(v231, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v235, v234.__r_.__value_.__l.__data_, v234.__r_.__value_.__l.__size_);
  }
  else {
    std::string v235 = v234;
  }
  v237[0] = (long long *)&v234;
  uint64_t v152 = std::__tree<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this, (const void **)&v234.__r_.__value_.__l.__data_, v237);
  if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v235.__r_.__value_.__l.__data_, v235.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v235;
  }
  uint64_t v153 = operator new(0x20uLL);
  *uint64_t v153 = off_26C1EDDB0;
  uint64_t v154 = (std::string *)(v153 + 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v154, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v154->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    v153[3] = *((void *)&__p.__r_.__value_.__l + 2);
  }
  uint64_t v239 = v153;
  std::__function::__value_func<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v237, v152 + 7);
  std::__function::__value_func<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__value_func[abi:ne180100](v237);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v235.__r_.__value_.__l.__data_);
  }
  v237[0] = (long long *)&v234;
  uint64_t v155 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, (const void **)&v234.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v237);
  std::string::operator=((std::string *)(v155 + 7), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v234.__r_.__value_.__l.__data_);
  }
  return this;
}

void sub_20D440264(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  operator delete(v36);
  if (a35 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (a16 < 0) {
    operator delete(a11);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v35, *v38);
  std::__tree<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::destroy(*v37);
  _Unwind_Resume(a1);
}

std::string *ModuleFactory::ModuleFactoryImpl::register_module<NashvilleFEModule>(uint64_t **a1, uint64_t a2, const std::string *a3)
{
  v15[4] = *(long long **)MEMORY[0x263EF8340];
  if (a1 + 1 != (uint64_t **)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>((uint64_t)a1, (const void **)a2))
  {
    exceptiounint64_t n = __cxa_allocate_exception(0x10uLL);
    if (*(char *)(a2 + 23) >= 0) {
      unint64_t v12 = (const char *)a2;
    }
    else {
      unint64_t v12 = *(const char **)a2;
    }
    StringFormatter::StringFormatter((StringFormatter *)v15, "Module name '%s' is registered already.", v12);
    MEMORY[0x210558D40](exception, v15);
    __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v13, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v13 = *(std::string *)a2;
  }
  v15[0] = (long long *)a2;
  uint64_t v6 = std::__tree<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, (const void **)a2, v15);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v14, v13.__r_.__value_.__l.__data_, v13.__r_.__value_.__l.__size_);
  }
  else {
    std::string v14 = v13;
  }
  unint64_t v7 = (char *)operator new(0x20uLL);
  *(void *)unint64_t v7 = off_26C211AA0;
  char v8 = (std::string *)(v7 + 8);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v8, v14.__r_.__value_.__l.__data_, v14.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = *(_OWORD *)&v14.__r_.__value_.__l.__data_;
    *((void *)v7 + 3) = *((void *)&v14.__r_.__value_.__l + 2);
  }
  void v15[3] = (long long *)v7;
  std::__function::__value_func<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v15, v6 + 7);
  std::__function::__value_func<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__value_func[abi:ne180100](v15);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  v15[0] = (long long *)a2;
  char v9 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 3, (const void **)a2, (uint64_t)&std::piecewise_construct, v15);
  return std::string::operator=((std::string *)(v9 + 7), a3);
}

void sub_20D441210(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  operator delete(v29);
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a16 < 0) {
    operator delete(a11);
  }
  _Unwind_Resume(a1);
}

std::string *ModuleFactory::ModuleFactoryImpl::register_module<AudioResamplingModule>(uint64_t **a1, uint64_t a2, const std::string *a3)
{
  v15[4] = *(long long **)MEMORY[0x263EF8340];
  if (a1 + 1 != (uint64_t **)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>((uint64_t)a1, (const void **)a2))
  {
    exceptiounint64_t n = __cxa_allocate_exception(0x10uLL);
    if (*(char *)(a2 + 23) >= 0) {
      unint64_t v12 = (const char *)a2;
    }
    else {
      unint64_t v12 = *(const char **)a2;
    }
    StringFormatter::StringFormatter((StringFormatter *)v15, "Module name '%s' is registered already.", v12);
    MEMORY[0x210558D40](exception, v15);
    __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v13, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v13 = *(std::string *)a2;
  }
  v15[0] = (long long *)a2;
  uint64_t v6 = std::__tree<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, (const void **)a2, v15);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v14, v13.__r_.__value_.__l.__data_, v13.__r_.__value_.__l.__size_);
  }
  else {
    std::string v14 = v13;
  }
  unint64_t v7 = (char *)operator new(0x20uLL);
  *(void *)unint64_t v7 = off_26C211F18;
  char v8 = (std::string *)(v7 + 8);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v8, v14.__r_.__value_.__l.__data_, v14.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = *(_OWORD *)&v14.__r_.__value_.__l.__data_;
    *((void *)v7 + 3) = *((void *)&v14.__r_.__value_.__l + 2);
  }
  void v15[3] = (long long *)v7;
  std::__function::__value_func<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v15, v6 + 7);
  std::__function::__value_func<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__value_func[abi:ne180100](v15);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  v15[0] = (long long *)a2;
  char v9 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 3, (const void **)a2, (uint64_t)&std::piecewise_construct, v15);
  return std::string::operator=((std::string *)(v9 + 7), a3);
}

void sub_20D44148C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  operator delete(v29);
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a16 < 0) {
    operator delete(a11);
  }
  _Unwind_Resume(a1);
}

std::string *ModuleFactory::ModuleFactoryImpl::register_module<WaveformRateChangeModule>(uint64_t **a1, uint64_t a2, const std::string *a3)
{
  v15[4] = *(long long **)MEMORY[0x263EF8340];
  if (a1 + 1 != (uint64_t **)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>((uint64_t)a1, (const void **)a2))
  {
    exceptiounint64_t n = __cxa_allocate_exception(0x10uLL);
    if (*(char *)(a2 + 23) >= 0) {
      unint64_t v12 = (const char *)a2;
    }
    else {
      unint64_t v12 = *(const char **)a2;
    }
    StringFormatter::StringFormatter((StringFormatter *)v15, "Module name '%s' is registered already.", v12);
    MEMORY[0x210558D40](exception, v15);
    __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v13, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v13 = *(std::string *)a2;
  }
  v15[0] = (long long *)a2;
  uint64_t v6 = std::__tree<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, (const void **)a2, v15);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v14, v13.__r_.__value_.__l.__data_, v13.__r_.__value_.__l.__size_);
  }
  else {
    std::string v14 = v13;
  }
  unint64_t v7 = (char *)operator new(0x20uLL);
  *(void *)unint64_t v7 = off_26C2122E0;
  char v8 = (std::string *)(v7 + 8);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v8, v14.__r_.__value_.__l.__data_, v14.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = *(_OWORD *)&v14.__r_.__value_.__l.__data_;
    *((void *)v7 + 3) = *((void *)&v14.__r_.__value_.__l + 2);
  }
  void v15[3] = (long long *)v7;
  std::__function::__value_func<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v15, v6 + 7);
  std::__function::__value_func<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__value_func[abi:ne180100](v15);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  v15[0] = (long long *)a2;
  char v9 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 3, (const void **)a2, (uint64_t)&std::piecewise_construct, v15);
  return std::string::operator=((std::string *)(v9 + 7), a3);
}

void sub_20D441708(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  operator delete(v29);
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a16 < 0) {
    operator delete(a11);
  }
  _Unwind_Resume(a1);
}

std::string *ModuleFactory::ModuleFactoryImpl::register_module<EspressoWaveRNNModule>(uint64_t **a1, uint64_t a2, const std::string *a3)
{
  v15[4] = *(long long **)MEMORY[0x263EF8340];
  if (a1 + 1 != (uint64_t **)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>((uint64_t)a1, (const void **)a2))
  {
    exceptiounint64_t n = __cxa_allocate_exception(0x10uLL);
    if (*(char *)(a2 + 23) >= 0) {
      unint64_t v12 = (const char *)a2;
    }
    else {
      unint64_t v12 = *(const char **)a2;
    }
    StringFormatter::StringFormatter((StringFormatter *)v15, "Module name '%s' is registered already.", v12);
    MEMORY[0x210558D40](exception, v15);
    __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v13, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v13 = *(std::string *)a2;
  }
  v15[0] = (long long *)a2;
  uint64_t v6 = std::__tree<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, (const void **)a2, v15);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v14, v13.__r_.__value_.__l.__data_, v13.__r_.__value_.__l.__size_);
  }
  else {
    std::string v14 = v13;
  }
  unint64_t v7 = (char *)operator new(0x20uLL);
  *(void *)unint64_t v7 = off_26C211F70;
  char v8 = (std::string *)(v7 + 8);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v8, v14.__r_.__value_.__l.__data_, v14.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = *(_OWORD *)&v14.__r_.__value_.__l.__data_;
    *((void *)v7 + 3) = *((void *)&v14.__r_.__value_.__l + 2);
  }
  void v15[3] = (long long *)v7;
  std::__function::__value_func<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v15, v6 + 7);
  std::__function::__value_func<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__value_func[abi:ne180100](v15);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  v15[0] = (long long *)a2;
  char v9 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 3, (const void **)a2, (uint64_t)&std::piecewise_construct, v15);
  return std::string::operator=((std::string *)(v9 + 7), a3);
}

void sub_20D441984(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  operator delete(v29);
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a16 < 0) {
    operator delete(a11);
  }
  _Unwind_Resume(a1);
}

std::string *ModuleFactory::ModuleFactoryImpl::register_module<MilWaveRNNModule>(uint64_t **a1, uint64_t a2, const std::string *a3)
{
  v15[4] = *(long long **)MEMORY[0x263EF8340];
  if (a1 + 1 != (uint64_t **)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>((uint64_t)a1, (const void **)a2))
  {
    exceptiounint64_t n = __cxa_allocate_exception(0x10uLL);
    if (*(char *)(a2 + 23) >= 0) {
      unint64_t v12 = (const char *)a2;
    }
    else {
      unint64_t v12 = *(const char **)a2;
    }
    StringFormatter::StringFormatter((StringFormatter *)v15, "Module name '%s' is registered already.", v12);
    MEMORY[0x210558D40](exception, v15);
    __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v13, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v13 = *(std::string *)a2;
  }
  v15[0] = (long long *)a2;
  uint64_t v6 = std::__tree<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, (const void **)a2, v15);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v14, v13.__r_.__value_.__l.__data_, v13.__r_.__value_.__l.__size_);
  }
  else {
    std::string v14 = v13;
  }
  unint64_t v7 = (char *)operator new(0x20uLL);
  *(void *)unint64_t v7 = off_26C211998;
  char v8 = (std::string *)(v7 + 8);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v8, v14.__r_.__value_.__l.__data_, v14.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = *(_OWORD *)&v14.__r_.__value_.__l.__data_;
    *((void *)v7 + 3) = *((void *)&v14.__r_.__value_.__l + 2);
  }
  void v15[3] = (long long *)v7;
  std::__function::__value_func<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v15, v6 + 7);
  std::__function::__value_func<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__value_func[abi:ne180100](v15);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  v15[0] = (long long *)a2;
  char v9 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 3, (const void **)a2, (uint64_t)&std::piecewise_construct, v15);
  return std::string::operator=((std::string *)(v9 + 7), a3);
}

void sub_20D441C00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  operator delete(v29);
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a16 < 0) {
    operator delete(a11);
  }
  _Unwind_Resume(a1);
}

std::string *ModuleFactory::ModuleFactoryImpl::register_module<AnetecDecoderModule>(uint64_t **a1, uint64_t a2, const std::string *a3)
{
  v15[4] = *(long long **)MEMORY[0x263EF8340];
  if (a1 + 1 != (uint64_t **)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>((uint64_t)a1, (const void **)a2))
  {
    exceptiounint64_t n = __cxa_allocate_exception(0x10uLL);
    if (*(char *)(a2 + 23) >= 0) {
      unint64_t v12 = (const char *)a2;
    }
    else {
      unint64_t v12 = *(const char **)a2;
    }
    StringFormatter::StringFormatter((StringFormatter *)v15, "Module name '%s' is registered already.", v12);
    MEMORY[0x210558D40](exception, v15);
    __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v13, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v13 = *(std::string *)a2;
  }
  v15[0] = (long long *)a2;
  uint64_t v6 = std::__tree<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, (const void **)a2, v15);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v14, v13.__r_.__value_.__l.__data_, v13.__r_.__value_.__l.__size_);
  }
  else {
    std::string v14 = v13;
  }
  unint64_t v7 = (char *)operator new(0x20uLL);
  *(void *)unint64_t v7 = off_26C1EDD58;
  char v8 = (std::string *)(v7 + 8);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v8, v14.__r_.__value_.__l.__data_, v14.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = *(_OWORD *)&v14.__r_.__value_.__l.__data_;
    *((void *)v7 + 3) = *((void *)&v14.__r_.__value_.__l + 2);
  }
  void v15[3] = (long long *)v7;
  std::__function::__value_func<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v15, v6 + 7);
  std::__function::__value_func<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__value_func[abi:ne180100](v15);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  v15[0] = (long long *)a2;
  char v9 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 3, (const void **)a2, (uint64_t)&std::piecewise_construct, v15);
  return std::string::operator=((std::string *)(v9 + 7), a3);
}

void sub_20D441E7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  operator delete(v29);
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a16 < 0) {
    operator delete(a11);
  }
  _Unwind_Resume(a1);
}

std::string *ModuleFactory::ModuleFactoryImpl::register_module<AnetecStreamingDecoderModule>(uint64_t **a1, uint64_t a2, const std::string *a3)
{
  v15[4] = *(long long **)MEMORY[0x263EF8340];
  if (a1 + 1 != (uint64_t **)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>((uint64_t)a1, (const void **)a2))
  {
    exceptiounint64_t n = __cxa_allocate_exception(0x10uLL);
    if (*(char *)(a2 + 23) >= 0) {
      unint64_t v12 = (const char *)a2;
    }
    else {
      unint64_t v12 = *(const char **)a2;
    }
    StringFormatter::StringFormatter((StringFormatter *)v15, "Module name '%s' is registered already.", v12);
    MEMORY[0x210558D40](exception, v15);
    __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v13, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v13 = *(std::string *)a2;
  }
  v15[0] = (long long *)a2;
  uint64_t v6 = std::__tree<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, (const void **)a2, v15);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v14, v13.__r_.__value_.__l.__data_, v13.__r_.__value_.__l.__size_);
  }
  else {
    std::string v14 = v13;
  }
  unint64_t v7 = (char *)operator new(0x20uLL);
  *(void *)unint64_t v7 = off_26C1EDE60;
  char v8 = (std::string *)(v7 + 8);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v8, v14.__r_.__value_.__l.__data_, v14.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = *(_OWORD *)&v14.__r_.__value_.__l.__data_;
    *((void *)v7 + 3) = *((void *)&v14.__r_.__value_.__l + 2);
  }
  void v15[3] = (long long *)v7;
  std::__function::__value_func<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](v15, v6 + 7);
  std::__function::__value_func<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__value_func[abi:ne180100](v15);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  v15[0] = (long long *)a2;
  char v9 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 3, (const void **)a2, (uint64_t)&std::piecewise_construct, v15);
  return std::string::operator=((std::string *)(v9 + 7), a3);
}

void sub_20D4420F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  operator delete(v29);
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a16 < 0) {
    operator delete(a11);
  }
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void *std::__function::__value_func<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](void *result, void *a2)
{
  v6[3] = *MEMORY[0x263EF8340];
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        void v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        void v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        __n128 result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        void v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      void v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_20D44242C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

char **std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<RobertaWordEmbModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<RobertaWordEmbModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<RobertaWordEmbModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<RobertaWordEmbModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<RobertaWordEmbModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<RobertaWordEmbModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()(uint64_t a1, char *a2, long long *a3)
{
  uint64_t v60 = *MEMORY[0x263EF8340];
  long long v48 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  std::chrono::steady_clock::now();
  uint64_t v4 = operator new(0x220uLL);
  uint64_t v5 = v4;
  v4[1] = 0;
  v4[2] = 0;
  *uint64_t v4 = off_26C1EE158;
  if (*((void *)&v48 + 1))
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v48 + 1) + 8), 1uLL, memory_order_relaxed);
    long long v58 = v48;
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v48 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  else
  {
    long long v58 = (unint64_t)v48;
  }
  Module::Module((uint64_t)(v4 + 3), a2, (uint64_t *)&v58);
  if (*((void *)&v58 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v58 + 1));
  }
  v5[3] = off_26C1ED888;
  *((unsigned char *)v5 + 296) = 0;
  v5[38] = 850045863;
  *(_OWORD *)(v5 + 39) = 0u;
  *(_OWORD *)(v5 + 41) = 0u;
  *(_OWORD *)(v5 + 43) = 0u;
  *(_OWORD *)(v5 + 45) = 0u;
  *(_OWORD *)((char *)v5 + 369) = 0u;
  *(_OWORD *)(v5 + 49) = 0u;
  *(_OWORD *)(v5 + 51) = 0u;
  *(_OWORD *)(v5 + 53) = 0u;
  *(_OWORD *)(v5 + 55) = 0u;
  *(_OWORD *)(v5 + 57) = 0u;
  *(_OWORD *)(v5 + 59) = 0u;
  *(_OWORD *)(v5 + 61) = 0u;
  *(_OWORD *)(v5 + 63) = 0u;
  *(_OWORD *)(v5 + 65) = 0u;
  v5[67] = 0;
  SharedObjectPool::get<VoiceConfig>(&v57, (long long **)v48);
  uint64_t v6 = v57;
  uint64_t v7 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "model_config");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v7, &v56);
  (*(void (**)(uint8_t *__return_ptr, uint64_t, uint64_t, std::string *, void))(*(void *)v6 + 40))(buf, v6, 1920427373, &v56, 0);
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v56.__r_.__value_.__l.__data_);
  }
  InferenceEngine::Utils::read_json_from_file((char *)buf, (uint64_t)v55);
  std::string::basic_string[abi:ne180100]<0>(&v56, "model_parameters");
  __p.__r_.__value_.__s.__data_[0] = 0;
  __p.__r_.__value_.__l.__size_ = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,0>(v55, (const void **)&v56.__r_.__value_.__l.__data_, (unsigned __int8 *)&__p, (uint64_t)v53);
  int v8 = *((unsigned __int8 *)v5 + 384);
  *((unsigned char *)v5 + 384) = v53[0];
  v53[0] = v8;
  char v9 = (uint64_t *)v5[49];
  v5[49] = v54;
  uint64_t v54 = v9;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v54, v8);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&__p.__r_.__value_.__l.__size_, __p.__r_.__value_.__s.__data_[0]);
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v56.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "model_type");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value("default", a2, (const void **)&__p.__r_.__value_.__l.__data_, &v56);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v10 = (const char *)(v5 + 26);
  if (*((void *)&v48 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v48 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v11 = *(std::__shared_weak_count **)(v48 + 24);
  if (v11 && (unint64_t v12 = std::__shared_weak_count::lock(v11)) != 0)
  {
    std::string v13 = v12;
    uint64_t v14 = *(void *)(v48 + 16);
    if (v14
      && (uint64_t v15 = v14 + 8,
          std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>((void *)(v14 + 8), (unsigned __int8 *)v5 + 208)))
    {
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)(v5 + 26);
      uint64_t v16 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v15, (unsigned __int8 *)v5 + 208, (long long **)&__p);
      int v18 = (void *)*((void *)v16 + 5);
      uint64_t v17 = *((void *)v16 + 6);
      if (v17) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
      }
    }
    else
    {
      int v18 = 0;
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
    if (!*((void *)&v48 + 1))
    {
LABEL_22:
      if (!v18)
      {
        exceptiounint64_t n = __cxa_allocate_exception(0x10uLL);
        if (*((char *)v5 + 231) < 0) {
          uint64_t v10 = *(const char **)v10;
        }
        StringFormatter::StringFormatter((StringFormatter *)&__p, "Persitent module '%s' is null", v10);
        MEMORY[0x210558D40](exception, &__p);
        __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
      }
      if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
      {
        if (v56.__r_.__value_.__l.__size_ != 7) {
          goto LABEL_92;
        }
        char v19 = (std::string *)v56.__r_.__value_.__r.__words[0];
      }
      else
      {
        if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) != 7) {
          goto LABEL_92;
        }
        char v19 = &v56;
      }
      int data = (int)v19->__r_.__value_.__l.__data_;
      int v21 = *(_DWORD *)((char *)v19->__r_.__value_.__r.__words + 3);
      if (data != 1634100580 || v21 != 1953264993)
      {
LABEL_92:
        uint64_t v44 = __cxa_allocate_exception(0x10uLL);
        char v45 = &v56;
        if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          char v45 = (std::string *)v56.__r_.__value_.__r.__words[0];
        }
        StringFormatter::StringFormatter((StringFormatter *)&__p, "Model type '%s' is not supported.", (const char *)v45);
        MEMORY[0x210558D40](v44, &__p);
        __cxa_throw(v44, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
      }
      BOOL v23 = (std::__shared_weak_count *)v18[38];
      if (v23) {
        atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v24 = v18[39];
      uint64_t v25 = (std::__shared_weak_count *)v18[40];
      if (v25) {
        atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v27 = v18[41];
      std::string::size_type v26 = (std::__shared_weak_count *)v18[42];
      if (v26) {
        atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int v28 = operator new(0x40uLL);
      int v29 = v28;
      v28[1] = 0;
      v28[2] = 0;
      *int v28 = off_26C1EE190;
      int v30 = v28 + 3;
      if (v25) {
        atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v26) {
        atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      v28[3] = off_26C1ED8F8;
      v28[4] = v24;
      v28[5] = v25;
      if (v25) {
        atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      v28[6] = v27;
      v28[7] = v26;
      if (v26)
      {
        atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
        std::__shared_weak_count::__release_shared[abi:ne180100](v26);
      }
      if (v25) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v25);
      }
      if (v23) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v23);
      }
      uint64_t v31 = (std::__shared_weak_count *)v5[47];
      v5[46] = v30;
      v5[47] = v29;
      if (v31) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v31);
      }
      if (v26) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v26);
      }
      if (v25) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v25);
      }
      std::string::basic_string[abi:ne180100]<0>(&v51, "prompt_text");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_20D5A22AE, a2, (const void **)&v51.__r_.__value_.__l.__data_, &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        BOOL v32 = __p.__r_.__value_.__l.__size_ == 0;
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      else
      {
        BOOL v32 = SHIBYTE(__p.__r_.__value_.__r.__words[2]) == 0;
      }
      if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v51.__r_.__value_.__l.__data_);
      }
      if (!v32)
      {
        if (Diagnostics_GetLogObject(void)::onceToken != -1) {
          dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
        }
        int v40 = Diagnostics_GetLogObject(void)::__profile_log_default;
        if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(__p.__r_.__value_.__l.__data_) = 0;
          _os_log_impl(&dword_20CD80000, v40, OS_LOG_TYPE_DEFAULT, "Load text and dialog tags for single-prompt model", (uint8_t *)&__p, 2u);
        }
        Diagnostics::log(5, "Load text and dialog tags for single-prompt model", v41);
        uint64_t v42 = v57;
        uint64_t v43 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "prompt_text");
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v43, &v49);
        (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t, std::string *, void))(*(void *)v42 + 40))(&v50, v42, 1920427373, &v49, 0);
        RobertaWordEmbModule::load_txt(&v51, (uint64_t)&v50);
        WordEmbeddingUtils::strip_marker_from_original_text(&__p, (uint64_t)&v51);
      }
      std::string::basic_string[abi:ne180100]<0>(&v51, "semantic_prompt_text");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_20D5A22AE, a2, (const void **)&v51.__r_.__value_.__l.__data_, &__p);
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
      }
      if (size)
      {
        std::string::basic_string[abi:ne180100]<0>(&v49, "acoustic_prompt_text");
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_20D5A22AE, a2, (const void **)&v49.__r_.__value_.__l.__data_, &v50);
        std::string::size_type v34 = v50.__r_.__value_.__l.__size_;
        if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v34 = HIBYTE(v50.__r_.__value_.__r.__words[2]);
        }
        BOOL v35 = v34 != 0;
        if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v50.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v49.__r_.__value_.__l.__data_);
        }
        if ((*((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x80) != 0) {
          goto LABEL_73;
        }
      }
      else
      {
        BOOL v35 = 0;
        if ((*((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x80) != 0) {
LABEL_73:
        }
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v51.__r_.__value_.__l.__data_);
      }
      if (v35)
      {
        if (Diagnostics_GetLogObject(void)::onceToken != -1) {
          dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
        }
        std::string::size_type v36 = Diagnostics_GetLogObject(void)::__profile_log_default;
        if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(__p.__r_.__value_.__l.__data_) = 0;
          _os_log_impl(&dword_20CD80000, v36, OS_LOG_TYPE_DEFAULT, "Load text and dialog tags for dual-prompt model", (uint8_t *)&__p, 2u);
        }
        Diagnostics::log(5, "Load text and dialog tags for dual-prompt model", v37);
        uint64_t v38 = v57;
        uint64_t v39 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "semantic_prompt_text");
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v39, &v49);
        (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t, std::string *, void))(*(void *)v38 + 40))(&v50, v38, 1920427373, &v49, 0);
        RobertaWordEmbModule::load_txt(&v51, (uint64_t)&v50);
        WordEmbeddingUtils::strip_marker_from_original_text(&__p, (uint64_t)&v51);
      }
      vDSP_Length v47 = __cxa_allocate_exception(0x10uLL);
      StringFormatter::StringFormatter((StringFormatter *)&__p, "Prompt text are required for Roberta.");
      MEMORY[0x210558D40](v47, &__p);
      __cxa_throw(v47, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
    }
  }
  else
  {
    int v18 = 0;
    if (!*((void *)&v48 + 1)) {
      goto LABEL_22;
    }
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v48 + 1));
  goto LABEL_22;
}

void sub_20D4433B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, void **a13, void **a14, void **a15, void **a16, void **a17, uint64_t a18, uint64_t a19, uint64_t a20,Module *a21,std::__shared_weak_count *a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v51);
  if (v52) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v52);
  }
  if (*(char *)(v53 - 161) < 0) {
    operator delete(*(void **)(v53 - 184));
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)(v53 - 192), *(unsigned __int8 *)(v53 - 200));
  if (*(char *)(v53 - 105) < 0) {
    operator delete(*(void **)(v53 - 128));
  }
  uint64_t v55 = *(std::__shared_weak_count **)(v53 - 152);
  if (v55) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v55);
  }
  std::string v56 = *a12;
  if (*a12)
  {
    *(void *)(v50 + 528) = v56;
    operator delete(v56);
  }
  uint64_t v57 = *a13;
  if (*a13)
  {
    *(void *)(v50 + 504) = v57;
    operator delete(v57);
  }
  long long v58 = *a14;
  if (*a14)
  {
    *(void *)(v50 + 480) = v58;
    operator delete(v58);
  }
  if (*(char *)(v50 + 471) < 0) {
    operator delete(*a15);
  }
  if (*(char *)(v50 + 447) < 0) {
    operator delete(*a16);
  }
  if (*(char *)(v50 + 423) < 0) {
    operator delete(*a17);
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)(v49 + 368), *(unsigned __int8 *)(v50 + 384));
  unint64_t v59 = *(std::__shared_weak_count **)(v50 + 376);
  if (v59) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v59);
  }
  std::mutex::~mutex((std::mutex *)(v49 + 280));
  Module::~Module(a21);
  if (a22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a22);
  }
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v50);
  operator delete(v60);
  if (a22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a22);
  }
  _Unwind_Resume(a1);
}

void sub_20D4436B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a40 < 0) {
    JUMPOUT(0x20D4435ACLL);
  }
  JUMPOUT(0x20D4435B0);
}

void sub_20D4436CC()
{
}

void sub_20D4436EC()
{
}

void sub_20D4436F4()
{
  if (*(char *)(v0 - 161) < 0) {
    JUMPOUT(0x20D4435CCLL);
  }
  JUMPOUT(0x20D4435D0);
}

void sub_20D443708()
{
}

void sub_20D443710()
{
  uint64_t v1 = *(std::__shared_weak_count **)(v0 - 136);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  JUMPOUT(0x20D443684);
}

void sub_20D443724()
{
}

void sub_20D443738()
{
}

uint64_t std::__shared_ptr_emplace<RobertaWordEmbModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<RobertaWordEmbModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C1EE158;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<RobertaWordEmbModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C1EE158;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<RobertaWordEmbModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<RobertaWordEmbModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0) {
    operator delete(__p[1]);
  }
  operator delete(__p);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<RobertaWordEmbModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<RobertaWordEmbModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<RobertaWordEmbModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<RobertaWordEmbModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, void *a2)
{
  *a2 = off_26C1EDDB0;
  uint64_t v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void *std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<RobertaWordEmbModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<RobertaWordEmbModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  void *v2 = off_26C1EDDB0;
  long long v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(void *)(a1 + 24);
  }
  return v2;
}

void sub_20D4438F4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<RobertaWordEmbModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<RobertaWordEmbModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C1EDDB0;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x2105595E0);
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<RobertaWordEmbModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<RobertaWordEmbModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C1EDDB0;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

char **std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<FS2S1DecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<FS2S1DecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<FS2S1DecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<FS2S1DecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

__n128 std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<FS2S1DecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<FS2S1DecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, char *a2@<X1>, long long *a3@<X2>, __n128 *a4@<X8>)
{
  uint64_t v80 = *MEMORY[0x263EF8340];
  long long v63 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  v62.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  uint64_t v7 = operator new(0x190uLL);
  unint64_t v8 = (unint64_t)v7;
  v7[1] = 0;
  v7[2] = 0;
  void *v7 = off_26C216AD0;
  unint64_t v9 = (unint64_t)(v7 + 3);
  if (*((void *)&v63 + 1))
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v63 + 1) + 8), 1uLL, memory_order_relaxed);
    long long v74 = v63;
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v63 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  else
  {
    long long v74 = (unint64_t)v63;
  }
  Module::Module((uint64_t)(v7 + 3), a2, (uint64_t *)&v74);
  if (*((void *)&v74 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v74 + 1));
  }
  *(void *)(v8 + ++*(_DWORD *)(result + 24) = off_26C2022F8;
  *(unsigned char *)(v8 + 296) = 0;
  *(void *)(v8 + 304) = 850045863;
  *(void *)(v8 + 392) = 0;
  *(_OWORD *)(v8 + 312) = 0u;
  *(_OWORD *)(v8 + 328) = 0u;
  *(_OWORD *)(v8 + 344) = 0u;
  *(_OWORD *)(v8 + 360) = 0u;
  *(_OWORD *)(v8 + 369) = 0u;
  uint64_t v10 = v63;
  SharedObjectPool::get<VoiceConfig>(&v72, (long long **)v63);
  uint64_t v11 = v72;
  uint64_t v12 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "model_config");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v12, &buf);
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t, std::string *, void))(*(void *)v11 + 40))(v70, v11, 1717662579, &buf, 0);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  InferenceEngine::Utils::read_json_from_file((char *)v70, (uint64_t)v68);
  std::string::basic_string[abi:ne180100]<0>(&buf, "model_parameters");
  LOBYTE(v76) = 0;
  uint64_t v77 = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,0>(v68, (const void **)&buf.__r_.__value_.__l.__data_, (unsigned __int8 *)&v76, (uint64_t)v66);
  int v13 = *(unsigned __int8 *)(v8 + 384);
  *(unsigned char *)(v8 + 384) = v66[0];
  v66[0] = v13;
  uint64_t v14 = *(uint64_t **)(v8 + 392);
  *(void *)(v8 + 392) = v67;
  unint64_t v67 = v14;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v67, v13);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v77, v76);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&buf, "model_type");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value("default", a2, (const void **)&buf.__r_.__value_.__l.__data_, &__p);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  uint64_t v15 = (const char *)(v8 + 208);
  if (*((void *)&v63 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v63 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v16 = *(std::__shared_weak_count **)(v63 + 24);
  uint64_t v64 = a1;
  uint64_t v60 = a4;
  if (!v16 || (uint64_t v17 = std::__shared_weak_count::lock(v16)) == 0)
  {
    BOOL v22 = 0;
    BOOL v23 = 0;
    if (!*((void *)&v63 + 1)) {
      goto LABEL_22;
    }
    goto LABEL_21;
  }
  int v18 = v17;
  uint64_t v19 = *(void *)(v10 + 16);
  if (v19
    && (uint64_t v20 = v19 + 8,
        std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>((void *)(v19 + 8), (unsigned __int8 *)(v8 + 208))))
  {
    buf.__r_.__value_.__r.__words[0] = v8 + 208;
    int v21 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v20, (unsigned __int8 *)(v8 + 208), (long long **)&buf);
    BOOL v23 = (void *)*((void *)v21 + 5);
    BOOL v22 = (std::__shared_weak_count *)*((void *)v21 + 6);
    if (v22) {
      atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    BOOL v22 = 0;
    BOOL v23 = 0;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  if (*((void *)&v63 + 1)) {
LABEL_21:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v63 + 1));
LABEL_22:
  BOOL v61 = v22;
  if (!v23)
  {
    exceptiounint64_t n = __cxa_allocate_exception(0x10uLL);
    if (*(char *)(v8 + 231) < 0) {
      uint64_t v15 = *(const char **)v15;
    }
    StringFormatter::StringFormatter((StringFormatter *)&buf, "Persitent module '%s' is null", v15);
    MEMORY[0x210558D40](exception, &buf);
    __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    if (__p.__r_.__value_.__l.__size_ != 6)
    {
      if (__p.__r_.__value_.__l.__size_ == 7
        && *(_DWORD *)__p.__r_.__value_.__l.__data_ == 1634100580
        && *(_DWORD *)(__p.__r_.__value_.__r.__words[0] + 3) == 1953264993)
      {
        goto LABEL_38;
      }
LABEL_114:
      std::string v56 = __cxa_allocate_exception(0x10uLL);
      p_p = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      StringFormatter::StringFormatter((StringFormatter *)&buf, "Model type '%s' is not supported.", (const char *)p_p);
      MEMORY[0x210558D40](v56, &buf);
      __cxa_throw(v56, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
    }
    std::string::size_type v34 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (HIBYTE(__p.__r_.__value_.__r.__words[2]) != 6)
    {
      if (HIBYTE(__p.__r_.__value_.__r.__words[2]) != 7) {
        goto LABEL_114;
      }
      if (LODWORD(__p.__r_.__value_.__l.__data_) != 1634100580
        || *(_DWORD *)((char *)__p.__r_.__value_.__r.__words + 3) != 1953264993)
      {
        goto LABEL_114;
      }
LABEL_38:
      std::string::size_type v26 = (std::__shared_weak_count *)v23[38];
      if (v26) {
        atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v27 = v23[39];
      int v28 = (std::__shared_weak_count *)v23[40];
      std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep = v62.__d_.__rep_;
      if (v28) {
        atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int v30 = operator new(0x30uLL);
      uint64_t v31 = v30;
      v30[1] = 0;
      v30[2] = 0;
      *int v30 = off_26C217A90;
      BOOL v32 = v30 + 3;
      if (v28)
      {
        atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
        v30[3] = off_26C204008;
        v30[4] = v27;
        v30[5] = v28;
        atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
        std::__shared_weak_count::__release_shared[abi:ne180100](v28);
        if (!v26) {
          goto LABEL_45;
        }
      }
      else
      {
        v30[3] = off_26C204008;
        v30[4] = v27;
        v30[5] = 0;
        if (!v26)
        {
LABEL_45:
          uint64_t v33 = *(std::__shared_weak_count **)(v8 + 376);
          *(void *)(v8 + 368) = v32;
          *(void *)(v8 + 376) = v31;
          if (v33) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v33);
          }
          goto LABEL_89;
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v26);
      goto LABEL_45;
    }
    std::string::size_type v34 = &__p;
  }
  int data = (int)v34->__r_.__value_.__l.__data_;
  int v36 = WORD2(v34->__r_.__value_.__r.__words[0]);
  if (data != 1836020336 || v36 != 29808) {
    goto LABEL_114;
  }
  unint64_t v59 = v9;
  uint64_t v38 = v23[37];
  uint64_t v39 = (std::__shared_weak_count *)v23[38];
  if (v39) {
    atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v40 = v23[39];
  int v28 = (std::__shared_weak_count *)v23[40];
  if (v28) {
    atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v41 = operator new(0x40uLL);
  uint64_t v42 = v41;
  v41[1] = 0;
  v41[2] = 0;
  *unint64_t v41 = off_26C217DD8;
  if (v28) {
    atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v39) {
    atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v28) {
    atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v41[3] = off_26C204008;
  v41[4] = v40;
  v41[5] = v28;
  if (v28)
  {
    atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  if (v39) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v39);
  }
  v42[6] = 0;
  v42[3] = off_26C204550;
  v42[7] = 0;
  uint64_t v43 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "prompt_semantic");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v43, &v75);
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t, std::string *, void))(*(void *)v38 + 40))(&v76, v38, 1717662579, &v75, 0);
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep = v62.__d_.__rep_;
  InferenceEngine::DataUtils::read_vector_from_file<float>(&buf);
  if (v78 < 0) {
    operator delete(v76);
  }
  if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v75.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v76, "decoder_prompt");
  InferenceEngine::DataTensor::build_from_1d_array<float>((uint64_t)&buf, &v75);
  long long v44 = *(_OWORD *)&v75.__r_.__value_.__l.__data_;
  *(_OWORD *)&v75.__r_.__value_.__l.__data_ = 0uLL;
  char v45 = (std::__shared_weak_count *)v42[7];
  *((_OWORD *)v42 + 3) = v44;
  if (v45)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v45);
    if (v75.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v75.__r_.__value_.__l.__size_);
    }
  }
  if (v78 < 0) {
    operator delete(v76);
  }
  InferenceEngine::DataTensor::unsqueeze((InferenceEngine::DataTensor *)v42[6], 0);
  if (buf.__r_.__value_.__r.__words[0])
  {
    buf.__r_.__value_.__l.__size_ = buf.__r_.__value_.__r.__words[0];
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  if (v39) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v39);
  }
  *(void *)&long long v46 = v42 + 3;
  *((void *)&v46 + 1) = v42;
  vDSP_Length v47 = *(std::__shared_weak_count **)(v8 + 376);
  *(_OWORD *)(v8 + 368) = v46;
  if (v47) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v47);
  }
  unint64_t v9 = v59;
LABEL_89:
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  *(unsigned char *)(v8 + 296) = 0;
  if (v61) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v61);
  }
  uint64_t v48 = v64;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v69, v68[0]);
  if (v71 < 0) {
    operator delete(v70[0]);
  }
  if (v73) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v73);
  }
  if (*((void *)&v63 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v63 + 1));
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  uint64_t v49 = (std::string::size_type *)(v64 + 8);
  uint64_t v50 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    std::string::size_type v51 = v64 + 8;
    if (*(char *)(v64 + 31) < 0) {
      std::string::size_type v51 = *v49;
    }
    v52.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v51;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
    *(double *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (double)((v52.__d_.__rep_ - rep) / 1000000) / 1000.0;
    _os_log_impl(&dword_20CD80000, v50, OS_LOG_TYPE_INFO, "Init latency (%s): %.3f s", (uint8_t *)&buf, 0x16u);
    uint64_t v48 = v64;
  }
  if (*(char *)(v48 + 31) < 0) {
    uint64_t v49 = (std::string::size_type *)*v49;
  }
  v53.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "Init latency (%s): %.3f s", v54, v49, (double)((v53.__d_.__rep_ - rep) / 1000000) / 1000.0);
  if (*((void *)&v63 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v63 + 1));
  }
  result.n128_u64[0] = v9;
  result.n128_u64[1] = v8;
  *uint64_t v60 = result;
  return result;
}

void sub_20D444350(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, Module *a13, uint64_t a14, uint64_t a15, uint64_t a16, long long a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,unsigned __int8 a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,std::__shared_weak_count *a35,uint64_t a36,uint64_t a37)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v40);
  if (v38) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v38);
  }
  if (a23 < 0) {
    operator delete(__p);
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&a27, a26);
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a35) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a35);
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)(v39 + 368), *(unsigned __int8 *)(v37 + 384));
  uint64_t v43 = *(std::__shared_weak_count **)(v37 + 376);
  if (v43) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v43);
  }
  std::mutex::~mutex((std::mutex *)(v39 + 280));
  Module::~Module(v41);
  if (v38) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v38);
  }
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v37);
  operator delete(v44);
  if (v38) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v38);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<FS2S1DecoderModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<FS2S1DecoderModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C216AD0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<FS2S1DecoderModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C216AD0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<FS2S1DecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<FS2S1DecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0) {
    operator delete(__p[1]);
  }
  operator delete(__p);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<FS2S1DecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<FS2S1DecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<FS2S1DecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<FS2S1DecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, void *a2)
{
  *a2 = off_26C211BA8;
  uint64_t v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void *std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<FS2S1DecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<FS2S1DecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  void *v2 = off_26C211BA8;
  long long v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(void *)(a1 + 24);
  }
  return v2;
}

void sub_20D444798(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<FS2S1DecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<FS2S1DecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C211BA8;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x2105595E0);
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<FS2S1DecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<FS2S1DecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C211BA8;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

char **std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<FS2S1EncoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<FS2S1EncoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<FS2S1EncoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<FS2S1EncoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

__n128 std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<FS2S1EncoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<FS2S1EncoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, char *a2@<X1>, long long *a3@<X2>, __n128 *a4@<X8>)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  long long v19 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  v7.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  unint64_t v8 = operator new(0x1B8uLL);
  unint64_t v9 = (unint64_t)v8;
  v8[1] = 0;
  _OWORD v8[2] = 0;
  void *v8 = off_26C216B08;
  unint64_t v10 = (unint64_t)(v8 + 3);
  *(_OWORD *)std::string buf = v19;
  if (*((void *)&v19 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v19 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  FS2S1EncoderModule::FS2S1EncoderModule((uint64_t)(v8 + 3), a2, (uint64_t)buf);
  if (*(void *)&buf[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  uint64_t v11 = (void *)(a1 + 8);
  uint64_t v12 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    int v13 = a4;
    uint64_t v14 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      uint64_t v14 = (void *)*v11;
    }
    v15.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    *(_DWORD *)std::string buf = 136315394;
    *(void *)&uint8_t buf[4] = v14;
    *(_WORD *)&uint8_t buf[12] = 2048;
    *(double *)&buf[14] = (double)((v15.__d_.__rep_ - v7.__d_.__rep_) / 1000000) / 1000.0;
    _os_log_impl(&dword_20CD80000, v12, OS_LOG_TYPE_INFO, "Init latency (%s): %.3f s", buf, 0x16u);
    a4 = v13;
  }
  if (*(char *)(a1 + 31) < 0) {
    uint64_t v11 = (void *)*v11;
  }
  v16.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "Init latency (%s): %.3f s", v17, v11, (double)((v16.__d_.__rep_ - v7.__d_.__rep_) / 1000000) / 1000.0);
  if (*((void *)&v19 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v19 + 1));
  }
  result.n128_u64[0] = v10;
  result.n128_u64[1] = v9;
  *a4 = result;
  return result;
}

void sub_20D444AD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, long long a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  std::__shared_weak_count::~__shared_weak_count(v13);
  operator delete(v16);
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<FS2S1EncoderModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<FS2S1EncoderModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C216B08;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<FS2S1EncoderModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C216B08;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<FS2S1EncoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<FS2S1EncoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0) {
    operator delete(__p[1]);
  }
  operator delete(__p);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<FS2S1EncoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<FS2S1EncoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<FS2S1EncoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<FS2S1EncoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, void *a2)
{
  *a2 = off_26C211C00;
  uint64_t v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void *std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<FS2S1EncoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<FS2S1EncoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  void *v2 = off_26C211C00;
  long long v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(void *)(a1 + 24);
  }
  return v2;
}

void sub_20D444CC8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<FS2S1EncoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<FS2S1EncoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C211C00;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x2105595E0);
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<FS2S1EncoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<FS2S1EncoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C211C00;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

char **std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<S1NARDecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<S1NARDecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<S1NARDecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<S1NARDecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

__n128 std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<S1NARDecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<S1NARDecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, char *a2@<X1>, long long *a3@<X2>, __n128 *a4@<X8>)
{
  uint64_t v50 = *MEMORY[0x263EF8340];
  long long v34 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  v7.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  unint64_t v8 = operator new(0x190uLL);
  unint64_t v9 = (unint64_t)v8;
  v8[1] = 0;
  _OWORD v8[2] = 0;
  void *v8 = off_26C216C58;
  unint64_t v10 = (unint64_t)(v8 + 3);
  uint64_t v11 = (std::__shared_weak_count *)*((void *)&v34 + 1);
  if (*((void *)&v34 + 1))
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v34 + 1) + 8), 1uLL, memory_order_relaxed);
    long long v45 = v34;
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v34 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  else
  {
    long long v45 = (unint64_t)v34;
  }
  Module::Module((uint64_t)(v8 + 3), a2, (uint64_t *)&v45);
  uint64_t v33 = a4;
  if (*((void *)&v45 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v45 + 1));
  }
  *(void *)(v9 + ++*(_DWORD *)(result + 24) = off_26C202548;
  *(unsigned char *)(v9 + 296) = 0;
  *(void *)(v9 + 304) = 850045863;
  *(void *)(v9 + 392) = 0;
  *(_OWORD *)(v9 + 312) = 0u;
  *(_OWORD *)(v9 + 328) = 0u;
  *(_OWORD *)(v9 + 344) = 0u;
  *(_OWORD *)(v9 + 360) = 0u;
  *(_OWORD *)(v9 + 369) = 0u;
  SharedObjectPool::get<VoiceConfig>(&v43, (long long **)v34);
  uint64_t v12 = v43;
  uint64_t v13 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "model_config");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v13, &__p);
  (*(void (**)(unsigned char *__return_ptr, uint64_t, uint64_t, std::string *, void))(*(void *)v12 + 40))(buf, v12, 1936613746, &__p, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  InferenceEngine::Utils::read_json_from_file(buf, (uint64_t)v40);
  std::string::basic_string[abi:ne180100]<0>(&__p, "model_parameters");
  v36[0] = 0;
  uint64_t v37 = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,0>(v40, (const void **)&__p.__r_.__value_.__l.__data_, v36, (uint64_t)v38);
  int v14 = *(unsigned __int8 *)(v9 + 384);
  *(unsigned char *)(v9 + 384) = v38[0];
  v38[0] = v14;
  std::chrono::steady_clock::time_point v15 = *(uint64_t **)(v9 + 392);
  *(void *)(v9 + 392) = v39;
  uint64_t v39 = v15;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v39, v14);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v37, v36[0]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::chrono::steady_clock::time_point v16 = (const char *)(v9 + 208);
  if (*((void *)&v34 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v34 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v17 = *(std::__shared_weak_count **)(v34 + 24);
  long long v18 = 0uLL;
  if (v17)
  {
    long long v19 = std::__shared_weak_count::lock(v17);
    long long v18 = 0uLL;
    if (v19)
    {
      uint64_t v20 = v19;
      uint64_t v21 = *(void *)(v34 + 16);
      long long v35 = 0uLL;
      if (v21)
      {
        uint64_t v22 = v21 + 8;
        if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>((void *)(v21 + 8), (unsigned __int8 *)(v9 + 208)))
        {
          __p.__r_.__value_.__r.__words[0] = v9 + 208;
          long long v23 = *(_OWORD *)(std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v22, (unsigned __int8 *)(v9 + 208), (long long **)&__p)+ 40);
          long long v35 = v23;
          if (*((void *)&v23 + 1)) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v23 + 1) + 8), 1uLL, memory_order_relaxed);
          }
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v20);
      long long v18 = v35;
    }
  }
  uint64_t v24 = *(std::__shared_weak_count **)(v9 + 376);
  *(_OWORD *)(v9 + 368) = v18;
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  if (!*(void *)(v9 + 368))
  {
    exceptiounint64_t n = __cxa_allocate_exception(0x10uLL);
    if (*(char *)(v9 + 231) < 0) {
      std::chrono::steady_clock::time_point v16 = *(const char **)v16;
    }
    StringFormatter::StringFormatter((StringFormatter *)&__p, "Persitent module '%s' is null", v16);
    MEMORY[0x210558D40](exception, &__p);
    __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  *(unsigned char *)(v9 + 296) = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v41, v40[0]);
  if (v49 < 0) {
    operator delete(*(void **)buf);
  }
  if (v44) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v44);
  }
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  uint64_t v25 = (void *)(a1 + 8);
  std::string::size_type v26 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    uint64_t v27 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      uint64_t v27 = (void *)*v25;
    }
    v28.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    *(_DWORD *)std::string buf = 136315394;
    *(void *)&uint8_t buf[4] = v27;
    __int16 v47 = 2048;
    double v48 = (double)((v28.__d_.__rep_ - v7.__d_.__rep_) / 1000000) / 1000.0;
    _os_log_impl(&dword_20CD80000, v26, OS_LOG_TYPE_INFO, "Init latency (%s): %.3f s", buf, 0x16u);
  }
  if (*(char *)(a1 + 31) < 0) {
    uint64_t v25 = (void *)*v25;
  }
  v29.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "Init latency (%s): %.3f s", v30, v25, (double)((v29.__d_.__rep_ - v7.__d_.__rep_) / 1000000) / 1000.0);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  result.n128_u64[0] = v10;
  result.n128_u64[1] = v9;
  __n128 *v33 = result;
  return result;
}

void sub_20D44529C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, long long a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, unsigned __int8 a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,std::__shared_weak_count *a28,uint64_t a29,uint64_t a30)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v33);
  if (v31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&a20, a19);
  if (*(char *)(v35 - 105) < 0) {
    operator delete(*(void **)(v35 - 128));
  }
  if (a28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a28);
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)(v34 + 368), *(unsigned __int8 *)(v30 + 384));
  uint64_t v37 = *(std::__shared_weak_count **)(v30 + 376);
  if (v37) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v37);
  }
  std::mutex::~mutex((std::mutex *)(v34 + 280));
  Module::~Module(v32);
  if (v31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  }
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v30);
  operator delete(v38);
  if (v31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<S1NARDecoderModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<S1NARDecoderModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C216C58;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<S1NARDecoderModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C216C58;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<S1NARDecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<S1NARDecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0) {
    operator delete(__p[1]);
  }
  operator delete(__p);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<S1NARDecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<S1NARDecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<S1NARDecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<S1NARDecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, void *a2)
{
  *a2 = off_26C211D08;
  uint64_t v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void *std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<S1NARDecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<S1NARDecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  void *v2 = off_26C211D08;
  long long v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(void *)(a1 + 24);
  }
  return v2;
}

void sub_20D44559C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<S1NARDecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<S1NARDecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C211D08;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x2105595E0);
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<S1NARDecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<S1NARDecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C211D08;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

char **std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<FastSpeech2S1DecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<FastSpeech2S1DecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<FastSpeech2S1DecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<FastSpeech2S1DecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

__n128 std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<FastSpeech2S1DecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<FastSpeech2S1DecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, char *a2@<X1>, long long *a3@<X2>, __n128 *a4@<X8>)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  long long v30 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  v29.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  std::chrono::steady_clock::time_point v7 = operator new(0x190uLL);
  unint64_t v8 = (unint64_t)v7;
  v7[1] = 0;
  v7[2] = 0;
  void *v7 = off_26C217C88;
  unint64_t v9 = (unint64_t)(v7 + 3);
  unint64_t v10 = (std::__shared_weak_count *)*((void *)&v30 + 1);
  if (*((void *)&v30 + 1))
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v30 + 1) + 8), 1uLL, memory_order_relaxed);
    long long v32 = v30;
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v30 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  else
  {
    long long v32 = (unint64_t)v30;
  }
  Module::Module((uint64_t)(v7 + 3), a2, (uint64_t *)&v32);
  if (*((void *)&v32 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v32 + 1));
  }
  *(void *)(v8 + ++*(_DWORD *)(result + 24) = off_26C2042B0;
  *(void *)(v8 + 296) = 850045863;
  long long v11 = 0uLL;
  *(_OWORD *)(v8 + 304) = 0u;
  *(_OWORD *)(v8 + 320) = 0u;
  *(_OWORD *)(v8 + 336) = 0u;
  *(_OWORD *)(v8 + 345) = 0u;
  uint64_t v12 = (const char *)(v8 + 208);
  *(_OWORD *)(v8 + 368) = 0u;
  *(_OWORD *)(v8 + 384) = 0u;
  if (*((void *)&v30 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v30 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v13 = *(std::__shared_weak_count **)(v30 + 24);
  if (v13)
  {
    int v14 = std::__shared_weak_count::lock(v13);
    long long v11 = 0uLL;
    if (v14)
    {
      std::chrono::steady_clock::time_point v15 = v14;
      uint64_t v16 = *(void *)(v30 + 16);
      long long v31 = 0u;
      if (v16)
      {
        uint64_t v17 = v16 + 8;
        if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>((void *)(v16 + 8), (unsigned __int8 *)(v8 + 208)))
        {
          *(void *)std::string buf = v8 + 208;
          long long v18 = *(_OWORD *)(std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v17, (unsigned __int8 *)(v8 + 208), (long long **)buf)+ 40);
          long long v31 = v18;
          if (*((void *)&v18 + 1)) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v18 + 1) + 8), 1uLL, memory_order_relaxed);
          }
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v15);
      long long v11 = v31;
    }
  }
  long long v19 = *(std::__shared_weak_count **)(v8 + 392);
  *(_OWORD *)(v8 + 384) = v11;
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  if (!*(void *)(v8 + 384))
  {
    exceptiounint64_t n = __cxa_allocate_exception(0x10uLL);
    if (*(char *)(v8 + 231) < 0) {
      uint64_t v12 = *(const char **)v12;
    }
    StringFormatter::StringFormatter((StringFormatter *)buf, "Persistent module '%s' is null", v12);
    MEMORY[0x210558D40](exception, buf);
    __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  SharedObjectPool::get<SynthesizerConfig>(buf, *(void *)(v8 + 192));
  uint64_t v20 = *(std::__shared_weak_count **)(v8 + 376);
  *(_OWORD *)(v8 + 368) = *(_OWORD *)buf;
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  *(unsigned char *)(v8 + 360) = 0;
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  uint64_t v21 = (void *)(a1 + 8);
  uint64_t v22 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    long long v23 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      long long v23 = (void *)*v21;
    }
    v24.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    *(_DWORD *)std::string buf = 136315394;
    *(void *)&uint8_t buf[4] = v23;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(double *)&buf[14] = (double)((v24.__d_.__rep_ - v29.__d_.__rep_) / 1000000) / 1000.0;
    _os_log_impl(&dword_20CD80000, v22, OS_LOG_TYPE_INFO, "Init latency (%s): %.3f s", buf, 0x16u);
  }
  if (*(char *)(a1 + 31) < 0) {
    uint64_t v21 = (void *)*v21;
  }
  v25.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "Init latency (%s): %.3f s", v26, v21, (double)((v25.__d_.__rep_ - v29.__d_.__rep_) / 1000000) / 1000.0);
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  result.n128_u64[0] = v9;
  result.n128_u64[1] = v8;
  *a4 = result;
  return result;
}

void sub_20D445A60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, long long a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  std::string::size_type v26 = *(std::__shared_weak_count **)(v21 + 392);
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  uint64_t v27 = *(std::__shared_weak_count **)(v21 + 376);
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  std::mutex::~mutex((std::mutex *)(v21 + 296));
  Module::~Module(v23);
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v21);
  operator delete(v28);
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<FastSpeech2S1DecoderModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<FastSpeech2S1DecoderModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C217C88;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<FastSpeech2S1DecoderModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C217C88;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<FastSpeech2S1DecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<FastSpeech2S1DecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0) {
    operator delete(__p[1]);
  }
  operator delete(__p);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<FastSpeech2S1DecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<FastSpeech2S1DecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<FastSpeech2S1DecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<FastSpeech2S1DecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, void *a2)
{
  *a2 = off_26C212338;
  uint64_t v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void *std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<FastSpeech2S1DecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<FastSpeech2S1DecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  void *v2 = off_26C212338;
  long long v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(void *)(a1 + 24);
  }
  return v2;
}

void sub_20D445CE4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<FastSpeech2S1DecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<FastSpeech2S1DecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C212338;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x2105595E0);
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<FastSpeech2S1DecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<FastSpeech2S1DecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C212338;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

char **std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<SoundStormStreamingModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<SoundStormStreamingModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<SoundStormStreamingModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<SoundStormStreamingModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

__n128 std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<SoundStormStreamingModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<SoundStormStreamingModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, char *a2@<X1>, long long *a3@<X2>, __n128 *a4@<X8>)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  long long v17 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  v18.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  std::chrono::steady_clock::time_point v7 = operator new(0x1F0uLL);
  unint64_t v8 = (unint64_t)v7;
  v7[1] = 0;
  v7[2] = 0;
  void *v7 = off_26C1EE200;
  unint64_t v9 = (unint64_t)(v7 + 3);
  if (*((void *)&v17 + 1))
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    long long v20 = v17;
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  else
  {
    long long v20 = (unint64_t)v17;
  }
  SoundStormModule::SoundStormModule((uint64_t)(v7 + 3), a2, (uint64_t)&v20);
  if (*((void *)&v17 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v17 + 1));
  }
  *(void *)(v8 + ++*(_DWORD *)(result + 24) = off_26C1ED920;
  *(void *)(v8 + 4++*(_DWORD *)(result + 24) = 850045863;
  *(_OWORD *)(v8 + 432) = 0u;
  *(_OWORD *)(v8 + 448) = 0u;
  *(_OWORD *)(v8 + 464) = 0u;
  *(void *)(v8 + 480) = 0;
  *(_DWORD *)(v8 + 488) = 2;
  *(unsigned char *)(v8 + 416) = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "chunk_size");
  unsigned int v19 = 2;
  *(_DWORD *)(v8 + 488) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>(a2, (const void **)__p, &v19);
  if (v24 < 0) {
    operator delete(*(void **)__p);
  }
  if (*((void *)&v17 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v17 + 1));
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  unint64_t v10 = (void *)(a1 + 8);
  long long v11 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    uint64_t v12 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      uint64_t v12 = (void *)*v10;
    }
    v13.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    *(_DWORD *)std::string __p = 136315394;
    *(void *)&__p[4] = v12;
    __int16 v22 = 2048;
    double v23 = (double)((v13.__d_.__rep_ - v18.__d_.__rep_) / 1000000) / 1000.0;
    _os_log_impl(&dword_20CD80000, v11, OS_LOG_TYPE_INFO, "Init latency (%s): %.3f s", __p, 0x16u);
  }
  if (*(char *)(a1 + 31) < 0) {
    unint64_t v10 = (void *)*v10;
  }
  v14.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "Init latency (%s): %.3f s", v15, v10, (double)((v14.__d_.__rep_ - v18.__d_.__rep_) / 1000000) / 1000.0);
  if (*((void *)&v17 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v17 + 1));
  }
  result.n128_u64[0] = v9;
  result.n128_u64[1] = v8;
  *a4 = result;
  return result;
}

void sub_20D4460A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, long long a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  std::mutex::~mutex((std::mutex *)(v21 + 424));
  SoundStormModule::~SoundStormModule(v23);
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v21);
  operator delete(v25);
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<SoundStormStreamingModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<SoundStormStreamingModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C1EE200;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<SoundStormStreamingModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C1EE200;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<SoundStormStreamingModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<SoundStormStreamingModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0) {
    operator delete(__p[1]);
  }
  operator delete(__p);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<SoundStormStreamingModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<SoundStormStreamingModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<SoundStormStreamingModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<SoundStormStreamingModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, void *a2)
{
  *a2 = off_26C1EDE08;
  uint64_t v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void *std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<SoundStormStreamingModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<SoundStormStreamingModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  void *v2 = off_26C1EDE08;
  long long v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(void *)(a1 + 24);
  }
  return v2;
}

void sub_20D4462D4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<SoundStormStreamingModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<SoundStormStreamingModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C1EDE08;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x2105595E0);
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<SoundStormStreamingModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<SoundStormStreamingModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C1EDE08;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

char **std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<SoundStormModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<SoundStormModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<SoundStormModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<SoundStormModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

__n128 std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<SoundStormModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<SoundStormModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, char *a2@<X1>, long long *a3@<X2>, __n128 *a4@<X8>)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  long long v19 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  v7.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  unint64_t v8 = operator new(0x1A0uLL);
  unint64_t v9 = (unint64_t)v8;
  v8[1] = 0;
  _OWORD v8[2] = 0;
  void *v8 = off_26C216638;
  unint64_t v10 = (unint64_t)(v8 + 3);
  *(_OWORD *)std::string buf = v19;
  if (*((void *)&v19 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v19 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  SoundStormModule::SoundStormModule((uint64_t)(v8 + 3), a2, (uint64_t)buf);
  if (*(void *)&buf[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  long long v11 = (void *)(a1 + 8);
  uint64_t v12 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    std::chrono::steady_clock::time_point v13 = a4;
    std::chrono::steady_clock::time_point v14 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      std::chrono::steady_clock::time_point v14 = (void *)*v11;
    }
    v15.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    *(_DWORD *)std::string buf = 136315394;
    *(void *)&uint8_t buf[4] = v14;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(double *)&buf[14] = (double)((v15.__d_.__rep_ - v7.__d_.__rep_) / 1000000) / 1000.0;
    _os_log_impl(&dword_20CD80000, v12, OS_LOG_TYPE_INFO, "Init latency (%s): %.3f s", buf, 0x16u);
    a4 = v13;
  }
  if (*(char *)(a1 + 31) < 0) {
    long long v11 = (void *)*v11;
  }
  v16.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "Init latency (%s): %.3f s", v17, v11, (double)((v16.__d_.__rep_ - v7.__d_.__rep_) / 1000000) / 1000.0);
  if (*((void *)&v19 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v19 + 1));
  }
  result.n128_u64[0] = v10;
  result.n128_u64[1] = v9;
  *a4 = result;
  return result;
}

void sub_20D446610(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, long long a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  std::__shared_weak_count::~__shared_weak_count(v13);
  operator delete(v16);
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<SoundStormModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<SoundStormModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C216638;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<SoundStormModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C216638;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<SoundStormModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<SoundStormModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0) {
    operator delete(__p[1]);
  }
  operator delete(__p);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<SoundStormModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<SoundStormModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<SoundStormModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<SoundStormModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, void *a2)
{
  *a2 = off_26C2119F0;
  uint64_t v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void *std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<SoundStormModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<SoundStormModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  void *v2 = off_26C2119F0;
  long long v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(void *)(a1 + 24);
  }
  return v2;
}

void sub_20D446804(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<SoundStormModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<SoundStormModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C2119F0;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x2105595E0);
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<SoundStormModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<SoundStormModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C2119F0;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

char **std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<AnetecStreamingDecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<AnetecStreamingDecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<AnetecStreamingDecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<AnetecStreamingDecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

__n128 std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<AnetecStreamingDecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<AnetecStreamingDecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, char *a2@<X1>, long long *a3@<X2>, __n128 *a4@<X8>)
{
  uint64_t v53 = *MEMORY[0x263EF8340];
  long long v37 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  v7.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  unint64_t v8 = operator new(0x1B0uLL);
  unint64_t v9 = (unint64_t)v8;
  v8[1] = 0;
  _OWORD v8[2] = 0;
  void *v8 = off_26C1EE270;
  unint64_t v10 = (unint64_t)(v8 + 3);
  long long v11 = (std::__shared_weak_count *)*((void *)&v37 + 1);
  if (*((void *)&v37 + 1))
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v37 + 1) + 8), 1uLL, memory_order_relaxed);
    long long v48 = v37;
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v37 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  else
  {
    long long v48 = (unint64_t)v37;
  }
  Module::Module((uint64_t)(v8 + 3), a2, (uint64_t *)&v48);
  int v36 = a4;
  if (*((void *)&v48 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v48 + 1));
  }
  *(void *)(v9 + ++*(_DWORD *)(result + 24) = off_26C1EDA60;
  *(void *)(v9 + 296) = 0;
  *(void *)(v9 + 304) = 0;
  *(unsigned char *)(v9 + 312) = 0;
  *(void *)(v9 + 320) = 850045863;
  *(_OWORD *)(v9 + 328) = 0u;
  *(_OWORD *)(v9 + 344) = 0u;
  *(_OWORD *)(v9 + 360) = 0u;
  *(_OWORD *)(v9 + 376) = 0u;
  *(_OWORD *)(v9 + 385) = 0u;
  *(void *)(v9 + 416) = 0;
  *(void *)(v9 + 4++*(_DWORD *)(result + 24) = 0;
  *(void *)(v9 + 408) = 0;
  SharedObjectPool::get<VoiceConfig>(&v46, (long long **)v37);
  uint64_t v12 = v46;
  uint64_t v13 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "model_config");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v13, &__p);
  (*(void (**)(unsigned char *__return_ptr, uint64_t, uint64_t, std::string *, void))(*(void *)v12 + 40))(buf, v12, 1634628452, &__p, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  InferenceEngine::Utils::read_json_from_file(buf, (uint64_t)v43);
  std::string::basic_string[abi:ne180100]<0>(&__p, "model_parameters");
  v39[0] = 0;
  uint64_t v40 = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,0>(v43, (const void **)&__p.__r_.__value_.__l.__data_, v39, (uint64_t)v41);
  int v14 = *(unsigned __int8 *)(v9 + 400);
  *(unsigned char *)(v9 + 400) = v41[0];
  v41[0] = v14;
  std::chrono::steady_clock::time_point v15 = *(uint64_t **)(v9 + 408);
  *(void *)(v9 + 408) = v42;
  uint64_t v42 = v15;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v42, v14);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v40, v39[0]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::chrono::steady_clock::time_point v16 = (const char *)(v9 + 208);
  if (*((void *)&v37 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v37 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  long long v17 = *(std::__shared_weak_count **)(v37 + 24);
  long long v18 = 0uLL;
  if (v17)
  {
    long long v19 = std::__shared_weak_count::lock(v17);
    long long v18 = 0uLL;
    if (v19)
    {
      long long v20 = v19;
      uint64_t v21 = *(void *)(v37 + 16);
      long long v38 = 0uLL;
      if (v21)
      {
        uint64_t v22 = v21 + 8;
        if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>((void *)(v21 + 8), (unsigned __int8 *)(v9 + 208)))
        {
          __p.__r_.__value_.__r.__words[0] = v9 + 208;
          long long v23 = *(_OWORD *)(std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v22, (unsigned __int8 *)(v9 + 208), (long long **)&__p)+ 40);
          long long v38 = v23;
          if (*((void *)&v23 + 1)) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v23 + 1) + 8), 1uLL, memory_order_relaxed);
          }
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v20);
      long long v18 = v38;
    }
  }
  char v24 = *(std::__shared_weak_count **)(v9 + 392);
  *(_OWORD *)(v9 + 384) = v18;
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  if (!*(void *)(v9 + 384))
  {
    exceptiounint64_t n = __cxa_allocate_exception(0x10uLL);
    if (*(char *)(v9 + 231) < 0) {
      std::chrono::steady_clock::time_point v16 = *(const char **)v16;
    }
    StringFormatter::StringFormatter((StringFormatter *)&__p, "Persitent module '%s' is null", v16);
    MEMORY[0x210558D40](exception, &__p);
    __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  *(unsigned char *)(v9 + 312) = 0;
  SharedObjectPool::get<SynthesizerConfig>(&__p, *(void *)(v9 + 192));
  uint64_t v25 = *(std::__shared_weak_count **)(v9 + 424);
  *(_OWORD *)(v9 + 416) = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  std::string::size_type v26 = (char *)operator new(0xC8uLL);
  *((void *)v26 + 1) = 0;
  *((void *)v26 + 2) = 0;
  *(void *)std::string::size_type v26 = off_26C1EE1C8;
  *(_OWORD *)(v26 + 40) = 0u;
  *(_OWORD *)(v26 + 56) = 0u;
  *(_OWORD *)(v26 + 72) = 0u;
  *(_OWORD *)(v26 + 88) = 0u;
  *(_OWORD *)(v26 + 104) = 0u;
  *(_OWORD *)(v26 + 120) = 0u;
  *(_OWORD *)(v26 + 136) = 0u;
  *(_OWORD *)(v26 + 152) = 0u;
  *(_OWORD *)(v26 + 168) = 0u;
  *(_OWORD *)(v26 + 184) = 0u;
  *(_OWORD *)(v26 + ++*(_DWORD *)(result + 24) = 0u;
  uint64_t v27 = *(std::__shared_weak_count **)(v9 + 304);
  *(void *)(v9 + 296) = v26 + 24;
  *(void *)(v9 + 304) = v26;
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v44, v43[0]);
  if (v52 < 0) {
    operator delete(*(void **)buf);
  }
  if (v47) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v47);
  }
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  std::chrono::steady_clock::time_point v28 = (void *)(a1 + 8);
  std::chrono::steady_clock::time_point v29 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    long long v30 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      long long v30 = (void *)*v28;
    }
    v31.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    *(_DWORD *)std::string buf = 136315394;
    *(void *)&uint8_t buf[4] = v30;
    __int16 v50 = 2048;
    double v51 = (double)((v31.__d_.__rep_ - v7.__d_.__rep_) / 1000000) / 1000.0;
    _os_log_impl(&dword_20CD80000, v29, OS_LOG_TYPE_INFO, "Init latency (%s): %.3f s", buf, 0x16u);
  }
  if (*(char *)(a1 + 31) < 0) {
    std::chrono::steady_clock::time_point v28 = (void *)*v28;
  }
  v32.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "Init latency (%s): %.3f s", v33, v28, (double)((v32.__d_.__rep_ - v7.__d_.__rep_) / 1000000) / 1000.0);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  result.n128_u64[0] = v10;
  result.n128_u64[1] = v9;
  __n128 *v36 = result;
  return result;
}

void sub_20D446E70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, long long a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, unsigned __int8 a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,std::__shared_weak_count *a28,uint64_t a29,uint64_t a30)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v33);
  if (v31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&a19, a18);
  if (*(char *)(v35 - 105) < 0) {
    operator delete(*(void **)(v35 - 128));
  }
  if (a28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a28);
  }
  long long v37 = *(std::__shared_weak_count **)(v30 + 424);
  if (v37) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v37);
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)(v34 + 384), *(unsigned __int8 *)(v30 + 400));
  long long v38 = *(std::__shared_weak_count **)(v30 + 392);
  if (v38) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v38);
  }
  std::mutex::~mutex((std::mutex *)(v34 + 296));
  uint64_t v39 = *(std::__shared_weak_count **)(v30 + 304);
  if (v39) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v39);
  }
  Module::~Module(v32);
  if (v31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  }
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v30);
  operator delete(v40);
  if (v31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<AnetecStreamingDecoderModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<AnetecStreamingDecoderModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C1EE270;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<AnetecStreamingDecoderModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C1EE270;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<AnetecStreamingDecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<AnetecStreamingDecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0) {
    operator delete(__p[1]);
  }
  operator delete(__p);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<AnetecStreamingDecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<AnetecStreamingDecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<AnetecStreamingDecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<AnetecStreamingDecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, void *a2)
{
  *a2 = off_26C1EDE60;
  uint64_t v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void *std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<AnetecStreamingDecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<AnetecStreamingDecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  void *v2 = off_26C1EDE60;
  long long v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(void *)(a1 + 24);
  }
  return v2;
}

void sub_20D447194(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<AnetecStreamingDecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<AnetecStreamingDecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C1EDE60;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x2105595E0);
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<AnetecStreamingDecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<AnetecStreamingDecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C1EDE60;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

char **std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<AnetecDecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<AnetecDecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<AnetecDecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<AnetecDecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

__n128 std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<AnetecDecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<AnetecDecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, char *a2@<X1>, long long *a3@<X2>, __n128 *a4@<X8>)
{
  uint64_t v51 = *MEMORY[0x263EF8340];
  long long v35 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  v7.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  unint64_t v8 = operator new(0x1A0uLL);
  unint64_t v9 = (unint64_t)v8;
  v8[1] = 0;
  _OWORD v8[2] = 0;
  void *v8 = off_26C1EE120;
  unint64_t v10 = (unint64_t)(v8 + 3);
  long long v11 = (std::__shared_weak_count *)*((void *)&v35 + 1);
  if (*((void *)&v35 + 1))
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v35 + 1) + 8), 1uLL, memory_order_relaxed);
    long long v46 = v35;
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v35 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  else
  {
    long long v46 = (unint64_t)v35;
  }
  Module::Module((uint64_t)(v8 + 3), a2, (uint64_t *)&v46);
  uint64_t v34 = a4;
  if (*((void *)&v46 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v46 + 1));
  }
  *(void *)(v9 + ++*(_DWORD *)(result + 24) = off_26C1ED818;
  *(unsigned char *)(v9 + 296) = 0;
  *(void *)(v9 + 304) = 850045863;
  *(_OWORD *)(v9 + 312) = 0u;
  *(_OWORD *)(v9 + 328) = 0u;
  *(_OWORD *)(v9 + 344) = 0u;
  *(_OWORD *)(v9 + 360) = 0u;
  *(_OWORD *)(v9 + 369) = 0u;
  *(void *)(v9 + 400) = 0;
  *(void *)(v9 + 408) = 0;
  *(void *)(v9 + 392) = 0;
  SharedObjectPool::get<VoiceConfig>(&v44, (long long **)v35);
  uint64_t v12 = v44;
  uint64_t v13 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "model_config");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v13, &__p);
  (*(void (**)(unsigned char *__return_ptr, uint64_t, uint64_t, std::string *, void))(*(void *)v12 + 40))(buf, v12, 1634624611, &__p, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  InferenceEngine::Utils::read_json_from_file(buf, (uint64_t)v41);
  std::string::basic_string[abi:ne180100]<0>(&__p, "model_parameters");
  v37[0] = 0;
  long long v38 = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,0>(v41, (const void **)&__p.__r_.__value_.__l.__data_, v37, (uint64_t)v39);
  int v14 = *(unsigned __int8 *)(v9 + 384);
  *(unsigned char *)(v9 + 384) = v39[0];
  v39[0] = v14;
  std::chrono::steady_clock::time_point v15 = *(uint64_t **)(v9 + 392);
  *(void *)(v9 + 392) = v40;
  uint64_t v40 = v15;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v40, v14);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v38, v37[0]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::chrono::steady_clock::time_point v16 = (const char *)(v9 + 208);
  if (*((void *)&v35 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v35 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  long long v17 = *(std::__shared_weak_count **)(v35 + 24);
  long long v18 = 0uLL;
  if (v17)
  {
    long long v19 = std::__shared_weak_count::lock(v17);
    long long v18 = 0uLL;
    if (v19)
    {
      long long v20 = v19;
      uint64_t v21 = *(void *)(v35 + 16);
      long long v36 = 0uLL;
      if (v21)
      {
        uint64_t v22 = v21 + 8;
        if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>((void *)(v21 + 8), (unsigned __int8 *)(v9 + 208)))
        {
          __p.__r_.__value_.__r.__words[0] = v9 + 208;
          long long v23 = *(_OWORD *)(std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v22, (unsigned __int8 *)(v9 + 208), (long long **)&__p)+ 40);
          long long v36 = v23;
          if (*((void *)&v23 + 1)) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v23 + 1) + 8), 1uLL, memory_order_relaxed);
          }
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v20);
      long long v18 = v36;
    }
  }
  char v24 = *(std::__shared_weak_count **)(v9 + 376);
  *(_OWORD *)(v9 + 368) = v18;
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  if (!*(void *)(v9 + 368))
  {
    exceptiounint64_t n = __cxa_allocate_exception(0x10uLL);
    if (*(char *)(v9 + 231) < 0) {
      std::chrono::steady_clock::time_point v16 = *(const char **)v16;
    }
    StringFormatter::StringFormatter((StringFormatter *)&__p, "Persitent module '%s' is null", v16);
    MEMORY[0x210558D40](exception, &__p);
    __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  *(unsigned char *)(v9 + 296) = 0;
  SharedObjectPool::get<SynthesizerConfig>(&__p, *(void *)(v9 + 192));
  uint64_t v25 = *(std::__shared_weak_count **)(v9 + 408);
  *(_OWORD *)(v9 + 400) = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v42, v41[0]);
  if (v50 < 0) {
    operator delete(*(void **)buf);
  }
  if (v45) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v45);
  }
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  std::string::size_type v26 = (void *)(a1 + 8);
  uint64_t v27 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    std::chrono::steady_clock::time_point v28 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      std::chrono::steady_clock::time_point v28 = (void *)*v26;
    }
    v29.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    *(_DWORD *)std::string buf = 136315394;
    *(void *)&uint8_t buf[4] = v28;
    __int16 v48 = 2048;
    double v49 = (double)((v29.__d_.__rep_ - v7.__d_.__rep_) / 1000000) / 1000.0;
    _os_log_impl(&dword_20CD80000, v27, OS_LOG_TYPE_INFO, "Init latency (%s): %.3f s", buf, 0x16u);
  }
  if (*(char *)(a1 + 31) < 0) {
    std::string::size_type v26 = (void *)*v26;
  }
  v30.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "Init latency (%s): %.3f s", v31, v26, (double)((v30.__d_.__rep_ - v7.__d_.__rep_) / 1000000) / 1000.0);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  result.n128_u64[0] = v10;
  result.n128_u64[1] = v9;
  *uint64_t v34 = result;
  return result;
}

void sub_20D44778C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, long long a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, unsigned __int8 a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,std::__shared_weak_count *a28,uint64_t a29,uint64_t a30)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v33);
  if (v31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&a19, a18);
  if (*(char *)(v35 - 105) < 0) {
    operator delete(*(void **)(v35 - 128));
  }
  if (a28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a28);
  }
  long long v37 = *(std::__shared_weak_count **)(v30 + 408);
  if (v37) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v37);
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)(v34 + 368), *(unsigned __int8 *)(v30 + 384));
  long long v38 = *(std::__shared_weak_count **)(v30 + 376);
  if (v38) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v38);
  }
  std::mutex::~mutex((std::mutex *)(v34 + 280));
  Module::~Module(v32);
  if (v31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  }
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v30);
  operator delete(v39);
  if (v31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<AnetecDecoderModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<AnetecDecoderModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C1EE120;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<AnetecDecoderModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C1EE120;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<AnetecDecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<AnetecDecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0) {
    operator delete(__p[1]);
  }
  operator delete(__p);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<AnetecDecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<AnetecDecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<AnetecDecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<AnetecDecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, void *a2)
{
  *a2 = off_26C1EDD58;
  uint64_t v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void *std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<AnetecDecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<AnetecDecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  void *v2 = off_26C1EDD58;
  long long v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(void *)(a1 + 24);
  }
  return v2;
}

void sub_20D447AA0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<AnetecDecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<AnetecDecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C1EDD58;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x2105595E0);
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<AnetecDecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<AnetecDecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C1EDD58;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

char **std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<FastSpeech2DecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<FastSpeech2DecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<FastSpeech2DecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<FastSpeech2DecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<FastSpeech2DecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<FastSpeech2DecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()(uint64_t a1@<X0>, char *a2@<X1>, long long *a3@<X2>, _OWORD *a4@<X8>)
{
  uint64_t v85 = *MEMORY[0x263EF8340];
  long long v69 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  v68.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  std::chrono::steady_clock::time_point v7 = operator new(0x1C8uLL);
  unint64_t v8 = v7;
  v7[1] = 0;
  v7[2] = 0;
  void *v7 = off_26C217828;
  unint64_t v9 = v7 + 3;
  if (*((void *)&v69 + 1))
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v69 + 1) + 8), 1uLL, memory_order_relaxed);
    long long v83 = v69;
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v69 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  else
  {
    long long v83 = (unint64_t)v69;
  }
  Module::Module((uint64_t)(v7 + 3), a2, (uint64_t *)&v83);
  unint64_t v10 = v8 + 37;
  if (*((void *)&v83 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v83 + 1));
  }
  unint64_t v66 = a4;
  v8[3] = off_26C203BD0;
  *unint64_t v10 = xmmword_20D6B4B40;
  v8[39] = 0x640000000ALL;
  *((_DWORD *)v8 + 80) = 1092616192;
  v8[41] = 0;
  *((_WORD *)v8 + 168) = 256;
  v8[43] = 850045863;
  *((_OWORD *)v8 + 22) = 0u;
  *((_OWORD *)v8 + 23) = 0u;
  *((_OWORD *)v8 + ++*(_DWORD *)(result + 24) = 0u;
  *((_OWORD *)v8 + 25) = 0u;
  *((_OWORD *)v8 + 26) = 0u;
  *((_OWORD *)v8 + 27) = 0u;
  v8[56] = 0;
  unint64_t v67 = v9;
  SharedObjectPool::get<VoiceConfig>(&v81, (long long **)v69);
  uint64_t v11 = v81;
  uint64_t v12 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "model_config");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v12, &__p);
  (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t, std::string *, void))(*(void *)v11 + 40))(&buf, v11, 1717662576, &__p, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, buf.__r_.__value_.__l.__data_, buf.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = buf;
  }
  InferenceEngine::Utils::read_json_from_file((char *)&__p, (uint64_t)v78);
  std::string::basic_string[abi:ne180100]<0>(&v75, "model_parameters");
  LOBYTE(v73[0]) = 0;
  v73[1] = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,0>(v78, (const void **)&v75.__r_.__value_.__l.__data_, (unsigned __int8 *)v73, (uint64_t)v76);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v73[1], LOBYTE(v73[0]));
  if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v75.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v75, "streaming_chunk_size");
  LODWORD(v73[0]) = 10;
  *((_DWORD *)v8 + 78) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>(a2, (const void **)&v75.__r_.__value_.__l.__data_, (unsigned int *)v73);
  if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v75.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v75, "thermal_critical_streaming_chunk_size");
  LODWORD(v73[0]) = 200;
  *((_DWORD *)v8 + 79) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>(a2, (const void **)&v75.__r_.__value_.__l.__data_, (unsigned int *)v73);
  if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v75.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(v73, "model_type");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value("default", a2, (const void **)v73, &v75);
  if (v74 < 0) {
    operator delete(v73[0]);
  }
  uint64_t v13 = (const char *)(v8 + 26);
  if (*((void *)&v69 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v69 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  int v14 = *(std::__shared_weak_count **)(v69 + 24);
  if (!v14 || (std::chrono::steady_clock::time_point v15 = std::__shared_weak_count::lock(v14)) == 0)
  {
    uint64_t v21 = 0;
    uint64_t v20 = 0;
    if (!*((void *)&v69 + 1)) {
      goto LABEL_29;
    }
    goto LABEL_28;
  }
  std::chrono::steady_clock::time_point v16 = v15;
  uint64_t v17 = *(void *)(v69 + 16);
  if (v17
    && (uint64_t v18 = v17 + 8,
        std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>((void *)(v17 + 8), (unsigned __int8 *)v8 + 208)))
  {
    v73[0] = v8 + 26;
    long long v19 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v18, (unsigned __int8 *)v8 + 208, (long long **)v73);
    uint64_t v20 = *((void *)v19 + 5);
    uint64_t v21 = (std::__shared_weak_count *)*((void *)v19 + 6);
    if (v21) {
      atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v21 = 0;
    uint64_t v20 = 0;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  if (*((void *)&v69 + 1)) {
LABEL_28:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v69 + 1));
LABEL_29:
  if (!v20)
  {
    exceptiounint64_t n = __cxa_allocate_exception(0x10uLL);
    if (*((char *)v8 + 231) < 0) {
      uint64_t v13 = *(const char **)v13;
    }
    StringFormatter::StringFormatter((StringFormatter *)v73, "Persistent module '%s' is null", v13);
    MEMORY[0x210558D40](exception, v73);
    __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v75.__r_.__value_.__l.__size_ != 6)
    {
      if (v75.__r_.__value_.__l.__size_ == 7
        && *(_DWORD *)v75.__r_.__value_.__l.__data_ == 1634100580
        && *(_DWORD *)(v75.__r_.__value_.__r.__words[0] + 3) == 1953264993)
      {
        goto LABEL_45;
      }
LABEL_130:
      long long v63 = __cxa_allocate_exception(0x10uLL);
      uint64_t v64 = &v75;
      if ((v75.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        uint64_t v64 = (std::string *)v75.__r_.__value_.__r.__words[0];
      }
      StringFormatter::StringFormatter((StringFormatter *)v73, "Model type '%s' is not supported.", (const char *)v64);
      MEMORY[0x210558D40](v63, v73);
      __cxa_throw(v63, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
    }
    std::chrono::steady_clock::time_point v29 = (std::string *)v75.__r_.__value_.__r.__words[0];
LABEL_56:
    int data = (int)v29->__r_.__value_.__l.__data_;
    int v31 = WORD2(v29->__r_.__value_.__r.__words[0]);
    if (data == 1852728676 && v31 == 29545)
    {
      uint64_t v33 = *(void *)(v20 + 296);
      char v24 = *(std::__shared_weak_count **)(v20 + 304);
      if (v24) {
        atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v34 = operator new(0x40uLL);
      uint64_t v27 = v34;
      v34[1] = 0;
      v34[2] = 0;
      *uint64_t v34 = off_26C2186D0;
      std::chrono::steady_clock::time_point v28 = v34 + 3;
      if (v24)
      {
        atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      FastSpeech2DecoderBaseInference::FastSpeech2DecoderBaseInference((uint64_t)(v34 + 3), v33, (uint64_t)v24);
      if (!v24)
      {
        *std::chrono::steady_clock::time_point v28 = off_26C2052E8;
        goto LABEL_69;
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v24);
      *std::chrono::steady_clock::time_point v28 = off_26C2052E8;
LABEL_67:
      std::__shared_weak_count::__release_shared[abi:ne180100](v24);
      goto LABEL_69;
    }
    goto LABEL_130;
  }
  if (HIBYTE(v75.__r_.__value_.__r.__words[2]) == 6)
  {
    std::chrono::steady_clock::time_point v29 = &v75;
    goto LABEL_56;
  }
  if (HIBYTE(v75.__r_.__value_.__r.__words[2]) != 7) {
    goto LABEL_130;
  }
  if (LODWORD(v75.__r_.__value_.__l.__data_) != 1634100580
    || *(_DWORD *)((char *)v75.__r_.__value_.__r.__words + 3) != 1953264993)
  {
    goto LABEL_130;
  }
LABEL_45:
  uint64_t v25 = *(void *)(v20 + 296);
  char v24 = *(std::__shared_weak_count **)(v20 + 304);
  if (v24) {
    atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string::size_type v26 = operator new(0x40uLL);
  uint64_t v27 = v26;
  v26[1] = 0;
  v26[2] = 0;
  *std::string::size_type v26 = off_26C218468;
  std::chrono::steady_clock::time_point v28 = v26 + 3;
  if (v24) {
    atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  FastSpeech2DecoderBaseInference::FastSpeech2DecoderBaseInference((uint64_t)(v26 + 3), v25, (uint64_t)v24);
  if (v24) {
    goto LABEL_67;
  }
LABEL_69:
  *(void *)&long long v35 = v28;
  *((void *)&v35 + 1) = v27;
  long long v36 = (std::__shared_weak_count *)v8[54];
  *(_OWORD *)(v8 + 53) = v35;
  if (v36) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v36);
  }
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  uint64_t v37 = *(void *)(v20 + 296);
  long long v38 = *(std::__shared_weak_count **)(v20 + 304);
  if (v38) {
    atomic_fetch_add_explicit(&v38->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(v73, "frame_duration");
  *(_DWORD *)unint64_t v10 = InferenceEngine::MilInferenceModel::get_parameter_value_if<int>(*(void *)(v37 + 8), (const void **)v73, 10);
  if (v74 < 0) {
    operator delete(v73[0]);
  }
  if (v38) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v38);
  }
  uint64_t v39 = *(void *)(v20 + 296);
  uint64_t v40 = *(std::__shared_weak_count **)(v20 + 304);
  if (v40) {
    atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(v73, "samples_per_frame");
  *((_DWORD *)v8 + 75) = InferenceEngine::MilInferenceModel::get_parameter_value_if<int>(*(void *)(v39 + 8), (const void **)v73, 480);
  if (v74 < 0) {
    operator delete(v73[0]);
  }
  if (v40) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v40);
  }
  uint64_t v41 = *(void *)(v20 + 296);
  uint64_t v42 = *(std::__shared_weak_count **)(v20 + 304);
  if (v42) {
    atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(v73, "minimum_rtf_for_streaming");
  uint64_t v43 = *(void *)(v41 + 8);
  double v44 = 15.0;
  if (*(unsigned char *)(v43 + 48) == 1
    && *(void *)(v43 + 56) + 8 != std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>(*(void *)(v43 + 56), (const void **)v73))
  {
    long long v45 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]((unsigned __int8 *)(v43 + 48), (const void **)v73);
    *(void *)&long long v70 = 0;
    nlohmann::detail::get_arithmetic_value<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,double,0>((unsigned __int8 *)v45, (double *)&v70);
    double v44 = *(double *)&v70;
  }
  float v46 = v44;
  *((float *)v8 + 80) = v46;
  if (v74 < 0) {
    operator delete(v73[0]);
  }
  if (v42) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v42);
  }
  uint64_t v47 = *(void *)(v20 + 296);
  __int16 v48 = *(std::__shared_weak_count **)(v20 + 304);
  if (v48) {
    atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(v73, "trim_silences");
  *((unsigned char *)v8 + 337) = InferenceEngine::MilInferenceModel::get_parameter_value_if<BOOL>(*(void *)(v47 + 8), (const void **)v73, 1);
  if (v74 < 0) {
    operator delete(v73[0]);
  }
  if (v48) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v48);
  }
  SharedObjectPool::get<SynthesizerConfig>(v73, v8[24]);
  double v49 = (std::__shared_weak_count *)v8[56];
  *(_OWORD *)(v8 + 55) = *(_OWORD *)v73;
  if (v49) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v49);
  }
  *((unsigned char *)v8 + 336) = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v73, (uint64_t)v76);
  if (v76[0] != 1
    || (uint64_t v50 = std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::find<char [21]>(*(uint64_t *)v77, "frames_per_alignment"), *(void *)v77 + 8 == v50))
  {
    uint64_t v51 = (uint64_t *)*((int *)v8 + 76);
    char v71 = 5;
    uint64_t v72 = v51;
    char v52 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)v73, "frames_per_alignment");
    int v53 = *(unsigned __int8 *)v52;
    *(unsigned char *)char v52 = v71;
    char v71 = v53;
    uint64_t v54 = (uint64_t *)v52[1];
    v52[1] = (uint64_t)v72;
    uint64_t v72 = v54;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v72, v53);
  }
  std::allocate_shared[abi:ne180100]<TacotronAlignment,std::allocator<TacotronAlignment>,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &,void>((uint64_t *)&v70, (char *)v73);
  uint64_t v55 = (std::__shared_weak_count *)v8[52];
  *(_OWORD *)(v8 + 51) = v70;
  if (v55) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v55);
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v73[1], LOBYTE(v73[0]));
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v75.__r_.__value_.__l.__data_);
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)v77, v76[0]);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v79, v78[0]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  if (v82) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v82);
  }
  if (*((void *)&v69 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v69 + 1));
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  std::string v56 = (std::string::size_type *)(a1 + 8);
  uint64_t v57 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    std::string::size_type v58 = a1 + 8;
    if (*(char *)(a1 + 31) < 0) {
      std::string::size_type v58 = *v56;
    }
    v59.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v58;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
    *(double *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (double)((v59.__d_.__rep_ - v68.__d_.__rep_) / 1000000)
                                                               / 1000.0;
    _os_log_impl(&dword_20CD80000, v57, OS_LOG_TYPE_INFO, "Init latency (%s): %.3f s", (uint8_t *)&buf, 0x16u);
  }
  if (*(char *)(a1 + 31) < 0) {
    std::string v56 = (std::string::size_type *)*v56;
  }
  v60.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "Init latency (%s): %.3f s", v61, v56, (double)((v60.__d_.__rep_ - v68.__d_.__rep_) / 1000000) / 1000.0);
  if (*((void *)&v69 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v69 + 1));
  }
  *(void *)&long long v62 = v67;
  *((void *)&v62 + 1) = v8;
  _OWORD *v66 = v62;
}

void sub_20D448654(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, Module *a13, uint64_t a14, long long a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,unsigned __int8 a32,uint64_t a33,unsigned __int8 a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v43);
  if (v42) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v42);
  }
  if (a31 < 0) {
    operator delete(__p);
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&a33, a32);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&a35, a34);
  if (a41 < 0) {
    operator delete(a36);
  }
  if (*(char *)(v44 - 121) < 0) {
    operator delete(*(void **)(v44 - 144));
  }
  float v46 = *(std::__shared_weak_count **)(v44 - 168);
  if (v46) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v46);
  }
  uint64_t v47 = *(std::__shared_weak_count **)(v41 + 448);
  if (v47) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v47);
  }
  __int16 v48 = *(std::__shared_weak_count **)(v41 + 432);
  if (v48) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v48);
  }
  double v49 = *(std::__shared_weak_count **)(v41 + 416);
  if (v49) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v49);
  }
  std::mutex::~mutex((std::mutex *)(v41 + 344));
  Module::~Module(a13);
  if (v42) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v42);
  }
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v41);
  operator delete(v50);
  if (v42) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v42);
  }
  _Unwind_Resume(a1);
}

void sub_20D4488D0()
{
}

uint64_t std::__shared_ptr_emplace<FastSpeech2DecoderModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<FastSpeech2DecoderModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C217828;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<FastSpeech2DecoderModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C217828;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<FastSpeech2DecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<FastSpeech2DecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0) {
    operator delete(__p[1]);
  }
  operator delete(__p);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<FastSpeech2DecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<FastSpeech2DecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<FastSpeech2DecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<FastSpeech2DecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, void *a2)
{
  *a2 = off_26C2121D8;
  uint64_t v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void *std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<FastSpeech2DecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<FastSpeech2DecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  void *v2 = off_26C2121D8;
  long long v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(void *)(a1 + 24);
  }
  return v2;
}

void sub_20D448A8C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<FastSpeech2DecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<FastSpeech2DecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C2121D8;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x2105595E0);
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<FastSpeech2DecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<FastSpeech2DecoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C2121D8;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

char **std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<FastSpeech2EncoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<FastSpeech2EncoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<FastSpeech2EncoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<FastSpeech2EncoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

__n128 std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<FastSpeech2EncoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<FastSpeech2EncoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, char *a2@<X1>, long long *a3@<X2>, __n128 *a4@<X8>)
{
  uint64_t v69 = *MEMORY[0x263EF8340];
  long long v55 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  v7.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  unint64_t v8 = operator new(0x1A8uLL);
  unint64_t v9 = (unint64_t)v8;
  v8[1] = 0;
  _OWORD v8[2] = 0;
  void *v8 = off_26C217860;
  unint64_t v10 = v8 + 3;
  if (*((void *)&v55 + 1))
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v55 + 1) + 8), 1uLL, memory_order_relaxed);
    long long v67 = v55;
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v55 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  else
  {
    long long v67 = (unint64_t)v55;
  }
  Module::Module((uint64_t)(v8 + 3), a2, (uint64_t *)&v67);
  if (*((void *)&v67 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v67 + 1));
  }
  int v53 = a4;
  *(void *)(v9 + ++*(_DWORD *)(result + 24) = off_26C203C40;
  *(void *)(v9 + 296) = 0;
  *(_DWORD *)(v9 + 304) = 10;
  *(unsigned char *)(v9 + 308) = 0;
  *(void *)(v9 + 312) = 850045863;
  *(_OWORD *)(v9 + 320) = 0u;
  *(_OWORD *)(v9 + 336) = 0u;
  *(_OWORD *)(v9 + 352) = 0u;
  *(_OWORD *)(v9 + 368) = 0u;
  *(_OWORD *)(v9 + 384) = 0u;
  *(_OWORD *)(v9 + 400) = 0u;
  *(void *)(v9 + 416) = 0;
  unint64_t v54 = (unint64_t)v10;
  SharedObjectPool::get<VoiceConfig>(&v65, (long long **)v55);
  uint64_t v11 = v65;
  uint64_t v12 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "model_config");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v12, &__p);
  (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t, std::string *, void))(*(void *)v11 + 40))(&buf, v11, 1717662576, &__p, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, buf.__r_.__value_.__l.__data_, buf.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = buf;
  }
  InferenceEngine::Utils::read_json_from_file((char *)&__p, (uint64_t)v62);
  std::string::basic_string[abi:ne180100]<0>(&v59, "model_parameters");
  LOBYTE(v57[0]) = 0;
  v57[1] = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,0>(v62, (const void **)&v59.__r_.__value_.__l.__data_, (unsigned __int8 *)v57, (uint64_t)v60);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v57[1], LOBYTE(v57[0]));
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v59.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(v57, "model_type");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value("default", a2, (const void **)v57, &v59);
  if (v58 < 0) {
    operator delete(v57[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v57, "frame_duration");
  unsigned int v56 = 10;
  *(_DWORD *)(v9 + 304) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>(v60, (const void **)v57, &v56);
  if (v58 < 0) {
    operator delete(v57[0]);
  }
  uint64_t v13 = (const char *)(v9 + 208);
  if (*((void *)&v55 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v55 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  int v14 = *(std::__shared_weak_count **)(v55 + 24);
  if (!v14 || (std::chrono::steady_clock::time_point v15 = std::__shared_weak_count::lock(v14)) == 0)
  {
    uint64_t v21 = 0;
    uint64_t v20 = 0;
    if (!*((void *)&v55 + 1)) {
      goto LABEL_27;
    }
    goto LABEL_26;
  }
  std::chrono::steady_clock::time_point v16 = v15;
  uint64_t v17 = *(void *)(v55 + 16);
  if (v17
    && (uint64_t v18 = v17 + 8,
        std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>((void *)(v17 + 8), (unsigned __int8 *)(v9 + 208))))
  {
    v57[0] = (void *)(v9 + 208);
    long long v19 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v18, (unsigned __int8 *)(v9 + 208), (long long **)v57);
    uint64_t v20 = *((void *)v19 + 5);
    uint64_t v21 = (std::__shared_weak_count *)*((void *)v19 + 6);
    if (v21) {
      atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v21 = 0;
    uint64_t v20 = 0;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  if (*((void *)&v55 + 1)) {
LABEL_26:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v55 + 1));
LABEL_27:
  if (!v20)
  {
    exceptiounint64_t n = __cxa_allocate_exception(0x10uLL);
    if (*(char *)(v9 + 231) < 0) {
      uint64_t v13 = *(const char **)v13;
    }
    StringFormatter::StringFormatter((StringFormatter *)v57, "Persistent module '%s' is null", v13);
    MEMORY[0x210558D40](exception, v57);
    __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if ((SHIBYTE(v59.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (HIBYTE(v59.__r_.__value_.__r.__words[2]) != 7)
    {
      if (HIBYTE(v59.__r_.__value_.__r.__words[2]) != 8)
      {
        if (HIBYTE(v59.__r_.__value_.__r.__words[2]) != 23) {
          goto LABEL_109;
        }
        uint64_t v22 = &v59;
        goto LABEL_37;
      }
      std::string::size_type v33 = v59.__r_.__value_.__r.__words[0];
      goto LABEL_61;
    }
    if (LODWORD(v59.__r_.__value_.__l.__data_) != 1634100580
      || *(_DWORD *)((char *)v59.__r_.__value_.__r.__words + 3) != 1953264993)
    {
LABEL_109:
      uint64_t v50 = __cxa_allocate_exception(0x10uLL);
      uint64_t v51 = &v59;
      if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        uint64_t v51 = (std::string *)v59.__r_.__value_.__r.__words[0];
      }
      StringFormatter::StringFormatter((StringFormatter *)v57, "Model type '%s' is not supported.", (const char *)v51);
      MEMORY[0x210558D40](v50, v57);
      __cxa_throw(v50, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
    }
LABEL_72:
    uint64_t v38 = *(void *)(v20 + 296);
    std::chrono::steady_clock::time_point v28 = *(std::__shared_weak_count **)(v20 + 304);
    if (v28) {
      atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v39 = operator new(0x38uLL);
    int v31 = v39;
    v39[1] = 0;
    v39[2] = 0;
    void *v39 = off_26C2184A0;
    std::chrono::steady_clock::time_point v32 = v39 + 3;
    if (v28) {
      atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    FastSpeech2EncoderBaseInference::FastSpeech2EncoderBaseInference((uint64_t)(v39 + 3), v38, (uint64_t)v28);
    goto LABEL_77;
  }
  if (v59.__r_.__value_.__l.__size_ == 7)
  {
    if (*(_DWORD *)v59.__r_.__value_.__l.__data_ != 1634100580
      || *(_DWORD *)(v59.__r_.__value_.__r.__words[0] + 3) != 1953264993)
    {
      goto LABEL_109;
    }
    goto LABEL_72;
  }
  if (v59.__r_.__value_.__l.__size_ == 8)
  {
    std::string::size_type v33 = *(void *)v59.__r_.__value_.__l.__data_;
LABEL_61:
    if (v33 != 0x7365727574616566) {
      goto LABEL_109;
    }
    uint64_t v35 = *(void *)(v20 + 296);
    std::chrono::steady_clock::time_point v28 = *(std::__shared_weak_count **)(v20 + 304);
    if (v28) {
      atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v36 = operator new(0x40uLL);
    int v31 = v36;
    v36[1] = 0;
    v36[2] = 0;
    void *v36 = off_26C218820;
    std::chrono::steady_clock::time_point v32 = v36 + 3;
    if (v28) {
      atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    FastSpeech2EncoderFeaturesInference::FastSpeech2EncoderFeaturesInference((uint64_t)(v36 + 3), v35, v28);
LABEL_77:
    if (!v28) {
      goto LABEL_79;
    }
    goto LABEL_78;
  }
  if (v59.__r_.__value_.__l.__size_ != 23) {
    goto LABEL_109;
  }
  uint64_t v22 = (std::string *)v59.__r_.__value_.__r.__words[0];
LABEL_37:
  std::string::size_type v23 = v22->__r_.__value_.__r.__words[0];
  std::string::size_type size = v22->__r_.__value_.__l.__size_;
  uint64_t v25 = *(std::string::size_type *)((char *)&v22->__r_.__value_.__r.__words[1] + 7);
  if (v23 != 0x5F79646F736F7270 || size != 0x616C70736E617274 || v25 != 0x6E6F697461746E61) {
    goto LABEL_109;
  }
  uint64_t v29 = *(void *)(v20 + 296);
  std::chrono::steady_clock::time_point v28 = *(std::__shared_weak_count **)(v20 + 304);
  if (v28) {
    atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v30 = operator new(0x40uLL);
  int v31 = v30;
  v30[1] = 0;
  v30[2] = 0;
  *uint64_t v30 = off_26C218A18;
  std::chrono::steady_clock::time_point v32 = v30 + 3;
  if (v28)
  {
    atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  FastSpeech2EncoderFeaturesInference::FastSpeech2EncoderFeaturesInference((uint64_t)(v30 + 3), v29, v28);
  if (v28)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
    *std::chrono::steady_clock::time_point v32 = off_26C205640;
LABEL_78:
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
    goto LABEL_79;
  }
  *std::chrono::steady_clock::time_point v32 = off_26C205640;
LABEL_79:
  *(void *)&long long v40 = v32;
  *((void *)&v40 + 1) = v31;
  uint64_t v41 = *(std::__shared_weak_count **)(v9 + 400);
  *(_OWORD *)(v9 + 392) = v40;
  if (v41) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v41);
  }
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  SharedObjectPool::get<SynthesizerConfig>(v57, *(void *)(v9 + 192));
  uint64_t v42 = *(std::__shared_weak_count **)(v9 + 416);
  *(_OWORD *)(v9 + 408) = *(_OWORD *)v57;
  if (v42) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v42);
  }
  *(unsigned char *)(v9 + 308) = 0;
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v59.__r_.__value_.__l.__data_);
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v61, v60[0]);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v63, v62[0]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  if (v66) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v66);
  }
  if (*((void *)&v55 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v55 + 1));
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  uint64_t v43 = (std::string::size_type *)(a1 + 8);
  uint64_t v44 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    std::string::size_type v45 = a1 + 8;
    if (*(char *)(a1 + 31) < 0) {
      std::string::size_type v45 = *v43;
    }
    v46.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v45;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
    *(double *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (double)((v46.__d_.__rep_ - v7.__d_.__rep_) / 1000000)
                                                               / 1000.0;
    _os_log_impl(&dword_20CD80000, v44, OS_LOG_TYPE_INFO, "Init latency (%s): %.3f s", (uint8_t *)&buf, 0x16u);
  }
  if (*(char *)(a1 + 31) < 0) {
    uint64_t v43 = (std::string::size_type *)*v43;
  }
  v47.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "Init latency (%s): %.3f s", v48, v43, (double)((v47.__d_.__rep_ - v7.__d_.__rep_) / 1000000) / 1000.0);
  if (*((void *)&v55 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v55 + 1));
  }
  result.n128_u64[0] = v54;
  result.n128_u64[1] = v9;
  *int v53 = result;
  return result;
}

void sub_20D44945C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, Module *a12, long long a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,unsigned __int8 a28,uint64_t a29,unsigned __int8 a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v39);
  if (v38) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v38);
  }
  if (a27 < 0) {
    operator delete(__p);
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&a29, a28);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&a31, a30);
  if (a37 < 0) {
    operator delete(a32);
  }
  if (*(char *)(v40 - 105) < 0) {
    operator delete(*(void **)(v40 - 128));
  }
  uint64_t v42 = *(std::__shared_weak_count **)(v40 - 152);
  if (v42) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v42);
  }
  uint64_t v43 = *(std::__shared_weak_count **)(v37 + 416);
  if (v43) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v43);
  }
  uint64_t v44 = *(std::__shared_weak_count **)(v37 + 400);
  if (v44) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v44);
  }
  std::string::size_type v45 = *(std::__shared_weak_count **)(v37 + 384);
  if (v45) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v45);
  }
  std::mutex::~mutex((std::mutex *)(v37 + 312));
  Module::~Module(a12);
  if (v38) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v38);
  }
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v37);
  operator delete(v46);
  if (v38) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v38);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<FastSpeech2EncoderModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<FastSpeech2EncoderModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C217860;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<FastSpeech2EncoderModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C217860;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<FastSpeech2EncoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<FastSpeech2EncoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0) {
    operator delete(__p[1]);
  }
  operator delete(__p);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<FastSpeech2EncoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<FastSpeech2EncoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<FastSpeech2EncoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<FastSpeech2EncoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, void *a2)
{
  *a2 = off_26C212230;
  uint64_t v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void *std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<FastSpeech2EncoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<FastSpeech2EncoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  void *v2 = off_26C212230;
  long long v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(void *)(a1 + 24);
  }
  return v2;
}

void sub_20D44984C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<FastSpeech2EncoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<FastSpeech2EncoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C212230;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x2105595E0);
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<FastSpeech2EncoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<FastSpeech2EncoderModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C212230;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

char **std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<MilWaveRNNModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<MilWaveRNNModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<MilWaveRNNModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<MilWaveRNNModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

__n128 std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<MilWaveRNNModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<MilWaveRNNModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, char *a2@<X1>, long long *a3@<X2>, __n128 *a4@<X8>)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  long long v19 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  v7.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  unint64_t v8 = operator new(0x198uLL);
  unint64_t v9 = (unint64_t)v8;
  v8[1] = 0;
  _OWORD v8[2] = 0;
  void *v8 = off_26C2164E8;
  unint64_t v10 = (unint64_t)(v8 + 3);
  *(_OWORD *)std::string buf = v19;
  if (*((void *)&v19 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v19 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  MilWaveRNNModule::MilWaveRNNModule((uint64_t)(v8 + 3), a2, (uint64_t *)buf);
  if (*(void *)&buf[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  uint64_t v11 = (void *)(a1 + 8);
  uint64_t v12 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    uint64_t v13 = a4;
    int v14 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      int v14 = (void *)*v11;
    }
    v15.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    *(_DWORD *)std::string buf = 136315394;
    *(void *)&uint8_t buf[4] = v14;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(double *)&buf[14] = (double)((v15.__d_.__rep_ - v7.__d_.__rep_) / 1000000) / 1000.0;
    _os_log_impl(&dword_20CD80000, v12, OS_LOG_TYPE_INFO, "Init latency (%s): %.3f s", buf, 0x16u);
    a4 = v13;
  }
  if (*(char *)(a1 + 31) < 0) {
    uint64_t v11 = (void *)*v11;
  }
  v16.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "Init latency (%s): %.3f s", v17, v11, (double)((v16.__d_.__rep_ - v7.__d_.__rep_) / 1000000) / 1000.0);
  if (*((void *)&v19 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v19 + 1));
  }
  result.n128_u64[0] = v10;
  result.n128_u64[1] = v9;
  *a4 = result;
  return result;
}

void sub_20D449B88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, long long a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  std::__shared_weak_count::~__shared_weak_count(v13);
  operator delete(v16);
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<MilWaveRNNModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<MilWaveRNNModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C2164E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<MilWaveRNNModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C2164E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<MilWaveRNNModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<MilWaveRNNModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0) {
    operator delete(__p[1]);
  }
  operator delete(__p);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<MilWaveRNNModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<MilWaveRNNModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<MilWaveRNNModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<MilWaveRNNModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, void *a2)
{
  *a2 = off_26C211998;
  uint64_t v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void *std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<MilWaveRNNModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<MilWaveRNNModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  void *v2 = off_26C211998;
  long long v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(void *)(a1 + 24);
  }
  return v2;
}

void sub_20D449D7C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<MilWaveRNNModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<MilWaveRNNModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C211998;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x2105595E0);
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<MilWaveRNNModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<MilWaveRNNModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C211998;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

char **std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<EspressoWaveRNNModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<EspressoWaveRNNModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<EspressoWaveRNNModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<EspressoWaveRNNModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

__n128 std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<EspressoWaveRNNModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<EspressoWaveRNNModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, char *a2@<X1>, long long *a3@<X2>, __n128 *a4@<X8>)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  long long v19 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  v7.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  unint64_t v8 = operator new(0x138uLL);
  unint64_t v9 = (unint64_t)v8;
  v8[1] = 0;
  _OWORD v8[2] = 0;
  void *v8 = off_26C217128;
  unint64_t v10 = (unint64_t)(v8 + 3);
  *(_OWORD *)std::string buf = v19;
  if (*((void *)&v19 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v19 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  EspressoWaveRNNModule::EspressoWaveRNNModule((uint64_t)(v8 + 3), a2, (uint64_t *)buf);
  if (*(void *)&buf[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  uint64_t v11 = (void *)(a1 + 8);
  uint64_t v12 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    uint64_t v13 = a4;
    int v14 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      int v14 = (void *)*v11;
    }
    v15.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    *(_DWORD *)std::string buf = 136315394;
    *(void *)&uint8_t buf[4] = v14;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(double *)&buf[14] = (double)((v15.__d_.__rep_ - v7.__d_.__rep_) / 1000000) / 1000.0;
    _os_log_impl(&dword_20CD80000, v12, OS_LOG_TYPE_INFO, "Init latency (%s): %.3f s", buf, 0x16u);
    a4 = v13;
  }
  if (*(char *)(a1 + 31) < 0) {
    uint64_t v11 = (void *)*v11;
  }
  v16.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "Init latency (%s): %.3f s", v17, v11, (double)((v16.__d_.__rep_ - v7.__d_.__rep_) / 1000000) / 1000.0);
  if (*((void *)&v19 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v19 + 1));
  }
  result.n128_u64[0] = v10;
  result.n128_u64[1] = v9;
  *a4 = result;
  return result;
}

void sub_20D44A0B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, long long a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  std::__shared_weak_count::~__shared_weak_count(v13);
  operator delete(v16);
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<EspressoWaveRNNModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<EspressoWaveRNNModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C217128;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<EspressoWaveRNNModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C217128;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<EspressoWaveRNNModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<EspressoWaveRNNModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0) {
    operator delete(__p[1]);
  }
  operator delete(__p);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<EspressoWaveRNNModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<EspressoWaveRNNModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<EspressoWaveRNNModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<EspressoWaveRNNModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, void *a2)
{
  *a2 = off_26C211F70;
  uint64_t v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void *std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<EspressoWaveRNNModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<EspressoWaveRNNModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  void *v2 = off_26C211F70;
  long long v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(void *)(a1 + 24);
  }
  return v2;
}

void sub_20D44A2AC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<EspressoWaveRNNModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<EspressoWaveRNNModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C211F70;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x2105595E0);
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<EspressoWaveRNNModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<EspressoWaveRNNModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C211F70;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

char **std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<EspressoTacotronModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<EspressoTacotronModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<EspressoTacotronModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<EspressoTacotronModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<EspressoTacotronModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<EspressoTacotronModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()(uint64_t a1@<X0>, char *a2@<X1>, long long *a3@<X2>, _OWORD *a4@<X8>)
{
  v92[20] = *MEMORY[0x263EF8340];
  long long v67 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  v62.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  std::chrono::steady_clock::time_point v7 = operator new(0x2D8uLL);
  unint64_t v8 = v7;
  v7[1] = 0;
  v7[2] = 0;
  void *v7 = off_26C217320;
  unint64_t v9 = v7 + 3;
  unint64_t v10 = (std::__shared_weak_count *)*((void *)&v67 + 1);
  if (*((void *)&v67 + 1))
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v67 + 1) + 8), 1uLL, memory_order_relaxed);
    long long v80 = v67;
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v67 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  else
  {
    long long v80 = (unint64_t)v67;
  }
  Module::Module((uint64_t)(v7 + 3), a2, (uint64_t *)&v80);
  if (*((void *)&v80 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v80 + 1));
  }
  v8[3] = off_26C2032D8;
  *((unsigned char *)v8 + 296) = 0;
  v8[61] = 850045863;
  *((_OWORD *)v8 + 31) = 0u;
  *((_OWORD *)v8 + 32) = 0u;
  *((_OWORD *)v8 + 33) = 0u;
  v8[68] = 0;
  v8[69] = 0xA000000F0;
  *((_WORD *)v8 + 280) = 1;
  uint64_t v11 = (void **)(v8 + 71);
  std::string::basic_string[abi:ne180100]<0>(v8 + 71, &byte_20D5A22AE);
  uint64_t v61 = a1;
  *((_OWORD *)v8 + 37) = 0u;
  *((_OWORD *)v8 + 38) = 0u;
  *((_DWORD *)v8 + 156) = 1065353216;
  uint64_t v12 = (void **)(v8 + 79);
  std::string::basic_string[abi:ne180100]<0>(v8 + 79, &byte_20D5A22AE);
  std::string v59 = a4;
  uint64_t v13 = (void **)(v8 + 82);
  std::string::basic_string[abi:ne180100]<0>(v8 + 82, &byte_20D5A22AE);
  int v14 = v8 + 3;
  *(_OWORD *)(v8 + 85) = 0u;
  *(_OWORD *)(v8 + 87) = 0u;
  *((_DWORD *)v8 + 178) = 2;
  SharedObjectPool::get<VoiceConfig>(&v78, (long long **)v67);
  if (*((char *)v8 + 231) < 0) {
    std::string::__init_copy_ctor_external(&v87, (const std::string::value_type *)v8[26], v8[27]);
  }
  else {
    std::string v87 = *(std::string *)(v8 + 26);
  }
  if (*((void *)&v67 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v67 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  std::chrono::steady_clock::time_point v15 = *(std::__shared_weak_count **)(v67 + 24);
  if (!v15 || (std::chrono::steady_clock::time_point v16 = std::__shared_weak_count::lock(v15)) == 0)
  {
    std::chrono::steady_clock::time_point v60 = 0;
    uint64_t v22 = 0;
    if (!*((void *)&v67 + 1)) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  uint64_t v17 = v16;
  uint64_t v18 = *(void *)(v67 + 16);
  if (v18
    && (uint64_t v19 = v18 + 8,
        std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>((void *)(v18 + 8), (unsigned __int8 *)&v87)))
  {
    __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v87;
    uint64_t v20 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v19, (unsigned __int8 *)&v87, (long long **)__p);
    uint64_t v22 = *((void *)v20 + 5);
    uint64_t v21 = *((void *)v20 + 6);
    if (v21)
    {
      std::chrono::steady_clock::time_point v60 = (std::__shared_weak_count *)*((void *)v20 + 6);
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v21 + 8), 1uLL, memory_order_relaxed);
    }
    else
    {
      std::chrono::steady_clock::time_point v60 = 0;
    }
  }
  else
  {
    std::chrono::steady_clock::time_point v60 = 0;
    uint64_t v22 = 0;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  if (*((void *)&v67 + 1)) {
LABEL_18:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v67 + 1));
LABEL_19:
  if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v87.__r_.__value_.__l.__data_);
  }
  v8[38] = v22 + 296;
  v8[39] = v22 + 304;
  std::string::basic_string[abi:ne180100]<0>(&v87, "samples_per_frame");
  LODWORD(__p[0].__r_.__value_.__l.__data_) = 480;
  *((_DWORD *)v8 + 138) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>(a2, (const void **)&v87.__r_.__value_.__l.__data_, (unsigned int *)__p);
  if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v87.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v87, "frame_duration");
  LODWORD(__p[0].__r_.__value_.__l.__data_) = 10;
  *((_DWORD *)v8 + 139) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>(a2, (const void **)&v87.__r_.__value_.__l.__data_, (unsigned int *)__p);
  if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v87.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v87, "alignment_enabled");
  __p[0].__r_.__value_.__s.__data_[0] = 0;
  *((unsigned char *)v8 + 560) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<BOOL,0>(a2, (const void **)&v87.__r_.__value_.__l.__data_, (unsigned __int8 *)__p);
  if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v87.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v87, "alignment_stall_detection_only");
  __p[0].__r_.__value_.__s.__data_[0] = 0;
  *((unsigned char *)v8 + 561) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<BOOL,0>(a2, (const void **)&v87.__r_.__value_.__l.__data_, (unsigned __int8 *)__p);
  if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v87.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v87, "streaming_receptive_field");
  LODWORD(__p[0].__r_.__value_.__l.__data_) = 2;
  *((_DWORD *)v8 + 178) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>(a2, (const void **)&v87.__r_.__value_.__l.__data_, (unsigned int *)__p);
  if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v87.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "emotion_embedding");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_20D5A22AE, a2, (const void **)&__p[0].__r_.__value_.__l.__data_, &v87);
  if (*((char *)v8 + 591) < 0) {
    operator delete(*v11);
  }
  *(_OWORD *)uint64_t v11 = *(_OWORD *)&v87.__r_.__value_.__l.__data_;
  v8[73] = *((void *)&v87.__r_.__value_.__l + 2);
  *((unsigned char *)&v87.__r_.__value_.__s + 23) = 0;
  v87.__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "bsc_output_path");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_20D5A22AE, a2, (const void **)&__p[0].__r_.__value_.__l.__data_, &v87);
  if (*((char *)v8 + 655) < 0) {
    operator delete(*v12);
  }
  *(_OWORD *)uint64_t v12 = *(_OWORD *)&v87.__r_.__value_.__l.__data_;
  v8[81] = *((void *)&v87.__r_.__value_.__l + 2);
  *((unsigned char *)&v87.__r_.__value_.__s + 23) = 0;
  v87.__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "rot_output_path");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_20D5A22AE, a2, (const void **)&__p[0].__r_.__value_.__l.__data_, &v87);
  if (*((char *)v8 + 679) < 0) {
    operator delete(*v13);
  }
  *(_OWORD *)uint64_t v13 = *(_OWORD *)&v87.__r_.__value_.__l.__data_;
  v8[84] = *((void *)&v87.__r_.__value_.__l + 2);
  *((unsigned char *)&v87.__r_.__value_.__s + 23) = 0;
  v87.__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  if (NeuralTTSUtils::is_amx_available(v23)) {
    v8[90] = dispatch_pthread_root_queue_create();
  }
  if (*((char *)v8 + 591) < 0)
  {
    if (!v8[72]) {
      goto LABEL_54;
    }
    char v24 = *v11;
  }
  else
  {
    char v24 = v8 + 71;
    if (!*((unsigned char *)v8 + 591)) {
      goto LABEL_54;
    }
  }
  if (*v24 != 47)
  {
    (*(void (**)(std::string *__return_ptr))(*(void *)v78 + 40))(&v87);
    if (*((char *)v8 + 591) < 0) {
      operator delete(*v11);
    }
    *(_OWORD *)uint64_t v11 = *(_OWORD *)&v87.__r_.__value_.__l.__data_;
    v8[73] = *((void *)&v87.__r_.__value_.__l + 2);
  }
LABEL_54:
  if (!v8[77])
  {
    std::string::basic_string[abi:ne180100]<0>(&v87, "happy");
    std::string::basic_string[abi:ne180100]<0>(v88, "sad");
    std::string::basic_string[abi:ne180100]<0>(v89, "neutral");
    std::string::basic_string[abi:ne180100]<0>(v90, "happy_strong");
    std::string v75 = 0;
    BOOL v76 = 0;
    uint64_t v77 = 0;
    __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v75;
    __p[0].__r_.__value_.__s.__data_[8] = 0;
    std::string v75 = (std::string *)operator new(0x60uLL);
    BOOL v76 = v75;
    uint64_t v77 = v75 + 4;
    uint64_t v25 = 0;
    BOOL v76 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v77, (long long *)&v87, v91, v75);
    do
    {
      if (SHIBYTE(v90[v25 + 2]) < 0) {
        operator delete((void *)v90[v25]);
      }
      v25 -= 3;
    }
    while (v25 != -12);
    std::string::size_type v26 = v75;
    std::chrono::steady_clock::time_point v68 = v76;
    if (v75 != v76)
    {
      std::string::size_type v63 = *MEMORY[0x263F8C2C0];
      std::string::size_type v64 = *(void *)(MEMORY[0x263F8C2C0] + 24);
      std::string::size_type v65 = *MEMORY[0x263F8C2A8];
      std::string::size_type v66 = *(void *)(MEMORY[0x263F8C2A8] + 24);
      do
      {
        if (SHIBYTE(v26->__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(&v74, v26->__r_.__value_.__l.__data_, v26->__r_.__value_.__l.__size_);
        }
        else
        {
          long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
          v74.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v74.__r_.__value_.__l.__data_ = v27;
        }
        uint64_t v28 = v78;
        std::operator+<char>();
        uint64_t v29 = std::string::append(__p, ".txt");
        long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
        v87.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v87.__r_.__value_.__l.__data_ = v30;
        v29->__r_.__value_.__l.__size_ = 0;
        v29->__r_.__value_.__r.__words[2] = 0;
        v29->__r_.__value_.__r.__words[0] = 0;
        (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t, std::string *, void))(*(void *)v28 + 40))(&v73, v28, 1952539503, &v87, 0);
        if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v87.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p[0].__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v69, v73.__r_.__value_.__l.__data_, v73.__r_.__value_.__l.__size_);
        }
        else {
          std::string v69 = v73;
        }
        long long v70 = 0;
        char v71 = 0;
        unint64_t v72 = 0;
        std::ifstream::basic_ifstream((uint64_t *)&v87);
        memset(&v86, 0, sizeof(v86));
        std::ios_base::getloc((const std::ios_base *)((char *)&v87 + *(void *)(v87.__r_.__value_.__r.__words[0] - 24)));
        int v31 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x263F8C108]);
        unsigned __int8 v32 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v31->__vftable[2].~facet_0)(v31, 10);
        std::locale::~locale((std::locale *)__p);
        std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v87, (uint64_t)&v86, v32);
        if (!std::filebuf::close()) {
          std::ios_base::clear((std::ios_base *)((char *)&v87 + *(void *)(v87.__r_.__value_.__r.__words[0] - 24)), *(_DWORD *)((char *)&v88[1] + *(void *)(v87.__r_.__value_.__r.__words[0] - 24)) | 4);
        }
        std::istringstream::basic_istringstream[abi:ne180100]((uint64_t *)__p, &v86, 8);
        memset(&__str, 0, sizeof(__str));
        while (1)
        {
          std::string::size_type v33 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__p, (uint64_t)&__str, 0x20u);
          if ((*((unsigned char *)v33 + *(void *)(*v33 - 24) + 32) & 5) != 0) {
            break;
          }
          float v34 = std::stod(&__str, 0);
          uint64_t v35 = v71;
          if ((unint64_t)v71 >= v72)
          {
            uint64_t v37 = (float *)v70;
            uint64_t v38 = ((char *)v71 - (unsigned char *)v70) >> 2;
            unint64_t v39 = v38 + 1;
            if ((unint64_t)(v38 + 1) >> 62) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v40 = v72 - (void)v70;
            if ((uint64_t)(v72 - (void)v70) >> 1 > v39) {
              unint64_t v39 = v40 >> 1;
            }
            if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v41 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v41 = v39;
            }
            if (v41)
            {
              uint64_t v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v72, v41);
              uint64_t v37 = (float *)v70;
              uint64_t v35 = v71;
            }
            else
            {
              uint64_t v42 = 0;
            }
            uint64_t v43 = (float *)&v42[4 * v38];
            *uint64_t v43 = v34;
            long long v36 = v43 + 1;
            while (v35 != v37)
            {
              int v44 = *((_DWORD *)v35-- - 1);
              *((_DWORD *)v43-- - 1) = v44;
            }
            long long v70 = v43;
            char v71 = v36;
            unint64_t v72 = (unint64_t)&v42[4 * v41];
            if (v37) {
              operator delete(v37);
            }
          }
          else
          {
            float *v71 = v34;
            long long v36 = v35 + 1;
          }
          char v71 = v36;
        }
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
        __p[0].__r_.__value_.__r.__words[0] = v63;
        *(std::string::size_type *)((char *)__p[0].__r_.__value_.__r.__words + *(void *)(v63 - 24)) = v64;
        __p[0].__r_.__value_.__r.__words[2] = MEMORY[0x263F8C318] + 16;
        if (v84 < 0) {
          operator delete(v83);
        }
        std::streambuf::~streambuf();
        std::istream::~istream();
        MEMORY[0x210559500](&v85);
        if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v86.__r_.__value_.__l.__data_);
        }
        v87.__r_.__value_.__r.__words[0] = v65;
        *(std::string::size_type *)((char *)v87.__r_.__value_.__r.__words + *(void *)(v65 - 24)) = v66;
        MEMORY[0x210558FE0](&v87.__r_.__value_.__r.__words[2]);
        std::istream::~istream();
        MEMORY[0x210559500](v92);
        if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v69.__r_.__value_.__l.__data_);
        }
        v87.__r_.__value_.__r.__words[0] = (std::string::size_type)&v74;
        std::string::size_type v45 = std::__hash_table<std::__hash_value_type<std::string,std::vector<float>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<float>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<float>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<float>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(v8 + 74), (unsigned __int8 *)&v74, (long long **)&v87)+ 40;
        if (v45 != (char *)&v70) {
          std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(v45, (char *)v70, (uint64_t)v71, ((char *)v71 - (unsigned char *)v70) >> 2);
        }
        if (v70)
        {
          char v71 = (float *)v70;
          operator delete(v70);
        }
        if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v73.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v74.__r_.__value_.__l.__data_);
        }
        ++v26;
      }
      while (v26 != v68);
    }
    v87.__r_.__value_.__r.__words[0] = (std::string::size_type)&v75;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v87);
    unint64_t v10 = (std::__shared_weak_count *)*((void *)&v67 + 1);
    uint64_t v13 = (void **)(v8 + 82);
    uint64_t v12 = (void **)(v8 + 79);
    int v14 = v8 + 3;
  }
  if (*((char *)v8 + 655) < 0)
  {
    if (!v8[80]) {
      goto LABEL_119;
    }
    std::chrono::steady_clock::time_point v46 = *v12;
  }
  else
  {
    std::chrono::steady_clock::time_point v46 = v12;
    if (!*((unsigned char *)v8 + 655)) {
      goto LABEL_119;
    }
  }
  if (*v46 != 47)
  {
    (*(void (**)(std::string *__return_ptr))(*(void *)v78 + 40))(&v87);
    if (*((char *)v8 + 655) < 0) {
      operator delete(*v12);
    }
    *(std::string *)uint64_t v12 = v87;
  }
LABEL_119:
  if (*((char *)v8 + 679) < 0)
  {
    if (!v8[83]) {
      goto LABEL_128;
    }
    std::chrono::steady_clock::time_point v47 = *v13;
  }
  else
  {
    std::chrono::steady_clock::time_point v47 = v13;
    if (!*((unsigned char *)v8 + 679)) {
      goto LABEL_128;
    }
  }
  if (*v47 != 47)
  {
    (*(void (**)(std::string *__return_ptr))(*(void *)v78 + 40))(&v87);
    if (*((char *)v8 + 679) < 0) {
      operator delete(*v13);
    }
    *(std::string *)uint64_t v13 = v87;
  }
LABEL_128:
  __int16 v48 = operator new(0xC0uLL);
  v48[1] = 0;
  v48[2] = 0;
  *__int16 v48 = off_26C216948;
  *(void *)&long long v49 = TacotronAlignment::TacotronAlignment((uint64_t)(v48 + 3), a2);
  *((void *)&v49 + 1) = v48;
  uint64_t v50 = (std::__shared_weak_count *)v8[86];
  *((_OWORD *)v14 + 41) = v49;
  if (v50) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v50);
  }
  uint64_t v51 = v61;
  if (v60) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v60);
  }
  if (v79) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v79);
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  char v52 = (std::string::size_type *)(v61 + 8);
  int v53 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    std::string::size_type v54 = v61 + 8;
    if (*(char *)(v61 + 31) < 0) {
      std::string::size_type v54 = *v52;
    }
    v55.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    LODWORD(v87.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)v87.__r_.__value_.__r.__words + 4) = v54;
    WORD2(v87.__r_.__value_.__r.__words[1]) = 2048;
    *(double *)((char *)&v87.__r_.__value_.__r.__words[1] + 6) = (double)((v55.__d_.__rep_ - v62.__d_.__rep_) / 1000000)
                                                               / 1000.0;
    _os_log_impl(&dword_20CD80000, v53, OS_LOG_TYPE_INFO, "Init latency (%s): %.3f s", (uint8_t *)&v87, 0x16u);
    uint64_t v51 = v61;
  }
  if (*(char *)(v51 + 31) < 0) {
    char v52 = (std::string::size_type *)*v52;
  }
  v56.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "Init latency (%s): %.3f s", v57, v52, (double)((v56.__d_.__rep_ - v62.__d_.__rep_) / 1000000) / 1000.0);
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  *(void *)&long long v58 = v9;
  *((void *)&v58 + 1) = v8;
  _OWORD *v59 = v58;
}

void sub_20D44B27C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,std::__shared_weak_count *a50)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v51);
  if (v55) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v55);
  }
  if (SLOBYTE(STACK[0x2B7]) < 0) {
    operator delete((void *)STACK[0x2A0]);
  }
  if (a50) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a50);
  }
  long long v58 = *(std::__shared_weak_count **)(v50 + 688);
  if (v58) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v58);
  }
  if (*(char *)(v50 + 679) < 0) {
    operator delete(*v54);
  }
  if (*(char *)(v50 + 655) < 0) {
    operator delete(*v53);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::vector<float>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<float>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<float>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<float>>>>::~__hash_table(a32);
  if (*(char *)(v50 + 591) < 0) {
    operator delete(*v52);
  }
  std::mutex::~mutex((std::mutex *)(v50 + 488));
  Module::~Module(v56);
  if (v55) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v55);
  }
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v50);
  operator delete(v59);
  if (v55) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v55);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<EspressoTacotronModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<EspressoTacotronModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C217320;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<EspressoTacotronModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C217320;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<EspressoTacotronModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<EspressoTacotronModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0) {
    operator delete(__p[1]);
  }
  operator delete(__p);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<EspressoTacotronModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<EspressoTacotronModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<EspressoTacotronModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<EspressoTacotronModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, void *a2)
{
  *a2 = off_26C212078;
  uint64_t v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void *std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<EspressoTacotronModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<EspressoTacotronModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  void *v2 = off_26C212078;
  long long v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(void *)(a1 + 24);
  }
  return v2;
}

void sub_20D44B910(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<EspressoTacotronModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<EspressoTacotronModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C212078;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x2105595E0);
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<EspressoTacotronModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<EspressoTacotronModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C212078;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

char **std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<LPCFilterModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<LPCFilterModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<LPCFilterModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<LPCFilterModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<LPCFilterModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<LPCFilterModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()(uint64_t a1@<X0>, char *a2@<X1>, int64x2_t *a3@<X2>, _OWORD *a4@<X8>)
{
  uint64_t v89 = *MEMORY[0x263EF8340];
  int64x2_t v84 = *a3;
  a3->i64[0] = 0;
  a3->i64[1] = 0;
  v6.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  std::chrono::steady_clock::time_point v7 = operator new(0x138uLL);
  unint64_t v8 = v7;
  v7[1] = 0;
  v7[2] = 0;
  void *v7 = off_26C215FE0;
  unint64_t v9 = v7 + 3;
  if (v84.i64[1])
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v84.i64[1] + 8), 1uLL, memory_order_relaxed);
    int64x2_t v87 = v84;
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v84.i64[1] + 8), 1uLL, memory_order_relaxed);
  }
  else
  {
    int64x2_t v87 = (int64x2_t)v84.u64[0];
  }
  *((void *)&v75 + 1) = v7;
  BOOL v76 = (std::__shared_weak_count *)v84.i64[1];
  Module::Module((uint64_t)(v7 + 3), a2, v87.i64);
  if (v87.i64[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v87.i64[1]);
  }
  v8[3] = off_26C201088;
  v8[37] = 0;
  v8[38] = 0;
  *(void *)&long long v75 = v9;
  std::string::basic_string[abi:ne180100]<0>(buf, "orderlpc");
  int v86 = 12;
  int v10 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>(a2, (const void **)buf, (unsigned int *)&v86);
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  std::string::basic_string[abi:ne180100]<0>(buf, "sampling_frequency");
  int v86 = 24000;
  int v11 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>(a2, (const void **)buf, (unsigned int *)&v86);
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  std::string::basic_string[abi:ne180100]<0>(buf, "frame_size_ms");
  int v86 = 30;
  int v12 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>(a2, (const void **)buf, (unsigned int *)&v86);
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  std::string::basic_string[abi:ne180100]<0>(buf, "frame_shift_ms");
  if (v12 >= 0) {
    int v13 = v12;
  }
  else {
    int v13 = v12 + 1;
  }
  int v86 = v13 >> 1;
  int v14 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>(a2, (const void **)buf, (unsigned int *)&v86);
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  std::string::basic_string[abi:ne180100]<0>(buf, "scaling");
  LOBYTE(v86) = 0;
  BOOL v15 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<BOOL,0>(a2, (const void **)buf, (unsigned __int8 *)&v86);
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  std::string::basic_string[abi:ne180100]<0>(buf, "a1");
  int v86 = 1059481190;
  float v16 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<float,0>((unsigned __int8 *)a2, (const void **)buf, (uint64_t)&v86);
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  std::string::basic_string[abi:ne180100]<0>(buf, "a2");
  int v86 = 1061158912;
  float v17 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<float,0>((unsigned __int8 *)a2, (const void **)buf, (uint64_t)&v86);
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  std::string::basic_string[abi:ne180100]<0>(buf, "a3");
  int v86 = 1041865114;
  float v18 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<float,0>((unsigned __int8 *)a2, (const void **)buf, (uint64_t)&v86);
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep = v6.__d_.__rep_;
  std::string v73 = a4;
  uint64_t v19 = (char *)operator new(0xB8uLL);
  *((void *)v19 + 1) = 0;
  *((void *)v19 + 2) = 0;
  *(void *)uint64_t v19 = off_26C218EB0;
  *((_DWORD *)v19 + 6) = v10;
  *((_OWORD *)v19 + 2) = 0u;
  uint64_t v20 = (void **)(v19 + 32);
  uint64_t v21 = (void **)(v19 + 56);
  *((_OWORD *)v19 + 3) = 0u;
  *((_OWORD *)v19 + 4) = 0u;
  *((float *)v19 + 20) = v18;
  v19[84] = v15;
  *((_DWORD *)v19 + 26) = v11;
  *((_OWORD *)v19 + 7) = 0u;
  int v22 = v12 * v11 / 1000;
  *((_OWORD *)v19 + 10) = 0u;
  std::string::size_type v23 = (void **)(v19 + 160);
  *((_OWORD *)v19 + 8) = 0u;
  *((_OWORD *)v19 + 9) = 0u;
  *((void *)v19 + 22) = 0;
  *((_DWORD *)v19 + 22) = v22;
  *((_DWORD *)v19 + 23) = v12;
  *((_DWORD *)v19 + ++*(_DWORD *)(result + 24) = v14 * v11 / 1000;
  *((_DWORD *)v19 + 25) = v14;
  if ((v10 & 0x80000000) == 0)
  {
    int v24 = 0;
    long double v25 = v16;
    long double v26 = v17;
    do
    {
      float v27 = pow(v25, (double)v24);
      uint64_t v29 = (float *)*((void *)v19 + 5);
      unint64_t v28 = *((void *)v19 + 6);
      if ((unint64_t)v29 >= v28)
      {
        int v31 = (float *)*v20;
        uint64_t v32 = ((char *)v29 - (unsigned char *)*v20) >> 2;
        unint64_t v33 = v32 + 1;
        if ((unint64_t)(v32 + 1) >> 62) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v34 = v28 - (void)v31;
        if (v34 >> 1 > v33) {
          unint64_t v33 = v34 >> 1;
        }
        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v35 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v35 = v33;
        }
        if (v35)
        {
          long long v36 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(v19 + 48), v35);
          int v31 = (float *)*((void *)v19 + 4);
          uint64_t v29 = (float *)*((void *)v19 + 5);
        }
        else
        {
          long long v36 = 0;
        }
        uint64_t v37 = (float *)&v36[4 * v32];
        *uint64_t v37 = v27;
        long long v30 = v37 + 1;
        while (v29 != v31)
        {
          int v38 = *((_DWORD *)v29-- - 1);
          *((_DWORD *)v37-- - 1) = v38;
        }
        *((void *)v19 + 4) = v37;
        *((void *)v19 + 5) = v30;
        *((void *)v19 + 6) = &v36[4 * v35];
        if (v31) {
          operator delete(v31);
        }
      }
      else
      {
        *uint64_t v29 = v27;
        long long v30 = v29 + 1;
      }
      *((void *)v19 + 5) = v30;
      float v39 = pow(v26, (double)v24);
      unint64_t v41 = (float *)*((void *)v19 + 8);
      unint64_t v40 = *((void *)v19 + 9);
      if ((unint64_t)v41 >= v40)
      {
        uint64_t v43 = (float *)*v21;
        uint64_t v44 = ((char *)v41 - (unsigned char *)*v21) >> 2;
        unint64_t v45 = v44 + 1;
        if ((unint64_t)(v44 + 1) >> 62) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v46 = v40 - (void)v43;
        if (v46 >> 1 > v45) {
          unint64_t v45 = v46 >> 1;
        }
        if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v47 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v47 = v45;
        }
        if (v47)
        {
          __int16 v48 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(v19 + 72), v47);
          uint64_t v43 = (float *)*((void *)v19 + 7);
          unint64_t v41 = (float *)*((void *)v19 + 8);
        }
        else
        {
          __int16 v48 = 0;
        }
        long long v49 = (float *)&v48[4 * v44];
        float *v49 = v39;
        uint64_t v42 = v49 + 1;
        while (v41 != v43)
        {
          int v50 = *((_DWORD *)v41-- - 1);
          *((_DWORD *)v49-- - 1) = v50;
        }
        *((void *)v19 + 7) = v49;
        *((void *)v19 + 8) = v42;
        *((void *)v19 + 9) = &v48[4 * v47];
        if (v43) {
          operator delete(v43);
        }
      }
      else
      {
        *unint64_t v41 = v39;
        uint64_t v42 = v41 + 1;
      }
      *((void *)v19 + 8) = v42;
    }
    while (v24++ < *((_DWORD *)v19 + 6));
    int v22 = *((_DWORD *)v19 + 22);
  }
  uint64_t v52 = (v22 + 2);
  std::vector<float>::vector(buf, (int)v52);
  uint64_t v53 = *(void *)buf;
  if (v22 >= -1)
  {
    uint64_t v54 = 0;
    uint64x2_t v80 = (uint64x2_t)vdupq_n_s64(v52 - 1);
    uint64x2_t v55 = (uint64x2_t)xmmword_20D6072C0;
    int64x2_t v78 = vdupq_n_s64(2uLL);
    float64x2_t v79 = (float64x2_t)vdupq_n_s64(0x401921FB54442D18uLL);
    uint64_t v56 = (v52 + 1) & 0x1FFFFFFFELL;
    float64x2_t v77 = (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)(v22 + 1)), 0);
    do
    {
      int64x2_t v85 = (int64x2_t)v55;
      int32x2_t v83 = vmovn_s64((int64x2_t)vcgeq_u64(v80, v55));
      v57.i64[0] = (int)v54;
      v57.i64[1] = (int)v54 + 1;
      float64x2_t __x = vdivq_f64(vmulq_f64(vcvtq_f64_s64(v57), v79), v77);
      double v82 = cos(__x.f64[1]);
      double v58 = cos(__x.f64[0]);
      if (v83.i8[0])
      {
        float v59 = (1.0 - v58) * 0.5;
        *(float *)(v53 + 4 * v54) = v59;
      }
      if (v83.i8[4])
      {
        float v60 = (1.0 - v82) * 0.5;
        *(float *)(v53 + 4 * v54 + 4) = v60;
      }
      v54 += 2;
      uint64x2_t v55 = (uint64x2_t)vaddq_s64(v85, v78);
    }
    while (v56 != v54);
  }
  uint64_t v61 = *(void *)&buf[8] - 4;
  *(void *)&uint8_t buf[8] = v61;
  uint64_t v62 = v61 - (v53 + 4);
  if (v61 != v53 + 4) {
    memmove((void *)v53, (const void *)(v53 + 4), v61 - (v53 + 4));
  }
  *(void *)&uint8_t buf[8] = v53 + v62;
  std::string::size_type v63 = *v23;
  if (*v23)
  {
    *((void *)v19 + 21) = v63;
    operator delete(v63);
    *std::string::size_type v23 = 0;
    *((void *)v19 + 21) = 0;
    *((void *)v19 + 22) = 0;
  }
  *((_OWORD *)v19 + 10) = *(_OWORD *)buf;
  *((void *)v19 + 22) = *(void *)&buf[16];
  *(void *)&long long v64 = v19 + 24;
  *((void *)&v64 + 1) = v19;
  std::string::size_type v65 = *(std::__shared_weak_count **)(*((void *)&v75 + 1) + 304);
  *(_OWORD *)(*((void *)&v75 + 1) + 296) = v64;
  if (v65) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v65);
  }
  if (v76) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v76);
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  std::string::size_type v66 = (void *)(a1 + 8);
  long long v67 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    std::chrono::steady_clock::time_point v68 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      std::chrono::steady_clock::time_point v68 = (void *)*v66;
    }
    v69.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    *(_DWORD *)std::string buf = 136315394;
    *(void *)&uint8_t buf[4] = v68;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(double *)&buf[14] = (double)((v69.__d_.__rep_ - rep) / 1000000) / 1000.0;
    _os_log_impl(&dword_20CD80000, v67, OS_LOG_TYPE_INFO, "Init latency (%s): %.3f s", buf, 0x16u);
  }
  if (*(char *)(a1 + 31) < 0) {
    std::string::size_type v66 = (void *)*v66;
  }
  v70.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "Init latency (%s): %.3f s", v71, v66, (double)((v70.__d_.__rep_ - rep) / 1000000) / 1000.0);
  if (v76) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v76);
  }
  _OWORD *v73 = v75;
}

void sub_20D44C26C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, Module *a16, std::__shared_weak_count *a17, std::__shared_weak_count *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,long long a33)
{
  int v38 = (std::__shared_weak_count_vtbl *)*v33;
  if (*v33)
  {
    v34[7].__vftable = v38;
    operator delete(v38);
  }
  shared_weak_owners = (std::__shared_weak_count_vtbl *)v34[5].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    v34[6].__vftable = shared_weak_owners;
    operator delete(shared_weak_owners);
  }
  unint64_t v40 = *(std::__shared_weak_count_vtbl **)a33;
  if (*(void *)a33)
  {
    v34[5].__vftable = v40;
    operator delete(v40);
  }
  unint64_t v41 = *v36;
  if (*v36)
  {
    v34[2].__shared_weak_owners_ = (uint64_t)v41;
    operator delete(v41);
  }
  uint64_t v42 = *v35;
  if (*v35)
  {
    v34[1].__shared_weak_owners_ = (uint64_t)v42;
    operator delete(v42);
  }
  std::__shared_weak_count::~__shared_weak_count(v34);
  operator delete(v43);
  uint64_t v44 = (std::__shared_weak_count *)a17[12].__shared_weak_owners_;
  if (v44) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v44);
  }
  Module::~Module(a16);
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  std::__shared_weak_count::~__shared_weak_count(a17);
  operator delete(v45);
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<LPCFilterModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<LPCFilterModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C215FE0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<LPCFilterModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C215FE0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<LPCFilterModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<LPCFilterModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0) {
    operator delete(__p[1]);
  }
  operator delete(__p);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<LPCFilterModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<LPCFilterModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<LPCFilterModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<LPCFilterModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, void *a2)
{
  *a2 = off_26C211890;
  uint64_t v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void *std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<LPCFilterModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<LPCFilterModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  void *v2 = off_26C211890;
  long long v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(void *)(a1 + 24);
  }
  return v2;
}

void sub_20D44C560(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<LPCFilterModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<LPCFilterModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C211890;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x2105595E0);
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<LPCFilterModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<LPCFilterModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C211890;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

char **std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<TextPreprocessing>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<TextPreprocessing>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<TextPreprocessing>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<TextPreprocessing>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

__n128 std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<TextPreprocessing>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<TextPreprocessing>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, char *a2@<X1>, long long *a3@<X2>, __n128 *a4@<X8>)
{
  v95[20] = *MEMORY[0x263EF8340];
  long long v78 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  v77.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  std::chrono::steady_clock::time_point v7 = operator new(0x150uLL);
  unint64_t v8 = v7;
  v7[1] = 0;
  v7[2] = 0;
  void *v7 = off_26C216980;
  unint64_t v9 = v7 + 3;
  int v10 = (std::__shared_weak_count *)*((void *)&v78 + 1);
  if (*((void *)&v78 + 1))
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v78 + 1) + 8), 1uLL, memory_order_relaxed);
    long long v87 = v78;
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v78 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  else
  {
    long long v87 = (unint64_t)v78;
  }
  Module::Module((uint64_t)(v7 + 3), a2, (uint64_t *)&v87);
  if (*((void *)&v87 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v87 + 1));
  }
  v8[3] = off_26C202070;
  int v11 = v8 + 38;
  v8[37] = v8 + 38;
  v8[38] = 0;
  v8[40] = 0;
  v8[41] = 0;
  v8[39] = 0;
  std::string::basic_string[abi:ne180100]<0>(buf, "text_mapping_file");
  memset(__p, 0, 24);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<std::string,0>(a2, (const void **)&buf[0].__r_.__value_.__l.__data_, (uint64_t)__p, &v86);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf[0].__r_.__value_.__l.__data_);
  }
  SharedObjectPool::get<VoiceConfig>(&v84, (long long **)v78);
  std::string::size_type size = HIBYTE(v86.__r_.__value_.__r.__words[2]);
  if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v86.__r_.__value_.__l.__size_;
  }
  int v13 = &fst::TropicalWeightTpl<float>::Type(void)::type;
  unint64_t v76 = (unint64_t)v9;
  if (size)
  {
    (*(void (**)(std::string *__return_ptr))(*(void *)v84 + 40))(buf);
    if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v86.__r_.__value_.__l.__data_);
    }
    std::string v86 = buf[0];
    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    int v14 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
    {
      float v16 = &v86;
      if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        float v16 = (std::string *)v86.__r_.__value_.__r.__words[0];
      }
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)v16;
      _os_log_impl(&dword_20CD80000, v14, OS_LOG_TYPE_DEFAULT, "Reading text_mapping_file from: %s", (uint8_t *)buf, 0xCu);
    }
    float v17 = &v86;
    if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      float v17 = (std::string *)v86.__r_.__value_.__r.__words[0];
    }
    Diagnostics::log(5, "Reading text_mapping_file from: %s", v15, v17);
    std::ifstream::basic_ifstream((uint64_t *)buf);
    v93[3] = 0;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::parse<std::ifstream &>(buf, (uint64_t)v93, 1, (uint64_t)v82);
    std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::~__value_func[abi:ne180100](v93);
    uint64x2_t v80 = 0;
    uint64_t v81 = 0;
    if (v82[0] != 1)
    {
      exceptiounint64_t n = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
      if (v82[0] > 9uLL) {
        unint64_t v72 = "number";
      }
      else {
        unint64_t v72 = off_2641152A0[v82[0]];
      }
      std::string::basic_string[abi:ne180100]<0>(&v92, v72);
      std::string v73 = std::string::insert(&v92, 0, "type must be object, but is ");
      long long v74 = *(_OWORD *)&v73->__r_.__value_.__l.__data_;
      __p[0].__r_.__value_.__r.__words[2] = v73->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = v74;
      v73->__r_.__value_.__l.__size_ = 0;
      v73->__r_.__value_.__r.__words[2] = 0;
      v73->__r_.__value_.__r.__words[0] = 0;
      nlohmann::detail::type_error::create(302, (uint64_t)__p, exception);
    }
    uint64_t v89 = 0;
    uint64_t v90 = 0;
    uint64_t v88 = &v89;
    uint64_t v19 = v83 + 1;
    float v18 = (uint64_t *)*v83;
    if ((uint64_t *)*v83 != v83 + 1)
    {
      uint64_t v75 = a1;
      uint64_t v20 = &v89;
      while (1)
      {
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>((uint64_t)(v18 + 7), &v92);
        if (*((char *)v18 + 55) < 0) {
          std::string::__init_copy_ctor_external(__p, (const std::string::value_type *)v18[4], v18[5]);
        }
        else {
          __p[0] = *(std::string *)(v18 + 4);
        }
        __p[1] = v92;
        if (&v89 == v20) {
          goto LABEL_38;
        }
        std::string::size_type v21 = HIBYTE(__p[0].__r_.__value_.__r.__words[2]);
        if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v21 = __p[0].__r_.__value_.__l.__size_;
        }
        std::string::size_type v22 = *((unsigned __int8 *)v20 + 55);
        if ((v22 & 0x80u) != 0) {
          std::string::size_type v22 = (std::string::size_type)v20[5];
        }
        if (v21 >= v22)
        {
LABEL_38:
          long double v26 = *v20;
          float v27 = (uint64_t *)v20;
          if (v88 == v20) {
            goto LABEL_57;
          }
          unint64_t v28 = *v20;
          uint64_t v29 = v20;
          if (v26)
          {
            do
            {
              float v27 = v28;
              unint64_t v28 = (uint64_t *)v28[1];
            }
            while (v28);
          }
          else
          {
            do
            {
              float v27 = v29[2];
              BOOL v30 = *v27 == (void)v29;
              uint64_t v29 = (uint64_t **)v27;
            }
            while (v30);
          }
          if (*((char *)v27 + 55) >= 0) {
            std::string::size_type v31 = *((unsigned __int8 *)v27 + 55);
          }
          else {
            std::string::size_type v31 = v27[5];
          }
          std::string::size_type v32 = HIBYTE(__p[0].__r_.__value_.__r.__words[2]);
          if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type v32 = __p[0].__r_.__value_.__l.__size_;
          }
          if (v31 >= v32)
          {
LABEL_57:
            std::string::size_type v23 = (uint64_t **)(v27 + 1);
            if (v26) {
              uint64_t v20 = (uint64_t **)v27;
            }
            else {
              std::string::size_type v23 = v20;
            }
          }
          else
          {
            unint64_t v33 = v89;
            uint64_t v20 = &v89;
            uint64_t v34 = &v89;
            if (!v89) {
              goto LABEL_61;
            }
            do
            {
              while (1)
              {
                uint64_t v20 = (uint64_t **)v33;
                std::string::size_type v35 = *((unsigned __int8 *)v33 + 55);
                if ((v35 & 0x80u) != 0) {
                  std::string::size_type v35 = (std::string::size_type)v20[5];
                }
                if (v32 < v35) {
                  break;
                }
                unint64_t v33 = *v20;
                uint64_t v34 = v20;
                if (!*v20) {
                  goto LABEL_61;
                }
              }
              unint64_t v33 = v20[1];
            }
            while (v33);
LABEL_97:
            std::string::size_type v23 = v20 + 1;
          }
        }
        else
        {
          std::string::size_type v23 = v20 + 1;
          int v24 = v20[1];
          if (v24)
          {
            do
            {
              std::string::size_type v23 = (uint64_t **)v24;
              int v24 = (uint64_t *)*v24;
              uint64_t v20 = v23;
              long double v25 = v23;
            }
            while (v24);
          }
          else
          {
            long double v25 = v20;
            do
            {
              uint64_t v43 = (uint64_t *)v25;
              long double v25 = (uint64_t **)v25[2];
            }
            while (*v25 != v43);
          }
          if (v25 != &v89)
          {
            std::string::size_type v44 = *((unsigned __int8 *)v25 + 55);
            std::string::size_type v45 = (std::string::size_type)v25[5];
            if ((v44 & 0x80u) == 0) {
              std::string::size_type v45 = v44;
            }
            if (v21 < v45)
            {
              uint64_t v46 = v89;
              uint64_t v20 = &v89;
              uint64_t v34 = &v89;
              if (v89)
              {
                do
                {
                  while (1)
                  {
                    uint64_t v20 = (uint64_t **)v46;
                    std::string::size_type v47 = *((unsigned __int8 *)v46 + 55);
                    if ((v47 & 0x80u) != 0) {
                      std::string::size_type v47 = (std::string::size_type)v20[5];
                    }
                    if (v21 >= v47) {
                      break;
                    }
                    uint64_t v46 = v20[1];
                    if (!v46) {
                      goto LABEL_97;
                    }
                  }
                  uint64_t v46 = *v20;
                  uint64_t v34 = v20;
                }
                while (*v20);
              }
LABEL_61:
              uint64_t v37 = (char *)operator new(0x50uLL);
              v92.__r_.__value_.__r.__words[0] = (std::string::size_type)v37;
              v92.__r_.__value_.__l.__size_ = (std::string::size_type)&v89;
              v92.__r_.__value_.__s.__data_[16] = 0;
              int v38 = (std::string *)(v37 + 32);
              if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
              {
                std::string::__init_copy_ctor_external(v38, __p[0].__r_.__value_.__l.__data_, __p[0].__r_.__value_.__l.__size_);
                float v39 = (uint64_t *)v92.__r_.__value_.__r.__words[0];
              }
              else
              {
                *(_OWORD *)&v38->__r_.__value_.__l.__data_ = *(_OWORD *)&__p[0].__r_.__value_.__l.__data_;
                *((void *)v37 + 6) = *((void *)&__p[0].__r_.__value_.__l + 2);
                float v39 = (uint64_t *)v37;
              }
              *(std::string *)(v37 + 56) = __p[1];
              memset(&__p[1], 0, sizeof(std::string));
              v92.__r_.__value_.__s.__data_[16] = 1;
              uint64_t *v39 = 0;
              v39[1] = 0;
              v39[2] = (uint64_t)v34;
              *uint64_t v20 = v39;
              if (*v88)
              {
                uint64_t v88 = (uint64_t **)*v88;
                float v39 = *v20;
              }
              std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v89, v39);
              ++v90;
              std::string::size_type v36 = v92.__r_.__value_.__r.__words[0];
              v92.__r_.__value_.__r.__words[0] = 0;
              std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)&v92, 0);
              goto LABEL_67;
            }
          }
        }
        uint64_t v34 = v20;
        std::string::size_type v36 = (std::string::size_type)*v23;
        uint64_t v20 = v23;
        if (!*v23) {
          goto LABEL_61;
        }
LABEL_67:
        unint64_t v40 = *(uint64_t **)(v36 + 8);
        if (v40)
        {
          do
          {
            uint64_t v20 = (uint64_t **)v40;
            unint64_t v40 = (uint64_t *)*v40;
          }
          while (v40);
        }
        else
        {
          do
          {
            uint64_t v20 = *(uint64_t ***)(v36 + 16);
            BOOL v30 = *v20 == (uint64_t *)v36;
            std::string::size_type v36 = (std::string::size_type)v20;
          }
          while (!v30);
        }
        if (SHIBYTE(__p[1].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p[1].__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p[0].__r_.__value_.__l.__data_);
        }
        unint64_t v41 = (uint64_t *)v18[1];
        if (v41)
        {
          do
          {
            uint64_t v42 = v41;
            unint64_t v41 = (uint64_t *)*v41;
          }
          while (v41);
        }
        else
        {
          do
          {
            uint64_t v42 = (uint64_t *)v18[2];
            BOOL v30 = *v42 == (void)v18;
            float v18 = v42;
          }
          while (!v30);
        }
        float v18 = v42;
        if (v42 == v19)
        {
          __int16 v48 = v80;
          int v11 = v8 + 38;
          a1 = v75;
          goto LABEL_109;
        }
      }
    }
    __int16 v48 = 0;
LABEL_109:
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,TextPreprocessing::compare_by_string_length,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v48);
    uint64_t v56 = v89;
    float64x2_t v79 = v88;
    uint64x2_t v80 = v89;
    uint64_t v81 = v90;
    int v10 = (std::__shared_weak_count *)*((void *)&v78 + 1);
    int v13 = &fst::TropicalWeightTpl<float>::Type(void)::type;
    if (v90)
    {
      v89[2] = (uint64_t)&v80;
      uint64_t v88 = &v89;
      uint64_t v89 = 0;
      uint64_t v90 = 0;
      uint64_t v56 = 0;
    }
    else
    {
      float64x2_t v79 = &v80;
    }
    uint64_t v51 = &fst::TropicalWeightTpl<float>::Type(void)::type;
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,TextPreprocessing::compare_by_string_length,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v56);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,TextPreprocessing::compare_by_string_length,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((void *)v8[38]);
    int64x2_t v57 = v80;
    v8[37] = v79;
    v8[38] = v57;
    uint64_t v58 = v81;
    v8[39] = v81;
    if (v58)
    {
      v57[2] = (uint64_t)v11;
      uint64x2_t v80 = 0;
      uint64_t v81 = 0;
      int64x2_t v57 = 0;
    }
    else
    {
      v8[37] = v11;
    }
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,TextPreprocessing::compare_by_string_length,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v57);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v83, v82[0]);
    buf[0].__r_.__value_.__r.__words[0] = *MEMORY[0x263F8C2A8];
    *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words
                              + *(void *)(buf[0].__r_.__value_.__r.__words[0] - 24)) = *(void *)(MEMORY[0x263F8C2A8] + 24);
    MEMORY[0x210558FE0](&buf[0].__r_.__value_.__r.__words[2]);
    std::istream::~istream();
    MEMORY[0x210559500](v95);
  }
  else
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    long long v49 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_20CD80000, v49, OS_LOG_TYPE_DEFAULT, "Reading rule file from: preprocess_rule.dat", (uint8_t *)buf, 2u);
    }
    Diagnostics::log(5, "Reading rule file from: preprocess_rule.dat", v50);
    SharedObjectPool::get_if<FrontendEnvironment>(__p, v78);
    uint64_t v51 = &fst::TropicalWeightTpl<float>::Type(void)::type;
    if (__p[0].__r_.__value_.__r.__words[0])
    {
      (*(void (**)(std::string *__return_ptr))(**(void **)(__p[0].__r_.__value_.__r.__words[0] + 96) + 32))(buf);
      std::string::size_type v52 = HIBYTE(buf[0].__r_.__value_.__r.__words[2]);
      if ((buf[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v52 = buf[0].__r_.__value_.__l.__size_;
      }
      if (v52)
      {
        FastRewriter::create(&v92, (uint64_t)buf);
        std::string::size_type v53 = v92.__r_.__value_.__r.__words[0];
        uint64_t v54 = (std::__shared_weak_count *)v8[41];
        *((_OWORD *)v8 + 20) = *(_OWORD *)&v92.__r_.__value_.__l.__data_;
        if (v54)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v54);
          std::string::size_type v55 = v8[40];
        }
        else
        {
          std::string::size_type v55 = v53;
        }
        (*(void (**)(std::string::size_type))(*(void *)v55 + 24))(v55);
      }
      else
      {
        if (Diagnostics_GetLogObject(void)::onceToken != -1) {
          dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
        }
        float v59 = Diagnostics_GetLogObject(void)::__profile_log_default;
        if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
        {
          LOWORD(v92.__r_.__value_.__l.__data_) = 0;
          _os_log_impl(&dword_20CD80000, v59, OS_LOG_TYPE_ERROR, "preprocess_rule.dat is missing, please use either text_mapping_file or preprocess_rule.dat", (uint8_t *)&v92, 2u);
        }
        Diagnostics::log(3, "preprocess_rule.dat is missing, please use either text_mapping_file or preprocess_rule.dat", v60);
      }
      if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(buf[0].__r_.__value_.__l.__data_);
      }
    }
    if (__p[0].__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[0].__r_.__value_.__l.__size_);
    }
  }
  if (v85) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v85);
  }
  if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v86.__r_.__value_.__l.__data_);
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  if (v51[34] != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  uint64_t v61 = (std::string::size_type *)(a1 + 8);
  uint64_t v62 = v13[33];
  BOOL v63 = os_log_type_enabled(v62, OS_LOG_TYPE_INFO);
  uint64_t v64 = a1;
  if (v63)
  {
    std::string::size_type v65 = a4;
    std::string::size_type v66 = a1 + 8;
    if (*(char *)(a1 + 31) < 0) {
      std::string::size_type v66 = *v61;
    }
    v67.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = v66;
    WORD2(buf[0].__r_.__value_.__r.__words[1]) = 2048;
    *(double *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = (double)((v67.__d_.__rep_ - v77.__d_.__rep_)
                                                                           / 1000000)
                                                                  / 1000.0;
    _os_log_impl(&dword_20CD80000, v62, OS_LOG_TYPE_INFO, "Init latency (%s): %.3f s", (uint8_t *)buf, 0x16u);
    a4 = v65;
    uint64_t v64 = a1;
  }
  if (*(char *)(v64 + 31) < 0) {
    uint64_t v61 = (std::string::size_type *)*v61;
  }
  v68.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "Init latency (%s): %.3f s", v69, v61, (double)((v68.__d_.__rep_ - v77.__d_.__rep_) / 1000000) / 1000.0);
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  result.n128_u64[0] = v76;
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_20D44D210(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, Module *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,std::__shared_weak_count *a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,std::__shared_weak_count *a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *__p,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if (a59 < 0) {
    operator delete(__p);
  }
  if (a41) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a41);
  }
  if (a26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a26);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  shared_weak_owners = (std::__shared_weak_count *)v59[13].__shared_weak_owners_;
  if (shared_weak_owners) {
    std::__shared_weak_count::__release_shared[abi:ne180100](shared_weak_owners);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,TextPreprocessing::compare_by_string_length,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*v60);
  Module::~Module(a15);
  if (v61) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v61);
  }
  std::__shared_weak_count::~__shared_weak_count(v59);
  operator delete(v64);
  if (v61) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v61);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<TextPreprocessing>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<TextPreprocessing>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C216980;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<TextPreprocessing>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C216980;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<TextPreprocessing>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<TextPreprocessing>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0) {
    operator delete(__p[1]);
  }
  operator delete(__p);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<TextPreprocessing>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<TextPreprocessing>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<TextPreprocessing>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<TextPreprocessing>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, void *a2)
{
  *a2 = off_26C211AF8;
  uint64_t v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void *std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<TextPreprocessing>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<TextPreprocessing>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  void *v2 = off_26C211AF8;
  long long v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(void *)(a1 + 24);
  }
  return v2;
}

void sub_20D44D67C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<TextPreprocessing>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<TextPreprocessing>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C211AF8;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x2105595E0);
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<TextPreprocessing>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<TextPreprocessing>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C211AF8;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

char **std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<TextSplitModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<TextSplitModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<TextSplitModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<TextSplitModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

__n128 std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<TextSplitModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<TextSplitModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, char *a2@<X1>, long long *a3@<X2>, __n128 *a4@<X8>)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  long long v24 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  v7.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  unint64_t v8 = operator new(0x148uLL);
  unint64_t v9 = (unint64_t)v8;
  v8[1] = 0;
  _OWORD v8[2] = 0;
  void *v8 = off_26C2162B8;
  unint64_t v10 = (unint64_t)(v8 + 3);
  if (*((void *)&v24 + 1))
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v24 + 1) + 8), 1uLL, memory_order_relaxed);
    long long v26 = v24;
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v24 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  else
  {
    long long v26 = (unint64_t)v24;
  }
  Module::Module((uint64_t)(v8 + 3), a2, (uint64_t *)&v26);
  if (*((void *)&v26 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v26 + 1));
  }
  *(void *)(v9 + ++*(_DWORD *)(result + 24) = off_26C201530;
  *(void *)(v9 + 312) = 0;
  *(void *)(v9 + 320) = 0;
  unint64_t v11 = v9 + 312;
  *(void *)(v9 + 304) = v9 + 312;
  std::string::basic_string[abi:ne180100]<0>(__p, "max_word_limit_per_utt");
  unsigned int v25 = 50;
  *(_DWORD *)(v9 + 296) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>(a2, (const void **)__p, &v25);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  int v12 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "split_punctuation");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::set<std::string>,std::set<std::string>,0>((uint64_t)__p, v12);
  std::__tree<std::string>::destroy(v9 + 304, *(char **)(v9 + 312));
  uint64_t v13 = *(void *)&__p[8];
  *(void *)(v9 + 304) = *(void *)__p;
  *(void *)(v9 + 312) = v13;
  uint64_t v14 = *(void *)&__p[16];
  *(void *)(v9 + 320) = *(void *)&__p[16];
  if (v14)
  {
    *(void *)(v13 + 16) = v11;
    *(void *)std::string __p = &__p[8];
    *(void *)&__p[8] = 0;
    *(void *)&__p[16] = 0;
    uint64_t v13 = 0;
  }
  else
  {
    *(void *)(v9 + 304) = v11;
  }
  std::__tree<std::string>::destroy((uint64_t)__p, (char *)v13);
  if (*((void *)&v24 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v24 + 1));
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  BOOL v15 = (void *)(a1 + 8);
  float v16 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    unint64_t v17 = v10;
    float v18 = a4;
    uint64_t v19 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      uint64_t v19 = (void *)*v15;
    }
    v20.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    *(_DWORD *)std::string __p = 136315394;
    *(void *)&__p[4] = v19;
    *(_WORD *)&unsigned char __p[12] = 2048;
    *(double *)&__p[14] = (double)((v20.__d_.__rep_ - v7.__d_.__rep_) / 1000000) / 1000.0;
    _os_log_impl(&dword_20CD80000, v16, OS_LOG_TYPE_INFO, "Init latency (%s): %.3f s", __p, 0x16u);
    a4 = v18;
    unint64_t v10 = v17;
  }
  if (*(char *)(a1 + 31) < 0) {
    BOOL v15 = (void *)*v15;
  }
  v21.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "Init latency (%s): %.3f s", v22, v15, (double)((v21.__d_.__rep_ - v7.__d_.__rep_) / 1000000) / 1000.0);
  if (*((void *)&v24 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v24 + 1));
  }
  result.n128_u64[0] = v10;
  result.n128_u64[1] = v9;
  *a4 = result;
  return result;
}

void sub_20D44DAA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, long long a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  std::__tree<std::string>::destroy(v24, *v25);
  Module::~Module(v23);
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  std::__shared_weak_count::~__shared_weak_count(v21);
  operator delete(v27);
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<TextSplitModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<TextSplitModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C2162B8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<TextSplitModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C2162B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<TextSplitModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<TextSplitModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0) {
    operator delete(__p[1]);
  }
  operator delete(__p);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<TextSplitModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<TextSplitModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<TextSplitModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<TextSplitModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, void *a2)
{
  *a2 = off_26C211940;
  uint64_t v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void *std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<TextSplitModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<TextSplitModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  void *v2 = off_26C211940;
  long long v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(void *)(a1 + 24);
  }
  return v2;
}

void sub_20D44DCE0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<TextSplitModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<TextSplitModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C211940;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x2105595E0);
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<TextSplitModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<TextSplitModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C211940;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

char **std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<PhonewiseFeatureModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<PhonewiseFeatureModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<PhonewiseFeatureModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<PhonewiseFeatureModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

__n128 std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<PhonewiseFeatureModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<PhonewiseFeatureModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, char *a2@<X1>, long long *a3@<X2>, __n128 *a4@<X8>)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  long long v35 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  v34.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  std::chrono::steady_clock::time_point v7 = operator new(0x150uLL);
  unint64_t v8 = (unint64_t)v7;
  v7[1] = 0;
  v7[2] = 0;
  void *v7 = off_26C2174E0;
  unint64_t v9 = (unint64_t)(v7 + 3);
  if (*((void *)&v35 + 1))
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v35 + 1) + 8), 1uLL, memory_order_relaxed);
    long long v36 = v35;
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v35 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  else
  {
    long long v36 = (unint64_t)v35;
  }
  Module::Module((uint64_t)(v7 + 3), a2, (uint64_t *)&v36);
  if (*((void *)&v36 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v36 + 1));
  }
  *(void *)(v8 + ++*(_DWORD *)(result + 24) = off_26C203728;
  unint64_t v10 = (void **)(v8 + 296);
  std::string::basic_string[abi:ne180100]<0>((void *)(v8 + 296), &byte_20D5A22AE);
  *(void *)(v8 + 320) = 0;
  *(void *)(v8 + 328) = 0;
  uint64_t v11 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "model_type");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v11, &__p);
  if (*(char *)(v8 + 319) < 0) {
    operator delete(*v10);
  }
  *(_OWORD *)unint64_t v10 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  *(void *)(v8 + 312) = *((void *)&__p.__r_.__value_.__l + 2);
  if ((*(char *)(v8 + 319) & 0x80000000) == 0)
  {
    if (*(unsigned char *)(v8 + 319) != 8)
    {
      int v12 = (uint64_t *)(v8 + 296);
      if (*(unsigned char *)(v8 + 319) != 11) {
        goto LABEL_55;
      }
      goto LABEL_15;
    }
    std::chrono::steady_clock::time_point v20 = *v10;
LABEL_24:
    if (v20 != (void *)0x6E6F72746F636174) {
      goto LABEL_55;
    }
    std::chrono::steady_clock::time_point v21 = operator new(0x70uLL);
    float v18 = v21;
    v21[1] = 0;
    v21[2] = 0;
    *std::chrono::steady_clock::time_point v21 = off_26C217B00;
    std::string::size_type v22 = v21 + 3;
    if (*((void *)&v35 + 1))
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v35 + 1) + 8), 1uLL, memory_order_relaxed);
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v35;
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v35 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    else
    {
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = (unint64_t)v35;
    }
    FeatureProcessingBase::FeatureProcessingBase((uint64_t)(v21 + 3), (uint64_t)a2, (long long ***)&__p);
    if (*((void *)&v35 + 1))
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v35 + 1));
      *std::string::size_type v22 = &off_26C204068;
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v35 + 1));
    }
    else
    {
      *std::string::size_type v22 = &off_26C204068;
    }
    *(void *)&long long v24 = v22;
    goto LABEL_40;
  }
  uint64_t v13 = *(void *)(v8 + 304);
  if (v13 == 8)
  {
    std::chrono::steady_clock::time_point v20 = *(void **)*v10;
    goto LABEL_24;
  }
  if (v13 != 11) {
    goto LABEL_55;
  }
  int v12 = (uint64_t *)*v10;
LABEL_15:
  uint64_t v14 = *v12;
  uint64_t v15 = *(uint64_t *)((char *)v12 + 3);
  if (v14 != 0x6565707374736166 || v15 != 0x3268636565707374)
  {
LABEL_55:
    exceptiounint64_t n = __cxa_allocate_exception(0x10uLL);
    StringFormatter::StringFormatter((StringFormatter *)&__p, "model_type must be specified to be either tacotron or fastspeech2.");
    MEMORY[0x210558D40](exception, &__p);
    __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  unint64_t v17 = operator new(0x90uLL);
  float v18 = v17;
  v17[1] = 0;
  v17[2] = 0;
  *unint64_t v17 = off_26C218008;
  uint64_t v19 = v17 + 3;
  if (*((void *)&v35 + 1))
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v35 + 1) + 8), 1uLL, memory_order_relaxed);
    long long v38 = v35;
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v35 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  else
  {
    long long v38 = (unint64_t)v35;
  }
  FeatureProcessingBase::FeatureProcessingBase((uint64_t)(v17 + 3), (uint64_t)a2, (long long ***)&v38);
  if (*((void *)&v35 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v35 + 1));
  }
  v18[3] = &off_26C2048C0;
  FeatureProcessingBase::Config::Config((uint64_t)(v18 + 14), (uint64_t)a2);
  *((_DWORD *)v18 + 34) = 1092616192;
  std::string::basic_string[abi:ne180100]<0>(&__p, "placeholder_duration");
  uint64_t v37 = 0x4024000000000000;
  float v23 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<double,0>((unsigned __int8 *)a2, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&v37);
  *((float *)v18 + 34) = v23;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (*((void *)&v35 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v35 + 1));
  }
  *(void *)&long long v24 = v19;
LABEL_40:
  *((void *)&v24 + 1) = v18;
  unsigned int v25 = *(std::__shared_weak_count **)(v8 + 328);
  *(_OWORD *)(v8 + 320) = v24;
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  if (*((void *)&v35 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v35 + 1));
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  long long v26 = (std::string::size_type *)(a1 + 8);
  float v27 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    std::string::size_type v28 = a1 + 8;
    if (*(char *)(a1 + 31) < 0) {
      std::string::size_type v28 = *v26;
    }
    v29.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    LODWORD(__p.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = v28;
    WORD2(__p.__r_.__value_.__r.__words[1]) = 2048;
    *(double *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = (double)((v29.__d_.__rep_ - v34.__d_.__rep_) / 1000000)
                                                               / 1000.0;
    _os_log_impl(&dword_20CD80000, v27, OS_LOG_TYPE_INFO, "Init latency (%s): %.3f s", (uint8_t *)&__p, 0x16u);
  }
  if (*(char *)(a1 + 31) < 0) {
    long long v26 = (std::string::size_type *)*v26;
  }
  v30.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "Init latency (%s): %.3f s", v31, v26, (double)((v30.__d_.__rep_ - v34.__d_.__rep_) / 1000000) / 1000.0);
  if (*((void *)&v35 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v35 + 1));
  }
  result.n128_u64[0] = v9;
  result.n128_u64[1] = v8;
  *a4 = result;
  return result;
}

void sub_20D44E348(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, long long a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v30 + 135) < 0) {
    operator delete(*v28);
  }
  *(void *)(v30 + ++*(_DWORD *)(result + 24) = &unk_26C202F58;
  if (*(char *)(v30 + 103) < 0) {
    operator delete(*(void **)(v30 + 80));
  }
  std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(*(void **)(v30 + 64));
  if (*(char *)(v30 + 55) < 0) {
    operator delete(*(void **)(v30 + 32));
  }
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v30);
  operator delete(v32);
  unint64_t v33 = *(std::__shared_weak_count **)(v25 + 328);
  if (v33) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
  }
  if (*(char *)(v25 + 319) < 0) {
    operator delete(*v29);
  }
  Module::~Module(v27);
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v25);
  operator delete(v34);
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<PhonewiseFeatureModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<PhonewiseFeatureModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C2174E0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<PhonewiseFeatureModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C2174E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<PhonewiseFeatureModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<PhonewiseFeatureModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0) {
    operator delete(__p[1]);
  }
  operator delete(__p);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<PhonewiseFeatureModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<PhonewiseFeatureModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<PhonewiseFeatureModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<PhonewiseFeatureModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, void *a2)
{
  *a2 = off_26C212180;
  uint64_t v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void *std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<PhonewiseFeatureModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<PhonewiseFeatureModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  void *v2 = off_26C212180;
  long long v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(void *)(a1 + 24);
  }
  return v2;
}

void sub_20D44E664(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<PhonewiseFeatureModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<PhonewiseFeatureModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C212180;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x2105595E0);
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<PhonewiseFeatureModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<PhonewiseFeatureModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C212180;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

char **std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<MergeFrontendFeatureModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<MergeFrontendFeatureModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<MergeFrontendFeatureModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<MergeFrontendFeatureModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

__n128 std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<MergeFrontendFeatureModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<MergeFrontendFeatureModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, char *a2@<X1>, long long *a3@<X2>, __n128 *a4@<X8>)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  long long v20 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  v7.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  unint64_t v8 = operator new(0x148uLL);
  unint64_t v9 = (unint64_t)v8;
  v8[1] = 0;
  _OWORD v8[2] = 0;
  void *v8 = off_26C217CC0;
  unint64_t v10 = (unint64_t)(v8 + 3);
  if (*((void *)&v20 + 1))
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v20 + 1) + 8), 1uLL, memory_order_relaxed);
    long long v22 = v20;
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v20 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  else
  {
    long long v22 = (unint64_t)v20;
  }
  Module::Module((uint64_t)(v8 + 3), a2, (uint64_t *)&v22);
  if (*((void *)&v22 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v22 + 1));
  }
  *(void *)(v9 + ++*(_DWORD *)(result + 24) = off_26C204320;
  *(void *)(v9 + 312) = 0;
  *(void *)(v9 + 320) = 0;
  *(void *)(v9 + 304) = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "max_word_limit_per_feature");
  unsigned int v21 = -1;
  *(_DWORD *)(v9 + 296) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>(a2, (const void **)__p, &v21);
  if (v26 < 0) {
    operator delete(*(void **)__p);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "sentences_per_feature");
  unsigned int v21 = -1;
  *(_DWORD *)(v9 + 300) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>(a2, (const void **)__p, &v21);
  if (v26 < 0) {
    operator delete(*(void **)__p);
  }
  if (*((void *)&v20 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v20 + 1));
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  uint64_t v11 = (void *)(a1 + 8);
  int v12 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    unint64_t v13 = v10;
    uint64_t v14 = a4;
    uint64_t v15 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      uint64_t v15 = (void *)*v11;
    }
    v16.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    *(_DWORD *)std::string __p = 136315394;
    *(void *)&__p[4] = v15;
    __int16 v24 = 2048;
    double v25 = (double)((v16.__d_.__rep_ - v7.__d_.__rep_) / 1000000) / 1000.0;
    _os_log_impl(&dword_20CD80000, v12, OS_LOG_TYPE_INFO, "Init latency (%s): %.3f s", __p, 0x16u);
    a4 = v14;
    unint64_t v10 = v13;
  }
  if (*(char *)(a1 + 31) < 0) {
    uint64_t v11 = (void *)*v11;
  }
  v17.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "Init latency (%s): %.3f s", v18, v11, (double)((v17.__d_.__rep_ - v7.__d_.__rep_) / 1000000) / 1000.0);
  if (*((void *)&v20 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v20 + 1));
  }
  result.n128_u64[0] = v10;
  result.n128_u64[1] = v9;
  *a4 = result;
  return result;
}

void sub_20D44EA5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  std::string __p = &v22[12].__shared_weak_owners_;
  std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  Module::~Module(v24);
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  std::__shared_weak_count::~__shared_weak_count(v22);
  operator delete(v26);
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  _Unwind_Resume(a1);
}

void sub_20D44EAC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  JUMPOUT(0x20D44EA98);
}

void sub_20D44EAD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (!a12) {
    JUMPOUT(0x20D44EABCLL);
  }
  JUMPOUT(0x20D44EAB4);
}

uint64_t std::__shared_ptr_emplace<MergeFrontendFeatureModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<MergeFrontendFeatureModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C217CC0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<MergeFrontendFeatureModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C217CC0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<MergeFrontendFeatureModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<MergeFrontendFeatureModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0) {
    operator delete(__p[1]);
  }
  operator delete(__p);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<MergeFrontendFeatureModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<MergeFrontendFeatureModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<MergeFrontendFeatureModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<MergeFrontendFeatureModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, void *a2)
{
  *a2 = off_26C212390;
  uint64_t v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void *std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<MergeFrontendFeatureModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<MergeFrontendFeatureModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  void *v2 = off_26C212390;
  long long v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(void *)(a1 + 24);
  }
  return v2;
}

void sub_20D44ECA0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<MergeFrontendFeatureModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<MergeFrontendFeatureModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C212390;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x2105595E0);
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<MergeFrontendFeatureModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<MergeFrontendFeatureModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C212390;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

char **std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<WordEmbeddingModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<WordEmbeddingModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<WordEmbeddingModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<WordEmbeddingModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

__n128 std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<WordEmbeddingModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<WordEmbeddingModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, char *a2@<X1>, long long *a3@<X2>, __n128 *a4@<X8>)
{
  uint64_t v76 = *MEMORY[0x263EF8340];
  long long v63 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  v58.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  std::chrono::steady_clock::time_point v6 = operator new(0x1B8uLL);
  unint64_t v7 = (unint64_t)v6;
  v6[1] = 0;
  v6[2] = 0;
  void *v6 = off_26C216E88;
  unint64_t v8 = v6 + 3;
  if (*((void *)&v63 + 1))
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v63 + 1) + 8), 1uLL, memory_order_relaxed);
    long long v71 = v63;
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v63 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  else
  {
    long long v71 = (unint64_t)v63;
  }
  Module::Module((uint64_t)(v6 + 3), a2, (uint64_t *)&v71);
  if (*((void *)&v71 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v71 + 1));
  }
  *(void *)(v7 + ++*(_DWORD *)(result + 24) = off_26C202A88;
  unint64_t v9 = (void **)(v7 + 296);
  unint64_t v59 = (unint64_t)v8;
  std::string::basic_string[abi:ne180100]<0>((void *)(v7 + 296), &byte_20D5A22AE);
  *(void *)(v7 + 336) = 0;
  *(void *)(v7 + 344) = 0;
  unint64_t v10 = v7 + 336;
  *(void *)(v7 + 328) = v7 + 336;
  uint64_t v62 = (void **)(v7 + 376);
  float v60 = (void **)(v7 + 352);
  uint64_t v61 = (void **)(v7 + 400);
  *(_OWORD *)(v7 + 352) = 0u;
  *(_OWORD *)(v7 + 368) = 0u;
  *(_OWORD *)(v7 + 384) = 0u;
  *(_OWORD *)(v7 + 400) = 0u;
  *(_OWORD *)(v7 + 416) = 0u;
  uint64_t v11 = v63;
  *(void *)(v7 + 432) = 0;
  SharedObjectPool::get<VoiceConfig>(&v69, (long long **)v63);
  uint64_t v12 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "framework_type");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v12, &buf);
  uint64_t v64 = a4;
  if (*(char *)(v7 + 319) < 0) {
    operator delete(*v9);
  }
  *(_OWORD *)unint64_t v9 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
  *(void *)(v7 + 312) = *((void *)&buf.__r_.__value_.__l + 2);
  uint64_t v13 = v69;
  uint64_t v14 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "vocab_file");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v14, &buf);
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t, std::string *, void))(*(void *)v13 + 40))(__p, v13, 1853318509, &buf, 0);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  uint64_t v15 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    std::chrono::steady_clock::time_point v17 = __p;
    if (v68 < 0) {
      std::chrono::steady_clock::time_point v17 = (void **)__p[0];
    }
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v17;
    _os_log_impl(&dword_20CD80000, v15, OS_LOG_TYPE_DEFAULT, "Reading vocab file from: %s", (uint8_t *)&buf, 0xCu);
  }
  float v18 = __p;
  if (v68 < 0) {
    float v18 = (void **)__p[0];
  }
  Diagnostics::log(5, "Reading vocab file from: %s", v16, v18);
  std::string::basic_string[abi:ne180100]<0>(&v72, "begin_token");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value("[CLS]", a2, (const void **)&v72, &buf);
  if (*(char *)(v7 + 399) < 0) {
    operator delete(*v62);
  }
  *(_OWORD *)uint64_t v62 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
  *(void *)(v7 + 392) = *((void *)&buf.__r_.__value_.__l + 2);
  *((unsigned char *)&buf.__r_.__value_.__s + 23) = 0;
  buf.__r_.__value_.__s.__data_[0] = 0;
  if (v74 < 0) {
    operator delete(v72);
  }
  std::string::basic_string[abi:ne180100]<0>(&v72, "end_token");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value("[SEP]", a2, (const void **)&v72, &buf);
  if (*(char *)(v7 + 423) < 0) {
    operator delete(*v61);
  }
  *(_OWORD *)uint64_t v61 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
  *(void *)(v7 + 416) = *((void *)&buf.__r_.__value_.__l + 2);
  *((unsigned char *)&buf.__r_.__value_.__s + 23) = 0;
  buf.__r_.__value_.__s.__data_[0] = 0;
  if (v74 < 0) {
    operator delete(v72);
  }
  std::string::basic_string[abi:ne180100]<0>(&v72, "unknown_token");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value("[UNK]", a2, (const void **)&v72, &buf);
  if (*(char *)(v7 + 375) < 0) {
    operator delete(*v60);
  }
  *(_OWORD *)float v60 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
  *(void *)(v7 + 368) = *((void *)&buf.__r_.__value_.__l + 2);
  *((unsigned char *)&buf.__r_.__value_.__s + 23) = 0;
  buf.__r_.__value_.__s.__data_[0] = 0;
  if (v74 < 0) {
    operator delete(v72);
  }
  uint64_t v19 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "punctuation");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::set<std::string>,std::set<std::string>,0>((uint64_t)&buf, v19);
  std::__tree<std::string>::destroy(v7 + 328, *(char **)(v7 + 336));
  std::string::size_type size = buf.__r_.__value_.__l.__size_;
  *(void *)(v7 + 328) = buf.__r_.__value_.__r.__words[0];
  *(void *)(v7 + 336) = size;
  std::string::size_type v21 = buf.__r_.__value_.__r.__words[2];
  *(void *)(v7 + 344) = *((void *)&buf.__r_.__value_.__l + 2);
  if (v21)
  {
    *(void *)(size + 16) = v10;
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&buf.__r_.__value_.__l.__size_;
    *(_OWORD *)&buf.__r_.__value_.__r.__words[1] = 0uLL;
    std::string::size_type size = 0;
  }
  else
  {
    *(void *)(v7 + 328) = v10;
  }
  std::__tree<std::string>::destroy((uint64_t)&buf, (char *)size);
  if (*((void *)&v63 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v63 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  PersistentModuleFactory::get_persistent_module_from_pool<WordEmbeddingPersistentModule>(&v65, (long long *)(v7 + 208), v11);
  if (*((void *)&v63 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v63 + 1));
  }
  *(void *)(v7 + 320) = v65 + 296;
  int v22 = *(unsigned __int8 *)(v7 + 319);
  if ((v22 & 0x80) != 0)
  {
    uint64_t v25 = *(void *)(v7 + 304);
    if (v25 != 8)
    {
      if (v25 != 10
        || (*(void *)*v9 == 0x6C66726F736E6574 ? (BOOL v50 = *((unsigned __int16 *)*v9 + 4) == 30575) : (BOOL v50 = 0), !v50))
      {
LABEL_112:
        exceptiounint64_t n = __cxa_allocate_exception(0x10uLL);
        StringFormatter::StringFormatter((StringFormatter *)&buf, "Only Tensorflow and Espresso framework are supported.");
        MEMORY[0x210558D40](exception, &buf);
        __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
      }
LABEL_107:
      if (Diagnostics_GetLogObject(void)::onceToken != -1) {
        dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
      }
      uint64_t v51 = Diagnostics_GetLogObject(void)::__profile_log_default;
      if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(buf.__r_.__value_.__l.__data_) = 0;
        _os_log_impl(&dword_20CD80000, v51, OS_LOG_TYPE_DEFAULT, "Using Tensorflow inference.", (uint8_t *)&buf, 2u);
      }
      Diagnostics::log(5, "Using Tensorflow inference.", v52);
      std::string::size_type v53 = __cxa_allocate_exception(0x10uLL);
      StringFormatter::StringFormatter((StringFormatter *)&buf, "Tensorflow is not enabled.");
      MEMORY[0x210558D40](v53, &buf);
      __cxa_throw(v53, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
    }
    float v23 = *v9;
  }
  else
  {
    float v23 = (void *)(v7 + 296);
    if (v22 != 8)
    {
      if (v22 != 10) {
        goto LABEL_112;
      }
      if (*v9 != (void *)0x6C66726F736E6574 || *(_WORD *)(v7 + 304) != 30575) {
        goto LABEL_112;
      }
      goto LABEL_107;
    }
  }
  if (*v23 != 0x6F73736572707365) {
    goto LABEL_112;
  }
  char v26 = operator new(0xB0uLL);
  uint64_t v27 = v26;
  v26[1] = 0;
  v26[2] = 0;
  *char v26 = off_26C218318;
  std::string::size_type v28 = v26 + 3;
  if (*((void *)&v63 + 1))
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v63 + 1) + 8), 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v63 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  v26[4] = 0;
  std::chrono::steady_clock::time_point v29 = (void **)(v26 + 4);
  v26[3] = &unk_26C203848;
  v26[5] = 0;
  v26[6] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v72, "id");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_20D5A22AE, a2, (const void **)&v72, &buf);
  if (*((char *)v27 + 55) < 0) {
    operator delete(*v29);
  }
  *(_OWORD *)std::chrono::steady_clock::time_point v29 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
  v27[6] = *((void *)&buf.__r_.__value_.__l + 2);
  *((unsigned char *)&buf.__r_.__value_.__s + 23) = 0;
  buf.__r_.__value_.__s.__data_[0] = 0;
  if (v74 < 0) {
    operator delete(v72);
  }
  if (*((void *)&v63 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v63 + 1));
  }
  v27[3] = &off_26C204E48;
  uint64_t v56 = (void **)(v27 + 7);
  std::string::basic_string[abi:ne180100]<0>(v27 + 7, "input_ids");
  uint64_t v30 = (void **)(v27 + 10);
  std::string::basic_string[abi:ne180100]<0>(v27 + 10, "input_length");
  std::string::size_type v55 = v28;
  std::string::size_type v31 = (void **)(v27 + 13);
  std::string::basic_string[abi:ne180100]<0>(v27 + 13, "input_type_ids");
  std::string::size_type v32 = (void **)(v27 + 16);
  std::string::basic_string[abi:ne180100]<0>(v27 + 16, "bert/encoder/Reshape_13");
  if (*((void *)&v63 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v63 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  PersistentModuleFactory::get_persistent_module_from_pool<WordEmbeddingPersistentModule>(&v72, (long long *)v27 + 2, v11);
  if (*((void *)&v63 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v63 + 1));
  }
  std::chrono::steady_clock::time_point v34 = v72[42];
  unint64_t v33 = v72[43];
  if (v33) {
    atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  long long v35 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_20CD80000, v35, OS_LOG_TYPE_DEFAULT, "Create Espresso WordEmbedding inference module.", (uint8_t *)&buf, 2u);
  }
  Diagnostics::log(5, "Create Espresso WordEmbedding inference module.", v36);
  uint64_t v37 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "graph_input_input_ids_name");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v37, &buf);
  if (*((char *)v27 + 79) < 0) {
    operator delete(*v56);
  }
  *(_OWORD *)uint64_t v56 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
  v27[9] = *((void *)&buf.__r_.__value_.__l + 2);
  uint64_t v38 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "graph_input_input_mask_name");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v38, &buf);
  if (*((char *)v27 + 103) < 0) {
    operator delete(*v30);
  }
  *(_OWORD *)uint64_t v30 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
  v27[12] = *((void *)&buf.__r_.__value_.__l + 2);
  uint64_t v39 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "graph_input_input_type_ids_name");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v39, &buf);
  if (*((char *)v27 + 127) < 0) {
    operator delete(*v31);
  }
  *(_OWORD *)std::string::size_type v31 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
  v27[15] = *((void *)&buf.__r_.__value_.__l + 2);
  uint64_t v40 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "graph_output_name");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v40, &buf);
  if (*((char *)v27 + 151) < 0) {
    operator delete(*v32);
  }
  *(_OWORD *)std::string::size_type v32 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
  v27[18] = *((void *)&buf.__r_.__value_.__l + 2);
  v27[20] = &v34->__shared_weak_owners_;
  v27[21] = v34 + 1;
  v27[19] = v34;
  if (v33) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
  }
  if (v73) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v73);
  }
  if (*((void *)&v63 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v63 + 1));
  }
  *(void *)&long long v41 = v55;
  *((void *)&v41 + 1) = v27;
  uint64_t v42 = *(std::__shared_weak_count **)(v7 + 432);
  *(_OWORD *)(v7 + 4++*(_DWORD *)(result + 24) = v41;
  if (v42) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v42);
  }
  if (v66) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v66);
  }
  if (v68 < 0) {
    operator delete(__p[0]);
  }
  if (v70) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v70);
  }
  if (*((void *)&v63 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v63 + 1));
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  uint64_t v43 = (std::string::size_type *)(a1 + 8);
  std::string::size_type v44 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    std::string::size_type v45 = a1 + 8;
    if (*(char *)(a1 + 31) < 0) {
      std::string::size_type v45 = *v43;
    }
    v46.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v45;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
    *(double *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (double)((v46.__d_.__rep_ - v58.__d_.__rep_) / 1000000)
                                                               / 1000.0;
    _os_log_impl(&dword_20CD80000, v44, OS_LOG_TYPE_INFO, "Init latency (%s): %.3f s", (uint8_t *)&buf, 0x16u);
  }
  if (*(char *)(a1 + 31) < 0) {
    uint64_t v43 = (std::string::size_type *)*v43;
  }
  v47.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "Init latency (%s): %.3f s", v48, v43, (double)((v47.__d_.__rep_ - v58.__d_.__rep_) / 1000000) / 1000.0, &unk_26C203848, v7 + 296, v7 + 328);
  if (*((void *)&v63 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v63 + 1));
  }
  result.n128_u64[0] = v59;
  result.n128_u64[1] = v7;
  *uint64_t v64 = result;
  return result;
}

void sub_20D44F8CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, Module *a18, std::__shared_weak_count *a19, void **a20,void **a21,void **a22,long long a23,uint64_t a24,uint64_t a25,std::__shared_weak_count *a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,std::__shared_weak_count *a34)
{
  if (*(char *)(v37 - 105) < 0)
  {
    operator delete(*(void **)(v37 - 128));
    if ((v35 & 1) == 0)
    {
LABEL_6:
      if (a26) {
        std::__shared_weak_count::__release_shared[abi:ne180100](a26);
      }
      if (a32 < 0) {
        operator delete(__p);
      }
      if (a34) {
        std::__shared_weak_count::__release_shared[abi:ne180100](a34);
      }
      uint64_t v39 = *(std::__shared_weak_count **)(v34 + 432);
      if (v39) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v39);
      }
      if (*(char *)(v34 + 423) < 0) {
        operator delete(*a21);
      }
      if (*(char *)(v34 + 399) < 0) {
        operator delete(*a22);
      }
      if (*(char *)(v34 + 375) < 0) {
        operator delete(*a20);
      }
      std::__tree<std::string>::destroy(a13, *(char **)(v34 + 336));
      if (*(char *)(v34 + 319) < 0) {
        operator delete(*a12);
      }
      Module::~Module(a18);
      if (a19) {
        std::__shared_weak_count::__release_shared[abi:ne180100](a19);
      }
      std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v34);
      operator delete(v40);
      if (a19) {
        std::__shared_weak_count::__release_shared[abi:ne180100](a19);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v35)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v36);
  goto LABEL_6;
}

uint64_t std::__shared_ptr_emplace<WordEmbeddingModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<WordEmbeddingModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C216E88;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<WordEmbeddingModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C216E88;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<WordEmbeddingModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<WordEmbeddingModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0) {
    operator delete(__p[1]);
  }
  operator delete(__p);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<WordEmbeddingModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<WordEmbeddingModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<WordEmbeddingModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<WordEmbeddingModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, void *a2)
{
  *a2 = off_26C211E10;
  uint64_t v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void *std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<WordEmbeddingModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<WordEmbeddingModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  void *v2 = off_26C211E10;
  long long v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(void *)(a1 + 24);
  }
  return v2;
}

void sub_20D44FD3C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<WordEmbeddingModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<WordEmbeddingModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C211E10;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x2105595E0);
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<WordEmbeddingModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<WordEmbeddingModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C211E10;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

char **std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<NeuralPromptModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<NeuralPromptModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<NeuralPromptModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<NeuralPromptModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

__n128 std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<NeuralPromptModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<NeuralPromptModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, char *a2@<X1>, long long *a3@<X2>, __n128 *a4@<X8>)
{
  v42[3] = *MEMORY[0x263EF8340];
  long long v25 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  v27.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  unint64_t v7 = (int32x2_t *)operator new(0x178uLL);
  unint64_t v8 = v7;
  v7[1] = 0;
  v7[2] = 0;
  int32x2_t *v7 = (int32x2_t)off_26C216BB0;
  unint64_t v9 = (unint64_t)&v7[3];
  if (*((void *)&v25 + 1))
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v25 + 1) + 8), 1uLL, memory_order_relaxed);
    long long v35 = v25;
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v25 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  else
  {
    long long v35 = (unint64_t)v25;
  }
  Module::Module((uint64_t)&v7[3], a2, (uint64_t *)&v35);
  if (*((void *)&v35 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v35 + 1));
  }
  v8[3] = (int32x2_t)off_26C202490;
  v8[39] = (int32x2_t)&v8[40];
  v8[40] = 0;
  char v26 = v8 + 40;
  __int16 v24 = v8 + 42;
  unint64_t v10 = v8 + 43;
  v8[43] = 0;
  v8[44] = 0;
  v8[41] = 0;
  v8[42] = (int32x2_t)&v8[43];
  v8[45] = vdup_n_s32(0x42C80000u);
  v8[46].i32[0] = 1117782016;
  std::string::basic_string[abi:ne180100]<0>(__p, "sample_rate");
  LODWORD(v32) = 48000;
  v8[37].i32[0] = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>(a2, (const void **)__p, (unsigned int *)&v32);
  if (v39 < 0) {
    operator delete(*(void **)__p);
  }
  std::string::basic_string[abi:ne180100]<0>(v30, "partial_match_skip_puncs");
  std::string::basic_string[abi:ne180100]<0>(__p, " ");
  std::string::basic_string[abi:ne180100]<0>(v40, "-");
  std::set<std::string>::set[abi:ne180100]((uint64_t)&v28, (const void **)__p, 2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<std::set<std::string>,0>((uint64_t)&v32, (unsigned __int8 *)a2, (const void **)v30, &v28);
  std::__tree<std::string>::destroy((uint64_t)&v8[39], *(char **)&v8[40]);
  int32x2_t v11 = v33;
  v8[39] = (int32x2_t)v32;
  v8[40] = v11;
  int32x2_t v12 = v34;
  v8[41] = v34;
  if (v12)
  {
    *(void *)(*(void *)&v11 + 16) = v26;
    std::string::size_type v32 = &v33;
    int32x2_t v33 = 0;
    int32x2_t v34 = 0;
    int32x2_t v11 = 0;
  }
  else
  {
    v8[39] = (int32x2_t)v26;
  }
  uint64_t v13 = (void *)(a1 + 8);
  std::__tree<std::string>::destroy((uint64_t)&v32, *(char **)&v11);
  std::__tree<std::string>::destroy((uint64_t)&v28, v29);
  for (uint64_t i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v40[i + 2]) < 0) {
      operator delete((void *)v40[i]);
    }
  }
  if (v31 < 0) {
    operator delete(v30[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v30, "partial_match_trigger_puncs");
  std::string::basic_string[abi:ne180100]<0>(__p, ",");
  std::string::basic_string[abi:ne180100]<0>(v40, ".");
  std::string::basic_string[abi:ne180100]<0>(v41, "?");
  std::string::basic_string[abi:ne180100]<0>(v42, "!");
  std::set<std::string>::set[abi:ne180100]((uint64_t)&v28, (const void **)__p, 4);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<std::set<std::string>,0>((uint64_t)&v32, (unsigned __int8 *)a2, (const void **)v30, &v28);
  std::__tree<std::string>::destroy((uint64_t)v24, *(char **)&v8[43]);
  int32x2_t v15 = v33;
  v8[42] = (int32x2_t)v32;
  v8[43] = v15;
  int32x2_t v16 = v34;
  v8[44] = v34;
  if (v16)
  {
    *(void *)(*(void *)&v15 + 16) = v10;
    std::string::size_type v32 = &v33;
    int32x2_t v33 = 0;
    int32x2_t v34 = 0;
    int32x2_t v15 = 0;
  }
  else
  {
    int32x2_t *v24 = (int32x2_t)v10;
  }
  std::__tree<std::string>::destroy((uint64_t)&v32, *(char **)&v15);
  std::__tree<std::string>::destroy((uint64_t)&v28, v29);
  for (uint64_t j = 0; j != -12; j -= 3)
  {
    if (SHIBYTE(v42[j + 2]) < 0) {
      operator delete((void *)v42[j]);
    }
  }
  if (v31 < 0) {
    operator delete(v30[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "spelling_pause_ms");
  LODWORD(v32) = 200;
  v8[37].i32[1] = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>(a2, (const void **)__p, (unsigned int *)&v32);
  if (v39 < 0) {
    operator delete(*(void **)__p);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "partial_match");
  LOBYTE(v32) = 0;
  v8[38].i8[0] = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<BOOL,0>(a2, (const void **)__p, (unsigned __int8 *)&v32);
  if (v39 < 0) {
    operator delete(*(void **)__p);
  }
  if (*((void *)&v25 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v25 + 1));
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  float v18 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    uint64_t v19 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      uint64_t v19 = (void *)*v13;
    }
    v20.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    *(_DWORD *)std::string __p = 136315394;
    *(void *)&__p[4] = v19;
    __int16 v37 = 2048;
    double v38 = (double)((v20.__d_.__rep_ - v27.__d_.__rep_) / 1000000) / 1000.0;
    _os_log_impl(&dword_20CD80000, v18, OS_LOG_TYPE_INFO, "Init latency (%s): %.3f s", __p, 0x16u);
  }
  if (*(char *)(a1 + 31) < 0) {
    uint64_t v13 = (void *)*v13;
  }
  v21.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "Init latency (%s): %.3f s", v22, v13, (double)((v21.__d_.__rep_ - v27.__d_.__rep_) / 1000000) / 1000.0, &v8[39]);
  if (*((void *)&v25 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v25 + 1));
  }
  result.n128_u64[0] = v9;
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_20D45038C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, long long a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a34 < 0) {
    operator delete(__p);
  }
  std::__tree<std::string>::destroy(a12, *v37);
  std::__tree<std::string>::destroy(a11, *(char **)a13);
  Module::~Module(v36);
  if (v35) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v35);
  }
  std::__shared_weak_count::~__shared_weak_count(v34);
  operator delete(v39);
  if (v35) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v35);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<NeuralPromptModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<NeuralPromptModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C216BB0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<NeuralPromptModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C216BB0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<NeuralPromptModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<NeuralPromptModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0) {
    operator delete(__p[1]);
  }
  operator delete(__p);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<NeuralPromptModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<NeuralPromptModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<NeuralPromptModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<NeuralPromptModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, void *a2)
{
  *a2 = off_26C211CB0;
  uint64_t v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void *std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<NeuralPromptModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<NeuralPromptModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  void *v2 = off_26C211CB0;
  long long v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(void *)(a1 + 24);
  }
  return v2;
}

void sub_20D4506C8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<NeuralPromptModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<NeuralPromptModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C211CB0;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x2105595E0);
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<NeuralPromptModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<NeuralPromptModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C211CB0;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

char **std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<PhoneTransformModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<PhoneTransformModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<PhoneTransformModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<PhoneTransformModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

__n128 std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<PhoneTransformModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<PhoneTransformModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, char *a2@<X1>, long long *a3@<X2>, __n128 *a4@<X8>)
{
  uint64_t v85 = *MEMORY[0x263EF8340];
  long long v68 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  v5.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  std::chrono::steady_clock::time_point v6 = operator new(0x1C0uLL);
  unint64_t v7 = (unint64_t)v6;
  v6[1] = 0;
  v6[2] = 0;
  void *v6 = off_26C216FA0;
  unint64_t v8 = v6 + 3;
  if (*((void *)&v68 + 1))
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v68 + 1) + 8), 1uLL, memory_order_relaxed);
    long long v75 = v68;
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v68 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  else
  {
    long long v75 = (unint64_t)v68;
  }
  Module::Module((uint64_t)(v6 + 3), a2, (uint64_t *)&v75);
  if (*((void *)&v75 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v75 + 1));
  }
  *(void *)(v7 + ++*(_DWORD *)(result + 24) = off_26C202C70;
  unint64_t v9 = (unint64_t *)(v7 + 296);
  *(void *)(v7 + 304) = 0;
  *(void *)(v7 + 312) = 0;
  *(void *)(v7 + 296) = v7 + 304;
  unint64_t v10 = (void **)(v7 + 320);
  std::chrono::steady_clock::time_point v67 = (unint64_t *)(v7 + 400);
  uint64_t v69 = (void **)(v7 + 368);
  *(void *)(v7 + 416) = 0;
  *(void *)(v7 + 4++*(_DWORD *)(result + 24) = 0;
  *(_OWORD *)(v7 + 320) = 0u;
  *(_OWORD *)(v7 + 336) = 0u;
  *(_OWORD *)(v7 + 352) = 0u;
  *(_OWORD *)(v7 + 368) = 0u;
  *(void *)(v7 + 384) = 0;
  *(void *)(v7 + 400) = v7 + 408;
  *(void *)(v7 + 408) = 0;
  uint64_t v65 = (std::vector<std::string> *)(v7 + 344);
  unint64_t v66 = v7 + 408;
  *(void *)(v7 + 432) = 0;
  *(void *)(v7 + 440) = 0;
  uint64_t v11 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "phone_map");
  int32x2_t v12 = (unsigned __int8 *)v11;
  std::string v73 = 0;
  uint64_t v74 = 0;
  unint64_t v72 = (uint64_t *)&v73;
  if (*(unsigned char *)v11 != 1)
  {
    exceptiounint64_t n = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    unint64_t v56 = *v12;
    if (v56 > 9) {
      int64x2_t v57 = "number";
    }
    else {
      int64x2_t v57 = off_2641152A0[v56];
    }
    std::chrono::steady_clock::time_point v58 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v79, v57);
    unint64_t v59 = std::string::insert(v58, 0, "type must be object, but is ");
    long long v60 = *(_OWORD *)&v59->__r_.__value_.__l.__data_;
    v83.__r_.__value_.__r.__words[2] = v59->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v83.__r_.__value_.__l.__data_ = v60;
    v59->__r_.__value_.__l.__size_ = 0;
    v59->__r_.__value_.__r.__words[2] = 0;
    v59->__r_.__value_.__r.__words[0] = 0;
    nlohmann::detail::type_error::create(302, (uint64_t)&v83, exception);
  }
  uint64_t v61 = a4;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep = v5.__d_.__rep_;
  unint64_t v63 = v7 + 304;
  unint64_t v64 = (unint64_t)v8;
  std::chrono::steady_clock::time_point v77 = 0;
  uint64_t v78 = 0;
  uint64_t v76 = (uint64_t *)&v77;
  uint64_t v13 = *(void **)(v11 + 8);
  int32x2_t v16 = (void *)*v13;
  uint64_t v14 = v13 + 1;
  int32x2_t v15 = v16;
  if (v16 != v14)
  {
    std::vector<std::string>::pointer v17 = (std::vector<std::string>::pointer)&v77;
    while (1)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::vector<std::string>,std::vector<std::string>,0>(&v79, (unsigned __int8 *)v15 + 56);
      if (*((char *)v15 + 55) < 0) {
        std::string::__init_copy_ctor_external(&v83, (const std::string::value_type *)v15[4], v15[5]);
      }
      else {
        std::string v83 = *(std::string *)(v15 + 4);
      }
      std::vector<std::string> v84 = v79;
      memset(&v79, 0, sizeof(v79));
      double v82 = &v79;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v82);
      if (&v77 == (void **)v17
        || std::less<std::string>::operator()[abi:ne180100]((uint64_t)&v78, (const void **)&v83.__r_.__value_.__l.__data_, (const void **)&v17[1].__r_.__value_.__l.__size_))
      {
        break;
      }
      if (std::less<std::string>::operator()[abi:ne180100]((uint64_t)&v78, (const void **)&v17[1].__r_.__value_.__l.__size_, (const void **)&v83.__r_.__value_.__l.__data_))
      {
        std::string::size_type size = (void *)v17->__r_.__value_.__l.__size_;
        float v23 = size;
        uint64_t v24 = (uint64_t)v17;
        if (size)
        {
          do
          {
            uint64_t v25 = (uint64_t)v23;
            float v23 = (void *)*v23;
          }
          while (v23);
        }
        else
        {
          do
          {
            uint64_t v25 = *(void *)(v24 + 16);
            BOOL v21 = *(void *)v25 == v24;
            uint64_t v24 = v25;
          }
          while (!v21);
        }
        if ((void **)v25 == &v77)
        {
LABEL_31:
          if (size)
          {
            uint64_t v81 = v25;
            std::vector<std::string>::pointer v17 = (std::vector<std::string>::pointer)v25;
          }
          else
          {
            uint64_t v81 = (uint64_t)v17;
            std::vector<std::string>::pointer v17 = (std::vector<std::string>::pointer)((char *)v17 + 8);
          }
        }
        else
        {
          if (std::less<std::string>::operator()[abi:ne180100]((uint64_t)&v78, (const void **)&v83.__r_.__value_.__l.__data_, (const void **)(v25 + 32)))
          {
            std::string::size_type size = (void *)v17->__r_.__value_.__l.__size_;
            goto LABEL_31;
          }
LABEL_33:
          std::vector<std::string>::pointer v17 = (std::vector<std::string>::pointer)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__find_equal<std::string>((uint64_t)&v76, &v81, (const void **)&v83.__r_.__value_.__l.__data_);
        }
LABEL_35:
        char v26 = (uint64_t **)v17;
        std::vector<std::string>::pointer v17 = (std::vector<std::string>::pointer)v17->__r_.__value_.__r.__words[0];
        if (!v17) {
          goto LABEL_36;
        }
        goto LABEL_42;
      }
      std::vector<std::string>::pointer v80 = v17;
      uint64_t v81 = (uint64_t)v17;
      char v26 = (uint64_t **)&v80;
      if (!v17)
      {
LABEL_36:
        std::chrono::steady_clock::time_point v27 = (char *)operator new(0x50uLL);
        v79.__begin_ = (std::vector<std::string>::pointer)v27;
        v79.__end_ = (std::vector<std::string>::pointer)&v77;
        LOBYTE(v79.__end_cap_.__value_) = 0;
        std::string::size_type v28 = (std::string *)(v27 + 32);
        if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(v28, v83.__r_.__value_.__l.__data_, v83.__r_.__value_.__l.__size_);
          std::vector<std::string>::pointer begin = v79.__begin_;
        }
        else
        {
          *(_OWORD *)&v28->__r_.__value_.__l.__data_ = *(_OWORD *)&v83.__r_.__value_.__l.__data_;
          *((void *)v27 + 6) = *((void *)&v83.__r_.__value_.__l + 2);
          std::vector<std::string>::pointer begin = (std::vector<std::string>::pointer)v27;
        }
        *(std::vector<std::string> *)(v27 + 56) = v84;
        memset(&v84, 0, sizeof(v84));
        LOBYTE(v79.__end_cap_.__value_) = 1;
        std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__insert_node_at(&v76, v81, v26, (uint64_t *)begin);
        std::vector<std::string>::pointer v17 = v79.__begin_;
        v79.__begin_ = 0;
        std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::string>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v79, 0);
      }
LABEL_42:
      uint64_t v30 = (std::string *)v17->__r_.__value_.__l.__size_;
      std::vector<std::string>::pointer v31 = v17;
      if (v30)
      {
        do
        {
          std::vector<std::string>::pointer v17 = v30;
          uint64_t v30 = (std::string *)v30->__r_.__value_.__r.__words[0];
        }
        while (v30);
      }
      else
      {
        do
        {
          std::vector<std::string>::pointer v17 = (std::vector<std::string>::pointer)v31->__r_.__value_.__r.__words[2];
          BOOL v21 = v17->__r_.__value_.__r.__words[0] == (void)v31;
          std::vector<std::string>::pointer v31 = v17;
        }
        while (!v21);
      }
      v79.__begin_ = (std::vector<std::string>::pointer)&v84;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v79);
      if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v83.__r_.__value_.__l.__data_);
      }
      std::string::size_type v32 = (void *)v15[1];
      if (v32)
      {
        do
        {
          int32x2_t v33 = v32;
          std::string::size_type v32 = (void *)*v32;
        }
        while (v32);
      }
      else
      {
        do
        {
          int32x2_t v33 = (void *)v15[2];
          BOOL v21 = *v33 == (void)v15;
          int32x2_t v15 = v33;
        }
        while (!v21);
      }
      int32x2_t v15 = v33;
      if (v33 == v14)
      {
        int32x2_t v34 = v73;
        unint64_t v9 = (unint64_t *)(v7 + 296);
        unint64_t v10 = (void **)(v7 + 320);
        goto LABEL_58;
      }
    }
    uint64_t v18 = (uint64_t)v17;
    if (v76 != (uint64_t *)v17)
    {
      uint64_t v19 = v17->__r_.__value_.__r.__words[0];
      uint64_t v20 = (uint64_t)v17;
      if (v17->__r_.__value_.__r.__words[0])
      {
        do
        {
          uint64_t v18 = v19;
          uint64_t v19 = *(void *)(v19 + 8);
        }
        while (v19);
      }
      else
      {
        do
        {
          uint64_t v18 = *(void *)(v20 + 16);
          BOOL v21 = *(void *)v18 == v20;
          uint64_t v20 = v18;
        }
        while (v21);
      }
      if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)&v78, (const void **)(v18 + 32), (const void **)&v83.__r_.__value_.__l.__data_))goto LABEL_33; {
    }
      }
    if (v17->__r_.__value_.__r.__words[0])
    {
      uint64_t v81 = v18;
      std::vector<std::string>::pointer v17 = (std::vector<std::string>::pointer)(v18 + 8);
    }
    else
    {
      uint64_t v81 = (uint64_t)v17;
    }
    goto LABEL_35;
  }
  int32x2_t v34 = 0;
LABEL_58:
  std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::destroy((uint64_t)&v72, v34);
  long long v35 = v77;
  unint64_t v72 = v76;
  std::string v73 = v77;
  uint64_t v74 = v78;
  uint64_t v36 = a1;
  if (v78)
  {
    int v77[2] = &v73;
    uint64_t v76 = (uint64_t *)&v77;
    std::chrono::steady_clock::time_point v77 = 0;
    uint64_t v78 = 0;
    long long v35 = 0;
  }
  else
  {
    unint64_t v72 = (uint64_t *)&v73;
  }
  std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::destroy((uint64_t)&v76, v35);
  std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::destroy((uint64_t)v9, *(void **)(v7 + 304));
  __int16 v37 = v73;
  *(void *)(v7 + 296) = v72;
  *(void *)(v7 + 304) = v37;
  uint64_t v38 = v74;
  *(void *)(v7 + 312) = v74;
  if (v38)
  {
    v37[2] = v63;
    unint64_t v72 = (uint64_t *)&v73;
    std::string v73 = 0;
    uint64_t v74 = 0;
    __int16 v37 = 0;
  }
  else
  {
    unint64_t *v9 = v63;
  }
  std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::destroy((uint64_t)&v72, v37);
  uint64_t v39 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "mapping_level");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v39, &v83);
  if (*(char *)(v7 + 343) < 0) {
    operator delete(*v10);
  }
  *(std::string *)unint64_t v10 = v83;
  uint64_t v40 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "stressable_phones");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::vector<std::string>,std::vector<std::string>,0>((std::vector<std::string> *)&v83, v40);
  std::vector<std::string>::__vdeallocate(v65);
  *(_OWORD *)&v65->__begin_ = *(_OWORD *)&v83.__r_.__value_.__l.__data_;
  *(void *)(v7 + 360) = *((void *)&v83.__r_.__value_.__l + 2);
  memset(&v83, 0, sizeof(v83));
  v79.__begin_ = &v83;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v79);
  std::string::basic_string[abi:ne180100]<0>(&v79, "stress_marker");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_20D5A22AE, a2, (const void **)&v79.__begin_, &v83);
  if (*(char *)(v7 + 391) < 0) {
    operator delete(*v69);
  }
  *(_OWORD *)uint64_t v69 = *(_OWORD *)&v83.__r_.__value_.__l.__data_;
  *(void *)(v7 + 384) = *((void *)&v83.__r_.__value_.__l + 2);
  *((unsigned char *)&v83.__r_.__value_.__s + 23) = 0;
  v83.__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(v79.__end_cap_.__value_) < 0) {
    operator delete(v79.__begin_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v83, "multilingual_phone");
  LOBYTE(v79.__begin_) = 0;
  *(unsigned char *)(v7 + 392) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<BOOL,0>(a2, (const void **)&v83.__r_.__value_.__l.__data_, (unsigned __int8 *)&v79);
  if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v83.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v83, "embedded_lang");
  LOBYTE(v79.__begin_) = 0;
  *(unsigned char *)(v7 + 393) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<BOOL,0>(a2, (const void **)&v83.__r_.__value_.__l.__data_, (unsigned __int8 *)&v79);
  if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v83.__r_.__value_.__l.__data_);
  }
  if (!*(unsigned char *)(v7 + 392)) {
    goto LABEL_83;
  }
  long long v41 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "phone_map_on_lang");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::map<std::string,std::string>,std::map<std::string,std::string>,0>(&v83, v41);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v67, *(void **)(v7 + 408));
  uint64_t v42 = (void *)v83.__r_.__value_.__l.__size_;
  *(void *)(v7 + 400) = v83.__r_.__value_.__r.__words[0];
  *(void *)(v7 + 408) = v42;
  std::string::size_type v43 = v83.__r_.__value_.__r.__words[2];
  *(void *)(v7 + 416) = *((void *)&v83.__r_.__value_.__l + 2);
  if (v43)
  {
    v42[2] = v66;
    v83.__r_.__value_.__r.__words[0] = (std::string::size_type)&v83.__r_.__value_.__l.__size_;
    *(_OWORD *)&v83.__r_.__value_.__r.__words[1] = 0uLL;
    uint64_t v42 = 0;
  }
  else
  {
    *std::chrono::steady_clock::time_point v67 = v66;
  }
  uint64_t v36 = a1;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v83, v42);
  if (!*(void *)(v7 + 416))
  {
LABEL_83:
    if (!*((void *)&v68 + 1)) {
      goto LABEL_85;
    }
    goto LABEL_84;
  }
  std::string::basic_string[abi:ne180100]<0>(&v83, "default");
  uint64_t v44 = std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>((uint64_t)v67, (const void **)&v83.__r_.__value_.__l.__data_);
  if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v83.__r_.__value_.__l.__data_);
  }
  if (v66 != v44)
  {
    std::string::operator=((std::string *)(v7 + 424), (const std::string *)(v44 + 56));
    goto LABEL_83;
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  std::string::size_type v53 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(v83.__r_.__value_.__l.__data_) = 0;
  }
  if (*((void *)&v68 + 1)) {
LABEL_84:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v68 + 1));
LABEL_85:
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  std::string::size_type v45 = (std::string::size_type *)(v36 + 8);
  std::chrono::steady_clock::time_point v46 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    int v47 = *(char *)(v36 + 31);
    std::string::size_type v48 = v36 + 8;
    if (v47 < 0) {
      std::string::size_type v48 = *v45;
    }
    v49.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    LODWORD(v83.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)v83.__r_.__value_.__r.__words + 4) = v48;
    WORD2(v83.__r_.__value_.__r.__words[1]) = 2048;
    *(double *)((char *)&v83.__r_.__value_.__r.__words[1] + 6) = (double)((v49.__d_.__rep_ - rep) / 1000000) / 1000.0;
    _os_log_impl(&dword_20CD80000, v46, OS_LOG_TYPE_INFO, "Init latency (%s): %.3f s", (uint8_t *)&v83, 0x16u);
    uint64_t v36 = a1;
  }
  if (*(char *)(v36 + 31) < 0) {
    std::string::size_type v45 = (std::string::size_type *)*v45;
  }
  v50.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "Init latency (%s): %.3f s", v51, v45, (double)((v50.__d_.__rep_ - rep) / 1000000) / 1000.0);
  if (*((void *)&v68 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v68 + 1));
  }
  result.n128_u64[0] = v64;
  result.n128_u64[1] = v7;
  __n128 *v61 = result;
  return result;
}

void sub_20D45118C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, uint64_t a13, void **a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void **a20,uint64_t a21,uint64_t a22,void **a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void **a34)
{
  if (*(char *)(v34 + 447) < 0) {
    operator delete(*a11);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a22, *(void **)(v34 + 408));
  if (*(char *)(v34 + 391) < 0) {
    operator delete(*a23);
  }
  a34 = a20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a34);
  if (*(char *)(v34 + 343) < 0) {
    operator delete(*a14);
  }
  std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::destroy(v35, *v38);
  Module::~Module(v37);
  if (v36) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v36);
  }
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v34);
  operator delete(v40);
  if (v36) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v36);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<PhoneTransformModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<PhoneTransformModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C216FA0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<PhoneTransformModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C216FA0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<PhoneTransformModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<PhoneTransformModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0) {
    operator delete(__p[1]);
  }
  operator delete(__p);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<PhoneTransformModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<PhoneTransformModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<PhoneTransformModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<PhoneTransformModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, void *a2)
{
  *a2 = off_26C211E68;
  uint64_t v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void *std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<PhoneTransformModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<PhoneTransformModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  void *v2 = off_26C211E68;
  long long v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(void *)(a1 + 24);
  }
  return v2;
}

void sub_20D45153C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<PhoneTransformModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<PhoneTransformModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C211E68;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x2105595E0);
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<PhoneTransformModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<PhoneTransformModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C211E68;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

char **std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<ClickDetectorModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<ClickDetectorModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<ClickDetectorModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<ClickDetectorModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<ClickDetectorModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<ClickDetectorModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()(uint64_t a1@<X0>, char *a2@<X1>, long long *a3@<X2>, _OWORD *a4@<X8>)
{
  uint64_t v66 = *MEMORY[0x263EF8340];
  long long v58 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  v6.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  unint64_t v7 = operator new(0x138uLL);
  v7[1] = 0;
  v7[2] = 0;
  void *v7 = off_26C216D38;
  unint64_t v8 = (std::__shared_weak_count *)*((void *)&v58 + 1);
  if (*((void *)&v58 + 1))
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v58 + 1) + 8), 1uLL, memory_order_relaxed);
    long long v60 = v58;
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v58 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  else
  {
    long long v60 = (unint64_t)v58;
  }
  Module::Module((uint64_t)(v7 + 3), a2, (uint64_t *)&v60);
  if (*((void *)&v60 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v60 + 1));
  }
  v7[3] = off_26C202740;
  v7[37] = 0;
  v7[38] = 0;
  std::string::basic_string[abi:ne180100]<0>(buf, "threshold");
  uint64_t v61 = 0x3FD3333333333333;
  double v9 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<double,0>((unsigned __int8 *)a2, (const void **)buf, (uint64_t)&v61);
  if (v65 < 0) {
    operator delete(*(void **)buf);
  }
  std::string::basic_string[abi:ne180100]<0>(buf, "reuse_first_frame");
  LOBYTE(v61) = 1;
  BOOL v10 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<BOOL,0>(a2, (const void **)buf, (unsigned __int8 *)&v61);
  if (v65 < 0) {
    operator delete(*(void **)buf);
  }
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep = v6.__d_.__rep_;
  std::string::size_type v48 = a4;
  uint64_t v11 = (char *)operator new(0xF0uLL);
  float v12 = v9;
  *((void *)v11 + 1) = 0;
  *((void *)v11 + 2) = 0;
  *(void *)uint64_t v11 = off_26C215678;
  *((_DWORD *)v11 + 6) = -1027080192;
  *((_DWORD *)v11 + 8) = 1064849900;
  *(_OWORD *)(v11 + 36) = xmmword_20D6B4B50;
  *(_OWORD *)(v11 + 56) = 0u;
  std::chrono::steady_clock::time_point v49 = (uint64_t *)(v11 + 128);
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 72) = 0u;
  *(_OWORD *)(v11 + 88) = 0u;
  *(_OWORD *)(v11 + 104) = 0u;
  *(_OWORD *)(v11 + 120) = 0u;
  *(_OWORD *)(v11 + 136) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_OWORD *)(v11 + 184) = 0u;
  *((float *)v11 + 7) = v12;
  v11[52] = v10;
  std::vector<double>::resize((uint64_t)(v11 + 56), 0x258uLL);
  uint64_t v13 = 0;
  uint64x2_t v14 = (uint64x2_t)xmmword_20D6072C0;
  float64x2_t v53 = (float64x2_t)vdupq_n_s64(0x4082C00000000000uLL);
  float64x2_t v54 = (float64x2_t)vdupq_n_s64(0x401921FB54442D18uLL);
  uint64_t v15 = *((void *)v11 + 7);
  uint64x2_t v51 = (uint64x2_t)vdupq_n_s64(0x258uLL);
  int64x2_t v52 = vdupq_n_s64(2uLL);
  do
  {
    unsigned __int8 v57 = vmovn_s64((int64x2_t)vcgtq_u64(v51, v14)).u8[0];
    int64x2_t v59 = (int64x2_t)v14;
    v16.i64[0] = (int)v13;
    v16.i64[1] = (int)v13 + 1;
    float64x2_t __x = vdivq_f64(vmulq_f64(vcvtq_f64_s64(v16), v54), v53);
    double v56 = cos(__x.f64[1]);
    double v17 = cos(__x.f64[0]);
    if (v57) {
      *(double *)(v15 + 8 * v13) = (1.0 - v17) * 0.5;
    }
    if (vmovn_s64((int64x2_t)vcgtq_u64((uint64x2_t)vdupq_n_s64(0x258uLL), *(uint64x2_t *)&v59)).i32[1]) {
      *(double *)(v15 + 8 * v13 + 8) = (1.0 - v56) * 0.5;
    }
    v13 += 2;
    uint64x2_t v14 = (uint64x2_t)vaddq_s64(v59, v52);
  }
  while (v13 != 600);
  int v18 = *((_DWORD *)v11 + 11);
  if (v18 >= 0) {
    int v19 = *((_DWORD *)v11 + 11);
  }
  else {
    int v19 = v18 + 1;
  }
  uint64_t v20 = (char ***)MelBanks::inst_;
  std::chrono::steady_clock::time_point v46 = (uint64_t *)(a1 + 8);
  if (!MelBanks::inst_) {
LABEL_28:
  }
    operator new();
  if (*(_DWORD *)(MelBanks::inst_ + 24) != 24000
    || *(_DWORD *)(MelBanks::inst_ + 28)
    || *(_DWORD *)(MelBanks::inst_ + 32) != 12000
    || *(_DWORD *)(MelBanks::inst_ + 36) != v18
    || *(_DWORD *)(MelBanks::inst_ + 40) != (v19 >> 1) + 1
    || *(_DWORD *)(MelBanks::inst_ + 44) != *((_DWORD *)v11 + 12)
    || *(unsigned char *)(MelBanks::inst_ + 48))
  {
    *(void *)std::string buf = MelBanks::inst_;
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    MEMORY[0x2105595E0](v20, 0x1020C40F1C605A7);
    goto LABEL_28;
  }
  *((void *)v11 + 25) = MelBanks::inst_;
  if (v49 != (uint64_t *)v20)
  {
    BOOL v21 = *v20;
    uint64_t v22 = (uint64_t)v20[1];
    uint64_t v23 = *((void *)v11 + 18);
    unint64_t v24 = 0xAAAAAAAAAAAAAAABLL * ((v22 - (uint64_t)*v20) >> 3);
    uint64_t v25 = *((void *)v11 + 16);
    if (0xAAAAAAAAAAAAAAABLL * ((v23 - v25) >> 3) < v24)
    {
      if (v25)
      {
        std::vector<std::vector<int>>::__clear[abi:ne180100](v49);
        operator delete((void *)*v49);
        uint64_t v23 = 0;
        uint64_t *v49 = 0;
        *((void *)v11 + 17) = 0;
        *((void *)v11 + 18) = 0;
      }
      if (v24 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v26 = 0xAAAAAAAAAAAAAAABLL * (v23 >> 3);
      uint64_t v27 = 2 * v26;
      if (2 * v26 <= v24) {
        uint64_t v27 = v24;
      }
      if (v26 >= 0x555555555555555) {
        unint64_t v28 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v28 = v27;
      }
      std::vector<std::vector<float>>::__vallocate[abi:ne180100](v49, v28);
      std::chrono::steady_clock::time_point v29 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<double>>,std::vector<double>*,std::vector<double>*,std::vector<double>*>((uint64_t)(v11 + 144), (uint64_t)v21, v22, *((void **)v11 + 17));
      goto LABEL_42;
    }
    if (0xAAAAAAAAAAAAAAABLL * ((*((void *)v11 + 17) - v25) >> 3) < v24)
    {
      uint64_t v30 = &v21[(*((void *)v11 + 17) - v25) >> 3];
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<double> *,std::vector<double> *,std::vector<double> *>(v21, v30, v25);
      std::chrono::steady_clock::time_point v29 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<double>>,std::vector<double>*,std::vector<double>*,std::vector<double>*>((uint64_t)(v11 + 144), (uint64_t)v30, v22, *((void **)v11 + 17));
LABEL_42:
      *((void *)v11 + 17) = v29;
      goto LABEL_49;
    }
    std::vector<std::string>::pointer v31 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<double> *,std::vector<double> *,std::vector<double> *>(*v20, v20[1], v25);
    std::string::size_type v32 = (char **)*((void *)v11 + 17);
    if (v32 != v31)
    {
      int32x2_t v33 = (char **)*((void *)v11 + 17);
      do
      {
        uint64_t v35 = *(v33 - 3);
        v33 -= 3;
        uint64_t v34 = v35;
        if (v35)
        {
          *(v32 - 2) = v34;
          operator delete(v34);
        }
        std::string::size_type v32 = v33;
      }
      while (v33 != v31);
    }
    *((void *)v11 + 17) = v31;
  }
LABEL_49:
  long double v36 = log2((double)*((int *)v11 + 11));
  *((_DWORD *)v11 + 52) = (int)v36;
  *((void *)v11 + 27) = vDSP_create_fftsetupD((int)v36, 0);
  *((void *)v11 + 28) = malloc_type_malloc(8 * (*((_DWORD *)v11 + 11) / 2), 0x100004000313F17uLL);
  *((void *)v11 + 29) = malloc_type_malloc(8 * (*((_DWORD *)v11 + 11) / 2), 0x100004000313F17uLL);
  *(void *)&long long v37 = v11 + 24;
  *((void *)&v37 + 1) = v11;
  uint64_t v38 = (std::__shared_weak_count *)v7[38];
  *(_OWORD *)(v7 + 37) = v37;
  if (v38) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v38);
  }
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  uint64_t v39 = a1 + 8;
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  uint64_t v40 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    uint64_t v41 = a1 + 8;
    if (*(char *)(a1 + 31) < 0) {
      uint64_t v41 = *v46;
    }
    v42.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    *(_DWORD *)std::string buf = 136315394;
    *(void *)&uint8_t buf[4] = v41;
    __int16 buf_12 = 2048;
    double buf_14 = (double)((v42.__d_.__rep_ - rep) / 1000000) / 1000.0;
    _os_log_impl(&dword_20CD80000, v40, OS_LOG_TYPE_INFO, "Init latency (%s): %.3f s", buf, 0x16u);
  }
  if (*(char *)(a1 + 31) < 0) {
    uint64_t v39 = *v46;
  }
  v43.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "Init latency (%s): %.3f s", v44, v39, (double)((v43.__d_.__rep_ - rep) / 1000000) / 1000.0);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  *(void *)&long long v45 = v7 + 3;
  *((void *)&v45 + 1) = v7;
  *std::string::size_type v48 = v45;
}

void sub_20D452664(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18, uint64_t a19, uint64_t a20,Module *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,long long a37,uint64_t a38,uint64_t a39,void *__p,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,char a50)
{
  v51[5].__shared_weak_owners_ = v52;
  *(void *)(v54 - 200) = (char *)v51 + 176;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v54 - 200));
  *(void *)(v54 - 200) = a12;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v54 - 200));
  *(void *)(v54 - 200) = a19;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v54 - 200));
  shared_owners = (void *)v51[4].__shared_owners_;
  if (shared_owners)
  {
    v51[4].__shared_weak_owners_ = (uint64_t)shared_owners;
    operator delete(shared_owners);
  }
  unsigned __int8 v57 = (void *)v51[3].__shared_owners_;
  if (v57)
  {
    v51[3].__shared_weak_owners_ = (uint64_t)v57;
    operator delete(v57);
  }
  long long v58 = *a18;
  if (*a18)
  {
    v51[2].__shared_weak_owners_ = (uint64_t)v58;
    operator delete(v58);
  }
  std::__shared_weak_count::~__shared_weak_count(v51);
  operator delete(v59);
  shared_weak_owners = (std::__shared_weak_count *)v50[12].__shared_weak_owners_;
  if (shared_weak_owners) {
    std::__shared_weak_count::__release_shared[abi:ne180100](shared_weak_owners);
  }
  Module::~Module(a21);
  if (v53) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v53);
  }
  std::__shared_weak_count::~__shared_weak_count(v50);
  operator delete(v61);
  if (v53) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v53);
  }
  _Unwind_Resume(a1);
}

void sub_20D4528B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  *(void *)(v51 - 176) = &a51;
  JUMPOUT(0x20D4527A0);
}

uint64_t std::__shared_ptr_emplace<ClickDetectorModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ClickDetectorModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C216D38;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<ClickDetectorModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C216D38;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<ClickDetectorModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<ClickDetectorModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0) {
    operator delete(__p[1]);
  }
  operator delete(__p);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<ClickDetectorModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<ClickDetectorModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<ClickDetectorModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<ClickDetectorModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, void *a2)
{
  *a2 = off_26C211D60;
  uint64_t v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void *std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<ClickDetectorModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<ClickDetectorModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  void *v2 = off_26C211D60;
  long long v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(void *)(a1 + 24);
  }
  return v2;
}

void sub_20D452A7C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<ClickDetectorModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<ClickDetectorModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C211D60;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x2105595E0);
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<ClickDetectorModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<ClickDetectorModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C211D60;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

char **std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<ParallelNeuralAcousticModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<ParallelNeuralAcousticModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<ParallelNeuralAcousticModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<ParallelNeuralAcousticModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

__n128 std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<ParallelNeuralAcousticModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<ParallelNeuralAcousticModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long *a3@<X2>, __n128 *a4@<X8>)
{
  uint64_t v83 = *MEMORY[0x263EF8340];
  long long v72 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  v7.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  unint64_t v8 = operator new(0x210uLL);
  unint64_t v9 = (unint64_t)v8;
  v8[1] = 0;
  _OWORD v8[2] = 0;
  void *v8 = off_26C2180E8;
  BOOL v10 = v8 + 3;
  if (*((void *)&v72 + 1))
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v72 + 1) + 8), 1uLL, memory_order_relaxed);
    long long v77 = v72;
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v72 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  else
  {
    long long v77 = (unint64_t)v72;
  }
  Module::Module((uint64_t)(v8 + 3), (char *)a2, (uint64_t *)&v77);
  std::chrono::steady_clock::time_point v70 = a4;
  if (*((void *)&v77 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v77 + 1));
  }
  *(void *)(v9 + ++*(_DWORD *)(result + 24) = off_26C2049D0;
  *(void *)(v9 + 296) = 0;
  *(void *)(v9 + 304) = 0;
  *(_WORD *)(v9 + 312) = 256;
  uint64_t v11 = (void **)(v9 + 320);
  unint64_t v71 = (unint64_t)v10;
  std::string::basic_string[abi:ne180100]<0>((void *)(v9 + 320), &byte_20D5A22AE);
  float v12 = (void **)(v9 + 344);
  std::string::basic_string[abi:ne180100]<0>((void *)(v9 + 344), "default");
  *(_OWORD *)(v9 + 368) = xmmword_20D6B4B40;
  *(void *)(v9 + 384) = 0xA0000012CLL;
  *(void *)(v9 + 392) = 0x4120000000000064;
  *(unsigned char *)(v9 + 400) = 0;
  *(void *)(v9 + 408) = 850045863;
  *(_OWORD *)(v9 + 416) = 0u;
  *(_OWORD *)(v9 + 432) = 0u;
  *(_OWORD *)(v9 + 448) = 0u;
  *(_OWORD *)(v9 + 464) = 0u;
  *(_OWORD *)(v9 + 480) = 0u;
  *(_OWORD *)(v9 + 496) = 0u;
  *(_OWORD *)(v9 + 512) = 0u;
  uint64_t v13 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a2, "framework_type");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v13, &buf);
  if (*(char *)(v9 + 343) < 0) {
    operator delete(*v11);
  }
  *(_OWORD *)uint64_t v11 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
  *(void *)(v9 + 336) = *((void *)&buf.__r_.__value_.__l + 2);
  std::string::basic_string[abi:ne180100]<0>(&v80, "model_type");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value("default", (char *)a2, (const void **)&v80, &buf);
  if (*(char *)(v9 + 367) < 0) {
    operator delete(*v12);
  }
  *(_OWORD *)float v12 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
  *(void *)(v9 + 360) = *((void *)&buf.__r_.__value_.__l + 2);
  *((unsigned char *)&buf.__r_.__value_.__s + 23) = 0;
  buf.__r_.__value_.__s.__data_[0] = 0;
  if (v81 < 0) {
    operator delete((void *)v80);
  }
  std::string::basic_string[abi:ne180100]<0>(&buf, "streaming_chunk_size");
  LODWORD(v80) = 10;
  *(_DWORD *)(v9 + 388) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>((char *)a2, (const void **)&buf.__r_.__value_.__l.__data_, (unsigned int *)&v80);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&buf, "thermal_critical_streaming_chunk_size");
  LODWORD(v80) = 200;
  *(_DWORD *)(v9 + 392) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>((char *)a2, (const void **)&buf.__r_.__value_.__l.__data_, (unsigned int *)&v80);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&buf, "frame_duration");
  LODWORD(v80) = 10;
  *(_DWORD *)(v9 + 368) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>((char *)a2, (const void **)&buf.__r_.__value_.__l.__data_, (unsigned int *)&v80);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&buf, "samples_per_frame");
  LODWORD(v80) = 480;
  *(_DWORD *)(v9 + 372) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>((char *)a2, (const void **)&buf.__r_.__value_.__l.__data_, (unsigned int *)&v80);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&buf, "trim_silences");
  LOBYTE(v80) = 1;
  *(unsigned char *)(v9 + 313) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<BOOL,0>((char *)a2, (const void **)&buf.__r_.__value_.__l.__data_, (unsigned __int8 *)&v80);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&buf, "minimum_rtf_for_streaming");
  *(void *)&long long v80 = 0x4024000000000000;
  float v14 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<double,0>((unsigned __int8 *)a2, (const void **)&buf.__r_.__value_.__l.__data_, (uint64_t)&v80);
  *(float *)(v9 + 396) = v14;
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&buf, "disable_streaming_on_watch");
  LOBYTE(v80) = 0;
  *(unsigned char *)(v9 + 400) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<BOOL,0>((char *)a2, (const void **)&buf.__r_.__value_.__l.__data_, (unsigned __int8 *)&v80);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v75, a2);
  if (*(unsigned char *)a2 != 1
    || *(void *)(a2 + 8) + 8 == std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::find<char [21]>(*(void *)(a2 + 8), "frames_per_alignment"))
  {
    uint64_t v74 = (uint64_t *)*(int *)(v9 + 376);
    uint64_t v15 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)v75, "frames_per_alignment");
    int v16 = *(unsigned __int8 *)v15;
    *(unsigned char *)uint64_t v15 = 5;
    double v17 = (uint64_t *)v15[1];
    v15[1] = (uint64_t)v74;
    uint64_t v74 = v17;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v74, v16);
  }
  std::allocate_shared[abi:ne180100]<TacotronAlignment,std::allocator<TacotronAlignment>,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &,void>((uint64_t *)&buf, v75);
  int v18 = *(std::__shared_weak_count **)(v9 + 480);
  *(_OWORD *)(v9 + 472) = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  if ((*(char *)(v9 + 343) & 0x80000000) == 0)
  {
    int v19 = *(unsigned __int8 *)(v9 + 343);
    uint64_t v20 = (void *)(v9 + 320);
    if (v19 != 8)
    {
      if (v19 != 10) {
        goto LABEL_171;
      }
      if (*v11 != (void *)0x6C66726F736E6574 || *(_WORD *)(v9 + 328) != 30575) {
        goto LABEL_171;
      }
LABEL_47:
      if (Diagnostics_GetLogObject(void)::onceToken != -1) {
        dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
      }
      unint64_t v24 = Diagnostics_GetLogObject(void)::__profile_log_default;
      if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(buf.__r_.__value_.__l.__data_) = 0;
        _os_log_impl(&dword_20CD80000, v24, OS_LOG_TYPE_DEFAULT, "Using Tensorflow inference.", (uint8_t *)&buf, 2u);
      }
      Diagnostics::log(5, "Using Tensorflow inference.", v25);
      exceptiounint64_t n = __cxa_allocate_exception(0x10uLL);
      StringFormatter::StringFormatter((StringFormatter *)&buf, "Tensorflow is not enabled.");
      MEMORY[0x210558D40](exception, &buf);
      __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
    }
LABEL_53:
    if (*v20 != 0x6F73736572707365) {
      goto LABEL_171;
    }
    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    uint64_t v27 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_20CD80000, v27, OS_LOG_TYPE_DEFAULT, "Using Espresso inference.", (uint8_t *)&buf, 2u);
    }
    Diagnostics::log(5, "Using Espresso inference.", v28);
    if (*(char *)(v9 + 367) < 0)
    {
      uint64_t v31 = *(void *)(v9 + 352);
      if (v31 != 7)
      {
        if (v31 != 9)
        {
          if (v31 != 19) {
            goto LABEL_186;
          }
          uint64_t v30 = (uint64_t *)*v12;
LABEL_67:
          uint64_t v32 = *v30;
          uint64_t v33 = v30[1];
          uint64_t v34 = *(uint64_t *)((char *)v30 + 11);
          if (v32 != 0x656C70756F636564 || v33 != 0x6D61657274735F64 || v34 != 0x676E696D61657274) {
            goto LABEL_186;
          }
          long long v37 = (char *)operator new(0x4F8uLL);
          *((void *)v37 + 1) = 0;
          *((void *)v37 + 2) = 0;
          *(void *)long long v37 = off_26C218C48;
          if (*((void *)&v72 + 1))
          {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v72 + 1) + 8), 1uLL, memory_order_relaxed);
            long long v80 = v72;
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v72 + 1) + 8), 1uLL, memory_order_relaxed);
          }
          else
          {
            long long v80 = (unint64_t)v72;
          }
          EspressoParallelNeuralAMDecoupledInference::EspressoParallelNeuralAMDecoupledInference((uint64_t)(v37 + 24), (char *)a2, (uint64_t *)&v80);
          if (*((void *)&v72 + 1)) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v72 + 1));
          }
          *((void *)v37 + 3) = &off_26C205778;
          EspressoParallelNeuralAMDecoupledInference::Config::Config((uint64_t)(v37 + 768), (char *)a2);
          *((void *)v37 + 156) = 0x8000000500;
          *((_DWORD *)v37 + 314) = 128;
          std::string::basic_string[abi:ne180100]<0>(&buf, "decoder_streaming_size");
          *((_DWORD *)v37 + 312) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>((char *)a2, (const void **)&buf.__r_.__value_.__l.__data_, (unsigned int *)v37 + 312);
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(buf.__r_.__value_.__l.__data_);
          }
          std::string::basic_string[abi:ne180100]<0>(&buf, "decoder_receptive_field_front_size");
          *((_DWORD *)v37 + 313) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>((char *)a2, (const void **)&buf.__r_.__value_.__l.__data_, (unsigned int *)v37 + 313);
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(buf.__r_.__value_.__l.__data_);
          }
          std::string::basic_string[abi:ne180100]<0>(&buf, "decoder_receptive_field_rear_size");
          float64x2_t v53 = (NeuralTTSUtils *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>((char *)a2, (const void **)&buf.__r_.__value_.__l.__data_, (unsigned int *)v37 + 314);
          *((_DWORD *)v37 + 314) = v53;
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(buf.__r_.__value_.__l.__data_);
          }
          if (NeuralTTSUtils::is_amx_available(v53)) {
            *((void *)v37 + 158) = dispatch_pthread_root_queue_create();
          }
          if (*((void *)&v72 + 1)) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v72 + 1));
          }
          *(void *)&long long v43 = v37 + 24;
          goto LABEL_169;
        }
        if (*(void *)*v12 != 0x656C70756F636564 || *((unsigned char *)*v12 + 8) != 100)
        {
LABEL_186:
          unint64_t v63 = __cxa_allocate_exception(0x10uLL);
          StringFormatter::StringFormatter((StringFormatter *)&buf, "Unable to load espresso libarary.");
          MEMORY[0x210558D40](v63, &buf);
          __cxa_throw(v63, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
        }
        goto LABEL_92;
      }
      if (*(_DWORD *)*v12 != 1634100580 || *(_DWORD *)((char *)*v12 + 3) != 1953264993) {
        goto LABEL_186;
      }
    }
    else
    {
      int v29 = *(unsigned __int8 *)(v9 + 367);
      if (v29 != 7)
      {
        if (v29 != 9)
        {
          uint64_t v30 = (uint64_t *)(v9 + 344);
          if (v29 != 19) {
            goto LABEL_186;
          }
          goto LABEL_67;
        }
        if (*v12 != (void *)0x656C70756F636564 || *(unsigned char *)(v9 + 352) != 100) {
          goto LABEL_186;
        }
LABEL_92:
        uint64_t v41 = operator new(0x300uLL);
        long long v37 = (char *)v41;
        v41[1] = 0;
        v41[2] = 0;
        *uint64_t v41 = off_26C218AF8;
        std::chrono::steady_clock::time_point v42 = v41 + 3;
        *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v72;
        if (*((void *)&v72 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v72 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        EspressoParallelNeuralAMDecoupledInference::EspressoParallelNeuralAMDecoupledInference((uint64_t)(v41 + 3), (char *)a2, (uint64_t *)&buf);
        if (*((void *)&v72 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v72 + 1));
        }
        *(void *)&long long v43 = v42;
LABEL_169:
        *((void *)&v43 + 1) = v37;
        uint64_t v54 = *(std::__shared_weak_count **)(v9 + 496);
        *(_OWORD *)(v9 + 488) = v43;
        if (v54) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v54);
        }
        goto LABEL_171;
      }
      if (*(_DWORD *)v12 != 1634100580 || *(_DWORD *)(v9 + 347) != 1953264993) {
        goto LABEL_186;
      }
    }
    long long v37 = (char *)operator new(0x260uLL);
    *((void *)v37 + 1) = 0;
    *((void *)v37 + 2) = 0;
    *(void *)long long v37 = off_26C218698;
    if (*((void *)&v72 + 1))
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v72 + 1) + 8), 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v72 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    EspressoParallelNeuralAMInferenceBase::EspressoParallelNeuralAMInferenceBase((uint64_t)(v37 + 24), (char *)a2, *((std::__shared_weak_count **)&v72 + 1));
    if (*((void *)&v72 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v72 + 1));
    }
    *((void *)v37 + 3) = &off_26C2052D0;
    ParallelNeuralAMInference::Config::Config((uint64_t)(v37 + 248), a2);
    uint64_t v69 = (void **)(v37 + 440);
    std::string::basic_string[abi:ne180100]<0>((void *)v37 + 55, "input");
    long long v68 = (void **)(v37 + 464);
    std::string::basic_string[abi:ne180100]<0>((void *)v37 + 58, "input_length");
    char v65 = (void **)(v37 + 488);
    std::string::basic_string[abi:ne180100]<0>((void *)v37 + 61, &byte_20D5A22AE);
    unint64_t v64 = (void **)(v37 + 512);
    std::string::basic_string[abi:ne180100]<0>((void *)v37 + 64, &byte_20D5A22AE);
    std::chrono::steady_clock::time_point v67 = (void **)(v37 + 536);
    std::string::basic_string[abi:ne180100]<0>((void *)v37 + 67, "Identity_1");
    uint64_t v66 = (void **)(v37 + 560);
    std::string::basic_string[abi:ne180100]<0>((void *)v37 + 70, "Identity");
    uint64_t v45 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a2, "graph_input_name");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v45, &buf);
    if (v37[463] < 0) {
      operator delete(*v69);
    }
    *(_OWORD *)uint64_t v69 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
    *((void *)v37 + 57) = *((void *)&buf.__r_.__value_.__l + 2);
    uint64_t v46 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a2, "graph_input_length_name");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v46, &buf);
    if (v37[487] < 0) {
      operator delete(*v68);
    }
    *(_OWORD *)long long v68 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
    *((void *)v37 + 60) = *((void *)&buf.__r_.__value_.__l + 2);
    uint64_t v47 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a2, "graph_output_mel_name");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v47, &buf);
    if (v37[559] < 0) {
      operator delete(*v67);
    }
    *(_OWORD *)std::chrono::steady_clock::time_point v67 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
    *((void *)v37 + 69) = *((void *)&buf.__r_.__value_.__l + 2);
    std::string::basic_string[abi:ne180100]<0>(&v80, "graph_output_alignment_name");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_20D5A22AE, (char *)a2, (const void **)&v80, &buf);
    if (v37[583] < 0) {
      operator delete(*v66);
    }
    *(_OWORD *)uint64_t v66 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
    *((void *)v37 + 72) = *((void *)&buf.__r_.__value_.__l + 2);
    *((unsigned char *)&buf.__r_.__value_.__s + 23) = 0;
    buf.__r_.__value_.__s.__data_[0] = 0;
    if (v81 < 0) {
      operator delete((void *)v80);
    }
    std::string::basic_string[abi:ne180100]<0>(&v80, "graph_input_speaker_id_name");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_20D5A22AE, (char *)a2, (const void **)&v80, &buf);
    if (v37[511] < 0) {
      operator delete(*v65);
    }
    *(_OWORD *)char v65 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
    *((void *)v37 + 63) = *((void *)&buf.__r_.__value_.__l + 2);
    *((unsigned char *)&buf.__r_.__value_.__s + 23) = 0;
    buf.__r_.__value_.__s.__data_[0] = 0;
    if (v81 < 0) {
      operator delete((void *)v80);
    }
    std::string::basic_string[abi:ne180100]<0>(&v80, "graph_input_language_embedding_name");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_20D5A22AE, (char *)a2, (const void **)&v80, &buf);
    if (v37[535] < 0) {
      operator delete(*v64);
    }
    *(_OWORD *)unint64_t v64 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
    *((void *)v37 + 66) = *((void *)&buf.__r_.__value_.__l + 2);
    *((unsigned char *)&buf.__r_.__value_.__s + 23) = 0;
    buf.__r_.__value_.__s.__data_[0] = 0;
    if (v81 < 0) {
      operator delete((void *)v80);
    }
    if (*((void *)&v72 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v72 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    PersistentModuleFactory::get_persistent_module_from_pool<ParallelNeuralAMPersistentModule>(&v78, (long long *)v37 + 14, v72);
    if (*((void *)&v72 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v72 + 1));
    }
    uint64_t v49 = *(void *)(v78 + 296);
    std::string::size_type v48 = *(std::__shared_weak_count **)(v78 + 304);
    if (v48) {
      atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string v73 = v48;
    uint64_t v50 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a2, "graph_input_name");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v50, &buf);
    if (v37[463] < 0) {
      operator delete(*v69);
    }
    *(_OWORD *)uint64_t v69 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
    *((void *)v37 + 57) = *((void *)&buf.__r_.__value_.__l + 2);
    uint64_t v51 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a2, "graph_input_length_name");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v51, &buf);
    if (v37[487] < 0) {
      operator delete(*v68);
    }
    *(_OWORD *)long long v68 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
    *((void *)v37 + 60) = *((void *)&buf.__r_.__value_.__l + 2);
    uint64_t v52 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a2, "graph_output_mel_name");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v52, &buf);
    if (v37[559] < 0) {
      operator delete(*v67);
    }
    *(_OWORD *)std::chrono::steady_clock::time_point v67 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
    *((void *)v37 + 69) = *((void *)&buf.__r_.__value_.__l + 2);
    std::string::basic_string[abi:ne180100]<0>(&v80, "graph_output_alignment_name");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_20D5A22AE, (char *)a2, (const void **)&v80, &buf);
    if (v37[583] < 0) {
      operator delete(*v66);
    }
    *(_OWORD *)uint64_t v66 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
    *((void *)v37 + 72) = *((void *)&buf.__r_.__value_.__l + 2);
    *((unsigned char *)&buf.__r_.__value_.__s + 23) = 0;
    buf.__r_.__value_.__s.__data_[0] = 0;
    if (v81 < 0) {
      operator delete((void *)v80);
    }
    std::string::basic_string[abi:ne180100]<0>(&v80, "graph_input_speaker_id_name");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_20D5A22AE, (char *)a2, (const void **)&v80, &buf);
    if (v37[511] < 0) {
      operator delete(*v65);
    }
    *(_OWORD *)char v65 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
    *((void *)v37 + 63) = *((void *)&buf.__r_.__value_.__l + 2);
    *((unsigned char *)&buf.__r_.__value_.__s + 23) = 0;
    buf.__r_.__value_.__s.__data_[0] = 0;
    if (v81 < 0) {
      operator delete((void *)v80);
    }
    std::string::basic_string[abi:ne180100]<0>(&v80, "graph_input_language_embedding_name");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_20D5A22AE, (char *)a2, (const void **)&v80, &buf);
    if (v37[535] < 0) {
      operator delete(*v64);
    }
    *(_OWORD *)unint64_t v64 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
    *((void *)v37 + 66) = *((void *)&buf.__r_.__value_.__l + 2);
    *((unsigned char *)&buf.__r_.__value_.__s + 23) = 0;
    buf.__r_.__value_.__s.__data_[0] = 0;
    if (v81 < 0) {
      operator delete((void *)v80);
    }
    *((void *)v37 + 75) = v49 + 24;
    *((void *)v37 + 74) = v49 + 16;
    *((void *)v37 + 73) = v49;
    if (v73) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v73);
    }
    if (v79) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v79);
    }
    if (*((void *)&v72 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v72 + 1));
    }
    *(void *)&long long v43 = v37 + 24;
    goto LABEL_169;
  }
  uint64_t v22 = *(void *)(v9 + 328);
  if (v22 == 8)
  {
    uint64_t v20 = *v11;
    goto LABEL_53;
  }
  if (v22 == 10 && *(void *)*v11 == 0x6C66726F736E6574 && *((_WORD *)*v11 + 4) == 30575) {
    goto LABEL_47;
  }
LABEL_171:
  SharedObjectPool::get<SynthesizerConfig>(&buf, *(void *)(v9 + 192));
  std::string::size_type v55 = *(std::__shared_weak_count **)(v9 + 520);
  *(_OWORD *)(v9 + 512) = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
  if (v55) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v55);
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v76, v75[0]);
  if (*((void *)&v72 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v72 + 1));
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  double v56 = (std::string::size_type *)(a1 + 8);
  unsigned __int8 v57 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    std::string::size_type v58 = a1 + 8;
    if (*(char *)(a1 + 31) < 0) {
      std::string::size_type v58 = *v56;
    }
    v59.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v58;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
    *(double *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (double)((v59.__d_.__rep_ - v7.__d_.__rep_) / 1000000)
                                                               / 1000.0;
    _os_log_impl(&dword_20CD80000, v57, OS_LOG_TYPE_INFO, "Init latency (%s): %.3f s", (uint8_t *)&buf, 0x16u);
  }
  if (*(char *)(a1 + 31) < 0) {
    double v56 = (std::string::size_type *)*v56;
  }
  v60.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "Init latency (%s): %.3f s", v61, v56, (double)((v60.__d_.__rep_ - v7.__d_.__rep_) / 1000000) / 1000.0);
  if (*((void *)&v72 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v72 + 1));
  }
  result.n128_u64[0] = v71;
  result.n128_u64[1] = v9;
  __n128 *v70 = result;
  return result;
}

void sub_20D453C88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, EspressoParallelNeuralAMDecoupledInference::Config *a18, uint64_t a19, Module *a20,std::__shared_weak_count *a21,uint64_t a22,char a23,uint64_t a24,unsigned __int8 a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,std::__shared_weak_count *a30)
{
  if (*(char *)(v35 - 137) < 0) {
    operator delete(*(void **)(v35 - 160));
  }
  if (a21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a21);
  }
  if (a30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a30);
  }
  EspressoParallelNeuralAMInference::Config::~Config(a11);
  *(void *)(v34 + ++*(_DWORD *)(result + 24) = &unk_26C2040F0;
  if (*(char *)(v34 + 247) < 0) {
    operator delete(*(void **)(v34 + 224));
  }
  ParallelNeuralAMInference::Config::~Config((ParallelNeuralAMInference::Config *)(v34 + 32));
  if (v31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  }
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v34);
  operator delete(v37);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&a26, a25);
  uint64_t v38 = *(std::__shared_weak_count **)(v30 + 520);
  if (v38) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v38);
  }
  uint64_t v39 = *(std::__shared_weak_count **)(v30 + 496);
  if (v39) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v39);
  }
  uint64_t v40 = *(std::__shared_weak_count **)(v30 + 480);
  if (v40) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v40);
  }
  std::mutex::~mutex((std::mutex *)(v30 + 408));
  if (*(char *)(v30 + 367) < 0) {
    operator delete(*v33);
  }
  if (*(char *)(v30 + 343) < 0) {
    operator delete(*v32);
  }
  uint64_t v41 = *(std::__shared_weak_count **)(v30 + 304);
  if (v41) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v41);
  }
  Module::~Module(a20);
  if (v31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  }
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v30);
  operator delete(v42);
  if (v31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<ParallelNeuralAcousticModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ParallelNeuralAcousticModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C2180E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<ParallelNeuralAcousticModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C2180E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<ParallelNeuralAcousticModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<ParallelNeuralAcousticModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0) {
    operator delete(__p[1]);
  }
  operator delete(__p);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<ParallelNeuralAcousticModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<ParallelNeuralAcousticModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<ParallelNeuralAcousticModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<ParallelNeuralAcousticModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, void *a2)
{
  *a2 = off_26C212440;
  uint64_t v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void *std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<ParallelNeuralAcousticModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<ParallelNeuralAcousticModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  void *v2 = off_26C212440;
  long long v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(void *)(a1 + 24);
  }
  return v2;
}

void sub_20D45420C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<ParallelNeuralAcousticModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<ParallelNeuralAcousticModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C212440;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x2105595E0);
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<ParallelNeuralAcousticModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<ParallelNeuralAcousticModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C212440;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

char **std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<WaveformChangeModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<WaveformChangeModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<WaveformChangeModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<WaveformChangeModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

__n128 std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<WaveformChangeModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<WaveformChangeModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, char *a2@<X1>, long long *a3@<X2>, __n128 *a4@<X8>)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  long long v22 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  v7.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  unint64_t v8 = operator new(0x150uLL);
  unint64_t v9 = (unint64_t)v8;
  v8[1] = 0;
  _OWORD v8[2] = 0;
  void *v8 = off_26C217048;
  unint64_t v10 = (unint64_t)(v8 + 3);
  if (*((void *)&v22 + 1))
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v22 + 1) + 8), 1uLL, memory_order_relaxed);
    long long v24 = v22;
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v22 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  else
  {
    long long v24 = (unint64_t)v22;
  }
  Module::Module((uint64_t)(v8 + 3), a2, (uint64_t *)&v24);
  if (*((void *)&v24 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v24 + 1));
  }
  *(void *)(v9 + ++*(_DWORD *)(result + 24) = off_26C202DC0;
  *(void *)(v9 + 320) = 0;
  *(void *)(v9 + 328) = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "global");
  unsigned int v23 = 1061997773;
  float v11 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<float,0>((unsigned __int8 *)a2, (const void **)__p, (uint64_t)&v23);
  *(float *)(v9 + 308) = v11;
  if (v28 < 0)
  {
    operator delete(*(void **)__p);
    float v11 = *(float *)(v9 + 308);
  }
  *(float *)(v9 + 296) = v11;
  *(float *)(v9 + 300) = v11;
  *(_DWORD *)(v9 + 312) = 1061997773;
  std::string::basic_string[abi:ne180100]<0>(__p, "peak_ratio");
  unsigned int v23 = 1060320051;
  *(float *)(v9 + 316) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<float,0>((unsigned __int8 *)a2, (const void **)__p, (uint64_t)&v23);
  if (v28 < 0) {
    operator delete(*(void **)__p);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "smoothing_window");
  unsigned int v23 = 120;
  *(_DWORD *)(v9 + 304) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>(a2, (const void **)__p, &v23);
  if (v28 < 0) {
    operator delete(*(void **)__p);
  }
  float v12 = *(std::__shared_weak_count **)(v9 + 328);
  *(void *)(v9 + 320) = 0;
  *(void *)(v9 + 328) = 0;
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  if (*((void *)&v22 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v22 + 1));
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  uint64_t v13 = (void *)(a1 + 8);
  float v14 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    unint64_t v15 = v10;
    int v16 = a4;
    double v17 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      double v17 = (void *)*v13;
    }
    v18.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    *(_DWORD *)std::string __p = 136315394;
    *(void *)&__p[4] = v17;
    __int16 v26 = 2048;
    double v27 = (double)((v18.__d_.__rep_ - v7.__d_.__rep_) / 1000000) / 1000.0;
    _os_log_impl(&dword_20CD80000, v14, OS_LOG_TYPE_INFO, "Init latency (%s): %.3f s", __p, 0x16u);
    a4 = v16;
    unint64_t v10 = v15;
  }
  if (*(char *)(a1 + 31) < 0) {
    uint64_t v13 = (void *)*v13;
  }
  v19.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "Init latency (%s): %.3f s", v20, v13, (double)((v19.__d_.__rep_ - v7.__d_.__rep_) / 1000000) / 1000.0);
  if (*((void *)&v22 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v22 + 1));
  }
  result.n128_u64[0] = v10;
  result.n128_u64[1] = v9;
  *a4 = result;
  return result;
}

void sub_20D454670(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  shared_weak_owners = (std::__shared_weak_count *)v22[13].__shared_weak_owners_;
  if (shared_weak_owners) {
    std::__shared_weak_count::__release_shared[abi:ne180100](shared_weak_owners);
  }
  Module::~Module(v24);
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  std::__shared_weak_count::~__shared_weak_count(v22);
  operator delete(v27);
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  _Unwind_Resume(a1);
}

void sub_20D4546DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  JUMPOUT(0x20D4546B0);
}

void sub_20D4546F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (!a12) {
    JUMPOUT(0x20D4546D4);
  }
  JUMPOUT(0x20D4546CCLL);
}

uint64_t std::__shared_ptr_emplace<WaveformChangeModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<WaveformChangeModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C217048;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<WaveformChangeModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C217048;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<WaveformChangeModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<WaveformChangeModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0) {
    operator delete(__p[1]);
  }
  operator delete(__p);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<WaveformChangeModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<WaveformChangeModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<WaveformChangeModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<WaveformChangeModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, void *a2)
{
  *a2 = off_26C211EC0;
  uint64_t v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void *std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<WaveformChangeModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<WaveformChangeModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  void *v2 = off_26C211EC0;
  long long v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(void *)(a1 + 24);
  }
  return v2;
}

void sub_20D4548B8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<WaveformChangeModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<WaveformChangeModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C211EC0;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x2105595E0);
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<WaveformChangeModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<WaveformChangeModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C211EC0;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

char **std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<WaveformRateChangeModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<WaveformRateChangeModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<WaveformRateChangeModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<WaveformRateChangeModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<WaveformRateChangeModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<WaveformRateChangeModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()(uint64_t a1@<X0>, char *a2@<X1>, long long *a3@<X2>, _OWORD *a4@<X8>)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  long long v30 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  v7.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  unint64_t v8 = operator new(0x138uLL);
  unint64_t v9 = v8;
  v8[1] = 0;
  _OWORD v8[2] = 0;
  void *v8 = off_26C217A20;
  unint64_t v10 = v8 + 3;
  float v11 = (std::__shared_weak_count *)*((void *)&v30 + 1);
  if (*((void *)&v30 + 1))
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v30 + 1) + 8), 1uLL, memory_order_relaxed);
    long long v33 = v30;
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v30 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  else
  {
    long long v33 = (unint64_t)v30;
  }
  Module::Module((uint64_t)(v8 + 3), a2, (uint64_t *)&v33);
  if (*((void *)&v33 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v33 + 1));
  }
  v9[3] = off_26C203EA8;
  v9[37] = 0;
  v9[38] = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "active");
  LOBYTE(v32) = 0;
  char v12 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<BOOL,0>(a2, (const void **)__p, (unsigned __int8 *)&v32);
  if (v35 < 0) {
    operator delete(*(void **)__p);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "global_rate");
  unsigned int v32 = 1065353216;
  float v13 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<float,0>((unsigned __int8 *)a2, (const void **)__p, (uint64_t)&v32);
  if (v35 < 0) {
    operator delete(*(void **)__p);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "frame_size");
  unsigned int v32 = 1106247680;
  float v14 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<float,0>((unsigned __int8 *)a2, (const void **)__p, (uint64_t)&v32);
  if (v35 < 0) {
    operator delete(*(void **)__p);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "correlation_frame_size");
  unsigned int v32 = 1096810496;
  float v15 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<float,0>((unsigned __int8 *)a2, (const void **)__p, (uint64_t)&v32);
  if (v35 < 0) {
    operator delete(*(void **)__p);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "adaptive_rate_factor");
  unsigned int v32 = 1045220557;
  float v16 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<float,0>((unsigned __int8 *)a2, (const void **)__p, (uint64_t)&v32);
  if (v35 < 0) {
    operator delete(*(void **)__p);
  }
  if (v13 <= 0.0 || fabsf(v13) == INFINITY) {
    float v13 = 1.0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "sampling_frequency");
  unsigned int v32 = 0;
  int v17 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>(a2, (const void **)__p, &v32);
  int v18 = v17;
  if (v35 < 0)
  {
    operator delete(*(void **)__p);
    if (v18) {
      goto LABEL_27;
    }
  }
  else if (v17)
  {
    goto LABEL_27;
  }
  long long v31 = v30;
  if (*((void *)&v30 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v30 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  int v18 = NeuralTTSUtils::neural_sample_rate((uint64_t *)&v31);
  if (*((void *)&v31 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v31 + 1));
  }
LABEL_27:
  if (v18 < 1) {
    int v18 = 24000;
  }
  if (*((void *)&v30 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v30 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  std::chrono::steady_clock::time_point v19 = (std::__shared_weak_count *)v9[25];
  *((_OWORD *)v9 + 12) = v30;
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  WaveformRateChanger::create_rate_changer((WaveformRateChanger *)__p, v12, v13, v18, v14, v15, v16);
  uint64_t v20 = (std::__shared_weak_count *)v9[38];
  *(_OWORD *)(v9 + 37) = *(_OWORD *)__p;
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  if (*((void *)&v30 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v30 + 1));
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  BOOL v21 = (void *)(a1 + 8);
  long long v22 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    unsigned int v23 = v10;
    long long v24 = a4;
    uint64_t v25 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      uint64_t v25 = (void *)*v21;
    }
    v26.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    *(_DWORD *)std::string __p = 136315394;
    *(void *)&__p[4] = v25;
    *(_WORD *)&unsigned char __p[12] = 2048;
    *(double *)&__p[14] = (double)((v26.__d_.__rep_ - v7.__d_.__rep_) / 1000000) / 1000.0;
    _os_log_impl(&dword_20CD80000, v22, OS_LOG_TYPE_INFO, "Init latency (%s): %.3f s", __p, 0x16u);
    a4 = v24;
    unint64_t v10 = v23;
    float v11 = (std::__shared_weak_count *)*((void *)&v30 + 1);
  }
  if (*(char *)(a1 + 31) < 0) {
    BOOL v21 = (void *)*v21;
  }
  v27.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "Init latency (%s): %.3f s", v28, v21, (double)((v27.__d_.__rep_ - v7.__d_.__rep_) / 1000000) / 1000.0);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  *(void *)&long long v29 = v10;
  *((void *)&v29 + 1) = v9;
  *a4 = v29;
}

void sub_20D454E78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  shared_weak_owners = (std::__shared_weak_count *)v24[12].__shared_weak_owners_;
  if (shared_weak_owners) {
    std::__shared_weak_count::__release_shared[abi:ne180100](shared_weak_owners);
  }
  Module::~Module(v26);
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  std::__shared_weak_count::~__shared_weak_count(v24);
  operator delete(v29);
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  _Unwind_Resume(a1);
}

void sub_20D454F14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  JUMPOUT(0x20D454EE8);
}

void sub_20D454F28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (!a12) {
    JUMPOUT(0x20D454F0CLL);
  }
  JUMPOUT(0x20D454F04);
}

uint64_t std::__shared_ptr_emplace<WaveformRateChangeModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<WaveformRateChangeModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C217A20;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<WaveformRateChangeModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C217A20;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<WaveformRateChangeModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<WaveformRateChangeModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0) {
    operator delete(__p[1]);
  }
  operator delete(__p);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<WaveformRateChangeModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<WaveformRateChangeModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<WaveformRateChangeModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<WaveformRateChangeModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, void *a2)
{
  *a2 = off_26C2122E0;
  uint64_t v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void *std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<WaveformRateChangeModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<WaveformRateChangeModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  void *v2 = off_26C2122E0;
  long long v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(void *)(a1 + 24);
  }
  return v2;
}

void sub_20D4550F0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<WaveformRateChangeModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<WaveformRateChangeModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C2122E0;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x2105595E0);
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<WaveformRateChangeModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<WaveformRateChangeModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C2122E0;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

char **std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<NeuralRateChangeModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<NeuralRateChangeModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<NeuralRateChangeModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<NeuralRateChangeModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<NeuralRateChangeModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<NeuralRateChangeModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()(uint64_t a1@<X0>, char *a2@<X1>, long long *a3@<X2>, _OWORD *a4@<X8>)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  long long v32 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  v7.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  unint64_t v8 = operator new(0x138uLL);
  unint64_t v9 = v8;
  v8[1] = 0;
  _OWORD v8[2] = 0;
  void *v8 = off_26C217470;
  unint64_t v10 = v8 + 3;
  float v11 = (std::__shared_weak_count *)*((void *)&v32 + 1);
  if (*((void *)&v32 + 1))
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v32 + 1) + 8), 1uLL, memory_order_relaxed);
    long long v34 = v32;
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v32 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  else
  {
    long long v34 = (unint64_t)v32;
  }
  Module::Module((uint64_t)(v8 + 3), a2, (uint64_t *)&v34);
  if (*((void *)&v34 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v34 + 1));
  }
  v9[3] = off_26C2035F0;
  v9[37] = 0;
  v9[38] = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "active");
  LOBYTE(v33) = 0;
  BOOL v12 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<BOOL,0>(a2, (const void **)__p, (unsigned __int8 *)&v33);
  if (v38 < 0) {
    operator delete(*(void **)__p);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "frame_shift");
  unsigned int v33 = 240;
  int v13 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>(a2, (const void **)__p, &v33);
  if (v38 < 0) {
    operator delete(*(void **)__p);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "global_rate");
  unsigned int v33 = 1065353216;
  float v14 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<float,0>((unsigned __int8 *)a2, (const void **)__p, (uint64_t)&v33);
  if (v38 < 0) {
    operator delete(*(void **)__p);
  }
  if (v14 <= 0.0 || fabsf(v14) == INFINITY) {
    float v14 = 1.0;
  }
  float v15 = operator new(0x58uLL);
  v15[1] = 0;
  _OWORD v15[2] = 0;
  float v16 = 1.0;
  if (v12) {
    float v16 = v14;
  }
  *float v15 = off_26C215480;
  v15[4] = 0;
  v15[5] = 0;
  void v15[3] = 0;
  *((unsigned char *)v15 + 84) = v12;
  *((float *)v15 + 16) = v16;
  *((_OWORD *)v15 + 3) = xmmword_20D6B4B60;
  *((_DWORD *)v15 + 19) = v13;
  *((_DWORD *)v15 + 20) = 0;
  __asm { FMOV            V0.2S, #1.0 }
  *(void *)((char *)v15 + 68) = _D0;
  long long v22 = (std::__shared_weak_count *)v9[38];
  v9[37] = v15 + 3;
  v9[38] = v15;
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  if (*((void *)&v32 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v32 + 1));
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  unsigned int v23 = (void *)(a1 + 8);
  long long v24 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    uint64_t v25 = v10;
    std::chrono::steady_clock::time_point v26 = a4;
    std::chrono::steady_clock::time_point v27 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      std::chrono::steady_clock::time_point v27 = (void *)*v23;
    }
    v28.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    *(_DWORD *)std::string __p = 136315394;
    *(void *)&__p[4] = v27;
    __int16 v36 = 2048;
    double v37 = (double)((v28.__d_.__rep_ - v7.__d_.__rep_) / 1000000) / 1000.0;
    _os_log_impl(&dword_20CD80000, v24, OS_LOG_TYPE_INFO, "Init latency (%s): %.3f s", __p, 0x16u);
    a4 = v26;
    unint64_t v10 = v25;
    float v11 = (std::__shared_weak_count *)*((void *)&v32 + 1);
  }
  if (*(char *)(a1 + 31) < 0) {
    unsigned int v23 = (void *)*v23;
  }
  v29.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "Init latency (%s): %.3f s", v30, v23, (double)((v29.__d_.__rep_ - v7.__d_.__rep_) / 1000000) / 1000.0);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  *(void *)&long long v31 = v10;
  *((void *)&v31 + 1) = v9;
  *a4 = v31;
}

void sub_20D4555C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  shared_weak_owners = (std::__shared_weak_count *)v22[12].__shared_weak_owners_;
  if (shared_weak_owners) {
    std::__shared_weak_count::__release_shared[abi:ne180100](shared_weak_owners);
  }
  Module::~Module(v24);
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  std::__shared_weak_count::~__shared_weak_count(v22);
  operator delete(v27);
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  _Unwind_Resume(a1);
}

void sub_20D455634(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  JUMPOUT(0x20D455608);
}

void sub_20D455648(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (!a12) {
    JUMPOUT(0x20D45562CLL);
  }
  JUMPOUT(0x20D455624);
}

uint64_t std::__shared_ptr_emplace<NeuralRateChangeModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<NeuralRateChangeModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C217470;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<NeuralRateChangeModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C217470;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<NeuralRateChangeModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<NeuralRateChangeModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0) {
    operator delete(__p[1]);
  }
  operator delete(__p);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<NeuralRateChangeModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<NeuralRateChangeModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<NeuralRateChangeModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<NeuralRateChangeModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, void *a2)
{
  *a2 = off_26C212128;
  uint64_t v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void *std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<NeuralRateChangeModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<NeuralRateChangeModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  void *v2 = off_26C212128;
  long long v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(void *)(a1 + 24);
  }
  return v2;
}

void sub_20D455810(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<NeuralRateChangeModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<NeuralRateChangeModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C212128;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x2105595E0);
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<NeuralRateChangeModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<NeuralRateChangeModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C212128;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

char **std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<PromptPartitionModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<PromptPartitionModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<PromptPartitionModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<PromptPartitionModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

__n128 std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<PromptPartitionModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<PromptPartitionModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long *a3@<X2>, __n128 *a4@<X8>)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  long long v24 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  v7.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  unint64_t v8 = operator new(0x148uLL);
  unint64_t v9 = (unint64_t)v8;
  v8[1] = 0;
  _OWORD v8[2] = 0;
  void *v8 = off_26C217278;
  unint64_t v10 = (unint64_t)(v8 + 3);
  if (*((void *)&v24 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v24 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  Module::Module((Module *)(v8 + 3));
  *(void *)(v9 + ++*(_DWORD *)(result + 24) = off_26C2031B0;
  float v11 = (void **)(v9 + 304);
  *(void *)(v9 + 312) = 0;
  *(void *)(v9 + 320) = 0;
  *(void *)(v9 + 304) = 0;
  BOOL v12 = (unsigned char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a2, "pause_threshold");
  LODWORD(buf.__r_.__value_.__l.__data_) = 0;
  nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,int,0>(v12, (int *)&buf);
  *(_DWORD *)(v9 + 296) = buf.__r_.__value_.__l.__data_;
  int v13 = (unsigned char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a2, "pause_threshold_base");
  LODWORD(buf.__r_.__value_.__l.__data_) = 0;
  nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,int,0>(v13, (int *)&buf);
  *(_DWORD *)(v9 + 300) = buf.__r_.__value_.__l.__data_;
  uint64_t v14 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a2, "pause_marker");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v14, &buf);
  if (*(char *)(v9 + 327) < 0) {
    operator delete(*v11);
  }
  *(_OWORD *)float v11 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
  *(void *)(v9 + 320) = *((void *)&buf.__r_.__value_.__l + 2);
  if (*((void *)&v24 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v24 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  float v15 = *(std::__shared_weak_count **)(v9 + 200);
  *(_OWORD *)(v9 + 192) = v24;
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  if (*((void *)&v24 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v24 + 1));
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  float v16 = (std::string::size_type *)(a1 + 8);
  int v17 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    int v18 = a4;
    std::string::size_type v19 = a1 + 8;
    if (*(char *)(a1 + 31) < 0) {
      std::string::size_type v19 = *v16;
    }
    v20.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v19;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
    *(double *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (double)((v20.__d_.__rep_ - v7.__d_.__rep_) / 1000000)
                                                               / 1000.0;
    _os_log_impl(&dword_20CD80000, v17, OS_LOG_TYPE_INFO, "Init latency (%s): %.3f s", (uint8_t *)&buf, 0x16u);
    a4 = v18;
  }
  if (*(char *)(a1 + 31) < 0) {
    float v16 = (std::string::size_type *)*v16;
  }
  v21.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "Init latency (%s): %.3f s", v22, v16, (double)((v21.__d_.__rep_ - v7.__d_.__rep_) / 1000000) / 1000.0);
  if (*((void *)&v24 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v24 + 1));
  }
  result.n128_u64[0] = v10;
  result.n128_u64[1] = v9;
  *a4 = result;
  return result;
}

void sub_20D455C0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, long long a11)
{
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  std::__shared_weak_count::~__shared_weak_count(v11);
  operator delete(v14);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<PromptPartitionModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<PromptPartitionModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C217278;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<PromptPartitionModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C217278;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<PromptPartitionModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<PromptPartitionModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0) {
    operator delete(__p[1]);
  }
  operator delete(__p);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<PromptPartitionModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<PromptPartitionModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<PromptPartitionModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<PromptPartitionModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, void *a2)
{
  *a2 = off_26C211FC8;
  uint64_t v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void *std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<PromptPartitionModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<PromptPartitionModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  void *v2 = off_26C211FC8;
  long long v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(void *)(a1 + 24);
  }
  return v2;
}

void sub_20D455E24(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<PromptPartitionModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<PromptPartitionModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C211FC8;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x2105595E0);
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<PromptPartitionModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<PromptPartitionModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C211FC8;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

char **std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<AudioResamplingModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<AudioResamplingModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<AudioResamplingModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<AudioResamplingModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

__n128 std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<AudioResamplingModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<AudioResamplingModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, char *a2@<X1>, long long *a3@<X2>, __n128 *a4@<X8>)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  long long v18 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  v7.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  unint64_t v8 = operator new(0x158uLL);
  unint64_t v9 = (unint64_t)v8;
  v8[1] = 0;
  _OWORD v8[2] = 0;
  void *v8 = off_26C217080;
  unint64_t v10 = (unint64_t)(v8 + 3);
  if (*((void *)&v18 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v18 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  AudioResamplingModule::AudioResamplingModule((uint64_t)(v8 + 3), a2, v18, *((std::__shared_weak_count **)&v18 + 1));
  if (*((void *)&v18 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v18 + 1));
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  float v11 = (void *)(a1 + 8);
  BOOL v12 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    int v13 = a4;
    uint64_t v14 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      uint64_t v14 = (void *)*v11;
    }
    *(_DWORD *)std::string buf = 136315394;
    std::chrono::steady_clock::time_point v20 = v14;
    __int16 v21 = 2048;
    double v22 = (double)((std::chrono::steady_clock::now().__d_.__rep_ - v7.__d_.__rep_) / 1000000) / 1000.0;
    _os_log_impl(&dword_20CD80000, v12, OS_LOG_TYPE_INFO, "Init latency (%s): %.3f s", buf, 0x16u);
    a4 = v13;
  }
  if (*(char *)(a1 + 31) < 0) {
    float v11 = (void *)*v11;
  }
  v15.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "Init latency (%s): %.3f s", v16, v11, (double)((v15.__d_.__rep_ - v7.__d_.__rep_) / 1000000) / 1000.0);
  if (*((void *)&v18 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v18 + 1));
  }
  result.n128_u64[0] = v10;
  result.n128_u64[1] = v9;
  *a4 = result;
  return result;
}

void sub_20D456160(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, long long a11)
{
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  std::__shared_weak_count::~__shared_weak_count(v11);
  operator delete(v14);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<AudioResamplingModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<AudioResamplingModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C217080;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<AudioResamplingModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C217080;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<AudioResamplingModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<AudioResamplingModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0) {
    operator delete(__p[1]);
  }
  operator delete(__p);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<AudioResamplingModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<AudioResamplingModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<AudioResamplingModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<AudioResamplingModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, void *a2)
{
  *a2 = off_26C211F18;
  uint64_t v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void *std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<AudioResamplingModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<AudioResamplingModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  void *v2 = off_26C211F18;
  long long v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(void *)(a1 + 24);
  }
  return v2;
}

void sub_20D456354(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<AudioResamplingModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<AudioResamplingModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C211F18;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x2105595E0);
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<AudioResamplingModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<AudioResamplingModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C211F18;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

char **std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<FrontendFeatureLogModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<FrontendFeatureLogModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<FrontendFeatureLogModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<FrontendFeatureLogModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

__n128 std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<FrontendFeatureLogModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<FrontendFeatureLogModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, char *a2@<X1>, long long *a3@<X2>, __n128 *a4@<X8>)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  long long v18 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  v7.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  unint64_t v8 = operator new(0x140uLL);
  unint64_t v9 = (unint64_t)v8;
  v8[1] = 0;
  _OWORD v8[2] = 0;
  void *v8 = off_26C2178D0;
  unint64_t v10 = (unint64_t)(v8 + 3);
  if (*((void *)&v18 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v18 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  FrontendFeatureLogModule::FrontendFeatureLogModule((uint64_t)(v8 + 3), a2, v18, *((std::__shared_weak_count **)&v18 + 1));
  if (*((void *)&v18 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v18 + 1));
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  float v11 = (void *)(a1 + 8);
  BOOL v12 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    int v13 = a4;
    uint64_t v14 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      uint64_t v14 = (void *)*v11;
    }
    *(_DWORD *)std::string buf = 136315394;
    std::chrono::steady_clock::time_point v20 = v14;
    __int16 v21 = 2048;
    double v22 = (double)((std::chrono::steady_clock::now().__d_.__rep_ - v7.__d_.__rep_) / 1000000) / 1000.0;
    _os_log_impl(&dword_20CD80000, v12, OS_LOG_TYPE_INFO, "Init latency (%s): %.3f s", buf, 0x16u);
    a4 = v13;
  }
  if (*(char *)(a1 + 31) < 0) {
    float v11 = (void *)*v11;
  }
  v15.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "Init latency (%s): %.3f s", v16, v11, (double)((v15.__d_.__rep_ - v7.__d_.__rep_) / 1000000) / 1000.0);
  if (*((void *)&v18 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v18 + 1));
  }
  result.n128_u64[0] = v10;
  result.n128_u64[1] = v9;
  *a4 = result;
  return result;
}

void sub_20D456690(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, long long a11)
{
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  std::__shared_weak_count::~__shared_weak_count(v11);
  operator delete(v14);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  _Unwind_Resume(a1);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<FrontendFeatureLogModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<FrontendFeatureLogModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0) {
    operator delete(__p[1]);
  }
  operator delete(__p);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<FrontendFeatureLogModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<FrontendFeatureLogModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<FrontendFeatureLogModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<FrontendFeatureLogModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, void *a2)
{
  *a2 = off_26C212288;
  uint64_t v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void *std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<FrontendFeatureLogModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<FrontendFeatureLogModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  void *v2 = off_26C212288;
  long long v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(void *)(a1 + 24);
  }
  return v2;
}

void sub_20D4567E8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<FrontendFeatureLogModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<FrontendFeatureLogModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C212288;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x2105595E0);
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<FrontendFeatureLogModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<FrontendFeatureLogModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C212288;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

char **std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<NeuralFEStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<NeuralFEStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<NeuralFEStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<NeuralFEStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

__n128 std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<NeuralFEStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<NeuralFEStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, char *a2@<X1>, long long *a3@<X2>, __n128 *a4@<X8>)
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  long long v35 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  v34.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  std::chrono::steady_clock::time_point v7 = operator new(0x1B8uLL);
  unint64_t v8 = (unint64_t)v7;
  v7[1] = 0;
  v7[2] = 0;
  void *v7 = off_26C215C28;
  unint64_t v9 = v7 + 3;
  if (*((void *)&v35 + 1))
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v35 + 1) + 8), 1uLL, memory_order_relaxed);
    long long v39 = v35;
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v35 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  else
  {
    long long v39 = (unint64_t)v35;
  }
  Module::Module((uint64_t)(v7 + 3), a2, (uint64_t *)&v39);
  long long v31 = a4;
  if (*((void *)&v39 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v39 + 1));
  }
  unint64_t v32 = (unint64_t)v9;
  *(void *)(v8 + ++*(_DWORD *)(result + 24) = off_26C200B40;
  *(void *)(v8 + 304) = 0;
  *(void *)(v8 + 312) = 0;
  unint64_t v10 = v8 + 304;
  *(void *)(v8 + 296) = v8 + 304;
  float v11 = (void **)(v8 + 320);
  BOOL v12 = (void **)(v8 + 344);
  unint64_t v13 = v8 + 376;
  *(void *)(v8 + 376) = 0;
  *(void *)(v8 + 384) = 0;
  *(_OWORD *)(v8 + 320) = 0u;
  *(_OWORD *)(v8 + 336) = 0u;
  *(_OWORD *)(v8 + 352) = 0u;
  *(void *)(v8 + 368) = v8 + 376;
  unsigned int v33 = (unint64_t *)(v8 + 368);
  *(void *)(v8 + 4++*(_DWORD *)(result + 24) = 0x323F000000;
  *(unsigned char *)(v8 + 432) = 1;
  *(_DWORD *)(v8 + 436) = 3;
  *(_OWORD *)(v8 + 392) = 0u;
  *(_OWORD *)(v8 + 408) = 0u;
  SharedObjectPool::get<VoiceConfig>(&v37, (long long **)v35);
  uint64_t v14 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "phone_map");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::map<std::string,int>,std::map<std::string,int>,0>((char ***)&__str, v14);
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy(*(char **)(v8 + 304));
  std::string::size_type size = __str.__r_.__value_.__l.__size_;
  *(void *)(v8 + 296) = __str.__r_.__value_.__r.__words[0];
  *(void *)(v8 + 304) = size;
  std::string::size_type v16 = __str.__r_.__value_.__r.__words[2];
  *(void *)(v8 + 312) = *((void *)&__str.__r_.__value_.__l + 2);
  if (v16)
  {
    *(void *)(size + 16) = v10;
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str.__r_.__value_.__l.__size_;
    *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = 0uLL;
    std::string::size_type size = 0;
  }
  else
  {
    *(void *)(v8 + 296) = v10;
  }
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy((char *)size);
  int v17 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "punctuation");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::set<std::string>,std::set<std::string>,0>((uint64_t)&__str, v17);
  std::__tree<std::string>::destroy((uint64_t)v33, *(char **)(v8 + 376));
  std::string::size_type v18 = __str.__r_.__value_.__l.__size_;
  *(void *)(v8 + 368) = __str.__r_.__value_.__r.__words[0];
  *(void *)(v8 + 376) = v18;
  std::string::size_type v19 = __str.__r_.__value_.__r.__words[2];
  *(void *)(v8 + 384) = *((void *)&__str.__r_.__value_.__l + 2);
  if (v19)
  {
    *(void *)(v18 + 16) = v13;
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str.__r_.__value_.__l.__size_;
    *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = 0uLL;
    std::string::size_type v18 = 0;
  }
  else
  {
    unint64_t *v33 = v13;
  }
  std::__tree<std::string>::destroy((uint64_t)&__str, (char *)v18);
  uint64_t v20 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "eos");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v20, &__str);
  if (*(char *)(v8 + 343) < 0) {
    operator delete(*v11);
  }
  *(_OWORD *)float v11 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
  *(void *)(v8 + 336) = *((void *)&__str.__r_.__value_.__l + 2);
  uint64_t v21 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "word_boundary_marker");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v21, &__str);
  if (*(char *)(v8 + 367) < 0) {
    operator delete(*v12);
  }
  *(_OWORD *)BOOL v12 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
  *(void *)(v8 + 360) = *((void *)&__str.__r_.__value_.__l + 2);
  uint64_t v22 = v37;
  uint64_t v23 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "model_name");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v23, &__p);
  (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t, std::string *, void))(*(void *)v22 + 40))(&__str, v22, 1852139122, &__p, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::operator=((std::string *)(v8 + 392), &__str);
  if (*(char *)(v8 + 415) < 0)
  {
    if (!*(void *)(v8 + 400)) {
      goto LABEL_23;
    }
LABEL_22:
    operator new();
  }
  if (*(unsigned char *)(v8 + 415)) {
    goto LABEL_22;
  }
LABEL_23:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (v38) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v38);
  }
  if (*((void *)&v35 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v35 + 1));
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  long long v24 = (std::string::size_type *)(a1 + 8);
  uint64_t v25 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    std::string::size_type v26 = a1 + 8;
    if (*(char *)(a1 + 31) < 0) {
      std::string::size_type v26 = *v24;
    }
    v27.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    LODWORD(__str.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words + 4) = v26;
    WORD2(__str.__r_.__value_.__r.__words[1]) = 2048;
    *(double *)((char *)&__str.__r_.__value_.__r.__words[1] + 6) = (double)((v27.__d_.__rep_ - v34.__d_.__rep_) / 1000000)
                                                                 / 1000.0;
    _os_log_impl(&dword_20CD80000, v25, OS_LOG_TYPE_INFO, "Init latency (%s): %.3f s", (uint8_t *)&__str, 0x16u);
  }
  if (*(char *)(a1 + 31) < 0) {
    long long v24 = (std::string::size_type *)*v24;
  }
  v28.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "Init latency (%s): %.3f s", v29, v24, (double)((v28.__d_.__rep_ - v34.__d_.__rep_) / 1000000) / 1000.0, v8 + 416);
  if (*((void *)&v35 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v35 + 1));
  }
  result.n128_u64[0] = v32;
  result.n128_u64[1] = v8;
  *long long v31 = result;
  return result;
}

void sub_20D456E0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t *a11, uint64_t a12, Module *a13, void **a14, uint64_t a15, uint64_t a16, long long a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,std::__shared_weak_count *a26,uint64_t a27,uint64_t a28)
{
  MEMORY[0x2105595E0](v33, 0x10B2C4095D85668);
  if (*(char *)(v34 - 105) < 0) {
    operator delete(*(void **)(v34 - 128));
  }
  if (a26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a26);
  }
  std::unique_ptr<NeuralFEDecoder>::reset[abi:ne180100](a11, 0);
  if (*(char *)(v28 + 415) < 0) {
    operator delete(*a14);
  }
  std::__tree<std::string>::destroy(a15, *(char **)(v28 + 376));
  if (*(char *)(v28 + 367) < 0) {
    operator delete(*v31);
  }
  if (*(char *)(v28 + 343) < 0) {
    operator delete(*v30);
  }
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy(*v32);
  Module::~Module(a13);
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v28);
  operator delete(v36);
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<NeuralFEStream>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<NeuralFEStream>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C215C28;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<NeuralFEStream>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C215C28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<NeuralFEStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<NeuralFEStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0) {
    operator delete(__p[1]);
  }
  operator delete(__p);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<NeuralFEStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<NeuralFEStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<NeuralFEStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<NeuralFEStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, void *a2)
{
  *a2 = off_26C211838;
  uint64_t v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void *std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<NeuralFEStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<NeuralFEStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  void *v2 = off_26C211838;
  long long v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(void *)(a1 + 24);
  }
  return v2;
}

void sub_20D4570E4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<NeuralFEStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<NeuralFEStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C211838;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x2105595E0);
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<NeuralFEStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<NeuralFEStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C211838;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

char **std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<NeuralAdapterModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<NeuralAdapterModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<NeuralAdapterModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<NeuralAdapterModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

__n128 std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<NeuralAdapterModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<NeuralAdapterModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, long long *a3@<X2>, __n128 *a4@<X8>)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  long long v19 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  v7.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  unint64_t v8 = operator new(0x420uLL);
  unint64_t v9 = (unint64_t)v8;
  v8[1] = 0;
  _OWORD v8[2] = 0;
  void *v8 = off_26C216DA8;
  unint64_t v10 = (unint64_t)(v8 + 3);
  *(_OWORD *)std::string buf = v19;
  if (*((void *)&v19 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v19 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  NeuralAdapterModule::NeuralAdapterModule((uint64_t)(v8 + 3), a2, (uint64_t *)buf);
  if (*(void *)&buf[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  float v11 = (void *)(a1 + 8);
  BOOL v12 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    unint64_t v13 = a4;
    uint64_t v14 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      uint64_t v14 = (void *)*v11;
    }
    v15.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    *(_DWORD *)std::string buf = 136315394;
    *(void *)&uint8_t buf[4] = v14;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(double *)&buf[14] = (double)((v15.__d_.__rep_ - v7.__d_.__rep_) / 1000000) / 1000.0;
    _os_log_impl(&dword_20CD80000, v12, OS_LOG_TYPE_INFO, "Init latency (%s): %.3f s", buf, 0x16u);
    a4 = v13;
  }
  if (*(char *)(a1 + 31) < 0) {
    float v11 = (void *)*v11;
  }
  v16.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "Init latency (%s): %.3f s", v17, v11, (double)((v16.__d_.__rep_ - v7.__d_.__rep_) / 1000000) / 1000.0);
  if (*((void *)&v19 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v19 + 1));
  }
  result.n128_u64[0] = v10;
  result.n128_u64[1] = v9;
  *a4 = result;
  return result;
}

void sub_20D457420(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, long long a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  std::__shared_weak_count::~__shared_weak_count(v13);
  operator delete(v16);
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<NeuralAdapterModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<NeuralAdapterModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C216DA8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<NeuralAdapterModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C216DA8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<NeuralAdapterModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<NeuralAdapterModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0) {
    operator delete(__p[1]);
  }
  operator delete(__p);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<NeuralAdapterModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<NeuralAdapterModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<NeuralAdapterModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<NeuralAdapterModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, void *a2)
{
  *a2 = off_26C211DB8;
  uint64_t v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void *std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<NeuralAdapterModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<NeuralAdapterModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  void *v2 = off_26C211DB8;
  long long v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(void *)(a1 + 24);
  }
  return v2;
}

void sub_20D457614(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<NeuralAdapterModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<NeuralAdapterModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C211DB8;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x2105595E0);
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<NeuralAdapterModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<NeuralAdapterModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C211DB8;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

char **std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<HydraAdapterModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<HydraAdapterModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<HydraAdapterModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<HydraAdapterModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

__n128 std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<HydraAdapterModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<HydraAdapterModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, char *a2@<X1>, long long *a3@<X2>, __n128 *a4@<X8>)
{
  uint64_t v59 = *MEMORY[0x263EF8340];
  long long v50 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  v7.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  unint64_t v8 = operator new(0x178uLL);
  unint64_t v9 = (unint64_t)v8;
  v8[1] = 0;
  _OWORD v8[2] = 0;
  void *v8 = off_26C216B40;
  unint64_t v10 = (unint64_t)(v8 + 3);
  if (*((void *)&v50 + 1))
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v50 + 1) + 8), 1uLL, memory_order_relaxed);
    long long v57 = v50;
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v50 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  else
  {
    long long v57 = (unint64_t)v50;
  }
  Module::Module((uint64_t)(v8 + 3), a2, (uint64_t *)&v57);
  if (*((void *)&v57 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v57 + 1));
  }
  *(void *)(v9 + ++*(_DWORD *)(result + 24) = off_26C2023D8;
  *(_OWORD *)(v9 + 296) = 0u;
  *(_OWORD *)(v9 + 312) = 0u;
  *(_OWORD *)(v9 + 328) = 0u;
  *(_OWORD *)(v9 + 344) = 0u;
  *(void *)(v9 + 360) = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "id");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_20D5A22AE, a2, (const void **)&__p, &v58);
  float v11 = (void **)(v9 + 208);
  if (*(char *)(v9 + 231) < 0) {
    operator delete(*v11);
  }
  *(_OWORD *)float v11 = *(_OWORD *)&v58.__r_.__value_.__l.__data_;
  *(void *)(v9 + 2++*(_DWORD *)(result + 24) = *((void *)&v58.__r_.__value_.__l + 2);
  *((unsigned char *)&v58.__r_.__value_.__s + 23) = 0;
  v58.__r_.__value_.__s.__data_[0] = 0;
  if (v56 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v9 + 231) < 0)
  {
    std::string::__init_copy_ctor_external(&v58, *(const std::string::value_type **)(v9 + 208), *(void *)(v9 + 216));
  }
  else
  {
    *(_OWORD *)&v58.__r_.__value_.__l.__data_ = *(_OWORD *)v11;
    v58.__r_.__value_.__r.__words[2] = *(void *)(v9 + 224);
  }
  if (*((void *)&v50 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v50 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  BOOL v12 = *(std::__shared_weak_count **)(v50 + 24);
  if (!v12 || (unint64_t v13 = std::__shared_weak_count::lock(v12)) == 0)
  {
    long long v19 = 0;
    uint64_t v18 = 0;
    if (!*((void *)&v50 + 1)) {
      goto LABEL_23;
    }
    goto LABEL_22;
  }
  uint64_t v14 = v13;
  uint64_t v15 = *(void *)(v50 + 16);
  if (v15
    && (uint64_t v16 = v15 + 8,
        std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>((void *)(v15 + 8), (unsigned __int8 *)&v58)))
  {
    std::string __p = &v58;
    int v17 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v16, (unsigned __int8 *)&v58, (long long **)&__p);
    uint64_t v18 = *((void *)v17 + 5);
    long long v19 = (std::__shared_weak_count *)*((void *)v17 + 6);
    if (v19) {
      atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    long long v19 = 0;
    uint64_t v18 = 0;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  if (*((void *)&v50 + 1)) {
LABEL_22:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v50 + 1));
LABEL_23:
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v58.__r_.__value_.__l.__data_);
  }
  uint64_t v20 = *(void *)(v18 + 296);
  uint64_t v21 = *(std::__shared_weak_count **)(v18 + 304);
  if (v21)
  {
    atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v22 = *(std::__shared_weak_count **)(v9 + 336);
  *(void *)(v9 + 328) = v20;
  *(void *)(v9 + 336) = v21;
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  uint64_t v23 = *(void *)(v18 + 312);
  long long v24 = *(std::__shared_weak_count **)(v18 + 320);
  if (v24)
  {
    atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v25 = *(std::__shared_weak_count **)(v9 + 304);
  *(void *)(v9 + 296) = v23;
  *(void *)(v9 + 304) = v24;
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  uint64_t v26 = *(void *)(v18 + 328);
  std::chrono::steady_clock::time_point v27 = *(std::__shared_weak_count **)(v18 + 336);
  if (v27)
  {
    atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v28 = *(std::__shared_weak_count **)(v9 + 320);
  *(void *)(v9 + 312) = v26;
  *(void *)(v9 + 320) = v27;
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  *(_WORD *)(v9 + 370) = *(_WORD *)(v18 + 344);
  SharedObjectPool::get<VoiceConfig>(&v52, (long long **)v50);
  long long v51 = v50;
  if (*((void *)&v50 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v50 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  NeuralTTSUtils::stress_marker((uint64_t *)&v51, v9 + 344, (BOOL *)(v9 + 368));
  if (*((void *)&v51 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v51 + 1));
  }
  if (*(char *)(v9 + 367) < 0)
  {
    if (*(void *)(v9 + 352)) {
      goto LABEL_49;
    }
LABEL_52:
    VoiceConfig::get_param<std::string>(&v58, v52, 1818324583, 0);
    if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v58.__r_.__value_.__l.__size_ == 5)
      {
        long long v31 = (std::string *)v58.__r_.__value_.__r.__words[0];
        if (*(_DWORD *)v58.__r_.__value_.__l.__data_ == 1227714149
          && *(unsigned char *)(v58.__r_.__value_.__r.__words[0] + 4) == 78)
        {
          goto LABEL_87;
        }
        goto LABEL_80;
      }
    }
    else if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) == 5)
    {
      if (LODWORD(v58.__r_.__value_.__l.__data_) == 1227714149 && v58.__r_.__value_.__s.__data_[4] == 78) {
        goto LABEL_87;
      }
      long long v31 = &v58;
LABEL_80:
      int data = (int)v31->__r_.__value_.__l.__data_;
      int v40 = v31->__r_.__value_.__s.__data_[4];
      if (data != 1177383526 || v40 != 82) {
        goto LABEL_84;
      }
LABEL_87:
      MEMORY[0x210558E70](v9 + 344, "\"");
      char v42 = 1;
LABEL_88:
      *(unsigned char *)(v9 + 368) = v42;
      *(unsigned char *)(v9 + 369) = 1;
      if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v58.__r_.__value_.__l.__data_);
      }
      goto LABEL_90;
    }
LABEL_84:
    MEMORY[0x210558E70](v9 + 344, ":");
    char v42 = 0;
    goto LABEL_88;
  }
  if (!*(unsigned char *)(v9 + 367)) {
    goto LABEL_52;
  }
LABEL_49:
  *(unsigned char *)(v9 + 369) = 0;
  (*(void (**)(void **__return_ptr))(*(void *)v52 + 72))(&__p);
  if ((_BYTE)__p)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::vector<std::string>,std::vector<std::string>,0>((std::vector<std::string> *)&v58, (unsigned __int8 *)&__p);
    int v29 = __p;
  }
  else
  {
    int v29 = 0;
    memset(&v58, 0, sizeof(v58));
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v55, v29);
  for (std::string::size_type i = v58.__r_.__value_.__r.__words[0]; i != v58.__r_.__value_.__l.__size_; i += 24)
  {
    int v33 = *(char *)(i + 23);
    if (v33 < 0)
    {
      if (*(void *)(i + 8) != 6) {
        continue;
      }
      std::string::size_type v34 = *(void *)i;
    }
    else
    {
      std::string::size_type v34 = i;
      if (v33 != 6) {
        continue;
      }
    }
    int v35 = *(_DWORD *)v34;
    int v36 = *(unsigned __int16 *)(v34 + 4);
    if (v35 == 1701999731 && v36 == 29555)
    {
      *(unsigned char *)(v9 + 369) = 1;
      break;
    }
  }
  std::string __p = &v58;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
LABEL_90:
  if (v53) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v53);
  }
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  if (*((void *)&v50 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v50 + 1));
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  long long v43 = (std::string::size_type *)(a1 + 8);
  uint64_t v44 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    std::string::size_type v45 = a1 + 8;
    if (*(char *)(a1 + 31) < 0) {
      std::string::size_type v45 = *v43;
    }
    v46.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    LODWORD(v58.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)v58.__r_.__value_.__r.__words + 4) = v45;
    WORD2(v58.__r_.__value_.__r.__words[1]) = 2048;
    *(double *)((char *)&v58.__r_.__value_.__r.__words[1] + 6) = (double)((v46.__d_.__rep_ - v7.__d_.__rep_) / 1000000)
                                                               / 1000.0;
    _os_log_impl(&dword_20CD80000, v44, OS_LOG_TYPE_INFO, "Init latency (%s): %.3f s", (uint8_t *)&v58, 0x16u);
  }
  if (*(char *)(a1 + 31) < 0) {
    long long v43 = (std::string::size_type *)*v43;
  }
  v47.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "Init latency (%s): %.3f s", v48, v43, (double)((v47.__d_.__rep_ - v7.__d_.__rep_) / 1000000) / 1000.0);
  if (*((void *)&v50 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v50 + 1));
  }
  result.n128_u64[0] = v10;
  result.n128_u64[1] = v9;
  *a4 = result;
  return result;
}

void sub_20D457DBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v37);
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  if (a33 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v33 + 367) < 0) {
    operator delete(*v36);
  }
  long long v39 = *(std::__shared_weak_count **)(v33 + 336);
  if (v39) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v39);
  }
  int v40 = *(std::__shared_weak_count **)(v33 + 320);
  if (v40) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v40);
  }
  uint64_t v41 = *(std::__shared_weak_count **)(v33 + 304);
  if (v41) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v41);
  }
  Module::~Module(v35);
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v33);
  operator delete(v42);
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  _Unwind_Resume(a1);
}

void sub_20D457ED8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24)
{
  if (a24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a24);
  }
  JUMPOUT(0x20D457EACLL);
}

void sub_20D457EEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (!a14) {
    JUMPOUT(0x20D457ED0);
  }
  JUMPOUT(0x20D457EC8);
}

uint64_t std::__shared_ptr_emplace<HydraAdapterModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<HydraAdapterModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C216B40;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<HydraAdapterModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C216B40;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<HydraAdapterModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<HydraAdapterModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0) {
    operator delete(__p[1]);
  }
  operator delete(__p);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<HydraAdapterModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<HydraAdapterModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<HydraAdapterModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<HydraAdapterModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, void *a2)
{
  *a2 = off_26C211C58;
  uint64_t v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void *std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<HydraAdapterModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<HydraAdapterModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  void *v2 = off_26C211C58;
  long long v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(void *)(a1 + 24);
  }
  return v2;
}

void sub_20D4580B4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<HydraAdapterModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<HydraAdapterModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C211C58;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x2105595E0);
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<HydraAdapterModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<HydraAdapterModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C211C58;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

char **std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<AudioMarkerModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<AudioMarkerModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<AudioMarkerModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<AudioMarkerModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

__n128 std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<AudioMarkerModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<AudioMarkerModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, char *a2@<X1>, long long *a3@<X2>, __n128 *a4@<X8>)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  long long v19 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  v7.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  unint64_t v8 = operator new(0x128uLL);
  unint64_t v9 = (unint64_t)v8;
  v8[1] = 0;
  _OWORD v8[2] = 0;
  void *v8 = off_26C2166E0;
  unint64_t v10 = v8 + 3;
  if (*((void *)&v19 + 1))
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v19 + 1) + 8), 1uLL, memory_order_relaxed);
    *(_OWORD *)std::string buf = v19;
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v19 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  else
  {
    *(_OWORD *)std::string buf = (unint64_t)v19;
  }
  Module::Module((uint64_t)(v8 + 3), a2, (uint64_t *)buf);
  if (*(void *)&buf[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
  }
  *unint64_t v10 = off_26C201D00;
  if (*((void *)&v19 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v19 + 1));
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  float v11 = (void *)(a1 + 8);
  BOOL v12 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    unint64_t v13 = a4;
    uint64_t v14 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      uint64_t v14 = (void *)*v11;
    }
    v15.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    *(_DWORD *)std::string buf = 136315394;
    *(void *)&uint8_t buf[4] = v14;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(double *)&buf[14] = (double)((v15.__d_.__rep_ - v7.__d_.__rep_) / 1000000) / 1000.0;
    _os_log_impl(&dword_20CD80000, v12, OS_LOG_TYPE_INFO, "Init latency (%s): %.3f s", buf, 0x16u);
    a4 = v13;
  }
  if (*(char *)(a1 + 31) < 0) {
    float v11 = (void *)*v11;
  }
  v16.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "Init latency (%s): %.3f s", v17, v11, (double)((v16.__d_.__rep_ - v7.__d_.__rep_) / 1000000) / 1000.0);
  if (*((void *)&v19 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v19 + 1));
  }
  result.n128_u64[0] = (unint64_t)v10;
  result.n128_u64[1] = v9;
  *a4 = result;
  return result;
}

void sub_20D458424(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, long long a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  std::__shared_weak_count::~__shared_weak_count(v13);
  operator delete(v16);
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<AudioMarkerModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<AudioMarkerModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C2166E0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<AudioMarkerModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C2166E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<AudioMarkerModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<AudioMarkerModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0) {
    operator delete(__p[1]);
  }
  operator delete(__p);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<AudioMarkerModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<AudioMarkerModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<AudioMarkerModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<AudioMarkerModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, void *a2)
{
  *a2 = off_26C211A48;
  uint64_t v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void *std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<AudioMarkerModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<AudioMarkerModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  void *v2 = off_26C211A48;
  long long v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(void *)(a1 + 24);
  }
  return v2;
}

void sub_20D458624(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<AudioMarkerModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<AudioMarkerModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C211A48;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x2105595E0);
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<AudioMarkerModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<AudioMarkerModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C211A48;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

char **std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<WhisperModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<WhisperModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<WhisperModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<WhisperModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

__n128 std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<WhisperModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<WhisperModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, char *a2@<X1>, long long *a3@<X2>, __n128 *a4@<X8>)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  long long v19 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  v18.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  std::chrono::steady_clock::time_point v7 = operator new(0x160uLL);
  unint64_t v8 = (unint64_t)v7;
  v7[1] = 0;
  v7[2] = 0;
  void *v7 = off_26C215A68;
  unint64_t v9 = (unint64_t)(v7 + 3);
  if (*((void *)&v19 + 1))
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v19 + 1) + 8), 1uLL, memory_order_relaxed);
    long long v21 = v19;
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v19 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  else
  {
    long long v21 = (unint64_t)v19;
  }
  Module::Module((uint64_t)(v7 + 3), a2, (uint64_t *)&v21);
  if (*((void *)&v21 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v21 + 1));
  }
  *(void *)(v8 + ++*(_DWORD *)(result + 24) = off_26C2009A0;
  *(_WORD *)(v8 + 296) = 0;
  *(_DWORD *)(v8 + 300) = 48000;
  *(_OWORD *)(v8 + 304) = 0u;
  *(_OWORD *)(v8 + 320) = 0u;
  *(_OWORD *)(v8 + 336) = 0u;
  std::string::basic_string[abi:ne180100]<0>(__p, "sample_rate");
  unsigned int v20 = 48000;
  *(_DWORD *)(v8 + 300) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>(a2, (const void **)__p, &v20);
  if (v23 < 0) {
    operator delete(*(void **)__p);
  }
  SharedObjectPool::get<SynthesizerConfig>(__p, v19);
  unint64_t v10 = *(std::__shared_weak_count **)&__p[8];
  *(unsigned char *)(v8 + 297) = *(unsigned char *)(*(void *)__p + 1);
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  if (*((void *)&v19 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v19 + 1));
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  float v11 = (void *)(a1 + 8);
  BOOL v12 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    unint64_t v13 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      unint64_t v13 = (void *)*v11;
    }
    v14.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    *(_DWORD *)std::string __p = 136315394;
    *(void *)&__p[4] = v13;
    *(_WORD *)&unsigned char __p[12] = 2048;
    *(double *)&__p[14] = (double)((v14.__d_.__rep_ - v18.__d_.__rep_) / 1000000) / 1000.0;
    _os_log_impl(&dword_20CD80000, v12, OS_LOG_TYPE_INFO, "Init latency (%s): %.3f s", __p, 0x16u);
  }
  if (*(char *)(a1 + 31) < 0) {
    float v11 = (void *)*v11;
  }
  v15.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "Init latency (%s): %.3f s", v16, v11, (double)((v15.__d_.__rep_ - v18.__d_.__rep_) / 1000000) / 1000.0);
  if (*((void *)&v19 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v19 + 1));
  }
  result.n128_u64[0] = v9;
  result.n128_u64[1] = v8;
  *a4 = result;
  return result;
}

void sub_20D4589F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, long long a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  p_shared_weak_owners = (void **)&v23[12].__shared_weak_owners_;
  shared_weak_owners = (std::__shared_weak_count_vtbl *)v23[13].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    v23[14].__vftable = shared_weak_owners;
    operator delete(shared_weak_owners);
  }
  int v29 = (std::__shared_weak_count_vtbl *)*p_shared_weak_owners;
  if (*p_shared_weak_owners)
  {
    v23[13].__vftable = v29;
    operator delete(v29);
  }
  Module::~Module(v25);
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  std::__shared_weak_count::~__shared_weak_count(v23);
  operator delete(v30);
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<WhisperModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<WhisperModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C215A68;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<WhisperModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C215A68;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<WhisperModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<WhisperModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0) {
    operator delete(__p[1]);
  }
  operator delete(__p);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<WhisperModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<WhisperModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<WhisperModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<WhisperModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, void *a2)
{
  *a2 = off_26C2117E0;
  uint64_t v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void *std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<WhisperModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<WhisperModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  void *v2 = off_26C2117E0;
  long long v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(void *)(a1 + 24);
  }
  return v2;
}

void sub_20D458C48(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<WhisperModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<WhisperModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C2117E0;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x2105595E0);
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<WhisperModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<WhisperModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C2117E0;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

char **std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<SilenceTrimmingStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<SilenceTrimmingStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<SilenceTrimmingStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<SilenceTrimmingStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

__n128 std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<SilenceTrimmingStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<SilenceTrimmingStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, char *a2@<X1>, long long *a3@<X2>, __n128 *a4@<X8>)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  long long v19 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  v7.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  unint64_t v8 = operator new(0x148uLL);
  unint64_t v9 = (unint64_t)v8;
  v8[1] = 0;
  _OWORD v8[2] = 0;
  void *v8 = off_26C2172B0;
  unint64_t v10 = (unint64_t)(v8 + 3);
  if (*((void *)&v19 + 1))
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v19 + 1) + 8), 1uLL, memory_order_relaxed);
    *(_OWORD *)std::string buf = v19;
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v19 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  else
  {
    *(_OWORD *)std::string buf = (unint64_t)v19;
  }
  Module::Module((uint64_t)(v8 + 3), a2, (uint64_t *)buf);
  if (*(void *)&buf[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
  }
  *(void *)(v9 + ++*(_DWORD *)(result + 24) = off_26C203220;
  *(_DWORD *)(v9 + 296) = 48000;
  *(void *)(v9 + 312) = 0;
  *(void *)(v9 + 320) = 0;
  *(void *)(v9 + 304) = 0;
  if (*((void *)&v19 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v19 + 1));
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  float v11 = (void *)(a1 + 8);
  BOOL v12 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    unint64_t v13 = a4;
    std::chrono::steady_clock::time_point v14 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      std::chrono::steady_clock::time_point v14 = (void *)*v11;
    }
    v15.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    *(_DWORD *)std::string buf = 136315394;
    *(void *)&uint8_t buf[4] = v14;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(double *)&buf[14] = (double)((v15.__d_.__rep_ - v7.__d_.__rep_) / 1000000) / 1000.0;
    _os_log_impl(&dword_20CD80000, v12, OS_LOG_TYPE_INFO, "Init latency (%s): %.3f s", buf, 0x16u);
    a4 = v13;
  }
  if (*(char *)(a1 + 31) < 0) {
    float v11 = (void *)*v11;
  }
  v16.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "Init latency (%s): %.3f s", v17, v11, (double)((v16.__d_.__rep_ - v7.__d_.__rep_) / 1000000) / 1000.0);
  if (*((void *)&v19 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v19 + 1));
  }
  result.n128_u64[0] = v10;
  result.n128_u64[1] = v9;
  *a4 = result;
  return result;
}

void sub_20D458FC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, long long a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  std::__shared_weak_count::~__shared_weak_count(v13);
  operator delete(v16);
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<SilenceTrimmingStream>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<SilenceTrimmingStream>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C2172B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<SilenceTrimmingStream>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C2172B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<SilenceTrimmingStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<SilenceTrimmingStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0) {
    operator delete(__p[1]);
  }
  operator delete(__p);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<SilenceTrimmingStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<SilenceTrimmingStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<SilenceTrimmingStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<SilenceTrimmingStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, void *a2)
{
  *a2 = off_26C212020;
  uint64_t v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void *std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<SilenceTrimmingStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<SilenceTrimmingStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  void *v2 = off_26C212020;
  long long v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(void *)(a1 + 24);
  }
  return v2;
}

void sub_20D4591C8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<SilenceTrimmingStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<SilenceTrimmingStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C212020;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x2105595E0);
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<SilenceTrimmingStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<SilenceTrimmingStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C212020;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

char **std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<WsolaStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<WsolaStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<WsolaStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<WsolaStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

__n128 std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<WsolaStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<WsolaStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, char *a2@<X1>, long long *a3@<X2>, __n128 *a4@<X8>)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  long long v19 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  v7.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  unint64_t v8 = operator new(0x140uLL);
  unint64_t v9 = (unint64_t)v8;
  v8[1] = 0;
  _OWORD v8[2] = 0;
  void *v8 = off_26C2154F0;
  unint64_t v10 = (unint64_t)(v8 + 3);
  if (*((void *)&v19 + 1))
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v19 + 1) + 8), 1uLL, memory_order_relaxed);
    *(_OWORD *)std::string buf = v19;
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v19 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  else
  {
    *(_OWORD *)std::string buf = (unint64_t)v19;
  }
  Module::Module((uint64_t)(v8 + 3), a2, (uint64_t *)buf);
  if (*(void *)&buf[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
  }
  *(void *)(v9 + ++*(_DWORD *)(result + 24) = off_26C1FFCD0;
  *(void *)(v9 + 296) = 0;
  *(void *)(v9 + 304) = 0;
  *(_DWORD *)(v9 + 312) = 48000;
  *(unsigned char *)(v9 + 316) = 0;
  if (*((void *)&v19 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v19 + 1));
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  float v11 = (void *)(a1 + 8);
  BOOL v12 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    unint64_t v13 = a4;
    std::chrono::steady_clock::time_point v14 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      std::chrono::steady_clock::time_point v14 = (void *)*v11;
    }
    v15.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    *(_DWORD *)std::string buf = 136315394;
    *(void *)&uint8_t buf[4] = v14;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(double *)&buf[14] = (double)((v15.__d_.__rep_ - v7.__d_.__rep_) / 1000000) / 1000.0;
    _os_log_impl(&dword_20CD80000, v12, OS_LOG_TYPE_INFO, "Init latency (%s): %.3f s", buf, 0x16u);
    a4 = v13;
  }
  if (*(char *)(a1 + 31) < 0) {
    float v11 = (void *)*v11;
  }
  v16.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "Init latency (%s): %.3f s", v17, v11, (double)((v16.__d_.__rep_ - v7.__d_.__rep_) / 1000000) / 1000.0);
  if (*((void *)&v19 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v19 + 1));
  }
  result.n128_u64[0] = v10;
  result.n128_u64[1] = v9;
  *a4 = result;
  return result;
}

void sub_20D459548(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, long long a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  std::__shared_weak_count::~__shared_weak_count(v13);
  operator delete(v16);
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<WsolaStream>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<WsolaStream>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C2154F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<WsolaStream>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C2154F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<WsolaStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<WsolaStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0) {
    operator delete(__p[1]);
  }
  operator delete(__p);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<WsolaStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<WsolaStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<WsolaStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<WsolaStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, void *a2)
{
  *a2 = off_26C2116D8;
  uint64_t v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void *std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<WsolaStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<WsolaStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  void *v2 = off_26C2116D8;
  long long v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(void *)(a1 + 24);
  }
  return v2;
}

void sub_20D459748(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<WsolaStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<WsolaStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C2116D8;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x2105595E0);
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<WsolaStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<WsolaStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C2116D8;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

char **std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<PsolaStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<PsolaStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<PsolaStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<PsolaStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

__n128 std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<PsolaStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<PsolaStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, char *a2@<X1>, long long *a3@<X2>, __n128 *a4@<X8>)
{
  uint64_t v67 = *MEMORY[0x263EF8340];
  long long v57 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  v7.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  unint64_t v8 = operator new(0x208uLL);
  unint64_t v9 = (unint64_t)v8;
  v8[1] = 0;
  _OWORD v8[2] = 0;
  void *v8 = off_26C215448;
  unint64_t v10 = (unint64_t)(v8 + 3);
  if (*((void *)&v57 + 1))
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v57 + 1) + 8), 1uLL, memory_order_relaxed);
    long long v62 = v57;
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v57 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  else
  {
    long long v62 = (unint64_t)v57;
  }
  Module::Module((uint64_t)(v8 + 3), a2, (uint64_t *)&v62);
  char v56 = a4;
  if (*((void *)&v62 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v62 + 1));
  }
  *(void *)(v9 + ++*(_DWORD *)(result + 24) = off_26C1FFA48;
  *(_DWORD *)(v9 + 296) = 48000;
  *(void *)(v9 + 304) = 0;
  *(void *)(v9 + 312) = 0;
  *(int32x2_t *)(v9 + 320) = vdup_n_s32(0x42C80000u);
  *(_DWORD *)(v9 + 328) = 1117782016;
  *(_OWORD *)(v9 + 344) = 0u;
  *(_OWORD *)(v9 + 360) = 0u;
  *(_OWORD *)(v9 + 376) = 0u;
  *(void *)(v9 + 416) = 0;
  *(void *)(v9 + 4++*(_DWORD *)(result + 24) = 0;
  *(void *)(v9 + 408) = 0;
  *(_OWORD *)(v9 + 440) = 0u;
  *(_OWORD *)(v9 + 456) = 0u;
  *(_OWORD *)(v9 + 472) = 0u;
  *(_OWORD *)(v9 + 488) = 0u;
  *(_OWORD *)(v9 + 504) = 0u;
  SharedObjectPool::get<Database>(&v60, v57);
  SharedObjectPool::get<VoiceConfig>(&v58, (long long **)v57);
  (*(void (**)(unsigned char *__return_ptr))(*(void *)v58 + 16))(v63);
  float v11 = &fst::TropicalWeightTpl<float>::Type(void)::type;
  if (*(void *)&v63[24])
  {
    uint64_t v12 = v60;
    unint64_t v13 = (char *)operator new(0x88uLL);
    std::chrono::steady_clock::time_point v14 = v13;
    *((void *)v13 + 1) = 0;
    *((void *)v13 + 2) = 0;
    *(void *)unint64_t v13 = off_26C216BE8;
    uint64_t v15 = *(void *)v63;
    uint64_t v16 = *(void *)&v63[8];
    *((void *)v13 + 4) = v12;
    *((void *)v13 + 5) = v15;
    *((void *)v13 + 6) = v16;
    if (v16)
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
      uint64_t v15 = *((void *)v13 + 5);
    }
    *(_OWORD *)(v13 + 56) = *(_OWORD *)&v63[16];
    *((_DWORD *)v13 + 32) = 1;
    if (v15)
    {
      int v17 = (_DWORD *)*((void *)v13 + 7);
      int v18 = *v17;
      int v19 = 4 * *v17;
      *((_DWORD *)v13 + 19) = v19;
      unsigned int v20 = v17[1];
      *((_DWORD *)v13 + 20) = v20;
      int v21 = v17[4];
      *((_DWORD *)v13 + 25) = v21;
      int v22 = v17[2] * v21;
      *((_DWORD *)v13 + 21) = v22;
      int v23 = v17[5];
      *((_DWORD *)v13 + 6) = v23;
      int v24 = v17[3] * v23;
      *((_DWORD *)v13 + 22) = v24;
      *((_DWORD *)v13 + 23) = v19;
      int v25 = v22 + 4 * v18;
      *((_DWORD *)v13 + ++*(_DWORD *)(result + 24) = v25;
      int v26 = 1 << (8 * *((unsigned char *)v17 + 20) - 1);
      *((_DWORD *)v13 + 31) = v26;
      if (v20)
      {
        char v27 = v17[6];
        int v28 = 1 << v27;
        int v29 = v26 << v27;
        long long v31 = v13 + 64;
        uint64_t v30 = *((void *)v13 + 8);
        *((_DWORD *)v13 + 31) = v29;
        *((_DWORD *)v13 + 7) = v28;
        uint64_t v32 = (v24 + v25);
        if (v30 == v32)
        {
          if (v20 < 2)
          {
            LOBYTE(v15) = 1;
          }
          else
          {
            if (Diagnostics_GetLogObject(void)::onceToken != -1) {
              dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
            }
            uint64_t v33 = Diagnostics_GetLogObject(void)::__profile_log_default;
            if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
            {
              int v35 = *((_DWORD *)v14 + 20);
              int v36 = *((_DWORD *)v14 + 32);
              *(_DWORD *)std::string buf = 67109376;
              *(_DWORD *)&uint8_t buf[4] = v35;
              *(_WORD *)&uint8_t buf[8] = 1024;
              *(_DWORD *)&buf[10] = v36;
              _os_log_impl(&dword_20CD80000, v33, OS_LOG_TYPE_ERROR, "Pitchmark file version %d is not supported. Latest supported version is %d.", buf, 0xEu);
            }
            Diagnostics::log(3, "Pitchmark file version %d is not supported. Latest supported version is %d.", v34, *((unsigned int *)v14 + 20), *((unsigned int *)v14 + 32));
            LOBYTE(v15) = 0;
            float v11 = &fst::TropicalWeightTpl<float>::Type(void)::type;
          }
          goto LABEL_27;
        }
      }
      else
      {
        long long v31 = v13 + 64;
        uint64_t v38 = *((void *)v13 + 8);
        LOBYTE(v15) = 1;
        *((_DWORD *)v13 + 7) = 1;
        uint64_t v32 = (v24 + v25);
        if (v38 == v32) {
          goto LABEL_27;
        }
      }
      if (Diagnostics_GetLogObject(void)::onceToken != -1) {
        dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
      }
      long long v39 = Diagnostics_GetLogObject(void)::__profile_log_default;
      if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
      {
        uint64_t v41 = *v31;
        *(_DWORD *)std::string buf = 134218240;
        *(void *)&uint8_t buf[4] = v41;
        *(_WORD *)&unsigned char buf[12] = 1024;
        int v65 = v32;
        _os_log_impl(&dword_20CD80000, v39, OS_LOG_TYPE_ERROR, "Pitchmark header is inconsistent with pitchmark file size: %zu %u", buf, 0x12u);
      }
      Diagnostics::log(3, "Pitchmark header is inconsistent with pitchmark file size: %zu %u", v40, *v31, v32);
      LOBYTE(v15) = 0;
      float v11 = &fst::TropicalWeightTpl<float>::Type(void)::type;
    }
LABEL_27:
    v14[72] = v15;
    *((void *)v14 + 13) = 0x300000BB80;
    *((_DWORD *)v14 + 28) = 240;
    uint64_t v42 = *((void *)v14 + 4);
    std::string::basic_string[abi:ne180100]<0>(buf, "duration");
    long long v43 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>((void *)(v42 + 304), buf);
    if (v43) {
      int v44 = *((_DWORD *)v43 + 10);
    }
    else {
      int v44 = -1;
    }
    *((_DWORD *)v14 + 29) = v44;
    if (v66 < 0) {
      operator delete(*(void **)buf);
    }
    uint64_t v45 = *((void *)v14 + 4);
    std::string::basic_string[abi:ne180100]<0>(buf, "name");
    std::chrono::steady_clock::time_point v46 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>((void *)(v45 + 304), buf);
    if (v46) {
      int v47 = *((_DWORD *)v46 + 10);
    }
    else {
      int v47 = -1;
    }
    *((_DWORD *)v14 + 30) = v47;
    if (v66 < 0) {
      operator delete(*(void **)buf);
    }
    *((_DWORD *)v14 + 33) = 2;
    *(void *)&long long v48 = v14 + 24;
    *((void *)&v48 + 1) = v14;
    uint64_t v37 = *(std::__shared_weak_count **)(v9 + 312);
    *(_OWORD *)(v9 + 304) = v48;
    if (v37) {
      goto LABEL_38;
    }
    goto LABEL_39;
  }
  uint64_t v37 = *(std::__shared_weak_count **)(v9 + 312);
  *(void *)(v9 + 304) = 0;
  *(void *)(v9 + 312) = 0;
  if (v37) {
LABEL_38:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v37);
LABEL_39:
  if (*(void *)&v63[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v63[8]);
  }
  if (v59) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v59);
  }
  if (v61) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v61);
  }
  if (*((void *)&v57 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v57 + 1));
  }
  if (v11[34] != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  uint64_t v49 = (void *)(a1 + 8);
  long long v50 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    long long v51 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      long long v51 = (void *)*v49;
    }
    v52.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    *(_DWORD *)unint64_t v63 = 136315394;
    *(void *)&v63[4] = v51;
    *(_WORD *)&v63[12] = 2048;
    *(double *)&v63[14] = (double)((v52.__d_.__rep_ - v7.__d_.__rep_) / 1000000) / 1000.0;
    _os_log_impl(&dword_20CD80000, v50, OS_LOG_TYPE_INFO, "Init latency (%s): %.3f s", v63, 0x16u);
  }
  if (*(char *)(a1 + 31) < 0) {
    uint64_t v49 = (void *)*v49;
  }
  v53.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "Init latency (%s): %.3f s", v54, v49, (double)((v53.__d_.__rep_ - v7.__d_.__rep_) / 1000000) / 1000.0);
  if (*((void *)&v57 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v57 + 1));
  }
  result.n128_u64[0] = v10;
  result.n128_u64[1] = v9;
  __n128 *v56 = result;
  return result;
}

void sub_20D459EB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, uint64_t a20,uint64_t *p_shared_weak_owners,std::__shared_weak_count *a22)
{
  int v28 = (std::__shared_weak_count *)v25[2].__vftable;
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  std::__shared_weak_count::~__shared_weak_count(v25);
  operator delete(v29);
  if (a22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a22);
  }
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  uint64_t v30 = (void **)(v26 + 384);
  p_shared_weak_owners = &v22[20].__shared_weak_owners_;
  std::vector<Prompt>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_shared_weak_owners);
  p_shared_weak_owners = (uint64_t *)(v26 + 448);
  std::vector<UnitFeature>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_shared_weak_owners);
  shared_owners = (void *)v22[18].__shared_owners_;
  if (shared_owners)
  {
    v22[18].__shared_weak_owners_ = (uint64_t)shared_owners;
    operator delete(shared_owners);
  }
  uint64_t v32 = *v30;
  if (*v30)
  {
    v22[17].__shared_owners_ = (uint64_t)v32;
    operator delete(v32);
  }
  uint64_t v33 = (void **)(v26 + 320);
  std::string::size_type v34 = (void *)v22[15].__shared_owners_;
  if (v34) {
    operator delete(v34);
  }
  int v35 = *v33;
  if (*v33)
  {
    v22[14].__shared_weak_owners_ = (uint64_t)v35;
    operator delete(v35);
  }
  int v36 = (std::__shared_weak_count *)v22[13].__vftable;
  if (v36) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v36);
  }
  Module::~Module(v24);
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  std::__shared_weak_count::~__shared_weak_count(v22);
  operator delete(v37);
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  _Unwind_Resume(a1);
}

void sub_20D459FBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20)
{
  if (a20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a20);
  }
  JUMPOUT(0x20D459F90);
}

void sub_20D459FD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (!a14) {
    JUMPOUT(0x20D459FB4);
  }
  JUMPOUT(0x20D459FACLL);
}

uint64_t std::__shared_ptr_emplace<PsolaStream>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<PsolaStream>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C215448;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<PsolaStream>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C215448;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<PsolaStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<PsolaStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0) {
    operator delete(__p[1]);
  }
  operator delete(__p);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<PsolaStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<PsolaStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<PsolaStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<PsolaStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, void *a2)
{
  *a2 = off_26C211680;
  uint64_t v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void *std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<PsolaStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<PsolaStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  void *v2 = off_26C211680;
  long long v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(void *)(a1 + 24);
  }
  return v2;
}

void sub_20D45A198(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<PsolaStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<PsolaStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C211680;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x2105595E0);
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<PsolaStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<PsolaStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C211680;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

char **std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<UnitSegmentStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<UnitSegmentStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<UnitSegmentStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<UnitSegmentStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<UnitSegmentStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<UnitSegmentStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()(uint64_t a1@<X0>, long long *a2@<X2>, _OWORD *a3@<X8>)
{
  uint64_t v61 = *MEMORY[0x263EF8340];
  long long v52 = *a2;
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  v5.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  std::chrono::steady_clock::time_point v6 = operator new(0x180uLL);
  std::chrono::steady_clock::time_point v7 = v6;
  v6[1] = 0;
  v6[2] = 0;
  void *v6 = off_26C216A60;
  unint64_t v8 = v6 + 3;
  if (*((void *)&v52 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v52 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  Module::Module((Module *)(v6 + 3));
  v7[3] = off_26C202208;
  std::chrono::steady_clock::time_point v53 = v7 + 39;
  *(_OWORD *)(v7 + 37) = 0u;
  *(_OWORD *)(v7 + 39) = 0u;
  *(_OWORD *)(v7 + 41) = 0u;
  *(_OWORD *)(v7 + 43) = 0u;
  v7[45] = 0;
  v7[46] = 48000;
  *((_DWORD *)v7 + 94) = 0;
  long long v51 = v8;
  SharedObjectPool::get<VoiceConfig>(&v56, (long long **)v52);
  (*(void (**)(uint64_t *__return_ptr))(*(void *)v56 + 16))(&v54);
  SharedObjectPool::get<GeneratedPromptDB>(buf, v52);
  long long v50 = a3;
  unint64_t v9 = (std::__shared_weak_count *)v7[43];
  *((_OWORD *)v7 + 21) = *(_OWORD *)buf;
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  int v10 = 0;
  long long v48 = (void *)(a1 + 8);
  uint64_t v49 = a1;
  do
  {
    int v11 = *((_DWORD *)v7 + 92);
    uint64_t v12 = (std::__shared_weak_count *)operator new(0xD0uLL);
    v12->__shared_owners_ = 0;
    v12->__shared_weak_owners_ = 0;
    v12->__vftable = (std::__shared_weak_count_vtbl *)off_26C215AA0;
    AudioExtractor::AudioExtractor((AudioExtractor *)&v12[1], (const MemoryMap *)&v54, ((double)v11 / 1000.0));
    std::chrono::steady_clock::time_point v14 = (void *)v7[40];
    unint64_t v13 = v7[41];
    if ((unint64_t)v14 < v13)
    {
      void *v14 = v12 + 1;
      v14[1] = v12;
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v15 = v14 + 2;
      v7[40] = v14 + 2;
      goto LABEL_24;
    }
    uint64_t v16 = (void *)*v53;
    uint64_t v17 = ((uint64_t)v14 - *v53) >> 4;
    unint64_t v18 = v17 + 1;
    if ((unint64_t)(v17 + 1) >> 60) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v19 = v13 - (void)v16;
    if (v19 >> 3 > v18) {
      unint64_t v18 = v19 >> 3;
    }
    if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v20 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v20 = v18;
    }
    if (v20 >> 60) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    int v21 = (char *)operator new(16 * v20);
    *(void *)&long long v22 = v12 + 1;
    *((void *)&v22 + 1) = v12;
    int v23 = &v21[16 * v17];
    int v24 = &v21[16 * v20];
    *(_OWORD *)int v23 = v22;
    uint64_t v15 = v23 + 16;
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    if (v14 == v16)
    {
      v7[39] = v23;
      v7[40] = v15;
      v7[41] = v24;
      if (v14) {
        goto LABEL_23;
      }
    }
    else
    {
      do
      {
        long long v25 = *((_OWORD *)v14 - 1);
        v14 -= 2;
        *((_OWORD *)v23 - 1) = v25;
        v23 -= 16;
        void *v14 = 0;
        v14[1] = 0;
      }
      while (v14 != v16);
      uint64_t v26 = (void *)v7[39];
      std::chrono::steady_clock::time_point v14 = (void *)v7[40];
      v7[39] = v23;
      v7[40] = v15;
      v7[41] = v24;
      if (v14 != v26)
      {
        do
        {
          char v27 = (std::__shared_weak_count *)*(v14 - 1);
          if (v27) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v27);
          }
          v14 -= 2;
        }
        while (v14 != v26);
        std::chrono::steady_clock::time_point v14 = v26;
      }
      if (v14) {
LABEL_23:
      }
        operator delete(v14);
    }
LABEL_24:
    v7[40] = v15;
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
    ++v10;
  }
  while (v10 != 4);
  int v28 = operator new(0x30uLL);
  v28[1] = 0;
  v28[2] = 0;
  v28[3] = 0;
  int v29 = v28 + 3;
  *int v28 = off_26C219738;
  v28[4] = 0;
  v28[5] = 0;
  uint64_t v30 = (std::__shared_weak_count *)v7[38];
  v7[37] = v28 + 3;
  v7[38] = v28;
  long long v31 = v48;
  if (v30)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v30);
    int v29 = (uint64_t *)v7[37];
  }
  unint64_t v32 = v29[2];
  unint64_t v33 = v29[1];
  if (v33 >= v32)
  {
    unint64_t v35 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v33 - *v29) >> 3);
    unint64_t v36 = v35 + 1;
    if (v35 + 1 > 0x222222222222222) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v37 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v32 - *v29) >> 3);
    if (2 * v37 > v36) {
      unint64_t v36 = 2 * v37;
    }
    if (v37 >= 0x111111111111111) {
      unint64_t v38 = 0x222222222222222;
    }
    else {
      unint64_t v38 = v36;
    }
    uint64_t v60 = v29 + 2;
    if (v38) {
      unint64_t v38 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AudioSegmentation>>(v38);
    }
    else {
      uint64_t v39 = 0;
    }
    unint64_t v40 = v38 + 120 * v35;
    *(void *)std::string buf = v38;
    *(void *)&uint8_t buf[8] = v40;
    unint64_t v59 = v38 + 120 * v39;
    *(_OWORD *)unint64_t v40 = 0u;
    *(_OWORD *)(v40 + 16) = 0u;
    *(_OWORD *)(v40 + 32) = 0u;
    *(_OWORD *)(v40 + 48) = 0u;
    *(_OWORD *)(v40 + 80) = 0u;
    *(_OWORD *)(v40 + 96) = 0u;
    *(void *)(v40 + 104) = 0;
    *(void *)(v40 + 112) = 0;
    *(_OWORD *)(v40 + 64) = 0u;
    *(_WORD *)unint64_t v40 = 257;
    *(_OWORD *)(v40 + ++*(_DWORD *)(result + 24) = 0u;
    *(_OWORD *)(v40 + 8) = 0u;
    *(void *)(v40 + 72) = 0;
    *(_OWORD *)(v40 + 56) = 0u;
    *(_OWORD *)(v40 + 40) = 0u;
    *(void *)(v40 + 96) = 0;
    *(_WORD *)(v40 + 112) = 0;
    *(void *)&buf[16] = v40 + 120;
    std::vector<AudioSegmentation>::__swap_out_circular_buffer(v29, buf);
    uint64_t v34 = v29[1];
    std::__split_buffer<AudioSegmentation>::~__split_buffer((uint64_t)buf);
  }
  else
  {
    *(_OWORD *)unint64_t v33 = 0u;
    *(_OWORD *)(v33 + 16) = 0u;
    *(_OWORD *)(v33 + 32) = 0u;
    *(_OWORD *)(v33 + 48) = 0u;
    *(_OWORD *)(v33 + 80) = 0u;
    *(_OWORD *)(v33 + 96) = 0u;
    *(void *)(v33 + 104) = 0;
    *(void *)(v33 + 112) = 0;
    *(_OWORD *)(v33 + 64) = 0u;
    *(_WORD *)unint64_t v33 = 257;
    *(_OWORD *)(v33 + 8) = 0u;
    *(_OWORD *)(v33 + ++*(_DWORD *)(result + 24) = 0u;
    *(_OWORD *)(v33 + 40) = 0u;
    *(_OWORD *)(v33 + 56) = 0u;
    *(void *)(v33 + 72) = 0;
    *(void *)(v33 + 96) = 0;
    *(_WORD *)(v33 + 112) = 0;
    uint64_t v34 = v33 + 120;
    v29[1] = v33 + 120;
  }
  v29[1] = v34;
  if (*((void *)&v52 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v52 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v41 = (std::__shared_weak_count *)v7[45];
  *((_OWORD *)v7 + 22) = v52;
  if (v41) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v41);
  }
  if (v55) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v55);
  }
  if (v57) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v57);
  }
  if (*((void *)&v52 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v52 + 1));
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  uint64_t v42 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    long long v43 = v48;
    if (*(char *)(v49 + 31) < 0) {
      long long v43 = (void *)*v48;
    }
    v44.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    *(_DWORD *)std::string buf = 136315394;
    *(void *)&uint8_t buf[4] = v43;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(double *)&unsigned char buf[14] = (double)((v44.__d_.__rep_ - v5.__d_.__rep_) / 1000000) / 1000.0;
    _os_log_impl(&dword_20CD80000, v42, OS_LOG_TYPE_INFO, "Init latency (%s): %.3f s", buf, 0x16u);
  }
  if (*(char *)(v49 + 31) < 0) {
    long long v31 = (void *)*v48;
  }
  v45.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "Init latency (%s): %.3f s", v46, v31, (double)((v45.__d_.__rep_ - v5.__d_.__rep_) / 1000000) / 1000.0);
  if (*((void *)&v52 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v52 + 1));
  }
  *(void *)&long long v47 = v51;
  *((void *)&v47 + 1) = v7;
  *long long v50 = v47;
}

void sub_20D45A8CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, Module *a17, std::__shared_weak_count *a18, long long a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,uint64_t a24,uint64_t a25,uint64_t a26,std::__shared_weak_count *a27)
{
  if (a23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a23);
  }
  if (a27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a27);
  }
  int v29 = (std::__shared_weak_count *)v27[15].__vftable;
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
  shared_owners = (std::__shared_weak_count *)v27[14].__shared_owners_;
  if (shared_owners) {
    std::__shared_weak_count::__release_shared[abi:ne180100](shared_owners);
  }
  a22 = a21;
  std::vector<std::shared_ptr<TacotronFeature>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
  shared_weak_owners = (std::__shared_weak_count *)v27[12].__shared_weak_owners_;
  if (shared_weak_owners) {
    std::__shared_weak_count::__release_shared[abi:ne180100](shared_weak_owners);
  }
  Module::~Module(a17);
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  std::__shared_weak_count::~__shared_weak_count(v27);
  operator delete(v32);
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<UnitSegmentStream>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<UnitSegmentStream>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C216A60;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<UnitSegmentStream>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C216A60;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<UnitSegmentStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<UnitSegmentStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0) {
    operator delete(__p[1]);
  }
  operator delete(__p);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<UnitSegmentStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<UnitSegmentStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<UnitSegmentStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<UnitSegmentStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, void *a2)
{
  *a2 = off_26C211B50;
  uint64_t v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void *std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<UnitSegmentStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<UnitSegmentStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  void *v2 = off_26C211B50;
  long long v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(void *)(a1 + 24);
  }
  return v2;
}

void sub_20D45AB64(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<UnitSegmentStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<UnitSegmentStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C211B50;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x2105595E0);
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<UnitSegmentStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<UnitSegmentStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C211B50;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

char **std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<ViterbiStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<ViterbiStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<ViterbiStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<ViterbiStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

__n128 std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<ViterbiStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<ViterbiStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, char *a2@<X1>, long long *a3@<X2>, __n128 *a4@<X8>)
{
  uint64_t v47 = *MEMORY[0x263EF8340];
  long long v39 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  v37.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  std::chrono::steady_clock::time_point v6 = operator new(0x178uLL);
  unint64_t v7 = (unint64_t)v6;
  v6[1] = 0;
  v6[2] = 0;
  void *v6 = off_26C215A30;
  unint64_t v8 = v6 + 3;
  if (*((void *)&v39 + 1))
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v39 + 1) + 8), 1uLL, memory_order_relaxed);
    long long v42 = v39;
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v39 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  else
  {
    long long v42 = (unint64_t)v39;
  }
  Module::Module((uint64_t)(v6 + 3), a2, (uint64_t *)&v42);
  unint64_t v9 = (_OWORD *)(v7 + 296);
  if (*((void *)&v42 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v42 + 1));
  }
  *(void *)(v7 + ++*(_DWORD *)(result + 24) = off_26C200930;
  _OWORD *v9 = 0u;
  *(_OWORD *)(v7 + 312) = 0u;
  *(_OWORD *)(v7 + 328) = 0u;
  *(_OWORD *)(v7 + 344) = 0u;
  *(_OWORD *)(v7 + 360) = 0u;
  unint64_t v38 = (unint64_t)v8;
  SharedObjectPool::get<MDN>(&v40, v39);
  long long v45 = 0u;
  memset(buf, 0, sizeof(buf));
  uint64_t v10 = v40;
  uint64_t v11 = *(void *)(v40 + 24);
  uint64_t v12 = *(void *)(v40 + 264);
  LODWORD(__src) = *(_DWORD *)(v11 + 4 * (*(_DWORD *)(v12 + 20) + 1));
  DWORD1(__src) = *(_DWORD *)(v11 + 4 * *(unsigned int *)(v12 + 28));
  std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)buf, (char *)&__src, (uint64_t)&__src + 8, 2uLL);
  std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)&buf[24], *(char **)(v10 + 40), *(void *)(v10 + 40) + 4 * *(unsigned int *)(v10 + 32), *(unsigned int *)(v10 + 32));
  unint64_t v13 = (char *)v45;
  if ((unint64_t)v45 >= *((void *)&v45 + 1))
  {
    uint64_t v15 = *(char **)&buf[24];
    uint64_t v16 = (uint64_t)(v45 - *(void *)&buf[24]) >> 2;
    unint64_t v17 = v16 + 1;
    if ((unint64_t)(v16 + 1) >> 62) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v18 = *((void *)&v45 + 1) - *(void *)&buf[24];
    if ((uint64_t)(*((void *)&v45 + 1) - *(void *)&buf[24]) >> 1 > v17) {
      unint64_t v17 = v18 >> 1;
    }
    if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v19 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v19 = v17;
    }
    if (v19)
    {
      unint64_t v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v45 + 8, v19);
      uint64_t v15 = *(char **)&buf[24];
      unint64_t v13 = (char *)v45;
    }
    else
    {
      unint64_t v20 = 0;
    }
    int v21 = &v20[4 * v16];
    long long v22 = &v20[4 * v19];
    *(_DWORD *)int v21 = 1065353216;
    std::chrono::steady_clock::time_point v14 = v21 + 4;
    while (v13 != v15)
    {
      int v23 = *((_DWORD *)v13 - 1);
      v13 -= 4;
      *((_DWORD *)v21 - 1) = v23;
      v21 -= 4;
    }
    *(void *)&unsigned char buf[24] = v21;
    *(void *)&long long v45 = v14;
    *((void *)&v45 + 1) = v22;
    if (v15) {
      operator delete(v15);
    }
  }
  else
  {
    *(_DWORD *)long long v45 = 1065353216;
    std::chrono::steady_clock::time_point v14 = v13 + 4;
  }
  *(void *)&long long v45 = v14;
  LODWORD(v46) = *(_DWORD *)(v10 + 4);
  *((void *)&v46 + 1) = *(void *)(v10 + 48);
  DWORD1(v46) = *(_DWORD *)(v10 + 56);
  int v24 = (char *)operator new(0x320uLL);
  *(_OWORD *)(v24 + 8) = 0u;
  *(void *)int v24 = off_26C217010;
  *((void *)v24 + 4) = 0;
  *((void *)v24 + 3) = &off_26C202D28;
  *(_OWORD *)(v24 + 40) = 0u;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)v24 + 4, *(const void **)buf, *(uint64_t *)&buf[8], (uint64_t)(*(void *)&buf[8] - *(void *)buf) >> 2);
  *((void *)v24 + 7) = 0;
  *((void *)v24 + 8) = 0;
  *((void *)v24 + 9) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)v24 + 7, *(const void **)&buf[24], v45, (uint64_t)(v45 - *(void *)&buf[24]) >> 2);
  long long v25 = v46;
  *((void *)v24 + 12) = 0;
  *((_OWORD *)v24 + 5) = v25;
  *((void *)v24 + 13) = 0;
  *((void *)v24 + 14) = 0;
  UnitFeature::UnitFeature((UnitFeature *)(v24 + 120));
  *((void *)v24 + 99) = 0;
  *(_OWORD *)(v24 + 760) = 0u;
  *(_OWORD *)(v24 + 776) = 0u;
  *(_OWORD *)(v24 + 728) = 0u;
  *(_OWORD *)(v24 + 744) = 0u;
  *(void *)&long long v26 = v24 + 24;
  *((void *)&v26 + 1) = v24;
  char v27 = *(std::__shared_weak_count **)(v7 + 304);
  _OWORD *v9 = v26;
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  SharedObjectPool::get<Database>(&__src, v39);
  int v28 = *(std::__shared_weak_count **)(v7 + 320);
  *(_OWORD *)(v7 + 312) = __src;
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  if (*(void *)&buf[24])
  {
    *(void *)&long long v45 = *(void *)&buf[24];
    operator delete(*(void **)&buf[24]);
  }
  if (*(void *)buf)
  {
    *(void *)&uint8_t buf[8] = *(void *)buf;
    operator delete(*(void **)buf);
  }
  if (v41) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v41);
  }
  if (*((void *)&v39 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v39 + 1));
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  int v29 = (void *)(a1 + 8);
  uint64_t v30 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    long long v31 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      long long v31 = (void *)*v29;
    }
    v32.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    *(_DWORD *)std::string buf = 136315394;
    *(void *)&uint8_t buf[4] = v31;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(double *)&unsigned char buf[14] = (double)((v32.__d_.__rep_ - v37.__d_.__rep_) / 1000000) / 1000.0;
    _os_log_impl(&dword_20CD80000, v30, OS_LOG_TYPE_INFO, "Init latency (%s): %.3f s", buf, 0x16u);
  }
  if (*(char *)(a1 + 31) < 0) {
    int v29 = (void *)*v29;
  }
  v33.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "Init latency (%s): %.3f s", v34, v29, (double)((v33.__d_.__rep_ - v37.__d_.__rep_) / 1000000) / 1000.0);
  if (*((void *)&v39 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v39 + 1));
  }
  result.n128_u64[0] = v38;
  result.n128_u64[1] = v7;
  *a4 = result;
  return result;
}

void sub_20D45B154(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, Module *a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t *p_shared_weak_owners,uint64_t a24,uint64_t a25,void *__p,uint64_t a27)
{
  if (__p)
  {
    a27 = (uint64_t)__p;
    operator delete(__p);
  }
  if (p_shared_weak_owners)
  {
    a24 = (uint64_t)p_shared_weak_owners;
    operator delete(p_shared_weak_owners);
  }
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  p_shared_weak_owners = &v27[14].__shared_weak_owners_;
  std::vector<Prompt>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_shared_weak_owners);
  p_shared_weak_owners = &v27[13].__shared_weak_owners_;
  std::vector<std::vector<MarkerRecord>>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_shared_weak_owners);
  shared_owners = (std::__shared_weak_count *)v27[13].__shared_owners_;
  if (shared_owners) {
    std::__shared_weak_count::__release_shared[abi:ne180100](shared_owners);
  }
  shared_weak_owners = (std::__shared_weak_count *)v27[12].__shared_weak_owners_;
  if (shared_weak_owners) {
    std::__shared_weak_count::__release_shared[abi:ne180100](shared_weak_owners);
  }
  Module::~Module(a14);
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  std::__shared_weak_count::~__shared_weak_count(v27);
  operator delete(v32);
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  _Unwind_Resume(a1);
}

void sub_20D45B258(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20)
{
  if (a20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a20);
  }
  JUMPOUT(0x20D45B22CLL);
}

void sub_20D45B26C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (!a16) {
    JUMPOUT(0x20D45B250);
  }
  JUMPOUT(0x20D45B248);
}

uint64_t std::__shared_ptr_emplace<ViterbiStream>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ViterbiStream>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C215A30;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<ViterbiStream>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C215A30;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<ViterbiStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<ViterbiStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0) {
    operator delete(__p[1]);
  }
  operator delete(__p);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<ViterbiStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<ViterbiStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<ViterbiStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<ViterbiStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, void *a2)
{
  *a2 = off_26C211788;
  uint64_t v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void *std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<ViterbiStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<ViterbiStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  void *v2 = off_26C211788;
  long long v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(void *)(a1 + 24);
  }
  return v2;
}

void sub_20D45B434(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<ViterbiStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<ViterbiStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C211788;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x2105595E0);
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<ViterbiStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<ViterbiStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C211788;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

char **std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<PreselectStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<PreselectStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<PreselectStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<PreselectStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

__n128 std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<PreselectStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<PreselectStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, char *a2@<X1>, long long *a3@<X2>, __n128 *a4@<X8>)
{
  uint64_t v44 = *MEMORY[0x263EF8340];
  long long v40 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  v39.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  unint64_t v7 = operator new(0x170uLL);
  unint64_t v8 = (unint64_t)v7;
  v7[1] = 0;
  v7[2] = 0;
  void *v7 = off_26C216130;
  unint64_t v9 = (unint64_t)(v7 + 3);
  if (*((void *)&v40 + 1))
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v40 + 1) + 8), 1uLL, memory_order_relaxed);
    long long v41 = v40;
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v40 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  else
  {
    long long v41 = (unint64_t)v40;
  }
  Module::Module((uint64_t)(v7 + 3), a2, (uint64_t *)&v41);
  if (*((void *)&v41 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v41 + 1));
  }
  *(void *)(v8 + ++*(_DWORD *)(result + 24) = off_26C2012F8;
  *(_DWORD *)(v8 + 3++*(_DWORD *)(result + 24) = 0;
  *(void *)(v8 + 336) = 0;
  *(void *)(v8 + 344) = 0;
  *(void *)(v8 + 304) = 0;
  *(void *)(v8 + 312) = 0;
  *(void *)(v8 + 296) = 0;
  *(unsigned char *)(v8 + 320) = 0;
  *(void *)(v8 + 328) = v8 + 336;
  if (*(char *)(v8 + 231) < 0) {
    std::string::__init_copy_ctor_external(&v43, *(const std::string::value_type **)(v8 + 208), *(void *)(v8 + 216));
  }
  else {
    std::string v43 = *(std::string *)(v8 + 208);
  }
  if (*((void *)&v40 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v40 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v10 = *(std::__shared_weak_count **)(v40 + 24);
  if (!v10 || (uint64_t v11 = std::__shared_weak_count::lock(v10)) == 0)
  {
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    if (!*((void *)&v40 + 1)) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  uint64_t v12 = v11;
  uint64_t v13 = *(void *)(v40 + 16);
  if (v13
    && (uint64_t v14 = v13 + 8,
        std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>((void *)(v13 + 8), (unsigned __int8 *)&v43)))
  {
    long long v42 = &v43;
    uint64_t v15 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v14, (unsigned __int8 *)&v43, (long long **)&v42);
    uint64_t v17 = *((void *)v15 + 5);
    uint64_t v16 = (std::__shared_weak_count *)*((void *)v15 + 6);
    if (v16) {
      atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v16 = 0;
    uint64_t v17 = 0;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  if (*((void *)&v40 + 1)) {
LABEL_18:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v40 + 1));
LABEL_19:
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v43.__r_.__value_.__l.__data_);
  }
  uint64_t v18 = *(void *)(v17 + 296);
  unint64_t v19 = *(std::__shared_weak_count **)(v17 + 304);
  if (v19)
  {
    atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v20 = *(std::__shared_weak_count **)(v8 + 304);
  *(void *)(v8 + 296) = v18;
  *(void *)(v8 + 304) = v19;
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  *(_DWORD *)(v8 + 3++*(_DWORD *)(result + 24) = *(_DWORD *)(v17 + 312);
  uint64_t v21 = *(void *)(v8 + 296);
  std::string::basic_string[abi:ne180100]<0>(&v43, "stress");
  *(unsigned char *)(v8 + 312) = Database::feat_name_to_fingerprint_mask(v21, (unsigned __int8 *)&v43);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v43.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v43, "wbi");
  *(unsigned char *)(v8 + 313) = Database::feat_name_to_fingerprint_mask(v21, (unsigned __int8 *)&v43);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v43.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v43, "wbf");
  *(unsigned char *)(v8 + 314) = Database::feat_name_to_fingerprint_mask(v21, (unsigned __int8 *)&v43);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v43.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v43, "si");
  *(unsigned char *)(v8 + 315) = Database::feat_name_to_fingerprint_mask(v21, (unsigned __int8 *)&v43);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v43.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v43, "senti");
  *(unsigned char *)(v8 + 316) = Database::feat_name_to_fingerprint_mask(v21, (unsigned __int8 *)&v43);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v43.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v43, "sentf");
  *(unsigned char *)(v8 + 317) = Database::feat_name_to_fingerprint_mask(v21, (unsigned __int8 *)&v43);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v43.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v43, "phrsi");
  *(unsigned char *)(v8 + 318) = Database::feat_name_to_fingerprint_mask(v21, (unsigned __int8 *)&v43);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v43.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v43, "phrsf");
  char v22 = Database::feat_name_to_fingerprint_mask(v21, (unsigned __int8 *)&v43);
  *(unsigned char *)(v8 + 319) = v22;
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v43.__r_.__value_.__l.__data_);
    char v22 = *(unsigned char *)(v8 + 319);
  }
  *(unsigned char *)(v8 + 320) = *(unsigned char *)(v8 + 313) | *(unsigned char *)(v8 + 312) | *(unsigned char *)(v8 + 314) | *(unsigned char *)(v8 + 315) | *(unsigned char *)(v8 + 316) | *(unsigned char *)(v8 + 317) | *(unsigned char *)(v8 + 318) | v22;
  uint64_t v23 = *(void *)(v8 + 296);
  std::string::basic_string[abi:ne180100]<0>(&v43, "lang");
  int v24 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>((void *)(v23 + 304), (unsigned __int8 *)&v43);
  if (v24) {
    int v25 = *((_DWORD *)v24 + 10);
  }
  else {
    int v25 = -1;
  }
  *(_DWORD *)(v8 + 352) = v25;
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v43.__r_.__value_.__l.__data_);
  }
  uint64_t v26 = *(void *)(v8 + 296);
  *(_DWORD *)(v8 + 356) = *(_DWORD *)(v26 + 196) - *(_DWORD *)(v26 + 188);
  int v27 = *(_DWORD *)(v26 + 196);
  if (v27 > 31) {
    LOWORD(v28) = 0;
  }
  else {
    unint64_t v28 = (unint64_t)(0xFFFFFFFFLL << v27) >> *(_DWORD *)(v26 + 188);
  }
  *(_WORD *)(v8 + 360) = v28;
  std::string::basic_string[abi:ne180100]<0>(&v43, &byte_20D5A22AE);
  int v29 = (void **)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__find_equal<std::string>(v8 + 328, &v42, (const void **)&v43.__r_.__value_.__l.__data_);
  uint64_t v30 = (char *)*v29;
  if (!*v29)
  {
    long long v31 = (uint64_t **)v29;
    uint64_t v30 = (char *)operator new(0x40uLL);
    *(std::string *)(v30 + 32) = v43;
    memset(&v43, 0, sizeof(v43));
    *((_WORD *)v30 + 28) = 0;
    std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__insert_node_at((uint64_t **)(v8 + 328), (uint64_t)v42, v31, (uint64_t *)v30);
  }
  *((_WORD *)v30 + 28) = 0;
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v43.__r_.__value_.__l.__data_);
  }
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  if (*((void *)&v40 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v40 + 1));
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  std::chrono::steady_clock::time_point v32 = (std::string::size_type *)(a1 + 8);
  std::chrono::steady_clock::time_point v33 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    std::string::size_type v34 = a1 + 8;
    if (*(char *)(a1 + 31) < 0) {
      std::string::size_type v34 = *v32;
    }
    v35.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    LODWORD(v43.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)v43.__r_.__value_.__r.__words + 4) = v34;
    WORD2(v43.__r_.__value_.__r.__words[1]) = 2048;
    *(double *)((char *)&v43.__r_.__value_.__r.__words[1] + 6) = (double)((v35.__d_.__rep_ - v39.__d_.__rep_) / 1000000)
                                                               / 1000.0;
    _os_log_impl(&dword_20CD80000, v33, OS_LOG_TYPE_INFO, "Init latency (%s): %.3f s", (uint8_t *)&v43, 0x16u);
  }
  if (*(char *)(a1 + 31) < 0) {
    std::chrono::steady_clock::time_point v32 = (std::string::size_type *)*v32;
  }
  v36.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "Init latency (%s): %.3f s", v37, v32, (double)((v36.__d_.__rep_ - v39.__d_.__rep_) / 1000000) / 1000.0);
  if (*((void *)&v40 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v40 + 1));
  }
  result.n128_u64[0] = v9;
  result.n128_u64[1] = v8;
  *a4 = result;
  return result;
}

void sub_20D45BB9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, long long a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  if (a23 < 0) {
    operator delete(__p);
  }
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy(*(char **)(v23 + 336));
  unint64_t v28 = *(std::__shared_weak_count **)(v23 + 304);
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  Module::~Module(v25);
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v23);
  operator delete(v29);
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<PreselectStream>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<PreselectStream>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C216130;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<PreselectStream>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C216130;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<PreselectStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<PreselectStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0) {
    operator delete(__p[1]);
  }
  operator delete(__p);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<PreselectStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<PreselectStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<PreselectStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<PreselectStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, void *a2)
{
  *a2 = off_26C2118E8;
  uint64_t v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void *std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<PreselectStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<PreselectStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  void *v2 = off_26C2118E8;
  long long v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(void *)(a1 + 24);
  }
  return v2;
}

void sub_20D45BE18(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<PreselectStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<PreselectStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C2118E8;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x2105595E0);
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<PreselectStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<PreselectStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C2118E8;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

char **std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<UnitSelectionFeatureStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<UnitSelectionFeatureStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<UnitSelectionFeatureStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<UnitSelectionFeatureStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

__n128 std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<UnitSelectionFeatureStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<UnitSelectionFeatureStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, char *a2@<X1>, long long *a3@<X2>, __n128 *a4@<X8>)
{
  uint64_t v42 = *MEMORY[0x263EF8340];
  long long v36 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  v7.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  unint64_t v8 = operator new(0x1A0uLL);
  unint64_t v9 = (unint64_t)v8;
  v8[1] = 0;
  _OWORD v8[2] = 0;
  void *v8 = off_26C217DA0;
  uint64_t v10 = v8 + 3;
  if (*((void *)&v36 + 1))
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v36 + 1) + 8), 1uLL, memory_order_relaxed);
    long long v39 = v36;
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v36 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  else
  {
    long long v39 = (unint64_t)v36;
  }
  Module::Module((uint64_t)(v8 + 3), a2, (uint64_t *)&v39);
  if (*((void *)&v39 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v39 + 1));
  }
  *(void *)(v9 + ++*(_DWORD *)(result + 24) = off_26C2044E0;
  *(_OWORD *)(v9 + 296) = 0u;
  *(_OWORD *)(v9 + 312) = 0u;
  *(_OWORD *)(v9 + 328) = 0u;
  *(_OWORD *)(v9 + 344) = 0u;
  *(_OWORD *)(v9 + 360) = 0u;
  *(_OWORD *)(v9 + 376) = 0u;
  *(_OWORD *)(v9 + 392) = 0u;
  *(void *)(v9 + 408) = 0;
  if (*(char *)(v9 + 231) < 0) {
    std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)(v9 + 208), *(void *)(v9 + 216));
  }
  else {
    std::string __str = *(std::string *)(v9 + 208);
  }
  if (*((void *)&v36 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v36 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v11 = *(std::__shared_weak_count **)(v36 + 24);
  std::chrono::steady_clock::time_point v35 = a4;
  if (!v11 || (uint64_t v12 = std::__shared_weak_count::lock(v11)) == 0)
  {
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    if (!*((void *)&v36 + 1)) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  uint64_t v13 = v12;
  uint64_t v14 = *(void *)(v36 + 16);
  if (v14
    && (uint64_t v15 = v14 + 8,
        std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>((void *)(v14 + 8), (unsigned __int8 *)&__str)))
  {
    p_str = &__str;
    uint64_t v16 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v15, (unsigned __int8 *)&__str, (long long **)&p_str);
    uint64_t v18 = *((void *)v16 + 5);
    uint64_t v17 = (std::__shared_weak_count *)*((void *)v16 + 6);
    if (v17) {
      atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v17 = 0;
    uint64_t v18 = 0;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  if (*((void *)&v36 + 1)) {
LABEL_18:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v36 + 1));
LABEL_19:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  uint64_t v19 = *(void *)(v18 + 328);
  unint64_t v20 = *(std::__shared_weak_count **)(v18 + 336);
  if (v20)
  {
    atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v21 = *(std::__shared_weak_count **)(v9 + 336);
  *(void *)(v9 + 328) = v19;
  *(void *)(v9 + 336) = v20;
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  if (*(char *)(v18 + 399) < 0) {
    std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)(v18 + 376), *(void *)(v18 + 384));
  }
  else {
    std::string __str = *(std::string *)(v18 + 376);
  }
  std::string::operator=((std::string *)(v9 + 376), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  uint64_t v22 = *(void *)(v18 + 296);
  uint64_t v23 = *(std::__shared_weak_count **)(v18 + 304);
  if (v23) {
    atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v24 = *(std::__shared_weak_count **)(v18 + 352);
  v38[0] = *(void *)(v18 + 344);
  v38[1] = (uint64_t)v24;
  if (v24)
  {
    atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
    UnitSelectionFeatureStream::set_mdn(v10, v22, (uint64_t)v23, v38);
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
    if (!v23) {
      goto LABEL_37;
    }
    goto LABEL_36;
  }
  UnitSelectionFeatureStream::set_mdn(v10, v22, (uint64_t)v23, v38);
  if (v23) {
LABEL_36:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
LABEL_37:
  uint64_t v25 = *(void *)(v18 + 312);
  uint64_t v26 = *(std::__shared_weak_count **)(v18 + 320);
  if (v26) {
    atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v27 = *(std::__shared_weak_count **)(v18 + 368);
  v37[0] = *(void *)(v18 + 360);
  v37[1] = (uint64_t)v27;
  if (v27)
  {
    atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
    UnitSelectionFeatureStream::set_rnn(v10, v25, (uint64_t)v26, v37);
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
    if (!v26) {
      goto LABEL_42;
    }
    goto LABEL_41;
  }
  UnitSelectionFeatureStream::set_rnn(v10, v25, (uint64_t)v26, v37);
  if (v26) {
LABEL_41:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
LABEL_42:
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  if (*((void *)&v36 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v36 + 1));
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  unint64_t v28 = (std::string::size_type *)(a1 + 8);
  int v29 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    std::string::size_type v30 = a1 + 8;
    if (*(char *)(a1 + 31) < 0) {
      std::string::size_type v30 = *v28;
    }
    v31.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    LODWORD(__str.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words + 4) = v30;
    WORD2(__str.__r_.__value_.__r.__words[1]) = 2048;
    *(double *)((char *)&__str.__r_.__value_.__r.__words[1] + 6) = (double)((v31.__d_.__rep_ - v7.__d_.__rep_) / 1000000)
                                                                 / 1000.0;
    _os_log_impl(&dword_20CD80000, v29, OS_LOG_TYPE_INFO, "Init latency (%s): %.3f s", (uint8_t *)&__str, 0x16u);
  }
  if (*(char *)(a1 + 31) < 0) {
    unint64_t v28 = (std::string::size_type *)*v28;
  }
  v32.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "Init latency (%s): %.3f s", v33, v28, (double)((v32.__d_.__rep_ - v7.__d_.__rep_) / 1000000) / 1000.0);
  if (*((void *)&v36 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v36 + 1));
  }
  result.n128_u64[0] = (unint64_t)v10;
  result.n128_u64[1] = v9;
  __n128 *v35 = result;
  return result;
}

void sub_20D45C3CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, long long a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  if (a27 < 0) {
    operator delete(__p);
  }
  std::chrono::steady_clock::time_point v33 = *(std::__shared_weak_count **)(v27 + 408);
  if (v33) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
  }
  if (*(char *)(v27 + 399) < 0) {
    operator delete(*v30);
  }
  std::string::size_type v34 = *(std::__shared_weak_count **)(v27 + 368);
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  std::chrono::steady_clock::time_point v35 = *(std::__shared_weak_count **)(v27 + 352);
  if (v35) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v35);
  }
  long long v36 = *(std::__shared_weak_count **)(v27 + 336);
  if (v36) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v36);
  }
  std::chrono::steady_clock::time_point v37 = *(std::__shared_weak_count **)(v27 + 320);
  if (v37) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v37);
  }
  unint64_t v38 = *(std::__shared_weak_count **)(v27 + 304);
  if (v38) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v38);
  }
  Module::~Module(v29);
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v27);
  operator delete(v39);
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<UnitSelectionFeatureStream>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<UnitSelectionFeatureStream>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C217DA0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<UnitSelectionFeatureStream>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C217DA0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<UnitSelectionFeatureStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<UnitSelectionFeatureStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0) {
    operator delete(__p[1]);
  }
  operator delete(__p);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<UnitSelectionFeatureStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<UnitSelectionFeatureStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<UnitSelectionFeatureStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<UnitSelectionFeatureStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, void *a2)
{
  *a2 = off_26C2123E8;
  uint64_t v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void *std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<UnitSelectionFeatureStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<UnitSelectionFeatureStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  void *v2 = off_26C2123E8;
  long long v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(void *)(a1 + 24);
  }
  return v2;
}

void sub_20D45C68C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<UnitSelectionFeatureStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<UnitSelectionFeatureStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C2123E8;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x2105595E0);
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<UnitSelectionFeatureStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<UnitSelectionFeatureStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C2123E8;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

char **std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<PromptStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<PromptStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<PromptStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<PromptStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

__n128 std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<PromptStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<PromptStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, char *a2@<X1>, long long *a3@<X2>, __n128 *a4@<X8>)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  long long v32 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  v31.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  std::chrono::steady_clock::time_point v7 = operator new(0x148uLL);
  unint64_t v8 = (unint64_t)v7;
  v7[1] = 0;
  v7[2] = 0;
  void *v7 = off_26C2155D0;
  unint64_t v9 = (unint64_t)(v7 + 3);
  if (*((void *)&v32 + 1))
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v32 + 1) + 8), 1uLL, memory_order_relaxed);
    long long v33 = v32;
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v32 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  else
  {
    long long v33 = (unint64_t)v32;
  }
  Module::Module((uint64_t)(v7 + 3), a2, (uint64_t *)&v33);
  if (*((void *)&v33 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v33 + 1));
  }
  *(void *)(v8 + ++*(_DWORD *)(result + 24) = off_26C2000E0;
  *(_OWORD *)(v8 + 296) = 0u;
  *(_OWORD *)(v8 + 312) = 0u;
  if (*(char *)(v8 + 231) < 0) {
    std::string::__init_copy_ctor_external(&v35, *(const std::string::value_type **)(v8 + 208), *(void *)(v8 + 216));
  }
  else {
    std::string v35 = *(std::string *)(v8 + 208);
  }
  if (*((void *)&v32 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v32 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v10 = *(std::__shared_weak_count **)(v32 + 24);
  if (!v10 || (uint64_t v11 = std::__shared_weak_count::lock(v10)) == 0)
  {
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    if (!*((void *)&v32 + 1)) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  uint64_t v12 = v11;
  uint64_t v13 = *(void *)(v32 + 16);
  if (v13
    && (uint64_t v14 = v13 + 8,
        std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>((void *)(v13 + 8), (unsigned __int8 *)&v35)))
  {
    std::string::size_type v34 = &v35;
    uint64_t v15 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v14, (unsigned __int8 *)&v35, (long long **)&v34);
    uint64_t v17 = (void *)*((void *)v15 + 5);
    uint64_t v16 = (std::__shared_weak_count *)*((void *)v15 + 6);
    if (v16) {
      atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v16 = 0;
    uint64_t v17 = 0;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  if (*((void *)&v32 + 1)) {
LABEL_18:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v32 + 1));
LABEL_19:
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v35.__r_.__value_.__l.__data_);
  }
  uint64_t v18 = v17[39];
  uint64_t v19 = (std::__shared_weak_count *)v17[40];
  if (v19)
  {
    atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v20 = *(std::__shared_weak_count **)(v8 + 320);
  *(void *)(v8 + 312) = v18;
  *(void *)(v8 + 320) = v19;
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  uint64_t v21 = v17[37];
  uint64_t v22 = (std::__shared_weak_count *)v17[38];
  if (v22)
  {
    atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v23 = *(std::__shared_weak_count **)(v8 + 304);
  *(void *)(v8 + 296) = v21;
  *(void *)(v8 + 304) = v22;
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  if (*((void *)&v32 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v32 + 1));
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  int v24 = (std::string::size_type *)(a1 + 8);
  uint64_t v25 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    std::string::size_type v26 = a1 + 8;
    if (*(char *)(a1 + 31) < 0) {
      std::string::size_type v26 = *v24;
    }
    v27.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    LODWORD(v35.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)v35.__r_.__value_.__r.__words + 4) = v26;
    WORD2(v35.__r_.__value_.__r.__words[1]) = 2048;
    *(double *)((char *)&v35.__r_.__value_.__r.__words[1] + 6) = (double)((v27.__d_.__rep_ - v31.__d_.__rep_) / 1000000)
                                                               / 1000.0;
    _os_log_impl(&dword_20CD80000, v25, OS_LOG_TYPE_INFO, "Init latency (%s): %.3f s", (uint8_t *)&v35, 0x16u);
  }
  if (*(char *)(a1 + 31) < 0) {
    int v24 = (std::string::size_type *)*v24;
  }
  v28.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "Init latency (%s): %.3f s", v29, v24, (double)((v28.__d_.__rep_ - v31.__d_.__rep_) / 1000000) / 1000.0);
  if (*((void *)&v32 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v32 + 1));
  }
  result.n128_u64[0] = v9;
  result.n128_u64[1] = v8;
  *a4 = result;
  return result;
}

void sub_20D45CB48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, long long a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  if (a23 < 0) {
    operator delete(__p);
  }
  shared_owners = (std::__shared_weak_count *)v23[13].__shared_owners_;
  if (shared_owners) {
    std::__shared_weak_count::__release_shared[abi:ne180100](shared_owners);
  }
  shared_weak_owners = (std::__shared_weak_count *)v23[12].__shared_weak_owners_;
  if (shared_weak_owners) {
    std::__shared_weak_count::__release_shared[abi:ne180100](shared_weak_owners);
  }
  Module::~Module(v25);
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  std::__shared_weak_count::~__shared_weak_count(v23);
  operator delete(v30);
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<PromptStream>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<PromptStream>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C2155D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<PromptStream>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C2155D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<PromptStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<PromptStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0) {
    operator delete(__p[1]);
  }
  operator delete(__p);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<PromptStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<PromptStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<PromptStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<PromptStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, void *a2)
{
  *a2 = off_26C211730;
  uint64_t v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void *std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<PromptStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<PromptStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  void *v2 = off_26C211730;
  long long v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(void *)(a1 + 24);
  }
  return v2;
}

void sub_20D45CD9C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<PromptStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<PromptStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C211730;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x2105595E0);
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<PromptStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<PromptStream>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C211730;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

char **std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<GryphonFEAdapterModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<GryphonFEAdapterModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<GryphonFEAdapterModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<GryphonFEAdapterModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

__n128 std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<GryphonFEAdapterModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<GryphonFEAdapterModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, char *a2@<X1>, long long *a3@<X2>, __n128 *a4@<X8>)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  long long v19 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  v7.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  unint64_t v8 = operator new(0x128uLL);
  unint64_t v9 = (unint64_t)v8;
  v8[1] = 0;
  _OWORD v8[2] = 0;
  void *v8 = off_26C217390;
  uint64_t v10 = v8 + 3;
  if (*((void *)&v19 + 1))
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v19 + 1) + 8), 1uLL, memory_order_relaxed);
    *(_OWORD *)std::string buf = v19;
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v19 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  else
  {
    *(_OWORD *)std::string buf = (unint64_t)v19;
  }
  Module::Module((uint64_t)(v8 + 3), a2, (uint64_t *)buf);
  if (*(void *)&buf[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
  }
  *uint64_t v10 = off_26C203458;
  if (*((void *)&v19 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v19 + 1));
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  uint64_t v11 = (void *)(a1 + 8);
  uint64_t v12 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    uint64_t v13 = a4;
    uint64_t v14 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      uint64_t v14 = (void *)*v11;
    }
    v15.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    *(_DWORD *)std::string buf = 136315394;
    *(void *)&uint8_t buf[4] = v14;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(double *)&unsigned char buf[14] = (double)((v15.__d_.__rep_ - v7.__d_.__rep_) / 1000000) / 1000.0;
    _os_log_impl(&dword_20CD80000, v12, OS_LOG_TYPE_INFO, "Init latency (%s): %.3f s", buf, 0x16u);
    a4 = v13;
  }
  if (*(char *)(a1 + 31) < 0) {
    uint64_t v11 = (void *)*v11;
  }
  v16.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "Init latency (%s): %.3f s", v17, v11, (double)((v16.__d_.__rep_ - v7.__d_.__rep_) / 1000000) / 1000.0);
  if (*((void *)&v19 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v19 + 1));
  }
  result.n128_u64[0] = (unint64_t)v10;
  result.n128_u64[1] = v9;
  *a4 = result;
  return result;
}

void sub_20D45D10C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, long long a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  std::__shared_weak_count::~__shared_weak_count(v13);
  operator delete(v16);
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<GryphonFEAdapterModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<GryphonFEAdapterModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C217390;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<GryphonFEAdapterModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C217390;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<GryphonFEAdapterModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<GryphonFEAdapterModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0) {
    operator delete(__p[1]);
  }
  operator delete(__p);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<GryphonFEAdapterModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<GryphonFEAdapterModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<GryphonFEAdapterModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<GryphonFEAdapterModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, void *a2)
{
  *a2 = off_26C2120D0;
  uint64_t v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void *std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<GryphonFEAdapterModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<GryphonFEAdapterModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  void *v2 = off_26C2120D0;
  long long v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(void *)(a1 + 24);
  }
  return v2;
}

void sub_20D45D30C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<GryphonFEAdapterModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<GryphonFEAdapterModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C2120D0;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x2105595E0);
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<GryphonFEAdapterModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<GryphonFEAdapterModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C2120D0;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

char **std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<NashvilleFEModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<NashvilleFEModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target_type()
{
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<NashvilleFEModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<NashvilleFEModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

__n128 std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<NashvilleFEModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<NashvilleFEModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::operator()@<Q0>(uint64_t a1@<X0>, char *a2@<X1>, long long *a3@<X2>, __n128 *a4@<X8>)
{
  uint64_t v52 = *MEMORY[0x263EF8340];
  long long v48 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  v47.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  std::chrono::steady_clock::time_point v7 = operator new(0x238uLL);
  unint64_t v8 = (unint64_t)v7;
  v7[1] = 0;
  v7[2] = 0;
  void *v7 = off_26C2167F8;
  unint64_t v9 = (unint64_t)(v7 + 3);
  if (*((void *)&v48 + 1))
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v48 + 1) + 8), 1uLL, memory_order_relaxed);
    long long v49 = v48;
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v48 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  else
  {
    long long v49 = (unint64_t)v48;
  }
  Module::Module((uint64_t)(v7 + 3), a2, (uint64_t *)&v49);
  if (*((void *)&v49 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v49 + 1));
  }
  *(void *)(v8 + ++*(_DWORD *)(result + 24) = off_26C201EC8;
  *(_OWORD *)(v8 + 296) = 0u;
  *(_OWORD *)(v8 + 312) = 0u;
  *(_OWORD *)(v8 + 328) = 0u;
  *(void *)(v8 + 344) = 850045863;
  *(_OWORD *)(v8 + 352) = 0u;
  *(_OWORD *)(v8 + 368) = 0u;
  *(_OWORD *)(v8 + 384) = 0u;
  *(void *)(v8 + 400) = 0;
  *(void *)(v8 + 408) = 1018212795;
  *(void *)(v8 + 448) = 0;
  *(_OWORD *)(v8 + 416) = 0u;
  *(_OWORD *)(v8 + 432) = 0u;
  *(_DWORD *)(v8 + 456) = 2;
  *(_OWORD *)(v8 + 528) = 0u;
  *(_OWORD *)(v8 + 552) = 0u;
  *(_OWORD *)(v8 + 488) = 0u;
  *(_OWORD *)(v8 + 504) = 0u;
  *(_OWORD *)(v8 + 472) = 0u;
  *(void *)(v8 + 544) = v8 + 552;
  if (*(char *)(v8 + 231) < 0) {
    std::string::__init_copy_ctor_external(&v51, *(const std::string::value_type **)(v8 + 208), *(void *)(v8 + 216));
  }
  else {
    std::string v51 = *(std::string *)(v8 + 208);
  }
  if (*((void *)&v48 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v48 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v11 = *(std::__shared_weak_count **)(v48 + 24);
  if (!v11 || (uint64_t v12 = std::__shared_weak_count::lock(v11)) == 0)
  {
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    if (!*((void *)&v48 + 1)) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  uint64_t v13 = v12;
  uint64_t v14 = *(void *)(v48 + 16);
  if (v14
    && (uint64_t v15 = v14 + 8,
        std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>((void *)(v14 + 8), (unsigned __int8 *)&v51)))
  {
    long long v50 = &v51;
    std::chrono::steady_clock::time_point v16 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v15, (unsigned __int8 *)&v51, (long long **)&v50);
    uint64_t v18 = *((void *)v16 + 5);
    uint64_t v17 = (std::__shared_weak_count *)*((void *)v16 + 6);
    if (v17) {
      atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v17 = 0;
    uint64_t v18 = 0;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  if (*((void *)&v48 + 1)) {
LABEL_18:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v48 + 1));
LABEL_19:
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v51.__r_.__value_.__l.__data_);
  }
  uint64_t v19 = *(void *)(v18 + 328);
  unint64_t v20 = *(std::__shared_weak_count **)(v18 + 336);
  if (v20)
  {
    atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v21 = *(std::__shared_weak_count **)(v8 + 336);
  *(void *)(v8 + 328) = v19;
  *(void *)(v8 + 336) = v20;
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  uint64_t v22 = *(void *)(v18 + 312);
  uint64_t v23 = *(std::__shared_weak_count **)(v18 + 320);
  if (v23)
  {
    atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v24 = *(std::__shared_weak_count **)(v8 + 320);
  *(void *)(v8 + 312) = v22;
  *(void *)(v8 + 320) = v23;
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  uint64_t v25 = *(void *)(v18 + 296);
  std::string::size_type v26 = *(std::__shared_weak_count **)(v18 + 304);
  if (v26)
  {
    atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::chrono::steady_clock::time_point v27 = *(std::__shared_weak_count **)(v8 + 304);
  *(void *)(v8 + 296) = v25;
  *(void *)(v8 + 304) = v26;
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  *(unsigned char *)(v8 + 520) = *(unsigned char *)(v18 + 360);
  uint64_t v28 = *(void *)(v18 + 344);
  int v29 = *(std::__shared_weak_count **)(v18 + 352);
  if (v29)
  {
    atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string::size_type v30 = *(std::__shared_weak_count **)(v8 + 480);
  *(void *)(v8 + 472) = v28;
  *(void *)(v8 + 480) = v29;
  if (v30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v30);
  }
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
  uint64_t v31 = *(void *)(v18 + 368);
  long long v32 = *(std::__shared_weak_count **)(v18 + 376);
  if (v32)
  {
    atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v33 = *(std::__shared_weak_count **)(v8 + 496);
  *(void *)(v8 + 488) = v31;
  *(void *)(v8 + 496) = v32;
  if (v33) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
  }
  if (v32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v32);
  }
  uint64_t v34 = *(void *)(v18 + 384);
  std::string v35 = *(std::__shared_weak_count **)(v18 + 392);
  if (v35)
  {
    atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v36 = *(std::__shared_weak_count **)(v8 + 512);
  *(void *)(v8 + 504) = v34;
  *(void *)(v8 + 512) = v35;
  if (v36) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v36);
  }
  if (v35) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v35);
  }
  uint64_t v37 = *(void *)(v18 + 400);
  unint64_t v38 = *(std::__shared_weak_count **)(v18 + 408);
  if (v38)
  {
    atomic_fetch_add_explicit(&v38->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v38->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)(v8 + 528) = v37;
  long long v39 = *(std::__shared_weak_count **)(v8 + 536);
  *(void *)(v8 + 536) = v38;
  if (v39) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v39);
  }
  if (v38) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v38);
  }
  *(void *)(v8 + 464) = SiriTTS::DispatchQueue::create_queue((SiriTTS::DispatchQueue *)"NashvilleFEModule", v10);
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  if (*((void *)&v48 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v48 + 1));
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  long long v40 = (std::string::size_type *)(a1 + 8);
  long long v41 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    std::string::size_type v42 = a1 + 8;
    if (*(char *)(a1 + 31) < 0) {
      std::string::size_type v42 = *v40;
    }
    v43.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    LODWORD(v51.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)v51.__r_.__value_.__r.__words + 4) = v42;
    WORD2(v51.__r_.__value_.__r.__words[1]) = 2048;
    *(double *)((char *)&v51.__r_.__value_.__r.__words[1] + 6) = (double)((v43.__d_.__rep_ - v47.__d_.__rep_) / 1000000)
                                                               / 1000.0;
    _os_log_impl(&dword_20CD80000, v41, OS_LOG_TYPE_INFO, "Init latency (%s): %.3f s", (uint8_t *)&v51, 0x16u);
  }
  if (*(char *)(a1 + 31) < 0) {
    long long v40 = (std::string::size_type *)*v40;
  }
  v44.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(6, "Init latency (%s): %.3f s", v45, v40, (double)((v44.__d_.__rep_ - v47.__d_.__rep_) / 1000000) / 1000.0);
  if (*((void *)&v48 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v48 + 1));
  }
  result.n128_u64[0] = v9;
  result.n128_u64[1] = v8;
  *a4 = result;
  return result;
}

void sub_20D45D958(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, long long a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  if (a23 < 0) {
    operator delete(__p);
  }
  std::__tree<std::__value_type<std::string,std::shared_ptr<FastRewriter>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<FastRewriter>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<FastRewriter>>>>::destroy(&v23[23].~__shared_weak_count);
  shared_owners = (std::__shared_weak_count *)v23[22].__shared_owners_;
  if (shared_owners) {
    std::__shared_weak_count::__release_shared[abi:ne180100](shared_owners);
  }
  std::string::size_type v30 = (std::__shared_weak_count *)v23[21].__shared_owners_;
  if (v30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v30);
  }
  shared_weak_owners = (std::__shared_weak_count *)v23[20].__shared_weak_owners_;
  if (shared_weak_owners) {
    std::__shared_weak_count::__release_shared[abi:ne180100](shared_weak_owners);
  }
  long long v32 = (std::__shared_weak_count *)v23[20].__vftable;
  if (v32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v32);
  }
  std::condition_variable::~condition_variable((std::condition_variable *)(v27 + 384));
  std::mutex::~mutex((std::mutex *)(v27 + 320));
  long long v33 = (std::__shared_weak_count *)v23[14].__vftable;
  if (v33) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
  }
  uint64_t v34 = (std::__shared_weak_count *)v23[13].__shared_owners_;
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  std::string v35 = (std::__shared_weak_count *)v23[12].__shared_weak_owners_;
  if (v35) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v35);
  }
  Module::~Module(v25);
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  std::__shared_weak_count::~__shared_weak_count(v23);
  operator delete(v36);
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<NashvilleFEModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<NashvilleFEModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C2167F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<NashvilleFEModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C2167F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<NashvilleFEModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<NashvilleFEModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0) {
    operator delete(__p[1]);
  }
  operator delete(__p);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<NashvilleFEModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<NashvilleFEModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<NashvilleFEModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<NashvilleFEModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1, void *a2)
{
  *a2 = off_26C211AA0;
  uint64_t v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void *std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<NashvilleFEModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<NashvilleFEModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  void *v2 = off_26C211AA0;
  long long v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(void *)(a1 + 24);
  }
  return v2;
}

void sub_20D45DC1C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<NashvilleFEModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<NashvilleFEModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C211AA0;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x2105595E0);
}

uint64_t std::__function::__func<void ModuleFactory::ModuleFactoryImpl::register_module<NashvilleFEModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1},std::allocator<void ModuleFactory::ModuleFactoryImpl::register_module<NashvilleFEModule>(std::string const&,std::string const&)::{lambda(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)#1}>,std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::~__func(uint64_t a1)
{
  *(void *)a1 = off_26C211AA0;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void std::__shared_ptr_emplace<ModuleFactory::ModuleFactoryImpl>::__on_zero_shared(uint64_t a1)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1 + 48, *(void **)(a1 + 56));
  uint64_t v2 = *(void **)(a1 + 32);
  std::__tree<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::destroy(v2);
}

void std::__shared_ptr_emplace<ModuleFactory::ModuleFactoryImpl>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C218FC8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<ModuleFactory::ModuleFactoryImpl>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C218FC8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ModuleFactory>::__on_zero_shared(uint64_t a1)
{
  *(void *)(a1 + ++*(_DWORD *)(result + 24) = &off_26C2002A8;
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void std::__shared_ptr_emplace<ModuleFactory>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C215800;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<ModuleFactory>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C215800;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void FrontendFeatureLogModule::process_data(uint64_t *a1, uint64_t *a2)
{
  uint64_t v103 = *MEMORY[0x263EF8340];
  long long v3 = (std::__shared_weak_count *)a2[1];
  uint64_t v89 = *a2;
  uint64_t v90 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t *, uint64_t *))(*a1 + 72))(a1, &v89);
  if (v90) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v90);
  }
  uint64_t v4 = *a2;
  std::chrono::steady_clock::time_point v6 = *(std::__shared_weak_count **)(*(void *)v5 + 16);
  uint64_t v74 = *(const FrontendFeature ***)(*(void *)v5 + 8);
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string v73 = v6;
  if (*((unsigned char *)a1 + 272))
  {
    std::chrono::steady_clock::time_point v7 = v74[3];
    unint64_t v8 = v74[4];
    if (v7 != v8)
    {
      while (1)
      {
        std::string::basic_string[abi:ne180100]<0>(&v93, &byte_20D5A22AE);
        unint64_t v9 = 0;
        while ((*((char *)v7 + 39) & 0x80000000) == 0)
        {
          if (v9 >= *((unsigned __int8 *)v7 + 39)) {
            goto LABEL_33;
          }
          uint64_t v10 = (uint64_t)v7 + 16;
LABEL_16:
          unsigned int v11 = *(unsigned __int8 *)(v10 + v9);
          std::string::basic_string[abi:ne180100]<0>(&__v, &byte_20D5A22AE);
          PhoneConversion::get_string_phone((std::string *)__p, v11, (uint64_t *)&__v);
          if ((SBYTE7(v84) & 0x80u) == 0) {
            uint64_t v12 = __p;
          }
          else {
            uint64_t v12 = (void **)__p[0];
          }
          if ((SBYTE7(v84) & 0x80u) == 0) {
            std::string::size_type v13 = BYTE7(v84);
          }
          else {
            std::string::size_type v13 = (std::string::size_type)__p[1];
          }
          std::string::append(&v93, (const std::string::value_type *)v12, v13);
          if (SBYTE7(v84) < 0) {
            operator delete(__p[0]);
          }
          if (SHIBYTE(__v.__end_) < 0) {
            operator delete(__v.__first_);
          }
          if (*((char *)v7 + 39) < 0) {
            uint64_t v14 = *((void *)v7 + 3);
          }
          else {
            uint64_t v14 = *((unsigned __int8 *)v7 + 39);
          }
          if (v9 == v14 - 1) {
            uint64_t v15 = &byte_20D5A22AE;
          }
          else {
            uint64_t v15 = " ";
          }
          std::string::append(&v93, v15);
          ++v9;
        }
        if (v9 < *((void *)v7 + 3)) {
          break;
        }
LABEL_33:
        UTFString::remove_invalid_utf8_codes((std::string *)__p, (uint8_t *)v7 + 40);
        std::operator+<char>();
        std::chrono::steady_clock::time_point v16 = std::string::append(&v102, "\t");
        long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
        v100.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v100.__r_.__value_.__l.__data_ = v17;
        v16->__r_.__value_.__l.__size_ = 0;
        v16->__r_.__value_.__r.__words[2] = 0;
        v16->__r_.__value_.__r.__words[0] = 0;
        if ((v93.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v18 = &v93;
        }
        else {
          uint64_t v18 = (std::string *)v93.__r_.__value_.__r.__words[0];
        }
        if ((v93.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v93.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v93.__r_.__value_.__l.__size_;
        }
        unint64_t v20 = std::string::append(&v100, (const std::string::value_type *)v18, size);
        *(_OWORD *)&__v.__first_ = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
        __v.__end_ = (std::__split_buffer<std::string>::pointer)v20->__r_.__value_.__r.__words[2];
        v20->__r_.__value_.__l.__size_ = 0;
        v20->__r_.__value_.__r.__words[2] = 0;
        v20->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v100.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v102.__r_.__value_.__l.__data_);
        }
        if (Diagnostics_GetLogObject(void)::onceToken != -1) {
          dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
        }
        uint64_t v21 = Diagnostics_GetLogObject(void)::__profile_log_default;
        if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
        {
          Censor::global_plaintext(&v100, (uint64_t)&__v);
          uint64_t v22 = (v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
              ? &v100
              : (std::string *)v100.__r_.__value_.__r.__words[0];
          LODWORD(v102.__r_.__value_.__l.__data_) = 136315138;
          *(std::string::size_type *)((char *)v102.__r_.__value_.__r.__words + 4) = (std::string::size_type)v22;
          _os_log_impl(&dword_20CD80000, v21, OS_LOG_TYPE_INFO, "%s", (uint8_t *)&v102, 0xCu);
          if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v100.__r_.__value_.__l.__data_);
          }
        }
        Censor::global_plaintext(&v100, (uint64_t)&__v);
        if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v24 = &v100;
        }
        else {
          int v24 = (std::string *)v100.__r_.__value_.__r.__words[0];
        }
        Diagnostics::log(6, "%s", v23, v24);
        if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v100.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(__v.__end_) < 0) {
          operator delete(__v.__first_);
        }
        if (SBYTE7(v84) < 0) {
          operator delete(__p[0]);
        }
        if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v93.__r_.__value_.__l.__data_);
        }
        std::chrono::steady_clock::time_point v7 = (const FrontendFeature *)((char *)v7 + 136);
        if (v7 == v8) {
          goto LABEL_63;
        }
      }
      uint64_t v10 = *((void *)v7 + 2);
      goto LABEL_16;
    }
  }
LABEL_63:
  if (*(_DWORD *)(a1[35] + 120) == 1) {
    (*(void (**)(uint64_t *))(*a1 + 64))(a1);
  }
  SharedObjectPool::get_if<TTSSynthesizerEventBusInternal>(&v87, a1[21]);
  uint64_t v25 = (uint64_t **)v87;
  if (!v87) {
    goto LABEL_168;
  }
  Observable::emit((uint64_t **)v87, "tts.feature.frontend", v74);
  if (*((char *)v74 + 119) < 0) {
    std::string::__init_copy_ctor_external(&__str, (const std::string::value_type *)v74[12], (std::string::size_type)v74[13]);
  }
  else {
    std::string __str = *(std::string *)((unsigned char *)v74 + 4);
  }
  uint64_t v26 = *a2;
  {
    uint64_t v28 = *(const std::string **)(*(void *)v27 + 8);
    int v29 = *(std::__shared_weak_count **)(*(void *)v27 + 16);
    if (v29) {
      atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::operator=(&__str, v28);
    if (v29) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v29);
    }
  }
  long long v84 = 0u;
  long long v85 = 0u;
  *(_OWORD *)std::string __p = 0u;
  memset(&v93, 0, sizeof(v93));
  std::vector<PhoneFeature>::__init_with_size[abi:ne180100]<PhoneFeature*,PhoneFeature*>(&v93, (uint64_t)*v74, (uint64_t)v74[1], 0x84BDA12F684BDA13 * ((v74[1] - *v74) >> 3));
  std::string::operator=((std::string *)__p, &__str);
  std::string::size_type v30 = v93.__r_.__value_.__l.__size_;
  std::string::size_type v31 = v93.__r_.__value_.__r.__words[0];
  if (v93.__r_.__value_.__l.__size_ != v93.__r_.__value_.__r.__words[0])
  {
    unint64_t v32 = 0;
    do
    {
      std::string::size_type v33 = v31 + 216 * v32;
      uint64_t v34 = *(_DWORD **)(v33 + 72);
      std::string v35 = *(_DWORD **)(v33 + 80);
      if (v34 != v35)
      {
        do
        {
          if (*v34 == 3)
          {
            uint64_t v36 = v85;
            if ((unint64_t)v85 >= *((void *)&v85 + 1))
            {
              uint64_t v37 = std::vector<MarkerRecord>::__push_back_slow_path<MarkerRecord const&>((uint64_t *)&v84 + 1, (uint64_t)v34);
            }
            else
            {
              std::vector<MarkerRecord>::__construct_one_at_end[abi:ne180100]<MarkerRecord const&>((uint64_t)&v84 + 8, (uint64_t)v34);
              uint64_t v37 = v36 + 56;
            }
            *(void *)&long long v85 = v37;
          }
          v34 += 14;
        }
        while (v34 != v35);
        std::string::size_type v30 = v93.__r_.__value_.__l.__size_;
        std::string::size_type v31 = v93.__r_.__value_.__r.__words[0];
      }
      ++v32;
    }
    while (0x84BDA12F684BDA13 * ((uint64_t)(v30 - v31) >> 3) > v32);
  }
  __v.__first_ = &v93;
  std::vector<PhoneFeature>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
  SharedObjectPool::get_if<TrackSubstitutions>(&v81, a1[21]);
  uint64_t v38 = v81;
  if (v81)
  {
    TrackSubstitutions::reset_text(v81, (uint64_t)&__str);
    if (*(char *)(v38 + 47) < 0) {
      std::string::__init_copy_ctor_external(&v93, *(const std::string::value_type **)(v38 + 24), *(void *)(v38 + 32));
    }
    else {
      std::string v93 = *(std::string *)(v38 + 24);
    }
    if (SBYTE7(v84) < 0) {
      operator delete(__p[0]);
    }
    *(_OWORD *)std::string __p = *(_OWORD *)&v93.__r_.__value_.__l.__data_;
    *(void *)&long long v84 = *((void *)&v93.__r_.__value_.__l + 2);
    uint64_t v39 = *((void *)&v84 + 1);
    uint64_t v40 = v85;
    while (v39 != v40)
    {
      unint64_t v41 = *(void *)(v39 + 32);
      uint64_t v42 = *(void *)(v39 + 40);
      *(void *)(v39 + 32) = TrackSubstitutions::lower_bound((TrackSubstitutions *)v38, v41);
      *(void *)(v39 + 40) = TrackSubstitutions::upper_bound((TrackSubstitutions *)v38, v42 + v41)
                            - *(void *)(v39 + 32);
      v39 += 56;
    }
  }
  Observable::emit(v25, "tts.feature.wordmarkers", __p);
  Observable::emit(v25, "tts.feature.normalizedtext", v74 + 9);
  SharedObjectPool::get_if<TTSSynthesizer::VoiceDescription>(&v79, a1[21]);
  if (v79 && *(_DWORD *)(v79 + 60) == 3)
  {
    FrontendFeatureLogModuleInternal::phoneme_by_words_hydra((FrontendFeatureLogModuleInternal *)&v76, *v74, (uint64_t)v74[1]);
    goto LABEL_160;
  }
  uint64_t v76 = 0;
  long long v77 = 0;
  unint64_t v78 = 0;
  memset(&v100, 0, sizeof(v100));
  std::vector<PhoneFeature>::__init_with_size[abi:ne180100]<PhoneFeature*,PhoneFeature*>(&v100, (uint64_t)*v74, (uint64_t)v74[1], 0x84BDA12F684BDA13 * ((v74[1] - *v74) >> 3));
  std::string::size_type v43 = v100.__r_.__value_.__r.__words[0];
  if (v100.__r_.__value_.__l.__size_ == v100.__r_.__value_.__r.__words[0]) {
    goto LABEL_159;
  }
  uint64_t v44 = 0;
  LODWORD(v45) = 0;
  do
  {
    PhoneFeature::PhoneFeature(&v93, (const PhoneFeature *)(v43 + 216 * v44));
    std::string::size_type v46 = v100.__r_.__value_.__r.__words[0];
    int v47 = *(_DWORD *)(v100.__r_.__value_.__r.__words[0] + 216 * v44 + 144);
    memset(&v102, 0, sizeof(v102));
    if (0x84BDA12F684BDA13 * ((uint64_t)(v100.__r_.__value_.__l.__size_ - v100.__r_.__value_.__r.__words[0]) >> 3) > (int)v45)
    {
      unint64_t v45 = (int)v45;
      uint64_t v48 = 216 * (int)v45 + 96;
      do
      {
        if (v99 != *(_DWORD *)(v46 + v48 + 52)) {
          break;
        }
        if (v47 != *(_DWORD *)(v46 + v48 + 48))
        {
          std::string::basic_string[abi:ne180100]<0>(v91, ".");
          long long v49 = (_OWORD *)v102.__r_.__value_.__l.__size_;
          if (v102.__r_.__value_.__l.__size_ >= v102.__r_.__value_.__r.__words[2])
          {
            unint64_t v51 = 0xAAAAAAAAAAAAAAABLL
                * ((uint64_t)(v102.__r_.__value_.__l.__size_ - v102.__r_.__value_.__r.__words[0]) >> 3);
            unint64_t v52 = v51 + 1;
            if (v51 + 1 > 0xAAAAAAAAAAAAAAALL) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            if (0x5555555555555556
               * ((uint64_t)(v102.__r_.__value_.__r.__words[2] - v102.__r_.__value_.__r.__words[0]) >> 3) > v52)
              unint64_t v52 = 0x5555555555555556
                  * ((uint64_t)(v102.__r_.__value_.__r.__words[2] - v102.__r_.__value_.__r.__words[0]) >> 3);
            if (0xAAAAAAAAAAAAAAABLL
               * ((uint64_t)(v102.__r_.__value_.__r.__words[2] - v102.__r_.__value_.__r.__words[0]) >> 3) >= 0x555555555555555)
              unint64_t v53 = 0xAAAAAAAAAAAAAAALL;
            else {
              unint64_t v53 = v52;
            }
            __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v102.__r_.__value_.__r.__words[2];
            if (v53) {
              uint64_t v54 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v102.__r_.__value_.__r.__words[2], v53);
            }
            else {
              uint64_t v54 = 0;
            }
            std::string::size_type v55 = v54 + v51;
            __v.__first_ = v54;
            __v.__begin_ = v55;
            __v.__end_cap_.__value_ = &v54[v53];
            long long v56 = *(_OWORD *)v91;
            v55->__r_.__value_.__r.__words[2] = v92;
            *(_OWORD *)&v55->__r_.__value_.__l.__data_ = v56;
            v91[1] = 0;
            std::string::size_type v92 = 0;
            v91[0] = 0;
            __v.__end_ = v55 + 1;
            std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)&v102, &__v);
            std::string::size_type v57 = v102.__r_.__value_.__l.__size_;
            std::__split_buffer<std::string>::~__split_buffer(&__v);
            v102.__r_.__value_.__l.__size_ = v57;
            if (SHIBYTE(v92) < 0) {
              operator delete(v91[0]);
            }
          }
          else
          {
            long long v50 = *(_OWORD *)v91;
            *(void *)(v102.__r_.__value_.__l.__size_ + 16) = v92;
            _OWORD *v49 = v50;
            v102.__r_.__value_.__l.__size_ = (std::string::size_type)v49 + 24;
          }
          std::string::size_type v46 = v100.__r_.__value_.__r.__words[0];
          int v47 = *(_DWORD *)(v100.__r_.__value_.__r.__words[0] + v48 + 48);
        }
        std::string::size_type v58 = v46 + v48;
        int v59 = *(unsigned __int8 *)(v46 + v48 + 23);
        if (*(char *)(v46 + v48 + 23) < 0)
        {
          std::string::size_type v61 = *(void *)(v58 + 8);
          if (v61 == 1)
          {
            if (**(unsigned char **)v58 == 35)
            {
LABEL_151:
              LODWORD(v45) = v45 + 1;
              break;
            }
LABEL_135:
            int v65 = (std::string *)v102.__r_.__value_.__l.__size_;
            if (v102.__r_.__value_.__l.__size_ >= v102.__r_.__value_.__r.__words[2]) {
              goto LABEL_138;
            }
LABEL_136:
            std::string::__init_copy_ctor_external(v65, *(const std::string::value_type **)v58, v61);
            goto LABEL_137;
          }
          if (v61 != 3) {
            goto LABEL_135;
          }
          uint64_t v60 = *(const std::string::value_type **)v58;
        }
        else
        {
          if (v59 == 1)
          {
            if (*(unsigned char *)v58 == 35) {
              goto LABEL_151;
            }
LABEL_132:
            int v65 = (std::string *)v102.__r_.__value_.__l.__size_;
            if (v102.__r_.__value_.__l.__size_ >= v102.__r_.__value_.__r.__words[2]) {
              goto LABEL_138;
            }
            goto LABEL_133;
          }
          uint64_t v60 = (const std::string::value_type *)(v46 + v48);
          if (v59 != 3) {
            goto LABEL_132;
          }
        }
        int v62 = *(unsigned __int16 *)v60;
        int v63 = *((unsigned __int8 *)v60 + 2);
        if (v62 == 26995 && v63 == 108)
        {
          std::chrono::steady_clock::time_point v70 = (_OWORD *)v102.__r_.__value_.__l.__size_;
          if (v102.__r_.__value_.__l.__size_ >= v102.__r_.__value_.__r.__words[2])
          {
            std::string::size_type v72 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v102, (long long *)v58);
          }
          else
          {
            if ((v59 & 0x80) != 0)
            {
              std::string::__init_copy_ctor_external((std::string *)v102.__r_.__value_.__l.__size_, *(const std::string::value_type **)v58, *(void *)(v58 + 8));
            }
            else
            {
              long long v71 = *(_OWORD *)v58;
              *(void *)(v102.__r_.__value_.__l.__size_ + 16) = *(void *)(v58 + 16);
              _OWORD *v70 = v71;
            }
            std::string::size_type v72 = (std::string::size_type)v70 + 24;
          }
          v102.__r_.__value_.__l.__size_ = v72;
          LODWORD(v45) = v45 + 1;
          break;
        }
        int v65 = (std::string *)v102.__r_.__value_.__l.__size_;
        if (v102.__r_.__value_.__l.__size_ >= v102.__r_.__value_.__r.__words[2])
        {
LABEL_138:
          std::string::size_type v67 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v102, (long long *)v58);
          goto LABEL_139;
        }
        if ((v59 & 0x80) != 0)
        {
          std::string::size_type v61 = *(void *)(v46 + v48 + 8);
          goto LABEL_136;
        }
LABEL_133:
        long long v66 = *(_OWORD *)v58;
        v65->__r_.__value_.__r.__words[2] = *(void *)(v58 + 16);
        *(_OWORD *)&v65->__r_.__value_.__l.__data_ = v66;
LABEL_137:
        std::string::size_type v67 = (std::string::size_type)&v65[1];
LABEL_139:
        v102.__r_.__value_.__l.__size_ = v67;
        ++v45;
        std::string::size_type v46 = v100.__r_.__value_.__r.__words[0];
        v48 += 216;
      }
      while (0x84BDA12F684BDA13
            * ((uint64_t)(v100.__r_.__value_.__l.__size_ - v100.__r_.__value_.__r.__words[0]) >> 3) > v45);
    }
    long long v68 = v77;
    if ((unint64_t)v77 >= v78)
    {
      uint64_t v69 = std::vector<std::vector<std::string>>::__push_back_slow_path<std::vector<std::string> const&>(&v76, (long long **)&v102);
    }
    else
    {
      v77->__r_.__value_.__r.__words[0] = 0;
      v68->__r_.__value_.__l.__size_ = 0;
      v68->__r_.__value_.__r.__words[2] = 0;
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v68, (long long *)v102.__r_.__value_.__l.__data_, (long long *)v102.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v102.__r_.__value_.__l.__size_ - v102.__r_.__value_.__r.__words[0]) >> 3));
      uint64_t v69 = (uint64_t)&v68[1];
    }
    long long v77 = (std::string *)v69;
    __v.__first_ = &v102;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
    if (v98 < 0) {
      operator delete(v97);
    }
    if (v96 < 0) {
      operator delete(v95);
    }
    __v.__first_ = (std::__split_buffer<std::string>::pointer)&v94;
    std::vector<MarkerRecord>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
    if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v93.__r_.__value_.__l.__data_);
    }
    uint64_t v44 = (int)v45;
    std::string::size_type v43 = v100.__r_.__value_.__r.__words[0];
  }
  while (0x84BDA12F684BDA13 * ((uint64_t)(v100.__r_.__value_.__l.__size_ - v100.__r_.__value_.__r.__words[0]) >> 3) > (int)v45);
  uint64_t v25 = (uint64_t **)v87;
LABEL_159:
  v93.__r_.__value_.__r.__words[0] = (std::string::size_type)&v100;
  std::vector<PhoneFeature>::__destroy_vector::operator()[abi:ne180100]((void ***)&v93);
LABEL_160:
  Observable::emit(v25, "tts.feature.phonemes", &v76);
  v93.__r_.__value_.__r.__words[0] = (std::string::size_type)&v76;
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v93);
  if (v80) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v80);
  }
  if (v82) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v82);
  }
  v93.__r_.__value_.__r.__words[0] = (std::string::size_type)&v84 + 8;
  std::vector<MarkerRecord>::__destroy_vector::operator()[abi:ne180100]((void ***)&v93);
  if (SBYTE7(v84) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
LABEL_168:
  if (v88) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v88);
  }
  if (v73) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v73);
  }
}

void sub_20D45E9C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20,uint64_t a21,std::__shared_weak_count *a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,std::__shared_weak_count *a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,char *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53)
{
  *(void *)(v54 - 120) = v53;
  a42 = (void *)(v54 - 128);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a42);
  PhoneFeature::~PhoneFeature((void **)&a48);
  a48 = (char *)(v54 - 208);
  std::vector<PhoneFeature>::__destroy_vector::operator()[abi:ne180100]((void ***)&a48);
  a48 = &a16;
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a48);
  if (a20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a20);
  }
  if (a22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a22);
  }
  std::pair<std::string,std::vector<MarkerRecord>>::~pair((uint64_t)&a23);
  if (a37 < 0) {
    operator delete(__p);
  }
  if (a39) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a39);
  }
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(a1);
}

void FrontendFeatureLogModuleInternal::phoneme_by_words_hydra(FrontendFeatureLogModuleInternal *this, const FrontendFeature *a2, uint64_t a3)
{
  uint64_t v43 = 0;
  uint64_t v44 = 0;
  uint64_t v45 = 0;
  std::vector<PhoneFeature>::__init_with_size[abi:ne180100]<PhoneFeature*,PhoneFeature*>(&v43, (uint64_t)a2, a3, 0x84BDA12F684BDA13 * ((a3 - (uint64_t)a2) >> 3));
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  memset(&v42, 0, sizeof(v42));
  uint64_t v4 = v43;
  uint64_t v5 = v44;
  if (v43 == v44) {
    goto LABEL_82;
  }
  do
  {
    std::chrono::steady_clock::time_point v6 = (unsigned __int8 **)(v4 + 96);
    int v7 = *(char *)(v4 + 119);
    if (v7 < 0)
    {
      if (*(void *)(v4 + 104) != 1) {
        goto LABEL_14;
      }
      int v8 = **v6;
    }
    else
    {
      if (v7 != 1) {
        goto LABEL_14;
      }
      int v8 = *(unsigned __int8 *)v6;
    }
    if (v8 == 35 || v8 == 95)
    {
      std::vector<std::string>::pointer begin = v42.__begin_;
      std::vector<std::string>::pointer end = v42.__end_;
      if (v42.__begin_ == v42.__end_) {
        goto LABEL_67;
      }
      std::vector<std::string>::pointer v11 = v42.__end_ - 1;
      int v12 = SHIBYTE(v42.__end_[-1].__r_.__value_.__r.__words[2]);
      if (v12 < 0)
      {
        if (v42.__end_[-1].__r_.__value_.__l.__size_ != 1 || *v11->__r_.__value_.__l.__data_ != 46) {
          goto LABEL_49;
        }
        operator delete(v11->__r_.__value_.__l.__data_);
        std::vector<std::string>::pointer begin = v42.__begin_;
      }
      else if (v12 != 1 || v11->__r_.__value_.__s.__data_[0] != 46)
      {
        goto LABEL_49;
      }
      v42.__end_ = v11;
      std::vector<std::string>::pointer end = v11;
LABEL_49:
      if (begin == end) {
        goto LABEL_67;
      }
      unint64_t v26 = *((void *)this + 1);
      if (v26 >= *((void *)this + 2))
      {
        uint64_t v27 = std::vector<std::vector<std::string>>::__push_back_slow_path<std::vector<std::string> const&>((uint64_t *)this, (long long **)&v42);
      }
      else
      {
        std::vector<std::vector<std::string>>::__construct_one_at_end[abi:ne180100]<std::vector<std::string> const&>((uint64_t)this, (long long **)&v42);
        uint64_t v27 = v26 + 24;
      }
      *((void *)this + 1) = v27;
      int v24 = v42.__begin_;
      for (std::vector<std::string>::pointer i = v42.__end_; i != v24; --i)
      {
        if (SHIBYTE(i[-1].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(i[-1].__r_.__value_.__l.__data_);
        }
      }
      goto LABEL_66;
    }
LABEL_14:
    std::vector<std::string>::pointer v13 = v42.__end_;
    if (*(_DWORD *)(v4 + 156) == 1 && v42.__begin_ != v42.__end_)
    {
      unint64_t v15 = *((void *)this + 1);
      if (v15 >= *((void *)this + 2))
      {
        uint64_t v16 = std::vector<std::vector<std::string>>::__push_back_slow_path<std::vector<std::string> const&>((uint64_t *)this, (long long **)&v42);
      }
      else
      {
        std::vector<std::vector<std::string>>::__construct_one_at_end[abi:ne180100]<std::vector<std::string> const&>((uint64_t)this, (long long **)&v42);
        uint64_t v16 = v15 + 24;
      }
      *((void *)this + 1) = v16;
      std::vector<std::string>::pointer v13 = v42.__begin_;
      for (std::vector<std::string>::pointer j = v42.__end_; j != v13; --j)
      {
        if (SHIBYTE(j[-1].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(j[-1].__r_.__value_.__l.__data_);
        }
      }
      v42.__end_ = v13;
    }
    if (v13 >= v42.__end_cap_.__value_)
    {
      uint64_t v19 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v42, (long long *)(v4 + 96));
    }
    else
    {
      if (*(char *)(v4 + 119) < 0)
      {
        std::string::__init_copy_ctor_external(v13, *(const std::string::value_type **)(v4 + 96), *(void *)(v4 + 104));
      }
      else
      {
        long long v18 = *(_OWORD *)v6;
        v13->__r_.__value_.__r.__words[2] = *(void *)(v4 + 112);
        *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v18;
      }
      uint64_t v19 = v13 + 1;
    }
    v42.__end_ = v19;
    if (*(_DWORD *)(v4 + 160) == 1)
    {
      unint64_t v20 = *((void *)this + 1);
      if (v20 >= *((void *)this + 2))
      {
        uint64_t v21 = std::vector<std::vector<std::string>>::__push_back_slow_path<std::vector<std::string> const&>((uint64_t *)this, (long long **)&v42);
      }
      else
      {
        std::vector<std::vector<std::string>>::__construct_one_at_end[abi:ne180100]<std::vector<std::string> const&>((uint64_t)this, (long long **)&v42);
        uint64_t v21 = v20 + 24;
      }
      *((void *)this + 1) = v21;
      int v24 = v42.__begin_;
      for (std::vector<std::string>::pointer k = v42.__end_; k != v24; --k)
      {
        if (SHIBYTE(k[-1].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(k[-1].__r_.__value_.__l.__data_);
        }
      }
LABEL_66:
      v42.__end_ = v24;
      goto LABEL_67;
    }
    if (*(_DWORD *)(v4 + 172) == 1)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, ".");
      std::vector<std::string>::pointer v22 = v42.__end_;
      if (v42.__end_ >= v42.__end_cap_.__value_)
      {
        unint64_t v28 = 0xAAAAAAAAAAAAAAABLL * (((char *)v42.__end_ - (char *)v42.__begin_) >> 3);
        unint64_t v29 = v28 + 1;
        if (v28 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        if (0x5555555555555556 * (((char *)v42.__end_cap_.__value_ - (char *)v42.__begin_) >> 3) > v29) {
          unint64_t v29 = 0x5555555555555556 * (((char *)v42.__end_cap_.__value_ - (char *)v42.__begin_) >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * (((char *)v42.__end_cap_.__value_ - (char *)v42.__begin_) >> 3) >= 0x555555555555555) {
          unint64_t v30 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v30 = v29;
        }
        __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v42.__end_cap_;
        if (v30) {
          std::string::size_type v31 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v42.__end_cap_, v30);
        }
        else {
          std::string::size_type v31 = 0;
        }
        std::string::size_type v33 = v31 + v28;
        __v.__first_ = v31;
        __v.__begin_ = v33;
        __v.__end_cap_.__value_ = &v31[v30];
        long long v34 = *(_OWORD *)__p;
        v33->__r_.__value_.__r.__words[2] = v41;
        *(_OWORD *)&v33->__r_.__value_.__l.__data_ = v34;
        __p[1] = 0;
        std::string::size_type v41 = 0;
        __p[0] = 0;
        __v.__end_ = v33 + 1;
        std::vector<std::string>::__swap_out_circular_buffer(&v42, &__v);
        std::string v35 = v42.__end_;
        std::__split_buffer<std::string>::~__split_buffer(&__v);
        v42.__end_ = v35;
        if (SHIBYTE(v41) < 0) {
          operator delete(__p[0]);
        }
      }
      else
      {
        long long v23 = *(_OWORD *)__p;
        v42.__end_->__r_.__value_.__r.__words[2] = v41;
        *(_OWORD *)&v22->__r_.__value_.__l.__data_ = v23;
        v42.__end_ = v22 + 1;
      }
    }
LABEL_67:
    v4 += 216;
  }
  while (v4 != v5);
  if (v42.__begin_ != v42.__end_)
  {
    unint64_t v36 = *((void *)this + 1);
    if (v36 >= *((void *)this + 2))
    {
      uint64_t v37 = std::vector<std::vector<std::string>>::__push_back_slow_path<std::vector<std::string> const&>((uint64_t *)this, (long long **)&v42);
    }
    else
    {
      std::vector<std::vector<std::string>>::__construct_one_at_end[abi:ne180100]<std::vector<std::string> const&>((uint64_t)this, (long long **)&v42);
      uint64_t v37 = v36 + 24;
    }
    *((void *)this + 1) = v37;
    uint64_t v38 = v42.__begin_;
    for (std::vector<std::string>::pointer m = v42.__end_; m != v38; --m)
    {
      if (SHIBYTE(m[-1].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(m[-1].__r_.__value_.__l.__data_);
      }
    }
    v42.__end_ = v38;
  }
LABEL_82:
  __v.__first_ = (std::__split_buffer<std::string>::pointer)&v42;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
  __v.__first_ = (std::__split_buffer<std::string>::pointer)&v43;
  std::vector<PhoneFeature>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
}

void sub_20D45F074(_Unwind_Exception *__p, uint64_t a2, int a3, __int16 a4, char a5, char a6, uint64_t a7, uint64_t a8, char **__pa, char a10, uint64_t a11, char *a12, std::__split_buffer<std::string> *a13, uint64_t a14, char a15)
{
  __pa = &a12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__pa);
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  a12 = &a15;
  std::vector<PhoneFeature>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(__p);
}

uint64_t std::pair<std::string,std::vector<MarkerRecord>>::~pair(uint64_t a1)
{
  long long v3 = (void **)(a1 + 24);
  std::vector<MarkerRecord>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

std::string *std::vector<std::vector<std::string>>::__construct_one_at_end[abi:ne180100]<std::vector<std::string> const&>(uint64_t a1, long long **a2)
{
  long long v3 = *(std::string **)(a1 + 8);
  v3->__r_.__value_.__r.__words[0] = 0;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  __n128 result = std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v3, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  *(void *)(a1 + 8) = v3 + 1;
  return result;
}

void sub_20D45F190(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void FrontendFeatureLogModule::~FrontendFeatureLogModule(FrontendFeatureLogModule *this)
{
  *(void *)this = off_26C203CB0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 36);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  Module::~Module(this);
  JUMPOUT(0x2105595E0);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = off_26C203CB0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 36);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  Module::~Module(this);
}

uint64_t FrontendFeatureLogModule::FrontendFeatureLogModule(uint64_t a1, char *a2, uint64_t a3, std::__shared_weak_count *a4)
{
  v12[0] = a3;
  v12[1] = (uint64_t)a4;
  if (a4) {
    atomic_fetch_add_explicit(&a4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Module::Module(a1, a2, v12);
  if (a4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a4);
  }
  *(void *)a1 = off_26C203CB0;
  *(unsigned char *)(a1 + 272) = 1;
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 288) = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "enable_print");
  unsigned __int8 v9 = 1;
  *(unsigned char *)(a1 + 272) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<BOOL,0>(a2, (const void **)__p, &v9);
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  SharedObjectPool::get<SynthesizerConfig>(__p, *(void *)(a1 + 168));
  int v7 = *(std::__shared_weak_count **)(a1 + 288);
  *(_OWORD *)(a1 + 280) = *(_OWORD *)__p;
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  return a1;
}

void sub_20D45F354(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  long long v18 = (std::__shared_weak_count *)*((void *)v16 + 36);
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  Module::~Module(v16);
  _Unwind_Resume(a1);
}

void sub_20D45F390()
{
  if (v0) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v0);
  }
  JUMPOUT(0x20D45F388);
}

void TTSSynthesizerCallbackResult::TTSSynthesizerCallbackResult(std::string *this, long long *a2, std::string::size_type a3, std::string::size_type a4, std::string::size_type a5, uint64_t a6, std::string::value_type a7)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v13 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v13;
  }
  *(_OWORD *)&this[2].__r_.__value_.__r.__words[1] = 0u;
  this[1].__r_.__value_.__r.__words[0] = a4;
  this[1].__r_.__value_.__l.__size_ = a3;
  this[1].__r_.__value_.__r.__words[2] = a5;
  this[2].__r_.__value_.__r.__words[0] = 9600;
  *(_OWORD *)&this[3].__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&this[3].__r_.__value_.__r.__words[2] = 0u;
  std::__function::__value_func<int ()(TTSSynthesizer::CallbackMessage)>::__value_func[abi:ne180100]((uint64_t)&this[4].__r_.__value_.__l.__size_, a6);
  std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) == 0) {
    unint64_t v15 = this;
  }
  else {
    unint64_t v15 = (std::string *)this->__r_.__value_.__r.__words[0];
  }
  this[8].__r_.__value_.__r.__words[2] = (std::string::size_type)v15;
  uint64_t v16 = &this[8].__r_.__value_.__r.__words[2];
  if ((size & 0x80u) != 0) {
    std::string::size_type size = this->__r_.__value_.__l.__size_;
  }
  *(_OWORD *)&this[6].__r_.__value_.__r.__words[2] = 0u;
  *(_OWORD *)&this[7].__r_.__value_.__r.__words[1] = 0u;
  this[8].__r_.__value_.__r.__words[0] = (std::string::size_type)v15;
  this[8].__r_.__value_.__l.__size_ = size << 32;
  this[9].__r_.__value_.__r.__words[0] = size | ((unint64_t)size << 32);
  this[9].__r_.__value_.__s.__data_[8] = 0;
  this[9].__r_.__value_.__s.__data_[9] = a7;
  this[9].__r_.__value_.__s.__data_[10] = 0;
  long long v17 = operator new(0x20uLL);
  *long long v17 = &off_26C211418;
  v17[1] = TTSSynthesizerCallbackResult::internal_callback;
  v17[2] = 0;
  void v17[3] = this;
  int v24 = v17;
  if (&this[5].__r_.__value_.__r.__words[2] != (std::string::size_type *)s)
  {
    int v24 = 0;
    this[6].__r_.__value_.__r.__words[2] = (std::string::size_type)v17;
  }
  std::__function::__value_func<int ()(InternalCallbackContainer)>::~__value_func[abi:ne180100](s);
  std::string::size_type v18 = this[2].__r_.__value_.__l.__size_;
  std::string::pointer data = this[2].__r_.__value_.__l.__data_;
  std::string::size_type v20 = this[2].__r_.__value_.__r.__words[2] - v18;
  if ((unint64_t)data <= v20)
  {
    if ((unint64_t)data < v20) {
      this[2].__r_.__value_.__r.__words[2] = (std::string::size_type)&data[v18];
    }
  }
  else
  {
    std::vector<signed char>::__append(&this[2].__r_.__value_.__l.__size_, (size_t)&data[-v20]);
  }
  std::vector<VE_MARKINFO>::resize((char **)&this[3].__r_.__value_.__l.__size_);
  while (LODWORD(this[9].__r_.__value_.__l.__data_) != LODWORD(this[8].__r_.__value_.__r.__words[1]))
  {
    *(_OWORD *)s = *(_OWORD *)v16;
    uint64_t v21 = SLODWORD(s[1]) - 1;
    --LODWORD(s[1]);
    if ((char)s[0][v21] <= -65) {
      LODWORD(s[1]) = utf8_back1SafeBody(s[0], 0, v21);
    }
    UChar32 v22 = UTFString::codepoint_iterator<std::string>::operator*((uint64_t *)s);
    if (!u_isUWhiteSpace(v22)) {
      break;
    }
    *(_OWORD *)uint64_t v16 = *(_OWORD *)s;
  }
}

void sub_20D45F5C4(_Unwind_Exception *a1)
{
  int v7 = *(std::__shared_weak_count **)(v1 + 176);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  std::__function::__value_func<int ()(InternalCallbackContainer)>::~__value_func[abi:ne180100](v5);
  std::__function::__value_func<int ()(TTSSynthesizer::CallbackMessage)>::~__value_func[abi:ne180100](v4);
  int v8 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 88) = v8;
    operator delete(v8);
  }
  unsigned __int8 v9 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 64) = v9;
    operator delete(v9);
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__value_func<int ()(TTSSynthesizer::CallbackMessage)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + ++*(_DWORD *)(result + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + ++*(_DWORD *)(result + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + ++*(_DWORD *)(result + 24) = 0;
  }
  return a1;
}

void *std::__function::__value_func<int ()(InternalCallbackContainer)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<int ()(TTSSynthesizer::CallbackMessage)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

char **std::__function::__func<std::__bind<int (TTSSynthesizerCallbackResult::*)(InternalCallbackContainer),TTSSynthesizerCallbackResult*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<int (TTSSynthesizerCallbackResult::*)(InternalCallbackContainer),TTSSynthesizerCallbackResult*,std::placeholders::__ph<1> const&>>,int ()(InternalCallbackContainer)>::target_type()
{
}

uint64_t std::__function::__func<std::__bind<int (TTSSynthesizerCallbackResult::*)(InternalCallbackContainer),TTSSynthesizerCallbackResult*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<int (TTSSynthesizerCallbackResult::*)(InternalCallbackContainer),TTSSynthesizerCallbackResult*,std::placeholders::__ph<1> const&>>,int ()(InternalCallbackContainer)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<std::__bind<int (TTSSynthesizerCallbackResult::*)(InternalCallbackContainer),TTSSynthesizerCallbackResult*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<int (TTSSynthesizerCallbackResult::*)(InternalCallbackContainer),TTSSynthesizerCallbackResult*,std::placeholders::__ph<1> const&>>,int ()(InternalCallbackContainer)>::operator()(void *a1, long long *a2)
{
  uint64_t v2 = a1[2];
  uint64_t v3 = (uint64_t (*)(void *, long long *))a1[1];
  uint64_t v4 = (void *)(a1[3] + (v2 >> 1));
  if (v2) {
    uint64_t v3 = *(uint64_t (**)(void *, long long *))(*v4 + v3);
  }
  long long v6 = *a2;
  uint64_t v7 = *((void *)a2 + 2);
  return v3(v4, &v6);
}

__n128 std::__function::__func<std::__bind<int (TTSSynthesizerCallbackResult::*)(InternalCallbackContainer),TTSSynthesizerCallbackResult*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<int (TTSSynthesizerCallbackResult::*)(InternalCallbackContainer),TTSSynthesizerCallbackResult*,std::placeholders::__ph<1> const&>>,int ()(InternalCallbackContainer)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_26C211418;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + ++*(_DWORD *)(result + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<std::__bind<int (TTSSynthesizerCallbackResult::*)(InternalCallbackContainer),TTSSynthesizerCallbackResult*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<int (TTSSynthesizerCallbackResult::*)(InternalCallbackContainer),TTSSynthesizerCallbackResult*,std::placeholders::__ph<1> const&>>,int ()(InternalCallbackContainer)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &off_26C211418;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

void std::__function::__func<std::__bind<int (TTSSynthesizerCallbackResult::*)(InternalCallbackContainer),TTSSynthesizerCallbackResult*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<int (TTSSynthesizerCallbackResult::*)(InternalCallbackContainer),TTSSynthesizerCallbackResult*,std::placeholders::__ph<1> const&>>,int ()(InternalCallbackContainer)>::~__func()
{
}

uint64_t TTSSynthesizerCallbackResult::internal_callback(uint64_t a1, uint64_t a2)
{
  uint64_t v48 = *MEMORY[0x263EF8340];
  switch(*(_DWORD *)a2)
  {
    case 1:
      uint64_t v4 = *(void *)(a1 + 128);
      if (v4)
      {
        int v5 = 0;
        goto LABEL_43;
      }
      return *(unsigned int *)(a1 + 184);
    case 2:
      uint64_t v4 = *(void *)(a1 + 128);
      if (v4)
      {
        int v5 = 1;
        goto LABEL_43;
      }
      return *(unsigned int *)(a1 + 184);
    case 3:
      uint64_t v4 = *(void *)(a1 + 128);
      if (v4)
      {
        int v5 = 2;
        goto LABEL_43;
      }
      return *(unsigned int *)(a1 + 184);
    case 4:
      uint64_t v6 = *(void *)(a1 + 128);
      if (v6)
      {
        int v7 = std::function<int ()(TTSSynthesizer::CallbackMessage)>::operator()(v6, 3);
        *(void *)(a1 + 184) = v7;
        if (v7) {
          goto LABEL_56;
        }
      }
      else if (*(void *)(a1 + 184))
      {
        goto LABEL_56;
      }
      uint64_t v25 = *(void **)(a2 + 8);
      if (v25)
      {
        unint64_t v26 = *(unint64_t **)(a1 + 32);
        unint64_t v27 = *v26;
        unint64_t v28 = (char *)v26[1];
        unint64_t v29 = &v28[-*v26];
        size_t v30 = (size_t)&v29[(uint64_t)(v25[1] - *v25) >> 2];
        if (v26[2] - *v26 < v30)
        {
          if ((v30 & 0x8000000000000000) != 0) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          std::string::size_type v31 = (char *)operator new(v30);
          unint64_t v32 = &v29[(void)v31];
          if (v28 != (char *)v27)
          {
            std::string::size_type v33 = &v28[~v27];
            do
            {
              char v34 = *--v28;
              (v33--)[(void)v31] = v34;
            }
            while (v28 != (char *)v27);
            unint64_t v32 = v31;
          }
          *unint64_t v26 = (unint64_t)v32;
          v26[1] = (unint64_t)&v29[(void)v31];
          v26[2] = (unint64_t)&v31[v30];
          if (v27) {
            operator delete((void *)v27);
          }
        }
        std::string v35 = *(float ***)(a2 + 8);
        unint64_t v36 = *v35;
        uint64_t v37 = v35[1];
        if (*v35 != v37)
        {
          do
          {
            LOWORD(__src.__r_.__value_.__l.__data_) = (int)*v36;
            std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(*(void *)(a1 + 32), *(char **)(*(void *)(a1 + 32) + 8), (char *)&__src, &__src.__r_.__value_.__s.__data_[2], 2);
            ++v36;
          }
          while (v36 != v37);
        }
      }
LABEL_56:
      uint64_t v38 = *(void *)(a1 + 128);
      if (v38)
      {
        int v24 = std::function<int ()(TTSSynthesizer::CallbackMessage)>::operator()(v38, 4);
        goto LABEL_58;
      }
      return *(unsigned int *)(a1 + 184);
    case 5:
      int v8 = *(uint64_t **)(a1 + 40);
      if (v8)
      {
        *(unsigned char *)(a1 + 226) = 1;
        std::vector<TTSSynthesizer::Marker>::__insert_with_size[abi:ne180100]<std::__wrap_iter<TTSSynthesizer::Marker*>,std::__wrap_iter<TTSSynthesizer::Marker*>>(v8, v8[1], **(void **)(a2 + 16), *(long long **)(*(void *)(a2 + 16) + 8), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(*(void *)(a2 + 16) + 8) - **(void **)(a2 + 16)) >> 3));
        uint64_t v9 = *(void *)(a1 + 128);
        if (v9) {
          *(void *)(a1 + 184) = (int)std::function<int ()(TTSSynthesizer::CallbackMessage)>::operator()(v9, 5);
        }
        uint64_t v10 = *(uint64_t **)(a2 + 16);
        uint64_t v11 = *v10;
        uint64_t v12 = v10[1];
        if (*v10 != v12)
        {
          do
          {
            if (!*(_DWORD *)v11)
            {
              std::string::basic_string[abi:ne180100]<0>(&__p, "n/a");
              if (*(char *)(a1 + 23) < 0) {
                std::string::size_type v13 = *(void *)(a1 + 8);
              }
              else {
                std::string::size_type v13 = *(unsigned __int8 *)(a1 + 23);
              }
              std::string::size_type v14 = *(void *)(v11 + 8);
              if (v14 <= v13)
              {
                std::string::basic_string(&__src, (const std::string *)a1, v14, *(void *)(v11 + 16), (std::allocator<char> *)&v41);
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__p.__r_.__value_.__l.__data_);
                }
                std::string __p = __src;
                Censor::global_plaintext(&__src, (uint64_t)&__p);
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__p.__r_.__value_.__l.__data_);
                }
                std::string __p = __src;
              }
              if (Diagnostics_GetLogObject(void)::onceToken != -1) {
                dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
              }
              unint64_t v15 = Diagnostics_GetLogObject(void)::__profile_log_default;
              if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
              {
                std::string::size_type v17 = *(void *)(v11 + 8);
                std::string::size_type v18 = *(void *)(v11 + 16) + v17;
                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  p_p = &__p;
                }
                else {
                  p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
                }
                unint64_t v20 = *(void *)(v11 + 24);
                LODWORD(__src.__r_.__value_.__l.__data_) = 134219010;
                *(std::string::size_type *)((char *)__src.__r_.__value_.__r.__words + 4) = v17;
                WORD2(__src.__r_.__value_.__r.__words[1]) = 2048;
                *(std::string::size_type *)((char *)&__src.__r_.__value_.__r.__words[1] + 6) = v18;
                HIWORD(__src.__r_.__value_.__r.__words[2]) = 2080;
                uint64_t v43 = p_p;
                __int16 v44 = 2048;
                unint64_t v45 = v20;
                __int16 v46 = 2048;
                double v47 = (float)v20 / 48000.0;
                _os_log_impl(&dword_20CD80000, v15, OS_LOG_TYPE_INFO, "WordMarker [%zu, %zu], word: '%s', sample_idx: %zu, time@48k: %.2f", (uint8_t *)&__src, 0x34u);
              }
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                uint64_t v21 = &__p;
              }
              else {
                uint64_t v21 = (std::string *)__p.__r_.__value_.__r.__words[0];
              }
              Diagnostics::log(6, "WordMarker [%zu, %zu], word: '%s', sample_idx: %zu, time@48k: %.2f", v16, *(void *)(v11 + 8), *(void *)(v11 + 16) + *(void *)(v11 + 8), v21, *(void *)(v11 + 24), (float)*(unint64_t *)(v11 + 24) / 48000.0);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__p.__r_.__value_.__l.__data_);
              }
            }
            v11 += 56;
          }
          while (v11 != v12);
        }
      }
      return *(unsigned int *)(a1 + 184);
    case 6:
      uint64_t v22 = *(void *)(a1 + 24);
      if (v22)
      {
        uint64_t v23 = *(void *)(a2 + 8);
        if (v23)
        {
          *(void *)(v22 + 8) = *(void *)v22;
          std::vector<float>::__assign_with_size[abi:ne180100]<std::__wrap_iter<float *>,std::__wrap_iter<float *>>((char *)v22, *(char **)v23, *(void *)(v23 + 8), (uint64_t)(*(void *)(v23 + 8) - *(void *)v23) >> 2);
          uint64_t v4 = *(void *)(a1 + 128);
          if (v4)
          {
            int v5 = 6;
LABEL_43:
            int v24 = std::function<int ()(TTSSynthesizer::CallbackMessage)>::operator()(v4, v5);
LABEL_58:
            *(void *)(a1 + 184) = v24;
          }
        }
      }
      return *(unsigned int *)(a1 + 184);
    default:
      return *(unsigned int *)(a1 + 184);
  }
}

void sub_20D45FD8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::function<int ()(TTSSynthesizer::CallbackMessage)>::operator()(uint64_t a1, int a2)
{
  int v3 = a2;
  if (!a1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)a1 + 48))(a1, &v3);
}

void std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(uint64_t a1, char *__dst, char *__src, char *a4, int64_t a5)
{
  if (a5 < 1) {
    return;
  }
  uint64_t v10 = *(unsigned char **)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 16);
  if (v9 - (uint64_t)v10 < a5)
  {
    uint64_t v11 = *(char **)a1;
    uint64_t v12 = (uint64_t)&v10[a5 - *(void *)a1];
    if (v12 < 0) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v13 = (char *)(__dst - v11);
    unint64_t v14 = v9 - (void)v11;
    if (2 * v14 > v12) {
      uint64_t v12 = 2 * v14;
    }
    if (v14 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v15 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v15 = v12;
    }
    if (v15) {
      uint64_t v16 = (char *)operator new(v15);
    }
    else {
      uint64_t v16 = 0;
    }
    unint64_t v26 = &v13[(void)v16];
    memcpy(&v13[(void)v16], __src, a5);
    if (v11 == __dst)
    {
      unint64_t v27 = &v13[(void)v16];
    }
    else
    {
      do
      {
        v13[(void)v16 - 1] = v13[(void)(v11 - 1)];
        --v13;
      }
      while (v13);
      uint64_t v10 = *(unsigned char **)(a1 + 8);
      unint64_t v27 = v16;
    }
    unint64_t v28 = &v26[a5];
    unint64_t v29 = &v16[v15];
    if (v10 != __dst) {
      memmove(v28, __dst, v10 - __dst);
    }
    size_t v30 = *(char **)a1;
    *(void *)a1 = v27;
    *(void *)(a1 + 8) = &v28[v10 - __dst];
    *(void *)(a1 + 16) = v29;
    if (v30)
    {
      operator delete(v30);
    }
    return;
  }
  uint64_t v17 = v10 - __dst;
  if (v10 - __dst >= a5)
  {
    std::string::size_type v18 = &__src[a5];
    unint64_t v20 = *(unsigned char **)(a1 + 8);
LABEL_17:
    uint64_t v21 = &__dst[a5];
    uint64_t v22 = &v20[-a5];
    uint64_t v23 = v20;
    if (&v20[-a5] < v10)
    {
      int v24 = (char *)(&v10[a5] - v20);
      uint64_t v23 = v20;
      do
      {
        char v25 = *v22++;
        *v23++ = v25;
        --v24;
      }
      while (v24);
    }
    *(void *)(a1 + 8) = v23;
    if (v20 != v21) {
      memmove(&__dst[a5], __dst, v20 - v21);
    }
    if (v18 != __src)
    {
      memmove(__dst, __src, v18 - __src);
    }
    return;
  }
  std::string::size_type v18 = &__src[v17];
  int64_t v19 = a4 - &__src[v17];
  if (a4 != &__src[v17]) {
    memmove(*(void **)(a1 + 8), &__src[v17], a4 - &__src[v17]);
  }
  unint64_t v20 = &v10[v19];
  *(void *)(a1 + 8) = &v10[v19];
  if (v17 >= 1) {
    goto LABEL_17;
  }
}

void std::vector<TTSSynthesizer::Marker>::__insert_with_size[abi:ne180100]<std::__wrap_iter<TTSSynthesizer::Marker*>,std::__wrap_iter<TTSSynthesizer::Marker*>>(uint64_t *a1, uint64_t a2, uint64_t a3, long long *a4, uint64_t a5)
{
  if (a5 >= 1)
  {
    uint64_t v6 = a3;
    uint64_t v8 = *a1;
    uint64_t v9 = (a2 - *a1) / 56;
    uint64_t v10 = *a1 + 56 * v9;
    uint64_t v12 = (uint64_t)(a1 + 2);
    uint64_t v11 = a1[2];
    unint64_t v13 = a1[1];
    if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v11 - v13) >> 3) >= a5)
    {
      if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v13 - v10) >> 3) >= a5)
      {
        std::string::size_type v18 = (long long *)(a3 + 56 * a5);
        uint64_t v19 = a1[1];
      }
      else
      {
        std::string::size_type v18 = (long long *)(a3 + 8 * ((uint64_t)(v13 - v10) >> 3));
        uint64_t v19 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<TTSSynthesizer::Marker>,TTSSynthesizer::Marker*,TTSSynthesizer::Marker*,TTSSynthesizer::Marker*>((uint64_t)(a1 + 2), v18, a4, v13);
        a1[1] = v19;
        if ((uint64_t)(v13 - v10) < 1) {
          return;
        }
      }
      uint64_t v20 = v10 + 56 * a5;
      unint64_t v21 = v19 - 56 * a5;
      uint64_t v22 = v19;
      if (v21 < v13)
      {
        uint64_t v22 = v19;
        do
        {
          long long v23 = *(_OWORD *)(v21 + 16);
          *(_OWORD *)uint64_t v22 = *(_OWORD *)v21;
          *(_OWORD *)(v22 + 16) = v23;
          long long v24 = *(_OWORD *)(v21 + 32);
          *(void *)(v22 + 48) = *(void *)(v21 + 48);
          *(_OWORD *)(v22 + 32) = v24;
          *(void *)(v21 + 40) = 0;
          *(void *)(v21 + 48) = 0;
          *(void *)(v21 + 32) = 0;
          v22 += 56;
          v21 += 56;
        }
        while (v21 < v13);
      }
      a1[1] = v22;
      if (v19 != v20)
      {
        uint64_t v25 = 0;
        uint64_t v26 = 0x6DB6DB6DB6DB6DB7 * ((v19 - v20) >> 3);
        uint64_t v27 = v8 + 56 * v26 + 56 * v9;
        uint64_t v28 = -56 * v26;
        do
        {
          uint64_t v29 = v27 + v25;
          uint64_t v30 = v19 + v25;
          long long v31 = *(_OWORD *)(v27 + v25 - 56);
          *(_OWORD *)(v30 - 40) = *(_OWORD *)(v27 + v25 - 40);
          *(_OWORD *)(v30 - 56) = v31;
          uint64_t v32 = v19 + v25 - 24;
          if (*(char *)(v19 + v25 - 1) < 0) {
            operator delete(*(void **)v32);
          }
          v25 -= 56;
          long long v33 = *(_OWORD *)(v29 - 24);
          *(void *)(v32 + 16) = *(void *)(v29 - 8);
          *(_OWORD *)uint64_t v32 = v33;
          *(unsigned char *)(v29 - 1) = 0;
          *(unsigned char *)(v29 - ++*(_DWORD *)(result + 24) = 0;
        }
        while (v28 != v25);
      }
      for (; (long long *)v6 != v18; v10 += 56)
      {
        long long v34 = *(_OWORD *)(v6 + 16);
        *(_OWORD *)uint64_t v10 = *(_OWORD *)v6;
        *(_OWORD *)(v10 + 16) = v34;
        std::string::operator=((std::string *)(v10 + 32), (const std::string *)(v6 + 32));
        v6 += 56;
      }
    }
    else
    {
      unint64_t v14 = a5 + 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v13 - v8) >> 3);
      if (v14 > 0x492492492492492) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v15 = 0x6DB6DB6DB6DB6DB7 * ((v11 - v8) >> 3);
      if (2 * v15 > v14) {
        unint64_t v14 = 2 * v15;
      }
      if (v15 >= 0x249249249249249) {
        unint64_t v16 = 0x492492492492492;
      }
      else {
        unint64_t v16 = v14;
      }
      uint64_t v50 = v12;
      if (v16) {
        unint64_t v16 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<MarkerRecord>>(v16);
      }
      else {
        uint64_t v17 = 0;
      }
      unint64_t v47 = v16;
      *(void *)&long long v48 = v16 + 56 * v9;
      *((void *)&v48 + 1) = v48;
      unint64_t v49 = v16 + 56 * v17;
      uint64_t v35 = 56 * a5;
      uint64_t v36 = v48 + 56 * a5;
      uint64_t v37 = (std::string *)(v48 + 32);
      uint64_t v38 = (long long *)(v6 + 32);
      do
      {
        long long v39 = *(v38 - 1);
        *(_OWORD *)&v37[-2].__r_.__value_.__r.__words[2] = *(v38 - 2);
        *(_OWORD *)&v37[-1].__r_.__value_.__r.__words[1] = v39;
        if (*((char *)v38 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(v37, *(const std::string::value_type **)v38, *((void *)v38 + 1));
        }
        else
        {
          long long v40 = *v38;
          v37->__r_.__value_.__r.__words[2] = *((void *)v38 + 2);
          *(_OWORD *)&v37->__r_.__value_.__l.__data_ = v40;
        }
        uint64_t v37 = (std::string *)((char *)v37 + 56);
        uint64_t v38 = (long long *)((char *)v38 + 56);
        v35 -= 56;
      }
      while (v35);
      *((void *)&v48 + 1) = v36;
      *(void *)&long long v48 = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<TTSSynthesizer::Marker>,std::reverse_iterator<TTSSynthesizer::Marker*>,std::reverse_iterator<TTSSynthesizer::Marker*>,std::reverse_iterator<TTSSynthesizer::Marker*>>(v12, v10, v10, *a1, *a1, v48, v48);
      uint64_t v41 = a1[1];
      uint64_t v53 = v36;
      uint64_t v54 = v36;
      v51[0] = v12;
      v51[1] = &v53;
      v51[2] = &v54;
      if (v10 != v41)
      {
        do
        {
          long long v42 = *(_OWORD *)(v10 + 16);
          *(_OWORD *)uint64_t v36 = *(_OWORD *)v10;
          *(_OWORD *)(v36 + 16) = v42;
          long long v43 = *(_OWORD *)(v10 + 32);
          *(void *)(v36 + 48) = *(void *)(v10 + 48);
          *(_OWORD *)(v36 + 32) = v43;
          *(void *)(v10 + 40) = 0;
          *(void *)(v10 + 48) = 0;
          *(void *)(v10 + 32) = 0;
          v36 += 56;
          v10 += 56;
        }
        while (v10 != v41);
        uint64_t v54 = v36;
      }
      char v52 = 1;
      std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<TTSSynthesizer::Marker>,TTSSynthesizer::Marker*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v51);
      long long v44 = *(_OWORD *)a1;
      uint64_t v45 = v49;
      *a1 = v48;
      a1[1] = v36;
      long long v48 = v44;
      uint64_t v46 = a1[2];
      a1[2] = v45;
      unint64_t v49 = v46;
      unint64_t v47 = v44;
      std::__split_buffer<TTSSynthesizer::Marker>::~__split_buffer((uint64_t)&v47);
    }
  }
}

void sub_20D460400(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  *(void *)(v12 + 8) = v13;
  _Unwind_Resume(exception_object);
}

uint64_t std::__split_buffer<TTSSynthesizer::Marker>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      uint64_t v4 = v2 - 56;
      *(void *)(a1 + 16) = v2 - 56;
      if (*(char *)(v2 - 1) < 0)
      {
        operator delete(*(void **)(v2 - 24));
        uint64_t v4 = *(void *)(a1 + 16);
      }
      uint64_t v2 = v4;
    }
    while (v4 != v3);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<TTSSynthesizer::Marker>,std::reverse_iterator<TTSSynthesizer::Marker*>,std::reverse_iterator<TTSSynthesizer::Marker*>,std::reverse_iterator<TTSSynthesizer::Marker*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  for (uint64_t result = a7; a3 != a5; a3 -= 56)
  {
    long long v8 = *(_OWORD *)(a3 - 56);
    *(_OWORD *)(result - 40) = *(_OWORD *)(a3 - 40);
    *(_OWORD *)(result - 56) = v8;
    long long v9 = *(_OWORD *)(a3 - 24);
    *(void *)(result - 8) = *(void *)(a3 - 8);
    *(_OWORD *)(result - ++*(_DWORD *)(result + 24) = v9;
    result -= 56;
    *(void *)(a3 - 16) = 0;
    *(void *)(a3 - 8) = 0;
    *(void *)(a3 - ++*(_DWORD *)(result + 24) = 0;
  }
  return result;
}

uint64_t TTSSynthesizer::TTSSynthesizerInternal::initialize(uint64_t a1, std::string::size_type a2, long long *a3, const std::string *a4, uint64_t a5)
{
  uint64_t v165 = *MEMORY[0x263EF8340];
  kdebug_trace();
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  uint64_t v10 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    if (*(char *)(a2 + 23) >= 0) {
      std::string::size_type v12 = a2;
    }
    else {
      std::string::size_type v12 = *(void *)a2;
    }
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v12;
    _os_log_impl(&dword_20CD80000, v10, OS_LOG_TYPE_DEFAULT, "Initializing voice from path '%s'", (uint8_t *)&buf, 0xCu);
  }
  if (*(char *)(a2 + 23) >= 0) {
    std::string::size_type v13 = a2;
  }
  else {
    std::string::size_type v13 = *(void *)a2;
  }
  Diagnostics::log(5, "Initializing voice from path '%s'", v11, v13);
  std::string::operator=((std::string *)(a1 + 376), (const std::string *)a2);
  unint64_t v14 = (std::string *)operator new(0x48uLL);
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = (std::string::size_type)off_26C215368;
  uint64_t v15 = (uint64_t)&v14[1];
  unint64_t v16 = (std::__shared_weak_count *)v14;
  Environment::Environment(v14 + 1, (long long *)a2, a3);
  int v136 = v16;
  std::allocate_shared[abi:ne180100]<SharedObjectPool,std::allocator<SharedObjectPool>,std::shared_ptr<Environment> &,void>(&buf, v15, v16);
  std::string::size_type v17 = buf.__r_.__value_.__r.__words[0];
  std::string::size_type v18 = *(std::__shared_weak_count **)(a1 + 248);
  *(_OWORD *)(a1 + 240) = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
  if (v18)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
    uint64_t v19 = *(void *)(a1 + 240);
  }
  else
  {
    uint64_t v19 = v17;
  }
  uint64_t v20 = operator new(0x70uLL);
  *(_OWORD *)((char *)v20 + 8) = 0u;
  v20[2] = 0u;
  *(void *)uint64_t v20 = off_26C2183C0;
  *((void *)v20 + 3) = v20 + 2;
  *((void *)v20 + 6) = 850045863;
  *(_OWORD *)((char *)v20 + 56) = 0u;
  *(_OWORD *)((char *)v20 + 72) = 0u;
  *(_OWORD *)((char *)v20 + 88) = 0u;
  *((void *)v20 + 13) = 0;
  unint64_t v145 = (unint64_t)v20 + 24;
  unint64_t v146 = (std::__shared_weak_count *)v20;
  SharedObjectPool::inject<TTSSynthesizerEventBusInternal>(&v147, v19, &v145);
  if (*((void *)&v147 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v147 + 1));
  }
  if (v146) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v146);
  }
  std::string::operator=((std::string *)(a1 + 520), a4);
  uint64_t v21 = std::__function::__value_func<VE_INSTALL * ()(void)>::__value_func[abi:ne180100]((uint64_t)&buf, a5);
  uint64_t v22 = a1 + 584;
  if ((std::string *)(a1 + 584) != &buf)
  {
    long long v23 = p_buf;
    uint64_t v24 = *(void *)(a1 + 608);
    if (p_buf == &buf)
    {
      if (v24 == v22)
      {
        (*(void (**)(uint64_t, unsigned char *))(buf.__r_.__value_.__r.__words[0] + 24))(v21, __str);
        (*(void (**)(std::string *))(p_buf->__r_.__value_.__r.__words[0] + 32))(p_buf);
        p_std::string buf = 0;
        (*(void (**)(void, std::string *))(**(void **)(a1 + 608) + 24))(*(void *)(a1 + 608), &buf);
        (*(void (**)(void))(**(void **)(a1 + 608) + 32))(*(void *)(a1 + 608));
        *(void *)(a1 + 608) = 0;
        p_std::string buf = &buf;
        (*(void (**)(unsigned char *, uint64_t))(*(void *)__str + 24))(__str, a1 + 584);
        (*(void (**)(unsigned char *))(*(void *)__str + 32))(__str);
      }
      else
      {
        (*(void (**)(uint64_t, uint64_t))(buf.__r_.__value_.__r.__words[0] + 24))(v21, a1 + 584);
        (*(void (**)(std::string *))(p_buf->__r_.__value_.__r.__words[0] + 32))(p_buf);
        p_std::string buf = *(std::string **)(a1 + 608);
      }
      *(void *)(a1 + 608) = v22;
    }
    else if (v24 == v22)
    {
      (*(void (**)(uint64_t, std::string *))(*(void *)v22 + 24))(a1 + 584, &buf);
      (*(void (**)(void))(**(void **)(a1 + 608) + 32))(*(void *)(a1 + 608));
      *(void *)(a1 + 608) = p_buf;
      p_std::string buf = &buf;
    }
    else
    {
      p_std::string buf = *(std::string **)(a1 + 608);
      *(void *)(a1 + 608) = v23;
    }
  }
  uint64_t v25 = (PersistentModuleFactory *)std::__function::__value_func<VE_INSTALL * ()(void)>::~__value_func[abi:ne180100](&buf);
  PersistentModuleFactory::create(v25);
  std::string::size_type size = buf.__r_.__value_.__l.__size_;
  std::string::size_type v27 = buf.__r_.__value_.__r.__words[0];
  uint64_t v28 = *(std::__shared_weak_count **)(a1 + 264);
  *(void *)(a1 + 256) = buf.__r_.__value_.__r.__words[0];
  *(void *)(a1 + 264) = size;
  if (v28)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
    std::string::size_type v27 = *(void *)(a1 + 256);
    std::string::size_type size = *(void *)(a1 + 264);
  }
  uint64_t v29 = *(void *)(a1 + 240);
  if (size) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(size + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v30 = *(std::__shared_weak_count **)(v29 + 24);
  *(void *)(v29 + 16) = v27;
  *(void *)(v29 + ++*(_DWORD *)(result + 24) = size;
  if (v30) {
    std::__shared_weak_count::__release_weak(v30);
  }
  SharedObjectPool::get<VoiceConfig>(&v150, *(long long ***)(a1 + 240));
  uint64_t v31 = v150;
  (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t, uint64_t))(*(void *)v150 + 32))(&buf, v150, 1885564279, 2);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::size_type v33 = buf.__r_.__value_.__l.__size_;
    operator delete(buf.__r_.__value_.__l.__data_);
    if (v33) {
      goto LABEL_35;
    }
  }
  else if (*((unsigned char *)&buf.__r_.__value_.__s + 23))
  {
LABEL_35:
    int v32 = 1;
    goto LABEL_219;
  }
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)v31 + 24))(&v148, v31);
  std::string::basic_string[abi:ne180100](&buf, (void *)v148.__r_.__value_.__r.__words[2], v149);
  long long v34 = (void **)(a1 + 400);
  __s = (char *)(a1 + 400);
  if (*(char *)(a1 + 423) < 0)
  {
    operator delete(*v34);
    long long v34 = (void **)(a1 + 400);
  }
  *(std::string *)long long v34 = buf;
  if (*(char *)(a1 + 423) < 0)
  {
    if (!*(void *)(a1 + 408))
    {
LABEL_43:
      if (Diagnostics_GetLogObject(void)::onceToken != -1) {
        dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
      }
      uint64_t v35 = Diagnostics_GetLogObject(void)::__profile_log_default;
      if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
      {
        LOWORD(buf.__r_.__value_.__l.__data_) = 0;
        _os_log_impl(&dword_20CD80000, v35, OS_LOG_TYPE_ERROR, "Unable to open broker header", (uint8_t *)&buf, 2u);
      }
      Diagnostics::log(3, "Unable to open broker header", v36);
    }
  }
  else if (!*(unsigned char *)(a1 + 423))
  {
    goto LABEL_43;
  }
  uint64_t v37 = *(long long ***)(a1 + 240);
  uint64_t v38 = *(std::__shared_weak_count **)(a1 + 248);
  if (v38) {
    atomic_fetch_add_explicit(&v38->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  SharedObjectPool::get<VoiceConfig>(&v158, v37);
  (*(void (**)(uint64_t *__return_ptr))(*(void *)v158 + 72))(&v156);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&v154, (uint64_t)&v156);
  char has_sane_pipeline = GryphonPipelineFactory::has_sane_pipeline((unsigned __int8 *)&v154);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v155, v154);
  if ((has_sane_pipeline & 1) == 0)
  {
    BOOL v41 = 0;
    goto LABEL_136;
  }
  long long v40 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)&v156, "pipeline");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v152, (uint64_t)v40);
  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v152;
  *(_OWORD *)&buf.__r_.__value_.__r.__words[1] = 0uLL;
  p_std::string buf = 0;
  unint64_t v164 = 0x8000000000000000;
  if (v152[0])
  {
    if (v152[0] == 2)
    {
      buf.__r_.__value_.__r.__words[2] = *v153;
    }
    else if (v152[0] == 1)
    {
      buf.__r_.__value_.__l.__size_ = *v153;
    }
    else
    {
      unint64_t v164 = 0;
    }
  }
  else
  {
    unint64_t v164 = 1;
  }
  while (1)
  {
    memset(&__str[8], 0, 24);
    *(void *)std::string __str = v152;
    unint64_t v161 = 0x8000000000000000;
    if (v152[0] == 2)
    {
      *(void *)&__str[16] = v153[1];
    }
    else if (v152[0] == 1)
    {
      *(void *)&__str[8] = v153 + 1;
    }
    else
    {
      unint64_t v161 = 1;
    }
    BOOL v42 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==((unsigned __int8 **)&buf, (unsigned __int8 **)__str);
    if (v42) {
      break;
    }
    long long v43 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator*((uint64_t)&buf);
    long long v44 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v43, "id");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>((uint64_t)v44, (std::string *)__str);
    if ((__str[23] & 0x80000000) != 0)
    {
      if (*(uint64_t *)&__str[8] > 23)
      {
        if (*(void *)&__str[8] == 24)
        {
          uint64_t v49 = *(void *)(*(void *)__str + 8);
          uint64_t v50 = *(void *)(*(void *)__str + 16);
          BOOL v51 = **(void **)__str == 0x735F636574656E61;
          uint64_t v52 = 0x676E696D61657274;
          goto LABEL_125;
        }
        if (*(void *)&__str[8] == 29)
        {
          BOOL v56 = **(void **)__str == 0x727473646E756F73
             && *(void *)(*(void *)__str + 8) == 0x657274735F6D6165;
          BOOL v57 = v56 && *(void *)(*(void *)__str + 16) == 0x65645F676E696D61;
          if (v57 && *(void *)(*(void *)__str + 21) == 0x7265646F6365645FLL)
          {
LABEL_134:
            operator delete(*(void **)__str);
            break;
          }
        }
      }
      else if (*(void *)&__str[8] == 14)
      {
        if (**(void **)__str == 0x645F636574656E61 && *(void *)(*(void *)__str + 6) == 0x7265646F6365645FLL) {
          goto LABEL_134;
        }
      }
      else if (*(void *)&__str[8] == 19)
      {
        uint64_t v49 = *(void *)(*(void *)__str + 8);
        uint64_t v50 = *(void *)(*(void *)__str + 11);
        BOOL v51 = **(void **)__str == 0x727473646E756F73;
        uint64_t v52 = 0x6F6365645F6D6165;
LABEL_125:
        if (v51 && v49 == v52 && v50 == 0x7265646F6365645FLL) {
          goto LABEL_134;
        }
      }
      operator delete(*(void **)__str);
      goto LABEL_133;
    }
    if (__str[23] > 0x17u)
    {
      if (__str[23] == 24)
      {
        uint64_t v46 = *(void *)&__str[16];
        uint64_t v45 = *(void *)&__str[8];
        BOOL v47 = *(void *)__str == 0x735F636574656E61;
        uint64_t v48 = 0x676E696D61657274;
LABEL_109:
        if (v47 && v45 == v48 && v46 == 0x7265646F6365645FLL) {
          break;
        }
        goto LABEL_133;
      }
      if (__str[23] == 29)
      {
        BOOL v53 = *(void *)__str == 0x727473646E756F73 && *(void *)&__str[8] == 0x657274735F6D6165;
        BOOL v54 = v53 && *(void *)&__str[16] == 0x65645F676E696D61;
        if (v54 && *(void *)&__str[21] == 0x7265646F6365645FLL) {
          break;
        }
      }
    }
    else
    {
      if (__str[23] != 14)
      {
        if (__str[23] != 19) {
          goto LABEL_133;
        }
        uint64_t v45 = *(void *)&__str[8];
        uint64_t v46 = *(void *)&__str[11];
        BOOL v47 = *(void *)__str == 0x727473646E756F73;
        uint64_t v48 = 0x6F6365645F6D6165;
        goto LABEL_109;
      }
      if (*(void *)__str == 0x645F636574656E61 && *(void *)&__str[6] == 0x7265646F6365645FLL) {
        break;
      }
    }
LABEL_133:
    nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator++((unsigned __int8 **)&buf);
  }
  BOOL v41 = !v42;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v153, v152[0]);
LABEL_136:
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v157, v156);
  if (v159) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v159);
  }
  if (v38) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v38);
  }
  if (v41)
  {
    int v32 = 4;
  }
  else
  {
    int v65 = *(long long ***)(a1 + 240);
    long long v66 = *(std::__shared_weak_count **)(a1 + 248);
    if (v66) {
      atomic_fetch_add_explicit(&v66->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    SharedObjectPool::get<VoiceConfig>(&v158, v65);
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v158 + 72))(&v156);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&v154, (uint64_t)&v156);
    char v67 = GryphonPipelineFactory::has_sane_pipeline((unsigned __int8 *)&v154);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v155, v154);
    if (v67)
    {
      long long v68 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)&v156, "pipeline");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v152, (uint64_t)v68);
      if (v152[0])
      {
        buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v152;
        *(_OWORD *)&buf.__r_.__value_.__r.__words[1] = 0uLL;
        p_std::string buf = 0;
        unint64_t v164 = 0x8000000000000000;
        int v134 = v66;
        if (v152[0] == 2)
        {
          buf.__r_.__value_.__r.__words[2] = *v153;
        }
        else if (v152[0] == 1)
        {
          buf.__r_.__value_.__l.__size_ = *v153;
        }
        else
        {
          unint64_t v164 = 0;
        }
        while (1)
        {
          memset(&__str[8], 0, 24);
          *(void *)std::string __str = v152;
          unint64_t v161 = 0x8000000000000000;
          if (v152[0] == 2)
          {
            *(void *)&__str[16] = v153[1];
          }
          else if (v152[0] == 1)
          {
            *(void *)&__str[8] = v153 + 1;
          }
          else
          {
            unint64_t v161 = 1;
          }
          BOOL v71 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==((unsigned __int8 **)&buf, (unsigned __int8 **)__str);
          if (v71) {
            break;
          }
          std::string::size_type v72 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator*((uint64_t)&buf);
          std::string v73 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v72, "id");
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>((uint64_t)v73, (std::string *)__str);
          if ((__str[23] & 0x80000000) != 0)
          {
            if (*(void *)&__str[8] == 14)
            {
              BOOL v76 = **(void **)__str != 0x615F6C617275656ELL
                 || *(void *)(*(void *)__str + 6) != 0x726574706164615FLL;
              operator delete(*(void **)__str);
              if (!v76) {
                break;
              }
            }
            else
            {
              operator delete(*(void **)__str);
            }
          }
          else if (__str[23] == 14 {
                 && *(void *)__str == 0x615F6C617275656ELL
          }
                 && *(void *)&__str[6] == 0x726574706164615FLL)
          {
            break;
          }
          nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator++((unsigned __int8 **)&buf);
        }
        BOOL v69 = !v71;
        int v70 = v152[0];
        long long v66 = v134;
      }
      else
      {
        int v70 = 0;
        BOOL v69 = 0;
      }
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v153, v70);
    }
    else
    {
      BOOL v69 = 0;
    }
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v157, v156);
    if (v159) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v159);
    }
    if (v66) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v66);
    }
    if (v69)
    {
      int v32 = 3;
    }
    else
    {
      uint64_t v77 = *(unsigned __int8 *)(a1 + 423);
      if (*(char *)(a1 + 423) < 0)
      {
        unint64_t v78 = *(char **)(a1 + 400);
        uint64_t v79 = *(void *)(a1 + 408);
      }
      else
      {
        unint64_t v78 = (char *)(a1 + 400);
        uint64_t v79 = *(unsigned __int8 *)(a1 + 423);
      }
      if (v79 >= 44)
      {
        long long v80 = &v78[v79];
        uint64_t v81 = v78;
        do
        {
          double v82 = (char *)memchr(v81, 60, v79 - 43);
          if (!v82) {
            break;
          }
          uint64_t v83 = v82;
          if (!memcmp(v82, "<COMPONENT>monogryph/featextract</COMPONENT>", 0x2CuLL))
          {
            if (v83 != v80 && v83 - v78 != -1)
            {
              int v32 = 1;
              goto LABEL_217;
            }
            break;
          }
          uint64_t v81 = v83 + 1;
          uint64_t v79 = v80 - (v83 + 1);
        }
        while (v79 >= 44);
      }
      if ((v77 & 0x80) != 0)
      {
        long long v84 = *(char **)(a1 + 400);
        uint64_t v85 = *(void *)(a1 + 408);
      }
      else
      {
        long long v84 = (char *)(a1 + 400);
        uint64_t v85 = v77;
      }
      if (v85 >= 34)
      {
        std::string v86 = &v84[v85];
        long long v87 = v84;
        do
        {
          uint64_t v88 = (char *)memchr(v87, 60, v85 - 33);
          if (!v88) {
            break;
          }
          uint64_t v89 = v88;
          if (!memcmp(v88, "<COMPONENT>fe/be_adapt</COMPONENT>", 0x22uLL))
          {
            if (v89 != v86 && v89 - v84 != -1)
            {
LABEL_335:
              int v32 = 2;
              goto LABEL_217;
            }
            break;
          }
          long long v87 = v89 + 1;
          uint64_t v85 = v86 - (v89 + 1);
        }
        while (v85 >= 34);
      }
      if ((v77 & 0x80) != 0)
      {
        uint64_t v77 = *(void *)(a1 + 408);
        __s = *(char **)(a1 + 400);
      }
      if (v77 >= 36)
      {
        int v129 = __s;
        uint64_t v130 = &__s[v77];
        do
        {
          std::string::size_type v131 = (char *)memchr(v129, 60, v77 - 35);
          if (!v131) {
            break;
          }
          uint64_t v132 = v131;
          if (!memcmp(v131, "<COMPONENT>audioinserter</COMPONENT>", 0x24uLL))
          {
            if (v132 == v130 || v132 - __s == -1) {
              break;
            }
            goto LABEL_335;
          }
          int v129 = v132 + 1;
          uint64_t v77 = v130 - (v132 + 1);
        }
        while (v77 >= 36);
      }
      if (Diagnostics_GetLogObject(void)::onceToken != -1) {
        dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
      }
      uint64_t v90 = Diagnostics_GetLogObject(void)::__profile_log_default;
      if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
      {
        LOWORD(buf.__r_.__value_.__l.__data_) = 0;
        _os_log_impl(&dword_20CD80000, v90, OS_LOG_TYPE_ERROR, "Unknown voice type! Behavior is undefined.", (uint8_t *)&buf, 2u);
      }
      Diagnostics::log(3, "Unknown voice type! Behavior is undefined.", v91);
      int v32 = 0;
    }
  }
LABEL_217:
  if (v148.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v148.__r_.__value_.__l.__size_);
  }
LABEL_219:
  if (v151) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v151);
  }
  *(_DWORD *)(a1 + 368) = v32;
  *(unsigned char *)(a1 + 512) = v32 == 2;
  BOOL v92 = v32 != 2 && Frontend::should_use((char *)a2);
  *(unsigned char *)(a1 + 513) = v92;
  SharedObjectPool::get<VoiceConfig>(&v156, *(long long ***)(a1 + 240));
  SharedObjectPool::get<GryphonConfig>(&v154, *(void *)(a1 + 240));
  if (*(unsigned char *)(a1 + 513))
  {
    uint64_t v94 = v156;
    std::string v93 = v157;
    if (v157) {
      atomic_fetch_add_explicit(&v157->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    unint64_t v95 = (unsigned char *)(a1 + 514);
    *(unsigned char *)(a1 + 514) = Frontend::check_hydra_fe(v94);
    if (v93)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v93);
      BOOL v96 = 0;
      goto LABEL_230;
    }
    BOOL v96 = 1;
  }
  else
  {
    unint64_t v95 = (unsigned char *)(a1 + 514);
    *(unsigned char *)(a1 + 514) = 0;
    uint64_t v94 = v156;
    std::string v93 = v157;
    BOOL v96 = v157 == 0;
    if (v157) {
LABEL_230:
    }
      atomic_fetch_add_explicit(&v93->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v97 = *(unsigned __int8 *)(a1 + 513);
  int v98 = *(unsigned __int8 *)(a1 + 514);
  memset(&v148, 0, sizeof(v148));
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(*(void *)v94 + 72))(&v158, v94, 1717790311, 2);
  if ((_BYTE)v158)
  {
    std::string::basic_string[abi:ne180100]<0>(__str, "phoneset");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_20D5A22AE, (char *)&v158, (const void **)__str, &buf);
    std::string v148 = buf;
    *((unsigned char *)&buf.__r_.__value_.__s + 23) = 0;
    buf.__r_.__value_.__s.__data_[0] = 0;
    if ((__str[23] & 0x80000000) != 0) {
      operator delete(*(void **)__str);
    }
  }
  VoiceConfig::get_param<std::string>(&buf, v94, 1818324583, 2);
  std::string::size_type v99 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
  if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v99 = buf.__r_.__value_.__l.__size_;
  }
  if (v99 >= 5)
  {
    std::string::basic_string((std::string *)__str, &buf, 0, 5uLL, (std::allocator<char> *)v152);
    if ((__str[23] & 0x80000000) == 0)
    {
      if (__str[23] != 5) {
        goto LABEL_256;
      }
      if (*(_DWORD *)__str != 1227714149 || __str[4] != 78) {
        goto LABEL_256;
      }
LABEL_254:
      BOOL v103 = (v97 | v98) != 0;
LABEL_265:
      if (v103) {
        uint64_t v106 = "xsampa-internal";
      }
      else {
        uint64_t v106 = "nashville";
      }
      MEMORY[0x210558E70](&v148, v106);
      goto LABEL_269;
    }
    if (*(void *)&__str[8] != 5)
    {
      operator delete(*(void **)__str);
      goto LABEL_256;
    }
    BOOL v102 = **(_DWORD **)__str != 1227714149 || *(unsigned char *)(*(void *)__str + 4) != 78;
    operator delete(*(void **)__str);
    if (!v102) {
      goto LABEL_254;
    }
  }
LABEL_256:
  std::string::size_type v104 = HIBYTE(v148.__r_.__value_.__r.__words[2]);
  if ((v148.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v104 = v148.__r_.__value_.__l.__size_;
  }
  if (!v104)
  {
    if (v97) {
      BOOL v105 = v98 == 0;
    }
    else {
      BOOL v105 = 0;
    }
    BOOL v103 = v105;
    goto LABEL_265;
  }
LABEL_269:
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v159, v158);
  uint64_t v107 = (void **)(a1 + 320);
  if (*(char *)(a1 + 343) < 0) {
    operator delete(*v107);
  }
  *(_OWORD *)uint64_t v107 = *(_OWORD *)&v148.__r_.__value_.__l.__data_;
  *(void *)(a1 + 336) = *((void *)&v148.__r_.__value_.__l + 2);
  *((unsigned char *)&v148.__r_.__value_.__s + 23) = 0;
  v148.__r_.__value_.__s.__data_[0] = 0;
  if (!v96) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v93);
  }
  float v108 = 22050.0;
  switch(*(_DWORD *)(a1 + 368))
  {
    case 0:
      float v108 = 0.0;
      goto LABEL_289;
    case 1:
    case 3:
    case 4:
      VoiceConfig::get_param<std::string>((std::string *)__str, v94, 1818324583, 0);
      std::string::basic_string(&buf, (const std::string *)__str, 0, 5uLL, (std::allocator<char> *)&v148);
      uint64_t v109 = (void **)(a1 + 344);
      if (*(char *)(a1 + 367) < 0) {
        operator delete(*v109);
      }
      *(_OWORD *)uint64_t v109 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
      *(void *)(a1 + 360) = *((void *)&buf.__r_.__value_.__l + 2);
      *((unsigned char *)&buf.__r_.__value_.__s + 23) = 0;
      buf.__r_.__value_.__s.__data_[0] = 0;
      if ((__str[23] & 0x80000000) != 0) {
        operator delete(*(void **)__str);
      }
      unint64_t v110 = v154;
      std::string::basic_string[abi:ne180100]<0>(&buf, "audio_resampling");
      GryphonConfig::params_for_module((uint64_t)&v148, v110, (uint64_t)&buf);
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(buf.__r_.__value_.__l.__data_);
      }
      int v111 = v148.__r_.__value_.__s.__data_[0];
      if (v148.__r_.__value_.__s.__data_[0] == 1)
      {
        std::string::basic_string[abi:ne180100]<0>(__str, "sample_rate_out");
        LODWORD(v158) = 48000;
        int v112 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>((char *)&v148, (const void **)__str, (unsigned int *)&v158);
        if ((__str[23] & 0x80000000) != 0) {
          operator delete(*(void **)__str);
        }
        float v108 = (float)v112;
        int v111 = v148.__r_.__value_.__s.__data_[0];
      }
      else
      {
        float v108 = 48000.0;
      }
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v148.__r_.__value_.__l.__size_, v111);
      goto LABEL_289;
    case 2:
LABEL_289:
      *(float *)(a1 + 312) = v108;
      break;
    default:
      break;
  }
  if (!*(unsigned char *)(a1 + 512))
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(*(void *)v94 + 72))(&v143, v94, 1734567527, 2);
    int v116 = *(unsigned __int8 *)(a1 + 568);
    *(unsigned char *)(a1 + 568) = v143;
    LOBYTE(v143) = v116;
    uint64_t v117 = *(uint64_t **)(a1 + 576);
    *(void *)(a1 + 576) = v144;
    std::string::size_type v144 = v117;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v144, v116);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v141, a1 + 568);
    uint64_t v118 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)__str, (uint64_t)v141);
    char v119 = GryphonPipelineFactory::has_sane_pipeline(v118);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&__str[8], __str[0]);
    if ((v119 & 1) == 0)
    {
      exceptiounint64_t n = __cxa_allocate_exception(0x10uLL);
      StringFormatter::StringFormatter((StringFormatter *)&buf, "gryphon config has a wrong format");
      MEMORY[0x210558D40](exception, &buf);
      __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
    }
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v142, v141[0]);
    if (*(unsigned char *)(a1 + 568))
    {
      std::string::basic_string[abi:ne180100]<0>(&buf, "can_use_pipeline_rebuild");
      __str[0] = 0;
      *(unsigned char *)(a1 + 680) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<BOOL,0>((char *)(a1 + 568), (const void **)&buf.__r_.__value_.__l.__data_, __str);
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(buf.__r_.__value_.__l.__data_);
      }
    }
  }
  if (*v95)
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    unint64_t v113 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_20CD80000, v113, OS_LOG_TYPE_DEFAULT, "Using Scalable Frontend", (uint8_t *)&buf, 2u);
    }
    Diagnostics::log(5, "Using Scalable Frontend", v114);
    int v115 = 3;
  }
  else
  {
    if (!*(unsigned char *)(a1 + 513))
    {
      if (Diagnostics_GetLogObject(void)::onceToken != -1) {
        dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
      }
      int v126 = Diagnostics_GetLogObject(void)::__profile_log_default;
      if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(buf.__r_.__value_.__l.__data_) = 0;
        _os_log_impl(&dword_20CD80000, v126, OS_LOG_TYPE_DEFAULT, "Using Legacy Frontend", (uint8_t *)&buf, 2u);
      }
      Diagnostics::log(5, "Using Legacy Frontend", v127);
      *(_DWORD *)(a1 + 372) = 1;
      uint64_t v128 = *(void *)(a1 + 608);
      if (v128)
      {
        (*(void (**)(uint64_t))(*(void *)v128 + 48))(v128);
        operator new();
      }
      std::__throw_bad_function_call[abi:ne180100]();
    }
    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    float v120 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_20CD80000, v120, OS_LOG_TYPE_DEFAULT, "Using Hybrid Frontend", (uint8_t *)&buf, 2u);
    }
    Diagnostics::log(5, "Using Hybrid Frontend", v121);
    int v115 = 2;
  }
  *(_DWORD *)(a1 + 372) = v115;
  uint64_t v122 = *(void *)(a1 + 240);
  std::allocate_shared[abi:ne180100]<TTSSynthesizer::VoiceDescription,std::allocator<TTSSynthesizer::VoiceDescription>,TTSSynthesizer::VoiceDescription&,void>(&v138, a1 + 312);
  SharedObjectPool::inject<TTSSynthesizer::VoiceDescription>(&v140, v122, &v138);
  if (*((void *)&v140 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v140 + 1));
  }
  if (v139) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v139);
  }
  unint64_t v123 = *(std::__shared_weak_count **)(a1 + 248);
  v137[0] = *(void *)(a1 + 240);
  v137[1] = (uint64_t)v123;
  if (v123) {
    atomic_fetch_add_explicit(&v123->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v124 = TTSSynthesizer::TTSSynthesizerInternal::build_pipeline(a1, v137, 0);
  if (v123) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v123);
  }
  if (!v124)
  {
    TTSSynthesizer::TTSSynthesizerInternal::set_prompts_disabled((TTSSynthesizer::TTSSynthesizerInternal *)a1, GryphonDebugging::disable_prompts_);
    kdebug_trace();
  }
  if (v155) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v155);
  }
  if (v157) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v157);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v136);
  return v124;
}

void sub_20D461CD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,std::__shared_weak_count *a39)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v39);
  std::__shared_weak_count::__release_shared[abi:ne180100](v39);
  if (a39) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a39);
  }
  BOOL v42 = *(std::__shared_weak_count **)(v40 - 224);
  if (v42) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v42);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  _Unwind_Resume(a1);
}

void sub_20D461CDC(void *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_rethrow();
  }
  JUMPOUT(0x20D462018);
}

void sub_20D461CF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,std::__shared_weak_count *a39)
{
  __cxa_end_catch();
  if (a39) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a39);
  }
  if (!*(void *)(v39 - 224)) {
    JUMPOUT(0x20D462010);
  }
  JUMPOUT(0x20D46200CLL);
}

void sub_20D461D04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,std::__shared_weak_count *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)(v36 - 224), *(unsigned __int8 *)(v36 - 232));
  uint64_t v37 = *(std::__shared_weak_count **)(v36 - 208);
  if (v37) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v37);
  }
  if (v35) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v35);
  }
  if (a30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a30);
  }
  if (a35) {
    JUMPOUT(0x20D46200CLL);
  }
  JUMPOUT(0x20D462010);
}

void sub_20D461D28()
{
}

void sub_20D461D34()
{
}

void sub_20D461D40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,unsigned __int8 a21,uint64_t *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,std::__shared_weak_count *a39)
{
  if (*(char *)(v41 - 137) < 0)
  {
    operator delete(*(void **)(v41 - 160));
    if ((v39 & 1) == 0)
    {
LABEL_6:
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&a22, a21);
      if (a39) {
        std::__shared_weak_count::__release_shared[abi:ne180100](a39);
      }
      if (!*(void *)(v41 - 224)) {
        JUMPOUT(0x20D462010);
      }
      JUMPOUT(0x20D46200CLL);
    }
  }
  else if (!v39)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v40);
  goto LABEL_6;
}

void sub_20D461D74()
{
  std::recursive_mutex::unlock(v0);
  JUMPOUT(0x20D461D80);
}

void sub_20D461D94()
{
  if (*(char *)(v0 - 177) < 0) {
    operator delete(*(void **)(v0 - 200));
  }
  JUMPOUT(0x20D461DE8);
}

void sub_20D461DC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 a13, ...)
{
  va_start(va, a13);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)(v13 + 8), *(unsigned __int8 *)(v14 - 200));
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)va, a13);
  JUMPOUT(0x20D461F5CLL);
}

void sub_20D461DF0()
{
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)(v1 - 224), *(unsigned __int8 *)(v1 - 232));
  uint64_t v2 = *(std::__shared_weak_count **)(v1 - 208);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (v0) {
    JUMPOUT(0x20D461FF4);
  }
  JUMPOUT(0x20D461FF8);
}

void sub_20D461E0C()
{
}

void sub_20D461E14()
{
}

void sub_20D461E1C()
{
}

void sub_20D461E2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,std::__shared_weak_count *a39)
{
  if (*(char *)(v39 - 137) < 0) {
    operator delete(*(void **)(v39 - 160));
  }
  if (a39) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a39);
  }
  if (!*(void *)(v39 - 224)) {
    JUMPOUT(0x20D462010);
  }
  JUMPOUT(0x20D46200CLL);
}

void sub_20D461E5C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,std::__shared_weak_count *a42)
{
  if (*(char *)(v43 - 137) < 0) {
    operator delete(*(void **)(v43 - 160));
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)(v43 - 208), *(unsigned __int8 *)(v43 - 216));
  if (a34 < 0) {
    operator delete(__p);
  }
  if ((v42 & 1) == 0) {
    JUMPOUT(0x20D461F00);
  }
  if (a42) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a42);
  }
  if (!*(void *)(v43 - 224)) {
    JUMPOUT(0x20D462010);
  }
  JUMPOUT(0x20D46200CLL);
}

void sub_20D461E70(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x20D462018);
}

void sub_20D461E80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (*(char *)(v34 - 177) < 0) {
    JUMPOUT(0x20D461E90);
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v34 - 208, *(unsigned __int8 *)(v34 - 216));
  if (a34 < 0) {
    operator delete(a29);
  }
  JUMPOUT(0x20D461EF8);
}

void sub_20D461E9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39)
{
  if (!v39)
  {
    if (a39) {
      std::__shared_weak_count::__release_shared[abi:ne180100]();
    }
    if (!*(void *)(v40 - 224)) {
      JUMPOUT(0x20D462010);
    }
    JUMPOUT(0x20D46200CLL);
  }
  JUMPOUT(0x20D461EFCLL);
}

void sub_20D461EAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39)
{
  if (v39) {
    JUMPOUT(0x20D461EB4);
  }
  if (a39) {
    std::__shared_weak_count::__release_shared[abi:ne180100]();
  }
  if (!*(void *)(v40 - 224)) {
    JUMPOUT(0x20D462010);
  }
  JUMPOUT(0x20D46200CLL);
}

void sub_20D461EBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39)
{
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100]();
  }
  if (a39) {
    std::__shared_weak_count::__release_shared[abi:ne180100]();
  }
  if (!*(void *)(v39 - 224)) {
    JUMPOUT(0x20D462010);
  }
  JUMPOUT(0x20D46200CLL);
}

void sub_20D461F08()
{
}

void sub_20D461F14()
{
}

void sub_20D461F20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  if (a26) {
    ((void (*)(void))std::__shared_weak_count::__release_shared[abi:ne180100])();
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  _Unwind_Resume(a1);
}

void sub_20D461F34()
{
  std::__shared_weak_count::~__shared_weak_count(v0);
  operator delete(v1);
  JUMPOUT(0x20D462018);
}

void sub_20D461F50()
{
}

void sub_20D461F7C()
{
}

void sub_20D461FB8()
{
}

void sub_20D461FC0()
{
}

void SharedObjectPool::inject<TTSSynthesizerEventBusInternal>(_OWORD *a1, uint64_t a2, unint64_t *a3)
{
  uint64_t v6 = (std::recursive_mutex *)(a2 + 56);
  std::recursive_mutex::lock((std::recursive_mutex *)(a2 + 56));
  std::string::size_type v12 = &v14;
  if (!v7) {
    operator new();
  }
  unint64_t v8 = *a3;
  unint64_t v9 = a3[1];
  std::string::size_type v12 = (char ***)off_26C206678;
  *(void *)&long long v13 = v8;
  *((void *)&v13 + 1) = v9;
  if (v9)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
    long long v10 = v13;
  }
  else
  {
    long long v10 = v8;
  }
  long long v13 = 0uLL;
  uint64_t v11 = *(std::__shared_weak_count **)(v7 + 16);
  *(_OWORD *)(v7 + 8) = v10;
  if (v11)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    std::string::size_type v12 = (char ***)off_26C206678;
    if (*((void *)&v13 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v13 + 1));
    }
  }
  *a1 = *(_OWORD *)a3;
  *a3 = 0;
  a3[1] = 0;
  std::recursive_mutex::unlock(v6);
}

void sub_20D4621BC(_Unwind_Exception *a1)
{
  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<TTSSynthesizer::VoiceDescription,std::allocator<TTSSynthesizer::VoiceDescription>,TTSSynthesizer::VoiceDescription&,void>(void *a1, uint64_t a2)
{
  uint64_t v4 = (char *)operator new(0x58uLL);
  int v5 = v4;
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 2) = 0;
  *(void *)uint64_t v4 = off_26C219000;
  *((_DWORD *)v4 + 6) = *(_DWORD *)a2;
  uint64_t v6 = v4 + 24;
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v4 + 32), *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    *((_OWORD *)v4 + 2) = *(_OWORD *)(a2 + 8);
    *((void *)v4 + 6) = *(void *)(a2 + 24);
  }
  uint64_t v7 = (std::string *)(v5 + 56);
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)(a2 + 32), *(void *)(a2 + 40));
  }
  else
  {
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)(a2 + 32);
    *((void *)v5 + 9) = *(void *)(a2 + 48);
  }
  *((void *)v5 + 10) = *(void *)(a2 + 56);
  *a1 = v6;
  a1[1] = v5;
}

void sub_20D4622A4(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 55) < 0) {
    operator delete(*v2);
  }
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v1);
  operator delete(v4);
  _Unwind_Resume(a1);
}

void SharedObjectPool::inject<TTSSynthesizer::VoiceDescription>(_OWORD *a1, uint64_t a2, unint64_t *a3)
{
  uint64_t v6 = (std::recursive_mutex *)(a2 + 56);
  std::recursive_mutex::lock((std::recursive_mutex *)(a2 + 56));
  std::string::size_type v12 = &v14;
  if (!v7) {
    operator new();
  }
  unint64_t v8 = *a3;
  unint64_t v9 = a3[1];
  std::string::size_type v12 = (char ***)off_26C2066F8;
  *(void *)&long long v13 = v8;
  *((void *)&v13 + 1) = v9;
  if (v9)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
    long long v10 = v13;
  }
  else
  {
    long long v10 = v8;
  }
  long long v13 = 0uLL;
  uint64_t v11 = *(std::__shared_weak_count **)(v7 + 16);
  *(_OWORD *)(v7 + 8) = v10;
  if (v11)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    std::string::size_type v12 = (char ***)off_26C2066F8;
    if (*((void *)&v13 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v13 + 1));
    }
  }
  *a1 = *(_OWORD *)a3;
  *a3 = 0;
  a3[1] = 0;
  std::recursive_mutex::unlock(v6);
}

void sub_20D46245C(_Unwind_Exception *a1)
{
  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t TTSSynthesizer::TTSSynthesizerInternal::build_pipeline(uint64_t a1, uint64_t *a2, int a3)
{
  void (***v117)(void **__return_ptr, void, std::string *, unsigned __int8 *, uint64_t *, void);
  std::__shared_weak_count *v118;
  std::__shared_weak_count *v119;
  std::__shared_weak_count *v120;
  uint64_t v121;
  std::__shared_weak_count *v122;
  std::__shared_weak_count *v123;
  uint64_t v124;
  std::__shared_weak_count *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  std::__shared_weak_count *v129;
  std::__shared_weak_count *v130;
  uint64_t v131;
  std::__shared_weak_count *v132;
  std::__shared_weak_count *v133;
  int v134;
  uint64_t v135;
  std::__shared_weak_count *v136;
  std::__shared_weak_count *v137;
  NSObject *v138;
  const char *v139;
  void (***v140)(void **__return_ptr, void, std::string *, unsigned __int8 *, uint64_t *, void);
  std::__shared_weak_count *v141;
  std::__shared_weak_count *v142;
  uint64_t v143;
  NSObject *v144;
  const char *v145;
  std::__shared_weak_count *v146;
  void (***v147)(void **__return_ptr, void, std::string *, unsigned __int8 *, uint64_t *, void);
  std::__shared_weak_count *v148;
  uint64_t v149;
  std::__shared_weak_count *v150;
  void (***v151)(void **__return_ptr, void, std::string *, unsigned __int8 *, uint64_t *, void);
  std::__shared_weak_count *v152;
  uint64_t v153;
  std::__shared_weak_count *v154;
  uint64_t v155;
  std::__shared_weak_count *v156;
  NSObject *v157;
  std::chrono::steady_clock::time_point v158;
  int v159;
  std::chrono::steady_clock::time_point v160;
  const char *v161;
  uint64_t v162;
  nlohmann::detail::exception *exception;
  nlohmann::detail::exception *v165;
  char *v166;
  std::string *v167;
  long long v168;
  uint64_t v169;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  unint64_t v171;
  std::__shared_weak_count *v172;
  long long v173;
  uint64_t v174[2];
  uint64_t v175[2];
  uint64_t v176[2];
  uint64_t v177;
  std::__shared_weak_count *v178;
  uint64_t v179[2];
  uint64_t v180[2];
  uint64_t v181[2];
  uint64_t v182[2];
  uint64_t v183[2];
  uint64_t v184;
  std::__shared_weak_count *v185;
  uint64_t v186[2];
  uint64_t v187[2];
  uint64_t v188;
  std::__shared_weak_count *v189;
  uint64_t v190[2];
  uint64_t v191;
  std::__shared_weak_count *v192;
  long long v193;
  uint64_t v194[2];
  uint64_t v195;
  std::__shared_weak_count *v196;
  uint64_t v197[2];
  std::string v198;
  uint64_t v199;
  uint64_t *v200;
  unsigned __int8 v201[8];
  uint64_t *v202;
  uint64_t v203;
  uint64_t *v204;
  uint64_t v205;
  std::__shared_weak_count *v206;
  unsigned __int8 v207[8];
  void *v208;
  void v209[4];
  void v210[4];
  std::string __p;
  char v212;
  unsigned char v213[8];
  uint64_t *v214;
  unsigned char *v215;
  char v216;
  long long v217;
  long long *v218;
  uint64_t v219;
  unint64_t v220;
  void *v221;
  unint64_t *v222;
  char v223;
  uint8_t buf[24];
  uint64_t v225;
  void v226[2];
  void *v227;
  char v228;
  uint64_t v229;

  unint64_t v229 = *MEMORY[0x263EF8340];
  v6.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  SharedObjectPool::get<VoiceConfig>(&v195, *(long long ***)(a1 + 240));
  if (*(unsigned char *)(a1 + 512) || !*(_DWORD *)(a1 + 368))
  {
    *(unsigned char *)(a1 + 680) = 0;
    if ((a3 & 1) == 0)
    {
      if (Diagnostics_GetLogObject(void)::onceToken != -1) {
        dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
      }
      unint64_t v8 = Diagnostics_GetLogObject(void)::__profile_log_default;
      if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
      {
        if (*(unsigned char *)(a1 + 512)) {
          long long v10 = "vocalizer";
        }
        else {
          long long v10 = "unknown";
        }
        *(_DWORD *)std::string buf = 136315138;
        *(void *)&uint8_t buf[4] = v10;
        _os_log_impl(&dword_20CD80000, v8, OS_LOG_TYPE_DEFAULT, "Detected %s voice. Use vocalizer engine to initialize.", buf, 0xCu);
      }
      if (*(unsigned char *)(a1 + 512)) {
        uint64_t v11 = "vocalizer";
      }
      else {
        uint64_t v11 = "unknown";
      }
      Diagnostics::log(5, "Detected %s voice. Use vocalizer engine to initialize.", v9, v11);
      std::__function::__value_func<VE_INSTALL * ()(void)>::__value_func[abi:ne180100]((uint64_t)v210, a1 + 584);
      uint64_t v12 = TTSSynthesizer::TTSSynthesizerInternal::initialize_vocalizer_engine(a1, (uint64_t)v210);
      std::__function::__value_func<VE_INSTALL * ()(void)>::~__value_func[abi:ne180100](v210);
      if (v12)
      {
        std::__function::__value_func<VE_INSTALL * ()(void)>::__value_func[abi:ne180100]((uint64_t)v209, a1 + 584);
        uint64_t v7 = TTSSynthesizer::TTSSynthesizerInternal::initialize_vocalizer_engine(a1, (uint64_t)v209);
        std::__function::__value_func<VE_INSTALL * ()(void)>::~__value_func[abi:ne180100](v209);
        goto LABEL_359;
      }
      goto LABEL_348;
    }
LABEL_3:
    uint64_t v7 = 0;
    goto LABEL_359;
  }
  long long v13 = (void *)(a1 + 280);
  if (!*(unsigned char *)(a1 + 484))
  {
    if (*(unsigned char *)(a1 + 514))
    {
      if (a3 && !*(unsigned char *)(a1 + 680)) {
        goto LABEL_3;
      }
      uint64_t v22 = std::string::basic_string[abi:ne180100]<0>(buf, "enableHydraFE");
      unsigned int BOOL_for_key = InternalSettings::get_BOOL_for_key(v22);
      if ((char)buf[23] < 0) {
        operator delete(*(void **)buf);
      }
      if (BOOL_for_key) {
        goto LABEL_216;
      }
      if (!(*(char *)(a1 + 423) < 0 ? *(void *)(a1 + 408) : *(unsigned __int8 *)(a1 + 423))) {
        goto LABEL_216;
      }
      uint64_t v103 = v195;
      std::string::size_type v104 = v196;
      if (v196) {
        atomic_fetch_add_explicit(&v196->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      BOOL has_forced_hydraFE = Frontend::has_forced_hydraFE(v103);
      BOOL v106 = has_forced_hydraFE;
      if (v104)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v104);
        if (v106) {
          goto LABEL_216;
        }
      }
      else if (has_forced_hydraFE)
      {
LABEL_216:
        if (Diagnostics_GetLogObject(void)::onceToken != -1) {
          dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
        }
        uint64_t v107 = Diagnostics_GetLogObject(void)::__profile_log_default;
        if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
        {
          if (*(char *)(a1 + 423) < 0) {
            uint64_t v108 = *(void *)(a1 + 408);
          }
          else {
            uint64_t v108 = *(unsigned __int8 *)(a1 + 423);
          }
          uint64_t v109 = v195;
          unint64_t v110 = v196;
          if (v196) {
            atomic_fetch_add_explicit(&v196->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          BOOL v111 = Frontend::has_forced_hydraFE(v109);
          *(_DWORD *)std::string buf = 67109632;
          *(_DWORD *)&uint8_t buf[4] = BOOL_for_key;
          *(_WORD *)&uint8_t buf[8] = 1024;
          *(_DWORD *)&buf[10] = v108 == 0;
          *(_WORD *)&unsigned char buf[14] = 1024;
          *(_DWORD *)&buf[16] = v111;
          _os_log_impl(&dword_20CD80000, v107, OS_LOG_TYPE_DEFAULT, "Initializing Scalable FE pipeline with enable ScalableFE(%d), missing LegacyFE(%d), force ScalableFE(%d)", buf, 0x14u);
          if (v110) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v110);
          }
        }
        if (*(char *)(a1 + 423) < 0) {
          uint64_t v112 = *(void *)(a1 + 408);
        }
        else {
          uint64_t v112 = *(unsigned __int8 *)(a1 + 423);
        }
        uint64_t v113 = v195;
        float v114 = v196;
        if (v196) {
          atomic_fetch_add_explicit(&v196->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        BOOL v115 = Frontend::has_forced_hydraFE(v113);
        Diagnostics::log(5, "Initializing Scalable FE pipeline with enable ScalableFE(%d), missing LegacyFE(%d), force ScalableFE(%d)", v116, BOOL_for_key, v112 == 0, v115);
        if (v114) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v114);
        }
        uint64_t v117 = *(void (****)(void **__return_ptr, void, std::string *, unsigned __int8 *, uint64_t *, void))(a1 + 256);
        uint64_t v118 = (std::__shared_weak_count *)a2[1];
        v190[0] = *a2;
        v190[1] = (uint64_t)v118;
        if (v118) {
          atomic_fetch_add_explicit(&v118->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        PersistentModuleFactory::load_from_config(v117, a1 + 568, v190);
        if (v118) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v118);
        }
        char v119 = *(std::__shared_weak_count **)(a1 + 288);
        void *v13 = 0;
        *(void *)(a1 + 288) = 0;
        if (v119) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v119);
        }
        float v120 = *(std::__shared_weak_count **)(a1 + 304);
        *(void *)(a1 + 296) = 0;
        *(void *)(a1 + 304) = 0;
        if (v120) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v120);
        }
        uint64_t v121 = *(void *)(a1 + 272);
        if (v121)
        {
          uint64_t v188 = 0;
          unint64_t v189 = 0;
          (*(void (**)(uint64_t, uint64_t *))(*(void *)v121 + 96))(v121, &v188);
          if (v189) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v189);
          }
        }
        uint64_t v122 = (std::__shared_weak_count *)a2[1];
        v187[0] = *a2;
        v187[1] = (uint64_t)v122;
        if (v122) {
          atomic_fetch_add_explicit(&v122->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        std::string::basic_string[abi:ne180100]<0>(buf, "pipeline");
        std::string::basic_string[abi:ne180100]<0>(&v217, "connection");
        GryphonPipelineFactory::pipeline_from_config((uint64_t **)&__p, v187, a1 + 568, (unsigned __int8 **)(a1 + 544), (uint64_t)buf, (const void **)&v217);
        unint64_t v123 = *(std::__shared_weak_count **)(a1 + 288);
        *(_OWORD *)long long v13 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        if (v123) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v123);
        }
        if (SHIBYTE(v218) < 0) {
          operator delete((void *)v217);
        }
        if ((char)buf[23] < 0) {
          operator delete(*(void **)buf);
        }
        if (v122) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v122);
        }
        uint64_t v124 = *a2;
        float v125 = (std::__shared_weak_count *)a2[1];
        if (v125) {
          atomic_fetch_add_explicit(&v125->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        int v126 = TTSSynthesizer::TTSSynthesizerInternal::initialize_gryphon_frontend(a1, v124, (uint64_t)v125, a1 + 520, a3);
        if (v125) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v125);
        }
        if (v126)
        {
          BOOL v127 = *a2;
          uint64_t v20 = (std::__shared_weak_count *)a2[1];
          if (v20) {
            atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v21 = TTSSynthesizer::TTSSynthesizerInternal::initialize_gryphon_frontend(a1, v127, (uint64_t)v20, a1 + 520, a3);
          goto LABEL_262;
        }
        uint64_t v128 = *a2;
        int v129 = (std::__shared_weak_count *)a2[1];
        v186[0] = v128;
        v186[1] = (uint64_t)v129;
        if (v129) {
          atomic_fetch_add_explicit(&v129->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        std::string::basic_string[abi:ne180100]<0>(buf, "pre_pipeline");
        std::string::basic_string[abi:ne180100]<0>(&v217, &byte_20D5A22AE);
        GryphonPipelineFactory::pipeline_from_config((uint64_t **)&__p, v186, a1 + 568, (unsigned __int8 **)(a1 + 544), (uint64_t)buf, (const void **)&v217);
        uint64_t v130 = *(std::__shared_weak_count **)(a1 + 304);
        *(_OWORD *)(a1 + 296) = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        if (v130) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v130);
        }
        if (SHIBYTE(v218) < 0) {
          operator delete((void *)v217);
        }
        if ((char)buf[23] < 0) {
          operator delete(*(void **)buf);
        }
        if (v129) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v129);
        }
        std::string::size_type v131 = *(void *)(a1 + 272);
        if (!v131) {
          goto LABEL_348;
        }
        uint64_t v132 = *(std::__shared_weak_count **)(a1 + 288);
        uint64_t v184 = *(void *)(a1 + 280);
        unint64_t v185 = v132;
        if (v132) {
          atomic_fetch_add_explicit(&v132->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        (*(void (**)(uint64_t, uint64_t *))(*(void *)v131 + 96))(v131, &v184);
        int v63 = v185;
        if (!v185) {
          goto LABEL_348;
        }
LABEL_347:
        std::__shared_weak_count::__release_shared[abi:ne180100](v63);
        goto LABEL_348;
      }
      if (Diagnostics_GetLogObject(void)::onceToken != -1) {
        dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
      }
      unint64_t v138 = Diagnostics_GetLogObject(void)::__profile_log_default;
      if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl(&dword_20CD80000, v138, OS_LOG_TYPE_DEFAULT, "Initializing Legacy FE pipeline (Scalable FE is disabled).", buf, 2u);
      }
      Diagnostics::log(5, "Initializing Legacy FE pipeline (Scalable FE is disabled).", v139);
      if ((a3 & 1) == 0) {
        Frontend::adapt_pipeline_for_nashvilleFE((unsigned __int8 *)(a1 + 568));
      }
      long long v140 = *(void (****)(void **__return_ptr, void, std::string *, unsigned __int8 *, uint64_t *, void))(a1 + 256);
      BOOL v141 = (std::__shared_weak_count *)a2[1];
      v183[0] = *a2;
      v183[1] = (uint64_t)v141;
      if (v141) {
        atomic_fetch_add_explicit(&v141->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      PersistentModuleFactory::load_from_config(v140, a1 + 568, v183);
      if (v141) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v141);
      }
      uint64_t v142 = *(std::__shared_weak_count **)(a1 + 288);
      void *v13 = 0;
      *(void *)(a1 + 288) = 0;
      if (v142) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v142);
      }
      uint64_t v143 = *a2;
      uint64_t v69 = a2[1];
      v182[0] = v143;
      v182[1] = v69;
      if (v69) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v69 + 8), 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(buf, "pipeline");
      std::string::basic_string[abi:ne180100]<0>(&v217, "connection");
      GryphonPipelineFactory::pipeline_from_config((uint64_t **)&__p, v182, a1 + 568, (unsigned __int8 **)(a1 + 544), (uint64_t)buf, (const void **)&v217);
      goto LABEL_321;
    }
    if (*(unsigned char *)(a1 + 513))
    {
      if (a3 && !*(unsigned char *)(a1 + 680)) {
        goto LABEL_3;
      }
      if (Diagnostics_GetLogObject(void)::onceToken != -1) {
        dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
      }
      uint64_t v25 = Diagnostics_GetLogObject(void)::__profile_log_default;
      if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl(&dword_20CD80000, v25, OS_LOG_TYPE_DEFAULT, "Initializing Hybrid FE pipeline.", buf, 2u);
      }
      Diagnostics::log(5, "Initializing Hybrid FE pipeline.", v26);
      uint64_t v27 = *a2;
      uint64_t v28 = (std::__shared_weak_count *)a2[1];
      if (v28) {
        atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v29 = TTSSynthesizer::TTSSynthesizerInternal::initialize_gryphon_frontend(a1, v27, (uint64_t)v28, a1 + 520, a3);
      if (v28) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v28);
      }
      if (v29)
      {
        uint64_t v19 = *a2;
        uint64_t v20 = (std::__shared_weak_count *)a2[1];
        if (v20) {
          atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_32;
      }
      unint64_t v133 = *(std::__shared_weak_count **)(a1 + 288);
      void *v13 = 0;
      *(void *)(a1 + 288) = 0;
      if (v133) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v133);
      }
      int v134 = *(unsigned __int8 *)(a1 + 568);
      if (!*(unsigned char *)(a1 + 568)) {
        goto LABEL_285;
      }
      if (v134 == 2)
      {
        if (**(void **)(a1 + 576) == *(void *)(*(void *)(a1 + 576) + 8))
        {
LABEL_285:
          unint64_t v135 = *a2;
          int v136 = (std::__shared_weak_count *)a2[1];
          v179[0] = v135;
          v179[1] = (uint64_t)v136;
          if (v136) {
            atomic_fetch_add_explicit(&v136->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          GryphonPipelineFactory::gryphonFE_backend_pipeline((uint64_t **)buf, v179);
          BOOL v137 = *(std::__shared_weak_count **)(a1 + 288);
          *(_OWORD *)long long v13 = *(_OWORD *)buf;
          if (v137) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v137);
          }
          goto LABEL_342;
        }
      }
      else if (v134 == 1 && !*(void *)(*(void *)(a1 + 576) + 16))
      {
        goto LABEL_285;
      }
      unint64_t v151 = *(void (****)(void **__return_ptr, void, std::string *, unsigned __int8 *, uint64_t *, void))(a1 + 256);
      uint64_t v152 = (std::__shared_weak_count *)a2[1];
      v181[0] = *a2;
      v181[1] = (uint64_t)v152;
      if (v152) {
        atomic_fetch_add_explicit(&v152->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      PersistentModuleFactory::load_from_config(v151, a1 + 568, v181);
      if (v152) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v152);
      }
      uint64_t v153 = *a2;
      int v136 = (std::__shared_weak_count *)a2[1];
      v180[0] = v153;
      v180[1] = (uint64_t)v136;
      if (v136) {
        atomic_fetch_add_explicit(&v136->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(buf, "pipeline");
      std::string::basic_string[abi:ne180100]<0>(&v217, "connection");
      GryphonPipelineFactory::pipeline_from_config((uint64_t **)&__p, v180, a1 + 568, (unsigned __int8 **)(a1 + 544), (uint64_t)buf, (const void **)&v217);
      uint64_t v154 = *(std::__shared_weak_count **)(a1 + 288);
      *(_OWORD *)long long v13 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      if (v154) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v154);
      }
      if (SHIBYTE(v218) < 0) {
        operator delete((void *)v217);
      }
      if ((char)buf[23] < 0) {
        operator delete(*(void **)buf);
      }
LABEL_342:
      if (v136) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v136);
      }
      uint64_t v155 = *(void *)(a1 + 272);
      uint64_t v156 = *(std::__shared_weak_count **)(a1 + 288);
      int v177 = *(void *)(a1 + 280);
      int v178 = v156;
      if (v156) {
        atomic_fetch_add_explicit(&v156->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(uint64_t, uint64_t *))(*(void *)v155 + 96))(v155, &v177);
      int v63 = v178;
      if (!v178) {
        goto LABEL_348;
      }
      goto LABEL_347;
    }
    int v64 = *(unsigned __int8 *)(a1 + 568);
    if (*(unsigned char *)(a1 + 568))
    {
      if (v64 != 2)
      {
        if (v64 == 1 && !*(void *)(*(void *)(a1 + 576) + 16)) {
          goto LABEL_134;
        }
LABEL_306:
        if (a3 && !*(unsigned char *)(a1 + 680)) {
          goto LABEL_3;
        }
        if (Diagnostics_GetLogObject(void)::onceToken != -1) {
          dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
        }
        std::string::size_type v144 = Diagnostics_GetLogObject(void)::__profile_log_default;
        if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl(&dword_20CD80000, v144, OS_LOG_TYPE_DEFAULT, "Initializing pipeline from gryphon.cfg", buf, 2u);
        }
        Diagnostics::log(5, "Initializing pipeline from gryphon.cfg", v145);
        unint64_t v146 = *(std::__shared_weak_count **)(a1 + 288);
        void *v13 = 0;
        *(void *)(a1 + 288) = 0;
        if (v146) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v146);
        }
        long long v147 = *(void (****)(void **__return_ptr, void, std::string *, unsigned __int8 *, uint64_t *, void))(a1 + 256);
        std::string v148 = (std::__shared_weak_count *)a2[1];
        v176[0] = *a2;
        v176[1] = (uint64_t)v148;
        if (v148) {
          atomic_fetch_add_explicit(&v148->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        PersistentModuleFactory::load_from_config(v147, a1 + 568, v176);
        if (v148) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v148);
        }
        size_t v149 = *a2;
        uint64_t v69 = a2[1];
        v175[0] = v149;
        v175[1] = v69;
        if (v69) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v69 + 8), 1uLL, memory_order_relaxed);
        }
        std::string::basic_string[abi:ne180100]<0>(buf, "pipeline");
        std::string::basic_string[abi:ne180100]<0>(&v217, "connection");
        GryphonPipelineFactory::pipeline_from_config((uint64_t **)&__p, v175, a1 + 568, (unsigned __int8 **)(a1 + 544), (uint64_t)buf, (const void **)&v217);
LABEL_321:
        uint64_t v150 = *(std::__shared_weak_count **)(a1 + 288);
        *(_OWORD *)long long v13 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        if (v150) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v150);
        }
        if (SHIBYTE(v218) < 0) {
          operator delete((void *)v217);
        }
        if ((char)buf[23] < 0) {
          operator delete(*(void **)buf);
        }
LABEL_327:
        if (!v69) {
          goto LABEL_348;
        }
        int v63 = (std::__shared_weak_count *)v69;
        goto LABEL_347;
      }
      if (**(void **)(a1 + 576) != *(void *)(*(void *)(a1 + 576) + 8)) {
        goto LABEL_306;
      }
    }
LABEL_134:
    if (a3 && !*(unsigned char *)(a1 + 680)) {
      goto LABEL_3;
    }
    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    int v65 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl(&dword_20CD80000, v65, OS_LOG_TYPE_DEFAULT, "Initializing default pipeline for Legacy FE.", buf, 2u);
    }
    Diagnostics::log(5, "Initializing default pipeline for Legacy FE.", v66);
    char v67 = *(std::__shared_weak_count **)(a1 + 288);
    void *v13 = 0;
    *(void *)(a1 + 288) = 0;
    if (v67) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v67);
    }
    uint64_t v68 = *a2;
    uint64_t v69 = a2[1];
    v174[0] = v68;
    v174[1] = v69;
    if (v69) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v69 + 8), 1uLL, memory_order_relaxed);
    }
    GryphonPipelineFactory::nashvilleFE_backend_pipeline((uint64_t **)buf, v174);
    int v70 = *(std::__shared_weak_count **)(a1 + 288);
    *(_OWORD *)long long v13 = *(_OWORD *)buf;
    if (v70) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v70);
    }
    goto LABEL_327;
  }
  if (a3 && !*(unsigned char *)(a1 + 680)) {
    goto LABEL_3;
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  uint64_t v14 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl(&dword_20CD80000, v14, OS_LOG_TYPE_DEFAULT, "Initializing FE only pipeline.", buf, 2u);
  }
  Diagnostics::log(5, "Initializing FE only pipeline.", v15);
  if (*(unsigned char *)(a1 + 513))
  {
    uint64_t v16 = *a2;
    std::string::size_type v17 = (std::__shared_weak_count *)a2[1];
    if (v17) {
      atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v18 = TTSSynthesizer::TTSSynthesizerInternal::initialize_gryphon_frontend(a1, v16, (uint64_t)v17, a1 + 520, a3);
    if (v17) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v17);
    }
    if (v18)
    {
      uint64_t v19 = *a2;
      uint64_t v20 = (std::__shared_weak_count *)a2[1];
      if (v20) {
        atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
      }
LABEL_32:
      uint64_t v21 = TTSSynthesizer::TTSSynthesizerInternal::initialize_gryphon_frontend(a1, v19, (uint64_t)v20, a1 + 520, a3);
LABEL_262:
      uint64_t v7 = v21;
      if (v20) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v20);
      }
      goto LABEL_359;
    }
    if (*(unsigned char *)(a1 + 514))
    {
      uint64_t v30 = (std::__shared_weak_count *)a2[1];
      v194[0] = *a2;
      v194[1] = (uint64_t)v30;
      if (v30) {
        atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(buf, "pre_pipeline");
      std::string::basic_string[abi:ne180100]<0>(&v217, &byte_20D5A22AE);
      GryphonPipelineFactory::pipeline_from_config((uint64_t **)&__p, v194, a1 + 568, (unsigned __int8 **)(a1 + 544), (uint64_t)buf, (const void **)&v217);
      uint64_t v31 = *(std::__shared_weak_count **)(a1 + 304);
      *(_OWORD *)(a1 + 296) = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      if (v31) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v31);
      }
      if (SHIBYTE(v218) < 0) {
        operator delete((void *)v217);
      }
      if ((char)buf[23] < 0) {
        operator delete(*(void **)buf);
      }
      if (v30) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v30);
      }
    }
  }
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep = v6.__d_.__rep_;
  int v32 = *(std::__shared_weak_count **)(a1 + 288);
  void *v13 = 0;
  *(void *)(a1 + 288) = 0;
  if (v32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v32);
  }
  uint64_t v33 = *a2;
  uint64_t v34 = (std::__shared_weak_count *)a2[1];
  if (v34) {
    atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v35 = *(unsigned __int8 *)(a1 + 513);
  v207[0] = 0;
  int v169 = v33;
  int v208 = 0;
  if (v35)
  {
    SharedObjectPool::get<VoiceConfig>(&v205, (long long **)v33);
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v205 + 72))(&v203);
    uint64_t v36 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)&v203, "pipeline");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v201, (uint64_t)v36);
    int v37 = v207[0];
    v207[0] = v201[0];
    v201[0] = v37;
    uint64_t v38 = (uint64_t *)v208;
    int v208 = v202;
    uint64_t v202 = v38;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v202, v37);
    if (v207[0])
    {
      *(void *)std::string buf = v207;
      *(void *)&uint8_t buf[8] = 0;
      *(void *)&buf[16] = 0;
      uint64_t v225 = 0;
      v226[0] = 0x8000000000000000;
      if (v207[0] == 2)
      {
        *(void *)&buf[16] = *(void *)v208;
      }
      else if (v207[0] == 1)
      {
        *(void *)&uint8_t buf[8] = *(void *)v208;
      }
      else
      {
        v226[0] = 0;
      }
      int v71 = 0;
      while (1)
      {
        int v218 = 0;
        uint64_t v219 = 0;
        *((void *)&v217 + 1) = 0;
        *(void *)&v217 = v207;
        uint64_t v220 = 0x8000000000000000;
        if (v207[0] == 2)
        {
          int v218 = (long long *)*((void *)v208 + 1);
        }
        else if (v207[0] == 1)
        {
          *((void *)&v217 + 1) = (char *)v208 + 8;
        }
        else
        {
          uint64_t v220 = 1;
        }
        if (nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==((unsigned __int8 **)buf, (unsigned __int8 **)&v217))
        {
          goto LABEL_101;
        }
        std::string::size_type v72 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator*((uint64_t)buf);
        std::string v73 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v72, "id");
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>((uint64_t)v73, &v198);
        char v74 = HIBYTE(v198.__r_.__value_.__r.__words[2]);
        if (SHIBYTE(v198.__r_.__value_.__r.__words[2]) < 0)
        {
          if (v198.__r_.__value_.__l.__size_ != 14)
          {
LABEL_163:
            if ((v71 & 1) == 0)
            {
              int v79 = 0;
              int v71 = 0;
              goto LABEL_192;
            }
            goto LABEL_172;
          }
          long long v75 = (unint64_t *)v198.__r_.__value_.__r.__words[0];
        }
        else
        {
          if (SHIBYTE(v198.__r_.__value_.__r.__words[2]) != 14) {
            goto LABEL_163;
          }
          long long v75 = (unint64_t *)&v198;
        }
        unint64_t v76 = bswap64(*v75);
        unint64_t v77 = 0x6E657572616C5F61;
        if (v76 == 0x6E657572616C5F61
          && (unint64_t v76 = bswap64(*(unint64_t *)((char *)v75 + 6)),
              unint64_t v77 = 0x5F61646170746572,
              v76 == 0x5F61646170746572))
        {
          int v78 = 0;
        }
        else if (v76 < v77)
        {
          int v78 = -1;
        }
        else
        {
          int v78 = 1;
        }
        BOOL v80 = v78 == 0;
        BOOL v81 = v78 == 0;
        int v82 = !v80;
        if ((v82 & v71 & 1) == 0)
        {
          int v79 = 4 * v81;
          v71 |= v81;
          goto LABEL_192;
        }
LABEL_172:
        if (v207[0] == 2)
        {
          long long v84 = 0;
          uint64_t v83 = *((void *)v208 + 1);
          goto LABEL_177;
        }
        if (v207[0] == 1)
        {
          uint64_t v83 = 0;
          long long v84 = (uint64_t *)((char *)v208 + 8);
LABEL_177:
          char v85 = 1;
          goto LABEL_179;
        }
        char v85 = 0;
        uint64_t v83 = 0;
        long long v84 = 0;
LABEL_179:
        std::string v86 = v34;
        if (*(unsigned __int8 **)buf != v207)
        {
          exceptiouint64_t n = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
          std::string::basic_string[abi:ne180100]<0>(&v217, "iterators do not fit current value");
          nlohmann::detail::invalid_iterator::create(203, (uint64_t)&v217, exception);
        }
        long long v87 = v13;
        if (v207[0] == 2)
        {
          if (*(void *)&buf[16] != v83)
          {
            BOOL v92 = v208;
            std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *>((uint64_t)&v217, v83, *((void *)v208 + 1), *(uint64_t *)&buf[16]);
            uint64_t v94 = v93;
            unint64_t v95 = (uint64_t **)v92[1];
            if (v95 != v93)
            {
              BOOL v96 = v95 - 1;
              do
              {
                int v97 = v96 - 1;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v96, *((unsigned __int8 *)v96 - 8));
                v96 -= 2;
              }
              while (v97 != v94);
            }
            v92[1] = v94;
          }
          goto LABEL_191;
        }
        if (v207[0] == 1)
        {
          uint64_t v88 = *(uint64_t **)&buf[8];
          if (*(uint64_t **)&buf[8] != v84)
          {
            uint64_t v89 = (uint64_t **)v208;
            uint64_t v90 = (char *)v208 + 8;
            do
            {
              uint64_t v91 = std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__remove_node_pointer(v89, v88);
              std::allocator_traits<std::allocator<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>>>::destroy[abi:ne180100]<std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void,void>((uint64_t)v90, (uint64_t)(v88 + 4));
              operator delete(v88);
              uint64_t v88 = v91;
            }
            while (v84 != v91);
          }
          goto LABEL_191;
        }
        if (v207[0] - 3 > 5)
        {
          uint64_t v165 = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
          if (v207[0] > 9uLL) {
            uint64_t v166 = "number";
          }
          else {
            uint64_t v166 = off_2641152A0[v207[0]];
          }
          std::string::basic_string[abi:ne180100]<0>(&__p, v166);
          uint64_t v167 = std::string::insert(&__p, 0, "cannot use erase() with ");
          uint64_t v168 = *(_OWORD *)&v167->__r_.__value_.__l.__data_;
          int v218 = (long long *)v167->__r_.__value_.__r.__words[2];
          v217 = v168;
          v167->__r_.__value_.__l.__size_ = 0;
          v167->__r_.__value_.__r.__words[2] = 0;
          v167->__r_.__value_.__r.__words[0] = 0;
          nlohmann::detail::type_error::create(307, (uint64_t)&v217, v165);
        }
        char v98 = v85 ^ 1;
        if (v226[0]) {
          char v98 = 0;
        }
        if ((v98 & 1) == 0)
        {
          BOOL v102 = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
          std::string::basic_string[abi:ne180100]<0>(&v217, "iterators out of range");
          nlohmann::detail::invalid_iterator::create(204, (uint64_t)&v217, v102);
        }
        if (v207[0] == 8)
        {
          std::string::size_type v99 = v208;
          std::string::size_type v101 = *(void **)v208;
          if (*(void *)v208)
          {
            *((void *)v208 + 1) = v101;
            std::string v100 = v101;
LABEL_206:
            operator delete(v100);
            std::string::size_type v99 = v208;
          }
LABEL_207:
          operator delete(v99);
          int v208 = 0;
          goto LABEL_208;
        }
        if (v207[0] == 3)
        {
          std::string::size_type v99 = v208;
          if (*((char *)v208 + 23) < 0)
          {
            std::string v100 = *(void **)v208;
            goto LABEL_206;
          }
          goto LABEL_207;
        }
LABEL_208:
        v207[0] = 0;
LABEL_191:
        int v79 = 2;
        char v74 = HIBYTE(v198.__r_.__value_.__r.__words[2]);
        long long v13 = v87;
        uint64_t v34 = v86;
        uint64_t v33 = v169;
LABEL_192:
        if (v74 < 0) {
          operator delete(v198.__r_.__value_.__l.__data_);
        }
        if ((v79 | 4) != 4) {
          goto LABEL_101;
        }
        nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator++((unsigned __int8 **)buf);
      }
    }
    *((void *)&v217 + 1) = 0;
    LOBYTE(v217) = 3;
    *((void *)&v217 + 1) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[3]>("id");
    int v218 = &v217;
    LOBYTE(v219) = 1;
    unint64_t v221 = 0;
    LOBYTE(v220) = 3;
    unint64_t v221 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[21]>("frontend_feature_log");
    uint64_t v222 = &v220;
    uint64_t v223 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)buf, (uint64_t)&v217, 2, 1, 2);
    *(void *)&buf[16] = buf;
    LOBYTE(v225) = 1;
    __p.__r_.__value_.__l.__size_ = 0;
    __p.__r_.__value_.__s.__data_[0] = 3;
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[7]>("params");
    __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&__p;
    uint64_t v212 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&v199, 0, 0, 0, 1);
    v213[0] = v199;
    BOOL v51 = v200;
    LOBYTE(v199) = 0;
    unint64_t v200 = 0;
    uint64_t v214 = v51;
    uint64_t v215 = v213;
    uint64_t v216 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v226, (uint64_t)&__p, 2, 1, 2);
    uint64_t v227 = v226;
    uint64_t v228 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&v198, (uint64_t)buf, 2, 1, 2);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::push_back(v207, (char *)&v198);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v198.__r_.__value_.__l.__size_, v198.__r_.__value_.__s.__data_[0]);
    for (uint64_t i = 0; i != -8; i -= 4)
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v226[i + 1], LOBYTE(v226[i]));
    for (uint64_t j = 0; j != -8; j -= 4)
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&(&v214)[j], v213[j * 8]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v200, v199);
    for (uint64_t k = 0; k != -8; k -= 4)
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&(&v221)[k], *((unsigned __int8 *)&v220 + k * 8));
LABEL_101:
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v204, v203);
    if (v206) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v206);
    }
  }
  else
  {
    v198.__r_.__value_.__s.__data_[0] = 0;
    int v208 = 0;
    v198.__r_.__value_.__l.__size_ = 0;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v198.__r_.__value_.__l.__size_, 0);
    *((void *)&v217 + 1) = 0;
    LOBYTE(v217) = 3;
    *((void *)&v217 + 1) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[3]>("id");
    int v218 = &v217;
    LOBYTE(v219) = 1;
    unint64_t v221 = 0;
    LOBYTE(v220) = 3;
    unint64_t v221 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[13]>("nashville_fe");
    uint64_t v222 = &v220;
    uint64_t v223 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)buf, (uint64_t)&v217, 2, 1, 2);
    *(void *)&buf[16] = buf;
    LOBYTE(v225) = 1;
    __p.__r_.__value_.__l.__size_ = 0;
    __p.__r_.__value_.__s.__data_[0] = 3;
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[7]>("params");
    __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&__p;
    uint64_t v212 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&v203, 0, 0, 0, 1);
    v213[0] = v203;
    uint64_t v39 = v204;
    LOBYTE(v203) = 0;
    std::string::size_type v204 = 0;
    uint64_t v214 = v39;
    uint64_t v215 = v213;
    uint64_t v216 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v226, (uint64_t)&__p, 2, 1, 2);
    uint64_t v227 = v226;
    uint64_t v228 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&v205, (uint64_t)buf, 2, 1, 2);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::push_back(v207, (char *)&v205);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v206, v205);
    for (uint64_t m = 0; m != -8; m -= 4)
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v226[m + 1], LOBYTE(v226[m]));
    for (uint64_t n = 0; n != -8; n -= 4)
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&(&v214)[n], v213[n * 8]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v204, v203);
    for (iuint64_t i = 0; ii != -8; ii -= 4)
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&(&v221)[ii], *((unsigned __int8 *)&v220 + ii * 8));
    *((void *)&v217 + 1) = 0;
    LOBYTE(v217) = 3;
    *((void *)&v217 + 1) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[3]>("id");
    int v218 = &v217;
    LOBYTE(v219) = 1;
    unint64_t v221 = 0;
    LOBYTE(v220) = 3;
    unint64_t v221 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[10]>("prompt_be");
    uint64_t v222 = &v220;
    uint64_t v223 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)buf, (uint64_t)&v217, 2, 1, 2);
    *(void *)&buf[16] = buf;
    LOBYTE(v225) = 1;
    __p.__r_.__value_.__l.__size_ = 0;
    __p.__r_.__value_.__s.__data_[0] = 3;
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[7]>("params");
    __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&__p;
    uint64_t v212 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&v203, 0, 0, 0, 1);
    v213[0] = v203;
    uint64_t v43 = v204;
    LOBYTE(v203) = 0;
    std::string::size_type v204 = 0;
    uint64_t v214 = v43;
    uint64_t v215 = v213;
    uint64_t v216 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v226, (uint64_t)&__p, 2, 1, 2);
    uint64_t v227 = v226;
    uint64_t v228 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&v205, (uint64_t)buf, 2, 1, 2);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::push_back(v207, (char *)&v205);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v206, v205);
    for (juint64_t j = 0; jj != -8; jj -= 4)
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v226[jj + 1], LOBYTE(v226[jj]));
    for (kuint64_t k = 0; kk != -8; kk -= 4)
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&(&v214)[kk], v213[kk * 8]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v204, v203);
    for (muint64_t m = 0; mm != -8; mm -= 4)
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&(&v221)[mm], *((unsigned __int8 *)&v220 + mm * 8));
    *((void *)&v217 + 1) = 0;
    LOBYTE(v217) = 3;
    *((void *)&v217 + 1) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[3]>("id");
    int v218 = &v217;
    LOBYTE(v219) = 1;
    unint64_t v221 = 0;
    LOBYTE(v220) = 3;
    unint64_t v221 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[21]>("frontend_feature_log");
    uint64_t v222 = &v220;
    uint64_t v223 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)buf, (uint64_t)&v217, 2, 1, 2);
    *(void *)&buf[16] = buf;
    LOBYTE(v225) = 1;
    __p.__r_.__value_.__l.__size_ = 0;
    __p.__r_.__value_.__s.__data_[0] = 3;
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[7]>("params");
    __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&__p;
    uint64_t v212 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&v203, 0, 0, 0, 1);
    v213[0] = v203;
    BOOL v47 = v204;
    LOBYTE(v203) = 0;
    std::string::size_type v204 = 0;
    uint64_t v214 = v47;
    uint64_t v215 = v213;
    uint64_t v216 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v226, (uint64_t)&__p, 2, 1, 2);
    uint64_t v227 = v226;
    uint64_t v228 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&v205, (uint64_t)buf, 2, 1, 2);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::push_back(v207, (char *)&v205);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v206, v205);
    for (nuint64_t n = 0; nn != -8; nn -= 4)
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v226[nn + 1], LOBYTE(v226[nn]));
    for (uint64_t i1 = 0; i1 != -8; i1 -= 4)
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&(&v214)[i1], v213[i1 * 8]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v204, v203);
    for (uint64_t i2 = 0; i2 != -8; i2 -= 4)
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&(&v221)[i2], *((unsigned __int8 *)&v220 + i2 * 8));
  }
  LOBYTE(v205) = 0;
  std::string::size_type v206 = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&v203, (uint64_t)v207);
  std::string::size_type v55 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)&v205, "pipeline");
  int v56 = *(unsigned __int8 *)v55;
  *(unsigned char *)std::string::size_type v55 = v203;
  LOBYTE(v203) = v56;
  BOOL v57 = (uint64_t *)v55[1];
  v55[1] = (uint64_t)v204;
  std::string::size_type v204 = v57;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v204, v56);
  std::string::size_type v58 = *(std::__shared_weak_count **)(v33 + 24);
  if (v58)
  {
    std::string::size_type v58 = std::__shared_weak_count::lock(v58);
    int v59 = v58;
    if (v58) {
      std::string::size_type v58 = *(std::__shared_weak_count **)(v33 + 16);
    }
  }
  else
  {
    int v59 = 0;
  }
  uint64_t v199 = v33;
  unint64_t v200 = (uint64_t *)v34;
  if (v34) {
    atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  PersistentModuleFactory::load_from_config(v58, (uint64_t)&v205, &v199);
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  if (v59) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v59);
  }
  v197[0] = v33;
  v197[1] = (uint64_t)v34;
  if (v34) {
    atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(buf, 0, sizeof(buf));
  std::string::basic_string[abi:ne180100]<0>(&v217, "pipeline");
  std::string::basic_string[abi:ne180100]<0>(&__p, "connection");
  GryphonPipelineFactory::pipeline_from_config((uint64_t **)&v193, v197, (uint64_t)&v205, (unsigned __int8 **)buf, (uint64_t)&v217, (const void **)&__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v218) < 0) {
    operator delete((void *)v217);
  }
  *(void *)&v217 = buf;
  std::vector<TTSSynthesizer::EngineParamsOverride>::__destroy_vector::operator()[abi:ne180100]((void ***)&v217);
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v206, v205);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v208, v207[0]);
  uint64_t v60 = *(std::__shared_weak_count **)(a1 + 288);
  *(_OWORD *)long long v13 = v193;
  if (v60) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v60);
  }
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  uint64_t v61 = *(void *)(a1 + 272);
  v6.__d_.__rep_ = rep;
  if (v61)
  {
    int v62 = *(std::__shared_weak_count **)(a1 + 288);
    int v191 = *(void *)(a1 + 280);
    int v192 = v62;
    if (v62) {
      atomic_fetch_add_explicit(&v62->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v61 + 96))(v61, &v191);
    int v63 = v192;
    if (v192) {
      goto LABEL_347;
    }
  }
LABEL_348:
  if (*(unsigned char *)(a1 + 512) || *(void *)(a1 + 280))
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    uint64_t v157 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
    {
      v158.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
      uint64_t v159 = *(unsigned __int8 *)(a1 + 680);
      *(_DWORD *)std::string buf = 134218240;
      *(double *)&uint8_t buf[4] = (double)((v158.__d_.__rep_ - v6.__d_.__rep_) / 1000000) / 1000.0;
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&unsigned char buf[14] = v159;
      _os_log_impl(&dword_20CD80000, v157, OS_LOG_TYPE_DEFAULT, "Pipeline build latency: %.3f s, rebuild=%d", buf, 0x12u);
    }
    v160.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    Diagnostics::log(5, "Pipeline build latency: %.3f s, rebuild=%d", v161, (double)((v160.__d_.__rep_ - v6.__d_.__rep_) / 1000000) / 1000.0, *(unsigned __int8 *)(a1 + 680));
    std::string::size_type v162 = *(void *)(a1 + 240);
    std::allocate_shared[abi:ne180100]<TTSSynthesizer::VoiceDescription,std::allocator<TTSSynthesizer::VoiceDescription>,TTSSynthesizer::VoiceDescription&,void>(&v171, a1 + 312);
    SharedObjectPool::inject<TTSSynthesizer::VoiceDescription>(&v173, v162, &v171);
    if (*((void *)&v173 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v173 + 1));
    }
    if (v172) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v172);
    }
    kdebug_trace();
    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v7 = 1579097685;
  }
LABEL_359:
  if (v196) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v196);
  }
  return v7;
}

void sub_20D464218(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,std::__shared_weak_count *a55)
{
  if (v55) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v55);
  }
  if (a55) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a55);
  }
  _Unwind_Resume(a1);
}

void TTSSynthesizer::TTSSynthesizerInternal::set_prompts_disabled(TTSSynthesizer::TTSSynthesizerInternal *this, char a2)
{
  uint64_t v4 = *((void *)this + 34);
  if (v4)
  {
    int v5 = *(void (**)(void))(*(void *)v4 + 40);
    v5();
  }
  else
  {
    SharedObjectPool::get_if<PromptConfig>(&v13, *((void *)this + 30));
    std::chrono::steady_clock::time_point v6 = v13;
    if (v13)
    {
      uint64_t v7 = v14;
    }
    else
    {
      uint64_t v8 = *((void *)this + 30);
      unint64_t v9 = (char *)operator new(0x20uLL);
      *((void *)v9 + 1) = 0;
      *((void *)v9 + 2) = 0;
      *(void *)unint64_t v9 = off_26C215598;
      v9[24] = 0;
      *((_DWORD *)v9 + 7) = -1;
      std::recursive_mutex::lock((std::recursive_mutex *)(v8 + 56));
      v15[0] = (uint64_t *)&v16;
      if (!v10) {
        operator new();
      }
      v15[0] = (uint64_t *)off_26C2063B8;
      v15[1] = (uint64_t *)(v9 + 24);
      _OWORD v15[2] = (uint64_t *)v9;
      atomic_fetch_add_explicit((atomic_ullong *volatile)v9 + 1, 1uLL, memory_order_relaxed);
      long long v11 = *(_OWORD *)&v15[1];
      *(_OWORD *)&v15[1] = 0uLL;
      uint64_t v12 = *(std::__shared_weak_count **)(v10 + 16);
      *(_OWORD *)(v10 + 8) = v11;
      if (v12)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v12);
        v15[0] = (uint64_t *)off_26C2063B8;
        if (v15[2]) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v15[2]);
        }
      }
      std::recursive_mutex::unlock((std::recursive_mutex *)(v8 + 56));
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v9);
      SharedObjectPool::get_if<PromptConfig>(v15, *((void *)this + 30));
      uint64_t v7 = (std::__shared_weak_count *)v15[1];
      std::chrono::steady_clock::time_point v6 = v15[0];
      if (v14) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v14);
      }
    }
    *(unsigned char *)std::chrono::steady_clock::time_point v6 = a2;
    if (v7) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
}

void sub_20D464C48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void SharedObjectPool::get_if<PromptConfig>(void *a1, uint64_t a2)
{
  uint64_t v4 = (std::recursive_mutex *)(a2 + 56);
  std::recursive_mutex::lock((std::recursive_mutex *)(a2 + 56));
  {
    uint64_t v6 = *(void *)(*(void *)v5 + 16);
    *a1 = *(void *)(*(void *)v5 + 8);
    a1[1] = v6;
    if (v6) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
  }
  std::recursive_mutex::unlock(v4);
}

void sub_20D464D18(_Unwind_Exception *a1)
{
  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void Agglomerate::ItemHolder<std::shared_ptr<PromptConfig>>::~ItemHolder(void *a1)
{
  *a1 = off_26C2063B8;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  JUMPOUT(0x2105595E0);
}

void *Agglomerate::ItemHolder<std::shared_ptr<PromptConfig>>::~ItemHolder(void *a1)
{
  *a1 = off_26C2063B8;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void std::__shared_ptr_emplace<PromptConfig>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C215598;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<PromptConfig>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C215598;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__function::__value_func<VE_INSTALL * ()(void)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + ++*(_DWORD *)(result + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + ++*(_DWORD *)(result + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + ++*(_DWORD *)(result + 24) = 0;
  }
  return a1;
}

uint64_t TTSSynthesizer::TTSSynthesizerInternal::initialize_vocalizer_engine(uint64_t a1, uint64_t a2)
{
  uint64_t v63 = *MEMORY[0x263EF8340];
  *(void *)(a1 + 128) = 0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  uint64_t v4 = *(void *)(a2 + 24);
  if (!v4) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 48))(v4);
  if (v5) {
    goto LABEL_3;
  }
  *(void *)(a1 + 128) = 0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_WORD *)a1 = 8963;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(void *)(a1 + 200) = 0;
  *(_DWORD *)(a1 + 136) = 131584;
  SiriTTS::vocalizer_common_resource_path((SiriTTS *)v61);
  uint64_t v8 = (void *)(a1 + 376);
  if (*(char *)(a1 + 399) < 0) {
    uint64_t v8 = (void *)*v8;
  }
  unint64_t v9 = v61;
  if (SHIBYTE(v61[2]) < 0) {
    unint64_t v9 = (void **)v61[0];
  }
  *(void *)&v42[0] = v8;
  *((void *)&v42[0] + 1) = v9;
  *(void *)(a1 + 144) = v42;
  int Interfaces = vplatform_GetInterfaces((void *)a1, (_WORD *)(a1 + 136));
  if (Interfaces)
  {
    uint64_t v5 = 0;
    uint64_t v2 = vplatform_GetInterfaces((void *)a1, (_WORD *)(a1 + 136));
  }
  else
  {
    *(void *)(a1 + 32) = &SiriTTSVocalizerGetCriticalSectionImpl::__CriticalSectionImpl;
    uint64_t v19 = (void *)(a1 + 400);
    if (*(char *)(a1 + 423) < 0) {
      uint64_t v19 = (void *)*v19;
    }
    *(void *)(a1 + 8) = v19;
    uint64_t v5 = a1;
  }
  if (SHIBYTE(v61[2]) < 0) {
    operator delete(v61[0]);
  }
  if (!Interfaces)
  {
LABEL_3:
    uint64_t v6 = ve_ttsInitialize(v5, (uint64_t *)(a1 + 208));
    if (v6)
    {
      return ve_ttsInitialize(v5, (uint64_t *)(a1 + 208));
    }
    else
    {
      __int16 v41 = 1;
      MEMORY[0x270FA5388](v6);
      if (ve_ttsGetLanguageList(*(void *)(a1 + 208), *(void *)(a1 + 216), v40, &v41, v11, v12, v13, v14))
      {
        return ve_ttsGetLanguageList(*(void *)(a1 + 208), *(void *)(a1 + 216), v40, &v41, v15, v16, v17, v18);
      }
      else
      {
        uint64_t v20 = memcpy(v62, v40, sizeof(v62));
        MEMORY[0x270FA5388](v20);
        uint64_t v22 = &v40[-256 * v21];
        if (ve_ttsGetVoiceList(*(void *)(a1 + 208), *(void *)(a1 + 216), v62, (uint64_t)v22, &v41, v23, v24, v25))
        {
          return ve_ttsGetVoiceList(*(void *)(a1 + 208), *(void *)(a1 + 216), v62, (uint64_t)v22, &v41, v26, v27, v28);
        }
        else
        {
          memcpy(v61, v22, sizeof(v61));
          if (ve_ttsOpen(*(void *)(a1 + 208), *(void *)(a1 + 216), 0, 0, a1 + 224, v29, v30, v31))
          {
            return ve_ttsOpen(*(void *)(a1 + 208), *(void *)(a1 + 216), 0, 0, a1 + 224, v32, v33, v34);
          }
          else
          {
            LODWORD(v59[0]) = 1;
            strncpy((char *)v59 + 4, v62, 0x80uLL);
            LODWORD(v57[0]) = 2;
            strncpy((char *)v57 + 4, (const char *)&v61[32], 0x80uLL);
            v42[6] = v59[6];
            v42[7] = v59[7];
            v42[2] = v59[2];
            v42[3] = v59[3];
            v42[4] = v59[4];
            void v42[5] = v59[5];
            v42[0] = v59[0];
            v42[1] = v59[1];
            long long v49 = v57[5];
            long long v50 = v57[6];
            long long v51 = v57[7];
            long long v45 = v57[1];
            long long v46 = v57[2];
            long long v47 = v57[3];
            long long v48 = v57[4];
            int v43 = v60;
            int v52 = v58;
            long long v44 = v57[0];
            int v53 = 7;
            __int16 v54 = 2;
            int v55 = 19;
            __int16 v56 = 1;
            return ve_ttsSetParamList(*(void *)(a1 + 224), *(void *)(a1 + 232), v42, 4, v35, v36, v37, v38);
          }
        }
      }
    }
  }
  return v2;
}

void sub_20D4652A4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 839) < 0) {
    operator delete(*(void **)(v2 + 264));
  }
  _Unwind_Resume(exception_object);
}

void *std::__function::__value_func<VE_INSTALL * ()(void)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t TTSSynthesizer::TTSSynthesizerInternal::initialize_gryphon_frontend(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  if ((a5 & 1) == 0)
  {
    if (a3) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(a3 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v14 = *(void *)(a1 + 288);
    if (v14) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
    }
    operator new();
  }
  SharedObjectPool::get_if<FrontendEnvironment>(__p, a2);
  if (__p[0] && *((unsigned char *)__p[0] + 88))
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    uint64_t v6 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
    {
      LOWORD(buf) = 0;
      _os_log_impl(&dword_20CD80000, v6, OS_LOG_TYPE_INFO, "FE Init latency started", (uint8_t *)&buf, 2u);
    }
    Diagnostics::log(6, "FE Init latency started", v7);
    v8.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    (*(void (**)(void))(**(void **)(a1 + 272) + 88))(*(void *)(a1 + 272));
    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    unint64_t v9 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
    {
      v10.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
      int buf = 134217984;
      double buf_4 = (double)((v10.__d_.__rep_ - v8.__d_.__rep_) / 1000000) / 1000.0;
      _os_log_impl(&dword_20CD80000, v9, OS_LOG_TYPE_INFO, "FE Init latency %.3f s", (uint8_t *)&buf, 0xCu);
    }
    v11.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    Diagnostics::log(6, "FE Init latency %.3f s", v12, (double)((v11.__d_.__rep_ - v8.__d_.__rep_) / 1000000) / 1000.0);
  }
  if (__p[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
  }
  return 0;
}

void sub_20D466188(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, void *a12, uint64_t a13, std::__shared_weak_count *a14, std::__shared_weak_count *a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  long long v47 = *(std::__shared_weak_count **)(v45 - 160);
  if (v47) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v47);
  }
  if (a22 < 0) {
    operator delete(__p);
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)(v45 - 136), *(unsigned __int8 *)(v45 - 144));
  if (v43) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v43);
  }
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  if (a36 < 0) {
    operator delete(a31);
  }
  std::string __p = a10;
  std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a11, *(void **)(v44 + 144));
  std::string __p = a12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  long long v48 = *(std::__shared_weak_count **)(v44 + 96);
  if (v48) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v48);
  }
  long long v49 = *(std::__shared_weak_count **)(v44 + 80);
  if (v49) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v49);
  }
  long long v50 = *(std::__shared_weak_count **)(v44 + 64);
  if (v50) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v50);
  }
  long long v51 = *(std::__shared_weak_count **)(v44 + 48);
  if (v51) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v51);
  }
  int v52 = *(std::__shared_weak_count **)(v44 + 32);
  if (v52) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v52);
  }
  int v53 = *(std::__shared_weak_count **)(v44 + 16);
  if (v53) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v53);
  }
  if (a15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a15);
  }
  if (v43) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v43);
  }
  MEMORY[0x2105595E0](v44, 0x10A1C40C64D79E7);
  if (a15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a15);
  }
  if (v43) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v43);
  }
  _Unwind_Resume(a1);
}

void Agglomerate::ItemHolder<std::shared_ptr<TTSSynthesizer::VoiceDescription>>::~ItemHolder(void *a1)
{
  *a1 = off_26C2066F8;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  JUMPOUT(0x2105595E0);
}

void *Agglomerate::ItemHolder<std::shared_ptr<TTSSynthesizer::VoiceDescription>>::~ItemHolder(void *a1)
{
  *a1 = off_26C2066F8;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void std::__shared_ptr_emplace<TTSSynthesizer::VoiceDescription>::__on_zero_shared(uint64_t a1)
{
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  if (*(char *)(a1 + 55) < 0)
  {
    uint64_t v2 = *(void **)(a1 + 32);
    operator delete(v2);
  }
}

void std::__shared_ptr_emplace<TTSSynthesizer::VoiceDescription>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C219000;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<TTSSynthesizer::VoiceDescription>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C219000;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Agglomerate::ItemHolder<std::shared_ptr<VE_INSTALL>>::~ItemHolder(void *a1)
{
  *a1 = off_26C206358;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  JUMPOUT(0x2105595E0);
}

void *Agglomerate::ItemHolder<std::shared_ptr<VE_INSTALL>>::~ItemHolder(void *a1)
{
  *a1 = off_26C206358;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

uint64_t std::__shared_ptr_pointer<VE_INSTALL *,TTSSynthesizer::TTSSynthesizerInternal::initialize(std::string const&,std::string const&,std::string const&,std::function<VE_INSTALL * ()(void)>,std::vector<TTSSynthesizer::EngineParamsOverride> const&)::$_0,std::allocator<VE_INSTALL>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__shared_ptr_pointer<VE_INSTALL *,TTSSynthesizer::TTSSynthesizerInternal::initialize(std::string const&,std::string const&,std::string const&,std::function<VE_INSTALL * ()(void)>,std::vector<TTSSynthesizer::EngineParamsOverride> const&)::$_0,std::allocator<VE_INSTALL>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void Agglomerate::ItemHolder<std::shared_ptr<TTSSynthesizerEventBusInternal>>::~ItemHolder(void *a1)
{
  *a1 = off_26C206678;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  JUMPOUT(0x2105595E0);
}

void *Agglomerate::ItemHolder<std::shared_ptr<TTSSynthesizerEventBusInternal>>::~ItemHolder(void *a1)
{
  *a1 = off_26C206678;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void std::__shared_ptr_emplace<TTSSynthesizerEventBusInternal>::__on_zero_shared(uint64_t a1)
{
  std::mutex::~mutex((std::mutex *)(a1 + 48));
  uint64_t v2 = *(void **)(a1 + 32);
  std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<Observer>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<Observer>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<Observer>>>>>::destroy(v2);
}

void std::__shared_ptr_emplace<TTSSynthesizerEventBusInternal>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C2183C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<TTSSynthesizerEventBusInternal>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C2183C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void TTSSynthesizer::TTSSynthesizerInternal::available_neural_styles(int64x2_t *this, uint64_t a2)
{
  *((void *)&v54 + 1) = *MEMORY[0x263EF8340];
  this->i64[0] = 0;
  this->i64[1] = 0;
  this[1].i64[0] = 0;
  unsigned int v2 = *(_DWORD *)(a2 + 368);
  BOOL v3 = v2 > 4;
  int v4 = (1 << v2) & 0x1A;
  if (v3 || v4 == 0) {
    return;
  }
  uint64_t v7 = *(void *)(a2 + 280);
  uint64_t v8 = *(void *)(v7 + 8);
  if (v8 == *(void *)(v7 + 16)) {
    goto LABEL_24;
  }
  while (1)
  {
    if (!*(void *)v8) {
      goto LABEL_16;
    }
    if (v9) {
      break;
    }
LABEL_14:
    if (*(void *)v8
    {
      std::chrono::steady_clock::time_point v11 = *(std::__shared_weak_count **)(v8 + 8);
      if (!v11) {
        goto LABEL_24;
      }
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      goto LABEL_23;
    }
LABEL_16:
    v8 += 16;
    if (v8 == *(void *)(v7 + 16)) {
      goto LABEL_24;
    }
  }
  std::chrono::steady_clock::time_point v10 = v9;
  std::chrono::steady_clock::time_point v11 = *(std::__shared_weak_count **)(v8 + 8);
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v12 = (const void *)v9[34];
  if (!v12
  {
    if (v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
    goto LABEL_14;
  }
  uint64_t v13 = (std::__shared_weak_count *)v10[35];
  if (v13)
  {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  if (v11) {
LABEL_23:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
LABEL_24:
  if (*(void *)(v7 + 16) != v8)
  {
    uint64_t v14 = *(const void ****)v8;
    if (*(void *)v8
    {
      uint64_t v16 = v15;
      uint64_t v17 = *(std::__shared_weak_count **)(v8 + 8);
      if (v17) {
        atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v14 = (const void ***)*((void *)v16 + 34);
      uint64_t v18 = (std::__shared_weak_count *)*((void *)v16 + 35);
      if (v18) {
        atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v17) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v17);
      }
    }
    else
    {
      uint64_t v18 = *(std::__shared_weak_count **)(v8 + 8);
      if (v18) {
        atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
      }
    }
    if (v14)
    {
      std::map<std::string,std::vector<float>>::map[abi:ne180100](&v42, v14 + 99);
      std::string::basic_string[abi:ne180100]<0>(v48, "siri");
      std::string::basic_string[abi:ne180100]<0>(&v48[24], "flat");
      std::string::basic_string[abi:ne180100]<0>(__p, "fast");
      std::string::basic_string[abi:ne180100]<0>(v52, "flat style, fast duration");
      std::string::basic_string[abi:ne180100]<0>(v53, "audiobook");
      uint64_t v39 = 0;
      uint64_t v40 = 0;
      __int16 v41 = 0;
      uint64_t v44 = &v39;
      v45.i8[0] = 0;
      uint64_t v39 = (std::string *)operator new(0x78uLL);
      uint64_t v40 = v39;
      __int16 v41 = v39 + 5;
      uint64_t v19 = 0;
      uint64_t v40 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v41, (long long *)v48, &v54, v39);
      do
      {
        if (SHIBYTE(v53[v19 + 2]) < 0) {
          operator delete((void *)v53[v19]);
        }
        v19 -= 3;
      }
      while (v19 != -15);
      uint64_t v20 = v39;
      for (uint64_t i = v40; v20 != i; ++v20)
      {
        uint64_t v22 = (void **)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>((uint64_t)&v42, (const void **)&v20->__r_.__value_.__l.__data_);
        if (&v43 != v22)
        {
          uint64_t v23 = v22;
          uint64_t v51 = 0;
          long long v49 = 0u;
          *(_OWORD *)std::string __p = 0u;
          memset(v48, 0, sizeof(v48));
          std::string::operator=((std::string *)v48, v20);
          if (__p != (void **)(v23 + 7)) {
            std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)__p, (char *)v23[7], (uint64_t)v23[8], ((char *)v23[8] - (char *)v23[7]) >> 2);
          }
          std::string::operator=((std::string *)&v48[24], v20);
          unint64_t v25 = this->u64[1];
          unint64_t v24 = this[1].u64[0];
          if (v25 >= v24)
          {
            unint64_t v27 = 0x8E38E38E38E38E39 * ((uint64_t)(v25 - this->i64[0]) >> 3);
            unint64_t v28 = v27 + 1;
            if (v27 + 1 > 0x38E38E38E38E38ELL) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v29 = 0x8E38E38E38E38E39 * ((uint64_t)(v24 - this->i64[0]) >> 3);
            if (2 * v29 > v28) {
              unint64_t v28 = 2 * v29;
            }
            if (v29 >= 0x1C71C71C71C71C7) {
              unint64_t v30 = 0x38E38E38E38E38ELL;
            }
            else {
              unint64_t v30 = v28;
            }
            long long v47 = this + 1;
            if (v30)
            {
              if (v30 > 0x38E38E38E38E38ELL) {
                std::__throw_bad_array_new_length[abi:ne180100]();
              }
              uint64_t v31 = (std::string **)operator new(72 * v30);
            }
            else
            {
              uint64_t v31 = 0;
            }
            uint64_t v44 = v31;
            v45.i64[0] = (uint64_t)&v31[9 * v27];
            v45.i64[1] = v45.i64[0];
            long long v46 = &v31[9 * v30];
            std::allocator<TTSSynthesizer::SpeakingStyle>::construct[abi:ne180100]<TTSSynthesizer::SpeakingStyle,TTSSynthesizer::SpeakingStyle const&>((std::string *)v45.i64[0], (long long *)v48);
            uint64_t v32 = v45.i64[0];
            uint64_t v26 = v45.i64[1] + 72;
            v45.i64[1] += 72;
            uint64_t v34 = this->i64[0];
            unint64_t v33 = this->u64[1];
            if (v33 == this->i64[0])
            {
              int64x2_t v37 = vdupq_n_s64(v33);
            }
            else
            {
              do
              {
                long long v35 = *(_OWORD *)(v33 - 72);
                *(void *)(v32 - 56) = *(void *)(v33 - 56);
                *(_OWORD *)(v32 - 72) = v35;
                *(void *)(v33 - 64) = 0;
                *(void *)(v33 - 56) = 0;
                *(void *)(v33 - 72) = 0;
                long long v36 = *(_OWORD *)(v33 - 48);
                *(void *)(v32 - 32) = *(void *)(v33 - 32);
                *(_OWORD *)(v32 - 48) = v36;
                *(void *)(v33 - 40) = 0;
                *(void *)(v33 - 32) = 0;
                *(void *)(v33 - 48) = 0;
                *(void *)(v32 - ++*(_DWORD *)(result + 24) = 0;
                *(void *)(v32 - 16) = 0;
                *(void *)(v32 - 8) = 0;
                *(_OWORD *)(v32 - ++*(_DWORD *)(result + 24) = *(_OWORD *)(v33 - 24);
                *(void *)(v32 - 8) = *(void *)(v33 - 8);
                v32 -= 72;
                *(void *)(v33 - ++*(_DWORD *)(result + 24) = 0;
                *(void *)(v33 - 16) = 0;
                *(void *)(v33 - 8) = 0;
                v33 -= 72;
              }
              while (v33 != v34);
              int64x2_t v37 = *this;
              uint64_t v26 = v45.i64[1];
            }
            this->i64[0] = v32;
            this->i64[1] = v26;
            int64x2_t v45 = v37;
            uint64_t v38 = (std::string **)this[1].i64[0];
            this[1].i64[0] = (uint64_t)v46;
            long long v46 = v38;
            uint64_t v44 = (std::string **)v37.i64[0];
            std::__split_buffer<TTSSynthesizer::SpeakingStyle>::~__split_buffer((uint64_t)&v44);
          }
          else
          {
            std::allocator<TTSSynthesizer::SpeakingStyle>::construct[abi:ne180100]<TTSSynthesizer::SpeakingStyle,TTSSynthesizer::SpeakingStyle const&>((std::string *)this->i64[1], (long long *)v48);
            uint64_t v26 = v25 + 72;
            this->i64[1] = v26;
          }
          this->i64[1] = v26;
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
          if (SHIBYTE(v49) < 0) {
            operator delete(*(void **)&v48[24]);
          }
          if ((v48[23] & 0x80000000) != 0) {
            operator delete(*(void **)v48);
          }
        }
      }
      *(void *)long long v48 = &v39;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v48);
      std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(v43);
    }
    if (v18) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v18);
    }
  }
}

void sub_20D466F04(_Unwind_Exception *a1, std::__shared_weak_count *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, ...)
{
  va_start(va1, a8);
  va_start(va, a8);
  std::chrono::steady_clock::time_point v10 = va_arg(va1, void **);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  uint64_t v9 = 0;
  while (1)
  {
    if (SHIBYTE(((void ***)va1)[v9 + 14]) < 0) {
      operator delete(((void ***)va1)[v9 + 12]);
    }
    v9 -= 3;
    if (v9 == -15)
    {
      std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(a7);
      if (a2) {
        std::__shared_weak_count::__release_shared[abi:ne180100](a2);
      }
      std::vector<TTSSynthesizer::SpeakingStyle>::__destroy_vector::operator()[abi:ne180100]((void ***)va1);
      _Unwind_Resume(a1);
    }
  }
}

void std::vector<TTSSynthesizer::SpeakingStyle>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  unsigned int v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 72;
        std::allocator<TTSSynthesizer::SpeakingStyle>::destroy[abi:ne180100](v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<TTSSynthesizer::SpeakingStyle>::destroy[abi:ne180100](uint64_t a1)
{
  unsigned int v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0)
  {
    BOOL v3 = *(void **)a1;
    operator delete(v3);
  }
}

void *std::allocator<TTSSynthesizer::SpeakingStyle>::construct[abi:ne180100]<TTSSynthesizer::SpeakingStyle,TTSSynthesizer::SpeakingStyle const&>(std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v5 = *(long long *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((void *)a2 + 5);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v5;
  }
  this[2].__r_.__value_.__r.__words[0] = 0;
  this[2].__r_.__value_.__l.__size_ = 0;
  this[2].__r_.__value_.__r.__words[2] = 0;
  return std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(this[2].__r_.__value_.__r.__words, *((const void **)a2 + 6), *((void *)a2 + 7), (uint64_t)(*((void *)a2 + 7) - *((void *)a2 + 6)) >> 2);
}

void sub_20D467174(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void TTSSynthesizer::SpeakingStyle::~SpeakingStyle(TTSSynthesizer::SpeakingStyle *this)
{
  unsigned int v2 = (void *)*((void *)this + 6);
  if (v2)
  {
    *((void *)this + 7) = v2;
    operator delete(v2);
  }
  if (*((char *)this + 47) < 0) {
    operator delete(*((void **)this + 3));
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*(void **)this);
  }
}

uint64_t std::__split_buffer<TTSSynthesizer::SpeakingStyle>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 72;
    std::allocator<TTSSynthesizer::SpeakingStyle>::destroy[abi:ne180100](i - 72);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void TTSSynthesizer::TTSSynthesizerInternal::synthesize_text(uint64_t a1, uint64_t a2)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  kdebug_trace();
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  long long v4 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    Censor::global_plaintext(&v36, a2);
    long long v5 = (v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
       ? &v36
       : (std::string *)v36.__r_.__value_.__r.__words[0];
    int buf = 136315138;
    *(void *)double buf_4 = v5;
    _os_log_impl(&dword_20CD80000, v4, OS_LOG_TYPE_DEFAULT, "Start synthesizing text: '%s'", (uint8_t *)&buf, 0xCu);
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v36.__r_.__value_.__l.__data_);
    }
  }
  Censor::global_plaintext(&v36, a2);
  if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v7 = &v36;
  }
  else {
    uint64_t v7 = (std::string *)v36.__r_.__value_.__r.__words[0];
  }
  Diagnostics::log(5, "Start synthesizing text: '%s'", v6, v7);
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v36.__r_.__value_.__l.__data_);
  }
  uint64_t v8 = *(void *)(a1 + 240);
  if (*(unsigned char *)(a1 + 680))
  {
    uint64_t v9 = *(void *)v8;
    std::chrono::steady_clock::time_point v10 = *(std::__shared_weak_count **)(v8 + 8);
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v17 = v10;
    std::allocate_shared[abi:ne180100]<SharedObjectPool,std::allocator<SharedObjectPool>,std::shared_ptr<Environment> &,void>(&v36, v9, v10);
    uint64_t v8 = v36.__r_.__value_.__r.__words[0];
    SharedObjectPool::get_if<TTSSynthesizerEventBusInternal>(&v31, *(void *)(a1 + 240));
    SharedObjectPool::inject<TTSSynthesizerEventBusInternal>(&v33, v8, &v31);
    if (*((void *)&v33 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v33 + 1));
    }
    if (v32) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v32);
    }
    SharedObjectPool::get<VoiceConfig>(&v29, *(long long ***)(a1 + 240));
    std::recursive_mutex::lock((std::recursive_mutex *)(v8 + 56));
    Agglomerate::set<std::shared_ptr<VoiceConfig>>(v8 + 32, &v29);
    std::chrono::steady_clock::time_point v11 = v30;
    unint64_t v29 = 0;
    unint64_t v30 = 0;
    std::recursive_mutex::unlock((std::recursive_mutex *)(v8 + 56));
    if (v11)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
      if (v30) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v30);
      }
    }
    uint64_t v13 = *(void *)(a1 + 256);
    uint64_t v12 = *(void *)(a1 + 264);
    if (v12) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 16), 1uLL, memory_order_relaxed);
    }
    uint64_t v14 = *(std::__shared_weak_count **)(v8 + 24);
    *(void *)(v8 + 16) = v13;
    *(void *)(v8 + ++*(_DWORD *)(result + 24) = v12;
    if (v14) {
      std::__shared_weak_count::__release_weak(v14);
    }
    SharedObjectPool::get<SynthesizerConfig>(&v27, *(void *)(a1 + 240));
    std::recursive_mutex::lock((std::recursive_mutex *)(v8 + 56));
    Agglomerate::set<std::shared_ptr<SynthesizerConfig>>(v8 + 32, &v27);
    uint64_t v15 = v28;
    unint64_t v27 = 0;
    unint64_t v28 = 0;
    std::recursive_mutex::unlock((std::recursive_mutex *)(v8 + 56));
    if (v15)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v15);
      if (v28) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v28);
      }
    }
    SharedObjectPool::get_if<EspressoWaveRNNANEStatus>(&v24, *(void *)(a1 + 240));
    SharedObjectPool::inject<EspressoWaveRNNANEStatus>(&v26, v8, &v24);
    if (*((void *)&v26 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v26 + 1));
    }
    if (v25) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v25);
    }
    SharedObjectPool::get_if<FrontendEnvironment>(&v21, *(void *)(a1 + 240));
    SharedObjectPool::inject<FrontendEnvironment>(&v23, v8, &v21);
    if (*((void *)&v23 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v23 + 1));
    }
    if (v22) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v22);
    }
    SharedObjectPool::get_if<TTSSynthesizer::VoiceDescription>(&v18, *(void *)(a1 + 240));
    SharedObjectPool::inject<TTSSynthesizer::VoiceDescription>(&v20, v8, &v18);
    if (*((void *)&v20 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v20 + 1));
    }
    if (v19) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v19);
    }
    if (v17) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v17);
    }
  }
  else
  {
    uint64_t v16 = *(void *)(a1 + 248);
    if (v16) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
    }
  }
  GryphonDebugging::latest_pool_ptr = v8;
  operator new();
}

void sub_20D468058(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13)
{
  std::default_delete<TTSSynthesizerCallbackResult>::operator()[abi:ne180100](v13);
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__value_func<int ()(InternalCallbackContainer)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + ++*(_DWORD *)(result + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + ++*(_DWORD *)(result + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + ++*(_DWORD *)(result + 24) = 0;
  }
  return a1;
}

void TTSSynthesizer::TTSSynthesizerInternal::normalize(std::string *this, std::string::value_type *a2)
{
  unsigned int v2 = (const std::string::value_type **)a2;
  if ((a2[23] & 0x80000000) == 0)
  {
    if (!a2[23])
    {
      *this = *(std::string *)a2;
      return;
    }
    unint64_t v4 = *((void *)a2 + 1);
    goto LABEL_5;
  }
  unint64_t v4 = *((void *)a2 + 1);
  if (v4)
  {
LABEL_5:
    if (a2[23] >= 0)
    {
      unint64_t v5 = a2[23];
    }
    else
    {
      a2 = *(std::string::value_type **)a2;
      unint64_t v5 = v4;
    }
    UTFString::to_utf16(&__p, a2, v5);
    int v14 = 0;
    unorm2_getNFCInstance();
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v6 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      int v6 = __p.__r_.__value_.__r.__words[1];
    }
    if (v6 <= 1) {
      unint64_t v7 = 1;
    }
    else {
      unint64_t v7 = v6;
    }
    std::basic_string<char16_t>::basic_string[abi:ne180100](&v13, v7);
    while (1)
    {
      int v8 = unorm2_normalize();
      if (v14 != 15) {
        break;
      }
      LODWORD(v7) = 2 * v7;
      std::basic_string<char16_t>::resize(&v13, (int)v7, v9);
    }
    if (v14 <= 0)
    {
      std::basic_string<char16_t>::resize(&v13, v8, v9);
      if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::chrono::steady_clock::time_point v10 = &v13;
      }
      else {
        std::chrono::steady_clock::time_point v10 = (std::basic_string<char16_t> *)v13.__r_.__value_.__r.__words[0];
      }
      if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int32_t v11 = HIBYTE(v13.__r_.__value_.__r.__words[2]);
      }
      else {
        int32_t v11 = v13.__r_.__value_.__r.__words[1];
      }
      UTFString::to_utf8(this, (const UChar *)v10, v11);
    }
    else if (*((char *)v2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(this, *v2, (std::string::size_type)v2[1]);
    }
    else
    {
      *(_OWORD *)&this->__r_.__value_.__l.__data_ = *(_OWORD *)v2;
      this->__r_.__value_.__r.__words[2] = (std::string::size_type)v2[2];
    }
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v13.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    return;
  }
  uint64_t v12 = *(const std::string::value_type **)a2;
  std::string::__init_copy_ctor_external(this, v12, 0);
}

void sub_20D468544(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

void TTSSynthesizer::TTSSynthesizerInternal::preprocess_for_vendor_voice(std::string *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  __int16 v14 = 1;
  ve_ttsGetLanguageList(*(void *)(a2 + 208), *(void *)(a2 + 216), __src, &v14, a5, a6, a7, a8);
  memcpy(__dst, __src, sizeof(__dst));
  std::string::basic_string[abi:ne180100]<0>(__p, &__dst[128]);
  UTFRegex::UTFRegex((UTFRegex *)v11, *(const UTFRegex **)(a2 + 432));
  SiriTTS::preprocess_for_vendor_voice(a1, (const void **)__p, (UTFRegex *)v11, a3, (void **)(a2 + 456));
  UTFRegex::~UTFRegex((UTFRegex *)v11);
  if (v13 < 0) {
    operator delete(__p[0]);
  }
}

void sub_20D468668(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t std::default_delete<TTSSynthesizerCallbackResult>::operator()[abi:ne180100](uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    unsigned int v2 = *(std::__shared_weak_count **)(result + 176);
    if (v2) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v2);
    }
    std::__function::__value_func<int ()(InternalCallbackContainer)>::~__value_func[abi:ne180100]((void *)(v1 + 136));
    std::__function::__value_func<int ()(TTSSynthesizer::CallbackMessage)>::~__value_func[abi:ne180100]((void *)(v1 + 104));
    uint64_t v3 = *(void **)(v1 + 80);
    if (v3)
    {
      *(void *)(v1 + 88) = v3;
      operator delete(v3);
    }
    unint64_t v4 = *(void **)(v1 + 56);
    if (v4)
    {
      *(void *)(v1 + 64) = v4;
      operator delete(v4);
    }
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
    JUMPOUT(0x2105595E0);
  }
  return result;
}

void *std::basic_string<char16_t>::basic_string[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v3 = a1;
  if (a2 >= 0xB)
  {
    uint64_t v4 = (a2 & 0xFFFFFFFFFFFFFFFCLL) + 4;
    if ((a2 | 3) != 0xB) {
      uint64_t v4 = a2 | 3;
    }
    a1 = std::__allocate_at_least[abi:ne180100]<std::allocator<char16_t>>(v4 + 1);
    v3[1] = a2;
    v3[2] = v5 | 0x8000000000000000;
    *uint64_t v3 = a1;
  }
  else
  {
    *((unsigned char *)a1 + 23) = a2;
    if (!a2) {
      goto LABEL_10;
    }
  }
  uint64_t v6 = 0;
  do
    *((_WORD *)a1 + v6++) = 0;
  while (a2 != v6);
LABEL_10:
  *((_WORD *)a1 + a2) = 0;
  return v3;
}

uint64_t ve_synthesis_callback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v5 = *(_DWORD *)a4;
  if (*(int *)a4 <= 7)
  {
    if (v5 != 1)
    {
      if (v5 == 2)
      {
        uint64_t v6 = *(void *)(a3 + 128);
        if (v6)
        {
          if (*(void *)(a3 + 184))
          {
            std::function<int ()(TTSSynthesizer::CallbackMessage)>::operator()(v6, 2);
            uint64_t v6 = *(void *)(a3 + 128);
          }
          std::function<int ()(TTSSynthesizer::CallbackMessage)>::operator()(v6, 1);
        }
      }
      goto LABEL_119;
    }
    uint64_t v56 = *(void *)(a3 + 128);
    if (!v56) {
      goto LABEL_119;
    }
    int v57 = 0;
LABEL_107:
    *(void *)(a3 + 184) = (int)std::function<int ()(TTSSynthesizer::CallbackMessage)>::operator()(v56, v57);
    goto LABEL_119;
  }
  uint64_t v7 = *(void *)(a4 + 8);
  if (v5 == 8)
  {
    *(void *)(v7 + 16) = *(void *)(a3 + 56);
    *(void *)(v7 + 8) = *(void *)(a3 + 48);
    uint64_t v58 = *(void *)(a3 + 80);
    *(void *)(v7 + 32) = v58;
    *(void *)(v7 + ++*(_DWORD *)(result + 24) = *(void *)(a3 + 88) - v58;
    uint64_t v56 = *(void *)(a3 + 128);
    if (!v56 || !*(unsigned char *)(a3 + 225)) {
      goto LABEL_119;
    }
    int v57 = 3;
    goto LABEL_107;
  }
  if (v5 != 16) {
    goto LABEL_119;
  }
  if (*(unsigned char *)(a3 + 225))
  {
    uint64_t v8 = *(void *)(a3 + 32);
    if (v8) {
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v8, *(char **)(v8 + 8), *(char **)(v7 + 16), (char *)(*(void *)(v7 + 16) + *(void *)(v7 + 8)), *(void *)(v7 + 8));
    }
  }
  uint64_t v9 = *(void *)(a3 + 128);
  if (v9 && *(unsigned char *)(a3 + 225)) {
    *(void *)(a3 + 184) = (int)std::function<int ()(TTSSynthesizer::CallbackMessage)>::operator()(v9, 4);
  }
  uint64_t v72 = 0;
  std::string v73 = 0;
  unint64_t v74 = 0;
  if (*(void *)(v7 + 24))
  {
    uint64_t v10 = 0;
    unsigned int v11 = 0;
    uint64_t v67 = v7;
    uint64_t v12 = (uint64_t *)(a3 + 192);
    while (1)
    {
      uint64_t v13 = *(void *)(v7 + 32);
      v68[1] = 0;
      long long v69 = 0uLL;
      HIBYTE(v71) = 1;
      LOWORD(__p) = 0;
      int v14 = *(_DWORD *)(v13 + 56 * v10);
      if (v14 == 16) {
        break;
      }
      if (v14 == 2)
      {
        LODWORD(v68[0]) = 0;
        goto LABEL_26;
      }
LABEL_88:
      uint64_t v10 = ++v11;
      if (*(void *)(v7 + 24) <= (unint64_t)v11) {
        goto LABEL_108;
      }
    }
    uint64_t v15 = *(const char **)(v13 + 56 * v10 + 48);
    if (!strcmp(v15, "MARKER_PROMPT"))
    {
      LODWORD(v68[0]) = 2;
    }
    else
    {
      LODWORD(v68[0]) = 1;
      if (v15) {
        uint64_t v16 = (char *)v15;
      }
      else {
        uint64_t v16 = &byte_20D5A22AE;
      }
      MEMORY[0x210558E70](&__p, v16);
      if (LODWORD(v68[0]) != 2)
      {
LABEL_26:
        if (*(unsigned char *)(a3 + 226))
        {
LABEL_86:
          if (SHIBYTE(v71) < 0) {
            operator delete((void *)__p);
          }
          goto LABEL_88;
        }
      }
    }
    uint64_t v17 = v13 + 56 * v10;
    unint64_t v18 = *(void *)(v17 + 16);
    int v19 = *(_DWORD *)(a3 + 216);
    int v20 = *(_DWORD *)(a3 + 200);
    if (v20 != v19)
    {
      unint64_t v21 = *(void *)(v17 + 8);
      if (v21 > v20)
      {
        uint64_t v22 = *v12;
        do
        {
          unsigned int v23 = *(unsigned __int8 *)(v22 + v20);
          unsigned int v24 = (v23 + 62);
          if (v23 <= 0xEF) {
            int v25 = 2;
          }
          else {
            int v25 = 3;
          }
          if (v23 <= 0xDF) {
            int v26 = v25;
          }
          else {
            int v26 = v25 + 1;
          }
          if (v24 >= 0x33) {
            int v26 = 1;
          }
          v20 += v26;
          *(_DWORD *)(a3 + 200) = v20;
        }
        while (v20 != v19 && v21 > v20);
      }
    }
    long long v75 = *(_OWORD *)v12;
    int v28 = DWORD2(v75);
    if (v18 > DWORD2(v75) - v20 && DWORD2(v75) != v19)
    {
      uint64_t v30 = v75;
      do
      {
        UChar32 v31 = UTFString::codepoint_iterator<std::string>::operator*((uint64_t *)&v75);
        if (u_hasBinaryProperty(v31, UCHAR_IDEOGRAPHIC)
          || (UTFString::codepoint_iterator<std::string>::operator*((uint64_t *)&v75), uscript_hasScript())
          || (UTFString::codepoint_iterator<std::string>::operator*((uint64_t *)&v75), uscript_hasScript())
          || (UTFString::codepoint_iterator<std::string>::operator*((uint64_t *)&v75), uscript_hasScript())
          || (UTFString::codepoint_iterator<std::string>::operator*((uint64_t *)&v75), uscript_hasScript()))
        {
          *(unsigned char *)(a3 + 2++*(_DWORD *)(result + 24) = 1;
        }
        unsigned int v32 = *(unsigned __int8 *)(v30 + v28);
        unsigned int v33 = (v32 + 62);
        if (v32 <= 0xEF) {
          int v34 = 2;
        }
        else {
          int v34 = 3;
        }
        if (v32 <= 0xDF) {
          int v35 = v34;
        }
        else {
          int v35 = v34 + 1;
        }
        if (v33 >= 0x33) {
          int v35 = 1;
        }
        v28 += v35;
        DWORD2(v75) = v28;
        int v20 = *(_DWORD *)(a3 + 200);
      }
      while (v18 > v28 - v20 && v28 != *(_DWORD *)(a3 + 216));
    }
    if (*(unsigned char *)(a3 + 224))
    {
      std::string v36 = (void *)v20;
      v68[1] = (void *)v20;
      *(_OWORD *)uint64_t v12 = v75;
      uint64_t v7 = v67;
    }
    else
    {
      uint64_t v7 = v67;
      if (v20 == *(_DWORD *)(a3 + 216))
      {
LABEL_78:
        std::string v36 = (void *)v20;
        v68[1] = (void *)v20;
      }
      else
      {
        while (1)
        {
          UChar32 v37 = UTFString::codepoint_iterator<std::string>::operator*((uint64_t *)(a3 + 192));
          int isUWhiteSpace = u_isUWhiteSpace(v37);
          std::string v36 = (void *)*(int *)(a3 + 200);
          int v20 = *(_DWORD *)(a3 + 216);
          if (!isUWhiteSpace) {
            break;
          }
          unsigned int v39 = *((unsigned __int8 *)v36 + *(void *)(a3 + 192));
          unsigned int v40 = (v39 + 62);
          if (v39 <= 0xEF) {
            int v41 = 2;
          }
          else {
            int v41 = 3;
          }
          if (v39 <= 0xDF) {
            int v42 = v41;
          }
          else {
            int v42 = v41 + 1;
          }
          if (v40 >= 0x33) {
            int v42 = 1;
          }
          int v43 = v42 + v36;
          *(_DWORD *)(a3 + 200) = v43;
          if (v43 == v20) {
            goto LABEL_78;
          }
        }
        v68[1] = (void *)*(int *)(a3 + 200);
        if (v36 != v20)
        {
          do
          {
            UChar32 v49 = UTFString::codepoint_iterator<std::string>::operator*((uint64_t *)(a3 + 192));
            if (u_isUWhiteSpace(v49)) {
              break;
            }
            uint64_t v50 = *(int *)(a3 + 200);
            unsigned int v51 = *(unsigned __int8 *)(*(void *)(a3 + 192) + v50);
            unsigned int v52 = (v51 + 62);
            if (v51 <= 0xEF) {
              int v53 = 2;
            }
            else {
              int v53 = 3;
            }
            if (v51 <= 0xDF) {
              int v54 = v53;
            }
            else {
              int v54 = v53 + 1;
            }
            if (v52 >= 0x33) {
              int v54 = 1;
            }
            int v55 = v54 + v50;
            *(_DWORD *)(a3 + 200) = v55;
          }
          while (v55 != *(_DWORD *)(a3 + 216));
          std::string v36 = v68[1];
        }
      }
    }
    *(void *)&long long v69 = *(int *)(a3 + 200) - (void)v36;
    *((void *)&v69 + 1) = *(void *)(v13 + 56 * v10 + 24);
    uint64_t v44 = v73;
    if ((unint64_t)v73 >= v74)
    {
      long long v48 = (long long *)std::vector<TTSSynthesizer::Marker>::__push_back_slow_path<TTSSynthesizer::Marker const&>(&v72, (uint64_t)v68);
    }
    else
    {
      long long v45 = v69;
      long long *v73 = *(_OWORD *)v68;
      v44[1] = v45;
      long long v46 = (std::string *)(v44 + 2);
      if (SHIBYTE(v71) < 0)
      {
        std::string::__init_copy_ctor_external(v46, (const std::string::value_type *)__p, *((std::string::size_type *)&__p + 1));
      }
      else
      {
        long long v47 = __p;
        *((void *)v44 + 6) = v71;
        *(_OWORD *)&v46->__r_.__value_.__l.__data_ = v47;
      }
      long long v48 = (long long *)((char *)v44 + 56);
    }
    std::string v73 = v48;
    goto LABEL_86;
  }
LABEL_108:
  if (*(void *)(a3 + 128))
  {
    int v59 = *(uint64_t **)(a3 + 40);
    if (v59)
    {
      std::vector<TTSSynthesizer::Marker>::__insert_with_size[abi:ne180100]<std::__wrap_iter<TTSSynthesizer::Marker*>,std::__wrap_iter<TTSSynthesizer::Marker*>>(v59, v59[1], v72, v73, 0x6DB6DB6DB6DB6DB7 * (((uint64_t)v73 - v72) >> 3));
      *(void *)(a3 + 184) = (int)std::function<int ()(TTSSynthesizer::CallbackMessage)>::operator()(*(void *)(a3 + 128), 5);
    }
  }
  int v60 = *(uint64_t ***)(a3 + 168);
  if (v60)
  {
    Observable::emit(v60, (char *)TTSSynthesizerEvent::MarkersGenerated, &v72);
    uint64_t v62 = *(void *)(v7 + 8);
    uint64_t v61 = *(__int16 **)(v7 + 16);
    v68[0] = 0;
    v68[1] = 0;
    *(void *)&long long v69 = 0;
    if ((unint64_t)v62 >= 2)
    {
      std::vector<int>::__vallocate[abi:ne180100](v68, v62 >> 1);
      uint64_t v63 = (float *)v68[1];
      uint64_t v64 = 2 * ((unint64_t)v62 >> 1);
      do
      {
        int v65 = *v61++;
        *v63++ = (float)v65;
        v64 -= 2;
      }
      while (v64);
      v68[1] = v63;
    }
    Observable::emit(*(uint64_t ***)(a3 + 168), (char *)TTSSynthesizerEvent::AudioGenerated, v68);
    if (v68[0])
    {
      v68[1] = v68[0];
      operator delete(v68[0]);
    }
  }
  v68[0] = &v72;
  std::vector<TTSSynthesizer::Marker>::__destroy_vector::operator()[abi:ne180100]((void ***)v68);
LABEL_119:
  if (*(void *)(a3 + 184)) {
    return 2147485703;
  }
  else {
    return 0;
  }
}

void sub_20D468D7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char *__p, char *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22)
{
  if (__p)
  {
    a12 = __p;
    operator delete(__p);
  }
  long long __p = &a21;
  std::vector<TTSSynthesizer::Marker>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t std::vector<TTSSynthesizer::Marker>::__push_back_slow_path<TTSSynthesizer::Marker const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 3);
  unint64_t v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) > 0x492492492492492) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v6 = a1 + 2;
  if (0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 3) > v3) {
    unint64_t v3 = 0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 3);
  }
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a1[2] - *a1) >> 3)) >= 0x249249249249249) {
    unint64_t v7 = 0x492492492492492;
  }
  else {
    unint64_t v7 = v3;
  }
  unint64_t v18 = v6;
  if (v7) {
    unint64_t v7 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<MarkerRecord>>(v7);
  }
  else {
    uint64_t v8 = 0;
  }
  unint64_t v9 = v7 + 56 * v2;
  v15[0] = v7;
  v15[1] = v9;
  unint64_t v16 = v9;
  unint64_t v17 = v7 + 56 * v8;
  long long v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)unint64_t v9 = *(_OWORD *)a2;
  *(_OWORD *)(v9 + 16) = v10;
  unsigned int v11 = (std::string *)(v9 + 32);
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)(a2 + 32), *(void *)(a2 + 40));
    unint64_t v9 = v16;
  }
  else
  {
    long long v12 = *(_OWORD *)(a2 + 32);
    *(void *)(v9 + 48) = *(void *)(a2 + 48);
    *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v12;
  }
  unint64_t v16 = v9 + 56;
  std::vector<TTSSynthesizer::Marker>::__swap_out_circular_buffer(a1, v15);
  uint64_t v13 = a1[1];
  std::__split_buffer<TTSSynthesizer::Marker>::~__split_buffer((uint64_t)v15);
  return v13;
}

void sub_20D468F14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<TTSSynthesizer::Marker>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<TTSSynthesizer::Marker>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<TTSSynthesizer::Marker>,std::reverse_iterator<TTSSynthesizer::Marker*>,std::reverse_iterator<TTSSynthesizer::Marker*>,std::reverse_iterator<TTSSynthesizer::Marker*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = result;
  uint64_t v5 = *a1;
  *a1 = result;
  a2[1] = v5;
  uint64_t v6 = a1[1];
  a1[1] = a2[2];
  a2[2] = v6;
  uint64_t v7 = a1[2];
  a1[2] = a2[3];
  a2[3] = v7;
  *a2 = a2[1];
  return result;
}

void Agglomerate::ItemHolder<std::shared_ptr<std::function<int ()(InternalCallbackContainer)>>>::~ItemHolder(void *a1)
{
  *a1 = off_26C2067B8;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  JUMPOUT(0x2105595E0);
}

void *Agglomerate::ItemHolder<std::shared_ptr<std::function<int ()(InternalCallbackContainer)>>>::~ItemHolder(void *a1)
{
  *a1 = off_26C2067B8;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *std::__shared_ptr_emplace<std::function<int ()(InternalCallbackContainer)>>::__on_zero_shared(uint64_t a1)
{
  return std::__function::__value_func<int ()(InternalCallbackContainer)>::~__value_func[abi:ne180100]((void *)(a1 + 24));
}

void std::__shared_ptr_emplace<std::function<int ()(InternalCallbackContainer)>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C219C08;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<std::function<int ()(InternalCallbackContainer)>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C219C08;
  std::__shared_weak_count::~__shared_weak_count(this);
}

char **std::__function::__func<TTSSynthesizer::TTSSynthesizerInternal::synthesize_text(std::string const&)::$_1,std::allocator<TTSSynthesizer::TTSSynthesizerInternal::synthesize_text(std::string const&)::$_1>,int ()(TTSSynthesizer::CallbackMessage)>::target_type()
{
}

uint64_t std::__function::__func<TTSSynthesizer::TTSSynthesizerInternal::synthesize_text(std::string const&)::$_1,std::allocator<TTSSynthesizer::TTSSynthesizerInternal::synthesize_text(std::string const&)::$_1>,int ()(TTSSynthesizer::CallbackMessage)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<TTSSynthesizer::TTSSynthesizerInternal::synthesize_text(std::string const&)::$_1,std::allocator<TTSSynthesizer::TTSSynthesizerInternal::synthesize_text(std::string const&)::$_1>,int ()(TTSSynthesizer::CallbackMessage)>::operator()()
{
  return 0;
}

void std::__function::__func<TTSSynthesizer::TTSSynthesizerInternal::synthesize_text(std::string const&)::$_1,std::allocator<TTSSynthesizer::TTSSynthesizerInternal::synthesize_text(std::string const&)::$_1>,int ()(TTSSynthesizer::CallbackMessage)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &off_26C2125A0;
}

void *std::__function::__func<TTSSynthesizer::TTSSynthesizerInternal::synthesize_text(std::string const&)::$_1,std::allocator<TTSSynthesizer::TTSSynthesizerInternal::synthesize_text(std::string const&)::$_1>,int ()(TTSSynthesizer::CallbackMessage)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &off_26C2125A0;
  return result;
}

void std::__function::__func<TTSSynthesizer::TTSSynthesizerInternal::synthesize_text(std::string const&)::$_1,std::allocator<TTSSynthesizer::TTSSynthesizerInternal::synthesize_text(std::string const&)::$_1>,int ()(TTSSynthesizer::CallbackMessage)>::~__func()
{
}

char **std::__function::__func<TTSSynthesizer::TTSSynthesizerInternal::synthesize_text(std::string const&)::$_0,std::allocator<TTSSynthesizer::TTSSynthesizerInternal::synthesize_text(std::string const&)::$_0>,int ()(InternalCallbackContainer)>::target_type()
{
}

uint64_t std::__function::__func<TTSSynthesizer::TTSSynthesizerInternal::synthesize_text(std::string const&)::$_0,std::allocator<TTSSynthesizer::TTSSynthesizerInternal::synthesize_text(std::string const&)::$_0>,int ()(InternalCallbackContainer)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<TTSSynthesizer::TTSSynthesizerInternal::synthesize_text(std::string const&)::$_0,std::allocator<TTSSynthesizer::TTSSynthesizerInternal::synthesize_text(std::string const&)::$_0>,int ()(InternalCallbackContainer)>::operator()()
{
  return 0;
}

void std::__function::__func<TTSSynthesizer::TTSSynthesizerInternal::synthesize_text(std::string const&)::$_0,std::allocator<TTSSynthesizer::TTSSynthesizerInternal::synthesize_text(std::string const&)::$_0>,int ()(InternalCallbackContainer)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &off_26C212548;
}

void *std::__function::__func<TTSSynthesizer::TTSSynthesizerInternal::synthesize_text(std::string const&)::$_0,std::allocator<TTSSynthesizer::TTSSynthesizerInternal::synthesize_text(std::string const&)::$_0>,int ()(InternalCallbackContainer)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &off_26C212548;
  return result;
}

void std::__function::__func<TTSSynthesizer::TTSSynthesizerInternal::synthesize_text(std::string const&)::$_0,std::allocator<TTSSynthesizer::TTSSynthesizerInternal::synthesize_text(std::string const&)::$_0>,int ()(InternalCallbackContainer)>::~__func()
{
}

void TTSSynthesizer::TTSSynthesizerInternal::load_voice_resource(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)&v15[9] = *MEMORY[0x263EF8340];
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  uint64_t v8 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    if (*(char *)(a3 + 23) >= 0) {
      uint64_t v10 = a3;
    }
    else {
      uint64_t v10 = *(void *)a3;
    }
    *(_DWORD *)int buf = 136315138;
    *(void *)uint64_t v15 = v10;
    _os_log_impl(&dword_20CD80000, v8, OS_LOG_TYPE_INFO, "Loading resource: '%s'", buf, 0xCu);
  }
  if (*(char *)(a3 + 23) >= 0) {
    uint64_t v11 = a3;
  }
  else {
    uint64_t v11 = *(void *)a3;
  }
  Diagnostics::log(6, "Loading resource: '%s'", v9, v11);
  MemoryMap::MemoryMap((std::__shared_weak_count **)buf, a3);
  uint64_t v12 = *(void *)(a2 + 272);
  if (v12) {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v12 + 80))(v12, a3, a4);
  }
  uint64_t v13 = *(void *)&v15[5];
  TTSSynthesizer::TTSSynthesizerInternal::load_voice_resource(a1, a2, *(char **)&v15[3], &v13, a4);
  if (*(void *)&v15[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v15[1]);
  }
}

void sub_20D4693F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, long long buf)
{
  if (a2)
  {
    if (*((void *)&buf + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&buf + 1));
    }
    __cxa_begin_catch(exception_object);
    if (*(void *)(v13 + 272) != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    unint64_t v16 = *(NSObject **)(v14 + 264);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      if (*((char *)v12 + 23) >= 0) {
        unint64_t v18 = v12;
      }
      else {
        unint64_t v18 = (uint64_t *)*v12;
      }
      LODWORD(buf) = 136315138;
      *(void *)((char *)&buf + 4) = v18;
      _os_log_impl(&dword_20CD80000, v16, OS_LOG_TYPE_ERROR, "Error mmap'ing resource path: %s", (uint8_t *)&buf, 0xCu);
    }
    Diagnostics::log(3, "Error mmap'ing resource path: %s", v17);
    __cxa_end_catch();
    void *v11 = 0;
    v11[1] = 0;
    JUMPOUT(0x20D4693A8);
  }
  _Unwind_Resume(exception_object);
}

void TTSSynthesizer::TTSSynthesizerInternal::load_voice_resource(uint64_t a1, uint64_t a2, char *a3, void *a4, uint64_t a5)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  uint64_t v9 = *(void *)(a2 + 272);
  if (v9)
  {
    uint64_t v10 = *(void (**)(void))(*(void *)v9 + 56);
    v10();
    return;
  }
  if (!*(unsigned char *)(a2 + 512))
  {
    PersistentModuleFactory::get_persistent_module<NashvilleFEPersistentModule>(buf, *(void **)(*(void *)(a2 + 256) + 24));
    NashvilleFEPersistentModule::load_voice_resource((std::__shared_weak_count **)a1, *(void **)buf, a3, a4, a5);
    uint64_t v22 = *(std::__shared_weak_count **)&buf[8];
    if (!*(void *)&buf[8]) {
      return;
    }
    goto LABEL_20;
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  uint64_t v12 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)int buf = 134217984;
    *(void *)&uint8_t buf[4] = a3;
    _os_log_impl(&dword_20CD80000, v12, OS_LOG_TYPE_INFO, "Loading resource from memory: %p", buf, 0xCu);
  }
  Diagnostics::log(6, "Loading resource from memory: %p", v13, a3);
  unint64_t v16 = operator new(0x30uLL);
  v16[1] = 0;
  v16[2] = 0;
  *unint64_t v16 = off_26C219498;
  v16[4] = 0;
  unint64_t v17 = v16 + 3;
  v16[5] = 0;
  void v16[3] = &off_26C211250;
  if (*(char *)(a5 + 23) >= 0) {
    unint64_t v18 = (const char *)a5;
  }
  else {
    unint64_t v18 = *(const char **)a5;
  }
  uint64_t v19 = ve_ttsResourceLoad(*(void *)(a2 + 224), *(void *)(a2 + 232), v18, *(unsigned int *)a4, a3, (uint64_t **)&v25, v14, v15);
  *((_OWORD *)v16 + 2) = v25;
  if (v19)
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    int v20 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 134218240;
      *(void *)&uint8_t buf[4] = a3;
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&unsigned char buf[14] = v19;
      _os_log_impl(&dword_20CD80000, v20, OS_LOG_TYPE_ERROR, "Error (ve_ttsResourceLoad %p) : 0x%x", buf, 0x12u);
    }
    Diagnostics::log(3, "Error (ve_ttsResourceLoad %p) : 0x%x", v21, a3, v19);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    uint64_t v22 = (std::__shared_weak_count *)v16;
LABEL_20:
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
    return;
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  unsigned int v23 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)int buf = 134218240;
    *(void *)&uint8_t buf[4] = v16 + 3;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(void *)&unsigned char buf[14] = a3;
    _os_log_impl(&dword_20CD80000, v23, OS_LOG_TYPE_DEFAULT, "Resource %p loaded: '%p'", buf, 0x16u);
  }
  Diagnostics::log(5, "Resource %p loaded: '%p'", v24, v17, a3);
  *(void *)a1 = v17;
  *(void *)(a1 + 8) = v16;
}

void sub_20D469854(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  _Unwind_Resume(exception_object);
}

void TTSSynthesizer::TTSSynthesizer(TTSSynthesizer *this)
{
}

{
  _ZNSt3__115allocate_sharedB8ne180100IN14TTSSynthesizer22TTSSynthesizerInternalENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(this);
}

double _ZNSt3__115allocate_sharedB8ne180100IN14TTSSynthesizer22TTSSynthesizerInternalENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(void *a1)
{
  uint64_t v2 = (char *)operator new(0x2C8uLL);
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *(void *)uint64_t v2 = off_26C219038;
  *((_WORD *)v2 + 12) = 0;
  *((void *)v2 + 31) = 0;
  *((_DWORD *)v2 + 64) = 0;
  *((_OWORD *)v2 + 2) = 0u;
  *((_OWORD *)v2 + 3) = 0u;
  *((_OWORD *)v2 + 4) = 0u;
  *((_OWORD *)v2 + 5) = 0u;
  *((_OWORD *)v2 + 6) = 0u;
  *((_OWORD *)v2 + 7) = 0u;
  *((_OWORD *)v2 + 8) = 0u;
  *((_OWORD *)v2 + 9) = 0u;
  *((_DWORD *)v2 + 40) = 0;
  *(_OWORD *)(v2 + 168) = 0u;
  *(_OWORD *)(v2 + 184) = 0u;
  *(_OWORD *)(v2 + 200) = 0u;
  *(_OWORD *)(v2 + 216) = 0u;
  *(_OWORD *)(v2 + 228) = 0u;
  *(_OWORD *)(v2 + 296) = 0u;
  *(_OWORD *)(v2 + 312) = 0u;
  *(_OWORD *)(v2 + 280) = 0u;
  *(_OWORD *)(v2 + 264) = 0u;
  *(_OWORD *)(v2 + 3++*(_DWORD *)(result + 24) = 0u;
  std::string::basic_string[abi:ne180100]<0>((void *)v2 + 43, &byte_20D5A22AE);
  std::string::basic_string[abi:ne180100]<0>((void *)v2 + 46, &byte_20D5A22AE);
  *(_OWORD *)(v2 + 408) = 0u;
  *(_OWORD *)(v2 + 4++*(_DWORD *)(result + 24) = 0u;
  *(_OWORD *)(v2 + 392) = 0u;
  *(_OWORD *)(v2 + 433) = 0u;
  UTFRegex::UTFRegex((UTFRegex *)(v2 + 456), "\\e\\\\(.*?)(?:=(.*?))?(?:\\\\|\\z)|(\\e\\/\\+)|\\[\\[(.*?)\\]\\]");
  *((void *)v2 + 61) = 0;
  *((void *)v2 + 62) = 0;
  *((void *)v2 + 60) = v2 + 488;
  *((_DWORD *)v2 + 126) = 0;
  v2[508] = 0;
  *((void *)v2 + 64) = 0;
  *((void *)v2 + 66) = 0;
  *((void *)v2 + 65) = 0;
  *((void *)v2 + 75) = 0;
  *((void *)v2 + 79) = 0;
  double result = 0.0;
  *((_OWORD *)v2 + 34) = 0u;
  *((_OWORD *)v2 + 35) = 0u;
  *((_OWORD *)v2 + 36) = 0u;
  v2[592] = 0;
  *((void *)v2 + 80) = 850045863;
  *((void *)v2 + 87) = 0;
  *(_OWORD *)(v2 + 648) = 0u;
  *(_OWORD *)(v2 + 664) = 0u;
  *(_OWORD *)(v2 + 680) = 0u;
  v2[704] = 1;
  *a1 = v2 + 24;
  a1[1] = v2;
  return result;
}

void sub_20D469A00(_Unwind_Exception *a1)
{
  if (*(unsigned char *)(v1 + 448)) {
    atomic_fetch_add(censorship_count, 0xFFFFFFFF);
  }
  if (*(char *)(v1 + 447) < 0) {
    operator delete(*(void **)(v1 + 424));
  }
  if (*(char *)(v1 + 423) < 0) {
    operator delete(*(void **)(v1 + 400));
  }
  fst::FstHeader::~FstHeader(v2);
  uint64_t v4 = *(std::__shared_weak_count **)(v1 + 328);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(v1 + 312);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  uint64_t v6 = *(void *)(v1 + 296);
  *(void *)(v1 + 296) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = *(std::__shared_weak_count **)(v1 + 288);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  uint64_t v8 = *(std::__shared_weak_count **)(v1 + 272);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v1);
  operator delete(v9);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<TTSSynthesizer::TTSSynthesizerInternal>::__on_zero_shared(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v45 = *MEMORY[0x263EF8340];
  if (*(void *)(a1 + 296)) {
    goto LABEL_2;
  }
  uint64_t v21 = *(void *)(a1 + 304);
  if (!v21) {
    goto LABEL_70;
  }
  uint64_t v22 = *(void *)(v21 + 8);
  if (v22 == *(void *)(v21 + 16)) {
    goto LABEL_54;
  }
  while (1)
  {
    if (!*(void *)v22) {
      goto LABEL_46;
    }
    if (v23) {
      break;
    }
LABEL_44:
    if (*(void *)v22
    {
      long long v25 = *(std::__shared_weak_count **)(v22 + 8);
      if (!v25) {
        goto LABEL_54;
      }
      atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
      goto LABEL_53;
    }
LABEL_46:
    v22 += 16;
    if (v22 == *(void *)(v21 + 16)) {
      goto LABEL_54;
    }
  }
  unsigned int v24 = v23;
  long long v25 = *(std::__shared_weak_count **)(v22 + 8);
  if (v25) {
    atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v26 = (const void *)v23[34];
  if (!v26
  {
    if (v25) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v25);
    }
    goto LABEL_44;
  }
  uint64_t v27 = (std::__shared_weak_count *)v24[35];
  if (v27)
  {
    atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  if (v25) {
LABEL_53:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
LABEL_54:
  if (*(void *)(v21 + 16) == v22)
  {
LABEL_70:
    uint64_t v35 = ve_ttsClose(*(void *)(a1 + 248), *(void *)(a1 + 256), a3, a4, a5, a6, a7, a8);
    if (v35)
    {
      if (Diagnostics_GetLogObject(void)::onceToken != -1) {
        dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
      }
      std::string v36 = Diagnostics_GetLogObject(void)::__profile_log_default;
      if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v35;
        _os_log_impl(&dword_20CD80000, v36, OS_LOG_TYPE_ERROR, "Error ve_ttsClose 0x%x", buf, 8u);
      }
      Diagnostics::log(3, "Error ve_ttsClose 0x%x", v37, v35);
    }
    uint64_t v38 = ve_ttsUnInitialize(*(void *)(a1 + 232), *(void *)(a1 + 240));
    if (v38)
    {
      if (Diagnostics_GetLogObject(void)::onceToken != -1) {
        dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
      }
      unsigned int v39 = Diagnostics_GetLogObject(void)::__profile_log_default;
      if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v38;
        _os_log_impl(&dword_20CD80000, v39, OS_LOG_TYPE_ERROR, "Error ve_ttsUnInitialize 0x%x", buf, 8u);
      }
      Diagnostics::log(3, "Error ve_ttsUnInitialize 0x%x", v40, v38);
    }
    if (*(_WORD *)(a1 + 24) == 8963)
    {
      uint64_t v41 = vplatform_ReleaseInterfaces(a1 + 24);
      if (v41)
      {
        if (Diagnostics_GetLogObject(void)::onceToken != -1) {
          dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
        }
        int v42 = Diagnostics_GetLogObject(void)::__profile_log_default;
        if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)int buf = 67109120;
          *(_DWORD *)&uint8_t buf[4] = v41;
          _os_log_impl(&dword_20CD80000, v42, OS_LOG_TYPE_ERROR, "Error vplatform_ReleaseInterfaces 0x%x", buf, 8u);
        }
        Diagnostics::log(3, "Error vplatform_ReleaseInterfaces 0x%x", v43, v41);
      }
    }
    goto LABEL_2;
  }
  int v28 = *(const void **)v22;
  if (!*(void *)v22
  {
    int v34 = *(std::__shared_weak_count **)(v22 + 8);
    if (v34)
    {
      atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
      std::__shared_weak_count::__release_shared[abi:ne180100](v34);
    }
    if (v28) {
      goto LABEL_2;
    }
    goto LABEL_70;
  }
  uint64_t v30 = v29;
  UChar32 v31 = *(std::__shared_weak_count **)(v22 + 8);
  if (v31) {
    atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v33 = *((void *)v30 + 34);
  unsigned int v32 = (std::__shared_weak_count *)*((void *)v30 + 35);
  if (v32) {
    atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  }
  if (v32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v32);
  }
  if (!v33) {
    goto LABEL_70;
  }
LABEL_2:
  uint64_t v9 = *(void *)(a1 + 264);
  if (v9)
  {
    uint64_t v11 = *(void **)(v9 + 40);
    uint64_t v10 = (void *)(v9 + 40);
    std::__tree<std::__value_type<std::type_index,std::unique_ptr<Agglomerate::ItemHolderBase>>,std::__map_value_compare<std::type_index,std::__value_type<std::type_index,std::unique_ptr<Agglomerate::ItemHolderBase>>,std::less<std::type_index>,true>,std::allocator<std::__value_type<std::type_index,std::unique_ptr<Agglomerate::ItemHolderBase>>>>::destroy(v11);
    *(v10 - 1) = v10;
    *uint64_t v10 = 0;
    v10[1] = 0;
  }
  GryphonDebugging::latest_pool_ptr = 0;
  std::mutex::~mutex((std::mutex *)(a1 + 640));
  std::__function::__value_func<VE_INSTALL * ()(void)>::~__value_func[abi:ne180100]((void *)(a1 + 608));
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)(a1 + 600), *(unsigned __int8 *)(a1 + 592));
  *(void *)int buf = a1 + 568;
  std::vector<TTSSynthesizer::EngineParamsOverride>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (*(char *)(a1 + 567) < 0) {
    operator delete(*(void **)(a1 + 544));
  }
  uint64_t v12 = *(void *)(a1 + 512);
  if (v12)
  {
    uint64_t v13 = *(void *)(a1 + 520);
    uint64_t v14 = *(void **)(a1 + 512);
    if (v13 != v12)
    {
      do
      {
        uint64_t v15 = *(std::__shared_weak_count **)(v13 - 24);
        if (v15) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v15);
        }
        v13 -= 32;
      }
      while (v13 != v12);
      uint64_t v14 = *(void **)(a1 + 512);
    }
    *(void *)(a1 + 520) = v12;
    operator delete(v14);
  }
  std::__tree<std::__value_type<std::string,std::shared_ptr<FastRewriter>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<FastRewriter>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<FastRewriter>>>>::destroy(*(void **)(a1 + 488));
  UTFRegex::~UTFRegex((UTFRegex *)(a1 + 456));
  if (*(unsigned char *)(a1 + 448)) {
    atomic_fetch_add(censorship_count, 0xFFFFFFFF);
  }
  if (*(char *)(a1 + 447) < 0) {
    operator delete(*(void **)(a1 + 424));
  }
  if (*(char *)(a1 + 423) < 0) {
    operator delete(*(void **)(a1 + 400));
  }
  if (*(char *)(a1 + 391) < 0) {
    operator delete(*(void **)(a1 + 368));
  }
  if (*(char *)(a1 + 367) < 0) {
    operator delete(*(void **)(a1 + 344));
  }
  unint64_t v16 = *(std::__shared_weak_count **)(a1 + 328);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  unint64_t v17 = *(std::__shared_weak_count **)(a1 + 312);
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  uint64_t v18 = *(void *)(a1 + 296);
  *(void *)(a1 + 296) = 0;
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  }
  uint64_t v19 = *(std::__shared_weak_count **)(a1 + 288);
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  int v20 = *(std::__shared_weak_count **)(a1 + 272);
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
}

void sub_20D46A0B4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void std::__shared_ptr_emplace<TTSSynthesizer::TTSSynthesizerInternal>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C219038;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<TTSSynthesizer::TTSSynthesizerInternal>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C219038;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void TTSSynthesizer::~TTSSynthesizer(TTSSynthesizer *this)
{
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

{
  std::__shared_weak_count *v1;

  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

uint64_t TTSSynthesizer::get_voice_description(TTSSynthesizer *this)
{
  return *(void *)this + 312;
}

uint64_t TTSSynthesizer::get_engine_description(TTSSynthesizer *this)
{
  return 0x4400000009;
}

uint64_t TTSSynthesizer::initialize(uint64_t *a1, std::string::size_type a2, uint64_t a3, long long *a4, const std::string *a5)
{
  v8[4] = *MEMORY[0x263EF8340];
  uint64_t v5 = *a1;
  v8[0] = &off_26C212498;
  v8[3] = v8;
  uint64_t v6 = TTSSynthesizer::TTSSynthesizerInternal::initialize(v5, a2, a4, a5, (uint64_t)v8);
  std::__function::__value_func<VE_INSTALL * ()(void)>::~__value_func[abi:ne180100](v8);
  return v6;
}

void sub_20D46A270(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<VE_INSTALL * ()(void)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

char **std::__function::__func<TTSSynthesizer::initialize(std::string const&,std::vector<TTSSynthesizer::EngineParamsOverride> const&,std::string const&,std::string const&)::$_0,std::allocator<TTSSynthesizer::initialize(std::string const&,std::vector<TTSSynthesizer::EngineParamsOverride> const&,std::string const&,std::string const&)::$_0>,VE_INSTALL * ()(void)>::target_type()
{
}

uint64_t std::__function::__func<TTSSynthesizer::initialize(std::string const&,std::vector<TTSSynthesizer::EngineParamsOverride> const&,std::string const&,std::string const&)::$_0,std::allocator<TTSSynthesizer::initialize(std::string const&,std::vector<TTSSynthesizer::EngineParamsOverride> const&,std::string const&,std::string const&)::$_0>,VE_INSTALL * ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<TTSSynthesizer::initialize(std::string const&,std::vector<TTSSynthesizer::EngineParamsOverride> const&,std::string const&,std::string const&)::$_0,std::allocator<TTSSynthesizer::initialize(std::string const&,std::vector<TTSSynthesizer::EngineParamsOverride> const&,std::string const&,std::string const&)::$_0>,VE_INSTALL * ()(void)>::operator()()
{
  return 0;
}

void std::__function::__func<TTSSynthesizer::initialize(std::string const&,std::vector<TTSSynthesizer::EngineParamsOverride> const&,std::string const&,std::string const&)::$_0,std::allocator<TTSSynthesizer::initialize(std::string const&,std::vector<TTSSynthesizer::EngineParamsOverride> const&,std::string const&,std::string const&)::$_0>,VE_INSTALL * ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &off_26C212498;
}

void *std::__function::__func<TTSSynthesizer::initialize(std::string const&,std::vector<TTSSynthesizer::EngineParamsOverride> const&,std::string const&,std::string const&)::$_0,std::allocator<TTSSynthesizer::initialize(std::string const&,std::vector<TTSSynthesizer::EngineParamsOverride> const&,std::string const&,std::string const&)::$_0>,VE_INSTALL * ()(void)>::__clone()
{
  double result = operator new(0x10uLL);
  *double result = &off_26C212498;
  return result;
}

void std::__function::__func<TTSSynthesizer::initialize(std::string const&,std::vector<TTSSynthesizer::EngineParamsOverride> const&,std::string const&,std::string const&)::$_0,std::allocator<TTSSynthesizer::initialize(std::string const&,std::vector<TTSSynthesizer::EngineParamsOverride> const&,std::string const&,std::string const&)::$_0>,VE_INSTALL * ()(void)>::~__func()
{
}

uint64_t TTSSynthesizer::initialize(uint64_t *a1, std::string::size_type a2, long long *a3, const std::string *a4)
{
  v9[4] = *MEMORY[0x263EF8340];
  uint64_t v4 = *a1;
  v9[0] = &off_26C2124F0;
  v9[3] = v9;
  memset(v7, 0, sizeof(v7));
  uint64_t v5 = TTSSynthesizer::TTSSynthesizerInternal::initialize(v4, a2, a3, a4, (uint64_t)v9);
  uint64_t v8 = (void **)v7;
  std::vector<TTSSynthesizer::EngineParamsOverride>::__destroy_vector::operator()[abi:ne180100](&v8);
  std::__function::__value_func<VE_INSTALL * ()(void)>::~__value_func[abi:ne180100](v9);
  return v5;
}

void sub_20D46A3F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  va_copy(va2, va1);
  va_arg(va2, void);
  va_copy((va_list)v7, va);
  std::vector<TTSSynthesizer::EngineParamsOverride>::__destroy_vector::operator()[abi:ne180100]((void ***)va1);
  std::__function::__value_func<VE_INSTALL * ()(void)>::~__value_func[abi:ne180100]((uint64_t *)va2);
  _Unwind_Resume(a1);
}

char **std::__function::__func<TTSSynthesizer::initialize(std::string const&,std::string const&,std::string const&)::$_0,std::allocator<TTSSynthesizer::initialize(std::string const&,std::string const&,std::string const&)::$_0>,VE_INSTALL * ()(void)>::target_type()
{
}

uint64_t std::__function::__func<TTSSynthesizer::initialize(std::string const&,std::string const&,std::string const&)::$_0,std::allocator<TTSSynthesizer::initialize(std::string const&,std::string const&,std::string const&)::$_0>,VE_INSTALL * ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<TTSSynthesizer::initialize(std::string const&,std::string const&,std::string const&)::$_0,std::allocator<TTSSynthesizer::initialize(std::string const&,std::string const&,std::string const&)::$_0>,VE_INSTALL * ()(void)>::operator()()
{
  return 0;
}

void std::__function::__func<TTSSynthesizer::initialize(std::string const&,std::string const&,std::string const&)::$_0,std::allocator<TTSSynthesizer::initialize(std::string const&,std::string const&,std::string const&)::$_0>,VE_INSTALL * ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &off_26C2124F0;
}

void *std::__function::__func<TTSSynthesizer::initialize(std::string const&,std::string const&,std::string const&)::$_0,std::allocator<TTSSynthesizer::initialize(std::string const&,std::string const&,std::string const&)::$_0>,VE_INSTALL * ()(void)>::__clone()
{
  double result = operator new(0x10uLL);
  *double result = &off_26C2124F0;
  return result;
}

void std::__function::__func<TTSSynthesizer::initialize(std::string const&,std::string const&,std::string const&)::$_0,std::allocator<TTSSynthesizer::initialize(std::string const&,std::string const&,std::string const&)::$_0>,VE_INSTALL * ()(void)>::~__func()
{
}

uint64_t TTSSynthesizer::initialize(uint64_t *a1, std::string::size_type a2, uint64_t a3)
{
  v13[4] = *MEMORY[0x263EF8340];
  uint64_t v5 = *a1;
  std::string::basic_string[abi:ne180100]<0>(v10, &byte_20D5A22AE);
  std::string::basic_string[abi:ne180100]<0>(&__p, &byte_20D5A22AE);
  std::__function::__value_func<VE_INSTALL * ()(void)>::__value_func[abi:ne180100]((uint64_t)v13, a3);
  memset(v8, 0, sizeof(v8));
  uint64_t v6 = TTSSynthesizer::TTSSynthesizerInternal::initialize(v5, a2, (long long *)v10, &__p, (uint64_t)v13);
  uint64_t v12 = (void **)v8;
  std::vector<TTSSynthesizer::EngineParamsOverride>::__destroy_vector::operator()[abi:ne180100](&v12);
  std::__function::__value_func<VE_INSTALL * ()(void)>::~__value_func[abi:ne180100](v13);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  return v6;
}

void sub_20D46A5D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char *a25)
{
  a25 = &a10;
  std::vector<TTSSynthesizer::EngineParamsOverride>::__destroy_vector::operator()[abi:ne180100]((void ***)&a25);
  std::__function::__value_func<VE_INSTALL * ()(void)>::~__value_func[abi:ne180100]((void *)(v25 - 72));
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  _Unwind_Resume(a1);
}

uint64_t TTSSynthesizer::set_global_property(uint64_t **a1, int a2, float a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  char v11 = *a1;
  unsigned int v12 = *((_DWORD *)*a1 + 92);
  BOOL v13 = v12 > 4;
  int v14 = (1 << v12) & 0x1A;
  if (v13 || v14 == 0)
  {
    switch(a2)
    {
      case 0:
        int v16 = 10;
        goto LABEL_24;
      case 1:
        int v16 = 9;
        goto LABEL_24;
      case 2:
        int v16 = 8;
LABEL_24:
        LODWORD(v19) = v16;
        int v18 = (int)(a3 * 100.0);
        goto LABEL_28;
      case 3:
        LODWORD(v19) = 12;
        if (a3 == 0.0) {
          LOWORD(v18) = 2;
        }
        else {
          LOWORD(v18) = 1;
        }
LABEL_28:
        WORD2(v19) = v18;
        break;
      default:
        return ve_ttsSetParamList(v11[28], v11[29], &v19, 1, a6, a7, a8, a9);
    }
    return ve_ttsSetParamList(v11[28], v11[29], &v19, 1, a6, a7, a8, a9);
  }
  else
  {
    SharedObjectPool::get<SynthesizerConfig>(&v19, v11[30]);
    switch(a2)
    {
      case 0:
        v19[3] = a3;
        break;
      case 1:
        v19[1] = a3;
        break;
      case 2:
        v19[2] = a3;
        break;
      case 4:
        int v19[4] = a3;
        break;
      case 5:
        v19[6] = a3;
        break;
      case 6:
        v19[5] = a3;
        break;
      case 7:
        v19[7] = a3;
        break;
      case 8:
        v19[8] = a3;
        break;
      case 9:
        v19[9] = a3;
        break;
      case 10:
        v19[10] = a3;
        break;
      case 11:
        v19[11] = a3;
        break;
      default:
        break;
    }
    if (v20) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v20);
    }
    return 0;
  }
}

uint64_t TTSSynthesizer::set_neural_style(uint64_t *a1, std::string *a2)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  uint64_t v2 = *a1;
  unsigned int v3 = *(_DWORD *)(*a1 + 368);
  BOOL v4 = v3 > 4;
  int v5 = (1 << v3) & 0x1A;
  if (!v4 && v5 != 0)
  {
    SharedObjectPool::get<SynthesizerConfig>(&v31, *(void *)(v2 + 240));
    TTSSynthesizer::TTSSynthesizerInternal::available_neural_styles(&v30, v2);
    if (&v31[2] != a2) {
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v31[2], a2->__r_.__value_.__l.__data_, a2->__r_.__value_.__l.__size_, (uint64_t)(a2->__r_.__value_.__l.__size_ - a2->__r_.__value_.__r.__words[0]) >> 2);
    }
    uint64_t v8 = v30.i64[0];
    if (v30.i64[0] != v30.i64[1])
    {
      uint64_t v9 = (char *)a2->__r_.__value_.__r.__words[0];
      unint64_t v10 = (uint64_t)(a2->__r_.__value_.__l.__size_ - a2->__r_.__value_.__r.__words[0]) >> 2;
      if (v10 <= 1) {
        uint64_t v11 = 1;
      }
      else {
        uint64_t v11 = (uint64_t)(a2->__r_.__value_.__l.__size_ - a2->__r_.__value_.__r.__words[0]) >> 2;
      }
      uint64_t v12 = v11 - 1;
      while (1)
      {
        int v14 = *(float **)(v8 + 48);
        BOOL v13 = *(float **)(v8 + 56);
        if (v10 == v13 - v14)
        {
          if (v13 == v14) {
            goto LABEL_25;
          }
          float v15 = vabds_f32(*v14, *(float *)v9);
          float v16 = fabsf(*v14);
          float v17 = fabsf(*(float *)v9);
          if (v16 < v17) {
            float v16 = v17;
          }
          if (v15 <= (float)(v16 * 0.00000011921)) {
            break;
          }
        }
LABEL_23:
        v8 += 72;
        if (v8 == v30.i64[1]) {
          goto LABEL_34;
        }
      }
      unint64_t v18 = 0;
      uint64_t v19 = v14 + 1;
      while (v12 != v18)
      {
        float v20 = v19[v18];
        float v21 = *(float *)&v9[4 * v18 + 4];
        float v22 = vabds_f32(v20, v21);
        float v23 = fabsf(v20);
        float v24 = fabsf(v21);
        if (v23 < v24) {
          float v23 = v24;
        }
        ++v18;
        if (v22 > (float)(v23 * 0.00000011921))
        {
          if (v10 <= v18) {
            break;
          }
          goto LABEL_23;
        }
      }
LABEL_25:
      if (Diagnostics_GetLogObject(void)::onceToken != -1) {
        dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
      }
      uint64_t v25 = Diagnostics_GetLogObject(void)::__profile_log_default;
      if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v27 = v8;
        if (*(char *)(v8 + 23) < 0) {
          uint64_t v27 = *(void *)v8;
        }
        *(_DWORD *)int buf = 136315138;
        *(void *)&uint8_t buf[4] = v27;
        _os_log_impl(&dword_20CD80000, v25, OS_LOG_TYPE_DEFAULT, "Neural Style changed to: '%s'", buf, 0xCu);
      }
      uint64_t v28 = v8;
      if (*(char *)(v8 + 23) < 0) {
        uint64_t v28 = *(void *)v8;
      }
      Diagnostics::log(5, "Neural Style changed to: '%s'", v26, v28);
      std::string::operator=(v31 + 3, (const std::string *)v8);
    }
LABEL_34:
    *(void *)int buf = &v30;
    std::vector<TTSSynthesizer::SpeakingStyle>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    if (v32) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v32);
    }
  }
  return 0;
}

void sub_20D46AA94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, void **a15)
{
  a15 = (void **)&a10;
  std::vector<TTSSynthesizer::SpeakingStyle>::__destroy_vector::operator()[abi:ne180100](&a15);
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  _Unwind_Resume(a1);
}

uint64_t TTSSynthesizer::set_neural_style(uint64_t *a1, const std::string *a2)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  uint64_t v2 = *a1;
  unsigned int v3 = *(_DWORD *)(*a1 + 368);
  BOOL v4 = v3 > 4;
  int v5 = (1 << v3) & 0x1A;
  if (v4 || v5 == 0) {
    return 0;
  }
  SharedObjectPool::get<SynthesizerConfig>(&v26, *(void *)(v2 + 240));
  TTSSynthesizer::TTSSynthesizerInternal::available_neural_styles(&v25, v2);
  uint64_t v9 = v25.i64[1];
  uint64_t v8 = v25.i64[0];
  if (v25.i64[0] == v25.i64[1]) {
    goto LABEL_36;
  }
  uint64_t v10 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  uint64_t v12 = (const void *)a2->__r_.__value_.__r.__words[0];
  size_t size = a2->__r_.__value_.__l.__size_;
  if ((v10 & 0x80u) == 0) {
    std::string::size_type v13 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v13 = a2->__r_.__value_.__l.__size_;
  }
  while (1)
  {
    uint64_t v14 = *(unsigned __int8 *)(v8 + 23);
    int v15 = (char)v14;
    if ((v14 & 0x80u) != 0) {
      uint64_t v14 = *(void *)(v8 + 8);
    }
    if (v13 != v14) {
      goto LABEL_22;
    }
    float v16 = v15 >= 0 ? (unsigned __int8 *)v8 : *(unsigned __int8 **)v8;
    if ((v10 & 0x80) != 0) {
      break;
    }
    if (!v10) {
      goto LABEL_24;
    }
    float v17 = a2;
    uint64_t v18 = v10;
    while (v17->__r_.__value_.__s.__data_[0] == *v16)
    {
      float v17 = (const std::string *)((char *)v17 + 1);
      ++v16;
      if (!--v18) {
        goto LABEL_24;
      }
    }
LABEL_22:
    v8 += 72;
    if (v8 == v9) {
      goto LABEL_36;
    }
  }
  if (memcmp(v12, v16, size)) {
    goto LABEL_22;
  }
LABEL_24:
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  uint64_t v19 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      float v21 = a2;
    }
    else {
      float v21 = (const std::string *)a2->__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)int buf = 136315138;
    *(void *)&uint8_t buf[4] = v21;
    _os_log_impl(&dword_20CD80000, v19, OS_LOG_TYPE_DEFAULT, "Neural Style changed to: '%s'", buf, 0xCu);
  }
  if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    float v22 = a2;
  }
  else {
    float v22 = (const std::string *)a2->__r_.__value_.__r.__words[0];
  }
  Diagnostics::log(5, "Neural Style changed to: '%s'", v20, v22);
  float v23 = v26;
  std::string::operator=(v26 + 3, a2);
  if (v23 != (std::string *)v8) {
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v23[2], *(char **)(v8 + 48), *(void *)(v8 + 56), (uint64_t)(*(void *)(v8 + 56) - *(void *)(v8 + 48)) >> 2);
  }
LABEL_36:
  *(void *)int buf = &v25;
  std::vector<TTSSynthesizer::SpeakingStyle>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  return 0;
}

void sub_20D46AD08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, void **a15)
{
  a15 = (void **)&a10;
  std::vector<TTSSynthesizer::SpeakingStyle>::__destroy_vector::operator()[abi:ne180100](&a15);
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  _Unwind_Resume(a1);
}

void TTSSynthesizer::get_neural_style(TTSSynthesizer *this@<X0>, std::string *a2@<X8>)
{
  unsigned int v3 = *(_DWORD *)(*(void *)this + 368);
  BOOL v4 = v3 > 4;
  int v5 = (1 << v3) & 0x1A;
  if (v4 || v5 == 0)
  {
    a2->__r_.__value_.__r.__words[0] = 0;
    a2->__r_.__value_.__l.__size_ = 0;
    a2->__r_.__value_.__r.__words[2] = 0;
  }
  else
  {
    SharedObjectPool::get<SynthesizerConfig>(&v9, *(void *)(*(void *)this + 240));
    if (v9)
    {
      if (*(char *)(v9 + 95) < 0)
      {
        std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(v9 + 72), *(void *)(v9 + 80));
      }
      else
      {
        long long v7 = *(_OWORD *)(v9 + 72);
        a2->__r_.__value_.__r.__words[2] = *(void *)(v9 + 88);
        *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v7;
      }
    }
    else
    {
      a2->__r_.__value_.__r.__words[0] = 0;
      a2->__r_.__value_.__l.__size_ = 0;
      a2->__r_.__value_.__r.__words[2] = 0;
    }
    uint64_t v8 = v10;
    if (v10)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
}

void sub_20D46AE08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void TTSSynthesizer::available_neural_style(TTSSynthesizer *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)this;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = a2 + 8;
  TTSSynthesizer::TTSSynthesizerInternal::available_neural_styles(&v8, v3);
  uint64_t v4 = v8.i64[1];
  if (v8.i64[0] != v8.i64[1])
  {
    uint64_t v5 = v8.i64[0] + 48;
    do
    {
      uint64_t v9 = (long long *)(v5 - 48);
      uint64_t v6 = (char *)(std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a2, (const void **)(v5 - 48), &v9)+ 7);
      if ((char *)v5 != v6) {
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(v6, *(char **)v5, *(void *)(v5 + 8), (uint64_t)(*(void *)(v5 + 8) - *(void *)v5) >> 2);
      }
      uint64_t v7 = v5 + 24;
      v5 += 72;
    }
    while (v7 != v4);
  }
  uint64_t v10 = &v8;
  std::vector<TTSSynthesizer::SpeakingStyle>::__destroy_vector::operator()[abi:ne180100]((void ***)&v10);
}

void sub_20D46AECC(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(*v1);
  _Unwind_Resume(a1);
}

void TTSSynthesizer::available_neural_styles(TTSSynthesizer *this@<X0>, int64x2_t *a2@<X8>)
{
}

uint64_t TTSSynthesizer::set_fe_only(TTSSynthesizer *this, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)this;
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  uint64_t v4 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)int buf = 67109120;
    int v8 = a2;
    _os_log_impl(&dword_20CD80000, v4, OS_LOG_TYPE_DEFAULT, "Switching to FE only mode: %d", buf, 8u);
  }
  uint64_t result = Diagnostics::log(5, "Switching to FE only mode: %d", v5, a2);
  *(unsigned char *)(v3 + 484) = a2;
  return result;
}

void TTSSynthesizer::set_synthesis_mode(uint64_t *a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  uint64_t v3 = *a1;
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  uint64_t v4 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)int buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = a2;
    _os_log_impl(&dword_20CD80000, v4, OS_LOG_TYPE_DEFAULT, "Set synthesis mode as: %d", buf, 8u);
  }
  Diagnostics::log(5, "Set synthesis mode as: %d", v5, a2);
  SharedObjectPool::get<SynthesizerConfig>(buf, *(void *)(v3 + 240));
  uint64_t v6 = v8;
  *(_DWORD *)(*(void *)buf + 120) = a2;
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

BOOL TTSSynthesizer::using_gryphon_frontend(TTSSynthesizer *this)
{
  return *(void *)(*(void *)this + 272) != 0;
}

uint64_t TTSSynthesizer::has_phatic_responses(char *a1)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, &byte_20D5A22AE);
  BOOL should_use = Frontend::should_use(a1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (!should_use)
  {
    std::allocate_shared[abi:ne180100]<Environment,std::allocator<Environment>,std::string const&,void>(&v32, (long long *)a1);
    uint64_t v3 = v33;
    std::allocate_shared[abi:ne180100]<SharedObjectPool,std::allocator<SharedObjectPool>,std::shared_ptr<Environment> &,void>(&v30, v32, v33);
    uint64_t v11 = v30;
    SharedObjectPool::get<VoiceConfig>(&v28, v30);
    uint64_t v12 = v28;
    (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t, uint64_t))(*(void *)v28 + 72))(&__p, v28, 1885889131, 2);
    if (__p.__r_.__value_.__s.__data_[0] == 2)
    {
      uint64_t v22 = *(void *)__p.__r_.__value_.__l.__size_;
      uint64_t v23 = *(void *)(__p.__r_.__value_.__l.__size_ + 8);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&__p.__r_.__value_.__l.__size_, 2);
      if (v22 == v23) {
        goto LABEL_24;
      }
    }
    else if (__p.__r_.__value_.__s.__data_[0] == 1)
    {
      uint64_t v18 = *(void *)(__p.__r_.__value_.__l.__size_ + 16);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&__p.__r_.__value_.__l.__size_, 1);
      if (!v18)
      {
LABEL_29:
        if (v29) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v29);
        }
        float v21 = v31;
        if (v31) {
          goto LABEL_32;
        }
        goto LABEL_33;
      }
    }
    else
    {
      if (!__p.__r_.__value_.__s.__data_[0])
      {
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&__p.__r_.__value_.__l.__size_, 0);
LABEL_24:
        uint64_t v18 = 0;
        goto LABEL_29;
      }
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&__p.__r_.__value_.__l.__size_, __p.__r_.__value_.__s.__data_[0]);
    }
    SharedObjectPool::get<GeneratedPromptDB>(&v27, (uint64_t)v11);
    SharedObjectPool::get<FeatureBook>(&v26, (uint64_t)v11);
    (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t, uint64_t))(*(void *)v12 + 16))(&__p, v12, 1952543344, 1);
    operator new();
  }
  std::allocate_shared[abi:ne180100]<Environment,std::allocator<Environment>,std::string const&,void>(&v32, (long long *)a1);
  uint64_t v3 = v33;
  std::allocate_shared[abi:ne180100]<SharedObjectPool,std::allocator<SharedObjectPool>,std::shared_ptr<Environment> &,void>(&v30, v32, v33);
  uint64_t v4 = (char *)operator new(0xD8uLL);
  uint64_t v5 = v4;
  *(_OWORD *)(v4 + 8) = 0u;
  *(void *)uint64_t v4 = off_26C216D70;
  *(_OWORD *)(v4 + ++*(_DWORD *)(result + 24) = 0u;
  uint64_t v6 = (FrontendEnvironment *)(v4 + 24);
  *(_OWORD *)(v4 + 120) = 0u;
  uint64_t v7 = v4 + 120;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_OWORD *)(v4 + 88) = 0u;
  *((void *)v4 + 13) = 0;
  *(_OWORD *)(v4 + 136) = 0u;
  *(_OWORD *)(v4 + 152) = 0u;
  *((_OWORD *)v4 + 12) = 0u;
  v4[168] = 0;
  *((void *)v4 + 22) = 0;
  *((void *)v4 + 23) = v4 + 192;
  *((void *)v4 + 26) = v4 + 24;
  int v8 = v30;
  uint64_t v9 = v31;
  if (v31)
  {
    atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v10 = (std::__shared_weak_count *)*((void *)v4 + 20);
    *((void *)v5 + 19) = v8;
    *((void *)v5 + 20) = v9;
    if (v10) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    }
  }
  else
  {
    *((void *)v4 + 19) = v30;
    *((void *)v4 + 20) = 0;
  }
  std::string::size_type v13 = operator new(0x38uLL);
  v13[1] = 0;
  _OWORD v13[2] = 0;
  void *v13 = off_26C2163D0;
  uint64_t v14 = v13 + 3;
  v13[3] = off_26C201700;
  v13[4] = 0;
  void v13[5] = 0;
  v13[6] = 0;
  *(void *)&long long v15 = v13 + 3;
  *((void *)&v15 + 1) = v13;
  float v16 = (std::__shared_weak_count *)*((void *)v5 + 16);
  *(_OWORD *)(v5 + 120) = v15;
  if (v16)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
    uint64_t v14 = (void *)*v7;
  }
  std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&__p, a1);
  (*(void (**)(void *, std::string *))(*v14 + 80))(v14, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  FrontendEnvironment::load_configuration(v6);
  uint64_t shared_component = FrontendEnvironment::get_shared_component_instance<GeneratedPromptDB>((uint64_t)v6);
  if ((*(uint64_t (**)(uint64_t))(*(void *)shared_component + 56))(shared_component))
  {
    uint64_t v18 = 1;
  }
  else
  {
    uint64_t v19 = FrontendEnvironment::get_shared_component_instance<PromptDatabase>((uint64_t)v6);
    std::string::basic_string[abi:ne180100]<0>(&__p, "phat");
    prompt_by_id = PromptDatabase::find_prompt_by_id(v19, &__p, 0);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    uint64_t v18 = prompt_by_id != 0;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v5);
  if (v9)
  {
    float v21 = v9;
LABEL_32:
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
LABEL_33:
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return v18;
}

void sub_20D46B640(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, TAPExtractor *a17, uint64_t a18, std::__shared_weak_count *a19, uint64_t a20,std::__shared_weak_count *a21,uint64_t a22,std::__shared_weak_count *a23,uint64_t a24,std::__shared_weak_count *a25)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::unique_ptr<TAPExtractor>::reset[abi:ne180100](&a17);
  if (a19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a19);
  }
  if (a21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a21);
  }
  if (a23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a23);
  }
  if (a25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a25);
  }
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<Environment,std::allocator<Environment>,std::string const&,void>(void *a1, long long *a2)
{
  uint64_t v4 = (std::string *)operator new(0x48uLL);
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = (std::string::size_type)off_26C215368;
  std::string::basic_string[abi:ne180100]<0>(__p, &byte_20D5A22AE);
  Environment::Environment(v4 + 1, a2, (long long *)__p);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  *a1 = v4 + 1;
  a1[1] = v4;
}

void sub_20D46B804(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::~__shared_weak_count(v15);
  operator delete(v17);
  _Unwind_Resume(a1);
}

TAPExtractor *std::unique_ptr<TAPExtractor>::reset[abi:ne180100](TAPExtractor **a1)
{
  uint64_t result = *a1;
  *a1 = 0;
  if (result)
  {
    TAPExtractor::~TAPExtractor(result);
    JUMPOUT(0x2105595E0);
  }
  return result;
}

BOOL TTSSynthesizer::ready_for_synthesis(TTSSynthesizer *this)
{
  if (*(char *)(*(void *)this + 399) < 0) {
    uint64_t v1 = *(void *)(*(void *)this + 384);
  }
  else {
    uint64_t v1 = *(unsigned __int8 *)(*(void *)this + 399);
  }
  return v1 != 0;
}

void TTSSynthesizer::synthesize_text_sync(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  uint64_t v2 = *a1;
  uint64_t v3 = 0;
  TTSSynthesizer::TTSSynthesizerInternal::synthesize_text(v2, a2);
}

void sub_20D46B920(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<int ()(TTSSynthesizer::CallbackMessage)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void TTSSynthesizer::synthesize_text_async(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  uint64_t v5 = *a1;
  std::__function::__value_func<int ()(TTSSynthesizer::CallbackMessage)>::__value_func[abi:ne180100]((uint64_t)v6, a4);
  TTSSynthesizer::TTSSynthesizerInternal::synthesize_text(v5, a2);
}

void sub_20D46B9D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<int ()(TTSSynthesizer::CallbackMessage)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void TTSSynthesizer::synthesize_text_and_animation_async(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v6 = *a1;
  std::__function::__value_func<int ()(TTSSynthesizer::CallbackMessage)>::__value_func[abi:ne180100]((uint64_t)v7, a5);
  TTSSynthesizer::TTSSynthesizerInternal::synthesize_text(v6, a2);
}

void sub_20D46BA8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<int ()(TTSSynthesizer::CallbackMessage)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void TTSSynthesizer::synthesize_text_with_markers_async(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v6 = *a1;
  std::__function::__value_func<int ()(TTSSynthesizer::CallbackMessage)>::__value_func[abi:ne180100]((uint64_t)v7, a5);
  TTSSynthesizer::TTSSynthesizerInternal::synthesize_text(v6, a2);
}

void sub_20D46BB48(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<int ()(TTSSynthesizer::CallbackMessage)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void TTSSynthesizer::synthesize_text_and_animation_with_markers_async(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  uint64_t v7 = *a1;
  std::__function::__value_func<int ()(TTSSynthesizer::CallbackMessage)>::__value_func[abi:ne180100]((uint64_t)v8, a6);
  TTSSynthesizer::TTSSynthesizerInternal::synthesize_text(v7, a2);
}

void sub_20D46BC10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<int ()(TTSSynthesizer::CallbackMessage)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t TTSSynthesizer::synthesize_text(uint64_t **a1, uint64_t a2)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  uint64_t v3 = *a1;
  kdebug_trace();
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  uint64_t v4 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    Censor::global_plaintext(&__p, a2);
    uint64_t v5 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
       ? &__p
       : (std::string *)__p.__r_.__value_.__r.__words[0];
    LODWORD(buf) = 136315138;
    *(void *)((char *)&buf + 4) = v5;
    _os_log_impl(&dword_20CD80000, v4, OS_LOG_TYPE_DEFAULT, "Start synthesizing text: '%s'", (uint8_t *)&buf, 0xCu);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  Censor::global_plaintext(&__p, a2);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  Diagnostics::log(5, "Start synthesizing text: '%s'", v6, p_p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v8 = v3[35];
  if (v8)
  {
    (*(void (**)(uint64_t))(*(void *)v8 + 48))(v8);
    if (v3[35])
    {
      uint64_t v9 = v3[34];
      if (!v9)
      {
        uint64_t v10 = (char *)operator new(0x30uLL);
        *(_OWORD *)(v10 + 8) = 0u;
        *(void *)uint64_t v10 = off_26C215330;
        *((_OWORD *)v10 + 2) = 0u;
        *((void *)v10 + 3) = v10 + 32;
        uint64_t v11 = (char *)operator new(0x50uLL);
        *((void *)v11 + 1) = 0;
        *((void *)v11 + 2) = 0;
        *(void *)uint64_t v11 = off_26C215720;
        *(_OWORD *)(v11 + 40) = 0u;
        *(_OWORD *)(v11 + 56) = 0u;
        *((void *)v11 + 9) = 0;
        *(_OWORD *)(v11 + ++*(_DWORD *)(result + 24) = 0u;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)(v11 + 24);
        __p.__r_.__value_.__l.__size_ = (std::string::size_type)v11;
        std::string::operator=((std::string *)v11 + 1, (const std::string *)a2);
        Agglomerate::set<std::shared_ptr<FrontendInput>>((uint64_t)(v10 + 24), (unint64_t *)&__p);
        uint64_t v12 = v3[35];
        *(void *)&long long buf = v10 + 24;
        *((void *)&buf + 1) = v10;
        atomic_fetch_add_explicit((atomic_ullong *volatile)v10 + 1, 1uLL, memory_order_relaxed);
        (*(void (**)(uint64_t, long long *))(*(void *)v12 + 32))(v12, &buf);
        if (*((void *)&buf + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&buf + 1));
        }
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v11);
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v10);
        goto LABEL_22;
      }
LABEL_21:
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_26C212548;
      uint64_t v34 = &__p;
      (*(void (**)(uint64_t, uint64_t, std::string *))(*(void *)v9 + 24))(v9, a2, &__p);
      std::__function::__value_func<int ()(InternalCallbackContainer)>::~__value_func[abi:ne180100](&__p);
      do
      {
LABEL_22:
        (*(void (**)(std::string *__return_ptr))(*(void *)v3[35] + 56))(&v29);
        std::string::size_type v13 = v29.__r_.__value_.__r.__words[0];
        if (v29.__r_.__value_.__l.__size_) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v29.__r_.__value_.__l.__size_);
        }
      }
      while (v13);
      goto LABEL_25;
    }
  }
  uint64_t v9 = v3[34];
  if (v9) {
    goto LABEL_21;
  }
  *(void *)&long long buf = &off_26C2125A0;
  p_long long buf = &buf;
  TTSSynthesizerCallbackResult::TTSSynthesizerCallbackResult(&__p, (long long *)a2, 0, 0, 0, (uint64_t)&buf, 1);
  std::__function::__value_func<int ()(TTSSynthesizer::CallbackMessage)>::~__value_func[abi:ne180100](&buf);
  SharedObjectPool::get_if<TTSSynthesizerEventBusInternal>(&v29, v3[30]);
  float v20 = (std::__shared_weak_count *)*((void *)&v41 + 1);
  long long v41 = *(_OWORD *)&v29.__r_.__value_.__l.__data_;
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  v30[0] = &__p;
  v30[1] = ve_synthesis_callback;
  uint64_t v42 = ve_ttsSetOutDevice(v3[28], v3[29], (uint64_t)v30, v15, v16, v17, v18, v19);
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v29, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v29 = *(std::string *)a2;
  }
  TTSSynthesizer::TTSSynthesizerInternal::normalize(&v28, (std::string::value_type *)&v29);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
  std::string v29 = v28;
  TTSSynthesizer::TTSSynthesizerInternal::preprocess_for_vendor_voice(&v28, (uint64_t)v3, (uint64_t)&v29, v21, v22, v23, v24, v25);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
  std::string v29 = v28;
  LODWORD(v28.__r_.__value_.__l.__data_) = 0;
  std::string::size_type v26 = HIBYTE(v28.__r_.__value_.__r.__words[2]);
  if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v26 = LODWORD(v29.__r_.__value_.__r.__words[1]);
  }
  uint64_t v27 = &v29;
  if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    uint64_t v27 = (std::string *)v29.__r_.__value_.__r.__words[0];
  }
  v28.__r_.__value_.__l.__size_ = v26;
  v28.__r_.__value_.__r.__words[2] = (std::string::size_type)v27;
  uint64_t v42 = ve_ttsProcessText2Speech(v3[28], v3[29], (uint64_t)&v28);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
  if (*((void *)&v41 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v41 + 1));
  }
  std::__function::__value_func<int ()(InternalCallbackContainer)>::~__value_func[abi:ne180100](v40);
  std::__function::__value_func<int ()(TTSSynthesizer::CallbackMessage)>::~__value_func[abi:ne180100](v39);
  if (v37)
  {
    uint64_t v38 = v37;
    operator delete(v37);
  }
  if (v35)
  {
    std::string v36 = v35;
    operator delete(v35);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
LABEL_25:
  kdebug_trace();
  return 0;
}

void sub_20D46C14C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,std::__shared_weak_count *a51)
{
  if (a51) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a51);
  }
  std::__function::__value_func<int ()(InternalCallbackContainer)>::~__value_func[abi:ne180100](&a46);
  std::__function::__value_func<int ()(TTSSynthesizer::CallbackMessage)>::~__value_func[abi:ne180100](&a42);
  if (__p) {
    operator delete(__p);
  }
  if (a36) {
    operator delete(a36);
  }
  if (a31 < 0) {
    operator delete(a26);
  }
  _Unwind_Resume(a1);
}

double TTSSynthesizer::get_event_bus@<D0>(TTSSynthesizer *this@<X0>, _OWORD *a2@<X8>)
{
  SharedObjectPool::get_if<TTSSynthesizerEventBusInternal>(&v4, *(void *)(*(void *)this + 240));
  double result = *(double *)&v4;
  *a2 = v4;
  return result;
}

void TTSSynthesizer::stop_synthesis(TTSSynthesizer *this)
{
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  uint64_t v2 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t v14 = 0;
    _os_log_impl(&dword_20CD80000, v2, OS_LOG_TYPE_INFO, "Stop synthesis.", v14, 2u);
  }
  Diagnostics::log(6, "Stop synthesis.", v3);
  uint64_t v10 = *(void *)this;
  uint64_t v11 = *(void *)(*(void *)this + 272);
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 32))(v11);
  }
  else {
    ve_ttsStop(*(void *)(v10 + 224), *(void *)(v10 + 232), v4, v5, v6, v7, v8, v9);
  }
  std::mutex::lock((std::mutex *)(v10 + 616));
  uint64_t v12 = *(void *)(v10 + 280);
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 40))(v12);
  }
  uint64_t v13 = *(void *)(v10 + 296);
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 40))(v13);
  }
  std::mutex::unlock((std::mutex *)(v10 + 616));
}

void sub_20D46C3B4(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

BOOL TTSSynthesizer::load_resource(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  TTSSynthesizer::TTSSynthesizerInternal::load_voice_resource((uint64_t)&v5, *a1, a2, a3);
  uint64_t v3 = v5;
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  return v3 == 0;
}

void TTSSynthesizer::load_voice_resource(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
}

void TTSSynthesizer::load_voice_resource(uint64_t *a1@<X0>, char *a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
}

uint64_t TTSSynthesizer::unload_resource(uint64_t *a1, void *a2)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  uint64_t v3 = *a1;
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  uint64_t v4 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    uint64_t v6 = *a2;
    LODWORD(buf) = 134217984;
    *(void *)((char *)&buf + 4) = v6;
    _os_log_impl(&dword_20CD80000, v4, OS_LOG_TYPE_INFO, "Unloading resource %p", (uint8_t *)&buf, 0xCu);
  }
  Diagnostics::log(6, "Unloading resource %p", v5, *a2);
  if (*a2)
  {
    if (v7)
    {
      uint64_t v12 = (std::__shared_weak_count *)a2[1];
      if (v12) {
        atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v13 = *(void *)(v3 + 272);
      if (v13)
      {
        (*(void (**)(void, void *))(*(void *)v13 + 64))(*(void *)(v3 + 272), a2);
      }
      else
      {
        if (*(unsigned char *)(v3 + 512))
        {
          int v14 = 0;
          uint64_t v3 = ve_ttsResourceUnload(*(void *)(v3 + 224), *(void *)(v3 + 232), *((uint64_t **)v7 + 1), *((void *)v7 + 2), v8, v9, v10, v11);
          if (!v12)
          {
LABEL_13:
            if (v14)
            {
              if (Diagnostics_GetLogObject(void)::onceToken != -1) {
                dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
              }
              uint64_t v15 = Diagnostics_GetLogObject(void)::__profile_log_default;
              if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
              {
                uint64_t v17 = (const void *)*a2;
                LODWORD(buf) = 134217984;
                *(void *)((char *)&buf + 4) = v17;
                _os_log_impl(&dword_20CD80000, v15, OS_LOG_TYPE_ERROR, "Unloaded to resource %p", (uint8_t *)&buf, 0xCu);
              }
              Diagnostics::log(3, "Unloaded to resource %p", v16, *a2);
              return 0;
            }
            return v3;
          }
LABEL_12:
          std::__shared_weak_count::__release_shared[abi:ne180100](v12);
          goto LABEL_13;
        }
        PersistentModuleFactory::get_persistent_module<NashvilleFEPersistentModule>(&buf, *(void **)(*(void *)(v3 + 256) + 24));
        if ((void)buf) {
          NashvilleFEPersistentModule::unload_resource((void *)buf, (void *)*a2, (std::__shared_weak_count *)a2[1]);
        }
        if (*((void *)&buf + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&buf + 1));
        }
      }
      int v14 = 1;
      if (!v12) {
        goto LABEL_13;
      }
      goto LABEL_12;
    }
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  uint64_t v18 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
  {
    LOWORD(buf) = 0;
    _os_log_impl(&dword_20CD80000, v18, OS_LOG_TYPE_ERROR, "Unable to unload unknown resource.", (uint8_t *)&buf, 2u);
  }
  Diagnostics::log(3, "Unable to unload unknown resource.", v19);
  return 1;
}

void sub_20D46C740(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t TTSSynthesizer::add_pls_dictionary(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)a1 + 272);
  if (v1)
  {
    uint64_t v2 = *(uint64_t (**)(void))(*(void *)v1 + 72);
    return v2();
  }
  else
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    uint64_t v4 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl(&dword_20CD80000, v4, OS_LOG_TYPE_ERROR, "Unable to handle PLS dictionary in this voice", v6, 2u);
    }
    return Diagnostics::log(3, "Unable to handle PLS dictionary in this voice", v5);
  }
}

void TTSSynthesizer::set_prompts_disabled(TTSSynthesizer::TTSSynthesizerInternal **this, char a2)
{
}

void TTSSynthesizer::set_prohibit_neural(TTSSynthesizer *this, char a2)
{
  SharedObjectPool::get<SynthesizerConfig>(v4, *(void *)(*(void *)this + 240));
  uint64_t v3 = (std::__shared_weak_count *)v4[1];
  *(unsigned char *)v4[0] = a2;
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

GryphonAnalysis *TTSSynthesizer::set_analysis_enabled(GryphonAnalysis *this, char a2)
{
  unsigned int v2 = *(_DWORD *)(*(void *)this + 368);
  BOOL v3 = v2 > 4;
  int v4 = (1 << v2) & 0x1A;
  if (!v3 && v4 != 0)
  {
    this = (GryphonAnalysis *)GryphonAnalysis::Storage(this);
    *(unsigned char *)this = a2;
  }
  return this;
}

void TTSSynthesizer::dump_analysis(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(*(void *)a1 + 368);
  BOOL v3 = v2 > 4;
  int v4 = (1 << v2) & 0x1A;
  if (!v3 && v4 != 0)
  {
    if (*(char *)(a2 + 23) < 0) {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    }
    else {
      std::string __p = *(std::string *)a2;
    }
    GryphonAnalysis::dump_analysis((uint64_t)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
}

void sub_20D46C998(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void TTSSynthesizer::set_global_whisper(TTSSynthesizer *this, char a2)
{
  unsigned int v2 = *(_DWORD *)(*(void *)this + 368);
  BOOL v3 = v2 > 4;
  int v4 = (1 << v2) & 0x1A;
  if (!v3 && v4 != 0)
  {
    SharedObjectPool::get<SynthesizerConfig>(v8, *(void *)(*(void *)this + 240));
    uint64_t v7 = (std::__shared_weak_count *)v8[1];
    *(unsigned char *)(v8[0] + 1) = a2;
    if (v7) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
}

uint64_t *TTSSynthesizer::set_censor_plaintext(uint64_t *this, int a2)
{
  uint64_t v2 = *this;
  if (*(unsigned char *)(*this + 424))
  {
    if ((a2 & 1) == 0)
    {
      unsigned int v3 = -1;
LABEL_6:
      atomic_fetch_add(censorship_count, v3);
    }
  }
  else if (a2)
  {
    unsigned int v3 = 1;
    goto LABEL_6;
  }
  *(unsigned char *)(v2 + 4++*(_DWORD *)(result + 24) = a2;
  return this;
}

uint64_t **TTSSynthesizer::preheat(TTSSynthesizer *this)
{
  uint64_t v1 = *(void *)this;
  uint64_t v2 = *(void *)(*(void *)this + 488);
  uint64_t v3 = *(void *)(*(void *)this + 496);
  if (v2 != v3) {
    goto LABEL_74;
  }
  std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>((std::string *)&__p, (char *)(v1 + 376));
  MEMORY[0x210559330](&v41, &__p, 0, 0);
  if (SBYTE7(v37) < 0) {
    operator delete((void *)__p);
  }
  while (v41.__imp_.__ptr_)
  {
    int v4 = std::__fs::filesystem::directory_iterator::__dereference(&v41);
    if (SHIBYTE(v4->__p_.__pn_.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&p, v4->__p_.__pn_.__r_.__value_.__l.__data_, v4->__p_.__pn_.__r_.__value_.__l.__size_);
    }
    else {
      std::string p = (std::string)v4->__p_;
    }
    std::__fs::filesystem::path::__string_view v5 = std::__fs::filesystem::path::__filename((const std::__fs::filesystem::path *)&p);
    if (v5.__size_ >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    if (v5.__size_ >= 0x17)
    {
      std::basic_string_view<_CharT, _Traits>::size_type v7 = (v5.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v5.__size_ | 7) != 0x17) {
        std::basic_string_view<_CharT, _Traits>::size_type v7 = v5.__size_ | 7;
      }
      std::basic_string_view<_CharT, _Traits>::size_type v8 = v7 + 1;
      p_std::string p = (long long *)operator new(v7 + 1);
      *((void *)&__p + 1) = v5.__size_;
      *(void *)&long long v37 = v8 | 0x8000000000000000;
      *(void *)&long long __p = p_p;
LABEL_15:
      memmove(p_p, v5.__data_, v5.__size_);
      goto LABEL_16;
    }
    BYTE7(v37) = v5.__size_;
    p_std::string p = &__p;
    if (v5.__size_) {
      goto LABEL_15;
    }
LABEL_16:
    *((unsigned char *)p_p + v5.__size_) = 0;
    uint64_t v9 = (void *)__p;
    v38[0] = v37;
    *(_DWORD *)((char *)v38 + 3) = *(_DWORD *)((char *)&v37 + 3);
    int v10 = BYTE7(v37);
    if ((BYTE7(v37) & 0x80) == 0)
    {
      *(_OWORD *)&v39.__r_.__value_.__l.__data_ = __p;
      LODWORD(v39.__r_.__value_.__r.__words[2]) = v38[0];
      *(_DWORD *)((char *)&v39.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v38 + 3);
      *((unsigned char *)&v39.__r_.__value_.__s + 23) = BYTE7(v37);
      goto LABEL_20;
    }
    std::string::__init_copy_ctor_external(&v39, (const std::string::value_type *)__p, *((std::string::size_type *)&__p + 1));
    operator delete(v9);
    if ((SHIBYTE(v39.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      int v10 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
LABEL_20:
      if (v10 == 4)
      {
        if (LODWORD(v39.__r_.__value_.__l.__data_) == 1718510701
          || LODWORD(v39.__r_.__value_.__l.__data_) == 2019847785)
        {
          goto LABEL_32;
        }
        uint64_t v11 = &v39;
LABEL_24:
        if (LODWORD(v11->__r_.__value_.__l.__data_) == 1718513266) {
          goto LABEL_32;
        }
        goto LABEL_30;
      }
      goto LABEL_30;
    }
    if (v39.__r_.__value_.__l.__size_ == 4)
    {
      uint64_t v11 = (std::string *)v39.__r_.__value_.__r.__words[0];
      if (*(_DWORD *)v39.__r_.__value_.__l.__data_ == 2019847785
        || *(_DWORD *)v39.__r_.__value_.__l.__data_ == 1718510701)
      {
        goto LABEL_32;
      }
      goto LABEL_24;
    }
LABEL_30:
    if (*(void *)(v1 + 272) || std::string::compare(&v39, 0, 4uLL, "clc_")) {
      goto LABEL_62;
    }
LABEL_32:
    MemoryMap::MemoryMap((std::__shared_weak_count **)&__p, (uint64_t)&p);
    uint64_t v13 = *(char **)(v1 + 496);
    unint64_t v12 = *(void *)(v1 + 504);
    if ((unint64_t)v13 < v12)
    {
      *(void *)uint64_t v13 = __p;
      uint64_t v14 = *((void *)&__p + 1);
      *((void *)v13 + 1) = *((void *)&__p + 1);
      if (v14) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
      }
      *((_OWORD *)v13 + 1) = v37;
      uint64_t v15 = v13 + 32;
      *(void *)(v1 + 496) = v13 + 32;
      goto LABEL_60;
    }
    uint64_t v16 = *(char **)(v1 + 488);
    uint64_t v17 = (v13 - v16) >> 5;
    unint64_t v18 = v17 + 1;
    if ((unint64_t)(v17 + 1) >> 59) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v19 = v12 - (void)v16;
    if (v19 >> 4 > v18) {
      unint64_t v18 = v19 >> 4;
    }
    if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v20 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v20 = v18;
    }
    if (v20)
    {
      if (v20 >> 59) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v21 = (char *)operator new(32 * v20);
    }
    else
    {
      uint64_t v21 = 0;
    }
    uint64_t v22 = *((void *)&__p + 1);
    uint64_t v23 = &v21[32 * v17];
    *(void *)uint64_t v23 = __p;
    *((void *)v23 + 1) = v22;
    if (v22)
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v22 + 8), 1uLL, memory_order_relaxed);
      uint64_t v16 = *(char **)(v1 + 488);
      uint64_t v13 = *(char **)(v1 + 496);
    }
    uint64_t v24 = &v21[32 * v20];
    *((_OWORD *)v23 + 1) = v37;
    uint64_t v15 = v23 + 32;
    if (v13 != v16)
    {
      uint64_t v25 = v13;
      std::string::size_type v26 = &v21[32 * v17];
      do
      {
        uint64_t v27 = *((void *)v25 - 4);
        v25 -= 32;
        *((void *)v26 - 4) = v27;
        v26 -= 32;
        uint64_t v28 = *((void *)v25 + 1);
        *((void *)v26 + 1) = v28;
        if (v28) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v28 + 8), 1uLL, memory_order_relaxed);
        }
        *((_OWORD *)v23 - 1) = *((_OWORD *)v13 - 1);
        uint64_t v13 = v25;
        uint64_t v23 = v26;
      }
      while (v25 != v16);
      std::string v29 = *(char **)(v1 + 488);
      uint64_t v16 = *(char **)(v1 + 496);
      *(void *)(v1 + 488) = v26;
      *(void *)(v1 + 496) = v15;
      *(void *)(v1 + 504) = v24;
      if (v16 != v29)
      {
        do
        {
          int64x2_t v30 = (std::__shared_weak_count *)*((void *)v16 - 3);
          if (v30) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v30);
          }
          v16 -= 32;
        }
        while (v16 != v29);
        uint64_t v16 = v29;
      }
      if (!v16) {
        goto LABEL_60;
      }
LABEL_59:
      operator delete(v16);
      goto LABEL_60;
    }
    *(void *)(v1 + 488) = v23;
    *(void *)(v1 + 496) = v15;
    *(void *)(v1 + 504) = v24;
    if (v16) {
      goto LABEL_59;
    }
LABEL_60:
    *(void *)(v1 + 496) = v15;
    if (*((void *)&__p + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&__p + 1));
    }
LABEL_62:
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v39.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(p.__r_.__value_.__l.__data_);
    }
    std::__fs::filesystem::directory_iterator::__increment(&v41, 0);
  }
  if (v41.__imp_.__cntrl_) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v41.__imp_.__cntrl_);
  }
  uint64_t v2 = *(void *)(v1 + 488);
  uint64_t v3 = *(void *)(v1 + 496);
LABEL_74:
  while (v2 != v3)
  {
    UChar32 v31 = *(std::__shared_weak_count **)(v2 + 8);
    if (v31) {
      atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    madvise(*(void **)(v2 + 16), *(void *)(v2 + 24), 3);
    if (v31) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v31);
    }
    v2 += 32;
  }
  double result = *(uint64_t ***)(v1 + 280);
  if (result)
  {
    double result = (uint64_t **)((uint64_t (*)(uint64_t **))(*result)[8])(result);
    uint64_t v33 = *result;
    uint64_t v34 = result[1];
    while (v33 != v34)
    {
      uint64_t v35 = *v33;
      v33 += 2;
      double result = (uint64_t **)(*(uint64_t (**)(uint64_t))(*(void *)v35 + 40))(v35);
    }
  }
  return result;
}

void sub_20D46CF28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t TTSSynthesizer::set_log_level(uint64_t this)
{
  Diagnostics::s_log_level = this;
  return this;
}

void TTSSynthesizer::set_neural_cost(uint64_t *a1, int a2)
{
  void (***v34)(uint64_t *__return_ptr);
  std::__shared_weak_count *v35;
  uint64_t v36;
  std::string::size_type v37;
  std::__shared_weak_count *v38;
  const void **v39;
  const void **v40;
  const void **v41;
  int v42;
  uint64_t v43[2];
  void v44[2];
  uint64_t v45;
  std::__shared_weak_count *v46;
  uint64_t v47[3];
  std::__shared_weak_count *v48;
  void (***v49)(uint64_t *__return_ptr);
  std::__shared_weak_count *v50;
  unsigned char __p[12];
  __int16 v52;
  char *v53;
  char v54;
  long long buf;
  uint64_t v56;
  uint64_t v57;

  int v57 = *MEMORY[0x263EF8340];
  uint64_t v2 = *a1;
  if (*(_DWORD *)(*a1 + 480) != a2)
  {
    unsigned int v3 = *(_DWORD *)(v2 + 368);
    BOOL v4 = v3 > 4;
    int v5 = (1 << v3) & 0x1A;
    BOOL v6 = v4 || v5 == 0;
    if (!v6 && *(void *)(v2 + 280) && *(void *)(v2 + 256) && *(void *)(v2 + 240))
    {
      if (Diagnostics_GetLogObject(void)::onceToken != -1) {
        dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
      }
      std::basic_string_view<_CharT, _Traits>::size_type v8 = Diagnostics_GetLogObject(void)::__profile_log_default;
      if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
      {
        if (a2 == 1) {
          int v10 = "lowcost";
        }
        else {
          int v10 = "normal";
        }
        LODWORD(buf) = 136315138;
        *(void *)((char *)&buf + 4) = v10;
        _os_log_impl(&dword_20CD80000, v8, OS_LOG_TYPE_DEFAULT, "Switching to cost mode: %s", (uint8_t *)&buf, 0xCu);
      }
      if (a2 == 1) {
        uint64_t v11 = "lowcost";
      }
      else {
        uint64_t v11 = "normal";
      }
      if (a2 == 1) {
        unint64_t v12 = "lowcost";
      }
      else {
        unint64_t v12 = &byte_20D5A22AE;
      }
      Diagnostics::log(5, "Switching to cost mode: %s", v9, v11);
      uint64_t v13 = *(std::__shared_weak_count **)(v2 + 248);
      uint64_t v14 = *(void *)(v2 + 256);
      v47[0] = *(void *)(v2 + 240);
      v47[1] = (uint64_t)v13;
      if (v13) {
        atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(&buf, v12);
      PersistentModuleFactory::switch_module_mode_from_config(v14, v2 + 568, v47, (const void **)&buf);
      if (SHIBYTE(v56) < 0) {
        operator delete((void *)buf);
      }
      uint64_t v42 = a2;
      if (v13) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v13);
      }
      uint64_t v15 = (void **)(*(uint64_t (**)(void))(**(void **)(v2 + 280) + 64))(*(void *)(v2 + 280));
      long long buf = 0uLL;
      uint64_t v56 = 0;
      std::vector<std::shared_ptr<Module>>::__init_with_size[abi:ne180100]<std::shared_ptr<Module>*,std::shared_ptr<Module>*>((uint64_t)&buf, *v15, v15[1], ((char *)v15[1] - (char *)*v15) >> 4);
      uint64_t v17 = (void *)*((void *)&buf + 1);
      uint64_t v16 = (void *)buf;
      if ((void)buf != *((void *)&buf + 1))
      {
        while (1)
        {
          unint64_t v18 = *(void **)(*v16 + 96);
          if (v18) {
            break;
          }
LABEL_61:
          v16 += 2;
          if (v16 == v17) {
            goto LABEL_81;
          }
        }
        std::string::basic_string[abi:ne180100]<0>(__p, v12);
        uint64_t v19 = (const void **)(v18 + 4);
        uint64_t v20 = v18[4];
        if (!v20) {
          goto LABEL_37;
        }
        uint64_t v21 = (const void ***)(v18 + 3);
        uint64_t v22 = (const void **)(v18 + 4);
        do
        {
          BOOL v23 = std::less<std::string>::operator()[abi:ne180100]((uint64_t)(v18 + 5), (const void **)(v20 + 32), (const void **)__p);
          uint64_t v24 = (uint64_t *)(v20 + 8);
          if (!v23)
          {
            uint64_t v24 = (uint64_t *)v20;
            uint64_t v22 = (const void **)v20;
          }
          uint64_t v20 = *v24;
        }
        while (*v24);
        if (v22 == v19
          || std::less<std::string>::operator()[abi:ne180100]((uint64_t)(v18 + 5), (const void **)__p, v22 + 4))
        {
LABEL_37:
          uint64_t v45 = 0;
          long long v46 = 0;
        }
        else
        {
          if (!*std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__find_equal<std::string>((uint64_t)(v18 + 3), &v49, (const void **)__p))std::__throw_out_of_range[abi:ne180100]("map::at:  key not found"); {
          SharedObjectPool::get<ModuleFactory>(&v49, v18[6]);
          }
          uint64_t v34 = v49;
          uint64_t v35 = (std::__shared_weak_count *)v18[7];
          v47[2] = v18[6];
          long long v48 = v35;
          if (v35) {
            atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          (**v34)(&v45);
          if (v48) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v48);
          }
          std::string v36 = v45;
          long long v37 = v18[6];
          uint64_t v38 = (std::__shared_weak_count *)v18[7];
          if (v38) {
            atomic_fetch_add_explicit(&v38->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          Module::enable_hot_plugging(v36, (uint64_t)v18, v37, v38);
          if (v38) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v38);
          }
          std::string v39 = *v21;
          if (*v21 != v19)
          {
            do
            {
              ModuleBuilder::add_config(*(void *)(v45 + 96), (uint64_t)(v39 + 4), (uint64_t)(v39 + 7));
              unsigned int v40 = (const void **)v39[1];
              if (v40)
              {
                do
                {
                  std::__fs::filesystem::directory_iterator v41 = v40;
                  unsigned int v40 = (const void **)*v40;
                }
                while (v40);
              }
              else
              {
                do
                {
                  std::__fs::filesystem::directory_iterator v41 = (const void **)v39[2];
                  BOOL v6 = *v41 == v39;
                  std::string v39 = v41;
                }
                while (!v6);
              }
              std::string v39 = v41;
            }
            while (v41 != v19);
          }
          if (v50) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v50);
          }
        }
        if (v54 < 0) {
          operator delete(*(void **)__p);
        }
        uint64_t v25 = v45;
        if (!v45)
        {
          if (Diagnostics_GetLogObject(void)::onceToken != -1) {
            dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
          }
          std::string v29 = Diagnostics_GetLogObject(void)::__profile_log_default;
          if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
          {
            UChar32 v31 = *(uint64_t ***)(*v16 + 96);
            if (*((char *)v31 + 23) < 0) {
              UChar32 v31 = (uint64_t **)*v31;
            }
            *(_DWORD *)long long __p = 136315394;
            *(void *)&__p[4] = v31;
            unsigned int v52 = 2080;
            int v53 = v12;
            _os_log_impl(&dword_20CD80000, v29, OS_LOG_TYPE_ERROR, "Unable to re-create module '%s' for config '%s'", __p, 0x16u);
          }
          uint64_t v32 = *(uint64_t **)(*v16 + 96);
          if (*((char *)v32 + 23) < 0) {
            uint64_t v32 = (uint64_t *)*v32;
          }
          Diagnostics::log(3, "Unable to re-create module '%s' for config '%s'", v30, v32, v12);
          goto LABEL_57;
        }
        uint64_t v26 = *(void *)(v2 + 280);
        uint64_t v27 = (std::__shared_weak_count *)v16[1];
        v44[0] = *v16;
        v44[1] = v27;
        if (v27) {
          atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v28 = v46;
        v43[0] = v25;
        v43[1] = (uint64_t)v46;
        if (v46)
        {
          atomic_fetch_add_explicit(&v46->__shared_owners_, 1uLL, memory_order_relaxed);
          Pipeline::replace_module(v26, v44, v43);
          std::__shared_weak_count::__release_shared[abi:ne180100](v28);
          if (!v27) {
            goto LABEL_57;
          }
        }
        else
        {
          Pipeline::replace_module(v26, v44, v43);
          if (!v27)
          {
LABEL_57:
            uint64_t v33 = (std::__shared_weak_count *)v16[1];
            *uint64_t v16 = 0;
            v16[1] = 0;
            if (v33) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v33);
            }
            if (v46) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v46);
            }
            goto LABEL_61;
          }
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v27);
        goto LABEL_57;
      }
LABEL_81:
      std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::__clear[abi:ne180100]((uint64_t *)(*(void *)(v2 + 256) + 88));
      *(_DWORD *)(v2 + 480) = v42;
      *(void *)long long __p = &buf;
      std::vector<std::shared_ptr<TacotronFeature>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    }
  }
}

void sub_20D46D514(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (*(char *)(v33 - 105) < 0) {
    operator delete(*(void **)(v33 - 128));
  }
  if (v32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v32);
  }
  _Unwind_Resume(exception_object);
}

void TTSSynthesizer::set_dynamic_prompt(uint64_t *a1, std::string *a2)
{
  uint64_t v63 = *MEMORY[0x263EF8340];
  uint64_t v2 = *a1;
  if (*(_DWORD *)(*a1 + 368) != 4)
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    uint64_t v11 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_20CD80000, v11, OS_LOG_TYPE_DEBUG, "Ignore dynamic prompt for non-natural voices", buf, 2u);
    }
    Diagnostics::log(7, "Ignore dynamic prompt for non-natural voices", v12);
    return;
  }
  SharedObjectPool::get<SynthesizerConfig>(buf, *(void *)(v2 + 240));
  BOOL v4 = (const void **)(*(void *)buf + 96);
  uint64_t v5 = *(unsigned __int8 *)(*(void *)buf + 119);
  if ((v5 & 0x80u) == 0) {
    uint64_t v6 = *(unsigned __int8 *)(*(void *)buf + 119);
  }
  else {
    uint64_t v6 = *(void *)(*(void *)buf + 104);
  }
  std::string::size_type size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  int v8 = (char)size;
  if ((size & 0x80u) != 0) {
    std::string::size_type size = a2->__r_.__value_.__l.__size_;
  }
  if (v6 == size)
  {
    if (v8 >= 0) {
      uint64_t v9 = a2;
    }
    else {
      uint64_t v9 = (std::string *)a2->__r_.__value_.__r.__words[0];
    }
    if ((v5 & 0x80) == 0)
    {
      if (*(unsigned char *)(*(void *)buf + 119))
      {
        int v10 = (unsigned __int8 *)(*(void *)buf + 96);
        while (*v10 == v9->__r_.__value_.__s.__data_[0])
        {
          ++v10;
          uint64_t v9 = (std::string *)((char *)v9 + 1);
          if (!--v5) {
            goto LABEL_36;
          }
        }
        goto LABEL_23;
      }
LABEL_36:
      if (Diagnostics_GetLogObject(void)::onceToken != -1) {
        dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
      }
      uint64_t v19 = Diagnostics_GetLogObject(void)::__profile_log_default;
      if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
      {
        if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v21 = a2;
        }
        else {
          uint64_t v21 = (std::string *)a2->__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)uint64_t v61 = 136315138;
        uint64_t v62 = v21;
        _os_log_impl(&dword_20CD80000, v19, OS_LOG_TYPE_DEBUG, "Prompt '%s' has been set previously.", v61, 0xCu);
      }
      if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v22 = a2;
      }
      else {
        uint64_t v22 = (std::string *)a2->__r_.__value_.__r.__words[0];
      }
      Diagnostics::log(7, "Prompt '%s' has been set previously.", v20, v22);
      goto LABEL_139;
    }
    if (!memcmp(*v4, v9, *(void *)(*(void *)buf + 104))) {
      goto LABEL_36;
    }
  }
LABEL_23:
  int v57 = (std::string *)v4;
  uint64_t v13 = *(void *)(v2 + 280);
  uint64_t v14 = *(void *)(v13 + 8);
  if (v14 == *(void *)(v13 + 16)) {
    goto LABEL_53;
  }
  while (1)
  {
    if (!*(void *)v14) {
      goto LABEL_34;
    }
    if (v15) {
      break;
    }
LABEL_32:
    if (*(void *)v14
    {
      uint64_t v17 = *(std::__shared_weak_count **)(v14 + 8);
      if (!v17) {
        goto LABEL_53;
      }
      atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
      goto LABEL_52;
    }
LABEL_34:
    v14 += 16;
    if (v14 == *(void *)(v13 + 16)) {
      goto LABEL_53;
    }
  }
  uint64_t v16 = v15;
  uint64_t v17 = *(std::__shared_weak_count **)(v14 + 8);
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v18 = (const void *)v15[34];
  if (!v18
  {
    if (v17) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v17);
    }
    goto LABEL_32;
  }
  BOOL v23 = (std::__shared_weak_count *)v16[35];
  if (v23)
  {
    atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  if (v17) {
LABEL_52:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
LABEL_53:
  if (*(void *)(v13 + 16) == v14)
  {
    uint64_t v24 = 0;
    uint64_t v28 = 0;
  }
  else
  {
    uint64_t v24 = *(void ***)v14;
    if (*(void *)v14
    {
      uint64_t v26 = v25;
      uint64_t v27 = *(std::__shared_weak_count **)(v14 + 8);
      if (v27) {
        atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v24 = (void **)v26[34];
      uint64_t v28 = (std::__shared_weak_count *)v26[35];
      if (v28) {
        atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v27) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v27);
      }
    }
    else
    {
      uint64_t v28 = *(std::__shared_weak_count **)(v14 + 8);
      if (v28) {
        atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
      }
    }
  }
  uint64_t v58 = v28;
  uint64_t v29 = *(void *)(v2 + 280);
  uint64_t v30 = *(void *)(v29 + 8);
  if (v30 == *(void *)(v29 + 16)) {
    goto LABEL_84;
  }
  while (2)
  {
    if (!*(void *)v30)
    {
LABEL_76:
      v30 += 16;
      if (v30 == *(void *)(v29 + 16)) {
        goto LABEL_84;
      }
      continue;
    }
    break;
  }
  if (!v31)
  {
LABEL_74:
    if (*(void *)v30
    {
      uint64_t v33 = *(std::__shared_weak_count **)(v30 + 8);
      if (!v33) {
        goto LABEL_84;
      }
      atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
      goto LABEL_83;
    }
    goto LABEL_76;
  }
  uint64_t v32 = v31;
  uint64_t v33 = *(std::__shared_weak_count **)(v30 + 8);
  if (v33) {
    atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v34 = (const void *)v31[34];
  if (!v34
  {
    if (v33) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v33);
    }
    goto LABEL_74;
  }
  uint64_t v35 = (std::__shared_weak_count *)v32[35];
  if (v35)
  {
    atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v35);
  }
  if (v33) {
LABEL_83:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
LABEL_84:
  if (*(void *)(v29 + 16) == v30)
  {
    unsigned int v40 = 0;
    uint64_t v41 = Diagnostics_GetLogObject(void)::onceToken;
LABEL_117:
    if (v41 != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    long long v46 = v58;
    unsigned int v51 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t v61 = 0;
      _os_log_impl(&dword_20CD80000, v51, OS_LOG_TYPE_DEBUG, "Ignore voices without Soundstorm and FS2S1 encoder.", v61, 2u);
    }
    uint64_t v50 = "Ignore voices without Soundstorm and FS2S1 encoder.";
    uint64_t v52 = 7;
    goto LABEL_135;
  }
  std::string v36 = *(void ***)v30;
  if (*(void *)v30
  {
    uint64_t v38 = v37;
    std::string v39 = *(std::__shared_weak_count **)(v30 + 8);
    if (v39) {
      atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string v36 = (void **)*((void *)v38 + 34);
    unsigned int v40 = (std::__shared_weak_count *)*((void *)v38 + 35);
    if (v40) {
      atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v39) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v39);
    }
  }
  else
  {
    unsigned int v40 = *(std::__shared_weak_count **)(v30 + 8);
    if (v40) {
      atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  uint64_t v41 = Diagnostics_GetLogObject(void)::onceToken;
  if (!v24 || !v36) {
    goto LABEL_117;
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  uint64_t v42 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v44 = a2;
    }
    else {
      uint64_t v44 = (std::string *)a2->__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)uint64_t v61 = 136315138;
    uint64_t v62 = v44;
    _os_log_impl(&dword_20CD80000, v42, OS_LOG_TYPE_DEFAULT, "Setting prompt style as %s", v61, 0xCu);
  }
  if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v45 = a2;
  }
  else {
    uint64_t v45 = (std::string *)a2->__r_.__value_.__r.__words[0];
  }
  Diagnostics::log(5, "Setting prompt style as %s", v43, v45);
  if ((*(uint64_t (**)(void *, std::string *))(*v24[34] + 24))(v24[34], a2))
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    long long v46 = v58;
    long long v47 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
    {
      if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        UChar32 v49 = a2;
      }
      else {
        UChar32 v49 = (std::string *)a2->__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)uint64_t v61 = 136315138;
      uint64_t v62 = v49;
      _os_log_impl(&dword_20CD80000, v47, OS_LOG_TYPE_ERROR, "Unable to set Soundstorm with prompt '%s'", v61, 0xCu);
    }
    uint64_t v50 = "Unable to set Soundstorm with prompt '%s'";
    goto LABEL_131;
  }
  if ((*(uint64_t (**)(void *, std::string *))(*v36[44] + 8))(v36[44], a2))
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    int v53 = Diagnostics_GetLogObject(void)::__profile_log_default;
    long long v46 = v58;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
    {
      if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v54 = a2;
      }
      else {
        int v54 = (std::string *)a2->__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)uint64_t v61 = 136315138;
      uint64_t v62 = v54;
      _os_log_impl(&dword_20CD80000, v53, OS_LOG_TYPE_ERROR, "Unable to set FS2S1Encoder with prompt '%s'", v61, 0xCu);
    }
    uint64_t v50 = "Unable to set FS2S1Encoder with prompt '%s'";
LABEL_131:
    if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v55 = a2;
    }
    else {
      int v55 = (std::string *)a2->__r_.__value_.__r.__words[0];
    }
    uint64_t v56 = v55;
    uint64_t v52 = 3;
LABEL_135:
    Diagnostics::log(v52, v50, v48, v56);
    if (v40) {
LABEL_136:
    }
      std::__shared_weak_count::__release_shared[abi:ne180100](v40);
  }
  else
  {
    std::string::operator=(v57, a2);
    long long v46 = v58;
    if (v40) {
      goto LABEL_136;
    }
  }
  if (v46) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v46);
  }
LABEL_139:
  if (v60) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v60);
  }
}

void sub_20D46DF2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  _Unwind_Resume(exception_object);
}

void TTSSynthesizer::preprocess_for_vendor_voice(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, std::string *a8@<X8>)
{
}

void SiriTTS::strip_markup(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  void (***v12)(uint64_t *__return_ptr, void, long long *, long long *, long long *, void);
  std::__shared_weak_count *v13;
  FrontendModuleBroker *v14;
  uint64_t v15;
  long long v16;
  __n128 v17;
  long long v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  int v23;
  uint64_t v25;
  int v26;
  const std::string::value_type *v27;
  std::string::size_type v28;
  std::__shared_weak_count *v29;
  long long v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  void *__p[2];
  char v34;
  long long v35;
  long long v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  char *v39;
  std::__shared_weak_count *v40;
  long long v41;
  void (***v42)(uint64_t *__return_ptr, void, long long *, long long *, long long *, void);
  std::__shared_weak_count *v43;
  long long v44;
  char v45;
  long long v46;
  char v47;

  BOOL v4 = (char *)operator new(0xD8uLL);
  *(_OWORD *)(v4 + 8) = 0u;
  *(_OWORD *)(v4 + ++*(_DWORD *)(result + 24) = 0u;
  uint64_t v5 = (FrontendEnvironment *)(v4 + 24);
  *(void *)BOOL v4 = off_26C216D70;
  *(_OWORD *)(v4 + 120) = 0u;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_OWORD *)(v4 + 88) = 0u;
  *((void *)v4 + 13) = 0;
  *(_OWORD *)(v4 + 136) = 0u;
  *(_OWORD *)(v4 + 152) = 0u;
  v4[168] = 0;
  *((_OWORD *)v4 + 12) = 0u;
  *((void *)v4 + 22) = 0;
  *((void *)v4 + 23) = v4 + 192;
  *((void *)v4 + 26) = v4 + 24;
  uint64_t v6 = operator new(0x38uLL);
  v6[1] = 0;
  v6[2] = 0;
  void *v6 = off_26C2163D0;
  v6[3] = off_26C201700;
  void v6[4] = 0;
  v6[5] = 0;
  v6[6] = 0;
  *(void *)&long long v7 = v6 + 3;
  *((void *)&v7 + 1) = v6;
  *(_OWORD *)(v4 + 120) = v7;
  int v8 = (std::string *)operator new(0x48uLL);
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = (std::string::size_type)off_26C215368;
  std::string::basic_string[abi:ne180100]<0>(&v46, &byte_20D5A22AE);
  std::string::basic_string[abi:ne180100]<0>(&v44, &byte_20D5A22AE);
  Environment::Environment(v8 + 1, &v46, &v44);
  if (v45 < 0) {
    operator delete((void *)v44);
  }
  if (v47 < 0) {
    operator delete((void *)v46);
  }
  std::allocate_shared[abi:ne180100]<SharedObjectPool,std::allocator<SharedObjectPool>,std::shared_ptr<Environment> &,void>(&v44, (uint64_t)&v8[1], (std::__shared_weak_count *)v8);
  PersistentModuleFactory::create((PersistentModuleFactory *)&v42);
  long long v9 = v44;
  if (*((void *)&v44 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v44 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  int v10 = (std::__shared_weak_count *)*((void *)v4 + 20);
  *(_OWORD *)(v4 + 152) = v9;
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  std::string v39 = v4 + 24;
  unsigned int v40 = (std::__shared_weak_count *)v4;
  atomic_fetch_add_explicit((atomic_ullong *volatile)v4 + 1, 1uLL, memory_order_relaxed);
  SharedObjectPool::inject<FrontendEnvironment>(&v41, v9, (unint64_t *)&v39);
  if (*((void *)&v41 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v41 + 1));
  }
  if (v40) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v40);
  }
  unint64_t v12 = v42;
  uint64_t v11 = v43;
  if (v43) {
    atomic_fetch_add_explicit(&v43->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v13 = *(std::__shared_weak_count **)(v9 + 24);
  *(void *)(v9 + 16) = v12;
  *(void *)(v9 + ++*(_DWORD *)(result + 24) = v11;
  if (v13) {
    std::__shared_weak_count::__release_weak(v13);
  }
  FrontendEnvironment::load_configuration(v5);
  std::string::basic_string[abi:ne180100]<0>(&v46, "parse");
  LOBYTE(v36) = 0;
  *((void *)&v36 + 1) = 0;
  uint64_t v35 = v9;
  if (*((void *)&v9 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v9 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  (**v12)(&v37, v12, &v46, &v36, &v35, 0);
  if (v38) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v38);
  }
  if (*((void *)&v35 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v35 + 1));
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v36 + 1, v36);
  if (v47 < 0) {
    operator delete((void *)v46);
  }
  uint64_t v15 = FrontendModuleBroker::instance(v14);
  std::string::basic_string[abi:ne180100]<0>(__p, "parse");
  UChar32 v31 = 0;
  uint64_t v32 = 0;
  FrontendModuleBroker::create(&v46, v15, (const char *)__p, &v31, (std::string::size_type)v5);
  if (v32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v32);
  }
  if (v34 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v16 = v46;
  uint64_t v30 = v46;
  if (*((void *)&v46 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v46 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v17 = FrontendModule::head(&v36, &v30);
  unint64_t v18 = v36;
  if (*((void *)&v36 + 1))
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v36 + 1) + 8), 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v18 + 1));
  }
  if (*((void *)&v30 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v30 + 1));
  }
  uint64_t v29 = v11;
  (*(void (**)(void, uint64_t, __n128))(*(void *)v18 + 56))(v18, a1, v17);
  uint64_t v19 = 0;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  do
  {
    (*(void (**)(long long *__return_ptr, void, void))(*(void *)v16 + 16))(&v36, v16, 0);
    uint64_t v20 = v36;
    if ((void)v36)
    {
      if ((void *)(v20 + 8) != v21)
      {
        uint64_t v22 = v21[5];
        BOOL v23 = *(_DWORD *)(v22 + 8);
        if (v23 == 1952807028 || v23 == 1885892462)
        {
          uint64_t v25 = *(unsigned __int8 *)(a2 + 23);
          if ((v25 & 0x80u) != 0) {
            uint64_t v25 = *(void *)(a2 + 8);
          }
          if (v25 && *(void *)(v22 + 16) != v19) {
            std::string::push_back((std::string *)a2, 32);
          }
          uint64_t v26 = *(char *)(v22 + 55);
          if (v26 >= 0) {
            uint64_t v27 = (const std::string::value_type *)(v22 + 32);
          }
          else {
            uint64_t v27 = *(const std::string::value_type **)(v22 + 32);
          }
          if (v26 >= 0) {
            uint64_t v28 = *(unsigned __int8 *)(v22 + 55);
          }
          else {
            uint64_t v28 = *(void *)(v22 + 40);
          }
          std::string::append((std::string *)a2, v27, v28);
          uint64_t v19 = *(void *)(v22 + 24) + *(void *)(v22 + 16);
        }
      }
      (*(void (**)(void))(*(void *)v16 + 32))(v16);
    }
    if (*((void *)&v36 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v36 + 1));
    }
  }
  while (v20);
  if (*((void *)&v18 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v18 + 1));
  }
  if (*((void *)&v16 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v16 + 1));
  }
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
  if (*((void *)&v9 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v9 + 1));
  }
  std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v8);
  std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v4);
}

void sub_20D46E48C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, std::__shared_weak_count *a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  if (v31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  }
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  uint64_t v34 = *(std::__shared_weak_count **)(v32 - 144);
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  std::__shared_weak_count::__release_shared[abi:ne180100](v30);
  _Unwind_Resume(a1);
}

uint64_t gryphon_HasPhaticResponses(char *__s)
{
  std::string::basic_string[abi:ne180100]<0>(__p, __s);
  uint64_t has_phatic_responses = TTSSynthesizer::has_phatic_responses((char *)__p);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  return has_phatic_responses;
}

void sub_20D46E634(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t gryphon_GetMinCompatibilityVersion()
{
  return 9;
}

uint64_t gryphon_GetCurrentCompatibilityVersion()
{
  return 68;
}

void DetectSSMLImpl::~DetectSSMLImpl(std::locale *this)
{
  this->__locale_ = (std::locale::__imp *)&off_26C200A10;
  uint64_t v2 = this + 25;
  locale = (std::__shared_weak_count *)this[31].__locale_;
  if (locale) {
    std::__shared_weak_count::__release_shared[abi:ne180100](locale);
  }
  std::locale::~locale(v2);
  char v4 = (std::__shared_weak_count *)this[23].__locale_;
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  std::locale::~locale(this + 17);
  uint64_t v5 = (std::__shared_weak_count *)this[15].__locale_;
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  std::locale::~locale(this + 9);
  uint64_t v6 = (std::__shared_weak_count *)this[7].__locale_;
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  std::locale::~locale(this + 1);
  JUMPOUT(0x2105595E0);
}

{
  std::locale *v2;
  std::__shared_weak_count *locale;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  this->__locale_ = (std::locale::__imp *)&off_26C200A10;
  uint64_t v2 = this + 25;
  locale = (std::__shared_weak_count *)this[31].__locale_;
  if (locale) {
    std::__shared_weak_count::__release_shared[abi:ne180100](locale);
  }
  std::locale::~locale(v2);
  char v4 = (std::__shared_weak_count *)this[23].__locale_;
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  std::locale::~locale(this + 17);
  uint64_t v5 = (std::__shared_weak_count *)this[15].__locale_;
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  std::locale::~locale(this + 9);
  uint64_t v6 = (std::__shared_weak_count *)this[7].__locale_;
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  std::locale::~locale(this + 1);
}

uint64_t DetectSSMLImpl::is_ssml(uint64_t a1, char *a2)
{
  uint64_t v4 = a2[23];
  if ((v4 & 0x80u) == 0) {
    uint64_t v5 = a2;
  }
  else {
    uint64_t v5 = *(char **)a2;
  }
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *((void *)a2 + 1);
  }
  uint64_t result = std::regex_search[abi:ne180100]<std::__wrap_iter<char const*>,char,std::regex_traits<char>>(v5, &v5[v4], a1 + 8);
  if (result)
  {
    long long v7 = 0;
    int v8 = a2[23];
    unint64_t v9 = a2[23];
    BOOL v10 = v8 < 0;
    unint64_t v12 = *(char **)a2;
    unint64_t v11 = *((void *)a2 + 1);
    if (v8 >= 0) {
      uint64_t v13 = a2;
    }
    else {
      uint64_t v13 = *(char **)a2;
    }
    if (v8 >= 0) {
      unint64_t v14 = a2[23];
    }
    else {
      unint64_t v14 = *((void *)a2 + 1);
    }
    uint64_t v35 = a1 + 72;
    uint64_t v36 = a1 + 136;
    uint64_t v34 = a1 + 200;
    do
    {
      uint64_t v15 = &v7[(void)v13];
      uint64_t v16 = &v13[v14];
      while (1)
      {
        if (v16 - v15 < 6) {
          return 0;
        }
        uint64_t result = (uint64_t)memchr(v15, 60, v16 - v15 - 5);
        if (!result) {
          return result;
        }
        uint64_t v17 = result;
        if (*(_DWORD *)result == 1701868348 && *(_WORD *)(result + 4) == 27489) {
          break;
        }
        uint64_t v15 = (char *)(result + 1);
      }
      uint64_t result = 0;
      if ((char *)v17 == v16) {
        break;
      }
      uint64_t v19 = v17 - (void)v13;
      if (v19 == -1) {
        break;
      }
      long long v7 = (char *)(v19 + 6);
      if (v10) {
        uint64_t v20 = v12;
      }
      else {
        uint64_t v20 = a2;
      }
      if (v10) {
        unint64_t v21 = v11;
      }
      else {
        unint64_t v21 = v9;
      }
      if (std::regex_search[abi:ne180100]<std::__wrap_iter<char const*>,char,std::regex_traits<char>>(&v7[(void)v20], &v20[v21], v36))return 1; {
      uint64_t v22 = a2[23];
      }
      if ((v22 & 0x80u) == 0) {
        BOOL v23 = a2;
      }
      else {
        BOOL v23 = *(char **)a2;
      }
      if ((v22 & 0x80u) != 0) {
        uint64_t v22 = *((void *)a2 + 1);
      }
      uint64_t v24 = v7;
      if (std::regex_search[abi:ne180100]<std::__wrap_iter<char const*>,char,std::regex_traits<char>>(&v7[(void)v23], &v23[v22], v35))
      {
LABEL_37:
        unint64_t v9 = a2[23];
        unint64_t v11 = *((void *)a2 + 1);
        uint64_t v25 = *(char **)a2;
        if ((v9 & 0x80u) == 0) {
          uint64_t v26 = a2;
        }
        else {
          uint64_t v26 = *(char **)a2;
        }
        if ((v9 & 0x80u) == 0) {
          unint64_t v27 = a2[23];
        }
        else {
          unint64_t v27 = *((void *)a2 + 1);
        }
        if (v27 >= (unint64_t)v24)
        {
          uint64_t v28 = &v24[(void)v26];
          uint64_t v29 = &v26[v27];
          uint64_t v30 = v27 - (void)v24;
          if (v30 >= 7)
          {
            do
            {
              UChar32 v31 = (char *)memchr(v28, 60, v30 - 6);
              if (!v31) {
                break;
              }
              if (*(_DWORD *)v31 == 1886596924 && *(_DWORD *)(v31 + 3) == 1801545072)
              {
                if (v31 == v29) {
                  break;
                }
                uint64_t v24 = (char *)(v31 - v26);
                if (v31 - v26 == -1) {
                  break;
                }
                char v33 = std::regex_search[abi:ne180100]<std::__wrap_iter<char const*>,char,std::regex_traits<char>>(v31 + 7, v29, v34);
                uint64_t result = 1;
                if ((v33 & 1) == 0) {
                  goto LABEL_37;
                }
                return result;
              }
              uint64_t v28 = v31 + 1;
              uint64_t v30 = v29 - v28;
            }
            while (v29 - v28 >= 7);
          }
        }
      }
      else
      {
        unint64_t v9 = a2[23];
        uint64_t v25 = *(char **)a2;
        unint64_t v11 = *((void *)a2 + 1);
      }
      uint64_t result = 0;
      BOOL v10 = (v9 & 0x80u) != 0;
      if ((v9 & 0x80u) == 0) {
        uint64_t v13 = a2;
      }
      else {
        uint64_t v13 = v25;
      }
      if ((v9 & 0x80u) == 0) {
        unint64_t v14 = v9;
      }
      else {
        unint64_t v14 = v11;
      }
      unint64_t v12 = v25;
    }
    while (v14 >= (unint64_t)v7);
  }
  return result;
}

uint64_t std::regex_search[abi:ne180100]<std::__wrap_iter<char const*>,char,std::regex_traits<char>>(char *a1, char *a2, uint64_t a3)
{
  std::string::__init_with_size[abi:ne180100]<char const*,char const*>(v17, a1, a2, a2 - a1);
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  char v11 = 0;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  char v14 = 0;
  char v15 = 0;
  uint64_t v16 = 0;
  memset(__p, 0, 41);
  unint64_t v4 = v18;
  if ((v18 & 0x80u) == 0) {
    uint64_t v5 = (std::sub_match<const char *> *)v17;
  }
  else {
    uint64_t v5 = (std::sub_match<const char *> *)v17[0];
  }
  if ((v18 & 0x80u) != 0) {
    unint64_t v4 = (unint64_t)v17[1];
  }
  uint64_t v6 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(a3, v5, (std::sub_match<const char *> *)((char *)v5 + v4), __p, 64);
  if (__p[0].__begin_) {
    operator delete(__p[0].__begin_);
  }
  if ((char)v18 < 0) {
    operator delete(v17[0]);
  }
  return v6;
}

void sub_20D46EAC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  if (*(char *)(v9 - 17) < 0) {
    operator delete(*(void **)(v9 - 40));
  }
  _Unwind_Resume(exception_object);
}

void ParseImpl::inject_attributes(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 208);
  unsigned int v3 = (std::__shared_weak_count *)a2[1];
  uint64_t v4 = *a2;
  uint64_t v5 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v2 + 72))(v2, &v4);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void sub_20D46EB60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void *ParseImpl::parse_hydra_markups(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v10[4] = *MEMORY[0x263EF8340];
  uint64_t v8 = *(void *)(a1 + 208);
  std::__function::__value_func<void ()(std::deque<std::shared_ptr<Agglomerate>>)>::__value_func[abi:ne180100]((uint64_t)v10, a3);
  (*(void (**)(uint64_t, uint64_t, void *, uint64_t, uint64_t))(*(void *)v8 + 64))(v8, a2, v10, a4, a5);
  return std::__function::__value_func<void ()(std::deque<std::shared_ptr<Agglomerate>>)>::~__value_func[abi:ne180100](v10);
}

void sub_20D46EC2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(std::deque<std::shared_ptr<Agglomerate>>)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__value_func<void ()(std::deque<std::shared_ptr<Agglomerate>>)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + ++*(_DWORD *)(result + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + ++*(_DWORD *)(result + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + ++*(_DWORD *)(result + 24) = 0;
  }
  return a1;
}

void *std::__function::__value_func<void ()(std::deque<std::shared_ptr<Agglomerate>>)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void ParseImpl::set_text(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  int v6 = (***(uint64_t (****)(void))(a1 + 192))(*(void *)(a1 + 192));
  unint64_t v8 = *a3;
  long long v7 = (std::__shared_weak_count *)a3[1];
  if (v6)
  {
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = *(void *)(a1 + 240);
    if (!v9)
    {
      ParseSSML::create(&v18, 0, 0, *(void *)(a1 + 184));
      uint64_t v10 = *(std::__shared_weak_count **)(a1 + 248);
      *(__n128 *)(a1 + 240) = v18;
      if (v10) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v10);
      }
      uint64_t v9 = *(void *)(a1 + 240);
    }
    uint64_t v11 = *(void *)(a1 + 248);
    if (v11) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v12 = *(std::__shared_weak_count **)(a1 + 216);
    *(void *)(a1 + 208) = v9;
    *(void *)(a1 + 216) = v11;
    if (v12)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v12);
      uint64_t v9 = *(void *)(a1 + 208);
    }
    (*(void (**)(uint64_t))(*(void *)v9 + 24))(v9);
    uint64_t v13 = *(void *)(a1 + 208);
    v18.n128_u64[0] = v8;
    v18.n128_u64[1] = (unint64_t)v7;
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v14 = *(void *)(a1 + 224);
    if (!v14)
    {
      ParseLegacy::create(&v18, 0, 0, *(void *)(a1 + 184));
      char v15 = *(std::__shared_weak_count **)(a1 + 232);
      *(__n128 *)(a1 + 2++*(_DWORD *)(result + 24) = v18;
      if (v15) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v15);
      }
      uint64_t v14 = *(void *)(a1 + 224);
    }
    uint64_t v16 = *(void *)(a1 + 232);
    if (v16) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v17 = *(std::__shared_weak_count **)(a1 + 216);
    *(void *)(a1 + 208) = v14;
    *(void *)(a1 + 216) = v16;
    if (v17)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v17);
      uint64_t v14 = *(void *)(a1 + 208);
    }
    (*(void (**)(uint64_t))(*(void *)v14 + 24))(v14);
    uint64_t v13 = *(void *)(a1 + 208);
    v18.n128_u64[0] = v8;
    v18.n128_u64[1] = (unint64_t)v7;
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  (*(void (**)(uint64_t, uint64_t, __n128 *))(*(void *)v13 + 56))(v13, a2, &v18);
  if (v18.n128_u64[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v18.n128_u64[1]);
  }
  if (v7)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
}

void sub_20D46EFB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  _Unwind_Resume(exception_object);
}

void ParseImpl::generate_tokens(ParseImpl *this)
{
  (*(void (**)(uint64_t *__return_ptr))(**((void **)this + 2) + 16))(&v12);
  uint64_t v2 = v12;
  if (v12)
  {
    if ((void *)(v2 + 8) == v3)
    {
      exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
      StringFormatter::StringFormatter((StringFormatter *)&v11, "ParseImpl - TokenBasicItem is missing");
      MEMORY[0x210558D40](exception, &v11);
      __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
    }
    uint64_t v4 = v3[5];
    uint64_t v5 = v4 + 32;
    uint64_t v7 = *(void *)(v4 + 56);
    int v6 = *(std::__shared_weak_count **)(v4 + 64);
    uint64_t v9 = v7;
    uint64_t v10 = v6;
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(ParseImpl *, uint64_t, uint64_t *))(*(void *)this + 56))(this, v5, &v9);
    if (v10) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    }
    (*(void (**)(void))(**((void **)this + 2) + 32))(*((void *)this + 2));
  }
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  (*(void (**)(long long *__return_ptr))(**((void **)this + 26) + 16))(&v11);
  if ((void)v11)
  {
    std::deque<std::shared_ptr<Agglomerate>>::push_back((void *)this + 4, &v11);
    (*(void (**)(void))(**((void **)this + 26) + 32))(*((void *)this + 26));
  }
  else
  {
    *((unsigned char *)this + 8) = 1;
  }
  if (*((void *)&v11 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v11 + 1));
  }
}

void sub_20D46F1DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, std::__shared_weak_count *a19)
{
  if (a17 < 0)
  {
    operator delete(__p);
    if ((v20 & 1) == 0)
    {
LABEL_6:
      if (a19) {
        std::__shared_weak_count::__release_shared[abi:ne180100](a19);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v20)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v19);
  goto LABEL_6;
}

void sub_20D46F23C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (!a13) {
    JUMPOUT(0x20D46F234);
  }
  JUMPOUT(0x20D46F230);
}

void ParseImpl::~ParseImpl(ParseImpl *this)
{
  ParseImpl::~ParseImpl(this);
  JUMPOUT(0x2105595E0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t vars8;

  *(void *)this = off_26C205D68;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 31);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 29);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 27);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 25);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  *(void *)this = off_26C1FFFF0;
  if (*((char *)this + 183) < 0) {
    operator delete(*((void **)this + 20));
  }
  int v6 = (std::__shared_weak_count *)*((void *)this + 19);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 17);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  FrontendModule::~FrontendModule((void **)this);
}

uint64_t DetectSSML::instance(uint64_t this)
{
  uint64_t v1 = (void *)this;
  {
    if (this) {
      _ZNSt3__115allocate_sharedB8ne180100I14DetectSSMLImplNS_9allocatorIS1_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_();
    }
  }
  uint64_t v2 = *(void *)(DetectSSML::instance(void)::instance + 8);
  *uint64_t v1 = *(void *)DetectSSML::instance(void)::instance;
  v1[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

void sub_20D46F3F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(a1);
}

void _ZNSt3__115allocate_sharedB8ne180100I14DetectSSMLImplNS_9allocatorIS1_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_()
{
  uint64_t v0 = (char *)operator new(0x120uLL);
  *((void *)v0 + 1) = 0;
  *((void *)v0 + 2) = 0;
  *(void *)uint64_t v0 = off_26C215AD8;
  *((void *)v0 + 3) = &off_26C200A10;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((std::regex_traits<char> *)(v0 + 32), "(?:﻿)?\\s*<");
}

void sub_20D46F4E8(_Unwind_Exception *a1)
{
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(v4);
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(v3);
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(v2);
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v6);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<DetectSSMLImpl>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 8))();
}

void std::__shared_ptr_emplace<DetectSSMLImpl>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C215AD8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<DetectSSMLImpl>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C215AD8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void ParsePersistentModule::~ParsePersistentModule(ParsePersistentModule *this)
{
  *(void *)this = off_26C2030C0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 38);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  PersistentModule::~PersistentModule((void **)this);
  JUMPOUT(0x2105595E0);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = off_26C2030C0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 38);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  PersistentModule::~PersistentModule((void **)this);
}

__n128 Parse::create(__n128 *a1, uint64_t a2, std::__shared_weak_count *a3, uint64_t a4)
{
  unint64_t v8 = operator new(0x118uLL);
  unint64_t v9 = (unint64_t)v8;
  v8[1] = 0;
  void v8[2] = 0;
  void *v8 = off_26C218F20;
  uint64_t v10 = v8 + 3;
  if (a3)
  {
    atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
    ParserModule::ParserModule((uint64_t)(v8 + 3), a2, a3);
    std::__shared_weak_count::__release_shared[abi:ne180100](a3);
    *uint64_t v10 = off_26C2057D0;
    std::__shared_weak_count::__release_shared[abi:ne180100](a3);
  }
  else
  {
    ParserModule::ParserModule((uint64_t)(v8 + 3), a2, 0);
    *uint64_t v10 = off_26C2057D0;
  }
  *(void *)(v9 + ++*(_DWORD *)(result + 24) = off_26C205D68;
  *(void *)(v9 + 208) = a4;
  *(_OWORD *)(v9 + 216) = 0u;
  *(_OWORD *)(v9 + 232) = 0u;
  *(_OWORD *)(v9 + 248) = 0u;
  *(_OWORD *)(v9 + 264) = 0u;
  uint64_t v11 = *(void *)(a4 + 128);
  uint64_t v12 = *(std::__shared_weak_count **)(v11 + 24);
  if (v12)
  {
    uint64_t v13 = std::__shared_weak_count::lock(v12);
    if (v13)
    {
      uint64_t v14 = v13;
      if (!*(void *)(v11 + 16))
      {
LABEL_25:
        std::__shared_weak_count::__release_shared[abi:ne180100](v14);
        goto LABEL_26;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "parse");
      uint64_t v16 = *(void *)(a4 + 128);
      char v15 = *(std::__shared_weak_count **)(a4 + 136);
      if (v15) {
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v17 = *(std::__shared_weak_count **)(v16 + 24);
      if (v17 && (__n128 v18 = std::__shared_weak_count::lock(v17)) != 0)
      {
        uint64_t v19 = v18;
        uint64_t v20 = *(void *)(v16 + 16);
        if (v20
          && (uint64_t v21 = v20 + 8,
              std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>((void *)(v20 + 8), (unsigned __int8 *)__p)))
        {
          UChar32 v31 = __p;
          uint64_t v22 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v21, (unsigned __int8 *)__p, (long long **)&v31);
          uint64_t v24 = *((void *)v22 + 5);
          BOOL v23 = (std::__shared_weak_count *)*((void *)v22 + 6);
          if (v23) {
            atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
          }
        }
        else
        {
          BOOL v23 = 0;
          uint64_t v24 = 0;
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v19);
        if (!v15) {
          goto LABEL_17;
        }
      }
      else
      {
        BOOL v23 = 0;
        uint64_t v24 = 0;
        if (!v15)
        {
LABEL_17:
          if (v30 < 0) {
            operator delete(__p[0]);
          }
          uint64_t v26 = *(void *)(v24 + 296);
          uint64_t v25 = *(void *)(v24 + 304);
          if (v25) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v25 + 8), 1uLL, memory_order_relaxed);
          }
          unint64_t v27 = *(std::__shared_weak_count **)(v9 + 224);
          *(void *)(v9 + 216) = v26;
          *(void *)(v9 + 2++*(_DWORD *)(result + 24) = v25;
          if (v27) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v27);
          }
          if (v23) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v23);
          }
          goto LABEL_25;
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v15);
      goto LABEL_17;
    }
  }
LABEL_26:
  if (a3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a3);
  }
  result.n128_u64[0] = (unint64_t)v10;
  result.n128_u64[1] = v9;
  *a1 = result;
  return result;
}

void sub_20D46F900(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  uint64_t v21 = *(std::__shared_weak_count **)(v14 + 272);
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  uint64_t v22 = *(std::__shared_weak_count **)(v14 + 256);
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  BOOL v23 = *(std::__shared_weak_count **)(v14 + 240);
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  uint64_t v24 = *(std::__shared_weak_count **)(v14 + 224);
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  *(void *)(v14 + ++*(_DWORD *)(result + 24) = off_26C1FFFF0;
  if (*(char *)(v14 + 207) < 0) {
    operator delete(*(void **)(v14 + 184));
  }
  uint64_t v25 = *(std::__shared_weak_count **)(v14 + 176);
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  uint64_t v26 = *(std::__shared_weak_count **)(v14 + 160);
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  FrontendModule::~FrontendModule(v16);
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v14);
  operator delete(v27);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<ParseImpl>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ParseImpl>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C218F20;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<ParseImpl>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C218F20;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t *TAPExtractor::extract_prompts(TAPExtractor *this, const FrontendFeature *j)
{
  uint64_t v614 = *MEMORY[0x263EF8340];
  v572 = (uint64_t *)((char *)this + 568);
  if (!*((unsigned char *)this + 440)) {
    return v572;
  }
  uint64_t v3 = this;
  uint64_t v4 = *((void *)this + 72);
  uint64_t v5 = *((void *)this + 71);
  while (v4 != v5)
  {
    v4 -= 72;
    std::allocator<Prompt>::destroy[abi:ne180100](v4);
  }
  *((void *)v3 + 72) = v5;
  uint64_t v587 = (uint64_t)v3;
  v580 = j;
  if (*((__int16 *)v3 + 248) < 2)
  {
    if (*((char *)j + 95) < 0) {
      std::string::__init_copy_ctor_external(&__str, *((const std::string::value_type **)j + 9), *((void *)j + 10));
    }
    else {
      std::string __str = *(std::string *)((unsigned char *)j + 3);
    }
    std::vector<short>::resize((uint64_t)v3 + 136, 0x84BDA12F684BDA13 * ((uint64_t)(*((void *)j + 1) - *(void *)j) >> 3));
    uint64_t v29 = *((void *)v3 + 17);
    uint64_t v30 = *((void *)v3 + 18) - v29;
    BOOL v31 = v30 == 1;
    if (v30 >= 1)
    {
      unint64_t v32 = (unint64_t)v30 >> 1;
      uint64_t v33 = !v31;
      memset(*((void **)v3 + 17), 255, 2 * (v32 - v33) + 2);
    }
    uint64_t v34 = *((void *)j + 1);
    uint64_t v35 = v34 - *(void *)j;
    if (v34 != *(void *)j)
    {
      uint64_t v36 = 0;
      __int16 v37 = 0;
      unint64_t v38 = 0x84BDA12F684BDA13 * (v35 >> 3);
      std::string v39 = (_DWORD *)(*(void *)j + 40);
      do
      {
        if (!*v39) {
          ++v37;
        }
        if (!*((unsigned char *)v39 - 16)) {
          *(_WORD *)(v29 + 2 * v36) = v37;
        }
        v39 += 54;
        ++v36;
      }
      while (v38 > (unsigned __int16)v36);
    }
    uint64_t v41 = *((void *)v3 + 26);
    unsigned int v40 = (char *)v3 + 208;
    *((void *)v40 + 1) = v41;
    v568 = v40 - 48;
    *((void *)v40 - 5) = 0;
    v553 = v40 - 24;
    __pos = (void **)v40;
    *((void *)v40 - 2) = 0;
    std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = __str.__r_.__value_.__l.__size_;
    }
    if (size)
    {
      char v43 = 0;
      unsigned __int16 v44 = 0;
      unsigned int v45 = 0;
      unsigned __int16 v46 = 0;
      unsigned int v574 = 0;
      __uint64_t n = v587 + 224;
      __int16 v47 = 1;
      do
      {
        unsigned int v48 = v45;
        memset(&buf, 0, sizeof(buf));
        unsigned int v45 = TAPExtractor::v1_extract_utf8_character_from_string((unsigned __int16)v45, 1, &buf, (uint64_t *)&__str);
        UChar32 v49 = (char **)SENTENCE_BOUNDARY_CHARACTERS();
        if (is_one_of(v49, (char *)&buf))
        {
          BOOL v50 = 1;
        }
        else
        {
          unsigned int v51 = (char **)std::string::basic_string[abi:ne180100]<0>(&v611, ":,;");
          BOOL v50 = is_one_of(v51, (char *)&buf);
          if (SHIBYTE(v611.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v611.__r_.__value_.__l.__data_);
          }
        }
        uint64_t v52 = (char **)std::string::basic_string[abi:ne180100]<0>(&v611, " _¡¿\t\r\n");
        BOOL v53 = is_one_of(v52, (char *)&buf);
        if (SHIBYTE(v611.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v611.__r_.__value_.__l.__data_);
        }
        int v54 = v50 || v53;
        if (v54 == 1)
        {
          if (v43)
          {
            unsigned int v574 = v48;
            if (v44 < (unsigned __int16)v48)
            {
              uint64_t v55 = *(void *)v553;
              unint64_t v56 = v44;
              do
              {
                *(void *)(v55 + ((v56 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v56;
                ++v56;
              }
              while ((unsigned __int16)v48 != v56);
              unsigned int v574 = v48;
            }
          }
          if (v50) {
            unsigned __int16 v46 = v45;
          }
        }
        else
        {
          v611.__r_.__value_.__s.__data_[0] = (v43 & 1) == 0;
          if (v43)
          {
            uint64_t v57 = (uint64_t)v553;
          }
          else
          {
            uint64_t v57 = (uint64_t)v553;
            if ((unsigned __int16)v574 < (unsigned __int16)v48)
            {
              unsigned int v58 = v574;
              do
              {
                int v60 = *(__int16 **)(v587 + 216);
                unint64_t v59 = *(void *)(v587 + 224);
                if ((unint64_t)v60 >= v59)
                {
                  uint64_t v62 = (__int16 *)*__pos;
                  uint64_t v63 = (char *)v60 - (unsigned char *)*__pos;
                  if (v63 <= -3) {
                    std::vector<int>::__throw_length_error[abi:ne180100]();
                  }
                  uint64_t v64 = v63 >> 1;
                  unint64_t v65 = v59 - (void)v62;
                  if (v65 <= (v63 >> 1) + 1) {
                    unint64_t v66 = v64 + 1;
                  }
                  else {
                    unint64_t v66 = v65;
                  }
                  if (v65 >= 0x7FFFFFFFFFFFFFFELL) {
                    uint64_t v67 = 0x7FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    uint64_t v67 = v66;
                  }
                  if (v67)
                  {
                    uint64_t v68 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<short>>(__n, v67);
                    uint64_t v62 = *(__int16 **)(v587 + 208);
                    int v60 = *(__int16 **)(v587 + 216);
                  }
                  else
                  {
                    uint64_t v68 = 0;
                  }
                  long long v69 = (__int16 *)&v68[2 * v64];
                  *long long v69 = v47;
                  uint64_t v61 = v69 + 1;
                  while (v60 != v62)
                  {
                    __int16 v70 = *--v60;
                    *--long long v69 = v70;
                  }
                  *(void *)(v587 + 208) = v69;
                  *(void *)(v587 + 216) = v61;
                  *(void *)(v587 + 2++*(_DWORD *)(result + 24) = &v68[2 * v67];
                  if (v62) {
                    operator delete(v62);
                  }
                }
                else
                {
                  *int v60 = v47;
                  uint64_t v61 = v60 + 1;
                }
                *(void *)(v587 + 216) = v61;
                __p.__r_.__value_.__s.__data_[0] = (unsigned __int16)v58 >= v46;
                std::vector<BOOL>::push_back((uint64_t)v568, &__p);
                __p.__r_.__value_.__s.__data_[0] = (unsigned __int16)v574 != 0;
                uint64_t v57 = (uint64_t)v553;
                std::vector<BOOL>::push_back((uint64_t)v553, &__p);
                ++v58;
              }
              while ((unsigned __int16)v58 < (unsigned __int16)v48);
            }
            if ((_WORD)v574) {
              ++v47;
            }
          }
          for (unsigned int i = v48; v45 > (unsigned __int16)i; ++i)
          {
            std::string v73 = *(__int16 **)(v587 + 216);
            unint64_t v72 = *(void *)(v587 + 224);
            if ((unint64_t)v73 >= v72)
            {
              long long v75 = (__int16 *)*__pos;
              uint64_t v76 = (char *)v73 - (unsigned char *)*__pos;
              if (v76 <= -3) {
                std::vector<int>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v77 = v76 >> 1;
              unint64_t v78 = v72 - (void)v75;
              if (v78 <= (v76 >> 1) + 1) {
                unint64_t v79 = v77 + 1;
              }
              else {
                unint64_t v79 = v78;
              }
              if (v78 >= 0x7FFFFFFFFFFFFFFELL) {
                uint64_t v80 = 0x7FFFFFFFFFFFFFFFLL;
              }
              else {
                uint64_t v80 = v79;
              }
              if (v80)
              {
                BOOL v81 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<short>>(__n, v80);
                long long v75 = *(__int16 **)(v587 + 208);
                std::string v73 = *(__int16 **)(v587 + 216);
              }
              else
              {
                BOOL v81 = 0;
              }
              int v82 = (__int16 *)&v81[2 * v77];
              __int16 *v82 = v47;
              unint64_t v74 = v82 + 1;
              while (v73 != v75)
              {
                __int16 v83 = *--v73;
                *--int v82 = v83;
              }
              *(void *)(v587 + 208) = v82;
              *(void *)(v587 + 216) = v74;
              *(void *)(v587 + 2++*(_DWORD *)(result + 24) = &v81[2 * v80];
              if (v75) {
                operator delete(v75);
              }
            }
            else
            {
              __int16 *v73 = v47;
              unint64_t v74 = v73 + 1;
            }
            *(void *)(v587 + 216) = v74;
            std::vector<BOOL>::push_back((uint64_t)v568, &v611);
            __p.__r_.__value_.__s.__data_[0] = 0;
            std::vector<BOOL>::push_back(v57, &__p);
          }
        }
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(buf.__r_.__value_.__l.__data_);
        }
        char v43 = v54 ^ 1;
        std::string::size_type v84 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v84 = __str.__r_.__value_.__l.__size_;
        }
        unsigned __int16 v44 = v48;
      }
      while (v84 > v45);
      if (v54)
      {
        for (uint64_t j = v580; v45 > (unsigned __int16)v574; ++v574)
        {
          std::string v86 = *(__int16 **)(v587 + 216);
          unint64_t v85 = *(void *)(v587 + 224);
          if ((unint64_t)v86 >= v85)
          {
            uint64_t v88 = (__int16 *)*__pos;
            uint64_t v89 = (char *)v86 - (unsigned char *)*__pos;
            if (v89 <= -3) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v90 = v89 >> 1;
            unint64_t v91 = v85 - (void)v88;
            if (v91 <= (v89 >> 1) + 1) {
              unint64_t v92 = v90 + 1;
            }
            else {
              unint64_t v92 = v91;
            }
            if (v91 >= 0x7FFFFFFFFFFFFFFELL) {
              uint64_t v93 = 0x7FFFFFFFFFFFFFFFLL;
            }
            else {
              uint64_t v93 = v92;
            }
            if (v93)
            {
              uint64_t v94 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<short>>(__n, v93);
              uint64_t v88 = *(__int16 **)(v587 + 208);
              std::string v86 = *(__int16 **)(v587 + 216);
            }
            else
            {
              uint64_t v94 = 0;
            }
            unint64_t v95 = (__int16 *)&v94[2 * v90];
            *unint64_t v95 = v47;
            long long v87 = v95 + 1;
            while (v86 != v88)
            {
              __int16 v96 = *--v86;
              *--unint64_t v95 = v96;
            }
            *(void *)(v587 + 208) = v95;
            *(void *)(v587 + 216) = v87;
            *(void *)(v587 + 2++*(_DWORD *)(result + 24) = &v94[2 * v93];
            if (v88) {
              operator delete(v88);
            }
          }
          else
          {
            *std::string v86 = v47;
            long long v87 = v86 + 1;
          }
          *(void *)(v587 + 216) = v87;
          buf.__r_.__value_.__s.__data_[0] = 0;
          std::vector<BOOL>::push_back((uint64_t)v568, &buf);
          buf.__r_.__value_.__s.__data_[0] = 1;
          std::vector<BOOL>::push_back((uint64_t)v553, &buf);
        }
      }
      else
      {
        uint64_t j = v580;
        if (v45 > (unsigned __int16)v48)
        {
          uint64_t v97 = *(void *)v553;
          unint64_t v98 = (unsigned __int16)v48;
          do
          {
            *(void *)(v97 + ((v98 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v98;
            ++v98;
          }
          while (v45 != v98);
        }
      }
    }
    std::string::size_type v99 = (void *)v587;
    uint64_t v100 = *(void *)(v587 + 352);
    if (*(unsigned __int16 *)(v100 + 18) <= 1u && !*(_WORD *)(v100 + 20))
    {
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v322 = (std::string *)((char *)&__str + HIBYTE(__str.__r_.__value_.__r.__words[2]));
      }
      else {
        v322 = (std::string *)(__str.__r_.__value_.__r.__words[0] + __str.__r_.__value_.__l.__size_);
      }
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_str = &__str;
      }
      else {
        p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
      }
      while (p_str != v322)
      {
        p_str->__r_.__value_.__s.__data_[0] = __tolower(p_str->__r_.__value_.__s.__data_[0]);
        p_str = (std::string *)((char *)p_str + 1);
      }
    }
    *(_WORD *)(v587 + 414) = -9709 * ((*((_DWORD *)j + 2) - *(_DWORD *)j) >> 3);
    v573 = (char **)(v587 + 304);
    uint64_t v101 = *(void *)(v587 + 304);
    std::string::size_type v102 = *(void *)(v587 + 312);
    while (v102 != v101)
    {
      v102 -= 24;
      buf.__r_.__value_.__r.__words[0] = v102;
      std::vector<std::vector<long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
    }
    *(void *)(v587 + 312) = v101;
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v103 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v103 = __str.__r_.__value_.__l.__size_;
    }
    std::vector<std::vector<std::vector<std::pair<unsigned short,unsigned short>>>>::resize(v573, v103);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v104 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v104 = __str.__r_.__value_.__l.__size_;
    }
    std::vector<BOOL>::resize(v587 + 232, v104, 0);
    unint64_t v105 = *(void *)(v587 + 240);
    if (v105)
    {
      buf.__r_.__value_.__r.__words[0] = *(void *)(v587 + 232);
      LODWORD(buf.__r_.__value_.__r.__words[1]) = 0;
      std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>((uint64_t)&buf, v105);
    }
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unsigned __int16 v106 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    }
    else {
      unsigned __int16 v106 = __str.__r_.__value_.__r.__words[1];
    }
    uint64_t v107 = *(void *)(v587 + 80);
    unsigned int v108 = v106;
    unint64_t v109 = (unint64_t)(*(void *)(v587 + 88) - v107) >> 3;
    unsigned int v548 = v106;
    do
    {
      unsigned __int16 v110 = v109 - 1;
      if ((((_WORD)v109 - 1) & 0x8000) != 0) {
        break;
      }
      LOWORD(v109) = v109 - 1;
      uint64_t v111 = v110;
      uint64_t v112 = *(_WORD **)(v107 + 8 * v110);
      std::string::size_type v113 = (unsigned __int16)*v112;
      if (*v112) {
        BOOL v114 = v108 >= v113;
      }
      else {
        BOOL v114 = 0;
      }
      if (v114)
      {
        uint64_t v552 = v111;
        if ((v113 - 1) >= 7) {
          int v115 = 7;
        }
        else {
          int v115 = (unsigned __int16)(v113 - 1);
        }
        unsigned int v575 = v115;
        std::string::basic_string(&buf, &__str, 0, v113, (std::allocator<char> *)&v611);
        unsigned int v116 = 0;
        __int16 v117 = buf.__r_.__value_.__r.__words[1];
        if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          __int16 v117 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
        }
        p_std::string buf = &buf;
        if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
        }
        unint64_t v119 = (unsigned __int16)(v117 - 1);
        if (v119 >= 7) {
          uint64_t v120 = 7;
        }
        else {
          uint64_t v120 = v119;
        }
        uint64_t v121 = (int *)v99[16];
        do
        {
          int v122 = *v121++;
          v116 += v122 * p_buf->__r_.__value_.__s.__data_[v120];
          BOOL v123 = v120-- <= 0;
        }
        while (!v123);
        __int16 v550 = v109;
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(buf.__r_.__value_.__l.__data_);
        }
        uint64_t v124 = 0;
        std::string::size_type v125 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        BOOL v126 = (__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0;
        if (v113 >= 8) {
          uint64_t v127 = 8;
        }
        else {
          uint64_t v127 = v113;
        }
        uint64_t v562 = v127 - 1;
        std::string::size_type v558 = v113;
        do
        {
          if (v124)
          {
            BOOL v28 = !v126;
            uint64_t v128 = &__str;
            if (!v28) {
              uint64_t v128 = (std::string *)__str.__r_.__value_.__r.__words[0];
            }
            unsigned int v116 = v128->__r_.__value_.__s.__data_[v562 + v124]
                 + (v116 - *(_DWORD *)(v99[16] + 4 * v562) * v128->__r_.__value_.__s.__data_[(v124 - 1)])
                 * *(unsigned __int16 *)(v99[44] + 22);
          }
          int v129 = std::__hash_table<std::__hash_value_type<unsigned int,std::pair<unsigned short,unsigned short>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::pair<unsigned short,unsigned short>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::pair<unsigned short,unsigned short>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::pair<unsigned short,unsigned short>>>>::__equal_range_multi<unsigned int>((void *)(v99[35] + 40 * v575), v116);
          if (v129 != v130)
          {
            std::string::size_type v131 = v129;
            uint64_t v132 = v130;
            do
            {
              int v133 = *((unsigned __int16 *)v131 + 11);
              uint64_t v134 = *((unsigned __int16 *)v131 + 10);
              unint64_t v135 = *(unsigned __int16 **)(*(void *)(v587 + 80) + 8 * v134);
              size_t v136 = *v135;
              if (TAPExtractor::detect_v1_match(v587, &__str, (unsigned __int16)v124, v136, (uint64_t)&v135[18 * *((unsigned __int16 *)v131 + 11) + 2]))
              {
                BOOL v137 = &(*v573)[24 * (unsigned __int16)v124];
                uint64_t v138 = *(void *)v137;
                if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v137 + 1) - *(void *)v137) >> 3) <= v136)
                {
                  std::vector<std::vector<std::pair<unsigned short,unsigned short>>>::resize((uint64_t)v137, v136 + 1);
                  uint64_t v138 = *(void *)&(*v573)[24 * (unsigned __int16)v124];
                }
                uint64_t v139 = (void **)(v138 + 24 * v136);
                int v140 = v134 | (v133 << 16);
                BOOL v141 = v139 + 1;
                uint64_t v142 = v139[1];
                unint64_t v143 = (unint64_t)v139[2];
                if ((unint64_t)v142 >= v143)
                {
                  uint64_t v145 = ((char *)v142 - (unsigned char *)*v139) >> 2;
                  if ((unint64_t)(v145 + 1) >> 62) {
                    std::vector<int>::__throw_length_error[abi:ne180100]();
                  }
                  uint64_t v146 = v143 - (void)*v139;
                  uint64_t v147 = v146 >> 1;
                  if (v146 >> 1 <= (unint64_t)(v145 + 1)) {
                    uint64_t v147 = v145 + 1;
                  }
                  if ((unint64_t)v146 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v148 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v148 = v147;
                  }
                  if (v148) {
                    unint64_t v148 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::TropicalWeightTpl<float>>>(v148);
                  }
                  else {
                    uint64_t v149 = 0;
                  }
                  uint64_t v150 = (_DWORD *)(v148 + 4 * v145);
                  *uint64_t v150 = v140;
                  std::string::size_type v144 = v150 + 1;
                  unint64_t v151 = (char *)*v141;
                  uint64_t v152 = (char *)*v139;
                  if (*v141 != *v139)
                  {
                    do
                    {
                      int v153 = *((_DWORD *)v151 - 1);
                      v151 -= 4;
                      *--uint64_t v150 = v153;
                    }
                    while (v151 != v152);
                    unint64_t v151 = (char *)*v139;
                  }
                  *uint64_t v139 = v150;
                  *BOOL v141 = v144;
                  v139[2] = (void *)(v148 + 4 * v149);
                  if (v151) {
                    operator delete(v151);
                  }
                }
                else
                {
                  *uint64_t v142 = v140;
                  std::string::size_type v144 = v142 + 1;
                }
                *BOOL v141 = v144;
              }
              std::string::size_type v131 = (uint64_t *)*v131;
            }
            while (v131 != v132);
            std::string::size_type v125 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
            std::string::size_type v99 = (void *)v587;
            std::string::size_type v113 = v558;
          }
          ++v124;
          BOOL v126 = (v125 & 0x80u) != 0;
          std::string::size_type v154 = __str.__r_.__value_.__l.__size_;
          if ((v125 & 0x80u) == 0) {
            std::string::size_type v154 = v125;
          }
        }
        while (v154 - v113 >= v124);
        uint64_t v107 = v99[10];
        LOWORD(v109) = v550;
        LODWORD(v113) = **(unsigned __int16 **)(v107 + 8 * v552);
        unsigned int v108 = v548;
      }
    }
    while (v113 < 8);
    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    uint64_t v155 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_20CD80000, v155, OS_LOG_TYPE_DEBUG, "Prompt Matching table ", (uint8_t *)&buf, 2u);
    }
    Diagnostics::log(7, "Prompt Matching table ", v156);
    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    uint64_t v157 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_20CD80000, v157, OS_LOG_TYPE_DEBUG, "Text:              | ", (uint8_t *)&buf, 2u);
    }
    Diagnostics::log(7, "Text:              | ", v158);
    Censor::global_plaintext(&v589, (uint64_t)&__str);
    std::string::size_type v159 = HIBYTE(v589.__r_.__value_.__r.__words[2]);
    if ((v589.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v159 = v589.__r_.__value_.__l.__size_;
    }
    if (v159)
    {
      uint64_t v160 = 0;
      unsigned __int16 v161 = 0;
      do
      {
        if (Diagnostics_GetLogObject(void)::onceToken != -1) {
          dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
        }
        std::string::size_type v162 = Diagnostics_GetLogObject(void)::__profile_log_default;
        if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
        {
          if ((v589.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            unint64_t v164 = &v589;
          }
          else {
            unint64_t v164 = (std::string *)v589.__r_.__value_.__r.__words[0];
          }
          int v165 = v164->__r_.__value_.__s.__data_[v160];
          LODWORD(buf.__r_.__value_.__l.__data_) = 67109120;
          HIDWORD(buf.__r_.__value_.__r.__words[0]) = v165;
          _os_log_impl(&dword_20CD80000, v162, OS_LOG_TYPE_DEBUG, "%c", (uint8_t *)&buf, 8u);
        }
        if ((v589.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v166 = &v589;
        }
        else {
          uint64_t v166 = (std::string *)v589.__r_.__value_.__r.__words[0];
        }
        Diagnostics::log(7, "%c", v163, v166->__r_.__value_.__s.__data_[v160]);
        uint64_t v160 = ++v161;
        std::string::size_type v167 = HIBYTE(v589.__r_.__value_.__r.__words[2]);
        if ((v589.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v167 = v589.__r_.__value_.__l.__size_;
        }
      }
      while (v167 > v161);
    }
    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    uint64_t v168 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_20CD80000, v168, OS_LOG_TYPE_DEBUG, (const char *)&unk_20D6E2C9F, (uint8_t *)&buf, 2u);
    }
    Diagnostics::log(7, &byte_20D5A22AE, v169);
    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    int v170 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_20CD80000, v170, OS_LOG_TYPE_DEBUG, "Character in word: | ", (uint8_t *)&buf, 2u);
    }
    Diagnostics::log(7, "Character in word: | ", v171);
    if (*(void *)(v587 + 216) != *(void *)(v587 + 208))
    {
      uint64_t v172 = 0;
      int v173 = 0;
      do
      {
        if (Diagnostics_GetLogObject(void)::onceToken != -1) {
          dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
        }
        int v174 = Diagnostics_GetLogObject(void)::__profile_log_default;
        if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
        {
          int v176 = *((__int16 *)*__pos + v172);
          LODWORD(buf.__r_.__value_.__l.__data_) = 67109120;
          HIDWORD(buf.__r_.__value_.__r.__words[0]) = v176;
          _os_log_impl(&dword_20CD80000, v174, OS_LOG_TYPE_DEBUG, "%d  ", (uint8_t *)&buf, 8u);
        }
        Diagnostics::log(7, "%d  ", v175, *(__int16 *)(*(void *)(v587 + 208) + 2 * v172));
        uint64_t v172 = (unsigned __int16)++v173;
      }
      while ((unsigned __int16)v173 < (unint64_t)((uint64_t)(*(void *)(v587 + 216) - *(void *)(v587 + 208)) >> 1));
    }
    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    int v177 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_20CD80000, v177, OS_LOG_TYPE_DEBUG, (const char *)&unk_20D6E2C9F, (uint8_t *)&buf, 2u);
    }
    Diagnostics::log(7, &byte_20D5A22AE, v178);
    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    uint64_t v179 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_20CD80000, v179, OS_LOG_TYPE_DEBUG, "UTF-8:             | ", (uint8_t *)&buf, 2u);
    }
    Diagnostics::log(7, "UTF-8:             | ", v180);
    std::string::size_type v181 = HIBYTE(v589.__r_.__value_.__r.__words[2]);
    if ((v589.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v181 = v589.__r_.__value_.__l.__size_;
    }
    if (v181)
    {
      uint64_t v182 = 0;
      unsigned __int16 v183 = 0;
      do
      {
        if (Diagnostics_GetLogObject(void)::onceToken != -1) {
          dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
        }
        uint64_t v184 = Diagnostics_GetLogObject(void)::__profile_log_default;
        if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
        {
          if ((v589.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            float v186 = &v589;
          }
          else {
            float v186 = (std::string *)v589.__r_.__value_.__r.__words[0];
          }
          int v187 = v186->__r_.__value_.__s.__data_[v182];
          LODWORD(buf.__r_.__value_.__l.__data_) = 67109120;
          HIDWORD(buf.__r_.__value_.__r.__words[0]) = v187;
          _os_log_impl(&dword_20CD80000, v184, OS_LOG_TYPE_DEBUG, "%X ", (uint8_t *)&buf, 8u);
        }
        if ((v589.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v188 = &v589;
        }
        else {
          uint64_t v188 = (std::string *)v589.__r_.__value_.__r.__words[0];
        }
        Diagnostics::log(7, "%X ", v185, v188->__r_.__value_.__s.__data_[v182]);
        uint64_t v182 = ++v183;
        std::string::size_type v189 = HIBYTE(v589.__r_.__value_.__r.__words[2]);
        if ((v589.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v189 = v589.__r_.__value_.__l.__size_;
        }
      }
      while (v189 > v183);
    }
    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    int v190 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_20CD80000, v190, OS_LOG_TYPE_DEBUG, (const char *)&unk_20D6E2C9F, (uint8_t *)&buf, 2u);
    }
    Diagnostics::log(7, &byte_20D5A22AE, v191);
    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    int v192 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_20CD80000, v192, OS_LOG_TYPE_DEBUG, "Is at start word:  | ", (uint8_t *)&buf, 2u);
    }
    Diagnostics::log(7, "Is at start word:  | ", v193);
    if (*(void *)(v587 + 168))
    {
      unint64_t v194 = 0;
      int v195 = 0;
      do
      {
        if (Diagnostics_GetLogObject(void)::onceToken != -1) {
          dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
        }
        float v196 = Diagnostics_GetLogObject(void)::__profile_log_default;
        if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
        {
          unint64_t v198 = v194 >> 6;
          uint64_t v199 = 1 << v194;
          if ((*(void *)(*(void *)v568 + 8 * v198) & v199) != 0) {
            unint64_t v200 = "t";
          }
          else {
            unint64_t v200 = "f";
          }
          LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v200;
          _os_log_impl(&dword_20CD80000, v196, OS_LOG_TYPE_DEBUG, "%s  ", (uint8_t *)&buf, 0xCu);
        }
        else
        {
          unint64_t v198 = v194 >> 6;
          uint64_t v199 = 1 << v194;
        }
        if ((*(void *)(*(void *)(v587 + 160) + 8 * v198) & v199) != 0) {
          uint64_t v201 = "t";
        }
        else {
          uint64_t v201 = "f";
        }
        Diagnostics::log(7, "%s  ", v197, v201);
        unint64_t v194 = (unsigned __int16)++v195;
      }
      while (*(void *)(v587 + 168) > (unint64_t)(unsigned __int16)v195);
    }
    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    uint64_t v202 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_20CD80000, v202, OS_LOG_TYPE_DEBUG, (const char *)&unk_20D6E2C9F, (uint8_t *)&buf, 2u);
    }
    Diagnostics::log(7, &byte_20D5A22AE, v203);
    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    std::string::size_type v204 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_20CD80000, v204, OS_LOG_TYPE_DEBUG, "Is at end word:    | ", (uint8_t *)&buf, 2u);
    }
    Diagnostics::log(7, "Is at end word:    | ", v205);
    if (*(void *)(v587 + 192))
    {
      unint64_t v206 = 0;
      int v207 = 0;
      do
      {
        if (Diagnostics_GetLogObject(void)::onceToken != -1) {
          dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
        }
        int v208 = Diagnostics_GetLogObject(void)::__profile_log_default;
        if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
        {
          unint64_t v210 = v206 >> 6;
          uint64_t v211 = 1 << v206;
          if ((*(void *)(*(void *)v553 + 8 * v210) & v211) != 0) {
            uint64_t v212 = "t";
          }
          else {
            uint64_t v212 = "f";
          }
          LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v212;
          _os_log_impl(&dword_20CD80000, v208, OS_LOG_TYPE_DEBUG, "%s  ", (uint8_t *)&buf, 0xCu);
        }
        else
        {
          unint64_t v210 = v206 >> 6;
          uint64_t v211 = 1 << v206;
        }
        if ((*(void *)(*(void *)(v587 + 184) + 8 * v210) & v211) != 0) {
          unint64_t v213 = "t";
        }
        else {
          unint64_t v213 = "f";
        }
        Diagnostics::log(7, "%s  ", v209, v213);
        unint64_t v206 = (unsigned __int16)++v207;
      }
      while (*(void *)(v587 + 192) > (unint64_t)(unsigned __int16)v207);
    }
    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    uint64_t v214 = (void *)v587;
    uint64_t v215 = v580;
    uint64_t v216 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_20CD80000, v216, OS_LOG_TYPE_DEBUG, (const char *)&unk_20D6E2C9F, (uint8_t *)&buf, 2u);
    }
    Diagnostics::log(7, &byte_20D5A22AE, v217);
    uint64_t v219 = *(void *)(v587 + 304);
    uint64_t v218 = *(void *)(v587 + 312);
    if (v218 == v219) {
      goto LABEL_448;
    }
    v545 = 0;
    unint64_t v220 = 0;
    unint64_t v221 = 0;
    uint64_t v222 = 0;
    int v223 = 0;
    while (1)
    {
      LODWORD(v2++*(_DWORD *)(result + 24) = -1
                    - 21845 * ((*(_DWORD *)(v219 + 24 * v222 + 8) - *(_DWORD *)(v219 + 24 * v222)) >> 3);
      if ((v224 & 0x8000) != 0) {
        goto LABEL_445;
      }
      std::string::size_type __posa = (unsigned __int16)v223;
      int v554 = v223 & 0x3F;
      uint64_t v563 = v223 & 0x3F;
      int v569 = v223;
      uint64_t v551 = (unsigned __int16)v223 >> 6;
      std::string::size_type v224 = (unsigned __int16)v224;
      uint64_t v544 = v222;
      do
      {
        std::string::size_type __na = v224;
        uint64_t v225 = (uint64_t *)(*(void *)&(*v573)[24 * v222] + 24 * v224);
        float v226 = v225 + 1;
        if (v225[1] == *v225) {
          goto LABEL_389;
        }
        if (Diagnostics_GetLogObject(void)::onceToken != -1) {
          dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
        }
        uint64_t v227 = Diagnostics_GetLogObject(void)::__profile_log_default;
        if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v229 = (*v226 - *v225) >> 2;
          LODWORD(buf.__r_.__value_.__l.__data_) = 134217984;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v229;
          _os_log_impl(&dword_20CD80000, v227, OS_LOG_TYPE_DEBUG, "Had %zu candidates for prompt match, applied sort. ", (uint8_t *)&buf, 0xCu);
        }
        Diagnostics::log(7, "Had %zu candidates for prompt match, applied sort. ", v228, (*v226 - *v225) >> 2);
        uint64_t v230 = *v225;
        if (*v226 == *v225)
        {
LABEL_389:
          unint64_t v221 = (_OWORD *)v220;
          float v233 = v545;
        }
        else
        {
          unint64_t v231 = 0;
          uint64_t v232 = (_OWORD *)v220;
          float v233 = v545;
          do
          {
            uint64_t v234 = *(void *)(v214[10] + 8 * *(unsigned __int16 *)(v230 + 4 * v231))
                 + 36 * *(unsigned __int16 *)(v230 + 4 * v231 + 2)
                 + 4;
            if (v232 >= (_OWORD *)v233)
            {
              unint64_t v237 = 0x8E38E38E38E38E39 * ((uint64_t)((uint64_t)v232 - v220) >> 2) + 1;
              if (v237 > 0x71C71C71C71C71CLL) {
                std::vector<int>::__throw_length_error[abi:ne180100]();
              }
              if (0x1C71C71C71C71C72 * ((uint64_t)&v233[-v220] >> 2) > v237) {
                unint64_t v237 = 0x1C71C71C71C71C72 * ((uint64_t)&v233[-v220] >> 2);
              }
              if (0x8E38E38E38E38E39 * ((uint64_t)&v233[-v220] >> 2) >= 0x38E38E38E38E38ELL) {
                unint64_t v238 = 0x71C71C71C71C71CLL;
              }
              else {
                unint64_t v238 = v237;
              }
              if (v238)
              {
                if (v238 > 0x71C71C71C71C71CLL) {
                  std::__throw_bad_array_new_length[abi:ne180100]();
                }
                uint64_t v239 = (char *)operator new(36 * v238);
              }
              else
              {
                uint64_t v239 = 0;
              }
              uint64_t v240 = &v239[4 * ((uint64_t)((uint64_t)v232 - v220) >> 2)];
              long long v241 = *(_OWORD *)v234;
              long long v242 = *(_OWORD *)(v234 + 16);
              *((_DWORD *)v240 + 8) = *(_DWORD *)(v234 + 32);
              *(_OWORD *)uint64_t v240 = v241;
              *((_OWORD *)v240 + 1) = v242;
              if (v232 == (_OWORD *)v220)
              {
                unint64_t v220 = (unint64_t)&v239[4 * ((uint64_t)((uint64_t)v232 - v220) >> 2)];
                uint64_t v214 = (void *)v587;
              }
              else
              {
                float v243 = &v239[4 * ((uint64_t)((uint64_t)v232 - v220) >> 2)];
                uint64_t v214 = (void *)v587;
                do
                {
                  long long v244 = *(_OWORD *)((char *)v232 - 36);
                  long long v245 = *(_OWORD *)((char *)v232 - 20);
                  *((_DWORD *)v243 - 1) = *((_DWORD *)v232 - 1);
                  *(_OWORD *)(v243 - 20) = v245;
                  *(_OWORD *)(v243 - 36) = v244;
                  v243 -= 36;
                  uint64_t v232 = (_OWORD *)((char *)v232 - 36);
                }
                while (v232 != (_OWORD *)v220);
                uint64_t v232 = (_OWORD *)v220;
                unint64_t v220 = (unint64_t)v243;
              }
              float v233 = &v239[36 * v238];
              unint64_t v221 = v240 + 36;
              if (v232)
              {
                unint64_t v246 = v233;
                operator delete(v232);
                float v233 = v246;
              }
            }
            else
            {
              long long v235 = *(_OWORD *)v234;
              long long v236 = *(_OWORD *)(v234 + 16);
              *((_DWORD *)v232 + 8) = *(_DWORD *)(v234 + 32);
              *uint64_t v232 = v235;
              v232[1] = v236;
              unint64_t v221 = (_OWORD *)((char *)v232 + 36);
              uint64_t v214 = (void *)v587;
            }
            ++v231;
            uint64_t v230 = *v225;
            uint64_t v232 = v221;
          }
          while (v231 < (*v226 - *v225) >> 2);
        }
        v545 = v233;
        unint64_t v576 = 0x8E38E38E38E38E39 * ((uint64_t)((uint64_t)v221 - v220) >> 2);
        unint64_t v247 = 126 - 2 * __clz(v576);
        buf.__r_.__value_.__r.__words[0] = (std::string::size_type)TAPExtractor::compare_prompts_by_boundary_conditions;
        if (v221 == (_OWORD *)v220) {
          uint64_t v248 = 0;
        }
        else {
          uint64_t v248 = v247;
        }
        std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(TAPFileBuilder::top_level_prompt_info const&,TAPFileBuilder::top_level_prompt_info const&),TAPFileBuilder::top_level_prompt_info*,false>(v220, (unint64_t)v221, (uint64_t (**)(long long *, long long *))&buf, v248, 1);
        uint64_t v215 = v580;
        uint64_t v249 = __na;
        int v223 = v569;
        if (v221 != (_OWORD *)v220)
        {
          uint64_t v250 = 0;
          unsigned __int16 v251 = 0;
          unint64_t v559 = (__na + v563) & 0x1FFC0 | (unint64_t)(((_BYTE)v554 + (_BYTE)__na) & 0x3F);
          while (1)
          {
            uint64_t v252 = v220 + 36 * v250;
            if (!TAPExtractor::detect_v1_match((uint64_t)v214, &__str, (unsigned __int16)v223, (unsigned __int16)v249, v252))goto LABEL_441; {
            uint64_t v253 = v214[59];
            }
            uint64_t v254 = v214[60];
            uint64_t v255 = v254 - v253;
            if (v254 == v253) {
              goto LABEL_414;
            }
            uint64_t v256 = 0;
            unsigned __int16 v257 = 0;
            unint64_t v258 = v220 + 36 * v251;
            unint64_t v259 = 0xAAAAAAAAAAAAAAABLL * (v255 >> 3);
            do
            {
              unint64_t v260 = 0;
              uint64_t v261 = v253 + 24 * v256;
              if (*(unsigned __int8 *)(v261 + 23) <= 0xAu) {
                unint64_t v262 = 10;
              }
              else {
                unint64_t v262 = *(unsigned __int8 *)(v261 + 23);
              }
              while (1)
              {
                if ((*(char *)(v261 + 23) & 0x80000000) == 0)
                {
                  if (v260 >= v262) {
                    break;
                  }
                  int v263 = *(unsigned __int8 *)(v253 + 24 * v257 + v260);
                  int v264 = *(unsigned __int8 *)(v258 + v260);
                  LODWORD(v265) = v262;
                  goto LABEL_409;
                }
                unint64_t v265 = *(unsigned __int16 *)(v261 + 8) <= 0xAu ? 10 : *(unsigned __int16 *)(v261 + 8);
                if (v260 >= v265) {
                  break;
                }
                int v263 = *(unsigned __int8 *)(*(void *)v261 + v260);
                int v264 = *(unsigned __int8 *)(v258 + v260);
LABEL_409:
                if (v263 != v264) {
                  break;
                }
                BOOL v28 = v260++ == v265 - 1;
                if (v28) {
                  goto LABEL_441;
                }
              }
              uint64_t v256 = ++v257;
            }
            while (v259 > v257);
LABEL_414:
            std::string::basic_string(&v611, &__str, __posa, __na, (std::allocator<char> *)&buf);
            if (v559 != v563)
            {
              buf.__r_.__value_.__r.__words[0] = *(void *)(v587 + 232) + 8 * v551;
              LODWORD(buf.__r_.__value_.__r.__words[1]) = v554;
              std::__fill_n[abi:ne180100]<true,std::vector<BOOL>>(&buf, v559 - v563);
            }
            unint64_t v266 = v220 + 36 * v250;
            uint64_t v268 = *(unsigned int *)(v266 + 28);
            int v267 = *(_DWORD *)(v266 + 32);
            char v269 = v214;
            uint64_t v270 = *(void *)(v214[44] + 32);
            uint64_t v271 = v269[48];
            unint64_t v272 = v269[72];
            unint64_t v273 = v269[73];
            if (v272 >= v273)
            {
              unint64_t v276 = 0x8E38E38E38E38E39 * ((uint64_t)(v272 - *v572) >> 3);
              unint64_t v277 = v276 + 1;
              if (v276 + 1 > 0x38E38E38E38E38ELL) {
                std::vector<int>::__throw_length_error[abi:ne180100]();
              }
              unint64_t v278 = 0x8E38E38E38E38E39 * ((uint64_t)(v273 - *v572) >> 3);
              if (2 * v278 > v277) {
                unint64_t v277 = 2 * v278;
              }
              if (v278 >= 0x1C71C71C71C71C7) {
                unint64_t v279 = 0x38E38E38E38E38ELL;
              }
              else {
                unint64_t v279 = v277;
              }
              *(void *)&v592[8] = v587 + 584;
              if (v279) {
                unint64_t v279 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Prompt>>(v279);
              }
              else {
                uint64_t v280 = 0;
              }
              std::string::size_type v281 = v279 + 72 * v276;
              buf.__r_.__value_.__r.__words[0] = v279;
              buf.__r_.__value_.__l.__size_ = v281;
              *(void *)v592 = v279 + 72 * v280;
              *(_OWORD *)(v281 + 8) = 0u;
              *(_OWORD *)(v281 + ++*(_DWORD *)(result + 24) = 0u;
              *(void *)(v281 + 40) = 0;
              *(void *)(v281 + 48) = 0;
              *(void *)std::string::size_type v281 = 0x8000000080000000;
              *(_DWORD *)(v281 + 8) = -1;
              *(void *)(v281 + 56) = 0;
              *(void *)(v281 + 64) = 0;
              *(_WORD *)(v281 + 40) = 0;
              *(void *)(v281 + 16) = 0;
              *(void *)(v281 + ++*(_DWORD *)(result + 24) = 0;
              *(void *)(v281 + 32) = 0;
              buf.__r_.__value_.__r.__words[2] = v281 + 72;
              std::vector<Prompt>::__swap_out_circular_buffer(v572, &buf);
              uint64_t v275 = v587;
              unint64_t v274 = *(void *)(v587 + 576);
              std::__split_buffer<Prompt>::~__split_buffer((uint64_t)&buf);
            }
            else
            {
              *(_OWORD *)(v272 + 8) = 0u;
              *(_OWORD *)(v272 + ++*(_DWORD *)(result + 24) = 0u;
              *(void *)(v272 + 40) = 0;
              *(void *)(v272 + 48) = 0;
              *(void *)unint64_t v272 = 0x8000000080000000;
              *(_DWORD *)(v272 + 8) = -1;
              *(void *)(v272 + 56) = 0;
              *(void *)(v272 + 64) = 0;
              *(_WORD *)(v272 + 40) = 0;
              *(void *)(v272 + 16) = 0;
              *(void *)(v272 + ++*(_DWORD *)(result + 24) = 0;
              unint64_t v274 = v272 + 72;
              *(void *)(v272 + 32) = 0;
              uint64_t v275 = v587;
            }
            *(void *)(v275 + 576) = v274;
            MEMORY[0x210558E70](v274 - 56, v252);
            int v282 = *(unsigned __int16 *)(v275 + 410);
            *(_DWORD *)(v274 - 72) = v282;
            *(_DWORD *)(v274 - 68) = *(unsigned __int16 *)(v275 + 412) - v282 + 1;
            std::vector<int>::__assign_with_size[abi:ne180100]<unsigned int const*,unsigned int const*>((char *)(v274 - 24), (char *)(v271 + v270 + 4 * v268), (char *)(v271 + v270 + 4 * v268 + 4 * (unsigned __int16)(v267 - v268)), (unsigned __int16)(v267 - v268));
            if (Diagnostics_GetLogObject(void)::onceToken != -1) {
              dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
            }
            uint64_t v214 = (void *)v587;
            uint64_t v215 = v580;
            uint64_t v283 = Diagnostics_GetLogObject(void)::__profile_log_default;
            if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
            {
              Censor::global_plaintext(&__p, (uint64_t)&v611);
              p_std::string p = &__p;
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                p_std::string p = (std::string *)__p.__r_.__value_.__r.__words[0];
              }
              int v285 = *(_DWORD *)(v274 - 72);
              int v286 = v285 + *(_DWORD *)(v274 - 68) - 1;
              uint64_t v287 = (uint64_t)(*(void *)(v274 - 16) - *(void *)(v274 - 24)) >> 2;
              LODWORD(buf.__r_.__value_.__l.__data_) = 136316162;
              *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v252;
              WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
              *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)p_p;
              HIWORD(buf.__r_.__value_.__r.__words[2]) = 1024;
              *(_DWORD *)v592 = v285;
              *(_WORD *)&v592[4] = 1024;
              *(_DWORD *)&v592[6] = v286;
              *(_WORD *)&v592[10] = 2048;
              *(void *)&v592[12] = v287;
              _os_log_impl(&dword_20CD80000, v283, OS_LOG_TYPE_DEFAULT, "Prompt   : \"%s\" for text: \"%s\" affecting phone ranges: [%d,%d], with units length: %lu ", (uint8_t *)&buf, 0x2Cu);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__p.__r_.__value_.__l.__data_);
              }
            }
            Censor::global_plaintext(&buf, (uint64_t)&v611);
            v289 = &buf;
            if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              v289 = (std::string *)buf.__r_.__value_.__r.__words[0];
            }
            Diagnostics::log(5, "Prompt   : \"%s\" for text: \"%s\" affecting phone ranges: [%d,%d], with units length: %lu ", v288, v252, v289, *(unsigned int *)(v274 - 72), (*(_DWORD *)(v274 - 72) + *(_DWORD *)(v274 - 68) - 1), (uint64_t)(*(void *)(v274 - 16) - *(void *)(v274 - 24)) >> 2);
            if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(buf.__r_.__value_.__l.__data_);
            }
            int v223 = v569;
            if (SHIBYTE(v611.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v611.__r_.__value_.__l.__data_);
            }
LABEL_441:
            uint64_t v250 = ++v251;
            uint64_t v249 = __na;
            if (v576 <= v251)
            {
              unint64_t v221 = (_OWORD *)v220;
              break;
            }
          }
        }
        std::string::size_type v224 = v249 - 1;
        uint64_t v222 = v544;
      }
      while (v249 > 0);
      uint64_t v219 = v214[38];
      uint64_t v218 = v214[39];
LABEL_445:
      uint64_t v222 = (unsigned __int16)++v223;
      if (0xAAAAAAAAAAAAAAABLL * ((v218 - v219) >> 3) <= (unsigned __int16)v223)
      {
        if (v221) {
          operator delete(v221);
        }
LABEL_448:
        if (SHIBYTE(v589.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v589.__r_.__value_.__l.__data_);
        }
        uint64_t v291 = *(void *)v215;
        uint64_t v290 = *((void *)v215 + 1);
        if (v290 == *(void *)v215) {
          goto LABEL_510;
        }
        unint64_t v292 = 0;
        v564 = v214 + 73;
        while (2)
        {
          uint64_t v293 = v291 + 216 * v292;
          uint64_t v294 = *(void *)(v293 + 72);
          uint64_t v295 = *(void *)(v293 + 80);
          if (v294 == v295) {
            goto LABEL_509;
          }
          unint64_t __nb = v292;
          uint64_t v577 = *(void *)(v293 + 80);
LABEL_454:
          if (*(_DWORD *)v294 != 9 || *(_DWORD *)(v294 + 4) != 0x7FFFFFFF)
          {
LABEL_507:
            v294 += 56;
            if (v294 == v295)
            {
              uint64_t v291 = *(void *)v215;
              uint64_t v290 = *((void *)v215 + 1);
LABEL_509:
              if (++v292 >= 0x84BDA12F684BDA13 * ((v290 - v291) >> 3))
              {
LABEL_510:
                if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__str.__r_.__value_.__l.__data_);
                }
                return v572;
              }
              continue;
            }
            goto LABEL_454;
          }
          break;
        }
        uint64_t v297 = (long long *)(v294 + 8);
        if (*(char *)(v294 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v294 + 8), *(void *)(v294 + 16));
        }
        else
        {
          long long v298 = *v297;
          __p.__r_.__value_.__r.__words[2] = *(void *)(v294 + 24);
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v298;
        }
        PromptStream::normalize_audio_prompt_name((void **)&__p.__r_.__value_.__l.__data_);
        char v299 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) > 0xA) {
            goto LABEL_507;
          }
          std::string::size_type v300 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          goto LABEL_466;
        }
        std::string::size_type v300 = __p.__r_.__value_.__l.__size_;
        if (__p.__r_.__value_.__l.__size_ < 0xB)
        {
LABEL_466:
          if (v300 >= 8)
          {
            uint64_t v301 = v214[10];
            uint64_t v302 = v214[11];
            if (v301 != v302)
            {
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                v303 = &__p;
              }
              else {
                v303 = (std::string *)__p.__r_.__value_.__r.__words[0];
              }
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                size_t v304 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
              }
              else {
                size_t v304 = __p.__r_.__value_.__l.__size_;
              }
              while (1)
              {
                unsigned int v305 = *(unsigned __int16 *)(*(void *)v301 + 2);
                if (*(_WORD *)(*(void *)v301 + 2)) {
                  break;
                }
LABEL_478:
                v301 += 8;
                if (v301 == v302)
                {
                  uint64_t v214 = (void *)v587;
                  uint64_t v215 = v580;
                  unint64_t v292 = __nb;
                  uint64_t v295 = v577;
                  goto LABEL_505;
                }
              }
              int v306 = 0;
              v307 = (unsigned int *)(*(void *)v301 + 4);
              while (memcmp(v307, v303, v304))
              {
                v307 += 9;
                if (++v306 >= v305) {
                  goto LABEL_478;
                }
              }
              v594 = 0;
              v595[0] = 0;
              v593 = 0;
              memset(v592, 0, 18);
              buf.__r_.__value_.__r.__words[2] = 0;
              unint64_t v292 = __nb;
              LODWORD(buf.__r_.__value_.__l.__data_) = __nb;
              *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = 0xFFFFFFFF00000000;
              uint64_t v214 = (void *)v587;
              uint64_t v308 = *(void *)(v587 + 384) + *(void *)(*(void *)(v587 + 352) + 32);
              uint64_t v309 = (char *)(v308 + 4 * v307[7]);
              uint64_t v310 = (char *)(v308 + 4 * v307[8]);
              std::vector<int>::__assign_with_size[abi:ne180100]<unsigned int const*,unsigned int const*>((char *)&v593, v309, v310, (v310 - v309) >> 2);
              unint64_t v311 = *(void *)(v587 + 576);
              unint64_t v312 = *(void *)(v587 + 584);
              if (v311 >= v312)
              {
                unint64_t v314 = 0x8E38E38E38E38E39 * ((uint64_t)(v311 - *v572) >> 3);
                unint64_t v315 = v314 + 1;
                if (v314 + 1 > 0x38E38E38E38E38ELL) {
                  std::vector<int>::__throw_length_error[abi:ne180100]();
                }
                unint64_t v316 = 0x8E38E38E38E38E39 * ((uint64_t)(v312 - *v572) >> 3);
                if (2 * v316 > v315) {
                  unint64_t v315 = 2 * v316;
                }
                if (v316 >= 0x1C71C71C71C71C7) {
                  unint64_t v317 = 0x38E38E38E38E38ELL;
                }
                else {
                  unint64_t v317 = v315;
                }
                v613 = v564;
                if (v317) {
                  unint64_t v317 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Prompt>>(v317);
                }
                else {
                  uint64_t v318 = 0;
                }
                v611.__r_.__value_.__r.__words[0] = v317;
                v611.__r_.__value_.__l.__size_ = v317 + 72 * v314;
                v611.__r_.__value_.__r.__words[2] = v611.__r_.__value_.__l.__size_;
                unint64_t v612 = v317 + 72 * v318;
                std::allocator<Prompt>::construct[abi:ne180100]<Prompt,Prompt const&>(v611.__r_.__value_.__l.__size_, (uint64_t *)&buf);
                v611.__r_.__value_.__r.__words[2] += 72;
                std::vector<Prompt>::__swap_out_circular_buffer(v572, &v611);
                unint64_t v313 = *(void *)(v587 + 576);
                std::__split_buffer<Prompt>::~__split_buffer((uint64_t)&v611);
              }
              else
              {
                std::allocator<Prompt>::construct[abi:ne180100]<Prompt,Prompt const&>(*(void *)(v587 + 576), (uint64_t *)&buf);
                unint64_t v313 = v311 + 72;
                *(void *)(v587 + 576) = v311 + 72;
              }
              *(void *)(v587 + 576) = v313;
              if (Diagnostics_GetLogObject(void)::onceToken != -1) {
                dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
              }
              v319 = Diagnostics_GetLogObject(void)::__profile_log_default;
              if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
              {
                std::string::size_type v321 = v294 + 8;
                if (*(char *)(v294 + 31) < 0) {
                  std::string::size_type v321 = *(void *)v297;
                }
                LODWORD(v611.__r_.__value_.__l.__data_) = 136315650;
                *(std::string::size_type *)((char *)v611.__r_.__value_.__r.__words + 4) = (std::string::size_type)v307;
                WORD2(v611.__r_.__value_.__r.__words[1]) = 2080;
                *(std::string::size_type *)((char *)&v611.__r_.__value_.__r.__words[1] + 6) = v321;
                HIWORD(v611.__r_.__value_.__r.__words[2]) = 2048;
                unint64_t v612 = __nb;
                _os_log_impl(&dword_20CD80000, v319, OS_LOG_TYPE_DEFAULT, "Prompt   : \"%s\" canned: \"%s\" at phone: [%zu]", (uint8_t *)&v611, 0x20u);
              }
              if (*(char *)(v294 + 31) < 0) {
                uint64_t v297 = *(long long **)v297;
              }
              Diagnostics::log(5, "Prompt   : \"%s\" canned: \"%s\" at phone: [%zu]", v320, v307, v297, __nb);
              if (v593)
              {
                v594 = v593;
                operator delete(v593);
              }
              uint64_t v295 = v577;
              uint64_t v215 = v580;
              if ((v592[15] & 0x80000000) != 0) {
                operator delete((void *)buf.__r_.__value_.__r.__words[2]);
              }
              char v299 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            }
          }
LABEL_505:
          if ((v299 & 0x80) == 0) {
            goto LABEL_507;
          }
        }
        operator delete(__p.__r_.__value_.__l.__data_);
        goto LABEL_507;
      }
    }
  }
  uint64_t v6 = *((void *)v3 + 45);
  if (*(_WORD *)(v6 + 20))
  {
    if (*(unsigned __int16 *)(v6 + 20) >= 3u && *(_WORD *)(v6 + 18) == 2)
    {
      if (Diagnostics_GetLogObject(void)::onceToken != -1) {
        dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
      }
      uint64_t v7 = Diagnostics_GetLogObject(void)::__profile_log_default;
      if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
      {
        LOWORD(buf.__r_.__value_.__l.__data_) = 0;
        _os_log_impl(&dword_20CD80000, v7, OS_LOG_TYPE_ERROR, "Prompts version has not been coded for and likely does not exist", (uint8_t *)&buf, 2u);
      }
      unint64_t v9 = "Prompts version has not been coded for and likely does not exist";
LABEL_22:
      Diagnostics::log(3, v9, v8);
      goto LABEL_771;
    }
  }
  else if (*(_WORD *)(v6 + 18) == 2)
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    uint64_t v10 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_20CD80000, v10, OS_LOG_TYPE_ERROR, "Running broken version of prompt file, please upgrade voice for prompts", (uint8_t *)&buf, 2u);
    }
    unint64_t v9 = "Running broken version of prompt file, please upgrade voice for prompts";
    goto LABEL_22;
  }
  std::string::basic_string[abi:ne180100]<0>(&buf, "NORMAL");
  *(_WORD *)v592 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v592[8], "NEUTRAL");
  LOWORD(v594) = 1;
  std::string::basic_string[abi:ne180100]<0>(v595, "EMPHATIC");
  __int16 v596 = 2;
  std::string::basic_string[abi:ne180100]<0>(v597, "PLAYFUL");
  __int16 v598 = 3;
  std::string::basic_string[abi:ne180100]<0>(v599, "QUIET");
  __int16 v600 = 4;
  std::string::basic_string[abi:ne180100]<0>(v601, "BORED");
  __int16 v602 = 5;
  std::string::basic_string[abi:ne180100]<0>(v603, "NONE");
  __int16 v604 = 0;
  std::string::basic_string[abi:ne180100]<0>(v605, "SPELL");
  __int16 v606 = 7;
  std::string::basic_string[abi:ne180100]<0>(v607, "DO NOT MATCH");
  __int16 v608 = 8;
  std::string::basic_string[abi:ne180100]<0>(v609, "DISABLED");
  std::string::size_type v11 = 0;
  uint64_t v12 = 0;
  __int16 v610 = 9;
  *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
  p_std::string::size_type size = &__p.__r_.__value_.__l.__size_;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p.__r_.__value_.__l.__size_;
  while (1)
  {
    if ((std::string::size_type *)__p.__r_.__value_.__l.__data_ == &__p.__r_.__value_.__r.__words[1])
    {
      char v15 = &__p.__r_.__value_.__l.__size_;
      if (!v11) {
        goto LABEL_31;
      }
LABEL_33:
      v589.__r_.__value_.__r.__words[0] = (std::string::size_type)v15;
      uint64_t v16 = (uint64_t **)(v15 + 1);
LABEL_35:
      if (*v16) {
        goto LABEL_39;
      }
      goto LABEL_36;
    }
    uint64_t v14 = &__p.__r_.__value_.__l.__size_;
    if (v11)
    {
      do
      {
        char v15 = (std::string::size_type *)v11;
        std::string::size_type v11 = *(void *)(v11 + 8);
      }
      while (v11);
    }
    else
    {
      do
      {
        char v15 = (std::string::size_type *)v14[2];
        BOOL v28 = *v15 == (void)v14;
        uint64_t v14 = v15;
      }
      while (v28);
    }
    if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)&__p.__r_.__value_.__r.__words[2], (const void **)v15 + 4, (const void **)&buf.__r_.__value_.__l.__data_ + 4 * v12))
    {
      uint64_t v16 = (uint64_t **)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__find_equal<std::string>((uint64_t)&__p, &v589, (const void **)&buf.__r_.__value_.__l.__data_ + 4 * v12);
      goto LABEL_35;
    }
    if (__p.__r_.__value_.__l.__size_) {
      goto LABEL_33;
    }
LABEL_31:
    v589.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p.__r_.__value_.__l.__size_;
    uint64_t v16 = (uint64_t **)&__p.__r_.__value_.__l.__size_;
LABEL_36:
    std::__tree<std::__value_type<std::string,Emotion>,std::__map_value_compare<std::string,std::__value_type<std::string,Emotion>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Emotion>>>::__construct_node<std::pair<std::string const,Emotion> const&>((uint64_t)&v611, (uint64_t)&__p, (uint64_t)&buf + 32 * v12);
    std::string::size_type v17 = v589.__r_.__value_.__r.__words[0];
    __n128 v18 = (uint64_t *)v611.__r_.__value_.__r.__words[0];
    *(void *)v611.__r_.__value_.__l.__data_ = 0;
    v18[1] = 0;
    void v18[2] = v17;
    *uint64_t v16 = v18;
    if (*(void *)__p.__r_.__value_.__l.__data_)
    {
      __p.__r_.__value_.__r.__words[0] = *(void *)__p.__r_.__value_.__l.__data_;
      __n128 v18 = *v16;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)__p.__r_.__value_.__l.__size_, v18);
    ++__p.__r_.__value_.__r.__words[2];
LABEL_39:
    if (++v12 == 10) {
      break;
    }
    std::string::size_type v11 = __p.__r_.__value_.__l.__size_;
  }
  uint64_t v19 = 40;
  do
  {
    if (SHIBYTE(__p.__r_.__value_.__r.__words[v19 + 2]) < 0) {
      operator delete(*(void **)((char *)&__p.__r_.__value_.__l.__data_ + v19 * 8));
    }
    v19 -= 4;
  }
  while (v19 * 8);
  uint64_t v20 = (uint64_t **)((char *)v3 + 448);
  if ((std::string *)((char *)v3 + 448) != &__p)
  {
    std::string::size_type v21 = __p.__r_.__value_.__r.__words[0];
    if (*((void *)v3 + 58))
    {
      std::string::size_type v22 = *((void *)v3 + 56);
      uint64_t v23 = *((void *)v3 + 57);
      *((void *)v3 + 56) = (char *)v3 + 456;
      *(void *)(v23 + 16) = 0;
      *((void *)v3 + 57) = 0;
      *((void *)v3 + 58) = 0;
      if (*(void *)(v22 + 8)) {
        std::string::size_type v24 = *(void *)(v22 + 8);
      }
      else {
        std::string::size_type v24 = v22;
      }
      buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v3 + 448;
      buf.__r_.__value_.__l.__size_ = v24;
      buf.__r_.__value_.__r.__words[2] = v24;
      if (v24)
      {
        buf.__r_.__value_.__l.__size_ = (std::string::size_type)std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::_DetachedTreeCache::__detach_next(v24);
        if ((std::string::size_type *)v21 != &__p.__r_.__value_.__r.__words[1])
        {
          do
          {
            std::string::operator=((std::string *)(v24 + 32), (const std::string *)(v21 + 32));
            *(_WORD *)(v24 + 56) = *(_WORD *)(v21 + 56);
            uint64_t v25 = (uint64_t *)buf.__r_.__value_.__r.__words[2];
            leaf_high = (uint64_t **)std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::__find_leaf_high((uint64_t)v20, &v611, (const void **)(buf.__r_.__value_.__r.__words[2] + 32));
            std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__insert_node_at(v20, (uint64_t)v611.__r_.__value_.__l.__data_, leaf_high, v25);
            buf.__r_.__value_.__r.__words[2] = buf.__r_.__value_.__l.__size_;
            if (buf.__r_.__value_.__l.__size_) {
              buf.__r_.__value_.__l.__size_ = (std::string::size_type)std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::_DetachedTreeCache::__detach_next(buf.__r_.__value_.__l.__size_);
            }
            unint64_t v27 = *(std::string::size_type **)(v21 + 8);
            if (v27)
            {
              do
              {
                p_std::string::size_type size = v27;
                unint64_t v27 = (std::string::size_type *)*v27;
              }
              while (v27);
            }
            else
            {
              do
              {
                p_std::string::size_type size = *(std::string::size_type **)(v21 + 16);
                BOOL v28 = *p_size == v21;
                std::string::size_type v21 = (std::string::size_type)p_size;
              }
              while (!v28);
            }
            std::string::size_type v24 = buf.__r_.__value_.__r.__words[2];
            if (buf.__r_.__value_.__r.__words[2]) {
              BOOL v28 = p_size == &__p.__r_.__value_.__r.__words[1];
            }
            else {
              BOOL v28 = 1;
            }
            std::string::size_type v21 = (std::string::size_type)p_size;
          }
          while (!v28);
        }
      }
      else
      {
        p_std::string::size_type size = (std::string::size_type *)v21;
      }
      std::__tree<std::__value_type<std::string,Emotion>,std::__map_value_compare<std::string,std::__value_type<std::string,Emotion>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Emotion>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&buf);
      std::string::size_type v21 = (std::string::size_type)p_size;
    }
    if ((std::string::size_type *)v21 != &__p.__r_.__value_.__r.__words[1])
    {
      do
      {
        std::__tree<std::__value_type<std::string,Emotion>,std::__map_value_compare<std::string,std::__value_type<std::string,Emotion>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Emotion>>>::__construct_node<std::pair<std::string const,Emotion> const&>((uint64_t)&buf, (uint64_t)v20, v21 + 32);
        v324 = (uint64_t *)buf.__r_.__value_.__r.__words[0];
        v325 = (uint64_t **)std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::__find_leaf_high((uint64_t)v20, &v611, (const void **)(buf.__r_.__value_.__r.__words[0] + 32));
        std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__insert_node_at(v20, (uint64_t)v611.__r_.__value_.__l.__data_, v325, v324);
        v326 = *(std::string **)(v21 + 8);
        if (v326)
        {
          do
          {
            v327 = v326;
            v326 = (std::string *)v326->__r_.__value_.__r.__words[0];
          }
          while (v326);
        }
        else
        {
          do
          {
            v327 = *(std::string **)(v21 + 16);
            BOOL v28 = v327->__r_.__value_.__r.__words[0] == v21;
            std::string::size_type v21 = (std::string::size_type)v327;
          }
          while (!v28);
        }
        std::string::size_type v21 = (std::string::size_type)v327;
      }
      while (v327 != (std::string *)&__p.__r_.__value_.__r.__words[1]);
    }
  }
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy((char *)__p.__r_.__value_.__l.__size_);
  uint64_t v328 = *((void *)j + 1) - *(void *)j;
  unint64_t v329 = 0x84BDA12F684BDA13 * (v328 >> 3);
  v330 = (unsigned char *)*((void *)v3 + 67);
  v331 = (char *)*((void *)v3 + 66);
  unint64_t v332 = (v330 - v331) >> 1;
  if (v329 <= v332)
  {
    if (v329 >= v332)
    {
      v337 = *(char **)(v587 + 528);
      uint64_t k = *(char **)(v587 + 536);
      uint64_t v341 = v587;
    }
    else
    {
      uint64_t k = &v331[0x97B425ED097B426 * (v328 >> 3)];
      uint64_t v341 = v587;
      *(void *)(v587 + 536) = k;
      v337 = v331;
    }
  }
  else
  {
    unint64_t v333 = v329 - v332;
    uint64_t v334 = *(void *)(v587 + 544);
    if (v329 - v332 <= (v334 - (uint64_t)v330) >> 1)
    {
      bzero(*(void **)(v587 + 536), 2 * v333);
      uint64_t k = &v330[2 * v333];
      *(void *)(v587 + 536) = k;
      v337 = v331;
      uint64_t v341 = v587;
    }
    else
    {
      if (v328 < 0) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      if (v334 - (uint64_t)v331 > v329) {
        unint64_t v329 = v334 - (void)v331;
      }
      if ((unint64_t)(v334 - (void)v331) >= 0x7FFFFFFFFFFFFFFELL) {
        uint64_t v335 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        uint64_t v335 = v329;
      }
      if (v335 < 0) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      v336 = (char *)operator new(2 * v335);
      v337 = &v336[2 * v332];
      v338 = &v336[2 * v335];
      bzero(v337, 2 * v333);
      for (uint64_t k = &v337[2 * v333]; v330 != v331; v337 -= 2)
      {
        __int16 v340 = *((_WORD *)v330 - 1);
        v330 -= 2;
        *((_WORD *)v337 - 1) = v340;
      }
      *(void *)(v587 + 528) = v337;
      *(void *)(v587 + 536) = k;
      *(void *)(v587 + 544) = v338;
      uint64_t v341 = v587;
      if (v331)
      {
        operator delete(v331);
        uint64_t k = *(char **)(v587 + 536);
        v337 = *(char **)(v587 + 528);
      }
    }
  }
  uint64_t v342 = k - v337;
  BOOL v343 = v342 == 1;
  if (v342 >= 1)
  {
    unint64_t v344 = (unint64_t)v342 >> 1;
    uint64_t v345 = !v343;
    bzero(v337, 2 * (v344 - v345) + 2);
  }
  v346 = *(const std::string::value_type **)j;
  v347 = (const std::string::value_type *)*((void *)j + 1);
  if (v347 == *(const std::string::value_type **)j)
  {
    LOWORD(v369) = 0;
    *(unsigned char *)(v341 + 441) = 0;
    goto LABEL_602;
  }
  unint64_t v348 = 0;
  __int16 v349 = 0;
  v350 = (std::locale::id *)MEMORY[0x263F8C108];
  while (2)
  {
    uint64_t v351 = *(void *)&v346[216 * v348 + 72];
    if (*(void *)&v346[216 * v348 + 80] == v351) {
      goto LABEL_591;
    }
    uint64_t v352 = 0;
    while (2)
    {
      if (*(_DWORD *)(v351 + 56 * v352) == 8)
      {
        uint64_t v353 = v351 + 56 * v352;
        v354 = (const std::string::value_type **)(v353 + 8);
        if (*(char *)(v353 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(&buf, *v354, *(void *)(v353 + 16));
        }
        else
        {
          long long v355 = *(_OWORD *)v354;
          buf.__r_.__value_.__r.__words[2] = *(void *)(v353 + 24);
          *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v355;
        }
        MEMORY[0x210559440](&v611);
        if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          v356 = &buf;
        }
        else {
          v356 = (std::string *)buf.__r_.__value_.__r.__words[0];
        }
        if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v357 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v357 = buf.__r_.__value_.__l.__size_;
        }
        for (; v357; --v357)
        {
          std::string::value_type v358 = v356->__r_.__value_.__s.__data_[0];
          v359 = std::locale::use_facet((const std::locale *)&v611, v350);
          v356->__r_.__value_.__s.__data_[0] = ((uint64_t (*)(const std::locale::facet *, void))v359->__vftable[1].~facet)(v359, v358);
          v356 = (std::string *)((char *)v356 + 1);
        }
        std::locale::~locale((std::locale *)&v611);
        std::string v360 = (void **)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__find_equal<std::string>((uint64_t)v20, &v611, (const void **)&buf.__r_.__value_.__l.__data_);
        v361 = (char *)*v360;
        if (!*v360)
        {
          v362 = (uint64_t **)v360;
          v361 = (char *)operator new(0x40uLL);
          v363 = (std::string *)(v361 + 32);
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external(v363, buf.__r_.__value_.__l.__data_, buf.__r_.__value_.__l.__size_);
          }
          else
          {
            *(_OWORD *)&v363->__r_.__value_.__l.__data_ = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
            *((void *)v361 + 6) = *((void *)&buf.__r_.__value_.__l + 2);
          }
          *((_WORD *)v361 + 28) = 0;
          std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__insert_node_at(v20, (uint64_t)v611.__r_.__value_.__l.__data_, v362, (uint64_t *)v361);
        }
        __int16 v349 = *((_WORD *)v361 + 28);
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(buf.__r_.__value_.__l.__data_);
        }
        v346 = *(const std::string::value_type **)v580;
      }
      uint64_t v351 = *(void *)&v346[216 * v348 + 72];
      if (*(_DWORD *)(v351 + 56 * v352) == 11)
      {
        uint64_t v364 = v351 + 56 * v352;
        std::string v365 = (uint64_t **)(v364 + 8);
        int v366 = *(char *)(v364 + 31);
        if (v366 < 0)
        {
          if (v365[1] != (uint64_t *)5) {
            goto LABEL_589;
          }
          std::string v365 = (uint64_t **)*v365;
        }
        else if (v366 != 5)
        {
          goto LABEL_589;
        }
        unsigned int v367 = bswap32(*(_DWORD *)v365);
        if (v367 == 1936745836)
        {
          int v368 = *((unsigned __int8 *)v365 + 4) - 108;
        }
        else if (v367 < 0x7370656C)
        {
          int v368 = -1;
        }
        else
        {
          int v368 = 1;
        }
        if (!v368) {
          __int16 v349 = 7;
        }
      }
LABEL_589:
      if (0x6DB6DB6DB6DB6DB7 * ((*(void *)&v346[216 * v348 + 80] - v351) >> 3) > (unint64_t)++v352) {
        continue;
      }
      break;
    }
    v337 = *(char **)(v587 + 528);
    uint64_t j = v580;
    v347 = (const std::string::value_type *)*((void *)v580 + 1);
LABEL_591:
    *(_WORD *)&v337[2 * v348++] = v349;
    unint64_t v369 = (v347 - v346) / 216;
    if (v369 > v348) {
      continue;
    }
    break;
  }
  uint64_t v341 = v587;
  *(unsigned char *)(v587 + 441) = 0;
  if (v347 != v346)
  {
    if (v369 <= 1) {
      uint64_t v370 = 1;
    }
    else {
      uint64_t v370 = (v347 - v346) / 216;
    }
    std::string v371 = (int *)(v346 + 184);
    while (1)
    {
      int v372 = *v371;
      v371 += 54;
      if (v372 == 1) {
        break;
      }
      if (!--v370) {
        goto LABEL_602;
      }
    }
    *(unsigned char *)(v587 + 441) = 1;
  }
LABEL_602:
  *(_WORD *)(v341 + 414) = v369;
  std::__tree<std::__value_type<unsigned long,std::pair<unsigned long,unsigned long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::pair<unsigned long,unsigned long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::pair<unsigned long,unsigned long>>>>::destroy(*(void **)(v341 + 40));
  *(void *)(v341 + 32) = v341 + 40;
  *(void *)(v341 + 48) = 0;
  *(void *)(v341 + 40) = 0;
  std::vector<std::vector<int>>::__clear[abi:ne180100]((uint64_t *)(v341 + 56));
  uint64_t v373 = v341 + 16;
  std::__tree<std::__value_type<unsigned long,std::pair<unsigned long,unsigned long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::pair<unsigned long,unsigned long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::pair<unsigned long,unsigned long>>>>::destroy(*(void **)(v341 + 16));
  *(void *)(v341 + 8) = v341 + 16;
  *(void *)(v341 + 16) = 0;
  *(void *)(v341 + ++*(_DWORD *)(result + 24) = 0;
  std::vector<std::vector<int>>::resize((uint64_t *)(v341 + 56), 0);
  uint64_t v374 = *(void *)(v341 + 304);
  std::string::size_type v375 = *(void *)(v341 + 312);
  while (v375 != v374)
  {
    v375 -= 24;
    buf.__r_.__value_.__r.__words[0] = v375;
    std::vector<std::vector<long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
  }
  *(void *)(v587 + 312) = v374;
  v547 = (std::string::size_type *)(v587 + 256);
  std::vector<BOOL>::resize(v587 + 256, 0x84BDA12F684BDA13 * ((uint64_t)(*((void *)j + 1) - *(void *)j) >> 3), 0);
  unint64_t v376 = *(void *)(v587 + 264);
  if (v376)
  {
    buf.__r_.__value_.__r.__words[0] = *v547;
    LODWORD(buf.__r_.__value_.__r.__words[1]) = 0;
    std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>((uint64_t)&buf, v376);
  }
  v578 = (void *)(v373 + 288);
  std::vector<std::vector<std::vector<std::pair<unsigned short,unsigned short>>>>::resize((char **)(v373 + 288), 0x84BDA12F684BDA13 * ((uint64_t)(*((void *)v580 + 1) - *(void *)v580) >> 3));
  std::vector<std::string>::resize((std::vector<std::string> *)(v587 + 504), 0x97B425ED097B426 * ((uint64_t)(*((void *)v580 + 1) - *(void *)v580) >> 3));
  uint64_t v3 = (TAPExtractor *)v587;
  uint64_t v377 = *(void *)(v587 + 512);
  if (v377 == *(void *)(v587 + 504))
  {
    uint64_t v388 = *(void *)(v587 + 512);
  }
  else
  {
    uint64_t v378 = 0;
    unsigned __int16 v379 = 0;
    do
    {
      uint64_t v380 = *(void *)v580 + 216 * (v379 >> 1);
      if (*(char *)(v380 + 23) >= 0) {
        size_t v381 = *(unsigned __int8 *)(v380 + 23);
      }
      else {
        size_t v381 = *(void *)(v380 + 8);
      }
      std::string::basic_string[abi:ne180100]((uint64_t)&buf, v381 + 1);
      if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v382 = &buf;
      }
      else {
        v382 = (std::string *)buf.__r_.__value_.__r.__words[0];
      }
      if (v381)
      {
        if (*(char *)(v380 + 23) >= 0) {
          v383 = (const void *)v380;
        }
        else {
          v383 = *(const void **)v380;
        }
        memmove(v382, v383, v381);
      }
      long long v384 = (char *)v382 + v381;
      if (v379) {
        char v385 = 50;
      }
      else {
        char v385 = 49;
      }
      *long long v384 = v385;
      v384[1] = 0;
      uint64_t v386 = *(void *)(v587 + 504) + 24 * v378;
      if (*(char *)(v386 + 23) < 0) {
        operator delete(*(void **)v386);
      }
      long long v387 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
      *(void *)(v386 + 16) = *((void *)&buf.__r_.__value_.__l + 2);
      *(_OWORD *)uint64_t v386 = v387;
      uint64_t v378 = ++v379;
      uint64_t v377 = *(void *)(v587 + 504);
      uint64_t v388 = *(void *)(v587 + 512);
    }
    while (0xAAAAAAAAAAAAAAABLL * ((v388 - v377) >> 3) > v379);
    uint64_t v3 = (TAPExtractor *)v587;
  }
  uint64_t j = v580;
  if (((((*((_DWORD *)v3 + 28) - *((_DWORD *)v3 + 26)) >> 3) - 1) & 0x8000) == 0)
  {
    uint64_t v389 = (unsigned __int16)(((*((_DWORD *)v3 + 28) - *((_DWORD *)v3 + 26)) >> 3) - 1);
    do
    {
      uint64_t v560 = v389;
      uint64_t v390 = **(unsigned __int16 **)(*((void *)v3 + 13) + 8 * v389);
      if (**(_WORD **)(*((void *)v3 + 13) + 8 * v389)) {
        BOOL v391 = 2 * *((unsigned __int16 *)v3 + 207) >= v390;
      }
      else {
        BOOL v391 = 0;
      }
      if (v391)
      {
        unsigned int v392 = 0;
        if (v390 >= 8) {
          uint64_t v393 = 8;
        }
        else {
          uint64_t v393 = **(unsigned __int16 **)(*((void *)v3 + 13) + 8 * v389);
        }
        if ((unsigned __int16)(v393 - 1) >= (unsigned __int16)(-1
                                                                            - 21845 * ((v388 - v377) >> 3)))
          uint64_t v394 = (unsigned __int16)(-1 - 21845 * ((v388 - v377) >> 3));
        else {
          uint64_t v394 = (unsigned __int16)(v393 - 1);
        }
        std::string v395 = (int *)*((void *)v3 + 16);
        uint64_t v396 = v394 + 1;
        std::string v397 = (char *)(v377 + 24 * v394);
        do
        {
          std::string v398 = v397;
          if (v397[23] < 0) {
            std::string v398 = *(char **)v397;
          }
          int v399 = *v395++;
          v392 += v399 * *v398;
          v397 -= 24;
          BOOL v123 = v396-- <= 1;
        }
        while (!v123);
        unint64_t v400 = 0;
        if ((unsigned __int16)(v390 - 1) >= 7u) {
          int v401 = 7;
        }
        else {
          int v401 = (unsigned __int16)(v390 - 1);
        }
        uint64_t v565 = v390;
        unsigned int v570 = v401;
        uint64_t __nc = v393 - 1;
        do
        {
          if (v400)
          {
            std::string v402 = (char *)(v377 + 24 * (v400 - 1));
            if (v402[23] < 0) {
              std::string v402 = *(char **)v402;
            }
            std::string v403 = (char *)(v377 + 24 * (__nc + v400));
            if (v403[23] < 0) {
              std::string v403 = *(char **)v403;
            }
            uint64_t v404 = v587;
            unsigned int v392 = (v392 - *(_DWORD *)(*(void *)(v587 + 128) + 4 * __nc) * *v402)
                 * *(unsigned __int16 *)(*(void *)(v587 + 352) + 22)
                 + *v403;
          }
          else
          {
            uint64_t v404 = v587;
          }
          std::string v405 = std::__hash_table<std::__hash_value_type<unsigned int,std::pair<unsigned short,unsigned short>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::pair<unsigned short,unsigned short>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::pair<unsigned short,unsigned short>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::pair<unsigned short,unsigned short>>>>::__equal_range_multi<unsigned int>((void *)(*(void *)(v404 + 280) + 40 * v570), v392);
          if (v405 != v406)
          {
            std::string v407 = v405;
            std::string v408 = v406;
            do
            {
              int v409 = *((unsigned __int16 *)v407 + 11);
              uint64_t v410 = *((unsigned __int16 *)v407 + 10);
              std::string v411 = *(unsigned __int16 **)(*(void *)(v587 + 104) + 8 * v410);
              unint64_t v412 = (unint64_t)*v411 >> 1;
              if (TAPExtractor::detect_v2_match(v587, (unsigned __int16)(v400 >> 1), v412, (uint64_t)&v411[28 * *((unsigned __int16 *)v407 + 11) + 2], (uint64_t *)j))
              {
                std::string v413 = (uint64_t *)(*v578 + 24 * (unsigned __int16)(v400 >> 1));
                uint64_t v414 = *v413;
                if (0xAAAAAAAAAAAAAAABLL * ((v413[1] - *v413) >> 3) <= v412)
                {
                  std::vector<std::vector<std::pair<unsigned short,unsigned short>>>::resize((uint64_t)v413, v412 + 1);
                  uint64_t v414 = *(void *)(*v578 + 24 * (unsigned __int16)(v400 >> 1));
                }
                std::string v415 = (void **)(v414 + 24 * v412);
                int v416 = v410 | (v409 << 16);
                std::string v417 = v415 + 1;
                std::string v418 = v415[1];
                unint64_t v419 = (unint64_t)v415[2];
                if ((unint64_t)v418 >= v419)
                {
                  uint64_t v421 = ((char *)v418 - (unsigned char *)*v415) >> 2;
                  if ((unint64_t)(v421 + 1) >> 62) {
                    std::vector<int>::__throw_length_error[abi:ne180100]();
                  }
                  uint64_t v422 = v419 - (void)*v415;
                  uint64_t v423 = v422 >> 1;
                  if (v422 >> 1 <= (unint64_t)(v421 + 1)) {
                    uint64_t v423 = v421 + 1;
                  }
                  if ((unint64_t)v422 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v424 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v424 = v423;
                  }
                  if (v424) {
                    unint64_t v424 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::TropicalWeightTpl<float>>>(v424);
                  }
                  else {
                    uint64_t v425 = 0;
                  }
                  std::string v426 = (_DWORD *)(v424 + 4 * v421);
                  *std::string v426 = v416;
                  std::string v420 = v426 + 1;
                  std::string v427 = (char *)*v417;
                  std::string v428 = (char *)*v415;
                  if (*v417 != *v415)
                  {
                    do
                    {
                      int v429 = *((_DWORD *)v427 - 1);
                      v427 -= 4;
                      *--std::string v426 = v429;
                    }
                    while (v427 != v428);
                    std::string v427 = (char *)*v415;
                  }
                  *std::string v415 = v426;
                  *std::string v417 = v420;
                  v415[2] = (void *)(v424 + 4 * v425);
                  if (v427) {
                    operator delete(v427);
                  }
                }
                else
                {
                  *std::string v418 = v416;
                  std::string v420 = v418 + 1;
                }
                *std::string v417 = v420;
              }
              std::string v407 = (uint64_t *)*v407;
              uint64_t j = v580;
            }
            while (v407 != v408);
            uint64_t v377 = *(void *)(v587 + 504);
            uint64_t v388 = *(void *)(v587 + 512);
            uint64_t v390 = v565;
          }
          ++v400;
        }
        while (0xAAAAAAAAAAAAAAABLL * ((v388 - v377) >> 3) - v390 >= v400);
      }
      uint64_t v389 = v560 - 1;
      uint64_t v3 = (TAPExtractor *)v587;
    }
    while (v560 > 0);
  }
  uint64_t v431 = *((void *)v3 + 38);
  uint64_t v430 = *((void *)v3 + 39);
  if (v430 != v431)
  {
    std::string v432 = 0;
    v549 = 0;
    std::string v433 = 0;
    uint64_t v434 = 0;
    unsigned __int16 __nd = 0;
    v546 = (char *)v3 + 584;
    while (1)
    {
      unsigned int v435 = -1 - 21845 * ((*(_DWORD *)(v431 + 24 * v434 + 8) - *(_DWORD *)(v431 + 24 * v434)) >> 3);
      if ((v435 & 0x8000) != 0) {
        goto LABEL_768;
      }
      uint64_t v436 = (unsigned __int16)v435;
      uint64_t v561 = __nd & 0x3F;
      uint64_t v543 = v434;
      while (2)
      {
        std::string v437 = (uint64_t *)(*(void *)(*v578 + 24 * v434) + 24 * v436);
        std::string v438 = v437 + 1;
        if (v437[1] == *v437) {
          goto LABEL_716;
        }
        if (Diagnostics_GetLogObject(void)::onceToken != -1) {
          dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
        }
        std::string v439 = Diagnostics_GetLogObject(void)::__profile_log_default;
        if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v441 = (*v438 - *v437) >> 2;
          LODWORD(buf.__r_.__value_.__l.__data_) = 134217984;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v441;
          _os_log_impl(&dword_20CD80000, v439, OS_LOG_TYPE_DEBUG, "Had %zu candidates for prompt match, applied sort. ", (uint8_t *)&buf, 0xCu);
        }
        Diagnostics::log(7, "Had %zu candidates for prompt match, applied sort. ", v440, (*v438 - *v437) >> 2);
        uint64_t v442 = *v437;
        if (*v438 == *v437)
        {
LABEL_716:
          unint64_t v444 = (unint64_t)v432;
          std::string v445 = v549;
        }
        else
        {
          unint64_t v443 = 0;
          unint64_t v444 = (unint64_t)v432;
          std::string v445 = v549;
          do
          {
            uint64_t v446 = *(void *)(*(void *)(v587 + 104) + 8 * *(unsigned __int16 *)(v442 + 4 * v443))
                 + 56 * *(unsigned __int16 *)(v442 + 4 * v443 + 2)
                 + 4;
            if (v444 >= (unint64_t)v445)
            {
              unint64_t v450 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v444 - (void)v432) >> 3) + 1;
              if (v450 > 0x492492492492492) {
                std::vector<int>::__throw_length_error[abi:ne180100]();
              }
              if (0xDB6DB6DB6DB6DB6ELL * ((v445 - v432) >> 3) > v450) {
                unint64_t v450 = 0xDB6DB6DB6DB6DB6ELL * ((v445 - v432) >> 3);
              }
              if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((v445 - v432) >> 3)) >= 0x249249249249249) {
                unint64_t v451 = 0x492492492492492;
              }
              else {
                unint64_t v451 = v450;
              }
              if (v451)
              {
                if (v451 > 0x492492492492492) {
                  std::__throw_bad_array_new_length[abi:ne180100]();
                }
                std::string v452 = (char *)operator new(56 * v451);
              }
              else
              {
                std::string v452 = 0;
              }
              std::string v453 = &v452[8 * ((uint64_t)(v444 - (void)v432) >> 3)];
              long long v454 = *(_OWORD *)v446;
              long long v455 = *(_OWORD *)(v446 + 16);
              long long v456 = *(_OWORD *)(v446 + 32);
              *((void *)v453 + 6) = *(void *)(v446 + 48);
              *((_OWORD *)v453 + 1) = v455;
              *((_OWORD *)v453 + 2) = v456;
              *(_OWORD *)std::string v453 = v454;
              if ((char *)v444 == v432)
              {
                std::string v461 = &v452[8 * ((uint64_t)(v444 - (void)v432) >> 3)];
                uint64_t j = v580;
              }
              else
              {
                std::string v457 = &v452[8 * ((uint64_t)(v444 - (void)v432) >> 3)];
                uint64_t j = v580;
                do
                {
                  long long v458 = *(_OWORD *)(v444 - 56);
                  long long v459 = *(_OWORD *)(v444 - 40);
                  long long v460 = *(_OWORD *)(v444 - 24);
                  std::string v461 = v457 - 56;
                  *((void *)v457 - 1) = *(void *)(v444 - 8);
                  *(_OWORD *)(v457 - ++*(_DWORD *)(result + 24) = v460;
                  *(_OWORD *)(v457 - 40) = v459;
                  *(_OWORD *)(v457 - 56) = v458;
                  v444 -= 56;
                  v457 -= 56;
                }
                while ((char *)v444 != v432);
              }
              std::string v445 = &v452[56 * v451];
              unint64_t v444 = (unint64_t)(v453 + 56);
              if (v432)
              {
                std::string v462 = &v452[56 * v451];
                operator delete(v432);
                std::string v445 = v462;
              }
              std::string v432 = v461;
            }
            else
            {
              long long v447 = *(_OWORD *)v446;
              long long v448 = *(_OWORD *)(*(void *)(*(void *)(v587 + 104) + 8 * *(unsigned __int16 *)(v442 + 4 * v443))
                               + 56 * *(unsigned __int16 *)(v442 + 4 * v443 + 2)
                               + 20);
              long long v449 = *(_OWORD *)(*(void *)(*(void *)(v587 + 104) + 8 * *(unsigned __int16 *)(v442 + 4 * v443))
                               + 56 * *(unsigned __int16 *)(v442 + 4 * v443 + 2)
                               + 36);
              *(void *)(v444 + 48) = *(void *)(*(void *)(*(void *)(v587 + 104)
                                                             + 8 * *(unsigned __int16 *)(v442 + 4 * v443))
                                                 + 56 * *(unsigned __int16 *)(v442 + 4 * v443 + 2)
                                                 + 52);
              *(_OWORD *)(v444 + 16) = v448;
              *(_OWORD *)(v444 + 32) = v449;
              *(_OWORD *)unint64_t v444 = v447;
              v444 += 56;
            }
            ++v443;
            uint64_t v442 = *v437;
          }
          while (v443 < (*v438 - *v437) >> 2);
        }
        v549 = v445;
        unint64_t v463 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v444 - (void)v432) >> 3);
        unint64_t v464 = 126 - 2 * __clz(v463);
        buf.__r_.__value_.__r.__words[0] = (std::string::size_type)TAPExtractor::compare_v2_prompts_by_boundary_conditions;
        if ((char *)v444 == v432) {
          uint64_t v465 = 0;
        }
        else {
          uint64_t v465 = v464;
        }
        std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(TAPFileBuilder::v2_top_level_prompt_info const&,TAPFileBuilder::v2_top_level_prompt_info const&),TAPFileBuilder::v2_top_level_prompt_info*,false>((unint64_t)v432, v444, (uint64_t (**)(long long *, long long *))&buf, v465, 1);
        if ((char *)v444 == v432) {
          goto LABEL_765;
        }
        uint64_t v466 = 0;
        unsigned __int16 v467 = 0;
        unint64_t __posb = (v561 + (unsigned __int16)v436) & 0x1FFC0 | (unint64_t)(((_BYTE)v436 + (__nd & 0x3F)) & 0x3F);
        do
        {
          uint64_t v468 = (uint64_t)&v432[56 * v466];
          if (!TAPExtractor::detect_v2_match(v587, __nd, (unsigned __int16)v436, v468, (uint64_t *)j)) {
            goto LABEL_764;
          }
          if (v436)
          {
            unint64_t v469 = __nd;
            do
            {
              if (*(unsigned __int16 *)(*(void *)(v587 + 528) + 2 * v469) != *(unsigned __int16 *)&v432[56 * v466 + 22]) {
                goto LABEL_764;
              }
              ++v469;
            }
            while (v469 < v436 + __nd);
          }
          uint64_t v470 = *(void *)(v587 + 472);
          uint64_t v471 = *(void *)(v587 + 480);
          uint64_t v472 = v471 - v470;
          if (v471 == v470) {
            goto LABEL_745;
          }
          uint64_t v473 = 0;
          unsigned __int16 v474 = 0;
          std::string v475 = (unsigned __int16 *)&v432[56 * v467];
          unint64_t v476 = 0xAAAAAAAAAAAAAAABLL * (v472 >> 3);
          do
          {
            unint64_t v477 = 0;
            uint64_t v478 = v470 + 24 * v473;
            if (*(unsigned __int8 *)(v478 + 23) <= 0xAu) {
              unint64_t v479 = 10;
            }
            else {
              unint64_t v479 = *(unsigned __int8 *)(v478 + 23);
            }
            while ((*(char *)(v478 + 23) & 0x80000000) == 0)
            {
              if (v477 >= v479) {
                goto LABEL_744;
              }
              int v480 = *(unsigned __int8 *)(v470 + 24 * v474 + v477);
              int v481 = *((unsigned __int8 *)v475 + v477);
              LODWORD(v482) = v479;
LABEL_740:
              if (v480 != v481) {
                goto LABEL_744;
              }
              BOOL v28 = v477++ == v482 - 1;
              if (v28) {
                goto LABEL_764;
              }
            }
            if (*(unsigned __int16 *)(v478 + 8) <= 0xAu) {
              unint64_t v482 = 10;
            }
            else {
              unint64_t v482 = *(unsigned __int16 *)(v478 + 8);
            }
            if (v477 < v482)
            {
              int v480 = *(unsigned __int8 *)(*(void *)v478 + v477);
              int v481 = *((unsigned __int8 *)v475 + v477);
              goto LABEL_740;
            }
LABEL_744:
            uint64_t v473 = ++v474;
          }
          while (v476 > v474);
LABEL_745:
          if (__posb != v561)
          {
            buf.__r_.__value_.__r.__words[0] = *v547 + 8 * (__nd >> 6);
            LODWORD(buf.__r_.__value_.__r.__words[1]) = __nd & 0x3F;
            std::__fill_n[abi:ne180100]<true,std::vector<BOOL>>(&buf, __posb - v561);
          }
          std::string v483 = (unsigned __int16 *)&v432[56 * v466];
          uint64_t v484 = *((unsigned int *)v483 + 9);
          int v485 = *((_DWORD *)v483 + 10);
          *(_WORD *)(v587 + 410) = __nd;
          *(_WORD *)(v587 + 412) = __nd - 1 + v436;
          unint64_t v486 = *(void *)(v587 + 576);
          unint64_t v487 = *(void *)(v587 + 584);
          uint64_t v566 = *(void *)(v587 + 384);
          *(void *)v571 = *(void *)(*(void *)(v587 + 360) + 32);
          if (v486 >= v487)
          {
            unint64_t v490 = 0x8E38E38E38E38E39 * ((uint64_t)(v486 - *v572) >> 3);
            unint64_t v491 = v490 + 1;
            if (v490 + 1 > 0x38E38E38E38E38ELL) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v492 = 0x8E38E38E38E38E39 * ((uint64_t)(v487 - *v572) >> 3);
            if (2 * v492 > v491) {
              unint64_t v491 = 2 * v492;
            }
            if (v492 >= 0x1C71C71C71C71C7) {
              unint64_t v493 = 0x38E38E38E38E38ELL;
            }
            else {
              unint64_t v493 = v491;
            }
            *(void *)&v592[8] = v546;
            if (v493) {
              unint64_t v493 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Prompt>>(v493);
            }
            else {
              uint64_t v494 = 0;
            }
            std::string::size_type v495 = v493 + 72 * v490;
            buf.__r_.__value_.__r.__words[0] = v493;
            buf.__r_.__value_.__l.__size_ = v495;
            *(void *)v592 = v493 + 72 * v494;
            *(_OWORD *)(v495 + 8) = 0u;
            *(_OWORD *)(v495 + ++*(_DWORD *)(result + 24) = 0u;
            *(void *)(v495 + 40) = 0;
            *(void *)(v495 + 48) = 0;
            *(void *)std::string::size_type v495 = 0x8000000080000000;
            *(_DWORD *)(v495 + 8) = -1;
            *(void *)(v495 + 56) = 0;
            *(void *)(v495 + 64) = 0;
            *(_WORD *)(v495 + 40) = 0;
            *(void *)(v495 + 16) = 0;
            *(void *)(v495 + ++*(_DWORD *)(result + 24) = 0;
            *(void *)(v495 + 32) = 0;
            buf.__r_.__value_.__r.__words[2] = v495 + 72;
            std::vector<Prompt>::__swap_out_circular_buffer(v572, &buf);
            uint64_t v489 = v587;
            unint64_t v488 = *(void *)(v587 + 576);
            std::__split_buffer<Prompt>::~__split_buffer((uint64_t)&buf);
          }
          else
          {
            *(_OWORD *)(v486 + 8) = 0u;
            *(_OWORD *)(v486 + ++*(_DWORD *)(result + 24) = 0u;
            *(void *)(v486 + 40) = 0;
            *(void *)(v486 + 48) = 0;
            *(void *)unint64_t v486 = 0x8000000080000000;
            *(_DWORD *)(v486 + 8) = -1;
            *(void *)(v486 + 56) = 0;
            *(void *)(v486 + 64) = 0;
            *(_WORD *)(v486 + 40) = 0;
            *(void *)(v486 + 16) = 0;
            *(void *)(v486 + ++*(_DWORD *)(result + 24) = 0;
            unint64_t v488 = v486 + 72;
            *(void *)(v486 + 32) = 0;
            uint64_t v489 = v587;
          }
          *(void *)(v489 + 576) = v488;
          MEMORY[0x210558E70](v488 - 56, v468);
          uint64_t j = v580;
          int v496 = *(unsigned __int16 *)(v587 + 410);
          *(_DWORD *)(v488 - 72) = v496;
          *(_DWORD *)(v488 - 68) = *(unsigned __int16 *)(v587 + 412) - v496 + 1;
          std::vector<int>::__assign_with_size[abi:ne180100]<unsigned int const*,unsigned int const*>((char *)(v488 - 24), (char *)(v566 + *(void *)v571 + 4 * v484), (char *)(v566 + *(void *)v571 + 4 * v484 + 4 * (unsigned __int16)(v485 - v484)), (unsigned __int16)(v485 - v484));
          if (Diagnostics_GetLogObject(void)::onceToken != -1) {
            dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
          }
          std::string v497 = Diagnostics_GetLogObject(void)::__profile_log_default;
          if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
          {
            int v499 = *(_DWORD *)(v488 - 72);
            int v500 = v499 + *(_DWORD *)(v488 - 68) - 1;
            uint64_t v501 = (uint64_t)(*(void *)(v488 - 16) - *(void *)(v488 - 24)) >> 2;
            LODWORD(buf.__r_.__value_.__l.__data_) = 136315906;
            *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v468;
            WORD2(buf.__r_.__value_.__r.__words[1]) = 1024;
            *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v499;
            WORD1(buf.__r_.__value_.__r.__words[2]) = 1024;
            HIDWORD(buf.__r_.__value_.__r.__words[2]) = v500;
            *(_WORD *)v592 = 2048;
            *(void *)&v592[2] = v501;
            _os_log_impl(&dword_20CD80000, v497, OS_LOG_TYPE_DEFAULT, "Prompt   : \"%s\" : affecting phone ranges  [%d,%d], with units length: %lu. ", (uint8_t *)&buf, 0x22u);
          }
          Diagnostics::log(5, "Prompt   : \"%s\" : affecting phone ranges  [%d,%d], with units length: %lu. ", v498, v468, *(unsigned int *)(v488 - 72), (*(_DWORD *)(v488 - 72) + *(_DWORD *)(v488 - 68) - 1), (uint64_t)(*(void *)(v488 - 16) - *(void *)(v488 - 24)) >> 2);
LABEL_764:
          uint64_t v466 = ++v467;
        }
        while (v463 > v467);
LABEL_765:
        BOOL v123 = v436-- <= 0;
        uint64_t v434 = v543;
        if (!v123) {
          continue;
        }
        break;
      }
      uint64_t v3 = (TAPExtractor *)v587;
      uint64_t v431 = *(void *)(v587 + 304);
      uint64_t v430 = *(void *)(v587 + 312);
      std::string v433 = v432;
LABEL_768:
      uint64_t v434 = ++__nd;
      if (0xAAAAAAAAAAAAAAABLL * ((v430 - v431) >> 3) <= __nd)
      {
        if (v433) {
          operator delete(v433);
        }
        break;
      }
    }
  }
LABEL_771:
  std::string v503 = *(const std::string::value_type **)j;
  uint64_t v502 = *((void *)j + 1);
  if (v502 == *(void *)j) {
    return v572;
  }
  unint64_t v504 = 0;
  v567 = (char *)v3 + 584;
  std::string v505 = &fst::TropicalWeightTpl<float>::Type(void)::type;
  uint64_t v506 = &fst::TropicalWeightTpl<float>::Type(void)::type;
  while (2)
  {
    v507 = &v503[216 * v504];
    uint64_t v509 = *((void *)v507 + 9);
    uint64_t v508 = *((void *)v507 + 10);
    if (v509 == v508) {
      goto LABEL_839;
    }
    uint64_t v579 = *((void *)v507 + 10);
    while (2)
    {
      if (*(_DWORD *)v509 == 9 && *(_DWORD *)(v509 + 4) == 0x7FFFFFFF)
      {
        if (*(char *)(v509 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v509 + 8), *(void *)(v509 + 16));
        }
        else
        {
          long long v511 = *(_OWORD *)(v509 + 8);
          __p.__r_.__value_.__r.__words[2] = *(void *)(v509 + 24);
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v511;
        }
        PromptStream::normalize_audio_prompt_name((void **)&__p.__r_.__value_.__l.__data_);
        __ne = (std::string::size_type *)(v509 + 8);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::size_type v512 = __p.__r_.__value_.__l.__size_;
          if (__p.__r_.__value_.__l.__size_ >= 0xB) {
            goto LABEL_800;
          }
        }
        else
        {
          if (HIBYTE(__p.__r_.__value_.__r.__words[2]) > 0xAu) {
            goto LABEL_800;
          }
          std::string::size_type v512 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        if (v512 >= 8)
        {
          uint64_t v513 = *(void *)(v587 + 104);
          uint64_t v514 = *(void *)(v587 + 112);
          if (v513 != v514)
          {
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              v515 = &__p;
            }
            else {
              v515 = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              size_t v516 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            }
            else {
              size_t v516 = __p.__r_.__value_.__l.__size_;
            }
            while (1)
            {
              v517 = v505;
              unint64_t v518 = v504;
              unsigned int v519 = *(unsigned __int16 *)(*(void *)v513 + 2);
              if (*(_WORD *)(*(void *)v513 + 2)) {
                break;
              }
LABEL_799:
              v513 += 8;
              unint64_t v504 = v518;
              std::string v505 = v517;
              uint64_t v506 = &fst::TropicalWeightTpl<float>::Type(void)::type;
              if (v513 == v514) {
                goto LABEL_800;
              }
            }
            int v520 = 0;
            v521 = (unsigned int *)(*(void *)v513 + 4);
            while (memcmp(v521, v515, v516))
            {
              v521 += 14;
              if (++v520 >= v519) {
                goto LABEL_799;
              }
            }
            v522 = (void *)v587;
            uint64_t j = v580;
            unint64_t v504 = v518;
            std::string v505 = v517;
            uint64_t v506 = &fst::TropicalWeightTpl<float>::Type(void)::type;
            goto LABEL_811;
          }
        }
LABEL_800:
        v522 = (void *)v587;
        v521 = (unsigned int *)select_prompt_from_prefix<std::vector<TAPFileBuilder::v2_tap_prompt_section_of_length_m const*>>(*(uint64_t **)(v587 + 104), *(uint64_t **)(v587 + 112), (const void **)&__p.__r_.__value_.__l.__data_, 1);
        uint64_t j = v580;
        if (!v521)
        {
          if (v505[34] != -1) {
            dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
          }
          uint64_t v508 = v579;
          v523 = v506[33];
          if (os_log_type_enabled(v523, OS_LOG_TYPE_INFO))
          {
            v525 = &__p;
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              v525 = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
            *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v525;
            _os_log_impl(&dword_20CD80000, v523, OS_LOG_TYPE_INFO, "Unable to play audio from markers: %s", (uint8_t *)&buf, 0xCu);
          }
          v526 = &__p;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            v526 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          Diagnostics::log(6, "Unable to play audio from markers: %s", v524, v526);
LABEL_835:
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          goto LABEL_837;
        }
LABEL_811:
        v594 = 0;
        v595[0] = 0;
        v593 = 0;
        memset(v592, 0, 18);
        buf.__r_.__value_.__r.__words[2] = 0;
        LODWORD(buf.__r_.__value_.__l.__data_) = v504;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = 0xFFFFFFFF00000000;
        uint64_t v527 = v522[48] + *(void *)(v522[45] + 32);
        v528 = (char *)(v527 + 4 * v521[9]);
        v529 = (char *)(v527 + 4 * v521[10]);
        std::vector<int>::__assign_with_size[abi:ne180100]<unsigned int const*,unsigned int const*>((char *)&v593, v528, v529, (v529 - v528) >> 2);
        unint64_t v530 = v522[72];
        unint64_t v531 = v522[73];
        if (v530 >= v531)
        {
          unint64_t v533 = 0x8E38E38E38E38E39 * ((uint64_t)(v530 - *v572) >> 3);
          unint64_t v534 = v533 + 1;
          if (v533 + 1 > 0x38E38E38E38E38ELL) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v535 = 0x8E38E38E38E38E39 * ((uint64_t)(v531 - *v572) >> 3);
          if (2 * v535 > v534) {
            unint64_t v534 = 2 * v535;
          }
          if (v535 >= 0x1C71C71C71C71C7) {
            unint64_t v536 = 0x38E38E38E38E38ELL;
          }
          else {
            unint64_t v536 = v534;
          }
          v613 = v567;
          if (v536) {
            unint64_t v536 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Prompt>>(v536);
          }
          else {
            uint64_t v537 = 0;
          }
          v611.__r_.__value_.__r.__words[0] = v536;
          v611.__r_.__value_.__l.__size_ = v536 + 72 * v533;
          v611.__r_.__value_.__r.__words[2] = v611.__r_.__value_.__l.__size_;
          unint64_t v612 = v536 + 72 * v537;
          std::allocator<Prompt>::construct[abi:ne180100]<Prompt,Prompt const&>(v611.__r_.__value_.__l.__size_, (uint64_t *)&buf);
          v611.__r_.__value_.__r.__words[2] += 72;
          std::vector<Prompt>::__swap_out_circular_buffer(v572, &v611);
          unint64_t v532 = v522[72];
          std::__split_buffer<Prompt>::~__split_buffer((uint64_t)&v611);
        }
        else
        {
          std::allocator<Prompt>::construct[abi:ne180100]<Prompt,Prompt const&>(v522[72], (uint64_t *)&buf);
          unint64_t v532 = v530 + 72;
          v522[72] = v530 + 72;
        }
        v522[72] = v532;
        if (v505[34] != -1) {
          dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
        }
        uint64_t v508 = v579;
        std::string::size_type v538 = v509 + 8;
        v539 = v506[33];
        if (os_log_type_enabled(v539, OS_LOG_TYPE_DEFAULT))
        {
          std::string::size_type v541 = v509 + 8;
          if (*(char *)(v509 + 31) < 0) {
            std::string::size_type v541 = *__ne;
          }
          LODWORD(v611.__r_.__value_.__l.__data_) = 136315650;
          *(std::string::size_type *)((char *)v611.__r_.__value_.__r.__words + 4) = (std::string::size_type)v521;
          WORD2(v611.__r_.__value_.__r.__words[1]) = 2080;
          *(std::string::size_type *)((char *)&v611.__r_.__value_.__r.__words[1] + 6) = v541;
          HIWORD(v611.__r_.__value_.__r.__words[2]) = 2048;
          unint64_t v612 = v504;
          _os_log_impl(&dword_20CD80000, v539, OS_LOG_TYPE_DEFAULT, "Prompt   : \"%s\" canned: \"%s\" at phone: [%zu]", (uint8_t *)&v611, 0x20u);
        }
        if (*(char *)(v509 + 31) < 0) {
          std::string::size_type v538 = *__ne;
        }
        Diagnostics::log(5, "Prompt   : \"%s\" canned: \"%s\" at phone: [%zu]", v540, v521, v538, v504);
        if (v593)
        {
          v594 = v593;
          operator delete(v593);
        }
        if ((v592[15] & 0x80000000) != 0) {
          operator delete((void *)buf.__r_.__value_.__r.__words[2]);
        }
        goto LABEL_835;
      }
LABEL_837:
      v509 += 56;
      if (v509 != v508) {
        continue;
      }
      break;
    }
    std::string v503 = *(const std::string::value_type **)j;
    uint64_t v502 = *((void *)j + 1);
LABEL_839:
    if (++v504 < 0x84BDA12F684BDA13 * ((v502 - (uint64_t)v503) >> 3)) {
      continue;
    }
    return v572;
  }
}

void sub_20D473828(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *__p,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57)
{
  while (1)
  {
    if (*((char *)v57 - 9) < 0) {
      operator delete(*(v57 - 4));
    }
    v57 -= 4;
    if (v57 == &a57) {
      _Unwind_Resume(a1);
    }
  }
}

char *std::vector<int>::__assign_with_size[abi:ne180100]<unsigned int const*,unsigned int const*>(char *result, char *__src, char *a3, unint64_t a4)
{
  uint64_t v6 = __src;
  uint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  unint64_t v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 2)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      void *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 62) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 1;
    if (v8 >> 1 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v11 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    __n128 result = std::vector<int>::__vallocate[abi:ne180100](v7, v11);
    uint64_t v13 = (char *)v7[1];
    uint64_t v12 = (void **)(v7 + 1);
    unint64_t v9 = v13;
    uint64_t v14 = v13;
    if (v6 != a3)
    {
      uint64_t v14 = v9;
      do
      {
        int v15 = *(_DWORD *)v6;
        v6 += 4;
        *(_DWORD *)uint64_t v14 = v15;
        v14 += 4;
      }
      while (v6 != a3);
    }
LABEL_20:
    size_t v20 = v14 - v9;
    goto LABEL_21;
  }
  uint64_t v12 = (void **)(result + 8);
  uint64_t v16 = (unsigned char *)*((void *)result + 1);
  unint64_t v17 = (v16 - v9) >> 2;
  if (v17 < a4)
  {
    __n128 v18 = &__src[4 * v17];
    if (v16 != v9)
    {
      __n128 result = (char *)memmove(*(void **)result, __src, v16 - v9);
      unint64_t v9 = (char *)*v12;
    }
    uint64_t v14 = v9;
    if (v18 != a3)
    {
      uint64_t v14 = v9;
      do
      {
        int v19 = *(_DWORD *)v18;
        v18 += 4;
        *(_DWORD *)uint64_t v14 = v19;
        v14 += 4;
      }
      while (v18 != a3);
    }
    goto LABEL_20;
  }
  size_t v20 = a3 - __src;
  if (a3 != __src) {
    __n128 result = (char *)memmove(*(void **)result, __src, v20);
  }
LABEL_21:
  std::__shared_weak_count *v12 = &v9[v20];
  return result;
}

void std::vector<std::vector<std::vector<std::pair<unsigned short,unsigned short>>>>::resize(char **a1, unint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  unint64_t v6 = a2 - v5;
  if (a2 > v5)
  {
    uint64_t v7 = a1[2];
    if (0xAAAAAAAAAAAAAAABLL * ((v7 - v3) >> 3) >= v6)
    {
      bzero(a1[1], 24 * ((24 * v6 - 24) / 0x18) + 24);
      a1[1] = &v3[24 * ((24 * v6 - 24) / 0x18) + 24];
      return;
    }
    if (a2 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - v4) >> 3);
    uint64_t v9 = 2 * v8;
    if (2 * v8 <= a2) {
      uint64_t v9 = a2;
    }
    if (v8 >= 0x555555555555555) {
      unint64_t v10 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v10 = v9;
    }
    if (v10 > 0xAAAAAAAAAAAAAAALL) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v11 = 3 * v10;
    uint64_t v12 = (char *)operator new(24 * v10);
    uint64_t v13 = &v12[24 * v5];
    uint64_t v14 = &v12[8 * v11];
    size_t v15 = 24 * ((24 * v6 - 24) / 0x18) + 24;
    bzero(v13, v15);
    uint64_t v16 = &v13[v15];
    if (v3 == v4)
    {
      *a1 = v13;
      a1[1] = v16;
      a1[2] = v14;
      if (!v3) {
        return;
      }
    }
    else
    {
      do
      {
        unint64_t v17 = v13;
        *((void *)v13 - 1) = 0;
        long long v18 = *(_OWORD *)(v3 - 24);
        v3 -= 24;
        *(_OWORD *)(v13 - ++*(_DWORD *)(result + 24) = v18;
        v13 -= 24;
        *((void *)v17 - 1) = *((void *)v3 + 2);
        *(void *)uint64_t v3 = 0;
        *((void *)v3 + 1) = 0;
        *((void *)v3 + 2) = 0;
      }
      while (v3 != v4);
      int v19 = *a1;
      uint64_t v3 = a1[1];
      *a1 = v13;
      a1[1] = v16;
      a1[2] = v14;
      if (v3 != v19)
      {
        do
        {
          v3 -= 24;
          std::string::size_type v21 = (void **)v3;
          std::vector<std::vector<long long>>::__destroy_vector::operator()[abi:ne180100](&v21);
        }
        while (v3 != v19);
        uint64_t v3 = v19;
      }
      if (!v3) {
        return;
      }
    }
    operator delete(v3);
    return;
  }
  if (a2 < v5)
  {
    size_t v20 = &v4[24 * a2];
    while (v3 != v20)
    {
      v3 -= 24;
      std::string::size_type v21 = (void **)v3;
      std::vector<std::vector<long long>>::__destroy_vector::operator()[abi:ne180100](&v21);
    }
    a1[1] = v20;
  }
}

BOOL TAPExtractor::detect_v1_match(uint64_t a1, std::string *a2, unsigned int a3, size_t __len, uint64_t a5)
{
  unsigned int v6 = __len;
  int v7 = a3;
  uint64_t v85 = *MEMORY[0x263EF8340];
  unsigned int v10 = __len + a3;
  if (__len)
  {
    unsigned int v11 = a3;
    while (((*(void *)(*(void *)(a1 + 232) + ((v11 >> 3) & 0x1FF8)) >> v11) & 1) == 0)
    {
      if (v10 <= (unsigned __int16)++v11)
      {
        BOOL result = TAPExtractor::v1_string_match(*(void *)(*(void *)(a1 + 352) + 24), *(void *)(a1 + 384), a2, a3, __len, *(_DWORD *)(a5 + 20));
        if (result) {
          goto LABEL_8;
        }
        return result;
      }
    }
    return 0;
  }
  BOOL v13 = TAPExtractor::v1_string_match(*(void *)(*(void *)(a1 + 352) + 24), *(void *)(a1 + 384), a2, a3, 0, *(_DWORD *)(a5 + 20));
  BOOL result = 0;
  if (!v13) {
    return result;
  }
LABEL_8:
  memset(&__str, 0, sizeof(__str));
  unsigned __int16 v14 = TAPExtractor::v1_extract_utf8_character_from_string(v7, 1, &__str, (uint64_t *)a2);
  signed int v15 = v10 - 1;
  while (1)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, " _¡¿\t\r\n");
    BOOL v16 = is_one_of((char **)&__p, (char *)&__str);
    if (SBYTE1(v82) < 0) {
      operator delete(__p);
    }
    if (!v16) {
      break;
    }
    LOWORD(v7) = v14;
    unsigned __int16 v14 = TAPExtractor::v1_extract_utf8_character_from_string(v14, 1, &__str, (uint64_t *)a2);
  }
  unint64_t v17 = (unsigned __int16)v7;
  uint64_t v18 = *(void *)(a1 + 208);
  uint64_t v20 = *(void *)(a1 + 136);
  uint64_t v19 = *(void *)(a1 + 144);
  uint64_t v21 = v19 - v20;
  if (v19 == v20)
  {
LABEL_18:
    LOWORD(v22) = -1;
  }
  else
  {
    uint64_t v22 = 0;
    uint64_t v23 = v21 >> 1;
    if ((unint64_t)(v21 >> 1) <= 1) {
      uint64_t v23 = 1;
    }
    while (*(unsigned __int16 *)(v20 + 2 * v22) != *(unsigned __int16 *)(v18 + 2 * (unsigned __int16)v7))
    {
      if (v23 == ++v22) {
        goto LABEL_18;
      }
    }
  }
  int v24 = *(unsigned __int16 *)(v18 + 2 * v15);
  uint64_t v25 = v20 - 2;
  uint64_t v26 = ((unint64_t)v21 >> 1);
  while ((int)v26 >= 1)
  {
    __int16 v27 = v26 - 1;
    int v28 = *(unsigned __int16 *)(v25 + 2 * v26--);
    if (v28 == v24) {
      goto LABEL_24;
    }
  }
  __int16 v27 = -1;
LABEL_24:
  *(_WORD *)(a1 + 410) = v22;
  *(_WORD *)(a1 + 412) = v27;
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  uint64_t v29 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
  {
    std::string::basic_string(&v73, a2, (unsigned __int16)v7, v6, (std::allocator<char> *)&v75);
    Censor::global_plaintext((std::string *)&__p, (uint64_t)&v73);
    if ((v82 & 0x8000) == 0) {
      p_std::string p = &__p;
    }
    else {
      p_std::string p = __p;
    }
    *(_DWORD *)std::string buf = 136315138;
    std::string::size_type v84 = p_p;
    _os_log_impl(&dword_20CD80000, v29, OS_LOG_TYPE_DEBUG, "Attempting prompt match for prompt %s ", buf, 0xCu);
    if (SBYTE1(v82) < 0) {
      operator delete(__p);
    }
    if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v73.__r_.__value_.__l.__data_);
    }
  }
  std::string::basic_string(&v73, a2, (unsigned __int16)v7, v6, (std::allocator<char> *)buf);
  Censor::global_plaintext((std::string *)&__p, (uint64_t)&v73);
  if ((v82 & 0x8000) == 0) {
    unint64_t v32 = &__p;
  }
  else {
    unint64_t v32 = __p;
  }
  Diagnostics::log(7, "Attempting prompt match for prompt %s ", v31, v32);
  if (SBYTE1(v82) < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v73.__r_.__value_.__l.__data_);
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  uint64_t v33 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
  {
    int v35 = *(unsigned __int16 *)(a1 + 412);
    uint64_t v36 = (unsigned __int16)v7;
    std::string __p = (void *)__PAIR64__(*(unsigned __int16 *)(a1 + 410), 67109888);
    __int16 v77 = 1024;
    int v78 = v35;
    __int16 v79 = 1024;
    int v80 = (unsigned __int16)v7;
    __int16 v81 = 1024;
    unsigned int v82 = v10 - 1;
    _os_log_impl(&dword_20CD80000, v33, OS_LOG_TYPE_DEBUG, "First phone is %d, last phone is %d, start index is %d, end_index is %d ", (uint8_t *)&__p, 0x1Au);
  }
  else
  {
    uint64_t v36 = (unsigned __int16)v7;
  }
  Diagnostics::log(7, "First phone is %d, last phone is %d, start index is %d, end_index is %d ", v34, *(unsigned __int16 *)(a1 + 410), *(unsigned __int16 *)(a1 + 412), v36, v10 - 1);
  uint64_t v37 = TAPExtractor::v1_extract_nonblank_character(v7, 0, &__str, (uint64_t *)a2);
  if (v37)
  {
    std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = __str.__r_.__value_.__l.__size_;
    }
    if (size)
    {
      std::string v39 = (char **)SENTENCE_BOUNDARY_CHARACTERS();
      BOOL v40 = is_one_of(v39, (char *)&__str);
    }
    else
    {
      BOOL v40 = 1;
    }
    *(unsigned char *)(a1 + 435) = v40;
    std::string::basic_string[abi:ne180100]<0>(&__p, ":,;");
    *(unsigned char *)(a1 + 436) = is_one_of((char **)&__p, (char *)&__str);
    if (SBYTE1(v82) < 0) {
      operator delete(__p);
    }
  }
  else
  {
    *(_WORD *)(a1 + 435) = 1;
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  uint64_t v41 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
  {
    int v43 = aFt_0[*(unsigned __int8 *)(a1 + 435)];
    int v44 = aFt_0[*(unsigned __int8 *)(a1 + 436)];
    LODWORD(__p) = 67109632;
    HIDWORD(__p) = v43;
    __int16 v77 = 1024;
    int v78 = v44;
    __int16 v79 = 1024;
    int v80 = v37;
    _os_log_impl(&dword_20CD80000, v41, OS_LOG_TYPE_DEBUG, "Start index matches are: %c, %c, while the non-blank index is %d ", (uint8_t *)&__p, 0x14u);
  }
  Diagnostics::log(7, "Start index matches are: %c, %c, while the non-blank index is %d ", v42, aFt_0[*(unsigned __int8 *)(a1 + 435)], aFt_0[*(unsigned __int8 *)(a1 + 436)], v37);
  *(unsigned char *)(a1 + 434) = (*(void *)(*(void *)(a1 + 160) + ((v17 >> 3) & 0x1FF8)) >> v17) & 1;
  uint64_t v45 = TAPExtractor::v1_extract_nonblank_character(v10, 0, &__str, (uint64_t *)a2);
  std::string::size_type v46 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v46 = __str.__r_.__value_.__l.__size_;
  }
  if (v46)
  {
    __int16 v47 = (char **)SENTENCE_BOUNDARY_CHARACTERS();
    BOOL v48 = is_one_of(v47, (char *)&__str);
  }
  else
  {
    BOOL v48 = 1;
  }
  *(unsigned char *)(a1 + 437) = v48;
  std::string::basic_string[abi:ne180100]<0>(&__p, ":,;");
  *(unsigned char *)(a1 + 438) = is_one_of((char **)&__p, (char *)&__str);
  if (SBYTE1(v82) < 0) {
    operator delete(__p);
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  UChar32 v49 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
  {
    int v51 = aFt_0[*(unsigned __int8 *)(a1 + 437)];
    int v52 = aFt_0[*(unsigned __int8 *)(a1 + 438)];
    LODWORD(__p) = 67109376;
    HIDWORD(__p) = v51;
    __int16 v77 = 1024;
    int v78 = v52;
    _os_log_impl(&dword_20CD80000, v49, OS_LOG_TYPE_DEBUG, "Backwards sentence and phrase matches are: %c, %c ", (uint8_t *)&__p, 0xEu);
  }
  Diagnostics::log(7, "Backwards sentence and phrase matches are: %c, %c ", v50, aFt_0[*(unsigned __int8 *)(a1 + 437)], aFt_0[*(unsigned __int8 *)(a1 + 438)]);
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  BOOL v53 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(__p) = 67109120;
    HIDWORD(__p) = v45;
    _os_log_impl(&dword_20CD80000, v53, OS_LOG_TYPE_DEBUG, "Terminal non-blank index is %d ", (uint8_t *)&__p, 8u);
  }
  Diagnostics::log(7, "Terminal non-blank index is %d ", v54, v45);
  if (!*(unsigned char *)(a1 + 437) && !*(unsigned char *)(a1 + 438))
  {
    TAPExtractor::v1_extract_nonblank_character(v10, 1, &__str, (uint64_t *)a2);
    std::string::size_type v55 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v55 = __str.__r_.__value_.__l.__size_;
    }
    if (v55)
    {
      unint64_t v56 = (char **)SENTENCE_BOUNDARY_CHARACTERS();
      BOOL v57 = is_one_of(v56, (char *)&__str);
    }
    else
    {
      BOOL v57 = 1;
    }
    *(unsigned char *)(a1 + 437) = v57;
    std::string::basic_string[abi:ne180100]<0>(&__p, ":,;");
    *(unsigned char *)(a1 + 438) = is_one_of((char **)&__p, (char *)&__str);
    if (SBYTE1(v82) < 0) {
      operator delete(__p);
    }
  }
  *(unsigned char *)(a1 + 439) = (*(void *)(*(void *)(a1 + 184) + (((unint64_t)v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v15) & 1;
  std::string::operator=((std::string *)(a1 + 328), &__str);
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  unsigned int v58 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
  {
    int v60 = aFt_0[*(unsigned __int8 *)(a1 + 434)];
    int v61 = aFt_0[*(unsigned __int8 *)(a1 + 436)];
    int v62 = aFt_0[*(unsigned __int8 *)(a1 + 435)];
    LODWORD(__p) = 67109632;
    HIDWORD(__p) = v60;
    __int16 v77 = 1024;
    int v78 = v61;
    __int16 v79 = 1024;
    int v80 = v62;
    _os_log_impl(&dword_20CD80000, v58, OS_LOG_TYPE_DEBUG, "Start word boundary is %c, start at phrase boundary is %c, start at sentence boundary is %c ", (uint8_t *)&__p, 0x14u);
  }
  Diagnostics::log(7, "Start word boundary is %c, start at phrase boundary is %c, start at sentence boundary is %c ", v59, aFt_0[*(unsigned __int8 *)(a1 + 434)], aFt_0[*(unsigned __int8 *)(a1 + 436)], aFt_0[*(unsigned __int8 *)(a1 + 435)]);
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  uint64_t v63 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
  {
    int v65 = aFt_0[*(unsigned __int8 *)(a1 + 439)];
    int v66 = aFt_0[*(unsigned __int8 *)(a1 + 438)];
    int v67 = aFt_0[*(unsigned __int8 *)(a1 + 437)];
    LODWORD(__p) = 67109632;
    HIDWORD(__p) = v65;
    __int16 v77 = 1024;
    int v78 = v66;
    __int16 v79 = 1024;
    int v80 = v67;
    _os_log_impl(&dword_20CD80000, v63, OS_LOG_TYPE_DEBUG, "End word boundary is %c, end at phrase boundary is %c, end at sentence boundary is %c ", (uint8_t *)&__p, 0x14u);
  }
  Diagnostics::log(7, "End word boundary is %c, end at phrase boundary is %c, end at sentence boundary is %c ", v64, aFt_0[*(unsigned __int8 *)(a1 + 439)], aFt_0[*(unsigned __int8 *)(a1 + 438)], aFt_0[*(unsigned __int8 *)(a1 + 437)]);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (!*(unsigned char *)(a1 + 434)) {
    return 0;
  }
  switch(*(unsigned char *)(a5 + 10))
  {
    case 0:
      goto LABEL_109;
    case 1:
      if (!*(unsigned char *)(a1 + 435)) {
        return 0;
      }
      goto LABEL_109;
    case 2:
      goto LABEL_108;
    case 3:
      if (*(unsigned char *)(a1 + 435) || *(unsigned char *)(a1 + 436)) {
        return 0;
      }
      goto LABEL_109;
    case 4:
      if (*(unsigned char *)(a1 + 435)) {
        goto LABEL_109;
      }
LABEL_108:
      if (!*(unsigned char *)(a1 + 436)) {
        return 0;
      }
LABEL_109:
      if (!*(unsigned char *)(a1 + 439)) {
        return 0;
      }
      switch(*(unsigned char *)(a5 + 11))
      {
        case 0:
          goto LABEL_132;
        case 1:
          if (!*(unsigned char *)(a1 + 437)) {
            return 0;
          }
          goto LABEL_132;
        case 2:
          goto LABEL_125;
        case 3:
          if (*(unsigned char *)(a1 + 437) || *(unsigned char *)(a1 + 438)) {
            return 0;
          }
          goto LABEL_132;
        case 4:
          if (*(unsigned char *)(a1 + 437)) {
            goto LABEL_132;
          }
LABEL_125:
          if (!*(unsigned char *)(a1 + 438)) {
            return 0;
          }
LABEL_132:
          if (*(_WORD *)(a1 + 410)) {
            BOOL result = 1;
          }
          else {
            BOOL result = *(_WORD *)(a1 + 412) != 0;
          }
          break;
        case 5:
          std::string::basic_string[abi:ne180100]<0>(&__p, (char *)(a5 + 12));
          BOOL v72 = is_one_of((char **)&__p, (char *)(a1 + 328));
          if (SBYTE1(v82) < 0) {
            operator delete(__p);
          }
          if (!v72) {
            return 0;
          }
          goto LABEL_132;
        case 6:
          if (*(unsigned char *)(a1 + 437)) {
            return 0;
          }
          goto LABEL_132;
        default:
          if (Diagnostics_GetLogObject(void)::onceToken != -1) {
            dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
          }
          uint64_t v71 = Diagnostics_GetLogObject(void)::__profile_log_default;
          if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
          {
            LOWORD(__p) = 0;
            _os_log_impl(&dword_20CD80000, v71, OS_LOG_TYPE_ERROR, "ERROR: INVALID END BOUNDARY CONDITION FOR TAP using phrase ", (uint8_t *)&__p, 2u);
          }
          __int16 v70 = "ERROR: INVALID END BOUNDARY CONDITION FOR TAP using phrase ";
          goto LABEL_118;
      }
      break;
    case 6:
      if (*(unsigned char *)(a1 + 435)) {
        return 0;
      }
      goto LABEL_109;
    default:
      if (Diagnostics_GetLogObject(void)::onceToken != -1) {
        dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
      }
      uint64_t v68 = Diagnostics_GetLogObject(void)::__profile_log_default;
      if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
      {
        LOWORD(__p) = 0;
        _os_log_impl(&dword_20CD80000, v68, OS_LOG_TYPE_ERROR, "ERROR: INVALID START BOUNDARY CONDITION FOR TAP using phrase ", (uint8_t *)&__p, 2u);
      }
      __int16 v70 = "ERROR: INVALID START BOUNDARY CONDITION FOR TAP using phrase ";
LABEL_118:
      Diagnostics::log(3, v70, v69);
      return 0;
  }
  return result;
}

void sub_20D474950(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
}

BOOL TAPExtractor::v1_string_match(uint64_t a1, uint64_t a2, const std::string *a3, unsigned int a4, size_t __len, unsigned int a6)
{
  std::string::size_type v8 = __len;
  std::string::basic_string[abi:ne180100](&__s1, (void *)(a2 + a1 + a6), __len);
  std::string::basic_string(&v24, a3, a4, v8, (std::allocator<char> *)&v28);
  unsigned __int8 v9 = v27;
  if ((v27 & 0x80u) == 0) {
    size_t v10 = v27;
  }
  else {
    size_t v10 = __n;
  }
  std::string::size_type size = HIBYTE(v24.__r_.__value_.__r.__words[2]);
  int v12 = SHIBYTE(v24.__r_.__value_.__r.__words[2]);
  if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v24.__r_.__value_.__l.__size_;
  }
  if (v10 != size)
  {
    BOOL v22 = 0;
    if ((SHIBYTE(v24.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_26;
  }
  if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    BOOL v13 = &v24;
  }
  else {
    BOOL v13 = (std::string *)v24.__r_.__value_.__r.__words[0];
  }
  if ((char)v27 < 0)
  {
    BOOL v22 = memcmp(__s1, v13, __n) == 0;
    goto LABEL_22;
  }
  if (v27)
  {
    uint64_t v14 = v27 - 1;
    p_s1 = &__s1;
    do
    {
      int v17 = *(unsigned __int8 *)p_s1;
      p_s1 = (void **)((char *)p_s1 + 1);
      int v16 = v17;
      int v19 = v13->__r_.__value_.__s.__data_[0];
      BOOL v13 = (std::string *)((char *)v13 + 1);
      int v18 = v19;
      BOOL v21 = v14-- != 0;
      BOOL v22 = v16 == v18;
    }
    while (v16 == v18 && v21);
LABEL_22:
    if ((v12 & 0x80000000) == 0) {
      goto LABEL_23;
    }
LABEL_26:
    operator delete(v24.__r_.__value_.__l.__data_);
    if ((v27 & 0x80) == 0) {
      return v22;
    }
LABEL_27:
    operator delete(__s1);
    return v22;
  }
  BOOL v22 = 1;
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_26;
  }
LABEL_23:
  if ((v9 & 0x80) != 0) {
    goto LABEL_27;
  }
  return v22;
}

void sub_20D474B10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL is_one_of(char **a1, char *a2)
{
  int v2 = a2[23];
  if (v2 >= 0) {
    int64_t v3 = a2[23];
  }
  else {
    int64_t v3 = *((void *)a2 + 1);
  }
  if (!v3) {
    return 0;
  }
  int v4 = *((char *)a1 + 23);
  if (v2 >= 0) {
    unint64_t v5 = a2;
  }
  else {
    unint64_t v5 = *(char **)a2;
  }
  if (v4 >= 0) {
    unsigned int v6 = (char *)a1;
  }
  else {
    unsigned int v6 = *a1;
  }
  int v7 = (char *)*((unsigned __int8 *)a1 + 23);
  if (v4 < 0) {
    int v7 = a1[1];
  }
  std::string::size_type v8 = &v7[(void)v6];
  if ((uint64_t)v7 >= v3)
  {
    int v12 = *v5;
    BOOL v13 = v6;
    do
    {
      uint64_t v14 = &v7[-v3];
      if (v14 == (char *)-1) {
        break;
      }
      signed int v15 = (char *)memchr(v13, v12, (size_t)(v14 + 1));
      if (!v15) {
        break;
      }
      unsigned __int8 v9 = v15;
      if (!memcmp(v15, v5, v3)) {
        return v9 != v8 && v9 - v6 != -1;
      }
      BOOL v13 = v9 + 1;
      int v7 = (char *)(v8 - (v9 + 1));
    }
    while ((uint64_t)v7 >= v3);
  }
  unsigned __int8 v9 = v8;
  return v9 != v8 && v9 - v6 != -1;
}

uint64_t TAPExtractor::v1_extract_utf8_character_from_string(int a1, int a2, std::string *a3, uint64_t *a4)
{
  LODWORD(v7) = a1;
  MEMORY[0x210558E70](a3, &byte_20D5A22AE);
  if (a2)
  {
    unint64_t v8 = *((unsigned __int8 *)a4 + 23);
    int v9 = (char)v8;
    if ((v8 & 0x80u) != 0) {
      unint64_t v8 = a4[1];
    }
    if (v8 > v7)
    {
      if (v9 >= 0) {
        size_t v10 = a4;
      }
      else {
        size_t v10 = (uint64_t *)*a4;
      }
      std::string::operator=(a3, *((unsigned char *)v10 + v7));
      LOWORD(v11) = v7 + 1;
      LOWORD(v7) = v7 + 1;
      BOOL v12 = *((char *)a4 + 23) < 0;
      unint64_t v13 = *((unsigned __int8 *)a4 + 23);
      if ((v13 & 0x80u) != 0) {
        unint64_t v13 = a4[1];
      }
      if (v13 > (unsigned __int16)v11)
      {
        uint64_t v11 = (unsigned __int16)v11;
        do
        {
          if (v12) {
            uint64_t v14 = (uint64_t *)*a4;
          }
          else {
            uint64_t v14 = a4;
          }
          std::string::value_type v15 = *((unsigned char *)v14 + v11);
          if ((v15 & 0xC0) != 0x80) {
            break;
          }
          std::string::push_back(a3, v15);
          LOWORD(v7) = v7 + 1;
          uint64_t v11 = (unsigned __int16)v7;
          BOOL v12 = *((char *)a4 + 23) < 0;
          unint64_t v16 = *((unsigned __int8 *)a4 + 23);
          if ((v16 & 0x80u) != 0) {
            unint64_t v16 = a4[1];
          }
        }
        while (v16 > (unsigned __int16)v7);
      }
    }
  }
  else
  {
    if (v7)
    {
      int v17 = (unsigned __int16)(v7 - 1);
      uint64_t v7 = (unsigned __int16)(v7 - 1);
      if (*((char *)a4 + 23) >= 0) {
        int v18 = a4;
      }
      else {
        int v18 = (uint64_t *)*a4;
      }
      std::string::operator=(a3, *((unsigned char *)v18 + v7));
      if (v17)
      {
        while (1)
        {
          std::string::size_type size = HIBYTE(a3->__r_.__value_.__r.__words[2]);
          if ((size & 0x80u) == 0) {
            uint64_t v20 = a3;
          }
          else {
            uint64_t v20 = (std::string *)a3->__r_.__value_.__r.__words[0];
          }
          if ((size & 0x80u) != 0) {
            std::string::size_type size = a3->__r_.__value_.__l.__size_;
          }
          if ((v20->__r_.__value_.__s.__data_[size - 1] & 0xC0) != 0x80) {
            break;
          }
          LOWORD(v7) = v7 - 1;
          if (*((char *)a4 + 23) >= 0) {
            BOOL v21 = a4;
          }
          else {
            BOOL v21 = (uint64_t *)*a4;
          }
          std::string::push_back(a3, *((unsigned char *)v21 + (unsigned __int16)v7));
          if (!(_WORD)v7) {
            goto LABEL_35;
          }
        }
      }
      else
      {
LABEL_35:
        LOWORD(v7) = 0;
      }
    }
    uint64_t v22 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
    int v23 = (char)v22;
    std::string v24 = (uint64_t *)((char *)a3 + v22);
    if (v23 >= 0) {
      uint64_t v25 = v24;
    }
    else {
      uint64_t v25 = (uint64_t *)(a3->__r_.__value_.__r.__words[0] + a3->__r_.__value_.__l.__size_);
    }
    if (v23 >= 0) {
      uint64_t v26 = (uint64_t *)a3;
    }
    else {
      uint64_t v26 = (uint64_t *)a3->__r_.__value_.__r.__words[0];
    }
    unint64_t v27 = (char *)v25 - (char *)v26;
    if ((unint64_t)((char *)v25 - (char *)v26) >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    if (v27 > 0x16)
    {
      uint64_t v29 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v27 | 7) != 0x17) {
        uint64_t v29 = v27 | 7;
      }
      uint64_t v30 = v29 + 1;
      p_str = operator new(v29 + 1);
      __str.__r_.__value_.__l.__size_ = (char *)v25 - (char *)v26;
      __str.__r_.__value_.__r.__words[2] = v30 | 0x8000000000000000;
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)p_str;
    }
    else
    {
      *((unsigned char *)&__str.__r_.__value_.__s + 23) = (_BYTE)v25 - (_BYTE)v26;
      p_str = &__str;
    }
    while (v25 != v26)
    {
      char v31 = *((unsigned char *)v25 - 1);
      uint64_t v25 = (uint64_t *)((char *)v25 - 1);
      *p_str++ = v31;
    }
    unsigned char *p_str = 0;
    std::string::operator=(a3, &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
  }
  return (unsigned __int16)v7;
}

void sub_20D474E50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t TAPExtractor::v1_extract_nonblank_character(unsigned __int16 utf8_character_from_string, int a2, std::string *a3, uint64_t *a4)
{
  do
  {
    while (1)
    {
      unsigned __int16 v8 = utf8_character_from_string;
      utf8_character_from_string = TAPExtractor::v1_extract_utf8_character_from_string(utf8_character_from_string, a2, a3, a4);
      std::string::basic_string[abi:ne180100]<0>(__p, " _¡¿\t\r\n");
      BOOL v9 = is_one_of((char **)__p, (char *)a3);
      BOOL v10 = v9;
      if (v13 < 0) {
        break;
      }
      if (!v9) {
        return v8;
      }
    }
    operator delete(__p[0]);
  }
  while (v10);
  return v8;
}

uint64_t SENTENCE_BOUNDARY_CHARACTERS(void)
{
  {
    std::string::basic_string[abi:ne180100]<0>(&v1, ".?!…");
    std::string::push_back(&v1, 0);
    std::string __p = v1;
    memset(&v1, 0, sizeof(v1));
    NeverDestructed<std::string>::NeverDestructed<>();
  }
  return SENTENCE_BOUNDARY_CHARACTERS(void)::s;
}

void sub_20D474FD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(a1);
}

void NeverDestructed<std::string>::NeverDestructed<>()
{
}

void sub_20D475084(_Unwind_Exception *a1)
{
  MEMORY[0x2105595E0](v1, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

void std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(TAPFileBuilder::top_level_prompt_info const&,TAPFileBuilder::top_level_prompt_info const&),TAPFileBuilder::top_level_prompt_info*,false>(unint64_t a1, unint64_t a2, uint64_t (**a3)(long long *, long long *), uint64_t a4, char a5)
{
  uint64_t v139 = *MEMORY[0x263EF8340];
  while (2)
  {
    unint64_t v129 = a2;
    uint64_t v131 = a2 - 36;
    uint64_t v127 = (long long *)(a2 - 108);
    uint64_t v128 = (long long *)(a2 - 72);
    unint64_t v12 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v12;
          uint64_t v13 = a2 - v12;
          unint64_t v14 = 0x8E38E38E38E38E39 * ((uint64_t)(a2 - v12) >> 2);
          if (v6 || !v5)
          {
            switch(v14)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                if ((*a3)((long long *)v131, (long long *)v12))
                {
                  long long v55 = *(_OWORD *)v12;
                  long long v56 = *(_OWORD *)(v12 + 16);
                  int v138 = *(_DWORD *)(v12 + 32);
                  long long v136 = v55;
                  long long v137 = v56;
                  long long v57 = *(_OWORD *)v131;
                  long long v58 = *(_OWORD *)(v131 + 16);
                  *(_DWORD *)(v12 + 32) = *(_DWORD *)(v131 + 32);
                  *(_OWORD *)unint64_t v12 = v57;
                  *(_OWORD *)(v12 + 16) = v58;
                  long long v59 = v136;
                  long long v60 = v137;
                  *(_DWORD *)(v131 + 32) = v138;
                  *(_OWORD *)uint64_t v131 = v59;
                  *(_OWORD *)(v131 + 16) = v60;
                }
                break;
              case 3uLL:
                std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TAPFileBuilder::top_level_prompt_info const&,TAPFileBuilder::top_level_prompt_info const&),TAPFileBuilder::top_level_prompt_info*>((long long *)v12, (long long *)(v12 + 36), (long long *)v131, a3);
                break;
              case 4uLL:
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TAPFileBuilder::top_level_prompt_info const&,TAPFileBuilder::top_level_prompt_info const&),TAPFileBuilder::top_level_prompt_info*>(v12, v12 + 36, v12 + 72, v131, a3);
                break;
              case 5uLL:
                std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TAPFileBuilder::top_level_prompt_info const&,TAPFileBuilder::top_level_prompt_info const&),TAPFileBuilder::top_level_prompt_info*>(v12, v12 + 36, v12 + 72, v12 + 108, v131, a3);
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v13 <= 863)
          {
            int v61 = (long long *)(v12 + 36);
            BOOL v63 = v12 == a2 || v61 == (long long *)a2;
            if (a5)
            {
              if (!v63)
              {
                uint64_t v64 = 0;
                unint64_t v65 = v12;
                do
                {
                  int v66 = (long long *)v65;
                  unint64_t v65 = (unint64_t)v61;
                  if ((*a3)(v61, v66))
                  {
                    long long v67 = *(_OWORD *)v65;
                    long long v68 = *(_OWORD *)(v65 + 16);
                    int v138 = *(_DWORD *)(v65 + 32);
                    long long v136 = v67;
                    long long v137 = v68;
                    uint64_t v69 = v64;
                    while (1)
                    {
                      uint64_t v70 = v12 + v69;
                      long long v71 = *(_OWORD *)(v12 + v69 + 16);
                      *(_OWORD *)(v70 + 36) = *(_OWORD *)(v12 + v69);
                      *(_OWORD *)(v70 + 52) = v71;
                      *(_DWORD *)(v70 + 68) = *(_DWORD *)(v12 + v69 + 32);
                      if (!v69) {
                        break;
                      }
                      v69 -= 36;
                      if (((*a3)(&v136, (long long *)(v69 + v12)) & 1) == 0)
                      {
                        uint64_t v72 = v12 + v69 + 36;
                        goto LABEL_78;
                      }
                    }
                    uint64_t v72 = v12;
LABEL_78:
                    long long v73 = v136;
                    long long v74 = v137;
                    *(_DWORD *)(v72 + 32) = v138;
                    *(_OWORD *)uint64_t v72 = v73;
                    *(_OWORD *)(v72 + 16) = v74;
                    a2 = v129;
                  }
                  int v61 = (long long *)(v65 + 36);
                  v64 += 36;
                }
                while (v65 + 36 != a2);
              }
            }
            else if (!v63)
            {
              do
              {
                uint64_t v118 = (long long *)a1;
                a1 = (unint64_t)v61;
                if ((*a3)(v61, v118))
                {
                  long long v119 = *(_OWORD *)a1;
                  long long v120 = *(_OWORD *)(a1 + 16);
                  int v138 = *(_DWORD *)(a1 + 32);
                  long long v136 = v119;
                  long long v137 = v120;
                  unint64_t v121 = a1;
                  do
                  {
                    unint64_t v122 = v121 - 36;
                    long long v123 = *(_OWORD *)(v121 - 20);
                    *(_OWORD *)unint64_t v121 = *(_OWORD *)(v121 - 36);
                    *(_OWORD *)(v121 + 16) = v123;
                    *(_DWORD *)(v121 + 32) = *(_DWORD *)(v121 - 4);
                    char v124 = (*a3)(&v136, (long long *)(v121 - 72));
                    unint64_t v121 = v122;
                  }
                  while ((v124 & 1) != 0);
                  long long v125 = v136;
                  long long v126 = v137;
                  *(_DWORD *)(v122 + 32) = v138;
                  *(_OWORD *)unint64_t v122 = v125;
                  *(_OWORD *)(v122 + 16) = v126;
                }
                int v61 = (long long *)(a1 + 36);
              }
              while (a1 + 36 != a2);
            }
            return;
          }
          if (!a4)
          {
            if (v12 != a2)
            {
              int64_t v75 = (v14 - 2) >> 1;
              int64_t v132 = v75;
              do
              {
                int64_t v76 = v75;
                if (v132 >= v75)
                {
                  uint64_t v77 = (2 * v75) | 1;
                  unint64_t v78 = a1 + 36 * v77;
                  if (2 * v75 + 2 < (uint64_t)v14
                    && (*a3)((long long *)(a1 + 36 * v77), (long long *)(v78 + 36)))
                  {
                    v78 += 36;
                    uint64_t v77 = 2 * v76 + 2;
                  }
                  unint64_t v79 = a1 + 36 * v76;
                  if (((*a3)((long long *)v78, (long long *)v79) & 1) == 0)
                  {
                    long long v80 = *(_OWORD *)v79;
                    long long v81 = *(_OWORD *)(v79 + 16);
                    int v138 = *(_DWORD *)(v79 + 32);
                    long long v136 = v80;
                    long long v137 = v81;
                    do
                    {
                      unint64_t v82 = v78;
                      long long v83 = *(_OWORD *)v78;
                      long long v84 = *(_OWORD *)(v78 + 16);
                      *(_DWORD *)(v79 + 32) = *(_DWORD *)(v78 + 32);
                      *(_OWORD *)unint64_t v79 = v83;
                      *(_OWORD *)(v79 + 16) = v84;
                      if (v132 < v77) {
                        break;
                      }
                      uint64_t v85 = (2 * v77) | 1;
                      unint64_t v78 = a1 + 36 * v85;
                      uint64_t v86 = 2 * v77 + 2;
                      if (v86 < (uint64_t)v14
                        && (*a3)((long long *)(a1 + 36 * v85), (long long *)(v78 + 36)))
                      {
                        v78 += 36;
                        uint64_t v85 = v86;
                      }
                      unint64_t v79 = v82;
                      uint64_t v77 = v85;
                    }
                    while (!(*a3)((long long *)v78, &v136));
                    long long v87 = v136;
                    long long v88 = v137;
                    *(_DWORD *)(v82 + 32) = v138;
                    *(_OWORD *)unint64_t v82 = v87;
                    *(_OWORD *)(v82 + 16) = v88;
                  }
                }
                int64_t v75 = v76 - 1;
              }
              while (v76);
              int64_t v89 = v13 / 0x24uLL;
              unint64_t v90 = v129;
              do
              {
                unint64_t v130 = v90;
                uint64_t v91 = 0;
                long long v92 = *(_OWORD *)a1;
                long long v93 = *(_OWORD *)(a1 + 16);
                int v135 = *(_DWORD *)(a1 + 32);
                long long v133 = v92;
                long long v134 = v93;
                unint64_t v94 = a1;
                do
                {
                  uint64_t v95 = v94 + 36 * v91 + 36;
                  uint64_t v96 = (2 * v91) | 1;
                  uint64_t v97 = 2 * v91 + 2;
                  if (v97 < v89
                    && (*a3)((long long *)(v94 + 36 * v91 + 36), (long long *)(v94 + 36 * v91 + 72)))
                  {
                    v95 += 36;
                    uint64_t v96 = v97;
                  }
                  long long v98 = *(_OWORD *)v95;
                  long long v99 = *(_OWORD *)(v95 + 16);
                  *(_DWORD *)(v94 + 32) = *(_DWORD *)(v95 + 32);
                  *(_OWORD *)unint64_t v94 = v98;
                  *(_OWORD *)(v94 + 16) = v99;
                  unint64_t v94 = v95;
                  uint64_t v91 = v96;
                }
                while (v96 <= (uint64_t)((unint64_t)(v89 - 2) >> 1));
                uint64_t v100 = (long long *)(v130 - 36);
                if (v95 == v130 - 36)
                {
                  unint64_t v90 = v130 - 36;
                  long long v115 = v133;
                  long long v116 = v134;
                  *(_DWORD *)(v95 + 32) = v135;
                  *(_OWORD *)uint64_t v95 = v115;
                  *(_OWORD *)(v95 + 16) = v116;
                }
                else
                {
                  long long v101 = *v100;
                  long long v102 = *(_OWORD *)(v130 - 20);
                  *(_DWORD *)(v95 + 32) = *(_DWORD *)(v130 - 4);
                  *(_OWORD *)uint64_t v95 = v101;
                  *(_OWORD *)(v95 + 16) = v102;
                  long long v103 = v133;
                  long long v104 = v134;
                  *(_DWORD *)(v130 - 4) = v135;
                  long long *v100 = v103;
                  *(_OWORD *)(v130 - 20) = v104;
                  unint64_t v90 = v130 - 36;
                  uint64_t v105 = v95 - a1 + 36;
                  if (v105 >= 37)
                  {
                    unint64_t v106 = (unint64_t)(-2 - 0x71C71C71C71C71C7 * (v105 >> 2)) >> 1;
                    unint64_t v107 = a1 + 36 * v106;
                    if ((*a3)((long long *)v107, (long long *)v95))
                    {
                      long long v108 = *(_OWORD *)v95;
                      long long v109 = *(_OWORD *)(v95 + 16);
                      int v138 = *(_DWORD *)(v95 + 32);
                      long long v136 = v108;
                      long long v137 = v109;
                      do
                      {
                        uint64_t v110 = v107;
                        long long v111 = *(_OWORD *)v107;
                        long long v112 = *(_OWORD *)(v107 + 16);
                        *(_DWORD *)(v95 + 32) = *(_DWORD *)(v107 + 32);
                        *(_OWORD *)uint64_t v95 = v111;
                        *(_OWORD *)(v95 + 16) = v112;
                        if (!v106) {
                          break;
                        }
                        unint64_t v106 = (v106 - 1) >> 1;
                        unint64_t v107 = a1 + 36 * v106;
                        uint64_t v95 = v110;
                      }
                      while (((*a3)((long long *)v107, &v136) & 1) != 0);
                      long long v113 = v136;
                      long long v114 = v137;
                      *(_DWORD *)(v110 + 32) = v138;
                      *(_OWORD *)uint64_t v110 = v113;
                      *(_OWORD *)(v110 + 16) = v114;
                    }
                  }
                }
              }
              while (v89-- > 2);
            }
            return;
          }
          unint64_t v15 = v12 + 36 * (v14 >> 1);
          if ((unint64_t)v13 >= 0x1201)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TAPFileBuilder::top_level_prompt_info const&,TAPFileBuilder::top_level_prompt_info const&),TAPFileBuilder::top_level_prompt_info*>((long long *)v12, (long long *)(v12 + 36 * (v14 >> 1)), (long long *)v131, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TAPFileBuilder::top_level_prompt_info const&,TAPFileBuilder::top_level_prompt_info const&),TAPFileBuilder::top_level_prompt_info*>((long long *)(v12 + 36), (long long *)(v12 + 36 * (v14 >> 1) - 36), v128, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TAPFileBuilder::top_level_prompt_info const&,TAPFileBuilder::top_level_prompt_info const&),TAPFileBuilder::top_level_prompt_info*>((long long *)(v12 + 72), (long long *)(v12 + 36 + 36 * (v14 >> 1)), v127, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TAPFileBuilder::top_level_prompt_info const&,TAPFileBuilder::top_level_prompt_info const&),TAPFileBuilder::top_level_prompt_info*>((long long *)(v12 + 36 * (v14 >> 1) - 36), (long long *)(v12 + 36 * (v14 >> 1)), (long long *)(v12 + 36 + 36 * (v14 >> 1)), a3);
            long long v16 = *(_OWORD *)v12;
            long long v17 = *(_OWORD *)(v12 + 16);
            int v138 = *(_DWORD *)(v12 + 32);
            long long v136 = v16;
            long long v137 = v17;
            long long v18 = *(_OWORD *)v15;
            long long v19 = *(_OWORD *)(v15 + 16);
            *(_DWORD *)(v12 + 32) = *(_DWORD *)(v15 + 32);
            *(_OWORD *)unint64_t v12 = v18;
            *(_OWORD *)(v12 + 16) = v19;
            long long v20 = v136;
            long long v21 = v137;
            *(_DWORD *)(v15 + 32) = v138;
            *(_OWORD *)unint64_t v15 = v20;
            *(_OWORD *)(v15 + 16) = v21;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TAPFileBuilder::top_level_prompt_info const&,TAPFileBuilder::top_level_prompt_info const&),TAPFileBuilder::top_level_prompt_info*>((long long *)(v12 + 36 * (v14 >> 1)), (long long *)v12, (long long *)v131, a3);
          }
          --a4;
          a2 = v129;
          if (a5 & 1) != 0 || ((*a3)((long long *)(v12 - 36), (long long *)v12)) {
            break;
          }
          long long v39 = *(_OWORD *)v12;
          long long v40 = *(_OWORD *)(v12 + 16);
          int v135 = *(_DWORD *)(v12 + 32);
          long long v133 = v39;
          long long v134 = v40;
          if ((*a3)(&v133, (long long *)v131))
          {
            do
              v12 += 36;
            while (((*a3)(&v133, (long long *)v12) & 1) == 0);
          }
          else
          {
            uint64_t v41 = (long long *)(v12 + 36);
            do
            {
              unint64_t v12 = (unint64_t)v41;
              if ((unint64_t)v41 >= v129) {
                break;
              }
              int v42 = (*a3)(&v133, v41);
              uint64_t v41 = (long long *)(v12 + 36);
            }
            while (!v42);
          }
          unint64_t v43 = v129;
          if (v12 < v129)
          {
            unint64_t v43 = v129;
            do
              v43 -= 36;
            while (((*a3)(&v133, (long long *)v43) & 1) != 0);
          }
          while (v12 < v43)
          {
            long long v44 = *(_OWORD *)v12;
            long long v45 = *(_OWORD *)(v12 + 16);
            int v138 = *(_DWORD *)(v12 + 32);
            long long v136 = v44;
            long long v137 = v45;
            long long v46 = *(_OWORD *)v43;
            long long v47 = *(_OWORD *)(v43 + 16);
            *(_DWORD *)(v12 + 32) = *(_DWORD *)(v43 + 32);
            *(_OWORD *)unint64_t v12 = v46;
            *(_OWORD *)(v12 + 16) = v47;
            long long v48 = v136;
            long long v49 = v137;
            *(_DWORD *)(v43 + 32) = v138;
            *(_OWORD *)unint64_t v43 = v48;
            *(_OWORD *)(v43 + 16) = v49;
            do
              v12 += 36;
            while (!(*a3)(&v133, (long long *)v12));
            do
              v43 -= 36;
            while (((*a3)(&v133, (long long *)v43) & 1) != 0);
          }
          BOOL v50 = (long long *)(v12 - 36);
          BOOL v5 = v12 - 36 >= a1;
          BOOL v6 = v12 - 36 == a1;
          if (v12 - 36 != a1)
          {
            long long v51 = *v50;
            long long v52 = *(_OWORD *)(v12 - 20);
            *(_DWORD *)(a1 + 32) = *(_DWORD *)(v12 - 4);
            *(_OWORD *)a1 = v51;
            *(_OWORD *)(a1 + 16) = v52;
          }
          a5 = 0;
          long long v53 = v133;
          long long v54 = v134;
          *(_DWORD *)(v12 - 4) = v135;
          *BOOL v50 = v53;
          *(_OWORD *)(v12 - 20) = v54;
        }
        long long v22 = *(_OWORD *)v12;
        long long v23 = *(_OWORD *)(v12 + 16);
        int v135 = *(_DWORD *)(v12 + 32);
        long long v133 = v22;
        long long v134 = v23;
        std::string v24 = (long long *)v12;
        do
        {
          uint64_t v25 = (uint64_t)v24;
          std::string v24 = (long long *)((char *)v24 + 36);
        }
        while (((*a3)(v24, &v133) & 1) != 0);
        uint64_t v26 = (long long *)v129;
        if (v25 == v12)
        {
          uint64_t v26 = (long long *)v129;
          do
          {
            if (v24 >= v26) {
              break;
            }
            uint64_t v26 = (long long *)((char *)v26 - 36);
          }
          while (((*a3)(v26, &v133) & 1) == 0);
        }
        else
        {
          do
            uint64_t v26 = (long long *)((char *)v26 - 36);
          while (!(*a3)(v26, &v133));
        }
        if (v24 < v26)
        {
          unint64_t v27 = (unint64_t)v24;
          char v28 = v26;
          do
          {
            long long v30 = *(_OWORD *)(v27 + 16);
            long long v136 = *(_OWORD *)v27;
            long long v29 = v136;
            long long v137 = v30;
            int v138 = *(_DWORD *)(v27 + 32);
            int v31 = v138;
            long long v33 = *v28;
            long long v32 = v28[1];
            *(_DWORD *)(v27 + 32) = *((_DWORD *)v28 + 8);
            *(_OWORD *)unint64_t v27 = v33;
            *(_OWORD *)(v27 + 16) = v32;
            *((_DWORD *)v28 + 8) = v31;
            *char v28 = v29;
            v28[1] = v30;
            do
            {
              uint64_t v25 = v27;
              v27 += 36;
            }
            while (((*a3)((long long *)v27, &v133) & 1) != 0);
            do
              char v28 = (long long *)((char *)v28 - 36);
            while (!(*a3)(v28, &v133));
          }
          while (v27 < (unint64_t)v28);
        }
        if (v25 != a1)
        {
          long long v34 = *(_OWORD *)v25;
          long long v35 = *(_OWORD *)(v25 + 16);
          *(_DWORD *)(a1 + 32) = *(_DWORD *)(v25 + 32);
          *(_OWORD *)a1 = v34;
          *(_OWORD *)(a1 + 16) = v35;
        }
        long long v36 = v133;
        long long v37 = v134;
        *(_DWORD *)(v25 + 32) = v135;
        *(_OWORD *)uint64_t v25 = v36;
        *(_OWORD *)(v25 + 16) = v37;
        if (v24 >= v26) {
          break;
        }
LABEL_31:
        std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(TAPFileBuilder::top_level_prompt_info const&,TAPFileBuilder::top_level_prompt_info const&),TAPFileBuilder::top_level_prompt_info*,false>(a1, v25, a3, a4, a5 & 1);
        a5 = 0;
        unint64_t v12 = v25 + 36;
      }
      BOOL v38 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TAPFileBuilder::top_level_prompt_info const&,TAPFileBuilder::top_level_prompt_info const&),TAPFileBuilder::top_level_prompt_info*>(a1, v25, a3);
      unint64_t v12 = v25 + 36;
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TAPFileBuilder::top_level_prompt_info const&,TAPFileBuilder::top_level_prompt_info const&),TAPFileBuilder::top_level_prompt_info*>(v25 + 36, v129, a3))
      {
        break;
      }
      if (!v38) {
        goto LABEL_31;
      }
    }
    a2 = v25;
    if (!v38) {
      continue;
    }
    break;
  }
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TAPFileBuilder::top_level_prompt_info const&,TAPFileBuilder::top_level_prompt_info const&),TAPFileBuilder::top_level_prompt_info*>(long long *a1, long long *a2, long long *a3, uint64_t (**a4)(long long *, long long *))
{
  char v8 = (*a4)(a2, a1);
  uint64_t result = (*a4)(a3, a2);
  if (v8)
  {
    if (result)
    {
      long long v10 = *a1;
      long long v11 = a1[1];
      int v12 = *((_DWORD *)a1 + 8);
      int v13 = *((_DWORD *)a3 + 8);
      long long v14 = a3[1];
      *a1 = *a3;
      a1[1] = v14;
      *((_DWORD *)a1 + 8) = v13;
    }
    else
    {
      long long v25 = *a1;
      long long v26 = a1[1];
      int v27 = *((_DWORD *)a1 + 8);
      int v28 = *((_DWORD *)a2 + 8);
      long long v29 = a2[1];
      *a1 = *a2;
      a1[1] = v29;
      *((_DWORD *)a1 + 8) = v28;
      *((_DWORD *)a2 + 8) = v27;
      *a2 = v25;
      a2[1] = v26;
      uint64_t result = (*a4)(a3, a2);
      if (!result) {
        return result;
      }
      long long v10 = *a2;
      long long v11 = a2[1];
      int v12 = *((_DWORD *)a2 + 8);
      int v30 = *((_DWORD *)a3 + 8);
      long long v31 = a3[1];
      *a2 = *a3;
      a2[1] = v31;
      *((_DWORD *)a2 + 8) = v30;
    }
    *((_DWORD *)a3 + 8) = v12;
    *a3 = v10;
    a3[1] = v11;
  }
  else if (result)
  {
    long long v15 = *a2;
    long long v16 = a2[1];
    int v17 = *((_DWORD *)a2 + 8);
    int v18 = *((_DWORD *)a3 + 8);
    long long v19 = a3[1];
    *a2 = *a3;
    a2[1] = v19;
    *((_DWORD *)a2 + 8) = v18;
    *((_DWORD *)a3 + 8) = v17;
    *a3 = v15;
    a3[1] = v16;
    uint64_t result = (*a4)(a2, a1);
    if (result)
    {
      long long v20 = *a1;
      long long v21 = a1[1];
      int v22 = *((_DWORD *)a1 + 8);
      int v23 = *((_DWORD *)a2 + 8);
      long long v24 = a2[1];
      *a1 = *a2;
      a1[1] = v24;
      *((_DWORD *)a1 + 8) = v23;
      *((_DWORD *)a2 + 8) = v22;
      *a2 = v20;
      a2[1] = v21;
    }
  }
  return result;
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TAPFileBuilder::top_level_prompt_info const&,TAPFileBuilder::top_level_prompt_info const&),TAPFileBuilder::top_level_prompt_info*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (**a5)(long long *, long long *))
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TAPFileBuilder::top_level_prompt_info const&,TAPFileBuilder::top_level_prompt_info const&),TAPFileBuilder::top_level_prompt_info*>((long long *)a1, (long long *)a2, (long long *)a3, a5);
  if ((*a5)((long long *)a4, (long long *)a3))
  {
    long long v11 = *(_OWORD *)a3;
    long long v12 = *(_OWORD *)(a3 + 16);
    int v13 = *(_DWORD *)(a3 + 32);
    int v14 = *(_DWORD *)(a4 + 32);
    long long v15 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_OWORD *)(a3 + 16) = v15;
    *(_DWORD *)(a3 + 32) = v14;
    *(_DWORD *)(a4 + 32) = v13;
    *(_OWORD *)a4 = v11;
    *(_OWORD *)(a4 + 16) = v12;
    if ((*a5)((long long *)a3, (long long *)a2))
    {
      long long v16 = *(_OWORD *)a2;
      long long v17 = *(_OWORD *)(a2 + 16);
      int v18 = *(_DWORD *)(a2 + 32);
      int v19 = *(_DWORD *)(a3 + 32);
      long long v20 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)(a2 + 16) = v20;
      *(_DWORD *)(a2 + 32) = v19;
      *(_DWORD *)(a3 + 32) = v18;
      *(_OWORD *)a3 = v16;
      *(_OWORD *)(a3 + 16) = v17;
      if ((*a5)((long long *)a2, (long long *)a1))
      {
        __n128 result = *(__n128 *)a1;
        long long v21 = *(_OWORD *)(a1 + 16);
        int v22 = *(_DWORD *)(a1 + 32);
        int v23 = *(_DWORD *)(a2 + 32);
        long long v24 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v24;
        *(_DWORD *)(a1 + 32) = v23;
        *(_DWORD *)(a2 + 32) = v22;
        *(__n128 *)a2 = result;
        *(_OWORD *)(a2 + 16) = v21;
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TAPFileBuilder::top_level_prompt_info const&,TAPFileBuilder::top_level_prompt_info const&),TAPFileBuilder::top_level_prompt_info*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (**a6)(long long *, long long *))
{
  __n128 v12 = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TAPFileBuilder::top_level_prompt_info const&,TAPFileBuilder::top_level_prompt_info const&),TAPFileBuilder::top_level_prompt_info*>(a1, a2, a3, a4, a6);
  if (((unsigned int (*)(uint64_t, uint64_t, __n128))*a6)(a5, a4, v12))
  {
    long long v14 = *(_OWORD *)a4;
    long long v15 = *(_OWORD *)(a4 + 16);
    int v16 = *(_DWORD *)(a4 + 32);
    int v17 = *(_DWORD *)(a5 + 32);
    long long v18 = *(_OWORD *)(a5 + 16);
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *(_OWORD *)(a4 + 16) = v18;
    *(_DWORD *)(a4 + 32) = v17;
    *(_DWORD *)(a5 + 32) = v16;
    *(_OWORD *)a5 = v14;
    *(_OWORD *)(a5 + 16) = v15;
    if ((*a6)((long long *)a4, (long long *)a3))
    {
      long long v19 = *(_OWORD *)a3;
      long long v20 = *(_OWORD *)(a3 + 16);
      int v21 = *(_DWORD *)(a3 + 32);
      int v22 = *(_DWORD *)(a4 + 32);
      long long v23 = *(_OWORD *)(a4 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_OWORD *)(a3 + 16) = v23;
      *(_DWORD *)(a3 + 32) = v22;
      *(_DWORD *)(a4 + 32) = v21;
      *(_OWORD *)a4 = v19;
      *(_OWORD *)(a4 + 16) = v20;
      if ((*a6)((long long *)a3, (long long *)a2))
      {
        __n128 v24 = *(__n128 *)a2;
        long long v25 = *(_OWORD *)(a2 + 16);
        int v26 = *(_DWORD *)(a2 + 32);
        int v27 = *(_DWORD *)(a3 + 32);
        long long v28 = *(_OWORD *)(a3 + 16);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(_OWORD *)(a2 + 16) = v28;
        *(_DWORD *)(a2 + 32) = v27;
        *(_DWORD *)(a3 + 32) = v26;
        *(__n128 *)a3 = v24;
        *(_OWORD *)(a3 + 16) = v25;
        if ((*a6)((long long *)a2, (long long *)a1))
        {
          __n128 result = *(__n128 *)a1;
          long long v29 = *(_OWORD *)(a1 + 16);
          int v30 = *(_DWORD *)(a1 + 32);
          int v31 = *(_DWORD *)(a2 + 32);
          long long v32 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)(a1 + 16) = v32;
          *(_DWORD *)(a1 + 32) = v31;
          *(_DWORD *)(a2 + 32) = v30;
          *(__n128 *)a2 = result;
          *(_OWORD *)(a2 + 16) = v29;
        }
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TAPFileBuilder::top_level_prompt_info const&,TAPFileBuilder::top_level_prompt_info const&),TAPFileBuilder::top_level_prompt_info*>(uint64_t a1, uint64_t a2, uint64_t (**a3)(long long *, long long *))
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  uint64_t v6 = (a2 - a1) >> 2;
  BOOL result = 1;
  switch(0x8E38E38E38E38E39 * v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      char v8 = (long long *)(a2 - 36);
      if (!(*a3)((long long *)(a2 - 36), (long long *)a1)) {
        return 1;
      }
      long long v9 = *(_OWORD *)a1;
      long long v10 = *(_OWORD *)(a1 + 16);
      int v11 = *(_DWORD *)(a1 + 32);
      int v12 = *(_DWORD *)(a2 - 4);
      long long v13 = *(_OWORD *)(a2 - 20);
      *(_OWORD *)a1 = *v8;
      *(_OWORD *)(a1 + 16) = v13;
      *(_DWORD *)(a1 + 32) = v12;
      *(_DWORD *)(a2 - 4) = v11;
      BOOL result = 1;
      long long *v8 = v9;
      *(_OWORD *)(a2 - 20) = v10;
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TAPFileBuilder::top_level_prompt_info const&,TAPFileBuilder::top_level_prompt_info const&),TAPFileBuilder::top_level_prompt_info*>((long long *)a1, (long long *)(a1 + 36), (long long *)(a2 - 36), a3);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TAPFileBuilder::top_level_prompt_info const&,TAPFileBuilder::top_level_prompt_info const&),TAPFileBuilder::top_level_prompt_info*>(a1, a1 + 36, a1 + 72, a2 - 36, a3);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TAPFileBuilder::top_level_prompt_info const&,TAPFileBuilder::top_level_prompt_info const&),TAPFileBuilder::top_level_prompt_info*>(a1, a1 + 36, a1 + 72, a1 + 108, a2 - 36, a3);
      return 1;
    default:
      long long v14 = (long long *)(a1 + 72);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TAPFileBuilder::top_level_prompt_info const&,TAPFileBuilder::top_level_prompt_info const&),TAPFileBuilder::top_level_prompt_info*>((long long *)a1, (long long *)(a1 + 36), (long long *)(a1 + 72), a3);
      uint64_t v15 = a1 + 108;
      if (a1 + 108 == a2) {
        return 1;
      }
      uint64_t v16 = 0;
      int v17 = 0;
      break;
  }
  while (1)
  {
    if ((*a3)((long long *)v15, v14))
    {
      long long v18 = *(_OWORD *)(v15 + 16);
      long long v23 = *(_OWORD *)v15;
      long long v24 = v18;
      int v25 = *(_DWORD *)(v15 + 32);
      uint64_t v19 = v16;
      while (1)
      {
        uint64_t v20 = a1 + v19;
        *(_OWORD *)(v20 + 108) = *(_OWORD *)(a1 + v19 + 72);
        *(_OWORD *)(v20 + 1++*(_DWORD *)(result + 24) = *(_OWORD *)(a1 + v19 + 88);
        *(_DWORD *)(v20 + 140) = *(_DWORD *)(a1 + v19 + 104);
        if (v19 == -72) {
          break;
        }
        v19 -= 36;
        if (((*a3)(&v23, (long long *)(v20 + 36)) & 1) == 0)
        {
          uint64_t v21 = a1 + v19 + 108;
          goto LABEL_12;
        }
      }
      uint64_t v21 = a1;
LABEL_12:
      long long v22 = v24;
      *(_OWORD *)uint64_t v21 = v23;
      *(_OWORD *)(v21 + 16) = v22;
      *(_DWORD *)(v21 + 32) = v25;
      if (++v17 == 8) {
        return v15 + 36 == a2;
      }
    }
    long long v14 = (long long *)v15;
    v16 += 36;
    v15 += 36;
    if (v15 == a2) {
      return 1;
    }
  }
}

BOOL TAPExtractor::compare_prompts_by_boundary_conditions(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = boundary_type_to_priority_[*(unsigned __int8 *)(a1 + 11)];
  unsigned int v3 = boundary_type_to_priority_[*(unsigned __int8 *)(a2 + 11)];
  if (v2 > v3) {
    return 1;
  }
  return v2 == v3
      && boundary_type_to_priority_[*(unsigned __int8 *)(a1 + 10)] > boundary_type_to_priority_[*(unsigned __int8 *)(a2 + 10)];
}

uint64_t *std::__hash_table<std::__hash_value_type<unsigned int,std::pair<unsigned short,unsigned short>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::pair<unsigned short,unsigned short>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::pair<unsigned short,unsigned short>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::pair<unsigned short,unsigned short>>>>::__equal_range_multi<unsigned int>(void *a1, unsigned int a2)
{
  unint64_t v2 = a1[1];
  if (!v2) {
    return 0;
  }
  uint8x8_t v3 = (uint8x8_t)vcnt_s8((int8x8_t)v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v4 = a2;
    if (v2 <= a2) {
      unint64_t v4 = a2 % v2;
    }
  }
  else
  {
    unint64_t v4 = (v2 - 1) & a2;
  }
  uint64_t v6 = *(uint64_t ***)(*a1 + 8 * v4);
  if (!v6) {
    return 0;
  }
  BOOL result = *v6;
  if (!*v6) {
    return result;
  }
  while (1)
  {
    unint64_t v7 = result[1];
    if (v7 == a2) {
      break;
    }
    if (v3.u32[0] > 1uLL)
    {
      if (v7 >= v2) {
        v7 %= v2;
      }
    }
    else
    {
      v7 &= v2 - 1;
    }
    if (v7 != v4) {
      return 0;
    }
LABEL_17:
    BOOL result = (uint64_t *)*result;
    if (!result) {
      return result;
    }
  }
  if (*((_DWORD *)result + 4) != a2) {
    goto LABEL_17;
  }
  char v8 = result;
  do
    char v8 = (uint64_t *)*v8;
  while (v8 && *((_DWORD *)v8 + 4) == a2);
  return result;
}

void std::vector<std::vector<std::pair<unsigned short,unsigned short>>>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v4 = *(void **)a1;
  uint8x8_t v3 = *(void **)(a1 + 8);
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v3 - *(void *)a1) >> 3);
  unint64_t v6 = a2 - v5;
  if (a2 > v5)
  {
    uint64_t v7 = *(void *)(a1 + 16);
    if (0xAAAAAAAAAAAAAAABLL * ((v7 - (uint64_t)v3) >> 3) >= v6)
    {
      bzero(*(void **)(a1 + 8), 24 * ((24 * v6 - 24) / 0x18) + 24);
      *(void *)(a1 + 8) = &v3[3 * ((24 * v6 - 24) / 0x18) + 3];
      return;
    }
    if (a2 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (uint64_t)v4) >> 3);
    uint64_t v9 = 2 * v8;
    if (2 * v8 <= a2) {
      uint64_t v9 = a2;
    }
    if (v8 >= 0x555555555555555) {
      unint64_t v10 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v10 = v9;
    }
    if (v10 > 0xAAAAAAAAAAAAAAALL) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v11 = 3 * v10;
    int v12 = (char *)operator new(24 * v10);
    long long v13 = &v12[24 * v5];
    long long v14 = &v12[8 * v11];
    size_t v15 = 24 * ((24 * v6 - 24) / 0x18) + 24;
    bzero(v13, v15);
    uint64_t v16 = &v13[v15];
    if (v3 == v4)
    {
      *(void *)a1 = v13;
      *(void *)(a1 + 8) = v16;
      *(void *)(a1 + 16) = v14;
      if (!v3) {
        return;
      }
    }
    else
    {
      do
      {
        int v17 = v13;
        *((void *)v13 - 1) = 0;
        long long v18 = *(_OWORD *)(v3 - 3);
        v3 -= 3;
        *(_OWORD *)(v13 - ++*(_DWORD *)(result + 24) = v18;
        v13 -= 24;
        *((void *)v17 - 1) = v3[2];
        *uint8x8_t v3 = 0;
        v3[1] = 0;
        v3[2] = 0;
      }
      while (v3 != v4);
      uint64_t v19 = *(void **)a1;
      uint8x8_t v3 = *(void **)(a1 + 8);
      *(void *)a1 = v13;
      *(void *)(a1 + 8) = v16;
      *(void *)(a1 + 16) = v14;
      if (v3 != v19)
      {
        uint64_t v20 = v3;
        do
        {
          long long v22 = (void *)*(v20 - 3);
          v20 -= 3;
          uint64_t v21 = v22;
          if (v22)
          {
            *(v3 - 2) = v21;
            operator delete(v21);
          }
          uint8x8_t v3 = v20;
        }
        while (v20 != v19);
        uint8x8_t v3 = v19;
      }
      if (!v3) {
        return;
      }
    }
    operator delete(v3);
    return;
  }
  if (a2 < v5)
  {
    long long v23 = &v4[3 * a2];
    if (v3 != v23)
    {
      long long v24 = *(void **)(a1 + 8);
      do
      {
        uint64_t v26 = (void *)*(v24 - 3);
        v24 -= 3;
        int v25 = v26;
        if (v26)
        {
          *(v3 - 2) = v25;
          operator delete(v25);
        }
        uint8x8_t v3 = v24;
      }
      while (v24 != v23);
    }
    *(void *)(a1 + 8) = v23;
  }
}

char *select_prompt_from_prefix<std::vector<TAPFileBuilder::v2_tap_prompt_section_of_length_m const*>>(uint64_t *a1, uint64_t *a2, const void **a3, int a4)
{
  if (a1 == a2) {
    return 0;
  }
  unint64_t v6 = a1;
  uint64_t v7 = 0;
  unint64_t v8 = 0;
  uint64_t v9 = 0;
  unint64_t v10 = 0;
  do
  {
    uint64_t v11 = *v6;
    if (*(_WORD *)(*v6 + 2))
    {
      unsigned int v12 = 0;
      long long v13 = (char *)(v11 + 4);
      do
      {
        int v14 = *((char *)a3 + 23);
        if (v14 >= 0) {
          size_t v15 = a3;
        }
        else {
          size_t v15 = *a3;
        }
        if (v14 >= 0) {
          size_t v16 = *((unsigned __int8 *)a3 + 23);
        }
        else {
          size_t v16 = (size_t)a3[1];
        }
        if (!memcmp(v13, v15, v16))
        {
          if (!a4) {
            goto LABEL_38;
          }
          if (v10 >= v9)
          {
            uint64_t v17 = (v10 - v7) >> 3;
            unint64_t v18 = v17 + 1;
            if ((unint64_t)(v17 + 1) >> 61) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            if ((v9 - v7) >> 2 > v18) {
              unint64_t v18 = (v9 - v7) >> 2;
            }
            if ((unint64_t)(v9 - v7) >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v19 = v18;
            }
            if (v19)
            {
              if (v19 >> 61) {
                std::__throw_bad_array_new_length[abi:ne180100]();
              }
              uint64_t v20 = (char *)operator new(8 * v19);
            }
            else
            {
              uint64_t v20 = 0;
            }
            uint64_t v21 = &v20[8 * v17];
            *(void *)uint64_t v21 = v13;
            unint64_t v10 = v21 + 8;
            while (v8 != v7)
            {
              uint64_t v22 = *((void *)v8 - 1);
              v8 -= 8;
              *((void *)v21 - 1) = v22;
              v21 -= 8;
            }
            uint64_t v9 = &v20[8 * v19];
            if (v7) {
              operator delete(v7);
            }
            uint64_t v7 = v21;
          }
          else
          {
            *(void *)unint64_t v10 = v13;
            v10 += 8;
          }
          uint64_t v11 = *v6;
          unint64_t v8 = v10;
        }
        v13 += 56;
        ++v12;
      }
      while (v12 < *(unsigned __int16 *)(v11 + 2));
    }
    ++v6;
  }
  while (v6 != a2);
  if (v10 != v7)
  {
    long long v13 = *(char **)&v7[8 * (rand() % (unint64_t)((v8 - v7) >> 3))];
LABEL_39:
    operator delete(v7);
    return v13;
  }
  long long v13 = 0;
LABEL_38:
  if (v7) {
    goto LABEL_39;
  }
  return v13;
}

void sub_20D4765EC(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

BOOL TAPExtractor::detect_v2_match(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4, uint64_t *a5)
{
  if (0x84BDA12F684BDA13 * ((a5[1] - *a5) >> 3) < a3 + (unint64_t)a2) {
    return 0;
  }
  uint64_t v7 = a4;
  __int16 v8 = a3;
  __int16 v9 = a2;
  unsigned int v11 = a2;
  if (a3)
  {
    unsigned int v12 = a2;
    do
    {
      if ((*(void *)(*(void *)(a1 + 256) + ((v12 >> 3) & 0x1FF8)) >> v12)) {
        return 0;
      }
      ++v12;
    }
    while (a3 + a2 > (unsigned __int16)v12);
    if (2 * (_WORD)a3)
    {
      uint64_t v13 = 0;
      BOOL v14 = 0;
      uint64_t v50 = 2 * (a2 & 0x7FFF);
      unint64_t v49 = (unsigned __int16)(2 * a3);
      while (1)
      {
        uint64_t v7 = a4;
        std::string::basic_string[abi:ne180100](&__dst, (void *)(*(void *)(a1 + 384)+ *(void *)(*(void *)(a1 + 360) + 40)+ *(unsigned int *)(a4 + 28)+ *(void *)(a1 + 552) * v13), *(void *)(a1 + 552));
        uint64_t v15 = v13 + v50;
        uint64_t v16 = *(void *)(a1 + 504) + 24 * (v13 + v50);
        if (*(char *)(v16 + 23) < 0) {
          std::string::size_type v17 = *(void *)(v16 + 8);
        }
        else {
          std::string::size_type v17 = *(unsigned __int8 *)(v16 + 23);
        }
        std::string::resize(&__dst, v17, 0);
        uint64_t v18 = *(void *)(a1 + 504) + 24 * v15;
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = __dst.__r_.__value_.__l.__size_;
        }
        uint64_t v20 = *(unsigned __int8 *)(v18 + 23);
        int v21 = (char)v20;
        if ((v20 & 0x80u) != 0) {
          uint64_t v20 = *(void *)(v18 + 8);
        }
        if (size != v20) {
          break;
        }
        if (v21 >= 0) {
          uint64_t v22 = (unsigned __int8 *)(*(void *)(a1 + 504) + 24 * v15);
        }
        else {
          uint64_t v22 = *(unsigned __int8 **)v18;
        }
        if ((*((unsigned char *)&__dst.__r_.__value_.__s + 23) & 0x80) != 0)
        {
          int v27 = (void *)__dst.__r_.__value_.__r.__words[0];
          int v28 = memcmp(__dst.__r_.__value_.__l.__data_, v22, __dst.__r_.__value_.__l.__size_);
          operator delete(v27);
          if (v28) {
            goto LABEL_34;
          }
        }
        else if (*((unsigned char *)&__dst.__r_.__value_.__s + 23))
        {
          uint64_t v23 = 0;
          do
          {
            int v24 = __dst.__r_.__value_.__s.__data_[v23];
            int v25 = v22[v23];
          }
          while (v24 == v25 && HIBYTE(__dst.__r_.__value_.__r.__words[2]) - 1 != v23++);
          if (v24 != v25)
          {
LABEL_34:
            uint64_t v7 = a4;
            goto LABEL_37;
          }
        }
        BOOL v14 = ++v13 >= v49;
        if (v13 == v49) {
          goto LABEL_34;
        }
      }
      if ((*((unsigned char *)&__dst.__r_.__value_.__s + 23) & 0x80) != 0) {
        operator delete(__dst.__r_.__value_.__l.__data_);
      }
LABEL_37:
      if (!v14) {
        return 0;
      }
    }
  }
  uint64_t v29 = *a5;
  do
    unsigned int v30 = (unsigned __int16)v11;
  while (*(unsigned __int8 *)(v29 + 216 * (unsigned __int16)v11++ + 24));
  int v32 = *(unsigned __int8 *)(v7 + 20);
  if (v32 != 7)
  {
    if (*(_DWORD *)(v29 + 216 * v30 + 156))
    {
      int v36 = *(_DWORD *)(v29 + 216 * v30 + 180);
      *(unsigned char *)(a1 + 435) = v36 != 0;
      if (v36)
      {
        BOOL v37 = 0;
        BOOL v38 = 1;
      }
      else
      {
        BOOL v38 = *(_DWORD *)(v29 + 216 * v30 + 188) != 0;
        BOOL v37 = v38;
      }
      *(unsigned char *)(a1 + 436) = v37;
      switch(v32)
      {
        case 0:
          goto LABEL_42;
        case 1:
          if (!v36) {
            return 0;
          }
          goto LABEL_42;
        case 2:
          if (v37) {
            goto LABEL_42;
          }
          return 0;
        case 3:
          if (!v38) {
            goto LABEL_42;
          }
          return 0;
        case 4:
          if (v38) {
            goto LABEL_42;
          }
          return 0;
        case 6:
          if (!v36) {
            goto LABEL_42;
          }
          return 0;
        default:
          if (Diagnostics_GetLogObject(void)::onceToken != -1) {
            dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
          }
          int v42 = Diagnostics_GetLogObject(void)::__profile_log_default;
          if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
          {
            LOWORD(__dst.__r_.__value_.__l.__data_) = 0;
            _os_log_impl(&dword_20CD80000, v42, OS_LOG_TYPE_ERROR, "ERROR: INVALID START BOUNDARY CONDITION FOR TAP using phrase ", (uint8_t *)&__dst, 2u);
          }
          long long v44 = "ERROR: INVALID START BOUNDARY CONDITION FOR TAP using phrase ";
LABEL_83:
          Diagnostics::log(3, v44, v43, v49);
          return 0;
      }
    }
    return 0;
  }
  if (*(unsigned char *)(v29 + 216 * v30 - 192))
  {
LABEL_42:
    unsigned __int16 v33 = v8 + v9;
    do
      unsigned int v34 = --v33;
    while (*(unsigned char *)(v29 + 216 * v33 + 24));
    int v35 = *(unsigned __int8 *)(v7 + 21);
    if (v35 == 8) {
      return *(unsigned char *)(v29 + 216 * v33 + 240) != 0;
    }
    if (!*(_DWORD *)(v29 + 216 * v33 + 160) && !*(unsigned char *)(v29 + 216 * v33 + 240)) {
      return 0;
    }
    if (*(unsigned char *)(a1 + 441))
    {
      int v39 = *(_DWORD *)(v29 + 216 * v33 + 184);
      BOOL v40 = v39 != 0;
      *(unsigned char *)(a1 + 437) = v40;
      if (v39) {
        BOOL v41 = 0;
      }
      else {
        BOOL v41 = *(_DWORD *)(v29 + 216 * v34 + 192) != 0;
      }
      *(unsigned char *)(a1 + 438) = v41;
    }
    else
    {
      BOOL v41 = 0;
      BOOL v40 = 0x84BDA12F684BDA13 * ((a5[1] - v29) >> 3) - 2 <= v33;
      *(_WORD *)(a1 + 437) = v40;
    }
    BOOL result = 1;
    switch(v35)
    {
      case 0:
        return result;
      case 1:
        if (!v40) {
          return 0;
        }
        return result;
      case 2:
        if (!v41) {
          return 0;
        }
        return result;
      case 3:
        if (v40 || v41) {
          return 0;
        }
        return result;
      case 4:
        if (!v40 && !v41) {
          return 0;
        }
        return result;
      case 5:
        int v46 = *(_DWORD *)(a1 + 560);
        std::string::basic_string[abi:ne180100]<0>(&__dst, (char *)(v7 + 16));
        memset(&__p, 0, sizeof(__p));
        TAPExtractor::v1_extract_utf8_character_from_string(0, 1, &__p, (uint64_t *)&__dst);
        long long v47 = (char **)SENTENCE_BOUNDARY_CHARACTERS();
        if (is_one_of(v47, (char *)&__p))
        {
          if (!*(unsigned char *)(a1 + 437))
          {
LABEL_94:
            BOOL v48 = 0;
            goto LABEL_100;
          }
          if (v46)
          {
            if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&__p, "?")) {
              goto LABEL_94;
            }
          }
          else if (!std::operator!=[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&__p, "?"))
          {
            goto LABEL_94;
          }
          BOOL v48 = 1;
        }
        else
        {
          BOOL v48 = *(unsigned char *)(a1 + 438) != 0;
        }
LABEL_100:
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__dst.__r_.__value_.__l.__data_);
        }
        return v48;
      case 6:
        if (v40) {
          return 0;
        }
        return result;
      default:
        if (Diagnostics_GetLogObject(void)::onceToken != -1) {
          dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
        }
        long long v45 = Diagnostics_GetLogObject(void)::__profile_log_default;
        if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
        {
          LOWORD(__dst.__r_.__value_.__l.__data_) = 0;
          _os_log_impl(&dword_20CD80000, v45, OS_LOG_TYPE_ERROR, "ERROR: INVALID END BOUNDARY CONDITION FOR TAP using phrase ", (uint8_t *)&__dst, 2u);
        }
        long long v44 = "ERROR: INVALID END BOUNDARY CONDITION FOR TAP using phrase ";
        goto LABEL_83;
    }
  }
  return 0;
}

void sub_20D476BC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(exception_object);
}

BOOL std::operator!=[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if ((*((char *)a1 + 23) & 0x80000000) == 0)
  {
    if (v4 != *((unsigned __int8 *)a1 + 23)) {
      return 1;
    }
    return memcmp(a1, __s, v4) != 0;
  }
  if (v4 == a1[1])
  {
    if (v4 == -1) {
      std::string::__throw_out_of_range[abi:ne180100]();
    }
    a1 = (void *)*a1;
    return memcmp(a1, __s, v4) != 0;
  }
  return 1;
}

void std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(TAPFileBuilder::v2_top_level_prompt_info const&,TAPFileBuilder::v2_top_level_prompt_info const&),TAPFileBuilder::v2_top_level_prompt_info*,false>(unint64_t a1, unint64_t a2, uint64_t (**a3)(long long *, long long *), uint64_t a4, char a5)
{
  uint64_t v174 = *MEMORY[0x263EF8340];
  while (2)
  {
    unint64_t v162 = a2;
    uint64_t v164 = a2 - 56;
    uint64_t v160 = (long long *)(a2 - 168);
    unsigned __int16 v161 = (long long *)(a2 - 112);
    unint64_t v12 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v12;
          uint64_t v13 = a2 - v12;
          unint64_t v14 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a2 - v12) >> 3);
          if (v6 || !v5)
          {
            switch(v14)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                if ((*a3)((long long *)v164, (long long *)v12))
                {
                  long long v70 = *(_OWORD *)v12;
                  long long v71 = *(_OWORD *)(v12 + 16);
                  long long v72 = *(_OWORD *)(v12 + 32);
                  uint64_t v173 = *(void *)(v12 + 48);
                  long long v171 = v71;
                  long long v172 = v72;
                  long long v170 = v70;
                  long long v73 = *(_OWORD *)v164;
                  long long v74 = *(_OWORD *)(v164 + 16);
                  long long v75 = *(_OWORD *)(v164 + 32);
                  *(void *)(v12 + 48) = *(void *)(v164 + 48);
                  *(_OWORD *)(v12 + 16) = v74;
                  *(_OWORD *)(v12 + 32) = v75;
                  *(_OWORD *)unint64_t v12 = v73;
                  long long v76 = v170;
                  long long v77 = v171;
                  long long v78 = v172;
                  *(void *)(v164 + 48) = v173;
                  *(_OWORD *)(v164 + 16) = v77;
                  *(_OWORD *)(v164 + 32) = v78;
                  *(_OWORD *)uint64_t v164 = v76;
                }
                break;
              case 3uLL:
                std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TAPFileBuilder::v2_top_level_prompt_info const&,TAPFileBuilder::v2_top_level_prompt_info const&),TAPFileBuilder::v2_top_level_prompt_info*>((long long *)v12, (long long *)(v12 + 56), (long long *)v164, a3);
                break;
              case 4uLL:
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TAPFileBuilder::v2_top_level_prompt_info const&,TAPFileBuilder::v2_top_level_prompt_info const&),TAPFileBuilder::v2_top_level_prompt_info*>(v12, v12 + 56, v12 + 112, v164, a3);
                break;
              case 5uLL:
                std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TAPFileBuilder::v2_top_level_prompt_info const&,TAPFileBuilder::v2_top_level_prompt_info const&),TAPFileBuilder::v2_top_level_prompt_info*>(v12, v12 + 56, v12 + 112, v12 + 168, (long long *)v164, a3);
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v13 <= 1343)
          {
            unint64_t v79 = (long long *)(v12 + 56);
            BOOL v81 = v12 == a2 || v79 == (long long *)a2;
            if (a5)
            {
              if (!v81)
              {
                uint64_t v82 = 0;
                unint64_t v83 = v12;
                do
                {
                  long long v84 = (long long *)v83;
                  unint64_t v83 = (unint64_t)v79;
                  if ((*a3)(v79, v84))
                  {
                    long long v85 = *(_OWORD *)v83;
                    long long v86 = *(_OWORD *)(v83 + 16);
                    long long v87 = *(_OWORD *)(v83 + 32);
                    uint64_t v173 = *(void *)(v83 + 48);
                    long long v171 = v86;
                    long long v172 = v87;
                    long long v170 = v85;
                    uint64_t v88 = v82;
                    while (1)
                    {
                      uint64_t v89 = v12 + v88;
                      long long v90 = *(_OWORD *)(v12 + v88 + 16);
                      *(_OWORD *)(v89 + 56) = *(_OWORD *)(v12 + v88);
                      *(_OWORD *)(v89 + 72) = v90;
                      *(_OWORD *)(v89 + 88) = *(_OWORD *)(v12 + v88 + 32);
                      *(void *)(v89 + 104) = *(void *)(v12 + v88 + 48);
                      if (!v88) {
                        break;
                      }
                      v88 -= 56;
                      if (((*a3)(&v170, (long long *)(v88 + v12)) & 1) == 0)
                      {
                        uint64_t v91 = v12 + v88 + 56;
                        goto LABEL_78;
                      }
                    }
                    uint64_t v91 = v12;
LABEL_78:
                    long long v92 = v170;
                    long long v93 = v171;
                    long long v94 = v172;
                    *(void *)(v91 + 48) = v173;
                    *(_OWORD *)(v91 + 16) = v93;
                    *(_OWORD *)(v91 + 32) = v94;
                    *(_OWORD *)uint64_t v91 = v92;
                    a2 = v162;
                  }
                  unint64_t v79 = (long long *)(v83 + 56);
                  v82 += 56;
                }
                while (v83 + 56 != a2);
              }
            }
            else if (!v81)
            {
              do
              {
                uint64_t v149 = (long long *)a1;
                a1 = (unint64_t)v79;
                if ((*a3)(v79, v149))
                {
                  long long v150 = *(_OWORD *)a1;
                  long long v151 = *(_OWORD *)(a1 + 16);
                  long long v152 = *(_OWORD *)(a1 + 32);
                  uint64_t v173 = *(void *)(a1 + 48);
                  long long v171 = v151;
                  long long v172 = v152;
                  long long v170 = v150;
                  unint64_t v153 = a1;
                  do
                  {
                    unint64_t v154 = v153 - 56;
                    long long v155 = *(_OWORD *)(v153 - 40);
                    *(_OWORD *)unint64_t v153 = *(_OWORD *)(v153 - 56);
                    *(_OWORD *)(v153 + 16) = v155;
                    *(_OWORD *)(v153 + 32) = *(_OWORD *)(v153 - 24);
                    *(void *)(v153 + 48) = *(void *)(v153 - 8);
                    char v156 = (*a3)(&v170, (long long *)(v153 - 112));
                    unint64_t v153 = v154;
                  }
                  while ((v156 & 1) != 0);
                  long long v157 = v170;
                  long long v158 = v171;
                  long long v159 = v172;
                  *(void *)(v154 + 48) = v173;
                  *(_OWORD *)(v154 + 16) = v158;
                  *(_OWORD *)(v154 + 32) = v159;
                  *(_OWORD *)unint64_t v154 = v157;
                }
                unint64_t v79 = (long long *)(a1 + 56);
              }
              while (a1 + 56 != a2);
            }
            return;
          }
          if (!a4)
          {
            if (v12 != a2)
            {
              int64_t v95 = (v14 - 2) >> 1;
              int64_t v165 = v95;
              do
              {
                int64_t v96 = v95;
                if (v165 >= v95)
                {
                  uint64_t v97 = (2 * v95) | 1;
                  unint64_t v98 = a1 + 56 * v97;
                  if (2 * v95 + 2 < (uint64_t)v14
                    && (*a3)((long long *)(a1 + 56 * v97), (long long *)(v98 + 56)))
                  {
                    v98 += 56;
                    uint64_t v97 = 2 * v96 + 2;
                  }
                  unint64_t v99 = a1 + 56 * v96;
                  if (((*a3)((long long *)v98, (long long *)v99) & 1) == 0)
                  {
                    long long v100 = *(_OWORD *)v99;
                    long long v101 = *(_OWORD *)(v99 + 16);
                    long long v102 = *(_OWORD *)(v99 + 32);
                    uint64_t v173 = *(void *)(v99 + 48);
                    long long v171 = v101;
                    long long v172 = v102;
                    long long v170 = v100;
                    do
                    {
                      unint64_t v103 = v98;
                      long long v104 = *(_OWORD *)v98;
                      long long v105 = *(_OWORD *)(v98 + 16);
                      long long v106 = *(_OWORD *)(v98 + 32);
                      *(void *)(v99 + 48) = *(void *)(v98 + 48);
                      *(_OWORD *)(v99 + 16) = v105;
                      *(_OWORD *)(v99 + 32) = v106;
                      *(_OWORD *)unint64_t v99 = v104;
                      if (v165 < v97) {
                        break;
                      }
                      uint64_t v107 = (2 * v97) | 1;
                      unint64_t v98 = a1 + 56 * v107;
                      uint64_t v108 = 2 * v97 + 2;
                      if (v108 < (uint64_t)v14
                        && (*a3)((long long *)(a1 + 56 * v107), (long long *)(v98 + 56)))
                      {
                        v98 += 56;
                        uint64_t v107 = v108;
                      }
                      unint64_t v99 = v103;
                      uint64_t v97 = v107;
                    }
                    while (!(*a3)((long long *)v98, &v170));
                    long long v109 = v170;
                    long long v110 = v171;
                    long long v111 = v172;
                    *(void *)(v103 + 48) = v173;
                    *(_OWORD *)(v103 + 16) = v110;
                    *(_OWORD *)(v103 + 32) = v111;
                    *(_OWORD *)unint64_t v103 = v109;
                  }
                }
                int64_t v95 = v96 - 1;
              }
              while (v96);
              int64_t v112 = v13 / 0x38uLL;
              unint64_t v113 = v162;
              do
              {
                unint64_t v163 = v113;
                uint64_t v114 = 0;
                long long v115 = *(_OWORD *)a1;
                long long v116 = *(_OWORD *)(a1 + 16);
                long long v117 = *(_OWORD *)(a1 + 32);
                uint64_t v169 = *(void *)(a1 + 48);
                long long v167 = v116;
                long long v168 = v117;
                long long v166 = v115;
                unint64_t v118 = a1;
                do
                {
                  uint64_t v119 = v118 + 56 * v114 + 56;
                  uint64_t v120 = (2 * v114) | 1;
                  uint64_t v121 = 2 * v114 + 2;
                  if (v121 < v112
                    && (*a3)((long long *)(v118 + 56 * v114 + 56), (long long *)(v118 + 56 * v114 + 112)))
                  {
                    v119 += 56;
                    uint64_t v120 = v121;
                  }
                  long long v122 = *(_OWORD *)v119;
                  long long v123 = *(_OWORD *)(v119 + 16);
                  long long v124 = *(_OWORD *)(v119 + 32);
                  *(void *)(v118 + 48) = *(void *)(v119 + 48);
                  *(_OWORD *)(v118 + 16) = v123;
                  *(_OWORD *)(v118 + 32) = v124;
                  *(_OWORD *)unint64_t v118 = v122;
                  unint64_t v118 = v119;
                  uint64_t v114 = v120;
                }
                while (v120 <= (uint64_t)((unint64_t)(v112 - 2) >> 1));
                long long v125 = (long long *)(v163 - 56);
                if (v119 == v163 - 56)
                {
                  unint64_t v113 = v163 - 56;
                  long long v145 = v166;
                  long long v146 = v167;
                  long long v147 = v168;
                  *(void *)(v119 + 48) = v169;
                  *(_OWORD *)(v119 + 16) = v146;
                  *(_OWORD *)(v119 + 32) = v147;
                  *(_OWORD *)uint64_t v119 = v145;
                }
                else
                {
                  long long v126 = *v125;
                  long long v127 = *(_OWORD *)(v163 - 40);
                  long long v128 = *(_OWORD *)(v163 - 24);
                  *(void *)(v119 + 48) = *(void *)(v163 - 8);
                  *(_OWORD *)(v119 + 16) = v127;
                  *(_OWORD *)(v119 + 32) = v128;
                  *(_OWORD *)uint64_t v119 = v126;
                  long long v129 = v166;
                  long long v130 = v167;
                  long long v131 = v168;
                  *(void *)(v163 - 8) = v169;
                  *(_OWORD *)(v163 - 40) = v130;
                  *(_OWORD *)(v163 - ++*(_DWORD *)(result + 24) = v131;
                  unint64_t v113 = v163 - 56;
                  *long long v125 = v129;
                  uint64_t v132 = v119 - a1 + 56;
                  if (v132 >= 57)
                  {
                    unint64_t v133 = (unint64_t)(0x6DB6DB6DB6DB6DB7 * (v132 >> 3) - 2) >> 1;
                    unint64_t v134 = a1 + 56 * v133;
                    if ((*a3)((long long *)v134, (long long *)v119))
                    {
                      long long v135 = *(_OWORD *)v119;
                      long long v136 = *(_OWORD *)(v119 + 16);
                      long long v137 = *(_OWORD *)(v119 + 32);
                      uint64_t v173 = *(void *)(v119 + 48);
                      long long v171 = v136;
                      long long v172 = v137;
                      long long v170 = v135;
                      do
                      {
                        uint64_t v138 = v134;
                        long long v139 = *(_OWORD *)v134;
                        long long v140 = *(_OWORD *)(v134 + 16);
                        long long v141 = *(_OWORD *)(v134 + 32);
                        *(void *)(v119 + 48) = *(void *)(v134 + 48);
                        *(_OWORD *)(v119 + 16) = v140;
                        *(_OWORD *)(v119 + 32) = v141;
                        *(_OWORD *)uint64_t v119 = v139;
                        if (!v133) {
                          break;
                        }
                        unint64_t v133 = (v133 - 1) >> 1;
                        unint64_t v134 = a1 + 56 * v133;
                        uint64_t v119 = v138;
                      }
                      while (((*a3)((long long *)v134, &v170) & 1) != 0);
                      long long v142 = v170;
                      long long v143 = v171;
                      long long v144 = v172;
                      *(void *)(v138 + 48) = v173;
                      *(_OWORD *)(v138 + 16) = v143;
                      *(_OWORD *)(v138 + 32) = v144;
                      *(_OWORD *)uint64_t v138 = v142;
                    }
                  }
                }
              }
              while (v112-- > 2);
            }
            return;
          }
          unint64_t v15 = v12 + 56 * (v14 >> 1);
          if ((unint64_t)v13 >= 0x1C01)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TAPFileBuilder::v2_top_level_prompt_info const&,TAPFileBuilder::v2_top_level_prompt_info const&),TAPFileBuilder::v2_top_level_prompt_info*>((long long *)v12, (long long *)(v12 + 56 * (v14 >> 1)), (long long *)v164, a3);
            uint64_t v16 = 56 * (v14 >> 1);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TAPFileBuilder::v2_top_level_prompt_info const&,TAPFileBuilder::v2_top_level_prompt_info const&),TAPFileBuilder::v2_top_level_prompt_info*>((long long *)(v12 + 56), (long long *)(v16 + v12 - 56), v161, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TAPFileBuilder::v2_top_level_prompt_info const&,TAPFileBuilder::v2_top_level_prompt_info const&),TAPFileBuilder::v2_top_level_prompt_info*>((long long *)(v12 + 112), (long long *)(v12 + 56 + v16), v160, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TAPFileBuilder::v2_top_level_prompt_info const&,TAPFileBuilder::v2_top_level_prompt_info const&),TAPFileBuilder::v2_top_level_prompt_info*>((long long *)(v16 + v12 - 56), (long long *)(v12 + v16), (long long *)(v12 + 56 + v16), a3);
            long long v17 = *(_OWORD *)v12;
            long long v18 = *(_OWORD *)(v12 + 16);
            long long v19 = *(_OWORD *)(v12 + 32);
            uint64_t v173 = *(void *)(v12 + 48);
            long long v171 = v18;
            long long v172 = v19;
            long long v170 = v17;
            long long v20 = *(_OWORD *)v15;
            long long v21 = *(_OWORD *)(v15 + 16);
            long long v22 = *(_OWORD *)(v15 + 32);
            *(void *)(v12 + 48) = *(void *)(v15 + 48);
            *(_OWORD *)(v12 + 16) = v21;
            *(_OWORD *)(v12 + 32) = v22;
            *(_OWORD *)unint64_t v12 = v20;
            long long v23 = v170;
            long long v24 = v171;
            long long v25 = v172;
            *(void *)(v15 + 48) = v173;
            *(_OWORD *)(v15 + 16) = v24;
            *(_OWORD *)(v15 + 32) = v25;
            *(_OWORD *)unint64_t v15 = v23;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TAPFileBuilder::v2_top_level_prompt_info const&,TAPFileBuilder::v2_top_level_prompt_info const&),TAPFileBuilder::v2_top_level_prompt_info*>((long long *)(v12 + 56 * (v14 >> 1)), (long long *)v12, (long long *)v164, a3);
          }
          --a4;
          a2 = v162;
          if (a5 & 1) != 0 || ((*a3)((long long *)(v12 - 56), (long long *)v12)) {
            break;
          }
          long long v48 = *(_OWORD *)v12;
          long long v49 = *(_OWORD *)(v12 + 16);
          long long v50 = *(_OWORD *)(v12 + 32);
          uint64_t v169 = *(void *)(v12 + 48);
          long long v167 = v49;
          long long v168 = v50;
          long long v166 = v48;
          if ((*a3)(&v166, (long long *)v164))
          {
            do
              v12 += 56;
            while (((*a3)(&v166, (long long *)v12) & 1) == 0);
          }
          else
          {
            long long v51 = (long long *)(v12 + 56);
            do
            {
              unint64_t v12 = (unint64_t)v51;
              if ((unint64_t)v51 >= v162) {
                break;
              }
              int v52 = (*a3)(&v166, v51);
              long long v51 = (long long *)(v12 + 56);
            }
            while (!v52);
          }
          unint64_t v53 = v162;
          if (v12 < v162)
          {
            unint64_t v53 = v162;
            do
              v53 -= 56;
            while (((*a3)(&v166, (long long *)v53) & 1) != 0);
          }
          while (v12 < v53)
          {
            long long v54 = *(_OWORD *)v12;
            long long v55 = *(_OWORD *)(v12 + 16);
            long long v56 = *(_OWORD *)(v12 + 32);
            uint64_t v173 = *(void *)(v12 + 48);
            long long v171 = v55;
            long long v172 = v56;
            long long v170 = v54;
            long long v57 = *(_OWORD *)v53;
            long long v58 = *(_OWORD *)(v53 + 16);
            long long v59 = *(_OWORD *)(v53 + 32);
            *(void *)(v12 + 48) = *(void *)(v53 + 48);
            *(_OWORD *)(v12 + 16) = v58;
            *(_OWORD *)(v12 + 32) = v59;
            *(_OWORD *)unint64_t v12 = v57;
            long long v60 = v170;
            long long v61 = v171;
            long long v62 = v172;
            *(void *)(v53 + 48) = v173;
            *(_OWORD *)(v53 + 16) = v61;
            *(_OWORD *)(v53 + 32) = v62;
            *(_OWORD *)unint64_t v53 = v60;
            do
              v12 += 56;
            while (!(*a3)(&v166, (long long *)v12));
            do
              v53 -= 56;
            while (((*a3)(&v166, (long long *)v53) & 1) != 0);
          }
          BOOL v63 = (long long *)(v12 - 56);
          BOOL v5 = v12 - 56 >= a1;
          BOOL v6 = v12 - 56 == a1;
          if (v12 - 56 != a1)
          {
            long long v64 = *v63;
            long long v65 = *(_OWORD *)(v12 - 40);
            long long v66 = *(_OWORD *)(v12 - 24);
            *(void *)(a1 + 48) = *(void *)(v12 - 8);
            *(_OWORD *)(a1 + 16) = v65;
            *(_OWORD *)(a1 + 32) = v66;
            *(_OWORD *)a1 = v64;
          }
          a5 = 0;
          long long v67 = v166;
          long long v68 = v167;
          long long v69 = v168;
          *(void *)(v12 - 8) = v169;
          *(_OWORD *)(v12 - 40) = v68;
          *(_OWORD *)(v12 - ++*(_DWORD *)(result + 24) = v69;
          *BOOL v63 = v67;
        }
        long long v26 = *(_OWORD *)v12;
        long long v27 = *(_OWORD *)(v12 + 16);
        long long v28 = *(_OWORD *)(v12 + 32);
        uint64_t v169 = *(void *)(v12 + 48);
        long long v167 = v27;
        long long v168 = v28;
        long long v166 = v26;
        uint64_t v29 = (long long *)v12;
        do
        {
          uint64_t v30 = (uint64_t)v29;
          uint64_t v29 = (long long *)((char *)v29 + 56);
        }
        while (((*a3)(v29, &v166) & 1) != 0);
        int v31 = (long long *)v162;
        if (v30 == v12)
        {
          int v31 = (long long *)v162;
          do
          {
            if (v29 >= v31) {
              break;
            }
            int v31 = (long long *)((char *)v31 - 56);
          }
          while (((*a3)(v31, &v166) & 1) == 0);
        }
        else
        {
          do
            int v31 = (long long *)((char *)v31 - 56);
          while (!(*a3)(v31, &v166));
        }
        if (v29 < v31)
        {
          unint64_t v32 = (unint64_t)v29;
          unsigned __int16 v33 = v31;
          do
          {
            long long v35 = *(_OWORD *)(v32 + 16);
            long long v170 = *(_OWORD *)v32;
            long long v34 = v170;
            long long v171 = v35;
            long long v172 = *(_OWORD *)(v32 + 32);
            long long v36 = v172;
            uint64_t v173 = *(void *)(v32 + 48);
            uint64_t v37 = v173;
            uint64_t v38 = *((void *)v33 + 6);
            long long v40 = v33[1];
            long long v39 = v33[2];
            *(_OWORD *)unint64_t v32 = *v33;
            *(_OWORD *)(v32 + 16) = v40;
            *(_OWORD *)(v32 + 32) = v39;
            *(void *)(v32 + 48) = v38;
            v33[1] = v35;
            v33[2] = v36;
            *((void *)v33 + 6) = v37;
            long long *v33 = v34;
            do
            {
              uint64_t v30 = v32;
              v32 += 56;
            }
            while (((*a3)((long long *)v32, &v166) & 1) != 0);
            do
              unsigned __int16 v33 = (long long *)((char *)v33 - 56);
            while (!(*a3)(v33, &v166));
          }
          while (v32 < (unint64_t)v33);
        }
        if (v30 != a1)
        {
          long long v41 = *(_OWORD *)v30;
          long long v42 = *(_OWORD *)(v30 + 16);
          long long v43 = *(_OWORD *)(v30 + 32);
          *(void *)(a1 + 48) = *(void *)(v30 + 48);
          *(_OWORD *)(a1 + 16) = v42;
          *(_OWORD *)(a1 + 32) = v43;
          *(_OWORD *)a1 = v41;
        }
        long long v44 = v166;
        long long v45 = v167;
        long long v46 = v168;
        *(void *)(v30 + 48) = v169;
        *(_OWORD *)(v30 + 16) = v45;
        *(_OWORD *)(v30 + 32) = v46;
        *(_OWORD *)uint64_t v30 = v44;
        if (v29 >= v31) {
          break;
        }
LABEL_31:
        std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(TAPFileBuilder::v2_top_level_prompt_info const&,TAPFileBuilder::v2_top_level_prompt_info const&),TAPFileBuilder::v2_top_level_prompt_info*,false>(a1, v30, a3, a4, a5 & 1);
        a5 = 0;
        unint64_t v12 = v30 + 56;
      }
      BOOL v47 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TAPFileBuilder::v2_top_level_prompt_info const&,TAPFileBuilder::v2_top_level_prompt_info const&),TAPFileBuilder::v2_top_level_prompt_info*>(a1, v30, a3);
      unint64_t v12 = v30 + 56;
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TAPFileBuilder::v2_top_level_prompt_info const&,TAPFileBuilder::v2_top_level_prompt_info const&),TAPFileBuilder::v2_top_level_prompt_info*>(v30 + 56, v162, a3))
      {
        break;
      }
      if (!v47) {
        goto LABEL_31;
      }
    }
    a2 = v30;
    if (!v47) {
      continue;
    }
    break;
  }
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TAPFileBuilder::v2_top_level_prompt_info const&,TAPFileBuilder::v2_top_level_prompt_info const&),TAPFileBuilder::v2_top_level_prompt_info*>(long long *a1, long long *a2, long long *a3, uint64_t (**a4)(long long *, long long *))
{
  char v8 = (*a4)(a2, a1);
  uint64_t result = (*a4)(a3, a2);
  if (v8)
  {
    if (result)
    {
      uint64_t v10 = *((void *)a1 + 6);
      long long v12 = a1[1];
      long long v11 = a1[2];
      long long v13 = *a1;
      long long v15 = a3[1];
      long long v14 = a3[2];
      long long v16 = *a3;
      *((void *)a1 + 6) = *((void *)a3 + 6);
      a1[1] = v15;
      a1[2] = v14;
      *a1 = v16;
    }
    else
    {
      uint64_t v31 = *((void *)a1 + 6);
      long long v33 = a1[1];
      long long v32 = a1[2];
      long long v34 = *a1;
      long long v36 = a2[1];
      long long v35 = a2[2];
      long long v37 = *a2;
      *((void *)a1 + 6) = *((void *)a2 + 6);
      a1[1] = v36;
      a1[2] = v35;
      *a1 = v37;
      *a2 = v34;
      a2[1] = v33;
      a2[2] = v32;
      *((void *)a2 + 6) = v31;
      uint64_t result = (*a4)(a3, a2);
      if (!result) {
        return result;
      }
      uint64_t v10 = *((void *)a2 + 6);
      long long v12 = a2[1];
      long long v11 = a2[2];
      long long v13 = *a2;
      long long v39 = a3[1];
      long long v38 = a3[2];
      long long v40 = *a3;
      *((void *)a2 + 6) = *((void *)a3 + 6);
      a2[1] = v39;
      a2[2] = v38;
      *a2 = v40;
    }
    *a3 = v13;
    a3[1] = v12;
    a3[2] = v11;
    *((void *)a3 + 6) = v10;
  }
  else if (result)
  {
    uint64_t v17 = *((void *)a2 + 6);
    long long v19 = a2[1];
    long long v18 = a2[2];
    long long v20 = *a2;
    long long v22 = a3[1];
    long long v21 = a3[2];
    long long v23 = *a3;
    *((void *)a2 + 6) = *((void *)a3 + 6);
    a2[1] = v22;
    a2[2] = v21;
    *a2 = v23;
    *a3 = v20;
    a3[1] = v19;
    a3[2] = v18;
    *((void *)a3 + 6) = v17;
    uint64_t result = (*a4)(a2, a1);
    if (result)
    {
      uint64_t v24 = *((void *)a1 + 6);
      long long v26 = a1[1];
      long long v25 = a1[2];
      long long v27 = *a1;
      long long v29 = a2[1];
      long long v28 = a2[2];
      long long v30 = *a2;
      *((void *)a1 + 6) = *((void *)a2 + 6);
      a1[1] = v29;
      a1[2] = v28;
      *a1 = v30;
      *a2 = v27;
      a2[1] = v26;
      a2[2] = v25;
      *((void *)a2 + 6) = v24;
    }
  }
  return result;
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TAPFileBuilder::v2_top_level_prompt_info const&,TAPFileBuilder::v2_top_level_prompt_info const&),TAPFileBuilder::v2_top_level_prompt_info*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (**a5)(long long *, long long *))
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TAPFileBuilder::v2_top_level_prompt_info const&,TAPFileBuilder::v2_top_level_prompt_info const&),TAPFileBuilder::v2_top_level_prompt_info*>((long long *)a1, (long long *)a2, (long long *)a3, a5);
  if ((*a5)((long long *)a4, (long long *)a3))
  {
    uint64_t v11 = *(void *)(a3 + 48);
    long long v13 = *(_OWORD *)(a3 + 16);
    long long v12 = *(_OWORD *)(a3 + 32);
    long long v14 = *(_OWORD *)a3;
    long long v16 = *(_OWORD *)(a4 + 16);
    long long v15 = *(_OWORD *)(a4 + 32);
    long long v17 = *(_OWORD *)a4;
    *(void *)(a3 + 48) = *(void *)(a4 + 48);
    *(_OWORD *)(a3 + 16) = v16;
    *(_OWORD *)(a3 + 32) = v15;
    *(_OWORD *)a3 = v17;
    *(_OWORD *)a4 = v14;
    *(_OWORD *)(a4 + 16) = v13;
    *(_OWORD *)(a4 + 32) = v12;
    *(void *)(a4 + 48) = v11;
    if ((*a5)((long long *)a3, (long long *)a2))
    {
      uint64_t v18 = *(void *)(a2 + 48);
      long long v20 = *(_OWORD *)(a2 + 16);
      long long v19 = *(_OWORD *)(a2 + 32);
      long long v21 = *(_OWORD *)a2;
      long long v23 = *(_OWORD *)(a3 + 16);
      long long v22 = *(_OWORD *)(a3 + 32);
      long long v24 = *(_OWORD *)a3;
      *(void *)(a2 + 48) = *(void *)(a3 + 48);
      *(_OWORD *)(a2 + 16) = v23;
      *(_OWORD *)(a2 + 32) = v22;
      *(_OWORD *)a2 = v24;
      *(_OWORD *)a3 = v21;
      *(_OWORD *)(a3 + 16) = v20;
      *(_OWORD *)(a3 + 32) = v19;
      *(void *)(a3 + 48) = v18;
      if ((*a5)((long long *)a2, (long long *)a1))
      {
        uint64_t v25 = *(void *)(a1 + 48);
        long long v26 = *(_OWORD *)(a1 + 16);
        __n128 result = *(__n128 *)(a1 + 32);
        long long v27 = *(_OWORD *)a1;
        long long v29 = *(_OWORD *)(a2 + 16);
        long long v28 = *(_OWORD *)(a2 + 32);
        long long v30 = *(_OWORD *)a2;
        *(void *)(a1 + 48) = *(void *)(a2 + 48);
        *(_OWORD *)(a1 + 16) = v29;
        *(_OWORD *)(a1 + 32) = v28;
        *(_OWORD *)a1 = v30;
        *(_OWORD *)a2 = v27;
        *(_OWORD *)(a2 + 16) = v26;
        *(__n128 *)(a2 + 32) = result;
        *(void *)(a2 + 48) = v25;
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TAPFileBuilder::v2_top_level_prompt_info const&,TAPFileBuilder::v2_top_level_prompt_info const&),TAPFileBuilder::v2_top_level_prompt_info*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, long long *a5, uint64_t (**a6)(long long *, long long *))
{
  __n128 v12 = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TAPFileBuilder::v2_top_level_prompt_info const&,TAPFileBuilder::v2_top_level_prompt_info const&),TAPFileBuilder::v2_top_level_prompt_info*>(a1, a2, a3, a4, a6);
  if (((unsigned int (*)(long long *, uint64_t, __n128))*a6)(a5, a4, v12))
  {
    uint64_t v14 = *(void *)(a4 + 48);
    long long v16 = *(_OWORD *)(a4 + 16);
    long long v15 = *(_OWORD *)(a4 + 32);
    long long v17 = *(_OWORD *)a4;
    long long v19 = a5[1];
    long long v18 = a5[2];
    long long v20 = *a5;
    *(void *)(a4 + 48) = *((void *)a5 + 6);
    *(_OWORD *)(a4 + 16) = v19;
    *(_OWORD *)(a4 + 32) = v18;
    *(_OWORD *)a4 = v20;
    *a5 = v17;
    a5[1] = v16;
    a5[2] = v15;
    *((void *)a5 + 6) = v14;
    if ((*a6)((long long *)a4, (long long *)a3))
    {
      uint64_t v21 = *(void *)(a3 + 48);
      long long v23 = *(_OWORD *)(a3 + 16);
      long long v22 = *(_OWORD *)(a3 + 32);
      long long v24 = *(_OWORD *)a3;
      long long v26 = *(_OWORD *)(a4 + 16);
      long long v25 = *(_OWORD *)(a4 + 32);
      long long v27 = *(_OWORD *)a4;
      *(void *)(a3 + 48) = *(void *)(a4 + 48);
      *(_OWORD *)(a3 + 16) = v26;
      *(_OWORD *)(a3 + 32) = v25;
      *(_OWORD *)a3 = v27;
      *(_OWORD *)a4 = v24;
      *(_OWORD *)(a4 + 16) = v23;
      *(_OWORD *)(a4 + 32) = v22;
      *(void *)(a4 + 48) = v21;
      if ((*a6)((long long *)a3, (long long *)a2))
      {
        uint64_t v28 = *(void *)(a2 + 48);
        long long v30 = *(_OWORD *)(a2 + 16);
        long long v29 = *(_OWORD *)(a2 + 32);
        long long v31 = *(_OWORD *)a2;
        long long v33 = *(_OWORD *)(a3 + 16);
        long long v32 = *(_OWORD *)(a3 + 32);
        long long v34 = *(_OWORD *)a3;
        *(void *)(a2 + 48) = *(void *)(a3 + 48);
        *(_OWORD *)(a2 + 16) = v33;
        *(_OWORD *)(a2 + 32) = v32;
        *(_OWORD *)a2 = v34;
        *(_OWORD *)a3 = v31;
        *(_OWORD *)(a3 + 16) = v30;
        *(_OWORD *)(a3 + 32) = v29;
        *(void *)(a3 + 48) = v28;
        if ((*a6)((long long *)a2, (long long *)a1))
        {
          uint64_t v35 = *(void *)(a1 + 48);
          long long v36 = *(_OWORD *)(a1 + 16);
          __n128 result = *(__n128 *)(a1 + 32);
          long long v37 = *(_OWORD *)a1;
          long long v39 = *(_OWORD *)(a2 + 16);
          long long v38 = *(_OWORD *)(a2 + 32);
          long long v40 = *(_OWORD *)a2;
          *(void *)(a1 + 48) = *(void *)(a2 + 48);
          *(_OWORD *)(a1 + 16) = v39;
          *(_OWORD *)(a1 + 32) = v38;
          *(_OWORD *)a1 = v40;
          *(_OWORD *)a2 = v37;
          *(_OWORD *)(a2 + 16) = v36;
          *(__n128 *)(a2 + 32) = result;
          *(void *)(a2 + 48) = v35;
        }
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TAPFileBuilder::v2_top_level_prompt_info const&,TAPFileBuilder::v2_top_level_prompt_info const&),TAPFileBuilder::v2_top_level_prompt_info*>(uint64_t a1, uint64_t a2, uint64_t (**a3)(long long *, long long *))
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  uint64_t v6 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0x6DB6DB6DB6DB6DB7 * v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      char v8 = (long long *)(a2 - 56);
      if (!(*a3)((long long *)(a2 - 56), (long long *)a1)) {
        return 1;
      }
      uint64_t v9 = *(void *)(a1 + 48);
      long long v11 = *(_OWORD *)(a1 + 16);
      long long v10 = *(_OWORD *)(a1 + 32);
      long long v12 = *(_OWORD *)a1;
      long long v14 = *(_OWORD *)(a2 - 40);
      long long v13 = *(_OWORD *)(a2 - 24);
      long long v15 = *v8;
      *(void *)(a1 + 48) = *(void *)(a2 - 8);
      *(_OWORD *)(a1 + 16) = v14;
      *(_OWORD *)(a1 + 32) = v13;
      *(_OWORD *)a1 = v15;
      long long *v8 = v12;
      *(_OWORD *)(a2 - 40) = v11;
      *(_OWORD *)(a2 - ++*(_DWORD *)(result + 24) = v10;
      BOOL result = 1;
      *(void *)(a2 - 8) = v9;
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TAPFileBuilder::v2_top_level_prompt_info const&,TAPFileBuilder::v2_top_level_prompt_info const&),TAPFileBuilder::v2_top_level_prompt_info*>((long long *)a1, (long long *)(a1 + 56), (long long *)(a2 - 56), a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TAPFileBuilder::v2_top_level_prompt_info const&,TAPFileBuilder::v2_top_level_prompt_info const&),TAPFileBuilder::v2_top_level_prompt_info*>(a1, a1 + 56, a1 + 112, a2 - 56, a3);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TAPFileBuilder::v2_top_level_prompt_info const&,TAPFileBuilder::v2_top_level_prompt_info const&),TAPFileBuilder::v2_top_level_prompt_info*>(a1, a1 + 56, a1 + 112, a1 + 168, (long long *)(a2 - 56), a3);
      return 1;
    default:
      long long v16 = (long long *)(a1 + 112);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TAPFileBuilder::v2_top_level_prompt_info const&,TAPFileBuilder::v2_top_level_prompt_info const&),TAPFileBuilder::v2_top_level_prompt_info*>((long long *)a1, (long long *)(a1 + 56), (long long *)(a1 + 112), a3);
      uint64_t v17 = a1 + 168;
      if (a1 + 168 == a2) {
        return 1;
      }
      uint64_t v18 = 0;
      int v19 = 0;
      break;
  }
  while (1)
  {
    if ((*a3)((long long *)v17, v16))
    {
      long long v20 = *(_OWORD *)(v17 + 16);
      long long v26 = *(_OWORD *)v17;
      long long v27 = v20;
      long long v28 = *(_OWORD *)(v17 + 32);
      uint64_t v29 = *(void *)(v17 + 48);
      uint64_t v21 = v18;
      while (1)
      {
        uint64_t v22 = a1 + v21;
        long long v23 = *(_OWORD *)(a1 + v21 + 128);
        *(_OWORD *)(v22 + 168) = *(_OWORD *)(a1 + v21 + 112);
        *(_OWORD *)(v22 + 184) = v23;
        *(_OWORD *)(v22 + 200) = *(_OWORD *)(a1 + v21 + 144);
        *(void *)(v22 + 216) = *(void *)(a1 + v21 + 160);
        if (v21 == -112) {
          break;
        }
        v21 -= 56;
        if (((*a3)(&v26, (long long *)(v22 + 56)) & 1) == 0)
        {
          uint64_t v24 = a1 + v21 + 168;
          goto LABEL_12;
        }
      }
      uint64_t v24 = a1;
LABEL_12:
      long long v25 = v27;
      *(_OWORD *)uint64_t v24 = v26;
      *(_OWORD *)(v24 + 16) = v25;
      *(_OWORD *)(v24 + 32) = v28;
      *(void *)(v24 + 48) = v29;
      if (++v19 == 8) {
        return v17 + 56 == a2;
      }
    }
    long long v16 = (long long *)v17;
    v18 += 56;
    v17 += 56;
    if (v17 == a2) {
      return 1;
    }
  }
}

BOOL TAPExtractor::compare_v2_prompts_by_boundary_conditions(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = boundary_type_to_priority_[*(unsigned __int8 *)(a1 + 21)];
  unsigned int v3 = boundary_type_to_priority_[*(unsigned __int8 *)(a2 + 21)];
  if (v2 > v3) {
    return 1;
  }
  return v2 == v3
      && boundary_type_to_priority_[*(unsigned __int8 *)(a1 + 20)] > boundary_type_to_priority_[*(unsigned __int8 *)(a2 + 20)];
}

uint64_t std::__tree<std::__value_type<std::string,Emotion>,std::__map_value_compare<std::string,std::__value_type<std::string,Emotion>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Emotion>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy(*(char **)(a1 + 16));
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 16);
    if (v3)
    {
      do
      {
        uint64_t v2 = v3;
        uint64_t v3 = *(void *)(v3 + 16);
      }
      while (v3);
      *(void *)(a1 + 8) = v2;
    }
    std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy((char *)v2);
  }
  return a1;
}

void std::vector<std::vector<std::vector<std::pair<unsigned short,unsigned short>>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    size_t v4 = (void **)v1[1];
    BOOL v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        uint64_t v6 = v4;
        std::vector<std::vector<long long>>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      BOOL v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<std::unordered_multimap<unsigned int,std::pair<unsigned short,unsigned short>>>::resize(char **a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = v3 - *a1;
  unint64_t v5 = 0xCCCCCCCCCCCCCCCDLL * (v4 >> 3);
  if (v5 > 7)
  {
    if (v4 != 320)
    {
      long long v28 = v2 + 320;
      while (v3 != v28)
      {
        v3 -= 40;
        std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v3);
      }
      a1[1] = v28;
    }
  }
  else
  {
    uint64_t v6 = a1[2];
    if (0xCCCCCCCCCCCCCCCDLL * ((v6 - v3) >> 3) >= 8 - v5)
    {
      uint64_t v29 = &v3[40 * (8 - v5)];
      do
      {
        *(_OWORD *)uint64_t v3 = 0uLL;
        *((_OWORD *)v3 + 1) = 0uLL;
        *((_DWORD *)v3 + 8) = 1065353216;
        v3 += 40;
      }
      while (v3 != v29);
      a1[1] = v29;
    }
    else
    {
      unint64_t v7 = 0xCCCCCCCCCCCCCCCDLL * ((v6 - v2) >> 3);
      uint64_t v8 = 2 * v7;
      if (2 * v7 <= 8) {
        uint64_t v8 = 8;
      }
      if (v7 >= 0x333333333333333) {
        unint64_t v9 = 0x666666666666666;
      }
      else {
        unint64_t v9 = v8;
      }
      if (v9 > 0x666666666666666) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      long long v10 = (char *)operator new(40 * v9);
      long long v11 = &v10[40 * v5];
      long long v12 = v10 + 320;
      long long v13 = v11 + 32;
      unint64_t v14 = v5 - 8;
      do
      {
        *((_OWORD *)v13 - 2) = 0uLL;
        *((_OWORD *)v13 - 1) = 0uLL;
        _DWORD *v13 = 1065353216;
        v13 += 10;
      }
      while (!__CFADD__(v14++, 1));
      long long v16 = &v10[40 * v9];
      uint64_t v17 = *a1;
      if (v3 != *a1)
      {
        uint64_t v18 = 0;
        do
        {
          int v19 = &v11[v18];
          long long v20 = &v3[v18];
          uint64_t v21 = *(void *)&v3[v18 - 40];
          *((void *)v20 - 5) = 0;
          *((void *)v19 - 5) = v21;
          unint64_t v22 = *(void *)&v3[v18 - 32];
          *((void *)v19 - 4) = v22;
          *((void *)v20 - 4) = 0;
          uint64_t v23 = *(void *)&v3[v18 - 24];
          *((void *)v19 - 3) = v23;
          uint64_t v24 = (uint64_t)&v11[v18 - 24];
          uint64_t v25 = *(void *)&v3[v18 - 16];
          *(void *)(v24 + 8) = v25;
          *(_DWORD *)(v24 + 16) = *(_DWORD *)&v3[v18 - 8];
          if (v25)
          {
            unint64_t v26 = *(void *)(v23 + 8);
            if ((v22 & (v22 - 1)) != 0)
            {
              if (v26 >= v22) {
                v26 %= v22;
              }
            }
            else
            {
              v26 &= v22 - 1;
            }
            *(void *)(v21 + 8 * v26) = v24;
            *(void *)&v3[v18 - 24] = 0;
            *(void *)&v3[v18 - 16] = 0;
          }
          v18 -= 40;
        }
        while (&v3[v18] != v17);
        v11 += v18;
        uint64_t v3 = *a1;
      }
      uint64_t v27 = (uint64_t)a1[1];
      *a1 = v11;
      a1[1] = v12;
      a1[2] = v16;
      while ((char *)v27 != v3)
        uint64_t v27 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v27 - 40);
      if (v3)
      {
        operator delete(v3);
      }
    }
  }
}

void std::__hash_table<std::__hash_value_type<unsigned int,std::pair<unsigned short,unsigned short>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::pair<unsigned short,unsigned short>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::pair<unsigned short,unsigned short>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::pair<unsigned short,unsigned short>>>>::__emplace_multi<std::pair<unsigned int,std::pair<unsigned short,unsigned short>> &>(uint64_t a1, double a2)
{
  uint64_t v3 = (double *)operator new(0x18uLL);
  v3[2] = a2;
  *uint64_t v3 = 0.0;
  *((void *)v3 + 1) = LODWORD(a2);
  unint64_t v4 = *(void *)(a1 + 8);
  float v5 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v6 = *(float *)(a1 + 32);
  if (!v4 || (float)(v6 * (float)v4) < v5)
  {
    BOOL v7 = 1;
    if (v4 >= 3) {
      BOOL v7 = (v4 & (v4 - 1)) != 0;
    }
    unint64_t v8 = v7 | (2 * v4);
    unint64_t v9 = vcvtps_u32_f32(v5 / v6);
    if (v8 <= v9) {
      int8x8_t prime = (int8x8_t)v9;
    }
    else {
      int8x8_t prime = (int8x8_t)v8;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v4 = *(void *)(a1 + 8);
    }
    if (*(void *)&prime > v4) {
      goto LABEL_92;
    }
    if (*(void *)&prime >= v4) {
      goto LABEL_43;
    }
    unint64_t v17 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v4 < 3 || (uint8x8_t v18 = (uint8x8_t)vcnt_s8((int8x8_t)v4), v18.i16[0] = vaddlv_u8(v18), v18.u32[0] > 1uLL))
    {
      unint64_t v17 = std::__next_prime(v17);
    }
    else
    {
      uint64_t v19 = 1 << -(char)__clz(v17 - 1);
      if (v17 >= 2) {
        unint64_t v17 = v19;
      }
    }
    if (*(void *)&prime <= v17) {
      int8x8_t prime = (int8x8_t)v17;
    }
    if (*(void *)&prime >= v4)
    {
      unint64_t v4 = *(void *)(a1 + 8);
      goto LABEL_43;
    }
    if (prime)
    {
LABEL_92:
      if (*(void *)&prime >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      long long v11 = operator new(8 * *(void *)&prime);
      long long v12 = *(void **)a1;
      *(void *)a1 = v11;
      if (v12) {
        operator delete(v12);
      }
      uint64_t v13 = 0;
      *(int8x8_t *)(a1 + 8) = prime;
      do
        *(void *)(*(void *)a1 + 8 * v13++) = 0;
      while (*(void *)&prime != v13);
      unint64_t v14 = *(uint64_t ***)(a1 + 16);
      if (v14)
      {
        unint64_t v15 = (unint64_t)v14[1];
        uint8x8_t v16 = (uint8x8_t)vcnt_s8(prime);
        v16.i16[0] = vaddlv_u8(v16);
        if (v16.u32[0] > 1uLL)
        {
          if (v15 >= *(void *)&prime) {
            v15 %= *(void *)&prime;
          }
        }
        else
        {
          v15 &= *(void *)&prime - 1;
        }
        *(void *)(*(void *)a1 + 8 * v15) = a1 + 16;
        for (unsigned int i = *v14; *v14; unsigned int i = *v14)
        {
          unint64_t v21 = i[1];
          if (v16.u32[0] > 1uLL)
          {
            if (v21 >= *(void *)&prime) {
              v21 %= *(void *)&prime;
            }
          }
          else
          {
            v21 &= *(void *)&prime - 1;
          }
          if (v21 == v15)
          {
            unint64_t v14 = (uint64_t **)i;
          }
          else
          {
            unint64_t v22 = i;
            if (*(void *)(*(void *)a1 + 8 * v21))
            {
              do
              {
                uint64_t v23 = v22;
                unint64_t v22 = (uint64_t *)*v22;
              }
              while (v22 && *((_DWORD *)i + 4) == *((_DWORD *)v22 + 4));
              char *v14 = v22;
              *uint64_t v23 = **(void **)(*(void *)a1 + 8 * v21);
              **(void **)(*(void *)a1 + 8 * v21) = i;
            }
            else
            {
              *(void *)(*(void *)a1 + 8 * v21) = v14;
              unint64_t v14 = (uint64_t **)i;
              unint64_t v15 = v21;
            }
          }
        }
      }
      unint64_t v4 = (unint64_t)prime;
    }
    else
    {
      long long v36 = *(void **)a1;
      *(void *)a1 = 0;
      if (v36) {
        operator delete(v36);
      }
      unint64_t v4 = 0;
      *(void *)(a1 + 8) = 0;
    }
  }
LABEL_43:
  uint8x8_t v24 = (uint8x8_t)vcnt_s8((int8x8_t)v4);
  v24.i16[0] = vaddlv_u8(v24);
  if (v24.u32[0] > 1uLL)
  {
    unint64_t v25 = LODWORD(a2);
    if (v4 <= LODWORD(a2)) {
      unint64_t v25 = LODWORD(a2) % v4;
    }
  }
  else
  {
    unint64_t v25 = (v4 - 1) & LODWORD(a2);
  }
  unint64_t v26 = *(void **)a1;
  uint64_t v27 = *(double ***)(*(void *)a1 + 8 * v25);
  if (v27)
  {
    int v28 = 0;
    do
    {
      uint64_t v29 = v27;
      uint64_t v27 = (double **)*v27;
      if (!v27) {
        break;
      }
      unint64_t v30 = (unint64_t)v27[1];
      if (v24.u32[0] > 1uLL)
      {
        unint64_t v31 = (unint64_t)v27[1];
        if (v30 >= v4) {
          unint64_t v31 = v30 % v4;
        }
      }
      else
      {
        unint64_t v31 = v30 & (v4 - 1);
      }
      if (v31 != v25) {
        break;
      }
      BOOL v32 = v30 == LODWORD(a2) && *((_DWORD *)v27 + 4) == *((_DWORD *)v3 + 4);
      int v33 = v28 & !v32;
      v28 |= v32;
    }
    while (v33 != 1);
  }
  else
  {
    uint64_t v29 = 0;
  }
  unint64_t v34 = *((void *)v3 + 1);
  if (v24.u32[0] > 1uLL)
  {
    if (v34 >= v4) {
      v34 %= v4;
    }
  }
  else
  {
    v34 &= v4 - 1;
  }
  if (!v29)
  {
    *uint64_t v3 = *(double *)(a1 + 16);
    *(void *)(a1 + 16) = v3;
    v26[v34] = a1 + 16;
    if (!*(void *)v3) {
      goto LABEL_79;
    }
    unint64_t v35 = *(void *)(*(void *)v3 + 8);
    if (v24.u32[0] > 1uLL)
    {
      if (v35 >= v4) {
        v35 %= v4;
      }
    }
    else
    {
      v35 &= v4 - 1;
    }
LABEL_78:
    *(void *)(*(void *)a1 + 8 * v35) = v3;
    goto LABEL_79;
  }
  *(void *)uint64_t v3 = *v29;
  *uint64_t v29 = v3;
  if (*(void *)v3)
  {
    unint64_t v35 = *(void *)(*(void *)v3 + 8);
    if (v24.u32[0] > 1uLL)
    {
      if (v35 >= v4) {
        v35 %= v4;
      }
    }
    else
    {
      v35 &= v4 - 1;
    }
    if (v35 != v34) {
      goto LABEL_78;
    }
  }
LABEL_79:
  ++*(void *)(a1 + 24);
}

void sub_20D47868C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void TAPExtractor::TAPExtractor(TAPExtractor *this, const MemoryMap *a2, int a3)
{
  *((_OWORD *)this + 1) = 0u;
  *(void *)this = &off_26C200150;
  *((void *)this + 1) = (char *)this + 16;
  unint64_t v118 = (char *)this + 16;
  *(_OWORD *)((char *)this + 40) = 0u;
  long long v117 = (char *)this + 40;
  *((void *)this + 4) = (char *)this + 40;
  *(_OWORD *)((char *)this + 56) = 0u;
  long long v116 = (char *)this + 56;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((void *)this + 15) = 0;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 248) = 0u;
  *((void *)this + 43) = 0;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  *(_OWORD *)((char *)this + 312) = 0u;
  long long v115 = (char *)this + 136;
  *(_OWORD *)((char *)this + 328) = 0u;
  *(_OWORD *)((char *)this + 456) = 0u;
  *((_OWORD *)this + 23) = 0u;
  *((_OWORD *)this + ++*(_DWORD *)(result + 24) = 0u;
  uint64_t v114 = (char *)this + 456;
  *((void *)this + 56) = (char *)this + 456;
  float v5 = (std::vector<std::string> *)((char *)this + 472);
  *((void *)this + 61) = 0;
  *(_OWORD *)((char *)this + 472) = 0u;
  *(_OWORD *)((char *)this + 520) = 0u;
  *(_OWORD *)((char *)this + 536) = 0u;
  unint64_t v113 = (char *)this + 504;
  *(_OWORD *)((char *)this + 504) = 0u;
  *((void *)this + 69) = 4;
  *((void *)this + 73) = 0;
  long long v111 = (char *)this + 568;
  *(_OWORD *)((char *)this + 568) = 0u;
  *((_DWORD *)this + 140) = a3;
  *((unsigned char *)this + 440) = 0;
  uint64_t v6 = *(void *)a2;
  uint64_t v7 = *((void *)a2 + 1);
  if (v7)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
    unint64_t v8 = (std::__shared_weak_count *)*((void *)this + 47);
    int64_t v112 = (char *)this + 376;
    *((void *)this + 46) = v6;
    *((void *)this + 47) = v7;
    if (v8)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
      uint64_t v6 = *((void *)this + 46);
    }
  }
  else
  {
    int64_t v112 = (char *)this + 376;
    *((void *)this + 46) = v6;
    *((void *)this + 47) = 0;
  }
  *((_OWORD *)this + ++*(_DWORD *)(result + 24) = *((_OWORD *)a2 + 1);
  if (v6)
  {
    unint64_t v9 = (unsigned __int16 *)*((void *)this + 48);
    *((void *)this + 44) = v9;
    int v10 = v9[9];
    *((_WORD *)this + 248) = v10;
    if (v10 == 2)
    {
      uint64_t v11 = 24;
      *((void *)this + 50) = 48;
      *((void *)this + 45) = v9;
      if (v9[10] == 2)
      {
        *((void *)this + 69) = 12;
        uint64_t v11 = 24;
      }
    }
    else
    {
      uint64_t v11 = 20;
      *((void *)this + 50) = 40;
      if (!v10)
      {
        if (Diagnostics_GetLogObject(void)::onceToken != -1) {
          dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
        }
        unint64_t v21 = Diagnostics_GetLogObject(void)::__profile_log_default;
        if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
        {
          LOWORD(buf.__first_) = 0;
          _os_log_impl(&dword_20CD80000, v21, OS_LOG_TYPE_ERROR, "Running obsolete version of prompts, skipping prompts instead ", (uint8_t *)&buf, 2u);
        }
        uint64_t v23 = "Running obsolete version of prompts, skipping prompts instead ";
LABEL_136:
        Diagnostics::log(3, v23, v22, v111, v112, v113, v114, v115, v116, v117, v118);
        return;
      }
    }
    long long v12 = (void *)((char *)this + 280);
    *((unsigned char *)this + 440) = 1;
    *((void *)this + 16) = &v9[v11];
    *((void *)this + 50) = ((v11 * 2) | 4) + 4 * v9[8];
    std::string::basic_string[abi:ne180100]<0>(__p, "sapx0282-1");
    unint64_t v14 = *((void *)this + 60);
    unint64_t v13 = *((void *)this + 61);
    if (v14 >= v13)
    {
      unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - (unint64_t)v5->__begin_) >> 3);
      unint64_t v17 = v16 + 1;
      if (v16 + 1 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - (unint64_t)v5->__begin_) >> 3);
      if (2 * v18 > v17) {
        unint64_t v17 = 2 * v18;
      }
      if (v18 >= 0x555555555555555) {
        unint64_t v19 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v19 = v17;
      }
      buf.__end_cap_.__value_ = (std::allocator<std::string> *)((char *)this + 488);
      if (v19) {
        long long v20 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)this + 488, v19);
      }
      else {
        long long v20 = 0;
      }
      uint8x8_t v24 = v20 + v16;
      buf.__first_ = v20;
      buf.__begin_ = v24;
      buf.__end_cap_.__value_ = &v20[v19];
      long long v25 = *(_OWORD *)__p;
      v24->__r_.__value_.__r.__words[2] = v120;
      *(_OWORD *)&v24->__r_.__value_.__l.__data_ = v25;
      __p[1] = 0;
      std::string::size_type v120 = 0;
      __p[0] = 0;
      buf.__end_ = v24 + 1;
      std::vector<std::string>::__swap_out_circular_buffer(v5, &buf);
      uint64_t v26 = *((void *)this + 60);
      std::__split_buffer<std::string>::~__split_buffer(&buf);
      int v27 = SHIBYTE(v120);
      *((void *)this + 60) = v26;
      if (v27 < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      long long v15 = *(_OWORD *)__p;
      *(void *)(v14 + 16) = v120;
      *(_OWORD *)unint64_t v14 = v15;
      *((void *)this + 60) = v14 + 24;
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "sanv0128-0");
    unint64_t v29 = *((void *)this + 60);
    unint64_t v28 = *((void *)this + 61);
    if (v29 >= v28)
    {
      unint64_t v31 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v29 - (unint64_t)v5->__begin_) >> 3);
      unint64_t v32 = v31 + 1;
      if (v31 + 1 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v33 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v28 - (unint64_t)v5->__begin_) >> 3);
      if (2 * v33 > v32) {
        unint64_t v32 = 2 * v33;
      }
      if (v33 >= 0x555555555555555) {
        unint64_t v34 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v34 = v32;
      }
      buf.__end_cap_.__value_ = (std::allocator<std::string> *)((char *)this + 488);
      if (v34) {
        unint64_t v35 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)this + 488, v34);
      }
      else {
        unint64_t v35 = 0;
      }
      long long v36 = v35 + v31;
      buf.__first_ = v35;
      buf.__begin_ = v36;
      buf.__end_cap_.__value_ = &v35[v34];
      long long v37 = *(_OWORD *)__p;
      v36->__r_.__value_.__r.__words[2] = v120;
      *(_OWORD *)&v36->__r_.__value_.__l.__data_ = v37;
      __p[1] = 0;
      std::string::size_type v120 = 0;
      __p[0] = 0;
      buf.__end_ = v36 + 1;
      std::vector<std::string>::__swap_out_circular_buffer(v5, &buf);
      uint64_t v38 = *((void *)this + 60);
      std::__split_buffer<std::string>::~__split_buffer(&buf);
      int v39 = SHIBYTE(v120);
      *((void *)this + 60) = v38;
      if (v39 < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      long long v30 = *(_OWORD *)__p;
      *(void *)(v29 + 16) = v120;
      *(_OWORD *)unint64_t v29 = v30;
      *((void *)this + 60) = v29 + 24;
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "sapx0246-1");
    unint64_t v41 = *((void *)this + 60);
    unint64_t v40 = *((void *)this + 61);
    if (v41 >= v40)
    {
      unint64_t v43 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v41 - (unint64_t)v5->__begin_) >> 3);
      unint64_t v44 = v43 + 1;
      if (v43 + 1 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v45 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v40 - (unint64_t)v5->__begin_) >> 3);
      if (2 * v45 > v44) {
        unint64_t v44 = 2 * v45;
      }
      if (v45 >= 0x555555555555555) {
        unint64_t v46 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v46 = v44;
      }
      buf.__end_cap_.__value_ = (std::allocator<std::string> *)((char *)this + 488);
      if (v46) {
        BOOL v47 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)this + 488, v46);
      }
      else {
        BOOL v47 = 0;
      }
      long long v48 = v47 + v43;
      buf.__first_ = v47;
      buf.__begin_ = v48;
      buf.__end_cap_.__value_ = &v47[v46];
      long long v49 = *(_OWORD *)__p;
      v48->__r_.__value_.__r.__words[2] = v120;
      *(_OWORD *)&v48->__r_.__value_.__l.__data_ = v49;
      __p[1] = 0;
      std::string::size_type v120 = 0;
      __p[0] = 0;
      buf.__end_ = v48 + 1;
      std::vector<std::string>::__swap_out_circular_buffer(v5, &buf);
      uint64_t v50 = *((void *)this + 60);
      std::__split_buffer<std::string>::~__split_buffer(&buf);
      int v51 = SHIBYTE(v120);
      *((void *)this + 60) = v50;
      if (v51 < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      long long v42 = *(_OWORD *)__p;
      *(void *)(v41 + 16) = v120;
      *(_OWORD *)unint64_t v41 = v42;
      *((void *)this + 60) = v41 + 24;
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "sdom0624-0");
    unint64_t v53 = *((void *)this + 60);
    unint64_t v52 = *((void *)this + 61);
    if (v53 >= v52)
    {
      unint64_t v55 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v53 - (unint64_t)v5->__begin_) >> 3);
      unint64_t v56 = v55 + 1;
      if (v55 + 1 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v57 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v52 - (unint64_t)v5->__begin_) >> 3);
      if (2 * v57 > v56) {
        unint64_t v56 = 2 * v57;
      }
      if (v57 >= 0x555555555555555) {
        unint64_t v58 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v58 = v56;
      }
      buf.__end_cap_.__value_ = (std::allocator<std::string> *)((char *)this + 488);
      if (v58) {
        long long v59 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)this + 488, v58);
      }
      else {
        long long v59 = 0;
      }
      long long v60 = v59 + v55;
      buf.__first_ = v59;
      buf.__begin_ = v60;
      buf.__end_cap_.__value_ = &v59[v58];
      long long v61 = *(_OWORD *)__p;
      v60->__r_.__value_.__r.__words[2] = v120;
      *(_OWORD *)&v60->__r_.__value_.__l.__data_ = v61;
      __p[1] = 0;
      std::string::size_type v120 = 0;
      __p[0] = 0;
      buf.__end_ = v60 + 1;
      std::vector<std::string>::__swap_out_circular_buffer(v5, &buf);
      uint64_t v62 = *((void *)this + 60);
      std::__split_buffer<std::string>::~__split_buffer(&buf);
      int v63 = SHIBYTE(v120);
      *((void *)this + 60) = v62;
      if (v63 < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      long long v54 = *(_OWORD *)__p;
      *(void *)(v53 + 16) = v120;
      *(_OWORD *)unint64_t v53 = v54;
      *((void *)this + 60) = v53 + 24;
    }
    int v64 = *((__int16 *)this + 248);
    if (v64 <= 1)
    {
      unint64_t v65 = *((void *)this + 50);
      if (v65 < *(void *)(*((void *)this + 44) + 24))
      {
        long long v66 = (unint64_t *)*((void *)this + 11);
        do
        {
          unint64_t v67 = *((void *)this + 48) + v65;
          unint64_t v68 = *((void *)this + 12);
          if ((unint64_t)v66 >= v68)
          {
            long long v70 = (void *)*((void *)this + 10);
            uint64_t v71 = v66 - v70;
            unint64_t v72 = v71 + 1;
            if ((unint64_t)(v71 + 1) >> 61) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v73 = v68 - (void)v70;
            if (v73 >> 2 > v72) {
              unint64_t v72 = v73 >> 2;
            }
            if ((unint64_t)v73 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v74 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v74 = v72;
            }
            if (v74)
            {
              if (v74 >> 61) {
                goto LABEL_139;
              }
              long long v75 = (char *)operator new(8 * v74);
            }
            else
            {
              long long v75 = 0;
            }
            long long v76 = &v75[8 * v71];
            *(void *)long long v76 = v67;
            long long v69 = (unint64_t *)(v76 + 8);
            if (v66 != v70)
            {
              do
              {
                uint64_t v77 = *--v66;
                *((void *)v76 - 1) = v77;
                v76 -= 8;
              }
              while (v66 != v70);
              long long v66 = (unint64_t *)*((void *)this + 10);
            }
            *((void *)this + 10) = v76;
            *((void *)this + 11) = v69;
            *((void *)this + 12) = &v75[8 * v74];
            if (v66)
            {
              operator delete(v66);
              unint64_t v65 = *((void *)this + 50);
            }
          }
          else
          {
            unint64_t *v66 = v67;
            long long v69 = v66 + 1;
          }
          *((void *)this + 11) = v69;
          v65 += 36 * *(unsigned __int16 *)(v67 + 2) + 4;
          *((void *)this + 50) = v65;
          long long v66 = v69;
        }
        while (v65 < *(void *)(*((void *)this + 44) + 24));
      }
      std::vector<std::unordered_multimap<unsigned int,std::pair<unsigned short,unsigned short>>>::resize((char **)this + 35);
      uint64_t v78 = *((void *)this + 10);
      uint64_t v79 = *((void *)this + 11);
      if (v79 != v78)
      {
        uint64_t v80 = 0;
        unsigned __int16 v81 = 0;
        do
        {
          uint64_t v82 = *(unsigned __int16 **)(v78 + 8 * v80);
          if (v82[1])
          {
            unint64_t v83 = 0;
            unint64_t v84 = (unint64_t)v81 << 32;
            uint64_t v85 = 10;
            do
            {
              if (*v82 - 1 >= 7) {
                unsigned int v86 = 7;
              }
              else {
                unsigned int v86 = (unsigned __int16)(*v82 - 1);
              }
              std::__hash_table<std::__hash_value_type<unsigned int,std::pair<unsigned short,unsigned short>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::pair<unsigned short,unsigned short>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::pair<unsigned short,unsigned short>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::pair<unsigned short,unsigned short>>>>::__emplace_multi<std::pair<unsigned int,std::pair<unsigned short,unsigned short>> &>(*v12 + 40 * v86, COERCE_DOUBLE(v84 + *(unsigned int *)&v82[v85]));
              ++v83;
              uint64_t v78 = *((void *)this + 10);
              uint64_t v82 = *(unsigned __int16 **)(v78 + 8 * v80);
              v84 += 0x1000000000000;
              v85 += 18;
            }
            while (v83 < v82[1]);
            uint64_t v79 = *((void *)this + 11);
          }
          uint64_t v80 = ++v81;
        }
        while (v81 < (unint64_t)((v79 - v78) >> 3));
      }
LABEL_130:
      unsigned int v109 = time(0);
      srand(v109);
      return;
    }
    if (v64 == 2)
    {
      unint64_t v87 = *((void *)this + 50);
      if (v87 < *(void *)(*((void *)this + 44) + 24))
      {
        uint64_t v88 = (unint64_t *)*((void *)this + 14);
        do
        {
          unint64_t v89 = *((void *)this + 48) + v87;
          unint64_t v90 = *((void *)this + 15);
          if ((unint64_t)v88 >= v90)
          {
            long long v92 = (void *)*((void *)this + 13);
            uint64_t v93 = v88 - v92;
            unint64_t v94 = v93 + 1;
            if ((unint64_t)(v93 + 1) >> 61) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v95 = v90 - (void)v92;
            if (v95 >> 2 > v94) {
              unint64_t v94 = v95 >> 2;
            }
            if ((unint64_t)v95 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v96 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v96 = v94;
            }
            if (v96)
            {
              if (v96 >> 61) {
LABEL_139:
              }
                std::__throw_bad_array_new_length[abi:ne180100]();
              uint64_t v97 = (char *)operator new(8 * v96);
            }
            else
            {
              uint64_t v97 = 0;
            }
            unint64_t v98 = &v97[8 * v93];
            *(void *)unint64_t v98 = v89;
            uint64_t v91 = (unint64_t *)(v98 + 8);
            if (v88 != v92)
            {
              do
              {
                uint64_t v99 = *--v88;
                *((void *)v98 - 1) = v99;
                v98 -= 8;
              }
              while (v88 != v92);
              uint64_t v88 = (unint64_t *)*((void *)this + 13);
            }
            *((void *)this + 13) = v98;
            *((void *)this + 14) = v91;
            *((void *)this + 15) = &v97[8 * v96];
            if (v88)
            {
              operator delete(v88);
              unint64_t v87 = *((void *)this + 50);
            }
          }
          else
          {
            *uint64_t v88 = v89;
            uint64_t v91 = v88 + 1;
          }
          *((void *)this + 14) = v91;
          v87 += 56 * *(unsigned __int16 *)(v89 + 2) + 4;
          *((void *)this + 50) = v87;
          uint64_t v88 = v91;
        }
        while (v87 < *(void *)(*((void *)this + 44) + 24));
      }
      std::vector<std::unordered_multimap<unsigned int,std::pair<unsigned short,unsigned short>>>::resize((char **)this + 35);
      uint64_t v100 = *((void *)this + 13);
      uint64_t v101 = *((void *)this + 14);
      if (v101 != v100)
      {
        uint64_t v102 = 0;
        unsigned __int16 v103 = 0;
        do
        {
          long long v104 = *(unsigned __int16 **)(v100 + 8 * v102);
          if (v104[1])
          {
            unint64_t v105 = 0;
            unint64_t v106 = (unint64_t)v103 << 32;
            uint64_t v107 = 24;
            do
            {
              if (*v104 - 1 >= 7) {
                unsigned int v108 = 7;
              }
              else {
                unsigned int v108 = (unsigned __int16)(*v104 - 1);
              }
              std::__hash_table<std::__hash_value_type<unsigned int,std::pair<unsigned short,unsigned short>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::pair<unsigned short,unsigned short>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::pair<unsigned short,unsigned short>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::pair<unsigned short,unsigned short>>>>::__emplace_multi<std::pair<unsigned int,std::pair<unsigned short,unsigned short>> &>(*v12 + 40 * v108, COERCE_DOUBLE(v106 + *(unsigned int *)&v104[v107]));
              ++v105;
              uint64_t v100 = *((void *)this + 13);
              long long v104 = *(unsigned __int16 **)(v100 + 8 * v102);
              v106 += 0x1000000000000;
              v107 += 28;
            }
            while (v105 < v104[1]);
            uint64_t v101 = *((void *)this + 14);
          }
          uint64_t v102 = ++v103;
        }
        while (v103 < (unint64_t)((v101 - v100) >> 3));
      }
      goto LABEL_130;
    }
    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    long long v110 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf.__first_) = 0;
      _os_log_impl(&dword_20CD80000, v110, OS_LOG_TYPE_ERROR, "Invalid version of prompts loaded ", (uint8_t *)&buf, 2u);
    }
    uint64_t v23 = "Invalid version of prompts loaded ";
    goto LABEL_136;
  }
}

void sub_20D479134(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, std::__shared_weak_count **__p, void *a11, char **a12, std::__split_buffer<std::string> *a13, void *a14, void **a15, void **a16, void *a17, void *__pa, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a24);
  if (a23 < 0) {
    operator delete(__pa);
  }
  __pa = a9;
  std::vector<Prompt>::__destroy_vector::operator()[abi:ne180100]((void ***)&__pa);
  uint64_t v26 = *(void **)(v24 + 528);
  if (v26)
  {
    *(void *)(v24 + 536) = v26;
    operator delete(v26);
  }
  __pa = a11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__pa);
  __pa = a17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__pa);
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy(*a12);
  if (*__p) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*__p);
  }
  if (*(char *)(v24 + 351) < 0) {
    operator delete(*(void **)(v24 + 328));
  }
  __pa = (void *)(v24 + 304);
  std::vector<std::vector<std::vector<std::pair<unsigned short,unsigned short>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__pa);
  std::vector<std::unordered_multimap<unsigned int,unsigned int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__pa);
  int v27 = *(void **)(v24 + 256);
  if (v27) {
    operator delete(v27);
  }
  unint64_t v28 = *(void **)(v24 + 232);
  if (v28) {
    operator delete(v28);
  }
  unint64_t v29 = *(void **)(v24 + 208);
  if (v29)
  {
    *(void *)(v24 + 216) = v29;
    operator delete(v29);
  }
  long long v30 = *(void **)(v24 + 184);
  if (v30) {
    operator delete(v30);
  }
  unint64_t v31 = *(void **)(v24 + 160);
  if (v31) {
    operator delete(v31);
  }
  std::__split_buffer<std::string>::pointer first = a13->__first_;
  if (a13->__first_)
  {
    *(void *)(v24 + 144) = first;
    operator delete(first);
  }
  unint64_t v33 = *(void **)(v24 + 104);
  if (v33)
  {
    *(void *)(v24 + 112) = v33;
    operator delete(v33);
  }
  unint64_t v34 = *(void **)(v24 + 80);
  if (v34)
  {
    *(void *)(v24 + 88) = v34;
    operator delete(v34);
  }
  __pa = a14;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__pa);
  std::__tree<std::__value_type<unsigned long,std::pair<unsigned long,unsigned long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::pair<unsigned long,unsigned long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::pair<unsigned long,unsigned long>>>>::destroy(*a15);
  std::__tree<std::__value_type<unsigned long,std::pair<unsigned long,unsigned long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::pair<unsigned long,unsigned long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::pair<unsigned long,unsigned long>>>>::destroy(*a16);
  _Unwind_Resume(a1);
}

void TAPExtractor::~TAPExtractor(TAPExtractor *this)
{
  *(void *)this = &off_26C200150;
  long long v12 = (void **)((char *)this + 568);
  std::vector<Prompt>::__destroy_vector::operator()[abi:ne180100](&v12);
  uint64_t v2 = (void *)*((void *)this + 66);
  if (v2)
  {
    *((void *)this + 67) = v2;
    operator delete(v2);
  }
  long long v12 = (void **)((char *)this + 504);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v12);
  long long v12 = (void **)((char *)this + 472);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v12);
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy(*((char **)this + 57));
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 47);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  if (*((char *)this + 351) < 0) {
    operator delete(*((void **)this + 41));
  }
  long long v12 = (void **)((char *)this + 304);
  std::vector<std::vector<std::vector<std::pair<unsigned short,unsigned short>>>>::__destroy_vector::operator()[abi:ne180100](&v12);
  long long v12 = (void **)((char *)this + 280);
  std::vector<std::unordered_multimap<unsigned int,unsigned int>>::__destroy_vector::operator()[abi:ne180100](&v12);
  unint64_t v4 = (void *)*((void *)this + 32);
  if (v4) {
    operator delete(v4);
  }
  float v5 = (void *)*((void *)this + 29);
  if (v5) {
    operator delete(v5);
  }
  uint64_t v6 = (void *)*((void *)this + 26);
  if (v6)
  {
    *((void *)this + 27) = v6;
    operator delete(v6);
  }
  uint64_t v7 = (void *)*((void *)this + 23);
  if (v7) {
    operator delete(v7);
  }
  unint64_t v8 = (void *)*((void *)this + 20);
  if (v8) {
    operator delete(v8);
  }
  unint64_t v9 = (void *)*((void *)this + 17);
  if (v9)
  {
    *((void *)this + 18) = v9;
    operator delete(v9);
  }
  int v10 = (void *)*((void *)this + 13);
  if (v10)
  {
    *((void *)this + 14) = v10;
    operator delete(v10);
  }
  uint64_t v11 = (void *)*((void *)this + 10);
  if (v11)
  {
    *((void *)this + 11) = v11;
    operator delete(v11);
  }
  long long v12 = (void **)((char *)this + 56);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v12);
  std::__tree<std::__value_type<unsigned long,std::pair<unsigned long,unsigned long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::pair<unsigned long,unsigned long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::pair<unsigned long,unsigned long>>>>::destroy(*((void **)this + 5));
  std::__tree<std::__value_type<unsigned long,std::pair<unsigned long,unsigned long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::pair<unsigned long,unsigned long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::pair<unsigned long,unsigned long>>>>::destroy(*((void **)this + 2));
}

void UnparseLegacyImpl::end_document(UnparseLegacyImpl *this)
{
  v1[0] = 0;
  v1[1] = 0;
  UnparseLegacyImpl::dump_attr(this, (uint64_t)v1);
}

void UnparseLegacyImpl::dump_attr(UnparseLegacyImpl *this, uint64_t a2)
{
  if (*(void *)a2)
  {
    int v4 = 0;
    float v5 = *(TokenAttributes ***)a2;
    do
    {
      ++v4;
      float v5 = (TokenAttributes **)*v5;
    }
    while (v5);
    uint64_t v6 = (int *)((char *)this + 144);
    UnparseLegacyImpl::dump_attr(this, *((TokenAttributes **)this + 16), *((_DWORD *)this + 36), *(TokenAttributes ***)a2, v4);
  }
  else
  {
    uint64_t v6 = (int *)((char *)this + 144);
    UnparseLegacyImpl::dump_attr(this, *((TokenAttributes **)this + 16), *((_DWORD *)this + 36), 0, 0);
    int v4 = 0;
  }
  unint64_t v8 = *(TokenAttributes ***)a2;
  uint64_t v7 = *(void *)(a2 + 8);
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v9 = (std::__shared_weak_count *)*((void *)this + 17);
  *((void *)this + 16) = v8;
  *((void *)this + 17) = v7;
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  int *v6 = v4;
}

void UnparseLegacyImpl::dump_attr(UnparseLegacyImpl *this, TokenAttributes *a2, int a3, TokenAttributes **a4, int a5)
{
  int v7 = a3;
  unint64_t v8 = a2;
  unint64_t v9 = this;
  if (a3 <= a5)
  {
    if (a3 < a5)
    {
      int v10 = *a4;
      int v11 = a5 - 1;
      goto LABEL_8;
    }
  }
  else
  {
    do
    {
      UnparseLegacyImpl::end_attr(v9, a2);
      unint64_t v8 = *(TokenAttributes **)v8;
      --v7;
    }
    while (v7 > a5);
    int v7 = a5;
  }
  if (v8 == (TokenAttributes *)a4) {
    return;
  }
  UnparseLegacyImpl::end_attr(v9, a2);
  a2 = *(TokenAttributes **)v8;
  a3 = v7 - 1;
  int v10 = *a4;
  int v11 = a5 - 1;
  this = v9;
LABEL_8:
  UnparseLegacyImpl::dump_attr(this, a2, a3, v10, v11);
  UnparseLegacyImpl::start_attr(v9, (TokenAttributes *)a4);
}

void UnparseLegacyImpl::end_attr(UnparseLegacyImpl *this, TokenAttributes *a2)
{
  uint64_t v3 = (void *)*((void *)this + 15);
  uint64_t v4 = *((void *)this + 21);
  uint64_t v7 = *(void *)(v4 - 24);
  uint64_t v5 = v4 - 24;
  uint64_t v6 = v7;
  int v8 = *(char *)(v5 + 23);
  if (v8 >= 0) {
    uint64_t v9 = v5;
  }
  else {
    uint64_t v9 = v6;
  }
  if (v8 >= 0) {
    uint64_t v10 = *(unsigned __int8 *)(v5 + 23);
  }
  else {
    uint64_t v10 = *(void *)(v5 + 8);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, v9, v10);
  uint64_t v11 = *((void *)this + 21);
  long long v12 = (void **)(v11 - 24);
  if (*(char *)(v11 - 1) < 0) {
    operator delete(*v12);
  }
  *((void *)this + 21) = v12;
}

void UnparseLegacyImpl::start_attr(UnparseLegacyImpl *this, TokenAttributes *a2)
{
  std::string::basic_string[abi:ne180100]<0>(__p, &byte_20D5A22AE);
  unint64_t v4 = *((void *)this + 22);
  unint64_t v5 = *((void *)this + 21);
  if (v5 >= v4)
  {
    uint64_t v7 = *((void *)this + 20);
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - v7) >> 3);
    unint64_t v9 = v8 + 1;
    if (v8 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - v7) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)((char *)this + 176);
    if (v11) {
      long long v12 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)this + 176, v11);
    }
    else {
      long long v12 = 0;
    }
    unint64_t v13 = v12 + v8;
    __v.__first_ = v12;
    __v.__begin_ = v13;
    __v.__end_cap_.__value_ = &v12[v11];
    long long v14 = *(_OWORD *)__p;
    v13->__r_.__value_.__r.__words[2] = v78;
    *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v14;
    __p[1] = 0;
    int64_t v78 = 0;
    __p[0] = 0;
    __v.__end_ = v13 + 1;
    std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)((char *)this + 160), &__v);
    uint64_t v15 = *((void *)this + 21);
    std::__split_buffer<std::string>::~__split_buffer(&__v);
    int v16 = SHIBYTE(v78);
    *((void *)this + 21) = v15;
    if (v16 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    long long v6 = *(_OWORD *)__p;
    *(void *)(v5 + 16) = v78;
    *(_OWORD *)unint64_t v5 = v6;
    *((void *)this + 21) = v5 + 24;
  }
  switch(*((_DWORD *)a2 + 8))
  {
    case 2:
    case 3:
    case 6:
      uint64_t v17 = *(void *)a2;
      if (!*(void *)a2) {
        goto LABEL_62;
      }
      uint64_t v18 = *((unsigned __int8 *)a2 + 63);
      if ((v18 & 0x80u) == 0) {
        uint64_t v19 = *((unsigned __int8 *)a2 + 63);
      }
      else {
        uint64_t v19 = *((void *)a2 + 6);
      }
      uint64_t v20 = *(unsigned __int8 *)(v17 + 63);
      int v21 = (char)v20;
      if ((v20 & 0x80u) != 0) {
        uint64_t v20 = *(void *)(v17 + 48);
      }
      if (v19 != v20) {
        goto LABEL_62;
      }
      unint64_t v22 = (const void **)((char *)a2 + 40);
      if (v21 >= 0) {
        uint64_t v23 = (unsigned __int8 *)(v17 + 40);
      }
      else {
        uint64_t v23 = *(unsigned __int8 **)(v17 + 40);
      }
      if ((v18 & 0x80) != 0)
      {
        if (!memcmp(*v22, v23, *((void *)a2 + 6))) {
          return;
        }
      }
      else
      {
        if (!*((unsigned char *)a2 + 63)) {
          return;
        }
        while (*(unsigned __int8 *)v22 == *v23)
        {
          unint64_t v22 = (const void **)((char *)v22 + 1);
          ++v23;
          if (!--v18) {
            return;
          }
        }
      }
LABEL_62:
      unint64_t v55 = (void *)*((void *)this + 15);
      lang_escape(&__v, (uint64_t)a2 + 40);
      if (SHIBYTE(__v.__end_) >= 0) {
        p_v = &__v;
      }
      else {
        p_v = __v.__first_;
      }
      if (SHIBYTE(__v.__end_) >= 0) {
        uint64_t end_high = HIBYTE(__v.__end_);
      }
      else {
        uint64_t end_high = (uint64_t)__v.__begin_;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)p_v, end_high);
      if (SHIBYTE(__v.__end_) < 0)
      {
        operator delete(__v.__first_);
        if (!v17) {
          return;
        }
      }
      else if (!v17)
      {
        return;
      }
      lang_escape(&__v, v17 + 40);
      if (SHIBYTE(__v.__end_) >= 0) {
        std::__split_buffer<std::string>::pointer first = (const std::string::value_type *)&__v;
      }
      else {
        std::__split_buffer<std::string>::pointer first = (const std::string::value_type *)__v.__first_;
      }
      if (SHIBYTE(__v.__end_) >= 0) {
        std::string::size_type begin = HIBYTE(__v.__end_);
      }
      else {
        std::string::size_type begin = (std::string::size_type)__v.__begin_;
      }
      std::string::append((std::string *)(*((void *)this + 21) - 24), first, begin);
      if (SHIBYTE(__v.__end_) < 0) {
        operator delete(__v.__first_);
      }
      return;
    case 4:
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)this + 15), (uint64_t)"\x1B\\mw\\"", 5);
      unint64_t v35 = (std::string *)(*((void *)this + 21) - 24);
      long long v36 = "\x1B\\mw\\"";
      goto LABEL_60;
    case 5:
      BOOL is_prompt = TokenAttributes::is_prompt(a2);
      uint64_t v38 = (void *)*((void *)this + 15);
      if (is_prompt)
      {
        int v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)"\x1B\\mrk=ctx=", 10);
        uint64_t v42 = *((void *)a2 + 24);
        unint64_t v41 = (char *)a2 + 192;
        uint64_t v40 = v42;
        int v43 = v41[23];
        if (v43 >= 0) {
          uint64_t v44 = (uint64_t)v41;
        }
        else {
          uint64_t v44 = v40;
        }
        if (v43 >= 0) {
          uint64_t v45 = v41[23];
        }
        else {
          uint64_t v45 = *((void *)v41 + 1);
        }
        unint64_t v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, v44, v45);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)"\\"", 1);
        unint64_t v35 = (std::string *)(*((void *)this + 21) - 24);
        long long v36 = "\x1B\\mrk=ctx=\\"";
      }
      else
      {
        BOOL v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)"\x1B\\tn=", 5);
        uint64_t v50 = *((void *)a2 + 18);
        long long v49 = (char *)a2 + 144;
        uint64_t v48 = v50;
        int v51 = v49[23];
        if (v51 >= 0) {
          uint64_t v52 = (uint64_t)v49;
        }
        else {
          uint64_t v52 = v48;
        }
        if (v51 >= 0) {
          uint64_t v53 = v49[23];
        }
        else {
          uint64_t v53 = *((void *)v49 + 1);
        }
        long long v54 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, v52, v53);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)"\\"", 1);
        unint64_t v35 = (std::string *)(*((void *)this + 21) - 24);
        long long v36 = "\x1B\\tn=normal\\"";
      }
      goto LABEL_60;
    case 8:
      uint64_t v24 = *(TokenAttributes ***)a2;
      relative_prosody(*(TokenAttributes ***)a2, 0xD8uLL, 100.0);
      uint64_t v25 = MEMORY[0x263F8C2B8];
      int v26 = *((_DWORD *)a2 + 54);
      if (v26 == 1 || v26 == 2)
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)this + 15), (uint64_t)"\x1B\\pitch=", 8);
        long long v60 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, (uint64_t)"\\"", 1);
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__v);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__v.__end_, (uint64_t)"\x1B\\pitch=", 8);
        long long v61 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)"\\"", 1);
        std::stringbuf::str();
        if (v78 >= 0) {
          uint64_t v62 = __p;
        }
        else {
          uint64_t v62 = (void **)__p[0];
        }
        if (v78 >= 0) {
          std::string::size_type v63 = HIBYTE(v78);
        }
        else {
          std::string::size_type v63 = (std::string::size_type)__p[1];
        }
        std::string::append((std::string *)(*((void *)this + 21) - 24), (const std::string::value_type *)v62, v63);
        if (SHIBYTE(v78) < 0) {
          operator delete(__p[0]);
        }
        __v.__first_ = *(std::__split_buffer<std::string>::pointer *)v25;
        int v64 = *(std::string **)(v25 + 72);
        *(std::__split_buffer<std::string>::pointer *)((char *)&__v.__first_
                                                     + __v.__first_[-1].__r_.__value_.__r.__words[0]) = *(std::__split_buffer<std::string>::pointer *)(v25 + 64);
        __v.__end_ = v64;
        __v.__end_cap_.__value_ = (std::string *)(MEMORY[0x263F8C318] + 16);
        if (v81 < 0) {
          operator delete(v80);
        }
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x210559500](v82);
        uint64_t v24 = *(TokenAttributes ***)a2;
      }
      relative_prosody(v24, 0xE8uLL, 100.0);
      int v65 = *((_DWORD *)a2 + 58);
      if (v65 == 1 || v65 == 2)
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)this + 15), (uint64_t)"\x1B\\rate=", 7);
        long long v66 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)"\\"", 1);
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__v);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__v.__end_, (uint64_t)"\x1B\\rate=", 7);
        unint64_t v67 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)"\\"", 1);
        std::stringbuf::str();
        if (v78 >= 0) {
          unint64_t v68 = __p;
        }
        else {
          unint64_t v68 = (void **)__p[0];
        }
        if (v78 >= 0) {
          std::string::size_type v69 = HIBYTE(v78);
        }
        else {
          std::string::size_type v69 = (std::string::size_type)__p[1];
        }
        std::string::append((std::string *)(*((void *)this + 21) - 24), (const std::string::value_type *)v68, v69);
        if (SHIBYTE(v78) < 0) {
          operator delete(__p[0]);
        }
        __v.__first_ = *(std::__split_buffer<std::string>::pointer *)v25;
        long long v70 = *(std::string **)(v25 + 72);
        *(std::__split_buffer<std::string>::pointer *)((char *)&__v.__first_
                                                     + __v.__first_[-1].__r_.__value_.__r.__words[0]) = *(std::__split_buffer<std::string>::pointer *)(v25 + 64);
        __v.__end_ = v70;
        __v.__end_cap_.__value_ = (std::string *)(MEMORY[0x263F8C318] + 16);
        if (v81 < 0) {
          operator delete(v80);
        }
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x210559500](v82);
        uint64_t v24 = *(TokenAttributes ***)a2;
      }
      relative_prosody(v24, 0xF0uLL, 80.0);
      int v71 = *((_DWORD *)a2 + 60);
      if (v71 == 1 || v71 == 2)
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)this + 15), (uint64_t)"\x1B\\vol=", 6);
        unint64_t v72 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)"\\"", 1);
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__v);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__v.__end_, (uint64_t)"\x1B\\vol=", 6);
        uint64_t v73 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)"\\"", 1);
        std::stringbuf::str();
        if (v78 >= 0) {
          unint64_t v74 = __p;
        }
        else {
          unint64_t v74 = (void **)__p[0];
        }
        if (v78 >= 0) {
          std::string::size_type v75 = HIBYTE(v78);
        }
        else {
          std::string::size_type v75 = (std::string::size_type)__p[1];
        }
        std::string::append((std::string *)(*((void *)this + 21) - 24), (const std::string::value_type *)v74, v75);
        if (SHIBYTE(v78) < 0) {
          operator delete(__p[0]);
        }
        __v.__first_ = *(std::__split_buffer<std::string>::pointer *)v25;
        long long v76 = *(std::string **)(v25 + 72);
        *(std::__split_buffer<std::string>::pointer *)((char *)&__v.__first_
                                                     + __v.__first_[-1].__r_.__value_.__r.__words[0]) = *(std::__split_buffer<std::string>::pointer *)(v25 + 64);
        __v.__end_ = v76;
        __v.__end_cap_.__value_ = (std::string *)(MEMORY[0x263F8C318] + 16);
        if (v81 < 0) {
          operator delete(v80);
        }
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x210559500](v82);
      }
      return;
    case 9:
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)this + 15), (uint64_t)"\x1B\\nlu=PRM:", 10);
      int v27 = *((_DWORD *)a2 + 69);
      if (v27 > 7)
      {
        unint64_t v28 = (void *)*((void *)this + 15);
        if (v27 == 8) {
          char v29 = 49;
        }
        else {
          char v29 = 51;
        }
      }
      else
      {
        unint64_t v28 = (void *)*((void *)this + 15);
        char v29 = 48;
      }
      LOBYTE(__v.__first_) = v29;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)&__v, 1);
      return;
    case 0xC:
      long long v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)this + 15), (uint64_t)"\x1B\\mrk=emo=", 10);
      int v31 = *((char *)a2 + 319);
      if (v31 >= 0) {
        unint64_t v32 = (char *)a2 + 296;
      }
      else {
        unint64_t v32 = (char *)*((void *)a2 + 37);
      }
      if (v31 >= 0) {
        uint64_t v33 = *((unsigned __int8 *)a2 + 319);
      }
      else {
        uint64_t v33 = *((void *)a2 + 38);
      }
      unint64_t v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)v32, v33);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"\\"", 1);
      unint64_t v35 = (std::string *)(*((void *)this + 21) - 24);
      long long v36 = "\x1B\\mrk=emo=none\\"";
LABEL_60:
      std::string::append(v35, v36);
      return;
    default:
      return;
  }
}

void sub_20D47A080(_Unwind_Exception *__p, uint64_t a2, int a3, __int16 a4, char a5, char a6, std::__split_buffer<std::string> *a7, uint64_t a8, void *__pa, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__pa);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a15);
  _Unwind_Resume(__p);
}

float relative_prosody(TokenAttributes **a1, unint64_t a2, float result)
{
  if (a1)
  {
    while (1)
    {
      int v3 = *(_DWORD *)((char *)a1 + a2);
      if (v3) {
        break;
      }
      a1 = (TokenAttributes **)*a1;
      if (!a1) {
        return result;
      }
    }
    if (v3 != 1)
    {
      if (v3 == 2)
      {
        float v4 = *(float *)((char *)a1 + a2 + 4);
        relative_prosody(*a1, a2, result);
        return v4 * v5;
      }
      else
      {
        return nanf(&byte_20D5A22AE);
      }
    }
  }
  return result;
}

void lang_escape(void *a1, uint64_t a2)
{
  v48[6] = *MEMORY[0x263EF8340];
  {
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[4],0>(&v8, "ar-SA", "arw");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[4],0>(v9, "zh-HK", "cah");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[4],0>(v10, "cs-CZ", "czc");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[4],0>(v11, "da-DK", "dad");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[4],0>(v12, "nl-BE", "dub");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[4],0>(v13, "nl-NL", "dun");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[4],0>(v14, "en-AU", "ena");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[4],0>(v15, "en-IE", "ene");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[4],0>(v16, "en-GB", "eng");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[4],0>(v17, "en-IN", "eni");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[4],0>(v18, "en-scotland", "ens");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[4],0>(v19, "en-US", "enu");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[4],0>(v20, "en-ZA", "enz");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[4],0>(v21, "fi-FI", "fif");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[4],0>(v22, "fr-CA", "frc");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[4],0>(v23, "fr-FR", "frf");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[4],0>(v24, "de-DE", "ged");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[4],0>(v25, "el-GR", "grg");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[4],0>(v26, "he-IL", "hei");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[4],0>(v27, "hi-IN", "hii");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[4],0>(v28, "hu-HU", "huh");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[4],0>(v29, "id-ID", "idi");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[4],0>(v30, "it-IT", "iti");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[4],0>(v31, "ja-JP", "jpj");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[4],0>(v32, "ko-KR", "kok");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[4],0>(v33, "zh-CN", "mnc");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[4],0>(v34, "zh-TW", "mnt");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[4],0>(v35, "no-NO", "non");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[4],0>(v36, "pl-PL", "plp");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[4],0>(v37, "pt-BR", "ptb");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[4],0>(v38, "pt-PT", "ptp");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[4],0>(v39, "ro-RO", "ror");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[4],0>(v40, "ru-RU", "rur");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[4],0>(v41, "sk-SK", "sks");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[4],0>(v42, "es-AR", "spa");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[4],0>(v43, "es-CO", "spc");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[4],0>(v44, "es-ES", "spe");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[4],0>(v45, "es-MX", "spm");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[4],0>(v46, "sv-SE", "sws");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[4],0>(v47, "th-TH", "tht");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[4],0>(v48, "tr-TR", "trt");
    std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)&v7, (const void **)&v8.__r_.__value_.__l.__data_, 41);
    NeverDestructed<std::map<std::string,std::string>>::NeverDestructed<>();
  }
  uint64_t v4 = *(unsigned __int8 *)(a2 + 23);
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *(void *)(a2 + 8);
  }
  if (v4)
  {
    if (lang_escape(std::string const&)::sISO2VELang + 8 == std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>(lang_escape(std::string const&)::sISO2VELang, (const void **)a2))
    {
      std::string::basic_string[abi:ne180100]<0>(a1, &byte_20D5A22AE);
    }
    else
    {
      std::operator+<char>();
      float v5 = std::string::append(&v8, "\\"");
      long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
      a1[2] = *((void *)&v5->__r_.__value_.__l + 2);
      *(_OWORD *)a1 = v6;
      v5->__r_.__value_.__l.__size_ = 0;
      v5->__r_.__value_.__r.__words[2] = 0;
      v5->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v8.__r_.__value_.__l.__data_);
      }
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a1, &byte_20D5A22AE);
  }
}

void sub_20D47A808(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&a9, a10);
  for (uint64_t i = 1920; i != -48; i -= 48)
    std::pair<std::string,std::string>::~pair((uint64_t)&__p + i);
  _Unwind_Resume(a1);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[4],0>(void *a1, char *a2, char *a3)
{
  float v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_20D47A8D0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[4],0>(void *a1, char *a2, char *a3)
{
  float v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_20D47A924(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void NeverDestructed<std::map<std::string,std::string>>::NeverDestructed<>()
{
}

void sub_20D47A998(_Unwind_Exception *a1)
{
  MEMORY[0x2105595E0](v1, 0x1020C4062D53EE8);
  _Unwind_Resume(a1);
}

void UnparseLegacyImpl::dump_token(UnparseLegacyImpl *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  if ((void *)(v4 + 8) == v5)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    StringFormatter::StringFormatter((StringFormatter *)__p, "Token missing TokenBasicItem");
    MEMORY[0x210558D40](exception, __p);
    __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  uint64_t v6 = v5[5];
  if (*(_DWORD *)(*(void *)(v6 + 56) + 32) != 10 || *(_DWORD *)(v6 + 8) == 1635083369)
  {
    uint64_t v7 = *(std::__shared_weak_count **)(v6 + 64);
    v60[0] = *(void *)(v6 + 56);
    v60[1] = v7;
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    UnparseLegacyImpl::dump_attr(a1, (uint64_t)v60);
    if (v7) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
    int v8 = *(_DWORD *)(v6 + 8);
    if (v8 > 1835102826)
    {
      if (v8 != 1835102827)
      {
        if (v8 != 1885892462)
        {
          if (v8 == 1952807028)
          {
            if (*(void *)(v6 + 16) != *((void *)a1 + 19))
            {
              unint64_t v9 = (void *)*((void *)a1 + 15);
              LOBYTE(__p[0]) = 32;
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)__p, 1);
            }
            uint64_t v12 = *(void *)(v6 + 32);
            uint64_t v11 = v6 + 32;
            uint64_t v10 = v12;
            int v13 = *(char *)(v11 + 23);
            if (v13 >= 0) {
              uint64_t v14 = v11;
            }
            else {
              uint64_t v14 = v10;
            }
            if (v13 >= 0) {
              uint64_t v15 = *(unsigned __int8 *)(v11 + 23);
            }
            else {
              uint64_t v15 = *(void *)(v11 + 8);
            }
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a1 + 15), v14, v15);
            *((void *)a1 + 19) = *(void *)(v11 - 8) + *(void *)(v11 - 16);
          }
          return;
        }
        uint64_t v27 = *a2;
        if ((void *)(v27 + 8) == v28) {
          return;
        }
        uint64_t v29 = v28[5];
        long long v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a1 + 15), (uint64_t)"\x1B\\toi=", 6);
        int v31 = *(char *)(v29 + 55);
        if (v31 >= 0) {
          uint64_t v32 = v29 + 32;
        }
        else {
          uint64_t v32 = *(void *)(v29 + 32);
        }
        if (v31 >= 0) {
          uint64_t v33 = *(unsigned __int8 *)(v29 + 55);
        }
        else {
          uint64_t v33 = *(void *)(v29 + 40);
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, v32, v33);
        if (*(char *)(v6 + 55) < 0) {
          uint64_t v34 = *(void *)(v6 + 40);
        }
        else {
          uint64_t v34 = *(unsigned __int8 *)(v6 + 55);
        }
        if (v34)
        {
          uint64_t v50 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a1 + 15), (uint64_t)":\"", 2);
          int v51 = *(char *)(v6 + 55);
          if (v51 >= 0) {
            uint64_t v52 = v6 + 32;
          }
          else {
            uint64_t v52 = *(void *)(v6 + 32);
          }
          if (v51 >= 0) {
            uint64_t v53 = *(unsigned __int8 *)(v6 + 55);
          }
          else {
            uint64_t v53 = *(void *)(v6 + 40);
          }
          long long v54 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, v52, v53);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)"\"", 1);
        }
        unint64_t v55 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a1 + 15), (uint64_t)"\\"", 1);
        int v56 = *(char *)(v29 + 31);
        if (v56 >= 0) {
          uint64_t v57 = v29 + 8;
        }
        else {
          uint64_t v57 = *(void *)(v29 + 8);
        }
        if (v56 >= 0) {
          uint64_t v58 = *(unsigned __int8 *)(v29 + 31);
        }
        else {
          uint64_t v58 = *(void *)(v29 + 16);
        }
        uint64_t v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, v57, v58);
        uint64_t v25 = "\x1B\\toi=orth\\"";
        uint64_t v26 = 11;
        goto LABEL_77;
      }
      uint64_t v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a1 + 15), (uint64_t)"\x1B\\mrk=", 6);
      uint64_t v21 = *(void *)(v6 + 32);
      uint64_t v20 = v6 + 32;
      uint64_t v19 = v21;
      int v22 = *(char *)(v20 + 23);
      if (v22 >= 0) {
        uint64_t v23 = v20;
      }
      else {
        uint64_t v23 = v19;
      }
      if (v22 >= 0) {
        uint64_t v24 = *(unsigned __int8 *)(v20 + 23);
      }
      else {
        uint64_t v24 = *(void *)(v20 + 8);
      }
      uint64_t v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, v23, v24);
LABEL_32:
      uint64_t v25 = "\\"";
      uint64_t v26 = 1;
LABEL_77:
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)v25, v26);
      return;
    }
    if (v8 != 1635083369)
    {
      if (v8 != 1651664235) {
        return;
      }
      uint64_t v16 = *a2;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a1 + 15), (uint64_t)"\x1B\\pause=", 8);
      uint64_t v17 = (void *)std::ostream::operator<<();
      goto LABEL_32;
    }
    uint64_t v35 = *a2;
    if ((void *)(v35 + 8) != v36)
    {
      uint64_t v37 = v36[5];
      uint64_t v38 = *(unsigned char *)(v37 + 37) ? "&overlap" : &byte_20D5A22AE;
      std::string::basic_string[abi:ne180100]<0>(__p, v38);
      int v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a1 + 15), (uint64_t)"\x1B\\audio=", 8);
      uint64_t v42 = *(void *)(v37 + 8);
      uint64_t v41 = v37 + 8;
      uint64_t v40 = v42;
      int v43 = *(char *)(v41 + 23);
      uint64_t v44 = v43 >= 0 ? v41 : v40;
      uint64_t v45 = v43 >= 0 ? *(unsigned __int8 *)(v41 + 23) : *(void *)(v41 + 8);
      unint64_t v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, v44, v45);
      BOOL v47 = (v62 & 0x80u) == 0 ? __p : (void **)__p[0];
      uint64_t v48 = (v62 & 0x80u) == 0 ? (void *)v62 : __p[1];
      long long v49 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)v47, (uint64_t)v48);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)"\\"", 1);
      if ((char)v62 < 0) {
        operator delete(__p[0]);
      }
    }
  }
}

void sub_20D47AE08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t UnparseLegacyImpl::start_document(UnparseLegacyImpl *this)
{
  *((_DWORD *)this + 36) = 0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 17);
  *((void *)this + 16) = 0;
  *((void *)this + 17) = 0;
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 2) + 24))(*((void *)this + 2));
  *((void *)this + 19) = 0;
  return result;
}

void UnparseLegacyImpl::~UnparseLegacyImpl(UnparseLegacyImpl *this)
{
  UnparseLegacyImpl::~UnparseLegacyImpl(this);
  JUMPOUT(0x2105595E0);
}

{
  std::__shared_weak_count *v2;
  void **v3;

  *(void *)this = off_26C202278;
  *((void *)this + 13) = &off_26C2022E0;
  int v3 = (void **)((char *)this + 160);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 17);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  UnparserModule::~UnparserModule(this);
}

__n128 UnparseLegacy::create(__n128 *a1, uint64_t a2, std::__shared_weak_count *a3)
{
  if (!a2)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    StringFormatter::StringFormatter((StringFormatter *)v11, "UnparseLegacy::create() needs non-NULL upstream argument");
    MEMORY[0x210558D40](exception, v11);
    __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  uint64_t v6 = operator new(0xD0uLL);
  uint64_t v7 = v6;
  v6[1] = 0;
  v6[2] = 0;
  void *v6 = off_26C216A98;
  unint64_t v8 = (unint64_t)(v6 + 3);
  if (a3)
  {
    atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
    UnparserModule::UnparserModule((uint64_t)(v6 + 3), a2, a3);
    std::__shared_weak_count::__release_shared[abi:ne180100](a3);
  }
  else
  {
    UnparserModule::UnparserModule((uint64_t)(v6 + 3), a2, 0);
  }
  void v7[3] = off_26C2008B0;
  v7[16] = &off_26C200918;
  if (a3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](a3);
    void v7[3] = off_26C202278;
    v7[16] = &off_26C2022E0;
    v7[19] = 0;
    v7[20] = 0;
    v7[24] = 0;
    v7[25] = 0;
    v7[23] = 0;
    std::__shared_weak_count::__release_shared[abi:ne180100](a3);
  }
  else
  {
    void v7[3] = off_26C202278;
    v7[16] = &off_26C2022E0;
    v7[19] = 0;
    v7[20] = 0;
    v7[24] = 0;
    v7[25] = 0;
    v7[23] = 0;
  }
  result.n128_u64[0] = v8;
  result.n128_u64[1] = (unint64_t)v7;
  *a1 = result;
  return result;
}

void sub_20D47B184(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

void UnparseLegacy::~UnparseLegacy(UnparseLegacy *this)
{
  UnparserModule::~UnparserModule(this);
  JUMPOUT(0x2105595E0);
}

uint64_t std::__shared_ptr_emplace<UnparseLegacyImpl>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<UnparseLegacyImpl>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C216A98;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<UnparseLegacyImpl>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C216A98;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void FS2S1EncoderBaseInference::get_alignment_outputs(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  std::string::basic_string[abi:ne180100]<0>(__p, "alignment_support");
  BOOL parameter_value = InferenceEngine::MilInferenceModel::get_parameter_value_if<BOOL>(*(void *)(v4 + 8), (const void **)__p, 0);
  BOOL v6 = parameter_value;
  if (SHIBYTE(v14) < 0)
  {
    operator delete(__p[0]);
    if (!v6) {
      return;
    }
  }
  else if (!parameter_value)
  {
    return;
  }
  uint64_t v7 = *(void *)(a1 + 8);
  std::string::basic_string[abi:ne180100]<0>(v9, "duration_alignments");
  (*(void (**)(InferenceEngine::DataTensor **__return_ptr, uint64_t, void **))(*(void *)v7 + 32))(&v11, v7, v9);
  if (v10 < 0) {
    operator delete(v9[0]);
  }
  InferenceEngine::DataTensor::get_2d_array<int>(v11, __p);
  uint64_t v8 = *a2;
  std::vector<std::vector<int>>::__vdeallocate((uint64_t *)(v8 + 56));
  *(_OWORD *)(v8 + 56) = *(_OWORD *)__p;
  *(void *)(v8 + 72) = v14;
  __p[1] = 0;
  uint64_t v14 = 0;
  __p[0] = 0;
  uint64_t v15 = __p;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v15);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
}

void sub_20D47B3AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  _Unwind_Resume(exception_object);
}

void FS2S1EncoderBaseInference::get_outputs(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  std::string::basic_string[abi:ne180100]<0>(__p, "enc_output");
  (*(void (**)(InferenceEngine::DataTensor **__return_ptr, uint64_t, void **))(*(void *)v3 + 32))(&v11, v3, __p);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  InferenceEngine::DataTensor::get_3d_array<float>(v11, v5);
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  uint64_t v6 = 0;
  std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(&v6, (uint64_t)*v5[0], (uint64_t)v5[0][1], 0xAAAAAAAAAAAAAAABLL * (((char *)v5[0][1] - (char *)*v5[0]) >> 3));
  int v13 = v5;
  std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v13);
  uint64_t v4 = (uint64_t *)(*a2 + 80);
  if (v4 != &v6) {
    std::vector<std::vector<float>>::__assign_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>((uint64_t)v4, v6, v7, 0xAAAAAAAAAAAAAAABLL * ((v7 - v6) >> 3));
  }
  v5[0] = (void **)&v6;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](v5);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
}

void sub_20D47B500(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  a9 = &a12;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  int v22 = *(std::__shared_weak_count **)(v20 - 32);
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  _Unwind_Resume(a1);
}

void FS2S1EncoderBaseInference::prepare_inputs(uint64_t a1, uint64_t a2)
{
  std::string::basic_string[abi:ne180100]<0>(v18, "phone");
  uint64_t v4 = *(int **)(*(void *)a2 + 32);
  float v5 = *(int **)(*(void *)a2 + 40);
  int v16 = 0;
  uint64_t v17 = 0;
  std::string __p = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<std::__wrap_iter<int *>,std::__wrap_iter<int *>>((char *)&__p, v4, v5, v5 - v4);
  InferenceEngine::DataTensor::build_from_1d_array<float>((uint64_t)&__p, &v20);
  if (__p)
  {
    int v16 = __p;
    operator delete(__p);
  }
  if (v19 < 0) {
    operator delete(v18[0]);
  }
  InferenceEngine::DataTensor::unsqueeze(v20, 0);
  std::string::basic_string[abi:ne180100]<0>(v18, "phone_lens");
  float v12 = (float)(unint64_t)((uint64_t)(*(void *)(*(void *)a2 + 40) - *(void *)(*(void *)a2 + 32)) >> 2);
  std::vector<float>::vector(&__p, 1uLL, &v12);
  InferenceEngine::DataTensor::build_from_1d_array<float>((uint64_t)&__p, &v13);
  if (__p)
  {
    int v16 = __p;
    operator delete(__p);
  }
  if (v19 < 0) {
    operator delete(v18[0]);
  }
  uint64_t v6 = *(void (****)(void, InferenceEngine::DataTensor **))(a1 + 8);
  char v10 = v20;
  uint64_t v11 = v21;
  if (v21) {
    atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (**v6)(v6, &v10);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  uint64_t v7 = *(void (****)(void, uint64_t *))(a1 + 8);
  uint64_t v8 = v13;
  unint64_t v9 = v14;
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (**v7)(v7, &v8);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
}

void sub_20D47B718(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, void *__p, uint64_t a18)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  uint64_t v20 = *(std::__shared_weak_count **)(v18 - 24);
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  _Unwind_Resume(exception_object);
}

uint64_t FS2S1EncoderBaseInference::set_dynamic_prompt()
{
  return 0;
}

void FS2S1EncoderBaseInference::inference(void **a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  kdebug_trace();
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  uint64_t v6 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::__split_buffer<std::string> buf = 0;
    _os_log_impl(&dword_20CD80000, v6, OS_LOG_TYPE_DEBUG, "FS2S1Encoder inference begin.", buf, 2u);
  }
  Diagnostics::log(7, "FS2S1Encoder inference begin.", v7);
  uint64_t v8 = (std::__shared_weak_count *)operator new(0xB0uLL);
  v8->__shared_owners_ = 0;
  v8->__shared_weak_owners_ = 0;
  v8->__vftable = (std::__shared_weak_count_vtbl *)off_26C216210;
  v8[1].__vftable = (std::__shared_weak_count_vtbl *)257;
  *(_OWORD *)&v8[1].__shared_owners_ = 0u;
  v8[2].std::__shared_count = 0u;
  *(_OWORD *)&v8[2].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v8[3].__shared_owners_ = 0u;
  v8[4].std::__shared_count = 0u;
  *(_OWORD *)&v8[4].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v8[5].__shared_owners_ = 0u;
  v8[6].std::__shared_count = 0u;
  *(_OWORD *)&v8[6].__shared_weak_owners_ = 0u;
  unint64_t v9 = (std::__shared_weak_count *)a2[1];
  uint64_t v31 = *a2;
  uint64_t v32 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  ((void (*)(void **, uint64_t *))(*a1)[2])(a1, &v31);
  if (v32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v32);
  }
  v10.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  (*(void (**)(void *))(*a1[1] + 48))(a1[1]);
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  uint64_t v11 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    v12.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    *(_DWORD *)std::__split_buffer<std::string> buf = 134217984;
    double v34 = (double)((v12.__d_.__rep_ - v10.__d_.__rep_) / 1000000) / 1000.0;
    _os_log_impl(&dword_20CD80000, v11, OS_LOG_TYPE_DEFAULT, "FS2S1Encoder inference time: %.3f s", buf, 0xCu);
  }
  v13.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(5, "FS2S1Encoder inference time: %.3f s", v14, (double)((v13.__d_.__rep_ - v10.__d_.__rep_) / 1000000) / 1000.0);
  uint64_t v29 = v8 + 1;
  long long v30 = v8;
  atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  ((void (*)(void **, std::__shared_weak_count **))(*a1)[3])(a1, &v29);
  if (v30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v30);
  }
  (*(void (**)(void *))(*a1[1] + 56))(a1[1]);
  kdebug_trace();
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  uint64_t v15 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::__split_buffer<std::string> buf = 0;
    _os_log_impl(&dword_20CD80000, v15, OS_LOG_TYPE_DEBUG, "FS2S1Encoder inference end.", buf, 2u);
  }
  Diagnostics::log(7, "FS2S1Encoder inference end.", v16);
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  uint64_t v17 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * ((v8[4].__shared_weak_owners_ - v8[4].__shared_owners_) >> 3);
    *(_DWORD *)std::__split_buffer<std::string> buf = 134217984;
    double v34 = *(double *)&v19;
    _os_log_impl(&dword_20CD80000, v17, OS_LOG_TYPE_DEFAULT, "FS2S1Encoder generates output_embedding of length %zu", buf, 0xCu);
  }
  Diagnostics::log(5, "FS2S1Encoder generates output_embedding of length %zu", v18, 0xAAAAAAAAAAAAAAABLL * ((v8[4].__shared_weak_owners_ - v8[4].__shared_owners_) >> 3));
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  uint64_t v20 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v22 = 0xAAAAAAAAAAAAAAABLL * ((v8[5].__shared_weak_owners_ - v8[5].__shared_owners_) >> 3);
    *(_DWORD *)std::__split_buffer<std::string> buf = 134217984;
    double v34 = *(double *)&v22;
    _os_log_impl(&dword_20CD80000, v20, OS_LOG_TYPE_DEFAULT, "FS2S1Encoder generates prompt_output_embedding of length %zu", buf, 0xCu);
  }
  Diagnostics::log(5, "FS2S1Encoder generates prompt_output_embedding of length %zu", v21, 0xAAAAAAAAAAAAAAABLL * ((v8[5].__shared_weak_owners_ - v8[5].__shared_owners_) >> 3));
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  uint64_t v23 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v25 = 0xAAAAAAAAAAAAAAABLL * ((v8[6].__shared_weak_owners_ - v8[6].__shared_owners_) >> 3);
    *(_DWORD *)std::__split_buffer<std::string> buf = 134217984;
    double v34 = *(double *)&v25;
    _os_log_impl(&dword_20CD80000, v23, OS_LOG_TYPE_DEFAULT, "FS2S1Encoder generates pred_output_embedding of length %zu", buf, 0xCu);
  }
  Diagnostics::log(5, "FS2S1Encoder generates pred_output_embedding of length %zu", v24, 0xAAAAAAAAAAAAAAABLL * ((v8[6].__shared_weak_owners_ - v8[6].__shared_owners_) >> 3));
  uint64_t v27 = v8 + 1;
  unint64_t v28 = v8;
  atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v26 = *(void *)(a3 + 24);
  if (!v26) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t, std::__shared_weak_count **))(*(void *)v26 + 48))(v26, &v27);
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v8);
}

void sub_20D47BDD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16)
{
  if (a2)
  {
    if (a14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](a14);
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
    __cxa_begin_catch(exception_object);
    (*(void (**)(void))(**(void **)(v16 + 8) + 56))(*(void *)(v16 + 8));
    __cxa_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void sub_20D47BE68(_Unwind_Exception *a1)
{
}

void sub_20D47BE74(void *a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x20D47BE7CLL);
  }
  __clang_call_terminate(a1);
}

void FS2S1EncoderPromptInference::get_outputs(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  std::string::basic_string[abi:ne180100]<0>(__p, "enc_output");
  (*(void (**)(InferenceEngine::DataTensor **__return_ptr, uint64_t, void **))(*(void *)v3 + 32))(&v8, v3, __p);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  InferenceEngine::DataTensor::get_3d_array<float>(v8, v5);
  uint64_t v4 = *a2 + 80;
  if (v4 != v5[0]) {
    std::vector<std::vector<float>>::__assign_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(v4, *(void *)v5[0], *(void *)(v5[0] + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v5[0] + 8) - *(void *)v5[0]) >> 3));
  }
  std::chrono::steady_clock::time_point v10 = (void **)v5;
  std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100](&v10);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
}

void sub_20D47BF60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  *(void *)(v18 - ++*(_DWORD *)(result + 24) = &a10;
  std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v18 - 24));
  uint64_t v20 = *(std::__shared_weak_count **)(v18 - 32);
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  _Unwind_Resume(a1);
}

void FS2S1EncoderPromptInference::prepare_inputs(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  float v5 = *(int **)(*a2 + 32);
  uint64_t v6 = *(int **)(v4 + 40);
  uint64_t v40 = 0;
  uint64_t v41 = 0;
  int v39 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<std::__wrap_iter<int *>,std::__wrap_iter<int *>>((char *)&v39, v5, v6, v6 - v5);
  char v7 = v39;
  uint64_t v8 = *(char **)(a1 + 64);
  if (*v39 == *(float *)v8)
  {
    int64_t v9 = (char *)v40 - (char *)(v39 + 1);
    if (v40 != v39 + 1) {
      memmove(v39, v39 + 1, (char *)v40 - (char *)(v39 + 1));
    }
    uint64_t v40 = (float *)((char *)v7 + v9);
    uint64_t v10 = *a2;
    uint64_t v12 = *(void *)(*a2 + 32);
    uint64_t v11 = *(void *)(v10 + 40);
    uint64_t v13 = v11 - (v12 + 4);
    if (v11 != v12 + 4) {
      memmove((void *)v12, (const void *)(v12 + 4), v11 - (v12 + 4));
    }
    *(void *)(v10 + 40) = v12 + v13;
    char v7 = v39;
    uint64_t v8 = *(char **)(a1 + 64);
  }
  std::vector<float>::__insert_with_size[abi:ne180100]<std::__wrap_iter<float const*>,std::__wrap_iter<float const*>>((uint64_t)&v39, (uint64_t)v7, v8, *(char **)(a1 + 72), (uint64_t)(*(void *)(a1 + 72) - (void)v8) >> 2);
  std::string::basic_string[abi:ne180100]<0>(v35, "phone");
  InferenceEngine::DataTensor::build_from_1d_array<float>((uint64_t)&v39, &v37);
  if (v36 < 0) {
    operator delete(v35[0]);
  }
  InferenceEngine::DataTensor::unsqueeze(v37, 0);
  std::string::basic_string[abi:ne180100]<0>(v35, "phone_lens");
  *(float *)uint64_t v27 = (float)(unint64_t)(v40 - v39);
  std::vector<float>::vector(&__p, 1uLL, v27);
  InferenceEngine::DataTensor::build_from_1d_array<float>((uint64_t)&__p, &v33);
  if (__p)
  {
    uint64_t v32 = __p;
    operator delete(__p);
  }
  if (v36 < 0) {
    operator delete(v35[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v35, "prompt_lens");
  InferenceEngine::DataTensor::get_shape(*(InferenceEngine::DataTensor **)(a1 + 48), 0, (char **)v27);
  float v28 = (float)*((unint64_t *)v27[0] + 1);
  std::vector<float>::vector(&__p, 1uLL, &v28);
  InferenceEngine::DataTensor::build_from_1d_array<float>((uint64_t)&__p, &v29);
  if (__p)
  {
    uint64_t v32 = __p;
    operator delete(__p);
  }
  if (v27[0])
  {
    v27[1] = v27[0];
    operator delete(v27[0]);
  }
  if (v36 < 0) {
    operator delete(v35[0]);
  }
  uint64_t v14 = *(void (****)(void, InferenceEngine::DataTensor **))(a1 + 8);
  unint64_t v25 = v37;
  uint64_t v26 = v38;
  if (v38) {
    atomic_fetch_add_explicit(&v38->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (**v14)(v14, &v25);
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  uint64_t v15 = *(void (****)(void, uint64_t *))(a1 + 8);
  uint64_t v23 = v33;
  uint64_t v24 = v34;
  if (v34) {
    atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (**v15)(v15, &v23);
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  uint64_t v16 = *(void (****)(void, uint64_t *))(a1 + 8);
  uint64_t v17 = *(std::__shared_weak_count **)(a1 + 56);
  uint64_t v21 = *(void *)(a1 + 48);
  unint64_t v22 = v17;
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (**v16)(v16, &v21);
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  uint64_t v18 = *(void (****)(void, uint64_t *))(a1 + 8);
  uint64_t v19 = v29;
  uint64_t v20 = v30;
  if (v30) {
    atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (**v18)(v18, &v19);
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  if (v30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v30);
  }
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  if (v38) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v38);
  }
  if (v39)
  {
    uint64_t v40 = v39;
    operator delete(v39);
  }
}

void sub_20D47C318(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,void *__p,uint64_t a25)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  if (a23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a23);
  }
  uint64_t v27 = *(std::__shared_weak_count **)(v25 - 120);
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  float v28 = *(std::__shared_weak_count **)(v25 - 80);
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  uint64_t v29 = *(void **)(v25 - 72);
  if (v29)
  {
    *(void *)(v25 - 64) = v29;
    operator delete(v29);
  }
  _Unwind_Resume(exception_object);
}

uint64_t FS2S1EncoderPromptInference::set_dynamic_prompt(uint64_t a1, void *a2)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(__p, &byte_20D5A22AE);
  uint64_t v4 = *((unsigned __int8 *)a2 + 23);
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = a2[1];
  }
  if (!v4) {
    goto LABEL_18;
  }
  if (a1 + 32 != std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>(a1 + 24, (const void **)a2))
  {
    v33[0] = a2;
    float v5 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 24), (const void **)a2, (uint64_t)&std::piecewise_construct, (long long **)v33);
    uint64_t v6 = v5;
    if (*((char *)v5 + 79) >= 0) {
      size_t v7 = *((unsigned __int8 *)v5 + 79);
    }
    else {
      size_t v7 = v5[8];
    }
    uint64_t v8 = buf;
    std::string::basic_string[abi:ne180100]((uint64_t)buf, v7 + 1);
    if (v38 < 0) {
      uint64_t v8 = *(uint8_t **)buf;
    }
    if (v7)
    {
      if (*((char *)v6 + 79) >= 0) {
        int64_t v9 = v6 + 7;
      }
      else {
        int64_t v9 = (const void *)v6[7];
      }
      memmove(v8, v9, v7);
    }
    *(_WORD *)&v8[v7] = 47;
    if (SHIBYTE(v36) < 0) {
      operator delete(__p[0]);
    }
    *(_OWORD *)std::string __p = *(_OWORD *)buf;
    uint64_t v36 = v38;
LABEL_18:
    uint64_t v10 = *(void *)(a1 + 88);
    uint64_t v11 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)(a1 + 104), "prompt_phones");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>((uint64_t)v11, &v30);
    if (v36 >= 0) {
      uint64_t v12 = __p;
    }
    else {
      uint64_t v12 = (void **)__p[0];
    }
    if (v36 >= 0) {
      std::string::size_type v13 = HIBYTE(v36);
    }
    else {
      std::string::size_type v13 = (std::string::size_type)__p[1];
    }
    uint64_t v14 = std::string::insert(&v30, 0, (const std::string::value_type *)v12, v13);
    long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    std::string::size_type v32 = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)uint64_t v31 = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    (*(void (**)(void **__return_ptr, uint64_t, uint64_t, void **, void))(*(void *)v10 + 40))(v33, v10, 1717662579, v31, 0);
    InferenceEngine::DataUtils::read_vector_from_file<float>(buf);
    uint64_t v16 = *(void **)(a1 + 64);
    if (v16)
    {
      *(void *)(a1 + 72) = v16;
      operator delete(v16);
      *(void *)(a1 + 64) = 0;
      *(void *)(a1 + 72) = 0;
      *(void *)(a1 + 80) = 0;
    }
    *(_OWORD *)(a1 + 64) = *(_OWORD *)buf;
    *(void *)(a1 + 80) = v38;
    uint64_t v38 = 0;
    memset(buf, 0, sizeof(buf));
    if (v34 < 0) {
      operator delete(v33[0]);
    }
    if (SHIBYTE(v32) < 0) {
      operator delete(v31[0]);
    }
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v30.__r_.__value_.__l.__data_);
    }
    uint64_t v17 = *(void *)(a1 + 88);
    uint64_t v18 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)(a1 + 104), "prompt_duration");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>((uint64_t)v18, &v30);
    if (v36 >= 0) {
      uint64_t v19 = __p;
    }
    else {
      uint64_t v19 = (void **)__p[0];
    }
    if (v36 >= 0) {
      std::string::size_type v20 = HIBYTE(v36);
    }
    else {
      std::string::size_type v20 = (std::string::size_type)__p[1];
    }
    uint64_t v21 = std::string::insert(&v30, 0, (const std::string::value_type *)v19, v20);
    long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    std::string::size_type v32 = v21->__r_.__value_.__r.__words[2];
    *(_OWORD *)uint64_t v31 = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    (*(void (**)(void **__return_ptr, uint64_t, uint64_t, void **, void))(*(void *)v17 + 40))(v33, v17, 1717662579, v31, 0);
    InferenceEngine::DataUtils::read_vector_from_file<float>(buf);
    if (v34 < 0) {
      operator delete(v33[0]);
    }
    if (SHIBYTE(v32) < 0) {
      operator delete(v31[0]);
    }
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v30.__r_.__value_.__l.__data_);
    }
    std::string::basic_string[abi:ne180100]<0>(v33, "prompt_duration");
    InferenceEngine::DataTensor::build_from_1d_array<float>((uint64_t)buf, v31);
    long long v23 = *(_OWORD *)v31;
    v31[0] = 0;
    v31[1] = 0;
    uint64_t v24 = *(std::__shared_weak_count **)(a1 + 56);
    *(_OWORD *)(a1 + 48) = v23;
    if (v24)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v24);
      if (v31[1]) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v31[1]);
      }
    }
    if (v34 < 0) {
      operator delete(v33[0]);
    }
    InferenceEngine::DataTensor::unsqueeze(*(InferenceEngine::DataTensor **)(a1 + 48), 0);
    if (*(void *)buf)
    {
      *(void *)&uint8_t buf[8] = *(void *)buf;
      operator delete(*(void **)buf);
    }
    goto LABEL_62;
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  uint64_t v25 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
  {
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v27 = a2;
    }
    else {
      uint64_t v27 = (void *)*a2;
    }
    *(_DWORD *)std::__split_buffer<std::string> buf = 136315138;
    *(void *)&uint8_t buf[4] = v27;
    _os_log_impl(&dword_20CD80000, v25, OS_LOG_TYPE_ERROR, "Prompt '%s' is not defined.", buf, 0xCu);
  }
  if (*((char *)a2 + 23) >= 0) {
    float v28 = a2;
  }
  else {
    float v28 = (void *)*a2;
  }
  Diagnostics::log(3, "Prompt '%s' is not defined.", v26, v28);
LABEL_62:
  if (SHIBYTE(v36) < 0) {
    operator delete(__p[0]);
  }
  return 1;
}

void sub_20D47C8A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a33 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void FS2S1EncoderP2APromptInference::get_outputs(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  std::string::basic_string[abi:ne180100]<0>(__p, "enc_output");
  (*(void (**)(InferenceEngine::DataTensor **__return_ptr, uint64_t, void **))(*(void *)v4 + 32))(&v20, v4, __p);
  if (v19 < 0) {
    operator delete(__p[0]);
  }
  InferenceEngine::DataTensor::get_3d_array<float>(v20, &v16);
  uint64_t v5 = *a2 + 80;
  if (v5 != (void)v16) {
    std::vector<std::vector<float>>::__assign_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(v5, *(void *)v16, *(void *)(v16 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v16 + 8) - *(void *)v16) >> 3));
  }
  long long v22 = (void **)&v16;
  std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100](&v22);
  float v6 = InferenceEngine::DataTensor::accumulate_sum(*(InferenceEngine::DataTensor **)(a1 + 48));
  uint64_t v7 = *(void *)(*a2 + 80);
  int v8 = (int)v6;
  uint64_t v17 = 0;
  long long v16 = 0uLL;
  std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::__wrap_iter<std::vector<float>*>,std::__wrap_iter<std::vector<float>*>>(&v16, v7, v7 + 24 * (int)v6, (int)v6);
  uint64_t v9 = *a2;
  std::vector<std::vector<int>>::__vdeallocate((uint64_t *)(*a2 + 104));
  *(_OWORD *)(v9 + 104) = v16;
  *(void *)(v9 + 120) = v17;
  uint64_t v17 = 0;
  long long v16 = 0uLL;
  long long v22 = (void **)&v16;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v22);
  uint64_t v10 = *(void *)(*a2 + 88);
  uint64_t v11 = *(void *)(*a2 + 80) + 24 * v8;
  uint64_t v17 = 0;
  long long v16 = 0uLL;
  std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::__wrap_iter<std::vector<float>*>,std::__wrap_iter<std::vector<float>*>>(&v16, v11, v10, 0xAAAAAAAAAAAAAAABLL * ((v10 - v11) >> 3));
  uint64_t v12 = *a2;
  std::vector<std::vector<int>>::__vdeallocate((uint64_t *)(*a2 + 128));
  *(_OWORD *)(v12 + 128) = v16;
  *(void *)(v12 + 144) = v17;
  uint64_t v17 = 0;
  long long v16 = 0uLL;
  long long v22 = (void **)&v16;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v22);
  std::string::size_type v13 = (std::__shared_weak_count *)a2[1];
  uint64_t v14 = *a2;
  long long v15 = v13;
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 32))(a1, &v14);
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
}

void sub_20D47CB5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19)
{
  *(void *)(v19 - 56) = &a11;
  std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v19 - 56));
  if (a19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a19);
  }
  _Unwind_Resume(a1);
}

void sub_20D47CBAC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x20D47CBA4);
}

void FS2S1EncoderP2APromptInference::prepare_inputs(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = (std::__shared_weak_count *)a2[1];
  v3[0] = *a2;
  v3[1] = (uint64_t)v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  FS2S1EncoderPromptInference::prepare_inputs(a1, v3);
  if (v2)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

void sub_20D47CC30(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void FS2S1EncoderP2APromptWordEmbInference::add_word_emb_inputs(uint64_t a1, uint64_t a2)
{
  std::string::basic_string[abi:ne180100]<0>(v14, "word_emb");
  InferenceEngine::DataTensor::build_from_2d_array<float>((uint64_t **)a2, &v16);
  if (v15 < 0) {
    operator delete(v14[0]);
  }
  InferenceEngine::DataTensor::unsqueeze(v16, 0);
  std::string::basic_string[abi:ne180100]<0>(v14, "word_emb_lens");
  float v10 = (float)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
  std::vector<float>::vector(__p, 1uLL, &v10);
  InferenceEngine::DataTensor::build_from_1d_array<float>((uint64_t)__p, &v12);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v15 < 0) {
    operator delete(v14[0]);
  }
  uint64_t v4 = *(void (****)(void, InferenceEngine::DataTensor **))(a1 + 8);
  int v8 = v16;
  uint64_t v9 = v17;
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (**v4)(v4, &v8);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  uint64_t v5 = *(void (****)(void, uint64_t *))(a1 + 8);
  uint64_t v6 = v12;
  uint64_t v7 = v13;
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (**v5)(v5, &v6);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
}

void sub_20D47CDD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  if (a19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a19);
  }
  uint64_t v21 = *(std::__shared_weak_count **)(v19 - 24);
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  _Unwind_Resume(exception_object);
}

void sub_20D47CE50()
{
  if (*(char *)(v0 - 33) < 0) {
    operator delete(*(void **)(v0 - 56));
  }
  JUMPOUT(0x20D47CE48);
}

void FS2S1EncoderP2APromptWordEmbInference::prepare_inputs(uint64_t a1, void *a2)
{
  uint64_t v4 = (std::__shared_weak_count *)a2[1];
  v7[0] = *a2;
  v7[1] = (uint64_t)v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  FS2S1EncoderP2APromptInference::prepare_inputs(a1, v7);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  uint64_t v5 = *(uint64_t **)(*a2 + 80);
  memset(v6, 0, sizeof(v6));
  std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(v6, *v5, v5[1], 0xAAAAAAAAAAAAAAABLL * ((v5[1] - *v5) >> 3));
  (*(void (**)(uint64_t, void *))(*(void *)a1 + 40))(a1, v6);
  int v8 = (void **)v6;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v8);
}

void sub_20D47CF38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void FS2S1EncoderP2APromptWordEmbDialogInference::add_dialog_tag_inputs(uint64_t a1, uint64_t a2)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "dialog_tags");
  InferenceEngine::DataTensor::build_from_1d_array<float>(a2, &v9);
  if (v8 < 0) {
    operator delete(__p);
  }
  InferenceEngine::DataTensor::unsqueeze(v9, 0);
  uint64_t v4 = *(void (****)(void, InferenceEngine::DataTensor **))(a1 + 8);
  uint64_t v5 = v9;
  uint64_t v6 = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (**v4)(v4, &v5);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
}

void sub_20D47D028(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  uint64_t v19 = *(std::__shared_weak_count **)(v17 - 24);
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  _Unwind_Resume(exception_object);
}

void FS2S1EncoderP2APromptWordEmbDialogInference::prepare_inputs(uint64_t a1, void *a2)
{
  uint64_t v4 = (std::__shared_weak_count *)a2[1];
  v9[0] = *a2;
  v9[1] = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  FS2S1EncoderP2APromptWordEmbInference::prepare_inputs(a1, v9);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  uint64_t v5 = *(void *)(*a2 + 512);
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  std::string __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v5, *(void *)(v5 + 8), (uint64_t)(*(void *)(v5 + 8) - *(void *)v5) >> 2);
  (*(void (**)(uint64_t, void **))(*(void *)a1 + 48))(a1, &__p);
  if (__p)
  {
    uint64_t v7 = __p;
    operator delete(__p);
  }
}

void sub_20D47D130(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void FS2S1EncoderP2ADualPromptInference::prepare_inputs(uint64_t a1, uint64_t *a2, uint64_t **a3)
{
  uint64_t v50 = 0;
  int v51 = 0;
  uint64_t v52 = 0;
  int v5 = *((char *)a3 + 23);
  if (v5 < 0)
  {
    if (a3[1] != (uint64_t *)8) {
      goto LABEL_73;
    }
    a3 = (uint64_t **)*a3;
  }
  else if (v5 != 8)
  {
LABEL_73:
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    StringFormatter::StringFormatter((StringFormatter *)&v47, "prompt_type must be set to either semantic or acoustic");
    MEMORY[0x210558D40](exception, &v47);
    __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (*a3 == (uint64_t *)0x6369746E616D6573)
  {
    if (&v50 != (char **)(a1 + 88)) {
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v50, *(char **)(a1 + 88), *(void *)(a1 + 96), (uint64_t)(*(void *)(a1 + 96) - *(void *)(a1 + 88)) >> 2);
    }
    uint64_t v7 = *(InferenceEngine::DataTensor **)(a1 + 24);
    uint64_t v6 = *(std::__shared_weak_count **)(a1 + 32);
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = *(void *)(a1 + 56);
    uint64_t v8 = *(std::__shared_weak_count **)(a1 + 64);
    if (v8) {
LABEL_13:
    }
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    if (*a3 != (uint64_t *)0x63697473756F6361) {
      goto LABEL_73;
    }
    if (&v50 != (char **)(a1 + 112)) {
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v50, *(char **)(a1 + 112), *(void *)(a1 + 120), (uint64_t)(*(void *)(a1 + 120) - *(void *)(a1 + 112)) >> 2);
    }
    uint64_t v7 = *(InferenceEngine::DataTensor **)(a1 + 40);
    uint64_t v6 = *(std::__shared_weak_count **)(a1 + 48);
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = *(void *)(a1 + 72);
    uint64_t v8 = *(std::__shared_weak_count **)(a1 + 80);
    if (v8) {
      goto LABEL_13;
    }
  }
  float v10 = *(int **)(*a2 + 32);
  uint64_t v11 = *(int **)(*a2 + 40);
  uint64_t v48 = 0;
  uint64_t v49 = 0;
  BOOL v47 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<std::__wrap_iter<int *>,std::__wrap_iter<int *>>((char *)&v47, v10, v11, v11 - v10);
  uint64_t v12 = v47;
  std::string::size_type v13 = v50;
  if (*v47 == *(float *)v50)
  {
    int64_t v14 = (char *)v48 - (char *)(v47 + 1);
    if (v48 != v47 + 1) {
      memmove(v47, v47 + 1, (char *)v48 - (char *)(v47 + 1));
    }
    uint64_t v48 = (float *)((char *)v12 + v14);
    uint64_t v15 = *a2;
    uint64_t v17 = *(void *)(*a2 + 32);
    uint64_t v16 = *(void *)(v15 + 40);
    uint64_t v18 = v16 - (v17 + 4);
    if (v16 != v17 + 4) {
      memmove((void *)v17, (const void *)(v17 + 4), v16 - (v17 + 4));
    }
    *(void *)(v15 + 40) = v17 + v18;
    uint64_t v12 = v47;
    std::string::size_type v13 = v50;
  }
  std::vector<float>::__insert_with_size[abi:ne180100]<std::__wrap_iter<float const*>,std::__wrap_iter<float const*>>((uint64_t)&v47, (uint64_t)v12, v13, v51, (v51 - v13) >> 2);
  std::string::basic_string[abi:ne180100]<0>(__p, "phone");
  InferenceEngine::DataTensor::build_from_1d_array<float>((uint64_t)&v47, &v45);
  if (v44 < 0) {
    operator delete(__p[0]);
  }
  InferenceEngine::DataTensor::unsqueeze(v45, 0);
  std::string::basic_string[abi:ne180100]<0>(__p, "phone_lens");
  *(float *)uint64_t v35 = (float)(unint64_t)(v48 - v47);
  std::vector<float>::vector(&v39, 1uLL, v35);
  InferenceEngine::DataTensor::build_from_1d_array<float>((uint64_t)&v39, &v41);
  if (v39)
  {
    uint64_t v40 = v39;
    operator delete(v39);
  }
  if (v44 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "prompt_lens");
  InferenceEngine::DataTensor::get_shape(v7, 0, (char **)v35);
  float v36 = (float)*((unint64_t *)v35[0] + 1);
  std::vector<float>::vector(&v39, 1uLL, &v36);
  InferenceEngine::DataTensor::build_from_1d_array<float>((uint64_t)&v39, &v37);
  if (v39)
  {
    uint64_t v40 = v39;
    operator delete(v39);
  }
  if (v35[0])
  {
    v35[1] = v35[0];
    operator delete(v35[0]);
  }
  if (v44 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v19 = *(void (****)(void, InferenceEngine::DataTensor **))(a1 + 8);
  uint64_t v33 = v45;
  char v34 = v46;
  if (v46) {
    atomic_fetch_add_explicit(&v46->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (**v19)(v19, &v33);
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  std::string::size_type v20 = *(void (****)(void, uint64_t *))(a1 + 8);
  uint64_t v31 = v41;
  std::string::size_type v32 = v42;
  if (v42) {
    atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (**v20)(v20, &v31);
  if (v32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v32);
  }
  uint64_t v21 = *(void (****)(void, InferenceEngine::DataTensor **))(a1 + 8);
  uint64_t v29 = v7;
  std::string v30 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (**v21)(v21, &v29);
  if (v30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v30);
  }
  long long v22 = *(void (****)(void, uint64_t *))(a1 + 8);
  uint64_t v27 = v37;
  float v28 = v38;
  if (v38) {
    atomic_fetch_add_explicit(&v38->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (**v22)(v22, &v27);
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  long long v23 = *(void (****)(void, uint64_t *))(a1 + 8);
  uint64_t v25 = v9;
  uint64_t v26 = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (**v23)(v23, &v25);
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  if (v38) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v38);
  }
  if (v42) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v42);
  }
  if (v46) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v46);
  }
  if (v47)
  {
    uint64_t v48 = v47;
    operator delete(v47);
  }
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  if (v50)
  {
    int v51 = v50;
    operator delete(v50);
  }
}

void sub_20D47D69C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  uint64_t v37 = *(void **)(v35 - 104);
  if (v37)
  {
    *(void *)(v35 - 96) = v37;
    operator delete(v37);
  }
  _Unwind_Resume(exception_object);
}

void sub_20D47D848()
{
  if (v0) {
    JUMPOUT(0x20D47D838);
  }
  JUMPOUT(0x20D47D808);
}

void FS2S1EncoderP2ADualPromptInference::get_outputs(void *a1, uint64_t *a2)
{
  uint64_t v4 = a1[1];
  std::string::basic_string[abi:ne180100]<0>(__p, "prompt_enc_output");
  (*(void (**)(InferenceEngine::DataTensor **__return_ptr, uint64_t, void **))(*(void *)v4 + 32))(&v18, v4, __p);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v5 = a1[1];
  std::string::basic_string[abi:ne180100]<0>(v12, "pred_enc_output");
  (*(void (**)(InferenceEngine::DataTensor **__return_ptr, uint64_t, void **))(*(void *)v5 + 32))(&v14, v5, v12);
  if (v13 < 0) {
    operator delete(v12[0]);
  }
  InferenceEngine::DataTensor::get_3d_array<float>(v18, v11);
  uint64_t v6 = *a2 + 104;
  if (v6 != v11[0]) {
    std::vector<std::vector<float>>::__assign_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(v6, *(void *)v11[0], *(void *)(v11[0] + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v11[0] + 8) - *(void *)v11[0]) >> 3));
  }
  std::string::size_type v20 = (void **)v11;
  std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100](&v20);
  InferenceEngine::DataTensor::get_3d_array<float>(v14, v11);
  uint64_t v7 = *a2 + 128;
  if (v7 != v11[0]) {
    std::vector<std::vector<float>>::__assign_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(v7, *(void *)v11[0], *(void *)(v11[0] + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v11[0] + 8) - *(void *)v11[0]) >> 3));
  }
  std::string::size_type v20 = (void **)v11;
  std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100](&v20);
  uint64_t v8 = (std::__shared_weak_count *)a2[1];
  uint64_t v9 = *a2;
  float v10 = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(void *, uint64_t *))(*a1 + 32))(a1, &v9);
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
}

void sub_20D47DA30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,std::__shared_weak_count *a21)
{
  *(void *)(v21 - 40) = &a11;
  std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 40));
  if (a21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a21);
  }
  long long v23 = *(std::__shared_weak_count **)(v21 - 48);
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  _Unwind_Resume(a1);
}

void sub_20D47DAA8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x20D47DAA0);
}

void FS2S1EncoderP2ADualPromptInference::inference(void **a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v96 = *MEMORY[0x263EF8340];
  kdebug_trace();
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  uint64_t v6 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(buf) = 0;
    _os_log_impl(&dword_20CD80000, v6, OS_LOG_TYPE_DEBUG, "FS2S1Encoder inference begin.", (uint8_t *)&buf, 2u);
  }
  Diagnostics::log(7, "FS2S1Encoder inference begin.", v7);
  uint64_t v8 = (std::__shared_weak_count *)operator new(0xB0uLL);
  v8->__shared_owners_ = 0;
  v8->__shared_weak_owners_ = 0;
  v8->__vftable = (std::__shared_weak_count_vtbl *)off_26C216210;
  v8[1].__vftable = (std::__shared_weak_count_vtbl *)257;
  *(_OWORD *)&v8[1].__shared_owners_ = 0u;
  v8[2].std::__shared_count = 0u;
  *(_OWORD *)&v8[2].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v8[3].__shared_owners_ = 0u;
  v8[4].std::__shared_count = 0u;
  *(_OWORD *)&v8[4].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v8[5].__shared_owners_ = 0u;
  v8[6].std::__shared_count = 0u;
  *(_OWORD *)&v8[6].__shared_weak_owners_ = 0u;
  uint64_t v9 = (std::__shared_weak_count *)operator new(0xB0uLL);
  v9->__shared_owners_ = 0;
  v9->__shared_weak_owners_ = 0;
  v9->__vftable = (std::__shared_weak_count_vtbl *)off_26C216210;
  v9[1].__vftable = (std::__shared_weak_count_vtbl *)257;
  *(_OWORD *)&v9[1].__shared_owners_ = 0u;
  v9[2].std::__shared_count = 0u;
  *(_OWORD *)&v9[2].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v9[3].__shared_owners_ = 0u;
  v9[4].std::__shared_count = 0u;
  *(_OWORD *)&v9[4].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v9[5].__shared_owners_ = 0u;
  v9[6].std::__shared_count = 0u;
  *(_OWORD *)&v9[6].__shared_weak_owners_ = 0u;
  float v10 = (std::__shared_weak_count *)operator new(0xB0uLL);
  v10->__shared_owners_ = 0;
  v10->__shared_weak_owners_ = 0;
  v10->__vftable = (std::__shared_weak_count_vtbl *)off_26C216210;
  v10[1].__vftable = (std::__shared_weak_count_vtbl *)257;
  *(_OWORD *)&v10[1].__shared_owners_ = 0u;
  v10[2].std::__shared_count = 0u;
  *(_OWORD *)&v10[2].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v10[3].__shared_owners_ = 0u;
  v10[4].std::__shared_count = 0u;
  *(_OWORD *)&v10[4].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v10[5].__shared_owners_ = 0u;
  v10[6].std::__shared_count = 0u;
  *(_OWORD *)&v10[6].__shared_weak_owners_ = 0u;
  uint64_t v11 = (std::__shared_weak_count *)a2[1];
  uint64_t v93 = *a2;
  unint64_t v94 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(v91, "semantic");
  ((void (*)(void **, uint64_t *, void **))(*a1)[5])(a1, &v93, v91);
  if (v92 < 0) {
    operator delete(v91[0]);
  }
  if (v94) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v94);
  }
  v72.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  (*(void (**)(void *))(*a1[1] + 48))(a1[1]);
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  uint64_t v12 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    v13.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    LODWORD(buf) = 134217984;
    *(double *)((char *)&buf + 4) = (double)((v13.__d_.__rep_ - v72.__d_.__rep_) / 1000000) / 1000.0;
    _os_log_impl(&dword_20CD80000, v12, OS_LOG_TYPE_DEFAULT, "FS2S1Encoder inference time (semantic_prompt): %.3f s", (uint8_t *)&buf, 0xCu);
  }
  v14.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(5, "FS2S1Encoder inference time (semantic_prompt): %.3f s", v15, (double)((v14.__d_.__rep_ - v72.__d_.__rep_) / 1000000) / 1000.0);
  unint64_t v89 = v9 + 1;
  unint64_t v90 = v9;
  atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  ((void (*)(void **, std::__shared_weak_count **))(*a1)[3])(a1, &v89);
  uint64_t v16 = &fst::TropicalWeightTpl<float>::Type(void)::type;
  if (v90) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v90);
  }
  (*(void (**)(void *))(*a1[1] + 56))(a1[1]);
  uint64_t v18 = (float *)a1[11];
  char v17 = (float *)a1[12];
  uint64_t v19 = (float *)a1[14];
  if ((char *)v17 - (char *)v18 != (char *)a1[15] - (char *)v19) {
    goto LABEL_62;
  }
  while (v18 != v17)
  {
    if (*v18 != *v19) {
      goto LABEL_62;
    }
    ++v18;
    ++v19;
  }
  std::string::size_type v20 = (InferenceEngine::DataTensor *)a1[3];
  uint64_t v21 = (const void *)*((void *)v20 + 11);
  int size = InferenceEngine::DataTensor::get_size(v20);
  std::vector<float>::vector(&buf, size);
  memcpy((void *)buf, v21, 4 * size);
  long long v23 = (InferenceEngine::DataTensor *)a1[5];
  uint64_t v24 = (const void *)*((void *)v23 + 11);
  int v25 = InferenceEngine::DataTensor::get_size(v23);
  std::vector<float>::vector(&__dst, v25);
  memcpy(__dst, v24, 4 * v25);
  uint64_t v26 = __dst;
  if (*((void *)&buf + 1) - (void)buf != v88 - (unsigned char *)__dst)
  {
    BOOL v38 = 0;
    uint64_t v16 = &fst::TropicalWeightTpl<float>::Type(void)::type;
    if (!__dst) {
      goto LABEL_44;
    }
    goto LABEL_43;
  }
  uint64_t v16 = &fst::TropicalWeightTpl<float>::Type(void)::type;
  if ((void)buf == *((void *)&buf + 1))
  {
LABEL_26:
    float v28 = (InferenceEngine::DataTensor *)a1[7];
    uint64_t v29 = (const void *)*((void *)v28 + 11);
    int v30 = InferenceEngine::DataTensor::get_size(v28);
    std::vector<float>::vector(&__p, v30);
    memcpy(__p, v29, 4 * v30);
    uint64_t v31 = (InferenceEngine::DataTensor *)a1[9];
    std::string::size_type v32 = (const void *)*((void *)v31 + 11);
    int v33 = InferenceEngine::DataTensor::get_size(v31);
    std::vector<float>::vector(&v83, v33);
    memcpy(v83, v32, 4 * v33);
    char v34 = __p;
    if (v86 - (unsigned char *)__p == v84 - (unsigned char *)v83)
    {
      uint64_t v16 = &fst::TropicalWeightTpl<float>::Type(void)::type;
      if (__p == v86)
      {
        BOOL v38 = 1;
        if (!v83)
        {
LABEL_40:
          if (v34)
          {
            unsigned int v86 = v34;
            operator delete(v34);
          }
          uint64_t v26 = __dst;
          if (!__dst) {
            goto LABEL_44;
          }
LABEL_43:
          uint64_t v88 = v26;
          operator delete(v26);
          goto LABEL_44;
        }
LABEL_39:
        unint64_t v84 = v83;
        operator delete(v83);
        char v34 = __p;
        goto LABEL_40;
      }
      uint64_t v35 = (float *)((char *)__p + 4);
      float v36 = (float *)v83;
      do
      {
        float v37 = *v36++;
        BOOL v38 = *(v35 - 1) == v37;
        BOOL v39 = *(v35 - 1) != v37 || v35 == (float *)v86;
        ++v35;
      }
      while (!v39);
    }
    else
    {
      BOOL v38 = 0;
      uint64_t v16 = &fst::TropicalWeightTpl<float>::Type(void)::type;
    }
    if (!v83) {
      goto LABEL_40;
    }
    goto LABEL_39;
  }
  uint64_t v27 = 0;
  while (*(float *)(buf + v27) == *(float *)((char *)__dst + v27))
  {
    v27 += 4;
    if ((void)buf + v27 == *((void *)&buf + 1)) {
      goto LABEL_26;
    }
  }
  BOOL v38 = 0;
  if (__dst) {
    goto LABEL_43;
  }
LABEL_44:
  if ((void)buf)
  {
    *((void *)&buf + 1) = buf;
    operator delete((void *)buf);
  }
  if (!v38)
  {
LABEL_62:
    if (v16[34] != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    int v51 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf) = 0;
      _os_log_impl(&dword_20CD80000, v51, OS_LOG_TYPE_DEFAULT, "acoustic_prompt is different than semantic_prompt, run another encoder inference with acoustic_prompt", (uint8_t *)&buf, 2u);
    }
    Diagnostics::log(5, "acoustic_prompt is different than semantic_prompt, run another encoder inference with acoustic_prompt", v52);
    uint64_t v53 = (std::__shared_weak_count *)a2[1];
    uint64_t v79 = *a2;
    uint64_t v80 = v53;
    if (v53) {
      atomic_fetch_add_explicit(&v53->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v77, "acoustic");
    ((void (*)(void **, uint64_t *, void **))(*a1)[5])(a1, &v79, v77);
    if (v78 < 0) {
      operator delete(v77[0]);
    }
    if (v80) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v80);
    }
    v54.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    (*(void (**)(void *))(*a1[1] + 48))(a1[1]);
    if (v16[34] != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    unint64_t v55 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
    {
      v56.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
      LODWORD(buf) = 134217984;
      *(double *)((char *)&buf + 4) = (double)((v56.__d_.__rep_ - v54.__d_.__rep_) / 1000000) / 1000.0;
      _os_log_impl(&dword_20CD80000, v55, OS_LOG_TYPE_DEFAULT, "FS2S1Encoder inference time (acoustic_prompt): %.3f s", (uint8_t *)&buf, 0xCu);
    }
    v57.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    Diagnostics::log(5, "FS2S1Encoder inference time (acoustic_prompt): %.3f s", v58, (double)((v57.__d_.__rep_ - v54.__d_.__rep_) / 1000000) / 1000.0);
    std::string::size_type v75 = v10 + 1;
    long long v76 = v10;
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    ((void (*)(void **, std::__shared_weak_count **))(*a1)[3])(a1, &v75);
    if (v76) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v76);
    }
    (*(void (**)(void *))(*a1[1] + 56))(a1[1]);
    if (v8 != v10) {
      std::vector<std::vector<float>>::__assign_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>((uint64_t)&v8[5].__shared_owners_, v10[5].__shared_owners_, v10[5].__shared_weak_owners_, 0xAAAAAAAAAAAAAAABLL * ((v10[5].__shared_weak_owners_ - v10[5].__shared_owners_) >> 3));
    }
    if (v8 != v9) {
      std::vector<std::vector<float>>::__assign_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>((uint64_t)&v8[6].__shared_owners_, v9[6].__shared_owners_, v9[6].__shared_weak_owners_, 0xAAAAAAAAAAAAAAABLL * ((v9[6].__shared_weak_owners_ - v9[6].__shared_owners_) >> 3));
    }
    uint64_t v73 = v8 + 1;
    unint64_t v74 = v8;
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v59 = *(void *)(a3 + 24);
    if (!v59) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    (*(void (**)(uint64_t, std::__shared_weak_count **))(*(void *)v59 + 48))(v59, &v73);
    if (v74) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v74);
    }
    if (v16[34] != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    long long v60 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
    {
      unint64_t v62 = 0xAAAAAAAAAAAAAAABLL * ((v8[5].__shared_weak_owners_ - v8[5].__shared_owners_) >> 3);
      LODWORD(buf) = 134217984;
      *(void *)((char *)&buf + 4) = v62;
      _os_log_impl(&dword_20CD80000, v60, OS_LOG_TYPE_DEFAULT, "FS2S1Encoder generates prompt_output_embedding of length %zu", (uint8_t *)&buf, 0xCu);
    }
    Diagnostics::log(5, "FS2S1Encoder generates prompt_output_embedding of length %zu", v61, 0xAAAAAAAAAAAAAAABLL * ((v8[5].__shared_weak_owners_ - v8[5].__shared_owners_) >> 3));
    if (v16[34] != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    std::string::size_type v63 = Diagnostics_GetLogObject(void)::__profile_log_default;
    BOOL v64 = os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT);
    uint64_t v49 = v8;
    if (v64)
    {
      unint64_t v65 = 0xAAAAAAAAAAAAAAABLL * ((v8[6].__shared_weak_owners_ - v8[6].__shared_owners_) >> 3);
      LODWORD(buf) = 134217984;
      *(void *)((char *)&buf + 4) = v65;
      _os_log_impl(&dword_20CD80000, v63, OS_LOG_TYPE_DEFAULT, "FS2S1Encoder generates pred_output_embedding of length %zu", (uint8_t *)&buf, 0xCu);
      uint64_t v49 = v8;
    }
    goto LABEL_93;
  }
  if (v16[34] != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  uint64_t v40 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf) = 0;
    _os_log_impl(&dword_20CD80000, v40, OS_LOG_TYPE_DEFAULT, "acoustic_prompt is same as semantic_prompt, skip encoder inference with acoustic_prompt", (uint8_t *)&buf, 2u);
  }
  Diagnostics::log(5, "acoustic_prompt is same as semantic_prompt, skip encoder inference with acoustic_prompt", v41);
  char v81 = v9 + 1;
  uint64_t v82 = v9;
  atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v42 = *(void *)(a3 + 24);
  if (!v42) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t, std::__shared_weak_count **))(*(void *)v42 + 48))(v42, &v81);
  if (v82) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v82);
  }
  if (v16[34] != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  int v43 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v45 = 0xAAAAAAAAAAAAAAABLL * ((v9[5].__shared_weak_owners_ - v9[5].__shared_owners_) >> 3);
    LODWORD(buf) = 134217984;
    *(void *)((char *)&buf + 4) = v45;
    _os_log_impl(&dword_20CD80000, v43, OS_LOG_TYPE_DEFAULT, "FS2S1Encoder generates prompt_output_embedding of length %zu", (uint8_t *)&buf, 0xCu);
  }
  Diagnostics::log(5, "FS2S1Encoder generates prompt_output_embedding of length %zu", v44, 0xAAAAAAAAAAAAAAABLL * ((v9[5].__shared_weak_owners_ - v9[5].__shared_owners_) >> 3));
  if (v16[34] != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  unint64_t v46 = Diagnostics_GetLogObject(void)::__profile_log_default;
  BOOL v47 = os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT);
  uint64_t v49 = v9;
  if (v47)
  {
    unint64_t v50 = 0xAAAAAAAAAAAAAAABLL * ((v9[6].__shared_weak_owners_ - v9[6].__shared_owners_) >> 3);
    LODWORD(buf) = 134217984;
    *(void *)((char *)&buf + 4) = v50;
    _os_log_impl(&dword_20CD80000, v46, OS_LOG_TYPE_DEFAULT, "FS2S1Encoder generates pred_output_embedding of length %zu", (uint8_t *)&buf, 0xCu);
    uint64_t v49 = v9;
  }
LABEL_93:
  Diagnostics::log(5, "FS2S1Encoder generates pred_output_embedding of length %zu", v48, 0xAAAAAAAAAAAAAAABLL * ((v49[6].__shared_weak_owners_ - v49[6].__shared_owners_) >> 3));
  if (v16[34] != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  long long v66 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    v67.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    LODWORD(buf) = 134217984;
    *(double *)((char *)&buf + 4) = (double)((v67.__d_.__rep_ - v72.__d_.__rep_) / 1000000) / 1000.0;
    _os_log_impl(&dword_20CD80000, v66, OS_LOG_TYPE_DEFAULT, "FS2S1Encoder inference time: %.3f s", (uint8_t *)&buf, 0xCu);
  }
  v68.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(5, "FS2S1Encoder inference time: %.3f s", v69, (double)((v68.__d_.__rep_ - v72.__d_.__rep_) / 1000000) / 1000.0);
  kdebug_trace();
  if (v16[34] != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  long long v70 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(buf) = 0;
    _os_log_impl(&dword_20CD80000, v70, OS_LOG_TYPE_DEBUG, "FS2S1Encoder inference end.", (uint8_t *)&buf, 2u);
  }
  Diagnostics::log(7, "FS2S1Encoder inference end.", v71);
  std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  std::__shared_weak_count::__release_shared[abi:ne180100](v8);
}

void sub_20D47E898(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
  if (a2)
  {
    if (__p) {
      operator delete(__p);
    }
    if (a34) {
      operator delete(a34);
    }
    char v44 = *(void **)(v42 - 144);
    if (v44)
    {
      *(void *)(v42 - 136) = v44;
      operator delete(v44);
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v41);
    std::__shared_weak_count::__release_shared[abi:ne180100](v40);
    std::__shared_weak_count::__release_shared[abi:ne180100](v39);
    __cxa_begin_catch(exception_object);
    (*(void (**)(void))(**(void **)(v38 + 8) + 56))(*(void *)(v38 + 8));
    __cxa_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void sub_20D47EA28(_Unwind_Exception *a1)
{
}

void sub_20D47EA34(void *a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x20D47EA3CLL);
  }
  __clang_call_terminate(a1);
}

void FS2S1EncoderP2ADualPromptWordEmbInference::add_word_emb_inputs(uint64_t a1, uint64_t a2)
{
  std::string::basic_string[abi:ne180100]<0>(v14, "word_emb");
  InferenceEngine::DataTensor::build_from_2d_array<float>((uint64_t **)a2, &v16);
  if (v15 < 0) {
    operator delete(v14[0]);
  }
  InferenceEngine::DataTensor::unsqueeze(v16, 0);
  std::string::basic_string[abi:ne180100]<0>(v14, "word_emb_lens");
  float v10 = (float)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
  std::vector<float>::vector(__p, 1uLL, &v10);
  InferenceEngine::DataTensor::build_from_1d_array<float>((uint64_t)__p, &v12);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v15 < 0) {
    operator delete(v14[0]);
  }
  uint64_t v4 = *(void (****)(void, InferenceEngine::DataTensor **))(a1 + 8);
  uint64_t v8 = v16;
  uint64_t v9 = v17;
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (**v4)(v4, &v8);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  uint64_t v5 = *(void (****)(void, uint64_t *))(a1 + 8);
  uint64_t v6 = v12;
  uint64_t v7 = v13;
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (**v5)(v5, &v6);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
}

void sub_20D47EBD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  if (a19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a19);
  }
  uint64_t v21 = *(std::__shared_weak_count **)(v19 - 24);
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  _Unwind_Resume(exception_object);
}

void sub_20D47EC54()
{
  if (*(char *)(v0 - 33) < 0) {
    operator delete(*(void **)(v0 - 56));
  }
  JUMPOUT(0x20D47EC4CLL);
}

void FS2S1EncoderP2ADualPromptWordEmbInference::prepare_inputs(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = (uint64_t **)a3;
  uint64_t v6 = (std::__shared_weak_count *)a2[1];
  v14[0] = *a2;
  v14[1] = (uint64_t)v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (*((char *)a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v13, (const std::string::value_type *)*a3, a3[1]);
  }
  else {
    std::string v13 = *(std::string *)a3;
  }
  FS2S1EncoderP2ADualPromptInference::prepare_inputs(a1, v14, (uint64_t **)&v13);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  int v7 = *((char *)v3 + 23);
  if (v7 < 0)
  {
    if (v3[1] != (uint64_t *)8) {
      return;
    }
    uint64_t v3 = (uint64_t **)*v3;
  }
  else if (v7 != 8)
  {
    return;
  }
  if (*v3 == (uint64_t *)0x6369746E616D6573)
  {
    uint64_t v10 = *(void *)(*a2 + 80);
    memset(v12, 0, sizeof(v12));
    uint64_t v9 = (void **)v12;
    std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(v12, *(void *)(v10 + 24), *(void *)(v10 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v10 + 32) - *(void *)(v10 + 24)) >> 3));
    (*(void (**)(uint64_t, void *))(*(void *)a1 + 48))(a1, v12);
  }
  else
  {
    if (*v3 != (uint64_t *)0x63697473756F6361) {
      return;
    }
    uint64_t v8 = *(void *)(*a2 + 80);
    memset(v11, 0, sizeof(v11));
    uint64_t v9 = (void **)v11;
    std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(v11, *(void *)(v8 + 48), *(void *)(v8 + 56), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v8 + 56) - *(void *)(v8 + 48)) >> 3));
    (*(void (**)(uint64_t, void *))(*(void *)a1 + 48))(a1, v11);
  }
  char v15 = v9;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v15);
}

void sub_20D47EE3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  *(void *)(v21 - 40) = v20;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 40));
  _Unwind_Resume(a1);
}

void FS2S1EncoderP2ADualPromptWordEmbDialogInference::add_dialog_tag_inputs(uint64_t a1, uint64_t a2)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "dialog_tags");
  InferenceEngine::DataTensor::build_from_1d_array<float>(a2, &v9);
  if (v8 < 0) {
    operator delete(__p);
  }
  InferenceEngine::DataTensor::unsqueeze(v9, 0);
  uint64_t v4 = *(void (****)(void, InferenceEngine::DataTensor **))(a1 + 8);
  uint64_t v5 = v9;
  uint64_t v6 = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (**v4)(v4, &v5);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
}

void sub_20D47EF48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  uint64_t v19 = *(std::__shared_weak_count **)(v17 - 24);
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  _Unwind_Resume(exception_object);
}

void FS2S1EncoderP2ADualPromptWordEmbDialogInference::prepare_inputs(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = (uint64_t **)a3;
  uint64_t v6 = (std::__shared_weak_count *)a2[1];
  v15[0] = *a2;
  v15[1] = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (*((char *)a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v14, (const std::string::value_type *)*a3, a3[1]);
  }
  else {
    std::string v14 = *(std::string *)a3;
  }
  FS2S1EncoderP2ADualPromptWordEmbInference::prepare_inputs(a1, v15, (uint64_t *)&v14);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  int v7 = *((char *)v3 + 23);
  if (v7 < 0)
  {
    if (v3[1] != (uint64_t *)8) {
      return;
    }
    uint64_t v3 = (uint64_t **)*v3;
  }
  else if (v7 != 8)
  {
    return;
  }
  if (*v3 == (uint64_t *)0x6369746E616D6573)
  {
    uint64_t v11 = *(void *)(*a2 + 512);
    memset(__p, 0, sizeof(__p));
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, *(const void **)(v11 + 24), *(void *)(v11 + 32), (uint64_t)(*(void *)(v11 + 32) - *(void *)(v11 + 24)) >> 2);
    (*(void (**)(uint64_t, void **))(*(void *)a1 + 56))(a1, __p);
    uint64_t v9 = __p[0];
    if (!__p[0]) {
      return;
    }
    uint64_t v10 = __p;
    goto LABEL_21;
  }
  if (*v3 == (uint64_t *)0x63697473756F6361)
  {
    uint64_t v8 = *(void *)(*a2 + 512);
    memset(v12, 0, sizeof(v12));
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v12, *(const void **)(v8 + 48), *(void *)(v8 + 56), (uint64_t)(*(void *)(v8 + 56) - *(void *)(v8 + 48)) >> 2);
    (*(void (**)(uint64_t, void *))(*(void *)a1 + 56))(a1, v12);
    uint64_t v9 = (void *)v12[0];
    if (v12[0])
    {
      uint64_t v10 = (void **)v12;
LABEL_21:
      v10[1] = v9;
      operator delete(v9);
    }
  }
}

void sub_20D47F150(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void FS2S1EncoderP2ADualPromptOptimisedInference::get_outputs(void *a1, uint64_t *a2)
{
  uint64_t v4 = a1[1];
  std::string::basic_string[abi:ne180100]<0>(__p, "enc_output");
  (*(void (**)(InferenceEngine::DataTensor **__return_ptr, uint64_t, void **))(*(void *)v4 + 32))(&v12, v4, __p);
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  InferenceEngine::DataTensor::get_3d_array<float>(v12, v9);
  uint64_t v5 = *a2 + 128;
  if (v5 != v9[0]) {
    std::vector<std::vector<float>>::__assign_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(v5, *(void *)v9[0], *(void *)(v9[0] + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v9[0] + 8) - *(void *)v9[0]) >> 3));
  }
  std::string v14 = (void **)v9;
  std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100](&v14);
  uint64_t v6 = (std::__shared_weak_count *)a2[1];
  uint64_t v7 = *a2;
  uint64_t v8 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(void *, uint64_t *))(*a1 + 32))(a1, &v7);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
}

void sub_20D47F2DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  *(void *)(v20 - 40) = &a12;
  std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v20 - 40));
  long long v22 = *(std::__shared_weak_count **)(v20 - 48);
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  _Unwind_Resume(a1);
}

void FS2S1EncoderP2ADualPromptOptimisedInference::prepare_inputs(void *a1, void *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a2[1];
  v32[0] = *a2;
  v32[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  FS2S1EncoderBaseInference::prepare_inputs((uint64_t)a1, (uint64_t)v32);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (void (***)(void, uint64_t *))a1[1];
  uint64_t v5 = (std::__shared_weak_count *)a1[4];
  uint64_t v30 = a1[3];
  uint64_t v31 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (**v4)(v4, &v30);
  if (v31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  }
  uint64_t v6 = (void (***)(void, uint64_t *))a1[1];
  uint64_t v7 = (std::__shared_weak_count *)a1[6];
  uint64_t v28 = a1[5];
  uint64_t v29 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (**v6)(v6, &v28);
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
  uint64_t v8 = (void (***)(void, uint64_t *))a1[1];
  uint64_t v9 = (std::__shared_weak_count *)a1[8];
  uint64_t v26 = a1[7];
  uint64_t v27 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (**v8)(v8, &v26);
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  uint64_t v10 = (void (***)(void, uint64_t *))a1[1];
  char v11 = (std::__shared_weak_count *)a1[10];
  uint64_t v24 = a1[9];
  int v25 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (**v10)(v10, &v24);
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  uint64_t v12 = (void (***)(void, uint64_t *))a1[1];
  std::string v13 = (std::__shared_weak_count *)a1[12];
  uint64_t v22 = a1[11];
  long long v23 = v13;
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (**v12)(v12, &v22);
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  std::string v14 = (void (***)(void, uint64_t *))a1[1];
  char v15 = (std::__shared_weak_count *)a1[14];
  uint64_t v20 = a1[13];
  uint64_t v21 = v15;
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (**v14)(v14, &v20);
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  uint64_t v16 = (void (***)(void, uint64_t *))a1[1];
  uint64_t v17 = (std::__shared_weak_count *)a1[16];
  uint64_t v18 = a1[15];
  uint64_t v19 = v17;
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (**v16)(v16, &v18);
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
}

void sub_20D47F5C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void FS2S1EncoderP2ADualPromptOptimisedInference::inference(void **a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  kdebug_trace();
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  uint64_t v6 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_20CD80000, v6, OS_LOG_TYPE_DEBUG, "FS2S1Encoder inference begin.", buf, 2u);
  }
  Diagnostics::log(7, "FS2S1Encoder inference begin.", v7);
  uint64_t v8 = (std::__shared_weak_count *)operator new(0xB0uLL);
  v8->__shared_owners_ = 0;
  v8->__shared_weak_owners_ = 0;
  v8->__vftable = (std::__shared_weak_count_vtbl *)off_26C216210;
  v8[1].__vftable = (std::__shared_weak_count_vtbl *)257;
  *(_OWORD *)&v8[1].__shared_owners_ = 0u;
  v8[2].std::__shared_count = 0u;
  *(_OWORD *)&v8[2].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v8[3].__shared_owners_ = 0u;
  v8[4].std::__shared_count = 0u;
  *(_OWORD *)&v8[4].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v8[5].__shared_owners_ = 0u;
  v8[6].std::__shared_count = 0u;
  *(_OWORD *)&v8[6].__shared_weak_owners_ = 0u;
  uint64_t v9 = (std::__shared_weak_count *)a2[1];
  uint64_t v29 = *a2;
  uint64_t v30 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  ((void (*)(void **, uint64_t *))(*a1)[2])(a1, &v29);
  if (v30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v30);
  }
  v10.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  (*(void (**)(void *))(*a1[1] + 48))(a1[1]);
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  char v11 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    v12.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    *(_DWORD *)long long buf = 134217984;
    double v32 = (double)((v12.__d_.__rep_ - v10.__d_.__rep_) / 1000000) / 1000.0;
    _os_log_impl(&dword_20CD80000, v11, OS_LOG_TYPE_DEFAULT, "FS2S1Encoder inference time (semantic_prompt): %.3f s", buf, 0xCu);
  }
  v13.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(5, "FS2S1Encoder inference time (semantic_prompt): %.3f s", v14, (double)((v13.__d_.__rep_ - v10.__d_.__rep_) / 1000000) / 1000.0);
  uint64_t v27 = v8 + 1;
  uint64_t v28 = v8;
  atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  ((void (*)(void **, std::__shared_weak_count **))(*a1)[3])(a1, &v27);
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  (*(void (**)(void *))(*a1[1] + 56))(a1[1]);
  int v25 = v8 + 1;
  uint64_t v26 = v8;
  atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v15 = *(void *)(a3 + 24);
  if (!v15) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t, std::__shared_weak_count **))(*(void *)v15 + 48))(v15, &v25);
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  uint64_t v16 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * ((v8[6].__shared_weak_owners_ - v8[6].__shared_owners_) >> 3);
    *(_DWORD *)long long buf = 134217984;
    double v32 = *(double *)&v18;
    _os_log_impl(&dword_20CD80000, v16, OS_LOG_TYPE_DEFAULT, "FS2S1Encoder generates pred_output_embedding of length %zu", buf, 0xCu);
  }
  Diagnostics::log(5, "FS2S1Encoder generates pred_output_embedding of length %zu", v17, 0xAAAAAAAAAAAAAAABLL * ((v8[6].__shared_weak_owners_ - v8[6].__shared_owners_) >> 3));
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  uint64_t v19 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    v20.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    *(_DWORD *)long long buf = 134217984;
    double v32 = (double)((v20.__d_.__rep_ - v10.__d_.__rep_) / 1000000) / 1000.0;
    _os_log_impl(&dword_20CD80000, v19, OS_LOG_TYPE_DEFAULT, "FS2S1Encoder inference time: %.3f s", buf, 0xCu);
  }
  v21.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(5, "FS2S1Encoder inference time: %.3f s", v22, (double)((v21.__d_.__rep_ - v10.__d_.__rep_) / 1000000) / 1000.0);
  kdebug_trace();
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  long long v23 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_20CD80000, v23, OS_LOG_TYPE_DEBUG, "FS2S1Encoder inference end.", buf, 2u);
  }
  Diagnostics::log(7, "FS2S1Encoder inference end.", v24);
  std::__shared_weak_count::__release_shared[abi:ne180100](v8);
}

void sub_20D47FB9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16)
{
  if (a2)
  {
    if (a14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](a14);
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
    __cxa_begin_catch(exception_object);
    (*(void (**)(void))(**(void **)(v16 + 8) + 56))(*(void *)(v16 + 8));
    __cxa_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void sub_20D47FC34(_Unwind_Exception *a1)
{
}

void sub_20D47FC40(void *a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x20D47FC48);
  }
  __clang_call_terminate(a1);
}

void FS2S1EncoderModule::process_data(uint64_t a1, uint64_t *a2)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  uint64_t v4 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_20CD80000, v4, OS_LOG_TYPE_DEFAULT, "FS2S1Encoder module start.", buf, 2u);
  }
  Diagnostics::log(5, "FS2S1Encoder module start.", v5);
  std::mutex::lock((std::mutex *)(a1 + 280));
  *(unsigned char *)(a1 + 272) = 1;
  uint64_t v7 = *(void *)(*(void *)v6 + 8);
  uint64_t v8 = *(std::__shared_weak_count **)(*(void *)v6 + 16);
  uint64_t v30 = v7;
  uint64_t v31 = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v29 = 0;
  uint64_t v9 = *(void *)(v7 + 8);
  if (v9 != *(void *)(v7 + 16) && *(unsigned char *)(v9 + 60)) {
    *(void *)(a1 + 344) = 0;
  }
  TacotronAlignment::alignment_reset(*(TacotronAlignment **)(a1 + 368));
  std::chrono::steady_clock::time_point v10 = *(void (****)(void, uint64_t *, void *))(a1 + 352);
  uint64_t v27 = v30;
  uint64_t v28 = v31;
  if (v31) {
    atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v33 = 0;
  char v11 = operator new(0x28uLL);
  void *v11 = &off_26C212A18;
  v11[1] = a1;
  v11[2] = a2;
  void v11[3] = &v30;
  v11[4] = &v29;
  uint64_t v33 = v11;
  (**v10)(v10, &v27, v32);
  std::__function::__value_func<int ()(std::shared_ptr<SemanticFeature>)>::~__value_func[abi:ne180100](v32);
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  std::string::basic_string[abi:ne180100]<0>(buf, "alignment_support");
  unsigned __int8 v24 = 0;
  BOOL v12 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<BOOL,0>((char *)(a1 + 384), (const void **)buf, &v24);
  BOOL v13 = v12;
  if (v26 < 0)
  {
    operator delete(*(void **)buf);
    if (!v13) {
      goto LABEL_30;
    }
  }
  else if (!v12)
  {
    goto LABEL_30;
  }
  int v14 = *(_DWORD *)(a1 + 404);
  int v15 = *(_DWORD *)(a1 + 400);
  uint64_t v16 = *(void *)(a1 + 344);
  int v17 = v29;
  unint64_t v18 = *(std::__shared_weak_count **)(a1 + 376);
  v23[0] = *(void *)(a1 + 368);
  v23[1] = (uint64_t)v18;
  if (v18) {
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v19 = *(std::__shared_weak_count **)(a1 + 176);
  v22[0] = *(void *)(a1 + 168);
  v22[1] = (uint64_t)v19;
  if (v19) {
    atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::chrono::steady_clock::time_point v20 = v31;
  v21[0] = v30;
  v21[1] = v31;
  if (v31) {
    atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 344) = FastSpeechUtils::emit_word_markers(v14, v15, v16, v17, v23, v22, v21, a1, (void (*)(void *, int *))Module::callback, 0);
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
LABEL_30:
  if (v31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  }
  std::mutex::unlock((std::mutex *)(a1 + 280));
}

void sub_20D47FF4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  if (v30)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v30);
    if (!v29)
    {
LABEL_3:
      if (!v28)
      {
LABEL_8:
        uint64_t v33 = *(std::__shared_weak_count **)(v31 - 96);
        if (v33) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v33);
        }
        std::mutex::unlock(v27);
        _Unwind_Resume(a1);
      }
LABEL_7:
      std::__shared_weak_count::__release_shared[abi:ne180100](v28);
      goto LABEL_8;
    }
  }
  else if (!v29)
  {
    goto LABEL_3;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  if (!v28) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

void sub_20D47FFE4()
{
}

char **std::__function::__func<FS2S1EncoderModule::process_data(std::shared_ptr<Agglomerate>)::$_0,std::allocator<FS2S1EncoderModule::process_data(std::shared_ptr<Agglomerate>)::$_0>,int ()(std::shared_ptr<SemanticFeature>)>::target_type()
{
}

uint64_t std::__function::__func<FS2S1EncoderModule::process_data(std::shared_ptr<Agglomerate>)::$_0,std::allocator<FS2S1EncoderModule::process_data(std::shared_ptr<Agglomerate>)::$_0>,int ()(std::shared_ptr<SemanticFeature>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<FS2S1EncoderModule::process_data(std::shared_ptr<Agglomerate>)::$_0,std::allocator<FS2S1EncoderModule::process_data(std::shared_ptr<Agglomerate>)::$_0>,int ()(std::shared_ptr<SemanticFeature>)>::operator()(uint64_t a1, uint64_t **a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = (std::__shared_weak_count *)a2[1];
  int v51 = *a2;
  uint64_t v52 = v2;
  *a2 = 0;
  a2[1] = 0;
  uint64_t v4 = *(void *)(a1 + 8);
  if (*(unsigned char *)(v4 + 160))
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    uint64_t v5 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_20CD80000, v5, OS_LOG_TYPE_DEFAULT, "FS2S1Encoder inference cancelled.", buf, 2u);
    }
    Diagnostics::log(5, "FS2S1Encoder inference cancelled.", v6);
    if (v2) {
LABEL_7:
    }
      std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  else
  {
    uint64_t v8 = a1;
    uint64_t v9 = (char *)operator new(0x30uLL);
    *(_OWORD *)(v9 + 8) = 0u;
    *(void *)uint64_t v9 = off_26C215330;
    *((_OWORD *)v9 + 2) = 0u;
    *((void *)v9 + 3) = v9 + 32;
    uint64_t v10 = (uint64_t)(v9 + 24);
    char v11 = *(uint64_t **)(v8 + 16);
    uint64_t v12 = *v11;
    {
      uint64_t v14 = *(void *)(*(void *)v13 + 16);
      *(void *)long long buf = *(void *)(*(void *)v13 + 8);
      long long v61 = (char *)v14;
      if (v14) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
      }
      Agglomerate::set<std::shared_ptr<FrontendFeature>>(v10, (unint64_t *)buf);
      if (v14) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v14);
      }
    }
    uint64_t v15 = v3[7];
    uint64_t v16 = v3[8];
    if (v15 != v16)
    {
      memset(v59, 0, sizeof(v59));
      unint64_t v50 = v9;
      std::vector<std::vector<float>>::reserve(v59, 0xAAAAAAAAAAAAAAABLL * ((v16 - v15) >> 3));
      int v17 = (int **)v3[7];
      unint64_t v18 = (int **)v3[8];
      while (v17 != v18)
      {
        uint64_t v19 = *v17;
        std::chrono::steady_clock::time_point v20 = v17[1];
        long long v61 = 0;
        uint64_t v62 = 0;
        *(void *)long long buf = 0;
        if (v20 != v19)
        {
          std::vector<int>::__vallocate[abi:ne180100](buf, v20 - v19);
          std::chrono::steady_clock::time_point v21 = v61;
          do
          {
            int v22 = *v19++;
            *(float *)std::chrono::steady_clock::time_point v21 = (float)v22;
            v21 += 4;
          }
          while (v19 != v20);
          long long v61 = v21;
        }
        std::vector<std::vector<float>>::push_back[abi:ne180100](v59, (uint64_t)buf);
        if (*(void *)buf)
        {
          long long v61 = *(char **)buf;
          operator delete(*(void **)buf);
        }
        v17 += 3;
      }
      TacotronAlignment::append_alignments(*(void *)(v4 + 368), v59);
      uint64_t v23 = *(void *)(v4 + 368);
      uint64_t v24 = **(void **)(v8 + 24);
      memset(v58, 0, sizeof(v58));
      std::vector<TacotronPhoneFeature>::__init_with_size[abi:ne180100]<TacotronPhoneFeature*,TacotronPhoneFeature*>(v58, *(void *)(v24 + 8), *(void *)(v24 + 16), 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(void *)(v24 + 16) - *(void *)(v24 + 8)) >> 3));
      TacotronAlignment::generate_speech_rate(buf, v23, v58, 0xAAAAAAAAAAAAAAABLL * ((v3[17] - v3[16]) >> 3), -1431655765 * ((v3[17] - v3[16]) >> 3), (uint64_t)(*(void *)(**(void **)(v8 + 24) + 40) - *(void *)(**(void **)(v8 + 24) + 32)) >> 2);
      uint64_t v49 = (uint64_t)(v9 + 24);
      std::string __p = v58;
      std::vector<TacotronPhoneFeature>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      std::vector<float>::__insert_with_size[abi:ne180100]<std::__wrap_iter<float const*>,std::__wrap_iter<float const*>>((uint64_t)(v3 + 4), v3[5], *(char **)buf, v61, (uint64_t)&v61[-*(void *)buf] >> 2);
      uint64_t v25 = *(void *)(v4 + 368);
      std::chrono::steady_clock::time_point v54 = 0;
      uint64_t v55 = 0;
      std::string __p = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)buf, (uint64_t)v61, (uint64_t)&v61[-*(void *)buf] >> 2);
      uint64_t v47 = v8;
      uint64_t v48 = v4;
      int v26 = *(_DWORD *)(v4 + 400);
      uint64_t v27 = (std::__shared_weak_count *)operator new(0x30uLL);
      v27->__shared_owners_ = 0;
      v27->__shared_weak_owners_ = 0;
      v27->__vftable = (std::__shared_weak_count_vtbl *)off_26C219690;
      v27[1].__vftable = 0;
      uint64_t v28 = (void **)&v27[1].__vftable;
      v27[1].__shared_owners_ = 0;
      v27[1].__shared_weak_owners_ = 0;
      std::chrono::steady_clock::time_point v56 = v27 + 1;
      std::chrono::steady_clock::time_point v57 = v27;
      int v29 = (int *)__p;
      uint64_t v30 = v54;
      if (__p != v54)
      {
        shared_owners = 0;
        int v32 = 0;
        float v33 = (float)v26;
        do
        {
          int v34 = *v29;
          int v35 = *(_DWORD *)(v25 + 4);
          unint64_t shared_weak_owners = v27[1].__shared_weak_owners_;
          if ((unint64_t)shared_owners >= shared_weak_owners)
          {
            float v37 = (char *)*v28;
            uint64_t v38 = (shared_owners - (unsigned char *)*v28) >> 3;
            unint64_t v39 = v38 + 1;
            if ((unint64_t)(v38 + 1) >> 61) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v40 = shared_weak_owners - (void)v37;
            if (v40 >> 2 > v39) {
              unint64_t v39 = v40 >> 2;
            }
            BOOL v41 = (unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8;
            unint64_t v42 = 0x1FFFFFFFFFFFFFFFLL;
            if (!v41) {
              unint64_t v42 = v39;
            }
            if (v42)
            {
              unint64_t v42 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<RateMarker>>(v42);
              float v37 = (char *)v27[1].__vftable;
              shared_owners = (char *)v27[1].__shared_owners_;
            }
            else
            {
              uint64_t v43 = 0;
            }
            char v44 = (int *)(v42 + 8 * v38);
            int *v44 = v32;
            v44[1] = v34;
            unint64_t v45 = (std::__shared_weak_count_vtbl *)v44;
            if (shared_owners != v37)
            {
              do
              {
                unint64_t v46 = (void (__cdecl *)(std::__shared_weak_count *__hidden))*((void *)shared_owners - 1);
                shared_owners -= 8;
                v45[-1].__on_zero_shared_weauint64_t k = v46;
                unint64_t v45 = (std::__shared_weak_count_vtbl *)((char *)v45 - 8);
              }
              while (shared_owners != v37);
              float v37 = (char *)*v28;
            }
            shared_owners = (char *)(v44 + 2);
            v27[1].__vftable = v45;
            v27[1].__shared_owners_ = (uint64_t)(v44 + 2);
            v27[1].__shared_weak_owners_ = v42 + 8 * v43;
            if (v37) {
              operator delete(v37);
            }
          }
          else
          {
            *(_DWORD *)shared_owners = v32;
            *((_DWORD *)shared_owners + 1) = v34;
            shared_owners += 8;
          }
          v27[1].__shared_owners_ = (uint64_t)shared_owners;
          int v32 = (int)(float)((float)v32 + (float)((float)v35 * v33));
          ++v29;
        }
        while (v29 != v30);
      }
      uint64_t v10 = v49;
      Agglomerate::set<std::shared_ptr<std::vector<RateMarker>>>(v49, (unint64_t *)&v56);
      uint64_t v9 = v50;
      uint64_t v8 = v47;
      uint64_t v4 = v48;
      if (v57) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v57);
      }
      if (__p)
      {
        std::chrono::steady_clock::time_point v54 = (int *)__p;
        operator delete(__p);
      }
      if (*(void *)buf)
      {
        long long v61 = *(char **)buf;
        operator delete(*(void **)buf);
      }
      *(void *)long long buf = v59;
      std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    }
    **(_DWORD **)(v8 + 32) -= 1431655765 * ((unint64_t)(v3[17] - v3[16]) >> 3);
    Agglomerate::set<std::shared_ptr<SemanticFeature>>(v10, (unint64_t *)&v51);
    *(void *)long long buf = v10;
    long long v61 = v9;
    atomic_fetch_add_explicit((atomic_ullong *volatile)v9 + 1, 1uLL, memory_order_relaxed);
    (*(void (**)(uint64_t, uint8_t *))(*(void *)v4 + 72))(v4, buf);
    if (v61) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v61);
    }
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v9);
    uint64_t v2 = v52;
    if (v52) {
      goto LABEL_7;
    }
  }
  return 1;
}

void sub_20D48055C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, std::__shared_weak_count *a15, void *__p, uint64_t a17, uint64_t a18, char *a19, std::__shared_weak_count *a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  if (a20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a20);
  }
  if (__p) {
    operator delete(__p);
  }
  int v26 = *(void **)(v24 - 128);
  if (v26)
  {
    *(void *)(v24 - 120) = v26;
    operator delete(v26);
  }
  a19 = &a24;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  if (a15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a15);
  }
  _Unwind_Resume(a1);
}

__n128 std::__function::__func<FS2S1EncoderModule::process_data(std::shared_ptr<Agglomerate>)::$_0,std::allocator<FS2S1EncoderModule::process_data(std::shared_ptr<Agglomerate>)::$_0>,int ()(std::shared_ptr<SemanticFeature>)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_26C212A18;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + ++*(_DWORD *)(result + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<FS2S1EncoderModule::process_data(std::shared_ptr<Agglomerate>)::$_0,std::allocator<FS2S1EncoderModule::process_data(std::shared_ptr<Agglomerate>)::$_0>,int ()(std::shared_ptr<SemanticFeature>)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &off_26C212A18;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + ++*(_DWORD *)(result + 24) = result;
  return result;
}

void std::__function::__func<FS2S1EncoderModule::process_data(std::shared_ptr<Agglomerate>)::$_0,std::allocator<FS2S1EncoderModule::process_data(std::shared_ptr<Agglomerate>)::$_0>,int ()(std::shared_ptr<SemanticFeature>)>::~__func()
{
}

void FS2S1EncoderModule::prepare(FS2S1EncoderModule *this)
{
  if (!*((unsigned char *)this + 272))
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    uint64_t v2 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_20CD80000, v2, OS_LOG_TYPE_DEFAULT, "Prepare inference.", buf, 2u);
    }
    Diagnostics::log(5, "Prepare inference.", v3);
    uint64_t v4 = (char *)operator new(0x228uLL);
    *((void *)v4 + 1) = 0;
    *((void *)v4 + 2) = 0;
    *(void *)uint64_t v4 = off_26C216280;
    *(_OWORD *)(v4 + 40) = 0u;
    *(_OWORD *)(v4 + 72) = 0u;
    *(_OWORD *)(v4 + 88) = 0u;
    *(_OWORD *)(v4 + 104) = 0u;
    *(_OWORD *)(v4 + 120) = 0u;
    *(_OWORD *)(v4 + 136) = 0u;
    *(_OWORD *)(v4 + 152) = 0u;
    *(_OWORD *)(v4 + 168) = 0u;
    *(_OWORD *)(v4 + 184) = 0u;
    *(_OWORD *)(v4 + 200) = 0u;
    *(_OWORD *)(v4 + 216) = 0u;
    *(_OWORD *)(v4 + 232) = 0u;
    *(_OWORD *)(v4 + ++*(_DWORD *)(result + 24) = 0u;
    *(_OWORD *)(v4 + 248) = 0u;
    *(_OWORD *)(v4 + 264) = 0u;
    *(_OWORD *)(v4 + 280) = 0u;
    *(_OWORD *)(v4 + 296) = 0u;
    *(_OWORD *)(v4 + 312) = 0u;
    *(_OWORD *)(v4 + 328) = 0u;
    *(_OWORD *)(v4 + 344) = 0u;
    *(_OWORD *)(v4 + 360) = 0u;
    *(_OWORD *)(v4 + 376) = 0u;
    *(_OWORD *)(v4 + 56) = 0u;
    *((_WORD *)v4 + 12) = 257;
    *((_OWORD *)v4 + 2) = 0u;
    *((_OWORD *)v4 + 3) = 0u;
    *((_OWORD *)v4 + 4) = 0u;
    *((_OWORD *)v4 + 5) = 0u;
    *((_OWORD *)v4 + 6) = 0u;
    *((_OWORD *)v4 + 7) = 0u;
    *((_OWORD *)v4 + 8) = 0u;
    *((_OWORD *)v4 + 9) = 0u;
    *((_OWORD *)v4 + 10) = 0u;
    *((_OWORD *)v4 + 11) = 0u;
    *((_OWORD *)v4 + 12) = 0u;
    *((_OWORD *)v4 + 13) = 0u;
    *((_OWORD *)v4 + 14) = 0u;
    *((_OWORD *)v4 + 15) = 0u;
    *((_OWORD *)v4 + 16) = 0u;
    *((_OWORD *)v4 + 17) = 0u;
    *((_OWORD *)v4 + 18) = 0u;
    *((_OWORD *)v4 + 19) = 0u;
    *((_OWORD *)v4 + 20) = 0u;
    *((_OWORD *)v4 + 21) = 0u;
    *((_OWORD *)v4 + 22) = 0u;
    *((_OWORD *)v4 + 23) = 0u;
    *(_OWORD *)(v4 + 520) = 0u;
    *(_OWORD *)(v4 + 536) = 0u;
    *(_OWORD *)(v4 + 488) = 0u;
    *(_OWORD *)(v4 + 504) = 0u;
    *(_OWORD *)(v4 + 456) = 0u;
    *(_OWORD *)(v4 + 472) = 0u;
    *(_OWORD *)(v4 + 4++*(_DWORD *)(result + 24) = 0u;
    *(_OWORD *)(v4 + 440) = 0u;
    *(_OWORD *)(v4 + 392) = 0u;
    *(_OWORD *)(v4 + 408) = 0u;
    *(void *)long long buf = v4 + 24;
    char v11 = v4;
    std::vector<int>::resize((std::vector<int> *)(v4 + 56), 0xC8uLL);
    v4[26] = 1;
    uint64_t v5 = (char *)operator new(0xB0uLL);
    *((void *)v5 + 1) = 0;
    *((void *)v5 + 2) = 0;
    *(void *)uint64_t v5 = off_26C215FA8;
    *(_OWORD *)(v5 + 40) = 0u;
    *(_OWORD *)(v5 + 56) = 0u;
    *(_OWORD *)(v5 + 72) = 0u;
    *(_OWORD *)(v5 + 88) = 0u;
    *(_OWORD *)(v5 + 104) = 0u;
    *(_OWORD *)(v5 + 120) = 0u;
    *(_OWORD *)(v5 + 136) = 0u;
    *(_OWORD *)(v5 + 152) = 0u;
    *((void *)v5 + 21) = 0;
    *(_OWORD *)(v5 + ++*(_DWORD *)(result + 24) = 0u;
    v9[0] = (unint64_t)(v5 + 24);
    v9[1] = (unint64_t)v5;
    uint64_t v6 = (char *)operator new(0x30uLL);
    *(_OWORD *)(v6 + 8) = 0u;
    *(void *)uint64_t v6 = off_26C215330;
    *((_OWORD *)v6 + 2) = 0u;
    *((void *)v6 + 3) = v6 + 32;
    Agglomerate::set<std::shared_ptr<TacotronFeature>>((uint64_t)(v6 + 24), (unint64_t *)buf);
    Agglomerate::set<std::shared_ptr<FrontendFeature>>((uint64_t)(v6 + 24), v9);
    uint64_t v7 = v6 + 24;
    uint64_t v8 = (std::__shared_weak_count *)v6;
    atomic_fetch_add_explicit((atomic_ullong *volatile)v6 + 1, 1uLL, memory_order_relaxed);
    (*(void (**)(FS2S1EncoderModule *, char **))(*(void *)this + 80))(this, &v7);
    if (v8) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v6);
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v5);
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v4);
  }
}

void sub_20D48099C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  _Unwind_Resume(a1);
}

void FS2S1EncoderModule::~FS2S1EncoderModule(FS2S1EncoderModule *this)
{
  FS2S1EncoderModule::~FS2S1EncoderModule(this);
  JUMPOUT(0x2105595E0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = off_26C202368;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)this + 49, *((unsigned __int8 *)this + 384));
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 47);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 45);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  std::mutex::~mutex((std::mutex *)((char *)this + 280));
  Module::~Module(this);
}

uint64_t FS2S1EncoderPromptInference::FS2S1EncoderPromptInference(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v7 = (std::__shared_weak_count *)a3[1];
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = *a4;
  uint64_t v8 = (std::__shared_weak_count *)a4[1];
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)a1 = off_26C204030;
  *(void *)(a1 + 8) = v9;
  *(void *)(a1 + 16) = v8;
  if (v8)
  {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  *(void *)(a1 + 32) = 0;
  uint64_t v10 = a1 + 32;
  *(void *)(a1 + ++*(_DWORD *)(result + 24) = a1 + 32;
  *(void *)a1 = off_26C204578;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 89) = 0u;
  uint64_t v11 = *a3;
  uint64_t v12 = a3[1];
  if (v12)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
    uint64_t v13 = *(std::__shared_weak_count **)(a1 + 96);
    *(void *)(a1 + 88) = v11;
    *(void *)(a1 + 96) = v12;
    if (v13) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v13);
    }
  }
  else
  {
    *(void *)(a1 + 88) = v11;
    *(void *)(a1 + 96) = 0;
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v35, (uint64_t)a2);
  int v14 = *(unsigned __int8 *)(a1 + 104);
  *(unsigned char *)(a1 + 104) = v35[0];
  v35[0] = v14;
  uint64_t v15 = *(uint64_t **)(a1 + 112);
  *(void *)(a1 + 112) = v36;
  float v36 = v15;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v36, v14);
  uint64_t v30 = a2;
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  unint64_t v34 = 0x8000000000000000;
  int v16 = *(unsigned __int8 *)a2;
  if (v16 == 1)
  {
    uint64_t v31 = std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::find<char const*>(a2[1], (const std::string::value_type **)&PROMPT_MAP_KEY);
    int v16 = *(unsigned __int8 *)a2;
  }
  else
  {
    if (v16 == 2)
    {
      uint64_t v17 = a2[1];
      uint64_t v32 = *(void *)(v17 + 8);
      std::string __p = a2;
      uint64_t v26 = 0;
      uint64_t v27 = 0;
      uint64_t v28 = 0;
      unint64_t v29 = 0x8000000000000000;
LABEL_21:
      uint64_t v27 = *(void *)(v17 + 8);
      goto LABEL_24;
    }
    unint64_t v34 = 1;
  }
  std::string __p = a2;
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  unint64_t v29 = 0x8000000000000000;
  if (v16 == 1)
  {
    uint64_t v26 = a2[1] + 8;
  }
  else
  {
    if (v16 == 2)
    {
      uint64_t v17 = a2[1];
      goto LABEL_21;
    }
    unint64_t v29 = 1;
  }
LABEL_24:
  if (nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==((unsigned __int8 **)&v30, (unsigned __int8 **)&__p))
  {
    std::string::basic_string[abi:ne180100]<0>(&v30, &byte_20D5A22AE);
    (*(void (**)(uint64_t, void **))(*(void *)a1 + 8))(a1, &v30);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, (char *)PROMPT_MAP_KEY);
    v24[0] = 0;
    v24[1] = 0;
    uint64_t v23 = (const void **)v24;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<std::map<std::string,std::string>,0>((uint64_t *)&v30, (unsigned __int8 *)a2, (const void **)&__p, &v23);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1 + 24, *(void **)(a1 + 32));
    unint64_t v18 = (void *)v31;
    *(void *)(a1 + ++*(_DWORD *)(result + 24) = v30;
    *(void *)(a1 + 32) = v18;
    uint64_t v19 = v32;
    *(void *)(a1 + 40) = v32;
    if (v19)
    {
      void v18[2] = v10;
      uint64_t v30 = &v31;
      uint64_t v31 = 0;
      uint64_t v32 = 0;
      unint64_t v18 = 0;
    }
    else
    {
      *(void *)(a1 + ++*(_DWORD *)(result + 24) = v10;
    }
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v30, v18);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v23, v24[0]);
    if (SHIBYTE(v27) < 0) {
      operator delete(__p);
    }
    std::string::basic_string[abi:ne180100]<0>(&v30, "default");
    uint64_t v20 = std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>(a1 + 24, (const void **)&v30);
    if (SHIBYTE(v32) < 0) {
      operator delete(v30);
    }
    if (v10 == v20)
    {
      exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
      StringFormatter::StringFormatter((StringFormatter *)&v30, "prompt_map must contains '%s' prompt", "default");
      MEMORY[0x210558D40](exception, &v30);
      __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
    }
    std::string::basic_string[abi:ne180100]<0>(&v30, "default");
    (*(void (**)(uint64_t, void **))(*(void *)a1 + 8))(a1, &v30);
  }
  if (SHIBYTE(v32) < 0) {
    operator delete(v30);
  }
  return a1;
}

void sub_20D480E84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0)
  {
    operator delete(__p);
    if ((v31 & 1) == 0)
    {
LABEL_6:
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v29, *(unsigned __int8 *)(v26 + 104));
      uint64_t v33 = *(std::__shared_weak_count **)(v26 + 96);
      if (v33) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v33);
      }
      unint64_t v34 = *(void **)(v26 + 64);
      if (v34)
      {
        *(void *)(v26 + 72) = v34;
        operator delete(v34);
      }
      int v35 = *(std::__shared_weak_count **)(v26 + 56);
      if (v35) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v35);
      }
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v28, *(void **)(v26 + 32));
      *(void *)uint64_t v26 = v27;
      float v36 = *(std::__shared_weak_count **)(v26 + 16);
      if (v36) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v36);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v31)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v30);
  goto LABEL_6;
}

void *FS2S1EncoderP2APromptInference::FS2S1EncoderP2APromptInference(void *a1, uint64_t *a2, uint64_t a3, std::__shared_weak_count *a4, uint64_t *a5)
{
  v10[0] = a3;
  v10[1] = (uint64_t)a4;
  if (a4) {
    atomic_fetch_add_explicit(&a4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = (std::__shared_weak_count *)a5[1];
  v9[0] = *a5;
  v9[1] = (uint64_t)v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  FS2S1EncoderPromptInference::FS2S1EncoderPromptInference((uint64_t)a1, a2, v10, v9);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  if (a4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a4);
  }
  *a1 = off_26C204E60;
  return a1;
}

void sub_20D481014(_Unwind_Exception *exception_object)
{
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void *FS2S1EncoderP2APromptWordEmbInference::FS2S1EncoderP2APromptWordEmbInference(void *a1, uint64_t *a2, uint64_t a3, std::__shared_weak_count *a4, uint64_t *a5)
{
  if (a4) {
    atomic_fetch_add_explicit(&a4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = (std::__shared_weak_count *)a5[1];
  v9[0] = *a5;
  v9[1] = (uint64_t)v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  FS2S1EncoderP2APromptInference::FS2S1EncoderP2APromptInference(a1, a2, a3, a4, v9);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  if (a4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a4);
  }
  *a1 = off_26C21FC48;
  return a1;
}

void sub_20D4810DC(_Unwind_Exception *exception_object)
{
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t FS2S1EncoderP2ADualPromptInference::FS2S1EncoderP2ADualPromptInference(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v7 = (std::__shared_weak_count *)a3[1];
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = *a4;
  uint64_t v8 = (std::__shared_weak_count *)a4[1];
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)a1 = off_26C204030;
  *(void *)(a1 + 8) = v9;
  *(void *)(a1 + 16) = v8;
  if (v8)
  {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  *(void *)a1 = off_26C1EDB80;
  *(_OWORD *)(a1 + ++*(_DWORD *)(result + 24) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  uint64_t v10 = (void **)(a1 + 88);
  uint64_t v11 = (void **)(a1 + 112);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  uint64_t v12 = *a3;
  uint64_t v13 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a2, "semantic_prompt_duration");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v13, &__p);
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t, std::string *, void))(*(void *)v12 + 40))(v40, v12, 1717662579, &__p, 0);
  InferenceEngine::DataUtils::read_vector_from_file<float>(v42);
  if (v41 < 0) {
    operator delete(v40[0]);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v14 = *a3;
  uint64_t v15 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a2, "semantic_prompt_fuse_target");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v15, &v38);
  (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t, std::string *, void))(*(void *)v14 + 40))(&__p, v14, 1717662579, &v38, 0);
  InferenceEngine::DataUtils::read_vector_from_file<float>(v40);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v38.__r_.__value_.__l.__data_);
  }
  uint64_t v16 = *a3;
  uint64_t v17 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a2, "semantic_prompt_phones");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v17, &v37);
  (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t, std::string *, void))(*(void *)v16 + 40))(&v38, v16, 1717662579, &v37, 0);
  InferenceEngine::DataUtils::read_vector_from_file<float>(&__p);
  unint64_t v18 = *v10;
  if (*v10)
  {
    *(void *)(a1 + 96) = v18;
    operator delete(v18);
    *uint64_t v10 = 0;
    *(void *)(a1 + 96) = 0;
    *(void *)(a1 + 104) = 0;
  }
  *(std::string *)(a1 + 88) = __p;
  memset(&__p, 0, sizeof(__p));
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v38.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v37.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "prompt_duration");
  InferenceEngine::DataTensor::build_from_1d_array<float>((uint64_t)v42, &v38);
  long long v19 = *(_OWORD *)&v38.__r_.__value_.__l.__data_;
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = 0uLL;
  uint64_t v20 = *(std::__shared_weak_count **)(a1 + 32);
  *(_OWORD *)(a1 + ++*(_DWORD *)(result + 24) = v19;
  if (v20)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
    if (v38.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v38.__r_.__value_.__l.__size_);
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  InferenceEngine::DataTensor::unsqueeze(*(InferenceEngine::DataTensor **)(a1 + 24), 0);
  std::string::basic_string[abi:ne180100]<0>(&__p, "prompt_fuse_target");
  InferenceEngine::DataTensor::build_from_1d_array<float>((uint64_t)v40, &v38);
  long long v21 = *(_OWORD *)&v38.__r_.__value_.__l.__data_;
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = 0uLL;
  int v22 = *(std::__shared_weak_count **)(a1 + 64);
  *(_OWORD *)(a1 + 56) = v21;
  if (v22)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
    if (v38.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v38.__r_.__value_.__l.__size_);
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  InferenceEngine::DataTensor::unsqueeze(*(InferenceEngine::DataTensor **)(a1 + 56), 0);
  uint64_t v23 = *a3;
  uint64_t v24 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a2, "acoustic_prompt_duration");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v24, &v37);
  (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t, std::string *, void))(*(void *)v23 + 40))(&v38, v23, 1717662579, &v37, 0);
  InferenceEngine::DataUtils::read_vector_from_file<float>(&__p);
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v38.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v37.__r_.__value_.__l.__data_);
  }
  uint64_t v25 = *a3;
  uint64_t v26 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a2, "acoustic_prompt_fuse_target");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v26, &v36);
  (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t, std::string *, void))(*(void *)v25 + 40))(&v37, v25, 1717662579, &v36, 0);
  InferenceEngine::DataUtils::read_vector_from_file<float>(&v38);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v37.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v36.__r_.__value_.__l.__data_);
  }
  uint64_t v27 = *a3;
  uint64_t v28 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a2, "acoustic_prompt_phones");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v28, &v35);
  (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t, std::string *, void))(*(void *)v27 + 40))(&v36, v27, 1717662579, &v35, 0);
  InferenceEngine::DataUtils::read_vector_from_file<float>(&v37);
  unint64_t v29 = *v11;
  if (*v11)
  {
    *(void *)(a1 + 120) = v29;
    operator delete(v29);
    std::__shared_weak_count *v11 = 0;
    *(void *)(a1 + 120) = 0;
    *(void *)(a1 + 128) = 0;
  }
  *(std::string *)(a1 + 112) = v37;
  memset(&v37, 0, sizeof(v37));
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v36.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v35.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v37, "prompt_duration");
  InferenceEngine::DataTensor::build_from_1d_array<float>((uint64_t)&__p, &v36);
  long long v30 = *(_OWORD *)&v36.__r_.__value_.__l.__data_;
  *(_OWORD *)&v36.__r_.__value_.__l.__data_ = 0uLL;
  int v31 = *(std::__shared_weak_count **)(a1 + 48);
  *(_OWORD *)(a1 + 40) = v30;
  if (v31)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v31);
    if (v36.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v36.__r_.__value_.__l.__size_);
    }
  }
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v37.__r_.__value_.__l.__data_);
  }
  InferenceEngine::DataTensor::unsqueeze(*(InferenceEngine::DataTensor **)(a1 + 40), 0);
  std::string::basic_string[abi:ne180100]<0>(&v37, "prompt_fuse_target");
  InferenceEngine::DataTensor::build_from_1d_array<float>((uint64_t)&v38, &v36);
  long long v32 = *(_OWORD *)&v36.__r_.__value_.__l.__data_;
  *(_OWORD *)&v36.__r_.__value_.__l.__data_ = 0uLL;
  uint64_t v33 = *(std::__shared_weak_count **)(a1 + 80);
  *(_OWORD *)(a1 + 72) = v32;
  if (v33)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
    if (v36.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v36.__r_.__value_.__l.__size_);
    }
  }
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v37.__r_.__value_.__l.__data_);
  }
  InferenceEngine::DataTensor::unsqueeze(*(InferenceEngine::DataTensor **)(a1 + 72), 0);
  if (v38.__r_.__value_.__r.__words[0])
  {
    v38.__r_.__value_.__l.__size_ = v38.__r_.__value_.__r.__words[0];
    operator delete(v38.__r_.__value_.__l.__data_);
  }
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v40[0])
  {
    v40[1] = v40[0];
    operator delete(v40[0]);
  }
  if (v42[0])
  {
    v42[1] = v42[0];
    operator delete(v42[0]);
  }
  return a1;
}

void sub_20D481740(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a30) {
    operator delete(a30);
  }
  if (a37) {
    operator delete(a37);
  }
  uint64_t v48 = *(void **)(v46 - 128);
  if (v48)
  {
    *(void *)(v46 - 120) = v48;
    operator delete(v48);
  }
  uint64_t v49 = *(void **)(v46 - 104);
  if (v49)
  {
    *(void *)(v46 - 96) = v49;
    operator delete(v49);
  }
  unint64_t v50 = *v45;
  if (*v45)
  {
    v42[15] = v50;
    operator delete(v50);
  }
  int v51 = *v44;
  if (*v44)
  {
    v42[12] = v51;
    operator delete(v51);
  }
  uint64_t v52 = (std::__shared_weak_count *)v42[10];
  if (v52) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v52);
  }
  uint64_t v53 = (std::__shared_weak_count *)v42[8];
  if (v53) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v53);
  }
  std::chrono::steady_clock::time_point v54 = (std::__shared_weak_count *)v42[6];
  if (v54) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v54);
  }
  uint64_t v55 = (std::__shared_weak_count *)v42[4];
  if (v55) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v55);
  }
  *unint64_t v42 = v43;
  std::chrono::steady_clock::time_point v56 = (std::__shared_weak_count *)v42[2];
  if (v56) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v56);
  }
  _Unwind_Resume(exception_object);
}

void sub_20D481930()
{
}

void sub_20D481938()
{
}

void *FS2S1EncoderP2ADualPromptWordEmbInference::FS2S1EncoderP2ADualPromptWordEmbInference(void *a1, uint64_t a2, uint64_t a3, std::__shared_weak_count *a4, uint64_t *a5)
{
  v10[0] = a3;
  v10[1] = (uint64_t)a4;
  if (a4) {
    atomic_fetch_add_explicit(&a4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = (std::__shared_weak_count *)a5[1];
  v9[0] = *a5;
  v9[1] = (uint64_t)v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  FS2S1EncoderP2ADualPromptInference::FS2S1EncoderP2ADualPromptInference((uint64_t)a1, a2, v10, v9);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  if (a4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a4);
  }
  *a1 = off_26C21FCD0;
  return a1;
}

void sub_20D4819E8(_Unwind_Exception *exception_object)
{
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t FS2S1EncoderModule::FS2S1EncoderModule(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v6 = *(std::__shared_weak_count **)(a3 + 8);
  v145[0] = *(void *)a3;
  v145[1] = (uint64_t)v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Module::Module(a1, a2, v145);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  *(void *)a1 = off_26C202368;
  *(unsigned char *)(a1 + 272) = 0;
  *(void *)(a1 + 280) = 850045863;
  uint64_t v7 = (uint64_t **)(a1 + 392);
  *(void *)(a1 + 392) = 0;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(unsigned char *)(a1 + 384) = 0;
  *(_OWORD *)(a1 + 400) = xmmword_20D6B4B70;
  SharedObjectPool::get<VoiceConfig>(&v143, *(long long ***)a3);
  uint64_t v8 = v143;
  uint64_t v9 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "model_config");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v9, &v152);
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t, std::string *, void))(*(void *)v8 + 40))(v141, v8, 1717662579, &v152, 0);
  if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v152.__r_.__value_.__l.__data_);
  }
  InferenceEngine::Utils::read_json_from_file((char *)v141, (uint64_t)v139);
  std::string::basic_string[abi:ne180100]<0>(&v152, "model_parameters");
  LOBYTE(v149) = 0;
  long long v150 = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,0>(v139, (const void **)&v152.__r_.__value_.__l.__data_, (unsigned __int8 *)&v149, (uint64_t)v137);
  uint64_t v10 = (char *)(a1 + 384);
  int v11 = *(unsigned __int8 *)(a1 + 384);
  *(unsigned char *)(a1 + 384) = v137[0];
  v137[0] = v11;
  uint64_t v12 = *v7;
  std::__shared_weak_count *v7 = v138;
  uint64_t v138 = v12;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v138, v11);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v150, v149);
  if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v152.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v152, "model_type");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value("default", a2, (const void **)&v152.__r_.__value_.__l.__data_, &__p);
  if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v152.__r_.__value_.__l.__data_);
  }
  uint64_t v13 = (const char *)(a1 + 184);
  uint64_t v14 = *(long long ***)a3;
  uint64_t v15 = *(std::__shared_weak_count **)(a3 + 8);
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v16 = (std::__shared_weak_count *)v14[3];
  if (v16)
  {
    uint64_t v17 = std::__shared_weak_count::lock(v16);
    if (v17)
    {
      unint64_t v18 = v17;
      long long v19 = v14[2];
      if (v19
        && (uint64_t v20 = (uint64_t)v19 + 8,
            std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>((void *)v19 + 1, (unsigned __int8 *)(a1 + 184))))
      {
        v152.__r_.__value_.__r.__words[0] = a1 + 184;
        long long v21 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v20, (unsigned __int8 *)(a1 + 184), (long long **)&v152);
        int v22 = (void *)*((void *)v21 + 5);
        uint64_t v23 = (std::__shared_weak_count *)*((void *)v21 + 6);
        if (v23) {
          atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        uint64_t v23 = 0;
        int v22 = 0;
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v18);
      if (!v15) {
        goto LABEL_21;
      }
      goto LABEL_20;
    }
  }
  uint64_t v23 = 0;
  int v22 = 0;
  if (v15) {
LABEL_20:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
LABEL_21:
  unint64_t v134 = v23;
  if (!v22)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    if (*(char *)(a1 + 207) < 0) {
      uint64_t v13 = *(const char **)v13;
    }
    StringFormatter::StringFormatter((StringFormatter *)&v152, "Persitent module '%s' is null", v13);
    MEMORY[0x210558D40](exception, &v152);
    __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    p_std::string p = &__p;
    switch(*((unsigned char *)&__p.__r_.__value_.__s + 23))
    {
      case 3:
        if (LOWORD(__p.__r_.__value_.__l.__data_) != 12912 || __p.__r_.__value_.__s.__data_[2] != 97) {
          goto LABEL_339;
        }
        goto LABEL_35;
      case 6:
        if (LODWORD(__p.__r_.__value_.__l.__data_) != 1836020336 || WORD2(__p.__r_.__value_.__r.__words[0]) != 29808) {
          goto LABEL_339;
        }
        goto LABEL_142;
      case 7:
        if (LODWORD(__p.__r_.__value_.__l.__data_) != 1634100580
          || *(_DWORD *)((char *)__p.__r_.__value_.__r.__words + 3) != 1953264993)
        {
          goto LABEL_339;
        }
        goto LABEL_128;
      case 8:
        if (__p.__r_.__value_.__r.__words[0] != 0x6C6175645F613270) {
          goto LABEL_339;
        }
        goto LABEL_302;
      case 0xC:
        if (__p.__r_.__value_.__r.__words[0] != 0x64726F775F613270
          || LODWORD(__p.__r_.__value_.__r.__words[1]) != 1651336543)
        {
          goto LABEL_339;
        }
        goto LABEL_116;
      case 0x11:
        if (__p.__r_.__value_.__r.__words[0] != 0x6C6175645F613270
          || __p.__r_.__value_.__l.__size_ != 0x6D655F64726F775FLL
          || __p.__r_.__value_.__s.__data_[16] != 98)
        {
          goto LABEL_339;
        }
        goto LABEL_272;
      case 0x12:
        goto LABEL_173;
      case 0x13:
        if (__p.__r_.__value_.__r.__words[0] != 0x64726F775F613270
          || __p.__r_.__value_.__l.__size_ != 0x6169645F626D655FLL
          || *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 3) != 0x676F6C6169645F62)
        {
          goto LABEL_339;
        }
        goto LABEL_83;
      case 0x18:
        if (__p.__r_.__value_.__r.__words[0] != 0x6C6175645F613270
          || __p.__r_.__value_.__l.__size_ != 0x6D655F64726F775FLL
          || __p.__r_.__value_.__r.__words[2] != 0x676F6C6169645F62)
        {
          goto LABEL_339;
        }
        goto LABEL_279;
      default:
        goto LABEL_339;
    }
  }
  switch(__p.__r_.__value_.__l.__size_)
  {
    case 3uLL:
      if (*(_WORD *)__p.__r_.__value_.__l.__data_ != 12912 || *(unsigned char *)(__p.__r_.__value_.__r.__words[0] + 2) != 97) {
        goto LABEL_151;
      }
LABEL_35:
      uint64_t v28 = v22[37];
      uint64_t v27 = (std::__shared_weak_count *)v22[38];
      if (v27) {
        atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::string::size_type v29 = v22[39];
      long long v30 = (std::__shared_weak_count *)v22[40];
      if (v30) {
        atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int v31 = operator new(0x90uLL);
      long long v32 = v31;
      v31[1] = 0;
      v31[2] = 0;
      *int v31 = off_26C218350;
      uint64_t v33 = (uint64_t (***)())(v31 + 3);
      v152.__r_.__value_.__r.__words[0] = v29;
      v152.__r_.__value_.__l.__size_ = (std::string::size_type)v30;
      if (v30) {
        atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      FS2S1EncoderP2APromptInference::FS2S1EncoderP2APromptInference(v31 + 3, (uint64_t *)a2, v28, v27, (uint64_t *)&v152);
      goto LABEL_295;
    case 4uLL:
    case 5uLL:
    case 9uLL:
    case 0xAuLL:
    case 0xBuLL:
      goto LABEL_151;
    case 6uLL:
      if (*(_DWORD *)__p.__r_.__value_.__l.__data_ != 1836020336
        || *(_WORD *)(__p.__r_.__value_.__r.__words[0] + 4) != 29808)
      {
        goto LABEL_151;
      }
LABEL_142:
      std::string::size_type v61 = v22[37];
      uint64_t v62 = (std::__shared_weak_count *)v22[38];
      if (v62) {
        atomic_fetch_add_explicit(&v62->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::string::size_type v63 = (std::__shared_weak_count *)v22[39];
      long long v30 = (std::__shared_weak_count *)v22[40];
      if (v30) {
        atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      BOOL v64 = operator new(0x90uLL);
      unint64_t v65 = v64;
      v64[1] = 0;
      v64[2] = 0;
      *BOOL v64 = off_26C217E10;
      long long v66 = v64 + 3;
      v152.__r_.__value_.__r.__words[0] = v61;
      v152.__r_.__value_.__l.__size_ = (std::string::size_type)v62;
      uint64_t v149 = v63;
      long long v150 = v30;
      if (v30) {
        atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v23 = v134;
      FS2S1EncoderPromptInference::FS2S1EncoderPromptInference((uint64_t)(v64 + 3), (uint64_t *)a2, (uint64_t *)&v152, (uint64_t *)&v149);
      goto LABEL_309;
    case 7uLL:
      if (*(_DWORD *)__p.__r_.__value_.__l.__data_ != 1634100580
        || *(_DWORD *)(__p.__r_.__value_.__r.__words[0] + 3) != 1953264993)
      {
        goto LABEL_151;
      }
LABEL_128:
      std::chrono::steady_clock::time_point v54 = (std::__shared_weak_count *)v22[38];
      if (v54) {
        atomic_fetch_add_explicit(&v54->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v55 = v22[39];
      long long v30 = (std::__shared_weak_count *)v22[40];
      if (v30) {
        atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::chrono::steady_clock::time_point v56 = operator new(0x30uLL);
      std::chrono::steady_clock::time_point v57 = v56;
      v56[1] = 0;
      v56[2] = 0;
      void *v56 = off_26C217AC8;
      uint64_t v58 = v56 + 3;
      if (v30)
      {
        atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
        v56[3] = off_26C204030;
        v56[4] = v55;
        v56[5] = v30;
        atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
        std::__shared_weak_count::__release_shared[abi:ne180100](v30);
        if (!v54) {
          goto LABEL_135;
        }
        goto LABEL_134;
      }
      v56[3] = off_26C204030;
      v56[4] = v55;
      v56[5] = 0;
      if (v54) {
LABEL_134:
      }
        std::__shared_weak_count::__release_shared[abi:ne180100](v54);
LABEL_135:
      uint64_t v59 = *(std::__shared_weak_count **)(a1 + 360);
      *(void *)(a1 + 352) = v58;
      *(void *)(a1 + 360) = v57;
      if (!v59) {
        goto LABEL_316;
      }
      goto LABEL_315;
    case 8uLL:
      if (*(void *)__p.__r_.__value_.__l.__data_ != 0x6C6175645F613270)
      {
        if ((*((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x80) == 0) {
          goto LABEL_339;
        }
LABEL_151:
        if (__p.__r_.__value_.__l.__size_ == 17)
        {
          if (*(void *)__p.__r_.__value_.__l.__data_ == 0x6C6175645F613270
            && *(void *)(__p.__r_.__value_.__r.__words[0] + 8) == 0x6D655F64726F775FLL
            && *(unsigned char *)(__p.__r_.__value_.__r.__words[0] + 16) == 98)
          {
LABEL_272:
            uint64_t v109 = v22[37];
            uint64_t v27 = (std::__shared_weak_count *)v22[38];
            if (v27) {
              atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            std::string::size_type v110 = v22[39];
            long long v30 = (std::__shared_weak_count *)v22[40];
            if (v30) {
              atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            long long v111 = operator new(0xA0uLL);
            long long v32 = v111;
            v111[1] = 0;
            v111[2] = 0;
            void *v111 = off_26C21FEB8;
            uint64_t v33 = (uint64_t (***)())(v111 + 3);
            v152.__r_.__value_.__r.__words[0] = v110;
            v152.__r_.__value_.__l.__size_ = (std::string::size_type)v30;
            if (v30) {
              atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            FS2S1EncoderP2ADualPromptWordEmbInference::FS2S1EncoderP2ADualPromptWordEmbInference(v111 + 3, (uint64_t)a2, v109, v27, (uint64_t *)&v152);
            goto LABEL_295;
          }
          if ((*((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x80) == 0) {
            goto LABEL_339;
          }
        }
        if (__p.__r_.__value_.__l.__size_ != 24) {
          goto LABEL_171;
        }
        if (*(void *)__p.__r_.__value_.__l.__data_ != 0x6C6175645F613270
          || *(void *)(__p.__r_.__value_.__r.__words[0] + 8) != 0x6D655F64726F775FLL
          || *(void *)(__p.__r_.__value_.__r.__words[0] + 16) != 0x676F6C6169645F62)
        {
          if ((*((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x80) == 0)
          {
            if (HIBYTE(__p.__r_.__value_.__r.__words[2]) != 18) {
              goto LABEL_339;
            }
            p_std::string p = &__p;
LABEL_173:
            std::string::size_type v71 = p_p->__r_.__value_.__r.__words[0];
            std::string::size_type size = p_p->__r_.__value_.__l.__size_;
            int v73 = LOWORD(p_p->__r_.__value_.__r.__words[2]);
            if (v71 != 0x6C6175645F613270 || size != 0x73696D6974706F5FLL || v73 != 25701)
            {
LABEL_339:
              long long v125 = __cxa_allocate_exception(0x10uLL);
              long long v126 = &__p;
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                long long v126 = (std::string *)__p.__r_.__value_.__r.__words[0];
              }
              StringFormatter::StringFormatter((StringFormatter *)&v152, "Model type '%s' is not supported.", (const char *)v126);
              MEMORY[0x210558D40](v125, &v152);
              __cxa_throw(v125, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
            }
            uint64_t v77 = v22[37];
            long long v76 = (std::__shared_weak_count *)v22[38];
            if (v76) {
              atomic_fetch_add_explicit(&v76->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            uint64_t v78 = v22[39];
            uint64_t v79 = (std::__shared_weak_count *)v22[40];
            if (v79) {
              atomic_fetch_add_explicit(&v79->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            long long v131 = v79;
            uint64_t v80 = operator new(0xA0uLL);
            unint64_t v65 = v80;
            v80[1] = 0;
            v80[2] = 0;
            void *v80 = off_26C21FF58;
            if (v79) {
              atomic_fetch_add_explicit(&v79->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            unint64_t v133 = v80 + 3;
            if (v76) {
              atomic_fetch_add_explicit(&v76->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            if (v79) {
              atomic_fetch_add_explicit(&v79->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            v80[3] = off_26C204030;
            v80[4] = v78;
            v80[5] = v79;
            if (v79)
            {
              atomic_fetch_add_explicit(&v79->__shared_owners_, 1uLL, memory_order_relaxed);
              std::__shared_weak_count::__release_shared[abi:ne180100](v79);
            }
            if (v76) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v76);
            }
            *((_OWORD *)v65 + 3) = 0u;
            v65[3] = off_26C21FD68;
            *((_OWORD *)v65 + 4) = 0u;
            *((_OWORD *)v65 + 5) = 0u;
            *((_OWORD *)v65 + 6) = 0u;
            *((_OWORD *)v65 + 7) = 0u;
            *((_OWORD *)v65 + 8) = 0u;
            *((_OWORD *)v65 + 9) = 0u;
            uint64_t v132 = (InferenceEngine::DataTensor **)(v65 + 6);
            long long v130 = v76;
            std::string::basic_string[abi:ne180100]<0>(&v152, "mha_hidden_state");
            int parameter_value = InferenceEngine::MilInferenceModel::get_parameter_value_if<int>(*(void *)(v78 + 8), (const void **)&v152.__r_.__value_.__l.__data_, 512);
            if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v152.__r_.__value_.__l.__data_);
            }
            std::string::basic_string[abi:ne180100]<0>(&v152, "mha_n_heads");
            int v128 = InferenceEngine::MilInferenceModel::get_parameter_value_if<int>(*(void *)(v78 + 8), (const void **)&v152.__r_.__value_.__l.__data_, 16);
            if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v152.__r_.__value_.__l.__data_);
            }
            std::string::basic_string[abi:ne180100]<0>(&v152, "s1nar_encoder_layers");
            int v81 = InferenceEngine::MilInferenceModel::get_parameter_value_if<int>(*(void *)(v78 + 8), (const void **)&v152.__r_.__value_.__l.__data_, 4);
            if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v152.__r_.__value_.__l.__data_);
            }
            std::string::basic_string[abi:ne180100]<0>(&v152, "s1nar_fusion_layers");
            int v82 = InferenceEngine::MilInferenceModel::get_parameter_value_if<int>(*(void *)(v78 + 8), (const void **)&v152.__r_.__value_.__l.__data_, 3);
            if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v152.__r_.__value_.__l.__data_);
            }
            std::string::basic_string[abi:ne180100]<0>(&v152, "enc_prompt_k");
            uint64_t v83 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "encoder_prompt_k");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v83, &v148);
            (*(void (**)(std::__shared_weak_count **__return_ptr, uint64_t, uint64_t, std::string *, void))(*(void *)v77 + 40))(&v149, v77, 1717662579, &v148, 0);
            _ZN15InferenceEngine10DataTensor15build_from_fileIDF16_EENSt3__110shared_ptrIS0_EERKNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESC_(&v146, (uint64_t)&v152, (uint64_t)&v149);
            unint64_t v84 = (std::__shared_weak_count *)v65[7];
            *((_OWORD *)v65 + 3) = v146;
            if (v84) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v84);
            }
            if (SHIBYTE(v151) < 0) {
              operator delete(v149);
            }
            if (SHIBYTE(v148.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v148.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v152.__r_.__value_.__l.__data_);
            }
            std::string::basic_string[abi:ne180100]<0>(&v152, "enc_prompt_v");
            uint64_t v85 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "encoder_prompt_v");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v85, &v148);
            (*(void (**)(std::__shared_weak_count **__return_ptr, uint64_t, uint64_t, std::string *, void))(*(void *)v77 + 40))(&v149, v77, 1717662579, &v148, 0);
            _ZN15InferenceEngine10DataTensor15build_from_fileIDF16_EENSt3__110shared_ptrIS0_EERKNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESC_(&v146, (uint64_t)&v152, (uint64_t)&v149);
            unsigned int v86 = (std::__shared_weak_count *)v65[9];
            *((_OWORD *)v65 + 4) = v146;
            if (v86) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v86);
            }
            if (SHIBYTE(v151) < 0) {
              operator delete(v149);
            }
            if (SHIBYTE(v148.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v148.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v152.__r_.__value_.__l.__data_);
            }
            std::string::basic_string[abi:ne180100]<0>(&v152, "dur_input");
            uint64_t v87 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "duration_input_prompt");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v87, &v148);
            (*(void (**)(std::__shared_weak_count **__return_ptr, uint64_t, uint64_t, std::string *, void))(*(void *)v77 + 40))(&v149, v77, 1717662579, &v148, 0);
            _ZN15InferenceEngine10DataTensor15build_from_fileIDF16_EENSt3__110shared_ptrIS0_EERKNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESC_(&v146, (uint64_t)&v152, (uint64_t)&v149);
            uint64_t v88 = (std::__shared_weak_count *)v65[11];
            *((_OWORD *)v65 + 5) = v146;
            if (v88) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v88);
            }
            if (SHIBYTE(v151) < 0) {
              operator delete(v149);
            }
            if (SHIBYTE(v148.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v148.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v152.__r_.__value_.__l.__data_);
            }
            std::string::basic_string[abi:ne180100]<0>(&v152, "fus_prompt_k");
            uint64_t v89 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "fusion_prompt_k");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v89, &v148);
            (*(void (**)(std::__shared_weak_count **__return_ptr, uint64_t, uint64_t, std::string *, void))(*(void *)v77 + 40))(&v149, v77, 1717662579, &v148, 0);
            _ZN15InferenceEngine10DataTensor15build_from_fileIDF16_EENSt3__110shared_ptrIS0_EERKNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESC_(&v146, (uint64_t)&v152, (uint64_t)&v149);
            unint64_t v90 = (std::__shared_weak_count *)v65[13];
            *((_OWORD *)v65 + 6) = v146;
            if (v90) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v90);
            }
            if (SHIBYTE(v151) < 0) {
              operator delete(v149);
            }
            if (SHIBYTE(v148.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v148.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v152.__r_.__value_.__l.__data_);
            }
            std::string::basic_string[abi:ne180100]<0>(&v152, "fus_prompt_v");
            uint64_t v91 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "fusion_prompt_v");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v91, &v148);
            (*(void (**)(std::__shared_weak_count **__return_ptr, uint64_t, uint64_t, std::string *, void))(*(void *)v77 + 40))(&v149, v77, 1717662579, &v148, 0);
            _ZN15InferenceEngine10DataTensor15build_from_fileIDF16_EENSt3__110shared_ptrIS0_EERKNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESC_(&v146, (uint64_t)&v152, (uint64_t)&v149);
            char v92 = (std::__shared_weak_count *)v65[15];
            *((_OWORD *)v65 + 7) = v146;
            if (v92) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v92);
            }
            if (SHIBYTE(v151) < 0) {
              operator delete(v149);
            }
            if (SHIBYTE(v148.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v148.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v152.__r_.__value_.__l.__data_);
            }
            std::string::basic_string[abi:ne180100]<0>(&v152, "fusion_cross_prompt_k");
            uint64_t v93 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "fusion_cross_prompt_k");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v93, &v148);
            (*(void (**)(std::__shared_weak_count **__return_ptr, uint64_t, uint64_t, std::string *, void))(*(void *)v77 + 40))(&v149, v77, 1717662579, &v148, 0);
            _ZN15InferenceEngine10DataTensor15build_from_fileIDF16_EENSt3__110shared_ptrIS0_EERKNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESC_(&v146, (uint64_t)&v152, (uint64_t)&v149);
            unint64_t v94 = (std::__shared_weak_count *)v65[17];
            *((_OWORD *)v65 + 8) = v146;
            if (v94) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v94);
            }
            if (SHIBYTE(v151) < 0) {
              operator delete(v149);
            }
            if (SHIBYTE(v148.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v148.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v152.__r_.__value_.__l.__data_);
            }
            std::string::basic_string[abi:ne180100]<0>(&v152, "fusion_cross_prompt_v");
            uint64_t v95 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "fusion_cross_prompt_v");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v95, &v148);
            (*(void (**)(std::__shared_weak_count **__return_ptr, uint64_t, uint64_t, std::string *, void))(*(void *)v77 + 40))(&v149, v77, 1717662579, &v148, 0);
            _ZN15InferenceEngine10DataTensor15build_from_fileIDF16_EENSt3__110shared_ptrIS0_EERKNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESC_(&v146, (uint64_t)&v152, (uint64_t)&v149);
            uint64_t v96 = (std::__shared_weak_count *)v65[19];
            *((_OWORD *)v65 + 9) = v146;
            if (v96) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v96);
            }
            if (SHIBYTE(v151) < 0) {
              operator delete(v149);
            }
            if (SHIBYTE(v148.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v148.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v152.__r_.__value_.__l.__data_);
            }
            InferenceEngine::DataTensor::get_shape(*v132, 0, &v152.__r_.__value_.__l.__data_);
            int v97 = v82;
            unint64_t v98 = *(void *)v152.__r_.__value_.__l.__data_;
            v152.__r_.__value_.__l.__size_ = v152.__r_.__value_.__r.__words[0];
            operator delete(v152.__r_.__value_.__l.__data_);
            InferenceEngine::DataTensor::get_shape((InferenceEngine::DataTensor *)v65[12], 0, &v152.__r_.__value_.__l.__data_);
            unint64_t v99 = *(void *)v152.__r_.__value_.__l.__data_;
            v152.__r_.__value_.__l.__size_ = v152.__r_.__value_.__r.__words[0];
            operator delete(v152.__r_.__value_.__l.__data_);
            InferenceEngine::DataTensor::get_shape((InferenceEngine::DataTensor *)v65[16], 0, &v152.__r_.__value_.__l.__data_);
            unint64_t v100 = *(void *)v152.__r_.__value_.__l.__data_;
            v152.__r_.__value_.__l.__size_ = v152.__r_.__value_.__r.__words[0];
            operator delete(v152.__r_.__value_.__l.__data_);
            uint64_t v101 = operator new(0x20uLL);
            unint64_t v102 = parameter_value / (unint64_t)v128;
            unint64_t v103 = v98 / (v81 * (uint64_t)v128 * v102);
            v152.__r_.__value_.__l.__size_ = (std::string::size_type)(v101 + 4);
            v152.__r_.__value_.__r.__words[2] = (std::string::size_type)(v101 + 4);
            *uint64_t v101 = v81;
            v101[1] = v103;
            v101[2] = v128;
            v101[3] = v102;
            v152.__r_.__value_.__r.__words[0] = (std::string::size_type)v101;
            long long v104 = (uint64_t *)operator new(0x18uLL);
            long long v150 = (std::__shared_weak_count *)(v104 + 3);
            long long v151 = v104 + 3;
            uint64_t *v104 = 1;
            v104[1] = v103;
            v104[2] = parameter_value;
            uint64_t v149 = (std::__shared_weak_count *)v104;
            unint64_t v105 = operator new(0x20uLL);
            unint64_t v106 = v97 * (uint64_t)v128 * v102;
            v148.__r_.__value_.__l.__size_ = (std::string::size_type)(v105 + 4);
            v148.__r_.__value_.__r.__words[2] = (std::string::size_type)(v105 + 4);
            *unint64_t v105 = v97;
            v105[1] = v99 / v106;
            v105[2] = v128;
            v105[3] = v102;
            v148.__r_.__value_.__r.__words[0] = (std::string::size_type)v105;
            uint64_t v107 = operator new(0x20uLL);
            *((void *)&v146 + 1) = v107 + 4;
            long long v147 = v107 + 4;
            *uint64_t v107 = v97;
            v107[1] = v100 / v106;
            v107[2] = v128;
            v107[3] = v102;
            *(void *)&long long v146 = v107;
            long long v30 = v131;
            InferenceEngine::DataTensor::reshape(*v132, (uint64_t)&v152);
            uint64_t v10 = (char *)(a1 + 384);
            InferenceEngine::DataTensor::reshape((InferenceEngine::DataTensor *)v65[8], (uint64_t)&v152);
            InferenceEngine::DataTensor::reshape((InferenceEngine::DataTensor *)v65[12], (uint64_t)&v148);
            InferenceEngine::DataTensor::reshape((InferenceEngine::DataTensor *)v65[14], (uint64_t)&v148);
            InferenceEngine::DataTensor::reshape((InferenceEngine::DataTensor *)v65[16], (uint64_t)&v146);
            InferenceEngine::DataTensor::reshape((InferenceEngine::DataTensor *)v65[18], (uint64_t)&v146);
            InferenceEngine::DataTensor::reshape((InferenceEngine::DataTensor *)v65[10], (uint64_t)&v149);
            uint64_t v23 = v134;
            if ((void)v146)
            {
              *((void *)&v146 + 1) = v146;
              operator delete((void *)v146);
            }
            if (v148.__r_.__value_.__r.__words[0])
            {
              v148.__r_.__value_.__l.__size_ = v148.__r_.__value_.__r.__words[0];
              operator delete(v148.__r_.__value_.__l.__data_);
            }
            if (v149)
            {
              long long v150 = v149;
              operator delete(v149);
            }
            if (v152.__r_.__value_.__r.__words[0])
            {
              v152.__r_.__value_.__l.__size_ = v152.__r_.__value_.__r.__words[0];
              operator delete(v152.__r_.__value_.__l.__data_);
            }
            if (v131) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v131);
            }
            if (v130) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v130);
            }
            *(void *)&long long v108 = v133;
            goto LABEL_314;
          }
LABEL_171:
          if (__p.__r_.__value_.__l.__size_ != 18) {
            goto LABEL_339;
          }
          p_std::string p = (std::string *)__p.__r_.__value_.__r.__words[0];
          goto LABEL_173;
        }
LABEL_279:
        uint64_t v112 = v22[37];
        uint64_t v27 = (std::__shared_weak_count *)v22[38];
        if (v27) {
          atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        std::string::size_type v113 = v22[39];
        long long v30 = (std::__shared_weak_count *)v22[40];
        if (v30) {
          atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v114 = operator new(0xA0uLL);
        long long v32 = v114;
        v114[1] = 0;
        v114[2] = 0;
        void *v114 = off_26C21FF08;
        if (v30) {
          atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v33 = (uint64_t (***)())(v114 + 3);
        if (v27) {
          atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        v152.__r_.__value_.__r.__words[0] = v113;
        v152.__r_.__value_.__l.__size_ = (std::string::size_type)v30;
        if (v30) {
          atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        FS2S1EncoderP2ADualPromptWordEmbInference::FS2S1EncoderP2ADualPromptWordEmbInference(v114 + 3, (uint64_t)a2, v112, v27, (uint64_t *)&v152);
        if (v30) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v30);
        }
        if (v27) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v27);
        }
        unint64_t v45 = off_26C21FD18;
LABEL_294:
        std::__shared_weak_count *v33 = v45;
LABEL_295:
        if (v30) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v30);
        }
        if (v27) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v27);
        }
        *(void *)&long long v115 = v33;
        *((void *)&v115 + 1) = v32;
        long long v116 = *(std::__shared_weak_count **)(a1 + 360);
        *(_OWORD *)(a1 + 352) = v115;
        if (v116) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v116);
        }
        uint64_t v23 = v134;
        goto LABEL_316;
      }
LABEL_302:
      std::string::size_type v117 = v22[37];
      uint64_t v62 = (std::__shared_weak_count *)v22[38];
      if (v62) {
        atomic_fetch_add_explicit(&v62->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      unint64_t v118 = (std::__shared_weak_count *)v22[39];
      long long v30 = (std::__shared_weak_count *)v22[40];
      if (v30) {
        atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v119 = operator new(0xA0uLL);
      unint64_t v65 = v119;
      v119[1] = 0;
      v119[2] = 0;
      void *v119 = off_26C1EE318;
      long long v66 = v119 + 3;
      v152.__r_.__value_.__r.__words[0] = v117;
      v152.__r_.__value_.__l.__size_ = (std::string::size_type)v62;
      uint64_t v149 = v118;
      long long v150 = v30;
      if (v30) {
        atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v23 = v134;
      FS2S1EncoderP2ADualPromptInference::FS2S1EncoderP2ADualPromptInference((uint64_t)(v119 + 3), (uint64_t)a2, (uint64_t *)&v152, (uint64_t *)&v149);
LABEL_309:
      if (v30) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v30);
      }
      if (v62) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v62);
      }
      *(void *)&long long v108 = v66;
LABEL_314:
      *((void *)&v108 + 1) = v65;
      uint64_t v59 = *(std::__shared_weak_count **)(a1 + 360);
      *(_OWORD *)(a1 + 352) = v108;
      if (v59) {
LABEL_315:
      }
        std::__shared_weak_count::__release_shared[abi:ne180100](v59);
LABEL_316:
      if (v30) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v30);
      }
      *(unsigned char *)(a1 + 272) = 0;
      std::string::basic_string[abi:ne180100]<0>(&v152, "frame_shift");
      LODWORD(v149) = 480;
      *(_DWORD *)(a1 + 412) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>(v10, (const void **)&v152.__r_.__value_.__l.__data_, (unsigned int *)&v149);
      if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v152.__r_.__value_.__l.__data_);
      }
      std::string::basic_string[abi:ne180100]<0>(&v152, "frame_duration");
      LODWORD(v149) = 20;
      *(_DWORD *)(a1 + 400) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>(v10, (const void **)&v152.__r_.__value_.__l.__data_, (unsigned int *)&v149);
      if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v152.__r_.__value_.__l.__data_);
      }
      std::string::basic_string[abi:ne180100]<0>(&v152, "frames_per_alignment");
      LODWORD(v149) = 1;
      *(_DWORD *)(a1 + 408) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>(v10, (const void **)&v152.__r_.__value_.__l.__data_, (unsigned int *)&v149);
      if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v152.__r_.__value_.__l.__data_);
      }
      std::string::basic_string[abi:ne180100]<0>(&v152, "samples_per_frame");
      LODWORD(v149) = 960;
      *(_DWORD *)(a1 + 404) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>(v10, (const void **)&v152.__r_.__value_.__l.__data_, (unsigned int *)&v149);
      if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v152.__r_.__value_.__l.__data_);
      }
      long long v135 = (uint64_t *)*(int *)(a1 + 400);
      std::string::size_type v120 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)v10, "ms_per_frame");
      int v121 = *(unsigned __int8 *)v120;
      *(unsigned char *)std::string::size_type v120 = 5;
      long long v122 = (uint64_t *)v120[1];
      v120[1] = (uint64_t)v135;
      long long v135 = v122;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v135, v121);
      std::allocate_shared[abi:ne180100]<TacotronAlignment,std::allocator<TacotronAlignment>,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &,void>((uint64_t *)&v152, v10);
      long long v123 = *(std::__shared_weak_count **)(a1 + 376);
      *(_OWORD *)(a1 + 368) = *(_OWORD *)&v152.__r_.__value_.__l.__data_;
      if (v123) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v123);
      }
      if (v23) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v23);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v140, v139[0]);
      if (v142 < 0) {
        operator delete(v141[0]);
      }
      if (v144) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v144);
      }
      return a1;
    case 0xCuLL:
      if (*(void *)__p.__r_.__value_.__l.__data_ != 0x64726F775F613270
        || *(_DWORD *)(__p.__r_.__value_.__r.__words[0] + 8) != 1651336543)
      {
        goto LABEL_151;
      }
LABEL_116:
      uint64_t v50 = v22[37];
      uint64_t v27 = (std::__shared_weak_count *)v22[38];
      if (v27) {
        atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::string::size_type v51 = v22[39];
      long long v30 = (std::__shared_weak_count *)v22[40];
      if (v30) {
        atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v52 = operator new(0x90uLL);
      long long v32 = v52;
      v52[1] = 0;
      v52[2] = 0;
      *uint64_t v52 = off_26C21FE18;
      uint64_t v33 = (uint64_t (***)())(v52 + 3);
      v152.__r_.__value_.__r.__words[0] = v51;
      v152.__r_.__value_.__l.__size_ = (std::string::size_type)v30;
      if (v30) {
        atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      FS2S1EncoderP2APromptWordEmbInference::FS2S1EncoderP2APromptWordEmbInference(v52 + 3, (uint64_t *)a2, v50, v27, (uint64_t *)&v152);
      goto LABEL_295;
    default:
      if (__p.__r_.__value_.__l.__size_ != 19) {
        goto LABEL_151;
      }
      BOOL v34 = *(void *)__p.__r_.__value_.__l.__data_ == 0x64726F775F613270
         && *(void *)(__p.__r_.__value_.__r.__words[0] + 8) == 0x6169645F626D655FLL;
      if (!v34 || *(void *)(__p.__r_.__value_.__r.__words[0] + 11) != 0x676F6C6169645F62) {
        goto LABEL_151;
      }
LABEL_83:
      uint64_t v42 = v22[37];
      uint64_t v27 = (std::__shared_weak_count *)v22[38];
      if (v27) {
        atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::string::size_type v43 = v22[39];
      long long v30 = (std::__shared_weak_count *)v22[40];
      if (v30) {
        atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      char v44 = operator new(0x90uLL);
      long long v32 = v44;
      v44[1] = 0;
      v44[2] = 0;
      void *v44 = off_26C21FE68;
      if (v30) {
        atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v33 = (uint64_t (***)())(v44 + 3);
      if (v27) {
        atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      v152.__r_.__value_.__r.__words[0] = v43;
      v152.__r_.__value_.__l.__size_ = (std::string::size_type)v30;
      if (v30) {
        atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      FS2S1EncoderP2APromptWordEmbInference::FS2S1EncoderP2APromptWordEmbInference(v44 + 3, (uint64_t *)a2, v42, v27, (uint64_t *)&v152);
      if (v30) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v30);
      }
      if (v27) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v27);
      }
      unint64_t v45 = off_26C21FC88;
      goto LABEL_294;
  }
}

void sub_20D4831E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t **a19, std::__shared_weak_count *a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,unsigned __int8 a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,std::__shared_weak_count *a40)
{
  if (v41) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v41);
  }
  if (v42) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v42);
  }
  if (v41) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v41);
  }
  if (v42) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v42);
  }
  std::__shared_weak_count::~__shared_weak_count(v43);
  operator delete(v45);
  if (v41) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v41);
  }
  if (a20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a20);
  }
  if (a28 < 0) {
    operator delete(__p);
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&a32, a31);
  if (a38 < 0) {
    operator delete(a33);
  }
  if (a40) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a40);
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(a19, *(unsigned __int8 *)(v40 + 384));
  uint64_t v46 = *(std::__shared_weak_count **)(v40 + 376);
  if (v46) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v46);
  }
  uint64_t v47 = *(std::__shared_weak_count **)(v40 + 360);
  if (v47) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v47);
  }
  std::mutex::~mutex((std::mutex *)(v40 + 280));
  Module::~Module((Module *)v40);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<FS2S1EncoderP2ADualPromptOptimisedInference>::__on_zero_shared(void *a1)
{
  a1[3] = off_26C21FD68;
  uint64_t v2 = (std::__shared_weak_count *)a1[19];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[17];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[15];
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)a1[13];
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  uint64_t v6 = (std::__shared_weak_count *)a1[11];
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  uint64_t v7 = (std::__shared_weak_count *)a1[9];
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  uint64_t v8 = (std::__shared_weak_count *)a1[7];
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  a1[3] = off_26C204030;
  uint64_t v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
}

void std::__shared_ptr_emplace<FS2S1EncoderP2ADualPromptOptimisedInference>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C21FF58;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<FS2S1EncoderP2ADualPromptOptimisedInference>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C21FF58;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<FS2S1EncoderP2ADualPromptWordEmbDialogInference>::__on_zero_shared(uint64_t a1)
{
}

void FS2S1EncoderP2ADualPromptInference::~FS2S1EncoderP2ADualPromptInference(FS2S1EncoderP2ADualPromptInference *this)
{
  *(void *)this = off_26C1EDB80;
  uint64_t v2 = (void *)*((void *)this + 14);
  if (v2)
  {
    *((void *)this + 15) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 11);
  if (v3)
  {
    *((void *)this + 12) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 10);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 8);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 6);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  *(void *)this = off_26C204030;
  uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
}

void std::__shared_ptr_emplace<FS2S1EncoderP2ADualPromptWordEmbDialogInference>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C21FF08;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<FS2S1EncoderP2ADualPromptWordEmbDialogInference>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C21FF08;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<FS2S1EncoderP2ADualPromptWordEmbInference>::__on_zero_shared(uint64_t a1)
{
}

void std::__shared_ptr_emplace<FS2S1EncoderP2ADualPromptWordEmbInference>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C21FEB8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<FS2S1EncoderP2ADualPromptWordEmbInference>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C21FEB8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<FS2S1EncoderP2ADualPromptInference>::__on_zero_shared(uint64_t a1)
{
}

void std::__shared_ptr_emplace<FS2S1EncoderP2ADualPromptInference>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C1EE318;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<FS2S1EncoderP2ADualPromptInference>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C1EE318;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<FS2S1EncoderP2APromptWordEmbDialogInference>::__on_zero_shared(uint64_t a1)
{
  *(void *)(a1 + ++*(_DWORD *)(result + 24) = off_26C204578;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)(a1 + 136), *(unsigned __int8 *)(a1 + 128));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 120);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = *(void **)(a1 + 88);
  if (v3)
  {
    *(void *)(a1 + 96) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 80);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1 + 48, *(void **)(a1 + 56));
  *(void *)(a1 + ++*(_DWORD *)(result + 24) = off_26C204030;
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 40);
  if (v5)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void std::__shared_ptr_emplace<FS2S1EncoderP2APromptWordEmbDialogInference>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C21FE68;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<FS2S1EncoderP2APromptWordEmbDialogInference>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C21FE68;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<FS2S1EncoderP2APromptWordEmbInference>::__on_zero_shared(uint64_t a1)
{
  *(void *)(a1 + ++*(_DWORD *)(result + 24) = off_26C204578;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)(a1 + 136), *(unsigned __int8 *)(a1 + 128));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 120);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = *(void **)(a1 + 88);
  if (v3)
  {
    *(void *)(a1 + 96) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 80);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1 + 48, *(void **)(a1 + 56));
  *(void *)(a1 + ++*(_DWORD *)(result + 24) = off_26C204030;
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 40);
  if (v5)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void std::__shared_ptr_emplace<FS2S1EncoderP2APromptWordEmbInference>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C21FE18;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<FS2S1EncoderP2APromptWordEmbInference>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C21FE18;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<FS2S1EncoderP2APromptInference>::__on_zero_shared(uint64_t a1)
{
  *(void *)(a1 + ++*(_DWORD *)(result + 24) = off_26C204578;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)(a1 + 136), *(unsigned __int8 *)(a1 + 128));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 120);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = *(void **)(a1 + 88);
  if (v3)
  {
    *(void *)(a1 + 96) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 80);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1 + 48, *(void **)(a1 + 56));
  *(void *)(a1 + ++*(_DWORD *)(result + 24) = off_26C204030;
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 40);
  if (v5)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void std::__shared_ptr_emplace<FS2S1EncoderP2APromptInference>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C218350;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<FS2S1EncoderP2APromptInference>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C218350;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<FS2S1EncoderPromptInference>::__on_zero_shared(uint64_t a1)
{
  *(void *)(a1 + ++*(_DWORD *)(result + 24) = off_26C204578;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)(a1 + 136), *(unsigned __int8 *)(a1 + 128));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 120);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = *(void **)(a1 + 88);
  if (v3)
  {
    *(void *)(a1 + 96) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 80);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1 + 48, *(void **)(a1 + 56));
  *(void *)(a1 + ++*(_DWORD *)(result + 24) = off_26C204030;
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 40);
  if (v5)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void std::__shared_ptr_emplace<FS2S1EncoderPromptInference>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C217E10;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<FS2S1EncoderPromptInference>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C217E10;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<FS2S1EncoderBaseInference>::__on_zero_shared(uint64_t a1)
{
  *(void *)(a1 + ++*(_DWORD *)(result + 24) = off_26C204030;
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void std::__shared_ptr_emplace<FS2S1EncoderBaseInference>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C217AC8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<FS2S1EncoderBaseInference>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C217AC8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void FS2S1EncoderPersistentModule::~FS2S1EncoderPersistentModule(FS2S1EncoderPersistentModule *this)
{
  *(void *)this = off_26C204850;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 40);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 38);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  PersistentModule::~PersistentModule((void **)this);
  JUMPOUT(0x2105595E0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = off_26C204850;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 40);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 38);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  PersistentModule::~PersistentModule((void **)this);
}

void PhrasingImpl::generate_tokens(PhrasingImpl *this)
{
  uint64_t v209 = *MEMORY[0x263EF8340];
  {
    std::string::basic_string[abi:ne180100]<0>(&__v, ".");
    std::string::basic_string[abi:ne180100]<0>(&__v.__end_cap_.__value_, "!");
    std::string::basic_string[abi:ne180100]<0>((void *)&v206 + 1, "?");
    std::set<std::string>::set[abi:ne180100]((uint64_t)&v196, (const void **)&__v.__first_, 3);
    NeverDestructed<std::set<std::string>>::NeverDestructed<>();
  }
  unint64_t v2 = 0;
  unint64_t v3 = 0;
  int v190 = (uint64_t *)((char *)this + 152);
  int v191 = (char *)this + 192;
  int v193 = (void **)((char *)this + 176);
  do
  {
    (*(void (**)(std::string *__return_ptr))(**((void **)this + 2) + 16))(&buf);
    unint64_t v4 = v2;
    uint64_t v5 = buf.__r_.__value_.__r.__words[0];
    if (!buf.__r_.__value_.__r.__words[0])
    {
      char v13 = 0;
      unint64_t v2 = v4;
      goto LABEL_89;
    }
    if ((void *)(v5 + 8) == v6)
    {
      exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
      StringFormatter::StringFormatter((StringFormatter *)&__v, "Token missing TokenBasicItem");
      MEMORY[0x210558D40](exception, &__v);
      __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
    }
    uint64_t v7 = v6[5];
    int v9 = *(_DWORD *)(v7 + 8);
    BOOL v10 = (void *)(v5 + 8) != v8 && v9 == 1952807028;
    if (v10)
    {
      uint64_t v14 = (long long *)(v8[5] + 8);
      memset(&v196, 0, sizeof(v196));
      unint64_t v11 = v4;
      v196.__end_ = (std::vector<std::string>::pointer)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v196, v14);
      std::string::basic_string[abi:ne180100]<0>(__p, "null");
      std::vector<std::string>::pointer end = v196.__end_;
      if (v196.__end_ >= v196.__end_cap_.__value_)
      {
        unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * (((char *)v196.__end_ - (char *)v196.__begin_) >> 3);
        unint64_t v21 = v20 + 1;
        if (v20 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        if (0x5555555555555556 * (((char *)v196.__end_cap_.__value_ - (char *)v196.__begin_) >> 3) > v21) {
          unint64_t v21 = 0x5555555555555556 * (((char *)v196.__end_cap_.__value_ - (char *)v196.__begin_) >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * (((char *)v196.__end_cap_.__value_ - (char *)v196.__begin_) >> 3) >= 0x555555555555555) {
          unint64_t v22 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v22 = v21;
        }
        __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v196.__end_cap_;
        if (v22) {
          uint64_t v23 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v196.__end_cap_, v22);
        }
        else {
          uint64_t v23 = 0;
        }
        std::string v35 = v23 + v20;
        __v.__first_ = v23;
        __v.__begin_ = v35;
        __v.__end_cap_.__value_ = &v23[v22];
        long long v36 = *(_OWORD *)__p;
        v35->__r_.__value_.__r.__words[2] = v204;
        *(_OWORD *)&v35->__r_.__value_.__l.__data_ = v36;
        __p[1] = 0;
        std::string::size_type v204 = 0;
        __p[0] = 0;
        __v.__end_ = v35 + 1;
        std::vector<std::string>::__swap_out_circular_buffer(&v196, &__v);
        std::string v37 = v196.__end_;
        std::__split_buffer<std::string>::~__split_buffer(&__v);
        v196.__end_ = v37;
        if (SHIBYTE(v204) < 0) {
          operator delete(__p[0]);
        }
      }
      else
      {
        long long v16 = *(_OWORD *)__p;
        v196.__end_->__r_.__value_.__r.__words[2] = v204;
        *(_OWORD *)&end->__r_.__value_.__l.__data_ = v16;
        v196.__end_ = end + 1;
      }
      unint64_t v38 = *((void *)this + 20);
      if (v38 >= *((void *)this + 21))
      {
        uint64_t v39 = std::vector<std::vector<std::string>>::__push_back_slow_path<std::vector<std::string> const&>(v190, (long long **)&v196);
      }
      else
      {
        std::vector<std::vector<std::string>>::__construct_one_at_end[abi:ne180100]<std::vector<std::string> const&>((uint64_t)v190, (long long **)&v196);
        uint64_t v39 = v38 + 24;
      }
      *((void *)this + 20) = v39;
      uint64_t v25 = (char *)*((void *)this + 23);
      unint64_t v40 = *((void *)this + 24);
      if ((unint64_t)v25 >= v40)
      {
        uint64_t v26 = (char *)*v193;
        uint64_t v42 = (v25 - (unsigned char *)*v193) >> 3;
        unint64_t v43 = v42 + 1;
        if ((unint64_t)(v42 + 1) >> 61) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v44 = v40 - (void)v26;
        if (v44 >> 2 > v43) {
          unint64_t v43 = v44 >> 2;
        }
        if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v30 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v30 = v43;
        }
        if (v30)
        {
          int v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v191, v30);
          uint64_t v26 = (char *)*((void *)this + 22);
          uint64_t v25 = (char *)*((void *)this + 23);
        }
        else
        {
          int v31 = 0;
        }
        unint64_t v45 = &v31[8 * v42];
        *(void *)unint64_t v45 = v4;
        char v41 = v45 + 8;
        while (v25 != v26)
        {
          uint64_t v46 = *((void *)v25 - 1);
          v25 -= 8;
          *((void *)v45 - 1) = v46;
          v45 -= 8;
        }
        goto LABEL_75;
      }
LABEL_58:
      *(void *)uint64_t v25 = v11;
      char v41 = v25 + 8;
LABEL_77:
      *((void *)this + 23) = v41;
      __v.__first_ = (std::__split_buffer<std::string>::pointer)&v196;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
      goto LABEL_78;
    }
    unint64_t v11 = v4;
    if (v9 <= 1886809698)
    {
      if (v9 != 1885892462 && v9 != 1886547312) {
        goto LABEL_78;
      }
      goto LABEL_20;
    }
    if (v9 != 1886809699)
    {
      if (v9 != 1952807028)
      {
LABEL_78:
        unint64_t v48 = v3;
        goto LABEL_79;
      }
LABEL_20:
      std::string::basic_string[abi:ne180100]<0>(&__v, "null");
      std::string::basic_string[abi:ne180100]<0>(&__v.__end_cap_.__value_, "null");
      memset(&v196, 0, sizeof(v196));
      __p[0] = &v196;
      LOBYTE(__p[1]) = 0;
      v196.__begin_ = (std::vector<std::string>::pointer)operator new(0x30uLL);
      v196.__end_ = v196.__begin_;
      v196.__end_cap_.__value_ = v196.__begin_ + 2;
      uint64_t v17 = 0;
      v196.__end_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v196.__end_cap_, (long long *)&__v, (long long *)((char *)&v206 + 8), v196.__begin_);
      unint64_t v11 = v4;
      do
      {
        if (*((char *)&v206 + v17 * 8 + 7) < 0) {
          operator delete((&__v.__end_cap_.__value_)[v17]);
        }
        v17 -= 3;
      }
      while (v17 != -6);
      unint64_t v18 = *((void *)this + 20);
      if (v18 >= *((void *)this + 21))
      {
        uint64_t v19 = std::vector<std::vector<std::string>>::__push_back_slow_path<std::vector<std::string> const&>(v190, (long long **)&v196);
      }
      else
      {
        std::vector<std::vector<std::string>>::__construct_one_at_end[abi:ne180100]<std::vector<std::string> const&>((uint64_t)v190, (long long **)&v196);
        uint64_t v19 = v18 + 24;
      }
      *((void *)this + 20) = v19;
      uint64_t v25 = (char *)*((void *)this + 23);
      unint64_t v24 = *((void *)this + 24);
      if ((unint64_t)v25 >= v24)
      {
        uint64_t v26 = (char *)*v193;
        uint64_t v27 = (v25 - (unsigned char *)*v193) >> 3;
        unint64_t v28 = v27 + 1;
        if ((unint64_t)(v27 + 1) >> 61) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v29 = v24 - (void)v26;
        if (v29 >> 2 > v28) {
          unint64_t v28 = v29 >> 2;
        }
        if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v30 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v30 = v28;
        }
        if (v30)
        {
          int v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v191, v30);
          uint64_t v26 = (char *)*((void *)this + 22);
          uint64_t v25 = (char *)*((void *)this + 23);
        }
        else
        {
          int v31 = 0;
        }
        unint64_t v45 = &v31[8 * v27];
        *(void *)unint64_t v45 = v4;
        char v41 = v45 + 8;
        while (v25 != v26)
        {
          uint64_t v47 = *((void *)v25 - 1);
          v25 -= 8;
          *((void *)v45 - 1) = v47;
          v45 -= 8;
        }
LABEL_75:
        *((void *)this + 22) = v45;
        *((void *)this + 23) = v41;
        *((void *)this + ++*(_DWORD *)(result + 24) = &v31[8 * v30];
        if (v26) {
          operator delete(v26);
        }
        goto LABEL_77;
      }
      goto LABEL_58;
    }
    if (*((void *)this + 22) == *((void *)this + 23))
    {
      std::string::basic_string[abi:ne180100]<0>(&__v, "null");
      std::string::basic_string[abi:ne180100]<0>(&__v.__end_cap_.__value_, "null");
      memset(&v196, 0, sizeof(v196));
      __p[0] = &v196;
      LOBYTE(__p[1]) = 0;
      v196.__begin_ = (std::vector<std::string>::pointer)operator new(0x30uLL);
      v196.__end_ = v196.__begin_;
      v196.__end_cap_.__value_ = v196.__begin_ + 2;
      uint64_t v32 = 0;
      v196.__end_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v196.__end_cap_, (long long *)&__v, (long long *)((char *)&v206 + 8), v196.__begin_);
      do
      {
        if (*((char *)&v206 + v32 * 8 + 7) < 0) {
          operator delete((&__v.__end_cap_.__value_)[v32]);
        }
        v32 -= 3;
      }
      while (v32 != -6);
      unint64_t v33 = *((void *)this + 20);
      if (v33 >= *((void *)this + 21))
      {
        uint64_t v34 = std::vector<std::vector<std::string>>::__push_back_slow_path<std::vector<std::string> const&>(v190, (long long **)&v196);
      }
      else
      {
        std::vector<std::vector<std::string>>::__construct_one_at_end[abi:ne180100]<std::vector<std::string> const&>((uint64_t)v190, (long long **)&v196);
        uint64_t v34 = v33 + 24;
      }
      *((void *)this + 20) = v34;
      uint64_t v55 = (char *)*((void *)this + 23);
      unint64_t v54 = *((void *)this + 24);
      if ((unint64_t)v55 >= v54)
      {
        std::chrono::steady_clock::time_point v57 = (char *)*v193;
        uint64_t v58 = (v55 - (unsigned char *)*v193) >> 3;
        unint64_t v59 = v58 + 1;
        if ((unint64_t)(v58 + 1) >> 61) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v60 = v54 - (void)v57;
        if (v60 >> 2 > v59) {
          unint64_t v59 = v60 >> 2;
        }
        if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v61 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v61 = v59;
        }
        if (v61)
        {
          uint64_t v62 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v191, v61);
          std::chrono::steady_clock::time_point v57 = (char *)*((void *)this + 22);
          uint64_t v55 = (char *)*((void *)this + 23);
        }
        else
        {
          uint64_t v62 = 0;
        }
        std::string::size_type v63 = &v62[8 * v58];
        *(void *)std::string::size_type v63 = v4;
        std::chrono::steady_clock::time_point v56 = v63 + 8;
        while (v55 != v57)
        {
          uint64_t v64 = *((void *)v55 - 1);
          v55 -= 8;
          *((void *)v63 - 1) = v64;
          v63 -= 8;
        }
        *((void *)this + 22) = v63;
        *((void *)this + 23) = v56;
        *((void *)this + ++*(_DWORD *)(result + 24) = &v62[8 * v61];
        if (v57) {
          operator delete(v57);
        }
      }
      else
      {
        *(void *)uint64_t v55 = v4;
        std::chrono::steady_clock::time_point v56 = v55 + 8;
      }
      *((void *)this + 23) = v56;
      __v.__first_ = (std::__split_buffer<std::string>::pointer)&v196;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
    }
    uint64_t v65 = *((void *)this + 20);
    if (*((void *)this + 19) != v65)
    {
      uint64_t v66 = *(void *)(v65 - 16);
      if (*(char *)(v7 + 55) >= 0) {
        std::chrono::steady_clock::time_point v67 = (char *)(v7 + 32);
      }
      else {
        std::chrono::steady_clock::time_point v67 = *(char **)(v7 + 32);
      }
      int v68 = *v67;
      if (v68 > 57)
      {
        if (v68 == 58)
        {
          std::string::size_type v69 = "colon";
        }
        else if (v68 == 59)
        {
          std::string::size_type v69 = "semicolon";
        }
        else
        {
          std::string::size_type v69 = "question";
          if (v68 != 63) {
            goto LABEL_129;
          }
        }
      }
      else
      {
        switch(v68)
        {
          case '!':
            std::string::size_type v69 = "exclamation";
            break;
          case ',':
            std::string::size_type v69 = "comma";
            break;
          case '.':
            std::string::size_type v69 = "period";
            break;
          default:
LABEL_129:
            *(void *)(*((void *)this + 23) - 8) = v4;
            goto LABEL_130;
        }
      }
      MEMORY[0x210558E70](v66 - 24, v69);
      goto LABEL_129;
    }
LABEL_130:
    uint64_t v70 = std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>(PhrasingImpl::collect_sentence_feat(void)::SENTENCE_PUNCT, (const void **)(v7 + 32));
    unint64_t v11 = v4;
    unint64_t v48 = v4;
    if (PhrasingImpl::collect_sentence_feat(void)::SENTENCE_PUNCT + 8 != v70)
    {
      char v13 = 0;
      unint64_t v2 = v4 + 1;
      goto LABEL_89;
    }
LABEL_79:
    unint64_t v2 = v11 + 1;
    uint64_t v49 = *((void *)this + 20);
    if (0xAAAAAAAAAAAAAAABLL * ((v49 - *((void *)this + 19)) >> 3) < 0xFF)
    {
      char v13 = 1;
    }
    else
    {
      if (v48) {
        unint64_t v2 = v48;
      }
      uint64_t v50 = *((void *)this + 23);
      if (v50 != *((void *)this + 22))
      {
        std::string::size_type v51 = (std::string *)(v49 - 24);
        do
        {
          unint64_t v53 = *(void *)(v50 - 8);
          uint64_t v52 = v50 - 8;
          if (v53 <= v2) {
            break;
          }
          *((void *)this + 23) = v52;
          __v.__first_ = v51;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
          *((void *)this + 20) = v51;
          uint64_t v50 = *((void *)this + 23);
          --v51;
        }
        while (v50 != *((void *)this + 22));
      }
      char v13 = 0;
    }
    unint64_t v3 = v48;
LABEL_89:
    if (buf.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)buf.__r_.__value_.__l.__size_);
    }
  }
  while ((v13 & 1) != 0);
  if (*((void *)this + 22) == *((void *)this + 23)) {
    *((unsigned char *)this + 8) = 1;
  }
  uint64_t v71 = *((void *)this + 13);
  uint64_t v72 = kaldi::quasar::TorchEncoderDecoder::InputSymbols(*(kaldi::quasar::TorchEncoderDecoder **)(v71 + 6576));
  memset(&v196, 0, sizeof(v196));
  int v73 = (std::string **)*((void *)this + 19);
  int v192 = (std::string **)*((void *)this + 20);
  *(void *)unint64_t v194 = v2;
  if (v73 == v192)
  {
    char v86 = 0;
    goto LABEL_221;
  }
  uint64_t v74 = v72;
  uint64_t v189 = v71;
  int v75 = 0;
  do
  {
    long long v76 = *v73;
    uint64_t v77 = (uint64_t *)v73[1];
    while (v76 != (std::string *)v77)
    {
      std::vector<std::string>::pointer value_high = (std::vector<std::string>::pointer)HIBYTE(v196.__end_cap_.__value_);
      if (SHIBYTE(v196.__end_cap_.__value_) < 0) {
        std::vector<std::string>::pointer value_high = v196.__end_;
      }
      if (value_high) {
        std::string::push_back((std::string *)&v196, 32);
      }
      if ((*(uint64_t (**)(uint64_t, std::string *))(*(void *)v74 + 96))(v74, v76) == -1)
      {
        std::string::append((std::string *)&v196, "UNK");
        if (Diagnostics_GetLogObject(void)::onceToken != -1) {
          dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
        }
        int v82 = Diagnostics_GetLogObject(void)::__profile_log_default;
        if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
        {
          unint64_t v84 = v76;
          if (SHIBYTE(v76->__r_.__value_.__r.__words[2]) < 0) {
            unint64_t v84 = (std::string *)v76->__r_.__value_.__r.__words[0];
          }
          LODWORD(__v.__first_) = 136315138;
          *(std::__split_buffer<std::string>::pointer *)((char *)&__v.__first_ + 4) = v84;
        }
        uint64_t v85 = (uint64_t *)v76;
        if (SHIBYTE(v76->__r_.__value_.__r.__words[2]) < 0) {
          uint64_t v85 = (uint64_t *)v76->__r_.__value_.__r.__words[0];
        }
      }
      else
      {
        int v79 = SHIBYTE(v76->__r_.__value_.__r.__words[2]);
        if (v79 >= 0) {
          uint64_t v80 = (const std::string::value_type *)v76;
        }
        else {
          uint64_t v80 = (const std::string::value_type *)v76->__r_.__value_.__r.__words[0];
        }
        if (v79 >= 0) {
          std::string::size_type size = HIBYTE(v76->__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v76->__r_.__value_.__l.__size_;
        }
        std::string::append((std::string *)&v196, v80, size);
      }
      ++v76;
    }
    ++v75;
    v73 += 3;
  }
  while (v73 != v192);
  char v86 = HIBYTE(v196.__end_cap_.__value_);
  std::vector<std::string>::pointer v87 = v196.__end_;
  if (SHIBYTE(v196.__end_cap_.__value_) >= 0) {
    std::vector<std::string>::pointer v87 = (std::vector<std::string>::pointer)HIBYTE(v196.__end_cap_.__value_);
  }
  unint64_t v2 = *(void *)v194;
  if (!v87)
  {
LABEL_221:
    uint64_t v199 = 0;
    unint64_t v200 = 0;
    uint64_t v201 = 0;
    long long v116 = (void *)((char *)this + 176);
    if (v86 < 0) {
      goto LABEL_222;
    }
    goto LABEL_223;
  }
  __p[0] = 0;
  __p[1] = 0;
  std::string::size_type v204 = 0;
  *(_DWORD *)(v189 + 12180) = v75;
  EncoderDecoder::decode(v189, (uint64_t)&v196, (uint64_t)__p);
  uint64_t v199 = 0;
  unint64_t v200 = 0;
  uint64_t v201 = 0;
  uint64_t v88 = (uint64_t *)__p[0];
  if (__p[1] == __p[0])
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1) {
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
    }
    uint64_t v173 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
    {
      LOWORD(__v.__first_) = 0;
      _os_log_impl(&dword_20CD80000, v173, OS_LOG_TYPE_ERROR, "PhrasingEngine no paths in n_best", (uint8_t *)&__v, 2u);
    }
    Diagnostics::log(3, "PhrasingEngine no paths in n_best", v174);
    unint64_t v2 = *(void *)v194;
  }
  else
  {
    uint64_t v89 = *(void *)__p[0];
    if (*((void *)__p[0] + 1) != *(void *)__p[0])
    {
      for (unint64_t i = 0; i != 0xEEEEEEEEEEEEEEEFLL * ((v88[1] - *v88) >> 4); ++i)
      {
        if (i >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 20) - *((void *)this + 19)) >> 3)) {
          break;
        }
        uint64_t v91 = (const std::string *)(v89 + 240 * i);
        if (SHIBYTE(v91->__r_.__value_.__r.__words[2]) < 0)
        {
          uint64_t v93 = (char *)v91->__r_.__value_.__r.__words[0];
          int64_t v92 = v91->__r_.__value_.__l.__size_;
        }
        else
        {
          int64_t v92 = HIBYTE(v91->__r_.__value_.__r.__words[2]);
          uint64_t v93 = (char *)(v89 + 240 * i);
        }
        unint64_t v94 = &v93[v92];
        if (v92 >= 1)
        {
          uint64_t v95 = v93;
          do
          {
            uint64_t v96 = (char *)memchr(v95, 95, v92);
            if (!v96) {
              break;
            }
            if (*v96 == 95) {
              goto LABEL_177;
            }
            uint64_t v95 = v96 + 1;
            int64_t v92 = v94 - (unsigned char *)v95;
          }
          while (v94 - (unsigned char *)v95 > 0);
        }
        uint64_t v96 = v94;
LABEL_177:
        if (v96 == v94) {
          std::string::size_type v97 = -1;
        }
        else {
          std::string::size_type v97 = v96 - v93;
        }
        std::string::basic_string((std::string *)&__v, v91, 0, v97, (std::allocator<char> *)&buf);
        uint64_t v98 = *v88 + 240 * i;
        unint64_t v2 = *(void *)v194;
        if (*(char *)(v98 + 23) < 0)
        {
          uint64_t v98 = *(void *)v98;
          uint64_t v99 = *(void *)(*v88 + 240 * i + 8);
        }
        else
        {
          uint64_t v99 = *(unsigned __int8 *)(v98 + 23);
        }
        std::__split_buffer<std::string>::pointer end_high = (std::__split_buffer<std::string>::pointer)HIBYTE(__v.__end_);
        char v101 = HIBYTE(__v.__end_);
        if (*(unsigned char *)(v98 + v99 - 1) == 66)
        {
          unint64_t v102 = *(unsigned __int8 **)(*v190 + 24 * i);
          uint64_t v103 = v102[23];
          if ((v103 & 0x80u) == 0) {
            std::__split_buffer<std::string>::pointer v104 = (std::__split_buffer<std::string>::pointer)v102[23];
          }
          else {
            std::__split_buffer<std::string>::pointer v104 = (std::__split_buffer<std::string>::pointer)*((void *)v102 + 1);
          }
          if (SHIBYTE(__v.__end_) < 0) {
            std::__split_buffer<std::string>::pointer end_high = __v.__begin_;
          }
          if (v104 == end_high)
          {
            if (SHIBYTE(__v.__end_) >= 0) {
              p_v = (unsigned __int8 *)&__v;
            }
            else {
              p_v = (unsigned __int8 *)__v.__first_;
            }
            if ((v103 & 0x80) == 0)
            {
              if (v102[23])
              {
                while (*v102 == *p_v)
                {
                  ++v102;
                  ++p_v;
                  if (!--v103) {
                    goto LABEL_199;
                  }
                }
                goto LABEL_216;
              }
LABEL_199:
              unint64_t v106 = v200;
              if (v200 >= v201)
              {
                long long v108 = (unint64_t *)v199;
                uint64_t v109 = ((char *)v200 - (unsigned char *)v199) >> 3;
                unint64_t v110 = v109 + 1;
                if ((unint64_t)(v109 + 1) >> 61) {
                  std::vector<int>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v111 = (char *)v201 - (unsigned char *)v199;
                if (((char *)v201 - (unsigned char *)v199) >> 2 > v110) {
                  unint64_t v110 = v111 >> 2;
                }
                if ((unint64_t)v111 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v112 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v112 = v110;
                }
                if (v112)
                {
                  std::string::size_type v113 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v201, v112);
                  long long v108 = (unint64_t *)v199;
                  unint64_t v106 = v200;
                }
                else
                {
                  std::string::size_type v113 = 0;
                }
                uint64_t v114 = (unint64_t *)&v113[8 * v109];
                unint64_t *v114 = i;
                uint64_t v107 = v114 + 1;
                while (v106 != v108)
                {
                  unint64_t v115 = *--v106;
                  *--uint64_t v114 = v115;
                }
                uint64_t v199 = v114;
                unint64_t v200 = v107;
                uint64_t v201 = (unint64_t *)&v113[8 * v112];
                if (v108) {
                  operator delete(v108);
                }
              }
              else
              {
                *unint64_t v200 = i;
                uint64_t v107 = v106 + 1;
              }
              unint64_t v200 = v107;
              char v101 = HIBYTE(__v.__end_);
              goto LABEL_216;
            }
            if (!memcmp(*(const void **)v102, p_v, *((void *)v102 + 1))) {
              goto LABEL_199;
            }
          }
        }
LABEL_216:
        if (v101 < 0) {
          operator delete(__v.__first_);
        }
        uint64_t v89 = *v88;
      }
    }
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
  }
  long long v116 = (void *)((char *)this + 176);
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG)
    || Diagnostics::s_log_level >= 7)
  {
    memset(&__v, 0, 24);
    uint64_t v175 = *((void *)this + 19);
    if (*((void *)this + 20) != v175)
    {
      unint64_t v176 = 0;
      int v177 = (unint64_t *)v199;
      do
      {
        int v178 = (uint64_t *)(v175 + 24 * v176);
        uint64_t v179 = *v178;
        uint64_t v180 = v178[1];
        while (v179 != v180)
        {
          Censor::global_plaintext(&v202, v179);
          if ((v202.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            v181.__i_ = (std::__wrap_iter<const char *>::iterator_type)&v202;
          }
          else {
            v181.__i_ = (std::__wrap_iter<const char *>::iterator_type)v202.__r_.__value_.__r.__words[0];
          }
          std::string::insert(&v202, v181, 32);
          std::string buf = v202;
          memset(&v202, 0, sizeof(v202));
          if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            p_std::string buf = &buf;
          }
          else {
            p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
          }
          if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v183 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v183 = buf.__r_.__value_.__l.__size_;
          }
          std::string::append((std::string *)&__v, (const std::string::value_type *)p_buf, v183);
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(buf.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v202.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v202.__r_.__value_.__l.__data_);
          }
          v179 += 24;
        }
        if (v177 != v200 && *v177 == v176)
        {
          std::string::append((std::string *)&__v, " |");
          ++v177;
        }
        ++v176;
        uint64_t v175 = *((void *)this + 19);
      }
      while (v176 < 0xAAAAAAAAAAAAAAABLL * ((*((void *)this + 20) - v175) >> 3));
      long long v116 = (void *)((char *)this + 176);
      if (Diagnostics_GetLogObject(void)::onceToken != -1) {
        dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
      }
    }
    uint64_t v184 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
    {
      std::__split_buffer<std::string>::pointer first = &__v;
      if (SHIBYTE(__v.__end_) < 0) {
        std::__split_buffer<std::string>::pointer first = __v.__first_;
      }
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)first;
      _os_log_impl(&dword_20CD80000, v184, OS_LOG_TYPE_DEBUG, "PhrasingEngine%s", (uint8_t *)&buf, 0xCu);
    }
    int v187 = &__v;
    if (SHIBYTE(__v.__end_) < 0) {
      int v187 = __v.__first_;
    }
    Diagnostics::log(7, "PhrasingEngine%s", v185, v187);
    if (SHIBYTE(__v.__end_) < 0) {
      operator delete(__v.__first_);
    }
    unint64_t v2 = *(void *)v194;
  }
  __v.__first_ = (std::__split_buffer<std::string>::pointer)__p;
  std::vector<kaldi::quasar::TranslationUtil::NbestElement>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
  if ((HIBYTE(v196.__end_cap_.__value_) & 0x80) != 0) {
LABEL_222:
  }
    operator delete(v196.__begin_);
LABEL_223:
  std::string::size_type v117 = (unint64_t *)v199;
  if (v199 == v200)
  {
    unint64_t v119 = v2 - 1;
    unint64_t v118 = (unint64_t *)v199;
    if (!v2) {
      goto LABEL_332;
    }
    goto LABEL_227;
  }
  unint64_t v118 = (unint64_t *)((char *)v199 + 8);
  unint64_t v119 = *(void *)(*v116 + 8 * *(void *)v199);
  if (v2)
  {
LABEL_227:
    unint64_t v120 = 0;
    unint64_t v195 = v2 - 1;
    while (1)
    {
      (*(void (**)(void **__return_ptr))(**((void **)this + 2) + 16))(__p);
      LOWORD(v196.__begin_) = 0;
      int v121 = (std::string *)*((void *)this + 16);
      v196.__end_ = (std::vector<std::string>::pointer)*((void *)this + 15);
      v196.__end_cap_.__value_ = v121;
      if (v121) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)&v121->__r_.__value_.__l.__size_, 1uLL, memory_order_relaxed);
      }
      long long v122 = (std::__shared_weak_count *)*((void *)this + 18);
      uint64_t v197 = *((void *)this + 17);
      unint64_t v198 = v122;
      if (v122) {
        atomic_fetch_add_explicit(&v122->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      long long v123 = (char *)__p[0];
      if (v123 + 8 == v124) {
        uint64_t v125 = 0;
      }
      else {
        uint64_t v125 = *((void *)v124 + 5) + 8;
      }
      int v126 = *(_DWORD *)v125;
      if (*(_DWORD *)v125 != 1718644323) {
        goto LABEL_269;
      }
      if (*(char *)(v125 + 47) < 0)
      {
        if (*(void *)(v125 + 32)) {
          goto LABEL_268;
        }
      }
      else if (*(unsigned char *)(v125 + 47))
      {
        goto LABEL_268;
      }
      (*(void (**)(std::__split_buffer<std::string> *__return_ptr))(**((void **)this + 2) + 16))(&__v);
      std::__split_buffer<std::string>::pointer v127 = __v.__first_;
      if (!__v.__first_) {
        goto LABEL_262;
      }
      if (&v127->__r_.__value_.__r.__words[1] == v128) {
        goto LABEL_262;
      }
      std::string::size_type v129 = v128[5];
      int v130 = *(_DWORD *)(v129 + 8);
      if (v130 != 1718642798 && v130 != 1718909044) {
        goto LABEL_262;
      }
      uint64_t v132 = *(void *)(v129 + 56);
      uint64_t v133 = *(void *)(v125 + 48);
      uint64_t v134 = *(unsigned __int8 *)(v132 + 63);
      size_t v135 = *(void *)(v132 + 48);
      if ((v134 & 0x80u) == 0) {
        uint64_t v136 = *(unsigned __int8 *)(v132 + 63);
      }
      else {
        uint64_t v136 = *(void *)(v132 + 48);
      }
      uint64_t v137 = *(unsigned __int8 *)(v133 + 63);
      int v138 = (char)v137;
      if ((v137 & 0x80u) != 0) {
        uint64_t v137 = *(void *)(v133 + 48);
      }
      if (v136 != v137) {
        goto LABEL_262;
      }
      long long v139 = (const void **)(v132 + 40);
      char v142 = *(unsigned __int8 **)(v133 + 40);
      long long v140 = (unsigned __int8 *)(v133 + 40);
      long long v141 = v142;
      if (v138 >= 0) {
        uint64_t v143 = v140;
      }
      else {
        uint64_t v143 = v141;
      }
      if ((v134 & 0x80) != 0)
      {
        if (memcmp(*v139, v143, v135)) {
          goto LABEL_262;
        }
      }
      else if (v134)
      {
        while (*(unsigned __int8 *)v139 == *v143)
        {
          long long v139 = (const void **)((char *)v139 + 1);
          ++v143;
          if (!--v134) {
            goto LABEL_290;
          }
        }
LABEL_262:
        char v144 = 1;
        goto LABEL_263;
      }
LABEL_290:
      char v144 = 0;
LABEL_263:
      if (__v.__begin_) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__v.__begin_);
      }
      if ((v144 & 1) == 0)
      {
        long long v123 = (char *)__p[0];
LABEL_268:
        int v126 = *(_DWORD *)v125;
LABEL_269:
        if (v119 == v120)
        {
          unint64_t v119 = v120;
          BOOL v10 = v126 == 1886809699;
          int v126 = 1886809699;
          if (v10) {
            goto LABEL_309;
          }
          (*(void (**)(std::__split_buffer<std::string> *__return_ptr))(**((void **)this + 2) + 16))(&__v);
          std::__split_buffer<std::string>::pointer v145 = __v.__first_;
          if (!__v.__first_) {
            goto LABEL_295;
          }
          if (&v145->__r_.__value_.__r.__words[1] == v146) {
            goto LABEL_295;
          }
          std::string::size_type v147 = v146[5];
          int v148 = *(_DWORD *)(v147 + 8);
          switch(v148)
          {
            case 1718642798:
              goto LABEL_276;
            case 1853189228:
              long long v155 = (void *)(v147 + 32);
              int v156 = *(char *)(v147 + 55);
              if (v156 < 0)
              {
                if (*(void *)(v147 + 40) != 1) {
                  goto LABEL_295;
                }
                long long v155 = (void *)*v155;
              }
              else if (v156 != 1)
              {
                goto LABEL_295;
              }
              if (*(unsigned char *)v155 != 46) {
                goto LABEL_295;
              }
              int v149 = 0;
              unint64_t v119 = v120 + 1;
              break;
            case 1718909044:
LABEL_276:
              int v149 = 0;
              goto LABEL_296;
            default:
LABEL_295:
              int v149 = 1;
LABEL_296:
              unint64_t v119 = v120;
              break;
          }
          if (__v.__begin_) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__v.__begin_);
          }
          if (v149)
          {
            Agglomerate::set<TokenPhrasingItem>((uint64_t)__p[0], (uint64_t)&v196);
            std::deque<std::shared_ptr<Agglomerate>>::push_back((void *)this + 4, (long long *)__p);
            long long v157 = operator new(0x30uLL);
            *(_OWORD *)((char *)v157 + 8) = 0u;
            v157[2] = 0u;
            *((void *)v157 + 3) = v157 + 2;
            *(void *)long long v157 = off_26C215330;
            *(void *)&long long v158 = (char *)v157 + 24;
            *((void *)&v158 + 1) = v157;
            long long v159 = (std::__shared_weak_count *)__p[1];
            *(_OWORD *)std::string __p = v158;
            if (v159) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v159);
            }
            int v207 = 0;
            long long v206 = 0u;
            LODWORD(__v.__first_) = 1886809699;
            __v.__begin_ = (std::__split_buffer<std::string>::pointer)(*(void *)(v125 + 16) + *(void *)(v125 + 8));
            memset(&__v.__end_, 0, 24);
            uint64_t v160 = *(void *)(v125 + 48);
            unsigned __int16 v161 = *(std::__shared_weak_count **)(v125 + 56);
            if (v161)
            {
              atomic_fetch_add_explicit(&v161->__shared_owners_, 1uLL, memory_order_relaxed);
              *((void *)&v206 + 1) = v160;
              int v207 = v161;
            }
            else
            {
              *((void *)&v206 + 1) = *(void *)(v125 + 48);
            }
            Agglomerate::set<TokenBasicItem>((uint64_t)__p[0], (long long *)&__v);
            if (v161) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v161);
            }
            int v126 = *(_DWORD *)v125;
LABEL_309:
            uint64_t v162 = *((void *)this + 15);
            __v.__first_ = &buf;
            if (!v163) {
              operator new();
            }
            *(_WORD *)(v163 + 8) = (v126 == 1886809699) | ((v119 == v120) << 8);
            int v154 = 1;
            LOBYTE(v196.__begin_) = 1;
            BOOL v153 = v120 == v195;
            BYTE1(v196.__begin_) = v120 == v195;
          }
          else
          {
            BOOL v153 = 0;
            int v154 = 0;
          }
          if (v119 <= v120)
          {
            while (v118 != v200)
            {
              uint64_t v164 = *v118++;
              unint64_t v119 = *((void *)*v193 + v164);
              if (v119 > v120) {
                goto LABEL_317;
              }
            }
            unint64_t v118 = v200;
            unint64_t v119 = v195;
          }
        }
        else
        {
          if (v126 == 1651664235)
          {
            if (v123 + 8 != v150)
            {
              int v151 = *(_DWORD *)(*((void *)v150 + 5) + 12);
              if (v151 == 1 || v151 >= 9)
              {
                LOWORD(v196.__begin_) = 257;
                BOOL v153 = 1;
                int v154 = 1;
                goto LABEL_317;
              }
            }
          }
          else if (v126 == 1886809699)
          {
            goto LABEL_309;
          }
          BOOL v153 = 0;
          int v154 = 0;
        }
LABEL_317:
        Agglomerate::set<TokenPhrasingItem>((uint64_t)__p[0], (uint64_t)&v196);
        if (v154)
        {
          int64_t v165 = operator new(0x30uLL);
          *(_OWORD *)((char *)v165 + 8) = 0u;
          v165[2] = 0u;
          *((void *)v165 + 3) = v165 + 2;
          *(void *)int64_t v165 = off_26C215330;
          *(void *)&long long v166 = (char *)v165 + 24;
          *((void *)&v166 + 1) = v165;
          long long v167 = (std::__shared_weak_count *)*((void *)this + 16);
          *(_OWORD *)((char *)this + 120) = v166;
          if (v167) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v167);
          }
        }
        if (v153)
        {
          long long v168 = operator new(0x30uLL);
          *(_OWORD *)((char *)v168 + 8) = 0u;
          v168[2] = 0u;
          *((void *)v168 + 3) = v168 + 2;
          *(void *)long long v168 = off_26C215330;
          *(void *)&long long v169 = (char *)v168 + 24;
          *((void *)&v169 + 1) = v168;
          long long v170 = (std::__shared_weak_count *)*((void *)this + 18);
          *(_OWORD *)((char *)this + 136) = v169;
          if (v170) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v170);
          }
        }
        std::deque<std::shared_ptr<Agglomerate>>::push_back((void *)this + 4, (long long *)__p);
        (*(void (**)(void))(**((void **)this + 2) + 32))(*((void *)this + 2));
        goto LABEL_324;
      }
      (*(void (**)(void))(**((void **)this + 2) + 32))(*((void *)this + 2));
LABEL_324:
      if (v122) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v122);
      }
      if (v121) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v121);
      }
      if (__p[1]) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
      }
      if (++v120 == *(void *)v194)
      {
        std::string::size_type v117 = (unint64_t *)v199;
        break;
      }
    }
  }
LABEL_332:
  if (v117)
  {
    unint64_t v200 = v117;
    operator delete(v117);
  }
  long long v171 = (std::string *)*((void *)this + 19);
  long long v172 = (std::string *)*((void *)this + 20);
  while (v172 != v171)
  {
    __v.__first_ = --v172;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
  }
  *((void *)this + 20) = v171;
  *((void *)this + 23) = *((void *)this + 22);
}

void sub_20D485880(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, char *a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  std::__tree<std::string>::destroy((uint64_t)&a18, a19);
  uint64_t v57 = 0;
  while (1)
  {
    if (*(&a56 + v57) < 0) {
      operator delete(*(void **)((char *)&a51 + v57));
    }
    v57 -= 24;
    if (v57 == -72)
    {
      _Unwind_Resume(a1);
    }
  }
}

uint64_t PhrasingImpl::clear(PhrasingImpl *this)
{
  unint64_t v2 = operator new(0x30uLL);
  *(_OWORD *)((char *)v2 + 8) = 0u;
  v2[2] = 0u;
  *((void *)v2 + 3) = v2 + 2;
  *(void *)unint64_t v2 = off_26C215330;
  *(void *)&long long v3 = (char *)v2 + 24;
  *((void *)&v3 + 1) = v2;
  unint64_t v4 = (std::__shared_weak_count *)*((void *)this + 16);
  *(_OWORD *)((char *)this + 120) = v3;
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  uint64_t v5 = operator new(0x30uLL);
  *(_OWORD *)((char *)v5 + 8) = 0u;
  v5[2] = 0u;
  *((void *)v5 + 3) = v5 + 2;
  *(void *)uint64_t v5 = off_26C215330;
  *(void *)&long long v6 = (char *)v5 + 24;
  *((void *)&v6 + 1) = v5;
  uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 18);
  *(_OWORD *)((char *)this + 136) = v6;
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  return FrontendModule::clear(this);
}

void PhrasingImpl::~PhrasingImpl(PhrasingImpl *this)
{
  *(void *)this = off_26C200098;
  unint64_t v2 = (void *)*((void *)this + 22);
  if (v2)
  {
    *((void *)this + 23) = v2;
    operator delete(v2);
  }
  long long v6 = (void **)((char *)this + 152);
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100](&v6);
  long long v3 = (std::__shared_weak_count *)*((void *)this + 18);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  unint64_t v4 = (std::__shared_weak_count *)*((void *)this + 16);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 14);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  FrontendModule::~FrontendModule((void **)this);
  JUMPOUT(0x2105595E0);
}

{
  void *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  void **v6;
  uint64_t vars8;

  *(void *)this = off_26C200098;
  unint64_t v2 = (void *)*((void *)this + 22);
  if (v2)
  {
    *((void *)this + 23) = v2;
    operator delete(v2);
  }
  long long v6 = (void **)((char *)this + 152);
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100](&v6);
  long long v3 = (std::__shared_weak_count *)*((void *)this + 18);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  unint64_t v4 = (std::__shared_weak_count *)*((void *)this + 16);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 14);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  FrontendModule::~FrontendModule((void **)this);
}

uint64_t std::__shared_ptr_emplace<PhrasingImpl>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<PhrasingImpl>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C215560;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<PhrasingImpl>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C215560;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<PhrasingEngine>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = a1 + 24;
  kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::~TranslationBeamSearch(a1 + 6464);
  return kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::~TranslationBeamSearch(v1);
}

void std::__shared_ptr_emplace<PhrasingEngine>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C215C60;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<PhrasingEngine>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C215C60;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void PhrasingPersistentModule::~PhrasingPersistentModule(PhrasingPersistentModule *this)
{
  *(void *)this = off_26C203D80;
  unint64_t v2 = (std::__shared_weak_count *)*((void *)this + 38);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  PersistentModule::~PersistentModule((void **)this);
  JUMPOUT(0x2105595E0);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = off_26C203D80;
  unint64_t v2 = (std::__shared_weak_count *)*((void *)this + 38);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  PersistentModule::~PersistentModule((void **)this);
}

void FilterAudioImpl::generate_tokens(FilterAudioImpl *this)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  if (!*((unsigned char *)this + 8))
  {
    (*(void (**)(long long *__return_ptr))(**((void **)this + 2) + 16))(&v32);
    if ((void)v32)
    {
      (*(void (**)(void))(**((void **)this + 2) + 32))(*((void *)this + 2));
      if (**((void **)this + 13)
        || ((*(uint64_t (**)(void))(**((void **)this + 14) + 72))(*((void *)this + 14)) & 1) != 0)
      {
        uint64_t v2 = v32;
        if ((void *)(v2 + 8) != v3)
        {
          uint64_t v4 = v3[5];
          int v6 = *(_DWORD *)(v4 + 8);
          uint64_t v5 = v4 + 8;
          if (v6 == 1635083369)
          {
            if ((void *)(v2 + 8) == v7)
            {
              exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
              StringFormatter::StringFormatter((StringFormatter *)&v27, "Audio token without associated audio item");
              MEMORY[0x210558D40](exception, &v27);
              __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
            }
            uint64_t v8 = v7[5];
            int v9 = (long long *)(v8 + 8);
            if (*(char *)(v8 + 31) < 0)
            {
              std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)(v8 + 8), *(void *)(v8 + 16));
            }
            else
            {
              long long v10 = *v9;
              __str.__r_.__value_.__r.__words[2] = *(void *)(v8 + 24);
              *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v10;
            }
            PromptStream::normalize_audio_prompt_name((void **)&__str.__r_.__value_.__l.__data_);
            LOBYTE(v27) = 0;
            *((void *)&v27 + 1) = 0;
            uint64_t v28 = 0;
            int v29 = 0x7FFFFFFF;
            memset(&__p, 0, sizeof(__p));
            prompt_by_id = PromptDatabase::find_prompt_by_id(*((void *)this + 13), &__str, 1);
            if (prompt_by_id)
            {
              if (Diagnostics_GetLogObject(void)::onceToken != -1) {
                dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
              }
              uint64_t v12 = Diagnostics_GetLogObject(void)::__profile_log_default;
              if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
              {
                uint64_t v14 = (long long *)(v8 + 8);
                if (*(char *)(v8 + 31) < 0) {
                  uint64_t v14 = *(long long **)v9;
                }
                *(_DWORD *)std::string buf = 136315138;
                *(void *)&uint8_t buf[4] = v14;
              }
              if (*(char *)(v8 + 31) < 0) {
                int v9 = *(long long **)v9;
              }
              std::string::operator=(&__p, &__str);
              uint64_t v28 = *((void *)prompt_by_id + 4);
              uint64_t v15 = (std::__shared_weak_count *)*((void *)&v32 + 1);
              long long v26 = v32;
              if (*((void *)&v32 + 1)) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v32 + 1) + 8), 1uLL, memory_order_relaxed);
              }
              FilterAudioImpl::audio_item_post_check((uint64_t)this, (uint64_t *)&v26, v5, &v27);
            }
            else
            {
              uint64_t v16 = *((void *)this + 14);
              std::string::basic_string[abi:ne180100]<0>(buf, "🥫");
              int v17 = (*(uint64_t (**)(uint64_t, std::string *, unsigned char *))(*(void *)v16 + 16))(v16, &__str, buf);
              if (v34 < 0) {
                operator delete(*(void **)buf);
              }
              if (v17 == -1)
              {
                if (Diagnostics_GetLogObject(void)::onceToken != -1) {
                  dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
                }
                unint64_t v21 = Diagnostics_GetLogObject(void)::__profile_log_default;
                if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
                {
                  uint64_t v23 = (long long *)(v8 + 8);
                  if (*(char *)(v8 + 31) < 0) {
                    uint64_t v23 = *(long long **)v9;
                  }
                  *(_DWORD *)std::string buf = 136315138;
                  *(void *)&uint8_t buf[4] = v23;
                }
                if (*(char *)(v8 + 31) < 0) {
                  int v9 = *(long long **)v9;
                }
                goto LABEL_50;
              }
              MEMORY[0x210558E70](&__p, "GPROMPT");
              int v29 = v17;
              if (Diagnostics_GetLogObject(void)::onceToken != -1) {
                dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
              }
              unint64_t v18 = Diagnostics_GetLogObject(void)::__profile_log_default;
              if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
              {
                unint64_t v20 = (long long *)(v8 + 8);
                if (*(char *)(v8 + 31) < 0) {
                  unint64_t v20 = *(long long **)v9;
                }
                *(_DWORD *)std::string buf = 136315138;
                *(void *)&uint8_t buf[4] = v20;
              }
              if (*(char *)(v8 + 31) < 0) {
                int v9 = *(long long **)v9;
              }
              uint64_t v15 = (std::__shared_weak_count *)*((void *)&v32 + 1);
              long long v25 = v32;
              if (*((void *)&v32 + 1)) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v32 + 1) + 8), 1uLL, memory_order_relaxed);
              }
              FilterAudioImpl::audio_item_post_check((uint64_t)this, (uint64_t *)&v25, v5, &v27);
            }
            if (v15) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v15);
            }
LABEL_50:
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__str.__r_.__value_.__l.__data_);
            }
            goto LABEL_54;
          }
        }
      }
      std::deque<std::shared_ptr<Agglomerate>>::push_back((void *)this + 4, &v32);
    }
    else
    {
      *((unsigned char *)this + 8) = 1;
    }
LABEL_54:
    if (*((void *)&v32 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v32 + 1));
    }
  }
}

void sub_20D486540(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,std::__shared_weak_count *a35)
{
  if (v35) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v35);
  }
  if (a26 < 0) {
    operator delete(__p);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  if (a35) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a35);
  }
  _Unwind_Resume(exception_object);
}

void FilterAudioImpl::audio_item_post_check(uint64_t a1, uint64_t *a2, uint64_t a3, long long *a4)
{
  Agglomerate::set<TokenPromptItem>(*a2, a4);
  std::deque<std::shared_ptr<Agglomerate>>::push_back((void *)(a1 + 32), (long long *)a2);
  uint64_t v8 = *(uint64_t **)(a3 + 48);
  uint64_t v7 = *(std::__shared_weak_count **)(a3 + 56);
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v8)
  {
    while (*((_DWORD *)v8 + 8) != 10)
    {
      long long v10 = (uint64_t *)*v8;
      int v9 = (std::__shared_weak_count *)v8[1];
      if (v9) {
        atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v7) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v7);
      }
      uint64_t v7 = v9;
      uint64_t v8 = v10;
      if (!v10)
      {
        if (!v9) {
          return;
        }
        goto LABEL_11;
      }
    }
    do
    {
      (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 16) + 16))(&v18);
      if (!v18)
      {
LABEL_37:
        char v17 = 0;
        goto LABEL_38;
      }
      uint64_t v12 = *(uint64_t **)(v11 + 56);
      char v13 = *(std::__shared_weak_count **)(v11 + 64);
      if (v13) {
        atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v13) {
        atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v12)
      {
        uint64_t v14 = v13;
        while (1)
        {
          LODWORD(v15) = v12 == v8;
          if (v12 == v8) {
            break;
          }
          uint64_t v15 = (uint64_t *)*v12;
          uint64_t v16 = (std::__shared_weak_count *)v12[1];
          if (v16) {
            atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (v14) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v14);
          }
          uint64_t v12 = v15;
          uint64_t v14 = v16;
          if (!v15)
          {
            uint64_t v14 = v16;
            break;
          }
        }
        if (v14) {
LABEL_30:
        }
          std::__shared_weak_count::__release_shared[abi:ne180100](v14);
      }
      else
      {
        LODWORD(v15) = 0;
        uint64_t v14 = v13;
        if (v13) {
          goto LABEL_30;
        }
      }
      if (v7) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v7);
      }
      if (v13) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v13);
      }
      if (!v15) {
        goto LABEL_37;
      }
      (*(void (**)(void))(**(void **)(a1 + 16) + 32))(*(void *)(a1 + 16));
      char v17 = 1;
LABEL_38:
      if (v19) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v19);
      }
    }
    while ((v17 & 1) != 0);
  }
  int v9 = v7;
  if (!v7) {
    return;
  }
LABEL_11:
  std::__shared_weak_count::__release_shared[abi:ne180100](v9);
}

void sub_20D4867F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  _Unwind_Resume(exception_object);
}

void FilterAudioImpl::~FilterAudioImpl(void **this)
{
  FrontendModule::~FrontendModule(this);
  JUMPOUT(0x2105595E0);
}

uint64_t std::__shared_ptr_emplace<FilterAudioImpl>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<FilterAudioImpl>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C215F38;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<FilterAudioImpl>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C215F38;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void FilterAudioPersistentModule::~FilterAudioPersistentModule(void **this)
{
  PersistentModule::~PersistentModule(this);
  JUMPOUT(0x2105595E0);
}

BOOL NormAction_en::consume_next_token(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 0;
  if (*(char *)(a2 + 23) >= 0) {
    long long v3 = (const char *)a2;
  }
  else {
    long long v3 = *(const char **)a2;
  }
  while (strcmp(NormAction_en::consume_next_token(std::string const&)::multipliers[v2], v3))
  {
    if (++v2 == 3)
    {
      uint64_t v4 = off_264114838;
      return v4 != off_264114838;
    }
  }
  uint64_t v4 = &NormAction_en::consume_next_token(std::string const&)::multipliers[v2];
  return v4 != off_264114838;
}

void NormAction_en::ordinal(uint64_t a1@<X0>, std::string::size_type a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  unint64_t v6 = *(unsigned __int8 *)(a2 + 23);
  int v7 = (char)v6;
  unint64_t v8 = *(void *)(a2 + 8);
  if ((v6 & 0x80u) == 0) {
    uint64_t v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v9 = *(void *)(a2 + 8);
  }
  if (!v9)
  {
LABEL_9:
    if (v7 >= 0) {
      char v13 = (const char *)a2;
    }
    else {
      char v13 = *(const char **)a2;
    }
    if (v7 >= 0) {
      unint64_t v14 = v6;
    }
    else {
      unint64_t v14 = v8;
    }
    UTFString::to_utf16((std::basic_string<char16_t> *)&__p, v13, v14);
    uint64_t v15 = unum_parseInt64();
    std::string::size_type v16 = a1 + 56;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_26C214E30;
    __p.__r_.__value_.__l.__size_ = v16;
    __p.__r_.__value_.__r.__words[2] = v15;
    p_std::string p = &__p;
    UTFString_Impl::formatNumberAsUTF8(a3, &__p);
    std::__function::__value_func<int ()(char16_t *,unsigned long,UErrorCode *)>::~__value_func[abi:ne180100](&__p);
    return;
  }
  std::string::size_type v10 = *(void *)a2;
  if (v7 >= 0) {
    std::string::size_type v10 = a2;
  }
  __p.__r_.__value_.__r.__words[0] = v10;
  __p.__r_.__value_.__l.__size_ = v9 << 32;
  UChar32 v11 = UTFString::codepoint_iterator<std::string>::operator*((uint64_t *)&__p);
  int v12 = u_isdigit(v11);
  unint64_t v6 = *(unsigned __int8 *)(a2 + 23);
  int v7 = (char)v6;
  if (v12)
  {
    unint64_t v8 = *(void *)(a2 + 8);
    goto LABEL_9;
  }
  if ((char)v6 < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  char v17 = &__p;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    char v17 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  v17->__r_.__value_.__s.__data_[0] = 82;
  NormAction::roman(a3, a1, (char *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_20D486B70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void NormAction_en::cardinal(uint64_t a1@<X0>, std::string::size_type a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  unint64_t v6 = *(unsigned __int8 *)(a2 + 23);
  int v7 = (char)v6;
  unint64_t v8 = *(void *)(a2 + 8);
  if ((v6 & 0x80u) == 0) {
    uint64_t v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v9 = *(void *)(a2 + 8);
  }
  if (!v9)
  {
LABEL_9:
    if (v7 >= 0) {
      char v13 = (const char *)a2;
    }
    else {
      char v13 = *(const char **)a2;
    }
    if (v7 >= 0) {
      unint64_t v14 = v6;
    }
    else {
      unint64_t v14 = v8;
    }
    UTFString::to_utf16((std::basic_string<char16_t> *)&__p, v13, v14);
    uint64_t v15 = unum_parseInt64();
    std::string::size_type v16 = a1 + 48;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_26C214E30;
    __p.__r_.__value_.__l.__size_ = v16;
    __p.__r_.__value_.__r.__words[2] = v15;
    p_std::string p = &__p;
    UTFString_Impl::formatNumberAsUTF8(a3, &__p);
    std::__function::__value_func<int ()(char16_t *,unsigned long,UErrorCode *)>::~__value_func[abi:ne180100](&__p);
    return;
  }
  std::string::size_type v10 = *(void *)a2;
  if (v7 >= 0) {
    std::string::size_type v10 = a2;
  }
  __p.__r_.__value_.__r.__words[0] = v10;
  __p.__r_.__value_.__l.__size_ = v9 << 32;
  UChar32 v11 = UTFString::codepoint_iterator<std::string>::operator*((uint64_t *)&__p);
  int v12 = u_isdigit(v11);
  unint64_t v6 = *(unsigned __int8 *)(a2 + 23);
  int v7 = (char)v6;
  if (v12)
  {
    unint64_t v8 = *(void *)(a2 + 8);
    goto LABEL_9;
  }
  if ((char)v6 < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  char v17 = &__p;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    char v17 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  v17->__r_.__value_.__s.__data_[0] = 114;
  NormAction::roman(a3, a1, (char *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_20D486D64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void NormAction_en::~NormAction_en(NormAction_en *this)
{
  *(void *)this = off_26C2002C0;
  uint64_t v2 = (NormAction_en *)((char *)this + 48);
  UTFNumberFormatter::~UTFNumberFormatter((NormAction_en *)((char *)this + 56));
  UTFNumberFormatter::~UTFNumberFormatter(v2);
  NormAction::~NormAction(this);
  JUMPOUT(0x2105595E0);
}

{
  UTFNumberFormatter *v2;
  uint64_t vars8;

  *(void *)this = off_26C2002C0;
  uint64_t v2 = (NormAction_en *)((char *)this + 48);
  UTFNumberFormatter::~UTFNumberFormatter((NormAction_en *)((char *)this + 56));
  UTFNumberFormatter::~UTFNumberFormatter(v2);
  NormAction::~NormAction(this);
}

void PartOfSpeechImpl::generate_tokens(PartOfSpeechImpl *this)
{
  uint64_t v96 = *MEMORY[0x263EF8340];
  if (!*((unsigned char *)this + 8))
  {
    (*(void (**)(long long *__return_ptr))(**((void **)this + 2) + 16))(&v90);
    uint64_t v2 = v90;
    if (!(void)v90)
    {
      *((unsigned char *)this + 8) = 1;
      goto LABEL_228;
    }
    if ((void *)(v2 + 8) == v3
      || ((uint64_t v4 = v3[5], v5 = *(_DWORD *)(v4 + 8), v5 != 1952807028) ? (v6 = v5 == 1886809699) : (v6 = 1), !v6))
    {
LABEL_227:
      std::deque<std::shared_ptr<Agglomerate>>::push_back((void *)this + 4, &v90);
      (*(void (**)(void))(**((void **)this + 2) + 32))(*((void *)this + 2));
      --*((void *)this + 17);
LABEL_228:
      if (*((void *)&v90 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v90 + 1));
      }
      return;
    }
    unint64_t v7 = *((void *)this + 16);
    if (!v7) {
      *((void *)this + 17) = 0;
    }
    if (v7 >= *((void *)this + 15))
    {
LABEL_27:
      memset(&v89, 0, sizeof(v89));
      if ((void *)(v2 + 8) == v15) {
        goto LABEL_49;
      }
      std::string::operator=(&v89, (const std::string *)(v15[5] + 40));
      std::string::size_type size = HIBYTE(v89.__r_.__value_.__r.__words[2]);
      if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type size = v89.__r_.__value_.__l.__size_;
      }
      if (!size)
      {
LABEL_49:
        uint64_t v23 = *((void *)this + 13);
        std::string __str = (std::string *)(v4 + 32);
        unsigned int v24 = *(_DWORD *)(*(void *)(v23 + 80) + 12);
        if (v24)
        {
          unsigned int v25 = 0;
          if (*(char *)(v4 + 55) >= 0) {
            long long v26 = (const char *)(v4 + 32);
          }
          else {
            long long v26 = *(const char **)(v4 + 32);
          }
          uint64_t v28 = *(void *)(v23 + 112);
          uint64_t v27 = *(void *)(v23 + 120);
          do
          {
            unsigned int v29 = (v25 + v24) >> 1;
            unint64_t v30 = *(unsigned int *)(v28 + 4 * v29);
            int v31 = strcmp(v26, (const char *)(v27 + (v30 & 0xFFFFFF)));
            if (v31 < 1)
            {
              unsigned int v24 = (v25 + v24) >> 1;
              if ((v31 & 0x80000000) == 0)
              {
                if (Diagnostics_GetLogObject(void)::onceToken != -1) {
                  dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
                }
                unint64_t v65 = v30 >> 24;
                uint64_t v66 = Diagnostics_GetLogObject(void)::__profile_log_default;
                if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
                {
                  Censor::global_plaintext(&v93, (uint64_t)__str);
                  std::chrono::steady_clock::time_point v67 = (v93.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                      ? &v93
                      : (std::string *)v93.__r_.__value_.__r.__words[0];
                  std::string::size_type v68 = *(void *)(v23 + 120) + *(unsigned int *)(*(void *)(v23 + 88) + 4 * v65);
                  LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
                  *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v67;
                  WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
                  *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v68;
                  if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v93.__r_.__value_.__l.__data_);
                  }
                }
                Censor::global_plaintext(&v93, (uint64_t)__str);
                if ((v93.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  uint64_t v70 = &v93;
                }
                else {
                  uint64_t v70 = (std::string *)v93.__r_.__value_.__r.__words[0];
                }
                if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
                {
                  uint64_t v71 = (void *)v93.__r_.__value_.__r.__words[0];
                  goto LABEL_218;
                }
                goto LABEL_219;
              }
            }
            else
            {
              unsigned int v25 = v29 + 1;
            }
          }
          while (v25 < v24);
        }
        long long v32 = *(void **)(v23 + 176);
        uint64_t v33 = *(void *)(v23 + 184) - (void)v32;
        if (v33 >= 1) {
          bzero(v32, 4 * (((unint64_t)v33 >> 2) - ((unint64_t)v33 > 3)) + 4);
        }
        if (Diagnostics_GetLogObject(void)::onceToken != -1) {
          dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
        }
        char v34 = Diagnostics_GetLogObject(void)::__profile_log_default;
        if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
        {
          Censor::global_plaintext(&v93, (uint64_t)__str);
          uint64_t v35 = (v93.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
              ? &v93
              : (std::string *)v93.__r_.__value_.__r.__words[0];
          LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v35;
          if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v93.__r_.__value_.__l.__data_);
          }
        }
        Censor::global_plaintext(&v93, (uint64_t)__str);
        if ((v93.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string v37 = &v93;
        }
        else {
          std::string v37 = (std::string *)v93.__r_.__value_.__r.__words[0];
        }
        if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v93.__r_.__value_.__l.__data_);
        }
        unint64_t v38 = (const char *)(v23 + 152);
        if (*(char *)(v23 + 175) < 0) {
          unint64_t v38 = *(const char **)v38;
        }
        uint64_t v39 = (const char *)(v23 + 128);
        if (*(char *)(v23 + 151) < 0) {
          uint64_t v39 = *(const char **)v39;
        }
        unint64_t v40 = *(void *)(v23 + 32);
        uint64_t v41 = *(void *)(v23 + 8);
        unint64_t v42 = *(void *)(v41 + 8 * ((v40 + 2) / 0xAA)) + 24 * ((v40 + 2) % 0xAA);
        if (*(char *)(v42 + 23) < 0) {
          unint64_t v42 = *(void *)v42;
        }
        unint64_t v43 = *(void *)(v41 + 8 * ((v40 + 1) / 0xAA)) + 24 * ((v40 + 1) % 0xAA);
        if (*(char *)(v43 + 23) < 0) {
          unint64_t v43 = *(void *)v43;
        }
        unint64_t v44 = *(void *)(v41 + 8 * (v40 / 0xAA)) + 24 * (v40 % 0xAA);
        if (*(char *)(v44 + 23) < 0) {
          unint64_t v44 = *(void *)v44;
        }
        unint64_t v45 = *(void *)(v41 + 8 * ((v40 + 3) / 0xAA)) + 24 * ((v40 + 3) % 0xAA);
        if (*(char *)(v45 + 23) < 0) {
          unint64_t v45 = *(void *)v45;
        }
        unint64_t v46 = *(void *)(v41 + 8 * ((v40 + 4) / 0xAA)) + 24 * ((v40 + 4) % 0xAA);
        if (*(char *)(v46 + 23) < 0) {
          unint64_t v46 = *(void *)v46;
        }
        char v86 = (const char *)v46;
        StringFormatter::StringFormatter((StringFormatter *)&v93, "%c", 1);
        POSEngine::add_feature((void *)v23, &v93);
        if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v93.__r_.__value_.__l.__data_);
        }
        int v47 = *(unsigned __int8 *)(v4 + 55);
        if ((v47 & 0x80u) != 0) {
          int v47 = *(_DWORD *)(v4 + 40);
        }
        if (v47 <= 3) {
          int v47 = 3;
        }
        std::string::basic_string(&buf, __str, (v47 - 3), 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&__p);
        if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_std::string buf = &buf;
        }
        else {
          p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
        }
        StringFormatter::StringFormatter((StringFormatter *)&v93, "%c%s", 2, (const char *)p_buf);
        POSEngine::add_feature((void *)v23, &v93);
        if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v93.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(buf.__r_.__value_.__l.__data_);
        }
        uint64_t v49 = (char *)(v4 + 32);
        if (*(char *)(v4 + 55) < 0) {
          uint64_t v49 = *(char **)(v4 + 32);
        }
        StringFormatter::StringFormatter((StringFormatter *)&v93, "%c%c", 3, *v49);
        POSEngine::add_feature((void *)v23, &v93);
        if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v93.__r_.__value_.__l.__data_);
        }
        StringFormatter::StringFormatter((StringFormatter *)&v93, "%c%s %s", 4, v38, (const char *)v42);
        POSEngine::add_feature((void *)v23, &v93);
        if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v93.__r_.__value_.__l.__data_);
        }
        StringFormatter::StringFormatter((StringFormatter *)&v93, "%c%s %s", 5, v38, v39);
        POSEngine::add_feature((void *)v23, &v93);
        if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v93.__r_.__value_.__l.__data_);
        }
        StringFormatter::StringFormatter((StringFormatter *)&v93, "%c%s", 6, v38);
        POSEngine::add_feature((void *)v23, &v93);
        if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v93.__r_.__value_.__l.__data_);
        }
        StringFormatter::StringFormatter((StringFormatter *)&v93, "%c%s", 7, v39);
        POSEngine::add_feature((void *)v23, &v93);
        if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v93.__r_.__value_.__l.__data_);
        }
        StringFormatter::StringFormatter((StringFormatter *)&v93, "%c%s", 8, (const char *)v42);
        POSEngine::add_feature((void *)v23, &v93);
        if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v93.__r_.__value_.__l.__data_);
        }
        StringFormatter::StringFormatter((StringFormatter *)&v93, "%c%s", 9, (const char *)v43);
        POSEngine::add_feature((void *)v23, &v93);
        if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v93.__r_.__value_.__l.__data_);
        }
        unint64_t v50 = *(void *)(*(void *)(v23 + 8) + 8 * ((*(void *)(v23 + 32) + 1) / 0xAAuLL))
            + 24 * ((*(void *)(v23 + 32) + 1) % 0xAAuLL);
        int v51 = *(unsigned __int8 *)(v50 + 23);
        if ((v51 & 0x80u) != 0) {
          int v51 = *(_DWORD *)(v50 + 8);
        }
        if (v51 <= 3) {
          int v51 = 3;
        }
        std::string::basic_string(&buf, (const std::string *)v50, (v51 - 3), 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&__p);
        if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v52 = &buf;
        }
        else {
          uint64_t v52 = (std::string *)buf.__r_.__value_.__r.__words[0];
        }
        StringFormatter::StringFormatter((StringFormatter *)&v93, "%c%s", 10, (const char *)v52);
        POSEngine::add_feature((void *)v23, &v93);
        if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v93.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(buf.__r_.__value_.__l.__data_);
        }
        StringFormatter::StringFormatter((StringFormatter *)&v93, "%c%s", 11, (const char *)v44);
        POSEngine::add_feature((void *)v23, &v93);
        if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v93.__r_.__value_.__l.__data_);
        }
        StringFormatter::StringFormatter((StringFormatter *)&v93, "%c%s", 12, (const char *)v45);
        POSEngine::add_feature((void *)v23, &v93);
        if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v93.__r_.__value_.__l.__data_);
        }
        unint64_t v53 = *(void *)(*(void *)(v23 + 8) + 8 * ((*(void *)(v23 + 32) + 3) / 0xAAuLL))
            + 24 * ((*(void *)(v23 + 32) + 3) % 0xAAuLL);
        int v54 = *(unsigned __int8 *)(v53 + 23);
        if ((v54 & 0x80u) != 0) {
          int v54 = *(_DWORD *)(v53 + 8);
        }
        if (v54 <= 3) {
          int v54 = 3;
        }
        std::string::basic_string(&buf, (const std::string *)v53, (v54 - 3), 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&__p);
        if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v55 = &buf;
        }
        else {
          uint64_t v55 = (std::string *)buf.__r_.__value_.__r.__words[0];
        }
        StringFormatter::StringFormatter((StringFormatter *)&v93, "%c%s", 13, (const char *)v55);
        POSEngine::add_feature((void *)v23, &v93);
        if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v93.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(buf.__r_.__value_.__l.__data_);
        }
        StringFormatter::StringFormatter((StringFormatter *)&v93, "%c%s", 14, v86);
        POSEngine::add_feature((void *)v23, &v93);
        if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v93.__r_.__value_.__l.__data_);
        }
        std::chrono::steady_clock::time_point v56 = *(char **)(v23 + 176);
        uint64_t v57 = *(int **)(v23 + 184);
        if (v56 == (char *)v57)
        {
          unint64_t v59 = *(char **)(v23 + 176);
        }
        else
        {
          uint64_t v58 = v56 + 4;
          unint64_t v59 = *(char **)(v23 + 176);
          if (v56 + 4 != (char *)v57)
          {
            int v60 = *(_DWORD *)v56;
            unint64_t v59 = *(char **)(v23 + 176);
            unint64_t v61 = (int *)(v56 + 4);
            do
            {
              int v63 = *v61++;
              int v62 = v63;
              BOOL v64 = v60 < v63;
              if (v60 <= v63) {
                int v60 = v62;
              }
              if (v64) {
                unint64_t v59 = v58;
              }
              uint64_t v58 = (char *)v61;
            }
            while (v61 != v57);
          }
        }
        uint64_t v72 = v59 - v56;
        if (Diagnostics_GetLogObject(void)::onceToken != -1) {
          dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
        }
        unint64_t v65 = v72 >> 2;
        if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG)
          || Diagnostics::s_log_level >= 7)
        {
          memset(&buf, 0, sizeof(buf));
          uint64_t v73 = *(void *)(v23 + 80);
          if (*(unsigned char *)(v73 + 4))
          {
            unint64_t v74 = 0;
            do
            {
              if (*(_DWORD *)(*(void *)(v23 + 176) + 4 * v74))
              {
                std::string::basic_string[abi:ne180100]<0>(&__p, (char *)(*(void *)(v23 + 120) + *(unsigned int *)(*(void *)(v23 + 88) + 4 * v74)));
                UTFString::escape_invalid_utf8_codes(&v93, (uint64_t *)&__p);
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__p.__r_.__value_.__l.__data_);
                }
                if ((v93.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  int v75 = &v93;
                }
                else {
                  int v75 = (std::string *)v93.__r_.__value_.__r.__words[0];
                }
                StringFormatter::StringFormatter((StringFormatter *)&__p, " %s:%lld", (const char *)v75, *(unsigned int *)(*(void *)(v23 + 176) + 4 * v74));
                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  p_std::string p = &__p;
                }
                else {
                  p_std::string p = (std::string *)__p.__r_.__value_.__r.__words[0];
                }
                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  std::string::size_type v77 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                }
                else {
                  std::string::size_type v77 = __p.__r_.__value_.__l.__size_;
                }
                std::string::append(&buf, (const std::string::value_type *)p_p, v77);
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__p.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v93.__r_.__value_.__l.__data_);
                }
                uint64_t v73 = *(void *)(v23 + 80);
              }
              ++v74;
            }
            while (v74 < *(unsigned __int8 *)(v73 + 4));
          }
          std::string::basic_string[abi:ne180100]<0>(&v93, (char *)(*(void *)(v23 + 120) + *(unsigned int *)(*(void *)(v23 + 88) + 4 * v65)));
          UTFString::escape_invalid_utf8_codes(&__p, (uint64_t *)&v93);
          if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v93.__r_.__value_.__l.__data_);
          }
          if (Diagnostics_GetLogObject(void)::onceToken != -1) {
            dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
          }
          uint64_t v78 = Diagnostics_GetLogObject(void)::__profile_log_default;
          if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
          {
            Censor::global_plaintext(&v91, (uint64_t)__str);
            if ((v91.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              int v79 = &v91;
            }
            else {
              int v79 = (std::string *)v91.__r_.__value_.__r.__words[0];
            }
            uint64_t v80 = &__p;
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              uint64_t v80 = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            int v81 = &buf;
            if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              int v81 = (std::string *)buf.__r_.__value_.__r.__words[0];
            }
            LODWORD(v93.__r_.__value_.__l.__data_) = 136315650;
            *(std::string::size_type *)((char *)v93.__r_.__value_.__r.__words + 4) = (std::string::size_type)v79;
            WORD2(v93.__r_.__value_.__r.__words[1]) = 2080;
            *(std::string::size_type *)((char *)&v93.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v80;
            HIWORD(v93.__r_.__value_.__r.__words[2]) = 2080;
            unint64_t v94 = v81;
            if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v91.__r_.__value_.__l.__data_);
            }
          }
          Censor::global_plaintext(&v93, (uint64_t)__str);
          if ((v93.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v83 = &v93;
          }
          else {
            uint64_t v83 = (std::string *)v93.__r_.__value_.__r.__words[0];
          }
          unint64_t v84 = &__p;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            unint64_t v84 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          uint64_t v85 = &buf;
          if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            uint64_t v85 = (std::string *)buf.__r_.__value_.__r.__words[0];
          }
          if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v93.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
          {
            uint64_t v71 = (void *)buf.__r_.__value_.__r.__words[0];
LABEL_218:
            operator delete(v71);
          }
        }
LABEL_219:
        std::string::operator=((std::string *)(v23 + 128), (const std::string *)(v23 + 152));
        MEMORY[0x210558E70](v23 + 152, *(void *)(v23 + 120) + *(unsigned int *)(*(void *)(v23 + 88) + 4 * v65));
        if (*(char *)(v23 + 175) < 0) {
          std::string::__init_copy_ctor_external(&v88, *(const std::string::value_type **)(v23 + 152), *(void *)(v23 + 160));
        }
        else {
          std::string v88 = *(std::string *)(v23 + 152);
        }
        if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v89.__r_.__value_.__l.__data_);
        }
        std::string v89 = v88;
      }
      else
      {
        if (Diagnostics_GetLogObject(void)::onceToken != -1) {
          dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_8485);
        }
        char v17 = Diagnostics_GetLogObject(void)::__profile_log_default;
        if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
        {
          Censor::global_plaintext(&v93, v4 + 32);
          if ((v93.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v18 = &v93;
          }
          else {
            uint64_t v18 = (std::string *)v93.__r_.__value_.__r.__words[0];
          }
          uint64_t v19 = &v89;
          if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            uint64_t v19 = (std::string *)v89.__r_.__value_.__r.__words[0];
          }
          LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v18;
          WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
          *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v19;
          if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v93.__r_.__value_.__l.__data_);
          }
        }
        Censor::global_plaintext(&v93, v4 + 32);
        if ((v93.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          unint64_t v21 = &v93;
        }
        else {
          unint64_t v21 = (std::string *)v93.__r_.__value_.__r.__words[0];
        }
        unint64_t v22 = &v89;
        if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          unint64_t v22 = (std::string *)v89.__r_.__value_.__r.__words[0];
        }
        if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v93.__r_.__value_.__l.__data_);
        }
      }
      Agglomerate::set<TokenPartOfSpeechItem>(v90, (long long *)&v89);
      --*((void *)this + 16);
      if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v89.__r_.__value_.__l.__data_);
      }
      goto LABEL_227;
    }
    while (1)
    {
      uint64_t v8 = *((void *)this + 2);
      ++*((void *)this + 17);
      (*(void (**)(std::string *__return_ptr))(*(void *)v8 + 16))(&buf);
      std::string::size_type v9 = buf.__r_.__value_.__r.__words[0];
      if (buf.__r_.__value_.__r.__words[0])
      {
        if ((void *)(v9 + 8) == v10) {
          goto LABEL_23;
        }
        uint64_t v11 = v10[5];
        int v12 = *(_DWORD *)(v11 + 8);
        if (v12 != 1952807028 && v12 != 1886809699) {
          goto LABEL_23;
        }
        POSEngine::add_context(*((void *)this + 13), v11 + 32);
      }
      else
      {
        uint64_t v14 = *((void *)this + 13);
        std::string::basic_string[abi:ne180100]<0>(&v93, &byte_20D5A22AE);
        POSEngine::add_context(v14, (uint64_t)&v93);
        if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v93.__r_.__value_.__l.__data_);
        }
      }
      ++*((void *)this + 16);
LABEL_23:
      if (buf.__r_.__value_.__l.__size_) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)buf.__r_.__value_.__l.__size_);
      }
      if (*((void *)this + 16) >= *((void *)this + 15))
      {
        uint64_t v2 = v90;
        goto LABEL_27;
      }
    }
  }
}

void sub_20D487E1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,std::__shared_weak_count *a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a36 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v36 - 105) < 0) {
    operator delete(*(void **)(v36 - 128));
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  if (a27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a27);
  }
  _Unwind_Resume(exception_object);
}

uint64_t PartOfSpeechImpl::clear(PartOfSpeechImpl *this)
{
  uint64_t v2 = (void *)*((void *)this + 13);
  long long v3 = (void **)v2[1];
  uint64_t v4 = (void **)v2[2];
  if (v4 == v3)
  {
    int v5 = v2 + 5;
    uint64_t v4 = (void **)v2[1];
  }
  else
  {
    int v5 = v2 + 5;
    unint64_t v6 = v2[4];
    unint64_t v7 = &v3[v6 / 0xAA];
    unint64_t v8 = (unint64_t)*v7;
    unint64_t v9 = (unint64_t)*v7 + 24 * (v6 % 0xAA);
    unint64_t v10 = (unint64_t)v3[(v2[5] + v6) / 0xAA] + 24 * ((v2[5] + v6) % 0xAA);
    if (v9 != v10)
    {
      do
      {
        if (*(char *)(v9 + 23) < 0)
        {
          operator delete(*(void **)v9);
          unint64_t v8 = (unint64_t)*v7;
        }
        v9 += 24;
        if (v9 - v8 == 4080)
        {
          unint64_t v11 = (unint64_t)v7[1];
          ++v7;
          unint64_t v8 = v11;
          unint64_t v9 = v11;
        }
      }
      while (v9 != v10);
      long long v3 = (void **)v2[1];
      uint64_t v4 = (void **)v2[2];
    }
  }
  *int v5 = 0;
  unint64_t v12 = (char *)v4 - (char *)v3;
  if ((unint64_t)((char *)v4 - (char *)v3) >= 0x11)
  {
    do
    {
      operator delete(*v3);
      uint64_t v13 = v2[2];
      long long v3 = (void **)(v2[1] + 8);
      v2[1] = v3;
      unint64_t v12 = v13 - (void)v3;
    }
    while (v12 > 0x10);
  }
  if (v12 >> 3 == 1)
  {
    uint64_t v14 = 85;
  }
  else
  {
    if (v12 >> 3 != 2) {
      goto LABEL_17;
    }
    uint64_t v14 = 170;
  }
  v2[4] = v14;
LABEL_17:
  std::string::basic_string[abi:ne180100]<0>(&__p, "-START-");
  std::deque<std::string>::push_back(v2, &__p);
  if (v18 < 0) {
    operator delete((void *)__p.n128_u64[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "-START2-");
  __n128 v15 = std::deque<std::string>::push_back(v2, &__p);
  if (v18 < 0) {
    operator delete((void *)__p.n128_u64[0]);
  }
  MEMORY[0x210558E70](v2 + 16, "-START2-", v15);
  MEMORY[0x210558E70](v2 + 19, "-START-");
  *((void *)this + 16) = 0;
  *((void *)this + 17) = 0;
  return FrontendModule::clear(this);
}

void sub_20D48811C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void PartOfSpeechImpl::~PartOfSpeechImpl(PartOfSpeechImpl *this)
{
  *(void *)this = off_26C201AD8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 14);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  FrontendModule::~FrontendModule((void **)this);
  JUMPOUT(0x2105595E0);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = off_26C201AD8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 14);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  FrontendModule::~FrontendModule((void **)this);
}

uint64_t std::__shared_ptr_emplace<PartOfSpeechImpl>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<PartOfSpeechImpl>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C216558;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<PartOfSpeechImpl>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C216558;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<POSEngine>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 200);
  if (v2)
  {
    *(void *)(a1 + 208) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 199) < 0) {
    operator delete(*(void **)(a1 + 176));
  }
  if (*(char *)(a1 + 175) < 0) {
    operator delete(*(void **)(a1 + 152));
  }
  long long v3 = *(std::__shared_weak_count **)(a1 + 80);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return std::deque<std::string>::~deque[abi:ne180100](a1 + 24);
}

void std::__shared_ptr_emplace<POSEngine>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C218EE8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<POSEngine>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C218EE8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void PartOfSpeechPersistentModule::~PartOfSpeechPersistentModule(PartOfSpeechPersistentModule *this)
{
  *(void *)this = off_26C204A40;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 38);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  PersistentModule::~PersistentModule((void **)this);
  JUMPOUT(0x2105595E0);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = off_26C204A40;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 38);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  PersistentModule::~PersistentModule((void **)this);
}

void TrimUtteranceImpl::generate_tokens(TrimUtteranceImpl *this)
{
  uint64_t v2 = (void *)((char *)this + 32);
  while (!*((unsigned char *)this + 8))
  {
    (*(void (**)(long long *__return_ptr))(**((void **)this + 2) + 16))(&v38);
    if (!(void)v38)
    {
      char v7 = 1;
      *((unsigned char *)this + 8) = 1;
      goto LABEL_79;
    }
    (*(void (**)(void))(**((void **)this + 2) + 32))(*((void *)this + 2));
    int v3 = *((_DWORD *)this + 26);
    if (v3 == 1) {
      goto LABEL_63;
    }
    if (v3 == 3 && *((unsigned char *)this + 108)) {
      goto LABEL_78;
    }
    uint64_t v4 = v38;
    if ((void *)(v4 + 8) == v5)
    {
      uint64_t v6 = 0;
      if (v3) {
        goto LABEL_20;
      }
    }
    else
    {
      uint64_t v6 = v5[5] + 8;
      if (v3) {
        goto LABEL_20;
      }
    }
    uint64_t v8 = *(void *)(*(void *)(v6 + 48) + 16);
    if (*(char *)(v8 + 79) < 0)
    {
      if (!*(void *)(v8 + 64))
      {
LABEL_16:
        if (*(char *)(v8 + 103) < 0)
        {
          if (!*(void *)(v8 + 88))
          {
LABEL_62:
            *((_DWORD *)this + 26) = 1;
            goto LABEL_63;
          }
        }
        else if (!*(unsigned char *)(v8 + 103))
        {
          goto LABEL_62;
        }
        int v3 = 4;
        goto LABEL_19;
      }
    }
    else if (!*(unsigned char *)(v8 + 79))
    {
      goto LABEL_16;
    }
    int v3 = 2;
LABEL_19:
    *((_DWORD *)this + 26) = v3;
LABEL_20:
    int v9 = *(_DWORD *)v6;
    if (*(_DWORD *)v6 == 1835102827)
    {
      if (v3 == 4)
      {
        uint64_t v20 = *(void *)(*(void *)(v6 + 48) + 16);
        uint64_t v21 = *(unsigned __int8 *)(v6 + 47);
        size_t v22 = *(void *)(v6 + 32);
        uint64_t v23 = *(void *)(v20 + 88);
        int v24 = *(char *)(v20 + 103);
        if ((v21 & 0x80u) == 0) {
          uint64_t v25 = *(unsigned __int8 *)(v6 + 47);
        }
        else {
          uint64_t v25 = *(void *)(v6 + 32);
        }
        if (v24 >= 0) {
          uint64_t v23 = *(unsigned __int8 *)(v20 + 103);
        }
        if (v25 == v23)
        {
          long long v26 = (const void **)(v6 + 24);
          unsigned int v29 = *(unsigned __int8 **)(v20 + 80);
          uint64_t v27 = (unsigned __int8 *)(v20 + 80);
          uint64_t v28 = v29;
          if (v24 >= 0) {
            unint64_t v30 = v27;
          }
          else {
            unint64_t v30 = v28;
          }
          if ((v21 & 0x80) != 0)
          {
            if (!memcmp(*v26, v30, v22))
            {
LABEL_83:
              char v7 = 0;
              *((_DWORD *)this + 26) = 3;
              goto LABEL_79;
            }
          }
          else
          {
            if (!v21) {
              goto LABEL_83;
            }
            while (*(unsigned __int8 *)v26 == *v30)
            {
              long long v26 = (const void **)((char *)v26 + 1);
              ++v30;
              if (!--v21) {
                goto LABEL_83;
              }
            }
          }
        }
LABEL_78:
        char v7 = 0;
        goto LABEL_79;
      }
      if (v3 != 2) {
        goto LABEL_78;
      }
      uint64_t v10 = *(void *)(*(void *)(v6 + 48) + 16);
      uint64_t v11 = *(unsigned __int8 *)(v6 + 47);
      size_t v12 = *(void *)(v6 + 32);
      if ((v11 & 0x80u) == 0) {
        uint64_t v13 = *(unsigned __int8 *)(v6 + 47);
      }
      else {
        uint64_t v13 = *(void *)(v6 + 32);
      }
      uint64_t v14 = *(unsigned __int8 *)(v10 + 79);
      int v15 = (char)v14;
      if ((v14 & 0x80u) != 0) {
        uint64_t v14 = *(void *)(v10 + 64);
      }
      if (v13 == v14)
      {
        std::string::size_type v16 = (const void **)(v6 + 24);
        if (v15 >= 0) {
          char v17 = (unsigned __int8 *)(v10 + 56);
        }
        else {
          char v17 = *(unsigned __int8 **)(v10 + 56);
        }
        if ((v11 & 0x80) != 0)
        {
          if (!memcmp(*v16, v17, v12))
          {
LABEL_66:
            uint64_t v31 = *(unsigned __int8 *)(v10 + 103);
            int v32 = (char)v31;
            if ((v31 & 0x80u) != 0) {
              uint64_t v31 = *(void *)(v10 + 88);
            }
            if (v13 == v31)
            {
              uint64_t v35 = *(unsigned __int8 **)(v10 + 80);
              char v34 = (unsigned __int8 *)(v10 + 80);
              uint64_t v33 = v35;
              if (v32 >= 0) {
                uint64_t v36 = v34;
              }
              else {
                uint64_t v36 = v33;
              }
              if ((v11 & 0x80) != 0)
              {
                if (memcmp(*v16, v36, v12)) {
                  goto LABEL_86;
                }
              }
              else if (v11)
              {
                while (*(unsigned __int8 *)v16 == *v36)
                {
                  std::string::size_type v16 = (const void **)((char *)v16 + 1);
                  ++v36;
                  if (!--v11) {
                    goto LABEL_87;
                  }
                }
LABEL_86:
                int v37 = 4;
LABEL_88:
                char v7 = 0;
                *((_DWORD *)this + 26) = v37;
                goto LABEL_79;
              }
LABEL_87:
              int v37 = 3;
              goto LABEL_88;
            }
            int v37 = 4;
            goto LABEL_88;
          }
        }
        else
        {
          if (!*(unsigned char *)(v6 + 47)) {
            goto LABEL_66;
          }
          char v18 = (unsigned __int8 *)(v6 + 24);
          uint64_t v19 = v11;
          while (*v18 == *v17)
          {
            ++v18;
            ++v17;
            if (!--v19) {
              goto LABEL_66;
            }
          }
        }
        char v7 = 0;
      }
      else
      {
        char v7 = 0;
      }
    }
    else
    {
      if (v3 != 3)
      {
        if (v3 != 4) {
          goto LABEL_78;
        }
        if (v9 == 1886809699)
        {
LABEL_59:
          *((unsigned char *)this + 108) = 1;
        }
        else if (v9 == 1952807028)
        {
          *((unsigned char *)this + 108) = 0;
        }
LABEL_63:
        std::deque<std::shared_ptr<Agglomerate>>::push_back(v2, &v38);
        char v7 = 1;
        goto LABEL_79;
      }
      char v7 = 0;
      if (v9 == 1886809699 && !*((unsigned char *)this + 108)) {
        goto LABEL_59;
      }
    }
LABEL_79:
    if (*((void *)&v38 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v38 + 1));
    }
    if (v7) {
      return;
    }
  }
}

void sub_20D488848(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t TrimUtteranceImpl::clear(TrimUtteranceImpl *this)
{
  *((_DWORD *)this + 26) = 0;
  *((unsigned char *)this + 108) = 0;
  return FrontendModule::clear(this);
}

void TrimUtteranceImpl::~TrimUtteranceImpl(void **this)
{
  FrontendModule::~FrontendModule(this);
  JUMPOUT(0x2105595E0);
}

uint64_t std::__shared_ptr_emplace<TrimUtteranceImpl>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<TrimUtteranceImpl>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26C2169F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2105595E0);
}

void std::__shared_ptr_emplace<TrimUtteranceImpl>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26C2169F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void TrimUtterancePersistentModule::~TrimUtterancePersistentModule(void **this)
{
  PersistentModule::~PersistentModule(this);
  JUMPOUT(0x2105595E0);
}

void Whisper::Whisper(Whisper *this, int a2)
{
  *(void *)&void v6[4] = *MEMORY[0x263EF8340];
  signed int v2 = (a2 / 1000 + 5) & 0xFFFFFFFE;
  if (v2 >= 48) {
    signed int v2 = 48;
  }
  *((_DWORD *)this + 12) = a2;
  *((_DWORD *)this + 13) = v2;
  *(_OWORD *)((char *)this + 56) = 0u;
  int v3 = (char *)this + 56;
  uint64_t v4 = (char *)this + 80;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 8) = xmmword_20D6B4B80;
  *(_DWORD *)this = 16843009;
  *(_OWORD *)((char *)this + ++*(_DWORD *)(result + 24) = xmmword_20D6B4B90;
  *((_WORD *)this + 2) = 1;
  *((void *)this + 5) = 0x3E4CCCCD3C23D70ALL;
  if (a2 > 20000)
  {
    if (a2 > 0x7530)
    {
      memcpy(v5, &unk_20D6D4B3C, sizeof(v5));
      std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>(v3, v5, (uint64_t)v6, 0x65uLL);
      *(_OWORD *)int v5 = xmmword_20D6D4CD0;
      *(_OWORD *)&v5[16] = unk_20D6D4CE0;
      *(_DWORD *)&v5[32] = 1031671753;
      std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>(v4, v5, (uint64_t)&v5[36], 9uLL);
    }
    else
    {
      memcpy(v5, &unk_20D6D4994, sizeof(v5));
      std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>(v3, v5, (uint64_t)v6, 0x65uLL);
      *(_OWORD *)int v5 = xmmword_20D6D4B28;
      *(_DWORD *)&v5[16] = 1042381762;
      std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>(v4, v5, (uint64_t)&v5[20], 5uLL);
    }
  }
  else
  {
    memcpy(v5, &unk_20D6D47EC, sizeof(v5));
    std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>(v3, v5, (uint64_t)v6, 0x65uLL);
    *(_OWORD *)int v5 = xmmword_20D6D4980;
    *(_DWORD *)&v5[16] = 1040627139;
    std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>(v4, v5, (uint64_t)&v5[20], 5uLL);
  }
}

void sub_20D488BA0(_Unwind_Exception *exception_object)
{
  int v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 88) = v5;
    operator delete(v5);
  }
  uint64_t v6 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 64) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

void Whisper::whisper(void *a1, uint64_t a2, void *a3)
{
  double v4 = (double)*(int *)(a2 + 48);
  unint64_t v5 = (unint64_t)(v4 * 0.025);
  uint64_t v6 = a3[1] - *a3;
  unint64_t v7 = v6 >> 2;
  if (v6 >> 2 < v5)
  {
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
    return;
  }
  LODWORD(v416) = 0;
  std::vector<float>::vector(a1, v6 >> 2, &v416);
  std::vector<float>::vector(&__dst, (unint64_t)(v4 * 0.025));
  std::vector<float>::vector(&v374, *(int *)(a2 + 52) + v5);
  std::vector<float>::vector(&v372, *(int *)(a2 + 52) + v5);
  LODWORD(v416) = 1065353216;
  std::vector<float>::vector(&v370, 1uLL, &v416);
  BOOL v9 = *(unsigned char *)a2 == 0;
  std::vector<float>::vector(v369, (int)v5);
  if ((int)v5 >= 1)
  {
    uint64_t v10 = 0;
    float64x2_t v298 = (float64x2_t)vdupq_n_s64(0x401921FB54442D18uLL);
    uint64x2_t v300 = (uint64x2_t)vdupq_n_s64((unint64_t)(unint64_t)(v4 * 0.025) - 1);
    uint64_t v11 = (float *)v369[0];
    float64x2_t v296 = (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)(int)v5 + -1.0), 0);
    int64x2_t v297 = vdupq_n_s64(2uLL);
    uint64x2_t v12 = (uint64x2_t)xmmword_20D6072C0;
    do
    {
      *(uint64x2_t *)uint64_t v308 = v12;
      int32x2_t v305 = vmovn_s64((int64x2_t)vcgeq_u64(v300, v12));
      v13.i64[0] = (int)v10;
      v13.i64[1] = (int)v10 + 1;
      float64x2_t __x = vdivq_f64(vmulq_f64(vcvtq_f64_s64(v13), v298), v296);
      double v303 = cos(__x.f64[1]);
      double v14 = cos(__x.f64[0]);
      if (v305.i8[0])
      {
        float v15 = (1.0 - v14) * 0.5;
        v11[v10] = v15;
      }
      if (v305.i8[4])
      {
        float v16 = (1.0 - v303) * 0.5;
        v11[v10 + 1] = v16;
      }
      v10 += 2;
      uint64x2_t v12 = (uint64x2_t)vaddq_s64(*(int64x2_t *)v308, v297);
    }
    while ((((unint64_t)(v4 * 0.025) + 1) & 0x1FFFFFFFELL) != v10);
  }
  if (v7 > v5)
  {
    uint64_t v17 = 0;
    unint64_t v18 = 0;
    int v306 = 0;
    uint64_t v19 = 0;
    uint64_t v309 = 0;
    double v20 = dbl_20D6B4BA0[v9];
    uint64_t v21 = 0;
    unint64_t v294 = v7;
    unint64_t v304 = (unint64_t)(v4 * 0.005);
    double v22 = 16.0;
    float v23 = 5.0;
    unint64_t v24 = v5;
    while (1)
    {
      if (v5) {
        memmove(__dst, (const void *)(*a3 + 4 * v18), *a3 + 4 * v24 - (*a3 + 4 * v18));
      }
      double v25 = cblas_dsdot(v5, (const float *)__dst, 1, (const float *)__dst, 1);
      if (log(v25) <= v22) {
        goto LABEL_380;
      }
      uint64_t v301 = v21;
      unint64_t v26 = *(int *)(a2 + 52);
      uint64_t v27 = v18 - v26;
      if (v18 <= v26)
      {
        unint64_t v30 = (char *)v374;
        uint64_t v28 = v306;
        if (v375 - (unsigned char *)v374 >= 1) {
          bzero(v374, 4 * (((unint64_t)(v375 - (unsigned char *)v374) >> 2) - ((unint64_t)(v375 - (unsigned char *)v374) > 3)) + 4);
        }
        unsigned int v29 = (float *)__dst;
        if (v5)
        {
          memmove(&v30[4 * v26], __dst, 4 * v5);
          unsigned int v29 = (float *)__dst;
LABEL_24:
          uint64_t v31 = 0;
          double v32 = 0.0;
          uint64_t v33 = (float *)v369[0];
          do
          {
            double v34 = v29[v31];
            float v35 = (v34 + -v20 * v32) * v33[v31];
            v29[v31++] = v35;
            double v32 = v34;
          }
          while (v5 != v31);
        }
      }
      else
      {
        uint64_t v28 = v306;
        if (v24 != v27) {
          memmove(v374, (const void *)(*a3 + 4 * v27), *a3 + 4 * v24 - (*a3 + 4 * v27));
        }
        unsigned int v29 = (float *)__dst;
        if (v5) {
          goto LABEL_24;
        }
      }
      uint64_t v368 = 0;
      __X = 0;
      unsigned int v367 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__X, v29, (uint64_t)v377, (v377 - (unsigned char *)v29) >> 2);
      uint64_t v36 = v367;
      int v37 = __X;
      unint64_t v38 = *(int *)(a2 + 52) + 1;
      *(void *)&long long v416 = 0;
      std::vector<double>::vector(&v412, v38, &v416);
      if ((*(_DWORD *)(a2 + 52) & 0x80000000) != 0)
      {
        unint64_t v43 = (const void *)v412;
      }
      else
      {
        uint64_t v39 = 0;
        uint64_t v40 = 0;
        unint64_t v41 = (unint64_t)((char *)v36 - (char *)v37) >> 2;
        do
        {
          double v42 = cblas_dsdot(v41, __X, 1, &__X[v39], 1);
          unint64_t v43 = (const void *)v412;
          *(double *)(v412 + 8 * v40) = v42;
          ++v39;
          LODWORD(v41) = v41 - 1;
        }
        while (v40++ < *(int *)(a2 + 52));
        uint64_t v28 = v306;
      }
      long long __p = 0uLL;
      uint64_t v411 = 0;
      std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>(&__p, v43, *((uint64_t *)&v412 + 1), (uint64_t)(*((void *)&v412 + 1) - (void)v43) >> 3);
      if (*(double *)__p == 0.0)
      {
        unint64_t v45 = *(int *)(a2 + 52) + 1;
        LODWORD(v416) = 0;
        std::vector<float>::vector(&v408, v45, &v416);
        *(_DWORD *)long long v408 = 1065353216;
      }
      else
      {
        std::vector<double>::vector(&v416, *(int *)(a2 + 52) + 1);
        std::vector<double>::vector(&v414, *(int *)(a2 + 52) + 1);
        unint64_t v46 = (double *)v416;
        *(void *)long long v416 = 0x3FF0000000000000;
        int v47 = (char *)v414;
        *(void *)long long v414 = 0x3FF0000000000000;
        uint64_t v48 = *(unsigned int *)(a2 + 52);
        if ((int)v48 >= 1)
        {
          uint64_t v49 = 0;
          uint64_t v50 = __p;
          double v51 = *(double *)__p;
          uint64_t v52 = v48 + 1;
          unint64_t v53 = 1;
          do
          {
            if (v53 < 2)
            {
              double v58 = *(double *)(v50 + 8 * v53) / v51;
              v46[v53] = v58;
              double v59 = -v58;
            }
            else
            {
              double v54 = 0.0;
              uint64_t v55 = (double *)(v47 + 8);
              uint64_t v56 = v49;
              do
              {
                double v57 = *v55++;
                double v54 = v54 + v57 * *(double *)(v50 + v56);
                v56 -= 8;
              }
              while (v56);
              double v58 = (*(double *)(v50 + 8 * v53) - v54) / v51;
              v46[v53] = v58;
              double v59 = -v58;
              uint64_t v60 = 1;
              uint64_t v61 = v49;
              do
              {
                v46[v60] = *(double *)&v47[v60 * 8] + v59 * *(double *)&v47[v61];
                ++v60;
                v61 -= 8;
              }
              while (v61);
            }
            double v62 = v59 * v58 + 1.0;
            int v63 = v46;
            BOOL v64 = v47;
            uint64_t v65 = v52;
            do
            {
              uint64_t v66 = *(void *)v63++;
              *v64++ = v66;
              --v65;
            }
            while (v65);
            double v51 = v51 * v62;
            ++v53;
            v49 += 8;
          }
          while (v53 != v52);
          uint64_t v67 = v52 - 1;
          std::string::size_type v68 = v46 + 1;
          do
          {
            *std::string::size_type v68 = -*v68;
            ++v68;
            --v67;
          }
          while (v67);
        }
        double *v46 = 1.0;
        std::string::size_type v69 = (double *)*((void *)&v416 + 1);
        uint64_t v409 = 0;
        long long v408 = 0uLL;
        if (*((double **)&v416 + 1) != v46)
        {
          std::vector<int>::__vallocate[abi:ne180100](&v408, (uint64_t)(*((void *)&v416 + 1) - (void)v46) >> 3);
          uint64_t v70 = (float *)*((void *)&v408 + 1);
          do
          {
            double v71 = *v46++;
            float v72 = v71;
            *v70++ = v72;
          }
          while (v46 != v69);
          *((void *)&v408 + 1) = v70;
          int v47 = (char *)v414;
        }
        if (v47)
        {
          *((void *)&v414 + 1) = v47;
          operator delete(v47);
        }
        if ((void)v416)
        {
          *((void *)&v416 + 1) = v416;
          operator delete((void *)v416);
        }
      }
      if ((void)__p)
      {
        *((void *)&__p + 1) = __p;
        operator delete((void *)__p);
      }
      if ((void)v412)
      {
        *((void *)&v412 + 1) = v412;
        operator delete((void *)v412);
      }
      uint64_t v299 = v17;
      if (v28) {
        operator delete(v28);
      }
      uint64_t v74 = *((void *)&v408 + 1);
      uint64_t v73 = (const void *)v408;
      uint64_t v409 = 0;
      long long v408 = 0uLL;
      if (__X)
      {
        unsigned int v367 = __X;
        operator delete(__X);
      }
      uint64_t v365 = 0;
      v363 = 0;
      uint64_t v364 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v363, v73, v74, (v74 - (uint64_t)v73) >> 2);
      v361 = 0;
      std::string v360 = 0;
      uint64_t v362 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v360, v374, (uint64_t)v375, (v375 - (unsigned char *)v374) >> 2);
      Whisper::firfilter(&v416, v363, (uint64_t)v364, (uint64_t *)&v360);
      if (v309) {
        operator delete(v309);
      }
      uint64_t v309 = (void *)v416;
      uint64_t v417 = 0;
      long long v416 = 0uLL;
      if (v360)
      {
        v361 = v360;
        operator delete(v360);
      }
      if (v363)
      {
        uint64_t v364 = v363;
        operator delete(v363);
      }
      if (*(unsigned char *)a2)
      {
        uint64_t v75 = *(int *)(a2 + 52);
        uint64_t v76 = v75 + v5;
        if (v75 + v5)
        {
          unsigned int v77 = xorshift128(void)::w;
          int v78 = xorshift128(void)::z;
          int v79 = xorshift128(void)::y;
          int v80 = xorshift128(void)::x;
          int v81 = (float *)v372;
          do
          {
            unsigned int v82 = v77;
            int v83 = v78;
            int v84 = v79;
            unsigned int v77 = ((v80 ^ (v80 << 11)) >> 8) ^ (v82 >> 19) ^ v80 ^ (v80 << 11) ^ v82;
            *v81++ = (float)((float)v77 * 4.6566e-10) + -1.0;
            int v80 = v79;
            int v79 = v78;
            int v78 = v82;
            --v76;
          }
          while (v76);
          xorshift128(void)::x = v84;
          xorshift128(void)::y = v83;
          xorshift128(void)::z = v82;
          xorshift128(void)::w = v77;
        }
        double v85 = cblas_dsdot(v5, (const float *)v309 + v75, 1, (const float *)v309 + v75, 1);
        char v86 = (const float *)(v372 + 4 * *(int *)(a2 + 52));
        float v87 = sqrt(v85 / cblas_dsdot(v5, v86, 1, v86, 1)) * 3.0 / 5.0;
        cblas_sscal(*(_DWORD *)(a2 + 52) + v5, v87, (float *)v372, 1);
        unint64_t v88 = *(int *)(a2 + 52) + v5;
        if (v88)
        {
          double v89 = 0.0;
          long long v90 = (float *)v372;
          do
          {
            double v91 = *v90;
            float v92 = v91 - v89;
            *v90++ = v92;
            double v89 = v91;
            --v88;
          }
          while (v88);
        }
        uint64_t v359 = 0;
        std::string::size_type v357 = 0;
        std::string::value_type v358 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v357, *(const void **)(a2 + 56), *(void *)(a2 + 64), (uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 2);
        long long v355 = 0;
        v354 = 0;
        uint64_t v356 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v354, (const void *)v372, *((uint64_t *)&v372 + 1), (uint64_t)(*((void *)&v372 + 1) - v372) >> 2);
        Whisper::firfilter(&v416, v357, (uint64_t)v358, (uint64_t *)&v354);
        if ((void)v372)
        {
          *((void *)&v372 + 1) = v372;
          operator delete((void *)v372);
        }
        long long v372 = v416;
        uint64_t v373 = v417;
        uint64_t v417 = 0;
        long long v416 = 0uLL;
        if (v354)
        {
          long long v355 = v354;
          operator delete(v354);
        }
        if (v357)
        {
          std::string::value_type v358 = v357;
          operator delete(v357);
        }
        long long v416 = 0uLL;
        uint64_t v417 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v416, (const void *)v372, *((uint64_t *)&v372 + 1), (uint64_t)(*((void *)&v372 + 1) - v372) >> 2);
        uint64_t v353 = 0;
        uint64_t v351 = 0;
        uint64_t v352 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v351, *(const void **)(a2 + 80), *(void *)(a2 + 88), (uint64_t)(*(void *)(a2 + 88) - *(void *)(a2 + 80)) >> 2);
        unint64_t v348 = 0;
        __int16 v349 = 0;
        uint64_t v350 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v348, (const void *)v372, *((uint64_t *)&v372 + 1), (uint64_t)(*((void *)&v372 + 1) - v372) >> 2);
        Whisper::firfilter(&v414, v351, (uint64_t)v352, (uint64_t *)&v348);
        if ((void)v372)
        {
          *((void *)&v372 + 1) = v372;
          operator delete((void *)v372);
        }
        long long v372 = v414;
        uint64_t v373 = v415;
        uint64_t v415 = 0;
        long long v414 = 0uLL;
        if (v348)
        {
          __int16 v349 = v348;
          operator delete(v348);
        }
        if (v351)
        {
          uint64_t v352 = v351;
          operator delete(v351);
        }
        std::string v93 = (float *)v372;
        unint64_t v94 = (void *)v416;
        if (*((void *)&v372 + 1) == (void)v372)
        {
          if (!(void)v416) {
            goto LABEL_103;
          }
        }
        else
        {
          unint64_t v95 = (uint64_t)(*((void *)&v372 + 1) - v372) >> 2;
          if (v95 <= 1) {
            unint64_t v95 = 1;
          }
          uint64_t v96 = (float *)v416;
          do
          {
            float v97 = *v96++;
            *std::string v93 = (float)(*v93 + v97) * 0.5;
            ++v93;
            --v95;
          }
          while (v95);
        }
        *((void *)&v416 + 1) = v94;
        operator delete(v94);
      }
      else
      {
        uint64_t v98 = (float *)v372;
        if (*((void *)&v372 + 1) != (void)v372)
        {
          unint64_t v99 = (uint64_t)(*((void *)&v372 + 1) - v372) >> 2;
          if (v99 <= 1) {
            unint64_t v99 = 1;
          }
          unint64_t v100 = (float *)v309;
          do
          {
            float v101 = *v100++;
            *v98++ = v101 / v23;
            --v99;
          }
          while (v99);
        }
      }
LABEL_103:
      uint64_t v102 = v5 - 1 + *(int *)(a2 + 52);
      if (v102)
      {
        uint64_t v103 = (float *)(v372 + 4);
        float v104 = *(float *)v372;
        do
        {
          double v105 = v104;
          float v104 = *v103;
          *(float *)&double v105 = v105 + v20 * *v103;
          *(v103++ - 1) = *(float *)&v105;
          --v102;
        }
        while (v102);
      }
      if (*(unsigned char *)(a2 + 1) || *(unsigned char *)(a2 + 3) || *(unsigned char *)(a2 + 2) || *(unsigned char *)(a2 + 4))
      {
        v346 = 0;
        uint64_t v347 = 0;
        uint64_t v345 = 0;
        unint64_t v106 = (void *)v73;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v345, v73, v74, (v74 - (uint64_t)v73) >> 2);
        uint64_t v107 = (float *)v345;
        uint64_t v108 = v346 - (unsigned char *)v345;
        if (v346 == v345) {
          goto LABEL_128;
        }
        int v109 = 0;
        uint64_t v110 = v108 >> 2;
        if ((unint64_t)(v108 >> 2) <= 1) {
          uint64_t v110 = 1;
        }
        do
        {
          float v111 = *v107++;
          if (v111 != 0.0) {
            ++v109;
          }
          --v110;
        }
        while (v110);
        if (v109 != 1)
        {
LABEL_128:
          std::vector<float>::vector(&v416, ((v108 << 30) + 0x100000000) >> 32);
          std::vector<float>::vector(&v414, ((v108 << 30) + 0x100000000) >> 32);
          long long v123 = (float *)v345;
          long long v124 = (float *)v416;
          uint64_t v125 = (float *)v414;
          if ((int)((unint64_t)v108 >> 2) >= 2)
          {
            uint64_t v126 = ((unint64_t)v108 >> 2) - 1;
            std::__split_buffer<std::string>::pointer v127 = (float *)(v414 + 4);
            int v128 = (float *)(v416 + 4);
            std::string::size_type v129 = (float *)(v346 - 4);
            int v130 = (float *)((char *)v345 + 4);
            do
            {
              *v128++ = *v130 - *v129;
              float v131 = *v130++;
              float v132 = v131;
              float v133 = *v129--;
              *v127++ = v132 + v133;
              --v126;
            }
            while (v126);
          }
          float *v124 = *v123;
          *uint64_t v125 = *v123;
          uint64_t v134 = v108 << 30 >> 30;
          *(float *)((char *)v124 + v134) = -*v123;
          *(float *)((char *)v125 + v134) = *v123;
          uint64_t v135 = *((void *)&v416 + 1);
          if (((unint64_t)v108 >> 2))
          {
            if (*((float **)&v416 + 1) != v124)
            {
              unint64_t v143 = (uint64_t)(*((void *)&v416 + 1) - (void)v124) >> 2;
              if (v143 <= 1) {
                unint64_t v143 = 1;
              }
              float v144 = 0.0;
              do
              {
                float v144 = v144 + *v124;
                *v124++ = v144;
                --v143;
              }
              while (v143);
            }
            uint64_t v142 = v135 - 4;
            *((void *)&v416 + 1) = v135 - 4;
            uint64_t v145 = *((void *)&v414 + 1);
            if (*((float **)&v414 + 1) != v125)
            {
              unint64_t v146 = (uint64_t)(*((void *)&v414 + 1) - (void)v125) >> 2;
              if (v146 <= 1) {
                unint64_t v146 = 1;
              }
              float v147 = 0.0;
              do
              {
                float v147 = *v125 - v147;
                *v125++ = v147;
                --v146;
              }
              while (v146);
            }
            *((void *)&v414 + 1) = v145 - 4;
          }
          else
          {
            if (*((float **)&v416 + 1) != v124)
            {
              unint64_t v136 = (uint64_t)(*((void *)&v416 + 1) - (void)v124) >> 2;
              if (v136 <= 1) {
                unint64_t v136 = 1;
              }
              float v137 = 0.0;
              int v138 = v124;
              unint64_t v139 = v136;
              do
              {
                float v137 = *v138 - v137;
                *v138++ = v137;
                --v139;
              }
              while (v139);
              float v140 = 0.0;
              long long v141 = v124;
              do
              {
                float v140 = v140 + *v141;
                *v141++ = v140;
                --v136;
              }
              while (v136);
            }
            uint64_t v142 = v135 - 8;
            *((void *)&v416 + 1) = v135 - 8;
          }
          std::vector<double>::vector(&v412, (unint64_t)(((v142 - (uint64_t)v416) >> 2) + 1) >> 1);
          std::vector<double>::vector(&__p, (unint64_t)(((uint64_t)(*((void *)&v414 + 1) - v414) >> 2) + 1) >> 1);
          long long v148 = v412;
          unint64_t v149 = (uint64_t)(*((void *)&v412 + 1) - v412) >> 3;
          if (*((void *)&v412 + 1) != (void)v412)
          {
            if (v149 <= 1) {
              uint64_t v150 = 1;
            }
            else {
              uint64_t v150 = (uint64_t)(*((void *)&v412 + 1) - v412) >> 3;
            }
            int v151 = (float *)(v416 + ((((uint64_t)(*((void *)&v416 + 1) - v416) >> 1) - 2) & 0xFFFFFFFFFFFFFFFCLL));
            std::string v152 = (double *)v412;
            do
            {
              float v153 = *v151++;
              *v152++ = v153;
              --v150;
            }
            while (v150);
          }
          int v154 = (double *)__p;
          if (*((void *)&__p + 1) != (void)__p)
          {
            unint64_t v155 = (uint64_t)(*((void *)&__p + 1) - __p) >> 3;
            if (v155 <= 1) {
              unint64_t v155 = 1;
            }
            int v156 = (float *)(v414 + ((((uint64_t)(*((void *)&v414 + 1) - v414) >> 1) - 2) & 0xFFFFFFFFFFFFFFFCLL));
            do
            {
              float v157 = *v156++;
              *v154++ = v157;
              --v155;
            }
            while (v155);
          }
          uint64_t v407 = 0;
          long long v406 = 0uLL;
          std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>(&v406, (const void *)v148, *((uint64_t *)&v148 + 1), v149);
          Whisper::chebyshev_transform((double **)&v408, (double **)&v406);
          if ((void)v412)
          {
            *((void *)&v412 + 1) = v412;
            operator delete((void *)v412);
          }
          long long v412 = v408;
          uint64_t v413 = v409;
          if ((void)v406)
          {
            *((void *)&v406 + 1) = v406;
            operator delete((void *)v406);
          }
          uint64_t v405 = 0;
          long long v404 = 0uLL;
          std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>(&v404, (const void *)__p, *((uint64_t *)&__p + 1), (uint64_t)(*((void *)&__p + 1) - __p) >> 3);
          Whisper::chebyshev_transform((double **)&v408, (double **)&v404);
          if ((void)__p)
          {
            *((void *)&__p + 1) = __p;
            operator delete((void *)__p);
          }
          long long __p = v408;
          uint64_t v411 = v409;
          if ((void)v404)
          {
            *((void *)&v404 + 1) = v404;
            operator delete((void *)v404);
          }
          uint64_t v403 = 0;
          int v401 = 0;
          std::string v402 = 0;
          std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>(&v401, (const void *)v412, *((uint64_t *)&v412 + 1), (uint64_t)(*((void *)&v412 + 1) - v412) >> 3);
          Whisper::find_real_roots_cacm283((uint64_t *)&v408, (uint64_t *)&v401);
          if (v401)
          {
            std::string v402 = v401;
            operator delete(v401);
          }
          uint64_t v397 = 0;
          std::string v395 = 0;
          uint64_t v396 = 0;
          std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>(&v395, (const void *)__p, *((uint64_t *)&__p + 1), (uint64_t)(*((void *)&__p + 1) - __p) >> 3);
          Whisper::find_real_roots_cacm283((uint64_t *)&v398, (uint64_t *)&v395);
          if (v395)
          {
            uint64_t v396 = v395;
            operator delete(v395);
          }
          std::vector<float>::vector(&v392, ((v399 - (unsigned char *)v398) >> 3) + ((uint64_t)(*((void *)&v408 + 1) - v408) >> 3));
          long long v158 = (double *)v408;
          long long v159 = (char *)v392;
          unint64_t v160 = (uint64_t)(*((void *)&v408 + 1) - v408) >> 3;
          if (*((void *)&v408 + 1) != (void)v408)
          {
            if (v160 <= 1) {
              uint64_t v161 = 1;
            }
            else {
              uint64_t v161 = (uint64_t)(*((void *)&v408 + 1) - v408) >> 3;
            }
            uint64_t v162 = (float *)v392;
            do
            {
              long double v163 = *v158++;
              float v164 = acos(v163);
              *v162++ = v164;
              --v161;
            }
            while (v161);
          }
          int64_t v165 = (double *)v398;
          if (v399 != v398)
          {
            if ((unint64_t)((v399 - (unsigned char *)v398) >> 3) <= 1) {
              uint64_t v166 = 1;
            }
            else {
              uint64_t v166 = (v399 - (unsigned char *)v398) >> 3;
            }
            long long v167 = (float *)&v159[4 * v160];
            do
            {
              long double v168 = *v165++;
              float v169 = acos(v168);
              *v167++ = v169;
              --v166;
            }
            while (v166);
          }
          std::__sort<std::__less<float,float> &,float *>();
          if (v398)
          {
            int v399 = v398;
            operator delete(v398);
          }
          if ((void)v408)
          {
            *((void *)&v408 + 1) = v408;
            operator delete((void *)v408);
          }
          if ((void)__p)
          {
            *((void *)&__p + 1) = __p;
            operator delete((void *)__p);
          }
          if ((void)v412)
          {
            *((void *)&v412 + 1) = v412;
            operator delete((void *)v412);
          }
          if ((void)v414)
          {
            *((void *)&v414 + 1) = v414;
            operator delete((void *)v414);
          }
          if ((void)v416)
          {
            *((void *)&v416 + 1) = v416;
            operator delete((void *)v416);
          }
        }
        else
        {
          std::vector<float>::vector(&v392, (v108 >> 2) - 1);
          if (v393 != v392)
          {
            unint64_t v112 = (v393 - (unsigned char *)v392) >> 2;
            double v113 = (double)(v112 + 1);
            if (v112 <= 1) {
              uint64_t v114 = 1;
            }
            else {
              uint64_t v114 = (v393 - (unsigned char *)v392) >> 2;
            }
            unint64_t v115 = (v114 + 1) & 0xFFFFFFFFFFFFFFFELL;
            uint64x2_t v116 = (uint64x2_t)vdupq_n_s64(v114 - 1);
            int64x2_t v117 = (int64x2_t)xmmword_20D6072C0;
            unint64_t v118 = (float *)((char *)v392 + 4);
            do
            {
              int32x2_t v119 = vmovn_s64((int64x2_t)vcgeq_u64(v116, (uint64x2_t)v117));
              int64x2_t v120 = vaddq_s64(v117, vdupq_n_s64(1uLL));
              if (v119.i8[0])
              {
                float v121 = (double)v120.i32[0] * 3.14159265 / v113;
                *(v118 - 1) = v121;
              }
              if (v119.i8[4])
              {
                float v122 = (double)v120.i32[2] * 3.14159265 / v113;
                *unint64_t v118 = v122;
              }
              int64x2_t v117 = vaddq_s64(v117, vdupq_n_s64(2uLL));
              v118 += 2;
              v115 -= 2;
            }
            while (v115);
          }
        }
        if (v19) {
          operator delete(v19);
        }
        long long v170 = v392;
        uint64_t v171 = (uint64_t)v393;
        uint64_t v394 = 0;
        unsigned int v392 = 0;
        uint64_t v393 = 0;
        if (v345)
        {
          v346 = v345;
          operator delete(v345);
        }
        uint64_t v344 = 0;
        long long v343 = 0uLL;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v343, v170, v171, (v171 - (uint64_t)v170) >> 2);
        if (*(unsigned char *)(a2 + 1))
        {
          long long v172 = v343;
          uint64_t v173 = (float *)v343;
          if (*((void *)&v343 + 1) != (void)v343)
          {
            double v174 = (float)*(int *)(a2 + 48) * 0.5;
            float v175 = *(float *)(a2 + 8) * 3.14159265 / v174;
            float v176 = *(float *)(a2 + 12) * 3.14159265 / v174;
            unint64_t v177 = (uint64_t)(*((void *)&v343 + 1) - v343) >> 2;
            if (v177 <= 1) {
              unint64_t v177 = 1;
            }
            do
            {
              float v178 = *v173;
              if (*v173 > v175 && v178 < v176) {
                *uint64_t v173 = v178
              }
                      * (float)(*(float *)(a2 + 16)
                              + (float)((float)((float)-(float)(v178 - v175) / (float)(v176 - v175))
                                      * (float)(*(float *)(a2 + 16) - *(float *)(a2 + 20))));
              ++v173;
              --v177;
            }
            while (v177);
          }
        }
        else
        {
          long long v172 = v343;
        }
        long long v343 = 0uLL;
        uint64_t v344 = 0;
        uint64_t v180 = *((void *)&v172 + 1);
        if (v170)
        {
          v307 = (void *)v172;
          operator delete(v170);
          std::string::const_iterator v181 = v307;
          if ((void)v343)
          {
            *((void *)&v343 + 1) = v343;
            operator delete((void *)v343);
          }
        }
        else
        {
          std::string::const_iterator v181 = (void *)v172;
        }
        uint64_t v341 = 0;
        uint64_t v342 = 0;
        __int16 v340 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v340, v181, v180, (v180 - (uint64_t)v181) >> 2);
        Whisper::whisper_formant_sharpening((float **)&v416, a2, (uint64_t)&v340);
        if (v181) {
          operator delete(v181);
        }
        long long v182 = v416;
        if (v340)
        {
          uint64_t v341 = v340;
          operator delete(v340);
        }
        v338 = 0;
        uint64_t v339 = 0;
        v337 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v337, (const void *)v182, *((uint64_t *)&v182 + 1), (uint64_t)(*((void *)&v182 + 1) - v182) >> 2);
        Whisper::whisper_reduce_first_formant((float **)&v416, a2, (uint64_t)&v337);
        if ((void)v182) {
          operator delete((void *)v182);
        }
        long long v183 = v416;
        if (v337)
        {
          v338 = v337;
          operator delete(v337);
        }
        uint64_t v335 = 0;
        uint64_t v336 = 0;
        uint64_t v334 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v334, (const void *)v183, *((uint64_t *)&v183 + 1), (uint64_t)(*((void *)&v183 + 1) - v183) >> 2);
        uint64_t v19 = v334;
        uint64_t v184 = (uint64_t)v335;
        if (*(unsigned char *)(a2 + 4) && v335 != v334)
        {
          if ((unint64_t)((v335 - (unsigned char *)v334) >> 2) <= 1) {
            uint64_t v185 = 1;
          }
          else {
            uint64_t v185 = (v335 - (unsigned char *)v334) >> 2;
          }
          float v186 = (float *)v334;
          do
          {
            double v187 = *v186;
            float v188 = *(float *)(a2 + 40);
            __float2 v189 = __sincosf_stret(*v186);
            float v190 = v187 + atan((float)(v188 * v189.__sinval) / (1.0 - (float)(v188 * v189.__cosval))) * 2.0;
            *v186++ = v190;
            --v185;
          }
          while (v185);
        }
        uint64_t v334 = 0;
        uint64_t v335 = 0;
        uint64_t v336 = 0;
        if ((void)v183)
        {
          operator delete((void *)v183);
          if (v334)
          {
            uint64_t v335 = v334;
            operator delete(v334);
          }
        }
        unint64_t v329 = 0;
        uint64_t v330 = 0;
        uint64_t v328 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v328, v19, v184, (v184 - (uint64_t)v19) >> 2);
        uint64_t v191 = v329 - (unsigned char *)v328;
        unint64_t v192 = (unint64_t)(v329 - (unsigned char *)v328) >> 2;
        long long v416 = 0uLL;
        uint64_t v417 = 0;
        long long v414 = 0uLL;
        uint64_t v415 = 0;
        if (((v329 - (unsigned char *)v328) & 4) != 0)
        {
          int v201 = v192 + 2;
          if ((int)v192 >= -1) {
            int v201 = v192 + 1;
          }
          std::vector<double>::resize((uint64_t)&v416, (uint64_t)v201 >> 1);
          double v22 = 16.0;
          unint64_t v202 = (v192 - 1);
          if ((int)v192 >= 1)
          {
            uint64_t v203 = 0;
            std::string::size_type v204 = (float *)v328;
            char v205 = (double *)v416;
            do
            {
              *v205++ = v204[v203];
              v203 += 2;
            }
            while (v203 < (int)(v191 >> 2));
            if ((int)v192 > 2)
            {
              std::vector<double>::resize((uint64_t)&v414, v202 >> 1);
              long long v206 = (float *)v328;
              int v207 = (double *)v414;
              unint64_t v208 = 1;
              do
              {
                *v207++ = v206[v208];
                v208 += 2;
              }
              while (v208 < v202);
            }
          }
        }
        else
        {
          if ((v192 & 0x80000000) == 0) {
            int v193 = (unint64_t)(v329 - (unsigned char *)v328) >> 2;
          }
          else {
            int v193 = v192 + 1;
          }
          unint64_t v194 = (uint64_t)v193 >> 1;
          std::vector<double>::resize((uint64_t)&v416, v194);
          double v22 = 16.0;
          std::vector<double>::resize((uint64_t)&v414, v194);
          if ((int)v192 >= 1)
          {
            uint64_t v195 = 0;
            std::vector<std::string> v196 = (float *)v328;
            uint64_t v197 = (double *)v416;
            uint64_t v198 = (int)(v191 >> 2);
            do
            {
              *v197++ = v196[v195];
              v195 += 2;
            }
            while (v195 < v198);
            if ((int)v192 >= 2)
            {
              uint64_t v199 = (double *)v414;
              uint64_t v200 = 1;
              do
              {
                *v199++ = v196[v200];
                v200 += 2;
              }
              while (v200 < v198);
            }
          }
        }
        *(void *)&long long __p = 0x3FF0000000000000;
        std::vector<double>::vector(&v412, 3uLL, &__p);
        *(void *)&long long v408 = 0x3FF0000000000000;
        std::vector<double>::vector(&__p, 3uLL, &v408);
        *(void *)&long long v406 = 0x3FF0000000000000;
        std::vector<double>::vector(&v408, 1uLL, &v406);
        *(void *)&long long v404 = 0x3FF0000000000000;
        std::vector<double>::vector(&v406, 1uLL, &v404);
        uint64_t v209 = v416;
        if (*((void *)&v416 + 1) != (void)v416)
        {
          unint64_t v210 = 0;
          do
          {
            long double v211 = cos(*(long double *)(v209 + 8 * v210));
            *(long double *)(v412 + 8) = v211 * -2.0;
            uint64_t v403 = 0;
            int v401 = 0;
            std::string v402 = 0;
            std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>(&v401, (const void *)v408, *((uint64_t *)&v408 + 1), (uint64_t)(*((void *)&v408 + 1) - v408) >> 3);
            int v399 = 0;
            std::string v398 = 0;
            uint64_t v400 = 0;
            std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>(&v398, (const void *)v412, *((uint64_t *)&v412 + 1), (uint64_t)(*((void *)&v412 + 1) - v412) >> 3);
            Whisper::convolve(&v404, (uint64_t **)&v401, (uint64_t)&v398);
            if ((void)v408)
            {
              *((void *)&v408 + 1) = v408;
              operator delete((void *)v408);
            }
            long long v408 = v404;
            uint64_t v409 = v405;
            uint64_t v405 = 0;
            long long v404 = 0uLL;
            if (v398)
            {
              int v399 = v398;
              operator delete(v398);
            }
            if (v401)
            {
              std::string v402 = v401;
              operator delete(v401);
            }
            ++v210;
            uint64_t v209 = v416;
          }
          while (v210 < (uint64_t)(*((void *)&v416 + 1) - v416) >> 3);
        }
        if ((int)v192 >= 3)
        {
          uint64_t v212 = v414;
          if (*((void *)&v414 + 1) != (void)v414)
          {
            unint64_t v213 = 0;
            do
            {
              long double v214 = cos(*(long double *)(v212 + 8 * v213));
              *(long double *)(__p + 8) = v214 * -2.0;
              uint64_t v397 = 0;
              std::string v395 = 0;
              uint64_t v396 = 0;
              std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>(&v395, (const void *)v406, *((uint64_t *)&v406 + 1), (uint64_t)(*((void *)&v406 + 1) - v406) >> 3);
              uint64_t v393 = 0;
              unsigned int v392 = 0;
              uint64_t v394 = 0;
              std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>(&v392, (const void *)__p, *((uint64_t *)&__p + 1), (uint64_t)(*((void *)&__p + 1) - __p) >> 3);
              Whisper::convolve(&v404, (uint64_t **)&v395, (uint64_t)&v392);
              if ((void)v406)
              {
                *((void *)&v406 + 1) = v406;
                operator delete((void *)v406);
              }
              long long v406 = v404;
              uint64_t v407 = v405;
              uint64_t v405 = 0;
              long long v404 = 0uLL;
              if (v392)
              {
                uint64_t v393 = v392;
                operator delete(v392);
              }
              if (v395)
              {
                uint64_t v396 = v395;
                operator delete(v395);
              }
              ++v213;
              uint64_t v212 = v414;
            }
            while (v213 < (uint64_t)(*((void *)&v414 + 1) - v414) >> 3);
          }
        }
        if (v192)
        {
          *(void *)&long long v390 = 0;
          uint64_t v215 = v106;
          std::vector<double>::vector(&v404, 3uLL, &v390);
          uint64_t v217 = v404;
          *(void *)long long v404 = 0xBFF0000000000000;
          *(void *)(v217 + 16) = 0x3FF0000000000000;
          uint64_t v389 = 0;
          uint64_t v388 = 0;
          long long v387 = 0;
          std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>(&v387, (const void *)v406, *((uint64_t *)&v406 + 1), (uint64_t)(*((void *)&v406 + 1) - v406) >> 3);
          char v385 = 0;
          long long v384 = 0;
          uint64_t v386 = 0;
          std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>(&v384, (const void *)v404, *((uint64_t *)&v404 + 1), (uint64_t)(*((void *)&v404 + 1) - v404) >> 3);
          Whisper::convolve(&v390, (uint64_t **)&v387, (uint64_t)&v384);
          if ((void)v406)
          {
            *((void *)&v406 + 1) = v406;
            operator delete((void *)v406);
          }
          long long v406 = v390;
          uint64_t v407 = v391;
          uint64_t v391 = 0;
          long long v390 = 0uLL;
          if (v384)
          {
            char v385 = v384;
            operator delete(v384);
          }
          uint64_t v216 = (uint64_t *)v387;
          if (v387)
          {
            uint64_t v388 = v387;
LABEL_294:
            operator delete(v216);
          }
        }
        else
        {
          *(void *)&long long v390 = 0x3FF0000000000000;
          uint64_t v215 = v106;
          std::vector<double>::vector(&v404, 2uLL, &v390);
          uint64_t v389 = 0;
          long long v387 = 0;
          uint64_t v388 = 0;
          std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>(&v387, (const void *)v408, *((uint64_t *)&v408 + 1), (uint64_t)(*((void *)&v408 + 1) - v408) >> 3);
          char v385 = 0;
          long long v384 = 0;
          uint64_t v386 = 0;
          std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>(&v384, (const void *)v404, *((uint64_t *)&v404 + 1), (uint64_t)(*((void *)&v404 + 1) - v404) >> 3);
          Whisper::convolve(&v390, (uint64_t **)&v387, (uint64_t)&v384);
          if ((void)v408)
          {
            *((void *)&v408 + 1) = v408;
            operator delete((void *)v408);
          }
          long long v408 = v390;
          uint64_t v409 = v391;
          uint64_t v391 = 0;
          long long v390 = 0uLL;
          if (v384)
          {
            char v385 = v384;
            operator delete(v384);
          }
          if (v387)
          {
            uint64_t v388 = v387;
            operator delete(v387);
          }
          *(void *)long long v404 = 0xBFF0000000000000;
          uint64_t v383 = 0;
          size_t v381 = 0;
          v382 = 0;
          std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>(&v381, (const void *)v406, *((uint64_t *)&v406 + 1), (uint64_t)(*((void *)&v406 + 1) - v406) >> 3);
          unsigned __int16 v379 = 0;
          uint64_t v378 = 0;
          uint64_t v380 = 0;
          std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>(&v378, (const void *)v404, *((uint64_t *)&v404 + 1), (uint64_t)(*((void *)&v404 + 1) - v404) >> 3);
          Whisper::convolve(&v390, &v381, (uint64_t)&v378);
          if ((void)v406)
          {
            *((void *)&v406 + 1) = v406;
            operator delete((void *)v406);
          }
          long long v406 = v390;
          uint64_t v407 = v391;
          uint64_t v391 = 0;
          long long v390 = 0uLL;
          if (v378)
          {
            unsigned __int16 v379 = v378;
            operator delete(v378);
          }
          uint64_t v216 = v381;
          if (v381)
          {
            v382 = v381;
            goto LABEL_294;
          }
        }
        if ((void)v404)
        {
          *((void *)&v404 + 1) = v404;
          operator delete((void *)v404);
        }
        LODWORD(v404) = 0;
        std::vector<float>::vector(&v331, ((uint64_t)(*((void *)&v408 + 1) - v408) >> 3) - 1, &v404);
        uint64_t v218 = (void *)v408;
        uint64_t v219 = *((void *)&v408 + 1) - v408;
        unint64_t v220 = (void *)v406;
        if (*((void *)&v408 + 1) - (void)v408 < 9uLL)
        {
          if ((void)v406) {
            goto LABEL_305;
          }
        }
        else
        {
          uint64_t v221 = v219 >> 3;
          if ((unint64_t)(v219 >> 3) <= 2) {
            uint64_t v222 = 2;
          }
          else {
            uint64_t v222 = v219 >> 3;
          }
          uint64_t v223 = v222 - 1;
          std::string::size_type v224 = &v331[4 * v221 - 8];
          uint64_t v225 = (double *)(v406 + 8);
          float v226 = (double *)(v408 + 8);
          do
          {
            double v227 = *v226++;
            double v228 = v227;
            double v229 = *v225++;
            *(float *)&double v228 = (v228 + v229) * 0.5;
            *(_DWORD *)std::string::size_type v224 = LODWORD(v228);
            v224 -= 4;
            --v223;
          }
          while (v223);
LABEL_305:
          *((void *)&v406 + 1) = v220;
          operator delete(v220);
          uint64_t v218 = (void *)v408;
        }
        if (v218)
        {
          *((void *)&v408 + 1) = v218;
          operator delete(v218);
        }
        if ((void)__p)
        {
          *((void *)&__p + 1) = __p;
          operator delete((void *)__p);
        }
        if ((void)v412)
        {
          *((void *)&v412 + 1) = v412;
          operator delete((void *)v412);
        }
        if ((void)v414)
        {
          *((void *)&v414 + 1) = v414;
          operator delete((void *)v414);
        }
        if ((void)v416)
        {
          *((void *)&v416 + 1) = v416;
          operator delete((void *)v416);
        }
        if (v215) {
          operator delete(v215);
        }
        uint64_t v73 = v331;
        uint64_t v74 = v332;
        uint64_t v332 = 0;
        uint64_t v333 = 0;
        v331 = 0;
        if (v328)
        {
          unint64_t v329 = v328;
          operator delete(v328);
        }
      }
      int v306 = (void *)v73;
      if (*(unsigned char *)(a2 + 5))
      {
        unint64_t v317 = 0;
        uint64_t v318 = 0;
        unint64_t v316 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v316, v370, (uint64_t)v371, (v371 - (unsigned char *)v370) >> 2);
        unint64_t v313 = 0;
        unint64_t v314 = 0;
        uint64_t v315 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v313, v73, v74, (v74 - (uint64_t)v73) >> 2);
        uint64_t v310 = 0;
        unint64_t v311 = 0;
        uint64_t v312 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v310, (const void *)v372, *((uint64_t *)&v372 + 1), (uint64_t)(*((void *)&v372 + 1) - v372) >> 2);
        float v230 = *(float *)(a2 + 44);
        uint64_t v231 = v311 - (unsigned char *)v310;
        unint64_t v232 = (unint64_t)(v317 - (unsigned char *)v316) >> 2;
        uint64_t v233 = v314 - (unsigned char *)v313;
        unint64_t v234 = (unint64_t)(v314 - (unsigned char *)v313) >> 2;
        if ((int)v232 < (int)v234) {
          uint64_t v235 = (v234 + 1);
        }
        else {
          uint64_t v235 = v232;
        }
        LODWORD(v416) = 0;
        std::vector<float>::vector(&__p, (int)(v231 >> 2), &v416);
        if ((int)v232 <= (int)v234) {
          int v236 = v234;
        }
        else {
          int v236 = v232;
        }
        *(void *)&long long v414 = 0;
        std::vector<double>::vector(&v416, v236 + 2, &v414);
        *(void *)&long long v412 = 0;
        std::vector<double>::vector(&v414, ((v233 << 30) + 0x200000000) >> 32, &v412);
        uint64_t v413 = 0;
        long long v412 = 0uLL;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v412, v313, (uint64_t)v314, (v314 - (unsigned char *)v313) >> 2);
        double v237 = v230;
        uint64_t v238 = (v234 - 1);
        uint64_t v239 = (float *)v412;
        float v240 = *(float *)(v412 + 4 * (int)v238);
        float v241 = *(float *)v412;
        long long v242 = (double *)v414;
        *(double *)(v414 + 8 * (int)v238) = v240 * v237 / *(float *)v412;
        if ((int)v234 <= 2)
        {
          double v244 = -v237;
          double v243 = 0.0;
        }
        else
        {
          double v243 = (float)(v240 / v241);
          double v244 = -v237;
          unint64_t v245 = v238 + 1;
          do
          {
            double v246 = v243;
            double v243 = (float)(v239[(v245 - 2)] / v241) + v244 * v243;
            v242[(v245-- - 2)] = v246 + v237 * v243;
          }
          while (v245 > 2);
        }
        *long long v242 = v243;
        uint64_t v263 = (int)(v233 >> 2);
        v242[v263] = v244 * v243 + 1.0;
        *((void *)&v412 + 1) = v239;
        operator delete(v239);
        if ((int)((unint64_t)v231 >> 2) >= 1)
        {
          uint64_t v264 = 0;
          double v265 = 1.0 / *(float *)v313;
          unint64_t v266 = (float *)v310;
          int v267 = (double *)v414;
          uint64_t v268 = (double *)v416;
          char v269 = (float *)v316;
          uint64_t v270 = __p;
          do
          {
            double v271 = v265 * v266[v264];
            unint64_t v272 = v267;
            unint64_t v273 = v268;
            uint64_t v274 = ((unint64_t)v233 >> 2);
            if ((int)v234 >= 1)
            {
              do
              {
                double v275 = *v272++;
                double v276 = v275;
                double v277 = *v273++;
                double v271 = v271 - v276 * v277;
                --v274;
              }
              while (v274);
            }
            float v278 = *v269;
            double v279 = v271 / v267[v263];
            if ((int)v235 >= 1)
            {
              double v280 = *v268;
              std::string::size_type v281 = v268 + 1;
              uint64_t v282 = v235;
              double v283 = v279;
              do
              {
                double v284 = *v281;
                double v285 = *v281 - v283;
                *(v281 - 1) = v283;
                double v283 = v280 + v237 * v285;
                ++v281;
                double v280 = v284;
                --v282;
              }
              while (v282);
            }
            float v286 = v279 * v278 + 0.0;
            *(float *)(v270 + 4 * v264++) = v286;
          }
          while (v264 != ((unint64_t)v231 >> 2));
        }
        if ((void)v414)
        {
          *((void *)&v414 + 1) = v414;
          operator delete((void *)v414);
        }
        unint64_t v7 = v294;
        uint64_t v17 = v299;
        uint64_t v21 = v301;
        float v23 = 5.0;
        if ((void)v416)
        {
          *((void *)&v416 + 1) = v416;
          operator delete((void *)v416);
        }
        if ((void)v372)
        {
          *((void *)&v372 + 1) = v372;
          operator delete((void *)v372);
        }
        long long v372 = __p;
        uint64_t v373 = v411;
        uint64_t v411 = 0;
        long long __p = 0uLL;
        if (v310)
        {
          unint64_t v311 = v310;
          operator delete(v310);
        }
        if (v313)
        {
          unint64_t v314 = v313;
          operator delete(v313);
        }
        unint64_t v262 = v316;
        if (!v316) {
          goto LABEL_377;
        }
        unint64_t v317 = v316;
      }
      else
      {
        v326 = 0;
        uint64_t v327 = 0;
        v325 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v325, v370, (uint64_t)v371, (v371 - (unsigned char *)v370) >> 2);
        v322 = 0;
        v323 = 0;
        uint64_t v324 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v322, v73, v74, (v74 - (uint64_t)v73) >> 2);
        v319 = 0;
        v320 = 0;
        uint64_t v321 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v319, (const void *)v372, *((uint64_t *)&v372 + 1), (uint64_t)(*((void *)&v372 + 1) - v372) >> 2);
        unint64_t v7 = v294;
        uint64_t v17 = v299;
        long long v416 = 0uLL;
        uint64_t v417 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v416, v322, (uint64_t)v323, (v323 - (unsigned char *)v322) >> 2);
        long long v247 = v416;
        if ((void)v416 != *((void *)&v416 + 1))
        {
          uint64_t v248 = (_DWORD *)(*((void *)&v416 + 1) - 4);
          if (*((void *)&v416 + 1) - 4 > (unint64_t)v416)
          {
            unint64_t v249 = v416 + 4;
            do
            {
              int v250 = *(_DWORD *)(v249 - 4);
              *(_DWORD *)(v249 - 4) = *v248;
              *v248-- = v250;
              BOOL v251 = v249 >= (unint64_t)v248;
              v249 += 4;
            }
            while (!v251);
          }
        }
        LODWORD(v412) = 0;
        std::vector<float>::vector(&v414, (v320 - (unsigned char *)v319) >> 2, &v412);
        uint64_t v252 = (float *)v319;
        if (v320 != v319)
        {
          uint64_t v253 = 0;
          uint64_t v254 = (*((void *)&v247 + 1) - (void)v247) >> 2;
          int v255 = 1;
          uint64_t v256 = v414;
          do
          {
            if (v255 >= (int)v254) {
              int v257 = (*((void *)&v247 + 1) - (void)v247) >> 2;
            }
            else {
              int v257 = v255;
            }
            float v258 = v252[v253];
            unint64_t v259 = v253 + 1;
            if ((int)v253 + 1 >= (int)v254) {
              int v260 = (*((void *)&v247 + 1) - (void)v247) >> 2;
            }
            else {
              int v260 = v253 + 1;
            }
            float v261 = v258
                 - cblas_dsdot(v260 - 1, (const float *)(v256 + 4 * ((int)v253 - v257 + 1)), 1, (const float *)(v416 + 4 * ((int)v254 - v260)), 1);
            uint64_t v256 = v414;
            *(float *)(v414 + 4 * v253) = v261;
            uint64_t v252 = (float *)v319;
            ++v255;
            ++v253;
          }
          while (v259 < (v320 - (unsigned char *)v319) >> 2);
        }
        if ((void)v416)
        {
          *((void *)&v416 + 1) = v416;
          operator delete((void *)v416);
        }
        uint64_t v21 = v301;
        float v23 = 5.0;
        if ((void)v372)
        {
          *((void *)&v372 + 1) = v372;
          operator delete((void *)v372);
        }
        long long v372 = v414;
        uint64_t v373 = v415;
        uint64_t v415 = 0;
        long long v414 = 0uLL;
        if (v319)
        {
          v320 = v319;
          operator delete(v319);
        }
        if (v322)
        {
          v323 = v322;
          operator delete(v322);
        }
        unint64_t v262 = v325;
        if (!v325) {
          goto LABEL_377;
        }
        v326 = v325;
      }
      operator delete(v262);
LABEL_377:
      if (v5)
      {
        uint64_t v287 = (float *)v369[0];
        v288 = (float *)(*a1 + v17);
        v289 = (float *)(v372 + 4 * *(int *)(a2 + 52));
        unint64_t v290 = v5;
        do
        {
          float v291 = *v289++;
          float v292 = v291;
          float v293 = *v287++;
          float *v288 = *v288 + (float)(v292 * v293);
          ++v288;
          --v290;
        }
        while (v290);
      }
LABEL_380:
      unint64_t v18 = ++v21 * v304;
      unint64_t v24 = v21 * v304 + v5;
      v17 += 4 * v304;
      if (v24 >= v7) {
        goto LABEL_383;
      }
    }
  }
  uint64_t v309 = 0;
  uint64_t v19 = 0;
  int v306 = 0;
LABEL_383:
  if (v369[0])
  {
    v369[1] = v369[0];
    operator delete(v369[0]);
  }
  if (v19) {
    operator delete(v19);
  }
  if (v309) {
    operator delete(v309);
  }
  if (v306) {
    operator delete(v306);
  }
  if (v370)
  {
    std::string v371 = v370;
    operator delete(v370);
  }
  if ((void)v372)
  {
    *((void *)&v372 + 1) = v372;
    operator delete((void *)v372);
  }
  if (v374)
  {
    std::string::size_type v375 = v374;
    operator delete(v374);
  }
  if (__dst)
  {
    uint64_t v377 = __dst;
    operator delete(__dst);
  }
}